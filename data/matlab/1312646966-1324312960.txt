Seems I got a bit ahead of myself. I am having trouble simply getting all my data into matlab in a coherent way. I have worked before with simple graphs but I have never imported 3d data. I have a large number of flat text files with jacobian matrices in them and I am having no trouble inputing them one at a time but that makes each time slice its own variable. Is there a load function that will put all the data into one 3 dimensional array?
I don't think so. To do that your best bet is to just reshape the 2d matrix. So for example if your jacobians are 100x100 and you have 3 time slices of data you'll import a 300x100 matrix. Then you can just use data = reshape( raw_data , 100 , 100 , 3 ) to create the 3d matrix. Once you have those imported, if you do something like for i = 1 : n_time_steps imagesc( data(:,:,i) ) pause( 1 ) end to create a kind of animation for yourself to watch the magnitudes change over time. 
The simplest thing would be to store it as a "2D text file" and use reshape. If you need to, include one header line describing the file format, or even include a line of matlab code that reads the file. something like: reshape(textscan(fid,'%d','headerlines',1),[a b c]);
I'd just do it entirely linearly. Just a 1-D vector that you then reshape. But it's the same idea. 
You can pass white noise through a filter to get a signal with whatever spectral shape you want.
Thanks for the reply. I am having a bit of trouble with reshape though. The 3d matrix I get as a result seems to be shifted in an odd manner. Depending on the number of 3rd dimensions I have the data is shifted 3 cols to the right and seemingly padded with 0's. I am importing a 54x74x4, before the reshape the arrangement looks fine in the 2d matrix. After it is shifted. Also I am having trouble viewing the 3d matrix. Why are the 2d matrix viewer and 3d matrix viewer so completely different? Seems like having a 2d matrix viewer with a drop down for the 3rd+ dimensions would have been much easier to interface with. These badly split text lines make me want to pull my hair out ^_^
Thanks for the reply. I am having a bit of trouble with reshape though. The 3d matrix I get as a result seems to be shifted in an odd manner. Depending on the number of 3rd dimensions I have the data is shifted 3 cols to the right and seemingly padded with 0's. I am importing a 54x74x4, before the reshape the arrangement looks fine in the 2d matrix. After it is shifted. Also I am having trouble viewing the 3d matrix. Why are the 2d matrix viewer and 3d matrix viewer so completely different? Seems like having a 2d matrix viewer with a drop down for the 3rd+ dimensions would have been much easier to interface with. These badly split text lines make me want to pull my hair out ^_^
I always have to scribble on some paper and experiment when I am messing with 3D arrays. Keep in mind that the first dimension is vertical columns, the second dimension is left/right rows, and the third dimension is "in/out" rows (in/out of the screen). Reshape can only take a linear sequence of data, and "insert" elements in dimension order. That means reshape, on its own, may not be enough to get the result you want. Permute() will get you the rest of the way there. If you haven't used it, think of it as a more general version of transpose - you give it a list of dimensions, like [2 3 1], and it will "rotate" your array so that dimension 1 goes to dimension 2, 2 goes to 3, and 3 goes to 1. I'm not sure why you would be getting zero padding. I never use any matrix viewer, so I can't help there. 
oh right that reshape problem you're having is because I gave you bad advice - sorry about that, reshape won't reshape that matrix as desired (it essentially converts the big 2d matrix to a vector and then reshapes that vector to the size you want). There are slick ways of still using reshape but honestly your best bet is just to use a for loop to create that 3d matrix: data = zeros( n_rows , n_cols , n_time_steps ) for i = 1 : n_time_steps data(:,:,i) = raw_data((i-1)*n_rows+1 : i*n_rows,:) end (double check that indexing of raw_data, I didn't actually run it) Yeah viewing matrices like that is always a mess, the only advice I can give about it is to use the command format compact that'll help get rid of the white space a little but it still sucks - the only real answer is to plot stuff.
That helped a whole bunch! The following code seems to have gotten the first 4 lines in correctly (due to them being in separate files) and stepping up the time variable should get everything. data = zeros( n_rows , n_cols , n_time_steps ) for i = 1 : n_time_steps data(:,:,i)=load([num2str(i) '.txt']); end Now I am back to the real issue. I am trying to use the surfc function with this data array. I tried variations on the following: surfc(data(1,,),data(,1,),data(,,1)) But they all didn't work. I am trying to research how to reference the cols properly, if you have any insight that would be helpful. EDIT: I think I found the issue, I have too much data to visualize with surf. I have a 54x74x1000 dataset. For surf we need 3 distinct strings of numbers right?
That helped a whole bunch! The following code seems to have gotten the first 4 lines in correctly (due to them being in separate files) and stepping up the time variable should get everything. data = zeros( n_rows , n_cols , n_time_steps ) for i = 1 : n_time_steps data(:,:,i)=load([num2str(i) '.txt']); end Now I am back to the real issue. I am trying to use the surfc function with this data array. I tried variations on the following: surfc(data(1,,),data(,1,),data(,,1)) But they all didn't work. I am trying to research how to reference the cols properly, if you have any insight that would be helpful. EDIT: I think I found the issue, I have too much data to visualize with surf. I have a 54x74x1000 dataset. For surf we need 3 distinct strings of numbers right?
First, the syntax for what you are trying to do is data(1,:,:). But that is not going to get you a meaningful surface plot - you are trying to use one face of the data "cube" for the x coordinates, a different one for the y, and another one for the z - and those three faces aren't even the same size. I don't know the structure of your data, so it is hard for me to correct your logic. Since you reference the third dimension of your data with a time variable, I suspect you want something more like this: [X Y] = meshgrid(1:n_rows,1:n_cols); Z1 = data(:,:,time) surfc(X,Y,Z1) But this will only show one time step, and so to see the entire dataset you will need to put this in the loop, and pause after displaying each step. There may be a better way to display all the data at once, but it's hard to say without seeing the data. If you just wanted to display every data point in a cloud all at once, then plot3 should be capable of that. If you want to do anything more complicated involving surfaces, then you're probably right about having too much data to do it all at once.
Maybe I'm missing the point, but can't you just solve this by quadrature explicitly as U= Int_0 ^x [1/a(y) (Int_0 ^y f(z)dz + C1]dy+C2? Using your boundary conditions, C2=0 and C1 = -Int_0 ^1 [1/a(y) Int_0 ^y( f(y) )dy]dz/(Int_0 ^1 1/a(z) dz). Edit: sorry that looks like crap.
Okay so let me make sure I understand - you're trying to plot each time slice (a 2d matrix) as a surface. So surf expects the X, Y, and Z matrices in a special kind of form -- do a help meshgrid -- X, Y, and Z for you will be 54x74 matrices. This is different than imagesc which just expects a single input matrix, which for you will be size 54x74 - exactly the same as the Z matrix from surf. Hope that helped.
Yeah it became very apparent what I was trying to do was crazy. So I decided to do separate graphs of each element from a single timestep (there are only 110 after all). I gave up and now I am just wrestling with getting two lines of data on the same graph at the same time with different indicators/colors. Perhaps if I get fancy I will follow one elements changes through all the timesteps in a graph too
Yeah it became very apparent what I was trying to do was crazy. So I decided to do separate graphs of each element from a single timestep (there are only 110 after all). I gave up and now I am just wrestling with getting two lines of data on the same graph at the same time with different indicators/colors. Perhaps if I get fancy I will follow one elements changes through all the timesteps in a graph too
When I was skimming over /new/, I read this as ***Easy Methlab question***
MATLAB only "rounds" the displayed number in the command window. The actual number is kept (to machine precision). Try typing "format long" in the command window. From the MATLAB command window, select: File -&gt; Preferences -&gt; Command Window and look at the text display numeric format. 
Not in this case. &gt;&gt; 1 == hygecdf(144,5497,500,394) ans = 1 Look at the formula in hygecdf. The denominator comes out to: &gt;&gt; nchoosek(5497, 394) Warning: Result may not be exact. Coefficient is greater than 1.000000e+15 and is only accurate to 15 digits &gt; In nchoosek at 66 ans = Inf Eventually, even double precision floating point math will give up and shrug its shoulders.
I am pretty sure in this case that you cannot get any better precision by using the built-in hygecdf();
WARNING: Be careful when you do this. Do not overwrite the built-in function. You can find the value by copying the MATLAB implementation to a new function and making a small change. Basically, do &gt;&gt; matlabroot and go to &lt;matlabroot&gt;\toolbox\stats\stats. Open hygecdf.m and Copy it to your local folder. Rename the function and the filename to something ,maybe OneMinusHygecdf. Change line 60 from p(t) = 1 - F(n(t)-x(t)-1,m(t),m(t)-k(t),n(t)); to p(t) = F(n(t)-x(t)-1,m(t),m(t)-k(t),n(t)); 
I had a similar problem with a gamma and I got round it using the symbolic toolbox to get an exact value. This is horrendously slow but I was at least able to build a look up table for tiny p-vals (huge statistics) which served my purpose. 
this is what Mathematica says: PDF[HypergeometricDistribution[394, 500, 5497], 144] // N 1.759*10^-56 don't know if right.
Could you explain what this does? I'm afraid that I don't understand. 
It directly gives you 1-hygecdf(a,b,c,d). MATLAB was first computing 1-hygecdf(a,b,c,d) and then computing 1-( 1-hygecdf(a,b,c,d)) to get hygecdf(a,b,c,d). This led to the really small value say x , lose its precision when 1-x was computed. Due to limits of numerical computation 1-x gets approximated to 1 for that small a value of x. However, since the value is very small, and since MATLAB computes it numerically, I dont know how trustworthy the result is, as floating point round off errors may creep in.
Hey there, thanks for the response. I'm just trying this method you've used now and I understand it up until the line %operate on filelist{m,1} As I understand, this is basically where I put my own code which reads/analyses/plots data based on the mth file, etc. But is "filelist{m,1}" equivalent to what "data" is from my original code, i.e. the file itself I want to read from? For example, in my files, I want to assign a variable 'alt', which is in the fifth column of all rows of the files, so I would write alt = data(:,5); I've also received an error in my program telling me that there is an error using sort, as my input argument (filelist) must be a cell array of strings. I thought textread did this though?
Import the data and plot it. After you plot the first data set, enter the command hold on This will force subsequent plots to appear on the same figure. Assuming you have one plot per file, you can then create a cell array consisting of all the names of the files you've plotted: filelist = {'file1.xls', 'file2.xls', 'file3.xls'} and so on where file1 is the name of the first file, etc. You can then create a legend out of this cell array by calling: legend(filelist) Alternatively, you can omit the 'hold on' command, and after plotting each data set enter figure; This will generate a new figure window for each plot. Before plotting the next data set, just enter: title('file1.xls') To set the title of the window to the filename. Is this what you were looking for?
This amazingly helpful, thank you so much! I'm away from my work computer for the weekend, but you may see an orangered come Monday morning when I've found a way to misconstrue your straightforward instructions :)
It's probably using Intel's [Math Kernel Library](http://software.intel.com/en-us/articles/intel-mkl/). Intel would like you to buy these, but you can find some free versions on their "Try" page. Another option would be to use OpenCL (or CUDA). It shouldn't be hard to find FFT kernels to use.
Depending on the version of matlab you have, the only parallelized code may be the FFT and the IFFT functions. You can either use FFTW or try to find a CUDA/OpenCL version as suggested by Lexarius.
You might also want to look into Jacket or GPUMat -- both run MATLAB commands on the GPU.
Ok I have it working as you said, is there a way to make it so that each new data set is drawn in a different color line automatically? Edit: using the hold on command
It would be the filename of whatever you want to read, basically. If you wanted to read that file, then you would need to put that in the for loop. If I understand what you are doing here, I would have something like this... for m = 1:size(filelist,1) data = load(filelist{m,1}); alt = data(:,5); % anything else you want to do end As for the error, I don't know what could be causing that without seeing your code.
If you are at the point in optimizing your code that you need to do those in parallel, it may be time for you to stop using MATLAB. That said, you might try offloading the elementwise inversion onto the GPU using MATLAB 2011's [GPU Computing](http://www.mathworks.com/help/toolbox/distcomp/bsic3by.html) capabilities, or making some [Parallel Jobs](http://www.mathworks.com/help/toolbox/distcomp/bqur73g.html). I don't know what kind of performance you're getting now, but I can't guarantee that the effort required (both in programming effort and additional overhead) would be worth the improvement.
This is what I was going to recommend. I don't us much more than 'parfor' in the Parallel toolbox very often, but it has this functionality. However, it may be much more efficient to use a different language if you are able. Depending on what kind of computations you are executing and how many of them you have, the overhead involved in running inside Matlab and using their parbox may use up whatever efficiency you've gained from parallelizing.
point taken. By the way, I've tried matlab's 2011 gpu capabilities and its so-so. I was using a Tesla GPU (Name: 'Tesla M2050') on my school's cluster and trying to see improvement for fft in 1d. I tried comparing fft for vectors of length n = 2^15 and, on avg the gpu is taking twice as long. here is an example of run times: Elapsed time is 0.000456 seconds - CPU run time Elapsed time is 0.000960 seconds - GPU run time The computer also has 8 processors so maybe that's the reason. 
Those run times are very small, 0.46ms and 0.96ms as is the number of elements 2^15 = 32768. GPU has some overhead (system calls, memory transfer) and it gets fast only when number of operations (N*log(N) for FFT for example) gets very large compared to number of function calls. Also small number of operations might be better optimized for CPU. Quick test (i7 920 and GeForce GTX 295) n = 2^23; r = rand(n,1); r_gpu = gpuArray(r); img = rand(2^11); img_gpu = gpuArray(img); imgt = img(1:41,1:41); imgt_gpu = img_gpu(1:41,1:41); %% disp('CPU') tic; a = fft(r);toc tic; a = fft2(img); toc tic; a = conv2(img,imgt); toc tic; a = a*a;toc %% disp('GPU') tic; b = fft(r_gpu);toc tic; b = fft2(img_gpu); toc tic; b = conv2(img_gpu,imgt_gpu); toc tic; b = b*b;toc Prints: CPU Elapsed time is 0.276681 seconds. Elapsed time is 0.068417 seconds. Elapsed time is 0.680774 seconds. Elapsed time is 0.408883 seconds. GPU Elapsed time is 0.041816 seconds. Elapsed time is 0.019846 seconds. Elapsed time is 0.462614 seconds. Elapsed time is 0.268831 seconds. Note that memory transfers to and from the GPU are omitted from the results.
What is the final format that you want for the figure? For example, do you want to export to an image file so you can import into the word document? Is your image a screen capture from within matlab? An exported image file may have better formatting. Try something like: print('-dtiff', 'my_image.tiff', f_handle, '-r300'); and see how that image looks.
It you are computing with a realistic sample of your final array, the I would say that it is not worth parallelizing something that is so quick. The overhead of parallelization is larger than your runtime.
Thanks, I am simply using edit → copy figure than pasting it into word. Whenever I save the figures than import into word, the quality of the figure seems to degrade a lot. Edit: It does seem to work, but the quality is reduced, and the size of the figure is way bigger, and font way smaller than what I set it to. The copy figure method does seem to be messing with the font, if I compare the font in the actual figure to word it is almost identical to what I want. 
Use hold all instead of hold on. More on the hold command [here](http://blogs.mathworks.com/loren/2009/06/03/hold-everything/).
If the onscreen figure looks that good, the easiest option is probably a screen capture. If you are looking for publication quality, I use the print() method above but have a large number of options that I tweak (figure dimensions, font size, line widths) before the export. Let me know if you are interested in these and I'll explain more.
Code: SNR_table = [3.5 6.5 9 16.5 18.5]; % SNR input Data_table = [2.016 3.024 4.032 8.064 9.072]; % Data rate input % or you could just put both in a matrix distance = 1:1000; % sampling points for the distance Data_rate = zeros(length(distance)); for i = 1:length(distance) SNR = Function(i) + K; index = find(SNR_table &lt; SNR,1,'last'); % assuming your SNR_table is in ascending order Data_rate(i) = Data_table(index); end plot(distance, Data_rate); What it does: * The Modulation column is not needed for the algorithm. It's just a name tag. * Your input (SNR required and Data Rate) is stored in SNR_table and Data_table, respectively. * You also provide all the points in the x axis (distance). * For loop goes through these points and, for each, determines: (a) corresponding SNR, using the function Function that you mentioned; (b) the index of the value in the SNR_table that is closest but lower than SNR; (c) the Data_rate element in position index. Let me know if I somehow misunderstood the problem. ** Edit: Function(i) instead of Function(distance), inside the for loop. **
http://en.wikipedia.org/wiki/Weighted_least_squares#Weighted_least_squares 
I am looking for publication quality, I've found a better way of doing it, but it seems a bit time consuming. Now I am doing this: In the fig window, file → save as, *.eps file. Then open with adobe illustrator, change the font, (when I change the font in matlab, adobe doesn't seem to recognize it.) Then export as a .png file with 600 -&gt;1000 dpi. There is still some degredation when I save it, but so far its the best I could come up with. Is there a better/faster way to do it? Here's an example of the quality I get now, [Fig](http://i.imgur.com/re1Kq.png)
 If you have the stats toolbox. http://www.mathworks.com/help/toolbox/stats/bq_w_hm.html#braa3a4-1 Otherwise, google "multivariate least squares regression matlab" and you'll find some 3rd party toolboxes or functions that will get the job done. 
Perfect, thank you!
is this the actual matrix and vector you are working on? or just an example... I suspect an example.. but if its the actual one... C-5 will do the trick.
You're right, it's just an example. The actual matrix and vector are something like this: A = 1 4 2 9 6 5 7 8 13 12 (basically numbers from 1-16) and the vector is B = [ 3+3j 3+2j 3+1j 3 ... etc in a certain pattern] C becomes a matrix containing a respective X+Yj element in based on the element of A so for example C(1,3) = 3+2j because A(1,3) = 2 and B(2) = 3+2j
 [ignore,newA] = ismember(C,B)
Excellent! Thank you! I knew there had to be something like that but my matlab / google - fu was failing me.
 figure; bar(x,w,'c'); %bar graph of x versus w a = axis(); %save current axes limits hold on; plot(x,nw,'-o','LineWidth',2); % line graph of x versus nw axis(a); %restore old axes, in case they changed.
I recently learned the "official" way to ignore specific return values: `[~, newA] = ismember(C,B)`;
**~** only works at the most recent versions of Matlab (R2011x I believe). It's safer to use *ignore*, or some other variable name. 
So I think I tried to help with this when I didn't have matlab available. Is that right? I'm back in the office now (and have been for the last week, sorry). Could you send me the code you are using now? I'll give it a look in the morning.
Or perhaps I was wrong. I was talking to someone else before who had a strangely similar problem. Anyway, let me run your code so I can make more sense of it.
Don't worry about this. That other guy was me, using a secondary account. I do believe there is a fatal flaw in the code I have written out, mainly x21 and x22 never change when they need to. Would you still like me to send you what I have? If so, how? a PM?
Sorry, this was caught in the spam filter. Should be up soon.
I haven't tried this myself, but maybe you can use [this]( http://www.mathworks.com/matlabcentral/fileexchange/20059-myfactor). BTW, if you haven't already, see a description of your problem [here](http://www.mathworks.com.au/matlabcentral/newsreader/view_thread/131072).
You can actually just remove the "if n&gt;2^32" check from the beginning of the function (which means you should copy the function to your working directory, and rename it to factor2 or something). It will still function properly for some inputs - the 2^32 check is conservative somehow - but I'm not sure what the actual failure condition for the function is, so this approach is probably not a good idea. Just thought I'd share it.
I think your notes are for the wrong class, it looks like you're programming C, not MATLAB
Yea I think ur right. I guess I forgot about that class. I found some notes and I assumed they were matlab.
No, you need to make a new factor function, or, as garblesnarky suggested, you can try just removing the check from the beginning. Also, on a lot of platforms, a long is also only 32 bits. long long is what you should use.
The Linux command-line utility "factor" can factor numbers &gt; 2^32
I am not sure why there is a restriction, but you can use this to get the factors n = 600851475143; p = primes(sqrt(n)); p(rem(n,p) == 0)
Maybe the curve fitting toolbox will help? (cftool)
Sadly, I do not have this software :(.
Run a regression model on the data with three trends. First trend should be a constant for all times, second and third should be sin and cosine waves with arguments equal to 2 x pi x frequency of rotation. If you send me some sample data I might be able to quickly modify an old regression model to fit it.
You can also use the [iFit](http://ifit.mccode.org/) library. It's fairly new, and possibly a bit of an overkill, but it's very nice.
the dct should do this as well.
What is the dct?
The discrete cosine transform. The idea is that you can take a set of data points and fit them to basis functions of cosines. Looking at your description of the data, you said that the data points are equispaced, that is that there is an equal angle distance between each datapoint. That actually means that you should be able to speed up the calculation significantly by using the recursive fft function. You can also do filtering in the frequency domain, in order to speed up your calculations. 
Have you tried a simple least-squares fit?
yes, this sounds like the easiest way to me
No I have not, I was asked to perform a cosine fit. I am going to try and attempt this method and see what results I get. 
I can write you up a little .m script if you'd like some help.
Here's an example I just put together. I put a couple of links in there so you can review the composition of transformation matrices. I'm a little rusty on that. %% Transform a surface in 3D %% make some fake data x = linspace(0, 2*pi, 100); y = x; [X, Y] = meshgrid(x,y); Z = cos(X) + sin(5*Y); surf(X,Y,Z) shading interp title('Original view') grid on %% transform the point locations with some rotation matrix % % Review the creation of these things here: % http://en.wikipedia.org/wiki/Rotation_matrix % % For 3D composite rotations (rotate, scale, translate, skew, etc): % http://opencv.willowgarage.com/documentation/camera_calibration_and_3d_reconstruction.html % % % Here, I just do 45 degrees around z-axis T = [cos(pi/4) -sin(pi/4) 0; sin(pi/4) cos(pi/4) 0; 0 0 1]; %% reshape X,Y,Z data so we can apply transform % % Each row is ALL of the points (X, Y, or Z) XYZ = [X(:)' ; Y(:)' ; Z(:)']; %% Apply the transform % % This applies T to every X,Y,Z set XYZ2 = T*XYZ; %% reshape the resulting data back into matrices X2 = reshape(XYZ2(1,:), size(X)); Y2 = reshape(XYZ2(2,:), size(X)); Z2 = reshape(XYZ2(3,:), size(X)); %% redisplay figure plot3(X2(:), Y2(:), Z2(:), 'ko') title('Rotated points view') grid on figure surf(X2, Y2, Z2) title('Rotated surface view') shading interp grid on 
Do you have the STATS toolbox? The command [nlinfit](http://www.mathworks.com/help/toolbox/stats/nlinfit.html) will do this: %% make fake data t = linspace(0, 10, 1000)'; x = cos(2*pi*2*t + pi/12) + 0.5*rand(size(t)); plot(t,x) %% make the function to fit % b(1) = magnitude % b(2) = frequency % b(3) = phase offset myfun = @(b,x)b(1)*cos(2*pi*b(2)*x + b(3)); %% use nlinfit to fit it beta = nlinfit(t, x, myfun, [1;2;pi/12]) %% NOTE: the starting guess b0 is very important. %% see if it worked x2 = feval(myfun, beta, t); hold on plot(t,x2,'r')
Wow, well done. It will take me some time to digest this but it looks like it will do the trick. Thanks a lot!
I'd restructure your code to read in one frame at a ime and write it out per frame, if possible. Then combine all the images using a different tool (there are lots of tools that combine a folder of pictures into a movie file)
Sadly I do not have this.
Agreed with this to avoid memory errors. I've spent several minutes looking at your code and can't for the life of me figure out what you're doing in there. I would, however, change your filename creation to something a little smaller. Use this instead of the if statements at the top. This will work for any z that's 99999 (B99999.im7) or lower. f=loadvec(sprintf('B%05d.im7',z)); A hint for pasting in MATLAB code to reddit: CONTROL-A, TAB, CONTROL-C. Then CONTROL-V into reddit. This puts a leading 4 spaces on each line, which is the reddit box command for indented code.
Link in sidebar-------------------&gt; * "[I wrote a basic MATLAB crash course (pdf)](http://dl-web.dropbox.com/u/22654/matlabcrash.pdf) Maybe it will be useful to you!" "I" is a quote... I didn't write it...
I second using sprintf. Also, is there any reason why you chose loadvec over imread?
imcapture is an alternative. Note that getframe is a screen thing so screensavers and occluding windows can screw it up.
Scale the rows by your weights, i.e give wi as the weight for (xi,yi,zi) ( for equation/row axi+byi=zi ) use (xi',yi',zi') instead where xi'=xi * wi,yi'=yi * wi, zi'=zi * wi. 
I ended up getting it to work. Thanks for you diligence and advice, redditors!
 v1 = a1+a2*exp(-3*time/T);
thanks it helped a lot. but if you would, could u help me out with this problem. i know how to do it. but i want to a certain way to put my data in a matrix without manually putting in it. i want a for loop to do it for me. here it is. I have said matrix A of size [1,7] or vector of time values. the time values are calculated along with 3 other coefficients to compute a certain value. i have a FOR loop that takes the time values and precalculated coefficients and inserts them into a function. The function calculates the for output value and displays it. I just wanna put the results into a matrix. EDIT: i have them in columns. so it displays each value and has each result labeled as a column. heres my loop: time is my vector that i mentioned earlier. for k=1:length(time) v1(k)=a1+a2*exp(-3*time(k)/T) en a1 a2 and T are predetermined and time(k) is values from the time matrix/vector
Yep, skip the for loop setup entirely. MATLAB is great at handling vectors.
Epic win.
very nice.
Mind explaining those first two lines really quick?
 Assuming you mean the lines in the post vs the lines in my screen capture: I = mean(imread('cake-maze.jpg'),3) ./ 255; figure; imagesc(bwlabel(I(13:2012,13:2012) &lt; graythresh(I))) **1)** The first line reads in the image, averages the 3 color planes to make an intensity (or grayscale) image (a 2K x 2K 8 bit image) and then I normalize the image by dividing by 255 so the result, I, is a double precision image scaled between 0 and 1. *NOTE, just using any 1 of the 3 color planes vs averaging would work fine* **2a)** I(13:2012,13:2012) this is the portion of the image that has just the maze. Non-maze info outside this area would require more work to ignore.*(1)* **2b)** I(13:2012,13:2012) &lt; graythresh(I) graythresh gives a robust threshold for binarizing an image but the return value is w/r to [0,1] (which is why I bother to normalize the image to 0 and 1 in the first line). *(2)* So the comparison (where lower intensities ==&gt; 1) results in an "inverted" binary maze image where all the maze walls are 1 and all the rest (i.e. the possible path space) is 0. So, given there's a path through the maze, that will yield a path of 0 pixels that separates all the walls, the 1 pixels, into two groups. *(3)* **2c)** bwlabel(I(13:2012,13:2012) &lt; graythresh(I)) Bwlabel finds,labels connected components and so there will be two of them. === *(1)* Actually, I could have solve this without cropping by just labeling the whole image and just chuck anything but the largest two labels/components. That would be a couple of more lines of code (regionprops for area and then a look up table to remove all other labels' pixels and remap the two largest labels image pixel values to 1 and 2) *(2)* Graythresh is otsu's method. Silly overkill for this binary-ish image. I'm sure just a fixed theshold of 0.5 would work fine. If I was to use a hard coded value there would be no reason to normalize the image to begin with between 0 and 1 and a comparison using the 8 bit image to 127 would be fine. *(3)* - A connected component, in the binary image sense, is a maximal set of 1 pixels that can be linked together without jumping over any off pixels (like a standard graphics flood-fill). So, the path through the maze will create 2 connected components (of maze walls) 
Sorry actually using ode15s, but get the same errors when trying to use ode45
For the life of me I can't figure out WHY it's giving the error, but I fixed it. This is a concatenation problem, not an ODE solver problem. In your calculation of egrodes, put parentheses around the last line/element in the array: egrodes=[k7*ek*(1-exp(k3*m/(k1*et))*exp(-k3*m*(t+(exp(-k1*et*t))/(k1*et))))*(t2-y(1) - y(1)*ad/(kd8 + y(1))); k4*ek*(1-exp(k3*m/(k1*et))*exp(-k3*m*(t+(exp(-k1*et*t))/(k1*et))))*(t1-y(2) - y(2)*(ed-y(5))/(kd5 + y(2)) - y(5)); k9*ad*y(1)/(kd8 + y(1)) - d1*y(3); k10*y(3) - d3*y(4) - k16*y(4)*(ed - y(5))*y(2)/(kd5 + y(2)) + k_16*y(5); k16*y(4)*(ed - y(5))*y(2)/(kd5 + y(2)) - k_16*y(5); (k6*(ed - y(5))*y(2)/(kd5 + y(2)) -d2*y(6))]; Also, a note about your file/function name. The convention is that your function name mirror that of the file, else confusion may occur. I recommend that if your file is egrodes, then your function statement be: function dy = egrodes(t,y,k1,k3,k4,k5,k_5,k6,k7,k9,k10,k16,k_16,d1,d2,d3,kd5,kd8,a,b,ed,ek,t1,m,t2,et,r,t3,ad ) and then that big statement I pasted above would be "y = ...." instead of "egrodes = ...." 
I have no idea how this has fixed the problem, but it has. Thank you so much! The hours of frustration that has given me.. And thanks for the tip on the function name, I'll be sure to change it. 
Last row of egrodes: k6*(ed - y(5))*y(2)/(kd5 + y(2)) -d2*y(6) The space before -d2 causes MATLAB to treat that last row as having two columns, while the other rows only have one. This causes the vertical concatenation error you're seeing. 
Then why is the space in say, line 5, not an issue?
A complete guess would be because the "-" sign in the 5 line has two spaces and is being treated as a binary operator, whereas in the 6 line it is right next to a variable with a space to the left and is being treated as a unary operator. (Edit: You can test this hypothesis by adding a space after the minus, rather than surrounding the row in parentheses) Your "egrodes" matrix is very complicated, try splitting it up row by row. This will expose the sizes of each individual row which will allow you to debug errors such as ??? Error using ==&gt; vertcat CAT arguments dimensions are not consistent.
you can try experimenting with matlab's job scheduler... it's actually quite powerful..
I see this is an old post, but I saw it and had to comment. A while back, I had asked a computer-savvy friend, and he recommended [Maxima](http://maxima.sourceforge.net/). There is a great page on Wikipedia about [Maxima](http://en.wikipedia.org/wiki/Maxima_(software)), as well as [other "computer algebra systems."](http://en.wikipedia.org/wiki/Comparison_of_computer_algebra_systems)
I assume you are using symbolic variables; if 'x' is a symbolic variable, use double('x') to get its numerical value.
Thanks! Works like a charm.
Cool! This will help with some simple animations I do. Now teach me how to make subplots not so fuckin' tiny. 
an easier way to deal with plots is to draw it once (and store the plot handle as a variable) and then just update the X or Y data or whatever. for example, use plothandle = plot(x,y); to initially draw the plot. and then, when you want to update it, just use: set(plothandle,'XData',newx,'YData',newy); this will update the data but not redraw everything, saving you loads of time (as you mentioned). You can use these handles to change any part of the plot that you would like, check this out for more info http://www.mathworks.com/support/tech-notes/1200/1205.html 
This is exactly what I've been doing to run dynamic plots - edit `XData` and `YData` on the fly. It just blew my mind that of all things to affect performance of those plots, the once-drawn *legend* affected it the most. That said - when you do the set against `newx` and `newy`, does it replace all previous data with those vectors? Or does it just append the point?
First, when posting code, use formatting (click formatting help below the reply box). It's just four spaces, but it makes it a lot more readable. It looks like your code is basically correct except you're missing the multiplication symbols. Here's how I would have wrote it assuming time, a1, a2, and T are defined: v1=a1+a2*exp(-3*time/T); 
so you dont necessarily need time(k)
You can use the "Variable Precision Integer Arithmetic" toolbox on the [file exchange](http://www.mathworks.com/matlabcentral/fileexchange/22725). Once downloaded: &gt;factor(vpi(600851475143)) &gt;ans = &gt; 71 839 1471 6857
I am a newbie to MATLAB and I am trying to type that expression into the command line, it will spit this error out. How can I make a function through the command line; for example, y=x^2?
right. matlab uses matrix math so any scalar times a matrix multiplies each element individually. However, if you are multiplying two matrixes you have to follow matrix multiplication which is why the following doesnt work: [1 2 3] * [4 5 6] ??? Error using ==&gt; mtimes Inner matrix dimensions must agree. Of course you can always use array multiplication if you just want to multiple each element by it's paired element. [1 2 3] .* [4 5 6] ans = 4 10 18 Use matrixes rather than loops where possible. It's faster.
Here's a bit of code for generating an n by m lattice, where n and m are the numbers of nodes in directions of vectors a and b respectively. Should work for non orthogonal 2D vectors a and b. function [lattice] = getLattice(a, b, m, n) q = sort(mod(1:(n*m), m))'; b = bsxfun(@times, repmat(b, n*m, 1), q); a = repmat(bsxfun(@times, a, (1:n-1)'), m, 1); lattice = a + b; %figure, plot(lattice(:, 1), lattice(:, 2), 'ok'), end If you want the lattice centred about (0, 0) add the following: lattice = bsxfun(@minus, lattice, max(lattice)./2); Not sure how to connect the nodes with lines yet. **EDIT:** corrected some errors
Thank you. In the above code, what are you defining p as to plot it?
I've edited my first post, sorry about the errors.
Perfect. Thanks that will definitely help me plot the array of points.
alright well i have another problem for you. I have an what i believe is the answer but the professor says its supposed to be a bell curve and its just the latter half of the curve. The problem says to generate 10,000 random numbers whose average is 4 and variance is 1. everytime i create the numbers whose average is 4 the variance is over 5. everyone seems to be getting the same thing. i will attempt to post my code in the code form. close all; clear all; home; k=40000; x=rand(1,10000); sum(x); n=k/sum(x) y=n*x; s=sum(y); u=s/10000; %my attempt at calculating variance. for i=1:length(y) variance(i)=((y(i)-u)^2)/10000; end; variance v=var(y)%variance subfunction to obtain variance for m=1:length(y) p(m)=(1/(v*(sqrt(2*pi)))).*exp((-(y(m)-4))^2/(2.*v.^2)); end; hist(p) %plots historgram
I've added a slightly neater way of plotting the point patterns at lattice nodes. This code should work for any array of 2D points pts: function [lattice] = getLattice(a, b, n, m, pts) q = sort(mod(1:(n*m), m))'; b = bsxfun(@times, repmat(b, n*m, 1), q); a = repmat(bsxfun(@times, a, (0:n-1)'), m, 1); lattice = a + b; lattice = bsxfun(@minus, lattice, max(lattice)./2); figure, plot(lattice(:, 1), lattice(:, 2), 'ok'), c = cell(n*m, 1); for i = 1:n*m c(i) = {bsxfun(@plus, lattice(i, :), pts)}; end c = cell2mat(c); hold on, plot(c(:, 1), c(:, 2), '.r'), end Hope you'll succumb to the use of MatLab's array/cell operations eventually.
 a = max(Scores,[],2); MaX = a(2:end); sorry, couldn't resist :)
It replaces previous data, I'm pretty sure. If you want to append points, keep adding the points to your variable(s) and then update the plot each time. Also, even if you have "hold on" set, this method still replaces the data plotted in "plothandle" because you are updating a specific handle. Setting "hold on;" is useful if you want to manage multiple plot handles in this manner, though
if 'Scores' is a 2D matrix, it seems you want the max of the 'Scores' matrix, ignoring the first row. if that is right, then this should do the trick: max(max(A(2:end,:))); if 'Scores' is a higher dimensional matrix, you would have to do it differently...
So you want the maximum element in each row, except in the first row? Why not exclude the first row to begin with? MaX = max(Scores(2:end,:), [], 2); 
Thanks a ton. This works perfectly. I'll read up on the help files of the operations you called. 
 GpA = [Scores(1,:);sum([.3*Scores(2,:);.30*Scores(3,:);.40*Scores(4,:)])] 
damns you!!! this was the very first thing i thought of.
This is my favorite example of Matlab's poor language design. There's no reason why this expression shouldn't work -- simply eliminating the temporary assignment, MaX = max(Scores, [], 2)(2:end) Matlab will fail to parse that, because its parser is utter crap. Octave handles it just fine. 
I'm not clear on the thought process of why you're going from x to u, but here's how I'd approach it.. * First, I'd tweak the variance to whatever I desire by multiplication. * Once you are generating about the right variance, calculate the average of the data. If this isn't correct (it probably wont be) simple addition will get you there. so basically you'd have [x]*m+a... Also, you still don't need those loops :-) p=(1/(v*(sqrt(2*pi)))).*exp((-(y-4)).^2/(2.*v.^2));
GpA = [Scores(1,:); [0.3 0.3 0.4]*Scores(2:4,:)]
Sorry, we're not going to do your homework for you.
Another thing to add to the list of things that Octave does better. Thanks.
go bears!
Your comment spurred me to look up the [differences](http://en.wikibooks.org/wiki/MATLAB_Programming/Differences_between_Octave_and_MATLAB). TIL you can += in Octave, can't understand why they don't add this in Matlab.
i think it's the space between. y=@(x) sqrt(x) would map y(x) --&gt; sqrt(x).
Bro you mah nigga
Do you require an explicit solution, or were you given actual numbers to use? I would do this numerically.
We need an explicit solution. Basically, if you look at the four equations, we need to solve for B, C, D, and E in terms of k, l, and a. 
You need to denote multiplication in MATLAB. In other words, Clexp should be C * l * exp(). See if that helps. Also, remember the ' command in MATLAB is a hermetian operator for complex numbers. Use .' at all times for transposing matrices to avoid confusion. EDIT: Just noticed if you put an asterisk in Reddit, it uses it for formatting. You probably have the * s in there.
Okay, so my strategy is right though? I can use solve like that to try and get expressions for B, C, D, and E in terms of k, l, and a?
I'm honestly not sure. Hopefully someone else here can add some insight. Whenever I'm required to use symbolic math, I open up Maple or Mathematica or something that's better at it. That said, according to [this](http://www.mathworks.com/help/toolbox/symbolic/solve.html), it looks like you've got the right approach. Since your error is "cannot find explicit solution", try to make sure you have everything typed in correctly (like with the transposes, multiplication, etc).
I have access to Mathematica too. http://www.reddit.com/r/Mathematica/comments/kjw8z/solving_simultaneous_equations/ Do you maybe have any insight there? 
Try using wolframalpha! When I had to solve a system of equations for my heat and mass transfer class, it would be heaven. Another program that will help you is EES (engineering equation solver). It's kinda like matlab with different commands.
You are declaring eqX as a string, not as a symbolic expression. Following seems to work: syms B C D E; syms k l a; eq1 = exp(-1i*k*a/2)+B*exp(1i*k*a/2)-C*exp(-1i*l*a/2)-D*exp(1i*l*a/2)'; eq2 = k*exp(-1i*k*a/2)-k*B*exp(1i*k*a/2)-l*C*exp(-1i*l*a/2)+l*D*exp(1i*l*a/2); eq3 = C*exp(1i*l*a/2)+D*exp(-1i*l*a/2)-E*exp(1i*k*a/2); eq4 = C*l*exp(1i*l*a/2)-D*l*exp(-1i*l*a/2)-E*k*exp(1i*k*a/2); [B_,C_,D_,E_] = solve(eq1,eq2,eq3,eq4,B,C,D,E) B_ = (k^2/(exp(a*i*l)*exp((a*i*k)/2)) + (l^2*exp(a*i*l))/exp((a*i*k)/2) - l^2/(exp(a*i*l)*exp((a*i*k)/2)) - (k*l*exp(a*i*l))/exp((a*i*k)/2) - (k^2*exp((a*i*l)/2))/(exp((i*conj(a)*conj(l))/2)*exp((a*i*k)/2)) + (k*l*exp((a*i*l)/2))/(exp((i*conj(a)*conj(l))/2)*exp((a*i*k)/2)))/((k^2*exp((a*i*k)/2))/exp(a*i*l) - l^2*exp(a*i*l)*exp((a*i*k)/2) + (l^2*exp((a*i*k)/2))/exp(a*i*l) + k*l*exp(a*i*l)*exp((a*i*k)/2) + (2*k*l*exp((a*i*k)/2))/exp(a*i*l) - (k^2*exp((a*i*k)/2)*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2) + (k*l*exp((a*i*k)/2)*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2)) C_ = ((2*k^2)/(exp((a*i*k)/2)*exp((a*i*l)/2)) + (2*k*l)/(exp((a*i*k)/2)*exp((a*i*l)/2)))/(k^2/exp(a*i*l) - l^2*exp(a*i*l) + l^2/exp(a*i*l) + k*l*exp(a*i*l) + (2*k*l)/exp(a*i*l) - (k^2*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2) + (k*l*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2)) D_ = -((2*k^2*exp((a*i*l)/2))/exp((a*i*k)/2) - (2*k*l*exp((a*i*l)/2))/exp((a*i*k)/2))/(k^2/exp(a*i*l) - l^2*exp(a*i*l) + l^2/exp(a*i*l) + k*l*exp(a*i*l) + (2*k*l)/exp(a*i*l) - (k^2*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2) + (k*l*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2)) E_ = 4*k*l)/(exp((a*i*k)/2)*((k^2*exp((a*i*k)/2))/exp(a*i*l) - l^2*exp(a*i*l)*exp((a*i*k)/2) + (l^2*exp((a*i*k)/2))/exp(a*i*l) + k*l*exp(a*i*l)*exp((a*i*k)/2) + (2*k*l*exp((a*i*k)/2))/exp(a*i*l) - (k^2*exp((a*i*k)/2)*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2) + (k*l*exp((a*i*k)/2)*exp((a*i*l)/2))/exp((i*conj(a)*conj(l))/2))) It is also useful to use '1i' instead of 'i' as it can not be accidentally replaced when programming/scripting.
if x=0:5; then the stem plot starts from 0 for me. You are probably doing stem(y) or something
whoa got it. Noob mistake. I got confused since you can't have something like x(0) I made my x=1:length(). Thanks. Also do you know how to get x axis divisions marked in terms of pi? Like -pi, pi/2, pi/4
Go [here to the documentation page for the Output Options](http://www.mathworks.com/help/toolbox/simulink/gui/bq7cpr_.html#bq9_fhw-1) In "Output Options," choose 'Produce Specified Output Only" and I believe that in there, you specify the times at which you want output, which will just be your t. NOTE: I'm going from memory here. I'm in the middle of a MATLAB install, so can't fire it up to check it. If I find it's different, I'll update this.
[Read this.](http://www.mathworks.com/help/techdoc/creating_plots/f6-7929.html#f6-29060) Basically you are looking for axis properties XTick/XTickLabel 
actually I figured it out, I just want to use the "clock" block as one of my sources. thanks for responding though
Isn't it [ str1 str2 ] ?
maybe 
waddaya mean maybe? I'm downloading matlab right now, so I can't test it. It should only generate that error if you're doing [str1 ; str2] , as if you're trying to make str1 and str2 two different rows. Which you don't want to do.
by maybe i mean yes
x1 = "hello " x2 = "goodbye" x3 = strcat({x1},x2) x3 is now a cell array containing a string though, not just a string.
Thanks a lot. My plots will look more beautiful henceforth.
First of all, are you sure you have the dimensions correct? In Matlab, 4x10074 means a matrix with 4 rows and 10074 columns. I don't have Matlab in front of me here, so I can't check the code, but in any case it should be something like this: testnum = 0; % The value being searched for in each row. for count = 1:size(dataset, 1) % Taking the dataset row by row. if sum(find(dataset(count, :) == testnum)) ~= 0 % If one element of the row contains the test number (in this case zero)... dataset(count, :) = []; % ... then delete the row from the dataset. end end find(dataset(count, :) == testnum) returns a matrix the same dimensions as a row where most elements are zero, except there will be ones at the indices as the 'test' numbers. So, if any of the elements are equal to the test value, then the sum of all the elements will be non-zero! Try out help find Hope I've helped!
Thanks! And I did have teh dimensions backwards, I mean 10074x4, when I entered in those commands though I got the error " Index of element to remove exceeds matrix dimensions." and ideas?
Also, I dont want to delete the entire row if certain elements are zero, just if the value in column 2 of that row is a zero, how would I specify that?
Oh, sorry, gotcha. In that case, you only want to test the second column of each row, so the code would look like this: testnum = 0; % The value being searched for in each row. testcol = 2; % Column being tested. for count = 1:size(dataset, 1) % Taking the dataset row by row. if dataset(count, testcol) == testnum % If the testcol element of the row is equal to testnum (in this case zero)... dataset(count, :) = []; % ... then delete the row from the dataset. end end Just a simple if statement. Is that what you want??
Great! That worked, although in sort of a weird way, I had to run that script several times to find all of the zeros, is that just a result of it being such a large amount of data? Also, if you have the time/willpower, would you mind going into a bit more detail into each of those steps, specifically the one where you define what "count" is? Just wondering how it all works...thanks!
Excellent response. Matlab is specifically designed to allow you to avoid for loops. For loops are lazy and inelegant.
This seems to work ... % Gen up some fake data x = rand(4,10); % Make the second column 1/0 x(:,2) = x(:,2)&gt;.5 % Remove the unwanted rows x(~x(:,2),:) = [] edit: Just realized wolfganghox has almost the same solution
OP is quite the beginner at Matlab. Wouldn't it be better to get an understanding of what's going on first?
These all work. Logical indexing is where it's at in MATLAB. Take a look at the commands find, unique, sort, ismember, union, etc. for other cool indexing games you can play. if you can't do an indexing operation in one line, you aren't being arcane enough :)
your matrix is called a: newa = a(~a(:,2),:) This basically translates to: a(rows where the 2nd column is not 0, all columns)
Try this. % define r and theta Erhovec = 2*cos(theta)*Q*d./(4*pi*Eo*r.^3); Ethvec = sin(theta)*Q*d./(4*pi*Eo*r.^3); [Exvec, Eyvec] = pol2cart(Ethvec, Erhovec); [x, y] = pol2cart(theta, r); quiver(xvec, yvec, Exvec, Eyvec); 
Interesting question, hopefully I'm not providing a solution for a homework problem but it sure seems like I am. My solution: verHappy = @ (ins) sprintf('very %s %s',... ins, repmat(':) ', 1, numel(strfind(ins, 'very')))); The command verHappy('very very happy') returns the string 'very very very happy :) :)'. Hope it helps. 
Note: your problem states to search for the string 'very', so the above code does not discriminate between 'very very' and 'veryvery'. 
I don't have matlab installed at home :( But thank you! Update: it was wrong :(
You could achieve this by using eval(sprintf()): function[] = hurr(iNum) eval(sprintf('variable_%d = 0;', iNum)); end [See more here](http://www.mit.edu/~pwb/cssm/matlab-faq_4.html#evalcell) I am yet to encounter a situation in which dynamic naming was a good way of solving a problem. Could you please explain why you are resorting to this? 
Do you have 3D coordinates of all vertices of your model? Do you have a list specifying which vertices are connected? If so, you can use plot3() to get a mesh. Otherwise, you will probably be much better off using programs specifically designed for that. The good free 3D modellers that I know of are [Blender](http://www.blender.org/) for 'arty' models and [Google SketchUp](http://sketchup.google.com/) for 'techy' ones.
trimesh and trisurf
Example: x = 1:10; plot3(x, x, x, '-ok', 'LineWidth', 1, 'MarkerSize', 2, 'MarkerFaceColor', 'k'), Or you could first draw the line segments by parsing '-k' as your line spec followed by marking intersections by parsing 'ok'.
Use 'hold on'. figure, plot3(1:2, 1:2, 1:2), hold on, plot3(3:4, 3:4, 3:4), hold off,
Wouldn't using a list/array be than dynamic naming?
Thanks; solved it!
1) "argument" means the same thing as "input" and "parameter." The first line of your function plotVec2.m will look something like `function plotVec2(inputMatrix)`, where `inputMatrix` is the "argument." 2) This doesn't really make sense. Are you sure there isn't another function you're supposed to write that will go in the second file? Usually the pattern is one function per .m file. HINT: the commands "hold on" and "hold off" will come in handy for this problem.
I've never used it. What's it like?
I havn't used either project, but if you're in the market for a free / open-source MATLAB clone then i think you'll find Octave has significantly higher mindshare. Not like that's saying much, but at least our lecturers all mentioned it.
I'm a civil engineering grad student. Friend of mine from Cali told me his undergrad courses used Scilab intensively. I think it's got a solid userbase there, and has the advantage of being more polished than Octave especially if you're a PC user. But it's not intended to be a "clone" and therefore syntax and commands vary. i want to transition to a free alternative to matlab myself, but I will probably go the route of [SciPy](http://www.scipy.org/) myself, because it's a "real" language, can easily package and distribute software to non-coders, etc.
try the command pause(1200) just type that at the terminal. It will run that command for 1200 seconds (20 mins). 
Try writing anything with a for loop? Just kidding (kind of.) The following should do it: minutes = 20; delta = minutes * 60 / 86400; startTime = now; while now &lt; startTime + delta end
Why do you want this? Do you want to look for a bug in the licence server or something? Do you want to consume CPU cycles just to do it because its cool to watch you fan go overboard?
Nope, I'm testing a mechanism that will harvest licenses when Matlab instances are idle. I'm testing to see if our tool can distinguish a background process that may be idle vs. a background process that may be working. 
Thanks i'll give it a shot. 
Thanks, unfortunately this function left the CPU idle. I've found some code that works for my test. But I do appreciate the response.
Would this then kill the matlab/vm process as well? That seems harsh for a potty break!
If our license pool was at 95% utilization and the app idle for a couple of hours we would consider enabling this feature as a cost avoidance measure. 
I don't think the lineseries objects have documented alpha control. You could use different markers (o and x would overlay visibly).
It looks like you're adding numbers that are multiples of both 3 and 5 twice. For example We want to add: 3 5 6 9 10 12 15 18 20 21 ... You're adding: 3 6 9 12 15 18 21 and 5 10 15 20 which results in 3 5 6 9 10 12 **15 15** 18 20 21 ... So 15 is appearing twice. 
Scilab is the world most popular open source numerical computation platform and it has been downloaded over 3M times. Although Scilab is not a clone of anything, Scilab and Matlab have similarities in many aspects such as interface, syntax, and code structure. Scilab has many toolboxes in various fields of applications instantly available through the download manager called ATOMS. And two things that are different from other open source software are that Scilab has a dedicated team of professional developers and the professional support programs are provided by Equalis.
This is one solution without loops, sacrificing memory for speed S=1:1000; S(mod(S,3)~=0&amp;mod(S,5)~=0)=[]; result=Sum(S)
This is pretty neat. Plus, it's good because it's something matlab does naturally, not a matlab translation of some other language.
shouldnt your and statement in line two be an or? as in if not mod 3 or mod 5 then delete? S(mod(S,3)~=0|mod(S,5)~=0)=[];
No, because then you only keep multiples of 15 edit: To clarify, you want to *keep* mod3 **or** mod5, therefore you have to *delete* ~mod3 **and** ~mod5
I don't know exactly how to do it, but I know that the license manager can be configured to release licenses after Matlab is idle for a while. There is a minimum idle time of 1/2 hour or 1 hour or something like that.
Yep, this is the solution. I always get kicked off for idling for too long :-/.
Thanks, I overlooked that!
oh yup yup you're right!
Absolutely. This is The Matlab Way. But your indexing isn't quite right. It should be: dataset(dataset(:,2)==0,:)=[];
[Here](http://www.mathworks.com/help/base/install/license/brkzpx4-1.html) is the documentation on it.
You might already get this for free if you're using a concurrent license, but the minimum timeout is 4 hours. [Using Time-Outs to Free Idle License Keys](http://www.mathworks.com/help/base/install/license/brkzpx4-1.html)
you can just use tic and toc to measure time elapsed. The following code would be more efficient: tic; while toc&lt;1200, rand(50); end; tic starts the timer, toc measures time elapsed since start (in seconds), and rand(50) is just a random process to eat up clock time.
Excellent! Thanks for the info.
Ideally you would want to paste some code (however incomplete) to guide you through the rest of the steps and point out any mistakes. &gt;But my problem is once I find the location of the non-zero vector I assume you mean non-zero values. I do not know how you do this but the fastest way in MATLAB is the find() function &gt;I do not know what to type in the script so it can find the value of a vector at multiple locations. If you type in "doc find" for the documentation of the aforementioned function you will find the following example: X = [1 0 4 -3 0 0 0 8 6]; indices = find(X) indices now contains the positions of the non-zero values of X: indices = 1 3 4 8 9 Now if you want to find what are those values (or to store them into a new matrix/vector Y) you can simply use: Y=X(Indices) which returns Y= 1 4 -3 8 6 So there is your homework. However, the majesty of the find function is that you can use logical expressions with it. e.g. If you only want to keep the positive values from a vectors you can do: indeces=find(X&gt;0); Positives=X(indeces) or in 1 line: Positives=X(find(X&gt;0)); Because this process is used **all the time** in MATLAB "programming" we are allowed to omit find(): Positives=X(X&gt;0); So the cutest solution to your homework is: Y=X(X~=0) equivalently Y=X(find(X))
Wow, thanks for the quick answer. I put in the line and everything is working great.
I'm not sure about other folks, but I for one would like to assist you by not doing your homework for you. I don't mind helping you figure out functions to use or how they are applied (syntax issues, etc.). It's the whole "Give a man a fish; you have fed him for today. Teach a man to fish; and you have fed him for a lifetime."
Is sourceFunction(iCt) scalar, try "./" instead of "/", but I doubt it will change anything. You should use the debugger and see which step messes up with localArray2 size
Matlab doesn't do functions like you would expect. You have to set up x as a vector of numbers (say x=0:1:100 for example). Then you say &gt; F=x .^ 2 - 1 (The . before the ^ makes it ensure all numbers get squared. It's not necessary for this example, but good practice.) I really can't follow your "a =" and other lines following it. My recommendation would be to visit your professor or the TA tomorrow for further help. I don't have your textbook and it's quite difficult to follow your logic as to what you are trying to do.
Could be to do with the indexing... try transposing inputArray (or localArray) at the start. I don't see where those are defined so not sure what size they are supposed to be. Also maybe you missed some operation which should be a .* or a ./. Best thing to do would be to put a breakpoint and step through with the debugger watching the dimensions of the variables until you see it deviating from what you expect. 
 load FxT.dat fxt = [FxT];
ok thanks I'll try debugger
ok, the two local variables in this function are just set to equal the input array at first, just to initialize them. The input array is a 1D array handed in from the calling function. Then the values are sequentially updated and iterated until they relax to the minimum solution. Later, the two local arrays are compared until the % error is minimized by taking (array1-array2)^2/array1 but it won't subtract the two because array2 has changed size. I'll try the debugger thanks
OK FOUND IT, THANK YOU FOR YOUR SUGGESTIONS. I didn't know how to use debugger to follow the flow, so thanks for the tip. I was mistakenly using A = zeros(length(B)) where B is a 1D array thinking it would initialize A to also be 1D, turns out 'zeros' makes it nxn when only one n is specified. thank you! maybe matlab isn't so evil afterall hahaha
You got to learn and love the debugger and preferably the profiler aswell if you gonna go serious with matlab. There is good online documentation on both.
thanks, will do. I didnt set out to become serious w matlab, but it appears that this is the correct platform to solve my problems. This particular program is a bit pathological, regarding what profiler appears to be used for, since most attempts at this nonlinear equation will not converge, so it resets some parameters and tries again. The vast majority of time is spent restarting failed attempts. However, I will take advantage of both debugger and profiler from now on, thanks 
Create a temporary variable `B`, fill in its columns one at a time (with a for loop), copying the data from` A`. (then say `A=B;`) 
B=fliplr(A) will do straight away what you want. I guess this is for some assignment? Using for loops: columns=length(A(1,:)); for col=1:columns B(:,col)=A(:,columns-col+1); end 
Just curious - why do you need to use a for loop? I only ask because the instructors I've had at MathWorks training courses went out of their way to tell us *not* to use for loops if we could avoid it, since there is quite often a better (faster) way to do it using existing functions. 
For the first part (which is weird, there must be some better way to do what you want): for i=1:100 feval(sprintf('v%d = X(%d,:)',i,i)); end assuming your 100x5 matrix is called X. For the second part, you can do it all without resorting to using 100 different vectors like demonstrated above, because the sort() function called with a matrix sorts each column independently: X_sorted = sort(X); X_eliminated_bottom_5 = X_sorted(6:end,:); This does mess up the order of the matrix, though - each column will be sorted. If you want to maintain the original sorted order, you can do this: [~,sorted_order] = sort(X); sorted_order_without_bottom_5 = sorted_order(6:end,:); indices_without_bottom_5 = sort(sorted_order_without_bottom_5); X_eliminated_bottom_5_with_preserved_order = X(indices_without_bottom_5,:) whew those are some long ass variable names! Just for kicks, here it is on 2 lines without a bunch of intermediate variables [~,o] = sort(X); Xnew = X(sort(o(6:end,:)),:); 
Hey thanks a lot for this..much appreciated...now just have to go back and figure out what everything means in there exactly... yeah I already solved it with the fliplr and above solution but the grad student who's teaching me wants me to get familiar with using for loops..
Yeah I realized this when I presented a couple of solutions to him which avoided for loops...but I think with the data sets I'll be working with it will be nice to have experience in for loops enabling me to perform repetitive functions throughout entire arrays..
eval() is the only way to do that, but it is a really inconvenient way of doing things and unless you really need such variable names for exporting to some legacy outside programme, you should always avoid breaking your mxn matrix for MATLAB use. Also from my understanding what he asked for was to remove 1 of the 5 prices, not 5 of 100 products, so you would need X_sorted = sort(X,2); X_eliminated_min_price = X_sorted(:,2:end); Everything else remains the same (for preserving some order). Really neat solution by the way, I was thinking of using [C,I]=min(X,[],2) for i=1:100; X(i,I(i))=NaN; end to find and NaN the minimum values. Or making them zero then using sparse(X). But it is not really what he asked for! 
Tell him that you should NOT get familiar with for loops, you should get familiar with meshgrid() and conditional indexes. This is not C++ Pretty much every for loop in MATLAB can be avoided for efficiency. And because you look like a cool guy: &gt;columns=length(A(1,:)); Find the number or columns in A &gt;B(:,col)=A(:,columns-col+1); Basically links 6-&gt;1, 5-&gt;2, 4-&gt;3, this is pretty typical code for inversion. &gt;B(:,n) Is the nth column vector, equivalently B(n,:) would be the nth rowvector
This may not help you now, but in the future check out http://code.google.com/p/google-refine/
Why don't universities seem to know about this software? It seems like universities push MATLAB.
This code will separate the 100 rows of X (100x5 matrix) and eliminate the lowest value of each of the 100 vectors. The resulting output "v" is a cell array of vectors. for k=1:100 vec = X(k,:); vec = sort(vec); v{k} = vec(2:5); end This can probably be written more compactly, if you really want to. 
A one-liner: sum(unique([0:5:1000 0:3:1000]))
Do you really need the matrix to be separated and named independently? This is really bad practice in Matlab, and leads to hardships unless absolutely required for some other process. Another question is does the order of values in each row matter? If not, then you can do this in a couple lines using sort. Here's my example code: a = randi(10, 100, 5); b = sort(a, 2); b = b(:, 2:end); b now has your final result, but it will be sorted in each row.
To answer your question: 1) I just described the other process in [this post](http://www.reddit.com/r/matlab/comments/kt34f/how_can_i_test_for_outliers_in_matlab/). I'm not sure what I need to do in this instance. 2) The order of values does matter because each column represents a purchase month, 1:5, the last of which represents the most recent month.
Ah, yeah, this just became a lot more complicated. The part that will cause the most problems (to me) is that you want to compare each value to the mean of all the other values in that row. This can be done, but will require a for loop or similar. Also, there may be more than 1 data point that may be less than your limit, so it can be recursive as you keep calculating the new mean. It may be easier if you compare the point to the total mean. There's a command called trimmean, but it's in the statistics toolbox, and may not be quite what you need. Since you want to maintain the order of the values, it would probably be best to replace the minimum (or outlier) value with NaN, instead of removing it outright. You can still remove the value, but then you will have to leave the matrix format. A cell or structure would be easier to handle than having multiple independent variables, though. Here's some code with multiple options. Not sure if any will work exactly as you want, but they may be a starting point. a = randi(10, 100, 5); tol = 0.30; % truncation limit for k = 1 : length(a) veggies.(['v' num2str(k, '%03i')]) = a(k, :); veggies_mean.(['v' num2str(k, '%03i')]) = mean(a(k, :)); veggies_noMinMean.(['v' num2str(k, '%03i')]) = mean(a(k, a(k,:)~=min(a(k,:)))); veggies_trimmed.(['v' num2str(k, '%03i')]) = a(k, :); [minveggie, i] = min(a(k,:)); if minveggie &lt; mean(a(k, :)) * (1-tol) disp(['Trimmed the mean of line ' num2str(k)]) veggies_trimmedMean.(['v' num2str(k, '%03i')]) = mean(a(k, a(k,:)~= minveggie)); end end 
outliers = cell(100,1); for inti = 1:100 for intj = 1:5 average = sum(matrix(inti,:))/5; if matrix(inti,intj) &lt; 0.1 X average || matrix(inti,intj) &gt; 0.9 X average outliers{inti} = [outliers{inti},matrix(inti,intj)]; end end end
This looks like it could work. I'll mess with it a bit later and let you know. Thanks for your help!
Is this assuming that the data is no longer in a matrix?
1. Make each of the buttons check what option from the dropdown is currently selected. Eg function buttonPress(hObject, eventdata, handles) str = get(handles.handleToDropDown, 'string'); val = get(handles.handleToDropDown, 'value'); opt = str{val}; switch opt (etc etc) 2. What do you mean variables that were input into the program? Your best bet (for this and point 3) is to use setappdata, passing 0 as the handle. This will save any variables to a global workspace. So, you can store a variable like so: g=0; setappdata(0,'g'); h = getappdata(0,'g'); disp(h) disp(g) (also available is the isappdata function, same syntax as setappdata) Note that any variables you set this way will persist in the global workspace until you close matlab. 4. There's a mathworks tutorial on using guide to design a GUI, [here](http://www.mathworks.com/videos/matlab/creating-a-gui-with-guide.html). Other than that, I learnt by reading other people's code. 
Right on. Because of you I've already been able to flip the matrix by rows and to do a simultaneous row and column flip (just had to use two for loops/variables). Actually, his next assignment for me involves conditional statements, so it looks like he is just progressing me slowly..
I edited my post and changed array to matrix; the matrix is your data.
Cool, thanks
Thanks, this is very helpful! I was hoping to avoid global variables, but it seems so easy that I might as well. And for clarification, I mean if my program is initiated like: function GUIProgram(a,b,c,d) ... end Then I want a subfunction called by a button press to also be able to use the variables a, b, c, and d. Likewise, I want to be able to pull a value from the called subfunction, like you would typically do: function [e, f] = subfunction(a, b, c, d) e = a + b; f = c * d; end But I suppose this could be fixed by setting global variables from within the subfunction.
(To define a hyperplane, you need a unit vector **u** (orientation), and an offset (related to the distance from the origin) *C*, unless the hyperplane goes through the origin. An equation for a hyperplane is `u(1)*x + u(2)*y + u(3)*z = C` ) You didn't give the offset, so assuming the hyperplane goes through the origin: Find the magnitude of the component of x that is parallel to U (i.e. project x onto u and take the magnitude of that vector). http://en.wikipedia.org/wiki/Vector_projection
No problem!
Thanks smartypants :)
Appropriate username ahoy!
Well, you can store the variables inside the 'handles' structure passed to the function buttonPress(hObject, eventdata, handles). You can add fields to the structure very simply, and then access them later. function Something(a,b,c,d) handles.a = a; handles.b = b; handles.c = c; handles.d = d; guidata(handles, hObject); //updates the handles structure to the gui end function buttonPress(hObject, eventdata, handles) a = handles.a; (etc) gets the variable out of the handles structure. end Edit: Formatting *facepalm*
use trimmean. newmean = trimmean(array,percentageofvaluestoeliminate,dimensiontoaverage);
You're missing a ton of words in your text, but I think I know what you're asking. No, there's no significant difference. There might be a few builtins that have been eliminated (due to having been terrible ideas all along), so you might not be able to use them anymore. However, your class shouldn't be teaching these bad things anyway. Lastly, if that book is the one by William Palm III (http://www.amazon.com/Concise-Introduction-Matlab-William-Palm/dp/0073385832), it's totally worthless unless you have open-book tests. It's literally just the MATLAB help files formatted nicely into a book with a few screenshots here and there and some text to help tie it together. Even the examples are the same as the ones in the MATLAB help files; I don't know what Mr. Palm is being paid to do but he's not writing the vast majority of the book, that's for sure. That book is completely and utterly worthless. If I had to retake my MATLAB class, I would have told them to take that book and shove it.
Holy crap what did I type in my post. Fixing, sorry. For the book, I have no idea what it's going to be used for but that's not a good sign. It's Chem. Engineering class too so maybe they have something in mind. Thanks for the response! 
Well, to be fair to the book, it is sometimes handy to have a printed copy of things (so you don't interrupt a command you're trying to enter with a help command). And I may have exaggerated a little bit, but that's what I remember about it, never really having read it myself.
Some of the toolboxes have changed over time - the behavior of the Neural Networks toolbox is a fair bit different now than in 2008. But you're probably not going to be using any of that for your class.
I like to type the command mouseover and F1. The pop-up is really nice and well formatted. Generally on-line matlab documentation is amazing
Hell, for an introductory class, you could probably get away with using Octave. 
You can use octave even for not an introductory class. I've done much graduate research in octave.
Added some spaces and moved the square bracket: disp(['Poynting vector = ' num2str(S,'%12.2e') 'W/m^2']); What error message do you get? 
'Unexpected Matlab expression.' Not the most helpful right? Thanks for your help, the formatting stuff really gets me all the time, it's so subtle.
yup totally doable! eval('3+sin(pi)'); cheers!
Amazing! Exactly what I needed~ Thanks!
Works fine for me, your problem might be with variable "S", not with the expression itself edit: jmeakin's version that is, you had the square bracket misplaced esit2: 'Unexpected Matlab expression.' usually means you fucked up the syntax, e.g. you mixed "()[]{};,."
It's the same in most languages, by the way.
The brackets signify a concatenation. Every element you want to concatenate needs to be between your brackets; when you want to include num2str, it needs to be separated by commas i.e.: (['Poynting=',num2str(P),'W'])
Somehow the Font preference was changed in your Matlab install. Go to File -&gt; Preferences -&gt; Fonts -&gt; Custom On the list window, one of the entries will be 'HTML Proportional Text'. Change that to Desktop text, or the default font of SansSerif Plain 10. That should fix it.
You do not need commas, just spaces
Did not know that!
Yeah, works same way as vectors. Personally, I still prefer using commas, easier to visually inspect my code.
You could just pad the image appropriately and then use imrotate. This way you shift (0,0)
I rather like using printf for this type of thing: fprintf('Poynting vector = %12.2e W/m^2\n', S); 
Hmm. You mean, increase the image size until the spot I want is at the center? Good idea. How would you do that for an arbitrary center?
yap its the spaces ; got me all the time :D
I was thinking of just adding white space, x pixels to the left, y pixels to the bottom of the image (if 0,0 is bot left) and rotate that. Then you can remove the angled white space. This is just an idea, I have not tried it. There must be much more refined ways to do it.
You could pad with NaNs, that makes removing them more easy. I don't know if imrotate supports it.
Use interp2 if you want to use arbitrary transformation (or imtransform). But you have to realize that if you "center the rotated image", you get same results as when rotating around center. Try this: %Parameters rotaround = [40 60]; %y x angle = 39/180*pi; %Image to be rotated img = imread('cameraman.tif'); %Original image coordinates [X Y] = meshgrid(1:size(img,1),1:size(img,2)); %We are using homogenous 2D coordinates which would enable us to use perspective %transformation if needed coordvec = [X(:) Y(:) ones(numel(X),1)]'; %Create transformations rotmat = [cos(angle) -sin(angle) 0; sin(angle) cos(angle) 0; 0 0 1]; translmat1 = [1 0 -rotaround(2);0 1 -rotaround(1); 0 0 1]; translmat2 = [1 0 rotaround(2);0 1 rotaround(1); 0 0 1]; %Combine these transformations to single one transfmat = translmat2*rotmat*translmat1; %Use the tranformation transcoord = transfmat*coordvec; %Normalization is not needed in this case, but just to be generic transcoord = bsxfun(@rdivide,transcoord,transcoord(3,:)); %Reshape transformation coordinates to matrices interpX = reshape(transcoord(1,:),size(X)); interpY = reshape(transcoord(2,:),size(Y)); %Interpolate using new coordinates interpImg = interp2(X,Y,double(img),interpX,interpY); %Visualization imagesc(interpImg) %% If want to have image which is shown fully, you can use this additional code: outsize = [1000 1000]; %Use some logic to determine output size imgcornercoords = [0 0 1 1; 0 1 1 0; 1 1 1 1]; imgcornercoords(1,:) = imgcornercoords(1,:).*size(img,1); imgcornercoords(2,:) = imgcornercoords(2,:).*size(img,2); %Where are the image coordinates being transformed trans_imgcornercoords = inv(transfmat)*imgcornercoords; trans_imgcornercoords = bsxfun(@rdivide,trans_imgcornercoords,trans_imgcornercoords(3,:)); minmaxx = [min(trans_imgcornercoords(1,:)) max(trans_imgcornercoords(1,:))]; minmaxy = [min(trans_imgcornercoords(2,:)) max(trans_imgcornercoords(2,:))]; %Using these transformed coordinates, determine new interpolation grid [X_ Y_] = meshgrid(linspace(minmaxx(1),minmaxx(2),outsize(2)),linspace(minmaxy(1),minmaxy(2),outsize(1))); %And transform it coordvec = transfmat*[X_(:) Y_(:) ones(numel(X_),1)]'; transcoord = bsxfun(@rdivide,coordvec,coordvec(3,:)); %Reshape transformation coordinates to matrices interpX = reshape(transcoord(1,:),size(X_)); interpY = reshape(transcoord(2,:),size(Y_)); %Interpolate using new coordinates interpImg = interp2(X,Y,double(img),interpX,interpY); %Visualization imagesc(interpImg)
can you just use the import feature of matlab and when it finishes asking about importing it, it shows an option to make a function of the import code. From there you could just repeat that function in a while loop where the name is changed every time (assuming the names are based off of numbers). 
If you can upload the .m and .fig files to some website (dropbox or another), I'd be happy to look at this for you. 
I second this. printf is much more versatile.
It works, thank you! Also you taught me a bunch of new commands in the process. Much appreciated!
Same as what zerox20 said. Also, you may want to look into designing your GUI's programmatically instead of in GUIDE, which produces truly horrible code even with extensive tweaking (and fig files are binary, so it is very hard to track changes as you make changes to your GUI). Designing them programmatically has a higher start-up cost, but you can take advantage of nested functions for your callbacks to avoid all of the bullshit associated with the fig/m design pattern, which to be honest is quite poor. I've designed a large number of Matlab GUI's, and the workflow that works best for me is to do the rough design of the gui in GUIDE, then use [fig2cmd](http://www.mathworks.com/matlabcentral/fileexchange/11159-fig2cmd) to convert the generated fig file to a list of uicontrol calls. Then, I tweak the generated code a bit to make it prettier/more readable, and add my callbacks in nested functions so they share scope with the original uicontrol calls. Like I said, there is definitely a higher start-up cost, but there are some projects I wish I could revisit because of the sloppy gui code I got out of using GUIDE. 
Do not steal matlab. If you need it for a class, a student license can be acquired for around $75. This should be within the realm of textbook costs for a university class, though it is a little painful. I don't think anyone here will help you use an illegal copy, anyway. University computer labs will usually have a copy, so doing your work in the lab might be an option. If you really can't afford the license, you could try Octave unless you need specific toolboxes. Octave can be had legally for free. "sudo apt-get install octave" should get it for you. As for your su problem, the password prompt hides input. You can enter your password just fine, but you won't see anything. Just hit enter when you're done. Of course, this only works if you're actually allowed to do that on the machine - if this is a school computer, trying to use su, sudo, or otherwise login as root will likely get you banned. 
For the su problem, the computer is mine and it keeps saying su: authentication failure. I don't think I ever set up a password for it, and my password to log into the computer doesn't seem to work in the terminal. Is there a way to change a password or is there even one?
Try sudo -s (if you wanna run a shell as root) Ubuntu has su to log in as a the root user deactivated by default.
You may need to be a little more specific. Do you want to remove all the blue-ish colors, or just the [0 0 1] blue? And what do you mean by remove? (make white, black, ...)? newmap = jet; for i=1:length(newmap) if newmap(i,1)&lt;0.2 &amp; newmap(i,2)&lt;0.2 &amp; newmap(i,3)&gt;0.5 newmap(i,1:3)=[1 1 1] end end colormap(newmap) Will this piece of (not so pretty code) work for you?
Wouldn't converting it into an RGB image and removing (making it zero) the B plane work? Again, as you said, the question is very vague. 
This question is pretty tough to answer because it's so vague. If you are looking to remove the blue pixels as in remove them from the matrix I'd recommend using find(matrix&lt;blue_threshold)=[] note that if you image the same image in jet there will still be blue because it scales the colormap to your image. If you just dont want blue on the colormap you can make a new one without blue fairly easily. 
Sorry about the vague question, i had a hard time trying to put in words what i wanted :P. * I'm working with a 512x512x65 matrix of images (grayscale). * I've got my code to work for this as is but I'm trying to see if using color can help it be more accurate. * I use the jet colormap mainly to introduce color into the picture with regards to the intensity of the images in each slice. * I'm only interested in the red/yellow/higher end of greens. * "Remove" the blue parts could work as making all the blue-ish colors to white, so that i can skip them when using the *find* command. Thanks for the code, but I'm not sure i follow it all that well. (I haven't used Matlab in a while and I'm still rusty) 
I would have thought that if you have a script along the lines: snr = 5; rep = 4; frame_size = 1024; sim('channel_coding'); then it should do the job. As long as the variables are in the workspace before the model is run it should pick up the values. I had an odd issue the other day where Simulink wasn't updating blocks after modifying variables in the workspace. Solution: restart the PC! For some reason just restarting MATLAB wouldn't do it.
Okay okay. (my son says that all the time when I try and explain stuff...) So, in the script I set the values. And I want the output of the last block. The last block is the Error rate calculation from the comm systems block set. Instead of outputting the bit error rate of the system to a port I have it output to a 1x3 row vector. I can see the row vector get updated in the base workspace when I run the model from simulink and when I run the model from the command line &gt;&gt; sim('channel_coding'). However, the script returns: unknown var/func 'ber' when I try to use the variable ber in the script. ?? 
Have you tried making your ber function in its own seperate m file? That way it's encapulated and can be run from any simulation, all you would have to do is pass the parameters from your sim. ie. you could have a function ber(snr,rep,frame_size) and use that instead of a chunk of text inside your simulation file.
I am not really sure I understand what you mean. Do you mean create a user defined block where I pass those params to the function and get my output that way?
Pretty much, but if you have different simulation files, you can use an external file to hold this function and not need it in all the other simulation files. 
First of all this makes no sense: if N(2)&gt;0 raan=acos(N(1)/n); elseif N(2)&gt;0 raan=2*pi-acos(N(1)/n); end And quite "suprisingly" is the cause of error of your problem. N(2) is negative with the values you provided, "raan" never gets defined and MATLAB throws a hissy fit. Why you got no error I do not know, my version gave me: ??? Output argument "raan" (and maybe others) not assigned during call to "C:\Users\Admin\Documents\MATLAB\random shit\algorithm_42.m&gt;algorithm_42".
thank you!
mmm, if the result of each iteration is the scalar "x" you can do something like results=[results x]; Results will be a 1xN vector, make sure to initialise it as results=[];
If ive understood you correctly, you want to set some values in your global environment using the function. I think you're taking the wrong approach. Instead of pulling variables from the global scope, pass them in as arguments. Then return the manipulated values. E.g function out = myfun(a,b,c) out = (a+1, b-7, c*c); end Using functions like this means you can run them against any arguments you like without having to manipulate the global environment to prepare your functions. It also means you can apply it over a series of vectors. If you have an unreasonable number of arguments, put them in a cell array and pass that instead. Once you have the return values, you can set the value in the file as a separate function. This approach applies to all programming languages: mutating global variables is generally the wrong approach.
when you plot you image, you use colormap(jet) instead of doing this you make a new colormap, called newmap in my example.
jet is matrix with three colums. The first is red from 0 to 1. The second is green from 0 to 1. The third is blue from 0 to 1. What my code does is to take rows where red and green is lower than 0.2 and blue is larger than 0.5 and making them white. [1 1 1]. This may not be what you need, but it's a suggestion.
If you can get your hands on a copy of Matlab that has the imaq, you can simply copy the folder that contains whatever toolbox imaq is in, then either install that toolbox manually or add the desired functions to your active directory. 
I would definitely count it as programming. &gt;MATLAB® is a mathematical scripting language that looks very much like C++ [here's some more info](http://groups.engin.umd.umich.edu/CIS/course.des/cis400/matlab/matlab.html)
MATLAB is understood to refer to the program as well as it's programming language. I've never heard anyone need to clarify. I **think** I've heard people say it's like C++ or something but don't take my word on that, cause I don't know C++ :P
This should do it. Just go on youtube and search if you need help learning the theory/idea of how to make a for loop. x=pi/6; for i=2:10 x(i)=cos(x(i-1)); end
This helped a heap and my code is much smaller now, thanks :)
In general, yes it would. Don't get yourself in over your head though; scripting experience is not necessarily software engineering. 
While this is true, I can still hammer out a powerful MATLAB script in 1/10^th the time it takes me to muddle through a comparable C++ program.
Yes, it does. I started with matlab, then started doing object oriented programming in matlab, which then gave me an easy transition to java. 
i love you, this definitly helps for future problems also haha. 
open kron will get you started for sure. I'll work with kron(a,b) The way I think of it is you're making a matrix of matrices. If 'a' has dimension 2x3, then you'll end up with a matrix that is 2x3, except that every entry is a matrix of size b. So you're taking the ij entry of a, multiplying b by it, then adding that product into your kron matrix at entry ij. You end up with a larger matrix where if a is an nxm matrix and b is a kxl matrix, kron(a,b) is an n*k x m*l matrix. As for writing your own version, try looping through all entries in a and multiplying them into b. You can then make these into an augmented matrix. Or ... you can figure out how MATLAB does it without looping.
well I got that I need two FOR loops, one for each line and one for each column, but then I don't know where to go with that...
repmat might be useful here.
like, how do I "multiply them into b"?
Using Matlab is definitely programming. It is generally not "software engineering", which is what you might be expected to with a language like C++ or Java.
I feel like you're in my class, because I have to do that for part of an assignment this week too... "mykron" I computed each sub-matrix separately, shoved it into an appropriately preallocated cell array, and then simply used cell2mat. Probably not horribly efficient, but it's less than ten lines of code and it will get me credit. PM me if you think we might be doing the same assignment.
MATLAB is effectively Python with a more powerful interpreter. Without a doubt it's programming.
I think we might be doing the same assignment.
a(i,j)*b
Also, I did it, but I feel like there is a way without the cell2mat...
Every time you compute one of the matrices, you could add it to the product matrix and then skip the next n-1 lines, where n is the number of columns per submatrix.
I think something like this would work: % kron(A,B) will equal M1.*M2, where M1 is matrix A after repmat, and M2 is elements of B replicated in proper pattern M1 = repmat(A, size(B)); % M2 is harder sub1 = **fill this in** sub2 = **fill this in** ind = sub2ind(sub1,sub2, (size of output)); M2 = B(ind); out = M1.*M2 % PS maybe this would implement kron(B,A), I can never keep the order straight
That's something I've already tried, but it failed miserabel. Both 2010 and 2011 are 64-bit, and are automatically installed in 64-bit mode on a Mac. Copying the imaq folder over to the 2009 version wont work, since the 2009 version doesn't recognize the 2010/2011 64-bit imaq folder. 
I would use another language for this; it just isn't Matlab's strong suit. You can write sparse matrices from a basic program that builds a list of (docindex, wordindex, and count, write that into a file, and easily read it into Matlab.
The closest Matlab has is structures. key = 'bar'; foo.(key) = 10; foo.(key) ans = 10 foo.bar ans = 10 I believe it's quite slow, though. 
Any suggestions for a better language for this job? My programming is a bit rusty so I'm hoping to avoid something complex like C++. Would it be easily implementable in python?
This is actually fairly easy in Matlab using some of the text read options, cells, and set operations. The one thing I'm not sure about is how you want your data organized. Is there a reason you want to keep the word order of the document? I can see a way to do it that would give you an alphabetical list of words. Some extra scripting would be required to get it to the format you are looking for. Here's some sample code: fid = fopen('YourDocument.txt'); words = textscan(fid, '%s'); fclose(fid); words = words{1}; If you have multiple files, you can append them to the words variable here. Or you can run this script for each separate input file. % If punctuation/case doesn't matter: words = lower(words); words = regexprep(words, '[^A-Za-z0-9]', ''); % Find all the unique words uwords = unique(words); % count the instances of unique words using an anonymous function and cellfun. countfunction = @(word) nnz(strcmp(word, words)); count = cellfun(countfunction, uwords); % display the results, sorted by word frequency tally = [uwords num2cell(counts)]; sortrows(tally, 2) EDIT: corrected a variable name.
OP specified that the data should be stored in a matrix, I'm not sure where structures would come into play in this.
OP asked for a dictionary in the title and mentioned word frequency counts, for which such data structures are well suited. 
You are probably right that another language would be more appropriate, but 200,000 words in 900 files is not a huge amount of data, so Matlab should be able to handle this without much trouble, if it's a one-time thing. Writing a program to accomplish this in Matlab would be pretty simple: * read contents of each file into an element of a cell array C{docindex} * split words from each file into new cell array D{docindex}{n} * catenate all words in D into list, call unique to generate cell array words{wordindex} * loop over D{docindex}, loop over words{wordindex} to populate final dictionary array It might take a couple minutes to run though.
"Beware of the Turing tar-pit in which everything is possible but nothing of interest is easy."
IMHO, the only thing MATLAB and Python share is they're both scripting languages. Their use cases are very different, and they have different strengths.
The word number in the second column is ambiguous since there are obviously multiple instances of many words. So if we skip that, I have a handy bash one liner for you: for file in *.txt; do cat $file | sed 's/ /\n/g' | sed 's/[^A-Za-z0-9]//' | sort | uniq -c| sed "s/^/$file/"; done
word order/document order doesn't matter. As long as there's an easy way to lookup the word IDs and the document IDs. I just want a matrix with document IDs that contain the frequency of those words.
I remember how shitty it was being in a matlab class, and having no idea wtf is going on. I feel for you. Ok, so this is how I would attack this problem. First, I would recognize that this problem can be split up into 4 different Pr numbers, and each of those could be split up into 5 Re ranges. I hope right now you can recognize this means at least 2 nested "for" loops, one the Pr numbers and a set of for loops with the Re number ranges. Now that you have a plan of attack, start writing your code. The first thing you should do (which it looks like you've done) is define your constants. Having done that, this is what the beginning of my code looks like (the rest of my comments are in the code comments): % air - Pr = 0.707, Refrigerant - Pr = 2.98, water - Pr = 5.83, EthGly - % Pr = 22.4 % define Re ranges range1 = 0.4:0.1:4; range2 = 4:1:40; range3 = 40:10:4000; range4 = 4000:100:40000; range5 = 40000:1000:400000; Re = [range1 range2 range3 range4 range5]; % define constants and m's for such ranges c1 = 0.989; m1 = 0.33; c2 = 0.911; m2 = 0.385; c3 = 0.683; m3 = 0.466; c4 = 0.193; m4 = 0.618; c5 = 0.027; m5 = 0.805; c = [c1 c2 c3 c4 c5]; m = [m1 m2 m3 m4 m5]; % define prandlt numbers Pr = [0.707, 2.98, 5.83, 22.4]; % write code for i = 1:length(Pr) for j = 1:length(range1) Nu1(i,j) = c(i)*range1(j)^m(i)*Pr(i)^(1/3); end for k = 1:length(range2) Nu2(i,k) = c(i)*range2(k)^m(i)*Pr(i)^(1/3); end %.......... finish the code here. end % note that each row of the matricies Nu1,Nu2... are the different species % for which the Pr is different, and each column is the Nu for that % species. Therefore, by writing Nu = [Nu1 Nu2]; % you have a matrix in which each row is a species and the Nusselt number is defined in each column. % Now, plot it! loglog([range1 range2],Nu(1,:)) hold on loglog([range1,range2],Nu(2,:)) Also note that I did this only for the first 2 ranges, ie the Re is between 0.4 and 40. You should do the rest! Hope that helps. Edit: formatting, and stuff.
Why wouldn't it? Its a (largely) proprietary high level programing language tailored for mathematical applications.
forgive me because I didn't just run to Google when I saw your comment--how can you perform OOP in Matlab?
You may or may not find this interesting: http://www.dsprelated.com/showarticle/151.php 
Return does not work the same way in Matlab as it does in C, for example. Return just immediately stops execution of the function. Read these: help return help function
oh wow thank you so much! i really appreciate the help!!!!
First of all when making recursive functions, you cannot have N increasing. Ever. Therefore you need to use the T{n}=2xT_{n-1} -T_{n-2} form. Further your base cases are wrong... You are testing x?0,1 when you want to test n?0,1 Try this, I do not have MATLAB on my laptop so I have not debugged: function [ T ] = cheb( x,n ) if n==0 T=1; return elseif n==1 T=x; return else T=2*x*cheb(x,n-1)-cheb(x,n-2); end end 
Hi again. I've thought of a better solution to your problem. Use the previous code to create the new color map (newmap). Then use the [ind2rgb](http://www.mathworks.se/help/techdoc/ref/ind2rgb.html) function: Final_Image = ind2rgb(Grayscale_Image,newmap); The Final_Image is now a 4096x4608x3, meaning there's and R, G and B value for each pixel. The Final image can then easily be saved: save(filename, Final_Image)
Ok I tested it, seems to work fine but it is fucking slow as balls... I guess this is for an assignment, but this looks significantly faster: function [ T ] = cheby( x,n ) if n==0 T=1; elseif n==1 T=x; else n0=1; n1=x; for nn=2:n n2=2*x*n1-n0; n0=n1; n1=n2; end end T=n2; end I did some tests with profiler, the x value does not play any kind of significant role (as expected) however my recursive version becomes unusable even for small values of n. n|cheb(recursive)|cheby(normal) :---|:---|:---|:--- 1|0.001s|0.000s 10|0.002s|0.001s 15|0.019s|0.001s 20|0.206s|0.001s 25|2.275s|0.001s 30|26.247s|0.001s So yeah, shit is slow... 
I've not used ind2rgb before. Thanks for sharing that. You can use the command imwrite too. http://www.mathworks.in/help/techdoc/ref/imwrite.html
That and their syntax is extremely similar. At least much closer to each other than Matlab and C++.
Pfft. Use arrays. Don't write code in Matlab the same way you would write code in C. function [ T ] = cheby( x,N ) % Chebyshev Polynomial of the first kind T(1:N) = 0; T(1) = 1; % This check is necessary for when the input N=1 if N &gt; 1; T(2) = x; end % Recursive part for n=3:N T(n) = 2*x*T(n-1)-T(n-2); end end Runs pretty fast too, even for very large values of N.
That is not a recursive function though, I assumed he wants it for some assignment. The way I would solve it is in the reply (and you save on memory!!!) edit: Re-read, should it not be "n=3:N-1", since T(1) is T_{0}(x) etc. edit2: Since you will be reading this, do you know what is faster (however minimally). MATLAB skipping over an "if" or a variable assignment.. i.e. if N&lt;1 which one is faster if N&gt;1 x=1; end or x=1;
Variable assignment would probably be faster but I didn't do it for speed reasons. I did it so that when N=1, the output won't be T = [1 x] but just T = 1. And what do you mean it is not a recursive function? It does exactly what your code does but does it with arrays. 
A recursive function, is defined as a function that calls itself. Your algorithm is optimal speed wise, the 2nd function I posted is optimal(?) memory wise, the true recursion I posted is shit memory/speed wise but it's what he wanted. edit: the question was not regarding your code, just something I thought of on a tangent. The algorithm is fine
Yeah, I see what you are saying. I ignored your first post and concentrated on the 2nd one since that's where all the action seemed to be.
use the pseudo-inverse: if `Xb = Y` then (X'X)^-1 Y = B, where B is the least-squares estimate of b, the vector of coefficients you have to find. X will be a matrix of the powers of the x-values: so if your x-values are [1 2 3 4 5], X = [1 1 1 1 B = [b0 Y= [y1 1 2 4 8 b1 y2 1 3 9 27 b2 = y3 1 4 16 64 b3 ] y4] 1 5 25 125 ] for example in the cubic polynomial fit (i.e. the columns are the 0th, 1st 2nd and 3rd powers of the x values) (google search *least squares pseudo-inverse* for more info) For the second part, he probably wants you to do a significance test, like the likelihood-ratio test.
The thing to remember about linear regressions is that they all break down into the equation y = X β Where Y is a vector of your Y values, and X is a matrix of all the different permutations of your X variables. So for a 1st order fit, X = [ ones x ] where the x is your original vector of x values, and ones is a vector that is the same length as x. When you solve the equation, you will get a β with two elements, and these are the coefficients for your linear fit, where β1 is the constant term and β2 is the slope. You can do the same for a 2nd order fit by making X = [ ones x x.^2 ] a 3rd order fit by X = [ ones x x.^2 x.^3 ] etc. So now the problem is finding a 'pseudoinverse' of the matrix X. It's a pseudoinverse because the matrix will almost definitely not be square, and will almost certainly be singular. But what you will get is the formula X* y = X* X β where X* is the pseudoinverse. SVD can be implemented to generate this pseudoinverse ([Wikipedia formula](http://en.wikipedia.org/wiki/Singular_value_decomposition#Applications_of_the_SVD)), but if you have never gone over SVD in class, I'm not sure how your prof expected you to use it. The SVD algorithm is built in to the Matlab left divide ( \ ) command, though, so maybe that is what he was going for. Using this method, the formula is simply β = X \ y So now you have all of your polynomial coefficients in the vector β. I'll leave the second part brief, but it should involve plotting the different polynomials on a figure with your original data...
Thanks a lot for the help. This will really help me get started. I'm trying to look up the concept of pseudo inverse and finding it via svd so I can understand it better. It's tough since I'm a psych major and didn't realize how linear algebra heavy this class is. The professors teaching methods aren't particularly helpful either. We are allowed to use the svd function so how do I implement that rather than the left divide command. Again thanks. It's been a struggle but people like you really help.
Just go the the help and search for it. Honestly its a great explanation and jumping ground. 
Re(50) gets set to 400,000, which will not match any if your elseif conditions. Possibly change the last statement to: elseif(Re(n)&lt;=400000) Nu(n)=0.027*Re(n)^0.805*Pr(i)^(1/3) end http://pastebin.com/hFg28Lyw Like that. Not sure if that changes what you're trying to do, but Re(50) is out of the range of your conditions, so the conditions need to be changed in some way.
I need to write a MATLAB script that takes the x-y coordinates of a point in the Cartesian plane and displays a message telling either an axis on which the point lies or the quadrant in which the point is found. I am completely lost. PLEASE assist me. Here is a picture of the cartesian plane in case anyone cares :) http://i.imgur.com/eg2wH.jpg
The problem is that after the loop, Re is 1x50, while Nu is 1x49. This is because Nu is not getting set in the case where Re(n) == 400000. Setting the last elseif to "elseif(Re(n)&lt;=400000)" fixes the problem.
You'll want to use: surf(x,y,z); assuming Z is the magnitude (is regress2.mat given to you?), that is the "normal" usage. If you've used PCOLOR, it is, if I remember correctly, the same usage. If you don't know, help surf is the best way to check out functions. Or the *lovely* online help at: [http://www.mathworks.com/help/techdoc/ref/surf.html](http://www.mathworks.com/help/techdoc/ref/surf.html) For the second part I'm not really sure... all I can really say is you're looking for values of a, b and c that will make the plot look like _____, but without really knowing the topic if your course, I can't help much there.
THANK YOU SO MUCH. i should have seen that, seriously thank you
What do you mean in 1 command? A=[0 0 0 0 0; 0 0 1 2 3; 0 0 4 5 6; 0 0 7 8 9]; B=[0 0 0 0 0; 0 0 1 10 20; 0 0 2 8 26; 0 0 3 6 32]; is the only way I can think of that can create these in strictly 1 command but it is elementary. Otherwise you will need plenty commands: t=zeros(3,3); t(1:9)=1:9; t=t'; A[2:4,3:5]=t;
i think it means dont type them in individually like you have the first part
Then I can guarantee you cannot do this in 1 command :) especially the second matrix. You can do some fancy shenanigans for the first but not the seemingly random matrix e.g. A(2:4,3:5)=sort(sort(magic(3),1),2) But again that is not 1 command, just 1 line
plot(P(1,:),P(2,:));
Thank you so much. Stupid me for not figuring this out. So I multiplied the random 2x2 matrix with matrix P and plotted that. Can you explain to me how come the ended up being ellipsoid?
Oh wow, been using Matlab for a few years and did not know that. I wonder if there is some freakish person that knows every single function of Matlab?
Not sure if i understood correctly, but you can use the strread() function to extract data from any formatted string. e.g. x=['10:19:30Z']; [H M S]=strread(x,'%d:%d:%d%*s'); seconds=3600*H+60*M+S &gt;seconds = 37170 In this case, from the "10:19:30Z" string, you save hours in H, minutes in M, seconds in S and ignore the Z [using %*s]. Then you can do whatever you want with this data. I interpreted as if you wanted the total seconds elapsed since midnight.
It is only ellipsoid because the axis are not equal. Do this and you'll get a circle. axis square;
Check out datenum and datestr
This should work, must make sure the format is supported you can then use the same function (datenum) to get your start point, to subtract from the results if you want. Note, datenum will give you an answer in total days from 0 A.D.
Brilliant, this works an absolute treat. Thanks :-)
With SVD, what will happen is you decompose the X matrix to the following: X = U * S * V' In Matlab, this is done by [u, s, v] = svd(x); So the pseudoinverse of X is going to be given by: X* = V * inv(S) * U' So your final formula will be: [u, s, v] = svd(x); Need the inverse of S, but if it is not square then the 'inverse' is the reciprocal of all the elements, and transpose of the matrix sinv = s'; sinv(sinv~=0) = 1./(sinv(sinv~=0)); β = v * sinv * u' * X; EDIT: Corrected some of the formula. EDIT2: Fixed inv(s) to sinv
Maybe something along the lines of: while{ - fit model - calculate average residual - if point i's residual is more than n many standard deviations away from the line, toss it... } I'm not sure you want to toss the points with the max error, otherwise you'll have no points left...
I apologize for further questioning. When I tried running the data, it comes up with an error with "inv(s)" because s is not square. What is the reason for using: sinv = s'; sinv(sinv~=0) = 1./(sinv(sinv~=0)); Would that be to find the reciprocal of the elements and transpose of the matrix?
Yep, and since S is will always have values on the diagonal, the inverse is simply the reciprocal of all the non-zero elements (the diagonal). But it's another pseudoinverse, because S is not always square, which is why inv(s) doesn't work. I forgot that before my edit. And you need to transpose it so that it matches the dimensions of the U and V matrices.
I just tried it with some made up numbers, and the SVD code above seems to work now. Good luck!
Thanks again. You've been of great help. 
You'll have to do it in the actual variables themselves, or plot two different plots on top of each other. In Matlab, you aren't plotting the actual functions, you're just plotting the data values you generated with the functions. So piecewise functions aren't really a command in Matlab. For the first: x = -10 : 0.01 : 10; y = x.^2; y(x&gt;0) = x(x&gt;0).^3; plot(x,y) For the second: x1 = -10 : 0.01 : 0; y1 = x1.^2; x2 = 0 : 0.01 : 10; y2 = x2.^3; plot(x1, y1, x2, y2) Or if you want them the same color: plot(x1, y1) hold on plot(x2, y2) 
[RANSAC](http://en.wikipedia.org/wiki/RANSAC) is exactly what you want, and basically what meowfingmeow prescribes.
For the second part, regression can be done using the backslash operator: A = [x(:) y(:) ones(size(x(:)))]\z(:); where A = [a b c] gives you the coefficients for the regression problem that allow you to calculate Z: Z = A(1)*x + A(2)*y + A(3); Then, just plot like it says: surf(x,y,Z) hold on plot3(x,y,z) 
Oh is that what RANSAC is? (Well I know it is now, I just looked it up) I remember playing with Autostitch as a kid and thinking to myself "Oh, that sounds very clever."
For your second question, that's how you initialize a for loop in MATLAB. The pros around here will tell you to avoid for loops (MATLAB's architecture allows you to avoid them in many cases), but for programming in general, they're a very important tool. So anyway, what that line does is increase the value of i for each iteration. In general for i = a:b means that on the first iteration, i will have a value of a. On the next iteration, i will have the value (a+1). Repeat until i has a value of b, then stop iterating. If you want to end up with seven weighted averages, all you have to do is weightedaverages = sample*weights'; Each row will be the weighted average for that set. To do it as a function function return = functionnamegoeshere(sample, weights) return = sample*weights'; then save it as functionnamegoeshere.m 
I actually figured it out with a LOT of trial and even more error: **To weight each grade of a particular student 'i'**: function [out] = addweight2(i) % Variables samples = [0 0 0 0 100 100; %1 0 1 1 1 2 3; %2 100 100 0 0 50 50; %3 50 50 50 50 50 100; %4 50 100 60 70 80 90; %5 0 20 40 60 80 100; %6 100 80 60 40 20 0]; %7 weights = [0.3000 0.1500 0.1000 0.1000 0.1500 0.2000]; % Use 'i' to find weighted final grade (WFG) for each student &gt; j = [samples(i,1),samples(i,2),samples(i,3),samples(i,4),samples(i,5),samples(i,6)]; &gt; out = (j.*weights(1,1:6)); **To determine sum of weight grades for student 'i'**: function [out] = addweight2(i) % Variables samples = [0 0 0 0 100 100; %1 0 1 1 1 2 3; %2 100 100 0 0 50 50; %3 50 50 50 50 50 100; %4 50 100 60 70 80 90; %5 0 20 40 60 80 100; %6 100 80 60 40 20 0]; %7 weights = [0.3000 0.1500 0.1000 0.1000 0.1500 0.2000]; % Use 'i' to find weighted final grade (WFG) for each student &gt; j = [samples(i,1),samples(i,2),samples(i,3),samples(i,4),samples(i,5),samples(i,6)]; &gt; out = sum(j.*weights(1,1:6)); &gt; fprintf('Student %ds final grades is: %d/100',i,out) 
My next question is how do I determine if there are outliers. For instance, Student 5 has grades: 50 100 60 70 80 90. How would I write a function to determine if one of those grades is 20% above or below the average of the other five grades? I'd also like to do that for more than one student at a time (I assume I need a 'for' loop).
When you use a while loop, you will need to somehow alter the "counter" variable inside the loop itselt. Otherwise the while condition will remain forever true -&gt;infinite loop or negative -&gt;while loop performs a single iteration. The way i understand your assignment, you do not need to iterate over all the numbers in the [-1,1] region (which is impossible anyways), but the user can select what he wants. The easiest way to program this is matlab is just to create a custom function, taking an input within [-1,1] and output the results. function [acosD,acosR,asinD,asinR] = trig(theta) acosD=acosd(theta); acosR=acos(theta); acosD=acosd(theta); asinR=acos(theta); end Now you can just type "[a,b,c,d]=trig(x)" in console and get your results. If you want, you can add a disp() somewhere to output your results to console. For example before the "end" you can type in: disp('The arcsine of %d is %d in degrees and %d in radians, similarly the arccosine is %d in degrees and %d in radians', theta,asinD,asinR,acosD,acosR) Now that this is out of the way, a while loop here is not ideal and is goes against common MATLAB best uses. You can however use it, if you decide to not write a function and go for a script instead. Then you can ask the user to enter however many different angles he wants and exit when he enters something outside the [-1,1] range. To accomplish this you will need to use the "input()" function. The code turns out to be very C++ like
frontpage http://www.reddit.com/r/matlab/comments/kt34f/how_can_i_test_for_outliers_in_matlab/
I actually did figure this out, and I agree it is easier and more efficient, but my teacher wants us to learn how to do it with while loops/if/else/elseif statements and whatnot. upvoteing for your time
The problem statement you gave doesn't make much sense in terms of while loops. The purpose of a while loop is to do an operation repeatedly until some condition is met. 
Unless the professor doesn't want the students to use the built in functions but rather use [infinite series](http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Infinite_series). You can solve arc sin by: clc; clear; i=input('Number between [-1 1]\n'); while(abs(i)&gt;1) disp('Number not between -1 and 1'); i=input('Number between [-1 1]\n'); end error=eps; %set you initial error threshold asinRprev=500; %inital high value asinR = i; n = 1; %inital counter for n factor = 1; %value of the factorial section while(abs(asinR-asinRprev)&gt;error) asinRprev=asinR; factor = factor*(2*n-1)/(2*n); asinR=asinR+factor*i^(2*n+1)/(2*n+1); n=n+1; end once you get this finding asinD acosR and acosD should be easy. **edit**: spelling and initial value check. I ran this on my computer and it seems I have some stability issues at higher initial values. I am checking it right now. **edit2**: factorial can only compute factors for n&gt;=21 my previous solution n went over that value. I made a new variable that calculates it more accurately. Also my error bounds were set to eps or the floating point accuracy of the computer.
Good point, didn't think of this.
Yeah...It surprised me too. They added full support for it sometime last year (I think)
I could probably tutor you in matlab and I live in Boston. I use it everyday at my job...
I actually just wound up dropping the class. Out of curiosity, what kind of work do you use it for?
I work in a lab doing epilepsy research so I use it for image analysis/electrophysiology . But I've done everything from modelling to GUI development in MATLAB.
That's really cool. I was taking an intro level course at BU, but it turned out to be not-so-intro hah. Thank you for the offer though. If I wind up taking the other easier version of the class next semester I'll let you know.
cool well my 2 cents is that any programming class you take will GREATLY improve your odds at getting a job when you graduate. so good luck!
What exactly are you having problems with? This is straightforward use of the 'surf' or 'mesh' command. For example, verbatim from the MATLAB documentation of mesh: [X,Y] = meshgrid(-3:.125:3); Z = peaks(X,Y); meshz(X,Y,Z) Instead of 'peaks' just use your function (and choose mesh/meshc/meshz as desired). 
I didn't know about these commands. Thanks. 
That's what I'm banking on haha.
Assuming your image is a single channel, ranged 0.0 - 1.0, and it's in a matrix called "im", you could try: im(ystart:yend,xstart:xend) = 1.0 - im(ystart:yend,xstart:xend); 
As eigman said, if you know the intensity limits, the job gets easier. img = imread('peppers.png'); figure(1) imagesc(img) while true %Select two point by clicking the corners xy = ginput(2); %Round to nearest pixel and calculate the corners xy = round(xy); upleft = min(xy); downright = max(xy); %Take the area simg = img(upleft(2):downright(2),upleft(1):downright(1),:); figure(2) imagesc(simg) %Calculate minimum and maximum of this are (separately for each channel for ii = 1:size(simg,3) c = simg(:,:,ii); %Original minimum and maximum mm = [min(c(:)) max(c(:))]; %Invert image %1) From max value, substract the image. This will put the original % max value to 0 %2) Add old min value -&gt; values back at range % %Note that normally with 8-bit images you can just substract the %image from 255. c = mm(2)-c+mm(1); mm2 = [min(c(:)) max(c(:))]; fprintf('\tMin\tMax\nBefore:\t%d\t%d\nAfter:\t%d\t%d\n',mm(1),mm(2),mm2(1),mm2(2)); %Put channel back to image simg(:,:,ii) = c; end figure(3) imagesc(simg) img(upleft(2):downright(2),upleft(1):downright(1),:) = simg; figure(1) imagesc(img) end
Do while or For loop
I dont quite understand? What would be in the loop?
Thanks so much for this. I should have noted that yes I know the range that it will be, they are either grayscale images with ranges from [0 1] or [0 255]
Thanks, I will try it out! 
M = reshape(array,12,161)';
thanks!
No no no, the "group" is purely for show and names the columns of X. e.g. try X=rand(10,2); anova1(X,{'Clide','John'}); To do your unbalanced ANOVA you will need as you said to add NaNs to your onservations so that they are equally sized, then put them all together in the same X matrix ( X=[w x y z]; will do assuming they already are column vectors), then call anova1(X). Group does not need to be set unless you want the graph to be labelled 
Thank you so much!
Always try to vectorize, therefore use reshape as proposed by shwaiples
If you're just looking for the plot, then the easiest thing would be to use ezplot. You can look it up in the doc, but the syntax is just ezplot('1 + 3*x + 4*x*y - y^2 = 0')
You're getting two outputs because of i = [mass, energy, angle, height] If you change that to i = [mass, energy, angle, height]; then you'll "mute" the output of that line, and just get the return from the function (ans). Your second problem, I'm not sure what you're trying to do, or what the issue is. I changed your ci line to: ci = [newmass, i(2), newangle, i(4)]; to stop it producing two outputs, and ran it, and it seems fine: i = getInputs Enter a negative mass to exit the program. Enter mass in grams: 4 Enter energy in Newtons: 3 Enter angle in degrees: 2 Enter height in meters: 1 i = 4 3 2 1 convertInputs(i) ans = 0.0040 3.0000 0.0349 1.0000 &gt;&gt; 
If you want to make several plots in the same figure just type: hold on % all your code with several plots, might help to write figure(1) above each plot as well. hold off
disp(a) might give you for the format you want, or you can take a look at sprintf.
Indent your submission with 4 spaces to make reddit see it as code. I can't read it.
I just got a job in the superconducting magnet division at a research firm as the 'Matlab Programmer'!
Scilab is just the best alternative to Matlab. It is not as polished as Matlab and feature less bells and whistles but it works well for simple data processing and plotting. I've been advocating use of Scilab in my lab for years and now everybody in my team use it. Scilab seems to be more famous in Europe than in the rest of the world.
Are you familiar with the *dir* command? You can set *ds = dir(my_folder)*, and then run a for loop on the structure *ds*, with a condition checking whether *ds(i).filename* is of the correct form.
loop from the minimum possible value (001?) to the highest. use sprintf() to make the file name use exist() to see if the file exists before actually reading it
To build on that, you could do ds = dir('my_folder/*.Master.Scope') which finds all the files that ends in .Master.Scope, this way you can have any other files in there and it will get looked over. You can then loop over the ds variable and getting the filename from ds(i).name.
To build on urish, you could do ds = dir('my_folder/*.Master.Scope') which finds all the files that ends in .Master.Scope, this way you can have any other files in there and it will get looked over. You can then loop over the ds variable and getting the filename from ds(i).name.
See, I did not know exist() existed. That would work in an if-statement. Many thanks.
Thanks for the suggestion, I will look into it. I think one of the failings of Matlab is that, unless you know it exists, or know the specific keywords required to find it, you don't know a lot of the commands and what they can do. I'm always discovering new things.
Try getting rid of the squares.
You have to use a trick by creating 4 first order DE instead of 2 second order DE. EDIT: I got distracted when answering so my answer was way too short. [This link](http://www.mathworks.se/support/tech-notes/1500/1510.html) has everything you need to solve your problem. First reduce the order (according to the example), and then solve the system (according to another example). If this is your first time doing this, I would recommend you just copy/pasting their example code, make it work for you, and then applying it to your problem. Hope this helps!
Something you can try is a top-down approach to the documentation. Instead of going straight to a page (&gt;&gt; doc fullfile), work your way down through the documentation tree in the left side of the window. MATLAB-&gt;Functions-&gt;Desktop Tools and Development Environment-&gt;Managing Files-&gt;File Operations. Granted, that was a tough path to traverse. Also you can look up something you DO know (say, the cd command) and then look at the group in which that command lives. Look at its neighbors. Shop around the documentation a little. Also, the User's Guide. [Try this page out](http://www.mathworks.com/help/releases/R2011a/techdoc/matlab_env/br5rtt_.html)
Basically, lets say the ODE is y1'' = RHS1 and y2'' = RHS2. Rewrite the system as x1 = y1', x2 = y2'. Then x1' = y1'' = RHS1 and x2' = y2''=RHS2. Your system is rewritten completely as: [y1 x1 y2 x2]T = [x1 RHS1 x2 RHS2 ]T and this can go straight into a solver. I may have gotten a couple of details mixed up, but I think this is most of it. 
Thanks!
Here's what I got with sprintf. I hope this helps the OP. a = magic(3) a2 = ['[',sprintf([repmat('%f ',[1,size(a,2)]),';'], a),sprintf('\b]')]
The matlab function [imread](http://www.mathworks.com/help/techdoc/ref/imread.html) is probably a good place to start. It will read in an image file as an array. You need to find out what kind of format your image is in. Read up on it and you'll find out what parts of the data represent the yellow pixels. From there, find out how to change those. If you have to use a for loop, then one approach could use nested for loops, one to iterate through the column (or row) and another to iterate that iteration through the rows (or columns). Good luck!
I'm assuming that you're using the pixel values as read from the file, which will give you a 550x550x3 array of data type uint8, which gives us values in the range [0, 255]. The channels are the Red, Green, and Blue values of each pixel in the image (google light mixing). Think of the R, G, B space as a 3-dimensional cube. Each pixel(i) resides at some Ri, Gi, Bi coordinates. Red pixels will be at or near [255 0 0], blue at or near [0 0 255], and so on. Yellow has a value of [255 255 0], so we want to find pixels at or near that point. * If you know for sure that all of the pixels you want are pure yellow ([255 255 0], not [254 251 5] or anything), this is easier. Anyway, so you loop through (2 nested for-loops) every single pixel. Calculate its distance (Euclidean will do) from [255 255 0]. If distance is zero (or close to zero - depends if you have pure yellow or "kind of" yellow values), then set the pixels R,G,B values to [0 0 255]. For example, let's say we're looking at the pixel in row 38 and column 2 or image I. Rtemp = I(38,2,1), Gtemp = I(38,2,2), Btemp = I(38,2,3) will give you that pixel's R,G,B values. Implementation of this procedure in MATLAB is left as an exercise for the reader. (let me know if you're struggling with it. I wanted to leave you SOMETHING to do). 
Instead of using a for loop, you should use logical indexing once you've imported the image into an array using imread. For MATLAB, this is a better method than iterating through the entire array. Example: The command &gt;A(A &gt; 10) = 0 sets all values in an array A with value greater than 10 to zero. 
Is your CPU limited? Is that why you are using two instances of Matlab? Parallelization isn't a magic pill that will make your code run faster, you need to first formulate a problem that is well-suited to multi threading. Have you tried just running both methods in one instance of Matlab? Off the bat this is way faster than writing to a swap file.
A `for` loop is probably one thing you *don't* need in matlab in this! define a function mapping (R, G, B) triplets to (R', G', B'), and apply it to the image all at once.
My CPU is not limited. I would like to run both methods in one instance of Matlab. I don't know how to do this. I also don't know what you would call that process.
Without any specifics, you can do something like: while( run ) data = sampleInstrument(); if (analyzeData) performAnalysis(data); end end If you aren't CPU limited, it shouldn't matter if performAnalysis() is called or not. This way you don't have to write any data to the disk. Without knowing any more specifics I don't know how else to help.
I don't think this would work for this application. performAnalysis would need to pass a lot of previously analyzed data back into itself. I want sampleInstrument to be sampling at a somewhat steady rate and performAnalysis to have information from previous analysis and also display stimuli at a somewhat constant rate. I read something about an example using the Data Acquisition Toolkit in [this article](http://www.mathworks.com/matlabcentral/answers/2081-how-to-execute-two-matlab-scripts-simultaneously) but I can't seem to find the tutorial which is supposedly labeled "Using Callback Functions to Create Live Displays and Analysis" EDIT: I didn't read far enough, it might be [THIS TUTORIAL](http://www.mathworks.com/products/daq/demos.html?file=/products/demos/shipping/daq/demo_compactdaq_aiandao.html)
If you have a GUI component to your code, you definitely want to multi thread to keep your interface responsive. Good luck!
I wrote a similar function for work that would have a host Matlab and various client Matlab programs all talking to each other. The source is work proprietary, but the gist is that I started a Java server that accepts incoming connections and each client connects over and passes the data to the server. Since the server is single threaded, there's no instances of conflict. I abstracted out everything into matlab syntax such that when creating a new object of the "shared" class, any subscript operations in matlab (blah.a, blah.b) would be automatically sent to the server and the data sent or gotten.
 x=0:0.01:2*pi; y=sin(x); z=cos(x); figure(1); h = plot(x,y,x,z,'LineWidth',3); get(h(2), 'color') ans = [0 0.5 0] Verify: plot(x, y, 'LineWidth', 3, 'Color', [0 .5 0]);
So I'm guessing I have to use "hold all" or "hold on" if I want to plot two lines on the same graph - I can't use the 'color' tag if I want two different colors. Is that true?
Hmm, an interesting problem! How I would do it: Start with imread, to input the image into an array with dimensions w x h x 3 (for RGB). Then, convert this matrix into the HSL (Hue, Saturation, Luminescence) colour space. Take the "Red" pixels (+/- 25 based on their H value) and change them into "Yellow" (Ie, offset the H value - add a constant). Convert back to RBG and export. You can find info on these things [here](http://en.wikipedia.org/wiki/HSL_and_HSV). There may be functions for RGB-&gt;HSL in the image processing toolbox? Chances are, though, that you wouldn't have it. It shouldn't be too difficult to write your own or even find one prewritten. You said you need to use a for loop - the loop should probably be something like for i = 1:w*h x = mod(i, w) y = floor(i/w) There might be some +/-1 going on there... I'm too lazy to open Matlab to try it out, and I can't remember the indexing convention. Been a while since I did any serious matlab programming.
I am pretty sure that code would force single threading. 
I haven't done this in Matlab, but some sort of controlled-access stack (preventing two different functions from accessing the same thing) or a FIFO like buffer to manage the data. As an example, LabView has the queue which is ideal for this type of work. May lab must support this activity at some level. 
Personally, I don't think that a color space conversion is really necessary here as it's a pretty simple problem. And if you're looking for more complexity and perceptual accuracy, you may try [L*a*b*](http://en.wikipedia.org/wiki/Lab_color_space).
Because you said you're using for loops, I approached this with for loops. Here's the code I would use for this: %% read in whatever image I = imread('peppers.png'); figure, imshow(I) % reshape so we have 3 columns of R, G, B values I2 = reshape(I, [], 3); % fancy MATLAB to compute the distance from pure yellow = [255 255 0] D = sqrt(sum((bsxfun(@minus, double(I2), [255 255 0])).^2,2)); % define the distance (from pure yellow) threshold % chosen based on the image. You need to figure out the best value for YOUR image thresh_dist = 70; % change pixels within threshold distance to blue = [0 0 255] I2(D&lt;thresh_dist,1:2) = 0; I2(D&lt;thresh_dist,3) = 255; % reshape I3 to recover true shape I3 = reshape(uint8(I2), size(I)); figure, imshow(I3) 
To use the property tags, you'll need to use hold on. When you want to plot multiple datasets in the same call to plot, you can only use the LineSpec options (doc linespec) to specify properties of each individual plot. The property name/value pairs are only supported at the end of the call and apply to all of the datasets. However, it is possible to change the default set of colors that get used when you call plot. The axes object has a property called "ColorOrder" which is a list of rgb tuples that matlab uses to determine which colors to make all of the lines when you plot. plot(x,y,'LineWidth',3); get(gca, 'ColorOrder'); You'll see that blue is the first row, the dark green is the second row, etc. You can set the axes individual colororder by using something like set(gca, 'ColorOrder', [1 0 0; 0 1 0; 0 0 1]); or set(gca, 'ColorOrder', lines(10)) If you want to set the colororder once and have it apply to all of the plots you're making, you can set the default color order: set(0, 'DefaultAxesColorOrder', jet(10)); This will get reset when you close and open matlab again. See "doc colormap" for the list of available colormap types (like lines, jet, hot, etc) that you can use if you don't define your own.
If it isn't the [0,1,0] green that bothers you so much as the discrepancy, you can always adjust the default colors: &gt;&gt; c = get(0,'defaultAxesColorOrder'); &gt;&gt; c(2,:) = [0,1,0] &gt;&gt; set(0,'defaultAxesColorOrder', c); 
You will have to be a little more specific about what the "data" is (images? just numbers?). Two options would be: * Install a database and write to and read from it. Databases are designed to deal with such kind of sametime access issues. * Just write a new file everytime your sampling program makes a reading. Then the other matlab program can open whatever file is there without worrying whether the original program will open it again or not. This works very well if you have an SSD, I do exactly this kind of thing with microscopy images.
I'm pretty sure you mean it's a coarse method, not a course method... Anyway, whatever MATLAB can't parallelize on its own, you have to parallelize manually (as you have done) or use the toolbox. However, the "extra file" method of passing a message from instance to instance is, as you have discovered, quite awful.
How about if you use two timers: The TimerFcn of the first takes the samples and the TimerFcn of the second can use these values. Tip: to delete all timers, use "delete(timerfindall)"
Would I still be running to instances of matlab? Or would this work within one function?
First, this is a classic example of a producer consumer pattern. Next, coroutines are a simple way of implementing this. I don't think matlab has lexical closures like r or python so you would need to do the book keeping by hand. Further, running two instances of matlab is multiprocessing and not multithreadung. Udont know if matlab can do multithreading but I imagine it can't without a Gil and is hence worthless. If you can manage coroutines this will be the easiest solution. Otherwise the Java mex server is the next best bet.
Is switching x and y and than interpolating, plotting, reading, etc. a stupid suggestion?
Use **fzero** to find the x-values: x_value_for_13mV = fzero(@(x)(polyval(pf2,x)- 13), [temp(1) temp(length(temp))]) This line uses fzero to find the root of your **polynomial fit value - 13mV**. This root corresponds to the x-value you're looking for. Repeat this line with other y-values to find their corresponding x-values. This part: @(x)(polyval(pf2,x)- 13) creates an "anonymous function" that takes x as an input, substitutes it into polyval(pf2,x) - 13 and returns its value. This function is evaluated by fzero using various algorithms (e.g., voodoo) to find the root. The second part, [temp(1) temp(length(temp))] just tells fzero to look in a specific range of values. In this case, I am using the entire range of your temperature data. Alternatively, you can tell fzero to look near a specific value (see MATLAB help for more details). 
You're gonna have to be much more specific. At least tell us what you've tried.
[Here's where I'm at right now](http://dl.dropbox.com/u/45083137/Matlab/lab06.txt)
zomg! Wish I knew about this. I had the exact same situation as OP but luckily didn't have 'missing' files in the range so a simple for loop worked well. OP said: &gt;I think one of the failings of Matlab is that, unless you know it exists, or know the specific keywords required to find it, you don't know a lot of the commands and what they can do. I'm always discovering new things. Same man, same. Bit annoying sometimes.
Yeah I experienced this big time. Doing some simulation/coding stuff for thesis. Did first part in matlab, meh easy. Thought I'd do the next bit in C++ since I had some knowledge of it but wanted to become more comfortable with it. Struggled for 2 months or so, then thought 'fuck this, im doing it in matlab'. Three days later, program working exactly like I wanted. My C++ knowledge did increase a lot though. Working with 3D arrays in C++ is very far from fun. INDICES EVERYWHERE.
Matlab is nothing like C/C++... You CAN do many of the same things, but they're not 'alike' at all.
http://www.mathworks.com/help/techdoc/ref/base2dec.html http://www.mathworks.com/help/techdoc/ref/dec2base.html 
If you want the code for something like this instead, I mean you really can just do a simple "base to decimal code" search...
[here is how to convert from different bases](http://mathbits.com/mathbits/compsci/Introduction/frombase10.htm) for information about functions look at "help function". There is some pretty good detail on it. the basic concept is that you have function [output_a , output_b] = functionname(input_a, input_b) output_a and output_b are both variables that you will get out when the function is called from somewhere else. the inputs input_a, input_b are the inputs that are needed for the function to run. in the function part after the header, you can do any math that you need to do (converting between bases), but you only have the inputs to work with. I would suggest to start with something along the lines of .... function [result] = convertBases(number, StartBase, EndBase) and go from there. output_a, output_b, input_a, input_b are all variables that are stored as they are created. 
I wrote this down real quick, it does not check if your inputs are valid (positive integers etc.) and works for all bases 2-10. function [ y ] = convert( x,r1,r2 ) %Convert a an integer x in base r1 to base r2 %x must be positive integer r1 r2 must be positive integers equal or less than 10 y=0; %|init digit=0; %| while x&gt;0 y=y+r1^digit*mod(x,r2); if mod(x,10)&gt;=r1 error('Input invalid, digits are higher than radix. Please check r1 is the correct base') end x=floor(x/r2); digit=digit+1; end end Before blindly copy pasting it, make sure to try it for several base cases. I might have fucked up somewhere. Never trust anything you find on the internet
What do you mean distributes the thetas all over the array? you can do [THETA,R]=cart2pol(I(:,1),I(:,2)); Z=[R T I(:,3)]; Now Z is in the format you want. How are you doing the integration?
thank you very much you are a kind person
thanks you so much for this, i 'm going to try it right now(it's 3 am ( ._.) ) Which are the cases i must check? I think zero, negative numbers and decimals?
thank you for the right advice
thank you very much
no problem, just ask if you are still getting stuck. the help section in matlab is really good (help AnyProgramYouCanThinkOf) and will give examples to use. 
It returns 0 right now for negatives/zero, decimals it treats as the floored version. You can easily add some error detection though.
So, it's embarassing, but how do i make it work?Which click make the trick?
how do i make a code work? I mean i wrote the code, now what?:( i am so ignorant)
Eh. before the initialisation you can do something like: if x&lt;0 | r1&lt;0 | r2&lt;0 error('Some error message') end Just think of stuff that can go wrong 
once you write the function save it as a .m (it should default to the function name that you put in there) then just run it from the folder you created it from by typing (using my names), convertBases(10, 10, 5) being funName(number, StartBase, EndBase). This can be called from a script that you create or from the command line either will work as long as you are in the same directory as the function. 
which is the directory of the function?i think this is the proble, cause i'm having a error :"Function definitions are not permitted in this context.", but i assure you that i saved the file as convert.m, ad i'm calling the function (case sensitive)in the command center.
Alceblades has the general structure down that should run. Are you passing the variables you want through right (everything being defined when put in and when outputted)?
what do you mean "passing the variables"?
making the input=1 and using those numbers in the function. Also by making sure that output=5 by the end of the function
So i made the program work! What i noticed, is that if r1 is in base 2, and x is different from 1, 0 or a combination of 1 and zero, it gives me an error. What i'd like to do, is to make an error message appear if you enter in x a value that is different from 0 or 1( or a combination like 111, or 10110). I hope you can help me! I thought to put a condition like "if r1 is in base 2 and x is not binary then error message appear" but i don't have idea how to say that x is not binary. if (r1=2) &amp; (x=1 | x=0) but i think it's not a good idea. 
It gives you the error because we programmed it in if mod(x,10)&gt;=r1 error('Input invalid, digits are higher than radix. Please check r1 is the correct base') end radix(base) is 2 in binary case. If you want to show custom message, change it to: error('Input invalid, digits are higher than radix (%d). Please check r1 is the correct base',r1) Now when the error condition is met, instead of %d it will show the value of r1 (2 in case of binary)
Ok. I would like to ask you the meaning of some of the code you wrote. Why you wrote y=0 and digit=0 at the very beginning( init )? Why you wrote digit=digit +1 at the very end? What does this means while x&gt;0 y=y+r1^digit*mod(x,r2)? What does mod means ?Here: if mod(x,10)&gt;=r1. I swear i read the definition on the manual, but i can't find digit, and i don't understand what mod means. 
mod(x,y), is the modulo of x divided by y see: http://en.wikipedia.org/wiki/Modular_arithmetic y=0. digit=0 is just initialising some parameters, we want both of these to start at 0. The "digit" parameter is basically just a counter, it counts how many digits we have read from x. You always need some counter to know when to exit your for/while loops, this counter needs to change inside the while loop in some form (to avoid infinite loops), in our case we are incerementing "digit" by 1 at the end of every loop as required by the algorithm.
well i don't know how to thanks you, for your readyness of answer. Guess i'm back studying some quantum mechanics now.
I don't believe that MATLAB has that capability. Google told me [this](http://www.mathworks.com/matlabcentral/fileexchange/22088).
Thanks, I know that one. I was looking for something as flexible as the actual anovan.
Look at the [block diagonal command](http://www.mathworks.com/access/helpdesk/help/techdoc/ref/blkdiag.html). s = sym('s',[3 3]) A = blkdiag(s,s,s)
God forbid mathworks should add standard concurrency functionality to the language. I can't tell you how many times that would have made a difference.
Consider an easy 2D example, neglecting time: x = -1:1; y = -1:1; [X,Y] = meshgrid(x,y); Let I be a function of X and Y. Then converting to polar: [TH,R] = cart2pol(X,Y); ... we get ... TH = [-3pi/4 -pi/2 -pi/4; pi 0 0; 3pi/4 pi/2 pi/4] R = [1.414 1 1.414;1 0 1;1.414 1 1.414] Note that there are 8 unique thetas and 3 unique ranges. Integration over theta is no longer straightforward using standard quadrature such as trapz, since the function requires meshgridded array construction. The simple solution here is to assign appropriate theta and range resolution and interpolate onto a meshgridded domain and integrate ... th = -3*pi/4:pi/4:pi; r = 0:sqrt(2)/3:sqrt(2); [TH,R] = meshgrid(th,r); Iout = trapz(TH,I,2); My primary issue here is that interpolation onto the TH &amp; R meshgridded domains is ugly and a loss of accuracy.
Haha, I think it's pretty creepy. That's their default image, so calling imagesc without an argument displays that. I saw it this weekend calling 'image' instead of my variable 'image1'. Took me a while to find where that random kid was coming from. 
There is more on the history of MATLAB default images [here](http://blogs.mathworks.com/steve/2006/10/17/the-story-behind-the-matlab-default-image/).
also fun, typing in **spy** without a matrix
try running: why 
Wow...that is great! I almost didn't read through it...but wow...that is awesome!
Haha, awesome! The bald and not excessively bald and not excessively smart hamster obeyed a terrified and not excessively terrified hamster. 
I don't know what exactly you're asking (except maybe "read this, figure it out, and do my work for me"). What do you have so far? What are you stuck on? I'll throw this out, though: double/char can be used to convert characters to their ASCII codes (48 -&gt; '0' like it says up there). &gt;&gt; char(48) ans = 0 % note that the 0 is of char data type &gt;&gt; double('0') ans = 48 % note that the 48 is of double data type 
I can't pull matlab up at the moment, but you should be able to do something like this: fs = 48000; duration = 5; noise = randn(1,duration*fs); That will give you a time-domain signal of just noise. Apply your BP filter however you need/wish.
What have you tried? 
That's exactly what I did. But if I do 48000*5, the noise plays for 20 seconds
Ah thanks a lot guys. I just had to specify what Fs I need the sound to be played at in the sound command.
When you call wavplay, you are specifying the sampling rate, correct?
Wavplay doesn't work on Mac. But same thing worked for sound!
Are you using disp on a scalar variable? If it's a vector or higher dimension, it's more complicated. Try this: X = 1138; fprintf(' The value of X is: %f\n', X) % or maybe fprintf('\tThe value of X is: %f\n', X) % \t is a tab % or even fprintf('-----&gt;&gt; The value of X is: %f\n', X) % or just fprintf('\tX = %f\n', X) what does the %f do? &gt;&gt; doc fprintf If that's overkill, check out the command display. &gt;&gt; doc display
This actually answered it. Thank you very much!
That looks pretty beautiful. Would you be ok with sharing the code? I'm really interested in doing some of those things
Very nice!
Pretty.
Great work. Do you mind sharing the code? Looks like there's a couple things in there that I could learn from. Again, well done.
I would like to see the code as well...
I would like to see the code as well...also, what is the colorbar representing? Velocity?
yes (in meters per second)
I am very willing to share this file but when I put the code in the comment section and then try to paste it back to matlab, it somehow does not recognize enters and therefore certain parts are put behind a green comment line. Oh and i even tried changing the format to jpeg and uploading it to imgur but imgur does not accept corrupted files. Anybody any ideas how to publicly share a matlab file?
YES, i found a way: [this link](http://shorttext.com/eFOWwM) refers to a text file. Just copy and paste the text into a new script and you're good to go :D. I hope it helps you.
Super cool. So the origin is to the left of the larger body and the terminus behind the smaller body? 
You could always upload the .m file to MegaUpload or RapidShare or something. Or C&amp;P the text into Pastebin.
Very cool. Thanks for sharing!
In this screenshot the origin is near the smaller body (the one representing earth with its centre at 0,0,0) and the terminus is the one about to collide with the larger body. Or course, this is a 2d representation of a 3d plot. It is advisable to run the script yourself (allthough the colors slow it down considerably). Also, all parameters are adjustable including planet sizes (therefore also gravitational pull), planet locations, length (timewise) of prediction, satellite starting position, velocity and direction and an additional boost can be added. (see code)
Thanks, I found a website simalar to Pastebin and put the code [here](http://shorttext.com/eFOWwM) (also see my other post with link)
just use the command "box off" or you can do "set(gca,'Box','off');"
Using "box off" also turns off the line. I simply want the tick marks to be removed, so my plot looks a little cleaner. I appreciate the help.
The only way I can think of doing this is drawing a white rectangle near the top. Will only work for a fixed figure size though (i.e. if you resize the figure you'd have to re-draw the rectangle). For a standard size plot 20 wide this will work: plot(rand(20,1));hold on; r=rectangle('Position',[0.075 0.95 19.5 0.045],'facecolor','w','edgecolor','none')
The opposite works too, removing the box then re-adding 2 lines. &gt;box off; &gt; &gt;xlims = get(gca,'XLim'); &gt; &gt;ylims = get(gca,'YLim'); &gt; &gt;line(xlims,[ylims(2) ylims(2)],'Color','black'); &gt; &gt;line([xlims(2) xlims(2)],ylims,'Color','black'); Could also be done with a rectangle I guess.
This is by far a better method. I had no idea `line` would default to tick-sized lines. Very elegant.
That works quite beautifully. If you plot your data first, there's a chance that the white rectangle will cover data. So, I just need to remember to plot the rectangle for both the top and right sides, then the data. Thanks again!
Can't you just create a function in a separate script and make a handle to that?
i'd really like to avoid writing a new file. in any case, i got it! it's kinda weird, but: spec.qfun=@(t) 10^-1*(t&lt;=300)+10^-3*(t&gt;300); .1 for t&lt;=300, .001 for t&gt;300. yay. 
Unfortunately I don't think you can do this because MATLAB has no conditional assignment operator and anon functions can only be one statement long. I don't quite understand why you need an anonymous function for what you are doing though. Is there a problem with writing a regular function and adding it's function handle to your struct? An anon function is no different than a regular function handle. In other words, &gt;sqr = @(t) sqrt(t) is the same as defining &gt;function root = foo(t) &gt;root = sqrt(t); &gt;end and then getting its handle: &gt; sqr2 = @foo; Hope that helps. 
I know. I just didn't want another file in my working directory for something so trivial. The boolean operators work very well. 
How about this hack? % define your constants for the function t0 = 5; a = 123456; b = 999999; step = @(t) a*(t&gt;t0) + b*(~(t&gt;t0)); &gt;&gt; step(4) % will return b since 4&lt;5 ans = 999999 &gt;&gt; step(6) % will return a since 6&gt;5 ans = 123456 
Yeah, I overlooked the boolean operator solution. You can declare multiple functions per m-file, so there should normally be no need to add another file. Cheers!
I would use python instead of matlab for a problem like this, file IO and strings are faster and cleaner to use in python. In either case, the best implementation will go like this: 1. Read in a line from the file. 2. For each word in that line, apply your conditionals. In your case, they'll be "is the word 14 chars" and "is the word alphanumeric"; should be enough to separate coke rewards from a conversation. 3. Add every word that passes your conditionals to a buffer. 4. Read in the next line. Here is a quick and dirty matlab implementation: % read in the text fid = fopen('test.txt', 'r'); all_lines = textscan(fid, '%s', 'delimiter', '\n'); all_lines = all_lines{1}; fclose(fid); % stores found reward codes reward_strings = {}; % find reward codes in each line for i = 1:length(all_lines) this_line = all_lines{i}; % seperate the line into words tok = this_line; words = {}; while ~isempty(tok) [words{end+1} tok] = strtok(tok, ' '); end % for each word, check if reward code for j = 1:length(words) this_word = words{j}; % reward codes must be 14 chars if numel(this_word) == 14 % reward codes must be alphanumeric if sum(isstrprop(this_word, 'digit')) &amp;&amp; sum(isstrprop(this_word, 'alpha')) reward_strings{end + 1} = this_word; end end end end disp(reward_strings); I read in the entire file at once since it does not look like memory will be an issue, but you can also read line by line from the file handle using fgets.
Note: this code takes alphanumeric to mean "has both alphs and nums", not "could have both alphs and nums". 
You should be able to do this with something like: regexp(fileread('file.txt'), '\&lt;\w{14}\&gt;', 'match'); Sorry if that's not quite right, I don't have MATLAB in front of me now.
According to matlab help: Field width Minimum number of characters to print. Can be a number, or an asterisk (*) to refer to an argument in the input list. For example, the input list ('%12d', intmax) is equivalent to ('%*d', 12, intmax). Try fprintf('%4.2f\n', pi) vs fprintf('%5.2f\n', pi), you will see an extra space in the latter output so that you have a total of 5 characters displayed, including an empty space in the beginning. 
thanks! 
Yep, this is the same "hack" we used to use on TI calculators. I approve.
You should probably use the approach of red90, it is far more beautiful!
i cannot tell if it works or not...maybe if i save the output it to some cell array. thanks
it worked flawlessly for my txt file with a little lag between my small test file and the actual thing. your code is very much appreciated. i dont normally handle strings and such since i mostly just do engineering math related things with matlab, and ive never ventured outside matlab much for coding. again, thanks.
Yes, the output of the regexp function will be a cell array of the matching 14-character strings. I'd be curious to compare the results and performance of this against the other answer you received.
It happens to the functions I write automatically... Do you have R2010b or later?
You delcare inputs when you declare the function. For example, function s = yawnobelix(x) specifies x as an input of yawnobelix. You can specify multiple inputs with function s = yawnobelix(x, y, z) Where x, y, z are inputs. Once written, you can type these functions in the command window and you'll see the little pop-up box listing their inputs just like it shows in your picture.
I'm not entirely sure what you mean. How are you displaying the "red objects". If you are just plotting without overlaying on an image you may need to do: set(gca,'YDir','reverse');
Ok, that's flipping the Y-axis, but how do you flip the actual matrix sothat the top most point becomes the bottom most point and so forth.
You set ranges using colon. I.e. 1:10, 1:end, or end:-1:1. So let's say we have a matrix of size() 10,2 with your co-ords. To flip you might do: M = M(end:-1:1,:); or M = flipud(M);
Awesome. I really appreciate the help. This code will be implemented into our attention modeling scripts. Ill be sure to put your name in the comments. 
axis ij versus axis xy 
This probably doesn't work in MATLAB because, last I checked, MATLAB's command line flags aren't the same as octave's. (edit: That said, it should be easy to add support for.) Also: node.js only very recently became cross-platform, meaning this will be more difficult to get running in windows. Also, I use linux so I have no idea how to make it run in windows. :S
Does matlab have useful using libraries that don't involve parsing Json in matlab code? I.e. I'd be interested to know if jsonlab can parse non trivial json files in an acceptable time. 
Creating a filter means you need to create a vector in Matlab that satisfies the given criteria. The criteria stated are sufficient to make it a bandpass filter, so you only need to worry about how to complete the requirements stated in the problem. 15 samples means that the vector needs to have a length of 15. As for what the values should be for these 15 numbers, you will need to calculate those numbers from 2 other vectors that you will need to create (the two Gaussians). To create a Gaussian distribution, you could implement the formula for a normal distribution yourself: 1/sqrt(2*pi*s^2)*exp(-(x-m)^2/(2s^2)) or you can use the TA's hint to use the existing function normpdf to do this step for you. Use normpdf to create vectors that represent each of the two Gaussian building blocks you need. Read [this page](http://www.mathworks.com/help/toolbox/stats/normpdf.html) for rules on how to use normpdf. Once you have your two Gaussian building blocks, you should subtract them to create your desired filter.
Napolean Dynamite needs matlab help?
The .p files are functions. So you call them with one input, receiving one output: &gt;&gt; y1 = unknownSys1(x1); The homework is telling you to make up some different x1 (and x2) signals and pass them through the two unknown systems. the delta function (which gives the impulse response on the output) is just a "1" at t=0 and "0" otherwise. &gt;&gt; x1a = [1 zeros(1,47)]; % N= 48 total &gt;&gt; y1a = unknownSys1(x1) Hopefully this gets you started.
You mean, has someone written c bindings to a json parser/stringifyer for matlab? Possibly, but if so they really need to sell it more.
I doubt you'll get much help when straight up asking people to do your homework. Try first and you'll probably get a better response.
I apologize if it sounded like that. I'm just seriously stuck in a rut. I'm not asking straight up for people to do my homework. I just needed some hints to try and get started. 
Thank you. This really helps. 
Thank you so much.
I agree. I try to hold back on posts that sound like "do my homework, please," but I also know that there are many professors out there who give vague assignments and are told to "just figure it out in MATLAB. Due tomorrow." Because of this, I will try to help clarify (what I think is) the assignment and maybe get the OP started. I suppose that my first post should always be "what have you tried?" Or maybe that needs to be posted up next to the Submit button.
I prefer Java for mex since I support users on multiple operating systems. But yes, I would love such a thing for calling out of matlab.
&gt; I prefer Java for mex since I support users on multiple operating systems. Yeah, that makes sense. There should be at least one good json library for java, but I don't really know a whole lot about building mex stuff. Either way, the only json tools I saw on the file exchange were the ones from jsonlab (which are pure matlab). Edit: If you feel like forking this and trying to make it work on matlab, that'd be sweet.
So after some thought, I think this might work. Put u and x in the same vector, make a new constraint matrix that has zeros for all the u-elements and the correct coefficients for the x-elements, and then use a matrix of 1's and -1's to implement the x - u &lt;= 0 and the -x - u &lt;= 0 inequalities. x = data_vector_of_interest; u = x; g = [ u; x ]; f = [ ones( size( u ) ); zeros( size( x ) ) ]; % The equality constraint. Ag = [ zeros( size( A ) ), A ]; % The inequality constraints. bleq = zeros( size( g ) ); Aleq = [ -eye( numel( u ) ) +eye( numel( x ) ); ... -eye( numel( u ) ) -eye( numel( x ) ); ]; xmin = linprog( f, Aleq, bleq, Ag, b, [], [], g ); 
I think most functions that take functions as inputs take them in the form of strings. If you had fx=input('fu'), try fx=input('fu','s'). The argument 's' returns the input as a string, which will make it easier to use. If this doesn't work, what's your code, and what's the error?
Have you tried simply using "fzero"?
what type of errors are you getting? have you tried inputting the functions using function handles? i.e. @(x)? it may fix some things?
not sure if making fun of stupid people; or i'm just reading this in a funny accent
lol i'm pretty serious. I know it sounds funny ( english is not my first language ) but 1. I slept 3 hours so i think and talk like a 3 years old. 2. No i never used matlab neither they explained anything at university 3. we study chemistry and have little to no clue what to do. we know just a bit of c++ 
[ok](http://www.mathworks.com/help/techdoc/ref/intersect.html) if you needed help you got it, if troll, no harm to anyone cuz i still need things to do 
i swear i'm not trolling anyone.we already read intersect from guide. What we want to do is to find intersection points...sorry to bother you!Can you give us a little help? 
Do you have the image processing toolbox? If so, there are functions for this sort of thing (connected component analysis - aka blob analysis). [bwconncomp](http://www.mathworks.com/help/toolbox/images/ref/bwconncomp.html), [bwlabel](http://www.mathworks.com/help/toolbox/images/ref/bwlabel.html), and [regionprops](http://www.mathworks.com/help/toolbox/images/ref/regionprops.html) are used for this. And if you're looking for elements that are touching in any direction (side-side OR diagonal), you have what they call "8-connectivity." If you don't have the image processing toolbox, maybe look [here](http://homepages.inf.ed.ac.uk/rbf/HIPR2/label.htm).
Because sin(x) and x^2 take x as an input, while "1" does not. Try this: @(x) ones(size(x)) 
That's because you're not using your declared variable in your anonymous function. If you want an array of ones the same size as x, use this: thing = ones(size(x)); if you are dead set on using an anonymous function to get an array of ones, you still have to use the variable in the function. For example: funky = @(x) x*0+1;
Thanks. i forgot to mention it was a user defined function (ie given on the hw as input), so if they put that in then in my script it needed to have a column of ones so I could use the backslash operator to find the coefficients for constants (which is 1). I just made an if/else saying if the user function is @(x) 1, then do ones(1,length(x)), else do everything normally..seems to work. 
You can use: figure plot hold on plot ... plot Alternatively look into subplots.
This is insanely wasteful. Why would you do a multiply of a potentially massive input to get a matrix of zeros? Just do @(x) ones(size(x)) as I think Floppy already said.
You can use a single anonymous function with parameters for the coefficients: f=@(t,x,a,b) [a * x(2) - b * x(1);-a * x(2)]; Then you need to call in ode45 with the proper a &amp; b, e.g.: ode45(@(t,x,a,b) f(t,x,0.018,0.0035), [0 100], [0 100])
I will do, thank you. I got my self into a mess with if statements. * Edit, I do not have the image processing toolbox, darn! But bwlabel is perfect thanks!!!
if you want to apply an anonymous function to **each element** of a numerical array, use `arrayfun`: &gt; arrayfun(@(x) 1, 1:10) ans = 1 1 1 1 1 1 1 1 1 1
There seem to be quite a few papers written in this subject area. Have you searched for "organ segmentation"?
I have, and i now have a rough idea of what i want to do (yesterday was just one of those days i guess). I'm a bit iffy with syntax here and there still but the basic plan i got now is this: * use imadjust to accent the liver a bit more * increase the brightness a little * increase contrast about 1/4 the amount of the brightness increase * basic thresholding * median filtering * edge detection Playing with the images in paint.net helped me get an idea of what might help. I can still see myself getting stuck with syntax and a bit of how to with Matlab (its been a while since i used it). Just posted this as a way to find someone i could bounce ideas off i guess.
try sound(x, fs) . It looks like your default sample rate is (5/20)*48000 = 12 kHz. To filter try using butter or buttord for an easy filter function. 
Here's what I found, using the patch command. It's not the prettiest, but it works. %% Build the surface by hand figure hold on for n1 = 1:nairf-1 % get the points from the n1-th slice X1 = radial_loc(n1)*ones(ncoor,1); YZ1 = rot_airf{n1}; % get the points from the n1+1-th slize X2 = radial_loc(n1+1)*ones(ncoor,1); YZ2 = rot_airf{n1+1}; % take every point quad on the surface and make a patch for n2 = 1:ncoor if n2&lt;ncoor A = [X1(n2:n2+1,:), YZ1(n2:n2+1,:); ... flipud([X2(n2:n2+1,:), YZ2(n2:n2+1,:)])]; else % wrap around to the first point to complete the loop A = [X1([n2;1],:), YZ1([n2;1],:); ... flipud([X2([n2;1],:), YZ2([n2;1],:)])]; end % make the patch. add some transparency to get all fancy patch(A(:,1), A(:,2), A(:,3), 'r', 'FaceAlpha', 0.5) end end % change the view to one that's better view(-78,52) grid on
This one kind of works, but i think that Delaunay is creating all of the internal triangles, too, so the output is weird. %% Delaunay AllPoints = []; for n = 1:nairf curX = radial_loc(n)*ones(ncoor,1); curYZ = rot_airf{n}; AllPoints = [AllPoints; [curX curYZ]]; end dt = DelaunayTri(AllPoints(:,1), AllPoints(:,2), AllPoints(:,3)); Tes = dt(:,:); X = AllPoints; tetramesh(Tes,X); camorbit(20,0) axis square 
Can you post a montage of the original sequence? Also, the link to the segmented montage is dead now.
I just got this to work on my Mac, but my next question is whether it is possible to get some sort of formatting on your code, as in keywords getting highlighted and so on...
? What do you mean? If you're doing something like matlab -nojvm -nosplash -r filename Then its just going to execute 'filename.m'. You're not actually editing code, so where would formatting come in to play?
How many objects we talking here? How regular are they? Could you post a picture? This is a problem I deal with in a variety of ways when I use MATLAB to do cell counting in some of my research. Some strategies I use include eroding an image, analyzing the structures for specific shapes that might clue you in to a shared border etc. But it depends on what they look like and how many you have (processing time). 
[num2str](http://www.mathworks.com/help/techdoc/ref/num2str.html) and string concatenation num2str converts a number to string format. You can then concatenate your words and values in an array. As an example, x = num2str(10); y = num2str(50); sentence = ['Apples cost ' x '.' y ' dollars.']; disp(sentence) will then output 'Apples cost 10.50 dollars.' Note there are no commas in between elements you want to concatenate. 
Thank you!
I mean if I type matlab -nojvm and then start typing in commands, all of the text shows up in one uniform color. I remember seeing someone else's setup in which they had a prettier display, but were still operating out of terminal. Keywords like "for" or "fprintf" would show up in one color, variables in another color, etc. It just makes the code easier to read.
[original input (small part anyway) and the intensity adjusted image](http://imgur.com/a/tNqk5) What I'm thinking from here is to set all the pixels with rgb = 1,1,1 to 0,0,0 so that the bones and bed will be removed from the image leaving me with less to fiddle with.
I think the default is helvetica for plots
 fprintf('Pears cost %2.0f.%2.0f dollars\n\n',xx,y); Will print into console what you want. Do a 'help fprintf' to find out what %f does and what other alternatives are
For the command window and the editor, the default is 8pt Monospaced, which in Windows is typically mapped to Courier New. It depends on your OS and Java version, but you can find it your Java directory under jreX/lib/fontconfig.properties.src. I like to change mine to 10pt DejaVu Sans Mono or Bitstream Vera Sans Mono. See [here for help](http://blogs.mathworks.com/desktop/2008/09/01/choose-a-good-font-your-eyes-will-thank-you/).
Deja Vu Sans Mono is fantastic, I use either that or Consolas.
This is close but incorrect. The lower bound for u needs to be set to zero, so include lb = [ zeros( size( u ) ); -inf( size( x0_r ) ) ]; and then the call to linprog becomes: xmin = linprog( f, Aleq, bleq, Ag, b, lb, [], g ); 
you could try a [watershed transform](http://www.mathworks.com/company/newsletters/news_notes/win02/watershed.html) 
I'm guessing everything was working fine before compilation. Where are the c functions you are calling located? Are they packaged into the app's ctf archive, or did you just put them into the same directory? Are you sure that your program does not throw any errors when run from the command line?
Actually my compiled version works perfectly until I call the vlfeat (.C) function, it does not present errors, it just seems to omit everything after this point (like if everything would be a comment line). About the C functions, I'm just adding the directory... I guess is here where I am doing something wrong. I also have tried to add the files as "helper files", in this case, the compilation has errors, and of course I do not get any standalone version at all. 
Weird that you are not getting an error at all. I ask where the functions are because I found when trying to read external data sources in a compiled app that path management for executable matlab applications is completely fucked. If you are calling the c function from within a directory and/or are adding paths to functions based on the current directory or any other relative path, this could be your problem, and you could read up on ctfroot and compiled path management to solve it. But I think you would expect the matlab runtime to throw an error when it doesn't find the vlfeat function. Have you compiled the source code you are trying to run into a [MEX](http://www.mathworks.com/support/tech-notes/1600/1622_files/1622_R13.html) (Matlab EXecutable) file? I think all external c code has to be compiled to MEX before it can be called from a matlab routine, but if you installed [vlfeat as a toolbox](http://www.vlfeat.org/install-matlab.html) I believe compilation to mex happens during installation. That's all I can think of, hope you get it up and running. 
There's a secret code here, see if you can figure it out. 
that is a huge part of the problem!!!! you need to create a handles object!! Ill send you a code sample in the morning.
This sounds like a really cool project! I actually did something pretty similar for a client a year or so ago. If you are using GUIDE and the fig/m-file pattern of GUI coding in matlab, you can add something to your handles structure by: handles.big_matrix = big_matrix; guidata(hObject, handles); The call to guidata updates the handles struct so every callback in your m-file is on the same page. Only needs to be called once per function if you put it after all of your handles alterations. However, there is something to be said for coding a GUI using the fig/m-file pattern: you probably shouldn't. I've done my fair share of Matlab GUI's and coding the GUI functionally (using uicontrol calls) has a ton of advantages. GUIDE produces horrible looking code that is hard to understand, and fig files are binary so it's difficult to track the changes you make to your GUI. Of course, it is a huge pain to do everything by hand. The method that works best for me these days is to lay out the GUI I want in GUIDE and generate just the fig file, which I then convert into a series of uicontrol commands using [fig2cmd](http://www.mathworks.com/matlabcentral/fileexchange/11159-fig2cmd). What you can do after generating the gui programmatically is use matlab's [nested functions](http://www.mathworks.com/help/techdoc/matlab_prog/f4-39683.html) to write your callbacks. This way, your callbacks and your gui have shared scope so you dont have to worry about the handles structure, the code looks much cleaner, etc. If you are just starting to learn gui's and event driven programming in matlab I recommend you try the above approach. If you are already committed to your code structure, GUIDE works fine. Hope some of this helped. Your project sounds awesome.
Haha I figured as much. It doesn't help that I get like 600 Errors saying that I shouldn't be using aviread since it's like being phased out by mmreader or something.
doc guidata If you have the handle to the main window, you can save any arbitrary data there using the guidata command. Then, inside a callback, you can recover the handle to the main window using the "gcbf" function, and get the data back using another call to guidata. For example: function mainwindow hFig = figure('Name', 'MainApplication'); button = uicontrol('style','pushbutton','string','Push Me', 'parent', hFig, 'callback',@buttonCallback); FD.matrix = zeros(320,240,24); guidata(hFig, FD); end function buttonCallback(source, eventdata) FD = guidata(gcbf); disp(size(FD.matrix)); end Note that FD is called the same thing in both functions for convenience. They're actually two separate variables, local to each function. If you make any changes to the FD structure in your callback you'll have to make another call to guidata to save the changes, otherwise they disappear when the callback function ends and the callback's FD goes out of scope.
I'm glad to hear there's an better way to write these gui m-files, because trying to understand the one that it creates is almost impossible (especially for someone with no previous experience). Unfortunately the project is due on Tuesday, and we've already committed to using GUIDE. In the future though, I'm definitely going to give your method a try. I think I've managed to succesfully save the matrix to handles, I'm just having trouble loading it into a different callback/function. What might the code look like for that?
I'm sorry, this is a tiny bit over my head. Does it matter that the GUI was created with GUIDE? would this work? function calibrate_Callback(hObject, eventdata, handles) handles.matrix = zeroes(320,240,24); guidata(hObject, handles) %% function mask_Callback(hObject, eventdata, handles) handles = guidata(gcbf) disp(size(handles.matrix)); 
If you successfully updated the handles struct in one part of your code, you should be able to access the field(s) you added as usual: my_mat = handles.big_matrix; should work fine.
Almost. In the second function you shouldn't need to call guidata at all, the handles being passed to the callback should be the guidata handles from the main figure.
hey are you around now? I reccomend starting with guide (the matlab gui creator) This will allow you to create an hObject. You'll want to construct your handels for that object and update them in your functions : something like this at the end of your fns set(handles.answer_staticText,'String',c); guidata(hObject, handles); if you need help using guide. There is a basic tutorial [here](http://blinkdagger.com/matlab/matlab-gui-graphical-user-interface-tutorial-for-beginners/). If you are around I can also send you some of my own code. But its pretty long and complicated 
Ok thanks, I managed to get that whole aspect working. I have a slightly more involved question, would you mind if I PM'd you a small chunk of code?
gotta love Carney! I'm having a tough time with the project too.
Haha it was only a matter of time! I've got most things working...it's just kinda slow and occasionally malfunctions for reasons I don't understand. Gotta love it.
I liked the old version better. These autogenerated ones get boring pretty fast.
I didn't know there was an old one, how did it work? I think the algorithm that generates the automatic ones is fascinating.
There wasn't an algorithm. There was just a really long list of possible responses stored in array. Every time you called the function, it picked a random response and that was it. I liked it better because they were a lot funnier. They didn't have the word "excessive" show up so excessively.
http://www.mathworks.de/help/techdoc/ref/bar.html http://www.mathworks.de/help/techdoc/ref/plot.html Source: www.google.com
Is that your whole script? You've got an unbalanced number of ends and ifs, by the looks of things and it won't even run. Upload the whole thing and I'll have a look.
Do you have a log file when you start? It looks like you error is in the line &gt; loses = info(2) which implies you don't have any data in 'info'. Some other things: - upload to pastebin or something similar so formatting is retained - when you're requesting the user's choice, put it inside a while loop so they can consistently say something dumb like 'shotgun' without breaking your game - you might as well change 'myChoice' to 'myNumber' here and cut out the following few lines of code &gt;myChoice = randi(3); In general, if you're getting "Index exceeds matrix dimensions" errors, it helps to either print out the whole matrix or use 'size(matrix)' ('size(info)' in this case) to see how big the matrix actually is. The error also tells you what line the problem is on, 33 in this case, as well as a little context. 
When you import data this way it imported as a structure. For example if you look at myData you should get: data: [0 0 0 0] textdata: {'wins' 'loses' 'ties' 'numGames'} colheaders: {'wins' 'loses' 'ties' 'numGames'} if rpslog.tab was blank. To specify the data in the structure try: info = myData.data;
That's the whole script.. You could tell when I pasted it that it was tabbed over in each if statement/etc but I guess the tab spaces were removed.
I tried that, but it showed another error message. Attempt to reference field of non-structure array. Error in rockPaperScissors (line 30) info = myData.data;
You can get a list of all the properties related to that figure by typing: get(gcf) This will give you a list of properties related to the axes: get(gca) You can change the properties you want by using the set command. The parameter will be in quotes, and the argument will follow, you can do more than one property at a time. set(gcf, 'Location', [100 100 800 600]); You can get fancier, and assign the plot handles to variable, but if you aren't making tons of plots or making extremely custom plots, this can be overkill.
Thanks. This is very helpful!
I have no idea what you mean. Post a code example? Cumsum is an inherent vector operation, ... since it sums over a vector.
i need to write a code that sums the 1st number of a vector, then sums the first 2 numbers in a vector and then the first 3 and so on x = 2 3 2 3 2 cumulitivesum = 2 5 7 10 12 ans = 2 ans = 5 ans = 7 ans = 10 ans = 12 
but i have to do this so it applies to any vector, i did this using if statements but it's only for the specific vector
and the code for the previous example is function greater = x x = [2 3 2 3 2] cumulitivesum = cumsum(x) i = 1; if x(i) &lt; x(i+1) x(i) if x(1) &lt; x(i+1) sum(x(i)+x(i+1)) if x(i) &lt; x(i+1) sum(x(i)+x(i+1)+x(i+2)) if x(i) &lt; x(i+1) sum(x(i)+x(i+1)+x(i+2)+x(i+3)) if x(i)&lt;x(i+1) sum(x(i)+x(i+1)+x(i+2)+x(i+3)+x(i+4)) end end end end end
I think they're trying to rewrite the cumsum function only using for loops and addition? As an exercise I presume. On my phone so can't really give a good answer.
yep
 csum = zeros(size(vector)); csum(1) = vector(1); for ii=2:length(vector) csum(ii) = csum(ii-1) + vector(ii); end
Two quick &amp; dirty examples: (Note: I haven't tried these yet, just typed them here) ~~ a = [1 2 3 4 ...]~~ ~~%%%%%%~~ ~~b = zeros(1, length(a));~~ ~~for n = 1 : length(a)~~ ~~b(n) = cumsum(a(1:n));~~ ~~end~~ (Just saw that the exercise was to not use cumsum, so the bottom one works) That would work, but its not really making use of the previous cumsums, so use this one: a = [1 2 3 4 ...]; b = zeros(1, length(a)); %%%% b(1) = a(1); %Start 'b' vector's first position for n = 2 : length(a); b(n) = b(n-1) + a(n); %b(n-1) stores previous cumsum value, so just add the next value end But again, this is exactly what cumsum does. I still don't see the question. Is this just an assignment where you are not allowed to use cumsum?
i dont understand
basically yes, and thank you sooo much
Segmentation is hard in general. A few of my colleagues do segmentation, and it seems almost like an art to me. Most of their work seems to be about how to introduce a priori information in the algorithm - for example the shape of a typical liver, where it is located etc. That's the only tip I can give you.
The first line initializes the output vector, csum, by making a vector of zeros with the same size as the input. The second line sets the first value of the output equal to the first value of the input. The for loop starts working with the second term in the output. It sets that term equal to the first term of the output plus the second term of the input (the sum of the first 2 terms of the input). As ii increases with each iteration, it works on the ii-th term of the output vector, resulting with the sum of the first ii terms of the input vector.
Thanks for the tip. I've got my algorithm to work to a point where I'm happy with it :)
before plot(x, dataset) do: figure hold on then a loop for plotting: for ii = 1:T/dt dataset = dataray(ii, 1:length(initdata)); plot(x, dataset) pause(1) end that pause will hold for 1 second before going to the next iteration of the loop.
Yep, this is the best way to do it provided you don't want it to animate really quick (many frames a second), as matlab might run into trouble replotting every iteration depending on the size of the dataset. If you want to do it based on user input, waitforbuttonpress will wait for a mouseclick/keypress.
Thanks! I'll try this out when I get home :D
Can you plot a simple cylinder? You should answer that question first, the extension is easy
i figured it out but took a while :(
 %% cylinder constraints xCenter = 1.0; yCenter = 1.0; zCenter = 0.5; radius = 1.0; height = 1.0; % Generate circles to "build up" the cylinder. anglesDeg = (0:5:360)'; % Column vector nCirclePts = length(anglesDeg); xCircle = radius * cosd(anglesDeg) + xCenter; yCircle = radius * sind(anglesDeg) + yCenter; % Generate points "up the side" of the cylinder. nSidePts = 15; zSides = linspace(zCenter-height/2, zCenter+height/2, nSidePts); % Row vector % Duplicate the "rings" up the "sides" of the cylinder. xCylinder = repmat(xCircle, 1, nSidePts); yCylinder = repmat(yCircle, 1, nSidePts); zCylinder = repmat(zSides, nCirclePts, 1); % All three should be the same size now: nCirclePts by nSidePts % Each column will be one "ring" around the cylinder. % Plot it. figure(1) plot3(xCylinder, yCylinder, zCylinder, 'b.-'); xlabel('X-axis'); ylabel('Y-axis'); zlabel('Z-axis'); title('Cylinder'); 
Generalize for your ellipsoidal cylinder.
Your `fopen()` and `fclose()` calls are superfluous. `dlmread()` opens the file on its own. Note that `length()` isn't a safe function to use for multidimensional data because it always reports the size of the largest dimension. You want to use `size()` and check the specific dimension you're interested in. For example, if there are 6 columns but only 2 rows of data, `length()` will report 6 when you really want 2. I think the instructions mean that `sub_M` should be non-negative but also no greater than the length of the data, not specifically an exact match. I'm not sure since the instructions aren't clear. No need to specify the lack of return value with "`[] =`". That's implicit. Also, code is also a lot easier to read when there are spaces between operators and delimiters. You can skip changing directories and add `file_dir` to the filename when you build it. Use the `filesep` variable when concatenating paths. fn = sprintf('%s%sdata_%d.txt', file_dir, filesep, M); I'm also guessing that the instructions didn't mean to literally save to `ndata_#.mat` but to save `data_5.txt`'s sum to `ndata_5.mat`. 
Thanks! So for the length, would a file just filled with numerical data always be a row vector no matter how long it is or would it appear as a 2-d matrix? I think you're right about my if-end statement since it says within the range I guess it doesn't need to be equal to it. I tried doing it without the [] = but matlab gave me an error when I did that... Thanks for the help/advice
Don't think you should be using all combinations of X and Y... for each i [X(i) Y(i)] is the index of that found point. so I would remove the j loop and have s = M(X(i), Y(i)); Just had a quick look so not sure if there are other problems.
Oh also definitely dont want to plot whole X Y vectors inside the loop... should just be plot(X(i), Y(i)) 
You can do this with just scatter actually - thrope is right about not looping through them all though. [X, Y] = find(M&gt;0) scatter(X,Y,M(M&gt;0)) then all your axis fiddlings, and your done! 
I don't think that it's the spacing delimiter that is giving you a hard time. Are you aware that the PIV data is using a comma instead of a decimal? I've seen this problem recently after a software update from LaVision, where the default number format uses commas instead of decimals. Unfortunately, Matlab cannot convert a string into a number when then number uses commas instead of decimals. Your options are to re-export all the data in the correct format, or write a script to replace every instance of a comma with a decimal after the zone label. I hope this helps.
If the data file looks like this, 5 6 7 4 5 5 4 4 4 3 3 3 Then `dlmread()` will return a 2D 4x3 matrix (4 rows, 3 columns). Calling `length()` on this matrix will return 4, the size of the largest dimension. However, if one of your data files looks like this, 5 6 7 4 5 5 `dlmread()` will give you a 2D 2x3 matrix, and `length()` will return 3, a different dimension than last time. That's what you have to watch out for. &gt;I tried doing it without the [] = but matlab gave me an error when I did that... Hmm, either you're using some ancient version of Matlab or you're making some other mistake. At work here I've got `R2010a` and it works fine. It's not important anyway. 
Does "File- &gt; Generate Code" do what you want ?
So what you are saying is that when I export it again with "." instead of "," it will be ok?
Well, I'm not 100% sure that there are no other issues. But this is definitely a good starting point. I'm a little uncertain how matlab is going to parse your file. The file format you have posted is a tecplot ASCII format. You may need to write a custom script to read this file. I'm not near a computer with matlab right now but I will be in a few hours and I can write a script for you if it's still not working.
that worked, thanks alot!
http://www.mathworks.com/matlabcentral/fileexchange/11837
One question. What is 'figure'? Matlab throws an error when it reaches that part. Thanks! Edit: I removed the word figure and it seems to work; however, can I get it to clear the plot before doing the next plot? Thanks!
figure; creates a new figure. You can get it to clear by adding a hold off line after doing all your plotting. The hold on command tells matlab to hold all the current plots and begin overlaying new ones so if you write hold off after you are turning off the overlay and therefore a new plot command will cause the figure to be cleared. For clarity here's some pseudo code: % start for loop hold on; plot(x, y); plot(x2, y2, 'color', 'red'); %its up to you to differentiate plot colors when hold is on hold off end %end for loop
You can write a simple script to just batch load the selected files. Here's a very generic example: [filename, pathname] = uigetfile({'*.csv','INSTRON Data(*.csv)'},'Select data file(s)', 'MultiSelect', 'on'); for i = 1:numel(filename) tmpstring = ['Sample_' num2str(i)]; eval([tmpstring ' = importdata([pathname filename{i}]);']); end What this does is opens a window that asks you to choose the files you want (see the uigetfile() help page to understand how to format the command), and then loops through the list to load them in. This will load them in as Sample_1, Sample_2, etc., which is what the eval() command is doing. Since I don't know what type of data you're using, I used importdata(), as it should be generic enough to handle most things you throw at it. To access your data after this runs, use Sample_x.data, where x is whatever data set you want to look at.
OK, so the intern solved it after much time/effort. He's also a redditor and was going to reply to this, but then realized it was me, so didn't. Anyway, the way he solved it is a very brute force method. Basically clone the graph into a new figure and do the print command from there. figure; set(gcf,'Visible','off'); tempax = copyobj(handles.axes1,gcf); set(tempax, 'units', 'normalized', 'position', [0.13 0.11 0.775 0.815]); set(gcf,'InvertHardcopy','off'); print(gcf,[data.path filename '_plot.jpg'],'-djpeg','-r0'); close;
the figure command will open a new panel. i always put it in there as a matter of fact - so that you know where you're plotting something.
Out of my head something like: ind = find(f&gt;0.44); area = sum(f(ind) - 0.44); Anyways, the find function is what you are looking for.
It depends, what is f(x)? If it's a function use: Omega = quad(@(x) f(x) - 0.44, 15.3, 52); If it's a numerical vector: ind = find(f&gt;0,44); Omega = trapz( f(ind)-0.44 )*( f(2) - f(1) ); I recommend using trapz() over cum() for a little higher accuracy. 
one of my problems if finding f(x). Right now it's just a table of values. How would I get the function that best represents them?
trapz() defines this desired function by interpolating between the known points. If you have additional information about the underlying function, then you should share it. If you do not have any additional information, then it is difficult to decide what interpolation method "makes sense", as any one of them is essentially a complete guess. Linear interpolation is what many people would call the most obvious, natural solution for most cases based in physical measurement.
Check the statistics toolbox for getting the cumulative distribution function for a PDF. Integration of a gaussian is an oglive which is basically the CDF of the gaussian. 
Just input the table. That's what I mean by a numerical vector. The only issue is if the spacing is too course you won't get a good approximation of the area. If it makes sense maybe fit a high order polynomial or splines to the data and integrate.
You'll want to interpolate the data first before you search for f&gt;0.44, otherwise you'll miss a huge chunk between x = 15 and x = 20. interp1 will do this nicely for you fi = interp1(0:5:80,f,0:g:80) where g is the granularity/sampling whatever you want to call it - say, 0.5. Then you can filter for fi &gt; 0.44,and in fact just sum fi*g for the area (then subtract the rectangle at the bottom). This is effectively doing the trapezoid integration more manually than otherwise suggested, however it offers two key benefits: 1) you don't lose the data at either end from the filtering. 2) you can choose your own interpolation that isn't linear if you feel it is more appropriate - look at the help pages for more details on what's available: http://www.mathworks.in/help/techdoc/ref/interp1.html HTH 
thanks, I'll try that
You can use a method like what ginglymus posted to get the interpolated function and then use numerical integration (i.e. [trapz](http://www.mathworks.com/help/techdoc/ref/trapz.html)) to get the area.
So do you have any specific questions, or just general getting started? I've pasted the[ first couple parts of 1 for you here](http://pastebin.com/c2ut37CU). Hopefully this helps you get started in the right direction. 
I think [this](http://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process) might help you with 1G,H
It's hard to tell, can you paste your code? Also, did you put a breakpoint in your SelectionChangeFcn to see if it actually gets called when you click in a buttongroup? It could be that the function name doesn't match the Tag property of the uibuttongroup.
What kind of data? If text, use TEXTSCAN. It's the most powerful tool for reading in formatted text files. How are they named? Are the names sequential? If so, you can build filenames with SPRINTF and a for loop. Otherwise you can use the DIR command to return a directory listing (in a data structure) and go from there. These answers are data dependent. Can you give more information?
Well. The easy way would be (let us say your in put is in G) for i = 1:size(G,1) % size(G,1) is the 'height' of G x = G(i,1); y = G(i,2); z = G(i,3); % then calculate the mean, and do an if m &lt; 0, elseif m = 0, else etc etc. end Alternatively, the cheeky way which avoids loops but potentially doubles the calculations is to calculate both. M = mean(G,2); S = sum(G,2); O = prod(G,2); O(M~=0) = S(M~=0); O = O.*sign(M) tada! Unfortunately, while it uses fewer lines of code and doesn't have any loops which are generally regarded as evil, it actually takes ten times the time to run as the looped version, and even with 500 copies of the input, takes just under twice as long. So it will eventually be quicker, but only with a very large input set. 
This is possible with .mex files. I have had no success with this, personally. My advice is to just use the FORTRAN code. The work of figuring out how to compile/modify the given code is less than the work required to get the .mex connection working properly. You could still interface with MATLAB through text files, if you want to use the given code to produce a result and pick up from there with MATLAB. Again, this is just my advice, based on my bad luck with .mex files in the past-- if you can get that working properly it is probably the easiest route.
You can't just randomly make a MEX file out of an arbitrary FORTRAN program, by the way.
Exactly why I posted the question, haha. I have no idea what I'm doing
Java can be used directly in Matlab to interface with the desktop environment, but that will not be useful for basic programming in Matlab.
Then I run into the same problem. You need to know C++ or Java to get into C#.
So MATLAB is a compiler right? 
Matlab is a programming environment, which includes an interpreter. An interpreter is similar in function to a compiler, but technically different. The Matlab interpreter runs programs written in the Matlab programming language.
If you want my advice, you should either learn how to run it with the actual FORTRAN compiler (try GNU g77) or you should just translate the code to MATLAB. Both of those ways seem easier to me than having to deal with damn .mex files.
&gt; I am going to use MATLAB soon and I need to learn c++ or Java. Presumably you're not implying a connection between the two, as you don't need to learn c++ or java to learn matlab. &gt; I was wondering which one is more beneficial to learn when working with MATLAB? Matlab gurus will write C++ routines and link them into their matlab programs for performance. Unless you're a guru you won't need to do this. Neither C++ nor java are similar to matlab, though. Learning them won't help you much with learning matlab. 
**TL;DR: C++ is easier to use for scientific coding than Java.** If you know neither C++ nor Java, Java as a language is easier to learn since it has fewer and simpler features. However, when doing scientific coding, I find C++ to be *way* more convenient and powerful. I highly suggest using the C++ [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) package which gives you a lot of functionality in C++ that you get for free in MATLAB, such as matrix&amp;vector manipulations, transformations, matrix factorizations, etc. Using Eigen, you can write code in a MATLAB-like style. There's even a little [cheat sheet](http://eigen.tuxfamily.org/dox/AsciiQuickReference.txt) for mapping between Eigen C++ code and MATLAB code. It's a lot harder to write Java code in a MATLAB-like style. That being said, if you want to directly send objects between MATLAB and Java/C++ in runtime, you can use either language. For this particular problem, Java is easier to set up and get working than C++, but I think ultimately doing it in C++ is worth it. [Here](http://www.mathworks.com/support/compilers/interface.html) is some info on interfacing MATLAB with C++. I just wrote a 13000 line program in Java to do numerical computations... which was a mistake. I'm in the process of porting it to C++. I'm finding that my C++ version uses half of the lines of code, half the memory, and runs 2-10x faster than the Java version. That's mostly because I'm able to use explicitly SSE optimized code, and can directly optimize how memory is transferred.
I'd like to expand on what tabacaru noted, that there are all kinds of free versions of fortran out there. I personally use g95. Newer versions of fortran are less, um, primitive than older versions and you can still run codes developed in older versions. You can get it on whatever OS you're using, you just need to familiarize yourself with using the command line (if you're in Windows) or the terminal if you're in OS X or Linux. As far as fortran vs. Matlab, you will (quickly) see fortran is fairly primitive in comparison but fast in computation. For one, Fortran doesn't see a difference between capital and lowercase letters in code. It doesn't plot, but writing data out to a text file is simple... And you could probably use Matlab to plot that data. Oh, and you have to declare your variables and their types (integer, double, etc) before you use them in FORTRAN, similar to Java or C++. On a side note, I'm curious as to why your prof is making you use FORTRAN... I'm under the impression only nuclear engineering students learn it because so many industry codes were written in it, and the nuclear industry is stodgy towards changes like this because of the NRC. Seriously. The first digital control for a nuclear reactor in the US was implemented earlier this year or the last. Yes, you read that right. Most all nuclear reactors in the US are controlled by analogue because the NRC disallows most cases of retrofitting. Edit: I forgot to mention... You should also consider getting a text editor dedicated to code... They're nifty because they'll check your syntax as you write and the lines are numbered. On Windows I use notepad++ and OS X fraise (komodo is cool too).
&gt;FORTRAN... I'm under the impression only nuclear engineering students learn it It's still used in a lot of other areas, for similar reasons: the momentum of existing projects, and its speed.
There are alternatives to those lush - lisp universal shell, lisp like language for numerical computing stalin scheme and bigloo scheme - write code in scheme, have it compiled to fast numerical code lua - fast scripting language python weave
What's the problem? MATLAB can handle dynamically sized arrays. n = input('How big?'); array = zeros(n);
I'm having trouble with using Gauss-seidel to solve it. Do you know anyway to do that?
did you type restoredefaultpath;matlabrc?
Looks like it didn't get installed properly. Is there such a file?
i had similar problems (but not exactly the same) when I downloaded student matlab and installed on top of a full version of matlab. you may be having similar issues, even if you didn't have matlab previously installed. i don't think student matlab requires any environment variables, so having them set will screw student-matlab up. type 'set' at the command line and look for 'lm_license" or 'lm_license_file'. if they're there, you may want to rename it away by tacking a '1' after them. not sure if this is the problem, just throwing ideas out there. good luck. 
What platform are you using? From [this](http://www.mathworks.com/support/solutions/en/data/1-67JFK9/index.html?product=ML&amp;solution=1-67JFK9) page it could be an issue with a 3rd party codec that you're using, or it [could be](http://www.mathworks.com/support/solutions/en/data/1-62LFUH/index.html?product=ML&amp;solution=1-62LFUH) that you're using 64 bit Matlab with a 32 bit codec. You may have already found this, but you could try the solutions on [this page](http://www.mathworks.com/support/solutions/en/data/1-62LFUH/index.html?product=ML&amp;solution=1-62LFUH).
MATLAB 64 bit. Thank you very much for the links, but I did look at those pages. I don't understand exactly what needs to be done, but I will try again. Thanks a lt! 
Unfortunately your solution is going to be unique to your system based on what codecs you have installed, so I can't offer a lot of help.
Check out [persistent variables](http://www.mathworks.com/help/techdoc/matlab_prog/f0-38052.html#f0-38521).
No problem, thanks bdol! 
You can either look into persistent variables, as teamrobbo points out, or you can save your data to a data structure. For example, using your algorithm and the data structure built into your GUI by GUIDE: data.ClickInterval = 0; set(gcf,'UserData',data); %this line goes in OneGUI_OutputFcn The remainder goes in your button press function(s) data = get(gcf,'UserData'); %Other stuff you want goes here data.ClickInterval = data.ClickInterval + 6; set(gcf,'UserData',data); Another option could be to create your own handles structure during the initialization of the GUI, but I don't remember the exact initialization syntax off the top of my head. This option is advantageous if you're also using the GUI userdata handle for your data, as calling the entire data structure every time you push a button is generally horribly inefficient if you're storing large amounts of data.
It would be helpful if you walk yourself at least partially through the problem. If you know the general methodology for the Gauss-Seidell method, you should be able to convert that from your paper solution to a simple for loop in MATLAB. The [wikipedia page](http://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method) seems like a good place to start. You shouldn't need to do anything extra to account for different sized input matrices as long as the input coefficient and solution matrices are the same size. I'm guessing your equation is something like MT = b, where M is your coefficient matrix, T is the temperature node matrix (T1, T2, T3, etc.), and b is some constant? Yes, I'm being intentionally vague, because I don't want to do your homework for you. And because I haven't done any linalg in 6 years. Some helpful hints: L = tril(M); %lower diagonal of matrix M U = triu(M); %upper diagonal of matrix M Start there, and then come back with questions.
I don't have this toolbox, so I can't look for myself, but you can try open regstats and see if that opens up the matlab script used. Other than that, you could try asking over at [MATLAB Central](http://www.mathworks.com/matlabcentral/answers/), where people far better versed in MATLAB than I like to hang out.
Figured out the syntax for the second example: Put the following in the OneGUI_OpeningFcn (Note: place above guidata(hObject, handles); or it won't get saved): handles.ClickInterval = 0; set(handles.ClickInterval,'UserData',0); The remaining code goes in your button press function(s) &amp; will be pretty much the same as before: ClickInterval = get(handles.ClickInterval,'UserData'); %Other stuff you want goes here ClickInterval = ClickInterval + 6; set(handles.ClickInterval,'UserData',ClickInterval); As I said in my post above, this method is much more efficient if you are not calling other data when the button is pressed. I'll also offer my usual disclaimer when providing code: this may not be the most elegant solution, but I'm pretty sure it works. Hope this helps.
The code [here](http://www.mathworks.com/matlabcentral/fileexchange/21944-animated-gif) is a pretty nice example of how to create an animated gif of different plots automatically. It sounds like this may be enough to suit your needs. I recon Matlab could do an actual video file too if thats whats needed, but im sure its a little more involved :). Edit: looking further, you can do similar things with mpg's: http://www.math.canterbury.ac.nz/~c.scarrott/MATLAB_Movies/movies.html
So the thing with this is that it appears to need screenshots to make gifs of, and I wanted to avoid making a separate graph for each point because that is around 2,000 graphs. I was hoping there was something that would display each point one after the other, automatically.
... redditing while I'm waiting for my own matlab script to finish ... In order to animate, my understanding is that you will indeed have to make each plot individually. However, looping will make it much easier. In a loop make each plot and save it to file (1.png, 2.png, ...). Windows Movie Maker can encode these images to a movie. Let me know if that makes no sense, or if you need more details.
Regardless of what method you choose, you're going to have to render each frame (in this case, graphs) at some point in order to capture and store it. There's no way around it. At the core, all methodologies are just going to loop through your data set automatically. You don't have to do it manually, just push a button and wait for it to iterate through all the data.
no, that totally makes sense, it's just more than I have time to do in order to plot each point individually. Powerpoint actually does it where I can display each one by category, so it does what i need it to, essentially, but i need it to erase previous points as each new one appears. I feel like there must be a way to do this, but I just don't know what, and I'm pretty bad with code and scripts and such.
I have a feeling that to render any data as a frame in a video would have to be done in a similar way. 2000 plots shouldn't really take very long though, especially since your data set seems small.
You don't actually need to use an external program, MATLAB has the capability to encode video files without requiring a toolbox.
Well, let me ask this - is there a way to automate the process where it will take (x,y) coordinates and make a graph of each one automatically? It is a bit time consuming, although I'll do it if I must, it just seemed as though there might be a way to do this with less steps.
Yes. How is your data formatted?
a column for x and a column for y.
Do you mean like this: for i=1:300 plot(data(i,1),data(i,2)) *animation get frame stuff here* end 
If size(x) = [300,2000] and size(y) = [300,2000], assuming the object is defined by 300 points and you have 2000 frames of animation ....... This will make 2000 plots and save them to 0001.png, 0002.png, etc. for i = 1:2000 clf plot(x(:,i),y(:,i)) saveas(gcf,sprintf('./%04d',i)) end 
Agreed, though on Unix/Linux I've found mencoder to be more user-friendly. And that's saying something ...
ok, give me a few minutes
 x = [1 2 3 4 5 6 7 8 9 10]; y = [1 2 3 4 5 6 7 8 9 10]; xmin = 0; xmax = 15; ymin = 0; ymax = 15; Video = VideoWriter('notsocool_video'); Video.FrameRate = 10; open(Video);figure; for i = 1:numel(x) plot(x(i),y(i),'o'); axis([xmin xmax ymin ymax]); writeVideo(Video,getframe(gcf)); end close(Video); This should be basic enough to let you tweak for your needs. If you need help, ask. EDIT1: You can also add a few more lines of code to allow you to load in xy-data automatically. If you already have the data loaded in matlab, you can get rid of the first two lines and just substitute in your data array names in place of 'x' and 'y' in the rest of the code. EDIT2: Or you can use one data array, which I believe you said you had, and substitute in data(i,1) for x and data(i,2) for y. EDIT3: While you're letting that run, don't try and multitask and click on other windows on your computer. Since it's generating a new plot for each frame and MATLAB automatically steals window focus, you're not going to get anything accomplished. EDIT4: (yes, I'm a little bored) If you wanted to get fancy and have it display the path, you could swap out your for loop to something like this: for i = 1:numel(x) plot(x(1:i),y(1:i),'-'); hold on; plot(x(i),y(i),'o'); axis([xmin xmax ymin ymax]); hold off writeVideo(Video,getframe(gcf)); end This will plot the earlier points as a line, and only plot the dot at the most recent point. This is similar to how TI-83 calculators can do that UFO plot thing. EDIT5: If you want to get really fancy, you can have the UFO change colors with this for loop j = 1; for i = 1:numel(x) if j &gt; 21 j = 1; end colors = {'ro','ro','ro','go','go','go','bo','bo','bo','co','co','co','mo','mo','mo','yo','yo','yo','ko','ko','ko'}; plot(x(1:i),y(1:i),'-'); hold on; plot(x(i),y(i),colors{j}); j = j+1; axis([xmin xmax ymin ymax]); hold off writeVideo(Video,getframe(gcf)); end 
Simply pointing it out since not many people know it's there. I'd been using matlab for 5 years before I realized the video functions existed... Maybe I'm just slow :p
Thanks so much! I'm going to try this!
Thanks! I could probably do each one separately right? So one object at a time, of 300 points, so 300 frames for animation, could I write: for i = 1:300 clf plot(x(:,i),y(:,i)) saveas(gcf,sprintf('./%04d',i)) end also, what does "gcf,sprintf('./%04d',i" mean and what does clf mean?
gcf points to the currently active MATLAB figure. sprintf() writes a text string. './%04d' is the argument for sprintf() that tells MATLAB to write a screenshot of the current figure (gcf), to the current directory (./), saving it with the number 'i' out to 4 digits (%04d). So for the first graph it would be 0001, and so on. clf clears the current figure.
One question, when you say: &gt;x = [1 2 3 4 5 6 7 8 9 10]; &gt;y = [1 2 3 4 5 6 7 8 9 10]; Do my x's and y's have to be within those numbers? For example, in one of my datasets, my minimum x is 126 and my max is 158 and my min y is 141 and the max is 172. So am I supposed to make that reflect this?
also, the frame rate for me is 30fps, so should that be indicated somewhere?
Yes, change Video.framerate = 30 instead of 10
No, min and max is just for the axes, just set a range big enough to hold all your data.
What do you mean by that you can't loop it 5000 times? What error do you get?
It will loop, but instead of looping everything between the outer for and end it will only loop diff(f)=mean(slp(1:3))-mean(slp(4:8)); I know I need to include f somewhere in the equation, but can't figure out where. 
Maybe you've already gotten this solved, but for the sake of answering questions: Are you only plotting one "point" at a time?? If so, then it'd look like this: for i = 1:300 %This clears the plot window: clf %This plots the ith point with a filled-in black circle: plot(x(i),y(i),'ok','markerfacecolor','k') % This saves the current figure ("gcf" = Get Current Figure) in the current working directory ("./") as a .png with numerical filenames based upon the ith number and with a fixed 4-digit zero-padded integer format ("%04d.png"). Yeah I forgot the .png in the post above. saveas(gcf,sprintf('./%04d.png',i)) end Also, if you ever have questions about a command/function/etc., you can type "help" or "doc" before the command and for the most part Matlab has excellent documentation, e.g. doc sprintf
1) I suggest you only look at one outer loop iteration (for f = 1:1 ...) and see how the inner loop runs. If you're still stumped, help me with the size of "arr". 2) "diff" is a matlab command (discrete difference). I don't suggest writing over it. 3) I'm assuming slp = sea level pressure. That's awesome.
Just to clarify -- you're saying it skips the inner "for g=1:8" loop completely? As in the "slp" variable isn't getting filled at all?
Hey all, So I've changed/more info: * 'diff' to 'a', to eliminate the command issue * arr is 176x8 * the inner loop isn't being skipped, it is only being computed once instead of 5000 times * instead of everything within the outer loop being repeated the inner loop is repeated once, while the difference calculation is repeated 5000 times (I end up with 5000 of the same value) * I hate to burst a bubble, but slp is just a shortened version of slope. I am modelling freshwater zooplankton respiration though! 
Okay -- thanks for the update. Can you humor me here: add "clear g" after the "diff(f) = mean..." line. It shouldn't do anything, but let me know if it does. From what you're describing, it sounds like the inner loop is just doing the same calculation over and over. Is this right syntax? "h=glmfit(arr(e,1),arr(e,g+1),'normal');" Isn't it pulling the same value from arr all the time? Shouldn't you pull a random time immediately before this line? 
Also, like I said earlier, if you've got your own data sets, get rid of those first two lines I put in my code, I just threw those in so I had a data set to test with to make sure I was giving you something that worked.
First, thanks for all the help so far! What I'm trying to do is fit a linear model to the first column of data (time) to columns 2-8 (one at a time). Each of these columns are respiration measurements under different treatments. That's why in my h=glmfit equation x=arr(e,1) while y=arr(e,g+1). The data I am using in this part of the script are essentially a shuffled version of my original, experimental data. What I am trying to do is shuffle the data 5000 times, each time calculating and recording the slopes of the generated lines.
No problem -- happy to see if I can help. The thing I'm having trouble understanding with your code is the f = 1:4999 loop -- I mean, you aren't really looping through anything. I can understand what you're doing by looping through the other columns 2-8 to fit the first column of data, but I don't see how the outer loop varies anything. From your code and what you describe, you're basically doing the same calculation 5000 times, right? If you move this line: "e=fix(random('uniform',1,176,176,1));" to after the outer loop, wouldn't that actually vary the times that you look at? I think I understand what you're trying to do, but your code doesn't reflect it. The 'f' variable is basically just a counter that you want to go through this variation process 5000 times, correct? The 'g' variable is for iterating through an array column-by-column, so it seems you need to add a line that somehow varies things in the loop. From a first glance, it seems this line "e=fix(random('uniform',1,176,176,1));" is doing the shuffling. 
Your inner loop for g=1:8 computes the same data (h and slp) every time, regardless of what iteration your outer loop is on. 'e' is a constant in those loops.
Yep -- this has to be it. Iterating through 'f' does nothing. 
Somewhere after you first open the figure, you can do a set(gcf, 'Visible', 'false'); And then, the figure never appears, and you can happily multitask as it runs.
Thank you so much. This actually worked out perfectly!
I don't get what you're asking... We live in a 3-d world, how can you plot 9 or 10 dimensional data?
It's a multivariable problem
I understand that, but what do you want to plot?
The error comes with this line &gt;svmStruct = svmtrain(xdata,group,'showplot',true);
Can't do it! From the documentation: &gt; Boolean indicating whether to plot the grouped data and separating line. Creates a plot only when the data has two columns (features). You could project the data down to 2d and plot that, but that's about it.
Thanks, how do I go about project the data down?
Yes, moving the "e=fix(random('uniform',1,176,176,1));" line to outside my outer loop kinda worked. For some reason it works if I have the e equation on the outside and the inside, but not exclusively one or the other? 
This looks like like its a quasi-csv file, but uses a space instead of a comma as the seperator. Have you tried using File-&gt;Import on this file? Or simply double-clicking the file within matlab? Set number of headers to 12 lines, space as the seperator, then: x1 = data(:, 1); %X1 = the first column of data x2 = data(:, 2); ... x13 = data(:,13); 
One thing to note: for whatever reason this will not copy the legend, so you will have to redefine it before you save the image file.
Alright I got most of the problem solved now. I just have to plot Maximum error from each iteration (which I know how to do) versus number of iterations. How exactly do you count the number of iterations that goes through a while loop?
Yes, the 'e' equation is doing the shuffling. I would like to shuffle it 5000 times, calculating the columns and slopes each time. 
Just blow away the header (12 lines) and give the filename to `dlmread`, which will figure out how to parse it on its own. 
Okay, cool -- so what happens if you put the "e=fix(random..." line *inside* the outer loop (i.e. after the "f=1:4999..." line)?
The simplest way to do it is to just step a variable as part of the while loop: j = 1; while whatever %code j = j+1; end display([num2str(j) ' Iterations Run']) Depending on how your while loop is set up, make sure you don't accidentally add one more step to your iteration counter when your break criteria is met. You could also just put 'j' instead of the whole last line and it will accomplish the same purpose.
This should work. The %*s at the beginning of the format was necessary to skip the first white space. The loop at the end separates each column of data in vectors (c1, c2, ...) fid=fopen('MotionRAO Wavedir 1.OUT','r'); data=textscan(fid,'%*s%f%f%f%f%f%f%f%f%f%f%f%f%f','delimiter',' ','headerlines',12); data=cell2mat(data); fclose(fid); for ii=1:size(data,2) eval(['c' num2str(ii) '=data(:,' num2str(ii) ');']) end
I got it to work properly! Here's my code: %Read Original Data arr=csvread('testdata.csv',1,0); %Fit a linear model to each treatment, and put slopes in slpobs d=zeros(1,8); for b=1:8 c=glmfit(arr(:,1),arr(:,b+1),'normal'); d(b)=(c(2)); end slpobs=transpose(d); %Compute the observed differences between treatment means diffobs=mean(d(1:3))-mean(d(4:8)); %Create array for randomized slopes a=zeros(1,4999); slp=zeros(1,8); %Create outer loop for f=1:4999 %Create shuffled times e=fix(random('uniform',1,176,176,1)); %Create an inner loop for g=1:8 %Compute randomized slope h=glmfit(arr(e,1),arr(e,g+1),'normal'); %Put randomized slope in slp slp(g)=h(2); end %Computer differences in randomized treatment slopes a(f)=mean(slp(1:3))-mean(slp(4:8)); end %Sort randomized differences i=sortrows(transpose(a)); %Establish 95% confidence intervals LowerCon=i(125); UpperCon=i(4875); %True/False Statement, as to if 0 is within the confidence interval if (LowerCon&gt;=0)&amp;(UpperCon&gt;=0) disp('Reject Null Hypothesis'); end if (LowerCon&lt;=0)&amp;(UpperCon&lt;=0) disp('Accept Null Hypothesis'); end 
I can't get to mediafire from this machine so I'm unable to see how the file is formatted, but will importdata() work? It generally does a pretty good job sorting out text and numerical data. (Not that I can see any reason why your method won't work, I'm just curious)
 dlmread('MotionRAO Wavedir 1.OUT',' ',12,1) 12 is the row you want to start reading from 1 is to skip the first column (it's double spaced at start so matlab interprets that as null values normally)
Remove header. data = load('filename.ext');
It's probably just easier to modify your original data, set the numbers outside of your range to NaNs
Thank you, I hadn't even thought about that.
If you don't change the delimiter parameter, you don't need to have the first %*s. The default delimiters should work fine (and it includes space). Also, if you add "'CollectOutput', 1", it will group everything into a single cell, so you don't need cell2mat. You can just put data=data{1};
Given the assigned tasks, the logic statements look ok to me. I don't think your fopen() syntax is correct. Try using something like fn=fopen([specs.file_dir specs.file_name],'r'); instead.
You might want to not do your logic checks so sequentially - as the first set of errors you have aren't dependent on each other it would be nicer to dump all the errors at the same time rather than have to fix each problem sequentially.
Google: "bisection matlab" First Result: https://ece.uwaterloo.ca/~dwharder/NumericalAnalysis/10RootFinding/bisection/ Complete with code and everything. I mean come on, we are happy to help with code but this goes beyond laziness.
I would start by finding the quadratic equation by setting up the force balance of the situation. Do you have this much? The bisection method is a method for find roots of equations, which you can read about here: http://en.wikipedia.org/wiki/Bisection_method. At different points between the sun and earth, the force balance will tell you that the force will be positive (in the direction of the sun, for example) or negative (the other direction), and you are looking for the place where the force equals zero. (Earth) (somewhere between) (Sun) &lt;---Earths gravity pulls this way (-ive) Sun's gravity pulls this way (+ive)---&gt; Bisection means that you cut the distance in half (check the force halfway between the Earth and Sun) and see if the net force is positive or negative. Based on that answer, you can find out if you are too close too the sun or too close to the Earth. This will tell you where to check the next time for a better solution. Iterate a bunch of times in a loop, each time trying to move to the force equaling zero, and you should converge to the answer you get on your calculator. I can help more, but you'll need to show some work first!
I would think the first course of action when one doesn't know something is to look it up. Oh well.
&gt;Isn't THR a bunch of different vectors so then wouldn't some ranges overlap? Potentially, yes. That's the purpose of part d, to differentiate between overlaps. &gt;Would I make a for statement with an if statement inside and then create a new matrix that I plot? Yes. What have you tried? 
So I was thinking: C1=find(M(:,3)&gt;=THR (I'm not really sure on how to call the first index of the first cell of THR) then check if C1=find(M(C1,3)&lt;=THR (again, not sure how to how the second index) Then I would continue that for each range that THR gives me. Then I would for n=1:size(THR,1) plot(M(Cn,1),M(Cn,2),C{n}); hold on; end Does it make sense? 
You have the right idea, try something like this: [~, THR_index] = size(THR); [M_index,~] = size(M); k = 1; for i = 1:THR_index for j = 1:M_index if M(j,3) &gt; THR{i}(1) &amp;&amp; M(j,3) &lt; THR{i}(2) plotdata(k,1) = M(j,1); plotdata(k,2) = M(j,2); plotstr{k} = C{i}; k = k+1; end end end [numplots,~] = size(plotdata); hold on for i = 1:numplots plot(plotdata(i,1),plotdata(i,2),'LineSpec',plotstr{i}); end hold off Note: I am not sure if this works 100%, and it's probably not the most efficient way to do it, but it's where I would start. Let me know if you understand what that's doing (or at least the intent, since I don't know for certain if it works).
shit thats my bad my apologies. i googled bisection method but left out 'matlab', that would've helped a lot. but thank you for the link!
Oh thanks! That helps put it into more perspective. But would that if statement work? Isn't it a cell (THR{i}(1))and shouldn't it be a scalar or double or something? How do I convert it to the proper term for the if statement to work?
Would cell2mat be appropriate?
&gt;My current problem is that once I've done the first rotation, it's rotated about the origin rather than the first axis. Even if I were to complete this I would not know how to rotate the second part (red rectangle) by itself about the specified axis. I can't help with the second part, but I can definitely help with the first. How do you rotate an object about a random point (a,b)? Simple, shift the object [-a,-b] (i.e. back to the origin), rotate the desired amount (about the origin), and then shift the object [a,b] (i.e. back to its original position). Believe it or not this is a consequence of a somewhat important result in analytic geometry. I'm trying to think of a geometrical solution to the first, but coming up with blanks right now. If there's still a way to "separate" the pieces, you could separate them, rotate the one separately and then recombine them? Good luck.
MATLAB will let you directly access the contents of a cell array if your syntax is correct, so it depends on how THR is defined. Based on the problem statement, I'm assuming that each cell of THR is a 1x2 double, so you can get the tail of the vector as a double directly using THR{1}(1,1), for example. If you were to use a 1x2 cell for the vector instead, you would have to use THR{1}{1,1} to get the tail of the vector. If you need help visualizing this, plug in the following: vector_double = [1,3]; vector_cell = {1,3}; THR{1} = vector_double; THR{2} = vector_cell; Now try various different ways of accessing the data in each cell. Using the above, if you were to use THR{2}(1), you will get a 1x1 cell, but if you use THR{2}{1}, you will get a 1x1 double. Along those same lines, if you tried THR{1}(1), you will get a 1x1 double, but if you try THR{1}{1}, you will get an error, because THR{1} is not a cell array like THR{2} is. How you use {} and () is very important when dealing with cell arrays, but it's very powerful in allowing you to access and manipulate the arrays directly without using other commands. Hope this helps.
It should work fine, but it's an unnecessary step since you can access the data directly without conversion. See my response above.
I don't see any reason to over complicate the problem with rectangle objects right away. You can demonstrate the process with two lines representing each arm. Let's consider the sequence of steps that the arms must follow to move: [1] Rotate arm 1 about the origin. [2] Calculate the x and y distance the tip of arm 1 has moved in space. [3] Translate arm 2 by this distance. (This keeps it attached to arm 1.) [3] Rotate arm 2 about it's new position. In the following code, I wrote a function ROTATEARMS() that implements this sequence. The function takes four arguments: (i) the coordinates of arm 1, (ii) the angle (in degrees) to rotate arm 1, (iii) the coordinates of arm 2, (iv) the angle (in degrees) to rotate arm 2. The function returns the new coordinates for arm 1 and arm2. We can, for instance, rotate the entire object around the first axis by 20 degrees [arm1,arm2] = rotateArms(arm1,20,arm2,20); or rotate just the second arm around it's axis by -30 degrees [arm1,arm2] = rotateArms(arm1,0,arm2,-30); Complete code: function main %arm lengths L1 = 5; L2 = 3; %create robot arm arm1 = [0,L1;0,0]; arm2 = [L1,L1+L2;0,0]; %plot starting location subplot(3,2,1);myplot(arm1,arm2); %rotate both arms by 20 degrees [arm1,arm2] = rotateArms(arm1,20,arm2,20); subplot(3,2,3);myplot(arm1,arm2); %rotate second arm by -30 degrees [arm1,arm2] = rotateArms(arm1,0,arm2,-30); subplot(3,2,4);myplot(arm1,arm2); %rotate both arms by -10 degrees [arm1,arm2] = rotateArms(arm1,-10,arm2,-10); subplot(3,2,5);myplot(arm1,arm2); %rotate second arm by 40 degrees [arm1,arm2] = rotateArms(arm1,0,arm2,40); subplot(3,2,6);myplot(arm1,arm2); function [arm1r,arm2] = rotateArms(arm1,theta1,arm2,theta2) %rotate arm 1 about (0,0) arm1r = [cosd(theta1) -sind(theta1); sind(theta1) cosd(theta1)]*arm1; %calculate distance traveled delta = arm1r-arm1; %translate arm 2 arm2 = arm2 + [delta(:,2) delta(:,2)]; %rotate arm 2 about (arm1(1,2),arm1(2,2)) arm2 = arm2 - [arm1r(:,2) arm1r(:,2)]; arm2 = [cosd(theta2) -sind(theta2); sind(theta2) cosd(theta2)]*arm2; arm2 = arm2 + [arm1r(:,2) arm1r(:,2)]; function myplot(x1,x2) plot(x1(1,:),x1(2,:),'k','linewidth',4,'linesmoothing','on'); hold on; plot(x2(1,:),x2(2,:),'b','linewidth',4,'linesmoothing','on'); grid on;box on;hold off; xlim([-2 10]);ylim([-3 3]); drawnow; 
ezplot does nothing more than defining some vector x=linspace(a,b,1e4); %for example not exact value and then calling a plot(x,f(x)); You can do the same then just check for zero-crossings and approximate the solution. (e.g. Newtons method with a starting point close to the actual root)
Not to sound like a dick here, but you'll never learn if people do this for you. Its hard, I understand, but you will be better for it if you did this on your own. It shouldn't take you long, if you need help consult the MATLAB website or even some other MATLAB tutorials. There are plenty out there. This shouldn't be too hard to do :). Good luck. Also, look at the crash course on the side, it'll help you get started.
You're looking for an implementation of a non-uniform FFT. There doesn't seem to be a built-in implementation in Matlab, but there is an implementation posted [here](http://www.eecs.umich.edu/~fessler/irt/irt/nufft/), which is discussed a bit [here](http://www.eecs.umich.edu/~fessler/code/index.html). Disclaimer: I know very little about signal processing, and haven't used the posted code (YMMV, etc). This could, however, be useful to me in the future, so let me know if it helps!
A cheap and arguably wrong method to go about this is to use "interp1" to simulate some uniform sampling frequency, then use fft. The results of this can vary greatly, zerooooo[...]'s suggestion is obviously far more scientific.
another option that is perhaps easier to implement would be to cycle through a range of frequencies that you think the system is oscillating at and then do a least squares minimization to pick the one that best matches the data... though whether this works depends on SNR
I'll try this out if interpolating doesn't work. Hopefully it doesn't come to this!
By arguably wrong do you mean that the results are approximate rather than exact, or is there more to it?
Google the individual components to learn how to write them. I've done that with every matlab program I write when I need to learn something. The help file is also insanely helpful.
I just found out about and tried out parfor, and if the loop statements are complicated enough it seems to be faster. It's an easy way to implement multi-threaded loops. Interesting deal though, I had a tic/toc thing going on looping large matrix inversions to see how much faster it was. I tried doing a huge number of iterations and my computer crashed (sudden force restart, no bluescreen). I did a few memchecks and checked my processor temps. Everything seems to be in order. I wonder if Matlab does some funky memory allocating with parfor? Possible bug? 
Can you use [CLEAN](http://adsabs.harvard.edu/full/1987AJ.....93..968R) to get a nicer spectrum?
perhaps looking at doc trapz will help you, or looking at the corresponding m-file.
If you're using Matlab, why use the trapezoidal rule? Do you have to? Otherwise, try quadl or something similar.
What have you tried so far, and what is not working?
It should be mandated that people put some code together, even if it's horrendously wrong, before asking for help with homework/projects. I feel much more inclined to help someone if I can see that they understand the process of the solution. MATLAB syntax is the easy part.
Yes, Its an exercice about aproximating the area, we're just learning Matlab, the objective isnt the result itself, but the implementation of the algorythm in Matlab
I have imported my text file and when I tried to randomize the word list and chose a word it only gives me a number. I have tried everything I have been taught and can't get anywhere 
The code?
It's even easier than I thought...repmat isn't needed, and it can be done without a for loop too! Just this: a=1:20; x=0:0.1:1; y=a'*x.^2; plot(x,y) 
See [array operations](http://www.mathworks.com/help/techdoc/ref/arithmeticoperators.html) for matrices. The .*, ./, and .^ operators all act on each element of a matrix individually. For example: function c = hypotenuse(x,y) c = sqrt(x.^2 + y.^2); 
This question is exactly why Matlab is so useful! See horseproofbacon's answer.
Even faster (depending on the size of x and y): c = bsxfun(@hypot,x,y);
If you want to "go through element by element" then you have to use a for loop. Using matrix operations, you can perform the same operation in parallel as has been shown in this thread. To do what you are asking requires a for loop since the matrix parallel operation is a single operation, as opposed to N operations, like you are asking. Maybe, we're not fully understanding what you're trying to do. 
One option, using num2cell to convert your matrix into a cell array and then using cellfun: cellfun( @(x) fprintf('Hello World\n') , num2cell(rand(5,1)) ) The elements of the cell array are passed one at a time into the function called in the first argument of cellfun. Edit: It's worth noting that this kind of code does end up using for loops anyway, it's just hidden behind a layer of abstraction. Num2cell, for example, uses a for loop in its .m file to build the cell array. Further edit: I'm silly. arrayfun( @(x) fprintf('Hello World\n') , rand(5,1) ) 
Without actually doing your homework for you, maybe this will get you started ... function objects = add_random( pos_limits, size_limits, vel_limits) pos_min = pos_limits(1); pos_max = pos_limits(2); size_min = size_limits(1); size_max = size_limits(2); vel_min = vel_limits(1); vel_max = vel_limits(2); % Presume that N is known apriori. If not, just make it an % input. N = 5; .... 
Oh, should suggest using the *random* function. x = random(1) * (pos_max-pos_min) + pos_min; *random* will return a number between 0 and 1. Scale that number up, then shift it to fit your desired range. Good luck!
If I understand correctly, you're trying to accomplish three tasks: [1] Log all zero locations in format: [target_id, frame_number] [2] Determine if there is a contiguous length of dropped frames in the temporal dimension. [3] If true, then temporally interpolate with contiguous frames. If not, then interpolate spatially. I wrote a sample code below that accomplishes these tasks. . I generated a random set of sample data in the variable x with 40% of the values being zeros. The data is size 5x5x5 and in the format [target x, target y, time]. . The program traverses through the temporal data of each target and finds any zeros, which are stored into the variable drops. I assumed the target id number is the index of the spatial field. . The presence of contiguous sets of zeros is checked for. If there is at least two contiguous zeros, it will perform a temporal interpolation. Otherwise, it will perform a spatial interpolation. (I've left it up to you to insert these codes). . Note: I don't know how to put greater than and less than signs in the code format on reddit, so you'll need to ctrl-f and replace any &amp;gt; and &amp;lt; with &gt; and &lt; respectively. ----------- Full code: %assumed data format % dim 1: target's x location % dim 2: target's y location % dim 3: time (frames) clear; %make some random target data with 40% zeros --------------------------- N = 5; x = round(rand(N,N,N)*10); ii = floor(rand(1,floor(0.4*numel(x)))*numel(x)+1); x(ii) = 0; %check each target and detect locations of zeros in time---------------- drops = []; for ci = 1:size(x,2) for ri = 1:size(x,1) %locate all zeros in temporal direction ii = find(~x(ri,ci,:)); %log the zeros into array for data file, format: [framenum, id] %assuming that the target id is index location drops(end+1:end+length(ii),:) = [ii repmat(sub2ind(size(x),ri,ci),length(ii),1)]; %check each zero for a contiguous length------------------------ ai = 1; while ai&lt;=length(ii) %start at each zero and iterate until a non-zero number istart = ii(ai); iend = istart; while iend+1&lt;=size(x,3) &amp;&amp; ~x(ri,ci,iend+1) iend = iend+1; end %calculate contiguous length clength = iend-istart+1; %if there is at least two contiguous frames in time %then perform a temporal interpolation, otherwise %interpolate the points spatially if clength&gt;1 %insert temporal interpolation across x(ri,ci,istart:iend) else %insert spatial interpolation for x(ri,ci,istart) end %increment counter to avoid duplicate detection ai = ai+iend-istart+1; end end end ------- tldr; Sample code above. Your output is the variable drops. You can also add in code to perform your temporal or spatial interpolations. 
The '.' and '..' items in the structure traditionally represent your working directory ('.') and your parent directory ('..'). In linux or dos if you'd like to move up a directory you'd use cd .. In MATLAB, you must either always use 3:end or search for your files with a more specific identifier, such as files = dir([directory filesep '*.tif']); to search for all .tif files, or files = dir([directory filesep 'data_*']); to search for all files that begin with the prefix 'data_'. 
The random() function is used if you require a specific distribution of random numbers (Poisson, log-normal, etc.). Unless required, I'd just use the rand() function for a uniform distribution.
When I want to get random MATLAB/maths practise, I just get on projecteuler.net Heavy on math obviously, but trying to optimise my code for some of the harder problems taught me a lot.
Aww I see you are not old enough to ever own a DOS based PC. (but yes what horseproofbacon said)
A few ideas: * Contaminate an audio signal with noise. Design a digital filter to remove the noise and restore the original signal. Demonstrate the before and after signals. * Program a classic game like checkers or pong. This demonstrates good understanding of programming structure and logic as well as GUI skills. * Buy an arduino (under $30 bucks) and a cheap sensor (thermistor, led, pir, or even just a potentiometer). Write a data acquisition program that acquires a signal from the arduino and displays it in real-time on the screen (you can find the code for this online). You can add in bells and whistles like digital filtering or use it for real-time monitoring for some action (ie. light goes on, motion detection, or temperature gets too hot). * Choose a simple image processing problem that you can easily imitate. For example, one very important problem is the analysis of an interferogram. A sample interferogram can be easily generated with a sinusoid and contaminated with some noise. Develop a processing algorithm (typically either a peak-valley detection or a spectral approach) that can detect the dark and light parts of the image. Increase the amount of noise and demonstrate how well your algorithm works and eventually when it fails. * Pick a classic differential equation (Laplace, wave, heat, etc). Explain a physical phenomenon it relates to and explain your assumptions. Write a program that solves the equation over a specified domain using a differencing scheme. Show results and explain why it makes sense.
Whoa I had no idea you can do all these things with Matlab! Its a really really introductory course (only 6 lectures total) but I think we covered some good ground. I actually have a arduino board lying around from another class I took. How do you use it on matlab?
There is a package available for it that takes care of most of the gritty communications programing, see [here](http://www.mathworks.com/matlabcentral/fileexchange/32374). Check the example_io.m file. What the program reads from the arduino will be an 10-bit signal (valued 0-1023). As an example, if you hook one end of a LED up to an analog-in port and the other end with a small resistor connected to ground, you can use it as a light detection unit. Depending on how much light is hitting the LED will change the value MATLAB reads. Shine a laser pointer on the LED, and you've got a laser beam security system.
Good point. Wrote a code snippet without actually checking it in Matlab. Yep, use *rand* for a uniform distribution.
What is the value of variable all at the start of your internal for loop? What happens in your assignment of all? Also, you should think about how you're going to record which numbers work and which don't.
Here's a hint. Why are you adding to your previous numbers?
Put this as the last thing in your for loop and you'll see your mistake: disp 'DATA',x,y,s By assigning s=x*s, you initially set s equal to zero. Not only that, but this value of s is preserved for each iteration of the loop. It never gets reset to the 1000 that you put at the top of the script. This makes the line `all=all+s+s2+s3+s4` reduce to `all=all+0+500+0+0`. And by the way, you're actually doing a little more work than you need to do. Any number with a [digital root](http://en.wikipedia.org/wiki/Digital_root) of 3, 6, or 9 is divisible by 3. See if you can create a simple algorithm with this fact.
Thanks to everyone! I did it! for x=0:9 for y=0:9 s=x*1000; s2=500; s3=x*10; s4=y; all=s+s2+s3+s4; if rem(all,3)==0 disp(sprintf('The number %g can be divided by 3',all)); end end end 
Thank you very much! That explained everything.
Just a little comment. It's a good idea to use the command "fullfile" instead of manually concatenating with the [,] brackets. fullfile will put the slashes in the right direction and will fix duplicate slashes.
Just so you know, I took out all functions asking to plot, and changed my crossvalind method. Now it works, thanks!
Glad you figured it out. For future reference, you can project an N x d matrix of d dimensions to d' random dimensions by multiplying it by a d x d' random matrix. X = (data, Nxd matrix) X' = X * randn(d, d');
Hmm, don't know anything about sage, but in matlab it sounds like you want a scatter plot. [Maybe this will help](http://www.sagemath.org/doc/reference/sage/plot/scatter_plot.html)?
scatter(x,y) where x is the vector of x-coords, and y the vector of y-coords.
Do you know about the help function in MATLAB? In the Command Window, type 'help inline' or 'help ' and any function you want more info on. I did that for inline and saw that you need to put the arguments in single quotations. Syntax errors like this are best discovered using 'help'. Good luck with your homework :)
I'm very green at using Matlab, so I didn't even know you could type this in the command window. I had been using mathworks.com as my reference material, which is where I learned of this function. Unfortunately, they use very basic examples where they do not use the arguments.
No problem. I have been using MATLAB for years and still need to use the help function as my memory of syntax is horrible. For your third question, it looks like you have forgotten an 'end' at the end of the function to pair with the function call.
So some quick pointers on the first part: h=input('blah','s'); will return the input as a string, hence the 's'. This can be converted to a double using h=str2double(h);. This is the reason you are getting 49 as your output, this is the ascii code for '1'. I'm suprised you get anything in the file at all given that fprintf expects the first argument to be a file should you want to output to a file. With no file argument fprintf works like printf in C. You should have fprintf(fid,'text', [optional text vars]); Again as said above though, help and for more detail doc [function] are your friends. I've used MATLAB for a long time but still tend to have a documentation window open at all times. Whilst I am here question 3 you don't really give enough detail. "It is not coming up". Did you try checking the value of y? y=test(x); will not show anything as you have a semicolon at the end. Just typing 'y [enter]' will show the value of y, or remove the semicolon. The code itself looks fine. 
You can use IMWRITE or PRINT to export to an image from MATLAB, depeding on what form your data is in.
For question 3 it was morre of a question whether the code looks right. The reason I can't get anything to come up is because errors in my code in other parts. I had great trouble trying to understand how functions work.
Was looking at this literally 10min ago. I think it contains a solution to your problem but I have not used it: http://bigwww.epfl.ch/sage/soft/mij/
I am fairly certain that function is part of the signal processing toolbox, you will need to install that in order to use the function.
yeah.. ive already read through this.. unfortunately it says nothing about systems of ODE's thanks though i appreciate it
For some information on implementing a linear system of ODE's into matrix form, see Section 9.5.1 on page 406 of [these notes](http://www.nd.edu/~powers/ame.60611/notes.pdf). The example 9.5 on page 407 might be helpful.
So you basically want to show the Bible Code is bullshit-- OR you are looking for instructions from the Ascended Masters... Either way, a commendable project for Matlab!
I really want to understand the reference/comedy, lol. Can you inform me?
The [Bible Code] (http://en.wikipedia.org/wiki/Bible_code) was the subject of a popular book from about 10-15 years ago. It purported that there were secret messages embedded in the bible if you strung together equidistant letters (easily seen if you lay out the letters in matrix form). This is pretty much what you stated that you'd like to do with arbitrary website text and what several skeptics did to show that 'secret messages' could be found in anything. Anyhow, I assumed that you were basing your project off of this because it was fairly well-known at the time.
ahhh gotcha. No had never heard. Thanks for the link, though. Makes for an interesting read, for sure. I mainly want to asses what I would consider "overall sentiments" of a PR from a publicly traded company. To see if the summation of positive words matches, exceed, or falls short of the number of negative words. If you're interested in more details regarding the use, you can PM me. With this new info, is there anything on the code side of things that you could help with?
What exactly is the desired goal here? Do you just want to plot the solutions of the equations? It's not necessary to transform what you were given into a matrix equation just to simply solve the equations. Have you looked at using ode45? 
I haven't done anything similar to this, but if I have some time today I'll poke around and see what I can find. [This](http://www.mathworks.com/help/techdoc/import_export/f5-136158.html) function I imagine would be a decent place to start off.
For backwards Euler, you generally need to implement a root-finding algorithm, such as Newton's method. On the other hand, the ODE system you are working with is simple enough that you can express it in closed form. Try writing out the recursive equations for solving that system, and rearrange it to obtain the closed form solution. Then it should be straightforward to implement in MATLAB.
well I was supposed to use forward/backward euler, trapazoid method and ode45,ode23, and ode 15s and compare but the whole matrix thing was tripping me up.
It all sounds simple enough.. I guess I was just confusing my self over the matrix since that wasn't anything we've covered in class before. thanks for the help though.
this is a great way for me to get started, I believe! I will just now need to find a way to take this newly created string and establish known, repeatable start and finish markers as per the formatting of the particular website. Remember when you could click a printer-friendly link when looking at an article/recipe and such. Is there any type of url modification that shows just the text, like a printer friendly version? That way I don't have to manage the extraction alongside advertisements. 
Using cells doesn't prevent data0 from being rewritten in its entirety, in fact, all it really does is preallocate memory for storage which will slightly increase the efficiency of your code. However, indexing data0 in your for loop DOES prevent data0 from being rewritten. When you index data0 on the line that says "data0(i) = newdata;", MATLAB stores information in the array "data0" for each separate iteration and doesn't rewrite any values. I'm also assuming x is the length of your newdata array, otherwise I don't think any of this would work.
Yes, data0 is not rewritten in each loop. Cell arrays don't need contiguous blocks of memory so the whole array isn't copied.
Does this jog your memory? http://imgur.com/4L6yF 
Heh. Welcome to the travelling salesman problem. You'll probably find some tips if you search for it under that name...along with the information that it's an NP-hard problem. Good luck: http://en.wikipedia.org/wiki/Travelling_salesman_problem
Matlab allocates the cell array assuming double precision elements. For example, one double variable takes up 8 bytes in memory. Initializing a cell as cell(1,1000) will allocate 8000 (8 * 1000=8000) bytes of memory for the cell. **Your preallocation method is valid as long as you only use one double element in each index of the cell.** If you include arrays or strings as elements within the cell, your preallocation is useless. You might want to consider building a structure containing fields for all possible features from your image processing. For example; data(1:1000) = struct('feature1',uint8(nan(3,1)),'feature2',nan(5,2),'feature3',double(nan)); That way you can predefine a data size and type for each feature to use and fully preallocate memory for as many images as you have. Check the variable's memory usage memused = extractfield(whos('data'),'bytes'); at the beginning and end of your program, if it doesn't change than your allocation is effective.
It is similar to the traveling salesman problem in some superficial ways, but that doesn't mean that this problem is NP hard. In particular this looks like it is possible (depending on the way the itineraries are laid out) that it could be a simple minimum spanning tree or (as was suggested) a linear program, because the problem might not be which cities to connect to as much as it is 'when' to take the trips that are already planned (EDIT: that might be a TSP also, now that I think about it). However, for the general case that the OP strongly implied, it does look like a TSP. However, it is certainly the special case of a Metric TSP, which helps out the possibilities for solution a little bit. Finally, with 15 destinations thats only 15! possible paths, which could be completely reasonable honestly depending on how long you were willing to wait to just do brute force permutation search. However, there are fast algorithms based on linear programming or dynamic programming that could probably eat through 15 destinations relatively quickly. To the OP: The way I see it, you really have 3 options: 1) If it were me, I would strongly recommend picking another problem. You accidently picked a problem that requires quite a bit of advanced computer science to solve. Your problem involves LOTS of math, and advanced graph theory, and is known to be incredibly hard to solve. If you still want to work on linear programming and graphs, may I recommend solving the max-flow/min-cut problem? That problem is similar, but SIGNIFICANTLY easier, and can be done in one call to the linearprog function if you do it right. 2) I might consider trying to figure out about some approximation algorithms. Would you be OK with solving it approximately? These solutions still require lots of graph theory and math, but might be easier to implement. You might be able to read some heuristics and come up with your own. 3) If you aren't allowed to solve it approximately and you aren't allowed to change topics, then I would strongly recommend trying to solve it using a dynamic programming algorithm of some kind or a LP. There are a number of references to the algorithms on wikipedia, as well as a good example here. http://kintali.wordpress.com/2009/07/03/held-karp-relaxation/ Your problem is probably asymmetric tsp, because going one way may not be as good as taking the same path backwards. Of those three options, may I STRONGLY suggest that you explain to your professor that you spoke to some computer scientists and you have reason to believe that this problem is WAY beyond the scope of an introductory course on matlab and change your topic.
Ah, x is the number of images I'm looking at - the number of features returned in newdata is completely unknown...cheers!
Each feature is returned as a single double, and I have absolutely no way of knowing (though I perhaps do have a way of estimating) an upper bound on the number of features in a set of images. Basically what I'm after is a structure that contains pointers, so I don't have to re-write the lot - do structures do this? i.e. a structure with each image listed: data0 = struct('image1', [], 'image2', [], ..., 'imagen', []) would that do any better? That makes it a bit of a nightmare addressing everything... In the context of how long the rest of the program I'm running takes to run, it's an utterly insignificant improvement, I just wanted to optimise it for future reference.
Project Euler is designed such that brute force questions will almost certainly not be able to complete within a reasonable time. A rough guestimate says it'll take you 9 hours *just for the number with 500 factors*. So, three tricks. First off, you should read up on your prime factor wotsits, as this has some nifty tricks to allow you to count divisors without checking every number below n. Secondly - you can reduce the problem from searching one big number to...well, check the basics on triangle numbers again. Thirdly, once you've implemented the first two tricks you'll find yourself repeating yourself a lot, so there's a way to fix that too. Vague answers I know, but I don't want to give the game away, that's no fun. p.s., my python solution runs in ~1 second. And it's not even very well optimised.
At a glance, it should be simple enough to grab the headline, as it sits between &lt;title&gt;&lt;/title&gt; tags. I'm assuming this is similar for most of the internet. As the title is near the beginning of the string, this is a nice thing as far as optimized code goes since you don't have to parse the entire string. I'm not sure how much easier it would be to get the body of the article, I don't know enough about web site design to make an accurate comment. As far as easily getting a text-only version of the articles, I don't imagine there's a simple way to do this since the sites want you to see the ads. I would think an RSS feed could work decently well, depending on how the site sets theirs up (some sites just have headlines, while others have the full article in the feed). I'm also not sure how well that would work with MATLAB. Out of curiosity, how are you creating your list of URLs?
Because you don't know beforehand how big the feature vector for each image will be, there is absolutely no way to full preallocate the memory required to store your output. If your loop is pretty small and your feature vectors are pretty small (by pretty small, I mean not like thousands or millions of image/features), your first method is probably fine. You can tell MATLAB's code analyzer to shut up like this: data0 = []; for i=1:x data0 = [data0 newdata]; %#OK end If you'd like to use cell arrays, you can preallocate the cell array with the number of images, but you still don't know how big the contents of each will be. Once the data is in the cell array, it's easy to extract it out and do things with it. You can even extract and concatenate into one big vector if you like (as it looks like you're doing in your example). N = 17; % number of images % preallocate a cell array to collect all the features AllFeatures = cell(1,N); for n = 1:N % your feature extraction here % I make a fake feature vector for demonstration purposes CurrentFeatures = randn(1, randi(30)); % this is some random length row vector % put the data into one of the cell array elements AllFeatures{n} = CurrentFeatures; end % extract them all and put in a big row vector AllInOneRowVector = [AllFeatures{:}]; 
That's a really great way to go about doing that. HTML would be a lot easier to "searchlight" through. I can't believe I didn't think of that. As for accessing the HTML, I know how to do it with clicks of the mouse, but this would need to be looped over. Are there any modifications to the URL that would allow me to access the HTML page automatically? That way, I can find the &lt;title&gt; tags and then begin the extraction from there. I'm using an RSS feed for the URLS. rss_news_feed=(['http://feeds.finance.yahoo.com/rss/2.0/headline?s=' ticker '&amp;region=US&amp;lang=en-US']) The ticker, would be a user input, stored as a variable/modified into the correct format.
Are the tif names consistent? Like, fig01.tif, fig02.tif? If so, a nested for loop would probably work for you. Also use functions uigetdir to select the files location, and strcat to pull the correct file. I can email you an m-file of mine that does something similar, if you think it will help.
If each feature is a single double variable and you can estimate an upper bound for the number of features then using a 2d matrix (sparse or full) seems like the most straightforward route Nimages = 1000; %max number of images to process Nfeatures = 100; %max number of features per image data0 = nan(Nfeatures,Nimages); %allocate memory %assign a feature value to image 11's data data0(11,1) = 6; %extract image 11's features imdat = data0(find(~isnan(data0(:,1)))); The only tricky part would be indexing for non-nan elements. For a more adaptable implementation, you could still use structures (also you can carry along an index for each image): Nimages = 1000; %max number of images to process Nfeatures = 100; %max number of features per image data0(1:Nimages) = struct('feature1',nan(Nfeatures,1),'index',0); %allocate memory %assign a feature value to image 11's data data0(11).feature1(data0(11).index+1) = 6; data0(11).index = data0(11).index + 1; %increment image 11's index %extract image 11's features imdat = data0(11).feature1(1:data0(11).index); 
From what I saw last night when I was messing around at home (due to firewalls and such, the function throws an error here at work), the urlread() command pulls the html source code directly from whatever link you input, so if you've got an array of links you can loop through and parse what you need. I can't imagine it's the most elegant solution, but I see no reason why it won't work.
I don't believe consistent naming is even necessary, it should be simple enough to loop through using uigetdir(), dir(), and fileparts() to move through the entire file structure and pull what's needed using a couple logic statements.
That is true.
How are the folders name? How are the images named? Do you need to load ALL of the data into memory at once? check out the commands: dir, uigetdir, fullfile, sprintf, isdir (sorry if this is vague, but your question, too, is vague.) cd yourdir alldirs = dir; for n = 1:length(alldirs) if ~strcmp(alldirs(n).name, '.') &amp; ~strcmp(alldirs(n).name,'..') allfiles = dir(fullfile(pwd, alldirs(n).name, '*.tif')); for m = 1:length(allfiles) % here, do whatever reading you want I = imread(fullfile(pwd, alldirs(n).name, allfiles(n).name); end end end 
nice! I actually hadn't tried it yet. My script is at home, so I'm going to give it a little go here based on your help thus far and report back to you! Thanks so much!
Using dir(), dir('*.tif'), and isdir(), you should be able to recursively search the entire file tree for a certain file type.
if you give us an idea of the file structure we could help you out!
No. You are simply not allowed to do this in MATLAB.
Use a function handle? f=@(a,b) a(b) f(1:10,3)
Hmm, seems like a workaround, but it's a good one as far as workarounds go. Thanks for the tip.
The second output of max gives the index 'i' [m i] = max([10 23])
You could create your own function which takes in an index and does the indexing for you. indexInto(1:10,3) 
Thanks! It's so simple that i don't know how I even missed it...
The beauty of MATLAB, read through the help files and find a bunch of new things daily that you never knew it could do :p
That's what I'm wondering as well. Even more so considering you tried "help max". It's just in the 2nd paragraph.
I was just fooling around with this yesterday! Nice observation. I ended up doing a workaround like A(find(max(A))
Have you used it yet? I am having problems with exporting multiple images in a single program and getting the images back for further manipulation on matlab, they lose all their information
Sorry. I have not used it yet. I was actually on their site to look at their particle tracking code and came across it. 
Yeah it gives you 1 as it should. a=max([10 23 12 15 5]); This makes a=[23]; Then you do a find(a==max(a)) Well, yeah the maximum number of 1 number is the number at index 1. So yeah, other comments told you how to do it but I felt it is necessary you understand why you were always getting 1. a=[10 23 12 15 5]; find(a==max(a)) &gt;2
This does not look like much code, how long does it take to run this? There are no loops and there are probably some subtle optimizations, but with your data size, it should not make much of a difference. 
The overall program is a bit larger and involves time integration of the particle positions and velocities via the acceleration that is calculated in the code that I submitted. Here is the integration step, a simple Velocity Verlet integrator: P2 = P1+dt*V1+0.5*dt*dt*A1; A2 = AccelCalc(Eps,Sig,M,P2); V2 = V1+0.5*dt*(A2+A1); where all of the matrices are Nx3. The particles are integrated through time for some several thousand time steps and I dont think that there is much in the way of optimization to be had in that part of the program. Average calculation times(seconds): Time Steps Particles 10^3 10^4 10^5 2 0.138 1.140 11.061 3 0.141 1.191 11.691 4 0.150 1.237 12.208 10 0.227 2.038 20.186 I'm naive to this type of simulation, so I don't really know how fast it is *supposed* to be. I just know that I would like for it to be as fast as possible haha. 
One way that I see to make it slightly faster right off the bat is that instead of doing dist= sqrt(dPx.*dPx + dPy.*dPy + dPz.*dPz); Fx = 24*Eps./dist./dist.*dPx.*(2*(Sig./dist).^12-(Sig./dist).^6); Fy = 24*Eps./dist./dist.*dPy.*(2*(Sig./dist).^12-(Sig./dist).^6); Fy = 24*Eps./dist./dist.*dPy.*(2*(Sig./dist).^12-(Sig./dist).^6); I would do dist2=dPx.*dPx + dPy.*dPy + dPz.*dPz); s2d2 = Sig.*Sig./dist2; Fx = 24*Eps./dist2.*dPx.*(2*(s2d2).^6-(s2d2).^3); Fy = 24*Eps./dist2.*dPy.*(2*(s2d2).^6-(s2d2).^3); Fy = 24*Eps./dist2.*dPz.*(2*(s2d2).^6-(s2d2).^3); Which helps because then you are precomputing Sig./dist and not calling the sqrt functions. Then, after that I would do dist2=dPx.*dPx + dPy.*dPy + dPz.*dPz); s2d2 = Sig.*Sig./dist2; scalefactor=24*Eps./dist2.*(2*(s2d2).^6-(s2d2).^3); Fx = scalefactor.*dPx; Fy = scalefactor.*dPy; Fy = scalefactor.*dPz; Because the scalefactor term is the same in all 3 equations, so recomputing it wastes computer time. Lastly, I'm not sure I understand what sum(fliplr(x)) does over sum(x). What difference does the order make? x(1)+x(2)+x(3)+...+x(n) is the same as x(n)+x(n-1)+x(n-2)+...+x(1) However, I would be absolutely certain that the code you posted is the performance bottleneck, as it seems like it wouldn't really go THAT slow.
It sounds to me (several thousand timesteps) that this is the bottleneck, not your initialziation stp.
well the "script", as it were, that I submitted in the original post is run every timestep. I'm just trying to find any and all places where it can be improved. Thanks!
That's a really good idea and I dont know why I didnt think about it. I normally do stuff like that but I completely forgot. the flip takes care of this: A = a b c d e f g h i sum(A) = [a+d+g,b+e+h,c+f+i] sum(fliplr(A)) = [c+f+i,b+e+h,a+d+g] although I suppose it might be better to fliplr(sum(A)) so that it doesnt have to flip as many elements It's just a weird little thing that made it possible to use the meshgrids for the calculations. Thanks for the other suggestion tho!
Try using the profiler. In an m-script (or just before you call it from the command line), type 'profile on'. Then after, use 'profile viewer' to see what sections are being called the most and/or using the most cpu time.
Could you elaborate a little more on "need to multiply two matrices together", as well as the specific dimensions? Is it the mathematic definition of matrix multiplication (http://en.wikipedia.org/wiki/Matrix_multiplication), or are you trying some form of element-by-element multiplication? Edit: If it's the latter, here's a reference-- http://www.mathworks.com/help/toolbox/fixedpoint/ref/times.html . MathWorks/MATLAB has some of the most awesome documentation out there.
Definitely use the profiler. I do not know if this will make it faster, but you can try dPx = bsxfun(@minus,P(:,1)',P(:,1)) to accomplish it in one step. and do the same with dPy and dPz. 
I am trying to multiply a (31,31)* (31,1). I am trying to get another (31,1). It gives me the correct size matrix but it didn't multiply anything.
It would help if you posted your code to diagnose your problem instead of guessing at the issue. Consider a couple examples and make sure you can replicate them, x = [1 2 3]; %size 1x3 y = [4 5 6]'; %size 3x1 z = x*y will produce the output z=32. If you're trying to do a element-by-element (dot) multiplication, use the .* operator. The following code x = [1 2 3]; %size 1x3 y = [4 5 6]; %size 1x3 z = x.*y will produce the output z=[4 10 18]. 
Fourier = zeros(thick/delx+1,3*pulse/delt+1); for x = 2:thick/delx Fourier(x,x-1) = f; Fourier(x,x) = 1-2*f; Fourier(x,x+1) = f; end Fourier(1,1) = 1-f; Fourier(1,2) = f; Fourier(thick/delx+1,3*pulse/delt+1) = 1-f; Fourier(thick/delx+1,3*pulse/delt) = f; Temp = zeros(thick/delx+1,3*pulse/delt+1); Temp(:,1) = 298; Temp2 = zeros(thick/delx+1,3*pulse/delt+1); Temp2(:,1) = 298; for t = 1:3*pulse/delt+1 Temp2(:,t+1) = Fourier(x,:)*Temp(:,t); Temp = Temp2; end
Im relatively new to MatLab so I didnt even know there was a utility like that. that's pretty sweet! thanks!
That helped out quite a lot. Another thing that cut a lot of time was manually doing the fliplr that I had towards the end. fliplr(x) = x(:,end:-1:1) 
Is your problem at this line? Temp2(:,t+1) = Fourier(x,:)*Temp(:,t); You are indexing Fourier with the variable x left over from the loop above. In your response to getmylurkon you stated that you are multiplying a [31x31]*[31x1]. Maybe you intended for this line to be: Temp2(:,t+1) = Fourier * Temp(:,t); 
I changed it to just multiply it by Fourier and it still didn't work. I get the same thing both ways.
I don't know the values of thick, delx, pulse, or delt so I can't really run your code, but you should check the sizes of your matrices and make sure they are correct, size(Fourier) size(Temp) size(Temp2)
I checked the sizes and they match. The program has never given me an error about size mismatch. It just doesn't do the actual multiplication.
Could you explain a little bit about what you're trying to do with the last for loop? As horseproofbacon mentioned, I think x is currently a scalar, i.e. the (number of rows in your Fourier matrix - 1), so I think the Temp2(:,t+1) = Fourier(x,:)*Temp(:,t); line is currently a vector times a vector. Also, you may want to set breakpoints in the middle of the second for loop and check the Temp2 and Temp matrices in the terminal to see if they're printing the matrices you're expecting (sanity check). I noticed that you use the "pulse/delt" and "thick/delx" values in a lot of your loops. For the sake of readability, you may want to set a variable at the beginning of the code that has a meaningful name (e.g. columnsize = thick/delx or something), and just use "columnsize" or whatever whenever you reference thick/delx in your code. **Edit: Sorry, completely wrong on "x is a scalar". Disregard that portion.** **Edit2: Also, Fourier(x,:) is using the matrix x as an indice. I don't know if I've ever seen anything like that, or how Matlab reacts to that, but I attribute this to my inexperience. Is that what you were trying to do?** 
I took out the Fourier(x:) part and changed it to just Fourier. Temp2 and Temp are both square matrixes and I am trying to multiply the first column of the Temp matrix by Fourier to get the second column of Temp2. It is in a for loop because I need to do it multiple times. So i am using the previous column to get the current column. 
Whew. Sorry. Too much caffeine. First, to correct my Edit2 from above--x is NOT a matrix, but a vector. If I'm interpreting this correctly, you're taking the matrix Fourier size [n x n], multiplying the first column of Temp size [n x 1], and storing the [n x 1] results in the second column of Temp2? And then the second column of Temp &amp; Fourier -&gt; third column of Temp2? Does this look like it would do the trick? [rowsize, colsize] = size(Temp) For t=2:colsize Temp2(:,t)=Fourier*Temp(:,t-1); End 
That is what I am trying to do. But it doesn't seem to be doing the multiplication. Fourier is: 0.4000 0.3000 0 0 0.3000 0.4000 0.3000 0 0 0.3000 0.4000 0.3000 0 0 0.3000 0.7000 Temp is: 298 0 0 0 298 0 0 0 298 0 0 0 298 0 0 0 Temp2 ends up being: 298 298 0 0 298 298 0 0 298 298 0 0 298 298 0 0 
What should Temp2 after the first iteration be? The following? 298 | 208.6 | 0 | 0 298 | 298 | 0 | 0 298 | 298 | 0 | 0 298 | 298 | 0 | 0
Thank you internet man. You have solved my problem.
Glad to hear! My only hope is that you use your powers for good.
This is a bug with pcolor I encountered ages ago, thought it would have been fixed by now... The solution is to change the way the plot is rendered using: set(gcf, 'Renderer', 'painters') Don't ask why it works (it shouldn't) PS: If you run into any bugs with the painter renderer, try 'zbuffer' instead
Unfortunately its a MatLab course, so I am limited to MatLab. The script above is a single calculation that is called each time step in the root function. If I were allowed to create a C file to use as a subfunction in the code, I would do it in a heartbeat. haha Thanks!
You mean like [subsref](http://www.mathworks.com/help/techdoc/ref/subsref.html)? ;)
Took me 2-3 hours to brute force it... Haha
Edit your post to have more details about your problem, people need to know what the issue is before they can help you. 
thanks for the tip. just edited it
Could you post the code and the problem/error message/inconsistency?
it's kinda long. can u give me a email address? I can send you the problem along with my code and the error message
using the FindRoot command in Mathematica on x2 = 7.097x10-6 + 1.643x10-21 x1-1/0.15 gives x-&gt; 0.00276012 Is that what you wanted? Also this: http://www.mathworks.com/matlabcentral/newsreader/view_thread/289642
You got the right answer. I just gotta learn to calculate that with matlab, unless wolfram alpha could do it.
This kind of configuration varies widely depending on your cluster. If I understand correctly, each node of the cluster has Matlab and the parallel toolbox, so you should be able to set up each node as a worker in a pool. Next, you need to setup in Parallel -&gt; Configurations Manager a new configuration based on the available nodes. After verification, you should be able to activate the pool and rest should be automatic. Mathworks has a [guide for setting up parallel computing](http://www.mathworks.com/support/product/DM/installation/ver_current/instructions/mdce_install.pdf). (PDF warning)
is the distributed computing toolbox independent of the parallel computing toolbox? looks like it is.. 
I think so. ([ref](http://www.mathworks.com/products/parallel-computing/builtin-parallel-support.html)) It looks like each of the cluster nodes needs the Distributed Computing Server and your machine only needs the Parallel Computing Toolbox.
this is working swiftly, btw. the urlread() returns just one long string that I'm now going to need to parse based on the html specific tags for each site. Once I do that, I'll just convert the string into a matrix by using the white spaces as eliminators. Unless, there is a quicker way you can think of?
you can simply add together the different raw audio signals to get multiple sounds at once. zero padding should help with different filesizes
How many speakers do you have? I am currently working with 8 speakers on an 8 channel soundcard and I use a package called Playrec (http://playrec.co.uk) to play multiple sounds simultaneously. But if you only have two speakers, check out PsychToolBox's PsychPortAudio.
Works like a charm, many thanks!
If you're using a GUI you can use function figure1_KeyPressFcn(hObject, eventdata, handles) and/or function figure1_KeyReleaseFcn(hObject, eventdata, handles) To run a script whenever a key is pressed/released. eventdata will be a structure with 3 fields: key (the key pressed/released), character (character interpretation of the key pressed/released), and modifier (if a modifier like control or shift was pressed). As far as getting more than one sound to play at once, I will defer to others' experience on that one since I don't have any.
 line([1 2],[3 4]) this draws a line from 1,3 to 2,4, and could be useful for you, especially since you only have three coordinates. Notice that the first input is the x-coordinates and the second is the y-coordinates.
Start working on some [PE problems](http://projecteuler.net/) and look for ways to implement it vectorially.
I'm not sure how I would go about doing that, since I want the new sound to start playing when the user hits a new key. Say the user hits 'a', then halfway through the playback, they hit 'b'. How would I add the signals together at that point? Sample code would help, thanks.
Thanks, so would this be how I do that? (for example): A = imread('C:\keyboard.bmp', 'bmp'); %Load the image of the keyboard image(A)% output the image function figure1_KeyPressFcn(A, eventdata, handles) I'm not very familiar with Matlab, so if this is not it, could you please give me some more information about how I would implement this?
When in doubt, project Euler :D Otherwise, machine learning problems are ripe for this kind of thing, like building neural networks. I'll have a poke and see if I can find any exercises online.
What kind of vectorization? Computer graphics? Transforming matrizes into vectors? Or just standard matlab exercises with vectors?
So this rather depends on how much machine learning you know, but the exercises [here](http://mlg.eng.cam.ac.uk/teaching/4f13/1011/) (at the bottom) are great from working from an indexed solution to a vectorised solution. The lecture notes are pretty good too if you need a polish up of your ML knowledge. I think the stuff [here](http://www-g.eng.cam.ac.uk/lifesciences/courses.html) is also pretty good, but from memory was a lot more tricky than the ML stuff.
Not quite. The functions I gave are run every time by the GUI when a button is pressed, so you would need to incorporate some logic based on the key pressed. Simple example: function figure1_KeyPressFcn(hObject, eventdata, handles) if strcmp(eventdata.Key,'a') == 1 %Play 'A' sound elseif strcmp(eventdata.Key,'k') == 1 %Play 'K' sound end strcmp() compares 2 strings, and it's pretty much the same as using if 'stringa' == 'stringb', just better coding practice. So you could set that logic up for the entire keyboard and get something along the lines of what I believe you're asking for. This function will only work when included with a GUI (and you need to specify the KeyPressFcn in the property inspectror for the GUI in GUIDE or set the handle appropriately when the GUI initializes). I'm not quite sure how to handle simultaneous key presses, since this function is run for a single key (if you hit 'a' and 's' at the same time, for example, it will run both but one letter at a time). The only thing that comes to mind at the moment for use outside of a GUI would be looping waitforbuttonpress. Simple example: image(A) loop = 1; while loop k = waitforbuttonpress; if k == 1 key = get(gcf,'CurrentCharacter'); if strcmp(key,'q'); loop = 0; else %Sound play logic end end end This example uses 'q' as a key to quit out of the loop, but you can use any key you want. As with the previous example, this will not accommodate simultaneous key presses.
It is a common pitfall, I recently ran into it too : http://matlab.wikia.com/wiki/FAQ#Why_does_the_transpose_operator_take_the_complex_conjugate.3F 
Like subsref, but a simpler interface(i.e without structs)
Could have been worse, you could have been stumped by a floating point error: (0.3 - 0.2) == 0.1 Took me a day and a half to figure out why that wasn't returning true to the logic statement. Funny thing was, I had just finished the introduction to my numerical methods course detailing floating point approximation and the errors it can cause. Didn't even register until halfway through lunch the second day. &amp;#3232;\_&amp;#3232; 
I ran into that once, too. I wanted to scream after I finally found the line causing the problem.
yeah, i figured this out after years as well recently. why were all my signals moving backwards in time, i wondered?
Yeah, I always try to check for the difference to be less than eps, rather than equality. Doesn't mean I always do, though.
FYI there is a [regular transpose](http://www.mathworks.com/help/techdoc/ref/transpose.html) in MATLAB. I just discovered this about 3 months ago. I first used MATLAB in 1997. ಠ_ಠ
Ehhh, that works perfectly fine on r2010a and r2012a (result [2 3 4]). No clue why you are getting an error. Does it say at which line of min() it fails? The error means that is trying to compare unequal matrixes most probably (which is expected if you are doing min(X,[]) but not when you specify a dimension) If everything else fails, you can also do a=min(X); To get the same results in this example.
I tried a=min(X) as well but its still a no go. Doesn't give me a line at which it fails either. =/
I think I got it. I accidentally made a variable called min -.- Thanks for the response though!
I think I got it. I accidentally made a variable called min -.- Thanks for the response though!
Classic :D That is something I am desperate for an orange wiggle for - I'm forever doing this...
Came here to say this. In one project I accidentally had a variable named "plot" and any subsequent attempts to plot data failed with this exact error message.
You should really write your own code as opposed to obfuscating someone else's and passing it off as your own.
Daaamn, you people need to lean good code practices... Totally excusable though for a beginner in MATLAB that is not yet accustomed to some of the more obscure yet useful functions! (but plot...?)
You are absolutely right. Of course, this was a beginner project, so it was sort of the point to make mistakes like these in order to learn from them (and never do them again). 
It's not someone else's code. He gave us this function and wants us to show that for and while loops can work in this situation. He wants us to keep the variables and swap are other things. It's an extra credit thing 
It's not someone else's code. He gave us this function and wants us to show that for and while loops can work in this situation. He wants us to keep the variables and swap are other things. It's an extra credit thing 
Then it's a pretty simple for loop. Not to be (excessively) snarky, but this is programming 101.
Could you at least tell us what *you* think should be done? I'm all for helping people out, even with simple problems, but I'd prefer they show some effort first. You indicated you think a for loop could be used. Where would you use it? How would you set it up? What lines of code would it allow you to simplify or remove?
In this case, you cannot directly vectorize a cell mostly because you are accessing a property inside. You can use cellfun to vectorize cell arrays cellfun(@(c)c.value &gt; 0.9,myObjCell) should work. Vector of objects "could" be faster (depending on what the object contains). If all the object are going to be the same type, then I would prefer a vector. If you need more flexbility (such a mixing different classes or super/sub classes), go with cell arrays. 
Okay here is the code I have now for a rudimentary sort function in Matlab. However, I'm wondering if there are other routes I can take to make the program more efficient. I was thinking for loops with if statements would be better, but if I'm wrong feel free to correct me. function [list1, list2] = mySortFunction(array1, array2) compVal1 = 1; compVal0 = 0; while compVal1 &lt;= length(array1) %program will count through the array until each value has been checked [lowestVal,index] = min(array1(compVal1:length(array1))); %finds minimum value (lowestVal) in array1 and the location of lowestVal (index) index = index + compVal0; %adds value to index each time through the loop tempVar1 = array1(compVal1); tempVar2 = array2(compVal1); tempVar3 = array2(index); array1(index) = tempVar1; array2(index) = tempVar2; array1(compVal1) = lowestVal; array2(compVal1) = tempVar3; compVal1 = compVal1 + 1; compVal0 = compVal0 + 1; end end disp(array1) disp(array2) 
Maybe you can compare the performance of your program with other well-known algorithms such as [Bubble sort](http://en.wikipedia.org/wiki/Bubble_sort) (your algo should be considerably faster, else a rewrite would be in order) or [Insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) 
I'm not sure this can be accomplished - one data set is the matrix of values, and the other the matrix of changes. Obviously you can't have an equal number of changes compared with the values. Maybe you could remove the first row of the original values?
In MATLAB, any individual lines of code are horribly slow. Explicit loops (for, while) are slow. Vector instructions are extremely fast (i.e. when you perform a large number of operations with one line of code, such as an array assignment or a matrix multiply). There's a rather large overhead between each line of code (compared to, say C++), but a very small overhead between sub-operations of the same line of code. That being said, I'm confused as to why you'd use MATLAB to write a sorting function... what happened to just "sort(array)"? Your function returns two arguments that aren't assigned by the function... what exactly are you trying to do?
Do you need this because you have big vectors to sort or this is just a fun programming project for you? If it's the former I'd be shocked (in the good way) if it outperforms matlab's built-in, super-optimized sort function. Some timing data for that would be really interesting (just using tic/toc). If it's the latter - sweet. The "matlab" way would be to try to replace the loop with some form of vectorization but it's not clear to me there's a good way to do that. Something you can try to eliminate the loop - create a big matrix of binary comparisons of each element of the vector and sum the rows (or columns). That, I think, should give you the order the elements need to be placed in. I question this being faster though (or if your vector is big enough, even having enough memory to store the binary matrix).
Insertion sort, for very small arrays, actually performs very well (often better than more complicated sorting methods) OP, If you're really into writing your own sorting algorithm (...why?!) I suggest you have a threshold below which you use insertion sort.
DIFF on a gives you a matrix of the same size as the original. Check if you matrix is actually symbolic. This is what I got when I tried diff on a symbolic matrix. &gt;&gt; a = sym('x') a = x &gt;&gt; m = [a a^2 a^3] m = [ x, x^2, x^3] &gt;&gt; diff(m) ans = [ 1, 2*x, 3*x^2]
I can almost guarantee that anything written in Matlab that does something Matlab already does natively (like dot products etc.) will be much *much* slower. Even writing some functions in mex is slower than just letting Matlab do it itself.
You have an extra 'end', but that works fine and is much faster than the original (0.000310 seconds vs. 0.001242 seconds for the original). If you were to just replace the original while loop with a for loop, you'd get something like this: for s = 1:(length(vec)-1) n = s-1; [X Y] = min(vec(s:length(vec))); Y = Y + n; v = vec(s); v2 = vec2(s); t = vec2(Y); vec(Y) = v; vec2(Y) = v2; vec(s) = X; vec2(s) = t; end Vector1 = vec Vector2 = vec2 While this looks neater, it still takes about the same amount of time as the original. You could make a similar change for your code, giving you the following: for compVal1 = 1:length(array1) %program will count through the array until each value has been checked compVal0 = (compVal1 - 1); [lowestVal,index] = min(array1(compVal1:length(array1))); %finds minimum value (lowestVal) in array1 and the location of lowestVal (index) index = index + compVal0; %adds value to index each time through the loop tempVar1 = array1(compVal1); tempVar2 = array2(compVal1); tempVar3 = array2(index); array1(index) = tempVar1; array2(index) = tempVar2; array1(compVal1) = lowestVal; array2(compVal1) = tempVar3; end disp(array1) disp(array2) Again, this looks neater but doesn't save you any significant amount of time. Could probably simplify the amount of variables that you're using to make it look neater, but I can't see anything that would make much of a difference in run time.
[x y z] = sphere(n);
You can easily do this with sphere (if you are allowed to use it, in case this is homework) [x,y,z]=sphere(100); %However many points you want the sphere to have hold on surf(x+1,y,z) %Radius 1, centered around [1,0,0] surf(R*x-100,R*y-50,R*z-25) %Radius R, centered around [-100,-50,-25] etc. 
from help rand Generate values from the uniform distribution on the interval [a, b]. r = a + (b-a).*rand(100,1); you can use rand to generate the locations and radius.
Read the wikipedia page on Principal Component Analysis, but before you do, read every single word of this http://www.uwlax.edu/faculty/will/svd/index.html starting with the introduction, all the way through "Data Compression". Then, the wiki page on PCA will make a LOT more sense.
* PCA aims to find the maximum variance in a data set. The first component is this maximum variance. * Each remaining component is orthogonal to the first and to each other, i.e., independent. * Each component (based on the first) is a weighted linear combination of each variable to create new variables (i.e., components (aka factors, dimensions)). * PCA is often used to compress data, or explain X% of variance. Most people tend to only keep a certain number of components in order to "explain" a certain amount of variance in the data. I assume you have two data files: 1) is 180 rows x 2 columns and 2) is 360 rows x 2 columns. There are multiple ways to perform PCA in MatLab: princomps, pcacov, svd, etc... Often times you want to make sure that your columns (variables) are comparable to one another. This usually means your normalize. Once the columns are normalized you can decompose with PCA. First step: normalize. X_scale = zscore(X); Second step: use the singular value decomposition to understand the data: [u s v] = svd(X_scale); SVD is a generalized approach to eigendecomposition. The eigen decomp is the core of PCA. To understand the _rows_ of your data set (i.e., relationship between all the rows you have): row_factor_scores = u * s; To understand the columns: column_factor_scores = v * s; These are now plottable sets of scores. To describe rows x components and columns x components respectively. Then you just plot the first two components (i.e., columns) of each set of factor scores. These two components explain the greatest amount of variance, under the constraint that component 2 is orthogonal to component 1.