I never new you could set axis proprties like that. I've always done it like set(ax,'gridColor',[0.800 0.800 0.800]). You have just saved me several keystrokes worth of time.
You don't happen to have any examples of how a render looks like on blender vs matlab?
2014b is the first release that lets you do this. previous versions require set
randn gives by default values from a Gaussian distribution with mean 0 and std 1. If you want a different mean, you add to this. If you want a different std, just multiply instead. x = randn(2,round(duration*fs))*0.5; Will give you what you want.
Yeah this is exactly right. You can make a Matlab plot look pretty good if you customize it. I'd probably say that the best you can do in Matlab may still not look as good as the best you can do in something else, but it can be pretty damn good. The thing people ignore when they bash Matlab plotting, is that even in fancier plotting tools you have to spend time customizing the output. The only difference is that Matlab has reasonable defaults, so you can look at data quickly while you work. Matlab only looks bad when people use the default plotting to make nice figures for presentation use. 
What errors are you getting? What don't you understand about them? What is supposed to make that else statement act on a random cell? Is it supposed to be a different cell every step? 
This is half true. 2014b fixed some pretty fundamental things about the way MATLAB handles plots (i.e. it FINALLY anti-aliases stuff) so that plots look decent off the bat. If you were doing anything half-way serious, you'd go to Illustrator. If I'm doing something full-serious, I'll still do that. But for lab presentations, etc., I'm now happy to copy-paste figures straight from MATLAB. The new graphics engine is light years ahead of the old one.
Yeah this is basically what I meant. 
Either create a cell structure with 8 columns or create a text file where each line is associated with each line of your matrix. Two simplest solutions imo. 
This looks very promising thanks!
&gt; anyone bored enough? To do your homework for you? No, stop being lazy. How would you do it on paper?
lambda = eig(A) returns a column vector containing the eigenvalues but what does Find the eigenvector associated with the largest eigenvalue mean? :)
Read the help file for eig http://mathworks.com/help/matlab/ref/eig.html or eigs if you want the largest. You want the [V,D]= forms of the functions
&gt; MATLAB code tricks, discussion, and questions; **but we don't do your homework!** &gt; *A rental car agency has four locations where customers can pickup or return a rentedvehicle* I nominate this as the laziest "I'm not even going to pretend this isn't a homework question" post I've seen in a long time.
Hmm. I didn't know about Matlab production server (which uses the MCR). I would've said that sounds easier....till I flicked through [this](http://www.mathworks.com/help/pdf_doc/compiler/example_guide.pdf). Web applications are generally built as so: [web server] &lt;----&gt; [app server] &lt;----&gt; [computation server] Matlab production server fulfills the computation-server part of the stack, but you still need the other two. In the pdf linked to, I see mentions of Java servlets and C# and blahblahblah, which I would say are harder to set up, least of all because they're not open source, hence the community around them is more enterprise (and less likely to write nice detailed blog posts on how to set up your set-up) It might just be a question of familiarity, but my solution seems easier :P Have you tried asking on stackexchange with #matlab tags?
"Attempted to access M(0,3); index must be a positive integer or logical. Error in BasicSandpileModel (line 39) M(i-1,j) = M(i-1,j) + 1;" I get that it's trying to access a site that is outside of the matrix, as i specified i &amp; j can range from 1-10 -&gt; M(0,3) is out of bounds. But i don't know how to fix it. I thought that Row = randi([1,10],1) , creates a random number between 1 &amp; 10 and M(row,column) would call that random number. Yep, it's supposed to be different every step. I suppose my algorithm would help.. 1. Initialize each site in the lattice to a random value M(i,j) ∈ {0, 1, · · · , Mcr}. 2. Record the state of the system by recording the number of grains in each site of the lattice. 3. If M(i, j) &gt; Mcr relax site (i, j): M(i, j) → M(i, j) − 4 M(i ± 1, j) → M(i ± 1, j) + 1 M(i, j ± 1) → M(i, j ± 1) + 1 4. Select a random site (i, j) where 1 ≤ i, j ≤ 10 5. Add a grain of sand, M(i, j) → M(i, j) + 1 6. Scan the grid for any further sites that need to be relaxed. Continue relaxation till there are no further sites to be relaxed. The total number of sites that have been relaxed is called the “avalanche size”. 7. Return to step 4.
Ahhh my bad, amateur mistake :-) It's only running once at the minute, which makes me think there's a problem with my loops..
To fix this you need to do some index checking as soon as you start each loop. You obviously don't have a 0th element, so when i = 1, i-1 is 0. Likewise, you'll end up with a similar scenario on the other end of your grid when i = 10, i+1 is 11 and you don't have an 11th row or column. To fix this, try something like: for ii = 1:10 for jj = 1:10 if ii == 1 || jj == 1 || ii == 10 || jj == 10 % you've caught exceptions when you're trying to % access a 0th or an 11th index % you can further separate them if your boundary % conditions aren't the same or are unique for each case % do your boundary condition M-stuff here else % you're at least 1 index inside of your % domain in any direction % do your interior M-stuff here end end end Also, in the same breath as "size", **DON'T NAME YOUR VARIABLES "i" (i=sqrt(-1))!!!** :) BUT, I don't think you're code will run for more than 2 iterations as coded above, and this is realted to naming a variable "size".
See my other reply RE: the boundary conditions. But in changing "size" to "siz" should save you a headache. I can elaborate if you want to know more.
Ah I see now, i try and implement it now. Of course, i should of figured 'i' would be equal to -1, my maths notation habits kicking in :-)
Ya, the short hand indexing works fine in normal-speak, such as *"accessing the i-th and j-th element of M is done by M(i,j)"*, but in a computing context - where some "normal" words are reserved to be used as function names and special, pre-defined values - *here's* where you need to be a little more careful how you code your application in regards to variable name conflicts. Let me know how things work out.
Change num2str(x)' to num2str(x) Do the same for num2str(x2). The ' transposes the string so: 0.1 becomes 0 . 1 You get the error because it's impossible to concatenate the above with 'x='. As a general tip to debug your code, if you run your code from the editor, matlab will tell you exactly where the error occurs (which line). If the error doesn't make it clear for you, just print every part of that line in the workspace to check what values each variables return. So just type num2str(x)' and check what it returns.
If x is scalar then just do: disp( [ 'x=', num2str( x ) ] ); If you think x can be a vector, then do: disp( [ 'x=', num2str( x(:)' ) ] ); All I'm doing in the second line is forcing the a vector **x** to be a column vector **x(:)** and then making that a row vector with **x(:)'**. With your original code, you were trying to make a string a column vector instead of a row vector with **num2str(x)'** which isn't what you want.
I consider using i and j as indices to be poor practice in pure math, as well as programming, for exactly the same reason. I typically use n, m, and k for indices. 
Let's say randi([1 10], 1) returns 5. Now Row = 5. When will it ever have a different value?
Seriously? If you need homework, at the very least, you need to show that you've tried, what isn't working, what you think may be the problem etc. Show that you have tried it. That is the bare minimum. If you really want help, post the questions in a useful format (ie, not images of the questions) and make sure it is well formatted. 
Okay, i've implemented the changes &amp; i'm getting no errors, but it isn't displaying an image for me.. I changed i -&gt; x and j -&gt; y. I know my code is most likely horribly inefficient and could be achieved with far fewer lines but that's all i could figure out. % Cellular automaton model (CA) of a sandpile on a 2-dimensional grid. The % siz of the grid matrix is given by siz (e.g. [20 20]) and nrsteps is a % scalar positive integer defining the number of time steps of the model % run. % % Each time step a sandgrain is added to a random location on the grid. % When the critical number of grains in a cell exceeds 3 all grains in the % cell are turned to the 4 neighbors (v. Neumann Neighborhood). This % avalanche may prograde and trigger even more avalanches. After a while % the sandpile comes to a state of self-organized criticality. siz = [10 10]; %size is a 10x10 matrix n = 0; %step counter nrsteps = 1000; %num. of steps = 1000 nrc = 100; %number of cells Mcr = 4; % critical value of M Column = randi([1,10],1); % creates a random number between 1 &amp; 10 Row = randi([1,10],1); % creates a random number between 1 &amp; 10 M = randi([0,4],10,10); % random 10 x 10 matrix with values between 0 and 4 OffGrid = 0; % Num. of Grains that have fallen off the grid while n &lt; nrsteps % Top Left Corner for x = 1 for y = 1 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x+1,y) = M(x+1,y) + 1; M(x,y+1) = M(x,y+1) + 1; OffGrid = OffGrid + 1; end end end %Bottom Left Corner for x = 1 for y = 10 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x+1,y) = M(x+1,y) + 1; M(x,y-1) = M(x,y-1) + 1; OffGrid = OffGrid + 1; end end end %Left-hand side for x = 1 for y = 2:9 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x+1,y) = M(x+1,y) + 1; M(x,y+1) = M(x,y+1) + 1; M(x,y-1) = M(x,y-1) + 1; OffGrid = OffGrid + 1; end end end %Top Right Corner for x = 10 for y = 1 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x-1,y) = M(x+1,y) + 1; M(x,y+1) = M(x,y+1) + 1; OffGrid = OffGrid + 1; end end end %Bottom Right Corner for x = 10 for y = 10 if M(x,y) == 4 M(x,y) = 0; M(x-1,y) = M(x-1,y) + 1; M(x,y-1) = M(x,y-1) + 1; OffGrid = OffGrid + 1; end end end %Right Hand Side for x = 10 for y = 2:9 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x-1,y) = M(x-1,y) + 1; M(x,y+1) = M(x,y+1) + 1; M(x,y-1) = M(x,y-1) + 1; OffGrid = OffGrid + 1; end end end %Top Row for y = 1 for x = 2:9 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x+1,y) = M(x+1,y) + 1; M(x-1,y) = M(x-1,y) + 1; M(x,y+1) = M(x,y+1) + 1; OffGrid = Offgrid + 1; end end end %Bottom Row for y = 10 for x = 2:9 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x+1,y) = M(x+1,y) + 1; M(x-1,y) = M(x-1,y) + 1; M(x,y-1) = M(x,y-1) + 1; OffGrid = OffGrid + 1; end end end %Inside Boundary for x = 2:9 for y = 2:9 % if statement to relax sites at critical value and disribute % grains to adjacient sites if M(x,y) == 4 M(x,y) = 0; M(x+1,y) = M(x+1,y) + 1; M(x-1,y) = M(x-1,y) + 1; M(x,y+1) = M(x,y+1) + 1; M(x,y-1) = M(x,y-1) + 1; end end end % adds 1 grain to a random site M(Row, Column) = M(Row, Column) + 1; %adds 1 to step counter n = n + 1; imagesc(M) end 
Yeah your right, i suppose it was always just clear to me from the context..
Ah i see, i tried putting M(randi([1 10], 1),randi([1 10], 1)) but it didn't work and it was the only way i could think of..
Oh, I get what you're saying, but I don't really know how to fix it.. Maybe something like: Rcell = [randi(10),randi(10)]; M(Rcell(1),Rcell(2)) = M(Rcell(1),Rcell(2)) +1 Or is that the same as before??
That would work, although it's a little ugly. You could just make a single call to randi and get both your random integers at once. But the important thing is that you need to get new random numbers every iteration. A random number stops being "random" if you just use it over and over again. 
In your error, you don't specify a data type for your first variable (precn). As for the strings... is it imperative that you have all this data in one variable? Why not just make a 2nd variable whos rows correspond to those in your data variable? If you do need them all in one variable and are still having problems with the structure type, maybe try a cell?
looks close to what I need: http://stackoverflow.com/questions/3274043/finding-islands-of-zeros-in-a-sequence
So.. how are you reading your image into MATLAB? And is your image just B/W such that any B pixels are the line and all W are the background? I would to about it this way. You have an MxN image, find all the B pixels. Copy these index values into another matrix that you can flag saying you've used a given B pixel. Using these indices, check each 8 neighbors around the B pixel, if you've got all W pixels there (with any B ones flagged as already been used (ie. connected to the current B pixel)), you are at an end of your line. This is also how you can walk along the line. From a B pixel, look at the 8 around, and if some are B and unflagged, you continue walking in that direction. Now, how to handle the thickness of the line and how to keep going is more complicated than just following a line of a single pixel. Maybe you could set a condition to look at pixels in 4 directions (horiz, vert, LR diag, RL diag) to see how best to follow the line.
Is there a reason you can't just modify them in matlab itself and then just export different images/PDFs ?
Yep, n = 1000, which means it's just showing me the last iteration. I presume that means i've placed imagesc(m) in the wrong place?? I want it to show me each iteration..
Save them as emf filed then import into ppt. 
Because you are not starting a unique figure each iteration, each new imagesc call is just overwriting the last image. If your code is executing fast enough you won't be able to notice but your image should look like a *really* fast movie plotting all 1000 iterations. You can either start a new fig each time (warning, that means 1000 figs!), or you could either pause and wait for your input before moving on (will be quite slow and you'll have to input to the comp 1000 times), or you can set a timer such that each iteration you pause for X seconds before you overwrite the figure with the next new image. If you are ultimately trying to make a movie of your sand simulation over the 1000 iterations, you might want to consider MATLABs functions for that type of thing. I know you can make gifs, for example..
Export as eps, a vector format, and edit in a vector editor like Illustrator.
Take the diff of the logical output from y &gt; threshold. Then find where it is positive and negative.
See the sidebar: **we don't do your homework!** We'll help you along the way, help you debug, help you where your stuck, but we won't do your HW. Seeing as how you're in such a bind, maybe try some of the r/cheatatXXXXhomework subreddits...
I know this isn't exactly what you're looking for but I think your best bet is to export different plots as it is building. I am not sure exactly how Powerpoint will handle it, but using LaTeX/Beamer, it does a great job overlaying images. Some to doing this are to set the position so it is always the same. This way, you can make sure thing nicely align (This is the pre R2014b but it'll still work in the latest too). set(gcf,'units','pixels'); pos = get(gcf,'position'); set(gcf,'position',[pos([1 2]) width height]); This will resize the plot window in the same position to the specified width and height. Here is a code I wrote to make it easier to set and get the size function size_out = set_fig_size(varargin) %% set_fig_size: Sets a figure h (of gcf) to a set pixel size. % % Usage 1: Set the size % set_fig_size([xsize ysize]) % set_fig_size(h,[xsize ysize]); % % Usage 2: (just returns the size) % [xsize ysize] = set_fig_size; % [xsize ysize] = set_fig_size(h) if isempty(varargin); warning('no ''h'' set. Using ''gcf''') h = gcf; set(h,'units','pixels') size_out = get(h,'position'); size_out = size_out([3 4]); return end if length(varargin) == 1 % Is it setting a size w/o handle or is it requesting a size for handle switch length(varargin{1}) case 1 % requesting size h = varargin{1}; set(h,'units','pixels') size_out = get(h,'position'); size_out = size_out([3 4]); return case 2 % setting a size sz = varargin{1}; warning('no ''h'' set. Using ''gcf''') h = gcf; end else % two inputs h = varargin{1}; sz = varargin{2}; end sz = sz(:)'; set(h,'units','pixels') pos = get(h,'position'); set(h,'position',[pos([1 2]) sz]) size_out = sz; Yes, this is 47 lines of code to save me typing 3 but it has made life *much* easier! 
Can you post it here so we don't have to go through another link? What issues are you having? Any errors? Put 4 spaces before any lines you want displayed as code
Sorry, the only reason I'm using a link is because I took a picture of the question out of the textbook. And the part I'm stuck on is the question asks to 'use composite trapezoidal rule' which I'm having trouble with. Thanks for the help if you can offer any 
I don't have MATLAB anymore, but I do use Java a lot these days, so hopefully I can provide some hints. No need to make a main method, since you're using the class as a library. Just make a static method that takes a string and returns a long: public class CalculateCRC32ChecksumForByteArray{ public static long calculateChecksum(String input){ // Calculate the checksum as in main... return checksum; } } If your data's not a string, you could also use Checksum directly in matlab. The hard part is getting your data as a java `byte[]`. If you have a string, you can call `getBytes` on it as the example does, but I don't know of a simple way to do it otherwise. If you literally need the checksum to be the final bytes of the file, you can write the file, then use something like from http://stackoverflow.com/questions/858980/file-to-byte-in-java path = java.nio.file.Paths.get("path/to/file"); data = java.nio.file.Files.readAllBytes(path); % Returns a byte[] checksum = CRC32(); checksum.update(data, 0, data.length); theChecksum = checksum.getValue(); % append checksum to fle Of course, if your data is already an int8, then you can probably just pass that as a byte[] to `checksum.update` without dicking with any of that junk.
This is awesome. I think this will definitely get me on the right path. Thanks for the help!
What were the random initial conditions that you used? Also, what conditions worked?
I don't know if your approach is correct, but your immediate problem is that you are feeding 'diff' a function, not a vector like it needs. You need to define the range and resolution of r. It should be something like: diff(vA(1:0.1:3)) The function 'diff' will like that much more.
it might help to post the entire code.
This is a good question, I don't know why it's getting downvotes. It's genuinely confusing behavior, and you've done some work to try diagnosing it. Meanwhile, there are about 300 questions with upvotes, that all amount to "do my homework for me". Or "I have code. Could it be better? I won't tell you what I'm doing" or "I can't read documentation, how do I add two numbers?" 
I'm not sure why diff() shows up at all. You should be able to eval the function (vA() that is) from r=[0,3] with arbitrary resolution and feed the results into trapz().
Unless you give more specifics in regards to your function, I can't give you an exact answer. [However, here is my best effort to help you](http://www.eng.auburn.edu/~tplacek/courses/3600/ode45waterloo.pdf)
Usually googling "matlab &lt;function name&gt;" will get you the mathworks documentation, which is normally useful.
Are you using the same integrator, tolerances, and initial stepsize? This system is incredibly sensitive to these kinds of things.
Why are you using semilogx? Just use plot. Also gradient is a better choice than diff.
yes u are right about semilogx, scale dosent need to be logaritmic, i did not see that, ty. I will try with gradient.
I might have something lol Ill get back to you once i slept
RE: #31, that's not going to work, and will error out on your first iteration as you try and access x(0). Can you see why and how to fix it?
I use simulink 3d animation but it may be a bit more involved than you need. http://uk.mathworks.com/products/3d-animation/ Easiest way would probably be just a 3d quiver plot? http://uk.mathworks.com/help/matlab/ref/quiver3.html
Can you get the orientation into matlab? If so, you could just plot the 3 axes (x y z) vectors showing it's orientation using [plot3()](http://www.mathworks.com/help/matlab/ref/plot3.html).
Two solutions. First is to take out the j loop and use A(i,i). Second is to use the diag function on the matrix to be extract the diagnol as a vector, then a single print command can print it.
Have you read the [fmincon()](http://www.mathworks.com/help/optim/ug/fmincon.html) docu page? A quick browse through the examples and it jives with your error message: I don't think you're passing the first argument correctly.
So you're interested in speed and memory overhead?
Try [squeeze()](http://www.mathworks.com/help/matlab/ref/squeeze.html) O=squeeze(Z(squeeze(Y(:,1)),:,squeeze(Y(:,2)))); You may fiddle around with how exactly to employ it, but I think this might be your problem.
Try to think of a number that will match your condition. What number is both less than 0 and greater than 120?
On your while loop, should you not have ageyears&gt;0 and ageyears&lt;120? I think you have your inequalities the wrong way around. As well, if you are including 0 and 120, the while statement should actually read while (ageyears&gt;=0) &amp;&amp; (ageyears&lt;=120) When you initialize your ageyears variable, it should also be within those bounds. The value of 135132 is greater than 120, so it will not enter the loop to begin with. If you give it a value of 50, it will enter the loop, and continue until the user enters a number outside your specified range. You also need your end statement to terminate the while loop, so remember to wrap the loop with end Hope that is useful to you!
Also, it seems to me that the while condition should be based on whether or not the user wants to input more age values. Your ageyear condition that you have specified would be a nested if loop, which would report the age if it's between 0 and 120, and report an error if not. A subsequent question would ask whether or not the user wishes to input the other age, and this second input would affect the while loop. Not sure if this helps or not!
The only way to pass functions around is using function handles. These are generated by using the @ symbol in the correct place. At the moment you are essentially giving matlab the command: fname = sin(x) which is trying to evaluate the function sin at x and assign the numerical answer to fname. Which isn't what you want. You need to create the function handle then pass that in, like: function out = myfun(f_handle,a,b) out = f_handle(a) + f_handle(b) end And use it like: f_sin = @sin % Create the 'sin' function handle myfun(f_sin,0,pi) You can make function handles from a lot of simple built-in matlab function by just going handle = @name such as sin,cos, etc. You can make your own using anonymous function such as f_handle = @(x,y) (e^x + e^y) Or by declaring your own more complex functions in a separate file and using @.
I'm still a little confused on this. If I'm trying to pass it in as an argument, can I define the function in the command line somehow, as opposed to writing it out in my function? As far as I understand, this shows me how to define a function handle within my function, which isn't what I'm trying to do. Or I'm just really slow. Could you give me an example of that? Like defining it in the command line and then using that in the actual myfun.m somehow. Thanks for your help and patience! I really appreciate it.
Speed to an extent. The measurement matrix is on the order of 15000x6000. Though, that first number will likely go down. It was a first pass and I think the theory I was using to build it has a different regime when the sample size is as high at 6000 (my use is a bit different and there is less literature. Also I need to spend some more time learning and understanding the proofs so that I can Better adapt it) I would love to reduce the number of iterations so I guess speed is more of my issue. For my particular use, I also have a good guess at a solution I thought I was using as a starting point but I just figured out that something isn't working and it isn't using my guess. (But if I spend any more time one it tonight my fiancée will be pissed so it'll have to wait). 
Happy to help. The code: &gt;function out = myfun(f_handle,a,b) &gt;out = f_handle(a) + f_handle(b) &gt;end basically says, give me a function handle and 2 values, I will evaluate the function at those points and add them together and return the result. So you have to construct a function handle first and pass it in. Like: &gt;f_sin = @sin % Create handle to MATLAB sin function &gt;myfun(f_sin,0,pi) % Pass handle into myfun or &gt;f_cos = @cos % Create handle to MATLAB cos function &gt;myfun(f_cos,0,pi) % Pass handle into myfun or if you want to make your own function handle: &gt;f_my_own_function = @(x) (exp(x) + 7*log(x) + 8) &gt;myfun(f_my_own_function,0,pi) % Pass handle into myfun By going @function_name (like @sin) you are saying look for sin.m and convert it to a function handle. In this case Mathworks wrote sin.m and you are making a handle to their function. If you go @(x) (blah) you are saying create a custom anonymous function in 1 line and give me the handle to it. 
You can't define a function on the command line, but you can make a function handle of an existing function on the command line. You would want to call your function like this: out = myfun(@sin, a, b); The problem in your code is that you are defining "f" as f(0). For an anonymous function with a single input, use: @(x) fhandle(x) But note that you don't need to use an anonymous function here. Check to see if the user passed a function handle or (if you want to allow it) the string name of a function (e.g., @sin or 'sin'), then use the function handle (or feval to allow function handles or string names of functions) in the print statement. function myfun( fname, a, b) if ~isa(fname, 'function_handle') error('First input must be a function handle.'); end fprintf('%f\n', fname(a), fname(b)); end Or, to allow strings: function myfun( fname, a, b) fprintf('%f\n', feval(fname, a), feval(fname, b)); end
Insert obligatory 'feval' danger rant :P
I would recommend starting with Iterative Soft Thresholding (IST), as it's dead simple, pretty effective and you can spin your own in ~4 lines. You just alternate a soft threshold on your guess with a gradient descent step. Your matrix doesn't seem that huge to me, so you should be ok. If you want speed one thing that will help a lot is if your matrix has some structure you can leverage to make it faster - i.e. if it's an FFT, or you can represent it as sparse in a certain basis etc. Then you can write multiplication by the matrix and its transpose as some function handle that will run faster than naive matrix multiplication. Once you're getting the results you want/expect then you can move to something more complicated. I've been happy with TwIST, myself. If you can formulate a pseudoinverse of the matrix you might like GAP. 
To the best of my knowledge, feval is no more dangerous than constructing a function handle out of whatever the user passed and running it on the variables the user passed. To be safe, in either case, the inputs should be checked (in OP's case, a and b should be verified as numeric--presumably double--and fname should probably be verified as a math function); however, if OP is using the function for personal use and not planning on making it a user-interactive part of a distributed project, it's probably safe enough for his/her purposes. Eval would be a different story, since it can have lots of unintended/malicious effects, but feval isn't too bad, in my opinion; if there's a reason it would be more dangerous than evaluating the function handle directly, I'd be interested in learning. 
Mixed up my feval and eval. You're spot on, its will capture any user errors in the same way as creating a handle.
[Read this](http://www.mathworks.com/help/matlab/creating_plots/using-high-level-plotting-functions.html) Graph x and y from 0-t time. t = linspace(0,10,100); // Generate 100 points between 0-10 (e.g.0-10sec) y1 = vy*t-1/2*gt^2; x2 = vx*t; plot(t,y1,x2,t); // This will plot in one graph t,y1 and x2,t or plot(t,y1,t,x2); // This will plot in one graph t,y1 and t, x2 first plot will show x movement over time horizontally and y over time vertically. (Axis may have a problem). Normal graph would be second one. Graph it 
I will read about this thanks 
So what part are you exactly stuck on. Are you having troubles getting all 15 or so trajectories calculated? Are you having issues plotting all 15 of them?
Hey! This works! Thanks so much for the help.
Yes, OP, what is Cody? ..and why do you assume (or do you know) that .m files will run in this language? I'm not sure many of us here can help you if your problem is getting your MATLAB function to run in a different language, sorry. OP: can you put 4 spaces before your lines of code so that they format nicely It's easier to read that way, thanks.
That doesn't really make sense to me, maybe you could elaborate. OP has in his while loop the prompt "Please enter an age between 0 and 120: ". This corresponds with a range specified by 0&lt;= age &lt;= 120. Your condition (age&lt;0) || (age &gt;120) contains negative ages. Edit: It was pointed out to me that there is an end statement following the input call, which I missed. Got it now - I was under the impression that the loop was intended to continue until an improper age was supplied. 
&gt; Yes, OP, what is Cody? https://www.mathworks.com/matlabcentral/cody/ I'm actually shocked that neither of you know this since it's not only in the side bar but comes up often when people want resources to practice Matlab. &gt; and why do you assume (or do you know) that .m files will run in this language? Because it's run by Mathworks as a tool to improve your Matlab coding? 
What do you mean you can't save the function? There should be a huge box where you submit your code. http://i.imgur.com/X1lRP1Q.png Put your code in the big text input area. I'm not sure where you're even trying to enter the code. Hit submit, it should work. Some functions don't work because Cody doesn't have all the toolboxes installed but ````power```` should be built in. ````&gt;&gt; which power built-in (C:\Program Files\MATLAB\R2012b\toolbox\matlab\ops\@single\power) % single method```` 
lol - got it. thanks. &gt;Cody™ is a MATLAB Central game that challenges and expands your knowledge of MATLAB. I don't normally code MATLAB for fun, so I didn't know this existed. But thanks for the DVs for me and Lazer as you've [complained about them before..](http://www.reddit.com/r/matlab/comments/2lj7z4/would_the_cowards_behind_the_downvotes_step_up/). Way to help be a solution to the problem.
You've got 12 ordered triplets (x,y,z), all of unit length, and you want to graph them normal to the sphere? Can you calculate what the plane is that would be normal to the sphere at a given point, or is this where you're stuck?
We were just able to finish it with some help from a classmate! Thank you for taking the time answering!
To be honest, MATLAB is completely new to me, and I only need it for this one figure in my thesis. I got as far as defining the variables I need. I looked at a command called surfnorm. Is that what I need? Because when I used it, it certainly didn't produce what I wanted, but maybe I did it wrong...
Lol, Drexel.
You will want to use the "find" function (specifically find(A&gt;1) and find(A&lt;0)) which tells you which indices of A correspond to values not in [0,1]. Then you can assign those values to equal "nan" (you can literally type something like A(1)=nan; and if you run: A(1) the output is: ans = NaN 
How did you call [surfnorm()](http://www.mathworks.com/help/matlab/ref/surfnorm.html)? You may also look through [how you can modify the plot](http://www.mathworks.com/help/matlab/ref/chartsurface-properties.html) (when you get to that point).
Fair enough, thanks for the explaniation. Also, for the record, I didn't DV you here. I reserve those on this sub for repliers who will just spew out a HW answer with no regard to an OP's comprehension.
Okay, so I did the following: [F,G,H] = sphere(200); X = [(co-ordinates go here)]; Y = [(co-ordinates go here)]; Z = [(co-ordinates go here)]; U = [X Y Z] [Nf,Ng,Nh] = surfnorm(F,G,H) Those are the variables I thought I'd need. I thought I'd do the quiver3 from [U] to [Nf,Ng,Nh] but it didn't look at all like what I wanted. Also, I need to make the sphere white, and the guide I used was really unclear about how to make a purely white surface (lines and faces)
You're overwriting Y for every iteration. 
&gt;Also, I need to make the sphere white, and the guide I used was really unclear about how to make a purely white surface (lines and faces) Well... the background of your figure is white (at least mine is by default), so how can you see your sphere? Unless the sphere in your case is secondary.. At any rate, here's how I made a blue sphere: sphere(100,'FaceColor','b'); That last argument can also take on RGB triplets.. Now.... What I'm guessing your figure displayed was: a) a rainbow sphere from -1 to 1 on all 3 axis b) red arrows at (what seems like) every sphere vertex I fooled around a little with Nf, Ng, and Nh (your outputs from surfnorm), and you can zero out those which you're not interested in. For example, if I didn't want the 40th through 60th normals, I tried this: nf(:,40:60) = 0; nf(40:60,:) = 0; for all three variables. I then executed this: surf(sx,sy,sz); hold on; surfnorm(nx,ny,nz); And got a similar shape, just with some of the normals missing (what I assume to be in the 40:60 range). Ultimately, what I think you'll need to do, is zero-out all the Nf/Ng/Nh normals that you don't want. This seems like a *REALLY* long way to do things, so you may keep asking around or hope someone else has a better suggestion.
I'm looking to show the stationary points, not the roots :) Will give that a go though, thanks.
Thanks for your help! I was thinking. What if I just had arrows going from the origin to the points in question? Since they all lie on the sphere, they will be normal to the surface of the sphere by default. So basically, I'm wondering now if there's a way to automatically draw 12 arrows from the center to 12 specific points?
Found him.
If that's the way you want to display, I don't see any problem doing so. I think you'll need to use [plot3()](http://www.mathworks.com/help/matlab/ref/plot3.html), but I don't see why you can't make 12 vectors starting from the origin ending at your end points. If your end points lie on the sphere, then you will want to work out how to make them a unit+0.5 in length, not just unit length (the radius); you want the arrow part to show *just a bit* past the sphere boundary. Hell - I haven't tried, but I bet this might work, and be what you were after using surfnorm(). Use sphere() to make your sphere, then plot3() each vector. You'll have to use "hold on" command to plot things over things. What I *think* is going to come out of this is a unit sphere and the normal lines (ONLY) coming out of the points your specify. I think the tail of all the lines will be obscured if a) you have a non-transparent sphere and b) you make your sphere first, then all 12 lines.
If you know the points of your stationary points (but they're imaginary), you can use [real()](http://www.mathworks.com/help/matlab/ref/real.html) to get the real part and evaluate your polynomial for that x, and finally plot that single point. EG: xval = 0:0.1:100; statpts = % xvalues for your stationary points usercoefs = % your coefs in decending order yval = polyval(usercoefs,xval); ystat = polyval(usercoefs,statpts); hold on; plot(xval,yval,'-r'); plot(statpts,ystat,'*b); This will make a red line trace of your polynomial and plot in blue the stationary points. If you want displayed by that point some text, [here's some examples](http://www.mathworks.com/help/matlab/creating_plots/add-text-to-specific-points-on-graph.html) using the [text()](http://www.mathworks.com/help/matlab/ref/text.html) function.
When I go into uni tomorrow, I'll give it a try. Thanks for all your help :)
That's worked great, thank you!
mu = mean(mean(A)); Vartot = mean(mean( (A-mu) .^ 2)); will give you the answer. but as others have said the matlab isn't your problem.
I think you create a loop where at each iteration you: * change the [view](http://fr.mathworks.com/help/matlab/ref/view.html) from which the plot is shown * grab a frame with getframe() At the end of the loop you can create an avi movie from the collection of frame with [movie2avi](http://fr.mathworks.com/help/matlab/ref/movie2avi.html). (check this link, they provide a code example) 
[Here's an example creating a .gif](http://www.mathworks.com/matlabcentral/fileexchange/35251-matlab-plot-gallery-animation/content/html/Animation.html). Also, google is your friend..
Well.. It's not easy to express myself in English because it's not my native language. Can I just use 2(maybe nested) for loops to get the sums calculated ? I started using matlab last friday so this is pretty new to me. 
Yes I'm sorry my description did not say enough. I forgot to write some things. I found someone saying you can use magic() for the matrix then var(). Will that also give the same answer?
How?
dbstop if error If I recall correctly. Check the documentation for dbstop and it will tell you for sure. 
Cheers
[Goolge it?](http://lmgtfy.com/?q=matlab+read+image) I don't like being so curt, but a three word google search gives you information to a function you could use.
Have you looked at the documentation? What does it say about taking a sum? 
What languages has your class been using?
There is a function called [sum()](http://www.mathworks.com/help/matlab/ref/sum.html) that will take the sum along a particular direction. Two calls to this and you've got your summation.
Oh, right. The paper we got said "You can use more than one for loop" but i guess I don't need one. 
Yeah I will look at it. I just started at uni a this autumn so the way you study is still not something I'm used to. We don't really have contact with our professors/lecturers at all except on the lectures but with so many people theres no time to ask anything. I have actually never seen 2 sigma notations next to eachother before. 
use imread to load an image. use edge to find an edge for fitting. failing that use ginput to manually select a few points. This is all fairly simple stuff, as said a google search throws up a lot of stuff, for example: "curve fitting image matlab"
Make a loop for changing the axis view on each iteration and saving the resultimg image with a filename that changes with each iteration as well. Then plug it into some video maker
Try/Catch was what I wanted on this occasion, but this is going to be very helpful in the future.
post what you have, because this is impossible to follow.
Thanks for responding. I added clarification above in code form. I would like to avoid the for loop. I am updating some old matlab code and I have a more complicated version of something like this embedded in two additional for loops.
Agreed.
I had the same concerns - magic() will still make *a* matrix, and var() we know. I found the suggestion of magic() odd as well.
I actually don't know if we can use the built in functions. I've had programming in c++ and java before so this is not to teach programming, It's to teach matlab(Apparently every engineer uses matlab everyday during work?). This course is just stupid in my opinion. They assumed we've completed atleast linear algebra before but none of us have. Right now all we got is single variable calculus. 
Edited... I feel stupid, I should be able to use the suggestion /u/diracnotation gave. I probably just misunderstood the task.
If this is a course to learn Matlab, you should *get an idea*. This is pretty basic Matlab syntax. It's also not hard to just try things out in the console to figure them out. Surely it's easier than asking people on the internet to explain it to you in a language you're not comfortable with.
Just Matlab, I've done some Java in the past but it's not really applicable here. 
Yeah trying is not something I can do really. This is a fast paced course so we have 7 weeks to learn matlab (make the 2048 game + an algorithm that plays the game and gets high scores every time). I figured it out though. Sorry for taking your time by being stupid haha :)
You can't try it? That's absurd. Being able to try things in the console is one of the largest strengths of Matlab. In the same number of keystrokes it took to say "trying is not something I can do really", you could have just typed your code into the damn console and *saw what happened*. If you refuse to try things and figure them out, and instead rely on something or somebody to tell you what code is going to work without any testing or trying, you're handicapping yourself badly, and you'll find yourself far behind the rest of the class very soon.
Just learning methods, we've done one problem in matlab where we computed a few integral approximations using the composite trapezoidal rule.
... i didn't mean I can't try anything. I mean I can't just sit and do trial and error until something works, it'll take too much time. And no.. I will not get behind in class, I do things before I have to. You never know when you get stuck. Also, Now I've got a REAL question for you if you are willing to answer :) I read in the doc that ".^ " is Array power and " ^ " is matrix power. What does matrix power do? If i use the matrix [1,2;4,5] " .^ " gives what i expected [1,4;16,25] but " ^ " gives [9,12;24,33] why?
I'm not advocating trial and error. I'm saying if you want to know why mean(A(:)) gives the same result as mean(mean(A)), you could see what A(:) produces on the command line. That should tell you why things are happening. Programming isn't just finding the right magical incantation to get you the answer. Things happen for reasons, and you can learn those reasons. Matrix power: have you done any matrix multiplication in your math classes? If A and B are matrices, how do you calculate the matrix product A*B? How is it different from multiplying the elements of A by the corresponding elements of B? 
It helps to have done some research first and come with ideas as well as questions. Nobody wants to do people's homework for them.
Yes I probably should have tried A(:) in the cmdline. I have not done matrix multiplication yet. That's in the linear algebra course (At least in sweden) so I guess I can skip that.
Run the profiler to see where it spends significant time. 
I'm not aware of a `return^2` keyword. I would just pass back a flag from your nested function that indicates completion.
you could define two variables outside the while loop to keep the new and old values: tnew = 1; %to ensure that the loop runs at leat once% told = 0; tsr = 0; while tnew - told &gt;= 1 %do calculations here% told = tnew; tnew = tsr; end This is assuming that the values are going to converge otherwise it will be stuck in an infinite loop. You can add a count variable just in case. Hope this helps. 
Omg, I spent 2-3 hours making my own code, and now you tell me :P. Haha thank you very much, it works perfectly!
Do you have the [mapping toolbox](http://www.mathworks.com/help/map/index.html#map-display)? There are several relevant functions there. If you don't there's a free mapping toolbox called [m_map](http://www2.ocgy.ubc.ca/~rich/map.html). I use m_map myself.
Depending on what you need to do "exit" might work. This will quit matlab though, so won't be appropriate unless you don't need to do anything else. Using a flag is what I usually do. Something like what you wrote out, but make sure that your parent function has access to the flag you set in the child function. You may need to declare it as a global variable, or have your function return it explicitly, or attach it to a graphics object (for example a figure's UserData field).
Thanks! I'll check it out. We're doing genetics work, and I just needed to show where we got our samples. The other graphs and such were easy. There's just a lot of samples and I didn't want to do it by hand. 
Thanks
Thanks
So there are two problems here really. The sub function performing its duty and determining if the main function needs to keep processing based on the result of the function. The "best" way to handle this depends on what the function is doing. If you are exiting out of the main function if the sub-function returns an error, make the sub-function throw an exception if it encounters an error condition, then put everything in the main function in a try-catch block. When an exception occurs, execution jumps straight to the "catch" block. If you want to exit the main function if the sub-function succeeds but a specific event occurs, you have some options. These are the main ones I would consider: 1. Return both the requested data and a status flag, then test the status flag. Put the data first in the list of returned values so that it is an optional item. 2. Return a struct holding data and the status flag. Test the status flag member 3. Wrap your functions into a handle class object with a property tracking the status of the function call. Reset this flag at the start of each function call and update it as it executes. You can return from that function just like any other function, then check the status flag set in the object. 
Ok you have helped me see the issue. I am translating some very poorly written code from VBA to Matlab. I am trying to mimic goto calls in vba with nested functions. I should just rewrite the code so it works like functions are suppose to work. Thanks
You need to return a pass fail. [result, success]=nestedFunction(args); if success==0 return end
Can you just use the derivative block?
yeah plot and plott should be good enough unless you want to go into 3 dimensions
The patch command is a very flexible low level graphics function. First you need to set up an array of vertices. It will be four rows, with one 3D vertex in each row. I'm to lazy to calculate where the vertices of a tetrahedron are, so this will be a weird looking slanted tetrahedron. You can look up the right coordinates to describe a regular tetrahedron somewhere else. v = [0.0, 0.0, 1.0; % the top vertex, this will be black 1.0, 0.0, 0.0; % this vertex will be red 0.0, 1.0, 0.0; % this vertex will be green 0.0,0.0,0.0]; % this vertex will be blue We'll store the colors of each vertex in RGB format in another array. This array will have four rows, one per vertex, each storing a RGB color c = [0.0, 0.0, 0.0; % black 1.0, 0.0, 0.0; % red 0.0, 1.0, 0.0; % green 0.0, 0.0, 1.0]; % blue Next you need to tell matlab how to connect these vertices into triangular faces. We'll store the faces in an array with four rows, with one triangle per row. Each integer in this array represents one of the vertices in the array v. f = [2, 3, 4; % this is the bottom red green blue face 1, 2, 3; 1, 2, 4; 1, 3, 4;] Now we use the patch command to tell matlab to draw it. tetrahedronGraphicsHandle = patch('faces',f,'vertices',v,'facevertexcdata',c,'facecolor','interp','edgecolor','none'); axis equal; drawnow; Let me explain the parameter/value pairs that go into the patch function. The faces are stored in the array f. The vertices are stored in the array v. Next we want to attach some data (our colors c) to each of the vertices, we attach it using the facevertexcdata property. Then we tell matlab to color the faces (facecolor) by interpolating (interp) based on the data we provided (our colors). Interpolated coloring means the colors should vary smoothly across the face like you described. Last we use the edgecolor property to tell matlab not to draw lines across the edges. If you want lines, you might change this property to 'k' for example (to draw black lines). That should be it! I don't have matlab on my laptop, so please forgive me if this doesn't work. I'm not sure if you're allowed to put comments on every line when defining an array like that. So if it doesn't work, try deleting those comments (the percent signs and everything on the line after them).
I definitely understand that, and hope I didn't give that impression with my original post. I've been working on it, and I believe that I have the problem solved except for one part. We are required to print a table with the coefficients of the spline function, I used the built-in matlab spline function to graph the curve, but I can't seem to find a way to print the whole polynomial.
It'll be faster if you'd use vector and matrix modification instead of running a for loop, however this is not always possible. As suggested, you might want to look at other languages. 
Whoa, I didn't realize VBA had gotos... that's disturbing. But yeah, it sounds like the VBA script is spaghetti code. Odds are it'd be worth refactoring or rewriting entirely. 
I can post the code if any of u want it, but first I will have to make it more presentable..
You should have a fit object in your workspace. You can get the coefficients by typing: &gt;&gt; my_fit.a Or b or c or whatever your coefficients are. If you cftool you can do all this interactively.
Instead of giving my example, take a look at [theirs](http://www.mathworks.com/solutions/?s_tid=gn_sol)
It depends on your job. I use it for post processing simulation results (I'm an EE) because it can read in data as standard text files so it is independent of what simulation program I happen to be using on a specific project.
Well, in my direct surroundings (research in a University) Matlab is used a lot for image processing (for example finding the position of a needle tip in a 3d CT image). Or for modelling certain processes. I also know that Simulink is used a lot for models and controlling robots but I don't really have experience with that... Why do you ask?
is there any particular reason you want to learn mupad? i tried using it for a few months and ended up caving and buying a mathematica license. maybe i didn't give it a fair shake, but man, i'd say there are better tools out there for symbolic math.
Interesting.. How does keypressfcn and currentcharacter works ? I can't find them in the help documentation in my Matlab.
I'm basically working on a small project to implement and visualize various bezier curve algorithms in Matlab. So far, the only thing I've encountered for this purpose is MuPad. Any other suggestions would be welcome. 
is there a reason you need symbolic math? or am i misunderstanding the purpose of mupad/your application? sounds like something you might be able to do without mupad.
I'd basically like to end up with something like this: https://en.wikipedia.org/wiki/File:BezierCurve.gif This is just one of the many algorithms I'd like to animate. Are there better ways to go about it than using MuPad ?
It's a figure property that you set. Here's an example: h = figure(); f = @(h, x) figure(h) &amp;&amp; plot(sin([1:.01:5]*x.Character/10)); set(h, 'KeyPressFcn', f); It generates a slightly different plot on each key press, depending on which key you press. 
So, I think that graphic was made when MuPad was it's own standalone product. MathWorks has since bought the company that made MuPad and folded parts of that product into Matlab as a symbolic math toolbox. MuPad back then was more of a general purpose computing system, sort of like Matlab or Mathematica (probably closer to Mathematica). It's now exists in a more limited scope. You might want to look into bezier tutorials in Matlab. (maybe something like this? http://www.alecjacobson.com/weblog/?p=3754)
Well... one idea might be to contact the person who made that .gif. It seems he did it in MuPad himself. As the other replier suggests, do you have to do this in MuPad? You could simply script this up. Do you know the maths theory behind your Bezier Curve?
Yes, the math behind it is quite straight forward. Do you mean to say I could do this in Matlab without using MuPad at all? 
&gt;Do you mean to say I could do this in Matlab without using MuPad at all? Yes. My understanding of MuPad (never used it myself) is that it's just a symbolic wrapper around MATLAB scripts/functions. If you can code up a script to do this yourself, that's the route I'd take.
When you have to work with an existing Matlab codebase/libraries that you abso-positive-lutely cannot port to a real language. Else, you suck it up and use NumPy/SciPy.
Grow up?
As u/Skeeto said, they're figure properties. You'd likely want to use the keypressFcn to listen for particular key presses (e.g., the arrow keys) and move the piece within a rule set (i.e., wholly on screen, not overlapping another piece, not yet set on another piece or the bottom of the field) whenever a key is pressed. Alternatively, you could add a listener to the CurrentCharacter property's post-set. I'm not sure what the relative performance is, though, nor how each stacks with pause/waitfor. 
So I was thinking about this on my drive home today. **(a)** Is MuPad converted to "typical" MATLAB syntax, and then computations done? **(b)** Or are MuPad and MATLAB mutually exclusive in the respect that the next "level down" to binary for each is the same? To put this another way, consider MuPad is French, MATLAB is Spanish, binary is English: **A)** translate French to Spanish to English **B)** translate French to English **apart from** translate Spanish to English This is *ALL* to compute a linear system (or some application of the like) via one method vs. another.
I am a scientist at NASA, and we have three camps of people here: those who use Matlab, and those who use IDL. The remaining group, small, but growing, are those who use Python. I use Matlab on a daily basis, making plots doing simple analysis, processing a bunch of files, whatever. A lot is great for just that – – however, you always have to have an Internet connection in order to contact license server. Unless, you have a standalone license. The licensing for Matlab is extremely expensive -- so investing time and learning matlab might mean that once you graduate, or move to a different job that doesn't use Matlab you're losing the invested time. if you know that you're going to remain in an academic environment, or a government environment for a long period of time – – where you will have consistent access to licenses, there's no reason to do anything else. however, if you plan to work for a private company, or a small research group with limited funding, then you might want to invest in python instead. 
I work for an automotive company. I will often get data from vehicles and pull it into Matlab for analysis. The automotive industry is also moving very heavily toward developing control algorithms in Matlab/Simulink/Stateflow, simulating them, and then having Matlab generate the C code that runs in the car.
OP - hear MeowMeow's words, but don't listen to them. Matlab is not a 'real language', and nobody will try to tell you otherwise. Scipy and Numpy are awesome, and nobody will try to tell you otherwise (at least, not on my watch!). The truth is that when you know how to use both well, you will find yourself going to the tool that works best for the job at hand. As a mathematician working in biophysics, I live on the border where elegance meets practicality. When I am writing my own models for some whacky biological process, I need to be able to quickly code up some ODE's (Matlab), visualize some experimental data (Matplotlib), and attach some PDE to deforming geometries in COMSOL. I assure you that the structures I am trying to understand don't give a damn about the 'language' that I am using to study them, nor do the publishers. I care what language I am using (I'd write everything in Python *if it made sense!*), and that is mostly because when I am stuck on something I need to be able to lean over to a colleague and ask them what the hell is going on. You should read that as: **Learn and use what your colleagues are using** (which is of course preceded by: **Make sure you're not the smartest one in the room!**). 
http://www.mathworks.com/help/matlab/ref/polyfit.html
identicalParticle thanks for the help. This gets me pretty close to what I want, except that the interp only fades the colors into each other and does not follow additive color rules, such that Red + Blue = magenta and Red + Blue + Green = white. I sat down and recalled my trig to determine the xyz coordinates for the center point of each faces and the mid point of each edge, in addition to the vertices. I then faced the correct colors that I want with each point. I then defined each face with seven points (3 vertices, 3 mid edges, and the face center), However clearly this is not the correct syntax, as you can see if you run the below code. v = [0, sqrt(3)/3, sqrt(3); % the top vertex, this will be black 1, 0, 0; % this vertex will be red 0, sqrt(3), 0; % this vertex will be green -1, 0, 0; % this vertex will be blue 0,sqrt(3)/3,0; % this will be white center 0.5,sqrt(3)/2,0; %this will be yellow bottom mid egdes -0.5,sqrt(3)/2,0; %cyan bottom mid egdes 0,0,0; %magenta bottom mid egdes 0,sqrt(3)/6,sqrt(3)/3; %MID FACES dark magenta 0.25,5/12*sqrt(3),sqrt(3)/3; %MID FACES dark yellow -0.25,5/12*sqrt(3),sqrt(3)/3; %MID FACES dark cyan 0, 2/3*sqrt(3), sqrt(3)/2; % Mid edges dark green 0.5, sqrt(3)/6, sqrt(3)/2;% Mid edges dark red -0.5, sqrt(3)/6, sqrt(3)/2]; % Mid edges dark blue %Color of the vertices c = [0,0,0; % black 1 1,0,0; % red 2 0,1,0; % green 3 0,0,1; % blue 4 1,1,1; %white 5 1,1,0; %yellow 6 0,1,1; %cyan 7 1,0,1; %magenta 8 1,.5,1; %dark magenta 9 1,1,.5; %dark cyan 10 .5,1,1; %dark yellow 11 .5,1,.5; %dark green 12 1,.5,.5; %dark red 13 .5,.5,1] %dark blue 14 f = [2, 3, 4, 5, 6, 7, 8; % this is the bottom red green blue face 1, 2, 3, 6, 11, 12, 13; 1, 2, 4, 8, 9, 13, 14; 1, 3, 4, 7, 10, 12, 14]; tetrahedronGraphicsHandle = patch('faces',f,'vertices',v,'facevertexcdata',c,'facecolor','interp','edgecolor','none'); axis equal; drawnow;
Thank you, polyfit seems eaier
Thank you for responding. shrunk it down to one if statement. I am not entirely sure why ffta is started from the second entry, this is not my code. My code is only the wrapping. I.e. getting the code to process the whole document instead of one column at a time. 
What do you mean by "interactive" and "increase in increments"? Are you after a video of some sort showing your data?
What do you mean by "build up in steps?" Is the plot changing over time? If so, how does it change? By 'how', I mean is it something that is replotted with new data, or new equations, or different views or what is it you're wanting?
If you absolutely need to do it this way, use [eval](www.mathworks.com/help/matlab/ref/eval.html). 
Ahhh, that makes sense. So there are a few ways you could go about this. Depending on how many intervals there are, you could create a loop that calls the first data set, plots it, saves it to a video file using the 'videowriter' function, then repeats the loop for each subsequent data set. Do you have data from all intervals organized in a single matrix or one for input, one for output already?
Is there a drawback to this method? I'm not understanding why it would be only if he absolutely needs to... in the loop with increment i, if isnan(eval(myvars{i})) == 1 then do whatever operation you need
You can take the output from *whos* wout = whos; 157x1 struct array with fields: name size bytes class global sparse complex nesting persistent wout(&lt;idx&gt;).name Will provide a string of that variable's name (for whatever &lt;idx&gt;). I think you'll still have to utilize eval() as other's have said. See [here](http://www.mathworks.com/help/matlab/ref/genvarname.html) about generating variable names. I've not tried this genvarname() so I'm not sure of how it works or if it will work for you.
NoNaN(who) then use an 'assignin' to reassign the variable. If you run 'who' inside of the function I'm pretty sure it only returns variables in that function's scope. 
In general, eval is relatively difficult to create, difficult to parse during debugging, and can be difficult for MATLAB to optimize internally. It's probably the best thing for this case but this is a weird case to begin with. A more robust method would be to deal with the NaNs explicitly in the functions that define them in the first place.
I don't know if this is something you can use and you should really be fore specific in your question: figure(1); WinSize=50; OverLap=1; for z=1:OverLap:1000-100, window=zeros(1000,1); for i=z:1:z+WinSize, window(i)=1; end; plot(window); ylim([0 1.2]); drawnow; end; 
So, basically you want an "internalized" way to determine *Nheadlines*, *Delimval*, and the data structure: *'%n%n%n'* ?
&gt; If you run 'who' inside of the function I'm pretty sure it only returns variables in that function's scope. That's a good point, I think this would be the case as well.
Unfortunately I get this data as is - it's from data collection with a in-company data collection system. MATLAB seemingly can't handle the data type without adding a lot of NaNs.
Does the aptly named importdata() function not do what you want?
Basically, yes. I mean, clearly Matlab is able to do it because it does it when you use the UI. Maybe it's very complicated programmatically but I was curious.
What are you stuck with? Syntax? Logic? Can you show what you've tried so far?
Look into fgetl (). I'm on mobile or I'd link the docu page. I'd do a while loop with like a max num of 25. fgetl () until you get lines that appear to be the same form. They will be strings, so you'll have to do some MATLAB-fu to try and deduce the data structure in the file to input. Then you build your input format string. Or you could just fgetl () until eof and appropriate your data then.
I believe you need to declare a1(t)
If this works I will feel really dumb. I'll try it out tomorrow, thanks. 
55.2417
If a1 is a constant, then the chain rule is being applied correctly. MATLAB is producing exactly the format you said you expect (Although it appears you've used the chain rule incorrectly to get the '-' and the sin rather than cos). The differential of the function within the sin function (t) is 1. Try changing this to a function where the differential is not 1 and you should get something more like you expect. For your example application of the chain rule yields: a1\*t_dot\*cos(t) (where t_dot is 1)
Yes, it would, but you can use "evalin" on "who" to get a list of variables in the caller or base. "evalin" should come with the same warning as "eval", though--it makes code more difficult to read and debug. 
A suggestion for using eval: start by writing it as a simple fprintf, and only change to eval when you're certain the fprintf command is producing the proper strings in all cases (or at least a subset of test cases). You can save yourself a lot of hassle if you're careful. 
What are you processing the data for? Are you anticipating issues with this missing data (NaNs)? From my experience, NaNs are handled quite well in MATLAB. Some functions have nan*() analogues (mean and nanmean for example) and you can also use isnan() to flag and remove NaN data to some functions that can't handle NaNs themselves.
Ya, this **ISN'T** how you ask for help..
You could catch this error, or perhaps when your calculation exceeded 1e-15, and simply set them to a certain value. In your case, if you're looking at the differences, you could just set the difference to exactly 0 if you've caught a difference calculation going outside of your expected precision range.
There is no easy way around as Matlab uses double precision. The next step up would be quadruple precision (i.e. 128bit). There [is](http://www.advanpix.com/) a multiprecision toolbox for Matlab but I haven't used it and can't tell you anything about it. Edit: There is also a toolbox available on the [File Exchange](http://www.mathworks.com/matlabcentral/fileexchange/6446-multiple-precision-toolbox-for-matlab). You might want to try this out as well.
Could you artificially increase values to drop leading zeroes. Kind of like making your own float type with two variables, one for exponent and one for value?
You overwrite Re every loop. x = 1:5; for idx = 1:5 cool = x(idx) + x(idx); end This is similar to what you've got above. Each loop you calculate x+x and save it as cool, but you don't save EVERY value because you overwrite cool every iteration. To save all the 5 values in cool, I would want: cool(idx) = x(idx) + x(idx); Every instance where you're trying to build a function of (x,y) values, i.e. how does the heat transfer when one boundary takes temperatures from 20:40 C, you'll need to change your syntax from var to var(idx) so you build your **record** of calculations and not just do one calculation (the last one in your loop indexing). Your plots also will be showing one point, because currently as coded, v and L are just a 1x1 array each. When you change the indexing syntax, and try and call plot(v,L) you should see what you expect, L as a function of v, provided that they are both the same length.
and once you've done this, you need to take your plot function, and put it outside of your loop. 
^ this as well, OP. Thank, weed. OP, if you *do* want to keep your plot() command inside your loop and build/animate your plot step by step you can. After you modified the indexing, also index the plot() call: hold on; plot(v(ixd),L(idx)); and that will plot the current idx point while maintaining all previous points (with the "hold on" command).
I want a summation. There isn't an error exactly. I could simply set a value but I want the summation to continue. For example, [HERE](http://i.imgur.com/odXrXNS.png) is what I have now. Notice that once the blue gets below 1e-16, the red levels out. This is 100% in accordance with how machine precision works. It is adding values less than `eps` so it doesn't change. But if I could increase it, then it should continue to drop as well. Again, not super important but it would look nice. If this isn't possible, I will simply cut it or something
Is there a way you can transform your values to a higher order? Like, if you were using something that weighed 10^-9 grams, why not multiply that by 10^9 and your computations are now using nanograms and you are less likely to run into the precision issue.
Really? Let me quote my post: &gt;I looked into vpa but that is for symbolic stuff and isn't what I want. 
I *can* but it won't help. If the first value is 1, the machine percision is `eps(1) = 2.2204e-16`. If I multiply all values by 1e9, then the first value is `1e9` and machine precision is `eps(1e9) = 1.1921e-07` so the issue will percist.
Yeah. Try ylabel('$\|F\|_1$','interpreter','LaTeX')
Convert your calculation to operate on the log of your quantity. You're only looking for the exponential scaling so round off errors from log shouldn't be a problem. OR Separate different scales into different arrays. So you have one set of data for the values [1, 1e-9], then have a second data set for [1e-9, 1e-18], etc. then combine after the cumsum. 
What exactly do you expect us to do with this screenshot? Even if we wanted to type out all the code (hint: we don't), it doesn't even include all of it nor do you ask a question. Try again.
Assuming you mean compounding yearly (APY) (as opposed to continuously, APR). I will **not** write this for you. It sounds like homework. But I can try to help. Write it out on paper. Year 0: $20,000 Year 1: (Year0)*1.06 = $21,200 Year 2: (Year1)*1.06 = $22,472 [ = Year0*(1.06)^2] Year n: (Yearn-1) * 1.06 = ... [ = Year0*(1.06)^n] So two things should be clear. First is that the loop is pretty easy. You just repeat the previous, check if `year n &gt; $500,000` and break. Of course, it should also be clear from what I wrote that this can be solved analytically with some high-school algebra. (which is presumably how others go non-integer answers) Oh, and if you're interested in how this would work with continuous interest compounding, the formula is Final = Initial * exp( rate_in_time_unit * time_in_time_unit) Again, even simpler algebra should get you the answer. Finally, a few tips: * Use more descriptive titles. (I think that is why so many downvotes before people even look) * If you post homework, (a) say so and (b), show what you tired (reason for downvotes after reading) * If you're quoting a homework assignment, use "`&gt;`" to quote. The easier it is to parse your question, the more likely you are to get help.
monte carlo pi relies on the fact that, with uniform random sampling, the proportion of dots inside the circle to dots outside the circle will be the same as the proportion of the circle area to the square area. From that, with algebra, you can solve for pi. What is the area of the square your points are occupying?
hmmm. The log idea is interesting. Using the formula from [Wikipedia](http://en.wikipedia.org/wiki/List_of_logarithmic_identities), I still get the same issues. Though I may have missed something so I'll keep playing. The second idea may work. I will play with that and see...
I agree here. VPA allows for arbitrary precision calculations, so if you are concerned that double precision is not sufficient, then you likely need to use VPA to do the calculation with higher precision. It is not just about symbolic manipulations; you can do a numeric calculation: vpa('(1+sqrt(5))/2',1000)
`vpa` works on symbols. If you input into it number or doubles, it comes close to doing what I want. For example, if `A` were my vector of choice. I want to normalize `A` so that `sum(A)==1` and then I want to plot `1-cumsum(A)`. I do it all in a `vpa` call to ensure I do not previously convert. B = vpa(1-cumsum(A./sum(A)),50); Now, there are two issues. The first is that it *still* fails at the end. The end of the output looks like: 0.0000000000000024424906541753443889319896697998046875 0.000000000000000444089209850062616169452667236328125 0 0 0 0 0 0 0 0 0 0 (so while I am getting 50 digits, it is still losing the end). And, even if this did work, `B` is a `sym` object. Matlab can't plot `sym`. So, I can of course convert it to a `double` with `double(B)` and we're back to the same issue! **begin rant** I do appreciate the help of this sub. There is a lot of great advice and a lot of users are truly experts. I am happy to have this resource. However, being treated like an idiot is not helpful; especially when I didn't ask a stupid question and I noted that I am aware of the obvious "standard" solution. Honestly, your second reply was *actually* ever-so-slightly helpful because you elaborated that maybe I was incorrect. But a simple &gt; doc vpa when I **explicitly** mentioned that I tried it, is demeaning, condescending, and honestly in poor form. **\rant** 
Why does the machine precision change? That should be set in stone. The transform from 10^-9 to 1 shouldn't affect the precision of the analysis performed after (i.e. your calculations based in nanograms as opposed to grams). Maybe I'm missing something? Sorry, I'm not a comp.sci. by training, this just seems what *should* occur to me. *Edit: this (my thinking) is along the same lines of the log-method another user suggested to you. At least, that's what I was trying to get at.
Wow yeah I don't know how I missed that. Well, thanks!
I am not sure I understood exactly what you want to do. But if your goal is to interpolate a value, you can try using either: * [interp2](http://fr.mathworks.com/help/matlab/ref/interp2.html) for 2D data * [interp1](http://fr.mathworks.com/help/matlab/ref/interp1.html) for a line 
No worries. Based on the surface plot I created I want to find the density (y-value) when given velocity (x-value) and altitude(z-value). I've looked at using interp2, interp3 and interpn but not exactly sure how to format my function call. So if I have a velocity of 5500 ft/s and altitude of 78000 ft I want to use the surface to tell me what my density ratio is.
This should work: DayForm = 'long'; vector = [1:30]; [DayNumber, DayName] = weekday(vector, DayForm); DayName = strjoin(cellstr(DayName)',', '); disp(DayName) You can change the vector and it will output those days instead of the whole month. 
After thinking and replying to OP, I started to have the same feeling..
You want 2d interp (interp2()) for this problem. Here's an example of how I've done 2D interpolation before: data1i = interp2(lonOLD,latOLD,data1', ... lonNEW',latNEW,'cubic'); One of the **VERY** picky things about using the interp#() functions is that you have to be very careful about the dims of all the vectors/matricies invloved. For example, to get this working, I likely had to spend about 5 min transposing and un-transposing various arrays until I got the output that I wanted. Now, this takes one grid on lon/lat old and transforms it to a different grid resolution given by lon/lat new. I think you can query interp2() to interp only to one value, as opposed to regridding an entire 2d domain. But you might want to do the whole domain if you're curious to multiple (v,z) pairs that were not observed pairs.
I swapped your x and z axis and got something that looked more managable, from there I would probably give trigonometric interpolation a shot. function P = triginterp(xi,x,y) % TRIGINTERP Trigonometric interpolation. % Input: % xi evaluation points for the interpolant (vector) % x equispaced interpolation nodes (vector, length N) % y interpolation values (vector, length N) % Output: % P values of the trigonometric interpolant (vector) N = length(x); % Adjust the spacing of the given independent variable. h = 2/N; scale = (x(2)-x(1)) / h; x = x/scale; xi = xi/scale; % Evaluate interpolant. P = zeros(size(xi)); for k = 1:N P = P + y(k)*trigcardinal(xi-x(k),N); end function tau = trigcardinal(x,N) ws = warning('off','MATLAB:divideByZero'); % Form is different for even and odd N. if rem(N,2)==1 % odd tau = sin(N*pi*x/2) ./ (N*sin(pi*x/2)); else % even tau = sin(N*pi*x/2) ./ (N*tan(pi*x/2)); end warning(ws) tau(x==0) = 1; % fix value at x=0 Copy and pasted from wiki.
Ok, I will try to spend more time on interp2. It just seems that there should be an 'easy' way to tell matlab that I have x and z values, now look at the y value that lies on the surface.
I'm not sure what you mean. I replied to your post below, detailing where I think the problem is. 
If you're just looking for specific points and don't have a need to see the whole thing reinterpolated, you could iterate over N points to find, "find" it's would-be location in your current (discrete) domain, take its nearest 3 neighbors in all directions and now interp, that way you cut down unnecessary interp data that is far removed from your point of interest. This might be how matlab does interp2 internally anyhow ( it internally iterates and breaks a large domain into smaller ones).
The key is to realize what datatype you are passing to VPA. If you pass a formula that involves double precision numbers like: A = ones(10,1); B = vpa(1-cumsum(A./sum(A)),50) then matlab first evaluates the formula in double precision and then converts it to variable precision. You would want to do it something more like this A = ones(10,1); Asym = vpa(A,50); Bcorrect = vpa(1-cumsum(Asym./sum(Asym)),50); **EDIT**: Just run the above code and see there is a difference: &gt;&gt; Bcorrect-B ans = -7.3468396926392969184322357131092e-41 3.6734198463196484592161178565546e-41 -3.6734198463196484592161178565546e-41 7.3468396926392969184322357131092e-41 0 -7.3468396926392969263976952687715e-41 -1.4693679385278593852795390537543e-40 -2.2040519077917890775210356028483e-40 -2.9387358770557187699616686408339e-40 -0.00000000000000011102230246251565404236353415107 Now here the difference is small because the operation does not have much numerical precision error. But if you had a lot of numerical precision problems, then the answers could be quite different. 
You were right about the sum being supported. Not all things are. I tested the specific formula you gave, and the operations appear to be correct. My other reply might have the answer.
I see what you mean. I didn't use it that but, the way I did it uses the same principle and is just a lot slower. Something like B = vpa(1-vpa(A,50),50); for ii = 2:length(A); B(ii) = vpa(B(ii-1) - A(ii),50); end (I am typing that w/o test since Matlab is chugging away one something else right now and I can't run that). Thanks!
No problem, good luck with it.
How did I get into this field... Through the grace of many people over the course of several years. I bootstrapped good will at each step, from tutoring and grading papers for professors in my department to sneaking into a paid undergraduate research position. I stayed in that department for graduate school and offered to help write code or support our summer REU program or sub for a professor or another TA. I watched more capable students all around me miss out on these opportunities due to poor attitudes and general lack of rapport with the department. The most recent action I took to find interesting work was cold-emailing a bunch of principle investigators (PI's) at national labs looking for an internship. *I have an amazing PhD advisor*, and a handful of professors came to know me over the years and I was able to use my letters of recommendation to get my foot in the door in this new position. The only thing I did myself was to bring the patience. I was somehow able to find contentment in all of those intermediary steps (and I'm still at an intermediary step!), which I think is hard for many people based on what I see around me. 
I seem to have found the answer, it may be best to use glmfit, http://se.mathworks.com/help/stats/glmfit.html
Often times if you're doing anything symbolically, it's often best to do that by hand, and then and keep the computer doing numerical things. Just a general tip but your situation may be different.
My first thought is that this line might be throwing things off: h(5)=surface(xcone, (1.5*ycone)-1.3, zcyl, 'FaceColor', 'red'); You are combining the x- and y- for the cone with the z- for the cylinder. What are the sizes of these vectors? Does your code run to or past here? If it does run past here, it may return h(5) = -1 and when passed in through your set(h, 'parent', t); line, an error occurs internal to MATLAB when an object's handle is -1 (thus, it doesn't exist) but you are trying to assign properties to it.
Thanks for the help. What I ended up doing was do a spline fit for each velocity and density curve then finding the density ratios for my velocity query that lies on fitted spline curves below and above the point I'm looking for. Since each spline represented a specific altitude I just found the percent difference in my altitude query to find the density ratio. May not be super clear but just wanted to say thanks again.
If a numeric values is stored in A, then just substitute A with double(A), then it will be converted. I am not entirely sure why you want to solve such a trivial equation, however. And i don't see any attempts in the for-loop to solve anything?
In which line do you get the error: Error using mupadmex Error in MuPAD command: DOUBLE cannot convert the input expression into a double array.?
Permute is more explicit and easier to read. I'm assuming Bn are column vectors? Why not use something like: A = [B1,B2,B3]; A = reshape(B,[width,height,depth]); Then permute as required. EDIT: Here is a quick example: B1 = 1:16; B2 = 101:116; B3 = 201:216; A = [B1(:);B2(:);B3(:)]; A = reshape(A,[4,4,3]) A(:,:,1) = 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16 A(:,:,2) = 101 105 109 113 102 106 110 114 103 107 111 115 104 108 112 116 A(:,:,3) = 201 205 209 213 202 206 210 214 203 207 211 215 204 208 212 216 C = permute(A,[2,1,3]) C(:,:,1) = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 C(:,:,2) = 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 C(:,:,3) = 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 EDIT2: To see how this scales I've benchmarked the three solutions we have so far by taking increasingly larger square arrays. [Clicky](http://i.imgur.com/CAoiTiG.png) So my method appears to faster overall, I guess with only one call to reshape. Similarly permuting once is faster than transposing three times. Fortunately, IMO, the fastest method is also the easiest to read. Not sure what is going on with the discontinuities. Here is the code: cnt = 0; for n = 2:1000; clear A B1 B2 B3 C D cnt = cnt + 1; B1 = 100001:(100000 + n^2); B2 = 200001:(200000 + n^2); B3 = 300001:(300000 + n^2); tic A = [B1(:);B2(:);B3(:)]; A = reshape(A,[n,n,3]); t = toc; t1(cnt) = t; tic C(:,:,1) = reshape(B1(:), [n, n])'; C(:,:,2) = reshape(B2(:), [n, n])'; C(:,:,3) = reshape(B3(:), [n, n])'; t = toc; t2(cnt) = t; tic D(:,:,1) = reshape(B1(:), [n, n]); D(:,:,2) = reshape(B2(:), [n, n]); D(:,:,3) = reshape(B3(:), [n, n]); D = permute(D,[2,1,3]); t = toc; t3(cnt) = t; end plot(2:1000,t1,'b.') hold all plot(2:1000,t2,'r.') plot(2:1000,t3,'g.') xlabel('Array size $n \times n$','fontsize',16,'interp','latex'); ylabel('Time elapsed $s$','fontsize',16,'interp','latex'); legend(sprintf('A = [B1(:);B2(:);B3(:)];\nA = reshape(A,[n,n,3]);\n'),... sprintf('C(:,:,1) = reshape(B1(:), [n, n])'';\nC(:,:,2) = reshape(B2(:), [n, n])'';\nC(:,:,3) = reshape(B3(:), [n, n])'';\n'),... sprintf('D(:,:,1) = reshape(B1(:), [n, n]);\nD(:,:,2) = reshape(B2(:), [n, n]);\nD(:,:,3) = reshape(B3(:), [n, n]);\nD = permute(D,[2,1,3]);\n'),... 'loaction','northwest') 
I am assuming that you have a grid in the (x,y) plane and your antenna is sitting at (x=0,y=0). If we call dP the power radiated by the antenna through an small surface **dS** (vector), we can write: dP * = p(theta,phi).sin(theta).dtheta.dphi * = &lt;**S**&gt;.**dS** = &lt;**S**&gt;.**u**.r^2 .sin(theta).dtheta.dphi where p(theta,phi) is the radiation pattern, &lt;**S**&gt; is the time average [poynting vector](http://en.wikipedia.org/wiki/Poynting_vector) and **u** is a unit vector pointing outward from the origin. What you have to do is then to take all the points that make the contour of you 11x11 grid. For each point : * find the poynting vector at that position **S** = (Sx, Sy) * multiply by the unit vector at that position **u** = (cos(theta), sin(theta)) in cartesian coordinates * convert the catesian coordinates to angular coordinates (r,theta) for this point. You now have a list of angles Thetas and radii r * express the radiation pattern as pattern(theta) = **S**.**u**.r^2 * plot in polar coordinates polar(Thetas,pattern) Note: this supposes that you can compute the Poynting vector and not just the intensity. If the points are far from your antenna (further than a few wavelengths), you can assume that **S**.**u** = Intensity. This is not always true, use carefully. I hope this helps. Show the images you have if you can (intensity plot and radiation pattern)
Are you just looking to get an index into your interpolated matrix? If so, Matlab has built-in functions `cart2pol` and `pol2cart` to go back and forth. As an example: After you interpolate, I assume your matrix is bigger than 11x11. Let's say now it is 101x101 and presumably the center is at (51,51). So if you want to get the value nearest rho=10 and theta=pi/4 (in radians), you could do something like: [x,y] = pol2cart( pi/4, 10 ); x = round( 51 + x ); y = round( 51 - x ); my_value = my_interpolated_matrix( x, y ); The reason I switched +/- for x and y is assuming the data are stored so that they look upright when you view them with `image()` (in other words, to account for the fact that Matlab displays increasing x values as going to the right but increasing y values as going down, which is the opposite of how the Cartesian grid works only for y). Anyway, hopefully that's enough to give you a start if that's what you were looking for...
Something else to keep in mind if your data is complex: transpose will also take the complex conjugate, while permute won't.
You answered my question thoroughly. Thank you! 
Thank you! Good to know.
I've seen the same type of discontinues when benchmarking correlation coefficient calculations. Strange! 
Have you tried google? There seems to be a great toolbox for this on the file exchange...
Leaving aside whether the transpose is the best solution here, you can transpose without taking the complex conjugate by using .' instead of '
You're talking about [this](http://www.mathworks.com/matlabcentral/fileexchange/19218-matgraph/content//matgraph/html/matgraph/@graph/hamiltonian_cycle.html), right? I'm fairly certain that this is the brute force O(n!) method I was hoping to avoid. At the very least, its documentation doesn't claim any particular scaling with the graph order, at least as far as I can find. 
Thank you very much! I had to modify your code somewhat for my specific purposes but it works perfectly.
How about a while loop with two conditions instead of a for loop. While y(n) &gt; 0 and n &lt; length (t1)
Also watch your index values. In the function above you're writing values for n+1 but your if statement references y(n).
It would easiest to use a [delimiter](http://en.wikipedia.org/wiki/Delimiter) (like a comma) between values and then use [textscan](http://www.mathworks.com/help/matlab/ref/textscan.html) or something similar to parse it. For example: myinput = input('Enter 3 comma separted values: ', 's'); myvalues = textscan(myinput, '%d,%d,%d'); The `'s'` flag for `input` forces MATLAB to interpret your user input as a straing
Just copy your entire number set into microsoft word or textedit and replace "1" with "1," copy it back into matlab, and there is your vector. This is robust of negative values. Then compose a matrix out of your row vectors.
This is a very brute force way to solve a problem that is easily solved analytically, but I assume your goal is not just finding an answer, but using the technique. If you just need the answer use conservation of energy instead and you'll get a solution in about 30 seconds. If it's important to code it, be aware that the solution you've got here is extremely prone to quantization error, so your dt needs to be small enough. function [maxheight1] = dt1(x,y,vx,vy,g,t1,dt) y(1) = y; vy(1) = vy; x(1) = x; vx(1) = vx; % these lines are unnecessary - y(1) is already y, etc. for n = 1:length(t1) % what is t1? An array of time values? You only use it this one time. y(n+1) = vy(n)*dt+y(n); vy(n+1) = vy(n)-g*dt; x(n+1) = vx(n)*dt+x(n); vx(n+1) = vx(n); if (y(n) &lt; 0) break else continue end end maxheight1 = max(y(n)); end I don't see any obvious errors, but I can't run it right now because my Matlab is otherwise occupied. I think a little thought into your input variables would help, though; I'd go with a t0 (or just let it be zero) and track time with t = t(n) + dt. Also if you just need ymax you can stop when vy &lt; 0 too - you don't have to track the projectile all the way to the ground. Edit: ok, I ran your code as written and I get the right answer - what are your input values? I ran it as maxheight(0,0,10,100,9.81,[1:1000000],0.0001) and it works perfectly, though it's a bit inefficient. The only thing I had to change was your output line: maxheight1 = max(y(n)); will only output y(n), which has only one value - you want maxheight1 = max(y); which will return the max of the entire vector y.
There is a find/replace feature inside matlab too.
I'd do it by procedurally creating point masses in the appropriate torodial shape to start with. Sum the forces from all of the point sources at every point in time to affect your orbiting object which gas a given velocity and mass to start with. That should do the trick, but it will be slow. 
if you use a coarse enough mesh and do the summing of the force elements with matrix vector multiplication it shouldn't be too slow. Basically use the finite volume method (should be simple for gravity) to determine the bits of the torus (you can make it simpler by dividing up the torus into cubes and the assuming they're spheres, you won't the exact answer but that doesn't matter), and find the analytic force on the orbiting object. Then time step it.
You're already counting your iterations with n, why not use it as your index for your vectors?
Why do any of it and not do vector math?
Agreed. I was just pointing out 2 little changes OP could make to his existing code. I would vectorize myself as well.
Well, I don't quite understand why you need to only hit enter once, but here is how you do it, and have it stored in a vector of numbers instead of a cell array as happens with textscan: myinput = input('Enter 3 comma separated values: ', 's'); eval(sprintf('myvalues = [%s ]; ',myinput)); The eval(sprintf()) chain is super useful in general. 
This may be of some assitance: http://kitchingroup.cheme.cmu.edu/blog/2013/03/06/Boundary-value-problem-in-heat-conduction/ http://www.mathematik.uni-dortmund.de/~kuzmin/cfdintro/lecture8.pdf https://blanchard.ep.wisc.edu/PublicMatlab/BVP/BVP.pdf http://pauli.uni-muenster.de/tp/fileadmin/lehre/NumMethoden/WS0910/ScriptPDE/script1011BVP.pdf
To do matrix element-by-elemenet multiplication (and division, and exponentiation), you need to use a dot (.) prior to your astrisk (*). Also, 4 lines before anything that you want as code will display it as such and is easier for us to read your code. For example: myvalues(1)*X(1)+myvalues(2)*X(2) .... versus myvalues(1)*X(1)+myvalues(2)*X(2) .... It knocks off reddit's formating (we can see the * but in the non-4 spaces we see italics). TMYK... So, if you had gridded observations of temperature and pressure, you could calculate the density as: rho = p./(R_d*T) % === (1/R_d)*(p./T) &lt;--- alternatively You need the ./ to do elemental division of the pressure and temperature, but only the single * for the multiplication of the gas constant.
Sorry what do you mean by that?
To first (and probably, best) order, approximate the green curves as linear functions, determine where the lines intersect the circle. Do trig. Do geometry. Numerically, if the lines are something other than linear functions, interpolate the curve using some of the points on the curve to whatever power you wish. Generate N random numbers on your circle and count how many of those points lie above your polynomial, Call this number N_a. The ratio N_a/N is the ratio of the desired area to the area of your circle. Do geometry. Done. This is called Monte Carlo sampling.
Being pretty matlab illiterate I'm not sure what both those comments mean? How should I go about doing it if vectors isn't the best way?
Quick and easy: take the vars you want to plot and add indexing to them: varA = 5+3 varA(n) = 5+3 The first line will overwrite varA each iteration (currently what you're doing) whereas the second line will index the n-th element of your array (or make the n-th element, in this case). I mention how simple it is to add the indexing because your variable n is incrementing by one each loop, as would an iterator index. Edit: it appears that you overwrite t0 each loop. You could keep things as is and make another variable that will keep track of the t, or you could modify your code a little such that: niter = 0; while % &lt;while condition to evaluate&gt; niter = niter + 1; if niter == 1 t(niter) = %fun calculation with t0 in it else t(niter) = %another fun calc, this time using t(niter-1) instead of t0 end end
Ah- I didn't see that you're circle is done in polar coords. That may complicate what I was thinking. How are your "other lines" that you wish to calculate the area constructed? Are they observations you're importing to MATLAB or are they analytical functions that you coded up and had MATLAB calculate? And are these lines in polar coords or cartesian?
&gt;I was thinking maybe I should interpolate the data points that make up the magenta curve to create a function That seems like the way to go.
Cool, would that then allow me to use double integration, or is there a better way of doing it once I have created the function?
Don't see why you couldn't do that. Remember (at least I think this is true) that the difference between two integrals is really just the difference of the functions, integrated (forgive my use of S as the integration symbol): S f(x)dx - S g(x)dx == S ( f(x) - g(x) ) dx
A bit of analytical math would go a long way here. Derive the gravitational potential as an integral over the toroidal region, then use that potential function (or its gradient) to simulate particle trajectories. 
I would do something like this. I'm sure you could make a [PDF](http://en.wikipedia.org/wiki/Probability_density_function) for a single bag, then just use that info 6 times. E.g then it's a question of getting 189 &gt; bagA+bagB+bagC &gt; 1. This will come to a statistical approximation, but it'll be pretty good. EDIT: I did a quick statistical simulation: clc; clear all; bags = []; data = []; for i = [1 4 7 10 13 16] bags = [bags; 0 i:i+2]; end % All bags together. bags = [bags; bags; bags]; for i = 1:100000 % Does 100000 iterations, Monte Carlo. sums = 0; for j = 1:18 % Takes a random element from each bag. x = randi(4); sums = sums + bags(j, x); end data = [data sums]; end hist(data, length(data)); datastats(data') fprintf('Probability of %d-%d = %f\n', 1, 189, sum((data &gt;= 1) &amp; (data &lt;= 189))/length(data)); Also, the probability of getting a 0 is (0.25)^16, because each bag has a 0.25 chance of getting 0 and there are 16 bags. Also, the max is 189, and this has the same change. So the probability of getting 1-189 (inclusive) is 1-(0.25)^16 = a really really small number.
or effective?
Do you absolutely have to use an integration function under the curve? Could you just use the same 'straight line' approximation that you're using in order to approximate the area of each triangle that you create between two successive 't' intervals? Should give you the right answer. If you draw the triangle that you make between the two t values, the geometry is real simple! The base of the triangle you've drawn is the distance between the x and y positions of your successive t values. The height of the triangle is cosine of the half angle between two successive t values. Area of triangle is easy. Calculate it, then add up the area of all the triangles (for all the ts) and you have the 'inaccurate' circle area calculated. Then subtract from pi*r^2, and you have the area in between.
lazy. Why not just use Excel instead of Matlab? 
Like others have said, you'd start by defining some number of point masses that represent the torus. You can calculate the force on an orbiting object with Newton's Law of Universal Gravitation. Repeat that between the orbiting object and every point mass in the torus. Sum the forces, divide by mass of the orbiting object to get acceleration, then integrate to get the velocity and integrate again to get the position. Repeat until you can see the shape of the orbit. That's a general guideline. There are ways to eventually get the simulation to a higher fidelity model, but you should probably start here
Why use an external application at all?
As long as you're actually trying something there are no stupid questions here. &gt; Of course, the formatting of "myvalues(1)" causes problems. As you probably noticed, the output of `textscan` is a cell array. Cell arrays are [indexed differently than numerical arrays in MATLAB](http://www.mathworks.com/help/matlab/indexing.html), they use the curly braces `{}` instead of brackets `[]`. For your example you *could* do `myvalues{1}*X(1)`, but you'd be better off converting your cell array to a numerical array. MATLAB was built initially for matrix operations and it's very good at them, so you should use it when you can. As I mentioned elsewhere, this just takes another line to collect your cells into an array: myinput = input('Enter 3 comma separted values: ', 's'); myvalues = textscan(myinput, '%d,%d,%d'); anarray = [myvalues{:}];
How long did it take you to make that graph? i do not mean the time to code it but the time to actually run it? I mean, things are on the other of 0.02 seconds and you must have had to run a bunch of them! Or, is there a faster way to profile that I am missing? Either way, it looks really cool
What are you using to generate the files?
matlab's figure viewer- file-&gt;saves as-&gt; .eps 
You can do this with set_param(). Instead of a scope, I would export the data to the workspace with a 'to workspace' block, so you can check the data in your script. So for example you can do this in your script: open sys.mdl set_param('sys/blockname','Gain','10') sim sys %check data Where sys is your model and blockname the name of the block, here it's a gain where it is set to 10. See http://www.mathworks.com/help/simulink/slref/set_param.html and http://www.mathworks.com/help/simulink/slref/block-specific-parameters.html 
&gt;The eig function returns the eigenvalues of a real, **symmetric**, sparse matrix for the syntax, lambda = eig(A). Use the eigs function for all other sparse eigenvalue and eigenvector problems. Your matrix is not symmetric, check out the [eigs()](http://www.mathworks.com/help/matlab/ref/eigs.html) function. Symmetry is along the topL to botR diagonal. If you take your matrix and compute its transpose, they aren't equal, thus the matrix is not symetric: matrix.' is the transpose syntax.
quote from the eig() docu. I'll admit I was just passing on what I felt was applicable to OP - I don't regurlarly deal with linear algebra so I'm not up to speed on the ins-outs of the math behind it and the functions to employ.
'nobalance' gives better results, the noise is a lot lower. I'm not sure how the eigs() results look; matlab tends to scramble the roots when changing f (ie lambda(1) @ f(1) -&gt; lamdba(3) @ f(2) ). I already have to detangle the different roots where I'm using this, so eigs() might be the better choice.
You can use [eigenshuffle](http://www.mathworks.com/matlabcentral/fileexchange/22885-eigenshuffle) to keep the same order of eigenvalues. 
That's what I've been looking for! I ended up having to write my own, I'll have to see if this one works better.
That's a lot of work for just changing a variable. Just make the parameter a variable. Change 'x' programmatically and call ```sim``` from the workspace: for x=Xsmall:Xlarge .... sim('sys'); .... end 
Ye you are right, thats what i normally do too. Dunno why i didnt think of it, lol.
Just a few minutes really. You can probably predict the behaviour as it scales so it's a bit of a waste of time!
I've never heard of "trapezoidal histogram" either. The only think I can think of in MATLAB that uses trapezoids is trapezoidal integration. One thing I could think of would be in making a CDF from PDF using trapezoidal integration, maybe that's what he's refering to?
[input()](http://www.mathworks.com/help/matlab/ref/input.html) would be where you want to start.
Well we were able to use a triangular monte carlo (if thats even what its called). essentially our randomization scheme used a triangular bound of the form x = makedist(triangular,a,b,c) a= lower bound b= mid c= upper bound then r= random(x,rows,columns) then hist(random,1000) So I've talked to my roommate and we can't figure out the trap method. Is there a trapezoidal function similar to triangular? if not then is there a way to view the code for triangular and try to modify it for trapezoidal?
Now you're not speaking my language, sorry. It does not appear that [makedist()](http://www.mathworks.com/help/stats/makedist.html) accepts a 'trapezoid' or 'trapezoidal' flag. Don't know if I can be of further help, sorry. Also, a tip, if you put 4 spaces before lines you want displayed as code: they'll look like this and... matA.*matB.*matC shows the elemental multiplication while matA.*matB.*matC is harder to deduce what is coded. Just a tip, no accusation.
Im no sound expert myself but im pretty sure you should be adding the noise (y1+y2) instead of concatenating. Note that y2 has to have the same number of elements as y1.
Try adding y1 and y2 together. y3 = y1+y2; sound(y3,Fs)
You can write a function that accepts two inputs, X and Y, and returns x_out, y_out, like this: function [ x_out,y_out ] = myFunction( X,Y ) %MYFUNCTION Summary of this function goes here % Detailed explanation goes here % math goes here % end You then save the function (in your matlab workspace), and call it from the command window with myFunction(X,Y). Some commands that you'll likely need to know are: [Transpose](http://www.mathworks.com/help/matlab/ref/transpose.html) (flip row to column) [Element-wise multiplication](http://www.mathworks.com/help/matlab/ref/times.html) 
According to help documentation: &gt; In order for MEASURE to work, the filter H needs to be designed using FDESIGN. [\(relevant post\)](http://www.mathworks.com/matlabcentral/answers/87008-how-to-use-the-measure-command-in-filter-design)
Here's a quick way (if I'm understanding your question correctly): x=[1 2 3 4 5 6 7 0 0 0 0 ]; plot(x(x&gt;0)) 
Yes that works perfectly. I was making it way too complicated. 
The answer is on top, read below for the explanation, which might involve some math you're not familiar with. The sum of two uniform random variables with different ranges has a trapezoid distribution. Try this: r1 = rand(rows,columns); % this is uniform between 0 and 1 r2 = 2*rand(rows,columns); % this is uniform between 0 and 2 r = r1 + r2; % this has a trapezoid distribution hist(r,1000); % test it yourself to see if you get a trapezoid! Say x and y are two independent random variables with distributions p_x and p_y . Then the sum, z = x + y, will have a distribution which is [CONVOLUTION](https://en.wikipedia.org/wiki/Convolution) of p_x and p_y. Convolution is denoted with an asterisks (when you write it, not in matlab): p_z = p_x * p_y If you convolve two rectangle functions, you get a trapezoid function ( [you can check on wolfram alpha](http://www.wolframalpha.com/input/?i=convolve[+rect%28t%29%2C+++rect%282*t%29%2F2+]) ). That means the sum of two uniform random variables will have a trapezoid distribution. The triangle distribution is a special case of the trapezoid distribution, and you'll get it if x and y both have a uniform distribution with the same range ([see here](http://www.wolframalpha.com/input/?i=convolve[+rect%28t%29%2C+++rect%28t%29+]) ).
see my comment here: http://www.reddit.com/r/matlab/comments/2neoma/creating_a_trapezoidal_distribution_histogram/cmd8sjm Not sure if you get a notification unless I reply to you directly. So I'm replying here so you don't give up on it prematurely.
(I haven't used the parallel toolbox but...) How is this hour of computing time split up between the line of code that creates F and the line that evaluates F to create cq? I assume you can use parfor just for evaluating F? It would seem like you can only "use" parfor with scatteredInterpolant if you "write your own version" of scatteredInterpolant... which shouldn't be impossible using nearest neighbor (you'd then probably be calculating F and cq within the same loop). This of course might trade off between speed gained using extra processors and lost by using an algorithm to calculate the nearest neighbor that might be less optimized than the one programmed into Matlab. Not sure if this has been helpful at all but I figured I'd try. 
Why not try something like gridfit? Then you can chunk it into different pieces.
OK, well my thought, similar to what seems to be mentioned below, is that you break your xq,yq,zq up into chunks and evaluate each chunk separately (I imagine there's no reason to make it any more complicated than one chunk for each process you have). It might be a tiny bit tricky to get right (I always feel like meshgrid creates arrays that are kind of unintuitive in some weird way), but it shouldn't take more than a few minutes.
&gt; gridfit Thanks for the advice, calculating each part separately may be something I can do.
rand(m,n) will make a m x n matrix of uniformly distributed random variables on (0,1). So if you do: n = 20; x = rand(1,n) - 0.5*ones(1,n); sum(x) that should work. There might be a more succinct way to do it, or you could combine this into one line of code
A million samples of S20 plotted in a histogram: x = rand(20, 1e6) - 0.5; hist(sum(x), 100) Hope this solves your homework.
Yeah, seems like i have to resort to antoher export, just have to redo all my previous figures. but thanks
The is really handy. I didn't know you could make arrays with NaNs
I refuse to upgrade to the new one until I submit my PhD thesis. Terrified I won't be able to faithfully reproduce my figures 
I usually circumvent this by using another variable (but there might be another, inherent solution): kk=1; for j=[1,10,23,40] subplot(1,length(j),kk) kk=kk+1; end Edit: code formating
This works but a more Matlabby solution would probably go: vals = [1 10 23 40]; n_vals = length(vals); for j = 1:n_vals subplot(1, n_vals, j); this_val = vals(j); ezplot(subs(y,'c',this_val,[xmin xmax]); axis([0 10 -1 25]); end Also: Add 4 spaces to the beginning of each line in your comment, and Reddit will nicely format your code! Edit: Of *course* because I said the thing about adding spaces to make your code format correctly, I did it wrong on the first try myself...
Wow this is fantastic. Thank you for that explanation - I learned a new math concept along with MATLAB coding. 
Maybe you could be a bit more specific? * What are the dimensions of your collection (library)? * Does it contain only numerical entries? Depending on the size of your collection and nature of your data, this should be a simple case of logical indexing and boolean logic. 
I thought this would be easy but I didn't find a solution. Here are resources that might help you : * [this guy](http://www.mathworks.com/matlabcentral/fileexchange/5105-making-surface-plots-from-scatter-data) created a demo to show how to plot 3D data from a set of (x,y,z) coordinates * you can use convhull to create a 3D shape from a set of coordinates 
You could use [isocaps](http://uk.mathworks.com/help/matlab/ref/isocaps.html)
It appears that this could be useful once the 3d graph is already in place.
Using the following code you can get figures like [this](http://imgur.com/a/KZvQ6): function redditRotation() n=100; m=50; theta=linspace(0,2*pi,n); x=1.5+sin(3*2*theta); y=0*theta; z=cos(1*2*theta); %figure(1) % plot(x,z,'k') v=[0 0 1]';%Rotating about z [X,Y,Z]=rotateAll(x,y,z,n,m,v); figure(2) surf(X,Y,Z,'FaceColor','Interp','FaceAlpha',0.5,'LineStyle','none') hold on; plot3(x,y,z,'k') quiver3(0,0,0,v(1),v(2),v(3),'k') hold off; v=[1 -1 1]';%Rotating about [1 -1 1]. [X,Y,Z]=rotateAll(x,y,z,n,m,v); figure(3) surf(X,Y,Z,'FaceColor','Interp','FaceAlpha',0.5,'LineStyle','none') hold on; plot3(x,y,z,'k') quiver3(0,0,0,v(1),v(2),v(3),'k') hold off; end function [X,Y,Z]=rotateAll(x,y,z,n,m,v) v=v/norm(v,2);%Normalizing. Z1=[x;y;z]; phi=linspace(0,2*pi,m); sZ1=size(Z1); Z=zeros(sZ1(1),sZ1(2)*m); vect=1:numel(phi); for a1=vect Z(:,(1:sZ1(2))+sZ1(2)*(a1-1))=rodrigues(phi(a1),v)*Z1; end X=reshape(Z(1,:),[m n]); Y=reshape(Z(2,:),[m n]); Z=reshape(Z(3,:),[m n]); end function R=rodrigues(phi,v) R=cos(phi)*eye(3,3)+(1-cos(phi))*v*v'+sin(phi)*[0 -v(3) v(2);v(3) 0 -v(1);-v(2) v(1) 0]; end
If you add X=[X;X(1,:)]; Y=[Y;Y(1,:)]; Z=[Z;Z(1,:)]; to the end of rotateAll you will get a closed surface.
Wow man, that's awesome! Thanks a lot, I will definitely give it a try tomorrow!
It's a library set up like: library(1).title='something' library(1).artist='something else' library(1).tempo='number' And this goes on for awhile. For the tempo I did a str2num and such. Then what I really want is to search the library to find songs that fit a &gt; &amp; &lt; criteria.
Thank you for the response. I was hoping for a nice little function that would return the index of the number in the vals list that I could just plug into the subplot third parameter.
if you have all the tempos in a vector such that the vector has an equal number of elements to you library entries which should be the case if 1 library entry == 1 song. tempos = str2num(library(:).tempo); query_result = library(and(tempos&gt;*your_minimum_tempo*, tempos&lt;*your_maximum_tempo*)).title; will return all titles between your *your_minimum_tempo* and *your_maximum_tempo*
Use strcmpi to test for similar strings.
5suspect is correct to suggest strcmpi (or strcmp if it's case sensitive - it's may more efficient to use strcmp actually) - one reason for this (which applies in this case) is that strcmp lets you compare strings of different lengths, whereas checking two strings for equality directly requires that they are the same length. In general, you almost never use '==' with strings, whenever you do a string comparison you should be thinking strcmp by default. For the if statement, you need to have a scalar condition. Currently your test 'get(h,'position')~=[l b w h]' returns a 1x4 vector of logicals. What you actually want is just get a single true/false telling you if all the values match i.e. if ~all(get(h,'position')==[l b w h]) This is also equivalent to if any(get(h,'position')~=[l b w h]) 
Got it working, thanks.
Sorry I should have also stated that I'm trying to incorporate a menu button to select the tempo. So when the program runs a menu pops up asking which range of tempo you want. 
It would be possible to do that, e.g. my_index = find( vals == 23 ); ... but the way I posted would, in general, be a better solution. For one thing, maybe in this context you can assume the values in your list are unique, but in many other contexts that would not be true, and you wouldn't be able to find a unique index for each value. For another thing, indexing the way I wrote is fast, but the `find` function is, by comparison, very slow. So for more complex Matlab scripts where time is a factor, you'd want to avoid `find` statements as much as possible. For a third thing: This is a very common situation to find yourself in when programming in Matlab. It will help you to develop a consistent coding style, which will lead to faster development and fewer bugs down the road. And one of the coding conventions that will help you stay out of trouble is not doing anything too weird with the index variable of your `for` loops, i.e. typically letting `j` run from 1...N if you are looping through the N elements of a vector. Of course, it's not a universal law... if you don't need the index AT ALL in your loop, just the values themselves, then there's no sense creating a separate index variable just for the sake of following the rule. But many, many times in my decade-plus of Matlab programming, I have started to write a loop that just goes through the values in a vector, and then realized I DID need the index after all, and I had to go back and write it like the example I included here. So, in the general case, it's easiest/safest to just assume your `for` loop will run from 1...N, and let looping through the actual values be the exception rather than the tule.
Ok that makes a lot more sense. Thank you for the great explanation. I'll take your word for it and save myself some trouble for the future.
type: doc int (or any other function) to see how i works. In this case int does not take arguments of type double. by googling "matlab integration" I was able to find out that the function you want is "integral" type: doc integral to see how it works
i have tried that too and I get this error: Error using integral (line 82) First input argument must be a function handle.
thanks a lot. that worked. now I have to check with my professor.
Thank you. This function is inside another function which is inside another function. So I wanted to know where I have to initialize the global variables? I tried initializing in the command window first and then running the base function, but still this didn't lead to any change in the simulink model values. The main reason is these variables are taking in values from another array created inside the function.
You have to initialize them as global within each function. Matlab will allow a local and a global with the same name as long as they don't exist in the same scope.
In that case it may be easier to use assignin. It works like this: assignin('base','variablename',value) 
to calculate the SS error more easily you can just say 1-h(end), instead of needing to grab the value from the plot using your mouse.
I assume a1 = a1 * (2/(s+9)); should be a1 = a2 * (2/(s+9)); and all sys_PID... should be PID... The steady state error can be calculated using dcgain(): sserror_2=1-dcgain(PID2) The characteristics of the step response can be calculated using [stepinfo](http://www.mathworks.com/help/control/ref/stepinfo.html) instead of checking them in the figures. I assume that the the reason why you dont get the settling time for all the responses is that the steady state error is too big. It is problably defined as t for which |1-yfinal|&lt;0.02. However, you can get the settling time with stepinfo. You can also change the threshold. 
[Sorry, this might be better](http://imgur.com/H26NWhP)
Variables defined inside a function are 'local variables,' and they won't be transferred into the workspace. You can fix that, I believe, by defining them as 'global' variables: Global x y z
okay, the reason its saying ans = 10, is because the first output variable is "hw", from where you code "function [hw,quiz,exam,final]= ..." So when you call your function in the Command Window without a semicolon, MATLAB is automatically returning your first output variable "hw". I assume your hw is worth 10% of your grade. If you don't want to see that output, call the function with outputs, or end your call with a semicolon. option 1: [hw,quiz,exam,final]=hw_quiz_exam_final_percents options 2: hw_quiz_exam_final_percents;
Alright, so I tried to set up the variables as global variables and switched out the name, but I'm still getting the same issue. [](http://imgur.com/X9Pd1nj)
Is there a reason to do this as a function and not a script anyway? I think you're just making it harder on yourself, in this case at least. 
Create a slider uicontrol with a callback that runs the code you want to update when you change it. Callback functions need two inputs; a source and an event. These can be used to tweak their behaviour since it can respond differently to each invoking source.
Is there an example you can link me? I am trying to use handles.slider but everytime I do I run into the problem that I can't define my plot to be handles.fig = plot() and I have no idea how to update the plot.
remove the abs() from the loop and change the first plot to semilogy(whz,abs(alpha(:,1)));
Here's one I threw together with an ODE. % % Sample code to demonstrate a uislider % to update an ode solution % function ode_slider_demo % Build the GUI init_ui; % This funciton sets up the figure and slider. % note the CreateFcn and the Callback. % The CreatFcn runs the first time while the Callback % runs each time you move the slider. function init_ui() f1 = figure; slider1 = uicontrol('Style', 'slider',... 'Min',1.1,'Max',6,'Value',3,... 'Position', [100 10 400 20],... 'CreateFcn', @solve_and_plot,... 'Callback', @solve_and_plot); end % These are the parameters for the ODE, I've knackered an % example from the Documentation function param = init_param(Tmax) param.ft = linspace(0,Tmax,100); % Generate t for f param.f = param.ft.^2 - param.ft - 3; % Generate f(t) param.gt = linspace(1,6,25); % Generate t for g param.g = 3*sin(param.gt-0.25); % Generate g(t) end % This is a funciton required in the ODE solve function dydt = myode(t,y,ft,f,gt,g) f = interp1(ft,f,t); % Interpolate the data set (ft,f) at time t g = interp1(gt,g,t); % Interpolate the data set (gt,g) at time t dydt = -f.*y + g; % Evaluate ODE at time t end % This funciton it what is run when you first run the % code and each time you move the slider. function solve_and_plot(src,event) % Get the current slider value Tmax = get(src,'Value'); % Update parameters param = init_param(Tmax); Tspan = [1 Tmax]; % Solve from t=1 to t=Tmax IC = 1; % y(t=1) = 1 % Solve ODE [T,Y] = ode45(@(t,y)... myode(t,y,param.ft,param.f,param.gt,param.g),... Tspan,IC); % Update plot plot(T, Y); title('Plot of y as a function of time'); xlabel('Time'); ylabel('Y(t)'); end end
/u/bobinpants nailed it. ```angle(abs(math))=0``` by definition.
God damn it, i always did it like that, the first time i think i need to change something to make it more efficient i run into stupid things like these. You just saved me 2 hours of pointless debugging and revising my actual math formulation, thanks man! :)
[My friend](http://i.imgur.com/TcwWo65.gif)
[Thanks!](http://i.imgur.com/SwaO7.jpg)
Shit got real, yo!
Use interp1() on each of the 6 columns 
I'll give that a shot. Thanks :)
That is awesome, thank you for your help! I can definitely work with this.
Thanks for your help
What is the result you expect, assuming v1 is the 1x6000000 array and v2 is 6000000x1: 1. A matrix with 6000000x6000000 elements, which you get by doing v2*v1. 1. A scalar result which you get by doing v1*v2 1. An array of 6000000 elements which you get by doing element-wise multiplication (v1(:).*v2) If its number 2 and 3, those shouldn't give you any memory problems. EDIT: failed my linear algebra for point 1, it wont be a diagonal matrix.
Have a look at cellfun
Just a thought - why not downsample the force plate matrix (downsampling), rather than making the capture data matrix bigger (upsampling)? Either way - Interpolation is what you should google for making the matrix bigger (there are lots of ways to do interpolation because there are different ways of "filling in" missing information). If you want to make the matrix smaller, you should look into "Decimation")
What is data_file? Is it an array?
Not sure what the problem is. I just made a random matrix (3D 5 x 5 x 5): h = rand(5,5,5) Maximum = max(max(max(h))) returns the largest value. Note that when using max it only goes along the first axis so taking max(h) of a 2D matrix returns a row of maxes from each column. 
Thanks for the tip, I've had a go at sprintf('%.4f',A), but when A is a matrix it just displays all the elements on one line without any spaces between each element. Any idea how to at least insert spaces between the matrix elements?
Iterate thru them w/ a loop?
Got there in the end. Thanks!
yep, you're right. 
Did you call one of your variables 'max'...? 
Try taking out nans and infs, negative numbers and imaginary can also create this error
I did at one point, but I changed the name and the problem persisted.
Huh. I know for sure its a matrix. Someone else mentioned that it might have to do with the values in the matrix, so I'll check that. Thanks!
Thanks a ton! I know there are no NaNs, and there shouldn't be any imaginary numbers or infinities although I guess that's possible. There are a ton of negatives, but I tried to take the absolute value and then find the max and still got the error. I'll check this out. I'm probably missing something dumb, I'm really new to this stuff and prone to those kinds of mistakes.
Did you clear the old variable?
i is the variable being summed in a for loop. I got rid of that addition since it didn't seem to help here. The matrix is 3x1000, so that might be the issue. Thanks a lot, I'll check that out. E: so would I do max(max(data_file))then?
Yep. This is the only place where max is used.
Sorry stepped out for a bit, but quickly re your edit, yes, max(max(matrix)) on a 2d matrix will return a singular, global maximum value. It will return Inf and/or NaN if your matrix contains them, so flag and remove them before hand or use nanmax(nanmax(matrix))
Hmm, that's strange. I made a small matrix with rand and changed one value to inf and another to nan and it still works fine. a = rand(5,5); a(1)=inf; a(2)=nan; max(max(a)) gives inf and min(min(a)) gives 0.0344 (from the random number). So I don't think this is the problem. OP, you may want to try calling: unique(data_file) to see what's in your matrix. Or perhaps, sort(unique(data_file)). Ah, I see you figured it out. What was the issue?
two things you can try are a) Put omega0 and p as inputs to your @f, instead of as inputs to ode45. Can't tell you from memory exactly how to do this, so you might have to fool around a little. b) make f just be an anonymous function inside of your LAB05 function: f = @(t,Y) [Y(2);-2*p*Y(2)-omega0.2*Y(1)]; I suspect the problem is that it doesn't actually have access to the variables that you're expecting.
*Pre-Edit: the final 3rd is the bit that u/walksalot_talksalot was talking about No problem. To see how [max()](http://www.mathworks.com/help/matlab/ref/max.html) and [nanmax()](http://www.mathworks.com/help/matlab/ref/nanmax.html) are working, try this on your command line: &gt;&gt; matA = rand(4,9); &gt;&gt; matB = rand(9,4); &gt;&gt; max(matA) &gt;&gt; max(matB) and the outputs of the two max() calls should be different in size and (maybe) dimension: one will be 4 numbers and the other 9, and the functionality of which you can see on the docu I linked above. If you max(max()) either matA or matB you'll have a singular, global maximum value reported (they will be different in this example). Now try and replace the (1,1) element in each with: &gt;&gt; matA(1,1) = NaN; &gt;&gt; matB(1,1) = Inf; and take the max or max(max()) of them. You'll get a return which includes NaN/Inf. Now try with nanmax() and that should remove itself. nanmax(nanmax()) should return a value equal to the pre-NaN/Inf changes to the matrix, unless you happened to change the actual maximum value by happenstance. My understanding of nanmax() is that it is simply a "wrapper" around max() that flags and removes NaN/Inf values from the max() procedure. Finally, just as a note, you can take the max() along a given dimension/direction for an N-dimensional matrix (again, see the docu for a more formal description). Say you have a 3-D matrix that is longitude X latitude X time, I believe that max_in_time = max(matrix3D,3); (and note the addition of ",3" to the function call) will return a 2-D matrix of longitude X latitude that is the maximum of a variable (surface temperature) through the *Ntime* time observations - the "3" denoted what dimension of the input matrix (matrix3D) to take the max() of and eliminate. This behavior is also common to other similar functions like min(), mean(), std(). The more you know.. happy to help.
Thanks! it works perfectly now.
Ah, I see. That makes sense.
x is a ' 1x491 struct with 11 fields ' one of the fields is a string fore notes which sometimes is empty, all others are required for the calculation. &gt; Try to do your isempty() call outside the loop and index the appropriate experiments row: Does that mean to create a new to-from? I might have found the problem, i was using is empty with a string for the experiment number!
Let me get to my office and reply from desktop. 30 min or so
&gt;pointing it to a column((x).y) tells me that there are too many input arguments. This is probably returning the field for every index of the struct array. Try indexing into the struct with exp_index to get just the field of the current index.
Solved: i had to use 'continue' if isempty(variables(exp_index).ref_mass) == 1 continue warning(['Exp #', num2str(exp_index) ,' blank']) else %rest of the code end
it is solved, fyi so you don't waste your time. Thanks for the help it made me realise my mistake! 
FYI, you don't need to compare the result of isempty to 1. It's already a logical.
No problem
Was there still two problems: 1) getting the isempty() to work with your structure and 2) getting the code to go through all 10 experiments? What you've got here is similar to what I suggested with the disp() replacing the error(), and I'm glad you've replaced it - warning() seems like exactly what you want. if isempty() continue warning() else %rest end The continue here I think is unnecessary The if makes you have two parts to the code: what you want to process if your data is not empty (the %rest), and what you want to display and skip when your data *is* empty. If all you have there is one line, warning(), that's all that will execute for that iteration. Am I making it clear how the continue is extra here? And as u/okthrowaway2088 points out (and I used this functionality in my other post), you don't need to compare isempty() to 1 or 0: isempty() already returns the logical 1 (if empty) or 0, so: matA = []; matB = 5; if isempty(matA) == 1 is the same as if isempty(matA) and will proceed to your warning statement. Just some additional tips to help. Glad you got things sorted out.
&gt; don't need to compare the result of isempty to 1. what do you mean?, the content of ref_mass is numeric. edit: saw u/Halsey117 explanation. So basically i should only set == 0 when i want it to be applied when false.
point 1 was not working since i was using (variables(exp_index).ref_mass) with exp_index as a string by mistake You are right abt the continue i took it away and it works as before 
No problem, glad to help.
If you wanted to use it for the false condition, just use ~isempty(thingToCheck). The ~ symbol will work as NOT condition (i.e. "flip" the result between true and false).
I'm having trouble adding the P I and D components of PID block as design variables. Could you walk me through how to do this?
You just have to put them in as workspace variables. For example, say P is 2 right now in the block. Set Kp = 2 in the MATLAB workspace and use Kp instead of the number in the block. You should then see Kp as a design variable. Same for the rest.
You can utilize MATLAB's built in publishing so you don't have to install other programs. You can do this in the command line or by using MATLAB's publishing GUI. A command line example: publish('myfunction.m', 'format', 'pdf', 'evalCode', false); This will output a *.pdf file to a ./html folder in your directory (the function also returns the full path to your output file). See the documentation for [`publish`](http://www.mathworks.com/help/matlab/ref/publish.html) for other output options. The useful option here for your case is the `evalCode` option, which makes MATLAB only print the code and not try to evaluate the code and include any figures or outputs. If using the publishing, make sure you select 'edit configurations' and set the 'evaluate code' option to `false`.
Thanks for the tips, I think this is more along the lines of what I'm after.
It does work for Windows. I had to use it for a couple of my classes. Even though you don't need it for this, it's still a nice tool to have in the toolbox.
So, this sounds like a homework question. We certainly don't discourage questions here, we just don't *do* your HW. What have you tried? Have you been able to set up anything? Do you know the numerical method(s) and how to psuedocode them that are behind the 3-pt centered-difference scheme you want to employ? Do you get any errors? Put 4 spaces before lines you want to display as code so that we can read it as you indended and w/o reddit's formatting. Thanks, and we're here to help.
You should also try outputting to word than converting to pdf - last time I checked the output is slightly different.
I had considered that, but that seems like an extra, unnecessary step. Thanks anyway.
Sometimes I get lazy and don't want to reformat my lines with the "..." and matlab&gt;word&gt;pdf is easier.
Yep, I just found this out recently myself! Try: switch variable case {1,2} % things for either case 1 or 2 that are the same case 3 otherwise end *Edit: I just now see your edit. Glad you found it on your own!
 h=[10^(-1) 10^(-2) 10^(-3) 10^(-4) 10^(-5) 10^(-6) 10^(-7) 10^(-8) 10^(-9) 10^(-10) 10^(-11) 10^(-12)]; y=((2+h).^(-1)-(2-h).^(-1))./(2.*h) z=-1/(2^2)-(((2+h).^(-1)-(2-h).^(-1))./(2.*h)) f=figure('Name', ' First UITable', 'Position', [100 100 450 200]); dat={h(1,1), y(1,1), z(1,1); h(1,2), y(1,2), z(1,2); h(1,3), y(1,3), z(1,3); h(1,4), y(1,4), z(1,4); h(1,5), y(1,5), z(1,5); h(1,6), y(1,6), z(1,6); h(1,7), y(1,7), z(1,7); h(1,8), y(1,8), z(1,8); h(1,9), y(1,9), z(1,9); h(1,10), y(1,10), z(1,10); h(1,11), y(1,11), z(1,11); h(1,12), y(1,12), z(1,12)}; columnname={'h', '3PF', 'error'}; t=uitable('Units', 'normalized','Position', [1 .1 1.9 .9], 'Data', dat, 'ColumnName', columnname);
This is what I have. Doesn't work. Don't know why. I really need help creating a table.
&gt;Doesn't work Why? What error message(s) do you get when you run this? Also, is your assignment to produce a table? Or do you just want to see nice output yourself?
It doesn't give an error message that I've noticed. It generates a new window, but it comes up completely blank. I guess an actual table isn't extremely necessary, but yes I would like it to look nice. 
So are you just reading the calculated output to write in your assignment? If so just output the matrix to the command window and write them, seems to be the easiest. Otherwise I would suggest reading the MATLAB docu on the functions you're trying to use, just Google: "matlab &lt;fn name&gt;". Sorry I can't be of more help.
When the for loop is first interpreted, the current value of n is used. Updating n later won't affect the loop. You have two options here: 1. Set n equal to the max number of iterations you want the loop to perform before giving up, and a "break" statement in the else block. Also ditch the n=n+1 stuff. When the condition is meet, the break will kick it out of the loop. 2. Use a while loop to perform the test. The loop will run until the condition is met, then exit. This has the benefit of not requiring you to guess at an upper limit on the number of iterations, but also means you can get trapped in an infinite loop if your solution doesn't converge.
Yep. The way I can think of is something like: 1) make a directory for your code copies and allow MATLAB to point to and use scripts/functions/data within it (or explicitly pointed to). 2) query MATLAB to "ls" the current directory (that which you store your versions) 3) check for either the most recently made or the one with the highest version number, up to how you want to do it. 4) increment the version number appropriately for the new file name. Have MATLAB perform a "cp myfn_v1.m myfn_v2.m" while providing the correct file names/paths. You can also do something similar for figure names that you want to save without the hasstle of manually giving them a new title if all you're doing is something *like* incrementing code with changes and seeing the results.
Thanks, one last question (at least until tomorrow), what is [t, y] exactly?
Alright, I'll give while loops a try, the problem is that the question is design in such a way that it is near impossible to do by hand. The question asks to create a function m.file called Hroot.m and then after verifying the code we're to copy and paste a statement the likes of; Hroot(5,1,0.001)^4 + Hroot(7,2,0.001)^3 + Hroot(8,2,0.0001)^4 Then using format long g copy paste the output, keeping the original long g rounding, while possible, it would be tedious to to this problem without function definitions, and that sort of eliminates the possibility of simply giving any variables finite values, as they must be open to user input for the sake of the question.
t is a vector of the time, and y is the vector of the ODEs states. It may have been better to call this x. Then to plot the solution to dx_1/dt=f1(t,x), you would use: plot(t,y(:,1))
I'm confused. The while loop goes in the m file.... Basically your existing code, just with a while loop instead of the for loop / if-then-else combo Something like function x2 = Hroot(A,x1,tol) Yn = (x1.2)./A x2 = x1.(15-Yn.(10-3.*Yn))./8 while ( abs(x2-x1)&lt;=tol ) x1 = x2; x2 = x1.(15-Yn.(10-3.*Yn))./8 end
It's the fact that when I try and run the script, if n is not yet defined, it returns an error, but if I define n, then n will only ever be that number and will not increase, defeating the main purpose of the function. Also on the subject of the actual question, unless I write this out as a function the exact way it is written in the problem, I cannot accurately - or efficiently - get the answer.
I am very curious why you are trying to do that? Is it to keep track of your progress as you are editing a script? Just to clarify, you are not asking to save the workspace variables (you can do that via save('file.mat','var1','var2',...) ?
I am asking because the program I am working on is 100% math based. there are over a hundred equations, many of which feed into others...and so on. So when I change one variable, the entire thing changes. I'm getting tired of control z-ing back to a state I felt I was getting better results because that might have been 3-5 runs ago, or whatever. It's just that the program has gotten so convoluted, I need to know what the results of my changes are over the long term. Does that make sense?
Take a look at the code I added. As written, your code doesn't do anything with n outside of use it (improperly) as an index in the for loop. The point is with a while loop, you don't need n at all as the loop runs until a condition is met. 
simple way would to just save the file as a new m file for each iteration. a little bulky, but it might be less time than writing a script to do the same thing for less than maybe a 100? iterations
I don't think your proposal is the right way to do it. 1. Have you considered having these variables _outside_ the main program? Like, maybe in another .m file, even. Then it would be really easy to both make and see these changes from iteration to iteration. 2. This is a pretty poor way to do version control. You should consider using Git instead. You could have the commit messages be the results of your program, and then you could go backwards and forwards in time when you want to. 3. You don't even need version control. You should be writing a script that changes these variables for you and repeatedly runs your main program and gets the results. MATLAB was designed to make our lives easier, not harder. Sure, you don't have to do the calculations by hand, but now you're bogged down in minutiae like "how to convince a MATLAB file to copy itself and save itself as another name", which will no doubt be prone to errors. This also affects #1 as well, and is solved by properly using version control.
good to know thanks!
thanks for the info
Depending on your data types (strings, integers (as in your OP), doubles) you'll have to play around with the input, but you can use: find() ismember() strfind() regexp() &lt;-- though I've never used that one At Google, search "matlab &lt;whatever&gt;" and more than likely you'll get a) the documentation if it was a MATLAB function or b) link to someone's toolbox who might have done &lt;whatever&gt; before. Here, all these functions are MATLAB's own. So, for example, you could try something like: numary = % your number array eights = find( numary==8 ); oneNtwo = find(numary,[1 2]); % if that doesn't work uncomment the following line % oneNtwo = find( numary==1 &amp; numary==2 ); Here you have where your 8s (beginning) are and where your 1/2s (ending) are. Now just iterate over the length of 8s and you'll pull out your arrays. Be careful though, you'll have to decide how to catch the situation where your matrix ends similar to: ........ 8 4 34 2 9 64 8 30 51 ]; [ 8 4 34 2 ] [ 8 30 51 ] &lt;--- NOTE there's not a 1/2 ending this array You'll get those two. Now do you want to keep that last one? Do you only want arrays that meet both the start (8) AND stop (1/2) condition?
In matlab you can use conditional indexing. %Defining the array x = [64 2 2 8 11 ... ]; %Selecting all elements satisfying the given condition p1=x(x&lt;=8 &amp;&amp; x&gt;=2) ; p2=x(~(x&lt;=8 &amp;&amp; x&gt;=2)); 
Yeh I see what you're saying about the arrays, thinking about it the way I've iterated over eights is also going to cause me a problem if the eights array is not equal length to the oneNtwo array (which is the case). for tr = 1:length(eights) trialtriggers{tr} = [triggerlist(eights(tr):oneNtwo(tr))]; end I can't quite spot what the better way of doing this is though..
Would you want the single ampersand `&amp;` for *array* AND?
&gt;the way I've iterated over eights is also going to cause me a problem if the eights array is not equal length to the oneNtwo array (which is the case). Ok, here's a suggestion. Let's say you come across a case like this: [ ..... 8 43 29 3 8 9 20 1 39 .... ] [ 8 43 29 3 8 9 20 1 ] &lt;---- NOTE the two 8s in the output before the next 1/2 *should* be your return, if I'm understanding you correctly. So what you'll have to do in your iterating is still go through the 8s but you'll have to cross check to see if the next 8 in line comes before the next 1/2. Do you see what I mean? You'll just have to be a little more delicate in what you're trying to extract. While you're catching these types of conditions, what do you want to happen if say you have this situation: [ ... 3 8 9 5 32 0 2 9 1 3 8 40 1 ... ] [ 8 9 5 32 0 2 ] [ 8 40 1 ] are what you want to return, but how will your code handle having two 1/2 flags without having an 8 flag inbetween? Hope that helps.
Here are two options: * Plot your data in Matlab, then export the plot as an image file, and read that. * Write some code to rasterize your points yourself. This is more work, but it's pretty straightforward, and would give you a little more control over the result.
You want a while loop not a for loop. It's designed to do exactly what you want.
So I may have cheated some... by taking more of a combined analytical/numerical approach. I found an exact solution for the junction temperature and just solved for that temperature. I then fed that into the boundary conditions for the base fin and the two edge fins and computed with finite differences from there. So I just ended up with one fin having Dirichlet BC (one side's BC the result of the analytical solution) and two edge fins with Neumann BC's (using the analytical solution at the junction)
Thanks I'll try them both.
You are right. My code needs single ampersand.
First off, what is the sound data you have? Sorry if that's an obvious question - I don't deal with audio analysis.
I got this to work for part A of the problem. In part B of the problem, one of the constants from part A is now decreasing by 3% per year. Any idea how to code for this? Thank you for the help
There's probably a better way but does collecting the data into an array, e.g. `min([data{2,2,:}])`, give you what you want? It will add memory overhead but it should be pretty negligible for the described case.
Thanks! Finally got it, the only change to the code you provided is that Yn needs to be restated inside the while loop as well, but other than that it's working the final script is as follows: function x2 = Hroot(A,x1,tol) Yn = (x1^(2)) /A; x2 = x1*(15-Yn*(10-3*Yn))/8; while (abs(x2-x1) &gt; tol) x1=x2; Yn = (x1^2)/A; x2 = x1*(15-Yn*(10-3*Yn))/8; end end Thanks for all the help u/AngularSpecter, much appreciated !
Define a grid bigger than the limits of your shape at the resolution you need using meshgrid and then find the points using inpolygon.
Usually it is not an abrupt change but a power law like 0.97^t , otherwise you can pass a function handle like you do a constant, and evaluate in the function: function c1=fcnC1(t) ... [t,y]=ode45(@odeFcn,[t0,tf],IC,[],@fcnC1); then call it as fcnC1(t) in the function describing the system.
I am dealing with industrial sounds.. train sound, electric saw,...
it doesnt look like you rotated them in any axis, just translated them Could you also post the coordinates? Could you also elaborate on the problem more for background? Also, I believe you will need to define axises for each triangle before beginning (a cylinder would be far easier)
Yep, I just linearly translated them so one point was at (0,0,0) Here's what I need to do: 1. Take morphological points from an animal in the form of two triangles 2. Determine the normal vectors of each triangle 3. Use these to determine the angles on the X, Y, and Z planes/axes between the two triangles (I think.) I think to do this, one must remove the the Y and Z components [i.e. pitch and yaw (aka twisting and sweep angle)] to determine X [roll (aka bending)] Then you must do this again for the other two components. Obviously, this is where I get confused. Basically my goal is to be able to input a set of 6 coordinates for the triangles and then have it output the angle between the two triangles along the X, Y, and Z planes/axes. 
I guess they mean what do the data look like.
I just finished a project similar to this with little background in special rotations and my best suggestion to you is to no approach it with Euler rotation directly but rather research quaternion rotations. It's the method used by video game designers for joint rotations and any other form of 3D rotation. The beauty with quaternions is you can specify the begging and end states and find the corresponding quaternion rotation matrix which can be transformed into Euler rotations. 
You are stuck in the while loop because it is never told to cease executing. You have: while 1 % code end The [while](http://www.mathworks.com/help/matlab/ref/while.html) loops evaluate some condition and if true proceed with the "code". As coded, you're while loop always evaluates 1, which is "true", and thus you have an infinite loop. The same can be said about your while n==2 loop. You need to set a variable that you can update that can be used to test for some condition that will break you out of the loop. For example: x_val = 1:100; y_yal = NaN*ones(size(x_val)); n_iter = 1; y_val(n_iter) = 1; while y_val(n_iter) &lt; 69 n_iter = n_iter + 1; y_val(n_iter) = x_val(n_iter)^2; end Now, in the above, can you see what I'm trying to do and how far I'm trying to go until my code reaches a condition and stops? More (good) help can also be had from the [while docu](http://www.mathworks.com/help/matlab/ref/while.html).
Respectfully, I think you should try to do a little more of your own work before just posting the question and asking for help. For example, what did you get for the answer for 2a? That doesn't involve matlab.
You have 2 problems here 1. Set up the problem using Runge-Kutta or Euler's methods. 2. Write a mathcad version of the equations you set up. Start with declaring the variables and ranges and go from there. Can't go wrong. If you stumble then go back to the book and review the section in the area you don't easily recall. We all go through this difficulty. How we deal with it makes us engineers and not business majors.
 if condition==true break; end
Functionally I agree, but I think that's complicating things a bit more than they need to be. If OP was just careful about how he wrote his while conditions and internal updating he wouldn't need breaks at all.
Our professor never assigned nor recommended a textbook.. I'm unfamiliar with mathcad as well. Really what I'm looking for here is a generalized RK/Euler code and information on how I can set up a function to use that code on. I understand the concepts, but the lectures he gave over actually setting up this type of code is spotty.
Thanks for doing your work =) What do you mean by problems that are "not diff eqs"? Single variable and not vector variables? B/c RK is kind of made for diff eqs... The Wikipedia page on RK has the equations you need to implement the 4th order method (if you have a simpler RK code, you might be able to implement after a little work, it's really only typing more equations). Sorry I can't be more help right now, going to bed, but I upvoted so hopefully some one can chime in. 
Commenting because I'm interested in the answer. I assumed you had Gene_list which contained 8 numbers and wanted them in 8 different variables. I couldn't get a for loop to do what you want and have never seen one output a variable for each iteration.
Why would you want all those separate variable names? Arrays are nicer for this. Luckily there is an answer to your problem in the Matlab faq: [Link!](http://matlab.wikia.com/wiki/FAQ#How_can_I_create_variables_A1.2C_A2.2C....2CA10_in_a_loop.3F) Hope that helps! 
&gt; (forgive me for formatting..) A tip, you can put 4 spaces before any lines you want as code and reddit ignores its own formatting so that a.*b.^c.*d.*e.^f actually displays as your code: a.*b.^c.*d.*e.^f
Hi, Cheers for that. Why do I need to divide by 4? I took i and selected the first 6 points giving... &gt;&gt; i2 = i(1:6) i2 = 1 2 5 6 9 10 which would be the correct columns from the original data, albeit in a row now(?) Sorry for what I presume are such simple questions. Edit - the dimensions of my matrix are (64 15800 1), so I need to do this operation for the whole length, in a loop I presume. so that the new matrix has col 1 as x= orginaldata((a-b)+(c-d)) col 2 would be ((e-f)+(g-h)) etc all the way through. Thanks again, sorry for being such a pain.
&gt;size of my matrix (64 15800 1) Is that the size of your matrix? 64x15800x1 or equivalently just 64x15800 ? If so, what I've suggested is precicesly what you want, this is what MATLAB was built to do.
No problem. Here to help. So to understand, you have a 3D matrix, 64 x 79 x 200 , that you then use reshape() on to "combine" those last two dimensions into one? So now you just have a 2D matrix, 64 x 15800 , which you want to take your specific column/row from?
If I understood correctly: you are looking for an average curve xs, ys which would follow a path defined by the average of all your measurements. Here are two options: * binning. define bins for the x axis. for each bin: find the x-values that fit in this bin. Find all the corresponding y-values. Compute average and std for these values * interpolation. Define x-values : linspace(0,0.6). For each x-value: compute an ensemble of y-values corresponding to each curve by interpolating the value of x. Compute mean and std for this ensemble of y-values
That is indeed it. I had a 3d matrix, now a 2d combined one. I need to perform the stated manipulation on this. --------------------- my actual script/command window is like this: &gt;&gt; size(minusbackground) ans = 64 200 79 &gt;&gt; pon = reshape(minusbackground, 64, 15800,1); &gt;&gt; size (pon) ans = 64 15800
See [indexing in MATLAB](http://www.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html) A = magic(4); A(:,2) = A(:,2) * 2; A(:,3) = A(:,3) + 3;
Would need to divide original n_cols by 4, as such: n_cols = 10/4;%15000; ...but I think there are better solutions, using indexing directly...will reply if I figure it out before class...
so the problem being is this is where I am stuck. From this (pon) matrix I need to perform the following operations(?) ((a-b)+(c-d)) recurring from col 1 to col 15800 to create a new matrix that is 64*(15800/4) in dimension. So I presume this needs to be a loop or some kind, but I'm struggling to write one to do the job. u/kalstate has started me off, but I am still stuck currently :(
 data = rand(10,100); n_cols = size(data,2); ind1 = 1:4:n_cols; ind2 = ind1+1; ind = [ind1; ind2]; ind = ind(:) data data(:,ind)
This should work for data matrix of any size. Hope this helps...
AHHHH - now I'm starting to see what you're after. So, if you're doing things every 4 columns, like 1-4, 5-8, 9-12, 13-16 ... you could reshape() your matrix accordingly so that it is now 64 x 3950 x 4. Now you can do something like this: matrix = % new reshaped matrix, size== 64 x 3950 x 4 calculation = squeeze( (matrix(:,:,1) - matrix(:,:,2)) + (matrix(:,:,3) - matrix(:,:,4)) ); and that calculation matrix will be 64 x 3950. Is that something like what you're after?
that might be it yes.... I need to have a think about this as the order of data is very important Many thanks, I will leave another reply if this works
&gt;I need to have a think about this as the order of data is very important As would I. I've only used reshape() sparingly even given its power. I had to take an afternoon of plotting my data from start, each step of the transform, and to its final form to be *absolutely* certain that I was doing what I thought and expected to be doing. Good luck, glad to be helpful.
This is how I would do it as well. The : is a very useful tool in matlab, especially for commands like this. 
I think you could use something like the reshape command for this ? http://de.mathworks.com/help/matlab/ref/reshape.html EDIT: I just used a random vector of 16 elements to show what I mean. ***** A = [1 2 3 4 5 6 7 8 10 12 14 16 2133 1235 123123 123213] B = (reshape(A,4,4))' [x, y] = size(B) for i = 1: x j = 1; result(i) = (B(i,j) - B(i,j+1)) + (B(i,j+3) - B(i,j+2)); %% This is what you wanted end result' 
I don't have the symbolic math toolbox. Try [`vpa(I)`](http://www.mathworks.com/help/symbolic/vpa.html). Also, if you don't need the symbolic math toolbox you can use [`integral`](http://www.mathworks.com/help/matlab/ref/integral.html): myfun = @(x) 2*x+3*cos(4*x); myans = integral(myfun, 1, 2*pi);
have some gold, whatever that does.... seems to of done the trick as far as I can tell right now.
You didn't need to, but thank you.
I don't know if a giant array would be any less obnoxious than how you have it set up now. Generating the full cell array sucks but using a 3D array seems to make it easier to implicitly pull the subset of data you want and eliminate the need for a bunch of `find` calls. edit: Maybe a nested data structure? You could have, say, `mydata(1,2).data` be your target 1, subset 2 data points. Keeps your numerical arrays and still lets you index easily.
If you haven't guessed, this is more of my stock stuff. Except now I'm looking at options. So the structure is basically: Level 1: Underlying equity Level 2: Expiration Date Level 3: Strike Price, Ask Price, Implied volatility. If I just had them as a 5xN array it'd be ugly, but would look like: Stock1 17-April-2015 110 2.45 21.3 Stock1 17-April-2015 115 2.00 22.1 Stock1 17-April-2015 120 1.55 22.3 Stock1 17-April-2015 125 1.05 22.2 Stock1 17-April-2015 130 .45 23.0 Stock1 17-April-2015 135 .25 22.8 Stock1 17-April-2015 140 .15 23.3 That actually doesn't look too bad, tho perhaps not as orderly as the 3d array.
Thanks all! Ended up using break for now, will possibly try to convert to flags to make script more organized, thanks again!
With the mixed data types it's probably a good fit for a [MATLAB table](http://www.mathworks.com/help/matlab/ref/table.html). Depending on what you want to do with the data indexing can be a pain, but the [table indexing](http://www.mathworks.com/help/matlab/matlab_prog/access-data-in-a-table.html) should make it at least marginally less of a pain in the ass.
Maybe it's misleading what I'm trying to look for, I'm looking for a sort of trendline that runs through all the curves. Why they have different lengths is because of the sample rate of the oscilloscope and the unpredictability of the start point of the experiment, hence I have to manually zero the data. While I totally agree with you, this particular dataset has only about 24 elements, I have some that go up to 500 and it's probably impractical to fit all of them with a function.
how does THIS get upvoted? 
I usually set my optimization constraints wide so it will converge then tighten them and re-run. That way i can get a feel for how long it will take. However, if it's mid run and you stop it the values will be the best that the optimizer found up until that point.
You can use an [anonymous function](http://nl.mathworks.com/help/matlab/matlab_prog/anonymous-functions.html) instead of inline: function x0=funzero(a) x0=fzero(@(x) sin(x)+a*x,1); end
I got there in the end but that's a lot for the help! :) 
I'd suggest using dlmwrite, or just fopen/fprintf and write to a csv file. I'm surprised that fopen('file.xls','w') gave you errors but then again I don't use Matlab on a Mac.
Oh, and if it does require symbolic variables, you need to initialize x as a symbolic variable. syms x
&gt; The jar of peanut butter Did not even know that was supposed to be peanut butter. 
Hi, recent versions of Matlab (since ~2011) have GPU computing capabilities included in the Parallel Computing Toolbox, with the number of GPU-enabled functions steadily increasing. I think they actually bought Jacket in order to spice up their own GPU implemetations. If you need something free, have a look at [GPUMat](http://sourceforge.net/projects/gpumat/).
Just a question, are you trying to overlay two images that, for simplicity sake, have a green circle in quadrant I and a blue square in quadrant III? What occupies the other space or quadrants in both those images? Could it be the case that you are expecting quadrants II-IV of the green circle image to be clear but isn't the case? In otherwords, if you figure(1); hold on; imshow(blue_sq); imshow(grn_tri); are you only seeing the green triangle in quadrant I and no blue square in quadrant III? Is the layer of the green triangle superceeding that of the blue square and effectively overwriting that part of the image? ... I don't know these answers, I don't do this type of image processing, or use imshow() or the other image functions. This is just my first guess as to where to start looking.
so... will you share your secret??
You don't need to deal with SVN (a source code management system) if you don't have to compile the sources yourself. You'll be fine with the pre-compiled binares, to be found here: http://sourceforge.net/projects/gpumat/files/. Just choose the package for your architecture and CUDA version. edit: Yes, GPUmat would be an (incomplete) replacement for the GPU functions in the parallel Computing Toolbox.
Use the logical mask to recolor the original image, and then save it. Right now, your two images are not linked in any way - you have two separate data sets. If the mask is 1, take the mean of the image I at that point on the red channel with 255. This will brighten up the red channel wherever your mask is 1. Perform the operation on the image I. This will effect the original data set, so now you just have to save the image out (easy part). Furthermore, you only have to call imshow once, on your processed image, I. 
Matlab will let you change your fonts: http://i.imgur.com/MFEQzG1.png Some people find other fonts better: - [Top 10 Programming Fonts](http://hivelogic.com/articles/top-10-programming-fonts) 
Matlab also starts array-like objects with index 1. I know its not related but im still sad about it.
This isn't working. It's saying it doesn't know what the taylor command is.
ooh, I like these! Now if only I had admin rights to install fonts on this machine...
Mathematically, matrix indexing starts at 1. Given MATLAB's humble beginnings as *Matrix* Laboratory it's a defensible design decision. MATLAB being a high level language you're rarely going to run into the 1-indexing headaches you would with lower level programming that make 0-based indexing objectively better in application.
Post the code(s).
Here's the modifed Euler code they gave us function [t, y] = euler_modifiee(f, t0, y0, h, nmax, resul, mod) g = f; f = fcnchk(f); nbeq = size(y0,2); y0 = y0'; y = zeros(1,nbeq); t = zeros(1); n = 1; t(1) = t0; y(1,:) = y0'; while(n &lt;= nmax), fy0 = f(t(n),y0); if (any(~isfinite(fy0))), disp('la fonction n''est pas définie en certains points'); return; end yint = y0 + h*fy0; t(n+1) = t(n) + h; fyint = f(t(n+1),yint); if (any(~isfinite(fyint))), disp('la fonction n''est pas définie en certains points'); return; end y0 = y0 + h/2*(fy0 + fyint); y(n+1,:) = y0'; n = n+1; end if (nargin &gt; 5), if (nargin &lt; 7), mod = 1; end eq_diff_out(g, resul, t, y, h, nmax, 'd''Euler modifiée',mod); plot(t,y) end And this is the code used for the differential equation function [f]=eqdiff1(y0) % f=-0.8*0.06^2*sqrt(2*9.8)+sqrt(y0)/pi*(3*y0/4)^2; end For the most part, I know what none of this means. This isn't even a matlab class, yet they decided it was appropriate for an assignment worth 20% of the grade.
I am Sure you are absolutely right. I am a programmer that loves typical programming and I would never use matlab for fun, as I do a lot of mathematical programming for fun. I just started CS in college and just had 3 practicals with matlab and I feel like a donkey hitting my head at that particular problem every time i loop through an array or matrix. It is really not for me.
Where do you have the eqdiff1(y0) in the euler_modifee? 
eqdiff1 is my *f*
I wasn't calling the (y0) after eqdiff1. I just tried it that way and got the message "Error: Function definitions are not permitted in this context."
Odd. One thing I notice, you are missing end at the end of euler_modifiee, but I am not sure if that will fix anything. Can you call it separately? [f]=eqdiff1(y0); [t, y] = euler_modifiee(f, t0, y0, h, nmax, resul, mod);
Nope. Even if I assign y0 as a symbolic variable first, it won't.
Sorry, edit, there has to be some issue with f = fcnchk(f); and passing other variable to it.
1, euler_modifee calls your function with two parameters, t and y0, so eqdiff1 shlu be able to have these two as inputs 2, to call it run [t, y] = euler_modifiee(@eqdiff1, t0, y0, h, nmax, resul, mod);
Similarly if you want to multiply each column of an n*m array by a vector 1:m then you can do: A .* repmat(1:m, [n,1])
You could stick them into a cell array and use cellfun. 
Try starting with [this](http://www.mathworks.com/matlabcentral/fileexchange/4512-surf2stl). It'll convert your surf to an STL file, which I assume SketchUp should be able to handle.
So.... you're given 2 column vectors that have numbers 1:N in them (lets say N=9). You want to give MATLAB (or have it find) a sequence of integers between 1&lt;x&lt;N. Given this sequence, you finally want all rows from both vectors in which the sequence of numbers shows up in the first vector? ... this is my understanding of your OP. Is it accurate? ..or can you elaborate/correct?
You were on the right track with conditional indexing, you just needed a better conditionn help ismember r = [1 1 1 2 2 2 3 4]'; c = [1 2 3 1 2 5 2 6]'; w = [2 4]; i = ismember(r,w); ans = [r(i),c(i)]; 
That looks like it should work, thanks!
ah shit! That function exists? hahaha ok TYVM
It's more of a filtering question. But I think /u/SilenceFromMars gave me the right thing to do. Didn't know this function existed!
I messed around with these suggestions and was unable to get any results. I emailed my professor to get a helpful hint in the right direction and he suggested using a loop to work through the string one letter at a time. I had stopped progress on this assignment to work on other homework I have, and now I'm returning to this one again. Any suggestion for a loop method?
Soon you will learn the importance of fixed width fonts 
This is actually a pretty good question, I'd be interested to know what everyone here thinks as well as any larger bodies. I can say from my experience that I've developed my own "natural" way of coding, naming variables, processing, etc. Off hand I can think of 2 things I know I do pretty frequent: indexing and caps (ilon, ilat, itim, NLON, NLAT, NTIM) Indexing ALWAYS starts with i and constants/important things are typically in all caps. I also have started using cell arrays to hold a variable's "long name", units, a brief string about how some variable may have been calculated, and finally the data array itself: DATACELL{1,1} = 'Temperature'; DATACELL{1,2} = 'K'; DATACELL{1,3} = temp_data; DATACELL{1,1} = 'Pressure'; DATACELL{1,2} = 'hPa'; DATACELL{1,3} = pres_data; Comments I'll normally use to separate bits of my code: %%%%% INPUT DATA ARRAYS %%%%% PROCESS DATA %%%%% PLOT AND SAVE DATA I'll also have switches and experimental-setup constants at the start of my script for easy flagging/changing of the processing structure if you've got several methods you want to try. I'll try and think of more. You'll start to develop you own habbits the more you code, and you'll also see other's habbits and perhaps like an aspect and incoorporate it into your own. Well commented/documented/structured code makes life MUCH easier. Hope you and your team can agree on your code. Don't be too bullheaded, as it's the results that matter, not how pretty your code might appear.
So Mathworks actually has published a best practices guide that they recommend. I have it downloaded but I'll look for a link to post it. edit: [found it](http://www.mathworks.com/matlabcentral/fileexchange/46056-matlab-style-guidelines-2-0)
Here are some of what I consider to be good practice (though not sure about best). This is a small bit of it * Every function has documentation at the top including required inputs, optional inputs, defaults for non specified inputs, and some outputs. Also included (first usually) is `usage` so I can quickly see what is the primary structure * When it is practical, optional inputs use `varargin` and a parameter/value pair or simply a flag. This means there is never a need to use empty inputs and the order doesn't matter. I process these with a `while` loop. This gives me near infinite flexibility for extension w/o breaking compatibility * Make use of `see also` in documentation * Use white space to improve readability * Leave space around an `=` sign. And, when you are defining a lot in a row, use tabs to align the equal sign * Always indent as you work rather than doing it later. Much more readable * If you have a lot of code between the `for`, `while`, `if`,etc, add a comment at the `end` for that block * Assume you will always have someone else using your code. Comment to explain it to them! * If there is output, always use `disp` or `fprintf` rather than omitting the `;` * Write conditionals w/o parentheses. Ex: `if ii &gt; 1` and not `if(ii&gt;1)` * If there is an important array, have comments somewhere describing the dimensions and the index * Script everything! Figure size, annotations, data loads, etc. The goal is simple, consistent, reproducibility Again, that was a small subset of what I go by. I am looking at those other Matworks guidelines and may incorporate some that I am not doing. Now, not Matlab best practice but coding best practice: **Use version control!!** (and back it up). `svn` and `git` are widely used and do the job nicely. Dropbox offers some degree of version control but it is really not nearly as good. And, if you self-host your own version control, back that shit up early and often! I cannot begin to tell you have useful SVN has been for me. I can follow the progression of a project, including comments along the way. Also, on the note of reproducibility, not only can I reference the code I used to generate a figure, but I can also reference the version. BTW: &gt; Me and my team often argue about naming conventions(y_offset, yOffset, YOffset etc), how to structure the code(spaces, %%, comments etc) Honestly, it doesn’t matter much but agree to something and stick to it!
Great! Thanks! /u/changetip $1
The Bitcoin tip for 2,667 bits ($0.93) has been collected by *TDual*. [ChangeTip info](https://www.changetip.com/tip-online/reddit) | [ChangeTip video](https://www.youtube.com/watch?v=_AnfKpypMNw) | /r/Bitcoin
Could you either replicate a previous month from a different year or find the mean value for a missing month from the values before and after the missing month? How much of a difference would this make to your results in the end is probably what you've got to ask yourself. The missing value in time series analysis is usually solved in this way, even if this isn't ideal. 
Something like this should work. d=size(A); for i=1:d(2); B(i)=(sum(A(1:4,i)))/4; A_new(1:d(1),i)=B(i)+A(1:d(1),i); end; cheers 
The problem you have is that, in order to find the eigenvectors, you must have all values otherwhise the eigenvalues and eigenvectors will be a function of the missing values. Matlab function eig() uses an algorithm that needs all thevalues in order to compute eigenvectors. The best answer in your case is maybe find the value of the missing point using some other method, such as a linear prediction. You can read about it in *Hayes, M. H. (1996). Statistical Digital Signal Processing and Modeling.* New York: J. Wiley &amp; Sons
Try 'table' instead of 'column vectors' as your import format. Strings can't be imported into numeric vectors.
Yip essentially the second one. You could do a rolling average too which allows you to get a sort of local mean which is a trade off between the whole series mean and a months mean. Hope that helps :) 
http://i.imgur.com/16m5UXG.jpg
Just use a for loop, increasing from 1 to the length of the input string. Each time you loop, make a bunch of if statememts comparing the input string at the ith position with all of the letters you are looking for. Then simply replace with what the letter should be . I think this is an example of the if statements you will use within your loop. if strcmp (str (ii),'A') str (ii) = 'F'; end 
This would be something like? neighbors = (JAN,2000,-2:2,-2:2); missing(JAN,2000,x,y) = mean( avg(JAN,:,x,y) + mean( neighbors ) ); I guess you could even go +/- month in time as well... I'll have to decide how to fill the NaNs. Thanks for your help. EDIT: perhaps add some weighting to one (spatial averaging) at the expense of the other, if justifiable.
The import tool, and xlsread as well, does not see any strings at all in the imported file. I have been using the same script for importing the strings, and I import them into a cell array. However, when opening the file today, the tool does not see them. Here is the script for the import: (Should be working fine.) [~,~,file]=xlsread('/Users/name/Documents/Matlab/file.xlsx','Sheet1'); file = file(2:end,end); file(cellfun(@(x) ~isempty(x) &amp;&amp; isnumeric(x) &amp;&amp; isnan(x),file)) = {''}; 
I wrote a [chapter in a book](http://www.wiley.com/WileyCDA/WileyTitle/productCd-3527409491.html) about solving ODEs in simulink for neuroscience. If you can't drop $150, [check out youtube](http://www.youtube.com/watch?v=_DTdgp-oIUI).
OK, sorry. That's weird. Did you do anything to the file that may have broken it? Did you reboot and/or restart MATLAB?
Can you interpolate an estimate of the missing values? 
I have changed the file, but not in such a way as to destroy it. I just added one column. I have done all the usual fixes, yes. I have also tried another file (with only the strings I want, in one column), but the import tool was completely unable to open the file. It did open when I added numeric values to the file, but did not read strings.
That looks about right and honestly when you're filling in values its a bit of a trail and error situation, depending on data. I'm fairly certain that's an OK approximation of the missing values. There are [far more complicated](http://gking.harvard.edu/files/pr.pdf) ways of filling in missing values. The financial toolbox's [fillts](http://www.mathworks.com/help/finance/fillts.html) employs more advanced interpolation methods such as cubic so take a look at that if you aren't happy with your results as with the simple mean value. Glad I could help give a bit of direction, good luck! 
You should look into fourier transform and filters. A Fourier Transform can be applied to look at your data in frequency space, and then a filter can be applied to keep the frequencies you want. Then you do an inverse Fourier transform to bring the data back into time space. In matlab: fft(data)=Fourier Transform of Data ifft(data)=Inverse Fourier Transform of Data The filter is probably the hardest part. Essentially you generate a vector of 1's and 0's the same length as your data vector. Use 1's for the indexes you want to keep, and 0's for what you want to eliminate. Here is an example of a filter: %frequency vectors w0=2*pi/(N.*dt); %rad/hour freq=(w0.*m)/(2*pi); %cycles/hours period=(1./(freq)); %hours/cycle %filter between 1/13 and 1/10 for i=1:length(freq) filter(i)=0; if (freq(i)&gt;=1/13) &amp;&amp; (freq(i)&lt;=1/10) filter(i)=1; else filter(i)=0; end end I chose to keep frequencies between 1/13 and 1/10, but you can make it whatever you want, and even choose multiple ranges. This should be a good start. If you have any questions, I will try to clarify. EDIT: In this case, I was looking at tidal data with periods of 12 hours, so I wanted all periods between 10 and 13 hours per cycle.
The typical approach to this involves finding the lowest rank matrix that matches your measured values. Emmanuel Candes was one of the earlier publishers on it - his page might have some code. This task is often referred to as "matrix completion" or the related "robust PCA" which involves a decomposition into sparse and low rank matrices. The math gets pretty serious pretty quickly - this is an active field of research.
You shouldn't be inputting your data manually like this. Store it in a document (txt or csv file). Alternatively, save variable with the data in a .mat file (see the save command). This isn't a very good way of visualizing the data. Even with appropriate labels, it becomes a mess. 3D plots are in general awkward to use, but is especially terrible for categorical groupings. The reason why you think the data isn't displayed correctly might have something to do with the way the labels are handled. Different functions will label things differently. For example, execute the following: A = randn(10,10); subplot(1,2,1); pcolor(A); subplot(1,2,2); imagesc(A); And you will see that the way ticks are handled is different between the two functions. I'm not sure how mesh/surf handles this, but that's what may be getting you confused. At any rate, I strongly advice finding another way to visualize this data.
I had a spark of brilliance on my drive home today. That, or I finally connected *these* dots. (I believe) I saw in one of the references I was reading that it is advised to normalize the data: x_nrm(i) = ( x(i) - x_bar ) / x_std; and that in doing so you can "add back in" the missing data in the form of 0s as they no affect on the variance of the *real* data. At least, that's how I connected this all on the drive. I'll have another look this evening. If this doesn't work, I'll likely go with my last idea. Thanks for the helpful discussion.
&gt; The math gets pretty serious pretty quickly I'm already *knee-deep* in the maths that I know and understand from my undergrad, and I'm just now getting *a full (?)* grasp of 1-D EOF, SVD, how to set-up, and how to interpret the EOF/PCA. I'm not sure how far a) I'll need to (likely just to REOFs and EEOFs) and b) I'll be able to with my current knowledge. I've got a few ideas currently on how to deal with the NaNs, if I can swallow the maths I'll add robust PCA to that list. Thanks for the idea.
Ya, I've got a few ideas floating around. This post gave me some good discussions and tips to follow.
&gt;First, my z code is all on one line and very long. How can I move say three teams to another line, and another 3 teams, so its clean and can screenshot all the code with one shot. Another poster (u/geebub) mentioned to make an actual data file, but for your knowledge you can *truncate and continue* lines of code with 3 period/dot like so: station_xy = [ ... 12.43 4.39; ... -2.04 10.01; ... 9.69 -3.85; ... -20.37 -15.83]; &gt;Second problems is my output. The data I input is for all 30 teams but when you look at the graph, only 29 teams show (Winnipeg Jets does not) and the last year for 1994 does not show either. My first hunch also relates to u/geebub's post: I don't think mesh/surf are the best ways to go for your display. What *I* think is going on in relation to *apparently* having one less team and year is that the mesh/surf is actually an interpolation that uses your data as the verticies. Think of it like this, you've got a grid of 21yr X 30tm but to make a facet/slope, you need 4 verticies, 2 on any side. MATLAB calculates the slope of this plane and color-codes the display for that grid as such represented as a singular number (V) from 4 inputs (x): x(1,1) --------------- x(1,2) ... | | | | | | | V(1,1) | | | | | | | x(2,1) --------------- x(2,2) ... : : : : : : So in reality surf/mesh produces "useful information" (the coloring) on a 20yr x 29tm grid, centered (offset +0.5 in x and y) on the original 21x30 grid spacing. If you were to continue this pattern down as well as left, you'd see that when you get to the last row and column there isn't another *(phantom)* side to make that singular number *V*. In order to have a 21x30 mesh you would need 22x31 input grid, and you would have to **extrapolate** an entire *new* team's record **as well as** an additional year's worth of games for all teams *plus the new, extrapolated team*. &gt;Third issue is that the dates are backwards. 1994 on my data is really 2014. Simple issue to solve, try something like: xvect = 1:10; xvectNEW = xvect(end:-1:1); and for the matrix, I suspect that you inputed the data in from most recent to oldest (2014-1994, as your OP suggests). To flip your matrix around, look into using [flip()](http://www.mathworks.com/help/matlab/ref/flip.html) and it's derivative functions, but those I suspect ultimately call back internally to flip(). *BE CAREFUL:* you don't want to flip your time vector AND your data matrix, as you'll still end up with dates going opposite of the data they represent. I would orient your data with the *&lt;1994-2014&gt;* convention. A suggestion for displaying the data: make a series a subplots for each conference/division and simply show the team's time series. You'll have less on a plot, so line plots will look fine if you use 'LineStyle' appropriately. You could then make another (sub)plot(s) for important teams you want to accentuate further.
I don't have my MATLAB right in front of me but when you check what the class of the object is after the child class constructor is it a parent class object or a child class object
[imrect docu](http://www.mathworks.com/help/images/ref/imrect.html) Do you want this done with user input (interactively) or automatically/iteratively to select the "best" one (rectangle) for further processing? If it's the latter, I don't think imrect is what you're after.
So you want the user to be able to drag a fixed size square around the image to make a selection? Use the setResizable method on imrect. 
This is strange. I have all me code at work so I can't check until Monday but I've definitely written child classes that inherit methods from a super class and return object of the child class. I just don't recall the details of the implementation off the top of my head. It should work as you wrote it
The question paragraph and the first paragraph mirror each others' language. As you suspected, you are overthinking the problem. Solve for the probability P given p,n,k.
Had an idea. Just hat if you give the child class a dummy property like third and during the child constructor put in the line: Obj.third = 1; 
Is i defined above in some code you haven't copied? My first thought is that T2 and P2 are both column vectors and b is the same size (column-wise) so that T2 and P2 get put into b's 1st and 2nd column (respectively). I think it may just be "bad" coding practice that i (an index, not sqrt(-1), and the use of "i" is questionable in its own right) is included, or i is defined prior as a logical indexing such that T2/P2 are smaller than b but the same size as sum(i) such that they only go in the locations where i==1 and are omitted where i==0. Just my initial guesses. *EditL I don't know why for some reason I choose to read the OP in a more complicated manner than it likely is. T/P are likely just singluar values being calculated an then stored in a certain column per experiment, row 1 for variable A, for 2 for B, row 3 for C...
Without seeing all the code its hard to judge exactly what is happening. but assuming this occurs in a *for* loop of some kind (and that T1, T2, P1, P2 are all defined) then it would seem that the code is putting the T2 value into the 1st row of a matrix B (at the ith column) and then doing the same for P2 but in the 2nd row. If you post more of your code (if there is more) then we could perhaps be more helpful.
Very interesting stuff! I never really touched Fourier transformations in my calculus studies so I need to read a bit about it. Do you mind if I maybe PM you later on?
I remember reading somewhere that Reddit votes fluctuate around some small range. In this article (http://www.dirjournal.com/internet-journal/reddit-weird-behavior/#fluctuate) they listed the fluctuation at +/- 3. This could explain some of the downvoting on this small sub-reddit.
That's true, but it shows the true "upvoted" percentage in the post info in the upper right corner, from which you can tell that people are actually downvoting.
So like this? [R B G] = imread('cameraman.tif'); [R B G] += [50 50 50] 
It's not a problem with downvotes. It's a problem with shitty disingenuous questions. "do my homework for me. " " read the documentation for me. " "I have code. Could it be better? I won't tell you anything about it or provide an example." "this error says 'index out of bounds'. What does that mean? I know my index is bigger than this matrix, could that be it? LOL" These are questions that *deserve* downvotes, and we get a lot of them. 
It's as simple as: Img = Img + 50; If you want to add 50 to just the green channel of an RGB image use: Img(:,:,2) = Img(:,:,2) + 50;
Spot on synopsis. If you come across as lazy or not having done at least a cursory level of investigation you can bet I'm going to down vote your post. 
Yeah but that's not all of 'em. I had a legit question on a side project I'm working on, couldn't figure it out, posted here with as much information as was needed. Literally everything pertinent to the problem. Downvoted within 10 minutes. 3 days later it made its way up to a whole 3 votes, but that doesn't change the fact that people are just downvoting here because they assume everything is someone's homework problem... Guess what? In the real world we have a lot of situations that look remarkably similar to homework problems! We all learn matlab through utilitarian means. Each little trick we store away builds into our ability to handle larger and larger problems. The roots of all of our posts undoubtedly are similar to someone's homework assignment. [Here's a good example](http://www.reddit.com/r/matlab/comments/2od6vv/how_to_take_mean_of_the_first_numbers_of_column/). 0 rating, 33% upvote ratio. You have absolutely ZERO idea what OP is using this for and I can come up with a dozen scenarios that have nothing to do with homework. WTF /r/matlab ? Compare this to other subs like /r/arduino and it's really not even close. One encourages learning and the sharing of knowledge, one does not. Edit: And no, those questions don't *deserve* downvotes. It takes minimal effort to help someone with those kind of questions, even if it is the 5th time you've read it this week. Be a better person. "Check out the documentation for cellfun()" "We could help you better if you posted an example data set." "Google is great for understanding error codes, try searching 'matlab index out of bounds'." 15 seconds and you might have helped someone that will use this bit of information to grow their understanding of Matlab.
I just died a little inside reading this. CHANGE IT BACK. CHANGE IT BACK RIGHT NOW.
Honestly, I think it's far too common to look at the page and nearly everything has scores of 0. And some are some really legit questions!
Why don't you at least try doing the homework yourself before giving up so easily. 
ah great thanks a lot
try T=taylor(f,n,m); ezplot(T,[-25,25]) where n is the order of the taylor series, and m is where it is centered from the MATLAB help website: taylor(f,v,a) computes the Taylor series expansion of f with respect to v around the expansion point a.
We had a matlab project due that I did horribly on. Apparently our final exam will be asking questions about it and my professor refuses to go over the solutions with us. I'm looking for any kinda of solutions/hints for this.
I have played around with Matlab GUIs and found [this example](http://www.mathworks.com/help/matlab/examples/creating-user-interface-with-a-graphical-table.html) useful. I found it on [this landing page](http://www.mathworks.com/discovery/matlab-gui.html).
Yes, that function should only return one u value and one v value at each (x,y). The trajectory of the particle changes due to the force of drag based on the relative velocity (u-x), where u is the velocity of the flow and x is the velocity of the particle. I guess I need to turn the flow field function into an equation because right now that u is a constant evaluated at the initial position. I just can't wrap my head around how to do that.
 size(H) :: 11 1 size(inv(C)) :: 11 11 therefore you cannot do H\*C^-1. What you need to do is in line 52 little_h=inv(C)\*H as per the example you gave.
ahhh, thank you! of course!
you can either just do the plotting as in your code above, and throw in hold on or you can save all the ODE results into giant ass Y and T matrices then plot that at the very end in one command
to get a new position of the particle, you can just do a first-order numerical integration: s(t_i\) = s(t_i-1)+u(t_i-1)*Δt+f(u-x,Δt)
*"If I show other people how to use MATLAB, I won't have that advantage on my Resume"* -An engineering buddy in one of my classes. I've a feeling that that might be part of the problem here as well. No one wants to help anybody because "I might be helping them with homework" or "They should learn how to do it themselves like I did!" It's not the sub, it's the people on the sub. They're just kind of shitty. Close it, clear it, clc. 
Have a look at the below to get an idea how to plot without sharp inflections. http://www.tutorialspoint.com/matlab/matlab_plotting.htm
Don't save to the MATLAB program directory
Thank you, solved the problem. You just saved me a lot of coding!
Use this constructor. Notice that you will set the size in the position parameter. &gt; h = imrect(hparent, position) creates a draggable rectangle on the object specified by hparent. position is a four-element vector that specifies the initial size and location of the rectangle. position has the form [xmin ymin width height]. Then use setResizable on H.
My guess is that the complex values come from the dlnA1(j) = (log(A(j)) - log(A(j-1)))/(ndx); statement if A(j) or A(j-1) get smaller than 0 (not sure if thats how it works in Matlab though). Other than that, I don't quite understand what you are doing, how the underlying problem is defined and why you seem to be solving an ODE.
Is this your homework?
Not really, it was part of a list of exercises that we should try to get familiar with Matlab. 
Have you looked at the documentation? doc for Try running a few of the examples to see how it works before tackling this problem. A for loop just repeats a statement several times. You can assign vales to an array during the loop to collect them which is useful for your problem.
"hold on" A simple solution. Thanks!
Sigh, the documentation isn't going to solve every single problem for you. It is however rather helpful. The for loop is a fundamental part of many languages - not just Matlab. I'm unwilling to help because you're asking for help at the very first hurdle. Consider this example from the [documentation](http://uk.mathworks.com/help/matlab/ref/for.html?searchHighlight=for): Create a Hilbert matrix of order 10. s = 10; H = zeros(s); for c = 1:s for r = 1:s H(r,c) = 1/(r+c-1); end end use it to get started on your example for n = 1:12 %months stock = stock - 5000; % amount shipped stock = stock + 8000; % amount produced stock_month(n) = stock; end plot(stock_month) Once you get this working you can add more sophistication regarding month names etc. I don't what you mean by biscuits.
I have no idea how much MATLAB you already know but: First deal with the things that don't need to be in a *for* loop: 1. define the production rates of the two factories 2. define the normal stock depletion rate. 3. set the opening yearly stock level 4. preallocate a matrix for the stock levels using *zeros* (2 rows 13 columns) 5. set the 1st and 13th columns to the opening stock level Now the for loop needs to: 1. Go from 2 - 12 (we already set the two January figures.) 2. Add production to stock 3. remove depletion from stock. 4. place the answer into the matrix. 5. repeat that for the other factory You can then plot it outside of the for loop.
"I don't what you mean by biscuits." Corrected. I still don't know what the hell is going on (where did you get -5000 and + 8000 from?) so I think I'll just give up on it. Thanks for the help anyway.
They are place-holder values to give you an idea of what's going on. (you'd need to replace them) Giving up isn't really the right thing to do, I assume this is for a class of some kind, and its probably going to get harder. We're all trying to help, but doing it for you isn't going to get you to learn what's going on.
5000 and 8000 are just numbers I made up that refer to the stock shipped and stock shipped. You give similar numbers in your first post. You'll need to give stock a value before the loop. Perhaps start on page one of the documentation and read the introduction if none of this makes sense.
Ok that explains it thanks. As for the documentation, I'm not sure if I'm reading the right thing. I type "doc for" and it just displays one small page with 2 or 3 short examples at the bottom. Is that it?
Thanks will give it a try, we haven't learned anything on matrices though and we were told we only need the for, hold and plot functions. I'll look into it though.
Use type doc or click the help icon. It's also here: http://uk.mathworks.com/help/matlab/
I don't deal with images, but my first guess is that the resolution is the same (256x256), but the .png format saves something like [R G B] triplets for its coloring where .tiff doesn't. You need to think about how to either compress the png RGB down to a single value or take the tiff value and "explode" it into a RGB triplet. Bottom line (and you're right): you need to (somehow) get your images having the same dimensionality. I've no clue if this would work (or produce anything meaningful) but maybe try taking the tiff image off of the png image 3 times, one for each of the 3 dimensions.
Can you do this problem by hand with paper and pencil? That's the first place to start. Think about the problem mathematically, then how you might do it step by step, then finally get into representing your problem in the specific language (MATLAB) that you're working in.
Do you have any other programming experience or is MATLAB your first language?
Thank you for reinforcing my point. &gt; Your example looks exactly like a homework question. The way it is posed is exactly like a homework question I would have come up with. Legitimate, real world examples look an awful lot like homework problems. This is a credit to your teaching. Assuming that everything that appears to be homework is an assigned problem is just ignorance. When I (or many others on this forum) have an application which takes me from A to X, we break it down to simpler components and tackle each one. These components look a lot like, "How do you get from A to B? Then B to C? C to D..." and so on. The A to X problem likely does not resemble homework, but I guarantee each of those intermediary steps does. If we're only stuck on one of them (like step F to G, which won't really make sense in the context of A to X without going into a LOT of unnecessary background), why not frame it up in the most efficient way possible? Where we are (step F), where we need to be (step G), what is not working thus far. I couldn't care less how often matlab is taught in the engineering curricula; I haven't been in college for 10 years.
You can try [rgb2gray](http://au.mathworks.com/help/matlab/ref/rgb2gray.html).
Nope. Regardless of how the image file is represented when it is on the disk, Matlab represents the matrix the same way after you read it in -- at least, assuming you do it in a vaguely normal way (i.e., with `imread`). To OP: From what you've written, it seems pretty clear that you are fairly new to Matlab. So, apologies if this sounds condescending -- not supposed to be, I just want to start with some basics to make sure we are on the right track. If you read in an image (again, I'm assuming you are using `imread` and not some weird function from the Internet that does God-knows-what), if your resultant matrix is NxMx3, that means it is an RGB color image. So in your case, your PNG file is a color image that is 256 pixels x 256 pixels, where the first 256x256 plane in dimension 3 is the red channel, the second plane in the third dimension is the green channel, and the last plane in the third dimension is the blue channel. If you use `imread` and only get a 2-D matrix, that must mean that your image is in grayscale. So, the TIFF image must be a 256x256 pixel grayscale picture, where each element in the matrix simply represents a brightness value. There are actually various ways that the pixel values can be represented, but the most common way is as integers from 0-255. If you are not aware that you are trying to compare a grayscale to an RGB image, one possibility is that both pictures only contain grayscale INFORMATION but the PNG image is saved in a full-color FORMAT. In which case the easiest thing to do is probably to re-save your PNG image as a true grayscale image. If you're trying to do something else or my guesses are wrong, you're going to need to give us more information on what exactly you're trying to do, what commands you actually entered to obtain these matrices, what the image files are, etc...
[Here](http://www.reddit.com/r/matlab/comments/2ob7yw/how_to_get_subclass_using_superclass_methods_to/) is a question I posted recently. I'm not a student, this is not a homework problem, and I googled everything I could think of. 33% upvoted, and it's not been answered. Did I do something wrong? No one who downvoted gave any indication as to why they think this question is inappropriate. Perhaps this question is solved with a "simple google" but the fact of the matter is I just don't know what else I can search for. What would you say I should have done differently w.r.t. my post?
Thank you! I actually wanted the user to be able to drag the first one instead of it popping up, but this works too.
There is no easy way to do it. If a rgb image(3-D) is converted to gray scale(2-D), some of the original information is lost. Converting gray scale image to rgb is called image restoration, which almost can only be done by professionals. Of cause you can also use imgRgb = cat(3, img, img, img) to convert the gray scale image to a rbg image, which is 3-D, but the new image is still black and white. You can't restore the lost information. edit: gramar
ah yes, this looks like exactly what I want thanks a lot
Thanks for the replies. T1, T2, and P1 *are* defined as one number each. I thought b(1,2...n , i) meant it would put the values in some matrix? I'm not sure if I should post the rest of the code because it is very long (IMO). And I don't know how to post a very long code in Reddit. Some parts end up not showing as code.
&gt;*EditL I don't know why for some reason I choose to read the OP in a &gt;more complicated manner than it likely is. T/P are likely just singluar &gt;values being calculated an then stored in a certain column per &gt;experiment, row 1 for variable A, for 2 for B, row 3 for C... This is exactly what I was thinking it was for! Is there another way to do this?
Professors love when you turn homework in using fun fonts }:)
Look at the documentation for uicontrol, the simple examples there should show you the basics.
hold all will change the line colors for each plot.
Yeah i am a n00b at coding. I can't find a page that fits exactly what I want :(
You are welcome to message me. I am no mathematician, so I can't explain the calculus very well. I can explain what the resulting vector means though. A Fourier Transform is kind of like a histogram of the frequencies contained in your data. For example, if you did a Fourier Transform of a single sine wave, the resulting plot would be zero at all values, except for a spike at the frequency of the original sine wave. I am just finishing up a class on this stuff, so feel free to ask me whatever. I want to get better at this, and explaining it is a good way.
Have you done any work with using fringe patterns in order to get a 3D reconstruction?
I do have some knowledge in 3-D reconstruction but not in terms of using fringe projections. I have worked with tomographic data for electron microscopy however I use other specific software for this. What type of video/image format would you work with these in? 
I found this hopefully this can help in someway. http://www.mathworks.com/matlabcentral/fileexchange/24852-windowed-fourier-transform-for-fringe-pattern-analysis Also, there are a lot of optics behind this in which you need to be aware of including the light source you are using, the surface properties of the object you are projecting onto, the camera system you are obtaining the fringe information with, fringe resolution and the signal intensity in relation to the geometry(topography) of the surface. 
You could run for just your internal loop and use tic/toc or two calls to clock and you get get an idea on the time it takes to to your internal loop. You could look into running your code in parallel. Either start multiple MATLAB sessions if possible and split the looping amongst the children **OR** (and this is prab the better solution) look into using parfor for your for-loops.
Most of us here have NO experience with ECG data... Can you provide a plot, maybe with some MSpaint skills showing what you're after? What are R/T peaks?
Interesting, I had not heard of the "parfor" command. Will have to play around with that, thanks.
Ah! But that other comment made me realize that (duh) one can run several MatLab's simultaneously. I did the loop for 10 of the ~1000 iterations and it took about 90 seconds, so assuming the first 10 were a good representation of every subsequent 10, it should take about 2.5hrs total (so roughly 30 minutes to go, hopefully!)
Post again in 30 minutes and let us know if this was correct!

What does your distance function look like? And what's the general form of Centroid_Lat, Centroid_Lon, t.Lat, and t.Lon? It's probably possible to write this code in a vectorized format that doesn't rely on for-loops. If your code completes in the next half hour or so, this might not be an issue but it's still good practice to think about it. Vectorized code tends to be much more efficient than for-loops.
 function varargout = inputNumber(varargin) gui_Singleton = 1; gui_State = struct('gui_Name', mfilename, ... 'gui_Singleton', gui_Singleton, ... 'gui_OpeningFcn', @inputNumber_OpeningFcn, ... 'gui_OutputFcn', @inputNumber_OutputFcn, ... 'gui_LayoutFcn', [] , ... 'gui_Callback', []); if nargin &amp;&amp; ischar(varargin{1}) gui_State.gui_Callback = str2func(varargin{1}); end if nargout [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:}); else gui_mainfcn(gui_State, varargin{:}); end % End initialization code - DO NOT EDIT function inputNumber_OpeningFcn(hObject, eventdata, handles, varargin) handles.output = hObject; guidata(hObject, handles); function varargout = inputNumber_OutputFcn(hObject, eventdata, handles) varargout{1} = handles.output; function inputNumber_Callback(hObject, eventdata, handles) handles.innum = str2num(get(handles.inputNumber,'String')) innum = handles.innum; check = isnumeric(innum) if check == 1 instr = num2str(innum) instrlen = length(instr) for i = 1:instrlen if instr(1,i) == '.' outstr = 'Non-integer detected'; set(handles.edit_message,'String',outstr); disp('non-integer detected'); end end end guidata(hObject,handles); function inputNumber_CreateFcn(hObject, eventdata, handles) if ispc &amp;&amp; isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end function edit_message_Callback(hObject, eventdata, handles) function edit_message_CreateFcn(hObject, eventdata, handles) if ispc &amp;&amp; isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor')) set(hObject,'BackgroundColor','white'); end 
I have certainly noticed this behavior as well. I've posted a few queries here myself and even tried to contribute an answer and gotten almost immediate downvotes...very discouraging. I use MATLAB a lot in my research (as does my collaboration) and it is pretty cool what you can do with it, but it is a sour taste is a good way to describe a lot of this sub sometimes. There was even a [post](https://www.reddit.com/r/matlab/comments/2l5stb/odd_memory_behavior_with_cell_arrays/) I made recently about what was an odd memory issue with some cell arrays to see if anyone might have insight. Posted what the purpose of having a giant cell array was, and even code on how to reproduce the issue (and to show it isn't some silly mistake like forgetting to erase a variable). Yet 33% upvote with score of 0. A helpful comment about posting to TMW themselves (which I did) but certainly I don't think that is any hw assignment. I get that answering hw over and over can be annoying, but it honestly isn't that hard to take an instructive rather than a blanket destructive tone as /u/SwellsInMoisture points out. 
QRS peak? Greater than two nearest neighbor and also greater than one? 
Awesome! Thank you so much for your help! So, in my for loop, I have matlab calculating the polyfit, and then for each of the "if" statements, it assigns a certain color ( eg c=[1 0 1]) for each slope range. This is all within the for loop. However, how do I get all of the coefficients, with their colors (so coeffs(1) and coeffs(2)) and c= [ # # #]) out of the for loop? Additionally, I have this for dist = 1:25:last x=dist[] y=elev[] p = polyfit(x,y,1) but I don't know how to call the appropriate range of values for the for loop. Ie, for the first iteration, I want it to call dist[1:25] and elev[1:25], and for the second iteration, dist[25:50],elev[25:50]. How do I do this?
First language
That's what the teacher told us to do, and I did it, but having trouble putting the problem into matlab
Glad you got somewhere. As for your first bit: to "save" things you calculate in a loop, you've got to a) (pre-)define what/where you want them stored and b) make sure you *actually* put them in their appropriate place. For example, lets say we want to calculate density using the ideal gas law from pressure/temperature observations on some MxN grid: pres = % &lt;-- loaded in MxN pressure temp = % &lt;-- loaded in MxN temperature [nX nY] = size(temp); den = NaN*ones(size(temp)); for ix = 1:nX for iy = 1:nY den(ix,iy) = pres(ix,iy)*temp(ix,iy); end end Now, I realize that a) this is really simple, b) not the right formula (pV=nRT), and c) you could do this calcuation without for-loops (pres.*temp), but at any rate, hopefully you see how to set up a calulation to "save" things you do each iteration of a loop. Also, just to note, I pre-allocated the density matrix as all NaNs (not a number) as those values MATLAB has some nice functionality to ignore as missing values. Now, for your second part, it seems to me like you're pulling off chunks of 25 and doing "something" to them (something in a loop?). To get what you want pulled off, try something like this: for idist = 1:25:last curIDX = idist*(1:25); xNOW = dist(curIDX); yNOW = elev(curIDX); p = polyfit(x,y,1); end *SHOULD* give you (iteratively) the parameters for a line (slope/y-intercept) for *JUST* that set of 25 indices, the next itertion will find the line for the next 25. Be careful, while it may not break your code, you may get "funny" results for the last iteration if the scalar value in "last" isn't a nice, even multiple of 25. I don't think it will make too much impact here as you're just calcuating a line (you'll just have fewer points) but it could either down the road with this current project or you may run into a situation that is much more sensitive to "last" and wanting to have perfect multiples for things.. Glad you're getting somewhere.
Sounds like first you're trying to interpolate your data to a common grid? If so, look into the interp() famliy of functions. If you are just trying to make binned data or histogram/PDF the data, look into hist() and it's relatives.
Any experience with morphological image processing?
`parfor` is very powerful but to really unlock some of its power, you need to think about the problem. Obviously, the first task is to make sure that Matlab can classify all variables. Read up on the different types and make sure it is clear. For the most part, it can be used as you would expect. if you do some fancy indexing (which I often have to do), you may have to play around so that Matlab can handle it (Usually I have to make a smaller, dummy matrix then turn the big one into an easier-to-classify reduction variable). The second task more pertinent to your problem is to think about how exactly things will run. Matlab will only do the outer-most `parfor` in parallel. This is a pain in my work since there are some times when the same code would be better to have a serial run of parallel jobs or a parallel run of serial jobs. YMMV Finally, you want to consider overhead. This is really an issue with large codes that use other parallel interfaces (MPI). But doubling the number of processors may not double the speed. There is diminishing returns. Of course, one of the ~~faults~~ beauties of Matlab is that you can often just not think about this stuff and let it run and it will be fine. Playing around is really the best bet
Saw that. Works perfectly for plotting. Getting data out of it is another story.
I may be mistaken, but I believe the '-append' flag for any of the file writing routines means to open the file, find it's end, start another line, and append the new stuff to the end of the file, which if you were to think of rows going across and columns going down, will make one long singular column if you are trying to write all 9 columns of a 4 x 9 matrix using dlmwrite('append'). But, at any rate, you are simply just trying to append a nRow x 1 column vector each dlmwrite() call, so you'll just be appending into one long column vector. You may try simply transposing (use Y(:,1)') so you are writing a row vector and each dlmwrite('append') call simply appends a new "row" to the file which is really the "column" of your data you're writing. You'll need to be careful and remind yourself to re-transpose the data once you import it back into wherever. **OR** you could set up a matrix to save your Y(:,1) column vectors in, save them each time you call your ode, and then once and finally save your entire matrix with columns still representing the columns of your experiments (instead of the rows in the transpose method).
The way it is implemented in Matlab is a bit confusing for me I must admit. I used FEniCs for solving a problem of this type not long ago. Another thing I noticed is that you are using a CFL condition for the timestep but you dont use a norm for either the velocity or temperature - where did you get your condition from? Normally it should look something like 'dt^k+1 = C * h/abs(u^k )' as far as I recall.
It seems that mat2gray wil create an indexed image from 0.0 to 1.0. Furthermore, im2double will not create an indexed image but just convert your 8bit integers into double precision. This will work: im_gray = mat2gray(im); im_double = im2double(im)./255; im_diff = im_double - im_gray; and if you would like the final image to be of uint8 im_diff = uint8(im_diff) 
Defined in this way x(t) of t is a function of t (I guess), to differentiate with respect to x you have to define x and y as variables: syms x y And then diff(x*y,x)
I only have experience in the sense of some deconvolution filters. For instance I usually work with deconv. kernels with a matrix size of 3x3 where I can apply smoothing/blurring, edge detection, and some others. The size of the filter kernel (structure element) should be relatively around the same size (spatial frequency) as the structure you wish to successfully filter. Sometimes the image may be too large where the filter kernel may actually degrade the image. In this case is it good to bin(resize) the image by a factor of 2,4,8 etc. in order for better filtering conditions. 
Ok. But what if i want to differentiate x wrt t? diff(x,t) will equal 0 then, right?
So in terms of inverse scale space, I assume you are talking about the spatial frequency and using the inverse Fourier Transform of the image which, when applied can enhance either the lower or higher spatial frequency data contained in the image. Is this correct? Also, in using neutron imaging do you image using the transmitted beam or a backscatter detector?
you should have a clear understanding of what localfunction input params and output params are. from there you can write a unit test script that will pass in i known set of values either fixed or you can have it run through a range and then compare the output of the function to that which you expect the results to be. you can also run it with invalid inputs to see how the function will react to it starting with 2013a matlab has a built in xunit framework but you can get different testing frameworks from third parties and the file exchange or you can make your own
Yes thank you, this is true.
There is no built-in way to do this in matlab. Here's a function I use to do this kind of partial differentiation: function M = fdiff(T,f) s = char(f); % converts the symbolic variable to a string syms t ft % define time, t, and dummy variable ft eval(['T = subs(T, '' ' s ' '', ft);']); % substitute time-dependent variable to dummy variable ft M = diff(T,ft); % differentiate symbolic expression T w.r.t. ft eval(['M = subs(M, ft, '' ' s ' '');']); % substitute back ft to f(t) end Then you can use it like diff: fdiff(F,x) Another way (actually what the function above does automatically) would be to define x and y without their dependence on t, do the differentiation, then define x(t) and y(t) and substitute them in the result: syms x y F=x*y; z=diff(F,x); syms x(t) y(t) subs(z)
Thank you. I will try this.
Here's what my matrix looks like: matrix_us = zeros(2,13) z(1,1) = opstock_us z(2,1) = opstock_eu z(1,12) = opstock_us z(2,12) = opstock_eu z(1,13) = opstock_us z(2,13) = opstock_eu Tried the line of code you provided and it's not making a difference, still just giving one answer
where you have z that should be matrix_us (which should probably be renamed but that doesn't matter right now.) The line I provided will need to be changed to take into account the fact your matrix has 2 rows. Something like: stock_us = matrix_us(1,n-1) + prod_US - deprate; matrix_us(1,n) = stock_us;
Thanks for taking the time to reply. So as I understand it starts out with an empty image and then adds features until it recreates something similar the input image. Larger features are added "quicker", so that if the filtering is stopped at a reasonable iteration, less noise will be present. So "Since the noise in images is usually expected to be a small scale feature, particular attention has been paid to methods separating scales, in particular those smoothing small scale features faster than large scale ones, so-called *scale space methods*". "*Inverse* scale space methods have been introduced [...], which are based on a different paradigm. Instead of starting with the noisy image and gradually smoothing it, inverse scale space methods start with the image u(x, 0) = 0 and approach the noisy image f as time increases, with large scales converging faster than small ones". And I'm using a transmitted beam.
No, since you didn't define what x(t) is, it will give you a generic derivative dx wrt to t
can you give an example when you get D()?
Since the dlm file is just plain text, you can't append in the middle as you want to. The easiest way to fix this is to store all your output data in a Matlab variable and write it out at the very end.
I think I found the "problem". I Get D() and diff() when i write syms x(t) diff(x,t) ans = D(x)(t) diff(x(t),t) ans = diff(x(t), t) I guess it doesent really matter...?
Yes it doesn't matter, it means the same. It has to do with the symbolic engine (MuPAD) matlab uses on the background to do symbolic calculations.
Thanks guys. I followed Halsey117's advise and set up a matrix. Worked perfectly. Thanks for the help. It's much appreciated!
You should profile your code to see where the majority of the computational time is spent. Chances are these pieces of code are already mex files (compiled matlab). If this is not the case, you could consider implementing the costly functions in C++ and compiling them as [mex](http://nl.mathworks.com/help/matlab/write-cc-mex-files.html). If you are sure that you are already doing things efficiently, i.e. vectorized code where possible, then you may want to consider migrating your code to a C++ or C environment. Unfortunately, other that the Matlab coder package already mentioned by [rlrl](http://www.reddit.com/user/rlrl), this will mean rewriting your code more-or-less manually while following the original algorithm from your matlab implementation. 
fft is already very well optimized in matlab. From reading several threads online (for example http://stackoverflow.com/questions/15301426/fftw-vs-matlab-fft) , it seems that C might even be slower. So if the main cputime is due to the ffts, it means that a C implementation wouldnt be faster. If there are other commands which cost significant time, you should try to improve your code in matlab first. Check the cpu times by typing: profile viewer and running your code.
MATLAB calls FFTW when you call the fft() function, which is already complied and is one of, if not the, fastest fft package(s) out there. Are you parallelizing the loop that you're running the fft in?
Cool! Thanks a lot, that's very good news for my ears :) --- Edit: another question, since I'll probably be moving towards using GPU computing, and you seem to know about the fft function in Matlab: can it be considerably quickened by using the Matlab Parallel Computing Toolbox to employ a GPU?
Well, the fft function is built to be multithreaded whether or not your code is, so if the fft function itself won't be faster, but you can be more efficient with your overhead associated with all those computations. Parallelizing the loop you use could help, it would mean less downtime for each thread. By the way, I assume you're doing a 2D fft, if it's 1D it's possible to speed it up a bit more. 
I doubt MATLAB stops running. My guess is that it enters an infinite loop because the conditions are not met to break out. Without a code snippet that actually functions and recreates the issue I can't do more than guess.
I'll post the whole program then so you can see.
I'd rather you make a [minimal example](http://stackoverflow.com/help/mcve) so we don't have to go through 350 lines of code.
If fft is taking up the majority of the time in the profiler, then as others have said, coding it in C will not help you since MATLAB's fft function is already coded in C and optimized. The best way to speed up fft is with a GPU card. Top of the line consumer GPU card to use with MATLAB would be the Titan Black, but any decent Nvidia card should help. See GPUbench in file exchange to get an idea of how well certain cards perform.
Okay. I was able to find a part that could be ran without needing the entire code.
First off you need multiplication signs ( * ) between numbers and variables. Second you have a ton of variable typos e.g., 'and2' instead of what I assume is supposed to be 'ang2'. Third use line continuations '...' to format the code. Fourth functions are case sensitive so if you want cosine use cos instead of COS. Fifth don't use inv(mat)*b, use 'mat\b'. After those changes the code runs for me. I am actually very surprised it returned a result. The symbolic solution was so long it exceeded the Matlab print space. Good luck!
That is probably created when you try to invert a (nearly) singular matrix. If you dont have too many matrix inversions you can try print out eigenvalues of the matrix you invert. Eigenvalues close to zero implies singular matrix and vice verca. 
Interesting task! :) Could you post a minimal working example, please? (http://en.wikipedia.org/wiki/Minimal_Working_Example) It is difficult to debug without an executable code that reproduces the error. For example, What does convertToLogBoard do and what does it return? What size is A initialized to, is it a 4x4 matrix? What size does B have when returned? What does slide, heuristic1, pointCount do? edit: some debugging tips could be to add "print('some text')" or "print(i)" at various places to figure out what value i has when the error occurs. Is it on first, 20th or 1e7th iteration?
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Minimal Working Example**](https://en.wikipedia.org/wiki/Minimal%20Working%20Example): [](#sfw) --- &gt; &gt;In [Computing](https://en.wikipedia.org/wiki/Computing) a __Minimal Working Example__ (abbreviated __MWE__) is a collection of [source code](https://en.wikipedia.org/wiki/Source_code) and other data files which allow a [bug](https://en.wikipedia.org/wiki/Software_bug) or problem to be demonstrated and reproduced. The important feature of a Minimal Working Example is that it is as small and as simple as possible, such that it is just sufficient to demonstrate the problem, but without any additional complexity or dependencies which will make resolution harder. &gt;A Minimal Working Example may also be referred to as __Minimal Reproducible Example__ or __Short Self-contained Correct Example__. &gt; --- ^Interesting: [^Minimal ^music](https://en.wikipedia.org/wiki/Minimal_music) ^| [^Borel ^subgroup](https://en.wikipedia.org/wiki/Borel_subgroup) ^| [^Minimal ^counterexample](https://en.wikipedia.org/wiki/Minimal_counterexample) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmq00wa) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmq00wa)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Please provide the full error code and stack trace. It will tell you at what line the error is being encountered. See also [`dbstop if error`](http://www.mathworks.com/help/matlab/ref/dbstop.html), which forces your code into the debugger when an error is encountered allowing you to see the state of your workspace at the time of the error.
Also cos, sin etc work with radians, therefore change every 90 to pi/2 or every sin,cos and atan to sind,cosd and atand. Hint: use ctrl+h
Oh.. yeah.. I probably should have done that.. sorry :/ I'm really new to matlab and they gave us some files to run the game so I will give you many files but you will only have to look at: TestAI ( The AI file I'm trying to get to work) MyAI5 ( The working AI file that I'm modifying) No other file should be modified. I did not explain what slide is..It basically just simulates the next move to determine whether it's good or not. Everything else should be understandable by the comments I've made. To play the game you just run "play2048" in the matlab cmd. There's a button to choose "AI" in game. http://www.filedropper.com/filesmatlab Thanks a lot if you are willing to help ! 
Check the other comment I posted. It's a game we were given so that's actually all it says in a window.
If you are doing statistics, then you may have two predictor variables that are nearly identical.
Not statistics, its orbital mechanics. I need to find the line of code, I can fix the math.
Errors are caught and collected in line 22 of `Game2048AIPlayer.m` and the author unhelpfully only rethrows the exception and not the stack trace. The error is in line 29 of your `TestAI.m` file. You probably want to recheck your indexing.
It can be good to debug by checking lines at a time to verify they're doing what you want. I'd check if your length(d) line is giving you the expected number from just glancing at it 
See: [What Every Computer Scientist Should Know About Floating-Point Arithmetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)
See: http://www.mathworks.com/help/matlab/matlab_prog/change-warning-modes.html
The answer is 7.
The suggestion by /u/excaza might help. You could also use the debugger to move through your code in steps until the error occurs. You could break your code up into large chunks at first to narrow down where the warning occurs, then zero in on it in a binary search fashion. That should get you to it pretty quickly, even if your code is very large. 
Conditional break points are what you want: http://www.mathworks.com/help/matlab/ref/dbstop.html Specifically dbstop if warning Then execute your code. It will break where the warning is issued.
There is never a reason to use eval(). Cut it out. 
Are you running the whole script, or just a section? It'll tell you what line it comes from if you hit F5, but not F9
FYI, just because you are spending all your time actually computing the Fourier transform doesn't actually mean there is any headroom there. Like, in a lot of programs, reading the data from disk takes the longest time of all, even if you have an SSD, and there isn't too much you can do about that. This is one of those cases, since the built-in MATLAB FFT is probably quite fast already.
 put 4 spaces in front of code lines
&gt; r1=diff(r0)./diff(t) r0 is a vector, t is a scalar
this isn't how you take the derivative. try removing the diff(t) part and just diff(r0) EDIT: diff() simply just takes the difference between successive elements, no need to take the *dx* part of dy/dx if your grid is evenly spaced (maybe even if not). but if you have a function **Y**, *diff(* **Y** *)* will take its derivative by the simple difference method.
If fft is taking up most of the compute time, don't worry about optimising (unless you cab cut down on the number of times you're using fft). The fft function built into Matlab will likely have been written in C or Fortran, and been well optimised. EDIT: It uses http://www.fftw.org/ You can use the function fftw in Matlab to control the optimisation (don't exactly know how, check help etc)
But isn't eval() solving the equation above it? I need to solve for Tp and when the program is running, I do get a correct answer along with the rest of the answers in the program.
I got 6.999, repeating (of course).
&gt;SOLVED: The warning is coming from a mex'd matlab function. Because it is a matlab-executable, the debugger cannot stop the interpreter in the source file Thank you for the advice. I'll keep it in mind in the future.
&gt;SOLVED: The warning is coming from a mex'd matlab function. Because it is a matlab-executable, the debugger cannot stop the interpreter in the source file Thanks for the advice, I'll keep it in mind in the future.
Please edit your post use the code-bloc formatting option. Code blocks are preceded with four spaces like this
&gt; ed multiplication signs ( * ) between numbers and variables. i fixed all of the errors, but how long did it take for you to complete? It's taking a while for me. 
That's a good idea! *edit: done*
Well written and I didn't know #3 :) Did you look into to using the GPU ?
Yes, but for my applications GPU computing would not have yielded improvements. MATLAB uses NVIDIA's CUDA library to speed up some processes, and will give you access to some tools to do similar operations. The thing to remember about GPU processing is you get a lot of processors with very, very little common memory. Ultimately, your bottleneck tends to be the bridge speed on the card, and how much data you can shuttle in and out of that GPU's memory. In my application, I needed to operate on too much data for the GPU to handle efficiently.
thank you for the tip, i made the edit
i applied it to the code on my desktop but my code isn't solving for some reason after fixing all lof the errors. 
Yeah that is the drawback of GPU computing :) 
I was able to run the entire program without those lines throughout. But I ran into another problem. The values for "a" are not calculating for all three. I'm only getting an output for 1.4. Could you tell me where I went wrong? I thought of indexing as a for loop and then adding "(i)" but that got confusing quick!
It works for me, but it can take up to a few hours depending on on your cpu. It would be much faster if you do this numerically by filling in a value for h4. But if you need the symbolic solution, I suggest to apply simplify() (or the more thorough simple() ) on it so you may get a more readable result. If not, and it exceeds the 25000 characters per line that matlab shows in the command space and you need to read this result you'll probably have to print it to txt (or whatever) using fprintf and converting the expression to a string using char(). 
MATLAB uses double-precision floating point numbers, so the real answer is 6.999999999999996447286321199499070644378662109375
Yes I'm using a 2D FFT. As for the parallelization of loop, I was a fairly straightforward linear loop: i.e. fft, multiply, ifft - (intermediate solution) then take result and do further computations - then fft, multiply, ifft (final solution). So for this case, I don't see how it can be parallelized unless there is a way to get the intermediate solution and feed it into a second loop, and design the loops to fun kind of offset by one iteration, if you know what I mean. **Is this what you mean by the parallelization of loops?**
And so that's 3 more toolboxes for those of us not in academia I believe? Last time we looked into it parallel and distributed were separate. 
I can't, the datasets have different sizes, that's my biggest problem with all this.
can you interpolate them? there's also [corrcoef](http://de.mathworks.com/help/matlab/ref/corrcoef.html) to calculate correlation coefficients.
Based on the code you provided, `a` is a constant vector used by the `for` loop and shouldn't change.
The reason Matlab requires the data sets to be the same size is because correlation isn't defined for discreet data of different sizes. This isn't just some arbitrary Matlab limitation. You are asking something that has no answer. The best thing you can do in this situation is re-evaluate what it is you actually want to know, and come up with a question that actually has an answer. It's possible you may want to look at the cross-correlation of your two data sets, and then maybe take the maximum of the result. 
Read the documentation for diff() and then think about what your last line will be doing. 
Yes, these are three separate toolboxes, Matlab Coder, Parallel Processing, and Distributed Computing. I'd guess OP is a student using a schools academic license that subscribes to these toolboxes.
Correlation is not scale invariant, so you will need both vectors v1(t) and v2(t) to to span the same domain in "t", or whatever your independent variable is. To do this, you should either down sample the larger of the two vectors or up sample the smaller of the two vectors prior to correlating. Probably down sampling the larger vector is the best bet.
The first one comes from the Matlab Coder toolbox. The second one comes fro the Parallel Processing toolbox. The last one is totally free and is someone's pet project, just follow the link. I am sorry your institution has not chosen to purchase the full toolkit. If you need cheap, functional software, all of these capabilities are available for free through Python. 
FEniCs looks like some great software. I think I will give it a shot during the holidays. My script specifies the time step in first for loop for the IC and at the end of the nested loops. It uses the non-dimensionalized temperature and velocity. I have also non-dimensionalized pressure and I added Mach. After many hours, I have solved the problem. I reach steady state at 1330 time steps and my residuals converge to 10^-3 so I am happy with the results....for now. If anyone is working on a similar type of problem and would like to see the finalized code, plots, write up, etc send me a PM. 
My criteria for picking a programming language were as follows: 1.) I need an extremely fast dev time, as this is due on Saturday. 2.) To reduce dev time, I need well documented genetic algorithms available. 3.) To reduce dev time, I need the other people on my team to be familiar with the language 4.) I need the program to run fast Ultimately, MATLAB met criteria 1 through 3 best. If I didn't have a partner, I would have written this in python 2.2.7, which I expect would be marginally faster than MATLAB. The best language would have been C++, but I don't have the experience to develop that code before the due date.
Some great tips, thanks!
How did you get rid of the complex values now? I can really recommend FEniCs if you plan on doing CFD or similar problems. Used it for 2-3 dimensional compressible flow problems
What if you interpolate one so that it's on the same time basis? %% Create some data t1 = linspace(0,1,500)'; t2 = linspace(0,1,700)'; x1 = sin(2*pi*5*t1); x2 = 5*sin(2*pi*5*t2) + randn(size(t2)); x3 = randn(size(t2)); figure plot(t1,x1,t2,x2,t2,x3) title('Original Signals') %% interpolate to same time vector if numel(x1) &gt; numel(x2) tref = t1; xref1 = x1; xref2 = interp1(t2, x2, tref, 'pchip'); xref3 = interp1(t3, x3, tref, 'pchip'); else tref = t2; xref1 = interp1(t1, x1, tref, 'pchip'); xref2 = x2; xref3 = x3; end figure plot(tref,xref1,tref,xref2,tref,xref3) title('Interpolated Signals') %% Now perform the correlation C = corr([xref1, xref2, xref3]); figure imagesc(C) colormap(jet(256)) colorbar title('Correlation Matrix') 
These are some good tips. My only addition would be to avoid optimizing for the sake of optimizing and don't be afraid to use the built-in [Profiler](http://www.mathworks.com/help/matlab/ref/profile.html), but I think that's a good idea when writing a program in any language. Making small improvements in operations that you need to call 10000 times can be better than making huge improvements (at the cost of readability, sometimes) in operations that are only executed once or twice, so don't try to spend too much time fixing something if you aren't sure that it's broken.
I had to do a lot of de-bugging. I had some dumb errors like calculating variables before the variables that they were dependent on. I also had to re-apply the BC after the predictor. After your first comment I went back and placed the dlnA1(j) in its own loop because I was not applying it to the boundaries only the interior of the matrices. I also got this [text](http://www.amazon.com/Computational-Fluid-Dynamics-John-Anderson/dp/0070016852/ref=sr_1_4?s=books&amp;ie=UTF8&amp;qid=1418239864&amp;sr=1-4&amp;keywords=cfd&amp;pebp=1418239866892) It has my exact problem as an example on the last ~50 pages with table values for the first time step which helped verify my code. 
Here you go Ve = 10000; m1_range = 2000:1000:20000; dV_range = 2000:1000:50000; [m1, dV] = meshgrid(m1_range, dV_range); m0 = m1.*exp(dV/Ve); surf(m1, dV, m0) xlabel('m1') ylabel('dV') zlabel('m0')
You can do this several ways. One way is to create a separate function: function m0 = functionname(m1,dV,Ve) m0 = m1.*exp(dV./Ve) and then in a separate script call that function m1 = linspace(2000,20000,100); dV = linspace(2000,50000,100); ezsurf(@(m1,dV)functionname(m1,dV,Ve) (with a value for Ve). This assumes you want m1 and dV to be the same size. You can modify the functionname function to allow m1 and dV to be different sizes if you add for loops.
I would go lower than 0.01 (by the way, it is **always** good practice to include the preceding zero). 0.01 is really large for machine error and makes your code much less robust. For example, `1.4142` would be accepted when `sqrt(2) = 1.414213562373095...` A best option is to use `eps`. For example `if abs(a2 -2)&lt; 10*eps(2)` is much safer 
Thanks man! Now that I see the correct way of doing it, it's starting to come back to me! For example, I had forgot about the elementwise multiplication, and I messed the meshgrid up somehow. Thanks! 
This time I did it as /u/-Jason- suggested, but I'm gonna stick this trick in my back pocket for a rainy day! Thanks!
Since this is a homework assignment, I'm not going to do it for you. I will however give some pointers. * You need a way of having all the y values that correspond to the x's chosen. * You'll then need to test each of these to find which is smallest * Plan what your script needs to do on paper before writing a line of code &amp; make sure you understand the methods that you'd use to solve iteratively by hand. If you have any more specific questions feel free to reply &amp; I'll see what I can do about answering them. 
Using tabs instead of spaces should probably solve that issue: fprintf('%.2f\t\t%.2f\t\t%.2f\n',a,b,c); EDIT: Apparently I can't read [some part of my brain decided it was the misalignment]. You can use a for loop to print the ith element of each one in its rightful place (others might have a more elegant solution that that though.
Ugh. Seriously? (at the teacher, not you). Maybe it is just that I never used Matlab in classwork (switched areas for grad school but now use it for research) but this seems like a waste of time. What does it teach you? How not to solve a problem? Maybe, just maybe, you could argue that it teaches you to come up with innovating solutions but even then, it's a stretch. /rant Ok, now that I got that off my chest, let me see if I can do anything to help. It is not clear if those first lines are you or the problem but anyway, you need to find a minimum. One method is a grid search. You move in a direction, check if it is lower or higher than your previous point. If it is lower, keep going. If it is higher, turn around with a smaller step. Problem is, this is a *local* min. I think you're somewhat one the right track. You could look through all of those values and find the smallest (using an if statement). Then maybe do something like the above around there. This isn't always going to converge to a global min but should for most cases (it is possible for a very steep dip to occur between sample points) I hope this helps 
What it looks like is happening is MATLAB is *strictly* enforcing your encoding flaging (as should be expected). You want 3 numbers on a line, but you give MATLAB 1x10, 1x10, and 1x10 vectors as well as asking it to fprintf() them in sequential order (a,b,c), so MATLAB is really printing 3 numbers on a line (by appending them to a 1x30 vector) in this order: [ 1:1:10 2:2:20 3:3:30 ]; which, by the way, you could just make your other two vectors off the first: a = 1:10; b = 2*a; c = 3*a; and you could even simply play around with representing your fprintf() line solely interms of *a*, but I digress... So, how to fix your problem? You could construct a matrix that is Nx3 and has vector a as it's 1st column, b for 2nd, and c for third column. Give this a try *(you may have to play around with it)*: a = 1:10; b = 2*a; c = 3*a; d = [a' b' c']; fprintf('%.2f %.2f %.2f\n', d); [Here is the fprintf() docu page](http://www.mathworks.com/help/matlab/ref/fprintf.html): there are some examples at the bottom.
Good question, though Python is not an example of a compiled language.
Hi, thanks for your reply. I do not expect to get an mxm matrix, but I expect the diffraction patterns would be the same under different value of m, since I am simulating the continuous functions and there is only one solution for the continuous convolution. If I have different patterns, I am not sure which one is correct and corresponds to real diffraction phenomenon.
Look for an optimization method. Maybe Golden-section search as a starting point. Dont copy it exactly or your prof will know... but that is a way to start. You could also make a huge x array that has a step size of .00001 points and just make a loop that compares function values to the previous one. It will take a while to run, but it will get you there if you only have to go between -10 and 10.
If you were set this problem without a computer would you be able to solve it using calculus? (Personally I'd have to look up the equation to solve a cubic) You can appy that method using the function: diff Edit: if you can't tell by inspection that the answer to the first one is x = -6.4/9.8 then your teach is an idiot.
thanks for the help. hope i get a good grade. It was a basic project so i know it looked bad but that flip code helped. Plus i realized i can just rotate the plot after its made to the desired direction
 all(A(i) == [A(i-1) A(i-2) A(i-3)]) or perhaps length(unique(A(i-3:i))) == 1 but up to you to decide if these are actually any cleaner! Personally I think what you've got is fine, at least if its just the 3. Of course, if you're doing logical ANDs, then you can do something like all([A(i)==A(i-1) A(i)==A(i-2) A(i)==A(i-3)]) which can be a slightly cleaner way to write a whole lot of them. Similarly, you can use any() if you have logical ORs 
Look up in your textbook methods to find the zeroes of algebraic equations. 
 all(A(i - [1, 2, 3]) == A(i)) But never use i as an index variable. It's the square root of -1.
FYI I have no idea if this is mathematically legal. A million mathematicians might have just felt a large disturbance in the force. As an engineer, this seems OK to **me**.
In the continuous domain the relationship between convolution and the Fourier transform is true. You'll need to check the documentation, but i think the Discrete Fourier Transform assumes periodic boundary conditions while convolution assumes 0 beyond the edge of your matrix. Also, I seem to recall that MATLAB's Fourier transform uses the opposite phase convention from my undergrad Fourier Optics textbook. The phase comment was a warning that you usually want a smooth transition between adjacent pixels in your image. What wavelength are you using? 
To plot the DFT against the period of your signal you need to convert your frequency index vector to frequency. If you are really interested in checking out such tiny periods (as the 0.05[s] you are suggesting) then check out the documentation for (http://www.mathworks.com/help/signal/ref/pwelch.html) for higher accuracy.
&gt; A million mathematicians might have just felt a large disturbance in the force. Eh.
OP *did* say the data was taken over the same period of time. Thus I assumed that start time and end time were the same with just different sampling frequency for each signal. Thus I think we're not stretching time at all.
You could use the bisection method and iterate between 0 and 2pi in a for loop to find values for V.
Having plotted the first equation (apart from a dip at 60deg), there should only be a single value. I suppose it would be possible to set a break out for when it is within a tolerance but I expect to have to perform this up to 10,000 times per image and perhaps up to 100 images. edit: dip was due to 3*theta, seems they made a mistake and meant sin^3
You can use fsolve to do this. Read the documentation for fsolve. It will probably include some examples of how to use it. 
Some MATLAB functions use NVIDIA optimization by default. If you compile those functions using MATLAB coder, you might lose that functionality and cause a slow down. In particular, fft and some linear algebra operations will suffer. parfeval() is worth looking into.
Thank you guys! Both looks better, I'm doing 10 AND and i really need this.
Oh yes, I missed that. You might be right, but still something about using interpolation specifically when you care about measuring the covariance doesn't sit right with me. usually I'd have no problem interpolating here, but I have some feeling that it's going to invalidate a covariance measurement.
wavelength is about 6e-11m
I have used MATLAB to take simple data from agilent 34401A multimeters controlled over GPIB. The functions come built in with the test and measurement toolbox from matlab, and you have to consult the manual of the specific insturment for the commands themselves. But it sounds like what you are doing is more complicated than that. If the instruments you are using are the fancy ones with a built in computer, you should be able to set it up to collect the data you want and dump it to a text file. Then you can read the text file in matlab and do post processing.
Why won't you e-mail mathworks?
On a 64-bit Linux machine, I get the following result for all 5 versions from 12b-14b: &gt;&gt; SPGL1_test System Solution Error: 1.39110e-07 Signal Recovery Error: 1.38157e-04 SPGL1 iter: 821 Exit Flag: 1 No idea why the results would vary across machines, but at least this seems to rule out different MATLAB versions being the cause. Good luck!
Yes, GUIDE is included in the standard Matlab package. If you need to deploy standalone applications, you would need to purchase Matlab Compiler seperately
Ended up using a similar method as I was unable to get the fsolve and solve syntax correct. Plotted the whole area I was concerned with, then found values for r +/- 10%, then kept repeating until the accuracy was &gt;99%
Meant to get back to you, got distracted. I'm not sure I understood the problem you were solving, but I'm glad you got it solved.
What's your code look like? What's the error you're getting?
Is this an optimization problem? Could the result vary depending on initial guess? 
I'm not sure what you're asking for. Do you want tips on how to improve your code? a(i)-e*floor(a(i)/e) is a really awkward way of doing [modular division](http://en.wikipedia.org/wiki/Modulo_operation) mod(a(i),e) You are essentially creating an error function (seeing how close a value "b" is to a goal "0." With an error function you can use MATLAB optimization methods to find the best e. Just remember to constrain the inputs to integers.
If it does the job, then you're good to go. If you're building this into a larger project, perhaps a few changes could be made, and they can help you learn the power of MATLAB. First, you have a vector where you're going through each element in sequence and doing the exact same operations to each one. Using [vectorization](http://www.mathworks.com/help/matlab/matlab_prog/vectorization.html) you can achieve the same results but with more readable and possibly quicker code. Something along the lines of mod(a,e) will get you all the remainders from dividing every element of a by e without going through the loop. You can extend this into the rest of the procedure. Secondly would be using a built-in optimization procedure from MATLAB. They are usually easy to use for a quick implementation like this, and are an awesome tool to know. 
I thought that would be enough too, but I was told that this graph must be labeled in term of it's sampling frequency, fs.
Compressed Sensing does reduce to convex optimization but the starting point is identical for this test so that isn't the issue
Use sprintf. It takes a format string and any number of values and returns a single string. E.g. A = 4; legend( sprintf( 'A = %i', A) );
Yes, reshape is the answer: array=reshape(multdimarr,6,1000).'; The .' transposes the array so you get 6 columns instead of rows. Then you can plot the 6 columns by doing: figure; plot(array)
My collaborator also wondered if it was a core issue. I tested it on my machine with the following 7 tests * No parpool * `parpool('local',n)` for n = [1 2 3 4] (most I have locally) [Counts as 4 tests] * `spgl1` call inside of a `parfor` since Matlab won't nest parfor,etc * `spgl1` call inside an `spmd` block All give identical answers on my computer Oh, and I do not think they use an matlab built-in codes. It's all in house. I may be wrong about that though
My degree is in computational optics, but the major gap in my knowledge is compressed sensing. This is such a cool problem I wish I could help more. 
the fft function returns the frequency bins from 0:fs or 0:2*pi simply depending on how you scale the vector you plot against. Similarly, fftshift returns the frequency bins from -fs/2:fs/2 or -pi:pi depending how you scale. For example x_fft = fftshift(x); N = length(x_fft); norm_f = linspace(-0.5,0.5,N); f = fs*norm_f; plot(f,x_fft)
the thing is parpool and all the parallel computing stuff from Matlab generally affects only the matlab code. Since they have their own implementation connected to matlab via .mex they could very well be using all the cores in the machine (or not) independently of whatever you have set in matlab. The only weird thing (to me) in your results is the difference in the number of iterations. That tells me the algorithm being used to solve the L_1 problem might be different. You should contact them or check their documentation to see what the code does when different types of machines are used.
Does the dot help in making ' only transpose the matrix? I haven't used it like that but if you just apply it like this: B=A' then B will be conjugated as well which is something you wouldn't want in this situation. You should test for that and might want to use transpose(A). 
Nah it's not a big project. It's a calculation I needed to do for a physics experiment but I'm not that good at Matlab. Thanks for the help.
Yes, ' is the conjugate transpose and .' is the normal transpose.
ok. remember the transposition that i used. If you're calling it in a loop then something else seems to interfere but i'd need more code to figure this one out.
I'm not at all familiar with this optimization package, but looking through its installation instructions: "Compiling Matlab MEX interfaces is sometimes tricky business, and if your machine isn't setup for this, the spgsetup routine may fail. In that case, SPGL1 will default to using the precompiled interfaces that have been included." My point is that MathWorks authored functions all must return consistent numerics within floating point round off error, else it's a bug. If I were to guess, the issue is that something the authors of this optimization toolbox are doing is sensitive numerically to the machine architecture. I wasn't at all commenting on whether this is a good thing or not, I would agree that 1e-3 error is not acceptable for single precision floating point numerics. I'd talk to the authors of the toolbox and report this behavior, see if they can help you.
ahh, thanks a lot. Also works with printing multiple values in legend. Cheers 
Are they the same length? Clean+noise. If not, loop the noise until its the same length.
If you could put 4 spaces before lines of code it would make it easier for us to read and help.
Thanks for the tip!
My guess would be: hist() has been upgraded and is now histogram() and hist() is likely going to be phased out in Xyrs, just to warn users.
This is true. I believe hist() will go the same way as princomp() in a near future version. 
oh also after actually using the code, it's faster to do: subplot(1,3,1); hold on; plot(T1(i),sin(T1(i)),'og'); hold off instead of re-plotting all previous stuff 
Thanks!
Thanks for the help!
I did, but they took quite a while and as it's a uni unit I wanted to get an answer as quick as possible. Only got the reply from them today but the reply from reddit 2 days ago!
This is exactly how I do it. Can you expand about how you mean you have little-to-no control over how it prints? I'm not sure what you mean.
Is the Surfing function in your Matlab path? Also why would Surfing be a function if your not passing anything to it? Functions need typically need inputs and outputs. You should be using something like: function MyMatrice = Matrice rows = input('Write two numbers, first one then another: '); columns = input('Write the second number: '); MyMatrice = 100 * rand(rows, columns) MyMatrice = sort(MyMatrice) end Not sure why you've stuck a return in there. function Surfing(MyMatrice) surf(MyMatrice) ylabel('y - axis'), zlabel('z - axis'), title('surface plot') saveas(drawing,'myFigure.png') end Or why Surfing needs to be a separate function. BTW, do you mean matrix?
What was the range of the data before all these steps? Can you provide a minimal example?
You need to convert the string into a number, str2num for example.
Use lsim instead of ode45 since you have the system defined as an ss model. Type help lsim to read how to use it.
Consider what fzero does, and what you're asking it to do. Are they the same? 
The problem: Re = Re0:Step:Re1;
Thanks a lot, will try this tomorrow, I'll feed back once I'm done. Edit: If I recall correctly it was actually saying it couldn't take a char, but also couldn't take a double!
Yes. 
not sure yet, it is for a rather large project and we are still working on the rest of the parts, so can't really tell if it is correct or not
The cool thing about UIs is that you can edit the callbacks without closing the figure window. I'm not familiar with the snd function but this feature should help debug. Also try to avoid globals, they can be troublesome.
Cheers! I'll give it a shot tomorrow morning :)
"Is the Surfing function is your Matlab path?" Not sure what you mean by that. The sorted matrix needs to be returned after it is sorted. I´m trying to make a new function "Surfing" that takes in a matrix then plots it using the command "surf(..)" I´m new to this, so i think it´s matrix.
Is this your homework? Why are you not just using a script for this? Does it have to be a function? The Matlab path, as with most environments, is a list of folders where Matlab looks for stuff. So if ~/Documents/MATLAB is in your path (it is by default) and my_script.m is a matlab script (or function) in this folder then typing my_script at the command prompt in Matlab runs my_script. If however you saved my_script.m in another random folder, Matlab doesn't know that and you get that error. If you're new to Matlab you should really start reading the documentation. The introduction covers a lot of the basics. If you want the sorted matrix returned from a function then that function needs an output, for example: function my_output = my_function(my_input1, my_my_input2) my_output = my_input1 + my_input2; end 
I'm not really sure if you're asking a question.
Not really, it´s a part of a learning program where one solves different tasks. I am using a script actually. No, the surfing function is not in my matlab path. There are two functions in the script, or rather, there has two be two functions in the script. One that I´ve already done, that takes in two values and then creates a row/columns with the values the person inputed. The second function takes in a matrix then plots it in 3D with the command "surf()", then it gets saved later with "saveas(blablabla, 'test.png') Then I need to make a call to the functions, and I´m guessing through command window. I´ve used python abit before, and I´m new to MATLAB, but since they have similarities but are different, i tend to get back to thinking like in python. I have skimmed through the basics, mostly because i need to learn how using the function "Surf()" works. 
But surf is a function all on it's own why are you repackaging it in another function? You can simply but the surf plot commands at the end of the first function and run it from the command line without any inputs or outputs. function do_bla str = input('Input a number'); num = num2str(str); data = peaks(ceil(num)); surf(data) end
Because if i type for example "test123", i want it to take in a matrix then plot it using surf() I want to type in "test123" in the command window then let it take in a matrix and plots it. The first function asks you for two values, you write them and then it prints them on the command window. After that, the second function "test123", if you type it in the command window, will take in the numbers and then plots them. I just want to rename "surf()" to another name, so if i type in "test123" for example, it should take in the values from the first function/matrix and then plot them.
You're going to have to show an better example, this doesn't make sense for any programming language.
Not sure why it won't let me turn it into a code....
Use an array, don't do this.
Are you asking how to save the variables out with an incremental number? Or what are you asking?
Yes, that's his question. However, preallocating a 3-D matrix of the required size: ImgVNIR = zeros(m,n,3) And then assigning it, imgVNIR(:,:,1) = X Is always the better approach. If each of the images in this set aren't guaranteed to be the same size, then a cell array would be the better choice.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Square wave**](https://en.wikipedia.org/wiki/Square%20wave): [](#sfw) --- &gt;A __square wave__ is a [non-sinusoidal periodic waveform](https://en.wikipedia.org/wiki/Non-sinusoidal_waveform) (which can be represented as an infinite summation of sinusoidal waves), in which the amplitude alternates at a steady [frequency](https://en.wikipedia.org/wiki/Frequency) between fixed minimum and maximum values, with the same duration at minimum and maximum. The transition between minimum to maximum is instantaneous for an ideal square wave; this is not realizable in physical systems. Square waves are often encountered in [electronics](https://en.wikipedia.org/wiki/Electronics) and [signal processing](https://en.wikipedia.org/wiki/Signal_processing). Its stochastic counterpart is a [two-state trajectory](https://en.wikipedia.org/wiki/Two-state_trajectory). A similar but not necessarily symmetrical wave, with arbitrary durations at minimum and maximum, is called a [rectangular wave](https://en.wikipedia.org/wiki/Rectangular_wave) (of which the square wave is a special case). &gt;==== &gt;[**Image**](https://i.imgur.com/5Gr0YTK.png) [^(i)](https://commons.wikimedia.org/wiki/File:Waveforms.svg) - *Sine, square, triangle, and sawtooth waveforms* --- ^Interesting: [^Triangle ^wave](https://en.wikipedia.org/wiki/Triangle_wave) ^| [^Power ^inverter](https://en.wikipedia.org/wiki/Power_inverter) ^| [^Gibbs ^phenomenon](https://en.wikipedia.org/wiki/Gibbs_phenomenon) ^| [^Pulse ^wave](https://en.wikipedia.org/wiki/Pulse_wave) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmxarxh) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmxarxh)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
pca()
That´s the problem, making it into one function is easy enough. But it has to be two functions. I need to type in the first function and then let it do it´s thing, after that i write in the second function that takes in the values from the first function and then plots them. If my first function is "test123" and my second function is "test456", i want to type in "test123", it then creates random numbers and after that i type in "test456" and it creates a random plot. The second function "test456" needs to respond to "test123". Whatever i have in "test123", it can be a line, a curve, a cube, a ball, when i type in "test456", that is when it needs to take in the values from "test123" and create a 3D-plot out of it. 
Also, this doesn´t work. Atleast when i tried it. function [sortedMatrix] = matrix(rows, columns) MyMatrix = 100 * rand(rows, columns); sortedMatrix = sort(MyMatrix); end function test123(mymatrix) surf(mymatrix); colormap([1 1 0; 0 1 1]) axis equal ylabel('y - axis'), zlabel('z - axis'), title('surface plot') saveas(drawing,'myFigure.png') end
Sorry about that, the function does not start. If i use the function you showed me, i get an error. Error using matrix (line 2) Not enough input arguments. But that´s because there are no input values, which i already changed. The main problem is that it won´t plot "mymatrix". Might be because there is no "mymatrix" rather "MyMatrix". Even if i change it, the same error appears. It does not plot at all. 
I see, thank you for the help and I am really sorry for making it harder than it needed to be. It worked out well but i got an error Error in test123 (line 6) saveas(drawing,'myFigure.png') I'm not sure what the problem is, do i need to save the drawing before hand? Or is it something else?
 x = A\b; is always a classic. Make sure to post a picture of the final product for us!
This is on the front of my matlab t-shirt.
Two problems: 1. They sent me a L which in American self-esteem sizing comes out to a night shirt midway down my thighs. 2. My girlfriend is German so she shuddered as soon as she laid eyes on the "Sprechen Sie..." 
Just cover them all in 'why' 
Read the full error message. You're attempting to use `drawing` before it is defined.
I actually like this cos its quite easy haha :)
haha then they'd know exactly what they are!
Genius.
They're done! I made 3: clc, plot(x, y) and hold on https://fbcdn-sphotos-g-a.akamaihd.net/hphotos-ak-xfp1/v/t1.0-9/q82/s720x720/1937453_10154882044110123_3112630061421431639_n.jpg?oh=fd8b285248e271c53ac7b67632fcaa1c&amp;oe=550831AF&amp;__gda__=1426109247_37d1deba25ad06f43f6334cddbca1c56 and here are all the cupcakes if anyone's interested :) https://fbcdn-sphotos-d-a.akamaihd.net/hphotos-ak-xaf1/v/t1.0-9/10455060_10154882043565123_6060418553100139805_n.jpg?oh=4b8632521ce5f1421c8fe9c31d323c37&amp;oe=5540E6AE&amp;__gda__=1426741530_9b54ec3b386ecb6ae34df936d80ef259
Hmm.. Thanks! So far, this is my code: %% Channel 19 clear;clc;clf;close; % Read Excel values dist=xlsread('ChannelProfileData','A3:A52') %2319 is last cell elev=xlsread('ChannelProfileData','B3:B52') lastd=numel(dist) for idist = 1:25:lastd %how many 1:25 increments there are curIDX = idist+(0:24) xNOW = dist(curIDX) yNOW = elev(curIDX) % calculate a best fit line: p = polyfit(xNOW,yNOW,1) % p(1) === coeff %for the x-term % p(2) === coeff %for the y intercept % Conditional statements for binning if p(1) &lt;= tand(5) c=[0.25 0 0] elseif (p(1) &lt;= tand(10)) &amp; (p(1) &gt; tand(5)) c=[0.5 0 0] elseif (p(1) &lt;= tand(15)) &amp; (p(1) &gt; tand(10)) c=[0.75 0 0] elseif (p(1) &lt;= tand(20)) &amp; (p(1) &gt; tand(15)) c=[1 0 0] elseif (p(1) &lt;= tand(25)) &amp; (p(1) &gt; tand(20)) c=[1 0.25 0] elseif (p(1) &lt;= tand(30)) &amp; (p(1) &gt; tand(25)) c=[1 .5 0] elseif (p(1) &lt;= tand(35)) &amp; (p(1) &gt; tand(30)) c=[1 .75 0] elseif (p(1) &lt;= tand(40)) &amp; (p(1) &gt; tand(35)) c=[1 1 0] elseif (p(1) &lt;= tand(45)) &amp; (p(1) &gt; tand(40)) c=[1 1 .25] elseif (p(1) &lt;= tand(50)) &amp; (p(1) &gt; tand(45)) c=[1 1 .5] elseif (p(1) &lt;= tand(55)) &amp; (p(1) &gt; tand(50)) c=[0 1 0.25] elseif (p(1) &lt;= tand(60)) &amp; (p(1) &gt; tand(55)) c=[0 1 0.5] elseif (p(1) &lt;= tand(65)) &amp; (p(1) &gt; tand(60)) c=[0 1 0.75] elseif (p(1) &lt;= tand(70)) &amp; (p(1) &gt; tand(65)) c=[0 1 1] elseif (p(1) &lt;= tand(75)) &amp; (p(1) &gt; tand(70)) c=[1 0 1] elseif (p(1) &lt;= tand(80)) &amp; (p(1) &gt; tand(75)) c=[1 0.25 1] elseif (p(1) &lt;= tand(85)) &amp; (p(1) &gt; tand(80)) c=[1 0.5 1] elseif (p(1) &lt;= tand(90)) &amp; (p(1) &gt; tand(85)) c=[1 0.75 1] else c=[1 1 1] end end f = polyval(p,dist); % Calculate the rest of the best fit lines until the max x value % Plot all of these lines on the same plot as the original data figure(1); hold on; plot(dist,elev); plot(dist,f); xlabel('Distance from Headwaters'); ylabel('Elevation') % plot(x2,y2,'r'); % plot(x3,y3,'g'); % plot(x4,y4,'k'); I'm having difficulty plotting multiple lines. Basically, I'm taking a large data set (ChannelProfileData) which is a table of elevation and distance values, and I'm trying to calculate the slope for each set of 25 values (ie, cols 1-25 will have a slope value, 26-50 will have a different slope value, and so on), color code by slope angle, and then plot all of these on top of the original data. My two problems: * plot *multiple* lines that correspond to different parts of the overall lin &gt; I can get one slope line + the original data, but I don't know how to call each new slope line outside of the for loop. I don't care if the lines are the whole width of the plot either, so that's something I don't need to worry about. * get the "c" (color) corresponding to the slope, and then plot it with the corresponding line. Is this even possible the way I've done it? &gt;The way I've done it above is to assign a "c" dependent on the slope value inside of the for loop. There could be a better way to do it, but I don't know it.
My feeling from the first part of your post is you only have one line (not many) and your elevation profile in your plot - if I'm wrong, correct me. There are two ways to go about plotting in the manner of the image in your OP: 1) save everything and plot once at the end, or 2) plot each iteration. Now, it depends on whether or not you want to do anything with these slopes *AFTER* making this single plot. If so, you should opt for option #1, and go back to the [last post of mine](http://www.reddit.com/r/matlab/comments/2o0wit/using_for_loops_conditional_statements_to_best/cmonugy), specifically the first part about "saving" calculations/things and pre-allocating. But if this is the only plot you're after, then go with #2. You can put your plotting routine within your for loop. You could put all of these lines within your loop: figure(1); hold on; plot(dist,elev); plot(dist,f); xlabel('Distance from Headwaters'); ylabel('Elevation') but it would be awefully wasteful as each time you would overwrite directly on top of itself these three lines: plot(dist,elev); xlabel('Distance from Headwaters'); ylabel('Elevation') So what I would suggest doing is only having the singular plot() call plot(dist,f); within your loop and structuring it something like: figure(1); hold on; plot(dist,elev,'k'); for 1:25:last % do your p, c, and f calculations here plot(dist,f,'Color',c); end xlabel('Distance from Headwaters'); ylabel('Elevation') title('Whatever-the-fuck-you-want!') Notice three additional things: 1) I colored your original elevation profile black (*'k'*), 2) I added in how you should plot your desired color (*c*), and 3) added a title (which you ***should*** change). If you're using MATLAB's pre-defined LineSpec strings for color and line and/or marker style, you can simply add that all as one as a string argument to the plot command a la #1. If you want to have a unique color from the 256x256x256 RGB space, you specify the color triplet as decimal percent as you have (*[0.# 0.# 0.#]*) and you need to prompt MATLAB with one of the line property strings (*'Color'*) followed by its value (*c*) a la #2.
Those are some fancy cupcakes!
Perhaps explain the math behind what you wish to do, then others would help you.
&gt;Does it have something to do with the .'s you sometimes need in there? You answered your own question. Replace every `*` with `.*` and `/` with `./` The `.`'s make it operate element wise. Also, you will likely want more sample points than `-5:5`. Try x = linspace(-5,5,100); or x = -5:0.1:5; or something like that
Thank you. I thought that was for matrices.
****, why didn't I think of that...
saw that, still does not work with geodetic2aer :( 
Try running the code using the code profiler. It will time your code and show you what areas are sucking up your time. Might be able to find an area to improve.
Thanks for the tip! Will do.
Sum(nnz()) seems redundant. Why not just nnz? swap out the cell for a 1x4 char 'lrud' and index into it. Containers add overhead. avoid overloading "dir"
I mean... you COULD do it, but unless it's just an exercise to help you learn Matlab better, I wouldn't suggest it. I love my Matlab, don't get me wrong, but virtually any other programming language would be better suited to the task of game-making. If you are just trying to better your programming skills in general, I'd suggest giving it a shot in Python. It's not my personal favorite programming language, but it's pretty much the most generically-useful programming language out there these days... I often say it isn't the BEST programming language for any task, but it is almost always the SECOND best programming language. And there are libraries like Pygame to help you with things like graphics and input devices if you want to go that way. Also, you might want to check out a newly launched site, [http://sortingh.at](http://sortingh.at), which aims to help beginning programmers figure out what kinds of tools might work well for their projects. If you are dead-set on using Matlab and you want to incorporate things like graphics and sound, I might suggest checking out [Psychtoolbox](http://psychtoolbox.org), which is something I use in my daily research to present psychology tasks... but it is generally useful as a set of low-level graphics, sound, input, etc., functions.
This code is pretty straightforward... I don't see too many obvious ways of speeding it up. You don't really have any loops or anything. If your code is slow, I'm guessing the slow parts are elsewhere. For example, the `nnz` that /u/pbrdizzle mentioned -- I'm assuming that's another function, because I don't see it defined as a variable anywhere in here? If so, it might be that function that's the slow one. (Or the code that calls the function you showed here, perhaps?)
Yeah I noticed i have sum and nnz haha. We have a really really short time limit though. Only 0.5 seconds to reach AT LEAST the 1024 tile. My code only reaches 512 and I'm pretty short on time.. The other functions are the same for everyone and we're not allowed to change them :)
Yep i noticed I accidentaly put sum and nnz. Whats is a cell and 1x4 char Irud? :)
I am not too sure on the merit of this but in python calling functions has an over head to it. So for your simple things like the ones command just type out the matrix. Might help shave a few .001 of a second off. If it is a simple function that you are using try just to include the part you need.
Ah, I see... `nnz` is a built-in function. I've never had occasion to use that one, so I guess I'd never heard of it. Anyway, if this is all the code you're allowed to change... I'd say the way to speed it up is to change your algorithm. I don't see any obvious optimizations that are going to speed this code up by more than a couple of percentage points. So I don't think it is that you are calling functions inefficiently or anything like that... rather, I suspect there is a better algorithm out there that solves the problem in fewer steps.
Also I try storing your numbers as int instead of doubles. I am not sure if this will help but might be worth a try. In theory You don't need the double precision. Smaller footprint for the numbers. Int can be either 8, 16, 32 and 64 depends on the size of the numbers you need.
How do you store as int in matlab? Sometimes I get errors because I use doubles but I don't know how to change it? :)
http://uk.mathworks.com/help/matlab/matlab_prog/integers.html Essentially instead of x=8 you type x=int8(8), you store it the same way you assign any variable but you are strongly typing it to be an integer.
Yeah I "made" this code. We got some tips so this is what I did.. If I simulate a run of the game(after making the suggested changes) ~100 times i get the 1024 tile once or twice. Each game takes around 0.3 seconds but the ones that get a high score can't finish because it reaches 0.5 seconds. I'm going to try to improve it a bit :)
When you add vectors or matrices they have to have the same size. You want to a add all possible combinations of x^2 and y^2 so you have to make a grid of values. Therefore, use meshgrid to get a grid with size x*y: [xgrid,ygrid]=meshgrid(inex_x,inex_y); inex = -(xgrid + ygrid);
You're a star bobinpants. Works a treat, thank you. 
Yeah http://www.filedropper.com/2048 Instructions(haha): BestAI is the AI I'm working on. To play the game manually/ choosing AI and watch it run type play2048 in matlab to simulate many runs do: g(or any other variable) = Game2048Simulator(@BestAI) then simulate(g,&lt;amount of runs&gt;) then viewResult(g,15) I am having a bit of trouble now though... When I try to run the game sometimes it randomly stops and says "no moves left" when there is obviously many empty tiles on the board. Don't know why... I havent changed anything except my AI.
http://www.mathworks.com/matlabcentral/fileexchange/31330-dave-s-matlab-shooter
Are you talking about your curve? looks like your data needs to be higher resolution to plot it at that scale appropriately. If you: plot(x,y,'o') I'd imagine the points are pretty sparse. If you're talking about the numbers being fuzzy, I couldn't tell ya, but I do know a few labmates have had difficulties using the new plotting properties implemented in 2014b. It may be helpful to revert back to 2014a if this continues to be a problem for you.
Offhand, it could be handles.uitable1
Thanks for your answer. Yes, the problem is with numbers being fuzzy(and overall low resolution). Okey, I'll try to revert back to 2014a to see of that fixes the problem. 
Solved the problem!
I had an issue with this on a Retina macbook---the fix was updating my JVM
http://undocumentedmatlab.com/blog/plot-linesmoothing-property
The first input to set must be a handle, not a tag. A handle will look like some integer. The following code works: uitable1 = uitable(); set(uitable1, 'Data', randn(5,1)); While this does not: uitable2 = uitable(); set(uitable2, 'Tag', 'vinnythewiseguy') set(vinnythewiseguy, 'Data', randn(5,1)); (If I understand you correctly)
Would you mind sharing how you solved it?
Downgrading from 2014b back to 2014a solved the problem for me. 
You're indexing into a 1x4 cell to get direction. Cells add overhead. My suggestion is to replace it with a 1x4 char. I used lrud - left,right,up,down. If you have matlab coder, you might also see some speed up by generating equivalent c code and compiling it. C can be faster with loops with persistent states like you have. good luck!
Thanks very much for your reply. Yes, this creates a table in the GUI with the desired data. However it is just a new table that appears in the GUI. Any guesses how I call the table that I already made that has the tag uitable 1 and put the data in it? Something like handles.uitable1 = uitable1; doesn't work. Weird. 
Are you trying to calculate the partial sum at each 1:10 points? Say, if your function was y=x, you would have: x psum 1 1 2 3 3 6 4 10 ................. If so, you are calculating your things correctly (from what I can see), but you aren't saving the sums of previous iterations: psum gets over written each iteration. Try: psum = NaN*ones(1,10); for psum(n) = .... end plot(n,pxum) 
I need to find the sum of all the products, for example when N=2 The function would be: N2=0.5*a0+((a(1).*cos(1*w*t)+b(1).*sin(1*w*t)+a(2).*cos(2*w*t)+b(2).*sin(2*w*t)) for N=3, I needs to add a: a(3).*cos(3*w*t)+b(3).*sin(3*w*t) to the N=2 function.
Gotcha- also, that is what my example was doing To be more clear, I think what will work for your application is: psum(n) = psum(n-1) + %new N iteration to add but you'll have to be careful for when n == 1 as you won't have a psum(n-1) == psum(0) term. You'll need an if statement to catch this special case.
Well, the plots are much nicer looking. I would get it solely based on that fact. 
Can you renew the license at a lower rate for an older version? If so, what in the newer version justifies the higher rate for you? I use MATLAB because so many of the libraries/mex files I work with were previously coded for it, so many of the newer features provide little benefit.
Would it not be more correct to write this for n=1:N psum(n)=sum(a(n).*cos(n*w*t)+b(n).*sin(n*w*t)); end psum=.5.*a0+sum(psum); or for n=1:10 psum=psum + sum(a(n).*cos(n*w*t)+b(n).*sin(n*w*t)); end psum=.5.*a0+psum; ?
You get access to new features and bug fixes. If you are paying for it already I can't see why you wouldn't want to upgrade. 
&gt;look for a faster way to perform element-wise multiplication on 3D arrays. Are you already using element-wise multiplication? using .* Also, in terms of speeding up, you might look into using the Profiler on your code. I haven't used it lately (though I should), so I don't know all it's ins-n-outs.
The iterations are dependent.
Yes, elementwise multiplication with '.\*'. I ran a runtime analysis of using times(A,B) and the .\* operator and saw no appreciable difference... That was with 1D arrays though so I may go back and run it again after this execution finishes. I took a look through the profiler results and it wasn't all that helpful. Either way, there isn't much besides this giant pile of multiplication operations that needs to be optimized. I have the pre and postprocessing timed and they are only a small fraction of the overall runtime.
If w and t are constant or have the same number of elements as a and b, and a and b have the same number of elements, there's no need to loop here: use cumsum to vectorize the whole thing: psum = cumsum(a.*cos([1:10].*w.*t) + b.*sin([1:10].*w.*t) Note that you might need to transpose a, b and/or [1:10] to get the element-wise multiplication to work; i can't remember if Matlab let's you multiple a row element-wise by a column with the same number of elements without transposing. Also note that the more general case is to use [1:numel(a)] rather than [1:10], since that will let you use an arbitrary number of coefficients in a, as long as b is the same size. Edit: added a couple of notes. 
What is the datatype of your matrices? Double? If so, try using single precision if that's acceptable numerically. Likely you will see a significant SIMD benefit.
Have you tried creating a final size n-dimensional matrix of zeros before-hand and adding each respective iteration to its proper index?
If he does that with a loop it will be slow as hell. 
If you're already using the element-wise multiplication operator, I don't expect there to be a faster way to achieve that step of your algorithm. I'd look at any loops in your code, as they are typically major slowdowns. They also tend to get abused when you're using 3d arrays, since it's sometimes hard to find ways to do what you need using vector/matrix operations. 
I'm not sure if I have the flexibility to do this or not but it's a good idea. I'll give it a shot.
Sounds like you have already taken care of the easy stuff. One other thing to look at is to see if you can combine your element wise multiply and subsequent operations with a legit matrix multiply. For instance often times a element wise multiply followed by a sum can be replaced with a matrix multiply for significant speed increases. Not sure if this applies here. Another option is to use GPUs which excel at this kind of operations. You could also write a mex function for the loop iterations, although gains here are probably marginal with properly vectorized matlab code. Good luck, FDTD codes are a lot of fun to tinker with.
Thanks. They are fun, but they would be a hell of a lot more fun if I could get it to run faster :/
These are FDTD matrices so they're probably sparse. Have you looked into the sparse() function? Also if you don't need double precision you can make your matrices single precision with the single() function. 
In running some 3D FDTD sims have you tried using the sparse function I am interested to know of it helps run times.
just do eval(g) for the symbolic solution
The result of subs is symbolic so you get fractional terms, so that the result is exact. You can apply double() to convert the result to a double. So this should also give 9.7836: g=double(subs(g, [l s theta t1 t2], [l0 s0 theta0 t10 t20])); 
I really can't help. And, by the dearth of responses, a lot of others can't either. It would be one thing if you had a question about some algorithm where, even though this is a Matlab sub, you would get help. And then, maybe if you had an octave question which [treats incompatibility as a bug](https://en.wikipedia.org/wiki/GNU_Octave) someone could help, but plotting is very different. Asking on a Matlab sub is not your best bet. But, at the very least, look into plotting functions. In Matlab, you would want `plot3`
Thanks for the reply what is the best format for posting the versions of the code. I will try and copy the code from the individual text files i've made. 1) I believe I have put the code in my working directory. or rather I added the directory that the files are in to my working directory. 2) very possible. I am working solely from what was posted in his dissertation 4) I have tried to contact them but no response yet. I have tried to run the copied code but I keep getting this error ??? Undefined function or method 'Code' for input arguments of type 'char'. the code will follow in other posts
If the code(s) are short, you could just post them in your OP or another reply as you said. As for your error, you either don't have a function called "code" or if you do it doesn't accept the arguments as you've passed them to it, namely inputs of "character" type. There could be a few issues here - you may be supplying incorrect inputs. OR - you could be supplying them correctly, but they aren't in the correct order. As for (2) - it's very likely that they have some data files (that may be common and you could obtain them) they are pointing to. Here's an example: We (you and me) separately want to plot the sea-surface temperature (SST) for the month of June - we want to take a vacation and want the water to be bath water. So we decide to use some satellite observations. We use one file, say SST_2013_07.txt , and that file is obtained from a NASA data server. Where I download and point that file to is likely different than where you will download and point to (personal preference): me - /users/halsey/desktop/SST_2013_07.txt you - /users/storemorepower/research/free/summer_trip/SST_2013_07.txt . Now, in *my* code (and lets say that's the code you've got from the dissertation), I point to this file: fpath = '/users/halsey/desktop/SST_2013_07.txt' You've found my dissertation and want to see if you agree that I have chosen the best spot to vacation at. So you copy the code and run it. Among other (expected) errors, you should see that you'll get an error if a) you don't have this SST_2013_07.txt file, b) you don't have that file pointed in the same manner that I do (i.e. you don't have that file in the /users/halsey/desktop/ directory), or c) you recognize that you have the file in directory X but you've forgoten to modify YOUR version of my code to point correctly to it. So - to this point: &gt;2) very possible. I am working solely from what was posted in his dissertation you're work isn't going to be as simple as just copying code from a dissertation and it will run perfectly. You'll have to go into the code body itself and make modifications for the system your running on: change path pointings, change "\" to "/" if you're going from Win&gt;Linux machines, and likely others. This doesn't exclude my 3rd point, that they may have their own proprietary code within their research group (in your error, the code "Code" mighe be this, unless it was a .m file in their dissertation that you also copied).
It sounds like the data is dependent on previously loops so you couldn't parallelize the problem.
Parfor n=1:2*N &amp;nbsp; If mod(n,2) &amp;nbsp; FunctionA &amp;nbsp; Else &amp;nbsp; FunctionB &amp;nbsp; End &amp;nbsp; End &amp;nbsp; Would that work?
I mean this is definitely one way to go about it. I looked into using a parfor loop, but i think i would like more control of the workers and the processes. If im using the cluster at school, for example, and use a single node that has 2 6-core processors on it i want to be able to allocated the 12 individual workers in a more direct manner. I would be able to parallelize the project more than if i just used a parfor loop. Do you have any thoughts on this?
I *think* I do something similar(?). Though, I don't know the N-core of my systems. But on our department's servers, I've broken my code up into 5 peices and started 5 separate MATLAB sessions. My code has 150 files that have 1500 gridpoints and need radiative transfer calculations where the bulk slows down. Splitting the file list in 5 sped up my code.... 5x! *no surprise there* If you are shying away from parfor, I would suggest opening multiple sessions if you're able to and cut your code into chunks where you can.
Hmm... That's a pretty interesting idea. I can't really split the code into different sessions because the two individual loops are part of a big loop that is using data sets from the smaller loops. I may honestly have to try another language. I think I could implement this is C++ so I may have to look into that. One big problem is I need the 2 loops to be running asynchronously and I only want them to communicate data with each other If very specific parameters are met. It's much slower to run the same 2 loops at the same iteration level because one of them is quite a bit slower than the other loop which causes unnecessary slow downs in the search processes. 
Mm, the only thing I can think of that helped when moving between different environments was using normalized units when positioning objects in figures for GUIs. I guess in terms of paths, I usually either ask the user to input it or assume the user is OK with my application writing to the current directory (i.e., I use "cd" a lot). However, this assumption produced issues if the user launched my application from a directory that required elevated permissions to write to the file system. Also, if you can't afford to assume that the user has exactly the same version/tool boxes you utilize, compile your application as a standalone executable and package it with the appropriate MATLAB compiler runtime (I've had people complain that they couldn't open my application because they were missing the image processing tool kit, and the only place I used that tool kit was to have a nice looking logo in the application). (However, I've never gotten this to work on a non-windows PC.)
Normalized also has the benefit of making the resize function for GUIs more natural (i.e., if you click on the corner of a GUI and drag it, it will tend to resize how one would expect). So, the combination of these two features make it my favorite unit. And yeah, this doesn't really matter for headless sessions. &gt; As for the paths... I'm the only one that is working with my scripts... go along my merry way. Ah yeah, you're probably fine doing whatever you're doing, then. If you always write to a particular directory, say, a set path below the current directory when you launch your scripts, you could do something like dirstr = [cd, filesep, 'my', filesep, 'path', filesep, 'identical', filesep, 'between', filesep, 'envs']; do_stuff(dirstr);
The fullfile() function will correctly use file separators as well, so you typically don't actually need to use pathsep itself. The ispc(), isunix() an os() functions are also handy. 
Is your deconvolution well posed, or are you regularizing some how? If you don't need to regularize you can just use GPU convolution code with the inverted kernel.
Here's one diagnostic thing you can do, remove all the ;'s from the code and run it. By not suppressing any of the output, it'll help you narrow down were the problem is occurring. 
Or you could use the debugger. Just put a breakpoint at the use of diff that you are interested in, then evaluate the input(s) to diff and the output of diff until you have back traced your way to an answer.
Are you supposed to be using the symbolic toolkit for this? If this is a school assignment I would expect that it's not supposed to be done with the symbolic toolkit, and if it's a N-R solver for use in some other algorithm, it probably isn't working with symbolic math. In fact, if this isn't a class assignment, you shouldn't bother implementing N-R yourself. Just use built in Matlab functions like fzero().
Why do you have the line: syms x In your code? 
I was intending to look up well posed vs. regularized deconvolution, but have been busy with Christmas. Let's say I can take the non-regularized route: are you saying the conv function in MATLAB will work in 3D? I was under the impression that it was one dimension only (or would I take the matricies and deconvolve 3 times: once per dimension?). Also, for kernel inversion do I simply do A=[3 space matrix]'; or is there a fancier code I have to write?
You were probably down voted for missing the point of my post, and telling me to do the thing I said I don't know how to do.
I'd recommend looking at the fft / convolution theorem. You should be able to get your deconvolution via something like ifftn(fftn(image)./max(fftn(kernel),e)) where kernel is the zero padded fft of your kernel (so they're the same size) and e is some small constant that determines the level of regularization so you don't divide by zero (I think Matlab max works on complex numbers that way). Note that if your array is 3d for a color image you only want to convolve over the first 2 dimensions, so use ifft2 and fft2 instead. Then fft will use the gpu if your arrays are gpuArrays.
This usually happens every time I upgrade my OS X and I run into the same problem. Mathworks has released patches both times that fix the problem so hopefully its the same for Windows. Just search around and you can hopefully find a patch that will fix the problem. 
I bought a text book to work through so I could brush up on MATLAB. In starting a master's program in January. I haven't used MATLAB in a while and wanted to relearn it. Not a big deal, but definitely annoying. I hate drm.
I know it isn't matlab and so it won't have a lot of the same functions, but QT Octave may be able to satiate you until your Matlab license works
For me I had the same issue and eventually found a patch or something to fix it. Google the exact message you got with the exact OS and you should find some sort of results. 
I tried. The only answer I find was to contact support our deactivate my keys. I could have pirated it in the amount of time I spent so far.
You could have also downloaded Octave in that time. Please don't pirate MATLAB, even out of frustration for not having your key working currently. It's not imperative right now, you just want to "relearn" for your upcoming semester, and it's "not a big deal". Also, I know you haven't explicitly asked us here, but from the sidebar we frown upon pirating MATLAB as Octave is a suitable alternative.
Student Version? Did you try things listed here? http://www.mathworks.com/matlabcentral/answers/106133-why-do-i-receive-an-error-2002-the-serial-number-you-entered-cannot-be-activated-after-entering
Yep. Tried everything there. Thanks
OP- to be a little more clear... In your OP, you've put: tic for i = 1:100 % fun stuff end toc and that should be working (returning a singular timed value), but what you might have coded in what you run is the "toc" inside your "end" statement, meaning you get 100 times and not just the one you want for the entire loop. DStoo - is this what you ^(*we?*) are thinking?
What is the type of data you're looking to transfer? Like, is it a time series of neural impulses? ... just one long vector (or a 2d matrix)? You could just write it to a text (or binary) file. I don't know if you're looking to do things likity-split, in which writing/reading the data is going to slow you down. But if you update things, say, every minute, provided your data isn't enormous, I think this would be a reasonable way to do this. At least, this is how I've interacted MATLAB and &lt;another_prog&gt; before.
Depending on the sampling rate I decide on, it will be a 2000x1 matrix or a 5000x1 matrix etc. Ok, writing to a file like that make sense, and I have thought of it before. I think my issue is that I would like to this to be near real time. Writing and reading to and from the file. I understand the need for semaphores etc may be needed in such a situation. The idea behind it is that a patient would move their muscle and the graphics on the screen would update accordingly. Obviously in such a situation, having as a little lag between movement and graphical update is of paramount importance. Would using the writing and reading to a file still work in this situation?
No I think that your toc is before your end.
Double check to see if you have an additional toc inside the loop someplace.
Good point! Are there any you know off hand that internally tic/toc themselves?
absolutely no idea. figured it out by chance, in my case it wasn't even a standard matlab function but a function from the matPIV package.
Look down towards the bottom of this article: http://undocumentedmatlab.com/blog/explicit-multi-threading-in-matlab-part4 I have used the built in socket class for IPC in the past with good success. If you are on windows, it also supports [COM]( http://www.mathworks.com/help/matlab/matlab_external/introducing-matlab-com-integration.html) and on Linux you could always use a named pipe. 
I'm inclined to agree- this behavior would be more likely found in user code/functions, or in a case similar OP here, maybe using tic/toc in several of his functions, throwing him off. *One piece of fruit at a time*
Yeah HG2 is definitely a bit slower. I actually have held off and stayed on R2013b just until I can play around with it a bit more, before committing to it in a "production" environment. As it was there were some cases where plotting medium-large data sets would bring Matlab to its knees. Hopefully that's fixed. Scatter() for example I completely abandoned in favor of Plot() with 'o' marker and 'none' linestyle.
Could go either way. On one hand, if it's no more expensive - why not? On the other hand for safety's sake I usually only update in the off season when I have enough downtime to really go through things. Sometimes features get deprecated or things change... good to do due diligence before spreading the love over several users computers.
I once did did something very similar using 3d motion data. I actually would wrap each one as a JSON file, send it over TCP ( I believe) on local IP, and just unpack it from there using a non-blocking call. Was quite efficient, with minimal lag 
We might be able to get the best of both worlds. You should be able to use matlab coder to export C code instead of a mex file, then manually tweak the code to use pointers. However, my C skills are too weak for me to be sure. I am also unsure how multicore handles pointers. Does each core have its own cache? Is the data at the end of the pointer in the RAM or in the cache? Would we see any gains if the data is in the RAM? I need to do some reading, but it would be worth learning. 
Well, some interesting things to note here. And I'll preface this by saying I've never used the code generation toolbox to see what it spits out. For one though, it is actually not possible to pass an array by value in C (or C++). All arrays are passed to functions by automatically decaying into a pointer. It would be interesting to see how Matlab handles this when it translates code, since the Matlab implementation is *expected to behave* like pass-by-value. Maybe it still goes through the trouble of copying the entire contents? (Though I'm not sure if in C++ something like std::vector&lt;T&gt; is passed by value.. I think it is). There was a time when all I knew was Matlab and I figured "Oh screw it let's just get the code generation toolbox if we want to port code to a faster platform." But for some other reasons, I wound up just learning C++ instead. Not as scary as one might think. If I want to write code that's going to be fast... I think the implementation can be steered more effectively by just writing it ground-up rather than translating. As for multi-core, I *think* it's not uncommon for each core to have its own (presumably L1) cache, but then there to be some shared cache among all cores as well (L2 or L3?). What's for sure though is accessing through cache and making the most out of pre-fetch etc. should be dramatically faster than having to make the trip out to RAM and back. There are some good native code talks on this topic... how computing can quickly become more memory-bound than CPU-bound, and how thinking your memory access patterns out can give big speed boosts. For the compute side, laying out code so your C compiler can auto-vectorize it makes for huge gains.. as can taking advantage of the most appropriate vector extensions for your target CPU (e.g. SSE2, AVX, AVX2, AVX512)
Probably Matlab and whatever toolkits were used by the author of that code. This smells like a terrible idea. 
Haha yea I didn't really explain it in a good manner. He wrote a very good book if your interested 
There's a MATLAB app for iOS and Android, though you do need a MathWorks account to use it.
Was crazy expensive. They now offer personal (read: noncommercial) licenses for as much as their educational licenses ~$100
But does it come with toolboxes? I've seen the student versions, it's pretty thin on toolboxes
A personal license is $150. It comes with no toolboxes, but each toolbox is only $45, so it's not a bad deal IMO.
Where there is money to be made, people will throw money away. What happened was a power Matlab user decided to write some code for some math that he didn't want to do over and over again. (I'm sure we can all empathise, otherwise we'd not be using Matlab). He never intended for anyone to go "Hey. I should *buy MATLAB*" or even appeal to anyone broader than a current Matlab userbase. First, this is the first time I will heavily suggest Octave. I haven't looked at the code yet but I doubt it's that complex. It doesn't say it is dependent on any financial toolboxes. Edit: [The code is very simple](http://www.mathworks.com/matlabcentral/fileexchange/46816-oshaughnessey-v5-m/content/OShaughnessey_v5.m). It just grabs HTML data, parses out what it wants does some math. Anyone that knows Matlab and wants to pick up Python it'd be a good script to 'port'.
I don't think the code even uses toolboxes. He doesn't list any.
Huh, TIL. Last time I'd checked into pricing, that Home license option didn't exist. Still somewhat expensive for what OP wanted to do with it, but definitely good to know!
Yeah, just looked at the code myself. In fact, since it's pulling material from the Web and doing a lot of regular-expression parsing, it's probably far better suited for Python (or Perl, even) than for Matlab. Looks like the author of the code was operating under the "When all you have is a hammer" principle by using Matlab with this. I have a tendency to do this as well (I've certainly used Matlab to make what are essentially shell scripts when I've been too lazy to look up `sh` syntax), but I've done some little Web-parsing type projects, and my language of choice for those was Python. OP, if you're still listening and know anything about programming, I'd suggest porting this code to Python (or Perl) if you want to run this script. If you DON'T know anything about programming, I'd suggest you learn programming first and then decide if you still want to run it. If you don't know any programming languages, I think Python is a great place to start -- I tend to think it is not the very BEST language for most tasks, but it is usually a very generally-useful language that is often the SECOND best language for lots of tasks.
Thanks, I will be sure to check this out
I'm not sure. I imagine it's the same setup as the academic license just expanded to the experimenting public.
[Octave](https://www.gnu.org/software/octave/) , same commands - and its free
&gt; so that others can see the algorithms and be able to code them up in their own language of choice this right here - if I were OP and knew coding I would just use this as a template for my own personal coding (unless one still had access to an institution's licenses)
Also, this code could stop working at any time if the pages where the author is getting the info changes. It's also not written very well. Check out /r/learnprogramming and /r/learnpython 
I just looked through the code and it appears that it's all core MATLAB functions ( = no additional toolboxes required) along with some Java calls for retrieving data from websites.
If you want a low cost, simple solution and the image processing isn't graphics intensive, then you might want to consider using the psychophysics toolbox, which is fast (I haven't used this in years but I believe most of their code is written in C and called via mex functions), free, and will work inside matlab. This is also nice because if you're collecting behavioral responses this can all be done in one nice script. 
I can't offer much help - I've never worked in the Simulink side of things. But an additional question that might help others and yourself: Do you want to be able to change "inputs" while running (they wouldn't really be inputs at that point, parameters?), or do you mean change the inputs (initial conditions) and resume running in realtime? To your OP, and this is what I'd start with in MATLAB (and I say "start" because this is likely *very* ungraceful relative to the *"best"* option) is to have your program query a text file every X seconds (whatever frequency) to see if it's been changed since the last time you queried, and if so, those are your modified inputs/parameters that need to be changed/updated, and then keep on keepin' on.
Are you perhaps looking for something like Realtime Pacer from fileexchange? http://www.mathworks.com/matlabcentral/fileexchange/29107-real-time-pacer-for-simulink Works wonders for our use of turning models into Realtime simulators
Interesting solution. Another to add to my list I need to understand and go through. Thanks for your reply.
Thanks for this. I will look into the psychophysics toolbox.
Thankyou for your reply and links to relevant infomation. I will look into each of these. JA is unfortunately extremely expensive. It looks like I have a lot of reading to do!
This is a good suggestion.
Guide is Matlab's GUI program. You'll have to create a slider and hook the callback into Simulink.
I'm pretty sure that you can just set the simulation duration to inf.
[This](http://www.mathworks.com/help/matlab/ref/fprintf.html) one too!
c = 0; for i = 1:9 c = c * 10 + i; d = c * 8 + i; fprintf('%-d %s %s %s %d %s %d\n' ,c,'X','8','+',i,'=',d ); end %s is string placeholder %d is a decimal place holder It should loop through and print out the values for c and d So 1 X 8 + 1 = 8 You could of just used Fprintf('%d X 8 + %d = %d\n')
If you want to run it hard real-time you can deploy it to another PC via Simulink Real-time or Real Time Windows Target locally. In both scenarios you can change inputs. If you want soft real-time (no promise of actual real time, but it will look like real-time) then you can use the pacer block mentioned by oomJono and varying parameters would be trivial.
Am I the only one who prefers horizontal concatenation for readability unless it's important to specify field width? fprintf(['This is variable X: ',num2str(x),' and this is variable Y: ',num2str(y),'\n'])
Look at this toolbox: mathworks.com/products/parallel-computing/?s_cid=HP_FP_ML_parallel And as a start, learn about "parfor"-loops.
you can have tic pass the start time to a variable and pass that value into toc. so something like this: a = tic; pause(1); b = toc(a); b will be 1.0068 or something depending on how fast your computer can perform the pause and toc stuff you can store the tick value in the handles structure as easy way to passing around values in GUIs
An additional note - don't use *"i"* as a variable in any language. Most treat that specially as it is the imaginary number ( i == sqrt(-1) ). For indexing, I use ii, ix, ilon, imo... still using the character i somewhere in there to denote an iterator (for a for loop for example). Same with avoiding variable names like cos, sum, mean ... those are built in functions in many languages, and if not, a reader may interpret them as in your code. Just a helpful tip.
Are you solving differential equations? Have you explored options like increasing the integration tolerance, solving on a coarser grid, coding an analytical Jacobian, etc.? Sometimes there are significant optimization opportunities related to the numerical solution. 
Are you sure your algorithm is already reasonably efficient? 
Data handling in a gui is a lot less horrible if you don't let GUIDE write the m-file for you. 
You can't set the tolerance any tighter. Matlab stores number in the [IEE-754 double precision floating point format](http://en.wikipedia.org/wiki/Double-precision_floating-point_format). By consequence matlab stores numbers with just 16 significant digits. However you mention that your parameter values have a very big range which you want to integrate all at once. This suggests that you are solving a stiff problem. You could try to use ode23s instead of ode45 to get better performance.
If you have 50% CPU usage, using parallel processing will get you less than double the speed on this machine. Also, many things do not work in Matlab in parallel mode.
Thanks, this script is awesome. How do you go about back testing the strategy?
Thank you again. Also, I've been doing quite a lot of googling and found this toolbox http://www.advanpix.com/ I'm still running my program after installin it, hopefully I'll be having proper results this time.
I'm interested too. I've used Matlab (as a tool) for years and I'm about to start with R. I've used Stata and Minitab in the past for stats.
Thank you I'm aware, I'll explore this option and see if I can combine a matlab script with a Java library for REST services.
Well, you tell me. I've used Matlab in research for about 4 years, R in research for about 6. I would personally consider myself intermediate in both, not expert, but I'm not sure exactly what you need for your interview.
You don't need to be an "expert" I would say a few years using each would suffice. I just need to discuss your experience using both and review what you think each is best suited for. 
This is probably one of the easier ways to do this. Write the service in Python and then invoke the script using the MATLAB engine for Python. http://www.mathworks.com/help/matlab/matlab-engine-for-python.html
You could try [datenum()](http://www.mathworks.com/help/matlab/ref/datenum.html). I've personally never used it so I'm not up on it's ins/outs, but with a little trial/error you could get it working. You could also take the string (assuming its still "6/20/2012" type) and extract the m/d/y, and if you wanted them as numbers just str2nu() them. You could put them in an Nx3 array.
Can one apply butter and the chebychev etc in digital applications? My theory in analog filtering is slightly better, is everything learned wrt to filters applicable in the digital dommain too? I understand a 6db cutoff frequency is involved as opposed to the usual 3dB point in analog, are there any other significant changes when digital filtering?
As a total matlab virgin noob, I am hoping for someone to come in here and really let one go in terms of explanation.
I've got the datenum function to work now I have just a bunch of number from 700,000 to 735,000. I don't know what to do with them from here. How do i extract the m/d/y? I'm familiar with the str2num function but I don't know what an Nx3 array is. 
This looks interesting but I can't get it to load using the readtable function. 
If any of you would like to look at the CSV data and try to help me it can be found here. https://freestateproject.org/about/membership/signups-export