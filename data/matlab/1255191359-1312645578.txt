Thanks for the presentation. A simple and useful introduction to matlab.
wtf ? there are two sortrows and sort, with the option 'rows'
sorry to be rude, but why bother, this is pascal code in matlab a good pascal programmer can code pascal in any language 
Yup. sortrows(A,3) sorts A by the values in column 2. Also handy is sortrows(A,[3 2]) which sorts A by column 3, then resorts based on column 2 where there are repeated values in column 3. See [here](http://www.mathworks.com/access/helpdesk/help/techdoc/index.html?/access/helpdesk/help/techdoc/ref/sort.html).
I'm in an intro to MATLAB class--this was an assignment. Just thought I'd post it here.
I suggested /r/numerical in lieu of the less general /r/matlab (and someone else beat me to creating it), but I think both can coexist if this one focuses more on general MATLAB issues, instead of purely numerical stuff.
Oh cool. Now I delete this useless post!
I didn't even think to look for such a reddit on here. One thing that you find with the MATLAB newsgroup is that people ask a lot of general NA questions, rather than specific matlab questions...hence a lot of stuff is not answered. I'm not opposed to merging the two (I didn't even know you could do that)...but when I created the sub reddit it was more for matlab programming issues -- tips, tricks, implementation details. Stuff like that. I think that would keep this relatively separate from the numerical subreddit. 
Awesome! I'm taking a matlab class and this helps way more than my murmuring professor. wakawakawakawaka 
I think people are more likely to guess matlab from a straight guess as to whether the subreddit exists... someone just typing names in the url bar stands a better chance of finding /r/matlab regardless of what they use than practically any other name. Keep this, and the other one, and for more general problems, we can suggest cross-posting to /r/numerical.
Numerical Recipes is still the go-to reference. Matlab interfaces very well with straight C or Fortran 90 code (through .mex files), but most of the time it's clear how to write the code up directly in matlab code itself. At least that's what I've found.
Use Higham and Higham's Matlab guide, published by SIAM. Best book to learning matlab....hands down.
no , that way, how will others learn ?
well in that case, try some matlab idioms EDIT : formatting while 1 bubble=find(diff(v)&lt;0,1); % find the first descending adjacent pair if isempty(bubble),break,end v(bubble+[-1 0]) = v(bubble+[0 -1]); % matlab doesn't need temp end
By making their own mistakes rather than laughing at mine :'(
Blog que pretende ensinar Matlab a todos os interessados. Afinal, o Matlab não é um bicho de sete cabeças!
Send me an orangered, and I'll get back to you in the AM. I'm on my phone, and obviously, all my code is (sadly) not on mu phone. 
OK, so I have a different trick than the site you found. hold on %this lets you redraw on the same plot fig for i=1:frames plot(x,y,'b.') pause(0.03) %a timed pause end
Seems nice, but more usage examples would make the benefits clearer to me :)
I agree, but as my user base is currently me, myself, and I, I don't have a good idea of what to make examples of. Anything in particular you'd like to see?
Hehe.. I come from economics, where we usually (try to) build models in matlab. Besides the useful matrix syntax, programming in matlab is a pain compared to python. Is there a way to use functions, iterators, dicts, etc. like in python? For instance: portfolio = {'GOOG': 0.11, 'MSFT', 0.2} // With the dict() syntax, not brackets of course assets = [a for a in assets if a in portfolio] Most of the matrix stuff we use is already in matlab, so numpy is not as useful as the builtin functions/classes and the stdlib.
You would probably want to write that code in a python function, which you could then call from MATLAB. You can work with MATLAB functions, cell arrays, structs, and class objects from your Python module, removing the need to do that stuff. Cell arrays and structs are even iterable, so they're that much easier to work with. Of course, you _could_ work with Python iterators in MATLAB, but it's ugly: &gt;&gt; portfolio = py.dict('GOOG', 0.1, 'MSFT', 0.2) portfolio = {'GOOG': 0.1, 'MSFT': 0.2} &gt;&gt; pybuiltins iter % we could make a py.iter shortcut for this &gt;&gt; myiter = iter(portfolio) myiter = &lt;dictionary-keyiterator object at 0x35016d8&gt; &gt;&gt; while true try t = myiter.next(); catch % might want to test that it was 'Python:StopIter' break end fprintf('%s -&gt; %f\n', unpy(t), unpy(portfolio{t})) end % prints: GOOG -&gt; 0.100000 MSFT -&gt; 0.200000 There's not really any way to extend MATLAB's syntax, though I might be able to work up something with eval... 
Alright, so I think I have a working 'eval' in the repository now: &gt;&gt; portfolio = py.dict('GOOG', 0.1, 'MSFT', 0.2, 'BOB', 0.5) portfolio = {'GOOG': 0.1, 'BOB': 0.5, 'MSFT': 0.2} &gt;&gt; assets = {'GOOG', 'BOB'} assets = 'GOOG' 'BOB' &gt;&gt; py.eval('[(a, portfolio[a]) for a in assets if a in portfolio]') ans = [('GOOG', 0.1), ('BOB', 0.5)] Note that portfolio is a python dict and assets is a plain MATLAB cell. 
Nice! Next term I have a couple of numerical projects.. it would be interesting to see how my productivity increases by using this :)
You don't need to create whole new matrix for min operation: f = min(min([+Inf r(1:end-1)], r), [r(2:end) +Inf]); %run time for 1000x1000 about 0.0665s (original vectorized: 0.0958s) Further, MATLABs function calls are not very fast, so you should change vertical_map also: function Mv = vertical_map(S) Mv = zeros(size(S)); % first row is a special case Mv(1,:) = S(1,:); for r = 2:size(Mv,1) rr = Mv(r-1,:); Mv(r,:) = S(r,:) + min(min([+Inf rr(1:end-1)], rr), [rr(2:end) +Inf]); end end %run time for 1000x1000 about 0.0599s You can also do get_mins in C: #include "mex.h" #ifndef min #define min(x,y) ((x) &lt; (y) ? (x) : (y)) #endif void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) { int cols,ii; /*Check inputs*/ if (nrhs != 1) mexErrMsgTxt("1 input (r)"); if (nlhs != 1) mexErrMsgTxt("1 output (f)"); if (!mxIsDouble(prhs[0])) mexErrMsgTxt("All inputs as double"); const mwSize *dims = mxGetDimensions(prhs[0]); /*size of input*/ cols = dims[1]; double *input = (double*) mxGetData(prhs[0]); /*Pointer to input*/ mxArray *out_array = mxCreateNumericArray(2, dims, mxDOUBLE_CLASS, mxREAL); /*Create output*/ plhs[0] = out_array; /*set as output*/ double *output = (double*)mxGetData(out_array); /*Pointer to output*/ for (ii = 1; ii &lt; cols-1; ++ii) { output[ii] = min(min(input[ii-1],input[ii]),input[ii+1]); } output[0] = min(input[0],input[1]); output[cols-1] = min(input[cols-2],input[cols-1]); } %run time for 1000x1000 about 0.0468s %compile using command mex get_mins.c Of course if you would make the whole program in C (or C/CUDA) it would be even faster, but this quite pointless. 
I almost forgot. You really should transpose your input matrix, this way memory will be used much more efficiently: function Mv = vertical_map_tran(S) S = S'; Mv = zeros(size(S)); % first row is a special case Mv(:,1) = S(:,1); for r = 2:size(Mv,2) rr = Mv(:,r-1); Mv(:,r) = S(:,r) + min(min([+Inf rr(1:end-1)'], rr'), [rr(2:end)' +Inf])'; end Mv = Mv'; end Runtime 0.0407s You can fix the C code by changing cols = dims[0]; to cols = dims[0]*dims[1]; Now runtime is 0.0262s
I know Matlab and Python. How do I learn to do THAT stuff? (C) Any suggestions? K&amp;R?
I'm not quite sure what you mean, but I have not actually read K&amp;R. I used "C a reference manual, 5th edition" as reference when I needed to learn C basics (I already knew some C++), but I'm quite sure that it is not good book for beginners. You can also use C++ in MEX-functions, so any good C/C++ book (or website) is good enough for start. MATLAB has some examples of C-MEX functions in folder matlab/extern/examples . Also MATLABs [documentation](http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_external/f7667.html) is very good in this matter. docsearch('C Source MEX-Files') If you are interested in using C in scientific computations you should probably read something about memory management. You can start by reading [What Every Programmer Should Know About Memory](http://people.redhat.com/drepper/cpumemory.pdf). Basically you should always keep in mind what happens to your matrices, vectors, cell arrays etc when they are processed. Also learning to use [LAPACK](http://www.netlib.org/lapack/) is highly recommended, after you know how to use C/FORTRAN-LAPACK you know quite a lot about how to speed up your M-Code (MATLAB uses LAPACK for all its matrix operations and data must be shaped to compatible form before calling LAPACK functions -&gt; memory management). More about MATLABs [memory management](http://www.mathworks.com/access/helpdesk/help/techdoc/matlab_prog/brh72ex-1.html) : docsearch('Memory Usage Allocation Management Resolving') I hope that this helps at least a little bit.
Yes, thanks a lot! :)
Thanks! &gt; You don't need to create whole new matrix for min operation Ah neat. I wasn't expecting that one to yield that much of a speed up. &gt; Further, MATLABs function calls are not very fast, so you should change vertical_map also I am blinking my eyes at matlab a lot right now. &gt; You can also do get_mins in C I think I'll do the whole map generation bit in C. Thanks for reminding me of the importance of the way you access your data - this is something one tends to forget about too easily. 
Dude, it's down I could really use this. Thanks!
No it's not! EDIT: How does this submission have any upvotes? It's an empty submission.
RTFM http://www.mathworks.com/access/helpdesk/help/techdoc/
Awesome work. I'm taking this to help some students I'm TA'ing. If I can now just teach them that you find the area under a curve with integration, we'll be on to something. Seriously, what do they teach in undergrad these days!?
Not much, apparently. One of the prereqs for the course I am TA'ing is Calc 1. The coreq is Calc 2. I had SIXTEEN students in office hours this past Wednesday who could not handle an integral.
Yes, that's called a cell array. Cell array literals look like: `{ x y z }`. get/set elements using `foo{i,j}` Cells can be multidimensional just as normal arrays can. If you index a cell array like you'd index a normal array -`foo(i,j)` - you get back a subset of the cell, not the contents. If you use cell subscripting in such a way that multiple values are referenced, what you get out is referred to as a "comma-separated list", which works in most places that you would put commas in MATLAB code. For instance, function arguments: args = { 'Foo', 42, 100, char(10)}; fprintf('Insufficient %s! Wanted %d, but got %d!%s', args{:}); 
Thanks!
It may be possible, but this seems like something the MathWorks would specifically not want you to be able to do with mcc. If the C++ bits are important somehow, you can make a mex function out of them and run them from within the confines of matlab. Alternatively, you can use the MATLAB Engine library to start and control a MATLAB session from within another program. In addition to C and C++, there are wrappers for this in various other languages. I would also suggest simply not using MATLAB, but I'm guessing you're getting student assignments in that format, so that would probably not be a helpful suggestion. 
Not so much formats for matlab, as the fact that all the actual graders are written in matlab by the professor for the course. Why would mathworks not want me to be able to do this? And which thing specifically?
If you could get a program to execute arbitrary m-files supplied after compilation, you could largely replace MATLAB itself. Since your program and the MCR it depends on are freely distributable, that would mean people could run MATLAB code without paying the MathWorks. This seems like the sort of thing they'd frown upon and take great pains to prevent. I can only speculate on this based on what I've read of mcc's documentation, mind you. Our university's license server only has two licenses for mcc, and whenever I've tried to use it they were both in use already. 
Great. Looks like I'm gonna be talking to mathworks then, maybe they can tell me some alternative way top do this. That, or I'll have to do some crazy shit if i want to avoid having 2 different lists that have to match perfectly.
Have you considered compiling your C++ code with mex instead of mcc? The interface is a tad different, but by embedding the C++ code in MATLAB (rather than the other way around), you retain the ability to execute arbitrary MATLAB code. 
I hadn't considered that no; is there a tutorial on how to do that somewhere?
http://www.mathworks.com/support/tech-notes/1600/1605.html 
Im reading through the tutorial, thinking about how this will work. But see, I've already written a lot of c++ code, and it looks like I would have to make some significant changes to all of it. Alternatively, I could make just one function, the one that calls the actual m files, into a mex function. The problem with that is that I would have to pass information back and forth between the base c++ program and the mex file, which I'm not sure how to do smoothly (or at all). This is one reason I wanted to go with the library solution; it's all handled, no IPC bs to deal with, it's all through function interfaces. So, what I could do is this: C++ program --&gt; MCC library --&gt; MEX program - - - &gt; selected m file Where the --&gt; indicate hardcoding, and the - - - &gt; indicates the arbitrary m file execution with the eval statement. Will this work, or am I going to have the same problem as I have now?
I suspect you will likely have a similar problem. Inability to run arbitrary m-files isn't a technical lacking of mcc apps, it's something they did on purpose. While it's possible that they missed a back door or two, I wouldn't count on it. You're just going to have to give it a try. &gt; This is one reason I wanted to go with the library solution; it's all handled, no IPC bs to deal with, it's all through function interfaces. I'm not sure what you're getting at here... MEX files run inside of MATLAB's own memory space (as a shared library), so there's no IPC involved, as long as you're willing to embed the entire application in MATLAB. I've embedded the Python interpreter in a mex file, so I know that approach works fairly well.
The embedding of the entire application is what has me hesitant. It looks like I have to change my code quite a bit to make it work, and the fact that what i have is C++ and not C seems to complicate matters. Also, I plan on using sqlite in the future, and I don't know how that will react. This may be a question for mathworks, but if they are concerned about my "replacing" matlab, I don't have a problem with structuring my app so that it invokes matlab itself, I just don't know how, other than with a mex file.
sqlite is just C and should work fine. This subreddit is kind of underpopulated. If you'd like to get more opinions than just mine, I'd recommend asking about this again on [Stack Overflow](http://stackoverflow.com/). There are some fairly knowledgeable folk there, including (I think) some people that work for The MathWorks. Perhaps someone there has a better answer for you. 
Very nice!
Nice. I use the optimization toolbox for curve fits--in particular, lsqcurvefit() for non-linear problems. I actually do something similar to what this article talks about for linear problems. It's kinda weird, to me, that matlab has so many implementations of curve fits. I mean, there are like 3 or 4 different least squares-related functions in the optimization toolbox, a significant handfull in the statistics toolbox, and there seems to be a curvefit toolbox as well. Sure sounds like a lot of overlap to me!
I agree and find that confusing as well. The Mathworks has a curvefitting guide on-line, but I still don't understand why so many different functions are used. See: http://www.mathworks.com/support/tech-notes/1500/1508.html 
I usually don't run any housekeeping, but then again nobody ever taught me about that and I never had much issue with anything. If there's something to learn here, I'm down! As far as getting the path: have you tried [pwd](http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pwd.html)?
pwd returns whatever the current working directory is. Say I have two m-files open: D:\folder1\m-file1.mat D:\folder2\m-file2.mat I want to be able to write a function that I can stick at the start of those m-files that will switch to their corresponding directories when I run the m-file. If I navigated to folder2\m-file2.mat and then ran m-file1.mat, pwd in m-file1 would give me D:\folder2\ and Matlab would ask me to switch to D:\folder1\. I want it to do it automatically.
Oh, I see. I didn't know you could run a matlab script from outside the directory it's in. In my experience, having things in your namespace usually means you're in the same directory. I guess I have some learnin' to do? :)
I much prefer to make functions instead of scripts. Then you don't have to think about housekeeping because the function always starts with a blank slate. To get the path to the current m-file, try this: mfilepath = fileparts(which(mfilename)); Note that mfilename only works in functions, not scripts.
You just want interp2(my_matrix). It places a new point in between all your points by default. It won't quite be 600x600 because it doesn't extrapolate beyond the outside of your matrix. try an example: interp2([0 1; 1 2])
Can you think of a better way to resize the matrix? For some context, it's a 300x300 pixel image that I need to enlarge to 600x600. I don't have access to the image processing toolbox w/ imageresize.
Heres how to do it: %Load image to be resized (interp2 requires image to be floating point) img = single(imread('cameraman.tif')); %Create original image coordinates [X_orig Y_orig] = meshgrid(1:size(img,2),1:size(img,1)); %Create new image coordinates (twice the resolution) [X_new Y_new] = meshgrid(1:0.5:size(img,2),1:0.5:size(img,1)); %Interpolate from original image using new coordinates newimg = interp2(X_orig,Y_orig,img,X_new,Y_new); So what you are doing is telling interp2: "I have data (img) which uses this coordinate system (X_orig, Y_orig), I would like to take samples from my data from these coordinates (X_new, Y_new)". If X_new and Y_new are matrices, output will be also a matrix. By default interp2 uses linear interpolation, you can use some fancier method by providing new argument which can be for example 'cubic': newimg = interp2(X_orig,Y_orig,img,X_new,Y_new,'cubic'); Note that using this code you will not double the image size (from 300x300 to 600x600, as result will be 599x599, use linspace inside of meshgrid to get one pixel more).
Excellent. This worked great. Took a little bit of tweaking but does exactly what I needed to do. Thanks!
&gt;So how do I truncate that to just "D:\folder\subfolder\"? What I do is: tempDir = 'D:\folder\subfolder\m-file.m' separatorIndices = findstr(tempDir,filesep) %filesep is the system-dependent file separator char, "\" on windows %separatorIndices == [3 10 20] %Here you can write additional logic to check if the last character is filesep, %I avoid this by always keeping the convention of not ending with filesep %Also, the built-in Matlab function won't return a file path with filesep at the end mFileDir = tempDir(1:separatorIndices(end)) edit: Though shoelzer's solution is much more elegant. 
I think it's a good idea that there is a separate Matlab subreddit, but mods could add /r/numerical to the sidebar for potentially interested redditors.
Mind == blown
So you have a series of vector fields at different times at a fixed interval T. You can use the starting position (x1,y1,z1) to look up the velocity (u,v,w) at t=t0, then update the position as (x2,y2,z2)=(x1,y1,z1)+T*(u,v,w). Then look up that position in the next vector field for t1=t0+T, find the next velocity, and repeat. Obviously the smaller T is, the more accurate this will be. You are just calculating the new position in finite steps, similar to using a vector field to solving a differential equation.
thetripps method is correct method. If instead of particle we have some larger object (sphere), we could try to approximate its size and shape by smoothing/averaging the vector field first. This might also decrease "jerkiness" of the particle motion in case of sudden changes in the vector field. More correct method would also take into account the shape of the object (surface normals) and mass/inertia (or even other particles/objects). If data is not uniform (x, y and z not equally spaced), you can not use function 'interpn' (but if it is, use it) and you have to use 'griddata3' or 'griddatan'. You need to use interpolation (or griddata) for each vector component u,v and w. Now your code would look something like this. %px,py,pz are particle coordinates at starting position, these can be any shape (n-dim, matrix, vector, scalar) %We need to set some kind of time step, you could use 1, but it might be too big and motion would be too jerky, experiment with it. T=0.1; %Get force (or in simplified case, velocity) at particle position vel_x = griddata3(x,y,z,u,px,py,pz); vel_y = griddate3(x,y,z,v,px,py,pz); vel_z = griddata3(x,y,z,w,px,py,pz); %Move each particle according to interpolated data px = px+T*vel_x; py = py+T*vel_y; pz = pz+T*vel_z; Of course now u,v and w are not changing in time. You could fix this by interpolation between original time frames. u,v and w can be marked as functions with parameter 't'. Lets say that your original time frames are [0 1 2 ... 10] and you want to interpolate between them smoothly. 'T' is still your time step so you have to interpolate t=0:T:10. I will assume that you have loaded u,v and w data to cell arrays u_data, v_data and w_data. Each of these have 11 matrices ([0 1 2 ... 10]) with as many elements as x,y and z data. Now: u = interp1(0:10,[u_data{:}],t) and so on. You have to do this interpolation step in a for-loop (it can be made in one line but the code will be messy). You could also use other interpolation methods, as it would make changes in velocity function smooth. This can be done by adding 'cubic' or 'spline' to interp1 command (u = interp1(0:10,[u_data{:}],t,'spline'). As always, I didn't read you original post very well as I didn't notice that you said that your data is uniform (or fixed interval). You should definitely use interp3 instead of griddata3 (you can still use griddata3, but result might have poor quality). Now your only problem is forming matrices suited for interp3 from you current vector form data. If this didn't help you enough, please contact me and I will try to do something more specific tomorrow.
Thanks for the help, both of you. Here is some additional info (if it tells you anything): grid = 512 x 64 x 32 format = ascii interleaving = record-vector majority = row field = positions, velocities structure = 3-vector, 3-vector type = float, float dependency = positions, positions positions = regular, regular, regular, 0, 1, 0, 1, 0, 1 (end) Here's my current script: function [x y z xf yf zf] = test( filepath_in, timeStart, timeEnd, timeStep, xi, yi, zi) data = textread(filepath_in); dt = (timeEnd - timeStart)/timeStep; time = timeStart; posVecX = reshape(data(:,1),512,64,32); posVecY = reshape(data(:,2),512,64,32); posVecZ = reshape(data(:,3),512,64,32); u = data(:,4); v = data(:,5); w = data(:,6); Fu = TriScatteredInterp(posVecX, posVecY, posVecZ, u); Fv = TriScatteredInterp(posVecX, posVecY, posVecZ, v); Fw = TriScatteredInterp(posVecX, posVecY, posVecZ, w); i = 1; x(i) = xi; y(i) = yi; z(i) = zi; while(time &lt; timeEnd) vx = Fu(x(i), y(i), z(i)); vy = Fv(x(i), y(i), z(i)); vz = Fw(x(i), y(i), z(i)); x(i) = x(i-1)+vx*dt; y(i) = y(i-1)+vy*dt; z(i) = z(i-1)+vz*dt; time = time + dt; i = i+1; end end I'm currently running griddata3 on the data, because the interp functions give me an error about needing distinct values. I experimented with the thought of trying stream3, basically the perfect function for my needs, but again I encountered the error of needing distinct values. Trying TriScatteredInterp, assuming that my data was not uniformly spaced, I encountered an error saying that my input data points have invalid dimensions (despite reshaping my x, y, z, u, v, and w arrays to 512x64x32). Currently, I am trying the griddata3. Unfortunately, each of the 20 files (and that 20 figure will increase once more data comes in from the simulation people) is ~1,004,000 lines, implying that there are as many vectors to consider. Needless to say, merely calculating the griddata3 function of ONE of the velocity components has already taken 30 minutes, and it's not done yet. Looks like I'll be requesting permissions to use the supercomputer soon. Seriously, thanks again.... Thanks a lot.
Strange. Interp3 "should" work. I would suggest checking the inputs (posVec{X,Y,Z}), MATLABs matrices are made of column vectors and usually other programs use row vectors. I would guess that your data is something like this: x y z u v w -------------- 0 0 0 u1 v1 w1 1 0 0 u2 v2 w2 2 0 0 u3 v3 w3 ... 512 0 0 u512 v512 w512 0 1 0 u513 v513 w513 1 1 0 u514 v514 w514 2 ... In this case your current data loading and reshaping would result 'misaligned' matrices posVec{X,Y,Z}. You can easily check this by looking at first 'layers' of these matrices: figure subplot(3,1,1) imagesc(posVecX(:,:,1)) subplot(3,1,2) imagesc(posVecY(:,:,1)) subplot(3,1,2) imagesc(posVecZ(:,:,1)) If you are correct (and I am wrong). You should have 1) Clean X-direction gradient (no change in y direction) 2) Clean Y-direction gradient (no change in x direction) 3) Constant matrix (probably green) If I'm right (and I hope so, as it would help you, otherwise I'm wasting time for both of us) you might have: 1) Clean Y-direction gradient 2) Clean X-direction gradient In this case just change names for posVecX and posVecY. Or: 1) Strange zig-zag or chessboard like data 2) Same as above 3) Constant or zig-zag In this case you need to change lines posVecX = reshape(data(:,1),512,64,32); to posVecX = reshape(data(:,1),64,512,32); posVecX = permute(posVecX,[2 1 3]); Here is quick visualization of what I'm talking about %Generate data sizes = [5 11 3]; [X Y Z] = meshgrid(1:sizes(2),1:sizes(1),1:sizes(3)); %Things should look like this figure subplot(1,3,1) imagesc(X(:,:,1)) subplot(1,3,2) imagesc(Y(:,:,1)) subplot(1,3,3) imagesc(Z(:,:,1)) %But They might look like this X = permute(X,[2 1 3]); Y = permute(Y,[2 1 3]); Z = permute(Z,[2 1 3]); figure subplot(1,3,1) imagesc(X(:,:,1)) subplot(1,3,2) imagesc(Y(:,:,1)) subplot(1,3,3) imagesc(Z(:,:,1)) %Or this X = reshape(X,sizes); Y = reshape(Y,sizes); Z = reshape(Z,sizes); figure subplot(1,3,1) imagesc(X(:,:,1)) subplot(1,3,2) imagesc(Y(:,:,1)) subplot(1,3,3) imagesc(Z(:,:,1)) %Quick fix X = reshape(X(:),[sizes(2) sizes(1) sizes(3)]); X = permute(X,[2 1 3]); Y = reshape(Y(:),[sizes(2) sizes(1) sizes(3)]); Y = permute(Y,[2 1 3]); Z = reshape(Z(:),[sizes(2) sizes(1) sizes(3)]); Z = permute(Z,[2 1 3]); figure subplot(1,3,1) imagesc(X(:,:,1)) subplot(1,3,2) imagesc(Y(:,:,1)) subplot(1,3,3) imagesc(Z(:,:,1)) Also, the date you have now (read by textread) might be 'defective'. In this case you might have X,Y,Z values thath are not monotonically increasing/growing. Heres example of this problem with interp1 %Normally X is constantly increasing interp1([1 2 3 4],rand(1,4),rand+1) %But in same cases (for example when we have rounding errors) it might be like this (causes error) interp1([1 1 3 4],rand(1,4),rand+1) %Or interp1([1 0 3 4],rand(1,4),rand+1) In this case you should try to replace defective data (add very small positive number to defective rows/colums) You could also have rounding errors on rows of X. For example following matrix does not work with interp2 X = [1 2;1.01 2] In this case also, you should correct (round?) defective data.
Sorry for the delayed response. I still appreciate your advice. I have decided to take this from another approach: just using stream3 at random seed locations (and going forward *and* backwards, ie: using u, v, w &amp;&amp; -u, -v, -w). So, what I am producing is a bunch of streamlines for any instant of time. Does anyone know of a way to produce *streaklines* rather than streamlines, with consideration for the variable of time? Here's my function so far: function [] = streamRand(in_filepath, numberOfStreams, out_filedir) data = textread(in_filepath); xxmid = median(data(:,2)); yymid = median(data(:,1)); zzmid = median(data(:,3)); x=reshape(data(:,2),512,64,32); y=reshape(data(:,1),512,64,32); z=reshape(data(:,3),512,64,32); u=reshape(data(:,5),512,64,32); v=reshape(data(:,4),512,64,32); w=reshape(data(:,6),512,64,32); for i=1:numberOfStreams filename = strcat('bead', num2str(i), '_', randsample('0123456789abcdef',5,true), '.csv'); fullpath = strcat(out_filedir, filesep, filename); xx(i) = random('uniform', .5*xxmid, 1.5*xxmid); yy(i) = random('uniform', .5*yymid, 1.5*yymid); zz(i) = random('uniform', .5*zzmid, 1.5*zzmid); backwards = stream3(x, y, z, -u, -v, -w, xx(i), yy(i), zz(i)); pos1 = flipdim(backwards{1,1}, 1); pos2 = stream3(x, y, z, u, v, w, xx(i), yy(i), zz(i)); outpos = vertcat(pos1, pos2); dlmwrite(fullpath, outpos); disp(strcat('Wrote:', fullpath, '.')); streamline(outpos); end end Thanks for your time.
Here are the [Release Notes](http://wiki.accelereyes.com/wiki/index.php/Release_Notes_\(RC\))
It would e good too have some examples of application of functional programming, for those who don't know about it. Good job.
Yeah, definitely! Functional programming is actually used all the time in Matlab--it's just really constrained with regard to how you can do it, is all. For example, A.^2 is really a mapping of the scalar function f(x) = x^2 over the matrix array A. Unfortunately, this is pretty much where it ends with standard Matlab, and you don't really see a lot of the snazzier, more powerful "higher-order" functions that functional programming languages (lisp, haskell, ocaml, etc.) are known for. Back when Matlab was completely interpreted, writing your programs in a functional style (that is, "code vectorization" and avoiding explicit *for* loops) was a big deal. It's not really anymore (unfortunately, I found myself using *for* loops while implementing methlabs), but there's still a sense of conciseness and good style that comes with fp paradigms. This work came out of working on some matlab code for my thesis, and while it turns out there's much easier ways to do what I was trying to do, I guess this can work as an example. In particular, I wanted to do something akin to: [X1,X2,X3] = ndgrid(arange,krange,krange,krange); except that, a'priori, I wouldn't know how many arguments I would be passing to meshgrid, or (more importantly) how many variables I'd be receiving! I think the idiomatic way to do this is: [X{:}] = ndgrid(arange,K{:}); where X and K are cells. I'd never really seen this sort of problem before and was having a hard time googling this sort of problem, so I, well, used the wrecking ball that is eval(). In addition, I've since refined these implementations. That said, here's the line: eval(['[' xsList(dimension+1) ']=ndgrid(anglerange,' argRep(dimension,'krange') ');']); with functions function list=xsList(n) %generates a string akin to "X1,X2,X3,X4" with n elements list=[init(flatten([areplicate(n,'X')' int2str([1:n]') areplicate(n,',')' ]))]; end function list=argRep(n,arg) %generates a string akin to "k,k,k,k" with n elements list = cjoin(creplicate(n,arg),','); end So, you can see my use of replicate and init, along with anonymous functions (lambdas in other languages) and a few examples of a somewhat functional style. Unfortunately, it's kind of a bad example, and you don't see folds anywhere in here, or MATLAB's versions of map(). You may also find looking at [CELP](http://www.mathworks.com/matlabcentral/fileexchange/10137) enlightening, which I took as inspiration.
thank you.
It's both a MATLAB/Java-powered HTTP server as well as a preprocessor. Yes, it is a cheap ripoff of PHP. No, it isn't (yet) fully HTTP/1.1 compliant. But I think it's neat anyway.
Neat! Can you easily embed graphics with it yet? That would be cool. Of course, seeing a more detailed write-up or example is always welcome. One place where Octave and Matlab really diverge is in how they deal with foreign functions and packages. Octave [does have them](http://octave.sourceforge.net/) and I think Octave can even [use some .mex files](http://www.gnu.org/software/octave/doc/interpreter/Mex_002dFiles.html), but past that, Octave is still (afaik) interpreted/written in C(++)/is no friend of java.
Embed graphics? Hm...I seem to have forgotten that perhaps the coolest use of this would be to insert &lt;?mathp plot(x,y) ?&gt; and have the plot show up. That is definitely on my to-do list.
Awesome. :D
OK, I have something working already. To automate the image and URL generation process, a few lines of code are abstracted as mathp_plot, which works exactly like plot except it prints out a path to the dynamically generated image file. I also haven't really come up with a good way of deleting all the temporary files generated; perhaps a database of plots vs. filenames (so the plots are dynamically regenerated every time they're requested), or maybe a cron job that looks in the directory and deletes "expired" files. Also there are some issues with incorrect DPI causing ugly graphs...but that's fixable (I hope).
thanks for sharing
Abaqus has a matlab interface? I was only really aware of the python interface. Then again, I've never used abaqus. Why do you ask, TIP? What do you have in mind?
It doesn't have an interface, per se, but MATLAB can call things and run executables. MATLAB also has a better library of engineering tools than Python, like Monte Carlo simulation. In other words, I could have a MATLAB script that runs "c:/.../abaqus.exe inputfile.inp" and assigns random values to a few choice variables. Combined with automated postprocessing, I could generate a list of parametric sensitivities. For instance, I could calculate the sensitivity of the tip deflection of a cantilevered beam tip with respect to changes in the cross section of the beam, mesh size, and elastic modulus all at once.
My $0.02: I think python might surprise you, and you could find it easier working with the intended interface than by trying to use matlab and system calls. I don't know what sort of Monte Carlo method you're going to be doing, but [pymc](http://code.google.com/p/pymc/) is an MCMC implementation in python. I haven't used it, but my impression is that it's pretty good! If you are still going to use MATLAB (I wouldn't blame you), you may find [Pymex](http://vader.cse.lehigh.edu/~perkins/pymex.html), which embeds a python interpreter into MATLAB and does some nice type conversions, useful. I wasn't able to use it because my available python version was too old, but I bet it's better than system calls!
Point taken. I just find MATLAB easy to use because, honestly, I can find a cracked copy and have it up and running in less than 2 hours (torrent download included). Besides that, it's one ugly beast of a program. Python just seems more difficult to implement. Is there a simple integrated developing environment that I can run in Windows?
Ah, windows. Actually, you do have a few choices. You can [download cpython](http://python.org/download/releases/2.7/) and have it work just fine--I've done that before. Compiling extra libraries with C extensions will probably require [MS's Visual Studio Express](http://www.microsoft.com/express/Windows/) action, which I didn't need to do but you probably will want Numpy in this context. As an alternative, you can grab [IronPython](http://ironpython.codeplex.com/), a .NET implementation, but anything with C extensions won't work with it. I've only really used cpython, but I think I've heard good things about IronPython. I have to wonder, though: If ABAQUS has python integration, maybe ABAQUS comes with its own python interpreter? I'd definitely look into that.
As I understand it, ABAQUS CAE is just a Fortran computational kernel that's been coupled with CAE, a Python GUI that blends CAD with meshing capabilities and orchestrates the execution of the ABAQUS kernels. One can manually run Python scripts from ABAQUS CAE, but this ends up making scripts seem more like the 'macros' used by Microsoft Excel, rather than being a means of directly accessing the computational kernel.
From what I can tell, ksdensity returns a continuous density function (not a discrete probability mass function which, it is true, cannot have a value greater than 1.0). So if you integrate a, the returned density, you should get exactly 1. % Example: a = rand(100, 1); [f,x] = ksdensity(a); max(x) % I put this here to check to see if we have a value greater than 1 trapz(x,f) % this integrates the density f over the values in x ans = 0.9999 For another view, think of the [dirac delta function](http://en.wikipedia.org/wiki/Dirac_delta_function). Theoretically, it has a value at zero of infinity. But the area beneath it is 1. I hope this helps EDIT: fixed the formatting on the code
Thank you!
If you set the delimiter, it should work: tmp.txt: 0 1 a 2 2 3 3 3 1 b 4 fid = fopen('tmp.txt'); without the delimiter: a = textscan(fid,'%d %d %1c %d'); gives a{3} = [a; 3; b]; with the delimiter: a = textscan(fid,'%d %d %1c %d','Delimiter',' ') gives a{3} = [a; ;b]; hope this helps...and is readable.
Did you figure it out? I think you can solve your problem using regexp, as well.... 
I've used the parallel processing toolbox, I've mainly parallelized using parfor loops and the speed up can be substantial. Getting a factor of 8 reduction with 8 cores is unlikely however, and that is because the matlab parallelization basically spawns a separate matlab process for each core, and all data used has to be transferred to each process, and that can really slow it down. Parallelizing your code to use parfor is pretty easy, basically you just replace for i=1:N, with parfor i=1:N There are some things to consider in terms of how data is passed to each process, and how it is retrieved. There are other things in the parallel processing toolbox, memory mapped files and things for sharing very large matrices, but I think for the problem you describe, parfor loops are the best. http://www.mathworks.com/access/helpdesk/help/toolbox/distcomp/brb2x2l-1.html
Parallel seems to be very finicky. I added the parfor loop which was easy since my program is a giant loop. I added matlabpool also to the coding. The problems I have now is that it doesn't want me to references structs with a "." and have my variables no be ambiguous. The problems with this is that all the data I am using has been collected the past 3 years and has a certain setup. A majority of the data is structs and my program references many scripts which reference other scripts each with their own variables. It seems I would need to have all variables from every script being used all within my program; or I am just looking at this problem incorrectly. 
Yes, taking something that has been written and then adding parallelizing as an after thought is of course going to be fraught with difficulties, in matlab, or any other language. I have had to first write, and debug the algorithm, make sure it works, and then re-write it with the parallelization, taking lots of time to try different methods of passing and retrieving data: cell arrays, structs, etc, and benchmarking them all until I found what seemed to be the best option. All-in-all, it was a fairly time consuming process, the resulting code is much longer and hard to read, and because of the way the parallelization works, if there is an error in the parfor loop, the error message can be confusing. 
If you're wanting to write this out to an Excel file, why not just use [xlswrite](http://www.mathworks.com/help/techdoc/ref/xlswrite.html)? You can either write both variables out separately or combine them. Use `num2cell` to convert the matrix to a cell array, then stack the names array on top of it. 
I think I may have tried this and run into some odd error. I'll try working with it tomorrow and get back to you. Thanks a lot for taking the time to help.
Agreed. If you want a .xls file, use xlswrite. If you instead want a text file, you can use fprintf. You'll have to use 2 separate commands (one for the column headers and one for the numeric data). For the format string, you can generate it dynamically based on how many columns you'll have. Something like: &gt;&gt; fstring = repmat('%f',1,N); % where N is the number of columns, extracted using the SIZE command. (**NOTE** that you have to have MS Excel installed on the machine for xlswrite to work properly. Refer to the [doc](http://www.mathworks.com/help/techdoc/ref/xlswrite.html) for more information)
dfarag i know your reddit nick now o_0
wouldn't you want to check the max of f and not x, since x are just the indices?
Yes. you're right. Sorry about that.
&lt;/threadomancy&gt;
Tutorials are always welcome, without them it is really hard to start from the zero. Few pointers: -You have accidentally reversed x an y indexes and therefore transposed the result in downsample4.m -You should always preallocate matrices before storing data inside of them in loops. Or you should invert the loops (start from the last index), as then the matrix would be allocated at the first iteration (but it is still faster to preallocate the matrix). (downsample4.m). Not only is it faster to preallocate, but without preallocation you might fragment your memory. -If possible, avoid loops. MATLAB is really slow when looping. Of course vectorized code gets easily confusing for beginners, but you should still teach also the "right way" (downsample4.m) dat_reduced2 = zeros(h/2,w/2,3); dat_reduced2(:,:,1) = dat2(1:2:end,1:2:end,1)+dat2(2:2:end,1:2:end,1)+dat2(1:2:end,2:2:end,1)+dat2(2:2:end,2:2:end,1); dat_reduced2(:,:,2) = dat2(1:2:end,1:2:end,2)+dat2(2:2:end,1:2:end,2)+dat2(1:2:end,2:2:end,2)+dat2(2:2:end,2:2:end,2); dat_reduced2(:,:,3) = dat2(1:2:end,1:2:end,3)+dat2(2:2:end,1:2:end,3)+dat2(1:2:end,2:2:end,3)+dat2(2:2:end,2:2:end,3); dat_reduced2 = dat_reduced2./4; -This is might be only my opinion, but I prefer linspace over colon operator (linspace(0,1,256)) I have to read your tutorials with more time, fiddling with colors has always been my weak point and compressions isn't my strongest point either, nice to have well explained tutorials on these subjects.
Thanks for the comments. I agree on all points. The first issue is fixed by now, the performance-ones are on a to-do list. 
Just look up the Taylor series for cosine; it will literally be exactly what you need.
well hot damn there it is. didn't even think of that. I'm working on the loop now. Tell me if this sounds correct. cosx=((-1)^n/(2n)!)*x^2n n=0 while(n&gt;0) n=n+1 disp(cosx) end This is probably all wrong. I go to class all the time, but the professor doesn't explain it too well and already expects you to know it. Like I said I'm horrible at programming.
well hot damn there it is. didn't even think of that. I'm working on the loop now. Tell me if this sounds correct. cosx=((-1)^n/(2n)!)*x^2n; n=0; while(n&gt;0); n=n+1; disp(cosx); end This is probably all wrong. I go to class all the time, but the professor doesn't explain it too well and already expects you to know it. Like I said I'm horrible at programming.
Let me know if my understanding is correct: What I understand is that you are being asked to compute an approximation of *cos*(*x*) using the given series (which, as m1ss1ontomars2k4 pointed out, is the Taylor series of cosine) with increasing accuracy. If the above is correct, I don't think that you are computing what is being asked. Here's something to think about: To approximate a function using the first *n* terms of its Taylor series, what needs to be computed is 1) the first *n* terms of the series, and 2) the sum of those *n* terms.
Another small tip, say you want to sum integers from 1 to n. To do that in a for loop, you would use a variable to accumulate the integers, like so: sum = 0; for i = 1:n sum = sum + i; end Note that it's not good practice to use loops in Matlab if you can use vectors instead, but for now that's irrelevant.
Yes the assignment is that as each new term is added it computes the value of the sum of the terms. I understand what you're saying now and that I was incorrect with my first assumption, but sitting in front of MATLAB now my mind just blanks on how to put that into code.
ok I'm following this on how to sum up the terms, but where does the i come up in the code? I'm sorry but I'm illiterate when it comes to programming languages and codes.
Sorry I didn't declare it clearly. i is just a regular variable that we temporarily use to keep track of the count, i.e. the "index" of the loop. How the for loop works is it takes the variable right after "for" (i in this case) and runs the code between "for" and "end" for each value of i that you want. You tell it what values of i you want with the "i = &lt;some expression&gt;" part in the "for" line. So, the second line in the code means, create a variable named "i", initialize it with the value "1", run the expression in the loop, increment "i" by 1, and so on, stop when you ran the code for i=n. Sorry if the above was too basic, you said you were completely illiterate about programming so I'm just trying to be helpful :) So where does "i" originate from? Out of nowhere basically. You can tell Matlab that you want to use "i" in the for loop, and don't have to mention it anytime before. Matlab will automatically create a variable i and use it to iterate in the loop.
Let's start out with a simpler version. Suppose that, instead of being asked to approximate cosine using *n* term of the sequence, we were instead asked to approximate it using 5 terms of the of the sequence. By what I suggested ("To approximate a function ..."), that would consist doing the following computations: ((-1)^0/(2*0)!)*x^(2*0) = 1 ((-1)^1/(2*1)!)*x^(2*1) = -x^2/2 ((-1)^1/(2*2)!)*x^(2*2) = x^4/24 ((-1)^1/(2*3)!)*x^(2*3) = -x^6/720 ((-1)^1/(2*4)!)*x^(2*4) = x^8/40320 and then adding them all up: 1 - x^2/2 + x^4/24 - x^6/720 + x^8/40320 This is a function of x, so we can write f(x) = 1 - x^2/2 + x^4/24 - x^6/720 + x^8/40320 This is what is going on *mathematically*. Now we need to transform this into *MATLAB* code. First off: functions. MATLAB actually has a neat way of writing functions. Suppose we want to write the function that takes *x* -&gt; *x* (*x*^2 + *x* - 1). We decide what to call it; say, *fxn*. Then the MATLAB code we write is as follows: &gt;&gt; fxn = @(x) x*(x^2 + x - 1) Try it out; you should get some output like the following. &gt;&gt; fxn(2) ans = 10 &gt;&gt; fxn(5) ans = 145 However, our *fxn* can only take numbers as input. An important programming concept in MATLAB is *vectorizing*. *Vectorizing* a function means programming it so that, in addition to taking numbers as input, it can also take vectors and matrices as input. It isn't difficult to vectorize a simple function like this: in place of of the operators \*, / or ^, simply type .\*, ./ or .^ In other words, simply type a period before the operators. Furthermore, most of MATLAB's built-in functions are already vectorized, so you don't have to worry about vectorizing the square root, sine, cosine, etc. Thus we can rewrite our function as follows. &gt;&gt; fxn = @(x) x.*(x.^2 + x - 1) Furthermore, we can now evalute *fxn* using input such as vectors, matrices, etc.! Examples: &gt;&gt; fxn([-1 1 2]) ans = 1 1 10 Ok, now let's go back to our function *f*. We write it as follows. &gt;&gt; f = @(x) 1 - x.^2/2 + x.^4/24 - x.^6/720 + x.^8/40320 We write it using some vectorized operations, so that if you want to later, you can do computations using vectors or matrices. However, the only “vectorized” operations we need to use is the vector exponential .^ This is because + and - behave the same with vectors as with numbers, and similarly scalar division does as well. Ok. How about we write it in a different way? The way we have written it thus far is only conducive to an approximation using 5 terms of the Taylor series. Instead, let's write it as a successive sum. Initialize the function *f* using the first term. &gt;&gt; f = @(x) 1 Then add to it the next term. &gt;&gt; f = @(x) f(x) - x.^2/2 And the next. &gt;&gt; f = @(x) f(x) + x.^4/24 and so on, until we add the fifth term *x*.^8/40320. What's different? Nothing; just the way we wrote the function. However, now it is written in a *recursive* way, which is very conducive to our original problem (of computing an approximation of the Taylor series using the first *n* terms, presumably for any value *x*). The next step would be to do just this; write similar code to this, but which has a loop that adds the appropriate number of terms. Then you have a function *f*(*x*) which is an approximation of *cos*(*x*) using the first *n* terms of the Taylor series. Further, you can input any number, vector, or even matrix *x* into it. Sorry for the long explanation. Let me know if this makes sense.
OK. Everything you said made sense to me up to the point where I actually have to write the code. I wanna say, by your definition: first I would have to initialize n as: &gt;&gt;n=0; then write out the function: &gt;&gt;cosx= ((-1)^n/(fact(2n)))*x^2n This doesn't seem right, but I know it's close. after that would I add in the loop that babua wrote: &gt;&gt;sum=0; &gt;&gt;for i=1:n sum=sum+i; &gt;&gt;end 
It's alright. All this is basic and I understand it to some level. This is the 2nd time that I've taken this class and the first time around I had a hard ass prof who from day 1 expected you to know how to write loops (not even when I went into his office. And I never missed a class) Then now where I have a prof who doesn't explain it nearly good enough and expects you to know it (she also snorts when you ask her a question... no literally snorts) It's a good university with a good engineering program. They just lack good prof in some classes. Basically just fill the spot with people who PhD's and just there for research. (Don't even get me started on how Physics was with me... I enjoyed it until I got to physics II with electromagnetic theory)
I think what you have written isn't cosine, but the nth term of the Taylor series expansion of cosine. So, you'd want to generate all n terms and add them together. So, you could so something like: x = pi/2; %Whatever x you are using n = 3 %However many terms you want to use total = 0; for i = 1:n, total = total + seriesTerm(x,i); %You basically know what the nth series term is end fprintf(total); % prints taylor series term Basically, you're going through a loop where you are generating the ith term of the taylor series, then adding it to the sum. Alternately, I believe you can do something like this as well: x = pi/2; %Same deal here is = 1:10; %[1,2,3...9,10] allTerms = seriesTerm(i,x); %Function should be able to take a vector and apply itself to each term %if written carefully answer = sum(allTerms); %I don't remember if MATLAB actually has a sum() function or if I'm %remembering it from some other language. In this case, sum(vector) takes all the terms in the vector and adds the together. For example, sum([1,2,3]) == 6. Hopefully I didn't give away too much of the answer there. I'm pretty bad at being helpful while not giving the answer up, but you looked like you were struggling there. In return for the lack of a spoiler alert, I'll answer as many of your questions as I can.
Yes, Matlab has a sum function that does what you would expect to vectors.
Regarding things not making sense; are they related to coding in Matlab, to coding in general, to my examples, to my examples directly related to the exercise, or to something else? (I'm not offended, just to want to offer relevant advice. :-))
oh shit. I think I got it now. and no this wasn't a total spoiler. what does your 3rd line mean when you say: &gt;total=0; also, when you write: &gt;seriesTerm(x,i); %is this a built in function? I was confused at first then I went back to look at the assignment and realized that you'll have to input the number of terms and x. [HW-3.1](http://imgur.com/59nu6.png) so I know now that I would prompt for the 2 variables: &gt;&gt;x=input('x?'); n=input('Number of terms?') I think my biggest problem is creating the code for the loop for each term.
No your examples made sense and it helped. Like I just replied to 'jesusabdullah' my biggest problem is thinking of the code that will create that loop (like the expansion)
Thanks. I've been doing a lot of python and javascript lately, and using lots of non-standard libraries, so I couldn't remember.
SeriesTerm(x,i) isn't built in, and is just meant to represent the ith term of your Taylor series evaluated at x. You would have to write it yourself. It could look something like, function y = seriesTerm(x,i) y = %fill in the blank; end Or, you could use an anonymous function: seriesTerm = @(x,i) %fill in the blank% ; Or, what might be easiest is to just write the equation: for i = 1:n, total = total + %fill in the blank%; end Now, you asked what's going on with *total=0*. So, here's the loop broken down: * We initialize the total (ie, our answer) as 0. * Going into the loop, we start with i=0. * We calculate the series term at i=0 for our particular x, and add that to the total. This means that total is now equal to the result of the first term. * Start the loop again. This time, i=1. * We calculate the series term at i=1 at our particular x, and add *that* to the *current* total. The total *was* just the first term of the series, but now it's the sum of the first and *second* term of the series. * Rinse and repeat until we do i=n. Every time, we add the result of another Taylor series term to our total. * Now, our total contains the numeric sum of all of our Taylor series terms! I gotta say, I'm glad to see that you're trying to figure this out. I've seen too many engineering students say to themselves, "I'm an engineering student, not a CS major! I don't need this!" I actually saw someone post on Craigslist up here trying to get someone to take their MATLAB final for them, no joke. I would say that, while you can definitely be an engineer without being a programming master, being able to half-ass it later on is *really* helpful. Edit: You mentioned not knowing where the "right" place to go would be. On Reddit you may find [/r/engineering](http://www.reddit.com/r/engineering) and [/r/cheatatmathhomework](http://www.reddit.com/r/cheatatmathhomework) useful, though for MATLAB help you'll probably have more luck with [Stack Overflow](http://stackoverflow.com).
`n=5; % Number of the terms of the Taylor series` `x=pi/4; % We will compute cos(pi/4)` `n=0:(n-1); % Create a vector containing 0, 1, ..., n-1` `cosx=sum((-1).^n.*x.^(2*n)./factorial(2*n)) % This is the vectorial solution, usually you should use this method to speed the program because matrix and vector operations are quick.` `% Here is the loop version` `cosx=0` `for i=0:(n-1),` ` cosx=cosx+(-1)^i*x^(2*i)/fractorial(2*i);` `end` `cosx` **EDIT**: Here is how you should have thought about it: * Do the calculation by hand for n=3 for example to grasp how the calculation is done; * Identify the functions needed to write the series terms (`factorial()` for factorial for example); * Write the statement for just one iteration for a given `n` and `x`; * Paste it inside a loop, and rememeber to initialize `cosx` to zero; * Check the range and step that i takes. 
When you compute the first term of cos, wouldn't it come out to -1 and not 1?
So I pretty much have it but It keeps responding with an error with my 'fprintf' line: &gt;function[]=mycos(x,n) &gt;x=input('What is x?'); &gt;n=input('How many terms?'); &gt;i=0:n; &gt;while (i&lt;n) &gt; cosx=((-1)^(i-1))*((x^(i-1))/(2*(i-1))); &gt; i=i+1; &gt;end &gt;fprintf('The value of cosx is: %g',cosx); also, I have to show the error of the sum of the components compared to the actual value and I have no idea where to start on that. (It's due tonight by 11:55 :/ maybe I should've started this earlier, but engineering keeps my schedule full)
Thank you for catching my error in the iterative version, it should have been 0:(n-1) instead of 1:(n-1) so it would be (-1)^0 whitch is 1.
Yeah I'm trying to figure it out. I Aced my math requirements and even took calc 4 for an easy A, but when it comes to this my mind just blanks. I know it's a good thing to know. I have a friend who graduated from Auburn with ME and now works for a company here to make pumps. He's written a lot of programs for the company and I think has 2 patents for them. Makes you well-rounded
 function [cosx,rest]=mycos() x=input('What is x?'); n=input('How many terms?'); cosx=0; for i=0:(n-1), cosx=cosx+(-1)^i*x^(2*i)/factorial(2*i); end rest=cos(x)-cosx; fprintf('The value of cosx is: %g, error: %g',cosx,rest); **EDIT:** If you wanna do it the right way, you should first create `mycos.m`: function [cosx,rest]=mycos(x,n) cosx=0; for i=0:(n-1), cosx=cosx+(-1)^i*x^(2*i)/factorial(2*i); end rest=cos(x)-cosx; And create an other `.m` file, `main.m` for example, in the same directory that calls the function: x=input('What is x?'); n=input('How many terms?'); [cosx,rest]=mycos(x,n); fprintf('The value of cosx is: %g, error: %g',cosx,rest); 
looking at what you put in the first section: &gt;function [cosx,rest]=mycos() &gt; &gt;x=input('What is x?'); &gt;n=input('How many terms?'); &gt;cosx=0; &gt;for i=0:(n-1), &gt; cosx=cosx+(-1)^i*x^(2*i)/factorial(2*i); &gt;end &gt;rest=cos(x)-cosx; &gt;fprintf('The value of cosx is: %g, error: %g',cosx,rest); Looking at it now, it seems so simple. I think my biggest problem is creating the iterative function to fit my loop. Most of the time I just right into trying to write the .m file, but I'm going to try to start on paper first and work my way up. Just out of curiosity? could you make it work with a while loop?
&gt; Just out of curiosity? could you make it work with a while loop? Yes, it is possible to convert a `for` loop to a `while` loop: for i=1:3 &lt;do something&gt; end becomes i=1; while (i&lt;=3), &lt;do something&gt; i=i+1; end Usually, for is more suitable to sequences or object collections, and while for conditions. For example, if you want to iterate over the values of a vector `a=[2, 3, 2+i]` you would use `for`, but if want to test a convergence condition for example you should use the `while` loop.
So when I say: i=0:n; cos(x)=0; while (i&lt;n) cos(x)=... %iterative formula i=i+1 sum=sum+cos(x) end would this work, or am I completely wrong? The assignment has been turned in and I ended up doing it a different way where it bounced back between 2 for statements until it completed the set amount of terms. I'm just curious because I have a test on this crap next Monday and I want to make sure I understand it.
It wouldn't work because `i` has been initialized to a vector: i=0:n=[0,1,2,...,n] It should be initialized to zero (`i=0;`) instead. You may find [this](http://www.matrixlab-examples.com/matlab-code-3.html) helpful.
OK. I understand now why my .m file wouldn't work last night. If that's the case then how would you make it loop until it found the nth term? Sorry all the questions. This problem was pissing me off yesterday and I stared at the computer screen for hours trying to figure out why it wouldn't work.
&gt; how would you make it loop until it found the nth term? To understand this you should understand how Matlab's `for` statement works. In *normal* programming languages, the for statement allows you to repeat an action for `N` times with a counter (`i` in our case) keeping track of its progress. When a halting condition is met, the loop is exited. Here is an example in BASIC (I chose BASIC because it's easy to understand): for i=1 to 3 print i next i What happens when the loop is executed is the following: 1. i = 1 % the counter is initialized to the first number in the chosen range 2. if i&gt;3 exit the loop 3. output i to the console 4. increment i 5. go to step 2 In this case, the `for` loop can easily be replaced by a `while` loop: i=1 while i &lt;= 3 print i i = i + 1 end while In Matlab, things are a bit different. Matlab's `for` statement is usually called in some other programming languages `foreach`, which means the counter `i` is an iterator instead of a counter. Here is an example the same example that we wrote in BASIC, but this time written in Matlab: for i=1:3, disp(i); end What happens when the loop is executed is the following: 1. Create the vector 1:3 which actually is [1 2 3] 2. i **points** to the first element of the vector which is 1 3. if i has reached the end of the vector, exit the loop 4. output the content of the i*th* element of the vector to the console 5. point i to the **next** element of the vector 6. go to step 3 So in Matlab, instead of defining the range of a counter, you define a vector (or a cell array) that you access each of its element sequentially. The loop exits when all the vector's elements have been accessed. So the number of iteration is defined by the *length* (number of elements) of the vector. Rewriting the `for` loop as a `while` loop would be a bit more complex than what we did with BASIC if we follow the steps above literally, so the trick is to write an *equivalent* `while` loop that emulates Matlab's `for` loop but using the *easy* algorithm: i=1; while i&lt;=3, disp(i); i=i+1; end I don't know if this is the answer you're looking for, but I hope it helped. &gt; Sorry all the questions. This problem was pissing me off yesterday and I stared at the computer screen for hours trying to figure out why it wouldn't work. The first chapter of the Matlab help should have helped you as it features a tutorial with code snippets. Also, don't hesitate to ask any questions, at least I'll be doing something productive while on reddit ;). 
it's not any of [these?](http://www.mathworks.com/help/techdoc/creating_plots/f9-53405.html#bqui8wp)
Do you mean a [spectogram](http://www.mathworks.com/help/toolbox/signal/spectrogram.html)?
ah a spectogram! doh. looking for one in 3d. To better illustrate the drop offs.
Specifically I have four real absolute FFTs taken over a range of time t. I wish to stack them in 3D so that the drop of in the peak of the absolute FFT is easy to see, over a long time T . 
I'm assuming you have access to the Signal Processing toolbox. If so you can use the spectrogram function (example taken from MATLAB help on spectrogram with view adjustment): &gt;t=0:0.001:2; &gt;x=chirp(t,0,1,150); &gt;F = 0:.1:100; &gt;[y,f,t,p] = spectrogram(x,256,250,F,1E3,'yaxis'); &gt;surf(t,f,10*log10(abs(p)),'EdgeColor','none'); &gt;axis xy; axis tight; colormap(jet); view(0,90); &gt;xlabel('Time'); &gt;ylabel('Frequency (Hz)'); **view(-20, 50);**
OK the solution im going to go for is the spectrogram, with a custom window and overlap. 
I have no idea what homophonic substitution is, but I'm guessing you're substituting an integer for each letter, with a one-to many mapping and the index is cycled. What you could do is have a string vector with the whole alphabet alphabet = 'abc...'; Then for any input, you can look up an intermediary index charInd = findstr(inputChar,alphabet); which you will use to index your cipher table. I think I'm right in assuming that the symbol table (28x10) holds the symbols that are cycled in each row. Let's say we declare our output vector cipher = zeros(1,length(inputVector); I'll be using temporary variables for the sake of readability, it's easy to rewrite the code to get rid of them. for i = 1:length(inputVector) inputChar = inputVector(i); charInd = findstr(inputChar,alphabet); tempRow = symbolTable(charInd,:); cipher(i) = tempRow(1); cycledTempRow = circshift(tempRow,1) %I hope this is correct syntax, check "doc circshift" to confirm symbolTable(charInd,:) = cycledTempRow; end I'm sure there is a more efficient vector-based way of doing this, but this is what I have off the top of my head. For the deciphering, you just need to find what row your symbol is in, and use this row index as an index for the "alphabet" vector, and get your letter. Cycling should not be necessary as far as I gather. 
Hmm I don't know anything about your table. When it says cycle does it mean for every subsequent iteration of a character or just those in direct succession to each other? I'll just assume it's the first case: BTW I'm really sleepy atm so I might be able to think of something better later ca=strread('text','%c'); %This converts your text into a character array for i=1:length(ca) na=ca(i)-96; end%This converts your character array into a numerical array g=length(na)%For later removal of extra cells created by something I'm too tired to troubleshoot but it looks like its' inconsequential anyway for i=1:28 B=find(na==i); na(B,2)=1:length(B); B=[]; end na(g:length(na(:,1),:)=[]; %This leaves you with array NA with the first column composed of the letter's number of the alphabet and the second column composed of the numbered time the letter has appeared (first time =1, second time=2, and so on) which you can then match to your table. 
Am i the only one who was trying to figure out why you had to write a homophobic_ cipher(message)?
Ah, I see. I'm familiar with Information Theory, and coding, just never used homophonic substitution, so the context was a bit lost for me. Thanks for the corrections.
What's the table?
Is there a p-code version of the file? In other words, if your function is in foo.m, is there a foo.p file? Type "help pcode" for more info.
Try 'which fun' where 'fun' is the name of the function in question. This will output the path in which 'fun' resides. Check to be sure it's the correct version.
This should work...
Use could use this command to set the axis limits on the plot axis([xmin xmax ymin ymax]) 
That seems to do exactly what I need! Thank you and much love. :)
since you have image processing toolbox, why don't you look at imscrollpanel. f = figure; h = imshow('myimage.jpg'); sp = imscrollpanel(f,h); ... then you can get a simple API for controlling it like this: api = iptgetapi(sp); ... which has methods like this: api.setMagnificationAndCenter(5,100,100) The scrollpanel has nice scrollbars and simple programmatic control for positioning the viewport. Check out the doc for imscrollpanel for more info or you can ask here! good luck!
maybe there is a MATLAB product function which has the same name as your function (and is on the path at a high precedence level). do this: which functionname -all do see all functions of that name on the path.
homopho*n*ic cipher
thanks for your help :)
What error is it giving you?
sorry forgot to add that. ??? Input argument "z" is undefined. Error in ==&gt; hode at 5 zprime=[z(2); z(3); z(4); 3/5*z(4)+133/100*z(3)+231/500*z(2)+2929/10000*z(1);F(z(1), z(2), z(3), z(4),t)]; that's my error
Error message tells you that second input argument 'z' is not defined. Basically this means that you have made function call with lesser than two input arguments. Are you calling your function 'hode' like a scrip? Maybe you made the call using: z = [1 2 3 4]; t = 0; zprime=hode; When you should have used: z = [1 2 3 4]; t = 0; zprime=hode(t,z); Also: 1) you code will produce additional errors as it is missing multiplication symbols '*'. For example: 3/5z(4)+133/100z(3) should be 3/5*z(4)+133/100*z(3) 2) Have you defined function 'F' in F(z(1), z(2), z(3), z(4),t)];? 3) Do you need to have updated variables 't' and 'z'? Currently line [t,z]=ode45('hode',tspan,z0); does nothing as you don't take its outputs out of the function. Maybe it should be: [t,zprime]=ode45('hode',tspan,z0); or maybe function declaration should be: function [zprime t z]=hode(t,z) 4) It looks like you have another missing variable: 'tspan'. Maybe you intended it as an input argument: function [zprime t z]=hode(t,z,tspan) I don't usually need to solve differential equations so I cannot give more specific answer.
It looks like you are trying to invoke the solver inside the function that defines your differential equation. *Also try [t,z]=ode45(@hode,tspan,z0);
your question is ill-defined. Do you mean that you are generating pulse parameters in Matlab and then trying to send them to hardware to generate the waveform? Which equipment? any code to show?
I have had this problem before. I discovered it when I was plotting pictures with functions that no longer had "plot." My PI says that he had seen this bug years ago. 
I have had greater success with batch than with parfor.
So you have a discrete-time input that you want to put through a continuous-time channel, right? Are you going to apply noise? Do you need a higher sample time on the output than the input data rate? You could either do the whole thing as a discrete system with a faster sample time than the data rate, or you could simulate a continuous system with your discrete input using the 'lsim' function. This project also sounds like Simulink might be an appropriate tool.
It means the left hand side of your assignment doesn't have the same number of elements as the right hand side...I dunno what fall is or what f becomes, but there you go. It looks like x(i+1) is a 1x1 and the other side is a vector, which is wrong since x(1) is a 1x1. EDIT: Never mind, you stated what fall was. Give me a second. EDIT2: OK,. so n*f(t(i),x(i)) is definitely not 1x1. So you can't assign it to x(i+1). EDIT3: Lastly, I don't get what you're trying to do with this line: t = [-0.5:n:1];
The error means you are trying to assign values into a variable that does not have room for them. A simple demonstration. x = 1; x(1) = [1 1]; --&gt; Same error. Looking at your code x(i+1) = x(i)+n*f(t(i),x(i)) x(i+1) : single entry of an array x(i) : another single entry of an array n: n = [0.5,0.1,0.05,0.01]; This is a vector. Here is your problem. f() : assuming it returns a 1x1 vector So you are multiplying a vector n by a scalar, which will return a vector the same length as n, then you are adding a scalar x(i), and trying to assign the results into a single spot in an array. 
Thanks for your answer, the t = [-0.5:n:1]; is the "area"(not sure what the proper english word is) that the function is calculated over. With the n being the number of iterations.
You end up getting t= [-.5, 0 , 0.5, 1] because the first element of n is 0.5...
If I read your request correctly, I think you need a zero order hold resampling/interpolation. The interp1 command does not offer this. It only has nearest, linear, spline, and cubic. A little search in the doc pointed me to the timeseries objects for a ZOH option. Here's what I have: x = (1:10)'; y = 2*(rand(10,1)&gt;0.5)-1; % random sequence to test with stem(x,y) % create a timeseries from x and y y = timeseries(y, x, 'name', 'y'); % finer-sampled x x2 = (1:0.1:11)'; % resample using zero order hold y2 = resample(y, x2, 'zoh'); stem(y2.Time, y2.Data)
Thanks for this. I had no idea these existed!
Hey, Thank you so much for helping me out. It seems like this is the direction i want to go. What i'm doing is basically simulating a communication system using the random data. I want to try to do it using symbolic objects, so I figured I would have to convert an array to a symbolic continuous time object. Am I completely off?
What should the volume of the reactor be? I am assuming a multiple of 5 as you are creating a vector of zeros the very next line with V/5, and zeros() needs integer inputs... I used V=10 (you hard coded ii=2, and in order for it T to have an index of 2, V has to be 10). Your problem is with this line: T = -(Ftot*(T(ii,jj)-T(ii-1,jj)))/Rho*((dt+t)/(dV+Vv))+(Hr*ra*(dt+t))/(Rho*Cp)+T(ii,jj); Specifically, you are referencing a vector T(ii,jj) in the k=A*exp... line, and then resetting T to a single value later on, so the next time it iterates it deletes the previous value of T. EDIT: You should use an external source tool to copy your code to. I recommend pastebin.com as it has Matlab syntax highlighting. We can then reference line numbers for bug errors.
You are overdoing things by keeping track of ii and jj outside of the bounds of the for loops themselves. I would suggest these modifications: for ii = 1:V/5 for jj = 1:1/300:301 Then use those guys to reference your other vectors. To fix the issue with the for loops, I would suggest creating new variables outside of the loops, example Tout=zeros(V/5,301); Then in the loop, do this: Tout(ii,jj) = ........ (big long thing you have that you have originally set to "T"). This way you are putting variables in a new vector instead of actually modifying the original one.
I don't understand this sentence (i'm french) I used V=10 (you hard coded ii=2, and in order for it T to have an index of 2, V has to be 10). explain further please what may i do so it doesn't reset T each time and build an array so i may use it to display graphs later on ?
&gt; I used V=10 (you hard coded ii=2, and in order for it T to have an index of 2, V has to be 10). I was merely commenting on the fact you have ii=2; &gt;what may i do so it doesn't reset T each time and build an array so i may use it to display graphs later on ? I would suggest creating new variables outside of the loops. example: Tout=zeros(V/5,301); Then in the loop, do this: Tout(ii,jj) = -(Ftot*(T(ii,jj)-T(ii-1,jj)))/Rho*((dt+t)/(dV+Vv))+(Hr*ra*(dt+t))/(Rho*Cp)+T(ii,jj); 
I am going to bed right now, will try it tomorrow morning. thanks a lot! i will keep track of it with you. have a great night. just out of curiosity, what do you do for living ? i am currently in my first semester of chemical engineering.. can't wait to be as good as you are on matlab, working on it.. Here is the script i made for the last homework, we had to ask the user what temperature they would like to drink their coffe, evaluate the temperature of a cafe thermo by the time and then draw a graph... [this is it](http://pastebin.com/aWBA7gZz) i had 85% for this work and 70% at my last exam, not to bad.. anyway I guess this way more information than you want aha good night, thanks again 
try cntrl+C to break
Breaking the code doesn't fix it, I'm looking for a fix.
I can't see an obvious reason for this. What I would do is go to debug mode, enter into ode45, and see what's going on.
Everything still works. It just takes a long time. Change the line to ode45(f,0:0.01,1); (I decreased the Tfinal to 0.01 to make it more obvious) i.e. remove [t,ya] = and see your plot in real time. I don't know why you want to solve till t=11 when you converge to your solution at t=1ns but whatever. If you really want to solve till t=11, you should use a variable step size that increases as t increases, and even then it will be very slow but much faster than what you are doing now.
You should give an example code which reproduces the problem. What kind of plot (plot, plot3, image, imagesc, surf, quiver, ...)? Why do you need to zoom in/out? Why can't you increase the line width (plot(x,y,'linewidth',6))? Which os (linux, win, mac) and what is the MATLAB version? Are you using default renderer (get(gcf,'renderer'))? Could you use another renderer (set(gcf,'renderer','opengl')? Are you using print (print('-dpng','-r300','test.png'))?
Sorry, I posted this in a rush trying to fix this. I'm using image. I can't increase the width of these lines because it's to scale. I don't need to zoom in and out, but doing so reveals that the lines are indeed there. And zoomed out to normal, parts of them show, other parts dont. All of these lines are 1px wide. This isn't an OS or version issue, I've asked fellow students who have all experienced problems similar to this. As for using another renderer, I have no idea. I'm just trying to use matlab to model. And no, im not using print.
It would be more helpful if you could give some more details. It sounds like you are trying to plot a bitmap using 'image'. Your best bet might be to set the figure and axis units to pixels, and then make the axis exactly the width and height of the bitmap. That way you will display on point for every pixel. use the following commands: set(gca,'Units','Pixels') set(gcf,'Units','Pixels') Then, if your bitmap n rows by m columns, set the size of the axis using set(gca,'Position',[20 20 m n]) You can change the 20's to something else to move the axis around in the figure. You may have to change the size of the figure. This will make it 10% larger than the bitmap: set(gcf,'Position',[200 200 m*1.1 n*1.1]) Then I would suggest saving it as a .tiff or .bmp or similar and resizing it in a program that deals with image resizing better than matlab (like photoshop).
I'm using the image() command to plot a jpg that's 1000x1000 px. The majority of it is showing up fine, just certain segments of it have gone missing, but if you look close to the screen they appear to be smudged.
Well first of all, using JPEG with high contrast images like the one you're trying to use is a terrible idea. Second...well, I'm not sure what else, but I don't think JPEG is really what you should be using here. Can you just show us what you're trying to do? Like put the image up somewhere? Or a similar image with exhibits the same problem?
In short: your problem is data visualization, not the actual data / computations. It sound like you have problem with [aliasing](http://en.wikipedia.org/wiki/Aliasing), this is present in MATLABs images as MATLAB does not use antialiasing when displaying images. This is good or bad, depending on your problem, but I like it as this way all displayed images are shown without any modifications/filtering, you just have to get used to it. There is few solutions: * As ManOverBeard suggested, displaying images with with one-to-one pixel mapping will get rid of this problem. Unfortunately this is easier said than done. You can try using this command, but it is suboptimal: set(gcf,'units','normal','position',[0 0 1 1]) * Use antialising function from [here](http://www.mathworks.com/matlabcentral/fileexchange/20979) * You can do the antialising by applying low pass filter: imagesc(conv2(gausswin(5),gausswin(5)',single(img))) * Make your image smaller and use antialiasing when doing it. MATLABs imresize (image processing toolbox) does this when you are not using nearest neighbor interpolation: imagesc(imresize(img,0.99,'bicubic'))
Hi, thanks for the help. I've changed my image to a bitmap, as m1ss1onetomars24k suggested jpg is horrible, the same effect was observed. I tried doing using: set(gca,'Units','Pixels') set(gcf,'Units','Pixels') set(gca,'Position',[20 20 1000 1000]) All that really seemed to do was crop my image, which did indeed make the lines visible but also lost the edges that are important. Here's imgur links: what it should look like (zoomed in on intersection): http://imgur.com/uzGwm what matlab gives me zoomed out: http://imgur.com/CfrHU note: the lines in the zoomed out, more actually are there, I guess paint can't save them as well... I'm not really an image expert, I sort of assumed there would be less degradation of the image happening. 
links above. I changed to a .bmp no change noticed :(
One more thing you could try: image(imfilter(img,gausswin(5)*gausswin(5)'/(sum(sum(gausswin(5)*gausswin(5)'))),'circular','same')) where img is your image which you would normally plot using image(img) This will make the image little bit blurry, but should help with our problem. Remember that image() is low level plotting command, and you should usually use imshow, imagesc or direct bitmap changing: img_blur = imfilter(img,gausswin(5)*gausswin(5)'/(sum(sum(gausswin(5)*gausswin(5)'))),'circular','same'); imshow(img_blur) %or imagesc(img_blur) %or h = imshow(img_blur) %first frame set(h,'cdata',img_blur) %all of the rest
Thank's so much, this solved the issue perfectly. I'd have never figured this out, I'm not an image guy:)
Padding with zeros is what people normally are doing if they are using vectorized operations (conv2(kern,img)) but if you are doing things in a loop (img(upleft(1):lowright(1),upleft(2):lowright(2)).*kernel) you can quite easily check upper and lower bounds. You can use function 'padarray' to create padded array which can either use zeros as padding, or it can mirror values from you signal. Many signal processing functions have options to return values in different sizes ('same','valid','full') which will make things easier when using array padding. If you really want, you can create your own class and then add 'subsref' and 'subsasgn' as a class methods, now if you create variable as your own class and then index it using 'myvariable(-1)' you can return which ever value you want. Only downside is that this will be slow in loops and that you class might not work with built in functions (you can try to circumvent this but it will create bloat). Recommended option is using array padding.
This is pretty simple with exception handling: function x=testOutOfBounds(A,i) % takes array A, and index i % returns A(i) if in bounds, else 0 try % code that might cause an error goes in here x = A(i); catch except % if something between 'try' and 'catch' failed, this code gets executed x=0; end Not sure if this has efficiency issues. One drawback is that this returns 0 on *any* error, not just indexing out of bounds errors, (e.g. `testOutOfBounds([1 2 3 4], 2.23)` and `testOutOfBounds('tacos','areyummy')`). You might be able to prevent this by handling the exception returned.
Can I see the code? From the way you're describing the problem, it sounds like something is not right... try/catch statements work, except it may be a bit of a hack. 
Use padarray (or other padding method) or else just be careful. It's not that hard to avoid index out of bound exceptions.
What I want to be able to do is have some code like this: signal = 1:20 %magic boundary resolution code signal(1) 1 signal(20) 20 signal(-5) 0 signal(25) 0 The last two line would normally give an out of bounds error. Now, I would also like not to cover my code in try-catch blocks, especially since the array calls are going to be part of larger expressions. I have tried doing it with a function and faking it, like so: function answer = signal_1(vargin) global S_1 if size(vargin, 2) == 0, answer = S_1, return, end index = vargin{1} if index &lt; 1 || index &gt; size(S_1, 2), answer = 0, return, end answer = S_1(index); end Where S_1 is the "raw" signal array, defined in the main code. But the problem with this is that, as I just realized when I tried it, it doesn't know how to handle ranges, like signal(1:1000).
Try surf(X,Y,Z,C) where C is the same size as X, Y, and Z and contains values for power at a certain frequency. You'll need a few of these plots if you're interested in multiple frequencies. Or make C the frequency at which the power is greatest? Is this what you were looking for?
Geophysicist here. Basically, you have a 2D image. You have a coordinate pair (x,y) and some function z = f(x,y) which is the topography. Basically you can think of the topography as an "intensity" function, or "height" function, which you could draw as a 2D contour map with no loss of information. For example, you can make some simple topography and plot it with this command: z = peaks(64); figure; imagesc(z); figure; contourf(z,32); figure; surf(z); A true 3D function would have a 3D coordinate (x,y,z), and then an associate value of the function, i.e. z = f(x,y,z). For example, temperature could be considered a 3D function, as every point in space has a different temperature. That being said, you can now restrict yourself to 2D Fourier Transforms using fft2, then you could determine the strongest harmonics, and then using that harmonic, create a function and plot the harmonic wave. To plot the harmonic, for example, you could do this: [x,y]=meshgrid(0:0.1:2 * pi,0:0.1:2 * pi); z=sin(x); surf(x,y,z) This creates a simple sinusoid. Keep in mind that the input for fft2 would just be a 2D image of the topography, without the x and y coordinates. The x,y coordinates will be used to determine what the particular frequencies are.
Carrying on a bit. We can take our synthetic topography and do the fft2 of it: z = peaks(64); f = fft2(z); figure; surf(abs(fftshift(f))); title('topography in the frequency domain'); and we can see that all the energy is clustered around the low frequencies near zero. Now, notice that fftshift has to be used to unwrap the fft, this is the norm for every fft in matlab (1D or 2D fft). Also notice tht the x and y coordinates are not input to the 2D FFT. The X and Y coordinates, or, more importantly the difference between coordinates and how many positions there are is used to determine the frequency for each point in the above surface plot. I can't remember the exact formula at the moment unfortunately.
THANK YOU. that works.
I'm not trying to beat a dead horse here or sound like an ass, but the best solution is to avoid indexing out of bounds. You should back up and figure out why you *have* to do this &amp; change your approach. This is only putting a band-aid on a problem in your code that is just going to give you headaches the more you work with it. that said, how about this... function result = safeIndex(array,indices,error_val) % create array of "error val" that matches size of indices result = repmat(error_val,size(indices)); % find all valid indices valid_indices = (indices &gt; 0) &amp; indices &lt;= numel(array); % get valid data for valid indices (all others default to error_val) result(valid_indices) = array(indices(valid_indices)); you use it like this: a = rand(1,3) a = 0.7431 0.3922 0.6555 ind = -2:5 ind = -2 -1 0 1 2 3 4 5 safeIndex(a,b,0) ans = 0 0 0 0.7431 0.3922 0.6555 0 0 0 0 hope this helps bro, good luck.
Sounds like a header for interfacing with fortran code. Do you have a fortran compiler installed? 
Yes, I should be able to add #include &lt;fort.h&gt; and #include &lt;mex.h&gt;. I was able to download Octave (I use it instead of Matlab) and mex.h works but not fort.h, where can I download it? I got the Octave headers fro synaptic in Ubuntu.
That actually looks like what I was looking for; thanks! But I have a couple of questions. Shouldn't the call be safeIndex(a, ind, 0)? And why are there 4 zeros at the end; it looks to me like there should only be 2.
ah yes. you're correct on both counts. I guess I pasted the wrong bits of output from my command window when I was composing this reply. anyway, the function does work as expected. glad to help! cheers.
I recently had to learn S functions and found [this](http://www.chem.mtu.edu/~tbco/cm416/MatlabTutorialPart5.pdf) tutorial the most helpful. I can send you some example files if you'd like.
I think the pic speaks for itself.
Nerds need love too!
you are trying to access some sensor? Have you installed all of the sensor software on both computers? the COM object that MATLAB is missing presumably came with the sensor you are trying to interface with? I'm not sure if it's just a single file or what or where to find it sorry :-/
I think I may have found it through digging into the registry. Thanks, though!
You may have to break it up into overlapping tiles.
I started to do this but still got errors from griddata() if not enough of the output grid of the subimage was covered by the reduced input grid. For instance, if only a 200x300 portion of the input grid covered the 1000x1000 output grid. I can account for this with more code to further subset the output grid in this case, but have to think that I will the 10,000th person to write code to do this and would like to just use something already existing. Why the mathworks does not provide a solution is beyond me.
Yeah, I've probably written it myself 3 or 4 times in different situations.
What's the problem you're hitting? Are you getting Out of Memory exceptions? What format are your images? TIFF? JPEG2000? Can you say more about exactly how you want to resample the images? The Image Processing Toolbox (which I'm assuming you have since you mention IMTRANSFORM) has 2 block processing functions: * BLKPROC (an older function for in-memory calculations) * BLOCKPROC (an updated version that can do everything BLKPROC can do but it can also operate directly on files one-tile-at-a-time without loading the whole image into memory, for certain format images) If you are working on TIFF or JPEG2000, then BLOCKPROC can process arbitrarily large images, assuming you can write a suitable function that will re-sample your image one "block" at a time. If you are not using TIFF or JPEG2000 images, you can also write an "ImageAdapter" class that can enable BLOCKPROC to work with whatever file format you have (assuming you can read it in "chunks" at a time). 
 K&gt;&gt; img = griddata( MM, NN, img, MMtheta, NNtheta, 'linear' ); ??? Error using ==&gt; qhullmx qhull warning: more than 16777215 ridges. ID field overflows and two ridges may have the same identifier. Otherwise output ok. qhull input error: more than 16777215 vertices. ID field overflows and two vertices may have the same identifier. Vertices not sorted correctly. While executing: | qhull d Qt Qbb Qc Options selected for Qhull 2003.1 2003/12/30: delaunay Qtriangulate Qbbound-last Qcoplanar-keep _pre-merge _zero-centrum Pgood Qinterior-keep _max-width 1e+03 Error-roundoff 1.4e-12 _one-merge 9.7e-12 Visible-distance 2.8e-12 U-coplanar-distance 2.8e-12 Width-outside 5.6e-12 _wide-facet 1.7e-11 Last point added to hull was p4822146. Last merge was #22105657. At error exit: Error in ==&gt; delaunayn at 117 t = qhullmx(x', 'd ', opt); Error in ==&gt; griddata&gt;linear at 151 tri = delaunayn([x y]); Error in ==&gt; griddata at 120 zi = linear(x,y,z,xi,yi,opt); 
The exact error is in the reply below. The format of my images is just 2-D arrays of complex floating-point numbers. The resampling grid for *this* problem is a polar-to-cartesian operation, but that is the most basic form. I also need to allow for arbitrary orientation of the output cartesian grid. The dimensions on the grids given to griddata() in the error below are 5002x5002 for the input and 7073x7073 for the output.
How about you solve [this problem](http://www.reddit.com/r/matlab/comments/enpgp/an_alternative_to_griddata/)? I know I'd appreciate it and it'd be great practice for you.
I'm looking for something a little more simple, here's the last project we had for the class to give you an idea of how basic my knowledge is. http://www2.msstate.edu/~hl107/pdfs/na1_f10/project2.pdf
Sorry, but it's been a while since I've solved problems for the sake of solving problems. I have no suggestions for you. Good luck to you though.
I'm not sure if this is what you need but I do have [this](http://www.amazon.com/MATLAB-Introduction-Applications-Amos-Gilat/dp/0471694207/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1292830523&amp;sr=1-1) book lying around if it interests you. 
[From Georgia Tech's MATLAB course](http://www.cc.gatech.edu/classes/AY2004/cs1371_fall/) Homework problems and practice exams have plenty of good examples to work through. Most are relatively simple, but is good for learning the basics.
[Cornell's Matlab Course is pretty useful](http://www.cs.cornell.edu/Courses/cs100M/2008sp/) In particular, see the lecture, exercise and project tabs. 
That's exactly what I'm looking for!
Thanks!
Take care of shipping and its all yours.
I see. yea, maybe the IPT block processing routines won't work for you right out of the box. It looks like you are using an older version of MATLAB. Those geometric functions no longer use the Qhull library. In R2009b, they were updated to use the CGAL library, which is supposedly more efficient. Not sure if it's possible, but if you can get on the latest release your existing code might just "start working". Also the ref page for GRIDDATA now suggests you use a new class: "TriScatteredInterp is the recommended alternative to griddata as it is generally more efficient." [I found this video that talks about the "new" geometric classes in a soothing Irish (?) lilt](http://www.mathworks.com/products/demos/shipping/matlab/New-MATLAB-Mathematics-Features-in-R2009a.html). TriScatteredInterp is discussed near the end. hope this helps.
Thanks for this. I will give this a try and report back so that it may help someone else in the future who is having the same problem. I am currently using R2009a, so maybe that's the problem. Either way, TriScatteredInterp may just be a better way to go about it.
Here's a problem I used to give to my MATLAB seminar: Write a function that find all local minima and maxima of a vector. It's nice because when using vectorization, the solution is really short, otherwise you have to do for loops and case checking which is long and tedious. The other problems I gave were all EE-centric, although if you want a small challenge, try to write a function that performs convolution without using for loops or fft.
Fuck, CS1371, I remember that class. XD
Sounds like you should be using wavelets and not FFT. FFT doesn't tell you when in a signal a given frequency component has occurred, wavelets do. Spectogram is what is called a STFT (short time fourier transform) and attempts to make up for this "short coming" in FFT analysis but you still need to pick windows for the FFT to happen over. I strongly suggest you look into wavelet in MATLAB &gt;&gt;wavemenu 
Use a structure? matrix = struct{[]}; matrix{1,1} = 1; matrix{1,2} = 'string'; etc,etc... In general, structures are a nice tool for keeping many different types of data together. Explore them in the documentation, and I'm sure you'll find what you need. 
Why don't you want to have numeric values -- what exactly do you need to do with the matrix? Obviously MATLAB is primarily a numerical environment, so perhaps you need some symbolic computing (MATLAB does have some ok symbolic stuff)?
If it's important that your variable "behave" like a normal matrix, but just do something different when you index into it you could try writing a class in MATLAB and overload the SUBSREF function. That allows you to do whatever you want when you index into an object of your class. You can return normal stored scalars (like a regular matrix would), run some code to generate some value, whatever. Then you object could behave similar to a normal matlab matrix, but could do any sort of dynamic "on the fly" data generation you needed. to. matlab classes: http://www.mathworks.com/help/techdoc/ref/brk7uzk.html overloading subsref: http://www.mathworks.com/help/techdoc/ref/subsref.html
Did someone say MAAAAAAAAAAAAATLAAAAAAAAAAAB? [EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE](http://matlabforever.ytmnd.com/)
Did someone say MAAAAAAAAAAAAATLAAAAAAAAAAAB? [EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE](http://matlabforever.ytmnd.com/)
Did someone say MAAAAAAAAAAAAATLAAAAAAAAAAAB? [EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE](http://matlabforever.ytmnd.com/)
Did someone say MAAAAAAAAAAAAATLAAAAAAAAAAAB? [EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE](http://matlabforever.ytmnd.com/)
Did someone say MAAAAAAAAAAAAATLAAAAAAAAAAAB? [EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE](http://matlabforever.ytmnd.com/)
Did someone say MAAAAAAAAAAAAATLAAAAAAAAAAAB? [EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE](http://matlabforever.ytmnd.com/)
What the hell did I just watch?
Sounds like the Discrete FIR filter block might be what you want. I don't use simulink, so I'm not too clear about what you want to do.
If you have Image Processing toolbox and I understood your question, you can probably use this code. I usually use other functions, so there might be some inconsistencies in this example: %Lets generate our data img1 = single(imread('cameraman.tif')); img2 = single(imread('pout.tif')); %Image corners coordsStraigth = [0 0 1 1; 0 1 1 0; 1 1 1 1]; %Some nifty transformation for images ang = -15/180*pi; T1 = [cos(ang) -sin(ang) 0.3;sin(ang) cos(ang) +0.6; 0 0 1]; ang = 7/180*pi; T2 = [cos(ang) -sin(ang) -0.15;sin(ang) cos(ang) 0.3; 0 0 1]; %Apply transformation to corners latlon1 = T1*coordsStraigth; latlon2 = T2*coordsStraigth; latlon1 = latlon1(1:2,:)'; latlon2 = latlon2(1:2,:)'; %You whould start here with your real data %Plot image corners figure(1) plot(latlon1(:,1),latlon1(:,2),'r.') hold on plot(latlon2(:,1),latlon2(:,2),'g.') hold off set(gca,'ydir','reverse') %Calculate transformation from image 2 to image 1 (image 1 should be 'straight') T = cp2tform(latlon2,latlon1,'projective'); %Image transform %Calculate where image 2 coordinates are transformed [img2TcoordsX img2TcoordsY] = tformfwd(T,coordsStraigth(1,:),coordsStraigth(2,:)); %Calculate new image boarders (image 1 has [0 0;0 1;...] corners) xmin = min([min(img2TcoordsX) 0]); xmax = max([max(img2TcoordsX) 1]); ymin = min([min(img2TcoordsY) 0]); ymax = max([max(img2TcoordsY) 1]); %Aspect ration and size of output image aspectratio = (xmax-xmin)/(ymax-ymin); outsize = [1024 round(1024/aspectratio)]; %Transform image 2 %Note that aspect ratio should be calculated before actual transformation ('Size') img2trans = imtransform(img2,T,'udata',[0 1],'vdata',[0 1],'xdata',[xmin xmax],'ydata',[ymin ymax],'FillValues',NaN,'Size',outsize); %We want to have image 1 in same size image. Make transformation which has %eye(3) transformation matrix coordsStraigth = [0 0 1 1; 0 1 1 0]'; Tnull = cp2tform(coordsStraigth,coordsStraigth,'projective'); img1trans = imtransform(img1,Tnull,'udata',[0 1],'vdata',[0 1],'xdata',[xmin xmax],'ydata',[ymin ymax],'FillValues',NaN,'Size',outsize); %Plot separated images figure(2) subplot(1,2,1) imagesc(img2trans) subplot(1,2,2) imagesc(img1trans) %Now combine images. One way is to just replace NaNs with image data imgcomb = img1trans; imgcomb(isnan(imgcomb)) = img2trans(isnan(imgcomb)); figure(3) imagesc(imgcomb) 
Agree this is a pain. I wrote an immerge awhile back. I posted it here: http://pastebin.com/zyfRdAt6 This function takes two images and associated colormaps to produce a final rgb image that you can use with the image command. If you have the image processing tool box, I'm pretty sure there is a function that takes an rgb image and produces a matrix/colormap and who should be able to rinse and repeat. Who knows, maybe this will help. Good luck.
You can use griddata() to resample data that are on arbitrary grids. However, gridata() is very inefficient and may not work if your images are too large. (See my recent problem also with possible solution [here](http://www.reddit.com/r/matlab/comments/enpgp/an_alternative_to_griddata/).) The code in the comment below seems unnecessarily complicated. I dont have matlab on this machine, so I am not sure but I thought the functions in the image processing toolbox required/assumed Cartesian grids, which lat/lon is not. I could be wrong, so I would not take my word on that. Anyways, with griddata() the code should be as simple as something like: Y_on_same_grid_as_X = griddata( latY, lonY, Y, latX, lonX ); 
Thanks Ill try this out and get back to you in the morning.
Thanks for the suggestion. Its appears that the buffer block in the signal processing toolkit does exactly what i need. The buffer block outputs a buffers length worth of samples in a frame when it becomes full.
Mostly I suggested it if all you want to do is sum the last 5 samples, or sum a scaled version of the last 5 samples, all you need to do that is an FIR filter.
I understand that you can put shapes into a plot with annotate, but I imagine there is an easier way. Right now I do something like: plot(x,y) %y has multiple rows, which equate to lines in the graph xlabel('x axis'); ylabel('y axis'); But the lines are hard to distinguish, especially when they overlap.
The command looks like: plot(x,y,'-+') for a plus sign over the data points and plot(x,y,'-o') for circles. If you get rid of the dash (i.e. plot(x,y,'+')), it plots just the data points without connecting them. [This Matlab page](http://www.mathworks.com/help/techdoc/ref/line_props.html) lists all of the different styles under the 'Marker' heading. Hope this helps! Also, do you know how to color the lines? plot(x,y,-+r') would plot a red line with crosses on the data points. [This page](http://www.mathworks.com/help/techdoc/ref/colorspec.html) shows the different colors you can use.
Hey, exactly what I was looking forward. Thanks for the help. Much appreciated.
Don't hear this as RTFM... I really want to help. This info is readily available within Matlab. Just type 'help plot'.
This. Knowing how to use the 'help x' command will make your matlab journey much easier.
yea the colormap is a property on the figure, not the image. It can be a pain to try to work with 2 colormaps. Since you have the image processing toolbox I would just convert them into RGB using ind2rgb (usually used to convert indexed images into RGB, but in your case you can treat your intensity images as indexed, each with their own colormap): close all hidden data = imread('pout.tif'); im1 = ind2rgb(data,hot(256)); im2 = ind2rgb(data,cool(256)); h1 = imshow(im1); hold on h2 = imshow(im2); index = find(data &lt; 90); alphadata = zeros(size(data)); alphadata(index) = 1; set(h2,'AlphaData',alphadata,'AlphaDataMapping','none'); hope this helps, cheers.
Hi PWN0SAURUS_R3X, Do you just want to display them overlayed on top of each other or are you trying to form a final image which is a composite of the first two. If you are just trying to display them, there's not a simple function out of the box, but it's not too hard if both images are oriented in the same direction (ie, north is up). I write a quick little example that takes 2 images and displays them in the same axes. For each image I define the X and Y "spans" of the image data (I just made up some numbers). Since you have the Lat/Lon you should be able to do something similar. % X coord: 1 -&gt; 256 % Y coord: 1 -&gt; 256 (Positive Y is "down") im1 = imread('cameraman.tif'); % X coord: 200 -&gt; 800 % Y coord: 200 -&gt; 800 (Positive Y is "down") im2 = imread('pout.tif'); close all hidden f = figure; % make sure axes is large enough to hold both images a = axes('parent',f,'Xlim',[-100 900],'Ylim',[-100 900],'YDir','Reverse'); hold on h1 = image([1 256],[1 256],im1,'Parent',a,'CDataMapping','scaled'); h2 = image([200 800],[200 800],im2,'Parent',a,'CDataMapping','scaled'); The next steps would be to investigate the AlphaData property of the images to blend them nicely. check out the help for the image function for details on these syntaxes. hope this helps, cheers.
In retrospect I really should of done this and should have known better. I think I just felt like turning to someone and asking a question that I knew someone would know off the top of their head. Indeed, part of what I love about matlab is the documentation. 
[Loren on the Art of MATLAB](http://blogs.mathworks.com/loren/2007/12/11/making-pretty-graphs/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+mathworks/loren+(Loren+on+the+Art+of+MATLAB)) has a really nice tutorial on generating professional plots in MATLAB.
Additionally you can access the help by typing in a command and hitting F1 while the caret is inside/touching the command.
Why is this MATLAB being evil...?
It's just a piece of code that you paste in MATLAB and think "hehe that's a pentagram" and then move on with your life. Sorry if you had different expectations. 
The only thing I use them for is to refactor code and make things more easy to understand...other than that, I'm really not sure.
The point of a static method in MATLAB is exactly the same as a static method in Java. That is, it is a method bound to the class and not to an instance. So if you have a class called "Foo" with a static method called "do_it", you can call "Foo.do_it", perhaps with some parameters. In Java, all functions must be methods of some class, so static methods have an obvious use there. In MATLAB, you can define global or package functions, so there's not as much need. Still, you might find it to be useful to keep certain static methods. Factory methods are a good example - static methods of a class that produce an instance of the class in some fashion that is more flexible than what the language allows for constructors. This could include loading an object from disk, retrieving it from a cache, generating an instance of a subclass, etc. The best place for a function that does such things is usually on the class itself. 
I don't think you need to instantiate an object to use a static method. You can call it directly. For example. if you have class HELLO with static method World, you could execute HELLO.World(). If World is not static, then you would have to create a HELLO object, let's call it H, then execute World from that instance, H.World(). 
yea. the use cases for static methods in MATLAB are the same as those in Java. Methods associated with the class but not with any particular instance of the class.
You first obtain the mesh equations by summing the voltages around each mesh clockwise. For your problem, this yields: I1 = 2mA (I2-I1)1kΩ + I2(2kΩ) + 12V + (I2-I4)(2kΩ) = 0 -6V + (I3-I1)(2kΩ) + (I3-I4)(1kΩ) = 0 (I4-I3)(1kΩ) + (I4-I2)(2kΩ) + (I4-I5)(1kΩ) = 0 (-12V) + I5*1kΩ + (I5-I4)(1kΩ) = 0 With these equations, you can now set up a system of 4 equations with 4 unknowns. (I2-2mA)1kΩ + I2(2kΩ) + (I2-I4)(2kΩ) = - 12V (I3-2mA)(2kΩ) + (I3-I4)(1kΩ) = 6V (I4-I3)(1kΩ) + (I4-I2)(2kΩ) + (I4-I5)(1kΩ) = 0 I5*1kΩ + (I5-I4)(1kΩ) = 12V This system can be solved by putting the coefficients of your unknowns into matrix form. The following is MATLAB code that will solve for the mesh currents. A=[1000+2000+2000, 0, -2000, 0; 0, 2000+1000, -1000, 0; 0, -1000, 1000+2000+1000, -1000; 0, 0, -1000, 1000 + 1000]; B=[-10;4;0;12]; C = A \ B C is now a column vector of length 4 containing the currents I2, I3, I4, I5. Hope this helps
maybe running out of memory due to all the image objects being created in the axes and not cleaned up? Once you've run GETFRAME you don't need the images anymore. how about at the end of your loop adding: delete(findobj(gca,'type','image') or cla or just grab the handle to the first call to image (say, handle_bright), and then deleting them explicitly: delete(handle_bright); delete(handle_ratio); any of those work?
You can try at [Mathworks](http://www.mathworks.com/matlabcentral/answers/), they're pretty good answering this stuff.
Many thanks! delete(...) did the trick!!
What macbook do you have? Are you running the latest version of Matlab or the version prior to that (since 64 bit support became required as of the latest version)?
How much total memory do you have allocated to running matlab? Type memory at the command prompt to see this information.
I have exactly the opposite problem. It takes ages for Matlab to start, but once it is up and running it works fine.
I have the white macbook. But the same crap happens on a power mac desktop with something like 16 cores and 8 GB of memory. I'm running version R2010a (7.10.0). Seems it is 32 bit. Do you think 64 bit would make a difference?
Typical of the mac version...this is what I get when I type memory: ??? Error using ==&gt; memory Function MEMORY is not available on this platform.
Weird. Matlab takes ages for me to start on any platform (windows, linux, or mac), but only on Mac does it gets slower as time goes on.
Sorry my bad. Try running your code with this on: profile -memory on % run your code profreport this will give you a report of the memory usage of your MATLAB
This ought to get you started: x = 0:0.01:1; plot(x,x.^2-1); Details: the 0.01 is a step size, so x is a vector of 100 numbers linearly spaced in the range [0,1] (0,0.01,0.02,...). The ".^2" notation is elementwise squaring of the x vector, as opposed to matrix-multiplication style squaring.
A lot of people here know MATLAB much better than me, and can perhaps explain why that monstrosity you came up with works, but I've never seen MATLAB syntax like that. The problem you ran into with the first command you listed is that you never told MATLAB what "x" is. So in general when plotting in MATLAB, first define your independent variable. For you, x = [0:stepsize:1] or x = linspace(0,1,totalnumberofpoints). (you can also do logspace in the same way). Then y = x.^2 -1. The dot after the x indicates that you want to square every element of the array, and not do matrix multiplication which would generate an error. Then plot(x,y).
There's a couple different approaches you can use for plotting a function in MATLAB. It's interesting that you figured out how to use fplot, and that's definitely one way to do what you're trying to do. Option 1: * Define your range of x values: x = linspace(0,1,1000); this produces a 1000 element-long array spanning 0 to 1. * Define an array for your function: f = x.^2 - 1; * Plot your function: plot(x,f); Option 2: * Define your function: f = @(x)x.^2 - 1; * Plot your function between 0 and 1: fplot(f,[0 1]); * Have MATLAB calculate the roots between 0 and 1: [x_root_val, f_root_val] = fzero(f, [0 1]); Hope that helps point you in the right direction a bit. Note that when doing standard multiplication and exponentiation in MATLAB functions you should precede the operator with a period ('.'). The reason for this is a tad arcane unless you know what MATLAB is doing, but it essentially allows for array-level operations (which you want) rather than matrix-level operations (which you don't).
So let me see if I have this straight: * I was aware of the ability to define an array, as you suggested for instance, using x = 0:0.01:1. So is the point that if I'm going to plot anything in Matlab, I *have* to first define an array of input values with the desired resolution (here, 0.01 increments)? (This also sounds like my confusion coming from Mathematica; Plot[x^2,{x,0,1}] is all you'd need to tell it, it's smart enough to generate some input values for x and to recognize x as an independent variable.) * By not using the . in ".^2" I'm going to just take the magnitude of my vector, in this case [0,0.01,0.02,...]? Whereas ".^2" is saying "use each element as a separate input"?
Thanks for the response, with bent0's response I think this is starting to make sense...what is the difference between x = 0:0.1:1 and x = linspace(0,1,100), though? As for the thing I came up with, it's apparently called [function handle](http://www.mathworks.com/help/techdoc/ref/function_handle.html). Not that I completely understood what it was telling me.
Hey, you're in Deng's class?! It's a small world. I'm in there too. I would really recommend Applied Numerical Methods with MATLAB for Engineers and Scientists. x = linspace(0,2); f=1.754.^(-x.^3)-x.^4.*(cos(x.^2))-2.011; plot(x,f),grid 
So the way I was doing it, with f = @(x) x^2 and fplot(f, [0,1]), is Matlab basically generating an array for me behind the scenes? This basic graph DID look right despite not using x.^2 instead of x^2. (Is it NECESSARY to first define f or could I just directly put @(x) x^2 into fplot? I know in Mathematica, the similar operations let you either define a function and put that into Plot, or just insert your operation directly into Plot.) If it's not too much work, what is the practical difference between options 1 and 2? It seems like option 1 is basically getting you to the "standard" plot(t,v) way, except you're having it calculate the y-axis points for you. (I'm guessing that the "." in f = x.^2 -1 is necessary for the same reason as you state at the end?) But I'm not clear on why option 2 is worse/better/different. (As for function plot--it was either in my textbook, or I stumbled across it on Google.)
&gt; what is the difference between x = 0:0.1:1 and x = linspace(0,1,100), though? No difference, though if you want them to be identical, you should do linspace(0,1,101) because of the way that Matlab defines linspace. I usually use the 0:0.1:1 method, but it's really just personal preference.
Yup! Small world indeed. And I have that book (the Chapra book, right?). Maybe I need to go re-read the chapter on Matlab fundamentals. What is the grid after plot(x,f)? P.S. You're not the guy I was talking to on Friday about C++ and Fortran and the Chapra book instead of paying attention, are you?
That just puts grid lines on there. Makes it easier to read. No, wasn't me. That class thinned out a ton, didn't it?
You're correct that MATLAB is generating stuff 'behind the scenes' for you when using fplot. It may also be insensitive to the .^ vs. ^ issue, but I'm not 100% sure on that. I believe fzero isn't, however. You don't have to pre-define your function, f. It can be defined within the argument of fplot. It's just convenient to define it independently so you can use it repeatedly and in different contexts. As to the difference between the two options, there is none from a purely mathematical standpoint. From a convenience standpoint, fplot is nice if you want to repeatedly plot the same function over multiple domains (i.e., [0 1], then [2 3], and so on). That way you don't have to keep redefining x = linspace(whatever) and reevaluating f. However if your goal is to apply successive operations to some data, then Option 1 is the way to go. In fact, I think Option 1 is the kind of 'standard' approach in MATLAB. 
linspace has syntax: linspace(first_point,last_point,number_of_points) meaning that you will always have 'number_of_points' and first and last values in resulting array will be 'first_point' and 'last_point'. On the other hand 'colon' (:) operator has syntax first_point:step_size:"ceil(last_point)" meaning that last point in the resulting array does not have to be "ceil(last_point)" (see 'doc colon' for more accurate description). For example 1.5:0.75:4 Will create array [1.5000 2.2500 3.0000 3.7500] when linspace(1.5,4,4) will create array [1.5000 2.3333 3.1667 4.0000]. By the way, if you want to create symbolic expressions, you have to define your symbolic variables first: syms x y %Define symbolic variables x and y f = y-(x^2)^(1/3) %Symbolic function ezplot(f) %Plot symbolic function solve(f,x) %Solve for x simple(f) %Try to simplify formula
&gt;y(1859)=12; Should be y(1) = 12; 
&gt;y(i+1)=y(i)+t(i)*0.1; This should also be: y(i+1)=y(i)+y(i)*0.1; With this I get 1.4087e+003 However if I use the built-in ode23 solver, I get 1.7810e+003 It might be that I am still doing something wrong when I use the Euler's method. Or maybe that's the answer you are supposed to get. It's an approximation after all. I don't know. 
 MATLAB's built-in ODE23 function solved the problem analytically, or possibly using an incredibly small step size such that we can't see any difference between the analytic and numerical version, or possibly using another more efficient method- the analytic solution is 12 * exp(1864-1859) = 1.78095790230919 * 10^3 (type format('long') before entering the expression in MATLAB to get more significant digits). This is the correct answer for Euler's method as well. You can see this by trying smaller step sizes. For instance, for a step size of 0.01 the population at 1864 is 1.737 * 10^3, and for a step size of 0.001 the population at 1864 is 1.7765 * 10^3. OP should not be checking y(5) either -- the appropriate element of the row vector is y(length(t)) -- in the above case this would be y(51). For a step size of 0.01 this would be y(501), and for step size 0.001 this would be y(5001); just use y(length(t)) since this is literally what you want. 
All Matlab ode solvers are numerical.
I wouldn't really know, I kinda just started browsing reddit at a certain point... P.S. Thanks for the grid tip! I was wondering how to get that in there.
GRARGH. It still doesn't seem to want to work. I put in x = -1.5:0.01:1.5, and it's fine. I put in say x = x.^2 or x.^4 and it seems fine. Then I put in f = x.^4 * cos(x.^2) for instance, and I get ??? Error using ==&gt; mtimes Inner matrix dimensions must agree. Yet if I switch it to x.*x.*x.*x.*cos(x^2) it seems happy, but then I try f = 1.754^(-(x.*x.*x.) - x.*x.*x.*x.*cos(x^2) - 2.011 ??? f = 1.754^(-(x.*x.*x.) - x.*x.*x.*x.*cos(x^2) - 2.011 And I chose to use Matlab since C++ is probably harder to pick up from scratch...
Whenever you see an 'mtimes' error it's because you're using matrix operations instead of array operations. Your problem is you did x.^2 * cos(x.^2 ) . There should be a period before the ' * ', i.e., x.^2 .* cos(x.^2 ). Basically, unless you're trying to do some matrix algebra, anytime you multiply, divide or use exponentiation be sure to preface the operator with a '.'.
Oh gods dammit. Thanks for the info. I thought I'd taken care of it by putting the . in x.^2. Now I know to just put periods fucking everywhere!
Yep, that's pretty much what it comes down to. Periods fucking everywhere.
Aha. Just tried it, apparently I thought the "." in "x.^2" was modifying the x, when it's really modifying the exponentiation operator!
matlab is "MATrix LABoratory", it specifically deals with numbers, matrices and arrays. Matlab doesn't deal with continuous functions like mathematica, you must create the arrays you want to plot. x = 0:0.01:2; y=x.^2 - 1; plot(x,y); The .^2 means to operate element-wise on an array, so it will square every element in the array
And here I thought the "Mat" was for "Math". :p So I figured out that part of my problem is that the bisection method code I was using seems to want me to define f = @(x) (expression) as opposed to just f = (expression). The first three inputs are bisect(function, lower bracket, upper bracket) and when I had f defined as the array of values corresponding to my x array, when I'd input say bisect(f, 0.5, 1.5) it was freaking out since 0.5 is obviously not a valid array index and it was trying to sample "the 0.5th element of f" instead of "f(x) evaluated at x = 05" (which the f= @(x) methods allows to happen). But yeah, I think it's pretty clear that part of my problem is that my main background with this kind of software is Mathematica, leading me to expect things to happen in a way that Matlab simply doesn't do...maybe just maybe (I hope) the Matlab syntax is starting to make some sense to me (or at least I'm able to recognize how it wants me to input things).
dsolve in the Symbolic Toolbox solves ODEs analytically.
Yes, I know. I was talking about ode23, ode45...etc
This is key. The biggest barrier to learning MATLAB is to realize that since it implicitly assumes that everything is an array, all operations are assumed to be matrix-matrix operations, so x*y is a matrix 'x' times a matrix 'y'. This is not the same as multiplying the first element of x by the first of y and so on. To do that, you need to have a '.' in front of your operation. (like .* or ./). Likewise, MATLAB doesn't think of 'x' as a variable in the sense you have. Therefore you have to define an array of test points where you evaluate a function at (you can use any of the methods mentioned by others here). Once you choose the points you want to evaluate at, you then apply the function using the '.' operations. It's tricky, but once you get into the mindset it gets quick to write up code. Best of luck!
For future reference, it is a good idea to define step size as a variable. So, you would do something like: h = 0.1 t=1859:h:1864; n=(1864-1859)/h for i=1:n ... ... This way, if you ever need to change step size, you only change 1 line.
the word you are looking for is significant figures. I'm not sure how to get them - but try with that term. Viel glueck.
use the function 'fill' to plot to the get the sexy semi-opaque solid error bars (regions?) be sure to call the handle (h=fill(...)) and set set(h,'FaceAlpha',.5,'EdgeColor','none') to make the filled region semi-opaque to get rid of the boundary line of the fill. Fill is a little awkward since you have to describe the edges of the volumes, so heres a quick ditty i wrote where you just plug in x, upper y value, lower y value, which is typically the format your data are in for these purposes %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function myhandle=myfill(x,yhi,ylo,c,facealpha,edgecolor) % input data as per plot % inputs: % x % yhi % ylo % c = color, in single letter or RGB triplet % facealpha, opacity of colour fill [0 1] % edgecolor, as c, or 'none' x2=[x(:); flipud(x(:)); x(1)]; y2=[yhi(:); flipud(ylo(:)); yhi(1)]; myhandle=fill(x2,y2,c,'FaceAlpha',facealpha,'EdgeColor',edgecolor);
Thank you kindly, meows0r. This worked perfectly for me. 
anything for a fellow time series analyst
I don't know what I would use this for, but I'm saving it in my matlab directory in case I ever find myself in need. Thanks
It's because you're making a vector y that will be the same size as your vector t -- think of how for every single value of t you will have a corresponding discrete approximation for y. So the first element of the vector, i.e. y(1), corresponds to t(1), which is 1859. for i=1:50 is actually the same as for i=1:1:50 - you're iterating through all of the y values you have. See sesse's point -- he is indeed correct, it's much better practice to define the step size h and then let t=number:h:end_number and iterate for i=1:(n-1) [it's n-1 since you are defining y(i+1) and you only want time points up to y((n-1)+1) = y(n)] The reason you're doing y(i+1) = y(i) + 0.1 * y(i) is because your differential equation is dy/dt = y, thus the approximation is y_new = y_previous + h * y_previous where h is the step size; if it had been dy/dt = f(t,y) you would have y_new = y_previous + h * f(t, y_previous).
Just want to say that MATLAB is a little difficult to get used to initially but once you understand that everything is discrete and to use .* instead of * when you're not trying to do matrix multiplication, everything becomes quite easy, and really, really quick. There's some discussion on Euler's method in this reddit post: http://www.reddit.com/r/matlab/comments/fbs7h/trouble_with_eulers_method_in_matlab/ It will surely be of help since it's a numerical analysis course.
doin the same
Do you live nearby a local university? The math/cs/engineering departments might be able to refer you to grad students/post docs/professors that have a significant experience with Matlab and would be interested.
Good idea. Thanks. Nearest university is about an hour and half away, but I could certainly contact them via phone, email. Duh! 
What region of the U.S. are you located? Or, what country?
Rural New England. No shortage of universities here, but I don't have any formal connections with any of 'em. 
Why do you want to develop it in MATLAB?
Good question. MATLAB may be overkill. But it seems like a good platform with which to build a GUI to control certain parameters in my C/C++ code. (I am *not* going to build a GUI in C!). I'm open to other ideas. What I'm trying to do boils down to something very simple: 1. Read a chunk of data from a file. 2. Convert it from an obscure scientific data format. 3. Load it into a buffer. 4. Play it as audio at a given sample rate. 5. Repeat with another data chunk. The length of the data chunk and the audio playback rate are adjustable via the GUI. (FWIW, I'm also considering doing all this with [MaxMSP](http://cycling74.com/products/maxmspjitter/), but I'm not clear yet how easily it could be programmed to do the data format conversion part.)
Why not just use python?
Hmm... I've never used it. I always assumed it was a scripting language, mainly for web apps. Are there Python libraries out there for building GUIs? Handling sound file formats? Displaying/graphing data? Doing signal processing (fft's, etc.)? 
Matlab definitely seems overkill for this. Also, a MATLAB license is quite expensive...have you looked at the cost?
I hear LabVIEW (by National Insturments) might be fitting also.
Have you considered GUI frameworks like [Qt](http://qt.nokia.com/products/developer-tools?currentflipperobject=937ba3e952f85ef68ddbb7cb4b20fc19)? (Ignore me if you have.) I don't have experience personally but I've been hearing good things about Qt from colleagues, and it's already in C++. Failing that, you can hire someone online maybe? Does your project require the MATLAB programmer to be at the site? If you have a clear set of specifications you can outsource it online. I know I'd be up for a discussion at least :)
Yup, it's expensive (about $2K). And I bought it, having convinced myself that it was the tool of choice. But now it's a month later, and I'm still slogging through the demos, trying to figure out how it all works. (Maybe it's just me, but it feels like the MATLAB learning curve is curving the wrong way.)
Thanks. I'll check it out.
Yes, it has all of that.
You may find it worthwhile to leave the language/tools open to the programmer, if you do outsource it.
Check out the python libraries numpy and scipy to do the signal processing you might need.
No, I haven't considered Qt. I'll look into it. As to online hiring... I'm not quite ready to jump into that yet. I'd first like to gather a little more info from others about how they went about finding programming assistance, whether online or offline. But I might get back to you. :)
yes. Mind you, I would do most of the heavy computational parts in C/C++.
GUIs are super easy to build in Max map.. matlab is a beast though for that...
I had to write some gui's for my project, and my friend told me to check out tkinter for Python. It only took me a few hours to get one working. Wx and gtk (using python) are other gui options. It'll also be easier to do your sound stuff in python, and the software will be lighter and more stand-alone. Python is very powerful, pretty fast, and pretty easy.
Try adding it to the dock.
Maybe. Are you on a core 2 duo processor?
Strangely, I can't get the bottom x axis to show up. The ticks are there, but the line disappears as soon as I add the filled area. Lastly, any tips for exporting the figure so it doesn't look like a pile of pixelated crap? Even .eps isn't doing it for me anymore. 
Haha... yeah ive had the exactl same problem as well re: x-axis weirdness. I have no idea what causes it; although I suspect it has to do with using transparencies What version of matlab are you using? It all comes out in the wash when you export the figure. I always export to compressed .tif To avoid pixelation, be sure to manually set the .epi
Using R2007A. Sadly, x-axis annoyances did not come out in the wash during export, either with .tiff or .eps. I set dpi (i assume that's what you meant by .epi?) to 300. [Exhibit A](http://imgur.com/buEiH) - pixelated pile of crap (.tiff). I acknowledge that imgur converted the tiff to png, but it doesn't look much better on my desktop computer. I can't upload the eps, but i promise you it's not much of an improvement. Seriously Matlab, even Excel makes higher quality images than you. 
edit: example http://imgur.com/DeaMy Ok, after playing around I'm pretty positive this is just a bug when using transparencies. I don't get the loss of the lower-left axes when I export. I use the Export Setup GUI under file, with these settings: 600 dpi custom renderer: OpenGL (I've noticed the transparencies dont even come out with the other renderers) keep axis limits and show uicontrols both on lines are of a custom width scaled by 100% with minimum width of 1 not sure if any of these will help. I'm going to see if this bug exists for more recent versions and/or osx/linux builds
Hmm, still losing the x-axis even with the above suggestions. My workaround is to simply insert lines where they should be. Interestingly, I found the x-axis DOES make an appearance when I print the figure. But no amount of zooming in makes it appear on my screen in any programs I use to display it (Preview, Word, Powerpoint, Adobe, etc). If it helps with your bug hunt I'm using R2007a on a MacPro running on OSX 10.4.11. Maybe it's just time for a major update? Maybe R2010b has improved graphics exporting?
 It's not pretty, but I think this works. I commented it to explain what I did. % get your number a = 3.141592654; % convert to string. flip it around. trim extra white space aa = strtrim(fliplr(sprintf('%18.9f', a))); % find out where the first non-zero digit is zstart = find(~(aa=='0'), 1, 'first'); % find out where the decimal point (.) is zstop = find((aa=='.'), 1, 'first'); % subtract to find significant digits numSigDigits = zstop-zstart 
I think you're mixing data types here. I think you mean to use a cell array. I think that one way to go is to use a cell array and make the 4th element a function handle: A = {1 -1, 2 @(x)randn(x)} Then you can call the function handle with an input: blah = A{2,2}(1) The function handle could be to a function file that you write to perform whatever random number generation you want. OR you could always write your own data type using CLASSDEF, but that's a story for another day.
So, for example, if you take the matrix [1,-1;2,N(0,1)], and you multiplied it by 2, you would want it to become [1,-1;2,N(0,4)]? You need symbolic calculations to do that. For example you could create a symbolic matrix with numerical entries and a symbolic variable entry (e.g. d=sym('d')) for each of your random variables. You would then perform all relevant computations symbolically, and only at the end plug in random numbers for the symbolic values using subs.
If you can convert your number to a string you know that the value of '.' is 46 (ASCII) and all that needs to be done is find the length of this string after this character.
I'd use python or Java. It's definitely easier to import from Notepad than Excel. Do you need a GUI for it? That might be more complex trying to do in MATLAB. Also, have you heard of [Anki](http://ankisrs.net/)?
I agree: I wouldn't use MATLAB for this (although it's certainly possible), and unless I had a particular reason for wanting to write it myself, I'd use existing software. You also may want to consider a web-based flashcard system, e.g. [memorize.com](http://memorize.com/).
Me, three. Also, [iflipr.com](http://iflipr.com/) is nice, too.
I made a GUI using the guide and it generated the code for it automatically...Thanks for the suggestions though. It's just the Matlab is the only code I've used in about a year or so I think. Also, why do you say Notepad would be definitely easier than Excel? 
Do you know if it's possible do the entire thing in Matlab? I.e. write a separate thing of code that stores all the complementary information (e.g. 'cat','feline') in one list? As I see it, it would pick random items from the list and then show the one after if the index is odd (1--&gt;show 2) or show the previous item if the randomly selected item is even (2--&gt;show 1). But I just learned that indexes of arrays of strings go by letter rather than word...
Well, you could use Excel and save it as a *.csv (comma-separated values) file and load it into your program. You'd likely have issues reading an .xls or .xlsx file, though. You would need to find some libraries for that, and I know they exist for Perl, but that's all I'm aware of.
Well, yes, it's possible to code it all in MATLAB. It will take some work (not a ton) to put a GUI on it, but you can do the "work" in just a few lines of code. If I were writing it, I'd use a matrix of cells, so that you can store arbitrary data types. Make an n-by-3 matrix of cells, where you have n flashcards, so each row of the matrix corresponds to one flashcard. The first entry is the score for the card (a number), and the next two entries are strings for the prompt/answer. Select a random row, display prompt, and then you indicate whether you got it right or wrong, then display the answer and adjust the score. (This could be more advanced by comparing the input to the answer, but some flashcard software is just an "honor system," e.g. memorize.com.) Each one starts with a score of zero, and you get +/-1 for right/wrong answers. You could make the random selection favor low-score cards, and loop until all cards have a positive score, or some other "completion" criterion.
This might not be helpful advice, but seriously consider using R for this. import your data from .csv or something: thingy&lt;-as.data.frame(read.csv('whatevs.csv',header=TRUE)) Then you can do some operations like: justredditthingy&lt;-thingy[thing[,c('string')] == as.character('reddit'),] 
if you know the name of the variable beforehand you can get the index to all the rows that have that string. Because you are using both strings and numbers, you would store what you described above in a cell array. strcmp (string compare) works on cell arrays, so you could do something like strcmp(cellArray, 'reddit') which would return a logical array, indicating where 'reddit' was matched (which cells). This would do the trick: q=cellArray(find(sum(strcmp(cellArray,'reddit'),2)),:) though in terms of efficiency I can't make any claims of effectiveness (now sure how strcmp is done with cells) 
I tried doing that, but I always end up getting Empty cell array: 0-by-2 no matter what string i choose to have it search by.
Real time workshop doesn't appear to create a gnu make compatible makefile. Has anyone managed this? Did you have to port the Makefile?
I assume that your original 3-column data is a cell array. % make a list of sites sites = {'reddit', 'fark', 'digg'}; % random first number col1 = randi(10, 100, 1); % random date in january 2011 col2 = randi(31, 100, 1) + datenum('2011/01/01', 'yyyy/mm/dd') -1; % random site chosen from sites variable above col3 = sites(randi(3, 100, 1))'; % put it all together Data = [num2cell(col1) num2cell(col2) col3]; % now you have your data. Let's do the real work. % get a list of all unique sites in Data targetSites = unique(Data(:,3)); % create an anonymous function to find the sites in Data f = @(word)Data(strcmp(word, Data(:,3)),:); % use cellfun to find each of the unique sites in Data Output = cellfun(f, targetSites, 'UniformOutput', false); % look at the reddit data: RedditIndex = find(strcmp('reddit', targetSites)); RedditData = Output{RedditIndex}
MATLAB can read XLS, XLSX, etc files, though full functionality is only available when you have MS Excel installed (and only on Windows). See the documentation for XLSREAD in MATLAB. But you can just as easily store things in a .CSV file and read it in with CSVREAD, DLMREAD, or even TEXTSCAN. It's just that Excel makes data entry a bit prettier.
does this work?: t = { 1, 'hello'; 2, 'world'} q=t(find(sum(strcmp(t,'hello'),2)),:) It does when I run it. The solution by agentq512 is more eloquent though. edit: grammar
I figured it out: files=dir('*.txt'); for i=1:length(files) fil=load(files(i).name); filename=genvarname(files(i).name); eval([filename '=fil']); end As with any for loop, it's pretty slow. Also, I haven't figured out how to supress the screen output (the semi-colon after eval isn't doing it), but it works well enough I suppose. 
I'd love it if we could integrate over my vector space. 
You could try to use function 'delaunay' and functions associated with it (or some other function from docsearch('Interpolation and Computational Geometry')). I have not used it, but it might work. Second option would be to calculate distance from each of your points to another point (approximately above the data) and then associate color to the original point which is function of the distance (this can be interpreted as depth map).
i've done this using the method described under the subheading 'Surface Plots of Nonuniformly Sampled Data' on this page of the docs: http://www.mathworks.com/help/techdoc/visualize/f0-45715.html and i don't think it mentions it here but you can change the kind of interpolation for TriScatteredInterp from 'linear' (default) to 'nearest' depending on what you're doing.
In this case a convex hull might be useful (its related to delaunay). Do help convhull for more info.
Plot as a stereogram (side-by-side, at a slightly different angle), and reduce the number of points (random sample) until the 3-D effect looks best. 
You might try scatter3d. It takes in x,y,z,color, size where color and size can be vectors matching the coords. They can also be single values.
Hmm, that's a good idea. I think this is what I'm looking for, for now. 
I'm not famiiliar with any of the functions or the distribution you mentioned, but; if ncfpdf gives you the distribution with your desired parameters, then -assuming the pdf is normalized- you can just integrate (sum() in this numeric case) from x to -\infty (or whatever smallest value you have for the distribution) to find the probability that an observation is &lt;=x. Implementation-wise, all you need is just a wrapper for ncfpdf, including just one other line for the summation. function p = probf(x,ndf,ddf,nc,pdfDomain) Y = ncfpdf(pdfDomain,ndf,ddf,nc); Y = Y ./ sum(Y) %making sure the pdf is normalized, probably don't need it as ncfpdf() should be taking care of that p = sum(Y(Y&lt;x)); end 
Thanks a lot for your help. I ended up finding the Matlab function 'ncfcdf', and it's identical to SAS's 'probf'. I probably would have given up if you hadn't prompted me to keep looking for solutions. :D
glad it worked out in the end :)
The error is because P(:) + P(:) in the last line of your code is `2*P(:)`, that is `2*[1, 4, 10, 20]`. So you are looking in a vector that is:` [2, 8, 20, 40]`. What you want to generate is a matrix like `p(1)+p(1), p(1)+p(2), p(1)+p(3), .....` `p(2)+p(1), p(2)+p(2), p(2)+p(3), .....` then apply find to that To generate the matrix (there is probably a better way than with the loops, but this will do it) `for i=length(p)` ` for j=length(p)` ` Psums(i,j)=p(i)+p(j)` ` end` `end` `find(Psums== 11)` Edit: sorry for the bad formatting, hopefully this makes sense 
Hi, I'm the OP, I had to post from one of my novelty accounts since I kept getting an error trying to make this thread from this username. So it looks like I got everything working. I've got a 30x 30 matrix does look to have all of the values I'm looking for. One minor hitch. When I ask it to find Psums == 11, it tells me 3 and 61, the 3rd and 61st entries in the matrix (since you obviously get duplication of some of the additions from the loop you defined). Is it possible to get Matlab to report the result to me as (row, column)? But if not, you're still my fucking hero, because this is exactly what I had in mind. Thank you so much.
`[row,col]=find(Psums==11)` row is a vector of row indices, col is a vector of column indices of the values you are looking for. another great bit of code for you: `help find` : )
Also, to get rid of repeats `Psums=zeros(length(p),length(p)` `for i=length(p)` `for j=i:length(p)` `Psums(i,j)=p(i)+p(j)` `end` `end` `find(Psums== 11)` Note: this will fail if the value you are looking for is zero.
Is there something I'm missing about not doing repeats for 3D and up matrices? I ultimately need to take five combos of P but that results in a 30x30x30x30x30 5D matrix...I figure a good step would be eliminating the redundancies. I tried for i = 1:30; for j = i:30; for k = j:30; P3(i, j, k) = P(i) + P(j) + P(k); end end end But that doesn't seem to help...
I think that should do it... unless P(1)+P(1)+P(1) is redundant, or say P(1)+P(2)+P(2)+P(5)+P(24) you might want `for i = 1:30;` `for j = (i+1):30;` `for k = (j+1):30;` `P3(i, j, k) = P(i) + P(j) + P(k);` `end` `end` `end` I don't have an install of matlab on this box so I can't check it, but that could be the issue. This issue exists also for 2D matrices, but you may not have caught it before.
Yes, like the others said, you want a double for loop, but you should try to never write for loops in matlab. Here is an efficient vectorized way that is much faster for large vectors: PP = bsxfun(@plus,P(:),P(:)'); [i,j] = find(PP==11); PP is a square matrix with PP(r,c) = P(r) + P(c). Check out bsxfun, it's like magic and you'll never write for loops again!
or `Psums = repmat(p, 30,1) + repmat(p', 30, 1)`
Hey, so it wasn't working properly yesterday but when I tried it today it did work. As I've been discovering Matlab will sometimes do some weird things if you've been using it for a bit and keep trying to overwrite the same variable over and over again, maybe because you declare something without realizing it or do something else that gets a value stuck (I'm speculating, just what it seems like). But anyhow thank you again! It took some more banging my head against the problem but I finally got it working today, in a reasonable amount of time no less (around ten seconds I'd estimate, not bad for having to first generate a big 5D matrix and then go through that 5D matrix at various points; but eliminating the duplicates probably helps quite a lot, 278,256 nonzero entries for the duplicate-free matrix versus vs 24,300,000 if I just blindly let it calculate all the duplicates, I've been waiting for a minute and it hasn't even calculate the 24,300,000 entries matrix yet). Basically a bit less than 100 times less entries is huge if it's ~10^5 calculations vs. ~10^7 calculations. Couldn't have done it though without your help, you gave me the key (how to make Matlab do what I was conceptualizing) that I needed to get the rest of the way.
Glad I could help. To avoid the issue with things acting weird after awhile, I always put the following at the top of any script I write. 'close all; %closes all open figures' 'clear all; %clears all variables' 'clc; %clears all text and error messages in the main window
Very nice. I write for loops all the time, so this should be really useful. Can you explain how you would continue with the problem that he explained in the comments above? That is, how could you use bsxfun to generate the 5D analog, avoiding redundant entries?
This would not deal with avoiding redundant entries, and create a n^5 sized matrix, but would most likely be faster than 5 nested for loops which can avoid the redundancy: P = P(:); n = length(P(:)); P5 = bsxfun(@plus,P,P',reshape(P,[1,1,n]),reshape(P,[1,1,1,n]),reshape(P,[1,1,1,1,n])); [a,b,c,d,e] = ind2sub(size(P5),find(P5(:)==11); Then P5(a,b,c,d,e) = P(a)+P(b)+P(c)+P(d)+P(e) will equal 11. As d (currently = 5) gets larger though, avoiding redundancy is the way to go, because forming a full n^d matrix will quickly fill up all the memory your computer has. So for large d, I would really write this in mex with for(int i=0; i&lt;n; i++) for(int j=0; j&lt;i; j++) for(int k=0; k&lt;j; j++) .... and never actually store the matrix, just break when you find your magic number, saving the indices.
Hm, I already put in "clearvars" (which seems to do the same thing as clear all) at the top of the script you helped me out with but I'll try to the other ones too. P.S. Good to know that I'm not alone with Matlab getting weird after a while, I was getting concerned that I was making amateur mistakes or something, but looks like you really do need to force it to dump its memory contents sometimes.
There is a smooth function in matlab which will probably give you all the functionality you need. Without knowing anything about your data (in terms of how much smoothing you need etc.) I cant give too many specifics but if you type in doc smooth at your matlab prompt you should be able to find what you need. Alternatively you could apply a Gaussian filter the code for which might look something like this: h = fspecial('gaussian') data=imfilter(data,h) for more info on that you could also type doc fspecial. Hope this helps. 
Try the smoothing in cftool, its a very nice GUI alternative. After you're done, just export the data back to the workspace.
It looks like the moving average smoothing method will work for my purposes. Thanks, guys.
for moving average: res=filter(ones(windowLength,1)/windowLength,1,dataSeries)
&gt; and never actually store the matrix, just break when you find your magic number, saving the indices. Smart.
Just looked up [Bezier functions on Wikipedia](http://en.wikipedia.org/wiki/B%C3%A9zier_curve). Neat, thanks!
you need y = x.^2 . .(operator) tells matlab to do the operation elementwise.
Try: x = [0:10]; y = x.^ 2 ; plot(y); 
thanks that worked
Without the dot, you're telling matlab to square a 1x10 matrix, which is impossible
You can do this by using unique to retrieve the indices of e.g reddit, digg and so on. [b, m, n] = unique(...) To group the results in structs you can use accumarray. Something like A=accumarray(inds,data,[],@(x) {x}) should do the trick..
From the Matlab course I teach: Elemental operations: Whenever your program doesn't work, it's usually the cause.
Another way: f = @(x)x.^2; ezplot(f) 
I think what you'll want to do is something along the lines of: data1 = [10:19]; data2 = data1(randperm(legnth(data1))); (assuming that what you're trying to do is have your array contain ALL of the integers from 10-19. if you just want an array of randomly sampled integers from that interval, then I think what you already did would work)
If you have the Statistics Toolbox: &gt;&gt; randsample(10:19, 10) ans = 14 15 12 19 17 13 16 11 18 10 
Thank you so much!
I'm afraid I don't think I have that..
Do you have the image processing tool box? Blockproc would probably help you out a lot. Check it out. If you have any questions let me know. http://www.mathworks.com/help/toolbox/images/ref/blockproc.html
 sum(mymatrix(i:16:1616, j)); Select only every 16th index in the first variable. Alternatively you might be interested in making a three-dimensional array instead, so that you can write sum(mymatrix(i,j,:));
For a quick solution I ended up converting to a 3D matrix, 16x512x101 and using something like cumsum(A,3); and just removed all but the 101th slice. Fast enough (&lt;1 sec) but it is probably more efficient your way, so I'll give your suggestion a shot. Thanks!
Replace cumsum(A,3) with sum(A,3) and you'll get the output you need directly
Is this not just a hand calculation of how to get a 35kg object of volume V to be neutrally bouyant, plus or minus a bit (for diving/surfacing)? Isn't Matlab overkill? What are you trying to calculate?
"The bit" is what I would like to calculate. At the moment I am guessing that a 5 litre tank would be enough, but I would prefer to model this to be certain, but I havn't been able to find anything that would help in this regard. I have to report on the behavior, I can't just assume things in it's design.
Do you have a desired min/max descent rate? Again, it seems like hand calculations of the buoyant vs gravity forces should suffice? What effects are you modeling beyond this? 
I dont have the min/max descent rates in mind, just something that is not too fast, not too slow. It would be cool to also model the time response characteristics with the damping rate.
What...no, save the state your self (set a break point, save the state), then add a load("whatever.mat") and have it run from there.
How do you save a state?
Look up save...it's the opposite of load.
Do you know yet the volume of the sub without the ballast tanks?
nope, couldnt be more than 3-5 litres though.
I figured it out on my own, but if it wasn't as simple, I figured a preemptive question couldn't hurt. If this is the type of snarky response I can expect from this subreddit, I'm out. Thanks for your first response, though.
Then what are you planning on putting into MATLAB? You have to tell it something....
Sorry. You may also want to look up code cells, if you have like 7.5 or later or something. You can define blocks of code that you want to run on their own, for like testing or something. It's pretty nifty.
You need to derivate the function and then solve the zero-crossing: syms x f = 7*x^2+1/2*x+4 ezplot(f) hold on xpos = solve(diff(f)) ypos = subs(f,xpos) plot(xpos,ypos,'r.') hold off
Another way that's less accurate but useful when your curve is more complicated than a quadratic x = linspace(-10,10,1000); f = 7*x^2 + .5*x + 4; [~, index] = min(abs(f)); plot(x,f) hold on plot(x(index),f(index),'o') 
Is derivate a British English thing? I've seen it a couple of times on r/math and it makes my skin crawl a little. Also, no real reason to rely on MATLAB to differentiate a quadratic. If we have f=Ax^2 + Bx + C, then the derivative is f'=2Ax + B, which is zero when x=-B/(2A). Meh, style thing I guess; doing symbolics work in MATLAB seems strange regardless of how capable it is.
Actually it is finglish as we call differentiation 'derivoiminen'. Good reason for using differentiation is that it is more general method.
D=ceil(S * rand(1,N * T * R))
Is a for-loop completely out of the question? for k = fliplr(length(myvec):2) if myvec(k) &gt; 0 &amp;&amp; myvec(k-1) &gt; 0 myvec(k-1) = myvec(k-1) + 1; myvec(k) = 0; end end EDIT: Ok, I found a neater way. while 1 r = myvec(2:end) .* myvec(1:end-1) &gt; 0; if sum(r) == 0 break end myvec = myvec + [r;0] - [0;r]; end Takes N iterations, where N is the longest run of 1's.
If you don't have the symbolic toolbox, you can use function handles and fminsearch: f = @(x)x.^2 + 4*x - 9 [xmin, ymin] = fminsearch(f,5); % 5 is the starting point, or initial guess ezplot(f) hold on plot(xmin, ymin, 'ro') edit: I added the plot commands.
I see how that would work, but I need to display the results of each trial separately, which makes me think I need to run a for loop, but I'm not too sure how to set it up.
Hey, thanks for that, I'm gonna try plugging that in, but I'm a little confused by the first line!... What's r? 
r is a vector with length one less than myvec. r(i) is 1 if myvec(i+1) and myvec(i) are nonzero. In this case, the 1 in myvec(i+1) has to be "moved" to myvec(i). This is accomplished by adding r(i) to myvec(i) and subtracting it from myvec(i+1). That is what the line myvec = myvec + [r;0] - [0;r]; does, except it does this for all i's simultaneously. r(i) is zero in all other positions, in which case the adding/subtracting thing has no effect anyway. The result after one loop is that [0 1 0 1 0 1 1 1 0 1 1 0 1 0] is transformed to [0 1 0 1 0 2 1 0 0 2 0 0 1 0] and after yet another loop [0 1 0 1 0 3 0 0 0 2 0 0 1 0] when the loop comes around again, there are no 1's that have to be moved left any more, so now r consists only of zeroes, and sum(r) is zero and the loop breaks. I kind of assumed you know how to program in MATLAB and that you know what a while loop is?
Cool, thanks, I'm ok with while loops, its syntax of the first line that's thrown me. While 1 r = ..... 0; doesn't seem to fit the expected syntax. I am working from a smart phone for internets, so I may be losing something in display on my phone... I plugged it in exactly as per, and get the error: CAT arguments dims are not constant. Error in aaa=aaa+[r;0]-[0;r];
D2 = reshape(D, [], N); for ii = 1:T fprintf('Trial %d:\n', ii) disp(D2(R*(ii-1)+1:R*ii, :)) end
1 evaluates to true, so while 1 is an infinite loop. The breaking condition comes after calculating r. r = ....; is a separate statement. I thought you said aaa was a column vector. If it is a row vector, you need aaa = aaa + [r,0] + [0,r];
Also, as your code looked like it was working in the horz plane, I rotated the array from vertical to horz. This (in my current test data version) gives me a 1x1552 nominally called aaa. Its appeared as logical, this may be the issue. I pulled out the array via: aaa = emptyIndex(:,4)';
Also, as your code looked like it was working in the horz plane, I rotated the array from vertical to horz. This (in my current test data version) gives me a 1x1552 nominally called aaa. Its appeared as logical, this may be the issue. I pulled out the array via: aaa = emptyIndex(:,4)'; Edit: forgive me, its 5.30 am here and I'm a doofus. Its works perfectly if you throw it at the index, not the char array.... thank you. And your explination alone has taught me a whole bunch of stuff (actually having the vert/horz comparison is mega useful) as a terrible selftaugh matlab enthusiast, I thank you :)
No worries ;). Have a nice .... early morning.
I am assuming that N, S, T, and R are scalars. Thus you're rolling N dice (each is S-sided) for T trials with R rolls in each trial. D = randi(S, N, T, R); So you get a 3D array that is N x T x R and has values 1 to S. You can index this to get information, such as: % data for die 4 die4data = D(4, :, :); % data for trial 6 trial6data = D(:, 6, :); % die 5, trial 5, all rolls B = D(5, 5, :); % die 4, trial 7, roll 3 C = D(4, 7, 3); % histogram of die #1 data Temp = D(1, :, :); hist(Temp(:), 1:N) 
Can you post that file somewhere? (class.dat)
this really helps a lot. Thanks! But by any chance do you know for displaying the data.. how can I set it up to show how many ones it rolls for all the N number of die that the user chooses?
Sorry for the delay. Here's what I have: % set the parameters S=8; N=30; T=10; R=100; % roll the dice D = randi(S, N, T, R); % find the ones in all rolls JustOnes = (D==1); % count the number of ones for each die, for each trial A = sum(DD,3); % further sum the number of ones rolled by each die over all trials B = sum(A, 2); % plot it bar(B), ylabel('total ones rolled'), xlabel('die number') 
I think that what's wrong is that the STRUCT command wants the data to be in cell arrays. You're sending it a character array. Also, you should be able to eliminate that first for loop. Something like this: &gt;&gt; studentname = struct('first', deblank(cellstr(studentfirst)), 'last', deblank(cellstr(studentlast))) and something similar for studentgrades, but this is left as an exercise for the reader. Question: why not just put all of the data in the same structure? 
Try adding this to your code: N = 512; Y = fft(y, N); w = 2*pi/N*(-N/2:(N-1)/2); plot(w, fftshift(abs(Y))/N); Depending on how much signal processing background you have, that may or may not make a lot of sense to you. However, that should give you a DFT plot that is closer to what you are probably used to seeing. If you don't know what any of the above functions do, you should probably look them up in Matlab's help system, but I think they're pretty self explanatory. The signal y is simply 2 sinusoids plus some random white noise. Theoretically, you would expect to see two large peaks in the spectrum that correspond to the frequencies of the sinusoids. We should see these peaks at 0.1pi rad/s and 0.24pi rad/s, which is what we end up with on the plot.
Right, except he needs N = 100 I believe.
You're right and I missed that, but adding more DFT points certainly doesn't hurt. It just adds more "resolution" to the spectrum.
Yeah I kinda see whats going on. I don't need N=100 I just put that up for an example. I'll have to try it out tomorrow since I don't have matlab on my computer and I need to use the labs on campus. I've been doing work for an other class which is why I'm late to responding. 
And then you type "life".
Haha, that's a neat one. 
The bald and not excessively bald and not excessively smart hamster obeyed a terrified and not excessively terrified hamster. :D
Could you explain the ones on the second list? Also, 'showdemo shower' still works (at least, it does in R2010a).
`shower` isn't an easter egg. It's a basic Simulink example. 
spy isn't an easter egg... you use it to view the sparsity patterns in matrices!
[There's much more going on with MATLAB's default image than you might realize](http://blogs.mathworks.com/steve/2006/10/17/the-story-behind-the-matlab-default-image/)
Try it without specifying a matrix spy I would consider it an easter egg
oh cute. cool.
Hey, thanks, I'll have to try it. 
Haha, that is quite something.
If you want to have some more fun, you can view all the source code for any of the easter eggs by typing 'edit (command)' e.g. 'edit why'. You can see how they made the spy, for example, (it's defined as defaultspy) or what random phrases can exist when using 'why'.
xpbombs
Minesweeper! That is excellent, thanks for sharing.
One of them still works in R13: &gt;&gt; reshape(1, [-1 -1]) ??? Error using ==&gt; reshape Don't do this again!.
it used to be that if you kept typing that command in it would yell at you differently. Stuff like "Seriously, you can't do that!"
You're right: &gt; Cleve says you should be doing something more useful. &gt; Seriously, size argument cannot be negative.
I got a couple errors, and the "labels" button didn't work (could be my old version of MATLAB), but here are a couple of pictures of the output: you can move the slider to adjust the height of the plane intersecting the surface: [http://imgur.com/FcT33l&amp;dQInb](http://imgur.com/FcT33l&amp;dQInb) and then click the "Plot Contour" button to highlight the intersection of the plane and the surface: [http://imgur.com/FcT33&amp;dQInbl](http://imgur.com/FcT33&amp;dQInbl)
[Here's what I ended up doing with the contours](http://i.imgur.com/u6Ggb.png)
The `surf` function happens to use the same figure each time -- a good thing. When you close the figure, your loop goes on as normal and creates a new figure as needed. Keep a hold of your figure handle, hFig = figure(); Replace the `true` in your loop condition to `ishandle(hFig)`. Here you go: [expandingSinus.m](http://pastebin.com/G6TgWtyw) ([diff](http://pastebin.com/diff.php?i=G6TgWtyw)) 
Thanks!
skeeto already solved your first problem, but if you need to get little bit faster graph updating you can try to just update the surfs Z-coordinates: function expandingSinus() x = linspace(-10,10,100); y = x; [x,y] = meshgrid(x,y); r = sqrt(x.^2 + y.^2); delta = 0; hFig = figure; hsurf = rand; %Not a handle while ishandle(hFig) z = sin(r + delta); if ~ishandle(hsurf) %At first loop iteration we need to create surf object hsurf = surf(x,y,z); else %After surf object has been created, we only need to update it set(hsurf,'zdata',z); end delta = delta + 0.1; drawnow end end I could not measure any difference in speed, but this might be dependent on the OS and MATLAB version. Usually updating as shown above is faster, at least for lines and images.
Um... yeah ... Reddit doesnt like it's formatting. Idk how to fix this.
Remember that s = j\*w (where j = sqrt(-1) and w = freq in rad/sec). To get the response of the filter at a particular frequency w, substitute s = j*w in the transfer function. The result is a complex number. The magnitude of the response is the magnitude of the complex number.
Sounds like you are probably using up all of the laptop's real and swap memory. Try having Activity Monitor (under Applications -&gt; Utilities) up while you run your code. Switch it to the System Memory tab, and watch it (particularly the "Swap Used") portion. Try to improve the program's use of memory. You might be leaving unnecessary data in memory as you go, eventually filling it up. This is probably the best case scenario, since you can find these little leaks and make sure they get cleared up. If the code you are running has a high order of space complexity, though, it might be harder to improve. If all that doesn't help, then a desktop with a large amount of physical memory might be enough to push through it. Parallel is unlikely to help on a single machine, since you are, at best, going to *increase* the memory usage. If you can divide up the problem and distribute it to multiple machines such that each machine has to work a smaller problem (and use a smaller amount of memory), that might work.
Thanks a lot Lexarius. Increasing size of the program really chews into the "Swap Used". I'm going to google that and work out what I can do. Youve pretty much saved me from investing too much time in parallel computing. Unfortunately I'm teaching myself matlab and don't think I'm at a stage where I can make my programme more efficient. So I might see if uni can hook up some hardware.
Well first thing's first... &gt;x=input('Input a number between 0 and 9: '); disp (x); w=0; x=0; Right after you get 'x' you set it back to 0. You will want to name your input variable something else. Make sure you change your switch value too. For example I changed it to, clear all; clc; value=input('Input a number between 0 and 9: '); disp (value); w=0; x=0; y=0; z=0; a=0; b=0;c=0; d=0; e=0; f=0; g=0; if (value&gt;9) error('Wrong input'); end if (value&lt;0) error('Wrong input'); end switch value Afterwards, your case statements are using characters even though your input is a number. &gt;case '1' This should be: case 1 Change those and your code works.
Bad habit of mine: use x as the input. And then I went and used the variable names my professor assigned. I bet this fixes it, which will make I and my friend really embarrassed as neither of us caught it.
It works! Thanks
You have a time invariant linear system. The input/output relationship is: y(t) = x(t) C h(t) where h(t) is the impulse response of your filter, and x(t) is the input. the C is used to represent convolution. Taking the Fourier transform, we obtain: Y(f) = X(f) * H(F). Thus, in the frequency domain, the filter just multiplies the input. Simply put, the bode plot is a plot of the gain and phase of the filter as a function of frequency. The magnitude of the bode plot at frequency f is the gain that this frequency will experience when going to the output.
This sounds like a simple matrix transformation project. Each transformation that he wants can be represented as a square matrix, whose elements you can find in any beginner linear algebra textbook. Just take each vector, multiply by the series of square transformation matricies, then concatenate (I'd help you out more, but I'm at home for spring break so I don't have my linear algebra textbook right in front of me). Edit: Hope that helps!
That's what I was thinking/looking at. However, I can't seem to figure out how to enter the initial points. Can you point me in the direction of some solid tutorials? How are the ones in the sidebar? I'm at school and using reddit is fun...
Sorry, I don't know any good matlab tutorials. I go to UC Berkeley and we have an entire class to teach us matlab...
Mathworks documentation is very good and all of it is available on the web. Try starting [here](http://www.mathworks.com/help/techdoc/learn_matlab/bqr_2pl.html) and there's a page of tutorials [here](http://www.mathworks.com/academia/student_center/tutorials/launchpad.html). For command-line user input, if you're trying to keep it simple, see the [input](http://www.mathworks.com/help/techdoc/ref/input.html) command.
Open MATLAB and type the following: doc input doc cat doc surf Create an m-file and it should be relatively easy, people here will be more willing to provide help if you show some work.
one would think there would be an entire class for this. or at least a professor that knew the software...or one of his TAs could answer some questions....
cool! i'll give these a whirl tonight. i have some stuff, but i know that its worthless (and to be honest, a bit embarassing). I'll try and get some work posted asap though. thank you
Wow this is late, but the bode() command can be given a frequency to evaluate say Mag = bode(Sys,w) where w is the frequency (in rad/sec IIRC).
I encountered something similar in my last assignment for an image processing course. Since I don't think Matlab does 3D FFTs, I strip out "slices" and did 2D FFTs of that. Let me know if you figure something out.
I found out that MATLAB's fftshift does in indeed work with 3d matrices. In fact, I think it works with any n dim matrix. 
Simplest thing to do: use fmincon (or similar) to optimize for a function `[; f(x,y,z) = \frac{1}{s^{3/2}|\mbox{det}C|}e^{-\frac{1}{2}(x - u)^TC^{-1}(x-u)} ;]` for C (3x3 matrix) and u (3x1 vector): so 12 parameters total. You can probably find C by PCA (principal components are uncorrelated) and then just optimize for u. Edit: Thank you Mr. Smartypants for the correction.
Are you trying to discover where the blobs are in your data, or do you know which points correspond to which blob, and you just need to calculate the centroids of each blob individually? In the first case, you need to learn what's called "clustering." (K-Means is the simplest algorithm, then maybe gaussian mixture models) In the second case, it sounds like you just want the weighted mean. (the centroid of the set of points, using the intensities as importance weights) if your data are in an Nx4 dimensional matrix X, where each row is a point `(x,y,z,I)`, then you could just use this to get the weighted mean: sum(X(:,1:3) .* repmat(X(:,4),1,3))/sum(X(:,4)) 
Principal components are not necessarily independent. They are uncorrelated. 
Just try a regular gain block, and within the properties of that block (by double clicking) there should be an option for Matrix Mulitplication. This is tested on matlab 2009b.
You are correct. My bad, ICA finds independent components. Slip of the tongue :P Thanks.
As others have already suggested, Gaussian mixture models and other clustering (K-means) methods are used for this kind of thing. In Matlab you can use 'kmeans' and 'gmdistribution.fit' to get either of these. Problem is, you will need to know the number of the blobs. For GMM you could try to use [Akaike Information Criterion](http://en.wikipedia.org/wiki/Akaike_information_criterion) or [Bayes Information Criterion](http://en.wikipedia.org/wiki/Bayesian_information_criterion). These can be easily computed from GMM using 'gmdistribution.aic' or 'gmdistribution.bic'. For both of these you should train many GMMs with varying number of components (blobs), calculate AIC/BIC and then choose model (number of blobs) which has best fit according to AIC/BIC. If you already know which points belong to which GMM component (for example after using K-means), you don't need any kind of optimization as you can calculate the distribution parameters (mean, variance) directly from the data.
Back in graduate school, I used [Professor Bouman's Cluster Program](http://web.ics.purdue.edu/~wong17/gaussmix/gaussmix.html). It has a [manual](https://engineering.purdue.edu/~bouman/software/cluster/manual.pdf) which explains the algorithm and the theory. I hope this helps.
I did all this work for a single 2D image (found the blobs, then the centroids). Then I found out that I was supposed to compile all the 2D images into 3D space before doing it. So I haven't done either. I think if I find the blobs, then work with a smaller set of data, it might be easier. I'm going to need to return the maximum intensity, and the standard deviation around it.
"spy" is a good one too. It's a legitimate plot that has a fun default view...
 avg = mean(myarray(:,:,1:10), 3); myarray = myarray - repmat(avg, [1 1 310]); That should do the trick. If not, fiddle around a bit with mean and repmat until you get the dimensions right.
Another way to do this (sometimes more efficient with memory since you're not allocating the big array with repmat): A = rand(4, 4, 320); B = mean(A(:,:,1:10), 3); C = bsxfun(@minus, A(:,:,11:end), B); 
Neat. I've been looking for something like bsxfun.
No prob. I've seen the same mistake in published papers.
&gt; I think if I find the blobs... Again, do you mean *manually*, or are you looking for an automatic way to do this part? &gt; the standard deviation around it So, it sounds like you're assuming a spherical distribution, as opposed to the general case, ellipsoidal, which, as xpriori says, requires a covariance matrix describing the orientation &amp; eccentricities. 
Specifically, I'm dealing with the reflections from a thin film crystal (x-ray diffraction). Each 2D projection is collected while the sample is moving through a half degree shift. So some of the points blur and make ellipses, etc. To me, this is a complicated problem and I'm not sure which is the most efficient way to approach it. My guess (and the reason for this post) was to throw the projections back into 3D, then do a reflection finding algorithm and find the intensity centroid of each.
Relational operators like greater than, less than, etc will return a 0 if false and 1 if true. I've never tried it on a vector like this code is doing, but it appears to be evaluating the relationship between E0 (a single random number) and each element of the vector ppi0 within the range in parentheses. By multiplying these two relational operations together, it's functioning as an AND. The dot is before the multiplication symbol to specify element by element multiplication of the vectors rather than a dot product. The output s0 should be a vector of length n that is 1 when ppi0(n)&lt;E0&lt;=ppi0(n+1) and 0 otherwise. Edit: just noticed the apostrophe at the end. That just reorients the vector. So the output will be a column vector instead of a row vector. 
s0 just gives you a column vector with a 1 in the state you begin with, and 0's in all other states. The expression (E0&lt;=ppi0(2:n+1) returns a vector of logical values evaluated for each of the entries of the vector ppi0(2:n+1). The expression (E0&gt;ppi0(1:n)) work likewise. Then you multiply them elementwise with each other, and you receive a 1 (TRUE) exactly at the one state, according to the where the number E0 falls.
Thanks! I figured out that the corresponding function in R is "ifelse".
[GNU Octave](http://www.gnu.org/software/octave/) is your best bet. It offers most of the functionality and almost exactly the same syntax as MATLAB. Some of the graphical elements aren't as refined, but it's a decent alternative.
Thanks!
Depending on your needs, and whether you REQUIRE matlab compatability, you might also check out [The R Project for Statistical Computing](http://www.r-project.org/)
I don't require matlab, just need a good tool for engineering classes. And I am familiar with the syntax in matlab. What advantages does The R project have? (Side Note: If I am too lazy to look this answer up on my own, you are certainly not obligated to provide an answer. Thanks for the input!)
I would stay away from R unless you're doing statistics - R is specifically for that. If you want to program in more of a "real" language than MATLAB/Octave you might check out Python's Numpy/Scipy, and if you need to write really fast code you could use C's GSL.
Thanks, works on 2010b. 
If you are not willing to take the time to even click the link I provided, then go with octave, since it requires of you neither new learning nor cash. Enjoy college. 
I clicked the link, just didn't bother reading into it too far. It was one of those kinds of nights.
Check out these functions: http://www.mathworks.com/matlabcentral/fileexchange/22995-min2-max2 They should do the trick.
Aren't these just for a 2-d array?
to find the index of the max in a 3d array do: [~, ind] = max(array(:)); [x_ind,y_ind,z_ind] = ind2sub(size(array),ind) if you simply want the maximum value you can just do max(array(:)) 
this answer is the most elegant solution
I &lt;3 you, people_are_robots.
First, you need to transform into an ODE on the form dy/dr = f(y,r) Do you know how to do that? It's not really a MATLAB thing, but it needs to be done, because MATLAB's ODE solvers can only solve first-order ODEs.
No. I do not know how to do that. The only variable in the equation is "r". I read something about using ODE45, a matlab function.
I saw, that you mean for "y" to be "T" sorry about that.
You first need to rewrite it as a system of first order ODEs [Matlab Higher Order ODEs](http://www.mathworks.com/help/techdoc/math/f1-662913.html#brfg9jq-1)
No, I don't. y is a different variable than T. If it were T, we'd be stuck with the 2nd order ODE you have, and that's no good. We'll get to using ode45 eventually, but first we need an ODE to use it on. That ODE has to be 1st order, and your ODE is 2nd order. Let's fix that. Let y = (a, b) = (T, T') y is a vector. T is your original function and T' is shorthand for dT/dr. Now, what is y'? y' = (T', T'') = (b, b') How does this help us? Well, we already know what T'' is. T'' = (A/k)(1-(r/R)^2 ) - (1/r)*T' That is your original ODE solved for T''. If we use my a and b, we can write this as: b' = (A/k)(1-(r/R)^2 ) - (1/r)*b Let's call this f(b,r). Putting this back into our expression for y', we have: y' = (T', T'') = (b, f(b,r)) See, now we have a 1st order ODE, but the solution function y is a vector instead of a number, like T. Our strategy now will be to solve for y using ode45, and then ignoring all the b's (because we don't care what T' is, we only want to know T). Now, MATLAB help says we need to call ode45 like this: [R,Y] = ode45(odefun, tspan, y0); Here, odefun is our ODE function, so odefun = @(t,y) [y(2); 175*(1-t^2) - (1/t)*y(2)]; (I renamed r to t.) tspan is a vector with the range of t, so, say tspan = [0 10]; Or whatever. Finally, we need to set our initial condition y0 = [???; 0]; You told me dT/dr at zero is zero, but I have no idea what T is. So at least this you should do yourself. So then, when you run ode45, you should after a while get back a matrix Y which is 2xN of solution values and a vector R which is 1xN with times (r-values). Take the top slice of Y to get your T (the bottom slice is of course T'). T = Y(1,:); I think that should be approximately correct. Next time, pay attention in class and don't come here for homework help.
[The course I teach on this.](http://www.science.mcmaster.ca/medphys/courses/158-med-phys-3r03.html) See the lecture notes on ODEs and the corresponding tutorial. There's a specific example on how to use ODE45. Good luck!
How do you know markgringo wasn't paying attention in class? What's wrong with using matlab for homework help? 
Thank you for taking the time to write this even though I didn't deserve it.
I don't really. I'm just guessing. I was assuming this is a numerics class and that Matlab IS the homework. Converting an ODE into a 1st order ODE is a typical boilerplate that must surely have been covered, or the Prof isn't doing his job.
I think you're using the function wrong - try volume = quad(@(r) circle(R,r),(6-sqrt....
In MATLAB, these are the same thing (a string is just a row vector of characters. Try this: f1 = ['a','b','c','d']; f2 = 'abcd'; whos &gt; Name Size Bytes Class Attributes &gt; &gt; f1 1x4 8 char &gt; f2 1x4 8 char strcmp(f1,f2) &gt; ans = &gt; &gt; 1
Here's what I did and it worked (I could open the file in MS Word after writing): fid = fopen('blah.doc'); data = fread(fid,'*uint8'); fclose(fid); fid = fopen('xxx.doc','w') fwrite(fid, data, '*uint8'); fclose(fid); I think that your problem might have been just with the data type. 
 &gt;&gt; doc prod
I don't know of anything built in, but you could use the text command to place any character at a specified location: x = 0:10; y = sin(x); plot(x,y) hold on for n = 1:11 text(x(n), y(n), num2str(n)) end
For #1, try the EVAL command. For #2, I think you want the ISEMPTY command. A = cell(2,2); % make an empty cell array isempty(A{1,1}) % note the {} instead of (). You're checking the CONTENTS of the cell if it's empty.
thanks. i just had to make a small modification: text(x(n), y(n),num2str(n),'HorizontalAlignment','Center')
In addition to agentq512's note about using '*uint8' instead of just 'uint8', instead of these: fid = fopen('testdata.doc'); fid2 = fopen('newfile.doc','wt+'); You should probably use these: fid = fopen('testdata.doc', 'rb'); fid2 = fopen('newfile.doc', 'wb'); Use "b" for binary data instead of "t" for text data, particularly on Windows. 
Ah. I didn't know that. Thank you!
Thank you much. For my reference, what difference does the '*' make exactly?
Yeah, you have to check that regularly because reddit's spam filter is really, really terrible. I see one in there almost once per week over in r/civ, and it has yet to catch a legitimate piece of spam. 
&gt;(C is important for speed, but MATLAB makes displaying output and debugging much easier) If that is your main advantage in using MATLAB over C, you are not using MATLAB properly. EDIT: Also possible you are not coding in C as easily as you could be.
The '*' means "read it out of the file as uint8 and store it in the MATLAB variable as uint8." It's in the documentation for fread.
I've never used it myself but I've seen it being showed off at a product demo a few years ago (some people at work wanted to do exactly what you're suggesting). I think my impression of it was that for simple tasks it works great and produces fairly readable C code (eventually, after playing with options) but for more complex tasks you'd be far better off coding the thing yourself. It really is no match for a human programmer. Also, you're restricted to a subset of the matlab language and there are plenty of good C/C++ libraries out there for matrix operations etc. If you really want to stick with matlab, using mex is probably a better option for speed.
The OP was inquiring about the newly-released [MATLAB Coder](http://www.mathworks.com/products/matlab-coder/). My understanding is that it's progressed quite far from most people's impressions from past experience.
Anyone help me out here? I'm a total matlab noob. 
Here you go. You don't get to the 10% Doppler shift in this case since your speed is so slow ... f_c = 1950*10^6; c = 3*10^8; lambda = f_c/c; v = (0:1:100)'; %100 meters per second theta = 0:1:180; %degrees f_d = (v./lambda)*cosd(theta); imagesc(theta,v,f_d/f_c) colorbar xlabel('Angle [deg]') ylabel('Speed [m/s]')
Ahhhh, so the problem was I wasn't, uh, shifting (translating?) my velocity matrix, and was using the wrong cos function? And yes, I realized after posting we never exceed the max. Thanks! 
I like [python](http://python.org) with [numpy](http://numpy.scipy.org/) and [matplotlib](http://numpy.scipy.org/). Python is a general-purpose programming language that can do much more than matlab. With numpy, it can work just like matlab.
The other issue was in the dimensions of your velocity and angle vectors. You needed to make one a column and one a row. I made velocity a column by adding the transpose operator ' to the end. Then in the calculation of f_d you can use the matrix multiplication * instead of the element multiplication .* This gives you a matrix output.
Awesome, thank you for the explanation! 
I got this for question 1, I'm moving on to question 2 now. I still don't know how to find the frequencies. load tone.dat f1=tone(:,1); %Sampled Data Fs=8192; %Samples/sec Ts=1/Fs; %Time increment per sample t=(0:n-1)/Fs; %Time range for data n=length(f1); %Number of samples figure(1) plot(t,f1) %Plotting
I think I got it, after all. Guess I just needed to find a good tutorial :)
To view, you can use this: A = rand(100, 100, 1, 400); % I just made some fake data hf = figure; hi = montage(A); hpanel = imscrollpanel(hf, hi); hbox = immagbox(hf, hi); To save, I think this should do the trick: imwrite(get(hi,'CData'), 'blah.tif')
thanks heaps, worked like a charm edit: the picture it saves is just black for some reason though :s
IMSHOW will only scale down the display, not the actually data, so you could also do: imshow (my_large_image) imsave;
im using the montage command not imshow
You need to scale your data if you want to use imwrite. Scale it to [0 255] and use uint8 to be sure that it will work. If you want to have figures boarders (title, axes, colorbar etc), you can use 'print' and you don't need to use any color scaling (as current colormap of the figure is used). For example (you can modify the DPI by changing -r300 to something else): print -r300 -dpng myimg.png
Are you familiar with linearizing a system of equations? You will need to define some vector Y = [Y1, Y2] and the corresponding vector on the right side. Once you have done this you should be able to just manipulate the system of equations, as vectors, like you would the scalars of a single equation.
Thanks for the suggestion, I'll give it a try this evening.
prod
sorry i wasn't clear. imshow is the display routine that montage uses. anyway, yea, imwrite is what you want. the imsave command is just another way to call imwrite. 
is your image grayscale or RGB? If it's grayscale what's the data type and the min and max value in the image?
Are you looking for something like dec2hex but for base 3? If so, couldn't you just write your own?
I think I will have to write my own indeed =(. Not quite like dec2hex I don't think (will look into this as I havent used it before), but ultimately I want a matrix (or counter) that has 3^6 rows of all the possible combinations of the three base values, so that I can read in my data using that as initial start points. e.g. M = [0 0 0 0 0 1; 0 0 0 0 1 0; 0 0 0 0 1 -1; ...etc (might be the wrong order, I cant count in ternary lol) I could just make a matrix with 729 rows, but this seems silly to me. I have found some things about changing the base, so I might look into that and see if I can set it as 3. ' Otherwise, any tips on where I can best start with creating a base converter would be great - help topics/ links are welcome.. I don't mind doing it all myself, I'm just not sure how! (though I have a fairly good understanding of matlab, I'm still finding my way a bit and things aren't always obvious straight away to me)
I make no promises that this works (have not tested it), but somehting along these lines: % The number we are converting to base-3. x = 123131; % How many places do we need in the base-3 number. N = floor( log(x) / log(3) ); % Vector of base-3 coefficients. M = zeros( [ 1 N ] ); cnt = 1; for n = N : -1 : 0 M(cnt) = floor( x / 3^n ); x = x - M(cnt) * 3^n; cnt = cnt + 1; end All you have to do is represent the number as polynomial in the number 3. x = a * 3^0 + b * 3^1 + c * 3^2 + ..... HTH
It does work yes, but with varying vector length hehe, so I may try to ammend it a bit for my own use. In any case I have something I can work with now... THANK YOU!! :) I was trying to do something similar based on some forum discussions i found as follows: for x = 1:729 b = 3; b1 = floor(b*x); %(since b*x = b1+b2/b+b3/b2... and b2/b+b3/b2... is less than 1) b2 = floor(b^2*x - b*b1); %(since b2*x = b*b1 + b2 + b3/b + b4/b2+ ... and b3/b + b4/b2+ ... is less than 1) b3 = floor(b^3*x - b^2*b1 - b*b2); b4 = floor(b^4*x - b^3*b1 - b^2*b2 - b*b3); b5 = floor(b^5*x - b^4*b1 - b^3*b2 - b^2*b3 - b*b4); b6 = floor(b^6*x - b^5*b1 - b^4*b2 - b^3*b3 - b^2*b4 - b*b5); X = [b1 b2 b3 b4 b5 b6] end but that wasn't working! (wrong formula in the end as b1 just goes up and up and all the other values never seem to change, which makes sense is b1 is always b*x :/) 
What about this? t=double(dec2base(0:(3^6-1),3))-48;
bah, I just spent my whole afternoon coming up with an ammended version of oneplussed's code to get this: function [DST] = TernaryCounter(); % The number we are converting to base-3. (1 to 279) for y = 1:729; % loop creates an empty matrix with rows for each step in counting. % Based on the previously completed loop R = y-1; if R == 0 % i.e. first loop (there is no M value yet) DST = zeros([729 6]); %create the zeros matrix else DST(R,:) = M; % use the M found in the previous loop and place it into matrix DST end % How many places do we need in the base-3 number. %N = floor( log(x) / log(3) ); N = 6; %even when less digits are required, 6 digit length is desired. % Vector of base-3 coefficients. M = zeros( [ 1 N ] ); cnt = 1; x = y; %because x changes in the following loop we must keep it seperate from the global counter for n = N-1 : -1 : 0 M(cnt) = floor( x / 3^n ); x = x - M(cnt) * 3^n; cnt = cnt + 1; end M end end I feel slight frustration now seeing how easy you make it look! Very elegant solutions though, I like. thank you!
Hi, I'm not an expert either, so this solution might be a little hacky, but it should also work. Try first plotting your 4 series separately with something like: plot(1:3,GroupOneMeans) hold on plot(4:6,GroupTwoMeans) etc for all your groups. Then do errorbar(means, confidenceIntervals) And you'll get your error bars. Hope that works/helps! 
Thanks! I worked it out by doing something similar: errorbar([group1means nan nan nan], [group1CIs nan nan nan]) hold on errorbar([nan group2means nan nan], [nan group2CIs nan nan]) errorbar([nan nan group3means nan], [nan nan group3CIs nan]) etc. Pretty simple really!
Nice!
To answer your questions: &gt;How do is store the resulting values of theta and tension in a &gt;matrix &gt;consisting of two columns? Save your vars theta and tension into two different vars like so: while loop: counter=counter+1; varfortension(counter)=tension; varfortheta(counter)=theta; &gt;And, how to I then plot the results from this matrix (tension vs. &gt;theta). plot(theta,tension); These aren't the best ways to do things necessarily but are very straight forward since you seem to be just starting out. 
 while i = 1:size(theta) value(i,1) = theta; value(i,2) = tension; end plot(value(:,1), value(:,2)) Note: check for small syntax errors.
Thanks a ton you guys, I'll go try them out.
I don't know what range of theta you want or what your function is, but here are 3 ways to do this: %% simple way % define theta theta = (0:0.000001:5)'; % transposed to make it a column % preallocate tension for speed tension = zeros(size(theta)); for n = 1:size(theta, 1) % size(theta,1) gives # of rows tension(n) = sin(theta(n)*2*pi); % insert your function for tension here % mine is just sin(theta*pi) for fun end plot(theta, tension, 'k-') % plot tension vs theta as a black line %% If you need two-column data, you can do this: % define theta data(:,1) = (0:0.000001:5)'; % transposed to make it a column % preallocate tension for speed data(:,2) = zeros(size(data(:,1))); for n = 1:size(data, 1) % size(theta,1) gives # of rows data(n,2) = sin(data(n,1)*2*pi); % insert your function for tension here % mine is just sin(theta*pi) for fun end plot(data(:,1), data(:,2), 'k-') % plot tension vs theta as a black line %% Another way (if tension is a straightforward function of theta) data(:,1) = (0:0.000001:5)'; % transposed to make it a column data(:,2) = sin(data(:,1)*2*pi); % insert your function for tension here % mine is just sin(theta*pi) for fun plot(data(:,1), data(:,2), 'k-')
Wow, this is amazingly thorough. Thanks a lot! I had completely forgotten some of this syntax.
Why would you think that people wouldn't have MATLAB in /r/matlab ?
sorry it was actually a repost from the learnprogramming sub reddit. I forgot to take that part out. I know it sounds dumb. lol.
Download link doesnt work for me. Would love to check that out. Hell, I cant even imagine how that idea came up. Doing a game in matlab, great :D
Clear a couple of things up for me: What is SOR ? And is this the Laplace Equation or the Heat Equation? The comments you wrote down lead to to believe it is the Laplace Equation (for steady-state heat, I am assuming). &gt; Can someone explain the code u(i,N+1) = 1 I would guess that this is part of a loop, correct? Where you loop over every *i* at y = N+1 and rewrite 1 as the correct answer. Is that what you mean? If that is what you are trying to write in your code, I would rewrite it as a vector operation: u(:,N+1) = 1 
heres a diff link sorry http://www.mediafire.com/?r2did203a1ozki3
[SOR = successive over relaxation](http://en.wikipedia.org/wiki/Successive_over-relaxation) (a numerical method for Ax = b) I'm guessing this is your program: To make u(x=0,y) = 1, just change the line u(i,N+1) = 1; to u(i,1) = 1; To make u(x,y=0) = 1, just change u(i,N+1) = 1; to u(1,i) = 0. function laplace3(N) %laplace3(N) solves Laplace's equation u_xx + u_yy = 0 on the unit square % with (N+1)x(N+1) gridpoints i=1,...,N+1 &amp; j=1,...,N+1 % BCs are Dirichlet with u=0 on boundary except u(x=1,y)=1 % Uses SOR iteration tic h = 1/N; % dx=dy=h i = (1:N+1); x = (i-1)/N; y = (i-1)/N; u = zeros(N+1,N+1); u(i,N+1) = 1; % nonzero BC % calculate optimal omega for SOR mu = cos(pi*h); % Jacobi spectral radius omega = 2*(1-sqrt(1-mu^2))/mu^2 sum = 0; for i = 2:N for j = 2:N residual = (-4*u(i,j)+u(i+1,j)+u(i-1,j)+u(i,j+1)+u(i,j-1)); sum = sum+abs(residual); end end normresidual0 = sum/(N-1)^2; normresidual = Inf; iter = 0; while normresidual &gt; 10^-5*h^2*normresidual0 iter = iter + 1; sum = 0; for i = 2:N for j = 2:N residual = (-4*u(i,j)+u(i+1,j)+u(i-1,j)+u(i,j+1)+u(i,j-1)); sum = sum+abs(residual); u(i,j) = u(i,j)+omega*residual/4; end end normresidual = sum/(N-1)^2; end iter toc figure surf(x,y,u) shading flat xlabel('x','FontSize',16); ylabel('y','FontSize',16); zlabel('u','FontSize',16) end 
Are beta, tau and sigma numbers or functions? If they are just numbers, you can do this by solving a linear system. If not, you need a function for solving a nonlinear equation.
Numbers. I solved it by linear equation by hand but I don't understand how to implement that to Matlab so it works it out also.
http://www.math.siu.edu/matlab/tutorial3.pdf Chapter 3.3.
I've read the chapter a few times - But I don't see how I can make a matrix of that form with the three equations I have. Sorry for asking you lots of questions about this, we have basically been told to learn Matlab for ourselves and do coursework over Easter for it without any guidance or book suggestions.
Hmm... sorry. I thought it was a linear equation. Instead it's quadratic. So look up fsolve. In matlab: help fsolve
For clarification on what I'm stuck on, I'm trying to make a Gauss matrix - but I don't know how to deal when the variable multiply by themselves. For example on the second equation we have z*x, and on the third row we have x*y. 
I'm a bit confused - so is the problem with quadprog that you can't write both equality and inequality? If so you can write the equality constraint Qx=0 as Qx&gt;=0 and Qx&lt;=0. If you're interested in a solid sparse *nonlinear* programming toolbox, you can check out SNOPT http://ccom.ucsd.edu/~peg/Software.html which you can use for free as a student on limited problems (limited to 300 variables 300 constraints). I've used it before and it worked well for me. 
a = sum((xmu / sig) .* xmu,2) 
The problem is that quadprog is not able to handle both equality constraints and one-sided inequality constraints like Ax &lt;= b at the same time while using sparse matrix formats. Dense formats I can't use. The matrices come from finite element discretizations and are of sizes up to 30,000x30,000, maybe more.
Thanks! That's perfect! I'm not sure how it works though thanks to my limited knowledge of matrices...
Actually no need, Matlab does this for loop fast enough. Although I am curious how it's done with vectorization. If only Matlab had plus equal operation. That would make it so simple: theta(quantize(:)) += .001; 
Any reason why this won't work? n = [ 1 : numbins^3 ]; theta(quantize(n)) = theta(quantize(n))+.001; Edit: Though probably better to explicitly store the intermediate result rather than rely on matlab optimizing away the second call: n = quantize( [ 1 : numbins^3 ] ); theta(n) = theta(n)+.001; 
You can just write that as theta(quantize) = theta(quantize) + .001
I think the below variants of theta(quantize) = theta(quantize) + .001 won't work. I would do: h = histc(quantize,1:length(theta)) theta = theta + 0.001*h; h holds the counts of each time you would have added .001 in your above for loop. 
Matlab has some functionality for this in the statistics toolbox. If you have it look at 'pdist', 'squareform' etc. 
The new HDF5 interface looks to be not entirely brain dead, which is definitely an improvement. 
I wonder if the only reliable way to stop a runaway task is still to just kill the MATLAB process and lose your workspace...
You could also try to enable parallelization. This might also help out some.
It appears as though the 20K cap on command history length has been removed. I can't find any reference to this in the official documentation, but I'm at 59K right now. Finally, more than a weeks worth of history!
Mind pointing me in the direction of this good tutorial? =]
http://www.mathworks.com/help/techdoc/math/brentm1-1.html
Thank you! What will it take for Mathworks to implement a *real* way to break code that is running?
Ctrl+C works for me in Linux, just like it does on the command line. 
Just tried this on Ubuntu, and it didn't stop it (also tried with -nojvm &amp; -nodesktop options (separately)): \&gt; a = rand (10000) \&gt; [b,c] = eig(a); Ctrl+C Ctrl+C Ctrl+C Ctrl+C ... I think Ctrl+C only works if Matlab prints stuff out while it's running.
Magic! No, not really. You just have to keep track of all the indices, and realize that (vector x matrix x vector) is the same as ( (vector x matrix) dot vector), and a dot product is the sum( .* ) part.
Some great stuff on http://undocumentedmatlab.com/ and http://matlabdatamining.blogspot.com/
This is really really cool. I've never gotten a chance to play around with all of the toolboxes Matlab has to offer...but the image processing toolbox seems like one I should invest time into.
Yeah, the sheer amount of ...*stuff* that is included in Matlab is mind-boggling. I've used it a fair bit for school (I'm in an applied math program), and haven't found anything it can't do.
You could have just tried this in matlab and answered your own question in less time than it took to submit this post. 
I've tried rref([P I]), but that gives me an error. I suppose if I assign I to the identity matrix manually and then do it, it might work. I didn't think of that.
Just tried it again and it does work for me in Ubuntu, though I have to click within the Command Window first.
[original image](http://i.imgur.com/BfbFS.jpg), and [another example](http://i.imgur.com/WuGc2.png)
you don't like mine in the sidebar? :(
Relative depth seems subjective, but in this case i'd recommend trying out a watershed algorithm. There are some useful downloadable functions, or you could download ImageJ, which has the functionality built right in.
What errors are you getting? 
Thank you so much. If you happen to live in Austin I will buy you a drink tomorrow.
Nah, Boston, but you're welcome all the same.
I'm pretty proud of this, it's my final project for my freshmen Matlab course. It's a text recognition program that generates both the image of the right of the screen (showing how my program finds each letter) and outputs the text that you see in the command window. My only regret is that the kerning has to be high enough between letters so that they don't overlap. Kind of felt like cheating.
mind posting the code? Id be interested to take a look.
I turn it in next Wednesday, but afterwards I'll send you the code. Don't want to get in trouble with any possible plagiarism claims.
*(Not 'kerning,' but character spacing or 'tracking.' Kerning usually refers to reducing the spacing between the initial letter and the following letter. Like a capital 'T' extending over the next lowercase letter. Concepts very easy to confuse.)* That's really awesome, and especially as a freshman year project?! How robust is it? If you add AWGN (or any random noise) how much does this affect the decoding?
Sounds good. Looking forward to that.
Unfortunately not very robust, this was an ambitious project to undertake in the time we had to complete so I talked with my professor and she said it was ok to limit the program to one font/no noise. Going past that would take more time that I had. I can sort of see how it would be done but it would be pretty difficult. Do you have any experience in OCR or just curious?
Would you mind posting list of objectives/ assignment list? I too finished my freshmen year of engineering, this looks fun and I would like to give it a go.
Not quite sure what you're asking for, like a list of how I went about doing this? The assignment was very open ended, basically it was "do something difficult with Matlab" so I started with an image of text and went from there. Never really had an assignment list to work with... I feel like I'm completely misinterpreting your question, sorry.
Not sure what you mean by depth map, but you could just map the brightness of a pixel to depth.
I did phrase it poorly, but I was asking for an "assignment list." I assumed you had one simply because my professor did (a poor assumption).
Honest question, in function keyhandler(src,evnt) what does "src" do? I notice that the function it broken on removal.
not totally sure, but would a transfer function block work?
nah. the TransFunc blocks only lets me do rational powers on the integrals. you input coefficients in the appropriate order, but have no control over powers. input = [3 0 0 1 ] transfer function = 3s^3 + 0s^2 + 0s^1 + 1 = 3s^3 + 1
Not gonna be any help, but the usual trick of defining: s = tf('s'); Which lets you define transfer functions in terms of s directly, ie: transfer function = s^2 + 3*s + 5 Will also fail for fractional powers. I came up against this last week for the very same problem, and couldn't see a way around it- but that's not to say it isn't possible.
I was really just more curious than anything. I work in a "Signal Processing" group, but am more in the communications side of things. I haven't done OCR, specifically, but have done a lot of 2D signal detection. Its definitely a hard area, and I'd think especially so, if you had to deal with unknown fonts and unknown rotation.
What's the error you're getting with XML_toolbox? It couldn't possibly be that bad...
http://www.mediafire.com/?5ddai8dk164y2qv, you even get my boring 5 page paper about it. Enjoy.
way to follow through!
Ha, no problem.
Cocoa!!!!!!!!!!!
This stuff is awesome, I have some friends who were working on a similar project that solves mazes using a webcam. 
cumsum might be of some help
Or cumtrapz
One option is to save the curve to the workspace and make a new plot. That's been the easier method for me. 
First, to get dx/dt you use diff(x)./diff(t) (if your sampling rate is fixed just divide by that). Then you can use cumtrapz(t,diff(x)./diff(t)) after you've taken care of the outliers. 
Tried it but I'm not sure whether I'm doing it correctly. x = rand(1, 50) dxdt = diff(x)./diff(t); plot(t, x) hold on plot(t(1:length(dxdt)), dxdt, 'g') xi = cumtrapz(t(1:length(dxdt)), dxdt); plot(t(1:length(xi)), xi, 'r') and http://i.imgur.com/fkCJF.jpg How come I'm not able to recover x ? Is this a limit of numerical integration? 
Yah this is what I would recommend import it to workspace and use the regular matlab plot commands to format it the way you like.
You'll need to shift the integration manually, i.e. xi=xi+x(1), to get them to line up. If you want them to line up exactly then use cumsum(xi) (and shift since you'll lose a data point with the diff operation) since cumtrapz will introduce some averaging since it is a two point technique. 
Are you sure you want to do that? That is 8^9 possible matrices.
Check out fminbnd -- it may be what you're looking for. http://www.mathworks.com/help/techdoc/ref/fminbnd.html
That's a lot of matrices. Its a problem with a simple loop solution. Not hard. However, you can use some of the built in sampling and permutation functions. 
Thanks, this is one variable only, but I might be able to use it
If I recall correctly (it was a long time ago), there aren't any built-in algos for multi-variable system of equations. I think there used to be an entry in the documentation that explained why, but I can't locate it right now. But anyhow, a bounded multivariable search is not recommended, and if you need it then you probably want to reconsider how you are approaching your problem.
I really like the DIPUM book, but it doesn't really have too much for video. You could start by reading the documentation on morphological operations with the image processing toolbox. Once you have a more specific idea of the questions you want to ask, the mathworks website is a actually pretty incredible for support.
fmincon is the most general, but there are others which may suit your problem
could you possibly give me some code as an example, I am almost completely lost when it comes to matlab, just a newbie.
I don't understand what you're trying to do exactly, or why you need that many matrices.
a hill cipher is an encryption technique that uses a 3x3 matrix to encode a column matrix. In order to crack the code I need to know that 3x3 matrix, but it could be anything. I need to have a code that generates and tests every possible matrix until I decode the message.
This sounds completely unreasonable. You're saying you need every possible 3x3 matrix which includes values from 1:8, as in?: X1: 1 1 1 1 1 1 1 1 1 X2: 1 1 1 1 1 1 1 1 2 X3: 1 1 1 1 1 1 1 2 1 XN-1: 8 8 8 8 8 8 8 8 7 XN: 8 8 8 8 8 8 8 8 8 
FYI fmincon is part of the Optimization Toolbox. I don't know if the OP is looking for algorithms in the core MATLAB. [This Page](http://www.mathworks.com/help/toolbox/optim/ug/brnoxzl.html) discusses bounded nonlinear algorithms. There are also many others (linear, binary integer, least squares, quadratic) in there. There is also the Global Optimization Toolbox which has things like genetic algorithm and simulated annealing.
yes. It is not remotely unreasonable, I have to do a brute force attack to break the encryption and that DOES require that I try every matrix. I could possibly do a statistical attack but that is even father out of my scope of knowledge. So far what I have is the follwing, but this does not cover every possible matrix: function A = question3(ciphertext); X = [0 0 ; 0 0] a = size(X) b = a(1,2) while X(b,b)~= 8 for i = 1:b for j = 1:b X(i,j) = X(i,j) + 1 end end end
Is this a homework problem or a take home final?
It's a homework problem.
If you are evaluating the goodness of fit of these multi-variable equations using a single cost function, then the value of your cost function can be used as the single variable, while fminbnd adjusts parameter values (for any number of variables), to minimize the cost function value. Let me know if this would work for your application, and I can try and share some examples.
It is part of an Matlab assignment. But also would be nice to know. 
nvm... I figured it out myself.
I'm not quite clear on what you want to do exactly. Where are you reading the two audio sources from? Why the splitter? I'll talk about what I think might be the solution instead :) Assuming you use wavread() for reading your songs, let's say you have song1 = wavread('song1.wav'); song2 = wavread('song2.wav'); song1 and song2 are -if I recall correctly- n-by-2 matrices if stereo, or just n-length (n-by-1) vectors. I think the problem arises because you're reading stereo songs. To make them mono is very simple: song1Mono = ( song1(:,1) + song1(:,2) ) / 2; and likewise for song2. Then, to get your final product, we first make sure we allocate enough space for the longer of the two songs if they're not equal length: songLength = max( [length(song1Mono) , length(song2Mono)] ); newSong = zeros(songLength,2); newSong(:,1) = song1Mono; newSong(:,2) = song2Mono; Now you can sound() newSong, or wavwrite() it, and it will have the mono-ized version of your two original songs in separate channels. Hope this helps.
Thank you. I think this may be helpful, but I was not specific enough. This is what I have done so far. I am trying to read/play music in real time. I am trying to read two songs at the same time. To do this I plugged two ipod nanos into a splitter. I set both of the of the ipods to mono. Then I am trying to break the two inputs apart and play them into headphones so that you can hear one song on one side and the other in the other earphone (i.e. song1= left ear, song2=right ear). I hope this is more clear.
I do not understand how you fminbnd will adjust multiple variables? My search space is between 0 and very large (1E8), and my variables regularly reaches both bounds (they are actually the Lagrange multipliers). At the moment I am using fminbnd as a line search, with the step size as the variable. I handle the bounds by projecting the line search onto the bounds, if necessary. It seems to work.
I do not have the optimization toolbox (sorry, for not making it clear i n the description). Thanks, anyway.
I'm not quite sure if you can do that kind of real-time processing with Matlab, and -I daresay- definitely not with a script. Maybe with Simulink, but I have no experience with it. Real-time audio requires scheduling and synchronization of audio buffers, and as far as I know Matlab just wasn't designed with those in mind. If you don't have to use Matlab, I'd suggest using Max/MSP, or its open-source alternative, PureData.
First off, your matrix looks weird, why are there 6 elements in the top? I don't generally solve equations in MATLAB, so I don't know if there is a function for this specifically. I'd just use trial and error: answer = []; for x = -5000:5000 A = new_x_value(x); if det(A) == 0 answer = [answer x]; if size(answer,2) == 4 answer break; end end end
&gt;SOLVED, thanks for nothing I don't think I understand this subreddit, myself. I constanly see people asking "why do you want to know that" or "it's easy" or some nonsense like that. I've also seen some rude people. I stick around to help people like you (sorry I wasn't here sooner).
Okey, will try and go about that way, thanks =)
use matrix row operations to convert it to an upper triangular matrix, and the determinant of the matrix is the product of the main diagonal. No need for matlab, just some simple addition/subtraction and then solving a polynomial = 0.
(I think the OP is using the non-American notation of 1,5 = 1.5) If you have the symbolic toolbox, you can do this: syms x; A = [1552.5-x 2362.5 1260 90;... 945 4725-x 180 1260;... 630 225 840-x 420;... 1890 3150 840 840-x]; d = det(A); Xsols = double(solve(d,x)) &gt;Xsols = &gt; &gt; 6288.2 &gt; 1511.4 &gt; 78.953 - 535.35i &gt; 78.953 + 535.35i 
Silly me, this is easier: B = [1552.5 2362.5 1260 90;... 945 4725 180 1260;... 630 225 840 420;... 1890 3150 840 840]; eig(B)
This is probably the best. It'd be good to link why those two are equivalent, so the OP learns what's up: http://en.wikipedia.org/wiki/Determinant#Relation_to_eigenvalues_and_trace
this won't work because 2 roots are imaginary and the other two aren't integers.
Check out [Steve Eddins' Blog](http://blogs.mathworks.com/steve/) (he's one of the coauthors of that book you listed).
Thanks! Checked it out briefly and seems quite interesting and perhaps even relevant (which is even better, hehe) =)
Yeah, I didn't realize that the commas were decimals. The variable along the diagonal makes this problem much easier.
I'd guess you're hitting some precision limit. You might try comparing the values you get with N=63 to the update for N=64 and seeing if you can see where the problem is occuring.
Sounds like you need this: http://www.mathworks.com/help/techdoc/ref/persistent.html
Thanks for the response. I'll have a read.
So I found the function fwrite which seems to work for my case, but now I'm wondering how do I tell fwrite which line to write the string into the file. Right now it just appends the string to the end of the file. Any ideas?
I'm a bit unclear with what you need. You have a function that uses a string as an input, then you want to insert the string into another string, or a text file? Or do you want to rename your function as the string? Or add in the string as code into the function? Long story short: what do you really want to do?
Thaks for your help. Yep, I was using 2362,5 instead of the american way 2362.5 sorry for that. anyhow, I used these numbers for further calculations and got some impossible results, so i'm yet looking for an error. Thanks alot anyways. First experience with reddit, cool that there are so many helpful people on internet.
Thanks for your help everyone! But do you guys know can I download a student version of matlab from somewhere? Didn't manage to get my hands on anything legal for stuents:P 
I found [this](http://www.mathworks.com/support/solutions/en/data/1-8IK11G/index.html?product=ML&amp;solution=1-8IK11G), though it's a few versions old. It may still hold, though: *"The ability to replace lines in the middle of an ASCII file is not available in MATLAB. To work around this issue, you can write a new file as you are reading in the original file line-by-line. When you reach the line you would like to change, write the new line to the new file. Then continue to copy the rest of the original file line-by-line to the new file."*
Im also not sure what you are trying to do. However, I might recommend using fread to get in the txt file and then insert the line using the data structure created with fread. To create the file just fwrite that structure back into whatever file you are trying to edit.
Maybe this is helpful, but only for 2D space. Above that, things get ugly: p1 = linspace(-5, 5, 1000); %range of first parameter p2 = p1; % range of second parameter [P1, P2] = meshgrid(p1, p2); %make a 2D grid of all (p1,p2) values % compute your constraints Constraint1 = P1 &lt; P2; Constraint2 = P1 &lt; 4; Constraint3 = P2 &gt; -3; Constraint4 = P2 &gt; P1.^2 - 3; figure % show the individual constraints colormap(gray(2)) subplot(2,2,1) contourf(P1, P2, Constraint1) subplot(2,2,2) contourf(P1, P2, Constraint2) subplot(2,2,3) contourf(P1, P2, Constraint3) subplot(2,2,4) contourf(P1, P2, Constraint4) figure % show all constraints ANDed together contourf(P1, P2, Constraint1&amp;Constraint2&amp;Constraint3&amp;Constraint4) colormap(gray(2))
Thank you! I think this is it. I was wondering if I would have to make an entire new file and write all the prior stuff into it.
What I'm trying to do is have the function add the string of text into the code of the function itself. Basically, say I have a function which has rules in it such that it takes in a noun and outputs the plural of the noun as a string. But in English there are plenty of nouns which don't behave normally when they become plural, so I was thinking of writing a function where if it takes in a novel noun that it can't determine a rule for, then it adds a new line of code which is specific to pluralizing that particular noun.
You need a persistent [map](http://www.mathworks.com/help/techdoc/matlab_prog/brqqo5e-1.html). (see my other post for persistent variables), with keyType 'char' and valueType 'char', mapping singular nouns to plural nouns. This table will only last as long as you leave matlab open (and don't run 'clear'), though. If you want it to last longer, you should write it to disk, and then re-load it in your function the first time it executes.
Use eval(string) Edit: sorry misunderstood what you were looking for.
Thanks, contourf helps a bit, but can't have subplots because of page limits and such. Now have bigger lines, normal contours for individual constraints and contourf for the combination, which looks a bit better.
Probably not the fastest, but the easiest to implement, and its fast enough for any reasonably sized image. Basically it converts each block to a entry in a cell array, then creates a logical checkerboard matrix, and runs a cellfun on the cell array using the checkerboard (and its logical inverse) as the indices. Then it just converts back to an rgb array. The two functions averagecell and blackcell just take a matrix and output the averaged and all black matrices respectively. (Remember to make sure they're uint8 matrices). w = size(x,1); h = size(x,2); wo = ones(1,w/6).*6; ho = ones(1,h/6).*6; xc = mat2cell(x,wo,ho,3); I = logical(eye(2)); xind = repmat(I,(size(xc,1)+mod(size(xc,1),2))/2,(size(xc,2)+mod(size(xc,2),2))/2); %tile the 2x2 indentity matrix to make a checkerboard xind = xind(1:size(xc,1),1:size(xc,2)); %crop to size of cell array xc(~xind) = cellfun(@averagecell,xc(~xind),'UniformOutput',false); xc(xind) = cellfun(@blackcell,xc(xind),'UniformOutput',false); xm = cell2mat(xc);
I'll give that a try when I get a chance, thanks
eigenvalues people...come on!
If you have a 700 by 700 grayscale image, this reshape(mean(im2col(img,[10 10],'distinct')),[70 70]) will make a 70 by 70 downsampled version that looks all pixelated. You can do this for RGB images by doing each channel separately, and for non-square images by padding via padarray().
blockproc! it's made for this! myimage = imread('pout.tif'); myfun = @(block_struct) mean2(block_struct.data) * ... ones(size(block_struct.data),class(block_struct.data)); result = blockproc(myimage,[6 6],myfun); blockproc is great!
Very nice, I figured there must be a function like that hiding somewhere! Your code doesn't quite work as described by the op though- mean2 averages out the color components too and makes it greyscale. Simple enough to fix though.
oh right RGB image. Yea you can just change the function handle, myfun. it can be any function that takes as input a "block struct" and outputs some other matrix. So for RGB data you could write a function like: function result = myfun(block_struct) result = zeros(size(block_struct.data),class(block_struct.data)); for i = 1:size(block_struct.data,3) result(:,:,i) = mean2(block_struct.data(:,:,i)) * ... ones(size(block_struct.data(:,:,i)),class(block_struct.data)); end end There's probably a more elegant way to do it, but that will work for RGB and grayscale images.
alternately you can supply a custom plotting function (which I ended up doing using the GA tool). The trickiest part is figuring out the appropriate number of inputs and outputs, however you can just steal their code and modify it. For example, if you are using the gaplotbestf to plot, type into the terminal: "type gaplotbestf" and copy the code into a new file, rename and proceed
1. Since you're talking about 3-dimensional coordinates, I assume you mean volume, not area. 2. Defining an volume based on points isn't an unambiguous task. Maybe if you posted the points, it'd give a clearer idea of what you're asking for.
Not really possible to say much without knowing how the points are connected. Or maybe there's some other detail missing from the question?
Maybe OP wants surface area. I agree that this sort of problem is non-trivial. From points, you would need to define planes which contain the object, then find their intersections, and then sum up all the triangles left over...or something like that. Just figuring out how to get bounding surfaces from points *alone* is a difficult problem!
yes! Thank you! Apologies for a the poorly worded question!! I'm actually looking for surface area as well as volume. my problem is that there isn't anything 'connecting' the points per-se, so the best I can do is interpolate lines between them. it's modeling a compliant surface, but i'm also interested in the volume between points. my data looks a bit like this (corresponding x,y,z): 331.56131 162.733835 366.932057 323.654056 160.701595 391.387412 292.484348 171.929614 368.325349 267.890858 173.505633 360.149556 268.663728 134.057544 456.322849 272.167443 151.528474 398.359227 280.700475 141.046837 447.330197 309.889171 157.930483 421.34544 272.218581 154.916288 369.279892 330.186413 180.466398 368.113121 331.937532 181.613039 394.593147 272.891233 194.065719 392.8929 308.761 185.916559 419.257752
yes, thank you -- sorry for not wording my question very well. the points are all along a compliant surface I'm trying to model. i posted a snippet of the points above. I guess my biggest problem is that they don't have any connection without interpolating values between them all.. 
thank you &amp; sorry for the badly worded question - i hope my clarifications above cleared that up a bit. I appreciate any input you may have !! 
Getting the convex hull is not difficult (not in Matlab at least, convhulln() will do it). I doubt it will solve the problem entirely, but it might be a decent starting point.
You can use the DelaunayTri class to create a Delaunay Triangulation object and pass it to the 'convHull' command to create a convex hull of your data. When it comes to area/volume datapoints only convex hull of your data makes sense. http://en.wikipedia.org/wiki/Convex_hull The second output of convHull should give you the volume. The first output of convHull should give you the vertices of the triangles that form the convex hull. Find the area of each of the triangles using the POLYAREA command and add up the areas to get the surface area. 
The likely reason why it is erroring out is T or f in the equation is not a scalar, but a vector or matrix. This could come from the input to the function planck or from the global variable T ,f . I would recommend you to remove the line 'global T f' and see if it still errors out. If it does, put a breakpoint on line 7 inspect that the variables are all scalars. It is always better to aviod global variables whenever possible. 
What are the dimensions of f and T? If they are not the same size you will get that matrix dimensions error. 
You can find the slope of the tangent using the DIFFERENTIATE method of the cfit object. You can find the angle from the slopes. Try: &gt;&gt;help cfit.differentiate 
Use: `P = ((2*h*f/c^2).*(1./(exp(h*f./(k*T))-1)))` It's trying to do matrix multiplication and division (\* and /) instead of element-by-element multiplication and division(.\* ./). Use the dot.
Are f and T matrices of the same dimension? In MATLAB, when you use an arithmetic operator between a matrices of two different dimensions, you must put a period immediately before the arithmetic operator. I believe your syntax should read: P = (((2*h*f)/(c^2)).*(1/(exp((h*f)/(k*T))-1))); \* Note the '.*' in the middle and the extra sets of parentheses. As an aside, you don't need to pass the variables into the function and also call them as global variables. I've always found it to be much cleaner programming practice to pass all variables in and out of functions. Global variables have the tendency to mess you up unless you're *really* tidy about cleanup.
thank you! This is about as far as I've gotten.. definitely a good start
Thank you ! I'm new to this modeling, but from what I understand convex hulls work so that if i did one for the letter "C", it would look like "D" (flipped)..? But I may be able to use the triangle vertices output to get area, and then use those areas to make a more accurate estimate of volume?
Awesome- will give it a go! I'll try and update on my progress this week. Cheers!!
You directly get the volume of the convexHull as the second output. You cannot map the area to volume unless you have other prior information regarding the shape of the convexHull . Yea, C -&gt; D(flipped) is how convex hull would look like in 2D :)
Sounds like you need the symbolic math toolbox.
Use 'syms' to declare the symbolic variables you need. Example: syms a b c d e f --&gt; now those letters are treated as variables and you can do operations with them mtrx = [a b c; d e f]; x = [2;0;1]; If you know multiply 'mtrx' with 'x' you get: &gt;&gt; mtrx*x ans = 2*a + c 2*d + f 
Thanks a lot! One more question now. I am using symbolic operations, but I need to invert a 64*64 matrix of symbols. That's not possible with LU decomposition - it works only for numerals. Do you know any way I could circumvent this problem? 
An LU decomposition is not hard to implement, but there are a couple of problems with what you want. First, you have to know something about the matrix. Is it full-rank? Special structure? Can any of the entries be 0 (and would you be able to tell when you divide by 0 when the algorithm runs)? Second, if you ran the algorithm on a 64x64 matrix of symbolics, the equation for the entries of the decomposition would be so large as to be useless in any analysis.
Are there any other matrix decompositions in the sym toolbox? Like the other poster has said, it really depends on the structure of your matrix. I'd start with taking some eigenvalues and eigenvectors and using similarity transforms to solve your system. 
Thanks guys! Really appreciate the suggestions :)
Take two adderall and call me in the morning. 
stop complaining and just get started with it. you'll be a lot faster the second time ;)
that's tons of time. My advice: start from scratch. Trying to rewrite it will be harder than just starting with a clean slate. copy/paste from the old stuff when helpful, but just start fresh. You'll probably be able to make it a lot better the second time around. Also, consider using a class for your options structure, as it will make input checking less painful :)
Do you strictly need to use LU decomposition? (i dont remember linear algebra very well :P) The 'inv' method works for symbolic operations. Example: syms a b c d mtrx = [a b; c d]; &gt;&gt; inv(mtrx) ans = [ d/(a*d - b*c), -b/(a*d - b*c)] [ -c/(a*d - b*c), a/(a*d - b*c)] The only problem is it may take a while to compute for a 64*64 matrix, and the result will be an insanely huge matrix itself
You know you can do it. In fact you already did it. Now it will be 10x faster and easier. Im in the same situation right now, or even worse. Cheer up :)
I need to clarify the question... I realized I can fix the above problem by doing: a(:,a(1,:)==1) = [a b]; but that doesn't fix my problem. So I have a 4D array and I want to do the following: since squeeze(a(45,45,45,:)) 1 0 0 0 0 0 0 Gives me an array I want to replace with a new one (i.e. [1 4 5 6 7 8 9]), but I want to do it for all the condition: a(:,:,:,1) == 1 I've tried a lot of different combinations, but the one that should work doesn't. a(a(:,:,:,1)==1,:) = [1 4 5 6 7 8 9]; That looks fine to me, but it gives me a error: ??? Index exceeds matrix dimensions. Any ideas?
I ran into this issue a while ago. Indexing in multiple dimensions doesn't work the same as it does in 2 dimensions. Do a size(a(a(:,:,:,1)==1,:)) and you will see that it is not an array. I don't konw the solution off the top of my head, but I will report back after I get home. **EDIT**: You may want to try: a(:,:,:,a(:,:,:,1)==1) = [1 4 5 6 7 8 9];
It sounds like you need to do linear-indexing, with these helper functions: http://www.mathworks.com/help/techdoc/ref/ind2sub.html http://www.mathworks.com/help/techdoc/ref/sub2ind.html 
Have you considered '[codegen](http://www.mathworks.com/help/toolbox/coder/ref/codegen.html)' which is a new feature in R2011a (take a look at the [tutorials](http://www.mathworks.com/help/toolbox/coder/gs/bsc7jt3.html))?
OMGX. Hey buq2, If this works, I SWEAR I'll buy ship you your favourite box of chocolates. Cannot thank you enough and cannot curse Google enough for not bringing this up even once. 
Hey buq2, it works only in R2011a. I only have R2010a, even my school doesn't have the latest version. Do you have the installation setup for 2011a? If you got it for free, that is. 
OK just one for loop matlab: a = 0; for i=1:10 a=a+i; end C: int a = 0; for(int i=0; i &lt; 10; i++){ a+=i; } 
For R2010a, you can try using "emlc " command. Please note that the conversion from matlab code may not be successful if it uses things that EMLC does not support. In this case you will have to go back to the code and tweak it. The error messages should give you enough information on what is wrong. Type in &gt;&gt; doc emlc at the command prompt to get to the help page of emlc. In the simple case, the"i'm feeling lucky " button is &gt;&gt; emlc filename.m -report Btw, You need to have Simulink installed for R2010a to get emlc.
Thanks a ton, kuttappan! I really hope this works! 
I tied the last one and it also doesn't work. I feel like Matlab doesn't handle matrices with more than 3 dimensions very gracefully. It's making me reconsider how I'm storing the data. Thanks for the help though.
Do you have MEX? Or does it have to be straight C?
I don't yet have R2011a installed, but I will try to get it installed soon.
I recently translated a bunch of Matlab to Java, and yeah, it's kind of a pain. Matlab with its dynamic typing, and, much worse, its extremely poor concept of scope, makes it non-trivial to translate into to a statically-typed language. You have to think a lot more about what's going on. You'll get a gigantic performance boost, though. So good luck! 
Write down in one or a few sentences your aim. Then break it down into a couple of broad steps. Then break those steps down into manageable tasks. Make the first few things really easy to accomplish. Once you've started crossing things off the list, it makes you feel really good and you want to cross off more. The list also lets you plan and think things out in advance, saving you time later on. It doesn't need to be anything complicated.
The code a(:,:,:,1)==1 is a logical matrix. Combining with a semicolon, you are mixing a logical indexing with normal indexing. I dont understand why you expect it to work. That said, I did not fuly understand what you are tyring to do because of this ambiguity. The reason why it works in your 2D case is because there is only one '1' in the first row. This is not a MATLAB issue and MATLAB behves the same from 2D to 3D. 
I looked at it a bit more. Try this: [x y z] = ind2sub(size(a(:,:,,:1)),find(a(:,:,:,1) == 1)) for i = 1:numel(x) a(x(i),y(i),z(i),:) = [1 4 5 6 7 8 9]; end
haha I didn't post it, but that is exactly how I ended up doing it. Thanks!
I understand. I'm still getting the hang of things with Matlab (I'm only using it for this project -- usually I use Mathematica). Kuttappan posted the same solution I came up with. It still uses one 'for' loop which bothers me, but it's the best solution I can see. Maybe his code will make the problem clearer. Any idea on how to improve it?
howd it go
Just wondering, why do you need to translate MATLAB to C?
Came here to post Undocumented Matlab. That blog is awesome.
Is this successive approximation, like time-series stuff? If so, you should look into particle filtering. Otherwise, maybe you should look at Metropolis-Hastings-like algorithms.
Stochastic approximation, not successive. Computing the integral is not the problem, it's finding the maximum of the function when the function is measured with error. All I want to do are the simple Robbins-Monro/Keifer-Wolfowitz algorithms. But I know there's a literature on speeding those up, so maybe a prepackaged algorithm would work much faster than what I can write.
I'm not sure if I'm understanding this 100% correctly - but could you not simply save the 'moving' parts to another vector or matrix that contains the times and values of the heart rate during the 'moving' times and then plot it on the same graph using a larger marker? As in the following example, t = (1:1:10); x = (1:1:10); t_moving = (t(end/2 : end)); %Obviously this vector should be the times when the subject is moving x_moving = (x(end/2 : end)); %This should be the data when the subject is moving plot(t,x,'.',t_moving,x_moving,'or'); legend('Heart Rate','Heart Rate While Moving')
That would work although it would create a different style of highlighting than I would prefer. I want the background of the graph to be vertically striped with the color(white/gray) corresponding to whether or not movement occurred during the related epoch. I suppose there is a more general question of what can I do to make sure that what I see in the figure window is close to what shows up when I print or save as an image format. Do I just tweak every plot until it looks good or are there some settings I can adjust more globally?
So did you make it??
hey thanks a lot for all your help, guys! Well, so I had a project which was supposed to be done in C. It was the implementation of an algorithm. I find it easier to think in MATLAB; that is, atleast as a first draft, I prefer writing an algorithm in MATLAB to see if my thought process is correct or not, rather than be stopped on my tracks time and again because of annoying C syntax errors.Hence the translation :) 
That's what I do a lot at work. Most of my time is spent with Matlab figuring out an algorithm, testing it etc, then when I'm happy I convert it to C.
Try circshift().
Could you please elaborate? If you want something to run 1000 times use a cycle 'for' or 'while'. Example: nRuns = 1; while (nRuns &lt;=1000) yourCodeHere nRuns = nRuns+1; end EDIT: I think i understand it now. So you want to run your program 1000 times and average the results for 40 cycles each time, ending up with 25 values. Correct? If so: tempValues = 0; finalValues = []; nRuns = 1; while (nRuns &lt;=1000) tempValues = tempValues + yourProgramOutput; % add your program output to a variable if rem(nRuns,40) == 0 % check if it ran for 40 cycles. (rem returns the remainder of 'nRuns' divided by 40) finalValues = [finalValues tempValues/40]; % add the average value for 40 cycles to a vector tempValues = 0; % reset variable end nRuns = nRuns+1; end 
Can you show an example of the code?
For tutorial,especially when starting out, MATLAB documentation is extremely useful. Just follow it step by step: http://www.mathworks.com/help/techdoc/learn_matlab/bqr_2pl.html
Sure, it seems to work until I try to print it, figure subplot(7,1,2) x_tick = roundn(((num_epochs)/20),1); bar(t,movecount*(10^25),'facecolor',HColor,'edgecolor',HColor) hold on plot(t,HR); hold off set(gca,'XTick',10:x_tick:(num_epochs)) ylim([(nanmedian(HR)-15) (nanmedian(HR)+15)]) xlim([1 num_epochs]) orient landscape print movecount is a 1x~1000 array pretty much 1 if movement is found, 0 otherwise. HR is a 1x~1000 array of heart rate for about 8 hours, t is just 1:1000, I'll be replacing it with a time later. **Edit:** apparently bar() doesn't like getting datenums 30sec apart as the first argument, I guess I'll use area() instead. **Edit2:** I tried using area instead, now it seems to save as an image just fine, but the shading doesn't show up when I print it. To make things more complicated, one of the subplots was also using bar() in a different way, but now that I've converted to area() it still shows up but parts of it are shifted up. Hcolor is [.8 .8 .8] kind of a light grey (the prints are grayscale) num_epochs is the number of epochs for the 8 hour period ~1000 All of the values I plot this way are positive, so the baseline of the bar isn't an issue.
trapz(f,i.*E); help trapz for details.
Thank you so much for your help, I was finally able to plug the loop in and understand why I was doing so! What i'm trying to do is basically run the program 1000 times (which is working fine). Each of those times has 40 periods, and I get one value at the end of those 40 periods (mean(pi)). So this gives me a total of 1000 mean(pi) s. For my final value I'd like to have an average of those 1000 values, and display it. What I just did which seems to work is: loop = input ('How big would you like the loop to be'); tempValues = 0; nRuns=1; while (nRuns &lt;= loop) (code here) tempValues = tempValues + (mean(pi)); nRuns = nRuns+1; end AvgPi = tempValues/loop; disp(sprintf('Total Average Pi: %f',AvgPi)); This seems to do the trick (I didnt quite understand everything you wrote in your code, I'm not at that level yet =P) Thank you so much for your help! I was getting all excited twitching and changing stuff around until it finally worked how I wanted =D 
nchoosek?
[This](http://www.mathworks.co.kr/matlabcentral/fileexchange/11462-npermutek/all_files) is what you're looking for I think. (I've used it before, and from what I recall, it runs pretty quickly).
This should work for you in the 10 by 3 case. You can start from this for the general case [a b c] = ndgrid(1:10,1:10,1:10); [c(:) b(:) a(:)]
You could do your linear fit on a restricted set of the data [0,a] and look at the mean square error of the fit. It looks like it would be pretty constant in the linear part, but once you start getting into the exp bit it will go up. So if you do this as a function of a, then set a threshold on the mse...
You could probably do it with subsampling. What is the resolution of *t*? I.e. if you have values for 't = 0.01, t = 0.02, ...' you could just plot every 100th point, and it would look nearly the same (without magnifying it).
I think using a spline would be your best option. You can also do your own form of least square fit by fitting x &lt; c with a line and x &gt; c with an exponential. Make c converge to a point where then least square error is minimum. 
It looks to me more like you ran: `Y=detrend(RD2,'constant')` as opposed to `Y=detrend(RD2,'linear')` which should be equivalent to `Y=detrend(RD2)` Try it with the `'linear'` argument, just to be sure. Also, it could be a problem with rows/columns: Try `Y = detrend(RD2')'` 
Exponentials *have* a asymptotically linear part on the negative side! Are you sure it isn't a linear trend PLUS an exponential growth? (i.e. does that math match the theory?) for example, plot this: `x = (-100):10; y = -x/40 +exp(x/5); plot(x,y);` If this is not the case, then you use the left third of the data to do a least-squares best fit line, and use the right hand bit (maybe between 18 and 20) to fit an exponential, and calculate the point at which the two curves are equally different from each other (in terms of standard deviations).
If you are more concerned with keeping the text vectorized than the actual plot, you can save the contents of the plot as a raster image with getframe(), then create a new figure, display the image with appropriate axes, add the text, then save that as an .eps. I think the subsampling idea makes more sense though. Simple downsampling is probably good enough. If you really want to minimize the file size while retaining the shapes of the plots, you could use something like this: http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm (for matlab, here: http://www.mathworks.com/matlabcentral/fileexchange/21132-line-simplification)
I think I need to do something else to the data, detrend essentially seems to center the data at zero like in the target picture, but I still need to remove those slopes at the ends, they should be flat , the slopes of these lines I think, should be subtracted from the entire plot to give me the desired look. I don't know how to do that but I'll look around. I did what you suggested but they were all equivalent to what I already have. Thank you though.
detrend should remove the linear component (slope)... :( It looks like you'll have to do it manually: find the best fit line, and subtract it from the data. 
Student version of MATLAB is ~$100USD in the States. For relatively simple stuff like this, Octave works pretty well. It doesn't work so well for more complicated toolboxes, but a lot of the standard stuff works fine. (Also, I haven't looked at it for quite a while, so consider this a lower bound of its usefulness.)
I did it manually, I think there must be some trickery that I'm missing, perhaps the detrend with break points would have done it but I've yet to understand how to use it. I don't know, I'll see if I can make it work. This is what I got manually anyway http://imgur.com/02ryY
Sorry, I was not clear enough. You guessed right, it is purely linear in the beginning, but after a certain point it is linear+exponential. I am looking for this point. The problem is, that the exponential part is not always present, I can not do a RHS fitting in the general case.
Thanks, sounds like it could work, I will try that.
&gt; I think using a spline would be your best option. Could you elaborate how I could use a spline to find the end of the linear part? &gt; Make c converge to a point where then least square error is minimum. The segment x&gt;c may or may not exist. Finding whether the exponential growth does occur (and if yes, where) is a part of my problem.
I was saying it's linear + exponential on *both* sides, since the exponential e^x is nearly zero on the left, so you don't really need special cases for the left and right hand side. You can fit the equation: `y = a*x + b*e^(t* x) + c` easily if you know t, since it's linear in the unknown variables. 
I tried simulating his data with that model, but it doesn't fit quite that well - it seems he's right in saying that the first part is simply linear while the second part is linear AND exponential. He would probably need to do two separate least square fits.
&gt;&gt;Could you elaborate how I could use a spline to find the end of the linear part? I dont know splines enough to know how it can be done. &gt;&gt; The segment x&gt;c may or may not exist. Finding whether the exponential growth does occur (and if yes, where) is a part of my problem. It does not matter. For increasing c, try to fit the part x &lt; c to a linear part and try to fit x &gt; c to an exponential. Keep increasing c as long as mse keeps decreasing. If there is an exponential, the mse will stop decreasing at some point and starts increasing and you can decrease the c step size by half till mse decreases again. The decrease the c step size by half again. till it converges. If the mse never increases , you have only a linear part. &gt; Another option is to use fminsearch to do the job. Create an equation for the mse and pass into the fminsearch function with a starting point. 
i do the same thing often. if you can get your files to have sequential numbers in them (like img1, img2 ...) then opening each file in a loop is easy (look up imread, strcat). if you are opening a variety of different images, you will need to use 'dir' to get a listing of the files in the directory, and then use the index counter to select which file to open during each passage of your loop. at the end of your loop you said you want to plot and save the modified image? use plot. if you want a separate plot for each passage of the loop, specify the figure first 'figure(3); plot(img)' you can save directly from the plot (inclues axes, labels or grids, if you choose), or you can save the image as an image (look up imwrite). you might need a pause command in there for a few miliseconds because plot can get weird if the script runs really fast hope this helps
all good advice. Regarding saving files, remember that you can use square brackets to join strings. Regardless of how you acquire it, you'll have a list of your files (probably in cells). You can pass ['old filename' '-XYZ'] to imwrite in each iteration. Easy as pie.
You should probably show us the relevant code. It's hard to tell what you're doing wrong if we don't know what you're doing. I will say that storing multiple strings in a single character array is probably not a good idea. Use a cell array of strings instead. Something like: myarray = {}; for i=1:20 myarray{i} = ['String Number ' num2str(i)]; end 
Count starts on 0 and this code runs when a button is pressed: count=count+1 folder_path = uigetdir('dname'); Flist{count,1}=folder_path; Count works properly, it gets the right names but Flist, instead of generating [a;b], it deletes 'a' and only puts 'b' in, like this: [ ,b] Thankyou for helping!
Try these: Outside loop, initialize: `Flist = {};` (empty cell array) Then inside loop: `Flist{count}=folder_path;` or `Flist = [Flist, {folder_path}];`
Its unclear from your example what [a;b] is. it looks like you are trying to store folder paths in a structure. Should work fine with the suggestions mentioned. Is there something else missing?
Another function that's pretty easy to use is sprintf('pattern',strings) for example: filelist=dirr('path') data=filelist(1) h=plot(data) savepath=sprintf('%s-xyz',filelist(1).name); save(savepath,'h') 
ah... declare the array as a cell.. it worked perfectly! thank you so very much! 
i use the shit out of sprintf. 
Thanks, I didn't know about the square brackets. I used this with the other suggestions.
Frame the disks and manual in some sort of classy frame. Or just stick it on your shelf to discover years from now. I was glad I hung on to my old OS/2 Warp disk when I found it a while back.
There's nothing for it but to attempt installation. Does it have (or need) a license code?
there is mention of a registration card, but that is for future (and future meaning post 1995) downloads and upgrades. I don't have a floppy drive on my computer anyway...
Fill out the registration card and mail it in. Also: http://www.newegg.com/Product/ProductList.aspx?Submit=ENE&amp;N=100007543&amp;IsNodeId=1
Keep it for 15 years, then gift it to someone else.
I work for the company that makes MATLAB. I'd have to check around, but I'm guessing we keep a copy of all the old versions. But maybe not. Can you take a picture of it for me?
But first, pretend to not understand English very well... you know, for irony's sake
Here you go [http://imgur.com/a/PjMMm](http://imgur.com/a/PjMMm)
you can create a movie file like mov or avi that can be played from a powerpoint presentation. they could be standard rotations, but nothing you could interact with. i don't know about exporting an interactive plot. that would be useful to me too...
1. http://cseweb.ucsd.edu/~elkan/fastkmeans.html 2. Have you tried the matlab profiler? 3. Write K-means in C/mex.
It would be a good idea to cross-post this at [/r/ComputerVision](http://www.reddit.com/r/computervision/).
Take a look at [VLFeat](http://www.vlfeat.org/)'s tools [fast Integer K-means](http://www.vlfeat.org/overview/ikm.html) and for a different approach, their [Quickshift](http://www.vlfeat.org/overview/quickshift.html) is pretty fast. There's also lots of other useful tools in the VLFeat library.
Hey thanks!
Thanks a lot! 
+1 for profiling before attempting to optimize anything. In particular Matlab's profiler is very easy to use and has helped me a bunch of times.
Make your class subclass `handle`. Its instances will then have reference semantics (like in Python or Java) rather than value semantics (like a matlab struct). classdef Foo &lt; handle properties bar end methods function blah(obj, x) obj.bar = x end end end
[R does nice contour plots](http://www.r-project.org/). Add on the package ggplot2, and things get very pretty.
Thanks.
Make sure you save your figure/plot as a eps file. If you are not using latex, and need it in jpeg/png/whatever, just open the eps file in photoshop (probably gimp too, or Preview if you are on a mac) and save the file as such, with a high dpi Not too sure about your other questions, since I haven't used contour to plot before. Have you tried to make manual adjustments after the plot has been created (with plot tools)? You could also turn off the text, and then add text boxes (with plot tools) with the required numbers.
the contour plots use straight lines between data. so for smoother plots, use more data (interp2, maybe?) i don't know what to tell you about labels. maybe you can export the image and then add labels in photoshop or illustrator. edit: try fprintf or sprintf to change the number of digits you want. i think you're being too picky to ask for 4.2*10^2 kind of display. 4.2e2 looks way nerdier, anyway.
Make your own function and put it in there? What are you trying to do? Can you show me the code that produces the error?
Thanks. I've used R a long time ago, but might be worthwhile to revisit that. 
It gives that error because you never gave it the handles structure. I'm assuming by your use of the handles structure that you've created your GUI using GUIDE. You can absolutely create your own subfunction to help out in the GUI, but you need to pass the handles structure into that subfunction. It would look something like this: function whatever_Callback(hObject, eventdata, handles) %this is the callback for whatever object initiates the change %whatever code to do other stuff % this is the call to your custom function change_the_string(handles) % this is the call to an alternative custom function change_the_string2(handles.textbox, 'I eat penguins') function change_the_string(handles) %this is your custom subfunction set(handles.textbox, 'String', 'I love monkeys') function change_the_string2(objhandle, newtext) %this is the other custom subfunction set(objhandle, 'String', newtext)
Here's an example I just put together that uses sprintf to better format the labels. One trick to getting the labels lined up better is to alter their size. It seems that when you get too big, they get ugly. Z = membrane; %just some fake data to illustrate this x = 1:31; y = 1:31; [C,h1] = contour(x,y,Z,10,'k','linewidth',2.0); ylim([1 31]); xlim([1 31]); th = clabel(C,h1,'labelspacing',425,'FontSize',8); %make the labels with smaller font size than default for n = 1:length(th) a = get(th(n), 'UserData'); %get the numeric value out of the contour b = sprintf('%4.2f',a); %format the number b = strtrim(b); %trim leading and trailing spaces set(th(n), 'String', b) %put it back as the string end 
I don't think it's possible, but we can do this: 1. Solve Ax = b for x. 2. Solve Ar = (256, 0) for r. 3. Solve As = (0, 256) for s. Then your general solutions for x are x(m,n) = x + mr + ns for integral m, n, because by construction: Ax(m,n) = Ax + mAr + nAs = b + (256m, 256n) = b (mod 256).
&gt; th = 0:.0001:2*pi; In that line, you create theta as a 1x62832 matrix. xb is a 1 x 334 matrix, because that's the size of the t matrix. Obviously you can't add these two together. You didn't give us much to help regarding the solving of your specific problem, but in terms of getting your code to work you need to use t = linspace(0,10,$); th = linspace(0,2*pi,$); where $ is the number of points you want. Also, what do you do to make your code formatted so nicely on reddit?
Do you have to plot the path of the ball, so you just display all the points at once, or are you supposed to animate the ball moving across the graph?
I think what you want to get is something like this: http://www.idleworm.com/how/anm/01b/bball.shtml Firstly, don't worry about thetas and whatnot to find the points of the ball. Use plot(x,y,'o') and you will get a nice little circle plotted at the point you want. You can also specify a color: plot(x,y,'bo') will be a blue ball, plot(x,y,'ko') will be a black ball. You can use the colors cmykrbg. So, what you want to be doing in your loop is calculating the next position and velocity of the ball, knowing that they will be determined by the previous velocity and position (as well as your gravitational constant and the formulas you have correctly put together). Your variable 'x' can be thought of as the next value of x. What do you need to calculate this? The current value of x, the current x-direction velocity, and the time that has passed. This formula is x0+u0*t. BUT you only need the single value of the time, not the entire vector you have defined. Using 't' gives you the entire vector. Conveniently, you have already set up a counter in the for loop, so if you call the ith value of time ( that is t(i) ), you get the current time. So x = x0 + u0.*t(i); Same thing for y, you only need the singular value of t(i). y = y0 + v0.*t(i) - (1/2)*g*t(i).^2; etc. u = u0; v = v0 - g.*t(i); Delete the lines with th, xb, yb as I said above. Then your plot command is plot(x0,y0,'ob') And I would put that at the beginning of the for loop so you plot your initial values, before changing them. Since you used axis ([0 10 0 10]) pick some more sane initial values, starting at the top left and with no initial y velocity. x0 = .5; y0 = 9; u0 = .5; v0 = 0; Now if you implement these changes, you will have a nice falling ball, but no bounce. After the chunk of code in the for loop that calculates the next values of the positions and velocities (but before assigning them to x0 y0 u0 v0), you need to implement a bounce. What happens when a ball bouces? It doesn't go below the floor, and the velocity goes in the other direction. How can you decide when the ball has bounced? When the calculated y value is negative (the ball is below the ground). When this happens, set y to zero, and the y velocity to the previous velocity, but now positive instead of negative. if y&lt;0 y=0; v=-bounceconstant*v; end I also renamed some variables to make it clearer and and picked some new values to make the animation work. The variable bounceconstant is the fraction of the velocity that is transferred to the ball upon bouncing. You will notice that when bounceconstant=1, the ball will actually bounce higher than it should. This is due to some error introduced into positions and/or velocities in part of the code I am giving you. Problems you should solve now that I gave you a lot of the answer (code below). **1. Figure out why the ball bounces higher than it should each time. Use the equations you defined earlier (rearranging them if necessary and applying them in the bounce if statement) to fix this error.** **2. Try setting bounceconstant to different values to get some realistic ball bouncing.** **3. Have the ball slow down in the x-direction to make it look more realistic.** **4. Using for loops is a habit you will want to break, and Matlab is designed to make it so you don't need them Re-do this entire problem without a for loop.** close all; clear all; clc; x0 = .5; y0 = 9; u0 = .5; v0 = 0; bounceconstant=1; tend=2; tsteps=10000; t = linspace(0,tend,tsteps); n = 500; g = 9.81; for i = 1:n plot(x0, y0, 'o') axis ([0 10 0 10]) pause(0.00001) x = x0 + u0.*t(i); y = y0 + v0.*t(i) - (1/2)*g*t(i).^2; u = u0; v = v0 - g.*t(i); if y&lt;0 y=0; v=-bounceconstant*v; end x0 = x; y0 = y; u0 = u; v0 = v; end
Thanks a lot, that was really helpful. We have to incorporate a loss in energy, so I don't necessarily have to make it look realistic, but our prof gave us some help, so I think I can figure that out. I always have a problem starting out my script, but it makes more sense now. The thing is, we have to give the 'ball' a diameter so all that xb and yb crap was about. Any idea on how I would go about doing that and getting it bounce as soon as the edge of the 'ball' hits the ground? We don't have to any deformation of 'ball', but right now it bounces a little too late and looks funky. Thanks so much for the help!
Animate the ball moving across the graph, sorry I didn't include the full details. I was just stuck on the start of the script.
Thanks, sorry for not adding much detail, I was just trying to get past a block. And I just copy and pasted it from the script (only the stuff in the for loop looks nice for some reason)
Your main problem is that you are using a for loop with the variable i, and yet you are multiplying by t, which is an array, in the loop. By multiplying by t, all you're doing is creating an array of x's and y's. If you were to instead multiply by i, you would create only one x and one y value at each iteration, and then be able to plot just that one point at each iteration. Also, if you're trying to animate it, you're going to have to use the drawnow command. I think all you have to do is type drawnow the line below plot(xb,yb). edit: I see you used pause instead of drawnow. I'm don't know a ton about animation in matlab so that may or may not work.
Yeah, it works well with pause, I think I had something else wrong in the script because it's working better now.
You could do that very similarly to the way you did it with your circle equations, and implementing the bounce when y&lt;R.
I tried this a year ago and never found anything that suited my needs. The R package geoR ended up working for me. I think there are more. You can plug an R script into MATLAB on windows using [R-link](http://www.mathworks.com/matlabcentral/fileexchange/5051). Or on a *NIX, it's not toooo hard to write a few vectors to file from MATLAB and then call R on them from the &gt;&gt;system('...') command.
I tried this a year ago and never found anything that suited my needs. The R package geoR ended up working for me. I think there are more. You can plug an R script into MATLAB on windows using [R-link](http://www.mathworks.com/matlabcentral/fileexchange/5051). Or on a *NIX, it's not toooo hard to write a few vectors to file from MATLAB and then call R on them from the &gt;&gt;system('...') command.
Thanks, I had no idea about R-link. That will help a bunch!
Anyone know if there's a Mac version of R-link?
I searched for one a lot. There doesn't seem to be. I made a work-around and considered turning it into an R-link equivalent myself, to distribute, but never bothered because you're the only person who's ever asked. If I get a few more requests, or lots of upvotes on this comment, I'll try and package my code up and put it on the file exchange.
Does this work? http://www.spatial-econometrics.com/ 
I accidentally made a self post instead of submitting a link. Here's the article: http://blog.sigfpe.com/2011/06/another-elementary-way-to-approach.html
By the way, the closest thing I have found so far is to use B=sort(A,1,'descend') where A is the matrix loaded from the text file I am starting with. However, this doesn't let me keep the ID number with each element of the second column.
B=sortrows(A,2) You can save to a text file using fprintf, much in the same way you would in C or any other language.
Alternatively, I could put all the data into a column vector. But can I get MATLAB to ignore some information in each element? Or can that not be done?
Thanks very much :)
Ah, I think I have a problem. I have elements with letters in them (the ID tags), which Octave (I don't have MATLAB) doesn't like.
Ok, I didn't realize you were dealing with character data. There are a few ways to do this. I use Matlab, not Octave, so I'm not sure if the syntax will be correct for you. What exactly are you doing to read the data into a Matlab variable? If you can read it into a cell array of this form: a={1,'a';3,'g';2,'c';5,'d'} then sortrows should still work. Another option: have the ID and measurement data stored in two separate vectors, then sort the ID data, and use the sort index to re-index the measurement vector. Like this: [IDsort sortIndex] = sort(ID); dataSort = data(sortIndex); 
Sorry, I should have made it clearer. All of the ID elements are 4 characters in length, some alphanumeric, some strings of letters, some just a 4 digit number (I didn't choose to name them this way :P ). I had hope to use the first method. I tested this out the same way you described i.e a={1,'a';3,'g';2,'c';5,'d'} however, once I have IDs which aren't consistent in format (say, one is a letter, whereas the others are number) then Octave fails to read the data from the text file. The second method you suggested looks good, I'll try that out. Or will I get the same error since the IDs aren't of a consistent format? Thanks again for your help :)
You should be able to simply read the IDs as whatever format you like - read the numeric IDs as strings, and then you can sort all of them in a simple way.
Thanks, I'll let you know if it works.
Look into the second output of the sort command - it will give you a row index that you may be able to use to select the IDs in sorted order.
Getting started with MATLAB by Rudra Pratap is a good book. Blogs of mathworks engineers. They are REALLY useful in understanding some of the finer points of MATLAB. And of course, a lot of practice! One advice: learn the techniques specific to MATLAB well. I was told by my professors at my undergrad univ that MATLAB is a simplified version of C, period. But that's a huge mistake, as thinking in C makes for very inefficient MATLAB code (read about vectorization) :) Good luck! !
You can look through these tutorials: http://www.mathworks.com/academia/student_center/tutorials/ The MATLAB Docmentatation is very useful. Try following the steps in there in the "Getting Started "Section. 
solve the Project Euler problems with Matlab!
This might be totally inappropriate for your present life situation, but if you're looking to get experience in a language like matlab, try to get a *reference* out of it too! Find a professor or research group that needs an undergrad programmer, and program the shit out of their projects in MATLAB. Most undergrad research deals, you're expected to work about 10 hours/week or so. Also, you've got a year left... take another programming class, probably from an applied or pure math department, but maybe a computer science department. If neither of those work out, Mr_Smartypants lives up to his name.
Ah I will try. I've been trying to get a lab job for a while lately and haven't had any luck. I worked in a research lab last summer and during this academic school year, but there wasn't much Matlab involved. Maybe its just my interview skills or something because I have a 3.8 gpa in a school known for heavily deflating grades.
Have you checked with individual professors and not just the lab coordinators? I really enjoyed my structures 1 class so I approached the teacher and told him I wanted to get involved in research. A few months and a bunch of bureaucracy/budget issues later I'm working on a few projects including some micromechanics stuff that we use matlab for. I took numerical analysis 1 &amp; 2 which were huge pains in the ass at the time, but as a sort of trial by fire I got to be at least competent with matlab. If you're genuinely interested in the research it will show... I have a 2.95 going into my senior year and should have my name on 3 journal articles with the possibility of being first author on a few before I graduate in the spring.
Take a numerical methods class if one is offered. I've always wished that I had, but alas, there was no time when I was in school. As for learning MATLAB, just figure out some projects that you want to do and work on them. Start small and expand. I picked up a computational physics book and started working on the homework problems. Never underestimate how useful it is to read other people's code...you can always learn new tricks or see methods that you wouldn't have thought of.
I should have mentioned this, but I guess it slipped my mind since I never got the opportunity to take them either. One of the incoming professors to my department is a super-computational type. The postdoc in my group said something to the effect of, 'If I read his code for 20 minutes, I'd probably learn 20 things.' Probably true...
Here's my opinion of MATLAB, YMMV: MATLAB is great for people who understand how to use it. You can code in it faster than you might in other languages (great IDE, decent debugger, simple syntax, no compiling, etc.). You can run it faster than other interpreted languages if you vectorize your code; if you don't it will probably be much slower. Once you know all the basic syntax, I'm not sure it's worth learning any more. Any CS concepts are probably more worth learning in another language, and any MATLAB-specific stuff you can read the documentation for when the time comes. In conclusion I don't think MATLAB is really worth going any deeper into if you already know how to do math-type stuff in it. It's not really a general-purpose programming language.
Hmm... Interesting. What languages would you suggest that I start learning then? Also remember I only know MATLAB so the language can't be super advanced, I must be able to learn it on my own.
I'm afraid I'm stuck in the same situation as you and SenorToenails up there. I have no room in my schedule (I'm also a pre-med) for any other courses, otherwise I'd love to take a numerical methods class. Damn those humanities classes! I could of learned all that stuff on my own by reading a small textbook. 
Thats for the advice, I'm going to get right on this. Would you say I go talk to the professors in person or shoot them an e-mail? 
Yeah. I have some video lectures on it that are pretty good but not released to the public. Send me a pm if you're interested. 
When I was learning MATLAB, I was perplexed as to why my mom thought it was C-like (yes, she's a programmer, or was anyway). Turns out she's used to things like Lisp, Pascal, etc., which are completely unlike C or MATLAB. After learning MATLAB, I went on to self-study Python and C, and I also took classes that were taught in Java, C++, and Perl, without learning those languages beforehand. Frankly, if you think you can't learn a language just because you "only know MATLAB" you're limiting yourself. I realize this isn't /r/learnprogramming or something, but I think if you want to learn a language you can and will. Personally, I'd suggest you go with Python; I think it's a great language. It also comes with an interactive interpreter like MATLAB's, so you can just try out lines of code and get feedback immediately. I don't know of any equally-good IDEs or debuggers though; I tend to not use them so much... Again, YMMV. But MATLAB isn't so different from any of the languages I know. FYI I ended up switching from bioengineering to computer science. Programming is addictive!
PM sent!
Haha I will take your programming warning into consideration, but I think I will learn Python. You bring up a very good point and you seem like you know what you're walking about. So would you be able to point me into the right direction for learning Python? If you know a good textbook that would be awesome too. I learn really well through textbooks somehow. 
Hmm, well, I don't learn well from textbooks; I tend to like to program my way into a language through trial and error and reading docs. However, lots of people (especially on reddit) recommend "Learn Python the Hard Way".
I would definitely go in person. Productive research professors have a lot going on and it's easy to overlook an email from someone you don't recognize. If you go in person you can stand in their office and make them feel uncomfortable until they start imagining things that you could possibly do. PM me if you want more details
Hi, Could you help me with writing an algorithm (Matlab code) to calculate the area (the projected area) of irregular shaped objects in an image (binary image), input is an grayscale image. Thank you in advance! 
I don't know anything about your points other than that they are equally-spaced, but a potential issue here is that one can't guarantee any real zeroes for an arbitrary polynomial. Could you be more specific about your points?
The set of data points will always be an odd number of points. The points are on the positive side of the x-axis with y-values values between 0 and 1. Generally, the curve is shaped like a hump (low-high-low values), but this can't be guaranteed. I should also mention that it is more important to have 2 real roots than it is for the fitted curve to be highly accurate, that is if a less accurate curve can give me the roots, I'll take it! EDIT: The polynomial isn't really arbitrary, since I'm specifying it must have at least 2 real roots. If the polynomial continues to increase past the last point I have, then sharply turn down and tend to -INF, that's fine. One more constraint is that there must be 1 root on either side of the middle data point, but like I said, the roots can be outside of the entire set.
Because of the number of constraints you have, your best bet is to formulate this as a nonlinear programming problem. The function fmincon in Matlab (don't know the Octave equivalent offhand) solves nonlinear programming problems. Write your polynomial in factored form, y=(x-a)(x-b)(c*x^n +d*x^(n-1) ...+z) n+2 sound be the order of the polynomial you desire. Use a&gt;=e and b&lt;=-e for constraints, and formulate the sum of least squares between your polynomial and your points. Minimize the SLS. 'e' is an arbitrary small number. Some issues: fmincon can be hard to use because of the nature of nonlinear programming problems. You will have to try to give it a good initial guess, and then it still may not work. You may have to adjust the order of the polynomial to get the desired result. Too few points may not be feasible or have a large distance between the points, while too many will give you a problem that is over-defined. You should probably err on the side of over-defined. Let me know if anything is unclear about what I have written.
Well, you just need to be creative. I would use those angle values as the angle in a cylindrical coordinate system, convert the cylindrical coordinates to 3D Cartesian, and use plot3 to plot them. You would then have the effect you wanted where you can look at the graphs from an angle. *Edit: look up pol2cart if you want an easy conversion between cylindrical and Cartesian.
I would suggest going over your algorithm with a fine-toothed comb, making sure it is implemented exactly as described [here](http://en.wikipedia.org/wiki/Lloyd%27s_algorithm). In the average case, it should run in polynomial time, but your post suggests it is running in exponential time instead. Also, keep in mind that, especially because of limited precision, lloyd's algorithm may not ever converge on a solution, in which case it would run forever. Make sure to stop execution once it reaches some "good enough" point.
I was bored. I hope one of these two solutions are useful. %% make fake data x = linspace(-1,1,100)'; y1 = zeros(length(x), 7); y2 = zeros(length(x), 7); for n = 1:7 y1(:,n) = sin(pi*x/2 - 0.2*n + 0.1*randn(1)) + 0.02*randn(size(x)); end for n = 1:7 y2(:,n) = sin(pi*x/2 + 0.2*n + 0.1*randn(1)) + 0.02*randn(size(x)); end %% plot all on same axes figure plot(x,y1,'LineWidth',2) hold on grid on plot(x,y2,'LineWidth',2) title('this is what you don''t want') %% plot in 3D figure hold all colors = [0 0 0; 0 0 1; 0 1 1; 0 1 0; 1 1 0; 1 0 0; 1 1 1]; angles = 0:15:90; for n = 1:7 plot3(x,angles(n)*ones(size(x)),y1(:,n),'LineWidth',2,'Color', colors(n,:)) plot3(x,angles(n)*ones(size(x)),y2(:,n),'LineWidth',2,'Color', colors(n,:)) end grid on view(-30,34) xlabel('X') ylabel('Angle?') zlabel('Amplitude') title('this is more awesome') legend({'In Plane','15 deg','30 deg','45 deg','60 deg','75 deg','Out of plane'}) %% plot in 3D with patches figure hold all colors = [0.5 0 0.2; 0 0 1; 0 1 1; 0 1 0; 1 1 0; 1 0 0; 0.2 0.5 1]; angles = 0:15:90; for n = 1:7 patch([x;flipud(x)],angles(n)*ones(2*size(x)),[y1(:,n);flipud(y2(:,n))], colors(n,:), 'LineWidth',2) end grid on view(-30,34) xlabel('X') ylabel('Angle?') zlabel('Amplitude') title('this is pretty cool, too') legend({'In Plane','15 deg','30 deg','45 deg','60 deg','75 deg','Out of plane'}) 
"x" is your array of bits. There's probably built in functions that do this kind of thing quicker, but this'll do. durationarray = []; count = 0; for i = 1:length(x)-1 if x(i) == 1 &amp;&amp; x(i+1) == 1 count = count + 1; elseif x(i) == 1 count = count + 1; durationarray = [durationarray count]; count = 0; end end
Thanks, that worked great! Also, I found another solution. duration = (find(diff(x)==-1)-find(diff(x)==1))
your first mistake is using OSX.
-nojvm Best flag ever! I'm not sure how you'd pass in arguments from the command line, though.
Why? I'd actually be more likely to say your first mistake is running matlab, but this is the wrong subreddit for that. Any actual reasons you have, or just going for the cheap shot?
The nojvm and nosplash and nodisplay flags are important. I think you also need to pass a -r flag, don't place the .m extension and it helped me to change to the script directory before calling matlab. If you want the script to stop, append "exit" in your m file otherwise it drops you to the command window. You can add -log (or something similar) and specify a log file for your output. I got it to work, but I was having trouble getting down a system where scripts could pass other scripts data. I guess saving all the variables to a mat file would suffice for that. Good luck! Post back whenever you get it going. 
The first thing you need to do is find the location of the matlab executable, and either execute command "matlab" from that directory, or add its location to your search path. Then "matlab -help" is a good place to get some further information. There is no real default location, and I don't use OSX, so I can't tell you where it might be. If you normally run it from some kind of shortcut icon, you should be able to figure it out from it's properties. You can automatically execute a specified matlab command using the "-r" flag. You can then have that command specify a file, which could, for example, write output results to a text file, and exit matlab after execution. I don't think it is possible for the user to specify the return value of the matlab executable process. This is outside the scope of your question, but: personally, I sometimes find it easier to call unix commands from within matlab, and use a matlab script as the framework, rather than the other way around.
I am acquainted with OP and I'm giving them grief
Add "/Applications/MATLAB_R2010a.app/bin" to your $PATH (or just use the full path in your shell script), and use the "-nodesktop" flag.
Used this in combination with the -nodisplay and everything worked out -- Thanks! I have to run this all from bah because the lab that runs our data says so, otherwise I'd try running unix from matlab. 
You might look into the PCL (pointclouds.org). The PCL is templated, so you could easily create your own 3D point data type that includes the additional information you might need to preserve -- normals, voltages, etc...
ok, figure(3) is pretty freaking cool. i don't know if i would have been able to pull that out of my hat. 
Thanks. Here is a better version (IMO), with some transparency set (using the FaceAlpha property): %% plot in 3D with patches with FaceAlpha set to 0.5 figure hold all colors = [0.5 0 0.2; 0 0 1; 0 1 1; 0 1 0; 1 1 0; 1 0 0; 0.2 0.5 1]; angles = 0:15:90; for n = 1:7 patch([x;flipud(x)],angles(n)*ones(2*size(x)),[y1(:,n);flipud(y2(:,n))], colors(n,:), 'LineWidth',2, 'FaceAlpha', 0.5) end grid on view(-30,34) xlabel('X') ylabel('Angle?') zlabel('Amplitude') title('FaceAlpha all up in your face') legend({'In Plane','15 deg','30 deg','45 deg','60 deg','75 deg','Out of plane'})
Heyy I just saw this. Thanks for asking! Yes, I did make it! :)
Heyy sorry I just saw this. Thanks for asking! It went well! :)
I didn't read this terribly carefully but what I gleaned is that you want an 8x8 array of boxes whose individual boxes can change colors in a binary fashion? If so, then you can simply use imagesc(A) on an 8x8 array A. Then just call imagesc again whenever the array changes.
This is perfect. Thanks!
The numbers of ways you can do this are numerous, here is a simple one: &gt; L = L(L~=Inf) It removes all the infinite values from the list. If you now have a dimensions mismatch with your variable H (don't know how it is obtained) you should remove the corresponding values from H as well by doing: &gt; H = H(L~=Inf) and then &gt; L = L(L~=Inf) Cheers!
Thank you so much, that's brilliant! A delicious upvote for you, sir.
Additionally, if the data is organized into columns, and you need to exclude entire rows, use: &gt; L = L(L(:,*decision column*)~=inf, :) 
http://www.google.com/search?q=90+seconds+to+minutes What does this have to do with matlab?
Perhaps I read the description wrong, but I thought this was a place to come with math questions? 
Matlab is a software package for technical computing.
Yaaa......I realized that after taking a second look because of your first post....sorry about that 
If you have matlab you could probably set something up to convert from base 60 (time) to base 10 ("normal" counting)
you should look at http://www.wolframalpha.com ... here's an [example](http://www.wolframalpha.com/input/?i=2*%283+days+5+hrs+2+min+15+sec%29+in+sec) or [even better](http://www.wolframalpha.com/input/?i=%282+usd%2Fhr%29*%283+days+5+hrs+2+min+15+sec%29)
That works really well! Thank you so much! 
Use these functions: `imread` to read an image, it will be in RGB components as a [Height x Width x 3] array `interp2` to scale them down. this can be tricky. Also, you'll have to do the RGB components separately: pic(:,:,1) then pic(:,:,2) then pic(:,:,3) `imwrite` to write the thumbnail Also, to get input/ output filenames something like: temp = dir('path/*.jpg'); inputNames = {temp.name}`; outputNames = cellfun(@(x) sprintf('thumb_%s',x),inputNames,'uniformOutput',0); 
You can use [imresize](http://www.mathworks.com/help/toolbox/images/ref/imresize.html) to resize/interpolate (nearest, bilinear, bicubic). It's in the image processing toolbox, though.
Honestly, I'd probably use a shell script and imagemagick instead of matlab. (if that's an option)
You sir, are a picturesque example of the proverbial man equipped only with a hammer.. :) What operating system are you using? There's a windows power toy that does this. I think it's called Image Resizer or something else equally unimaginative. Unfortunately for you, Googling it for you isn't worth the karma to me. I see someone else has already recommended ImageMagick. I'm not an expert, but I've used it a little, and I know it can do batch processing. I'm guessing that if you'd spend about 5 minutes with the documentation or even googling intelligently, you could find a one line ImageMagick command that does exactly what you want. 
Have to agree. Matlab is an amazingly powerful tool but not necessarily a panacea.
To answer your question regarding why a/0 returns Inf instead of NaN: MATLAB is conforming to a standard set of practices for handling mathematics. I believe the relevant standard is described here: [Wiki: IEEE 754-2008](http://en.wikipedia.org/wiki/IEEE\_754) The wikipedia page on [division by zero](http://en.wikipedia.org/wiki/Division\_by\_zero) shows how this approach can be justified using limits.
Meshgrid would replace your code for repmat, but I can't think of a way to do it in one, simple line. Using your example: A=[4 5 6]; B=[0 -1 2 3]'; [AA, BB] = meshgrid(A, B); AA+BB % output
bsxfun(@plus,A,B)
Upvote for bringing up *bsxfun* - more people should know about this.
It looks like your error is coming from your definition of 'out', and that you're being inconsistent with 'symbolics' and variables with numerical values. The error probably comes from this line: &gt;out = double(int(int(mvnpdf([x1 x2], mu, sigma), x2, -Inf, fun(x1)), x1, -Inf, Inf)); I would check, but I don't have access to Matlab at the moment. Anyway, are you trying to get a numerical or analytical solution? If you want a numerical solution, you should get rid of all the 'syms' and 'subs' which are only used if you want Matlab to find a closed-form expression in terms of the variable names you supplied. It looks like you want a numerical solution, since an analytical solution couldn't be found for an arbitrary function 'fun'. This is also why it is probably telling you that "Explicit integral could not be found" because there is just no way to integrate analytically. Anyway, get rid of all the symbolic math things like 'syms' and 'subs' and see where that gets you. 
I get this message immediately: ??? Undefined function or variable 'x1'. Error in ==&gt; problem_two at 15 out = double(int(int(mvnpdf([x1 x2], mu, sigma), x2, -Inf, fun(x1)), x1, -Inf, Inf)); When I input the syms, it went away so I thought that was what solved it. The subs I thought would help but didn't and I just forgot to take those out. Because it's a double integral, can I not use quad? And thank you
You should be defining 'out' after you define x1 and x2. It's telling you that you haven't assigned numerical values to them yet. You do this later when you write &gt;[X1,X2] = meshgrid(linspace(-5,5,25)', linspace(-5,5,25)'); but this needs to happen _before_ you use them. But I'm not sure that feeding x1 and x2 to 'mvnpdf' will give you the result that you are looking for. The Matlab guide says &gt;y = mvnpdf(X,MU,SIGMA) returns the density of the multivariate normal distribution with mean MU and covariance SIGMA, evaluated at each row of X. I think all of your rows in x1 and x2 will be the same and will give the same result for each entry in 'out', which is probably not what you wanted. Also, Matlab is case sensitive, so make sure you are using either all x1 and x2 or all X1 and X2. 
Also, quad probably won't help. You're better off adding up all of the values in 'out' and multiplying by your step sizes once you get everything straightened out.
x1, x2 and X1, X2 are intended to be different. X1 and X2 are just to create a visual representation that isn't actually needed for the solution. x1 and x2 are supposed to be integrated for every value for x1 and for every value less than fun(x1) for x2. Are you suggesting I combine the two and remove the integrations? (If that made any sense). Also, out is supposed to be a double. The Stanford guide says "In MATLAB, there is no need to declare a variable before assigning a value to it. If a variable has previously been assigned a value, the new value overrides the predecessor." How would I declare it a double? P.S. If you couldn't tell, I've never really looked at MATLAB until this summer.
&gt;In MATLAB, there is no need to declare a variable before assigning a value to it. True. But the error occurs because there was no value at all assigned to it. Also, forget about declaring it as a double. Matlab doesn't really care about conserving memory. I think all numbers are double precision by default. There is some typing in Matlab, but this is only to tell the difference between numbers, strings, arrays, cells, structures, etc. It doesn't get any more specific. I didn't realize that x1 and X1 were supposed to be different. That is a bit confusing. Anyway, it seems that you are looking at some oddly-shaped region, since you are integrating over x1 and x2: x2&lt;fun(x1). It isn't exactly easy to tell you how to do that numerically. I wish I could draw a picture. Think about the trapezoid rule for a 1-D integration. One will multiply by the step size because all of the trapezoids are the same length in the x direction. For a 2-D integration, we are adding the volume of different height prisms. The problem here is that not all of your prisms will be square, since your function probably cuts off parts of some of them. Anyway, I will go to bed soon. But use a for loop to assign values to 'out' as &gt;x1=linspace(a,b,del); &gt;x2=linspace(c,d,del); &gt;out=zeros(n,n); &gt;for i=1:n &gt;&gt;for j=1:n &gt;&gt;&gt;if x1(i)&lt;fun(x2(j)) &gt;&gt;&gt;&gt;out(i,j)=mvnpdf([x1(i) x2(j)], mu, sigma); &gt;&gt;&gt;end &gt;&gt;end &gt;end I'll leave it to you to multiply the values of out by the correct dimensions to get your desired integral.
The reason I declared it a double was because the answer came out in this form: pi/exp(2069265617858477/1125899906842624). That's probably a problem in itself. I'll work on the multiplication part but to be completely serious I have no clue what you said. I'll probably have to review double integrals for a bit. No need to explain it, I'll get it Thank you so much!
Are you displaying it in the command window? How many digits do you want? longeng displays 16. shoreng displays 5. I tried the follow script. format longeng a=1.034143241412341; b=4.34134124123412; c=a+b; disp(c); Shows up as 5.37548448264646e+000 in my command window. Which is what I would expect.
I've never heard of MATLAB changing its display format on its own. Did you try changing the format in Preferences? Also, can you post your script (or a stripped-down version) that exhibits this behavior? Are you calling any custom functions that internally change the format?
format('long', 'eng'); syms c vux5 vuy5; B = zeros(9, 18); B(1,1:9) = [1/2 0 3/5 0 0 0 1/2 0 3/5]; vu_n = [0; 0; 0; 0; 0; c; 0; 0; vux5; vuy5; 0; c; 0; 0; 0; 0; 0; c]; eq11 = B(1,:).vu_n + B(1,:).vu_n + B(1,:).vu_n +B(1,:).vu_n -1; Y=solve(eq11); I understand that Y is a displayed as fraction because B function is written as fractions. Is there anyway to force all display in command window to be scientific regardless of the functions used in the script? Edit: This text box does not let me show the multiplication symbol. So, * in eq11 is replaced with .
This should probably do what you're asking. I have no idea what you're doing with these numbers, but keep in mind that the third group is only half the size of the first two. stepsize = 40; n = size(HT,2); m = ceil(n/stepsize); HTsum = zeros(size(HT,1), m); for i=1:m start = (i-1)*stepsize + 1; stop = min(i*stepsize, n); HTsum(:,i) = sum(HT(:, start:stop), 2); end 
if HT is your 718 x 110 matrix, you are essentially wanting to sum over the columns of three sub matrices and concatenate them. Here is what I came up with: HT = load whatevs out = [ sum(HT(:, 1:40), 2), sum(HT(:, 41:80), 2), sum(HT(:, 81:110), 2)]; where sum(X, 2) sums over the row data, and we are just selecting a sub matrix consisting of all rows, and only a subset of the columns so HT(:, 1:40) is just the first 40 columns sum(HT(:, 1:40)) would output a 40-length vector representing the sums down the columns and sum(HT(:, 1:40), 2) outputs a 718 length vector representing the sums of the row over only the first 40 columns. When you put it all together, you get a 718x3 output. Tell me if it works for you. If not, I may be confused by what you're asking.
Very clever! Thanks a lot for your time and help. I think I understand all the lines in the code. 
I want more of a general approach. Lexarius code is just what I was looking for. But thanks for your suggestion! 
Sort of what I was trying to do. You can replace "1:40", with any vector of "n1:n2" and it will select those columns. Here, I'll rewrite it based on your original code: clc clear HT = load('raw soil.txt'); cols = 1:40; HT1 = sum(HT(:,cols), 2); cols2 = 41:100 HT2 = sum(HT(:,cols), 2); HTout = [HT1, HT2]; or for slowish looping cols = {1:40; 41:80; 100:500}; HTout = []; for iter = 1 : length(cols) HTout = [HTout, sum(HT(:, cols{iter}), 2)]; end Really, the main suggestion I'm saying it to just try to use the built-in vectorized scripts. They are a lot faster than any iteration will ever be. *EDIT: Nevermind, I didn't look at the other code snippet closely at all. Kindly ignore this post :/ Just trying to pass time doing this instead of actually working on my own matlab, and the result is it all comes out meh.
What do you mean more general? You should avoid for loops in Matlab whenever there is a vector operation available. sum is a better method than a loop.
Fair enough. Thanks for your reply. 
OK. I will keep that in mind. Thanks for your help.
The issue is that Y is a symbolic value (class of sym), so it follows different rules for the display/disp methods. If you do this: Yd = double(Y) it will display in the long eng format.
Thanks! Is there anyway to preset the display type of symbolic values? 
I can't find any. You can, if you're brave, look into the disp.m file for the syms class: &gt;&gt; edit('C:\Program Files\MATLAB\R2011a\toolbox\symbolic\symbolic\@sym\disp.m') but I didn't see anything in there that was easily understandable or documented. This could be a good quesiton for [MATLAB Answers](http://www.mathworks.com/matlabcentral/answers/).
need more details!! are you using 'hold on'?
ummm, guide?
Sorry I wasn't being clear enough. So what we want is two graphs being plotted simultaneously in the GUI interface. One of the plots is a probability plot and the other is a donut plot we made that has an arrow point the most probable degree. The probability plot simply uses the plot function and works fine, but when we combine it with our donut plot, the donut plot pops up in a different figure window. We got rid of the different window by commenting out the "figure" function, but then the two just started to overlap each other in the GUI interface. We have so far come close by using the "subplot" function and have both figures plotted on the GUI interface. Our new problem is with the donut, since it is iterative data the plots continually change and are updated. The probability plot replaces itself fine, but the donut plot keeps overlaying itself so we get a clustercuss of arrows everywhere. I hope my explanation made some sense of what's going on. Thanks for your time!
Sounds like you need to turn hold off on the donut plot. Each update will then replace the previous set of points.
You need the subplot() [function](http://www.dartmouth.edu/~rc/classes/intro_matlab/Matlab-subplots.html). plus 'hold on', as MayI pointed out.
Check how imshow handles doubles. I'm not sure about imshow, but many libraries take rgb values of 0.0-1.0 rather than 0-255
Your values have to be scaled right. Try `imshow(Ic,[min(reshape(Ic,1,numel(Ic))), max(reshape(Ic,1,numel(Ic)))])`, Or use the automatic version: `imagesc(Ic)`
Imshow wants double precision images to be scaled in [0,1]. yours is not. Use im2double to cast it instead of just double. Im2double has a bonus of scaling it. I'm on my phone, otherwise I'd put an example all up in here.
a(b) is the format for returning the bth element of a, as I'm sure you're used to. This can also be performed in a matrix format to return more than one element at a time. For example: &gt;&gt; a = [21:30] a = 21 22 23 24 25 26 27 28 29 30 &gt;&gt; b = [4 8 2] b = 4 8 2 &gt;&gt; Y = a(b) % Y = [(4th element of a) (8th element of a) (2nd element of a)] Y = 24 28 22 Or, if b was a 2 dimensional matrix: &gt;&gt; a = magic(3) a = 8 1 6 3 5 7 4 9 2 &gt;&gt; b = [7 4; 9 3] b = 7 4 9 3 &gt;&gt; Y = a(b) % Y = [(7th element of a) (4th element of a); (9th element of a) (3rd elemnt of a)] Y = 6 1 2 4 Of course, the value of the elements of b cannot be greater than the number of elements in a. Y will always be the same shape as b. Also, b can be any shape and size you want. Lastly, elements are counted column-wise in MATLAB. edit: formatting 
transparency
Thanks a lot, everyone!! I'll try this tomorrow. Fingers crossed :)
It is simply matrix indexing. Lets break it down. Lets make a matrix called x: x=[100 300 500; 200 400 600]; &gt;&gt; x x = 100 300 500 200 400 600 Now, you can access a matrix elements with it's coordinate, i.e. x(i,j) where i=row, j=column of the element you want. x(1,1) = 100 for instance (i.e. the value in the first row, first column). You can also access a matrix by its "linear index". The linear index is just the index that would access a particular matrix element if that matrix were re-arranged into a 1D vector. You can see how matlab arranges a matrix into a vector with this: &gt;&gt; x(:) ans = 100 200 300 400 500 600 So you can see how matlab constructs a vector of that matrix by simply stacking the columns on top of each other. That tells you that the linear indices for this particular matrix look like this: ind = 1 3 5 2 4 6 So, lets say you wanted to access matrix element containing 400 in x. You could access it with x(2,2) using coordinates. Or you could access it with x(4) using the linear index. Got it? Now, lets say you want to construct a new matrix Y from values that already exist in x, but re-arranged in someway. You construct a new matrix that simply contains the linear indices of the elements you want, and access the matrix that way. Note that the indexing matrix does not have to be the same size. For instance ind = [1 1 1 1; 2 2 2 2]; &gt;&gt; x(ind) ans = 100 100 100 100 200 200 200 200 So, its all just matrix indexing. Very useful.
If you add in the extra condition that the coefficient of the lead term be negative then you will be guaranteed two real roots.
Why did you post this twice?
Why did you post this twice?
waterfall plot
yes I know that is what is weird, like I am sure it says y(2)=1.5, and what is even more weird is that it asks me to then graph the thing from t range of 0.5 to 4....I am not really seeing how it would be able to do that? Idk unless they wanted me to solve it symbolically then graph it? Idk i guess ill just email the professor 
yes I know that is what is weird, like I am sure it says y(2)=1.5, and what is even more weird is that it asks me to then graph the thing from t range of 0.5 to 4....I am not really seeing how it would be able to do that? Idk unless they wanted me to solve it symbolically then graph it? Idk i guess ill just email the professor 
I just noticed you already posted your question here. Again, we really can't do much without seeing the script. [Post the code!](http://paste.ubuntu.com)
Just a small addition: b could also be of logical type, in which case you're performing "Logical Indexing." &gt;&gt;A = magic(3) A = 8 1 6 3 5 7 4 9 2 &gt;&gt; B = [true false false; false true false; false false true] B = 1 0 0 0 1 0 0 0 1 &gt;&gt; A(B) ans = 8 5 2 A and B have to be the exact same size. B has to be of logical type. The indexing A(B) returns all elements in A which correspond to 'true' values in B. This is very useful when you're trying to filter out data based on some criteria: &gt;&gt; C = randn(1e6,1); &gt;&gt; D = C &gt; 1; &gt;&gt; hist(C(D),100) This is equivalent to "show me the histogram of all elements of C which are greater than 1." The shortcut for this is this: &gt;&gt; hist(C(C&gt;1),100)
You can also make the substitution t--&gt;2-t to get the range [0.5,2]
Just in case you didn't get this figured out: 1) You don't have the right f for this problem, you need to rearrange and isolate dy/dt: f= @(t,y) -exp(y)/(t * exp(y) - sin(y)) 2) ode45 is for solving initial value problems. The easiest way is to just solve from 2:0.5 and then 2:4 i.e. ode45(f,[2 0.5],1.5) and ode45(f,[2 4],1.5) and combine them.
You could use a cell array for the variables, and another cell array with their names and the eval command: varCell = {dec_E, dec_N, dec_S, dec_W}; nameCell = {'dec_E', 'dec_N', 'dec_S', 'dec_W'}; for i=1:length(varCell) tmpVar = varCell{i}; eval(['output' nameCell{i} '=' 'tmpVar']); end Edit: missed some key words in post, and changed the code a bit. 
Yes, this is what functions are for, an example: % inside file someFunction.m function output = someFunction(x) for i=1:10 output(i) = i; % some function end % inside a different .m file dec_E = someFunction(input1); dec_W = someFunction(input2); dec_S = someFunction(input3); If you don't want to create a separate .m file for your function it is possible to use inline function objects (http://www.mathworks.com/help/techdoc/ref/inline.html), or anonymous function objects (http://www.mathworks.com/help/techdoc/matlab_prog/f4-70115.html), though these are only convenient for short expressions. It might be handy for you to make this function a sub-function within an m-file containing other functions (http://www.mathworks.com/help/techdoc/matlab_prog/f4-70666.html). Cheers. 
Thanks. I didn't think of using a function. That's the way to do it.
thank you 
mathworks.com/matlabcentral/answers/4946-save-figure-as-eps-from-command-line This might help. I have specific code samples in my office (I do this sort of thing all the time!), so I will be able to be more specific then.
AAhhh the gcf lets me circumvent my issue of not knowing how to use matlab figure handles nicely! I am going to try and write this up but I would love to see your super polished version to compare mine with if/when you can.
resampled = spline(originalTime,originalSpeed,newTime); should do what you want
interp1 should work.
That's what I'm looking for, thank you :)
Thank you. I feel like I underestimate Matlab sometimes haha. If you have a moment, I can use advice on my next step. **Data set 1:** The program I am writing calls on the user to choose two points on a longitude/latitude plot. This data set also contains the speed and time data, so I am able to pull out newTime, e.g., across the defined distance interval. This will be the time vector I want to express the other speed data wrt. **Data set 2:** I would like to find the times closest to the first and last elements in newTime. Finding the *indices* of these points, I can get the originalTime vector. Data set 2 will give me originalTime and originalSpeed. From this I can apply the spline function above to express originalSpeed, from data set 2, along newTime from data set 1. **Q:** Will the 'find' function help me here with a little tweaking in the arguments? Can you offer any suggestions? Thank you. **Edit:** I figured it out (I think). I used the entire time array in data set 2 as originalTime. It looks like the function will take that interval, observe the new time interval (smaller, and lying within it), and interpolate in that region. Does this sound correct?
[/r/statistics](http://www.reddit.com/r/statistics/) tends to have many R posts.
http://www.reddit.com/r/rstats/ It's a little dead though.
Hello, hopefully I am interpreting your question properly. I am currently writing a program that presents plots and allows the user to click on points along the curves, which then saves the location coordinates. I believe this is possible with surf plots, as your stored data will have *x*, *y*, and *z* coordinates. Part of my code looks a little something like this: fig = figure; plot(time,speed) h = datacursormode(fig); datacursormode on disp('Select desired point on curve') pause % optional c_info = getCursorInfo(h); Pos = c_info_ch0.Position; where I store the position information in Pos. The Matlab help section of this is very similar...since I used it as my model. Hope this helps. Edit: [Here's the help page](http://www.mathworks.com/help/techdoc/ref/datacursormode.html)
Almost fooled me with the .jpg extension...
im scared now
????
Here is the code: I = imread('obama.png'); J = imread('bush.png'); %Pics must be of the exact same size N = 50; %Number of in-between pics IB = zeros(size(I), 'uint8'); for n=1:N for i=1:size(I,1) for j=1:size(I,2) for k=1:size(I,3) IB(i,j,k) = (n/N)*J(i,j,k) + (1-n/N)*I(i,j,k); end end end s = ['IMG' num2str(n,'%02d') '=IB;']; eval(s); %imshow(IB); n end for n=1:N eval(['imwrite(IMG' num2str(n,'%02d') ',''IMG' num2str(n,'%02d') '.png'');']); end
I don't mean to be rude, but it usually works a little better when the transition is smoother. Takes a lot more work though. http://vhil.stanford.edu/projects/images/bush-kerry-morph.jpg
Definitely. What I did was more just to fade one image out and the other in, being careful with the position of the eyes and mouth. But you can't do a proper morph, like the one you showed, with matlab. 
Why do you say you can't do it in matlab? You mean there isn't a single dedicated function for it? I'm sure you could manually select some control points and do it pretty easily. http://www.cs.cmu.edu/afs/andrew/scs/cs/15-463/f07/proj3/www/rys/ - an example
Link says .jpg, but it's really a .gif file, since it's animated.
That looks nice, but I think the stanford one looks a lot nicer. The middle images in the stanford morph seem like it's a single shot of a real person instead two pics fading together. Maybe it's just the background, I don't know. I just had the impression that they used a more powerful image software or a lower level language. But I suppose given enough processing power matlab could do anything.
Yea I think having the same color clothes and background makes a big difference - the kerry/bush clothes can morph as smoothly as the faces. I don't really know how the stanford one was done though.
You can also try the "print" command with the eps flag, or you can look for the function "export_fig" on the file exchange.
Unfortunately MATLAB does not outright solve inequalities like this. You need to evaluate the answers given by solve. You can use 'inline' for creating callable objects from string equations: %Which x2 values we want to test x2 = -10:0.01:10; %Solve eqution and create inline object which can be called inleq = inline(solve('x1*x1 + x1 - x2','x1')); %Evaluate inline equation to get vector for each answer f_x2 = inleq(x2); %Find complex answers imag_idx = abs(imag(f_x2))&gt;0; %Find negative answers neg_idx = real(f_x2)&lt;0; %Remove complex and negative answers remove_idx = imag_idx | neg_idx; f_x2(remove_idx) = NaN; %Plot result plot(x2,f_x2) %Find valid answers for x2 ok_answers = ~remove_idx; %x2 which produce valid answers for first answer ok_answers_eq1_x2 = x2(ok_answers(1,:)); %and for second answer ok_answers_eq2_x2 = x2(ok_answers(2,:)); %As we can see, eq1 did not produce any valid answers for x2 ok_answers_eq1_x2 %% Using symbolic toolbox x2_test = -10:0.01:10; syms x1 x2 real eq = solve(x1*x1 + x1 - x2,x1); f_x2 = subs(eq,x2_test); %And rest is same as above
Please have my babies. Thank you a bunch. Might I ask what your mindset was going into this problem? You got rid of the imaginary numbers immediately because we were graphing in reals and then only took the positives because x1 &gt; 0? I owe you many thanks.
Ok, when I try to transpose the bigger problem onto the solution of the smaller problem, I run into trouble. I call another function in the solve() function: A = -10; B = 10; C = -10; D = fun; bind1 = @(x21,x22) problem_three_multivarnorm(x21,x22,mu,Sigma); pr_x22_x21 = quad2d(bind1,A,B,C,D) I use pr_x22_x21 in my solve() function... do I have to take out the inner function problem_three_multivarnorm or is the a way to get around this problem?
1) your sprintf is malformed: only the first %d will be filled in, with whatever the value of your loopcounter (k) is. The rest of the statement will be knocked off. 2) When you're loading data using a variable, don't put the variable name in quotes. You're trying to load a file called sonde instead of the value of the variable sonde. Have a look at the dir command. You can use it to get a list of all of the relevant files in your folder, then iterate through them. For instance: cd(indir); files = dir('*_nohead.m'); for k = 1:length(files) data = load(files(k).name); % etc end
As an idea, you could make a list of the files in that folder (ease of that depends on the system type, I suppose...it's easy on a Linux machine), use MATLAB to sort them in whatever order you want, then use your loop to scan through them all and do the plots. % Create the file unix('ls *.vsf &gt; vsflist', '-echo'); % Now read that file filelist = textread('vsflist', '%s'); % Sort the file list filelist = sort(filelist); for m = 1:size(filelist,1) % Operate on filelist{m,1} end I've done that before, and while it might not be 'pretty', it gets the job done!
Sorry for the delay! My code actually uses the 'print' command as mentioned by thetripp below. My code isn't special in any real way...I have a function that creates a series of plots given a set of data. It produces several figures in this fashion: function simdataplot % Load data here (use your *.dat file input here) load stats.mat % Declare the figure figure(101) % Plot the data plot(stats(:,1),stats(:,2)) % When the plot is complete... print -depsc2 'figure1.eps' end In my case, the files all have the same name, but different directories...so I just cycle through those. You could easily do the same type of thing that cycles through each file for processing.
I'm not sure that I wholly understood the problem, but in general 'solve' needs to have symbolic inputs (either symbolic equations created using 'syms', or pure text). If you want to use functions which only produce numerical output, you should try 'lsqlin' and 'lsqnonlin' (there might be more specific function for your problem). These are generic solvers for linear and nonlinear problems. Both functions try to minimize the squared output of your function by varying your functions input arguments. For example: %Create function which squared output should be minimized, %think of it as solving fun(x) = 0 for x. fun = @(x)x.^2-x+3; %If you would be using function which is inside of m-file, just use %fun = @mfilename; %We need to have first guess for lsqnonlin, %this guess should be close to the answer x_initial = 0; %Solve using lsqnonlin x = lsqnonlin(fun,x_initial) Function can also be multivariate: %Use MATLABs builtin function peaks. Try: %[X Y] = meshgrid(-10:0.1:10,-10:0.1:10); imagesc(X(1,:),Y(:,1),peaks(X,Y)) fun = @(xy)peaks(xy(1),xy(2)) %Evaluate peaks in coordinates x,y %First guess x_initial = [0.3,1.4]; %Solve x = lsqnonlin(fun,x_initial) %Plot results [X Y] = meshgrid(-10:0.1:10,-10:0.1:10); imagesc(X(1,:),Y(:,1),peaks(X,Y)) hold on plot(x_initial(1),x_initial(2),'bx') plot(x(1),x(2),'rx') hold off %We started at the downhill 'slope' of the hill (blue cross), %and we ended at the flat ground (red cross), %not at the bottom of the small dent (blue blob). %Remember that we are minimizing the _squared_ output %of the function. 'lsqnonlin' finds the local minima. I hope this helps at least a little bit. About the mindset of the first problem: I made quick search about solving inequalities using MATLAB and it looked like it can not be done so I thought that evaluating the answer and then indexing might be only answer. Saw the square root at the answer and I removed complex answers mostly because I'm used to complex answers being only rounding errors (for example when calculating inverse Fourier transform for some datasets) and because I thought that having complex answers would affect plotting (actually imaginary part would only had been ignored). 
Rather than generating the file names yourself, you might be able to use 'dir' to get a list of the files to be read, and parse out the information you require and sort the order you read them in to whatever order you want. Just something to think about. 
'what' or 'dir' will return a cell array with the filenames that you're interested in. Then just use a loop to go through them all one at a time 
Wow that is clean and simple. color me impressed. Thanks!
imagesc is always a solid first bet for looking at data from a 2d matrix If you want to say a couple more things about what the data looks like / what you expect to see I could maybe suggest something else too
well the matrix is the jacobian matrix that takes joint torques to muscle forces. (it varies over time because the joints are moving) So in the first set we have an unmodified set and in the second set we have the modified set. Some entries from the original will be reduced or eliminated in the new and some will be increases. This will show that the related muscle/joint pairs have strengthened or reduced their coupling.
Ah I see - yeah it sounds like having two side by side imagesc plots would show that. If the order of magnitude of the numbers is causing issues with the coloring (i.e., a few really really large numbers and then much smaller numbers) I believe there is a way to make the coloring logarithmic but that might take a bit of digging. You could also try something like bar3 if you'd rather use height to show magnitude than color (this would free up color to be used for say the columns ... if that's meaningful)