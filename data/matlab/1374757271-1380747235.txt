Why don't you just use 2 axes. One has the data you want the user to be able to find. One has the actual image. When you call colorbar, reference the axes of the data, not the image.
You're asking MATLAB to load 51GB into memory at 8bpp, even worse if it's a double matrix. You're going to have a problem unless you're using one of the distributed computing packages. Is there a reason you can't load one frame at a time? Why do you need all the frames in memory?
Thanks a bunch mate! Exactly what I needed. Functioning fine now :) Thanks!
I know it does, but i've noticed that every window I open increases the memory matlab uses (the one you've highlighted in 'clicky').. even after I close the window!! This 'window memory leak' isn't as bad as whatever is saved when I load files.
My understanding of pack is that it essentially... defragments or compacts the data your storing?? I need to try this out, but when looking at what matlab says in its description of pack it says this: The MATLABÂ® software temporarily stores your workspace datain a file called tp######.mat (where ###### isa numeric value) that is located in your temporary folder. (You canuse the command dir(tempdir) to see the files inthis folder). Next time it doesn't release it the way it should I'm going to see if I can see whats going on with dir(tempdir) maybe clearing that is all I need to do... then again maybe not.
Yeah, it's a problem in every field with Matlab. People who use it mostly for math-y things focus on the math, and not on the programming style. Which is a shame, because (as you can probably tell) writing good Matlab code is much different from writing good Python code or good C code or whatever. There's a less frequent but equally annoying problem on the other side, where people who use Matlab for other reasons (e.g. psychologists who use it to present stimuli -- there are some pretty good toolboxes for that) learn ONLY to program, and not how to use the matrix/mathematical capabilities to the fullest. And their code is usually pretty sloppy too, as they tend to only learn enough to get their stuff (kind of) working, but not to write tight, efficient, bug-free code. It would be really great to strike more of a balance. Someday I'll have time to write that book... someday. Probably not in time to help you with your studies, though (although it seems like you're doing OK on your own -- I have already learned a couple things I didn't know either from your work here, like how to use bsxfun effectively...).
weird my bad. 
Probably but I had a lot of constants and definitions to scroll through and it was annoying. I also had no idea you could do block text removal.
Yeah as I said it's an ingenius idea and in your position I'd have done the same thing (if I had thought of it =P). I too had a massive array of stuff that I needed to scroll through so this is why I asked the question =P
have you seen those games like tap tap revolution? something like a figure that comes into the right side of the screen and comes out the left side
You can have your program change the 'position' attribute of the figure, which determines its location on the screen. Combine this with get(0,'ScreenSize'), and you can adjust the rate and trajectory of the figure window.
Actually that works...kind of embarassed I didn't think of that myself! I've never written a script this big before I guess I got too wrapped up in complexity and need to take a step back every once in a while! Thanks again! 
One thing you could do is modify the figures CloseRequestFcn property such that it modifies a global variable which your loop checks for.
This sounds promising...could you go into some more detail about how this is done please?
Hi sorry. Actually I think that your best bet is to use the waitfor() command. Read up on it, it basically just waits until whatever graphics object you want changes to whatever property you want. There are a few other options as well, including waitforbuttonpress, which might be the easiest in your case.
We all do it ;) Glad you got it sorted. I highly suggest you buy a rubber duck. They are perfect for these situations.
Learning languages from a book or something is almost impossible in my opinion. Try a project, or getting something specific to work (like maybe writing a program that solves simultaneous equations, then trimulatenous, then it solves n-multaneos equations). Then google each step that you are struggling with. Look at other peoples solutions, when no solutions work from the web, come here, post your question and hopefully someone else will be able to answer it.
Reposting because I realized my first answer was a bit opaque. You shouldn't be pausing in a loop. There should be an event listener on the click event of picking a data point. Keep the list of points in the figure's userdata field. Add a second event listener on a "done" button or something to run the calculation from the data you've already collected. As an example, create two functions: function myClickFcn( src, evt ) point = get(src, 'CurrentPoint'); disp(sprintf('clicked: %d %d', point(1), point(2))) ud = get(src,'UserData'); ud = [ud; point]; set(src, 'UserData', ud); end That first function will be called when you click on the figure. The next one will be called when you try to close the figure. function myCloseFcn( src, evt ) ud = get(src, 'UserData'); disp(sprintf('clicked %d points', size(ud,1))) x = ud(:,1); y = ud(:,2); L = sqrt(sum( diff(x).^2 + diff(y).^2 )); disp(sprintf('total path length was %f', L)); delete(gcf); end Then to actually create the figure use this line of code: h = figure('WindowButtonDownFcn', @myClickFcn, ... 'CloseRequestFcn', @myCloseFcn); So, what happens is that line creates a figure with some special behavior. It will call myClickFcn every time you click the figure and it will call myCloseFcn when you close it. The figure handle is automatically passed to the functions as their first argument called src. From that figure handle we can get the clicked point and store it in the figure's userdata field. When the figure closes, the second function gets called and reads the userdata field and does some processing on it. This is the Right Way(tm) to handle user interaction on figures. It's best to avoid loops and pauses if you can avoid it. Note also, that while that figure is active you can still use the matlab command line, which you probably couldn't do while paused.
Matlab prefers contiguous blocks of memory and over the course of time memory gets fragmented. So to cure this, it basically saves all the variables in .mat file then clears all the memory then reloads your variables in a defragmented arrangement. By any chance are you running any mex files? that might cause an extra bit of memory leak. 
thanks very helpful! is there any way of inserting a picture (e.g .jpg file) into the GUI?
Absolutely--just create an axis component to the GUI, name it something like "image_ax" and in the gui opening function (usually something like yourGUI_openingFcn(...)) call imshow('penis.jpg','parent',handles.image_ax) or whatever image you want.
Yeah. I'm not sure what the perfect balance would be either... I would kind of suggest a 75-25 but there's also the other problem of "How do you teach the programming language". I think ultimately you need a bunch of 'tips and tricks'. The knowledge of certain functions existing and how they work is always useful, so it's a bit like learning any language's vocab. Alternatively there's learning and exploring on your own. I think a mix of both is required. I'm mostly learning on my own and when it comes down to using some functions I just get absolutely lost in what they do (bsxfun is a perfect example here). I just had to know how it worked and the only way I found out was when looking on mathworks matlab section. After I found out how you use it in one particular case everything else became much clearer. Yeah as I say, I just test a lot =P Also my mentor is pretty good at matlab so that really helps and finally google has been my friend many a time =P
Here's a quick GUI I just threw together. It doesn't do anything, so you'll need to add callback function to each checkbox (= "what should the program do when I check or uncheck a box?") or add a pushbutton to the GUI to perform some action when pressed. % make fake data N = 5+randi(10); x = randi(25,[1,N]); % create the containing figure hf = figure; % vertical spacing for the object layout vspacing = 1/N; for n = 1:N hcb(n) = uicontrol(... 'Style','Checkbox',...% it's a checkbox 'Units','Normalized',...% units are normalized, so position is between 0 and 1 'Position', [0.1, 1-(n-1)*vspacing, 0.15, vspacing],...% set the position and size of the box 'String', num2str(x(n)),...% put the value next to the checkbox 'BackgroundColor', rand(1,3)); % make it a random color for variety end
[Mathworks Basic Tutorial](http://www.mathworks.com/company/newsletters/articles/introduction-to-object-oriented-programming-in-matlab.html) [MIT Powerpoint](http://web.mit.edu/~paul_s/www/14.170/matlab/tex/matlabOO.pdf) What I like to do is to find reviews for different text online and then see if I can't find it on Scribd.com in a pdf format. I then download them and upload them to my kindle so I can take it on flights to read. Here are some scribd articles I found: [Matlab OOP (scribd)](http://www.scribd.com/doc/32394093/Matlab-Oop) [2nd article from scribd](http://www.scribd.com/doc/90290567/Object-Oriented-Programming-MATLAB) Hope that helps!
From the regionprops help: BW = imread('text.png'); s = regionprops(BW, 'centroid'); centroids = cat(1, s.Centroid); imshow(BW) hold on plot(centroids(:,1), centroids(:,2), 'b*') hold off
Thanks for the help man. I modified your code a bit so it would work with the excel file: [~,sheets] = xlsfinfo('results_b34.xlsx'); N = numel(sheets); display(N); x = sheets; hf = figure; vspacing = 1/N; for n = 1:N hcb(n) = uicontrol(... 'Style','Checkbox',...% it's a checkbox 'Units','Normalized',...% units are normalized, so position is between 0 and 1 'Position', [0.1, 1-(n-1)*vspacing, 0.15, vspacing],...% set the position and size of the box 'String',x(n)); end The issue is that it reads that the excel file has 12 sheets, but only creates 11 checkboxes with each box being labeled with 1 sheet - the problem is 1 sheet is left out. Do you know how I can fix this?
Is N = 12? Is sheets also 12 elements long and has valid sheet names in each element? Otherwise I'm thinking that the spacing got messed up and one of the boxes is off the edge? Try: vspacing = 0.9*(1/N); This will make each box a little shorter.
If you've never been exposed to OOP, you're not going to learn it by trying a project.
Thanks for the help! I have it almost working now. Is there a way to incorporate the data cursor? The figure represents a data matrix, and the data cursor conveniently returns the m x n values of that matrix so I can call the original data. The WindowsButtonDownFcn returns something else that changes if the user resizes the window.
This looks wonderful, I love you. No homo.
I'm not quite sure what you're trying to do, but if you want axes positions you can do it like this: h = figure('WindowButtonDownFcn', @myClickFcn, ... 'CloseRequestFcn', @myCloseFcn); plot(1:100, randn(1,100)); And replace your button down function to use axes positions: function myClickFcn( src, evt ) point = get(gca, 'CurrentPoint'); point = point(1,[1 2]); disp(sprintf('clicked: %f %f', point(1), point(2))) ud = get(src,'UserData'); ud = [ud; point]; set(src, 'UserData', ud); end 
Really? What are you, twelve?
I take examples and problems from books, but I love having books because of reference materials. I can also use these offline, on trains, for example. I do agree with your premise, though.
For some reason, I was never able to understand classes and object just by looking at code. I sort of got the idea once I started reading material, and seeing their simple analogies, but good god there is an appreciable level of abstraction for beginners. I can see OOP is going to be useful, but there is a bit of a curve in getting there.
Gah! Pastebin that shit :x Or add 4 spaces (per indent level) before each line so Reddit treats it as code. 
Quite. It helps to not resort to juvenile and offensive homophobic jokes.
Thanks for the advice man. I've got another question - I have an edit box in a gui and I want to be able to read in what is written. To do so, I use handles.edit1 = get(hObject,'String'); However, when I display handles.edit1, I keep getting 183.0234 instead of pbs1 (what I actually wrote). How do I fix this?
You mistake me; I'm all for humor, even bad humor. What I am not for is homophobic (or sexist, or racist) humor.
Rewriting with clarity, then I'll respond: ----------- Hey guys. I'm working on a gui that will feature checkboxes which are then acted upon. Here's the code: function GUIstuff() [~,sheets] = xlsfinfo('results_b34.xlsx'); N = numel(sheets); x = sheets; hf = figure; set(hf, 'Position', [500, 500, 150, 500]); vspacing = 1/N; function checkCall display(1); end function displayOnes var x; x = cell2mat(x); oneArray = find(x==1); display(oneArray); end % &lt;----**what's this end doing here?** for n = 1:N hcb(n) = uicontrol(... 'Style','Checkbox',...% it's a checkbox 'Units','Normalized',... % units are normalized, so position is between 0 and 1 'Position', [0, 1-(n)*vspacing, 1, vspacing],...% set the position and size of the box 'String',x(n),... 'Callback',@checkCall); end uicontrol('Style', 'pushbutton', 'String', 'Graph',... 'Position', [95 250 50 20],... 'Callback', @displayOnes); % Pushbutton string callback uicontrol('Style', 'pushbutton', 'String', 'Cancel',... 'Position', [95 220 50 20],... 'Callback', 'close(hf)'); % Pushbutton string callback end When a box is checked, I want it to set the value of that sheetname to 1 so later on I can run a function that acts on all sheets with a name of 1. First of, does anyone have a better idea, and second, why does it tell me "Error using GUIstuff&gt;checkCall Too many input arguments."? Thanks!
Fair enough. It looks to me, in hindsight, to probably be misplaced. I was simply overjoyed at the time because OOP is not something I have done before, and having as much material as possible will help me remove my temporary idiocy in the subject. I still have no idea why OOP is even necessary, besides as a means to keep some information together. From an organization standpoint, it is superior, and maybe I have been spoiled by MATLAB, but I see the organization comparable to my main.m callers I have in place, which do nothing but create properties and methods and call them.
This works for getting the right indices, thanks! One more question and then everything should be perfect: When doing calculations in myClickFcn, I need to access data from other functions in the GUI, but it doesn't seem to be recognizing the handles structures, even though I've updated them with guidata in all other functions? 
I use simulink for algorithm design and I love it. Sometimes, though, I get the feeling that it's an unfinished product. Certain tasks, such as interfacing simulink models with matlab functions, can be very awkward.
thank you! 
No problems. He does have some good points, but I try not to let something like that bother me. Thanks again or the material, I looked through almost all of it already!
While this may not be popular, you may want to try out matplotlib, but only if you do not have the need for special toolboxes from matlab.
I would try finding all the 'edges' then finding intersections of those edges. Look into image processing, and specifically convolution filtering.
There are many ways to find the subpixel corners and different people will prefer different methods. I like to do the following if there is no time restrictions and the distortions are small: You can "normalize the problem" by calculating the inaccurate homography and then rectify the chessboard (such that it looks like it has been imaged from straight up). Now each calibration image will look pretty much the same. For each corner, calculate normalized cross correlation with horizontal and vertical edge detector (for example [ones(10,1); zeros(10,1)]) near the corner. For both vertical and horizontal edge, find peaks of the 2D correlation function and fit line trough the peaks. Now you have two lines, find the intersection -&gt; subpixel location of the corner. For greater accuracy find the subpixel peaks of the correlation functions and do not use peaks near the approximate location of the corner (as the correlations will be small near the corner). Edit: Misread your question. But, after you have accurate positions of the 4 corners, you can use the same method for finding the accurate positions of the inner corners. Use the estimated homography to get the inaccurate positions of the inner corners.
Sorry, I should have provided more information. What you guys are suggesting sounds like other algorithms for detecting the corners. I am only trying to get good estimates for the corners. I already have a Harris corner detection algorithm that locates the corners to a precision of 1 pixel, but it needs good initial estimates (which is what I'm after). I used the line equation X = (1-lambda)X1 + (lambda)X2, where X1 and X2 are two points, lambda is a scalar from 0 --&gt; 1, and X are points on the line segment of X1 and X2. Different values of lambda give different points on the line. These provided terrible estimates (because the points are at equal distances from each other) and when inputted to my Harris detector, I could not detect accurate corners because my estimates were not good enough. I am looking for a way to get better estimates (other than manually ginput'ing all of the corners, for obvious reasons). (Here are the estimated points using the line equation; can see that the estimates are bad) http://tinypic.com/r/2czvuy8/5 (Here is what resulted from the Harris algorithm; can see that some points were very good, others are terrible) http://tinypic.com/r/33w5loy/5
Btw, something like the method mentioned here http://www.cis.rit.edu/people/faculty/rhody/EdgeDetection.htm is what I had in mind. 
On the first picture (with the line equation) it looks like the only reason the points were placed poorly is that there were too many of them. On the picture there are 11 inside corners on the front row (excluding the two end points) but you placed 12 points. Drop that to 11 and I'll bet you get a really good answer. 
To get good intial estimates, compute the "saddleness" of the image. A corner is a saddle point in the intensity surface. So calculate the Hessian (the matrix of second partial derivatives) and compute the determinant. Use the [second derivative test](http://en.wikipedia.org/wiki/Second_partial_derivative_test) to conclude that if the determinant is negative, a saddle point exists. For example, this is the "saddleness" of a chessboard image: https://github.com/eldridgejm/chessvision/blob/master/report/figures/saddleness.png?raw=true
That's odd. The handles structure should contain handles to all the child elements. Can you post the code where you 1) create the child GUI elements and 2) try to access it along with a more detailed description of what goes wrong?
I'm not sure what child elements are, but I've got 3 sets of data from another function entered into an image matrix A: A=handles.A1 + handles.A2 + handles.A3; Then there is a bunch of stuff to plot the matrix the way I want it. When the figure is created I've used your method: figure('WindowButtonDownFcn',@myClickFcn,'CloseRequestFcn', @myCloseFcn); set(gcf,'name',sprintf('%s', handles.imageName)) imagesc(A) Then I update the handles structure: handles.A=A; guidata(hObject,handles) For the MyClickFcn it is again what you said to do: function myClickFcn(hObject,event,handles) point = get(gca, 'CurrentPoint'); point = point(1,[1 2]); x1=round(point(1)); y1=round(point(2)); B1=handles.A1(x1,y1); B2=handles.A2(x1,y1); B3=handles.A3(x1,y1); When I try to run the myClickFcn, I get the following error: ??? Undefined variable handles. ??? Error while evaluating figure WindowButtonDownFcn
&gt; A=handles.A1 + handles.A2 + handles.A3; I don't really know what you're trying to do, but I cannot imagine any situation in which this line of code doesn't break something. I think you're a little confused about what handles are and how they work. Try the following code: H = plot([1 2 3],[2 3 5]) H will be some number (when I ran it I got 502.0007), but the specific value doesn't matter. The Matlab GUI library was built before Matlab supported objects so the API is a little arcane. Basically what happens is that Matlab keeps track of all the GUI elements that exist and assigns each one a number so you can reference it later. The gui elements each get a handle which is just a number that doesn't mean anything other than as an identifier. You can then use GET and SET to change properties: set(H,'LineWidth',4) This line says, go find the gui element with id number (handle) H and set it's "LineWidth" property to 4. If you add a bunch of handles together, like you did on your first line, you're going to get some new number that is almost certainly *not* the identifier of any particular gui element. It would be like adding together the numbers on two license plates -- the sum just doesn't mean anything. On the myClickFcn callback the handles argument gets passed a structure that contains all of the handles (the id numbers) for the gui elements in the form. That way you can have a callback on one element reference another, for example if you want to read or update some other field. So, when you want to make an imagesc plot and keep it's handle, don't store the plotted data in handles, store the handle in handles. Instead of: imagesc(A); handles.A=A; guidata(hObject,handles) Do this: handles.A = imagesc(A); guidata(hObject, handles); 
You're definitely right about me having a rough understanding of the handles structures! However, I realize what I typed previously was not actually my code (I tried to edit it to shorter variables so it looked neater), let me try once more... Within this function, I define my image data: x=rand(5); y=rand(5); z=rand(5); A= x + y+ z; Then I create the figure: figure('WindowButtonDownFcn',@myClickFcn,'CloseRequestFcn', @myCloseFcn); set(gcf,'name',sprintf('%s', handles.imageName)) imagesc(A) Then I update the handles: handles.x=x; handles.y=y; handles.z=z; guidata(hObject,handles) The MyClickFcn runs: function myClickFcn(hObject,event,handles) point = get(gca, 'CurrentPoint'); point = point(1,[1 2]); r=round(point(1)); t=round(point(2)); B1=handles.x(r,t); B2=handles.y(r,t); B3=handles.z(r,t); At which point I get the errors above. Sorry for the confusion! 
I've been trying to find similar information, but for GPU performance results. Unfortunately those are even harder to come across and slightly harder to make use of since performance will vary wildly based on use case. If you do compile some data I'd be willing to contribute. I have access to a fair range of machines to get results from.
I'm formulating a benchmark suite in my head. I'd probably need people with GPUs to contribute code since I don't do much of that and I'd need some complex but simple simulink models. Something like a ball falling with air resistance or something that I can benchmark at different time steps. (Continuous time, Ts=0.1, 0.01, 0.001, 0.0001, etc).
What is wrong with the existing set of GPU benchmarks? This guy has done a decent job poking around the various options currently floating around. No hard numbers on a given GPU though :\ http://people.maths.ox.ac.uk/gilesm/matlab_gpu/index.html
Can't argue with that reason ;) I think there are one or two more floating around the Mathworks introduction to GPU capabilities. There is definitely a blog post walking through a very basic A/b equation solving benchmark. That might be one of the tests included in that suite though.. I honestly didn't pay much attention.
Just want to say thanks to everyone who helped here, I managed to crack it!!!!
Convolution via FFT multiplication is CIRCULAR convolution. You need to zero-pad.
The result I got looked like it was expected, except near zero and the truncation point. 
ahhh ok. I will try this out thank you.
Cool program. You should also look into busses if you do a lot of complex Simulink modeling.
Figuring out the right way to truncate the conv output always drives me nuts. A way to never have to worry about that again is to use the filter command: http://www.mathworks.com/help/matlab/ref/filter.html. Filter is designed for implementing an autoregressive model with input, but it can be used to perform convolution on a linear domain and no zero-padding is required. Try: &gt;&gt; filter( impulseResponse(end:-1:1), 1, input ) This should be exactly what you want.
Looking at the math, how about: 1. convert excitation to frequency domain 2. multiply H(f) and X(f) = Y(f) 3. Inverse fourier on Y(f) if you want the time domain
conv(a,b,'same') isn't sufficient?
Question: have you made any attempt whatsoever to solve your homework assignment? Or do you expect one of us to just do it for you?
Answer: As I said &gt; You can use max to do this: &gt; [~,output] = max(matrix); &gt; However this technique is slow. So in answer to your question; Yes. I have made many attempts at this. But I'm just trying to speed up my code and currently max is taking up around 49% of the time. Bsxfun is taking up most of the rest of the time.
Instead of your approach, I have solved it in the worst way I can imagine (without thinking too long about it). [a b] = size(M); awesomeResults = []; for rowIndex = 1:b foundOne = 0; for columnIndex = 1:a if ~foundOne if M(columnIndex,rowIndex) == 1 awesomeResults = [awesomeResults columnIndex]; foundOne = 1; end end end end Features: reallocates output for every column, iterates over entire matrix even after finding result, doesn't handle columns with no ones (though I guess that wasn't specified). As a bonus, the loop variables are named backwards.
lol =D Well I haven't tested it's speed against max but it definitely looks slower =P
I looked for the same thing for quite a while. The only thing I could find was this: http://folk.uio.no/jorgentr/GPUBenchReport/, which is pretty bare-bones and also a bit out date now. 
I didn't get much done at work today, but at least I came up with this: output = (size(M,1)+1)*ones(1,size(M,2)) - sum(M); This only works if all of the values after the first 1 in the column are also 1. Then you'll notice the answer for each column is just (4 - sum of the column). For 14 columns in M, it is 4 times faster than using 'max'
Don't save the string to handles.edit1, that is the handle of the edit box (equal to hObject in this case). Just use any other variable to store it. Then display it.
&gt; `[~,output] = max(matrix);` &gt; However this technique is slow. er...no it's not. What's your *a* and *b*?
I was thinking the same thing, I tried it with a 100x100 matrix and it took ~50 microseconds.
is this an international version? I've seen some pretty nasty errors in those. I believe den-conv([1 0 0],[i 5]); is actually den = conv([1 0 0],[i 5]); and ncomp:0.8*[ 1 1 ] ; is ncomp = 0.8*[ 1 1 ] ; There are also more than a few : that need to become =. Otherwise most of those commands wouldn't do anything. I have no clue about the set ies command though. As far as I can see, there is no command that looks like 'set ies', nor is there a variable by that name defined. Did they provide a custom function?
Some extra info, it's a uk univeristy I'm using it at if that makes any small differences? This were set by my lecturer as I had to repeat his coursework due to missing it because of illness during the school year. I think I am the only person repeating it so I can't even ask anyone else for help. It was sent on an A4 page and it looks like its been typed into word, in one of them he even mixed up clf with elf. that's what really sparked my suspicions, I have 7 examples to get through and nearly every one of them is like this. So I just don't know what to do.
that will only work for periodic signals. Only periodic signals have a Fourier series representation. there are Fourier transform algorithms that can give us the frequency response of aperiodic signals. but they do not have a Fourier series representation. 
 I actually was going to try filter but I did not have access to the signal processing toolbox. I have it now. I will try it out. But I did end up making it work with cconv(). However for my needs I did not pad it with zeros. the reason one pads it with zeros is to obtain the same result as the linear convolution. padding with zeros results in a longer output sequence. my goal is to have an output sequence that is the same length as the input sequence. 
 &gt;&gt; q = rand(1000,100000); &gt;&gt; q = q&gt;.5; &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.020894 seconds. &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.022234 seconds. &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.020437 seconds. &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.023117 seconds. &gt;&gt; &gt;&gt; mean([.020894 .022234 .020437 .023117]) ans = 0.0217 &gt;&gt; q = gpuArray(q); &gt;&gt; a = gpuArray(a); &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.001312 seconds. &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.000603 seconds. &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.000595 seconds. &gt;&gt; tic; [~,a]=max(q); toc Elapsed time is 0.000615 seconds. &gt;&gt; &gt;&gt; mean([.001213, .000603, .000595, .000615]) ans = 7.5650e-04 &gt;&gt; mean([.020894 .022234 .020437 .023117]) - mean([.001213, .000603, .000595, .000615]) ans = 0.0209 The only way I could get any appreciable speedup was to run it on a GPU. If your matrix is sufficiently large, then spmd might offer a speed up, but it would have to be large enough to warrant the extra time to initialize the workers and push the data around. For what it's worth, 'max' is a built in function written in C, so it's about as optimized as you are going to get.
Ok I looked into this further. The purpose of zero-padding the impulse response and input signal is to obtain the same output as a linear convolution. That is what i do not want. So I did a Circular Convolution of the same length as the inout signal. the matlab function cconv() allows you to choose the length of the convolution. this is very close to what I want. But I am going to do some more analysis and maybe some measurements to make sure I am getting the correct output. I have tried the simulation with some white noise and some sinusoids, they look close to what I want but the white noise looked a little off. Thank you for the help though, this did get me close to the right path. 
haven't tried this I tried cconv(a,b,n) where n is the number of samples I want in the output. so I just let n = length(a). 
What if you were to do 1. H(f)-&gt;h(t)-&gt;H(s) 2. x(t)-&gt;X(s) 3. H(s)X(s)-&gt;Y(s) 4. Y(s)-&gt;y(t) s meaning laplace transform. I'm also trying to learn so let me know if this idea is flawed
Buses don't always indicate what is in them and kind of violate some of our modeling standards (my boss hates them) because of that.
conv(a,b,'same') doesn't quite grab the right part of the full circular convolution. Consider an exponential impulse response filter applied to a step function: &gt;&gt; input=[zeros(1,15), ones(1,45)]; &gt;&gt; imResp=exp(-(0:10)); imResp=imResp/sum(imResp); &gt;&gt; plot(f); hold all; &gt;&gt; plot(filter(f,1,input)) The above shows the correct result: causal response starting at bin 16. In contrast, &gt;&gt; plot(conv(input,f,'same')) grabs a time-shifted version of the response that starts too early and wraps in some zero-padded input response at the end that incorrectly mimics the response to a step back down. I think conv(... 'same') assumes a symmetry that is not consistent with causal filtering (I may not be using the language quite right) and thus doesn't work nicely with impulse response problems. There is probably a perfectly standard way to do this with conv, but after futzing with it in grad school for too long, I found that filter always gets it right (up to do I need to reverse the filter because how did I encode the impulse response again???). 
I think the basic "filter" is part of the standard matlab distribution. It works for me and I don't have the signal processing toolbox either.
I tried it with a 20,000 x 20,000 matrix. I didn't tic-toc time it, but it returned with no perceptible delay.
do you have the student version by chance? that includes most of the toolboxes. maybe i am thinking of the time I tried to use an fir1 filter
Nice, clean and ingenius. I remember looking at sum(M) and thinking "Ooo man that's really close but there's 2 ones instead of 2 3s.... I proceded to try and transform it into the actual answer but didn't think of this subtraction. Thanks!
While I don't have that much experience with it, python is a more widely used language. It is something that people outside of the scientific community use for many different applications, but it most likely (like I said, I have limited experience, so I could be wrong) lacks some of the more advanced mathematical operations and concepts that MATLAB has built in. I use MATLAB on a daily basis where I work as a signal processing engineer and I used it exclusively in my applied math masters program. The main drawback to MATLAB is that it's not as developed of a programming language as something like python. However, the ability to quickly create plots in figure windows, prototype GUIs, and have access to high level mathematical operations is very important to my team. That, and the fact that we probably have a million lines of code that there's no way to translate to another language, without reeducating the entire team... I guess I'd say I wished I did more programming with other languages and urge you to use python, but I have found MATLAB incredibly useful. If you could take the CS class and use python, but use some MATLAB on the side, I bet that would give you a taste of both worlds. I say it in that order, only because I feel that MATLAB is fairly easy to pick up on your own.
Those commands were all run in order, a is still the output of [~,a] = max(q) from before. The sole purpose was to preallocate the output array on the GPU. a = gpuArray( zeros(1, size(q,2)) ); will accomplish the same thing.
I see. Also it doesn't seem like the function is actually implemented in 2011a =(
nope. It was introduced in 2011b and you have to have a CUDA enabled GPU to use it. If you have a GPU that is compute enabled, you could always write your own gpu aware version of 'max' in mex-c. That's what we used to do before matlab started supporting GPU's natively. Well written it should be even faster than using gpuArray.
[Loren and the art of matlab](http://blogs.mathworks.com/loren/2008/02/20/under-appreciated-accumarray/) did a good write up. I use it all the time. It's great for aggregating data according to an arbitrary set membership mapping. okay... english. Imagine two time series of data (A and B). You need to bin values observed in A into evenly spaced bins, and for each bin, find all corresponding points in B and apply some function (mean, min, max, etc). E.G. find the mean/min/max of B for all times when a1 &lt; A &lt; a2. Once you generate a membership map ( [~,map] = histc(A, edges); ), you feed that to accumarray along with B, and it works it's magic. It's equivalent to (for this example): edges = linspace(min(A), max(A), 10); [~,map] = histc(A, edges); idxs = unique(map); output = zeros(1,numel(idxs)); for i=1:numel(idxs); members = B( map == idxs(i) ); output(i) = mean(members); end except faster and more flexible 
I second this opinion. Matlab has a lot of toolboxes and other tools that aren't there for python or other languages. It's also much easier in matlab to throw together a quick GUI or some pretty plots for a paper than python or another language. Where matlab begins to falter is when you need to do things that require serious optimization or memory management (or anything low level). If you start writing parallel code, you will find it very easy to hit the wall of matlab's capabilities. I think a good comparison is: matlab is to python as python is to C. As you go up the ladder, you trade in some flexibility and power for the convenience of having the 'details' taken care of for you. It's all good until the language doesn't handle those details in the fashion you need it to.
are you aware of matlab's built in functionality for handling excel spreadsheets? http://www.mathworks.com/help/matlab/spreadsheets.html
O_o... I have no idea how to do that. I need to learn how a GPU works first I guess =P. Well thanks for replying =)
There is nothing that comes close to Simulink. http://www.mathworks.com/products/
I think the the benefit is that accumarray can essentially be used to implement many arbitrary, complicated operations that would normally require for loops in matlab, which tend to be slower than built in functions.
too many for loops!
If anybody has a similar problem I think I found a solution by reshaping the output of generateM and then reshaping again after the function to make the indices acceptable for parfor.
Are you saying you can think of a worse way to solve it with _fewer_ for loops? I guess I could have squeezed a couple more in by avoiding the matrix assignment operator and done the copying element-wise...
Python has a lot libraries like matplotlib and numpy for plotting and matrix computations. They're both similar in terms of syntax (well more similar than Matlab vs Java), so I'd say you'll be fine going with either. 
Ah ok. I was confused because of the unqualified statement that "`max(M)` is slow," since it seems pretty fast to me (without more information) and there's nothing obviously wrong with it, like lots of loops. It seems your situation is more like "my code spends most of its time evaluating `max(M)`, is there any way to make this part faster?" I see the `... -sum(M)` approach is 10%--20% faster, though to be fair, it takes advantage of the additional constraint that all the ones come after all the zeros. &gt; And this is why I asked on this forum. I have no problem with this; this is the place to ask these questions!
The CS dept does offer a half-course on matlab for those with a background in programming, so that's what I might do. It seems like Python is more suitable for general programming purposes and is a more polished language as far as syntax goes, while MATLAB is more oriented towards math/physics and not so much towards other area.
I' not familiar with the technical jargon you used, so to summarize, matlab is better for scientific use, numerical computation, cross-platform compatibility, is that right? Seems like python is a better language overall, but for math/science Matlab might be better since it's more suited for it, is that right?
How often do you actually use this. On my old project we never really used libraries. Most of our work was one off so we wouldn't need to adjust connections between subsystems that often. Our model was pretty big too, 50+mb without including the parameter data. PS: Check out the 13b prerelease (clean line crossing, finally) and you should upload this to the file exchange. 
Yes indeed. My apologies for not being so clear =P It's something I haven't got quite used to on this forum specifically =P. The last time someone didn't understand my question in the slightest =P. Yeah the ...sum(M) approach is actually perfect for my situation and it seems to be up to 4 times faster on the types of arrays that I'm using. Taking advantage of the additional constraints I guess is the way to make your code faster in the end right?
Hmm, I see now. The biggest advantage of Matlab over Python is not having a neckbeard.
Not at all. I'm 'fairly' new to matlab but I'm fairly experienced in logical design, thanks to minecraft, so I kinda got the hang of programming in matlab pretty quickly. I know how to use a MUX but I doubt it's the same thing? =P
No problem. Your initial post sure came across as a homework assignment so I assumed there was a clever answer that the professor was expecting so I started messing around with the only thing faster than built-in functions: matrix operations. I tried applying masks and then noticed the sum resulted in the inverse of what I wanted.
Ahh I see. I myself have never had a computer science degree so I have no idea what programming assignments are actually like =P I have however had a physics degree and what little programming we ever did it was always just "Make this work" rather than "Make this work fast and efficiently"
Someone didn't use LaTeX. I bet it's a unicode thing. Or different versions of word.
Hey guys - just to let y'all know, I figured out how to do this. If anyone needs a copy of the code, feel free to PM me or post below!
I just want to add one thing: the documentation. It's fantastic, and built in to the program.
I totally agree. I'm kind of a mathworks fangirl - and my advisor is a fanboy. Mostly because I'm in controls (yay simulink!) so matlab/simulink is the standard, but also because everything just works the way it's supposed to usually. I've also been to a couple seminars at my school and they've always been well run. Even the beginners seminar was great and I learned quite a bit - despite the fact I'd been using Matlab for 4 years at that point. And I got a free T-shirt, so that's cool! ;) I also had some issues with a relatively new add-on to simulink that I was using for my senior design project. I called mathworks up and they honestly worked with me to figure out the issues and to make sure I was getting things to work out correctly. Turns out I just had waaay too many unknowns, but they helped me figure it out and were timely about the whole thing. I'm currently taking a free online course for robotic control just for fun and they use python. It makes sense for the free online course to use a free programming language, but I always get so frustrated because it seems like things are more complicated and inefficient in python - particularly because we're working with a lot of matrices which matlab excels at. While this is likely partly because I'm still learning python, I do think that objectively matrices should be left to matlab!
Hah, no, it's a function that's [compiled into machine-executable formatthat MATLAB can call.](http://www.mathworks.com/help/matlab/build-cc-mex-files.html) I write them in C, e.g. a function called "foo.c", then you compile it in MATLAB: &gt; mex foo.c and then you can call it just just like any other MATLAB function &gt; a = foo(x,y,z); But it's not interpreted, so there is no "loop penalty" like there is in M-files. It's a bit tricky if you haven't programmed in C before.
Our coding standard at my work is always end every line with a ';'. If you need to print something, print it. So we are not supposed to do x = y.^2 But x = y.^2; disp(x); I kind of like it as it cleans up the code I think, but that may just be because it's what I'm used to. 
Mathworks is also working on updating their entire graphics handling and is likely going to deploy it in R2014a. Yair Altman [has written](http://undocumentedmatlab.com/blog/hg2-update/) a few good posts about it. With the introduction of the new GUI in R2012b we also got [MATLAB apps](http://www.mathworks.com/discovery/matlab-apps.html), which for me has been a huge boon for sharing GUIs and functions between colleagues. It pulls all the dependent files &amp; functions together, along with whatever additional files you want to include (data files, for instance), and bundles them into a single package.
I typically only omit ';' for debugging. Everything I want to output in the finished program I use disp(x).
&gt; Your custom matplotlib/gnuplot/gml scripts that took you days to configure to get your graphs ready for your next submission paper to Nature are the bees-knees. You mean pgfplots, right?
What do you mean not work? What do you want to do, and what is the result showing. P.s. what do you mean by shift? fftshift'ing or shifting to make the convolution operators symmetric?
If you did that, the command line functionality wouldn't make any sense - you would never see any output.
No, it's intuitive the way it is. Think about it like this: in English we use semicolons to indicate that there's more to come; we're not done talking about the current sentence. So in MATLAB, you use semicolons the same way--don't bother me with the output of this line of code because there are more lines to come.
OOoo I see =D That makes a lot more sense. How does it determine which members are in which group? Is that given by a function or something? That's fair enough. I guess the faster the better =)
Yeah... I can programme in machine code so I got excited for a moment then but I've only spend a week in source code in C and let's just say I found it a tad confusing... Weird symbols everywhere... xD But that's actually really cool. I should probably get learning C especially when it can make my code super fast =) In all honesty I don't know why everything isn't just written in C... In the end time is money
That's the way I do it. It's a habit from python, I can't understand why they've made it work this way.
I never omit ; for debugging. It's a mess. I use breakpoints and fprintf or just look at the current variable list to see what is available.
so wait is: % B(1) = val1) + val(2); % B(2) = val(3) + val(5); % B(3) = val(4) + val(6); the function sum? As in why does it do those operations? Why does it do B(1),B(2) and B(3) like that?
yes, that is just what the function is doing using 'sum' as the accumulation function. The 'subs' matrix has rows that correspond to the elements of 'var'. Each row in 'subs' represents where that element of 'var' should be placed in 'B'. When you place multiple elements of 'var' in a single element of 'B' (aka accumulate them), it runs the specified function (in this case @sum) on all of the elements to reduce it to a single value. So in the first example, the first two rows in 'subs' are = 1. This means the first two values of 'var' will be 'accumulated' into B(1) by summing them together (we specified @sum). The third and fifth element of 'var' both correspond to 2 in 'subs', so they are 'accumulated' into B(2). Same thing for element 4 and 6, which correspond to 3. In the second example, the first two rows in 'subs' are = [1 2]. So the same thing as the first example happens, except the first two values of var are 'accumulated' (again using @sum) into B(1,2).
Ohhhhh!! &gt; So in the first example, the first two rows in 'subs' are = 1. This means the first two values of 'var' will be 'accumulated' into B(1) by summing them together (we specified @sum). The third and fifth element of 'var' both correspond to 2 in 'subs', so they are 'accumulated' into B(2). Same thing for element 4 and 6, which correspond to 3. &gt;In the second example, the first two rows in 'subs' are = [1 2]. So the same thing as the first example happens, except the first two values of var are 'accumulated' (again using @sum) into B(1,2). This is exactly wat I needed. The example explained. I get it now and it sounds really quite handy =) Now I just need to see if I can use it somewhere =P.
So I just realized I had a GTX 260 (ancient piece of kit...) in a static bag at home. I also just ordered a GTX 760 (slightly newer, but far from top of the line) to tinker with for a project in dire need of a rewrite. Will try and get some GPU bench results from them tomorrow. I can also get some time on a few Tesla cards to run similar tests. The only problem is they are all probably running different releases of MATLAB and different versions of the parallel toolbox :\ And they definitely aren't on 2013a... Stupid cheap university!
Why not just post it so anyone coming here can see the answer?
Wow, thanks a bunch my friend. Moving the figure call and using avifile() is making this really easy!
Creating and killing a figure hundreds of times makes me sad :( Won't someone think of the poor innocent figure windows?! They just want to be loved...
That's exactly what I did- no elegant solution here unfortunately. If I come up with a better solution, I'll let you know. 
Would the 'hold' command work in this situation? As in hold all;
never used it, but it looks like these links could help: http://www.mathworks.com/parallel-computing/ http://www.mathworks.com/help/distcomp/batch.html
I'm not sure why, I think it might be because there are non-numeric data in the file somewhere. The help file says even if you instruct csvread to look at lines containing only numbers, it will still not work.. i expect something like that is going on, so I was looking for another way.
you could try importdata or fopen and fgetl to get just a line. 
Oh, I see. If that's the case, then fgetl, importdata, and textscan are probably your best bet. If you have excel installed, you can read the file with xlsread and non-numeric data should come in as NaNs, but it's stupidly slow. edit: It looks like the third output of xlsread gives you a cell array of the raw data, which wouldn't replace non-numeric data with NaNs. Still not really your best option though.
hm.. so with textscan, it cannot be used for this file because I do not know the contents of any given row, right? or can it? After reading through the textscan help file, i was left with the impression it wouldnt work for me because you have to specify the format, and the very problem is I do not know the format. Or, do I not understand it right? ill try fgetl and importdata next. thx 
ok. cool. so we've settled on 1 at least. ill look into fgetl and fgets more. thx again
Not sure if this would help, but you can call multiple matlab instances from one instance of matlab. Generally running one per core is fine. It's possible to automate which frames to process in which instance with some clever scripting.
No. Hold preserves whatever is already on the figure and plasters the new plot/bar/whatever on top of it. Given OP's original code it would be useless since he makes a new figure every go round. With the fixed code it would make every graph worthless because of the remnants being preserved making a mess of things. 
do you remember tdfread? it seems like it could work... but i dont know how to get it to stop reading after 10 lines.
it would just be like python, you'd have to print any variable you wanted to see. You don't want to see every variable even at command line; especially not the 1000x1000 arrays.
Couldn't you just put it in a for loop? a = cell(1,n) for i = 1:n a(i) = fgetl(fid); end
doc sprintf
Hey, one of my favorite shirts is actually from Mathworks! And I'm a woman! (Seriously, it's just really comfy!)
I was so confused by this at first, but then I saw the hat (as you might expect someone to do)
You don't really have to use libraries. Anytime you put a bunch of blocks in another block you need to figure out how to order the ports to connect. I'd say it's once per project but this way everyone in our group will be doing it the same way.
I want that hat!
 key = magic(3); val = rand(4,5) h = java.util.HashMap; put = @(x,y)(h.put(num2str(x(1:end)),num2str(y(1:end)))) ret = @(x)(reshape(str2num(h.get(num2str(x(1:end)))),4,5)) put(key,val) ret(key)
This is glorious, do they have these for sale?
Their stickers that they hand out don't hold up to the sun. Mine is fading after less than a year.
I thought you meant _that_ tshit for a second, and I thought that was a little disappointing. "Yay, a matlab hat and one white undershit!"
I seriously want one of those
Needless to say I'm quite happy about my new Matlab build. I'm going to try and make some Simulink models to benchmark those. After this I'm strongly, strongly considering putting together a matlabbenchmarks.net ("cpubenchmark.net") and writing some code to automatically upload bench results. Let everyone compare to each other. Seriously the 2D curves perform so fast it's just a blink and the Matlab logo just skips to the last frame. - Intel Core i7-4770K @ 3.50GHz - Windows 7 x64 - 8 GB RAM (16 GB on the way) - Stock. (Waiting on water cooler to OC) - http://www.cpubenchmark.net/cpu.php?id=1919 - - Intel Core i7 Q 740 @ 1.73GHz - Windows 7 x64 - 12 GB RAM - Dell M6500 Laptop - http://www.cpubenchmark.net/cpu.php?id=852 Edit: Benchmark #2. Just ran [Simulation of Control Systems for a Mobile Robot Platform](http://www.mathworks.com/matlabcentral/fileexchange/42786-simulation-of-control-systems-for-a-mobile-robot-platform). (It was on the Simulink page and looked sufficiently difficult.) load('Project_Workspace.mat') tic;sim('Main_Simulation');toc - 4770k - Elapsed time is 174.125775 seconds. - Q 740 - Elapsed time is 2109.451882 seconds. I guess I can't tell my boss ["Compiling"](http://xkcd.com/303/) as much any more.
That's just so you can store them into an indexable cell array. If you are just going to operate on each line individually then you don't need to use the (i) at all.
you built a rig for matlab usage?
i see, interesting. when i had the a(i) there, i kept getting an error message. thanks.
How does your function compare to [varycolor](http://www.mathworks.com/matlabcentral/fileexchange/21050-varycolor)?
Thanks for sharing those. I had a collaborator at MIT suggest this site too but I didnât know about scripts. He also suggested some other tweaks such as making the axes grey so as to emphasize the data. I will look into using them for production plots
The default colormap for line plots is "line" not "jet" however all of your points still stand! BTW, here is some (slightly inefficient) code that I use to generate equally spaced colors that I then put in my startup.m (set(0,'defaultcolororder',rgbGenerator(50)). rgb=[0 0 1; 0 1 0; 1 0 0]; % if you want to start with RGB counter=2; while(size(rgb,1)&lt;x), % keep going until we have generated enough samples samples=0:1/counter:1; % get all permutations of the samples aa=perms(samples); % store all unique combinations of columns 1-3 bb=unique(aa(:,1:3),'rows'); % append rgb matrix rgb=[rgb; bb]; % make sure rgb only has unique values because some permutations % of 3 could appear in multiple iterations through this loop rgb=unique(rgb,'rows'); % update the counter counter=counter+1; end; % keep only the number of samples requested ind=randperm(size(rgb,1)); rgb=rgb(ind(1:x),:); Cheers.
memory. We mainly use the GPU's to crunch hundreds of thousands of FFTs and element-wise multiplication on 15.8 Mp images. That operation doesn't take a stupid fast GPU core, but it will chew up memory insanely quick. We used to use Tesla cards, but the Titan is very close in performance for half the cost. I know the Titan's have hardware FP disabled, but will still do software FP. This 'feature' can be switched off in the driver, which will allow hardware FP, but it supposedly underclocks the cores due to 'thermal issues'. I haven't benched the cards, so I couldn't tell you how much of a difference there really is 
Yes graying out the axes and any other non-data items is recommended.
Does this create them random and uniformly distributed across rgb space? If so they will appear bunched together in perceptual space. What is x?
Thanks, I updated above to include it.
possibly, but it is better to chose gradations of at most 3 colors. Adding more can confuse the reader about the meaning of the order of the colors. That said, I think a linear mapping like you ask for would be awesome since orders can be learned.
What was the function you submitted?
Do you have a list of .csv files that you need the names of, or do you have a list in the .csv file that you need to read-in? If it's the first one, fileStruct = dir('C:\path\to\files\*.csv') fileCell = struct2cell( fileStruct ) names = fileCell{1,:} 
&gt; of at most 3 colors. Adding more can confuse the reader about the meaning of the order of the colors. That said, I think a linear mapping like you ask for would be awesome since orders can be learned. What I mean is: say I want to convey the values of 3 parameters simultaneously. How can I do so linearly in RGB space?
oooh, I see. I don't think that would be possible.
TIL: jet is fucking useless
You are correct, but in a lot of cases you are trying to actually *find out* where the interesting ranges are in the data, so using caxis would not be as effective.
multicomet
This is a great post. thanks for sharing. 
Sorry for not including complete code. x are the total number of requested colors from the script. In my experience using the code, it creates lots of "bright" colors, and is useful when we have about 10-30 things to plot. We actually use it primarily to plot in different colors the lines in graphs. (Like, trees and nested trees, etc)...so having two similar colors that are far from each other in the plot isn't that big of a deal. I may switch to your advice for more day-to-day time series plotting. 
I think what you want here is the intersect command. If lat/_AER and lon/_AER are created such that index n corresponds to the same time in both vectors, then if you just do something like sharedIdx = intersect(goodLAT, goodLON); latInBox = lat_AER(sharedIdx); lonInBox = lon_AER(sharedIdx); I think it solves your problem. Unless, of course, I misunderstood the problem =). Edit: can't you also just include all 4 conditions in your find, i.e., find(lat_AER&gt;lats &amp; lat_AER&lt;latN &amp; lon_AER&gt;lonw &amp; lon_AER&lt;lone) ?
What if you already have a plot (not with colormap) open? Can you change it after the fact?
Thanks for the reply. I feel like an idiot. Yes, I can combine all 4 conditions in one find statement. ughh.. still feels like Monday. Thanks again!
i figured it out the looping through the .csv files now i just have another issue to figure out shouldn't be too bad though
This is on the right track, but do i have to specify the elements one by one? I have about 3 million elements and 3 Node ID's per element. Any way to automate it to go row by row for all 3 million elements, and give the average Node ID x-value of the three node id's to the corresponding element? 
Oh wow, you're a lifesaver!! Thank you Thank you!! My complex Vlookup functions across multiple data sheets in excel has taken me about 8 hours to get through less than half of the data... Matlab finished this up in about 30 seconds! One more quick question that i can't seem to find the answer to. How do i get my data out of scientific notation? Edit: Got it! "Format long g" Edit2: Actually "format long g" makes the values in the command window appear with full digits, but in the answer dataset it is still in scientific notation. Any suggestions?
Some more numbers for you, just for funsies: Core2Duo E8500 (3.16GHz) Bench: .3679 0.3020 0.1371 0.3888 0.4288 0.7308 Robot simulink: 357.09 seconds i7-3770k Bench: 0.0229 0.0276 0.0776 0.1015 0.2417 0.7070 Robot simulink: 170.35 seconds The 3D bench results for the 3770k seem suspect to me. I've run it in the past and had it go so fast it only showed the last frame (just like with your 4770k) but this time it is showing the entire animation. Not sure what is up with that :x There are also some discrepancies in the relative speed charts and tables. The version of MATLAB being used is somewhat important for this one it would seem. Even with the same Computer Type listed yours is showing different values than what I get. I also have the same issue between my work and home PCs which have different versions of MATLAB installed. Just some food for thought if/when you go ahead with your aggregation website.
Yeah. I'm having some overheating issues with my i7 Q740, I think it was underclocking to 900 mHz according to some HW tools.
&gt;I've tried creating my own block library, but changing blocks in there doesn't affect projects where they were used. I had to mess up checking that, since it looks like it's working now. I'm going to leave this anyway, maybe It'll help somebody with similar problem in the future.
&gt; 2) the current model is always up to date (Ctrl-K). This will 'refresh' all library links. This is probably why It didn't seem to work at first. Thanks mate.
Check out the Simulink blog post on libraries. Even though you fixed your problem, it will help you better understand the fundamentals. http://blogs.mathworks.com/seth/2008/07/18/libraries-in-simulink/
I believe [Model Reference](http://www.mathworks.com/help/simulink/model-reference.html) is the feature you're looking for.
what does this have to do with Matlab
Exactly. I've seen this before here at r/matlab, but my opinion was not popular then. I still hold it though: that kind of operations should be done with VBA, which is really easy and comes with your Excel.
Wonderful! It worked! one more question. I have created the average X Value array and Average Y Value array, then merged them together into a [:,2] matrix. I'm attempting to write this to a txt file, and fprintf isn't seeming to do it right. here is my code: X_Value = interp1(NODES(:,1),NODES(:,2),ELEMENTS(:,2:4)); X_Avg = mean(X_Value,2); Y_Value = interp1(NODES(:,1),NODES(:,3),ELEMENTS(:,2:4)); Y_Avg = mean(Y_Value,2); XY_Avg=[X_Avg;Y_Avg]; fid=fopen('XY_Avg.txt','w'); fprintf(fid,'X\tY\r\n'); fprintf(fid,'%17.10f\t %17.10f\r\n',XY_Avg); fclose(fid); Lets say column X is 1 2 3 4 5 and column Y is 6 7 8 9 10 It is outputting: 1 2 3 4 5 6 7 8 9 10 When i want it to output 1 6 2 7 3 8 4 9 5 10 Do you happen to see anything wrong with my code? I've been trying different variations for hours now. Thank you for all of your help!
Perfect! XY_Avg=[X_Avg Y_Avg]; fid=fopen('XY_Avg.txt','w'); fprintf(fid,'X\tY\r\n'); dlmwrite('XY_Avg.txt',XY_Avg, '-append', 'delimiter', '\t', 'precision', '%17.10f%17.10f\r\n', 'newline', 'pc') fclose(fid); Thank you so much!
You can add " to your system call, like this: system('"C:\Documents and Settings\user\desktop\cooldude.bat" params_here') which is what Windows' CMD.exe does when you try to call something that is in a path with spaces. If it does not work with the dos command, try using the system command.
I'm on my phone so i can't provide an example but you need quotes around the full path to the bat file. Look up how to print a " in a string.
Matlab doesn't escape like that, you're mixing languages. system('"C:\Documents and Settings\user\desktop\cooldude.bat" params_here') 
Oops, that's true! In the piece of code I looked here I am using sprintf to fill in the arguments, which escapes like that, but when I typed it here I completely forgot about it. Thanks, I've edited my answer!
I just tried: dos(' "C:\Documents and Settings\~user\cooldude.bat" ') '"C:\Documents and Settings\~user\cooldude.bat"' is not recognized as an internal or external command, operable program or batch file. ans = 1 It doesn't work with system or dos :(
when I did msg =' hi ' then msg1 =' "hi ' and i print them both, I dont need any special escape charactrs for the double quotes :S could you elaborate plz?
I assume there's a good reason you aren't using a batch file to run your batch files...
Use linspace to create the array of values: X=linspace(1,25,50) To generate the random variation: frandom() will return a value from 0-1 to get it to between -5 and 5, do frandom()*10-5
Wow that's really clever. Thank you for that. Now i need to normalize by the length of the circle. How do I do that? Depending on the size it will definitely change, but how do I find out the number of pixels that are along a circle?
Yes you can. Line's can't be changed easily after but colormap(linspecer) will change your colormap at any time
Here's a vectorized alternative (because loops are evil ;)): function S = ringmask(img,x1,y1,r1,x2,y2,r2) imgSize=size(img); % create pixel coordinates [mx my]=ndgrid(1:imgSize(1),1:imgSize(2)); % create masks for both circles msk1=((mx - x1).^2+(my - y1).^2 ) &lt; r1.^2; msk2=((mx - x2).^2+(my - y2).^2 ) &lt; r2.^2; % ring mask is XOR of both masks msk=xor(msk1,msk2); % sum up values and normalize S=sum(sum(img(msk)))/sum(sum(msk)); end 
Yep, Matlab does some automation via external software and also post processing. Batch files are called when external hardware fails and needs to be restarted. Purpose of integration is to eliminate manual labor.
Great, thank you, it works now! :)
I'm struggling to see the issue here. The user supplies a file name. You use that file name to write the initial file. There is absolutely nothing stopping you from using it again to later print out the contents of the file... Also, for the love of $deity make some effort to properly format your code in future posts. Kudos for including an example, but deciphering that is absurdly annoying.
Use export_fig its quite helpful for these sorts of issues. http://www.mathworks.com/matlabcentral/fileexchange/23629-exportfig
You have to use the function form of the command, e.g. type(filename_full); And it should work fine. If for some reason you really didn't want to do it that way, you could always use "eval": eval(['type ' filename_full]); Eval is nice if you want to use the (string) value of one variable as another variable.
Ah awesome I knew I wasn't missing much...thanks alot! 
Looks like borzakk covered all the bases on your actual problem. Add four spaces before each line and Reddit will format it as code. Each set of four spaces will also indent further to preserve formatting. IE- some code here if moar magic here end Alternately you can use pastebin. 
Thanks for the advice, next time I post code it'll actually look like code.
Nice, and very slick! I am not used to vectorizing my codes. Old FORTRAN habits die hard.
Take a look at the eval function, that should do what you want. However, in my opinion, using eval is quite kludgey and should be avoided.
Also, genvarname can turn a string into a variable / function pointer. 
Why exactly are wanting this functionality? eval() will do what you want, but perhaps there is a better solution for what you're trying to acheive
In Simulink: Yes. It definitely helps with compiled code. In Matlab: It's not going to help you much because secretly everything is a double. &gt; But I am trying to speed up my code, which will eventually take days to run, and realizing that my loops run 5x slower Don't. Use. Loops. Use matrices and do matrix math. If you have something that takes days to run you're most likely doing it wrong. (There are a few cases but unless you're doing something insanely specific, it's not likely)
I'm not sure how to avoid loops all together. Do you know of a simple example of using a matrix instead of a loop? I'm doing computational physics, and it will definitely take days to run, regardless of what language is used or who is writing the code. My professor is buying a computer with 16 cores and 0.5 TB RAM because of this. I guess I should use another language. 
For example, how would I avoid loops here: converting a binary number ("Abin") into a series of 1's and 0's (of length "Norb"): base=zeros(Norb,1); for k = 1:Norb base(k) = rem(Abin,2); if base(k) == 0 Abin = Abin/2; else Abin = (Abin-1)/2; end end
dec2bin? dec2bin([1:100])
http://www.mathworks.com/help/matlab/matlab_prog/vectorization.html
I seem to recall an example of this on Matlab central a while ago, but upon re-searching for it, I couldnt find the old thread... :-/ i dont remember my old search terms but you could try there if you havent already
Thanks for trying! Do you remember if the person was successful in speeding things up?
Declaring a variable as single will save half the RAM and also roughly double computational speed. If you don't need double precision, don't use it. Some builtin functions will only work on double, though. 
Continuous is exactly what I don't want for this kind of thing. I want discrete ranges with clear boundaries. If I want continuous I just use grayscale. The progression is not dark/bright, its similar to the electromagnetic spectrum: ROYGBIV, but backwards, so it goes cool to warm; that way you know which region is greater, but still maintain a clear separation of ranges. So if for example, if this had been such a data set as I use for jet, the lines in the OP's jet plot that separate colors would have been meaningful.
Since no one else has mentioned it, if loops are unavoidable put them into [mex](http://www.mathworks.com/help/matlab/create-mex-files.html) files and compile. I have worked on simulations involving unavoidable for loops, and putting things into mex files helps a lot. 
so either what you want is to be binning your data and using a non-continuous color set, or you just want to use something like mathematica's contour plot ([example](http://reference.wolfram.com/mathematica/ref/Files/ListContourPlot.en/O_3.gif)). I see what you're doing and using jet is kind of a hack. It gives you better spatial discrimination, but at the cost of being easily interperable. Using jet to get an idea of "which region is greater" is almost always a mediocre idea at best. i guess a side note: jet can work for things when you already know what you're looking at and you're acclimated to your data. but it's really terrible for actually conveying information to others.
How do you declare the variable as single, rather than converting it after it already exists?
Thanks. So your mex files are written in C++ or Fortran?
I use contourf, in particular, but with jet, unless the data is too noisy and the contours dominate the plot. I don't have the issue from the OP. I'm sure you don't like jet, but as long as your expectations are appropriate, it's not really that bad.
z = uint8(eye(3)*255) will create a 3 by 3 uint8 matrix with 255 along the diagonal (for example). You can do the same for any MATLAB datatype. Edit: In your case z = single(eye(10)) will create a 10 x 10 single matrix. I'm not sure if there's any other way to create the matrix with the specified type. 
What if you're just saying z = 0? Do you say z = single(0) or z = uint8(0)? And then if you loop (I know, I know, don't use them) over z (like say for z = 1:N), does z inherit the data type?
Mine are in C++.
&gt; I'm not sure how to avoid loops all together. Post samples of what you're doing. I love vectorization.
I would think that with this combined with the profiler you could answer all of these questions on a practice loop then move to a small chunk of the real thing.. do you agree? 
Always define the arrays up front to gain speed. Try to find a way to not use loops. Anyway at all! This can not be over stressed. Compile it if you have access to the matlab compiler parfor will help you have multiple processors. 
I'm in a similar situation as you, so I might be able to offer some insight. with vectorization vs loops : vectorization puts EVERYTHING in memory (sometimes multiple copies) and operates on them quickly. Loops only operate on single elements, so they are slower, but smaller. try to write your code with parallelization in mind. If you do the same action on different data repeatedly, break that action out into a function so you can parallelize the code with an SPMD block. If you have 16 cores, you will want to use them. If your data are too large to vectorize, try and break them up into smaller chunks that can be. E.g. instead of looping over every element, loop over groups of 100 or 1000 elements. If you have to loop, use arrayfun, cellfun or bsxfun instead of a for loop. These functions are written in C and are much faster than the normal matlab for loop. If you use a lot of built in functions, run your code through the profiler and look for unneeded function calls. Some functions are built with a lot of sanity checking and the ability to handle situations that you aren't interested in. These checks take time....if you want pure speed, you can strip out only the parts of these functions you need and make your own optimized functions. It might only save you .001s, but if you call that function a few hundred thousand times.... If you are performing element-wise modification, make your input and output arrays the same. e.g. function data1 = modifyData(data1, data2) data1 = data1 + data2; instead of function out = modifyData(data1, data2) out = data1 + data2; The first example just modifies and existing array in memory. The second allocates a new array in memory, which takes more time (and resources) 
Sorry for my lack of knowledge in this, but could you tell me how/why they help (and help what?)? Do they just run as C++, so it's inherently faster? And then you can just call the end data back into Matlab? Thanks.
I have these functions for this purpose: https://gist.github.com/robince/6204098 https://gist.github.com/robince/6204101 z = b.^( (m-1):-1:0 ); x = floor(bsxfun(@rdivide, bsxfun(@rem,d,b*z'), z')); &gt;&gt; numdec2base(1:128, 2,8)
~~dec2bin and bin2dec are slow because they use strings ... see my numerical versions above.~~ Sorry it is dec2base, base2dec which use strings... probably the dec2bin is not much faster than my versions. But again shows that loops are not so bad these days!
While this is classic advice for Matlab in my experience it is getting slightly out of date. With recent versions of Matlab the just-in-time compiler is getting much better, and most of my old examples of vectorisation speed up are actually faster in loop form - or at least not much slower (I was pretty surprised the last time I ran them). 
Not really. http://www.reddit.com/r/matlab/comments/1i6u23/without_using_builtin_matlab_functions_create_the/cb1lm87
Well that example is a bit disingenuous because the loop version is re-allocating (extending the array) every time. Of course allocations are some of the most expensive operations and it should be minimised... To be clear the example you show is basically testing A = [] for i=1:10000 A(i) = i; end against A = zeros(1,10000); for i=1:10000 A(i) = i; end You will find the second one is orders of magnitude faster. But the point is loops in modern Matlab are much less of a problem than they used to be. EDIT: I replied to that example you give with a "loop" version that elimiantes the reallocation and is as fast as your vectorised one...
The slowness you are demonstrating here is because of reallocating the A array when you try extend it rather than an inherent property of loops. Add this to the end for a "loop" version which is about the same speed as your vectorised example: tic for q=1:n C = zeros(1, 3996); idx = 1:4:3996; for i=1:999 C(idx(i)) = i; C(idx(i)+2) = i; end end toc The timings I get with R2012a are: Elapsed time is 2.849942 seconds. Elapsed time is 0.013698 seconds. Elapsed time is 0.013556 seconds. [EDIT: was doing slightly the wrong thing!]
As you know, Matlab is an interpreted language, while c++ is a compiled language. Every time a Matlab program evaluates a line of code, the code needs to be analyzed and rewritten into low-level instructions understandable by the CPU. Not everything in Matlab is slow, though. The built-in Matlab functions for, say, inverting a matrix are blazing fast. These functions are pre-compiled into machine-code, so that Matlab doesn't have to interpret them as the program is running. A mex file is just a way to compile code before running a program. In principle a mex function can be as fast as the other Matlab built-ins. 
Functions like ones and zeros let you declare the data type of the output on construction. Many functions, fft for example, are SIMD optimized and will run faster with single vs double inputs. I don't understand this notion that everything is "secretly double" in MATLAB. 
First, you want to use the profiler: http://www.mathworks.com/help/matlab/matlab_prog/profiling-for-improving-performance.html Second, you need to understand the compiler used in fortran optimizes the code and that is the trade-off between run-speed (using compiled code) and rapid prototyping (MATLAB style run on scripting). You can use MATLAB coder to generate generic c-code into an executable or mex function to speed up this process. You can tell the coder to set the inputs as certain data types and then you don't have to define them in the MATLAB code. The coder will attempt to optimize your code as best it can then the compiler will again try to optimize the generated code. Lastly, you can use a PARFOR loop to run things in parallel. This is more complicated than I will put here, but if you're code is conducive to running parallel, this is the best option. Not all code can be run in parallel. God speed.
Does Simulink come with MATLAB? My download seemed to suggest that, but I've never used Simulink.
If you're using student version, yes. Just type in simulink. I'm not 100% sure it will work, but it might. One thing to remember is the functions need to be supported by the code-gen technology.
It worked, thanks!
Thanks for your advice on this -- it looks like my best option. Off to read all about mex files at Mathworks! I can't tell if it's going to be a big pain to make my Fortran loops fit the mex file requirements, but I hope not. I'm just hoping that if a loop is 10x faster in Fortran, it will still be faster in a mex file.
Is there a fortran equivalent?
Ok, one last question for you. So far, I'm getting the impression that my mex files will be different depending on what computer they're on. My laptop is a mac, and the computers I use at school run Linux. Is this going to make things into a huge headache? Will I have to write different types of mex files for the different computers?
Please do us a few favors: 1) give us a link to a pastebin or something a little more readable 2) What problems are you having, exactly, transferring this to C? I wouldn't bet on somebody doing this for you just on a whim, but some may help you with a small part or two. I would also recommend posting this to /r/learnprogramming. 3) What are you doing this for? 4) What is this supposed to do?
[Best I can do](http://www.mathworks.com/products/matlab-coder/)
I use saveas() and mkdir() for things like this. 
&gt; Taking "do my ~~home~~work" to an entirely new level... FTFY
 K(:,:,:,ii,1,1,1,1,1,:) = ifft2(squeeze(sum(repmat(... K_Collapsed(:,:,:,ii), [1 1 1 sw(4) sw(5)]) .* w, 3))); This is the single worst line of Matlab code I've ever seen. A few months ago I made up a bunch of terrible matlab code to train people at work on what not to do. I'm adding this one. 
I second the export_fig recommendation!
Sorry, another question. What do you mean by "if you only run it 1 time"? I'm having a really hard time getting the mex files to work with fortran, so if I could use Simulink, that would help. But I will be calling these mex files a lot, not just 1 time.
 help publish Should give you everything you need. format: 'html' | 'doc' | 'pdf' | 'ppt' | 'xml' | 'latex' stylesheet: '' | an XSL filename (ignored when format = 'doc', 'pdf', or 'ppt') outputDir: '' (an html subfolder below the file) | full path imageFormat: '' (default based on format) | any supported by PRINT or IMWRITE, depending on figureSnapMethod figureSnapMethod: 'entireGUIWindow'| 'print' | 'getframe' | 'entireFigureWindow' useNewFigure: true | false maxHeight: [] (unrestricted) | positive integer (pixels) maxWidth: [] (unrestricted) | positive integer (pixels) showCode: true | false evalCode: true | false catchError: true | false createThumbnail: true | false maxOutputLines: Inf | non-negative integer codeToEvaluate: (the file you are publishing) | any valid code MY_DOC = publish(...) returns the path and filename of the generated output document. couple the MY_DOC with a movefile and you should have everything you need.
You can preallocate your integers using the zeros() command, along with the data type. For example: x=zeros(1,1e6,'uint16'); for i = 1:100 y=f(x); %... end
Yeah I saw that too. Makes me glad I was not the one who wrote it.
I did not need you to do it. I was just wondering if anyone had good tips and suggestions I am not that proficient in C so figured I would ask around first. 
You are right my apologies 1) http://pastebin.com/B6uahvNu 2) Not many problems its just I am not incredibly great at programing 3) I have an unpaid internship where I work with MRI's. My original job was to take the image slices and create a 3D mesh that could be used as a learning tool and physics simulator. I wanted to try and help out with the programing side, just a steep learning curve. 4) It's part of a program that is supposed to take the data from an MRI scan and sort out the picture taken. Its a change from the current way of taking single shots, one at a time. 
Sorry the answers in order: 1) http://pastebin.com/B6uahvNu 2) The problem is more me than anything. I am not that great of a programmer. 3) I have an unpaid internship working with MRI's. Originally I would create 3D meshes for learning tools and physic simulators. But seeing as it was about to end I wanted to try and help the programming side too. 4) It is part of a program that allows MRI's to take one massive shot that then gets broken up into slices, instead of having to photograph each slice individually.
Well, this is a lot as an early C project for sure! :D My big advice would be that this program does a lot, all in one file. For whatever reason, I see this done often in MATLAB but it isn't best coding practice. I would try and write down, like on paper, all of the little things that the program does, and then all of the little things that each little block needs to do. And then write a bunch of very small C methods that each do a very specific thing. It's always best to be organized when you're heading into some heavy lifting! Good luck :D
The "hold on" and "hold off" commands let you keep plotting on the same plot. Once you say "hold off," you're done with that plot. As for making columns 1 AND 2 into times, it seems like you will have to multiply the days by 24 hours, then add the time (in fractions of hours). All in all, it looks very doable, if I understand your question correctly.
You should use the function validateattributes, it is designed exactly for this purpose: http://www.mathworks.com/help/matlab/ref/validateattributes.html In your case, to validate that A is a numeric scalar, you could use: validateattributes(A,{'numeric'},{'scalar'}) If what you want is simply to check that something is a scalar, you can use: TF = isscalar(A);
Can you draw a paint figure of what you want the output to look like? 
The hold on command was a good start. Now I need to figure out how to plot the matrices following eachother. Currently they're all overlapping, I want one single line, or at least, no overlapping.
[Here's a sample of one matrix of data collection.](https://dl.dropboxusercontent.com/u/57772071/Mode%201%2008.02.2013.mat) I imported the data from a .xlsx file so my date info is 41488 for the first day and the time is counted by the second. Neither of which 'datenum' seem to like. I can only convert it into something meaningful by using 'datestr' which I don't think I can plot with. Edit: I tried initially to import the original [.txt](https://dl.dropboxusercontent.com/u/57772071/pa870.txt) file, but matlab would not delimit the values properly. It turned the matrix into a single column. But at least matlab interpreted the values properly as date and time and not some screwy number code.
You're amazing, I really appreciate it. I'll give it a shot once I get into the office tomorrow. 
Would hist(xf,60); hist_xf = gcf; do what you want? That will give you the handle to the figure. It may not be what you want. What will you do with it later?
Get the data using hist then plot using bar You'll have way more ability to modify the plot. e.g data = randn(1000,1); [nelements,xcenters] = hist(data); fig1 = figure; H = bar(xcenters,nelements);
This is the way I have always done it, although I usually use histc myself.
Also the crashcourse is not in depth enough for what I need! Thanks!
Oh they definitely exist. You might be able to do a search in Google like "filetype:pdf matlab for beginners". Or do a bit of torrenting. I would just jump right in, however. It's a bit of a learning curve (I had no prior coding experience either), but by starting off with little tasks,, I was able to navigate my way soon enough. For instance, many people write a "hello world" program first. Then maybe they move on to do a simple Pythagorean Theorem program (you supply a and b, it calculates c). Glad you're getting into it! PM me if you have any questions!
This was written by the lecturer for the course I learnt matlab in. It might help. http://www.maths.uq.edu.au/department/computing/matlab/mlb_intro.html or as a pdf here. http://www.maths.uq.edu.au/department/computing/matlab/mlb.pdf It might not be in depth enough for you. If so you need this http://en.wikibooks.org/wiki/MATLAB_Programming 
See the matlab documentation. I'm not being snarky, it is not like other software documentation, you will actually learn from it. 
I came here to say this - there's a getting started guide that you should go through to learn the essentials. 
If you have the stats toolbox, the dataset matrix type can also be quite helpful for this type of thing. It works quite well if you have multiple rows of data with the same different data types (e.g., a list of names with names, birth dates, and ID numbers). If you're familiar with databases it works similarly to a db table - multiple columns that can have different data types. It's also super easy to join datasets based on a common key. I work with financial data primarily queried from databases and the dataset is my primary variable type. I'm sure it isn't as fast as a pure array of numbers, but I haven't run into any performance issues. 
tool around in command line. type why every once in a while. When you find something fun and/or you're doing the same set of commands over and over, write a script and name it. By calling that name, you can now do that list of commands automatically. Then you find you want to the same thing with a single call name, but one parameter changes every time. Write a function! Matlab has a lot of applications, so before you can find an appropriate tutorial, you need to know what you want to do. I understand what you mean... the documentation is not very helpful for that. Too open.
The code works perfectly. I love datetick2, a definite improvement. One last question. I only want to use the data in the first file past the 39,577th row. Is there a simple way to only load after that point? Edit: Nevermind, I figured it out. 
Try khanacademy for c++ or c. Either that or try taking an introductory matlab or c++ class or introductory programing class. This should teach you the basics of thinking in code and learning the various control statements/boolean logic. Apply what you learn in that to matlab and just learn the matlab syntax. Other people reading this: he is asking how to program, not how to learn matlab syntax.
I'd suggest python for beginning programmers, really. It's a lot less annoying syntaxy, and more similar to matlab. 
I would start with a hello world of sorts. Matlab is extensive. Open the program up. Click on stuff. See what its called. When someone references the workspace, you will know what they are talking about. make an m-file. Just a script file where the file name literally ends in .m open up Simulink if you have it bundled. play around with the blocks and see what you can come up with. Programming: Declare a variable, looping, strings, importing data, exporting data, matrix multiplication, special functions take these terms and look them up. Just have fun with it. Matlab is f-ing sweet!
Sure, whatever he feels comfortable with. I just learned C++ first and apparently that's supposed to be a good begginer language because it teaches how you should program, and it doesn't let you "cheat"
I think what you need is a crash course in *programing* not in matlab. If you just look up documentation in matlab, it will tell you how it's syntax works (think of that like the "vocabulary" of a language), but you are actually trying to learn how to speak. Sure vocab is nice, but you need to be able to open your mouth first.
True, it doesn't let you cheat. I really am not 100% sure where I stand, but I feel like a lot of the time the frustration from failing at c++ might just put some people off. Who knows. 
Well all he needs to really know is how to use for, while, if, else, calling functions, and the rest he can pick up.
Im not great with making efficient codes, but I am a fan of batch processing the original data to "speed" things up (though it may be slow to process all data but at least it does it automatically). In any case, I took a different approach to your problem and said, "Hmm, can I extract all the data from the text files (presumably there being multiple text files, with different file names and lengths) and pull out the data needed?" I dont know how you want to proceed with this data, but at least this script can take it out from the original, so long as you put it in the same folder as your .txt files. I also sorted the text files by creation date, oldest first, so if you do plot them (with hold on), each file will have data show up sequentially oldest-&gt;newest. function date_convert close all; clear classes; clc; %%% Find all files in directory with '.txt' extension A=dir('*.txt'); [NoF,temp]=size(A); [temp,idx]=sort([A.datenum]); %%% List of all files, sorted by creation date for i=1:NoF FILELIST{i,:}=A(idx(i)).name; end CofI=4; %%% Column of data from original file you want to view %%% shifted by 2 (due to date/time being columns 1,2) %%% So column 6 in original is column 4 in data for i=1:NoF B=importdata(FILELIST{i,:}); [NoL,temp]=size(B.data); for j=1:NoL %%% Stores every line from the data file into DT (date/time vector) %%% and CL (column data) for output. Because there is 1 line of %%% headers in the text file, must offset textdata by 1. The ' ' %%% is needed to keep the date and time string separate. %%% Converting it to different format (see matlab help) may speed %%% up or slow down this step. %%% I dont know the format for that cool looking datetick2 graph, %%% but Im sure it can easily read any other format you do here. DT(j,:)=datestr([B.textdata{j+1,1} ' ' B.textdata{j+1,2}],... 'dd-mmm-yy HH:MM:SS'); CL(j,:)=B.data(j,CofI); end plot(CL) %%% At this point, you have the variables DT, CL and you can (a) plot %%% here and hold on; then it will automatically plot new data %%% sequentially in time (b) write data out to another function or a %%% text file for plotting with another script, or (c) whatever else %%% you wish to do. end end
I say, just start and Google as you go. Also, try python.. It's free and can do what matlab does, and I would assume it's going to eclipse matlab and idl as its users grow and absorb matlab/idl users by implementing useful modules.. 
See the sidebar for a link to Cody. Combine that with Answers and you should have access to all you need. As mentioned the doc is good to, but I'm a more hands-on person. I need to just go for it because I won't RTFM.
I tried doing this. It spit back out this really ugly almost outliney and rotated version of my image. I'm not really sure why :/ (the rotation I take full blame for though)
Not one key but just ctrl+S alt+tab execute. Fast once u do it 20 times.
Choose a simple problem you already know how to solve and figure the code out as you go along with the documentation.
cool, whats the execute command? 
I used `A\b` to check your result and got the same answer you did with LU. I'm thinking that either the answer in your book is wrong or you've copied the equations incorrectly.
Must be the answers in the book then. I checked several times that I'd got the coefficients right. Thanks for the verification 
Well, I just tried this out quickly, and it works fine. The problem with doing this, of course, is that the file size gets enormous (it also takes a while to run: I had 900x1200 pixel image, and it took ~5 seconds). The jpeg is compressed, but once you load it into matlab an N x M image takes N x M x 3 bytes in memory. Print that out, and assuming your average byte takes 3 characters to print, you just turned your tiny jpeg into in an N x M x 3 x 3 byte file. For example, the file I tested it on went from 39 KB to 12 MB, but I guess that depends on how much jpeg can compress it. Again, there is probably a better way to do this; I don't work with images in matlab much. imdat = imread('image_filename_here'); [nrow ncol ncolor] = size(imdat); fid = fopen('imFile.m', 'w+'); %the name of your output file fprintf(fid, 'imArray = zeros(%d,%d,%d,''uint8'');\n', nrow, ncol, ncolor'); for ii = 1:ncolor fprintf(fid, 'imArray(:,:,%d) = [', ii); for jj = 1:nrow fprintf(fid, '%d ', imdat(jj,:,ii)); fprintf(fid, ';...\n'); end fprintf(fid, '];\n'); end % add whatever processing of the image you want here % for example, to rotate 45 degrees %imArray = imrotate(imArray, 45); fprintf(fid, 'figure;\n'); fprintf(fid, 'image(imArray);\n'); fclose(fid); 
Thank you, I'll give this a try :)
oh i don't remember, it's an function key, F5? sry don't have it installed
when the error is as marginal as this, a lot of the time the error will be due to this being the 8th edition of the book in 12 years and they've done a shit job following up with their changes. all your answers are *just almost right*, you've got this! good luck dude
Thanks dude. Though I've not hit the tip of the iceberg yet with Matlab. I am enjoying it so far... Wonder how long that'll last :-o !!
I second this, since I'm one of the people that write it!!
From the folder browser it is F9. In an editor it is F5 and F9 serves as Execute Selection. Fuck off Mathworks UI devs... fuck. off.
This actually makes sense to me. F9 executes the current selection in both cases. 
From another perspective: F9 executes the entire file in one case and the current selection in another. In Current Folder window: "I want to execute my entire script, better hit F9." In Editor: "I want to execute my entire script, better hit F5." WAT!? NO YUO!
I'm taking a masters degree in environmental acoustics, and I was informed that Matlab plays a big part in the course. Judging by your username, I'm guessing you might know a thing or two in that field? Where Matlab is concerned, it's the programing aspect that I'm more nervy about - wasn't my strongest ability when I undertook my degree a few years back! So far though, Matlab feels quite intuitive. We shall see :)
Thanks for checking. It's really nice that people take the time :)
I've heard 'jet' was bad but that example link drove it home for me. I vow not to use 'jet' ever again. Thank you! My data-vis -savvy colleague uses 'hot' a lot, which seems to work pretty well, but these look even better! Any data visualization tips beyond color choice?
Simple: do the weighting before the moving averages filter. Edit: for the leap years: when doing weighting, divide by the sum of days contained on the 12 months you are working with, not by 365 by default.
I'd use conv. Just convolute with the vector of your weights. 
Another option is to store the keys in one cell array and the values in another: keys = {'abc','def'}; values = {[1,2,3],[4,5,6]}; values{strmatch('abc',keys)} %return corresponding index myMap = containers.Map(keys,values) %hashtable myMap('abc') There are also structs: myStruct = struct('abc',[1,2,3],'def',[4,5,6]); myStruct('abc') 
You are saving the raw, uncompressed version of the image into your new file. You need to tweak your approach to read the image file itself and print that out to the new file. Then rather than just displaying it, you'll need to create a file, print the 'saved' image to the file, open the file, display it, close the file, then delete the temporary file. Basically: a lot of work and hoops to jump through just to require distributing a single file rather than two. 
Well, there is a problem with this approach. If you want to distribute the image data along with your source code in the same file, you pretty much can't use the image file as is. The reason is that, since this is just a bunch of bytes, chances are pretty high that one of them, when interpreted as ASCII, is a character that means something to matlab (like a square brace or single quote), leaving you with invalid syntax in your file.
doc fread doc fwrite
Yes. thanks I understand what they do and how to use them. Do you understand what the OP is trying to do? How does what you propose combine the image file and the associated source code? If you have only a _single source file_, as the OP desires, then including the raw jpeg data in it leads to the problem I mentioned.
If you can't grok reading a data file as anything other than ASCII I'm afraid I can't really do much else here.
You need to work on your reading comprehension and your ability to explain what you are trying to do. The stated goal of the OP is to have a single .m file he can distribute that does some stuff, and optionally displays an image. Would you care to tell me the character encoding .m files use? Hint: it's ASCII.
Okay, I understand what you meant (thanks for being condescending and explaining poorly though). If your point is to help the OP, you should probably reply to him instead of me, since this post is several days old, and you should probably explain it better. You are saying open the image file, read the data as uint8s or whatever you like, store those values in an array of the appropriate type in your m file. Then when you run it, write the data to a temp file, imread that and display it. You still have a file larger than the original, though not as large as my original solution.
The getting started guide is great, but the math gets too complicated for me way too quickly :( If I don't understand the math then how I am supposed to understand/learn the code?
the first two google results for "matlab animated gif" both include full code examples http://www.mathworks.com/support/solutions/en/data/1-48KECO/ http://www.mathworks.com/matlabcentral/fileexchange/21944-animated-gif/content/Animated_GIF/html/AnimatedGif.html
how did you produce the shape? 
I do not say this lightly. It will likely be easier to learn python and then call it from a matlab script than to actually do significant text processing in matlab. 
this can be done in matlab, but we cant really give specific advice without seeing some sample rows or columns... which commands you use ends up depending a whole lot on what the data is. i actually kind of agree with tedwick. Matlab is fantastic at some stuff, seriously. its just that it sucks balls at text processing. i'd probably do the text processing in something else, and then put it back in matlab and do the analysis, which matlab is good at.
replace z.^[0:-N+1] with z.^-(0:N+1) Also, is your plot statement correct? You don't appear to be using 'ft' anywhere. I also typically find it easier to do moving window filtering through convolutions filtered = conv(input, ones(1,windowsSize)./windowSize,'same');
is the conv operation not in the time domain....hmm...just realise that my title is a little misleading... what I'm actually looking for is a generic way of describing the transfer function of a moving average filter.
 I=imread('blah.jpg'); imshow(I); % should look fine. save('I.mat','I'); load('I.mat'); imshow(I); That doesn't work?
Agreed. Also, Perl is excellent for this sort of thing, but the downside is that you have to learn Perl.
I would use the built-in matlab functions, ones(n) and freqz(b,a,n) ones(n) creates a vector of length N, and freqz can plot the magnitude response over frequency. b = 1/4*ones(N) [H,W] = freqz(b,1,N) plot(W,H) See Matlab's online help [freqz()](http://www.mathworks.com/help/signal/ref/freqz.html) [ones()](http://www.mathworks.com/help/matlab/ref/ones.html)
i would say convert the matrix to a cell array and use cell2struct, that should do it in one line.
Thanks, that's exactly what I was hoping for...unfortunately I don't have the correct toolbox though :( 
At first I thought these were sublime commands, but then I got it. 
This is indeed confusing. What does size() return for each of these? What does the workspace show for each?
I no longer have them in my workspace and cannot easily recreate the run. Unfortunately it couldn't save out either, because I was trying to horizontally concatenate each field of the structure array. From what I had observed, each of the other fields, when evaluated like shown inside the length() call, was showing as 14186x1 in the workspace. However, this particular field was evaluating as 14187x1. The structure itself was showing as 14186x1.
http://i.imgur.com/1tLYiOr.jpg
There is no conflict here. x(1).y = [1 2]; x(2).y = [1]; x(3).y = [1]; &gt;&gt; length([x.y]) ans = 4 &gt;&gt; length(x) ans = 3 [x.y] catenates all the y fields. ~~What would be surprising is if length([x.y]) is SMALLER than length(x).~~ Not true. 
Thanks. I *just* figured this out and was about to post it.
Ah, thanks for this. Now I can go figure out why this is happening because they should all be 1x1. Edit: Yes! This field is populated by a find call. In the rare event that the two smallest voltages of that run are the same, then the minimum voltage is longer than 1x1. Much appreciated. Edit2: Also, length([x.y]) could be smaller than length(x) if x(1).y = [], right?
Yes you're right. I guess it wouldn't be too surprising.
Ah, freqz is part of the signal processing toolbox. Sorry about that. Well the ones() [and zeros()] commands can help you set up arbitrary length vectors easily.
Here's my approach: A = [ 23 7 14; 51 10 1; 19 99 8; 3 72 6]; [~, inds] = sort(A(:)); [~, position_in_ordering] = sort(inds); order_less = reshape(position_in_ordering, size(A)) - 1 order_more = numel(A) - order_less - 1 `order_less` is the number of elements in A that are less than this element, and `order_more` is the number greater than this element: order_less = 8 3 6 9 5 0 7 11 4 1 10 2 order_more = 3 8 5 2 6 11 4 0 7 10 1 9 I wrote this in a crunch, so hopefully it works as it should. It works by realizing that what we want is the index of each element of A in the sorted order of all elements of A.
I'm not aware of any built in functions that do that sort of thing, but the vector processing features of the core language are very flexible. For example, basic spirograph type images are easy to create: t = 0:.01:1; th1 = 2*pi*t; th2 = 2*pi*4*t; x1 = cos(th1); y1 = sin(th1); x2 = 2*cos(th2); y2 = 2*sin(th2); plot(x1+x2, y1+y2);
Yes, you certainly can use MATLAB for this. You could do all of those things programmatically (e.g., drawing a spirograph as mentioned in another response). Depending on what you're trying to do, it may be painful to go this route. You might want to look at an interactive geometry program, [here is a list](http://en.wikipedia.org/wiki/List_of_interactive_geometry_software). I can't comment on many of the programs on that list, but The Geometer's Sketchpad and GeoGebra are popular.
To expand on /u/icantfindadangsn , if you had a variable 'var': var=rand(1,10); In order to use this variable in another function, you have to update the handles like so: handles.var=var; guidata(hObject,handles) Now you will be able to use the variable in another function by using handles.var 
Can you elaborate more on what it is you're trying to do? Are you trying to update the gui from an outside function? What is this function doing?
Ok yeah I figured out all the handles stuff now. It was not fully explained to me before. One other question, not really related, is it possible to make a figure appear on an axis in a GUI? The function I incorporated generates a figure which appears in its own window, which I want to appear in the GUI.
If you have typed figure before, you'll want to remove that, as that is what opens a new figure to put the image on. To make it appear in the GUI, you can put axes in the main GUI, then show your image with: axes(handles.YourAxesHandle) imshow('your image')
%Beginning of code: clear clc close all %% scalars: R=0.07434; U=18; f=cosh(0.6422*nthroot(U,2)); g=sinh(0.6422*nthroot(U,2)); h=1; t = 1; %% vectors: theta=0:(2*pi)/300:2*pi; x=R*t*(f*cos(theta)+g); y=R*t*h*sin(theta); %% plotting figure plot(x,y) % end of code Drop the theta, as it's not important in your plot - I'm assuming you just want to plot the circle.... If you want a 3D plot, you'll have to use plot3(x,y,z) and then you can decide what your variables should be (given that x and y are dependent on theta, z=theta is rather unconventional). Also, * means multiplication not . - in particular, A*B is matrix or vector multiplication whereas .* is array multiplication (check the matlab help file for "arithmetic operations"). Cheers.
thanks man super helpfull
Yeah I don't think what I am trying to do is possible though. It's not just an image, it's an interactable maze. I think I need to rewrite the whole function so it doesn't use figure and instead plots in the GUI.
Are there other students in your lab using matlab? For me, I found that the best approach was going through some of the introductory resources others have mentioned while simultaneously reading through / fiddling with some code from labmates who were working on similar research problems. I found it way easier to have motivation to learn the basics when they were actually embedded in some code that solved a larger problem I was interested in. If that makes sense. 
You might try something like msound, which allows for block-oriented audio recording/processing/playback and to use ASIO from within matlab. Also works with ASIO4ALL which might improve latency with some generic audio devices. http://tgm.jade-hs.de/web/file/Institut_fr_Hrtechnik_und_Audiologie/Software.php 
To modulate it with an accelerometer you're probably best involving simulink. I don't think you truly need real time control but you would need xPC if you did, so that's ok. Although I don't generally like comments that say "use this instead of Matlab" /u/pieIX is right that Pure Data is quite good for this sort of thing and can be [integrated with Simulink](http://stackoverflow.com/questions/17077364/communicating-between-pure-data-and-matlab-using-osc) through UDP sockets.
How about interp3 and a "dummy" variable (e.g. 1:2000) for the third dimension?
You want 'gridfit'. It's in the file exchange. We use it all the time to turn empirical data into 'maps'.
Do you mean physical or perceived (i.e., psychological) intensity? 
physical. If I were to convert greyscale back to watts would it be a linear relation?
I'm assuming 16-bit TIFF means that you're working with the RAW images, in which case the image is linear. As for the conversion to greyscale, I take it you're talking about rgb2gray, which doesn't apply or remove gamma correction, so it is linear. If you just edit rgb2gray you'll see the following code: T = inv([1.0 0.956 0.621; 1.0 -0.272 -0.647; 1.0 -1.106 1.703]); coef = T(1,:); A couple of things I would be careful about. If you want to map your image to the interval [0,1] (for example using im2double) make sure you apply a scaling to match the number of bits of your camera sensor. Example: if your camera has a 12-bit sensor, a raw TIFF image will still have 16 bits, but the actual range of the image is 0-4095. However, im2double will see 16-bit integers and will assume the range 0-65535, and your image will look very dark. So go with something like: im = im2double(raw); im = im / 4095 * 65535; % In case of a 12-bit sensor If you have no idea of how many bits your sensor has, just try im = im2double(raw); imshow(im.^(1/2.2)); and if the image doesn't look too dark that way, it means that your sensor has 16 bits. The other thing is the conversion to greyscale. I don't quite know what the rgb2gray conversion gives you in terms of physical quantity. Equally, I don't know what coefficients you should use for that. Perhaps a simple arithmetic mean of the RGB channels might do a better job than rgb2gray. I'm afraid I can't help you more with this. **Edit**: I should add that often the conversion from raw to 16-bit TIFF already takes into account the difference in bit depth. I wrote about this problem because it happened to me at some point working with dcraw (I don't know if recent versions have fixed this).
If you'd rather not fall behind, why not take advantage of the resources at your university that you're paying for?
I do not know what DTW is or ClassificationKNN is, but if you need matrices from cells of vectors of different lengths you can always zero pad. Also this sounds like homework... 
 doc open Hidden at the very bottom is some information on creating your own custom file opening function. I would guess that MATLAB will also utilize that function when something is dropped onto the workspace, but that is for you to investigate and then report back (because I'm also curious, that sounds handy!)
PERFECT! Thank you very much!
Very cool! I'll stash this one away! Also, never knew assignin() existed. It makes me cringe as a purist, but the MATLAB in me can see the funcitonality (in cases exactly like this where MATLAB decides to break convention and limit your ability to do something like return multiple values). 
Flying Machine Arena in ZÃ¼rich uses [these](http://www.vicon.com/System/TSeries). With the prices of ready made systems you usually don't need to consider price of the software integration to existing systems. I would not recommend the DIY approach.
Many thanks for the reply. I am aware of the VICON systems, but from what I heard its low-end model costs like USD20000, which is way out of my price range. I may very have to resort to the DIY approach... 
I am on my phone so can't respond in full, but look into the eval function for creating files or variables in a for loop. You can also consider using a structure or another dimension of a matrix. Fopen does not read the contents of the file. You need to use a reading function like fread or textscan or importdata. If you are still stuck, I'll try to come back later when at a computer.
I couldn't get a result using the symbolic expressions in 2013 (but I never used symbolic expressions, so I might have done something wrong). Anyhow, you can numerically integrate using integral3. First, define a function handle: myFunction=@(x,y,z)(3*(1-x/.75).^3.*exp(-((x/.75).^2) - (y/.75+1).^2) - 6*(x/.75/2 - (x/.75).^3 - (y/.75).^5).*exp(-(x/.75).^2-(y/.75).^2) - z); Then integrate using integral3: integral3(myFunction,0,6,0,6,0,10) Depending on how accurate your result needs to be, you might want to play around with the error tolerance parameters of integral3. EDIT: What I did using the symbolic expressions in Matlab 2013: syms x y z myFunction=symfun(3*(1-x/.75).^3.*exp(-((x/.75).^2) - (y/.75+1).^2) - 6*(x/.75/2 - (x/.75).^3 - (y/.75).^5).*exp(-(x/.75).^2-(y/.75).^2) - z,[x y z]); result=int(myFunction(x,y,z),x,0,6); result2=int(result,y,0,6); result3=int(result2,z,0,10); which yields int(int(int(exp(- (16*x^2)/9 - (16*y^2)/9)*((128*x^3)/9 - 4*x + (2048*y^5)/81) - z - 3*exp(- ((4*y)/3 + 1)^2 - (16*x^2)/9)*((4*x)/3 - 1)^3, x == 0..6), y == 0..6), z == 0..10) as a result. 
Dude. I am getting close with this. I will be posting the code soon as I have it finished. :-) Thx
Very nice. I see you discovered strcat to replace sprintf. Just for funises you can also use ['chr' num2str(i) '.out'] and get the same result. Noticing the trend of having seven ways to do the exact same thing? :x It can get tedious (especially because they all suck in their own special ways...)
i remember your help in the past and just wanted to thank you again for your past and current support. my knowledge of how this works is growing really quickly. i am finally starting to get how the computer thinks... need a string here, matrix there, uint8 here etc. etc. as long as you tell it EXACTLY the way it wants you are good to go. anyway thanks for your help!!!!!!!!!!
What is the code? This question is too vague. You need to locate which matlab commands are giving trouble and either use their old equivalent or rewrite it.
Pasting to notepad makes it worse. Click the 'formatting help' link below the comment box and try again :x
Normally this is something that is done incrementally using release notes to find changed functionality between releases as you *upgrade*. Considering that you're going backwards in releases, rather than forwards, it's possible that some of the functions in your code will not exist anymore in the older release. The documentation for each release is specific, so you'll probably want to poke around in the archives: http://www.mathworks.com/help/doc-archives.html Also, you'll want to read the release notes to find changed behavior: http://www.mathworks.com/help/matlab/release-notes-older.html Of course, you can also post some code that isn't working for you.
Try installing the [reddit enhancement suite](http://redditenhancementsuite.com/) browser extension. It will let you preview your comment with formatting before submitting. Also, hit enter twice to begin a new line. 1 255 40.497522 -74.434818 0.026... (hit enter twice) 1 255 40.497522 -74.434818 0.026000 1377303313.369429 1 255 40.497522 -74.434818 0.026000 1377303313.419430 
Check to see if you have any of matlab's environmental variables set to a directory that doesn't exist. Also, did it work before? Did you install as an admin/root ? Every time matlab has done this to me has been related to it needing access to a directory that it couldn't access
I was really, really confused at your title for a minute there... My mind jumped somewhere else. I don't know how to solve your issue, sorry.
For both points 1 and 2, you could use a cell array to store the matrices into a single variable, where each cell has a uniquely sized matrix of values from the files. That is, if you have a variable A{i}, each A{i} entry 1-23 can be an m x n matrix (not same size as any other matrix) or even string. If you need to use unique variables for each matrix, you can use a structure approach, e.g. for i=1:23 if i&lt;10 var_name=['V0' num2str(i)]; else var_name=['V' num2str(i)]; end fileinfo.(var_name) = your value here end What the code above does is assign each variable name into a structure variable fileinfo (structure name must start with a character so the addition of the 'V'), so to pull out the variable holding the values for the 7th file, for example, you call fileinfo.V07 and so forth. 
well if you're on linux you could use -nodesktop in the hopes that its a GUI glitch.
I am on linux, alas I'm using Matlab on my work computer via Remmina
First, you should define a finer t. Your code defines t to be just two points, 1 and 10. Use this: t = 0:0.1:10; Change the middle number (the delta) to change how coarse or fine the time span is. Next, your y function needs a .* instead of the * between the two main expressions: y = @(t) exp(-a * b * t) .* (a * b/(b * sqrt(1-a ^ 2)) * sin(sqrt(1-a^ 2) * b * t)); This will allow you to use this functionality: z = y(t); Then you can plot t versus z: plot(t,z); Or more simply: plot(t,y(t));
I was expecting this to be overlooked due to it's simplicity compared to everything else on this subreddit so thank you for the help! 
This happens. I don't know of a way to fix it aside from putting some pause(1) statements in your code. That will pause the computation long enough for Matlab to update plots, resize windows, etc. 
There was some problem with my Java. After I reinstalled it, MATLAB worked again.
You could have it dump out status reports to a text file using fprintf(). I haven't tried it in the midst of a big computation, but I would imagine that as long as you did an fclose() each time, it would be visible from a text editor (or `type` or `more` or `less`).
The matlab function erfi is the inverse error function. It has not integral that can be expressed as an ordinary function of finite length. You are getting erfi in your answer because erfi cannot ever (as a result of the laws of mathematics) be simplified further. It can, however be evaluated to arbitrary precision.
What's your budget? If this is a hobby project you can do a decent DIY job but it's going to be very unreliable. Like /u/buq2 said, if this is for anything "real" DIY is going to be a nightmare. Expect to spend tens of thousands of dollars on a professional system. It's also possible to buy cheap-ish cameras and homebrew the software, although that's still going to run you several thousand dollars. https://www.naturalpoint.com/optitrack/products/v100-r2/
To expand on 9000rpms' answer: It is complaining because y is an anonymous function (hence the complaint about converting to double from function_handle). You need to run some values through your anonymous function (using y(t) in his reply) and then give that to plot() so it has some values to work with. Secondly: If you add four spaces before a line of text Reddit will treat it as code. That will stop it form making superscripts and italics everywhere. This is vastly superior to putting your code in as a quote (although kudos for attempting to make things readable, the number of spaghetti posts in this sub is too damned high!)
that would work but would drag the run out. I've done the same thing, only with Fortran based models due to the fact that they are a bit more computationally efficient. I guess if it allows you to kill it early it will still save them time though. 
If you have Matlab's compiler you could make an .exe. It might run smoother and if you have it output your relevant stats into a small text box gui that might get you a cleaner readout that your machine can actually handle.
MATLAB really really really does not like to do anything if you are running a big computation. Minimizing/maximizing a window, opening something in the editor, closing a figure, etc... Your best bet is to try to reopen it and then just wait. Eventually it will pop up. It may not be anytime soon, but it will happen. You need to be clever with how/when/where you look at updates. lp251 mentioned adding a pause(1) statement to give MATLAB some 'breathing room' to finish up making and displaying a plot or other such item and that is a fantastic idea. Otherwise it will zip right along before finishing and it may take quite some time to get your update actually visible. Added nasty bonus MATLAB gets VERY cranky during this time and that is where almost every single crash/hard lock I've experienced has occurred. I also have a particular algorithm that can take multiple days to complete. For that one I have it setup to watch the clock and every half hour it dumps some of the current state. Nothing major, just the relevant vectors and a small blip to a text file with some information. The performance hit is very minor in the grand scheme of a 6 day computation. This lets me snag the files and look at them on another machine without any risk of upsetting the simulation run and risking a restart.
Thanks for the tips everyone. Most of them I wont be able to implement without stopping this model so I'll let it run to completion this time around. I've already got it to spit some stuff to a text file as it goes, but it does it in a really awful and non-user friendly way (I've got to scroll through heaps of BS to find what I want). A pause statement in sounds good. I'll try that and report back (in a few days)
Theres many ways to do this, but here is one method off the top of my head. You want to add the 2x2 matrix to B, starting at the 1st row/column and stopping before running out of room (if B is a 5x5, then you cant add a 2x2 matrix in the 5th row/column, otherwise you will have either get an error or end up with a 6x6 matrix for B). So you want this process to loop over the number of diagonal entries in B (5), starting at 1 and stopping at 4. This means you want to do 5 - 1 total operations. And the number of diagonals in a square matrix that is 5 x 5 is the same value as the number of rows or columns. A=[2 1; 1 2]; B=zeros(5,5); num_diag=length(B); for i=1:num_diag-1 B(i:i+1,i:i+1)=B(i:i+1,i:i+1)+A; end B Essentially what the code above does is: you declare A and B (all zeros of size 5 x 5). Then the script finds the length of B (assuming its square, which it should be), and equal to 5 in this case. Then you enter a for loop, that says the counter i must go from 1 to 5 - 1 or 4, and at every time interval, the value of each 2x2 square along the diagonal in B is equal to the previous value in B + A. Originally, B is all zero so for i = 1, B(i:i+1,i:i+1) says B matrix, row entries 1-2 and columns 1-2, add in the values of B (all zeros) + A ( which is [2 1; 1 2]), then do the loop again for i=2, add in values of B row entries 2-3, columns 2-3 (which is [2 0; 0 0]) + A ... (and so on).
Well I acquired a small research funding at about USD2000 (to cover the quadcopters as well) and I suppose I will have to ask for more for a tracking system that is close to reliable. Thanks for hooking me up with OptiTrack, their product seem more affordable.
Nothing is above or below us. The only people we treat poorly are the ones who don't try anything first ;)
That is a pretty clear error message :o That function does not exist in the version you migrated backwards to use. It is indeed a new one, not sure what version it was introduced though. Typing 'doc cell2dataset' will confirm that for you (try it in both version you have access). One thing you can try is 'edit cell2dataset' If you are extremely lucky it will be one of the functions that has actual source available to the user. You can potentially get away with saving that and moving it to your 2011a install. No guarantees, but it is worth a shot.
YUP. Ok so - check this out. Seems that this cell2dataset command is like less than a year old. in 2013a, this exists, but on the version of matlab i am using on this cluster, which is 2012a, it doesnt exist. so i guess the question reduces itself to: 1. what is a dataset 2. what should i use as the 2012a substitute for dataset This is what I am looking up now.
You should really consider the 'edit cell2dataset' suggestion. Two minutes of testing could save you a lot of hassle.
hi matuba! bud, you know me, i always follow your advice. but the thing is, i'd like to know WHY i am using the cell2dataset command, and the R2013a command isnt very explicit about why it is new or awesome. its not that i doubt that or i want to make work for myself, its that i am trying to understand
I figured it was your code so that portion of the puzzle was already handled ;) I'm still behind the times and stuck using 2011a so I'm not on the up and up with them. From a quick glance through the online docs, it appears to be nothing more than a struct rerolled to be specific to the statistics toolbox. Smells a lot like Mathworks reinventing their own wheel once again...
You could also try cell2mat. This is a function that transforms a cell into a numeric or character array. 
It looks like Matlab is exporting the figure using the paper position dimensions, rather than the on-screen dimensions. Try the following code: set(gcf,'paperposition',[1 1 5 4]) print(gcf,'-dpng','-r300','myfig.png'); The paperposition property defines the printing rectangle as [left, bottom, width, height]. In my example the code would export the figure as a png graphic at 300 dpi resolution, assuming the figure is 5" wide by 4" tall. 
Thanks so much! :) That actually works! :)
Do yourself a HUGE favor and move to another language with proper libraries for this sort of thing. Even if you do find a good solution for this issue you will run into many more down the road. I can only assume you want to do some sort of data hoovering and analytics. Processing text in MATLAB is akin to driving rusty nails under your eyelids.
You can run perl scripts (which are great at this by the way) from within the MATLAB environment. I strongly suggest you look at "doc perl" to see how it's done. Perl's HTTP user agent is excellent and should handle redirects internally. MATLAB even has api hooks so that you can dump the result of the perl script right back into a MATLAB variable so you can continue your analysis.
Perfect analogy. It was starting to get rather painful. Thank you!
&gt; Also, matlab isn't used that much in industry. This is just not true. Matlab is used in a number of industries including: * [biotech](http://jobs.monsanto.com/us/wisconsin/engineering/jobid3203850-automation-engineer?apstr=%26src%3DJB-10293&amp;ss=paid) * [finance](http://jobs.lincolnfinancial.com/us/united-states/risk-management/jobid4106528-quantitative-developer?apstr=%26__jbsrc%3D60F0907E-E592-4128-AB2C-23C4E9C12B6D) * [electrical engineering](http://www.indeed.com/cmp/Memsic,-Inc./jobs/System-Sw-Engineer-Inertial-Navigation-8980e616d4bc5096) * [chemical engineering](https://sjobs.brassring.com/TGWEbHost/jobdetails.aspx?jobId=1496391&amp;PartnerId=25493&amp;SiteId=5600&amp;codes=INT-INDEED) It really depends on the firm you're working for *which* modeling language they use, but it's important to know *one*, and yes many do use Matlab in house.
It's pretty hard to give you an intelligent answer without the code.
The one chemical engineering job you list is a R&amp;D position..... Not exactly the industry I was talking about. Regardless, this was a pointless comment. Seeing as how I admitted that it is used *some*, but is less common than others. 
Fair enough, although you also didn't really say *what* industry you were talking about. "Isn't used that much in industry" is a pretty blanket statement. I'm in biotech and we use it heavily. I know it's used a lot in quantitative finance as well for strategy development (usually there's another team that will translate winning strategies to c/cuda for execution). Just curious, what do most chemical engineering firms use? 
This probably isn't super welcome in a matlab subreddit, but switch to Python. It can do most things that matlab can plus it is free and open source. The syntax is very close too, except Python's is cleaner. numpy gives you all of the vector capabilities of matlab. scipy gives you a lot of package support. matplotlib gives you drawing and graphing capabilities. IPython and qtconsole gives you that matlab-like interactive environment. pylab gives you a nice matlab-like syntrax and functions. Plus you get the entire Python standard library, which is fairly impressive. Learning both will help you grasp what is actually going on too. I'd also say that Python is a bit more marketable than matlab, though both are good to know.
By the end of your course you should be quite proficient at understanding how to use matlab. Just remember that the mathworks matlab documentation site and google are your friends at all times. When you have questions on how to do specific tasks, googling "How do I X" or "How do I use this function" will typically get you a reasonable answer. As a side note, although learning MATLAB is great I would recommend taking a more basic programming class if you have the time, (maybe like python, or if you really wanna get into it C and/or C++). Doing this will give you a lot more intuition on program structure and design progress, and will give you the vocabulary that will help you ask the right questions. If you learn something like C and/or C++, learning other programming languages afterwards will be much easier. Another side note: It has been mentioned that MATLAB isn't used much in industry, but depending on the interpretation that is false. You won't see MATLAB used in endgame large scale products much, but it is often used to prototype said products. It is also often used when complicated but not necessarily computationally heavy calculations are necessary. Best of luck to you!
After the class you should be good to go if the class is half-decent. Afterwards, Matlab CODY is a great suite of challenges that can hone your matlab skills, I'd say.
What link?
I'm an electrical engineer, I tried switching over to python because it's FOSS, but I really prefer the Matlab environment and paradigm. I've mostly switched to Octave now.
octave is fine, though in my experience the closest thing to matlab in python is ipython (with the --pylab tag). In any case, reckon that learning to work python is a useful future investment as it becomes more popular and more programs interact with it. Alternatively there is also scilab. 
Cleaner? lol. Dude, I spent half a day once trying to figure out why a Python script wouldnt run, and it turns out it was because something wasnt _indented_ properly. Fucking, indented. They are trying to make Python more popular but imposing aesthetic crap on us from the get go?
Forcing correct indentation is a good choice. Software will always have issues, but disallowing poorly written code solves much more problems than it causes. There is no way that something written like this should be valid. end Matlab's end statement is atrocious to look at. 
I recently jumped to Python. I used to be very into MatLab and IDL, but python is just so much more... awesome. Beyond just being free and open, it's fucking easy to learn, read, and write. Plus, any problem you have has probably been encountered and solved. 
I had that issue the first day as well, but since then, the indentation law has grown on me.
It was the best switch I've made in my life. Plus PyQt4? Oh my god, so much nicer than matlab's gui system. 
&gt; disallowing poorly written code solves much more problems than it causes. Yes, because that one space lurking somewhere that wasn't lined up with my for statement 1000 lines away is going to make reading my code impossible. lolololloool. You know what shouldn't be allowed? Software that kills productivity like this asinine rule. I mean hell, while you're at it, why dont we have IDE's that shut down after our allotted bedtimes too? 
It's the first time I became a preacher of anything, really. After I started using it last month, I basically preached to everyone I knew on using it. I also translated some analytical programs we have from IDL to python (didn't really take too much effort) so I could convince my group to go into python as well. :D
It should not be valid syntax. I wouldn't want to be your customer. Python is equally capable of making prototype software. The only difference is that when someone else goes back to read your code, it wont be as confusing. "Code is read much more often than it is written."
Ok, so. If someone gives you code like this, then they haven't run it. If someone gives you code they haven't run, then they are doing it wrong. The only way an error like this would ever exist is if someone accidentally typed a character, saved a file, and committed it to whatever version control you're using (you are using version control right?). This is the same problem as if someone handed you matlab code with one extra character someone. Both languages will tell you roughly where the bad syntax is. But I know where you're coming from. When I started python and didn't understand it fully, I accidentally missed indents. But I was able to find them really quickly because of bad syntax. But in the end, its so much quicker to not have to type something to start and end the context of a statement. No {} no \begin \end, no for end, no if ; then end;. Just a : and an indent. Simple. Elegant. Easy. You're obviously convinced you're right while making slippery slope and prosecutor's fallacies. So go program in matlab all you want. Just know that it will be a dead language in a few years. import this The Zen of Python -Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!
&gt; If someone gives you code like this, then they haven't run it. If someone gives you code they haven't run, then they are doing it wrong. You are too close minded for me to even laugh at. What if _I_ am writing code for myself? What if I get code from someone else that is - god forbid - off by one character? So what? Does that render the fucking thing unreadable? Your scenario of "omg make it nice codez" is great for certain times, like deliveries, big code blocks, and future use. But - python and MATLAB are meant to be - you guessed it - used for prototyping half the fucking time anyway. That means quick and dirty. That means expediency now. And now, that does not _necessarily_ mean "unreadable". What are you a robot? &gt; Just know that it will be a dead language in a few years. I predict it will be too. Just know that the more idiotic Python remains, the more delayed this apocalyptic Python take over will happen in. &gt; no for end, no if ; then end; LOL that like one of the top reasons it sucks, you dont know where in the loop or function you are. loool
No problem! Aww shit, I left 2 spaces up there on that phrase - you can you still read it ok? 
Am I on the right track here: This would be the script: h = 6.63*10^-34; c = 3*10^8; k = 1.38*10^-23; Temperature = 1200; v = 0:2*10^14; E(v) = (8 * pi * v.^2 * k * Temperature) / c.^3; it says maximum variable size reached? 
Please add 4 spaces before each line so reddit doesn't automatically format out operators. Alternatively, you can use [pastebin](http://pastebin.com/) The error you're receiving is from your definition of v. When creating an interval in MATLAB, the default increment is 1 unless otherwise specified so you're asking MATLAB to create an array with 2*10^14 values in it, and that's way too big for most computers to handle. Adjust your definitions to something like: v = 0:gridsize:2*10^14 % Where interval is your desired resolution Also change your E(v) in the final calculation to just E. There are a couple ways to handle functions in MATLAB, and the way you have it now is a mix of a couple and will throw an error. If you'd like to keep it as written, check out the [function handle](http://www.mathworks.com/help/matlab/ref/function_handle.html) documentation
Okay, so where you have the word gridsize... I put a number? 
Mind BLOWN!
If you can look at the file (i. e. It's not a protected p-file), just use the edit command. At the command prompt say "edit NameOfFunction" and the editor will open that function. 
type this in the command window: open function.m
If I want values, where the step is 1, I often still put in the 1 to have clearer code. Also remember to look up the linspace function if you don't know it. It's sort of the counterpart to the colon operator.
the last two minutes of my life are all your fault.
I only take blame for about 10 seconds. Anything beyond that was free will on your part!
Fun fact: there's a functional form of the colon operator too! For example, `0:0.2:1` can also be written as `colon(0,0.2,1)`. Maybe it's not that fun.
This was literally the first thing I knew about Matlab.
I second going through Matlab Cody. The best way to get good at something is to practice, and Cody supplies some great problems that get increasingly difficult
MATLAB's handling of large data mat files is very poor. The HDF5 format requires a lot of overhead for things like struct arrays, not to mention that the MATLAB implementation of HDF5 read/write seems to rather sub-optimal. In general, I tend to avoid using mat files for large data altogether, and just use my own format with custom MEX read / write functions to read and write into the corresponding MATLAB structs. Probably not the easy solution you were looking for, although for a simple struct array of x,y,z writing your own read / write should not be too difficult.
You can use the version option to specify an older .mat format. You have to go all the way back to v6 to get to before any compression was added. The only issue here is you lose support for enormous data items, which sounds problematic for you. Take a look at [savefast](http://www.mathworks.com/matlabcentral/fileexchange/39721-save-mat-files-more-quickly) for a workaround. Should fix up your issues, but I have no experience using it. Best of luck.
Is using a struct array ABSOLUTELY necessary vs something like a cell array? In general, big struct arrays suck, as there is a ton of repeated header data involved, and as you found, they don't play nice with HDF5. If it has to be a structure, I wonder if converting to a cell (struct2cell) before saving, and converting back to a structure after reading it in would speed it up.
Thanks for the suggestion. Given how slow this is going and how many of these files I have to churn out, I think this might be the best approach. 
Bummer :\ Seemed like low hanging fruit! In that case I'd have to side with Angular first, then pancakinator. Can you move away from a struct? Secondly writing your own save/load seems worthwhile. In that order of potential benefit. 
Not totally necessary. I actually haven't thought of this but will give it a shot and report back. Thanks!
If you can work piecewise, you could use -ascii and -append option to save blocks independently, then use dlmread to pull out select boxes as you need them. This assumes you never need all the data at once though.
Man, I have no idea how to answer this, but its an interesting problem. How long is the script you are running in lines? Do you know any other languages (Julia, R, etc)
MATLAB Cody is... alright. I really don't like their One True Answer approach to things, but it is at the very least a good source of practice problems and situations. MATLAB is too small and niche of a community to really attract any truly great tutorials. You are best served finding something language agnostic (Project Euler comes to mind, bonus it is math oriented) and working through that. This won't necessarily teach you any tricks, gotchas, or features of MATLAB, but it mostly definitely will make you write code and stumble across situations where you need those tricks/features or you get stumped by a gotcha From there it is usually a simple Google search or post here and you'll be on your way.
I doubt that compression is the bottleneck. It's more likely just from serializing and writing all that data to disk. You could try to establish your own binary, on-disk format and use [memory mapping](http://www.mathworks.com/help/matlab/ref/memmapfile.html) to access the file as if it was in memory.
This gets asked periodically: http://www.reddit.com/r/math/comments/17i5cx/what_is_the_best_way_to_learn_matlab/ http://www.reddit.com/r/EngineeringStudents/comments/1e0hfy/help_me_with_my_goal_fellow_reddit_students_learn/ http://www.reddit.com/r/learnprogramming/comments/1iftf4/recommended_tutorials_for_matlab/ http://www.reddit.com/r/matlab/comments/14nwlb/good_tutorials_for_beginners/ etc.... The documentation for Matlab is excellent and has tutorials as well as a getting started pdf and video. I learned from the documentation. Matlab has a *very* shallow learning curve, so it should be easy to pick up. http://www.mathworks.com/academia/student_center/tutorials/launchpad.html Probably the only thing you need to know before going is that Matlab has a user-configurable path (see the function "path") and every *.m file in the path is executable, so if you want to write/run your own functions, you just need to add your working directory to the path (see "addpath") and you're good to go. 
Cool i wonder what the title is.
The links in those threads, along with the Project Euler suggestion, are very good and have been added to the sidebar. If you think there are any others that really deserve to be there but I've omitted, please reply to this post.
Why don't you save the variables you're plotting ? 
Why don't you be useful instead of a shithead?
It is saved with the figure, but I'm not 100% sure of the most robust way to grab it programatically if you've got more than one lineseries. Mainly because I just discovered that this is a thing. In the plot window, if you go to Desktop -&gt; Plot Browser -&gt; Click on your lineseries -&gt; More properties, you can see your XData,YData, and ZData fields (where appropriate) that have the data in them. Just running a quick test, this way did work using a plot of 200 random points that I saved as test.fig: fid = open('test.fig'); test = findobj('Type', 'line'); x = get(test,'XData'); y = get(test,'YData');
rename blahblah.fig to blahblah.mat. Open in matlab.
yea. You can also write a simple script to recurse through the structures and return all 'XData', 'YData' and 'ZData' elements it finds
You're going to want to use textscan. For example: a = textscan('1.3', '%s%s', 'delimiter', '.'); type = str2num(a{1}{:}); id = str2num(a{2}{:}); Look up the documentation for textscan, but basically it breaks the 1.3 in to two strings using the decimal point as the delimiter and stores them in the cell a. MATLAB's cell syntax is a bit confusing, but a{1}{:} is the string "1" and a{2}{:} is the string "3". I convert them to numbers, but you can leave them as strings if that's how the next person needs them. This code will be able to distinguish between "1.3" and "1.300". If all you need is to find the rows with 1.300, I would use: if strcmp(a{1}{:},'1') &amp;&amp; strcmp(a{2}{:},'300') And avoid using the str2num function. Though, I am not sure which is more time-efficient, but if your data structures are small, it shouldn't matter.
Personal opinion: You need to fire your 'data analyst' for gross incompetence. Give textscan() a whirl... fid = fopen("yourFile.dat", 'r'); C = textscan(fid, '%s%s', 'delimiter', '.'); This won't accomplish your grouping step, but it does give a cell array containing a vector of types and a corresponding vector of id numbers.
To expand on this: a_new = [a{:}]; Will reshape the output so it's not such a pain in the ass to address everything. Hopefully reading in the two resulting columns of data is within the skill set of the world's worst 'data analyst'
Nice trick. Just noticed it is giving a cell of cells not a cell of vectors like I originally thought. Double also, 9000rpms beat me buy a few minutes because I edited m post like 978345 times. Fscking OCD. *shakefist*
Where is the title? arghhhh!!!!!!!
You have too many x's. You also reference x0. I'm guessing the first x should be that. Or you're calling volt0 instead of x0 (since you do call it an initial guess). It looks like you're trying to make an anonymous function but it's syntax isn't correct. Lookup how to make an anonymous function and make F or better yet just put the function in the same line as lsqcurve light (hint, there is a symbol used in both anonymous functions and the help lsqcurvefit that you shouldn't have seen before. This is the solution I got: encodingeqn = 2 10 
Line 6 in your code above is not a function, it is acting as an assignment to a portion of a matrix F. Since x contains a negative number MATLAB is getting angry because it does not allow negative indexing. You are supposed to pass lsqcurvefit() either an anonymous function or a function name that gives it some data to work with. If you look at the documentation for lsqcurvefit() the very first example should be very helpful. It defines a function that is then passed to the command. Initially it looks like what you have, but that is just them showing what the equation itself is. They next create a separate function file that actually computes and returns whatever value corresponds to the function. That should also help show where the x=[-1, 0] comes into play. 
x0 is supposed to be the initial guess. The line: F(x,voltage)=x(1)*voltage-x(2); is not how you specify an anonymous function. Try: F = @(x,v) x(1)*v-x(2); Edit: From the type of error you're making you should probably read up on [variable scope](http://en.wikipedia.org/wiki/Variable_scope).
Can you explain to me the @ in matlab? I have it in my code in a few places, but to be honest that is because I am just mimicing the Matlab tuts without a complete understanding, and my boss doesn't really give me time to dig deeply to fully understand.
We had the same answer, so great minds think alike, but I guess my OCD isn't as bad as yours :D
You can also use accumulation functions like accumarray or sparse. One example of using sparse: s = kron(A(:),ones(4,1)); subs = [1 1; 2 2; 2 2; 3 3; 1 2; 2 1; 2 3; 3 2; 3 4; 4 3; 4 5; 5 4; 3 3; 4 4; 4 4; 5 5]; B = full(sparse(subs(:,1),subs(:,2),s,5,5)) B = 2 1 0 0 0 1 4 1 0 0 0 1 4 1 0 0 0 1 4 1 0 0 0 1 2
Ah, gotcha. Just checking to make sure I wasn't putting a stupid mistake throughout my code, thanks!
Use logical indexing. 
How exactly would I do that? I can't use built in MATLAB functions. I have to write a function manually that will get me the product I need. 
That makes no sense. EVERYTHING in Matlab is a function. + is plus() * is mprod() I hate when professors think they're being clever by saying "don't use MATLAB functions"
&gt; L = logical(evens); You don't even need to do a logical. M=1:10; odds=mod(M,2); evens=~odds; Or M=1:10; odds=mod(M,2); y=prod(M(~odds)); Or evens=mod(M,2)==0; 
First, as soon as you open up MATLAB, put it on your resume. Second, to be actually proficient I would work through Cody, that will help you figure things out. After that use MATLAB Answers and actually answer peoples questions. That will give you exposure to functions/programming styles beyond what you're used to.
If you're in an ODE/PDE course, you need linear algebra. If you're in a matlab-heavy course, you need linear algebra. No way around it. If you need some help understanding the algebra, find an old copy of kreyszig in the library. (It's huge, but there's a chapter on it, and my engineering students seem to find it more readable than books directed at "math people.")
Google everything. This is not sarcasm.
Professors that use this absurd "no built in functions!" requirement should be punched in the throat. The single most idiotic thing I've come across in academia. "I'm going to teach you how to use this insanely powerful tool. Except you can only use the 5% of it that is exactly the same as every other option out there."
 m = 3:15 % example data prod(m(find(mod(m,2)==0))) 
Well the point is to be teaching programming concepts (which are relevant, let alone crucial, to pretty much any language) and basic algorithms to those who are fairly new to programming to begin with. Teaching these new students that "matlab is an interpreted language, but everything down to the basic operators are really functions that are compiled in C..." is only going to confuse them
Thank you! Ill throw that sucker on there. I have been using it for my chE class a bit, and learning what all the functions mean. 
You should probably run the installer.
The HSV conversion should give you three greyscale images corresponding to the H, S, and V channels. You should be able to threshold that channel like normal. H = rgb2hsv(I); bw = im2b2(H(:,:,2), .5); For despeckling, try a median filter.
Which book by kreyszig??
Advanced engineering mathematics. It's on like... edition 10000. Any of one of them published in the last 10 years should suffice. 
Apply a high-pass filter; that might get rid of the shadow and show up the veins. 
what about the tutorials right there ---&gt;
Probably a stupid answer, but have you tried google advanced search? ( Select pdf as type, and type in Matlab tutorial or smth similar )
You're paying multiple people thousands of dollars to teach you the material, why don't you actually talk to them this time around?
BRILLIANT! Get this man a medal...
http://www.mathworks.com/moler/index_ncm.html Free introductory level textbook written by Cleve Moler himself.
I agree 100%, I would also point to the "getting started" guide: http://www.mathworks.com/help/matlab/getting-started-with-matlab.html Once you read through all those articles you'll be able to do some basic things without fumbling around too much.
Try gaussian filtering: I = imread('myImage.jpg'); % Read the image myFilt = fspecial('gaussian',[10,10],0.5); I_filt = imfilter(I,G,'same'); % ^ This will give you a smoothed color image % Then select pixels with a high green range greenPix = I_filt(:,:,2) &gt; 200 ; % Second image plane is green in RGB % But vary the 200 value based on your needs (high value is more % restrictive and selects less pixels). % If your leaf is red than try: redPix = I_filt(:,:,1) &gt; 200 ; imagesc(greenPix); % Show the logical mask % Use functions like bwboundaries or regionprops to select only the % largest region (your leaf) If you plot the image using imshow or imagesc and use the pixel selection tool than you can get a better idea of the greenPix or redPix threshold to use. Hope this helps 
"Now it's saying hit any key to continue. I can't find the any key."
Perhaps it would be more constructive if I come back with specific questions about concepts, terms, etc. that I don't understand haha I will most likely return shortly.
saved both of those links, much obliged!
Nice one haha
it's at least 200 students this time around, last time it was upwards of 300 because there was only one class so it's quite difficult to get one-on-one time. emailing wasn't and isn't any less frustrating so i thought i'd turn to the matlab gurus of reddit.
That's not a [histogram](http://en.wikipedia.org/wiki/Histogram); that's a [bar chart](http://en.wikipedia.org/wiki/Bar_chart). % generate some representative data (you don't need this part) layer_ids = randi(8,1,50) amplitudes = randn(1,50).^2 % compute grouped averages averages = zeros(1,8); for id=1:8 averages(id) = mean(amplitudes(layer_ids == id)); end bar(averages); If that's mysterious, check out the [docs](http://www.mathworks.com/company/newsletters/articles/matrix-indexing-in-matlab.html) on [logical indexing](http://blogs.mathworks.com/steve/2008/01/28/logical-indexing/).
This is *exactly* what the accumarray() function does. I'll use the numbers in your picture for an example: subs = [1 1 2 8 3 7 2 1 4]'; val = [20 30 70 90 10 30 70 50 100]'; A = accumarray(subs,val,[],@mean); bar(A) xlabel('Layer'); ylabel('Mean Amplitude'); 
drawnow might be a better choice
that was bloody amazing, thanks so much! I take my hat off to you sir
I work for a Fortune 50 company making my living spending 50 hours a week in Matlab. I wonder if you even tried to run a single line of the code I POSTED. I didn't ever say do M(mod(M,2)) Not to mention, mod(M,2) will return a 1 for all of the ODDS. Meaning If you want the evens. &gt;&gt; M(~mod(M,2)) ans = 2 4 6 8 10 &gt;&gt; 
LOL Let me quote my first post for you since you can't read well: function y = EvenMatrixProduct(M) Evens = M(~mod(M,2)); y = 1; for i = 1:length(Evens) y = y*Evens(i); end end Yes your code works. I would know that since I posted it before you. I don't understand why you can't read my posts.
Sounds like you are mixing up the function definition with the call to the function. I the function definition any variables you want to use should be specified in the parentheses, e.g. y = myfun(x) , y = x*2;. In the call to the function in your script you can insert any variable in the parenthesis (assuming it is the correct type), and Matlab will use that as x while running the function, e.g. b = myfun(a); will set x=a, do the calculation to find y, then set b=y. Think of the function as a separate program to which you have to explicitly give information.
You also posted a logical() hence the portion of your post I was replying to. 
What's wrong with sending vectors into the udp block? You can use %d or %s, depending on what result you want, to change the numeric input to string.
Because you cannot use sprintf in matlab code that is going to be compiled for xPC.
You have to put your function definitions in separate files, one for each function. You could also use anonymous functions, though I don't know if Octave supports those.
In addition to accumarray() (per /u/bread_taker), you should check out grpstats() if you have the Statistics Toolbox.
Did you look here? https://www.mathworks.com/support/install.html 
Cant you use fprintf? That comes from C (my knowledge of C is long gone though), but it will write strings, numbers, etc.
I got it working but thank you 
This also works: subs = [1 1 2 8 3 7 2 1 4]'; val = [20 30 70 90 10 30 70 50 100]'; [mean_values groups] = grpstats(val,subs,{'mean','gname'}); groups_num = str2num(cell2mat(groups)); bar(groups_num,mean_values,'barwidth',1); 
How exactly are you executing the MATLAB code on your target? Is it in a MATLAB Function block in a Simulink model? Seems like you should be able to convert your numbers into `char` arrays whose values are the ASCII value of each digit in each number. If not `char`, then certainly `uint8`. But the block /u/rygo796 posted looks promising too.
You don't have TA's in a class that size?
I really need a source to learn a bit of linear algbera. This course does not require a linear algebra pre req, but there is some linear algebra I have to pick up. I posted the assignment, I need some sort of source to pick up on the math I need to solve those problems. Thanks all!
&gt; Is it in a MATLAB Function block in a Simulink model? Yes. You can create an output that is a fixed width uint8 array then feed that uint8 array into a udp out block. Actually, I'm checking if the first element is zero and, if so, activating a triggered subsystem that contains the udp output block. You can then write into the array. So if I have a string in the variable `str`: function out = myMatlabFun(in) ... out = uint8(zeros(1,200)); out(1:length(str)) = str; This gets around all the dumb port width issues but there's still the matter of creating `str`. /u/rygo796 is really good to know about (I didn't previously) and I'm likely to use it in the future, but it probably doesn't help this specific problem. I started trying to write a new `num2str` but in the process accidentally shadowed a built in function that's actually needed for Matlab's error reporting. Debugging an error in the error reporting code is lots of fun, so I spent the rest of the day figuring *that* out and addressing a pre-existing issue that I eventually solved (turns out you can tweak Simulink block execution order, which is awesome) right before my boss broke out Friday beers. If nobody comes up with anything else I'll get back to reinventing the wheel on Monday.
You'll probably want to do this with an image, that way you can set each board location to black, white, or red etc. When using images you have 3 dimensions: x and y corresponding to board size, and 3 z-dimensions corresponding to Red Green and Blue. gX = 6;%Xdim gY = 6;%Ydim board = ones(gX,gY,3);%create simple RGB image of board board(1,1,:) = 0;%set pixel to black [0 0 0] board(1,2,:) = [1 0 0];%set pixel to red board(1,3,:) = [0 0 1];%set pixel to blue imagesc(board)%draw board axis square set(gca,'XTick',[0.5:(gX+.5)],'YTick',[0.5:(gY+.5)],...%gridlines 'GridLineStyle','-','XGrid','on','YGrid','on',...%turn them on 'XTickLabel',{'1','2','3','4','5','6',''},...%make labels 'YTickLabel',{'A','B','C','D','E','F',''}); Edit: formatting
thanks man, i'll try it out in the morning
have you tried just turning on the servos and motors with the Arduino IDE built in scripts? Could you post some pics or a block diagram of what you are working on? I might be able to help if I can see it more clearly. Also, try blinking the LED on the shields. (I have had problems with adafruit shields in the past.) Also, which Arduino model are you using? I would love to help troubleshoot.
Unfortunately the videos on that site are not loading for me. I see that you are using the student version of MATLAB. This could be causing a problem. Check the baud rates. Make sure that they match. Check the hardware and makesure that all of the ports are active that are supposed to be With that many devices a ground loop might be possible (differential in what the MCU thinks is true earth ground) 
got it, thanks a million. Im going to take the post down so it doesn't spend anyone elses time. thx.
You're likely going to need the user manuals for the HPC environment. There is also the possibility that your HPC is configured to limit the memory allocated per job. 
I thought of the latter and am just hoping it's not the case -- but I suspect it might be. This is a disadvantage to being impatient. 
Your function doesn't depend on xdata.
That's it! Thanks.
solved by reverting to earlier version of matlab :(
but, that portion of the code works. it returns the contents of the cell associated with the index. its just reconstructing the original array (minus the columns eliminated) that is giving me trouble. thanks very much.
Oh, then I didn't understand what you are trying to do. Are you trying to concatenate two cells ("put val back onto VALSP")? x = {'a','b',c'}; y = {'d','e','f'}; z = [x y];
That came out terribley, here it is rewritten: function [c,err,yc]=bisect3(f,a,b,delta) ya=feval(f,a); yb=feval(f,b); if ya*yb &gt; 0,end max1=1+round((log(b-a)-log(delta))/log(2)); for k=1:max1 c=(a+b)/2; yc=feval(f,c); if yc==0 a=c; b=c; elseif yb*yc&gt;0 b=c; yb=yc; else a=c; ya=yc; end if b-a &lt; delta, end end c=(a+b)/2; err=abs(b-a); yc=feval(f,c);
Add four spaces to have reddit format text as code. Add an additional 4 spaces per indent.
You cannot throw a function at MATLAB in that format. I see you are using feval() to do some computatoin on the function. That takes an anonymous function as an input. Ergo your f input needs to be a handle to an anonymous function. Even simpler: since you are only evaluating it for a single argument you don't even need feval(), just an anonymous function. [MATLAB docs on anonymous functions](http://www.mathworks.com/help/matlab/matlab_prog/anonymous-functions.html) Give that a read for more information. You are almost at the solution (but I'm an ass and I'm not going to give it to you :p) If you still can't get it to work out after reading through the above, post again and I'll be slightly less vague.
Thanks for that. Upvote for you.
Thank you for not giving me the answer, I need to learn it. I'm going to finish some homework due tonight and then peruse the link. Then I'll come back if I cannot actually figure it out.
&gt; The easiest way to get a helpful answer is t I see. and then put the URL here you mean?
"Theres a MATLAB function for that" VALSFIRST = cell2mat(vals(1:5)) vals(1:5) returns a smaller cell array, which then gets converted to a numeric array via cell2mat and stored as VALSFIRST. More info, http://www.mathworks.com/help/matlab/ref/cell2mat.html 
Say you have an input statement: x = input('Enter your numbers: ','s'); The *'s'* is important; it specifies that the variable will be a string (you can't enter a delimiter without it). The user inputs numbers with spaces (or other delimiter that you specify in the code) in between each. Like so: Enter your numbers: 45 64 234 845674 There might be a function that parses based on a delimiter (didn't look it up), but you can use these lines of code to put any number of values into elements of a variable. User just has to enter a space between each number: delimiter = ' '; I = [0 find(x==delimiter) length(x)+1]; for ii = 1:length(I)-1 vars(ii) = str2double(x(I(ii)+1:I(ii+1)-1)); end This works for numbers of any size and works for any number of inputs. You can later put each value into a separate variables if you want. Viz: A = vars(1); B = vars(2); etc... I hope that works out for your needs! If there's a function that does what I wrote, hopefully someone will post it.
Just found the function. But it only works in 2013 version. It's *strsplit*. Here's a snip of code: % Same input function x = input('Enter your numbers: ','s'); delimiter = ' '; % This separates a string by a delimiter and puts each part in a different cell in cell array 'c' c = strsplit(x,delimiter); If you want to get the value of a certain variable (say the ii'th value), just use this code. var = str2double(c{ii}) This should be a bit faster (though probably not noticeable for only 6 variables) and it's a lot prettier. However, if you don't have MATLAB 2013, you'll have to use my other code with the loop.
You just have to use brackets when responding to the input. x = input('Input numbers using brackets:') Input numbers using brackets:[3 500.2394 39] x = 3.0000 500.2394 39.0000 class(x) ans = double
Something like this one liner? &gt; [A, B, C, D, E, F] = deal (input('A? '), input('B? '), input('C? '), input('D? '), input('E? '), input('F? ')) Or perhaps you'd rather have a short script populate the matrix right away, avoiding variables A to F. Easier to escalate: &gt;G = zeros(2,3); &gt;for i=1:2 &gt; for j= 1:3 &gt; G(i,j) = input(sprintf('%i,%i value? ', i, j)); &gt; end &gt;end &gt;G 
is there anyway to use this method and make it 2 by 3 matrix?
yeah just format your matrix like normal ex: [1 2 3; 4 5 6] as far as matlab is concerned you've just started a line with x = and it's up to you to finish it. So you can even &gt;&gt; y = [1 2 3; 4 5 6] y = 1 2 3 4 5 6 &gt;&gt; x = input(' ') y.^2 x = 1 4 9 16 25 36 
What advantage do you imagine it having over any other text editor?
Hm, I haven't found a book that I really like. *Matlab for Psychologists* which came out last year seemed ok. If you are at a university and they have a subscription to SpringerLink, you can get it from there for free. 
I want to write matlabprograms and run them on the ipad
So what you are after is Matlab on the iPad not the editor isn't it... [this seems to be available...](https://itunes.apple.com/gb/app/matlab-mobile/id370976661?mt=8)
Again, what advantage does the matlab editor have over any other text editor for this purpose?
&gt; But it only works in 2013 version. textscan() will accomplish the same thing as strsplit(), though for whatever annoying reason MATLAB decides to dump a matrix into a cell. regexp() can also be used, but it does open its own can of worms (very powerful, but can be very complex). In this case it will output a cell array of strings, which would need to be converted to a matrix (or cell array of doubles). input_test = '45 64 234 845674'; % textscan inputs_a = textscan(input_test,'%f'); inputs_a = cell2mat(inputs_a); % Pull the matrix out out of the cell % inputs_a = [inputs_a{:}]; % Simpler notation, accomplishes same as cell2mat() in this case % inputs is now a 4x1 matrix % regexp inputs_b = regexp(input_test,'\d*','match'); % inputs_b is now a 1x4 cell array of strings inputs_b = cellfun(@(x) str2double(x),inputs_b); % convert cell array of strings to cell array of doubles % inputs_b is now a 1x4 cell array of doubles inputs_b = cell2mat(inputs_b); % inputs_b is now a 1x4 matrix Both should return equivalent matrices.
In addition to input(), which is robust enough to handle as many numbers as you throw at it, you can also use inputdlg() to create a dialog box if your number of variables is known. See: http://www.mathworks.com/help/matlab/ref/inputdlg.html for the documentation.
I have found *Matlab for XXX* type books to be really not terribly useful and tend to teach a lot of really bad habits, especially if you haven't programmed before. I would recommend a general Matlab tutorial like one of the ones in the sidebar. If it's for neurosceince (my field too Yay!) then I would recommend going through the MIT one and then working through the Project Euler problems. You will learn a lot more by doing than by reading, but either way it is going to take some study and effort to get good at it, no matter what. Also, what are you planning to use Matlab for?
Well, I want to be able to WRITE and RUN the program using the ipad, which cannot be done with the app you linked or with a simple texteditor. This, in turn, is why I'm asking is anyone know a software which can both WRITE and RUN matlab programs. 
No
Thank you, finally someone who actually answered the question
Ah, I had understood you wanted the same behavior with less code. My mistake.
Just jumping in here, Matlab may not be the best language to learn programming in. It tends to work very differently from most other languages, and a lot of the habits and patterns you develop might not carry over effectively if you have to do a project in, say, C or whatever.
Thank you it worked
If the OP works in an hospital and has no prior programming experience, it's probably safe to assume that is learning MATLAB for a specific task and won't probably need to use C in the near future (or ever).
I don't see any errors. I suspect the error must be in setting your constants. Perhaps the constants you're using lead to a value of the derivative that is zero? Put a break point at the end of myHH, look at the value of dVdt at the first couple time steps, check if it's zero, and diagnose why it's zero. 
Where are you supplying a current injection? Otherwise a HH neuron will just sit at its resting potential.
I don't see any input current. Also, are you sure the initial conditions for ndot, mdot, hdot are correct? Its been a while since I did the simulation so I don't remember what my initial conditions were. But I'm sure you can calculate them using their steady state formulas at your resting potential.
-3x is not valid syntax. You have to specify the * (or .* but that is another can of worms for later) to tell MATLAB you want to multiply.
so I replaced my original entry with 5 * x * exp(-3 * x) and I still receive the error message. 
Then you're going to have to give us a bit more to work with.
What's the full error message? Did you define x?
I will ask again... What's the full error message? Pasting your code would also be immensely helpful. You really shouldn't be making it this difficult to help you. 
Please paste below exactly what you typed in and exactly what Matlab spit out.
&gt; 'n' must occur in P% of the M subsets. Equivalently, each subset 'm' has P% chance of containing 'n' These are not equivalent mathematically, and are probably contradictory. Which is it? Also, You cannot specify both probabilities of occurring in a subset and the number of elements in a subset unless the probabilities are chosen very carefully (and even then, I'm not sure they can be and still be independent). You can specify relative frequency. Is that what you mean? Finally, are you allowing repetition within the subsets? That is, are you sampling with or without replacement?
I was trying to plot the functions from this paper: http://arxiv.org/pdf/0806.3663v2.pdf -fig.1 from this paper In the paper for T=3K we can see that mi&gt;&gt;T so in the integral we use heaviside like in my example code, and I think that this is the problem. For the values of T=100 or T=200 instead of heaviside there is tanh(f/(4*T)) in the integral, and they plot fine. I think that heaviside is adding singularity to the function, and I am not sure how to handle it? Maybe quadgk isn't the best solution for this problem, or I need to split the integration interval and avoid the singularity? 
This worked. Thanks a ton everyone. I am sorry it must have been frustrating to answer my question when I didn't provide things. I will provide everything next time, and I appreciate all of your help!
Ah okay, nix the second part of that statement. This is why you don't do math hungover at 3am. Especially math you aren't good at. Edit*** There should be no repeated subsets, and no subset should contain any 'n' more than once. Relative frequency requires all of the P%s to add to 100% correct? If so, that is not what I have, if I were add all of my P%s I would get much more than 100%. I think the idea is along the lines of: Out of M subsets sampled, 95% contained element 'n', 80% contained element 'n2', 5% contained element 'n3'....etc. 
That runs fine for me. It isn't plotting what you want, but it definitely runs and plots SOMETHING. Stop and consider what the output of meshgrid() is giving you and then what x^2 (think of it as x*x, that will help) is doing to the values. [The MATLAB documentation is your friend for this one](http://www.mathworks.com/help/matlab/ref/arithmeticoperators.html).
Geez... I feel like a complete idiot. Guess that's what I get for not fully understanding the style of matrix multiplication notation in Matlab yet. Changed z=sin(x^2 +y^2 ) to z=sin((x. *x)+(y. *y)) and got what I was looking for. Thanks for not just handing out the answer and for the link!
You'll (almost) never make that mistake again! Always glad to help someone with a well posed problem and at least some meaningful attempt to solve it. Bonus hint: x.*x and x.^2 are equivalent
Not on PC right now to test: have you tried "hold all" instead of "hold on"? Otherwise it might just be a syntax thing
Just tried it, didn't fix it, I get the same error message. I'm pretty sure it's syntax, I just have no idea what I've got wrong. It seems to not like the fact that I tried to store objects/handles in a vector (ie my [a b c d] bit) because it stops there every time.
One of the signals you're plotting isn't a vector. If either of the arguments to plot is a matrix (e.g. **eeg**), then output will be a column vector of handles. You can't horizontally concatenate a [N 1] array with several scalars. Try replacing your code with legend([a; b; c; d],'EEG Data','Mean','Mean +1sd','Mean-1sd','location','best'); You can also get the same array of handles using a single plot command: handles = plot(t,eeg,'-k', t,eegmean,'-r', t,eegmean+eegstd,'-b', t,eegmean-eegstd,'-b'); Good luck.
It looks like you're plotting them all on the same figure, right? In that case, you only want one legend box, not a bunch. The "legend" function will automatically figure out how many lines you have on that figure and color them appropriately, in the order they were plotted. Example: a = [1 2 3 4 5]; b = [6 7 8 9 10]; x = [-2 -1 0 1 2]; plot(x,a,'r-'); hold on; plot(x,b,'b-'); legend('red line','blue line'); 
Is order important? (Your use of the word "permutations" suggests it is, but the problem description doesn't, so I will assume it isn't.) Is there always a possible solution? I think I can come up with some N, M, P% combinations that are impossible to satisfy. Are there additional bits to your problem that restrict the set of constraints to only the possible ones? In any case, I'd try a randomized algorithm: 1. Generate all the subsets first, selecting completely at random. 2. Calculate the frequencies of how often each element appears in the collection of subsets. Keep track of which ones have a frequency that is too low. (actually, it would probably be better to keep track of the counts and not the frequencies) If you find that all the frequencies are close enough, terminate. If all the frequencies are above their targets, or they are all below their targets, you have an impossible set of constraints. 3. Pick a random subset, and within that subset, pick an element whose frequency is too high. Replace that element with one of the ones whose frequency is too low. (if you can't do this because all those elements are already in this subset, pick another random one. (but keep track of which ones you tried before, so you don't loop forever)) 4. Goto 2. You should be able to adjust the list of global frequencies based on the change made in step 3 without counting them all again (i.e. by adjusting the counts). [If you can think of a good way to vectorize this, please let me know...]
This sounds like the issue to me as well.
I don't have MATLAB in front of me, so I can't check, but don't the legend entries need to be in a cell array? Try legend([a b c d],{'EEG Data','Mean','Mean +1sd','Mean -1sd'},'location','best');
Initially I believed the order of the elements in the subsets was significant, but later I realized the only constraint that mattered was that no element was contained in the same subset twice. I guess that would mean my use of permutations at the top was incorrect. --I believe that in general there would not always be a solution given a set M, N, P, however all of these constraints have fairly forgiving tolerances except for Q so hopefully I can get something close to the desired solution. --I like the idea of your randomized algorithm. I have already tried a different randomized algorithm (see the algorithm in the posted box, I edited it) and it provided "okay" results. Checking histograms at intermediate points during the generation of the sets, I see that it works very well for the first 45 'n's but then it seems it runs out of subsets to fill and it has to generate new ones (thus screwing up the %s). Your solution seems like it has a higher chance of working well so I'll try that when I get some time. If I come up with a solution that is well vectorized, I'll post it here as an edit. Thank you for your answer! 
I'll look more into the greedy algorithm and relative frequency. Thank you for your answer!
You can find a quick how to here: http://en.wikipedia.org/wiki/Slope_field There are two awesome programs called dfield and pplane but they are for plotting solutions. Just something that is nice to be aware of. 
Ffun = @(X,Y) -(3-Y).*Y; You must use .* because you are doing element-wise multiplication, not matrix multiplication (*).
That fixed it thank you so much for the help!
Another quick question, i need to graph a few IVP along side the slope field? Like how would i plot -3/(exp(3*t - log(3/8)) - 1) and the slope field on the same graph in matlab?
It says theres an error in the line containing plot (t,y1,'k') but in the compiler there is no red error things that i can see. Does it matter what order i have the plot command and the slope field command in? edit: i was stupid and completely skipped the error it says Conversion to double from sym is not possible.
Thanks man, you helped me a lot! I owe you a beer :) I guess the biggest problem was that I didn't pay attention about epsilon=(1/2)*w and that integrand has a singularity since in the text it stated "we arrive at the integral without singularities". I appreciate your help, thanks again
No prob. Pay it forward!
I wanted to check if at least one was real. Thanks a lot for your reply.
Thanks for the love with my [colormap function](http://www.reddit.com/r/matlab/comments/1jqk8t/you_should_never_use_the_default_colors_in_matlab/). I've been working on this histogram script for a years now and think you might like it too. It can take almost any data and automatically generate a nice looking histogram with reasonable bounds and a good bin-size. You have tons of options to customize it further. It can also compare multiple datasets really well. What do you think reddit? Are there things you like, things you don't like?
Are you going to fix them? :P
Looks nice, I just finished analysis of the project I'm currently working on but I'll give it a test spin when I get to the next one.
matrab prease
thanks! and congrats on finishing ur project
Try using an insert column function before the xlswrite
Worst case scenario, can you try reading the excel file, modifying it, and then (over)writing everything back to the file?
Not too sure about using xlswrite since I run mac and most features of that function aren't supported, but based on this link I'd say you should follow the other's advice to read the old, concatenate with new, and rewrite. http://www.mathworks.com/support/solutions/en/data/1-1BM4K/?product=SL&amp;solution=1-1BM4K
On second thought real prepend is impossible, Steve Lord on the subject: &gt;&gt;If you could do this, where would you put the data in the new line on the disk? You can't put it before the original first character of the file, as that could result in overwriting the tail part of another file. You can't create new locations on the disk (at least not without deforming the disk and transforming a lot of energy into matter to create the new disk material.) &gt;&gt;-- Steve Lord slord@mathworks.com
Better object oriented programming support
I got this to work once by taking the size of the array, and then writing to the right of the value of the size... 
Not going to do your homework for you ------&gt; But I'd say that this: &gt;This means that fzero(f(x)) is acceptable, but fzero(f(x,y)) is not. *As such you might have to use the shared workspace property of nested functions to your advantage to complete this assignment.* Isn't needed. You can take the e and M inputs and stick them in an array, so you're only passing one argument to fzero.
I don't recall when they added the JIT, but I think it was around 07-08. For loops are no longer absolutely terrible... they can often beat convoluted arrayfun/cellfun constructs now. 
&gt; object oriented programming support FTFY Also, if you got 2013b then they just added a bunch of (still not great, but much better than nothing) string processing functions.
Also take a look at `any` and `all`.
Is the 2GB limit a function of the platform or is it some quota applied by the cluster admins that you're trying to circumvent? If the latter, it sounds reasonable (although you don't need a `parfor`, a `for` would suffice). It might be better to just talk to the server admins though.
&gt; Whenever I use the command xlswrite I just end up over writing what is already there. This is how `xlswrite` (and for that matter Excel) works. You read the file into memory, edit it in memory, and then write a replacement file.
Thanks. It's been almost a year since I've used matlab, the simplest things I did a ton last year just left my brain. 
&gt; When you click on a variable in your code, it highlights it's every occurrence in the code, Not only this, but if you change the name of the variable, and then press shift+enter it will rename all occurrences of said variable 
[The MATLAB profiler](http://www.mathworks.com/help/matlab/matlab_prog/profiling-for-improving-performance.html) is your friend.
nice - have never seen that :) 
It may or may not prove useful. Odds are your actual code runs fine but constantly hammering MATLAB to update a figure window (ie- display your animation) is generally a recipe for sadness.
yeah it might, I am gonna take a look at it now. I was hoping someone might know an another way than surf (or plot) to show figures and animate them, a way that would be more efficient.
Graphing in Matlab is extremely slow. One way to speed things up is to only use plot, image or whatever you're using (on my phone so reading your code is hard ;) ) once and subsequently updating the data to be displayed, i. e. changing the XData, YData, CData... properties of your original plots. I can't post an example right now, but if you still need it I'll do so on monday. 
Sure thing - will do on monday when I'm back at work. 
Looks like you definitely narrowed it down to the figure updates using the profiler. Was the obvious culprit, but still worth checking out. Try reusing the surface object as suggested by betafusion. [Surface Properties for fun and profit.](http://www.mathworks.com/help/matlab/ref/surface_props.html) Absurdly simple plot() demo: p = plot(rand(1,1000)); set(p, 'YData', rand(1,1000)); Run each individually to see effect. tl;dr - update the data being plotted using an existing plot object rather than having to kill the existing plot and recreate an entire new one. Same technique applies to mesh and surf. There is also a property called YDataSource. So you can just change the values stored in a matrix somewhere and the plot auto updates.
Jesus christ that helped a lot. I used the p = plot(rand(1,1000)); set(p, 'YData', rand(1,1000)); I runs more smoothly now - its like 10-15 fps now so far from perfect, but compared to 0.5-1 fps before its a huge improvement. Thanks a lot :)
Use string concatenation.
 s=[num2str(n),' Robots on Screen']; title(s) is one way to do it.
The problem I'm having is defining that n. I don't know how to make 'centers' from the workspace show up as an integer 'n' I'm trying n={centers} but it says its an undefined variable
Here's what I have, I just don' know how to use the centers from viscircles to pull its integer clc;clear;close all; load('MultiRobot3b.mat') h=figure; set(h,'position',[288 327 1087 420]) for k = 1 : nFrames tic; subplot(1,2,1) imshow(mov(k).cdata) subplot(1,2,2) %Changes each frame from rgb to bw then isolates the robots in black %and using imfindcircles, locates the number and location of each robot %in every frame ed=rgb2gray(mov(k).cdata); ef=im2bw(ed,.285); se=strel('disk',3,8); eg=imerode(ef,se); se=strel('disk',2,8); eh=imdilate(eg,se); imshow(eh); title ('n Robots in Frame') [centers, radii, metric] = imfindcircles(eh,[18 25],'ObjectPolarity','dark','Sensitivity',0.92); viscircles(centers, radii, 'EdgeColor','r'); %this pause adjusts the frame rate and pauses the code temporarily pause(.001); while toc&lt;(1/vidRate) pause(.001); end end
Updated
It might not make a difference to you, but GPU computing is now handled natively (through the gpuArray class) if you have the parallel computing toolbox. This was added back in 2011 or so, but it has really matured in the past few versions, and has gained support in a nice number of other toolboxes.
It seems like you might be doing all this backwards. Do you have some code you could post? I generally use assignin and evalin as ways to get around preexisting functions that I don't want to alter very much.
Are all the workers working on a single piece of a larger problem, or are they all running the same code just with different data (SPMD)? Do the nodes have some sort of shared storage (e.g. NAS or SAN connection)? I mainly work with distributed SPMD jobs that spit out a ton of data, and I have found the absolute simplest way to deal with it is to have each worker finish up by writing its results to disk and returning a status flag that lets the head node know it finished okay with some other housekeeping info about the task. It completely eliminates the data transfer between nodes as managed by matlab, except for the small amount of data you push to the nodes to start them up. If you divide the work up right, and have decent storage speeds, you don't even take that big of a performance hit (but that does depend on your exact problem and hardware).
sprintf is your friend here. You can use concatenation, but you have much better flexibility with sprintf. Consider it a 'best practices' approach for this simple stuff. You also can't use a variable before it is defined. You can call title wherever you want and it will title the current axes. You can even give it an axes handle and it will title whichever axes you want, regardless if they are active or not. imshow(eh); [centers, radii, metric] = imfindcircles(eh,[18 25],'ObjectPolarity','dark','Sensitivity',0.92); viscircles(centers, radii, 'EdgeColor','r') title( sprintf( '%i Robots on Screen', centers ) );
I will definitely try this when I get home!
Haha me too when I was looking it up. Google was insisting on auto correcting it. I get distracted so easily I started reading up on current issues in Israel.
this gives me 'dimensions of matrices being concatenated are not consistent' 
I actually just found that about an hour ago. I made [m,n]=size(centers) and then used the m value to display in the command window with round. Thank you!
There's probably other ways to do this, but I usually do it using structures. If you feed a function a structure, you can call fieldnames in the function and get a cell of strings with the name of each variable to feed into your plot. In case you're not too familiar with structures you can access variables using string names. For example, you can call: structure.var1 with structure.('var1') -this last part is helpful if you want to use loops. Best of luck.
hey thanks for your help. Im trying to find the 2 coordinates (2,4,3:2,4,4) within the set of larger coordinates. I'm trying to figure out how I can get the output as just a single logic array 1x12: which would be 0 1 0 0 0 0 0 0 0 1 0 0
sorry for the lack of clarity im trying to find a single 1x12 logical array to identify the position of the subset of coordinates within the larger set of coordinates. So im trying to figure out how to get this logical output: 0 1 0 0 0 0 0 0 0 1 0 0 
something isn't adding up. x and y (the first 2 vectors) are both `1x7420` in dimension. You then have a vector `c_plus` that is `1x1500` and `c_minus` which is `1x6000` which are the indices (values in `x`) which should be plus or minus. 1500 + 6000 = 7500 That is 98 elements to big to be 1:1.... or was that 6000 an estimate? Since `c_plus` and `c_minus` are in the same range as x, you can index directly: figure(1); clf; hold all; scatter(x(c_plus), y(c_plus), 'ro', 'filled'); scatter(x(c_minus), y(c_minus), 'go', 'filled'); 
The workers are running similar code with different input parameters. There is no shared storage (if I understand it correctly). For one of the tasks, only data is created. For two of the other tasks, they need to be able to load previous data which I want saved on the host computer (which is where I run into trouble trying to deal with more than 2GB transfers with the batch). IIRC, there isn't much space allocated for my data on the cluster I work with which is why I wanted to have the workers do the data file transfers. 
This is for initializing the variable dy, which is filled with the actual values in the subsequent lines. Without the initialization, you'd end up with a row vector instead of the required column vector. Alternatively, dy could be filled without initialization by using the full subscript indexing instead of the linear indexing. So instead of dy = zeros(3,1); % a column vector dy(1) = y(2) * y(3); dy(2) = -y(1) * y(3); dy(3) = -0.51 * y(1) * y(2); you could write dy(1,1) = y(2) * y(3); dy(2,1) = -y(1) * y(3); dy(3,1) = -0.51 * y(1) * y(2); However, it is good practice to initialize variables before use; if only to make sure they contain no data from previous calculations.
This is what you're looking for: x = [1 2 3 4 3 6 7 8 9 2 4 3]; y = [3 4 5 2 3 6 3 6 4 4 2 3]; z = [3 4 6 2 4 5 6 3 4 3 1 4]; coords = [x' y' z']; loc = [2 4 3; 2 4 4]; indx = ismember(coords,loc,'rows'); You can transpose the final result if you prefer a row vector.
An alternative approach might be to capture and output the figure handles so you can label the plots with the appropriate variable names outside of the function. Not as efficient, but it's a quick fix.
 M=[0.05 0.3 0.55]; N=[0.7 0.45 0.2]; plotw=0.25; ploth=0.25; for m=1:1:3 for n=1:1:3 subplot('Position',[M(m) N(n) plotw ploth]) imagesc('something(:,:,m,n)') caxis([-1 1]); end end hcb=colorbar; set(hcb,'Position',[M(3)+plotw+0.01 N(3) 0.02 3*ploth]) From an old mfile, where I did a 3x3 plot in a loop. Should be usable to you. The trick is to give the colorbar a handle, and then position it manually. Remember to to set the clim to the same for each subplot. 
F is being defined as an inline function of two parameters, *t* and *x*. In this case *F(t, x)* will return 0 for any (*t*, *x*). If i wanted a sine function instead (assuming *A*, *w*, and *k* are defined elsewhere): F(t, x) = @(t, x) ( A*sin(w*t - k*x) );
All your previous work 'should' still work. 5 years (10 releases) is probably to much to even pick a couple items that are improved. In general it should just be better, ymmv. As a Simulink user, the interface is significantly improved regardless of your feelings about the toolstrip. Apps have also been added to help discover and install GUI's you may not know about.
I don't know anything about the problem your having, but I believe you can use the rref() function to compute the reduced row echelon form of a matrix. It might be easier.
\&gt;&gt; a = [1 2 3; 9 8 7; 4 5 6] a = 1 2 3 9 8 7 4 5 6 \&gt;&gt; rref(a) ans = 1 0 -1 0 1 2 0 0 0
Also, for really big vectors/matrices, it really speeds up the calculations if you allocate the memory for the large variable (the "zeros()" function works pretty well). If MATLAB has to figure out that it needs to increase the size of a variable and then do that, then assign the value, for every single new element, it will begin to slow down. You could also do: dy_1 = y(2) * y(3); dy_2 = -y(1) * y(3); dy_3 = -0.51 * y(1) * y(2); dy = [dy_1;dy_2;dy_3]; It's just good practice to initiallize variables, especially before loops.
you're probably going to have to use an approximation like euler's or RK4 IIRC. 
Try having your coworker come up to you and telling you that a peice of code (you/someone else?) wrote 3 months ago "isn't working", with no further explanation. "What specifically is not working?!!?!?!!!!" Then she sends me the script, without the associated data I need to run it, because she expects that I can just magically look at a couple 100 lines of code and just "fix" it. I've explained to her so many times that I can't magically fix things..... argh..
I feel your pain. I'm currently dealing with a project that has passed through six developers. The only semblance of source control has been randomly copying the entire source tree and a handful of data sets into cryptically named folders on an external USB drive. Bonus: at some point it was moved to a NAS (and I use that term very reluctantly) so all of the file creation and modification dates got nuked. Untangling that has been soul crushing. 
Hey man. Just want you to know I used this method and it worked great. Thanks a lot for writing this out. Even tho I've used a method like this to do something else, for some reason I didn't think to do it here so it was super helpful.
I am sorry. you're right, I rounded. its actually 1492 positives and 7402-1492 negatives. But at any rate, **thanks** a ton for this answer. I studied the syntax for future reference.
There's no mathematical way to subtract different size matrices. You will need to figure out how you you will make them the same size, or which values you want to work with. 
That is my problem, I don't know how to resize them.
newMartrix = bigMatrix(1:21) will result in a 1 x 21 matrix from your 1x41 matrix. But you're now ignoring the last 20 values.
I assume the assignment is to find the area of the lake (based on total area) or maybe a ratio of land to lake? If you already have a binary array with ones indicating water: binaryMap = [array of 1s and 0s] for i = 1:numIterations randSubsetOfPoints = randperm(size(binaryMap,1)*size(binaryMap,2),... [size(binaryMap,1)*size(binaryMap,2)/4]);%Use a quarter of the total points each time numLake = length(find(binaryMap(randSubsetOfPoints)==1)); percentWater(i) = 100*numLake/length(randSubsetOfPoints); end percentWaterEstimate = mean(percentWater); 
That is a much more difficult way of solving equation. Look up how to put a system of equations into matrix form. Then you can use a left divide ( \ ) the left and right side matrices to solve the system. ... unless you actually need to solve the equations as symbolic.
I read somewhere that the creator of monte carlo was trying to figure out a way to calculate the odds that you'd win a game of solitaire assuming you did everything right each time. The only solution he came up with was to play lots of perfect games and use the outcomes to estimate the odds. Whether that's true or not its, definitely an easy way to remember the methodology.
Holy shit on a shingle... Another one?! Why are they different sizes? Why are you subtracting them? How would you like them reduced? Truncation? Interpolation of the 21 elements up to 41 elements? Downsampling the 41 down to 21? Picking some at random? 
You have a fundamental misunderstanding of what you should be doing. You are not supposed to generate another full mXn matrix of points and compare it against the true mXn matrix representing your lake. Instead you are supposed to pick a single point at random and check if it is in the lake or not. Count the number of points that land in the lake and those that land outside of the lake. The ratio of these represents the ratio of land to water. Given you know the full area represented by your image, you can then determine the area that is water. The more samples you take, the better this approximation (well sort of...) [This gives a nice visualization of what should happen.](http://polymer.bu.edu/java/java/montepi/) Replace a unit circle in a unit square with some arbitrary rectangle and a blob and you're set.
They are the same function taken in defferent increments of time. I need to subtract them to find the answer. I need to use the 21 time intervals from the first function and compare them to the same intervals in the second.
Sure, you're 90% there... you just need to know how to generate a random position on the grid. You may do so by calling randperm arguments are randperm(maxInteger,numberOfIntegersGenerated). You can do this in x &amp; y before calling your function, in this case units are pixels. So for i = 1:numIterations xrand = randperm(size(image_pixel,1),1); yrand = randperm(size(image_pixel,1),2); Yes(i) = Pixel_In_Lake(xrand,yrand,pixel_image); end PercentLake = length(find(Yes==1))/length(Yes); What I was doing in my code before was calling randperm using indices instead of subscripts... hence calling randperm with a range of x*y, I also was calling multiple points at once... This is something you would want to do in reality, although I'm not sure how your teacher wants it.
Thanks basisvector I really appreciate the help! Iv'e been trying to figure that out for some time.
Could you post your code?
Your first error is because your function is not in your current working directory or added to MATLAB's path (or it's saved as something that isn't minf.m, or not saved at all). To MATLAB this means that it doesn't exist. As for your second error, it's exactly what the error statement is telling you. You can't use -1 as an index. Adjust your code to use a different variable to increment your y matrix. As a side note, please put four spaces before each line of code so reddit displays it correctly. Or use something like [hastebin](http://hastebin.com/). As a second side note, it's not good practice to use i as an index because it increases the MATLAB will mistake it for the imaginary number. Use something like ii instead. Edit: As a third side note, is there a particular reason you're doing it this way? x = a:h:b; y = (x-1).^2; Will give you the same results.
Just out of interest, is there any reason that you're using brute force as opposed to one of many optimisation algorithms?
Oh, ok. I just assumed I had to use a for loop and didn't consider doing it another way. Your way is much simpler. Is your method possible with 2 variables given constraints like x &gt;= sin(y) and x+y&lt;=10, etc.? Also, did I do something wrong? I noticed that I have 2 downvotes and I'm curious if I didn't follow a rule of some sort. Apologies if that is the case.
I assumed it would be easier as I'm just a beginner.
Yes the image is an example. What kind of detail would you need about the data? Thanks.
I don't really see any stem plots in the example image. They seem like normal plots with dashed line and square markers.
Thank you for the detailed response! Much appreciated.
Also, as an added and perhaps obvious mathematical note, this code does not necessarily find the global min of the function (x-1)^2, unless you're lucky picking your a, b, and h. 
Thanks for all the help guys, I ended up figuring it out. Sorry I wasn't more detailed, I was kind of in a rush and didn't know how to explain it correctly.
&gt; Oh, ok. I just assumed I had to use a for loop and didn't consider doing it another way. Your way is much simpler. MATLAB's main strength is performing matrix operations (hence the name 'matrix laboratory'), so chances are it's got something pretty well optimized for most matrix manipulation. Not always the case, but it's a good first guess. &gt;Is your method possible with 2 variables given constraints like x &gt;= sin(y) and x+y&lt;=10, etc.? I'm not sure I understand the question in relation to the given equation. But in general, yes, you can define your inputs however you'd like. &gt; Also, did I do something wrong? I noticed that I have 2 downvotes and I'm curious if I didn't follow a rule of some sort. Apologies if that is the case. I wouldn't get too broken up about it. Given the barrage of questions with completely absent code, incorrectly formatted code, obvious error codes, HELP ME WITH MY HOMEWORK MY PROFESSOR TAUGHT US NOTHING, etc. it's easy to get frustrated and just be generally grumpy with anyone who ventures near that territory regardless of their experience level.
I don't think there is a way to do this. The human eye just isn't able. Think about it for a minute. Transparency only works when there is one dark shape covered with a translucent sheet. There is no way to see multiple layers of colors at once. Your best bet is to show some cross sections.
As I understand it, Newton's Method find the zeros of a function. It is not an optimization algorithm.
You could also try using plot3, and use different markers to depict the three unique entries: Lets say your 256x256x256 matrix is in variable A, then you could try: [x,y,z] = meshgrid(1:256); color = 'brg'; for a = 0:2 idx = find(A==a); plot3(x(idx), y(idx), z(idx), [color(a+1), 'o']); end
The "simplify" command is peculiar about square roots. One would think that specifying the time variable as "real" would permit full simplification, but it doesn't work in this instance due to the square root. With that said, the following code will simplify to 1, even without making an assumption about the nature of t: syms t sqrt(simplify(norm([sin(t),cos(t)])^2)) Hope that helps. edit: typo
A couple of things: First, you can designate a symbolic variable as both symbolic and real in a single line like so: syms t real Second, the simplify command is struggling to address the square root, not the absolute values, so your solution doesn't actually reduce to 1. Finally, let's not complain about how questions are worded. If the user knew precisely how to phrase his question to focus in on the root of the problem, then he'd likely already know how to solve it and wouldn't need to ask the question. It's a catch-22.
I was trying to think of a good way to explain the problem and this is it. You should only really use norm in matlab if you're absolutely certain it works with your problem. The function in no way assumes you're working in 3D space, which can throw off a lot of problems. And you should be more careful using symbolic variables. Matlab may be useful for symbolic operations, but has nothing approaching the intuition of Mathematica or mathCADâboth of which would do a better job at interpreting your input. 
It's perhaps not an optimisation algorithm per se, but it can be used for optimisation and is quite efficient. You're quite right when you say that it's used to find the zeros of a function. If you find the zeros of the derivative of the function that you wish to minimise, these will be points when the gradient of the actual function is zero. Assuming that the function has a local minima, Newton's method will find it, as well as any maxima and points of inflection. [This Wikipedia page explains a bit more.] (http://en.wikipedia.org/wiki/Newton's_method_in_optimization)
http://www.mathworks.com/matlabcentral/answers/6369-bvp4c
Write a [function](http://www.mathworks.com/help/matlab/ref/function.html) that takes in the parameters that differ and then call that function many times from a script, changing the inputs accordingly. Example: **File: AwesomePlot.m** function AwesomePlot(x, a, b) y = a*x.^2 + b; figure plot(x,y,'r-o') end **File: CallAwesomePlot.m** x = 0:100; AwesomePlot(x, 1, 1); AwesomePlot(x, 2, 5); AwesomePlot(x, 3, 1); AwesomePlot(x, 1, 4); 
What was your solution?
Or if you're feeling especially badass, make a second function to dynamically edit your first function!
As far as I know, to get built in functionality you need the curve fitting toolbox. Otherwise you have to get creative.
Optimizing for a least square fit of basic parametric functions is usually rather simple, using some mathematical magic and Moore Penrose pseudo inverse. What analytical function forms are you using? 
There is **nlinfit()** in the Stats Toolbox as well.
Yes, there is a way to increase it past 12 workers. Pay those thousands of dollars. 
You import your matlab function as a string and use something like regexp or strfind to find and adjust the variables, then save &amp; run it. Don't actually do this, it would be horrendously inefficient.
That is a different concept entirely. You can throw tons of MATLAB jobs on to a cluster manually. Your only limit there is the number of individual instance licenses you have at your disposal. Doing the same with multiple workers (say to handle a parfor) automatically you are stuck with 12 workers under a normal license, more if you pay for MDCS (and the required licenses to support your new desired worker count).
Python
Which IDE do you suggest? there are several free ones and I don't know any of the differences.
I only have experience with ~~Spyder~~ [Python XY](https://code.google.com/p/pythonxy/) (Python XY utilizes Spyder) because my primary knowledge base is in MATLAB and I wanted something similar. Edit: Referenced the wrong package
Python XY https://code.google.com/p/pythonxy/
do you have the image processing toolbox? if so, there are prebuilt functions for this ('help imfilter'). if not, i bet you can find premade functions for it online. but if you want to roll your own for fun, here are a couple tips: first, you are reassigning blurred each loop. what you want is something like this: for i =2:length(p) for j = 2:width(p) blurred(i,j) = your averaging function end end second, you have to figure out how to deal with edge cases. one way is just to not change the edges. then, i'd do this first: blurred = p; finally, i don't understand what the point of the base=ones(276,376) is. Are all your images in those dimensions? if not, I'd do something more similar to my length() width() shown above. Note: you can get array dimension using size() also.
http://www.reddit.com/r/mathematica
The problem you initially described can be taken care of with a simple 1-liner A(:,(sum(A,2)==0),:)=NaN
Python is great and very similar to MATLAB. If you wanted to challenge yourself and learn some great things I'd recommend c or c++. Then you can actually link your c/c++ and MATLAB code together using the MATLAB engine. Process data in C and visualize it in MATLAB.
There is probably a better way, but I think this should work (I'm away from work so we'll see) B = A dimensions_A = size(A) for i = 1:dimensions_A(1) for j = 1:dimensions_A(3) this_sum = sum(A(i,:,j)) if this_sum == 0 B(i,:,j) = nan end end end The part I'm confused about is: &gt;I want to sum all A along dimension 2, in other words columns, If you mean you want to sum "downwards" then you'll need to rearrange the loop to sum over the first dimension. This is because to sum a column of numbers, you need to add up one number from each row. If you want to sum across columns, in a row, then leave it as is. 
This doesn't make sense ... (sum(A,2)==0) creates an 100x1x500 array, which doesn't conform to the dimension you've assigned it to. Any solution that is non-empty will throw an index exceeds matrix dimension error. 
While python is a great language, it's similar to Matlab in many ways. If you're looking for a *complement* to Matlab I would recommend C# as an excellent strongly typed, object oriented framework. Alternatively you should consider c. Matlab is very high level and c is quite low level. Learning c will teach you a lot about the guts of computers and how they work. It's kind of like Latin for programmers. Not many people use it anymore, but it forms the basis of what all true scholars are expected to know.
If you have the image processing toolbox, [conv2](http://www.mathworks.com/help/matlab/ref/conv2.html) is your friend.
After farting around with textread etc. for awhile, I decided I liked fopen and fgetl for reading in text files such as these. fid=fopen('fgetl.m'); while 1 tline = fgetl(fid); if ~ischar(tline), break, end disp(tline) end fclose(fid); tline is just a string, then you can look at 'help strfun' for a list of functions that can help you further parse / analyze the strings. Specifically these may come in handy: strcmp - Compare strings. strncmp - Compare first N characters of strings. strcmpi - Compare strings ignoring case. strncmpi - Compare first N characters of strings ignoring case. strfind - Find one string within another. strjust - Justify character array. strrep - Replace string with another. strtok - Find token in string. strtrim - Remove insignificant whitespace. 
Not exactly pretty or traditional, but here's your one liner: A(A == bsxfun(@minus,A,sum(A,2)))=NaN 
Mathworks sells a compiler to generate executables from Matlab functions. Not quite what you are looking for but it could work in pinch. 
Sure does. At least in 2013b. 
thanks again
I am not 100% positive I understand this badass line of code, but i think this might work. ill check it out tomorrow AM. so what I think this line would do is my data have the form 1 0 0 0 -1 -1 so not equal, therefore not NaN 0 0 0 0 0 0 so equal to A, therefore NaN 0 0 1 -&gt; 0 1 0 etc.. 0 0 0 Eager to try this one out. I still really want to find a way to do this using standard indexing, but I think this will do the trick. I'll try this tomorrow on a practice matrix. thanks a lot. At the very least you taught me bsxfun :-) 
sorry, my phrasing is bad but what i mean is add up each row in the sense of sum(A,2)
specifically: avgimg = conv2(img,[0 1 0; 1 1 1; 0 1 0],'same')/5;
Compiler works great. In one project I successfully called a MATLAB compiled exe from a LabVIEW compiled exe. Essentially, by entering commands into the windows command prompt. Any and all functions that are available in MATLAB work in an executable as well. Starting up a function with any inputs is a real pain, I'd recommend saving any data you wish to pass to file and then read that file from the MATLAB executable. Especially if you want to pass an array.
Yep that's the logic, just be careful because it, like any method using sum to determine all zeros, can fail if you have negatives: 1 0 -1 -&gt; 1 0 -1 therefore NaN
so here's the beauty of it: There are only 2 possibilites: either its 1 or there is no data, in which case its 0. there is no chance whatsoever that could happen for that reason. Out of curiousity, do you know a way to do this using "standard indexing" again - thanks! :-)
Well you have to deal with the problem that as soon as you collapse across a dimension using sum, the indices you get back from it are not valid in your original space. So you have to convert to subscripts, which makes a loop necessary. [x,z] = ind2sub([size(A,1),size(A,3)],find(sum(A,2)==0)) for ii = 1:length(x) A(x(ii),:,z(ii))=NaN; end you could also do some fancy things by adding y artificially: say x = [1 2], and z = [3 4], you'd have to add y in the middle and duplicate x and z: 1 1 3 1 2 3 1 3 3 2 1 4 2 2 4 2 3 4 then use sub2ind 
I think conv2 is part of the basic Matlab installation, no toolboxes needed. 
Doh, this is what I meant
Just what I always wanted
"An error" is probably the least helpful way to explain your problem. What is the error? Also, please post your equation on its own line and format it as code so we can actually read it and make sure your syntax is correct.
I actually ran across this problem too and just got frustrated. Anyone know of a good link/tutorial that explains how to use this function?
'doc solve' does a pretty good job.
You could try using a cell array to store your data since you mentioned needing a matrix with different numbers of rows. Data{1}=zeros(100,10); Data{2}=zeros(100,15); Or wrap these in a structure: Data.Subject{1}='Bob'; Data.Age{1}=30; Data.Results{1}=[10 20 30]; Data.Subject{2}='John'; Data.Age{2}=45; Data.Results{2}=[40 50 60]; Then you could do something like this to get a list of your good data: for i=1:length(Data.Results) Data.goodsubject(i)=sum(Data.Results{i})&gt;60; if Data.goodsubject(i) display(Data.Subject{i}) end end Using cells gives you a lot more flexibility, but also introduces a new learning curve to your data manipulation.
Hey man, i just want you to know this worked, and its blazingly fast.. you are incredible.
How do I use doc solve? I looked it up online and couldn't find anything
You just type "doc solve" (without the quotes) into the Matlab command window.
Just from my experience, sub2ind and ind2sub uses a conversion method that is very time consuming. I had a simulation that ran sub2ind about 10^7 times, and like 60% of my computation time was spent converting indices. I ended up writing my own custom conversion method and saved hours of computation time.
'doc doc' explains that one.
Hit control+shift+d to dock the editor.
A+. Solved all my problems and more
Which part?
You're going to need MATLAB Compiler to do this. You can't have any sort of MATLAB functionality on a computer that doesn't have MATLAB installed unless you have the [MATLAB Compiler Runtime](http://www.mathworks.com/products/compiler/mcr/), which can be packaged up in an executable from MATLAB Compiler. The MCR is freely available, but I don't think the API for loading/using it is, so you'd have to start from scratch with Compiler.
&gt; c is quite low level C is most definitely not a low level language. &gt; It's kind of like Latin for programmers. This implies it is the basis from which numerous other languages grew and evolved from. While true to an extent, C was not the base here. C was itself heavily influence by the syntax and structure of ALGOL and B. In fact it's name is an homage to B because of how heavily it borrowed from and extended the language. C only gets so much recognition due to the fact it was one of the first widely accepted and used high level languages (in small part due to it's use in the early development of Unix) and as such is more widely known. &gt; Not many people use it anymore Look at any survey of language popularity. C will be at or very near the top. This is irrespective of the methodology and biases of the particular survey. It still sees very widespread use in a broad range of fields. &gt; it forms the basis of what all true scholars are expected to know I don't even know what this means... The seminal tome of CompSci knowledge, The Art of Computer Programming, uses assembly for its examples. There is a stronger case for that being the 'Latin' of CS than anything else (unless you go really old school and expect people to mash out byte code, but that is just bordering on the absurd). By that token a true scholar should do everything in assembler and optimize it by hand. C is for patsies...
I think everything you said is correct. What I meant was: "low level" is relative, lots of languages derive from it (and Latin was derived from Proto-Indo-European), and learning c will force you to learn a lot about how computers work inside. Learning an assembly language is a useful exercise, too, although you probably can't optimize by hand better than a good compiler.
gotcha. or i could do all the file processing parts as an array, and then convert just before analysis then do all of the analysis as a matrix. thanks for the tip.
Yeah, svd is a really good operator. I think that Matlab is great, because it is very compact. My favorite code reads like this: A = 1/R*(diag(-2*ones(10,1),0) + diag(ones(9,1),1) + diag(ones(9,1),-1)); which creates a matrix corresponding to a line of 10 resistors with ends connected to the ground.
if [this](http://www.wolframalpha.com/input/?i=%28%28z%2B1%29%2F2%29%5E%28%28-z%2B1%29%2F%282*%28z-1%29%29%29*%281%2B%28x%5E2%29*%28%28z%2B1%29%2F2%29%29%5E%28%28z%2B1%29%2F%282*%28z-1%29%29%29*%281%2Fz%29) is what your equation is supposed to look like just solve it by hand, it's not that hard to rearrange it by hand. The WARNING I get when I copy paste your equation is this: [this](http://i.imgur.com/UUNsAqq.png) 
holy crap. why is it resistors? ** edit ah i think i see it, except for the grounding part.
I've told you this before! You know better...
i do know it, check previous posts. i just hastily changed the words to star rather than bothering to space it over.
PSS i have a 400 line function that separates a 7400 x 1M dataset into any arrangement of component arrays based on user input then does stats on them. boom. **edit that i couldnt have done without you i mean. now show me a cool line
 A = 1/R*(diag(-2*ones(10,1),0) + diag(ones(9,1),1) + diag(ones(9,1),-1)); Put four spaces in front of the line and it will be treated as code.
 min_and_max = @(x) cellfun(@(f) f(x), {@min, @max}); From *Loren and the art of Matlab*. This simple piece of code creates an anonymous function that you can call as [extrema,indices] = min_and_max(X); and returns all the outputs of your list of functions.
dude bsxfun is the one guy i would let disrespect me, if i were a girl. well, that comment went poorly. but no, in seriousness, i use that thing extensively. my most recent use is today. i used it to help me index a 3D matrix.
wtf is the ones hack
Yeah for what I need to do I mostly use *bsxfun* actually.
It's mainly to do with *cellfun* actually. Have a look at its help page: it runs a function several times on different sets of parameters, enumerated in a cell array. Here, your function is anonymous and take as input a function. And its parameters are a list of functions. Not sure if I'm making much sense, I'm typing one-handed... **Edit** Lol the @f part.
Nice! Just a couple of days ago I was looking for something like this!
What, if any, feature and performance difference is there between GPUMat and Mathwork's own GPU support via PCT? I know Jacket supposedly makes the PCT look like a set of tinker toys, but I'm not going to pay their licensing and rejig all my code just to find out :|
NO SOUP FOR YOU
what IDE would be good for this? And is it possible to create a GUI using c/c++? And umm, what's the difference between C and c++ And just for the future, is it possible to create a mobile app for my program using c/c++? iphone or andriod
Mother of God, that is a lot of MATLAB :x I don't have any cool one liners to share off the top of my head. I prefer writing readable code ;)
HOLY SHIT. I did almost exactly what the author describes as the dumb way the other day. this is actually like critical for me. not to mention its a great time for me to start learning to express myself better in this language, now that the basics start to make sense. thanks a lot for this link
Very cool. Didn't know about Jacket/Accelereyes being absorbed. I read about them about two years ago, but licensing kept me from really caring. 
[subaxis](http://www.mathworks.com/matlabcentral/fileexchange/3696-subaxis-subplot) way better than subplot
instead of just printing the triples you find, try saving them in an array so you can then check for multiples: n=100; count=1; for a=1:n for b=1:n c=sqrt(a^2+b^2); if floor(c)==c &amp;&amp; a&lt;b triples(count,:)=[a b c]; count=count+1; end end end display(triples) Determining which are primitive triples is going to be non-trivial. I can't think of a good way to do it without making a for loop test every pair. This finds all the ones that are multiples of the first triple: for i =1:size(triples,1) d(i)=sum(mod(triples(i,:),triples(1,:))); end display(triples(d==0,:)) 
I literally just found this six hours ago and I just saw this thread. Weird. 
thank you, I had a feeling that I needed to do something with arrays but we didn't learn them yet. 
[simlog](http://www.mathworks.com/matlabcentral/fileexchange/30019-simlog)--if you are working with simulink this is a must have
I'll try those out on monday...especially the differential evolution package sounds really useful! I'll see how it performs on my optimization tasks. Thanks! 
Completely offtopic, but this is known as the Baader-Meinhof phenomenon. http://www.damninteresting.com/the-baader-meinhof-phenomenon/
set(gca,'ydir','reverse');
I recently discovered that website and I found it very useful too. I can recommend to check the Mathworks blogs, some are really interesting...
This site is great, thanks!
Are you sure you selected a fixed-step solver? Double check that. If it still doesn't work, can you run your model with solver "Discrete (no continuous states)"?
what about i = low + (high - low) /2 
I'm not sure what you are talking about re: covariates, but if you want help importing data into matlab you are going to have to be more specfic about what the data you want to import looks like. Data files being "huge" doesn't mean you can't load them. 
a=4:6; x=[a;a;a];
The issue with your code snippets is that you are trying to subscript with multiple numbers. you can do x(:,1)=[4 5 6], but you can't do x(:,[4 5 6])=[4 5 6]; x(:,[4 5 6]) is 3x3, and [4 5 6] is 1x3 so the dimensions just don't match. Use repmat, do a loop or type it manually. I don't think there is another way.
You can do this compactly with the concept of the [outer product](http://en.wikipedia.org/wiki/Outer_product) (also known as a tensor product): [1 1 1].'*[4 5 6] kron() is the heavy duty tensor product function, but for this it's much more transparent to use the matrix outer product version above. 
You might want to post you code so it's easier to help you. I think you can fix your problem by manually setting the XTickLabel. [http://www.mathworks.de/support/solutions/en/data/1-15HXQ/](http://www.mathworks.de/support/solutions/en/data/1-15HXQ/)
I have no idea if this will be useful but here's how I important data from Excel into Matlab: %Make sure excel file is open when you run this program clc clear all %This calls on the excel file and the location. Will need to be set to the %excel file location: SouthernStorm=ddeinit('excel','G:\Wirebonder Project\New folder\Final Submission\Final Submission.xls:sheet1'); %This calls columns 2 through 11 Wirebonder=ddereq(SouthernStorm, 'c2:c14'); %This assigns variable names to each column Time=Wirebonder(:,1); Targetpath=Wirebonder(:,2); FFacc=Wirebonder(:,3); FFaccsettle=Wirebonder(:,4); FFpath=Wirebonder(:,5); FFerror=Wirebonder(:,6); NoFFacc=Wirebonder(:,7); NoFFaccsettle=Wirebonder(:,8); etc
You are awesome! Thank you so much.
I don't know how big the videos are or how much ram you have, but I would just read the whole thing into memory initially, and then do my analysis. 
This sounds like a question for someone who understands whatever wizardry you are trying to utilize. Once you have some algorithm/formula we can help with the implementation details.
&gt;points*x &lt;=10000 Shouldn't the inequality on this be reversed? Worth double checking.
The sort command returns an optional second argument that is the indices of the elements in increasing order. Make sure you get that second argument. Then you can apply it on the 250x7 dataset. 
saveppt, arrow
Try using imshow() instead of image() You can specify the dynamic range used to display your data by using... imshow(data, [min max]) or more specific for you imshow(E, [0 10])
It occured to me that a possible solution was 0. So I also made a constraint in my edited code that A*x = b, rather than A*x &lt;= b. And yeah, you're pretty much right.
Can I (politely and with genuine curiousity) ask how you got the idea to use roots in this manner? Roots accepts the polynomial coefficients. You supplied the equation itself, so it took the 31 points as 31 coefficients for a 30th order polynomial with 30 (apparently imaginary) roots. help roots roots([-0.5*g v0 -h]) 
^ What themanbobmarley said. You could also use roots(polyfit(t, [-.5 * g .* t.^2 + v0 * t - h], 2)) 
ohhhhh I thought it would read it as the one polynomial... I got the idea from my scumbag brain not paying attention. I'll see if I can fix that.
But it's fixed already &gt; roots([-0.5*g v0 -h]) 
...but only if OP has the Image Processing Toolbox.
Using opencv, you want to set the relevant VideoCapture property, cv::VideoCapture::set(cv::CAP_PROP_POS_FRAMES, frameNumber); I wrote a mex file a while back to handle this, it's not clean code, but should be adaptable: [http://pastebin.com/ab632F2s](http://pastebin.com/ab632F2s). It takes in string corresponding to video file as first arg, and second arg is an array of frames to read. Example usage: imshow(read_video_mexfunction('myvideo.mp4', 1234))
How would you do it without using reshape?
I can't get to pastebin at the moment, but how many elements does your signal have?
signal comes from this command: [sinal, fs, nrBitsQuant] = wavread ('saxriff.wav') In this case it becomes a matrix with 2 columns and lots of lines
Are you on Ubuntu? I actually have a problem with my default 'painters' renderer so just before I run the plot command I run figure('renderer','zbuffer') and then plot...
 I have not tested the code, but at first glance, you seem to be using *subplot* wrong. From *help subplot*: H = subplot(m,n,p), or subplot(mnp), breaks the Figure window into an m-by-n matrix of small axes[...] So, when you call subplot(t, sinalE, 'b') That may cause Matlab to crash. An example of subplot usage: subplot(2,1,1) plot(t, x1) subplot(2,1,2) plot(t, x2) Edit: Though, it seems strange that Matlab would crash because of this. It should just return some 'Invalid parameter'-message...
the opengl renderer on win7 has a bug in it too. I've had it cause plotting issues but never crash matlab (that I know of). The `set (gcf, 'Renderer', 'zbuffer');` solution fixes it. Also...how are you on memory? Matlab is good about limiting the size of large contiguous arrays, but I have had crashes due to the system running out of memory from very large cell arrays.
I have 16 Gb RAM so it shouldn't be a problem. I'll try the solution you sugested, thanks!
Thanks, I will fix it now!
Yes, I would be worried if a sound signal didn't have a lot of lines. Please answer the question.
how large is the file? I would still watch process monitor....matlab isn't know to be memory friendly. I've had plenty things that 'aren't that big' hog way more memory than I thought they should
Are you sure there is only one intersection? Because both fzero and fsolve are designed for a problem with one solution.
According to [this page](http://www.mathworks.com/help/matlab/import_export/mat-file-versions.html), it looks like there haven't been any changes since R2006b. 
What syntax is used for the save and load commands?
The 2D image processing function bwlabel does something very similar, although you might have to handle the separation threshold manually. I imagine the function works fine on a 1D array, but not sure offhand. Once you have the label array, the accumarray function can sum the data within a particular storm, and other things.
What size are the variables you're saving and loading? It could be an issue with the variable size. Are some of them very large? Try saving with the -v7.3 switch. 
Exactly this. The -v7.3 switch will take care of it. Maybe the -v7.3 save format was enabled as the default in the 2010a installation but not in your 2013 install. You can change that in the preferences.
it could possibly be in a function manipulating the data prior to saving that's returning an empty matrix.
Story: I'm working on a colour sensor with an Arduino and using matlab to make things easier to graph. The problem is every time I get a series of data and tell it to plot(x,RGBval(:,1)) I get the mess in the link.
came here to delete this post because I discovered exactly this :)
One of my favorites that I've seen, based purely on ingenuity, is Checkers = ~(invhilb(N) &gt; 0) which creates an N-by-N checkered matrix of 1's and 0's. Genius. 
bwlabel has limited connectivity options. You can do what you want with a morphological close. It dilates and erodes the set, filling holes. example: x = [0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 0]; hole_size = 5; imclose(x, strel('square',hole_size)) that will fill that middle set of four zeros with ones. If you drop hole_size to 4, the array is untouched. That will get it into a state bwlabel can handle.
that's awesome. i was just about to post similar solution, but your code is more neat.
*sigh*
My understanding of Matlab Mobile is that it runs its own desktop for a remote Matlab instance. You can view figures but not gui instances. I don't see any reason `-nodesktop` shouldn't work. The app is free. Why don't you just try it?
So I see I'm late to the party, but figured I'd answer anyway. First off, I'm not entirely sure MATLAB is the best language for making a game in, but if that is what you want to do, then I'm not going to stop you. In my opinion, the biggest detriment to game programming (or even gaming tools) in m-code is that MATLAB is an engineering tool first (and an expensive one at that), so you'll find it installed a lot more in work environments than in home environments. That said, I'm surprised I haven't seen any recommendation for Java. The reason I would recommend this with MATLAB is because behind the scenes, much of what you'll find in MATLAB is Java-based. In particular, to do nearly anything interesting on the GUI side of MATLAB, you'll probably find yourself delving into Java components (seriously, MATLAB doesn't even have good support for tab panels). Also, you can actually utilize Java code directly in MATLAB (using MATLAB syntax), though I wouldn't recommend coding too much like this. For good detailed articles on the Java/MATLAB connection, I highly recommend checking out [Undocumented MATLAB](http://undocumentedmatlab.com/). A bonus is that for all its flaws, Java is a good language to really get into Object-oriented programming. While I love Python (it is by far my favorite language), it doesn't really work *with* MATLAB, and more importantly, it's syntax is perhaps too similar to MATLAB's. For a first-time programmer, that may be confusing (Ruby would be arguably more confusing for that same reason). As a seasoned programmer, I still occasionally use colons, semicolons, and 'end' statements where I should not when I have to flip between MATLAB and Python for different projects. If you want similar, Python and Ruby fit the bill, but if you want a complement, then I would go with Java.
It doesn't work. It says it must be running in the desktop
That sucks. You might be able to talk to a desktop instance that in turn talks to the cluster, but I'm not sure if it would be worth it.
Eval does work. But it increases the run time to the point the code becomes unusable. 
NICE. I drove my self nuts a few weeks ago trying to do this. Surprising that it's not built in. 
I used to keep up on this and no longer do -- last I thought I heard was that Jacket was bought out (or something) and was being incorporated into PCT. So, did this not happen? or did I make this up? 
You got a solid chuckle for this one. 
You can use arrayfun for that; and then calculate the mean via cellfun, since arrayfun will return cell arrays. % actual calculation existingLabels = 1:numOfLabelsTotal; [r, c] = arrayfun(@(x) find(labels==x),existingLabels,'UniformOutput',false); xMean = round(cellfun(@mean,c)); yMean = round(cellfun(@mean,c)); % put results into binary array outputSize = [max(yMean) max(xMean)]; outputBinary = false(outputSize); trueIndices = sub2ind([max(yMean) max(xMean)],yMean,xMean); outputBinary(trueIndices) = true; However, in my benchmark using Matlab 2013a, this performs only about 10% faster. If you have the parallel computing toolbox, you could use a parfor loop, which will speed up your calculation roughly by a factor of the number of available CPU cores. % parfor solution existingLabels = 1:numOfLabelsTotal; xMean = zeros(length(existingLabels),1); yMean = zeros(length(existingLabels),1); parfor i = existingLabels [r1,c1] = find(labels == i); xMean(i) = round(mean(c1)); yMean(i) = round(mean(c1)); end % assign output data outputSize = [max(yMean) max(xMean)]; outputBinary = false(outputSize); trueIndices = sub2ind([max(yMean) max(xMean)],yMean,xMean); outputBinary(trueIndices) = true; It is not possible to put the data into the outputBinary during execution of the parfor loop, since the indices get calculated during the loop execution. The parfor solution performed about 4x faster on my quad core CPU. Also, xMean and ymean are the same - you don't have to calculate them twice. Hope that helped!
Thanks this helped so much! Parfor is something I never considered - its a pity the vectorised solution isn't faster. Thanks a ton and have a great day! :)
Are you trying to create a continuous or discrete time filter? A notation note: you typically use 's' in continuous time and 'z' in discrete time. If it is in fact discrete time you can implement this simply as: y[n+2]=u[n+2]-5y[n+1]-6.5y[n] &lt;=&gt; y[n]=u[n]-5y[n-1]-6.5y[n-2] where y[n-k] are previous outs and u[n] is the input. 
You're welcome! :) The Matlab JIT has become increasingly better in the last years, so (non-nested) loops don't suck as badly as they did. If you're running an older version however, chances are the arrayfun construct will outperform the loop even more.
Perfect, thank you!
You can set sublime to save when it loses focus. Would allow you to just switch windows to run :-)
Besides the for loop, the repeated use of find() is making your code slow. Try using accumarray() to calculate the mean coordinates. I've attached the code below. On my machine, it takes ~45s to run your loop, and only 1.5s to run the accumarray method. %%Generate Large Random Array of ~5000 Labels num_rows = 1000; num_cols = 2500; A = round(5000*rand(num_rows,num_cols)); %Ensure that labels go from 1 to the maximum number (for accumarray) [~,~,labels] = unique(A); labels = reshape(labels,num_rows,num_cols); %Get Number of Labels numOfLabelsTotal = max(labels(:)); %% Old Method tic for i = 1:numOfLabelsTotal [r,c] = find(labels == i); xMean = round(mean(c)); yMean = round(mean(r)); outputBinary(yMean, xMean) = true; end toc %% New Method tic %Get the row and column coordinates for the labels array [row,col] = ind2sub([num_rows num_cols],1:numel(labels)); %Compute Row Mean rowMean = accumarray(labels(:),row,[],@(x)round(mean(x))); %Compute Columns Mean colMean = accumarray(labels(:),col,[],@(x)round(mean(x))); %Pre-Allocate Logical Array of zeros outputBinary_new = false(max(rowMean),max(colMean)); %Get Linear Indices for rowMean and colMean in outputBinary ind = sub2ind(size(outputBinary_new),rowMean,colMean); %Replace Indices with ones outputBinary_new(ind) = true; toc
Why? Save often, it's a good idea. And if you couple it with something like autogit, then you have a complete record of any change you make to your code.
I have a well trained reflex for frequent saving (a few disastrous incidents are to thank for that...) I'm so used to doing it manually it would feel foreign and unsafe to rely on some automatic saving. I would probably setup the save on focus change then still save myself before changing focus. Different strokes for different folks and all that. Not saying it is necessarily a bad practice. But I can see someone getting used to it happening with one editor and getting burned when switching to another for some reason. I'll stick with subconscious Ctrl+S spam personally!
Is that all you get? Check your directories perhaps? Where is the image you're reading with imread? 
Can't really give you much help without the rest of the error message.
Can you post the rest of the error message? It must say what the error is, not just where it is.
jlo_task is the name of a script or function that you are running. Line 171 is the part of the file where there is an error. There should be more output saying what the error is. It's difficult to jump right in if you know nothing. On the right-hand side there are a bunch of links to tutorials and the like. Start there.
This is cool and all but http://www.mathworks.co.uk/help/images/ref/checkerboard.html
&gt; Index exceeds matrix dimensions. Is the problem. How many elements does your pract_img_files structure have? You're trying to address something that doesn't exist (e.g. pract_img_files(10).name when there's only 9 files loaded). How are you iterating t? Are you using a while loop? 
Apologies for this but can you also tell us what line 171 is (or the entire loop if line 171 is a line in a loop)?
No worries, MATLAB's error format is a bit wonky. Reading from the bottom up takes some practice. The worst ones are when something is numerous function calls deep before something explodes and you get to dig through every message to find what is really broken. Looks like excaza gave you some solid advice above, so I'll stay out of this one.
How many *.bmp images are in the directory? 1? The only thing I can think of from that snippet is that you only have one image, so when your code goes back into the loop for a second time (t = 2) it crashes because there's nothing to load. edit: Or even zero *.bmp images, behavior would be the same but at t = 1.
It would really help if you could post more of the code..I do not know how you are storing the images files, is it a structure or a cell arrray? I suspect the .bmp extension is not necessary, can you read the image when you go into the directory, for example, img = imread('image_name.bmp'); You can try to change the code in line 171 to "imread(image(t).name)" 
In matlab, sin is in radians. You need sind for degrees. Also you have an extra * before the final 2.
Nice, welcome to psychtoolbox. It's a motherfucker. Anyway you're getting an index exceeds matrix dimensions error. So either numPract is too high... or more likely you haven't set up your directories correctly so your dir command (line 152) isn't actually grabbing anything (t=1 after this errors?). This would cause dir to return an empty structure(dir wont hit an error if there are no files that match your wildcard parameters). This causes pract_img_files to be empty and you get the index exceeds matrix dimensions error. You need to check either the directory(stim_dir), the wildcards 'stim1.bpm' (excuse the missing wildcard *s, reddit italicizes *s surrounding a word) or the actual image names in stim_dir - if those are all fine, you may have forgotten a '/' at the end of stim_dir. Good luck.
Yeah. That's a fair point if you are switching editors.
On Windows: Desktop-&gt;Command Window Can't help with Mac specifically, but it is probably something very similar.
Do your own homework.
Please see the sidebar. We will not do your homework for you. We will be helpful and point you in the right direction if you try and get stuck. Be sure to say what you tried and how it's failing.
Riigghtttttt.....
Use Windows.
Right. I wasn't sure what size the output binary would be, but I guess it makes sense that it would be the same. So you would just pre-allocate it as: false(num_rows,num_cols) Anyway, let me know how it goes for you.
Don't be a troll and maybe we'll trust you with some hard_work. 
[RTFM](http://www.mathworks.com/help/matlab/matrices-and-arrays.html)
Try changing 'stiml\*.bmp' in line 152 to 'nstims\*.bmp' first If you make his change to line 171 your function will still error out.
Unfortunately no. You may be able to get away with trying [Octave](http://www.gnu.org/software/octave/), but the chance of MATLAB code (depending on the complexity) working in Octave without some additional work is pretty slim.
femRecords = cellfun(@(x) x == 'F', theArray(:,4)); numFemRecords = sum(femRecords); nameTits = theArray(femRecords,1:2)'; fprintf('%s - %s\n', nameTits{:}); Last couple of lines are a bit obtuse...but it's MATLAB, we should all avoid for loops ;)
where 'a' is your cell.... strcmp(a(:,4),'F') -&gt; Returns the indices of all the females ans = 0 1 0 0 1 1 0 a(aboveIndicies, [1,2]) -&gt; will return the fields 1 and 2 (names and titles). a(strcmp(a(:,4),'F'), [1, 2]) &gt;&gt; a(strcmp(a(:,4),'F'), [1, 2]) ans = 'Wei' 'Financial Manager' 'Yang' 'Network Engineer' 'Wang' 'Software Engineer' 
Thank you so much, it works perfectly. I just searched all of my teachers lecture notes and I could not find "strcmp", I guess he wants us to figure some stuff out or something.
Hey, since your solution worked pretty well, other parts of the problem involve using the numbers for department, age over a number, and salary over a number, but the strcmp expression isn't working for these. Returns all 0's, the expression I'm trying to use is: strcmp(HRdata(:,3),2)
sure, no problem
`strcmp` is for **c**o**mp**aring **str**ings! instead do `cellfun(@(x) x==2, HRdata(:,3))`
Thank you so much again, "cellfun" worked perfectly for the rest of my problems 
No problem. In the future, you might want to store "record" data like this in a struct array.
This looks like an assignment. Did you try anything? Do you have an y specific questions?
I'm trying different else if statements and I keep getting a ton of errors. This is my first time using matlab. I have no prior experience.
Here is one part of the first one: * function amount = amount(age, weight) * if amount(age, weight) &lt;= (2, 40) * disp('0') * end And here is the second: * function shippingCharge(cdsBought, promocode) * if cdsBought &lt;= 5 * cdsBought .* 2 * else cdsBought 6:10 * cdsBought .* 1 * end Like I said, I've only been working with Matlab for a few weeks and I have no prior knowledge.
I'll definitely check that out. I'm just having one issue with the other example. I'm not getting any results when I use this code: * function shippingCharge(cdsBought, promocode) * if promocode == 107 * result = 0 * if cdsBought &lt;= 5 * result = cdsBought .* 2 * if cdsBought 6:10 * result = cdsBought .* 1 * if cdsBought &gt;= 11 * result = cdsBought * end * end * end * end I'm getting the correct result when I put in 107 but I'm getting nothing for the cdsBought.
&gt; matlab code tricks, discussion, questions; but we don't do your homework!
You mean Linux. 
As /u/infiniteprimes has stated, you can't use more than around 3.5 GB of memory within Matlab if you're only using the 32 bit version. You've also stated that you're dealing with arrays that are 10000 by 10000. These arrays themselves will take just over 750 MB in memory, meaning that you could potentially load 3 or 4 of these before you run into a memory problem. You could ensure you're keeping your workspace (and therefore memory) free by saving the matrices to disk and clearing them from the workspace. This will give you more memory to work with for calculations and the other matrices can be loaded again when needed. It's an inefficient way of working but it might be enough to help you think about ways you can address this memory problem. 
For the record, couldn't you just solve this analytically? I get c=3 by doing it by hand... That aside your best bet is probably to guess a c and increase / decrease it depending on how high or low your integral is.
so set x and c as arrays and plot your function over c, see where it intersects one.
Yes, that is correct. You can double check your answers with the following code: tn=[0 0.5 0.86 1];N=1200;n=1:(N+1);t=linspace(0,1,N+1);for a1=1:numel(tn);fprintf('t(n)=%0.2f, n=%d\n',tn(a1),n(t==tn(a1)));end
You can try using an iterative method. In other words, have a loop that calculates the integral for a given c. If it's larger than 1, iterate and choose a smaller c. If it's smaller, iterate and choose a larger c. Do that until the value is 1 (or close enough). 
Great, thanks
Using symbolic toolbox, if that's what you want to use, the following will work: syms x c assume(c,'real'); f = 4*(x^c); solve(int(f,x,0,1)-1,c) This will output the answer 3. Part of the issue is the following: the reason solve() wouldn't work straight out (without the assume() part) is because depending on what c is, and whether or not it's real, the integral actually takes very different forms. But by telling it it's real, the integral because a simple enough function for solve() to work with, and that's why you get the answer. Now, in practice, symbolic solves only get you so far: you want to know how to do this stuff numerically. To do this problem numerically, you can use the built-in fzero() function. For the code below, I am assuming that you have a sufficiently recent version of MATLAB for integral() to work; this function used to be called quad() instead. F = @(x,c) 4*x.^c; f = @(c) integral(@(x)F(x,c),0,1); g = @(c) f(c) - 1; fzero(g,5) The answer will be 3.0, but keep in mind: because this is now a numerical solution (that is, a solution obtained through the use of numerical methods), it does not *necessarily* converge, depending on the method and the initial guess you use. I used the c = 5 above as an initial guess, but you can see for yourself that if you use c = 0 instead, it will not converge.
First off, to save you some trouble, matlab's indices start at 1 not 0, which is confusing if you started programming in other languages. Regarding the question, you don't really need a loop to do this. You could just set X equal to the input call and have the user format their input like a matrix [1 2; 2 4; ...]. If you must do a loop, you need to call input before the loop to get n. Then you need to loop ii = 1:n and have x(ii) = input(...), y(ii) = input(...)
you can create a column/row vector or two (*x* and *y*) of size *n*, then have two for loops going, one going i = 1:n and then another j=1:n. inside the for loop, you could say x(i) = whatever input value and the same for y. it will keep iterating until the for loop completes. n = size(__) x = zeros(n); y = zeros(n); for i = 1:n for j = 1:n x(i) = xinput(i); y(j) = yinput(j); i = i+1; j=j+1; end end something like that. not completely accurate, but something close.
 n = 150; % Arbitrarily set by user x = zeros(n,1); y = zeros(n,1); for i = 1:n x(i) = input('X? '); y(i) = input('Y? '); end If you nest the for loops in the original way, the user has to input n*n pairs of values, which would be more appropriate for entering a grid of coordinate values indexed to val(i,j) rather than just a list of arbitrary pairs. MATLAB also increments loop variables automatically, so the i=i+1 line in the loop would just end up causing some very odd indexing.
 zeros(n) makes a n x n matrix. You want zeros(n,1) Edit: just noticed previous line. Maybe that won't be a problem if size returns X x 1. Presumably, OP will want something like n = str2num(input(...)) though where n is an integer
Actually the manual increment won't do anything. MATLAB ignores all changes to loop indices that occur within the loop. The code for i = 1:5 turns into for i = [1 2 3 4 5] at runtime. MATLAB then just steps through the values it generates for that vector. Anything you do to the index variable gets trashed when the next loop iteration starts. Your point that this is an absolutely fucking terrible idea is still valid though. People who mess with loop indices inside the loop itself need to be hit with a shovel.
I think all you need is to see the formatting. It looks to me like if you just add a second set of curly bracers it would fix the problem: xlswrite('problem_4_7.xls',{{'h (km)'}},'A1:A1') @ is an anonymous function. They're pretty handy, especially when it comes to solving ODE's with ode solver's like ode45. For now, just try the above line.
You might also try assigning the string to variable first: data = {'a string'} and then writing that variable to xlswrite: xlswrite('problem_4_7.xls',data,'A1:A1')
When I tried this it wrote "data" with each letter in one cell of excel instead of "a string" all in one cell. 
wait, is thay the origibal erro? Do you have Excel installed and path availablr?
Yes, excel is installed. I don't know what path available means.
basically, that matlab knows where to find it (which is usually the case if you followed standard/auto install methods).
did you put data in quotes? If so, don't 
I would assume so because it is writing my string it is just writing it into individual cells. Or maybe not. Now that I think about it it is making it into a csv which may be because it isn't finding matlab. Maybe csv files don't allow cells to have more than one character per cell?
I tried it again without quotes and it gave me "a string" with each letter in a separate cell.
Pay Mathworks for it? Just a thought.
yeah you don't want csv with xlswrite
We're going to need more info on the problem, what have you tried so far? In general, for loops repeat a section of code multiple times. You can change parameters on each successive loop or simply repeat the process without changing anything. if statements are going to be what handles the logic in your program. I think you might want to set this up one of two ways. for ii = 1:n if (some logical statement) do some stuff elseif(some other logical statement) do some different stuff elseif ... ... end end or... if (some logical statement) var = something; for i = 1:var do some shit end elseif (some other logical statement) var = something; for i = 1:var do some shit end end
I have to minimize "(x1-1)2+(x2-1)2" constraints: x1+x2&gt;=4 and x1-x2-2=0 here is my code to find the solutions syms x1 x2 L1 L2 A S=solve('2(x1-1)+L1+L2==0','2(x2-1)-L1+L2==0','x1-x2-2==0','x1+x2-4-A2==0','-2AL2==0') x1=S.x1 x2=S.x2 L1=S.L1 L2=S.L2 A=S.A After this I have the solutions. Here is what I tried in matlab but it didn't work (this is for the 2nd method of checking for imaginary numbers, which I would rather just learn the first method since this one is basically a shortcut), syms x1 x2 L1 L2 A S=solve('2*(x1-1)+L1+L2==0','2*(x2-1)-L1+L2==0','x1-x2-2==0','x1+x2-4-A^2==0','-2*A*L2==0') x1=S.x1 x2=S.x2 L1=S.L1 L2=S.L2 A=S.A S=zeros(3,1); for i=1:3 if imag(S.A(i))==0 S(i)=(x1-1)^2+(x2-1)^2 else S(i)=inf end end 
Thanks for the correction. I usually would run my code and make sure what I'm saying is correct, but laziness got the better of me!
I already purchased it. Trying to avoid buying it again. 
I purchased it online. Would I have gotten an email possibly with that? Sorry it has been 3 years since I downloaded it. 
Use wolfram alpha for these sorts of things. Much faster and more convenient. 
tried that, doesnt seem to like this equation very much.
Minimize abs( f1(x,y) ) + abs( f2(x,y) ) ?
The keyword you're looking for is voxel (Volume Pixel). Have a look at these from the file exchange: http://www.mathworks.com/matlabcentral/fileexchange/28497-plot-a-3d-array-using-patch http://www.mathworks.com/matlabcentral/fileexchange/22940-vol3d-v2 The second one even allows for transparency.
Ya I can see its a little confusing. It's not 2nd order. You can think of it as the change in M squared divided by M squared. 
With respect to x
This is not really a MATLAB question. But anyway, define variables u=y' and z=y'' (equations 2 and 3) and substitute those into your equation (equation 1). Then you should have three first order equations, for u', z', y'. 
Thanks, I believe the 2nd one is precisely what I'm looking for. 
I still don't understand. Where is the dx? I think you'll have to type it over, clearly showing the dM and dx, otherwise no one will understand your equation.
num and den are both separate polynomials. The poles() function on Matlab also require them to be in standard form and I don't have the symbolic toolbox. Is there a way that I can get Matlab to foil the polynomial? Like if I have something like (s+1)(s+2), I want Matlab to output s^2 + 3s + 2.
[Link to my reply in your other post asking the same question.](http://www.reddit.com/r/EngineeringStudents/comments/1nhsxa/finding_roots_of_a_complicated_function_not_in/cciq964)
 x1(2:n) = x1(1:n-1)+2; All this is doing is assigning the 2nd to last elements of x1 as the 1st to 2nd-last elements of x1 with adding 2 to each. I'm afraid I can't help with the recursion but for one of my assignments we used Euler method to approximate ODEs, this used for loops with a similar style to what you have written.
It means eye.cond.start.codes doesn't exist. I suggest you contact the developer of the toolbox or [post here](http://sourceforge.net/apps/phpbb/gazealyze/).
Do they have to be separate windows or can you use [subplot\(\)](http://www.mathworks.com/help/matlab/ref/subplot.html)?
If you place four spaces " " at the beginning of each line of your code it will be much easier to read. Where is the data you're trying to fit to the function?
http://en.wikipedia.org/wiki/Matrix_multiplication#General_definition_2 To multiply two matrices together (say X and Y), then X needs to be of size (a,n) and Y needs to be of size (n,b), with the result Z=X\*Y being of size (a,b). In your example, C=B\*A or C=A'\*B' will give you what you want. I'd spend some time understanding how matrices work, if I were you.
 &gt;&gt; bsxfun(@times,A,B) ans = 1 2 3 4 2 4 6 8 3 6 9 12 4 8 12 16 
also: b*a ans = 1 2 3 4 2 4 6 8 3 6 9 12 4 8 12 16
Don't worry about for-loops in this case. These days loops like this one with "native" functionality like assignment, addition, etc, are more or less as fast as vectorized code.
I just figured it out on my own :)
I'll try subplot, thanks. PS:I don't have access to matlab where i am right now, can i use subplot with comet? (i need it to be "animated")
I don't see why it wouldn't. I'm not sure you'll be able to get all three to animate at the same time regardless of the method because MATLAB waits for the previous command to finish executing before running the next. The only way around it that I can think of is to make your own comet function and update all three subplots in each iteration of the loop. At it's most basic it's just a few lines of code ([see this for an example](http://www.youtube.com/watch?v=rTTQ8qvmXR8), code in the description). This could be real slow, and I'd hope there's a better way to do it but I have no idea what it would be.
If you're ever confused regarding the arguments of a function (ode45 in this case), you can type: &gt;&gt; help ode45 The ODE you're given is an initial-value problem. The specific question here confuses me greatly regarding the difference (if any?) between *y* and *h*, but essentially you'll have some initial condition y(t=t0) = y0, and you'll be inputting something like: &gt;&gt; [t y] = ode45(dydt, [t0 tfinal], y0) which will return a set of (t, y) points, and then you can test different tfinal values until you find a data point where h = 0.1m from which you can estimate the time.
What have you tried? The following should work with no trouble: fname = 'whatever/your/filename/is.xls'; x = xlsread(fname);
csv2struct is a function set up like this (I didn't write it): function Out = csv2struct(filename) %% read xls file with a single header row [~, ~, raw] = xlsread(filename); [~ , ~, ext] = fileparts(filename); if ~strcmpi(ext, '.csv') %convert non .csv files to .csv, so blanks stay blank filename=[pwd,'tempcsv',datestr(now,'yymmddHHMMSSFFF'),'.csv']; xlswrite(filename,raw); [~ , ~, raw] = xlsread(filename); delete(filename); end if size(raw,1)==11 &amp;&amp; size(raw,2)==2 %transpose SS inputs (must match dimensions of input matrix EXACTLY!!!) raw = raw'; end nRow = size(raw,1); nCol = size(raw,2); header = raw(1,:); raw(1,:) = []; end I don't understand how "filename" is an acceptable input here, but not when I try it.
Those blanks are the initial condition (the height at time zero, 5.9) and the range of times you want to integrate over. Probably [0 10] or something like that. If the height doesn't go to zero in ten seconds you can try [0 20] or something like that. 
You can find the roots numerically with fzero. This should work with any function; it doesn't need to be in a certain form. You could also write a Newton-raphson routine (I don't know of a built in Matlab function that does Newton-Raphson.)
My error message is: ??? Error using ==&gt; xlsread at 122 Filename must be a string.
Sorry, I meant for you to use "whos claim", not "who". Can you show the output of that?
Your suspicions were right...claim was listed as a cell class! I used cell2mat to convert it to char, and it worked perfectly. Thank you!!
Is there any particular reason for this? And how would I format that...would it just be: claim{1}
I can't tell you the syntax without knowing the structure of the claim variable, but that would be my guess. Maybe claim is usually a 1x1 cell containing a string, but once in a while, it can be 1xn, containing several strings. In that case, using cell2mat will work in the usual case, but will break in the rare case. I don't know if this is how your system works - it's possible that cell2mat is perfectly suitable here. Just be aware of what it does.
Which case will it break in? I tried it in the 1x1 case, and it worked. But so did the claim{1} syntax.
It could *conceivably* break if claim is anything besides 1x1, depending on its contents.
For me: accountability. Every piece of Matlab code can be traced back to its developers, which leads me to think that an employee will have to answer to any problems or bugs. As a relatively inexperienced person, I put a good amount of trust in that. Open source software seems pretty great for someone who is willing to go through the code and ensure that it's going to do exactly what they want. As for me, I'm pretty lazy.
It simply works.
Toolboxes: There are no open source equivalents for many. Simulink: There is no open source equivalent.
I've tried octave, even GUI octave, but I still find myself going back to matlab because of the symbolic toolbox. that thing is amazing.
Are you hiring? 
Hey, so this week I learned struct arrays, and I have to do some of the same stuff now at the end of the assignment again. I'm trying to use isfield to find how many people are male, but I'm getting the error "too many input arguments" I'm using isfield(HRdata2.sex,{'M'}) My struct is: names={'Min' 'Wei' 'Yao' 'Lin' 'Yang' 'Wang' 'Qian'} titles={'General Manager' 'Financial Manager' 'Engineering Manager' 'Computer Engineer' 'Network Engineer' 'Software Engineer' 'System Engineer'} depts={1 1 2 2 2 2 3} sexs={'M' 'F' 'M' 'M' 'F' 'F' 'M'} ages={48 42 37 31 27 30 36} offices={310 305 202 101 103 108 205} exts={2310 2305 2202 2101 2103 2108 2205} salaries={15000 120000 118000 82000 75000 86000 92000} HRdata2=struct('name',names,'title',titles,'dept',depts,'sex',sexs,'age',ages,'office',offices,'ext',exts,'salary',salaries)
&gt; Hey, so this week I learned struct arrays, and I have to do some of the same stuff now at the end of the assignment again. Ah-ha! I thought that was coming... &gt; "too many input arguments" That's not what `isfield()` does. It checks to see if the struct (array) has a field with a given name. In your struct array, the **fields** are `name, title, dept, sex, age, office, ext, salary`. So: &gt;&gt; isfield(HRdata2,'title') ans = 1 &gt;&gt; isfield(HRdata2,'bogus') ans = 0 You actually want to access the **data** in the struct array, which you can do in several ways If it's a 1x1 struct (not a struct array), access like this: &gt;&gt; struct.fieldname or &gt;&gt; struct.('fieldname') (they are equivalent. If it's a struct-array, you need to collect all the results into a cell array: &gt;&gt; {struct.fieldname} or, if its numeric/character, a numeric array: &gt;&gt; [struct.fieldname] So to count the male people in HRdata2, you need to first extract all the values into a cell-array, then count how many elements of that cell array are equal to `'M'`. You could use either `cellfun` or `strcmp` for part of the answer... 
scilab may have a decent alternative to Simulink , namely [xcos](http://www.scilab.org/scilab/gallery/xcos), though I suppect that it is not as well polished or feature wealthy as Simulink. Honestly I never really needed to delve very deeply into simulink (or xcos) so my knowledge about them is superficial at best.
I learned to use matlab because it was the standard "laguage" used at my faculty. So by proxy, a few companies connected to the university, where I have worked also used matlab. So for this particular department I worked, we used to exchange matlab codes and whatnot. There was a standard layout the company used in matlab for plotting figures, so we all followed that. Due to some problems with the IT department, I was not able to use matlab in linux and so I sought to use other environments like scilab and python's ipython. I am now leaning towards using python exclusively (while using octave and scilab occasional), mostly because it is more convenient for batch scripting and interacting with different software packages. Plus I won't have to worry about licensing any more. 
I'm not sure how you consider that a decent alternative. It doesn't even have a 1/10th of the features. The only thing I can tell that makes it similar is you can drag and drop blocks to do stuff. 