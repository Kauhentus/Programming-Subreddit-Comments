Gotcha. Real time is difficult in Matlab. It's not terribly efficient. You could do something by passing it as serial data. You'd need to create a virtual serial port for Maylab to find it, I think - and I don't know how to do that, but know you can. You can also run c++ files within Matlab, but there are some restrictions on what they can do. Again, I've never done it, but I bet someone on the interwebs has.
You might want to check out the [MATLAB Engine](http://www.mathworks.com/help/matlab/matlab_external/introducing-matlab-engine.html?refresh=true)
Oh, wait, I assumed your variable "filename" was a placeholder for the actual variable in your code. Is that actually how your code is written? Because, as it's written in your OP, it will do exactly what you just described. 
What do you mean "dlmread does not allow" you to use a variable as an argument? Dlmread has nothing to do with the variables you use. Matlab is a pass-by-value language, so dlmread has literally no knowledge of what you use to provide input, whether it's a variable, a literal string, or even another function. If your input to dlmread is constant, it should not be a surprise that it gives the same output each time. What else could it do? 
I understand what you mean, I meant it asks for a string in place of filename everytime, and I haven't figured out why I can't use the variable name assigned to my cell array instead of the 'filename'. Thanks anyways though I'll manage somehow.
If it's asking for a string, that's because you're not feeding it a string. Error messages are your friend. I assume you're feeding it a cell instead of a string, which would be easy to diagnose if you pay attention to the error message. When it says you need a string, you could simply look at the value of your input variable and observe directly what's wrong with it. 
You may wanna check the linked function out. However, if I were you I would try to communicate with matlab over either TCP or UDP. https://www.mathworks.com/help/matlab/ref/csvread.html
He ignored the error message when he gave it a non-string input, and got rid of the error by passing in the same string each time. Of course, this means dlmread is *inexplicably* reading the same file each time. 
Your absolutely correct it's my stupidity. I am still new to matlab and forget what I learn. 
It's not stupidity. You're not stupid. Its just... Read the damn error messages.
I'll be careful about that! Thanks for the help!
Your A2 is the wrong size for the system you're setting up. It needs to be 2x3, not 3x2. 
Depends on the data rate. In my experience it starts to choke on udp data up around the 10 Mbit range for a simple callback
So many factors to consider. Does the software currently support IPC (inter -process communication) or are you going to have to add it in yourself? Is this a Linux, Mac, pc? What data rates do you need? What about waveform and latency? How "real" is real rime? Is it a steady stream of bytes and you have 2 us between bytes for processing....or you can accumulate for 10 ms and spend the next 10 ms processing while the buffer accumulates....or it sends a 10 kbyte burst and sits idle for 100 ms? Can you live with 10 us of latency? 100 us? 100 ms? You are likely going to want to code the IPC parts in mex, and there are undocumented ways to "thread" Matlab, which might let you do what you want. http://undocumentedmatlab.com/blog/explicit-multi-threading-in-matlab-part4
I actually want to learn it since I want to do mechatronics as a career or at least as a hobby. I'm trying my best to learn it as suggested by people here.
I find it really useful to pass around a gif animation at work. Matlab is perfectly suited to generate these animations. Here is some example code generates an animated spectrum of a signal and stores it off in a gif file. function createPlotSpectrumMovie(filename,x,w,noverlap,F,Fs) % createPlotSpectrumMovie(filename,x,w,noverlap,F,Fs) % creates a gif animation of the signal spectrum. % filename is the name of the gif file to create. % x is the signal to analyze. % w is the window to use to analyze the signal % noverlap is the amount of points to overlap when doing the % spectral analysis % F is the sample frequencies to conduct the analysis % Fs is the sample rate. [S,F1,T] = spectrogram(x,w,noverlap,F,Fs); N = size(S,2); for k = 1:N, plot(F1,20*log10(abs(S(:,k)))+10.0); grid on; box on; % setup axis limits so we don't get "camera shake" in the image. % this assumes -110 dbm to -10 dbm signal range. axis([F(1) F(end) -110 -10]); xlabel('Frequency'); ylabel('Power (dBm)'); title(sprintf('T = %5.2f',T(k))); drawnow; f = getframe(gcf); if k == 1, [im,map] = rgb2ind(f.cdata,256,'nodither'); else im(:,:,1,k) = rgb2ind(f.cdata,map,'nodither'); end end imwrite(im,map,filename,'DelayTime',.1,'LoopCount',inf); The one thing I am learning about Tip Tuesday is that there is always a better way of doing something, so please educate me if you know of a better way to do this. 
My workflow is to make pngs and use veedub to stitch them together. I think that method works for long sequences, but yours sounds much better if the matrix can be stored in memory. Is there a way to sequentially add frames onto a file, or does the whole thing have to be present in memory?
A lot if going to depend on what myfun is doing. It probably needs to be vectorized. For this part you're showing us, check out bsxfun, which might be of some help to you. 
Thanks for the help. Check my edit
How would I replace it?
Okay so I changed this: RS = sum(repmat(R(jk,:).',1,N).*A',1); to this: RS = bsxfun(@sum,bsxfun(@times,bsxfun(@times,R(jk,:).',ones(1,N)),A'),1); and it only improved the operation by 5%
I think you should only need one bsxfun- the whole point is that it will perform the tiling/repetition for you- you don't need to specify N, because the size of one of the dimensions of A is N. I'm on my phone so can't check, but something like RS = sum(bsxfun(@times,R(jk,:),A));
Are you pre-allocating your matrix? e.g., mymatrix=zeros(8000000,4); 
Right. thanks. So right now I made it: S_B = bsxfun(@times,R(jk,:).',A'); RS = sum(S_B,1);
Thanks this shortcut can be handy. There's also ctrl-shift-0 to get back to the 'Editor' window. I'm still missing a global shortcut to stop my script (like in most IDEs) but this is a good workaround.
For a simple parallelisation your loop is good. Open up as many matlab workers you can, with matlabpool open N, and then use parfor in both the loops.
What you want to do is have the c program write to a tcp/ip address, and then have matlab read from that address. 
I use a custom modified one to auto set my preferences and do some additional processing (for things like `pcolor` plots). It also tries to call a UNIX program that nicely crops away white space 
Wow. Amazing. This is exactly what I was missing. As soon as I add matlabpool open 12 it goes from about 0.15 seconds per loop to 0.036 seconds per loop on average. Thank you so much!
I always had troubles with the path management system of MATLAB. I missed an easy way to add external modules too, so I have came up a small script called MATLAB Library System to resolve these problem. http://tiborsimon.io/projects/TSPR0001/ It's worth a try if you want to create a modular setup. There are two packages available I wrote with this tool. The first one is a variable length input parser and validator. MATLAB also has a built in input validator tool but I found it convoluted to use. With Simple Input Parser the following function calls are all valid and produces the same parameters for you further functionality: ssin('f', 440, 'A', 2, 'phi', 45, 'fs', 48e3, 'L', 0.8) ssin('A f L fs phi', 2, 440, 0.8, 48e3, 45) ssin('AfLfsphi', 2, 440, 0.8, 48e3, 45) Apart from the flexible input handling, you can set up custom validators and custom error printout for each parameter. You also can get flags about which parameter was parsed from the available parameters. For more details check out Simple Input Parser here: http://tiborsimon.io/projects/TSPR0002/ The second one is a sinusoid generator which uses Simple Input Parser to be as flexible as possible. You can generate a sinusoid signal by adding signal parameters to the function. ssin('n N', 200, 1.5) ssin('L N fs', 0.001, 3, 48e3) ssin('f N fs', 440, 1.3, 48e3) ssin('f n fs', 440, 200, 48e3) ssin('f L fs', 800, 0.001, 48e3) Where A, phi, N, n, f, fs, T, dt, L are the signal parameters. http://tiborsimon.io/projects/TSPR0003/
This is a tough problem since the number of eigenvalues isn't constant. I would do this: * Make E a cell array, so your eigenvalue assignment will be: E{K} = V(:); %V(:) is the same as reshape(V, [], 1) * Then at the end, "explode" the contents of E out and concatenate them all together into one big column vector: Evec = vertcat(E{:}); Another way to do this is to define E=[]; before you start your loop over K=1:i. Then just add your eigenvalues onto it in the loop: E = [E; V(:)]; MATLAB will yell at you for that since the array is growing, but sometimes you just can't make MATLAB 100% happy.
First off, for importing code: if you put four spaces in front of your code, it formats it properly. So, for instance: for i = 1:n "I'm doing stuff inside my loop!" end plot("whatever I want"); but now, onto your problem. If you have a vector, a, that has a bunch of zeros in it, you can get rid of them all in two lines: ind_zero = a == 0; a(ind_zero) = [];
Optimization is the process of tweaking system parameters (often called the design parameters and represented by a vector "x") in order to obtain the "best" value of some function of those parameters, known as the objective function. This process is often subject to constraints such as "truss length must be at least 4 times its width" or something. If your problem is small and/or you have a LOT of computing power, you can go ahead and do a brute force search for the optimal values with a bunch of nested for-loops. Usually this is not something you want to do. Thus the existence of the field of optimization. I suggest that you [start here](http://www.mathworks.com/help/releases/R2015b/optim/examples/tutorial-for-the-optimization-toolbox.html). If you don't have the optimization toolbox, you can still maybe try **fminsearch()**.
I used your second option and my code now works! Thank you very much.
its grabbed from the table and put into a variable: quizgrade = T{subscriptRow,subscriptColumn} unless that makes it not a %d value, what would i use instead? Edit: in my test case, it will grab a "4" from the table and assign it to "quizgrade"
So for str2num you are reassigning the value to itself right? str2num(quiznum) This will turn that one instance of quiznum into a string unless you assign it to something. Otherwise, quiznum will remain as a char/string type. The name should be a string. That's fine. Would you be able to post your code for subscriptRow and subscriptColumn? 
Once you define 'quizgrade' you can call whos('quizgrade') and it will show its attributes. You can also try size('quizgrade') It does sound like there is a mismatch with the fprintf identifiers (%d, %s, etc) and the variables you are trying to pass. To answer your other question: How to make upper case. If a='username'; a=upper(a); will return: a = 'USERNAME'; You can use a=lower(a); to reverse back to lower case.
I am pretty sure (though I may be wrong) that `matlabpool` has been deprecated. Try `parpool local` for the default and `parpool('local',N)` for a specified `N` (I am doing these from memory and they may be slightly off)
Technically in Matlab 2015, the parallel workers will start even without initialisation when you call the parfor
Glad to help.
Thank you!
Do you mean a polygon represented as a list of coordinates of the vertices? Because according to this Wikipedia page, that's a trivial calculation: https://en.m.wikipedia.org/wiki/Centroid There may even be a Matlab function for it. Check the documentation for computational geometry. 
You're using a lot of jargon here, and it's very specific to whatever you're working on. I doubt anybody will be able to figure out what it is you even want. 
Now, that one I did not know. Thanks :)
Thank you! I was close with the nargin command. For some reason i am getting this error "Maximum recursion limit of 500 reached. Use set(0,'RecursionLimit',N) to change the limit. Be aware that exceeding your available stack space can crash MATLAB and/or your computer." All i am trying to do is a simple conversion from deg to rad. Here is what i have function [ rad ] = deg_to_rad(deg) if nargin(deg_to_rad) == 0 error('Invalid argument') end rad = deg * pi/180; 
That's weird. Never have the recursion limit higher than 1000. It seriously fucks shit up. Try this : function [ rad ] = deg_to_rad(deg) if nargin(deg_to_rad) == 0 error('Invalid argument') return end rad = deg * pi/180; end
hmmmm check it out http://imgur.com/BVdujb9 i appreciate the help by the way!! I've been trying to figure this damn thing for hours. i still have throw these into it too • If input degree is zero, display warning message and set output is zero • If input is valid, then calculate radian = degree * pi/180 • Your program should be able to handle scalar or vector input but ill save that for the lab partner lol 
Any time bud, any time. 
Just use nargin, not nargin(function_name). nargin(function_name) tells you how many arguments are specified in the function definition of function_name, not how many arguments are provided at runtime (which is what nargin does).
See my post: https://www.reddit.com/r/matlab/comments/3siik7/easy_function_help/cwxm1f2
You say that i corresponds to a condition in the function file, but I don't see how i is related to the function. You need to pass it in using something like `[t,y] = ode15s(@(t,y,n) meltingice(t,y,i),tspan,y0);`.
With fprint, you can't alternate between the digits and hashtags (= alternate between the 2 rows). You need to create the line of numbers first and then the hashtags next. This code does what I think you're trying to do. % some value of n n = 15; % create the vector 1 to n strx = 1:n; % create a string of these digits, with spacing 4 Line1 = sprintf('%4d ', strx); % replace all non-space characters with # Line2 = Line1; Line2(~(Line2 == ' ')) = '#'; % print them out fprintf('\n%s\n%s\n\n', Line1, Line2) Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # # # # # # # # # ## ## ## ## ## ## 
All you need is "nargin", not name of function. Thats why he gets the recursion limit.
Download [Octave](https://www.gnu.org/software/octave/) and start playing with it now. It's a free MATLAB clone and for most users you won't tell the difference. Check out MATLAB tutorials online (the sidebar here is a good place to start). Feel free to ask us any questions and good luck!
Thanks!
If he's in university, then MATLAB is probably free for him to download. So no reason to not just get the real thing. 
Yep, someone else pointed that out too. 
Likely true. But I've seen some schools not offer home use licenses and students have to purchase the $49 student version. 
Use a Hilbert transform .
For the Hilbert transform to work the signal needs to be approximately symmetric about 0. Try subtracting an offset first.
I just played around with your code a bit and realized your best bet is to use a direction cosine matrix (DCM) and transform your x y and z coordinates to be in line with the vector before offsetting it.
 edit inpolygon and profile it. Server runs on a processor from 2009 and i7 is 2012 so maybe look in supported instruction sets. 
From https://www.cpubenchmark.net/singleThread.html Intel Xeon X5560 @ 2.80GHz : 1,295 Intel Core i7-3840QM @ 2.80GHz : 1,933 The X5560 is quite a bit slower in the single threaded benchmarks. As owiecc says, there's probably a difference in the instruction sets as well, which would have an even bigger effect. The X5560 is simply an old processor. 
Using a DCM is possible, I'll see if I can formulate the problem a different way. I'd have to do this after the conversion from spherical to Cartesian in order to do it properly. Here is what I think I could do then, I can use [these formulations](https://en.wikipedia.org/wiki/Direction_cosine) to calculate my three rotation angles, and then use [this function](http://www.mathworks.com/help/aerotbx/ug/angle2dcm.html) to apply it to the sphere after I do the sph2cart transition. After that, I would offset it, otherwise I would have do bring it back to the origin, rotate and then offset it again back to the desired location. Does the process sound right?
Thank you guys all for the help. I've run into another (i think) simple problem. using fprintf i was able to get two output columns that show the radians then the corresponding value in degrees. How do i title column one Radians and column two Degrees? http://imgur.com/M2Q7l8f 
I went about it a different way. I used MATLAB to give me a meshgrid for a sphere, took half of it, and then used r_hat and two perpendicular vectors to build a rotation matrix, and then stretched, rotated and translated the half-sphere. [If this is what you're looking for](http://i.imgur.com/QVLWYIA.jpg) then [this code will do it](http://pastebin.com/m8evXpkZ)
Lighting is going to be key. You'll need to find an angle and background that will accentuate the line well enough to where an algorithm can detect the gradient. Here's what I notice. 1. My eyes can't detect the line in the first image. At all. You have the advantage of experience but if an average person can't see it, a computer probably can't either. 2. The almond milk picture is pretty good and after playing around with a few techniques in GIMP, I could get a clearly defined line (Blur, thresholding, sobel edge detect) 3. The reflections are bad. If you can eliminate them, you can be a bit more aggressive with your thresholding and edge detection. My recommendation is to use a matte black surface on the sides of the glass and point a diffused light at an angle to the black surface. This should help eliminate glare and reflections. Step 3 might not be the best way (or even work at all..), so try a few angles, light sources, and backgrounds. Source: University senior design project involved detecting/measuring drops of water on glass. Good lighting made it possible and a very expensive CCD camera + lens then made it easy ;)
Just write another fprintf right above it and play with the spacing until it looks right. 
a v h and i aren't getting reset, so the while loop looks like its stuck at whatever values satisfied it in the first place. That is unless I'm reading this wrong. It's updating CD but not the other values. 
This is the correct solution, i reset all the values in between the for and the while and it worked. Thanks!
You've got a couple things going on here. The error is telling you that the arguments to `cross()` must be of the same dimension. So, you're problem is that `omega_B` is 1x3 while `r_B_A` is 1xN. I don't think your lines 5 and 6 are doing what you think they're doing. From what I can tell, you're trying to make r_B_A be an Nx3 matrix, each row representing a vector that you'd like to cross with `omega_B`. The problem is in line 5 and 6 where you're concatenating a bunch of row vectors into a single row vector, kinda like this. A = [0 1 2 3 4]; B = [5 6 7 8 9]; C = [A B]; % --&gt; C = [0 1 2 3 4 5 6 7 8 9] What you actually want to do is something like this. A = [0 1 2 3 4]; B = [5 6 7 8 9]; C = [A' B']; % --&gt; C = [0 5; 1 6; 2 7; 3 8; 4 9] So when you fix that, the next error you'll get will say something about dimensions not being consistent when you try to concatenate. That's because that 0 is a scalar, not a vector. Take a look at `zeros()` for an easy fix. Once you've taken care of all that, you'll still get an error in `cross()`, this time because your arguments are 1x3 and Nx3 when you need Nx3 and Nx3. To fix that, you'll need to make `omega_B` an Nx3 matrix. Take a look at `repmat()` to take care of that. And you'll probably get an error trying to add `v_C_B` once you're done with all the cross products, so you'll need to make it an Nx3 matrix as well.
Hi, First off: MAKING TITLES LIKE THIS never really helps, it seems obnoxious and people are less likely to give you a serious response. Have you tried the matlab gui maker thing? (type "guide" in the command window). Look up some tutorials on that. Let us know if you get stuck somewhere specific and we're glad to help
You need to put 'Color','w' so MATLAB knows which property you're changing
While it doesn't really matter since he isn't doing anything with a large amount of data, almost always repmat() should be replaced by bsxfun(), since it is much faster. To do this with bsxfun you would type: bsxfun(@cross, r_B_A, omega_B)
I have to do a lot of "manipulating" of these sort of shapes, and this is my general strategy for it. 1. Use MATLAB's built in builder of the "general shape." 2. Build a rotation matrix from one normal vector and two cross products 3. Stretch the shape 4. Rotate the shape 5. Translate the shape
Also, 'Color',[1 1 1] to designate RGB. This way you could use [0.9 0.9 0.9] to make a very light/white gray
&gt;Do you have a suggestion on how to iterate through a series of possibilities for an equation of 12 dependent variables I am surprised you have this type of problem but I will assume it makes sense. In order to address this type of problem, I, long ago, developed the below code. It is very fast and allows you to make a table that you can use to easily do any number of nested loops. In the code, is an example, though note that this still has some hard coding. You can easily do it dynamically though. This method is great if you do not know your dimensionality ahead of time! I should note that this was written a while ago. I have since optimized it to be `O(ndim)` but haven't fully cleaned up the code. Don't judge me from this Also, copy/paste it into something to read it better. The spacing is all messed up on reddit, even in a code block function comb_arr=comb(p,start) % comb -- Quickly generate all combinations of integers between 'start' and 'p' % Usage % comb_arr = comb(p) % comb_arr = comb(p,start) % Input: % p - Array of maximum value for each dimension % start - (optional) Starting value. If given as a vector, starting % value for each column. If given as a scalar, used for all % columns. Default is '1' if not specified % Output: % comb_arr- Array of combinations. Will be of form int16. May need to % make double: % comb_arr = double(comb_arr) % % % Description: % Create all combinations from 'start' to 'p(d)' in each dimension. % % Ex 1: comb([1 3 2],1): % &lt;== same result as comb([1 3 2]); % 1 1 1 % 1 2 1 % 1 3 1 % 1 1 2 % 1 2 2 % 1 3 2 % Ex 2: comb([1 3 2],[1 2 1]): % 1 2 1 % 1 3 1 % 1 2 2 % 1 3 2 % % % Suggested Usage: % % Instead of nested for loops like % % for i = 1:30 % for j = 1:30 % for k = 1:10 % A(i,j,k) = ... % end % end % end % % Replace with: % % IJK = comb([30,30,10],1) % for ijk = 1:size(IJK,1) % i = IJK(ijk,1); % j = IJK(ijk,2); % k = IJK(ijk,3); % A(i,j,k) = ... % end % % Scaling Note: % In general, this code is very fast and scaled with O(ndim) and *not* the % size. However, note that the array can be very large! % % Revision History % - Added the ability to specify the start vector % - Cleaned up, added documentation, enforced int16 and double types % Copyright, Justin Winokur 2013-2015 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% if(nargin&lt;1) [st,i]=dbstack;fname=st.name; eval(['help ' fname]); error([fname ': Not Enough Input Arguments. Help displayed above']); end p=p(:)'; ndim=size(p,2); if(nargin==1) %No start given. Default to 1 start=ones(1,ndim); else if(length(start)==1) % Scalar start start=zeros(1,ndim)+start; end end start=start(:)'; if(min(p-start)&lt;0) error('ERROR: Cannot have "start" values be greater than the smallest p(s)'); end Nd_arr = p+1-start; N = prod(Nd_arr); comb_arr = int16(zeros(N,ndim)); %Preallocate for d=1:ndim Nd = double(Nd_arr(d)); rep = double(prod(Nd_arr(1:d-1))); % Number of repeats. Sets to 1 for d=1; tiles = double(N/(rep*Nd)); % How many tiles arr = int16(repmat(start(d):p(d),rep,tiles)); comb_arr(:,d) = arr(:); end comb_arr = int16(comb_arr);
Sounds like a good philosophy. I'll keep it in mind. Do you have a link so I can look up the one normal and two cross products? I see that you made them, I know what they are, but due to the fact I largely taught myself matlab I don't know the significance as much as choosing those steps. Just a simple link would do, want to learn why for the normal and two x products work. Thanks again!
Can you show what you want this to look like at the end? I really don't know what your final version of 'a' should be. 
Sure, let, r = 0.4; dr = 0.08; so; a = [ 0.72 0.64 0.56 0.48 0.4 0.32 0.24 0.16 0.8 0 -0.8 -0.16 -0.24 -0.32 -0.4 -0.48 -0.56 -0.64 -0.72] The main thing to note is the array is incremented and decremented from the radius. 
I forgot to mention my original data set a = [ 90 80 70 60 0 0 0 0 0 0 0 0 0 0 0 -60 -70 -80 -90] is in percent form for some reason... no one knows the actual coordinates of those percents... so i'm trying work backwards to find the coordinate system
"how do I do this" is a bit useless as a question in this context. There's a lot of moving parts on what you just described, so I can't imagine what sort of answer you're looking for. The only real response to what you asked is "well just do that then." Unless you actually want somebody to do it for you, in which case that's not going to happen. I'm happy to provide snippets of code when it's helpful, but this isn't a snippet, it's a few days of work. You can hire people if you like. I get about $125/hr. 
I see what your trying to do, but a(1) isn't my radius... my radius is somewhere a quarter through my array. Linespace will fill the middle section of my array, I won't get the outer portions at all: ex a = [ 0 0 0 0 0.4 0.32 0.24 0.16 0.8 0 -0.8 -0.16 -0.24 -0.32 -0.4 0 0 0 0]
Thank you!!!!! Got it looking pretty good 
Assuming his "frames" are equally sized. You can't reshape into an array with a different number of elements. 
Looks like the mex file is calling functions from qhull library, but the system cannot find it. Looking at Ubuntu packages, current versions provide libqhull6 which is newer version than the one called by the mex-file (and presumably binary incompatible), so maybe you inadvertently updated the installed version of qhull library while installing other packages. The best solution would be probably to recompile the mex file anew, using current versions of its dependencies.
So you want to run the same model independently on different excel files? You can do this with a short script that will open the model, then use the set_param function to change the filename value of the mask, run the model and repeat.
Okay, bear with me. I look up what LD_LIBRARY_PATH was in MATLAB: /usr/local/MATLAB/R2011a/sys/os/glnxa64: /usr/local/MATLAB/R2011a/bin/glnxa64: /usr/local/MATLAB/R2011a/extern/lib/glnxa64: Okay, bear with me. When I get the paths for LD_LIBRARY_PATH I get the following: /usr/local/MATLAB/R2011a/runtime/glnxa64: /usr/local/MATLAB/R2011a/sys/java/jre/glnxa64/jre/lib/amd64/native_threads: /usr/local/MATLAB/R2011a/sys/java/jre/glnxa64/jre/lib/amd64/server: /usr/local/MATLAB/R2011a/sys/java/jre/glnxa64/jre/lib/amd64 The mex file is located here: /home/user/Documents/MATLAB/getfem_toolbox/gf_matlab.mexa64' So I should include this file in the library path? Thanks again,
You're saying you have percentages of a unknown number, and you want to know what the number is. If I say "I'm on a long trip and I'm 26% of the way to my destination." could you tell me how far I've gone? 
I'm not right in front of Matlab at the moment and I don't know what buffer does off the top of my head, but if it's likely that the value of y is unique, you could do Index = find(data == m) 
Does the documentation say it can output a matrix? That's where your answer will be. That said, you could run it in a loop and stack your results up into a matrix, then do your averaging. 
Oh, too bad. I'm sure there's a way, but it would depend on the behavior of buffer(), which I don't know. Good luck. 
The documentation says nothing about the output. After running it, the only result is a figure with the cross-correlations plotted on it. There's no numerical results.
&gt; xcf = crosscorr(y1,y2) returns the sample cross-correlation function (XCF) between the two univariate, stochastic time series y1 and y2. From the link *you* provided. 
Yes, and that's a data plot. The issue I'm having is that a data plot is not an array.
All arrays are plots, if you plot them. 
It doesn't matter at all what you call the variable. 
You're over-complicating things by using symbolic variables. * Create two functions, one that evaluates each of your logical expressions. * Create a function that generates the set of all possible variable settings * For all settings, if logical_exp1(setting) ~= logical_exp2(setting), return false * otherwise, return true From the example you gave in the comments, 4 variables isn't going to be prohibitively computationally or memory intensive. 
I have the dimensions... did you read all my comments? I know the radius of the hole. The hole is located where my zeros are in my array. 
Best guess, it's because it's being optimized for matrix operations, being "matrix laboratory" and all. Notably, a matrix times its inverse is symmetrical and positive.
The sum of your signal squared is equal to the energy, from Parseval's theorem (https://en.wikipedia.org/wiki/Parseval%27s_theorem). If you subtract the mean first, it will be equal to the energy at all nonzero frequencies i.e. how much energy is in the oscillations. So I would think that something like sum((x-mean(x)).^2) could be a sensible measure. Alternatively, you could subtract your set signal rather than the mean. In that case, you would have something analogous to a chisq statistic, like https://en.wikipedia.org/wiki/Goodness_of_fit with sigma=1. So that would be a measure of how well your measured signal fits the set signal. It depends on whether you want a constant discrepancy to be included in your statistic. 
Sounds like you're talking about the standard deviation of the data: doc std The standard deviation of the data will let you know how much the data varies in a statistical sense when compared to the mean of the data. It is also important to know the source of the variation. Is this due to fluctuations in the actual data you're collecting? Is it just due to noise in the data collection process? Obviously, there are a lot of other things to do, depending on what you're looking at and how in depth you wanna get... just not sure what you're doing exactly.
The source of variation is due to a person trying to match a specified pedal position. I will try both methods, but it looks like both will work. I can't believe I didn't think of standard deviation. I'm just not used to using it for time data.
Your first implementation is something like O(n^2 + n^2 ) = O(n^2 ) but your second implementation is something like O(n^4 ). This is because your computation of acosd is O(n^2 ) because it has to iterate over 2 dimensions. So, when it is nested in the for loops, the total computation is O(n^4 ), whereas it is only O(n^2 ) when the acosd computation is not nested in the for loops. So the difference between the first and second implementation is that in the first case there is good time complexity because of the acosd precaching, but by the same token this computation takes more memory. In the second case, less memory is used, at the expense of worse time complexity.
You can't index or assign the 0th item in an array, or have a fraction as an index. 
I assume your error comes from the last 3 lines? remove the (t) from afterx-distance and y_distance. it should look like: x_distance = (Xo .* t) y_dist = ... plot(x_distance, y_distance); 
There are two different measures you can use, depending on what aspect of the variation you want. The first is the standard deviation, as /u/modernworfhair said. This tells you how "wide" the distribution about the mean is. This is the measure you want if the variation around the signal has generally roughly the same shape , only different "size". The second is the [kurtosis](https://en.wikipedia.org/wiki/Kurtosis). This is a measure of how "peaky" the variation around the mean is. This is the measure you want if the "size" of the variation is the same, but it could be shaped differently.
So the story that 'matrix operations are super fast' and 'loops are crazy slow' is an old one, but it's actually less true for Matlab these days than it used to be thanks to the just-in-time compiler. Anything that consists of elementary numerical operations will be quite fast even inside a loop. I think it's actually counterproductive for this to be the standard answer, because often a few well-chosen tweaks can give a good speedup without requiring exotic matrix operations. The two main performance culprits in my day to day work are 1. Preallocation 2. Overhead from function calls To see this, I'm going to guess that your input is something like xyz = rand(1000,3) and you meant 'v = xyz(j,:)' rather than 'v = xyz(i,:)' in your second example. So the first issue is preallocation, and I'm not sure why you didn't see much of a change. If I run your first example, then with 1000 points, it runs in 26 seconds on my laptop. If I preallocate like this N = length(xyz); A = acosd(xyz * xyz'); d1 = []; d1 = zeros(N^2,3); count = 0; for i = 1:N for j = i+1:N if A(i,j) &lt; 10 count = count+1; d1(count,:) = [A(i,j) i-1 j-1]; end end end d1 = d1(1:count,:); it runs in 1.3 seconds. That's a pretty huge speedup. If I run your second example, it takes 31.6 seconds. With preallocation like above, it takes 5.2 seconds. It's still a fair bit slower than your first example. So next we come to the overhead associated with function calls, as well as the fact that Matlab functions often contain a lot of error-checking code and special cases that aren't always relevant. We can eliminate this by writing out the dot product in full. So instead of angle = acosd(dot(u, v)); we could have angle = acosd(u(1)*v(1)+u(2)*v(2)+u(3)*v(3)); This gets the runtime down to just 0.5 seconds. So at least on my computer with R2015b, the loop with preallocation and the explicit dot product is faster than your original vectorized version. But hold on, Matlab is supposed to be faster with vector operations, right? Well yes, and you could vectorize it entirely with something like N = length(xyz); A = acosd(xyz * xyz'); A(logical(tril(ones(N)))) = NaN; x = find(A &lt; 10); [x1,x2] = ind2sub([N,N],x); d = [A(x),x1-1,x2-1]; Which runs in just 0.15 seconds, so that's just over 3 times faster again (although the entries will come out in a different order to the other examples - you can use sortrows() for all of them to compare them). But it's harder to read, so in some cases you might prefer to have more readable code that runs in 0.5 seconds than the faster vector version. That said, I'm not sure what version of Matlab you're on, what CPU you have, and what your input data 'xyz' actually is - none of these calculations would run on my laptop with 5000 rows in less than a couple of seconds. 
Without any code or even a detailed description of what you are trying to do I doubt anybody is going to be able to help you. 
silly question are you sure its 102x2 and not 2x102?
Which you can do by just calling figure() 
I will try this. Do I have to run them in paralell?
Format date as a column vector of numbers (see datenum), format value as column vector, [r,p] = corr(date value) pol = polyval(date,value,1)
Did that, and also tried to increase the size of the variables initialized, but still got the same error. :/
Okey, I think I see where you are going. 1) Simulate 2) Solve for the outputted values 3) Simulate with the values gained from step 2, repeat Hopefully I`ll make it work before too long :)
I think your complexity analysis is flawed. According to wikipedia, matrix multiplication is somewhere between O(n^2 ) and and O(n^3 ). I'll assume the best case and say MATLAB's implementation is O(n^2 ). The computation time of `acosd()` is independent of n, making it O(1). So the first version is O(O(n^2 ) + n^2 O(1)) = O(n^2 ). The second version is a classic n^2 nested for loop. Again, `acosd()` is O(1), so the second version is also O(n^2 O(1)) = O(n^2 ). Note that the second version is actually doing significantly less than n^2 computations of `acosd()`, so a more detailed analysis would tell you that the second implementation is better both in time and size complexity than the first. All that said, it turns out the problems stems from a bug in how I indexed `xyz` in the second version, as discussed in my reply to /u/omegagoose.
If you're worried about speed- don't bother to take the acosd of all of the elements. Store the value of cosd(10) one time, and then compare your dot products to that value. Taking inverse trig functions is one of the costliest things you can do operation wise. If you do need the exact angles of the ones less than 10 degrees, take the acos of the ones you care about after you've done the comparison. 
Is there a specific reason you need to do it in matlab? Anyways: http://uk.mathworks.com/matlabcentral/fileexchange/34837-twitty
[SOLVED] I tried the example you said and it worked. Then I noticed the difference: the commas in the delimiter!!! Thanks for making me try the example found in the help, and likely, with also a fresh mind on my part, I saw the issue. 
I think you need to model your system using plain old paper and pencil before going to Simulink. Maybe you can do it using the various physical simulation toolboxes (I believe it is called Simscape) but I have no idea how they work.
Well the thing to understand is that if v=xyz(i,:) then *all* of the approx n^2 /2 pairs have an angle less than 10 degrees (because the angle is zero). So your dynamically growing variable 'dists' is expanded many many times. When you reallocate the array, it takes longer if the array is bigger. So this operation becomes more and more expensive as dists gets larger. On the other hand, your inner loop goes from 'i+1:N' which means that it gets shorter as i becomes larger. So initially, you have an increase in run time as dists becomes larger, and towards the end you have a decrease in run time as the inner loop becomes shorter. In contrast, if you have v=xyz(j,:) then you have many fewer angles less than 10 degrees, which means that 'dists' doesn't end up anywhere near as large, so the reallocation isn't as expensive. However, the moral of the story is that not preallocating is very, very, very bad. Try making your plot for the bugged code again, but using preallocation like in my example. You should find that it runs vastly faster, and that your inner loop execution time should linearly decrease with 'i', which corresponds to the inner loop becoming shorter only. 
Oh man, it just clicked for me. A vector has a 0 degree angle with itself, so `dists` needs to grow for every `j` loop because the `angle &lt; 10` condition is met every time in the bugged version. I can't believe I didn't catch that. It all makes sense now. Thanks, guy!
Ok that's great advice, thanks MrGeek
i would just write all the infos in one matrix, for example: weight=[input(prompt)], and the next input is weight=[weight;input(prompt)]. So the first weight is now weight(1) and the second weight(2) and so on.... this is kind of dirty since you dynamically alter the dimension of the weight matrix (just appending the next element). If you know how big your n is beforehand you can just preallocate weight with weight=zeros(n,1) and fill the elements with the inputs. Regards
I haven't looked through all the code, but the idea is intriguing. A couple questions: 1) Is the program giving you errors, and if so, where? 2) Why save the numbers as a string? If you're just looking to output the numbers, they don't need to be in string form. Or are you doing something else with them that they need to be strings?
East thing to do is to write it in another language like python and see. My money is on your convergence proof being wrong or your Matlab code accidently implementing a different algorithm. 
It's supposed to be a lower bound! Thanks though. Edit: Actually, you're right. I've calculated the minimal number of iterations for the worst case error. 
haha sorry didn't mean to sound so dismissive. I'm curious also what your proof that your N-R method converges in 300 iterations looks like. 
lol just kidding. I think it's because my error estimate e_n at iteration n is worst-case, based on the nth power of an initial Lipschitz constant for an initial interval. I guess I would get a closer number by calculating a new Lipschitz constant for each successive interval. In fact, it seems kind of dumb not to. 
Does your error estimate use the error-term in the truncation of the Taylor series? Most of the error analysis I've seen for linear approximations like N-R use that to get an error bound, and critically, that error bound is not sharp. It is just worst-case, so you're all good knowing that 50 &lt; 300! 
Sufficient but not necessary. Watch where that sneaks into the proof
Easy enough to do with eval(): name = ['weight' num2str(n)]; eval ([name '= blah blah blah']); But others are right, cell arrays and structures are an easier, tidier way to achieve what you're looking for.
Of you have all the h 29x39 matrices, you can make a temporary 3 dim matrix Val(:,:,1) = first matrix... Val(:,:,h) = matrix number h. Then just use mean (val,3). Loading them from files should be easy using file operations. Let me know if you can't.
Wow, this is awesome and exactly what I was looking for! Thank you so much!
I think I'll try InsomniacDuck's solution first because it seems more simple. Thank you for your reply though! 
A should be a matrix in the equation Ax=f
It works well, btw. :)
You can display graphs using the plot command. Say you have data that you've entered into matlab, let's say you have one variable x, representing the independent variable; and a dependent variable y. Using the plot command you can visualize the relationship between the two on the screen in matlab. Here's an example bit of code you can use to test it: x = [1,1,3]; y = [4,2,3]; plot(x,y,'.'); The '.' part indicates that you want to use points, rather than the default lines. It's a very flexible tool! Happy plotting! 
Step one is to profile the code to identify the bottlenecks
You can do this from the command line as well: dbstop if error
Probably the best language feature I like about matlab is that you can slice and dice arrays/matrices with ease. x(201:205) % grab the 201st through the 205th elements x(1:4:end) % grab every 4th element You can also use logical expressions to get array elements for example... x(x&gt;0.5) % grab only the elements from the array that exceed 0.5 x(x&gt;0.8|x&lt;-0.8) % grab the elements that exceed 0.8 or -0.8 I find this feature so useful, that whenever I need to examine data-sets that contain more than a handful of elements, I just bring the data into an interactive matlab session and use features like this to explore the data.
I probably completely overcomplicated this in my head. Hadn't even considered this. Thanks a bunch.
This may or may not qualify as a tip per se, but we'll see. The way I have my matlab set up is to have codes in one folder (modularized) and a workspace area. The codes reside in an SVN or Git repo (depending on the projects). Then I have a folder I call `matlab_base`. In that base folder, I keep a few scratch `.m` files and one called `add_code_paths.m` The idea is that my code base never gets filled with junk variables, codes, saved workspaces, plots, etc. It is just the code! (and it's under version control). Likewise, I then have a base folder where everything else stays. And I can move that around as needed! At the start of the session (or code), I just add a line to add the paths. Also note the `reset` option `add_code_paths.m` looks something like that below: function add_code_paths(varargin) SVN_path = '/path/to/svn/repos'; GIT_path = '/path/to/git/repos' if ~strcmp(SVN_path(end),'/') SVN_path = [SVN_path '/']; end if ~strcmp(GIT_path(end),'/') GIT_path = [GIT_path '/']; end for i = 1:length(varargin) switch lower(varargin{i}) case {'reset'} disp('Resetting Matlab Path') restoredefaultpath case {'project1'} disp('adding project 1') addpath(genpath([SVN_path 'project1'])); case {'project2'} disp('adding project 2') addpath(genpath([GIT_path 'project2'])); case {'project4'} disp('adding project 3') addpath(genpath([SVN_path 'project3'])); otherwise warning(['Unrecognized path: ' varargin{i}]) end end An example usage would be something like add_code_paths reset project2 to restore to defaults and then load project2 BTW, I take the same approach with Python though I want to look into the virtual environments eventually
This looks like a really excellent resource; thanks!
That would repeat indexes a=1 B loops to 3 C starts at 3
cant think of any other way aside from using loops. im done with the hw anyways lol. thanks
Here's your function with 3 different approaches, one of which is your original: function C = rgb2mon(A,c, methodNum) % method 1 - loops, no preallocation % method 2 - loops, preallocation % method 3 - vectorized % % A = rand(1000, 1000, 3); % B = rgb2mon(A, [0.1, 0.2, 0.3], 1); % Elapsed time is 1.677593 seconds. % B = rgb2mon(A, [0.1, 0.2, 0.3], 2); % Elapsed time is 0.274315 seconds. % B = rgb2mon(A, [0.1, 0.2, 0.3], 3); % Elapsed time is 0.030974 seconds. tic switch methodNum case 1 B = rgb2gray(A); [i,j] = size(B); for a = 1:i for k = 1:j cScaled = (double(B(a,k))/255)*c; r = uint8(255*cScaled(1)); g = uint8(255*cScaled(2)); b = uint8(255*cScaled(3)); C(a,k,1)=r; C(a,k,2)=g; C(a,k,3)=b; end end case 2 B = rgb2gray(A); [i,j] = size(B); C = zeros(size(B), 'like', A); for a = 1:i for k = 1:j cScaled = (double(B(a,k))/255)*c; r = uint8(255*cScaled(1)); g = uint8(255*cScaled(2)); b = uint8(255*cScaled(3)); C(a,k,1)=r; C(a,k,2)=g; C(a,k,3)=b; end end case 3 B = im2double(rgb2gray(A)); c = reshape(c, 1, 1, 3); C = im2uint8(bsxfun(@times, B, c)); end toc
ah yeah i think you're right. it should index off the lowest nested loop, like this: for a = 1:7 for b = (a+1):8 for c = (b+1):9 for d = (c+1):10 for e = (d+1):11 for f = (e+1):12 [do your thing] end x 6
&gt; I was taught MATLAB for a day in class by a TA with a heavy accent Consider teaching yourself. Contrary to popular belief (particularly amongst undergraduates), it isn't a professor or TA's job to ensure that you learned things. Coming to an understanding that you need to teach yourself is one of the most important things you're in college to learn. You won't remember every detail of every equation you come across, but you'll develop the skills to re-learn it, or another piece of knowledge, on your own in the future. If knowing MATLAB is required for this course, consider that it might be important to know MATLAB, and recognize that as a student, it is your job to learn it, not be taught it.
&gt;Since MATLAB is a row major language, it stores variables in columns. &gt;i.e. if you have a large array, or large matrix, allocate memory as zeros(N,1), or arrange your matrix so you perform operations as M(:,a). Granted, on my numerical code, it might shave 5 seconds off of 200 seconds, but it's a neat performance increase none the less. MATLAB is column major like Fortran. Though your description describes column major even though you said row.
Also "dbstop if caught" if the error is thrown inside of a try catch.
I was not aware of the fullfile though it really only saves a few lines but good to know. I was aware that, in theory, you can for loop over cell arrays but I choose not to do it. As opposed to Python where that is unequivocally the norm, it's not the usual Matlab way (i.e., doesn't work with all arrays, just cell) so I choose not to for consistency. Also, unlike pythons enumerate function, if I also need a counter, it is less clear. But still worth noting for others who may choose to use these features
cumsum([1,3,-2,3]) 
Wanna keep the first 1000 elements of signal? Signal(1:1000)
if x is a scalar, no need for a matrix equation to solve it Just as in your case where the system is over determined, just check that alpha times (1/U(alpha)-1/8) is the same for all six occurences, and then you can say that it is x as well. otherwise your system has no solution.
Thank you. I used the nchoosek function though and looped over the lines of the resulting matrix. Works perfectly. But in case I'll ever need to do the same thing for a larger set of items it might of course be useful to use the loop approach. 
Kay, a really simple one (that I already shared this week but what the heck): Do **you** keep forgetting which index is for the column, and which one is the row (don't be shy, just admit it, we all forget it once in a while). Just remember: All matrices are **R**oman **C**atholics. So row first, column second. Want to select the entire 3rd row of matrix A? Was it A(3,:) or A(:,3). What was it again? Matrices are Muslims? Protestants? Buddhists? **NO!**. Roman Catholics!
Holy shit thank you EDIT: I'm so excited to get into lab and try this on my code that doesn't work 
[Access Data in a Cell Array](http://www.mathworks.com/help/matlab/matlab_prog/access-data-in-a-cell-array.html) What are you having trouble with?
You can put anything into a cell array: A = {1, 'a', rand(5)}; When you index a cell array with parentheses (), you get *cells* back: B = A(1:2) C = A(3) If you want to get the CONTENTS of a cell, use braces {} instead of parentheses (): D = A{1} E = A{3} It gets a little trickier when you want to do something like: A{1:2} especially if you have, like here, different data types in each cell. Check out the link that /u/RieszRepresent posted [here](https://www.reddit.com/r/matlab/comments/3tam4t/please_how_the_hell_does_this_work_cell_arrays/cx4ho18).
From the doc page of waveread(): &gt; wavread(filename, [N1 N2]) returns only samples N1 through N2 from each channel in the file. Use this if the file is so big that MATLAB crashes when you try to load it. Otherwise if you can load the entire thing, you can index parts out as /u/orad showed [here](https://www.reddit.com/r/matlab/comments/3t9j5w/need_help_with_contour_plots_on_matlab_2010/cx4ae68).
This is an interesting tidbit, but I'm really curious how this "came up" in real code. Care to share?
Your uni doesn't happen to be NTNU?
Well I know how to solve Sudoku puzzles, however I've no idea what tools and in what order to correctly code them to have an input A with zeros on the blank spaces, then find those zeros and have matlab run possible solutions 1-9 in those blank spots until each row, column, and 3x3 box sums up to 45 with no repeating integers in the rows or columns. I understand using the Find function will identify the zeros in the puzzle, but the format and way to code that is beyond me right now.
nope
People might be giving you a slightly harder time than you deserve, but in principle they are right. You're way ahead of yourself. The very first thing you need to do is figure out what algorithm you're going to use to solve your Sodoku. If you Google search for [sudoku algorithm](https://www.google.com/search?q=sodoku+algorithm&amp;ie=utf-8&amp;oe=utf-8#safe=off&amp;q=sudoku+algorithm) you'll find lots. Once you've picked an algorithm you want to use (and I'd recommend an easy one- shoot even the brute force method would likely solve it in a couple of minutes), then you can outline it. Once you have your code outlined you can come back here and ask a question we can actually help you with, like "how can I check if a block has any repeated numbers?" 
Avoiding global variables and cells isn't a "hitch with this assignment". Those are things you should always avoid unless they are absolutely necessary, and globals are almost never necessary. 
&gt;I tried that and all it did was give me the inverse of the pure maternal ECG. Then it sounds like the pure maternal ECG is not scaled the same way as the abdominal ones; maybe try normalizing them first.
I'm not very good at matlab.
The global variable thing I get, but what is wrong about cells?
I haven't worked with Dynamixel motors myself but I did some research on the code. Their datasheets were fairly detailed. It shouldn't be that much of a problem to use that (and the working code you already have) to create something working for your situation right?
The more you do it, the more you learn! :) You can try the [MIT open course](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-094-introduction-to-matlab-january-iap-2010/) tutorial to get some directed learning. Once you get the hang of it, Matlab is great.
Here's how I would do it. % Fs is sample rate, fc is the highest frequency of the fetal heartbeat b = fir1(128,fc/Fs); x = [ecg1;ecg2;ecg3]; x = filter(b,1,x,[],2); N = size(x,2); R = 1/N*x*x'; [V,D] = eigs(R); w = V(:,2)/V(1,2); fetalECG = w'*x; V is a matrix of eigenvectors of the covariance matrix R. I am assuming the largest eigenvector corresponds to the heartbeat of the mother. Therefore the next smallest eigenvector is that of the fetal heartbeat. The three observations are then dotted into that second eigenvector to get the fetal heartbeat. This is a basic principle component approach. I've used it with some success in separating RF signals. It is possible that you have to use the third, or smallest eigenvector if your signal-to-noise ratio is crap.
Some commands you might find useful: **textscan**, **fscanf**, **regexp**, **xlswrite**. However, I think that due to the way it's formatted, you may need to loop through each line of the file and parse accordingly: %% EXAMPLE: Read each line of a text file fid = fopen('data.txt', 'rt'); while ~feof(fid) A = fgetl(fid) end fclose(fid);
What you have here is an optimization problem. MATLAB has two toolboxes ([One](http://www.mathworks.com/products/optimization/), [Two](http://www.mathworks.com/products/global-optimization/)) dedicated to this sort of problem.
After speaking with my professor, I've come up with an algorithm to locate the zeros in the provided matrix. it looks like this: function sudoku_solver=sudoku(A) [Row,Column]=find(A==0) [Row,Column]=A(position(:,1)) position=[Row,Column] for i=1(length(position(i,1))) Row1=A(position(i,1),:) Column1=A(:,position(i,2)) end end Next, I believe have to write a function to embed into the above code that will locate which "0s" are 'singletons' i.e. there is only one answer to that square. I also probably need to write code to apply the rules of sudoku, however I don't know the syntax in which to enter these constraints.
OP is passing in the arguments correctly. 
Yes, fully automated. It should work for envelopes in different positions. There will be no perspective distortion, only rotation, as the images come from a scanner. It is one envelope per image and the envelopes are in a white background. [An example](http://alanis.simmons.edu/daisie/archive/fullsize/helyar-3-l2a_6036325864.jpg)
Thank you! That was much easier than another process I was researching!
In that case, I would look into the following functions in the Image Processing Toolbox: **rgb2gray**, **im2bw**, **graythresh**, **regionprops**, and **imrotate**. You're going to first segment the envelope from the background. Hopefully you don't have any that are the exact same color. Once segmented, you need to somehow extract the angle information. You might be able to do this with only regionprops, but you might need something like [this](http://www.mathworks.com/matlabcentral/fileexchange/31126-2d-minimal-bounding-box). Also, check out the **colorThresholder** app in the Image Processing Toolbox.
Can you link to your data?
Thank you very much. Well, atleast I hope thats why I need. Pretty new to matlab. I know they question is not really detailed, but english is not my first language so I don't know most of the correct terms.
Good catch. The function f needs to be modified to accept a two element array. 
Okay, so what's going wrong? 
It's not. Sorry, I didn't realize I suggested they were different.
Getting an out of range error. I think perhaps I'm telling H to expect more columns than I'm actually providing?
Okay, thanks. Sorry, I'm incredibly new to matlab and have basically been just running other peoples' scripts until now. So I have essentially no background in this. 
Okay so what is the size of A? What are the values of i and j? (besides sqrt(-1)). 
You're welcome to post questions. I'll be at work so I can't promise how often I'll be checking reddit. 
No problem, we've all been there. Just keep at it. There's a steep learning curve in programming but it actually gets pretty fun after you get past the agony of learning how to debug each type of error.
This does indeed look like a mistake in filtering the complex frequencies.
Maybe http://stackoverflow.com/questions/21006490/scatter-plot-with-density-in-matlab ?
The problem is that the data is already in terms of frequencies and I don't know how to translate this to fit these functions in any sensible way.
What do you need help with exactly? Other than writing the code for you, I'm not sure what you're asking for :)
Maybe not the answer you're looking for, but try using `dlmread()` to read the file rather than reading it yourself.
Appreciate it, but not quite what I'm looking for. I just can't figure out why the num variable isn't storing the exact values from the text file, and how I'm supposed to manipulate it for the conversions I want.
It works for me - I get printed the original data sans the first column (which in your code is split into separate month variable). How exactly are you calling your script? Even so, the data is still in string form. You'll likely need to use `strsplit` to separate individual numbers into a cell array (cell array is like a list where each element can be of different type and is indexed by {}, unlike the more common numeric array indexed by ()), then call `str2num` on each to convert into numeric value (since your lines have different number of rows, I'm not sure in what form you want store the final output).
I think I get how it works, but could you explain a bit so I can fully wrap my head around it? I see you used the line variable as your delimiter. Could you also explain these lines? numbers(end+1 = str2num(number) data{end+1} = numbers; And why is it necessary for the data to be stored in cell arrays, rather than a separate number array and string array (since I only need to perform calculations on the numbers)? 
First, a little note on vocabulary. `line` isn't a delimiter, its a string containing the contents of a line in your data file. A delimiter is something separating each piece of data in that line. In your case, the delimiter is the whitespace separating each number. Other common delimiters are commas, semicolons, pipes, etc. So `strtok()` doesn't do exactly what you seem to think it does. `[var1,var2]=strok(var3)` takes the string `var3` and reads it up to the first delimiter (default delimiter is whitespace, you can also specify one if you'd like) and assigns everything up the first delimiter to `var1` and everything after the delimiter to `var2`. So, for example, [var1,var2]=strtok('1 2 3 4'); % var1 = '1' % var2 = '2 3 4' I assume you want to store `var1` as a numerical value and not a string, so `str2num()` will take care of that conversion. Reading the rest of the numbers in the string is as simple as running `str2tok()` on the second output until the line ends, hence the `while` loop. The `numbers(end+1)=blah` is just a convenient way to append to the end of a vector without having to keep track of an indexing variable. numbers = [numbers, blah]; or numbers(i) = blah; i = i + 1; would accomplish the same thing. It's all up to preference really, but I find `numbers(end+1)` to be rather self explanatory when reading through code. I used a cell array because the rows in the input file you provided were of varying length. Each row in a Matlab matrix must be of the same length, so that's a problem. I'm not sure of the details for Matlab cells, but they essentially let you store different data types (or, in your case, vectors of varying length) in a structure that's easy to loop through. I assumed the rows in the input file were significant, so a cell array was the obvious solution. If rows aren't important, you could easily modify that code to just toss everything onto the end of a vector. Also note that I edited my original comment slightly to show you how you would go through and modify the data you read from the file.
"didn't work" isn't very descriptive. 
OH, you're right. I feel extremely silly. I'm too used to knowing all the variable types I'm working with because you have to instantiate them all in Java. Is it just me that finds MATLAB completely non intuitive because of this? I never had any issue picking up object oriented concepts for Java, but when I'm coding in MATLAB it feels like I have NO clue what I'm doing. 
&gt; I'm mainly having trouble with how I can get the indices of the X matrix The unique() function will return the indices of X if you specify two more output variables. In your current code you have... B = unique(X(:, 1:4)); To find the unique rows and their index vectors, you can change this to, for example... A = X(:, 1:4) [B, Ai, Bi] = unique(A,'rows','stable') This will find the unique rows of A and the index vectors Ai and Bi, such that `B = A(Ai,:)` and `A = B(Bi,:)`. It is all spelled out in the help page for [unique()](http://www.mathworks.com/help/matlab/ref/unique.html) in great detail.
No problem! Before I answer your questions, it's probably worth mentioning Matlab's debugger since it makes finding mistakes a lot easier. If you open up the script editor, you'll notice little horizontal lines next to the line number; click them and they'll turn into red dots. Next time you run your code, the debugger will kick in when you attempt to run that line of code, allowing you to step through each following line, letting you check variable values and enter functions and other such things. You probably would have figured out your string multiplication problem pretty quickly this way. Back to your questions, yes, that't exactly what the `vector(end+1)=blah` thing is doing. When you use `end` as an array index, Matlab converts it to the index of the last element of the array, allowing you to index relative to the end of your array rather than the front like you're probably used to. In the case, you're assigning to the index after the last element in the array, causing Matlab to grow the array by one and insert the new element at the end. `vector(end+n)=blah` would grow the array by `n`, zeroing all new elements except the last one which is set to `blah`. This trick is nice when you don't know how big your vector will ultimately be, such as when inserting with a `while` loop or `for` loop with a conditional. The convenience comes at a price, though. Every time you use this trick, Matlab resizes the vector, a pretty costly operation. Take a look at [my little mistake](https://www.reddit.com/r/matlab/comments/3sypju/these_two_pieces_of_code_do_the_same_thing_but/) to see what I mean. For your other question, you need to understand the inputs and outputs of `strtok()`. When you call `strtok()`, it returns two things: the first chunk of data up to the first delimiter, and everything after the first delimiter, both as strings. For example, [var1, var2] = strtok('my username is snozpls'); % var1 now contains the string 'my' % var2 now contains the string 'username is snozpls' It's done this way to allow you to easily parse a string using a simple loop. data = []; line = '1 2 3 4 5'; % an empty string (ie, '') will evaluate to false, % breaking the loop while line [token, line] = strtok(line); data(end+1) = str2num(token); end Note: in writing this example, I noticed a mistake in the code I gave you earlier, which is probably why you're confused now. `str2num(number)` should actually be `str2num(token)`. I just corrected it, sorry about that! Part of the reason your original code may not have worked like you expected is probably because you only ever grabbed the first piece of data from each like rather than looping through the entire line.
The set command takes property/value pairs. You have given no property for the linespec '--go'. The linespec is a shorthand way for specifying the linestyle, color, and marker in the plot function. Once you have a handle to the line object, try setting the linestyle, the color, the marker, and the markersize. set(plotSine(1),'LineStyle','--','Color','g','Marker','o','MarkerSize',4) Look at the [documentation](http://www.mathworks.com/help/matlab/ref/primitiveline-properties.html) for line objects. There you will find all the properties that may be modified with the set function. 
I would assume that you use Newton's second law in combination with Newton's law of universal gravitation to set up your equations of motion. Since Newton's second law is only valid in an inertial frame, you should define one. Assuming you have one large body and two smaller bodies, I would suggest to define an inertial frame at the center of the largest body. If you have set up your equations of motion correctly, you can describe the motion of the two smaller bodies with respect to the larger one. To verify your equations of motion and their implementation, I would suggest that you have a look at the definition of a Kepler orbit, which allows to descibe an orbit with a few simple parameters. 
Oh, hmm ok! Right now we have basically 2 point particles whiz by with a force updater equation type loop based on position and velocity. But, you're saying that wouldn't make sense unless we had a reference object in the midst?
I think I've got the rotation part. Now I'm stuck at trying to extract the rotated image from the white background.
This would be best solved by writing your equations of motion as differential equations and solving them with ode45, otherwise you will see increasing errors in the system over time. N-body simulation is relatively difficult. 
So it looks like you took the advice on this subject when you were asking about the rotation. That would have required you to isolate the envelope in the image and do some kind of edge detection or optimal bounding box analysis. So you should already have the tools you need to find the bounding box, correct? 
Ahh, that makes much more sense now. So, if line = '1 2 3 4 5' After one instance of [token, line] = strtok(line); It puts '1' into 'token' and '2 3 4 5' BACK into 'line'? So then the next iteration of [token, line] = strtok(line) will be working with line = '2 3 4 5' and store '2' into 'token' and '3 4 5' into line, and so on. Am I getting this? 
&gt;Untitled55555 Oh holy ghost of Alan Turing, save us. 
Okay so try some different edge detection or fit an optimal bounding box. Something like a k-means merit function should work great. Possibly on color rather than brightness data? You could also try simply k-means segmenting the whole image (with k=2) and then fitting a box to the resulting blob, or just use regionprops to get an orientation, although that would be less accurate. 
The help browser is way more informative than the command line help output. Basically you will write an m-file that evaluates the differential equations government the system, and then use it in ode45 to find doubt a numerical solution to that DE given some initial conditions. Then you plot the solution that ode45 gave you. 
Might be a bit advanced for the course but try looking up the Lagrangian for N-body interaction via the Kepler potential. It might make your life easier in understanding the math before you try and simulate it. From there its a matter of choosing the mode appropriate numerical scheme (which can be looked up from any standard numerical recipes textbook) ode45 is just a runge-kutta integration method so it might be more computationally expensive the smaller the time step
The side bar.
Where do your profile results say the slowest portion is? Focus on that part. Repeat until speed is acceptable
You can take any point as the center of your inertial reference frame, but it is convenient to let it coincide with one of the bodies since that selected body won't move with respect to the inertial frame.
Do you have the optimization toolbox? If you do, you should look at the function `lsqcurvefit`. If you don't have the toolbox, you might even want to consider `fminsearch`, a less sophisticated algorithm; or you could look for something on the file exchange. The field of smooth unconstrained optimization is very mature, and there's no need to invent your own algorithm.
&gt; I'm beginning to think it over and i realise that I'm only testing if the result is better than the inital difference, i should be updating the new benchmark difference each loop right? Yes, definitely. Also your objective is absolute value of sum of differences, which is not really a good measure of fit (e.g. positive deviation at one point can be compensated by negative deviation at another point to yield objective of zero). The usual way is to minimize *sum of squares of differences*, e.g. here `sum((dPDD - Measured).^2)`. &gt; Does anyone have any easier options or is that the way to go? Matlab already has nonlinear optimization functionality (fminsearch in base, fminunc in optimization toolbox), so just look at docs and use that. You'll need to write a function that accepts vector with model parameters and outputs the fitting objective, then simply call e.g. fminsearch with that function and initial guess as inputs.
As other people have mentioned, there are built in MATLAB functions which will do a lot of this for you. That being said, if you're interested in solving this sort of thing yourself, you're really getting into the realm of optimization, which is an incredibly well researched field. In general, they do things more robust than simply iterating through all solutions (because, as you have found, that takes forever). Instead, they hop around, using the local gradient in an attempt to find a minimum or zero. For instance, fminsearch uses the [simplex method](https://en.wikipedia.org/wiki/Simplex_algorithm). But there are [many other options](https://en.wikipedia.org/wiki/Root-finding_algorithm) you could implement.
Simple. The statement you wrote is equivalent to: `if (f-0.05&lt;vf(i)&lt;f)` Which never happens.
I am not using a parameter beta, i am attempting to minimize the value beta to fit the data i have given. If i imput parameter beta then my fminsearch function just spits my initial guess back at me. Do i need to handle the parameter differently when trying this minimization.
"p" is trying to concatenate into a row vector, but your initial guess is a column vector.
if you want to multiply something with each element of a vector (or matrix), you need a period in front of the multiplication symbol: .* same for ^ and /
fminsearch expects the objective function to accept single vector argument, not multiple scalar arguments. So just define the function as `E=inverse_SIR1(p)` (and call it accordingly elsewhere).
You need to delete also the `p=[beta;gamma]` line in inverse_SIR1.
Is there a reason why i NEED that line when working with only 1 variable, but need it deleted when working with 2 unknowns? 
Well, what I mean is that you're trying to return a variable that doesn't exist, hence the error. You'll need to declare `cycle` within `cycle_check()` if you want to return it. 
Yup. In your case, you might want to look into structs to make your inputs and outputs a little cleaner. Right now I'm imagining any line calling this function to be 100+ characters long. Not a pretty sight.
The last line is incorrect
hmm.. every time i run the curve fitting tool with the equation ive been given it can give wildly different values for all three coefficients and ... well that's not good.
Those rows have different numbers of columns. Your best bet is to go with a cell array. Something like this... for i = 1:n data{i} = row; end
Ion preallocated everything the problem turned out to be that when I did that for the energy I made a magic with the wrong dimensions because I put the indices in the wrong order when I created the array. Thanks for the help
Awesome, always nice to see what you can do with matlab. I've tried to test your code (with your suggested values) but it only returns a plot with a single dot at [0.5, 0]. Any other suggested values? I did notice (While playing around a bit) that your code crashes when you give absurd values for z. (since you only use if and ifelse statements). Probably wouldn't happen for you since you know what values are reasonable but as a bit of icing on the cake you could add a warning like else error('¡idiota! usted no debe rellenar los valores extraños') end as you may notice I don't speak Spanish...
Aha ok I see the confusion
Thanks or the answer. The reason I'd like to use matlab is because I'd like to get data on the timing of keypresses and time it took to begin writing the answer. I guess I could look into other possibilities though.
I have a matrix where each row contains the x-coordinate, y-coordinate and z-coordinate for each data point. The x-coordinate is timestep, so an integer from 0 to tMax, y and z are real values between 0 and 1. What I would like is basically a stem3, but with a surface or maybe a "3D stairplot" similar to hist3. edit: or alternatively, instead of height z-could be density. I know I should be able to figure this out, but I find trying to figure out what plot and when to use from the Matlab documentation rather difficult.
Try imagesc. You can pass in x and y vectors that tell it where to center each pixels. 
The thing with the graph is that I have not yet figured how to plot the trajectory of each photon, keep it, and graph the next, so it only shows where they are hitting the aluminum cube. Also z is the number of protons an element has, so z must be a positive integer, preferably between 1 and 36, since I used some approximations that only work for reasonable light elements.
Put backticks around the text: \`this\` -&gt; `this`
You can do elementwise multiplication with: .* and you can expand a vector into an array using repmat(). But I'd still expect your code to fail. You use the variable n before it's defined. We *always* help with homework, we just don't do it for you. 
We're glad to help with homework, as long as the person asking for help shows they've at least tried, which you have for sure. So, some preliminary tips: 1. When sharing code, if you put 4 spaces in front of a line, it formats like code. So you can say: if n &gt; 4 n = (1:length(m)); else n = 1:4; end Makes it a lot easier to read. 2. In an if/else statement, you don't put a condition after the else. If you want there to be a condition, you have to use else/elseif. You can read up on them [here](http://www.mathworks.com/help/matlab/ref/if.html?refresh=true). OK, so now what you're working on. I'm really struggling to figure out what you're trying to do. Looking at your code, it looks like `xi`, `yi`, `Ci` and `Qi` are all vectors, and then you make `m`which ends up being an nx4 array in the order of `Ci, Qi, xi, yi`. OK, but then you start using a variable `n` which hasn't been defined, and looking up above, I see why you want to sum- but don't you want to sum the variables directly, you want to sum their products. Also, I'm not sure what you're trying to do in your `if/else` statement. To get you started I would think you could start by doing something like this: n_inputs = length(xi); x_top = 0; x_bottom = 0; for i = 1:n_inputs x_top = x_top + xi(i)*Ci(i)*Qi; x_bottom = x_bottom + Ci(i)*Qi(i); end x = x_top/x_bottom; 
psych toolbox might work 
All variables in MATLAB are inherently arrays- and a vector is just a 1d array. Since you already have a counter variable `c`, then you can just index `t` with it, so: t(c) = t(c-1)*n
It's going to require some re-writing of your code. This was sort of a "push in the right direction." You could simply have a second variable, maybe `t_i`which stored all your variables of `t`, or you could combine and only have `t`- up to you. 
Thanks! pcolor works wonderful after I rearranged my z values as a matrix and added one row and one column. imagesc thinks NaN is the same as min(z) and plots it, so it's not perfect.
Thank you! I used pcolor, but imagesc kinda works too.
For the pilot experiment any of the options (multiple computers, phones or whatnot) is perfectly fine. However for the actual study I need fMRI compatible capture hardware. We currently have one computer displaying the same output to two scanners at once and capturing yes/no answers (using cogent), but I wanna take it a step further and try to get participants to communicate with one another in this extremely noisy environment. 
Any hints on how to make it recognize one keyboard from the other? 
It's not obvious to me what's wrong here, buy you might try posting on the mathworks discussion board too. If you isolate solver by itself and feed it tricky matrices, does it still fail? Also, an error message / output at the point of failure will likely yield some clues too. 
Just go to mathwork's discussion board like /u/Kylearean hsd pointed out. Or just contact Mathworks directly. They see this kind of thing all the time. Besides, they deal with scientists and engineers mostly, as opposed to software devs.
I'm looking for ideas on how to create this vector. Either totally new ideas or expanding on the code I've written. I've been thinking about this code for a couple of days now, and I'm kinda stuck. I can easily generate the vectors with starting with a = 1, and pos = 1. Writing the following (repeatedly): [a, pos] = IncreasingVector(a,10,pos) You'll see how the vector expands, and then retracts as it reaches sum=10. But I'd like to have all possible combinations of the vector, with decreasing integers. So for example [4 4 3 3 2 2 1 1...1] with the sum of 30.
I wouldn't be afraid to contact MathWorks tech support: http://www.mathworks.com/support/contact_us/ But, before you do, I think you should look into this a bit more. For example, create a conditional breakpoint with the following command at the ML command prompt: dbstop if error Now run your code. You will be brought to the line that is failing. Look at the LHS and RHS values of the line k(i) = ___. My guess is you are running into some sort of instability in the equation where as you say each value of k(I) is expected to be scalar while the RHS is not scalar. Think about why this is happening. If you still feel like this is a big, contact MathWorks, but at least you'll have a clearer picture of exactly what the error is and hopefully more insight into why it's happening.
&gt; I've seen people ridiculized everywhere for doing so, and if I do what the boss asks, I'm afraid I'll be next. lol, man don't sweat it! MathWorks tech support are great. Just call or email them and ask. Just get some clear &amp; concise reproduction steps (like a complete script that will cause the issue to happen) and send it to them. They will NOT ridicule you, they are all engineering and CS people themselves. You're more likely to get ridiculed here than with people who are professionals paid to talk to customers!
The error will tell you what line of code is the problem. My guess is you're getting an answer on the solve command that you don't expect. I would type &gt;dbstop if error in the command window. This will put a breakpoint whenever the problem occurs and you can debug it. Should be easy. 
What would you like to do with your data? Saving data could have different meanings that I can't quite get from your context. If you just want to be able to have your solution available (and your script doesn't take a long time to run), you don't really need to save anything. Just run the script each time you want your results and they'll be available in the workspace. If you want to save your data to a file you could consider looking up the commands/functions: save, fwrite, csvwrite. However, none of this has anything to do with storing data in structs and cell arrays - these are data structures that can be used programmatically in different cases to help you solve something.
I think I'm starting to understand, but I think I'll need a bit more details from you. I shamelessly looked at your post history and found a post that sounds somewhat related to what you're asking here. Let's come up with a very simple block diagram first, so we know where data is going and what we're doing with it. The way I currently understand it now is: You have data from another program in some format, let's call this external data. You load it into MATLAB and do something with it, let's call this processed data. At this moment, this is all I can infer that you want to do: External Data (Multiple Sets?) -&gt; MATLAB -&gt; Processed Data (Multiple Sets?) -&gt; ??? I'm sure I'm just not understanding, but if you can layout what your data flow is (what format your data is in at each step) and what you want your final output to be, we can figure something out! **Edit:** Reading your description again, do you mean that you had a solution for one set of data but now have *multiple* inputs and want to handle the outputs in a graceful way using data structures?
Yes, I haven't been to reddit much, but the last thing I posted was also about this project. Using your terms: external data = comes in 2 levels - I have multiple animals, each with multiple trial blocks. MATLAB = I cut the trial blocks into smaller chunks (stimuli), and do some manipulations that generate a normalized version of the external data that I can compare across trial blocks. Processed data = 4 sets of 3 trials each in a trial block, each normalized. I also compute an average over each set and categorize the ROIs. But then I am left with multiple sets of "processed data" for each animal, and I want to be able to hold them together somehow so that additional animals don't overwrite my existing data or something weird. ??? = I want to take the processed data over multiple animals and make statistical comparisons - primarily correlations. So I hope that clarifies the process a bit. My data flows from image stacks to mean intensity matrix (for a single trial block), Then I take the mean intensity values and manipulate them to get a normalized version (deltaF/F0 if that helps). Then using the normalized version of the data, I calculate response size, onset and compare the different stimuli. But then I need to repeat this for all trial blocks for a given animal, and compare the response size/onset/differences across stimuli across trial blocks. And then compare the animal-specific results across animals. So I think your edit is pretty much right. I wrote code for 1 trial block in 1 animal, but now I have multiple animals and multiple trial blocks. 
The other advice you've gotten already is good advice, but I've got to say, it's highly unlikely this is a bug in Matlab. Also, using a symbolic expressions for this kind of numerical application just seems bizarre and error prone. It's no surprise to me that it's failing. If you want numerical solutions, write numerical code. There are plenty of options for numerical solving in Matlab that are actually made for this kind of thing. 
The link up above gives a great overview of logical indexing- once you get used to using it, you'll end up using it all the time. 
It looks like you're showing us the function you're handing into fminshearch- are you getting a "not enough input arguments" in this code, or in the code calling this code? What does the code calling this code look like? How did you fix the "not enough input arguments" problem? We need more information to try to help you. 
yeah seems like the hell of a tool, i dont know how i didnt use it more before!
I don't really know what you're trying to integrate but MATLAB is probably not wrong. Double check your bounds, specifically zMax.
Why is zMax a function handle? And are you sure you need a triple, not a double integral? 
From what I can see, the default delimiter for textscan is "White Space". You use commas. Try Data = textscan(FileID, '%f%f%f%f%*[^\n]','HeaderLines',2,'delimiter',','); Edit: Having trouble with formatting.. a preview option would be great -.-
I agree that it' s probably not a bug. As the wave number equation is guaranteed to always have real solutions, I don' t find the use of symbolic expression SO bizarre, but I must agree that a numerical solver may as well have done the trick without problems.
Yeah, this seems the most curious. Why are you telling it to vary rMin from 0 to radius, but then asking for it to evaluate zMax with a constant radius? Shouldn't the radius in zMax just be r, otherwise you don't need a triple integral as pointed out by another poster.
What have you tried?
The function timeit for timing function calls: http://www.mathworks.com/help/matlab/ref/timeit.html
Only this http://www.mathworks.com/help/symbolic/solve-a-system-of-linear-equations.html But i do not know how to apply my example with cos sin etc
Long ago I wrote a MEX function for serializing MATLAB data to an array of bytes, for use with sharing data between MATLAB processes via a TCP socket. The MEX function piggy-backed on the undocumented C functions mxSerialize()/mxDeserialize() in the libmx shared library. There is an easier way: undocumented *MATLAB* functions getArrayFromByteStream() and getByteStreamFromArray() do the same thing. Another tip: the [Undocumented MATLAB](http://undocumentedmatlab.com/blog/serializing-deserializing-matlab-data) blog is a good read. 
You mean like condition = 0; while condition == 0 [output1,output2,...,condition] = function(input1,input2,...); end ?
I think you need get your text books and learn some of the fundamental things, like the difference between a system of linear equations and a system of nonlinear equations.
If you want all possibilities you are probably going to end up with a lot pretty quick. Lets take a look at the constraints. Some are easier to comply with than others: In all of these examples the vector manipulated is generated as: dummy_vec = rand(K,1); Max sum of vector can only be N: to comply with this one you can just divide a (random) vector by its sum and multiply by N, like dummy_vec = (dummy_vec/sum(dummy_vec)) * N; All elements must be decreasing Another easy constraint to comply with, as matlab has a function to gaurantee compliance vec_dummy = sort(vec_dummy,1,'descend'); All entries must be integers: You can use the round command in Matlab to comply with this constraint (however, the sum might change! We'll come back on this later) vec_dummy = round(vec_dummy) All entries must be between 1 and 6: For this you need to adjust the random distribution that is drawn from, to be a uniform discrete distribution between 1 and 6. You can do this like so vec_dummy = round(rand(K,1)*5 + 1); Now unfortunately, due to the way we try to comply with the sum constraint we end up with non-integers, and the consequently rounding them may again yield a vector that does not comply with either the value or the sum constraint. However, it will be pretty darn close, so all that is left are two checks, Check for 0 and values &gt;6, make all 0's 1 and all values &gt;6 = 6 Check the sum of the resulting vector again, if it is is not N you have a number of options: If it is smaller than N, add 1 to the first 5 (or 4 or 3 or 2 or 1) of the vector, repeat until the vector sums to N. If it is larger than N, remove 1 from the last 6 (or 5 or 4 or 3 or 2) of the vector, repeat until the vector sums to N. Both of which can be implemented in a simple while loop. Now, as your input is random you may not end up with all possible combinations as there are nonlinear permutations, but you will easily generate a pretty much infinite number of different test vectors (depending on the length of the vector and the number N desired). edit: I've just looked at some of the vectors generated by above code and I think another solution to your problem would be to write a linear program with above constraints, and find all feasible solutions, which would give you all possible test vectors. 
I rather not use randomly generated vectors, since I really want to check them all. I've made some progress beyond this code, as of now. I've managed to create a lot of the vectors, but I keep getting stuck halfway now. If you wanna try it here It is: Project:http://pastebin.com/3eGPJwJp IncreasingVector(fixed): http://pastebin.com/hiP8zdBy VectorFix: http://pastebin.com/yi3nHkkH StrategyMatrix: http://pastebin.com/vxj9WYWG FindRolls: http://pastebin.com/7d7GBuQ8 AddOnes: http://pastebin.com/kaeM8vF9 AddZeroes: http://pastebin.com/gd0BVfMB 
Can you please add more detail to your question?
It looks much worse than the regular artefacts of Matlab plotting engine. If I had to guess, I'd say that the data in your x vector is non-monotonic. Are you sure it is sorted?
Why not estimate a polynomial curve for each column, and then compare the estimated coefficients to determine where the split occurs? Let me know if this doesn't make sense.
So you're saying that each column of data up to some N is about the same, and then those columns after N are different from the first 1:N, but similar to each other? Do they all have the same number of rows? Are they time aligned? How about if you take some mean square error measurement vs. column #1? Like: for n = 1:NumCols D(n) = mean((Data(:,1)-Data(:,n)).^2); end figure plot(D) My guess is that D is going to have some jump in it when the data changes.
Alright, I think I understand now. As far as I can tell, the problem you have is one of how to store your data, not how to organize it using things like structs or cell arrays. Structs and cells are used to store your data while you use it programmatically, almost like numbers. They are used like any other type of variable. That is, structs and cells are declared very similalry to numbers in MATLAB, and in more type-specific programming languages, all structs and numbers are different *types.* For example, a very simple struct will contain two numbers such as: &gt;&gt; mystruct.x = 1 mystruct = x: 1 &gt;&gt; mystruct.y = 1 mystruct = x: 1 y: 1 Notice how this is very similar to just declaring two different variables, x and y, such as: &gt;&gt; x = 1 x = 1 &gt;&gt; y = 1 y = 1 The only difference is now we have a handy variable that contains both of our variables so we can access them later with that one variable: &gt;&gt; mystruct mystruct = x: 1 y: 1 but this is just used programmatically. We do not store this struct *after* we've processed our data. You'd still have to save the struct or workspace as a .mat file in order to access the data in this struct again. A good use for structs, in MATLAB, is for example to represent a box that we know will contain two variables 'length' and 'width' and then later use the variables for multiple boxes to calculate something like area easily. Cell arrays/matrices are just arrays/matrices that can store other types of data than just numbers. They can't be saved in any other way than regular matrices, so again you're stuck with either saving the matrix itself or the workspace as a .mat file. I still, unfortunately, stand by my original idea of using something like save, csvwrite, or fwrite in order to save your data. You could use a struct to further organize your data for easy access such as the box example I used above, but for each of your animals instead. You will still need to save this struct to a .mat file or some other file though. One other alternative is a database. Unfortunately, I don't have much experience with MATLAB and databases, but from a [a quick google search](https://www.google.ca/#q=database+in+matlab) it looks to be possible.
In particular, try changing the matrix divide on line 32 from `/` to `./`.
I've done something similar with `java.net.Socket` and `java.net.ServerSocket`. There are a lot of examples out there. Here's the [first google search result](http://www.mathworks.com/matlabcentral/fileexchange/25249-tcp-ip-socket-communications-in-matlab-using-java-classes) the Mathworks File Exchange that uses Java sockets. It runs in a while loop, which means that it will block all other execution. What I did when I wrote a Matlab chat application was to write a java class that defined a listener protocol, and polled the socket on a background thread. That way when I created an instance of the object in Matlab, I just attached a callback to the socket object. It came in quite handy. 
Have you written code to generate the input waveforms and then run them through your filter yet?
Everything before the line 43 works on its own. When I through in the double integral it complains saying I can't subtract '-' because Matrix dimensions don't agree. I have tried several things to no avail. Any ideas?
It's hard to tell without the first part. If w2 is a vector it might throw an error since z is a variable (That is matlab needs to vary z in something like integral to do the integral). If it is, I'd try it in a loop and get the double integral for different values of w2.
I recommend the textbook "Numerical Recipes" (If your class didn't already require it). It's the only textbook I bought AFTER college. Try taking some problems that you've solved analytically and solve them numerically in Matlab. Calculus problems are an easy start, then try some DEs or problems you had in your ME classes. Image processing can be fun in Matlab. Take a look at some of the functions that matlab has (Blurs, edge detection, convolutions) and write your own functions to implement them. See if you can take a picture of a red object and write a script to return the centroid of it. In one of my numerical methods classes, our professor gave us a very complex function and gave the class a challenge to find the global maximum. Try using traditional root finding methods, stochastic methods, whatever works.
Im running a code which uses gpu, there are some part like gpuArray in this code, now I dont want to change the code but instead, I want to disable the gpu by adding the nogpu directory to the path to turn gpu operations into no-ops, so everything will run on the cpu as normal.
that worked perfectly. thank you!
Learn Python asap, it'll make you a much more versatile programmer.
As /u/Marxshmarx pointed out it is impossible to tell exactly whats causing this error, because we don't know how the variables are defined. It is however likely that z0 is a vector (or in matlab terms a 1-by-n or n-by-1 matrix) and z is a matrix (m-by-n). Then the matlab interpreter does not know what to make of it. This is confusing for a lot of people because when z0 is a scalar (or in matlab terms a 1-by-1 matrix) this works.
you may want to use ./ instead of / in your definition of jamnK.
Yes I should have mentioned every thing declared beforehand is a constant/scalar. How would I fix the problem as you mentioned?
He just did. Why^won't^people^read^the^documentation. 
Is that a thing? Alternatively, you could just go through the code and remove the instances where the variables are defined as gpuArrays.
What is A supposed to be? From what you provided it seems like A = [0 1 2 3 4 5 6 7 8 9 10 11... 64]. 
It's been a while since I used my random process/stochastic signals/signal processing, but that expression for the impulse response seems fishy to me. Maybe double check that relationship. Your code appears to do exactly what your math would dictate. 
Correct, it's just a vector. The reddit formatting messed it up - it's supposed to be 0:127. I used that notation to show a relation between the bit and the vector A (e.g bit is from 1:7 and the vector is 2^7)
Thank you for the advice. I will check out that textbook at some point. Since you are 1 of 2 people to mention image processing I will probably check that out since I wasn't taught that. Also for finding the global maximum did you use the optimization functions? That's probably what I would do.
Welcome)
We did Euler's method. Never heard of Ode45.
bitget(A, n) will produce an array of the nth bit in each of the elements of A. bitget(A, 1) should give you [0 1 0 1 0 1... ] because the least significant bit in each number alternates between 0 and 1. bitget(A, 2) should result in [0 0 1 1 0 0 1 1 0 0 1 1...] 
Create an empty array for freq and magnitude before the loop starts. 
Thanks a lot! But I found out that setting freq and magnitude equal to an empty array plots nothing. They have to be some real numbers (I chose freq,magnitude=1). And then it worked :)
Alright thank you so much!!!
Look at sum() and cumsum() functions.
1. http://www.mathworks.com/matlabcentral/fileexchange/32294-four-bar-linkage--all-configurations- 2. http://www.mathworks.com/matlabcentral/fileexchange/27814-linkage-solver
The lecture slides I found were pretty vague but [this Wikipedia article](https://en.wikipedia.org/wiki/Euler_method#Example) does a decent job of explaining Euler's method so I'm going to use that (or just ignore it and read the following). Basically Euler's Method is used to approximate the solution of some function. This is Euler's Method: y_new = y_old + (h * y') where y' is the derivative of some original function, and h is the step size. Each iteration of Euler's method will calculate a new y value. First I'll use Wikipedia's example. Let's say you are given 3 things: y' = y, y(0) = 1, and h = 1. We want to use Euler's Method to approximate y(4). Here is the process: y(1) = y(0) + (h * y'(0)) = 1 + (1 * 1) = 2 y(2) = y(1) + (h * y'(1)) = 2 + (1 * 2) = 4 y(3) = y(2) + (h * y'(2)) = 4 + (1 * 4) = 8 y(4) = y(3) + (h * y'(3)) = 8 + (1 * 8) = 16 So our approximation is equal to 16. I will give you a different example, just so you can see it done another way. Let's say you are given: y' = 10t + 5, y(0) = 2, h = 1, find y(2). y(1) = y(0) + (h * y'(0)) = 1 + (0.5 * (10(0) + 5)) = 6 y(2) = y(1) + (h * y'(1)) = 6 + (1 * (10(1) + 5)) = 21 So the answer is 21. Assuming I did basic math in my head correctly. Also, note that: y_new = y(old number + h) ...in other words, if the step size, h, was equal to let's say 0.5, and we still want to find y(2) like the example I just did, then you would have to do: y(0.5) = y(0)... etc. y(1) = y(0.5)... etc. y(1.5) = y(1)... etc. y(2) = y(1.5)... etc. = answer As you can see, decreasing the step size means you have to do more calculations. However, you get a more accurate answer when you do this. Remember, this is a way of approximating the solution. It's not the actual solution. If you understand all that, then I think you are pretty good. 
I'm not sure I understand your goal. There are many ways to covert numbers to a string (num2str, mat2str, sprintf, etc), and many ways to compare two strings (strfind, strmatch, etc), the most powerful using regular expressions (regexp). As an alternative, if you know the input will be numeric, why not convert the input string to a double and do the comparison numerically?
cheers! 
Thanks. 
A few things. * First, you should consider using `x` as as your symbolic variable name. If you do not specify an independent variable when performing substitution, differentiation, or integration, MATLAB uses a default variable, which is typically the one closest alphabetically to `x` or, for symbolic functions, the first input argument of a function. Let's say that `s` is set to our symbolic expression, matrix, or function. `symvar(s)` returns a vector containing all the symbolic variables in `s` in alphabetical order with uppercase letters preceding lowercase letters, If there are no symbolic variables in `s`, `symvar()` will return an empty vector. * Never use `i` as a loop iteration counter. Both `i` and `j` are special values in MATLAB (the imaginary units), and should be reserved for that purpose. It would be like using "pi" as your loop counter - you'd just never do that. That said, `symvar` will treat the constants `pi`, `i`, and `j` as variables. Note that you have 2 of those 3 in your expression. * You have a function in your expression "`f_d(i)`"... actually you have two other functions, `tan` and `abs`. This might be the problem, and the solver may be ignoring the "abs" function. You can use `sym` to create symbolic function. For example, you can create an arbitrary function f(x, y) where x and y are function variables. * In your expression you aren't specifying the equation conditions nor the parameter variables. You may consider explicitly specifying these things. For example: `eqn = sin(x) == 1; solve(eqn, x);` Thus solve(eqn,x) explicitly knows to solve eqn `sin(x) == 1` for the variable `x`. If you do not specify a variable or quantity to solve for, it is automatically determined according to MATLAB's default rules. * Lastly, as /u/RieszRepresent mentioned above, since you want a numerical solution you should definitely use a numerical solver like `vpasolve` instead of `solve`. There is no way you're going to get both numerical and symbolic solutions into your "`k(i)`" container, particularly if your not using VPA on the symbolic expression result. 
I'm not in image processing. But surely doesn't sounds too complicated. You can use double for cicles or repmat with submatrices. But the function is avaliable at fileexchange, take a look at the source http://www.mathworks.com/matlabcentral/fileexchange/7720-pad-array
He's correct. MATLAB simply executes a script line by line, whereas C and most other "real" languages compile an executive binary, which is what they actually run.
Are you reading it using an Arduino or something?
Yes, I was looking around the net if there is anyway I could get its reading without having to setup a serial connection between matlab and arduino but couldn't find anything. I have already set up a GUI that is monitoring the readings of multiple gas sensors through the use of ArduinoIO package, I could not do these with the temp sensor as all I could see in the net were using serial connection and it seemed that I cannot set arduino('COM') and serial('COM') simultaneously. Im trying to avoid using serial communication since I couldn't understand how to identify which sensor I'm reading 
Step 1) find some literature describing the Runge-Kutta method. Step 2)??? Step 3) profit. 
figure hold on plot(f1) plot(f2) plot(f3) hold off 
It only generates one axis on the left though, how would one go about generating an axis on the right?
Matlab is usually slow with loops, and together with recursion and brute-force algorithm it's to be expected that the program is slow. I haven't tried to actually run it, but few things I've noticed: * `any(A==x)` might be faster than `ismember(x,A)` * searching for which square the element belongs to every time is redundant, and probably could be precomputed in advance (though then you might need to pass this info somehow as another input to the function) * in general, try to run the computation with a profiler and see whether there's a particular bottleneck worth optimizing I'm also wondering, does the recursive approach actually work in the current version? The function doesn't indicate whether it has succeeded in filling the board or just returns its inputs untouched due to no valid moves (I assume this was the role of the s flag before?), so the base case doesn't seem to be defined properly.
I know you wanted challenges but.....You could refer him to the Introduction to Programming with Matlab course on Coursera. The assignments get progressively more difficult and a lot is learned.
An audio filter using fourier transforms? 
[The 4Chan programming challenge](http://i.imgur.com/2n1IBkC.png) is good for learning new languages, obviously some aren't that suitable for matlab, but there are some good challenges there to research more
Does it have to be Matlab? I am building something that (among other things) has this 3d plot-functionality but it looks much nicer and is updating near real-time. I'm doing it in Python and it's proprietary to my company so I can't really share the code. If you are interested check http://bokeh.pydata.org/en/latest/docs/quickstart.html#jupyter-notebooks and scroll to the end where you have an interactive example. All these things with interactivity in Pyhton/IPyhton/Jupyter is relatively new but if you push with googling you can already find many really impressive examples. https://plot.ly/ is something that was built mainly for Python, but I see they have some functionality for Matlab. Beware that it is semi-commercial so depending what you want and what they have for Matlab you might have to pay. If you are stuck with Matlab and plotly doesn't work for you, I don't think you can do it without coupling Matlab to some other front-end language. If you check the source of that website it calls a "matweb.exe" file which is probably a compiled Matlab script running on a server. This then generates figure "/icons/ml000XXpeaks.jpeg" where XX is an incrementing number for each call, and it shows you that image. You could do it like that but it will be slow and probably capable of serving a single-digit number of users concurrently.
I want these kinds of 3d plots and then have a textbox which gives a computed result: https://plot.ly/python/3d-subplots/
A few suggestions: * line 26-29 (the double for loop that checks validity) if you can remove even one of those for loops by vectorization then you'll see a further speedup * in you validity function, using false instead of 0 actually slowed the program down significantly * The brute force algorithm is going to get only so efficient, might want to considering moving away from it if you want to scale well. That being said I was able to make some progress in terms of speedup, 10 empty slots takes 0.05 seconds so about x40 speedup, although part of that will be hardware difference). Here's the link to the changes I made: http://pastebin.com/0gPEJchL * I removed your square find function, and replaced it with a precomputed matrix (had to introduce a new top level function in order to do this). This was also a big speedup. The values aren’t hardcoded and will calculate themselves each time you run the program (doesn’t take any time but just wanted to include the math for it rather than hardcode values in.)
Well, I am using Matlab for years and have recently started with Python. I must say I am quite enjoying the transition. To start off, I recommend installing Anaconda package with Python 3.5. That should give you a well-rounded environment with a functionality similar to Matlab. Spyder is IDE with a look-and-feel very similar to Matlab. However, you will want to start to work with IPyhton/Jupyter notebooks since they are executing in the browser. Run `ipython-notebook` and load up these examples to get a feel of how it works: https://github.com/ipython/ipywidgets/tree/master/examples/notebooks
I never knew about the profiler! I'll play around with it and try and implement your suggestions soon. Thank you so much for the feedback!
Wow I really didn't expect someone to go and do it for me! I really can't complain. &gt;using false instead of 0 It's things like this that I would never figure out on my own. I guess that comes with experience! &gt;precomputed matrix I used to do the same thing in an earlier version but my implementation was so bad that the squareFind function was actually quicker. Yours is much more elegant. I tried your code with the same 10-empty-slotted board I used to check my original code and it runs in 0.198 seconds. That is amazing! It's still working on the 60 slot board though, as expected. I'll report back with the result. Thank you so much for your help! I have learned quite a bit from this! Edit: MATLAB has been working it's ass off for the past 11 hours and it has still not come to an answer yet for the 60 slot board. Is there a way to get it to return how much it has already done? Ctrl + C would just kill it. Edit2: I had to kill it since my PC was acting up. 
I think Digital Audio Effects are fun. You could have him pick something from [DAFX] (http://www.music.mcgill.ca/~ich/classes/dafx_book.pdf) and try to make it work, then modify it to do something else. They include matlab code, but you usually have to comb through it to get it working.
Thanks so much! it seems Bokeh doesn't have 3d plot capability just yet? Should I use matplotlib? But then.. can I output to a website?
Start by writing a ballistic propagator. Given an input state (pos, vel and ballistic coefficient) it propagates the object to the ground. This will be a pretty big project as is. Once this is working, you could build a bit of a radar gun with an auridno that measures position/velocity. You can determine ballistic coefficient through geometry or (if you're feeling especially ambitious) with a Kalman Filter with your radar gun measurements. Now, shoot your potato cannon and see how close to reality your ballistic propagator gets to predicting where it lands
Well, neither of us knows how to use Simulink (yet). He's pretty much at the point of knowing who to do basically mathematical operations and indexing. I know more than that but not much. But I would like to learn how to use Simulink, so perhaps he and I could learn together if you have any suggestions for how to get started.
We had a class at college where we had to program a Reversi player that had to win against a basic min-max player provided by the teacher (in p-code) and afterwards had to play against all of the other teams' players. (All with limited time) This is obviously a quite challenging project, but it could be fun for your dad to try and beat a player that you programmed.
Thank you for the detailed answer!
huh? I am not sure I follow. Give me an example with a single number. And do you mean `0.5` or did you really mean `0.05`? Would it be like if you started with 2.23, it would then be 0.23 then compare to 0.05 (or 0.5)? And, I would be careful about looping over non-integers. Loop over array indices (or *much* **better** don't use loops). For example, A - floor(A) will always make a positive number be between 0 and 1. And will work on a whole array at once
I would advise trying to break it down to individual steps. Your desired result are two vectors of the same size, where the ith entry of the first vector corresponds to the same time point as the ith entry of the second vector. Which steps do you need to take in order to make that happen? Have a look at the intersect function - that should get you going with figuring out which elements in vector a are also in vector b (i.e. for matching up time points). Added bonus: the function gives additional output that is super useful for what you're trying to do here! Best of luck.
Can you just use the [round function?](http://www.mathworks.com/help/matlab/ref/round.html) Or is the assignment to write your own algorithm?
That's frankly a really toxic way to handle a sub that is "here to help." Take a sub like /r/homeworkhelp or /r/askphysics. They get tons of questions from students who don't understand simple concepts or who didn't fully read their books, etc. So people who respond typically give hints only, or ask leading questions and hope to give people ideas to solve things themselves. They don't just downvote, walk away, and stick up their noses. Or god forbid, you're tired and have been racking your brain for hours but just can't see what should be a simple solution and just ask for a little help, in the hopes that someone can take 30 seconds to answer your question. If /r/matlab was only for experienced programmers to discuss the fine nuances of matlab then don't write "we're here to help" in the sub description. 
You are putting words in my mouth. I have no problem helping the clueless. I have a problem with people who don't want to lift a finger to help us help them. If you take a look, you'll see that despite the downvotes, most questions have responses, and often helpful ones. Nobody is "sticking up their noses and walking away". The people who've "been racking their brain for hours" are pretty much guaranteed to be asking the the questions that I explicitly stated should not be downvoted.
Just wanted to let you know that I did see your mod message a few days ago, and considered what could be done about this. So I decided to remove the downvote button for a trial period, using some custom css. This however will only work in normal browsers using our custom style sheet; it won't work on, say, a mobile app (if you're browsing from a mobile device here's what the sub's [homepage](http://i.imgur.com/bqO9OtT.png) and [comments](http://i.imgur.com/nDcsgQO.png) look like on a desktop browser). I've actually made a lot of UI changes to this sub during the short period I've been a mod here (~4 weeks), so if you like or dislike something let me know - I've been the one hacking everything up. To /u/FrickinLazerBeams point... &gt; Even more rare is the final category of post. These always get up votes: &gt; 7) guys there's an amazing new feature you probably haven't heard of. Check it out! Look what neat stuff I did with it! &gt; 8) here is some really useful code take a look! I'd appreciate any feedback. I've implemented post flair to help mitigate issues about there not being enough visible non-question content. Just now actually I made a hover box in the bottom left corner that allows you to sort posts by these flair tags (something that I added to the sidebar a few weeks ago). Ultimately I would like to see more posts like #7 and #8, I think we all do. But it's up to us to generate that content. Recently /u/Weed_O_Whirler has been doing a great job with his "Tips Tuesday", so I invited him to be a mod, and hopefully he can further cultivate that culture a little more around here. In that vein, if any of you regulars want flair, I'd be happy to pin some on you. ^( /u/jwink3101 /u/unanun /u/halleberrytosis /u/RamjetSoundwave /u/Pugnare /u/tiborsimon /u/matlabbit /u/artard /u/riboch /u/pcsxly /u/nyarlathotim /u/bradAHA /u/FrickinLazerBeams ) ^(obviously I've missed a lot of regulars, my sincerest apologies, naturally I'd like to pin flair on you too)^) Oh and I guess I should mention that inevitably there are going to be people posting shitty questions. I guess we'll keep dealing with those accordingly, allowing reddit's algorithms to do their job. 
This sounds like a reply to a different comment. I didn't say most of the things you seem to be replying to. I also think it's important to help people learn the language. I do encourage stupid questions, and I answer them too. I'm not sure where you're getting this from, but it's nothing I wrote. 
Freshman are still expected to read their class materials and to not cheat on assignments. If someone who wants us to do their work for them is discouraged, that's fine. College isn't summer camp. Put some effort into it. 
Did you install the support package download from the website you linked? It would appear from the Web page that you need that to communicate with the device. 
Generally, the n-th fft coefficient is the amplitude of the frequency with (n - 1) cycles per record length. By "record length" I mean the length of the time series in whatever units you like. E.g., the 5th fft coefficient of a 300 sample record is the amplitude of the frequency with 4 cycles per 300 samples. If those 300 samples span 5 minutes, then it's a frequency of 4 cycles every 5 minutes. Obviously this relationship is inverse in the case of ifft, although it is still true that he number of samples will be unchanged. An M sample array will have an M sample fft, and an M sample ifft. 
I mirror it. The 512 length frequency spectrum has arbitrary length. The spectrum is obtained by first generating a [Pierson-Moskowitz sea spectrum](https://en.wikipedia.org/wiki/Pierson%E2%80%93Moskowitz_spectrum), then applying a transfer function to it, which would transform the sea spectrum into the spectrum of movements of the submerged paddle, generating the waves. Then I ifft to get back to the time-series of displacements of the paddle.
so it is arbitrary? If I am generating first my spectrum, to then reconstruct my time series, then I need to decide first how long would the time-series be, and the corresponding spectrum would be the same, independently from this length? 
I want to enjoy this sub, learn new things and enjoy conversation. If you have to continuously defend an opinion that isn't popular, you should reconsider who and what you're advocating for. I stand by my original assertion, you *are* toxic. Edit: Edited to tone down my comment.
Well, when putting more effort in the question than the OP him/herself (seriously, I made mock-up scripts etc. to see what kind of error codes their own suggestions would bring up) and then they say this: &gt; Yes i am lazy :), but FYI it is for my friend. I do not have installed matlab on my computer. I found online compiler for matlab but i did not try it yet. Maybe i will take some time to study and help him. I hope it will be easy. They kinda deserve to be downvoted to oblivion. I can't speak for other people but when I'm trying to help others I also want it to be fun for *me*. I like (teaching) challenges and I'm aiming for the comment that says "Oooh, so **thats** how it works". But to achieve that people have to put in effort too. Believe it or not it can take quite a bit of time to give a helpful or thought out comment I'd rather put the effort in someone that actually does something with it. If you check the new posts you'll see that there are barely any questions downvoted to the negatives (though I think that might be partly because the downvote button is disabled). But more importantly: Almost every question has at least 1 comment on them! Isn't that what counts? Who cares about imaginary internet points. They are more a convenient way of sorting for me.
Hmmm... Well doubling your frequency spectrum is most likely not the correct action. Your frequency spectrum contains all the information needed and doubling it likely causes problems. If the frequency spectrum is complete then the frequencies below your Nyquist frequency (e.g. N from 0-256, corresponding to zero and positive frequencies) and the frequencies above Nyquist (e.g. N from 257-512 corresponding to negative frequencies) are all the information you need. The other option is if it truly onesided which might be the case, you need to mirror it then shift the mirrored frequencies (corresponding to negative frequencies) to the end of the original frequency spectrum. An inverse discrete fourier transform, like the IFFT, will then output a correct time series. In either case the times are directly related to you Nyquist frequency by the sampling theorem and your sampling frequency.
In the command window, type... tmtool Do you see your device listed anywhere? 
This seems like a great way to do it. I will do my best to understand what´s going on. Thank you.
I don't like the default light colour scheme in MATLAB, so I customised the colours to a nice dark scheme. Then I was annoyed that I couldn't quite replicated the same values on my various installations of MATLAB, so I found out how to automate the setting of the colour scheme [here](http://undocumentedmatlab.com/blog/changing-system-preferences-programmatically). As time went by, this evolved into a full colour scheme management package, which I've now released. It has lots of features and I made a few different colours schemes based on ones from Gedit so there is an initial selection to pick from. I hope people find this useful and helps improve their MATLAB experience! If people have already made their own colour scheme or have implemented a theme from a different editor for their MATLAB installation, you can add this to [matlab-schemes](https://github.com/scottclowe/matlab-schemes) with a pull request.
Then you should reconsider who is "toxic". This is not a homework cheating sub. 
Amen. 
Sounds like a mod just removed the downvote buttons, so hopefully that helps a little. 
Lol okay. 
I completely agree with your statement, the issue which I probably should have included on the original post was that I have inherited this code and it wasn't designed with much modularity in mind.
Mathematicians are by nature snobby people. Even worse are the ones who have a couple of years of experience using math software. It doesn't help the situation when redditors ask ELI5 questions
I don't know what you're talking about. I'm not the one defending an unpopular opinion. You're the one defending the type of lazy questions and attempts to cheat on homework which are routinely downvoted here. If you're defending "hey, do my homework for me?" you should reconsider who and what you're advocating for. 
Sure. That makes your job more difficult, but I'd say the same principles apply. Find a chunk that should be in a function, copy/paste it into a function, and use that function in place of the original code. Of you miss a few input or output variables, you'll get an error, so fix the error. Repeat until there are no more errors and the code is sufficiently broken down. 
Might this be easier if you cast your numbers as an integer class such as `int32`? That way you could vectorize your code. 
In the script, if you put the cursor on a variable, it will show all uses of that variable as gray lines on the right hand side of the editor. This could help identify variables each function will need.
You can show a partial legend, if you set the legend programmatically. Whenever you plot something, there is an optional return value, the plot handle. Always get in the habit of returning this and saving it off. This allows you to manipulate the plots after they've been plotted. One of the way you can do this is in the legend. If you look at the [legend command](http://www.mathworks.com/help/matlab/ref/legend.html?refresh=true), it has a version with two inputs: the plot handles and the strings of labels. Thus, you can do something like this: legend([h2,h1,h3], {'Data 2', 'Data 1', 'Data 3'}); And it will create a legend in the order of h2, h1 and h3- if you don't want h1 plotted, then just leave it out: legend([h2,h3], {'Data 2', 'Data 3'});
Yeah I tried that but MATLAB can hardly open the file and that becomes tedious when looking through 20k plus lines
Fair enough, it was somebody else using the word "toxic". If you think it's bad to have the attitude that people should at least make some minimal effort to help us help them, fine. It's an attitude you will find common in life, so at some point you'll have to adapt, like it or not. Personally, I consider it a bad attitude to come asking questions while refusing to even read the error messages that are right in front of your face, or the documentation that's readily available, and then expect a group of good Samaritans on the internet to just give you a fully functioning solution on demand. Willing ignorance and abject laziness are not really admirable qualities, and it's bizarre to me that there are so many defending such behavior. 
You can also copy and paste xy plots between figures- I've always found that useful...
Excellent. That seems like a fairly recent development, we used to have to use hggroup to do things like that. 
so instead of if "answer"== put if "v"== ?
Actually I got it, thank you!
I know it was in at least 2013a... but that was the first version I tried it on. 
I am amazed by the expressive power of matlab syntax. One example I recently faced is calculating a matrix of correlation coefficients. This can be done in one line in matlab! Which blows my mind. If A is a matrix full of column vectors that you need to calculate correlation coefficients between each vector. Then you can execute this one line and get the results you need. p = A'*A./( sqrt( diag( A'*A ) ) * sqrt( diag( A'*A ) )' ); Here is the same equation in 3 lines in the interest of adding clarity to the above expression. R = A'*A; v = sqrt(diag(R)); p = R ./ (v * v'); All hail matlab! Perhaps there is a better way of doing this? I'd be interested in other ways. Please post. 
No need to use nargin here varargin{1:nargin} Just pass everything instead (same result, but shorter and more obvious): varargin{:}
This seems interesting, thanks for sharing. Question - the way it looks, the top scoring quant system 99.98% on 6582 days trading. Is that true, and how could anything beat that? 
You want a [while loop](http://www.mathworks.com/help/matlab/ref/while.html?refresh=true). Your condition would be the size of your term. 
Finally! A question from the assignment. This question is a bit too easy to answer directly. You would utilize loops to do some functions an arbitrary amount of times. You can control how this loop works. What kinds of loops are you familiar with? 
So many avenues of the universe to explore but it seems only certain fields go off into the unknown as regularly as mathematicians. Intrepid folk; mathematicians, maybe some feel rushed by their mortal lifespans. No room for chit chat. 
Kareokee suite using Fourier Transforms to remove a singer's voice!! Or a tic tac toe AI
I tested the performance with and without the extra garb. The code runs slightly faster without the extra junk. [Here's the code I used](http://pastebin.com/R0dyAXgp). I reversed the order the two loops ran, to make sure it wasn't just an artifact of being the second loop to run. It's not. [Here is](http://i.imgur.com/gUK7gax.png) the cumulative time for the first run, and [here is](http://i.imgur.com/rysGZwb.png) with the loops reversed. As you can see, there is not much of a performance difference, although, in both cases the code without all the extra garbage is slightly faster. You win.
He probably finds your code difficult to read since you aren't using the same syntax as him. (Just a bit to reflect on). Though I have to admit that this looks quite... odd.
Have you tried anything? Day 1 with Matlab was, for me, typing simple expressions in the console and seeing what would happen. Read the documentation too, it's very good. When you're ready, open up an m-file and just write some commands. This is a script you can call to repeat those commands any time, as if you were typing them into the console. 
no, I didn't.. our teacher didn't told us on to work on MatLab.. he just said "google it, you'll find easy tutorials"
1. google "matlab tutorial" 2. spend couple hours going over said tutorials 3. ??? 4. profit
This is kind of common advice, and something you can do even without knowing MATLAB- MATLAB can't do anything you don't know how to do. So step 1 is always (always!) write out your algorithm in words and math. How would you solve this with pencil and paper? If you write out your algorithm, then we can more easily help you convert it to MATLAB code. If you can't write out your algorithm, then there is no chance in converting it to code. 
The thing is I don't know where to start and which tutorials will lead me to get the knowledge I need to solve this question.
First off, I highly recommend not doing the bare minimum - it'll leave you just as confused as when you started and you won't have learnt anything. So, go through (for example) the first few steps of MathWorks' "Getting Started with Matlab" tutorial - you won't get anywhere unless you have a basic understanding of how matlab, and indeed programming, works. Come back if you can use matlab and still don't know how to implement your specific requirements.
Well that's just terrible... I'm excited to see what MATLAB fixes next which is currently terrible. 
Thinking about this, I wonder if a better credo is &gt; Matlab (or insert language here) can (will ?) only do what you tell it to do Sounds obvious but I think it makes the point that if you can't tell it what to do (ie, invert the matrix), it can't know what the next step is. If you do not know what you want it to do for a Monte-Carlo simulation, then it can't do it. I don’t know. Just philosophizing out loud I guess...
This is the kind of content I want to see on this sub! 
A couple points... * Have you defined k? * Try using a larger plot point (for example, plot(x,f,'ro'); ) * Do you need to use a loop to plot the function for each value of O? You could accomplish the same thing in a single line by using an array/range of x values. For example &gt;x = -100:100 &gt;plot(x, x.^ 2 .* cos(x) * exp(1./x)) 
No problemo. :) Play around with it. The k denotes colour. k is black. b is blue. r is red. There are probably others. Change the dot to a hyphen and it should come out as a joined line graph iirc. Read the documentation on the plot function.
I think your problem is with your grid. You want a 35 by 35 grid (an odd number). But if you check the amount of x and y coordinates you have you see that it's actually a 36 by 36 grid! (which you were wisely compensating for in your for-loops by adding "+1" :) ). If you want to be 100% sure that you get a vector with N steps you can use the function "linspace". The thing with these types of things is that your grid has to be perfect. If it's not you can get silly anomalies.
Ah I was wondering what the k was! Yeah I'm looking into plot functions now. Going to add a legend in too. I'm just relieved to finally have a working graph.
Mjeah, that's just plain silly. He should be professional enough to accept that some things are very personal (like writing code) and that you shouldn't force those habits on others (especially if you can't really find a valid argument to do so).
What have you tried? Have you looked at the [documentation](http://www.mathworks.com/help/matlab/ref/datevec.html#btgyxi5)? I would recommend typing `doc datevec`. That's what I did and found something that works. &gt;&gt; datevec('11/12/2005 0:00','dd/mm/yyyy HH:MM') ans = 2005 12 11 0 0 0 &gt;&gt; datevec('11/12/2005 12:01','dd/mm/yyyy HH:MM') ans = 2005 12 11 12 1 0 Seriously, the documentation in Matlab is great. You can search for keywords and find all kinds of neat things.
What have you tried? Are you familiar with the `title` command? Here's one way to achieve what you want: ax(m,n) = subplot(5,5,(5*(m-1)+n)); plot(ax(m,n), ...) title(ax(m,n),sprintf('Plot [%d , %d]',m,n)) Alternatively, you could use the `text` command to place a label directly on the plot. Try typing `doc text` or `doc title`.
I tried to do so but I couldn't figure out how to convert the current index of my loop into a string. I guess one way to do it would be to manually add every number to the plot afterwards?
I mentioned above, but I tried adding text to label the row and columns if either index of my for loops is 1, but couldn't figure how to print the correct index. I'll also add that I'm a complete Matlab noob and don't understand your suggestion. So ax grabs the axis handles of the subplots or the entire 'grid' of subplots? And then plot just plots the equation on the set of axes defined by ax (so this is the subplot axes I suppose?). Title adds the title on top of each subplot? I tried running what you suggested but I'm using ezplot and it bugs for some reason when I try to do ezplot(ax(m,n), f(x,y)). It seems like this puts a title on top of each subplot, but I was looking more for just a row on top that gives the value of m of the column and a column on the left that gives the value of n for that row. If I can get sprintf, which from what I can gather converts things into strings, to work, then I could probably just use text to place the labels next to the first row and column of subplots. Otherwise, maybe there's a way to just dump these plots into a table of sorts and just add a row and column? Sorry if I'm unclear, but I'm really new to this. Thanks for your help *Edit: Figured out how sprintf works and managed to use text to place labels.
Also, there's no increment operator in matlab, and you can't have an expression like 0&lt;i&lt;10 (you need to &amp;&amp; two expressions). ninja edit: next time, say what line the error occurs on.
no this is just a plain ol' table. this is the table we grab, its a CSV file from this website https://bit.ly/egr115p09data row names are ID numbers first column is the students first name, 2nd column is students last names then it proceeds with "A01 A02 A03" for the columns (FIRST LAST A01 A02 A03) &lt;-- those are the initial column names so i need to add another column named "A04" when i first run it, then when i run the script again (file will save) it will need to add "A05" to the columns. so you will get "FIRST LAST A01 A02 A03 A04 A05" if you run the script twice. hope this helps clarify?
Assuming you don't mind the value of b changing with each iteration... m = [1 2 3 4]' for i = 1:length(m) b = [0 0 m(i)] end
I do need to save each value of b. The following step I am doing x=A\b (where A is a matrix) and need to solve for the four different x vectors. Sorry, I should have stated that originally. 
This should work for you then, m = [1 2 3 4]' b = []; for i = 1:length(m) b_temp = [0 0 m(i)] b = [b; b_temp] end Which will output 0 0 1 0 0 2 0 0 3 0 0 4 And then to access a particular row of the b you can just use b(i,:) where i is the row number.
Floating point (such as Matlab's `double`) representations of fractional numbers aren't generally exact (e.g., binary equivalent of repeating decimal for decimal representation of 1/3). In particular, 0.1 does not have an exact representation in binary. Trying to do an equality test on numbers that effectively contain rounding errors is probably why your test cases aren't working. Either: convert to integers (e.g., if all your values for comparison only contain at most one decimal, multiply everything by 10 and round/cast to int for the equality comparison), or test that the two numbers are "equal enough"--something like `abs (x-y)&lt;=1E-10;` (or, for fancy dynamic comparisons, use `eps` to set a limit based on the least significant discernible change in the float value). Tl;dr: don't use `==` to compare floats. 
This is likely it. I tried putting the code above into a script and discovered, when x = y = 1.2, that the following occurs: K&gt;&gt; location - ob(j,:) ans = 1.0e-15 * 0.2220 0.2220
OP, in addition to what /u/phogan1 is suggesting you could also fix() or floor() to round off the little edges on your floats. I.e., change to: ob = fix([testx; testy]'*10)/10; and location = fix([x y]*10)/10; Also, a small pet peeve of mine: for j = 1:length(ob) Don't put a functional call-- length() in this case-- in your loop condition; it calls length() on every iteration. Declare a new variable instead. lengthOfob = length(ob) for j=1:lengthOfob I know in a small loop like this it doesn't matter much, but this is a habit you should get into now. Also, the issue of not preallocating critpoints is a bigger one, but resolving that is more complicated so learn that later.
I don't think there is a way besides hand counting. But, also check out profile. Type: &gt;&gt; profile on &gt;&gt; run your code &gt;&gt; profile report
It's not a good idea for us to give you straight answers to your questions, without some evidence that you're learning for yourself (hopefully you can see why). A minimal working example would be a place to start so we can see the code you currently have and what you've tried already. &gt; So ax grabs the axis handles of the subplots or the entire 'grid' of subplots? `ax(m,n) ` is a 5x5 matrix of subplots. For example, to plot on the m=1, n=1 plot (usually top left corner) you would call: plot(ax(1,1), ...) &gt;Title adds the title on top of each subplot? Sort of. It will add the title to subplot "m,n". You would have to call this function in a loop. If m=1 and n=1, the title will be put on the same plot I mentioned above. &gt;I'm using ezplot and it bugs for some reason If you want us to help with this you need to be more specific. &gt;It seems like this puts a title on top of each subplot, but I was looking more for just a row on top that gives the value of m of the column and a column on the left that gives the value of n for that row. A-ha. Perhaps what you want is more like the example [here](http://uk.mathworks.com/help/matlab/creating_plots/placing-text-outside-the-axes.html). In this case you would have to create an extra set of axes for each existing subplot (but only if it's the first column or first row, to look like headers) as a frame for your text to exist in. Instead of the `descr` cell, just use your sprintf string. &gt;sprintf, which from what I can gather converts things into strings, to work Basically yes. sprintf('Plot [%d , %d]',m,n) This is what we call "string formatting". The first argument is the "format string", and the second and third are the required inputs. The `%` symbol tells the interpreter "what comes next will be substituted for one of the arguments afterwards" and the `d` tells it to look for an integer. Then, for the first `%d` it tries to put `m` in its place, then for the second it tries to put `n` there. This is a very powerful tool and when used proficiently it can be very useful. In your case, you may want to simply re-write it twice, once for the first row: e.g. sprintf('%d', m) and once again for the first column. Has that helped?
Can confirm. This is the best way I've found for doing this type of operation 
The function is the problem. You can make your algorithm more robust by tracking the function value and only doing half the normal step when it fails to decrease.
Yep, repmat does the trick. fprintf(['My strings: %s ', repmat(', %s', 1, length(A)-1), '\n'], A{:}); It's clunky, but it works as long as A is non-empty
Thanks for sharing! I just suscribed to her blog :)
Thank you for clarifying it
What do you mean by "problem"? Can you give an example of the sort of thing the professor is looking for?
By problem, a small inconvenience that needs to be worked around in industry is what is meant, I suppose. Absolutely! One group is using chemical engineering and wants to write a code that determines the concentration of a solution in a vessel as more liquid is being added (at one rate) and liquid is being drained (at a different rate). However, the professor said that this could become more complex than what she was looking for (end of semester grade boost). The professor's example was finding the parameters to boil X number of potatoes. 
That example is going to be a lot less than 100 lines, but I think I get the idea. Some ideas: 1. You are given a 2D, black-and-white image in the form of a 2D matrix of floats. You are also given the upper-left coordinate and lower-right coordinate of a region of interest of that image, and a target intensity. Find the mean intensity of that section, and scale all the values in that image so the intensity of that section is equal to the target value. 2. You are given a recording with 60 Hz noise (noise from an AC power line). Filter out the noise while leaving the signal as intact as possible. 3. You are given a recording over time, such as a neural spike train, EEG, EKG, etc. You need to find the time points where an event occurs (such as a heart beat) despite the fact that the mean value and amplitude of the recording both drift randomly over time (they drift over longer time scales, say the 10-20 event range). 4. Create a function that generates some random data for testing, such an EKG, EEG, neural spike train, or other repetitive event. You should use convolution to combine a template for an individual response, some random event times, and some random variations (such as noise or variations in amplitude) to create a test signal that you can be used for testing software or hardware. This can be done relatively simply using convolution. 5. Your signal is too big to fit into your hardware's memory. You need to send the signal in pieces, and keep track of those pieces. Convert your matrix of data into a 2D matrix of a given length, and given a start and stop index of the original data set, return the row or column containing that start and stop index and the start and stop index relative to that row or column. You need to pad the array if it doesn't fit cleanly in a 2D array. Throw an exception if the start and stop are in different rows or columns. 6. You are given recordings from five sensors. Events that occur in only one sensor are noise. To be safe, return any event that occurs in 3 or more sensors.
Wow. Thank you so very much for those ideas. Those all sound like excellent ideas, definitely ones that would work perfectly for this project. I will run these by my group and see what their thoughts on these are. Again, thank you so much!
What have you tried? How would you do this on paper without Matlab? Really, you have to give a little (or a lot) more than you are here... But, I will try to nudge you in the right direction. Or at least how I would do it * First, write the equation as a simple solution to `pi` * Write a function that will return that `n`'s contribiton. For example, if the function was `pi = sum n^2`, your fuction should be `n^2`. Call that `Fn` or something * Pro tip, you can define a function in line as something like `Fn = @(n) n.^2;` (make sure to use `.^` and `.*` not `^` and `*` * Now you can define `n = 1:100` or something * Now, you can define your approximation to pi with `cumsum` Actually, you won't be able to do what I just said with that function. You will have to solve for `pi^2`. I hope this helps. But in the future, please show what you're trying, etc. And explain how you would do it on paper. Matlab can only do what you know how to tell it to do! 
My problem is not with the lack of the homework question. It was with your lack of showing any effort to do it yourself 
Line 16 of your code is wrong.
You have confused (an archaic, horrible) mathematical notation for what is actually happening. There's no function named sin^m . There is a function sin(), which you want to calculate and then raise the output to a power. sin(10).^m
No that didn't do much./: Thank you guys though!
Wow!?!? Really!?!? Honestly, I am truly sorry that I spent some time trying to help despite your lack of attempts. Good luck in a real job. 
What exactly is it doing, or not doing?
 fprintf('Here they are: %s \n', strjoin(d,', '))
Cheers, will define a variable for length now!
&gt; Don't put a functional call-- length() in this case-- in your loop condition; it calls length() on every iteration. Declare a new variable instead. That would be true for a while loop. In a for loop it is evaluated once and used to create the array of values that are iterated over. It's perfectly reasonable in this case, although if you're calling length(ob) anywhere else you might as well save it to a variable anyway. The real sin is using length where you should use numel(). 
Just change this line: averageCorrect=mean(data(:,10)) to: averageCorrect(s)=mean(data(:,10)); %Note the semicolon and then add this after your end: averageCorrect You may also want to consider initializing averageCorrect using zeros() or something similar if you know it will ever be a large array.
You could set them to the min or max value in the image. In some cases the behavior when you set a pixel to Nan is convenient. 
interp1 should do this just fine. 
This is the right answer. 
At the moment I need to get a more refined z value given a small set of x,y's which lie in between the current x,y's so I just used my function to get a good approximation of the z-value. In the future I might need to make a "surface" (and possibly query it) so my method would be the wrong way of doing that (as you've pointed out). So what other ways are there? 
Perhaps a nested printf statement? sprintf('Here they are: %s\b\b \n',sprintf('%s, ',d{:})) the double backspace is to overwrite the last comma with a newline.
Linspace should help with generating Phase degrees that are equally spaced 
cool - thanks! gonna try this out as soon as I can :)
This is very impressive. I use matlab quite a lot - yet I'm not too great with stuff like this. Do you have any tips or resources?
It isnt clean at all unfortunately. It is much narrower at the top and wider at the bottom, with a hiccup near the middle :/
-Think logically about the problem. See if there are patterns etc. you can use algorithmically. This is what I did to generate the *Ind* variable. -Remove "magic numbers". The only hard-coded numbers should be startup/config parameters, with everything else derived from them and saved as intermediate variables. -Avoid *for()* loops. I generally can write whole programs without a *for()* loop. The exception being where you need to iterate on previously calculated stuff; like time stepping in a dynamic physical problem, non-linear solvers, etc. -Avoid non-compiled function calls at the center of tight loops (some Matlab functions are slooooow, poorly implemented, or overly general and bloated). As a corollary, user-created functions that make use of deeply nested recursion tend to be bad. -Use and abuse linear algebra techniques. Matlab is built on top of LAPACK and BLAS; vectorized programs are faster because of this. -Anytime you find yourself using things like *repmat()*, it is very likely you can use *bsxfun()* instead. The result will be more compact, faster, and more memory efficient. (*bsxfun()* only works for elementwise matrix/vector operations; if you want to do matrix/vector products you should use the excellent [*mtimesx()*](http://www.mathworks.com/matlabcentral/fileexchange/25977-mtimesx-fast-matrix-multiply-with-multi-dimensional-support) or [*MMX()*](http://www.mathworks.com/matlabcentral/fileexchange/37515-mmx-multithreaded-matrix-operations-on-n-d-matrices) libraries.) -Peruse [Undocumented Matlab](http://undocumentedmatlab.com/) and take a look [here](http://ubcmatlabguide.github.io/html/speedup.html). -Apply all this in a non-trivial program where CPU speed or memory are limitations to get some experience. You can get away with slowly and poorly adding 1+1, you can't get away with that for [non-trivial](https://youtu.be/113tGtYblDA) stuff. 
 yplot=polyval(pp,xplot); %returns the value of a polynomial of degree n evaluated at xplot Correct. That line evaluates polynomial *pp* at points *xplot* . If that's what that line does, then what does this line do? yin=polyval(pp,xin) (I corrected an error in this line - it should be xin, not xx). What are the values of *xin*? How do they compare to the original *x*? What's this process called? *Hint: the variable is called x_in for a reason* For the part below that, look up what the function polyder does
When I copy and paste the code exactly into matlab, I get this figure: http://imgur.com/sqjTM1x The red line seems to fit the blue data pretty well. It's not y = 0. Can you double check you copied correctly?
Yes thanks for your response, I tried your code and it works fine too, but I need to supplement the x and t values with my actual data and cant see where Ive gone wrong. Ill keep looking at let you know.
Could the problem be that my x and y data are both column vectors? should I change them to row vectors?
Hey, sorry about my last comment, I think I did something wrong. By x containing the sinusoidal trending data do you mean my y values?
yes... I mean your y values. I used x because I admit I come from a signal processing background, and t and x are my goto variables.
I don't think it's possible. In general, the function can output different things depending on how many outputs are required when it's called (by checking nargout inside) - so the interpreter must then know in advance how many outputs to request whenever it calls the function.
Convert Ak back to uint8 before using imwrite().
AHHH too easy. Thanks lol. For some reason i thought round converted them to ints -_- Thanks!
Yeah that looks like the best bet. Thank you!
On each run, you can access the final (end) column of the table and update its name via table properties. http://www.mathworks.com/help/matlab/ref/tableproperties.html?refresh=true
Not entirely sure what you're aiming for with this, but maybe this would be helpful. It's pretty late where I am and I'm not sure how your code works but this is a small stab at it. x = char(Cell(length(Cell),1)); y = num2str(str2num(x(3)) + 1); z = strcat(x(1:2),y) I'm assuming the naming operation would happen before the new cells are added. The first line takes the most recent column name from a cell and assigns it to an arbitrary variable. The second line takes the third value in the char and converts it to a number, increments it, and then converts back into a char. The third line then concatenates the first two characters from the arbitrary char with the new incremented value. It's kinda brute force but I'm not really sure what else you're going for with this. 
"Error using text Invalid parameter/value pair arguments"
That's because text() is a built-in Matlab function. 
One option is to put it in a while 1 loop, and make one of the choices execute a break. Then the menu will reappear after every choice, and end when the button break function is executed.
What have you tried?
[Can you be more specific?](http://www.catb.org/esr/faqs/smart-questions.html#intro)
Thank you. Mainly I was wondering how I could load a set of different mat files (cell arrays) into a struct that would contain of of those in order to later call those in loops.
I've encountered this exact issue before. What I did was pad the start and end with additional values by extrapolating, run the filter, then take out the padding. Results in the end points having more reasonable behavior after filtering
You can't concatenate a string on each run? I'm not sure I understand
Hi! I figured out what I was doing wrong. I was starting my graph from 0 on they y axis and ending it on 1 on the y axis, so the gradient was wrong! Ive changed it and now it works great thanks :)
That will make the result real, not necessarily correct. 
Well, to know if it's correct we'd have to know more about what exactly they wanted to calculate. But we can extract real and imaginary components with simple real() and imag(), and then manipulate those values however we want. Norm() should give us the mod of the complex number no?
I generally use abs() for that, but norm() might do it too. Regardless, manipulating real and imaginary values is sort of pointless when the expression is supposed to give a real value. If you bought a thermometer that said the temperature was 27 + 6i degrees, you'd say it was wrong, because temperatures are real valued. You wouldn't try to study the complex numbers and figure out how to reconstruct a temperature from them, which might not even be possible. Programming by the method of "keep fucking with it until the output looks good" is a terrible practice. It leads to scientific results being wrong, space probes crashing into planets, and industrial accidents. If something is giving impossible results, fucking fix the problem, don't just add more code until you've hidden the errors. 
Found the solution I was looking for on Matlab's forums. Thanks anyway. &gt;text = Pancakes for Fran &gt;num2cell(text(lower(text)&gt;='a' &amp; lower(text)&lt;='z')) &gt;ans = 'P' 'a' 'n' 'c' 'a' 'k' 'e' 's' 'f' 'o' 'r 'F' 'r' 'a' 'n'
That's a terrible way to do that. You're taking an array and putting each element into a cell array. This does nothing for you besides make things slower and more complicated. Why not just use the answer you already got, which was correct and works fine? Also, text() is still a Matlab built-in function. Stop naming variables the same as built-in functions. It's a really terrible idea. 
I'm new to x2go and supposed to work on Matlab. I use this by connecting to my university server. I was wondering how can I export my previous matlab files. I wish to run my old programs but Don't know how. Can someone help me ASAP. 
I'm supposed to run my previous matlab codes using x2go but i don't find any ways to import the old files. Can someone throw some suggestion ?
The code is simple its simple an import code that looks like: pdbstruct = pdbread('2CYU.pdb', 'ModelNum', 1) that is the code and it provides the matrix information like this http://imgur.com/MHQSowY Now what the numbers in the sesSeq column are the ones that will identify a matrix with the x y z columns being the 3 columns in the matrix
Sounds like a job for logical indexing. idx = pdbstruct_model.Model.Atom.sesSeq == 2; x = pdbstruct_model.Model.Atom(idx).X; y = pdbstruct_model.Model.Atom(idx).Y; Seriously, you will get much better answers if you show us what you have tried and why it doesn't work. Good luck. 
Okay, that's still not correctly formatted. How hard is it to put four spaces before each line or in the Maltab editor to select all and press tab? What do you know about the LMS algorithm? How would you solve this problem with a pen and paper. 
Thanks very much makes perfect sense, appreciate it.
Please show me what you have tried. It is not clear what exactly you are asking. Are you having trouble parsing the data? Have you read it into a `cell` array or `struct` array? Are you trying to write the data back out to a csv?
You can keyword search the documentation. 
Hey thanks for the reply. When I manually search my data I find these 3 points. -22.64958334 -22.65181277 -22.64818762 Where the middle one is the minimum Im looking to store in minima, and the two eitherside should fit the conditions set.
First off, is there a reason you're not using the "min" function? It would do this for you. Second, is ybulknew a vector or an array? If you're intending to go through row by row checking, you need to use (i+1,:). But even so, you'd be finding the minimum of each row and storing it? I'm not sure what you're trying to do
Hey thanks for your reply. There are several minimums im looking for and they happen at different points, like [this](http://i.imgur.com/thUvYef.jpg). ybulknew is a column vector.
The documentation is your friend. There is an example in there for [continuously generating data](http://www.mathworks.com/help/daq/ref/startbackground.html). It could be modified to do what you want. This will introduce you to the concept of [events and listeners](http://www.mathworks.com/help/matlab/matlab_oop/events-and-listeners--concepts.html), two very powerful Matlab features. Were I to do what you want, I would try something like this, though I've never used the Data Acquisition Toolbox. function myWaveform(s,data2kHz,data4kHz,Fs) % assuming data are less than five seconds long Nacc = length(data2kHz); N5s = round(5/Fs); addlistener(s,'DataRequired',@dataReqCallback); s.queueOutputData(data2kHz); s.startBackground(); function dataReqCallback(varargin) if Nacc &lt; N5s % you could make this even more fine-grained if you want % that way you could queue a frame of data that potentially had % 2kHz and 4kHz data. data2Q = data2kHz; else data2Q = data4kHz; end Nacc = Nacc+length(data2Q); s.queueOutputData(data2Q) end end
When I remove the semi colon at the end and dump the answer in to the command window, It returns reveral thousand outputs. Maybe this means the conditions are true for all of the values? But that doesnt make any sense because theyre different.
I wouldnt be finding the minimum of each row. Id be checking for minimums like in [this](http://mathworld.wolfram.com/Minimum.html) case. If you look at the left most diagram it is the same thing. Id only be storing the points that these conditions are true for.
This is good, because it demonstrates some nifty techniques for projecting signals onto various bases, something a learner might not appreciate if just plugging and chugging with `polyfit`.
You do what you did to make the menu appear in the first place immediately after the menu selection was made?
Is it ever beneficial to use &amp; over &amp;&amp;? I thought &amp;&amp; is more efficient since it doesn't even check the second argument if the first argument is false. That's what I've heard anyway. 
That's true for scalar conditions, times above is expected to be a vector.
Oh, so the advantage is that &amp; takes vectors? Doesn't &amp;&amp; do that too? I'm not at my computer right now so I can't check. 
THANKS A LOT!! :D
Yep. size(h_img) will show you that the 'image' you're trying to feed roifilt2 is a 1 x 1 handle. Instead, use after = roifilt2(h, original, mask) to filter the actual image. The image and binary mask should be the same size in the case. Are you filtering a color image? You may have to also filter each color channel in addition to fixing what I mentioned above.
Does the "legend" command not work? I can't remember exactly how to use it but if you look up legend on the help pages there should be info.
This is what I have: V is the [X], m is [m], and y is x(0). The answer I get is q = [0.6011; 0.9228; 0.6011] I guess I'm just not sure where I'm going wrong since the first value of my q array isn't wrong but the others are. Also, I'm unable to access the doc (my school owns the license). Thanks in advance for any insight! clc clear m1 = 2; m2 = 3; m3 = 2; m = [m1,0,0; 0,m2,0; 0,0,m3]; k = [2,-1,0; -1,2,-1; 0,-1,2]; [V,D] = eig(k,m); StoreV = V StoreD = D; mnc = min(V,[],1) ; for j=1:1:3 for i=1:1:3 V(i,j) = V(i,j)/mnc(j); end end syms x y = [x;0;0]; q=StoreV*m*y
As long as you remember that an apostrophe is the transpose operator in MATLAB, everything works as it should. You don't even need to bother coding the last vector, since all it does is extract the first column of **X**^T **m** and multiply it by x*_10_*. X = [0.3006 0.5 0.3996; 0.4614 0 -0.347; 0.3006 -0.5 0.3996]; m = diag([2; 3; 2]); X'*m % This is the matrix whose first column you want.
Ah, I was missing an apostrophe! Thank you! One question branching off that, I end up with q = [0.6011; -1; -0.7992] but it should be q = [0.6011; 1; 0.7992] Is it safe to assume I should be dealing with absolute values?
You can probably use structfun 
Sorry if my work was confusing; the eigenvector part was an approach for a separate section of the problem (unrelated to this question) mandated by my vibrations professor. 
Thanks, I'll give this a shot after lunch! My Matlab knowledge comes entirely from informal self-teaching. I've come a very long way but there are still some things that intuitively seem like they should be straight forward but they get me really tripped up. I read/heard somewhere to avoid for loops whenever possible, especially when the end goal can be accomplished with clever indexing. Edit: Well it only took like 15 seconds to check, so I did it before lunch. It definitely works! The syntax here (anonymous functions?) is one of the areas of Matlab I'm still pretty unfamiliar with. But this will be a good reason to learn!
Because `10*0.01 == 0.1`. Your rect pulse has ten samples that are equal to one. So the DC component is just the sum of all the samples, which gives you `10`. Then you multiplied that by `dx` which is equal to `0.01`. That is why the peak of your `sinc` function has an amplitude of `0.1`. 
It's possible to write it as a one-liner, but it's always preferable to make the code readable instead of concise. Nevertheless, here's a one-liner for posterity: A( arrayfun(@(A) length(A.a1) &gt; 3, A)) 
Thank you! I am still not getting the right answer, but at least my output is functioning properly. I am working on it right now but wanted to let ya know! Edit: COOLEST UPVOTE BUTTONS EVER!!
As a general note, depending on the version of MATLAB and the functions used, the various *fun functions (array, cell, strict more specifically) can sometimes be slower than the explicit loop. While generally more concise than the loop it's worth keeping in mind and testing based on your application. Edit: Say what I meant rather than what I said
Also see the sign function. By these powers combined, you should be able to rule the world
So, you want to find the element with the maximum abs value, and then get the actual value of that element? Try `arr(abs(arr) == max(abs(arr)))`
Yes, but the second output of max() tells you where I the array the maximum value was located. So find max(abs()) and use that. 
that worked! thank you!!!
That's not a general rule at all. It's true sometimes, is very much not true I others. bsxfun() is a good example. 
One important use for arrayfun is for performing elementwise operations on arrays executing on a GPU. In these cases, arrayfun provides a massive performance increase 
With these type of things the first thing you should do/think about is: "Can I do this on paper?". If you can do that then it's relatively easy step to convert it to code (since you've proven that there are no paradoxes!). So do what you want on paper first (not the whole thing, just 2 iterations or so). An added tip: You can use the OR and AND operators ( | and &amp; ) for a while loop to input multiple conditions. For example: while no_iter&lt;max_iter | epsilon &gt; error %yourcodehere end which might help. 
You're right, it was poorly worded and I have updated it to what I meant to say rather than what I actually said. Again it's highly dependent on the application and MATLAB version used. It's not like I pulled this out of thin air, it's well documented behavior ([here](http://www.mathworks.com/matlabcentral/newsreader/view_thread/304894), [here](http://www.mathworks.com/matlabcentral/newsreader/view_thread/253815), [here](http://www.mathworks.com/matlabcentral/newsreader/view_thread/253596), [here](http://www.mathworks.com/matlabcentral/newsreader/view_thread/251700), [here](http://stackoverflow.com/questions/18284027/cellfun-versus-simple-matlab-loop-performance), for example). It's certainly becoming less true as the compiler and computation engine improves but it's still a factor for consideration. I'd like to avoid saying 'x is bad, always do y' and rather make people aware of advantages and disadvantages of each approach so they can make smart decisions based on their application. And test things, the engine is constantly evolving.
I didn't even think to use simulink! Good idea! Would that be simpler to implement than the code, in your opinion?
you can insert a backspace with a '\b'... holy wow. can i give you a million upvotes or am i limited to one?!?
This is when I think you need to be ab it hacky about it. It isn't elegant, but you should design an arbitrary legend with the correct marker sizes. I will leave the details to you, but the following snippet shows how to make an arbitrary legend clear x = linspace(0,2*pi,60); % Fake plot hold off h(1) = plot(x,x,'-sr'); hold on h(2) = plot(x,x,'--'); h(3) = pcolor(zeros(2)); legend(h,'one','two','three') % Main Plot set(gca,'NextPlot','replacechildren') ; plot(x,sin(x)); hold on plot(x,cos(x));
This is a great tip! I personally love the colors that come from this. One of the first things I did when moving to Python was to also recreate this function (though they have the continuous colormap built in too). I agree that the colors of the new plotting engine are nicer than the old ones, but I still prefer `linspecer`. In general, colorbrewer is a great tool when you need colors for specific things such as looking good when printed black and white. On that note, I feel like people often feel the need for color in their plots when really, black would just look better! Maybe make everything else grey to compensate. But I also may be old-school and prefer some of the older looking plots.
I have done something similar in the past: function args = set_args(argin, varargin) if iscell(argin) argin = args_to_struct(argin); end args = args_to_struct(varargin); names = fieldnames(args); for name = fieldnames(argin).' if ismember(name{1}, names) || isempty(names) args.(name{1}) = argin.(name{1}); else error('set_args:args', ... sprintf('Invalid parameter name ''%s''.', name{1})); end end end function args = args_to_struct(args) if isscalar(args) args = args{1}; else args = reshape(args, [2, numel(args) / 2]); args = cell2struct(args(2,:), args(1,:), 2); end end Then your library functions can look like this: function [] = my_func(varargin) args.Setting1 = 0; % This is the default value args = set_args(varargin, args); % Overlay specific args Callers can specify their arguments as either string name/value pairs like most of MATLAB's built-ins, or via the scalar struct method that you describe. I took a slightly different view of trying to "help" by checking for case, missing underscores, etc.; instead, set_args() will throw an error if the caller tries to specify any parameter name that isn't in the list of defaults. 
Not looking for a histogram, and I'm on R2014b. P represents a vector of likelihoods of something happening. The intent is to compare the random values in A to each likelihood in P. I then count how many values are less than the likelihood and that count simulates the pass or fail of the simulated event. (i.e. how many values of A are less than 0.01? then how many are less than 0.02? etc).
&gt; &gt; &gt; I then count how many values are less than the likelihood and that count simulates the pass or fail of the simulated event. That's what the histogram is for. It represents the probability density of a specific event based on a statistical sample. The histcount command counts the number of events that fall within each interval. Then, to estimate the likelihood of any event, just divide the count of the relevant intervals by the total. **edit** here's an example to illustrate what I said: m = 10000; A = randn(1,m); [N, edges] = histcounts(A) probability = sum( A &lt; 0)/length(A) probability_histogram = sum( N(edges &lt; 0))/sum(N)
My guess is because your function fun wants four scalar inputs, but fimunc is trying to call it with one 4 element vector. try like this: vecfun = @(x) fun(x(1),x(2),x(3),x(4)); fminunc(@(x) fun(x),[ic]);
You nailed it! Thanks so much. I was looking at bsxfun, but didn't figure out how to make it work for this application. I did a run for both my code and yours, and the results are identical. 
You're going to need to send f into your function as a *function handle*. If you have y = 3x + 1 in a separate .m file, say MyFunction.m, then you'd send it in as: y = trap(@MyFunction, 0, 1, 20) You can also create what is known as an *anonymous function*, which means you don't need to have a file: y = trap(@(x)3*x+1, 0, 5, 30)
thank you for the help. This exaclty answered my question. If I copy and paste your second line of code into the command line at the bottom should it run? Because that isnt working for me. do I need to do something else to run the code?
you should probably be using feval instead of eval (feval can use function handles or anonymous functions), and you will use a comma between parameters, so it will look similar to [the code presented on SE](https://math.stackexchange.com/questions/1566743/matlab-trapezoid-rule-code/1566766#1566766)
It should be ok. Is it giving an error?
thanks....didn't work :(
oops I typed it wrong, should be like this vecfun = @(x) fun(x(1),x(2),x(3),x(4)); fminunc(vecfun,[ic]); I could reproduce your error, and this change fixed it for me.
Is it possible that you do not have a license for the Image Processing Toolbox? https://www.mathworks.com/help/images/ref/mat2gray.html mentions that this functions lives in the Image Processing Toolbox, and I would suggest you try running either 'which' or 'ver' to check if you have that function and the toolbox.
That's a good point, I should've been more specific. What I'm defining as area is pixels that have a decimal value less than 130 that is also adjacent to another pixel with a value less than 130. So what I was imagining was an "area" of values less than 130 completely surrounded by values greater than 130.
Check the documentation for regionprops() and bwareaopen(). 
[Here is a direct link to that image for the benefit of mobile users](http://imgur.com/e9mgStL.jpg) --- ^[Feedback](https://np.reddit.com/message/compose/?to=DirectImageLinkerBot) ^| [^Already ^a ^direct ^link?](https://np.reddit.com/r/DirectImageLinkerBot/wiki/res_links) ^| [^Why ^do ^I ^exist?](https://np.reddit.com/r/DirectImageLinkerBot/wiki/index)
plot(x,y,'.') or scatter(x,y) The last option can be *,+,o, etc. Just google "matlab plot" and read the documentation...
Can I just say, you showing the link to inputParser has just saved me dozens of hours? I've been making my own, terrible version of this in my scripts. Thank you!
I do not really have anything great. Just that a lot of plots with one color could be black and white. I guess the only real tip is pretty obvious, and that is to use different line styles. Other than that, just look at the colorbrewer for "Print Friendly" and/or "Photocopy Safe"
If you can use [tables](http://www.mathworks.com/help/matlab/tables.html), which keep names and values together.
Thank you.
Thanks very much yes.
https://www.youtube.com/watch?v=X7XVT7kC7Mg
Looks like it may be a known bug. Do you have access to https://www.mathworks.com/support/bugreports/1098655 ? There's a patch there that should fix it, if you have access to it.
What command are you using to get the number of elements of N?
I've addressed the problem now. N(1) was simply returning an array of functions enumerated at x=1 rather than the first element of N. By using: N = forumla([N11, N21, N12, N22, N13, N23]); instead, it now displays correctly.
Thanks for all the information! Sorry it took so long to get back to you - other projects got in the way. After looking into your suggestions and consulting some textbooks, it looks like the best way to save is to use the save function (as you said), and for that saved thing to be a struct for each animal. Thank you!
&gt; Instead of that showing up in the matlab command line, can I write that to something like a figure where it pops up when I run the code? Why not plot your data at the end of your script?
I have bin trying that but fft function only recognizes it as a single sinusoid and I have no idea of how to work around that
search about doppler shift, learn frequency domain signal representation.
Well... if you rewrite it as a sum of complex exponentials and simplify, you'll notice you can rewrite it as a single sine (although it takes complex addition). Your signal is no different from "just" a single sine. The reason you can't detect a difference is that there's no difference.
for linear equations: http://www.mathworks.com/help/matlab/ref/mldivide.html for nonlinear equations (requires optimization toolbox): http://www.mathworks.com/help/optim/ug/fsolve.html
Funny you should ask. I recently made a function that allows you to write messages to a figure. You can [see it in action here](https://youtu.be/SuAq2y8xt8s). If this is what you need, you can download it [here from MATLAB FileExchange](http://www.mathworks.com/matlabcentral/fileexchange/50193-subroutines-con). 
What do you mean? Its just a single number. Feel like its silly to plot a point.
Oh hey thanks! I'll check this out and see how it is.
Go team Wednesday!
The problem I am having, to be more precise is in data analysis to is is limited how much I can manipulate the data, the example I gave was very simplified, What I am working with is under damped second order step-response. The dominant frequency is: s(t)=m+d*exp(-e*t)*(cos(f*2*pi*t+p)+phi) This is still a bit of simplification.
Late to the party here, but thanks! 
Thank you! My image was technically RGB. So all I had to do was convert: originalRGB = imread('HeadCT3.bmp'); original = rgb2gray(originalRGB); Everything else remained the same since the original was grayscale anyway. So if I did have an RGB image, I'm guessing I'd just break it down to it's R, G, B components, run roifilt2 on each then recombine.
Wow this looks great, I'm excited to give it a go.
Math Works needs to get off their lazy ass and improve graphics instead of devoloping toolboxes. Thanks you for post this is a great link just needed to rant a bit.
I hope this will satisfy your ggplot cravings :) Let me know if you have any questions on the usage of gramm!
Hi there, just looked at your code and ran it. Now I haven't done numerical methods in a while but obviously your scheme is unstable and diverging. The problem is here: tt = dCN*tt; If dCN has any eigenvalues with magnitude greater than 1, you will have diverging behaviour. I'm not even sure why this worked, but I tried using the inverse instead of the multiplication as follows: tt = dCN\tt; I also set the axis limits back to a reasonable range: axisV = [-L/2 L/2 0 100]; I ran this and it seems like it works, with the peak diffusing out to a flat line over time. However, my reasoning is probably flawed.
Thanks man! Is that effectively the same as inverting the Crank Nicolson matrix dCN? 
Yeah it is. This is basically saying tt(i+1) = inv(dCN) * tt(i). 
This doesn't look like Matlab at all. Maybe you meant to post on /r/maple? I'm not sure if that's even a sub, but maybe. 
Hi, so it's been 2 days and I've been trying to do this for most of the time I've been working and I can't exactly find out how to make this. Would you be able to send me the Simulink file that you made?
ah. sorry. thank you!!
Index of element to remove exceeds matrix dimensions. Error in HW5part1q (line 70) C(:,step+2)=[]; That is the error I am getting 
That's my thoughts. Crank-Nicolson schemes usually do not have stability constraints like explicit schemes do. Also, using matrix inverse is an odd choice for a tridiagonal system which can be solved very quickly using the Thomas algorithm at each time step. This will allow the grid to be scaled more easily. 
Newton's method is used to approximate the roots of a polynomial. You guess a root, plug it in to the formula, divide that by the derivative of your equation with the given h, and subtract that quotient from your guess. This then becomes the next guess. For a clearer visualization, I suggest you look up the Wikipedia page The difference across your guesses is the relative mistake, or error. What you'll be doing is making "guesses" for the value of h iteratively. You need to store those for each iteration in a vector. .The specific value is your while indicator to terminate the loop - once your relative mistake &lt;= specific value, you'll exit the loop. What you'll be graphing is a collection of different volumes and h's. Essentially you'll want to run the loop with newton's method, pull out an h, and then store that in a matrix with your V and your h. Then you'll want to change your V (give it a range that sounds reasonable, like 15 cubic meters to 45) and store each V and h you calculate in the matrix. This is what you will plot - a line that shows the correlation between Volume and H
If they are all linear equations then just define the algebraic system of equations and solve them. A=[3 4; 1 2]; b=[7;0]; x=A\b;
I derived the Crank Nicolson matrix (incorrectly) by using the finite difference of the explicit and implicit FTCS scheme 
WOAH! Thank you! I have been skipping between RStudio and Matlab for days. I'll try this out soon. Also if in the future you could add geom_tile I'd greatly appreciate it! Thanks for all the effort. 
Here is an example that I tried, could you tell me what I did wrong? This is just for the Earth rotating around the Sun, no other forces considered. I get this error: In an assignment A(:) = B,the number of elements in A and B must be the same. Error in orbit (line 10) dp(2) = -G * Msun * R / (sum(R.*R)^(3/2)); My function: function dp = orbit(t, P) %where P is [xi yi vxi vyi] G = 6.673E-11/(1000^3); Psun = [0 0]; Msun=1.988e30; R = Psun - P(2); M = 1.98892E30; dp = zeros(2,2); dp(1)= P(2); dp(2) = -G * Msun * R / (sum(R.*R)^(3/2)); end My call: [T,Y] = ode45(@orbit,[0, 3.15581e7],[1.5e8, 0, 0, 29.75]); 
Awesome, glad it worked out for you! :)
Shouldn't R be Psun - P(1:2)? Edit: You can use R' \* R instead of sum(R.\*R) Edit 2: dp should be the same size as P.
Well, since I am using the vector form of the equation, when the solver solves the equation, its output should return a vector. I tested what you suggested and I got the error : Error using - Matrix dimensions must agree. Error in orbit (line 6) R = Psun - P(1:2); Edit 2: Yep, I just realize that. Also, I fixed the error in assignment A(:) etc by using dp(1,:) = P(2) and dp(2,:) = function. But now I get the error, Assignment has more non-singleton rhs dimensions than non-singleton subscripts
Generally, good numerical solutions still require you to do plenty of analytical work on paper to formulate expressions that lend themselves to computation. You might want to write out that cross product and see if you can reformulate it in a useful way. There is also the symbolic toolbox that might help, but it often does people more harm than good imo, and it's something that beginners tend to latch on to and then use even when it becomes irrational to do so. I'd suggest avoiding it unless your actual goal is to do symbolic calculations. 
A small hint: what happens if you write the coupled equations as a vector y? Does that help you?
Ah, the joy of learning about arcane linear algebra decompositions when all one wants to do is some macroeconomics :) But I'm not sure what exactly is the question? Obviously, QZ decomposition is not unique in the sense that particular reorderings of its matrices will be also valid decompositions, and to find a stable solution to the macroeconomic model, the reordering must be chosen in a particular way. But there's no need to do it manually, the qzdiv function is there precisely to implement the reordering. Alternatively, Matlab has ordqz() function with the same functionality (my understanding is that qzdiv was written by Chris Sims long time ago, before ordqz was added). Although unless you're supposed to write the whole thing yourself as homework, there are already existing implementations on the internet (gx_hx.m by [Schmitt-Grohe](http://www.columbia.edu/~mu2166/1st_order/1st_order.htm) or solab.m by [Klein](http://paulklein.ca/newsite/codes/codes.php)). Or just use [Dynare](http://www.dynare.org/).
I don't think so. The built-in solvers are generally C and fortran algorithms implemented outside of matlab, so matlab just fires-and-forgets and comes back some time later for the answer. 
Your issue occurs at y(i) = conv(x1,h) Let's say N = 1, x=[1,2,...6], and i=1 (start of the for loop). When evaluating x1, we get this: x1 = x(1:-1:(1-(1-1))) % this is equal to x(1:-1:1) x1 = 1 Now, let's say N = 2, and i = 2 (start of the for loop). x1 now returns this: x1 = x(2:-1:(2-(2-1))) % this is equal to x(2:-1:1) x1 = 2 1 Note that h =zeros(1,2) h = 0 0 With both x1 and h having more than one dimension, conv returns a multiple elements. When you try to assign multiple elements to one element in the vector y, matlab will throw the error. 
Earlier this year I finished my PhD in aero (researching computational fluid dynamics). I'll go ahead and reiterate a couple of the other recommendations in this thread, I think they've given you pretty good advice so far. Numerical Recipes is great, and you can even read their older editions for free [online](http://numerical.recipes/oldverswitcher.html). Don't worry about them being older, their content really hasn't changed much over the years beyond switching around the programming language. A word of warning, though. The code itself in these books come with rather restrictive licenses, and what it ends up meaning for you is you can copy their code and use it yourself, but you aren't allowed to share it (although I don't *think* this is carefully enforced). If you want to share code, you'll either have to pay for their license, or use their code only as inspiration for writing your own. If you pay close attention to their licensing, they don't even let you store on your computer more than one copy of any of their functions (again, I can't imagine they actually have a way of enforcing this, but it makes me disappointed they do things this way nevertheless), so it can get problematic fast. If you want more reading material, I've only paged through it myself but [Chapra and Canale's book](http://www.amazon.com/gp/product/007339792X?keywords=chapra%20numerical&amp;qid=1450055696&amp;ref_=sr_1_1&amp;sr=8-1) seems like a nice intro text (if it wasn't your textbook already), and uses MATLAB. [Reddy](http://www.amazon.com/gp/product/0072466855?keywords=reddy%20finite%20element&amp;qid=1450056513&amp;ref_=sr_1_1&amp;sr=8-1) has a well-liked intro to finite element methods. Some more graduate level texts are [Moin](http://www.amazon.com/Fundamentals-Engineering-Numerical-Analysis-Parviz/product-reviews/0521711231/ref=cm_cr_dp_see_all_btm?ie=UTF8&amp;showViewpoints=1&amp;sortBy=bySubmissionDateDescending), [LeVeque](http://www.amazon.com/Difference-Methods-Ordinary-Differential-Equations/dp/0898716292/ref=sr_1_1?ie=UTF8&amp;qid=1450056254&amp;sr=8-1&amp;keywords=leveque+finite+difference) (he has a bunch of good ones), and [Trefethen](http://www.amazon.com/Numerical-Linear-Algebra-Lloyd-Trefethen/dp/0898713617/ref=sr_1_1?ie=UTF8&amp;qid=1450056282&amp;sr=8-1&amp;keywords=trefethen+numerical). [Project Euler](https://projecteuler.net/) is indeed great. I would also recommend you learn some other (any other, really) programming language. MATLAB is a fine tool, but learning something else as well will make you a better programmer and help you be versatile. I don't really recommend you go and learn half a dozen other languages, or even learn every feature available one language--just getting reasonably comfortable with one will do. I'd say pick any of: C, C++, Fortran 90 (or higher), or Python, but there are others as well. Python is probably the easiest to get into and there are lots of packages that will give it a similar "feel" to Matlab, if you like. One nice way of learning (I think) is going through Project Euler in your language of choice. Slightly more long term, take other numerical/computational courses. As you take them, think about what you like to use computation for (if you don't have a good idea already). If you like to analyze data, develop more or less "simple" simulations to direct design decisions, and don't care so much for heavy simulations, you'll get a better idea of what to look for in industry. If you like physics simulations and solving PDEs, you may lean toward the research end of things and possibly dumping Matlab altogether in favor of more portable and high performance tools.
Thank you so much. It is very close to what I had in mind.
Thanks for the snip-it, it worked well here. I don't think I'll use it in future because of how it wont work for functions where colomuns aren't independent. But that problem doesn't effect fft :)
gtext is specifically for placing it with a mouse. You want to use [annotations](http://www.mathworks.com/help/matlab/ref/annotation.html) instead 
You're syntax is simply incorrect. You can't pair parentheses like that in Matlab. 
Because the operator .* is multiplying the output of the two FFTs. Sticking a second pair of parentheses is simply incorrect syntax. 
The matlab documentation states that parentheses can be used to designate precedence. It can be used in this way for other operations on matrices both before and after functions and operators in general. Error checking by wrapping statements explicitly in the order you want them to execute checks for precedence order errors. Additionally you can parenthesize fft(A) inside redditusername58's interpreted form and get the desired output. Since the syntax is correct in other cases and even withing the interpreted form I'm asking why indexing is special. Since it worked in the interpreted form I ask specifically if it's because the interpreter for indexing wasn't made expecting such an expression and hence errors.
You could look for ways to reformulate your expression such that it never involves a very large or very small value. This isn't always possible, but it often is. 
Thanks a lot for your answer, but none of the alternatives worked. I first tried to return the object, as a result: "When constructing an instance of class 'Request', the constructor must preserve the class of the returned object." And then I tried to make a handle class and got this error: "The class 'handle' is not a superclass of class 'Request', as required to invoke a superclass constructor or method." I'm almost going procedural oriented to not delay my work. 
Unless I'm missing something, what you want to do isn't possible. (175/9)\*pi^x is only less than 1 when x is less than 0. n! of negative numbers isn't defined. So, I'm not sure what you could do to get what you want. In general though, when you have a case like this, you take the log of both sides, so the exponent becomes a factor, and then the numbers get a lot smaller. 
What happens when you run the code? What error do you get? If you get a plot from it, in what way is it not what you expected? If you're getting an error before the last line, why have you phrased this as a plotting question when it's clearly not? Help us help you! Check the sizes and shapes of xplot, yplot and t. The script will be much easier to debug if you split the calculation of xplot and yplot into several lines, possibly putting each one in a function (or have them share a function with a couple of arguments as they look very similar). It may well be a case of elementwise vs. matrix operations. Splitting that mess into multiple lines will tell you where the periods are necessary.
That is super impressive! Great job. I'd love to play with it :) My Matlab projects for engineering have been much less interesting.
HOW BLOODY AWESOME IS THAT!
What have you tried? Where are you stuck? What's your code look like now? We're not here to do homework for you. We will help you if you've shown you've at least tried. 
How many lines was this? Did you draw inspiration from universe sandbox on steam?
just wondering cuz universe sandbox its like an and cheap planetary trajectory system. Still great job though, mah jelly. 
really great explanation, thank you for taking the time.
I dont understand what do you mean with "you're solving your ODE from 1 to maxIter, not from a to b". I must write my interval as interval = [1:1.0:maxIter]; ? I need type my function interval too and i do it in 8 line of code. Heres my code without Polish words: http://pastebin.com/UQ3GwwS1. Seriously i dont know what to do, because im green in MatLab and im a little confused ans stressed (time pressure).
I think I see what you're trying to do. I assumed f was a function handle (which is the convention), but I'm guessing you're using it as an array. I think there are a large number of problems with your code. These are the ones I've noticed just having a pass at it: 1) eps (as I mentioned) is set to a negative value 2) you're trying to assign x(0) to a value, which will give you an error (Matlab indexing starts at 1) 3) your numerator expression contains a term that is also in the denominator [f(i)-f(i-1)] so this just cancels out to be f(i), which isn't correct. The Euler method is f(x+dx) = f(x)+df(x)*dx, where df is the derivative of f and dx is your step size. At this point, I would suggest you review the Euler method and write comments in your code on what you are trying to make the code do. That will make it easier for other people to point you in the right direction.
I agree with /u/geebr, you need to stop and think about what you're actually trying to do. Your code looks like you've been writing stuff at random without any care for what it's actually doing. Start by understanding the steps your code should take. Write those steps down in some comments, then write code that does those steps. 
No, this is good. This is how you learn. Now that you know the algorithm, think about how you would do each step. Then figure out how to do each step in Matlab. You can experiment in the console or in a script file while you figure things out, but don't write code in your final function until you understand what it does. Search documentation or ask here when you get stuck, and pay attention to the error messages and warnings Matlab gives you. It's not that hard, you've just tried to solve the problem by writing code you don't understand, which will never work. Think about what is happening and make sure you understand each line. 
Ok. I have this: http://pastebin.com/MRrgRTqs But its shouting : Undefined function or variable 'f(a)'. Error in m_siecznych (line 4) xa = f(a); 
If you have certain constants that come up a lot that you don't want to have to keep inserting into code everywhere, you can create a "Constants" classdef (well, it can be named anything you want), and then access it anywhere. For instance, my work requires a lot of conversions between imperial and metric units. Instead of having to always remember it all, I throw it in this file. You start it off like this: classdef Constants properties (Constant = true) and then you can add in anything you want- and anything you already have defined in your field can be used. So for instance: % metric to english m2ft = 100/(2.54*12); km2mi = 1000*Constants.m2ft/(5280); kg2lb = 2.20462; % english to metric ft2m = 12*2.54/100; in2m = Constants.ft2m/12; mi2km = 5280*Constants.ft2m/1000; lb2kg = 0.453592; Now, as long as "Constants" is in my path, from any other script, if I have to convert a variable `a` from inches to meters I can simply say: b = a*Constants.in2m 
This seems to be a solution http://undocumentedmatlab.com/blog/undocumented-profiler-options-part-4 Edit: Only in older versions :( Comeon Mathworks!
That's really quite handy, thanks. Do you know if there is a similar command which makes it docked + shows plot tools? 
Attempted to access f(-1); index must be a positive integer or logical. Error in m_siecznych (line 2) xa = f(a); Can some1 explain me what to do with it? I found tons of same problems but no straight answer. 
I believe what you're looking for is [logical indexing](http://blogs.mathworks.com/steve/2008/01/28/logical-indexing/). Read up on that article, it's a great one. In your particular case, you'd simply say: x(time &lt; -1) = 0; x(time &gt; 2) = 0;
I'm not sure how useful this is to everyone else, but if you need to shuffle a list of numbers 1:n then you can use [~,shuffled] = sort(rand(1,n),2); And every time you run it you get a shuffled list. I found it useful for doing the traveling salesman problem and for genetic algorithms. 
I can't really remember why I wasn't using randperm. I would expect randperm to be faster. Can you create a matrix of shuffled vectors by using randperm(m,n)? I know you can use [~,suffled_matrix] = sort(rand(m,n),2); to make shuffled matrices. 
I found out about plotly last week: https://plot.ly/matlab/ When you have a figure in matlab, you can just type "fig2plotly" and then your browser opens up with a nice web-based interactive version of the figure. The figure is added to your account on the page and you can easily share the link to the figure with others.
Cool, thanks for sharing
I found the error an hour after posting. I was reusing the index k1 for a nested for loop from 1 to 13 inside the outermost. Sloppy copying and pasting
If you have a bunch of lines on one plot and don't want to bother with setting linestyle arrays: set(groot,'defaultAxesLineStyleOrder',{cell array of linestyles}) Just use hold on and forget about it.
You're using f as a vector not a function. If f=[0.3,0.6,0.4], f(1) = 0.3, f(2) = 0.6, f(3) = 0.4. There is no f(-1) which is what you're trying to access.
Okay so if I understand you correctly you have 2 questions: First: When do you use braces and when don't you use them: Braces are used to create an array or vector (as you rightly concluded). If you would want an array running from 1 to 5 the hard way you would need to do: Array=[1,2,3,4]; You can try it out and omit the brackets and see what happens :). However, matlab added an other operator (colon or ":") to make life easier for us. One of the main functions of the colon operator is to create a vector (see "doc colon"). The brackets are already built in for you :). (Though it doesn't hurt if you use brackets they are just unnecessary). The second question: Why would you use floating point accuracy or uint or uint8! A very good question and the answer for now would be: If you don't know, then just use floating point. Nowadays nearly everyone has fast enough computers with large enough memory so it won't be a problem. And matlab is nice enough to figure out the memory allocation for you. HOWEVER there are some cases where you do need to bother with what type of variable you use. For example when you have huge matrices (in my case 3D MRI data) that you used a threshold on (so it's only ones or zeros) it would be an enormous waste of memory to save it as a double (my older laptop with 4 gig of ram couldn't handle that). Same can be said if you want to transfer data over a serial port with matlab: if you want to set the angle of a servo motor controlled by an arduino with a high speed then it would be insane to use double precision numbers. But yea, for the most cases you don't need to bother with that in Matlab.
You don't need to use the square brackets. The following expressions are equivalent x = 1:5 x = [1,2,3,4,5] x = [1 2 3 4 5] There are many reasons why you may want single precision. For example, if you are manipulating a very large data set in memory, you can represent twice as many data points with single precision. It can also be important if you are interacting with external code, C, C++, Java. 
Matlab will complain either way if you put brackets around a vector that's not necessary (it will work but you get warnings/orange line under your code). Generally I don't ignore warnings (though I know lots of people that do...). I am curious though what matlab exactly does that causes performance issues if you do: a=[1:5];
Preferably you define the data type during the definition. In some programming languages this is standard in C for example you do: int A=5; if you omit "int" (or double or whatever) then you get an error. Matlab is made a bit more idiot proof to do this for you which is fine in most cases. But if you want to save your variable as uint8 you want to do that during the definition (if possible): A=uint8(csvread('mydata.csv')); Note that you can check the data type with "whos" so: whos A
Have you tried it out? You would find that the answer is "Yes" :). (you did forget to remove the square bracket in your last line).
ah, ok, thanks!!!! This is my first day with matlab! 😃
I will try. Thanks. This is my first day with matlab! 
I have done that but cant find anything that can help me, i need to make a model info .xml file which will then be read by the surrogate and spit out the results. The .xml just needs to list my parameters, inputs etc. However i have no experience with .xml files and how they are written, so for the past while ive been stuck trying to modify .xml model info files for problems somewhat applicable to my beam problem, but as soon as i make any changes the surrogate cant read the file. I am using the SuMo toolbox currently, if that helps at all. 
You can write `mex` functions in C or C++. This can be useful for writing faster code or writing an entry point into some other library written in one of these languages. Java is good if you want to create custom GUIs. I have found it is also very good for creating asynchronous network interfaces that trigger callbacks. There are sections in the documentation that will get you started interfacing with Java and C. A good resource for figuring out what's under the hood is [undocumentedmatlab.com](http://undocumentedmatlab.com/). I say learn it all. Learn Python, Swift, PHP, Ruby, JavaScript, C, C++. 
To be fair, it is the [second result](http://www.sumowiki.intec.ugent.be/Config:ToolboxConfiguration#Interpreting_the_configuration_file) when googling "sumo toolbox configuration xml." How is anyone supposed to find that? The good news is that it has a mini XML tutorial. If that isn't enough, I also googled "XML tutorial" and the [first result](http://www.w3schools.com/xml/) is a resource I have used extensively and can vouch for its quality. 
Thanks. I will keep that in mind. I have heard a lot about Matlab. I am sure it is amazing! THANKS. 
I bet there is a way but I've never used it since I try to avoid GUI adjustment of plots whenever possible (though, sometimes it is easier to do it in the GUI, let it generate the code, and try to reincorporate that to my script)
I am using R2014b, indeed. So, is this a bug?
The error is in your use of "/". Since you're dividing by a vector (w), you have to perform an element-wise division using "./": b = sqrt((1/225.^2)+((w*6e-7)-(1./(w*0.5))).^2); z = 1./b; 
If you are familiar with vectors, particularly the dot product, then we have the linear equation m(x-xbar)+(y-bar)=0 (1) This is equal to [m 1][x-xbar;y-ybar]=0 (2) We seek the normal to [m 1], the inner product of [m 1] with another vector [a 1] yields &lt;[m 1],[a 1]&gt;=ma+1. For [a 1] to be normal to [m 1], we require ma+1=0, or a=-1/m. Replacing a for m in (1), we get that the perpendicular line through the mean of the points is of the form f(x)=-(x-xbar)/m+ybar. or my finv.
That would be what I'm leaning towards. I'm not having any luck digging around to find the handle of the bar itself. `waitbar` calls an internal function `uiwaitbar`, which I'm assuming is what generates the bar, but the code is obfuscated. I would suggest submitting a bug report to The MathWorks so they're aware of the issue and to see if they already have a workaround. It's also interesting that explicitly passing the `Position` property in the `waitbar` call only sets the size of the figure, the bar remains a constant size. I see this to be true in both R2015b and R2014a.
Thank you! I was not aware that it was that simple. I was trying all sorts of indexing using find() and isequal(), but didn't know that simply using the &amp; command would have this result. I went with: C = (A &amp; B &amp; 1); Thanks for your help!
Thank you! I was not aware that it was that simple. I was trying all sorts of indexing using find() and isequal(), but didn't know that simply using the &amp; command would have this result. Even simpler, I used C = (A &amp; B &amp; 1); Thanks for your help!
clc;clear all;close all;tic;%giving linear spacest=0:.01:pi;% t=linspace(0,pi,20);%generation of sine signalsy1=sin(t);y2=sin(3*t)/3;y3=sin(5*t)/5;y4=sin(7*t)/7;y5=sin(9*t)/9;y = sin(t) + sin(3*t)/3 + sin(5*t)/5 + sin(7*t)/7 + sin(9*t)/9; plot(t,y,t,y1,t,y2,t,y3,t,y4,t,y5);legend('y','y1','y2','y3','y4','y5');title('generation of sum of sinusoidal signals');grid;ylabel('---&gt; Amplitude');xlabel('---&gt; t');toc
clc;clear all;close all;tic;%giving linear spacest=0:.01:pi;% t=linspace(0,pi,20);%generation of sine signalsy1=sin(t);y2=sin(3*t)/3;y3=sin(5*t)/5;y4=sin(7*t)/7;y5=sin(9*t)/9;y = sin(t) + sin(3*t)/3 + sin(5*t)/5 + sin(7*t)/7 + sin(9*t)/9; plot(t,y,t,y1,t,y2,t,y3,t,y4,t,y5);legend('y','y1','y2','y3','y4','y5');title('generation of sum of sinusoidal signals');grid;ylabel('---&gt; Amplitude');xlabel('---&gt; t');toc
clc;clear all;close all;tic;%giving linear spacest=0:.01:pi;% t=linspace(0,pi,20);%generation of sine signalsy1=sin(t);y2=sin(3*t)/3;y3=sin(5*t)/5;y4=sin(7*t)/7;y5=sin(9*t)/9;y = sin(t) + sin(3*t)/3 + sin(5*t)/5 + sin(7*t)/7 + sin(9*t)/9; plot(t,y,t,y1,t,y2,t,y3,t,y4,t,y5);legend('y','y1','y2','y3','y4','y5');title('generation of sum of sinusoidal signals'); ylabel('Amplitude'); xlabel('time');
clc;clear all;close all;tic;%giving linear spacest=0:.01:pi;% t=linspace(0,pi,20);%generation of sine signalsy1=sin(t);y2=sin(3*t)/3;y3=sin(5*t)/5;y4=sin(7*t)/7;y5=sin(9*t)/9;y = sin(t) + sin(3*t)/3 + sin(5*t)/5 + sin(7*t)/7 + sin(9*t)/9; plot(t,y,t,y1,t,y2,t,y3,t,y4,t,y5);legend('y','y1','y2','y3','y4','y5');title('generation of sum of sinusoidal signals');grid;ylabel('---&gt; Amplitude');xlabel('---&gt; t');toc
clc; clear all; close all; tic; %giving linear spacest=0:.01:pi; % t=linspace(0,pi,20); %generation of sine signalsy1=sin(t); y2=sin(3*t)/3;y3=sin(5*t)/5;y4=sin(7*t)/7;y5=sin(9*t)/9; y = sin(t) + sin(3*t)/3 + sin(5*t)/5 + sin(7*t)/7 + sin(9*t)/9; plot(t,y,t,y1,t,y2,t,y3,t,y4,t,y5); legend('y','y1','y2','y3','y4','y5'); title('generation of sum of sinusoidal signals'); grid; ylabel('---&gt; Amplitude'); xlabel('---&gt; t'); toc
Hello, thank you for the reply. I understand finding the angle and construction the reflected line but I dont understand how i can find the normal of the mirror vector. Here are the two end points of the mirror e.g. m1 = [x,y] m2 = [x,y] How can i find the normal of this mirror?
If the two end points of the mirror are m1 = [x1,y1] and m2 = [x2,y2], then you first define dx = x1 - x2 and dy = y1 - y2. Then a vector normal to any point on the line is defined as n1 = [dy,-dx] or n2 = [-dy,dx]. Note that n2 points in the opposite direction of n1.
Hello, yes i've attempted this before but i'm trying to get the normal line to come out of the point of intersection. Here's what happens when i plot n1 and n2 http://i.imgur.com/kHWPftb.png The dark blue lines are the mirrors, the red line is the line laser thats supposed to hit the mirror and reflect and the light blue line is norm. Im trying to get the norm to come out of the direction of the laser Thanks, sorry if i made any errors im a bit new to matlab [code] dx = P3(1) - P4(1); dy = P3(2) - P4(2); n1 = [dy,-dx] n2 = [-dy,dx] plot([n1(1) n2(1)], [n1(2) n2(2)]); [/code] P3(1) and P4(1) are x's P3(2) and P4(1) are y's
why
actually I'm sad, to have 27 adjective like this the probability is only of 1/980 ish 
I had to PM one of the mods. It was a couple of years ago when they first started the flair here.
Yup I will use axis equal, made it a lot better. Cheers.
If you're feeling adventurous you could try a `javax.swing.JProgressBar`. Very customizable. 
Or you could continue [in your previous topic](https://www.reddit.com/r/matlab/comments/3x79am/create_a_mirror_that_reflects_a_line_segment/) 
It doesnt seem to work if the reflection is almost 90 deg since the reflection goes straight through the mirror
Conv() with a kernel of ones? It might be spending too much time converting the logical to a double. nnz might be faster than size(find())
Oh I know that quite well. This was just done in preparation for my university exam in introductory IT. (They teach MATLAB to engineering students) I wrote it by hand first (pen and paper) because that's how the exam is! (The exam was two days ago and it went OK). I'm going to try and learn other languages in my free time and probably learn some OOP too. The licensing problem can be fixed with Octave though (open-source MATLAB clone). I installed Octave on my smartphone last night and this code runs perfectly without any changes. It's quite magical. 
I don't know all that much about MATLAB's features, but so far, every feature that I've encountered while translating has an equivalent in python, or something close that you could work off of. I vaguely remember using toolkits for digital signal analysis in MATLAB a while back, and that was pretty handy, but I still wish it didn't have so much of a presence in academia like it does now. Either that or switch to Octave, but I imagine that a lot of the plugins/toolkits that MATLAB offers aren't available on Octave.
Format your code.
Done it the best I can, hope its better to looks a bit better
Hello, Thanks for the reply. I've understood what you meant later on yesterday and solved the problem and forgot to update the post. I also deleted my main post when i meant to save it. The pm i recently sent you was because I was having trouble creating the reflected light. Here is what I mean: http://i.imgur.com/tF8X0BK.png The red is the lightsource, the magenta dashed line is the normal. I was given advice to workout the angle and I did work out the angle, can you give me some advice on what to do next with the angle so i can create a reflected line? my trigonometry is very weak. thank you very much. EDIT: Here is what I have so far m = tan(atan([P1(2) P2(2)]/[P1(1) P2(1)]) - angle) x = 0:10; y = m * (x - P(1)) + P(2); M is the slope of the lightsource (or supposed to be) y is the point slope formu. I'm trying to get the lightsource to reflect the other way on the other side of the normal. 
EDIT: Ignore this, i just saw the pm. 
I liked it. When loading a previous game though you should put in a condition so that the game doesn't crash when you input the name of a load file that doesn't exist. Edit: Spelling
Woah I forgot to take that into account. All I had was an error() print-out. I'll fix it up when I get home. I sense similar problems riddled throughout the program. Thanks for pointing it out! 
You Would't happen to live in Norway do you?
I do. Do you know me IRL? 
The code is not really important. I don't want to make the code run. I want to know what's the proper way to batch an execution of hundreds of scripts. I guess I was confusing with unnecessary details. I'll try again. Thanks.
fft will generally be faster than conv. [The convolution theorem](https://en.wikipedia.org/wiki/Convolution_theorem) states that up to a constant scaling, ifft( fft(x) .* fft(y) ) will be equal to conv(x,y). As far as I know the constant scaling factor is taken care of by fft in Matlab so you can just treat it as the output of a convolution. 
See that blue point where the ray hits the mirror? There's a vector that starts in that point and ends in the point you indicated with the green circle. Let's call this vector r1. What you want is the vector that starts at the blue point and that runs alongside the reflection of your line. You don't know which vector this is, but let's call it r2. You already have a normal. Let's call it n. Well, turns out that, if you add r1 and r2, you'll get a vector that is in the same direction as your normal. That is: r1 + r2 = an Where a is a scalar. So if you do the opposite: r2 = an - r1 You get a vector that runs alongside your reflection. Just translate it to the appropriate point so that you get the segment of line that starts in the mirror. Now how to find a? If you draw all those vectors, you'll notice that a is twice the scalar projection of r1 over your normal. Your normal should be unitary, so: a = 2*dot(r1,n) If n is not unitary, just divide it by its norm.
Thanks! I tried your idea with cumsum, but when used in the same for/if loop as before, it was even slower than the original (about 2x). But then it got me thinking and I managed to use the cumsum idea while avoiding loops and got 100x performance improvement. I edited the OP with the code. I am so happy right now.
OP didn't update when I commented. New code looks solid. Not having to run through the entire for loop definitely helps as well. A little more verbose but more efficient for sure. You could kill the for loop entirely by replacing [c,~] = find(mvbouts); c(:,2) = c + mvw-1; for ie=1:size(c,1) mvbouts(c(ie,1):c(ie,2)) = 1; end with [c,~] = find(mvbouts); c2 = linspace(c,c + mvw-1,mvw); mvbouts(unique(c2(:))) = 1; Might need to double check, but I think that should work 
Takk! ITGK er noe jeg begynte å like ganske mye. Jeg trodde jeg var mest forberedt til IT. Tross det, følte jeg meg voldtatt etter eksamen. Det var jævlig lang og hver oppgave telte kun 5%. Jeg klarte å svare på nesten alt men det var veldig half-assed. Hvilken linje går du? 
http://pastebin.com/w7V3N0xJ A newer version. I added your suggestion and made the game mechanics closer to the actual game. 
It takes the last one you enter, yes. That's actually a feature I consciously put in. When I play too fast, I end up pressing too many keys, so this counteracts that. 
Top Banana. Now generalise the code to be any nxm grid that the user chooses.
That's a great idea! I'm not sure if it will be playable for *any* nxm grid though. It's probably ok if n and m are &gt;=4
Personally, I still use 2014a when I use Matlab. I am more comfortably and faster with the older graphics system and a lot of my codes I have design to give me a uniform result, do not (yet) work in the new system. (and I rarely use Matlab these days anyway so it's not worth the investment). For those reasons, I still just use the older one. I would say that there is certainly no *harm* in keeping both as long as you're still legal and you have the space. You never know if you will want to open up an old fig file or somethig
Didn't know that! Thanks! 
The beauty of c++11, single header libraries and Eigen. Thanks for the posting this! 
MATLAB syntax is very learner friendly - if you have ANY prior programming experience and understand basic concepts (if/then for/while loops) you are in great shape. Part of what makes development easy in MATLAB is its comprehensive but readable documentation. The "doc" command or "help" command paired with the particular function you want to use will point you to the proper documentation. Good luck!
The "help" command is your best friend. Got me through a masters degree. 
In addition to what /u/EatMeerkats said, you really need to look into the toolboxes you're going to use. Some toolboxes might see small updates over 2 releases while others might add loads of new functionality. For example, the Computer Vision System Toolbox has added a lot of stuff since 14b. 
Can you post what you have so far, as well as the problem as it was given to you
A script is just a .m file with Matlab commands in it. It sounds like you need to write a function, though. Matlab has excellent documentation (open Matlab and open the help browser). I highly recommend reading through some of the examples there. 
My only formal programming class was a freshman C++ class. I taught myself Matlab based on that basically. It's really user friendly and there's so much on line. Change your color scheme so it's a black background, you'll be thankful some day.
My friends and I play a game of 8 a side soccer every week, and out of a pool of 20+ who are in the chat group, the first 16 who can play are entered into a Matlab script where they have been assigned a player rating. The script then produces two evenly weighted teams of 8. It works very well, but obviously the player ratings aren't disclosed to everyone, but a select few.
hahaha awesome
I couldn't agree more
 Visualising my spendings. The most obvious observations were: I could see a constant rise in rent and the time my pizza place raised the lunch offer price. A train schedule similar to this one: https://commons.wikimedia.org/wiki/File:Train_schedule_of_Fukuchiyama_Line,_Japan,_1950-02-20.png for my commute. A genetic algorithm script for making the Mona Lisa out of squares. 
matlab isn't really cut out for small tasks, all activities mentioned so far could easily have been solved with a small bash script in a unix shell without the extra unnecessary overhead
&gt; and you want to ensure code compatibility. Handle graphics as a specific example, particularly with GUIs. With [R2014b switching graphics handles to objects from doubles](http://www.mathworks.com/help/matlab/graphics_transition/graphics-handles-are-now-objects-not-doubles.html) (see also blog posts [1](http://blogs.mathworks.com/loren/2014/10/03/matlab-r2014b-graphics-part-1-features-of-the-new-graphics-system/), [2](http://blogs.mathworks.com/loren/2014/10/14/matlab-r2014b-graphics-part-2-using-graphics-objects/), [3](http://blogs.mathworks.com/loren/2014/11/05/matlab-r2014b-graphics-part-3-compatibility-considerations-in-the-new-graphics-system/)) it's easy to get used to the new syntax and forget about compatibility issues with versions prior to R2014b. Many of my coworkers have older versions of MATLAB so I keep R2014a installed along with the newest version for compatibility testing.
You might want to have a look at the ode45 function in MATLAB. 
Lool that's a really interesting way to use it 
I think you should capable to determine the difference between different type of ODEs by studying the theory yourself. The reference to ode45 was just a guideline, since this is one of the most commonly used solvers for ODEs. MATLAB has also some other solvers such as ode23 and ode15s. Just select the solver you need based on the problem you try to solve. 
Could you expand on that last one? Does it make a pixelised Mona Lisa, what's a generic algorithm?
Recall that ODEs are only of a single variable -- y(1) = 1 is your initial condition
You usually need to mark the signal as variable size and specify its upperbounds. Unbounded varsize signals are not allowed. You also need to be careful about direct feedback without a delay. Simulink isn't able to break the algebraic loop in some situations.
This may be just a typo, but according to the documentation the estimated coefficients for the denominator are returned by tfestimate in the variable 'a' not 'b'. Any chance that is the mixup?
With addpath(). 
Doesn't seem to work within the script. I've been adding this to the top of my .m file..... addpath(genpath('/gwork/user/build/full_domain_parameter_study'));
Are you sure that's the correct path on the server that will execute this script? You may need to talk to the sys admin or write some code to construct the correct path relative to the script location (available via mfilename()). You might also be better off with a relative rather than absolute path. 
Unless your sysadmin has done something unexpected, it should work just fine. I assume you're getting a "directory does not exist" error? 
I'm embarrassed, I missed a 'g' in the path. Abandon thread. 
Lol, it happens. I've done worse. 
Is an SD card going to withstand an acceptable number of read/write cycles to use it long-term in this way? I don't know the answer to this, just thought it might be a useful thing to investigate. Are you sure your SD card actually has as much space as it is advertising to the OS? - http://www.instructables.com/id/Dont-fall-for-the-Flash-Drive-Scam!/ - https://flashchiptech.wordpress.com/2011/07/13/fixing-fake-sd-sdhc-cards-is-it-possible-what-are-the-problems-and-challenges-what-software-to-use-to-test-for-flash-memory-fake-chips-is-there-a-free-download-to-check-flash-drives-and-memory-car/ If MATLAB had tons of very small files, I'd maybe wonder if it had something to do with a large(ish) block size of the filesystem that the card might be using. If you right-click the drive (assuming you're in Windows) and go to "Properties" you should be able to see the filesystem type there. I doubt this is the issue, though. I don't know of any reasons that a MATLAB installation would legitimately take up that much space, but I'm not exactly an expert on that actual MATLAB _application_. Good luck, let us know what you find.
I bought the card from a reputable retailer here in Finland, so I doubt I (alone) was scammed. I'm in the process of uninstalling right now, which is taking a while considering the amount of files on the card. Going to try installing it once more, and if it refuses to work as intended I'm just going to stick to using my desktop for my Matlab needs.
Is it possible to run the job in a specific directory? That might be easier (and faster, `addpath` is slow).
...and just in case it's the block size thing, you may need to reformat your memory card. Because to me, it sounds quite reasonable explanation. Matlab has tons of small files, if yours is formatted to FAT, that's going to waste a lot of space... though should not waste that much space. If you use the card only in Windows computers, NTFS should work fine.
I hope that'll fix it. Good luck! 
It depends what you mean by 'all of the modules'. Some modules/add-ons come with downloadable pieces to keep the install small if you don't need them. If you somehow chose to download all these add-ons you're going to get a huge package. You can see here the typical install size. http://www.mathworks.com/support/sysreq/release2015b/ 
`disp` is an example of a high-level print function--internally, it calls lower level functions to create the strings that are eventually displayed. `num2str` is actually another--it doesn't do anything sprintf can't do (with some help, at any rate), but it handles some of the details of the implementation for you. `fprintf` is used to write to a file handle; if none is provided, the file handle 1 (stdout--which you can verify with `fopen(1)`) is used, which writes to the command line; you could pass 2 to write to stderr (red text on the command line) or a higher number representing a file opened with `fopen` to write to the file. That's one reason to avoid automatically appending a newline: it avoids forcing users to write a paragraph at a time to files--it's a feature to allow flexibility in writing strings, not a needless complication. Your `fprintf` function won't work as written because you're missing the format specifiers--try: `fprintf('One: %d\nTwo: %02d\n%s: %4.1f\n', 1, 2, 'pi', pi);` See the `sprintf` doc page for details on what flags and specifiers to use. Regarding your original post: `sprintf` is very useful for constructing strings without `num2str`--it allows fine-tuned control of how many digits (or letters) to display and how to pad (or not pad) the output with delimiters (such as commas, tabs and newlines). It should be noted that `sprintf` merely constructs the string; you need `fprintf` or `disp` (which Matlab implicitly calls whenever you don't end a line in a semicolon to suppress output) to write to a file or the console. 
You could do this with meshgrid() and hypot() very efficiently. 
Ipdm would work but is far from the most efficient option when you want to calculate every point on a regular grid. Ipdm is good for scattered data. 
You're only a noob if you cling to your own ignorance. This isn't hard to learn if you want to. 
If that's the case then please provide OP with a better solution. I don't see the point of telling me it's not the best solution and failing to provide proof otherwise.
This is just a complex (lol) way of doing what hypot() does. 
I've never used either of those functions, but that's good to know! Why do you say it should be avoided? Just curious. 
Repmat isn't a major sin or anything, and it's often useful and necessary; but it's also frequently used when better solutions exist. I guess I see it as a common crutch that people learn about and then use over and over instead of continuing to learn better methods. Also (and this may not be true any longer) I believe it uses loops internally, and is therefore pretty inefficient when speed matters. 
Kinda suck you can't use a matrix because this could be done in about 5 min with a matrix. Now That i think about it, what a dumb question. MATLAB, MATrix LABoratory, but yeah don't use matrices
This should be in the sidebar.
My recommendation is to use pplane found here. This is user streamlined and doesn't involve any programming experience. http://www.cs.unm.edu/~joel/dfield/
I don't know that there's a comprehensive timeline of when functions were introduced, but you can sometimes get a little more insight if you look at the source *.m file for a certain command. For example: &gt;&gt; edit bar.m Has, among other dates of modifications: % C.B Moler 2-06-86 Which to me indicates it was originally written by the inventor of MATLAB himself, Cleve Moler, in 1986.
This is likely a race condition. You might need to poll the serial buffer in a while loop until there is data available or until some timeout. 
I used MatLab's GUI for interfacing to an Arduino motor control system. Had the GUI packaged so the rest of my robotics team could use the Arduino code for a digging test rig.
Also see sscanf().
`interp1` with method 'nearest'. If you want to only include the data in the second column if it's within some limit of difference from the first column (e.g., make the rows in the second column NaN if abs(first_column - second_column) &gt; limit), use logical indexing on the result to NaN/zero values. 
Rather that looping over values to get the index of the min difference, look at the`interp1` function with method set to 'nearest' --much faster for large datasets. 
Then you need to interpolate onto a grid first, unfortunately 
I don't think this is possible/easy to do; especially the "in the browser" part. Depending on what your simulation is, you can figure out some work-arounds. If you just need to display result(s), I think you can design the front end as a webpage and forward those inputs to MATLAB running on your server. If you just want to display a graph easily online, try looking at [plot.ly](https://plot.ly/) If you just want to share your work, just post the code!
Have you looked at blabr?
thank you. not sure that will work, as I need to switch over depending on error. but will give it some thought. also, as a afterthought, I think i will have trouble using normal loop shaping tools such as bode diagram etc, because the output at a certain time will depend on all the input till that point (i.e, the transfer function is not well defined, as it depends on the error...)
`nearest` needs to be in single quotes--a string. Since you don't have it quoted, Matlab is trying to call a function or class called nearest, which isn't what you want. 
That's not too hard: http://www.mathworks.com/help/matlab/ref/trisurf.html example: [x,y] = meshgrid(1:15,1:15); tri = delaunay(x,y); z = peaks(15); trisurf(tri,x,y,z)
I'm not completely sure what you're asking, but if you have for example x=1:10, you can do x=[x 11:20]
What I have now after the first serialread is Readings= '45' '17' '43' '14' [1x2 char] and after the second serialread is Readings= '45' '18' '42' '13' [1x2 char] What i want to get after the second is something like that Readings= '45' '17' '43' '14' '45' '18' '42' '13' 
For the second and subsequent reads try Readings = [Readings ; yourcode] to append as a new row 
Sounds like it might just be easier to redo it all in mathematica, which has the CDF player, designed for this very purpose. Thanks, I appreciate the help!
I defined Readings = cell (1,5); and used Readings = [Readings ; strsplit(out,', ')] ; which works fine and Readings = [Readings ; str2double(strsplit(out,', '))] ; which gives me Error using vertcat Dimensions of matrices being concatenated are not consistent. Error in Arduino_Control/start_btn_press (line 276) Readings = [Readings ; str2double(strsplit(out,', '))] ;
I can't speak for all publishers but a lot of them in my field do not sell solution manuals to anyone other than professors at universities. I have to go through a pretty lengthy ordeal to get solution manuals to books as an instructor, mostly because so many professors complain that easy access to solutions leads to students cheating. I would recommend trying to go to office hours or maybe posting a specific question to a problem and we'd be more than happy to help.
Yeah nevermind, it was nessesary because they wanted me to give the answer in the form of: y = function(x), but I didn't realize i could simply change this into: x = function(x).
Can you explain exactly why you want to simulate it slower? Does this simulation interact with some other system? Or do you want the graph to appear with the same speed as the real system would? 
I'm simulating an aeroplane, also plotting in 3d. The effects I want to look at are hard to see when it's simulated in full speed. I want to look at it in "real-time" so I can see how wind and other things affect it.
You may try this or similar solutions (there are a few on the file exchange): http://www.mathworks.com/matlabcentral/fileexchange/29107-real-time-pacer-for-simulink This is not the best solution. Your plotting function may have some form of time control (simulation time vs normal time). Look in the help of the block you are using. This would be a much better approach. Simulate the problem fast and then visualise with a pace that you want (pause, play, rewind, slow down). 
Thank you. I'm reinstalling MATLAB now because of something else, so I'll check that one out as soon as it's completed.
thank you, but i have my own implementation of connecting components, can i give hints or indexes to isosurfaces so that it know which points belong to which object, or can i "hold" the 3D plot what i mean to say is like in graph plot we hold the plot and make other multiple plot on it can i create each object differently and add them one by one by holding the 3D plot.
Unfortunately you're not being very coherent. Can you provide an example of what you want to do?
Yes, for aesthetic reasons it does. Most languages have coding standards that, while largely aesthetic, do make code more readable. For example, in MATLAB, variable names typically start with lower case letters. Class names start with capital letters. If you follow the coding standards then when you are trying to understand someone else's code, you're that much further along from the outset. Likewise if someone looks at your code, it will be easier to understand if it's formatted like other code they've seen previously.
Yeah, I'm starting to get it. You want to track intersecting objects in 3D space. You have a 3D array containing logical values which represent objects in some field. Let's say for now it's two blobs of fluid moving towards each other. If you have a sequence of these 3D arrays containing t snapshot you now have a 4D array D(y,x,z,t) in Matlab's notation. You could uniquely identify the objects on their rate of change of position n each snapshot i.e. Between D(:,:,:,n) and D(:,:,:,n+1). I'd imagine an inplementation of the Kalman filter would help. 
Nevermind, I figured it out. I can use Chrome remote desktop from the browser... talking about advanced technology...
Sure, $ ssh -Y username@linuxbox 
Awful website. What's wrong with imgur?
fixed and completely agreed. http://imgur.com/7PuGUEt Cheers.
The classic one is [ggplot2](http://docs.ggplot2.org/dev/vignettes/qplot.html) in R. The main one in Python is [seaborn](http://stanford.edu/~mwaskom/software/seaborn/examples/index.html), although there is also [holoviews](http://ioam.github.io/holoviews/), [bokeh](https://github.com/bokeh/bokeh), a pretty straight port of [ggplot](https://github.com/yhat/ggplot/), and, as I said, the next matplotlib release (currently in beta) will create nice-looking plots by default. [plot.ly](https://plot.ly/) supports a lot of languages, including Python and MATLAB. [gramm](https://github.com/piermorel/gramm) seems to be the closest thing for MATLAB.
thank you for your consistent replies, but should i be able to visualize such object through isosurface?
I think the Pirate Viking toolkit costs extra.
I think the joke might just be that plotting in Matlab is clunky and frustrating, but it also works in the sense that generating plots involves repeatedly opening and closing a window. 
no, you are right, i am willing to try i just want to know whether i can do it, with it, or not. its like i want to build a rocket, and someone told me liquid oxygen is a good fuel, but it is very costly, but i have the money to buy it, so i ask some expert in this field to validate that it will work, then i will pay, after that also i may not be able to build the rocket, thats different. as i have already told you i have to read from imread so there is lot of time investment from my side, so i just want to make sure about simple facts. i just want to hear from the experts that "the problem that you want to solve can be solved by this function, but how figure it out yourself" thats fine with me. i think i made it clear that it is not my unwillingness that is coming in between, it is like asking you whether i will reach my goal by following this direction. i do not want step by step solution i just want yes or no answers, thank you
It's like 5 or 6 lines of basic code - not rocket science. imread is the command line equivalent of file&gt;open, stick it in a for loop and populate a n-dimensional array. Then isosurf or sliceomatic the result. There must be dozens of examples of this online as well as those in the Matlab documentation. Without seeing your data I can't possibly say it'll definitely work, there's always a way to get to the point you need it just requires some time experimenting.
Or you can click on the "Edit plot" button and do it all through the GUI then do a diff on the new and old plots and have it automatically do it for you programatically. 
I wrote a short script to do a 'diff' on a struct. So you can use ```before=get(gcf)``` then make all your changes and then ```after=get(gcf)``` Then ```diff_struc(before, after)```, and it'll show you everything you changed so you can just copy paste it into your code to do it programatically. It's so much easier to use the GUI to get stuff set how you want it once then programatically do it in the future.
hahahaha
You can use contour or contourf and specify the desired levels and line thickness. Probably easy enough by specifying a colormap for each energy level data set. How do you plan on setting the values? Are you looking for an unattended approach or an interactive one?
That sounds pretty useful, you should put that in one of the Tech Tip Tuesdays (Thursdays?). Seriously, from a user-friendliness standpoint the GUI is top notch. Additionally, to all those who say Matlab isn't pretty, I submit [Matlab](http://i.imgur.com/hUaPwUD.jpg) versus [ParaView](http://i.imgur.com/VyhRlGN.png)
If you want to vary the colour along the contour line look at outputting the contour line coordinates by giving the command an output. This is an array which gives you a list of the value and number followed by the coordinates repeated for each contour level. Or use contourc. You should be able to use any of those and maybe the line command to draw lines wth variable colours at the levels prescribed by whatever defined the contour location. 
So your values are: vals = rand(100,100,100); And your positions are given by three matrices: pos = linspace (-10,10,100); [x,y,z] = meshgrid(pos,pos,pos); So x(1,3,5) is the X location etc... Now you can use something like: isosurface(x,y,z,vals); Or plot3 or whatever 3D plotting function. (Also check meshgrid, I always mix the order up with ndgrid)
My apologies I would mean to say I have three vectors each 100x1 that represent the x, y, and z
yes, technically one of the plots we have the data for but not the other since it is literally just a picture from a camera.
In that case, use meshgrid to generate three 100x100x100 matrices of your x,y,z points to do the plotting. Assuming you have x,y,z coords, you can color the surface by your values.
happy new year... and thank you.. i am going to embark on it now..
Er, your Z would need to be 100 x 100.
Using contourc worked, thank you! Instead of using the line function I used [this trick](http://uk.mathworks.com/matlabcentral/answers/5042-how-do-i-vary-color-along-a-2d-line) with the surface function to plot [this](http://imgur.com/zinqjQR), which demonstrates that I can change the colour however I like (varies with x in this case).
Use dir. Returns a list of directory contents
I remember downloading something like this from Matlab central. Try looking for subdir.
ndgrid is fine too if you call dim 1 x, dim 2 y, dim 3 z. This gives a right handed Cartesian system as well, with origin at top left.
Googling "recursion" is one of my favorite google easter eggs.
Relevant information about using MATLAB online is here: http://www.mathworks.com/products/matlab-online/
They're not started by an automated bot. It's a regular user, so he probably got distracted by Holiday stuff. 
I agree that it won't be used too much but I think this is a useful function that I will probably use a few times to show my work to my tutor when I am away from my desktop. 
Looks great and will probably be useful for making small edits when I'm not at my home computer. Also looks like it'll be easy to move files around without GitHub (so people won't judge my horrible code that is not GitHub ready). I wish they would add a collaborate feature that would allow multiple people to work on the same file at the same time. Like a pair coding functionality (I know many cloud IDE's allow for it). 
A lot of data file extensions are arbitrary. You'll have to figure out if it's ascii or binary data and read the file from there. Look at functions like textscan and fread. 
What is the file format like? Is it ascii? Can you open it with a text editor? Or is it some binary format? 
ncdisp('example.nc') http://www.mathworks.com/help/matlab/import_export/importing-network-common-data-form-netcdf-files-and-opendap-data.html 
How long have you tried to work at it for? No offence, but with a basic knowledge of matlab, a bit of googling and a couple of hours it should be easy to implement conways game of life or similar in MatLab.
`'Characters'` is also defined differently in different OSes, which is a nice surprise if you try to open a GUIDE GUI from Windows in OSX. As far as I know there's no way to do adjust the default. Once you have all of your components laid out you can `CTRL-A` and double click on one of the objects to edit all of their properties at once with the property manager. For this and many other reasons I've moved to strictly [programmatic GUIs](http://www.mathworks.com/help/matlab/creating_guis/about-the-simple-programmatic-gui-example.html) (or [class-based GUIs](http://www.mathworks.com/matlabcentral/fileexchange/47888-a-matlab-gui-with-classes)) with a pretty minimal change in programming speed.
So what is their topic of study, exactly? Controls? Modeling? Nyquist curves and stability contours are just tools. I'm an MSME with a controls background. Send me a PM and we'll work out some better contact methods.
I agree that Matlab is a lot easier initially with Matlab, but I have to say, I feel like matplotlib object-oriented methods are very powerful and a lot of fun. Your example used `pyplot` which is great for fast plotting or new matlab converts, but if you have axes objects, you can do a lot more with lots of flexibility. Of course, a lot of that has to do with personal preferences. As for looks, I like the look of matplotlib with a little bit of tweaking. I used to do something similar in Matlab. It all comes to personal preference.
If you are an absolute beginner, consider this textbook: http://amzn.com/0123943981 I started out with it when I first encountered MATLAB at university, and I felt it was a great introductory textbook, with the focus on being an **introduction** to the language.
There's either a built in function, one on the file exchange or elsewhere, or you go and write one to read the data. Any half decent documentation will detail the file structure. 
The only thing I found that was remotely useful was a function called sqlite3 that I don't have in my version of matlab. I have been unable to find any documentation that is relevant. If you have/know of any, please point me in the right direction
Probably. 'How do I open this file in Matlab?' is perhaps one of the most common questions I get asked and every time all they want is a throwaway simple solution - then they come back with the next file type. I wish people would learn basic file handling. 
Start with gradient: http://uk.mathworks.com/help/matlab/ref/gradient.html
For extremely common, standard file formats in scientific and technical computing, that seems like a reasonable expectation. I can understand if someone comes in with some obscure or proprietary format, but just accessing am sqlite database should not be difficult.
Sure, why not? It seems like a reasonably straightforward file structure. They could write it up and post it on the file exchange. 
And if the library or function isn't available for your language of choice then you should consider creating it - and sharing it. 
You can always follow the mathwork blogs, I learned a lot of new stuff out of it:http://blogs.mathworks.com/
Yes, I was beginning to suspect that the creator just had the distanceMatrix1 function sitting around, and had not taken that into account when sending us the package. It isn't referred to anywhere else in the code. Since my posting, I did some research on Distance Matrices, which apparently calculate the distance between two sets of points... except that everything I learned seems to imply that the inputs must be vectors of equal length, which is not the case for this function (x and y have lengths of 1280 and 800, respectively). I'm pretty sure that this was made for the project in question. I don't know who wrote the code, but I do know a guy who knows the guy who wrote the code, so I'll bite the bullet and ask him to explain it to me. Thanks a lot for looking into this.
Yeah, I know there are specific cases for square distances matrices, although in this case I think it's just being used more generically to mean a matrix of distance values. What is less clear to me (based on this very limited context) is the distance from WHAT -- i.e., the corner of the screen/image, the center of the screen/image, some other point, etc. Anyway, yeah, going back to the source seems like the easiest/most straightforward way to go. If that doesn't deliver anything useful, feel free to hit me back...
Why not iPython notebooks? Free cross platform and can be "just a simple calculator"
A great way to learn how to use Matlab is to identify a problem that can be solved with it, and then attempt to solve it. The examples are just that, examples.
You don't want to memorize sentences, but you do need to learn the words. Start out with setting some simple tasks for yourself and trying to complete them. [Project Euler](https://projecteuler.net/) has a lot of good problems, although it's more math-heavy than programming-heavy. Doing a few of those should give you a good sense of basic variable use and control flow (for, while, if/then, etc). Once you're starting to become comfortable, you can come up with tasks for yourself to do. Make a game of tic-tac-toe. Add an option for a computer opponent (don't try to make the computer smart, that's probably too advanced for you right now). Make some [virtual bubble wrap](http://www.virtual-bubblewrap.com/bubble-wrap.swf). Maybe go for something a bit more technical, but pick something that you can check for truth pretty well (e.g. write a function to numerically integrate data with a Riemann sum. Then generate some data with familiar functions like sin, cos, x^3 , or something much more complicated, and see if it gives you something close to the right answer. Make sure it converges on the correct answer as you decrease the interval). In the process, you should get pretty comfortable with the level of programming you'll need, and also get really good at figuring out how to find the right functions that you need to do things that you haven't done before. And have fun! Programming is awesome.
Try something. When it fails, figure out why. Pay attention to error messages, don't ignore them. Read documentation. You can get the help browser open by pressing f1, and if you have a function hilighted when you hit f1 it will even go directly to the relevant help page. I suggest going into the preferences and setting it to use the real help browser instead of the horrible help pop-up thing. There are also help pages for general concepts. Pay attention to the warnings given to you by the editor. Try to fix them. Don't just aim for code that spits out the result you were expecting. Aim for clean, elegant, logically organized code. It doesn't just make you better at programming, it makes better code and results you have confidence in. Data structures are the core of good code. The first thing to consider on a new project is "what's the most natural way to organize the data I'm going to be working with?" In almost every case, if you use a good data organization, the code follows easily. Learn about the debugger. Read documentation. 
For matlab? I do use IPython for quick calculations and data manipulation in Python. But beyond using it as "just a calculator", I would also like to use it as a way to check the behavior of matlab datatypes and array types. Also to plot functions, which is easier with matlab
I know what you mean- following tutorials makes everything seem so easy. But then when you try to do something on your own, it is really hard. But I think there is a good intermediate step. Following a tutorial, seeing that it works and then saying "I wonder how I could change this to do something a little different?" Like lets say they teach you about 2D arrays. Maybe you could say "how could I automate this script to work on a series of arrays?" Then you'd have to learn about 3D arrays or cell arrays. You have a mostly working script, and you modify it in your own way, and it teaches you why the things you do in the tutorial work. 
First off - I don't know anything about Simulink. If using Simulink+C is different than normal MATLAB+C (MEX) compiling, please forgive my ignorance here. Are you compiling the two C files to object files and then linking them together properly? http://www.mathworks.com/help/matlab/ref/mex.html#btxy0k2-1 When you've got a single C or C++ file a single MEX call is usually all you need but with multiple source files compiling/linking becomes a little more complicated (that's just the nature of the C/C++ beast). Notice in the link they use the "-c" flag to just compile the loadsparse.obj object file and then use another call to MEX to compile fulltoparse, to which they give it the loadsparse.obj file. Can you give us the commands you're actually running to do the compilation/linking?
Matlab for Neuroscientists does presuppose some familiarity with calculus, and maybe even linear algebra (I can't quite remember). The first chapters in that book should be really good though.
You should have a string variable that you append to in each repetition of the loop, and then after the loop you can print this string. (It's not always best practice to append to a string inside a loop because the string size is always changing, but it's the easiest solution).
Hi, I added that to the code and created a plot using x_unique and y_unique and got the same points plotted as before, however when I try to plot a curve through them I'm now getting the error 'Matrix is singular to working precision'.
If I understand correctly, this is all in one array? I would make 2 new arrays, one for the y values over 0 and one for y values under zero and plot them together. 
It really grows on you after a while.
Let us say your equation is: f(x) = x^2 - 6 = 0 This equation has two real roots, which can be solved trivially: x = ±√6 ≈ ±2.45 You can use the MATLAB function fzero to compute a root of a function either using an initial guess, or an interval. Example: First define the function in MATLAB using a function handle: f = @(x) x^2 - 6 Solve the function root using fzero. Now the function has two roots, discussed before. It is most likely required to call fzero multiple times with different initial guesses or intervals such that you can find both roots. We can find the first root of this equation with a negative starting point for x: firstGuess = -3; firstSol = fzero(f,firstGuess) firstSol = -2.4495 Can find the second root using a positive starting guess: secondGuess = 3; secondSol = fzero(f,secondGuess) secondSol = 2.4495 The main drawback with fzero is the user must be savvy about how to implement the starting guess or starting interval, as fzero can only find a root if it detects a sign change. If you attempted to solve the roots of the above function in the interval [4 5], you would recieve an error (well NaN, actually) as the function doesn't cross zero in that interval. Often with a more complicated function we don't know where the roots lie, so a bit of brute forcing may be required to find the solutions, i.e. test many intervals or starting guesses. You can use the method above to compute your roots to a high degree of accuracy, then use the roots solved from the fzero function to obtain error calculations when comparing to your own solver function. 
Beep off
That's the growing part ;) it's: beep off
A couple of ways you could do this. Either you could make a function that just returns 0 or 1 depending on the input *t*. This can be done for example with if statements, something like function output = pwm(t, T, d) if t &gt; k*T &amp; t &lt; (k+d)*T %set output to 1 end %other if statement... end The better way of doing this is just to look at the values of *t* (which I assume is now a vector, so it gets multiple different values) that belong in either category. For this the *find* function is useful. Here an example that might help you with the *find* function a = [5 4 3 2 1]; %Vector of some values indices = find(a &gt; 3 &amp; a &lt; 5); %Find indices that are between 3 and 5 a(indices) = 1; %Set these values to 1 There are probably other, way better ways of doing this, but hopefully these are simple enough examples.
Thanks for your comment! Don't hesitate to rate it on Matlab's fileexchange so that other people discover it too ;)
This is the code that I have found and am trying to modify by the way http://uk.mathworks.com/matlabcentral/fileexchange/44262-gale-shapley-stable-marriage-algorithm
Oh yeah that's true! 
&gt; Where I am struggling with Could you be more specific? Have you tried something that doesn't work? Are you asking for someone to do it for you?
Is ode45 any faster? in 2015b compared to earlier versions?
Well as far as understanding how the code works I think I managed that today but trying to alter the code the only way I could think to do it was to somehow store the results into a matrix but then there is no way to check if someone is preferred to them if that makes sense. And I want to do it myself but I am struggling to but no I don't want someone to just do it for me.
ode45 is coded in matlab and compatible, so my guess is that it would speed things up. I'm just not sure if my code is structured right to be compiled into C using the matlab coder, which is what i'm trying to determine. I am hopeful someone else here has had some experience with it and can let me know. :)
This seems to be a similar [question/response] (http://stackoverflow.com/questions/24850786/ode45-mex-file-runs-slow) as your original post. As mentioned before, trying to convert ODE45 into C isn't going to be that helpful since its been optimized for use in Matlab. The submitter in the linked article realizes with the C version of ODE45 their code runs even slower! I believe you would need to write, or find, pure C versions of your code instead of converting it with a program. If you wish to stick with Matlab, perhaps look into having it run by [Amazon](http://www.mathworks.com/products/parallel-computing/parallel-computing-on-the-cloud/) for you?
Call Mathworks and get a trial. If you come from a reputable institution it should be fairly easy to get a trial and a sales engineer to help you out with some of the conversion.
I'll see what I can do, thanks. I did upgrade the description - do you think the structure will compile nicely into C?
When you call the function, assign each output.
You have two options: 1. You can return a single variable, which happens to contain two elements. So `function thall=posso14(th,rs)`, and at the end `thall=[th3, th4]`. 2. You can do what you are doing now, and explicitly assign both values to variables when you call the function. So, for example, in the command window, `[myth3, myth4] = posso14(myth,myrs);`.
I've only ever done MATLAB and so far I have made functions/scripts to do the inverse of 2x2 and 3x3 matrices, sending emails, and a population simulation with Leslie matrices. Judging by the up votes on your comment and lack of on mine I have done something that people don't like but I genuinely don't know what? If you could tell me so I can change my question or whatever I would appreciate it.
Hi thanks for this, I've read some of the documentation however I just don't understand how to initially set up my problem. Any help beyond this would be amazing. Thanks.
That's the limit of help you're likely to get here. The ODE solvers pretty much do this problem for you, it's just a matter of connecting the dots between your problem and what the ODE solver needs. Other solutions abound though.... Get creative. 
This is like a rite of passage question for anyone taking Numerical Methods and Matlab.
You could use surf with your x, y, z and then color the surface by your f(x,y,z) expression. The other option would be to create slices by holding one variable constant and plotting as a function of the other two.
To set up the problem you'll need to transform the second order ODE into two first order ODEs as has been done in example Example 2 in the ode45 reference for a Van der Pol oscillator. 
Unfortunately f(x,y,z) won't be a surface. I'm thinking I might produce something which looks a bit like this: http://code.izzid.com/images/3d_with_surface.png where the bars show the min and max values over z. 
I know f(x,y,z) isn't a 3-D surface. I'm saying, plot it as [x,y,z] = meshgrid(1:10, 10:20, 20:30); h = x.*sin(x).*cos(y).*sin(z); surf(x,y,z,h) This plots the surface defined by x,y,z but then colors it based on your function h=f(x,y,z) rather than z (which is the default if you only do surf(x,y,z). The slice function is another way of visualizing this as well. For other methods, look here: http://www.mathworks.com/examples/matlab/1112-visualizing-four-dimensional-data
These files are for solving a ODE system using the Matlab ODE solver and using the [XPP](http://www.math.pitt.edu/~bard/xpp/xpp.html). XPP reads a file that defines the ODE system you want to integrate and XPP options. The options include solver, time step, etc. Check the broomhead.ode file to see how I did it. The broomheadxpp.m is just a Matlab function which edits the broomhead.ode file in case you want to change the ODE model's parameters. You can insert your ODE system and see how XPP performs against the Matlab solver. Something else: Is your system stiff? Did you play with the 'RelTol' and 'AbsTol'? Sometimes the default parameters are not the best.
Oh understood the question incorrectly. You want abs (200-sum (.1 * ones (1,2000))) That's a row vector where every element is .1.
You get 2 activations. I have it on my laptop and desktop. Here is how mine looks. http://imgur.com/aPaTHrZ
Do you know how to solve the equation for beta = 0 and lambda = 0?
Hi, thanks for commenting but I've been able to solve the question!
Thanks for the link, that was helpful! It's starting to look some well aligned 2d plots will do the job most appropriately. Those points in your example do not describe a surface. (since there are multiple z values for each x, y pair) Try it out! If on the other hand you had something of the form: surf(x, y, f(x,y), h(x, y)) then it would behave. 
"Operations" is not well-defined in this context. Do you mean processor instructions? Lines of Matlab code? Number of function calls? A FLOP is technically a float-point operation per second, which means a CPU operation involving a floating-point number. So calls such as zeros(N), which are probably "operations" by most definitions, don't produce any FLOPs (well, they will when parsing N and such). You're going to have to clarify what an "operation" is in this context.
additions, subtractions, multiplications, divisions,
What kind of popup window? If it's a dialog box about directories, just click the leftmost option.
That's an open file dialog. Since the author of the code you're using didn't think it would be helpful to give the dialog box a descriptive title, you'll have to ask him what file it is expecting you to open. I suspect it's looking for the file containing the data you want to analyze. 
Cells are not matrices, they are containers for general variables. They have no arithmetic or matrix operations defined.
x = A\b is both, faster and more accurate. It solves the system using Gaussian elimination, so you don't even need the inverse. There's an example about this in [here](http://se.mathworks.com/help/matlab/ref/inv.html).
Thanks for that! All this time I was always told there's no division operator in matrix algebra. I will definitely remember that from now on 
Put a "*" between "pi" and the "(" Matlab is assuming that pi is a function if you don't put the multiplication operator there. 
What you've said is entirely correct. I don't disagree per se so much as I feel compelled to add a caveat. Do not get into the habit of optimizing on the fly (unless you're doing something big and slow, in which case the benefits outweigh the costs). In most cases, the advantage of Matlab is that it makes it really easy to cobble together something that works. Don't spoil that advantage by falling into the trap of trying to write elegant code the first time through. Make it work, then write a perfect version of the thing that works. 
i copied them but reddit didn't show. this is my real code; http://imgur.com/UahSU0Q I am trying to find "N" and "N_hp" 
For starters, remove the second argument for input functions. I don't understand why you would need string there.
Your problem is that s, v, d, n and mi are strings. You want numbers, not strings. Either remove the ,'s' from all the instances of input() or use the num2str() -function when calculating N and N_hp.
Okay and thanks my friend. I understand now. My native language is not English. So when you say "string" i understand it "texts". And i deleted "please input" :)
Very naive way to do it is to match the set of n generated pseudo numbers with each seed's first n generated numbers. The higher the seed used the longer it will take.
A list/ array of the pseudorandom numbers would be more helpful than a set. However, this wouldn't work if the RNG was seeded, burnt some numbers, and only the started recording. 
I definitely remember something about RNG hacking from a linear algebra course, but I'm pretty sure you need to know the exact algorithm it's using to generate the numbers. Can't remember any more than that, I'm afraid :s
Yes. Strings are text. 
If you include 3 spaces before each line of code, reddit won't format your code. 
Yes, this is indeed possible: http://www.mathworks.com/help/matlab/matlab_prog/support-variable-number-of-inputs.html
Those really are random, not pseudorandom, unless you could figure out the weighting of the physical balls or something.. but that's a whole other rabbit hole haha
There's a theory that nothing is truly random.
Jesus. I think I'm way out of my league with this one. Thanks anyways though haha
something like non-local means denoising removes Gaussian noise when the parameters are correctly chosen for the image. It works great in OpenCV, but I'm unsure if it exists for FreeMAT. 
Sorry if I'm not fully understanding what exactly you are having problems with, but the fprintf() operator may be what you are looking for. For example n = 5 p = 3.14159 fprintf('n: %f\np: %f', n, p) outputs n: 5.000000 p: 3.141590 and there are other arguments to pass to change the format of the output.
And if you need the output to be in distinct column, you can specify the width of each column in the fprintf command. See [this page](http://www.mathworks.com/help/matlab/ref/fprintf.html) and this example: &gt;&gt; A = rand(1,3) A = 0.9134 0.6324 0.0975 &gt;&gt; fprintf('%12.4f %12.4f %12.4f\n', A(1), A(2), A(3)) 0.9134 0.6324 0.0975 
Try using caxis, it does exactly what you're looking for...
If you already have written code for 3D it shouldn't be hard to spot the mistake in the snippet you have provided. There isn't really anything special about higher dimensional arrays. Have a look at your parentheses and brackets, something is not right there Edit: also, with which number does matlab start indexing?
Oh yes oops it starts at 1! Thanks ok so if I write V(:,:,:,1) then I think I get what I want but when I try and use my function I get the "index exceeds matrix dimensions" error. 
Are you sure it's actually a 4D array? 
Vanilla matlab doesn't do tensor operations. Here's some options: * Search the internet for a toolbox that does tensor operations, or a function that does the double contraction you're looking for * Write your own function that does double contraction * Rewrite the objective function so that double contractions are replaced by single contractions (normal matrix multiplications). For this one, you need to carefully rearrange arrays before and after the operation. Also, if there are no constraints in your problem, you can use `fminunc()` (unconstrained minimization). 
Thank you for your answer. The tensor multiplication is not my problem for the moment, I think I know how I could it solve it. My main problem is the fact, that i cannot let matlab know that some of the variables in those matrices need to be minimized and not used as a fixxed value. I give you an example. In the help of fmincon you have the following equation: (x)1+x(1)/(1+x(2)) - 3*x(1)*x(2) + x(2)*(1+x(1)) Now theoretically you could write it on paper as: v1 = [x(2), -x(2)]; v2 = [3*x(1), 1+x(1)]; (x)1+x(1)/(1+x(2)) - dot(v1,v2); However, matlab uses the values for x(1) and x(2) and thus changes the function which results in another solution for fmincon. 
Are the the variables in x actually minimized or are they decision variables that need to change in order to minimize L?
This might be cheating, but do a text scan of your mfile, then find the characters '+-*/' (separately), and sum the vector for each one to find out how many times those appear. If there are loops, this won't work since it will only count each symbol once. 
I agree with phoenix4208's suggestion, for testing the files: xls (not xlsx) is a binary format (if I recall correctly), you might try to find a way to test if a file is binary or not, but a quick google search reveals nothing useful, oddly enough. 
This would work but the idea is that the second image is generated from a transformation matrix based on the user specified parameters.
This is a somewhat involved and non-trivial image processing problem; I think it's unlikely you'll find some out-of-the-box function to just throw at this, especially in an automated fashion. Image registration (https://en.wikipedia.org/wiki/Image_registration) is where you associate similar features in a image. This is the difficult part. If you can get a human to perform this part (semi-automated, perhaps with a nice GUI or something, see comment from /u/agentq512 above), your problem just became 95% simpler. You can use the information about points a-&gt;a', b-&gt;b', c-&gt;c', etc. to solve for your geometric transformation (translation, rotation, skew, etc.). If this needs to be completely automated, you should probably spend some time reading through the features in the Computer Vision and Image Processing toolboxes and see what you might be able to use: - http://www.mathworks.com/products/image/features.html#image-registration-and-geometric-transformations - http://www.mathworks.com/products/computer-vision/ - http://www.mathworks.com/help/images/-automatic-registration.html 
thanks for the suggestions! 
Actually, I dont think this will work at all. It says "Conversion to 'sym' from 'cfit' is not possible." cfit is what my curve handle is defined as.
cumtrapz Then search the output for where it hits 95% of the total sum.
That's the integrated area under the curve as you traverse the X direction. You can normalize it by the maximum value to get a percentage of the area under that section of the curve. Then every location in the output corresponds to a matching X value.
Just use the prctile function to find the 95th percentile of the data you input to hist. 
I am pretty bad at math and now very confused haha. I am not quite sure how to normalize it or how to find the X-Y points for the curve.
Yes but I need to find the x value in my histogram where the 95 percentile is. If I use the raw data it gives me some number like 30 something. Is this what I need? If I tried to use my data after it is separated into bins then I get a value of .05. Do you know that these values mean?
Matlab prints the result of any line that is not ended by a semicolon. So the solution to your problem could be as easy as typing the variable that holds your pictures path above the code that prints your results. To give you a more specific answer I would need to see your code. Can post it somewhere or PM it to me?
pm'd you the code
Have you read the doc page for prctile? Do you understand what a percentile is? It makes no sense to put the output of hist into it! You have a data set, I've no idea what it is but so 30 means nothing to me. But if your data is some vector with a distribution then it's likely a long vector of random doubles. Not unlike: vals = randn(1000,1); If you plot a histogram of that data then your X axis spans the range of values in your data and the Y axis is the count in each bin. The nth percentile gives you the value where n% of your data falls below. Therefore the 95th percentile is what you're looking for. If you're getting 30 from the raw data then draw a line at X = 30 on the histogram and check that it looks correct. Similarly the 100th percentile is simply the max and the 0th the min of your raw data. What do you imagine the 50th is?
NVM I got it this
Have a look at the ouputs array. The first cell in every row contains the filename while the other cells contain the measurement results 
I did a quick test with [this .edf file](http://www.teuniz.net/edf_bdf_testfiles/test_generator_2_edfplus.zip) (since I don't have any of my own) and [this code](http://nl.mathworks.com/matlabcentral/fileexchange/31900-edfread) (which I assume is the one you are using) and it seems to work fine? Are you calling the function correctly? (Not missing an apostrophe or something?) so: [hdr,record]=edfread('test_generator_2.edf'); 
Sorry, previous reply was meant to be to you, brain is dead because of trying to work on this stuff. I eventually figured out the problem, when I was initially looking at the code for the edfreader I think I inserted the the filename in there before I realised the function had to be in the actual matlab window... So it appears to be running now, but hangs after getting to step 2 (parsing the data) .... 
Are you sure it hangs? It doesn't give an explicit "Jay we're done" message. It also might take a while (I have no idea how big your files are).
Okay! That's a good thing since now you know stuff is happening :). First tip: end each line of code with a semicolon (As in my example). Else MATLAB thinks you want all the data displayed (hence all the numbers spewed on your screen, which is slow and really annoying). The reason why it's called record is because you wanted it called like that :). you could also do: [whatever_this_is,the_most_awesome_data_ever]=edfread('test_generator_2.edf'); And Matlab would call it "the_most_awesome_data_ever". I have to admit, that is quite a bit of data but it should be doable (I think :P). How are you trying to open the data? Just double clicking it? Or are you trying to use something like "plot()"?
And an adventure it is :P. I'll promise you now: there will be moments where you will loathe Matlab, but it's an awesome feeling when it (finally!) works. You can see your data in an excel like format by double clicking it's name in your workspace. Check out youtube for some video's [this video](https://www.youtube.com/watch?v=E56egH10RJA) seems to be a good start. And don't be shy and let us know if you get stuck. It can be quite a daunting task to do all this from scratch on your own. We can nudge you in the right direction :).
You would probably need three vectors, each one representing the possible values of x, y, and z (respectively). Then you need a 4D matrix where one axis is x, one axis is y, one axis is z, and the last axis has 4 elements corresponding to t1, t2, t3, and t4 (respectively). Then you can find the index of the value of the x vector where the difference with x is minimum, and do the same for y and z. This will give you 3 indexes, and then you can just index into the first three axes of your matrix and slice the entire last axis. So, something like this: ~, ix = min(abs(xvec-x)); ~, iy = min(abs(yvec-y));; ~, iz = min(abs(zvec-z)); tvals = tmat(ix, iy, iz, :);
The lowest if possible, but any would be fine to be honest.
I was aware that mex was just that. I was more looking for C or Fortran I guess so that I can use Matlab for pre and post processing and a compiled language for the processing core. Can you recommend a good C tutorial that is orientated towards scientific computing?
It's been a while, but I would just google c tutorial. You might also have better luck at /r/C_Programming/
so, you want all numbers from 111 to 888, and then you want to define "unique" numbers with the following rule ...eh. i tried defining it, but i don't think I understand your rule write out all the unique numbers for digits 1 through 2 (111-222) then see if that reveals a pattern that can be expanded to 1 through 8
I will preface this with saying that I doubt that this will be applicable to most of you. Matlab's editor lets you specify breakpoints, etc. so you won't need this. However, if you're like me and use a text editor (e.g. VIM, emacs, notepad++, bbedit, etc), you need to add these with the `keyboard` command. To continue, type `return`. To exit, type `dbquit`. To exit any nested calls, type `dbquit all` To figure out where you are in the chain of things, you can do `dbstack(1)`. Actually, what I did was put the following *script* (not function) into my path. I call `vkeyboard`. It prints the stack and how to continue: %% vkeyboard - Verbose Keyboard. Prints your location and instructions disp(' Entering keyboard mode at:') dbstack(1) disp(' Type ''return'' to exit and proceed') disp(' Type ''dbquit'' or ''dbquit all'' to exit without proceeding') keyboard
I am not sure whether to call this a tip or a hack, but... As you know, global variables are dangerous, because they aren't cleared when your function ends. However, if you want to pass large matrices between functions and modify them, it can be very slow because MATLAB makes a copy of the entire matrix if you change even a single element. A workaround one of my teachers taught us is to (ab)use the handle graphics system. You create a figure, keeping its handle in a variable, then immediately hide it. You can attach the matrices you want to the figure using its attributes, and pass the figure handle to additional functions. You can then access the matrices in these other functions without making a copy by accessing these attributes. When the outer function ends, close the figure using the handle and the matrices are also cleared from memory.
Thank you for you help...I finally figured out what was wrong. It turns out the data that I was trying to analyzed was saved in a folder that the program did not recognize (sounds simple enough but this is my first time using matlab so forgive the learning curve). I simply moved the file to the correct folder and opened the data using the file drop down tab on the dialog box and then it worked!
The only thing I can think of is something like: V3 = zeros(1, numel([V1 V2])); %Allocate V3 V3(1:2:numel(V1)*2-1) = V1; %Put V1 into every second element of V3 V3(V3 == 0) = V2; %Find elements that are zero and fill them with V2
It is somewhat fragile, but at the time there was no reason to think it was any more fragile than anything else in MATLAB as long as you stuck to documented interfaces. Of course hg2 has come around since and broken everything, but there was no hint of hg2 at the time. And it is much less fragile than trying to use global variables, since you have no clue what variables a random user will have in their workspace.
Use caxis as /u/manolitox88 said, and add lighting and shading options to make it pop. I often want to sweep through my data within small ranges to make details obvious, so I sweep, like so: close all load penny P = P / 20 ; surf( P ) colormap copper view( -180 , 40 ) camlight right; lighting phong; shading interp; axis equal tight s = std( P( : ) ) ; range = s * [ -1 1 ] ; centers = linspace( min( P( : ) ) , ... max( P( : ) ) , ... 100 ) ; for i_sweep = 1 : numel( centers ) current_center = centers( i_sweep ) ; current_limits = current_center + range ; caxis( current_limits ) drawnow end
Yeah that's exactly it. Handle objects are pass by reference. The OO in Matlab is kind of suck. 
You may consider integration: http://www.mathworks.com/help/symbolic/integration.html?requestedDomain=www.mathworks.com
Handle class objects are singletons. You can't copy it, only generate references to it. 
Handle classes are great, but Imho not the proper tool. You just want to access a property of the object from the outside. It just so happens that call changes the state of the instance. Make a property called 'next_value' and declare it dependent. Now create a private property '_next_value' and initialize to 0. Now, write a get.next_value method that flips _next_value and returns the value. Every time you access the next_value property, it returns what you expect AND updates the instance without copy. That said, there may be other reasons to inherit handle for an interface, but that should mostly be for its singleton behavior. For instance, driving multiple windows of a single gui. When one window changes its "copy" , all windows see it. 
You should be able to get around the copy-on-write by adding the data as a figure property (rather than as appdata) and modifying it directly (i.e., via wrapping with handle and using . access rather than the usual get/set); adding a property to a graphics object can be accomplished with schema.prop in the old graphics system or addprop in the new system. A better way, though, would probably be to simply create a handle-derived class to pass your data between functions. 
If you find yourself wishing that you could have a script execute whenever a function you're running exits--whether by completing or by throwing an error--you can do a couple of things. The most straightforward is to use the [`onCleanup`](http://www.mathworks.com/help/matlab/ref/oncleanup.html) function from Matlab (basically, an empty class which is there to take advantage of the fact that an object's `delete` function is called when the workspace containing the object is destroyed). By passing a function handle to `onCleanup` (e.g., `onCleanup(@doStuffAndExit)`), you can move to whatever the next task is. A few cases where this can be useful: * Send an email (or text) letting a user know the function has finished * Exit matlab (to free up a shared license; code is `onCleanup(@exit)`) * Shut down the computer * Kill waitbars that weren't cleaned up because a loop encountered an error * Create a window or play a beep to let the user know the function exited * Start another task (e.g., one that's lower priority and not dependent on the first task finishing successfully) A couple words of warning, though: don't use `evalin('caller',...)` from the onCleanup function ('base' is fine). Since the caller workspace is in the process of being destroyed, attempting to access variables in that workspace can cause Matlab to crash. If you need to save states from that function (e.g., an exit code), you'll need to include hooks in it to push the data to another scope (appdata, the base workspace, a global variable, etc.). And don't clear the onCleanup object or pass it to another scope--the delete function is called when all references to the object are destroyed, so `clear` will cause it to execute immediately while storing it as appdata or as a global will keep the cleanup process from occurring until the function exits *and* the global or appdata is cleared. 
You can prevent a function from being cleared by calling [mlock](http://www.mathworks.com/help/matlab/ref/mlock.html) from the function body. You can also use a [singleton datastucture](http://www.mathworks.com/help/matlab/matlab_oop/controlling-the-number-of-instances.html) to store globaly accessible data. The new class system has made a lot of the traditional MATLAB hacks less necessary.
Is this true? A singleton is a pattern where only a single instance of a class can ever be generated, and generally just exposes a static "getInstance()"-like interface. To prevent anyone except the singleton class itself from constructing instances the constructor is made private. If the handle class were a singleton we'd only ever be able to get access to a single instances, and _all_ classes which inherit from handle would be the same thing. I definitely can have two figure handles whose 'Position' properties are distinct. - https://en.wikipedia.org/wiki/Singleton_pattern - http://www.mathworks.com/help/matlab/matlab_oop/controlling-the-number-of-instances.html#buuu4r2 
Not totally sure what you are going for here. Do you have an example of what you are creating? Is this just a single line on a plot or is it more than that?
I found these [videos](https://www.youtube.com/channel/UCYA4NBrvyzDcbwB2JcjV6dg?spfreload=10) very useful a couple of months ago. It has plenty of material related to the basics, GUI and object orientated MATLAB. Hope it helps
How are you opening the file without first having the filename? typically you read an image with something like: I = imread('test.png'); You can't open or evaluate I without first knowing 'test.png'.
A few things: First, note that each matrix can be more simply represented by a Nx2 matrix. Grabbing a diagonal from a 2D matrix is easier with single-indexing. Suppose the size of the matrix is (N,N). We can grab our two diagonals with the following: diag_lower = (0:N-2)*(N+1) + 2; diag_upper = (0:N-2)*(N+1) + (N+1); rmat = [r(diag_upper) r(diag_lower)]; tmat = [t(diag_upper) t(diag_lower)]; Now we have "rmat" and "tmat" which are Nx2 matrices containing only the values we want. To generate all possible combinations of *k* elements, I would recommend using **nchoosek** on every size up to N-1: indices = 1:N-1; for i = 1:N-1 orders = nchoosek(indices,i); % each row of the "orders" matrix is a set of indices r_temp = rmat(orders,:); % select out only the diagonal values we want ...do other stuff... end The "do other stuff" can be your selection criteria, which I don't fully understand in this case. But this should give you a good start.
This makes a lot of sense, Thanks. Just so I can be clear, what you are doing is first creating your linspace of x, simple. Then creating a y vector of zeros. Creating a loop of i values from 1 to when x is finished. Running an equation using the values of x and storing it in one of the y values of the vector. ending the loop of i values then plotting the x versus y. if so, can I change i to between 1 and 1500, and use these values in teh equation for x?
Basically, yes. x is a presumably a vector with 100 elements, so the line for i = 1:length(x) is the equivalent of: for i= 1:100 Just replace length(x) with whatever number of elements x has. Also, the line inside the for loop should probably be something like this: for i = 1:length(x) y(i) = equation(x(i)); % do whatever calculation you want, but assign the result to y(i) end Note the x(i) instead--this uses *i*^th value x in the equation and assigns the result to the *i*th value of y.
Thanks for the reply! Although I am unfamiliar with integer programming, I think I get the gist of what you've suggested. I am having two issues with this method: 1) Is the creation of 12-bit binary strings setting a limit on the size of r and t? I would like to be able to do this operation on square matrices in general. 2) &gt; Multiply all the vectors together to get a master list of permissible combinations. Select only those. &gt; THEN take the product of values of the permissible bits, and accept them if they fall below the threshold. The thing is, without the multiplication step to check if the sequence product is above threshold, there are an infinite number of sequences that satisfy the criteria. For example, the sequences: {t21, r23, r21, r23, r21, r23, r21, r23, r21, ....., etc. to infinity} {t21, t32, r34, t23, r21, t32, r34, t23, r21, t32, r34, t23, r21, .... etc. to infinity} are valid. So the multiplication step would have to be done each time a new term is added to each sequence to know when to terminate each sequence.
&gt; True, but the matrix indices have physical relevance to the system I am trying to model, so I wanted to preserve that as much as possible since I will need to extract all matrix indices in the proper order after each valid sequence is generated. That's fine, but for these purposes, you're better off converting to vectors and then converting back to matrix indices. This is easy: each row is a series of indices (I_0 + i, J_0 + j). Would you mind clarifying your criteria? are the upper and lower diagonal lists treated separately, or are they combined into one list? You said "I would like to find every possible combination of the nonzero elements in these arrays" and that is ambiguous as to whether you apply your list of criteria to a single list containing both of these arrays, or if you apply the list individually to each array.
Have you submitted a bug report to the mercurial [bug tracker](https://bz.mercurial-scm.org/)?
A few things: When you say "the logical values of the roots", what do you mean? In Matlab, the term "logical" has a specific meaning--it means either true or false. "0" evaluates to false, anything else evaluates to true. The roots() function returns a *vector* of values. So when you say coupling_polynomial_roots = roots(...) This will return a vector of values of length *p*, where *p* is the polynomial order; in your case, it looks like your equation is order 4, which means that coupling_polynomial_roots will be a 4x1 vector. Calling logical(coupling_polynomial_roots) returns some variante of [true;true;false;true]. Since this a 4x1 vector, you cannot assign it to logical_coupling_polynomial_roots(i). You can save all of the roots by making coupling_polynomial_roots a 4x5000 matrix; each column stores the results for each value of kz, as in the following: kz = -5000:5000; %main range coupling_polynomial_roots=zeros(4,5000); for j=1:length(kz) coupling_polynomial_roots(:,j) = roots([1 0 (((-j).^2)+(2*j*kb)-(kb^2)-(kt3^2)) 0 -((4*(kappa)^2)*(ko^4))]); end Each iteration of the loop, we grab the 4 roots and place them into a column. I'm not sure what you're intending to do wtih the logical roots though; do you mean real roots?
It's the real roots I was attempting to use. I probably mixed up logical and real. I understand that the matrix is made up of the four values of the polynomial roots, vs the 5000 values for kz. For the function j=1:length(kz) does value for j for explicitly from 1 to 5000, not including -5000? I wanted to exclude the negative values of kz from this section. Secondly, I have seen (:,j) used a few times in the tutorials but never exactly understood it. It is being used to create the values for the matrix, in other words, : denotes that whatever follows will fill up the four x axis spaces in the matrix (because we have four polynomials and ranges will match) for the value of j (which is on the y axis).
Not exactly relevant but: On the note of: &gt;For those of us in the Matlab community who use version control systems to manage Matlab projects... This should be **EVERYONE**. There is very, very little downside to using a version control system with your matlab codes. The extra time and complication of it will often pay off time and time again. Every result you generate, if you append some commit/revision identifier (hash,rev number), you know you can get all of the code back and recreate it. Have you every accidentally screwed up a code? No problem! Just revert. Seriously, even if you don't collaborate, it makes life so easy. I think git is probably the way to go for most, but SVN is fine too. I do not know about mercurial but obviously, take this post into consideration. BTW, using Dropbox is better than nothing but not by much. What you give up in convenience you lose in lack of control and annotation (commit messages). Please look into using version control if you don't already! 
Here is a full solution. The result returns a cell array of sequences; each sequence is an N-by-4 matrix with the following form for each row: [row column w val] where *w* is 0 if the step is the r matrix, and 1 if the step is the t matrix. **val** is the value of the specified matrix (r or t) at that step. So, for example, if we specified our threshold of 0.25, our output gives a cell matrix and we choose to look at path #5: &gt;&gt; sequences{5} ans = 2.0000 1.0000 1.0000 0.8392 3.0000 2.0000 1.0000 0.8392 2.0000 3.0000 0 0.5410 1.0000 2.0000 1.0000 0.8421 This means we take the following path: 1. (2,1) in the **t** matrix 2. (3,2) in the **t** matrix 3. (2,3) in the **r** matrix 4. (1,2) in the **t** matrix And this path has the product 0.3209 (the product of the 4th column), which is greater than our threshold. The function here generates random r and t matrices of size N and returns them as output arguments. Feel free to modify it and set r and t to be inputs to the function, and remove the random generation part. Let me know if you have any questions. Here is the function: function [sequences,r,t] = traverse_mat(N, threshold) %TRAVERSE_MAT Find all valid traversals based on /u/Who_What_Where21 's criteria % Input: N...................size of matrix % threshold...........threshold value for product of path values % % Output: sequences...........cell array, each element is a valid path % r..................."r" N-by-N matrix, randomly generated % t..................."t" N-by-N matrix, randomly generated %----------------------------------------------------------------------------------------------------------------------- R = 0; T = 1; % matrix type for clarity % set up random test matrix r = zeros(N); t = zeros(N); diag_lower = (0:N-2)*(N+1) + 2; diag_upper = (0:N-2)*(N+1) + (N+1); r([diag_lower diag_upper]) = rand(2*(N-1),1); t([diag_lower diag_upper]) = rand(2*(N-1),1); % grab matrices as two rows rmat = [r(diag_lower)' r(diag_upper)']; tmat = [t(diag_lower)' t(diag_upper)']; % note: each sequence is a Nx4 matrix, specifying row, column, matrix type, and whether it passed the threshold test start = [1 1 T tmat(2,1)]; used_R = false(N-1,2); used_T = false(N-1,2); used_T(1,1) = true; sequence_tree = traverse(start, used_R, used_T); sequences = unwrap(sequence_tree); % filter out failed paths thresh_locs = cellfun(@(x) prod(x(:,4))&gt;threshold,sequences); sequences = sequences(thresh_locs); % adjust results to from N-by-2 form to full matrix form sequences = cellfun(@(x) [x(:,1)+(x(:,2)==1) x(:,1)+1-mod(x(:,2),2) x(:,3) x(:,4)],sequences,'UniformOutPut',false); if(isempty(sequences)) fprintf('No sequences found!\n'); else display_sequences(sequences); end % display sequences in useful way function display_sequences(sequences) L = length(sequences); for i = 1:L seq = sequences{i}; N=size(seq,1); fprintf('Sequence %g: ',i); if(seq(1,3)==0),ch='r'; else ch='t'; end fprintf('%c(%g,%g)',ch,seq(1,1),seq(1,2)); for j = 2:N if(seq(j,3)==0),ch='r'; else ch='t'; end fprintf('-&gt; %c(%g,%g)',ch,seq(j,1),seq(j,2)); end fprintf('\n'); end end % unwrap sequences function sequences_all = unwrap(sequences) if(isempty(sequences)) sequences_all = []; else sequences_all = [sequences(1); unwrap(sequences{2}); unwrap(sequences{3})]; end end % recursively traverse through all sequences function sequences = traverse(sequence, used_R, used_T) pos = sequence(end,:); seq = cell(1,2); % we're on lower diagonal if(pos(2)==1) % move right to next R if(pos(1) ~= N-1 &amp;&amp; ~used_R(pos(1)+1,2)) used_R(pos(1)+1,2)=true; seq{1} = traverse([sequence; pos(1)+1 2 R rmat(pos(1)+1,2)],used_R,used_T); end % move straight down to next t if(pos(1)~=N-1 &amp;&amp; ~used_T(pos(1)+1,1)) used_T(pos(1)+1,1)=true; seq{2} = traverse([sequence; pos(1)+1 1 T tmat(pos(1)+1,1)],used_R,used_T); end % we're on upper diagonal elseif(pos(2)==2) % move left to r if(pos(1)~=1 &amp;&amp; ~used_R(pos(1)-1,1)) used_R(pos(1)-1,1) = true; seq{1} = traverse([sequence; pos(1)-1 1 R rmat(pos(1)-1,1)],used_R,used_T); end % move straight up to t if(pos(1)~=1 &amp;&amp; ~used_T(pos(1)-1,2)) used_T(pos(1)-1,1) = true; seq{2} = traverse([sequence; pos(1)-1 2 T tmat(pos(1)-1,2)],used_R,used_T); end end sequences = [{sequence} seq]; end end
Could you format your code? You can add 4 spaces before each line so it becomes readable to us. like this! Don't forget the 4 spaces! 
Yes it does assume that. It's easily removed, but the reason I put it in is because there are "loops" that can exist otherwise and give you infinitely long sequences. In addition, you can't just stop a sequence when it drops below threshold, because it's possible that a few steps in the future will bring the product above threshold again. For example, suppose the threshold is simply 10.0, and we have the following chain: 12 --&gt; 2 --&gt; 1/6 --&gt; 3 This is a legitimate path, because although step 3 brings us below threshold (the value is 4), step 4 brings us to 12, and so this path is valid.
Great, and again thanks very much for your help.
If you're trying to improve speed, you should take a look at the MATLAB Coder toolbox, which can automatically generate C code from your MATLAB code.
Yeah, that's what I'm confused about. It doesn't make sense for me to be getting negative numbers, but even if I'm just plugging it into my calculator, at T=253, k=.0002, and log10(.0002)= -3.699. 
Right, but mlock cannot be used to prevent clearing of variables (other than persistent variables in the locked function), so it doesn't usually pertain to the referenced trick. Singleton classes could be used to help with copy-on-write issues, since making the class singleton would prevent accidental creation of multiple instances--but only if you can put all of the data you need to pass between functions in that single instance (a non-singleton handle-derived class provides the flexibility of allowing multiple instances with pass by reference--I can store x in instance a and y in instance b, then call a function f on both x and y passed by reference). 
Oh duh, my bad. When you plot with semilogy you give it your x,y values, not x, log y
PM'd
Sorry if this is wrong, not an expert but I believe I've done this before. Create variable c, a 10x3 matrix, where each row is the rgb color code for that integer. Row four would be something like [0 1 0]. Colormap (c)
That is a function, not a script. It also looks like code that came as part of a mathworks toolkit. You should not edit it. Also, it looks like it provides a distance matrix as an output value. That should do what you need. 
Ok, I've updated my other post with the full code along with the fix; it should work now. I also put in a little new function to print out each sequence so it looks like: Sequence 1: t(2,1) Sequence 2: t(2,1)-&gt; r(2,3) Sequence 3: t(2,1)-&gt; r(2,3)-&gt; r(2,1) Sequence 4: t(2,1)-&gt; r(2,3)-&gt; r(2,1)-&gt; t(3,2) Sequence 5: t(2,1)-&gt; r(2,3)-&gt; t(1,2) Sequence 6: t(2,1)-&gt; t(3,2) Sequence 7: t(2,1)-&gt; t(3,2)-&gt; r(3,4) etc. Regarding the initial question: this is a tough one. Note that any subsequence which is a loop whose product is greater than one can be iterated over enough times such that any sequence containing it is guaranteed to be above the threshold (assuming we are not dealing with negatives; the product of the values outside the loop is negative, then the loop must itself contain a negative). For example, suppose we have a sequence (a_1, a_2, ..., a_n), and suppose within this sequence we have (a_i, a_(i+1), ..., a_m) located somewhere. if a_m = a_i, and if the product of (a_i)*...*(a_m-1) is greater than 1, then we can continue looping until this product is arbitrarily high. In that case, it doesn't matter what other values are in the sequence--we can just keep looping until we get a high enough number. We can update the code to detect the presence of loops. It won't be that hard to do if you're interested.
You're plotting log data to a log scale, which is like doing log(log(x)). By the way, you can do better control by setting your log-axes manually; IMO this is easier: plot(x,y); set(gca,'yscale','log'); set(gca,'xscale','linear'); % on by default, but just to show the options
I am also working on a diffusion convection problem. Send me the code please?
You can use end to display the last letter in a string. If your string is called XYZ, just use whateverfunction = XYZ(end)
If it's any help I use this code to create the spectrum. W = hamming(2048); spectrum = log(abs(fft(signal.*W)))
use regular expressions: TS1='%@gbc3' charsOnly = regexp(TS1,'[a-zA-Z]') lastChar = TS1(charsOnly(end)) 
It looks like this is probably your first time using the FFT function in MatLab. So I'll cover everything you should know right now. First, your data set is NOT from 0 to 44100 Hz. Your maximum frequency is the Nyquist frequency, or half of your sampling frequency. Your frequency range will be up to 22050 Hz. Second, your data set actually has data from the Negative Nyquist Frequency (-22050 Hz) up to the Positive Nysquist Frequency (22050). The SPAN of your data is 44100 Hz. Third, the FFT function does NOT return data in this order. MatLab takes it's bin order from a very old C++ function, which was too concerned doing FFT things to worry about something as trivial as a basic quality of life issue like actually returning values in convenient and orderly way. MatLab then decided to let every user try and figure out the order in which bins are made, instead of pasting it in the Help topic. I am bitter. For the record, the frequencies of the bins, as they are naturally returned from the FFT function are: For Even Functions: FrequencyBins = dF * [0:1:Length/2-1,-Length/2:1:-1]; For Odd Functions: FrequencyBins = dF * [0:1:(Length-1)/2,-(Length-1)/2:1:-1]; Where "Length" is the number of samples you are using for the FFT and dF is SamplingFrequency/Length. This returns a vector which goes from 0 up to your positive frequency limit, skips to your negative limit, then continues up back toward 0. For EVEN length vector, there is a data point at DC and *exactly* at the negative Nyquist frequency. There is no positive Nysquist frequency data point. For an ODD length, there is only a DC point, and both of your end points are slightly offset from the Nyquist frequency. If you do plot(FrequencyBins, FFT Results,'.') You should get a plot which is properly reflected about the DC axis. Note, if you do not use the mark-only condition, you will see a line which goes straight across your plot for no good reason. That's the point going from your negative to positive frequency. If you are only concerned with positive frequencies, then just limit the plot to the positive values. If you are going to do this, you should scale all but the DC values by 2 in order to properly represent their magnitude and power. Otherwise don't scale anything, and show both positive and negative frequencies. You can use the fftshift to "rearrange" the vectors into the order that they are plotted. Using fftshift on the frequency vectors I listed above will return a vector from your negative most frequency up to DC, then from DC up to the positive most frequency. If you are going to use fftshift, you need to use it for both the frequency bin vector and the FFT result vector. If you need to show lines instead or between marks, use fftshift. plot(fftshift(FrequencyBins), fftshift(FFT Results)) As for displaying dB, it is probably best to simply do semilogy, without the logrithmic function. If you use loglog, be aware that MatLab has no idea what to do with negative frequency data. It will throw a warning, but that's all. 
&gt; I am bitter. So say we all!
I am not sure what you are trying to explain. I am well aware of the discrete nature of the DFT and the FFT, and the effect of sampling frequency and length on spacing. I also defined the frequency increment in my discussion. My problem is that MatLab has zero discussion about the bin frequencies. Their only example goes from 0 to floor(Length/2), and never discusses why. For first time users, things then look really weird. It starts with first negative frequency at floor(Length/2)+1, which is actually the most negative bin. Why most negative? Why not least negative? And then there's the order of negative values. They increase in frequency, just like the positive ones. Why? There's icing on the cake. For even lengths, the most Negative bin is at the Negative Nyquist Frequency. The only reason you could know this is if you actually went and read the FFTW documenation. But if the Nyquist Frequency can be used for even length sets, why use the negative one instead of the positive? These features are weird. It almost seems like it doesn't work correctly. And MatLab never explains them. Except there are good reasons for each choice. 1. **Q:** Why is the Negative Nyquist Frequency used for odd length sets, instead of the positive? **A:** Because then floor(Length/2) always returns the most positive frequency bin. For either even or odd data sets. There's no need to change any code or add any conditionals. 2. **Q:** Why is the order from most negative to least negative? **A:** Because all you need to do then is re-order in order to plot or manipulate it, as opposed to a sort or fliplr. (fftshift and ifftshift are only ~20 lines of code.) 3. **Q:** Why is the first index DC instead of the most negative frequency bin? **A:** Because then you can always access DC with the same index (1), regardless of size. My problem is that the result order from fft looks very confusing, and MatLab does a very poor job of explaining the order of bins. They adopted the form from FFTW, which is efficient and magnificent. But they have failed to explain to users why they use that form, and use (i)fftshift as a permanent stop-gap measure. I simply feel that they need to add a description of the proper creation of frequency bins, so that discussions exactly like this one, can stop happening every time someone wants to learn how to use the fft. 
Hi, thanks for your answer. It's been helpful, I'm going to look into it more. Thank you.
You realize that version is from 2012 right? There have been *50 releases* since then. What do you think would happen if someone came here and said "you shouldn't use MATLAB because release 2012a had a bug?" The post would get downvoted into oblivion, and rightly so.
 X' * X; You should really read a Matlab tutorial if you're stuck on something like this.
&gt; So I get that functions are different from scripts in which I cannot refer to input_image or threshold in my functions because they are undefined. I think your problem is that you're trying to "run" the function, which will throw a "not enough inputs" error. When you use MatLab's "run" button from the UI or using the F5 button, what actually happens is MatLab checks that the function is in the path, then types in the terminal your function's name and tries to execute it. If you hit "run" when looking at the threshold_image function, the line that will show up in the terminal is just &gt;&gt; threshold_image Which has no inputs. So it's going to throw an error. But when you write, in a script, or type it into the terminal manually &gt;&gt; threshold_image(SomeImage,SomeThreshold) You're passing the two input arguments you need. What's actually happening is, when you run the function, MatLab goes to the functions workspace, which is separate from where you called the function. MatLab then takes your input arguments and moves them into that workspace under the same name that they have in the function description. If you don't pass an input argument, MatLab never makes the variable in the function workspace. The function will then chug along until that variable is needed, and then it throws an "Undefined function or variable" error. But then MatLab recognizes that the variable was supposed to be defined when the function was called. So it then throws a "not enough input arguments" error. For efficiency, most functions written by MatLab will immediately check if the function has enough input arguments using nargin. If it does not, it immediately throws "not enough input arguments." This just skips waiting for the function to check if the variable was supposed to be passed as an input. A little more effort for coders, but a little less work for MatLab. The best way to explore this is by setting a breakpoint in your function on the second line (See those little hyphens next to each line of code, on the left? Click it so it turns into a red dot), and giving it some vague inputs. You'll see that you now have your inputs listed in the function workspace under names that match up with their position in the input arguments list. If you don't list an input, it won't show up. You can write functions which will work variable length inputs using [input parsing](http://www.mathworks.com/help/matlab/ref/inputparser-class.html) or [varargin.](http://www.mathworks.com/help/matlab/ref/varargin.html?refresh=true) However, these should NOT be used willy-nilly because you want to test your function using the run/F5 command. These are additional features which should really only be used where they are needed- In complex functions which require variable input arguments.
As the other comments address your actual question, I'd like to point out that you will have a huge performance gain if you avoid using *for loops* for what you are trying to do. MATLAB can perform several operations with entire matrices. So, you could change everything from line 3 to the end by: thresholded = im&gt;=(threshold*256);
Thanks for the reply, I think I understand now
If you just want the data and don't want to delve into Matlab you could look at alternatives. Blender has a great built in 3D object tracking feature that's UI driven and you can use a Python script to export the data to a file. 
It can track hundreds of objects simultaneously. You may need to prod and poke it sometimes if a particular track gets lost. It's useful for solving camera motion. Say you have a moving camera and a stationary scene. You can track the relative movement of many static points in that that scene and then solve for the particulars of the camera, focal length etc. This will then give you the camera trajectory in the scene. What you're looking to do sounds trivial for Blender. 
The idea is the user calls the function equation(f,x) like equation(2*x,4) which should return 8 but everytime I try it, it says undefined variable or function x
When call the function like this in the command window: equation(2*x,4) It does not recognize x, since it is not declared. Therefore you should first declare x as a symbolic in the workspace: syms x Also change the second line of your function to: first = matlabFunction(f);
 function set.propname(self, value) doStuff(); self.propname = value; end Does this not work for your purposes? 
No, just no. We're currently in Debian 8.3, you're still in 7. Jessie ships Mercurial 3.1.2, you can use backports for Mercurial 3.5.2.
Ah, I like the dbstack solution. I'll try this. The class is quite fixed so I think it should be ok.
Instead of: (homeworkAverage + classworkAverage + quizzesAverage) / 3) Try something like: mean([homeworkArray, classworkArray, quizzesArray])
You are likely trying to arithmetically add arrays (or vectors, pardon my terminology) of different lengths. If the dimensions (lengths) are not all the same, Matlab gets confused.
https://en.wikipedia.org/wiki/Knapsack_problem
&gt; We're currently in Debian 8.3, you're still in 7. Thanks for telling me what software I actually run. Meanwhile, from my command line: cromissimo@debian:~$ lsb_release -da No LSB modules are available. Distributor ID: Debian Description: Debian GNU/Linux 8.2 (jessie) Release: 8.2 Codename: jessie But yeah, you must be right. Surely I can't have access to a current installation of Debian, nor could I ever use different computers at home and at work. That would be witchcraft.
If you want an x axis on your plot, you can feed it to the plot() function, like this: plot(x, y) if you want to change the x axis by a factor of k, just do this: plot(x/k, y) 
http://www.mathworks.com/help/matlab/creating_plots/change-tick-marks-and-tick-labels-of-graph-1.html
Note that the format string is case-sensitive ([documentation](http://www.mathworks.com/help/matlab/ref/datetime-properties.html#prop_Format)). I think you might want the following: C = textscan(fileID,'%{HH:mm:ss,SSS}D'); Note M is month, whereas m is minute. Similarly, s is second, whereas S is fraction of a second.
Thanks that does indeed work. Apparently it is the otherway around for [formatIn](http://mathworks.com/help/matlab/ref/datenum.html?searchHighlight=datenum#input_argument_datestring).
That's what I had looked at and referred to as manually editing it