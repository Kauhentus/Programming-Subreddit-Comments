I'd like there to be a seamless integration with the computer's files, can that even be done with a web app without manually pulling files every time they're needed?
You can use cocoas scripting bridge to display and manipulate whatever you want to display... Else if you want it inside your own application you can use webviews as already mentioned here. Why do you want a browser interface anyway?
It's what the client wants, but I think it's because he will be using this program as a part of his normal workflow, which happens within the browser. Just makes his life a hair easier to be able to access within a browser tab, as opposed to as a separate program. I also think he knows some html/css and wants to be able to tweak it himself.
https://github.com/atom/atom-shell
This looks like an interesting way of doing things, but I'm a little lost. What exactly is the factory pattern? 
This is a great analogy. Now I'm just gonna be thinking of roombas when thinking about arc and gc
Usually I see this done by implementing a custom NSURLProtocol, you can implement a custom protocol (myapp://) and then use a WebView to access it.
well, yes, however, you could easily have the app run on a desktop. https://github.com/maccman/macgap
Or [[NSOperationQueue mainQueue] addOperationWithBlock:^{ // update stuff }]; (always prefer the high level interface)
Exactly. OP, it sounds like you're overly concerned with this stuff, without having tried first, and trying to force your mindset into what you're used to from a different environment. Don't. Go with the flow. You're coming to this new environment, right? Do what everyone else did: write things without concern for async, let everything run on the main thread, then find your pain points. Refactor into blocks or operations where needed (remembering that any update to the UI as a result of those operations needs to happen on the main thread), and test again. Over time, you'll identify the places where you want to proactively define async blocks or operations, and you'll automatically do that on subsequent projects. But, to try to understand all this stuff in advance of knowing where your pain points are now, is folly. You asked a question above about why there's a mixture of API styles. It's because blocks and GCD came later to the party. They weren't available in the early versions of iOS. Once we had them, more and more things (both in Apple's code, and in 3rd party code) started to adopt them. And, once that started, people needed ways to ensure their background code could update on the main thread properly, so control schemes and helper frameworks started to emerge. I'm sure you saw evolution over your 6 years of node.js; don't forget that we were over here evolving at the same time.
Exactly how new of a programmer are you? If you're new to development in general (you've only taken a few classes), I would suggest not doing either and just focusing on Objective C (or C++ or Java) because learning to program is pretty hard and when you're also trying to learn UI, it can be extremely daunting. But since you said you're familiar with Objective C, is it just the UI you don't understand? Because something like a calculator app should be pretty simple for you to build yourself and learn by doing. The Big Nerd Ranch books are really good with sample code and explanations about what that code does and why. It's easier then just looking at a project and guessing at why something is the way it is. For a really great general overview of iOS, check out the Stanford iOS lectures on iTunes (they're free). They were really helpful to me. :)
I'd be able to do it myself, but it would also be interesting to see how others do it, assuming the resources already exist. I've taken just a few classes so far, with the most advanced being a Java algorithms and data structures class, which familiarized me with classes, objects, constructors, and specific data structures like dictionaries, maps, linked/array lists, as well as the basic things that I already knew. I know a couple of basic things about Objective-C syntax and the foundation framework. In your opinion, how much do you I should know about Objective-C before I learn UI?
Basic programming concepts like data types, if statements, loops, classes, subclassing, things like that. You can definitely be learning both at the same time (and you probably always will be) I just think it's important to understand basic OO concepts before trying to take it all in. I found the Big Nerd Ranch Objective C book really helpful and it made the BNR iOS book a lot easier to understand. The Stanford lectures also have "homework" assignments that you can google the solutions for, and all the code that the professor types in the lectures is posted online for downloading. That could is nice to look at because you can also go back and listen to someone talk about it as they're writing it :) 
Ok, I feel like I'm familiar enough with what you listed, including OO. I've gone through a good portion of Kochan's Programming in Objective-C. Thanks for your advice, I'll definitely check out the BNR iOS book.
The only extra thing you'll really want to spend time learning when you're getting into the UI is MVC. That would be hard to pick up on by just looking at code but the BNR book goes over it. Good luck :) 
Ok, will do. Thanks! :)
I'm sure this is more of a plain C thing but when you have a variable declared at the top of a .m file with a underscore prefix, what is happening?
It's an instance variable. As opposed to a variable only available in a method. Also it's usually not available to other classes (like a property) Someone correct me if I'm wrong 
So you would use it if no setters or getters are required? Is it just ease that you would declare it in the .m instead of the header file?
There are a couple of great sites that have regular content related to more advanced topics: http://objc.io http://nshipster.com
http://www.nsscreencast.com/ is great, but costs 10 bucks a month.
This is a pretty good book: [Effective Objective-C 2.0](http://www.effectiveobjectivec.com/) 
iOS Dev Weekly is a great weekly newsletter. http://iosdevweekly.com
raywenderlich.com has a wide range of tutorials
Also, all of their documentation. Apple generally shares sample code (which often becomes de facto for things, like Reachability), and the docs are pretty good overall. 
The underscore is a convention, it doesn't do anything itself. What it indicates is an ivar (instance variable). It is a variable that is only available within an instance of the object, and other objects do not know it even exists. They do not require getter or setter methods to access. The convention is getting more and more not to use them and instead use properties declared in the .m file (which actually creates the ivar as well behind the scenes automatically). Basically, use properties until you get to a point where you're implementing your own getters and setters. 
Any plans to make this a CocoaPod?
I'm not using CocoaPods, but feel free to send me a pull request.
There is a catch in using Unity though: you have to code in C# or JavaScript. It's just a preference thing but I really prefer Obj-C over C#. You can write simple stuff in JavaScript, but I am not sure I can handle a larger project in JavaScript. This is my only gripe in Unity.
Looks neat. I'll have to integrate it with something soon.
How's support for SSA subtitles?
as a noob ios developer myself. this is where i started, and i got super frustrated with how much extra crap they put into the sample code. the example for core data is a good example, just full of all kinds of ui code and table views, its really hard to spot the bits specific to core data unless you already know core data. what i learned recently that made this sample code actually useful to me, was breakpoints and the stepper. once you run into a problem where you NEED those to solve (possibly troubleshooting a nested "for" loop as in my case), you learn that it's this neat window into the runtime that you can use for all sorts of stuff. THEN the sample code from apple becomes truly useful. 
Here's an implementation of it: #import "ViewController.h" @interface ViewController () { UIImageView *bg1; UIImageView *bg2; float duration; } @end @implementation ViewController - (void)viewDidLoad { [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib. UIImage *stars = [UIImage imageNamed:@"stars"]; bg1 = [[UIImageView alloc] initWithFrame:self.view.frame]; [bg1 setImage:stars]; bg2 = [[UIImageView alloc] initWithFrame:CGRectOffset(self.view.frame, 0, -self.view.frame.size.height)]; [bg2 setImage:stars]; [self.view addSubview:bg1]; [self.view addSubview:bg2]; [self.view bringSubviewToFront:bg1]; // UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; // btn.frame = self.view.frame; //[self.view addSubview:btn]; //[btn addTarget:self action:@selector(btnPressed) forControlEvents:UIControlEventTouchUpInside]; duration = 0.9; [self animate]; } - (void)animate { [UIView animateWithDuration:duration delay:0.0 options:UIViewAnimationOptionCurveLinear animations:^{ bg1.frame = CGRectOffset(bg1.frame, 0, bg1.frame.size.height); bg2.frame = CGRectOffset(bg2.frame, 0, bg2.frame.size.height); }completion:^(BOOL done) { if (done) { bg1.frame = CGRectOffset(bg1.frame, 0, -2*bg1.frame.size.height); [UIView animateWithDuration:duration delay:0.0 options:UIViewAnimationOptionCurveLinear animations:^{ bg2.frame = CGRectOffset(bg2.frame, 0, bg2.frame.size.height); bg1.frame = CGRectOffset(bg1.frame, 0, bg1.frame.size.height); }completion:^(BOOL done) { if (done) { bg2.frame = CGRectOffset(bg2.frame, 0, -2*bg2.frame.size.height); [self animate]; } }]; } }]; } - (void)didReceiveMemoryWarning { [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated. } - (BOOL)prefersStatusBarHidden { return YES; } @end
we keep running into each other in these threads, and you keep saying really solid stuff.. i really need to find a mentor like you to work for. 
I'm not sure how this code is compiling at all, since you are missing a closing brace on &gt; CircleGenerator *newCircle =[[CircleGenerator alloc]initWithFrame:frame initWithColor:[UIColor blackColor]; This won't fix your problem, but you do not need this line &gt; _circleColor = [[UIColor alloc]init]; You are already passing in a color that has been allocated and initialized. What you're doing here is creating a new color, then immediately replacing it with the color passed in. Do you have ARC enabled?
The dot syntax is a shorthand for calling the methods you defined because you followed the convention. The variables your defined are private fields, and it really doesn't matter what you call those. I'm assuming you wrote the implementation for these methods yourself, but there is a shorter syntax: @interface Item : NSObject @property NSString* itemName; @property NSString* serialNumber; @property int valueInDollars; @property(readonly) NSDate* dateCreated; @end With this syntax the compiler will automatically generate both private fields (with a leading underscore) and methods. That is, you don't need to put those fields in yourself and you don't have to implement the methods at all. Optionally you can also specify the name of the field in your implementation like this: @synthesize itemName=_itemName; You can also choose to implement the methods yourself still if you want custom behavior. You can even implement just the setter or just the getter if you want. 
Looks like you are reading the Big Nerd Ranch iOS Programming book. If that's the case, I suspect your .m file has implementations of the setters and getters, which in turn read/write the underscore-prefixed instance variable. Thus there is nothing magical happening with the underscore being ignored; as other posters have commented dot syntax is disguising the actual message send. That is, item.itemName = @"Red Sofa"; is equivalent to: [item setItemName:@"Red Sofa"]; In a chapter or two the book covers properties and so forth, which the other commenters have mentioned. Stick with it and all will be explained.
I didn't realise AlienBlue was open source. I know OP is looking for simple but hey ho this'll be simple one day :) https://github.com/alienblue/AlienBlue
In the first example, was it a mistake having that in consecutive lines of code? If not, the error is because you're redefining the object. In the loop example, ARC will take care of releasing that object after every iteration of the loop, so the exact object will only exist once at a time. Out of curiosity, what are you trying to do here with (presumed) multiple copies of the same object?
I think it's more like you just can't have two variables with the same name in the same scope. 
I think my answer is in ARC which I had a feeling that's what it is about. What I'm seeing in the book is that an object is created in the first iteration of the loop and added to an array. That happens 10 times. I guess my question is why does ARC release the object after every iteration of the loop? I have always felt like loops were just an convenient way to write the same lines of code multiple times. 
The object isn't released after every iteration of the loop if it's being added to the array. If ARC is working correctly (and I'm sure it is) then the retain count would be 1 when your loop is complete b/c the array would still be referencing it. I think you're mixing up your pointer (spooky) with the object itself. The pointer is just a reference to the object. After your loop you can probably reference the same object just differently. Something like array[0].
ok, thanks... I think I got it. I appreciate the help!
This has literally nothing to do with ARC. Variables defined in a loop are local to the loop's scope: notice how you can't access spooky after the loop? It works in the loop because each iteration is a new local scope, isolated from the function in which it is contained. 
Short answer: Scope. Example: In your above example, try this: `{` Cats *spooky = [[Cats alloc] init]; `}` `{` Cats *spooky = [[Cats alloc] init]; `}` You'll notice that the error goes away. That's basically what the loop is doing. 
Here's a great app to learn from: https://github.com/jonahgrant/mbus It's a very well coded app for the University of Michigan's bus system. 
np, honestly the mistakes you're making are extremely common. (i used to teach .net/java/c++) don't get discouraged and keep at it! after enough time your understanding will deepen and some of the ideas in this thread will be obvious and straightforward to you. being a good developer isn't any different than any other pursuit. you gotta put in the time. gl!
ARC isn't the problem here. The problem in the first example is that you're redefining a variable with the same name multiple times. This will cause the same error and uses integers: int myInteger = 1; int myInetger = 1; Basically the error is that you're creating a variable and then you're saying that this other variable should have the same name. It's like naming all of your kids George. They each need their own name. In the for loop the problem, as /u/mjgrazi correctly points out, is that you're defining your objects in the scope of a loop, but once that closing curly bracket is hit the object disappears forever. It's like it never existed. The only thing ARC does here is make sure you didn't leak a bunch of memory due to your coding error. If you want to create a bunch of variables in a loop and want them to stick around for a while you need to put them in a collection; like NSArray. NSMutableArray *array = [NSMutableArray array]; for(int x = 0; x &lt; 5; x++){ Cats *spooky = [[Cats alloc] init]; [array addObject:spooky]; } Because the array was declared outside of the for loop's opening curly brace it will continue to exist until after the closing curly brace. Note that the array doesn't care about what the variable name was, and does not retain that information. You'll now just have an array of cat objects. The variable name spooky is only there for you, the programmer. Once the curly braces are closed that information is gone forever. 
1. You can do this:- void MyFunction() { Cats *spooky = [[Cats alloc] init]; Cats *spooky2 = [[Cats alloc] init]; //... do other stuff.... } When the function finishes (reaches that closing bracker "}"). Both spooky and spooky2 will be released (not exist anymore, memory they were using free'ed, ARC basically adds the code to "release" these for you). Note: You had two "Cats" items (spooky and spooky2) that you could do things with in the function. 2. You can do this:- void MyFunction() { Cats *spooky[5]; for(int x = 0; x &lt; 5; x++) { spooky[x] = [[Cats alloc] init]; } //... do other stuff.... } Here, you have 5 Cats: spooky[0], spooky[1], spooky[2], spooky[3], spooky[4]. They also get released at the end of the function, at the last "}". Note: You did have 5 Cats in your code too, just you put the "pointer" (handle) to them in the same "spooky" so you lost the pointers and were left with the last one in "spooky" which in my code is spooky[4]. Edit: Formatting for code on Reddit sucks!!
It would be great if you went into detail about the differences between initWithNibName, initWithCoder, initWithStyle and new, as these often befuddle beginners. It also would be useful to explain that some APIs provide a class-level methods that do the alloc and init for you. For example, [NSString stringWithFormat:]. 
Could you post some code? Specifically tableView:numberOfRowsInSection: And tableView:cellForRowAtIndexPath:
Certainly! - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { NSString *sectionYear = [self.years objectAtIndex:section]; int journalCountForYear = 0; for (NSDictionary *dict in self.journalArticles) { if ([dict valueForKey:@"year"] == sectionYear) { journalCountForYear++; } } return journalCountForYear; } - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell" forIndexPath:indexPath]; NSString *sectionYear = [self.years objectAtIndex:indexPath.section]; NSMutableArray *journalArticlesInSection = [NSMutableArray array]; for (NSDictionary *dict in self.journalArticles) { if ([dict valueForKey:@"year"] == sectionYear) { [journalArticlesInSection addObject:dict]; } } NSString *title = [journalArticlesInSection[indexPath.row] valueForKey:@"title"]; NSString *authors = [journalArticlesInSection[indexPath.row] valueForKey:@"authors"]; cell.textLabel.text = title; cell.detailTextLabel.text = authors; return cell; }
There are a couple of small issues with your code. **EDIT:** Whoops. Didn't realize that `dequeueReusableCellWithIdentifier:forIndexPath:` automatically initializes. Learn something new every day! ~~UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell" forIndexPath:indexPath];~~ ~~That line is correct; you're properly reusing cells. However, if the cell wasn't ever allocated, it won't ever show up.~~ ~~You're going to want to add this directly below that line~~ ~~if (!cell) { cell = [[UITableView alloc] initWithStyle:UITableViewCellStylePlain reuseIdentifer:@"Cell"]; }~~ ~~That will properly initialize the cell, because `dequeueReusableCellWithIdentifier:forIndexPath:` returns `nil` if nothing exists in the queue.~~ ~~Also,~~ you might want to reconsider how you're checking the journal count or the journal sections. You cannot compare the values of Objective-C objects (or pointers) using `==` like you're doing with `[dict valueForKey:@"year"] == sectionYear` That will compare the memory addresses. If you're got two NSValue objects with the same value, they probably won't be sharing an address. You'll want to rewrite it as [[dict valueForKey:@"year"] integerValue] == [sectionYear integerValue]
First of all, don't confuse valueForKey: and objectForKey:, first one is KVC function, second one is want you want/need to do. Can you post the code where you fill self.journalArticles/self.years? Or add logging to numberOfRowsInSection: such as NSLog(@"sectionYear: %@, journalArticles: %@", sectionYear , self.journalArticles); and show us. 
if [dict valueForKey:@"year"] is NSString object same as sectionYear it's better to use [[dict objectForKey:@"year"] isEqualToString: sectionYear] or [dict[@"year"] isEqualToString:sectionYear] (literals is much more simple to write and use http://clang.llvm.org/docs/ObjectiveCLiterals.html)
WOW! You are awesome. Comparing `intergerValue` in those two places solved the problem. Any thoughts on why everything appeared to be functioning properly for the 64bit simulator? I've also added the conditional for when `cell == nil` with one minor change: `initWithStyle:UITableViewCellStyleSubtitle` instead of `initWithStyle:UITableViewCellStylePlain`. Is `UITableViewCellStylePlain` a custom style you've made? I was getting an 'undeclared identifier' error with it. Thanks again for your help! I'm just starting to mess around with Objective-C and I've got a lot to learn.
Oh whoops, sorry about `UITableViewCellStylePlain`, I was going off of memory!
+1 for literals. I wanted to fix his/her issue before talking about style, but using literal syntax is so much better. `dict[@"key"]` is so much better than `[dict valueForKey:@"key"];`.
No worries. Gave me the opportunity to look in the docs for the one I needed!
Ah, ok. I've further changed this: [[dict valueForKey:@"year"] integerValue] == [sectionYear integerValue] to this: [dict[@"year"] integerValue] == [sectionYear integerValue] Does that look better?
[Here](http://stackoverflow.com/questions/1062183/difference-between-objectforkey-and-valueforkey) is a good example of the difference between `objectForKey:` and `valueForKey:` TL;DR `objectForKey:` is an NSDictionary-specific method. `valueForKey:` is a method in NSObject that looks for properties. If you had a key in your dictionary `@"allKeys"`, then using `valueForKey:@"allKeys"` would give you the NSDictionary property, not your key. When you use `objectForKey:`, you'll get the actual hash table value.
Absolutely!
Yep! Really, it calls objectForKeyedSubscript: But the result is the same.
You might want to look at [NSPredicate](http://nshipster.com/nspredicate/) to cut down on some of those for loops. I generally subscribe to the ['don't worry about small inefficiencies'](https://harlanhaskins.com/2014/02/21/my-time-is-worth-more-than-the-computers.html) dogma, but it seems like iterating through all of those articles and instantiating a new NSMutableArray every time a new cell is displayed is just asking for UI lag.
Thanks. I'll figure out how to use NSPredicate. I'm still at that point where I know what I want to do, but I know so little about the language, that I often end up figuring out "a way" rather than "a/the *good* way" to do it.
dequeReusableCellWithIdentifier:forIndexPath: is guaranteed to return a cell. It was added in iOS 6 for that exact reason. You're thinking of the older dequeReusableCellWithIdentifier: 
Does that mean I can omit the `cell == nil` conditional?
&gt; That line is correct; you're properly reusing cells. However, if the cell wasn't ever allocated, it won't ever show up. That's not correct. In iOS6 and later this method returns an initialised cell if none are available for reuse. The class or nib must be registered first, this happens automatically if you are using a storyboard.
Looks like it, yes. Sorry about that!
Back when there were only a few differences between the GNU and Apple runtimes, I used to do Objective-C programming on other platforms just by using the `&lt;objc/Object.h&gt;` root object, or by using GNUstep, but for anything non-trivial it became quite difficult quite fast. GNUstep was actually rather nightmarish to play with. Although it was fairly simple getting off the ground, it was nowhere near as simple as simply passing your sources and a `-framework Foundation` argument to your compiler. It may be a bit different now. I think the amount of work that has gone into the GNU runtime and GNUstep is quite extraordinary. For a while they were keeping up with Apple's API changes quite well, but I have a funny feeling that most of the modern changes to Objective-C like blocks etc. haven't made it in.
Yeah it's worth trying. The GNUStep runtime (+clang for compiling) is probably your best bet. It's a useful language, even without all of the libraries you get from apple!
WWDC 2013 (or 2012) has a demo where BLE is used to transfer contact details between two phones. I don't remember the exact session, but source code is usually provided. You could easily adapt this to send whatever information you need. Another option would be to use iOS 7 multipeer connectivity. This framework allows you to find and communicate with other peers using: &gt; "infrastructure Wi-Fi networks, peer-to-peer Wi-Fi, and Bluetooth personal area networks" See the [Multipeer connectivity framework reference](https://developer.apple.com/library/ios/documentation/MultipeerConnectivity/Reference/MultipeerConnectivityFramework/Introduction/Introduction.html) or the [NSHipser writeup](http://nshipster.com/multipeer-connectivity/). 
Thank you :)
You have awakened my interest and I'll give the book a go!
Just when I felt like I had a grip on Objective-C. I hope this doesn't affect my chances of getting a mobile developer job.
Oh Thanks god for this! Objective-c is a mess!! I had a scream of joy when I read "Generics"!!
Have you looked into SpriteBuilder? We were going to use Spine and found we could do all we needed in SpriteBuilder, and you have Android support with Apportable to boot.
Already using Spine and loving it :D
&gt;GNUstep was actually rather nightmarish to play with. Although it was fairly simple getting off the ground, it was nowhere near as simple as simply passing your sources and a -framework Foundation argument to your compiler. It may be a bit different now. I've still been unsuccessful after many hours of trying to install it on Ubuntu 14.04. I've followed to many different online guides, and now I've got GNUstep crap spread all over the place and I still can't get it to compile from an IDE.
I think poop should inherit from the base exception class. Pity no exceptions :(
Well there wont be any books other than the Apple documentation for Swift for a little while. You might as well carry on learning Obj C as although the language will be different the methodology and abstractions could still be useful.
I'd say to learn both. It will take a long while until swift replaces Objective-C a 100%, if it ever does (I'd like to hear others opinions on this matter).
Agreed. Even if Swift does replace Obj-C its not gonna be over night. It'll be a few years at the very least.
Swift seems to just be syntactic sugar for Objective-C. But very nice sugar.
After taking a quick look at Apple's guide on Swift, I'm actually really pleased with what I see! New things to learn, but it already looks like a big improvement from Objective-C. At this point, I'm wondering if it's possible to program only with Swift. No semicolons, no NS, and you can declare variables in the middle of a string instead of using placeholders and adding them to the end. I've really only gotten through the first few pages and I have a really good feeling about it all! 
Building crazy apps, sure, but what about implementing a compiler, rebuilding the toolchain in swift and so on. What's interesting is, if it will replace objective-c but not c.
I'd probably start with java or Python, and then go to Swift. 
That's the silliest advice I've ever heard. He clearly wants to learn how to program for Mac or iOS hence his concern over Obj-C vs Swift. Python or Java would do nothing for him. (Not an argument against the pros and cons of one language vs another, but rather what his goals are).
Let's setup a link swap between /r/swift and /r/objectivec and support each sub-reddit. Obj-C isn't going anywhere anytime soon.
XCode is just the IDE though. He would still need to learn Objective C first. Python and Java would give him no benefit (in this scenario).
Swift is not implemented in Objective-C, no. Swift shares libraries and foundations with Objective-C, but like Objective-C, Swift is compiled to binary executables.
Agreed. Java would be a terrible choice if you want to write Mac OS X or iOS apps. On the other hand, if you want to go off and write Android apps, then Java is a good choice for that. That said, Java is a great language for learning Object-Oriented programming, if that is the actual goal instead of making iOS apps.
Haha replied to the wrong comment ^^
Thanks for all the responses guys, definitely cleared some things ups for me. Keep up this awesome community
So it would be a 2 part process. One which is the app which sends a signal over wifi to the connected pc and another that is a listener that picks up on the signals and then runs a command. If a then b kinda thing. I hope i understand it correctly. 
Very reassuring. I suppose my chance of finding a job hasn't changed. I'm excited to use Swift as much as possible though. After reading thorough some of the guide, I'm really impressed by the simplicity of everything. 
Yes. You could run a tcp server on the computer side and a client on the ios side. From there, you just do whatever you want with the data. There shouldn't be any difference between using it over wifi or Bluetooth PAN. It should just use whatever valid networking you already have set up. 
I would highly recommend learning about the fundamentals of both programming in general and object-oriented programming. Then the treehouse lessons will make a lot more sense. After that, it's up to you to explore the various frameworks and libraries and experiment on your own.
Good to know those book taste good :) 
I second the Big Nerd Ranch: Guide to Objective-C. It's a very good book for getting started and I recommend it to many. As for taking courses, do not waste your money on a community college. There are plenty of free resources online. For instance, MIT offers some of their courses for free http://ocw.mit.edu/courses/find-by-topic/#cat=engineering&amp;subcat=computerscience&amp;spec=softwaredesignandengineering
I haven't looked too much into it, but investigate Apple's linguistic tagger. http://nshipster.com/nslinguistictagger/ They have a WWDC session from 2012 to describe it. https://developer.apple.com/videos/wwdc/2012/?include=215
Yay, a tool to turn a simple shape into [horribly unmaintainable code](http://i.imgur.com/NIcMzxp.png)! That snowflake shape is only 15 lines and it spits out a wall of text. This may do alright for getting an idea from Photoshop to your project quickly, but it's unmanageable with the code written. If you need to scale the shape down by 50%, you're stuck with having to rely on Photoshop to do it for you. And the login button saves an image that's WAY larger than it needs to be. Scalable images will be way better for the course of the project.
Here's what I came up with (seems to work): + (NSArray *)splitSentance:(NSString *)myString intoChunksOf:(int)maxChars { NSMutableArray *chunksToReturn = [[NSMutableArray alloc] init]; NSArray *words = [myString componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]; for (int i = 0; i &lt; [words count]; i++) { int jump = 0; NSMutableString *chunkToAdd = [[NSMutableString alloc] initWithString:words[i]]; for (int j = i + 1; j &lt; [words count]; j++) { if ([chunkToAdd length] + [words[j] length] &lt; maxChars) { [chunkToAdd appendString:@" "]; [chunkToAdd appendString:words[j]]; jump++; } else { break; } } i += jump; [chunksToReturn addObject:chunkToAdd]; } return chunksToReturn; }
ObjC doesn't have generics.
You're quite limited if you don't use Cocoa classes. Swift was meant to be used with Cocoa.
Right, a few things are novel. Though generics are really just glorified macros.
If it the same as iOS, there are a few problems. The first is that you don't need a XIB to make a UI (I rarely use one). Even if there was one to edit, I don;t think you could get any object to do anything without changing the code making the window that uses it. This kind of thing is probably purely programmatic, in any case. I would also suspect that there are no hooks in to any part of the login process available from the api. It is possible to kind of do an end run around these limitations, with some work, but youd have to do it from a separate computer. Off the top of my head, you could set up SSH and run the commands remotely (you can run applescripts etc). 
This worked perfectly, thanks!
Right, I don't recommend giving up the Cocoa framework. When I said no NS I was thinking of NSLog vs println. Cocoa framework is still invaluable. 
Yeah i took a web design class in high school but that was 10 years ago. I've never studied computer programming in any way. So the vocabulary and the intent of doing each task is lost on me. I feel like i'm mimicking the videos blindly. 
Cool i just picked up the book. I had C programming for dummies. Its pretty casual, and i like it alright. I'll read through this one soon. 
I simply google for code examples and adapt it to what I need. I haven't bought a book in a long time and I'm definitely not the most advanced programmer. TCP client/server setups aren't that difficult and there should be heaps of code examples available. Start with the PC side of things and write a server, then use a TCP client app from the app store to verify it's working. Then write the client app. That way you don't have to troubleshoot two programs at once. Once you get them communicating any kind of information, start working out a set of commands that they both understand, and parser for each side (or just the PC side if the client isn't receiving anything). That part will completely depend on what information you're trying to communicate. From there, use that data to start controlling whatever you want. If this app will be commercial, you might want to add in Bonjour/mDNS to make it easier for the user to find and connect to the server. That isn't something you have to have running right away, and you can add it in later once the core of the apps is completed.
You can use a portable framework like my ObjFW or GNUstep to develop on Windows, Linux or even more obscure platforms. You'll be able to use all Objective-C features, but you won't have Cocoa.
setVal1 is the method/message name, (int)a denotes the parameter you will be providing the method. So when you say [extronsSimpleCalc setVal1:40] you're in essence saying, "using extronsSimpleCalc, send a message 'setVal1' and make the local variable 'a' equal to 40". Then in your method you says "val1 = a;". You set a to 40 when you called your method so it assigns 40 (the value of a) to val1.
Am I correct in thinking that if he was passing in an object instead of a primitive, that "a" would just be referencing the original address in memory carved out when the object was first instantiated aka. if you instantiate one object and pass it into 10 methods, really you're always just passing one object/reference correct?
It would depend on the method signature I believe. But I've only been poking at Objective-C for a few weeks. Typically you would pass the object pointer, not the object itself though as you mentioned.
What you have to know that in Objective-C properties are [syntactic sugar](http://en.wikipedia.org/wiki/Syntactic_sugar) so you don't have to implement, in basic scenarios, your own getters and setter and compiler (or runtime - I'm not sure) will make it for you. But if you'd want to override getter and setter you'll have to obey convention: * getter method signature is just property name - "Val1" in your case * setter method needs to have "set" prefix before property name, and new property value passed as argument - "setVal1:(Type)newValue" in your case
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Syntactic sugar**](https://en.wikipedia.org/wiki/Syntactic%20sugar): [](#sfw) --- &gt; &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), __syntactic sugar__ is [syntax](https://en.wikipedia.org/wiki/Syntax_(programming_languages\)) within a [programming language](https://en.wikipedia.org/wiki/Programming_language) that is designed to make things easier to read or to express. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer. &gt;For example, many programming languages provide special syntax for referencing and updating [array](https://en.wikipedia.org/wiki/Array_data_type) elements. Abstractly, an array reference is simply a procedure of two arguments: an array and a subscript vector, which could be expressed as get_array(Array, vector(i,j)). Instead, many languages provide special syntax like Array[i,j] . Similarly an array element update is abstractly something like set_array(Array, vector(i,j), value), but many languages provide syntax like Array[i,j] := value. &gt;Specifically, a construct in a language is called syntactic sugar if it can be removed from the language without any effect on what the language can do: [functionality](https://en.wikipedia.org/wiki/Function_(engineering\)) and [expressive power](https://en.wikipedia.org/wiki/Expressive_power) will remain the same. For instance, in the [C language](https://en.wikipedia.org/wiki/C_language) the a[i] notation is syntactic sugar for *(a + i). &gt; --- ^Interesting: [^C ^\(programming ^language)](https://en.wikipedia.org/wiki/C_\(programming_language\)) ^| [^C ^Sharp ^\(programming ^language)](https://en.wikipedia.org/wiki/C_Sharp_\(programming_language\)) ^| [^Operator ^overloading](https://en.wikipedia.org/wiki/Operator_overloading) ^| [^CoffeeScript](https://en.wikipedia.org/wiki/CoffeeScript) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci9othh) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci9othh)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I thought that variables were assigned their values from right to left; Int Val1 = 25 | means that val1is now assigned 25 val1 = a | shouldn't that mean that val1 is zero since I never assigned a value to a? Is my code assigning zero to val1 until the main.m file explicitly states that val1 = 40? 
To some extent you might think of it like this: - (void)setVal1:(int)a { val1 = a; } You are setting val1 equal to a whenever you call the method 'setVal1'. But how do you set a to a value? That is where the '(int)a' part comes into play. If you just called 'setVal1', it wouldn't know what value a is equal to. So you do [xxxx setVal1:40]. It sees the value of 40 and sets 'a' to 40 since you listed it as the first parameter of your method. Then it starts running the content of your method which says set val1 to the value of a. Since you set 'a' to 40, it sets val1 to 40.
Thank you for the in-depth explanation. As for passing your pointer variable around to various methods, what is actually happening behind the scenes? When compiling the code, does the compiler just set the method's argument variable equal to the passed in pointer variable? Using OP's example that would mean there is a hidden statement behind the scenes doing this: int a = 40. Or with my example when passing pointers around, if we pass a pointer variable called string1 into a method, and the method sig uses methodString to represent the input, the compiler would be doing a hidden statement of: methodString = string1 Am I correct, both in theory and what the actual "hidden" code statement looks like?
You are confused because you're trying to think about this too much. Trust me I understand because this confused me when I started learning too. Just know that you could change "a" to "reddit" or "coolNumber" or whatever you want and it will still be equal to the int you passed in which was 40. My guess is that the compiler sets "a" equal to your input of 40 behind the scenes. I actually just asked about that with my comment here: http://www.reddit.com/r/ObjectiveC/comments/28c4hn/help_with_setters_and_getters/ci9w55r So even though I may be wrong in how it is actually happening or looks behind the scenes, just pretend that when you call your method and provide the input of 40, that behind the scenes "a" is being set equal to 40.
No problem!
You'll be able to port over your model layer but not much else. Networking/UI code is going to be proprietary to the platform you are on. Not to mention Xcode refactor features completely not working the second a .mm file is added to the project. It really depends on what kind of project you have. We had some OpenGL code that we were able to bring over on the android port. If you are just making a Utility App, it's probably not worth it. But if for some reason your project uses a lot of OpenGL or some other API that is common to many platforms than it might be worth considering. 
If you just want to keep your project portable, you can still use ObjC. For example, you could use GNUstep to port it over to Android or you could write your core using the portable ObjFW framework, which allows writing a single core in ObjC that can be used across platforms. Disclaimer: I'm the developer of ObjFW and this was the reason why I created it (write the core in ObjC, but still be portable).
Agreed, you are going to spend more time writing ObjC++ wrapper code around your C++ code. When I started on iOS this is what I did and realized it was more efficient to write my whole applications in ObjC. That being said, if you have existing C++ code you're trying to port, it may be a feasible option. You're really only going to see performance benefits if you're running some heavy computations like video compression, physics calculations, etc. In my opinion all of the benefits you get from using ObjC will outweigh language familiarity with C++, ObjC is really easy to pick up and run with. Good luck!
I don't think the Objective-C++ option is as bad as the other commenters are making out. As long as you make a clear division between the View/Controller in Objective-C and the Model in C++, it shouldn't get too messy. You don't have to wrap your C++ classes to use them in Objective-C++, unless you *really* want to encapsulate that away. I don't think it's worth it, but I've never been a fan of Objective-C wrappers for things. Alternatively, you could even write the model part in C. I quite like the CoreFoundation style of object orientation in C (i.e. opaque structs for objects, functions that take them as arguments). It does get messy if you need polymorphism, though.
&gt; As long as you make a clear division between the View/Controller in Objective-C and the Model in C++, it shouldn't get too messy. Agreed. It's a bit of a pain, but things only get really bad once you start letting the C++ creep into the UI as well.
have you added nsoutlineviewdelegate to your header file? also have you set your NSOutlineView.delegate = self; in your .m?
Yup, Clang is designed for C/C++/ObjC/ObjC++. See: http://clang.llvm.org
Yes. The delegation works. If I do something that alters the selection, the delegate method is invoked. The problem is that if the user clicks on the *already* selected item, it doesn't fire that method, because nothing changes in the proposed selection. I'm assuming that `outlineView: selectionIndexesForProposedSelection:` isn't the right way to do what I want to accomplish.
How much are you paying?
Maybe using a [Swift] tag would help.
Is the word list stored locally? I would build a web back end that stored the users word list and handled the notifications. A web back end would allow you to save a user's list if they decide to delete the app, market to the user in other ways, create analytics based not only on your user's list but all users of the app, etc... In short, yes the feature is possible and I think the app is a great idea. Many more possibilities. PM me for more details. Would be happy to consult. 
What have you tried? I'm assuming you're doing iOS programming, have you tried googling "data persistence ios" or even "saving data ios"? NSUserDefaults is probably sufficient for what you need. https://developer.apple.com/library/ios/documentation/cocoa/reference/foundation/Classes/NSUserDefaults_Class/Reference/Reference.html
You can do this by persisting the data.
I would do this as a .plist file, being read and written using the NSDictionary class, for example: https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDictionary_Class/Reference/Reference.html#//apple_ref/occ/clm/NSDictionary/dictionaryWithContentsOfFile: But your question would have a better audience if it were posted on stackoverflow.com, actually.
You should follow convention ... method names and variables are typically lowerCamelCase.
I'm in a full on conversion to swift, so pardon if some of the semantics are not right 1. I like to initialize my plist key/value pair from my AppDelegate - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { ... // NSUSerDefaults is essentially a plist, we're saying that defaults is of that type, and // equal to the built in plist that every app has by default NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; // You will probably want to do this somewhere else (ill put it here for example), but // you need to make sure the key/value pair exists before you start trying to read it if ([defaults objectForKey:@"persistant_integer"] == nil){ // This will only ever run the first time you launch your app after it is installed [defaults setInteger:default_int_value forKey:@"persistant_integer"]; } ... 2. Make methods to read and write to the value where you will use them (ostensibly in your root view controller) -(void)writePersistantData:(NSInteger)myIntVar { NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; [defaults setInteger:myIntVar forKey:@"persistant_integer"]; } -(NSInteger)readPersistantData { NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; return [defaults integerForKey:@"persistant_integer"]; } 3. Call them where you need to set data (this uses both methods!) -(IBAction)Up:(id)sender { [self writePersistantData:([self readPersistantData] + 1)]; } Theres other ways to tackle this: like only calling the methods that r/w the plist when you start and when your app ends/goes in tot he background, but hopefully these get the basic idea across. I would also say keep at it, and stack overflow is your bestest friend! 
To expand on the title, I specifically cannot see a reason why the application failed to launch. The single view app only has an MKMapView on it. I've made a property out of it as well. As you can see I've also included &lt;MapKit/MapKit.h&gt;. I'm really quite new to all this Objective-C / Cocoa (Touch)? programming, so any and all advice is awesome. Thanks in advance for your time.
Thanks for the reply. I did as you suggested, however I don't really understand most of the items that are listed in the thread to begin with. It looks to be an issue with instantiating MKMapView, but I'm still looking into it.
Yes. You need to add the MapKit framework to the project. Depending on where you are learning to do this is may show you different ways. The easiest way now is to do @import MapKit where you have the #import Mapkit stuff edit @import MapKit replaces your #import mapkit line. 
I swapped out the #import for the @import and it's still throwing the same error. The property is defined as @property (weak, nonatomic) IBOutlet MKMapView *CurrMap I don't know if that helps. 
https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaLibrarytoaTarget.html That's how you can add it manually and it will work. the @import should have done it for you [Check this out too](http://stackoverflow.com/questions/18947516/import-vs-import-ios-7) for some info about the @import I mentioned
Hey, I responded to OP to help him figure out the problem and came across the above while messing about. But to all your questions, yes. In the process I also learned that having the modules enabled is a default setting now and as such, [using #include does the same thing as @import](http://stackoverflow.com/questions/18947516/import-vs-import-ios-7)
&gt; So in my book, they said that an "object instance variable" is an instance variable that is not primitive, and actually points to another object. In general, people don't usually talk about object instance variables as something special. They are just instance variables that happen to be objects. &gt; From what I understand, the object that has the object instance variable, is the "owner" of and has the relationship with the object being pointed to by the object instance variable. No, that's not quite right. You can think of some objects as owning others, but merely having an instance variable pointing to them does not imply ownership. For instance, you usually don't want to own a delegate. You gain ownership of an instance by using one of the NARC methods: `new`, `alloc`, `retain`, or `copy`. It's then up to you to `release` the instance. Note that a single instance can have more than one owner, for instance if one object allocates an instance, and another object retains it. ARC mostly handles this for you automatically these days, but it needs to know the semantics for the variables that point to your object instances in order to do so. So you can have weak and strong references to instances. A strong variable is one that preserves ownership. A weak variable is one that doesn't preserve ownership. Instance variables are strong by default, but you can also mark them as weak. So for instance, if somebody calls a method on your object and passes in another object, if you store it in a strong instance variable, what you're really saying is that you want to hang onto it. If the code that passed the object in doesn't care to keep a strong reference to it around, it won't be deallocated because your object still owns it. In contrast, if you stored it in a weak instance variable, then what you're really saying is that you want a reference to it as long as it's around, but you don't particularly care if it's there or not. So if the code that passed the object in doesn't care to keep a strong reference to it around, unless there's some other code with a string reference to it, it'll be deallocated and your instance variable will revert to `nil`. &gt; Is it correct then to say that "CustomViewController's object instance variable called myString points to an instance of NSString. This means that my instance of UIViewController has a to-one relationship with the instance of NSString. Well what you're talking about there is a property, not an instance variable. A property is essentially a getter and/or setter method with simpler syntax for calling them. Properties usually have associated instance methods, but not always. If you let the default synthesis happen for that property, then you will end up with an instance variable called `_myString`. But otherwise what you say is correct. &gt; This also means that my instance of UIViewController is the owner of my instance of NSString. No, it's *an* owner, not *the* owner. If some other part of your code has a strong reference to the string object, that can be thought to own it as well. &gt; If I set the UIViewController's myString property to nil, then the instance of NSString will call dealloc on itself because it now has zero owners and does not need to exist anymore. Only if there are no other strong references anywhere, and the object doesn't call `dealloc` on itself, the Objective-C runtime calls it. 
I think I understand now why you are referring to it as a property instead of an instance variable, even though a lot of people seem to use the terms instance variable and property interchangeably. The difference between the two: A "property" just represents the instance variable's accessor methods, not the actual instance variable itself. So really it's about encapsulation and protecting that ivar from other classes. Is that correct?
&gt; I'm confused why the first would not be an owner, but the second example would be an owner. Is it the way that I originally described it? The first, you are saying that instance variables *in general* imply ownership. This isn't true. You can think of *strong* instance variables as implying ownership. The second, you are giving an example of a property that – if synthesised according to the defaults – has a strong instance variable backing it. In that case, it *does* imply ownership, because it is a strong reference. You're expressing that you want to keep it around. &gt; there's a diagram with the title "A BNREmployee with object instance variables", and then these object isntance variables are declared in code using the @property directive. So they could be referred to as BOTH properties and ivars and that would still be correct right? No. They are separate concepts. An instance variable is a variable that is associated with an instance. Simple. A property is a getter and/or setter method with a simpler syntax for calling. This: @property NSString *myString; …is exactly the same as this: - (NSString *)myString; - (void)setMyString:(NSString *)myString; Now, if you are using a relatively recent version of the compiler, then by default, it will also synthesis the methods themselves and an instance variable with a leading underscore. But that's just the default. You could just as easily supply your own getter and setter methods. For instance, if you have a class representing a square, you might have: @interface Square : NSObject @property NSUInteger sideLength; @property (readonly) NSUInteger area; @end This is the equivalent of declaring: @interface Square : NSObject - (NSUInteger)sideLength; - (void)setSideLength:(NSUInteger)sideLength; - (NSUInteger)area; @end If you let the compiler synthesise `sideLength`, it would be the equivalent of the following: @implementation Square { NSUInteger _sideLength; } - (NSUInteger)sideLength { return _sideLength; } - (void)setSideLength:(NSUInteger)sideLength { _sideLength = sideLength; } This would mean that elsewhere in your application, you could write code like the following: Square *mySquare = [[Square alloc] init]; mySquare.sideLength = 4; This would be the equivalent of: Square *mySquare = [[Square alloc] init]; [mySquare setSideLength:4]; You could also supply your own getter method for the `area` property: - (NSUInteger)area { return _sideLength * _sideLength; } You could then write code like the following: NSLog(@"My square of %d x %d has an area of %d", mySquare.sideLength, mySquare.sideLength, mySquare.area); This would be the equivalent of: NSLog(@"My square of %d x %d has an area of %d", [mySquare sideLength], [mySquare sideLength], [mySquare area]); As you can see, even though there are two properties on the class, there is only one instance variable. Instance variables and properties are two separate concepts. You might find the need to have an instance variable for some internal processing. However declaring the instance variable will not make it accessible through a property - there will be no getter or setter method generated. A property in conceptual terms is some kind of attribute about an object that you can get and perhaps set from elsewhere in your code. An instance variable in conceptual terms is an implementation detail internal to the class. A property in practical terms can be thought of as another way of writing down a getter and/or setter method. The defaults can automatically generate an instance variable for you because that's how properties are most commonly used, but that doesn't make them the same thing. &gt; I'm new to programming, and moments like this make me feel like it will be impossible to ever not "disagree" on the proper terminology to use during a given situation. Doesn't this lead to a ton of confusion? There's usually one correct answer and a tonne of people who are a bit fuzzy on the details who mangle terminology. I find getting the terminology right so that you can express yourself as accurately as possible helps you get things straight in your head. The Apple resources are usually the best for getting things straight. 
Yes, that's one way of looking at it. But there's not necessarily a 1:1 relationship between properties and instance variables. You can have properties without instance variables and instance variables without properties.
One last quick question... If I declare a property, but then want to "override" the accessor methods, then that completely defeats the purpose of using @property correct?
Nevermind on this one. Just did some digging on SO and I can see that you can still get the benefits that come with using @property and "override" the accessor methods.
There's a build setting that stops the compiler from auto-synthesising properties. I can't think of any reason off the top of my head where it would be necessary to prevent this. Maybe if it conflicts with an existing instance variable of a different type, but you're really setting yourself up for confusion there if you do that, and you can always change the backing instance variable's name with `@synthesize` anyway.
Why does portfolioValue take a parameter instead of using self?
You definitely understand the concept of data encapsulation. Just one suggestion ... the method below .... -(float)portfolioValue:(BNRPortfolio *)portfolio { float totalPortfolioValue = 0.0; for (BNRStockHolding *stock in portfolio.portfolioStocks) { totalPortfolioValue += [stock valueInDollars]; } return totalPortfolioValue; } could be rewritten using 'self' instead ... -(float)portfolioValue { float totalPortfolioValue = 0.0; for (BNRStockHolding *stock in self.portfolioStocks) { totalPortfolioValue += [stock valueInDollars]; } return totalPortfolioValue; } each object instance is a portfolio already. not sure why you would want each object to be able to calculate another instances' portfolio amount. Just my opinion. All the other methods should be declared in the BNRPortfolio.h file as: -(float)portfolioValue; -(void)removeAllStockHoldings; -(void)removeFirstStock; -(void)removeLastStockHolding; -(void)addStockToPortfolio:(BNRStockHolding *)stock Otherwise this looks like it is written very well.
You're unnecessarily repeating the check for and allocation of portfolioStocks a lot. You'd be better off, for both performance and code readability, making it readonly and lazy loading it in its own function or just creating it in the class's constructor. Then all your mutating functions could be much simpler. I also don't know why your portfolioValue: function takes a BNRPortfolio as an argument. It seems like this should just take no arguments and operate on self. Additionally, it could be written more succinctly using KVC (Key-Value Coding) as: - (float) portfolioValue { return [[self valueForKeyPath:@"portfolioStocks.@sum.valueInDollars"] floatValue]; } Finally, I'd also point out that storing monetary values as floats is a *terrible* idea if you are actually doing absolutely anything important with the numbers. The least you could do would be to use doubles instead, but really you shouldn't be using any fixed width float format. 
Thanks for the comment. Just made the change.
&gt;each object instance is a portfolio already. not sure why you would want each object to be able to calculate another instances' portfolio amount. Just my opinion. Nope, you were right. Thanks for the input. I see now why passing in an instance was unnecessary.
&gt;You're unnecessarily repeating the check for and allocation of portfolioStocks a lot. You'd be better off, for both performance and code readability, making it readonly and lazy loading it in its own function or just creating it in the class's constructor. Then all your mutating functions could be much simpler. I'll have to revisit your reply after I get further into the book. &gt;I also don't know why your portfolioValue: function takes a BNRPortfolio as an argument. It seems like this should just take no arguments and operate on self. Fixed. &gt;Finally, I'd also point out that storing monetary values as floats is a terrible idea if you are actually doing absolutely anything important with the numbers. Thanks for pointing that out. Am I remembering right that when dealing with monetary values you should store them in a double? Double is more precise than a float correct?
Ok awesome thanks!
One more piece of advice: stay consistent. Either always call them stockHoldings or always call them stocks
One more piece of advice: stay consistent. Either always call them stockHoldings or always call them stocks Also, I could be wrong but I don't think you can declare properties in class extensions so you might get an error in that
iOS. As a contractor, the demand for iOS apps is just a lot higher. The only OS X apps i've written have been personal projects.
Cool, so it's more driven by economics for you. Makes sense. There is an interesting argument that I've seen for writing for OS X - it's actually a bit less flooded app store and therefore easier to find a niche (and therefore make more money with fewer competitors).
Will do!
I'm more comfortable writing ObjC code that runs everywhere, and that especially includes non-Apple devices :).
I'm just getting into objc again, and with cocoa. The last time I touched cocoa we had project builder :)
To make this clearer - I'm referring to the owner making money through an OS X app, not the contractor. In all likelihood it makes more economic sense for a contractor to go the iOS route.
What's an example? Where does Objective-C run on non-Apple devices, aside from the obvious example of Hackintosh?
Never heard of project builder. Must be vintage :) Why did you choose desktop over mobile? Or did the project choose you?
I work with macs mostly, so I develop tools to support those guys. I would love to start iOS but need to think of a silly project to work on. Maybe just some tab controller crud thing
Haha whoa DS
I would assume you've also had zero trouble taking on additional projects, too. When you've got a niche worked out well there's less of a need to explore new territory.
My bad. I just realized that NSMutableArray inherits from NSArray, and that is why it has access to the method.
Yep! This is exactly right. Also if you look at the documentation for NSMutableArray it lists filteredArrayUsingPredicate under the "See Also" section of filterUsingPredicate.
Awesome thanks!
There's no need to allocate an empty array in any of your removeXXX methods, you are creating a new array that will not have any objects to be removed. Since you can message nil so there's no problem if the array does not exist in these methods. You can also use the following to calculate your portfolioValue instead of looping: CGFloat portfolioValue = [[self.portfolioStocks valueForKeyPath:@"@sum.valueInDollars"] floatValue]; One more suggestion that I find really useful is having NSAssert/NSCAssert statements to verify your code is being called in an expected manner/state. For instance, I would find it reasonable that the [BNRPortfolio removeXXX] selectors shouldn't be messaged unless there is actually something to remove. If that were the case adding the following NSAssert to the start of these methods would trigger an exception in your debug builds if you were to try and remove stock from an empty portfolio: NSAssert(self.portfolioStocks.count &gt; 0, @"removing from empty portfolio!!!"); This can really help in eliminating hard to track down bugs later on. Anytime you have made assumptions about how your code is supposed to work, it doesn't hurt to throw in some assertions to verify those assumptions are valid at runtime. 
For vendors, it's definitely easier to make waves in the OSX App Store, the iOS App Store (capt. obvious here) is awash with apps, and even if you do find a niche, getting it noticed is orders of magnitude harder than an OSX App. The dollar value you can assign to desktop apps is also much higher per unit, and if the app is successful, you'll do better economically. Either way, you'll have to maintain / support the apps, so ongoing costs will be similar. 
&gt; Never heard of project builder. Must be vintage :) It's the predecessor of Xcode. 
My favourite thing about iOS programming is how UIViews fit with Core Animation layers, all that stuff makes so much sense and makes flashy things really easy. My favourite thing about OS X is bindings :). Although Reactive Cocoa almost negates that these days.
More comfortable on iOS but I enjoy OSX more.
OSX, for shareware.
Thanks for the input. I'll have to revisit this soon when I finish my book.
iOS, since my interests are more into the mobile market.
Actually, you won't need to make that ivar. If you're not explicitly calling @synthesize, then the _portfolioStocks variable is already there from declaring @property.
It all depends on how those UILabels are set up. Do you initialize them in the ViewController class somewhere? Are they wired up in a storyboard. If you aren't setting them up in those ways you can alloc/init them and set the properties, but I don't think that's the best way to go about it. 
It is not the same as @private. When you try to directly access a private instance variable (eg, someObj-&gt;privateVar) you get a compiler error specifically telling you that the variable is private. If you try to do the same with an instance variable that backs a property, the compiler tells you that the instance variable does not exist. This is also what the compiler does for instance variables declared in an extension, hence the OP's question. You also don't need to use @dynamic if you implement the getter/setter yourself. @dynamic is for properties that have no backing methods and are resolved at runtime using methods like forwardInvocation: or methodForSelector:. Finally, valueForKey: will not return a value if the class returns NO from accessInstanceVariablesDirectly. It also won't return the instance variable if the class has a method by that name or if it otherwise satisfies the search pattern for KVC. If you really want to access the ivar directly (you probably don't), you should use the runtime.h functions.
Sounds like your friend's company either has a simple app or don't consider it critical enough to their business to devote a full time resource to it. It's definitely possible to do only Obj-C work if you have the skill and desire, it just depends where you're working.
While you seem to have come to the correct answer yourself, keep in mind that NSArray is a [class cluster](https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html), so there actually is some compiler/runtime magic happening under the covers.
You should call `instantiateViewControllerWithIdentifier` on UIStoryboard instead of alloc/init on a view controller. Since everything is wired up in the storyboard, instantiating the view controller out of the storyboard instead of from nothing should set all your outlets. [UIStoryboard reference](https://developer.apple.com/library/ios/documentation/uikit/reference/UIStoryboard_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40010909-CH1-SW4)
You wire them up in the interface builder. When you create your ViewController instance, one of the methods lets you load it from the .nib (or you can also use the IB again, and set the "load from nib" property). In either case, the ViewController will have access to the instances from your .nib.
&gt;If you're just trying to reason about how the compiler treats it, then yes it's similar to a class extension. Gotcha. I've watched videos where they say "the compiler inserts code into your files" for things like including code from linked files etc. so I assumed it would be the same. Just the compiler pasting in the ivar in the class extension area. Thanks for clarifying.
Yes. I have worked for 2 big companies since graduating with my CS degree. Both hired full-time iOS devs for their mobile apps. 
That idea basically defeats the purpose of having a private method, yeah. And for something like office alarm codes, maybe there's something that requires some verification, like maybe a delegate that updates the alarm code to registered objects. That's kind of the trade off. I guess you can declare - (void) setOfficeAlarmCode:(NSString*)code; in your interface, which would actually mean you have a private getter but a public setter. Sort of like a dropbox. But in practice, only a small subset of objects should be able to change the alarm code of an employee. maybe the Employer class declares a protocol, @protocol EmployeeSecurityDelegate &amp;lt;NSObjecf&gt; - (void) alarmCodeDidChange:(unsigned int)newCode; @end and have your employee implement that to receive a call from the Employer class upon alarm code change.
I think the issue you are having is that you are thinking about this in terms of security or physically hiding things, which is not the point of private variables. The point of making a variable, method, or property private is so that other code cannot interfere with the internal state of your object. This concept is known as [encapsulation](http://en.wikipedia.org/wiki/Encapsulation_\(object-oriented_programming\)). So using your example, if officeAlarmCode is something that could change and other parts of the program would need to manipulate, making it public is absolutely the right approach. Encapsulation can be a tricky concept to grasp when you are first learning about programming. Why would you want to hide parts of your program from other parts of your program? Wouldn't it just be easier to have access to everything from everywhere? The idea is that properly encapsulating your data makes it easier to reason about dependencies between pieces of code. When you're writing small, simple to understand programs it can be hard to see the benefit because your code is already easy to reason about. Once you get to writing programs that are thousands of lines of code (some of which may not be yours) it becomes a lot more important to know that property A, which depends on property B only gets set in methods that explicitly modify B and cannot be independently modified by other parts of code.
Thanks, this cleared up a lot for me!
Ha, well what do you consider real work / what kind of software are you building then?
Does your day job have a use for OS X programmers or is it a mobile-only outfit?
What makes OS X more enjoyable for you?
What specifically about the mobile market interests you?
I just think that there is a lot more reach when getting your software out there. More people have access to their mobile phones than they do with their laptops, etc. It is definitely more of a personal preference and I am sure others will argue otherwise. 
To your point - there are many more active iOS users than active OS X users...
The article isn't great, but the information is useful. Tl;dr if your file doesn't need to know any implementation details about a class or protocol in another file, use a forward declaration to let the compiler know it's okay instead of importing all the details of that file.
&gt;When we're declaring the property in a class extension, we're more worried about instances of subclasses of Employee directly accessing officeAlarmCode. That's what I'm getting out of all this. That's what I took away from it. I'm going through the book right now as well. All I know is that a Class Extension keeps everything private to your class. Even a subclass has no access to the superclass's extension.
Great post.
Hey I wanted to comment on this again for you because I literally was at this same spot in the book just 2 days ago, and I'm still trying to wrap my head around the whole concept. &gt; When we're declaring the property in a class extension, we're more worried about instances of subclasses of Employee directly accessing officeAlarmCode. That's what I'm getting out of all this. As much as the above is true, the property's getter and setter methods are not available ANYWHERE, accept the class's implementation file. So if you import Employee.h into main.m, and create an instance of Employee, try accessing the getter and setter methods with regular method calls, or even the dot syntax. Nothing will show up at all. It's only available internally. I think it's confusing because we've only seen one tiny example of why you would want to do this in the BNR book. I think the concept will become more clear and seem more useful once we understand what developers regularly use class extensions for.
&gt;You can declare instance variables (or indirectly declare them by synthesizing) in an extension I'm confused by what you mean by this. If I try to declare an instance variable in the class extension I get a warning that "Cannot declare variable inside @interface or @protocol"
Hey, I just revisited your comment and made the changes. Not sure why I didn't understand when you first posted it, but it's genius! I have some questions though: 1. Instead of getting rid of the property, would it be wrong for me to keep the property so I can still get the benefit of the automatically synthesized setter method, or would that be against good practices? 2. Is putting the "check if it exists" code in the getter method a common/best practice? What about also putting it in the setter method? Thanks for the help. That small change really struck a chord with me.
Instance variables need to be in curly braces, just like if you were setting it up in the class's .h file. Eg, something like this in the .m file: @interface ExampleClass () { NSString* exampleVariable; } @end Just keep in mind that this effectively hides your variable from any other code besides that file. If you inherit from this class your subclass won't have direct access to this variable.
Gotcha I don't know why I was thinking about it any differently. I wasn't even using curly braces in the extension, just trying to put ivars in the extension alone.
&gt; Instead of getting rid of the property, would it be wrong for me to keep the property so I can still get the benefit of the automatically synthesized setter method, or would that be against good practices? In general, there's nothing wrong with synthesizing and then replacing one of the implementations with your own. In your specific case, however, I don't see a need for a separate setter. Personally, i'm a big fan of the [KISS principle](http://en.wikipedia.org/wiki/KISS_principle). Don't add things or leave them in just because you can. It doesn't seem like you actually need to set portfolioStocks independently. If you find that you do at some point, then you could add a setter method or reintroduce the property definition. &gt; Is putting the "check if it exists" code in the getter method a common/best practice? What about also putting it in the setter method? The technique is known as [lazy loading](http://en.wikipedia.org/wiki/Lazy_loading). It's definitely a common practice, and not just in Obj-C. In fact, some languages actually have functionality built in to make lazy loading either easier or automatic. Apple's new language Swift is one of these languages.
&gt; As much as the above is true, the property's getter and setter methods are not available ANYWHERE, accept the class's implementation file. &gt;So if you import Employee.h into main.m, and create an instance of Employee, try accessing the getter and setter methods with regular method calls, or even the dot syntax. Nothing will show up at all. It's only available internally. Yep, I noticed that right away, which is what prompted me to ask the question. It wasn't too clear how we could implement it because the BNR book didn't give an example of any implementation of a method that used the privately declared officeAlarmCode.
I just realized the my comment below is wrong, right? Because at that point it's not about giving it a value, it's the fact of whether or not there is even memory allocated to hold the value. So what is your view on checking for existence in both the setter and getter?
Your first post is correct. You do not need to check for nil in the setter. What you may be having trouble with is that the variables in your class are not the actual objects, they are just pointers to objects. Basically, a pointer is just an integer that stores a memory address. What you are checking when lazy loading is if the variable actually points to an object, and if not you then initialize the object and store its address in your variable. When you are using a setter, you are just assigning the address to your variable. The actual memory used to store an object is created by calling alloc on the class (or indirectly calling alloc by using a convenience constructor such as [NSArray array]). 
Not that I haven't asked you enough questions already, but what do you think of this guy's comment? http://stackoverflow.com/questions/11769562/lazy-instantiation-in-objective-c-iphone-development#comment15631122_11770303
I think I'll go ahead and do that as well. Mind sharing some links if you find anything particularly useful on the subject?
First of all, he's trying to solve a problem you don't have. You don't need to know in any of your code if portfolioStocks exists, you just need it to always exist when you call it. Solving a problem you don't have is not keeping it simple, so I'd disagree with his assessment, but this is somewhat a matter of opinion. Secondly, if you have that code in the setter, then you still need to call the setter somewhere before using portfolioStocks. That means you're either no longer lazy loading or you're back to inserting check code every time you access it across several methods. Finally, there are other solutions to the problem he raises besides the one he suggests like directly checking the ivar or making a method that does so. The latter approach is one that Apple has used in their code. For example, UIViewController's view property is lazy loaded and for this reason they provide the isViewLoaded method so that you can check if it has been initialized.
&gt; The technique is known as lazy loading. It's definitely a common practice, and not just in Obj-C. In fact, some languages actually have functionality built in to make lazy loading either easier or automatic. Apple's new language Swift is one of these languages. Last reply from me today I promise :] I just uploaded my first app to GitHub. So for all of my properties, regardless of whether they are in the public header file or the private class extension, would I be following best practices by adding custom getter methods that include the lazy loading logic? Or are you only supposed to do that in specific circumstances?
There is no idiomatic way to initialize a property or ivar. It's entirely situational which approach is best and just something you'll get better at with practice. For example, as I said earlier in this chain, instead of lazy loading you could just set up portfolioStocks as a readonly property then instantiate its ivar in the object's constructor. Lazy loading is best used for things that may not ever be accessed, but that you want to ensure will exist if they are accessed. It can also useful as a simple caching technique for the value of a computed property.
https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html
Exactly. I was rather brief because I was on mobile, so thanks for adding that ;).
Actually I think he NSLogs the NSString** originally, so in the method there should be no address or dereference operators. 
Depends, since you can scale the simulators down and just hide stuff you don't need in xcode right now I think you'll be fine.
I don't think the screen will be too small, I have 1280x800 myself (13" MBP), so even less than the Air, and the few times I used Xcode (I prefer vim), I never had space problems. I keep my code at 80 columns per line, though.
Thanks! You probably guessed I was just looking for validation to get one! Cheers.
Right, knowing the hot keys to show/hide the sidebars and the console is important on the smaller screen. Left bar: Cmd + 0 Right bar: Cmd + Opt + 0 Console: Cmd + Shift + Y
When the first 11" Air came out, I got one and would regularly do Xcode-based development on it. The smaller screen isn't going to do you any favors, but that's where an iPod touch or iPad mini could help if the scaling isn't doing it for you. That's the route I took as i liked Xcode in full screen mode (when that became a thing), and would use a device for the running and looking-at portion. People look at your funny when you have a full-sized iPad tethered to an 11" Air, but you know you're handling business. 
I've been using A 2011 MacBook Air with 4gb ram to develop iOS apps, and Android app, a C++-based OpenGL/GLSL sidescroller with fancy 2d-isosurface physics. And many other side projects. I use this machine to do the graphics for my projects as well, using Sketch, Pixelmator, etc. I've never once complained. I have a 2012 Mac Pro at work with 32gb ram and I *prefer* my MacBook Air. It's a solid machine. It lacks a retina display, and you'll never play crysis on it. But it's a solid machine.
I hadn't considered that, sounds pretty awesome. My objectins to buying a MBA are evaporating quickly.
Well, then to be Devil's Advocate, let me say add a few things (only because I don't want to be jealous of not also getting one). Part of the time I spent developing was working on graphical assets for apps because my developers never quite understood the whole @2x thing, so I just gave them full-res sizes and did the work myself. Unless the Airs have become more powerful, Photoshop taxes them. Also, going to a non-Retina screen from a Retina one is painful. I get why Apple isn't updating those screens (battery life), and I support it, but it's hard for me to go back. Lastly, if you intend on using this as a mobile copy of your home-based desktop setup, you'll have to be rigorous about sync. The last time I tried it was before git was popular and Dropbox was a thing (and my Air, for that matter), so I had a complicated rsync setup that would look for my machines and sync for me. Needless to add, I lost a lot of files during those trying times. And I'm just now realizing how old that makes me sound. 
MBA 13" owner and games / web developer. It runs XCode just fine, couldn't recommend it enough. They have i5's now so code compiles and runs fast. You'll be fine.
Additionally, I like to go into the Preferences and add a shortcut to toggle the toolbar (this way you can resize the window to be half-screen width--with the toolbar, the window will not be allowed to resize that small). I use usually Cmd-Shift-T (which I think is also "New tab" but I don't care) and it works well enough.
I have the MBA. It's really a great laptop for development on. Especially if you want to move around a lot with it and for travelling.
Is it worth paying $150 extra to get the faster processor or is the 'standard' 1.4GHz good enough?
Backblaze looks interesting. Question is: can I trust these people with my data? Mind you, I trust Dropbox god knows why.
Good point though. My MBP is 2.5 years old i.e. not retina, so I won't know what I'm missing. Plan B is to wait til the new MPBs come out and get one of them and live with the size and bulkiness. Sigh.
Read their blog - they're damn serious about what they do. Will they be around in 10+ years? No idea. But they're 100% legit and on-spot right now. Also, the price is right: $5/month.
Looking at your comments, I don't know how you guys do it. When developing for iOS, every time I have a relatively big project, Xcode becomes a pain in the ass. Maybe that because I have a late 2010 model (1.86Ghz Core 2 Duo, 4GB RAM). It's fine for everything else that requires moderate computing power though.
Because the place I work at is cheap &amp; thoughtless with purcahses, I dev on a 11" Air hooked up to a 23" monitor. It works just fine most of the time... the only time I really feel like bitching about it is when I'm using xcode6 and the swift interpreter takes a dump all over itself. CPU usage will soar to 100% and it's damn near impossible to backspace over what caused it. Other than that, it's been pretty smooth sailing. 2011 MBA, if it matters.
I use a 13in MBA when not at my desktop and it works fine for working on code. Editor mode is just annoying but then again - I'm rarely starting new projects on the laptop - just working on existing ones and the storyboards are already set up. I wouldn't recommend the 11in though - waaaay too small. 
Yea I have the mid 2011 with the i5 and I have yet to find an Xcode project that taxes it. 
Hmm, can you post a screenshot of how this works? Sounds interesting. 
from what I can tell Xcode tends to get I/O bound really fast on non-SSD machines.
I'm sold!
I come from a C++ background, Big Nerd Ranch is great. I haven't learned so much from a book. It's difficult at first, but that's because they explain things in such a dense and concise way that it takes a bit of practice before you truly conceptually understand it. However, if you're like me, I like someone going through the steps in a video, and so I bought the "The Complete iOS 7 Course - Learn by Building 14 Apps" Udemy course for $10 (from $499) during their sale a few weeks ago. If you don't have $499 to learn Objective-C (I don't blame you), check out Udemy for some other highly reviewed courses. Udemy has helped me out a boatload in my programming education.
It seems like your confusing properties with member variables in several places. You primarily have computed properties which only require reference to an address book or contact, but the you are keeping local references to those values along with recomputing them each time. For example, in `-phoneNumbers`, there is no reason to have a `_phoneNumbers` member variable, a method local variable will do just fine. Because you're using shared vars in your properties, there are several race conditions that would exposed if these methods were ever called from multiple threads. In several instances you initialize an `NSString*` to an empty String, only to set it to a copy of a contact field later. Skip the empty allocation and just declare and set the string to its value at the same time. In `HALAddressBook` you create a copy of all people which is leaked. In general, I think your classes should be doing more setup at construction time (in `-init` or similar), like allocating an address book instance in HALAddressBook. This would allow you to avoid ordering concerns in some of your properties. This is brief, with less snippets than I'd prefer, but I'm on a mobile device, and it's difficult to jump back and forth between the code and these comments.
 // The difference is I remove all of the objects if (_phoneNumbers) { [_phoneNumbers removeAllObjects]; } ??? If _phoneNumbers has already been populated, why not just return it? Otherwise, if it's important to recalculate every time the getter is called, then there's no reason for the _phoneNumbers ivar to even exist. There are some other things I don't understand here. Where is contactref set? Why is there no constructor?
 if (_phoneNumbers) { [_phoneNumbers removeAllObjects]; } if (!_phoneNumbers) { //Create _phoneNumbers array _phoneNumbers = [[NSMutableArray alloc]init]; } You don't need that first `if` statement. If `_phoneNumbers` is `nil`, then the `removeAllObjects` call will be ignored. Even if you want the conditional, it would be clearer to have it as an `else` clause for the second conditional rather than keeping them both separate. if (phoneNumberRef) { // ... } I try to avoid code like this where you're essentially checking for a failure and wrapping the entirety of the rest of the method in a conditional block. It increases the complexity and cognitive load for reading the code. If your method can't produce anything sensible if `phoneNumberRef` is `nil`, then don't write it like this, invert the condition and return immediately. Rather than the code you have, write something like: if (!phoneNumberRef) return @[]; Then the rest of the method can be written under the assumption you have something to work with. Same goes with code like this within a loop: if (label) { // ... } If your loop logic can only operate if this is true, flip the condition: if (!label) continue; This way you write your assumptions at the start of blocks and the rest of your code doesn't need to be wrapped in conditionals. You're also screwing up your indentation there, and as a result you are in danger of calling `CFRelease` with `NULL`, which will crash your application. Regarding your model classes, rather than things like: // Properties …use: #pragma mark - Properties This way your source files will be sectioned out in the jump bar. Also, switching to a formal comment format would be useful so the toolchain can make use of them. For instance, appledoc or Doxygen. Things like `Foundation.h` imports should probably go in the precompiled header as well. There's no need to repeat this in every source file you write. 
I just implemented all of your changes. I really like your way of not wrapping up chunks of code within a conditional block. Here's what it looks like now: http://pastebin.com/nzweiM9s I'm not sure what you were trying to show me with the !label example, if you were just trying to show me how to use continue also, or if you meant for me to add that in for my specific use. Also, what did you mean by indentation in regards to CFRelease? This code has been crashing for some of the app's users and that's probably it, but not sure what you mean. I'll have to check out appledoc and doxygen later today. And I also removed the Foundation import from both files. Thank you for all of the help. If it wasn't for you guys I'd be lost.
&gt;Otherwise, if it's important to recalculate every time the getter is called, then there's no reason for the _phoneNumbers ivar to even exist. What would the alternative be? &gt;There are some other things I don't understand here. Where is contactref set? Why is there no constructor? The contactRef property is set in the View Controller, and it depended on the HALAddressBook class too, which I'm guessing was the wrong choice? self.currentContact.contactRef = (__bridge ABRecordRef)(self.addressBook.allContacts[index]); There isn't a constructor because I figured i could just set it's value in the View Controller when needed. Should I have done something different? Maybe created a constructor that takes an argument of addressBook's allContacts property? 
&gt;It seems like your confusing properties with member variables in several places. You primarily have computed properties which only require reference to an address book or contact, but the you are keeping local references to those values along with recomputing them each time. For example, in -phoneNumbers, there is no reason to have a _phoneNumbers member variable, a method local variable will do just fine. You totally lost me. In regards to using the _phoneNumbers instance variable inside of the phoneNumber getter method, am I not supposed to be doing that? And you mentioned a method local variable. Are you talking about passing in an argument? &gt;In several instances you initialize an NSString* to an empty String, only to set it to a copy of a contact field later. Skip the empty allocation and just declare and set the string to its value at the same time. Is this happening in my 2 classes, or in the View Controller code I linked to? &gt;In HALAddressBook you create a copy of all people which is leaked. I don't know what you mean hear either by "creating a copy" or leaked? &gt;In general, I think your classes should be doing more setup at construction time (in -init or similar), like allocating an address book instance in HALAddressBook. Yes I agree. Definitely need to look at init methods today. &gt;This is brief, with less snippets than I'd prefer, but I'm on a mobile device, and it's difficult to jump back and forth between the code and these comments. No problem I understand. I appreciate the help and patience.
&gt; I really like your way of not wrapping up chunks of code within a conditional block. The general term for this is [guard clauses](http://c2.com/cgi/wiki?GuardClause). Some languages have similar functionality built into the syntax. Swift has a modified form of guard clauses for switch statements, although it's used for a slightly different effect there. &gt; I'm not sure what you were trying to show me with the !label example, if you were just trying to show me how to use continue also, or if you meant for me to add that in for my specific use. Really just showing that you can use guard clauses within loop bodies as well. Your new version is incorrect though – you're returning an empty array but if you want it to work the same way as beforehand, you need to `continue` instead, which just skips to the next iteration of the loop. The way you have it at the moment, if any phone number doesn't have a label, you're saying that there are no phone numbers. &gt; Also, what did you mean by indentation in regards to CFRelease? If you look at your previous version: CFStringRef label = ABMultiValueCopyLabelAtIndex(phoneNumberRef, i); if (label) { [_phoneNumbers addObject:phoneNumber]; NSLog(@"phoneNumbers count in method: %d", _phoneNumbers.count); } CFRelease(label); …you'll see that the indentation doesn't match the logic. If we fix this: CFStringRef label = ABMultiValueCopyLabelAtIndex(phoneNumberRef, i); if (label) { [_phoneNumbers addObject:phoneNumber]; NSLog(@"phoneNumbers count in method: %d", _phoneNumbers.count); } CFRelease(label); …it becomes more readily apparent that the `CFRelease()` call is outside of the conditional block. This means that you're correctly only operating on labels that exist, but you are incorrectly trying to release labels whether they exist or not. Think about what happens when `ABMultiValueCopyLabelAtIndex` returns `NULL` – the conditional is skipped over, but then you try to call `CFRelease()` with `NULL`. The C-based Core Foundation APIs don't operate in the same way as the Objective-C runtime, so usually when you try to operate on `NULL`, you crash. To operate correctly, the call to `CFRelease()` needs to be within the body of the conditional block, not outside it. This isn't a problem with your new version of the code, as you don't reach the `CFRelease()` call due to the guard clause. 
&gt; In regards to using the _phoneNumbers instance variable inside of the phoneNumber getter method, am I not supposed to be doing that? I think what jonhohle was getting at was that if you're going to be re-fetching all the phone number information each time the getter method is called, there's nothing gained from using an instance variable to store this information – you're just throwing it away the next time anyway. &gt; And you mentioned a method local variable. Are you talking about passing in an argument? No, he's just saying use a local variable instead of an instance variable. So rather than having an instance variable called `_phoneNumbers`, you'd just declare `NSArray *phoneNumbers` within the method. That way you wouldn't have to clear out the array each time either. &gt; &gt; In several instances you initialize an NSString* to an empty String, only to set it to a copy of a contact field later. Skip the empty allocation and just declare and set the string to its value at the same time. &gt; Is this happening in my 2 classes, or in the View Controller code I linked to? It's code like this (abbreviated): NSString *number = [[NSString alloc] init]; if (phoneNumber) { CFIndex numberOfPhoneNumbers = ABMultiValueGetCount(phoneNumber); for (CFIndex i = 0; i &lt; numberOfPhoneNumbers; i++) { number = (__bridge_transfer NSString *)ABMultiValueCopyValueAtIndex(phoneNumber, i); } } At the start, you are creating an instance of `NSString`, but you aren't using it, you're throwing it away as soon as you call `ABMultiValueCopyValueAtIndex()`. You could just do something like this instead: if (phoneNumber) { CFIndex numberOfPhoneNumbers = ABMultiValueGetCount(phoneNumber); for (CFIndex i = 0; i &lt; numberOfPhoneNumbers; i++) { NSString *number = (__bridge_transfer NSString *)ABMultiValueCopyValueAtIndex(phoneNumber, i); } } &gt; &gt; In HALAddressBook you create a copy of all people which is leaked. &gt; I don't know what you mean hear either by "creating a copy" or leaked? This line: ABAddressBookCopyArrayOfAllPeople(self.m_addressbook); This returns a copy of an array containing all people. So an object has been created, and because it's a copy, you have ownership of it. But you're not assigning it to anything, the pointer to it is not stored anywhere. So you have allocated memory for an object with no way of releasing it. You need to either assign the result to something and then call `CFRelease()` on it later, or (more likely) just delete that line of code altogether because it doesn't do anything useful for you (the purpose of it is to make copy, but you're throwing this information away). 
&gt;Your new version is incorrect though – you're returning an empty array but if you want it to work the same way as beforehand, you need to continue instead, which just skips to the next iteration of the loop. The way you have it at the moment, if any phone number doesn't have a label, you're saying that there are no phone numbers. Fixed? http://pastebin.com/MKTz7b5D Thank you for explaining the CFRelease. I completely understand. That's probably why people are crashing. It has probably been returning NULL and then they get to the release and crash exactly like you said. Good to know about guard clauses. I like the code much better now. Not only does it function correctly but the less curly braces the better.
Yes, that looks better.
&gt; I think what jonhohle was getting at was that if you're going to be re-fetching all the phone number information each time the getter method is called, there's nothing gained from using an instance variable to store this information – you're just throwing it away the next time anyway. I think I get it now. I think one of the things that confused this whole thing for me, was I was trying to create these classes to fit into my crappy view controller code. I should have created the classes from a fresh view point, and then just altered the garbage in my View Controller to properly work with the class. &gt;No, he's just saying use a local variable instead of an instance variable. So rather than having an instance variable called _phoneNumbers, you'd just declare NSArray *phoneNumbers within the method. That way you wouldn't have to clear out the array each time either. Ok so I just read your comment and then reread his and i think I understand. I might as well just declare a NSArray *phoneNumbers locally, and this also goes back to what you said above about the ivar having no purpose because I'm just resetting it every time the getter is called. So I might as well return the user a "fresh" array of phone numbers every time, and ditch the property and ivar altogether. Is that right? &gt;At the start, you are creating an instance of NSString, but you aren't using it, you're throwing it away as soon as you call ABMultiValueCopyValueAtIndex(). Understood. &gt;This line: ABAddressBookCopyArrayOfAllPeople(self.m_addressbook); Ok I understand now. If you look in my HALAddressBook class, that statement is in 2 different methods: requestAccess and the allContacts getter. What if I just use self.allContacts in my requestAccess method? 
I recommend using bool instead of BOOL whenever possible. Reason? This: `#define MY_FLAG 0x100` `[…]` ` BOOL hasFlag = (flags &amp; MY_FLAG);` You'll notice that hasFlag is *always* false. If you use bool instead, it works.
Your answer is a bit misleading. You shouldn't prefer bool to BOOL "whenever possible". Instead you should prefer BOOL to bool when interoperating with Apple's frameworks which all use BOOL. Because of the underlying type mismatch (_Bool(int) for bool and signed char for BOOL) it is unwise to mix and match the two. If you're developing with Objective-C there's a great chance that you're working with Apple's frameworks so it's best to default to BOOL and only drop back if you absolutely know what you're doing.
&gt;(BOOL)hasMultiplePhoneNumbers Should also be a property. Why is that? Is it a general best practice to have BOOL methods backed by a BOOL property?
You could use a builder pattern, but honestly, it's overkill and rarely used in Objective-C.
It could be a matter of taste over smell. To me, a @property is a bit more of an abstract interface. It hides implementation details. It could be a variable, it could be a method, it could be another class that does some heavy lifting and hands back a value. In the end though, as a consumer of the interface, you don't care and if implementation ever changes... you still, don't care. What your method declaration is basically saying is @property(readonly) BOOL hasMultiplePhoneNumbers;
an original MacBook Air? I wouldn't recommend it but I've been getting by on that for several years now. You'll need to use MLPostFactor (MacPostFactor if they ever ship) to get it running 10.8, I've had very few problems with that hack (and the forthcoming update should be even better). But every once &amp; a while the system will overheat and slow to a crawl and then it won't be able to keep up with your typing, like me you'll learn to telegraph a large number of edits commands ahead and sort of be productive, but you'll eventually give up, close the machine &amp; put it in the freezer for a couple minutes, works wonders. If you have a spinning drive, the it likely has already failed due to overheating, or is about to. Find a ATA ZIF-connector SSD. Don't believe the Mac repair shop down the street that say that it's a proprietary connector and 3rd party SSDs aren't available, because they are. They aren't fast by any means but they're better. And whle you're shopping, try to find a replacement fan part, because that's likely to fail on any 1st-gen MacBook Air still in use. Same goes for the battery. You'd be we'll served by undoing most the screws on the bottom and relying on the magsafe's magnet to keep the case sorta closed, because when that battery fails and swells up, you'll know it right away and it won't break the keyboard or any motherboard connectors. Oh, maybe you were asking about a more recent model, in which case you're fine. Smaller screen Xcode tips: use tabs and turn off right AND left sidebars where possible, use a narrow font like M+ or the Apple2 font called PR #3 :-)
http://stackoverflow.com/questions/1053592/what-is-the-difference-between-class-and-instance-methods Generally speaking, the rule of thumb: A class method can be called directly from the class without instantiating it, like `[NSString stringWithFormat:...]`, while an instance method is only accessible on a instance of that class, like NSString's `lowercaseString` and `uppercaseString` methods.
Which libraries do you use? I've always been curious about this, but they just seem so underdeveloped compared to Core Foundation. (Do you have blocks yet?)
Thanks guys. It clarified things a lot!
Why would I use this over FMDB (especially given that it's closed source)?
So the basic difference is that fmdb is a very convenient way to query SQLite and manipulate the results. With DBAccess you persist and retrieve classes and hierarchies of classes. Removing the need to populate your objects with values from the results. Of course sometimes you may want that, but that is not the principal of DBAccess. There are other benefits too, but they approach the same target in very different ways. And what may work well for one person who wants ultimate flexibility and an good library to help tame the SQLite API, might be too much work and not for others. Although there is not much I can do about it immediately I would be interested to understand more about why closed source frameworks are problematic, what are the concerns and pitfalls and how can they be alleviated? Alto it is worth noting that the DBAccess team actively welcomes feedback and constructive criticism to hopefully improve the offering and offer more to the developer community. And of course any additional functionality or contributions would of course be open source. Leaving the core object storage as closed source. Thanks
Just a note on closed-source: if the developers drop the project, the framework becomes a liability, since it could stop working with a new release of iOS, or if it doesn't contain the correct architectures to deploy. If you have the source, you (or someone else) can maintain it, ensuring the framework lives on and remains usable.
The big issue for me with closed source is that if something goes wrong then you can't fix it yourself. In a big project you're taking the risk that a few months down the line you may find an issue with a core library that you can't get around. If it's open source then you have the option of fixing it yourself, for closed source you risk being in a position where you have to rely on another company being able to quickly fix your problem. Completely understand rules being imposed by a large company though.
Hi, To answer your questions in turn. DBObjects have the concept of being managed, as we use that functionality for the event model. So if you register an event handler on an object and that object is updated anywhere else then the changes are made in the second object too. But we have not added that into the public header as of yet, it is but a moments work to implement the access. We will need to discuss the terminology, and the following: 1.) Would you expect developers to be able to pick and choose which objects are managed. E.g. at the moment if you set a BOOL property isAlive to true it will be registered with the core and will receive updates from other objects. 2.) Or would you expect DBAccess to have a setting, which then lets it run in this "MODE" if you wish, so all objects that are created are managed by default and you can manually disable the feature on the odd object that you wish to remain separate. We wanted to avoid adding any additional steps for the developer in general. Interestingly (or not maybe!), the developers here hated the managed object model and that is why DBAccess defaults to having separate objects which act independently, allowing them to create the objects at will and not worry about affecting other instances. Instead using the event model to track changes in it when the record(s) were committed back to disk only when necessary. DBAccess, by default, lazy loads the related properties. The related object is then stored within the parent object so it is not fetched again. We have implemented an additional flag on the query formatter to allow the developer to specify that they would like to retrieve the related objects at the same time as the parent but at this time we are struggling to make any meaningful performance improvement over simply fetching the property at the point of access (other than the fact that the heavy query could be run in the background and a property access could potentially lock the main thread). It has been suggested here that we allow an array of properties that could be loaded, therefore a large class would not have superfluous queries made unnecessarily. At the moment this is not present in the public release, and the default is lazy loaded. I hope this has been of some help. And once again, if you have any feedback on any of the above then please don't hesitate to contact us, devs@db-access.org
Thanks for the feedback, I understand that a closed source framework leaves the developer vulnerable to bugs, and as I say my hands are tied at the moment. All I can really offer on this front is the fact that we have a great track record of fixing any issues that have been found so far but I appreciate that this is not much of a guarantee. It is also the reason we have only documented and released a fraction of the codebase, as we are only releasing things that have had adequate testing within our own application, once again I appreciate that this does not really address any real concerns! Thanks
The linked article claims the following as advantages over Core Data: Thread-safety High performance and support for query performance fine tuning Event model that enables binding data objects to UI controls and keep them updated with changes made in the database. These are all things that Core Data offers. Thread safety through queue confinement. Core Data is also highly performant, and allows application specific trade offs between memory and IO. Using Core Data and KVO (or, well, bindings on MacOS X) to bind UI elements to the data model is trivial. Later in the article there are comments about DBAccess like... "Implementation of COUNT, SUM, IDs, GROUP functions, which are performed at the SQL level and not after a heavy and memory consuming query." The Core Data NSSQLiteStoreType does do this, by decomposing NSExpressions into SQL operations. "We implemented the ability for developers to specify which database file an object is stored in, so you could split your data layer across multiple files." Core Data also already does this. But the really strange thing is that DBAccess claims to be an ORM (at least in the article), while Core Data is an API for managing the life cycle of objects that are part of an object graph. These two things are not necessarily comparable. Given all of these things, I don't see what DBAccess offers that Core Data does not. Core Data is not a database, nor an ORM, so the two are not even really comparable.
Thank you for taking the time to respond in such detail. I appreciate that this is quite a significant and subjective set of specific points you make, which on their own are not at all questionable. But I would like to take the opportunity to put across a couple of points if I may. Thread safety through queue confinement, it is true that in their third attempt to quell issues around this subject this certainly does deal with the common place reading and writing issues, this does not entirely deal with the problem. You still should not pass objects through thread boundaries, and if you do you will be made responsible for ensuring adequate locks are made. Core data is highly performant, this is the most subjective of all but, and I am happy to be corrected, but there are additional pieces of performance information that are not available in core data, such as how long it took to to obtain a suitable lock, how long the WAL log took to commit back in, how long the query took to parse, which indexes were used to perform the query. KVO to bind UI elements, this is only half of the story, as you get events that are table based as well as object based. Which of course you could add into your Core Data objects yourself, but then you can program anything yourself. So to extend on that point, it is about more than just mapping properties to UI objects. So you can register a block to update a table's data source on insert and delete to a table, but the update of individual cells would be dealt with by registering a block to update the UI contents of a cell against that individual data object which is the same as your KVO, but arguably more work (to do the actual update) but also more flexible (?) as the block can contain anything with no need to create superfluous methods. The Core Data NSSQLiteStoreType does do this, it does indeed no question. But if I was being a pedant, so does just talking to the db file though the sqlite api, it is not quite the same as constructing a query object, calling COUNT on it, and then using the same query just calling fetch assuming you were interested in the value returned by the count (as an example). Multiple database files, my understanding (assumed understanding which I am most likely wrong about) is that these exist in separate models and you can't query across them within the same operation. I am still not entirely sure what constitutes an ORM, reading several definitions I still do not think DBAccess qualifies entirely either, and I am largely unqualified to comment on weather Core Data is an ORM in even the looses'd of senses. It is hard to portray tones in written text, but my intention was only to point out some of the more complex differentiation's about the philosophies which I completely agree does make it hard to compare apples and pears. But from the standpoint of what people want to achieve in a product, they are both fruit. Thanks Adrian 
&gt;Thread safety through queue confinement, it is true that in their third attempt to quell issues around this subject this certainly does deal with the common place reading and writing issues, this does not entirely deal with the problem. You still should not pass objects through thread boundaries, and if you do you will be made responsible for ensuring adequate locks are made. You should not pass managed objects between *contexts*. A context observes the life cycle events of an object. Passing that object between contexts does not make sense. Passing an *object ID* is safe, and encouraged. This actually has little to do with concurrency, and more to do with Core Data behaviors like faulting. In Core Data today the concept of locking objects and contexts at the application level is long gone (and has recently been officially deprecated). Thread confinement exists only for backwards compatibility, and it's use is very much discouraged. You should not be performing locking on managed object contexts, and instead should be using a context's queue to mediate access. You should not be concerned with thread boundaries at all if you are doing this correctly - access to a context should only be through it's queue. &gt; Core data is highly performant, this is the most subjective of all but, and I am happy to be corrected, but there are additional pieces of performance information that are not available in core data, such as how long it took to to obtain a suitable lock, how long the WAL log took to commit back in, how long the query took to parse, which indexes were used to perform the query. All of the things you mention here are specific to the NSSQLiteStoreType, and all of them can be measured using Instruments and DTrace. A well designed Core Data application should read from the disk *rarely*. &gt; So you can register a block to update a table's data source on insert and delete And if that insert or delete never happens, what happens to the block and the variables it captures? &gt; The Core Data NSSQLiteStoreType does do this, it does indeed no question. But if I was being a pedant, so does just talking to the db file though the sqlite api, it is not quite the same as constructing a query object, calling COUNT on it, and then using the same query just calling fetch assuming you were interested in the value returned by the count (as an example). I am not clear what distinction you are making here. Core Data does what you describe above. The first time you execute a count fetch request it's turned into SQLite and executed. The second time you execute it, if none of the relevant data has changed in the context you get the result of the fetch from memory. It does not execute a SQLite query the second time around unless the context and row cache are dirty. &gt; Multiple database files, my understanding (assumed understanding which I am most likely wrong about) is that these exist in separate models and you can't query across them within the same operation. That is incorrect. You may recall that addPersistentStoreWithType:configuration:URL:options:error takes a configuration as an argument. A single model may span multiple stores, with entities assigned stores based on the configuration. This can also be changed at runtime by telling a context to store a specific managed object in a specific store (assignObject:toPersistentStore:). Entities can have cross-store relationships by using fetched properties.
OK I'll keep this very brief, firstly my apologies as the documentation that I have saved in my bookmarks clearly states that this methodology is now outdated. I think to drill the point, we have made every effort to ensure that the developer does not need to worry about where or how they move or pass objects about. It used to be the case that the object needed to have been persisted already to have an id, which used to make passing new objects between contexts more of a challenge, but I have no idea if that is still the case. We considered this an annoyance but as you rightly point out it has more to do with Core Data's implementation than anything. I was unaware that Instruments and DTrace were able to track WAL write back, seek times (to the first page in the db file to start the step, which is often a sign of a fragmented index), and the sqlite lock times which we often use to determine when we have too many concurrent operations. I will check out the documentation to SQLite as this would mean that DRH has made this information available somewhere and that will be great because it means I can finally stop customising the SQLite source to add the hooks in for these timings. &gt; I am not clear what distinction you are making here. Core Data does what you describe above. The first time you execute a count fetch request it's turned into SQLite and executed. The second time you execute it, if none of the relevant data has changed in the context you get the result of the fetch from memory. It does not execute a SQLite query the second time around unless the context and row cache are dirty. I guess the distinction I am making here is that if it has already performed this query then it has pulled the objects out and added them to the cache, performing any kind of select is much slower than a count. Initially I thought about getting the PK values into an array and counting them, that way I could just select by all the PK's, but this was also much slower than a count operation. So as you say, it performs a heavyweight operation upfront just in case the count was something you might want to act on. Happy to be corrected about the multiple stores implementation. &gt; And if that insert or delete never happens, what happens to the block and the variables it captures? It's like any other normal objective-c implementation, when the DBEventHandler gets released the blocks get released to. There are also some memory optimisations as well for when an object is removed from the store and blocks that registered against update events are released as well, and the delete blocks will get released once executed as they can never we called again. 
Looking here: http://www.opensource.apple.com/source/xnu/xnu-1504.9.26/iokit/IOKit/IOReturn.h It seems to be a power issue. Which is strange. What sort of "stuff" are you doing over the connection? Edit: just thinking, it could be keeping a reference to "h" hanging around depending on how this is being called every five seconds. The time delay could be because it's taking awhile for these references to build up and over power the automatic management of the chip. Try setting h to nil after closing the connection. 
The only thing taking place during the connection is polling the RSSI. IOReturn h = [device openConnection]; if ( h == kIOReturnSuccess){ rssi = [device rawRSSI] } [device closeConnection]; Very weird indeed.. I'm using an early-2011 MBP.. could this be a case of shitty/shot BT hardware perhaps? I have tried using a USB-BT dongle.. to no avail as well. I will try setting `h` to `nil` and report back. EDIT: No go on setting to nil.. thought ARC would eat it at the end I guess anyway.
Hello I noticed you posted this just recently only 20 days ago. I am very and I mean VERY new to programming. I have dabble a little bit on code academy and that's it. I want to switch my focus to app developing. My question is should I start with learning Swift now since it just came out and might be the next big thing over Objective C or learn Objective C and start making apps? Also was wondering if you can help me and guide me through the learning process?
Thank you. These are exactly the type of things that I was looking for.
Could you explain what those are? I don't have a terribly in-depth knowledge of Objective-C currently.
YO. Bucky's the shit. Also great for C++.
are you referring to https://www.youtube.com/playlist?list=PL7616DF1A2D094450 ?? your OP didn't have any links in it
Wut
Bucky Roberts is pretty terrible to be honest. Teaches bad habits, and there are a lot of better resources out there.
They aren't formally documented. Check out the kernel source headers and other mach resources online. Excepts from "OS X Internals: A Systems Approach" should prove helpful.
Ah, then it's as I feared. I'll look into the kernel source headers and that book, though. Thanks.
in the function, hide button or deactivate, then create a delegate function (delegate will be called when task is complete, this case delegate will re-enable the button) 
I am unsure, but I am unable to press the button to set the "attack" after the while loop has begun.
im sorry, but where do I do this. I am supposed to create a new function (deleate function?) to re-enable the buttons? Sorry, i am very new to iOS development.
read a bit on what delegate is, and can do. Not sure if you've ever done javascript, delegate is like a CALLBACK function. http://stackoverflow.com/questions/290819/are-delegates-and-callbacks-the-same-or-similar bit more on delegate https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/DelegatesandDataSources/DelegatesandDataSources.html http://www.alexefish.com/post/522641eb31fa2a0015000002 
oh ok, thanks a ton. ill check it out, hopefully ill be able to figure it out from here.
A while loop is the tong way to go about it. That loop runs continuously with no easy for interruption, as you noted. You need to make your code son me form of "event driven." The stuff in your "while" loop needs to be broken out into its own function, and you need a timer that runs it periodically. There's a Swift tutorial for the game Life that should help out. On mobile so it's not easy to link it, but it was posted about a month ago in this sub.
Thanks a ton. I just found it and will definitely run through it. I ran a few google searches for event driven swift and it seems there are very few examples but this one looks perfect.
Great. It's an important thing with most soft we these days - you have multiple things going on, an a lot of things may need to happen at specific times. By having the button trigger a change, your regularly-scheduled "update game state every 100ms" or function can merely look at what things have changed and react.
What are the benefits of Pop over plain Core Animation?
Pop gives your animations a dynamic feel.
Am I the only one that thinks Swift's syntax looks just awful? Neat article, though
This would be better received in /r/swift. There isn't any ObjC in that article.
Reading your post and a bit of [this](https://developer.apple.com/legacy/library/documentation/Cocoa/Conceptual/CocoaFundamentals/CommunicatingWithObjects/CommunicateWithObjects.html) cleared that up for me quickly, thanks /u/remy_porter!
And then, when you start implementing protocols for simple things such as UIAlertView button presses, that's the point you wish there was a block-based version of that. Hail iOS8! (But that's another story…)
The object you are attaching to is just doing something like this: - (void)pause { // Do whatever work is involved in pausing here.. // Tell delegate that we paused. if ([self.delegate respondsToSelector(@selector(dynamicAnimatorDidPause:) ] { [self.delegate dynamicAnimatorDidPause:self]; } }
That's brilliant, thanks for showing that!
You probably should just learn how to code.
Yeah i know but id like to finish my game first. Would you be able to help me out? 
Technically, it is (and should be) a class. It just has no state and is never instantiated. Right now it's correctly implemented.
Ok great. Does it still need directives like @implementation and @interface or would it literally contain what he provided on the code review I linked to?
I personally think that making them C functions is unnecessary and that the cost of instantiating an object for those functions is negligible compared to consistency when using Objective-C methods. So I would keep your classes the same way.
I'm split on this. I have a program that's been around since 2002, and in the last year I've been "modernizing" it by attempting to adopt all of the latest thinking in MVC and proper design. This is mostly a learning exercise, as the functionality of the app hasn't changed all that much in 12 years. In the beginning, I had a single NSDocument subclass that also served as the data model for the document, the window controller for the document window, the delegate for other bits and pieces, and the controller for the logical view sections. It consisted of a header and an implementation file. Now that I've adopted modern techniques instead of a nice, simple NSDocument subclass, I've got an NSDocument subclass, a window controller, view controllers for all of the logical views, and it's significantly harder to understand at first sight if you're unfamiliar with the code. Sure, some of the pieces are reusable, but the fact is, I'm not likely to reuse them. Neither is anyone else. Apps are tailored, and every experience is unique. I think in every respect I was personally happier with the monolithic NSDocument, but I suppose for people that look at my code, I should be happier with the 20 different source files. I'd appreciate criticism. It's on github since the early versions. I won't post it here, as I'm not trying to promote my app. I'm not a pro; just a hacker. 
&gt; I won't post it here, as I'm not trying to promote my app. Thats too bad. It would be interesting to compare the old vs new, not to mention some of us may discover a new app that fulfills a need. Please consider posting the link!
&gt; Sure, some of the pieces are reusable, but the fact is, I'm not likely to reuse them. Almost everybody should be reusing the individual pieces of their applications at least once – in unit testing. If you can't separate out a part of your application into a reusable component, it becomes very difficult to write tests for it. 
It would be more typical to use a controller. The controller mediates access to the model. In your case, you might have a ContactsController, with the specific concrete subclass being ABContactsController. That would have most of the functionality in HALAddressBook now - it's a concrete ContactsController that useses the address book. It manages a collection of HALContacts (i.e. getting data from the address book and creating model objects is handled in the controller, as is any other access to model objects). Then your view controller is just talking to a ContactsController. It may not care what specific subclass is being used (i.e. ContactsController may be a class cluster), just that ContactsController responds to the expected messages. Swapping out ContactsController implementations is pretty easy at that point. The controller may (ok, almost certainly would) have a delegate protocol to inform the view controller of events - for example, a contact was added to the controller, etc. A reasonable example of this pattern is NSFetchedResultsController's delegate protocol. An NSFetchedResultsController manages a collection of objects that match a fetch request. As that collection changes it informs it's delegate.
Pen and paper are a great way to quickly prototype. Don't get caught up in assuming what objects (models, views, controllers, helpers, etc.) will be needed ahead of time. Break things down by functionality and go from there. Lists probably need a table view. Groups a collection view. Leverage the big pieces that AppKit (or what have you) provide. Write as little glue code as possible and keep things separated so you can split responsibilities down the road. Write small methods and classes. Refactor often. Don't be afraid to delete, rename, move code. I say skip crap like UML programs. As soon as you're done implementing whatever you've graphed out it'll be outdated and useless. Let your code be descriptive and straightforward enough to be your documentation. *sits down and waits for the flamewar*
It will depend on who's your client. If it is yourself, do as you please, if it's another guy/business who's paying you you should, for your own safety, create a kind of written definition, agreed and signed by your client, of what you'll do, how you'll do, how much time you'll spend and how much it will cost, se he knows what, how, when he'll get what he signed to and what it will cost. This way you'll not code extra features for free (clients are experts on doing this) and if he changes his mind he'll be bound to that agreement, and if he thinks things should change anyway he'll pay for it. Not that things can't change, but changes have costs, both to elaborate and to execute. Your client must pay for your non-coding work (elicitong requisites, creating the architecture, doing the UML modelling). Even if you are developing something for yourself, some planning is important, and even being tedious, you should spend time with it. It will save a lot of time in the future, when you try to mantain or even expand your program, adding new features, just to find that the way you structured before is not the optimal solution and you'll have to rewrite a lot from scratch, or get bored and throw it in the trash can. You shouldn't underengineer just as you shouldn't overengineer. Aim for clarity, maintainability, expansibility, and document your software, preferably using some inline language that can be exported to various formats (as Doxygen and JavaDoc do). Use descriptive names for variables, classes and classes' properties and methods. Avoid Hungarian notation. Lots of more things.
Misleading title, perhaps "enter to win a copy of....
It may be more verbose, but *createdObjectType*–by–*actionYouArePerforming*–*argumentType*: is such a consistent naming convention that the verbosity is more than made up for in predictability, especially when you consider that autocompletion does most of the work anyway.
So, that seems like a good argument since autocomplete does help... but needing autocomplete in the first place is the problem. When I show new programmers the code above - they can figure it out except for the Objective-C. Perhaps the payout is in very complex functions.
Yes, Objective-C is verbose. *Some people even like that*. Autocomplete exists.
&gt; Perhaps the payout is in very complex functions. The payout is that it's very easy to memorise APIs because it is very consistent. An Objective-C developer who had never seen that method call could quite easily guess its exact name, arguments, and return type without any prompting because it follows the same pattern as everything else. 
It saves time reading the code. And there's completion…
Pen and paper almost always unless it is something that is going to be one view and even then I am drawing something out. It is best to visualize it. From these conceptual drawings it will allow me to flesh out a very rudimentary model system and supporting classes that I may need to implement the particular view(s). I don't and have never used any UML programs. 
Verboseness is a *feature*. It's not like we're short of ones and zeroes.
You are going to write this code once, but it may be read many, many times. If the code is written for clarity you're saving time when it needs to be read and understood.
Is this code just located at your main function? The success or failure block will be called asynchronously when the requests finishes, but this may take a while. I suspect that, if you have no code following the snippet that you've posted that waits for completion, that your program just exists (with exit code 0...) immediately, without waiting for a response. So for testing, you could just add an infinite loop at the end of your program, just to see if you get a response. 
Yeah it is, and that seemed to be the problem. A fellow from r/simpleios suggested trying it out in an empty iOS app, and it worked fine there. I did attempt using an infinite loop in the main function, but I did not get a response back (and the CPU usage was huge.) Is there any other way to work with AFNetworking in a Foundation console app, as in set it up in a way that the program waits for all threads to complete before main ends?
/r/simpleios *** *I am an automated bot. To have me not reply to your comments anymore, send "Please blacklist me from redditlinkfixerbot!" in the body of a private message.*
The problem is likely there's no "run loop" in your app. AFNetworking by default performs its completion blocks on the main run loop/event queue. Try adding a call to "void dispatch_main(void);" after the network request call. That call never returns, so you may want to add an "exit(EXIT_SUCCESS);" or "exit(EXIT_FAILURE);" inside the completion routines. 
I ended up using CFRunLoopRun() and then inside the block statements, I called CFRunLoopStop(CFRunLoopGetCurrent). Not the most practical, but it gets the job done. Basically your infinite loop suggestion. Thanks!
Xcode.
xCOde
How is this course?
So far it's interesting and fairly well done. I was enjoying it yesterday but, for some reason, the site isn't responding currently (2014/08/19). I'll know more about it once I get further into the course material but it progresses smoothly so far. I've looked into the challenges and the apps being built and they seem fun. 
What's this?
It's okay. The properties part goes really fast so it confuses me and frustrates me. Not very beginner friendly. I can code with him guiding me but he hasn't taught how to code without his help. So I don't know how independent I'll be once I am done with the course...
A tutorial series on iOS. 
IMO, learn the C language first. Mac and iOS apps are written using the Objective-C language which is a subset of C. You need to understand the basics if variables, conditionals, loops, etc before trying to tackle the Cocoa library.
Check out /r/learnprogramming, especially the FAQ. Check out http://www.codecademy.com/ as well. They have some interactive guides that are good at getting people started on the path. You need to understand the basic building blocks before you can zero in on a language.
Pedantic maybe, but Objective-C is a superset of C, not a subset.
Yeah you're right, got the wrong word.
All good, figured it was important to correct it since OP is new to it all.
Check out http://www.raywenderlich.com/tutorials and look at the series called Beginning Objective-C. 
oh it looked it you hired them to make apps for you it seemed. 
I think this would be appropriate maybe in a year after Swift 1.0 is released and good learning material is available, but until then, no, it's beta and should not be used by anyone who isn't already a programmer, imo.
* The big Nerd Ranch book on Objective-C is a very good place to start. It assumes no previous knowledge of C or of programming. Make sure you get the latest version (there are earlier editions still being sold). * Bill Dudney's book on the iBooks store *All The C You Need to Know* is a very good book on C, especially because it emphasizes programming patterns you'll spend a lot of time with rather than bit-twiddling that was so important in the days of smaller computers. * the iTunes University course by Stanford professor Paul Haddad is great, but you need to already know C and possibly a bit of how to use Xcode (just the basics) since the features aren't really explained to a newbie. * Swift looks like it will be a good programming language, but you will only see Apple's books out there now. The language is still in flux, and I'd be really careful of the inevitable first dump of programming tutorials and books that will come out the day Swift 1.0 is declared final. Lots of folks will just re-write Python, Visual Basic, or Objective-C lessons into Swift without really understanding the design patterns of the new language. Be patient with Swift.
[Learn Code the Hard Way](http://learncodethehardway.org). I'd recommend C to start. The reason for this recommendation is that *this is a hard thing to do*. People can attempt to make programming easy but the fact is, there is no easy in programming. This is a problem solving business and the problems are abstract, require deep knowledge of how computers really work and how to use computer science concepts to solve them in an efficient and effective way. Bonus points: If you learn C, you can write "straight C" in Objective-C projects because, as stated by /u/silver_belt, obj-c is a superset of C.
Thank you for explaining what and even more why I have to start with C. In fact that is probably what I'll do!
Thank you! I will look into it! 
Yep, the BNR book on Objective-C is one of the best. The first five or six chapters do cover some C programming, but only what is necessary for Objective-C.
Start here. [Start Developing iOS Apps Today](https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/index.html) Search and ask questions as needed while you work through the basics of building an app. You will have a much better idea of what you need to learn after reading Apple's getting started doc.
I was in a similar position to you 2 years ago. I also got the advice to starting programming in C as it is arguably the hardest language and you will the basics of everything there. I humbly disagree and would recommend that you start with an easier language for the basics. Javascript or Python will get you started with understanding the basics of coding, variables, conditionals, loops, functions, objects (more Python).. For me, starting from scratch and self learning C was really demoralising and frustrating. Starting with an easier to grasp language and moving towards the harder ones in time makes more sense. After all, when you start anything, you rarely start in the hardest way, you try the easier way and move up as you get better. Thats what I'd recommend anyway! Best of luck with it!
Okay that makes sense! I don't want to learn quickly really, although time is a factor. But I would rather sacrifice some time to be 
Oh okay! What exact coding language should I start with? I understand what you are saying, because even with where I am I am still overwhelmed. I am completely fine with sacrificing time for solid and excellent coding skills and knowledge.
The root of the problem is she doesn't know how to take a screenshot. Edit : Gender
Exactly. People trying a big start will loose motivation at big speed. 
In future, you can take screenshots in PNG format by pressing Cmd+Shift+3. If you press Cmd+Shift+4, you can select the area you want to screenshot using the mouse, or press the space key to enter into "snapshot the window under the cursor" mode. The screenshot will be saved to your desktop.
So if you use IB for layout, initWithFrame isn't called, but initWithCoder is called...I tried changing the height of the key "height" for the deCoder object but it crashes the app.
still nada
&gt; ...the only thing that works is changing the frame after the application starts: searchField.frame= CGRectMake(-1, 85, 365, 21) Modifying the frame is the correct way to do this. Why have you ruled it out?
That's what I'm doing now, I just wanted to follow some best practices. Most of the info online says to always subclass that UI object and implement your own drawing of the frame/rect. Is this not the case? Thanks! Edit: Also, my window is resizable...resizing clears the frame. If I put "searchField.frame=[1] CGRectMake(-1, 85, 365, 21)" inside my windowDidResize method, SOMETIMES the frame gets redrawn to the correct height, sometimes not...I think I'm missing some fundamental concept. 
Hi, Are you just trying to change the frame of the search field from code (not IB)? If so, you don't need to subclass anything. You can just do the the following from the controller that created the search field: https://gist.github.com/anonymous/4cc9d881c03a0a41deba --- It should also be noted that -drawRect doesn't affect the actual frame of the control. If you're trying to custom an NSTextField you'll want to look into writing an NSTextFieldCell subclass: [Reference] (https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSTextFieldCell_Class/Reference/Reference.html) --- For resizing support you don't want to manually change the frame every time the window resizing/redraws. You should look into using the autoResizingMask property to let Cocoa handle this for you: [Reference](https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSView_Class/Reference/NSView.html#//apple_ref/doc/constant_group/Resizing_masks) Please let me know if this helps you at all.
Thank you, I will look into this tonight.
icecoolmetalhead - properties are super confusing when you start out. I'm a big believer in mimicry being a great to way to learn coding. I would recommend continuing to write code and I think a lot of these concepts will sink in.
I haven't ever had an issue with git missing files unless you've added paths to your git ignore (either locally or globally). One thing that may help you in the future, if you drag the folders from Finder into xCode, xCode will create groups that link to the folder. So "show in finder" on a group will now actually navigate to the correct place. Adding files into a group now will also put them in the same spot.
Why are you trying to commit all your pods? You should only really be commiting Podfile which is used to install everything. I'm pretty sure cocoapods adds Pods **/Pods Podfile.lock To your .gitignore
I've done this before but still experienced build errors, but this was a long time ago. Maybe I was doing something wrong back then. Thanks for the help!
I've done this before but still experienced build errors, but this was a long time ago. Maybe I was doing something wrong back then. Thanks for the help!
&gt;"If you want to combine Storyboards and nibs, the easiest way is to drag the VC to the Storyboard, but then remove the View from it. Then create your class as normal and tick the "create xib" box. Set the class in the storyboard to your newly created class. Now when your app runs it will load that view from the xib rather than the storyboard." Ok, so I just followed these exact steps for a view controller and 100% sure I understand you correctly because I did the same thing previously for a UICollectionViewController. Something is still wrong. When the app runs its just a black screen. I currently have a xib called MyViewController.xib, and it contains a view and I even added a label with text to it. I then went to the UIViewController on the Storyboard that has a custom class of MyViewController, and I deleted it's view. I also made sure to set it as the Initial View Controller. Is there something wrong with MyViewController.m? It currently has the boilerplate methods for initWithNibName, viewDidLoad, and didReceiveMemoryWarning and that's it. I haven't added any code at all. Any ideas?
I figured it out. I thought I could clean out my didFinishLaunchingWithOptions: like normal so the following code had been deleted: self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]]; self.window.rootViewController = [[MyViewController alloc] init]; self.window.backgroundColor = [UIColor whiteColor]; [self.window makeKeyAndVisible]; I added that code back in to the app delegate and everything's working 100% fine now. Thank you so much for the help
One quick thing I wanted to ask you, what's the best practice when it comes to xibs/nibs? If I have a UICollectionViewController.xib, is it ok to create the UICollectionView and UICollectionViewCell in that single xib file, or should each view element have it's own xib file? This seems like it would be overkill, but I want to make sure that I'm following best practices.
I've whipped up a quick project demonstrating how to do it here: https://github.com/exidy/storyboard-plus-xib
It's really up to you. You can have multiple views in a single xib but then you need to write code to pull out the right view in the right place. I personally think it is OK to have related views in the same xib.
Based on your post it sounded like you were not pushing the pod files when you had intended to. I had just assumed you were not manually changing your .gitignore.
&gt;Based on your post it sounded like you were not pushing the pod files when you had intended to. I don't know what it is. When you do the initial commit via terminal all files will be included, but if you try to commit via xcode for some reason it does not automatically select all of the files. They all have checkboxes, and you have to tick them off manually. I'm just going to stick to terminal for initial git setup from now on. Xcode causes too many git headaches.
XIBs are a fair bit less sophisticated than Storyboards. So while they can hold multiple views, they can't express the relationship "subview" that you're attempting there, like a Storyboard can. You can build use the XIB to build your UICollectionViewCell, but you'll need to locate and add it to your CollectionView programmatically. Similarly with storyboards you can prototype tableviewcells inside the tableview, with XIBs they are separate. Honestly, storyboards are pretty good. Is there a reason why you're forced to use XIBs? 
&gt;Is there a reason why you're forced to use XIBs? For this project I'm not allowed to do everything in a Storyboard like I'm used to. Luckily for me, they gave me the choice of using xibs with a storyboard or storyboard with all UI created programmatically. I'm deleting the xibs as we speak and going to do all UI work in code. I actually think I found a legitimate bug tonight. check it out: http://www.reddit.com/r/iOSProgramming/comments/2ei1fm/i_think_i_found_my_first_legitimate_bug_tonight/
This is how I do it: http://stackoverflow.com/questions/9251202/how-do-i-create-a-custom-ios-view-class-and-instantiate-multiple-copies-of-it-i/9251254#9251254
The `static` and `const` keywords both come from C, so if you want definitive answers, look for C documentation. I'll start by explaining `static`, and then I'll come back around to answer specific questions in your post. **Explaining `static`, and its nemesis `extern`** The first thing you need to know about static variables is that they are *always global*. Even if you use them inside a function/method, they are still a global, and that's why they "remember" their value. The second thing you need to know is more complicated. It requires that you understand how compilation works in general. This is a simplified version of how C (and therefor Objective-C) compilation works: 1. Open a *single* `.m` file, (let's say `TDFoo.m`) 2. Preprocess the file. When the preprocessor finds a `#include` or `#import`, it basically copies and pastes the entire included file into the current file. In this case, it finds a `#import "TDFoo.h"`, so it copies the entire content out of `TDFoo.h` and pastes it into `TDFoo.m` exactly where it found the line `#import "TDFoo.h"`. After the preprocessor has included everything, you have a massive single file full of source code called a "compilation unit". 3. Compile the compilation unit. This takes all the code from the previous step and compiles it into and "object" file called `TDFoo.o`. The object file contains machine code, and also some metadata about functions, classes, etc. 4. Repeat the first three steps for every `.m` file. 5. Link all of the object files together into a single executable file. In this stage, the linker looks at the metadata from step 3 in order to link things together. For example, the linker can tell from the metadata that `TDFoo.o` is using a global constant called `NSViewFrameDidChangeNotification`. The linker will look through all the other object files to find another object file that actually contains the `NSString` for that constant. It might find the constant in `NSView.o`, so it will link up the pointer in `TDFoo.o` to the correct location of the `NSString` inside of `NSView.o`. So, with the above steps in mind, I can explain `extern`, and the second half of `static`. `extern` says to the compiler "hey, see this variable here? I don't actually have it in my compilation unit, but I know that it exists in another compilation unit. I want you to compile everything pretending that the variable exists. Then, later on, the linker will find where it *really* exists and it will link up everything correctly." `static` says to the compiler "hey, don't store any metadata about this variable here. Make it work inside this compilation unit, but don't allow the linker to find it later." So, when another compilation unit tries to use the static variable, the linker will give an error saying "variable not found". Using `static` prevents other compilation units from using a variable via `extern`. **Your Post** For the three sources you've quoted: 1. This is basically correct, although maybe a bit oversimplified. 2. This is correct, if you replace the words "current file" with "compilation unit". 3. This is not correct for Objective-C. This source may be talking about another language, such as Java. Let's start with notification names. This is how Apple (and I think most developers) do `NSNotification` names: //TDWhatever.h extern NSString* const TDWhateverNotification; //TDWhatever.m NSString* const TDWhateverNotification = @"TDWhateverNotification"; Notice that `static` is not used anywhere. This makes sense, because this global constant is meant to be shared, so it shouldn't be limited to a single compilation unit. All the other compilation units will `#import "TDWhatever.h"`, which allows them to use the variable via `extern`. Now lets look at where you might use a static constant. This is a real example from code I've written: //TDFoundationExtensions.m static void* const TDNotiObservationListKey = (void*const)&amp;TDNotiObservationListKey; In this case, notice how the constant isn't declared in any header. That is because it is essentially private. There is no reason for this constant to be used outside of `TDFoundationExtensions.m`, so it is static. If another compilation unit tried to use the variable like this: //TDOtherFile.m extern void* const TDNotiObservationListKey; Then compilation would succeed, but *the linker will fail* with an error along the lines of "Symbol not found: TDNotiObservationListKey". Looking at the singleton implementation you've posted, there is no reason for `BaseURLString` to be `static`. I can only guess that whoever wrote that code misunderstood how `static` works. I didn't intend to write a novel on the subject, but I got kind of carried away. I hope this helps.
When you use `static` in the global scope (i.e. not inside of a function), you're essentially hiding that variable from other files. This is usually most important in the case of constants, which is while you'll often see something like `static NSString *const` when someone is defining a string constant that will be used in a file. Without the static, the constant is in the global scope, and if you try and define a constant with the same name in another file, you'll have a naming conflict. In the case of AFNetworking, the short answer is "it's convention". You could pass in a string literal as the baseURL, or do it however else you want, but `static NSString *const` is the generally accepted way to do it when the string is both constant and only used within that file. If you use `static` in a function, it simply means that the variable will retain its value in between calls of the function... It has nothing to do with hiding names or anything like that, which is, of course, super confusing. TL;DR: The static keyword has two completely different uses/functionality depending on where you use it... probably best to think of it as two totally separate keywords.
First off, I want to say thank you. After reading through this twice, I'm realizing that I need to spend a little more time with C and studying the compilation process. However, I still have some questions for you: &gt;Let's start with notification names. This is how Apple (and I think most developers) do NSNotification names: //TDWhatever.h extern NSString* const TDWhateverNotification; //TDWhatever.m NSString* const TDWhateverNotification = @"TDWhateverNotification"; &gt;Notice that static is not used anywhere. This makes sense, because this global constant is meant to be shared, so it shouldn't be limited to a single compilation unit. All the other compilation units will #import "TDWhatever.h", which allows them to use the variable via extern. Ok, I'm starting to understand it. We define the constant in our implementation file, and then declare it in the header with an extern variable, and then anyone who imports the header has access to the extern variable. Most of your example makes sense but I'm having trouble with: &gt;Notice that static is not used anywhere. This makes sense, because this global constant is meant to be shared, so it shouldn't be limited to a single compilation unit. If this is the case, then how come I am able to put the following code in my header file, import it into another class' implementation file, and access the statics? static NSString * const kRequestForPopularMediaSuccessful = @"RequestForPopularMediaSuccessful"; static NSString * const kRequestForPopularMediaUnsuccessful = @"RequestForPopularMediaUnsuccessful"; static NSString * const kRequestForMediaWithTagSuccessful = @"RequestForMediaWithTagSuccessful"; static NSString * const kRequestForMediaWithTagUnsuccessful = @"RequestForMediaWithTagUnsuccessful";
There was more to the comment I just made but for some reason reddit will not let me post the second half. I was going to say that I found a problem with your "This is a real example from code I've written:" example. I copy/pasted the code and tried recreating it in xcode several times and everything builds and runs fine for me. 
Nevermind! I don't know why it took about 6 builds but now the linker is throwing an error!
&gt;Without the static, the constant is in the global scope, and if you try and define a constant with the same name in another file, you'll have a naming conflict. I was just able to recreate this in xcode! Thank you I understand now. &gt;static NSString *const is the generally accepted way to do it when the string is both constant and only used within that file. Got it. Looks like people disagree on this specific example, but I can see why your answer would be correct. Needs to be a constant, doesn't need a global scope.
No offense here, but is english not your first language. Your delegate methods are worded oddly - (void)tabWillActive:(ENTabCell*)tab; - (void)tabDidActived:(ENTabCell*)tab; - (void)tabWillClose:(ENTabCell*)tab; - (void)tabDidClosed:(ENTabCell*)tab; - (void)tabWillBeCreated:(ENTabCell*)tab; - (void)tabDidBeCreated:(ENTabCell*)tab; I am not much of an OSX developer but it looks like a nice control
Remember that headers can be included into many compilation units. When you make a static const in the header, it puts a copy of that variable into every compilation unit that includes the header. You end up with multiple copies of the same string. I just tried it out in Xcode, and I can see the duplicates in all the `.o` files, but it looks like the linker is smart enough to recognise the duplicates and remove them from the final product. This might only apply to string literals, though.
Gotcha makes sense. Thanks again for taking the time to write such a detailed reply!
you have to use SKAction's completion block: SKAction * rotateAtHit = [SKAction rotateByAngle:4*M_PI duration:5]; [monster runAction: rotateAtHit completion:^{ [monster removeFromParent]; }]; 
Thanks for the response - that did the trick! Now it's time to dig into the docs and figure out why it works
lol, that's what I like in obj-c, it's written there in pure English. the block gets ran when the action completes. your problem was that the animation started but in the very next instance you removed the sprite, so sure it was animating but only for a few nanoseconds, depending on what device you ran it on. :)
aha! Very cool - so the [object runAction: someAction completion:^(someOtherAction);]; line says "Run this first action and when it finishes executing, run the following actions." Is that correct? Thanks for all the help!
it runs everything in order within the block, you could even nest another skaction with yet another completion block.
The completion block is a good suggestion, but a simpler solution would be to use the sequence you created! As of now, your SKAction sequence is redundant. The SKAction sequence message prompts multiple SKActions to be used one after the other. You only have one SKAction listed in your sequence array. So, functionally... "[monster runAction:[SKAction sequence:@[rotateAtHit]]];" really only needs to be: [monster runAction: rotateAtHit]; However, you can use that sequence instead of the suggested completion block to remove the object. It would look like this: [monster runAction:[SKAction sequence:@[rotateAtHit, [SKAction removeFromParent]]]]; Just like the completion block, SKAction's sequence will wait for the first action to complete before proceeding to the next action. (There's a similar option for SKAction which makes all SKActions within the given array happen at the same time. That option is called 'group' and it looks exactly like the sequence message, except you replace the word sequence with group. Sequence is what you're looking for though.) The reason why your original code didn't work is because the first action was called, but immediately after, the removeFromParent line was called - and it did not wait for the SKAction with a duration of 5 to be completed. It removed the monster before that duration finished. The suggested completion block will work in this case, where you only want a single action to occur and then have the object removed, but if you want use multiple SKActions to be executed, one after the other, then sequence is your best option (or else you might end up nesting a bunch of completion blocks together, which would look horrible). SKAction's sequence message essentially allows the same functionality as a completion block, but provides even more functionality when using several SKActions. Hope this makes sense! Feel free to ask for any clarification. Edit: I've been deep in Sprite Kit for the past two months, so if you have any questions, feel free to ask me. I can't promise I'll know the answers to all your questions, but I feel comfortable with the framework and am glad to share what I've learned. Edit 2: Expanded on a couple things for more clarification.
Awesome explanation and very well written. Thanks a lot! I'll probably take you up on that offer at some point. I plan on spending the weekend programming and I'm sure something will come up. Thanks again!
No problem! I'm glad it made sense for you. 
Do CS106A on iTunes U. It's Java based and a great intro to programming. Then do CS106B, then CS193. They're all free courses.
Build something in objective c. Anything. Build a clock that shows the time. Build a calculator. Build a rabbit jumping for a fucking carrot...It's called http://programming-motherfucker.com
There is really no need to learn C before Objective-C. If you can sit through video tutorials, go for it, but they are boring. [Here](http://www.raywenderlich.com/) is popular site. [NSHipster](http://nshipster.com/) can be a good resource, but it won't teahc you about programming or objects, mostly just some handy Objective-C (and now Swift) tricks.
haha, my first app was about a rabbit jumping for carrots, I knew like nothing about obj-c but I liked sprite kit pretty much, that's how it started.
The [RyPress tutorials](http://rypress.com/tutorials/objective-c/) are excellent and helped me learn Objective-C.
[Start Developing iOS Apps Today](https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/index.html) This is a good place to start with many pointers to more detailed documentation.
I'm fond of the Big Nerd Ranch guide to iOS programming.
If you're just interested in the language, but not cocoa / cocoa-touch, then I can't think of any resources. Assuming you're writing code for iOS, and you like books, I can recommend Apress' "Beginning iOS development". The cowboy approach - 'Figure shit out while you build something' works sometimes (that's how I learnt iOS / Obj-C), but I prefer the more structured approach a book gives.
I've [brought this up a couple of times before](http://www.reddit.com/r/ObjectiveC/comments/1gwbbd/i_know_java_should_i_learn_a_c_language_before/caoxzne), but I tend to argue that C knowledge makes it easier to learn Objective-C. If you drive straight into Objective-C, some things just won't make sense, especially if coming from other languages. A lot of newbies try things like `if (str == @"Hello")` and wonder why it doesn't work, or get confused as to why `NSString` is always declared with a `*` but `NSInteger` isn't. I wouldn't say you need to master C before learning Objective-C, but knowledge of C is very helpful.
I'm currently doing an internship on iOS, and i spent the first month watching [Paul Hegarty Stanford Classes on iTunes](https://itunes.apple.com/us/course/developing-ios-7-apps-for/id733644550), which are free to watch if you download it.
http://www.raywenderlich.com/ are the best tutorials I've found for Objective-C. Mainly aimed towards game programming, but lots of other good info in there. 
What kind of app are you planning to build for work?
Big Nerd Ranch
So my manager wants me to go through this course as well but I started getting lost with the Objective-C syntax and what not so I figured going through Objective-C would give me a better understanding of the Stanford course. I graduated out of the business school with an MIS degree so not the heaviest programming background
Not necessarily build an app....just maintain our current app and do any necessary updates. I'm not the sole owner of the app development/I don't work on our app...I do mobile analytics and would have to include my code in our iOS app code
Yes learn C first
Can you give me some reasons to? I understand that Objective-C is a version of C which would mean I'd know more going into Objective-C, however, I've been told I can start Objective-C without the C. 
You can start with ObjC, but it's cleaner to understand the foundation, and will improve the learning process. ObjC is mostly C anyway.
by Zed Shaw, this one's good. I love the shirt design they are selling, it looks like Samuel L. Jackson in Pulp Fiction.
Don't bother learning C first. Get the Big Nerd Ranch book. If seeing an asterisk before a variable name throws you for a loop, just post a question here asking for clarification. You don't really need to know any C prior to getting the book, if you already know Java. The book will cover anything you need to know.
You really don't need to learn C unless you're going to be working with very low level stuff. &gt; ObjC is mostly C anyway This statement is not entirely wrong or right. While Objective is a superset of C, knowledge in C isn't a must. In Objective-C, the syntax is totally different from C. 
Yes this one has helped me. Basically throws you in the deep end and gets you coding right away.
Thank you! I didn't think people would still be seeing this post. I clarified a couple things just in case anyone else comes across it. (:
Best. Advice. Ever.
[C How to Program by Deitel](http://www.amazon.com/C-How-Program-7th-Edition/dp/013299044X) is an extremely awesome book and you can knock out two birds with one stone by learning how to program in C. After that I would suggest [Programming in Objective-C by Stephen Kochan](http://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/0321967607) from there I would then go into the Nerd Ranch Books and even take the Stanford iOS Courses which are free through iTunes University. You need to build a solid foundation of a programming mentality. It will take a little time but, then again, rome wasn't builit in a day. Good luck!
Do you work for Dimecasts
I see how it looked that way. I wanted to add comments to explain why I was posting the link. I don't work for Dimecasts or own it, but I've been a fan of the site for years and I'm glad it is back. Full disclosure, I did do this first iOS/Obj-C screencast, but I'm not the only author. I just wanted to share this resource with the group.
I looked everywhere, Lynda.com, etc... First learn the basics of Obj. C by watching this guy, Rasim: http://www.youtube.com/watch?v=y2Rj55IouaM&amp;list=PLPedo-T7QiNs8-LGyXUjg5PUaAUvMvVpj Then, the best place I learned was onYouTube, by subscribing to a channel by the name of 99CentsAppDevelopment. Enjoy the growth. Cheers!
This is correct. This is called automatic synthesis. You can also manually synthesise properties using: @synthesize propertyname=ivarname It's very uncommon now though.
Of course, it's usually not recommended to access the ivars directly in methods other than overwritten setters and getters (sometimes you need to overwrite the synthesized setter and getter for a property). This is so because it allows the ivars to be encapsulated and not directly accessible by any other methods except for their setters and getters. Instead you should use self.ivarname to set the ivar, and self.ivarname or [self ivarname] to get the value of the ivarname.
So should I always declare all my fields/variables/orwhateveryouwanttocallthem in the { } and then list the ones I need getters and setters for under @property. Would the following be frowned upon? @interface Rectangle : NSObject { } @property int width, height; @end
no you only want to use a property if its actually a property of the object. there is nothing wrong with creating them inside the { } like { int height; } in your case with height and width you probably DO want them as properties but you dont always have to do it that way.
Are they things that you only need to use within your class? Then declare them as instance variables within your implementation file. Are they things that you need to use outside of your class as well? Then declare them as properties within your header file. 
Personally, I believe there's no detriment to using properties vs instance variables. ~~In fact, I'd recommend only ever using properties and accessing them via their synthesized getters and setters. That way you have a consistent behavior all the time.~~ As /u/Legolas-the-elf pointed out, the comment above is more absolute than it should be. As such, I'll make my case for why *I believe* that one shouldn't declare instance variables directly, and should instead always deal with properties, internally and externally. * Consistent access. * When you always declare properties, your accessing snd setting of class member variables is consistent and visually distinct. Local variables are always accessed normally (`someString = @"New Value"`), while members are always accessed using an explicit reference to `self`. * Note that when you access anything through dot-Syntax, you're implicitly calling a method on that class that returns to you the value of the instance variable. * Patterns like responding to variable updates and lazy instantiation. * Properties allow you to override the setter and getter for your variables to provide custom behavior, like updating the UI after something changes. For example: - (void) setName:(NSString*)name { _name = name; // Change the instance variable directly. self.nameLabel.text = name; // Update a related property. } * Also, there's a common pattern to defer initialization of a property until it's necessary, like so: - (UILabel*) someLabel { if (!_someLabel) { _someLabel = [UILabel new]; } return _someLabel; } * Apple recommends using properties whenever possible (from [Programming with Objective-C: Encapsulating Data](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html). *Emphasis mine*): &gt;You Can Define Instance Variables without Properties. *It’s best practice to use a property on an object any time you need to keep track of a value or another object.* If you do need to define your own instance variables without declaring a property, you can add them inside braces at the top of the class interface or implementation * You can still declare internal properties inside your implementation inside a [class extension.](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW3)
&gt; I'd recommend only ever using properties and accessing them via their synthesized getters and setters. No, you definitely shouldn't do this. For instance, in initialisers, if you use a property, you're calling a method on an object that has only been partially initialised. Properties are also slower than instance variables.
Okay, you're right about initializers. But the speed impact of accessing a synthesized property is negligible, unless you're doing, say, performance-critical numeric programming. But for the vast majority of apps, property access is absolutely preferred.
&gt; But for the vast majority of apps, property access is absolutely preferred. By some people, sure. I don't prefer it and I know a lot of other developers that don't either. Please don't give the impression that this is universally agreed upon. There's a semantic difference between instance variables and properties. One is an external interface and one is an internal interface. Using properties everywhere makes that semantic difference invisible, resulting in the code being less clear.
&gt;By some people, sure. I don't prefer it and I know a lot of other developers that don't either. Please don't give the impression that this is universally agreed upon. True to a certain extent. Not all developers agree that properties are preferred to instance variables, But [Apple sure does. "It’s best practice to use a property on an object any time you need to keep track of a value or another object."](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html) &gt;One is an external interface and one is an internal interface. Using properties everywhere makes that semantic difference invisible, resulting in the code being less clear. That's not true at all. `@property` is literally just a shorthand for declaring an instance variable, and declaring `-(Type)property` and `-(void)setProperty:(Type)property` `@property` does not imply anything about external vs. internal. It's a very common pattern to declare internal properties in class extensions and use property synthesis on internal variables. And without properties and the explicit reference to `self`, code is much less clear without syntax highlighting. "What's the scope of this variable? Is it declared further up in this scope?" Nope, it's an instance variable, but you wouldn't know that on inspection.
&gt; @property does not imply anything about external vs. internal. It is a very helpful way of distinguishing external accesses from internal ones. If you want to throw that distinction away, then by all means make that decision for your own code. Just don't talk about it as if it's the only sensible option for a newbie. &gt; And without properties and the explicit reference to 'self' makes code much less clear without syntax highlighting. "What's the scope of this variable? Is it declared further up in this scope?" Nope, it's an instance variable, but you wouldn't know that on inspection. Of course you would. People generally use leading underscores for instance variable names, making the difference between instance variables and local variables blatantly obvious. And how often is it that people edit code without syntax highlighting anyway? It's enabled by default in Xcode. You're grasping at straws here. Let me re-iterate: I'm not trying to convince you that my way is better than yours. I'm trying to convince you that there's a legitimate difference of opinion and your way is not the only correct one. When you say things like: &gt; But for the vast majority of apps, property access is absolutely preferred. You are giving the *strong* impression that your opinion is the only real option a newbie should consider. That's wrong. There are clear advantages to using instance variables directly and it's a matter of opinion as to whether these advantages outweigh the alternatives. 
I'm not saying that my opinion is the only option. I'm saying that accessing instance variables directly outside of initializers is discouraged, and that that is an old design pattern that [Apple recommends against](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html).
&gt; I'm not saying that my opinion is the only option. Like I said: When you say things like: &gt; But for the vast majority of apps, property access is absolutely preferred. You are giving the *strong* impression that your opinion is the only real option a newbie should consider. That's wrong. There are clear advantages to using instance variables directly and it's a matter of opinion as to whether these advantages outweigh the alternatives. You shouldn't give that impression. If you don't mean to give that impression, you shouldn't say things like that, because that's how newbies interpret them. And can you please edit your original comment to not give bad advice that will result in very difficult to discover bugs? Your edit doesn't cover it. I gave initialisers as *an example*, not *the sole reason*. Just copying my example into your comment as an exception doesn't fix it. 
You keep referring to that as my opinion. It's not just my opinion, it's a recommendation from the engineers who developed the modern Objective-C compiler. You still have yet to respond to the fact that [Apple recommends against creating instance variables directly.](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html) &gt;In general, you should use accessor methods or dot syntax for property access even if you’re accessing an object’s properties from within its own implementation, in which case you should use `self` ... &gt;It’s best practice to use a property on an object any time you need to keep track of a value or another object. You have offered no evidence to the contrary that would show any advantage to declaring instance variables. Until then, I will not concede that I was giving bad advice. It's an Apple-recommended best practice. How do properties unveil hard-to-discover bugs, anyway? Mixing properties and instance variables can definitely cause hard-to-discover bugs, when people don't know the difference between the two. There are no clear advantages to accessing instance variables directly, except *maybe* a negligible speedup of a nanosecond or two. It's one thing to recommend different design patterns to newbies. It's another thing entirely to steer newbies away from explicitly stated best practices in the language. You've also never given any evidence corroborating your claim of a semantic difference between `@property` and `ivar` for an internal/external distinction. I've certainly never heard of that pattern.
Properties can be either @synthesize or @dynamic. If you don't do either, they are @synthesize by default with a private variable of the same name but with an underscore. In your example, the class has 4 private variables declared: _width, _height, (from the properties) width, height (which you declared). If you would like to use your two private variables for the properties, either rename them with _ in front, or do @synthesize width=width. Properties are the preferred way to do instance variables in Objective-C because they allow you to use KVO (key-value observing) and other objective-C patterns. To sum up, these two do the same thing: @interface MyObject : NSObject @property int myVariable; @end @implementation MyObject @end ------------------------------------------- @interface MyObject : NSObject @property int myVariable; @end @implementation MyObject { int _myVariable; } @synthesize myVariable = _myVariable; -(void) setMyVariable: (int) myVariable { _myVariable = myVariable; } -(int) myVariable { return myVariable; } @end In the first example, objective-c gives you all of those methods for free.
&gt; &gt; a bare access is slower than that by a factor of 4–8 &gt; Something you've pulled out of *your* ass. Nope. Don't assume that just because you make figures up, everybody does. &gt; &gt; you don't know how long a property access will take. For instance, in the cases where KVO is being used. &gt; *That's a problem if you access the ivar directly.* You've changed an object without notifying the observers. That's a *problem* and will cause nearly invisible bugs. No, the problem there is that you are blindly assuming that KVO works. Do you think Apple are writing buggy code when their frameworks aren't KVO-compliant? From [the documentation](https://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Conceptual/KeyValueObserving/Articles/KVOBasics.html): &gt; &gt; Important: Not all classes are KVO-compliant for all properties. You can ensure your own classes are KVO-compliant by following the steps described in “KVO Compliance.” Typically properties in Apple-supplied frameworks are only KVO-compliant if they are documented as such. You should not assume that a class is KVO-compliant unless it is documented to be compliant. Not being KVO-compliant is absolutely fine. &gt; &gt; all I have done is object to you trying to steer a newbie in a harmful direction. &gt; It's not a harmful direction. Apple recommends it. FFS, please try to keep track of the conversation. Apple quite specifically **do not** recommend what *you* are recommending. They quite specifically **warn you against it**. &gt; Your suggestion that properties are meant for external access while ivars are meant for internal access is wrong. Plain and simple. No, it's a very useful distinction to make and a natural result of the way that they are designed to work. There's no "wrong" about it, we just disagree. &gt; Honestly, this discussion is going nowhere. Honestly, I'd really like you to learn that you should pay close attention to what you recommend to newbies, because right now you are giving them harmful advice. Maybe then there'll be a point to this discussion. 
&gt; As such, I'll make my case for why *I believe* that one shouldn't declare instance variables directly, and should instead always deal with properties, internally and externally. **Please do not follow this advice. It will introduce very difficult to find bugs into your code.** You absolutely should *not* "always deal with properties". The problem is that properties are essentially just syntactic sugar for method calls. What happens when you use properties in initialisers? You'll be calling methods on an object when it is only partially initialised. What happens when you use properties in accessor methods? You can introduce infinite loops. What happens when you use properties in `dealloc`? You'll be calling methods on an object when it is partially deallocated. Now, you may think that you can read your code and make sure you can get away with it, but in general, it's a bad idea to write code that's buggy by default unless you avoid doing certain things. Furthermore, just because you've figured out that your class can get away with it, a subclass can introduce behaviour that can't get away with it. My opinion is that it's very useful to use properties for external access and instance variables for internal access. However, if you decide that you want to use properties internally as well do not follow this advice and *always* use them. That's harmful advice you should disregard. The *most* you can reasonably use properties without introducing bugs is outside of initialisers, accessor methods, and `dealloc`. 
Thanks for your answer! I just.. I HATE blocks, seriously. They just make my code look so much like a fucking javascript. I don't know, I prefer to have objects who are made for a single purpose: For example, I am currently writing a "DownloadManager". This object starts its own sub processes, handles download data, and just posts a notification whenever a download is completed. I put then the downloaded file path into the notification, and voilà, it looks so easy.. Why is everyone obsessing with blocks? :( EDIT: Changed command blocks to blocks. I browsed too much minecraft *facepalm*
You're right, I didn't try them yet. I will though, but I can't shake off the feeling that this approach leads to a very 'sparse' code, where you have some listeners here and others there..
&gt;Please don't do that. There are many reasons that the recommended best practice is for a method to take only one block, and it should be the last argument. I'm really glad you chimed in. I had no idea apple's best practice was to only pass in one block and I've been looking at code from multiple people and they all pass in two blocks. I've been passing in 2: one for success and one for failure. So what should I do? Should I only pass in one block called "completion" and give it 2 parameters, one for successfully returned objects and one for an error? That kind of bothers me that depending on the outcome, I'll be passing back one nil parameter, but then again now that I think about it all asynchronous methods I've been using do exactly this. They return one block with parameters for "success" objects and an error, and then you always check if error is nil or not. Can't believe I didn't realize this sooner, but I'm glad you mentioned it. Thanks!
&gt; Should I only pass in one block called "completion" and give it 2 parameters, one for successfully returned objects and one for an error? Yes. `sendAsynchronousRequest:completion:` would be an example of this. the block is *always* going to be called, and the arguments passed in allow you to determine 'failure', and an error is provided.
Gotcha. Let me ask you this. Can you think of any scenarios where you would want to pass in more than one block?
I prefer having 1 block. AFNetworking is the only major library I can think of that separates it out. And I have a ton of AFNetworking code that has duplicate code in both blocks. The reason to desperate them? Having one block means you always have to have and if else to check for errors. My advice: pick what you like and stick to it.
&gt;My advice: pick what you like and stick to it. So on my interviews next week, should I be worried about using 2 blocks? Is it something that has "Don't hire me" written all over it? To be honest I like passing in 2 blocks, one for success and one for failure. It keeps the two separate, and then I don't need an if else statement for every single one based on which of the single block's parameters is nil. EDIT: Happy Birthday by the way hope you had a good one.
I suspect it's for aesthetic and readability reasons. A single block at the end of the call is clear: "then do this". Multiple blocks or blocks in the middle hide parameters or each other. It just looks ugly. Swift even has special syntax for trailing blocks. So your api may look even nicer when translated. There is an added bonus that two blocks tend to duplicate functionalit. The only exception I can think of would be a Promises like system where the final then clause does need two blocks. It always looks fugly though.
It's not that bad. The main problem is that Objective-C syntax looks wierd/wrong when you have more than one. It's a syntax problem, not necessarily a problem with the architecture of your application. That said, I personally don't like separate blocks for success and failure because it splits the "on finished" code across two callbacks. I'd prefer to implement it like this: - (NSURLSessionDataTask *)fetchPopularMedia:(void (^) (NSURLSessionDataTask *task, NSArray *popularMedia, NSError* error))callback; If `popularMedia` is non-nil, that indicates success. If `popularMedia` is `nil`, then that indicates failure, and `error` will be set to something. Remember to KISS. One callback is simpler than two callbacks.
I prefer 2 blocks. in general I I'll have an if or switch in every block if there was one, so I think 2 improves readability and reduces reused code. but there are downsides, like increased code and potential for a block to not be called. for the interview the main thing is that you understand the differences and can intelligently discuss why you do it. code style really shouldn't be a red flag unless you're just doing it because you saw it on stack overflow 
&gt; So on my interviews next week, should I be worried about using 2 blocks? Is it something that has "Don't hire me" written all over it? No. Apple themselves don't follow this principle and they don't offer any rationale. I've never heard anybody complain about two block arguments before. I think the main reason why two block arguments are rarely used is that there's rarely any need for them. Obviously you shouldn't go nuts – if you start passing in four or five blocks to methods, then you're probably doing something very wrong – but having a success handler and an error handler seems fairly reasonable and common practice. 
What bothers me about this code is that both completion handlers are not called in all scenarios. Suppose, I use this class as: /* start activity view */ NSURLSessionDataTask *task = [ntwrk fetchPopularMediaOnSuccess:^(NSURLSessionDataTask *task, NSArray *popularMedia) { /* stop activity view * update UI for success */ } failure:^(NSURLSessionDataTask *task, NSError *error) { /* stop activity view * update UI for failure */ }]; Since, your code has a if check around both the blocks. So, it's possible that in some scenarios none of the completion handlers would get executed. How do it handles things like stopping the activity view for all scenarios? That's why the best way is to always call the completion handlers. And in that scenario it doesn't really makes sense to have two completion handlers. It's easier to manage a single completion handler on both ends. All you really need is a success flag. Also, the NSURLSessionDataTask being passed back with the completion handler doesn't seems to make much sense either, as we already have the reference to that object. Wasn't this the whole point behind blocks? It is a practice that only works good with delegate based patterns. In this case, this code can be better represented as: - (NSURLSessionDataTask *)fetchPopularMediaOnSuccess:(void (^) (NSArray *popularMedia, NSError *error))success; That can then be called as: /* start activity view */ NSURLSessionDataTask *task = [ntwrk fetchPopularMediaOnSuccess:^(NSArray *popularMedia, NSError *error) { /* stop activity view */ if (error) { /* update UI for failure */ } else if (popularMedia) { /* update UI for success */ } }]; 
&gt; Since, your code has a if check around both the blocks. So, it's possible that in some scenarios none of the completion handlers would get executed. That's not true. For instance, the method might do something like this: if (succeeded) { successBlock(); } else { failureBlock(error); } If the method documentation says that either the success handler or the failure handler will be called, there's no reason to worry about what happens if neither gets called. If that's a possibility, then it's a bug in the method being called, not the calling code. 
Yes, it's possible to have it work that way, but should it have to be like that? There are scenarios where having 2 blocks makes sense, like UIView animation blocks. But, not in this particular case. As Objective-C is such an expressive language, I think the method signature should serve as a quick documentation in itself. If the functionality is implemented as: - (NSURLSessionDataTask *)fetchPopularMedia:(void (^) (NSArray *popularMedia, NSError *error))completion; which could be implemented as: if (succeeded) { completion(data, nil); } else { completion(nil, error); } A consumer of this code can simply makes right assumptions about what is it supposed to do. I like how Apple implements it in NSURLConnection + (void)sendAsynchronousRequest:(NSURLRequest *)request queue:(NSOperationQueue *)queue completionHandler:(void (^)(NSURLResponse*, NSData*, NSError*))handler 
&gt; Yes, it's possible to have it work that way, but should it have to be like that? I'm not following you. You were suggesting that there was potential for failure there. I was pointing out that this doesn't make sense. &gt; A consumer of this code can simply makes right assumptions about what is it supposed to do. Since something that doesn't succeed by definition must fail and vice-versa, it's also fair to assume that exactly one of the success or failure blocks will be called as well. This assumption is not an advantage your approach has, you can assume in both cases. 
&gt; I'm not following you. You were suggesting that there was potential for failure there. I was talking about the problem with OP's code where there is a possibility of none of the handler being executed. if (success) success(task, responseObject); if (failure) failure(task, error); Your suggestion should work, but still I don't think particular case is fit for using two blocks, when one can suffice. I've nothing against using multiple blocks. I've myself used two blocks earlier in one of my games while compiling shaders. I'm unable to find the ObjC version, but here's a C++ version of it: /* load shaders */ bool status = spriteShader_.Load(File("sprite_shader", "vsh"), File("sprite_shader", "fsh"), [](GLuint program) { /* bind shader attributes */ glBindAttribLocation(program, VertexAttributePosition, "av4o_Position"); glBindAttribLocation(program, VertexAttributeTexture, "av2o_Texcoord"); }, [&amp;](GLuint program) { /* bind uniform locations.*/ uniform_.um4k_Modelviewprojection = glGetUniformLocation(program, "um4k_Modelviewprojection"); uniform_.us2k_Tex0 = glGetUniformLocation(program, "us2k_Tex0"); }); 
&gt;I was talking about the problem with OP's code where there is a possibility of none of the handler being executed. Are you talking about a scenario where both success and failure are nil, therefore neither my success block or failure block get executed?
&gt; I'll have to ask him why he's passing it back via blocks when its already returned as soon as the method fires. Don't forget that blocks are first class objects, not merely syntactic constructs. The success and failure blocks don't necessarily have to be defined in the method that calls `fetchPopularMediaOnSuccess:failure:`. For instance, imagine a situation where your application only ever needs to handle errors in one or two generic ways. You might define those failure handlers in one location, and then pass them into the method call in several different locations. They would have no opportunity to capture the scope at the point where you have a reference to the object. 
&gt;For instance, imagine a situation where your application only ever needs to handle errors in one or two generic ways. You might define those failure handlers in one location, and then pass them into the method call in several different locations. They would have no opportunity to capture the scope at the point where you have a reference to the object. I'm confused on what you're trying to say. Am I understanding correctly that you are talking about a scenario where I define a failure handler and a success handler, let's say they're global constants, and then multiple controllers are calling fetchPopularMediaOnSuccess:failure: and passing in those global handlers. I fail to see how that is any different than simply defining them on the spot and passing them in as anonymous blocks, because when it comes down to it one of the handlers will execute and pass back the task. Maybe I need to dive deeper into scope? I'd really appreciate it if you could elaborate thanks.
&gt; let's say they're global constants, and then multiple controllers are calling fetchPopularMediaOnSuccess:failure: and passing in those global handlers. &gt; I fail to see how that is any different than simply defining them on the spot and passing them in as anonymous blocks Are you going to copy and paste those blocks into every controller that calls that method? And what happens when you want to update your failure handler – are you going to want to change it in all those different places? 
I understand that, but was specifically confused about: &gt;They would have no opportunity to capture the scope at the point where you have a reference to the object. 
Let's assume you have some sort of manager object that provides error handlers. Its initialiser might look something like: -(instancetype)init { self = [super init]; if (self) { _genericErrorHandler = ^(NSError *error) { // … }; } return self; } Then elsewhere, you have several methods that call a method that takes success and error handler blocks that look something like this: - (void)foo { SomeRequest *request = [_requester performRequestWithSuccess:^{ // … } failure:failureManager.genericErrorHandler]; } The scope that the block captures is the manager object's initialiser, not the scope within `foo`. So it doesn't have access to `request`. However if you changed it so that the error handler took a `SomeRequest` instance as an argument, it would have access to it. It's not a superfluous argument, it enables an approach that isn't possible otherwise. 
Gotcha, I understand what you mean now. Thanks again for taking the time to explain.
Has anybody tried this? I'm one of those people who has not committed my Pods folder, and I believe I'm yet to be burned (save the slight annoyance of having to pod install when I change branches sometimes). I'm not too experienced with git submodules, but are we just swapping `pod install` for `git submodule update` after checking out a branch? Additionally, I'd be a bit concerned I would forget to commit in the submodule when updating Pods. Does git help at all here?
You can't develop Objective-C applications on an iPad. 
You're gonna need a compiler for Obj-C and whilst its not impossible to do on Windows - it's not easy. You dont want to code on an iPad - you're not going to be productive and there isn't a way to do ObjC on it anyway. If you're serious about it, bit the bullet and buy a Mac. It doesn't have to be a new model - a 2010 mac will likely do you until you can afford a newer model.
and now I'm start thinking Apple will allow you to! Now because it would be nice, but because lots of people would buy iPads for this reason, and once they realize that coding on an iPad is a horrible, horrible idea, they would sell them the mac too. 
As stated, you cannot actually write code on an iPad. The most I've seen is an HTML/CSS editor or text editors but you aren't going to have access to a compiler for those files. As for doing Objective-C w/o a Mac you can install Linux on a PC and use [GNUStep with clang](http://blog.tlensing.org/2013/02/24/objective-c-on-linux-setting-up-gnustep-clang-llvm-objective-c-2-0-blocks-runtime-gcd-on-ubuntu-12-04/) but in this case, you won't have access to Xcode (if you are doing Mac desktop or iOS applications) which means no iOS SDK. As recommended, I'd look into a used Mac (2011 Macbook Air or Mackbook Pro). Apple.com also has [refurbished](http://store.apple.com/us/browse/home/specialdeals/mac) models that are pretty good deals.
There is no need to have any Apple device at all to use Objective-C. Just use a different framework like my ObjFW or GNUstep.
Actually, on a jailbroken iPad, you can. There's even a GUI trying to recreate Xcode, and Clang is running just fine on it.
Yeah, I felt it wasn't worth mentioning because it's an impractical solution.
http://dringend.cc
[You might want to rethink how certainly you stated that.](http://www.reddit.com/r/jailbreak/comments/28nw34/minicode_the_mobile_ios_ide_is_now_available_in/)
It seems to work reasonable enough to create iPad applications on the iPad.
[tonymac](http://www.tonymacx86.com/home.php)
If you are new to Obj-C, or programming in general, take a moment to figure out what you want to eventually develop for. If you see yourself making iOS and/or Mac apps, then you will want to buy a Mac. It does not have to be a retina MBP, I am currently using a 2010 MB for 2D game design and it is working just fine. Heck you can find these on eBay or Craigslist for the same cost as a new iPad now. Yes it is possible to code on an iOS device, but unless you really know what you are doing, you'll be glad to have things like dash on your mac. Go for it OP, you can do it!
I like the idea of being able to develop for multiple platforms. I am very new to Obj-C but not to programming which may speed up the learning process a bit. I am currently taking a couple of classes which utilize Obj-C and the professors have managed to peak my interest enough to develop some apps for iOS or OSx. I do like the idea of designing a 2d game though! Thank you for input!
We're using it on a large project with a fairly big team. git submodule update is a lot faster than pod install as project files are not being regenerated and integrated each time. This makes git commands like git bisect a possibility without tearing your arms off. In answer to your concern, git will show you under git status if a submodule is modified and not committed.
Apple introduced properties in Objective-C years ago, and new APIs since then have been preferring properties where it makes sense. You can still call `setName:`, but the dot syntax is less verbose and more readable. 
They are the same thing semantically. When you assign to a property, it calls `setPropertyName:` behind the scenes. All this really means is that they changed the header file to make it a declared property when it was just declared as the methods before. Perhaps they've started transitioning some of the codebase to Swift already?
I use dot syntax (property accessor syntax) whenever I can. In addition to the obvious conveniences of setters, I also find it especially convenient for writing things like UIColor.whiteColor.CGColor instead of [[UIColor whiteColor] CGColor]
Me also. To add, I like using array.count instead of [array count] even though the header shows it as -(void)count;
I'm not sure about something, so I'm hoping someone here knows. Swift doesn't send messages, does it? I was under the impression that it calls methods.
I don't believe Swift uses Objective-C messaging, but I don't know for sure. I'm up to my ass in production Objective-C code, so I haven't been playing with Swift nearly as much as I'd like. For the most part, though, you can think of [foo bar] as calling the bar method on foo object, anyway. The difference between the two is that "sending a message" has a dynamic aspect (forwarding to another object, choosing at runtime not to respond to an object, inserting your selector into a call chain, etc) that is useful if you choose to take advantage of it. But, most of the time we don't. Most of the time, we're expecting our "bar" method to be called on our "foo" object when we write [foo bar]. That the Objective-C runtime does some gymnastics to arrive at the proper method is usually irrelevant to us as framework consumers.
I understand, and I can't disagree with you about the "most of the time." But I fantasize that—someday—I'll be struck with an epiphany and realize how to program to take advantage of messaging. Until then, I will admit that it's not making that much of a difference, from my point of view.
Core Data is a good example. When you generate a class file to represent one of your entities, what gets generated is a bunch of @dynamic properties. Those properties don't actually exist; Core Data is just intercepting the messages that attempt to get/set those values and does The Right Thing.^tm This is one reason I believe Swift can *use* Core Data, but it could not have been used to *write* Core Data.
It's mostly for Swift integration. In ObjC, you can use a property like a method and visa versa. But in swift, if it's a property you don't use parens and if it's a method you always use parens. So the old code would work, but you couldn't fake the syntax like in ObjC. There's a lot of changes to the frameworks like this. Another big one is the switch to NS_ENUM so Swift can use the shorthand values.
If the swift object is a subclass of an ObjC class, it will always use the ObjC method lookup. And any Swift object can use that ObjC method lookup, which is what ObjC code used to interact with Swift. However, if it's a pure Swift class, called from Swift, it uses a much faster static method lookup similar to C++.
My team (and I work for Apple) has banned dot syntax. It's too easy to confuse with structure syntax and serves no functional purpose whatsoever. It also makes search harder when one has to look for instances of 'setFoo:' in addition to '.foo ='. More trouble than it's ever been worth in ObjC.
Worth noting that whatever work you do at Apple most likely cannot be compared to what is convenient for third-party devs using the public SDK. It's also probably not representative of every single team at Apple. Dot-syntax has a lot of convenience and brevity associated to it, and outright singling it out as 'trouble' for every developer is a bold call to make.
You need to enter text for NSLocationAlwaysUsageDescription in your PList file. Without doing this the alert won't show, and just gets skipped over.
Can you post the actual code? What error does Xcode throw? Is it a compilation error, warning or what? Are you building for iOS 8 alone or for iOS 7 too? If both you need to conditionally check for iOS version before calling the new authorization methods either via conditional compilation, checking the device system version or by checking to see if the location manager instance responds to the selector in question.
But using this value causes the error as well.
Right, see the [documentation](https://developer.apple.com/library/ios/documentation/general/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW18) this. "Privacy - Location Usage Description" refers to the old key supported in iOS 6.0 or later, but is ignored in iOS 8.0. Location usage has now been split into either only when the app is in the foreground being operated by the user, or at all times with or without user interaction. These two cases require different PList keys and are requested via two different methods. So for iOS 8 use the keys "NSLocationWhenInUseUsageDescription" and "NSLocationAlwaysUsageDescription" pertaining to the methods "requestWhenInUseAuthorization" and "requestAlwaysAuthorization" respectively. 
Sorry about that, I'm new to this sub. Thanks for the advice.
Learn Swift now. You'll pick up enough Objective C in the process, but Swift is a better on ramp. It's still so super early that being early with Swift will be much more valuable. It's the future the Apple ecosystem is heading. 
A good engineer/developer would have researched the topic (on this sub at a minimum) before blindly asking this question for the 1000th time. Based on that, you shouldn't learn either.
Right after you learn to google ;)
You're right. I should have googled the answer to the question, and I actually realized that shortly after I posted this. I'm no stranger to internet forums and google, and I'm not sure why I didn't google this question first. That said, there's no reason to denigrate an aspiring iOS developer for a stupid mistake. A more productive comment would have been: "A good engineer/developer would have researched the topic (on this sub at a minimum) before blindly asking this question for the 1000th time. That said, I think you should learn both."
I wrote this. Posting here because I think some of you will find it interesting. I'm also hoping that someone with Obj-C skills will read it and point out my mistakes. I'm not an Obj-C developer. I've been working with it a lot while writing this post and building the examples, but I've never built a production app. I'm guessing I flubbed some explanations here and there. Also, just looking for general thoughts on the idea.
JavaScript isn't meant for this. Sure, you've taken it this far, and cheers, but JS isn't meant for this, and OS X isn't designed to run apps this way. By not using obj-c, you have no/limited access to APIs, system hooks, ect. Plus there's the bugginess, insecurity, and unreliability of live-executing an app based on a 3rd-party engine (not even a runtime). Essentially, I would say it's a good proof-of-concept, but it's impractical for a number of reasons.
OK, thanks. Can I ask you to go a bit further with your comments? Can you list specific APIs or system hooks that JS will have limited or no access to? Do you know of specific security issues that this raises? You mentioned 3rd-party engine. Can you explain what you mean by that? The JavaScript engine in use here is JavaScriptCore. That's the same engine that Safari uses.
How is this any worse than AppleScript Studio apps? Except, you know, with Javascript instead of AppleScript. I'm fairly excited about being able to never write another AppleScript again, and I don't even_really_ know JS (just enough to tweak others' code). But I know Objective-C, and supporting a scriptable application means knowing AppleScript. I'll dig into this guy's tutorial when I have more time. Note: yes, I know AppleScript Studio is defunct. 
Hey there! Now that ios8 is here how has delegating changed? Are blocks more frequently seen?
You shouldn't size text with `vw` units. That heading is ridiculously large in a large browser window. It's more than 160px in mine.
That's the good thing about having your own site, don't have to listen to anybody else's design opinions.
Sure, you don't *have to* listen. But do you really think ten times the default font size is sensible? Presumably as you are publishing this article on the web and not just saving it to your hard drive, you care about other people reading it.
It's not a problem though. Those are display headlines. They and the rest of the text on the page is highly readable. It's your opinion that it needs to be "fixed". I don't care about your opinion. You can hold on to that favor, I didn't ask for it and I don't want it.
Maybe it would be good for someone to write a "Welcome to /r/objectivec-new visitors please read" post then sticky and/or add to the sidebar. 
I would say in the long term you should definitly learn Swift. Like Apple writes in the Xcode release notes ("...Swift is a complete replacement for Objective-C...") Apple will sooner or later let die Objective-C. Sure this process will take some time, but new language features will definitly only be added to Swift and not to Objective-C. Currently since most code is still written in Objective-C it is good to know the language. You don't have to know all of it's details, but the basics will help you to understand a lot of concepts. So my advice is: Learn to write basic applications with Objective-C and then proceed to Swift.
Personally, I tend try aim to separate out things like this - each one will have a responsibility and you may want to stub out earlier / later calls, call them separately or whatever. As an example, you may have a profile screen that also shows recent posts for the user. I would separate these out into two separate methods one for getUserProfile and one for getUserPosts, then inside the getProfile return block, I would set or pass the user that was retrieved and call the getUserPosts. It avoids nesting, keeps things obvious ( and single responsibility ) for what they do, and makes it easy to add a pull to refresh that just refreshes the user posts for instance. Just keep in mind that the blocks function as closures, so to avoid memory issues you will want to have a weak variable reference for calling the method. - (void) getUserProfile { __weak typeof (self) weakself = self; [myservice getUserWithBlock:^(UserModel *user) { [weakself getUserPosts]; } } Obviously that's just a high-level overview, but hopefully communicates the idea. =) 
Generally speaking, this is a sign your method is overly complex and you need to decompose it into multiple methods. Is there any local variable in the outer scope that is used in the innermost block? If not, then just make it a separate method. If there is, then the outer block can pass it in as an argument. 
Apple's Grand Central Dispatch can help you here... [GCD Reference](https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html) [Dispatch Queues](https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html) There are also frameworks like [Bolts](https://github.com/BoltsFramework/Bolts-iOS) and other various implementations of "Promises" like [RXPromise](https://github.com/couchdeveloper/RXPromise) that are good for managing async / concurrency.
I run across this issue pretty often when chaining UIView animation blocks. I found a good method on SO a while ago which I've used in a few projects: NSMutableArray* animationBlocks = [NSMutableArray new]; typedef void(^animationBlock)(BOOL); animationBlock (^getNextAnimation)() = ^{ animationBlock block = animationBlocks.count ? (animationBlock)animationBlocks[0] : nil; if (block) { [animationBlocks removeObjectAtIndex:0]; return block; } else { return ^(BOOL finished){}; } }; // Add animations [animationBlocks addObject:^(BOOL finished){ [UIView animateWithDuration:0.5 animations:^{ //Animate stuff } completion: getNextAnimation()]; }]; //Start the chain getNextAnimation()(YES); 
But anyway problem with nested blocks be there. It just will be a bit modified- no 'if-else' statement. Code will look better, but problem won't be solved. 
Thanks for this libs, never heard of them. Should take a closer look. Also i don't know how, but i've totally forgotten about GCD. 
Thanks, this approach should make code clearer. I'll borrow your idea for future :)
Things that might make this seem relevant to the average Mac/iOS dev: - A quick definition of a graph database. - Example use cases for when a graph database might be preferred. - The applicable software license. - A sample project.
You could use [composition](http://en.wikipedia.org/wiki/Composition_over_inheritance) and [message forwarding](https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html) to achieve something like this. 
Hello and thanks for the feedback, Find enclosed some info that you and other Mac/iOS devdelopers might find useful: * General information about graph databases and Sparksee graph database: http://sparsity-technologies.com/blog/?p=700 * Example use cases either for Sparksee are: - **Social Networks Analysis**: To perform fast analytical operations in your applications for Twitter or Facebook. - **Media analysis**: To recommend new content, relate your social data with your media data. - **Bibliographical Networks**: To implement analytical tools to extract and relate information from networks such as Wikipedia or IMDB. - **Security Networks &amp; Fraud Detection**: Key in a pattern or security log analysis. - **Physical Networks exploration &amp; optimization**: To optimize logistical routes, identify bottlenecks in your network, and search the minimum route to arrive to a certain location. - **Biological Networks**: To analyze and express in a graph genetic and protein networks. Detect mutations and evolution through time. - **Recomendation for Ecommerce**: Get and store information such as “people who has bought this also...” Read more about use cases of Sparksee here: http://sparsity-technologies.com/blog/?tag=use-case * Free download: http://sparsity-technologies.com/#ldownload * Sparksee starting guide: http://sparsity-technologies.com/StartingGuide/Index.html Thanks again, Ricard Tapias Sparsity Technologies Marketing Assistant
Instead of assuming it starts with 'a', why don't you just get the first letter in the brand_name and use it as the key to retrieve the associated array in the dictionary? If the associated value is nil, create a new array, add the brand and insert the array in the dictionary. If it's not nil, add the brand and you're done. This way the array doesn't need to be sorted and you are not tied to which letters exist.
I tried that first but it doesn't work because the first iteration of prev is nil so it would crash. this is why I added if (!prev) { prev = @"a"; } what youre saying makes sense in theory but it doesnt actually work. also since the list is presorted it will always start with 'a'
First, a couple style issue: - It's almost completely universal that Objective-C code uses camel case instead of underscores for everything, and mixing and matching the two just looks weird. - Use descriptive variable names. tmp might seem fine, but when you come back to this in 2 years you'll be like: "tmp *what*?" - I try to avoid using temporary objects. It's just hard to keep track of things as you try to reason through what it does. One reason what you have doesn't work is that dictionaries are copy by reference. What that means is that when you call: [brands setObject:tmp forKey:prev]; brands keeps a reference to tmp, not a copy of its contents. On the next line when you empty tmp, brands is now holding an empty array for key prev. Not only that, but you're assigning the same array for every key, so at the end of this you'll get a dictionary with a bunch of keys all pointing to the *same* empty array. Here's a version that uses no temporary objects and doesn't require the list to be sorted in any particular order: NSMutableDictionary *brandsByLetter = [NSMutableDicationary dictionary]; for (NSString *brandName in tableData) { NSString *key = [brandName substringToIndex:1]; NSMutableArray *array = [brandsByLetter objectForKey:key]; if (!array) { array = [NSMutableArray array]; [brandsByLetter setObject:array forKey:key]; } [array addObject:brandName]; } Good luck.
&gt; It's almost completely universal that Objective-C code uses camel case instead of underscores for everything, and mixing and matching the two just looks weird. Well his code sure doesn't look weird to me! I don't use camel case either. I always use underscores in my (longer) variable names and method names, never camel case, because I hate camel case with a passion. 
&gt; Use descriptive variable names. tmp might seem fine, but when you come back to this in 2 years you'll be like: "tmp what?" Agreed! Especially (in this case) when "tmp" isn't defined inside the scope in which it's used.
 NSArray *names = @[@"anna", @"alan", @"andrew", @"bert", @"ben", @"bob", @"camille", @"carl"]; NSMutableDictionary *phonebook = [NSMutableDictionary dictionary]; NSString *key = nil; for (NSString *aName in names) { key = [aName substringToIndex:1]; if ([phonebook objectForKey:key] == nil) { [phonebook setObject:[NSMutableArray array] forKey:key]; } [[phonebook objectForKey:key] addObject:aName]; } NSLog(@"%@", phonebook);
phughes nailed it, but I'd also suggest calling -lowercaseString on key after you assign it, unless you want A and a to have separate entries. 
That looks a lot better, but I'd recommend using the new NSArray and NSDictionary literals. NSMutableDictionary *brandsByLetter = [NSMutableDicationary dictionary]; for (NSString *brandName in tableData) { NSString *key = [brandName substringToIndex:1]; NSMutableArray *array = brandsByLetter[key]; if (!array) { array = [NSMutableArray array]; brandsByLetter[key] = array; } [array addObject:brandName]; }
The algorithm I described doesn't need 'prev'. 
Personally for something that may be needed throughout the app (such as settings), I have the App Delegate own it. Then anything that needs it can get it via UIApplication.sharedApplication.delegate. I then use either Key Value Observing or notification centre to figure out if stuff's changed. Remember that views should be reusable as much as possible. I used to simply hand my "settings" object to the view, and allow it configure itself as appropriate, but I've found it's better to have the views controller set various parameters (text, colour, layout etc) instead.
Where does the control panel get launched from? If it's the same VC that contains the View, have the VC own the model and hand the reference to the control panel for changes. When the control panel is dismissed, refresh your view based on the model. If the control panel can be launched from someplace else, it gets trickier. Maybe give it to the App Delegate, but it depends on how big your app is. If the scenario you're describing is pretty much the entirety of your app, then that's probably OK. If you're talking about a much larger app, with lots of these scenarios (and lots of model objects), then it's not such a good idea. When the control panel changes the model, send an NSNotification, which your rendering VC listens for. Don't hand the RenderSettings to the View ... have a ViewController translate from the model to the properties on the view that need to be changed. That's the View Controller's job.
I think we're up to v 6 now...
It's definitely not required. Don't let it delay your release! However, integrating it is definitely a good idea! Good luck with your release!
As /u/lyinsteve said, it's definitely not a requirement from Apple, but your users are going to expect it. It's already getting to the point that if your app collects any of the same info Health collects, users are expecting them to be integrated. I would put this on the short list for your next feature release.
It's just a style issue. The two syntaxes are completely semantically equivalent. x.foo &lt;=&gt; [x foo] x.foo = bar &lt;=&gt; [x setFoo:bar] Personally, I like the dot syntax and use it pretty much whenever it applies.
Either choice is a good one, but I'd say you'll probably be better off with Objective-C. - It's more established, so you're less likely to run into distracting problems. Swift is still so new that it has a lot of rough edges, and the interop with the ObjC APIs still has gotchyas. These things are annoyances for experienced devs, but could be serious hurdles for someone just learning. - ObjC is a much simpler language. Swift adds a bunch of stuff in the hope to buy safety and expressive power, but when you're learning, that can get in the way of "let's just get something working", and it's a lot more stuff to add to an already very-dense curriculum. - This last one is personal bias, but objc is a very thin layer over C, and I think all programmers would do well to be proficient in plain C. It remains a surprisingly good language. Learning either language will make learning the other language much easier, and advance you greatly in iOS development. (Most of the hard stuff is general programming language techniques and knowing the APIs; the languages themselves are comparatively easy to pick up.)
I just needed to parse the HTML, OCGumbo looks about right. Thanks man.
You can embed the Python interpreter in your (Objective-)C project, and pass your html data to BeautifulSoup.
I think that might be little too much.
Actually, it's really easy to do. There's some boilerplate code that you setup, after importing Python.h, and then you can pass data structures between C-&gt;Python. 
For me Lynda.com is really good. Especially Simon Allardice with his Objective C, Swift and iOS courses. Ray Weinderlich is a useful resource. They have loads of free articles, videos and a bunch of paid for books. The Apprentice Series is good (now updated for Swift and iOS 8). They also have a podcast where they have guest developers talking about various developer news and specialising in areas such as Core Data. 
I find passing data between languages to be fascinating. How would I pass data structures from C to Java, for example?
I was talking about the feature.
You could just use NSAttributedString
Does anyone ever used this to build charts with Objective C? If yes, what are your thought about Telerik? 
Chart comparison article from a couple years ago: http://www.scottlogic.com/blog/2012/05/21/comparison-of-the-available-ios-charting-libraries.html I've personally used CorePlot. Lots of options. Worked out well enough. It really deoends on what kind of data one has and whether the framework has the type of chart you need.
There are many open source libraries for charts and graphs. 
Sure, I'll do my best to give a general idea - though I'm sure there are articles and reference you can find that will explain it better and with more depth! Think of blocks as closures. Where they are declared is the scope they capture, and capture it strongly so with ARC the variables wouldn't decrement and be cleaned up. We use __weak to make sure that the object that we want to use *inside* of the block doesn't maintain a strong reference, thus preventing the parent object from ever cleaning itself out of memory. In the example above, self would otherwise be strongly captured. This would be bad because self is the owner of the block - and in turn the block then also becomes responsible for self, meaning neither can get deallocated. By using __weak we are breaking this cycle so that the block is no longer responsible for insuring that self exists when it's called. This means that we could conceivable have a situation where our weak pointer inside the block could no longer exist, but fortunately objective-c allows us to send messages to nil objects without a penalty. And in this example, it's pretty unlikely that the block in question would still be called if self got deallocated. I just woke up and am still working on my coffee, so hopefully this didn't confuse more than explain! Feel free to ask more questions if it didn't help clarify. =) 
1) What do you mean? Are you referring to a label in a view that is displayed in a GUI, or an instance variable in an object? 2) Objective-C behaves like C/C++. The .h files are the headers. This is the file you will import into other classes so you can use properties/methods from another class. The .m files is what is actually compiled. 3) Generally you would start your app in the AppDelegate. This class is generated for you when you create a new project by Xcode. However, this class should be kept to a minimum, and should only serve to delegate to the rest of the app what is going on. For example, the "didFinishLaunchingWithOptions:" is called by the OS when the app is started. Here you will create your view controller for the main view and do any app-wide setup that needs to be done.
You'll want to learn some Cocoa basics. Like how the Interface Builder works (which answers question 1), and how they use Model-View-Controller, and how windows/screens/views come into existence (which answers question 3). There's a document on the Apple iOS developer site called "Your First App", or something like that (can't link to it right now), that you should read. After you do that exercise, recreating this C# app should be quite simple.
Have a look at [Xamarin](http://xamarin.com/platform) Write in C#, compile into native iOS, Android and Windows apps. Might save you some ball ache.
It sounds like you are just guessing at Objective-C without having read any introductory material at all. This is an awful way to approach the subject and you shouldn't be asking people for help if you haven't tried to cover the basics yourself. Go to Apple's developer library and read the introductory Objective-C material there. 
Could you be more specific?
&gt; Write in C#, compile into native iOS, Android and Windows apps. &gt; I've used Xamarin but I'd rather Native ;D 
Are you looking for something like a // TODO: ?
I think you're referring to a temporary "placeholder" object that gets alloc'd in a [class cluster](https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html)? Then specific format of -init then releases the temporary and allocates a concrete subclass that's specific to the requirement. It's why object allocation (+alloc) is a separate operation than initialization (-init) in Objective C. Many Foundation classes, and not a few UIKit or AppKit classes use this pattern. NSDate, the collection classes, and more are class clusters. They somewhat serve the same purpose as abstract base classes in C++, although there are important conceptual differences. 
For example, NSString *firstName = @"Tom"; NSLog(@"Hello there, %@.", firstname); Here I have passed it a string that contains placeholders, and NSLog will dutifully replace each placeholder with the extra values you give it. What exactly are placeholders?
no
That %@ in the string, in the nslog statement is a placeholder I believe. The framework can't know every possible variable name you could create, and it could be very "unhelpful" to just assume any declared variable name that shows up in the string should be evaluated, so they pick a known handful of values (in this case %@) and say "whenever you see this in a string, expect that string to be followed by a comma and the variable that backs the placeholder." This is how objective-c does string interpolation. Some other languages (especially higher level ones like Ruby) DO assume any declared variable that shows up in a string should be evaluated, so you have to be very careful of overlap. Forgive me if I have misunderstood your question. 
That is a format specifier. https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Strings/Articles/FormatStrings.html
Great explanation. thank you.
and this is doing here what?
What a shitty site is this from 1902?
Cmon its the top result on altavista
The first place you should look when trying to figure something out is the developer library. I went to the developer library and typed in `AirPlay`. This came up with a short list of three items. I clicked on the one called *AirPlay Overview*, and there was a section *Enriching the AirPlay Experience in Your App*. At the start of that section, it included a link to the *Multiple Display Programming Guide for iOS*. Also in the short list was a sample application called `GLAirPlay` that has working source code for an application that uses two displays independently. 
If you're transitioning from Objective-C you probably already have a decent knowledge of Cocoa, so all you really need to do is switch syntax and start taking advantage of [functional programming](http://www.objc.io/books/) concepts, [generics](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html) and [optionals](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-XID_368) amongst other Swift-only features.
 Have a look into a Mac Mini. The cheapest one is a similar price to an iPad and then you have an actual desktop Mac, just smaller and less powerful than a regular Mac. 
nothing is really gonna compare to shinobi controls, if your making a quality product in which you were going to pay for a library you would go all the way ..
If you use an MPMoviePlayerController this has a property allowsAirplay: this allows the user to press the airplay button and select a device, I am not sure if you can force the device to automatically airplay though if they set a "Default device" so to speak. 
mac mini, but you'll miss the SSH. SSD i mean
Mac Mini. Try searching on eBay for "Mac Mini 2012", you should be able to get a 2,5Ghz i5 16Gb RAM for $500, or go for the new one but you really want 8GB version. Avoid 15" [2011/2012 MacBook Pro's with AMD GPU's](http://appleinsider.com/articles/14/01/16/owners-of-late-2011-macbook-pros-report-critical-gpu-failures-system-crashes). My own 2011 MacBook Pro 13" broke last Saturday (again). New HDD, spent 3 days recovering from backups, got it working again. It also has a knackered touchpad and Bluetooth (same board internally), I have to use a wired mouse with it. It isn't well. Generally if going second hand, I'd get a Mac Mini as there is less to go wrong and they'll be in better condition. The problem with notebooks is that they get abused in bags and coffee spilled on them. Mac Mini's on the other hand are kept on a desk or shelf and never moved or abused. 
I have a 2008 unibody Macbook that runs Yosemite. The biggest issue is the disk but swap in an SSD and you're good to go. This machine even supports up to 8GB of memory.
&gt; handoff Guess I can't expect too much comfort if I want to buy a rather cheap machine anyways. Thx :)
&gt; Or go for the new one but you really want 8GB version Is 4 gb a bit too outdated or why is that? 
&gt; 2008 unibody Macbook Looked that up on eBay. Seems to be still up to 600 EUR on eBay. Might buy a new Mac Mini for that amount but thanks alot. 
SSD i mean 
So I can't upgrade it? Got a SSD in my Windows PC. Damn I love it :D
Bluetooth is on the board that WiFi uses, while the trackpad connects directly to the logic board. They are not the "same board internally" at all.
[BH Photo Video has the new mac mini for $449](http://www.bhphotovideo.com/c/product/1086735-REG/apple_mgem2ll_a_mac_mini_1_4_ghz.html) with free shipping, and they do not collect tax for orders shipped outside of NY. Since you were using a mac pro before then you already have a monitor for it I'd assume.
Oh ok so my MBP is even more broken than I thought, wonderful!
If you get an old one with a HDD installed, you can open it up and replace the drive. It's not the easiest thing in the world but it's possible. If it's a newer one, it's a bit more of a pain. They use security torx bolts to hold the base on. If you go for a new one, get the flash drive. It's about 2-3 times faster than an SSD.
As far as the Apple store they only offer an optional Fusion Drive. Which will be 250 EUR btw which is almost half the price of the whole Mac -.-
The full list of compatible models from the Yosemite release notes: iMac (Mid 2007 or newer) MacBook (Late 2008 Aluminum, or Early 2009 or newer) MacBook Pro (Mid 2007 or newer) MacBook Air (Late 2008 or newer) Mac Mini (Early 2009 or newer) Mac Pro (Early 2008 or newer) Xserve (Early 2009)
They better ship outside of the US ;)
Just start doing it. I've coded many buttons and whatnot by subclassing UIView. I also wrote in the touch behavior for some special circumstances, and animations. Just Google "objective-c draw a box" and go from there.
Check out this series of articles on Animations http://www.objc.io/issue-12/ and http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html for some background info. Check out the Quartz 2d guide on the Apple Dev Center. Hell you'll need to see anything that interests you on Dev Center since the docs, videos and sample apps provide plenty of information for you. Remember it's okay to write basic programs that don't really do anything amazing at the end. You need to learn the basics anyway and the best way to do that is to write tons of throwaway little projects. At first it's frustrating since you'll feel like you don't know anything. Then you'll learn enough to move up to the next level. Then you'll feel like you don't know anything again. It's a constant cycle of improvement. 
Your plist structure doesn't make sense. There's no place where you have a string key of 'isAppTypeOne' and there's no place where you have a boolean value. Normally something like this would look like: &lt;dict&gt; &lt;key&gt;isAppTypeOne&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt;
So my understanding of this is that this value is in the NSBundle mainBundle and we are pulling the value from there with this plist. With the code you have, what if you set that value to false? What would happen then? 
As a web view is effectively a full Safari engine, all you need to do is include your CSS inside the HTML as with any web page. If you want to bundle the file with your app (as opposed to loading the page over the network), you'll just need to make sure you use relative URLs, and load the HTML properly via a file NSURL (e.g. Look at NSBundle mainBundle).
Curious. Why?
Oh, whoops. Didn't realize iAd wasn't available on OS X. My apologies!
I use to have a Macbook 2010 (old Core 2 Duo), and even though it had an old processor, I have to agree with you. I preferred to use it instead my Big desktop with 23 inch monitor AMD FX6300 8Gb etc because of keyboard, trackpad and typing position :D I sold just because Core 2 Duo was slow, despite the 8Gb and SSD. Probably getting a Air 13 standard :D
Thank you, I'll look at this.
just remove -ldspatch and -lBlocksRuntime and you're good.
Cool! I didn't know it, I used this command line: sudo find /Users/asdlol/Library/Developer/CoreSimulator/Devices/ -name "MySQLDB.sqlite" -print -quit to find my sqlite file :D
Firstly, the iPhone Simulator has no location by default. You'll have to go to Debug -&gt; Location -&gt; Custom Location and enter one. Secondly, while I could tell you just how to enable the button, I would recommend checking out something like [this tutorial](http://www.appcoda.com/how-to-get-current-location-iphone-user/) since it likely answers a lot more of your questions.
Doubtful. It's not really a great language anyway and it's nothing without the frameworks. I guess message passing and the unusual syntax are at least curiosities, but I don't see why anyone would have much interest in Objective C as a hobby language.
This is more of a Stack Overflow sort of question. You might try check out out these: [Location Services not working in iOS 8](http://stackoverflow.com/questions/24062509/location-services-not-working-in-ios-8) [iOS 8 Map Kit Obj-C Cannot Get Users Location](http://stackoverflow.com/questions/24717547/ios-8-map-kit-obj-c-cannot-get-users-location) 
I couldn't disagree more. It's the perfect way to extend C with true object orientation without adding all the bloat of C++. The patterns also are framework-agnostic and come from what the language has to offer. There's really nothing wrong with using ObjC without Cocoa and an alternative framework instead.
Ok. Thanks a lot
Apple actually has a website with a bunch of open source Cocoa projects https://developer.apple.com/library/mac/navigation/index.html#topic=Sample+Code&amp;section=Resource+Types Basically any Cocoa API has some small or not so small sample project using that API there. For example TextEdit (the Mac OS text editor) has the source code there. There is also some paint-like app there. If I were you, I'd try to create e.g. the paint app without looking at the source, do your best and when you get stuck/bored look at how they do it. 
Why yes, yes I am. I've programmed with it in Windows using GNUStep, but it's not up to date. It doesn't include ARC. I'd really love to see it grow into something bigger. 
Let us know if you run into any other problems. :)
I like it. I haven't really done anything in Obj-C apart from a few toy programs, but [ObjFW](https://webkeks.org/objfw/) is really good, from what I've touched. I use Linux, for reference.
The objc_runtime is truly a marvel. Creating a robust object-oriented runtime that's very lightweight and incredibly fast, that has (with a few modernizations) maintained perfect backwards-compatibility with C while adding complex features like fast enumeration, ARC, and object subscripting? Magic.
Heh, thanks! I'm actually the author of ObjFW :).
It still doesn't support ARC? Have a look at my project, ObjFW[1]. It's a portable ObjC framework that supports ARC since forever :). Be sure to check it out from Git, though, as the last release is really dated. [1] https://webkeks.org/objfw/
Well, that's not so much the runtime as the language itself. There are multiple runtimes that offer all that, but it's enabled by the language :).
Have an upvote. 
I'm just an amateur, not doing anything impressive enough to share with anyone, but I am actively using ObjFW in my little projects. Objective-C is a good language *if* you're comfortable with C and Smalltalk, which every serious coder should be, IMO.
Any chance of ObjFW being usable as a Foundation replacement when we finally have a working Free Software Swift compiler? I'd be especially interested if it duplicated Swift's String implementation, which is conceptually as good a Unicode string model as I can imagine being practical.
That's awesome! Thank you so much for all your work on it.
lol fail
Don't forget, ObjC supports runtime introspection, something that most other compiled languages still lack. It seems like something you would never use, but it allows a lot of creative things to be done by library and framework developers, I could probably implement a MVVM framework in ObjC that would be impossible in C/C++/Vala.
The thing that has helped me the most is looking at other people's code. I've worked in dev agencies for 5 years now as an iOS dev so i've seen plenty of different projects written by dozens of different people, and everytime I see a new project, I learn something new. Sure, you can read blogs like NSHipster and Ray Wenderlich, and you can watch all of the WWDC videos, but until you actually have to implement something in a real app, it will be random fragments of knowledge in the back of your head that you'll never remember. Try downloading some projects from github and looking at how they do things. You'll pick up a lot of new things very quickly. As for the documentation, if I could pick 1 doc to know forwards and backwards, it would be UIViewController. Most of the rest can be learned through experience, trial and error, or just not learned at all and referenced as needed. Knowing the right methods to implement in a viewcontroller will really help stabilize your code and organize everything for you. Edit: as a non programming background, you'll be at a bit of a disadvantage because you don't really know the common algorithms and patterns, and concepts like pointers and methods might be a little strange. This is when blogs and tutorials tend to help out a lot, but you'll have to do a lot of self teaching as well. Learn-programming websites like Code Academy tend to have algorithm sections that might help as well (but they'll be in other languages).
Thanks for your tip - I'm learning Swift now and stumbled upon this Weather app written in Swift: https://github.com/JakeLin/SwiftWeather
I found a resource through an iOS developer that helps answer my question a bit: http://www.devfright.com/a-quick-look-at-xcode-documentation-and-how-to-understand-it/ 
Look up AFNetworking and NSTimer. The former encapsulates a lot of the networking crap and can really elegantly hand you back either an NSDictionary or error depending on the call, and the latter will help you do that repeatedly on a schedule. 
Thanks! 
Wow, thanks this helps a lot!
Also look at NSJSONSerialization. It will convert an NSData object that you downloaded into an NSDictionary so you can read the keys. 
Have you read BNR's [Advanced OS X](http://www.bignerdranch.com/we-write/advanced-mac-osx-programming.html) or [Cocoa](http://www.bignerdranch.com/we-write/cocoa-programming.html) books?
No. I'll be buying Cocoa Programming next then.
Came to suggest exactly this. Aaron Hillegaas' book is the bomb.
http://www.raywenderlich.com
If this is being done in a web view your website should probably just redirect after login 
That was my original reply too. If that is not a workable solution, then OP has a lot more work to do. But the delegate method `- (void)webViewDidFinishLoad:(UIWebView *)webView` and the UIWebView method `- (void)loadRequest:(NSURLRequest *)request` should be enough to get started.
is the whole app in a web view? I'm not really sure on best practices when mixing navigation but the web view delegates should help. I'm not sure how much of the server response you get access to though 
No, it's just a few pages. Based on the responses im getting I'm thinking I'll have to delve more into the delegate methods.
I solved this problem by setting up the new webview in (void)webViewDidFinishLoad:(UIWebView *)webView
I think I might try this out. I am having issues with webviewdidfinishloading, it keeps firing infinitely. I guess there are a lot of frames or something. Any idea of a workaround?
Sounds like _check_website_function is doing a lot of work on the main thread causing the app to freeze.
You need to make sure any sort of I/O (including network calls) are done off the main thread. If what your doing in your request method is synchronous, you need to wrap it in a dispatch_async() call. 
Thank you for the advice ! I will try to find some documentation about multi-threading !
I'd suggest you consider using [AFNetworking](http://afnetworking.com) as your network I/O library. It's well factored, and performs the network fetching as well as assembling requests and parsing responses, using background threads (operation queues). You also need to read up on how [blocks](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html), [Grand Central Dispatch (GCD)](https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html) and [NSOperationQueues](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSOperationQueue_class/index.html) function. They're really quite approachable compared to other multithreading/concurrency models, but without a working understanding of how these concepts function, you're going to have trouble with keeping the main thread of your app free to process user events promptly, which is what gives an app the feeling of responsiveness for the user. 
Have you tried putting a breakpoint in _check_website_function and stepping through it to see where it might be freezing?
The freezing is just temporary, as long as the program gets what it needs, every works. The problem is caused because the amount of data to fetch is huge and because the server can take time to respond to the requests.
[Grand Central Dispatch](https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html) is your friend here. Stupid easy threading. 
If you use [AFNetworking](https://github.com/AFNetworking/AFNetworking), then the [AFOAuth2Manager](https://github.com/AFNetworking/AFOAuth2Manager) extension for the library should do the trick for you. You can hack together something using Foundation to process your OAuth calls, but I'd recommend using a library that's already done it for you, like AFNetworking or gtm-oauth2 (linked in the other comment.)
The `NSLog` and any function that has three dots can take a `printf`-styled string to interpolate different values into a string. Most of the format arguments start with a percent sign. If you want to have a percent sign to show up in your string, you'll have to escape it with another percent sign: `%%`. Look up printf formatting for more info. Yes, `NSObject does have a `description` call in it, but it only returns the address in memory of the object. You can override it in your own classes, though.
http://theamazingaudioengine.com
I ended up using EZAudio, and it was very easy.
Do you have any resources you found particularly helpful? I would really like to make a simple status bar app. 
He did not discuss anything specific that would help designing this, though, just some really general things about how much data he has to process per second.
Someone more knowledgable please correct me if I'm wrong... I would use an SKAction to scale the x or y (or both if you are so inclined) over an interval. I'm on mobile now, but may be able to provide a snippet later. SKActions ftw haha. Edit: do you want an animation of it folding or the x axis to scale down?
You're 100% correct. [Here's the documentation entry.](https://developer.apple.com/library/prerelease/ios/documentation/SpriteKit/Reference/SKAction_Ref/index.html#//apple_ref/occ/clm/SKAction/scaleXBy:y:duration:)
Source code control (Git, SVN, CVS) is something, once you master, you cannot imagine living without. There is a very steep learning curve, and I cannot imagine why that's in the book unless it assumes you already have a handle on it. Just skip that for now and stick only to the Objective-C stuff. Later, when you want a new challenge, learn git. Open up an account on github to play around with if you want to share your code with the world. Or just use git locally to track and revert code changes.
Nice one. Can you recommend any good beginner books/tutorials for an introduction to Git? I will leave it aside for now for sure as there is plenty to be getting on with otherwise, but definitely will revisit in about a month or so. Thanks!
Teach yourself dragging around UIButtons in IB in 24 hours.
Don't take the 24 hours too literally... if you prefer, stick with Big Nerd Ranch until you're more comfortable with programming and objective-c.
Well, I started programming in Objective-C in 2002. I think I'm fine. I admit that my comment was a little cocky. But really, how much of a language can you learn in 24 hours?
Sure, if you know these concepts and you already have decent experience with a C based language, you'll fly through it. But I don't think that's "basic programming experience" (according to OP).
Fair enough.
I have no way to substantiate your claim of starting programming Objective-C in 2002 and have no clue as to how good of a coder you are, etc. etc. etc. And it's not that you came across as cocky, more that you come across as an unhappy individual that has nothing good to contribute to a genuine learner. That is quite sad and I only feel sorry for you. Had you a brighter mind and kinder perspective you wouldn't respond like that. Good luck to you though.
I recommend this [tutorial](http://rypress.com/tutorials/git/).
I bought this book a while back, and it is probably the worst written guide books I've read. I encountered such ambiguous language in sections and even some errors with the examples. I consider that books a waste of money. Check out the amazon reviews too. The big nerd ranch series is much better. 
"Read the Library of Congress in 24 hours". Not possible. Spend some time with raywenderlich.com instead.
Again, the 24 hours isn't meant to be taken literally and I doubt that anyone who buys the book expects to learn it in 24 hours! It is a book full of tips and good advice. I already went through the free tutorials on raywenderlich.com and it's nice for a total beginner. Their paid-for content is completely over the top in price compared to good value books.
I've used that site quite a bit. Brilliant set of tutorials. Edit: Awesome that they have a Git tutorial as well. Thanks a mil ridhaha! 
The second edition is very good and has received good reviews on Amazon. 
Would help to just ask your questions......
I think the problem with your question is it is too vague and broad. Do you have code written into classes already? Do you know C? Xcode can set up a new project for you where you can literally plug in code to handle your core app logic and it will take care of most everything else. If you want to start adding fields and controls, you graphically add them in interface builder and then connect up the appropriate methods. 
I'm going to be honest. My gut feeling is your an entrepreneur or student and your not willing to put the time in. Which makes you a terrible entrepreneur/student. Putting it all together is experience and just playing around. Quit being such a slacker and just go through some tutorials, read some docs. Ideas are a dime a dozen, follow through is everything. If you know object oriented programming in general maybe just look at something like http://www.raywenderlich.com and do their video training. I'm sure there are free YouTube videos taking you from the bottom and building something basic. If you don't know oo, your currently out of your depth and you should start there. Conceptually very important.
You might want to find a mentor on codementor.io
Erica Saduin's [The Core iOS Developer's Cookbook](http://www.amazon.com/Core-Developers-Cookbook-Edition-Library/dp/0321948106) is a great resource as well. AFAIK it hasn't been updated since last year but she's pretty much my go to source for Obj-C/Cocoa stuff. She's been a Smalltalk/Obj-C hacker for over 20 years.
The Objective-C compiler is open source but the SDKs are not. You cannot compile an iPhone or OS X app without a Mac. Even Xamarin requires a Mac somewhere in the local network so that the app can be compiled.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**GNUMail**](https://en.wikipedia.org/wiki/GNUMail): [](#sfw) --- &gt; &gt;__GNUMail__ (aka __GNUMail.app__) is a [free and open source](https://en.wikipedia.org/wiki/Free_and_open_source_software), [cross-platform](https://en.wikipedia.org/wiki/Cross-platform) [mail client](https://en.wikipedia.org/wiki/E-mail_client) for [GNUstep](https://en.wikipedia.org/wiki/GNUstep) and [Cocoa](https://en.wikipedia.org/wiki/Cocoa_(API\)). It is the official mail client of GNUstep and is also used in [Étoilé](https://en.wikipedia.org/wiki/%C3%89toil%C3%A9). It was inspired by [NeXTMail](https://en.wikipedia.org/wiki/NeXTMail) ([NeXT](https://en.wikipedia.org/wiki/NeXT)'s Mail.app), the predecessor of [Apple Mail](https://en.wikipedia.org/wiki/Mail_(application\)). GNUMail is based on the mail handling framework Pantomime. &gt;Furthermore GNUMail demonstrates that it is possible to develop cross platform programs for GNUstep and Cocoa. &gt;==== &gt;[**Image**](https://i.imgur.com/DfcxalU.png) [^(i)](https://commons.wikimedia.org/wiki/File:Gnumail1.2.0.png) --- ^Interesting: [^GNUstep](https://en.wikipedia.org/wiki/GNUstep) ^| [^NeXTMail](https://en.wikipedia.org/wiki/NeXTMail) ^| [^List ^of ^email ^clients](https://en.wikipedia.org/wiki/List_of_email_clients) ^| [^Mail ^\(application)](https://en.wikipedia.org/wiki/Mail_\(application\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+co5ool1) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+co5ool1)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; You cannot compile an iPhone or OS X app without a Mac. [Well ...](http://iphonedevwiki.net/index.php/Theos)
Author of ObjFW here. ObjC in general on Windows is currently in quite a bad state, as you're basically down to what GCC offers: ObjC 2.0, no blocks, no ARC, slow dispatch API, etc. The reason for that is that Clang's MinGW32 support is seriously broken. It only recently started accepting all the flags needed to properly work with ObjC, but now fails to properly emit a lot of symbols, resulting in linking errors. I hope to find the time to fix that, though. The problem is that Clang generally only focuses on Windows as a MSVC compiler replacement. That said, if you want to use ObjC on Win32 or Win64, I currently highly recommend MSys2. This is what I actually use to compile ObjFW for Windows on Windows. If you have any questions on how to set it up, feel free to ask!
Don't be a dick. Get the Mac.
Macs are shit for the price. That'll be like paying a shit ton of money for a few apps and a crappy OS
I build PC's almost everyday I work with them. I have had my rounds with macs and they are shit. The only reason to buy one is for the brand name
Updated the README to MSYS2 now: https://github.com/Midar/objfw/blob/master/README-WINDOWS.md
28 questions no where to be found.
Other than framework references, and the WWDC video on healthkit, I think your best bet may be the sample code Apple provides on their site. https://developer.apple.com/library/ios/samplecode/Fit/Introduction/Intro.html#//apple_ref/doc/uid/TP40014583
Oh cool, I was only able to find the swift samples before. Thanks!
Hope this helps someone. Any feedback is appreciated! 
It is not clear what this attempts to solve and why. NSFetchedResultsController works fine with queue confinement and nested contexts when used correctly. Use something incorrectly and it can be painful. 
I was under the impression NIB was for NeXT Interface Builder. A XIB is just the XML variant (compiles down to an actual nib) that's source-control friendly. [Wikipedia](http://en.wikipedia.org/wiki/Interface_Builder) seems to agree.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Interface Builder**](https://en.wikipedia.org/wiki/Interface%20Builder): [](#sfw) --- &gt; &gt;__Interface Builder__ is a [software development](https://en.wikipedia.org/wiki/Software_development) application for [Apple's](https://en.wikipedia.org/wiki/Apple_Inc.) [Mac OS X](https://en.wikipedia.org/wiki/Mac_OS_X) [operating system](https://en.wikipedia.org/wiki/Operating_system). It is part of [Xcode](https://en.wikipedia.org/wiki/Xcode) (formerly Project Builder), the [Apple Developer Connection](https://en.wikipedia.org/wiki/Apple_Developer_Connection) developer's toolset. Interface Builder allows [Cocoa](https://en.wikipedia.org/wiki/Cocoa_(API\)) and [Carbon](https://en.wikipedia.org/wiki/Carbon_(API\)) developers to create interfaces for [applications](https://en.wikipedia.org/wiki/Application_software) using a [graphical user interface](https://en.wikipedia.org/wiki/Graphical_user_interface). The resulting interface is stored as a __.nib__ file, short for *NeXT Interface Builder,* or more recently, as a __.xib__ file. &gt;Interface Builder is descended from the [NeXTSTEP](https://en.wikipedia.org/wiki/NeXTSTEP) development software of the same name. A version of Interface Builder is also used in the development of [OpenStep](https://en.wikipedia.org/wiki/OpenStep) software, and a very similar tool called [Gorm](https://en.wikipedia.org/wiki/Gorm_(computing\)) exists for [GNUstep](https://en.wikipedia.org/wiki/GNUstep). On March 27, 2008, a specialized [iPhone](https://en.wikipedia.org/wiki/IPhone) version of Interface Builder allowing interface construction for iPhone applications was released with the iPhone SDK Beta 2. As of Xcode 4, Interface Builder no longer exists as a separate application, and its functionality is directly integrated into Xcode. &gt; --- ^Interesting: [^Graphical ^user ^interface ^builder](https://en.wikipedia.org/wiki/Graphical_user_interface_builder) ^| [^Gorm ^\(computing)](https://en.wikipedia.org/wiki/Gorm_\(computing\)) ^| [^MacRuby](https://en.wikipedia.org/wiki/MacRuby) ^| [^Glade ^Interface ^Designer](https://en.wikipedia.org/wiki/Glade_Interface_Designer) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+colbvp3) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+colbvp3)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I recommend using AFNetworking
Already doing this.
NSTimer would work. I put together a whole project if you want me to post a download to it here, I can. Here's what I have in the code though: // In a function (probably IBAction) timer = [NSTimer scheduledTimerWithTimeInterval:.001 target:self selector:@selector(updateTimer:) userInfo:nil repeats:YES]; - (void)updateTimer:(id)sender { // Create date from the elapsed time NSDate *currentDate = [NSDate date]; NSTimeInterval timeInterval = [currentDate timeIntervalSinceDate:startDate]; timerDate = [NSDate dateWithTimeIntervalSince1970:timeInterval]; // Create a date formatter NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init]; [dateFormatter setDateFormat:@"s.SSS"]; [dateFormatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0.0]]; // Format the elapsed time and set it to the label NSString *timeString = [dateFormatter stringFromDate:timerDate]; timerLabel.text = timeString; } I used an IBAction and if-statement to start and stop the timer. Then to increment scores I took the `[timerLabel.text floatValue]` and compared that to 200, 400, 600, or &gt;600 to get point values. EDIT: You can check out the project [here.](https://www.dropbox.com/s/7duhdq9cfzxwghr/redditButtonApp.zip?dl=0)
Try using: buttonController.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithImage:[[[self class] defaultImage] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] style:UIBarButtonItemStylePlain target:self action:@selector(toggleLeftPanel:)]; What's happening is that the image is being rendered as a "template", that is, only the alpha channel is being drawn with the colour coming from the navigationBar's tintColor
That looks great. If you'd post the project it will be a little easier for me to fully understand I guees :)
What this guy said. Now if you want to show the time in seconds or ms as its being counted down, sure use a timer. But even each of those timer "ticks" should have timePasses = currentTime - startTime 
Go get the Big Nerd Ranch book for Objective-C. It starts with the basics of programming. http://www.amazon.com/Objective-C-Programming-Ranch-Guide-Guides/dp/0321706285
UIKit and Cocoa Touch are things you'll usually be taught when you're learning to build apps. It's pretty much tied into app development so you don't have to think that you need to look up specific tutorials for them. Swift is a separate langauge, similar to Objective-C. You don't have to learn both, you can learn one or the other. Swift is newer and easier for a beginner to pick up. Check out this youtube channel [CodeWithChris](https://www.youtube.com/user/CodeWithChris). He has some excellent tutorials targeted at beginners.
learn javascript first, its a much easier language. 
Pointers are probably a little advanced to start off with. I'll show myself out. 
Agreed. If you just want to play with iOS development, look into Swift. It was designed around modern development, where as Objective-C is clunky and carries a lot of legacy from the 90s and NextOS.
I strongly recommend the [RyPress Tutorials](http://rypress.com/tutorials/objective-c/index) for learning Objective-C.
Just filled it in. I feel like you can add more questions. 1. If you don't use swift, why? 2. Years of experience developing in obj c. 3. Do you use objective c professionally? 4. Age group. 5. If swift doesn't become mandatory, do you see yourself switching to it?
I kept it short because I didn't think people would fill it in otherwise. Thank you for your suggestions though. EDIT: If anyone wishes to answer those questions, just PM me your answers and I can add them to my findings.
No worries man. 1. I don't use swift because I use objective C professionally in a team and if we ever decide to move to swift, it will be only if one of the core SDK's we use decides to go swift only. 2. 4.5 3. Yes 4. 25-30 5. Eventually, yes. It is pretty lightweight and piques my interest.
I would suggest Apple's programming guides. Things you'll be needing should just be the syntax, and the frameworks that Apple uses. [Programming Guides](https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Guides) on the iOS Dev Library. I doubt you'll have much difficulty in grasping the concepts with your background. For example [Concepts in Objective-C Programming](https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010810-CH1-SW1) and [Programming in Objective-C](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210) from Apple would be a good start.
I'd just go over the syntax in the Apple guidelines and some sample apps. With your experience you won't have any problems grasping the concepts. Regarding the pre 2010. Most of that is still valid, just ignore the memory functions ("autorelease" is the big one). There are still memory considerations, but while you're learning the frameworks it's not going to be a big deal (when you get up to blocks start reviewing referencing).
I thought autorelease is the New Thing; have I misunderstood?
Automatic Reference Counting (ARC) was released in 2011, so material published before will use manual reference counting examples. In ARC, because the compiler manages reference counting, direct messages to certain methods that were required to manage reference counts without ARC are illegal to use with ARC. Those methods are `retain`, `release`, `retainCount`, `autorelease`, and `dealloc`.
Thank you!
lol at replacing objective c in 1-2 years.
it seems that among my fellow ios developers that there is a love/hate relationship with swift. i myself want to like it but everytime the language hugs me, it follows up with two punches to the face
Objective C is definitely an older language and uses an unusual syntax, but is hardly clunky. "Carries a lot of legacy" doesn't even make sense, and there's no such thing as NextOS. Swift is newer and more syntactically similar to languages you might already be familiar with. Objective C is much more established and has much more in the way of existing code/libraries and examples/support to work with,
Why are there no images to show examples of what this actually does 
whoa... this is amazing. Can you tell me how? from half our I am trying to find out same, but I couldn't figure out. I don't know Obj-C, but I do know Swift and Python. Can you tell me how or point me where I should look, if I want use python code in my Swift project? 
I have used this open source library called [Mailcore 2](https://github.com/MailCore/mailcore2) and it's worked well for me. There's also another way. Using [URL scheme](http://wiki.akosma.com/IPhone_URL_Schemes#Mail). But I haven't personally tried this. If you have a device, give it a try and see.
Thanks for the help. Im going to try that.
Why not mapkit?
Ok, I'll bite. Does the option exist for the map to be edited from the web. They want a central map that can be modified to add new fire locations to and this map be displayed in the app. I honestly feel like I could just make a javascript html page that does this and just use webview. Probably tacky. I mean we are talking basic functionality. User sees where new fires are, can click on marker to see a bit of metadata
I'm not sure about a web interface but [adding annotations](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/AnnotatingMaps/AnnotatingMaps.html) is very simple with MapKit. I'm sure you could make a web interface and use the coordinate points for your Annotations.
Outstanding thanks - I didn't think to look at it as related to CoreAudio but of course now it makes total sense. Many thanks!! EDIT: shamed by not buying the book. EDIT2: I forgave myself. EDIT3: bought he book anyway. Jeez it's fucking hardcore... Ace!
I'd highly recommend purchasing. Might motivate them to write an updated version, though, not *too* much has changed. Code samples [here](https://github.com/abbood/Learning-Core-Audio-Book-Code-Sample).
`CGPoint *touchingPoint` means that `touchingPoint` is a pointer to an object. `CGPoint` is a `struct` (think primitive type), so no pointer is needed. `CGPoint touchingPoint` (no asterisk) will work. Same for `CGFloat`.
Worked like a charm :D
Don't use pointers CGPoint myPoint = cgpointmake(10,12); You can then access myPoint.x which would equal 10 Remove your * 
"Want to use Google's Material Design colour pallet in your Objective-C project?" No.
FWIW, I've done [all of the icons as PDFs](https://github.com/programmingthomas/material-design-icons) as well, which makes them super easy to import into Xcode projects.
Sweet!
It makes your app look more like an Android app.
Material design looks a helluva lot better than iOS 7/8. Damn Jony Ive and his crusade against shadows! Thanks for the contribution.
http://stackoverflow.com/questions/23559263/opening-and-creating-sqlite-database-in-objective-c
Hm that's SQLite and he creates the database locally. I want different users connecting to an online database.
Connecting directly might not be the best idea due to user management complexities and security issues. I would recommend building a web interface with something like PHP and have the app interact via POST or GET over SSL. Otherwise, I'd be kind of interested in figuring that out as well. Perhaps build an object that uses the C library?
You should create an API. Moreover, you SHOULD never store credentials such as your database username and / or password, because you can easily retrieve them.
You need to build a web service to do this. This can be in PHP, node JS, ruby on rails, java or whatever. This will take requests from the user and handle them appropriately. It can use mySQL, postgres, mongo DB or whatever for persisting information.
(sigh) That question makes me miss EOF. Such a great object-relational tool. https://developer.apple.com/legacy/library/documentation/LegacyTechnologies/WebObjects/WebObjects_4.0/System/Documentation/Developer/EnterpriseObjects/Guide/EOFDevGuide.pdf Is there anything equivalent today for Objective-C/Swift? 
Have you checked out WWDC or iTuneU videos? There are some great resources.
OpenGL **1.0**? Seriously?
OpenGL ES 1 is based on OpenGL 1, which is over *eighteen* years old. You would be much better off learning ES 2. I'm guessing you're probably interested in OpenGL ES 1 because you've heard that shaders or matrix math is hard (which is true) *but* iOS includes GLKit, which makes it easy to get started with these, but using some of the concepts from ES1. A major disadvantage of trying to learn ES1 is that a lot of the tutorials are going to be pre-ARC. Either learn ES2 or GLKit. Take a look at Ray Wenderlich's tutorials for [GLKit](http://www.raywenderlich.com/5223/beginning-opengl-es-2-0-with-glkit-part-1) and [OpenGL](http://www.raywenderlich.com/9776/how-to-create-a-simple-2d-iphone-game-with-opengl-es-2-0-and-glkit-part-2)
Yup. CoreData evolved from EOF. Not quite the same, but it works and is extensible.
I will look into using git. Thanks. The widget is not showing in the simulator after resetting content and settings but is still showing on my actual iPhone. Is it safe to assume it had been deleted or is there something else I should be doing? EDIT: Eventually this fixed the problem. It is not longer showing on my iPhone.
I'd use a GCD dispatch timer source, whose execution block decremented a time counter (seconds? minutes? whatever your unit of time is). When the user gets their achievement, just set the counter back to a full amount. If the timer reaches/crosses zero, time's up. 
One thing to keep in mind with an NSTimer is that it is fairly inconsistent with its timing as it relies on the run loop for timings and if that is delayed then the trigger is delayed. You could probably use it as a repetitive check to a more accurate timing mechanism (maybe something like mach_absolute_time and get the NSTimer to loop multiple times a second).
Right off the bat I'm thinking it has something to do with Autolayout. I could be wrong though. 
You're not going to find an easy answer to this. You should just read a tutorial like this: http://www.raywenderlich.com/934/core-data-tutorial-for-ios-getting-started ..or just use something like magical records: https://github.com/magicalpanda/MagicalRecord Edit: obviously the alternative is to ready the documentation on Core Data which I assume you are trying to avoid 
I've spent a good long time developing SQLite techniques so I *don't* need to use Core Data. 
There's a few problems with this design. * The init callback - callbacks make sense to stop from blocking the main thread but not if the main thread isn't doing anything. Doing this will make your app splash screen fade to black then snap instead of fading to your initial screen. * Saving when the app goes to the background is a terrible idea. If you're in the middle of making changes then you may try to save with inconsistent data, or you may save only half the changes. You should call save at a time after you have made a logical block of changes. * Having only a single private managed object context instead of creating them as required is questionable as well.
There's a lot of books which cover CoreData. Try this one to get you started: https://www.ebooks-it.net/ebook/core-data-2nd-edition
Thanks for your feedback, it was most informative, constructive and useful.
That book is written by the author of the link
Cool library, but what is this libtrends.com website? All of OP's recent posts have been to it. It seems to just scrape some of the git repo's README. 
Nice, thanks. 
Realm looks really nice, it also does look very similar. I guess for the the main differences are around how the objects relate to each other. Realm objects relate to each other using the object inheritance, which is a really nice feature whereas because DBAccess is based on SQLite it uses a more traditional approach of storing FK values to create relationships. The end results are broadly the same. I've not used it, just flicked through their site so i'd hate to make any assumptions but I doubt it can touch SQLite for anything other than the simplest of straight forward queries. But (and i'm happy to be corrected on this), the main differences I would say would be: DBAccess uses Parallel subqueries, so a where condition of "employee IN (select employee FROM CurrentEmployees) AND employee IN (select employee FROM RetiredEmployees) AND employee NOT IN (select employee FROM RetiredEmployees WHERE retirementDate &lt;= '01-01-2010')" Would have to be arranged in code, perfectly possible, but it's one the the strengths of SQLite. There would appear to be no lightweight objects to save memory on large result sets. No COUNT,SUM,GROUP, PRIMARY KEY (just fetch the PK's for use individually) queries. No use of LIMIT &amp; OFFSET to make querying for UITableViews quicker, but it may not need it! I have no idea. Didn't see any Async query types with query handlers. No support for DateTime precision greater than 1 second, No property support for UIImage / NSDictionary / NSArray No property encryption The examples all show writes in Realm being inside transactions, that is both possible in DBAccess but is not necessary, because a DBObject has commit/remove methods on it, and a transaction is inherently created for the current thread, and then destroyed. It looks to have some pretty cool stuff built into the Arrays you get back, so you can further query them, thats a really nice touch. But I can't see that it does anything much different. I may be doing it a terrible dis-service, and that is not my intention at all because I like it and what they have done. But I can't be particularly objective because i'm so close to our project, and I know the compromises we made to achieve the output and Realm would have made different compromises in differing areas.
Sometimes I like to completely reset all of the simulator devices on my computer so that they all start fresh. Since I couldn't find an easy way to go about doing this I wrote a simple ruby script to do it for me. Just run it with `ruby reset.rb`, confirm the reset (type "yes" or press enter) and that's it! [Screenshot](http://i.imgur.com/PHbikio.png)
Why not refer to the Core Data Programming Guide?? - https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html Everything you need is already there.
Try also Objective-C for Dummies, nicely explained(as always) takes you through all the steps to make an app
I really don't know how I lived before SDWebImage.
What's the advantage of either over just using NSURLSession as Apple intended? As a bonus you won't get caught in major security snafus like AF currently has.
There are tons of frameworks on github for this, definitely use those
That website is the worst
I have more of a feeling that Microsoft's tool chain is going to have to be very impressive to sway people. I'll be sticking with Swift.
It will not even post to Facebook if i do it manually from the popup 
No, the takeaway is that it's a poorly written article, not that Windows devs have never heard of objective c.
Non-mobile: http://en.wikipedia.org/wiki/Oracle_v._Google ^That's ^why ^I'm ^here, ^I ^don't ^judge ^you. ^PM ^/u/xl0 ^if ^I'm ^causing ^any ^trouble. [^WUT?](https://github.com/xl0/LittleHelperRobot/wiki/What's-this-all-about%3F)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Oracle v. Google**](https://en.wikipedia.org/wiki/Oracle%20v.%20Google): [](#sfw) --- &gt;___Oracle America, Inc. v. Google, Inc.___ is a dispute related to Oracle's [copyright](https://en.wikipedia.org/wiki/Copyright_law_of_the_United_States) and [patent](https://en.wikipedia.org/wiki/United_States_patent_law) claims on Google's [Android operating system](https://en.wikipedia.org/wiki/Android_(operating_system\)). In May 2012, the jury in this case found that Google did not infringe on Oracle's patents, and the trial judge ruled that the structure of the Java APIs used by Google was not copyrightable. The parties agreed to zero dollars in [statutory damages](https://en.wikipedia.org/wiki/Statutory_damages) for a small amount of copied code. On May 9, 2014, the [Federal Circuit](https://en.wikipedia.org/wiki/United_States_Court_of_Appeals_for_the_Federal_Circuit) partially reversed the district court ruling, ruling in Oracle's favor on the copyrightability issue, and [remanding](https://en.wikipedia.org/wiki/Remand_(court_procedure\)) the issue of fair use to the district court. &gt; --- ^Interesting: [^Oracle ^America, ^Inc. ^v. ^Google, ^Inc.](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.) ^| [^Mike ^Masnick](https://en.wikipedia.org/wiki/Mike_Masnick) ^| [^Florian ^Müller](https://en.wikipedia.org/wiki/Florian_M%C3%BCller) ^| [^James ^Gosling](https://en.wikipedia.org/wiki/James_Gosling) ^| [^History ^of ^free ^and ^open-source ^software](https://en.wikipedia.org/wiki/History_of_free_and_open-source_software) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cquef5r) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cquef5r)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I am using the same Facebook account and no it is not a dev account 
it also keeps giving me this error plugin com.apple.share.Facebook.post invalidated
He gets to the Objective-C stuff around 27:17
&gt; I’m interested to see if the prospect of some additional portability, however small the audience is at this point, slows the adoption of Swift. That's what I've been thinking. What Microsoft is doing is fair game, but it's certainly unpleasant, because they're distracting Apple devs and giving them reason to stick to soon-to-be legacy technologies. I wonder if Apple thinks "phew, good thing we didn't open source Swift - look what Microsoft did with Clang!".... or maybe they think "oh man, we should consider open sourcing Swift, because look what Microsoft is doing, they'll stall our Swift efforts". Decisions decisions.
Microsoft's dev tools have always been impressive if we have to be honest. Dev tools were never their weak side. I think it's more about their whole vision, if it pans out. If you can port an iOS app but it looks and feels like crap due to the "shim" logic, it might not be worth it, even though I bet Visual Studio will be impressive as always.
Haha not too useful of a comment but here goes. I honestly think if someone wants to learn iOS programming specifically, you cannot get much better quality than from Ray Wenderlich. Their tutorials are superb and always use example that are relatively interesting to keep people from getting bored.
You really shouldn't use OSAtomic* these days anymore. Atomics are part of C11 and C++11 and thus also ObjC. Also, there's compiler builtins that do the same things with less overhead. These OSAtomic* are back from the days when Apple was using old GCC versions that had no atomic builtins yet.
&gt; It's recommended practice to use ivars in init, however. I know, thanks, but it's another topic to discuss. I see how people without ivars in a ctor still checking self for nil.
It's also not required to call `[super init]` when you're subclassing NSObject, but I do that too - I think it's a good habit to get into.
I would also be worried about constructors that pass self as an argument to something else, like registering as a notification listener or a delegate. Is the called function robust enough to handle nil as an argument?
The file itself is definitely a png right?
Did you grant yourself full access? Keyboards need full access to copy-paste.
The UIPasteboardDataExtensions category on UIPasteboard adds an "image" property. Have you tried [UIPasteboard generalPasteboard].image = image?
This looks awesome 
&gt; Hey, I just saw your post on r/golang looking for help witha Project Euler. I'm not the best person to ask, but I'm a member of Volley which is this private community of developers, designers and entrepreneurs who are helping each other be more successful by answering tough questions and facilitating introductions. Your post is exactly the kind of thing we're all helping each other with. You should join us :) Signup at volley.works with passcode: CHARLIEGGNTMP Got the same shit ...
Hi! I'm the author of this library. Please let me know if you have any questions or suggestions.
What version of iOS was your SKScene originally archived with? Are iOS 8 scenes backwards compatible with iOS 7? (I don't know anything about sprite kit, but forward compatibility with archived objects can be a tricky problem.) There are, for example, several types of SKNodes which are new in iOS 8 which wouldn't be present in earlier versions. Have you tried archiving your scene in iOS 7 and running that code? If that doesn't work: Have you checked for errors coming from `dataWithContentsOfFile:options:error:`? Have you looked at the contents of `data` to see if it is what you expect? Have you tried not optionally mapping the file (or requiring mapping)? 
Looks like you can't attribute more than the very first matching string. Is that correct?
Sorry, I don't understand what you means
yep. I mentioned this in the README
Really impressive.
Could be augmented with a `match(@"Hello")` method to provide this sort of behavior. After looking at the code, the `Typeset` container only looks to track one range, thus the limited methods. This would have to be expanded to support N ranges. 
Okay, but I will argue til death that "flatness" is not a real attribute of any color. Seems like a misnamed, odd UIColor category.
Very cool, thanks for informing us.
Well, some of them are outdated, so that's fine :)
Xcode has been around since the top end machines were far less powerful than any currently shipping Apple computer. The only part of Xcode that requires significant horsepower or screen real estate to run is the Interface Builder component. IB is important, so you'll have to use it, but you're going to be spending the bulk of your time editing text and debugging. I would advise that you get the maximum amount of RAM available.
RAM RAM RAM RAM Get as much as you can!
Any of the MBA's can be customized to 8 GB (during order only, you can't upgrade it yourself). I use a 13" 2011 MBA with 4 GB of RAM (8 wasn't even an option back then), and it works perfectly fine, performance-wise. Even running a Windows VM at the same time doesn't cause any issues. The only complaints I have, like was said before, are IB being a bit cramped, but, even more so, actually running an iPad simulator is a horrible pain in the ass, since you have to scale it down heavily. Performance-wise, any current (and most old) Macs you can buy should be more than enough to handle development for most projects.
I'd suggest at least 8GB. The Airs can be upgraded to 8GB, so they'll probably be fine.
I'll speak to a different issue briefly. Xcode on my mbpr13 works quite well but the screen can get a bit constrained. A couple of weeks ago a buddy recommended an app called ResolutionTab. It's GLORIOUS to be able to switch up to a much higher resolution when working with Storyboards.
LunarChaos's 15" Macbook Pro is quad core (4 x 2.5Ghz), 2xfan and large aluminium heatsink (thick 15" case), 4x the RAM (and faster RAM) - this is why he can do anything. When you are compiling code the CPU heat up and be throttling in under 10 seconds on an fan-less Air; you only get your Airs 2x1.4Ghz power for those 10 seconds. Hence, the MBP machine is 10 (or more) times faster for compiling code. MB Airs are $600 to $800 on eBay, for that cash search on eBay for "Macbook Pro quad core" and you'll see there are plenty around the $800 price point. A no brainer unless you are just intending to write small non-demanding apps. Side note: Interestingly, quad core Macbook Pro's are cheaper than second hand quad core Mac Mini's! Thanks to Apple crippling the new version the old ones go for a premium. 
In you're going to use Xcode, you will compile code. Depending on the size of your projects, you will need all the CPU and RAM you can get. So it depends on your patience and project size. 
Well there's something you don't see every day... A Mac user who types a backslash instead of a forward slash! 
As a Macbook Air owner, I've got to say it's not the RAM that really helps, it's the SSD. The iOS simulator opens significantly faster on my MBA than it does on my iMac (which has like 3x the RAM as the MBA). To OP: a Macbook Air will be absolutely fine for development in Xcode. I use it all the time for specifically that purpose. I'd recommend getting the 13" model, though, as screen real estate is obviously an important consideration. The other benefit of a MBA is that it's never a burden to carry around, runs cool as a cucumber (imagine that: a laptop that you can actually put on your lap), and has amazing battery life. Apple really has struck the perfect balance between power and mobility with the MBA, and it's a fantastic development tool for those requiring mobility as a result.
up until I managed to kill it with a glass of water, a MBA 2011 was my main and only dev machine, with it I was able to do most anything with regards to app and web development. I'd say select a model based on the screen size/resolution and weight you want, and max out the memory, and spend the rest of your budget on storage.
Get a 13" macbook pro retina. Theyre amazing 
I do batch scripting for part time pay. LOL 
that'll do it!
it was made with ios 8 but I later discovered that when i made a new project and added the sks file it crashed so it was like a corrupt file so in the end i re-coded my app in swift
Isn't this against the submission guidelines?
Good point!
Good job guys! You deserve real credit for all your hard work. I love objective-c and I also love Android so I'll check it out.
You're welcome! And we'd be happy to get any feedback, helping us improve CrystaX NDK further.
Thank you. I don't know how it's going typically, but they accepted two patches without any problems.
Too bad this needs either Cocoa or GNUStep, both already coming with a GUI framework, thus there being little incentive to use it. However, something like this for ObjFW &lt;https://webkeks.org/objfw/&gt; or something similar would be fantastic, finally allowing to use ObjC / Swift as a first class citizen for GUI applications on non-Apple platforms.
Well, having a look at it can't hurt. If you are too embarrassed to make it public yet, feel free to share it with me privately on GitHub first (just remove the 3 from my username).
Well, a common shared core code makes sense, I agree on that. However, the subtile differences between Cocoa and GNUstep are enough for that to already require some porting effort. Which is what leaves us with the from scratch approach. However, if you are already writing it from scratch, why use Cocoa / GNUstep and worry about the subtile differences the two have instead of just using something like ObjFW that behaves the same on every platform?
I have it on BitBucket, actually. I assume you're the Midar on there as well?
Yup, I am :).
There you go, access granted.
Well, that's more than I expected :). And it doesn't look bad - I'd open it up for contributions :). Just some nits: Have you considered making use of the delegate pattern, similar to Cocoa? I see that you're using blocks right now, which fits the callback model GTK uses. Also, newFromSomething: is a little weird - how about e.g. fooFromSomething: (where the class is GTKFoo)? I also like that you did it manually and made it "ObjC-y", instead of just creating bindings in an automatic way that creates method names that don't sound nice.
I think it's pretty cool. They should make a simple process for developers to port Mac apps as well. I know they want mobile apps, but they *really* shouldn't ignore the desktop. It seems like there's sort of a renaissance of Mac apps right now. If I could develop an app in AppKit/Cocoa and have an easy way to bring it to Windows, I would. Cocotron doesn't really support ARC right now (though it will in the future). By the way, did Microsoft give any indication if their implementation supports ARC?
&gt; Responsibility for tracking an object type is moved from developer to compiler. This concept is so important, it should be shouted from the rooftops and force-fed to CS students. Compilers are smarter than you. Use them, trust them, learn how to make them happy. Don't just sprinkle !'s around to make your code happy, learn how to reason about your values. The compiler is there to help you. Sure, you're able to write 'less' code when you don't have to think about type or null safety, but it's way less safe because you're responsible for reasoning about its safety. Great post!
Silly isn't the word I'd use, but yeah. 
You could try looking into unity 3d (they have a great 2d library) but iirc for ios it costs money. I used to do work in cocos2d which is a great free (I think open source as well) library for ios game development. Not sure if it's still active but a year or two ago there was a solid community behind it
Ayy
Hey thanks for your help so far! It would be great if you could get me some code samples or a little more details into it. Thanks!
So is there any solution or suggestion? 
"See a need, fill a need." This is basically a truism for any entrepreneurial endeavor. Think of something you would use. Then think if people - let's say 1,000 people over it's lifetime - would find it useful. Then, think if they would pay $0.99 for it. This is the basis for many small market apps that do well. For example, when Google reader went down, a friend of mine really wanted a simple RSS reader with the same functionality (and maybe a few tweaks). So, he made it. And he charged $1.99/month for anyone who wanted to use it - basically enough to cover his server costs and some change in his pocket. He made ~$2000 off it over 6 months. Nothing crazy but he learned some new stuff and made a little money. In my experience (I've launched 7 "brochure-ware" apps and 1 large professional one), ideas can't be borne of "I want to make a million dollars", they come from "I want to make something that I think people want, and will be a benefit." If you are in school for CS or Computer Engineering or whatever your University calls it - there are surely many local resources you can goto for QA work, probably even production code. If not, you can always try your hand at freelance work for local businesses. Local tire shop needs an app for their customers to browse inventory? Boom - that's a quick $1k or so in your pocket. Build a framework that allows you to quickly pump out dinky apps for companies that just want customer engagement. Like running? Make an app that tracks weather for the user and alerts them when it's going to be the coolest part of the day for their run. **TL;DR** Make apps you would use, you think others would use, sell them. They can't all be winners. Otherwise, find some local work programming, people pay absurd amounts of money for even remotely qualified programmers, let alone people who are getting/hold a degree in the field. 
I recommend you validate your idea by telling people (not just friends) about it and getting some feedback. You may find out there's a reason why it won't work as well as you expect which can save you wasted time in building it. But let's assume your idea is amazing and you want to take it from nothing to the point of getting investment. No investor is currently going to be interested in you. You have nothing but an idea in your pocket and anyone can come up with an idea. So you need something more. This can be a lot of things, for instance: A working version of the app, design mockups, a history of success in creating startups, A well rounded team, capital, market research, media coverage. Different investors will be interested in different things of course. It's all about getting what you can with your available resources. Expect this to be a very slow process. It can easily take years before someone is willing to invest during which you'll need to support yourself and probably pay a number of other costs. Also it's very unlikely anyone will invest without ever meeting you so at some point you will need to have the money to fly to the US for investor meetings (which may come to nothing). All this means you're probably better off getting some local investment first to build the first version and then go chasing a larger amount in the US later. (I'm in a similar position right now and it's not much fun really)
The apps that make millions now are backed by VC money. Servers for social media aren't free. You need a business plan and a good pitch to raise money. Sadly its not programmers but marketing types who make the bulk of the money. You can make quite a bit off of long tail apps. If you have a good app and can decently market it, you can make money. Probably not millions but a living. 
Ya, there *can* be a very large difference in speed, depending on how old your iPhone is and how fast your computer is. But generally, the simulator does an amazing job. Of course, multi-touch doesn't work well on the simulator, and forget about anything with the accelerometer. But if you have a simple app, or you just want to check out how your graphics look, the simulator awesome. In 3 years of using it, I have yet to encounter anything that it has done incorrectly. That said, always test your app on actual devices periodically. The simulator is great for quick things, but is not a substitute for real testing. 
If Microsoft open-sourced a human genome patch that made everyone immortal and stopped hangnails, you'd still hear endless bile about it. That's the nature of criticism on the Internet.
Embrace, extend, extinguish. Has anyone else noticed that Microsoft has been on the offensive in *EVERY* area they previously ignored?
Uh.... WHAT? What in the world would make you think and say that? Can you justify your statement?
Really impressed by that XAML to CALayer bridge. Went in thinking it was going to be a cheesy lowest-common-denominator UI library thing. But these guys have really tried to tackle some hard problems. Be interesting to see if they'll do Swift as well, once it's open-sourced. 
https://twitter.com/cjwl/status/629668997810753536 Ruh-roh.
The only place I've heard bile about this is /r/programming
why?
I bet there's going to have some random ass bug here and there. And the bugs in Windows is already pretty bad, and now with a layer of shit on a pile of more shit. guhhhhh
Microsoft open-sources @cjwl's already open source code. After replacing a bunch of headers. I know they're trying to be awesome, but sometimes it seems that the company is staffed entirely by a bunch of dickbags.
Looks great but seems a bit over priced... I've had a metal stencil from UIStencils.com for quite some time now. 
Yeah, I don't think these should cost any more than a pocket-sized moleskine.
With those you should be able to use NSURLCredentialStorage.
Thanks, that also works.
What is it? It says it's "portable, lightweight framework for the Objective-C language". That doesn't tell me anything. It's also different from Cocoa and GNUstep... and non-GUI. And you can run it under old versions of gcc!! Please say what it does, not what it doesn't. After 6 years of development, still hasn't reached 1.0? (I did peruse some of the classes. It seems like a replacement for NS*. But, really, at this point, if I really wanted to avoid it, I'd use GNUstep.)
I always get the feeling it's a big Python circlejerk over there to be honest. 
Python / Node.js / Ruby on Rails anything easy really…
I know this is old, but yeah, just got it. Didn't ask for any password, just my e-mail. It's strange, for a scam website they don't ask for enough info, the site seems clean. I don't know what's up with it
Thats a huge news
Thats a huge news
Big Nerd Ranch books
You'll recognize the concepts at work in objective-c then. As others have mentioned learning the particular syntax of the language you code in isn't the hard part, the work is mostly in learning how the OS is built, what are the classes in the libraries it provides and how to use them, and how to use the tools you use to build and debug programs for it. 
Okay, thanks! Is there a library where I can start learning iOS libraries, classes, how to use them, etc?
I tried those, but damn where they extensive, I mean I already know my fair share of programming languages, but this books are way to disperse to get any usable knowledge within a year or less
Thank you!
I've heard a lot about Smalltalk and I've just started learning Objective-C. Can someone dumb this down a bit for me?
I think we're quite a ways off from a complete Swift takeover. OS X is a big consideration.
lol what swifts been out for a long time
I agree with the content of the article (Objective-C will go the way of Carbon), but I think the message was presented a bit too dramatically e.g. "... death of Objective-C". This can be said with just about any language (maybe not today, or soon, but it will come to pass). This mentality seems to be quite pervasive, that we must speak in absolutes or act vehemently in order to defend our own modes of thinking.
Where did you see where they said it was written in C++?
That's pretty neat. I'm currently taking a class in Prolog, so I suppose I can relate a bit (presently pursuing a BS in CS). I agree that languages don't ever really die, they just collect a bit of dust. For that reason, I choose not to use hyperbole when describing the reduced usage that a language will experience. I really like Objective-C myself, despite how much I also enjoy writing Swift. It's nice to have different tools/options for different projects.
Ah, good call. Can use `c++filt` if you want to see readable names. nm `xcrun -f swift` | grep __Z | grep ' [Tt] ' | c++filt 
:)
[removed]
[removed]
I agree. What's to gain? Swift was designed to speed up making and developing apps. Who said it was the end all be all language that would replace everything? Seems to me both languages can quite easily co-exist and the idea they'd toss out 30 years of C for Swift is hilarious. 
Maybe they should not have released it as a 1.0.
&gt; What kind of pricing are you guys looking at? We haven't decided yet. It's currently free to use and there will definitely be a big free tier. If you're interested in trying it out, signup and pm me your email and I can get you approved right now :)
You can find Developing Apps for iOS (HD) on iTunes. This video course is taught by Paul Hegarty at Stanford and covers foundation and core frameworks for iOS. https://itunes.apple.com/us/itunes-u/developing-apps-for-ios-hd/id395605774?mt=10
I don't have any examples for you, but I'm pretty sure you can use compiler flags to enable ARC on the files that require it. [See Here](http://stackoverflow.com/questions/13392521/how-to-force-xcode-to-use-arc-on-a-specific-file) Then you should be able to use any library you like and just add the compiler flag for the library files under Build Phases -&gt; Compile Sources. Then you will not have to convert the entire project to ARC.
Yeah this is the common thing to do! +1
Do you have an example you've found that uses ARC? Even if you don't want to enable the compiler flag (like another redditor commented), it doesn't take too much effort to convert a project from ARC to non-ARC if you understand how memory management works. Side note: if you project is so old that it isn't using ARC, you may need to look into getting some time allocated to update it to a more modern condition. You aren't doing yourself any favors as a developer by maintaining such a dinosaur of a project. 
There is also [this code](https://gist.github.com/acwright/2707798) for converting from hex codes to RGB values. And this [Swift version](https://github.com/thii/SwiftColors).
If you're designing for an iOS app why not just provide the RGB values? You already seem to know about the tools. 
If you complain about receiving hex you probably have no business working in cs. If you don't understand hex is literally rgb values represented as bytes, 0-255, you should really get out. This is so trivial its stupid
How is this different than [Sip](https://itunes.apple.com/us/app/sip/id507257563?mt=12)?
This wouldn't happen to be the Pebble, would it? Mine has been disconnecting and having problems since I updated to iOS 9.
Thanks for answering. Finally I figured out this problem. This problem happened because I'm using autolayout. I tried to play with autolayout constraint and suddenly it's working as expected.
We use [Sip](http://theolabrothers.com/), gives us UIColor with a simple click.
you should look at xcodebuild, xcrun, and xctool
unless i'm missing something, those focus on building. i'm actually happy to use xcode for building; what i'm interested in is tools for navigating and refactoring code that can integrate with emacs.
as far as i know, there's no well-known tools that do these things. xcrun doesn't just build, but also is able to run the underlying tools that power xcode, so you might find something in there.
it's nice and sweet
NSUserDefaults for the should show value + a popup view I wouldn't waste time searching for something, shouldn't be too hard to implement. 
&gt;NSString *greeting = [NSString stringWithFormat: @"My first name is %@ and my last name is %@", firstName, lastName"]; You could not simply put the variable names in the sentence here. NSString doesn't work that way, you have to use the placeholders. NSLog is a convenience macro that let you just print the variables but if you wanted to mix a literal string in there as above you'd need to use placeholders too. 
Because ObjC likes to ruin your day with annoying syntax. If you wanted to create a fullName variable, you would have to go even further and type NSString *fullName = [NSString stringWithFormat:@"%@ %@", firstName, lastName]; Edit: sheesh people, lighten up. I've been an iOS developer for 7 years, just making a joke. 
If you don't like Objective-C (which is a totally valid opinion to have), why are you in this subreddit?
Pretty interesting article! However, on the topic of adding Optionals to Objective-C, it is important to remember the lessons of Jurassic Park. Just because you CAN do something doesn't mean you SHOULD.
Not a bad idea, but I've never been a fan of that style of chainable methods in Objective-C. Don't fight the syntax, embrace it. :-)
There is nothing Objective-C related in this post. Downvoted. Mods, please remove this post. 
[removed]
Xcode is far from perfect and has a lot of problems. I'd like to support the author's ideas more but the key argument here seems to be a subjective one: the author doesn't like IDEs. There are people that agree and there are people that don't. Flame wars rage eternally on this sort of thing. But the author's valid opinion is undermined by numerous mistakes. The biggest point that the article gets wrong is calling a monolithic user-interface "coupling". The coupling anti-pattern in programming specifically relates to links between modules in the underlying implementation – it has nothing to do with user-interfaces or overall size of a program. In the actual "coupling" sense: Xcode is *not* tightly coupled. It is internally composed of a large number of separate plugins, private frameworks and command-line tools that are each highly modularized. Have a look through the Xcode.app bundle: it's a huge number of separate components. Just because you see these components within a single app, doesn't mean they're tightly coupled. Your operating system is a single "app" that couples all your user apps together, doesn't mean that operating systems are an anti-pattern. In any case, monoliths are *not* generally regarded as a bad idea for workflows. Smoothly integrated workflows are are a pinnacle of certain kinds of UX design. This is why IDEs remain popular even though they take away flexibility in text editor and toolchain. The article unravels by continually saying tenuous or incorrect things: 1. The article complains about "project.pbxproj" having a format that is difficult for humans or shell scripts to edit. Okay, sure, but it's just a PLIST file and it's pretty easy to parse and edit in Objective-C once you load it into an NSDictionary. Author may just be using the wrong tool for the job. I've rewritten Objective-C translators between pbxproj and vcxproj/makefiles and it's very easy (unless you're trying to go from makefile back to anything else – because makefiles are truly terrible). 2. Don't like Xcode's version control? Don't use it. I'm not sure why unused features are an issue for the author. The presence of version control in Xcode encourages novice programmers to learn what version control is, which is a good thing. I don't personally use Xcode for version control but I like that it tags files in the file tree with commit status. 2. The following comment "We even consider it as anti-pattern if one uses different structures for groups/files and folders/files" is akin to "If you're different to me, I don't like you". Groups solve a number of problems. If you don't care, don't use them (they're optional); but don't assume they have no purpose. The reason I use them is this: I build code from libavcodec in ffmpeg which has 837 .c and .cpp files in a single folder (ffmpeg's organization, not mine). Soft groups make this manageable (e.g. grouping the 10-15 h264 files together so you can find them easily instead of scrolling through a giant list every time). 3. "Apple account management... We don’t see what’s the rational behind having one huge app doing all that". I wonder if the author missed the Xcode 4 days when trying to sign iOS apps. Xcode would repeatedly refuse to sign apps because conditions weren't met but couldn't fix the problems or even give a decent explanation of the problem. After adding account management, Xcode can resolve signing issues semi-automatically and when it can't, it can give better diagnostics. Take that away and build fail and all you can do is shout and get mad. Given the importance of App Store submissions, this is an important feature. 4. The comment "We don’t need Xibs in our binaries and there is no need in overhead of loading them via Runtime" contains a massive mistake: compiled nibs are usually *faster* to load than Objective-C code that does the same thing because they take up less space than the code required to create them (efficient serializations are smaller than uncompressed code). Also, Nib loading is deferred until needed (they aren't loaded on startup like the code is) and they can be unloaded from memory (unloading Objective-C is very difficult and almost never done) and they can be localized (localizing strings is easy in code but localizing layout is a nightmare). And yes, you *do* have access to the same format compiled Nibs use. Just serialize a view hierarchy in memory to file with encodeWithCoder: 5. "switching between code- and xib- files literally can take 10+ seconds". My dev machine is a 4x2.67Ghz 2009 Mac Pro (not super fast) and I don't think I've seen this. In any case, Interface Builder performance was *terrible* when starting Interface Builder from Xcode 3 because Interface Builder regularly blocked on cross process communication from Xcode. Xcode and Interface Builder have a *lot* of information to exchange (about classes and exposed IBOutlets) and separating them into separate programs doesn't magically solve poor performance. 
Disclaimer: I'm the author of the post, I post it because it would be great to hear if someone is working in something related. The tesseract training process was complicated, and I really want to know if there are some alternatives
You're probably adding the button a subview of the table view. That makes it part of a scroll view and it will move up and down as you scroll. You need to make the button a sibling of the tableview. That is, add it as a subview of the tableview's superview. However, in a stock tableview controller, the tableview is the root view, so you would have to use a vanilla UIViewController and add two views to its view: the tableview and the button.
So basically I will need to add UITableView in UIViewController to make floating button working properly right.
Instead of self.activityTableView addSubview... try self.view addSubview...
Head to Codementor: https://www.codementor.io
No. 
I understand, thank you!
It called a "Touch Down" event that did nothing that would have caused any problems. There was nothing on the "Touch Up Inside" event so I really don't see what the problem could be. I took the events off apart from the action that would bring me to my next scene and the problem still occurs.
Check the bindings tab and see if you have multiple bindings for something. 
Ideally you want to hook up button actions to the touch up inside event. That being said, can you confirm that the action being called on the touch down event actually exists in your code? The signature of the method should match the method in your code exactly. If possible, post screenshots of the button actions menu from your storyboard, and the actual method in your code. Your issue sounds like an easy fix but I would need to see screenshots or something to get more information.
It makes sense when you look at the likely the biggest market for Obj-C (Apple devs) and the introduction of Swift as the replacement. And indeed, if you look at Swift's results we can see they are much higher than VB or Obj-C.
Inkscape?
Great spot thanks :) Just added: https://github.com/ryanbrodie/IsContentBlockerEnabled/blob/master/testPage.html
Thanks for your reply. More articles will be added on weekly basis and the will try to keep them as simple as possible :) will be working to make it better. Thanks for your feedback :)
The good thing about this spam is it shows you which subreddits have inactive mods
Objective-C apps are on death row? Please. There's still full support for Obj-C and Swift is a long ways away from being ready for full on prime time. Swift is cool, but there is absolutely zero reason to rush and convert tested, trusted, working objective-c code over.
Yeah, Swift's debugging tools was enough for me to say 'NO' to Swift. There's still a lot of work to be done. I'll stick with Objective-C for now.
direct link: http://codevoyagers.com/2016/02/09/transitioning-from-objective-c-to-swift-in-4-steps-without-rewriting-the-existing-code/ 
Going to go back and refresh my objc. Can't handle the swift Lang volatility for now. 
Did you just submit a link to a tweet that is a reply to a tweet that contains a blind link to the article?
Spammers looking for that microscopic overlap of people maintaining large objc code bases and a bit of air con on the side :)
At least it's not sex spam.. I guess.
Does it run? That's the easiest way to tell if it's correct. Coding is empirical and ONLY seeing the code run tells you the answer to this. There are no cheats or shortcuts. If you don't know now how linked lists work, you will probably have trouble in the interview. Google and learn now. Decide if it's correct yourself and at the same time you'll know what's needed for the interview. It doesn't take more than 10 minutes to cut-and-paste and try the code!
Yeah, he's using on objective-c protocol like a Java interface, which isn't right. In objective-c the equivalent would be the public interface declared in the header. What he is really looking for is a class cluster.
you should checkout codementor.io, a lot of people on there are awesome and chat with you for free
Count with me! 
me too. been learning obj c on the side for a couple years (like very on the side) and switched to swift about 6 months ago. got a couple apps in the works but really don't wanna put anything out until I'm really happy with them. count me in.
You should possibly go with Swift. I have had to make the shift, only people using objective-C now are supporting legacy apps. I have been dealing with lots of people shifting o-c to swift and just plain out Swift shops. 
You don't need to rewrite your app in swift but you can set up bridging and at least write all new code in swift.
Swift has some niceties, but honestly, you shouldn't feel pressured to switch if your team doesn't want to. Apple's still going to support Objective-C for a fairly long time (most of the Cocoa/Cocoa Touch frameworks are written in it, after all). You might have to transition eventually but it probably won't be for a while, and there are still plenty of talented Objective-C developers out there.
You should be comfortable with Objective-C so that you can maintain legacy code or update an old app to swift by converting the old objective-c app. 
Hey /u/jjjeeerrr111, to my knowledge the iOS team do want to assess both basics and real world iOS problems. Why don't you pop your resume over via our website (https://www.handy.com/careers/73117?gh_jid=73117&amp;gh_src=asc67y), and you can discuss the interview process with the hiring manager in your initial phone call.
Yeah, I've heard of him. I obviously won't post his surname.
hang on a minute, you name reads familiar … are you Remy Porter from http://www.thedailywtf.com ?
Objective-C is extremely wordy. Named function parameters for example. 
This is one of the best things about Objective-C. I much prefer coding something like this: UIColor *color1 = [UIColor colorWithRed:1 green:1 blue:1 alpha:1]; UIColor *color2 = [UIColor colorWithHue:.5 saturation:1 brightness:.5 alpha:1]; And knowing what I'm getting opposed to this: color1 = color(1,1,1,1); color2 = color(.5,1,.5,1); And having no clue as to which one of those is RGBA and which is HSVA? I know this is a contrived example, but it shows that named parameters offer clarity where languages that just rely on position don't. 
Because they couldn't bother to understand its beauty.
I love Objective C too. A lot. It's my favourite language to work in. Particularly Objective-C++ because it's so powerful. There are things I would change, such as getting rid of square brackets and adding namespacing and real actual private methods. There are also things that I feel so fortunate to have in it, such as easy access to C and C++ functions and libraries, and most of all message passing (which I don't think Swift does) which imo is the greatest gift in the battle against the NULL Devil. If Objective-C could clean up its syntax a little bit it would be unstoppable. 
Indeed. This is the self-documenting feature that is nice. I've coded in literally dozens of languages and this has a major advantage. 
&gt; actual private methods That's my favorite thing about it! Taking away the dynamism of Objc would make it ugly C++. 
I think this is a big reason, too. A lot of iOS devs grew up on Ruby or Python (or maybe Java and C++) and don't really grok Objective-C that well. It's a shame, because I'd *love* to have a job writing Objective-C code.
One and the same. [Keybase proof](https://keybase.io/remyporter).
I think Objective-C has too many similar data types. `CGFloat`, `double`, `NSInteger`, `NSUInteger`, `long` and `unsigned long` confused me when I met this language for the first time. I love Objective-C except that.
In my opinion that does little to take away the dynamism of ObjC. If I honestly want to hide methods from you I could just give them names like agjkdhgskasShowTemplate and precompile my .m files. Am I taking away from the dynamism from Objective-C or am I just making sure you're not calling a method you're not supposed to?
You're just describing what would have to be done in order to accomplish the task. There's nothing useless about restricting access to certain methods.
I agree 100%. Named parameters and wordiness may take a bit longer to write, but they are *much* easier to read. It's possible to design nice self-documenting APIs in Swift: ``` color1 = UIColor(red: 1, green: 1, blue: 1, alpha: 1) ``` Sadly, the new [Swift 3 translation feature](https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md) removes even more words.
Yeah, I was happy with the Swift 1.0 announcement when they talked about named parameters, but now it seems like they are racing to the smallest amount of text possible, and loosing all clarity in the process. I'm all for clean code, but it seems like people have forgotten that we read way more code than we write, and if it takes us an extra minute or 2 to understand the "clean" code we wrote 2 months ago, is it really worth it. I'd rather my code read like a Dick 'N Jane book than Shakespeare.
Methods are not "truly private" *because of* Objc's dynamic runtime. You'll have to be more specific on your idea of "private", then… because to me, obfuscating the method name doesn't make it any more private. Anyone can launch your app and inspect a class at runtime to see every method and instance variable. The only reason this isn't possible in other languages is because other languages don't keep that information around at runtime.
It's possible in other languages, it's just a pain to do. Nothing stops you from setting up registers according to the [ABI](https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/LowLevelABI/000-Introduction/introduction.html) and jumping to a location in memory. The challenge is *finding* the location in memory (since, as you mention, it's often removed during compilation).
Well, yes, but to make it that difficult to do, Apple would have to implement obfuscation (which breaks KVC, but that's the idea behind truly private methods and variables) or trash the runtime completely ;P
I love Objective-C, having gone there from Delphi (Object Pascal). I've only recently taken up Ruby, mostly because of how much it _reminds_ me of Objective-C. Yeah, sure, the syntax is different, but syntax is just syntax. 
I like ObjC over swift currently just because it's what I know. I've been developing with it since 2011. I recognize swift is faster and safer. Especially controlling null pointer exceptions using optionals. which is huge. Null pointer crashes are the #1 crash (if I were to guess). Im trying to force myself to use it when I can, but I still have a large Objc project I still have to work with.
You hit a number of my gripes Messaging feels different than other languages and when you are trying to pick up yet another language different for the sake of being different isn't a feature. Stringbyappendingstring is just nonsense NSMutablestring. Mutable means you can change it, that is annoyingly different than everyone else. If I have a string and I want it to be a constant.... Const NSanything . We get it you have objects in your language. Java and c# do too but the don't need to prefix them with NS (side note is NS the original developers initials?) You say verbose is a feature but from my view being more verbose only sounds like a feature until you have a single statement that spans 4 or more editor lines because of the verbosity then your color command is interfering with readability . Colors are rgb in that order and intellisense will help you if you aren't sure Speaking of intellisense, if you don't know what parameters and methods an object has, you are going to be there a while. Enforced mvvm . Most languages want you to use a good design pattern and that is awesome for big projects but your first hello world app it would be nice to pop the screen designer open and code a touch event directly just to get an experienced dev up and running in an hour. I get that the reason my iPhone app and iPad app are so easy to keep in sync is because the UI is separated from the actual code and that is a feature but it makes the runway longer to get the reward (something is working!) for your first app. I have been professionally coding for 20 years and have taught myself a number of different languages and objective c is the first time I ever thought I was getting too old to learn a new language. Eventually i threw in towel and took up xamarin . Long live c#! 
There's a very good reason for these however. #if __LP64__ || (TARGET_OS_EMBEDDED &amp;&amp; !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64 typedef long NSInteger; typedef unsigned long NSUInteger; #else typedef int NSInteger; typedef unsigned int NSUInteger; #endif Those types are to help keep the foundation types consistent across platforms, whereas the width of int can vary platform to platform. Ask any iOS developer who had to change all their ints to NSInteger when the 64 bit switch happened about it. 
1. The syntax looks weird, unless you're one of the few people familiar with SmallTalk. It's the same reason Lisp gets so much hate from people who have never tried it. 2. It's made by Apple and restricted to Apple devices. Plenty of people jump on the "only clueless hipsters buy Macs" bandwagon. 3. The language is dying. It's old, and being _very_ quickly replaced by Swift. And I say this as someone who has done ObjC professionally for something like 7 years. It's crazy how fast Swift has taken over. Nobody wants to be working entirely in language that will be obsolete soon. Then there are the usual complaints about every language. Type system weenies say the type system isn't strict enough. Dynamic language weenies say the type system is too verbose and gets in the way. C weenies say it's needlessly slow. etc.
Thanks for the thoughtful reply, especially because I was feeling a little snippy when I wrote my post. Maybe my objections partially stem from the feeling that that parts of the language feel stuck in the past and I have no desire to go back to the eighties code wise 
Honestly, it's ugly as sin. Turned me off so I didn't bother to learn it.
&gt; Ask any iOS developer who had to change all their ints to NSInteger when the 64 bit switch happened about it. fuck my life
Eh, it's pretty easy to avoid checking for null in Swift, too; you can just use the force unwrap operator. If it were *really* safe, it wouldn't offer a way to do that at all (but it practically has to, to maintain compatibility with C/Objective-C). Its pattern matching is okay, but not nearly as powerful as in a language like Haskell or Erlang.
Yeah, it might be easiest to learn it by converting an an established project over to swift. I'm pretty comfortable with Obj-C so I think I'll get the project done that way. Lots more code examples, too.
I'm not sure about anyone else, but swift was way easier for me to pick up and actually get to the level where I can go deeper into the programming whereas with Obj-C I spent months on surface stuff and having to remember to do this and that and more this. In fact, the reason I'm here is to find resources to start using Obj-C because it's useful to get the history, but I'm hitting the same roadblocks as before. Don't get me wrong, when you do get it it is very beautiful and self-documentation is important, but Swift is just easier. Ninja Edit: And Swift isn't easier at the expense of power, it's easier and just as powerful if not more.
what roadblocks? just curious...
BTW--I read on SO that there originally wasn't an NS prefix... and also (less sure about this) that NS was added when NextStep was made cross platform.
Strangely enough my experience was quite the opposite. I got into iOS development two years ago via Swift but had a difficult time wrapping my mind around it. Then I decided to pick up the Big Nerd Ranch books and learn Objective C. Something clicked and I found myself releasing 4 iOS apps written in pure Objective C w/ a sprinkle of Swift in my latest app. I am trying to get my head around Swift again though for job relevancy. 
&gt; in obj-c though, messaging a nil object is "safe". Indeed, it's like calling a function that does nothing and returns `0`/`nil`. Now imagine if that object was really supposed to be there, isn't there, and all of the sudden you have complete nonsense you have to decode. Each has their place. In fact, you can emulate the `message nil` by using `?`: var anOptional : String? = nil anOptional?.append("Actual string") 
Well, this was more compatibility with new and old versions of Xcode and/or older SDKs. For instance, it wasn't uncommon to have the following code: #ifndef MAC_OS_X_VERSION_10_5 #if __LP64__ typedef long NSInteger; typedef unsigned long NSUInteger; #else typedef int NSInteger; typedef unsigned int NSUInteger; #endif #endif 
Interesting. That makes more sense now. 
== compares the pointer of the object - if it happens to be precisely the same object it will be equal. isEqual will perform a comparison of the object contents based on what is implemented in the Foundation compare: method. For Apple provided classes this usually does "the right thing" in terms of comparisons. If you implement your own classes it depends on how you override this method. http://stackoverflow.com/questions/18381035/objective-c-compareto
I feel like the explanations provided so far are rather confusing. The simplest answer I think is to understand that Objective-C as a superset of C supports both primitive types (or value types) (int, char, float, CGFloat, NSInteger etc) and objects (NSObject, NSString, NSNumber, etc). Objects are always reference types (i.e. operated using the * pointer notation) but not all reference types are objects. Primitive types can be directly operated on with arithmetic and equality operators, so you can compare them using '=='. Objects require you to call the 'isEqual:' method to compare equality. If you directly compare objects using '==' you are not comparing the objects themselves but rather the value of the pointers (or references) to the object. Most of the time you don't want to do this, but there may be some cases where you want to check if an object is the same object as the some object object, as opposed to simply being the same value. Example: NSString *string1 = @"Fred"; NSString *string2 = @"Fred'; [string1 isEqual:string]; // Returns TRUE string1 == string2; // Returns FALSE, these are different objects NSString *string3 = @"Fred"; NSString *string4 = @"Jones"; string4 = string3; // string4 now points to same object as string3, @"Jones" is floating in space without a reference to it string3 == string4; // TRUE NSLog("%@", string4); // Prints "Fred"
Sure! I agree that it compares primitive types, but is only going to be true for string pointers if they are pointing to the same object. There is no such operator overriding in Obj-C, like in C++, for example.
well it looks like this sub is officially dead now.
What I like about Objective C is that I do not need to convert floats to doubles or Ints I can use operators on them seamlessly. I originally started out with Objective C and for me it was hard as I was starting out into programming. I am sure some of you would agree that Objective C is not beginner friendly when you are just starting out into development. I did not understand the bracket syntax and found it frustrating writing enums, where as in Swift I found it easy. I can very easily port Objective C code to Swift now so that is some progress and I am sure given some time I could probably learn Objective C, now that I know Swift. Swift is known to be faster than Objective C and I have even come across a situation where Objective C was using more memory as opposed to Swift. The main reason that I prefer Swift over Objective C is that it is easier for me to grasp it and build upon it. Objective C is not open source and Swift is, which means that there will be more uses for Swift in the future (hopefully Android and backend Development). 