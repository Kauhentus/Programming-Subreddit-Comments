It should work fine, I've done it before: #foo.h #import &lt;Cocoa/Cocoa.h&gt; @class Bar; @interface Foo : NSObject { } - (Bar *) makeBar; @end #bar.h #import &lt;Cocoa/Cocoa.h&gt; @class Foo; @interface Bar : NSObject { } - (Foo *) makeFoo; @end Notice that both headers do not include the other one. Now, in order to use the class, one would need to import both headers in the source file (including the implementation files for `Foo` and `Bar`). #foo.m #import &lt;foo.h&gt; #import &lt;bar.h&gt; @implementation Foo - (Bar *) makeBar { return [[[Bar alloc] init] autorelease]; } @end And so on.
Is it generally considered poor taste? I don't know what's worse, my code not working, or that I played around with it, fixed it, and have no idea why it IS working now :D
Yeah, class-coupling is generally discouraged. Are they coupled because they need to directly manipulate each other? Sometimes class-coupling can be reduced by using protocols, for example: 1. Class `Foo` just needs to use an object that conforms to a protocol called `DoesStuff`. Generally, this protocol is declared in an independent header that is included in both `foo.h` and `bar.h`. 2. Class `Bar` implements the protocol `DoesStuff` by using `@interface Bar : NSObject &lt;DoesStuff&gt;`. This basically means that the class called `Bar` promises to implement all the methods found in the protocol `DoesStuff`. 3. Class Foo only then requires objects that conform to the `DoesStuff` protocol, rather than explicit types of classes, i.e. Bar.
It's mostly because it makes sense in this situation, with the way the data is encapsulated. Foo has instance variables that Bar would like to look at sometimes, and vice versa.
Yeah, in some situations I've found it is easier to think about if they just reference each other. It's like the occasional `goto` every now and then. It has its use, but it is generally discouraged.
mattfromseattle: Thank you for submitting this, xcode-auto-assistant just made my morning. 
Good post. One way to remind yourself that a pointer is strong or weak is to use property annotations, which is the only language feature I'm aware of that explicitly expresses the distinction: @property(nonatomic,retain) id aStrongPtr; @property(nonatomic,assign) id aWeakPtr; I often make properties for any member variables that are pointers to reference counted object, so that I have to think about whether or not that needs to be a strong pointer, and invoke the property setter to assign to the variable instead of assign to it directly: self.aStrongPtr = someObj; self.aWeakPtr = someOtherObj; That way, I never forget to retain or release the object when it's a strong pointer, and I never retain or release the object at all when it's a weak pointer. In your `dealloc` function, you can call all your setters with nil to make sure strong pointers are released, without having to remember which pointers are strong and which are weak.
Under the covers, Objective-C classes are really just C structs. The way inheritance works in Objective-C, subclasses are a super set of all of the fields of their parent class. Without knowing these fields, subclasses would be unable to provide the correct memory layout for their members.
I am new to Objective-C and C, but it seems that you can declare members in an implementing class without any problems. For example: @interface Counter : NSObject { } -(int) countHits; @end @implementation Counter int myCountVar = 0; -(int) countHits { myCountVar++; return myCountVar; } @end 
But then `myCountVar` is not an instance variable. I'll try to explain jonhohle's point with an example. If I wanted to subclass `NSIndexPath` (let's say to make the access methods not retarded), if the instance variables weren't in the interface, I would not be able to access them in my subclass.
The most unavoidable reason is inheritance. If you create a subclass, that subclass's implementation needs to know the in-memory layout of the complete object so that it knows where to find its own instance variables, because the offsets of those instance variables (relative to the object's `self` pointer) need to be known at compile time. One solution, to give a bit more flexibility, reduce compile time, and hide the implementation details even from subclasses, is to use an [opaque pointer](http://en.wikipedia.org/wiki/Opaque_pointer): @interface SomeClass : NSObject { id _impl; } Here, `_impl` will point to an instance of some private implementation class that's not exposed through a header file. The trade-off is that every message needs to be forwarded to `_impl`, which can have an impact on performance. An example of this is `UIWebView`, which declares a single instance variable: `UIWebViewInternal* _internal`
I see. I did not notice that at first. This sounds like a limitation in the language (C/Objective-C) instead of a design decision (one should always declare instance members in the interface and expose them to subclasses). I am a Java programmer by trade. From my point of view, there are things about Objective-C that obviously good (@synthesize for reducing boilerplate code), but the reason for defining instance variables in the interface is not obvious to me. I was just wondering if it was a language design that has subtle practical advantages, or just the way it is. 
That's an interesting way to see the implementation details of the super class. Thanks.
Java has the same issue, but it looks at the superclass's compiled .class file to determine layout, since there's no Java equivalent of a header file.
It's closely related to the lack of real private methods/variables. If you go back to the design principles of Obj-C, one of the main concerns was maintenance of existing code bases. Because a developer may not have access to the source when developing an extension, Obj-C provides a lot of ways to extend objects that are normally opaque, even going so far as to completely replace them (`poseAsClass:` is a way to have a subclass completely replace all instances of a super class. It's deprecated in Obj-C 2.0, but it's there). For a little extra reading, the '[hidden features](http://stackoverflow.com/questions/211616/hidden-features-of-objective-c)' listed there mostly allow you to modify existing code easily.
It should be noted that you shouldn't use underscores as a prefix for your member or method names. That convention is reserved by Apple (http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.pdf).
Are you storing colors in seriesList? Is anything else setting this member (either directly or through setSeriesList:)? Are you retaining this property correctly? If you are not expecting an array of CGColors, it could be that your pointer is no longer valid and you just happen to be getting another object. The retainCount of a property should be at least 1 at all times (including any pending autoreleases). You may want to use [NSZombieEnabled](http://www.cocoadev.com/index.pl?NSZombieEnabled) to make sure you're not over releasing this object.
I think you need to be clearer about what you expected (i.e., what happens in `cellForRowAtIndexPath:`. What I see there is an array containing a single `CGColorRef`, which happens to be the colour white.
It's containing a CGColor. If you're not storing this in it, the only bet left is that it's a dangling pointer. The memory was released by someone else, freed and reallocated to a CGColor used by someone else. Best thing to do is to use [NSZombieEnabled](http://cocoadev.com/index.pl?NSZombieEnabled) and use the static analyzer and Instrument to find where the object is freed while it should not. Don't use NSZombieEnabled while looking for leaks though.
No, I'm storing strings. Nothing to do with colors at all. (This is all in a view controller that's loaded by a navigation controller, if that makes any difference.) I'll give NSZombieEnabled a try, but I'm pretty sure I'm not over-releasing it. The only release statement is in viewDidUnload. The init statement, similarly, is in viewWillAppear.
I can't do anything in cellForRowAtIndexPath, since the expected data is nonexistant. The array *should* consist of at least one dictionary full of NSStrings. I have no idea where this color stuff is coming from.
I am not storing anything remotely related to colors, so you're probably right about it being released somewhere else. The weird thing is, there is only one release statement...and it's in viewDidUnload. It's set up as a property, (nonatomic, retain) and synthesized. I set it up in viewWillAppear with this: self.seriesList = [[NSMutableArray alloc] init]; I can't think of a reason for it to be released prematurely. I guess I'll have to give Instruments a try.
Implement your own NSMutableArray (say MyDebugMutableArray), add a method named dealloc. Add a breakpoint in it. Alloc this new class instead. Run and watch where you break. That's something I've used sometimes. I think maybe your release is called twice, not sure why. Without more context, I can't help you further. Also, maybe it's what's inside the array that's released.
As written, this code is actually over-retaining, if anything: -viewWillAppear * alloc (retainCount == 1) * self.seriesList= (aka -setSeriesList:) (retainCount == 2) 
NSZombieEnabled will catch the case where the content of the array is being over released as well. There is no need to create a throw away class to debug memory management problems.
If you're using an SQLite store, theres an [option](http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/Articles/cdTroubleshooting.html#//apple_ref/doc/uid/TP40002320-SW21) that will log each SQL statement. This can sometimes at least tell you where the error is. Does the error also show up in 4.2?
I am a Java developer by trade. I didn't realize it at the time, but I was looking for the "protocol" concept in Objective-C. Protocols are more similar to how Java make use of interfaces. 1. A protocol does not specify instance variables, it only specifies methods. 2. The object you design (or "a class", for a lack of a better term) can implement multiple protocols. Of course an Objective-C "protocol" is not the same as a Java "interface" either, for example, some protocol methods can be optional. Even though both Java and Objective-C use the term "interface" and they are similar in some respects, they are actually quite different. You learn something new everyday!
Well, I can help you use that tutorial. The step you're on can be done by Creating the subclass manually and creating the IBOutlets/IBActions yourself. To connect it in IB, drag an Object type to the main IB window (the one containing stuff like Window and View). Then go to properties and change it to what you called your object. I may be a bit rusty on this, as I haven't used IB lately.
It may "make sense" in this situation but accessing instance variables directly is definitely frowned upon. My advice would be to declare some properties on these objects and to use them to access these variables. It should solve your problem and your objects won't end up being so fragile (always a good thing right?).
Jeff LaMarche (http://iphonedevelopment.blogspot.com), co-author of Beginning iPhone Development, has posted many chapters from his OpenGL ES 2.0 book. Might be a worthwhile read. Also check out the Stanford iTunes U course: http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=384233225 Good luck. 
Yup.
WWDC is itself in San Francisco (Moscone Center), so I'd suggest getting an hotel there (or as close you can), or maybe in Oakland if you can manage the BART (personally I hate commute when going to a conference, but that's me). You probably won't see any of Cupertino during your stay.
A few months ago someone had said it was in Cupertino and that just stuck. Thanks for clarifying. 
When I went about 6 years ago, I stayed in a hotel that was 3 blocks away. I didn't see much of the hotel. It was a pretty intense time. Lots of sessions. The WWDC sessions and labs very inspiring and productive. I didn't do much socializing (which I regret). I'm kind of standoffish unfortunately. Even then, it was pretty late when I would make it back to my hotel each night. Just in time to collapse and sleep for the next day. I know very little about the SF or the best hotels. It was expensive for the conference, hotel, and travel which is why I haven't done it again. The videos they post online are okay, but they don't compare to the ability to get the questions that YOU want answered at the time. I'd love to do it again, but maybe when the money is a bit better.
Or just use code snippets in Xcode.
Agreed. This looks like an overcomplicated way to solve a problem that doesn't exist.
I have to judge in favor of Objc here. Matlab can and should use something else, like .matlab.
Does anyone use *.objc for Objective-C code?
No.
Nautilus marks some of my matlab files as objective-c, so I've known for a while that objective-c uses .m, but I've always wondered why. Method, maybe? Why do you give precedence to objective-c? According to wikipedia, matlab seems to have been around longer.
I suspect it may be a play on words, short for "implementation", but I wasn't around in the next days, so I'll defer to those who were. As for which one should have the shorter filename extension, I'll ask which one is more often typed on the command line or in scripts.
The `.m` in ObjC stands for messages, since Objective-C and its predecessor Smalltalk use a message-passing OO system. http://en.wikipedia.org/wiki/Objective_c#Implementation
Why?
I don't use Matlab, but do people generally operate on Matlab files by typing their filenames on a command line, or by some GUI? In general, source code files tend to use the shortest extension possible, and I can't see any reason that .m should be the exception.
Matlab source files are source files and I operate on them using a command line. I don’t follow; what are you saying?
I was unaware that Matlab files are source code- again, I'm not a Matlab user. It sounds like this has been the situation for some time, and didn't cause any problems until OP decided to flatten his folder hierarchy.
I causes problems for things like syntax highlighters online, etc pp.
Then that's a different problem than what OP describes, and is unlikely to be fixable by anyone here. I'd ask the creators of Matlab(or the maintainers of ObjC) what your options are.
[Here](http://www.lmgtfy.com/?q=multithreading+in+Objective-C).
oh wow didn't think of that! Gee thanks!!!1!1!1!!1!!one111!!!11!!1! seriously dude? If that were the answer for every question posted on reddit, reddit would be a very unhelpful place.
But seriously, did that help?
Not particularly. I was trying to see if it was anything like java, and this just showed me several ways to use grand central dispatch to set up queues or something. I know i've seen something that was very similar to the java method of "create object, spawn thread from it", but i couldn't seem to find it with a google search. Although, i did just do a Stackoverflow.com search and found NSThread. Works just how i wanted.
Not similar to java. Assming you are doing Mac OS or iOS development; look into GrandCentralDispatch or NSOperation and NSOperationQueue.
[Grand Central Dispatch](http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html)
That's unfortunate- NSThread is not best way to go. Queues are the way to go, either via NSOperation and NSOperationQueue if possible, or raw blocks and libdispatch if the NSOp overhead is measurable. In this way, we stop worrying about threads per se, and instead concentrate on units of work executing on queues, either sequentially or concurrently. There's a main queue that corresponds to the classic main thread concept, so all drawing and user input goes there. And you can create your own private serial queues that will use nonmain threads under the hood, or use the global concurrent queue, and the OS is free to manage a system-wide thread pool to balance the workload of all running apps. Thread safety is still a concern, but in my experience it's much easier to reason about when using queues rather than creating and managing threads.
Preferably Grand Central. That thing is a joy to use. EDIT: Apparently I don't know NSOp well enough. I should give it another look before preaching GSD too hard.
I agree. Grand Central Dispatch is the way to go.
You want to listen to this guy. NSThread is an older technology. Old versions of NSOperationQueue (pre 10.6 and 4.0) use NSThread internally and newer versions of NSOperationQueue use GCD. GCD intelligently allocates an appropriate number of threads for the number of tasks that are being performed (re-using threads as they become free, etc.) and will very likely have better performance.
NSOp stuff is preferable if you're in ObjC already, and your operations' running time is measured in anything above microseconds. You won't notice the overhead, and you'll get even more goodness than GCD can provide, like cancellation and dependencies for starters. Edit: spelling.
that's funny. I prefer NSOperation.
NSOperation and its subclasses (NSInvocationOperation, NSBlockOperation, your own) are my preferred way. It makes it easy to set up queues of tasks (with NSOperationQueue), and has dependencies that are automatically resolved, even between queues. The class reference is pretty dense, so read it closely in addition to the main [Concurrency Guide](http://developer.apple.com/library/mac/#documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091). You mentioned in another post that you're going to try using NSThread. If you're thinking of going above more than one thread, it's easier to just use an operation, and you get a thread pool for free. Of course, in addition to GCD, NSOperation and NSThread, there's always pthread. I did have to drop into pthread recently for a r/w lock, so knowing that it's there is nice.
Generally, pitch shifting starts with a delay line whose delay time is constantly changing- increasing for lower, decreasing for higher pitch. Then, since we can't do infinite time changes, you have to reset the delay time every so often and start the delay time changing again. The higher quality pitch shifters usually are the ones that can mask the restting of the delay time the best, as it's an audible glitch otherwise.
I'm not sure what the scope of your question is. Pitch shifting in general is done on the frequency domain. This means that you'll need a fast Fourier transform (FFT) and it's inverse. Basically you buffer some of the audio samples, do an FFT, shift the frequency, do an IFFT to get a waveform back. There are many audio API's in iOS, the problem you might find is that getting the audio from the file in PCM can be a bit tricky.
http://tinyurl.com/3cqxatt pretty informative
Wow you know it's amazing that i've never thought of that. especially when i write this in the question "I've searched and searched on google with no clear answers" seriously i hate answers like these. i ask on reddit or stackoverflow because i'm having a hard time figuring it out on google, not because i'm a lazy SoB.
sad story :(
For pitch shifting on mac, it is very easy with CoreAudio. If you are familiar with AUGraph what you need is create a AUGraph with the following nodes: • Your input • Apple Varispeed Core Audio Unit • Your output Unfortunately I don't have any code snippets available, however you can probably just take any sample code apple has with AUGraph and put a varispeed AU in between the input and output. On iOS it is a bit trickier, the Varispeed AU does not exist until iOS 5. So how I went about it (please note this is not the best or even a good way to do it) was to alter the sample rate of the audio going into the output. Say I wanted it to sound 2* higher I would half the sample rate. 44100 becomes 22050.
NSThread is a lose. It is heavier weight than using GCD or NSOQ, for starters. Worse, threads push all of the concurrency dependency management into your code. Queues give a natural primitive via which data isolation -- critical to successful concurrency programming -- can be expressed. 
Sometimes one little mistake can cause a ton of errors. So, going with the obvious here, have you checked your code for a stray '@' ?
[Here](https://github.com/mcandre/scriptedmain/tree/master/objc)'s my code.
[Here](https://github.com/mcandre/scriptedmain/tree/master/objc)'s my code.
Is there a specific reason you're inheriting from `Object` and not `NSObject`? As to your problem, you do not need to compile header files (well, when they're done properly). Your compilation command should be gcc -o scriptedmain -lobjc -framework foundation scriptedmain.m The contents of the header are already prepended to your implementation file by the `#import` statement.
I have no preference for Object over NSObject. I have trouble compiling against either when I try to subclass Object/NSObject and import the relevant library.
Did not explicitly importing the header fix your problem?
Nah. Maybe fork my code and commit a version that does work?
Sorry, that should have said compiling, not importing. Your code works exactly as you wrote it for me, with the exception of your compilation command in gcc. Instead of gcc -o scriptedmain -lobjc -framework foundation scriptedmain.m scriptedmain.h (which throws the 'stray @' errors for me as well), I use gcc -o scriptedmain -lobjc -framework foundation scriptedmain.m That works fine for me with the only OS X box I have access to right now (GCC 4.0.1 on PPC, so older, but eh).
Thanks, that fixed it.
I think the correct signature would be: + (id) genArray: (id (^)()) gen { ... }
Thanks! Now I'm wondering how to pass NSArrays of blocks. Do you know what the syntax of that would be?
You have to be careful about adding blocks to containers because blocks are typically created on the stack, so they must be copied first (which puts them on the heap): id (^genTest)() = [^{ return @"test"; } copy]; NSArray *myArray = [NSArray arrayWithObjects:genTest, nil]; [genTest release]; // balance out the copy Then, to pull them out of the array and execute them: id (^someGenerator)() = [myArray objectAtIndex:0]; // a cast might be needed here to mask a warning id someObj = someGenerator(); NSLog(@"%@", someObj);
Thanks. Does Objective C have a way to apply a list of arguments to a block? Something with a signature like: apply(^(), NSArray* args)
Until I find a way to do `apply` in ObjC, I'll force properties to manually extract their arguments from an NSArray. Crufty, but it works.
Since I first heard of QuickCheck I've been hoping to get the time to play with it and maybe port it. Thank you for doing the work I probably wouldn't have done.
thanks, that actually makes a lot of sense. i'm not very used to xcode 4 yet. i may be wrong but i seem to remember xcode 3 having a better default structure.
Thanks to Mattias Wadman: @interface NSObject (performSelectorWithArgs) - (id) performSelector: (SEL) sel withArgs: (NSArray *) args; @end @implementation NSObject (performSelectorWithArgs) - (id) performSelector: (SEL) sel withArgs: (NSArray *) args { NSInvocation *inv = [NSInvocation invocationWithMethodSignature: [self methodSignatureForSelector: sel]]; [inv setSelector: sel]; [inv setTarget: self]; int i; for (i = 0; i &lt; [args count]; i++) { id a = [args objectAtIndex: i]; [inv setArgument: &amp;a atIndex: 2 + i]; // 0 is target, 1 i cmd-selector } [inv invoke]; NSNumber *r; [inv getReturnValue: &amp;r]; return r; } @end This powers the [objcheck](https://github.com/mcandre/objcheck) framework.
I really think people would like Objective-C. But the fact that it's only really implemented robustly on Apple &amp; NextStep computers puts off a lot of the geek cred. (Yes, I know there are commercial options for other platforms and there are things like GNUStep, but the former are expensive and the latter is under-maintained)
You should become more comfortable with C first, since the OpenGL functions are really just C functions, and OpenGL is not something you should start out with. It's important to differentiate between Objective-C code and C code, and how the OpenGL functions work. Just start a new OpenGL ES template project in Xcode and that is the simplest way to draw a rotating square; simply plotting vertices then rendering it. More complex models are built with 3D design apps; Maya 3DStudioMax Blender etc. What I do is have a .obj file of triangles, then I use a Perl script to convert that into a .h header file with all the points, I import the .h header file and render the model. [Here's a good start](http://iphonedevelopment.blogspot.com/2009/05/opengl-es-from-ground-up-table-of.html). Good luck.
Awesome! Thanks a lot! I guess the Apple Devs don't want to tell you that they created the model using something like 3DSMax. The sample code I had downloaded was a demon/gargoyle looking thing so I'm sure they didn't code the entire thing. I will definitely start reading the link you provided. 
you don't say. what kind of specs would i need for latest development needs?
Thank you much.
You read from the NSInputStream by setting one of your own objects as the delegate and implementing the delegate method stream:handleEvent: in that object's class. When you schedule the stream on a thread and invoke open on the stream, it will start invoking the delegate method as data is read. This approach is non-blocking. See the Apple guide: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Streams/Articles/ReadingInputStreams.html
Yeah Yeah, I know some of those words.
This will be phrased poorly. I apologize in advance. I think the idea is you have to decide when the user position is "fixed-enough," or when you're suitably happy with the accuracy of their location relative to the activity of the application. Assuming that this method is similar to that of the location information delegate methods, you need to wrap the contents of the method in a big if statement based around that fixed-enough logic. Put differently, in an app I'm writing, I want to get the user's lat/long and attach it to my object. The location services delegates I use receive positions from the device no matter, what, I just choose to ignore them if the current position is less than a few meters from my previous position as saved in a class variable. To be more specific, I stop listening once I have the fix, but that could be just as easily done as wrapping the call in a statement along these lines: if (!fixed) { /* your logic here */ } As I said, that might not make sense, so if not, reply or PM and I can try to talk through it better. It's early where I am, and my coffee isn't empty yet. 
Cocoalovethax has it locked. Best option is to build the model first. Find a suitable format to export it in which you can read into OpenGL ES vertex array and voila!. If you need a free model builder, try blender. It will export your model info in just about ANY format. Happy trails to you.
I was looking into the same thing recently. Check out Small Sockets and CocoaAsyncSocket libraries. My personal needs are more like the Java approach - buffered reads that block on a method call rather than an asynchronous, delegate-based system. I really wish Foundation included some better classes for this type of thing.
Thanks for the answer! Sound likes the CALayer does the trick. Going to give it a try. 
That's pretty much the same story as mine 18 months ago. I found some books useful for the initial learning hurdles, ensure you get the newest ones possible (iOS 5 + Xcode 4). Xcode and iOS tends to change (at least a little) every 6 months or so! I went with the dummies one (Obj-C is hard!) at the time and a Obj-C cookbook. Apple also host a load of example projects and some tutorials on the developer area. I also watched some of the Standford University iPhone Programming Course iTunes U videos.
I always try to get [O'Reilly](http://shop.oreilly.com/product/0636920021728.do) where possible, I find them the best.
Raywenderlich.com is an amazing resource. Along with the Apple developer portal at developer.apple.com. Those two things got me a job as an iOS programmer.
Thank you, that site looks like it's going to be a fantastic resource.
It is. I'm glad you are going to use it. I owe a lot to Mr. Wenderlich
I'd recommend [this book](http://www.bignerdranch.com/book/ios_programming_the_big_nerd_ranch_guide_rd_edition_). I think it really gives a great overview of iOS's core concepts and functionality. Really showing a lot of the concepts you'll see used throughout iOS (and OS X for that matter) I already knew obj-c/cocoa a bit when I took the class this book was based on (the course material was a rough draft of this book) and the people who had no experience before really seemed to get a handle on it quickly. Plus the author's are really kings of their domain, you aren't likely to talk to any OS X programmer that isn't relatively new to that platform that won't recognize the name Aaron Hillegass. Apple used to, and I think still does hire his company to teach concepts of programming for iOS/OS X. Edit: I will say, you are up against a hard journey if you've never programmed before, not because obj-c is hard, but because you have to learn the concepts of programming in addition to their obj-c/iOS dialect.
Thank you.
I've been learning ObjC on own for a bit now. I took a two-pron approach. I am reading [this book](http://amzn.com/0321811909) which covers ObjC basics and I am watching the Fall 2012 Stanford iOS courses on iTunes U. It's really got me going thus far. It also breaks the monotony of just reading a book, it feels like you are really in the class room.
Consider adding a fixed width space to the shorter of the two to make their width uniform?
I think flexible space might be intelligently dumb - it will go for uniform flexible space throughout the bar, rather than try to centre things. Just a suspicion- not in a position to code it and find out right now.
I actually have a couple of apps, ControlPlane and Tedium
Just wondering, how tedious is it (if at all) to have AppCode open Xcode4 just to edit a Xib? I imagine if you're working on a large app, and need to go back and forth in and out of Xib files, it could get rather cumbersome? I mean there's no point in running AppCode and having Xcode4 sitting idle in the background the whole time.
It's still in a very scrappy stage, however is quite usable.
I've made some more changes tonight, including iOS support (hyper alpha state so far) http://instagr.am/p/J0V-INx4Va/
Very nice, yes CorePlot can definitely be overkill. I've used it in a few App Store apps and still my jaw drops at the number of lines that sit in my graph controllers.
To interact with a shell script in your app, read up on NSTask. I'm assuming your script uses /usr/sbin/ioreg? In principle, you have direct access to the same I/O registry data directly via IOKitLib.h. I'm a newbie, too, and I couldn't find enough in the IOKit docs to get my brain to understand how to access the battery info. I tried to look at the source code for ioreg.c at opensource.apple.com, but the server was non-responsive. If you can get to it, I bet you can learn what you need from that code.
In one ear and out the other.
Honestly, I wouldn't bother trying to directly map C# programming idioms to Objective-C, they are quite different, and Cocoa and .NET adopt completely different patterns with regards to GUIs, collections, etc. What you have to remember is how much of a thin layer Objective-C is over plain C. Essentially, Objective-C is nothing more than a glorified preprocessor and a runtime library for C. Some people advise against this, but I recommend learning C first. Not *mastering* C, but getting to a point where you feel comfortable writing small C programs. C has *a lot* of quirks, and because Objective-C is just a wrapper around C, it adopts these quirks as well.
OP, can you give an update on this please? Thank you!!
If you're using storyboards, it might be easiest to define a segue and call that in code. Control drag from the view controller icon under your first view to your second view, choose "push", give the segue an identifyer, e.g. "Alert Segue", and then call it in code like so: [self performSegueWithIdentifier:@"Alert Segue" sender:self]
This.
The other answers are correct, but missing a key element - if you want to respond to an Alert View, you need to set up a delegate to handle the response. Make your current view controller conform to the UIAlertViewDelegate protocol, then implement alertView:clickedButtonAtIndex with the code mentioned in other replies - basically, performSegueSomethingOrOther. I didn't really get in to Storyboards yet since the documentation is light and I'm just as happy programmatically doing things for now. 
A little off topic... But how can I go from Objective C programming to programming in C#?
First things first. Download Visual C#. It is microsoft's free compiler. Personally I find the IDE very "comfortable". Next, keep this in mind: Objects. They treated just as in objective-c. The difference with Xcode is that you don't need to worry about memory management. No release, retain, alloc or dealloc Methods. You invoke methods as if they were properties, like normal C. object.myMethod(parameters); Files. There are no header and implementation files. Actually, pretty much everything is done in the .cs file for the "form view". Visual objects. You don't need to link objects to outlets or IBActions directly (if you want to use the most intuitive event). Just drag the control to your form and it is linked to code. To handle events, you double click the control or go to the events tab and chose the one you'd like. I think that's the summary of the big differences. 
You should really use the controller for all the game logic/mechanics. The model should be used to store the state of the game. Can u give any specific examples of what you are doing in the model?
No specifics as the scenario was just created for this post. According to what your saying, I should use the controller for methods like "rollDie" or "shootPlayer," and the model for methods like "playerDead" and "gameOver" ? Thanks for the response!
I'm not very good with games... But I think you have the concept of MVC design down fairly well. According to what I have been taught, the logic is managed by the model and the controller manages what is shown in the view. I'm pretty sure **gilbertj99** is incorrect about the logic being in the controller... but like I said I have near no experience with game design on iOS so it may apply differently to MVC design paradigms... I'm also fairly certain the state of the game would be saved in the appDelegate. Most likely using NSUserDefaults in some way... I explain my understanding of MVC a little better in [this post](http://www.reddit.com/r/learnprogramming/comments/qi796/mvc_cant_seem_to_grasp_it/c3xtlk3).
Wow, thanks a bunch for that link! Learned a lot of useful stuff in there, and I believe you are right about what gilbertj99 said. Thanks again for the post, really allowed me to solidify any previous understanding I had of MVC and how to implement it :)
I would think about it like this. Your model (not modal) is a representation of some thing. Usually you will have multiple models. So, in your example you would have one model to represent dice, and another model to represent a scoreboard (for example). You'd also have a "player" model, which would need to be instantiated once for each player. You can think of each model as a class. Now, when you define these models, you would define methods that let them do all the things they should be able to do. So, Dice would have a "roll" method. And "Scoreboard" would have an "updateScore" method or some such. eg define class dice { int currentValue; function roll () { newValue = [random 0 to 5] [self setCurrentValue:newValue] } } Now, the controller, controls these models. When the view tells the controller that the user has made input it will then tell the models what to do. eg. if ([user clicked]) { [dice roll] [scoreBoard updateScore:[dice currentValue]] } Finally, the controller would tell the view to update itself with new information. Think of the controller as the middle man who tells both the view and models what to do, and then performs the logic to figure out what should happen next.
Very helpful, thanks a ton. A couple of questions while I have you here... 1. Should I have the model tell the controller to update its labels, (with some sort of updateLabels method) or, since the controller is the one calling the methods on the model, should I have it call an updateLabels method itself. That may have been horribly worded but hopefully this helps clarify... Possibility 1 In controller... [diceModel rollDice]; In DiceModel -(void)rollDice { ... [controller updateLabels]; } Possibility 2 In controller... [diceModel rollDice]; [self updateLabels]; Hopefully that didn't make things more confusing. 2. How should I go about instantiating the controller from the model. I am assuming the controller instantiates each model (is this correct?), should it then pass an instance of itself to the init method of the model, or should the controller be a singleton and each model call a [controller sharedController] method. Sorry for any weird formatting or wording, its getting quite late and I probably should have waited until the morning to respond! Anyways, thank you VERY much for your response, it was incredibly helpful.
You've been a great help, thanks a ton!
Thanks a ton! The whole "flow of application" piece is exactly what I needed :)
This answers my question fairly well! I guess my problem lies with my understanding of protocols and delegates. I understand how they work, but I don't fully understand how to use them properly. 
I'm still having trouble with this stupid request. I am using the delegate methods properly... and I am receiving the data I am expecting. The trouble is **when** I am actually receiving the data. I have a utility method such as: -(BOOL)CheckDatabase { //bunch of random code here... //Here is where I make a request NSURL *checkURL = [[NSURL alloc] initWithString:[NSString stringWithFormat:@"http://www.c********ie.com/c******e.php?format=json&amp;nojsoncallback&amp;udid=%@&amp;secret=********", udid]]; NSURLRequest *request = [NSURLRequest requestWithURL:checkURL]; checkConnection = [NSURLConnection connectionWithRequest:request delegate:self]; //I have some more code here that assigns a value to a boolean variable return someBoolean; } I am receiving the correct data, but it's just way after I actually need it. The method shown above is not called until a button is pressed by the user such as: -(IBAction)buttonPressed { [self CheckDatabase]; //more code here.... //more code... //about here is where I need the data from the utility method... //but the program always reaches this point before the request has actually received a response and/or any data } 
As an iOS (+everything else) dev, all I can say is LOL. With this and the rise of Javascript we aren't moving forward as much as slightly sideways...
Couldn't agree more.
Couldn't this be solved with a conditional segue?
I don't really know. I was just playing around and didn't get too far into the documentation or into creating custom segues. It would be great if that were the case, but it wasn't obvious at all.
Yep this has been my experience as well
I tried storyboarding when the feature made its debut (was it only last year?)... and I hated it. It was very tough to go back and revise / maintain later. But having just given it another shot on a more recent project, I'm actually kind of digging it. I don't think it's worth the effort to re-do an existing project with Storyboards, but if you can start from the ground up... I'll just say it's improved a lot from my experience previously.
Yes, but you'd most likely have to join the "made for iphone" program in order to get the tools/information necessary to make it work.
https://developer.apple.com/programs/mfi/
If you cant' find a way to do it from the iPhone, you could always just make it a PC app (since you are going to be tethered to it anyway).
The solution I am looking for is intended for company use
great! Bookmarking this, and I will be sure to hit you up when I have something new to be reviewed!
Well, my website has quite low traffic, but I'll check out your app and review it very soon, when I have some sort of rating system in place. Send me an email so I remember.
Sent! I appreciate it!
&gt; Both languages use a very similar syntax What?
This is awesome of you to offer. I'll hit you up once I'm rollin!!! Thanks!!!
I've read the majority of the first link you provided. As for the second, that one seems to focus on IB more than the actual design. What I'm looking for is a bit more general such as: Logo design Color schemes Image refinement Custom Buttons How/When to use animations etc... **EDIT**: format
That is true!
I know this is getting to be an old thread but for what it's worth I spent about a year learning objective c with what little spare time I had. After 1 year 6 months I released my first app for a company I was working for (employer was happy). Now I'm putting together a course on the subject. It can be found [here](http://objectivectutor.com/). Still a work in progress. Hopefully it will help.
Essential: [The Design of Everyday Things](http://www.amazon.com/gp/aw/d/0385267746)
Yay, thanks! Your apps will be my first Mac reviews.
You know you can use something like [self.storyboard instantiateViewControllerWithIdentifier:@"Identifier"] and use this view controller the same way you would use in the old days, right?
Are there any specifics about the tests you need to write? Are these supposed to be handmade or part of a testing framework like OCUnit? I'm guessing they should be custom. Also, you've described four variables (sender's name, length, width, height) but told you can only use three instance variables. Is this intentional? I can certainly think of ways to do this with only three, but using four ivars instead of three seems like a valid implementation unless there's some other requirement or limitation. Overall, it looks like the goal is to make sure you know how to: * create a custom class that inherits from a generic object * create an public interface to your custom class * create a protected implementation of the promises in your interface * know where to declare / synthesize your ivars * know where to declare / implement your custom methods * know how to override a method of a superclass * know how to iteratively test and refine your work It's only hard when you're staring at a blank screen and aren't sure what to do next. But the actual code and places you need to stick it are pretty well defined. Still, just giving you the code won't do you any favors toward actually learning what's going on here, but ask if you have any more questions.
Is this all going to be done on the main.m file? 
Not a thing. The *main.m* file is not really used in general Objective-C programming. It's job is to instantiate the NSApplication object (which is the foundation of any Cocoa app) and start it running. OS X takes a lot of information from the *info.plist* file (and a few other places) and uses that to start the application, load the main XIB file, and hand off control to the main run loop. That's a lot of jargon right there, but you can safely ignore it. For this kind of project, you should probably be dealing in four files: 1. *MainMenu.xib* — Xcode makes this; it will handle GUI needs 1. *(prefix)AppDelegate.m* — Xcode makes this too; use it as a basic app controller. It can create instances of your box class, send them messages, etc. For now just use the "didFinishLaunching" method to house your app. You'll be able to instantiate a bunch of boxes and send them messages and all that. 1. *(boxclassname).h* — Created when you go to *File -&gt; New -&gt; File…* and will contain the public interface. Methods that you need to use from the AppDelegate need to be declared here. 1. *(boxclassname).m* — This is the implementation file, where you'll enter all the smarts for your Box class. I think this should be enough basic structure hints to get you going. 
That's a bad idea - if you start out not understanding the basics, you'll be really screwing yourself later int he semester. In other words, do your best to figure this one out. Even if you're looking at someone else's sample project, make sure that no line of code goes into your project that you don't understand why it needs to be added.
Well we created an actual single view app already for a different project. For this project it is an OSx command line tool, sorry I should have mentioned that earlier. 
Not sure if you understood but this is an OSx command line tool, not an iOS app. Edit: I guess I should be asking, when the file is created I just have a main.m file. What files do I need to create, import and put what code where for the application to work?
Are you using Xcode? Or has your professor told you to only use a text editor? The first thing you'll need to do is create your custom class files. Xcode has a way to create common code structures in its library templates and in the File menu. With your project open, look at **File** &gt; **New** &gt; **File...** In those dialogs is an automated way to go about creating the files you'll need for your custom object from some templates. You should be able to spot how to do it pretty easily. That's going to be a big first step, but after that you should have a good idea of where you need to flesh out your custom class. And after that, you'll still need to create code somewhere else that actually "exercises" the Object (instantiates it, runs a few edge case tests, etc.)
Not unless your professor has told you to do it that way. It's possible but would be considered pretty bad coding style. You would normally at least create a pair of files for your custom class. You will have to tell other files in the project that they exist though; just being in the same project isn't enough, there's a specific way in code you have to let files that need to use your custom class "see" what you promise it will do. And then somewhere you'll need to put your code to test that class. For a command line tool, that may very well be in the main.m file. But your professor may have given you instruction to do the testing some other way (in another file, via a shell script, using a testing framework). If the tests don't go into main.m, you *will* need to put at least enough code in main.m to tell it what file it needs to pass control to next.
you basically have two immediate choices which should be straightforward: (1) define another method similar to **estimateCategory** to return the *weight* strings(@"Heavy", @"Light") (2) have your current **estimateCategory** method return an NSArray object containing two strings (one volume NSString object, one weight NSString object)
Good question! What do you want to do? I'd recommend two things. First, go through one of the many online classes in CS and programming. I went through [CS50](http://cs50.tv). That will be useful because Objective-C is based on C and still uses it, but if you find something in Java or even something as different from C as Python or even Lisp, that's also good. Second, figure out what you want to *make* in Obj-C and do it. The BNR book gives you a great starting point for quite a bit. You can go from there, copy the code you want to duplicate, and off you go. One thing you'll find is that rarely do you need to look at a blank screen and try to fill it with something. Actually, a month ago I had a programming challenge I needed to do for an interview (I got the job and start Monday, my first software job, though it's not doing Obj-C). I decided to do the challenge in C. First thing... WTF do I write in my program? I had to look up the standard includes and the format for int main(whatever). Xcode gives you those templates, but I wasn't using Xcode because it also gives you a ton of other crap I didn't need. You should never be daunted by a blank project because you should never start with a blank project. (: Same with whatever you're doing.
If you're going to use Lingon, I'd recommend older versions of it, as it's gotten worse with each numbered release. The original release was a legit power user's tool, but it's just been dumbed down since then.
appreciate the links!
As an experienced programmer who wanted to get into iOS programming, I found the book "iOS Programming" by the Big Nerd Ranch very helpful. It doesn't waste time teaching you how to program in general, but rather how to program for iOS. Most books I found spent half the book explaining what a for loop is. Not this one. Check it out. http://www.amazon.com/iOS-Programming-Ranch-Edition-Guides/dp/0321821521
http://www.raywenderlich.com/ has a lot of great tutorials. I've learned a lot from that site.
First, delegates go beyond the application's delegate. That's only one kind of delegate. Different classes in the framework have delegates, or can have delegates, since it's not mandatory. (Table Views are a good example of this.) My understanding is that delegates are objects that have an opportunity to handle things for their "boss" object. ("Boss" is the term I'm dreaming up. I don't think Apple uses it.) From the programmer's point of view, it allows you to avoid having to muck with the boss object, in this case the Application or TableView. If you [take a look at the reference for NSApplicationDelegate,](https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/NSApplicationDelegate_Protocol/Reference/Reference.html) you'll see a whole bunch of messages that the Application instance may send to its delegate. (The Application first checks to see if the delegate handles the message.) Most of these messages have to do with different events that happen during the life cycle of the application. If you're interested in doing a bit of work when one of these events happens, you implement the method that handles that event and do the work there, in your delegate object. 
The Big Nerd Ranch has a book: [*Objective-C Programming.*](http://www.bignerdranch.com/book/objective-c_programming_the_big_nerd_ranch_guide) &gt; Want to write applications for iOS or the Mac? This is the guide for you. Based on Big Nerd Ranch's legendary Objective-C Bootcamp, this book covers C, Objective-C, and the common programming idioms that will help you make the most of Apple technologies. I've seen it on the shelf of my local big-box bookstore, and it seems like it's geared towards someone with your experience. (I think it does claim to address the more or less beginner programmer, but it moves awfully fast. I don't think you'll be bored with it.) I think it helps to know the basics of C. I learned years ago on an [earlier version of this book.](http://www.amazon.com/Learn-C-Mac-Series/dp/1430218096) I honestly think it will be more than you need though, since you don't really need to know all of the ins and outs of C to program in Objective-C. If you get stuck on any C concept, you could google it or check Wikipedia and basically get enough to get the answer you need to move on. Good luck!
P.S. Have you seen Apple's "Core Competencies" guide? Here's the one [discussing delegates on iOS](https://developer.apple.com/library/ios/#documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html) and here's the one [discussing them on OS X.](https://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html) There are a lot of other topics discussed in the guide, and it's high-level.
Just bought this book and got it yesterday. I sort of am in the same position as you with a little less knowledge. I have a basic knowledge of Python (for loops, if statements etc) but no experience in objective-C. The entire introduction says you don't need any prior experience in programming to follow the book. After that the Big Nerd Ranch also has a more advanced book so I plan on going through both of those. Good luck! 
Thanks so much! I actually have seen that documentation before, but it was before I actually started writing any code so I hadn't connected the dots. Will definitely be re-visiting apple's documentation.
Thanks so much.
Here's a great StackOverflow link on how I think about the AppDelegate: http://stackoverflow.com/questions/4953948/appdelegate-rootviewcontroller-and-uiapplication It may not specifically answer your question but hopefully provides some helpful context.
Delegates let you avoid subclassing. In other object libraries, you might subclass a window object to have custom behavior (e.g. asking to save when you close). In Cocoa, you could have a window delegate that gets the message "Window is gonna close" where you could put that functionality. Often you'll make the delegate your controller so you have access to state instead of having the window object ask for it. Do take a lot at the links that other people have provided, too.
As with all things: what are you trying to accomplish? Without knowing that, it is impossible to give you a good answer. Well, except to note that Google's j2objc project only does non-GUI code. You still have to learn ObjC/Cocoa for interface stuff. If you're building a project that has to run on Android and iOS it could conceivably save time, but you still need to learn both systems. The others I am less familiar with.
Like dethbunnynet said, it depends on what you're doing. Obviously learning Obj-C will be most flexible, but it might not be best or necessary depending on your needs. Programming in Obj-C will give you access to certain components or features of the device that you might not otherwise have. This is constantly changing as frameworks get more sophisticated, but things like push-notifications and lower-level controls (like threads) need to be done with Obj-C. I will say, though, that if you have any experience with object oriented programming, Obj-C is really not that hard, and in fact kind of enjoyable to program in (in my humble opinion). I feel a lot of people spend way more time than they should contemplating learning a new language when they are completely capable of doing it and be decently competent without too much time. That said, if you are interested in learning Obj-C for iOS apps, I highly highly recommend the Standford course on iOS development taught by Paul Hegarty. It goes over both the Obj-C language and the iOS framework. It's on the iTunesU store for free.
Thanks for the reply! I have actually started learning Obj-C and have downloaded the Stanford power-points from those classes. (They are great! :) I think I'm a believer in doing things natively, but was wondering how useful these tools are, especially because when I tell other programmers I'm doing something for iOS they immediately jump to telling me about these wrappers. That being said, I don't think these other developers have done any iOS development.
Objective-C is not a hard language at all.
To be quite honest I can't remember having heard/read from any notable iOS/OSX dev saying something along the lines of "better use a wrapper" (and even then: …and a wrapper actually making sense in the given situation). And I listen quite intensively to the iOS/OSX Twitter-sphere. Have any such notion for reference? From someone used a wrapper and whose apps don't suck, obviously. Clean code, beautiful UI, recognizable business/dev name, you name it. ;)
Check out the Stanford course on iOS Programming on iTunes U. It's pretty comprehensive and its free. Watching these types of courses online can be helpful especially when you're just starting out. Objective-C is a very unique language and may seem a little off putting at first, even if you know C/C++. Give it some time.
IB definitely has it's place. It can be really convenient to be able to move elements around and see how they look immediately. It is always a balance between the convenience of instant visualization of your layout and the convenience of being able to lay things out with loops and not having to deal with outlets. When I use it: - When I have a reasonably small number of items to arrange that will remain in relatively fixed places at all times. The best example of this for me is navigation buttons, and any static background graphics, logos etc. My main menu and store pages are usually mainly IB, my game play screen is usually mostly not IB with the exception of a few navigation buttons. - When the things I am arranging are part of the core visual experience, and I really want to make sure they look perfect. I can easily make a popup menu that is occasionally on the screen look fine in code, but if I try to make the main menu that is the opening screen of a game without IB I often get stuck in time consuming build-nudge cycles trying to get things positioned just so. I am nudger by nature, if you are not this will be less of a problem. When I don't use it: - When I have a lot of items to lay out in a predictable pattern -- it is just faster to use code if there are too many objects to space evenly. Often the hybrid approach below can be useful in these cases though. - Anything that moves around a lot and doesn't have a natural home position on the screen. If I don't need to check how it looks with the rest of the layout since it will be moving around a lot anyway, IB doesn't really add anything. - When using it for a task would involve having too many objects in IB. If you have too many objects, it just gets difficult to parse. For me it starts to get irritating if I have more than about 30 total objects. Sometimes I use a hybrid method: - For example, if you have something like a game board that will have game pieces positioned on it and associated graphics, I have found it really convenient to have one UIView in IB that marks the position and size of the game board, and is referenced by the code that positions all the real stuff. This view is hidden immediately so you never see it, but gives you a draggable positioner for all the stuff associated with the game board to help with layout. I make puzzle type games, so my advice is influenced by that.
I love IB. I use it whenever possible. A lot of what I develop is either brochureware or utility type applications so many elements will retain their position. For more complex apps that will have huge amounts of dynamic content, it may not be feasible to use IB, although I still would likely try for menus and other pieces that will remain fairly static. From a maintainability point of view, IB is great. I find it much easier to get up to speed using IB than looking at layout code, especially when I'm looking at stuff I built a year or two ago. At the end of the day, it all depends on what you're wanting to build. Note: I don't use storyboards, I haven't found a project that seemed like a good candidate for storyboards yet.
If your app doesnt rotate orientations, IB can save you a lot of time. Otherwise there's little benefit to it. 
It's hit or miss for me. For really simple layouts with a handful of elements, I will probably use it. For more complex things, I'll generally draw an rough sketch on paper (I know, ease up on me) and recreate it with code. For custom table cells, I'll never use IB - it's too damn much work for relatively little payout. I miss earlier versions of IB where you could create the your outlets by dragging the element backwards, but the two-up view, keeping the header on one side, makes up for it. 
IB is a piece-of-shit, but nibs are a great way to organize static custom views, so I use it sparingly but sometimes it is the best tool for the job.
Generally speaking, if it's possible to use Interface Builder, you should use it. It solves a lot of problems and makes a lot of things easier. But don't try to use it where it doesn't fit. It's fairly obvious when this is the case, so if you're having trouble making up your mind, then you should probably use it. 
It seems to me like they went halfway between C pointers and something with implicit pointers like Java. In C you have all of the dereferencing and &amp; symbol, -&gt; operator, etc, and you have to explicity state whether youre accessing the data in memory or the pointer to the address. In objective-c you just specify the * once and everything after that is implied that youre accessing the data. 
&gt; It seems to me like they went halfway between C pointers and something with implicit pointers like Java. Not really. Types and declarations live in C, the stuff between brackets lives in Objective-C. Thus heap variables have a pointers in the C part because it's C, and in brackets there's no need for a pointer deref because it's an Obj-C object which the runtime knows is a pointer. I mean Obj-C is intrinsically halfway, it's half C and half "Objective".
&gt; I disagree. The advantage would be easier-to-write code. Please note: I didn't say it had *no* advantage, I said it has *very little* advantage. There's a nuance. &gt; If you're an experienced Obj-C coder I'm sure you're used to it. It's mostly being used to C really, and if you hope becoming used to Obj-C without the C part you're going to have a hard time. &gt; Yes, I get that knowing whether or not a variable is accessed directly vs by reference is very important I wrote literally nothing about that. Please read what I actually wrote, not what you seem to believe I wrote. &gt; I mean it's not like you could do ever explicitly say that a variable isn't accessed by reference, like so: You probably could a long time ago, back when Objective-C was just a buch of C macros. You've got to realize, Objective-C is still in no small part C, and it dates back to 1983. `NSString *` is literally a C type specification.
I've purchased it and already finished it. I'm now capable of making an app that downloads, stores, and parses an XML. Great stuff, just need to get my hands on some interface building chapters, which are in the next book in the series! dude knows how to hook someone up!
You're welcome! Glad to hear it.
Delegates are especially good for cases where your first instinct might be to poll until you get an answer. In the sample you give, your app would have to continually ask, "Are we done? Are we done? Are we done?" until it got an answer. Instead, of this, your some object in your app would offer itself as a delegate and implement a protocol, and would then be able to sit back and snooze until it was notified. It's a *much* cleaner implementation.
why should I use this over something like testflight?
The Apple WWDC videos are pretty damn good too, but I would say the Stanford courses are better. Paul Hegarty was the damn VP of Engineering at NeXT Computer (which is where OS X and iOS have their roots). 
Main reason to use AppValve over services like TestFlight would be the ability to host your app distribution on your own servers and control them yourself, eliminating the need to trust third parties with your binaries. AppValve can be deployed very quickly to a variety of cloud hosting services, and someone who might want to use a service like Terremark or Amazon VPC for extra security could use it easily for hosting their app distro. Additionally, having a privately hosted solution allows for customization of styling and branding. 
Main reason to use AppValve over services like TestFlight would be the ability to host your app distribution on your own servers and control them yourself, eliminating the need to trust third parties with your binaries. AppValve can be deployed very quickly to a variety of cloud hosting services, and someone who might want to use a service like Terremark or Amazon VPC for extra security could use it easily for hosting their app distro. Additionally, having a privately hosted solution allows for customization of styling and branding. 
Thanks! I'll be sure to do the cross post, good tip.
People actually click these things? Keyboard shortcuts... Learn them.
Every project I use now - uses storyboards or at teh very least - IB. It just makes life easier. Admittedly I haven't written a game yet but I would imagine that it's still way better to setup a few scenes by hand and animate in the relevant layer items and what not. Why bother writing a bunch of code when storyboards (or plain ib) support that already.
another major plus for my team is that I can have designers interact more with the actual product and style &amp; theme the buttons in xcode! It's fantastic. Using IB and Storyboards - the designers have been given the ability to help out more than ever.
Not for quite some time, though I've toyed with doing so in the not-too-distant future (adding some ObjC goodness to an old MUD...)
Very cool! Good luck :)
Those are good guesses, but actually their functions are to crash Xcode, hang while it indexes everything even after you told it not to, and jump to disassembly when the app you are debugging gets a signal even though you told it not to.
Wow, that is pretty cool. I like how it works with Xcode and iOS.
I really liked [this](http://www.amazon.com/iOS-Programming-Ranch-Edition-Guides/dp/0321821521/ref=sr_1_1?ie=UTF8&amp;qid=1357185437&amp;sr=8-1&amp;keywords=big+nerd+ranch) one.
Seconded. Big Nerd Ranch publishes good stuff, and their [Objective-C book](http://www.amazon.com/gp/aw/d/0321706285) is just as good as their iOS book.
I'm trying to do the one JOEKR linked, but it seems they're using an older XCode than I am, things are missing or re-arranged, any suggestions?
For Objective-C this one: http://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/032188728X/ref=tmm_pap_title_0?ie=UTF8&amp;qid=1357192597&amp;sr=1-1 For the iOS SDK: http://www.amazon.com/Beginning-iOS-Development-Exploring-SDK/dp/1430245123/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1357186639&amp;sr=1-2&amp;keywords=ios+6+development
I'll 3rd the Aaron Hillegrass book, and also check out raywenderlich.com for a ton of useful tutorials (and for iOS 6 stuff - their book on iOS6 is good).
Not a book but the [Stanford iOS videos](http://itunes.stanford.edu/) are a good foundation. Takes through the ins and outs in detail.
&gt; their book on iOS6 is good You're talking about the Wenderlich book, right? Can you clear something up for me? I was looking at that web site the other day, and I couldn't make out whether the book is available only as a PDF or whether there is a physical, dead tree version. Do you know?
I found this one to be helpful, as an introduction to ObjC and C based languages in general (my previous self-education was mainly Ruby and JS).
"Head First iPhone &amp; iPad Development" is all about Objective-C http://www.headfirstlabs.com/books/hfiphonedev/ 
Seconded, I started with PiOC. It's a really good intro to the language and OOP.
unfortunately with the pace of change with the iOS SDK and tools, this looks rather outdated already (Xcode 3 and iOS 3.x is very different to Xcode 4 and iOS 5+ with ARC)
Is there any books that are up to date with XCode 4.5? 
True dat, but it's not hard to work your way past the differences. I'm a noob to Objective-C, and haven't done any programming for several years, but am picking it up nicely. The way the Head First series is presented outweighs other considerations. Try it, seriously.
What is cocoa and why does it seem to go in hand with ObC
Cocoa is the collective name of the APIs that Apple uses for Mac and iOS development, and the frameworks are written in Objective-C The Apple operating systems are far and away the most popular reason for wanting to program in Objective-C: to produce applications for Macs, iPhones and iPads. The first book that Kestral71 mentioned is a good one for the language only, but for using XCode and developing applications, some of the other books do a better job. I also enjoyed the video lessons available at Lynda.com. They have one specifically about using XCode, one for Objective C itself, and others for iOS development.
That might not have answered your question. The name Cocoa dates back from when Apple bought Next, and began to create a new Mac operating system. There were two different frameworks for application development: Cocoa and Carbon. Cocoa was the new Objective-C frameworks that largely came from Next. Carbon was the older style Mac framework to support legacy applications such as Microsoft Word and Adobe Photoshop, so those large applications wouldn't have to be *completely* rewritten. Back when they were first announced, the two frameworks were said to both be viable methods of creating Mac applications which would be updated and supported for years to come, but over time the Carbon framework was deprecated, and only Cocoa remains.
Personally, I'd say you should open Xcode, begin a new project and play around with it. Try to make something work. If you have questions, go over to stackoverflow.com. This way you'll get used to the Objective-C syntax. When you feel like stepping up, go ahead and learn what is @synthesize or how delegates work. Finally, you need some kind of programming background. If you don't have it, ignore this post and get the books.
But they're not for beginners. You have to have some experience in programming to make the best of it.
On the Developing Perspective podcast (http://developingperspective.com) they recently recommended reviewing Matt Thompson projects such as AFNetworking https://github.com/mattt
In addition to [Matt Thompson's stuff](https://github.com/mattt), you may want to take a look at [ReactiveCocoa](https://github.com/github/reactivecocoa), which is quite nice and thoroughly tested.
This project looks very good, it has iOS and Mac versions, I definitely gonna check it out, the only thing I'd have liked is tests, it doesn't have. Thanks!
Woooww, didn't know that existed, very nice! thanks a lot!
I wish this guy weren't encouraging people to use RegexKitLite. Perhaps someone can correct me, but I am unaware of any valid reason to be using RegexKitLite in 2013 (or even 2012 for that matter). Am I way off base here?
I do. Is there something notably better? I'm legitimately curious.
Maybe I'm really confused (which I'll readily admit, if it turns out to be the case), but why can't we just use the regular expressions built into Foundation since iOS 4, `NSRegularExpression`?
also can recommend WWDC sessions videos ([2010](https://developer.apple.com/videos/wwdc/2010/), [2011](https://developer.apple.com/videos/wwdc/2011/), [2012](https://developer.apple.com/videos/wwdc/2012/)) tons of useful info there ;)
I will, thanks a lot!
`NSRegularExpression` is great if you need to get addresses or other special information out of text, but for "normal" regexes, it's awkward (long method names that take basically the same values every time, returns ranges bound in value objects so you have to get the substring yourself, have to create a regex pattern object before you can search†). Are there performance benefits to using `NSRegularExpression`? Both it and RegexKitLite use libICU internally, so I'd assume they had roughly the same performance. † Obviously this could be beneficial if you need to repeat a search many times, but iirc, RegexKitLite does some internal caching of compiled regex objects that's probably sufficient for most cases.
&gt; There are still times when delegates/protocols or NSNotifications make sense, but blocks should be your first consideration. I think this is a recipe for trouble, and I would suggest just the opposite. Blocks can be great, but in some cases I think they can over-complicate things—especially when they're long, when there is more than one kicked off in some particular method, or when one block passed to a method is then wrapped in another. It becomes difficult to understand what's happening.
When I was learning, this book was a BIG help: http://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/032188728X/ref=sr_1_2?ie=UTF8&amp;qid=1359262933&amp;sr=8-2&amp;keywords=objective+c It's excellent and has plenty of exercises and examples. Although, to learn Objective-C, I would say you have to have at least some knowledge of C since the language is just a superset of C. Otherwise you would be confused when you encounter pointers and structs and such. The book does a good job in teaching you those things but still, some C knowledge would be beneficial. 
Once thing I've learned is that the most common design principals in Objective-C and Cocoa aren't found anywhere else (or, they are much less common in other languages/frameworks). For example, the delegate approach in Cocoa is something I don't find much in other languages. Instead of subclassing an object like a text box, you just make a delegate. The text box communicates with the delegate to determine what actions to take, for example, the user might have typed some text into a text box, and the text box would ask the delegate "is this text OK?" and the delegate would answer either yes or no. This example doesn't truly demonstrate the usefulness or power of delegates. Another common design is key-value coding and key-value observation. Nowadays it is made much simpler as all properties of an object are automatically key-value coding compliant, but basically it means you can monitor the property of any other KVC-compliant object and act on it in whatever way you want. For example, say an object had a "lastUpdated" property. You could monitor this yourself and you can say that when this property changes you want to be notified, and you are interested in both the old value and the value it is changing to (or one or the other). This makes for some very easy event-driven code. Objective-C + Cocoa in general is very event-driven (as opposed to polling and waiting).
Seconded. This is how I learned at work when I went from java to obj-c. 
Google "Objective C for Java Developers." There is a PDF on the first page of search results. A pretty decent book especially when coupled with decent tutorial videos and podcasts.
What's your favourite solution to get around singletons?
Sometimes they make sense but a lot of the time it's a lazy way of having an object a lot of different objects can talk to. Sending messages via notification center is a good way to have many objects talk to one object on a complex graph. Don't be afraid of notification center either, I've seen a lot of rookie obj-c guys not use it because they had unfounded performance worries. 
I'm not a lawyer, and definitely not *your* lawyer. So I can't give you any legal advice. That said, what would be *illegal* about it? The only thing of of concern as far as I could see would be patented methods of doing things, but no software technology will let you really avoid those.
I'm not an expert on patent/copyright law, but I guess my concern would be that those frameworks implement API's that are Apple's property, and that I would be violating their ownership rights by using them.
Actually, software licences can get very complex. I work in R&amp;D for a large software company and before we use any third-party libraries, they have to be vetted by Legal because some licences, such as GNU can be quite viral in nature, requiring you to open source code to the public eye, etc. Failing to do so is a violation of the licence and can result in legal consequences. Even the difference between static and dynamic linking can make the difference between being in compliance or out of compliance with a licence.
&gt; some licences, such as GNU can be quite viral in nature GNU is an operating system. You're probably thinking of the GPL. The GPL is not viral. It's copyright that is viral, the GPL simply doesn't go as far as other open-source licenses in cancelling the viral aspect of copyright out. &gt; requiring you to open source code to the public eye The GPL doesn't require you to do this. It requires you to provide source to the people you distribute binaries to. If you are only using the binaries in house, you don't have to distribute source at all. If you are only distributing the binaries to your clients, you only have to distribute source to them. Of course, since you are distributing the source to them under a GPL license, they may choose to distribute it to the public, but that's really up to them, it's not a requirement of the license. 
Sure it does; if you are not in compliance with those licences then you're facing legal consequences.
Really? Are we going to be that pedantic? When I said GNU, clearly I was talking about the GPL. For a commercial entity shipping CLOSED-SOURCE software, the requirement to distribute source IS an issue even if you don't go the next step whereby they can redistribute modifications to the public. I'm not sure what your definition of viral licencing is, but anything that requires my work to be passed along to someone who could ultimately release it far and wide, outside my control, THAT IS VIRAL. THE GPL is a truly EVIL licencing system, to the point that we are absolutely FORBIDDEN from using GPL-licenced code. LGPL is another matter entirely.
It's not the "using these products" that is legal or not. It's *how you do it*. That was the point I was trying to make. It is perfectly legal to use GPL code in released software. People do it rather frequently. It's just that such use is conditioned on you taking another step, in this case releasing the source to your complete project as well.
What's your level of experience with general object-oriented programming? What about any form of programming? This might be helpful. http://www.raywenderlich.com/tutorials This thread might also have some useful links: http://www.reddit.com/r/ObjectiveC/comments/17cs4s/im_a_programmer_who_only_knows_java_and_is/
What is your level of knowledge on the subject (have you worked with OO languages before)? Is it just the syntax or objective-c that is giving you troubles? I always use the car analogy and to this day is pretty much how I still view objects. e.g. the object car has properties (color, make, model) and methods/actions (accelerate, brake, explode).
That's a good analogy. I am pretty new to programming. This will be the first language that I have a working knowledge of. Thanks. 
No level of experience. Thanks for the info. 
Without knowing your overall comfort level with programming it is harder to recommend something. Steven Kochan's [Programming in Objective-C](http://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/032188728X/ref=ntt_at_ep_dpt_1) is a pretty great book for beginners because it teaches you how to program assuming you know absolutely nothing and that Obj-C is your first language. I found it effortless to understand Methods using that book. To work with your Instances of your Objects, you need Methods since they let you manipulate and set the various attributes and variables of your Object Instances. If you have a 'Car' Object, it is going to have attributes like 'hasGas' or 'mpg' etc that need to be set or changed possibly. Methods are what you use to pass that information to your Instances of your Objects and "tell it what to be like" if you will. In a general sense, when you hear the word 'Method', you can say the word 'Message' in your head if that helps you make the analogy. Methods are 'messages' sent to the Objects containing variable data that is plugged into them. Messages tell the object what to do. I know that throwing up yet another book on Obj-C isn't particularly useful, but if you have a Barnes and Noble around I think it would be worth your time to pick up the book and read the Obj-Class-Method chapter and see if it speaks to you. The good thing about this book is that it teaches object oriented programming assuming generally using Objective-C specifically. If you already program in another language I'd just watch Stanford's free series on object oriented programming. 
Thanks. I have no experience so you hit it dead on. Thanks for the explanation. What is the difference between an object and a instance of an object?
Think of it this way. An Object is defined as *some kind of thing* that has a bunch of attributes and characteristics. Just because this thing is *defined* in your code as a Class, does not mean that your code has actually *used*, or *called*, or *created* an instance of it yet. Going back to the classic car example, in your code you could define a Class called 'Car' that has attributes like (the possibilities are endless and just depend on what you want) 'isClean' (Is the car currently washed or not?), 'gasTank' (how much gas it has), 'mph' (speed of the car), 'oilLevel' (amount of oil), etc. So now in your code in Objective C, you have defined this Car Class and its attributes. But that's really all you have done. It's like you constructed a *template* of what a car is, but you have not actually *'ordered a car off the lot'* in your program so to speak. So let's say you want to make a program that displays the dashboard of your car on the screen and will show the fuel gauge and amount of fuel, as well as the speedometer and the oil level. In order to do this, you must *order a car off the lot and create one* since all you have is a template of what a car is. So you *create and instance of the Class that is 'Car'.* This is your Car Object. When you create your Car Object, you have created one single *instance* of that *Class.* You can create as many instances of the this Class as you want, and they can have different variables set for their attributes. So in your programs, you could create 'CarA' and 'CarB'. When you create instances of your Classes, you then set the variables of the instances independently of each other. Both CarA and CarB share the same characteristics, -they both have fuel, oil, speed, and cleanliness ratings as defined by the Class attributes, but each *instance* of Car can have different *values* for these attributes. Your program might set CarA's speed to 60mph and CarB's speed to 20mph, and when your program displays both on the screen, it will reflect that. (BTW, again, *Methods* are the messages you send to the *Instances* of your Car *Class* (aka, the Object) to set these variables). Make sense? A Class is like the blueprints to a building. If multiple identical buildings are constructed from the same set of blueprints, you can think of the blueprints as the Class, and each identical building that is constructed from them as Objects, or Instances of that Class. 
Thank you for your help. This explanation was very helpful as was the explanation in that book. I downloaded it for free last night, read a few pages, and realized it's better than the book I was reading by leaps and bounds (for me) and ended up getting it on amazon. Thanks for the advice. I think I am grasping it pretty well. Now all I need is some practice!
I'm glad I could help. Thank you for the gold, that was very nice of you :) At the end of the day, training from any book is going to be kind of dry, but if you have to read through a boring textbook to teach yourself, this is the absolute best one I've found. Also, I don't know exactly what your goals are, but Apple has absolutely fantastic Developer Support pages for beginners: https://developer.apple.com/support/ All sorts of free links, videos, and manuals (not as good as this book though imho) that can introduce you to all of the technologies you need to develop for Mac OSX or iOS. Tons of good info to take advantage of. 
Also I don't know if you are planning on developing iOS apps at all, but if this is your goal here is a cool link for you: https://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/Introduction.html That link walks you through making a quick, super simple iOS app. You can do it tonight if you wanted to. You need to learn all the hard stuff under the hood of course, but I know when you are starting out and working your way through a textbook, coding super dry examples of how to make crude 'calculator' programs and stuff like that, it can be easy to get discouraged and forget what you are working towards. This little tutorial gives you a bit of instant satisfaction and a taste of what it feels like to design a crude iOS app interface. In the process, you will be able to take a peek at some of the views that contain the underlying Objective-C code. You have to walk before you can run, but I found going through this little tutorial once when I was bored of hacking my way though that book refreshing :)
Nice. Thanks for all your help!
It took me a second to notice the syntax there, so I was like "thats how most Mac app installers work" However, that's not necessarily designed for iOS developers, but really anyone writing in Objective C
How is AppCode compared to Xcode? I missed out on grabbing it during the JetBrains sale and I'm hesitant to pay full price when Xcode does the job well.
App code is for ios developers... I thought it was pretty obvious. 
Indeed and they use the same pattern for their other language-specific IDEA derivatives. For instance, PyCharm says [PyCharm.app].drag_to([Applications]) RubyMine uses the same pattern (the languages are similar enough for such a simple expression), but PHPStorm uses $[PhpStorm.app]-&gt;dragTo([Applications]) and webstorm goes with a javascript-ish [WebStorm.app].dragTo([Applications]) (nb: brackets denote an icon or app bundle, similar to those in OP's screenshot)
I should've phrased it like that.
Unless I'm missing something, that syntax is pretty generically ObjC, nothing specific to iOS. 
I know this isn't iOS, but I had the exact same realization today... except with ruby mine. http://pupeno.files.wordpress.com/2011/02/rubymine-3-17.png It's the little things really, and I love this kind of stuff. 
Of note, they do that for all their IDEs. At least, all the ones I've used, they use the "syntax" of their primary language.
Check out [NSScanner](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSScanner_Class/Reference/Reference.html). scanHexInt should do what you want. 
Sorry I'm a month late... lol Check [this](https://github.com/topfunky/hpple) out. It's called Hpple and it is an XML/HTML parser with an Objective-C wrapper. I does exactly what your looking for. I can't remember the exact code... But you parse the site and then do something like this: TFHppleElement *element = blah blah; //If you were looking for a string... NSString *xmlContent = [element content]; Edit: If you are using ARC, you will need to disable it for most (if not all) of the Hpple files you import into your project.
I found the video to be super helpful. It showed many practices which eliminate "boiler plate" code, ultimately making your code more readable! Hope it helps some of you :)
Thank you so much!
What class is this? 
I'm exactly in the same spot. Being a .Net developer mainly using C#. I'm having quite some trouble with the syntax and some concepts in Objective C. I second the book approach.
https://itunes.apple.com/us/itunes-u/ipad-iphone-application-development/id473757255?mt=10 Probably this one
A bracket is simply sending a message. [self doSomething] means "tell 'self' to execute the method 'doSomething' A property is just a method, so you can do [object property] to retrieve the value, and [object setProperty:value] to set the value. Nested brackets are pretty much chaining. The most used example would be the standard alloc, init: [[NSObject alloc] init] This means "take the return value of [NSObject alloc] and call 'init' on it. In C++, it could be (kind of) represented like: NSObject.alloc().init() Honestly, don't stress too much about it. After a little bit of time using the language, it becomes second nature. I'd recommend you purchase [Programming in Objective-C](http://www.amazon.com/Programming-Objective-C-5th-Developers-Library/dp/032188728X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1363275966&amp;sr=1-1&amp;keywords=programming+in+objective+c). It is basically a bible for all things Objective-C and will teach you everything you need to know about the language itself. 
You should watch the Stanford lectures on iTunesU. Those classes taught me the fundamentals of Objective C. The professor touches base on the language itself very briefly, but the projects he goes through will help you greatly. 
Ahh great! I will go and buy it now! I think learning the base language is defo the way to go with this, I just feel lost! When I learned the other languages I was taught from a tutor on console, so hopefully this shouldnt be too far off! Cheers!
No problem! There are two years worth of lectures. I went through a little over half of the 2010/2011 lectures and ~75% of the 2011/2012 ones. The older lectures cover memory management and the newer ones use ARC. In my opinion, it will help you to know a little about pre-ARC coding because as you create "advanced" apps you *might* have to import/troubleshoot code that was created prior to ARC. ARC stands for **Automatic Reference Counting** in case you don't know what I'm talking about lol
Thanks to you, I now know a little C++ lol.
I'm a pretty good Objective-C programmer. Hit me up if you have specific questions.
Why don't you just splurge for a good book on the subject?
Objective-C should not be too tough if you are familiar with Java, it is all about becoming familiar with what you know. I would first read the Objective-C language: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html A few things to google (possibly in order): - what a message (selector) is and how it is different and similar to a method in Java. - Memory management model (init, dealloc, release, autorelease, retain) - Delegation - properties (nonatomic, assign, retain) - Basic types you should be familar with, float, int, double - Objective-C basic types (similar to Java Number etc) NSNumber, NSString, NSArray. - UIView/NSView basic UI building block 
These Apple programming guides/documents are great, I would definitely check them out. Another popular book is the Big Nerd Ranch guide for Objective-C. Their iOS guide is also worth the money. Good luck!
I will do everything you said. Thank you. I actually don't know too much java. I know a little bit. Nothing too major. I've made a couple android applications that pull information from maps and location. I guess programming in general is just hard for me to wrap my head around.
Thank you! I will try the guides and look into that book.
Thank you! Right now I'm trying to read as much as I can and dabbling in code. One I figure out something I really want to do, I'll take you up on your offer.
I own 3 books. Can't remember the names as they're on my kindle. Reading books on programming with the kindle is difficult, too lol. Do you have any books you can recommend? I'm looking for as much help as I can get. I would absolutely love to be an objective c programmer, as I love the idea of programming and I love apple products.
It's very hard. I honestly didn't think it would be this difficult. But, you and me, we just need to keep our heads down.... In the books hehehe. 
Thanks! I'll look into it. If you have anymore good books or sites, throw em at me!
For when things will get more interesting… http://nshipster.com/. Now, aside NSHipster, here https://github.com/languages/Objective-C (-- especially if you're into mobile) you'll find many great repos in order to study code from them, see how things work, and (eventually) fork and implement them on your own projects. Here's another cool site https://www.makesets.com/ios-resources. And a few tips http://stuartkhall.com/posts/ios-development-tips-i-would-want-if-i-was-starting-out-today. Perhaps you'll find of use this reddit wiki, too: http://www.reddit.com/r/iosdev/wiki/index
I second that, Big Nerd Ranch material is great.
These are the kind of books I like. When I started java I read Head First. It wasn't the most professional of books, but they give examples and walk you through creating apps and adding onto them. 
You all are awesome. Everyone is saying good things about Big Nerd Ranch, so ill definitely look into those. And I read one Apress book on Java, can't remember how I like it thoug. (I've been through quite a few java books.) I know for a fact that one of the books on objective c I own is by oreilly and I don't like it at all. Chapters are long and there's not one thing interactive about it. When I tried to read it, all I could think of was a classroom being taught by a professor over a loudspeaker. Boring as hell. But I will definitely get one by Big Nerd Ranch. And thanks for your help!
One more question.... Which do all of you think is easier between Java and Objective C? (Some of you seem to know some java, so I figured I'd ask.)
FWIW, I found the Objective-C tutorials by Simon Allardice on Lynda.com to be the best. I subscribed for a month and watched the whole series a few times. It was totally worth it. Once I got through that, I supplemented my knowledge with books on specific things like OpenGL.
&gt; Which do all of you think is easier between Java and Objective C? I don't think it's a question of which is easier, since aside from some really gentle use of pointers, the Objective-C *language* is no harder than Java. But if we're talking the Cocoa or iOS *frameworks* versus the Java API, that's a completely different story. There are quite a few design patterns being used in the frameworks that are different from the way most people do things, and it all seems a bit odd until you wrap your head around it. Basically, with Cocoa or iOS you already have an application from the get-go, though one that doesn't do a whole lot from the point of view of the end user. As a programmer, you're in a sense *extending* parts of that application—you hook into the infrastructure of its default behavior. That's pretty abstract, so let me give you a fundamental example. Take tables. (Sorry if you're already familiar with this.) In iOS you use the UITableView class. In most programming environments, you would *tell* the table what to put in each row. In iOS, it's a different model. You create a *delegate* object for the UITableView object: a UITableViewDelegate object. When the table view is ready to populate a row with data, it will *ask* your delegate object for the data. You don't have to worry about *when* to update the data. That's just one thing. There are other design patterns apart from delegate. A book like the Big Nerd Ranch guide will do a good job of explaining these various patterns and aspects of the framework. (Also, there is a very good online forum to go along with the book, and I've seen the author post on it.) In short, the language itself is no big deal.
I REALLY like Lynda.com. Used to have a subscription. Totally forgot about it! Thank you!!!
&gt; I like the idea of programming. I'm not sure how much programming you've done, so if you don't mind the suggestion, maybe you want to take a look at this book from the Big Nerd Ranch first: http://www.amazon.com/Objective-C-Programming-Ranch-Guide-Guides/dp/0321706285 Amazon says something about it shipping in 1-3 months, but I've seen this book on the shelves at Barnes &amp; Noble. You might have a choice as to where to get it. You probably don't need to get this one and could go straight to the iOS book—it's for beginner programmers—but I thought I'd suggest it. Programming can be a bit overwhelming, and it's hard to find a place to start sometimes. Apart from new syntax and object-oriented programming concepts, once you start throwing in frameworks and IDE's, things can get complicated and pretty frustrating at times. Also, things move fast, and sometimes a book (or even an online tutorial), as recent as it may be, may have some small aspect that's a little out of date, especially if you're dealing with XCode. *That* alone can get really frustrating at times. In any case, even if you're not so strong in Objective-C, if you have some introduction to object-oriented programming through Java, you ought to be able to handle the Big Nerd Ranch iOS book—especially if you make use of the online forum that goes along with the book and download the sample code to look at, should you really get stuck. There'll be frustrations, but once you get past them you'll learn from them. Best of luck!
Thank you so much. I'm glad that everyone is so helpful. I don't have very much experience programming, but I did build a couple apps when I was trying out android development. I don't have much experience with Xcode, but I do have experience with Eclipse... But from what I hear, they're not very much alike. I'll look for that book. I would like a beginners book first. Believe it or not, Barnes and Noble closed down in my city years ago, so all I have is books a million, and I've never seen anything by Big Nerd Ranch there. But I'll be on the lookout. Once again, everyone has been great. Thanks! I'll be back!!
No website. Get books. Do the tutorials and write in the code, *from the book*. I'm serious. If you want a mentor, choose Paul Hegarty. Watch his videos from the Standford class. There are now 3 years of classes, with the last two being very relavent to iOS programming today (ARC, Xcode 4, Storyboards, etc).
Wow. Thanks! I don't like websites too much. I'll stick to books, like you said. And 3 years?! That's nuts. I'll start on them tomorrow. Thanks a lot!!
You can also watch the WWDC videos from 2012 and 2011. You have to be logged into http://developer.apple.com/ios Those are informative, but Prof. Hegarty's class is much better. He actually puts together apps in his lectures. It's all on itunes.
Awesome. This is awesome.
Big Nerd Ranch is great. The Objective-C book helped me so much.
I can't believe this hasn't been mentioned. Go look at the CS 193p videos by Stanford. I prefer the ones taught by Paul Hegarty. GO WATCH NOW. https://www.youtube.com/watch?v=KbiHXuiZM4A&amp;playnext=1&amp;list=PLD208B806337FCF3F&amp;feature=results_main (The actual course links are here. Yes it's iOS related but I think it's got plenty of Obj-C.) http://www.stanford.edu/class/cs193p/
I think that before ARC, I could say with confidence that Obj-C was a harder language to pick up. Kind of like the difference between learning to drive automatic (Java or post-ARC Obj-C) vs. learning to drive stick. Don't really have to worry about that anymore though (although memory management is a good concept to understand).
Holy shit sticks. That's a lot of reading material. Thanks!
Man, that is a *great* list of resources!
ok, so I realize if i get the input as a char array I can make it work. Still though, I am interested to know if it's possible to get the input as an NSString. Thanks again
Afaik, you just convert it to an NSString ... NSString *myString = [NSString NSString stringWithBytes:myCharArray length:nChars encoding:NSUTF8StringEncoding];
This would be the Objective-C equivalent of reading everything that came from stdin: NSFileHandle *stdinput = [NSFileHandle fileHandleWithStandardInput]; NSData *inData = [NSData dataWithData:[stdinput readDataToEndOfFile]]; NSString *str = [[NSString alloc] initWithData:inData encoding:NSUTF8StringEncoding]; NSLog(@"%@", str ); 
&gt; I've seen some posts about using "`scanf`" but I can't seem to make it read in a string. That would be for a plain-C string, which, honestly, would be a whole lot easier. 
Yes, I was looking for something like this just the other day. SQL Management Studio is awesome, but the less I have to jump into a virtual machine the better.
I've been using Navicat in trial mode, but it's way more than I want to spend, so a hearty yes from me. Heck, if you need a hand coding, I'd be happy to lend one. I'm afraid I am unaware of your other app and tend to use Base instead, but I'll take a look. 
Freetds. I've been able to get it compiled and can run TSQL via the command line. Through that I've been able to connect to both a SQL Server 2012 database and a SQL Azure database, executing commands and getting result sets back.
Yes, a thousand times yes.
I would love to put this on the younger peoples computers at work and then give them the, "when I was your age!" speech.
That sounds like a marvelous Idea. Keep us posted!
Thanks for the information, guess I'll just have to merge the two versions the hard way!
In the long run, your probably right. When I found out about the 10.6 bug I duplicated the project and hacked away until I found the source of the crash. The solution worked well enough for me and my few 10.6 users so I figured it wasn't worth a merge. However, now that I'm planning a bit of a feature update I thought it would be smart to have it all "under one tree." Thanks again for the tips, it should make the process slightly less painful :)
So, how do you explain the numerous documents which explain how to build a binary that links and executes on older systems as well? The problem isn't that Apple doesn't want you to support older systems, but that they are willing to deprecate and remove old API quite fast (unless it's a KPI, in which case you can assume that it's there forever (or until they change the architecture). And Apple will do a metric shitton of work on your behalf to make your binary ABI compatible with the KPIs (seriously, look into IOKit, that shit is is crazy voodo magic, runtime binary patching)). It's no rocket surgery to stay backward compatible, the biggest issue is probably having a dev machine on which you can test your binary.
What are the exact issues that are causing the 10.6 crashes? Check for them using `respondsToSelector:` and fall back to something that works in 10.6 when needed. I do this in Reddit Notifier, for example. NSJSONSerialization is 10.7+, so I do a string-search thing instead in 10.6. 
I've got a couple issues with some things I did in IB, as well as a few convenience methods here and there which don't exist. I'll most likely have to port the IB stuff to code so I can use `respondsToSelector:` Shouldn't be much of a problem, thanks for your help!
Ah of course, multiple nibs! That'll save me a bunch of time...
That is a good point, certain aspects of apple development provide a lot more resources to be backwards compatible, but others are simply horrible. I tend to think their are two schools of thought battling out at apple. I am also not against either philosophy. Here is a counter example, Objective-C literals came out which are a compiler feature of clang. However, they are not available in 10.6. To my knowledge there is no reason why this is the case because they are a compiler feature. It seems that decisions like this are made for the soul purpose of getting developers to upgrade. 
The literals are just syntactic sugar, here is a blogpost that tells you what kind of category you have to write: http://petersteinberger.com/blog/2012/using-subscripting-with-Xcode-4_4-and-iOS-4_3/ As to why they didn't patch the 10.6 ObjC runtime... Well, even if they did with an update, you still had 10.6.8 and lower which wouldn't be able to run the new literals, so there are still backward compatibility problems. It's a tradeoff, people want to use new features, but not all of them are backwards compatible.
Yeah i guess I see your point. If it is just syntactic sugar than it could easily have been implemented all in compiler. I see with the subscripting why it might require up an update though.
Where is the 14.4 setting? I hope it makes the old dial up sounds to!
I'm not sure what you'll be doing that you don't care about the Cocoa (or Cocoa-touch) frameworks, but if you just want to get up to speed on the language itself, you might want to try [GNUstep.](http://www.gnustep.org/) There is a Windows installer: http://www.gnustep.org/experience/Windows.html I'm not vouching for any of this, but you could give it a try.
objective c without the cocoa framework is pretty useless. you won't even have dynamic data structures.
[link](https://itunes.apple.com/us/itunes-u/developing-apps-for-ios-sd/id395631522)
Hey there, I have some time right now. Hope it's not too late! I never got any major help here, but I hope I can! Could you please be more specific in what you need and what you think is the problem? I'm taking a quick look meanwhile ;) Edit: It might be a good idea to explain in detail what you're trying to do. A few "general programming" tips: - If you're copy-pasting your code, there's something wrong. Always. If some part of your code are exactly the same as some other parts, use a method to do that. It makes the code much smoother, smaller, and easier to debug / manage. I.E. case 0: TargetLevel = @"4"; [defaults setObject:TargetLevel forKey:@"CurrentLevel"]; [defaults synchronize]; [[NSNotificationCenter defaultCenter] postNotificationName:@"TableContentUpdate" object:nil]; [[NSNotificationCenter defaultCenter] postNotificationName:@"viewChange" object:nil]; break; case 1: [defaults setObject:@"5" forKey:@"CurrentLevel"]; [defaults synchronize]; [[NSNotificationCenter defaultCenter] postNotificationName:@"TableContentUpdate" object:nil]; [[NSNotificationCenter defaultCenter] postNotificationName:@"viewChange" object:nil]; break; case 2: [defaults setObject:@"6" forKey:@"CurrentLevel"]; [defaults synchronize]; [[NSNotificationCenter defaultCenter] postNotificationName:@"TableContentUpdate" object:nil]; [[NSNotificationCenter defaultCenter] postNotificationName:@"viewChange" object:nil]; break; this might become: case 0: case 1: case 2: [defaults setObject:[NSString stringWithFormat:@"%d", 4+item.tag] forKey:@"CurrentLevel"]; [defaults synchronize]; [[NSNotificationCenter defaultCenter] postNotificationName:@"TableContentUpdate" object:nil]; [[NSNotificationCenter defaultCenter] postNotificationName:@"viewChange" object:nil]; break; But it can be done a lot better. - Here, are you really trying to use only three of these? &gt;@synthesize assessmentWeighting1; &gt;@synthesize assessmentWeighting2; &gt;@synthesize assessmentWeighting3; &gt;@synthesize assessmentGrade1; &gt;@synthesize assessmentGrade2; &gt;@synthesize assessmentGrade3; Whenever you're doing something like this, you're actually writing three times as much code. This means that you have three times the chance of creating bugs / unexpected outputs in the whole program flow. Why don't you just use a NSArray? NSArray *assessmentWeighting = [[NSArray alloc] initWithObjects:assessment1, assessment2, assessment3, nil]; then you have your objects as [assessmentWeighting objectAtIndex:1]; And by just managing indexes, your code becomes three times better. Also, if somehow you decide that you need 4 rather than three, you just need to change one number (if you programmed it good enough ;) ) There's also a couple of things which are more specific for objective c, but you'll improve that with time. 
Hey, cheers for the reply, fortunately we have until Monday and it's currently 11pm BST so your replies are most welcome :) and we hadn't optimised our switch statement like that but that it is a great idea and we shall try that! Also I believe that those synthesizes are outlets from UILabel's (I didn't do that part of the design unfortunately.) The problem we've been having is with the keyboardDidDismiss function (which is currently commented out in that code, my bad) which is ending up with values that are incorrect, for example the string key is ending up as a UIDeviceWhiteColor, or a UIButton or something else random like that by the time the keyboardDidDismiss funtion gets called. This results in a bad_access or ID error type calling. I think this is because key is getting freed up too early perhaps? Your help is greatly appreciated :)
Is the whole project too big to be uploaded somewhere? I mean, a bigger picture would surely help :) Have you tried following the execution with the debug tools? Edit: Anyway, I don't know if you defined key somewhere in your .h file, but it looks like you're not initializing or setting it. There is probably interaction from other classes who set it with random data, causing your problem when executing "keyboardDidDismiss"
Ha! Don't worry, we all know something about messy code. Just remember that the later you fix it, the harder it gets ;) 
I'm realising that the more I go on :P
Hey I'm sorry, I looked at your code, but it actually lacks the basics of a lot of stuff, so I'm not sure we can solve this quickly. For example, here: Assessment *tempAssessment = [[Assessment alloc] init]; tempAssessment = [moduleAssessments objectAtIndex:0]; tempAssessment.grade = assessmentGrade1.text; [moduleAssessments replaceObjectAtIndex:0 withObject:tempAssessment]; [tempAssessment release]; Keep in mind, whenever you declare some variable, like Assessment *tempAssessment; You're not using any memory for that thing, it's just an "arrow", a pointer, which is pointing toward some object which is somewhere in the memory, and that "arrow" lets you manage the object. So, look at this: Assessment *tempAssessment = [[Assessment alloc] init]; You're creating an arrow pointing at a new object (That's fine, if you were trying to create another object, but in this case you're not, as you immediately do: ) tempAssessment = [moduleAssessments objectAtIndex:0]; This means: Take the arrow and point it to this object (which was stored in the moduleAssessments array). Ok, now you're pointing at the object you wanted. But what about that "new" object you created with the previous line? It's not gone, it's still there, somewhere in the memory. But you cannot access it anymore, and that's a big deal, considering that in order to release the memory and make it usable again, you should "tell" the object to delete itself. Basically, that object got lost in space, because there's nobody who knows where it is. tempAssessment.grade = assessmentGrade1.text; This is fine, you did pretty much what you meant to do. Just keep in mind that you're not managing actual objects, but arrows. This means that if the assessmentGrade1.text gets erased before your tempAssessment, you're gonna have a problem. In this case, you're fine because you have probably declared your @property NSString text as a "retain" property. This means that the ownership of the text will be "passed on" and it won't be deleted when the "assessmentGrade1" object will be deleted. Now: [moduleAssessments replaceObjectAtIndex:0 withObject:tempAssessment]; I get it, you're trying to save this "modified" tempAssessment into your array. But if you consider that you've been working with arrows, you'll realize that this statement is completely useless, because you previously said that tempAssessment = [moduleAssessments objectAtIndex:0]; which means that tempAssessment is an arrow which is already pointing at the array. Basically, you're telling the array to replace the object at index 0 with.. the same object. Finally (and this is what's causing you problems ) [tempAssessment release]; You're deleting the object pointed by "tempAssessment". And yes, it is the object inside the array, so the next time you'll do something like [moduleAssessments objectAtIndex:0]; You'll be given some random object. Now, this is a huge problem you would have eventually stumbled upon. It is not the specific problem you're facing right now, but that's the same thing happening with the "key" arrow. Try to keep in mind this "Arrow" stuff, and clean your code. It's a huge work, and I have to go, but I hope I helped you enough. :( ...... Ok, here's a quick fix I am already regretting telling you. In such cases, you're required to do a complete rewrite of your code. Now, I don't know if you have this homework due tomorrow (or something like that). I am STRONGLY suggesting to you to rewrite your code. Seriously, don't take this lightly, it's the best thing. But If you have your homework due tomorrow, there is a *small* chance that removing all of the [something release]; could fix it. This will also cause your app to crash after you use it after 2 minutes, but I guess it's better than handing a non working project. Hope that helps!
This has been a great help! It would explain why we were getting some variables with completely random object types in them, refactoring is definitely something I will try and get on to tomorrow, fortunately I have approximately 3 days and there are 3 people in the group so this should be achievable! You have been phenomenally helpful with this information and I just need to figure out the appropriate fixes based off of it :) As a quick question then would be better to create a pointer that then points to the first instance of the moduleAssessments array and then modify it accordingly and then move on to the next element that's needed? so for example: Assessment tempAssessment = [moduleAssessments objectAtIndex:0]; tempAssessment.grade = assessmentGrade1.text; And then it'll be saved into the moduleAssessments array because the raw object has been modified? Unfortunately I've come from a C++/C# background where I'd barely used pointers in C++ and when I'd moved onto C# they have almost never been used in the experience I've had. This concept is still a bit new to me :) 
Hey, I'm sorry for such a late answer, but yeah, that's definitely right! You got it right at the first shots! Awesome! You can find a lot of information online about the memory management in objective-c just keep this basic pointer stuff in mind when programming and you should be ok! If you have got any questions I can try to help, just pm me. We're from the same time zone (I'm Italian) but I'll be from my phone until sunday evening, so won't be able to help with huge blocks of code, but it's fine for smaller snippets. Good luck! :) 
Pretty much. If you used Core Data it'd look like this: * Model * NSManagedObject (Generated for you from Core Data) * View * a subclass of UIView (from xib, storyboard or code) * Controller * subclass of UITableViewController (from xib, storyboard or code)
thanks for that. First Question: Is there any reason why I shouldn't split those particular files into those groups, within the application? Second Question: By implementing an NSManagedObject instead of writing out Car.h and Car.m from scratch, does the Object created then extend down the stack through to the DB? 
1) I haven't heard anyone discuss *best practices* for organizing groups. I should clarify that Core Data generates NSManagedObject**s**; one for each *Entity* in your schema. I like to group them all together. 2) Yes...somehow. They did a good job of abstracting it so I don't really know what's going on under the hood. 
I think it's better to have a service layer to make your database calls, or else your controller gets extra-fat and you need to re-write db calls in other areas. Also, the 'View' in this architecture is something of an abstract. It's possible to have your entire 'view' in ViewController.m Finally, sometimes you don't want to access your NSManagedObject directly. It's hard to explain where this might occur, but there can be some pretty sophisticated scenarios (namely with threading) that will lead to some odd crashes. In this case one solution is to use ViewModel classes. One other thing to note - if you use CD generated files you don't want to put code in them since those get overwritten if you re-generate your schema. Any custom code should be put into Extensions. 
I create initial NSManagedObject subclasses with Xcode and then add changes manually if I have custom code in there. I find it cleaner than extensions.
Yeah, but if you have to update or change your entities or schema and regenerate the NSManagedObject subclasses, then you have to make the custom changes again. Extending the classes is the best solution. You don't "lose" anything by doing it this way.
Yeah,that's why I said I do changes myself later on. 
Ahhhh, i misread the 'add changes manually' as 'RE-add my custom code later' Still, doesn't that lead to having to make those changes twice - in the model file and then in all your entity classes?
If I add new property to NSManagedObject subclass, I don't regenerate the whole class but add the property manually. It's 2 lines of code in most cases. 
I understand, but aren't you still making that change twice? You have to add the new property to the subclass, and you have to change the xcmodeldata file too - correct?
Exactly. There's also momgenerator, which some find to be ideal solution for this problem but I see it as additional clutter, like extensions. 
There's nothing wrong with extensions, I find them very useful. Until there's actual 'partial class' support in obj-c
Thankfully I'm only going for simple scenarios at this point in time. 
I am working on a problem just like this and my solution was to make a cars.h and cars.h, which did the actually DB calls and shoveled the car data into a Car object. The car.h and car.m should just hold information about the cars and cars.h and cars.m actually pull the data. Then if you have to pass car objects to something else (Say like freeway.h and freeway.m), then all you have to is pass the *Car object. It's a bit more code, but you definitely are working with how the language should be used.
The nib actually represents the view - not the view controller. The view controller is what handles events from the view, and communicates changes to/from the view etc. The modal could be a database, or it could be simply an array of Car objects. It is just data. Applying an exact MVC design is nice, but the real goal here is to separate concerns. As long as your code is flexible enough to display data in the ways you need to, and changing the way things appear does not affect the data, you are achieving the same goals as MVC. TLDR: Don't stress out as long as you have basic separation of concerns, for example make sure you can manipulate data independently of the view and vise versa. 
This is why you use TDD to write your service layer :)
I've signed up. This is a problem my company faces with clients; none of the current products make it easy to do for normal users.
Paul's lectures are good, but it drives me up the wall every time he says "call a method". In Obj-C, we don't call methods, we *send messages*. The runtime calls the methods.
&gt; Choosing Explicit over Implicit This is an issue caused by a lack of familiarity with IB. On the other side of this, there's times when people will search code for an incorrect setting, only to find out that it's not something they've set, but rather that the default setting on a property is not what they're looking for. Really doesn't matter which side you're on, familiarity with the process and with your team's work flow is going to make this a non issue. &gt; Tight Coupling I do agree with the outlets and custom views. I've spent much more time than I'm proud of wondering why something isn't working only to find the outlets aren't connected. Custom views appearing as a solid box is really annoying too. &gt; Working With Others This has never really been an issue on my teams, we do, however, have to be a little bit aware of what everyone's working on so we don't step on each other's toes. Projects I've done without IB still handled the situation in this way to prevent duplication of work. A lack of communication is not a fault of IB. That said, god help you if you do have a conflict. &gt; It’s Part of Xcode I wish AppCode could deal with nibs, but Xcode is nowhere near as bad as it used to be. The crashes are almost completely gone for me and when they do happen, they happen both in IB and on the code side. &gt; Location, Location, Location Again sounds like an issue of unfamiliarity with the way it works. Constraints were a bit confusing when I first started with them, but after using them for the past few months, they no longer give me trouble at all. I can reasonably predict what constraints are going to be set by the system and what I need to add to make things work how I want. It seems like a personal preference thing to me. Try to be comfortable with both, but master one or the other. You'll always be prepared, or at least, know enough to know where to look for problems. There are many things IB can't do that I wish it did (render custom fonts, stretchable images, displaying custom views, the ability to zoom into the stage would be great), but overall it works for how I work. If you completely took it away from me tomorrow, I might grumble a little bit, but then I'd switch to the code side and work things out there just as well. It cuts down on a lot of monotonous layout code clutter. It simplifies some of the process if everyone's on the same page, but again, that comes down to your team and your own internal communication. To each their own, at the end of the day, both ways are capable of producing great end products.
Wow, what a frustrating post, *especially* because I agree with so much of what the poster wants, but he undermines his own arguments. * He hasn't used the interface builder environment in Xcode 4 (released in June 2010) or visually edited storyboards (introduced for OS X in 2011), since he hasn't used those tools since 2009. * He complains about merging NIB files though it's gone from impossible to incredibly annoying with the transition to XIB files. It's still a huge issue, but it's not intractable; that's a big difference. * "The less I have to use Xcode for more than anything except a text editor with completion and a compiler, the happier I am." and "... start moving to code. We are programmers after all." aka the *text rules! gui's drool!" argument. The last one is the most frustrating because its a completely different battle. It has less to do with improving interface editing than getting users of Instruments and the clang static analyzer to switch to vi. There are pros and cons to that as well, but its a different debate to argue. I strongly agree that users should: * Demand better stability (whether that's with the tool crashing or the file formats changing) * More openness of the file formats for improved corruption auditing, debugging, and automation * Synchronicity with a text based format (making switching tools mid-stream possible) I've used some of my paid Apple support requests to ask for improvements to tools in the past, and I've struggled with bugs and vagaries of the storyboard editor. But it's not a convincing argument to get folks to switch to code only editing or to convince Apple to spend resources improving the interface editor... which frustrates me because it's very close to being right on the money.
IB arguments are such nonsense... Also, what's up with Twitter-only comments on the post?
Objective-C is not conducive to learning on an ebook. Long descriptive identifier names are looked on very favorably, but try reading something like `[loginButton setTitle:current.contents forState:UIControlStateDisabled]` when it's wrapped and line broken by the auto-formatting of most ebook readers. Unfortunately, the lack of formatting control gets to be such a problem in some ebooks that I strongly recommend the physical paper versions. (And I'm a *strong* proponent of ebooks.)
The big problem with the Big Nerd Ranch guides *right now* is that they don't use Objective-C literal syntax yet so, instead of writing *muppets = @[@"Ernie",@"Kermit",@"Yoda"]; you have to write: *muppets = [NSArray withObjects:@"Ernie",@"Kermit",@"Yoda",nil]; I think that everyone who deals with legacy Objective-C needs to know both (as well as manual memory management), but when learning the language for the very first time, using Objective-C literal syntax may make the logic of the program clearer. A new edition of the Objective-C book will be out at the end of October, and a new edition of the iOS book will be out in November. If you need to buy the materials now, just know that there are some syntax shortcuts you can learn later on if you stick with the latest versions of Objective-C. Don't get discouraged because of what seems like a lot of typing.
I read through this book at B&amp;N the other night, and thought it was *mostly* very good. There are a lot of tutorials out there on Objective-C in its various incarnations, but many of my habits were picked up on by reading comments, blogs, and people struggling to adapt to using it on real world projects. This book is a great print summation of much of that real world experience in one place. The Just remember that not everything in there is gospel; it's the author's opinion but I only saw a handful of tips I disagree with. And fortunately, most of the items (but not all) can be adopted or ignored independet of the other tips. It's distilled advice that's pretty good if you take what you like and leave the rest.
cocoa.h is an umbrella header for Apple's frameworks you should use to develop Objective-C apps for the Mac. It just contains imports for `Foundation.h` and `AppKit.h`. (And today it also includes `CoreData.h` but that's considered optional.) On iOS, `AppKit` was replaced by `UIKit`. There is no cocoa.h umbrella header, but your projects are still set up to include their iOS equivalents. So, it's partially a marketing term for Apple's Objective-C frameworks and partially a term for an almost required umbrella header for Mac development depending on whether you're talking about the use of the term in code or not.
I've got a question about the the book's pages, since you held a physical copy in your hand. I like the idea of syntax coloring, but I *hate* these computer books coming out where the page is glossy. Is the paper regular book paper (more or less) or is it glossy? Thanks.
I would say focus on some of the syntax/objective-c language, Xcode and Interface builder/storyboards, and the simulator. You could probably make a new project that just displays Hello World in a UILabel in that amount of time. 
Very similar concept. Except of course, MSSQL instead of MySQL.
You probably have more luck cross posting this to /r/scholar.
Thanks, I shall have a try
Objective-C is much closer to C and C++ in terms of what the compiler can infer than are Java, C#, etc. Your header is your public interface--if it's not in the header, assume nobody outside the implementation file can see it.
One possible thing, I'm not sure how huge of a deal it is however, is that you could store the oath key in the keychain rather than nsuserdefaults. This would allow it to remain on disk encrypted. 
http://downloadmoreram.com
No, you hardly ever need to drop down to C while coding objective C. Don't do it unless you have more free time than you know what to do with. 
Maybe brush up on pointers and c data structures (structs, enums and their bitwise operators etc) a bit, other than that you should be fine. 
No, just do it. 
You can probably get started without understanding C but you may run into problems when you want to use certain libraries. With ARC you can program Obj-C without having a full understanding of the memory management system but at some point this will come back to bite you.
What everyone else has said is pretty much true. Your Java OO skills will translate well in the Objective-C world. Read Apple's freely available Objective-C developer documentation. As for C, understanding data types and pointers will be helpful. A great book for one such as yourself is Bill Dudney's All the C You Need to Know. https://itunes.apple.com/us/book/all-the-c-you-need-to-know/id581989356?mt=11 Good luck!
I appreciate all the other answers, but this is the one I was hoping for ;)
I prefer ObjC but frankly who cares!! It's not an ideological contest; you use the language that makes sense. Anyone who think's it's about "our team" is probably a shit programmer.
Useful libraries. That's the key.
I figured I'd get the word out. Personally I'm not a fan of the motivations, but it would be cool to see if someone de-coupled a useful private library and made it available to the world.
&gt; It's not an ideological contest; you use the language that makes sense. See: [Latin](http://en.wikipedia.org/wiki/Latin).
I'm not sure what your claim is here. What does Latin have to do with this?
I'm not sure if beautiful is the right adjective here. I love ObjC but it's pretty ugly to look at sometimes.
It may not be the prettiest, but it's quite often the most readable.
Easily the most to read* FTFY
Yeah, I agree. Still my favorite language though. :)
If you want to really understand what's going on I'd recommend it. I'd lookup pointers and structures. The rest should be less nessisary for objective c.
The book is pretty good, its takes a pragmatic approach to teaching you best practices... but it's more for the intermediate programmer, some of it goes over the beginners head just so you know.
Ha! I was just about to tweet Drew and say "dude I just found someone on reddit using room!" And then I realized you were Sam haha. I was at valiocon but didn't get a chance to introduce myself. I'm Erik behind @ElliesGames Good write up. I hope I one day figure out the layoutSubviews technique you talked about. Maybe I'll google it now. 
Great suggestion. Thank you!
Ive Belén using xibs for while and would haver agree on all the points made on why not to use them.
That's not a bad thing.
ObjectiveC/Cocoa is a lot more "beautiful" than say C++/COM or C#/.NET
All object references (NSString, NSArray) are pointers in Objective-C. Primitive types such as int, float, double and simple structures do not need pointers. Objects are on the heap while primitives are accessed via the stack. Not sure if that helps or what level of knowledge you have with programming so let me know if you need more info.
Because NSString is an object. **'int' is an basic data type, and not an object.** If you'd used NSNumber object instead of int (e.g. you wanted to put the age variable in an NSMutableDictionary), you'd need NSNumber \* theAge because then it's an object, not a basic data type. The basic data types are stored whole in a particular variable's allocated memory so they need no pointers. An Object is larger (in its memory footprint) so only a pointer (which is typically the size of a long or long long basic data types, i.e. *a pointer is a basic data type, but not the objects they point to*) to the object in memory can fit whole in a variable; the Object itself can not. A pointer is literally "pointing" to that other part of memory. The pointer itself gets represented as (Object \*) because the variable *isn't the object* but a pointer or reference to another part of memory that holds the actual object. The choice of "\*" comes from C. "\*" dereferences (obtains the value of) the memory (object) pointed to by the variable) so you can think the declaration: NSString \* name; as: "NSString is a dereference of the variable 'name'" *which implies* that 'name' must be a pointer to NSString, thus the shorthand of declaring a pointer is 'NSString\*'. There is also "&amp;" used sometimes which extracts the pointer of a variable itself - that is, the memory location where the variable resides in memory. You'll see this most often with NSError: NSData \* theData; // a pointer to an NSData object NSError \* theError; // a pointer to an NSError object NSXMLDocument \* theXMLDocument = [[NSXMLDocument alloc] initWithData:theData options:NSXMLDocumentTidyXML error:&amp;theError]; Here you have defined a variable, error, for the method to put an NSError object if there is a problem with the method execution. Otherwise no object is put there, so you put: if (theError != nil) { // handle error } // else it's A-OK; carry on 
That was a really nice explanation. I've been curious about some of these basics, including &amp;. This helped a lot. In your example, theError is a pointer to an object, which might be an NSError object or might be nil. What are some guidelines for using '&amp;' ? Say, you're not sure if the object is nil, then extract the pointer with &amp; 
Reinventing the wheel seems to be happening more and more in objective-c land these days :(
Yea I just looked through it and i think im going to try to set some breakpoints to inspect the variables to see what's going on, but when i add keepPlaying = true; after the continueGuessing statement in the else if block, it works perfectly fine. Strange. 
Any reason you're using a continually checking while loop and not just putting the game logic into, say, a playGame method? That'd be the easiest thing. Check their input after that. If it's yes, call playGame again...
Cool! Objective-C stands out among other languages in its descriptiveness and verbosity. I don't recommend this, but I've seen people dismiss code commenting as unnecessary when someone's written properly modular, descriptive Objective-C.
Yes i wanted to originally have comments, but because this exercise was word for word in the book i decided to shake it up. The end part with the if/else statement about choosing to play again was not in the book. I was going to make comments, but then I forgot out of frustration. As you can tell, I'm sort of new to this. 
"I dont' use interface builder. I use vi. Look how elite I am" 
This post is pretty stupid, I wouldn't take anything it has to say very seriously. Keep on keeping on with IB.
Any luck in that pursuit?
Something to think about with pointers vs value types and something that should help you visualise them is that they both exist in memory somewhere... memory has an address and content... so 32bit objects have an address... lets say 0x00ffaabb is the address... if you looked at that address in memory you would see its content. So for an integer that content would be the integer number or for a pointer it would be an address in memory somewhere... The integer 22: Address: 0x00ffaabb Content: 0x00000016 A pointer instead: Address: 0x00ffaabb Content: 0x00bbccdd In your case "name" points to an object and all objects in objective-c are created on the heap. There is a pointer object "name" that contains the address of your string in the heap somewhere. The integer in your example will exist on the stack instead of the heap as its local to the method. All (almost-all) objective-c objects will exist on the heap and require pointers to the objects rather than the simple data types. 
&gt; "NSString is a dereference of the variable 'name'" This should really be... &gt; "NSString is a pointer to the variable 'name'" ... The act of dereferencing is to go from the pointer to the value pointed to. The (*) is the dereference only in the case where it is used as the dereference operator, not in the declaration of the NSData or NSError where it is the pointer declaration. They are two separate things which use the same symbol. Also, may be seen as pedantic, but the &amp; operator extracts the address of the variable only... using the term "extracting the pointer" of a variable is a bit fuzzy.
&gt; Arithmetic conversion (signed versus unsigned comparisons). E.g.: &gt; NSInteger x = -4; &gt; NSUInteger y = 4; &gt; &gt; if (x &lt; y) &gt; NSLog(@"This never gets logged, and has everything to do with C's semantics!"); Urgh! I remember back in the hazy days when I was first using C in anger falling foul of this and cursing K&amp;R for not automatically casting things to proper ranges!
I believe you can purchase an Enterprise Developer account which allows you to add provisions for any number of devices. I don't know what the app is, but it might be what you're looking for. You would just need all of their UDIDs
What you and your clients need is the [Volume Purchase Program](http://www.apple.com/business/vpp/). You can create custom builds (if necessary) and the client can get things directly from the App Store in bulk. It saves time and distribution effort for you. You can also, as mentioned by /u/Duckarmada, enroll in the Enterprise developer program. (In fact, you may need to to use the VPP; I'm not sure.) That would allow you to distribute apps directly with no App Store involvement at all and does *not* require you to have all the UDIDs.
An enterprise account is a good option if you distribute the app within your own company, otherwise vpp sounds like what you need, this was posted to /r/iosdevelopment the other day: http://bigswing.com/blog/2013/7/28/apple-volume-purchase-program
Go watch the WWDC on MDM from this year. There are some changes to the VPP that will be great, especially if you have MDM set up already. 
Vaguely related: what are the main pros of SQLite Professional vs. SQLite Manager for FireFox for an iOS dev?
Awesome, thanks! I'll check it out today!
I'm just getting started with CoreData - what is modular declaration?
Yes, that would be nice. 
You can just Cmd+Click on the method name (to preview) and then swipe three fingers left to come back. Much quicker than waiting for the preview popup to appear.
As if Xcode wasn't slow enough already... Sorry, but this really isn't anything I'd want to see in Xcode. When I invoke a method, I usually know what I'm doing there, or I'm more interested in the comment block above the method than its actual implementation. Seriously, I rarely want to see how the method does something, the name already tells me what it does (or at least it should). Now, the inline documentation popup in Xcode 5, THAT's some kick ass feature I wanted to see for a long time.
Visual Studio 2013 will have this feature. 
If you are working with only code that you write then your points are valid. However, most larger scale applications will inevitably have more than one Dev and most likely you will not have pretty comments or descriptive method names at all times. This is where this feature comes in handy. Although, a quick CMD+click and three finger swipe back should be sufficient in most cases. 
Command alt click opens it in the assistant.
Sorry to hear that you are working in a shitty team that can't stick to guidelines. But don't try to fix these problems on the IDEs level. Besides, the save method is a convenient method because it's short, most code is longer than that, even when trying to keep it at a maximum of a display length. Getting the very gist of a method from just the first few lines isn't always possible, and when you have to scroll around in a popup to understand what a method does, you or your team have failed pretty badly. Sorry, but this feature is bullshit. I work on a project that spans a few hundred thousand lines of code, works across architectures and is written by a few people and splits off into multiple repositories, and I never had the need for such a function. I know the naming conventions, I know what I want to do, and I know the context in which I'm working.
&gt;three finger swipe Do code on your laptop? I mean- my primary work computer is a laptop, but most of the time I'm working its plugged into a 27" with a keyboard and mouse. 
Your environment sounds nice, but in my experience over the last 20 years it's exceptionally good. This kind of tool is great at getting you up to speed on unfamiliar code, or even code you wrote yourself a long time ago. If you don't want it or need it, fine, lucky you, don't use it. It would just run off the clang AST that everything else uses anyway so it wouldn't even add any overhead.
I know right? I can't brag with 20 years of experience I'm afraid, but I've been responsible for implementin Recast, Detour and Detour Crowd recently, three third party libraries (navmesh and pathfinding). Anyhow, there was one(!) instance where I had to look into a function: After some debugging where we got very strange results from the navmesh generation, we looked into the function that checks wether a triangle is walkable or not. It just took the normal of the three vertices and checked it, anyhow, that way we found out that the Y and Z axis were in fact not flipped, unlike the sample code we had made us believe. But dear god, that documentation popup, that was so fucking useful. And I don't believe the speed part. Sure, Clang rocks that without a problem, but Xcode is the problem. It takes forever to spin up that editor and calculate the syntax highlighting, and that is exactly what this function would do, just in a small popup. Don't get me wrong, sometimes it is useful to see a functions implementation, but not all the time. If the popup is hotkey triggered, jump to definition in assistant editor is assignable already, if it comes up automatically, it would annoy the hell out of me because in 99% I don't want it and it takes aways screen space from the context I'm working in right now. 
I work on my MacBook Pro at times but most of my work is done on my 27" iMac. I use my trackpad Apple mouse so I can take advantage of the gestures. 
The assistant editor is very handy when I code on my iMac. It's tough to get use of it when on my 13" Pro :). But good point. This is another good trick for jumping to definitions.
I'm afraid I see the issue here. You have not had much experience in dealing with dispersed teams or legacy code bases. I am happy for you that your current position is nice and tidy and that you have common patterns that your team uses but my point is that not all projects and/or teams are this way. For most projects, business cases change. Logic changes. It's the nature of our work. When this happens, a method/function/macro that you wrote 12 months ago may not be top of mind. The business rules built in to the method may have been forgotten. In these cases a quick and easy way to glance into the method would be ideal. As @2a0c40 mentioned, if you don't want it or need it that is understandable. Others may and if this was ever implemented into Xcode I would hope that they worked out some of the performance kinks. My original comment was speaking on a broader stage, because as I said, this "I know the naming conventions, I know what I want to do, and I know the context in which I'm working." may not always be the case.
You should try not being an obnoxious prick sometime. You might find people are more inclined to agree with you. Also what the fuck are you running Xcode on that makes it take so long to fire up an editor window? I've never seen it take any measurable amount of time...
Probably need to throw the download into a background thread. Downloads should NOT be on the main thread.
Can you post the code? It's likely a threading issue but hard to tell without seeing the code. 
Besides OSX and iOS development? Not much or actually not at all. But those two operating systems still take up a big chunk of the (profitable) market, so learning Objective-C is not a bad thing at all. But if you're only looking for the most job-offers per language i'd definitely would go for Java... 
Outside from Mac and iOS development, hardly at all. But those are sizable markets (iOS especially). If you know C/C++, you can learn the guts of Objective-C in a weekend. If you don't, I suggest you start with C++ instead. It's much more widely useful, and will give you a solid foundation for Objective-C to boot. 
As said before, not much practicality outside of the iOS/Mac OSX market but adding another language to your resume is never bad. Also, Objective-C is the 3rd most sought after language on the market right now (in the US) so I'd say it's definitely not for nothing.
I wasn't wondering if it was useful outside of OSX or iOS, but more if the OSX market was big enough. At least where I am I never see anyone asking for Objective C developers, now that may be because of what region I'm in, but I wasn't sure still.
Learning the language is no big deal. It's learning the Cocoa or Cocoa-Touch frameworks that take so much time and effort.
So you should know what kind of businesses are located near you and find out what kind of programming language they use most.. i.e. if you are living in an area with a high engineering-dense i guess most job offers would be for Java or even C++ I found a nice blogpost about that: http://mashable.com/2012/07/11/developer-programming-languages/ It's not complete by any means but you get the idea...
For whatever it's worth, I make a good living doing exclusively Mac (and sometimes iOS) development using Objective-C, and come across job opportunities constantly. The market for iOS programmers in particular is very healthy.
[source](http://www.phonearena.com/news/iOS-programming-language-Objective-C-enters-Top-3-as-mobile-grows_id31983)
It's not "not at all," but definitely less popularly used than Java or C#, but that comes with the territory of being primarily specific to the Apple universe. One project I just came across that uses ObjC in a non-Apple 'verse is [SOGo](http://www.sogo.nu/english.html). It runs in GNUstep on *nix boxes, and is a pretty good (albeit hard to configure) groupware application. Also, there is a [kickstarter](http://www.kickstarter.com/projects/203272607/gnustep-project) running to revivie GNUstep, which would help revitalize the ObjC universe. I think learning ObjC is useful, and since iOS is definitely here to stay and profitable, it'd be good to learn. Besides, it's all just syntax - most programming is the same anyway, it's just the details of the language that differ. 
Without knowing the actual data model and app control logic it's difficult. Probably something simple though. This is why careful design the view and model controllers is critical before you write a line of code.
I just figured it out, but maybe you can confirm why what I did worked. In the removeJobType:(NSString *)s; method i created I had [jobTypes removeObjectIdenticalTo:s] which I changed to [jobTypes removeObject:s]. I assume this worked because removeObjectIdenticalto was checking to see if the addresses of the strings were equal and not the contents of the string.
Apple has great documentation, in your case, the [`NSMutableArray`](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/Reference/Reference.html#//apple_ref/occ/instm/NSMutableArray/removeObjectIdenticalTo:) documentation would be of interest. `removeObjectIdenticalTo:` calls `indexOfObjectIdenticalTo:`, which contains the following piece of text: `Objects are considered identical if their object addresses are the same.` `removeObject:` on the other hand has the following to say: `[...] matches are determined on the basis of an object’s response to the isEqual: message`. TL;DR: RTFM instead of assuming implementation details.
Sorry, but I'd choose C#/.NET in a beauty contest over ObjC/Cocoa any day (I work with both).
First want to say that this looks promising and helpful. Especially like that parsing and display can be done asynchronously. Do have a couple concerns, though, if you're the author. First, no tests? That's a pretty huge red flag for a lot of people when potentially adopting open source code. Secondly, you should use a 3 letter prefix instead of a 2 letter one. Apple reserves two letter prefixes for themselves.
XCode is Shit and you know good features like this are so far away to come true
To me, this is solving a non-issue. I get the desire for it, but I tend to only put things that I expect in my arrays or sets, so I don't really have to guess at what's going to come out, and I handle that convention in my name, like "arrayOfFoos" will only contain Foo. Being a block lover, I'll just enumerate my arrays, and cast them right in the block definition. Still, neat and well done. Upvoted. 
Yup, straight to the point, it's the biggest shortcoming. Unfortunately, the short hand @[] will always return an NSArray, there's no way around that; it's baked into the compiler. Object creation is the only point where the compile time safety lacks - it works for all methods of the object, once created. If you abstain from the container literals and fall back to the 'classic' container creation, you don't need the casting, and will not introduce anything dangerous. If you try to produce an array containing a single element, you'll even get the desired compile time safety with +arrayWithObject:.
Generics is one of the big things I miss in objective-C though I'm not 100% sold on this. As mentioned in the other comments, assignment from @[] syntax is unsafe. Could you add some sort of cast that does a type/safety check when doing these assignments. Usually in this case I would be happy to take the small performance hit to ensure safer code.
If you venture into runtime checking, there's all sorts of things you can do. You might add something along the lines of + (FooArray *)arrayWithCheck:(NSArray *)unchecked { [unchecked enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) { // check [obj isKindOfClass:[Foo class]] }]; return [FooArray arrayWithArray:(id)unchecked]; } and then use FooArray *foos = [FooArray arrayWithCheck:@[...]]; If you implement this method and add it to the macro (automatic creation from NSArray + your Category file or added manually), you'll have a runtime type check for any class. It won't be added to the project though, as the scope there is compile-time.
This was incredibly helpful!
It sounds like you are polling for the updates progress. Don't do that, instead, wait to get notified about the progress and then update you UI accordingly. A timer, especially a high resolution one, should never drive something like a progress bar. 
Are you using AppleEvents to get the current status in iTunes? Can you poll iTunes less periodically, but fake the progress in the progress indicator with the current velocity of the timer (for example, I think iTunes can play double time, but a few samples of the timer can give you the velocity). This is similar to how the [startup progress bar used to work](http://daringfireball.net/misc/2005/04/tiger_details#waitingforloginwindow).
You should learn C, period. It's a small language with expansive utility. It is everywhere. It is worth learning for every programmer.
Yes, I am using an iTunes.h file I generated with scripting bridge. Following this guide: https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ScriptingBridgeConcepts/UsingScriptingBridge/UsingScriptingBridge.html And I set up an observer to deal with any incoming notifications from iTunes. I had considered doing something like what you said; because it is displaying song progress I figured I would just set the maxValue of the progress bar to the length of the song, and just let it go, stopping it if iTunes sent a paused notification etc. The only problem is that iTunes sends no notifications if the progress of a song is changed independent of the player state changing - like the user changing it. Maybe I have to sacrifice this functionality? I feel like there must be a way, as the iTunes mini player seems able to handle it...
Like I said in my response to @jonhohle, I am mostly handling updates by getting notifications from iTunes ([NSDistributedNotificationCenter). I have found no way to get information about the progress of the song independent of a player state change. So basically, the user moving to the beginning of a song while in the middle sends no notifications via iTunes.h. Is there maybe another way to get notified?
IIRC, AppleEvents through scripting bridge block the main thread. I've written other apps which fork a background process to keep the AppleEvent handling asynchronous. This can be done as a single shot - a new process per apple event, or a long running background daemon that you communicate with using some form of IPC.
This might be a very long shot here, and I have no experience with iTunes whatsoever, but you might have some luck by looking what mach ports iTunes has and what it's sending over there (since it does send out its state at some point). If that isn't working, another long shot might be injecting a new mach thread into iTunes and having it observe state changes and have it send them back to your applications mach port. Note though, this might be absolute overkill for what you are doing, and they require your app to run with enough privileges (I think at least administrator), but if you don't find another way, it might be worth a try. And it's certainly a better approach than polling every few milliseconds.
http://www.computerworld.com/slideshow/detail/98085#slide1 this report would disagree with you. Puts Obj C at 12th 
I do have an idea but I have no experience/knowledge besides what I've read so far. Should I attempt to make it anyway?
Yep. Like I said, it's going to be hard, but the hard part is you not being discouraged after you fuck up so much and to just keep chugging. After some actual practice and figuring out why what went wrong you everything starts to click
The problem with reading is that the concepts are explained as the author understands them which isn't always the same way your brain works. Creating your own project forces you to understand the concepts in a way that makes more sense to you. Start by building the simplest part of your idea and see how you go, read the book at the same time to learn about new concepts that you can use. 
I was basically in the same position as you. I was fascinated by programming but for years I couldn't wrap my head around it. I kept reading books on it and then half way through it'd say "now do that thing we covered in chapter 3" and I couldn't remember it at all. I'd throw the book away in frustration - I did that once a year for more years than I care to admit. Then one time, there was a website I wanted to build. I bought a book and halfway through the same thing happened. But I really wanted to build that website, so I took the book as a guide, went through each chapter again, but I used the info to build my site instead of the examples/exercises. And it worked! After that I never looked back, I always build first and learn on the way. 
You read, then you practice. You will never truly learn if you don't practice.
&gt;Should I attempt to make it anyway? Yes. For me anyway its hard to learn a new language or framework unless I have a specific project in mind. It doesn't matter if the project turns out to be unworkable, you need a goal to work towards.
 &gt; "learning how to make a program without using a single line of code". Fuck that. You'll get nowhere if you're not willing to learn to code. This is the book you want. Great overview of basic CS + specific iOS basics. http://www.amazon.com/Objective-C-Programming-Ranch-Guide-Guides/dp/0321706285
While I agree that you should start writing app ASAP but I also think, that you should have elementary knowledge of the language first. I suggest grabbing a copy of "Objective-C The big nerd ranch guide". This book while not going in-depth is good at explaining the concepts and has cool challenges at the end, which force you to refer the manual. Good luck!
I will look into this, thanks!
The only reason I didn't get that book is because a lot of the reviews were saying that they expected the reader to have at least *some* knowledge of programming language. 
It's a pretty good book for beginners. It has an entire chapter for very basic concepts such as variables, types, and if/else statements that other slightly-more-advanced books would skip. Beyond that, though, the way to build an iOS app if you have *no* programming knowledge isn't to read a book that requires no programming knowledge. It's to learn a bit of programming.
I very much recommend the BNR guide.
I read every programming book alongside a laptop. I consider the book to be the supplementary material. If you can get to the point where you've got a dev environment open alongside the book, you're going to learn more. Pretend you're an editor of the book before its final release, and fact check every line of code you see. This is the best way to get a handle on any programming concept: by writing it yourself, even if you trust the author that everything works. Pretty soon you'll develop a programmer's muscle memory that you wouldn't have if you just read through the thing and then started on a project yourself. With a laptop and dev environment at hand, often when working through a programming book, I'll ride a tangent and investigate a concept, syntax, or idea by myself in a console or through the internet. These are my real learning moments in the process. Often I'll start a library to complete a concept that appeared to me in my reading that I later learn in the book is already a part of the standard library of the language. That always proves to be an excellent learning moment for me, because I 1) already have experience with implementing that concept in the language, and so can appreciate the existing implementation better, and 2) I have already tried to build something in the language/problem domain, so my experience has already grown. Remember you're not reading a book about good English style. You're reading a book in one language about another. It's like someone handed you a French book, and you read 20 paragraphs about how this one verb tense is really useful, read the two line translation, and then moved on. It's simply impossible to learn a new language this way, even if you've learned 20 other languages with the same ancestor: the particulars of using that language and it's tenses are never going to stick with you unless you've sought to apply those lessons multiple times, on demonstrated and new situations.
I'm at a beginning iOS bootcamp, and it was more of an introduction to them. He is a very interesting, and ridiculously smart dude. For someone just learning, he has a fantastic was of presenting material. I wish he was more involved with the week long class.
Glad to hear you found a good instructor. They are rare. Far too many instructors are clueless about teaching; they just want to show off.
The method swizzling is definitely worth talking about. I recently used it in a large project to change the functionality of certain UIButtons to give my app a sense of stateful-ness and it is awesome. I also really like talking about Categories in Objective-C. You can do so much with categories and they are far easier than library units in terms of adding them to a project.
Yup. A great Category to display how powerful they are is [Toast](https://github.com/scalessec/Toast). Also a good exercise in building up quasi-functional programming practices, which Objective-C is very good for.
Nah, I disagree. I started using Xcode 3, I'm impressed with how far they've come in three years.
I think you should try IDEs like Netbeans, It is not for objective-c but god, that is a good IDE
If you'd like to help me out to keep building awesome open source controls, consider donating a few bucks at binpress if it helped you out: http://www.binpress.com/app/uidynamics-helpers/1643
Im taking a course and we are using this book: http://www.amazon.com/gp/aw/d/032188728X Really easy to follow, and has exercises and an active forum where all beginners and experts come together and help one another.
Yikes! if([type isEqualToString: @"create-user"]) [self handleCreateUser: message.message]; else if([type isEqualToString: @"login"]) [self handleLogin: message.message]; else if([type isEqualToString: @"create"]) [self handleCreate: message.message]; else if([type isEqualToString: @"joinable"]) [self handleJoinable: message.message]; else if([type isEqualToString: @"player-join"]) [self handlePlayerJoin: message.message]; else if([type isEqualToString: @"authrequest"]) [self handleAuthRequest: message.message]; else if([type isEqualToString: @"authresponse"]) [self handleAuthResponse: message.message]; else if([type isEqualToString: @"start"]) [self handleStart: message.message]; else if([type isEqualToString: @"update"]) [self handleUpdate: message.message]; else if([type isEqualToString: @"take-turn"]) [self handleTakeTurn: message.message]; else if([type isEqualToString: @"end"]) [self handleEnd: message.message]; else if([type isEqualToString: @"exception"]) [self handleException: message.message]; Don't write code like this. Generally speaking, if you've got millions of `if` statements, you're doing something wrong and you should move to a more dynamic / declarative approach. For example: NSString *selectorName = [NSString stringWithFormat:@"handle%@Message:", type.capitalizedString]; SEL selector = NSSelectorFromString(selectorName); if ([self respondsToSelector:selector]) { [self performSelector:selector withObject:message.message]; else { [self handleUnknownMessage:message.message]; } Then you don't have to worry about having a massive if statement and remembering to update it every time a new method is added - you just add a `handleFooMessage:` method and it's used automatically if a message comes in with `type` equal to `@"foo"`. Building a dispatch table imperatively with a tonne of `if` statements is tedious and error-prone. 
While this doesn't specifically cover designing complex applications, I still found it a great resource for designing the inner workings of my apps: http://www.amazon.com/Cocoa-Design-Patterns-Erik-Buck/dp/0321535022/ref=sr_1_1?ie=UTF8&amp;qid=1382636637&amp;sr=8-1&amp;keywords=Cocoa+Design+Patterns
I enjoyed http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124 though it's not language-centric if you're looking for that.
Thanks for the recommendations!
Yes. And...?
Assuming you're talking about a "helper" app that can do these replacements in any other app's textfields, you should look into the [CGEvent API](https://developer.apple.com/library/mac/documentation/Carbon/Reference/QuartzEventServicesRef/Reference/reference.html). The `NSTextViewDelegate` stuff, etc., won't work unless you're in a textfield owned by your application.
This is language support advice more than technical advice, but make sure it can parse the latin digraphs so for example the Cyrillic output will be still be ц and not тс when you type ts. Similarly you don't want шч to show up when typed shch in latin and expected щ. If this done instantaneously by letter to letter, then it won't work. The two alphabets and the associated transcription systems are not compatible on a 1:1 ratio. 
I was thinking about it. But not sure how to approach this. Maybe with some kind of a timer or something.
Thanks for confirming mine suspicions. C is the way to do it. Fuck I know nothing about C. :)
That looks pretty handy actually, I may use this. 
 NSMutableArray * stringArray = [[NSMutableArray alloc] initWithCapacity:0]; for (char** c in charArray) { NSString *str = [NSString stringWithUTF8String:&amp;c]; [stringArray addObject:c]; } or something fairly similar.
Thanks. Yeah, I figured this was it, but I wanted to first check if Foundation provided a builtin method for it.
http://www.raywenderlich.com/tutorials
Thanks!
I would check out the Big Nerd Ranch Objective-C book 
I learned from Stanford's course in iTunes U. It's one of the best courses in iTunes. [Link](https://itunes.apple.com/us/course/developing-ios-7-apps-for/id733644550).
I my opinion, this is the best programming book I've read (albeit it my might just be the only programming book I've read cover to cover and completed all the exercises). I really felt like I learned a ton in just a couple weeks with this book and enjoyed ever minute of it.
Cocoa design patterns.
This book helped get me from knowing no objective-c to a released iPad app in about 9 months.
http://tryobjectivec.codeschool.com
These are great :)
You know what would be awesome, if people actually used pictures to show what the hell this does. As a newbie learning to code, I don't know what this means, but I would be able to understand quite easily if I could just see it. :(
It's not so easy to understand this even if you are a experienced UIKit developer. But this is a good request I presume. I'll try to create a blog post for this. Thanks.
I'm not sure about tables or anything else because all of my views are custom and based on UIView and UIScrollview, but I'd think you'd just add a new object and increase the frame height of the parent view.
If you can target OS X 10.7+, use auto layout and put everything in a table view (you want a maximum height, because people usually have finite sized screens). Also, use a view based `NSTableView`, because you won't have fun replicating such an UI with cells.
iOS developer here. This behaviour could be easily achieved with [UITableView](https://developer.apple.com/Library/ios/documentation/UIKit/Reference/UITableView_Class/Reference/Reference.html) [Getting started with UITableView](http://www.guilmo.com/how-to-create-a-simple-uitableview-with-static-data/) This is how I would do it: Firstly, I need an object to store the needed data: MagicClockItem.h @protocol MagicClockItemDelegate; @interface MagicClockItem : NSObject - (id)initWithProjectName:(NSString *)projectName; //project name, relevant to the screenshot @property (nonatomic, strong, readonly) NSString *projectName; //number of elapsed seconds while the timer was running @property (nonatomic, assign, readonly) int secondsElapsed; //magic clock delegate @property (nonatomic, weak) id&lt;MagicClockItemDelgate&gt; delegate; //handling the timer - (void)start; - (void)pause; - (void)reset; @end @protocol MagicClockItemDelegate - (void)magicClockItemDidChangeValue:(MagicClockItem *)magicClockItem; @end I'm in a bit of a hurry, so I'll leave the implementation up to you, it just requires proper use of a NSTimer :D [Quick google search revealed this tutorial](http://www.edumobile.org/iphone/iphone-apps/using-nstimer-in-iphone-2/) Secondly, I would need a custom [UITableViewCell](http://howtomakeiphoneapps.com/how-to-design-a-custom-uitableviewcell-from-scratch/1292/) with 2 UILabel's and 3 UIButton's witch would conform to the MagicClockItemDelegate protocol. The cell needs to know witch timer it needs to handle, so let's add a method to the cell class: - (void)handleMagicClockItem:(MagicClockItem *)magicClockItem{ //assuming we have a property for the currently handled magic clock item if(self.currentlyHandledMagicClockItem) self.currentlyHandledMagicClockItem.delegate = nil; self.currentlyHandledMagicClockItem = magicClockItem; self.currentlyHandledMagicClockItem.delegate = self; } Don't forget to remove the delegate after deallocation! - (void)dealloc{ self.currentlyHandledMagicClockItem.delegate = nil; } When the delegate method is called, update the time label Lastly, we need a UITableViewController to display all that data. Add an NSMutableArray to hold your MagicClockItems as a property (assume you call it allMagicClockItems) now, you only need one more thing: in - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{ YourCustomCell *cell = dequeue the cell the standard way [cell handleMagicClockItem:[self.allMagicClockItems objectAtIndex:indexPath.row]]; return cell; } And that's it. Your cell will update their labels internally when called by MagicClockItem object they handle. Regarding the "+" button. It can easily be put into the UITableView footer view. If you want the adding and deleting of projects to look nice and animated, use [Batch updates](https://developer.apple.com/library/ios/documentation/userexperience/conceptual/TableView_iPhone/ManageInsertDeleteRow/ManageInsertDeleteRow.html) I had to write this in a small amount of time because I have to get going, and that's why it might look a bit unfinished. If you have any questions, I'll reply when I get back from work (so that's like 10 hours from now :D ). Good luck with your Cocoa/iOS programming! EDIT: Formatting, 2 - again
I really appreciate you putting the time into this comment but I think I wasn't clear in what I was asking. I'm not interested in learning to make a timer app but simply trying to figure out how to get the behavior where the user can add another item, and this automatically resizes the window down for the next item. My best guess is that this is using NSTableView (also looking to do this as a desktop app, not iOS) but I have come up short trying to figure it out. 
Cool. Look forward to it.
Thanks! How good are the books? The only book i can find in amazon with decent reviews is [(book)](http://www.amazon.com/Cocoa-Programming-Mac-4th-Edition/dp/0321774086/). How good is this for current day development?
That book is the gold standard.
Exactly. I like blocks. But I think there is sort of a "Ooh, shiny" or "I'm a Rockstar" vibe going around where people want to use them everywhere they can. If it aids readability, I think they're a great idea. But sometimes I think they undermine readability. For example, I've seen API's where you have a method call with both a success block and a fail block—and unless I'm imagining it, I think I've seen a third block—in the method signature. The method implementation is a mess of scrolling and clutter, to my taste. Or, you have a block passed to a method, and then in that method someone takes the block, wraps it in another block, and then sends that whole combo block as a message to another object. (I actually saw something like that in the Big Nerd Ranch book.) It can get to be a bit frantic. I think many times it comes down to following the logic. And sometimes it's better to just say this object does a thing and his helper is going to handle what happens afterwards.
Blocks are fine to be used in this way, and in fact, I wish some built-in classes employed blocks more (namely UIActionSheet and UIAlertView). Here's a bit of advice: I know English might not be your first language, but the convention usually for a name like 'setText' is that you are actually setting the text. It should probably be called something like **textWasChanged** or **onTextDidChange** to show that it is called *when* something happens, so it's not confusing with property setters etc. To each their own, but I find that being consistent and descriptive with function names is a Good Thing™
I have that book. It's pretty good and for the most part still relevant. 
Delegates are awesome but as explained in the post, this is an alternate. For delegates the setup is a bit more than using blocks. 
The APIs and tools change so rapidly that I would think you're better off not buying a specific Cocoa book. You'll never refer to it again when a year passes. It's like that Time I bought the Rails 3 book... and before I got a chance to read it, rails 3.1, 3.2, and then 4. I eventually sold the book and went to ebooks instead as you end up with free updates. Anyway, I would suggest mixing apple's docs with googling as you're trying to solve an actual problem/build something. You'll learn the fastest that way. If you want another great book on objective-c, less on cocoa, I would highly recommend [Effective Objective-C 2.0](http://www.amazon.com/Effective-Objective-C-2-0-Specific-Development-ebook/dp/B00CUG5MZA)
You have to walk before you run. There is enough to learn about the MVC aspects to subsume them first. This is what you are actually learning with such tutorials. You can't skip over or avoid the MVC design aspects - they are baked-in on iOS/Cocoa for UI. Login screens aren't really meaningful without the back-end (where most of the code is actually). For a web-app, consider implementing everything in javascript within an instance of UIWebView - this is the fastest way. To do everything in ObjC, learn how to implement everything as a non-Web iOS app first because the difference is negligible but the complexity is similar.
http://stablekernel.com/blog/blocks-or-delegation/
oops, i also posted this link before I saw yours. Good stuff though.
Is it a good beginners book, or do you need to have prior programming experience?
I bet the author would love to hear that from you. And no, i'm not the author of the book haha. 
Thanks!
I probably should have mentioned that I've already coded for years, including on Android and in C for microcontrollers. Also my app idea was already hashed out in a hardware design before I decided iPad would be better. So 9 months isn't that impressive, but I'm sure the author would love that info out of context. 
Be careful with blocks as mentioned here: http://humancode.us/post/67641912262/block-apis-are-not-harmful. There's a time and a place for blocks and while it may suit your needs to use them, it might not suit Apple's, resulting in an app rejection. 
I'm glad to hear it! And thanks for the kind words, mariox.
This is great! :) Good job
I agree that the over-use of delegates for things like alert views is frustrating, but this is not a good solution. Creating a temporary class anonymously by passing a dictionary of blocks? Manually keeping a strong reference around? Iterating over protocols to figure out method signatures? This is hack upon hack and the solution is worse than the problem. If you find your `alertView:clickedButtonAtIndex:` methods growing substantially, perform nothing but the switch in the delegate method and dispatch to more specific methods instead of putting the logic into the delegate method. It's not quite as neat as just passing a block in, but it's far clearer code that this approach. However if you've got a tonne of alert views triggered from a single view controller, it may be a code smell and you should think about whether or not you are trying to do too much in one view controller. 
What part are you having trouble with? Are you having trouble reading the file? Are you having trouble adding the text to the textfield? Are you having trouble getting it to be random? You should consider your goal and break it down into smaller problems, get each part to work, then put it together.
If you are just having issues in general, try breaking things down. Figure out which steps you need to perform to do what you want. It should be something like this: 1. [Open the file and turn it into a string.](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/Reference/NSString.html#//apple_ref/occ/clm/NSString/stringWithContentsOfFile:encoding:error:) 2. [Split the string into lines.](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/Reference/NSString.html#//apple_ref/occ/instm/NSString/componentsSeparatedByString:) 3. [Generate a random number \(with maximum value array.length\)](http://stackoverflow.com/questions/160890/generating-random-numbers-in-objective-c) 4. Access the element in the array. 5. Show this message to the user.
Have you tried using the -awakeFromNib method of your controller object? Have you made sure that said object is instantiated in your .xib?
Hey and thanks, sorry i wasn't clear, i was pretty tired. 1. Done. 2. Done 3. Done. 4. This and 5. is what i am fighting with. I put a textfield where i want the message to be shown on the ui, and made an IBOutlet, but i'm not sure what i should name it and where to write it into the code. I know i sound like a beginner and i really am but it feels like i am missing something easy, i will keep working on it though, thanks for helping :)
I am having trouble adding the text to the textfield :/
I'm going to look into -awakeFromNib thanks :)
NSTextField has a method for that. setStringValue or something like that. Look it up. Also, did you connect the NSTextField to the controller object you're using in Interface Builder (the thing where you make the windows)?
Going to look into setStringValue thanks. I have made an IBOutlet but i don't know what to name it and how to connect it in the code, if that makes any sense.
Ok it has been connected but nothing shows up in the UITextField when i try to start the app.. Feels like i'm missing something easy.
I'll give this a #Yoloswag/10. Seriously this is really nice.
thanks man i got it to work now :)
You might want to search for open source hackintosh drivers. If driver is in a form of kext it has to be done in c(++), or at least that used to be the case, haven't touched all that in two or three years.
Thanks, that is another place to start that I didn't think about. The driver would be of a user space type. So I think because of that I can avoid kext although I have no solid base on whether this is true or not.
I used to use this driver for an Xbox controller years ago: http://xhd.sourceforge.net
Love it, thank you! :)
This doesn't even need to be super complex driver at the moment, just need to read some data off of a pedometer and build a proof of concept driver to handle it. I have little experience working with such low level code so it has been a little over my head thus far. I will check out some of the code from the projects you guys have sent me, thanks!
Stupid question: What did you use for what? I had the same book but every time I find it easier to just code away instead of applying a pattern.
The short answer is: you don't have to add it to the .h, because it already exists in the .h file for the class that you are overriding. You only need to declare a given method signature in a class hierarchy once. The longer answer has to do with how C compilers work. Whenever you use a "#include" statement, when you go to compile, the C compiler will find that include, and then it will literally copy all of the code in the (.h and .c / .m / etc...) files into the file being compiled, replacing the #include statement. The Objective-C compiler has a slightly more intelligent version of this (which you are likely using) called #import. It will only copy a given chunk of code in once, regardless of how many identical #import statements you have. What that means is, the method signature in the .h for the other class, is already included in the code being compiled, and it is included ahead of your code seeing as how you put the #import at the top of your source file.
To add to this, the war the ObjC runtime operates, you can override methods that are not declared in public headers. Let's say I have a class called DBButton that inherits from NSButton, which in turn inherits from NSObject. *(Note: there are a few more layers in there. I'm going for a simpler demonstration here.)* If there is a "private" method in NSButton that is used behind-the-scenes, I can still create my own method that will override it as long as I use the same name. The runtime says "&lt;&lt;object&gt;&gt;, do this thing." If there is code in the DBButton class to do that thing, it uses it. If not, the message percolates up to the NSButton level, then the NSObject. It's for reasons like this that many private methods tend to have specific prefixes like "__" or "private_" so that they are not accidentally overridden.
Others here gave good answers as to why you don't need to edit the .h Here's another approach to an answer, though: Why would you need to edit the .h file? What would you change? 
You don't need to know C that much, most of the C you need to learn you will pick up by learning Objective-C. Hands-on tutorials are the way to go, don't get bogged down trying to read pure Objective-C books. 
You don't need to know much about C and Objective C (without Cocoa) to do an app. If that's your final objective, just building an app, I wouldn't recommend you to study them, just read app tutorials til you get there. If you are looking to get a job in programming, I would sugest to do it for iOS. There's a great market for iOS programmers as of right now. However if you want to learn about programming, learning C will provide you with a better understanding of programming languages and introduce you to important concepts like memory management and pointers. Anyways, good luck!
While I agree that knowledge of C is important, the answer of the original post question is a rotund no. If you are planning to learn Obj-c, learn that first and pick the C knowledge along the way. Learning C first will put a higher barrier on a user coming from Java. Objective-C with ARC has that nice compromise. Eventually, to become a good programmer, he will have to learn C.
That didn't answer his question. Should he learn it before Objective-C? No.
I've found the Big Nerd Ranch books on Obj-C and iOS (there is a Cocoa book also) to be a great introduction. 
Russia. Sorry for my English :)
Your English is better than my Russian :-)
Thanks for advice. I do not have a plan to become an iOS programmer. Just having fun playing with OS X :)
If any of the parameters are different, that's called Overloading, and is not supported by the Objective-C spec.
I thought I would need to 'let the computer know' that the over-riden (over-rided?) message exists for that class. If I add a brand new method I would have to let the computer know that it exists, so I just assumed that I would need to do that for every single implementation that is in the class.
This is fantastic. Thank you!!!
Ah, I can see that making sense. &gt; If I add a brand new method I would have to let the computer know that it exists, For future reference, you don't need to do that (prototype) anymore in the latest versions of XCode, it's mostly done now for public methods you want accessible by other classes. 
The WWDC videos and the Stanford videos on iTunes U are really good. Plus, the documentation from Apple is really good. They have several sample applications with guides which really explain a lot. I would also familiarize yourself with a book called Patterns...while not necessary, it definitely explains why things are structured the way they are. Understanding OS X and iOS has made me a better programmer in general.
I'll warn you this. Learning to code for osx is a bastard. The reason is mostly due to lack of info. Aside from Apple's docs there's not that much info out there that pertains only to cocoa. 90% of the answers you come across when trying to find examples or solutions to problems will pertain to iOS and will be just different enough not to apply to your particular situation. That and bindings. I hate cocoa bindings with a passion. I tried making my first app for osx and I just couldn't figure it out in the end. I'm having a much, much easier time coding for iOS and plan on giving osx another shot in the future when I'm more experienced. 
I upvoted your comment for the "war" typo. It made me laugh. ;)
I think those people who don't think you need to know C are probably poor programmers, churning out half-assed code. Objective C is a superset of C, and having solid C chops is an asset. For the C side of things, 'The C Programming Language' by Kerningham and Richie is the book from which *all* other C books are derived. It's only 259 pages which you could probably work through the exercizes in under a week. I've never read the Big Nerd Ranch books, but every time this question is asked, that's the answer.
Given the unconditional nature of my suggestion to learn C, and not even mentioning ObjC, I would think one would imply you should learn C before ObjC. Implications and intention aside, I would like to know the reasoning behind the "No". Providing no reason, justification, or context to your assertion helps nobody, and is kinda like walking into a conversation and telling people they're wrong and walking away. They all just think you're an asshole. Anywho, getting to actual productive conversation: I personally think that a person should not learn an OO language of any type until they've learned a procedural language thoroughly. The concepts in object orientation are extremely abstract, and learning an OO language first leads to such issues as understanding what inheritance or polymorphism is, but not understanding why or where you would use such a thing. Such a situation cause spaghetti code that is simply wrapped up in classes, god-objects, massive memory attrition issues (only slightly helped by ObjC's reference counting (it's not garbage collection, jsyk)), and general shitty code. Cue singleton objects that hold application state data while being tossed around like a downtown hooker, and all the sudden, they can't follow their own code anymore because they're never sure what their state is. Do you know what state is? I do. It's the mother fucking enemy. It is why you bash your head into your desk when you work with overly convoluted code. It is why OO was invented: so that all these variables running around could be collected by their relation to each other and the functions being used on and around them, so that you wouldn't have to have a huge list of data that is unmanageable. Because they never had to deal with state at a raw level (read: procedural), they don't understand what they're doing wrong with that god object. Keep in mind that within a given class and the way in which objects interact in an OO language is *still procedural*. You have an entry point in any given case, the first instruction/line is executed, and the code iterates step-by-step until it hits an exit point; regardless if those steps are object method calls on other objects or not, there is a single procedural logic thread that exists. All the OO fluff is just fluff. A person that hasn't built programs in an iterative procedural sense has no idea why objects are even being made other than it seems like a convenient way to model problem spaces that can be correlated to various pieces interacting with each other. Soon all problems look like objects and methods, and they're using a sledge hammer called OO to slam square pegs into round holes because that's all they've known. The idea that perhaps a given problem space is better handled in discrete math and algebra, and therefore suited to a functional language instead, may never occur to them. Pretty soon you have pi objects running around calling getEstimateValue that require not just a significantDigits input variable, but also a mostPrecisePiMeasurementMade object that stores the most precise measurement just made so that should you ask for pi to the 20th digit having never been that precise, the data is saved to mostPrecisePiMeasurementMade, but should you ask for it to the 3rd digit and already provided a mostPrecisePiMeasurementMade that stores the 20th digit, the program can round that instead of calculating Pi again. Seems pretty clever until somebody replaces your 5 files of Pi magic *with a fucking constant*. Classic C programmers have already shot themselves in the foot. They understand the pain that caused the need for OO, and they use it appropriately. Programmers that learned Java, ObjC, C#, or whatever OO language first are being handed an automatic assault rifle without ever having been taught how a gun works, let alone how to use something simpler like a bolt action rifle. They are being given Apache helicopters before they ever learned to drive a car. Having worked with these people before and having had to retrain them many times, I can tell you that stupid bullshit like "You don't need to learn C before ObjC" is the reason that half our profession can't do their fucking job. No, you don't technically have to learn classic C first. Knowing it just makes Objective C easier and the programmer a better programmer in general. Not knowing it makes Objective C a liability. Given a choice, I will never hire or use a programmer for Objective C if they don't already know C. I wouldn't even consider training them in Objective C. Besides that, classic C takes not even a month to learn well if you put your mind to it, and that month completely and 100% translates to time saved in Objective C. Every single thing in classic C is applicable to Objective C, if not in the literal sense, in the educational sense.
Thanks for the help. I tried what you said and it is working. But I do not know how to check the amount of time taken. Here is my code: -(void) application:(UIApplication*) application performFetchWithCompletionHandler:(void(^)(UIBackgroundFetchResult))completionHandler { NSDate* prev = [NSDate date]; [self.manager startUpdatingLocation]; self.complete = completionHandler; if([[NSDate date] timeIntervalSinceDate:prev]&gt;20) { completionHandler(UIBackgroundFetchResultNoData); } } and -(void) locationManager:(CLLocationManager*) manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation { [self.array addObject:[NSString stringWithFormat:@"%f,%f",newLocation.coordinate.latitude,newLocation.coordinate.longitude]]; //do calculations with current location if(self.complete!=nil) { self.complete(UIBackgroundFetchResultNewData); [self.manager stopUpdatingLocation]; } self.complete = nil; } Also when I run the app on the simulator, the fetch is happening only once, even when I keep the fetch interval to a minimum. I also changed it to a hardcoded number but it is still fetching only once. Any thoughts?
This seems really nice! Thanks for sharing.
Their survey needs a 'don't care' for some of the answers.
I see a lot of people downplaying ObjectiveC. With it truly being my "first" language, I find it a lot easier to operate than a lot of other languages, especially with Xcode. I used a lot of different websites, but I found teamtreehouse.com to be the easiest. It does charge you though. They offer a lot more than just ObjectiveC as well, so if you plan on expanding your languages, I'd say that's a good place.
There's no guarantee how often a background fetch will occur, it's possible you will go hours without it ever being called. The user could have gone half way around the world in this time! If you don't need pinpoint accuracy I'd recommend that you call [+ [CLLocationManager significantLocationChangeMonitoringAvailable]](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/clm/CLLocationManager/significantLocationChangeMonitoringAvailable) and if that returns **YES** use [ - [CLLocationManager startMonitoringSignificantLocationChanges]](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instm/CLLocationManager/startMonitoringSignificantLocationChanges). When the user moves a significant distance (a hundred meters or so) your app will be woken up automatically in the background and the [- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html#//apple_ref/occ/intfm/CLLocationManagerDelegate/locationManager:didUpdateLocations:) method will get called on the location manager delegate. This means you do not need the background fetch at all. The last value you were passed in the location manager delegate callback is the approximate location of the user currently. This is much better on battery life for devices that support it as the GPS chips handle the processing and only wake the CPU when the required distance for a "significant change" has been met. I hope this helps **As an additional note:** the - (void)locationManager:didUpdateToLocation:fromLocation method you mention has been deprecated since iOS 6 and should not be used.
The __weak reference to self should be made __strong inside the passed block - (void)fetchData { NSURLRequest *request; //create a request object here __weak id weakSelf = self; [NSURLConnection sendAsynchronousRequest:request queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) { __strong id strongSelf = weakSelf; [strongSelf performLongAndExpensiveOperation]; [strongSelf performOtherLongAndExpensiveOperation]; }]; } This avoids the possibility of the weak reference getting nil'd while the block is being performed. See for example http://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself/ .
To save putting the classname every time this is required: __weak typeof(self) weakSelf = self;
Dot syntax is just syntactic sugar. Don't overthink it. It's just as "pure" as bracket syntax. It was added to help modernize the language, not necessarily to help people from other languages feel comfortable. Choosing one syntax over the other really isn't a big deal. Use dot syntax or don't, just be consistent within your project. The choice of syntax isn't going to make a difference in the long run, but having inconsistent style could lead to confusion down the line. Both syntaxes are going to be around for the foreseeable future, so there's no point in worrying about it not being future proof.
yeah, i am just starting and i can already see places where the brackets get out of hand. i guess using dot syntax for properties has the added benefit that whenever you see dot syntax, you know it's a property, huh?
&gt; I, and most of the devs at my work, use dot notation for accessing and mutating properties, and brackets for message sending and everything else. Same for me. I find convenient to access the objects' properties via the dot syntax, and also more explicit.
Personally I don't use dot syntax because for some reasons seeing lots of square brackets gets me into ObjC mode whereas dots get me into Java mode (I have to work with both, often simultaneously), so avoiding dot syntax in ObjC, for me, is a way of reducing the cognitive load when working. However, that may be just me...
That's exactly how i thought about it! I think it could help me learn obj c faster as well! Damn, i'm so puzzled now!:)
Use what you like best :) Personally I use dot syntax on getters/setters and properties in general. I never use dot syntax on class methods or methods in general.
Thanks!
I'm wondering, when is it important to know something is a property? In the code that's internal to an object, I can see. But external to an object, you're supposed to be dealing with the object's interface, not it's implementation. I really think dot-notation was largely created to make people coming into Objective-C from other languages much more comfortable. It's somewhat of a crutch, if you ask me. And, as to brackets "getting out of hand," they can get out of hand. But when that happens, that's sometimes a design issue. In OOP, you're not supposed to be *asking* objects for data for you to do work on; you're supposed to give an object what it needs and ask the object to do the work for you.
oh, so there are cases when you must use dot syntax? if that's the case, then this changes things... i'm puzzled because i'm just starting and it seems like i have to adopt a style and i don't know which one to go with. the tutorials i'm watching use dot syntax so it'd be easier to follow along with that, but on the other hand if i try to convert that to proper obj syntax, it might take me longer but i'll get a better understanding of things. thoughts? :)
I answered you elsewhere on this. I would follow a tutorial exactly, because it's both easier to do so and you're less likely to make a mistake. You can always "fix" it later, if you desire. But, when I'm coding on my own, I tend to stick close to traditional Objective-C.
You should probably be using CGRectGetWidth(self.view.frame) for your last example.
Thanks!!!
It's not a crutch. Accessing a property and sending an object a message are two conceptually different things. Even though they are implemented the same way underneath, it doesn't mean they are the same thing at the level the developer works at. One means "Get or change an aspect of the object" and the other means "Tell or ask the object something". Differentiating between different concepts at a syntax level improves the readability of the code and makes it more easily understood at a glance. You see the dot, you know you're talking *about* an aspect of the object. You see brackets, you know you're talking *to* the object.
Dot notation *is* pure Objective-C.
Why? I've always used self.view.frame.size.width and it's not failed me yet. 
I've been doing this for a few years now, and I've never really given much thought to it. I use brackets for messages and dots for properties, but not exclusively. If anything I tend to do whatever I learned the first time I used a particular API, so it is either influenced by Apple docs or a tutorial. But as it's been said several times, don't overthink it - they're both valid ObjC, so it's all stylistic, and you're allowed your own style. 
&gt; Much like the previous functions, CGRectGetWidth &amp; CGRectGetHeight are often preferable to returning the corresponding member of a CGRect's size. While it's not extremely competitive in terms of character savings, remember that semantic clarity trumps brevity every time. http://nshipster.com/cggeometry/ &gt; CGRectGetWidth/Height will normalize the width or height before returning them. Normalization is basically just checking if the width or height is negative, and negating it to make it positive if so. http://lists.apple.com/archives/carbon-development/2002/Mar/msg00849.html Documentation: https://developer.apple.com/library/ios/documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html#//apple_ref/c/func/CGRectGetHeight
TL;DR: you don't have to learn C. Read the Big Nerd Ranch book on Objective-C or the Apress one. They are both pretty good. Knowledge of C is not a necessary condition to learning Objective-C, at least in my personal experience. You can treat Objective-C largely like Java (everything is an object, strictly speaking not true in either language but works for a while). Memory management is taken care of via ARC (traditional GC being deprecated in 10.8) so you don't have to learn how to malloc or free your memory, so learning memory management in C will not really help you. Over time you will encounter situations where pure C will be the best way to do something, or you will need to use libraries that are pure C style interfaces (sqlite3 library functions, objc/runtime.h) and your knowledge of Objective-C will facilitate you using these pure C libraries. Again, this is all my personal experience so your mileage may vary. Good luck!
I'm in the middle of Stephen G. Kochan's **Programming in Objective-c** and I'm *actually* retaining the information. What I like about the book so far is that it doesn't assume you have any prior programming knowledge, so it gently provides you with the necessary foundation/basics and then consistently adds more complex details as you go. It's very comprehensive, so you're not learning one thing in one chapter and then forgetting about it until several chapters later. There are **really** good exercises at the end of each chapter that solidify what you've learned, and there's a great *and active* forum at classroomm.com where you can post your solutions or questions and get advice/tips from others who are currently reading or have already read the book. I also have Apress' **Learn Objective-c on the Mac** and I don't find it nearly as helpful. Although it provides some good information, it seems to assume far too much about your general knowledge of object oriented program. It also gives very little explanation with regard to Objective-c's syntax and moves too fast. Hope this helps!
I picked up the Big Nerd Ranch book and that was a really great intro to learning Obj-C. Definitely want to put in another recommendation for that book. I didn't have any C/++ or really any OOP experience beforehand.
Thanks for the recomendations. I'll take a look at both books.
Start with the introduction to Objective-C on Apple's developer site. It's quite comprehensive, and not terribly difficult to understand.
+1 for Big Nerd Ranch 
Not sure if they are still out there but the Stanford University videos on iTunes U are pretty good. Also the developer talks from WWDC a couple years back were pretty good from what I remember. Not sure if there are more recent talks from more recent WWDCs as I haven't looked in a while.
Links for the lazy to the book on Amazon. At the time of this writing, the 2nd edition is $0.20 more expensive. :\ [Objective-C Programming: The Big Nerd Ranch Guide](http://www.amazon.com/Objective-C-Programming-Ranch-Guide-Guides/dp/0321706285) [Objective-C Programming: The Big Nerd Ranch Guide (2nd Edition)](http://www.amazon.com/Objective-C-Programming-Ranch-Edition-Guides/dp/032194206X)
Another link for the lazy... [Programming in Objective-C (6th Edition)](http://www.amazon.com/Programming-Objective-C-Edition-Developers-Library/dp/0321967607/)
I'll take a look at them too, thanks =)
Stephen G. Kochan's book unlocked whole thing for me too (purchased it about 9 years ago!)
I'm reading Big Nerd Ranch right now and it is fantastic. This is my 3rd or 4th Objective-C book that I've tried using and so far it's my favorite.
I'll definitely take a look at Big Nerd Ranch =D
Seriously? This is from 2011..
If you haven't already looked into it, [AFNetworking](https://github.com/AFNetworking/AFNetworking) would be a great library to use. [This](http://youtu.be/9QUfd5bRXNk) is a solid video that should help you get started.
Thanks - taking a look at it!
MBJSON (part of MBRequest) is an easy framework for handling json responses, also worth a look: https://github.com/mobiata/MBRequest/blob/master/README.md
Using a standard messaging protocol like XMPP would really help you along, if you're new to programming thought its not a trivial task to get the back end set up. Your client is going to depending heavily on how and where those messages are stored. What kind of server are you using? This is a good OjbC XMPP framework to look checkout: https://github.com/robbiehanson/XMPPFramework 
As askoruli pointed out, you want something realtime, not long polling. But since, you asked, the first thing you need to do is take all of your networking code and make sure it's in it's own method (like -(void)refreshTableData;). In the place where that code used to be, call the method. Then, at the end of the new method, call [self performSelector:@selector(refreshTableData) withObject: nil afterDelay:30] It isn't elegant, but it works. This also lets you expand to do the pull to refresh trick on your table, since it'll also call this method. Good luck!
NSStatusItem or the private NSMenuExtra.
He means OS X.
Ah, I get it. In case anyone else was wondering, I was actually already using that, but I had the annoying menu items come up every time, which I didn't need. The problem was I couldn't find a different object in the...graphical...layout thingie to replace it with, since I didn't want a menu anyway, just the menubar object. But, I see now that I can just **not** set the NSStatusItem to have any menu and I appear to get the functionality I desire. My problem was following a tutorial and then glossing over that detail; thanks!
Umbrella frameworks are frameworks that (mostly) only contain other frameworks instead of their own code. A framework (/static library) that contains code shared between two apps is just fine. That's the whole reason frameworks and libraries exist.
I.e. Umbrella frameworks are to make it so you only have to include the umbrella framework but really returns no benefit. In my use case where I want to abstract away core data so I can reuse the se functions between apps is completely acceptable in obj-c land.
Echoing the other comments here - you should get a good book on git. It's going to be quite different VCSes you've used in the past, and takes work to understand, but once you do, you'll wonder how you ever did without it. It's an absolutely essential tool for modern software development, as basic as having a good editor, IMO.... so worth investing the time in. [Pro Git](http://git-scm.com/book) is a *great* (now free!) book that explains how git commands manipulate the underlying tree structure. I struggled with git for a couple of months, thinking I could grok it. A couple of days with this book, and I was off to the races.
I use SourceTree (free and amazing Git GUI) to create local repos. It has an embedded Git. I don't use the Git stuff in XCode at all. For shared repos, I have both public and private ones on GitHub. BitBucket it also great. In SourceTree, you can just create a remote connection to do your push and pulls to the origin repo and the local repo.
Git is one if the newer "Distributed Version Control Systems" (DVCS). Unlike SVN, There is no "master" repo. Every repo has the entire history. Usually you pick a remote repo to serve the same purpose as a master repo, but the software itself is agnostic about this. It's a bit of a headshift, but it's a good one. 
A place I found very good to start with general information on git is this website: http://git-scm.com/documentation For me personally, I found [Git Tower](http://www.git-tower.com/) to be the easiest to use GUI client for git on a Mac. Sure, it cost's a few bucks and is not free like Sourcetree but I find the interface to be much clearer and easier to work with. Maybe give their trial a shot.
Personally, I find the best way to learn any language is not nesisarily by going by any type of specific rubric (like tutorials or even Project Euler). For me, I end up, subconsciously, not engaging in what I'm doing...because it's not interesting to me. If you're like me, the best way to learn a language is to work on something you're interested in. If you want to learn Objective-C for developing mobile apps, then start making one that interests you. If there's some problem that isn't solved currently that is bugging you, then start coding the solution. It definitely will benefit you to get the basics of any language/framework down first before jumping straight into this stuff (I mean, you should probably read at least a little bit of a book, or a good tutorial), but for me, hands on is just the way I learn best. I jump in, make mistakes, and refactor later. But hey, everyone's different.
Project Euler is a good way to get better at programming in general and thinking about computational problems. It is not a good way to learn specific languages. When you learn a new language, the biggest challenge is going to be learning the libraries associated with whatever it is you want to do. Because Project Euler's problems are generalized and not specific to a language, they are going to do a poor job at forcing you to use language or library specific features which are what you need. This is definitely true in Objective-C. An experienced programmer will take days or even just hours to become comfortable with the syntax, but mastering Cocoa or Cocoa Touch will take months if not years. I'd definitely go with your first approach of doing tutorials and simple apps to get yourself acquainted with apple's way of doing things, then as you gain experience move onto more complicated projects.
UIImage imageNamed: does not raise any exceptions, it just returns nil if it doesn't find the image - [source](https://developer.apple.com/library/ios/documentation/uikit/reference/UIImage_Class/Reference/Reference.html#//apple_ref/occ/clm/UIImage/imageNamed:) A quick google search finds a pretty good [answer](http://stackoverflow.com/questions/10998544/uiimage-imagenamed-returns-nil) about why it could return nil. Altho the answer on SO is pretty good, I think the problem with your example is in your string [format specifier](https://developer.apple.com/library/ios/documentation/cocoa/conceptual/Strings/Articles/formatSpecifiers.html). Try with: UIImage *Card1 = [UIImage imageNamed:[NSString stringWithFormat:@"%d", n]]; Cheers!
This should work. So, time to start debugging! Verify if [UIImage imageNamed:@"0.png"] works. If it does not, then you need to verify your images are packaged in the app bundle, and named the way you think they're named. Also you ought to verify they're actually PNG files. Never assume - verify. If the above works, then verify the image name made in your loop is what you think it is. Finally, verify if your view showing the image is actually visible. You never know. For what if's worth, debugging odd behavior is a requisite in programming - you should be prepared at all times to run through a set of steps like this on your own before asking reddit or stack overflow. 
Is 'n' an integer? Is it the integer you expect? Use the debugger to verify the integer and string being generated, since what you're doing looks fine to me. I procedurally generate image names all the time.
I don't have anything useful to comment, aside that I think this is interesting and that there should at least be one comment for this interesting hack.
There are so many problems that can be solved with the good old "have you tried turning it off and on again" Reset simulator / build clean / delete derived data / close and reopen Xcode.
That's exactly what I was doing but all I was making were these dumb little apps (like a calculator, fighting game, twitter client) and I felt like I was going nowhere. I wasn't sure if I was doing something wrong or if I just needed to give it some time. I have a list of some ideas that I hope to develop soon but but they require more knowledge than I had. I'm glad to know that I had the right approach, but I guess I just need a little more patience.
That's exactly what I noticed. The problems are really not specific to objective-c and can be solved, probably easier, with other languages. I don't think my problem is with the actual syntax of objective-c than it is with learning how to use the different libraries to make apps. I have some specific ideas for apps I hope to develop but I just need to gain a little more experience before. I think I will probably just stick to writing some simple apps to do this. 
I totally agree with you. The syntax is relatively easier to understand compared to Cocoa Touch, which is where my problem is. After reading these replies, I think it would probably be more useful for me to write apps than try to solve problems using algorithms.
His string format specifier is fine. As the document you link to states, that table is a *summary*. If you follow the link to the specification, you'll see that `d` and `i` are synonymous. 
&gt; I have some specific ideas for apps I hope to develop but I just need to gain a little more experience before. No, you don't. What you should do in this case is start writing those apps! You'll have a *lot* of difficulties on the way, but there's no reason to put off learning because of them. Start by making just one part of the app. I want to make an app that plays sounds, for example, so I start by making a window with a button that can play a sound. Then I try to add another button that will play a different sound, and try to figure out how I can play them at the same time. I don't build the whole thing at once!
[Rosetta Code](http://rosettacode.org/wiki/Category:Programming_Tasks) may interest you. It's not iOS specific in any way, but you could get some cool projects out of some of the ideas there.
thanks!
Basic idea that will teach you a bunch of simple techniques: build a Twitter client using AFNetworking: https://github.com/AFNetworking/AFNetworking (not the builtin iOS APIs). This will teach you UI, networking, response, basic async, everything you need to get your toes wet.
Here's a challenge...build and test an app...any app...make marketing materials and a website...publish your app...build a user base and/or make money...sell app/business, repeat.
For a while it made me think I was looking at C++ but then I stopped thinking about C++ gradually as it ^faded^away^into^the^night
I'm not sure what I'm supposed to be looking at.
It's utilizing a Framework to use Windows Azure Mobile Services. One of the simplest ways to get a mobile app up and running. Not sure what problem the OP has.
Ah. String / Strong small typo.
I agree. A very strong competitor and in the Backend as a service arena. iOS friendly too. Chris Risner is their liaison to the iOS community and does a great job speaking and working with developers. 
OP's problem is the documentation contains a typo. string is not a valid property for a @property; it should be strong, not string.
Objective C isn't only for Apple things. Clang and GCC run on a heap of different operating systems, and [ObjFW](https://webkeks.org/objfw/) is great as a standard library.
He's pointing out that string is not a valid attribute for @property. It should be strong.
Yeah I get it. Maybe the microsoft jokes simply aren't as funny these days.
Yes. It's been updated to whatever the current ANSI standard is. Most veteran C programmers keep it near by as a reference.
That, and suggesting the use of the app delegate as a property repository? Ewwwwwww
I think the Lynda-tutorials where great. Also, get the Big Nerd Ranch-book!
Link? Edit: Already downloading.
Personally I find stack overflow to be very anti-new guy :/
After trying multiple books and tutorials, including the mentioned Lynda.com tutorials, I found myself confused and disoriented by programming. The problem was, I thought I was just too stupid for it all. Vocabulary was lightly defined and then heavily used, and nothing really stuck for me. I almost just accepted the fact that I was not meant to be a programmer. Then out of boredom, I tried again and happened to find a great way to learn objective-c. First, programming concepts must be understood. Things like defining variables and methods, understanding arrays, dictionaries, and enums. There's a lot of basic programming concepts that need to be learned before tackling objective-c. It's a hard language. Once you learn how to separate programming concepts from programming languages, you'll be able to move forward with programming with great speed. At least, that's how it worked for me. Note: I had zero experience with programming before attempting to learn Obj-C. If you are in the same boat, I recommend this same route for learning objective-c for you. First, learn the basic programming concepts with a simpler language. I recommend Codecademy.com's Ruby lessons. They explain programming concepts with great detail and clarity. Also, the language is so basic that it will not confuse you when learning objective-c. You'll see terms and think, "oh, that's the same as ruby, except with an NS at the beginning." There are many things that Ruby and Obj-C share (and many they don't as well, like brackets, or declaring data types!). After completing the Codecademy.com Ruby course, you will be equipped with all the basic programming concepts you need to learn Objective-C smoothly. You'll essentially just have to learn the language from there. When it's time to learn objective-c, you have to pick the right resource. Many exist which are horribly written and are more likely to confuse you than teach you. The book I'm going to recommend to you is the one that finally gave me a clear understanding of Objective-C. It is professionally written and describes many important things with the perfect amount of depth for a solid understanding. The book is called 'Programming in Objective-C' by Steve Kochan. The book includes exercises at the end of each chapter which allows you to test yourself on what you just learned. The exercises are great because, after completing them, you gain a real sense of confidence. Also, the book has gone through several editions now and exercises have been shared online along with answers and discussions. I believe the most recent edition of the book is the 6th edition. A fair warning - it's pricey! But it's worth every penny. I walked away from the book feeling like I finished a college course on Objective-C. So, seriously. Learn the programming concepts, then learn objective-c. The objective-c language is too confusing to try and learn both at the same time. I hope my tips are helpful for you. As someone who struggled a lot, I can tell you that this route worked like magic on me.
I completely agree, Ruby was the language that took me from hacking code together from stuff copy-and-pasted from the internet, to actually understanding how to code properly. The basics of programming are shared between all languages, just the syntax and features are different. [Learn to Program](http://pragprog.com/book/ltp2/learn-to-program) by Chris Pine is a good book on the basics. 
Thank you very much! That is EXACTLY what I meant. Everyone wants me to just code but I dont know the terminology or concepts. I'll definetly try out your suggestions, starting today. Very much appreciated! 
Good luck! Share updates if you're compelled. :) Something else I'd recommend is starting a blog or twitter account where you can make simple updates about what you're learning, while you're learning it. I've read about employers who search for that kind of material when considering potential hires. Plus, there is a good feeling that comes with reading past posts and realizing how far you've come. 
That sounds like a great way to track my own progress. I already have a blog, but I havent updated it since October. I think I'll get back on it now. Maybe I will post a "Follow me on my path of learning to code". People who are just starting could give tips in the comments. Could be a cool thing. Also, it would bring more viewers to my blog. 
Thank you for all of your insight, btw. 
All I keep thinking is that once I learn to code multiple languages I am going to make a tutorial on how to learn to code easier than any resources I currently use. 
I mostly understand what you mean. Can you elaborate on "with employers in mind"? I have a decent job selling ad space. Although, if I learn to code I would not mind a job coding or designing at all. So I would definetly like to cater to their wants. 
Bnetechblog.Blogspot.com is my blog, if you are interested. 
I mention employers because programming is such a lucrative career right now. The economy needs more programmers and there just doesn't seem to be enough programmers to meet demand. This puts programmers in a great position (especially the talented ones). Entry level jobs in programming can range from $40k to $70k salaries. That's entry level. Most people don't make that kind of money for a long time. Programmers who really know their stuff, and have the job experience to prove it, can earn upwards of $100k a year. I recently listened to a talk where one employer lost a great 24 year old programmer to Google because they offered him a $400k salary plus $1 million in stock over four years (I might be remembering details wrong, for some reason $5 million in stocks sticks out in my mind). Needless to say, it is a great time to find work in programming. That said, I can understand only wanting to program as a hobby. It's extremely fun and satisfying. But should you suddenly become motivated to find work in programming, whether that motivation is money or exploring your practice more professionally, being prepared for employers certainly would not hurt. If that happens five years down the road, maybe your blog about learning programming won't be so useful to employers. By then you might have really impressive programs that say much more for you. But if, a year from now, a few months from now, you decide to try your hand at a job, that blog will give employers a way to see how you learned to program. Giving them a sense of that is especially important without a computer science degree. If you really aren't concerned with employment, don't worry about that. But then you should also share your money-making secrets with me! haha I was silly enough to leave college with nothing but an art degree. Valuable experience, but I'm hurting for money now. I'm building my programming skills to eventually earn a programming career for myself. Currently creating a portfolio that I can use to show employers my skills. The nice thing is that art school gave me the skills to create beautiful experiences. I'm hoping my creativity combined with programming will be enough to propel me into a more financially secure future. (It's not just the money that motivates me though. Programming is so empowering and satisfying. It is its own medium for creativity. And, of course, it's the future.)
Great! It's been added to my bookmarks. :)
Awesome. I definitely will keep up with your blog. Good luck with college and programming! 
I'm in the same boat as the OP. Don't you need to know Python before Ruby though?
Not at all. Both Python and Ruby are their own languages. Both are very similar, so one will help the other, but it doesn't matter which you learn first. If your goal is to learn objective-c, you won't have to learn Python at all. Or you could ignore Ruby and learn Python instead. The idea is to learn a simple language first and then progress to objective-c. The simpler languages like Python or Ruby will allow you to learn the programming concepts more easily. As another person pointed out in this thread, you could also just get a book on programming basics instead of learning Ruby or Python. However, I highly recommend the Ruby course on Codecademy.com. It helped me profoundly with objective-c. 
I wouldn't say Ruby or Python is closer to Obj-C. They are much closer to each other than they are to Objective-C. Perhaps Python would be just as advantageous to learn as Ruby would be before learning Obj-C. Both programming languages are extremely simple, and it's that simplicity that allows you to easily digest programming concepts that, were you to tackle first with a language like Objective-C, might be extremely hard to understand. Here's an analogy. Say you wanted to learn the English language. You could start by trying to understand Shakespeare from the start. However, that would make learning the English language extremely difficult from the beginning. Instead, it might be better to start with kindergarten reading levels. Kindergarten reading is much simpler and easier to understand. Then, eventually, you can progress to Shakespeare. Objective-C isn't the most difficult language out there, but for this analogy, consider it as Shakespeare. Ruby and Python are kindergarten readings. When you understand Ruby and/or Python, you can progress to the more difficult Objective-C. The structure is a little different, like Shakespeare, but with a grounded understanding in programming, you will be able to dissect and understand Objective-C with great ease. So, I suppose you can choose either Python or Ruby to begin with. It doesn't matter. Though, I will say, I got through 50% of the Codecademy Python course and ended up preferring the Ruby course which I took afterwards. This doesn't have much to do with the languages or how they compare to each other. More so, I felt the descriptions of programming concepts in the Ruby course were much easier to understand. If you feel more comfortable starting with Python, go for it! Just make sure you really understand the concepts that go with the language. It's those concepts that will allow you to jump to other languages with great ease. 
No Project Euler seems very unsuited to me. Those are typically algorithms and numerical problems. This is an area in which Objective-C is weak IMHO. Haskell, Python, Julia, D, Rust etc are probably better at that sort of thing. Objective-C shines when it comes to building large user applications. Because of its dynamic nature it easily glues together GUI with business logic and handles things like undo/redo, Model-View-Controller pattern very well. The best way to learn Objective-C is probably to follow the tutorials in Aaron Hilldegass iOS book (Big Nerd Ranch). While Objective-C is a fairly simple language behind its unorthodox syntax, mastering it is not easy, because Cocoa or Cocoa Touch frameworks have a bit of a learning curve. They are designed around a lot of common OOP design patterns. If you are unfamiliar with design patterns it might seem complicated at first. But what you gain from this complexity is that Cocoa/Cocoa Touch apps scales up to quite large applications quite well.
To answer your questions, yes, your understanding is correct. The variable "now" is basically an integer whose value is the memory address of your NSDate object (that is to say, it is a pointer to the NSDate object). Probably the biggest reason for this, according to my understanding, is that when you call a function, a *copy* of its parameters are passed to the function. This means if you modify a value, it is only modified locally in the function, so you need to have a pointer to the actual object to modify that object. This is also useful to save memory by not needlessly duplicating a large object multiple times whenever it needs to be passed to a function. If I'm incorrect on any points, I hope someone can clarify my answer.
You're correct. `now` is a pointer to an NSDate object. That means that somewhere out there in memory there is an NSDate object, and that if you dereference `now` you'll get that data. It's not really that this is "useful" to developing iPhone apps in the strictest sense of the word useful. `now` is a pointer because Objective-C is a strict superset of C. You work with pointers all the time in Java too, it's just hidden from you. /u/douglag is also correct, saying that when you call a function, the parameters of that function are passed by *value*, instead of passed by *reference*. I can elaborate more if you have questions.
Thank you for this concise explanation as well as u/douglag (sorry if wrong I'm on my phone.) Yes you are right. They are used in Java. However I never really handled them myself so it is difficult. 
In Objective-C you probably won't have to do too much handling of them either. You'll know when the framework wants you to pass in a pointer, otherwise just treat your objects like normal variables. 
Wait does that mean I can declare an NSDate as: NSDate now = and stuff here ? -notice no asterisk 
No sorry if I was unclear. `[[NSDate alloc] init]` returns a pointer to an NSDate object, so you have to assign it to `NSDate *something`. However, once you created the object, you don't need to dereference it any more like you do normally in C to work with pointers. All the methods in the NSDate class operate on a pointer, and most (almost all) methods that take an NSDate as an argument will take a pointer, although occasionally you'll see a method looking for a ** (usually you see this with NSError).
Thanks a lot for this! This is was also one of my big confusions.
This really isn't specific to objective-c, it's language independent. All languages, including Java, have pointers. Basically, there are two ways to refer to data. They are called _pass by value_ and _pass by reference_. Let's say you have a structure, or an object, that contains a string. You want to send that string to a piece of code. To send the string using _pass by value_, you would make a new copy of the string and give this copy to the piece of code. When that code was finished with the copy, it should discard it. This is easy to understand, but inefficient - you have to spend time making a copy of the string. So modern languages usually use the second form, _pass by reference_. In this model, you don't make a copy - you just tell the code where to find the string. This information is called a "pointer". This saves time, because the computer doesn't have to make extra copies of the string, but it's risky because any changes a piece of code makes to the string will affect every piece of code that wants to use the string. In both Objective-C and Java objects are passed by reference. The difference is that Java hides this from the programmer, while Objective-C makes it clear what is going on. Hiding pointers from the programmer was a deliberate design choice by the developers of the original Java language and it was quite controversial at the time, but it's an important part of the way Java automatically manages memory allocations. C-based languages were designed for manual memory management, which is why memory leaks are a common bug in C-based applications. 
Pointers are how the Smalltalk-inspired Objective-C runtime is glued on top of C. Outside of declaration and assignment, you generally don't need to care about this, as you don't interact with objects using C primitives but instead with message passing, i.e. [someObject someMessage]. If you find yourself attempting pointer arithmetic on objects you are probably doing it wrong.
Wow! Even more clear. This is the best ELI5 explanation.
Awesome. I was really worried about using pointers and keep memory locations throughout my app. It would be really hard if it was really complex.
I don't want to nitpick but having looked into pass-by-value/pass-by-reference issues a lot I just wanted to chime in. Although it seems like Objective-C and Java pass parameters by reference, they are actually passing by value. The tricky part is that the value they are passing is a reference. Since C is explicitly pass-by-value, Objective-C must also be. You can see this is the case because you can reassign the pointer passed into a function/method and not have it change the original pointer.
iBeacon transmits only one UUID and I'm assuming this is programmed via the cloud interface. The device probably uses a serial number or something else, but that shouldn't matter. 
Yes, the pointer itself is passed by value. It kind of has to be - but I didn't want to confuse the topic by diving down the rabbit hole otherwise we'll end up talking about the mechanics of stack frames, handles, scope, and confusing the heck of everyone who doesn't already have their degree in CS. ;-D
Hey boogieidm! I started learning Obj-C from scratch about 6 months ago. I finished u/Middlebrowmentality’s suggestion book, “Programming in Objective-C” by Steve Kochan pretty early on. I felt as though I didn’t fully grasp some of the concepts so I did some research and Big Nerd Ranch’s book on Obj-C was highly recommended. It was seriously incredible. That book tied up all the loose ends and got me pretty excited to keep moving. I’m currently on lecture 6 of the free iTunesU Stanford iOS course and feel pretty confident about it all. My only qualm with this whole journey is that I haven’t had a single person to ask questions, discuss ideas or gauge my progress against so if you have a question about something or just want to talk out some concepts, feel free to send me a PM. I’ve been pretty frustrated a number of times and being able to shoot ideas back and forth would have really helped. Good luck!
I was thinking it would be nice to have someone to talk to while learning. That's why I am doing the road to code on my blog. I figured it would be good to have peer help. I'll add you for sure. Thanks! Ps. I just got the Big Nerd Ranch Book too. I'll start very soon. 
Btw, check out my blog. Bnetechblog.blogspot.com Or follow me on Twitter. @BnETechBlog 
You could always register your app for remote notifications and send a silent push through apns and when it app receives it have it dl the new message(s) in the background and once received throw a local notification. 
Oh lord, there's a religious war if there every was one. Tabs vs. spaces is up there with Windows vs. Mac and vi vs. emacs. Personally? I prefer spaces, because a space is always a space, whereas a tab may be 4 spaces, or 6 spaces, or 8 spaces depending on what you open the code in. It starts to look really weird if you ever open up code vi or another editor that doesn't have the same tab size. Now, that having been said, I really don't care that much as long as it's standard across a project. I only get really annoyed when a project mixes both. FWIW, X-Code supports both approaches. So when I hit TAB, it inputs 4 spaces.
See, personally I prefer tabs because a space is always a space. A tab may be 4, 6 or 8 spaces depending on user preference (pretty much all editors allow you to customise the width of a tab).
I personally prefer spaces and that's what I use for ruby and the likes, but since Xcode defaults to tabs, I just stick with that in order to make collaborating with other people easier.
I use spaces, partly because I worked for Google for many years and that's their standard. It's like second nature now.
Code formatting standards are set on a per-project basis, but you will see frequent arguments over: * Number of characters in a line * Whether to use a single tab versus multiple spaces for a level of indention * How to intelligently break and wrap a line so that it lines up as beautifully as ASCII art with the preceding lines. Many years ago, these were real questions. Some keyboards didn't even have tab keys that produced an ASCII tab character. Some monitors couldn't reliably be used at widths beyond 80 characters. Some code editors had to keep such low overhead for their own logic that features like intelligently formatting user code was a real performance killer and waste of RAM. Today, these are not serious issues other than having gotten into certain coding habits. If you are working on your own code, do what you like. But if you are working on other projects, don't rock their boat. Read their coding styles and stick to them. clang-format is a tool being worked on that tries to automate a users raw source code into a standard (configured by a preference document). In languages like C, C++, and Objective-C, there is *very* little source code formatting that has semantic meaning for the compiler. If you are willing to stick to a set of rules (and willing to add the rules you need that don't exist) you can let the computer take care of enforcing a consistent looking code base. If, one day, we can reduce the formatting to a computer-solvable problem. It can be reduced to a step of the commit process like passing unit tests today. Eventually, that will allow coders to specify how they want to see the code in their editor even if that differs from how it will be committed to the repository. Some day we may see the end of wars over line endings, types of white space to use, where it's "clearest" to break a line ending, and maybe even how long the lines should be. To me this is sounding very similar to the progress the desktop publishers took evolving from fixed width typewritten pages where every writer had to be an expert layout artist to the days where the writers write and the computer does the layout (based on rules composed by intelligent humans). Heck, we may even see a day when we our code editors no longer demand us to use fixed-width fonts. But alas, that's just a dream right now.
Not just in different editors, but also in web/terminal displays.
Heathen
It's more of a problem when working with other peoples code. 
Code indented with spaces won't automagically reindent when you change tabstop.
I think it mainly has to do with people breaking lines and expecting it to look OK for others, which breaks massively when using tabs and having different tab size. The other thing is that various shitty editors (ehm, Eclipse (disclaimer: last time I checked, which is a few years ago)) can't really handle tabs properly. For me, the choice seems simple - a tab is a semantic unit of indent (1 tab is *always* one indent level), a space a visual one. So I prefer the semantic version. But OTOH it does need discipline (or visible tabs) to ensure consistency.
I'm not sure I understand, sorry. My point was: if the code is indented with spaces, changing the setting of tab stop will not automatically change all the lines beginning with spaces to begin with different amount of spaces. If the code is indented with tabs, it will (well, it will appear to, they will still be tabs). So while spaces are great if you want to preserve how the original programmer saw the code, tabs are great if you want to see all the code the way you prefer it. I try not to replace tabs with spaces nor vice versa because it breaks git blame, etc.
Don't the Mac already have a native option for inverting the colors on the screen?
You can use CTRL + ALT + CMD + 8 to invert colors. Simply inverting colors can leave you with some very high-intensity colors that aren't exact easy on the eyes. Tranquility uses a greyscale gradient, and allows extra things like disabling the window drop shadows which end up being bright white in 'invert colors' mode. You can also choose tint colors. If you are a stargazer used to looking at red displays to preserve your green-responsive rods' night-vision ability, you can tint your screen red. If you are used to the high intensity night vision look, you can tint your screen green. You can hide the desktop, in case you have a dark wallpaper that you don't want to blind you when it becomes brighter. Unfortunately, the way we accomplish this in code happens after the layers are composited and rendered, so I can't submit screen shots of the effects. (The ones on the linked site are "simulations", which I really should comment on somewhere besides here.) You'll just have to download it and give it a try! H.T. to /u/pyro2927 for a beautiful summary which I modified heavily.
Interested in this one as well.
downvote for calling the constructor "singleton" .. better would be sharedInstance and mark the obvious inits as depricated.
What for you want this loving os x^
Wow, I really like this! I was already using a chrome plugin that sort of does this (but not as well), so this saves me a bit of effort there. Thanks, love it!
NSDate *now = [[NSDate alloc] init]; Would be identical to a similar Java line: NSDate now = new NSDate(); In both cases "now" is a pointer to a "NSDate" object. The confusing stems from Java calling their pointers for references. This was probably motivated by a desire to make it clear they are not like regular C pointers, in that they don't allow e.g. pointer artimetic. But e.g. languages like google Go, uses the word pointer instead of reference, despite having the same limitation. Objective-C is a superset of C, so you should simply learn some C programming and the concept of pointers will become clearer to you. I think avoiding C is a common mistake for Java developers switching to Objective-C. If you don't know the C part then you are leaving out a lot of usefull tools in your toolbox. Especially since in Apple APIs pure C code is frequently used. I recommend the classic "C programming Language" (2nd Edition): http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan-ebook/dp/B009ZUZ9FW/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;sr=1-1&amp;qid=1391901452 It is an awsome book. It is relatively short and well written. It will give you a good understand of C.
Love it! Thank you :)
Thanks! I will look into C. I'm reading Objective C Programming, Nerd Ranch guide which has delved into C so that has helped. Also, I didn't know about Google's language Go. Will check that out! Thanks
Have you done any scraping or parsing like this before? It can turn into a big job, even if you're using the right tools. At the very least, the learning curve to use the tools will take you a little while. Look into libxml2: http://xmlsoft.org/ The above is a C library used to parse XML. I believe it has an HTML parser as well. Using a specialized parser like this is the preferred way of doing things, as opposed to parsing the text yourself using regular expressions. Maybe someone on here has a simpler solution, but I've told you what I know. Word to the wise though. If you don't control this web page, and there is the possibility that the layout could change often, you're potentially in for a world of pain.
This is all pretty much correct. I've been parsing using [https://github.com/topfunky/hpple](https://github.com/topfunky/hpple) as a resource, which is a pretty useful tool for obj-c, but only if you need to parse!
Thank you for corroborating that. I've never done this kind of thing in Objective-C. My inclination, especially when relying on a 3rd-party's web site, is to write a server application in some text-friendly language like Python, and then hit my server with the iOS client.
If this is always a simple value inside &lt;body&gt;, then a simple regular expression is your best friend. Just 1 line of code. If this is something more complicated, then you need to parse raw html with a lib like **hpple**, which was already mentioned here. But I bet regexpr is your best shot in this case
Well, yeah, but as soon as there's some tiny change in the specs then he's gonna have to change it all to some parsing tool, so he'd better just use a parsing tool anyways
I might test that simple expression. I doubt it will change, and if it does, well. Then i'll have to rethink how I do it. But what's that simple expression? Thanks
Very interesting stuff. I've never looked into Go but I think I will now. 
If you love Java so much then go use Java. I'll stick with Objective C.
I don't think you will be able to find a single mentor who will be willing to guide you through this project. What's in it for them? What people normally do is start as best they can and ask **specific** questions of the community when they get stuck. You might want to checkout http://stackoverflow.com/questions/tagged/cocoa for that. Alternatively there are many excellent books that will get you started. I recommend the [Stephen Kochan's Programming in Objective-C](http://www.amazon.com/Programming-Objective-C-6th-Developers-Library/dp/0321967607/) book as great intro to the language for a novice of programming. You might also want to checkout the [Big Nerd Ranch book](http://www.bignerdranch.com/books) to learn more about the Cocoa framework. I also really like http://youtube.com/#/user/AppleProgramming YouTube channel for really well explained, easy to follow tutorials on different aspects of Objective-C and Cocoa. Finally, start small. It sounds like your app might need to use a table view, so I'd recommend just doing and example project on table views.
I only worked with one type of beacons, the whole thing works great although there's alot of room for improvement and cool new stuff. Anything particular you'd like to know?
Well, there are two Texas instruments chips that are used as a base for almost all beacons available at this moment. Beacons themselves vary by implementation of these chips and that affects power consumption and signal quality. Beacons that I have are a bit crude in that regard but they work and are reliable for what they do at the moment. Get yourself couple of cheap (~$10) beacons from China, they'll do more than fine. Don't spend lots money on something like estimote, because ibeacons functionality was bolted on trough convulted sdk with lots of restrictions. Also, you don't need raspberrypis, usb dongles etc, just beacon and ios device and maybe uart cable. Beacon can be managed and secured via bluetooth, uart cable is used for firmware update. 
And that is a exactly what I am looking for, thanks. 
I pre-ordered a device called the Cortado from a company called Punchthrough. Interaction between an iOS device and an iBeacon seems pretty straight forward. I'm very interested to see how it changes the world of retail. I'm also interested to see how it plays a role in non-retail apps and iOS devices acting as both a beacon and detector (I'm not sure if you can do that). Daisy chaining them should be pretty cool as well. The long battery life due to BTLE should be awesome. I even see iBeacons acting as wearables to analyze running stats, golf swings, orientation, etc. 
We just got a few from some Kickstarter at work. The seem solid enough, I'm just a little nervous right now since even though the spec is baked in to iOS, Apple has the ability to change that at their leisure, and since the only "official" beacons are iOS devices, they can change the format with software. Supposedly they're nearing production of beacon devices, but you know how that is - Apple Rumors. From playing with the ones at work for a few minutes, they work great. Assuming it hits a groundswell, you can do some really amazing things with them. I've spun up a few POCs that are pretty fun, with Passbook and region monitoring and ranging. 
Check out http://tryobjectivec.codeschool.com :) It is free and is a good start :D
What about the difference in the environment? Go's tooling is made available as command line apps and most Gophers are programming in Vim, Acme or something else like that, where Objective-C is mostly Xcode, although I hear some people are using Vim and compiling and debugging in the hands on the command line. What about you? Do you just completely switch environment (GUI to CLI and such) when you switch between doing Objective-C stuff and Go stuff, or have you found a common middleground? I am coming from doing PHP, JS, Haskell, C and C++ (and the last year also Go) in Vim and exclusively using command line tools, but have done some Mac and iOS stuff for some time now, and I have huge trouble with this so drastic change in environment from CLI to GUI. Not only because I am used to CLI tools, but also principally where all my CLI tools are open source and Xcode is not, and because I like CLI because of its modality, chaining and transparency, which no IDE or GUI, in itself, is not.
The environment switching isn't a problem for me. I never got into Vim or Emacs, though I should have, so I use Sublime with the GoSublime plugin, which is great. GoSublime integrates with Go's command line tools, so I don't have to really do too much in the command line, besides go get, build, and run, and general git stuff. I just keep Xcode, Sublime, and terminal on the same OS X space and switch between them, because most of the time I'm working only in one language/environment at a time. I come from using GUI's, but over the last few years have moved to CLI tools. Still I feel that what I make up for in speed with CLI tools, I lose in mental models that GUI's provide, so I do prefer to use those for the most part.
I am another Objective-C guy who also loves Go. With Objetive-C I usually use xCode. But for Go I use TextMate. There is a project named gocode which gives you real function completion in TextMate.
If you still find it complicated, it might be that you should focus on understanding programming in general rather than Objective-C in particular. Objective-C is a pretty okay programming language IMHO but it is not ideal as a first programming language. You probably notice that it contains a lot of weird symbols which will confuse you. If knowing Objective-C is your goal though, then an alternative to consider is the Smalltalk programming language. It is very beginners friendly and Objective-C was heavily inspired by it, so it makes an easy transition to Objective-C later. This is actually how I learned Objective-C. When I knew C and C++ and looked at Objective-C for the first time I found it confusing, but after learning about Smalltalk I found it quite easy to pick up. If you got access to a Windows machine then, Dolphin Smalltalk is really neat: http://www.object-arts.com/products/dce.html 
Everybody has already come with lots of useful tips so I am just throwing in some different angle on it. I learned Objective-C about 10 years ago when there was no Big Nerd Ranch books. What helped me a lot then was learning Smalltalk first. Smalltalk is a very simple language originally intended for children. All the Object Oriented system in Objective-C comes from Smalltalk. Knowing both C and Smalltalk makes it very easy to understand Objective-C. F-Script (http://www.fscript.org) is a sort of Smalltalk built on top of Objective-C. It lets you use Cocoa etc but with Smalltalk syntax. Not sure about the stability or maintenance status of F-Script presently though.
I have been reading in this now on then. Great stuff, they deserve more attention.
Thanks for elaborating!
I am 100% new to programming and wanted to learn iOS app development so I looked towards this course to learn. Like I said thought, I have no experience with programming and like this course and others state, you need to know "this, this and this" beforehand. So what do I need to know to set me up for this level such as this course? 
Well, first thing is I think you should start learning a bit about C, the language that runs "under" Objective-C. In particular how to manage memory and learn the difference between variables by reference or value. Also you should learn how to use control flow sentences like if, for, while. You can learn this part with other programming languages, syntax may be different, but the theory is the same. Then you should learn the basics about Object Oriented Programming, and design patterns, but first what I said before. A very good point to start is reading "Programming in C" by Dennis Ritchie. The book is very old, but covers the basics of C and programming in general.
I'm wondering since Go has C/C++/Objective-C bindings (in 1.3) can there be bridges that hook into frameworks like QT, Cocoa, etc?
It always bums me out when people react to Objective C's quirks with "Objective C needs to be more like X". Most of the reason I enjoy Objective C is its difference to other languages. It is probably the most idiosyncratic language I have ever encountered and I love it for that.
What is tells me is that you are preloading the view, but that whatever the performance issue is it is not solved by preloading the view. You need to find the actual source of the performance issue. Try using Instruments to find out what is taking so long. Maybe some work is deferred until the view moves into a window, or maybe it's the rendering that takes so long. Until you know you won't be able to speed it up. 
I had a similar problem with UIDatePicker and found that nib loading of these elements always ends up being really slow. If you profile with instruments you will likely find a bunch of expensive stuff happening only when the picker is actually added to your window. This seems to be related to the nib loading reconfiguring the picker mode and setting in the initial date/time. I worked around the issue by removing the date pickers from my storyboard altogether. Instead, I placed UIViews where I wanted the pickers and connected them to IBOutlets. When the application launches, preload and configure the date pickers into the state that is required. Then in the awakeFromNib of the controller with the placeholder views, grab the preloaded pickers and add them as children of the placeholders. It's important that you get the pickers into their desired state at app launch, it will put the sluggishness to a spot much less noticeable by your users. This improved the situation significantly, enough so for me to have stopped trying to find any further optimizations. Unfortunately UIDatePicker seems to be a really clunky implementation, and is basically unusable when instantiated directly from a nib (at least on an iPhone 5, don't know how the 5s is).
&gt; CRToast [GitHub link](https://github.com/cruffenach/CRToast) in case any one is wondering. 
Lazy checking in. Thank you. 
Glad it worked for you! Cheers.
In order to loop and go onto the next variable I would do a search on how to add the countries into an **array**. After you have them added to the array you can go through that array and do some more math on each country. Check out this [tutorial](http://rypress.com/tutorials/objective-c/data-types/nsarray.html) and look at the "enumerating arrays" section.
Ok thanks! I'll look through that tutorial and try to figure it out again. I'll come back if I get stuck again.
I assume we're talking Console apps, here. Pay special attention to the way your loop through your array - it'll be useful when it comes time to graph things in the console. 
I PM'ed you
Both are fine. Core Data is probably simpler if you don't know either technology. And just to make sure, this is for persisting information across app launches or performing complex queries. If you don't need either of those, an in memory array is probably more than sufficient.
You can also try using [FMDB](https://github.com/ccgus/fmdb) as a wrapper/framework for sqllite.
I have some experience in SQL so at the moment i am going with sqlite and im using Sqlite Manager plugin for Firefox. Thanks for your answers, i realise my question was a bit vague. I shall take a look at FMDB instead of the Firefox plugin.
If your a student, send me an PM and I can give you a promo code for [SQLite Professional](https://itunes.apple.com/us/app/sqlite-professional/id586001240?mt=12).
Core Data and Magical Record (framework to make it easier for you). Mogenerator can help also, it generates classes from your Core Data model.
stay away from coredata, in the long run it will pay off to stick with sqlite
If the number of records is not too massive you could just store this info in a plist. NSArray and NSDictionary can both be created from plist files (e.g. [NSArray arrayWithContentsOfFile:]), and can also write to plist files (writeToFile: atomically:).
https://github.com/yaptv/YapDatabase
 Here's two more cents for you - mine. I tend to fall back on SQLite. I've played with Core Data, but I don't know it well enough, and I haven't taken the time to sit and learn it well enough that I feel comfortable using it in a big project yet. What's more, I have a decently big SQL background, so it's easier for me to think of my data in terms of SQL, and not Core Data, which is an Object Map more than a datastore. My usual pattern is to make objects with an initializer from an NSDict that comes from the DB. I use FMDB whenever the project allows it, but have written my own SQLite wrapper in a project that wouldn't allow third-party libraries (huge pain in the ass, but worth the experience). The moral of the story is go with what you know. I know SQLite in and out, so I use it. 
That's actually a good point - depending on the data type, you may not need a store at all. I've backed a UITableView with a mutable array of 500 objects without any performance issues whatsoever. 
NSArray can support millions of objects performantly and I'm pretty sure will beat out SQLite for most index-based tasks. It's optimized for that specific purpose. http://ridiculousfish.com/blog/posts/array.html
Not having anyone to talk to was one of my biggest issues starting out with Obj-C. Fortunately in my local area (Albuquerque, NM) there's a group of iOS developers that meets weekly (Cocoa Conspiracy) and I was able to find them on the web via Meetup.com. A lifesaver for me and they kept me going through those times when I was stuck for weeks on the same problem. Also definitely do the blog too, as we never know where help will come from, and it helps to keep track of progress. TLDR: Check your local Meetup.com for other iOS devs. Do the blog too.
I actually figured it out. Still not really sure what i'm doing but I did #import "XYZAddToDoItemViewController.m" and it should have been #import "XYZAddToDoItemViewController.h" I think I kinda know what happened... not to sure.
Objective-C source code files have the .m extension. Because you may not want (or legally can not) share the human-readable source code with others, the file is usually broken into two parts * a header with public information (esp. What classes are defined in the file) with a .h extension * a private implementation file (.m) with the source code that you usually want to keep private from others. When you want to pass around a library of materials for others to use, you can just send the .h header file and a .o non-human readable object file. When you want to reference the file in another file you create, you have the public .h header that tells the compiler what your code will be calling and referring to, but it doesn't have enough to actually compile *that* code itself. When the compiler can't find the .m file, it looks for the .o file instead. Some other compiler already did the hard work compiling the .m file (privately) into the .o file. That's unreadable to you, but it has all the same info the compiler would have created; it just *links* the two together. In your day-to-day work just remember: everyone needs to import the public interface information in the .h file. 
Thanks! I think these tutorials are a great way to learn once I have some background information. I'm always looking for more info, so if you have any suggestions for someone with no coding experience to learn more about the way it all works that would be great.
This has to be the best explanation of .h and .m files I have ever read.
In addition to asking here, I would try searching StackOverflow (http://stackoverflow.com) it already contains answers to any question you will ask I the next three months. If it doesn't it's a great to ask new questions.
You flatter me. After pressing "Save", I almost decided to immediately delete it. None of this stuff is *hard*, but there is *so* much stuff to know that there is no easy place to start learning. My explanation will have a lot of people saying I left out many facts, and they are right. * Even if you never decide to share your files with others it's still good practice to separate interface (.h) from implementation (.m) * You are free to put anything in the interface file even if it doesn't relate to the public interface (preprocessor macros, comments, raw c functions, etc). Those things are a way to save typing, the real *need* that can not be worked around otherwise is the separation of interface and implementation. * You technically never *really* have to separate the two if you are okay with giving people your whole source code file. At the heart of things you *could* just have one .m file with both the interface and implementation. When you import that into other files you *will* import the .m file because it has the interface section the compiler needs. Yes, it works as one file, but it's a very sloppy habit to get into and there are good reasons to learn this separation from day 1. * of course if you are building a library to distribute to others it isn't as simple as zipping up the .o and .h files. That is the essence of what you'd do, but that can be a very complex task with issues of multiple CPU architectures and including the things your code depends on and putting them in a structured place where Xcode can find them. But the .o file is what the linker needs and the .h file is what the preprocessor needs, and if you have those two, you don't need the .m file. Objective-C is a big language that evolved from lots of simple rules. There are just *tons* of them though and they can be hard to keep straight. Don't get discouraged.
I learned from the Aaron Hillegas, Big Nerd Ranch books. They *just* released updates so be sure to get the most recent versions. Start with the orange one with the tricycle on the front on Objective-C. (Published Nov 2013, I think) Move on to the green one on iOS programming for the iPhone. (Published Feb 2014, I think) Don't give up! They seem like hard books, especially when you're about half way through. Even great authors like Aaron can't explain everything and it can be a hard thing to work through them while developing your own big picture. But do it.
I'm about half way through the BNR obj-C book and it is very good. The end of chapter challenges get tough pretty quick but it helps motivate you for sure.
You need to wait until you've got a complete line from the serial port to append the new line character. A quick and dirty solution in your specific situation would be to just remove contents = [contents stringByAppendingString:@"\n"]; and insert a line after initializing textToWrite [textToWrite replaceOccurrencesOfString:@"c" withString:@"c\n" options:NSCaseInsensitiveSearch range:NSMakeRange(0,textToWrite.length)]; As an aside, completely reading and writing the file every time you receive data is a potential performance issue if your files get big. Since you're only reading data every 2 seconds this may not be a big deal, but in general this approach is not a great idea. Instead you should open a file handle (NSFileHandle) when you start receiving serial data (eg, not in this function), then write your text to that, and when you're totally done close the file handle.
Could you just play a video instead of an animation with 150 frames?
Allocating 150 images before even using them is not a smart idea. You should allocate one, allocate the next one and deallocate the previous. 
You are allocating way too many images at once. If you try and allocate 200 MB of images and add them all to an imageView before didFinishLaunching returns you're going to have a bad time. The reason this works in the simulator is because your Mac has plenty of RAM (probably 4GB+). The phone has a maximum 1GB and if the Operating System sees a huge spike you're going to get killed to prevent the whole system from slowing down. One solution could be instead of creating an array of images and assigning them all at once to the imageView just create an array of image names/paths. Then have a timer that increments some counter and assigns the new image to the imageVIew. Be careful of not indexing out of bounds and depending on the size of your images you may want to pre-allocate the next image because it can take some time to load an image from the bundle. 
http://superuser.com/questions/19899/mac-os-x-easiest-free-non-quicktime-pro-application-for-converting-numbered One of these may work
Yeah I ended up using quicktime pro! It worked like a charm
&gt; scanf("%i"), svenskKrona; This should be: scanf("%i", &amp;svenskKrona); You're scanning a value, but not storing it anywhere with your version. It only "seems" to work because the comma followed by an expression is in fact valid syntax: http://en.wikipedia.org/wiki/Comma_operator | totalSum = svenskKrona * dollarKurs; You have not declared the totalSum variable anywhere - given your intention this should probably read: float totalSum = svenskKrona * dollarKurs; | NSLog(@"%f", &amp;totalSum); Here you're printing the address of totalSum, not the value. You should use: NSLog(@"%f", totalSum); As an aside - you shouldn't really use floats when doing calculations that require precision (in this case financial transactions) : http://stackoverflow.com/questions/3730019/why-not-use-double-or-float-to-represent-currency 
Thanks. :-)
Definitely*
Haven't tried to do it on ios yet, but i would probably use a pair of image views with my texture in them and animate them. I haven't ventured into sprite kit yet but I might give that a look too. There may be a more convenient or performant solution there. 
Cool! Looks like a different take on [PaintCode](http://www.paintcodeapp.com/)
Thanks! Yeah, sort of but another type of workflow. 
Registered!
[BayBrowser](https://github.com/EthanArbuckle/BayBrowser-2), a feature filled PirateBay browser and torrent downloader for iPhones and iPads.
It would be nice if one of these "We've added X to Y" programming posts would explain what X is and why I should care....
What does this do? Is this like aspect-oriented programming?
It is for attribute oriented programming — http://en.wikipedia.org/wiki/Attribute-oriented_programming It basis for solutions like aspects as well. So eventually someone may build something like it with use of attributes. It is pure technology base layer that provides attributes for ObjectiveC code and nothing more. There is framework build on a top of these attributes that solve challenges of serialization and web-services integration available by following link — https://github.com/epam/road-ios-framework If you will take a look at its example, especially to a following file — https://github.com/epam/road-ios-framework/blob/dev/Examples/iTunesSearch/ITunesSearch/WebService/ESITunesWebClient.h you will see one is the most popular use cases for attributes. So you have native methods that mapped to a web service calls that due to usage of attributes are self documented and no additional implementation required as it is handled within a framework itself. This is one of the creative ways to use attributes but there are many others. Attributes is a well know concept in languages like C#, Java and others and it really adds value to a language. Due to current maturity of ObjC there is no such functionality in it but we are strong believers that eventually this functionality will be presented to masses.
Handwriting recognition is a fairly complex process. To do it well requires significant understanding of statistical decision processing and image processing. Cocoa doesn't have a HWR library, but they do exist. [Tesseract](https://code.google.com/p/tesseract-ocr/) is an open source project supported by Google, LEAD Tech also sells a library for HWR for OS X (a very expensive one!). If I were you, I would go look at any and all iOS/OS X examples on the Tesseract project.
I actually did a project on this last semester for a graduate computer vision course and as a result I have quite a few papers on-hand with quite a few different methods. Most work very well and aren't too difficult to implement if you find other options to cost too much money, but I don't know how expensive they would be in Obj-C (my implementation was in MATLAB and line segmentation alone took about 15-20 seconds for a rather high-res scan of a medieval manuscript). Presumably they're not too inefficient, but I can't remember. Some of them did have time-complexity analysis but I didn't read them as it was outside the scope of my project. If you're interested in the papers I used just let me know. 
There are no "owners" of objects. Calling `[object retain]` doesn't set any ownership, it is just saying: "I need this object to hang around until I let it go" The basic rules are: - Release it if you *alloc* it. - Release it if you *copy* it - Release it if you *new* it You don't have to worry about it with ARC though.
When a property is retained it simply increases an internal retain count which means, when the class that is holding that property releases it, it may not get deallocated. This newly retained object has the same pointer. When a property is copied, assuming that copy implements the NSCopying protocol, you will get a completely new object with a different pointer. Example: The class Foo has a property that is strong/retained which is some sort of mutable type. Maybe its a NSMutable* class or maybe its just a custom model you've made. If you created two instances of Foo, and gave them both the same object that you created outside of the class, both of those objects would point to the same object. So if you modified the object in one class, the changes would reflect in the other, since they're the same pointer. If however the property in Foo was set to copy instead, changes made to that property within the Foo class wouldn't be reflected in the other. Hopefully that helps, its easier to understand if you understand memory management/pointers. Summary: strong/retain is like sharing an object, copy is like getting your own... copy.
You need to start logging stuff and seeing where the state of your app doesn't match the state of your expectations. And then slowly narrow down where the issue is. Your question is too broad right now. 
Check out FMDB on GitHub: https://github.com/ccgus/fmdb It's an Objective-C wrapper for SQLite, so you don't need to deal with any C functions
See my answer at StackOverflow. - After a quick look it seems the problem might lie in: &gt; NSString *query = @"SELECT * from Tracked WHERE barcode="; &gt; query = [query stringByAppendingString:barcode]; In your table, barcode is declared as TEXT. So you need to use LIKE instead of =. **What your query string looks like:** SELECT * from Tracked WHERE barcode=123123123123 **What it should look like:** SELECT * from Tracked WHERE barcode LIKE '123123123' (http://stackoverflow.com/questions/22382356/cannot-get-data-from-sqlite-db-to-display-in-ios-app/22390902#22390902)
Yes, and changes to ivars
Or ya know, break points ... 
Is there a reason you don't just use Core Data?
It tracks active usage. Here's some more detailed info about how it exactly does that: https://wakatime.com/help/faq/general 
You're approaching the problem the wrong way. In an event driven framework like AppKit (and nearly every other UI framework today) you don't ever want to block the UI thread like this. Instead, what you should do is start a timer (NSTimer). Configure the timer to go off after 10 seconds, and cancel it if something happens that invalidates what it would do. To be clear, with this approach there is no loop. 
I'd love to use this, but the plugin causes Xcode to crash quite often, for example every time i try to use the Assistent Editor or when my app throws an exception and i want to go to the line where the exception was thrown. UNCAUGHT EXCEPTION (NSInvalidArgumentException): *** -[__NSArrayM insertObject:atIndex:]: object cannot be nil at [WakaTime sendAction:] at ~/Library/Application Support/Alcatraz/Plug-ins/WakaTime/WakaTime/WakaTime.m:130 (in WakaTime) 
It seems that self.lastFile is nil in these cases Edit: i've submitted a pullrequest that fixes the problem
Thanks for the pull request! Should be fixed now.
Agreed, but what you could do is run a loop that checks for a state change or against a time 10 seconds in the future. This, as you say, is not the best plan for the iOS platform. It would look something like (forgive formatting, phone typing): @interface MyThing :NSObject @property (atomic,assign) BOOL someState; @end @implementation MyThing -(void)waitForTenSecondsOrSomeStateChanges { NSDate *tenSecondsInFuture = [NSDate dateWithTimeIntervalSinceNow:10]; while(self.someState == NO &amp;&amp; [tenSecondsInFuture timeIntervalSinceDate:[NSDate date]] &lt;= 0) { //tick away } if(self.someState){ // stuff happened } } @end There are much better ways of doing this, except when unit testing where this is pretty much the only option sometimes.
That will only work if you run it on another thread, and then you have all kinds of multi threading issues to worry about. If you run that on the UI thread then the button click (and all other UI events) will be blocked. And of course it's also just wasting CPU cycles for no reason. It is absolutely the wrong approach. Seriously, just don't do it. 
I'm going to throw a few things at you but it's meant to be helpful feedback. First off, you're using a lot more "C" than "Objective-C" there. There are useful things that are available in the Cocoa frameworks that can be very helpful. This is not to say that inline C is not very useful - it is. But this is an ObjC subreddit you're asking in. ;) Second, code-style-wise, you should generally avoid using classes without a three-letter prefix. e.g. I could use "DBNTriangle" instead of Triangle. This is because Objective-C doesn't have safe namespaces, so if some framework you depend on uses a class called "Triangle", your class may conflict with it.For a project like this it should not be a hazard though. So, down to business - what's not working?
What does method swizzling have to do with anything? If you run this loop on the UI thread then you would be blocking the UI thread so the user would not be able to click the button or interact with the UI at all. That is what causes the spinning beach ball. Never, ever do that. It is a terrible idea. Stop confusing a new Cocoa programmer by giving bad advice. 
+1 for Tower. However it's SVN support is a bit choppy. If you prefer SVN, I cannot recommend [Cornerstone](http://www.zennaware.com/cornerstone/) enough.
Everything is working fine but I need to still figure out how to filter out letters inputed by the user. Say when they are prompted to enter the base they enter "s" I want the program to say "error, please enter a valid base as an integer." Sorry if I am writing this more like C. I have never coded in C before only and this is an objective c class project so I thought we were doing objective c lmao. Like I said to holigen, all of the names have been predetermined by my instructor such as Triangle, getArea, and the use of double. 
Because it's overkill for his usecase? Because he doesn't know it? Because he wants to do something with relational data instead of just store some objects? Because he already knows SQL, and would rather control how his tables are maintained, indexed, etc? Those are my reasons anyway. 
The fact that your instructor is telling you to write Objective-C this way is pretty disturbing, but that's beside the point. I forgot one thing in the code I provided you. If the input is invalid, then `scanf` will refuse to consume it from standard input, leaving it on the stream and causing an infinite loop (as it continually tries to read an `int`). The most robust way to do this is the following: while (1) { printf("Please enter the triangle's base length as an integer: "); int rc = scanf("%d", &amp;user_base); // if the input is valid, then break out of the loop // check for catastrophic errors // consume the rest of the input until the next newline (important) } This is honest about the fact that this is possibly an infinite loop (you could continually ask for an integer but always get back a letter). It also correctly checks that scanf succeeded and if it doesn't, it does the "right" thing. Otherwise, something is on the current line that's invalid, so your program has to skip past it. Edit: Added comments as to what to do instead of just giving the answer.
Thanks holigen. I know that is what I need to do but I couldn't seem to find the right way to do it; however, I just figured it out by trial and error and after spending hours on this one part... For those of you also wondering how to do this I'll copy my new code. It might not be the cleanest way to do it but it works 100%. Again, I'm sorry that this should've been in the "C" forum. I just thought it was a given I was writing objective-c since my class is called intro to objective-c along with my book :/ Oh well, here ya go. if(userchoice==3){ double userbase = 0; double userheight = 0; while(userbase&lt;=0){ printf(" Please enter the triangle's base as an integer: "); scanf("%lff", &amp;userbase); if(getchar() != '\n'){ printf("Error, please try again. \n"); } } while(userheight&lt;=0){ printf(" Please enter the triangle's height as an integer: "); scanf("%lff", &amp;userheight); if(getchar() != '\n'){ printf("Error, please try again. \n"); } } Triangle *usertriangle = [[Triangle alloc] init]; [usertriangle setBase: userbase]; [usertriangle setHeight: userheight]; printf(" \n The area of the triangle is: %f. ", [usertriangle getArea]); } fpurge(stdin); printf(" \n Would you like to run the program again? (y/n) \n"); scanf("%c", &amp;run); } 
Glad you were able to get it working. It's not really the "wrong" subreddit (your instructor should tell you that Objective-C is a superset of C, so any valid C is also valid Objective-C), but usually Objective-C is written in the context of an app that has a run loop and presents a GUI, using Cocoa. This kind of introduction to Objective-C is a bit odd. Usually they have you writing a simple Mac or iPhone app that computes something (like temperature or currency conversion) and gets its input through text fields. Also, input validation is definitely not done with scanf and friends. We're just worried you'll pick up bad habits.
It looks like I'll have to learn the GUI aspect of objective-c on my own since the syllabus doesn't mention it. My goal is to make a basic app eventually so I'm sure I'll be back with a more objective-c related question in the near future.
I don't want to be a debbie downer, because I like where you are going with this. However: * Laying out views in code is a bad practice. It was an understandable means to and end in the Xcode 4 days on a multi-developer project, but now that's pretty much a moot point with Xcode 5. The reason being is that XIBs decouple presentation from the rest. It's also a major pita to reason about visual layout in code versus simply taking a peek at a xib. * This has to generate and/or update XIBs. * Price point is a little high for such a simple Photoshop extension. * I hope you built this with Extension Builder 3 and not 2, since they are deprecating Flash based Photoshop extensions in upcoming releases of CC. Again, I like what you are doing, but I think you are doing it wrong. You should also be saving settings per layer so that I can go through and set things up and then hit a button to export the whole shebang. That's what I would expect for the price point you are selling this at. I've written Photoshop extensions, actually have written one that generates iOS apps (mine is targeted at magazine/interactive book publishing, not actual utility apps like yours is) so I know a lot about what you've done. Anyways, not trying to piss on your parade because I like it. It just needs to do more before I would consider buying it. Here are some youtube videos on the extension I built: http://www.youtube.com/watch?v=22qqsFHH1HY http://www.youtube.com/watch?v=YXlHFhbqzHU 
This looks really cool. Clearly has potential. Good job!
My best advice is to NOT follow the code style that Apple uses in their sample code. They're quick and dirty examples to show specific technology, nothing more. For code style guides, I prefer http://www.cimgf.com/zds-code-style-guide. As for learning the language, what helped me the most was learning to use the awesome open source frameworks available. Check out CocoaPods, and for example try implementing a simple REST client using RestKit.
Agree with everything except recommending RestKit to a noob. RestKit + CoreData has a pretty steep learning curve, and should probably be tackled after mastering language syntax and some of the Foundation framework. 
AFNetworking first would be an easier learning curve. then maybe RK without the code data 
Have you completed the Stanford iOS programming course on iTunes U? My advice for learning any technology is to get a basic grasp of it - completing a course will get you there - then build something in it. Hell, rebuild something you already use on your phone in it.
Objective-C is an object oriented language, but it's flavor is slightly different from languages you might have been exposed to so far like Java and C++. Specifically, there is an emphasis on message passing. So definitely try to get a sense for the way OO design worked in the language. For the Cocoa libraries, try to understand some of the patterns. The delegate pattern is used extensively, for example. Cocoa libraries are very well designed, although Foundation is better than UIKit. If you want to build iOS apps, I would recommend building a data-navigating application using UITableViews and UINavigationViewControllers first. This will give you a good sense of the language and frameworks and you won't need to fight the framework.
Mostly i've been reading AppCoda and Ray Wenderlich. I'll check out that course though. I tried to jump right in and just code an app from scratch and I got about 50% through but i'm stuck now and nothing works. It's very disheartening. I'm basically looking for the best source to learn or way to learn. 
you can always start out without CoreData, and do something small like a client to navigate your Google Drive. I'd agree that RestKit can be quite complex if you want to be fancy, but there are a few simple examples, for example the non-CoreData Twitter client.
having read it again (I'll confess it's been years since last time), I agree. the reason that it came to mind was probably the Golden Path stuff, which I follow religiously, but that I've never really found mentioned much anywhere else.
that and keeping assertions in production code.
I'm currently working my way through this book myself and have found it very challenging (in a good way) and helpful. My pervious experience has also been with primarily procedural languages as well (mostly shell scripting and Perl), and a bit of dabbling and tenuous grasp of object oriented languages (mostly Powershell). BNR also has forums available where other's reading the book will post their solutions to the challenges presented in the book and where you can also get help when you run into a wall. I also appreciate their approach to learning which I understand others my not as exemplified by this quote from their website's FAQ for their books: &gt;**Are you stuck on a challenge?** &gt;We want you to get stuck, walk away, come back, and work it out. We don’t expect getting stuck to be comfortable, and we understand that you might prefer having an approved solution to turn to when things get rough. Eventually, our jobs of teaching end, but your job of learning continues. We created the challenges to make you proficient at learning and problem-solving on your own. This is a crucial skill for any developer, and providing a set of official solutions cheats you of the opportunity to get really good at it. But you are not entirely on your own. Visit forums.bignerdranch.com. Ask for help, share your code, and browse questions and solutions that others have posted. Get advice from our Nerds and check with your colleagues. We know you can do it!
As a part of the team developed this solution I am extremely proud by this achievement. I would not post here for each of our successes but we are continue to move up and now we #10 — http://take.ms/MJsw5 :) You may follow our success on twitter as well — https://twitter.com/libobjcattr
If no backend exists at this time, what exactly will the users be signing into?
Use the Facebook SDK, and no, you're wrong, you can't just log in with your email. Facebook and google and friends use OpenID tokens, which can be cached and reused for a period of time before they expire and need to be re-authenticated.
The goal is to create something similar to a Spotify login system. A user can create an account on my app by either signing in with their Facebook account or using their email and creating a password. We would store all of their account information in the database so that the user could login from somewhere else (another device or on the website) and still have all of their account info configured correctly. When using the app, they will be adding things to their account/profile - I will be tracking all of these things and communicating with the database through a web service. I guess technically, all of the verification stuff will happen using the web service right? I just need to store the users login info when they are logged into the app - similar to how you might store the users login ID using a cookie on the web. What is the best way to mark off the user as logged in within the code where I can verify they are logged in and get their user ID from any view? By all means, if I am asking the wrong questions here or going about this all wrong, please call me out.
Parse.com is exactly what you need
I am actually working with a sys admin who is taking care of all the database stuff as well as the web service. I guess, my question really comes down to, what is the best way to store a verified user within the app, once they've already been verified by the web service? I was considering creating a userObject with properties like id, name, etc, and then using core data to store that userObject locally so the data stays persistent. Does that make sense?
&gt; no, you're wrong, you can't just log in with your email. What? Did you fully read the question? They didn't say log in using their Facebook/Google email and password, but have the ability for a user to make their own account independent of using the Facebook login option. [Just like Instagram or Spotify or 1,000+ other applications out there.](http://i.imgur.com/VihAHXN.jpg)
Thank you. This should be helpful.
Hi, I have posted a new 20-minute How-To video here: https://vimeo.com/90117084 and lots of vine videos on the website: www.nthstate.com/Flux Please let me know what you think! Chris
This is awesome! I tried to enter my email for the mailing list to hear when it's finished but I got a 500 server error 
Hi @fourtech20, Sorry about that, I've fixed the error, I'm certain I saved your email address. I'm really happy you like it, the BETA will be going out over the weekend. Thanks! Chris
&gt; The first parameter in every method signature is not allowed to have a prefix name. Huh? Yea well…. Apple things it’s best that the method itself should be suffixed with a relevant lead-in to the “main parameter” you want to pass. Huh, what's wrong with doing something like this, -modifyThis:(NSString* thisString) withThat:(NSString* thatString) (apart from that fact that you would never actually use such a stupid method name).
Another "things are different in objective-c and therefore I'm going to throw it under the bus with snarky commentary" post. Super. 
While your version is much better than his and was also my first thought, I have to point out that both are syntactically incorrect: - (void)modifyThis:(NSString *)thisString andThat:(NSString *)thatString; is correct. And yeah of course it is a totally stupid name lol.
if one wants bindings on iOS, a functional equivalent can usually be done in code via ReactiveCocoa.
&gt; There were other things to also figure out. OK, so there is no “this”, Apple decided to call it “self” – probably to differentiate from C Yes, or maybe because, you know, [Smalltalk](http://en.wikipedia.org/wiki/Smalltalk) used [self](http://www.jmcsweeney.co.uk/computing/m206/self.php) as its pseudo variable, not `this`. C has no `this`, C++ does… and it didn't exist yet when Objective-C was developed. &gt; I’ve decided it’s equal to a hybrid of “dynamic” and “IntPtr” because “dynamic” of course relies on the DLR (which Obj-C has no direct comparison). That's a retarded statement, all of Objective-C's "objective" part is what the DLR attempts to implement. The objective part is first and foremost dynamic. There's no direct comparison with the DLR because there's no need for one, dynamic's the default. &gt; Still, it was good to realize that Obj-C had this concept, and I have begun implementing it heavily. Of course Obj-C *started with* this concept, with its ancestry in the dynamically typed Smalltalk.
Wow! This is exactly the kind of thing I was looking for. I am very familiar with Rx for .NET and this looks eerily similar. I will check it out further. Thank you.
It's a learning curve to a different naming paradigm. I like to use the example of what if I want to update latitude and longitude. Would I name my method updateLatitude or updateLongitude? Well, I guess I just have to pick one (both are equally as important). I suppose a compromise would be to call it updateCoordinate and then pass-in a Coordinate class with properties of lat/long. 
I did not yet get to research that "self" was a Smalltalk creation, but I had suspicions. I will actually go and update my blog post accordingly - thank you for the information. I also DO agree with you about the dynamicism of Obj-C at a fundamental level. I think I started to realize that as the blog post was coming together, but I failed to tie that into an overall point. I will also update accordingly for this to make sense. 
Hi codemouse, I can see where you're getting slightly mixed up with method naming. I think you are mentally dividing the method into "method name" and "parameters" and becoming caught in a false dilemma. In fact the method signature in your example is "updateLatitude:andLongitude:" which makes perfect sense and is also literate (i.e. reads like it means). To take an example from Cocoa, the very commonly used UIColor class method "colorWithRed:green:blue:alpha:", the method name is not just the "colorWithRed:" section, it is the whole thing. Having said that, there's nothing wrong with passing higher-level constructs into methods either. Cocoa makes use of structs (for example, MapKit has a MKMapPoint which represents an x,y point on a map) and very commonly, UIView dimensions are represented with a CGRect struct. Some methods may also take other objects as well, for example NSURLSessionConfiguration has a property HTTPAdditionalHeaders which takes a NSDictionary.
i agree with both sentiments for naming, it's just a shift from how i've typically worked with methods in java, C, and C# previously. the more i go about method naming in this obj-c manner, the more i like it. it' an adjustment but a good one.
They likely mean HTTP parameters in the HTTP POST request. Look into setting the POST parameters on NSMutableUrlRequest, I think you want to look at NSMutableUrlRequest setHTTPBody. A quick search yields [this question on stack overflow](http://stackoverflow.com/questions/6148900/append-data-to-a-post-nsurlrequest) 
This looks correct to me as well. I'll add that you can use JSON to post to them which is nice because it can be simply serialized from dictionaries. According to their docs setting the "Content-Type" header to "application/JSON" allows you to send the data as a JSON string in the post body. You'll likely need to incorporate JSON into your application anyway since their API uses it extensively. if you embrace the de/serialization of their data now it will make things easier going forward.
This may help you http://www.appcoda.com/fetch-parse-json-ios-programming-tutorial/ I admit to not reading the whole thing but it seems pretty approachable and it uses the native parsing stuff so it's a good base introduction without any 3rd party parsers. There are faster/easier alternatives but you should understand the concepts first IMHO.
Great link! I have used this Xcode plugin for a while which let's you stay in Xcode to modify UIColor values. https://github.com/omz/ColorSense-for-Xcode
Thanks, I will mess with it tonight
Integer division and float specifiers...
I prefer just using #define RGB(r, g, b) \ [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1] and then x.backgroundColor = RGB(50,100,150);
So you already have a spreadsheet-like control that you are working with and have written? The problem here is that you just want to use an external library to export in Excel format?
exactly, I just need a way to export strings and numbers to a spreadsheet that can then be uploaded to dropbox. I want to be able to format the cells, that's why I can't use csv
Well I guess you first need to include xlslib in your xcode project and build it along side your other files. Second you need to figure out how to interface your code with such that you can supply xlslib the information it needs to create the Excel file. Personally I haven't done this before. But you could start with above steps. Probably a better place to ask this sort of question is on the xlslib mailing list or on stackoverflow.com. Hopefully someone that has used this with OSX or iOS can comment. By the way I did spot this on stackoverflow, http://stackoverflow.com/questions/13578335/xlslib-integration-in-ios-application that might be useful.
How flexible does it need to be? Could you have a template document already created that contains placeholders, and you simply replace the placeholders with the values from the app? Or do you need to do interesting things like variable numbers of rows? I don't know much about the format, but the current Microsoft Excel format (xslx) is supposed to be XML, which means it should be editable text. With some clever playing around inside Excel and examining the produced file, you should be able to reverse engineer what changes are made to the overall file when you change the contents of an individual cell of your template.
This is exactly how i have it working now but I don't think i'm doing it correctly. I saved an excel template as .xml with some unique strings in the cells I wanted to change. Loaded the file into my project, changed the unique strings, then resaved the file but I kept getting corrupted files every so often. That is what led me to believe this wasn't the correct way to do it 
It looks like this is what i truly need but I can't find any literature on how to incorporate it/use it in my project. I did find where it says to use JXLS lib but that also has no documentation... very frustrating
To incorporate it into your project you need to make a new build script that will (I guess) call `./configure` and `make build` on libxls. I think xcode calls this an "external build system", see here, http://hiltmon.com/blog/2013/07/05/xcode-and-the-simple-c-plus-plus-project-structure This will give you complied libraries of the libxls code. You now need to include those libraries in your xcode project so you code links against them. As a few specific equation about how to do this on stackoverflow, I'm sure you will get up and running quickly. 
Check this out: https://www.codeschool.com/paths/ios
developer.apple.com and https://developer.apple.com/programs/ios/gettingstarted/ obviously ;-p
Albeit not a website, but I found the Stanford lectures that are available at iTunesU really helpful when I started. Very straightforward examples and they also go quite in-depth into both Xcode and MVC which is pretty crucial in Cocoa programming.
If you want to make a game you'd probably be better off learning to use something like [Unity](https://unity3d.com/) or just learning C/C++. Objective C isn't a terribly good language for a beginner writing a game since there aren't a lot of game oriented libraries for it. 
Why not just wrap it up in a c function? Gives you autocompletion at least..
Back in the day I used to refine my understanding here at [Mike Ash's blog](https://mikeash.com/pyblog/). Not really a getting started site, but when you start to understand the basics, this can help put them together.
http://objc.io is good too
Except for apples own gamekit or cocos2d 3? Those are great libraries, both in native obj-c, and way better to start off with than learning unity. 
Those libraries are pretty much the bare minimum. They pale in comparison to the wealth of libraries available for c/c++. I wouldn't really recommend that road for someone with little experience, though. For someone with very little programming experience as OP describes, Unity is a much easier learning experience than the other approaches. That's without even covering the ancillary benefits of using Unity for a first time game developer like the asset catalog, easy cross platform support, and large community.
You need a mac. Wait til June 2, then buy the new version of this: http://www.apple.com/mac-mini/
You need a Mac.
So while you don't need a Mac to write pure Objective-C, all of the iOS-specific functions, user interfaces, editors, etc run only on OS X. So if you're planning to build anything that runs on Apple hardware, you'll need Apple hardware.
I replaced my Windows laptop almost 2 years ago with the first run of Retina-display MacBook Pros. I haven't touched my Windows desktop in so long (even less now that Steam's In-Home Streaming exists).
I just bought the stock high-end configuration of the late-2013 15 inch and this is pretty much spot on. Civ V, Source engine games and other mac ports play well. Planetary Annihilation is kind of slow but the game is still in pre-release so optimizations may be on the way. But if you are at all interested in Objective-C then you are probably interested in Mac/iOS development and need to be developing in Xcode. Edit: my machine has a discrete GPU
Right. My perspective is if you need to get a Mac to do Xcode, then might as well go all-in and get one that you can also use for your everyday computing. If that includes gaming, the Retina fits the bill. I'm sure the late 2013's and the updates that'll probably be out in the summer are much better than mine but I can see mine lasting *at least* four more years before I feel the need to upgrade. That coming from someone who couldn't go two years without replacing everything in his desktop. Also would like to add that you don't have to do Mac all the time. Boot Camp is completely effortless, in my opinion, and Windows runs more smoothly than any other laptop I've used. Dual-booting is super convenient if you can remember the key combination to use at boot. One thing I should mention on the topic of multiple OSes: I've tried a couple virtualization programs: for class, I had to use VMWare (I got an academic license), and personally I used VirtualBox. I hate VMware, I think it is clunky to use and just doesn't feel right. However, it runs much more smoothly than VirtualBox. Also beware that if you also currently have a Windows machine, many of your software licenses including Microsoft Office will *not* transfer and you'll have to buy them again. Luckily my mom's boyfriend still had 2 licenses on his copy of MS Office and let me use up one of them. Anything else will be like the above in the sense that it boils down to the OS more than the machine. For example, I love Notepad++ and gedit, but I've found that gedit runs like shit on Mac (at least it did when I first bought the machine) and there isn't a good Notepad++ substitute other than TextWrangler, which I don't much care for. Also, I love 7-zip but I hate Keka. Although these are such stupidly small grievances and if it bothered me enough I'm sure I would have found an alternative by now. :P
Rypress.com
You may be able to do it using a virtual machine with OS X on it instead of needing a mac, although using xcode or the simulator in a VM sounds pretty painful.
&gt; Also beware that if you also currently have a Windows machine, many of your software licenses including Microsoft Office will not transfer and you'll have to buy them again. Luckily my mom's boyfriend still had 2 licenses on his copy of MS Office and let me use up one of them. Why not just use iWork? Unless you're a super Office power user, iWork should be more than enough. If you're determined to have Office for Windows and Mac though, you could get the subscription, it lets you install Office for whatever computer you have at no extra cost.
i run KSP and planet explorers on mine. 
The next model is anticipated to come with Intel Iris Pro graphics, which will be considerably faster.
You think they will update the mini at WWDC? 
Instead of waiting (endlessly) you could also just buy a new iMac. It was updated recently (Apple updates their hardware once a year) and has more oomph than the mini. I myself have a MacBook with an external display attached, but I plan to buy an iMac as a next machine, as I don't need the mobility of a laptop.
They may unveil it during the keynote or afterwards quietly as Perkelton suggests. That buyers guide is super helpful.
They are actually set up as - (IBAction)buttonPressed:(id)sender; - (IBAction)buttonReset:(id)sender; Where'd I go wrong, haha? 
I'm up for a challenge. One thing at a time though haha. I found a simple tutorial and am making simple improvements to it, so disabling the reset button if it 0:00.0 would be perfect.
You forgot to setup the buttons! Much like (I am assuming) you control dragged and then selected Action for the buttons, do the same thing but select Outlet instead and give your buttons a name. This way you can access them and change them from different places in your class. edit: Another way to think about it, imagine you have a text label and you want to change the text on it in your code. You have to control drag your label over and set it up as an outlet so you can access it and change the text, ya? So same thing for your buttons... right now you can make them do stuff when you press them since you set up the *action* part but the button part is still missing.
I did it for months on a windows 8 laptop. It's actually not that painful with a SSD, and I was only allocating 2gb to it. It's definitely enough to get your feet wet in Xcode. 
Aha! It all makes much more sense now! Thank you so much. You have ben extremely helpful. Working on your bonus problem now :)
This!
Side note: OP could use the printf syntax like NSString *query = [NSString stringWithFormat:@"SELECT * from Tracked WHERE barcode LIKE %@", barcode]; 
You're missing the '' -&gt; '%@'. 
Oops right!
I'm just starting with XCode myself, having a background in C++ from college courses. So far XCode and Objective C seem so different that it's really hard to jump into. I would recommend Lynda.com courses, I've been fooling with XCode for a bit now and haven't gotten anywhere, I've followed tutorials and made basic apps, but have no idea how it all works and can't successfully write my own. Lynda.com has a Objective C tutorial I'm starting tonight, then a follow up course designing apps, then other courses for specifics, such as the Sprite Kit. PM me if you would like links or other information, I wouldn't mind learning alongside someone else.
From a high level I think what you want is an array of objects to populate the master table view. And for each of the cells, you need an array of objects to populate the detail view. And you want a single model to represent all of this. One way would be a tree-ish structure. Master Model - Row 1 - Cell Title - Detail - Row A - Cell Title - Row B - Cell Title - Row 2 - Cell Title - Detail - Row A - Cell Title - Row B - Cell Title - Row 3 - Cell Title - Detail - Row A - Cell Title - Row B - Cell Title 
Can you give your example with real data? You can store any object in an Array and any object as the value in a Dictionary, so what you're trying to so is certainly possible, but it's hard to envision without real data. You used more words to describe what failed than what you're trying to do, so we're mostly just left with a picture of what you can't do.
you have a couple of options, you can create objects (a new objective C class) that store your data in properties and populate an array with the all of the objects you need and assigning all their properties. Alternatively you can use a dictionary object (which is just an abstract way to store key/value pairs where the values can be any object or primitive. Where is your data coming from? is it from a database or a webservice? Often it's pretty straightforward to create a class based on your data model if you are retrieving the data from a database of some sort. Additionally it's really easy to deserialize JSON returned from webservices into dictionary objects (since that's essentially what JSON is anyway). In any case, arrays of custom objects or arrays of dictionary objects, it all behaves the same way. Your first tableview should base it's data source on an array of "things" that contain all the data required for it to list the "keys" and for the next view controller to display the details of the selected key. The second view... are there going to be an arbitrary number of information and location values or is it always 3? If it's always 3 then why use a tableview? if it's arbitrary or dynamic then you need an array of those as well, both dictionaries as well as custom classes can store arrays (objects are objects after all). so with that in mind, you could have an array of "things" and the "things" each have the properties: NSString Key, NSMutableArray details. The key is the thing you display in the first tableview (I don't know your data structure so you may have more properties like "description" or something and your key may not be a string but I hope you get the idea). The "details" are an array of another object type (or a dictionary if you literally only have Info and location to display). When the user selects a row in the tableview you can set the selected row index on a class level variable (you'll see why later) and call [self performSegueWithIdentifier:@"&lt;yoursegueid&gt;"]; This initiates the transition to the second TableViewController as defined in your storyboard. In doing so, it also calls prepareForSegue: on the current view controller. In that method you can setup your second tableview and pass it the array in the "details" property of the selected index of the main array of "things". This should be defined as a property of the class responsible for managing the second table view controller. If any of this is unclear feel free to ask for clarity. I refrained from writing much code here since I don't know your classnames or anything and until I do I fear misnaming things would serve to confuse you. I can provide more detail if you like though. 
I think that one of the main differences between GC and ARC is the way that references are tracked. With ARC (and by extension manual retain/release memory management), the retain count of an object is stored *somewhere*. The runtime knows about it and can look it up very quickly to see if an object still has any references. The Objective-C garbage collector works in a very different way. The GC traverses references and checks which references are out of scope, and collects that memory back from the program. With ARC, you should always know when your object is going to be deallocated, since ARC simply adds in retain/release calls for you. When that retain count hits 0, dealloc gets called on your object. With garbage collection, the memory is reclaimed whenever the garbage collector gets around to it.
I decided to go with the object with properties, but I am still having one problem, that I can't seem to figure out. As the example picture above, I am trying to make a table view cell in the master view controller, make new table view cells on the detail view controller. I have stored the information of the cell on the master view controller as a NSString property of my object, and added array properties for the title and subtitle on the detail view controller - which is all good. But how do I make this dynamic table on the detail view controller? Here is the important parts of my master view controller code: http://pastebin.com/DrYAxmvd Edit: And the table on the detail view controller is not always 3, therefore the use of properties.
You need to implement more of the tableview datasource delegates. The key delegates in this case would be: numberOfSectionsInTableView: https://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/doc/uid/TP40006941-CH3-SW9 Which is likely to just be "return 1;" and tableView:numberOfRowsInSection: https://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewDataSource_Protocol/Reference/Reference.html#//apple_ref/doc/uid/TP40006941-CH3-SW8 Which will return the count of the items in your _objects array. If you have implemented these and simply didn't include them in your pastebin then I apologize 
I already did that, what I am trying to do, is make the dynamic table in the detail view controller. Should I declare the detail view controller as a UITableViewController instead of a UIViewController? I just need to know how to implement the data I sent from my master view controller to the detail view controller. (Hope that made sense).
Here's a non-dissertation answer: ARC is an automatic version of the same memory management style we used in the past with Objective-C, handled at compile time. So you do have a pretty good idea of when objects are released. Garbage Collection is an entirely different system where unreferenced objects are released, like you said it is handled at run time.
Additionally, I am not sure I would go with the data structure you currently have in your "Materials" class. A better way to do it may be to have a Materials class and another Materials Details class assuming that your arrays of Bounty, waypoint and actname are related in some way it may be better to create a class that exposes those 3 properties and store an array of these objects in the "details" property of the Materials object. That way on your details table view you would use the count of the details array for the basis of the number of rows in the tableview section.
Could you write a quick mock up? I am not sure how you would go around doing that, but that sounds exactly what I need to do, in order to make it all go around!
Yes, your second view should also be a UITableViewController and the delegates should be implemented the same as the other view.
In the pre-ARC version of memory management, you, the programmer, used retain/release/autorelease to show ownership of objects and when you no longer needed them. When an object with a retain count of 1 was released (dropping the count to 0), the memory was freed right away. If it was autoreleased, the memory was freed at the end of the current runloop (or when the autorelease pool was drained, if done manually). What ARC does is evaluate your code and decide when those retain/release statements should happen and adds them for you behind the scenes. So, your objects are still being retained/released/autoreleased, it's just that you're not writing the code to do it, the compiler is. In Garbage Collection, when an object is no longer being used ("its retain count is zero"), it gets marked as unused, but it still takes up memory. When the runtime decides to do it (maybe because of memory pressure, maybe because it's idle, you don't know, it's up to the runtime to decide), it makes a sweep through those objects and frees their memory. Many times the GC will also move objects around in memory to keep the total memory footprint compact. Allocating and freeing memory takes time, regardless of the method. The primary reason you don't want GC on the phone is that when a GC fires up a big ol' batch of operations that happen all at once, it freezes the system while that happens. That's undesirable. Imagine your phone deciding to pause for a second to GC while you're on a call. Using ARC (or the old retain/release/autorelease), you're still doing the same amount of work freeing up memory, but you're spreading it around and freeing memory in realtime, so you don't get long pauses.
your details object would look something like this.... #import &lt;Foundation/Foundation.h&gt; @interface MaterialDetails : NSObject { } @property (nonatomic, strong) NSString *bounty; @property (nonatomic, strong) NSString *waypoint; @property (nonatomic, strong) NSString *actName; -(id)initWithBounty:(NSString*)bounty waypoint:(NSString*)waypoint andActName:(NSString*)act; @end and your material object would have an NSMutableArray property called "details" or something. you can add objects to that array at will then pass the array to your second view controller as you are. THen in that view controller base your number of rows in the tableview section on the count of the details array.
Garbage collection is like throwing trash onto the ground and every so often a roomba will come by and clean it up for you. For all intents and purposes you don't know when this roomba is going to come by so in some cases you could keep throwing stuff on the ground and it may start to pile up a good bit before the roomba comes and cleans it up. Plus when the roomba comes by, you can't really move around much so you might have to wait until it's finished before continuing on your way. ARC is like a system that looks at how and when you throw trash on the and ground and puts measures in place to clean it up for you. You don't have to worry about the roomba coming by, but if the system doesn't analyze correctly that a piece of trash should be disposed of, small pieces of trash could begin to build up. This could be exacerbated by tricking the analyzation system in various ways (perhaps putting multiple pieces of trash balled up in another piece of trash) or painting the trash in some way that the system doesn't recognize it.
I understand what you mean, but how does one use the NSMutableArray property inside an object? Here is what I did on the MasterViewController.m after implementing the objects: _objects = [[NSMutableArray alloc] init]; [_objects addObject:[[Material alloc] initWithMaterialName:@"Sydyru Bone" details:&lt;#(NSMutableArray *)#&gt;]]; How do I write the NSMutableArray for the object? Thanks for all of your help btw!
Awesome, thanks.
You could just make a class for the tableView (second one) e.g. objectDetailsTableView then in the storyboard assign that view the class (3rd tab tob box of the right pane) and assign it a storyboard ID and tick the box e.g. detailViewForObject. Then make a property to accept your custom object. @property (strong, nonatomic) Material *material; then instead of using prepare for segue you could on press. Material *object = _objects[indexPath.row]; objectDetailsTableView *detailView = [self.storyboard instantiateViewControllerWithIdentifier:@"detailViewForObject"]; [detailView setMaterial:object]; [self.navigationController pushViewController:detailView]; 
You don't have to init your object with all it's properties. You can add them later. So.... _objects = [[NSMutableArray alloc] init]; Material *sydyru = [[Material alloc] initWithMaterialName:@"Sydyru Bone"]; NSMutableArray *detailsArray = [[NSMutableArray alloc] init]; [details addObject:[[MaterialDetails alloc] initWithBounty:@"bountyname" waypoint:@"waypointname" andActName:@"actname"]]; //... //Repeat the above line for how ever many details there are...... [sydyru setDetails:detailsArray]; //set details property of your Material object to the previously built array [_objects addObject:sydyru]; //add your now complete material to the objects array. Edit: formatting and... I didn't test any of this or even write it in xcode to see if there are syntax errors and I just woke up so expect to have to tweak this all a bit to get it to compile ;)
Well that's the thing, I can't really use [_tableView reloadData] in my child view and I put it like everywhere in my main view.
viewDidLoad you mean, then yes.
Which OS is it for ? Are you setting up your data store ( array of data ?) in the viewDidLoad ? viewWillAppear ? 
iOS, Yes I have an array for my data.
No idea how I should use this in my code.
Did you just want me to give you the chunk of code to make it work? I don't mind doing that but I would be doing you a disservice if you are indeed learning. Practicing finding the solution after you know what you should be looking for (the method name and links I gave you) will go a long ways in solving future problems.
Thing is, I've tried so much, I've tried the thing you send me but it didn't work for me, I've tried several other things too and it's kinda stressing me out. There's nobody around me that can look at my code and tell me what I'm doing wrong, which I would prefer.
So you did try the following in your main view? -(void)viewWillAppear:(BOOL)animated { [self.tableView reloadData]; }
Don't forget your call to super.
And where are you setting the data for this ? viewDidLoad ? viewWillAppear ?
I wrote this article, if anyone has any questions.
You're making it a lot harder to call the original IMP just to hide the fact from the original IMP that it was swizzled. Do you have a use case where this hiding was necessary? It's extremely rare for a method to look at _cmd and even rarer that it would care if the selector had changed. I was under the impression that it's generally a good idea (for debugging and introspection purposes) to let the IMP know that it has been swizzled.
The article was directed at SDK developers who are using swizzling to help avoid stepping on toes of other SDK developers, as well as end users for their SDKs. Rarity of the use of _cmd isn't a good excuse to corrupt it. The goals it to minimize the footprint of changes made, so if a user is depending on the value of _cmd it's not ok to force that user to change his code to be compatible with your SDK. One example where this has bite me is where I used _cmd to verify a NSURLConnectionDelegate responds to selector, but a 3rd party network monitoring SDK I had installed changed the value of _cmd, and of course my NSURLConnectionDelegate doesn't respond to any of those augmented method names, and to me it looks like I was getting no network responses. Other places I've run into issues is during dynamic method resolution that relied on the value of _cmd to properly resolve methods. Regarding making it harder to call the original IMP--unless you intend to completely replace the implementation of whatever the original IMP does, you are going to be calling the original IMP from your swizzled IMP. The point is to augment the original method, not to replace it. If you intend to completely replace the functionality of a method then this swizzling technique is probably not the right choice. Thanks for you inquiries. 
I can't seem to find any solid tutorial on how to handle this. The Parse tutorial is years old and only deals with setting a PFQueryTableViewController as the root view controller to display all objects in a class. This doesn't help me. Can anyone suggest a good solution or point me in the right direction?
Try to keep you ViewDidLoad as light as possible. Since you're using a PFQueryTableViewController it's doing a lot for you. Override queryForTable and place/move your custom PFQuery you have in your ViewDidLoad in there. This will give an array of PFObjects that will be the UITableView data source. 
I think you might need more tutorials on iOS in general. For example, you modify your query in the for loop *after* executing the query, so it does nothing. (talking about the orderBy: call) PFQueryTableView has a property called textKey which, if set, it will call on each object and use the result to populate the table view cell's labels
The orderBy stuff was only experimental, though I admit I do need more tutorials on iOS in general :) that's why I'm learning. I wasn't aware of the textKey value. I'll give that a shot.
I only put it in VDL as a method of testing. As I get something working I move it into more appropriate areas (NSObject classes, etc)
So let's say the objects in your table view have a property "name." - (void) viewDidLoad { self.textKey = @"name"; } Then it will attempt to call objectForKey:@"name" on every object in the "objects" array. Hope that makes sense!
I've never made the connection to C. D'uh! I've always wondered how nslog worked. 
I second Rypress.com. I'm new to OOP and I'm learning ObjC as my first language and I had trouble retaining information in the three books I have and tons of trouble really just "getting it" with certain things, and then I found Rypress. Very clear and well written. No nonsense.
Awesome! Thank you for the help! This static library I'm working on has a bunch of protocols that communicate back and forth with Bluetooth accessories and lighting connector accessories that we engineer and build under the MFi program with Apple. I'm in charge of maintaining and modifying this library and I know I'll need to test the code and make sure future changes and additions don't break anything. I just have no idea where to start with testing. I am not concerned with UI testing at all, just making sure I/we don't break anything.
I use Kiwi (https://github.com/allending/Kiwi) and I like it a lot, though I've also heard good things about specta/expecta. I'd be happy to answer questions if you like, and I happen to have a couple of slidedecks/example codebases if you'd like the reference.
I went through this framework shopping exercise recently. Use XCTest. Add Kiwi if you prefer the syntax. All the other unit testing frameworks are deprecated at this point. The hard part is testing GUI elements and VCs and doing automated testing.
&gt; This static library I'm working on has a bunch of protocols that communicate back and forth with Bluetooth accessories and lighting connector accessories that we engineer and build under the MFi program with Apple. Applications that have to talk to web services have a similar problem, and a fair bit has been written about how to unit test with them. I think you'll have better luck reading up on that than trying to find something specific to external accessories.
I would definitely like the reference.
There are a couple Kiwi-related slidedecks in here: https://speakerdeck.com/crebma/ and most of them reference the same codebase, which is here: https://github.com/crebma/pants-lister. Kiwi's documentation is pretty good, though they don't document stub:withBlock: at all for some reason. Hope that helps, or provides a good starting point at least! :)
Thanks for this write up man. I've always wondered how these types of methods worked and now I understand completely. Now I need to find something in my current project that I can apply this solution to. 
[Rypress](http://www.rypress.com) was a good resource for just "getting" the fundamentals. As a bonus, there is a *really good* git tutorial there as well. Lucas Derraugh's [Apple Programming](https://www.youtube.com/user/AppleProgramming/featured) channel on YouTube has a lot of really well explained tutorials covering a lot of Objective-C and Cocoa. Lucas' tutorials are Mac oriented, but the fundamentals covered are transferrable. 
I was curious as well, just went ahead and wrote this up real quick. Hardest part was figuring out what the hell these functions are called.
why are you importing Cocoa.h instead of Foundation.h?
If you're looking for UI tests, [Frank](http://www.testingwithfrank.com) is a good one to try.
If you're looking for UI tests, [Frank](http://www.testingwithfrank.com) is a good one to try.
Someone should make this a [Dash](http://kapeli.com/dash) cheatsheet. https://github.com/Kapeli/cheatset
&gt; Most of your questions can be answered by diving into the concept of Objective-C blocks I understand blocks, they're effectively anonymous functions. I guess the point that I'm making is that in node.js, async-IO APIs force higher-level APIs to be async, ultimately making most function calls async, forcing you to use control-flow libraries for sanity. Yet, I don't see that in the Objective C world, and I was curious if there was any reason other than that most people mix blocking and non-blocking APIs? &gt; the main thread is always blocking Oh really? Where is that documented? I had assumed that rendering-based IO is always blocking, but that FS or networking IO could still be async.
Can you elaborate on why this is a big deal, that is, why after 4 years of blocks in iOS are async UI frameworks only now available? Unless I'm mistaken, all the rendering is still happening in the main thread and they've just created thread-safe code to handle the state?
I don't know why exactly. My best guess is that when Apple created UIKit, it was made specifically single threaded for various reasons I don't know. And because UIKit was the standard way of doing things, most developers were happy with following Apple's lead and creating single threaded UI. As developers know more and more about the API's and begin to experiment with more different UI design patterns, developers started creating asynchronous UI frameworks. The answer I guess is because experimentation takes time? I dunno.
There's a pretty great (and sexy) implementation of Promises/Futures called [PromiseKit.](http://PromiseKit.org)
Looks promising, but it violates Apples [recommendation to not catch exceptions](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012-BAJGFBFB). I would need to reimpliment it without try/catch.
Apple doesn't recommend against catching exceptions. Apple recommends that you try to only ever use exceptions for truly 'exceptional' occurrences. From the link: "One way to handle exceptions is to “promote” them to error messages that either inform users or request their intervention. You can convert an exception into an NSError object and then present the information in the error object to the user in an alert panel." Which is exactly what PromiseKit does. I agree, I really don't like try/catch, but PromiseKit handles it gracefully.
Fair enough. I'm not familiar with PromiseKit and I can't quite tell from the documentation, but does this not still coerce raised exceptions into NSErrors? Maybe I'm referring to the wrong class names, but won't this catch exceptions and then pass/return them as regular errors so you can't tell the difference? If not, can you guide me to where in the documentation / API this is addressed?
It does still do that. It converts a raised exception into an NSError and 'bubbles it up' into the catch statement, which is one of Apple's recommended ways of handling exceptions.
Take a look at Mike Ash's series on Grand Central Dispatch (GCD). This is a more recent entry: https://www.mikeash.com/pyblog/friday-qa-2011-10-14-whats-new-in-gcd.html I'd go back and look at his entire GCD series from the beginning.
I've used both XCTest and Kiwi - I'd recommend starting with XCTest since it's built in and then bringing in Kiwi if you want more. This short screencast will teach you the basics of XCTest: http://roadfiresoftware.com/2013/12/screencast-testing-objective-c-with-the-xctest-framework/
The only thing I can think of is that all UI manipulation (including setting text on a label) must be done in the main thread. While you can call a selector on the main thread, this makes you have many functions in your code just to set UI on the main thread. I don't believe there is a "run block on main thread" function available.
This is a common mistake in node.js promises as well. While yes, bubbling exceptions is acceptable, conflating exceptions and errors is not. Exceptions in iOS (to my understanding) are not considered catch-and-continue, and therefore despite the bubbling there does not seem to be a means to differentiate bubbled errors from exceptions, and this is a primary concern of mine. Is there a way to differentiate exceptions from errors in PromiseKit?
&gt; but the model is not too smooth to work with Can you elaborate? Is this anything more than being forced to dispatch_async on the main thread for all non-UI responses (which of course is messier than a normal method call / return).
Do you know if there's any non-negligable delay in dispatch_async? (Assuming your main thread is not CPU bound) In other words, is there a trade off when executing on a background thread, and then rendering back in the main thread (like non-blocking, but some delay/lag when calling dispatch_async)?
None that I know of. Apart from the fact that everything already in the main thread "queue" will execute first.
I'm pretty sure you can do it using [WebView](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Webkit/Classes/WebView_Class/Reference/Reference.html). I don't know if it's similar to UIWebView or anything like that though.
http://en.wikipedia.org/wiki/Chromium_Embedded_Framework
It says it can provide browser-capabilities within an application. I wonder if it can actually render content in a browser too. I have a feeling this may be just to give HTML 5 and Chrome plugin capabilities to apps. Maybe this can be run within a browser though? Or maybe it won't even matter. The client is looking to have this run in a browser because it is what he is familiar with. Maybe replicating a browser feel could be sufficient too!
It looks like, as of now, no. Which I can understand is a valid concern.
In the past, Apple updated their computers whenever they wanted.
FYI, there's whole frameworks for this, if you don't mind writing html5/javascript. e.g. http://phonegap.com/
if you want it to run in the browser itself why not a web app (in html and js)? Bonus, it will run on all platforms. You could also do a safari extension.
Well, you can always generate some html/js file and open it in the regular browser. As others have said, there are also Cocoa classes (that's all in Obj-C) that do this inside the application. I don't know the details of your problem, so there are many possible solutions. If you're going to generate an html file to display in the regular web browser, you can really do it in whatever language you like, but if you want a GUI you'll pretty much have to use Objective-C.