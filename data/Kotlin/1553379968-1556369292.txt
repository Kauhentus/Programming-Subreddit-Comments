I may be misunderstanding you, but the Kotlin native compiler is different than the Kotlin JVM compiler. KN targets LLVM bytecode that same way swift, crystal, and others do.
rofl
Someone's bot it broken :)
Yeah I'm actually following the project since a loooong time ago (I think that if you look at some of my past comments I did comment on a Kweb related post years ago) I did read Kweb's documentation probably for the fifth time already, sometimes I read it and I think "man, this looks too good to be true", even tho I did use Kweb before a long time ago (just a "click here to add one to this integer"), but because it was a long time ago (and I couldn't use Kweb at the time because I just finished my website rewrite) I didn't really play too much with it. I'm not at home atm so I can't read the documentation, but what does Kweb uses for the web server (ktor?) or is it a custom made web server? (Wondering because if I want to use sessions &amp; other stuff, what should I use?) It would also be good if Kweb had more "real-life" examples than just a To-do app, it makes people "wow, this framework can do that!" when looking at examples, making them more eager to use the framework. Currently I was planning on using a mix of Kotlin/JS on the frontend + Kotlin on the back end to make a single page application, buuut Kweb looks better than my hacky mess :P
&gt; I'm not at home atm so I can't read the documentation, but what does Kweb uses for the web server (ktor?) or is it a custom made web server? (Wondering because if I want to use sessions &amp; other stuff, what should I use?) It's built on Ktor - I've tried to avoid reinventing any wheels where possible :) &gt; It would also be good if Kweb had more "real-life" examples than just a To-do app, it makes people "wow, this framework can do that!" when looking at examples, making them more eager to use the framework. Agreed, I am working on a large project myself using Kweb, but it won't be open source unfortunately. &gt; Currently I was planning on using a mix of Kotlin/JS on the frontend + Kotlin on the back end to make a single page application, buuut Kweb looks better than my hacky mess :P Try it! I'll do what I can to help.
Also, can I create routes that doesn't use Kweb's features? (Example: REST endpoints there shouldn't use WebSockets) And for immediate events, can I use *everything* as long as it doesn't use server features, right? (Like... can I open a alert with immediate events, or only DOM related stuff? (Then I would need to make additional JS code for that)) Mine will be open source (it will be a configuration dashboard for one of my projects, still thinking what I will use for the rewrite) so... yay (that doesn't mean it will be readable :P)
Having done no research of my own, I think he meant the kotoin native compiler itself is written in a JVM language, so the JVM has to spin up to do a compile.
I don't know enough to be sure here, but do you think Gradle could do this? It'd involve switching your project from maven to gradle, but this may be worth a quick google.
&gt; Also, can I create routes that doesn't use Kweb's features? (Example: REST endpoints there shouldn't use WebSockets) Yes, you can do this by subclassing [KWebPlugin](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/plugins/KWebPlugin.kt) and overriding [appServerConfigurator](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/plugins/KWebPlugin.kt#L16). The [Kweb constructor](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/Kweb.kt#L56) takes an optional `plugins` parameter, just add your plugin to the list. I'm not super-happy with the current plugin approach, so if you have any feedback or suggestions on it let me know. &gt; And for immediate events, can I use everything as long as it doesn't use server features, right? (Like... can I open a alert with immediate events, or only DOM related stuff? (Then I would need to make additional JS code for that)) Yes, you can run arbitrary JavaScript in immediate events, so this should work just fine: button.onImmediate.click { execute("""alert("Kweb");""") } &gt; Mine will be open source (it will be a configuration dashboard for one of my projects, still thinking what I will use for the rewrite) so... yay (that doesn't mean it will be readable :P) I'd be very happy to offer feedback even from the earliest stages if you're ok to keep it in a public Github repo. It would be super-useful for me also to see how you use it, where you might encounter problems, etc.
Okay, thank you! I will play around with Kweb for a few days and see if it fits what I need (I hope it does because it looks awesome!) Also, does Kweb has a gitter/discord server? I guess the would be better for quick and small questions about the project than me sending a message on this thread (or creating GitHub issues) every time I have a question.
Absolutely, there hasn't been much activity there but I hang out at https://gitter.im/kwebio/Lobby and am happy to chat there.
You can workaround this by running the compiler as a daemon (different from Grade daemons). Intellij does this I believe.
&gt; compiled for the JVM wat
Yeah you can't use JVM libraries since they depend on the JVM. As far as exporting and using libraries for Kotlin Native I imagine it's like C++ but I'm not sure. As far as package manager goes Kotlin Native uses gradle
I hope a library like Qt appear for Kotlin Native, so even the UI can be cross platform.
I've put up the todo list example: http://demo.kweb.io:7659/ One thing in particular to note is that if you visit the same URL in two browsers, the lists will stay in sync in realtime. This is running on a server powered by two aging gerbils, so if it is slow please blame that and not the framework :)
See [this](https://www.reddit.com/r/Kotlin/comments/b47rq4/hoping_for_feedback_on_a_new_kotlin_web_framework/ej906vj/).
&gt;Is the Kotlin native compiler independent from the Kotlin JVM implementation? Yes - it uses a separate compiler called Konan which parses Kotlin's 'Abstract Syntax Tree' into the 'LLVM IR' - that is, the 'Intermediate Representation' of source code used by the popular, open source LLVM compiler. &gt;...am I correct in assuming that I would not be able to compile \[code dependent on JVM dependencies\] to Kotlin Native? Yes, correct: you cannot do this. &gt;How would libraries for Kotlin Native work? Kotlin Native can be compiled and distributed as libraries in the 'klib' format. &gt;Would there have to be a custom package manager separate from JVM tools like Gradle? While Gradle receivers most use in the JVM world; it's inaccurate to think of it as a 'JVM tool'. Gradle supports building language other than Java (for example, it supports C++) and it is now the build tool for Kotlin Native as well. &gt;Finally, would Kotlin Native have a performance advantage? Potentially some, yes, although JetBrains have said that optimising Kotlin/Native's performance is not their priority right now, they're more about developing the functionality and tooling. Expect to see performance improvements later on as it matures. Also, JVM runtimes tend to be pretty well optimised these days: Oracle's 'hotspot' runtime, in particular. The idea that Java is slow is outdated.
I actually had the exact same problem, we still use spock for our tests and kotlin / very little java for prod code. We solved it by moving compilation order around in maven by doing some stuff in the pre-compile phase. Bit hacky but it works.
Kotlin Native compiler runs on the JVM.
&gt;The only drawback for Kotlin IMO is serverless application development. You should check out [Micronaut Framework](https://micronaut.io/). Its a JVM full-stack framework for building microservice and serverless applications. It supports Kotlin.
Also, one thing that I noticed while playing around with Kweb... why doesn't Kweb use DSLs for generating the HTML markup? (Like how kotlinx.html works), in my opinion it looks "cleaner" and makes it more like HTML. It also would be nice if you could use a Int KVar/KVal (and other types) on `text(...)`, I tried making a small incremental counter updated by another thread and... I couldn't set it to a `text(...)` so I need to make the `KVar` a string and when incrementing the value... `kVar.value = (kVar.value.toInt() + 1).toString()`, but that looks hacky.
A very good reply.
My experience was that JetBrains Idea was a bit but noticable lagging while working with massive UI class implemented with Kotlin DSL for TornadoFx. But it was still usable.
Hey, jspetrak, just a quick heads-up: **noticable** is actually spelled **noticeable**. You can remember it by **remember the middle e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
delete
I see. There is a workaround for that though: Fragments. Did you try them?
&gt; why doesn't Kweb use DSLs for generating the HTML markup? (Like how kotlinx.html works), in my opinion it looks "cleaner" and makes it more like HTML. Hmm, Kweb does contain a HTML DSL, it doesn't work exactly like kotlinx.html - can you clarify how/why kotlinx.html is preferable? &gt; It also would be nice if you could use a Int KVar/KVal (and other types) on text(...), I tried making a small incremental counter updated by another thread and... I couldn't set it to a text(...) so I need to make the KVar a string and when incrementing the value... kVar.value = (kVar.value.toInt() + 1).toString(), but that looks hacky. You could do: val counter = KVar(0) element.text(counter.map {it.toString()}) // elsewhere counter.value++ I could modify text() so that it takes a KVal&lt;Any&gt; rather than a KVal&lt;String&gt; and does the toString() itself, this would allow text() to use the counter directly without the explicit mapping to a string. I thought it was preferable to make the string conversion explicit, but maybe not. &gt; How can I update lists, if I'm using them on a render block? Adding the element on the list doesn't work (but that's understandable, the KVar isn't notified that the list changed)... cloning the list, adding the value and then replacing the KVar value works, but I think that's hacky. Yes, normally you wouldn't keep a list in a KVar (unless it was quite short), and these values shouldn't be mutated. You can see how this is handled using Shoebox [here](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/demos/todo/todoApp.kt#L71), the key is the [line](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/demos/todo/todoApp.kt#L102) that calls `renderEach` and the block after it. This will automatically add, remove, and modify things as they change in Shoebox. Does that make sense? &gt; Sometimes when updating values it looks like the page "flickers" and that looks kinda strange. (Example: You have a counter that goes up quickly, sometimes when Kweb updates the counter value, the element goes invisible and then reappears with the new value, if there's elements below that, they will get shifted up for a few ms and then goes back, looking like the page is "flickering"... kinda hard to explain, but I hope this can be fixed) Hmm, can you show me the code where this is happening? I hadn't noticed that problem but it definitely needs to be fixed - possibly requires tweaking the order in which `render` does things. &gt; It would be great if the documentation had a small tip about the render block: If you don't wrap it within another div (or something else) block and update the KVar value, the new elements will be inserted at the end of the current element. (I was using the render block, below the render block I had some buttons... when the list was changed, all the elements where inserted after the buttons, not before... wrapping them in a div fixed the issue) Ah, yet me think about how to address that. &gt; What is the string on the change/input callback? I thought it was going to return the new value (I was using it on a range slider) but nope... it always returns {} You're referring to what's passed to [the change handler](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/dom/element/events/ONReceiver.kt#L89)? Ah, yes - `change` event handlers don't currently expose `event.target.value`, would that solve the problem? You can also read the value using [getValue()](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/dom/element/creation/tags/input.kt#L26), although I can see why it would be nicer if it was passed to the handler. &gt; Also, if I shouldn't use KVar for elements that have mutable elements (found this the hard way: updating a value within a mutable element doesn't make Kweb update the render block), what should I use? You can change the KVar value with `kvar.value = blah` it, but you are correct - you should only put immutable values in Kvars. If you're dealing with lists then hopefully the `renderEach` example above will provide what you need. &gt; Well... Kweb doesn't do any rendering on server side (the HTML page received by the client is just the JavaScript code), while this is okay for users... for search engines that's a huge pain to crawl and can make your page position on Google drop hard (just look at the countless topic and posts talking how much harder it is to rank your website if all the content is generated via JS)... and that's a huuuge deal breaker to me, since I don't want to affect my Google ranking if possible (yes, I know... Google does crawl JS pages too, but other crawl bots (even Google's AdSense crawl bot has issues with JavaScript only content... and I do use AdSense on my website) can't). I've been thinking about this. One possibility would be a plugin which intercepted page hits from user-agent bots and instead rendered simple HTML - whatever content you want the bot to index. At a simple level, this could be specified by passing it a `(path : String&lt;List&gt;) -&gt; String` function (where the output would be the HTML to return to the bot). I believe it is best practice anyway to deliver a custom version of your content for crawlers. Would that address the problem?
&gt; Hmm, Kweb does contain a HTML DSL, it doesn't work exactly like kotlinx.html for various reasons - can you clarify how/why kotlinx.html is preferable? I mean, it looks kinda different compared to kotlinx.html, but that's just me nitpicking. I was just confused at first because I was trying to do `div {}`... then I found out that you should use `div().new {}` &gt; Hmm, can you show me the code where this is happening? I hadn't noticed that problem but it definitely needs to be fixed - possibly requires tweaking the order in which render does things. https://gist.github.com/MrPowerGamerBR/8360c45de4e88767b505a444e60104cb When the counter updates, *sometimes* the number goes blank (as in: the entire div is empty) for a few ms and goes back. This happens randomly, I can record a GIF if you prefer to, I was able to reproduce this bug in Firefox and Chromium. (Using Kweb 0.4.0) &gt; You're referring to what's passed to the change handler? Yeah, I was wondering why it always passes `{}`, I thought it would pass the new range value but nope. It would be nice if the value was just exposed on the event :) &gt; I've been thinking about this. &gt; One possibility would be a plugin which intercepted page hits from user-agent bots and instead rendered simple HTML - whatever content you want the bot to index. At a simple level, this could be specified by passing it a (path : String&lt;List&gt;) -&gt; String function (where the output would be the HTML to return to the bot). &gt; I believe it is best practice anyway to deliver a custom version of your content for crawlers. &gt; Would that address the problem? So... that's kinda difficult to handle. As far as I know, only Google parses the page with JS (however, if your page is taking too long to process, they will just drop your website) Sending different content for different useragents would work, but Google isn't very fond of that and may think it is "cloaking". I think the *easiest* way would be generating the page on the server first (HTML output), send that to the browser and, if the browser supports JS, just make the browser recreate the page from the `buildPage()` method, then at least you can also support users that aren't using JavaScript. (which, yes, I know, it is kinda strange since Kweb relies a lot on JS, but it would be good for landing pages or other pages that doesn't *really* rely a lot on JS, and could work without JS (albeit without all the fancy stuff Kweb uses)
Not yet. The app was relatively small but it is definitely good tip for future development. Thanks!
Fantastic. I was screwing around with Graal recently, looks like someone else took that idea and ironed out some nice details.
&gt; I was just confused at first because I was trying to do div {}... then I found out that you should use div().new {} Yes, the purpose of the `.new {}` syntax is to highlight the fact that you're creating new DOM elements as children of the parent. &gt; When the counter updates, sometimes the number goes blank (as in: the entire div is empty) for a few ms and goes back. div().text(kVar.map { it.toString() }) Hmm, I think I might know the culprit - [here](https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/dom/element/Element.kt#L212) is the relevant code. When the text of an element is modified it first calls [removeChildren()]( https://github.com/kwebio/core/blob/master/src/main/kotlin/io/kweb/dom/element/Element.kt#L194) before replacing the text - this might be the reason for the flicker. I think the reason I did the removeChildren() was as a safeguard against stray elements not being replaced, however perhaps it isn't necessary. &gt; Yeah, I was wondering why it always passes {}, I thought it would pass the new range value but nope. &gt; It would be nice if the value was just exposed on the event :) I can do that, in JavaScript it passes the `target` and you can get a `value` from that if it is a suitable element type. How about something like this: input.on.change { e -&gt; val v = e.targetValue println("You selected $v") } &gt; I think the easiest way would be generating the page on the server first (HTML output), send that to the browser and, if the browser supports JS, just make the browser recreate the page from the buildPage() method, then at least you can also support users that aren't using JavaScript. (which, yes, I know, it is kinda strange since Kweb relies a lot on JS, but it would be good for landing pages or other pages that doesn't really rely a lot on JS, and could work without JS (albeit without all the fancy stuff Kweb uses) Hmm, I could certainly do it this way - it would render the DOM to actual HTML which is sent with the initial HTML payload, rather than rendering it as a series of JavaScript instructions. I considered doing this previously because it seemed a bit more elegant, but elegance alone didn't justify the effort - but perhaps this is the justification I need. The main question is: Is this really the best way to ensure good SEO? Oh, did the stuff about `renderEach` make sense? It's not currently well documented, except for the todoApp example.
&gt; I can do that, in JavaScript it passes the target and you can get a value from that if it is a suitable element type. How about something like this: Way better, that would means that you don't need to do a trip to the client just to get the value! (Since now you need to use `await()`) &gt; Ok, I've just deployed Kweb version 0.4.1, I've changed the approach used by text() so that it now just sets textContent without bothering to delete the element children. This was the change, fairly simple. Can you let me know if this solves the problem? Yup, that fixed the issue! Now it isn't flickering anymore :3 &gt; Oh, did the stuff about renderEach make sense? It's not currently well documented, except for the todoApp example. I didn't test it yet, soon:tm: &gt; Hmm, I could certainly do it this way - it would render the DOM to actual HTML which is sent with the initial HTML payload, rather than rendering it as a series of JavaScript instructions. I considered doing this previously because it seemed a bit more elegant, but elegance alone didn't justify the effort - but perhaps this is the justification I need. &gt; The main question is: Is this really the best way to ensure good SEO? As far as I know, yes, this the proper way to ensure good SEO, that's why a lot of single page frameworks has server side rendering (Angular, React, vue.js... almost every popular JS framework has SSR due to issues with crawling (and to display content for non-JS users)), because it makes easier for crawlers to crawl the website, and if the website is easier to crawl = better SEO. There is also the issue that only Googlebot renders JavaScript, anyone else doesn't. Here is a lot of posts about the topic: * https://medium.com/@benjburkholder/javascript-seo-server-side-rendering-vs-client-side-rendering-bc06b8ca2383 * https://www.reddit.com/r/webdev/comments/9kqs88/is_serverside_rendering_still_necessary_for_seo/ * https://www.reddit.com/r/Angular2/comments/9yu8sb/need_seo_advice_is_serverside_rendering_aka/ * https://www.reddit.com/r/TechSEO/comments/9588ip/help_seo_issues_with_clientside_rendering_on_react/ * https://medium.com/@osmancure/how-to-master-react-server-side-rendering-for-seo-and-faster-initial-page-load-5df93249635b * https://medium.com/js-dojo/is-my-single-page-app-seo-friendly-be2c827f1c38 **tl;dr:** Your page *may* get indexed correctly on Google if you are 100% relying on JavaScript (or maybe Google will index a empty white page for your website!), no other pages search engines support JS so they can't crawl your website at all. And, of course, there is also the advantage of making the website at least "viewable" to users that doesn't use JavaScript (instead of having a blank page) 
req.onloadend = fun(event: Event) { onloadend(req.responseText) } pretty sure you can just write ...= onloadend. or at least omit the fun(...). lambdas ftw
Thanks - would you be able to paste me some portion of your maven pom so that I might do a more gradual conversion?
A quick Google search for "java music player library" lead me to [TinySound](https://github.com/finnkuusisto/TinySound), which seems to be fairly lightweight while being able to play audio.
Yeah, ok - pre-rendering the HTML seems like it might be the right solution, also I could probably make hyperlinks work even if JavaScript is disabled.... Let me know once you've had a chance to look at the `renderEach` stuff.
Okay, thank you! The SSR stuff is the last "deal breaker" thing before I start developing my website... but I will probably start "recoding" the website in Kweb just for fun. :3 I will take a look at the `renderEach` asap... and maybe start asking questions on the gitter chat instead of asking here every time :P (I'm already on the gitter chat, joined it this morning)
&gt; Okay, thank you! The SSR stuff is the last "deal breaker" thing before I start developing my website... but I will probably start "recoding" the website in Kweb just for fun. :3 Ok, well - I'm committed to having a good solution to SEO, and this seems likely to be the right approach. I want to ruminate on it a bit more, and it may take a few days to implement, but it shouldn't affect the API when I do. Hopefully that will give you enough confidence to proceed?
&gt; Anyhoo, hopefully that will give you enough confidence to proceed? Yeah, I will keep toying around with Kweb for the next few days, I hope I can make something cool with it because I really like how Kweb works. The only thing I think it would be nice is a single page application example (like [this one](https://vue-hn.herokuapp.com/top)), because now I'm wondering... "how can I make something like that?" (like changing the entire view without reloading the page) And yes, I'm MrPowerGamerBR on Gitter too (you replied to me there :P)
&gt; (like changing the entire view without reloading the page) This may not be a great example - but the initial redirect from http://demo.kweb.io:7659/ to the new list page that is created occurs without a page refresh - it just updates the URL and rewrites the DOM.
&gt; This is where that action happens (yes, it is that simple). Well... that was very simple :P Yeah, that works. I will try playing around with kweb (and report any issues I find with it)
Would suggest to not right the UI in Kotlin/code and use a template engine like thymeleaf
I think I found an issue when playing around with the URLs... https://gist.github.com/MrPowerGamerBR/e5344e41b69e448dbf472c0962b00b5e If I click "Test Page" then "Test Page 2" then "Home Page", it won't work. (It will be stuck at the "Test Page 2" page, however the URL on the address bar shows the correct URL)
Hmm, will investigate.
As /u/Darkmoon_UK says, you can't use JVM libraries with Kotlin native. An alternative to consider would be GraalVM. It allows any Java app to be AOT compiled to a native app. Performance wise it is a mixed story; startup time improves, but for long-running apps, Hotspot JIT gives better performance.
onCreateViewHolder returns RecyclerView.ViewHolder, which does not implement your interface. You can use generics but VH needs to be a subclass of RV.ViewHolder
i've used it in multiple small projects and it qorked pretty well. only issue is the lack of documentation imo
I want to clarify something here: you can embed a JVM into native code. So one could write Kotlin Native code that creates an embedded JVM and has it run bytecode. There are applications which use embedded JVMs like this. (Hint: the java command is one of them). It's probably not a sensible application architecture for a KN application though.
Try something like this: class SubView: View(size()) { companion object { fun size() = 123 } } The limitation comes from the JVM rather than Java) - and is there to prevent subclasses seeing inconsistent state because class hierarchies have not been fully initialised. Calling a static method (java) or an external or object function (Kotlin) is safe and allowed as it doesn’t have access to that uninitialised state.
Lol i thought documentation was their strongest point 
You can write constructor() : super(0.0) too. Not sure if you know that. I think the general idea here is to make the thing more ordered than it is in Java. There you will sometimes find multiple constructors calling each other in unexpected ways because you do not have to call the primary constructor. With super classes and a little programming error you can have classes that do not call super in one constructor but call super in another constructor that is not called by another (that's why "telescoping" constructors is a pattern while it's a unbreakable rule in kotlin) . Forcing you to always go trough the super constructor of the base class eventually is ensured by the language itself this way. Probably it can be tricked in kotlin as well but it's harder to do that by accident. 
&gt; You can write constructor() : super(0.0) too. Not sure if you know that. Yes, the double was just as a quick demonstration, my real world scenario is a JavaFX Parent class which I'd rather create inside my SubScene's constructor rather than in my main Application class.
Hmm, couldnt Kotlin generate a static function during compile time something like ``` fun create(): SubView { val size = 100.0 return SubScene(size) } ``` ?
Do you have any links where I could find some tutorials on Ktor, I’m pretty familiar with Kotlin ( all the way to OOP, I’ve just started learning about higher-order functions)?Any help is appreciated.
I’m no expert in Kotlin but if I had to solve this I would follow the suggestion in this [link](https://hype.codes/how-convert-list-map-kotlin) . So, `class Person(val ID: Int, val firstName: String, Val lastName: String) fun main() { val friends = listOf(Person(12, “Barry”, “Allen”), Person(14, “Fred”, “James”) val map = friends.associate({ Pair(it.id, it.firstName, it.lastName) }) println(map)` Here, creating a class to represent your data could help then, the associate() method could help you convert that list of maps to a map. I hope this helps. } 
as I said, there are not too many good resources yet. I'd suggest reading the [guides](https://ktor.io/quickstart/guides/application.html) on their website to get started and then check out real code (like [this full stack example](https://github.com/Kotlin/kotlin-fullstack-sample) by the official Kotlin org. on github) to learn.
thanks for the tip! 
I love it, the doc rocks, no complaints. Reminds me flask in python or Node.js.
Works great. Really like it. No downsides so far. Since it is supported by Jetbrains I hope it will stay. 
``` mvn dependency:sources ```
I'm currently working on quite a complex site using it and so far it's pretty nice, but it's also fairly lightweight which may be an advantage or a disadvantage depending on what you're looking for. For example, in order to store passwords in a database safely, you have to use a 3rd party library for something like BCrypt to encrypt and verify the passwords. In comparison, PHP offers built-in methods to do all of this without worrying about stuff like timing attacks. On the other hand, it's pretty fast, simple and I'm experiencing no other issues, so I'd call it a net positive.
I understand that everything has to initialize properly but me putting only local variables before super() would put no risk of accessing something on super before it has been initialized. Swift is smart enough to notice this and will allow it.
I put some ideas here: https://pl.kotl.in/rkNGn8UO4 Honestly though, your solution is perfectly fine and probably more performant.
I've never been so satisfied with a web framework's testing capabilities. It's simple, but very effective. [This](https://github.com/kesslern/ascient/) is the little project I've messed around with. The code is pretty simple, but it has some things that could be useful. I implement custom authentication features and it's pretty thoroughly integration tested using a real Postgres DB set up with Docker.
I use it as the foundation for [Kweb](https://kweb.io/), had some stability issues earlier in its development but seems solid now.
None of you guys is complaining wow ... This means is a sweet work from JetBrains
``` [INFO] The following files have been resolved: [INFO] junit:junit:jar:sources:4.12:test [INFO] org.jetbrains:annotations:jar:sources:13.0:compile [INFO] org.jetbrains.kotlin:kotlin-stdlib-common:jar:sources:1.3.21:compile [INFO] org.jetbrains.kotlin:kotlin-stdlib:jar:sources:1.3.21:compile [INFO] org.hamcrest:hamcrest-core:jar:sources:1.3:test ```
It's solid. My last jobs servers were written ontop if it. There's also HTTP4K, which is also very nice.
If you have a very special initialization use a factory method within a companion object and make the cunstructor private. Else it's also possible to use: constructor (): super()
Do you think it's ready for production apps? 
Well, the information on the internet is very limited when referring to different use-cases so I am not sure to answer this question , also I need to check it out myself . 
If you're looking for a decent example of an abstracted out recycler view, I made this sample project awhile back to simulate the same pattern I did in a production app. https://github.com/plusmobileapps/enterprise-recycler-view/blob/master/app/src/main/java/com/plusmobileapps/helloworldrecylcerview/view/ViewHolders.kt
Imo spring has waay more things in terms of library's to use it is unmatched. Including spring security, actuator, and their implementation of MySQL, jpa, and a bunch of no SQL is really nice. We'll see as ktor ages and gains more library's but for now I still think spring is on top.
Yes. I understand. I think you are right. In theory what you suggest is possible but it would require an extra step during compilation to statically analyze the code (for example you would not be allowed to use anything that is initialized in your primary constructor or your super class). So this approach is way simpler to understand and to implement because the constructor Syntax enforces that you do it before you even write a body 
It's an HTTP library. Not sure I'd ever want all that crap crammed into it.
And how would you extend a class that has such a static function instead of a proper constructor? Java interop means that Kotlin constructors have to be compiled to Java constructors.
This might be unpopular opinion, but I find some of the content from the docs is missing, and a few of the suggested approaches are currently experimental like Locations. It might be because I come from a mobile background rather than web so some it might be me with the knowledge gap. That being said, it's great otherwise, there are some great examples on their GitHub, and I'm currently using it for a project. 
Saaaaaame. I've been able to find sources by manually searching for the file name .kt, but that's a pain.
&gt;thymeleaf this is a serverside rendering approach and it's another story. The subject is more about building sophosticated client applications
Delete your .m2 folder in your home. It happened to me on Win10 and to some coworkers on MacOS. I was skeptical about this but trusted our architect and effectively, I could start to peek inside jars again. 
Should you really set at ClickListener on bind instead of on create?
Interesting! `rm -rf ~/.m2/repository/org/jetbrains/` is sufficient. Thank you very much!
Hey, thank you for this link it was really helpful for me. 
Make it an extension for extra kotliness BottomNavigationView.setOnNavigationItemSelectedListener(listener: BottomNavigationView.OnNavigationItemSelectedListener) { setOnNavigationItemSelectedListener(listener) } &amp;#x200B;
We use it in production of large, performance sensitive system (few millions users a day). I've never been so satisfied with a server framework before. Reliable, stable great docs (this used to be a pain point). Go for it! Other good libraries I suggest are Kodein and Exposed
Just curious, have you applied the kotlin-kapt plugin in your project?
I used it to build a mock http-server, so I can only answer to for that. I got up and running really fast and had a fun time doing it. Thumbs up from me! 
There's a kotlin jpa plugin that does this for things marked @Entity, which is at least not plugin-specific, iirc.
Or you can make top level extension function with @BindingAdaptor and no need of @JvmStatic
If you tweak your View base class to have a secondary constructor you can come pretty close: open class View(size: Double) { constructor(size: () -&gt; Double) : this(size()) } class SubView : View({ 100.0 })
You‘he devoted quite some time, thank you so much! I saw many interesting new things in your code, that I‘m so excited to further investigate, its more Thani could’ve hoped for! 
You can make them extension functions and no need of jvm static
I am very satisfied with it. I use it both for private projects and also for more demanding system in production where I work. When we first started using it, the documentation was quite lackning, but now it is really good. We also use Spring Boot for some services where I work, but Ktor have almost half the memory, and I find it easier to debug since it depends less on reflection and annotations. 
There *are* downsides. Two I noted: * The lack of full stack traces in coroutines is highly unfortunate. * Using streaming HTML DSLs makes returning error pages problematic.
You're welcome!
Since I am an Android developer I need ktor for writing REST services so no problem for me the second part , while the first might be a little tricky , hope the latest version of kotlin where coroutines are stable might have fixed that , or is it the K-Tor problem ? 
You can add the following to your top level build.gradle to make IntelliJ IDEA download sources and javadocs: ``` allprojects { apply plugin: 'idea' idea { module { downloadSources = true downloadJavadoc = true } } } ```
It's a general problem with using coroutines, which ktor does heavily. I think the situation might have improved since I last checked, but it's something to be aware of. I can't find any good documentation about this, but here's a related issue: https://github.com/Kotlin/kotlinx.coroutines/pull/792
This is the last feature release of Javalin 2.X. Bugfixes will be added for 2.8.X if necessary, but most of the work going forward will be on Javalin 3. Javalin 3 will not be hugely different from 2.X though, so no need to worry. If you want to dicuss breaking changes, please use this issue: [https://github.com/tipsy/javalin/issues/514](https://github.com/tipsy/javalin/issues/514)
Thanks for putting an explanation of what Javalin *IS* on the page. So many "Version X.Y is out!" pages don't even explain what the thing is or does.
Yeah, it's something that was commented on frequently in the early release notes, I think it was a suggestion from someone here to add that infobox :)
The framework looks pretty nice; def going to give it a shot. Any idea of how the users of it break down with respect to kotlin vs java?
Thanks! Based on looking at GitHub projects, and a survey we did last year, it's about 50/50. Most people who contribute on the tracker seem to be Java devs for some reason.
Understood, hope to see it progress. Cheers
I wouldn't call Kotlin an Android language. Although it is used on Android, it's also used for backend server development. I use Kotlin for backend development at my current job as well as at my previous one. Lastly there's also Kotlin native (which is still in beta for now)
The only way to check if the server is up and running is to try and connect to it. If the connection succeeds, this means that the server is up and running. If it fails, it means that either the server is down or the network connection is down (which makes it impossible to check whether the server is up). The isClosed method on a socket means that it was connected and the connection has been closed. It can't be used to check whether the server is up.
Thank you! Yeah, I kinda figured it would be my own fault. I'll definitely keep that in mind, moving forward.
I am trying to implement a server client project which needs the server to send data to the client every 5 minutes with the client only asking in the beginning of connection. Server-sent events seem to be the go-to solution. I have tried to use the functions given in the Javalin Documents. I am able to receive a response with a simple get from the server. But I couldn't establish a sse connection. The code enters the lambda function in the server but the client does not receive anything. I am not sure if the client or the server, or even both have a problem. Thank you in advance.
6. The syntax doesn't make me want to gouge my eyes out
“A simple web framework for Java and Kotlin”
Java was and still is too verbose.
It’s great to see the work going into Javalin. Keep it up 👌
It's hard to say without seeing the code, but here is a fully working server + client: ``` public class HelloWorldSse { public static void main(String[] args) throws InterruptedException { Queue&lt;SseClient&gt; clients = new ConcurrentLinkedQueue&lt;&gt;(); Javalin app = Javalin.create().start(7000); app.get("/", ctx -&gt; ctx.html("&lt;script&gt;new EventSource('http://localhost:7000/sse').addEventListener('hi', msg =&gt; console.log(msg));")); app.sse("/sse", client -&gt; { clients.add(client); client.onClose(() -&gt; clients.remove(client)); }); while (true) { for (SseClient client : clients) { client.sendEvent("hi", "hello world"); } TimeUnit.SECONDS.sleep(1); } } } ```
Thank you!
Thanks for the fast response, now it's working. You really saved me from lots of headaches!
You can use baseObject?.apply { //something }
You don’t need two generics, you should be able to just do: operator fun &lt;A : Any&gt; A?.invoke(block: A.() -&gt; Unit) { this?.block() } But then, at least on JVM, you’ll have [a signature clash](https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#handling-signature-clashes-with-jvmname) between the nullable and non-nullable overloads, which you can resolve adding different Jvm names to them: @JvmName("invokeNonNull") operator fun &lt;T : Any&gt; T.invoke(block: T.() -&gt; Unit) { block() } @JvmName("invokeNullable") operator fun &lt;T : Any&gt; T?.invoke(block: T.() -&gt; Unit) { this?.block() } But it might be better to avoid this overload and just export the nullable version as the public API: private fun &lt;T: Any&gt; T.invokeNonNull(block: T.() -&gt; Unit) { block() } operator fun &lt;T: Any&gt; T?.invoke(block: T.() -&gt; Unit) { this?.invokeNonNull(block) }
Ktor is good but kinda slow compared to many other libs See: [https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=json](https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=json) You can ctrl f for ktor, and you can see it's usually pretty low. But if high performance is of no concern, this may not be a problem for you 
yeah this \^. Spring is so much more than just a http wrapper.
This looks cool. Anywhere I can find examples of this in use?
We are using it in our projects and products. I'll try to publish complete examples in the upcoming days.
It's spelled knafeh... Now I'm hungry... :)
Have you tried something like this: operator fun &lt;T : Any&gt; T?.invoke(block: T.() -&gt; Unit) { this?.block(0) }
I like the name lol, kunafa sounds like kunafeh which is arabic dessert, it's yummy
Yeah that's the inspiration lol. A dessert name, starts with a K (kotlin), and easy to pronounce in Arabic and English 😂
Thanks. This no nonsense talk on co-routines helped me finally understand wtf this is about. Most of the documentation failed to fo that for me by being a combination of academic, wordy, etc. 
What you want is to have a common superclass or interface that both Int and String implement. Unfortunately Kotlin does not support extending existing classes with a new interface so your only option here is the Any superclass. It's not pretty but the desired usage of your classes can be accomplished with this extension on the Any class ``` fun Any.asText() : Text { return when(this) { is Int -&gt; this.asText() is String -&gt; this.asText() is Text -&gt; this else -&gt; throw IllegalArgumentException() } } ``` And then define your class using Text like this ``` class SomeClassWithTexts(p1: Any, p2: Any) { var text1: Text = p1.asText() var text2: Text = p2.asText() } ``` You lose some type safety with this as you can pass any other type to this class and it will throw an IllegalArgumentException
Thans for your answer! This works, but unfortunately it's not really DSL-like anymore.
A very elaborate answer; all you wrote works perfectly! &gt;operator fun &lt;T : Any&gt; T?.invoke(block: T.() -&gt; Unit) { this?.block() } ...is actually the most elegant solution. Bottom line: I didn't know that it's possible to use `T?` as a receiver of an extension function. Also I didn't know about `@JvmName` (yet). Thank you very much :-)
That's the solution, thank you very much (also see [other answer](https://www.reddit.com/r/Kotlin/comments/b5ucap/is_there_way_to_run_a_block_on_any_where_the/ejhiary/))!
Excellent. For everyone not being a coroutines ninja yet very worth watching.
I just skimmed over it, is it something like Kweb for kotlin?
If you like functional programming and keeping you http layer separate from your business logic, take a look at http4k. It’s also faster than ktor.
Well not really. The motivation is different. Kweb is both front end and back end whereas Kunafa is meant to make front end development easier. Kunafa is has many features like Angular and React but its philosophy is different than both of them. Kunafa's main philosophy is a Web application framework without using HTML, CSS, or JavaScript.
Oops, I should have read that other post first as it's quite excellent. The only thing I would highlight is to make this function inline to allow returning from the lambda (non-local returns) and that also avoids any lambda overhead.
Wow, looks great! Are there any important features that haven't been done yet? When do you expect it to be ready for production use?
Kunafa, sorry i will always think of the dessert when reading it.
Thanks for the idea. Generally it's ok for me if I use this in my own code only, but in a public library I would avoid this solution... Still a valid alternative solution, thanks for sharing your idea
In your very first code example in this article, why does the line `borderRadius = 4.px.toString()` have the call to `.toString()`, whereas the line `width = 290.px` does not? 
How do you call the backend?
Because borderRadius corresponds directly to the CSS border-radius which is a shorthand property for the border-top-left-radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties and as such it can have up to 4 values, e.g. "15px 50px 30px 5px". Hence, in Kunafa it is simply a String. Maybe in the future we can have something more "type safe" than a simple String for these shorthand properties. 
Kunafa does not dictate how the backend is called. You can use XMLHttpRequest for that. Here is an example function: private fun makeRequest( requestVerb: String, url: String, headers: Map&lt;String, String&gt;? = null, onSuccess: (XMLHttpRequest) -&gt; Unit, onError: () -&gt; Unit, body: String? = null): XMLHttpRequest { val xmlHttp = XMLHttpRequest() xmlHttp.open(requestVerb, "$BASE_URL$url", true) xmlHttp.setRequestHeader("Content-Type", "application/json; charset=utf-8") headers?.forEach { xmlHttp.setRequestHeader(it.key, it.value) } xmlHttp.onerror = { onError() } xmlHttp.onload = { onSuccess(xmlHttp) } xmlHttp.send(body) return xmlHttp } But since we don't like callbacks, we used coroutines to make calls synchronous. If anyone's interested, I might write a blog post to show the code. At the end, our server calls look like this: private fun getCustomers() { networkCall( before = { uiState.value = BasicUiState.Loading }, onConnectionError = { uiState.value = BasicUiState.Error } ) { val response = ServerCaller.getCustomers() data = response.data uiState.value = BasicUiState.Loaded } } `uiState` is an Observable as this function is inside a ViewModel. 
Yeah nullable types are types, they're just nullable. However, in my experience, an extension on a nullable type means its an extension only for the nullable of that type, not the non nullable. But that's just what I've experienced before 1.3 so it could have changed.
You are secerely lacking in information. Is this kotlin-jvm ? KotlinJS? KotlinNative? What framework are you speaking of ? TornadoFX ? Plain java FX? Html ? Swing ? 
No idea :s. Does kotlin in Android studio answer that ? 
It's been good, but I think I might use [http4k](https://www.http4k.org/) for my next project because it's so much simpler. The Ktor DSL and internals have been hard to understand at times.
There is only one major difference between Kotlin and Java varargs. Java pass the varargs array as is but in Kotlin you need to unpack your varargs array with spread operator (*array). This Kotlin feature could be used for combining values from varargs array and fixed ones inside tour function, all in single call. (May be it could help you) 
Thanks, that works! Didn't know about the spread operator. Also had to rename my generic function to avoid making a recursive call. ``` fun matches(vararg objs: SomeObject) = extMatches(*objs) ```
In my opinion, Kotlin’s generics are way more understandable than Java’s. Anyway, generic variance is still tricky, but I found that due to the fact that Kotlin promotes the usage of immutable data structures, the problem is often avoided completely, as long as passing around mutable datastructures (especially lists) is avoided (which it should be).
Hey try Var button = Button(this)
Great page, but a slight criticism. It would be better to show an example of lazy delegates as such ``` val testLazy by lazy { println("evaluating first time for testLazy") returnSomething("testLazy") } ``` because it shows that the lazy is only ran once but the result is used, evidenced by calling `testLazy` twice but only ever printing `evaluating first time for testLazy` once. its a bit easier to get the point across on what `lazy` actually does.
Though it is important to note Java varargs are much more performant than kotlin's spread operator version as the spread operator creates a backup array. If you're feeling particular you can cast the `vararg items: T` to `Array&lt;T&gt;` as `items as Array&lt;T&gt;` 
$34 not bad
Currently using something like this for the build; &amp;#x200B; `&lt;build&gt;` `&lt;plugins&gt;` `&lt;plugin&gt;` `&lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;` `&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;` `&lt;version&gt;${kotlin.version}&lt;/version&gt;` `&lt;configuration&gt;` `&lt;compilerPlugins&gt;` `&lt;plugin&gt;spring&lt;/plugin&gt;` `&lt;plugin&gt;no-arg&lt;/plugin&gt;` `&lt;/compilerPlugins&gt;` `&lt;pluginOptions&gt;` `&lt;option&gt;no-arg:annotation=javax.xml.bind.annotation.XmlRootElement&lt;/option&gt;` `&lt;/pluginOptions&gt;` `&lt;jvmTarget&gt;1.8&lt;/jvmTarget&gt;` `&lt;/configuration&gt;` `&lt;executions&gt;` `&lt;execution&gt;` `&lt;id&gt;compile&lt;/id&gt;` `&lt;phase&gt;process-sources&lt;/phase&gt;` `&lt;goals&gt;` `&lt;goal&gt;compile&lt;/goal&gt;` `&lt;/goals&gt;` `&lt;/execution&gt;` `&lt;execution&gt;` `&lt;id&gt;test-compile&lt;/id&gt;` `&lt;phase&gt;process-test-sources&lt;/phase&gt;` `&lt;goals&gt;` `&lt;goal&gt;test-compile&lt;/goal&gt;` `&lt;/goals&gt;` `&lt;/execution&gt;` `&lt;/executions&gt;` `&lt;dependencies&gt;` `&lt;dependency&gt;` `&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;` `&lt;artifactId&gt;kotlin-maven-allopen&lt;/artifactId&gt;` `&lt;version&gt;${kotlin.version}&lt;/version&gt;` `&lt;/dependency&gt;` `&lt;dependency&gt;` `&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;` `&lt;artifactId&gt;kotlin-maven-noarg&lt;/artifactId&gt;` `&lt;version&gt;${kotlin.version}&lt;/version&gt;` `&lt;/dependency&gt;` `&lt;/dependencies&gt;` `&lt;/plugin&gt;` `&lt;plugin&gt;` `&lt;groupId&gt;org.codehaus.gmavenplus&lt;/groupId&gt;` `&lt;artifactId&gt;gmavenplus-plugin&lt;/artifactId&gt;` `&lt;version&gt;1.4&lt;/version&gt;` `&lt;executions&gt;` `&lt;execution&gt;` `&lt;id&gt;compile-groovy&lt;/id&gt;` `&lt;phase&gt;process-sources&lt;/phase&gt;` `&lt;goals&gt;` `&lt;goal&gt;compile&lt;/goal&gt;` `&lt;/goals&gt;` `&lt;/execution&gt;` `&lt;execution&gt;` `&lt;id&gt;test-compile-groovy&lt;/id&gt;` `&lt;phase&gt;process-test-sources&lt;/phase&gt;` `&lt;goals&gt;` `&lt;goal&gt;testCompile&lt;/goal&gt;` `&lt;/goals&gt;` `&lt;/execution&gt;` `&lt;/executions&gt;` `&lt;/plugin&gt;` `&lt;plugin&gt;` `&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;` `&lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;` `&lt;executions&gt;` `&lt;execution&gt;` `&lt;id&gt;add-test-source&lt;/id&gt;` `&lt;phase&gt;process-test-sources&lt;/phase&gt;` `&lt;goals&gt;` `&lt;goal&gt;add-test-source&lt;/goal&gt;` `&lt;/goals&gt;` `&lt;configuration&gt;` `&lt;sources&gt;` `&lt;source&gt;src/test/groovy&lt;/source&gt;` `&lt;/sources&gt;` `&lt;/configuration&gt;` `&lt;/execution&gt;` `&lt;/executions&gt;` `&lt;/plugin&gt;` `&lt;/plugins&gt;` `&lt;/build&gt;`
Would definitely be interested to see a blog post showing it. Or a repository would be fine as well :)!
Thanks; will give this a shot! 
FYI, here's the talk Abstract In this talk, Ty will walk you through using Kotlin with Gradle and Android to streamline your workflow for app development, both within the build tool phase and within the application itself. After a brief overview of Kotlin language, he'll dive into how it can be used with Gradle to accelerate Android Development with a consistent language through the entire stack. He'll provide real world examples of using Kotlin in Gradle plugins, Gradle script, and Android apps.
Yeah but it doesn't matter bc you just add what you want with spring, same with ktor. There's nothing crammed into it, you can add what you need and you don't need anything more.
Yes.
`new Complaints(new String[] {"He's right, java is way too verbose"});` having to declare everything `new` is stupid. having to explicitly define types multiple times when it should be implicit e.g. `final String[] strings = new String[] { ... };`. semicolons are stupid! after years of java switching to a year and a half or so on kotlin now ive finally got rid of the semicolon after every line reflex.
You can you every Java library from Kotlin
Using Realm in production right now on both Android and iOS. Would love to share logic... might be possible today, not sure. See [https://github.com/realm/realm-java/issues/5727](https://github.com/realm/realm-java/issues/5727).
Short answer: Yes. Long answer: in Kotlin/JVM and Kotlin/Android you can. However, Kotlin/JS and Kotlin/Native are incompatible to these.
Where can I find the docs?
I've done it in Android (Java though) this way (device is a variable of the type BluetoothDevice which represents the target device). `try {` `BluetoothSocket socket = device.createRfcommSocketToServiceRecord(BluetoothServerController.MY_UUID);` [`socker.`](https://socker.open)`connect();` `OutputStream outputStream = this.socket.getOutputStream();` `InputStream inputStream = this.socket.getInputStream();` `// write or read` `} catch() {` `...` `} finally {` `// close resources` `}` &amp;#x200B; The `BluetoothServerController.MY_UUID` is the UUID of the service where you are trying to send the data to.
Extensions.... bother me. It always seems like they're a work-around for some deficiency. Though I don't have a lot of experience with them so maybe my concern is misplaced. I guess it just seems that they are the sort of thing that can be very quickly abused and should be a "only if you really need to" sort of thing on any given project. They rapidly blur the line between what is provided by a class and what is not. If I come on to a project and am working with a library I'm not familiar with I could see me assuming that lots of extension methods are, in fact, part part of that library. 
I've been using them extensively and haven't run into problems. It's really just syntactic sugar to swing the first "parameter" around to the left of the method. In fact with a lambda you can use either form: val lambda: String.(Int) -&gt; Int = { arg -&gt; length + arg } lambda("As argument", 2) "As receiver".lambda(2) I use them most often in data conversion between types, e.g. `foo.toBar()` which looks and feels a lot more natural than `toBar(foo)`.
I've found that extension methods are most helpful when the container for the method is NOT the focus of the method, but is instead one of the method parameters. This is especially so when the variable in question is getting modified by the method. To use one of the examples from the article: myString.padLeft(42) implicitly gives more focus to the appropriate variable vs StringUtils.padLeft(myString, 42)
&gt; If I come on to a project and am working with a library I'm not familiar with I could see me assuming that lots of extension methods are, in fact, part part of that library. And how exactly does that adversely affect your workflow? If you need to use the extension methods elsewhere just make them their own module/library and re-use away! The alternative to extension methods is having to make big, confusing method calls like `FooUtils.getDerivedValue(foo)` rather than just `foo.derivedValue` (assuming you use an extension property for values).
You need your program to wait till the request finishes so you actually want to run the request synchronously!
&gt;And how exactly does that adversely affect your workflow? I dunno. As I said - I don't have a lot of experience with using them yet. :-) One of the things that I like is that they do show up as an imported method. So there is some distinction about them. As others have said it's primarily syntactic sugar and the examples given seem entirely reasonable
This is a good example. It would separate conversion logic from a simple data type yet still allow for a syntax that is more "descriptive." 
That's another good point - It is less ambiguous which parameter is the target of the activity in those cases...
The easiest way is to execute the request synchronously so execution of the main function stops until the download is done. In the above code sample you invoked response with a lambda causing Fuel to execute the request on another thread. If instead you call `response` without arguments it will perform the download on the same thread and return the byte array. Something like ``` val request: Request = Fuel.get(url.toString()) val bytes = request.response() // do something with the file printn("We are done, exiting") ```
Just think of extensions as regular, top-level functions in any other programming language. Essentially it's syntactic sugar for making the first argument the receiver. Keeping this in mind, it encourages data-oriented and functional design, because static functions have no implicit state. Your classes are essentially reduced to data bags with entirely encapsulated behavior, and the functional glue is implemented by extensions/top-level functions, making behavior easier to test and reason about. This is pretty much the antithesis of traditional OO design, so I can see the reason for not liking it. However, after dealing with decades of inheritance hierarchies for the mere purpose of differentiating behavior, I'll take a good ol' C/Lisp/Rust-style data-driven approach any day.
In a way, you're trading less ambiguity about the method call for more ambiguity about the method's source, and that extra ambiguity is very easily mitigated by using modern IDEs.
Extensions are a simple feature that makes code so much better. Couldn't live without them anymore :)
Intellij also highlights them different, which I find pretty helpful.
I really don't have good horse-sense for when I should and shouldn't be using extensions. For example, is the valid. Resultset has a \`getInt\` method which returns \`Int\`. I've added \`getInteger\` which returns \`Int?\` and does all the \`wasNull\` garbage under the covers. Good? Bad?
This is also what I use them for. I tend to write converters from one type to another as extension methods and typically define them right after the conversion target class definition. It feels satisfying and clean to write something like ‘return myModel.toDto()’ in a controller method.
Another good example of extension methods done right is the `set` extension which allows you to use bracket syntax instead of a `setX("key", "value")` method. In Spring with Kotlin extensions adding a value to the Model in a controller method looks like this ```model["key"] = myObject``` Instead of ```model.addAttribute("key", myObject)```
Good. You can't add methods to the interface so this makes perfect sense.
And often those types of methods are statically imported anyway so it'd look like padLeft(myString, 42) which is just as ambiguous (and that's assuming you knew which of the 1000 `StringUtils` the original was using)
In cases like that where you probably want to hide the `getInt` method it seems like a wrapper is a better approach. Replacing functions are for overrides/wrappers, *adding* functionality is for extensions (in my view).
Good but I don't love the naming because it's not clear what the difference between `getInt` and `getInteger` is. `getNullableInt`? `tryGetInt`?
I was about to say, use `arrayOfNotNull`, but that doesn't seem to be a thing for some reason, unlike `listOfNotNull`. Oh well. I don't think there's a better way to do this then.
Use response(), without lambda.
Oh God, the Kotlin collections library is so much better.
Fuel response with a block runs asynchronously. You want to make that request synchronously.
An important thing to note is that extension functions/properties use static dispatch and can't be overriden. For example, let's say `FooOrdered` implements `Obscure` and ensures `foo &lt;= bar`. `FooOrdered` can override `max` and `min` to just return `bar` and `foo` respectively, since it knows which will be larger. For `NotObscure`, it's not possible to override the extension properties like that. In this case the difference is trivial, but if `foo` was a `List&lt;Int&gt;` and the subclass ensures its list is sorted, having `min`/`max` be O(1) instead of O(n) is a different story. Because of this, I'm iffy on libraries providing extensions on their own interfaces. Users will know their classes better than the library author does, and may be able to optimize for their specific cases, but making derived properties into extensions foils that.
You shouldn’t need to make the code synchronous or blocking. Coroutines are how to do async things in Kotlin. https://kotlinlang.org/docs/tutorials/coroutines/coroutines-basic-jvm.html
It should be getIntOrNull The standard library does it the same way e.g. firstOrNull
You're right, that's better.
What are the actual features that you want out of a text editor that aren't provided by vs code or sublime text or whatever? I don't think it would be particularly easy to make idea lightweight.
First of all, I'd remove most pre-installed plugins. so it won't be locked on the jvm world, then I would install plugins on demand. whether it be for java, python, javascript, without fancy run configuration, just the terminal. The thing is, Idea looks better, it has actual intellisense, I find vscode's very lacking. 
Absolutely agree! I had the same idea a few days ago. A lightweight editor, no project view, just a few tabs and syntax highlighting for bash, json and such 
For Windows there is Notepad++. Pretty sure Linux has several alternatives, Kate comes to mind. Dunno about Mac.
In what situation would one need a generic text editor 
Thanks, but I'm not asking for alternatives. I think Intellij would be better.
Don't you ever use vscode/notepad++/etc ?
You wanted light editor did you not? IntelliJ's Java based IDEs are hardly light even if stripped down in features...
Notepad++ comes into my mind for that.
I literally want idea as a generic code editor.
Nope, I only ever use intellij it works good for literally everything. I have never seen a use for vscode or notepad++
Notepad++ is quite dated, and not-good-looking imho.
It got updated a month ago and at least the colors are customizable.
Do you do javascript, Python? Maybe some haskell, whar I'm trying to say is that there are multiple domains that cannot be done in solely idea, I mean, in the end of the day it's just an IDE for the jvm. I know they have an idea for every possible language. But that's kind of an issue for me, it's cumbersome and costly.
Oh I didn't catch that update, I migrated to Linux few months ago.
The ENTIRE idea of intellij is that it is a generic code editor where you can program in pretty much every language under the sun besides python but they even have pycharm for that. 
That's 5+ different IDEs though. Not just a single good code editor.
Well I almost exclusively program in kotlin or java, but from my small time using python or js I thought it was fine Imo. Guess I can't really comment on the performance of most the software jetbrains produces.
I have pycharm community and it's nice, just like idea, but when I want to write some c o have to buy clion, when I want to design a website, I have to buy webstorm.. And so on.. VSCode is better in these domains, it's a single code editor that handles all these domains generically, but compared to idea, it's still very limited.
IntelliJ does everything except: c/c++: CLion c#: Rider As far as I know, everything else is just a subset of IntelliJ.
I mean you could buy the license that includes everything, but idk it's like 650 dollars. I make a living off this so it makes sense for me to buy it but I don't know your situation so I can't say.
NP++ is cool but windows only...
I'm a student, most of my projects are hobby projects, and I don't make money yet. Plus I don't like the idea of a separate program for every language.
Yeah I mean if you do it right you only need one or two languages for everything.
You are describing the IntelliJ Ultimate edition. For me that is the ultimate generic editor. I have one IDE that I use for Java, Kotlin, Ruby, JavaScript, Android, Python, Go, Rust, Bash and a few others. Basically if you have the Ultimate edition, there is no need for Pycharm, Rubymine, Webstorm etc because they are all just preconfigured Idea instances with language specific plugins. Yes it costs 600/year but if you live in it for 8 or so hours a day it makes total sense to buy it. 
Jetbrains do have a decent programme for donating IntelliJ Ultimate licences for Open Source maintainers, just in case that might work..
hmmmmm That's the first time I've heard about this!
Even the free version has plug-ins for several languages and can do at least basic syntax highlighting for most programming languages. And even if you only use Intellij as a basic text editor without syntax highlighting at all, its editing features like multiple selection/cursors, powerful search/replace tools, intuitive keyboard short-cuts, version control integration and so on makes it much more usable for me that standard text editors. For example I recently developed something in Vala, which is a kinda exotic language, and while it has a dedicated (basic) IDE, using Intellij was much more convenient because of the familiarity and the Git integration. But if you have the money, I really recommend buying all the Jetbrains tools. If you wait for a discount, you can get the all products pack for 149€/year and for someone who works as a freelance developer or so, that's definitely affordable. And if you're a student or open source developer, you can usually get them for free.
&gt; Yes it costs 600/year It's usually [not that expensive](https://imgur.com/ahitLm4) as you often get random discounts and it also gets cheaper the longer you subscribe.
For text editing I think Sublime Text is your best option. It boots super fast and parses files just as fast.
Intellij is the jvm IDE indeed. But there are plug-ins for JavaScript (even for Vue and React), Python and Haskell available. And most of those plug-ins work with all the Idea machinery of code completion, navigation, debugging etc.
I'd be really grateful for a plug-in for javascript, c or haskell for Idea CE.
This doesn't make any sense. The reason Intellij is slow is because of it's great IntelliSense. Intellij has to index your entire project + construct and download it's dependencies. Having plugins being loaded on demand doesn't make much sense either. Intellij + all of it's plugins load in &lt; 15 seconds from my SSD. Why go through all this effort for just a couple extra seconds?
You can get an individual use license for $149. 600 is an organization license. They also have student licenses which are cheap, or free. I can't remember.
Bite the bullet and learn vim. With plugins, vim can do everything intellij can. The only problem is you have to find the plugins you want and kind of assemble your own solution. 
I don't find Intellij slow, I find it quite acceptable on my machine. Plus, the "code editor" version doesn't need java testing support, gradle, ant, maven plug-ins. And other jvm-focoused plug-ins.
The problem is Intellij edits **everything** except C/C++ already. You need no other IDEs! You don't need all that WebStorm/PHPStorm/PyCharm stuff. Intellij can do it all. I know this because I have a project that contains a server + a web UI. The server is written in Java + Kotlin with some extra PHP. The web UI is in JS/TypeScript. The build scripts are in Groovy + Bash. With Intellij, I just open the project folder and then start editing anything I want! If I want to work on the server, I can open a Java/Kotlin file. Intellij automatically pulls the dependencies from the Groovy build script and IntelliSense starts working. If I open a PHP file, Intellij grabs the dependencies from Composer and IntelliSense starts working. If I want to work on the Web UI, I can open a JS/TypeScript file and Intellij will grab the dependencies from the `package.json` and IntelliSense starts working. With Intellij, I can throw Java/Kotlin/PHP/Python/Scala/JS/TypeScript/CoffeeScript/Groovy/Bash all into a single project and edit ALL of these files any time I want, with full IntelliSense completion for every one of those languages. Intellij IS the generic code editor. It's not lightweight, but it's because it is able to give great code completion for all these languages that it's so heavy.
I've been thinking about it for a few weeks now, but believe it or not one of my major issues with vim is its looks, So far I've not seen a pretty setup of vim, not that I've seen a lot. However, my friend uses it and really seems in terms with this whole IDE /text editor thing.
Are you using the ultimate edition? If so, is there any plug-ins for the CE that allows me to do the same as you?
I think with some work, Vim is still the thing that crosses off most of your wishlist. You want something with good intellisense, that's lightweight, and has syntax highlighting for a lot of languages. Vim is that. &amp;#x200B; I will say that before Vim, I used Atom, and occasionally lightweight editors like Kate and Gedit. I still use Intellij/Android studio when working with Kotlin/Java projects, but Vim has replaced it for everything else. Vim is life.
With Github Education Pack, I use the Ultimate version for free as long as I am a student. I have been using it since September 2017.
I get that. But to me it looks like the features you want are already there and done really really well, just not free. As some people pointed out in this thread the full version can be had for less than 300 euro/dollar a year if you wait for the right moment to buy. Nobody can stop you just taking the Intellij Platform which is fully open source, forking it and building your own multi-language editor on top of that. But given that there is already an editor war going on with contenders that can provide the same feature set (Vim, VSCode, Sublime, Emacs, IntelliJ Ultimate,...) , some even with commercial backing or lots of open source contributors I doubt that the project will gain enough traction to survive.
Thanks, it seems UE is the answer, I can use it now under the student program, but I'll be upset when the license expires lol.
I'm using the ultimate version. CE is missing JS/TS which I guess are pretty important. PHP and Scala are available as plugins in CE I think.
The problem is that you can't just throw out Gradle/ANT/Maven support and keep IntelliSense. IntelliSense uses the project's Gradle/ANT/Maven build scripts to find dependencies. Without this, IntelliSense would be pretty useless. Even if you don't use Gradle/ANT/Maven, removing the plugins would be pointless. These plugins are just glorified file watchers. Their basic code is: 1. Watch build.gradle/pom.xml/build.xml for changes 2. On change, parse the changed build file into a project configuration + dependency tree 3. Merge the changed project config + dependency tree with the IDE's internal project config + dependency tree If you have no build.gradle/pom.xml/build.xml, you don't really have to worry, because there is nothing for the IDE to watch, and thus no performance impact. As for the other useless JVM plugins, I don't really believe they impact performance that much either. Most of them are just inspections. And it's not a lot of inspections either, it's around 50-100 inspections total. They are almost nothing compared to the thousands of other inspections Intellij has. Plus most of them are not even present in CE.
Gotcha.
It is well worth it. Chances are that once you are not a student anymore your employer will buy the license for you. Or if you become a self-employed freelancer/contractor like me you can write it off as a business expense. Tip: If you use have the Ultimate edition or all products packs, don't bother with downloading Pycharm and IntelliJ and Webstorm and Rubymine, etc and try to keep to configs consistent. Just download IntelliJ ultimate and download the required products in those.
I think I understand you perfectly. BBEdit for Mac EmEditor for Windows Did I nail it?
Thanks!
I can't relate as I've never heard of these editors before now 😅
I can't relate as I've never heard of these editors before now 😅
Have you tried using scratches in IntelliJ? 
Zero situations where one would prefer a stripped down IntelliJ over nano, vi, emacs, etc.
The library is still in very early development state, but it's should be usable for prototyping and playing around. I'm actively working on adding more features and making it faster. Any comments, advice or PRs are welcome!
That's what I'm saying
Replacing list of arguments with varargs is not a source compatible change in case if the function was called with named arguments: ``` add(x = 1, y = 2, x = 3) // won't compile with vararg ```
Damn, completely forgot about this case. Compatibility _is_ hard! I've added a note about it in the article, thank you!
The slide "How about concurrency?" claims that if you have a single coroutine (which under the hood runs on different threads, one after the other), no synchronization is required on shared data. This isn't obvious to me - I thought unless there is some kind of synchronization, there's no guarantee under the JMM that threads will ever see each other's changes. Does kotlin add some kind of implicit synchronization under the hood here?
If you contribute to Open Source (for instance, have some actively maintained repos on Github), they actually offer free licences for their paid offerings (which can be used across all of their products). That is how I got my current licence (valid for a year, but practically unlimited if I stick to the same base version of the IDE, and maybe will be updated next year if I keep my repos active). Well worth a try if you cannot afford it/cannot justify the cost.
Or you could bite a bigger bullet and customise Emacs to your heart's content (just make sure you keep your config file backed up in a VCS!)
Yes. I use Intellij ultimate to code and BBEdit as a text editor. Intellij has problems displaying large files tens or hundreds of megabytes, while BBEdit just opens them. This is especially useful for log files, or output of large maven builds. Also, BBEdit remembers all open files with contents, even when not saved. So I also use it as a scratch pad. 
Hey u/zsmb, nice article! While you are talking about maintaining compatibility, you should probably use and/or talk about [semantic versioning](https://semver.org). Most Java-based projects use it and it's a great way to indicate what kind of changes a new version introduces. 
Indeed, this would be worth a tale of its own - I'll leave this one for someone else to tell. It was one of multiple things I cut from this article to make it shorter and more focused.
Well that's what Ive been doing Would you post the full code? I've tried Java examples but all I get is either broken pipe error message or socket closed
This is pretty much all client code. Is this Android we are talking about here? If so, did you add the right permissions and features to the manifest? Also, did you implement the server side yourself? &amp;#x200B;
Generics in Kotlin make way more sense to me, though I'm sketchy on out and in, I still know how to use them in context. &amp;#x200B; Also reifieds are amazing
From the README: val a = BigInteger.fromLong(1L) val b = BigInteger.fromInt(2L) val difference = a - b println("Difference: $difference") ----- Output ----- Difference: 3 TIL 1 - 2 = 3. Also, wont this fail to compile? As `2L` is not an integer literal? &amp;#x200B;
Nothing major is missing. All the features we planned initially are basically done. We are looking into databinding but probably won't work on it till it is stable enough for production. For now we want to finalize the API before v1.0 and thus we want feedback, in addition to fixing any edge case bugs that might occur. We hope to release v1.0 in a couple of months time.
Nothing major is missing. All the features we planned initially are basically done. We are looking into databinding but probably won't work on it till it is stable enough for production. For now we want to finalize the API before v1.0 and thus we want feedback, in addition to fixing any edge case bugs that might occur. We hope to release v1.0 in a couple of months time.
Yes I added all permissions. Android studio done on Kotlin. I even downloaded Java examples but couldn't even get those to work
Nice catch, that example is an absolute disaster :D You're right it would fail to compile, and that wouldn't be a true output. I added a proper sample and updated the README. There`s also a test now, that verifies the example from the readme: ``` val a = BigInteger.fromLong(Long.MIN_VALUE) val b = BigInteger.fromLong(Long.MAX_VALUE) val difference = a - b println("Difference: $difference") val expectedResult = BigInteger.parseString("-18446744073709551615", 10) assertTrue { difference == expectedResult } ``` Thanks for the heads up!
[JLS §4.1](https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.1) says: &gt; There is also **a special *null* type**, the type of the expression `null`, **which has no name**. &gt; Because the null type has no name, it is impossible to declare a variable of the null type or to cast to the null type. Does Kotlin have a similar special *null* type, or should I replace *Null* with something else in the diagram?
The equivalent to that would probably be `Nothing?`
Since nullable types are union types (all values of the non-null type plus null), we can work backwards to get the answer. We want a type which has a single value of `null`. One way to get this result would be to union a type with no values plus null. Kotlin has the `Nothing` type which has no values so lets union null with that to get a nullable `Nothing` declared as `Nothing?`. However, this is sidestepping the question because a union type is the union of two types. By saying nullable `Nothing` we are really saying that we are combining the values of 2 types where the first type has no values and the second type has a single value of null. So in theory there should be an implicit null type but we should never think about it explicitly as that would confuse things since Kotlin has union types. This allows Kotlin to be more strongly typed than Java and avoid null-related defects.
Technically yes, but its not accessible to mere mortals (theres no name for it). If there was a null type you could access (and it was `Null` for example), you could typecheck it `thing is Null`
What about Javalin? 
Also, for hamcrest lovers there's a Kotlin version: [hamkrest](https://github.com/npryce/hamkrest), written by on of the same devs, which slots more neatly into any pure Kotlin project (and along Junit5).
Since the current 'getting started with' tutorial is a bit out of date, I published a new tutorial. I'll do a pull request on the current documentation soon, but I'd love to hear some feedback first. Thanks!
Wow, that is the most useful presentation on coroutines so far! Answered a lot of questions that I still had.
Short, sweet, and following best practices. Thanks for putting this together!
Thank you!
I put together a simple Kotlin app that sends strings and displays them on the screen. Here is [source code](https://github.com/ikolomiyets/bluetooth-test) on Github, It is very basic thing: nothing fancy, but gives a good idea how to send stuff over the BT. &amp;#x200B;
It won't show any errors but instantly crashes on run https://i.imgur.com/2hTER9T.png However I may have working example now so no need to trouble any further, thanks a lot anyway
Are you trying to run it in emulator by any chance?
No, Android phone 6.0.1
Well, bluetooth must be enabled. I did not bother handling errors when bluetooth is disabled.
Ooooh yes it works thanks a lot. Bluetooth needed to be enabled yes...
Thanks! Speaking of best practices, I'll publish another post in a few days about integration testing with Javalin and Fuel HTTP!
No worries, thank you too! :-)
Outside of schoolrooms, it's not good practise to complicate a project consisting of few classes by creating pointless interfaces, if you're just ever going to create the single implementation.
Thanks for the feedback
It’s not a factory interface if the only thing in the interface is a companion object with its own static factory method. The interface itself is completely superfluous and you might as well just make the function in the companion object top level instead. 
From where did you create this flow chart diagram?
First.
This may be a consequence of being on mobile, but I can’t see what you’re trying to highlight.
https://en.wikipedia.org/wiki/Ipe_(software)
**Ipe (software)** Ipe extensible drawing editor is a free vector graphics editor for creating figures in PDF or EPS format. It can be used for making small figures for inclusion into LaTeX documents as well as making multi-page PDF presentations. It is developed by Otfried Cheong since 1993 and initially worked on SGI workstations only. Ipe 6 was released in 2003 which changed the file format into XML code embedded into PDF and EPS files. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/Kotlin/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Ah lol, okay. Let me change it to a image soon, once I get home
Second, as in Kotlin Style Guide. 
Return type on new line, or not
Check out tornadofx, I guess.
r/Kotlin is not javalin change log page :(
I usually post once a month and get a 90% upvote ratio, so it doesn't feel like I make an excessive amount of posts. If this really is a problem you can filter out the post by blocking this account. Find one of the subsmissions (like this one: https://www.reddit.com/r/Kotlin/comments/b5oovq/javalin_280_is_out_validation_improvements/), select "Report", then "Other issues" and submit. Then you get an option to block the account.
Now that I see it, I find the recommended convention the most readable. Each line describes one aspect of the method and no more (e.g. name, argument, return type).
I don't think a cross jvm/native UI library exists... If it did, I think the JVM would use it too.
The second one. If you're delineating everything on its own line for readability, why would it change for the return type? &amp;#x200B; The Kotlin Style Guide also says that you should no be using your continuation indent: "Use regular indent (4 spaces) for constructor parameters." I usually configure my IJ continuation indent to 4 spaces instead of 8 as soon as I install it somewhere.
Ok, newline at : or )
correct me if in wrong but I think this goes against the grain of the intention of multi platform projects in kotlin. I believe each platform should just have one or many central dependencies which is shared platform but the GUI be written independently.
As far as I know there aren't any ways of doing that currently.
That basically only supports Oracle Java 8, which is about the opposite of multiplattform.
the closing parenthesis/braces should be at the same indentation level as the opening with the parameters being indented the same level as the implementation. fun someLoooongFuntion( param: SomeReallyVeryLongName, tracker: ISomeLonngPresenterContract, whyDoDis: ISomeLonngPresenterContract.ISomeTool ): SomeReturnObject { return SomeReturnObject() } &amp;#x200B;
\&gt; or caсhed on the first run So first run could be doing some sort of network access. Ultimately it's an API design decision
Feels like an anti-pattern compared to variables? At the end of the day it's an API design decision. There shouldn't be any reason suspended properties aren't a thing since properties are an abstraction of how the backing data/functionality is stored/accessed. Their only true limitation is that they haven't been implemented (yet).
a few similar questions to my scala version of this article, specially on the FP concepts :) https://pedrorijo.com/blog/scala-interview-questions/ important to reinforce that knowing the answers to those questions doesn't mean one is a good developer (nor the opposite), but I feel like they are a good starting point. There's much more on developing software than understanding what is an higher order function, specially the team work. But good post :)
I am not aware of any. What if you create 3 subprojects. One contains you business logic in pure Kotlin. Anything it needs to use will be an interface. The next contains your native code and imports the business logic. Everything that you need from the native stuff will implement one of those interfaces from the first subproject and get passed in. The third contains your jvm code and imports the business logic. Everything that you need that interfaces with the jvm will also implement one of those wrappers. You will need to write a lot of your display code twice, but your business logic will still be in one place.
A GUI, and the concept of a GUI is a very complex thing, with lots of inherent state and complexity and knock-on effects. Abstracting over multiple implementations of "the entire concept of GUI" with a single interface and then wrapping your application around that interface IS one option, but so is having a concise interface for your application and having multiple implementations of a GUI which wrap themselves around that interface. Each GUI wrapper atop your business-logic API would be free to take advantage of its underlying toolkit, would be free to have a design that departs from the other if useful or necessary, etc. etc. Yes, that means making two changes instead of one when you add new features or change things in the interface. Consider the design of the interface carefully and avoid those, but also consider that you might be making two simple changes instead of one really awful one. 
Fun fact, if that existed, thing as Null could fail, and throw an error, but thing as? Null would always give you a null. That seems just a little too weird to allow 
Thats why smartcasting is nice though then it wouldnt be any different than smartcasting equality to null ``` val a: Int? = randomIntOrNull() // generate either an Int or a Null when (a) { is Int -&gt; a+2 is Null -&gt; println("null") // use as null null -&gt; println("should never be reached because is Null is essentially the same") } ```
Well I was hoping for 1 textview and 1 button type of simple Don't need to select devices or show nearby devices. Once again thanks but that could have been wayyyyyyyyyyyy more simpler 
It was ripped out of the existing application code and converted to Kotlin.
I wouldn't say this goes against the "intention", just that the design goal is not to create something that's an "all-in-one" solution. I would fully expect UI libraries to be written. However, javafx and wxWidgets as options are probably not on anybody's todo list. I would expect work on Android/iOS far sooner. To be clear, I don't expect Jetbrains to be focused on this anytime soon. Community libraries. Probably in the form of common view generators that delegate to platform views. I know some folks have made attempts, but nothing very interesting so far.
Yes I guess that makes sense... I should remove 50% of that and make actually simple guide for people like me who don't want full package just some part
Well, I don't believe that 50% can be removed from the code. You need ability to select the target device or hardcode it but I believe it is less confusing have an additional dialog allowing to select a device from the list.
There is only 1 device I wanna send data to, much easier and faster to hardcode. And can always add later lists that show paired devices/nearby devices
https://github.com/msink/kotlin-libui/blob/master/README.md AFAIK there's no JVM implementation (Swing/javafx/tornadofx) but shouldn't be needed as libui is available on the main JVM platforms. If you really want it I guess you could write a tornadofx wrapper. I'm disappointed with everyone who says you shouldn't do this and should write distinct UI code. Sure, the result might not look perfectly platform-native, but that might be acceptable for your app. At least initially.
This was posted recently, but I don't know how production ready it is: https://github.com/lightningkite/koolui
I've created several non-trivial projects in Kotlin and I feel like I'd fail the junior developer quiz.
That's surprising to me, did you at least use everything in the junior list at least once? I feel like the only uncommon one is the volatile question, since juniors probably don't have experience with multi-threaded Java.
I always go with the second one, as I do with any sort of list. If the list doesn't fit on a single line, then each element gets its own line with a comma, and nothing else, including `)`. 
+1 to what Kevin said. The design of Kotlin multiplatform doesn't require this, but nothing prevents it either. We shouldn't say that it goes against the grain, it's merely not a goal of the _language_, but something we're free to do with _libraries_.
Ah yes, why hasn’t anyone just implemented WORA yet, come on, it’s easy. /s (WORA - write once, run anywhere. Yes it’s possible, but it’s very, very complicated. Anyone who says otherwise probably hasn’t shipped a great Ui app with things like accessibility, i18n, and hell, reasonable energy and memory usage.)
I don't know what `internal` nor `protected` access modifiers are. I didn't know you could use an `open` or `final` modifier for a function, nor do I know what they are. Not 100% sure what a volatile variable is in Kotlin. Without checking I have no idea if a class compiles if the package is wrong. I've never even manually modified the package, it's just something the IDE handles. I didn't know kotlin had a `===`. I don't know if a `when` can be used without an argument. I've never used an extension function before. I think return type `Unit` is the same as no return type, but I'm not sure. Not sure about `.run`, `.apply`, and `.let`.
On a less snarky note, what you might want to consider is “simplified multiplatform” UI application, where you might have an internal DSL, maybe inspired by TornadoFX, with adapters to frameworks you want for now. I just don’t think anyone’s pulled off WORA to a sufficient level of success to warrant depending on them.
Ah okay, it sounds like you might be sort of new to programming in general? Either that, or you've been using Kotlin like you use another language you're familiar with, without learning how to do things "the Kotlin way". I'd highly recommend looking up some more Kotlin guides. For example, throughout my projects I've used all four `.run`, `.apply`, `.let`, `.also`. Same with extension functions, I use them fairly often, and `when` without an argument is useful as well. &gt; I think return type `Unit` is the same as no return type, but I'm not sure. Sort of! Everything in Kotlin has a return type, *including* the `throw` statement itself (returns `Nothing`). `Unit` is kinda like `void` if you know C/Java, it means nothing meaningful is returned. The more you learn about these things, the more you realize how amazing Kotlin is. None of them are essential to get the job done, but they're all very nice, improve readibility, etc. Check out the talks at the yearly KotlinConf as well, I always learn very cool things. :)
I'm not a senior engineer or anything but I do have a 4 yr degree and 5 yrs of work experience, but I'm mostly a JS and Java programmer and I use Kotlin for side projects. Have any articles focusing on .run, .apply, .let, and .also?
There is [this](https://kotlinlang.org/docs/reference/scope-functions.html) article from the official documentation which covers most scoping functions and when to use them.
My take on the Junior(I try everything even when I'm not sure of the answer) &gt;! What’s the difference between val and var? What about const and val? Which are mutable and immutable? val is immutable, while var is mutable. const should also be immutable... I'd hope since I always view it as short for constant. Mainly though, const has to be evaluated at compile time. I don't think const has too much relevence in kotlin What is companion object? a static object for a class, that can be called into without creating an instance of the class What is the lateinit modifier for? lateinit is for declaring a field will be initialized. You declare a field lateinit, and you can assume it will hold a value elsewhere in the code without it being nullable and without declaring a default value. Often used for autowired fields What are the access modifiers you know? What does each one do? public, internal, protected, private? besides those listed here I can only think of kotlin's closed by default being overwritten by an explicit open. Open allows extension of a class, and is often a big deal for things like Mockito as it can't easily mock a class without it being open(otherwise it's treated as final). public is open visiblity, private is closed visibility, internal is everything in the same module, protected is the class and classes that extend that class only. How do you declare a variable as volatile in Kotlin ? volatile is declared with an annotation, I believe. I almost always use val's or thread safe objects like atmoics. Which is the default modifier for a function: open, final? final What is the init block? the init block is run right after a constructor. Can be used to initialize some fields, or run a small calculation to determine a field. etc. What the Java equivalent of static in Kotlin? If you are integrating with Java code do you have to do anything specific? a companion object, or just object in general. Calling static java from kotlin you don't have to do anything special... that may not be the case from kotlin to java. What’s a data class? What about an object? A data class is a class automatically populated with a nice hash function(used for the equals when comparing it to other instances of the dataclass) and toString() method, ideal for holding data as they are equatable. An object is just statically callable as far as I know. Does you class compile if the package is wrong? Why? I believe yes? package seems more related to how other classes will access this class. What’s the difference between == and === ? the former is is value comparison, the latter is memory location comparison. What do we mean when we say Kotlin is a null safety language? An object's nullability is right in the type, if you are acting on a non-null object by type(doesn't end with ? or !) you can be sure that it is not null. If the value of null is passed to it there will be an NPE What types of constructors are there in Kotlin? normal constructors and private constructors? I'm not quite sure what the range of type constitutes here. What’s the type of arguments inside a constructor? Why do you think they are val unless explicitly set to var? You declare the types on the arguments inside a constructor. I was under the impression that unspecified argumetns inside a constructor were actually transitive, and did not persist after the constructor finished. What’s the equivalent of Java’s switch? What are the differences? the when statement. The when statement can also be run for expressions, and with determining what class something is. There's also some benefits with the idea of exhaustive when conditions. Can when statement in Kotlin be used without passing any argument ? yes What is the difference between a member function and extension function in Kotlin? A member function is declared inside the class block, while an extension function can be added to a class outside of the class, or even in another package. I don't believe extention functions can access private fields. Does Kotlin support Checked Exceptions like in Java? Don't know about Checked exceptions as a term, but you can catch specific excetions for actions, and extend Throwable/Extension to your heart. Does Kotlin support both Explicit conversion and Implicit conversions? Yes, you can be explicit with the as keyword, and if you're in say, an if block that checks if a variable `is` a specific class, the contract will make it so within the if block it is the checked class. What is Elvis Expression in Kotlin? I believe elivs is the ?: that's saying if the value on left is null, execute code on right, otherwise do nothing. What are primitive Data Types in kotlin? Ooofff.. uhh, Int, Double, Char, Byte, Short, Boolean... probably missed a few Can we pass a different number of arguments to the same Function in Kotlin? Yes, you can have defaulted values for the remaining arguments or a different set of types/named arguments for the funciton. What is the difference between Return Type Unit and Return Type Nothing in Kotlin? So Unit is the normal nothing being returned type we all thing of in casual programming, while execution of the program cannot continue after nothing, usually a bad day if you use it. What is keyword vararg in Kotlin used for? Variable number of arguments. I personally still see it as a list, but it functions differently. What is spread operator / *(sterik) in Kotlin? The wording on this are a bit confusing for me, but I believe this is talking about the idea of spreading a list/array out into a vararg. What are inline functions in Kotlin? Their compiled into their calling functions without actually being a function themself, basically when compiled it's inline with the calling function. Slightly more performant as it saves a function call. What is .. operator in Kotlin? What’s the advantage of using Ranges? .. is a range from the left number to the right number exclusive(I believe if you use `until` it's inclusive. Range objects have nice extensions, I think. How is !! different from ?. in unwrapping the nullable values? Is there any other way to unwrap nullable values safely? !! will result in NPE's if it is null, while ?. just calls the dot operator if it isn't null, and otherwise passes null along. Nullables can also be unwrapped with explicit or implicit casts to non-nullables. Implicits can be done with your own contacts or built in ones kotlin has, like if you've checked the type in a when block as not null. How does string interpolation work in Kotlin? I think this is talking about variables written inside strings. Basically "$my_var" with use the to_string() of my_var in the string, and if you do ${any code} it will use the to_string() of the return of the block. What’s the type of the following Array? val arr = arrayOf(1, 2, 3); Array&lt;Int&gt; I'd hope. With an IDE telling you the semicolon is pointless. Do you have a Ternary Conditional Operator in Kotlin ? How do you do it then? no ternary operator, but inline if else blocks exist and work well. In some cases you can also do the .takeIf(condition) call for some snazzy magic. What is the use of function extension ? To add useful functions to interfaces or classes you can't modify the code of. And a million other things. Does Kotlin allows you to have field variables in interfaces? yes, I believe What is Kotlin String Interpolation ? Kind of covered in the other string interpolation question, basically a way to insert variables into strings without slowly building up the string. What’s the difference between .run and .apply? I believe both run with 'this' being the calling object, but run returns the result of the block, while apply returns the calling object What’s is .let for? What’s the difference between ?.let and .let? I usually use .let to populate a class only if one of the variables I need isn't null. ?.let means within the block the value you called let on(which is the same as the it within the block) will not be null and you can act with it as such. Meanwhile just calling .let means you're already calling it on a non-nullable object(or about a to throw an npe on an ! object from java land), which usually means it could be rewritten nicely without the let confusing your colleagues. !&lt;
My bad for assuming! I've got a fever and thought you said you'd never heard of `===` at all. I don't recall which article I used, but it looks like Kotlin recently made [an official guide](https://kotlinlang.org/docs/reference/scope-functions.html). What I did though is I printed out a table to keep on my desk of all 5 methods (forgot to mention `when` as well), like [this one](https://cdn-images-1.medium.com/max/1600/1*UW1WkqmUnbJc1QEGzm59jg.png). And whenever I felt like something would be better with a smaller scope / less repetition, I'd look at the table and figure out which one to use. People have made flowchart versions as well. For instance, say you've got this common canvas JS code var ctx = c.getContext("2d"); ctx.moveTo(0, 0); ctx.lineTo(200, 100); ctx.stroke(); That's a lot of repeating the receiver `ctx`. So you'd look at the table, look at which ones replace the **receiver** (So, `ctx.run` `{}`, `ctx.apply {}`, `when (ctx) {}`), in order to replace the `ctx` references to `this`. with (ctx) { moveTo(0, 0) lineTo(200, 100) stroke() } // or ctx.run { moveTo(0, 0) lineTo(200, 100) stroke() } You could use `ctx.apply` here too, but it wouldn't make as much sense, since it *returns* the receiver. I prefer `with` in this case, since it carries the meaning of "with the context of this canvas context, do X Y Z". You just repeat this flowchart process for a few days/weeks and you'll nail it. The lack of scoping functions is honestly my biggest problem with JS.
Ah that's pretty awesome, makes the code a lot more clear. Definitely going to need that table to make sense of it all.
So, my experience with SonarQube is more in Java than Kotlin, but since that’s also the first language they started with, I don’t expect the Kotlin version to be as developed. The analyser is less powerful that the one of JetBrains. For example, JetBrains can do cross class analysis, while SonarQube can currently only do per file analysis. On the other hand, a lot of IntelliJ inspection are not run by default as they would be too time/power consuming. You have to launch them manually. Where SonarQube shines is in its dashboard and the ability you get of tracking, at a high level view, the evolution of the technical debt of your software. I would personally recommend combination of UpSource, which includes all JetBrains inspections, and SonarQube, used at CI time. Not everything has to be caught while you’re writing code. It becomes easily too distracting. 
We use sonar to enforce quality gates before merging a pr. I think it helps because it also explains why the best practices exist and gives you examples. If you are working with a big team on a big project this is really important. The smaller the team the less it matters though. Having a well configured IDE and taking the suggestions seriously might be enough in those cases. Keep in mind that it takes some work to keep sonar running in your ci environment and maintain it too. 
For a small project and/or team, I would say that IntelliJ and code reviews alone are good enough. It is easy for the lead/architect/most-senior-developer to set some code guidelines for everyone to follow. When working with freelancers or for a bigger team/project/enterprise where many developers from multiple teams are involved, I would say that a tool like SonarCube is mandatory when looking to have any sense of cohesive coding standards. I would go as far as to say that the more rules you can adequately automate using tools like sonar, findbugs, checkstyle, pmd, etc., the better it would be for the developers as well. It is much easier to work on multiple projects when you know that they will be structured in a similar fashion. Onboarding a new developer is also easier when he can basically learn the standards through the failing (local) builds and although it might be annoying at first, it is much better than reading some wiki/confluence manual and wasting people's time on code reviews for stylistic comments. 
Yes, and I think calling it a "named constructor" (like it's done in C++ [https://isocpp.org/wiki/faq/ctors#named-ctor-idiom](https://isocpp.org/wiki/faq/ctors#named-ctor-idiom)) instead of "static factory method" creates less confusion with the design patterns "abstract factory" and "factory method".
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [Replacing classes with modules\/files?](https://www.reddit.com/r/functionalprogramming/comments/b8w7rf/replacing_classes_with_modulesfiles/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Try declaring expected bindings/classes in your common module then declaring their actual implementation with typealiases in each UI module. Had this idea a minute ago but no idea if it actually works. 
You might be mistaken me for someone else. I've only written a small tutorial on Javalin and thought it would be interesting to share, other than that, I have no affinity with the project. If there's anything wrong with my post, let me know, and I can address it in the next one.
A few days ago, I posted an article on how to get started with Javalin here: https://www.reddit.com/r/Kotlin/comments/b81ach/an_updated_guide_on_getting_started_with_javalin This blogpost is a follow-up on how to do integration testing with Javalin
I've been trying it out with a web application I'm working on. The functions aren't pure, because they need to retrieve state from dbs and services. I'm modeling it a bit after Clojure a bit. Not sure if I like it, I'm still experimenting with it. 
I believe it's not possible to be completely "pure". &gt;practicality beats purity.
I would replace the `!!` with `?.` in the assertion. The assertion here is simple but if your assertions become more complex you can try the [Strikt](https://strikt.io) assertion library. It then becomes something like ``` expectThat(error).isNotNull() isNotNull() get { response.statusCode }.isEqualTo(301) } ``` You could also write a custom Strikt assertion that checks the statusCode and the code can look like ``` val (_, _, result) = "api/person/-1".httpGet().responseObject&lt;Person&gt;() expectThat(result).hasStatusCode(404) ``` Another thing: Junit assertions typically put the expected value as first argument and the actual value second. You flipped them which means that when your test fails the error message will tell you something wrong like `expected 200 but was 404` while you actually mean `expected 404 but was 200`
Thanks for reading my article, and thanks for the feedback. Do you think that assertEquals(error?.response?.statusCode, 404) vs assertEquals(error!!.response.statusCode, 404) is better? I'm not sure, since in the second example it's more clear that response always has a statusCode, while in option 1, everything can return a null. I like Strikt and AssertJ a lot, but my reason for not using it here is that I was already introducing a lot of technology, adding more to it for a oneliner might be overkill. My original code actually had AssertJ in it. Good point on the assertion sequence! I got too much used to the AssertJ syntax I guess, it's fixed now! Thanks for the feedback, much appreciated! 
Hmmm, yeah I forgot about the `?` that would be passed along the chain. In that case `!!` might be the simplest solution.
Nice guide, but why do you use nested route statements instead of just a single get? app.routes { path("api") { path("person") { path(":id") { get { ctx -&gt; personController.getPerson(ctx) } } } } } vs app.get("/api/person/:id", { ctx -&gt; personController.getPerson(ctx) }) 
&gt; app.get("/api/person/:id", { ctx -&gt; personController.getPerson(ctx) }) Yeah, that's a good question. In this case, it might be even better to replace it with something like: app.get("/api/person/:id", personController::getPerson) 
Yes. You can use pretty much any Java web framework with Kotlin. If you're looking for a quick and easy one, I suggest Spark.
&gt;Spark thanks! will check this out
Checkout Ktor. We are running a pretty huge website with Kotlin and Spring
Usually people follow the principle [Functional core, imperative shell](https://medium.com/@magnusjt/functional-core-imperative-shell-in-javascript-29bef2353ac2) &amp;#x200B; This way alot of your code can be made pure und reusable, while the smaller part that is communicating with the outside world is imperative
thanks! will check this out
You could technically do it in the creation if you wanted, but that would require keeping a member variable inside the viewholder that would get sent to the listener when the view is clicked. Registering the click listener in the bind method prevents you from having to do this and ensures whenever a view is recycled and rebound that the listener is receiving events for the right list item
Plus, Spring has added official Kotlin support and the official tutorials are pretty good
I've used Javalin, SparkJava, and Vert.x so far with Kotlin. In my opinion, I'd rate Vert.x the best with Javalin second and Spark last. Vert.x has great documentation for all the languages it supports including Kotlin. It has like everything anyone could want, is fast, is easy to use, it's backed by Eclipse, it's just great. Javalin is, imo, a little better than SparkJava. That's probably because it was created by a contributor to SparkJava. It's less mature than Spark, but I would use it if Vert.x wasn't available.
Do you mean kotlin and ktor?
Ktor is excellent if you are using kotlin. Built for and with kotlin
Vert.x looks interesting. I'm fed up with PHP. What dependencies do you include here for an average web app? [https://start.vertx.io/](https://start.vertx.io/)
Web and your database (mongo, redis, postgres, etc) client is probably all you need. 
I'm using Pippo and Koin to make a web site and it's been pretty great so far. Much less Faff than Spring or some other Java web frameworks.
Try vaadin, and spring I wanna help out bc it was hard for me to start with Vaadin and kotlin. Go to start.spring.io 1. Click on either Gradle or maven(I prefer Gradle but they essentially are the same.) 2. Check kotlin, instead of java. 3. Leave the version number. 4. Change the metadata to what you want. 5. In the dependencies text field, write Vaadin There will be a suggestion just click on it. 6. Click Generate Project. It will download a zip file with your project in it. 7. Extract the files somewhere. 8. Open the folder with Intellij 9. Navigate to src/main/kotlin/name/of/your/project/ 10. Create a package called views 11. Create a new kotlin file called MainView.kt 12. Type the following in that file: @Route class MainView : VerticalLayout() { private fun initialize () { val label = Label("Hello World") add(label) } init { initialize () } } Then run the file that should have the word Application in it, it will run the project. Now open a browser, and navigate to localhost:8080 you should see a webpage that has some text that says "Hello World" on it. If you want more help with continuing with Vaadin go to their website at Vaddin.com. Hope that helps :)
Probably core, web and any database package you want. I can also heavily recommend the extra coroutinepackage so you can extend from CoroutineVerticle instead of AbstractVerticle.
I use Kotlin with Spring Boot a lot. Lately I've been playing with building some stuff to simplify using mustache templates but still having some decent functionality. This is my latest experimental project, specifically [the webui package](https://github.com/irotsoma/cloudbackenc-filecontroller/tree/master/src/main/kotlin/com/irotsoma/cloudbackenc/filecontroller/webui). I'm working on creating some custom annotations for form validation at the moment. The project goes back to Kotlin beta so it's got a mix of old and new stuff, but I'm trying to get it all up to date here and there and maybe one day actually finish it as a working product. [Here's a link to the parent git repo](https://github.com/irotsoma/cloudbackenc-parent) that has all of the sub-modules if you want to look at it. The filecontroller relies on the centralcontroller being up somewhere. But really it doesn't do much useful at the moment anyway.
It would be awesome, if there were a good multiplatform Kotlin/Common GUI library, because many cross platform GUI libraries have awkward bridging/interop to be completed with platform intrinsic options, while Kotlin has really great interop features and also is a modern language with great tooling support.
**kotlin**\+**springboot**\+**handlebars.java**(for non-SPA apps highly recommended)+**hibernate**\+**querydsl** is a great replacement for symfony2+ for building websites. But php+symfony is a good choice for building websites though. &amp;#x200B;
Thanks!
Thanks!
Thanks!
Thanks!
Thanks!
Sonar is slow, massive, hard to understand and mostly useless. We used it in a Java project and ultimately turned it off because it was more of a hassle than it was worth and so slow that no one cared about the result. Personally I think that the compiler and ide already do a fantastic job at catching most of the bugs. For the few cases where it doesnt you can always use detekt with the performance and potential bugs rules enabled. Also code style is not something that a static analyzer should be used for. Your team is either competent enough to just use the built in intellij formatter or should just auto format everything via a tool on checking/commit.
Np
thanks!
You can never completely avoid side effects, yes, but you can architect your application in such a way that the only time you have concrete side-effects is in a very small amount of code in your application's entry/exit point. Its an entirely practical architecture and very useful as it does a great job of decoupling your code, particularly in that it decouples your application logic from any concrete side effects. This is the technique by which modern Haskell/Purescript applications are built, and the one I am personally using in a mobile app I am building with Purescript.
I know you asked specifically about spring boot , i dont believe there is anything for swagger speficially with spring boot and kotlin. With that being said spring fox should work , i also agree i hate spring fox with all of the annotations. Spring rest docs may provide better support for kotlin with boot as its part of the spring eco system. Also I know you said this was for work so ktor probably isnt an option , but there is a ktor project on github called ktor-swagger which works fairly well, ive used it in a small proof of concept project.
We're using spring fox with kotlin + spring (3.0 b/c webflux) and we're enjoying it.
Poor 1.7. Forever alone.
Koin is an awesome DI framework.
If you want a small fatjar that starts quick, runs fast and is very testable, try http4k + khtml
No, it's just for allowing newer target versions. But Kotlin still runs on any newer java version. Details here : [https://youtrack.jetbrains.com/issue/KT-26240](https://youtrack.jetbrains.com/issue/KT-26240)
Why do you use both ktor and spring? My understanding was ktor and spring are both serverside frameworks.
Arent both ktor and spring serverside frameworks? Why use both?
I don't understand why we need a whole new kotlin-based framework when there were already tons of java ones. I also don't get why you'd base it on *netty* of all things (at least by default)
Simple answer is No. And for me this is one of the reason I stay away from jolting altogether. You are stuck with using IntelliJ or IntelliJ is becoming the Microsoft of 1995 with csharp. Kotlin without the java ecosystem is useless., at least the last time I tried.so I don't understand why IntelliJ is not porting it to other ide.
To take advantage of coroutines
You don't need a new framework for that. Additions to existing ones work fine.
I assume because that is part of the business model. Why would a IDE creator invent a programming language and then port it to another IDE?
At least they are maintaining the Eclipse plugin a little.
The execution model of coroutines is different enough that it does make sense to start from scratch, if you want to reap the perf gains.
If non-spring is an option, http4k also supports automatic OpenAPI documentation generation via the contracts module. Albeit, it does use a slightly different approach - there are no annotations - everything is done programatically via the DSL, including automatic JSON schema generation directly from Kotlin DTO objects (in concert with Jackson/Gson/Moshi) - which means that the models cannot become out-of-sync with the docs.
I'm using Swagger/springfox in a Kotlin Spring Boot project and I admit the annotations are very noisy. I like to format primary constructors on multiple lines so it becomes more manageable. ``` @Relation(collectionRelation = "applications") data class ApplicationDto( @ApiModelProperty(example = "7445d942-c2e8-499d-a5a5-8fed3695303b") @JsonProperty(value = "id") var applicationId: String = "", @ApiModelProperty(example = "Example App") var name: String = "", @ApiModelProperty(example = "Example app description") var description: String = "", @ApiModelProperty(example = "alphanumeric_32") var licenseKeyType: String = "", var createdAt: Instant = Instant.now(), var updatedAt: Instant = Instant.now() ) : RepresentationModel&lt;ApplicationDto&gt;() { // rest of the class } ```
Not really? It's implemented as a state machine. It would be really easy to make, say, undertow support coroutines
[https://github.com/hendisantika/swagger-kotlin](https://github.com/hendisantika/swagger-kotlin) Google to the rescue :-). I've done spring boot 2 with kotlin and IMHO would never want to do it without it again. I have never really used swagger but it seems popular for people that like to automatically generate API documentation. IMHO there's an opportunity for dokka + ktor to shake up the ecosystem a bit. I love how you can integrate markdown and code samples in dokka; probably not that hard to make it ktor aware. Wouldn't surprise me if somebody already is working on that.
I feeling the same considering that there are already Spring, Vertx, Javalin to name a few. Why the dislike regarding Netty? (Just curios, I have no opinion in this Field)
I wrote this on netty in web a while back: https://javachannel.org/posts/netty-is-not-a-web-framework/
Unfortunately Spring and Swagger are mandated by architecture and governance boards. I am a fan of KTOR though. I’ve only used it for small personal projects but it feels fresh and lightweight.
Is there a tl;dw?
This is more or less what our code is liking like as well. It’s one of those things I expect from Java but it takes away from the elegance of Kotlin. But seems like this is the only route for those of use stuck using SpringFox and Spring Boot with Kotlin. 
Are you compiling using IntelliJ or with Gradle? Did you enable the Gradle deamon? What version is specified in your gradle wrapper? What version of IntelliJ are you using and what version of the Kotlin plugin do you have? Are you using the 64bit verion of IntelliJ? What are your VM options for IntelliJ?
Yup, for those two the difference is what you want it to be. They both replace `this` with `ctx`. The main difference I can think of is when `ctx` is nullable. You can do `ctx?.run {}`, only running code when the receiver is not null, but you can't do that with `with`. I find that I mainly use `with` when it comes to graphics/drawing code.
tldw: It doesn't, at not least to any point you should worry about
I import the project from existing source, use the gradle wrapper that comes with the project (latest gradle 5.3.1) and then let intellij figure out the rest. Whenever I touch the build file it re-imports it. It's intellij 2019.1 and definitely 64 bit. Everything is updated regularly, including kotlin. There definitely is a gradle daemon running.
Also on the same subject from KC2017: [https://www.youtube.com/watch?v=ExkNNsDn6Vg](https://www.youtube.com/watch?v=ExkNNsDn6Vg) &amp;#x200B;
&gt;architecture and governance board Please say you'll be quitting soon to go to somewhere that has a bit more trust in their devs...
So that seems to just be a sample of using spring fox with kotlin , which as a java library will work , and the op seems to be using but is looking for a more intuitive kotlin approach
What would the idiomatic Kotlin solution be? Using KDoc comments for generating the swagger documentation?
Just a quick question, why does Swift matter when it comes to Kotlin? I’m a Swift developer but never used Kotlin (only iOS developer ATM) and I curious. Are those two languages connected in some ways?
I think most are considering multiplatform Kotlin, in which case Kotlin replaces (some) Swift code. This is where JetBrains could be better at communicating what's actually being done. Some people still immediately jump into the "oh my god it's write once run anywhere" but the reality is much more nuanced. I could see where an iOS developer might actually wonder, "if I switch to Kotlin, I can write for \_both\_ Android and iOS" but the reality is a wee bit more complicated at the moment.
So I am going to suggest a shift of thinking as to where the source of truth is for swagger, servers and clients. &amp;#x200B; I am going to suggest you start from the swagger spec. And generate your http layer and your clients from that, rather than building your server and trying to get swagger docs out of it. For me, it is closely related to the "Dependency Inversion Principal", let me explain: \- Your api or interface is some set of routes over HTTP. \- A client of this API wants to depend on some definition of this HTTP interface. \- An implementation (your server) of this API should depend on the same interface, and implement it. \- In this case, the definition of that Interface is the Swagger spec. \- Thus, define the swagger spec first, and generate both clients and servers from it. \- Swagger lets us be language agnostic in how we define our APIs, and with code generation tools we get our language specific structures that we can then hook into. \- If we trust the code generation, then we know our clients and our servers are in sync. &amp;#x200B; To illustrate, this is how our team works. We maintain a server with a restful API, and we also have a frontend SPA that depends on it. This is our workflow: \- We have a new feature. It requires some change to the data that moves between our frontend and backend. \- We get together and think about what the structure of that data is going to be to satisfy the frontend requirement. \- The place we have this discussion is around our swagger spec. We define the routes and object definitions and error codes etc. Frontend typescript/javascript devs can talk easily to backend python devs. (Yes I know this is a kotlin sub, I work in python but choose kotlin :D) \- Once we have agreed to the changes to swagger, it is committed and our code generation tools kick in. \* We get a nice Typescript client for the frontend. It is typescript so we can mock the client in a nice type safe way :D \* We get new expected routes and models generated and wired into our python flask app. \- Now independent devs can start writing unit tests and implementing their logic with mocks of the client, and writing tests to make sure that the backend implements the required controllers for each of the routes. &amp;#x200B; And, you have no ugly annotations in any of your server code just so you can generate swagger docs. &amp;#x200B; I am sure you can find the generator for your needs. Here are the samples: [https://github.com/swagger-api/swagger-codegen/tree/master/samples/server/petstore](https://github.com/swagger-api/swagger-codegen/tree/master/samples/server/petstore)
You might be surprised but my philosophy is always to use a “native” language of that OS because apps will always run the best using a native language, language which was designed for that OS. C#/C++ for Windows SWIFT for iOS &amp; macOS (if it’s a simple application)
Oh, I'm not surprised at all, picking the "native stack" is a great place to start. But I've personally witnessed companies having "silos" of teams that don't really communicate details with each other. You have a web team, an Android team, an iOS team, desktop team, etc., each with their own stack. And then subtle stuff just breaks and causes a bunch of stupid meetings. Thus, the multiplatform Kotlin code could be used to be a common source of logic for all platforms. Which then changes how the companies themselves organize and communicate. When you get to a large enough size, it matters. 
Eh, K/N is nice and all but I wouldn't use it for a strictly iOS/macOS project. Swift is close enough to kotlin that you're better off just writing it in swift. Plus, K/N's true benefit is cross-platform.
&gt; Kotlin without the java ecosystem is useless Not really. When they finish Kotlin Native, it will be a viable solution for multiplatform. 
Soulds like something is off on your system. I am working on my Kotlin project, with IntelliJ, and am not seeing those long compilation times (only a clean build is indeed quite slow). My project is currently about 18k lines of kotlin and building it after changing a file takes about 3-6 seconds. Thanks to some help of a kind soul I can do the same in a command line gradle build script. The gradle daemon is a must though: rebuilding from scratch takes about four to five times as long. (IntelliJ itself seems to use some built-in build demon, not sure how it works, but it does incremental compiles just fine on my system) system: ryzen 2700x, ssd, linux, using IntelliJ with its bundled JDK.
Can you paste your IntelliJ VM options? Tweaking this could have a dramatic impact on performance (especially for large projects)
Wouldn't this be for that multiplatform use case though? AFAIK CLion isn't really for macOS/iOS platform development - AppCode is better for that purpose. I suspect this is so macOS/iOS users can \_debug\_ Kotlin/Native code produced as frameworks, and not strictly dynamic libraries.
You have to add it after creating it with `apply` probably.
Total noob here, can you elaborate?
To make it simple, just: ``` val map = mapOf( "alwaysPresentField1" to "1", "alwaysPresentField2" to "2" ) if (nullableField != null) { map + (nullableField to "3") } ```
For people willing and having resources to write and maintain two separate applications it's definitely the best choice, but judging from popularity of various cross-platform tools there's a demand for such things. Kotlin Native is rather alternative to tools like React Native etc than to writing fully native apps for each platform. And by design it's relatively close to native even on IOS so can be tempting for someone who wouldn't try React Native but still feels the need of at least some code sharing 
I use VSCode with intellij keymap plugin.
 val value = with (object) { (aaa ?: bbb).xxx }
I created a `optionalMapOf` for this purpose. It looks like this: ```kotlin fun &lt;K : Any, V : Any&gt; optionalMapOf(vararg pairs: Pair&lt;K?, V?&gt;): Map&lt;K, V&gt; { @Suppress("unchecked_cast") return pairs.filter { it.first != null &amp;&amp; it.second != null }.toMap() as Map&lt;K, V&gt; ``` The cast is necessary as the compiler can't infer that the map entries will be non-null, but we know we can guarantee that with the filter.
``` sequenceOf("a" to "1", "b" to "2", if (c != null) (c.toString() to "3") else null) .filterNotNull() .toMap() ```
In my (anecdotal) experience job-hunting in my state, I've seen Kotlin come up quite a bit more often than Scala
Thanks, it's still a bit verbose.
Why is the same object nullable in \`object?.aaa\` and not nullable in \`object.bbb\`? You could write \`object.run { aaa ?: bbb }.xxx\`
Kotlin has a great potential to become the de facto big data language on the JVM (and possibly outside too).
If this boilerplate is verbose for your use case, I would probably suggest the unshortened way because this eliminates duplication of the object and that's evidently not saving too much length.
I forgot the second ? mark. Thanks, this is what I'm looking for.
3-6 seconds is what I call slow. This should be well under a second. I've been fiddling with intellij vm settings in the past and as far as I can see it has gotten a lot better over the years in using off heap memory (memory mapped files) vs actual heap + GC. It doesn't look like it is running out of memory or garbage collecting. I also don't see a big difference between gradle compile performance and intellij performance. It's just slow when doing it incrementally and indeed very slow when doing a full build (up to a minute). I have a mixed java kotlin project. The Java part is better but Eclipse would be running circles around that for incremental compilation. We're talking milliseconds not seconds. That's the bit I miss from Eclipse. I've never seen Intellij be anywhere near that fast on anyone's machines. 
`# custom IntelliJ IDEA VM options` `-Xms2048m` `-Xmx2048m` `-XX:NewRatio=1` `-XX:ReservedCodeCacheSize=240m` `-XX:+UseCompressedOops` `-Dfile.encoding=UTF-8` `-XX:+UseConcMarkSweepGC` `-XX:SoftRefLRUPolicyMSPerMB=50` `-ea` `-Dsun.io.useCanonCaches=false` `-Djava.net.preferIPv4Stack=true` `-XX:+HeapDumpOnOutOfMemoryError` `-XX:-OmitStackTraceInFastThrow` `-Xverify:none` `-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log` `-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof` &amp;#x200B; I bumbed the memory to 2G at some point. It doesn't seem to come close to using all that. 16GB quad core mac book pro with ssd from 2017.
How many of those are outside of Android development, though?
Okay, I thought every compile on your system took close to a minute. But yes, compiling java code is MUCH faster (in IntelliJ itself as well) and there are some other places that a couple of seconds delay is noticable or perhaps even getting annoying: expanding variables during debugging, and expanding the TODO search list (no idea why that is so excruciatingly slow. I often just use ripgrep to search for todos instead.)
Hey, desertfish\_, just a quick heads-up: **noticable** is actually spelled **noticeable**. You can remember it by **remember the middle e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
I recommend removing the `-ea` line so that it stops checking assertions. I also recommend removing any IntelliJ plugins that you don't use (eg. Scala plugin)
I use Kotlin for backend / server-side development every day at work. I also used Kotlin on the backend at my previous Job. Jetbrains said that Kotlin adoption is a 50/50 split between Android and backend development. Kotlin will start to be used in even more areas once Kotlin Native comes out of beta.
Where I live probably still more than Scala.
In London at least, we're seeing a lot of take-up of Kotlin to replace both Java and Scala for new projects. TBH, I think that a lot of devs taking up Scala over the last 10 years were simply looking for a "better Java", as opposed to the pure-functional types. This seems to be now inverting, so loads of backend projects are also now being started as Kotlin-first . Due to the seamless interop and reputation of being easy to learn, Kotlin seems to be fairly well trusted as a safe pair of hands - even in Java-shops.
Done but made no noticable difference. I think most of those settings are what Idea does by default.
Hey, I am looking into executing a kotlin function from Quartz. Do I write a Java class that Quartz manages that executes the kotlin function or can I use quartz direct with kotlin?
Why dont you use mutableMapOf ?
As I said, I know how to do it with a mutable map, just wasn't sure if there was an easier way.
You can do it with an immutable map by using listOfNotNull and a safe let. ``` val nullableField : String? = null val map2 = listOfNotNull( "alwaysPresentField1" to "1", "alwaysPresentField2" to "2", nullableField?.let { it to "3" } ).toMap() ```
I was thinking about this earlier today and this might be a little cleaner. Instead of creating extension functions with toText you can create top-level factory functions called `res` ``` fun res(str: String): Text { return Text.TextString(str) } fun res(i: Int): Text { return Text.TextRes(i) } class SomeClassWithTexts(p1: Text, p2: Text) { var text1 = p1.asText() var text2 = p2.asText() } ``` Then you have type safety and a cleaner API for your library users: ``` val a = SomeClassWithTexts(res("test1"), res(1)) val b = SomeClassWithTexts(res(1), res(2)) val c = SomeClassWithTexts(res("test"), res("test")) ```
It \_does\_ seem like a flaw to me, but doing such a thing would be incredibly unidiomatic. The vast majority of values can be initialized where they are declared (either as primary constructor values, or normal values). Otherwise, you'll usually want to use \`lateinit var\` or \`lazy\`. I can't think of a situation where this would be useful.
It's double edged sword. &amp;#x200B; In Kotlin you can write: &amp;#x200B; class Test { val x = 1 val y = 2\*x } &amp;#x200B; In Swift: &amp;#x200B; class Test { let x = 1 let y = 2 \* x } will not compile (you will need to make y lazy) 
Very few of the ones I saw, if any, mentioned Android. Most of the "application developer" jobs I saw involved JVM back-end with JavaScript front-end, presumably for web apps rather than native Android or iOS.
This is documented here: [https://kotlinlang.org/docs/reference/null-safety.html](https://kotlinlang.org/docs/reference/null-safety.html) &gt; An uninitialised this available in a constructor is passed and used somewhere ("leaking this"); There would be 2 solutions to this: - prevent calls to instance methods in constructors and prevent passing `this` to other functions in contructors to avoid leaking the uninitialised `this` object - allow these calls, but only when the compiler can prove that it is safe The first solution would be pretty restrictive and cause a lot more trouble than is solved. The second solution would probably be pretty hard to implement (and impossible in the general case), lead to longer compilation times and to strange compilation errors after small changes because the compiler isn't able to prove the safety of the calls anymore. Some perfectly safe code would probably not be compilable because the compiler wouldn't be smart enough. Plus there might be interoperability issues with java. Having limited null safety in the constructor is a pragmatic solution, and causes little problems in the real world.
Interestingly, if you make \`x\` a \`lateinit var\` instead, you at least get a proper runtime crash instead of a null (which in this case does not crash)
Completely agree on Java interop and ease of use as a powerful combination. Kotlin having functional elements without extreme functional programming paradigms strikes perfect balance.
It's funny to think about what would happen if you wrote a recursive inline method. My guess would be that the compiler wouldn't allow it 😀 More seriously, if you have a method that's called deep inside nested looping, making it inline will save you the added computation of making all those calls as actual method calls. Also if you want to use reified generics then inline is the only way to go. It's a classic trade off between storage space and computation, your binaries will be larger but more performant vs the opposite where your binaries would be more compact at the cost of a little more computation being used. 
The function `fun parseNumber(number: String): ParsableNumber` in the example actually doesn't parse anything. So if you parse an invalid number, it won't blow up in that function, but rather somewhere later, when `parsed` property is read.
It's a great pattern! I've used in other projects before. There's one pattern which you can use to cut down boilerplate: Send a closure to the actor, which acts on the actor state, and which is evaluated inside the actor. Thereby you can move the logic inside the public functions and reduce the amount of boilerplate message types to write. E.g. something like this (will certainly not compile yet): ``` suspend fun deposit(amount: Double) { executeInActor { state -&gt; if (message.amount &lt; 0) { throw Exceptionally(Exception("Cannot deposit negative amount")) state.balance += amount } } } data class ActorMsg&lt;T&gt;(val deferred: CompletableDeferred&lt;T&gt;, val action: (ActorState) -&gt; T) suspend fun executeInActor&lt;T&gt;(block: (ActorState) -&gt; T) { val deferred = CompletableDeferred&lt;T&gt;() val msg = ActorMsg(deferred, block) deferred.await() } // And inside the actor when (message) { is ActorMsg -&gt; { try { message.deferred.complete(message.action(state)) } catch (e: Exception) { message.deferred.completeExceptionally(e) } } } ```
it saddens me you didn't choose to rename your project like we last discussed
I did explore the options, but on balance Kweb seemed like the best of those I'd considered. Some people have told me they like it, particularly when I tell them it's pronounced like "queue-web", as a single word. Also good pun opportunities, "I'm building a kwebserver for my kwebsite..."
Ah awesome! Dig it. Will be using this! Thanks.
I think the main use cases for inline classes is examples like unsigned int or an array start with index 1 instead of zero. Cases that you want new (contradicting) semantics for primitive types without performance overhead.
Yeah that’s true, the naming is bad, I will adjust that 
Hey thanks for pointing it out, this should have been mentioned at least, I will add it 
Been using Kotlon on the B/E since 2016. Now can't imagine going back to java 🙃
I do a lot of backend work with Kotlin. IMHO it's very easy for Java projects to transition to using it and it works well with e.g. the Spring eco system. These days, I'd be very reluctant to take Java projects unless I was allowed to bring in Kotlin. It's still new enough that a lot of people simply don't know it. I think in a few years there will be a lot of Kotlin backend gigs that are about using stuff that was built for kotlin from the ground up. E.g. Ktor is looking very solid and co-routines are a game changer for non blocking server side stuff. Anything Java on this front is just super tedious and ugly and you can easily adapt it to co-routines and fix it with kotlin. Also, Kotlin is becoming a full stack language with native, wasm, and kotlin-js opening new avenues beyond the Android/JVM space. IMHO this will take some more time to mature. &amp;#x200B; &amp;#x200B;
I've used inline classes mainly to keep track of units. When working with time, it's very useful to know if I'm dealing with seconds or milliseconds. With inline classes, I can simply make them different types.
Reducing namespace pollution using inline classes is quite clever.
thanks!
Yes it seems Swift isn't perfect either...
We might as well go back to null guards if we're having to do that.
Gonna slightly tweak this to print out x.length to grab a property of a null, and force the NPE. If you toss an Elvis operator in pr(), the compiler will outright ignore it ('not neccessary', left side is always not-null... sure) and still give you the NPE. However, if you use a let block, it'll recognize the null and run normally. NPE: println(this.x?.length) ?: println("Safe!") No NPE: this.x?.let{ println(it.length) } Now thinking about it, chances are that lambdas do their own null check independent from the class definition.
Just to clarify a bit of the confusion in this thread, [the signature of prinln](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html) is `println(message: Any?)` so even if `x` was a `String?` this code should not fail, and is why `null` is printed. Changing the code slightly to this class Main { private final var x:String constructor() { pr() x = "blah" } fun pr() { println(this.x) } fun nonNullPrintln(message: Any) { println(message) } } public fun main() { Main() } at least gives the expected runtime error of Exception in thread "main" java.lang.IllegalArgumentException: Parameter specified as non-null is null: method Main.nonNullPrintln, parameter message at Main.nonNullPrintln (File.kt:-1) at Main.pr (File.kt:11) at Main.&amp;amp;lt;init&amp;amp;gt; (File.kt:6) at FileKt.main (File.kt:21) at FileKt.main (File.kt:-1) https://pl.kotl.in/B1rxQU8YE
That's a hell of a load of hassle to just print out a value; it's not much of an improvement over Java null guards.
Yea; so if you want comprehensive prevention of null naughtiness you end up with Java null guards by another name.
No, you just avoid calling instance methods in constructors, or call them after proper initialization of the this object.
While I'm interested in trying this out in my own system's code once they get inline classes out of experimental mode, the name-mangling really concerns me because it makes this code uncallable from Java. One of Kotlin's big selling points has been how it can be dropped into Java code without any difficulties, yet now it looks like they're slowly doing away with that. Maybe the design team decided that they've got enough buy-in with the language for it to stand more on its own, but I fear that it's going to make more conservative Java shops even more reluctant to adopt the language in the future.
Sure that makes sense; however my ultimate point is that Kotlin doesn't prevent code at compile-time which it should prevent, which is disappointing.
It's also useful for bastardized JVM implementations that limit the number of methods in a compilation unit.
You seem to be avoiding the top-voted comment. You say it "should" do something but there are perfectly good reasons it does not. That's not a mistake or silly oversight. Things aren't as black and white as you seem to imagine them to be.
Sorry I misread the post. I thought it was talking about inline methods not inline classes. My bad.
In addition the swift example isn't really related to null safety, it is due to the fact that swift has decided to not allow invocation of methods from constructors until all properties have been initialized. This can be good and bad, as all decisions in programming languages are, it's about tradeoffs.
Exactly. This conversation comes up all the time. Kotlin *should* have a ternary operator, Kotlin *should* use `switch` rather than `when`, Kotlin *should* have static methods, etc etc. Most languages aren't made by pure accident, they're made with careful consideration of various trade-offs. If you think something is a mistake and *should* be a certain way, odds are you can find pages and pages of designers deliberating on that very feature.
Personally I prefer either 'null safety' to be absolutely what it says on the tin or there be no 'null safety' at all because I don't like the extra nuanced reasoning required; not that I am wont to call instance methods before the object's state is initialised. However I concede that this might not (at least yet) lead to many problems in practice.
`MutableCollection` is a Kotlin *interface*. Kotlin adds additional interfaces to many of the JVM classes. The `is` operator works for base interfaces as well as base classes. I suppose you would call this built into the language since there's no mechanism for adding new interfaces to already created classes in normal Kotlin. 
[ArrayList](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/index.html) implements [MutableList](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/index.html) which inherits from [MutableCollection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-collection/index.html). There's [a nice table in the "Mapped Types" section of the Java Interop docs](https://kotlinlang.org/docs/reference/java-interop.html#mapped-types). You can also use [javaType](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/java-type.html) or [javaObjectType](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/java-object-type.html) to reflect on Kotlin types to see what they are in Java. 
Is there an iterator in the standard library to iterate over multiple list parallelly? For example instead of doing: ```kotlin for ((i, v1) in list1.withIndex()) { val v2 = list2[i] } ``` You would do that: ```kotlin for ((v1, v2) in ParallelIterator(list1, list2)) { ... } ``` Also what about the performance of using Pair in Iterator? Is it optimized by the compiler?
Seems you're looking for [zip](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/zip.html) but implemented on iterators. Not sure it exists but that may be a good starting point.
This is a trick we (Kotlin) employ to make the collection hierarchy nicer. The actual ArrayList in the JDK does not extend MutableCollection, and there is no MutableCollection.class file in the Kotlin runtime library. Yet Kotlin behaves as if it was an actual supertype, both at runtime and compile time. We hand-coded such "extension interfaces" for multiple core classes of the JDK, but users can't add their own (it seems to be too tricky to implement in the general case). We also changed names and type signatures of some methods, had to hand-code that as well. I described these tricks in some of my talks, but can't locate the videos right now, sorry (typing from my phone).
If you manage to find those talks or know where I could find them I'd be interested in watching/listening to them.
Kotlin shadows a lot of the internal JDK classes to have nicer hierarchy and share common extension functions.
Some info is available here: https://kotlinlang.org/docs/reference/java-interop.html#mapped-types These talks has some relevant info: https://youtu.be/I-YH0jEAq_A https://youtu.be/2IhT8HACc2E 
Just read through the issue in the docs and the orginal ticket that implemented this fix. It's an implementation detail that in all likelyhood you don't need to worry about (unless you do). &amp;#x200B; The original ticket is here including the patch... [https://github.com/Kotlin/kotlinx.coroutines/issues/704](https://github.com/Kotlin/kotlinx.coroutines/issues/704) &amp;#x200B; basically their original implementation would accidentally blow up the stack in a non-deterministic manner under some circumstances. It looks like they considered one alternate implementation to fix the issue that involved unrolling the stack, and then for whatever reason settled on the current implementation that limits nested coroutines to a single thread and handles the concurrency using a traditional event loop in the case of nesting. &amp;#x200B; I didn't design the fix, so I can't speak to it more than what I've said and I don't even guarantee that I've got the whole picture, but it seems like a reasonable solution to the problem they were experiencing.
I'm not seeing this on Indeed.co.uk. Non-Android Kotlin jobs, by title, haven't yet reached double figures.
I've had to write essentially this in at least half a dozen languages now, and this is the most elegant I've ever seen it. In Java, it's a mess of CompletableFuture-Supplier, thrice-nested generics. In JavaScript... let's be honest, no one cares; if a remote server can't handle 1000 simultaneous requests, that's not your problem. :D But in Kotlin, you get these 8, simple, understandable lines, extended onto the collections you're already using. Just brilliant.
Probably needs try/catch block to properly release semaphore in case of exceptions? 
I don't think so, actually. If there's an exception, it will bubble up and cancel everything else that was spawned because it all shares the same coroutine scope. You're right that the semaphore will be in a bad state after the exception, but it will not be reachable and GCed shortly, so no need to worry about it. I actually instinctively wrote the try catch at first, then thought on it a bit.
This isn't a great approach, you're using a blocking call (Semaphore.acquire) inside a coroutine. &amp;#x200B;
Oh wow, good catch! Does the Kotlin standard library have a non-blocking semaphore?
No, just a Mutex unless something has changed. Here's an ugly approach using Channels: ```kotlin suspend fun &lt;T, R&gt; Iterable&lt;T&gt;.mapAsync( context: CoroutineContext, concurrency: Int, transform: suspend (T) -&gt; R ): List&lt;R&gt; = coroutineScope { val deferredList = this@mapAsync.map { CompletableDeferred&lt;R&gt;() } val channel = produce&lt;Pair&lt;T, CompletableDeferred&lt;R&gt;&gt;&gt;(context, Channel.UNLIMITED) { this@mapAsync.forEachIndexed { i, t -&gt; channel.send(t to deferredList[i]) } } for (i in 0 until concurrency) { launch { for ((t, d) in channel) { d.complete(transform(t)) } } } deferredList.map { it.await() } } ```
I could be wrong as my experience is limited, but from what I can tell, there's no real difference besides how they're configured. It could be argued that one is now expressive than the other, but it's so nothing major.
Sorry for error, I'm on the phone but if I remember embedded server clear and recompile modules for you so you don't need restart server if you change some of your modules. 
Another question: Is it better to use the built in servers or something like Nginx?
I’d think unless you had a specific reason to, the built in servers would be better to use, less you have to worry about and more for Ktor to handle.
How about performance? Wouldn't a purpose built server (especially one written in C) be faster?
&gt;(it seems to be too tricky to implement in the general case). What are the complexities in this context?
Isn’t Apache written in C?
No one knows. Neat.
Ktor gives you the option of several underlying HTTP engines, of which I've used Jetty and Netty. Netty is supposed to be faster, but I ran into bugs with it that I only discovered by switching to Jetty and discovering that it now worked (several days down the drain in the process :/ ).
What bugs did you run into? 
I don't really remember to be honest, but I had a bear of a time trying to track it down. In the end I tried switching to Jetty out of desperation and it just worked. I'd already squandered a lot of time on it so I didn't give it any further thought.
Look when you writing small engine for yourself this engine can be faster but with enlarge your engine will lost some performance. Why? Programmers of server engine use many tricks to optimization engine for you. "You never write something as good as people which work on some projects several years"
Making a type pretend to be what it is not is hard. You need to fake all the dynamic checks, virtual tables and override signatures, etc
Are you intending to align with [kotlinx.serialization](https://github.com/Kotlin/kotlinx.serialization)? In the general case, I would advise doing so - this is the emerging standard for Kotlin serialization which spans serialization formats (JSON, CBOR, and Protobuf first supported) and is designed to work with multi-platform. &amp;#x200B;
If your issue is that you aren't finding Kotlin examples, you could search for Java examples instead, assuming you're using an environment that allows for inter-op. There should be plenty of them.
Do you want to use protobuf to transmit a JSON string? The use of protobuf is not sending large strings rather very compact data. Create a protocol that represents the JSON and plug in the values. JSON already has a object based structure that you can use for that. If the JSON itself contains large string values that can't be or don't make sense to extract into a fixed defined data structure, I think you can use a byte steam to send it.
I'm using JSON to serialize a string object and store it in realm db in my android app. So I wanted to use protobuf so that the object that is created is much smaller in size. 
I'm trying to use protobuf that is available in kotlin to for data serialization
Protobuf does not compress strings. It's made for data compression on non string data. Eg you can use dynamic sized integer or floating points. If you want a smaller string and it is large like in MB range use a library that compresses it if that is the important feature you search for. To generate with protobuf Java classes just use the command line and use the generated Java code in your kotlin project. It's easier done than using any ide plugin, at least for me :p
So i see examples for creating a .proto file which will have the schema of the message that is to be serialized, but my data is dynamic and right now it is like something like `snapRepo.stateData = gson.toJSON(state)` here i will get a serialized json object that i save to db instead i wanted to use protobuf and convert it to byteStream 
As u/wolf219 also said, I don't think protobuf is going to do much in terms of string compression and the gains in object size are going to be negligible.
Well, Protobuf is designed for creating a message for compact communication, basically. Check this out and then try to figure out how you can use it properly: https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/runtime_usage.md
For production use I always put an nginx proxy in front of any application server. * Nginx is battle tested, I don't like exposing app servers directly to the public internet * Nginx can handle access logs. This way I have one place to gather access logs, and they are all the same format regardless of which application or app server is running behind it. * Nginx handles SSL termination instead of having to configure each app server separately with certificates etc. If I'm running a load balancer like AWS ELB in HTTP mode many of the above points are also handled and Nginx might not be necessary. If the load balancer proxies plain TCP connections, I do put Nginx between the load balancer and the app server.
It's hard to do protobuf serialization without knowing the fields and type up front, that is why you are not seeing much examples on dynamic serialization. There is no type information embedded within the protobuf message, only data. You can of course be "dynamic" by having a string field that stores your JSON, but that is not really optimal usage. The process is usually like this: * Create protobuf definitions (.proto) * Use gradle or maven to compile protobuf to Java * Either build and distribute a jar with the compiled classes, or import the generated into your IDE * In your code, manually build an object based on your generated classes * Serialize it by calling toByteArray() * Deserialize to a new object by calling MyClass.parseFrom(byteArray) There is not really much difference from Java here. While there is the possibility to have fields varying on the content, it is not meant for dynamic objects, it's strength is in keeping a semi-rigid structure with evolvability when passing (or storing) data between different systems. If your goal is to save storage space, just gzip your json instead.
So does a load balancer in HTTP mode decrypts HTTPS connections first before forwarding to the web servers? Does this put more strain on the load balancer where a simple proxy spreads the decryption/encryption work across the web servers?
As far as I know, [kroto-plus](https://github.com/marcoferrer/kroto-plus) is the way to go for using protobuf with Kotlin. It offers some very nice, compact DSLs for working with the generated objects. On the other hand, you can certainly start with just doing everything as you would with Java, that should be fairly easy to get started, the only down side is that you end up with code that is fairly verbose, even by Java standards. As others have said, just wrapping you JSON string in protobuf will give you nothing but added complexity. Ideally, you want your protobuf objects to be used throughout the application where the contained information is needed. If that is not realistic, you'll have to build your protobuf schema to mirror the structure of the objects you are already serialising and implement some conversion code.
Exactly. In HTTP mode the LB will do the handshake/encryption/decryption etc and forward the request over plain HTTP to your app server. This way the app server can focus on what it needs to do which is handling the actual request. In most cases the LB or proxy will be more efficient in doing all the TLS stuff anyway. Especially if you use something like Nginx or Varnish with a TLS stack in C, versus whatever the app server uses. If you use something Like AWS ELB, the decryption work is done on the LB which has no extra cost (they charge per request) and thus less load on your app server for free.
Interesting. I would have thought it more efficient to partition the TLS stuff to nginx instances on the web servers, leaving the LB to only process the raw connections.
It depends a bit on what kind of LB you use, if it is managed or not, how many instances it uses and the amount of requests to process. In most cases I have seen the TLS overhead is negligable compared to the latency in your app server due to request processing and database I/O.
For Android related questions, please, use /r/androiddev.
Sry didn't know about this, but thanks
I am using kotlin, that's y I posted here, guess I should have said something.
Pass the listener (() -&gt; Unit or some interface) in the adapters constructor and bind it in OnBindViewHolder { holder.view.setOnClickListener { listenerThatYouPassed() } }
I don't really understand how this is different than a rendezvous channel, which will suspend until elements are able to be consumed, right? Is it just that with a flow, _nothing at all_ happens until it is needed?
Also, nothing at all happens afterwards. And you cannot accidentally lose a reference to a working coroutine. Nor there is any costly synchronization between coroutines.
Ah, okay, that makes sense. Thanks!
`OnBindViewHolder` isn't a good place to be setting onClickListeners, you're better off doing it within `onCreateViewHolder` as it's more efficient because they are only created and attached when a new holder is created, which is much less frequently than in `OnBindViewHolder`.
Don't do this. You'll end up creating anonymous click listener on each onBindViewHolder which would destroy your RecyclerView performance. Create it once in your ViewHolder and then bind it in onBindViewHolder.
I have created a blog for JavaFX + Kotlin. Here is a post on OpenJFX 11/12 and Java 11. https://thickclient.blog/2019/04/04/application-number-1/ GitHub repo with working example - https://github.com/SergeMerzliakov/javafx-app-1
Yeah, this is pretty much how to do it. &amp;#x200B; The other option would be to do the multiplication first, then construct the data class.
Is this similar to using a Sequence with yield?
What would the code for that look like if you don't mind me asking?
`val addedTimeInSeconds = //from API` `val history = History(addedTimeInMilliseconds = addedTimeInSeconds * 1000,...)` Assuming you also rename the fields as appropriate.
Ah--I was a little unclear: I'm using the data class as a JSON -&gt; Object mapper so there's no actual place where I call the constructor of the data class anywhere--the entire history object is populated by a web service call if that makes sense. Basically I was wondering if there was a way to do as you suggested inside the data class itself somehow.
I can confirm, I have plenty of experience on both languages and on my ongoing job hunting for backend roles I found more Kotlin than Scala
Yes. But you cannot ‘delay’ inside the sequence - sequence is synchronous.
The other answer is not correct&amp;mdash;you don't have to do the multiplication every time. A simplified snippet: data class A(val arg: Int) { val computed: Int = arg * 1000 }
So I gave this a whirl already, and it doesn't work for my use case. Here's the gist: data class History( @SerializedName("Added") val addedTimeInSeconds : Long, @SerializedName("ID") val transactionId : String, @SerializedName("IsHQ") val isHighQuality : Boolean, @SerializedName("PricePerUnit") val pricePerUnit: Int, @SerializedName("PriceTotal") val priceTotal: Int, @SerializedName("PurchaseDate") val purchaseTimeInSeconds: Long, @SerializedName("Quantity") val quantity: Int ) { val addedTimeInMillis : Long get() = addedTimeInSeconds * 1000 val purchaseTimeInMillis : Long get() = purchaseTimeInSeconds * 1000 } data class HistoryResponse( @SerializedName("History") val historyList: List&lt;History&gt; ) There is a HistoryResponse object that comes back, and has a List of History objects in it that I am retrieving from a web service call. Inside those history objects, if I use your method and instead of the get(), just set the internal variables equal to the various timeInSeconds \* 1000, they are actually storing 0 for some reason when actually accessed. I'm not sure if this is a weird quirk of how the Mapping between a JSON object and a data class is done or what, but without the get(), it doesn't actually work in my real-world use-case, which I was a bit baffled by as it seems like your suggestion should work.
From practical standpoint, how is this different from `publish` from reactive coroutines integration library? What benefits are there except from not having to include whole other library along coroutines?
Hm, what are you using for a serialization library? My best guess is that it's using reflection to populate the object's fields after initialization, so the computed field doesn't get updated. It might also be zeroing it because it doesn't see it in the input. You might try marking it as a non-serialized field.
It is probably your data serialization library. I guess it is Gson based on the @SerializedName property. I just did a quick test with Gson and it does not seem to call the constructor when instantiating the object. You can verify this by adding an ```init { println("in constructor") }``` block in your class and verify that it never gets called by Gson. Like in this Gist: [https://gist.github.com/vbsteven/a0fa0769d5a2a9bdd2987285f532cc9d](https://gist.github.com/vbsteven/a0fa0769d5a2a9bdd2987285f532cc9d) As you see it never prints the `in constructor` bit, so I guess Gson is instantiating a new blank object and then using java reflection api's to set the fields. Adding the property with a custom `get()` is your best option here.
Oh. Well no, then. I don't believe so.
This isn't the first time I've been introduced to this concept of Reflection--I am wholly uneducated on the topic and need to learn more about it apparently! Thanks very much for the info.
Time to go and read about how reflection works in more detail! I noticed this quirk of an init block not executing while using Gson, but I thought I was maybe just doing something incorrectly. Would you happen to know if there's a better / different data serialization library that people seem to prefer for Kotlin? I'm very used to Gson/Jackson from Java and if there's an alternative that makes stuff like this "easier" I'd love to learn about them too. Thanks so much for the info/help, this answers my question pretty thoroughly!
\`Flow\` programming model is much simpler because all its API is suspension-first. For example, to do multiple consecutive asynchronous calls in Reactive Streams one should use \`flatMap\`: val cliens = ids().flatMap { id -&gt; getManager(id) }.flatMap { manager -&gt; getClients(manager) } &amp;#x200B; With suspensions, you can do it in a regular imperative way: val clients = ids().map { val manager = getManager(id) // Suspending call or can be transformed to suspending with await() getClients(manager) } &amp;#x200B; It may look insignificant, but add loops, exception handling or any other non-linear imperative control flow and will look different. In short, it has the same advantages over reactive streams as coroutines have over callbacks.
&gt; despite 6.4% I wouldn't call it 'despite', since low percentage of usage works in its favor in this case.
Actually I have switched to Kotlin and everyday I go deeper with it. It's awesome 😅
Same. It really is a wonderful language.
It also takes 5th place in *Wanted* and is the second least-*Dreaded*. Nice.
*Eyy, another year!* It's your **4th Cakeday** spamthemoez! ^(hug)
Absolutely my favorite language
&gt; However I constantly debate whether reactive dev will take over the space and debate learning node.js and react. Reactive has nothing to do with React. &gt; -Once I am confident with my web development skills, or in two months I would like to learn mobile development, a reason for sticking with java for web development would be to help later on when I am learning android development. I would then like to learn swift for ios development. It's impossible to 'feel confident' with web development skills in two months. &gt; -I would eventually like to get into more advanced programming than just core java and web development, such as creating new technology maybe in the AI space. Go ahead, TensorFlow/[Deeplearning4j](https://deeplearning4j.org/).
It is a Kotlin, Kotlin, Kotlin world! Won't go back to Java for android development.
How so?
Very nice, DL4J is great although the API was fairly clunky the last time I tried it (which was admittedly several years ago). This could really help with Kotlin adoption in machine learning if it could provide a really awesome interface to DJ4J.
Less people using it implies that whoever is using it is doing so by choice. Not many people choose to learn languages they dislike. Also, languages with smaller user bases tend to have more fervent fans; see Scala, WebAssembly, TypeScript, Closure, etc. I would also argue that Kotlin is loved so much because most of its users come from Java so it's exceptional in comparison.
Spring supports reactive programming (search Reactor). Kotlin has coroutines with channels to facilitate reactive programming similar to RXJava. Note that you can also use any Java library from Kotlin. Kotlin is an obvious choice for Android (the majority of Android projects would have switched to Kotlin by the end of this year). Kotlin multi-platform via Kotlin Native can be used to share code across backend, android, iOS, and even web by compiling to JavaScript or WebAssembly. Kotlin avoids entire classes of Java defects (in addition to the common NullPointerException). Kotlin also makes you more employable in the future and Kotlin developers currently make more than Java developers according to the recent StackOverflow survey. Welcome aboard!
Very interesting article
I still like Java, and have used it in professional interviews. But, I just don't see a reason to use Java for personal projects. Like, Kotlin works, and is great. Why bother with Java.
You mean clojure? Closure is totally different
Yup, good catch :)
Kotlin is what happens when a company builds the best tooling for damn near every major language. I would bet they know a thing or three about what NOT to do in a language by now. Also let's be real their team has some geniuses running things and now a foundation to help ensure longevity.
Nothing says you can't learn multiple languages and stacks. I've personally lost count. For machine learning, Python is where it's at. Specifically Python on Linux. For everything else kotlin is a lovely choice. By no means the only choice, but it's got an awful lot of reach and applicability for such a young language, and it's future looks pretty bright. I love the fact that they are working on a native implementation. Another way to look at this... For a young just starting out developer, kotlin has a lot of new forward thinking ideas baked into it while still being very digestible and pragmatic. That's a great language to be in for a newb cause you'll learn what all the cool kids are learning. If you want to program the way they were programming in the late 90s then Java is the way to go. For me kotlin is a quality of life issue. I almost can't bare to program in Java because it's just too painful to be tolerated once you've experienced a more modern language. I view it on much the same way I view COBOL. I'm sure many useful programs were written that way, but why would I torture myself that way now that there are better alternatives.
Absolutely love kotlin. Nowadays, I want to do everything in kotlin.
I’ve been using Kotlin since alpha (albeit on and off), developing middleware application and then android apps. I’ve been developing since 2000, by far hands down it is an absolute pleasure to develop using Kotlin. It’s idiomatic, it makes sense, no more weird shit I saw in Java, or module issues in python or node. It’s a lovely language, I wish I could use it to develop iOS apps.
You nearly can with kotlin multiplatform, only the view would be iOS specific though :/
As far as I know both Gson and Jackson use Java reflection under the hood to create a blank object first and then populate the fields so the constructor would never be called. I did some digging this morning and actually the [kotlinx.serialization](https://github.com/Kotlin/kotlinx.serialization) library does no-reflection (de)serialization for JSON and protobuf. It works by generating the serializers at compile time and it calls the kotlin data class constructors so the initializer works as expected. [This gist](https://gist.github.com/vbsteven/38ab2d880a372a432df242ba91d8fe9c) shows how it with a simplified version of your code. bonus feature: This also works on Kotlin/Native.
it's because only fanbois like us use it
Scala being the unofficial nemesis of Kotlin, it's interesting to see it's much less loved and much more dreaded.
I code only as a hobby. I've tried C#, python, java, javascript and html/css. I absolutely love kotlin and its the only one I use now.
I am consistently impressed with how well all of JetBrain's tools work and how well designed they are. It really is amazing. Except maybe for using Cmake in CLion, but that's just me.
That is pretty great.
My research from yesterday ended up at the same library with the addition of [Moshi](https://github.com/square/moshi), but the kotlinx.serialization library seems like it would get the job done fine, especially based on your gist. Thanks so much for the gist by the way--that makes it more clear than I could've hoped for! Had no idea there were @SerialName or @Transient annotations with the kotlinx.serialization library, and those seem extremely easy to implement just like Gson's syntax. &amp;#x200B; Now all that's left to do is maybe benchmark the various options, but in a web or server application, parsing JSON isn't usually the bottleneck to begin with, right? This seriously made my day upon waking up and reading the gist this morning--thanks so much!
You can give "Head First Kotlin" a try. It is more beginner friendly
I would expect the kotlinx.serialization library to be faster than Jackson/Gson because it does most of of the work at compile time instead of using runtime reflection. Benchmarking these libraries against each other could be an interesting little project indeed. I might get around to it one of these days. For most use cases I don't think the performance difference will matter that much. If you are deserializing the JSON response from a webservice then the deserialization will most likely be nothing compared to the latency of the webservice itself.
I think that’s changing a little. I am seeing it more and more in larger companies
Isn't it obvious though.
I've created a small example on how to get started with creating Kotlin DSLs with extension methods and operator overloading.
* If you are currently learning the Spring framework Kotlin could be a really nice addition to your skillset. It's an interesting experience to write something in Java with Spring and then port or rewrite the same thing in Kotlin to see how Kotlin improves many of the Javaisms. Once you did that with a project that is large enough you probably don't want to go back to Java. (at least that is how it was for me) * For Android, Java and Kotlin are about equally supported. For the same reason as above, if you know both and have the option to use either it is a no-brainer to go for Kotlin. * Kotlin/Native/multiplatform can become a nice option for cross platform mobile development but it's not there yet. * While you can use Kotlin for security work, it is not ideal for it and you are probably better of learning a good scripting language like python or ruby combined with C/C++.
 minimum(0) maximum(150) How about inRange(0..150) since Kotlin supports ranges natively?
1. I don't get why TypeScript users love TypeScript more than Kotlin users love Kotlin. Is it because TypeScript improves JavaScript more than Kotlin does Java? 2. Also why is everybody so hyped about Python. Kotlin is as concise as Python and way better readable in my opinion (+ safer etc.). Maybe because Python has more libraries at the moment?
Kotlin is industrial, meaning it has features that *you* would actually use; whereas Scala is academic, it has much more features but you might not understand them all.
Python is always like that. It has rightful reasons but Python also got some less-educated fanboys.
Only after being forced to work in some other languages it's so apparent that Kotlin is a very very solid language. I've been working in Dart lately and man, it does everything wrong that Kotlin does right. Kotlin has so many features that force you to write better code whilst not hindering you at all. I really hope Kotlin multiplatform takes off 🚀
Dig it. Going to can javax.validation now :)
This would be interesting with the infix operator!
What does Dart get wrong what Kotlin gets right?
Making everything final by default. Named parameters without funky syntax. Nullability. Kotlin feels as if you can do anything, while following clear rules. Dart feels like... You can do everything but everything feels like a hack.
Sounds like a pretty good PR. ;)
Very clean syntax. I like it
Could you give an example how you'd imagine that?
I submitted [this pr](https://github.com/konform-kt/konform/pull/5) adding the functionality, but I'm not sure if it'll end up merged, as the last commit was over a year ago. Hopefully the maintainer takes a look.
I literally just wrote a library like this, but specific to grpc generated classes.
Best bet would be using something like [Ktor](https://ktor.io/). It has many different 'plugins' you can install, and gives you many options for things such as login. It also helps with stuff such as [Oath](https://ktor.io/servers/features/authentication/oauth). Check it out.
Kotlin is my go-to programming language after using Python, C#, Java, Typescript (Node - in the browser you have no choice) in the last years. By far the most pleasant and versatile language. Feels pleasant like Python but statically typed, some more powerful features (coroutines), extremely great IDE support, even better ecosystem than Python (the whole Java universe). I'm using it for tools and backend (mainly Spring, starting a Vert.x project). If you're coming form 1,5 years of Java learning Kotlin will be nothing but a joy and quite easy. Spring is (at least in my area and industry) the backend standard. So learning it is a good choice. However, it's not the easiest. To start learning web-dev I'd suggest Javalin, It should get you going in a couple of days. Add a database (Postgres) using a pure JDBC connection. After that you will much better understand the why and how of Spring.
This looks great - gonna try it out as soon as I get the chance to
Do you have any Java experience? The Spring Boot framework is great and can be used with Kotlin. It's a huge framework with lots of moving parts if you need them but it can be lean and mean for single file helloworld applications. The idea is that you go to [start.spring.io](https://start.spring.io) and configure your project by selecting some starter dependencies. I suggest you start out with * Project: Gradle * Language: Kotlin * Spring Boot version: 2.1.4 * Dependencies: * `Web` because you are making a web app and optionally some `JPA` and your preferred database technology (Postgres, Mysql, Mongodb) if you want to persist some data. A simple Hello World application then looks like this: ``` @SpringBootApplication class KotlinhelloworldApplication fun main(args: Array&lt;String&gt;) { runApplication&lt;KotlinhelloworldApplication&gt;(*args) } data class Person(val name: String, val id: Long) @Service class PeopleService { private val people = listOf(Person("Steven", 1), Person("Lore", 2)) fun findAll() = people fun findById(id: Long) = people.find { it.id == id } } @RestController @RequestMapping("/people") class PersonController(val peopleService: PeopleService) { @GetMapping("/") fun index(): List&lt;Person&gt; = peopleService.findAll() @GetMapping("{id}") fun show(@PathVariable("id") id: Long) = peopleService.findById(id) } ```
That's because the c++ tooling is atrocious.
I think Python is still my favorite language, but Kotlin is definitely very close. I really like Python's indentation as structure thing, which makes the code style very consistent and easy to read. That said, I'm not sure if that would make sense for Kotlin due to the amount of multi line lambdas. ` val items = listOf(1, 2, 3, 4, 5) // Lambdas are code blocks enclosed in curly braces. items.fold(0, // When a lambda has parameters, they go first, followed by '-&gt;' acc: Int, i: Int -&gt; print("acc = $acc, i = $i, ") val result = acc + i println("result = $result") // The last expression in a lambda is considered the return value: result ) ` Hmm doesn't seem that bad
Kotlin is perfectly stable for production, however you need to test for stability to your standards (as with any technology)
If I write my own language that I love and am the only user then it's 100% happy users.
Where's the changelog?
Here is the [changelog](https://github.com/JetBrains/kotlin/blob/1.3.30/ChangeLog.md)
I don't get the example: it looks like `delay` actually represents an instance of time in the past, not a duration.
I tried spring boot, I am coming from Java. I used Thymeleaf, I don't know if I need a templating engine or not, but It was very confusing to me combining the syntaxes with no examples online.
What plugins do i actually need to create a web application with ktor, additionally what is the benefit of using freemarker vs the kotlin html and css options. What would I set my run configuration to if I use netty, would I still use a maven config?
You don’t have to use Thymeleaf with Spring Boot if you don’t want to. There is also the option of Freemarker or Mustache templates.
On the link that OP shared; right at the top.
If I wanted a more traditional html/css feel, would I use a templating engine or not?
&gt; Kapt: Support incremental annotation processors YES!
You are most likely better off using a template engine so you can have all html in separate files and use the engine to fill in the variables. What template engine you pick is completely up to you. Personally I like thymeleaf most because all its markup is valid XHTML and when previewing template in the browser it actually looks the most like the actual rendered result. Some examples: Thymeleaf ``` &lt;ul&gt; &lt;li th:each="customer : ${customers}"&gt; &lt;p th:text="${customer.email}"&gt;defaul@email.com&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; ``` Mustache ``` &lt;ul&gt; {{#customers}} &lt;li&gt;{{email}}&lt;/li&gt; {{/customers}} &lt;/ul&gt; ``` Freemarker ``` &lt;ul&gt; &lt;#list customers as customer&gt; &lt;li&gt;${customer.email}&lt;/li&gt; &lt;/#list&gt; &lt;/ul&gt; ``` All of these
Agree it isn't a good sign that the fwcd's Kotlin extension said (as of v0.1.13), " ## This repository needs your help! [The original author](https://github.com/georgewfraser) created this project while he was considering using Kotlin in his work. He ended up deciding not to and is not really using Kotlin these days though this is a pretty fully-functional language server that just needs someone to use it every day for a while and iron out the last few pesky bugs. "
&gt;Do not implicitly propagate deprecations originated in Java This seems like a strange move to me.
I have a hard time understanding lambdas. I mostly use OOP and only use lambdas for single lines or when I'm copy/pasting a template. Python has nice libraries that do the work for you but I found it slow when data wrangling very large sets of data, 20+ GB. I found kotlin to be faster, much faster actually, in execution. An you can import any java library so you have 20 years of solid work to lean on. The syntactic sugar in kotlin is just beautiful and really saves time in writing out boiler plate code.
I'm fairly new to kotlin. I tried spring boot and it was too difficult. There are entire books on this alone. I have now moved to ktor. Managed to get a GET Rest API up and running in 2 mins.
That was well hidden all the way down in that list
Hmm, that's a fair point. It's because my original example didn't use the `now()` function, it was just adding time together. I'll rename it to something more descriptive, thanks!
&gt; Support Multiline TODO comments Woohoo!
There is a ktor plugin on intellij marketplace that can help you get setup with making a basic ktor app. I would recommend using something like moustache or free marker to get started. Betty would he auto configured
Does the IntelliJ plugin for native development for Windows work? It's been months. And it's hard to tell from the changelog whether the causative defect has been fixed.
Cool\~
I just flew over it - the formatting of the custom accessor for isSquared is very strange and misleading for beginners. It sohuld be formatted like this: \`\`\`val isSquared: Boolean get() { return width == length } \`\`\` or even better \`\`\`val isSquared: Boolean get() = width == length \`\`\` As can be read at [https://kotlinlang.org/docs/reference/properties.html#getters-and-setters](https://kotlinlang.org/docs/reference/properties.html#getters-and-setters)
I could rewrite your java class into this: `public class CheckFigure {` `public final int width;` `public final int length;` `public CheckFigure(int width, int length) {` `this.width = width;` `this.length = length;` `}` `private boolean isFigureSquare() {` `return width == length;` `}` `public static void main(String[] args) {` `var checkFigure = new CheckFigure(12, 12);` `out.println(checkFigure.isFigureSquare());` `}` `}` &amp;#x200B; In Java, you created an immutable object, that means your variables can be public final without getters. Why did you chose to add getters? Also, you seem to have made conscious decision to purposely create a more harder version of isFigureSquare() in Java than in Kotlin. Because in Kotlin, you return width == length. In Java, you add additional if statement. Why? But I will give you that Java does not have data classes. However, that will change soon with upcoming [records](https://cr.openjdk.java.net/~briangoetz/amber/datum.html).
The example seems a little contrived just to show off Kotlin data classes and it only focuses on a small subset of goodies data classes provide. Namely the consise syntax for defining properties and get/set methods. What the example does not show is that data classes also implement the `equals` and `hashCode` and `toString` methods. In real Kotlin code if you actually need this behavior I would not even do a class, just a top level function. Like this: ``` fun isSquare(width: Int, height: Int) = width == height fun main() { println("is 10x12 square: ${isSquare(10,12)}") println("is 12x12 square: ${isSquare(12,12)}") } ``` Or, if you have an existing class that already defines height and width properties (or a Java class with getters and setters) you can use an Extension method to add the behavior to the existing class. A better example to show some of the power of Kotlin would be something like this: ``` data class Figure(val width: Int, val height: Int) fun Figure.isSquare() = this.height == this.width fun main() { val figures = listOf(Figure(10,12), Figure(12, 12), Figure(42, 42)) val special = Figure(42,42) figures.forEach() { when { it.isSquare() -&gt; println("$it is square") it == special -&gt; println("$it is special square") else -&gt; println("$it is not square") } } } ```
Finally 'async stack trace' support! This should really help when debugging coroutines and bring them to closer to 'regular' functions.
&gt; I mostly use OOP and only use lambdas for single lines or when I'm copy/pasting a template. Do you not use [Kotlin's lambdas](https://kotlinlang.org/docs/reference/lambdas.html)? Basically lambda's are just functions without a name.. So, for example, when you want to find the `User` with the most posts, you can do something like this in Kotlin: `userList.maxBy { it.postCount }` which is just short for `userList.maxBy { user -&gt; user.postCount }`, so the `user` is the argument that is passed to the anonymous function (= lambda). `maxBy` goes over every element of the list and passes that element to the function. Kotlin also allows you to `inline` them, so you don't have the performance overhead of a function call. &gt; The syntactic sugar in kotlin is just beautiful and really saves time in writing out boiler plate code. I fully agree.
It seems the example does not load on Reddit. Well, that's strange.
Thanks! Anyone curious about the DL4J interface can check out the Quickstart and examples: &amp;#x200B; [https://deeplearning4j.org/docs/latest/deeplearning4j-quickstart](https://deeplearning4j.org/docs/latest/deeplearning4j-quickstart) [https://github.com/deeplearning4j/dl4j-examples/tree/master/dl4j-examples/src/main/java/org/deeplearning4j/examples](https://github.com/deeplearning4j/dl4j-examples/tree/master/dl4j-examples/src/main/java/org/deeplearning4j/examples)
In my projects I use the second approach `val id: randomUuid()` without any problems so far. Can you explain in more detail in which scenario this poses problems for Hibernate? I like this behaviour especially for UUID's because any instance I create will automatically have a random UUID assigned.
I was persisting an entity which had another unpersisted entity as an attribute. Both entities used UUID.randomUUID() at the time and therefore had an id already. And as I was trying to save that entity using a Spring repository an exception arouse from hibernate stating that it was unable to find the nested entity by its id in the database. So instead of persisting it, it failed to do so. (This may could have been due to incorrect cascade types) In response to the latter, I only sequence generators when it comes to ids, even for uuids. This way I will not run into a duplicated primary key, which would be a very nasty sporadic error. So the random uuid will be overridden by the database anyway, rendering it completely useless.
Could you use lateinit for this?
Spring Boot too difficult? It's incredible easy to create a simple REST API, and I fail to see how Ktor would be any easier.
As a hobby programmer I don't have colleagues or senior professionals to rely on. I'm only as good as the tutorials I find online. Spring boot required some whole 'builder' before reaching your first GET request/response. Most tutorials required setting up a POJO to read the json and convert it to a local object. With ktor on the other hand it seems to have a lot of the stuff preconfigured. Got my REST api set up really really fast.
Might work, but you would have to annotate the property explicitly with @Access(AccessType.FIELD). Otherwise a UninitializedPropertyAccessException will be thrown when Hibernate checks whether the entity was given an id. The access is done via the getter by default.
I'm going to try and reproduce this one of these days. For UUID's I typically use an OverridableUUIDGenerator so that when my application code already sets an id, the database does not generate a new one. I think it is fairly safe to say that collisions between UUID's generated on the JVM and postgres are highly unlikely.
1. I think that could actually be a valid point. I've coded in all four, and while Kotlin improves Java on a lot of points, I still don't mind programming in Java. I would hate to go back to JavaScript coming from TypeScript. 2. It's ideal for machine learning, which is of course a hot topic these days. If I would have to pick a different language to do ML in, I would still rather pick Scala than Kotlin. For backend development, I'd pick Kotlin above anything else without a doubt.
It doesn't take more than a RestController and Application class to set it up with Spring Boot if you create a project with spring initializr. You've got all the dependencies you need. &amp;#x200B; I understand that if you're a hobby programmer, you just want to have some fun, but if you want to do it profesionally then I suggest you learn Spring Boot. I don't think a lot of companies would go ahead and use Ktor in production.
Don't you have to call the java part with `class::function` syntax?
Doesn't Kotlin translate lambdas into interfaces?
From java perspective the `MyClass` constructor takes in a lambda, which in a pure Java world would be equivalent to `java.util.function.Supplier&lt;Unit&gt;`. So you can do one of: - pass in `() -&gt; {someFunction(); return Unit.instance;}` (lambda) - change return type of `someFunction` and pass in `this::someFunction` (method reference)
This person is obviously inexperienced but not everything is bad. For example, you don't *need* getters but they are almost always nice to have because a) it is easier to add additional logic if you need it like rounding a BigDecimal while maintaining the original precision, b) I can use method references with getters which is cleaner than lambdas, and c) it just isn't that much extra code to add these benefits, especially with IntelliJ.
I haven’t done Android in a while but this approach looks cool. You probably can get it even more ergonomic by using a touch of Kotlin reflection to get rid of the manual serialisation/deserialisation. Your OtherActivityArgs object could be a simple Kotlin data class and the launch and function could use `memberProperties`from Kotlin reflection to automatically populate the intent with the right values.
Yes, it is. When you offer Kotlin instead of Java, you get better developers which like to use better language.
Hi! In Hungary the situation used to be similar, now it’s a bit normalized due to some recent closes of startups or company branches. Now, I would had to write a test, if I were to apply, even if I have a github account with some contributions and repos. 3 years ago it was not required for sure.
Is there a source on this or just is this in your estimation? Also anecdotally I believe java devs who are willing to learn kotlin are better...but usually because they're interested in learning in general rather than choosing Kotlin specifically.
Once you learn, there are no reasons to go back to Java. I don't know how Java was my favorite language. I now want to keep away from it.
Interesting! Thanks for sharing. Was not aware. One of your devs is actually from Hungary but he has never mentioned this. He's been in Norway now for 7-8 years so it might be he is unaware. Again, thanks!
Hi, I'm Android/Kotlin developer from Poland. Experienced and good Kotlin Developer in the capital city(Warsaw) can find few well payed job and choose one in 1-2 weeks. The other cities in Poland, especially medium size, have strong different market where developers salary is much lower and rather employer can choose developer which he'd hire.
Brazilian who moved recently to Berlin. In Brazil things are ok. Lots of companies and lots of people. It gets a little bit more competitive when companies want the best guys, naturally. Usually the newer software houses who get projects from Europe or the US can afford to pay more and have a better office and be generally more attractive to the best developers. After I updated my LinkedIn, adding my new job and address to Berlin, I understood exactly what you are saying. Companies would kill for developers. In the past month I received at least a dozen of messages from recruiters.
I believe that last stackoverflow.com survey have some interesting statistcs about migration Java developers to Kotlin.
I have heard this so many times.
Thanks for sharing. Do you know German or are you working a place that only speaks English?
My German sucks as I'm learning it. So English, of course. In my company, there are about 30 people in the office (half IT), plus about 10 remote developers from East Europe. Not even the non-it can speak German. There are over 20 nationalities in the office.
Not OP, but most of the offers I get are for English-speaking companies here in Berlin. However, what's really encouraging is that more and more of the Kotlin-related positions aren't for Android development. My greatest fear is that Kotlin would get pigeonholed with Android like Ruby did with Rails, but fortunately, it looks like it won't be the case.
Companies sometimes hire Russian developers in Finland. I do not know about your legislation, but maybe this could be an option for you.
We hope so too as we have chosen Kotlin over Java for normal backend programming. We are not doing apps for mobile at all.
When hiring developers they will be considered specialists so I think it is easy for anyone to get work visa here. Will have a look at Russia
In London there's a thriving Kotlin scene, and nearly all the projects with some JVM I've seen/know of have at least dabbled in kotlin. I've seen many Greenfield kotlin roles advertised too. The ease at which Java devs can read and pick it up has helped this I feel. I'm currently working in a full-time role in Kotlin also
as a former engineer that was in the Norwegian market for 5 years, and currently a professor training hundreds of software engineering students entering the Norwegian market, I can share you my two cents: 1) you said "great salary"... is such claim based on statistics or just your personal experience? I am asking because I have often refused job offers in Norway (Oslo in particular) due to many companies offering peanuts, and that did not believe me when I told them that all other companies I have been working for were paying literally +50%/+60% more. Looks like many small companies in Norway have no clue of what are the salaries for senior developers 2) why should I work for your "small" tech company? Are the perks you provide better than the competition? Not such a silly example: do you provide a company-based restaurant or free-meal tickets as benefit? Food cost in Norway is astronomical, and that for example is a type of perk which is quite important unless you compensate with higher salary (eg a +50k/+70k NOK p/y)... 3) If you are looking for Juniors, are you in contact with your local universities? Many provide opportunities for bachelor/master projects in industry, which is an excellent way to publicize your company. Many students are in contact with companies during their studies way before they graduate. 4) can people apply for your positions by just sending an email with attached CV? or are they forced to fill countless web forms with HR bullshit and compulsory cover-letters? (which unfortunately I have seen way too often in Norway, and then they wonder why no one applies...) On the bright side, we are replacing Java with Kotlin in the courses we teach in my college... so the new graduates will have some experience with it :)
Hi! 1. I have been woking in the industry in Oslo for the last 15 years, also over the course of the last tree years I have interviewed and spoken with lots of candidates. We have a philosophy that we will put down a good salary but what will keep people here is the interesting work everyone get to do. As a standard the pay will be put between the top two categories of the Tekna statistics for private sector. I have never gotten the impression lack of pay is the reason we do not recruit more. 2. We do not think we are the most interesting company to work for. That being said I really do belive we offer lots of interesting work. We are building something that is and will be widely used across Europe and expanding quickly. We started with blank pages choosing up to date technologies. When it comes to perks we have lots of them. We offer great pension and insurances. I have never heard of any other company that has better insurance than us. We do pay a lot of everyones lunch and offer free hotdog every Thursday :-) The best perks is maybe we are giving everyone 1 week extra off as compensation for things done during evenings and weekends that is considered learning something new. That can be reading books, working on your little side project and so on. This is not forced work but just giving back for thing we believe everyone would be doing anyway.. We also offer 1 hour physical training each week. Each month we have a full day of traning/hackday and so on. Focus is having fun learning something new. I could go on. I think we have a good package. 3. We can do better! We have contributed to a couple of events for students but this is definitely something we have a plan to get better at. Will look into it. 4. No forms. Applications are sent to me on email. We are a small company :-) Agree about the forms. &amp;#x200B; I know there are many things we could do much better tied to requirement and we are moving in the right direction. Still I wanted some insights and you know what. I already got some new ideas lined up. &amp;#x200B; Thanks for all your thoughts!
Hi! 1. I have been woking in the industry in Oslo for the last 15 years, also over the course of the last tree years I have interviewed and spoken with lots of candidates. We have a philosophy that we will put down a good salary but what will keep people here is the interesting work everyone get to do. As a standard the pay will be put between the top two categories of the Tekna statistics for private sector. I have never gotten the impression lack of pay is the reason we do not recruit more. 2. We do not think we are the most interesting company to work for. That being said I really do belive we offer lots of interesting work. We are building something that is and will be widely used across Europe and expanding quickly. We started with blank pages choosing up to date technologies. When it comes to perks we have lots of them. We offer great pension and insurances. I have never heard of any other company that has better insurance than us. We do pay a lot of everyones lunch and offer free hotdog every Thursday :-) The best perks is maybe we are giving everyone 1 week extra off as compensation for things done during evenings and weekends that is considered learning something new. That can be reading books, working on your little side project and so on. This is not forced work but just giving back for thing we believe everyone would be doing anyway.. We also offer 1 hour physical training each week. Each month we have a full day of traning/hackday and so on. Focus is having fun learning something new. I could go on. I think we have a good package. 3. We can do better! We have contributed to a couple of events for students but this is definitely something we have a plan to get better at. Will look into it. 4. No forms. Applications are sent to me on email. We are a small company :-) Agree about the forms. I know there are many things we could do much better tied to requirement and we are moving in the right direction. Still I wanted some insights and you know what. I already got some new ideas lined up. &amp;#x200B; Thanks for all your thoughts!
Hey, laffen9988, just a quick heads-up: **belive** is actually spelled **believe**. You can remember it by **i before e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Kotlin over Java for students seems like a great idea to me!
I also live in Hungary. There is a recent surge in Kotlin projects outside of Android as well. At my last 3 orojects they were either greenfield Kotlin or moved to Kotlin from Java. There are nore and more companies either making the move or accepting Kotlin as a backend language next to Java. I would never code in Java again if I can help it.
In Japan, most developers get paid low(no difference with other jobs) and work 60+ hours a week is normal.
&gt; We started with blank pages choosing up to date technologies. &gt; If you're a developer with a bachelor or a master degree you will get a job on the spot This instills fear in me.
Here in Ottawa, Canada, most people still have no idea what Kotlin is. In addition there's some misguided notion (where jetbrains is partly to blame) that Kotlin is only useful for Android development.
Not sure if I understand. Maybe you can elaborate?
Then I guess there are more developers than jobs? How else is the market like this? Here in Norway a normal work week is 37,5 hours.
Could it be remote work? Probably you would find heaps of people who are more than interested (salary and independence from the country economy) and highly capable in Argentina.
There’s no source because it’s bullshit. What’s better about Kotlin? Non null and the type appear after the declaration? Lol. Java has been working fine for 20 years.
I'm a junior dev using kotlin for mobile, I tried to convince my team lead to use kotlin on the backend but he was having none of it, there are few kotlin devs here because Java and .net are huge. The kotlin jobs here are almost all android and anyone that knows the language well is snapped up quickly, I got hired 2 days after I submitted my application to my current job and they told me kotlin made me stand out.
We need to consider getting people remote if we do not get more people soon. As we are stationed in Norway I am a little skeptical about the time difference but that is a market I definitely have not considered. New ideas!
This is how I felt until I sat down and learned kotlin. Once I did that I loved kotlin. There are legitimate improvements with kotlin and I don't think you have to live the language to see that. Having the type after the declaration is good because 1, you don't always have to specify the type and 2, it encourages using val instead of var where as in Java you would have to type 6 more characters for it to be final.
Same in Czechia. However, I did not see many vacancies mentioning Kotlin explicitely. Thought Jetbrains, the Kotlin creator, is Prague-based company. I have just seen Braclay’s Bank to mention Kotlin/JS and eMan promotes Kotlin at Android. But +1 for crazy market and interviews more like sales pitches of the company.
Where are you based?
Ireland
Site seems to be down, and Malwarebytes complains about it.
Then you better write Assembly because it's working fine since the invention of modern computers.
I did sit down and learn it, out of school before I got a job. The nuances don’t matter when one has Spring and the other just looks cool. Val vs var is stupid anyway I have to think about the full word every time because they look so similar
I think he means enthusiasm to hire someone with no real world experience to touch production code can be messy/risky. Speaking from experience with graduates, even a year or two is valuable for a new developer - they'll be able to produce working code but they'll make lots of mistakes architecturally and hopefully learn from them as they go on. The earlier you can drill in clean code concepts and principle into their daily working habits the better it will be for them and the code they produce and, ultimately, better for the company in terms of testability and reliability.
I agree. We have a good mix of senior and junior devs. Even the most clever graduates have so much to learn.
So, what, are u hiring? Cause, I can program this kotlin thing but i live in Sweden...
I live in Sweden. Im a dotnet guy that fell in love with kotlin a few years ago. Also, I know a kotlin guy that is great. What do you guys do? So, Sweden, one hour off, I like oil, hiking and Norwegian adventurers - and understand Norwegian a little... What i am saying is that Im bad at negotiating and will show you all my cards...
Man, this really depends on the team. With a sharp crew I could see the flexible type thing working well, but honestly, I’ve found that nullable types protect the youngsters from themselves. Usually they try something funny and complain about checking for null, and that becomes my signal to go investigate and fix the direction they were headed. Just saying, null sometimes is a great tool for signaling problems :)
You can use kotlin with Spring. I can agree that I'll sometimes have to look closely to tell if something is val or var, but I like that both are 3 characters so code lines up nicely when there is mixed usage. Kotlin might look cooler, but that's because there are many features that allow you to write less code.
You sound, better than my company right now. But the thing is the tech I am working in my company is cool. So, I am here(in the company) to work on this new tech only, even if it has less perks
Which company do you work for? Here in Toronto, Canada. People are crazy about Kotlin. Almost all major companies are using kotlin. I heard some teams in RBC, is reluctant to use Kotlin, but some are converting their code to Kotlin in some manner.
Curious, do you know how to code for backend in Kotlin?
I work for a small company called prontoforms, but it seems to be the case for much of the tech scene here. Good to know that it's catching on in other places, though.
I work with Kotlin, Swift, Ruby in Barcelona for a medium size startup and get paid ok by local margins. I do receive better offers, but I don’t believe I can find better work environment than I have now. Easy, relaxed atmosphere, lots of challenges and zero stress. Surprisingly, most of job offers I get from Linkedin require Java. Also, it doesn’t feel like there’s more too many companies looking for devs. I wouldn’t quit tomorrow with light heart. Also, most of the job offers come from larger companies offering boring positions.
Nope I'm primarily a mobile dev I'll probably learn spring at some stage.
Mainly looking for front and backend developers. We have lots to do so most get to work on the parts that interests them. Frontend are currently done in React with TypeScript. Frontend is running on Google Firebase Hosting. UI Authentication is done with Google Firebase Auth. Backend is written in Kotlin mainly on Google App Engine. For storage we usually use Googles Datastore. Our external APIs are protected by Auth0.com. That should give you a rough idea about the tech stack. When it comes to experience everything from graduates to seniors are currently welcome. Company currently has 14 full time employees and we have 8-9 consultants to keep the pace up.
"out of school" So one, maybe two years of experience? That explains the attitude.
in Florida Space Coast, they have many software engineers jobs with a little bit of coding.
I wish ANYWHERE in Europe paid what the US does. I'd be there in a heart beat, but it's like 30%. 😭
Seems like mostly a lack of large successful software companies from Japan mixed with a low rate of emigration.
I had the same experience but in the back end. Had a take home project that required high concurrency. I used Kotlin coroutines instead of traditional Java threads and that got me the job.
I answered your other question :-)
I'm a senior software engineer, focused on backends, have 13 years of experience (although amount of years means nothing) worked mostly with java and 2 years ago switched to Groovy (which is amazing). Kotlin looks like good copy of Groovy, still companies don't use it, never understood why. I've opened my linkedin profile to recruiters and I receive at least 10 offers a week from different places in the world. Of course, it will be very difficult for companies to get good employees because only 10% of the market is covered (accordingly to studies I read). A developer is probably going for the best money, best technology stack and best perks. So, what I would say is that you might open your searches for remote developers. If you want to have an in site developer... then it won't be easy at all. Likewise you want to earn more money, the same happens with the developers. I believe that if you want an excellent developer, committed and willing to get involved, then you might analyze the idea of making them feel to be part of the company (shares, stocks, decisions, bonus, etc etc). In my personal case, if the company gives a sh\*t about me and only focuses in generating more money without caring about the product we are building... then of course I'll hear other companies thoughts. But if the company really care about what we do, they earn my commitment.
Personally, I would die just to use Kotlin in my job. So you could hire me right away. But honestly, most people outside the Android ecosystem have never heard of Kotlin.
Just do it the Java way with Spring. Use a few extension functions and wrapper classes to make it more kotlinesk
I see more and more positions here in Utah.
I’d like to work in Norway as developer someday, cause I love the country. Where to start? some tips? I know also basic norwegian.
Hi, maybe your malwarebytes is blocking it, but the site isn't down.
I imagine there are a large number of weebs from the West who can program and want to live an anime lifestyle with complementary Japanese girlfriend, all thrusting applications everywhere they can When I went to uni in Japan, it seemed like the American guys who managed to stay in Japan fit that type.
Hi. I'm new to Kotlin (literally today). I'm curious if you know much about Scala. I have a Scala background and am learning Kotlin to write an Android app, but from what I've seen, I don't know why I would pick Kotlin over Scala but for Kotlin's first-class status in Android Studio. For anything not tied to Android, I would go with Scala personally. Is it that you don't feel comfortable with functional programming (I've heard from devs in big companies that lots of people seem to struggle with functional concepts)? Is it that you don't *like* functional programming? Or is it something else? From what I can tell, Kotlin doesn't offer anything that Scala doesn't offer, except maybe that it's closer to Java syntax. I definitely could be missing something, though. Thanks.
While you may be correct you’re not even parsing that sentence properly
I introduced Kotlin in my London company and they all loved it and use it. I got another job in London which was kotlin also. Now I'm CTO for an Oxfordshire company and we use kotlin in the backend. I'm spreading it! The beauty of Kotlin adoption is Java developers can write it just like Java to start with and slowly shift over to a proper kotlin way of doing things which means there is a nice gentle learning curve.
Well in Pakistan it's the opposite. The market it over saturated with Devs and there are no jobs avaiable. Jobs with little experience pay 1 to 2 $ per hour. Devs with 5+ years experience will get a out 4 or 5 $ per hour. Programming is considered a "lower class skill". Anyone who does this typically moves out of the country or only does freelance jobs online. Corporate and government projects pay well but are impossible to get without contacts. Kotlin is non existent. I could pay someone to set up a full business wordpress site in 60$ with 12$ annual hosting fee.
Much simpler, meaning it's easier to hire and onboard engineers familiar with Java and some functional programming concepts. Better integration with gradle/maven, easy to get going without having to muck around with sbt. At the end of the day, I think the simplicity takes the cake for me, I'd be scared to be sitting on a scala project without experienced scala devs. It's also much harder to introduce into an existing java shop. I'd be scared if my scala expert leaves, not so much Kotlin since I'm confident a Java dev can easily understand the code base. Source: experience dealing with a scala project in a majority Java shop
I am Java Developer having 3.5 years experience working with spring boot , jpa , and angular . I am interested in to hands on with other JVM languages especially kotlin or scala . if you have available position please consider me as candidate . thank you . email : waqasrana11@gmail.com
Sent you a PM
If you learn Norwegian it will be much easier. Although there are more and more companies that will except English speaking developers. I have sent you a PM about our company. Otherwise you can look at https://www.finn.no/job/browse.html. It still is the go to place for adds in Norway. For developers visa is straight forward. Let me know if you have more questions!
Yes. Let's replace complicated language with even more complicated one.
I totally agree with you. Thats why I included the warning. Flexible types can make sense in only a handful of very specific cases. One should always try the standard approach first. Your point with the youngsters does also apply to language youngsters, like developers learning Kotlin after a career in Java. It is really interesting to see, how much we assume about the nullability of types in Java without really proving it. Whereas I found that I always try to not use any nullable, even not mutable, types in Kotlin as I have to prove the correctness to the compiler. With non-null, immutable types it is not only so much easier to not do that, but also easier to read.
Doesn't seem to be confirmed by job stats. Search Indeed.co.uk for -android title:kotlin / London = 6 jobs. For the UK it's 8.
&gt;The final application compiled to like 5mb of bloated JS code. Better than 105mb of bloated Electron code.
Kotlin offers functional programming at the right level, ie. none of the Monad zealotry you get in the Scala world. Things like implicits also put a lot of people off Scala. Scala, despite its expressive power nevertheless ends-up being quite verbose. Check out The Guardian's github repository which contains a lot of idiomatic Scala code. Much more difficult to grok, epsecially for a Java dev, than the Kotlin equivalent.
&gt; Is there a source on this or just is this in your estimation? 1. My experience as Java and Kotlin community leader; 2. https://insights.stackoverflow.com/survey/2018; 3. https://insights.stackoverflow.com/survey/2019.
thanks!
I don’t know of any specific Kotlin-Jruby projects but Kotlin compiles to regular Java bytecode so interop should be pretty similar. In Jruby you can use `require 'Java’` to get access to any classes on the classpath. If you have Kotlin code on your classpath they should be available in the same manner. Something like ``` require 'java' obj = my.kotlin.Class.new("param") obj.aKotlinMethod() ```
As much as I like Kotlin: Honestly, if you've already used Angular with Dart I'd just use Angular with Typescript. Web is such a mess. Angular or Vue (with TS) are the least painful ways IMO.
Well, TypeScript's type system is obviously better integrates with JS than Kotlin's one, but I hate all those npms, webpacks and stuff so much, so I'd rather use something else. I will also look at F# and Haxe as alternatives, I like static typing a lot.
&gt; I hate all those npms, webpacks and stuff so much I totally understand that. Angular and Vue with their CLIs at least spare you from webpack. If your app doesn't need to be a web app, you should look into TornadoFX [https://tornadofx.io/](https://tornadofx.io/).
If you are already looking at F# and you are a fan of static typing, you might want to take a look at [Elm](https://elm-lang.org). It’s similar to F#, but designed to be used for writing SPAs.
Yes, I know about Elm, I like the concepts behind Elm archtecture, but I'm not really into it, as I'm scared of it keep changing all the time, and changes usually breaking existing code. I will eventually try it, when it will be 1.0.
Best source would be their samples folder on their git: [https://github.com/JetBrains/kotlin-native/tree/master/samples/androidNativeActivity](https://github.com/JetBrains/kotlin-native/tree/master/samples/androidNativeActivity) It is what I used as base, as for the other things, you need to specify the output type to be dynamic/static rather than klib or framework
I'm waiting for something like Electron to come out for kotlin/native. Yeah sure the apps will still be giant but apparently users are accepting of that now... Now thinking about this diabolical suggestion, you might not need a JavaScript engine if you can modify the dom from kotlin native, so just a HTML/CSS renderer. And all native. Might actually be interesting...
Possible starting point: [Write a lightweight, cross-platform HTML5 desktop app with Kotlin](https://medium.com/@lorenzoangelini/write-a-lightweight-cross-platform-html5-desktop-app-with-kotlin-1033eb708800)
Cool. Not native though, if you have to bundle a JRE it's just as lumbering as Electron. I found this: https://github.com/JetBrains/kotlin-native/blob/master/samples/html5Canvas/README.md
In Ireland got everyone on team to Kotlin+Spring on jvm, trying get thru to other teams in company tho there is a lot of snobbery from scala and. net people. Op can people from EU countries work in Norway? I daily get recruiters from UK but imho it be insane to move to UK and be paid not in stable euro with Brexit dark clouds hanging in air, I assume Norway is different?
Cool, what company? And ofc we can work in Norway.
Most roles I hear are through recruiters directly, so I don't know if those are reflected in job ads
I started out with java, but self taught... I had subpar variable naming thinking smaller variable names would make my program run faster. Then I found "real programming" and all of a sudden I appreciated java a lot more because I could read the code and know all the detail of what exactly is happening. Later I found another language called python and fell in love. It didn't require all the specificity that java did like `new`, giving the type everywhere, type declarations etc, and I was meticulous enough to avoid assigning something a type I didn't intend to, but that doesn't stop the user from doing it! IMO Python is a "responsible adult" language where you should follow the program's "guidelines" if you want it to work properly. And it was quick and easy to type and understand, and quick and easy to iterate on because it was interpreted. Fast forward another few years and Kotlin comes along and changes my whole view on JVM. Completely interoperable with Java (which has a huge ecosystem) while not requiring nearly as much verbosity while also allowing private (and similar) stuff and being a huge syntax improvement without suffering in readability while also allowing you to be explicit if you so wish. And operator overloading! I can now use `[]` on things I write rather than having to use `.get` and `.set`! I can now use `==` with proper functionality rather than referential equality! Kotlin's a blast over Java and I'm never turning back (unless I land a significantly better paying job that strictly requires java that is haha, but I will write java with regret and contempt).
Kunafa, discussed a few weeks back in this subreddit, is the closest thing I’ve seen to what you seek. https://medium.com/the-kotlin-chronicle/kunafa-easy-to-use-high-level-framework-in-kotlin-for-front-end-web-development-ee5237aea5b?utm_source=share&amp;utm_medium=ios_app
It's just following how it's treated by javac: [https://youtrack.jetbrains.com/issue/KT-15813#focus=streamItem-27-3273901.0-0](https://youtrack.jetbrains.com/issue/KT-15813#focus=streamItem-27-3273901.0-0)
&gt;e number of weebs from the West who can program and want to live an anime lifestyle with complementary Japanese girlfriend, all thrusting applications everywhere they can &amp;#x200B; As a foreigner, the huge wall is the language I had hard time to find a job because I can only speak my native language &amp; english But when you speak japanese, you can access nice jobs without experience. The market is growing because of the recent law who allow foreign people working &amp; futur olympic-games &amp;#x200B; I would say I work 45h/weeks ( wich is few compared to my japanese coworkers) and my salary is pretty low compared to what I had in my previous job
Huh, that article didn't mention how to have the html portion interact with the java backend and vice-versa. &amp;#x200B; I spent some time working on this a couple months ago, would anyone be interested in seeing a code sample or even a full article?
&gt; Making everything final by default. Doesn't Kotlin kinda do that too?
Yes but Dart doesn't :)
The easiest and most supported solution is probably using the JetBrains kotlin-wrappers: [https://github.com/JetBrains/kotlin-wrappers](https://github.com/JetBrains/kotlin-wrappers)
https://www.reddit.com/r/Kotlin/comments/bayzkh/cold_flows_hot_channels_in_kotlin_coroutines/
In your hacky solution to "having state", the actual state is stored in the singleton companion object, not the instances of objects implementing the interface. By that definition, anything that can access stateful global objects "has state". I think the article also somewhat confuses general programming definitions of interfaces and abstract classes with what is possible in Java/Kotlin in particular. Maybe it's just me, but it seems that articles from this site often start as a decent introduction to a certain topic, but quickly jump to over-engineering, hacks or simple misinformation. Are they ran by another Kotlin dev before publishing?
Why is it even nullable, if you use "!!" down the road, make it lateinit var.
What the heck did I just read.
In Kotlin, you don't need to have explicit getters and setters. You could just do this: class Joystick { lateinit var callback: (Int, Boolean) -&gt; Unit } fun main() { val joystick = Joystick() joystick.callback = {i, b -&gt; if (b) print(i)} joystick.callback(5, true) }
Can you do this class Joystick(val callback: ((Int, Boolean) -&gt; Unit)) { fun joystickStateHasChanged() { callback.invoke(10, true) } } class GameEngine { lateinit var joystick:Joystick fun main() { //Pass the callback to the function joystick= Joystick(::onJoystickStateChange) } fun onJoystickStateChange(buttonId: Int, isDown: Boolean) { //This will be called by Joystick class if ((buttonId == 10) &amp;&amp; (isDown == true)) { //Jump } } }
You don't need setters in Kotlin, properties already handle that for you. Instead, use a public `var`. To avoid nullability issues, you can set the default value to a no-op function. A quick rewrite of your code: class Joystick { var callback: (buttonId: Int, isDown: Boolean) -&gt; Unit = {_, _ -&gt;} fun onStateChange() { callback(10, true) } } class GameEngine { val joystick = Joystick() fun main() { joystick.callback = ::onJoystickStateChange } fun onJoystickStateChange(buttonId: Int, isDown: Boolean) { if (buttonId == 10 &amp;&amp; isDown == true) { // Jump! } } }
As mentioned in previous comments Kotlin generates the setter for you so there is no need to create a manual setter. Use a non nullable var and you can pass a method reference.
Maybe it's just me, but I don't like the whole 'use code to create html' thing (I know that Jetbrains has the same thing, or perhaps you're using theirs, I didn't check). I think if someone could come up w/ a `JSX for Kotlin Code` they would have a real winner.
why?
Totally agree with the function pointer. That just does not exist in the jvm. So kotlin can't implement it either. In the background there is just a generic interface for function references. These interfaces have a SAM. Because of that there is actually a limit on how many parameters you can use in such a "function pointer" because it needs a interface in the background to work.
Because the code version is more verbose, and one of the things I like about kotlin is its non-verbosity.
Not with Kweb: &lt;div class="ui icon input"&gt; &lt;input type="text" placeholder="Search..."&gt; &lt;i class="search icon"&gt;&lt;/i&gt; &lt;/div&gt; Translates to: div(fomantic.ui.icon.input).new { input(type = text, placeholder = "Search...") i(fomantic.search.icon) }
Keep up the nice work! :)
Thankyou for "var callback: (buttonId: Int, isDown: Boolean) -&gt; Unit = {\_, \_ -&gt;}" I actually need both technique, but did not know how to do the non nullable version.
We believe in you, Cast! You can succeed!
😂
You are both right. I used the term function pointer to help people like me : experienced in assembly, c, c++. No matter what you call them, in the end (once compile from byte code to native assembly) they are just pointers. OO programming is just intellectual masturbation and fancy compiler tricks. Everything will eventually have to run on real cpu with real instructions and real memory addresses. Suddenly I feel old and nostalgic.
But in my case, it is because I don't know where it is gonna connect yet. And it can change during execution. Someone above wrote the correct way to do it for my specific case.
I use that specific function, because I am porting an app. This is simply to make the code look the same as other languages.
That reminds me of [this poster](https://despair.com/products/incompetence)
Thanks :)
I get the sentiment, but if you are porting an engine to another programming language to be used by programmers familiar with that language I would advise you to use as much idiomatic Kotlin code as possible while still retaining the essence of your engine. Every Kotlin developer knows that assigning to a property will invoke an implicit getter so seeing something as simple as `joystick.callback = ::onJoystickStateChange` is familiar to them and it registers as “I am setting the callback of joystick to this function”. In fact, by not using a property you will also prevent Kotlin developers from using other idiomatic Kotlin concepts like the apply statement. For example ``` joystick.apply { callback = ::onJoystickStateChange, buttons = 3, name = "default stick" } ```
I get the sentiment, but if you are porting an engine to another programming language to be used by programmers familiar with that language I would advise you to use as much idiomatic Kotlin code as possible while still retaining the essence of your engine. Every Kotlin developer knows that assigning to a property will invoke an implicit getter so seeing something as simple as `joystick.callback = ::onJoystickStateChange` is familiar to them and it registers as “I am setting the callback of joystick to this function”. In fact, by not using a property you will also prevent Kotlin developers from using other idiomatic Kotlin concepts like the apply statement. For example ``` joystick.apply { callback = ::onJoystickStateChange, buttons = 3, name = "default stick" } ```
reminded me of my parents
You can have references in C++ too.
Of course but I am the one who will have to maintain this code on Swift, C# and Kotlin and else for the next 10+ years. So I like to keep things simple and uniform throughout the different platforms. Otherwise I would do exactly like the Kotlin people do. I will look into your .apply{} thing right away.
Here are my Calendar/Date utils, if anyone is interested: [https://gist.github.com/alashow/c2b433c61fac4f78da372c60f7618109](https://gist.github.com/alashow/c2b433c61fac4f78da372c60f7618109)
I crie evry tiem 😢😢
My favorite when using Android studio https://i.imgur.com/XyoGHWY.png
Cast, is that you my child?
Apache Shiro + Guice + Ktor gives you almost all the spring features, while being faster and IMHO less complex.
outcast
If you don't want something in spring, you don't have to add it, and the spring webkit is very light. And I mean if you consider using literally 100 lines for an entire login page complex in spring security idk. I've come to terms that for some reason people want to use 3 separate frameworks and I will never be able to change their mind. If you think spring is complex, then that's your choice not to use it, but I cannot tell you how much easier my life has been since I started using spring and kotlin. Idk do what you want, I'm just saying there's a better way
Did you consider Kotlin multiplatform support?
That's very judgemental of them
Actually references are a special type of pointers. They are restricted pointers without pointer arithmetic and so on and it does not belong into comments, because comments should not teach the programming language.
Thats hilarious!! 😂😂
Technically speaking, the type could be different at runtime (implement an additional interface) so the cast could actually succeed.
Go for it. You lose nothing by increasing your linguistic toolkit.
Sure, I can still use Java and if for special cases needed, I can use another one but for the most part it seems that Kotlin can do most stuff a lot of other languages can. So the thought was rather to pick it as my new main language
Can you explain what you mean? Do you mean using Kotlin on all platform. I can't do that because I need access to very low level api that are never available on Multiplatform sdk like Qt. PS : I am not working on a video game, but a custom webBrowser/OS for an accounting system.
Additionally to JVM byte code and Javascript Kotlin can compile to different native machine targets also (via LLVM).
Kotlin seems to be on track to become a big language to be used on multiple platforms but it’s not there yet. The mobile part Android/iOS is still in active development and looks promising. For desktop there aren’t any big toolkits that I know of yet, unless you count the Java ones like JavaFX and Swing and on the compile-to-javascript side it is also still in active development. Where Kotlin really shines at the moment is backend development. Either on existing Java code bases based on frameworks like Spring, and in greenfield microservice projects with tools like Ktor. I have high hopes for Kotlin to become this one language to rule them all language but we still have a long way to go.
I'm following up on the questions on the thread at /r/androiddev and I'm adding them to an [FAQ](https://www.reddit.com/r/androiddev/comments/be67wh/kotlin_keep87_brings_compilerdriven_dependency/el3kgm9/).
I think it makes more sense to use threads or coroutines, async task has a lot of overhead
What you want to do is hand a callback to your DownloadData AsyncTask to deliver your data to wherever it needs to go. \`\`\` var callback: ((String) -&gt; Unit)? \`\`\` Then in onPostExecute you can try to hand the data to the callback: \`\`\` callback?.let { it(result) } \`\`\` just remember to respect the lifecycle of your callback. The lifecycle owner should nullify the callback if the lifecycle will be destroyed, otherwise you might cause a memory leak. I would personally utilize a different approach, perhaps with coroutines or RxJava, but you asked about AsyncTask :)
FYI, I found this to be much easier to follow: [https://github.com/Kotlin/KEEP/blob/46e6a347432d868635e9c6161ca332581315b185/proposals/compile-time-dependency-resolution.md](https://github.com/Kotlin/KEEP/blob/46e6a347432d868635e9c6161ca332581315b185/proposals/compile-time-dependency-resolution.md) (Kinda wish people wouldn't link to twitter.) Anyhow, this proposal is really interesting to me. 99% of all DI use I've seen personally has been nothing but static, singleton style injection. This seems really, really cool.
I've been following along for a while, and it's exciting to see it progressing after all the work you guys have been putting in! I'm not too familiar with the process KEEPs have to go through to make it into the language. After it's submitted to the Kotlin team, what kind of timeline do you expect if this gets submitted? I think it would be amazing if this were to make it into Kotlin 1.4, but I'm not sure what's left to or what roadblocks could put up.
Is there a c++ *alternative?* How Kotlin is to Java.
The simple, "weird" semantics and attraction from less-educated fanboys helps with the massive adoption. Isn't that great?
I've been part of multi million+ LoC projects in Spring. I know spring, it's heavy and it's *very slow* (and I don't want to work with developers that say speed doesn't matter, that how we ended up with 30Mb static web pages)
I never said speed doesn't matter spring is very fast for me. I would never use spring for a static webpage either bc their is no need. I also said nothing about editing the spring source, what I meant was that if you don't want a part of spring you just don't add it to Gradle. Imo spring is the best framework of it's kind. I have built search engines with a DB with over 350 million rows that searches the thing in under a second built on spring. So I have never experienced any slowness with spring at all.
Kotlin is natively supported and is interopable with Java. So I think it's fair comparing it to Swift.
So this is basically implicit parameters/?
Kotlin for Android can be compared to Swift for iOS. It enhances development by replacing the native platform language (Java) with a more modern language that has more guarantees like nullability and is more ergonomic to write, just like Swift did for Objective-C. But, Kotlin is much more than that. Besides android, Kotlin can also be used on the JVM (think backend and desktop applications), on the web (compiles to Javascript) and with Kotlin/Native (in development) you can compile to native libraries and executables on linux/MacOS/Windows/iOS/Android/...
Only the non-crazy shit. We stripped down the import-scope stuff and added coherence, which are the major causes of pain. So there can't be three `String` injections in scope or orphan instances coming from god-knows-where.
Perfect, I've recently been trying to go Full-FP on a project and having `context` passed everywhere was really painful.
For now you can use this other approach: https://www.pacoworks.com/2018/02/25/simple-dependency-injection-in-kotlin-part-1/
See https://blog.gouline.net/kotlin-the-swift-of-android-d664f8997e7f from 2014
That's interesting, I'm curious about the best way to utilize this in writing a stateful interpereter, where context changes regularly (whenever a variable has been resolved/assigned for instance). In FP State should be immutable, so every update to `context` produces a brand new object, that needs to be passed to other functions.
&gt; In FP State should be immutable Yes but we're also for sanity. If you don't want to use a `State` datatype any AtomicReference field may hack it.
There was an attempt With D I think. I personally would suggest Rust nowadays for performance critical applications.
Perfect! Thanks!
Yes, Kotlin is the Swift of Android in the sense that it is currently the recommended language for Android development, replacing what used to be the de-facto standard (Java for Android, Objective-C for iOS). Kotlin and Swift are also quite similar syntacticly and share a lot of similar language features.
Have you tired Beaker? http://beakerx.com
Swift is the Kotlin of iOS 😉
Kotlin is a beautiful modern language. By learning Kotlin you’ll learn a lot about programming in general - even if your first few jobs don’t use it.
I just started using Tablesaw [https://github.com/jtablesaw/tablesaw](https://github.com/jtablesaw/tablesaw)
&gt; 99% of all DI use I've seen personally has been nothing but static, singleton style injection. What's the other 1%?
Scopes are a feature of Spring - inject an object created on a thread or session.
Can we consider kotlin as native on Android like swift. It still require a jvm right?
https://github.com/thomasnield/kotlin-data-science-resources/blob/master/README.md
Kotlin is just syntax sugar over Java.
Kotlin and swift are very similar, and Google just recently came out with a language that can code for both ios and Android at the same time can't remember what it's called.
how does it compare to dagger2 ?
Thanks, no, will check it out.
Thanks, looks nice.
Frankly not a huge fan of this, perhaps in part from a desire to keep Kotlin easily approachable with as little magic as possible. Decorating an argument with 'with' feels almost like unnecessary obfuscation also, particularly when it applies to an entire class scope.
As someone used to Guice and others like it, here's my couple questions: 1. Does this support named injections, e.g. something like `@Named("administrators") val administrators: Repository&lt;User&gt;`? 2. Runtime DI gives me several options on how the dependency is provided, namely (eager/lazy) singleton vs. new instance each time, injecting into `Provider&lt;MyType&gt;`, binding to a provider method, e.g. `@Provides fun makeNew(): MyType {...}`. Eager singleton vs. new instances seems to be supported by extension object vs extension class. What about the rest? Overall seems interesting, but I am not yet persuaded it provides enough configuration for anything that's not "use object A when interface B needed" or "make new instance of A when interface B is needed".
Java is just Kotlin's human-readable bytecode.
&gt; Does this support named injections Yes, follow [this thread](https://www.reddit.com/r/androiddev/comments/be67wh/kotlin_keep87_brings_compilerdriven_dependency/el3qalg/) &gt; What about the rest? Function providers/fields are considered in the proposal as future work. I can see `Lazy&lt;A&gt;` providers as a marker working in the future too. You can build it on your own with the current proposal at no cost by making a `Lazy` interface and wrapping your content in an inline class that has an extension class for that `Lazy`.
[Every app and even some system components on Android use a VM](https://medium.com/masters-on-mobile/the-zygote-process-a5d4fc3503db)... That's the reason why JVM Bytecode is considered native in the Android ecosystem. You can of course write and run native binaries for performance critical applications like games etc. with the Android NDK but even then your app will include JVM code to interact with the Android framework.
From what I've seen, these end up being glorified thread locals hidden away behind cglib-generate proxies. The abstraction of the session object even leaks if you do something like push work off to another executor, as the thread-local doesn't propagate.
Ok, I'll bite. Do you mean that in a dismissive way? And if so, what's the problem? Kotlin Apps for the JVM can use the enormous and mature Java ecosystem with a modern and much less error-prone language. If you call sealed classes, delegated properties, a better type system etc. just syntax sugar, then every languages is also just syntax sugar over Assembly and we should dismiss any discussions about other programming languages?
Yeah, I didn’t say it was a great use case, just a feature of some popular runtime DI systems (I thought guice did something similar). And one a lot of devs seem to just not even be aware of. In the end this is why i like the idea of just DI at compile time. If I want something created on a thread I can... make a thread local factory. It happens so infrequently it’s not a big deal.
I believe it was even marketed as the Swift of Android for a while by JetBrains.
You could ask IntelliJ to extract (via Refactor &gt; extract &gt; function) the lambda body of 'intercept' to a function. You could even refactor the intercept function with that specific lambda into a new extension function.
Kotlin is the Swift of most platforms. Including iOS.
You're thinking of Google's Flutter framework, written in Google's Dart programming language. It's a cool concept but it still has a long way to go before it ends up in heavy rotation in my opinion. It's really fun to play with, but the Dart ecosystem is severely lacking (it's been around for a few years now, but literally nobody but Google uses it, so there's not a big selection of libraries for it).
Huh? Kotlin doesn't ever compile to Java source (that would be transpiling anyways), it compiles to Java bytecode. Kotlin's bytecode is literally exactly the same as Java's, and bytecode doesn't need to be human readable anyways.
It was an attempt to say something of equal validity as your statement. Seems it worked.
Dart, that's what it is. I looked at it and idk what I think about it, it's kinda wired I'ma just stick to kotlin
Yeah I looked at it, and I thought something similar.
"Any sufficiently advanced technology is indistinguishable from magic." -- Arthur C. Clarke The argument about too much magic in code is a result of a subjective look at a tool and not focusing on its actual face value. Hell, I remember back in the days of the introduction of generics to Java 5 people using similar arguments. Or when they introduced "for-each" loops. Or when they introduced the ternary operator.
It's a Map&lt;Type, Value&gt;, the compiler goes look for them when it finds with. The scoping stuff is the same as extension functions give you, for full interfaces.
I'll add an even stronger point: Kotlin's coroutines compile to bytecode that is not expressible as Java code.
Inside the lambda of the on click listener for the button, write imageButton.setOnClickListener{ imageButton.setBackgroundDrawable(R.drawable.your_background_image) }
Even in the broadest interpretation, your claim that Kotlin is just syntax sugar over Java directly entails that "all Kotlin programs compile to such bytecode that is expressible as Java source code." The latter statement can be easily disproven on the example of Kotlin Coroutines.
if you want to change the bg button while pressing provide feedback of click i suggest you to use this lib ([https://github.com/duanhong169/DrawableToolbox](https://github.com/duanhong169/DrawableToolbox)) not mine. it does a lot of things and it's just fantastic
I needed to add &lt;Button&gt; in val line... but I am getting strikethrough text on the setBackgroundDrawable text. Here's the code... package com.example.randomiser import android.os.Bundle import android.support.v7.app.AppCompatActivity import android.widget.Button import android.widget.SeekBar import android.widget.TextView import java.util.* class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) val rollButton = findViewById&lt;Button&gt;(R.id.rollButton) val resultsTextView = findViewById&lt;TextView&gt;(R.id.resultsTextView) val seekBar = findViewById&lt;SeekBar&gt;(R.id.seekBar) val buttonMilana = findViewById&lt;Button&gt;(R.id.buttonMilana) val imageButton = findViewById&lt;Button&gt;(R.id.imageButton) imageButton.setOnClickListener{ imageButton.setBackgroundDrawable(R.drawable.nought) } rollButton.setOnClickListener { val rand = Random().nextInt(seekBar.progress) + 1 resultsTextView.text = rand.toString() } } } &gt; val imageButton = findViewById(R.id.imageButton) &gt; imageButton.setOnClickListener{ &gt; imageButton.setBackgroundDrawable(R.drawable.your_background_image) &gt; }
Apologies about the formatting...
&gt; strikethrough text on the setBackgroundDrawable text Can you explain what you mean by this a little more?
Sure... &amp;#x200B; imageButton.setOnClickListener**{** imageButton.setBackgroundDrawable(R.drawable.nought) **}** &amp;#x200B; In the code above, in Android Studio... the word setbackgroundDrawable is strikethrough text i.e. there's a line through it all. When I hover over that text, the message pop up says... &amp;#x200B; 'setBackgroundDrawable(Drawable!): Unit' is deprecated. Deprecated in Java &amp;#x200B; I can't find a way to post a screenshot of it for you.
Try setBackgroundResource
Selectors is what you're looking for
Replace it with "addBackgroundDrawable". If you travel to the Javadoc for that method, it will tell you what the replacement it. Ctrl-click on Windows or Cmd-click on Mac on method name to go there. Also you can right-click on it and go to its implementation. You should also be starting your project with AndroidX instead of the Android Support Libraries.
This ^
Hello, nDRIUZ. It appears that you have broken [Redditquette](https://www.reddit.com/wiki/reddiquette), which states not to leave comments that add nothing to the conversation. Please do not comment "This", as it adds nothing to the thread. If you agree with a post, use the built in upvote system made for this exact purpose.
Hey Lord AntiLowEffortBot. I think you're on the wrong website. Reddit is an entertainment site, what were you expecting? People ain't gonna stop these jokes cause a bot told 'em to. Please stop spreading hate. This is a bot. Beep boop.
Make a typeclass that provides things on a pre-applied CoroutineContext and then use inline classes to wrap what you want to get. interface GetInContext&lt;A&gt; { val cc: Context val provider: () -&gt; A fun getInContext(): IO&lt;A&gt; = IO.defer(cc, provider) }
the strikethrough is most likely caused by how you are retrieving the drawable may need something along the lines of &amp;#x200B; ContextCompat.getDrawable(context, R.drawable.{name of drawable})
I use krangle. It is similar to pandas. Seaborn is a pain in the ass. I found it much easier to export my analysed data into and excel file where preconfigured graphs are set in different sheets.
Swift also runs on backend, desktop apps, compiles to WebAssembly, and can create native libraries on Linux/MacOS/Windows/iOS/Android.
Java? Most of their cross-platform does use j2objc and GWT/j2cl...
Nah, it's a language called dart
This isn't really true. Just because the bytecode it emits doesn't run through a decompiler well does not mean it can't be expressed in Java. After all, it's "just" callbacks and state machines, and both of those aren't hard to write in Java. It's just that the verbosity of writing the equivalent of a bunch of coroutine code quickly balloons into 10-100x lines of Java.
There's also control flow that doesn't map to any structured code. But if you want to argue that it is possible to write some code, with no matter how much duplication or performance loss, that would perform the same computation, then we can stop at the simple truism that both Java and Kotlin are Turing-complete languages.
Take a look at the dokka project and Gradle plug-in. It adds Gradle tasks to your project for generating a documentation site from KDoc comments.
Unfortunately there's a long outstanding bug with Dokka that it doesn't currently work with newer versions of java: https://github.com/Kotlin/dokka/issues/294
A few days ago, Microsoft Research launched a new programming language named Bosque. There seemed to be a lot of similarities between Kotlin and Bosque, so in this blogpost I dive a bit into the similarities and the differences between the two.
Yes I was making a joke. Although Dart is a pretty good joke too!
&gt; However, I had a different point: you can't claim Kotlin is just syntax sugar over Java unless you can prove that, at the very least, all Kotlin-generated bytecode is expressible as legal Java source code. I mean, you can get to about 99.9% coverage which is Good Enough™. Java is just syntactic sugar over Java bytecode but it can't represent all bytecode forms either. So I find this to be a useless metric, regardless of how incorrect it is calling Kotlin "just syntactic sugar" for Java. It's not. But also, yeah, it just is.
The only difference that comes to mind is that Swift is developed by Apple whereas Kotlin isn't developed by Google but now adopted as first-class citizen. Other than that I think it's fair to make that comparison.
Unless we at least agree on the definition of "syntax sugar", this is not really a discussion but a statement of opinions on disparate topics. Under my definition, neither is Java sugar over bytecode nor is Kotlin over Java. Another criterion, that I haven't stated so far, is that any local change to the "sugared" code must result in a local change on the "desugared" code. This might be the essential feature needed to call some feature "just syntax sugar". Kotlin's features like null safety, inline funs and declaration-site generic type variance defy that.
Site seems to be down: This site can’t provide a secure connection www.jworks.io sent an invalid response. Try running Windows Network Diagnostics. ERR_SSL_PROTOCOL_ERROR
Do you have a virusscanner installed, maybe Malwarebytes? https://downforeveryoneorjustme.com/jworks.io
Yes it is lol, sorry
I'm using the Brave browser on Android. I also tried using Chrome on Windows. Going straight to the cell tower by turning off WiFi on my phonr makes it work so it looks like my router is blocking it for security reasons.
For what its worth, it works fine from here and chrome shows no errors. SSL cert looks fine too. Curious what kind of router you have.
Awesome article. I really dig the similarities between typescript and kotlin, good to see other languages use some of the same syntax.
&gt;This website has been reported to contain the following threats: &gt;Phishing threat: This is a phishing website that impersonates a trusted website to trick you into revealing personal or financial information.
My router is an Asus RT-AC5300
Thanks, appreciate the feedback!
Wow, that's interesting. Thanks for letting me know, I'll have a look to see if I can reproduce/fix it.
Accept remote workers?
The difference is we get holidays and aren’t expected to work more than 40 hours in Europe.
Hi, co-organiser in Sydney here. What we found to work reasonably well, is to have Java presentations be adapted to Kotlin. It's an easier way to get started. Another way to get presenters is to have the venue owners supply a presenter. They're usually quite willing to do that, since it's their venue, and gives a bit of promotion to them. Having said that, finding presenters is often the most challenging part! PS: we also give the presenters a bottle of Kotlin. I'm not sure if that really helps, but it's the gesture that counts I guess :-)
The venue will likely be the new offices my company just moved to and/or a local tech hub. So I’ll need to find presenters myself, I do have a small contributed budget though so the gift could be a good idea.
sounds good buddy I'm a kotlin developer in Edinburgh and I would likely come along (:
Excellent, that’s one ;)
In that case, I'd reach out the Java community, and see if you can (help) port on their presentations to Kotlin. We had someone from Vaadin doing that, and it was a great presentation in the end.
Software engineers are so in demand in the US, you can get both here as well. Your spouse man not be so lucky though.
I work with lots of US devs and they constantly complain about holidays and hours they need to work. Never worked there myself but the workings balance always sounded terrible
We created a collection of animated puzzles for one of our meetups to allow attendees to try out Kotlin in a fun setting: https://github.com/dan-rusu-personal/Kotlin-Waterloo-AMaze Everyone really enjoyed it (especially the silly sound effects).
Excellent. I’ll have a look :)
Bottle of Kotlin? Is there a wine or liquor named Kotlin that I've never heard of?
https://fabko.com/ketchup-mustard-mayo-horseradish/4611-kotlin-ketchup-mild-lagodny-450g-5900385012573.html ;-)
Wondering how stable Kotlin to JavaScript compiler? And the final compiled \`build.js\` size?
Take a look at KVision [https://github.com/rjaros/kvision](https://github.com/rjaros/kvision). It integrates many different libraries and provides a uniform and consistent development environment for Kotlin/JS.
Second ofc
Yes, this. Kotlin actually came before Swift. -Kotlin was announced July 2011, and they'd been working on it for a year -Swift was announced in 2014, though they'd been working on it since July 2010 So they were started around the same time, however Kotlin was open sourced for the world to see in Feb 2012
There won't be any cases where you wouldn't be able to do something in kotlin that you can do in Java. The main thing I'll point out though is kotlin is mostly gaining steam in Android development. It'll grow into other areas eventually I feel. I'm a professional Java developer and for personal projects I only use kotlin.
[removed]
That hasn't been the case anywhere I've worked. Everyone is struggling to hire and offering perks like unlimited vacation policies and &lt; 40 hour work weeks.
Hi everyone, author here. Just want to provide a little more background on this. [Slate Kit](https://www.slatekit.com) is a collection of utilities and architecture components that are designed to be used for **both** Android and Server. It is comprised of over 12+ modules. This is the **1st stable 1.0.0 release** of just the **[slatekit.common](http://www.slatekit.com/utils/overview/)** module which contains several utilities such as ( env(dev/qa/prod) selector, argument parser, validations, templates, diagnostics and much more ) and really serves as an extension to the Kotlin standard library. This is shared across all other components in Slate Kit. Slate Kit has been a passion project of mine for the past several years while building out mobile apps for Android and iOS and also during a start-up initiative. It was built to address several issues : 1. centralization of common code 2. generalization of code to work for both android and server 3. clear separation of business vs technical / support features 4. an emphasis on strong typing, immutable state, functional programming 5. use of 100% kotlin :-) ( it was actually converted from Scala ) Over the next few weeks, several of the other modules will slowly be released as stable 1.0.0 releases. These include an App component, Entities, Workers ( like Ruby SideKiq ), and more. There is a lot of documentation on the site, but it is slowly being updated and there may be missing links/typos/etc. Feel free to ask my me any questions, but please understand that the docs, linters, and other tooling will be ironed out over the next few weeks. Regards, -K
What's the yearly cost of hiring a good senior developer in Oslo, Norway? (i.e. what the company pays out total, before taxes).
The salary will vary a lot. For a person with five years of experience you will pay 650.000-800.000 NOK per year. On top of that employer will need to pay something like 20-25% in various taxes/expenses.
So the upper bound for cost is roughly 800k*1.25=1M NOK per year Which is equal to about ~100k €/year
Correct
This is going to sound harsh, but you're charging money for this, so I'm going to give you feedback as if I were a potential customer, not a /r/kotlin community member. * Your intro says "Slate Kit is a Kotlin based open-source set of libraries." but at the very bottom of the page you write "Hybrid Open-Source. Majority is open-source except for some parts of the SlateKit.Ext project containing the mobile / web features". It's not open source then. * Hobbyist, Startups, Small business and Enterprise have very different needs, it's suspicious that your project is a great fit for all groups. * You say it would take a "fraction of the time" to get started with this compared to other frameworks, yet I have no idea how to get started from looking at your website. Where are the guides and examples? Coming soon? Why did you announce v1.0 when none of the docs are there? * Your comparison to Spring lists a number of pros for your project, but absolutely no reasoning behind them. There's also functional Spring (spring-fu), Spring also runs on existing HTTP libraries, Spring can also be used on Android. * Your comparison to vert.x says "it's the same as for Spring", but these two projects are completely different. * Your tech stack is a collection of libraries which have very different APIs, and you say "Designed for low vendor lock-in via a library based approach.", but if you use SendGrid or Twilio, that's basically vendor lock-in, you'll have to rewrite everything if you want to switch to a different provider. Or have you written your own abstraction layer on top? (in which case it's more of a framework approach?) * There are *a lot* of 404 pages on your website. It looks like way more effort has gone into the design than the content. * The project has 0 other contributors, what happens if you stop working on it? Again, I'm sorry if this is harsh, but once you start charging money you shouldn't call it "passion project" anymore, you need to treat your users as customers. Personally I would never pay for this, as there are so many great alternatives which are already free and have huge communities. If you're really looking to get paying customers I think you have to refine your business strategy. Find something you're good at and focus 100% of your efforts into being the best at that. After spending an hour on your page, this is the sales pitch I'm hearing: "Slatekit - A semi-open source framework perfect for hobbyists, startups, small businesses, and enterprise. It's great for both both Android and server side applications. It's made by one person, but it's better for you than Spring (which has hundreds of contributors and a huge community), but I can't tell you why. Also, the documentation and examples aren't complete yet." It's not a very convincing sales pitch. --- As a /r/kotlin community member though, it definitely looks like you have the potential for something here! Clearly a lot of effort has gone into the project overall, but I think you should have refined it a bit further before releasing it. You should put in a lot of effort in the next days to get the website fixed, because you only get one chance at a 1.0.0 release. Best of luck!
Thanks for the feedback. I'm going to clarify some items and address some of your comments ( based on legitimate confusion from either the docs and/or the verbage, and from your own assumptions ). 1. **Free** : The libraries are in fact open-source ( majority being under **Apache 2.0** and 3 under **LGPL v3**. I've updated the git main page and also the main link to the utils page. 2. **SlateKit.Common** The library slatekit.common ( 1 of more than 12 ) that I specifically linked to is in free under **Apache 2.0** 3. **Hybrid**: The **slatekit.ext** you refer to which i mentioned as being "hybrid-open-source" is not used in any of the components available anymore. This was a good catch! I've just corrected it and removed the reference. That is currently private and may become available as either a **SaaS** or on-premise install offering. On a philosophical level, many open-source projects do work in this way and much of them are in fact still open-source. I believe this may be referred to as an **open-core** / SaaS model. 4. **Demographics** I'll agree to disagree. IMHO, many projects are in fact quite flexible and versatile enough for general purpose use for hobby, startup/small business and enterprise. Rails SideKiq is a great example and as several others irrespective of tech stack. Slate Kit can potentially support Enterprise level functionality down the line but I will correct the portion to emphasize that the focus currently is still mobile apps with a Server backed and start-ups. 5. **Comparison**: I've said positive things about both Spring and Vert.x and made clear distinctions to Slate Kit. To recap, I particularly noted about smaller/lighter set of modules and emphasis on both Android/Server support, and being in Kotlin. I didn't imply that the others can not be used for both android/server, but this cross-platform nature of the libraries is a core design aspect. 6. **Vendor lockin**: Correct, there is a light abstraction layer for sending SMS/Email/Push messages. Low vendor lock-in does **NOT** mean **0 vendor lockin**. Its relative. The libraries convert simple message models to Http requests. The same is true for other cloud services. There are thin abstractions for Queues, File storage with default implementations for **Aws** S3/SQS. 7. **Docs/404's**: I linked to the Utils page directly where majority of the links work. I also **specifically** mentioned in my comment that the docs are being worked on over the next few weeks. There are references to the gradle setup, and clicking each item, icon will display the example of its usage, source code, and other links. 8. **Contributors**: Yes, I'm the sole engineer ( although there are 2 people who help on QA, and the testing of the actual apps that leverage Slate Kit ). Its damn hard to get people involved. Different motivations, skill levels, goals, philosophy etc. I have a deep investment in Slate Kit for the long-term due to ongoing free-lance work that is tied to it. Slate Kit is also heavily used for a major mobile consumer app being developed at the moment. Since the library is fairly modular, I believe it was appropriate to start exposing the smallest, most useful parts of this library on the path to a broader incremental release of all the other 12+ components over the next few weeks and summer. MVP's have to be cut off at some point and delivered for public consumption for feedback ( even though we have been "dog-fooding" our own product for almost 2 years ). I hope this clarifies some of the confusion for you as well as for others. Regards, -K
Do you think Kotlin will phase out Java? Or python? Does anyone know if this is program is good for beginners?
This is pretty cool - but hasn't jitpack supported shields for a while? I've one on my repo for a few months now: [https://gitlab.com/yak-stack/yak-library#include-me-d](https://gitlab.com/yak-stack/yak-library#include-me-d)
It was only version. Now you can get monthly or weekly download badge.
[https://twitter.com/edi\_kug](https://twitter.com/edi_kug)
I would create something like this ``` fun test(t: (String) -&gt; Unit){ switchAdmin.setOnCheckedChangeListener {_, isChecked -&gt; if (isChecked) { (should return "admin") as a string } else { (should return "child") as a string } } } ```
setOnClickListener doesn't allow you to return anything from it. The easiest would be to set the property in your class, outside of any methods, and then in your onClickListener do your if else and assign the appropriate value to this property.
I would create something like this: ``` fun userType(type: (String) -&gt; Unit){ switchAdmin.setOnCheckedChangeListener {_, isChecked -&gt; if (isChecked) type("admin") else type("child") } } ``` And then listen to this function: ``` userType { type -&gt; val user = User(...) //Your actions here } ```
Setting the OnCheckedChangeListener should be done in a different part of the code. If you are just creating a user based on the current state of the checkbox you might not even have to set the change listenere at all and you can just request the current checked state. Something like: ``` val accountType = if (switchAdmin.isChecked()) "admin" else "child" val user = User(username, firstName, accountType) ```
Can run, not does. As far as I can tell, Swift is not much if at all used outside of iOS. It just theoreticallly is capable
The name makes me think of https://pixelastic.github.io/pokemonorbigdata/
I'm really interested in this. I'm also a Kotlin developer in Livingston!
This is a great initiative. It still is early but I am excited to see where it goes
The name definitely comes Pokemon, but people can pretend it references the physical constant if they prefer.
https://twitter.com/edi_kug I’ll keep this updated. I’ll also be looking for speakers if you have anything to say :)
Classes everywhere and that ugly Kotlin HTML library. How is this an advance on anything?
I'm excited too, can't wait to see what'll happen.
This is an interesting proposal, implicit values and parameters are something I miss from Scala. I have a couple of issues with the current proposal though. A constraint interface's methods should not be automatically in scope in a constrained function/class, it doesn't really save much effort and makes the code harder to understand. Without an IDE you have to exclude all other possibilities before you can assume it's a method call on a "with" parameter (we already have this problem when calling super interface/class members). Looking for constraint extensions in subpackages of the target type or the constraint interface is a bad idea and seems like a great way to slow the compiler down (is it?). It will make it very hard to figure out what code is getting called without an IDE. A step 0 should be added to the extension resolution order though that says "The call-site scope" if that makes sense. "with" and "extension" don't make much sense after my suggestions, "implicit" from Scala is much more apt. Other possibilities are "injected" and "provider" for "with" and "extension" respectively. Keywords used by DI frameworks would make this feature instantly recognizable and easy to understand by most developers. Function and property extension providers is something we should definitely steal too. I would even prefer to have these and not have extension classes and objects. This will add maximum flexibility for minimum change. Can't the problem described under "Type-side implementations" be solved with a compiler error telling you to make sure there is only one valid extension in the nearest scope? So in the example code you'd either delete one extension implementation or define a new one in a closer scope. So to summarize, I think this is a great idea! But please simplify as much as possible.
It improves on React + MobX + Kotlin wrappers by being written completely in Kotlin. So if you want to write all your code in one language and share some code across server and various clients, the experience will (eventually) be much smoother than using wrappers around JS libraries. Using the same view code on the (JVM) server and the web client will also be very useful for improving performance. At the moment this is only really possible with Node and frameworks like Vaadin IMHO. &amp;#x200B; What bothers you about which classes? Are you looking for a completely functional approach? &amp;#x200B; Also, less importantly, it doesn't actually use kotlinx.html. The html DSL is very similar though.
This article did not provide more information than the title itself.
&gt;We’re asking Android engineers to review iOS pull requests and vice-versa We also started doing that a while ago, it's a simple way of knowledge transfer. I thinks it's great that both platforms have matured significantly, but I'm starting to lose faith in the whole "cross platform" development thing. It will **always** be a compromise, and if you need a compromise and a have use case that's simple enough: a Web solution might still be the best way forward. After all: it's the ultimate "cross platform-platform"! If you want to ensure tight OS integration and don't want to compromise: you probably won't be able to bypass writing actual native code for each platform 🤷‍♂️
nice catch at the end.
Actually a nice demo of TDD.
It's pretty damn sweet, though. `sealed class` + `when` solve a lot of pain you could end up with in Java, and that's just one out of many.
If it can boost Kotlin adoption for iOS, why not. However it definitely seems that XCode is not really the best IDE you want to work with for Kotlin...
I fully agree I but I think the big thing here is that you can debug while running on iOS. Not sure if you can do that otherwise
AppCode also lets you do that, although there are other issues
Appcode does, but the Swift debugger variable inspection is inferior to both intelliJ and XCode. Not sure how it'd be for kotlin, but I could see it doing well being first party.
Arrow is there tooooo 🎉
Glad to see Kotlin getting some more much deserved press, but.... https://twitter.com/gregyoung/status/664094658696466432
Top marks for meta joke right there... :)
This is the point at which you should question your use of a class hierarchy for heterogeneous data.
I disagree with the premise of the question. Maybe it's an interesting puzzle, but I would much rather call `Dog.withoutBreed()` or similar than leave the class name bare -- intent should be visible in code.
you could use the elvis operator, like this: `var a: Int? = null` `a ?: kotlin.run {` `a = 3` `}` or `var a: Int? = null` `a?.run {` `a = 2` `}` `?: kotlin.run {` `a = 3` `}` &amp;#x200B; so if a is null at the end it will have 3 as value. if a is not null it will change to 2
 var?.let { // Some stuff }
&gt; My ultimate goal is to re-assign variable.prop to another value if it is null at this point. Why not building your function? fun &lt;T : Any&gt; defaultIfNull(variable: T?, default: T) = when (variable) { null -&gt; default else -&gt; variable } (Sry for wrong code/format I'm on mobile. Something similar to the above would do the trick)
As the author of both the post and the plugin, I'll chime in here. As stated in the post, this is definitely \*not\* intended to be a good editing experience. There are zero plans to make a more extended "plugin" that will make Xcode a great IDE for Kotlin. The idea is that on teams with iOS engineers that will need to consume and interact with Kotlin code, being able to debug in their tool will be a huge step in "selling" adoption. My hope is that AppCode turns into "the" integrated tool, and considering IDE's are basically Jetbrains' core competency, I fully expect them to succeed. However, convincing teams to try shared Kotlin out will be more difficult if part of the pitch is, "Oh, yeah, you also can't use Xcode for debugging". As of today, App Code uses the llbd format scripts that ship with Kotlin native, which are the basis of what the plugin uses. We've added some optimizations for visual debugging, so hopefully this work will actually improve the AppCode experience as well. We'll see.
Wait, you want to reassign it... If it is null? var a: String? = null a = a ?: "Not null" Done
a) DRY (if this is done multiple times) b) 'a' is still a nullable receiver which would obfuscate readability
 variable.prop = variable.prop ?: defaultValue Example: var temp: String? = null temp = temp ?: "hello" println(temp) //prints "hello The reason I suggest this way is not only that its really simple but you mention that its only at a specific point which occurs later than the original initialization of variable.prop to null that you want to reassign it. If it were at the init then I would say never let it be null in the first place using one of many available standards, but /u/cbr600f 's suggestion makes the most sense.
I would prefer make this function as an extension function and refer variable as this.
If your action is just setting default value, you could youse elvis operator( ?: defaulVariable )
To answer some comments here: yes, this is a thought exercise, and in an real API there'd be many other ways to go about both API and implementation.
This riddle reminds me of this fantastic blog post about how using the type system to try to enforce user behavior is usually a path to madness: &amp;#x200B; [https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/](https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/)
Best solution to handle null values in a smart way is like this : https://discuss.kotlinlang.org/t/let-vs-if-not-null/3542/4
This less readable than if(blah == null) {} imho
not really for beginners not complete guide. more of a comparison between kotlin and java. but good start!
You can do something like &amp;#x200B; `inline fun &lt;T&gt; T.guard(block: T.() -&gt; Unit): T {` `if (this == null) block(); return this` `}`
You can do something like this inline fun &lt;T&gt; T.guard(block: T.() -&gt; Unit): T { if (this == null) block(); return this }
You can do something like &amp;#x200B; inline fun &lt;T&gt; T.guard(block: T.() -&gt; Unit): T { if (this == null) block(); return this }
You can do something like &amp;#x200B; inline fun &lt;T&gt; T.guard(block: T.() -&gt; Unit): T { if (this == null) block(); return this }
Agree with the premise, not with the example. I would just make `Player&lt;W : Weapon&gt;` and `Wizard : Player&lt;Staff&gt;` or something similar
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/edinburgh] [Edinburgh Kotlin Meet-up](https://www.reddit.com/r/Edinburgh/comments/bhlcbk/edinburgh_kotlin_meetup/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I think you've nailed it - it's more to do with intent. Are you exposing a function that ultimately just returns state, a property makes sense and is more idiomatic than a function/method, which implies some action takes place. It's more about what the engineer should be expecting. A property that blocks and resolves a value over the network for example might be misleading, as an engineer would usually expect a property getter to not throw, whereas it would be reasonable to have that expectation on a function throw (although you would be better served returning a future or a result object in that case but you get the idea).
Why `internal`?
This is significantly stylistic/convention-based, and I don't know if there's a universal best-practices answer. I personally use methods to indicate that there may be significant computation involved in producing the result, so the user may want to avoid calling the function multiple times if they don't need to. On the other hand, a property suggests that whatever computation is involved is relatively light (arithmetic, some light object construction, etc.), and the user should be free to refer to the property as if it were just a field. The point where this breaks down is compatibility: if I'm restructuring a class and a formerly-accessible field is no longer available, I'll use a computed property even if it stretches the bounds of "light computation". Depending on the situation, I might throw a deprecation on it as well and provide a preferred method, but it'll work just to get things migrated. In your `MutableList` example, I would use a method because there's significant allocation.
IMO you are using the property as a function. What you are actually doing in your code is creating a mutable list every time you call either numberList or getNumberList(). So if you did numberList === numberList, that returns false, and that is not what one would expect comparing the same val. If you use by lazy the result would be cached and I think it would be ok.
I'd be keen just out of curiosity. Not developed in Kotlin before.
Excellent. What do you use, mainly?
Java but from what I've read it's a fairly easy move between the two.
I support this reasoning, but I've found another field of applicability of \`val\`s: conversion methods. For example, \`radians.toDegrees\`. Similarly, you could have other verb-like vals whose name makes it clear it's doing more than just giving you a value: \`builder.build\` for example.
You should use a function. I expect properties to always return the same object, not generate new ones.
It's very easy. It's much like Java with some more functional support and much less boiler plate. Does give enough freedom to make very nice or very, very ugly code ;)
&gt; Does give enough freedom to make very nice or very, very ugly code ;) So pretty much the same as java then.
I don't think that calling this guide "complete" is correct, given that it only covers a small percentage of the language features and does not explain any concepts.
I think a beginner can get started with Kotlin using this. Hence, I named it Complete. Any suggestions what should be added ?
There are plenty of extension properties in Kotlin for Android which violate your test, though. For example, "ViewGroup.children"
This is one of my least favorite favorite features of Kotlin. It's just a weird alternate syntax for a function. It confuses the caller. In my opinion they should almost never be used.
Super; how do you represent "A wizard can use a staff or dagger, and a warrior can use a sword or dagger" in your proposed system?
In addition, it also allows misuse such as making a property do a long running calculation to return a value, or trigger side effects. I know that's not OP's example but I'm just saying the feature can easily be misused because it's not clear what it's for.
That is true, and I'm sure they have a lot fo good reasons to do it. &amp;#x200B; But I think that when you do that, you're just ignoring what "val" means, when I read it at least I expect it to be immutable, and in this case it is not. &amp;#x200B; I just think it is easy to reason over the code if it is function and it is also possible to give a better naming to it. No one would expect generateNumberList() == generateNumberList() to be true
I asked the same question on the forums here: https://discuss.kotlinlang.org/t/extensions-val-vs-zero-arg-fun/11103
Kotlin conventions suggest using a property when the underlying algorithm: * does not throw, * is cheap to calculate (or cached on the first run), * returns the same result over invocations if the object state hasn't changed. source: https://kotlinlang.org/docs/reference/coding-conventions.html#functions-vs-properties
Thanks that makes sense.
“val” on a property doesn’t mean it’s immutable. It means the property is read-only, according to the docs.
The issue isn't that it's a typealias. Inline `myBool = Boolean` and you should still get the same error. `this` is not an identifier to which a value can be assigned using the assignment operator `=`. Compare it to an assignment expression like `20 = 12`. In both cases, the receiver of the assignment is a reference to a value which cannot be changed. Based on how your function `ezmFlip` actually returns a value, maybe instead you just want the body of the function to be `return !this`?
You're function is returning `Unit`. Inline the body or return the expression.
Okay, in that case I'd actually reverse the approach. Here is the program I'd use in kotlin for that sealed class Either&lt;out A, out B&gt; { class Left&lt;A&gt;(val value: A): Either&lt;A, Nothing&gt;() class Right&lt;B&gt;(val value: B): Either&lt;Nothing, B&gt;() } interface Weapon interface WizardWeapon : Weapon interface WarriorWeapon : Weapon interface Staff : WizardWeapon interface Dagger : WizardWeapon, WarriorWeapon interface Sword : WarriorWeapon sealed class Player&lt;W : Weapon&gt; { var equippedWeapon: W? = null class Wizard : Player&lt;WizardWeapon&gt;() class Warrior : Player&lt;WarriorWeapon&gt;() } val party = mutableListOf&lt;Either&lt;Player.Warrior, Player.Wizard&gt;&gt;() fun main() { party += Either.Left(Player.Warrior()) val partyMember = party[0] if (partyMember is Either.Left) { partyMember.value.equippedWeapon = object : Dagger {} //partyMember.value.equippedWeapon = object : Staff {} --won't work } } `Either` here is a tagged union, which is a relatively common structure. On Kotlin it could come from, say, [Arrow](https://arrow-kt.io/docs/arrow/core/either/). If there's multiple possible classes, you'd probably get some other structure. This also has the added benefit of being able to define class specific properties better, so any WizardWeapon could have Spell Power or something like it. The problem with doing **everything** in types is that eventually your type system just becomes a liability due to how much stuff you need to navigate through it (in this example Wizard could end up with the signature of Player&lt;WizardWeapon, WizardHelmet, WizardBodyArmor, blah blah&gt;). Eventually adding a runtime check will just become a simpler solution that's 99% as good.
In his example, `val numberList` would return the same object. Once a `val` is set, it never changes. The custom getter there is how the constant will be initialized but after that, the getter is never called again. Its value is saved as `numberList` and will always return what the getter originally calculated in the first place. By comparison to `fun getNumberList()`, when called, this code will run every single time it's called, thus the calculation is done every single time.
This might be ok, and I don't want to devalue your approach. The blog post above was mostly a round-about way of stating the old game-design wisdom that the objects that represent the 'things' in your game should not contain information about how they interact with other objects. Interactions between objects should be handled separately and outside either object, since it is almost never correct that one object 'knows' what should happen when it interacts with a second object, since this means in practice the second object has to equally 'know' what to do when interacting with the first, and keeping these things in sync is silly.
If he had done `val numberList = ...` then you would be correct. But the custom getter in `val numberList get() = ...` will be run every time.
My suggestion would be to omit the word `Complete` so that it's a better representation but it's up to you
I was asking what to add to the content to make it complete for beginners.
I only use properties when performing constant-time operations (or cached after first use). Even simple things like string concatenation fails this requirement.
Why do you expect that? Mutable properties is a good counter example in that case. I think it's easier if it's something a class does -&gt; it's a function
Awesome
 typealias myBool = Boolean typealias ezmBool = Boolean fun myBool.ezmFlip() : ezmBool { return !this }