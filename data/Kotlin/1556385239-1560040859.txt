This is wonderful. It will make working with async and WebFlux in Kotlin so much easier! Well done, Roman.
It looks promising! Thank you.
This is a replacement for Channels?
Quick question: if you call suspend on a flow, do you lose any data that would have been emitted, or does that data emit when the flow is resumed?
No. They serve a different use-case that of channels. A bit more here https://link.medium.com/jpSxFDfdgW
I'm not a Web Developer and don't know much about building websites, but I do need to build some pages for a few of my Android apps. Would KVision be suitable for building simple static webpages and then host them on GitHub Pages? Or do I need something else?
Using KVision, you can also create applications, that look and feel like typical websites. The output of your app is just a javascript bundle and an index.html file, so you can use any static hosting.
This sounds awesome. It is wonderful to see the Kotlin community do amazing things with this language.
It depends on implementation of emitter. Simple emitters just suspend and resume where they've left. However, you can deliberately write an emitter (or a flow operator) that somehow tweaks its behavior on suspension in a way that you need.
Is this what you are talking about when you say: &gt;So, when collector of the flow is overwhelmed, it can simply suspend the emitter and resume it later when it is ready to accept more elements. and refer to a future article?
Throwaway acc. It's high in demand, in front of Java and other languages. In Belgrade, Serbia, senior dev with Java background and with a good grasp on Kotlin average around $40k per year. I personally got the highest offer a bit above that, with 7 years of experience, focused on Android. AFIK, it can go much lower, not much higher though. Many companies, both big and small, are unaware of the current state of affairs, that applies across Europe. I have a premium linked in profile just to keep my interview game up to date, and to benchmark salaries across interesting countries, It's crazy how desperate recruiters are. What is funny, and it's the main trick here, in Serbia, Bulgaria, Croatia, Romania, Ukraine and across East Europe is that our net income almost equals to gross income - my health, unemployment and taxes on a yearly basis are around $3k per year. It's achieved through something called 'one person company'. I gave up: - health insurance of a first world country - job security - pension fund plan - the general quality of life But I live in an extremely low CoL area so I can hop on a new job in 24h, choose what kind of health insurance I want, demand better conditions etc. In my case, I work remotely for a company from West Europe with full-time engagement on a contract. A company that would want me on site would have to give me $135k in Munich and even more in Oslo to match my net income, and that is not accounting for the cost of living. It's not going to happen, the highest offer in Berlin/Munich was around $100k. On the client side, I cost them less than junior dev, $60k per year. A bunch of companies have figured out this years ago, some recently and they try to get in the market aggressively, so it's even better for us, developers. Full disclosure so you could have idea about salary/competence, got a master degree, been at NTNU as exchange student, I think I'm not quite senior, I managed to get happy clients at 50 per hour as a freelancer at best, I'm proficient with SW architecture, I'm good with unit and automation tests, OO, FRP, but I lack experience with CI/CD for example. P.S. Not looking for a new job or gig :)
I made a mistake, please look again at my code above. I don't want the function to return but to change it's own value.
&gt;I made a mistake, please look again at my code above. I don't want the function to return but to change it's own value. I made a mistake, please look again at my code above. I don't want the function to return but to change it's own value.
This is not possible. Booleans are immutable values, like integers and strings. You cannot change them, you have to assign a new value.
Ok, so how do I do that?
var myVariable : myBool = true myVariable = myVariable.ezmFlip()
Author here, thanks for sharing: do you have any insights on the issue?
If you’re writing a library with the goal of Java interop then write your SAM interface in Java and use it within your Kotlin code. The Kotlin compiler will let you use it as a standard lambda without explicitly specifying the type, retaining the happy case in Kotlin and the Java compiler will see a standard SAM interface it can use as well. Kotlin supports mixed-language projects for a reason, don’t throw the baby out with the bathwater if you don’t want to.
Function parameter are immutable so can't be changed. &amp;#x200B; Technically you could wrap a data class around the value and then use that a parameter making it mutable. &amp;#x200B; `data class Foo(var value: Int)` &amp;#x200B; `fun foo(data: Foo) {` `data.value = 3` `}`
&gt;Even though this works, I don’t thinks it’s an appropriate way of using inline classes. I believe this is a great solution. What's the issue?
&gt; Always use Kotlin function types Yes you could just use (ParamT) -&gt; ReturnT types everywhere. Often that will be sufficient but as your application grows it might get harder to read and maintain and more error-prone. This is my preferred solution right now. Interop with Java is actually okay here too, there are Kotlin function types similar to the `java.util.Function` classes that make calling, say, a Kotlin function with a function as an argument quite nice.
I just leave all public facing APIs as Java. Sadly, I haven't found a better solution. I don't want to repeat myself, and I don't want different APIs for Kotlin users and Java users. The good part is that it doesn't matter too much, all actual logic is in Kotlin files, only the user facing API is Java.
I guess that is the price to pay when you design a new language on top of the JVM with functions as first-class citizens. But at least pure Kotlin code can be okay, provided you don't want to change the types of your functions like OP.
But how would you use it?
Basically you can't modify primitives in the manner. You could change variables in objects you use. `var data = Foo(1)` [`//value.value`](//value.value) `== 1` `foo(value)` [`//data.value`](//data.value) `== 3` &amp;#x200B; If you want to modify a value by some function it is better to return the new value and set it with the returned value. Kotlin has some nice syntax with receivers, that makes it very easy to read. &amp;#x200B; `fun Int.modifiedValue(): Int {` `return this * 3` `}` &amp;#x200B; `var value = 1` &amp;#x200B; `value = value.modifiedValue()` `value == 3` &amp;#x200B; The problem with modifying parameters is that it isn't explicit as if you haven't written it you don't know what it changes. Returning the new value and setting it means that you do know exactly what you are changing.
Like i mentioned, I think this is fine as long as you can still handle it, and your code is well tested. If you have several Function with the same Signature it might get messy and error-prone.
I don't know, I just feels wrong to wrap a function using an inline class, also Java interop doesn't work and inline classes are still experimental: so I can't recommend the approach with confidence. Would be great to hear from someone at Jetbrains.
I think [`chunked`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/chunked.html) is what you're looking for.
That doesn't take into account the content of the elements, though. I don't actually want every 5 items, that was an example.
Maybe just define your own extension function that does just that? fun &lt;A&gt; Iterable&lt;A&gt;.split(predicate: (A) -&gt; Boolean) = fold(mutableListOf(mutableListOf&lt;A&gt;())) { acc, e -&gt; acc.last() += e if (predicate(e)) acc += mutableListOf&lt;A&gt;() acc }
It says which scope you want to return at, like a goto
https://kotlinlang.org/docs/reference/returns.html
Offer him $50.
$50! This isn't a startup!
50 million?
You can mention that it removes whole classes of errors such as nullpointer exceptions and increases productivity because of reduced boilerplate.
What are his arguments?
That he is the boss? :)
Here are 25 reasons: https://proandroiddev.com/kotlin-avoids-entire-categories-of-java-defects-89f160ba4671
This. It'd probably be easiest to counter his reasons for reverting.
Subtly wave your hand and say “you don’t need to use Java”.
Nullpointerexception :)
And hand him the jar!
Interesting, I had the exact same idea. I got part way through the visitor pattern and I said “no way am I doing that”. I switched over to a functional pattern. I do wish the when expression was more robust. I’ll have to take a look at your solution when I’m done. I gave it a quick star.
&gt;“no way am I doing that”. Exactly my words! &gt;I do wish the when expression was more robust. After this project, Scala seemed way more functional than kotlin though. Thanks!
It's a business so it's harder for me to despite that with "better tech".
Java is just more popular, there are more developers.
I'm going to brew him some of my famous "Get Out" tea
I'm going to come at him with a billion dollar mistake.
Any competent Java developer can become a competent Kotlin developer in a matter of weeks. Mastery and familiarity with the idioms takes longer, perhaps, but those aren't required to begin productively contributing to an existing project. "We can hire Java developers but not Kotlin ones" is a nonsense argument in my opinion. What's more, having "Kotlin experience is a plus" in your job listing may get you job applications from a higher caliber of Java developer than you'd otherwise get, since there seems to be at least a bit of correlation between programming skill and willingness to work in multiple languages.
Tell him that innovation and creativity can't happen with taking risks?
Man, TBH I have to convince my manager to use Kotlin, and I have until 2 days to tell him why use Kotlin over Java. This question has racked my brain, now I have to think hard of all the best features of Kotlin over Java. Only God can help me now. And I figured something out, I need to provide value to the company. If the things I am doing, are for my fun, nah the request is disapproved. So basically, we need to tell our managers the pro points of Kotlin over Java and how this can help the companies product, instead of you as a developer to advance his/her career.
If you have good cohesion and low coupling, you can use Kotlin Native to compile your micro-services for other platforms (like Swift libs for iOS). &amp;#x200B; Kotlin is interoperable with Java, doing things in a more concise and idiomatic way. This means less time spent typing and less time spent reading Kotlin code. &amp;#x200B; Having the ability to swap between Java and Kotlin on a daily basis is good mental gymnastics for devs and'll keep 'em sharp? &amp;#x200B; Kotlin is endorsed by Google (Android dev docs have Java and Kotlin examples). &amp;#x200B; &amp;#x200B; If worse comes to worse, you can have Android Studio convert your Kotlin to Java.
Any Java developer can learn how to read Kotlin in ten minutes, and how to write Kotlin equivalent to Java in an hour. The more advanced features might take some more time, but those are purely Kotlin benefits. I'm currently converting a Java codebase to Kotlin, and it's already eliminated many bugs that we didn't catch before.
Java equivalent: `create:` -- a label, target for the return statement. Note that `create@` is actually redundant here because Kotlin automatically understands `return@create` to refer to the invocation of the function `create` in the surrounding scope.
First hear his arguments and concerns and convince him that all of these can be satisfied with Kotlin.
Don't argue, leave. Reasons for insisting on Java may or may not be valid. But the bottom line is you want to look forward in a technical sense and if Kotlin is part of that. So, you need to be in a place where you can pursue that. So, move on. Try to do it in a nice way.
This is a chicken and egg argument, there are more Java programmers do there is more Java so there are more Java programmers.. Kotlin is something that every self respecting Java programmer should be able to understand and embrace. Also, why is he even hassling you about which technology you use? Do you tell him how to do his job? You're the expert, not him, if you think X is best, he should trust you. If there is no trust, well good luck with that, I make it my priority to stay away from such toxic environments.
Say hello to KotlinNullPointerException :)
“This is not the programming language you are looking for.”
With such little information, how can we give arguments. Java might well be the best option. If it's expressible in Java and your teams expertise is Java, it makes no sense to move to Kotlin. It might be growing but it's still harder to hire Kotlin devs than Java. There's no guarantee yet that it wont disappear in a year or two. I love Kotlin but just because we like something, doesn't mean it's the best choice.
“Apparently you have a reason for preferring Java over Kotlin, may I ask what it is?” Your boss has a concern, your job is to discover the concern and resolve that concern. Coming at him with a whole pile of ‘your reasons’ is no guarantee of addressing ‘his reason’. And you’ll be wasting your time and your boss’s time. The above question will begin the exploration and discussion of his concern. Once he says his reason, you need to confirm that it’s his real reason, often people knowingly or unknowingly throw up a surface reason. So once he says “Well I prefer Java over Kotlin because of reason X.” Then follow up with “Apparently you have a reason for feeling that &lt;&lt;insert reason X&gt;&gt; , may I ask what it is?” Continue this process until his reason doesn’t change., only then do you know that you’ve found the real reason. Then address that reason, go away and research your answer if you need too. I learned this from one of America’s top real estate salespeople. It’s a very adroit way of discovering the concern.
You can say that with Kotlin you develop and deliver much faster and with less issues. Also you avoid allot of future technical debt.
How many do you need? Good Java devs are as rare as good Kotlin developers. And then we’re are talking about the case of a good Java guy who will refuse to learn Kotlin. This is literally the scenario your boss is trying to avoid.
Sure but there must be reasons. Half are already written and would have to be rewritten in Java costing both time and money. Maybe one of the reasons is a worry that Kotlin programmers will be harder to hire than Java programmers. In which case I'd argue that it's fine to hire a Java programmer because a Java programmer can pick up Kotlin very very quickly.
\- Kotlin expertise is thin on the ground. \- None of our current Java devs have Kotlin experience. \- Java is popular, has been around for years and wont be going anywhere anytime soon How does Kotlin satisfy these?
Why did you write it in Kotlin in first place without getting clearence from higher-ups?
The [groupBy](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html) could do the job. &amp;#x200B; &amp;#x200B; before.groupBy { if (it % 5 == 0) { it / 5 - 1 } else { it / 5 } }
Some items from the excellent "Effective Java" book are compile-time features in Kotlin: [https://blog.kotlin-academy.com/effective-kotlin/home](https://blog.kotlin-academy.com/effective-kotlin/home) Kotlin is made with tooling in mind by a company that provides world class tooling. Kotlin allows multiplatform development with platform intrinsic/native experiences in mind. It's not the language that takes the most effort to learn, but APIs and all the Java developers will still benefit from their experience with the JVM platform when using Kotlin/JVM.
It doesn't seem like you fully understand the benefits of Kotlin over Java. You will actually become more effective using Kotlin than you ever were with Java because you effectively become this perfect developer in several areas where you never submit many categories of defects: https://proandroiddev.com/kotlin-avoids-entire-categories-of-java-defects-89f160ba4671 We use Kotlin at my workplace for back-end development and most of our new-hires have never used Kotlin. They can read the existing Kotlin code and understand 80% of it right away without any training. They also have Google at their disposal so all it takes is 3 days to start submitting code. Mind you that their submissions won't follow idiomatic Kotlin conventions but that's perfectly fine as that's what reviews are for. So our new-hires are effective in about a week. We advertise Kotlin as a language that we use and teach in our job posts and this is one of the reasons why we get top talent applying from our region.
Oooo that's clever. Thank you!
You might want to put this code inside a CoroutineWorker. Then when you enqueue the worker and an exponential back off policy on retry. To update the UI you'll have to observe the worker status and retrieve output data separately as workers can't update the UI themselves.
Thanks, I feel communication skills is key part of Software Developer. I need to improve on it. Thanks to you, I got an idea on how.
&gt;CoroutineWorker Oh I never thought about it! I checked and found that CoroutineWorker is built on top of WorkManager. I thought WorkManager is used for different operations, not long running tasks?
Worst answer here.
How so?
According to Github, Kotlin was the fastest growing programming language of 2018.
I would start writing it in Java and use that to show him first hand what you would be missing. Maybe it took you more time. Maybe the amount of code is much larger. Maybe you can show him sources of NPE or other antipatterns.
ASP Core is not a framework, Spring is. You are comparing apples and oranges. If you notice, Vertx with async Postgres is faster still, this is also not a framework but a java library...
Very few businesses are making revenue by shepherding the snowflake developers' creativity. That's not a selling point to the boss here, and to lead with that without even knowing what his objections are is just silly. I'm not shitting on devs; I am one and have been for close to 40 years.
IMHO you should emphatically apologize to your manager and ask that in the future can you setup a meeting with your group/organization to show the power of Kotlin and possibly discuss using it on future projects. I don't know you manager but if you put yourself in their shoes you may see a rogue developer that has wasted time and money. I always like when someone comes with a new idea but they should ask before going off on their own and just doing something. I have been touting Kotlin for quite some time in our organization but it won't be an overnight change.
Oh certainly you wouldn't lead with that. I'm just proposing it as one of the many reasons. Any leader that is so risk averse they suppress their teams drive to progress, is failing their team.
Is your boss a developer as well?
I've been a Java developer for most of 15 years and am now a Kotlin/Java developer. I've been involved with JetBrains and Kotlin from the start and am in the process of starting a Kotlin User Group as a branch from the long running Java User Group here in Edinburgh. I hire developers and introduce Java developers to Kotlin. I've watched Java developers write Kotlin and how long it takes to become effective and aware of it's intricacies. So if it "doesn't seem like \[I\] fully understand the benefits of Kotlin over Java" then you're probably just making assumptions based on absolutely zero information. The fact that you focus on "benefits of Kotlin over Java" and ignore the inverse tells me that you decided based on very little which was best. "They can read the existing Kotlin code and understand 80% of it right away without any training." I've been a Java dev for a long time. I don't think there's any code, in any language I can't understand 80% of, doesn't make me an expert in any of it. Doesn't mean I wont make a complete arse of conventions or completely miss common mistakes. Doesn't make me effective in the language. You either have the best branch to master pipeline I've ever heard of or your codebase is full of messy, inconsistent code. I bet on the latter. I wonder what it is that makes you think you know better than 90% of JVM developers.
We had some clowns (one guy was a Phd in Comp Sci) build some software for a major mobile operator using Scheme on GNU Guile. I joined the company at the time the project was ending, but the software eventually became my problem. The project was a complete mess, upon viewing the code it became apparent why: hundreds and thousands of nested brackets. That was a key learning point in my career: "never give developers full free reign". Doesn't matter how good they are, if you don't check them, then you might as well get retards. Granted Kotlin is not Guile. We recently had some devs choose to build a major telco system in Node.js, that's a complete mess too. Error handing in Node.js is a joke and at the time threads exist as a one man GitHub project (Fibers). I have a track record of being promoted into to tech lead positions of broken software, I'm ruing the day this Node.js mess become mine. I get what you are saying, its very true, but never trust developers to use the right tool.
Then say time is money. You having to start over is time wasted thus money wasted, or some business bs like that. Make every business problem about money (especially about saving money) and you'll go far.
ASP.NET Core definitely is a framework.
Just rename all the file .java.kt and tell him it is java
You’re welcome. Let us know how it goes.
&gt; you can have Android Studio convert your Kotlin to Java. This isn't available, the other way around is.
Interesting project, you should take a look at https://kweb.io/, one of its goals is to make the line between frontend and backend almost transparent to the programmer. It's possible there might be opportunities for cooperation (I'm Kweb's creator).
When we first started using kotlin we also had a few people (among them my team lead) who had an issue with me just doing it, but in the end we halted putting kotlin into the production code and just wrote our unit tests in kotlin for a few month. Then we picked up kotlin again when we had a bit more air. I think the upsides of kotlin are pretty much apparent or can be found on lists online. The question should be "why stick with Java?". There is only really two and a half reasons I can think of and for both I have counter arguments : 1. **there are more Java than kotlin developers we as a company can hire.** - well that goes for every technology you use and you will probably always pick the technology that is best for the problem. If you use hibernate or tomcat or SQL. Do you really check every time if there are developers that can already do it? Developers should not get too married to specific tech, we can and have to learn new things all the time and if you hire a Java dev in 2019 and he is not motivated to learn kotlin then this developer is not interested in learning and you should not hire him. That being said: every Java developer can learn kotlin fast. In our company ca 60 devs did and we are hiring all the time. Never heard that kotlin was an issue there. Quite the opposite: I would not join a Java only company anymore. 2. **project X has a deadline and doing something new might make us deliver late** - well this is a bit more tricky, but we had this situation and we decided to start kotlin once the project x was finished. Meanwhile we wrote unit tests in kotlin to learn the language. The important thing here is: Kotlin will make you faster in the long run! So this argument goes in the direction of the Lumberjack who has to decide to change the sawblades or go into the woods now. If you have to change the sawblades anyway then doing it first might speed you up. It's an investment and you can with a lot of confidence tell your boss that this investment will pay off. 2.5. **the fun of the developers is not important** well thats just wrong. Developers are passionate people who love their job. If the company does not facilitate this developers will leave. It's a sellers market right now. Also rewriting your code in Java does make no sense. This sounds like your boss is not concerned about timing of the project which means he is against exploring new technologies which is a bad sign for a tech company. If your company is not investing into exploring technologies for potential benefits than you should at least have a source to get this knowledge secondhand. Who is your your source for this? Google, Netflix, Amazon, uber? Well guess what they all use kotlin (at least some of the time). Microservices are made for these kind of researches. Worst case you have one small part of your application in kotlin. Who cares? Your devs don't want to maintain it because it's not Java? Well fire them! 😂
scope
Yes it is: 1. Show bytecode 2. decompile
Java isn't that bad for backend development
I work for a software development company in the Netherlands, and we have recently switched from Java to Kotlin for developing server-side software, mainly web apps and REST APIs. It's been a joy to work with so far, and we haven't run into any issues whatsoever. In particular compatibility with frameworks like Spring and Hibernate were crucial for us, but we literally haven't run into a single issue using them with Kotlin so far.
That isn't even close to use-able.
Benchmarks are a tricky thing. The TechEmpower benchmarks are really cool, but they're subject to implementers "playing fair". Many don't. For example, let's look at the "middleware" vs "MVC" tests for .NET Core. With the "middleware" tests, it calls a `RenderFortunesHtml` method (https://github.com/TechEmpower/FrameworkBenchmarks/blob/master/frameworks/CSharp/aspnetcore/Benchmarks/Middleware/FortunesRawMiddleware.cs#L35) that uses a string builder to manually build the response (https://github.com/TechEmpower/FrameworkBenchmarks/blob/master/frameworks/CSharp/aspnetcore/Benchmarks/Middleware/MiddlewareHelpers.cs#L33). Heck, instead of allocating a new string builder and having to garbage collect that, it acquires one from a cached pool of string builders. This still gets considered a "realistic implementation approach". Maybe someone is writing code for an extremely hot path like that, but it's hardly realistic. At that point, why not test Rails by writing it in C with a Ruby wrapper? Now, what I would consider the realistic .NET MVC ones are still really fast. The `aspcore-mvc-ef-pg` one hits 88k/second using real routing, real Razor templates, etc. It looks like a real .NET MVC app, albeit simple. However, there are optimizations like using `EF.CompileAsyncQuery` ahead of time. I don't know if the Spring implementation is well-done. I can see that Jooby does quite well, but it has used a pre-compiled template engine and some more manual database handling code. At the same time, Dropwizard uses Jdbi to make the database handling nice and clean and Mustache templates which are a lot slower resulting in 70% fewer requests per second. Given that the precompiled template engine is twice as fast (https://github.com/fizzed/rocker), most of the drop in requests per second is literally the choice in template engine. So, the fact that the Spring fortunes test was implemented using mustache templates might account for a huge performance hit. Is Razor great? Yes. Is .NET Core performance great? Yes. There will certainly be areas where it's better or worse than Java. However, it's hard to judge the TechEmpower benchmarks without reading the code. Is MVC slow or is it just that hand-rolling a very specific string builder is faster than Razor templates? I don't know a lot about Spring, but I can say that a good bit of the difference between Jooby and Dropwizard would be implementation stuff unrelated to the framework. Dropwizard could use pre-compiled Rocker templates and raw Jdbc too. We also see this in a lot of the variance in Go benchmarks: some create pools of structs so they don't have to allocate/garbage collect memory and pre-compile templates while others use the built-in Go template system which is a lot slower and allocate memory normally. Is that really testing the framework when template engines can be substituted easily (and the framework doesn't come with a built-in one)? No. It's testing whether the benchmark author wanted to "win" the benchmark. Java is fast. C# and .NET Core are fast. Might Java be a slight bit faster? Yep. Might .NET Core be a slight bit faster? Yep. The real difference comes in when comparing them to a language like Python or Ruby.
Someone should let Microsoft know so they can update their documentation: &gt; ASP.NET Core is a cross-platform, high-performance, [open-source](https://github.com/aspnet/home) **framework** for building modern, cloud-based, Internet-connected applications. [source](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2)
Thank you for the reply, this is great to hear, what drived you to switch to Kotlin? How did this change occur? Also if it is relevant, how did you convince management?
We used kotlin to write a back end service to handle and transform data from our database and various apis. It served up jsons from end points that our ios app hit. We used spring and hibernate, you can generate a skeleton spring application in kotlin from the spring website. Lots of the spring examples were in java but we managed to adapt them into kotlin and figure stuff out. Plus if you are using intelliJ as an IDE it will try its best to transform java you paste in into kotlin- it's usually not perfect and doesn't take advantage of the best features of kotlin but it gives you a start. I had a good experience writing back end kotlin, would definitely recommend it.
This is true. Doesnt make my statement false though :D
- so is Java expertise when you compare it to php, c# and JavaScript yet you guys still decided to go with a less popular language because its features made code more robust. Kotlin will give you an additional increase in robustness without radical changes. Kotlin is used in roughly 50% of new android projects and is very similar to Java and Scala and experienced java devs will pick it up quickly and you'll be able to hire from the android Dev pool as well - none of your current devs have experience in every tech that they use and kotlin is very similar to Java. Every build system and server that you use to run java, your editor and many other tools are the same. You could even write code like you're used to by going for the java api. Don't like sequences? Just use java streams. Libraries and tools are usually the biggest issue when learning a programming language - so is c/c++ and even cobol which will be around even longer. Kotlin has wide industry support and is backed by Google and jetbrains and runs on the JVM which is also here to stay.
What about language support? Is there enough help available online? Also, when you made the switch from Java, how long did it take for the devs to become productive with the language?
I'm using Kotlin in a Spring application. No problems at all. Vert.x support seems to be very solid too. The only thing I fear is Gradle :-)
We have a very large production codebase (www.lulabuild.com) that we recently ported from java to kotlin. So far its been an absolute breeze. It is a highly complex application with several dependencies to external frameworks and libraries (hibernate, vertx, apache etc) and there has been almost no issues or snags. Its been one of the best decisions we have made. Personally I think Kotlin is very underrated for backend development, it really is a fantastic language. Highly recommended.
Thank you for the reply, this is great to hear. What caused you to make the switch?
There wasn't a single thing or moment that made Kotlin click for me. I never bought into Scala, I always found it too complex for our purpose, and the Scala enthusiasts always a bit too focused on language features and type systems instead of team productivity and readable, maintainable code. Kotlin is just in the sweet spot for me/us. A dramatic decrease in boilerplate but very readable. In my experience Java developers are productive in Kotlin in very little time. It's a lot of little things, like data classes and when- expressions, that aren't earth shattering but it does add up to a very pleasant development experience. And first class ide support from JetBrains is crucial, too. Convincing management was the easy part, as I am the CTO of the company. I did spent time and energy talking about Kotlin to our developers, giving internal talks and showing what it would bring them. I may be the CTO, but our teams choose their own tech stack, so my job is influencing and aligning more than deciding.
Fantastic analysis / opinion.
Tell him Kotlin has significantly less boilerplate code, simple and safe, designed for the JVM, and saves you time so you can get a lot more done.
We ported the application over from desktop to cloud, and as a team we were looking for a more modern language that could increase our productivity whilst appealing to younger talent. Kotlin checked all of those boxes. I never had any issues with Java, and it did work really well for enterprise backend development, but after working in kotlin for 6 months, I don't think I will ever go back to Java. It's also a super easy switch to make. Your team will feel really comfortable after a month of development
I stand corrected, I assumed it was just an implementation on top of barebones .Net Core. Btw, not defending Spring in any way, it is slow af (but ok for most applications).
I'm happy to announce that the course is now available to purchase. [https://functionalhub.thinkific.com/bundles/functional-programming-in-kotlin-course](https://functionalhub.thinkific.com/bundles/functional-programming-in-kotlin-course) Also until Friday (3rd May) we are running a competition to win a free course in exchange for your retweets and follows :) [https://givelab.com/4UGQ0n/enter-for-free-functional-kotlin-course](https://givelab.com/4UGQ0n/enter-for-free-functional-kotlin-course) Good luck!!
Because he's a beginner (at least to the corporate world) that wants do it his own way because he knows everything. Same reasons I did stuff like that 30 years ago.
Take a look at spring boot
Vert.x is also a framework albeit a micro one. It's the equivalent of SlimPHP in Java land.
&gt;ASP Core is not a framework So what is it then?
We have a large-ish backend running vertx and developed in Kotlin. Pretty happy with it. There isn't much specific about Kotlin since everything gets compiled to the same bytecode as java so everything you know about running Java code in production applies to kotlin. Same tooling. Same issues.
C# is Windows. Php is shit. If you’re a Java house and an employee decided to write in a new language without consulting, your point is irrelevant. Anyone who thinks devs can just pick up new languages and be experts, is fooling themselves and have probably never seen good quality code. Kotlin is not similar to Java. It CAN be. It NEVER is. Once again. If you it were a C++ house we were talking about, your point might be valid.
I use arrow heavily. I'd highly recommend it for underlying code
Unit test approach is a good one, pretty much our path as well.
It also calls itself a toolkit, not a framework. Without looking at the test code in the linked page, I would assume the top vertx contribution is implemented as a library using only core, and message channels, not using the http router and more framework-ish features.
I was wrong, I mixed .Net Core and ASP.Net Core. However, looking at the source code for the aspcore-ado-pg beanchmark, I find no evidence of using actual ASP.NET framework code in the benchmark, it all seems to be a custom implementation, while the Spring implementations (both MVC and WebFlux) are actually using Spring controllers and router. So my "explanation" of the difference in performance is still correct, I believe.
My response was based on the post I was responding to so that was the information that I went on. Perhaps `understand` was too strong of a word but I did qualify that with `fully`. Perhaps `fully appreciate` might have been better. My views about Kotlin being significantly better than Java comes from having to investigate the intricate differences for my training sessions as I ramped up several teams on Kotlin. You're probably much smarter than me since there are many languages that I would struggle to comprehend without prior knowledge such as the rarer functional languages.
I'm Chief architect in small Israeli startup. I started a new project in Kotlin and I'm very happy with it. Really I don't see any reason to use Java now. We have more readable code, more compact code, more safe code, and coroutines provide readable version of asynchronous code. We are using Kotlin with Vert.x, Spring, JPA. Build with gradle. For unit tests we use Spock, which works well with Kotlin code. Code coverage with Jacoco Static analysis with detekt Build with Jenkins Deployment to AWS with docker Everything works good
"Why?"
Show bytecode and decompile often times results in Java code that doesn't compile do it's only good for seeing the gist of what's happening under the hood. This is especially true when using some features that don't exist in Java. Additionally, the variable names need to be fixed, the metadata needs to be deleted, and the logic needs to be cleaned up since the resulting nested ternaries aren't readable.
I use Kotlin with Spring Framework for quite a few things. I have a test project on github if you want to check it out. https://github.com/irotsoma is my profile, and the cloudbackenc projects are all Kotlin. The basic idea of the project (eventually) is to encrypt files and back them up in the cloud on various providers depending on where you have free space available so you can mostly use free accounts as well as allowing for backups in multiple providers for really important stuff. It's just for fun and for playing around with new techs, though, not meant to be a real product. The central controller is a server service with REST endpoints. The filecontroller is a desktop service and front-end. There's also a defunct ui project that was a TornadoFX (Kotlin version of JavaFX) application. But I replaced that with a web front-end in the filecontroller application instead. All are build with Spring Framework. The other cloudbackenc projects are extensions for the centralcontroller for interfacing with cloud providers or encryption libraries.
Just dive into google. But there's a lot more to learn about android development far separate from kotlin. It ain't easy.
i can't imagine using only one language for 5 years. is that a literal statement?
Yes lol. Specifically for users that only use window machines, offline. The older senior developers only use c# and thus require I do.
huh. interesting. I can't imagine using only a single language for that long. i don't mean that disrespectfully, in case that how it comes off. i use at least 3 languages a day, and that's just at work, and they aren't always the same languages
It was interesting to hear their negative experience migrating to Swift on the iOS side and all the issues you run into using Swift at scale. I have had a very similar experience. Transitioning to Kotlin is so much simpler and so stable.
Check out the kotlin koans. They are a fantastic way to get started with the language.
The framework is used for routing, request/response mapping, content negotiation, etc.
Will do, thanks!
Coming from C# myself, I had the same thought myself as I learned Java as my first language and thought that the ratio of code vs. functionality was off. I used [this](https://www.youtube.com/watch?v=H_oGi8uuDpA) video to get an idea of the syntax, the functionality etc, of Kotlin. THEN I also used the language almost immediatly - otherwise I doubt that you will learn it. So I had this [app](https://play.google.com/store/apps/details?id=dk.villanueva.UltimateCompanion) that I used to code in Xamarin (C#). But since it performed like a fish in the deserts, I re-coded the entire thing in Kotlin. &amp;#x200B; Good luck!
Answered inline. Also - Reddit is not StackOverflow ;)
If you're not familiar with functional languages I can at least say your Koltin wont become an absolute nightmare of attempted functional programming, like many functional programmers. :P
The Kotlin lang website is actually very comprehensive when it comes to documentation. The community is great, and the Kotlin Slack is genuinely a very welcoming and friendly place. Any experienced Java developer should be productive in a fairly short amount of time, especially if they have Scala knowledge (as a lot of the syntax is very similar). New constructs such as also()/apply() and extension functions (and doubly so for lambda-with-receiver) are the hardest to get used to IMHO. But when starting you can easily write it "as java" and go from there. Unverified, but my experience: No Dev that I've worked with has liked going back to Java after working with Kotlin for some time.
I believe the huge difference is from the asynchronous implementation of [asp.net](https://asp.net) core. vert.x, and Spring webflux should perform at the same level
imo, it describes the majority of people i've worked with. i know a lot of programmers move between jobs fairly quickly, but in my experience a lot of them look for new jobs in their exact tech stack.
Thanks! I'll check out that video.
interesting. i only consider the tech stack if it's something i DON'T want to work with. i usually search for the project instead of the underlying technology
I usually consider tech stacks I want to learn regardless of the project (unless the project really sucks). So I'm a stack hopper too, but with different criteria than you I suppose. I've gone backed web -&gt; native desktop 3D graphics -&gt; mobile, and now I'm looking at kotlin opportunities in the mobile domain. Its worked out well for me, usually projects are always interesting IME when you're learning stuff you have an interest in.
What's the difference between astronomy and astrology?
Astronomy is the study of the universe and its contents outside of Earth's atmosphere. Astronomers examine the positions, motions, and properties of celestial objects. Astrology attempts to study how those positions, motions, and properties affect people and events on Earth.
So the difference is astronomical
they are worlds apart.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [Half-ass-functional Kotlin Interpreter for the Lox PL](https://www.reddit.com/r/functionalprogramming/comments/bjjqqg/halfassfunctional_kotlin_interpreter_for_the_lox/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
one is a science one is fraud
"for entertainment purposes only" 😜
# Astronomy
logically
🤦‍♂️
Why not just use the Maven shade plugin?
Why has no one told me about that yet 😣?
Go or Rust depending to which side the project leans (higher or lower level respectively)
Super! Good to know
There's a built in flag for this: `-repackageclasses` https://www.guardsquare.com/en/products/proguard/manual/usage#repackageclasses
commenting because im interested as well
\[This\]([https://github.com/springfox/springfox/issues/2022](https://github.com/springfox/springfox/issues/2022)) is the issue I'm watching closely to see if Springfox will update to supporting OAS 3.
This gets rid of the package structure. This is thought for public apis
But you don't care about the package structure of the Kotlin stdlib once it's rewritten since your code will have been rewritten as to call it correctly as well.
This will also mess up my own package structure. And since this is for plugins with a public API, the package structure of my own plugin should remain. I don't care about the kotlin package structure tho.
https://github.com/springfox/springfox/tree/feature/2022/oas-3-support There is a branch for this already with some enhancements
If there isn't a alternative in Kotlin, you could also convert it using something like https://github.com/LucyBot-Inc/api-spec-converter
TeamCity configurations are backed by Kotlin DSLs, wouldnt be surprised if Jetbrains uses Kotlin to back more of TC and their IDEs
I'm just starting my second commercial project with Kotlin and Spring Boot. The first project was a success and not a single serious problem was caused by Kotlin. Tool support is great and Java interop just works. Desipte the fact that it is easy to use Java libs with Kotlin, Spring offers some nice Kotlin APIs, that make life even better. In my current project (also Spring Boot) the team didn't know Kotlin and they picked it up on the go within a few weeks (beeing productive from day one). Everyone is enjoying Kotlin and no one wants to go back to Java. My only regret is that I haven't used the Gradle Kotlin DSL from the beginning, since the Groovy DSL is kind of a horrible mess! If you're not focused on Spring, the [ktor](https://ktor.io/) framework might be worth a try.
One notable infrastructure project is Ktor. Also note that Kotlin's key advantage is that you don't need dedicated Kotlin libraries to get a good experience. Existing Java libraries already work very well from Kotlin. Therefore there's far less incentive to start infrastructure projects from scratch just to support Kotlin. In time there will be, simply Kotlin is becoming an increasingly smarter choice than Java for any new project.
I think once Kotlin Native and multi platform mature some more they might get used for projects where go is used at the moment. For projects like Kubernetes and Terraform for example
Just mirroring what others say here. Kotlin is a drop-in replacement for Java in most backend projects. No buts, no ifs. Use it. You'll like it. Most Java code becomes a lot nicer after a simple automated conversion to Kotlin followed by some minimal tweaks. Kotlin makes a lot of sense even without explicit support from frameworks. In fact that's how I switched. I just decided to spend a couple of hours on seeing how far I'd get by adding the compiler plugin and converting a few Java classes in one of my projects (spring boot, junit, and some other stuff). I had code running in production a few hours after that. It was that easy. After that It took me a couple of weeks to get comfortable with the language and a few more months more to discover some of the more well hidden features and idioms in Kotlin (e.g. lazy init properties). But the bottom line is that the switch from Java to Kotlin is very easy. These days when I open a Java file for some maintenance, I'll pretty much convert it to Kotlin as a first order of business and spend a few minutes cleaning it up. I don't write any new code in Java. Now that spring 5.x and spring boot 2.x explicitly support it, it's becoming a lot more mainstream. Basically it's rapidly becoming the language of choice for that stuff. Spring will still support Java for a long time because they have their legacy customers but it's pretty clear that they are preferring Kotlin these days.
Here you go :) [Kunafa Todo App tutorial](https://www.reddit.com/r/Kotlin/comments/bkgv4i/kotlin_web_development_kunafa_todo_app_tutorial/)
https://github.com/JetBrains/kotlin-web-site/blob/master/LICENSE ?
I don't know the terms of that license. As far as I know, it is usually used in software. I'm thinking of translating documents into another language. How can I use it?
I am not a lawyer but it looks like the “documentation source” is explicitly mentioned under the license used, not just the existing executable source. You’re just going to have to read the license.
Okay, I'm a little ignorant about this. I'll read the license, thank you.
I wouldn't count on springfox too much. It's a great achievement for what seems to be a project backed by one person, and Swagger 3 support has been in progress you a while now. There's just not enough contributors to push the project forward.
&gt;Thiago [13:50] How do you contribute to the translation of the website into Brazilian Portuguese? &gt; Dmitry Jemerov [JB] [14:08] you make a translation and publish it on your own domain. at this time we aren’t hosting any translations on kotlinlang.org itself
I agree that it would be accurately be titled something like “Kotlin for Java Developers”
Some code snippet or at least problem description would be nice 🤔
What's his issue?
he wants it to , Take a photo, allow user to select a color from an application I have already built using intents. Then draw on the photo using selected color, and save the photo with the drawings on top of it
Try r/mAndroidDev
&gt; Functional programming is on the rise Doesn't that imply that it has state? I freakin' new it!
Written by Roman Elizarov
Don't get me wrong, Kotlin is the best object oriented focused language out there by far (compared to Java, C#, Python, Dart...) but even Kotlin is still far behind from being a 'true' functional (Haskell-styled) programming language with currying and Monads and whatnot. I tried many times getting into Kotlin Arrow, but from all the examples it seems that actual code is always obscured. So I do believe that the more functional the better, but Kotlin with backwards Java compatibility can never accomplish this. It is also funny IMO that every language is stuck at the same partial-functional-like state ("we have lambdas!!") but never improve on that.
It's a slippery slope. First we had interfaces, then anonymous classes, then wouldn't it be nice if anonymous classes didn't have so much boilerplate? Bam! Lambdas. Convenience was had. But lambdas allow for some functional style and people try to run as far as they can with it while forgetting that java/kotlin is an object oriented language with *some* functional programming features.
Yes, but you bet the paramaterless SAM interface you are implementing as lambda does not inherit from Consumer. Thats the first major problem. Lambda is just syntactic sugar in most languages
Hi all, I want to release version 1.0.0 soon, but would love some input, as I added a complete native JSON storage about three weeks ago (several layers) :-) I've just published an article called Asynchronous, Temporal REST with Vert.x, Keykloak and Kotlin Coroutines: https://hackernoon.com/asynchronous-temporal-rest-with-vert-... And another one about some use cases and internals: https://hackernoon.com/sirix-io-why-copy-on-write-semantics-... I've also added a bunch of documentation on the website :-) I'd love to create a great Kotlin-API, maybe even DSL, but would need a little help. That said, the REST-API already is 100% Kotlin (and I hope mostly idiomatic) -- any comment would be great though. Have a great weekend :) Kind regards Johannes
Can I use IntelliJ with JDK 12 for Kotlin?
Can I use IntelliJ with (AdoptOpen)JDK 12 for Kotlin?
Substitute monster
Maybe write something about fast scaling - GraalVM doesn't like reflection then ktor is better than spring. Spring will have version without reflection (kofu), but afaik it's not stable yet.
Kotlin Native might be faster in terms of pure speed and resource usage than JVM Kotlin but the main downside is available libraries. Kotlin native is pretty new and there are not that much solid libraries to build server apps with yet. Compare that to JVM Kotlin with frameworks and libraries like Spring that have matured for 10+ years. In my opinion, if you want to do Kotlin on the server in 2019 your best bet is to use a mature framework like Spring (or Spark or Micronaut if you want a microframework) and enjoy the benefits of 10+ years of framework maturation.
I don't see why not though Kotlin only compiles to Java8 bytecode, but it can run with JDK 12 JVM
Yes, you can. I personally tested my app and it works fine. Btw, personally, I'll stick with jdk11, since it's LTS. Also, recently (1.3.30), more target bytecode levels was added: [KT-26240](https://youtrack.jetbrains.com/issue/KT-26240)
I remember seeing a ticket showing Kotlin Native being slower than the JVM version. That ticket was closed since Kotlin Native hasn't been focusing on performance yet since it was still in alpha (or beta). The JVM is highly tuned so I would expect it to take some time to reach that level of performance. However, Kotlin Native apps should definitely have quicker start-up times and use less memory.
I recommend focusing on scalability of frameworks that use Kotlin coroutines as that will enable loads that thread-based frameworks can't even imagine. Coroutines also result in simpler asynchronous code.
I talk with some guy ande he said that benefits can be reduce memory consumption, becouse every microservice consume around 300-800MB
this idea is sounds good Spring is thread-baseded, I know that Spring Flux is some asnyc, but I'm not sure how work without this extension
Thank you. I saw that ticket before but I didn't really know how to interpret it.
Thank you. So JDK 8 higher doesn't make a difference? At least if you don't plan to mix it with Java code?
Not for the compilation part, but it might matter for the run part, for instance if you want to use a newer Garbage Collector.
Thank you for the warning, but I already knew. That's why I wondered about the license.
I'm using JVM Kotlin with vertx at backend, it is lightweight and too easy to implement. I've a Service running in prod with a container limited in 40 mb of RAM
I'm using Kotlin Coroutines with Vert.x: https://hackernoon.com/asynchronous-temporal-rest-with-vert-x-keycloak-and-kotlin-coroutines-217b25756314?source=friends_link&amp;sk=5eabb36b2984cf61a2dff3f9fe45addc
The JVM is the fastest garbage collected runtime there is. Your friends are silly.
&gt; 'true' functional (Haskell-styled) programming language with currying and Monads and whatnot. This is not a necessity, it's more of an architectural choice. You can write perfectly working FP code using just Rx! Before Arrow there were the talks about "Fully Reactive Apps" that covered this approach, and MVVI is not far from it either.
I have seen such arguments a lot. From what I have experienced, this is not about Java or Kotlin or any other language for that matter. &amp;#x200B; Its more about taking that risk in the current career situation of you boss. From his/her (and his/her boss's) perspective , everything is already going ok with Java. If you move to Kotlin, I can assure you that "extra time due to Kotlin ramp up" is bound to come up in every devs timeline. How will he justify this extra time to his boos ? Even bigger threat are "what if's". Such as - * What if the team ended up making some unexpected blunder because of some caveat of Kotlin (all modern languages have these) further pushing the timeline. * What if the above blunder was at a level so fundamental that the timeline will blow out of proportions. * What if every new hired developer takes extra ramp-up time citing "Kotlin ramp up" as a reason. &amp;#x200B; In reality, He/She does not really need to take of the above risks. And the worst thing is, even if everything works without any problems, it will be same as what he/she already has with everyone working on Java. So, it is a high risk and low/no reward situation for him/her. &amp;#x200B; As you were allowed to proceed with Kotlin development for some time, this shows that you boss was open for this experiment some time back, so what changed? Did the experiment till now served more towards highlighting the above what if's? Or some other organisational thing is driving him to play safe.
&gt; You can write perfectly working FP code using just Rx! I have to disagree on that. Each function in the`RX` chain has to have an explicit value. This will be a simple example. You can write functions with these signature: `fun map(data: Set&lt;String&gt;): Set&lt;Int&gt;` `fun map(data: List&lt;String&gt;): List&lt;Int&gt;` Well, Kotlin has a built-in optional, but this also belongs here to bring the point home. `fun map(data: Optional&lt;String&gt;): Optional&lt;Int&gt;` The could not write a function that expects `T&lt;String&gt;` and returns `T&lt;Int&gt;`, because you have no `lift` in `RX` (it wasn't made for that). So you'll have to write all the wrapper functions. I think this example does not show a great usage, but technically FP is a pattern that solves these kinds of boilerplates among many.
If you want to be agnostic to containers then yes, you need what Arrow does. But it isn't a necessary condition, you're perfectly well always coding to the concrete types, and monomorphizing even if it's annoying.
The JVM isn't slow. https://www.techempower.com/benchmarks/
More complex to 100% master maybe. But i was lowkey learning java for 1 year then i got introduced yo kotlin and all the annoying part of learning java drifted away. I got a job after that 100% writing kotlin now in android and i got to say its really fun to know that anytime i want i can still dive in and learn new stuff. I also find kotlin code a lot more easier to read. It also look a lot like swift so sometime i can try to read my peers PR.
Programming languages are a lot like a toolbox, they provide a bunch of options to solve a problem. But, importantly, you don't have to use all of them. In Java you have classes, enums, and interfaces. In Kotlin you have all those, too. You have _extra_ tools like sealed classes, or data classes, but you don't have to use them until you're comfortable.
Here's an update on the matter: [https://medium.com/@ranilch/functional-interfaces-self-loathing-in-kotlin-follow-up-26a23868858c](https://medium.com/@ranilch/functional-interfaces-self-loathing-in-kotlin-follow-up-26a23868858c)
But you need to know how all the tools work to be in a position to know when to use them, surely? That means a comprehensive knowledge of the language not some piecemeal, get-by approach.
Problem there is that you then inherit a project where the person used every tool in the toolbox because it was right there in the toolbox but occasionally they used a screwdriver as a hammer.
I think while it certainly does add some additional overhead with its new features, I don't think its much more than you had in Java, just different things. Lets say you are making a basic collection. In kotlin it is a bit more uniform: val list = listOf('a', 'b', 'c') val set = setOf('a', 'b', 'c') And in java you have: List&lt;Char&gt; list = Arrays.asList('a', 'b', 'c') Set&lt;Char&gt; set = new HashSet&lt;&gt;(Arrays.asList('a', 'b', 'c')); Also to note is that Arrays.asList() returns an immutable list, but it has add() and remove() which will compile fine, but only die when used. Kotlin can also make a number of bugs harder to write. Take NPEs. In kotlin you use nullable fields that require you to check them before you can use. There are optionals in Java, but nothing stops the optional itself from being null. So in order to get the same behavior, you need to combine a notNull annotation with an optional, which is super verbose. Its usually one character in kotlin. My advice for Kotlin is that its easiest to write if you try not to use mutable state. Whenever you write a var instead of a val, ask yourself if there is a way you can do this without it.
Lol 'Conferenc' Lol kotlin https://imgur.com/a/zWUr7b2
I wouldn't compare Kotlin to Scala. Scala is a baroque abomination which has myriads of tacked-on features which don't form a cohesive whole. On the other hand, Kotlin is a pragmatic language where everything is there for a reason and for solving real problems in real life systems. I've programmed in Scala, Clojure, Kotlin and Java and I can tell that Kotlin has little overhead compared to Java when you are learning it. What you are saying above is like complaining that a [Volkswagen](https://www.surf4cars.co.za/car_photos/used-volkswagen-golf-vii-2273031-1.jpg) has cruise control after driving a [Trabant](https://assets.hemmings.com/blog/wp-content/uploads//2017/07/1975Trabant-WhiteAfterF3qtr.jpg) for years.
Glad to see that Kotlin usage is not dominated by Android, but I'm surprised to see Eclipse usage at 0%. Is it because the Kotlin plugin is somehow not as good? Even though I personally prefer IntelliJ, my colleagues use Eclipse. I've started lobbying for Kotlin and one of my main arguments always was that when you switch from Java to Kotlin, almost nothing changes except the language: You can continue to use the tools, frameworks and libraries you have gotten used to, including your IDE. Judging by those numbers, I'm starting to doubt if that's entirely true…
Do you actually tried to write some code, do you ? Like a few days of advent of code ?
In Java you have `List.of(...)` and `Set.of(...)` which I find more clear than the Kotlin code because it makes the interface you get more obvious instead of just having a top level function.
Did you have the pleasure of being a java dev when java 8 came out? Because going from the old ways to the streams and lambdas of java 8 felt very similar to what you are dealing with with Kotlin. Honestly it was years later before i truly got on board with these new features. But just because something new comes in with its own set of rules and gotchas doesnt make it bad or even "more complex"... Its just new. Java has tons of rules and exceptions and idioms. Its just that you already know them and thus dont think about them.
The plugin has some big faults. Code completation doesn't work for kotlin only libraries; your code will still build if it has unchecked null access (only a warning on the console will be displayed for some milliseconds); and more.
I wouldn’t worry too much about all the class syntax rules. I have to admit it doesn’t really feel natural getting the syntax right. Just avoid inheritance, try use data classes when you can and focus on the other cool non oop stuff.
Please tell me these talks will be on YouTube at some point. I’d love to attend but can’t justify the trip from California for a single day event. 🙏
While I understand the principles and advantages of FP, I don't see how to best organize large code-bases. With OO and class composition we get encapsulation and structure for free. Additionally object scoped code-assistence. What's the best practices with FP? Can anyone provide examples / resources on that?
2 things here: 1) Even IntelliJ does not support Kotlin as well as Java. Some less used features like class diagram visualization works only for Java (and I guess there are other minor stuff). I know you have everything you need to develop in Kotlin but Java has more than that and 3rd party stuff (code analyzer and whatnot) might not support Kotlin entirely. 2) As someone working with collagues who have been using Eclipse the last 10+ years I can tell you that compared to them the KKK is an open minded group. They will not change, to them Kotlin is the same as some goddamn Lombok plugin and why have parameter assignment at function calls when you can create a class with a builder for that single call. Data class? Screw all the magic Kotlin does under the hood, I wanna read that code! So no, Kotlin's adoption will not increase after a while. Software support and willing to change are 2 different things.
Eclipse is dead at this point. Yes some people use it, but let's be honest, Intellij dominates out of the previous big three of Eclipse, Netbeans and IJ.
Yes, there are more possibilities, and I think, most of the time it's not a big problem, if you do not use the nicest possibility available. Even if your code is not the best solution Kotlin would allow, it's usually still better than in Java and you should worry less about such things, although they need time and experience.
The Eclipse Kotlin plugin is not in a usable state. Not even close. You'll struggle to get your projects compiling. It generally lags behind kotlin stable releases. Etc. Generally the kotlin landscape outside of intellij is pretty bleak. I consider this a weakness of the ecosystem (on both sides). Eclipse has been sliding away into irrelevance for many years now. I was a user until about two years ago when I needed to have an IDE for a modern spring boot project with gradle and eclipse just wasn't it anymore. Too much friction getting stuff working. Bog standard gradle + spring boot project. Just couldn't get it imported and compiling correctly.
Totally agree about Kotlin not being capital F Functional! But you can use the parts of Arrow that you understand and slowly ramp up. IMO Kotlin with Arrow is one of best balanced stacks that provides very close to "real" Functional programming but in a user-friendly way. The Either and Try classes alone make a big difference, it's a mystery why the Kotlin library doesn't have them.
On top of this - it's worth stating that one of the main (often overlooked IMHO) advantages of intellij is that you can learn only a single set of keybindings and then reuse them across multiple languages. Admittedly it's mono-vendor lock-in - but when a vendor does it \*this\* well... :)
Don't forget that Kotlin is sponsored by the same company that develops IntelliJ. If your organization is progressive enough to move to Kotlin, then they almost definitely moved IDEs first.
When trying to convert java to kotlin you could endup with javaesque kotlin But then you realise that you can write same logic much cleaner and with much less boilerplate and code in Kotlin, thats when you will have your "aha" moment and never go look back ;)
What does experimental have to do with being safe to use in production?
&gt;need to be aware of that and update your code It is not always easy in a codebase with 50+ devs.
isn't it enough to declare the lazy property with suspended syntax?
lazy gets kicked off when the property is accessed for the first time. In our case we want to kick off the initialization when the instance of the class is created.
ok, I didn't get it in a first place
Shouldn't it be enough to use have deferred as a private value in the object and a getter that just calls deferred.await()? To be clear, something like private val asyncvalue = async{complexCalc()} val actualValue:Any get = asyncvalue.await()
Relevant issues [KT-15555](https://youtrack.jetbrains.com/issue/KT-15555) and [KT-20414](https://youtrack.jetbrains.com/issue/KT-20414). These want to introduce suspending getValue functions instead of having to rely on runBlocking. I don't think the runBlocking version will be included in any official library since it defeats a main benefit of coroutines: eliminating blocking calls. I have also run into a use case for this and opted to use a wrapper object with a suspending get method (i. e. a manual delegate).
Sounds like an opportunity to improve the architecture!
That's pretty much was the delegate does. The delegate just saves you to do this over and over again for every property in every class.
Oh, sorry, I missed some of it (I'm from my mobile). I don't actually know how much it would be useful since tbh it's the first time I use it that way. Most of the time wouldn't it be just simpler to have that in the construction of the object (ie, in the REST request / parsing of the JSON for rest) rather than in each property?
I had the same question few weeks ago and while I didn't get definite answer, my understanding is the following: parts of the API marked experimental might change in future (or be removed), non-marked parts should be safe to use in production.
Thanks for the references! Suspend properties will be interesting in the future.
There are other possibilities for experimental status: hard to find bugs, implementation (not interface) can significantly change behaviour.
I don't get it :(
Some further discussion in r/AndroidDev on this: https://www.reddit.com/r/androiddev/comments/blvlhg/google_launches_jetpack_compose_an_opensource/
If I understood it correctly, it’s just a way to add UI elements programmatically using Kotlin.
It is React, but written in Kotlin I'm super stoked about it
So is it gonna be \~4x faster than xml like Anko?
*Anko
They are using a self written Kotlin compiler plugin for some annotations, so probably it will take longer to compile.
If it will be, please reply to me :)
It's pretty abvious it's not anko.
Kind of. One big difference: **it doesn't use Views**. Jetpack Compose uses a single wrapper View (SurfaceView I think?), then draws all UI inside it pixel by pixel. This allows for a completely reactive UI hierarchy. You set the structure of the UI once, based off of a State object. Compose then updates the UI any time the State object changes. This is very, very similar to what Flutter does
Scala is just different. It is a whole new paradigm allowing programmers to leverage both FP and OPPs as they see fit in same project. The problem is that OOPs programmers look at it as OOP + (1000 extra useless-strange things) and FP programmers look at it as FP + (those obnoxious OOP things). This tunnelled vision is biggest injustice to Scala and what it represents.
It's really no different from what you're used to. Take a look at the Arrow library for Kotlin, there are classes like Option, Either, Try etc inheriting from interfaces like Functor, Applicative, Monad etc and organized into modules etc just as you'd expect. Languages like Haskell are also the same.
No AndroidX, using default components instead of Material, no binding. Modern by 2017 standards for sure.
Someone: Kotlin eliminates NPE! Cool! Troll: But wait, in kotlin you can \`throw NullPointerException()\` .... &amp;#x200B; if you don't use java from kotlin - you are safe from NPE
I think the language is just too big. Couple of red flags are that compile times are big, there's basically no idiomatic "Scala way" to do things - everybody have their own idea, syntax is hard to parse even for IDE (if you type something wrong it squiggles too much code) and also sometimes suggests removing "unused" imports which break things.
But faster at runtime because you skip xml inflation.
So my description fits.
Similarly there is no "Java" way to do things. Yes, Scala is trying to do a lot and that gives Scala programmers a lot of freedom. And the IDE argument is totally about IntelliJ and has nothing to do with language itself. Leading Scala developers has a weird (not mainstream) preference for Emacs and Ensime+Emacs was very good for Scala development without all these IntelliJ issues.
Now there's a [Todo App Tutorial](https://www.reddit.com/r/Kotlin/comments/bkgv4i/kotlin_web_development_kunafa_todo_app_tutorial/) I'd be very interested to see some typical server interaction like this. I've been struggling to find decent examples of this kind of interaction, particularly with the latest coroutines release now it's out of experimental.
The non-existence of those tools means that you have to find a workaround. Those workarounds are patterns in most cases. For me it is much harder to remember a pattern than a single keyword. Also it is more error prone. Let's take Kotlin's `object` for example. It is a construct, that java doesn't have. So something more to learn. But it replaces static members, anonymous classes and singletons. So three things less to remember. Also the singleton pattern in Java has multiple variants. Do I use an enum and call `singleton.INSTANCE` or a regular class with `singleton.getInstance()`?
If I remember correctly xml "compiles" in compile time, and then in runtime it inflates not just XML files but something way lighter and faster to process.
Yeah but that intermediate format still takes inflation time at runtime.
Yes React, but even more Flutter. Which is exactly what we need.
Literally a Flutter port to Kotlin. There's even Flutter example code in the [source](https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/ui/core/src/main/java/androidx/ui/painting/Canvas.kt#139). This is VERY GOOD NEWS.
Imagine Jetpack Compose runs on Android as the first step what could be the next step... iOS, the web???
Imagine Jetpack Compose runs on Android as the first step what could be the next step... iOS, the web???
Imagine Jetpack Compose runs on Android as the first step what could be the next step... iOS, the web???
twitter is not usable?
Twitter is not only written in scala.
It'd be hilarious if it did. It'd be yet another example of Google releasing the same product twice, as this would literally kill Flutter.
thanks, good to know.
 [https://medium.com/@c2q9450/performance-comparison-building-android-ui-with-code-anko-vs-xml-layout-cc0abb21c561](https://medium.com/@c2q9450/performance-comparison-building-android-ui-with-code-anko-vs-xml-layout-cc0abb21c561)
Check out \[*The Joy of Kotlin\](* [https://www.manning.com/books/the-joy-of-kotlin](https://www.manning.com/books/the-joy-of-kotlin) *)* if you are intrested in FP in Kotlin.
/u/andras_k 🙏
This is pretty cool. Maybe these particular examples won't save most people tons of time, but it's cool to know that IntelliJ has the powerful tools.
Or maybe the layers and layers of abstraction you're seeing in your code have nothing to do with mutable vs unmutable and can happen in either case if you don't plan your abstractions carefully. That's my experience. &gt; Ditching mutability entirely is throwing the baby out with the bathwater. That's exactly not what the post above you implied at all. They suggested to go for immutable by default and change to mutable when there's a clear benefit to do so. You're exaggerating. &gt; This is the Kotlin way I'd like to see official documentation on this. Cherrypicking one language feature does not define "the Kotlin way". I haven't seen any official document stating either mutability or immutability is to be preferred in Kotlin code.
Thats relatively new :) If you work for a large company you probably didnt move to java 9 until java 11 and that move is happening around this year for most big companies I know of
[Boolean documentation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html) One of the nice things about Kotlin is that it is strict on types. In short, you need to use expressions that evaluate to a Boolean. Kotlin has no notion of `if(1) { ... }` or any of that other type unsafe nonsense that languages without a proper Boolean type do (cough js/ts cough). So you don't do `if(nullableStringValue)` (would be a compile error) but `if(nullableStringValue.isNullOrBlank())` (evaluates to a Boolean).
You feel stupid? Ha! I feel stupid for reading this and not knowing what you mean . Ugh
Thanks!
Wow. Thank you!😲😁
The original poster is asking if kotlin will interpret non-boolean values as boolean, as some other languages such as javascript or groovy do: e.g.: null -&gt; false, 0 -&gt; false, 1 -&gt;true Kotlin does not do this. if(null), if(1), etc. are compile time errors.
I thought they knew something I didn't, so dont let it get you down.
Thanks for your explanation. I’m interested in coding but don’t know where to start. Could you recommend a good Kotlin book for beginners?
Kotlin shouldn't be your first language. You will not understand what comes after what in terms of execution and even many years later will think that it is magic. Build a foundation first.
I was already an experienced programmer when I learned kotlin so I can't personally vouch for any kotlin resources from the perspective of an absolute beginner. This book might be what you're looking for: https://www.atomickotlin.com/
&gt;Or maybe the layers and layers of abstraction you're seeing in your code have nothing to do with mutable vs unmutable Lol not even diehard FP advocates argue this point. Purely functional codebases are rife with abstractions like lenses, state monads etc that are simply unnecessary outside this paradigm. The position of pure FP advocates tends to be that these abstractions are worth it. &gt;That's exactly not what the post above you implied at all I'm responding to the idea that benefits of immutability are large but not obvious as well as the framing of mutability as beneficial only for performance reasons. &gt;Cherrypicking one language feature does not define "the Kotlin way". I'm not saying this is some philosophical point in the language design. I'm saying it's literally the way Kotlin works with collections. I'm citing this as an example of scoped mutability.
If your talking about the auto code conversion from Java to Kotlin, then I can say that the conversion won't be perfect most of the time, but its good enough to save you a lot of time.
Auto conversion is what I thought about but wasn't sure how many issues would occur or better to just start from scratch. Then focusing on Kotlin from then on.
Start with writing new things in kotlin. If you want to be on the safe site start with unit tests. Then start converting old code. Auto conversion will save you a lot of time and produce working code most of the time but it's not following best practices and you will not learn from it so much. But as a tip while you are learning : when you copy paste Java code in kotlin files it will automatically convert. This is a good way to learn Syntax.
Doing the automatic conversion from Java to Kotlin doesn't produce the most idiomatic code, nor does it really offer any benefit over using the old Java code. The conversion is more as a shortcut for refactoring a class from Java to Kotlin, where it converts it to equivalent Kotlin code, but assumes that the developer will refactor the result into something easier to read. &amp;#x200B; If you've never used Kotlin before, I'd recommend learning the language before digging into converting an app. If you just do the auto conversion and leave it at that, you won't really be gaining any benefits by using Kotlin over Java. Learn Kotlin. You'll never want to go back to Java.
I auto-convert classes to Kotlin at work whenever I get a chance. However, the auto-converted files need lots of touch-ups to clean so definitely don't treat that as the final product. Also, auto-converting Java classes is not a good way to learn Kotlin so I recommend doing the Kotlin Koans first.
Nah don't start from scratch. Sometimes the code conversion works perfectly and you don't need to do anything. Other times, there's just small tweaks you need to do
I think you're conflating FP and immutability. Just because you're making your data classes immutable by default instead of mutable by default (OPs question) doesn't mean you have to write Haskell-style FP code. The other way around would be true. &gt; as well as the framing of mutability as beneficial only for performance reasons. We can agree on that. There are other good reasons to prefer mutability. Certain operations are easier to read when written in a mutable style than an immutable one for example. &gt; I'm saying it's literally the way Kotlin works with collections. I'm citing this as an example of scoped mutability. Fair point. I misunderstood you there because you follow up that good point with this "throwing out the baby…" phrase which to me read like you thought the top comment recommended to NEVER use mutability which they clearly didn't.
Hey, could we maybe clarify this? Why do you think IntelliJ comes with a JDK? It wants me to point it to one when I start a new Kotlin/JVM project.
Can you tell me what the benefit in the LTS version is over the newest version? What exactly does "long term support" mean in a nutshell?
I guess I was mistaken. I've not experienced any issues because my (Linux) development system comes configured with a working Java JDK which IDEA automatically picked up I suppose. &amp;#x200B; I'm using OpenJDK 8, but 11 should work too. &amp;#x200B; From a support page of IntelliJ there's a pointer to [https://bintray.com/jetbrains/intellij-jdk/](https://bintray.com/jetbrains/intellij-jdk/) to download a JDK to your liking. I don't know what the best choice for Windows is right now. I tend to avoid stuff from Oracle so I personally prefer OpenJDK or an alternative such as Azul Zulu SDK.
I work on a pretty large app that was entirely in Java when I came on board. Last year, I began the process of converting to Kotlin, going one class at a time and using Android Studio's conversion tool. It took a few months to get through the whole thing, mainly because I was going slow and being cautious, but it was a surprisingly smooth process. The main thing to remember is that the Java-&gt;Kotlin converter will make inherently conservative choices. It won't take the best advantage of the features of Kotlin; it will just make sure that the resulting code compiles and runs as expected. Which is the way it should be. So that puts the burden on you to go through the resulting code line by line and optimize it to really use Kotlin to its full advantage. Which, it turns out, is a pretty good way to learn Kotlin. But it will take some time. However, I think there are very few arguments against getting started. For a while, you'll have a project that's sort of a weird hybrid of old Java, barebones Kotlin, and fully optimized Kotlin, but that's fine. It won't be any worse than it was before, and you'll still be able to build it and even out out releases. And sooner or later, you'll have it all converted to Kotlin.
&gt;If you've never used Kotlin before, I'd recommend learning the language before digging into converting an app. I disagree with this, but it may be a matter of personal preference. I learn by doing, not reading, so jumping straight in was actually the best approach for me. I did read a little bit about the basics of Kotlin before I got started, so I didn't go in completely blind. But I knew very little. I basically learned by just starting to convert code and then figuring out how best to optimize the result to best take advantage of Kotlin. But, again, this approach may not be best for everyone. It really depends on how you work and how you learn.
Useless numbers without context
Potentially super-mega-giga-huge ... * Cloud-functions, container ([quarkus.io](https://quarkus.io)) in Kotlin with among-the-best startup time and memory usage. * Simplest possible deployment to clients or server ... desktop tools, maybe even apps like FreeMind The limitations are listed here: [https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md](https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md) Any Kotlin specific thoughts?
When will it be ready for production? I've been trying out the various RCs, but they might or might not work, based on the position of the moon. Usually they just silently fail with a random error message, if you happen to run out of memory.
`Dynamic Class Loading / Unloading: Not supported` ok bye
I'll try this out over the weekend. The RCs continued to be seriously problematic right until this release, so I'm not holding my breath. Typically, the `native-image` command just randomly failed with a completely arbitrary error message, when it decided that 16 GB of memory just isn't enough for it to compile a simple program.
only for AOTC
I wish you were specific, how does graal make my app go faster without AOTC ?
Honestly learn Java, then apply Kotlin syntax later.
graal has a new compiler that replaces the c2 compiler in openjdk (c2 is the second tier JITC for the standard jvm). graal's new JITC is written in java, and so is easier to add new optimizations to. And new optimizations have indeed been added to it, like better escape analysis that can prevent object allocation. but don't take my word on it, here's some benchmarks: https://renaissance.dev
your application is going to **start faster** with AOT, but it doesn't imply that it will be more performant. In fact applications that runs for more than a couple of minutes are going to run faster with JIT than with AOT.
Thank you. I mailed JetBrains yesterday and they confirmed my conclusions. A JRE is bundled with IntelliJ and there is no other configuration necessary, but you have to point it to a JDK. They said there is no downside in using AdoptOpenJDK over Oracle's JDK. Also, every version from 8 to 12 seems fine.
I've been using graalvm for a few months now, the only kotlin specific limitation currently is lack of support for coroutines.
State of Kotlin is dramatically changing so this is already outdated. I'd be interested to see how it is today, especially outside Android. We all know Kotlin is kicking out Java there, because Google is behind that goal.
[Shut it down.](https://i.imgur.com/qXiBdqC.gif)
There are a few issues around coroutine support, it looks likely to be supported in the future.
This is a great hype piece, but the context for numbers is lacking. When they talk about adoption over time, they show 65% in the last bar. Is that a 65% increase or 65% of students are using it? There's a big difference. The "plays on word" section was funny. Personally, I thinks it's unforgivable that they didn't call them "Koroutines".
Have you evaluated kraal, at all? [https://github.com/HewlettPackard/kraal](https://github.com/HewlettPackard/kraal) I'm just lazy and wondering if someone else has already spent time playing with it :)
I have not, but I will now lol.
I have great experience with jOOQ and Kotlin (and with Java, a couple of times). But it’s not that high level ORM like JPA, you must build some queries with an easy to use (and understand) fluent DSL. Much less magic, just debuggable generated and static java code. AFAIK there is no Kotlin wrapper for it, but it is expressive and concise as is.
JPA works fine, but we still prefer plain jdbc/jdbi
I was also looking for this and Just found the Exposed library (made by jetbrains). It looks very nice with DAO support or a DSL for sql queries. But i am Just starting with kotlin and also never used JPA or hibernate so i don't really know.
Exposed is a good time.
I prefer to use the reactive-pg-client (recently renamed to the vertx-sql-client). One of the fastest SQL clients according to benchmarks. https://github.com/eclipse-vertx/vertx-sql-client
I personally just use JDBC, JDBI, or MyBatis.
For reading you can’t go wrong with the official docs. Kotlin in Action is good, but it’s missing some of the more recent stuff. Effective Java is great to understand some of the problems Kotlin tries to solve. For videos checkout recent kotlinconf, google io, or droidcon talks.
Thank you Friend, Ill get to it! not sure about Java though. I hear it's not so easy to pickup. Going to look at this and dart Hopefully I make can make sense of either. &amp;#x200B; Thanks Again!
IMHO kotlin reference doc is the best way to learn this language. But still, if you dive a bit deeper you will have to learn java as well.
Thank you for the insight, Ill take a peek at Java, If i were to use flutter and dart, what other languages would i need to learn to, as you say to "dive deep" ? Not that it matters, I'm going to look at both fairly.
I've written an entire mobile game backend server with Kotlin &amp; jOOQ and I am very happy with it, would totally choose the same stack again! Other than writing a few extension functions that worked better with Kotlin's syntax sugar than the built in stuff, everything worked splendidly.
Dang, i have to try [https://github.com/jklingsporn/vertx-jooq](https://github.com/jklingsporn/vertx-jooq)
Kotlin makes writing a lot of the boiler plate associated with that quite easy. A lot of stuff that is hard/verbose in Java basically turns into simple one liners in Kotlin. Data classes are nice for modeling tables. I've removed hibernate in a spring project and replaced it with simple JDBC and Transaction templates. Instead of sprinkling around a lot of magical annotations, I now have simple DAO classes that take care of crud and map rows to models and vice versa on on inserts. That code is basically just a simple one liners. Those one liners basically map fields to columns with pretty much the same amount of verbosity and complexity you'd get with an annotation. Except it's all explicit and type safe. [https://dev.to/jillesvangurp/ripping-out-hibernate-and-going-native-jdbc-1lf2](https://dev.to/jillesvangurp/ripping-out-hibernate-and-going-native-jdbc-1lf2)
Java is enough, i guess. Kotlin took lots of best features from different languages (python, go, rust, scala, etc), but it hardly depends on java because it compiles into it. Also, as a bonus, Kotlin makes you understand another languages much easier.
Head First Kotlin is a new book (2019) and excellent for beginners.
had a double take there, seeing the name...
Just experimenting with SQLDelight. The setup wasn't totally straightforward but now that it's up and running it's a delight (pun intended). You just write your SQL queries and DAOs and result classes are auto generated from them.
I've been using https://dalesbred.org/ for a while. Rather nice little library especially the use SQL is a great benefit since SQL is very versatile dsl.
+1 for jOOQ, it's just marvellous and works excellent with Kotlin
Question for all the guys advocating plain jdbc: How do you handle complex business logic rules which result in complex data updates? Or is the use-case limited to basic CRUD operations?
I think creating a small programming language is a great (and interesting) project, regardless of the language you use to create it. If you're looking for some guidance i'd recommend checking out [Crafting Interpreters](http://craftinginterpreters.com/contents.html) which uses Java, so you should be able to follow along.
Try building something for the backend using ktor. It's designed around coroutines, so it will be a good way to learn about them. Also, it tries not to get in your way and only provides thin layer for handling HTTP requests and such
If you want to do something different, try playing [screeps](https://screeps.com) with [kotlin](https://github.com/exaV/screeps-kotlin-starter). Screeps is like an MMO strategy game played only by writing code, it is a lot of fun and quite challenging.
Nice ty. That sounds like what I´m searching for.
Wow, that sounds like fun; I´ll take a look thank you
Never heard about this before, but at first glance it looks very interesting, thank you
Why don't you use Kotlin on the frontend as well? I've been using multiplatform projects to great effect and I'll never code in javascript again if I can help it.
Same here. Was a little excited for just a moment
Thanks guys!
Maybe im missing something but i believe you are asking about constructors? and in particular you are maybe asking what the init { } block does? Or are you asking about something specifically called initializer?
very informative, thx for sharing
what do you say about jOOQ vs Exposed?
tl;dr on quakus? (dont know it)
I don't know how popular Flutter is, but sometimes a relaunch in this way can make a product bigger than it was, despite facilitating the same things.
After reading into Sirix descriptions, I still don't really get the use of it. It all sounds a bit complicated. Why would I use Sirix over, say, MongoDB?
This might feel backwards at first but (coming from java, just hopping into kotlin), it feels good so far.
Because you can retrieve old state of the database, how it looked like on a specific date for instance or during a given timespan. The thing is you can reconstruct a full revision in O(N) whereas N is the number of nodes in the revision and we are saving a lot more storage space or simply store more information as for instance the child- and descendant-count of each node, a merkle hash tree of all nodes... plus the indexes are versioned as well. I hope https://sirix.io/documentation.html gives a good overview about the use cases. Let me know if not :-) https://sirix.org/features.html lists some of the main features and https://sirix.io/concepts.html some of the main concepts. Besides of the whole versioning aspect, I think MongoDB is also not able to store XML-documents. One other aspect is that I think using a superset of XQuery to query both XML and JSON is also a huge plus (which is like SAL but for tree-structured data -- not even if you do not take time travel queries into account).
Because you can retrieve old state of the database, how it looked like on a specific date for instance or during a given timespan. The thing is you can reconstruct a full revision in O(N) whereas N is the number of nodes in the revision and we are saving a lot more storage space or simply store more information as for instance the child- and descendant-count of each node, a merkle hash tree of all nodes... plus the indexes are versioned as well. I hope https://sirix.io/documentation.html gives a good overview about the use cases. Let me know if not :-) https://sirix.org/features.html lists some of the main features and https://sirix.io/concepts.html some of the main concepts. Besides of the whole versioning aspect, I think MongoDB is also not able to store XML-documents. One other aspect is that I think using a superset of XQuery to query both XML and JSON is also a huge plus (which is like SAL but for tree-structured data -- not even if you do not take time travel queries into account).
The only problem I can see is that K/N compiles to LLVM bytecode which allows for multiplatform support with languages like Swift. Not sure if that could be achieved with Graal
If you plan to publish publicly, consider using [https://jitpack.io/](https://jitpack.io/). It builds the library from your source code (provided your project can publish to maven local), no need to publish to maven central (which is a pain).
iirc you can use a flag to generate llvm bitcode with graal/substrate. not sure how restrictive it is tho
I know that Graal has a Truffle interpreter _for LLVM bitcode_, called [sulong](https://github.com/oracle/graal/tree/master/sulong), which I believe means that you can take LLVM bitcode and then run that on Graal.
I'm thinking that you don't even need Kotlin Native, you would just need the Graal SubstrateVM (AOTC) supporting AArch64.
Really interesting talk. In the last few slides they touch on the internals of coroutines, unfortunately they can't go in depth on this topic. If you are interested in this topic I can highly recommend this talk: https://www.youtube.com/watch?v=YrrUCSi72E8 by Roman.
This was a fantastic video, and I loved the ending!
Couple of things. 1. Great use of IntelliJ's keyboard shortcuts (multi caret is one I always demo to people) 2. Loved the red/green TDD approach 3. Mutation testing is great ( but tricky to reason sometimes) 4. Extension function example too! 5. Knowing when it it is better to just delete it all and use something off the shelf vs re-inventing the wheel is the hardest thing to admit to. So good example of that.
Will do
Just an FYI, but lots of businesses don't allow artifacts from Jitpack to be used - for wider adoption you should probably consider JCenter or (even worse) MavenCentral. Obviously not ultra important, but worth keeping in mind! :)
You can simply publish your snapshots to OSS Sonatype. Once you want to publish your release, do the same (but to the release repository) and it will be synced to maven central in a short time. Jitpack is really just a convenience but I try to not use anything from there, as it is not checked for anything. Sonatype requires, sources, documentation and an open source license.
Well, I published to OSS Sonatype previously. Several libraries. It became a pain. You need to setup the signing stuff on all your dev computers, which can be daunting for beginners. Then you need to setup your build script to upload to sonatype. Which is not necessary straightforward. Then you have to log in via the webpage and publish. And if you make a error or want to change the lib name. You can't, whats on Sonatype stays forever. Which has both pros and cons. &gt; Sonatype requires, sources, documentation and an open source license. . Jitpack requires access to the public sources on GitHub, so it's even more transparent than some pre-built artifact from central.. Anyway, for small libraries I find that Jitpack simplifies things alot.
Hey, laht1, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
If all you want is to publish your library to Bintray all you need is a project producing jar and publishing it to Bintray. Optionally, you can add source and api-doc jars. You do all this in Gradle or Maven project. You can google something like "gradle publish to bintray" to find details. If you want to publish to MavenCentral it will be more difficult and going to take more time. IMHO, better publish to Bintray and then propagate to JCenter.
delete
Which back end are you using? If you're using Kotlin/JVM you need the JRE and JDK installed or else it won't compile properly. Its best to use IntelliJ IDEA which installs everything for you.
What about big data processing with apaches spark?
This is a problem I encountered when I started out with Kotlin. I would select the `Kotlin` option rather than `Kotlin (java)` option when creating the problem and my programs wouldn't compile how I wanted!
Try downloading `kotlin-compiler-1.3.31.zip` instead of `experimental-kotlin-compiler-windows-x64.zip`
Sounds like you never installed the JDK, which is required to compile things for the JVM
Yep they will, at some point.
I have a gist with a minimal grade config for Junit5 in the Kotlin DSL here https://gist.github.com/vbsteven/32f741fba8be4d8de5a38bfb526cd7b3
I revised that a little: https://gist.github.com/BjoernPetersen/490ea5f3489458090863706212213703 - `java`plugin is implicitly applied by kotlin-jvm plugin - `compile` dependencies should be replaced by `implementation`, `api` or `compileOnly` - I find using the `tasks` block a little cleaner, but that's personal preference
Thanks for this
Not ... really. You can write a React-Native app in Kotlin (AFAIR) but your mileage may vary. You could also use Kotlin MP to write the app. You'd write your domain logic, contracts, and implement presentation logic (Utilizing, say, MVI) in the Common module (since none of that should touch the platform APIs) and then put your concrete implementations, DI, etc. within the platform-specific module (Perhaps utilizing expect, etc, or just via proper DI) However, there are some limitations with Kotlin Native right now. Some things I can think of is the native threading model, and type parameters in Native. However, these might have been resolved since last I checked, which was about 6 months ago.
I'm aware of some people having tried using flutter with a shared kotlin native library. That seems to work well enough but you'll still have to use dart for the UI layer of course. For QT, I think you are pretty much on your own. I don't think it's widely used with Kotlin currently; if at all. React native with kotlin might work. Other than that, cross platform options are limited.
Plain old jdbc works well for me. I don't like any magic, and there's little to no magic with JDBC and not much boilerplate either.
In those cases, you just write the SQL for it. I assume anyone who advocates for JDBC (myself included) is good with SQL. More logic in the DB, is better anyway, it means we aren't tied a library (or even a language), we can switch out nice and easily.
Kotlin isn't in a stable release, and probably won't for some time. Something worth checking out is flutter. It's a cross platform sdk. Flutter is really nice to work with IMO.
You don't need a kotlin native library in flutter. Dart is already cross platform. With flutter you can still talk to kotlin and swift code for native access, but I don't see a good reason to use kolin for multi platform code.
&gt; It seems that what Kotlin gains in boilerplate reduction is lost in the rules you have to remember to master idiomatic Kotlin. And yet most Java devs I know why actually tried it are sold and prefer to use Kotlin. So either they're all wrong, or you are getting the wrong impression. Might have something to do with not even really trying it.
Tell him that allowing teams to use Kotlin could very well make it easier to hire good experience Java developers. The few Java devs I know who 'are not fans' are the same ones that are still fighting against the 'new' Java 8 lambda syntax. Edit: Oops, didn't see this was a two week old comment.
Thank you for all your comments, I will definitely look at JOOQ
I've tried pretty much every cross-platform solution out there (Qt, React Native, Kotlin Native, Xamarin, Flutter, Nativescript, etc.) and I found that Xamarin Native is the best among them for so many reasons. Here's my short breakdown of the various multi-platform technologies: 1. Qt - UI is too old and outdated; complicated build process for mobile 2. React Native - Not pixel-perfect as it just maps to native UI; 3. Kotlin Native - Ecosystem is very poor but the good thing is you can use the native libraries in each platform and create wrappers to unify them; also the framework itself hasn't yet reached production stage; you have to write the UI separately for each platform 4. Flutter - Very poor ecosystem/libraries; 5. Xamarin Forms - Like react native as it maps to native UI; slow startup; 6. Xamarin Native - Like kotlin native as you have to write separate UI codes for each platform; but uses arguably the best programming language in C#; and backed by Microsoft which is even more reliable than Google; also supports the most number of platforms including UWP, WPF, MacOS, etc. on top of iOS and Android; you have the support of the entire .NET ecosystem 7. Nativescript - Performance is terrible (build time, startup time, Angular performance, etc.)
flutter isnt ready for complex apps or apps that need much device functionality. it's on its way but still has a long way to go
wow that got downvoted hard. It really depends on what your trying to do. If you need device functionality then native is the way to go. If your app is an offline first website with some business logic thrown in, then cross platform solutions like flutter become a better choice. I assumed since OP was looking to do cross platform his app would fit into that category.
True, but if you are used to Kotlin, Dart might be a bit of a step backwards and this is a reddit about Kotlin ...
It's a step back, but not as far as Java. I just wanted to point out that writing kotlin multiplatform while using flutter is actvily fighting the framework. Just because it's about kotlin, doesn't mean that other tool sets are better for certain situations.
I think there’s a new consolidated single artifact coordinate for junit5 now instead of the three you have.
Right, but I'd prefer Kotlin over C# any day
Because what you mean is Kotlin Multiplatform or Kotlin Native is not stable. Kotlin itself very much is. Also, Flutter is hardly better suited for production.
Kotlin multiplatform is not stable. It's listed as Beta, and is fairly new. Breaking changes could be inbound in a later release. Depends on your use case, but for a simpler app flutter is fine IMO. The same types of apps you would build for react native, flutter fits the bill. Again IMO Dart is Better than JSX.
Hmm. The interop layer between Dart and Kotlin isn't very nice in my opinion. I think you have more issues with building the bridge than by just writing everything in Dart.
Weblink is marked as unsafe by Chrome
I honestly don't see how Kotlin could be better than C# although it's a much newer language. For example, here are just the things I can remember and why I say that C# is much better than Kotlin or any other language: 1. C# has far better reflection API 2. C# has LINQ 3. C# has far better threading API (e.g. TPL) 4. .NET &gt;&gt;&gt; JVM in a lot of ways 5. C# has the keyword nameof which adds to the greatness of C#'s reflection API, plus in some other areas (configurations, etc.) 6. C# has events which is a built-in way to support reactive code 7. C# supports dynamic code (using the dynamic keyword) 8. C# has ranges like Python, etc. 9. C# supports ref and out variables 10. C# and Kotlin both have optionals 11. C# has async-await which is equivalent to Kotlin's coroutine 12. C# devs seem to be really good as they're able to make huge changes in order to make C# on par with modern languages, and you can expect this in the future 13. C# will soon interop (just announced last week in MS build event) with Java and Swift in .NET 5 14. Some other little things that I won't even mention The only way I can think how Kotlin is superior is because of Kotlin's functional programming syntax and its generics API. Nothing more.
Slight self-promotion here, but I've been doing Kotlin MPP for a while and have some samples here: [https://github.com/oolong-kt/oolong/tree/master/samples](https://github.com/oolong-kt/oolong/tree/master/samples) &amp;#x200B; This project is a port of The Elm Architecture (MVU) to Kotlin MPP. There aren't any Qt front-ends for these samples, but there's an issue assigned to do so. The goal of this project is to enable a functional core for any front-end that provides a \`render\` function, regardless of platform. &amp;#x200B; For front-end render implementations I currently use [https://github.com/facebook/litho](https://github.com/facebook/litho) and [https://github.com/facebook/componentkit](https://github.com/facebook/componentkit), which are both React inspired declarative UI libraries written by Facebook.
&gt;C# has far better threading API (e.g. TPL) &gt; &gt;.NET &gt;&gt;&gt; JVM in a lot of ways &gt; &gt;C# has the keyword nameof which adds to the greatness of C#'s reflection API, plus in some other areas (configurations, etc.) &gt; &gt;C# has events which is a built-in way to support reactive c 1. ok maybe so. but, examples? 2. and kotlin doesn't? it sure does, just a different way right? 3. what you mean? isn't one of the big selling points for kotlin very performant coroutines, they use threading 4. this is very vague/subjective, explain? "in a lot of ways" is not descriptive 5. type::class.simpleName ? 6. ehh... let's not beat around the bush it would be nice to have c# events in kotlin/java 7. kotlin does too, but not for JVM I think ([https://kotlinlang.org/docs/reference/dynamic-type.html](https://kotlinlang.org/docs/reference/dynamic-type.html)) 8. uhm? so does kotlin, 0..10 or 0 until 10 etc. 9. I guess it would be nice. though, I've never found myself needing it yet... strangely enough I do in c#, weird huh 10. correct, also both are state-machines ([https://docs.microsoft.com/en-us/dotnet/csharp/async#what-happens-under-the-covers](https://docs.microsoft.com/en-us/dotnet/csharp/async#what-happens-under-the-covers)) ([https://labs.pedrofelix.org/guides/kotlin/coroutines/coroutines-and-state-machines](https://labs.pedrofelix.org/guides/kotlin/coroutines/coroutines-and-state-machines)) 11. can't we make the same argument for kotlin? it's grown a lot in recent years. nevertheless .NET devs are doing a great job 12. .NET 5 isn't coming "soon". kotlin already has java interop right now (yaay). we'll have to wait and see how good the interop actually will be. they did say it will be two-way though,at least for java ([https://devblogs.microsoft.com/dotnet/introducing-net-5/#comments-1499](https://devblogs.microsoft.com/dotnet/introducing-net-5/#comments-1499)) 13. you should mention them! not mentioning them further invalidates your point, you just mention them for the fact of mentioning them... &amp;#x200B; \`\`\` The only way I can think how Kotlin is superior is because of Kotlin's functional programming syntax and its generics API. Nothing more. \`\`\` then you clearly still have a lot to learn about kotlin... 1. infinitely great supported features using the kotlin standard library, such as let, apply, run, with, when etc.. and all the various other useful things (such as the ranges as mentioned earlier) 2. type inference. var and val, easy ain't it? 3. static things can live inside the place they belong, not a different class 4. no semicolons, very lightweight syntax that tends to be easy to read 5. coroutines (async code) facilitate asynchronous code \*\*that stays top-down, imperative code\*\* (just the kind of code we \_are good at\_ reading, though c# has this too) 6. nothing is null, unless you explicitly allow so. less prone to big time errors if used correctly. 7. extension functions and properties. you can extend \_anything you want\_, from any api you choose. don't like how the api is used but need the functionalities? extend it to make it work \_the way you like\_. 8. flow-typing. good example is using pattern matching in a when clause, or whatever. either way -&gt; yay, less code! (more info: [https://en.wikipedia.org/wiki/Flow-sensitive\_typing](https://en.wikipedia.org/wiki/Flow-sensitive_typing#Kotlin)) 9. val improvement over java's final: no longer have to mark things final \_literally everywhere\_, thank god. sure, c# has this too. 10. both a win-lose: \_no static modifier\_ in kotlin (you have to do @JvmStatic), but then also kotlin has const. sure, c# does too. I guess a tie. Java loses. 11. furthermore, safety just like null-safety: all your classes are effectively final unless marked open. I really like this 12. easy constructors. need some fields on your class? hate constructors? don't worry, kotlin's got your back! 13. \*\*data\*\* classes. remember Lombok annotations in Java? yeah forget that. just make a data class. combines super well with 12. one could argue that c# struct is similar to the data class, but there are differences (very brief description: [https://stackoverflow.com/a/47995851](https://stackoverflow.com/a/47995851)) 14. anonymized objects : \*\*Free singletons!\*\* yay! \_They also support inheritance\_ 15. sealed classes. enum classes but one steroids, seriously try them out. 16. delegated properties. simple, yet powerful. example: lazy &amp;#x200B; there is quite a few other things I simply haven't mentioned, because most kotlin users will know them. the kotlin DSL is very powerful and widely used, which cleans code a lot.
Can you explain or link an explanation to 14 please?
I recommend using Kotlin Tests for testing it's much cleaner and easier to use and works nicely with MocKK if you need that sort of thing. [https://github.com/kotlintest/kotlintest](https://github.com/kotlintest/kotlintest)
[https://kotlinlang.org/docs/reference/object-declarations.html](https://kotlinlang.org/docs/reference/object-declarations.html)
Kotlin MP can absolutely be used for mobile apps. Adoption is gaining rapidly. You will not enjoy the state of docs and tutorials, but that kind of comes with the territory for new platforms. I would \*not\* try to mix Flutter and Kotlin MP. Do either/or. Same with React and Kotlin mp as mentioned below. If you want a mono-UI and don't care too much about large teams, language choice, integrating with native UI's (or whatever), you probably want Flutter. I think your biggest risk here would be Qt, depending on what you need to do, but I haven't used it. It the Qt UI is sufficient, since you're experienced that may be fine. Disclaimer: I do a lot of Kotlin MP open source work and general advocacy, but am not affiliated with Jetbrains (or Google, etc).
&gt;ok maybe so. but, examples? &gt; &gt;what you mean? isn't one of the big selling points for kotlin very performant coroutines, they use threading You probably haven't used C# extensively &gt;type::class.simpleName ? nameof isn't just limited to class names &gt;kotlin does too, but not for JVM I think ([https://kotlinlang.org/docs/reference/dynamic-type.html](https://kotlinlang.org/docs/reference/dynamic-type.html)) Kotlin without JVM is pretty much useless right now &gt;can't we make the same argument for kotlin? it's grown a lot in recent years. nevertheless .NET devs are doing a great job It's hard to argue about people's talent of course. But what we can discuss is the amount of investment people put into the two languages, and in this area C# beats Kotlin as C# is "the" Microsoft programming language hence a whole lot more resources go into the development of C# than into Kotlin. &gt;.NET 5 isn't coming "soon". kotlin already has java interop right now (yaay). we'll have to wait and see how good the interop actually will be. they did say it will be two-way though,at least for java ([https://devblogs.microsoft.com/dotnet/introducing-net-5/#comments-1499](https://devblogs.microsoft.com/dotnet/introducing-net-5/#comments-1499)) C# can interop with other .NET languages just as Kotlin can interop with JVM languages (e.g. Java). However, C# is able to go beyond the .NET runtime with .NET embedding (thought still in preview) and even more so in .NET 5. Also, C#'s interop with native code (C++, etc.) is better than Java's JNI. &gt;then you clearly still have a lot to learn about kotlin... I've actually done more Kotlin than C# &gt;infinitely great supported features using the kotlin standard library, such as let, apply, run, with, when etc.. and all the various other useful things (such as the ranges as mentioned earlier) Most of those can be done with extension methods. The exceptions are apply and other API which are very similar to the "with" pattern in old programming languages, which is deliberately left out by designers of modern programming languages because of its reputation as an awful pattern (as a VB programmer myself, I can attest to this). &gt;type inference. var and val, easy ain't it? C# also has type inference. It doesn't have keyword similar to `val` but, to be honest, whether read-only local variables are useful is very arguable. Read-only variables are only truly useful for type members. &gt;nothing is null, unless you explicitly allow so. less prone to big time errors if used correctly. You'll have the same experience with C# 8 nullable references &gt;extension functions and properties. you can extend \_anything you want\_, from any api you choose. don't like how the api is used but need the functionalities? extend it to make it work \_the way you like\_. C# also has extension methods. It doesn't have properties extensions but it's redundant actually. &gt;flow-typing. good example is using pattern matching in a when clause, or whatever. either way -&gt; yay, less code! (more info: [https://en.wikipedia.org/wiki/Flow-sensitive\_typing](https://en.wikipedia.org/wiki/Flow-sensitive_typing#Kotlin)) C# 8 has better pattern matching than Kotlin. Also, C# 8 has switch equivalent to Kotlin's when expression. &gt;furthermore, safety just like null-safety: all your classes are effectively final unless marked open. I really like this It's a matter of preference whether you want something to be open (or virtual in C#) by default or not. &gt;\*\*data\*\* classes. remember Lombok annotations in Java? yeah forget that. just make a data class. combines super well with 12. one could argue that c# struct is similar to the data class, but there are differences (very brief description: [https://stackoverflow.com/a/47995851](https://stackoverflow.com/a/47995851)) C# 8 has records which is even better than Kotlin's data classes ***EDIT:*** Oh, and I forgot tuples which is one of the things that I often miss when developing in Kotlin (C# has both value type and reference type tuple API).
Various responses. Yes, you can write production Kotlin MP, but UI's will be platform specific. You can implement much of what's below the UI in shared code. I don't know why you'd expect to implement 'domain logic' in platform specific code. The "native threading model" is different, but not a "limitation" unless you hate that (which is a non-zero percentage of the community). If by "type parameters" you mean generics, [hopefully 1.3.40](https://github.com/JetBrains/kotlin-native/pull/2850). Summary, lots of work to do, lots of progress since 6 months ago.
Also, we have to focus on things that really matter and not on features that people rarely use. Further, a lot of things that you mentioned (and also the C# features that I deliberately left out) are purely syntactical sugars.
Absolutely no reason to use the first option. You missed top-level functions. @file:JvmName("Foo3") fun fun3() { println("fun3") }
(Somebody correct me if I'm wrong) If all you want is static functions, best practice would be to use top level functions without a class at all.
Having done a lot of C# coding for the last year or so I would like to comment on this &gt; 2. C# has LINQ There's nothing, other than some weird stuff like GroupBy/IGrouping, that LINQ does that you don't have in Kotlin default collection extensions. &gt;7. - C# supports dynamic code (using the dynamic keyword) 9. - C# supports ref and out variables These features are terrible and its overuse made for the worst pieces of code I've seen. This is comparable as saying that having a GOTO is an advantage for a language. It's ok to have for where in some edge case it might be a good choice, but almost never it is. &gt;10. - C# and Kotlin both have optionals Kotlin and C# optionals are not equivalent, while C# nullables can be null C# non nullables can also be null. This combined with the struct/class mess in C# creates a natural source of many trouble and bugs. Regarding reflection C# is superior than Java VMs reflection, both in speed and that sometimes you don't need reflection in C# were otherwise in Java you would. That doesn't mean any of the "12. C# devs seem to be really good " should be abusing reflection in C#, even there it's not for free.
What do you mean by "pure"? Kotlin is just a language, it always runs on...something. I guess if you want the most "pure" then just build a common module in MPP and don't have any expect/actual classes
&gt;There's nothing, other than some weird stuff like GroupBy/IGrouping, that LINQ does that you don't have in Kotlin default collection extensions. People saying this clearly don't know what LINQ is really about (and, in extension, advanced C#). It isn't just about convenience, LINQ is mainly about exposing your data in code. Start learning what I'm talking about by researching IQuerayable vs. IEnumerable &gt;These features are terrible and its overuse made for the worst pieces of code I've seen. This is comparable as saying that having a GOTO is an advantage for a language. It's ok to have for where in some edge case it might be a good choice, but almost never it is. The dynamic feature isn't actually intended to be used for dynamic programming. Its use is primarily geared towards code involving reflection. As for ref and out, they're very useful in abstracting out similar codes (e.g. assigning backing fields). You probably haven't used these features extensively and just basing your opinion about them on some novices' use of these particular features. &gt;Kotlin and C# optionals are not equivalent, while C# nullables can be null C# non nullables can also be null. This combined with the struct/class mess in C# creates a natural source of many trouble and bugs. Whether strict nullability/optionals (to be honest, anything else that is too strict) is good or not is a matter of preference. You will realize this when you are forced to refactor your type members by adding "!" and lateinit, and when you expereince programming in pure functional programming languages like Elm and Haskell. &gt;Regarding reflection C# is superior than Java VMs reflection, both in speed and that sometimes you don't need reflection in C# were otherwise in Java you would. That doesn't mean any of the "12. C# devs seem to be really good " should be abusing reflection in C#, even there it's not for free. It's actually a combination of many features (expression trees, dynamic, nameof, etc.) that is the reason why C#'s reflection API is better than Kotlin's or Java's.
What are the advantages of using `lazy` over a simple supplier pattern? fun getValue() : Int { println("Returning 5") return 5 } fun printValue(value : () -&gt; Int) = println("Nothing") fun main() { printValue(::getValue) } This achieves the same Lazy evaluation without the need to do anything with the `lazy` operator. Is it more efficient to use `lazy`? Lazy clearly uses a Supplier behind the scenes, but what does wrapping it in the `Lazy` object get us besides another object creation and an `isInitialized` function?
The lazy also supports the thread safety implantation by default which the Java Supplier does not.
Can you give me an example? I'm curious! edit: Ah, wait, does `Lazy` provide memoization?
By pure I meant code that could be reused on any possible platform. Using MMP make perfect sense but I was just wondering if there is any other way. Thanks for response.
Yes.
Got it, cheers :)
Thanks. I think I'll forget about Kotlin for now. I think Qt/Qml is going to be quicker for now. Even though deployment is a pain and somewhat bloated.
AFAIK you still can't scope a top level function. For most utility functions I would prefer [`FooUtils.`](https://FooUtils.bar)`bar()` than `bar()`
which version of Chrome? Do you have a plugin or something?
Kotlin does a lot of things better than C# but generics is not one of them. Kotlin generics experience erasure during runtime (unless using inline functions) and have no new() constraint.
I would keep @JvmStatic functions in a Singleton object just to stop the namespace pollution from getting out of hand.
&gt;Kotlin does a lot of things better than C# Nope. It's the other way around &gt;but generics is not one of them Kotlin has wildcard and covariant generics, C# has none &gt;Kotlin generics experience erasure Which is partly why I'm saying C# reflection API is so much better
Chrome 74.0.3729.136 App on Android pie with Pixel 3
Ok now it's fine with Chrome, but my University proxy still maked it as unsafe. And unsafe in a malware context not NSFW that is never blocked.
Thanks for testing it. There was a subdomain of the site which was pointing to a different host, and that host got hacked. I think some proxies marked it as malware then, but they never bothered to take the site off it again when it was malware free (the main site never had malware, just a different host).
u/solarmoo900 is correct. To clarify this in your mind, consider that the library "as source code" and the library "as a resulting binary artifact" are two different things. Yes if you write library *source code* using only the Kotlin `stdlib` and use no `expect`/`actual`, you will be writing a 'pure Kotlin' library that *can be compiled* for any of Kotlin's targets (JVM, JS, Native etc.). Compiling however, is always done for a specific target. *All* the resulting binary code is targeted at the platform, regardless of whether it came from 'common' source code. You cannot have a cross-target binary artifact. This distinction is slightly muddied by the fact that Kotlin's JVM target is byte-code which can run on multiple underlying platforms, but even then: the JVM can be considered a distinct 'virtual' platform - no part of a common-source library compiled for the JVM will execute on Native or JS, or vice-versa. Another way to think about this, is that the 'common' source-set in an MPP project is **not** compiled once and included in each of the specific targets - it's **compiled repeatedly, in combination** with each of the platform specific, target source-sets.
Very cool library, using it a lot in our projects =D
That's cool. Do you you have any use cases you can share?
From my point, when you have some util logic, which is need to be used in a scope of one package - top level functions are your challenger. But if you have a lot of such functions and there usage is spread over your app, things could become a little bit messy. So then `object Name {}` is preferred.
I would say we use extension methods a lot and almost no parameters \`\`\` fun EasyRandom.typeName() = nextObject(TypeName::class.java) &amp;#x200B; // for example fun EasyRandom.string() = nextObject(String::class.java) \`\`\` &amp;#x200B; Sometimes it's a bit more complex with parameters: \`\`\` fun EasyRandom.typeName(param:AnotherType) = TypeName(param, nextObject(AnotherParam::class.java)) // for example fun EasyRandom.specialUri(prefix: String) = URI.create("$prefix/${this.string()}") \`\`\`
Put whitespace around operators - jesus
Use `object` so they don't show up in suggestions when you start typing. Having thousands of them will strain IJ.
\&gt; I don't know why you'd expect to implement 'domain logic' in platform specific code. I don't? By threading, I really meant that last time I looked, Coroutines only supported single thread execution (or something like that) on Native. Lots of progress yes, but I'd be wary of using it in a production app at the moment.
My router also prevents access because `www.jworks.io` is categorized as spam.
it seems it's time for a new domain name :-(
nice. We use objectmothers for that: https://www.jworks.io/easy-testing-with-objectmothers-and-easyrandom/ Gives a bit more intent in what you want to create
Being wary of prod app makes sense, but that's a spectrum. Significant apps are using it in production, and there are still companies that don't use Kotlin on Android because it's "risky", or they don't want to retool their builds, etc. Coroutines is still "single threaded". That sucks, frankly, but you can do multithreaded concurrency, with or without coroutines, you just can't use all the features of coroutines.
The namespace is the package while "top level" functions belong to a package and can be imported seperately or even be called with their fully qualified name. The problem is, the code completion does not work as nice as with functions in an object, because their are no typealiases for packages.
When you learn Kotlin from a Kotlin/JVM tutorial, is most of it applicable to /JS and /Native as well? I mean the syntax and everything.
It is a good practice to return immutable collections and a bad pattern in your initial approach to populating the list. Do val list = listOf&lt;User&gt;( User("Yash",24), User("Dilpreet",22), User("himanshu",24), User("deepanshu",21), User("rohit",19), User("sonam",18) ) instead of val list:ArrayList&lt;User&gt; = ArrayList() list.add(User("Yash",24)) list.add(User("Dilpreet",22)) list.add(User("himanshu",24)) list.add(User("deepanshu",21)) list.add(User("rohit",19)) list.add(User("sonam",18) That way you ensure that your list is not modifiable when passing it as argument from function to function or lambdas.
MVVM is great. For Android, you'll want to look at examples using the Android Architecture Components. You can find these all over Github. &amp;#x200B; For Kotlin Native, you can still totally do MVVM, you'll just need to do a little more scaffolding yourself.
How about Redux ?
As an alternative to MVVM? I think you'll find a lot of information on MVI with respect to Kotlin, which is similar to Redux. Both are fine. However, Google has tools in place (Like LiveData, ViewModel, etc) that make MVVM quite simple. You could use a library like [Roxie](https://github.com/iammert/roxie) as well.
Yes it feels very similar, for me personally it's just about code conciseness.
Okay thanks I'll have a look at this tomorrow and see if I can get somewhere. :)
For the most part yes. Anything that uses Java imports or Java synchronization is obviously out. But the Kotlin standard library is implemented mostly the same in Javascript and native. Personally I have encountered some issues with using synchronization features and with floats. For example, a float array will have 32 bit floats in Java/Javascript but
The syntax is all the same. The contents of the standard library differ somewhat.
You could download a prebuilt jdk (for example https://jdk.java.net/12/). I don't think those need installing, you can just run the executable. Though it might be hard to use it on random hosts, since it's about 200MB compressed.
Thank you!
Oh nice, that's really useful . Thanks :)
\&gt;Nope. It's the other way around This is subjective but both languages have their strong points. There are things I like about Kotlin I wish C# had (i.e. enums in Kotlin are more powerful and versatile, singletons, let, apply, etc) and vice versa. C# 8 will soon incorporate a lot of features already present in Kotlin today. That alone speaks to the strength of Kotlins feature set. C#'s weak points will be shored in version 8 and will bring the 2 languages closer in alignment. There are things I like about both though and as I said its subjective to the coder which one is "better". \&gt;Kotlin has wildcard and covariant generics, C# has none C# generics has always supported wildcard behavior and covariance. [The Kotlin documentation directly mentions C#'s covariance as a point of validation in why they made certain decisions regarding the route to take in Kotlin](https://kotlinlang.org/docs/reference/generics.html): *"We believe that the words* ***in*** *and* ***out*** *are self-explaining (as they were successfully used in C# for quite some time already), thus the mnemonic mentioned above is not really needed, and one can rephrase it for a higher purpose"*
&gt;enums in Kotlin are more powerful and versatile, True because, as I've said, Kotlin leans heavily towards functional style programming &gt;singletons This, along with other Kotlin "features", is very trivial and rarely used by and benefit the programmer and hence doesn't make Kotlin any better. Also, if you're using a DI container (and I expect you do whether it's third party or your own), you won't use the said feature at all. &gt;let, apply, etc) and vice versa. As I've said in my other comments, let and similar functions (except apply, etc. which is similar to the dreadful with pattern) are just extension methods (i.e. you can easily implement them in a one-liner code). &gt;C# 8 will soon incorporate a lot of features already present in Kotlin today. Which is why I'm saying C# devs are very good as they can make huge changes to an old language and make it on par with new languages &gt;That alone speaks to the strength of Kotlins feature set. Of course, because Kotlin is a decade newer &gt;C#'s weak points will be shored in version 8 and will bring the 2 languages closer in alignment. Nope, Kotlin will still be chasing C# for a lot of things that matter (e.g. LINQ for exposing data from any format in code, threading framework and API, tuples, events for native reactive code, the underrated nameof keyword, ref and out variables for abstracting field assignment sandwiched in similar code, etc.) &gt;C# generics has always supported wildcard behavior and covariance. I meant invariant generics (I honestly always mistake one with the other LOL). And no, C# doesn't support wildcard (nor raw) generics.
Thank you!
The definitive answer will be Jetpack Compose as soon as it hits 1.0; literally Flutter for Kotlin. Declarative UI is the way to go. So if I were you, I'd probably start orienting myself towards that, so you're good to go when it hits general release.
You actually can use something like [Launch4j](http://launch4j.sourceforge.net/) to bundle just the JRE and it only adds a few tens of MB (plus however big your dependencies are, of course.) I don't know if there are any gotchas for Kotlin but I can't think of a reason offhand there would be.
Kotlin can run on iOS?
alternatively for MVI, RxJava is your best friend, but has a very steep learning curve - which i think most will agree is worth the initial upfront time cost.
not really sure Jetpack Compose is an architecture, definitely a tool that helps *facilitate* good architecture, but not an architectural pattern. With that said it will be a powerful tool once the first stable release is out.
It'll be a long while until Compose hits general release. i'd bet a year from now
With [kotlin native](https://kotlinlang.org/docs/reference/native-overview.html) it can
Putting your application logic in a separate independent module (all IO related things depend on interfaces and are therefore testable) is generally a good idea and especially in Kotlin it has the benefit to be usable for multiplatform projects, if it's put in a Kotlin/Common module.
/u/Exallium gave you great recommendations. Also be sure to check out Android Jetpack, which pretty much are the official Android architecture guidelines : https://developer.android.com/jetpack/docs/guide
It depends on how you run it. You have to make sure the mysql.jar is on your classpath. If you run your code with `java -jar` you most likely have to add it with `-classpath`. On the AWS side you have to make sure that the RDS security group allows connections on the mysql ports from the location where you are executing the code.
My favorite is **MVWW** as in **M**odel **V**iew **W**hatever **W**orks for you. I personally really like the MVVM Google advances but without databinding. So I do repos + viewmodels + observe states from viewModel through livedatas in activities and fragments.
thanks gilgamesjh, i did go through the same thoughts that you have shared here.
I'm pretty sure your URL is wrong. Have a look at the java doc for the getConnection method. It should tell you the format you need (something like jdbc:mysql://yoururl. As for dependencies, any reason you are not using Maven/Gradle/etc.?
This. You'd be amazed how much logic can go into the common module
I love LOVE RxJava but I think there's an argument to be made for Coroutines and Flow if you're looking to develop MPP style applications :) I've not dug into it very much but it seems promising!
Clean Architecture with RxJava, Dagger2, MVVM with ViewModel + MVP all the way
I've seen stuff in the past about combining Kotlin for business logic with Flutter for UIs, but nothing in this article has anything to do with Kotlin... it's all Dart.
That's reasonable. Not sure why I'm getting so many downvotes though; I think it was a valuable contribution to the OP.
I’ve only seen the OLX guy talk about Kotlin + Flutter. Do you know anyone else doing it (and explaining how to do it)?
Good point about floats. Another one is Longs on JavaScript have to be a special object because of JavaScript limitations. Hopefully BigInt gets more browser support this year.
hohohohohohoho! You killed me!
Garbage collection, probably?
That might be true, so GC is using more than one core?
Sure, maybe. Try using the serial GC with -XX:+UseSerialGC and see if it still uses all of your cores. https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/collectors.html
Damnnn, it acutally was GC, thank you vary much sir, u are a god
I was actually looking at this and a few other kotlin frontend frameworks yesterday. Just to see where things stand in terms of scope and maturity. I kind of like the how this is structured and I guess this is pretty much one of the more popular kotlin js frameworks currently. Most of the other kotlin frontend stuff out there is not really maintained that actively but this is a positive exception. I'm a bit worried about the complexity of the build files. It seems to depend on a lot of grunt and npm stuff. It would be nice to get away from as much as possible of stuff like that. Webpack and crap like that is just endlessly frustrating to deal with IMHO. Some additional worries that I have are that the kotlin frontend plugin is not being updated that regularly. It's still on 1.3.21. Same for Snabbdom which has not been updated in months. Neither of these are your fault of course but it makes them a bit risky to have as dependencies. But don't get me wrong, this is a pretty awesome project and I might give it a try for some internal tooling that I'm looking to modernize. I fully appreciate that you need to work with the limited tooling that there is right now.
Here's some old code I had for an Oracle connection, I use Hibernate now but got really frustrated at one point with stored procs and was using jdbc... anywho, it's not a full answer but maybe can help you get off Java and back to Kotlin :) Refs in build.gradle: //tag::jdbc[] runtime ("com.oracle:ojdbc8:12.2.0.1") testRuntime ("com.oracle:ojdbc8:12.2.0.1") //end::jdbc[] Kotlin file excerpt: import java.lang.Exception import java.sql.* import java.sql.Connection import java.sql.DriverManager class OpinionManagementService { private var citDatabase : Connection? = this.getConnection() @Throws(Exception::class) private fun getConnection(): Connection? { if (this.citDatabase != null) { return citDatabase } val dbUrl = "jdbc:oracle:thin:@[ipaddress]:1521/XE" val dbUser = "[dbuser]" val dbPassword = "[password]" var conn: Connection? try { // Step 1: Allocate a database 'Connection' object conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword) } catch (ex: Exception) { ex.printStackTrace() throw ex } return conn } fun saveOpinion (opinion: ByteArray) : Int? { return try { var con = this.citDatabase var pst = con?.prepareStatement("{call OPINIONS.OPINIONMANAGEMENTPACKAGE.ADDOPINION (?)}") var blob : Blob? = null pst?.setBlob(1, blob) pst?.execute() 0 } catch (ex : Exception) { -1 } } }
i have it declared in the dependencies of the gradle
thank you much! Do you also know how to require SSL for encryption.
Thanks for feedback and some nice words. Believe me, the build process complexity is bothering me as well :-) I had to integrate grunt, because for the moment I didn't find any other working solution for i18n with gettext. I'm still searching for alternatives. As for webpack and kotlin-frontend-plugin, I've heard JB is working on integration of all these tools with new version of Kotlin plugin. That's why kotlin-frontend-plugin is not updated anymore. I'm looking forward to the result, because it can significantly improve and simplify the way of building Kotlin/JS applications.
I don’t, Oracle handles encryption under the hood. If you can, use a service layer exposed over https instead of directly accessing the db outside of your private network.
Right, good to know that Jet brains is on this. I've been a bit puzzled about their lack of activity with this. The state is a bit of an impediment for people using kotlin-js. Regarding i18n, this might be of interest to you: [https://projectfluent.org/](https://projectfluent.org/) There's no kotlin framework for this currently but there are javascript and rust implementations already. Also the DSL looks like doing a Kotlin equivalent should be doable.
If you are using gradle, don't use implement, use compile, don't know why but with implements it doesn't work as expected, and you have to especify where the main class is, not on a pc right now so Google how to do it.
Ill help u when im back home in an hr or so
Here's a simple example using Maven: https://github.com/spearskw/KotlinMavenShadeExample Here's an actual app using Gradle: https://github.com/spearskw/iMessage For the gradle example, take a look at the `jar` section in the `build.gradle` file. If you could post some code on github we might be able to help you out better. Some things to look out for: Maven assumes stuff is in `src/main/java`, so you actually need to specify `src/main/kotlin` as a source directory. Also, make sure you are using the fully qualified name for your main class (including the package it's in).
[https://kotlinlang.org/docs/tutorials/command-line.html](https://kotlinlang.org/docs/tutorials/command-line.html) &amp;#x200B; You can compile one Kotlin file into a jar.
Easiest way is with _shadow_ https://imperceptiblethoughts.com/shadow/getting-started/ To compile after adding the plugin, just run the `shadowJar` gradle task
I use gradle. For a tornadofx application you just need to add the dependency. Then make sure you have a class that extends App with a parameter that is a class that extends View. See this page: https://edvin.gitbooks.io/tornadofx-guide/part1/3.%20Components.html. If it's still not launching, you can add a main class that looks like this, but it should be optional in recent JVM versions as noted in the page linked above: fun main(args: Array&lt;String&gt;) { launch&lt;MyApp&gt;(args) } Where MyApp is the class that extends App. If you want a standalone jar that doesn't require external library files, use shadow as noted by /u/cedrickc. It's my favorite implementation. It's both the easiest and most powerful. Just add shadow to the plugins clause in gradle and run the shadowJar task.
Thank you i will try it later
I'm curious why they don't use ldc?
You suddenly switched from declaring your lambda parameters to using `it` without an explanation. Might be useful to mention this somewhere in case new Kotlin devs read this and are confused. &amp;#x200B; I don't think I knew about the groupBy and associateBy functions though, awesome!
It looks like you've made a number of assumptions (\~10 jobs, \~5 connections, 1:1 CV to pool ratio, and I guess jobs are separate processes?). Overall, Vert.x plus MQ plus SQLServer is reasonable. But I'd start with a simple architecture and then evolve it as you find the pain points, unless your past experience tells you where those pain points are going to be found. Also keep in mind that behavior/performance can be affected quite dramatically by things like GC tuning (and which GC you use), deployment environment, and other "not in the code" characteristics/settings.
It almost sounds like you are going for an Actor model. Where you have a coordinator and workers that pull jobs from the coordinator. Have you looked at Akka before?
It almost sounds like you are going for an Actor model. Where you have a coordinator and workers that pull jobs from the coordinator. Have you looked at Akka before?
It almost sounds like you are going for an Actor model. Where you have a coordinator and workers that pull jobs from the coordinator. Have you looked at Akka before?
It almost sounds like you are going for an Actor model. Where you have a coordinator and workers that pull jobs from the coordinator. Have you looked at Akka before?
Does it contain the third party libraries like TornadoFX?
Endtest spam
To the question asked in the title &gt;Does JetBrains rewrite IntelliJ IDEA's code in Kotlin? The answer is no. There is no reason to do so. To the question asked in the post &gt;Are they writing IntelliJ's own code in Kotlin now? The answer is mostly yes (they probably do write a bit of java in places where they have no choice), although the main reason they made kotlin was to bring people to their platforms via IntelliJ.
That's exactly it. It avoids allocating the string if the check passes.
Yes, that's the reason. The parameter is also named lazyMessage or sth like that. Good question though. The one taking the Lambda is marked inline. Maybe they wanted to avoid an overload?
This, it was confirmed to me by some JetBrains guys a few years ago.
But you still allocate a function, no? Is the function smaller than the string?
Most functions that accept a lambda are marked as `inline` so the body of the function is inlined into each call site. This avoids any lambda instance creation overhead and there is no function call at all anymore.
https://blog.jetbrains.com/kotlin/2011/08/why-jetbrains-needs-kotlin/
Doesn't the string get allocated then?
No, the string still only gets allocated if the (inlined) code that allocates it is hit at runtime.
why would that need to be done? isn't the whole purpose of kotlin the interoperability with java?
You are right. Either its \`inline\` or its not. When its \`inline\` you get the cost of the string allocation if the check passes. If its not, then you get the cost of creating an anonymous object. &amp;#x200B; It's interesting, i just tested around a bit: The compilers recognizes the print as a function without side-effects and totally removes the call from the bytecode, while it does not when not inlined. It seems like inlining thus is the better option
They also said so on stage at Google io last week
Jeffrey van Gogh has mentioned topic on Google I/O: [https://www.youtube.com/watch?v=ldM6QZy9e0s&amp;feature=youtu.be&amp;t=1618](https://www.youtube.com/watch?v=ldM6QZy9e0s&amp;feature=youtu.be&amp;t=1618) &amp;#x200B; &gt;Please don't take "Kotlin first" as "I need to go take all my Java code and rewrite it in Kotlin". That's not what we want you to do. Look at Android studio. That's many many hundred thousand lines of code. Right now, we're about 10% Kotlin of the Android Studio specific code. And so what we do is we only take new functionality, write that in Kotlin. And it is possible because Kotlin has great interoperability with Java. So you can write a single class in Kotlin and keep the rest in Java or have 99% of your code in Kotlin and have only some leftovers in Java.
I think there is some confusion in this thread. The work that is avoided is the work to build the string of the message, which depending on the contents of the message might be a decent amount of work. It is not to avoid a single allocation. Look at [this example](https://javap.yawk.at/#PHbd2W), the important part is, ``` 9: ifnonnull 47 start local 2 // int $i$a$1$checkNotNull 12: new #39 // class java/lang/StringBuilder 15: dup 16: invokespecial #40 // Method java/lang/StringBuilder."&lt;init&gt;":()V 19: ldc #42 // String foobar: 21: invokevirtual #46 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 24: aload_1 25: invokevirtual #49 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder; 28: invokevirtual #50 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; end local 2 // int $i$a$1$checkNotNull 31: astore_3 32: new #18 // class java/lang/IllegalStateException 35: dup 36: aload_3 37: invokevirtual #22 // Method java/lang/Object.toString:()Ljava/lang/String; 40: invokespecial #26 // Method java/lang/IllegalStateException."&lt;init&gt;":(Ljava/lang/String;)V 43: checkcast #28 // class java/lang/Throwable 46: athrow StackMap locals: java/lang/Object java/lang/Object StackMap stack: 47: return ``` in function `example1`, see that the `StringBuilder` method calls occur *after* the `ifnonnull` instruction, ie only if the message is going to be passed into the exception constructor. But in the case of `example2` which does not take a function argument you have, ``` start local 1 // java.lang.Object obj 8: new #39 // class java/lang/StringBuilder 11: dup 12: invokespecial #40 // Method java/lang/StringBuilder."&lt;init&gt;":()V 15: ldc #42 // String foobar: 17: invokevirtual #46 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 20: aload_1 21: invokevirtual #49 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder; 24: invokevirtual #50 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 27: astore_2 start local 2 // java.lang.Object message$iv start local 3 // int $i$f$checkNotNull2 28: aload_0 29: ifnonnull 47 32: new #18 // class java/lang/IllegalStateException 35: dup 36: aload_2 37: invokevirtual #22 // Method java/lang/Object.toString:()Ljava/lang/String; 40: invokespecial #26 // Method java/lang/IllegalStateException."&lt;init&gt;":(Ljava/lang/String;)V 43: checkcast #28 // class java/lang/Throwable 46: athrow end local 3 // int $i$f$checkNotNull2 end local 2 // java.lang.Object message$iv StackMap locals: java/lang/Object java/lang/Object java/lang/String StackMap stack: 47: nop 48: return ``` where the message is being created even if the exception is not thrown. In this case the work to build the message is pretty minimal, but it could potentially contain some calculation.
Ok thanks that confirms what I've been thinking.
Spring has its own DI from the box. If you are going to use Ktor you could use Kodein or Guice, which is my favourite. Also i did not like dagger 2 as a backend guy because you have to manually rebuild project after any class signature changes.
Yea this totally makes sense, thank you.
Yea I didn't think that through
I used koin with ktor for backend, it's fine
With Ktor you can choose from Dagger, Koin or Kodein. Dagger is more boilerplate and compiler overhead but will provide compile safety and less runtime overhead.
Intellij was already re written in kotlin if I'm remembering correctly, that's part of the reason they created kotlin.
Strange indeed I thought the whole purpose of Kotlin was to be a new language !!! If it is too much dependent on Java the whole Kotlin Enterprise will collapse, in the end...
Ultimately it's a JVM language. They can't get away from their java dependency.
I think they should have improved Java to the standard of C# and run with that. Kotlin attempts to fix an old version of Java. C# was created from scratch to be a better Java with no dependence on it at all.
and yet the syntax of kotlin is simply better than c#
No because the string will only be allocated if the lambda is used. Here is an example: require(x &gt; y) { "$x must be greater than $y" } Since \`require\` is an inline function, the above line will get replaced with this at compile time: if (!(x &gt; y)) { throw IllegalArgumentException("$x must be greater than $y") } Notice how the string is only initialized if it's actually used. This is the best of both worlds since we have no function call, no lambda object creation, and no string creation unless it's actually needed.
No, it's not a choice between string creation or lambda creation. The inline modifier makes absolutely no difference regarding the string allocation since the string will always be allocated when needed regardless if the function is inlined or not. &amp;#x200B; So non-inline will create a lambda object in addition to creating the string when needed and inline functions simply eliminate the need to create a lambda instance. Inline is preferred for short functions that accept lambdas.
Ah I see, thank you!
Well, except it's not just a JVM language. Kotlin/JS and Kotlin/Native are a thing.
I know most official plugins are written in kotlin. The Rust plugin is kotlin for example.
I haven’t read the book, but I’ve seen some of the public speakings of the author and I know what he usually talks about. In my opinion, the only way to write reliable and maintainable software is to use whatever instruments suited the best for your situation. We can see that no pure OO language is used nowadays in the industry. Most of the languages are multi-paradigm because it gives you power to solve any problem in most convenient way it can be solved :)
While there are some very good ideas (immutability For example), i agree with your first sentence and with what fminutes said above. I read some posts at www.yegor256.com... the examples show clearly that those hard principles collide with each other. There are also some crazy ones like the static methods one. Like stated in the comments by various people, many aspects additionally source from java language limitations. So high quality OO code maybe, but certainly Not high quality code in general. And who really wants pure OO code, whereas OO is Not the best solution to all problems.
Where would they not have a choice? Anywhere java can be used then so can kotlin?
Indeed, I think they'd take that as a challenge and fix that in the language. They probably nailed all those use cases pretty early in the life of Kotlin.
I didn't buy the book (yet), but I pretty much sucked up all of his advice that he writes about in his blog. I'm pretty happy with it. It's unusual and polarizing at first, but I feel that my code base is so much cleaner using his suggestions, especially when using Kotlin. It's a little bit more cumbersome in other languages that I need to work with (e.g. Python, for the lack of interfaces and direct delegation).
/u/abreslav thoughts?
See [this](https://medium.com/@ranilch/self-loathing-in-kotlin-d17431bcf21e) and [discussion following it](https://www.reddit.com/r/Kotlin/comments/bipj0q/functional_interfaces_selfloathing_in_kotlin/). The bottom line is to "leave all public facing APIs as Java". These issues will be fixed with a new type inference algorithm that is introduced [here](https://www.youtube.com/watch?v=MyljSWm0Y_k). It is available right now experimentally as described [here](https://discuss.kotlinlang.org/t/new-type-inference-in-kotlin-1-3-0-rc-190/9914/4).
Please see [my other comment](https://www.reddit.com/r/Kotlin/comments/bq2z0o/does_jetbrains_rewrite_intellij_ideas_code_in/eo3whx2?utm_source=share&amp;utm_medium=web2x).
These two approaches serve different goals. GraalVM gives you a JVM program compiled to a native binary. Hence, all the goodness and badness of the JVM come with it. Kotlin/Native gives you Kotlin language semantics plus Kotlin standard library, and nothing else from the JVM world. GraalVM will get you a native binary which will be a good fit for some use cases, Kotlin/Native will cover other user cases. There's some overlap, but not too much of it. As an example, an iOS binary is not something GraalVM can do today or in the foreseeable future.
Does this help? https://youtrack.jetbrains.com/issue/KT-27015#focus=streamItem-27-3074024-0-0
https://www.baeldung.com/thread-pool-java-and-guava
Alright, so I think I did this right. Is it as simple as doing this? val executor : ScheduledExecutorService = Executors.newScheduledThreadPool(10) private fun crawlFeeds() { this.subscriptionRepo.findAll().forEach { executor.scheduleAtFixedRate({ FeedParser.parseFeed(it) }, 0, 20, TimeUnit.MINUTES) } } This should limit the number of threads to 10, and the executor will automatically start pulling the item from the array as they complete. Are there any edge cases where the executor won't pull the object?
I believe you technically *can* have whitespaces in these, but you definitely should not put whitespace in any of those. Not only is it not conventional, but also you will run into all sorts of problems. For example like 70% of programs that require you to input a path will flip out if you have whitespaces, and you will need to figure out you needed to have that path in parentheses, and then in some of 30%'s programs having parentheses will cause problems too. Anyway, best if every folder and every source file in your computer will have no whitespace and no non-ASCII characters.
Thank you. To Kotlin files it actually adds underscores. But I am confused about project names. In Android Studio, I created project names with spaces all the time. Is this wrong?
Definitely.
You might want to separate task scheduling and task execution. Have a scheduled task which executes every N minutes, and dumps all the feed update tasks into the thread pool, if the queue is empty. I assume that you'll have sane timeouts for the tasks.
&gt; This isn't feasible since scraping hundreds of feeds kills my memory and performance. This doesn't make sense to me since each fetch is sequential, parallelizing requests will only make this worse.
This will schedule each url to be fetched every 20 minutes, is that what you want? One thing to be careful of with executors is that exception handling can be a bit tricky, in this case for instance if one fetch throws an exception (site is down, network dies, etc) future fetches will no longer fire. Probably not what you want.
Also ensure that you are taking the correct dependencies for script support, for my own project I need: org.jetbrains.kotlin:kotlin-scripting-common org.jetbrains.kotlin:kotlin-scripting-jvm org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable org.jetbrains.kotlin:kotlin-reflect // needed for scripts
Probably the most "canonical kotlin" way of doing this will be to leverage coroutines, maybe add a [pmap](https://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/) implementation and pass in a `CoroutineContext` with a fixed size thread pool.
Yes. I want to scrape every 20 minutes and send a push notification if a new item has been added to the feed. How would you handle the exception and ensure that thread will continue? Sorry if these are basic questions, I’m primarily a mobile dev working.
I have not read the book, but have read quite a bit of the author's material online and have explored a couple of his projects on github. I agree with most of what he says, having arrived at similar principles myself. My criticism is that he treats the principles of OOP and his implementation of them as inviolable laws. Read, understand, and practice the rules he espouses. They are good, and you'll write better code by following them. Don't be afraid to break them, but before you do so have a good think about it and figure out if there is another rule you're applying that is more appropriate.
Are you sure about that? The Project name creates the app name and apps having white spaces in their names is normal. Also, it automatically removes the whitepase from the package name and project location.
My thoughts exactly, for a few months I've been exploring the origins and the differences between FP and OOP. I realized that both paradigms aren't really that different; they both encourage similar principles, and that makes sense, as they share a common purpose. During this "journey" I realized that most of these principles have already been in my head for a while, it's common sense + conventions. Purity is perfect, in a perfect world.
So, for multiple words, the [official coding convention](https://kotlinlang.org/docs/reference/coding-conventions.html#naming-rules) is to use "CamelHumps" not whitespace. For example, a package name might be `myPackageName`, a class `MyMultiWordClass`. Now, for *project names* you need to also account for revision control conventions and URLs, because usually eventually someone may want to version your project in a git repository, and host it in GitLab, yada yada yada. These tools will turn `My Project` into `my%20project` or `my+project`, but not consistently. Even a `MyProject` camel case will be turned into `myproject`. Ergo, it's usually best to *completely avoid multiple words* in project names. And I say this from having made similar mistakes in the past. It's just not worth it. :)
Insignificant compared to Kotlin on the JVM.
Use an executor service with a threadcachepool or coroutine, if you want to stay low on memory and have concurrency.
Good point! I tested this and you're right, simply doing the for loop isn't causing everything to go in at once. Just shows my lack of Kotlin concurrency knowledge. I've implemented the u/ickySticky solution and it's much fast now! The source of my memory issues must be something else. Is there a way to inspect what is taking up all my server's memory?
The \*public facing name\* should have spaces if it has multiple words, the \*internal\* name should not have spaces. For example if you have a project that displays cats the forward facing name can be "My Cat Display" and the internal project name would be "MyCatDisplay" and the app id would be "com.yourname.my\_cat\_display". If Android Studio removes the spaces from the names for you, that works too. It was possible though that It's not like that so generally I wouldn't rely on it.
 /** * must be called within a coroutine, for example you can use GlobalScope.launch { val feeds = fetchFeeds() .. } */ private suspend fun fetchFeeds() = subscriptionRepo.findAll() .savedSubscriptions .map { async(Dispatchers.IO) { checkForUpdates(it) }} // parallelization here, IO context is optimized for tasks like this .map { it.await() } // waiting for results
Other types of software can be developed using Kotlin which don't rely on the JVM as one commenter has mentioned. Both Kotlin JS and Kotlin Native have tools that have a JVM dependency, however the software that is produced **doesn't** rely on the JVM. There is a reasonable likelihood in the future that some of the tools which Kotlin JS and Kotlin Native rely on will be replaced with ones that don't have the JVM dependency.
Some of these tools (especially the CLI) **might** be replaced with ones that are written in Kotlin via Kotlin Native. That would be a pleasant surprise. For one it would make it easier to make improvements to the tools (greater control).
How can I limit the amount of threads used? Using something like CoroutuneContext where that is created with maxThreadPool seems to work.
You can use Dispatchers.default (thread per core) Otherwise you can specify the number of threads using Executors : Executors.newFixedThreadPool(threadsNumber).asCoroutineDispatcher()
That works great! Thanks. Another poster has mentioned that I need to be cautious about exceptions getting thrown because this could stall the thread. How is that handled?
I just tried to upload a project from IntelliJ to GitHub and it doesn't accept a name with spaces. So you have to change the name of the repo first (but the project name itself doesn't have to change). I am still unsure about the project name itself tho, because to me it seems like something that should have the public facing name. no?
Assuming its linux and you are at the command line, use 'top' and then press ctrl-m.
For the convenience of others too lazy to click through the link to see if they're interested, I quote from the introduction: Kotlin Multiplatform provides a mechanism for sharing code among platforms. The key difference from many other cross-platform tools is that it doesn’t compile all code to platform specific code. Instead, we are given full control over what will be shared and what will be native. ... This allows us to reap the benefits of writing cross-platform solutions without any of the limitations that usually come with it, like their inflexibility when it comes to writing platform-specific code. (Mods, any chance of setting up a bot to follow any link-only posts, search for the word intro, and post the subsequent two paragraphs?)
I don't think that would be legal considering the what was written in the 'intro' belongs to the writer.
Thanks guys. Yes, this is convenient. Let me write one.
In a nutshell, it’s a Multiplatform iOS and Android app, with multiple common modules.
Copyright law varies by country, but there are still remnants of the idea of "fair use" in the u.s. code, I believe. One would have to check the recent EU law, and any sort of international agreements, and probably have a professional background in international law, to be really confident about the legality of my quote above, or a bot that did the same. But, most of us hope that we can get by with a bit of common sense, and a willingness to take things down if challenged by the owner. It is difficult to determine legal fair use algorithmically. However, I _suspect_ (not being a lawyer, I am free to speculate here ... Please be aware that's what I'm doing) that the bot should be fine as long as it (a) only copies stuff that is freely readable by anyone on the web, (b) only copies a small amount, say less than 10%, of the original article, and (c) auto-removes any posting to which someone replies "bad bot".
Seems like I missed that link when I was looking for solutions but sadly it doesn't fix the problem for me, as I still get the same error. Thanks though
I am trying to run it outside a project though, as a "shell" script which requires a Maven dependency. I have access to the various libraries located under `/usr/share/kotlin/lib` for my use case which includes kotlin-reflect.jar, kotlin-main-kts.jar, kotlin-scripting-common.jar, kotlin-scripting-impl.jar and kotlin-scripting-jvm.jar, however, I can't seem to find kotlin-scripting-jvm-host-embeddable. Trying to run it with the above jars on the classpath still results in the same error. Thank you for your input though
Could you put that in a quote block instead of a code block? Trying to scroll sideways through a single thin line of text is annoying on mobile.
That was a fantastic explanation. Thank you
Done, thanks for the suggestion.
Thanks. Do these things normally get communicated among mods for different reddits, or what I need to specifically ask to have it shared out with the mods of r/Haskell, , r/compilers etc.?
Thanks. Do these things normally get communicated among mods for different reddits, or what I need to specifically ask to have it shared out with the mods of r/Haskell, , r/compilers etc.?
I have not read Elegant Objects and would regard reading it as a waste of my time. Yegor is a notorious crank and "best practices" contradict OOP purism for good reason. The best outcome of buying the book is losing a year or two to purist OOP ideology and producing a bunch of slow, unmaintainable spaghetti code.
endtest spam, user is affiliated look at post history, also uses multiple accounts to push this crap.
His desire to return to a time when rich business objects ruled the earth makes me ragey. But other than that I like his ideas.
I think the introduction of the \`typeOf\` function is a huge win for multiplatform!
Use the CoroutineExceptionHandler GlobalScope.launch(CoroutineExceptionHandler { _, exception -&gt; /* handle the exception */ }){ val feed = ... }
Oh I get it, so its like a lazy property. Shiiiiiii
Have you tried to just write a typesafe dsl builder instead of a classic java builder?? You can support writing sth like Panel(witdh, heigth) { // components can only bei added here box{ // box config can only be done here width = 10 shadow = ShadowType.Full } } Take a look at kotlins typesafe html dsl to get a better impression. Using kotlins language features is much nicer for builder style constructs, although nesting and multiple builders could solve the scoping problem for classic java builders as well.
Are you trying to remove the parts of the kotlin jar you are not using? I haven't done anything with it in a while, but I am pretty sure proguard will work on pretty much any JVM code, and with android going more towards Kotlin I would assume it supports that. Would look to add a pro-guard minification step to your release.
That sounds cool, but many people including me don't appreciate seeing medium articles.
What do you want to see? Or, how would you pass this information?
TLDR bot is all over reddit and it doesn't seem to have any issues. It does slim down paragraphs by hand hand picking important sentences via some algorithm, but those slimmed down parts are still word for word copies of what was written in the article. Pretty sure the only teo restrictions that I could think of would be no pay sites and you have to provide a link to the full article... therefore you source it and all should be good.
Yea, I use the builder dsl elsewhere but this doesn't help with the original problem, it actually makes it worse! With a dsl I can't control the return types so I can't enforce the consistency constraint that no `decorators { +myDecorator }` is written after a `box { }`
You have to name your script `test.main.kts`, then it will work.
That makes sense. I think Android Studio handles project names differently. It automatically removes whitespaces from the directory name, while IntelliJ keeps them.
Oh I already said that..
Proguard is the manual way of doing it, there's no automated tree-shaking tooling.
The Maven shade plugin should work as well. Even though it only operates on class level.
I'll take a look!
Java support is a whole different story, because you probably then couldn't use kotlin builders at all. Also, I'm afraid you need to very carefully model your sequences of objects in order to implement your constraints. I would try not to say sth like "the constraint is that no decorator comes after a box", but to ask: Where is a decorator allowed? And where is a box allowed. For example on the top level, you could allow a list of top level elements, say boxes. And within a box, you could allow a decorator. If you want to model something like "first a head element, than an arbitrary list of thingXYZ, then a tail element that is not thingXYZ, then I still think the typesafe html dsl is a good example how to do it, but you have to put effort in the interfaces and probably use method chaining with generic return types instead of the regular dsl constructs. Is your project open source? :)
Another entry into this arena is Micronaut, which is similar to Spring or ktor, but really intended for serverless applications. It’s DI approach is compile-time, but it’s got bridging for working with the Spring ecosystem. IMO, if you need Spring Boot, I’d stick with Spring or evaluate Micronaut - if you’re starting from scratch. If you’re using ktor, I’d probably stick with Koin - go with what you know.
It does indeed. Thanks a lot!
You should also post this on /r/androiddev
According to u/JakeWharton, it will be considered stable as of 1.3.40: https://twitter.com/JakeWharton/status/1116451542834524168
Yea, that's a problem. If you check my example code on the top level I allow any "branch" apart from the title/box type thing and depending on what you call I return a builder of a different type so the API is nice, but the code is horrible. :D Yes, the project is open source, you can take a look [here](https://github.com/Hexworks/zircon). You can also join the discussion on [our Discord server](https://discordapp.com/invite/PE3qFmF) if you are interested.
That's helpful, thanks!
An API based entirely around side effects on global state does seem a retrograde step. Thanks for calling this out.
Here's my favorite: [https://developer.android.com/docs](https://developer.android.com/docs) &amp;#x200B; Here's what I usually end up using: [https://www.google.com/](https://www.google.com/)
If I was a beginner I wouldn't understand a word from what was said.
his is useless. It's a collection of copy paste high level knowledge that will not help any beginner. The writer also does not understand the language at all. The dissadvantages presented are a joke. 1. Namespace declaration: if you create multiple functions outside of a class with the same name, it's your mistake, you would not create multiple static functions with the same name in java would you ? 2. No static. There is static, everything outside of a class or in the companion object of a class or in an object is the equivalent of static. The difference is that you can call it from anywhere, not only other static methods. It's like complaining your new tesla has other buttons than your old reliant robin. Learners and new programmers, stop looking at 'tutorials' like this and read the docs, there is little knowledge to be gained outside of the docs at the beginning.
I think it's too early to call. I think they have the basic building blocks there. Would've been interesting for the author to look into the @component implementation. I'm guessing they're hiding a lot of magic in their compiler.
If i find the time later, I'm going to take a look, it's easier to just code a bit instead of imagining what it could look like :)
In my experience, Kotlin objects can be singletons when necessary, but when not they are just plain classes with static methods and properties.
So tested this quickly using IntelliJ and it's decompiler and bytecode viewer. Given this simple object: object Foo { fun bar() { println("foobar") } } The bytecode you get will create a `public final class Foo` with an empty private constructor and an `public final static Foo INSTANCE` variable on the class. So in theory you could instantiate an object using reflection if you wanted. In Java you could use an enum to ensure singleton behaviour as mentioned in Effective Java, as according to the [Java specification](https://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9) it is an error to instantiate an enum. You can see the differences comparing the bytecode from above to this similar Java implementation: public enum Foo { INSTANCE; public void bar() { System.out.println("foobar"); } } I have not found a written reason why the Kotlin bytecode doesn't look similar to an enum but I assume there's a good reason for this. I wouldn't worry about it too much however since you probably don't want to be storing any important state inside an object anyway.
It's sort of silly how much I've been looking forward to this simple enhancement. 🤓
Yea I agree. Thanks for the help!
Exciting!
Freaking finally.
[https://www.raywenderlich.com/2885892-server-side-kotlin-with-ktor](https://www.raywenderlich.com/2885892-server-side-kotlin-with-ktor)
[https://www.raywenderlich.com/2885892-server-side-kotlin-with-ktor](https://www.raywenderlich.com/2885892-server-side-kotlin-with-ktor)
So instead of the Java core libraries, it uses some equivalent for that particular platform?
&gt; there is little knowledge to be gained outside of the docs at the beginning &amp;#x200B; most of the time
I've witnessed a number of people learning from tutorials and what not at the beginning. It was quite detrimental in the long run. They ended up with not having a concrete concept of the fundamentals, but still trying to do 'amazing' tricks that they have seen in tutorials (especially in those with the quality of the one presented here). I've seen people using forEach to get the first element in a list, because the tutorials they saw, didn't tell them that there is a .first(), .firstOrDefault() and stuff like this. Read the docs people.
I don't know much about web, could this evolve into a framework to write crossplaform hybrid apps? Something like jQuery mobile for Kotlin instead of JavaScript?
https://github.com/googlesamples/android-sunflower/
Anyone else see this stacktrace? ``` java.lang.RuntimeException com.codeforces.module.core.dao.cache.CacheControlInterceptor.handleCache(CacheControlInterceptor.java:279) com.codeforces.module.core.dao.cache.CacheControlInterceptor.invoke(CacheControlInterceptor.java:120) com.codeforces.PreprocessFilter.handleBlockedPages(PreprocessFilter.java:330) com.codeforces.PreprocessFilter.doFilter(PreprocessFilter.java:154) com.codeforces.filter.PostprocessFilter.doFilter(PostprocessFilter.java:40) com.codeforces.csrf.CsrfPreventionFilter.internalDoFilter(CsrfPreventionFilter.java:324) com.codeforces.csrf.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:275) com.codeforces.NginxFilter.doFilter(NginxFilter.java:36) ```
I'm getting an error page, but no stack trace: &gt; Ooops! Something has broken down in Codeforces. Do not panic, you can try to reload the page or return Home. Anyway we will carefully read megabytes of logs, analyze stacktraces and fix the problem.
RemindMe! 1Day
I will be messaging you on [**2019-05-23 23:37:32 UTC**](http://www.wolframalpha.com/input/?i=2019-05-23 23:37:32 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/Kotlin/comments/brrps7/kotlin_heroes_programming_contest_by_jetbrains/eogxtx6/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/Kotlin/comments/brrps7/kotlin_heroes_programming_contest_by_jetbrains/eogxtx6/]%0A%0ARemindMe! 1 Day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Yes. In fact I'm working on Apache Cordova integration right now and I'm making some progress. See [https://github.com/rjaros/kvision/issues/46](https://github.com/rjaros/kvision/issues/46) for more info in the nearest future.
It is probably better to generate the code than to write it by hand, but it is even better to not have to write it at all - share between platforms, reuse the same code on both the frontend and the backend. It's absolutely possible with Kotlin.
Aw come on JetBrains why'd you have to schedule it for the day after a 3 day weekend?
Uhhh, that's way too much code for me to take a glimpse look xD +1 for having standard project layout and a clean build, I was able to use it within half a minute. Guess the only option you have is to use even more generics and nesting with even more scoped builders. Dunno if that makes anything better.
If your **whole** application is reactive written using coroutines, I'd recommend looking at [https://github.com/jasync-sql/jasync-sql](https://github.com/jasync-sql/jasync-sql) This one is with more of like using prepared statements and manually mapping to entities.
Indeed the Kotlin standard library is written in Kotlin and is compiled to javascript/jvm bytecode in the same way as your code would. This is supported by the expect/actual feature. If a function is declared as expect in the common code then you have to provide also provide a platform specific version somewhere. Then you can use the platform specific implementations in a transparent way. In this way the Kotlin standard library can point most of the functionality to the already existing libraries to minmize the size of the library. For example, there is a LinkedHashMap implementation in the JavaScript part of the Kotlin standard library but there is none in the Java part.
That's just the first part of the contest
You're right to be concerned I think, since the issue about inline classes not working with parcelize has not received an update for 6 months.
Thank you for the clarification!
Yeah, this sounds interesting but I don't think I would want to participate at 9 something on the Tuesday after Memorial Day.
OP is a spam(mer/bot).
I would assume one reason that they didn't use an enum is that an `object` can extend a class or interface, while an `enum` can only implement interfaces.
Good point! I didn't remember that. To be honest I just assumed that the enum approach is a bit too niche when a private constructor works well enough and has benefits like inheritance. If a user uses reflection to instantiate their own copy they're taking fate into their own hands at that point and violating the contract that the class provides so any weird behaviour is on them.
Actually quite a great article. Would love to see one in a similar style for Tornado FX
No. Though I'd be interested in what @ptyxs thought of the book.
TornadoFX uses JavaFX, and at least I haven't found a universal native theme for it. There is a Metro theme called [JMetro](https://www.pixelduke.com/java-javafx-theme-jmetro/) and a Mac theme [AquaFX](http://aquafx-project.com/documentation.html), so if you can find a suitable theme for Linux (one that mimics e.g. GTK) I guess you could check the OS and use the corresponding theme in your application. I think most JavaFX applications use only one theme though.
Yea what winia said. You'd most likely have to implement a bunch of themes for each OS to mimick native GUI.
You can call static methods from instance methods in Java.
edited original comment
You again ? Your post received negative comments, deleted it, and you use another account with the same name to post the same copy/paste article you are promoting ? previous deleted post: [https://www.reddit.com/r/Kotlin/comments/brkwch/kotlin\_tutorial\_for\_beginners/](https://www.reddit.com/r/Kotlin/comments/brkwch/kotlin_tutorial_for_beginners/)
I've never been entirely happy with this sort of issue, especially when dealing with a `var` whose value might change over time. Try storing the response in a `val` and then checking the instance type, e.g., ```kotlin val response = error.asDynamic().response if (response is AxiosResponse&lt;?&gt;) { val responseStr = response as AxiosResponse&lt;String&gt; ... } ``` You might still have to do the `@Suppress` thing despite all that.
Check out operators like [mapNotNull](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-not-null.html) or [filterNotNull](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-not-null.html), which let you do some of the not-null filtering alongside other things you're already doing. Alternately, here's a helper function that I've been using in a recent project. ```kotlin /** * Like [Iterable.associateBy], but if the [keySelector] returns null, that key is ignored * and we move onward. */ fun &lt;T, K : Any&gt; Iterable&lt;T&gt;?.associateNotNullBy(keySelector: (T) -&gt; K?): Map&lt;K, T&gt; = if (this == null) emptyMap() else flatMap { val tmp = keySelector(it) if (tmp == null) emptyList() else listOf(tmp to it) }.toMap() ``` You could build a variant on this that has a `valueSelector` lambda in addition to the `keySelector`, which similarly skips any `null` results.
I do code reviews on a daily basis, and chances are that I'd reject this code without looking at it for longer than 30 seconds, because that's sort of my rough guideline for trying to understand what goes is doing. For this code, I can't understand what it's doing in 30 seconds, but lucky you; I couldn't do that in the original code either! ;-) To start with, I have no idea what this code is doing. If I look at the method fun getFiles(...): Map&lt;String, String&gt;, then this doesn't tell me anything. If there's a method `getFiles`, it better return files, and not a Map&lt;String, String&gt;, cause I have no idea what that means. Then, you're using Pairs and Triples. if I look at a lambda function like: `it.second.length == 1`, how do you expect me to know what this code is about? Would you know? The answer is: no, you wouldn't, cause you need the generic Pair class, and figure out what you put in the second argument, which is an element. Why not just create a new class, called: class ElementPair(originalElement, subElement), or something like that. The same for 'Third'. I'm not sure why you want to filter out only elements of length 1, it's not really clear from the lambda, the method, or anything. At this moment, I'd probably stop reviewing and ask you to refactor, and then we can have another look. PS: To be fair: I think you're on the right way with this refactoring. The steps in the functional way seem much more understandable and readable, nice work on that!
Pairs and Triples save creating classes to hold intermediates, but you loose the meaning of the fields. If you destructure in your lambdas rather than using `it` you can restore the meaning. For example ```kotlin strings .map { it to it.length } .groupBy { (string, length) -&gt; length } ```
`val foo = error.asDynamic().response` `if (foo is AxiosResponse&lt;String&gt;) {` `@Suppress("UNCHECKED_CAST")` `val response = foo as AxiosResponse&lt;String&gt;` `}` Gives me the error: Cannot check for external interface: AxiosResponse&lt;\*&gt; &amp;#x200B; foo is AxiosResponse&lt;\*&gt; is no better.
That's should be `AxiosResponse&lt;*&gt;` right?
It would be good if you used `prodRevViewElements.asSequence()` because you are using multiple filter/map/etc steps. Using `asSequence()` will avoid creating intermediary lists/maps between every step.
Is it possible to dynamically switch themes?
Yeah, sorry, I get Java and Kotlin mixed up sometimes.
Update: here's a version that actually compiles and runs without warnings/errors: ```kotlin data class Foo&lt;T&gt;(val a: T, val b: T) fun mystery(): Any = Foo("Hello", "World") @Suppress("UNCHECKED_CAST") fun useMystery() { val x = mystery() if(x is Foo&lt;*&gt;) { val y = x as Foo&lt;String&gt; System.out.println("${y.a}, ${y.b}") } } ```
I agree with this PR review. Advice from me: For triples and tuples specifically, I encourage people to use destructuring to help show the user what’s going on. ```someHashMap.map{ key, value -&gt; coolFn(key, value.toOtherThing()) }``` (Excuse me if this doesn’t compile, I’m on mobile at the moment) Also, as a general rule I try to separate “structure” and “behavior” from each other as much as I can. Kent Beck wrote a cool article recently that I recommend: https://medium.com/@kentbeck_7670/bs-changes-e574bc396aaa
Dear mods, /u/chocolategirl , /u/yole , /u/abreslav , /u/Multimoon Endtest is spamming up tech subs, including yours, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus) (same person I imagine) with focused self promotion spam that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion.) Banning the above users is a start, but given that if you ban this user he will just create another account I recommend the following options: Use Automoderator on your sub, and use the following rules: #This will automatically remove posts to endtest domain: - endtest.io action: remove action_reason: "Banned domain" --- #Cover comments too body (includes): ["endtest.io"] action: remove action_reason: "Banned Domain" --- # this will remove posts to endtests youtube account domain: - youtube.com - youtu.be media_author: ["Endtest"] action: remove action_reason: "Banned youtube account" Users like this also link to blogs like medium/dev.to that promote their site, more could be done to combat this. This is also not the only spam on tech subs. If you need help irradiating this please contact me, thank you.
What's this to do with Kotlin?
Destructuring declarations only work for... declarations, unfortunately!
Oops! I totally missed the "declaration" thing!
Just because you *can* write that as a long chain of functional methods doesn't mean you *should*. You will enhance the comprehensibility of your code by breaking up the method chain into a few val assignments, where the vals have meaningful names that help readers understand what the code is intended to do.
Every map followed by filter can be optimized by writing a flatMap where the filtered out case is empty. That'll cut your operators in half and will prevent several tupling/untupling cases. I'd also using destructuring in lambda parameters instead of `it.first`, `it.second` to give them names.
Dear mods, /u/chocolategirl , /u/yole , /u/abreslav /u/Multimoon Endtest is spamming up tech subs, including yours, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus) (same person I imagine) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion.) Banning the above users is a start, but given that if you ban this user he will just create another account I recommend the following options: Use Automoderator on your sub, and use the following rules: #This will automatically remove posts to endtest domain: - endtest.io action: remove action_reason: "Banned domain" --- #Cover comments too body (includes): ["endtest.io"] action: remove action_reason: "Banned Domain" --- # this will remove posts to endtests youtube account domain: - youtube.com - youtu.be media_author: ["Endtest"] action: remove action_reason: "Banned youtube account" Users like this also link to blogs like medium/dev.to that promote their site, more could be done to combat this. This is also not the only spam on tech subs. If you need help irradiating this please contact me, thank you.
Yes. Just check which operating system you're in when you start your app and then apply a theme accordingly.
So in Java 9 the JDK moved to a modular system. The JavaFx packages for 11 are not going to work with JVM 8 and prior. That's basically what the error says. Class version 54 (Java 11) compiled files won't work with Java 8. Only class versions up to 52 (java 8) will work. That being said, what problems are you having using JDK 11? I use it all the time on my development VM with XUbuntu and the latest IntelliJ IDEA. With Kotlin you have to target java 8, but 11 is backward compatible. There are some additional modules that sometimes need to be installed that aren't included in the base JDK package due to the modular distribution strategy. But those can be resolved by installing the appropriate packages usually.
Thanks for your answer. Ok, so its POSSIBLE to use TornadoFX with OpenJDK 11/openjfx 11. I could´ve mess sth. up while setting up the project, so I´ll take another look at it and try to get it runnin.
Why don't you use xpath?
Yeah, post if you have any specific issues you can't resolve, but it should work fine with 11.
At runtime the cast can fail without exception. It can not be checked. The crash will happen later and it will be mor difficult to backtrack, that's why there is a warning and that's why it's better to check the actual type before using it. Like this for example: https://pl.kotl.in/3Mzn8Bsiy ``` fun main() { useMystery() } data class Foo&lt;T&gt;(val a: T, val b: T) fun mystery(): Any = Foo("Hello", "World") fun useMystery() { val x = mystery() if(x is Foo&lt;*&gt;) { val checkedA = x.a as String val checkedB = x.b as String System.out.println("$checkedA, $checkedB") } } ```
That's awesome, I searched a lot for something like this in the last days as I found Kvision.
To add onto what others have already told you: JavaFX components can be completely styled with CSS. You can apply a CSS stylesheet to your complete app. And just in case it's not been made clear yet, TornadoFX windows are just JavaFX windows.
u/Deepak-Kumar-Singh you disappoint me.
Anyone know what's new?
https://stackoverflow.com/questions/4378455/what-is-the-complexity-of-regular-expression/4378549 What applies to Java usually applies to Kotlin too, including regexes.
I've already checked out that stack exchange post and it hasn't been helpful. The article mentioned in one of the comments there is the reason why I'm on this quest, previously I had assumed that it's natural that every _resonable_ language would use the best implementation of regex. To figure out what Kotlin was doing I tried checking out it's source but jumping right into the source code of a more or less unknown language/code base didn't help much either. Also, people who say that the time complexity of regex is dependent on the exact regex are misguided. Regex by nature are equivalent to DFAs and DFA have a fixed length description and you could simply parameterize that length into the time complexity and then the time complexity would be independent of the exact regex and only depend on the algorithm to find matches.
Well you probably know more than I do at this point. I half read the article linked by the stack overflow answer and I had that question too: why wouldn't every language use the best implementation of regex?
The size of the regex isn't what matters here, it's what the regex is doing that matters.
For time complexity No. For execution time(absolute time taken to execute a program) yes but I've not asked about execution time. People who think that speed of a program and time complexity are the same thing then they are misguided. Also if you're talking about me using length of a regular expression then let me define it formally: The length of a regular expression R is to be defined as the number of states in the smallest DFA that accepts the same language as R.
u/AlyoshaV
I don't mean to detract from your library in any way, but the Gson maintainers (which includes me) have jumped ship from Gson to [Moshi](https://github.com/square/moshi/). Would be great to see effort on third-party libraries moved in that direction as well.
Exactly! Why use a bad algorithm when there is a clearly better one? (That article does give some reasons why but those are mostly pertaining to optional features)
Oh, I didn't think of it TBH. Quering this specific file type (it's a PLMXML format) is something I've done some years ago and just repeated here what I've done back then. I'll look into xpath.
TornadoFx is only compatible with java 8 for some stupid reason. I don't use it anymore because of that. The developer has no idea how to write stable/compatible code and accesses internal api a lot.
Yes, I personally switched to Moshi for some years now, But I'm working on a project which depends on Gson and It's not easy to switch to other libraries like Moshi, So I decided to write this little extension for that to reduce our boilerplate on Retrofit request/response DTOs.
He has a Java10+ branch that is working quite well for me. I use it with JDK 12.
Does this help? https://stackoverflow.com/questions/40896475/time-complexity-of-regular-expression-in-java It seems that as long as a regex is already compiled the average time complexity is O(n). So as long as you use String.toRegex() to compile the regex first the time complexity should stay the same as Kotlin will just give you a compiled Java Pattern object if you're using Kotlin/JVM
\&gt; function is distinct from a method definition True, but I'm guessing most developers wouldn't be able to articulate that difference. &amp;#x200B; \&gt; loses nothing well, you lose instantly recognizing that you're overriding a function. In kotlin I can also override values &amp;#x200B; \`\`\` override fun name (fname: String, surname: String): String = { ... } override val name (fname: String, surname: String) =&gt; String = { ... } \`\`\`
Okay, I had so much trouble with this. But it turned out that in my case I had to download open java fx and then include it in the modules section of the intellij project structure. Hope this helps. I didn't give many specifics I'll give you some if you need it.
Thanks! That helps.
`fun` is there for consistency. In Kotlin all declareable things have a keyword to indicate you're declaring it. `val` and `var` are the obvious ones, but also `class` and similar.
It makes function expressions clearer. For example: `fun plus(a: Int, b:Int) = a + b`
Yeah, it should be `meth`.
Ty, I decided to switch/use JavaFX for now with Kotlin ;)
`meth` is `fun`
&gt; With a recent version (1.2+) of the Kotlin plugin you also can directly do Menu &gt; Tools &gt; Kotlin -&gt; Decompile Kotlin to Java https://stackoverflow.com/questions/34957430/how-to-convert-a-kotlin-source-file-to-a-java-source-file That should be a good starting point at least.
I have done that and I have mentioned it in my post aswell. &amp;#x200B; \&gt; I have also tried decompyling the kotlin into java, but it becomes a mess with tons of errors, so that didn't really take me anywhere.
I'm not going to take the time for a line-by-line transformation, but I can highlight the differences. * `val dimension = 3` is roughly the same as `final int dimension = 3`. Kotlin has type inference, much like Java 10+. `val` is a final variable, `var` is non-final. * `val random = Random(0)` is a constructor call. `new` isn't necessary in Kotlin. * `override fun onCreate(savedInstanceState: Bundle?)` turns into `override void onCreate(Bundle savedInstanceState)`. All types are non-null by default in Kotlin. The `?` means that the type is nullable. You can just strip all `?`s from types when translating back to Java. And Kotlin type signatures are backwards. Instead of `Type name` in Java, you do `name: Type` in Kotlin. * `open class MainActivity : FragmentActivity()` is roughly the same as `class MainActivity extends FragmentActivity`. Kotlin classes are `final` by default, unless marked as `abstract` or `open`. * On the other hand, `class MyGridAdapter(gridLayout: GridLayout, dimension: Int) : GridAdapter(gridLayout, dimension)` is more complicated. It's more like this: class MyGridAdapter extends GridAdapter { MyGridAdapter(GridLayout gridLayout, int dimension) { super(gridLayout, dimension); } } `init` blocks are run as part of the constructor. So it's actually more like this: class MyGridAdapter extends GridAdapter { MyGridAdapter(GridLayout gridLayout, int dimension) { super(gridLayout, dimension); gridLayout.rowCount = dimension; gridLayout.columnCount = dimension; } } OK, now for some of the harder pieces: * - generateSequence { Color.rgb(random.nextInt(255), random.nextInt(255), random.nextInt(255)) }.take(dimension * dimension).toList() That produces a list that's `dimension * dimension` items long. Each item is a random RGB color. You could translate that as a simple loop that adds items to an ArrayList. * - private val views = Array(sizeY) { y -&gt; Array(sizeX) { x -&gt; ... } } OK, this is producing a jagged array. The outer array has size `sizeY` and each inner array has size `sizeX`. So that's like saying: View[][] views = new View[sizeY][]; for (int y = 0; y &lt; sizeY; ++y) { views[y] = new View[sizeX]; for (int x = 0; x &lt; sizeX; ++x) { views[y][x] = ...; } } * Finally, when they do this: GridLayout.LayoutParams(...).apply { width = 0 height = 0 } They're saying "create a new `GridLayout.LayoutParams`. Then, refer to it as `this` for the duration of the `apply` block". So that's why, within the apply block, it can assign directly to `width` and `height` - that's the same as `this.width` and `this.height`. Also, those assignments call the appropriate Java setter methods, so it's really calling `this.setWidth(0)` and `this.setHeight(0)`.
What exactly do you need help with? Like, what part of the code don't you understand?
I've made a few small corrections and you definitely shouldn't just use this unchanged, but this is an almost direct translation: https://gist.github.com/BjoernPetersen/944c2e9fa0bee70308c6418ca518f13c Again: Use this gist to understand the concept, don't just copy/paste it.
Ye, I wouldn't just copy it. I need to understand it. Once I understand it I can edit it to fit my app.
Thank you for your time. I'll look at it now.
So, what is happening in GridAdapter constructor? &amp;#x200B; I don't know what the original creator was going for, but I was looking to make an adapter that would fill up my gridlayout for me with the determined amount of rows, columns and views. I don't know why there are this whole "lets generate an entire array of randomised rgb colors". I have no clue why the creator put that in. It just makes things way more confusing. &amp;#x200B; The code is still a bit confusing, but I think I understand everything apart from what is happening in the GridAdapter constructor.
Kotlin overtook Java for Android development earlier this year. If you're going into Android development then you're going to be at a disadvantage compared to the majority if you don't learn Kotlin. Personally, I use Kotlin for backend development at work and it has had a huge impact on me. Take a week to learn Kotlin by doing the Kotlin Koans via the EduTools IntelliJ plugin and read the `Kotlin in Action` book. That's all it takes, a single week. Once you know Kotlin, your productivity will improve and defect rates will decrease so you'll more than make up that week of learning in a short amount of time.
Yes, but there is a time and place for everything. Right now I want to finish my project. Maybe after that I will consider learning kotlin. Thank you for the guide though.
&gt; override val name (fname: String, surname: String) -&gt; String = { ... } Wait, can you actually do something like this? I mean the parameters on a val
Whoops, you're right. The parameter names wouldn't be present. They're still pretty close though.
He doesn’t have time to go into that. He just needs to get his project done.
i think using the companion invoke would be more intuitive than the factory, as it uses the same syntax as creating a class instance. &amp;#x200B; the factory methods looks more ugly IMO, as it is more typing, and you need to know its there. &amp;#x200B; another option would be a top-level factory function, like fun cardOf(value: Int): Card = ... &amp;#x200B; but that said, all of them are good choices, and it really comes down to your preference here. as for my oppinion, i think ether top-level functions or companion invoke
Kotlin and Dune references. I like it.
How about \`operator fun get\` and calling \`Card\[13\]\`? It would be more explicit about what happens.
&gt; “real developers don’t use debuggers” attitude... WTF? That's like saying "real carpenters don't use nail guns"
Using `data class` with `private constructor` can have some unintended side effects. It actually warns by default in Android Studio. Namely, "two cards with the same value are necessarily the same object" is _not_ true. ``` data class Card private constructor(val value: Int) { companion object { private val CARDS = List(54) { Card(it) } fun get(value: Int) = CARDS[value] } } fun main() { val card = Card.get(0) val cardCopy = card.copy(value = 0) println(card == cardCopy) // Prints true println(card === cardCopy) // Prints false } ```
With kotlin multiplatform you can generate C libraries. Which I have managed to use with a qt project
The problem is that I can't use "is AxiosResponse&lt;\*&gt;" because it is an external interface. I can't seem to find a way to avoid this warning. "Unchecked cast to external interface".
Java is the mind killer
I didn't think about that thanks!
These are callbacks passed as parameters. You should create myFunction like: myFunction(cb: (variable1: String, variable2: String) -&gt; Unit){ //and here call cb with 2 Strings: val str1 = "123" val str2 = "456" &amp;#x200B; }
These are called higher order functions (Functions that return a function or take a function as a parameter). In Kotlin, to be written like that, the function needs to be the last parameter. You also need to utilize extension functions to make your own forEach. fun &lt;T&gt; List&lt;T&gt;.myForEach(func: (T) -&gt; Unit) { ... } can be used like: myList.myForEach { elem -&gt; ...}
The Syntax you are using is a shorthand in Kotlin for creating a lambda and then passing it as an argument to a function. \`\`\` list.forEach { it. something() } //notice, that you can leave out the "()" if no other argument is required \`\`\` This is shorthand for \`\`\` list.forEach({it.something()}) \`\`\` In order to write your own function, that takes in an lambda, you will have to specify the argument as a function type: \`\`\` fun myFunction(callback: (String, String) -&gt; ()) {... // here you can just use callback, as if it were a normal function like this: callback("a","b") } \`\`\` A good way to learn these details, is to look at the actual implementations of these functions in Kotlin. If you are using inteliJ just ctrl-click on a function to see it's definition
When the last parameter of a function accepts a function, you can pass it as a lambda. https://kotlinlang.org/docs/reference/lambdas.html#passing-a-lambda-to-the-last-parameter Also if you're ever curious about how something works, look at the deceleration. /** * Performs the given [action] on each element. */ @kotlin.internal.HidesMembers public inline fun &lt;T&gt; Iterable&lt;T&gt;.forEach(action: (T) -&gt; Unit): Unit { for (element in this) action(element) }
Say you wanted to have a function that does something 5 times. This is how you would do it: // do5Times is a function that accepts another function, that we call theThingToDo here. () -&gt; Unit mean "A function that accepts no parameters and does not return anything" fun do5Times(theThingToDo : () -&gt; Unit) { for(i in 1..5){ // We just call it 5 times with a simple for loop theThingToDo() } } And now to use this function we just call it, and put inside a function that we want to have happen 5 times. fun main(){ val sayHello = { println("Hello!") } // "Hello!" will be printed 5 times do5Times(sayHello) } If you want, you can *inline* the `sayHello` function into a *lambda*, and call `do5Times` without using a local variable. fun main(){ // "Hello!" will be printed 5 times do5Times({println("hello")}) } This syntax is somewhat hard to read because an abundance of brackets, so Kotlin allows you to push the inlined lambda function outside of the brackets: fun main(){ // "Hello!" will be printed 5 times do5Times() {println("hello")} } Now say you wanted to not only do something 5 times, but also print the current iteration we are in every time. For this, we will need the `thingToDo` to accept the current iteration, `i`: // (Int) -&gt; Unit mean "A function that accepts an integer parameter and does not return anything" fun do5Times(theThingToDo : (Int) -&gt; Unit) { for(i in 1..5){ // We just call it 5 times with a simple for loop, and give it the current iteration theThingToDo(i) } } And now we change `sayHello` to use the current iteration: fun main(){ val sayHello = { i : Int-&gt; println("Hello from iteration $i!") } //Prints: //Hello from iteration 1! //Hello from iteration 2! //Hello from iteration 3! //Hello from iteration 4! //Hello from iteration 5! do5Times(sayHello) } Again, we can inline the local function into a lambda fun main(){ // Prints "Hello from iteration 1", "Hello from iteration 2" and so on do5Times({ i : Int -&gt; println("Hello from iteration $i!")}) } Kotlin is smart enough to know that `i` is an int, so we don't need to tell it that: fun main(){ // Prints "Hello from iteration 1", "Hello from iteration 2" and so on do5Times({i -&gt; println("Hello from iteration $i!")}) } We can once again push the lambda out of the brackets: fun main(){ // Prints "Hello from iteration 1", "Hello from iteration 2" and so on do5Times() {i -&gt;println("Hello from iteration $i!")} } We can even remove the brackets before the lambda altogether, as they are unneccessary. fun main(){ // Prints "Hello from iteration 1", "Hello from iteration 2" and so on do5Times {i -&gt;println("Hello from iteration $i!")} } Finally, if there is only one parameter to the lambda, we can just call it 'it'. fun main(){ // Prints "Hello from iteration 1", "Hello from iteration 2" and so on do5Times {println("Hello from iteration $it!")} }
thank you for this thorough explanation. It's clear for me now and I already wrote a couple of high order functions
thank you for the help, thats what I was lookin for
Boom. Super nice. Going to take a look at it, my main concern was performance :)
`LiveData` is just an enhanced observable object, it needs `Lifecycle` to implement the functionality of scope. And the scope is a concept lived in kotlinx, which is fundamental and not just for Android apps.
Can you point out the meaning all 3 T's? I know they are generics (I barely use generics, maybe because type erasure) . I think the second T means that it works with every list no matter whats inside, the thirth T says that the function uses the same typ like the list? And what means the first T?
gc not using multithreading wouldn't fulfill the requirement that it does it's job as fast and efficient as possible, wouldn't it?
The first T just tells Kotlin compiler that this function is using generics, one generic type in particular, T. Your interpretation of the other two is correct. The third T says that the passed in function takes a parameter of type T.
by now every single android developer is a professional coffee maker technician
For those just joining the party: *What is Koin?* A pragmatic lightweight dependency injection framework for Kotlin developers. Written in pure Kotlin using functional resolution only: no proxy, no code generation, no reflection!
MSISDN to those of us in the biz. :-)
&gt; MSISDN is that the same?
The acronym implies mobile, but for the most part it's a phone number that identifies the subscriber. It also implies international format, which should be unique across the globe. So I would store the phone number in this format in my DB.
Very interesting, thanks for sharing, never heard of that acronym!
I posted in the native issue recently but haven't heard back ([https://github.com/mockk/mockk/issues/58](https://github.com/mockk/mockk/issues/58)). Probably should've referenced users so you'd have a better chance of seeing it. I don't really understand the internals of mockk but I've been poking around the compiler a lot. So far I've only done header changes, but I'm going to start digging into the IR soon. I'm definitely confused with what you wrote above, but at a more general discussion level, I'm interested in chatting about what would be required to have some mocking support in native.
Oh, sorry for missing your comment! &amp;#x200B; Seems pretty a lot is required. Basically, the mechanism to intercept any function, but not only. &amp;#x200B; From the mentioned issue list of thins: * **proxy for function interception (this will be replaced by dynamic dispatch)** * **instantiation empty object of an arbitrary class** * random * identity hash code * copying all fields of from one object to another (used in spies) &amp;#x200B; As well that or other way some level of reflection is needed as well.
This website blocked due to Trojan.
Does run speed matter? If not, I'd tackle it recursively. Loop over the string and try all possible replacements one at a time. If none of them match, feed the new strings into the function again.
[Here's my solution](https://gist.github.com/dellisd/877212891d6286a688b453e424301b32) (I can add some detailed comments later if you'd like). Basically it runs along both input strings and checks *where* a `--` *might* be collapsed into a `+`, and then checks *if* that can actually happen.
It seems like it is enough to simply do linear scan through both strings in a single loop comparing characters s[i] and p[j], no? In case we see that characters does not match, we should either be able to convert s[i] and s[i+1] into + or return "NO". i and j are advanced in each iteration. So the solution is linear. Correct me if i am wrong!
Nice one! Very concise. Edit: mine is kind of ugly: [https://gitlab.com/snippets/1861437](https://gitlab.com/snippets/1861437)
hi thx, my solution looks like really similar to yours. But is this really this best solution? My first attempt was to replace all + with -- and have a look if they are the same but the algorithm failed in some tests if : \+-- \--+
I can't think of any way to improve it any further off the top of my head. Like you mention straight replacing doesn't work because you may end up with too many `--`. The solution I had *only* does checks in places where it detects that a `--` has been replaced with a `+` by comparing for a `+` in `t` and any `-` in `s`. Then it checks if it was a `--`. It can handle a few edge cases, for example both of these are YES: a|b ---|--- `----`|`----` `-+-`|`++` and this is NO: `+` `--`
I saw there were no physical computing libraries for Kotlin so I started working on Kuantify some time ago. It’s still in very early stages but I’m interested in hearing some feedback and wanted to get this out there for anyone who might have a use for it. Basic info is in the readme.
I would like to say Kotlin is 100 times better than go... Go is not as concise as it describes, but is a crude\~
Im also a CTO, switching my org to kotlin at every level, we build SaaS apps, and kotlin with spring is also our goto. We use mongo as our datastore, and we are working on auto-generating graphQL interfaces directly from the storage schemas. Our basic stack is linux, kotlin, spring, mongo and elastic search.
No facebook, I do not want to see more of Zaven.
You came to the wrong neighborhood, m\*\*\*\*\*\*\*r. JK, you won't find many people agreeing with you here as everyone here (should) had tried Kotlin and once you go Kotlin you never go back.
Just put `Thread.currentThread()` into log message in every `launch` block. I'm sure all your `launch` are running in blocking context. If you do that in right way your time will be around 1-2 ms, because currently you not awaiting launched coroutines.
So you were dead on about that one--they're all running in the same thread! In this case what would be the proper way to make sure it isn't in a blocking context?
Well actually that's not even correct--I need the threads to execute in a blocking context, but I don't want all 1000 requests to execute in the same thread. I need the calls to actually complete which is the main problem I'm trying to solve right now. If I run that thread in just pure coroutine scope, sure it spins up the coroutines but they never execute anything because the main thread dies and stops the coroutines from executing, or at least that's what I was seeing in my own testing.
save all the jobs launched by `launch` and `join` then in the main thread.
You can make an outstanding move - `(0..999).map { async { URL().readText() } }.awaitAll()`. In future this way will allow you to use result of every query or map list of urls into list of responses.
This seems amazing, thank you for the outstanding move!
There's no such thing as a "blocking context". Do you perhaps mean a single-threaded context?
The call `coroutineScope { launch { ... } }` completes only when all the coroutines launched inside it complete. So in your original example you didn't just measure the time to fire off the requests, but the time for all of them to fully complete. In your final example, `runBlocking` blocks until all the coroutines launched from it complete. This has no bearing on the fact that, in your previous examples, you measure not the time for `runBlocking` to complete, but for a piece of code within it. `runBlocking` keeps running until all the HTTP requests have completed.
This makes much more sense—so in my final example I am effectively only measuring the launch time of all the coroutines, right?
I guess you don't mean the final example but this one: val startTime = System.currentTimeMillis() repeat(1_000) { // launch a lot of coroutines launch { URL("http://localhost:8080/users").readText() } } val endTime = System.currentTimeMillis() Yes, all you measure here is the time to launch them.
I would suggest you to use nanoseconds instead of milliseconds as general to measure time nanoseconds are preferred and more accurate. like here youcan fine example https://stackoverflow.com/a/44099597
You say you've measured the time it takes to launch the coroutines and you've also ensured externally that the program makes those 1000 requests. However, the measurement you make isn't of the time it takes to issue 1000 requests, and the external app isn't checking the actual timing. Judging from your code, all the `readText()` invocations will happen on the same thread, sequentially. If you want multithreaded concurrency for the blocking HTTP call, use `launch(Dispatchers.IO)` instead. This launches the coroutines in a flexible thread pool that will probably create all those 1000 threads to issue your requests.
Thanks for the link--I had heard this before on the /r/programming subreddit but I never really looked into it myself.
Got it--thanks for the clarification, sorry for my poor communication about which example I was referring to.
You are absolutely brilliant and have helped my understanding tremendously! Ok, so yep, I've measured the launch time of the coroutines, and I've verified they're happening, but they're not all happening within 20 ms. Is the syntax for `launch(`[`Dispatchers.IO`](https://Dispatchers.IO)`)` literally just the same as `launch{}` but like `launch(`[`Dispatchers.IO`](https://Dispatchers.IO)`){}` ?
&gt;Is the syntax for `launch( Dispatchers.IO )` literally just the same as `launch{}` but like `launch( Dispatchers.IO ){}` ? Yes, that's it.
Alright I gave this a whirl and went back to example 2 and end up with this: fun main() = runBlocking { println("start") val startTime = System.currentTimeMillis() coroutineScope { repeat(1_000) { // launch a lot of coroutines launch(Dispatchers.IO) { URL("https://www.google.com").readText() } } } val endTime = System.currentTimeMillis() println("stop") println("Time: ${endTime - startTime}ms") } Execution time is measuring at about a second, and if I throw in a `println(Thread.getCurrentThread())` it shows it executing in a massive IO thread pool. Had no idea about this dispatchers concept--are these exclusive to Kotlin's implementation of concurrency? If so they seem SUPER useful!
The mechanism of dispatching to a thread is nothing new, but I think the specific first-class way of choosing the dispatcher for a coroutine may be an innovation of Kotlin, although it was to a good part forced upon it by the way threads work in Java.
Understand. Thanks so very much for the help and guidance--I really appreciate it!
Aw, just don't know how to properly call it. Single-threaded will be more accurate.
The Kotlin standard library abstractions you are using here are backed by `ExecutorService` implementations on the JVM.
So you're actually not measuring the right thing the second time, either. In your first example, by using runBlocking everything is running on a single thread, and because you use a coroutine scope all the coroutines launched inside will complete before the app moves on from your scope. This causes a slower than single threaded behavior because you're doing the same thing but with the overhead of the event loop scheduling your jobs. In your second example, you remove the coroutine scope so what's actually happening is it's taking just as long as the first example but you're only measuring the amount of time it takes to LAUNCH the coroutines, not wait for them to complete. What you likely want to do is use a different **coroutine dispatcher** to launch your coroutines in the coroutine scope. Try running your first example again, but change the runBlocking call to `runBlocking(Dispatchers.Default) {`. This will cause all your launched coroutines to be dispatched onto the "default" thread pool, which should contain a number of threads equal to the number of processor cores on your machine. This should cause an improvement in performance because then multiple coroutines will run simultaneously. Please let me know if I can be of any more help! 😄
Vim users here. Intellj with ideavim is definitely much much better than vim itself. Searching for keywords, jump from files to files, creating bookmarks to go back and forth, go to definitions, etc.. it just works seamlessly, fast and no need for configurations. You would spend forerver configure your vim to do such things, and it is not even that fast (I used to use Unite.vim, Nerdtree, etc... all in once) as it is far slower and not ergonomic as Intellj. You can even define Vim keybinding for your Intellj action, such as: `vmap f :action FindInPath&lt;CR&gt;` This way, when you want to search a keyword in whole project, just `viw` then `f`.
I'm not an Ideavim fan. I use Intellij when dealing with Java and Kotlin, but use vim for everything else. I use nerdtree, and a few other plugins, and vim is way lighter and faster than intellij for me. It's also just about as ergonomic. I guess switching files can take me a few extra seconds sometimes, but I'm about as fast with each. The reason I don't like ideavim, is because I learned a bunch of intellij keyboard shortcuts, before learning vim, and I'd prefer to just use the default shortcuts. When I tried Ideavim, it enabled some of my new favorite vim shortcuts, but it didn't play nicely with the workflow I already had for Intellij.
This is exactly the case of mine, I use Intellij shortcut to move between files, go to recent edit locations, creating bookmarks, etc. And I use vim keybinding to edit. Perhaps the only exception is that I use \`gd\` to Go To Definitions.
This guy's day will be made when he discovers LiveData and and the `InstantTaskExecutorRule`. Or RxJava and its `test()` operator.
I'm banging my head against LiveData as we speak!
The idea with LiveData / MVVM is that you can just invoke a method on the view model directly in your click listener and then watch the LiveData emit the (hopefully correct) value. It's pretty nice to test compared to using Robolectric because all you need is JUnit. If you use the `InstantTaskExecutorRule` it's basically like using `Schedulers.trampoline` in an RxJava test, it makes sure that all the events are emitted synchronously. Let me know if there's any more specific issues, would be happy to help.
That’s very generous thanks. I’m making progress, will report back tomorrow.
Dear mods, OP (Endtest) is spamming up tech subs, including yours, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus) (same person I imagine) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) Banning the above users is a start, but given that if you ban this user he will just create another account I recommend the following options: Use Automoderator on your sub, and use the following rules: #This will automatically remove posts to endtest domain: - endtest.io action: spam action_reason: "Banned domain" --- #Cover comments too body (includes): ["endtest.io"] action: spam action_reason: "Banned Domain" --- # this will remove posts to endtests youtube account domain: - youtube.com - youtu.be media_author: ["Endtest"] action: spam action_reason: "Banned youtube account" Users like this also link to blogs like medium/dev.to that promote their site, more could be done to combat this. This is also not the only spam on tech subs. If you need help eradicating this please contact me, thank you.
The library is available in maven central. 🎉
I didn't find any earlier discussion, but as someone at a place currently invested in a lot of Spring, and evaluating asynchronous tomcat usage, this seems huge. Anyone have experience with Kotlin coroutines and Spring? I was leery of pushing the Flux based system myself on people not familiar with Kotlin, but this seems like a \_much\_ easier to consume sell.
I converted a REST-based data collector service I developed at work to fire off a new coroutine to process each data entry that came in - in essence, making an ad-hoc version of a reactive web service. The results were amazing: the amount of time it took to receive incoming entries and hand them off to processing dropped dramatically, and I could get tens of thousands of records transmitted to a low-end web server in a matter of seconds instead of minutes.
Would you pick Spring Webflux over Ktor at this point?
Have you tried putting the window in BorderPane.center instead of BorderPane.right?
In [Part 6](http://oneeyedmen.com/press-to-test-part-6.html) I discover LiveData and the InstantTaskExecutorRule! I'm not *sure* it made my day, but it did make the code a bit better ;-)
I've used Webflux because i'm familiar with Spring but i would like to give a chance to Ktor
We did at my workplace. We were evaluating various stacks. Spring MVC, Ktor, Elixir, Node+express. Ultimately we went with Spring webflux.
What was the main factor?
That string is already a valid regular expression that matches any of the months.
Ohhhhhhhhh ofcourse xD thanks :)
The months variable is already a regex matcher for the month abbreviations they are looking for. It's more of an example of using raw strings with templates/interpolation than regex.
To be honest, the main reason we went for Spring was the fact that there were already engineers on the team who were familiar with it. We had a relatively short timeframe to bring up the service, and didn't want to spend time coming to grips with a new framework. We did compromise though, and we're using Kotlin, functional Spring and Webflux
D'oh! That worked! Thank you!
So Dispatchers.Default isn't the default parameter? Maybe that's why I had decided to always explicitly write the Dispatcher I want to use. Much less bugs and headache.
When using launch() or async() they use the dispatcher of the current coroutine context. If you take a look at the documentation for runBlocking [here](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html) it says: The default CoroutineDispatcher for this builder is an internal implementation of event loop that processes continuations in this blocked thread until the completion of this coroutine. Hence, the thread you use runBlocking in is the one that processes all your coroutines. If you explicitly specify the default dispatcher it will use the common thread pool I mentioned earlier.
Interesting article, I wasn't aware that there was a serializer library by JetBrains themselves. I do wonder what this brings next to already existing libraries like jackson-module kotlin or Klaxon.
Multiplatform
The library also has the ability to create to custom transformations for serialization.
Does this support serialization of interfaces?
I've never tried interfaces, but they do have a custom polymorphic API that I've used for abstract classes.
That's the `kotlinc` for the native version (as `kotlinc -version` says), it creates native binary files, not JVM bytecode. You need [to download `kotlin-compiler-x.y.z.zip`](https://github.com/JetBrains/kotlin/releases/latest), which has a different `kotlinc` (they're actually bash/cmd scripts). But indeed, docs are incomplete as well as confusing.
What's the performance of this vs stuff like Jackson? Forgive me if it's in the article, can't open it atm
Does it handle well obfuscation through R8 or are there any additional rules to add? Does it handle enums or support custom parsing adapters?
I added a couple of version of QuickSort that uses the middle and random elements as pivot based on its descriptions I've seen online. As I was continuously learning, I challenged myself to come-up with my very own implementation (not a translation of existing ones). After several grueling hours, I was very happy to come-up with my own code for the 2 additional QuickSort versions. Achieved it with a few lines of code (\~45 lines). Feel free to check it out on the link. I was quite happy with the results and seeing the tests passed! &amp;#x200B; I haven't looked out yet in the Internet on how this is commonly implemented, and I am very curious if there's a much more efficient approach to it.
No you don't need to additional rules for R8. In order to parse enums you need to create custom transformation.
Care to elaborate why maintainers switched from Gson to Moshi?
Moshi is Gson v3 in everything but name. It's an opportunity to reset Gson's blown technical debt budget and bad design choices that can't be changed. There's more info here: https://www.reddit.com/r/androiddev/comments/684flw/_/dgx3gpm
This is only true if you manually reference every serializer which is rare. It's far more common to resolve the serializer on the companion with reflection (which the library will do for you) given a Class or Type.
Thanks for pointing out.
Why did you go for the platform dependant implementation for isUpperCase/isLowerCase?
Because JS platform doesn't have isUpperCase/isLowerCase methods: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html
Nice work! However, there's a typo in your README, at the split method.
For those wondering what the heck this is, here's a sample from the repo's README: ``` val ld = LangDetect() val englishText = "This piece of text is in English"; var result = ld.detect(englishText) assert(result.language == "English") assert(result.isReliable) assert(result.proportion == 1f) ```
Fixed! :)
The plus is also the string concatenation operator, so your addition probably doesn’t do what you think it does. Add parenthesis around the operation and it should work
`println("num01 + num02 equals (number01 + number02)")`
Better use String Interpolation
Parentheses! Using anything with `+` operators in string concatenation, you have to be caeful and use parentheses! ``` val a = 1 val b = 2 println("Added: " + a + b) // Prints "Added: 12" println("Added: " + (a + b)) // Prints: "Added: 3" ```
Off topic, what's an open var? I've never seen this before
basically I couldn't add then cuz it said unresolved refrence, so I made them open
Thank you kind people who helped me solve the problem. Have a nice day!
Just wondering, what is the use case for this? IDE plugins?
Also consider using string interpolation instead of concatenations. println("num01 + num02 equals ${number01 + number02}")
I'll never understand the people that keep clinging to the old and quite frankly awful `File` API. There's no actual point in using the `File` API if you're on anything beyond Java 7, as the `Path` API is just superior in almost every way. *(This is for new projects that aren't already tied deeply to the old `File` API)*
Yeah, it seems like a nice project but the fact it's *deliberately* made to use the `File` api over the `Path` one when it's already designed for java &gt;=7 rubs me the wrong way.
C++ vs. Kotlin? I wonder what kind of app this is and how you've narrowed your choice down to those two. If the JVM (the language is secondary) is OK (garbage collection, larger memory consumption, larger startup time) than go for the JVM. Why should you take the burden of writing correct C++ code when Kotlin manages the memory? Runtime performance is actually quite similar for most cases. Regarding the sustainability of Kotlin: I don't think it will go away. There are already lots of business critical apps written in Kotlin. I'm at a very large company and have written a business app with Spring + Kotlin and continue using Kotlin for every JVM suitable task. Other have started using Kotlin too. The new go-to stack seems to be Spring-Kotlin-Angular. Every motivated Java dev can write Kotlin within a couple of days. If not I'd say the Java dev doesn't want to.
Something about the way this article is written is off-putting to me. I think it's easier to just read the current KEEP: [https://github.com/Kotlin/KEEP/blob/da6a2744f343927d90682d0ecafd223bf3755e0a/proposals/compile-time-dependency-resolution.md](https://github.com/Kotlin/KEEP/blob/da6a2744f343927d90682d0ecafd223bf3755e0a/proposals/compile-time-dependency-resolution.md)
The choice to permanently block one of the fixed number of threads from \`Dispatchers.IO\` is questionable at best.
It looks like this would permanently use/block one of the fixed number of threads backing \`Dispatchers.IO\`.
Andrey Breslav said, that he wants Typeclasses in the language. &amp;#x200B; [https://www.youtube.com/watch?v=heqjfkS4z2I&amp;list=PLQ176FUIyIUbVvFMqDc2jhxS-t562uytr&amp;t=2545s](https://www.youtube.com/watch?v=heqjfkS4z2I&amp;list=PLQ176FUIyIUbVvFMqDc2jhxS-t562uytr&amp;t=2545s)
Hey, don't get my hopes up :)
Hi, thanks for the Feedback! Could you identify what is putting you off for me to improve? Is it the intro, the comics, the example we chose or the flow? Would be super cool to here more feedback! Thanks in advance :)
I have to reiterate the initial question that u/tp_12 made and ask specifically why your company has narrowed down the choice to Kotlin and C++. I've done a bit of work with both of the languages, and although I'd go with Kotlin more often than not due to how much of a pain it can be to write "correct" C++ code - to say nothing about trying to debug it - I'm not going to say that it's the right choice *every* time. If you need the most performant data computational code (e.g. in financial transactions or other extremely time-critical applications where every cycle can count), then C++ could be the way to go - provided you put in a \*lot\* of effort optimizing the code just right. However, if IO is your biggest bottleneck in performance, then it's not worth the productivity trade-off compared to Kotlin. It's a lot easier to write code in Kotlin, especially as it doesn't have anywhere near the seemingly-counterintuitive legacy behavior that C++ is constrained with - the "catch ellipsis" pattern effectively means you can never truly analyze all throwables, plus which compiler you use can actually make it a [bad practice](https://stackoverflow.com/a/2183971). On top of this, the ecosystem for Kotlin is a lot easier to work with, especially for installing dependencies, and you also have Java libraries at your disposal as well.
Cool video, thanks for linking
This compile time DI proposal is the most exciting feature since coroutines - I have so much code it would clean up and I would be able to drop java solutions (e.g. guice) for a true solution that requires nothing the language designers didn’t intend. Here’s hoping.
Im really looking forward to this feature. while I appreciate the effort that has gone into the article, i also agree that, the intro, style and length seems a bit much. But hey, this can be quite subjective.
I would actually invest in kotlin and rust. Kotlin is great for frontend while rust is great for back end and low level work just like c++ but with memory safety and better concurrency. However, there is also kotlin native for faster performance that can compile to wasm, android, and ios all with a multiplatform native project, if you write your gradle buildscript right.
Disclaimer: I have used and continue to use Kotlin for backend development at my previous company as well as at my current employer. If you're deciding between C++ and Kotlin then I recommend swapping C++ with Rust because Rust is miles better than C++. So the decision should be between Rust and Kotlin. If you have strict requirements about performance (eg. High frequency trading / game engines) or startup times (eg. Serverless lambda design) or memory consumption (eg. embedded IOT devices) then I would consider Rust. For pretty much everything else (including scalable services) I would definitely choose Kotlin. Kotlin can leverage the huge Java ecosystem / libraries since it has great interop with Java and productivity will be much higher with Kotlin. As for C++, it's a complete non-starter in this decade. Java is a large improvement over C++ (outside of the domains listed above) and Kotlin is a large improvement over Java. There is a similar reduction in code size and defect rates going from Java to Kotlin as there is going from C++ to Java.
Do I understand correctly that you want import X To import everything contained in package X and all subpackages? If so: that's a horrible idea. I don't want to autoimport every extension function in a library. That's one of the many things Kotlin got right over C#: using an extension requires an explicit import, which makes it trivial to avoid conflicts between extensions and makes it explicit where the extension comes from - even e.g. In a diff on Github where you can't "jump to definition".
I was also very excited about this aspect, but do you really think that the current proposal is sufficient to be a di solution? I ask, because with di frameworks, you don't only have Singletons that should get injected - type classes, or compile time extensions as proposed can only deliver singletons, if I did get it right. In order to use it as di mechanism in more more complex, but still very simple situations, one would need sth like scala's implicits. The key difference here would be that you can define implicitly passed arguments in every scope, not just on the top level. Am I wrong?
You basically want to import all files from the modules.
Disclaimer: while I do want typeclasses in the language, I can't promise to adopt the design proposed in KEEP-87
Thank you for your help. Our application does have a lot of computation work (e.g. branching state-machines and heavy constraint solving) and while latency is important, I would not say we require the same performance as high-frequency trading apps. Our list of languages has started much larger, most of them fail either due to performance issues or lack of ecosystem support. The final candidates were C++, Java and Kotlin. Java fell since if we go in this direction then Kotlin seems like a much better option. The reasons why we consider c++ are: 1) All of our senior staff have primarily worked with C++ during their career. 2) In our area, there are much more candidates with C++ experience to recruit, It will be harder to find experienced Kotlin engineers and most of them are likely to be mobile application developers. 3) C++ is a more mature technology (Which also has its drawbacks), we feel more confident that its ecosystem will remain big in the next 10-15 years.
Thank you for your help. Our application does have a lot of computation work (e.g. branching state-machines and heavy constraint solving) and while latency is important, I would not say we require the same performance as high-frequency trading apps. Our list of languages has started much larger, most of them fail either due to performance issues or lack of ecosystem support. The final candidates were C++, Java and Kotlin. Java fell since if we go in this direction then Kotlin seems like a much better option. The reasons why we consider c++ are: 1) All of our senior staff have primarily worked with C++ during their career. 2) In our area, there are much more candidates with C++ experience to recruit, It will be harder to find experienced Kotlin engineers and most of them are likely to be mobile application developers. 3) C++ is a more mature technology (Which also has its drawbacks), we feel more confident that its ecosystem will remain big in the next 10-15 years.
Dagger 2 provides compile-time dependency injection; if you’re still using Guice you should check it out.
I would recommend include Scala/Java developers in a Kotlin's candidate pool also Python/Java experienced people. In general, candidates should have some functional programming background for efficient use of Kotlin. &amp;#x200B; And if your stuff is C++ devs, what type of C standard they are experienced with? Do you use C++11? Lambdas? auto? If yes, then Kotlin will be home for your team :) &amp;#x200B; And if you are using coroutines in C++, on Kotlin it is much simpler: c++: [https://github.com/CppCon/CppCon2016/blob/master/Presentations/Introduction%20to%20C%2B%2B%20Coroutines/Introduction%20to%20C%2B%2B%20Coroutines%20-%20James%20McNellis%20-%20CppCon%202016.pdf](https://github.com/CppCon/CppCon2016/blob/master/Presentations/Introduction%20to%20C%2B%2B%20Coroutines/Introduction%20to%20C%2B%2B%20Coroutines%20-%20James%20McNellis%20-%20CppCon%202016.pdf) Kotlin: [https://proandroiddev.com/async-operations-with-kotlin-coroutines-part-1-c51cc581ad33](https://proandroiddev.com/async-operations-with-kotlin-coroutines-part-1-c51cc581ad33) &amp;#x200B; For point 3): Java ecosystem is also mature and remain big in 10-15 years, in worst case you can leave Kotlin's code compiled in .class files and next code write in Java (as they are compatible with each other). For me Kotlin is Java++ :-)
That is great @abreslav. We are happy to iterate and adjust the proposal to whatever makes sense for Kotlin. We are not particularly attached to the encoding proposed but more in need of the feature itself. Please ping us if you want to further discuss the proposal. We have currently bandwidth to adjust it and evolve in whatever direction makes sense for Kotlin.
For clarification, Type class instances that are extensions over \`fun\` or \`class\` produce new instances or can be used to control other constructions strategies beside singleton
Thanks for the article @fablue I think it's great and a cool addition to what is in the proposal
Issue is I need to inject dependencies into kotlinscript files. The contents of kotlinscript files are compiled into the class initialiser of the class that each script is ultimately compiled to. This means that the vars you mark as @Inject are inside the constructor in Java terms, which means dagger can’t find them because they’re not properties of the class that kotlinscript compiles to.
Thanks! I think I did get this point, but I can't see how this would help in case you want to implement di in your project. Do you have time to give a more complex example here? :)
Personally I prefer the explanation given in terms of Typeclasses rather than dependency injection. I can see that they come down to the same thing, but Typeclasses seems the more fundamental concept.
Scala implicits are scoped and this isn't and that's where the complexity of implicits come from IMO for the most part. It's true that Keep 87 won't allow you to Inject something like \`String\` as a DI value, but you can always do: ``` //user service interface Repository { fun save(): Unit } //injection type class interface Inject&lt;A&gt; { fun value(): A } //injection proof for repository extension RepositoryInjector: Inject&lt;Reposititory&gt; { fun value(): Repository = Repository.userInstance() } //repository summoning fun doStuffWithRepository(with repository: Inject&lt;Repository&gt;) { repository.value.save() } ```
This is C#'s proposal for reference: https://github.com/dotnet/csharplang/issues/164
Thanks a lot! I am really glad you like it :)
Nothing to do with this sub, but the answer should be obvious.
thx for the insight
It looks like you are trying to build with Android support libraries for API level X with a target level of Y. You can't do that, the versions must match. Join us at /r/androiddev.
awesome I'll head over
If you're completely new to programming, I suggest you start with Python. If you have any prior experience, however, Kotlin is a great choice.
It's fine for beginners.
I don't have any prior experience. Can you tell me a bit more about why Python is better for a person like me? Thank you, I will go look more into Python right now.
The user above suggested starting with Python. Do you agree that would be beneficial? Thank you for the response.
I started with Python a few years ago: currently I mainly use Kotlin and Java but I don't regret my initial choice. Kotlin has many features that you won't be able to appreciate until you have more experience. Python is less difficult to learn for beginners, and is a useful and versatile language to know.
Thank you for the details!
It's fine for beginners.
I would also recommend Python as a first step simply because of the community behind it. There are any number of tutorials freely available. Python also has many great libraries to use (for everything from games to machine learning). Once you are confident with Python, make sure you understand the concepts of programming that would apply to just about any language, such as variables, scope, loops, functions etc. Then have a look at https://engineering.khanacademy.org/posts/kotlin-for-python-developers.htm Which is a nice resource shared by Khan academy that helps python programmers ease into kotlin.
No, I want to import everything from a "Module" that has been defined, and in that definition is what interfaces, classes, type aliases, and extensions to "export". &amp;#x200B; It's sort of a simplification of something like Xkt.kt file that deliberately decides what to export, but where the actual implementations could be hidden as internal, and you could vary the implementation as long as you don't change the exported API.
Running on the JVM adds a lot of overhead to learning. As someone said below I'd choose a language with a fast REPL you can test things with. I'd say also something with minimal syntax like OCaml or Racket, and work up to C-style languages from there. Python being the obvious first choice.
Thank you for the information and resource. I have noticed just from the small time spent searching, there are plenty of Python resources out there. Thanks again.
I'd recommend starting with C but I don't know your goals
Python tends to be a good starter language because its syntax is very similar to English and doesn't require as much from you when it comes to dealing with typing. It's also got tons of tutorials catered to beginners as well as a lot of library's for any project you might be interested in working on Kotlin on the other hand is a very good language but from what I've seen a lot of resources for learning it tend to assume you know either Java or are familar programing concepts. This means they tend to focus on teaching you how to work in Kotlin rather than teaching the base concepts. It's a great language, but maybe not the best to start with.
Hey, Ha1fByte, just a quick heads-up: **familar** is actually spelled **familiar**. You can remember it by **ends with -iar**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I had to look up those acronyms, lol. I'm adding the information you provided to my learning list. Thank you. A fast REPL does sound like a good way to see the results of my efforts.
Just something to learn as a hobby. I have no career goals associated with coding, but would really enjoy building a few apps to simplify some aspects in my current career. Thank you.
Python is the good start
Thank you. All the details and support here are great.
I certainly would say that a person should have Java and JVM experience before learning Kotlin.
Nah. Only if you want to use it with Java libraries. It's a perfectly fine standalone language. But I did know Java and another dozen or more languages first, so I can't be that objective.
Both are good to know, but I agree with the "python first" sentiment, if your goal is to "learn how to code".
This is the Swift language definition of Modules and exporting &amp;#x200B; [https://github.com/apple/swift/blob/master/docs/Modules.rst](https://github.com/apple/swift/blob/master/docs/Modules.rst) &amp;#x200B; This is the Swift language definition for imports &amp;#x200B; [https://github.com/apple/swift/blob/master/docs/Import.rst](https://github.com/apple/swift/blob/master/docs/Import.rst) &amp;#x200B; This is the TypeScript language definition for Modules &amp;#x200B; [https://www.typescriptlang.org/docs/handbook/modules.html](https://www.typescriptlang.org/docs/handbook/modules.html)
It depends on whether you want to learn how to code, or you want to learn to accomplish tasks with code. I was suggesting for the former, so if you're interested in automating email creation or making scripts to rename files and such Python is a perfect choice.
Thank you for clarifying. I will definitely be looking into all of the suggestions I receive.
Thank you.
It's fine for beginners.
I'm fairly sure came across your website before and that let me to learn about hexagonal architecture, for that alone I'm thankfull!
Exercism.io is also a good resource, but you should get a little time under your belt first. It's not really good for coming from nothing, like we all have done at one point; but learning a NEW language once you know another, or learning more about a language you already know some of, is pretty good.
Awesome, thank you for more details and another resource.
You don't need Java or JVM experience before learning Kotlin.
Not really, read the above specs from Swift and TypeScript
Since we're on a roll here ... =D Here's an old post I saved that might provide you with even more. Truly, there's an embarrassment of riches (and unfortunately, some shite), in the python tutorial arena. https://www.reddit.com/r/learnpython/comments/867kpq/best_python_courses/ NB: I haven't vetted any of these. /r/learnpython is a good community as well.
AI is really impressive these days 😉
Congratulations! I noticed you working on this a long time ago, and getting to 1.0 is a major achievement. I'm happy that Javalin has been an inspiration. Since I have pretty strong opinions on how a web framework should look I won't offer any feedback on the project itself, but I will give some general advice: * If you haven't done so already you should post to hackernews, and create a Twitter account. * Write tutorials for common use cases. In my experience people spend more time on tutorials than in docs. * Skip the comparison matrix. By looking at that I'd just abandon Hexagon and use Jooby instead. Focus on proving your worth through docs and tutorials. Show by example that your framework provides good solutions to common problems. * I found the website a bit hard to navigate with both a left menu and a right menu. It really shows that you've put a lot of effort into this though, good job!
I'm currently teaching someone. Kotlin seemed a bit difficult at first so taught the bare minimum (concepts) in Python then moved to Kotlin before they got too comfortable with the language.
Just to echo /u/TheGreatCabbage, Python is a great first language, and after you get the basics down, moving to Kotlin will mostly come down to learning the new syntax + IDE. I will say, however, learning a language is more fun when you get to build stuff that YOU enjoy while learning it. Python doesn't have a tremendous amount of abilities when it comes to Android development, so if that is what you want to pursue, I think you can consider just starting with Kotlin.
What a crappy bot. Just go away...
Thank you again. I found a lot of bookmarks. My bar now has a "Python" folder.
Sounds like my situation, thank you.
Thanks for your thoughts... I'm removing the 'alternatives' page because it's hard to keep updated :D I'll work a little bit more on the examples and the documentation. I have to admit that I like Javalin a lot. There are other good frameworks, but Javalin is really easy to use and fast to develop. I hope you keep doing good with your project :)
Thank you. Hopefully I can pick up some Kotlin while learning Python also. If I get too confused, I will go back to just one.
Thanks to you for taking the time to check the project :)
You know if you're giving advice to a beginner, I would avoid saying things like JVM and REPL - you're just going to put people off. I also wouldn't suggest functional languages to start, I wouldn't even suggest OOP. Imperative languages like python (and C although that has its own issues) are more beginner friendly and are more human intuitive.
Thank you! Javalin 3 is very close to being complete. It will have some exciting new functionality, like OpenAPI support, a new WebSocket implementation, and complete rework to configuration. I wish you well too. It takes a lot of effort, but it's also very rewarding! :)
I'm a TA for high school programming classes, and it seems to me that Python is an absolutely great beginner language. Helps you grasp the basics without giving you too much confusing stuff off the bat. No need for strong typing (kids take math and think the word variable, they think they can set it to whatever they want and strong typing kind of betrays that idea for most), you get much more immediate feedback (interpreted vs compiled), instance variable access while "in class" is a bit more straightforward ("static" variables are defined top-level in the class and you annotate static functions with `@staticmethod`, instance variables are defined in instance functions and is always called inside the functions using `self` so ambiguity is low name-wise), and there's no "weird" datatypes like `int` vs `Integer` despite them having the same usage in all cases, or `Array` vs `List` (really confusing for absolute beginners ive found). Kotlin is a really great step forward in to "big boy" languages (though Python is perfectly valid as a language, the "big boy" languages just provide a lot more security and guarantees than python). It's strongly typed yet you don't have to actually type it, it has amazing syntax improvements over Java, and it can use whatever Java has and more. Wonderful language with a LOT less boilerplate than Java. It may be better to learn a bit of Java and then go to Kotlin to see the difference, but I think Kotlin is a wonderful language to learn and know because of the syntactical features it provides that make it amazing for development time over Java. `data class`, getter and setter syntax, delegates, its all head over heals improvement over Java IMO.
Kotlin is an excellent first language
Thanks for reporting it. Could you maybe try again, I've requested to unblock it!
I wouldn't call that a hack
So what's the difference between that and public/internal in Kotlin/Gradle modules? Sounds the same to me. I see no benefit so far
Nice, been looking forward to this
Because kotlin is in large parts inspired by Java, and because documentation is still lacking in some areas, in my opinion it is good to have prior Java experience before learning kotlin.
Sweet!
The only intention with the proposal is to provide an initial scenario to discuss over 👍. We're definitely open for pivoting / iterating the Keep in any direction (and willing to) based on your feedback as soon as you folks can review the Keep @abreslav.
IDE plugins, code generation
Thanks for the example, I agree with you about generic implicit parameters. But, hm, I have some scenarios in my head where injected things depend on other things from the scope and I don't see them solved. But maybe for every scenario, there is a better design. Can't wait to get extensions :)
I'm strongly in favor of using functional types like Try, Either etc over exceptions, but this particular article was pretty confusing and doesn't seem to make a strong case for the benefits. It's not enough to simply say it's "more functional".
nice job!
Feel free to reach out if you think there are use cases not covered and we will look into it to see if it's feasible. Thanks!
The answer turned out to be @Suppress("UNCHECKED\_CAST\_TO\_EXTERNAL\_INTERFACE").
Uploading any JVM language should be nearly identical. It's just another Gradle/Maven step and has little to do with the building of the jar. Look for tutorials for uploading java projects with gradle publishing plugins (if you're using gradle). [Here's the official docs](https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven) for the maven-publish plugin for gradle. Should be the same steps for Kotlin. Personally, I use sonatype/maven central, but all of my projects are open source so it's free for me. It is a little bit of a longer process to register, though. But the steps should be similar just with a different repository URL, so you can take a look at some of my projects. I don't really like Maven because I like the more functional coding of gradle, so I don't have an example using that. [Here's one that uses Kotlin Gradle.](https://github.com/irotsoma/web-validation/blob/master/build.gradle.kts) [Here's one that uses Groovy Gradle.](https://github.com/irotsoma/cloudbackenc-common/blob/master/build.gradle) For the Kotlin one I used the publishing function from the maven-publish plugin, for the Groovy I used the uploadArchives task from the maven plugin because it's older and the maven-publish wasn't working for what I needed at the time. They are a little complicated, especially the groovy one which has subprojects, because they build javadoc jars, source jars, and package license files for all depenencies with the library jar. Just look at the task in question (publishing or uploadArchives) and ignore the rest. You then just need to make sure you apply the appropriate plugin. Let me know if you have any specific questions, and I'll be happy to help.
I'm already doing that :) you can check (and maybe even reuse) the build script here: [https://github.com/hexagonkt/hexagon/blob/master/gradle/bintray.gradle](https://github.com/hexagonkt/hexagon/blob/master/gradle/bintray.gradle) You also have to setup the bintray plugin. Look here for an example: [https://github.com/hexagonkt/hexagon/blob/master/build.gradle](https://github.com/hexagonkt/hexagon/blob/master/build.gradle) And finally use the script in your build file like here: [https://github.com/hexagonkt/hexagon/blob/master/hexagon\_core/build.gradle](https://github.com/hexagonkt/hexagon/blob/master/hexagon_core/build.gradle) &amp;#x200B; IMPORTANT: To publish in JCenter you must also publish sources JAR. You can check an example here: [https://github.com/hexagonkt/hexagon/blob/master/gradle/kotlin.gradle#L104](https://github.com/hexagonkt/hexagon/blob/master/gradle/kotlin.gradle#L104) &amp;#x200B; In this project, Bintray's credentials are stored encrypted in Travis CI and picked from environment variables in the build process (check \`.travis.yml\` for details). &amp;#x200B; I hope it helps :)
I like my programming languages expressive and my shells terse... But I do like the idea of mixing the two. This looks pretty fun. Some thoughts: Have you looked at kscript? They made some interesting and useful decisions for scripting. For example importing a number of default packages so you don't need to namespace things so much. Also providing ways to embed maven imports in a script for using external deps. Could be very cool if you had an env-var that defined maven libs for use in a shell or something! Thoughts on handling stderr/stdout similarly to \*sh? If you can't easily send stderr to /dev/null then things get painful very fast. And equally if you can't tie stderr to stdout (2&gt;&amp;1).
Hey this will not answer your question but I think it will help you if you move away from server side processing and use something like react if you'd like
But why not use a real debugger?
You can find a few examples of fullstack Kotlin apps with Spring Boot in here: [https://github.com/rjaros/kvision-examples](https://github.com/rjaros/kvision-examples). The examples are dedicated for KVision framework but the configuration of the project should be rather universal.
And... there's the best project name I'll see this year.
Fixed formatting: //user service interface Repository { fun save(): Unit } //injection type class interface Inject&lt;A&gt; { fun value(): A } //injection proof for repository extension RepositoryInjector: Inject&lt;Reposititory&gt; { fun value(): Repository = Repository.userInstance() } //repository summoning fun doStuffWithRepository(with repository: Inject&lt;Repository&gt;) { repository.value.save() }
I currently work for a client that serves about 1 million customers, and all teams use Kotlin + Spring Boot (and other Spring stuff) for their microservices. Everyone here loves it. If you use Kotlin, I think you will actually attract a lot of Java devs that are motivated to work with Kotlin in a business context, devs that want to move forward. Imo, these are the ones you want to recruit, along with those who have actual Kotlin experience of course. Java devs will easily learn Kotlin, and can still use the tools they're familiar with (JUnit, Spring stack, ..). Also, don't underestimate the amount of server-side Kotlin developers as opposed to mobile devs: [https://www.jetbrains.com/research/devecosystem-2018/kotlin/](https://www.jetbrains.com/research/devecosystem-2018/kotlin/) (check out the question about "What types of applications do you develop?" Cannot comment about C++ though, as I have no experience with it.
Because often it’s easier to see patterns in printed output?
That wouldn't help in this project. Actually, the way this application works is that it is a combination of background services with a very small web front-end used only for configuration. The services will be there no matter what, so I'd much rather keep the front as light as possible since I'm not planning to do very much with it. Mostly just field validation and some dynamic fields. But it would be nice to use Kotlin instead of pure JS with jquery like I'm doing now.
Will take a look and report back
Than I also repeat that writing explicitly which dispatcher you want to use can prevent lot's of headache and bugs. We leaned from concurrent programs that tracking state is bad, and now you need to track in which coroutine context you are because all your children will start in the same context instead of in dispatchers.default (it's literally called default, it should be the default parameter also).
I can accept that. But do you know that you can configure breakpoints in intellij to just print stuff without suspending the program?
It's looking like our first talk at the end of the month with be a "Kotlin for Java developers" as a warm up so might be perfect for you
Suits me. Any solid dates etc yet?
Yes, checked my set dates after saying "end of the month" and realised it's actually the start of next. I had to move it to fit in our first speaker. So July 2nd [https://opentechcalendar.co.uk/event/8624-edinburgh-kotlin-user-group-first-meeting](https://opentechcalendar.co.uk/event/8624-edinburgh-kotlin-user-group-first-meeting)
[https://opentechcalendar.co.uk/event/8624-edinburgh-kotlin-user-group-first-meeting](https://opentechcalendar.co.uk/event/8624-edinburgh-kotlin-user-group-first-meeting)
[https://opentechcalendar.co.uk/event/8624-edinburgh-kotlin-user-group-first-meeting](https://opentechcalendar.co.uk/event/8624-edinburgh-kotlin-user-group-first-meeting)
Off-topic, but is there a reason why Kotlin does not come with its own implementation of File/Path API? Or is it planned at all (thinking multiplatform) ?
Yeah, but theoretically you should never need to worry about it because you should be able to just explicitly call out the dispatcher once when you're going from a synchronous to an asynchronous context. If your code REQUIRES a specific change to the context you can just use `withContext()` in a suspending function for very little cost. Besides, `runBlocking` is one of the only coroutine launchers which will use a single thread to manage coroutines. Any of the functions on the `GlobalScope` Singleton will use the default dispatcher, and `newFixedThreadPoolContext()` will allow you to create a specific number of threads you can dispatch your coroutines onto.
Thanks to compiler plugins like "all-open" it also possible to use Kotlin comfortably with the enterprise standard Java EE on stable application servers like jboss wildfly or payara. This enables you to deploy and redeploy "thin .wars" in seconds. These servers have tools to manage resources like database connections, libraries, etc. in their configuration and can be simply accessed by your deployment through Java EE annotations in the code. Thus all your deployment scenarios can be handled outside of the application itself.
One that can be overridden in a subclass.
My library does this! https://github.com/snowe2010/pretty-print See the method [here.](https://github.com/snowe2010/pretty-print/blob/master/src/main/kotlin/com/tylerthrailkill/helpers/prettyprint/PrettyPrint.kt#L23-L39)
&gt; uses `equals()` instead of the `hashCode()` All collections use `equals()` to determine membership, though. Using `hashCode()` is optional. However, if `hashCode()` of two objects is different then the implementation is allowed to assume the objects are different without double-checking with `equals()`.
If `SomeClass` violates the contract for `.equals()` and `.hashCode()`, of _course_ the behavior is going to be strange.
Also take a look at the documentation for Object#hashCode and Object#equals: [https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()) &amp;#x200B; It states, that two objects being equal (using equals) **MUST** have the same hashCode. So in short: Your implementation is wrong and doesn't satisfy the contract of hashCode and equals.
That is true of course. Luckily we got data classes.
along with the others here, you can take a look at my [kotlin pretty-print](https://github.com/snowe2010/pretty-print) library, which is deployed on both [maven central](https://search.maven.org/artifact/com.tylerthrailkill.helpers/pretty-print/2.0.2/jar) and [jcenter](https://bintray.com/snowe/maven/Pretty-Print) You can see how I made it pretty simple using [nebula plugins](https://github.com/snowe2010/pretty-print/blob/master/build.gradle.kts#L11-L20) (have some duplicate plugins here, but otherwise it's pretty simple). Then it's just declaring your [bintray setup](https://github.com/snowe2010/pretty-print/blob/master/build.gradle.kts#L93-L131). Note that I sync to maven central which requires setting up a sonatype account, setting up a website that will be your group name, and getting your api key from the nexus repo.
Spring or Ktor would be a good start. Probably Ktor for your specific learning purposes as it is written in and designed for Kotlin. Spring is nice and has been around for a long time. It is written "for" java but can be used just fine with Kotlin. Id say the downside for your needs is you could do a basic web service with it and Kotlin but never REALLY do much that makes kotlin fun. Where writing a service with Ktor will jump you right into some of the interesting things that can be done with the language.
Hey, Thanks! I am still looking at Ktor but I have a feeling that it's a bit too big to start with. Still looking at "new project" window and reading about features. "Locations" one seems very cool:)
IntelliJ IDEA will help you quite a bit. You can generate a reasonable stub project here https://start.spring.io/ with by far the most popular tooling.
Yes, because I suggested it ;-)
I do. But I suppose I come from a generation where startup in debug was much slower, and it’s a lot of faff to set breakpoints compared to editing the current file.
I agree with /u/mikaelhg. IDEA is a really good way to start if you aren't already using it. Intellij have included a lot of things to ease the process of using Kotlin. There's a free community edition that you can get that has some limitations here and there. I have a free full version as an open-source developer, so if you have any OSS projects you contribute to regularly ask for a full Toolbox license that gives you all of the applications they have. The RubyMine isn't bad for ruby stuff, too. Though you can't use it professionally due to the OSS license. Additionally, Spring is quite easy to jump into, though it's a little bulky since it can do so many different things. But it's a good way to play around. Make a Kotlin Spring Boot application and you'll have a simple REST API set up in no time.
Look on Javalin.io, its framework for web backend.
You can look at [Jooby](https://jooby.org/). It's very easy to start with it.
ha! I didn't even realize it! thank you for the suggestion!
Why not just go right into Kotlin and then Android app dev? There are some good courses on the various online education platforms that are targeted to beginners in programming via Kotlin. It's unnecessary to learn Python first just to learn about programming. If you want to add Python to your skillset, then start with Python. Otherwise, don't bother.
I just started an android developer course with kotlin on udemy by Tim Buchalka (I think, fat guy high pitch voice). That's always a sale where it's $12, def wouldn't pay $200. It's highly rated and the java group recommends his java course.
It's just how the jvm typing systems works, at that point of the code car2 is a \`Buildable\` and not a \`Car\` so it can only use methods that are defined in \`Buildable\`. The jvm wont dynamically cast your object into the desired type, which is why if you want to use the \`Car\` methods you will need to cast it into a \`Car\` explicitly. fun main() { val car = Car() car.drive() car.speed() car.build() val car2: Buildable = Car() car2.build() println("----- Smart casting here") if (car2 is Car) { car2.drive() car2.speed() car2.build() } println("------ Normal casting here") val car2AsCar = car2 as Car car2AsCar.drive() car2AsCar.speed() car2AsCar.build() } You can cast it safely since you know its a \`Car\` instance but if not you will need to check/smartcast or use \`as?\` otherwise you will get some casting exception
So what `val car2: Buildable = Car()` is doing is basically saying, set car2 (which is a Buildable) to this Buildable. The Buildable you are setting it to happens to be a Car. Although the type of the variable car2 is known to be a Buildable, it's still a Car. In this context, there's not really a point of restricting car2 to being just a Buildable. There are many other cases where using Buildable instead of Car would be a good idea though.
I was primarily concerned since it's really close to java but since android development is really about Kotlin now I wanted to see if I could skip java. I'll try looking for courses targeted to beginners using Kotlin. However, I would like to add at least an intermediate knowledge of python to my skills, so I guess I will start with that anyways.
If you are a beginner, you shouldn't really worry about Java and the differences between Java and Kotlin. The big differences are mostly syntactical and help you stop writing so much repetitive code called "boilerplate". So, you can absolutely skip Java, and no Java knowledge is really inherently needed to start with Kotlin.
Vert.x
I need this in my life.
If you're doing client side routing, a simple [Javalin](https://javalin.io) server would look like this: // server setup val app = Javalin.create { it.addStaticFiles("/public") // serve static files from /public folder it.addSinglePageRoot("/", "/public/index.html") // respond with index.html if request would 404 }.start() // api endpoints app.get("/") { it.result("Hello, Get") } app.post("/") { it.result("Hello, Post") }
I also started with Python, and I've dabbled in Kotlin and Go, but never really branched out. I think I find it hard to transfer my skills from python to other languages (that's probably just me), so I think I would have started with something other than Python, if the resources are out there, which I think there are.
Just start straight away with Kotlin (or even a bit of Java as it's slightly easier). I don't know why everyone needs to start with weakly typed languages these days. I started with Java and learned JS + Python later on.
Kotlin is really existing. I have been learning it for the past 4weeks and i have a commercial app already. Few challenges here and there but they are crackable . But i don't think there's a relationship between python and kotlin.. As long as you are familiar with those programming principles you are good to go. I am coming from PHP and Javascript background and it did take me a week to follow tutorials before i decided to start a kotlin project. As any other programming language, most of these things you will master as you progress. Its all about consistency. "Repetition is the mother of skill"
If ktor seems like too much, don't consider spring. You'll take one look at it, start screaming a scream if stygian horror, head for the hills, and we'll never hear from you again. Nobody wants that :)
Focus on learning programming concepts such as object oriented design. You will find that between languages such as Kotlin, Java, python, etc follow the same principles but just have different syntax. Syntax you can learn in a couple of days but the principles stay with you.
Do you know of any courses in particular that are useful for new programmers?
That’s him. Really good teacher and course. Im halfway through his course, but on a pause currently since I start my Internship in android dev and been busy with work (in Kotlin)
So the `: Builder` just tells the compiler what you want the type of the variable to be. It applies to both classes and interfaces. So for example, you can put `val car: Car = Car()` instead to make the car variable have the type of Car. You don't actually need the `: Car` because the compiler can figure it out for you because `Car()` returns an object of type Car. This means that `val car: Car = Car()` and `val car = Car()` are equivalent. So for your example, the purpose of : Buildable` is to tell the compiler you only want to use Buildable methods on the variable `car2` (which I'm actually call `buildable`). This makes it easier to for you if you want to use a different class then Car for the variable. For example, let's say you made another class called Building, which implemented the Buildable interface. By putting `val buildable: Building = Car()` instead of `val buildable = Car()`, you can always change `val buildable: Building = Car()` to `val buildable: Building = Building()`. If you just have `val buildable = Car()` (which is the same as `val buildable: Car = Car()`), then you could still call Car and Driveable methods on the `buildable` variable. This would mean you couldn't set the `buildable` variable to be a Building, because the Building class doesn't have Car or Driveable methods. So it's not super important, and I can't think of many examples where it's necessary to use it, but it's a useful way to communicate to the compiler how you want to implement things, and makes the code more generic and clean.
Consider this example: ``` interface Parent { fun cookDinner() } interface Employee { fun makeMoney() } interface RockClimber { fun climb() } class Person : Parent, Employee, RockClimber { ... } ``` This person class can take on any of these interface roles. When you assign an object to an interface type, like `val e: Employee = Person()`, you restrict it to that methods of that interface. You would restrict objects to interface types based on the context of the problem. If, for example, the context is the person doing something at a job, you would only care about them having the ability to `makeMoney()`, so you would restrict an instance of them to the `Employee` type.
You could try the Udemy course I'm going through: [https://www.udemy.com/kotlin-course](https://www.udemy.com/kotlin-course). It teaches you programming using Kotlin, so you get the best of both worlds.
I bought his Java Masterclass course, which I plan to go through. I'm almost done a Kotlin specific course by Peter Sommerhoff and then I plan to do a Kotlin + Android Dev course but I think that one's by Morteza Kordi. I don't know if it's a regular thing, but it seems that most of these courses are on sale lately for around $12-14. (Well, $12-14 CAD since that's where I live.)
How did you find an internship in Android dev?
As someone mentioned above, if you already understand the concepts of modern programming, switching shouldn't be too difficult. Granted, I don't know Python, but I would imagine that if you just take a course in Kotlin or Go, you'll find it pretty easy. The resources are definitely out there, and while the ones I've seen (and purchased) are geared toward beginner programmers, you could always skip sections of a course that aren't relevant. Or do something like watch videos at 1.5x speed if all you really need to learn is the syntactical differences.
yeah, just I really don't have time at the moment, since I've got final exams at the moment. I'll be kicking up the gear for programming this summer.
So then is `val car2AsCar = car2 as Car` making `car2AsCar` to be a `Car` object of type `Car`? And is this possible because, even though `car2` of type `Buildable`, it's still a `Car` object?
This sub is technically for Kotlin related discussion, it's probably fine here but this post might be better suited for /androiddev
Possibly because it uses Kotlin/JS (since It's a web app) and [there have been some complaints of it being slow](https://discuss.kotlinlang.org/t/kotlin-js-performance/10643/5).
`car2` is still a `Car` and that's why you can cast it