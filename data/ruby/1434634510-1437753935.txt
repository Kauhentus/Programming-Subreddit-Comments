tom you are beyond cool. thank you!!! had trouble with this because i'm beginning to learn ruby and hadn't quite understood when things are in |'s and do is used on them. thanks again!
Can you try it again and post the output here? SQLite is a pain to use and doesnt scale well for a real app, I would recommend using PostgreSQL. Still if you post the output Ill try and help you through it.
I see you're running windows. Make sure the git binaries are in the PATH environment variable in system settings. 
yeah, that won't work in windows.
Sorry. I just did a search trying to find out more info on how others synchronized REST APIs, and did not come up with much. I can't believe that I was the first to design such a crazy idea. I'm likely searching for the wrong thing, or I really need to write a blog post outlining the idea. The concept is too complicated to explain in a comment.
Thanks alot...will do that and get back to you :)
First, the idea was automating some task when programming in Ruby. Example may include: creating a new ruby script. Here's a repo on github: http://github.com/kinsomicrote/rbgen
Why? Brew is just a package manager.
I like developing on a virtual machine. I have a custom vagrant box with Ruby, Postgres, etc installed so I can have a new VM where everything works within minutes. You can install Vagrant and Virtual Box, and use [this](https://atlas.hashicorp.com/mwiley/boxes/vagrant-rails).
I think it just depends. How does the company you're working for already deploy? I wouldn't look to complicate that process because they'll have to support it once you've left. Also, if you're based out of the Bay Area, I would be happy to get some coffee and chat about this or any other questions you might have. I'm always looking to meet more devs.
Ohhh thank you so much for this!
Yeah, I took a look at the guide, and it does look like they have you use postgres for the production app and sqlite for the test app. As a new programmer the benefit of sqlite is it's ease of use. It does just enough that you don't have to spend a lot of time understanding SQL and can just go to town with Ruby. In the real world of development, however, you'll almost never use sqlite (I don't think I ever have). So if you plan to get into development past a hobbiest level, you'll need to learn postgres/MySQL/mariadb/nosql regardless. That completely up to you, obviously, no wrong way to learn. If you run the commands to install sqlite3 on your server and either pm it to me or post it here, I'll try and help you get through it. I just need to know what's failing and specific error messages. I remember when I was deploying my first RoR app using sqlite it was a pain, but I did it, so I should be able to help at least a little. Edit: also I'll need to know if you're using Heroku or another VPS, and if so what Linux distribution you're using. 
Well said, moomaka. I've updated the post to address that point. Thanks to you, and everyone else here for bringing that up.
Where do you get your first quote from? It's paraphrasing, so you know you're fighting a straw man, right? You're right, it's ambiguous if the post think it's a bug or not. I definitely don't think so and I've updated the post. Thanks :) &gt; Another syntax that's often used is a variable _, as a place-holder Which I also mention in passing :) About your whole library design tirade - way to miss the point ;) I don't understand why you need to pass judgement on hypothetical libraries people aren't writing? Let them try it out and see if it hurts. Thanks for your comment! I appreciate it though we have different views.
Glad to see you like it! Our Skylight traces include timings for the middleware chains themselves, and time spent building the middleware chain (when the request comes in) and tidying up after the last middleware has been run is &lt;2ms. With such a small footprint I would imagine that Coach is on par or more efficient than ActionController, however 2ms won't make any real difference at all over a request.
No, it's not cheating. I have heard a dozen times the medical field uses the "See one, do one, teach one" method of training. So its the same here. If you've never seen a solution to a problem you cant really do one. Others would argue different. When you become and old and grumpy programmer, most of the "complex" solutions are the applications of dozens of solutions to smaller problems. There's an online book called [Learn Ruby The Hard Way](http://learnrubythehardway.org/), it states "DO NOT COPY AND PASTE" because you learn by typing and that's essentially what you are doing. Either way. Don't feel like you are cheating and I apologize for my ramblings.. I've had little sleep in the past 48 housr.
In this case, does a single `Routes::Users` middleware handle all http methods? Or would it be split up in separate classes?
&gt; ALL syntax guidelines are optional with rubocop!! Yup. What does that tell you? For that matter, Ruby interpreters also support tabs for indentation. If you think that should change, [send a pull request](https://github.com/ruby/ruby) and see for yourself how the Ruby community judges it! &gt; Read literally any ruby style guideline. Look at 99.9% of popular ruby projects. They all use/recommend 2-space, soft tabs. You've said tabs are "bad" and "ugly" but the only argument you've offered is that most people use spaces and some people say "use spaces and single-quoted strings". Is that it? 
no, it's perfectly fine. as long as you've attempted the problem first, so that you understand what the solution is doing. also, as /u/dacat notes, you want to be reading and typing it in, even if you do it verbatim, rather than copy/pasting.
So I ran the entire thing over again, and for some reason sqlite worked fine and I didn't run into the same bug again (though I have no idea what was different this time around). But I did run into a different problem - at the very last step, where you run "heroku open", it opened to a 404 page: "The page you were looking for doesn't exist." Any idea why? I noticed that at the first heroku command it didn't prompt me for username or password, but I assumed that was just because I'd already done that last time around. I'm very new to all of this (currently doing the odin project) so I don't have a strong understanding of all the technical stuff yet! Thank you for helping :)
This makes me think of [ring middlewares](https://github.com/ring-clojure/ring/wiki/Concepts#middleware). The provides/requires bit is a bit different though. Cool stuff!
I agree. Although there are some "features" in Rails' Action Controller that could lead to unexpected behavior / hard to maintain code, it's still a reasonable solution for pure request &amp; response handling. Just like what @moomaka said, to achieve both skinny model &amp; skinny model at the same time, things can be extracted into "service layer" (not a common term so I quote it) There are gems that allow you to create "service classes" like https://github.com/collectiveidea/interactor or https://github.com/apotonick/trailblazer. But you CAN just write your own "service classes" with NO dependency at all, just PORO. You can also see how an example of skinny controller in https://www.youtube.com/watch?v=qSxN4mlyQO8 This is a presentation by the author of trailblazer about its gem and more importantly, its concept/reason. I do not use that gem myself but I think it worth reading that concept it's introducing. You don't have to use it or other gem, but having those concept in mind of helpful when your app scales. I use the gem `cells` by the same author though. It's MUCH better than helper + partial templates. But that's about the view layer so you can check it out later. About the gem mentioned in this post, I think it's hard for me to link it to what I want to do when I am coding a controller. Or it's just me unwilling to to write rack style code. Again I am not saying the current "features" like `before_action` has no problem at all, but completely moving away from it requires some "attractive alternatives". (I guess it means easy to learn, API matching my thought of work,... I am not so sure :S) 
Ruby != Rails I say this in 50% of new /r/ruby posts. Do you think these comments change smth? No, and never would, because people are fucking stupid -- you just have to deal with this. https://en.wikipedia.org/wiki/Pareto_principle
How are you running your own Slack on Heroku?
That sounds great
It's just a way to for him to automate the invite process. The app just takes your email address so you can get an invite, then you run slack as normally. 
hahahaha so basically I hand over my email address to be sold to recruiters instead of using IRC? No thanks.
For the Accept/Content-Type checks, yes we do need custom handling. And we did have that setup in a Rails controller, but inheriting that behaviour was equivalent to hiding it. The syntax... uses Middleware::CheckAcceptHeader, type: :json ...is far clearer for us than relying on a parent class, and an overridden method to define the `:json` key. Again, auth is not quite as easy as you may expect due to supporting multiple API versions. The middleware we have in place now will resolve the version and run the correct AAA checks, and those routes that use it now have this... uses Middleware::Authentication Again with the json schema, we use the path of the request to pick out the validation from our schema files. We wanted to just say "validate this action against our schema!" but placing that in a `before_action` in an inherited controller meant it was unclear in the controller that this was active, and led to explicitly skipping that check for routes where it wasn't applicable. It wasn't a nice solution. It's worthwhile to say that for your standard Rails app, one that hasn't grown too large, controllers work just fine. But here we're talking about an app that is about 120k loc, and an API that works to expose some complex business logic. Moving to Coach has made our controller code much more explicit, and allowed us to test in a style that we much prefer to the half-baked controller specs that are standard. For us, that was a real win. &gt; Leads me to believe your real issue was API design, not controllers. The API we now serve using Coach is our Pro API. The docs can be found [here](https://developer.gocardless.com/pro/2015-04-29/#overview), and I'd encourage you to at least take a glance. We spend a lot of time making sure our API is as clean as can be, and if you think we could improve it in some way then we'd love the feedback.
&gt; Where do you get your first quote from? It's paraphrasing, so you know you're fighting a straw man, right? It was not a direct quote, but nor was it a straw man. You never said words to the effect of "this is not a bug" (in which case, my post *would* have been a straw man!). Sorry if you feel I misinterpreted you; I just felt people could have taken away the wrong message from the original wording of the article. Thanks for updating it. &gt; About your whole library design tirade - way to miss the point ;) I don't understand why you need to pass judgement on hypothetical libraries people aren't writing? Let them try it out and see if it hurts. I went on a bit of a tirade because I've *seen* code using this syntax before. And in my experience, using anonymous variables for return arguments has always been as a "hack". Yield arguments are sometimes useful, I'll give you that, but I'm yet to see a good use for return statements. For example, someone writes a huge ugly method, which does way too much stuff (i.e. should be multiple methods/classes) and returns a long array of results. Someone else then comes along and uses the method like this: _, _, _, result, * = method_that_does_too_much(...) # Eww.... I guess my point is, I'm yet to see any code that made me think "I wish/I'm glad someone used a splat here!". For me, a better answer has always been to simplify the library being used. If you could show me a good real-world example, I'll shut up and agree ;)
&gt; Yup. What does that tell you? For that matter, Ruby interpreters also support tabs for indentation. It tells me that ruby/RuboCop don't *enforce* any style guidelines at all. Which is good, because... why should they?! &gt; You've said tabs are "bad" and "ugly" but the only argument you've offered is that most people use spaces and some people say "use spaces and single-quoted strings". Is that it? The big issue is, of course, when you **mix** tabs and spaces. The ruby community are so heavily driven to enforce soft spaces only (and many other style points) because of the annoyance caused by integrating other people's code into your own. If you end up in a situation where 50% of InfraRuby code uses tabs and 50% of InfraRuby code uses spaces, a lot of people will get annoyed. So, perhaps you should just conform to *literally every* ruby style guideline (and 99.9% of projects), and use soft tabs... (And as I said before, few people really care about single/double quotes strings.)
Sorry, I meant to give more explanation but I work 12 am - 9 am doing technology deployments in Europe so I was super tired when I sent that last comment. $ rails generate controller some_controller hello that will generate something like this: create app/controllers/some_controller.rb route get "some/hello" invoke erb create app/views/some create app/views/some/hello.html.erb invoke test_unit create test/controllers/some_controller_test.rb invoke helper create app/helpers/some_helper.rb invoke assets invoke coffee create app/assets/javascripts/some.js.coffee invoke scss create app/assets/stylesheets/some.css.scss now if you open your project in an editor like Sublime (entire app folder not just a single file) you should be able to view app/ and you'll see View, Model, and Controller folders. inside of these folders will have files aptly named based on what you put after generate. the first command is going to be the name of the controller which controls the flow of logic for the page being displayed. The view folder will have a folder with the name of the controller and within that folder will be an html (erb maybe, but that is just a Ruby html file) file that has all the styling and some Ruby code. So if you did everything above and visited my-app.heroku.com/views/some/hello.erb you'll arrive at a page. Let me know if this doesn't work for you or if something doesn't look right. Good Luck, JakeTheAndroid
In some cases it may work to just update member variables via #set_instance_variable after initialization.
Thanks, I'll have a look! But the "build not passing" badge on rr's github page is not very encouraging :)
The issue is that the method returns the last thing it evaluates, which is the result of the loop. `puts` prints to standard out and returns `nil`. To test what is actually printed, you'll want to stub `puts` on the class containing the method (or `Kernel`, I think, if it's not in a class), and assert that `puts` receives the message as a string. Another option would be to modify your method so that it returns an array that can be printed by a method that *only* prints. This will make it easier to test; there is no reason to test that `puts` does what it's told. Something like: def pattern(n) (1..n).map { |i| i.to_s * i } end def print_pattern(n) puts pattern(n) end Also, as a note, it's common to use the enumerable methods in ruby instead of an explicit for loop. So using (1..n).each do |i| &lt;do something&gt; end Check out http://ruby-doc.org/core-2.2.2/Enumerable.html for more.
`puts` sends output to the screen, but that isn't the return value of the method. Perhaps you should build up the values and return that. Would it make sense to you if `pattern(3)` returned `['1', '22', '333']`? Getting that output on your screen is distinct from generating it. If `pattern` were re-written like i suggest, you could have a helper that uses `puts` for seeing how its going. def print_pattern(n) pattern(n).each { |line| puts line } end
So I have taken your advice and my tests now look like [this](https://github.com/jkvalk/quickmox/blob/master/spec/host_spec.rb). Thanks!
A `for` loop will return the enumerable object when it is done. Since the last line of a method is implicitly returned the `pattern` method returns the range returned by the for loop. Using `map` is a good solution, though to get the exact output specified by the OP you need to use `join`: `(1..n).map { |i| i.to_s * i }.join(' ')`
Thanks! Between you and /u/smix, I think I'm in serious danger of getting my head on straight here. :)
I was looking for a text tool in which I can write scripts, and run simple commands offline. I would rather use Windows, as our company does not support many Linux boxes, and I would like to learn on a more familiar environment. I think what /u/aust1nz posted might be what I am looking for. 
Let me check that out, but from the webpage I think this is what I am looking for. Thanks allot. 
Yes, RubyInstaller looks like it will give you the 'irb' environment that I mentioned. You can certainly edit and run small scripts in there. But you'll quickly find you want a real text editor in which to type, and from which you can copy and paste code into irb.
I was going on OP's comment: "but I can also use something in Ubuntu if I have to"
I'm in a similar boat and I feel like I may have wasted a lot of time by refusing to look at other people's solutions and bulling ahead until everything falls apart. The solution I've arrived at is that I'll make my best attempt at solving the problem, sketch out my proposed solution (or as close as I can get; at a minimum some pseudocode for how I think the process *should* work) and then I'll look around at how other people have solved the problem and decide whether to modify my approach on that basis.
I just know Windows much better. And anything I might push a script for, would be in Windows. Not to say I CANT use Ubuntu, its just all the support work I do would be mainly non-Linux based. 
Thanks much! 
If you find yourself using a lot of ruby, consider downloading Cygwin too. It gives you a Unix-style command prompt where you'll be able to use irb as well. The key difference: most help you'll find on the web is going to be for Unix systems, and Cygwin will allow you to follow the advice a little more closely without having to dual-boot or run a virtual machine. Edit: at https://www.cygwin.com/
Makes me feel unsure about the article right away. "JavaScript is a very popular framework used with numerous programming languages" I always thought Javascript was a language. JS frameworks these days... Let's not go there. 
codewars.com
Do you use irb?
It will be interesting to see i there is any advantage to this -- I don't see any profiling that even shows the read in as an area for performance increase. I would expect that for very small/short lived ruby projects you could see an advantage but for larger or long run ruby it will not be worth the complexity. 
If you are writing scripts to automate your own daily tasks, I think Windows should be fine. The problems you might face are from gems (libraries) that use unix packages. But in many cases there are pure Ruby alternatives.
"...including our beloved Ruby on Rails". Yeah, looks like the author reversed the two.
I don't think you need to configure the JVM to get the benefits of JRuby, that's only if you really want to squeeze out performance. One notable difference is that JRuby has real threads, so if you use a threaded web server like Puma, you could see benefits with JRuby.
Sequel is an ORM, and Grape is a web framework. Even though with Rails an ORM and a web framework may seem connected, they are actually to different things. You can think of them as two separate "libraries", so they will always play nice together :) What is an upside about Sequel is that it is much easier to use outside of Rails than ActiveRecord. So definitely would recommend using it, and any web framework with it would work equally well :)
Hey! This is a good opportunity to ask if you, or anyone else, would be interested in trying to pair program through these problems (or Rosalind or Project Euler or Exercism, etc).
I understand that, anyways thanks. I was just clarifying that switching the so called default Active Record was not much of an issue.
Sure, thanks.
Now that I think about it, it makes sense that the drinks/ would work. Essentially it just doesn't support default pages. I'm glad you were able to get it working. Feel free to pm me if you ever need additional help. 
Unfortunately I can't offer any guidance for ruby on Windows. If you want to learn though, the best advice I can give is, scratch your own itch. Meaning, have a thing in mind that you want to build! If you're not working toward something, you will almost assuredly get bored, frustrated, whatever and give up. Think of something you'd like to script. Maybe you want to be able to schedule when an email is sent so you can "email in sick" for work while you're still asleep at 7am. Maybe you want to organize your mp3s by mp3 metadata or generate playlists. Maybe you want the newest boobs from one of the adult subreddits delivered to your desktop through out the day? Whatever. Just have a thing you want to make. Then start figuring out how to make it. Ruby and python are (imho) your best bets for first languages. They are both perfect for "just getting shit done" duct-tape style projects or beautiful, elegant architected solutions. Where both fail pretty spectacularly at: good, cross-platform GUI support, raw computational speed (but hardware is cheap), easy windows deployment. Good luck! 
So let me get this straight: this project with a CoC from a decent source gets a report of unacceptable behavior by reporting an issue per the CoC's own instructions, a maintainer is dismissive of the person making the complaint, others dog pile on the dismissiveness, and your suggestion is that even merely having a CoC is too much of a burden? 
Alright. Fair enough. 
Yeah, I noticed that. Most of the example projects I have seen on the internet are either very simplistic or stupidly complicated. I like the organize idea. That would be interesting. I want to finish the Code Academy series before I really start anything big in Ruby. Want to make sure I understand most of the commands, variables, etc. 
I think you're looking for #map http://ruby-doc.org/core-2.2.0/Array.html#method-i-map
So, did Opal actually remove the contributor?
The only reason it exists is because a shitshow from random twitter users about a comment that had nothing to do with the project or the climate of the conversations in the project before the shitshow. CoC's are not bad, CoC's forced into place by a pack of crazies with some issue against the world not so much -- NoCoC++ in that case.
I see some problems with this NoCoC thing. All people are not "adults" in the way I think you meant it (WTF does "adult" even mean? The usual definition is 18 years old in the USA, but contributors can be under that. Unless you are trying to exclude people less than 18?). I believe you meant someone with the emotional and intellectual maturity to show respect to others and work on a project with a diverse team of people. There are tons of people out there with little to no emotional or intellectual maturity. Many of them could want to be contributors. A code of conduct allows you to have an official standard for behavior. If someone violates the code, then it is quite easy for anyone(not just the maintainers) to point them to a place explaining why their behavior is unacceptable. This is good for the project, as it avoids many shitstorms that the maintainers would otherwise have to deal with(Just because opal hasn't had to deal with it yet, doesn't mean it isn't a problem that would come up in the future). For people who are worried about being discriminated against, a code of conduct does make them feel better. I don't really understand very well why, but I'm a white straight male so I've never really experienced discrimination. A project literally loses nothing and potentially gains much by adopting a good code of conduct. ----------------------------------------------------- All that being said, let's talk about the specific issue. First off, @elia's tweet sounds like he is saying that transgender people are delusional(as a general statement). It is important to note that this is about equal to me saying publicly that all catholics are delusional, except worse since catholics aren't attacked regularly to the level transgenders are (in the current time period). He called a group of people's core identity bullshit. Whether or not he meant it that way, that is what it sounds like and that how it was taken. I think @coralineada (whom I have met in person and who tirelessly works to expand both woman and transgender rights) probably could have handled it better than she did(which she did admit in tweets, even if that doesn't really amount to an apology). As she said, she is used to people treating her as sub-human and jumped on someone who appeared to be doing that. Personally, I would not have complained about such a thing unless I was personally working on the opal project, but I'm not regularly discriminated against. However, if I was working on an open source project and one of the primary maintainers said "White people are delusional" IN A WORLD where the legitimacy of white people even EXISTING was regularly called into question then you bet I would be upset and strongly consider stop contributing to the project. I may also call for their removal from the project. Whether you like it or not, emotions and politics do matter to open source projects. In fact, politics matters more to open source projects than code in my opinion. Finally, the common argument against this is "it was on twitter, he wasn't representing opalrb". There is a reason many many people put on their blogs, email, and other personal communication that their views don't represent their employer. The assumption by people in general is that if you advertise you are associated with something on a communication medium, than the opinions you share on that medium reflect upon that associated thing. You can argue whether this is right or not (I personally think it is not) but that is the way that it is. Putting that he is an OpalRB contributor as a prominent thing about his identity (next to being anti-abortion (which many people believe is anti women's rights[I'm sure this didn't help curb @coralineada's reaction, since she is strongly for women's rights as well]) and his religious affiliation) calls attention to that fact. ------------------------------------ In summary: * Codes of conduct don't hurt anything, and they potentially help. * @elia's tweet was offensive, whether or not he intended it to be. * @coralineada admits she could have handled it better, despite her not apologizing for calling him out. * @elia's comments(in the lack of context they were given) are equal to saying that all catholics are delusional, and equally offensive. Acting like this is just "an opinion" is not fair. * Statements made in public on a medium advertising your affiliation with an open source project reflect on that open source project, whether they should or not. Finally, I find it funny that you don't have the courage to defend your apparently strongly held beliefs from your regular reddit account rather than a throwaway. That makes me thing that you don't actually think this idea is as good as you expound.
How about don't take an issue from a persons personal twitter account to a project and start a flame war there. The only reason/issue/problem at all related to the project was an inflammatory thread created by a non project random. The whole outrage-scream-censure but is more than little bit old and childish. If you see something said by a person on a personal account take it up with that person there, if you see an issue actually in the context of a project workspace then deal with it there -- don't bring it there. All Catholics are delusional. 
I responded to that in my final paragraph(before the summary) as well as the final point of my summary. The point of conflict there was that he officially announces his affiliation with opal while also displaying such beliefs. I would certainly ask a contributor of a project of mine to remove that linkage if I was in a similar situation (though I wouldn't remove them from the project unless they were making such statements in project chat, issues, code, or similar)
The [code of conduct they ended up merging](https://github.com/opal/opal/blob/master/CODE_OF_CONDUCT.md) is terrible because it's a blacklist which reels off the trendy social issues of the USA in 2015. It carries too much political baggage: &gt; We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion. What about nationality, political leanings, social class or criminal history? Whoops, it's fine to discriminate based on things that aren't considered important this specific person. [Debian's is much better](https://www.debian.org/intro/diversity) and doesn't carry the same political baggage: &gt; The Debian Project welcomes and encourages participation by everyone. &gt; No matter how you identify yourself or how others perceive you: we welcome you. We welcome contributions from everyone as long as they interact constructively with our community. &gt; While much of the work for our project is technical in nature, we value and encourage contributions from those with expertise in other areas, and welcome them into our community. 
&gt; As for your analogy, it fits quite well. Most companies insist that you remove your work uniform/anything identifying you as an employee of the company before doing anything non-work related in order to avoid these kinds of issues. Lol, sorry I have never worked at a tacobell or whatever employee/badge type of company you are referring to. Most tech start ups/ad agencies/dev shops/small and large businesses have no such rule and in fact spew swag at employees. The reality is that a random took what could have been adult discourse in twitter and instead looked for a more painful way to disagree. In this case they scraped for other information and bombed a project that the user worked on. Why? To throw a tantrum. Its childish and should not be accepted at any level. The reverse is that people should feel free to take her actions and run to her employer and throw a fit. What happens if she does not directly link to her employer on twitter? Why not search for her username on other services to see if you can find that link? How deep into doxing do you need to go before it feels like doxing to you? Publicly posted or not, the link to his project can safely be assumed not to be expected to be used to throw a fit from some random just as the other party should have the expectation that no one goes out and digs up her workplace or projects to bomb. This is really not acceptable at any level and needs to be treated as the pathological behavior that it is.
/r/dailyprogrammer has some great easy challenges on mondays. there's tons that have already been posted! You can move up to intermediate and hard when you're ready or feel like changing it up!
Wearing swag != officially showing that you are an employee. I have swag from many companies whose only association I have with them is that I bought something from them at some point in the past. @meh acted far more childishly than @coralineada. Coraline came to the issue with a rather direct request yes, to remove a maintainer. Making a request is a perfectly valid and allowed thing to do in adult life. She made it rather politely, if very direct, and did not insult anyone(not even @elia). @meh preceded to insult her and dismiss her opinion out of hand as being worthless. That is childish. Unfortunately at that point @coralineada's followers jumped in and the whole thing became a shitstorm. An adult response from @meh like "The opal project does not condone his statements, but will not remove him as he is a core contributor and has not shown any derogatory views to any contributors or while acting in any official capacity of the project. If this changes, removal will be back up for discussion" would probably have avoided this whole shitstorm. At worst someone might have opened an issue for a code of conduct (which happened due to this shitstorm, and was merged). 
This
I did not see a temper tantrum in @coralineada's original request nor do I see a problem with asking someone to be removed from a project for any reason. As I wrote elsewhere: "The big difference I guess in our viewpoints though is I see someone opening a issue requesting someone to be removed from my project as not worth getting upset about, where as you (and the rest of the people arguing with me elsewhere) seem to think it is this horrible crime that is incredibly rude." The project does not have to grant the request, and if they gave a polite and respectful response I doubt this would have become the shitstorm it did. There is no way to tell for sure though. As far as doxing, his twitter is linked from his website along with his github. His picture is on all 3. You can't dox someone with publically available information. As far as it being equivalent, I can't see how. Everything provided was public information linked to the topic of the discussion(opal).
The pain of doxing is not the discovery of information. Its using it to abuse/harass/mob the person. In that way it is equivalent. In this case she read something on twitter that she took offence to and proceeded to not deal with it like an adult but to seek information that she could use to expand the issue to a public (yet unrelated) platform for abuse/harassment/mob on a project he was working on. An adult and reasonable reaction to his message (which mind you if you look at it in larger context was blown WAY THE FUCK out of proportion) would be for example: * A dm to him explaining the issue and problem you had with the post. Explaining how it is hurtful. Opening a dialogue to see if there is a misunderstanding or room for education. * or a reply to his tweet doing the same. * If all of that fails and you feel strongly that this one comment is grounds for this person to be removed from a project that you are not involved in and looking through the history of the project shows zero community bias/hate twords your issue, a private message to the project lead telling him about the post and asking him if he was comfortable with that comment as it relates to a developer working on his project. * Ignore it and stop searching for divergent views that make you upset/hurt/feel pain on twitter. The intent and actions taken here were constructed to inflict as much pain as possible to him and to try to force a CoC on a project. Its just mob mentality and makes people like me stop looking at her as a smart developer that just happens to be a woman. It also goes against what she pushes out as her goal -- to have constructive and open communities. You don't get those by running around kicking dogs.
You can never make everyone happy with a CoC. If you do, it will wind up very generic and vague, slowly removing all unique bits of it that identify a community, and might as well just say: "don't be a dick". I personally wish more CoC's were like that. The amount of work that goes into trying to make everyone happy is unhealthy. People need to be more tolerant.
To be more Ruby idiomatic, you could also do: class Integer def square_digits String(self).chars.map { |i| i.to_i ** 2 } end end Now you can do: 123.square_digits # =&gt; [1, 4, 9]
Original: def ip_to_mac(ip) return '' if ip.nil? db.each do |line| if line[:ip].eql?(ip) return line[:mac] end end String.new end Simplified: def ip_to_mac(ip) line = db.find { |line| line[:ip].eql?(ip) } line ? line[:mac] : '' end You could potentially generalise the method further to remove all duplication, but I probably wouldn't bother.
I'd break it into two pieces: First generalize 'querying' the db: def find_by(constraints = {}) return {} if constraints.empty? db.find { |row| contraints.all? { |k,v| row[k] == v } } || {} end Which you can then use like `find_by mac: mac_flatten(mac)` or `find_by ip: ip` or even `find_by ip: ip, mac: mac` you may want to change the semantics of 'not found', I'm just returning an empty hash. You could pretty easily expand this to support more robust querying as well. e.g. you could detect if the value in constraints is a `range` and do an `include?` check, or if it's a `regex` and do a regex match, etc. Then you can define helper methods for whatever you want to do. e.g. def ip_to_mac(ip) find_by(ip: ip)[:mac] || '' end Some of the lookups should be trivial enough that they don't even need helper methods.
Others have answered the question of how to simplify one method. It seemed to me like the question was how to fix the duplication, or in other words, not have four similar methods with so much code duplicated from one to the next. Edit: It looks like /u/zoso might have been going for something similar. Go [here](https://codeclimate.com/github/jkvalk/arpdb/Arpdb::Arp) and click on the Source tab to see what I mean. Here's one way to do that, following /u/tomthecool's basic approach: def dblookup(key, match_value, return_key) return '' if match_value.nil? line = db.find {|line| line[key].eql?(match_value) } line ? line[return_key] : '' end def mac_to_ip(mac) dblookup(:mac, mac_flatten(mac), :ip) end def ip_to_mac(ip) dblookup(:ip, ip, :mac) end def locate_mac(mac) dblookup(:mac, mac_flatten(mac), :location) end def locate_ip(ip) dblookup(:ip, ip, :location) end 
Service (aka Domain, Application or Business) layers are extremely common and exist in many frameworks. Rails is one of the few that uses the 'fat model' concept. 
"Domain" and "application" are different concepts in DDD, which I presume to be the inspiration for service objects in ruby. What I'm trying to tell you is that your framework can, at best, give you a paint by numbers architecture unsuitable for most real world applications. Most of your software belongs *outside* your framework, at least conceptually. There is nothing called a "service" that belongs in a directory like `app/services` (ugh, I am sick of seeing that directory in projects).
I love your name.
So, I write code in a lot of languages. I like Ruby; it's a pretty nice language, but I wouldn't call myself a "Rubyist" any more than a "Haskeller" or a "Clojurist" or whatever the cool kids call themselves nowadays. I build working systems, I don't feel any need to be dogmatic about which language I use (except, y'know, *forget* PHP, maaan). This is the first I've heard of Opal. From what I gather, it's a Ruby-&gt;JS transpiler. Mmkay, cool, got it. I think it sounds like neat tech, and frankly I don't care about ceaseless internet bickering. People need to learn that: 1. People are jerks online 2. Nobody is the internet police (except, perhaps, the local police in law-breaking situations) 3. Nobody forces you to like anybody online 4. People's code can be taken separately from people's personal views (like, seriously? I'm a Christian, and I don't reject *friggin' Algebra* just because much of it was derived by Muslim and agnostic mathematicians...why does someone's political views have to affect whether I use their dang Javascript tool?) 5. (and perhaps most significantly) not *every* stupid internet argument has to blow up into a massive "HASHTAG ____GATE" community discussion. Grow up and settle your disagreements like mature human beings. Or don't; if you really want to, whatever, sure, keep arguing. It doesn't really affect me one way or the other. But I think everybody could do themselves a favor by chilling the heck out and learning that you don't have to "fix" everyone around you.
Monkey-patching other people's classes like this is... 'controversial'. 
I have implemented this approach now (actually just copied what [/u/JeffMo](https://www.reddit.com/user/JeffMo) wrote) but I put the locate (`dblookup`) method in private. The idea is to have simple object oriented API for the users, it's much simpler to say `adb.mac_to_ip(aa:bb:cc:dd:ee)` than `adb.dblookup(:mac, 'aa:bb:cc:dd:ee', :ip)` 
awesome thanks for the recommendations
&gt; actually just copied what /u/JeffMo[1] wrote I hope you tested it! I thought I was careful to keep your method signatures intact, and tried to get everything right, but I'm notorious for stupid typos...
Yeah, I now also have around 98% test coverage, basically only lines still untested are the ones in rescue blocks. Those are mock tests however, I'm going to write actual lab tests soon. PS. Oh and if this all seems strange, the back story is that I have been learning for the past one and a half week and the results are in these two gems: https://github.com/jkvalk 
Rails infers the '1' by looking at @line_item.cart.id. ID (along withe created and edit datetime) is auto-generated when you create an activerecord model.
so basically when you pass an object to 'redirect_to' the 'show' action is triggered? (with the object id like you said)
I typically run to support of LGBTQ causes. I've made some paltry donations to Glaad. And the small, localized communities in tech I associate with have adopted CoC, and I'm in support of that. Having said that, Coraline's reaction to that tweet was unreasonable. Actually, it kind of bothered me. Rushing over to GH, demanding dude be removed from the project and demanding project donate money to charity of her choosing over it does not seem like a reasonable response to that one tweet. Like, seriously, chill the fuck out. Also, I wish 4chan and Hitler would stay the fuck out of stuff like this. They never help either side of any argument.
How would a CofC have helped in this situation?
Exactly, let's not forget that Javascript was created by a homophobic guy. 
I don't think codes of conduct really change all that much in practice. Certainly not to the point where numbering the rules is helpful, let alone rules about how other rules can (not) be created. The Contributor Covenant is really just one rule: don't harass. The rest of it is just fleshing out the community's idea of harassment.
Aaaaaaaaaaaaand done! Any other suggestions let me know!
I sort of agree, but I always try and remind myself of something when I view this sort of activism carried out: we may feel like Coraline's reaction was unreasonable, but it was far more reasonable than the insane way that society treats transgendered persons.
With Elia and Coraline? I guess not. Coraline seemed to presume that their unstated code of conduct would be similar to what was eventually actually adopted. I think there was some discussion of the project's community values as the thread went on which could have been avoided with a published code of conduct.
If you pass a collection you'll get the index page
I wouldn't say it's on its way out, but it may be losing mind share. Rails is still used by a large number of companies, It's still a stable, reliable platform to build an application on and there are still plenty of jobs for Ruby/Rails programmers. If you enjoy working with Rails, then there's no reason to stop learning or using it. At the same time, it's always good practice to keep aware of the alternatives. If you see another technology prominently represented in job listings, give yourself a day or two to explore it.
Lots of people are paying to learn it. The code schools seem to be churning out people faster than ever. At the entry level however, jobs may be scarce because whether you are developing a new app from scratch or maintaining a large existing system, brand new developers are often a liability for quite some time. There may also be a general slowdown in hiring. We know it's coming eventually. This will affect all stacks currently used by startups. Developers are faddish and prone to reinvent the wheel. Every generation seems to have to learn the same lessons all over again. The high tolerance for frustration leads people to put up with the status quo and then all of a sudden abandon it for the shiny new thing that promises salvation. A lot of it is snake oil. Out of the frying pan and into the fire. The problems of development are not unique to Ruby or Rails. Quite a bit of pointless bureaucracy and busywork has crept into typical Rails development. I am working on solving this. Don't know whether this will lead to more jobs or fewer but it will lead to more Rails apps. I think a lot of developers are content to go through the motions. The way things are will not cut it for the next 5 years. Something's got to give.
What would you say is on the rise? 
I've never used Meteor, but it looks really interesting. How do you see it stacking up against Rails or Django? Is it as full-fledged a framework?
Others have covered the state of ruby, and i agree. I still hear about people looking, and i use it nearly every day at work. I say nearly, as i don't always work on web apps :). But review your market and see what people are looking for there. If your prime focus is to simply get a job as a programmer, see what other programmer jobs out there interest you, and what tools they use. If there's a large market in that area, then by all means learn that instead.
I started with Ruby on Rails but most of the ruby projects I do these days are with Sinatra or other smaller frameworks that I can tailor to the project at hand. A LOT of APIs and service layers for us. Ruby is still going strong out there.
&gt; But its poor reasoning, since this had absolutely zero to do with the project. Developer is an asshole to people on a public forum which specifically advertises his connection to the Opal project, and is often used to talk about the Opal project. Seems pretty clear-cut to me. If he wants to be an asshole, that's fine. However, if he does that somewhere that's strongly associated with Opal, then that's going to reflect poorly on Opal. Asking the project to do something about it doesn't seem problematic at all - even if that's just telling Elia to either cut it out, or don't advertise your connection to Opal in the same space you're being an asshole. Not hard, by the way - you really should not be mixing personal and professional anyway, because it can cause all kinds of other problems. Given that the Adam, Coraline and Elia all managed to sort this out amicably, I don't see this as a problem. @meh, on the other hand... &gt; They finally merged someone else' CoC, to prevent the mob from endlessly discussing it. No, they didn't. They merged Coraline's CoC. Afterwards, some people suggested an alternate one (and were very clearly trolling), and that PR was declined.
Did they move past mongo or are they still revolving exclusively around it?
At my local meetup some companies started to look into Go for Rails replacement. I am not sure why people are fascinated with Go, seems a bit terse and low level.
Node/Express for sure. I think Go is picking up steam but beside what particular stack you choose I think what we want our backends to do has evolved. When Rails first arrived it was normal to think that the server should generate HTML for the client. Duh. How else are you going to do it? With the rise of rich front end frameworks like Angular and Ember I look at my backend as strictly an API server. I can hook up whatever frontend on whatever platform to my backend. My web front end is static files being served from a CDN. Or my front end is an Android app. Rails does have an [API only project](https://github.com/rails-api/rails-api) but [Express is very easy](https://github.com/DaftMonk/generator-angular-fullstack) to get up and running. For many apps the "which backend framework should I choose" question is less exciting than it was five years ago. I think that's a good thing.
Cool project! Not relevant to your question, but I would suggest assigning the OIDs you are using to some kind of variable. Or use MIBs, I guess.
Other thoughts: It looks like successive calls to `Arpdb::Arp#scan` may create duplicate entries in `@db`, since `@db` isn't cleared except in `#initialize`, not sure if this was intentional. This: snmp_transports.is_a?(Array) ? @snmp_transports = snmp_transports : @snmp_transports = [snmp_transports] can also be written as: @snmp_transports = Array(snmp_transports) This: st.walk(%w(1.3.6.1.2.1.4.22.1.2 1.3.6.1.2.1.4.22.1.3)).each do |row| @db &lt;&lt; {mac: row.first, ip: row.last, host: st.host, location: location} end can also be written as: st.walk(%w(1.3.6.1.2.1.4.22.1.2 1.3.6.1.2.1.4.22.1.3)).each do |mac, ip| @db &lt;&lt; {mac: mac, ip: ip, host: st.host, location: location} end 
really? huh, rbenv and chruby have essentially the same installation process. 
rails-api is useful and you'll find Rails used for APIs in a lot of places. It's handy to know especially to get in the door somewhere. Don't look at it as just a web back end.
my 2cents rails -&gt; node -&gt; go -&gt; ??? I was doing node and go. God I hate nodejs :)
&gt; I downcase everything to store it in the db. ... Why?! That's obviously your problem! Store it with whatever capitalisation is entered. You could then perhaps upper-case it (`MCGRAIN`) when contacting them, to ensure no funny capitalisation is displayed. Alternatively, (10 seconds on google found me...) [a ruby gem called "namecase"](https://github.com/tenderlove/namecase) which attempts to solve your exact problem.
I was being facetious... should have marked with &lt;sarcasm&gt;
http://stackoverflow.com/questions/164896/limitations-in-running-ruby-rails-on-windows
They just add the white space so it's readable. Use something like pp (pretty print) to output that data into a readable format.
It's not a method on an object, use it like you would use puts for example
little confused as somefile = File.open('/Users/MacbookPro/Documents/textfile.txt', "w") somefile.puts "Hello file!" somefile.close works just fine and I just replaced puts. How would I use it not as a method? I thought you could use it as a method as long as it had arguments?
/r/startups 
Or how about we code and leave our personal lives out of this? SJW's got gnome, almost have python, and now they're coming for ruby projects. I'm completely sick of this "social political" bullshit. 
Get some popularity and *ease* ads into it. You don't want to lose your entire userbase 
so it would look like this? somefile = File.open('/Users/MacbookPro/Documents/textfile.txt', "w") Pp.pp(client.posts 'catwithal.tumblr.com', :type =&gt; 'photo'), somefile somefile.close
You could give VIM a shot, in highly impressed with the syntax highlighting when using the ruby-vim plugin.
 require 'json' input = JSON.parse(client.info) puts input["user"]["likes"] #=&gt; 942 puts input["user"]["name"] #=&gt; catswithal
You could also give emacs a try. Extensibility is the best :)
http://ruby-doc.org/stdlib-2.0.0/libdoc/pp/rdoc/PP.html Sorry, I didn't realize puts was a method on that class. Use the pp class
&gt; stuck on how to make it wrap A-Z You need modular arithmetic. If you took all the numbers from 1 to 1000 and divided them all by 12 and took the remainders of each, what would you have? You would have this sequence repeating over and over: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 The letters A-Z could be represented as unique numbers 1-26 right? The modulo (remainder) operator is %.
This will not work out of the box, since the alphabet doesn't start at code point 0. So: `((character - 'a'.ord + offset) % 26) + 'a'.ord`.
I usually use Bundler and then just point my Gemfile at the working copy of the gem. Then just bundle exec and boom you're done.
This uses lookaround to only find 12 digit numbers inside double quotes: %q{"id": "121712317104"}.gsub /(?&lt;=")\d{12}(?=")/, '' 
Thanks for sharing my video! Always open to suggestion for new ones, too. 
This should work %Q{"123456789012"}.gsub(/"(\d{12})"/,'') #=&gt; "" if you want to replace the number with nil %Q{"123456789012"}.gsub(/("\d{12}")/,"null") You don't need the lookaround stuff. Gsub can replace match groups just fine. 
You can use this: http://bundler.io/git.html
[Passive Income Aid](http://www.passiveincomeaid.com/)
There is a woman why has immense power to shut down open source projects with a tweet to her followers. She decided to target opal this time and almost succeeded. The opal developers had to surrender and accept her document in order to stay alive. Let's see what other open source projects she targets next and it will be interesting to see if any of them are able to stand up to her. 
Code of conduct won't accomplish anything. The social justice warriors will always find something to be offended about and will attack people relentlessly until they impose their brand of censorship on the project. There is nothing anybody can do to keep coraline from attacking projects. If they adopt a different choice of conduct she will attack them until they use hers. She is a supremacist at heart. She knows that she is infallible and that only her values matter. 
Thanks for buying the book! The screencasts are going to be coming following the completion of the book. In the meantime, I'll be asking people who purchased that package the kinds of things they'd like to see in them (in addition to the things I already have planned), so hopefully it can be a really useful resource that covers a lot of the things that people want to see explained when building an app start to finish, and then act as a complement to the more general concepts covered in the book.
&gt; Codes of conduct don't hurt anything, and they potentially help. potentially the lack of a CoC can do the same &gt; elia's tweet was offensive, whether or not he intended it to be. define offensive I know him personally, we worked together, Elia is all but offensive You can argue about his opinion (I disagree with him too, this time), but not about being offensive He was referring to Judith Butler theories, of course Coraline took a tweet (less than 140 characters) and extrapolated it and made it look Elia was that tweet and than cried on a project COMPLETELY UNRELATED to the tweet that Elia was transophobic and treated trans people like they were non-human and shit like that, which he did not. IMO Coraline has offended my intelligence, me as Opal user and me as a adult person when she forced down the throat of adult people (I'm almost in my 40s) a CoC to solve a problem that never actually existed. And that doesn't solve the problem she says she wanted to solve. She only scared away contributors from working for Opal. &gt; elia's comments(in the lack of context they were given) are equal to saying that all catholics are delusional, most of the times they are I've never seen catholics (Elia is one of them) rush into a Github issues page and ask for removal of someone There is a reason if catholic church have been ruling for the past 2 thousands year They accepted maths and algebra and of course they won't fight CS, because they know it's a lost battle People like Coraline (she usually talks like she's representing the entire transgender community, but is it true? I don;t think transgenders would like that), on the other way, are trying to burn witches while crying that catholics have burnt witches 5 hundred years ago That's laughable &gt; Statements made in public on a medium advertising your affiliation with an open source project reflect on that open source project, whether they should or not. and this is a fault of who can't keep things separated a CoC should have as first rule - w'll kick you out if you come screaming and crying about one of the contributors for reasons not strictly related to the project &gt; That makes me thing that you don't actually think this idea is as good as you expound. Many of us are now scared by thought police First it was Github CEO, then Brendan Eich and people said "yeah, whatever, rich businessmen, who cares" Then it happened to Ben Noordhuis and people still said "yeah, ok, it was a bit too much but he is the most popular contributor to node.js, javascript suck, so who cares" Now they are targeting common developers Have you asked yourself why? What's their agenda? I know for a fact that C++ development has been held back for years by corporations infiltrating the standard committee, I suspect now they are using the same technique for open source projects, embrace, kill and extend Or divide et impera It have always worked Who pays these people? The overreaction of Coraline [reminds me this a lot](http://i.accesshw.com/production/images/234/630x630bd/234598.jpg) TL;DR: people like Coraline love censorship unless is them talking. They are not different from the "evil bigots" they are fighting pretending that they are doing it for all of us. They are doing for their personal power.
&gt; The point of conflict there was that he officially announces his affiliation with opal while also displaying such beliefs. there's no point of conflict He is actually a developer volunteering for that project it doesn't mean everything he says or thinks is on behalf of the project do we need to think all the same way to work together on something, for free, in our spare time? What if he was volunteering for Red Cross?
&gt; I did not see a temper tantrum in @coralineada's original request we found the core of the problem
This is a really interesting response, thanks. As someone who's day job is not web development, but who has to do some on a project by project basis I really value insights like this. 
What advantage does this have over Active Record? Is it faster/lighter? Less dependencies?
Isn't that a bit of what ActiveModel helps you do? Another question: So largely we should expect persistence-specific object mappers to start appearing that use ROM? Or would we use ROM directly to store our objects?
There's no real reason to use class_eval in the case you mention. Although one minor reason is you will ensure the code fails if `MyModule::ClassA` didn't exist yet, as you assumed it did. But I wouldn't use class_eval there (I would use a require `my_module/class_a` at the top of the file to ensure MyModule::ClassA is loaded). In general, class_eval is used rarely. You know it when you need it, if you don't need it don't use it. 
Not really, ActiveModel is just an interface for ORMs that implement Active Record pattern so that they can be easily integrated with Rails. You *can* use mappers to transform an input to a peristable form, what you use for that is up to you. You can use ROM's commands directly to store objects or you can hide that behind your own interfaces by implementing ie Repository pattern. I suspect we will see some gems that will provide higher-level interfaces built on top of ROM soon but ROM itself will remain simple and more lower-level with re-usable and decoupled components.
Just look at the doc: http://ruby-doc.org/core-2.2.2/String.html#method-i-gsub-21
[A little ruby gem I wrote a while ago, which can help you understand regular expressions...](https://github.com/tom-lord/regexp-examples)
`class_eval` and reopening the class are both ways to change the class globally, so what you want isn't really possible using these techniques. Are you sure you can't make your changes to the original class definition? If you over*write* a method within the same class, the previous implementation is gone, it won't be available to use via `super`. `super` comes into play when a class has inherited the method from another class or module, but then defines its own implementation; in this case, the inheritance chain will contain both the old and new implementations, and the new one over*rides* the old one externally, but can still call it internally via `super`.
Here is a solution using [Array#rotate](http://ruby-doc.org/core-2.1.0/Array.html#method-i-rotate): def caesar_cipher(string, shift = 1) alphabet = Array('a'..'z') encrypter = Hash[alphabet.zip(alphabet.rotate(shift))] string.chars.map { |c| encrypter.fetch(c, " ") } end p caesar_cipher("testing").join 
Thanks for the explantion. Can I then better use select to take care that only a-z and 0 - 9 is being used ? 
Any way of building this gem for Ruby 1.9.3 ?
In case you didn't know `bundle open &lt;gemname&gt;` will open the gem in your editor. This allows you to make simple changes and test them locally. Otherwise you can do this in your Gemfile and point bundler to a local git repo: ``` gem 'foo', path: '../foo' ```
If I understand you correctly, you are looking to broaden your horizon beyond Rails. If you haven't looked into it so far, Javascript would make for an interesting and immediately useful next step. Despite its mixed reputation, it's quite a lovely language, once you get to know it. It uses a different form of inheritance than Ruby (prototypal vs. classical) which is interesting to learn, and is flexible enough to support some aspects of functional programming, if you want to dabble with that. The beauty of Javascript as a choice is that it would allow for a gradual progression. I personally like learning with real-world goals in mind, so what I would do is pick one of my existing Rails apps as the basis and and learn by extending the frontend part of it. 1. I would immerse myself in plain JS, jQuery and the DOM. This is a very forgiving environment with a pleasant learning curve. Spruce up your apps client-side functionality a bit. 2. After that I'd pick a framework, any framework. While not as fashionable as other candidates and not a full-blown framework, I for one love KnockoutJS. It's quite compact and a lot easier to get into than, say, Angular. Check out the wonderful [live tutorials](http://learn.knockoutjs.com/) to see if you might, too. I'd use it to rewrite what I've created previously. 3. (2b, really) At this point, I would absolutely read Stoyan Stefanovs _JavaScript Patterns_. This is the book that finally made me understand many of Javascripts finer points. 4. for the next step, I would try my hand in building a Single Page Application. SPA basically means that the whole party is in the front(end), with your Rails app being relegated to just a JSON API endpoint. For this, a more full-featured JS framework such as Ember might be a good choice. It's quite Rails-y, too. 5. finally, I would look into Javascript on the server, with NodeJS or something like Meteor. One of the hot buzzwords right now is "isomorphic apps", where the same Javascript app can run either on the client or on the server. The nice thing is that you can progress gradually along this path, and still be productive the whole time.
There's also [padrino](http://www.padrinorb.com/) which is the middleground between sinatra and rails.
Try doing programming challenges, contests or Capture The Flag competitions (all CTFs now include an ACM style category). They're a good way to challenge yourself and become familiar with Ruby sans Rails. Also, poking around Ruby's [documentation](http://rubydoc.info/stdlib) or one of the many good Ruby books (links in the sidebar) would also help.
Maybe tell us what Python's Anaconda does? Googling, it looks like it's a suite of python packages for scientific and data visualization uses? No, I don't think there's anything like that for ruby, although there are surely a variety of ruby packages that do various related things, I don't think there's a packaged "distribution" like that. 
That's a bold prediction. Not a terribly unpopular opinion, but stating the future of the web is something I would never do. It's simply too important of a piece of infrastructure to not see huge game changing improvements at various points during its lifecycle.
Write the same functions 4 different ways. Copy them to completely unrelated modules and classes. Call each version in 7 different ways from completely unrelated places. Do this with out writing any tests. Now, shelve the whole project for 6 months. Come back to it, fire it up. Now modify the code in your production environment so you can consolidate the calls back down to one method all without taking down the server. Do that and you're prepared for the "real" world of software development :) 
Sinatra is a good place to start.
&gt; there's a high risk that you produce shit code I've met self-taught programmers who write "shit code", sure. I've also met well-schooled programmers who write shit code. I'm talking Master's degree from a school with a decent CS program. In my experience, attitude is the biggest predictor of code quality. Everyone writes shit to start with, but people who are actively engaged and looking to learn and improve tend to write better code over time. &gt; Javascript, while practical because of it's ability to run in browsers, is a big honking pile of garbage and will not make you a better programmer Oh come on. I've been programming since the 90s. The latest JS is hardly garbage. Go read "Javascript: the good parts" and get back to me. If you're referring to the usual complaints about unintuitive behavior or failing quietly, kindly educate yourself about strict mode. This is straight-up ignorant FUD. I don't enjoy JS as much as, say, Scala, but it's perfectly usable and (as a skill) highly relevant. It compliments rails development incredibly well. As a second language, OP could do far worse than JS. 
I would check out [metaprogramming in ruby](https://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/32-introduction-to-metaprogramming/lessons/75-being-meta). It's really critical to understand this aspect of ruby programming because its going to take you from not being able to solve a problem efficiently and coming up with the best answer. Good Luck! You're going to be amazing and make things months ago you thought impossible!
I guess you want to build a website right? Or do you just want a script that download images? First off, read up on bundler and ruby gems. You will need these either way. For reddit access, I guess you could get away with some http lib, but it would be easier to go with some reddit api client gem. If you want to go with webpage, check out sinatra gem or some other lightweight alternative. Don't do this in rails. With sinatra, the reddit client and some plain old ruby you should have all you need. If you would like to deploy this somewhere, heroku have pretty simple system, but you might need to use git. 
This is not going to happen. As I mentioned ROM is not an ORM and convenient layers can be built on top of it. I would also disagree that it's a lot of work. Even if mapping is 1:1 you still want to define input structure for a command for security reasons. And if you're reading data with 1:1 mapping you don't need to specify mapping attributes and just set a model that accepts any attributes (OpenStruct-like).
What kind of things do you want to work on in "the real world"?
Attitude and mindset, sure, but uni courses often strive to teach the mindset. That being said, my main intent was for OP to be aware of the chances that he/she MIGHT be producing what others considered shit code, and to stress the importance of trying to learn not to produce shit code. As for JS, sure. they've improved things in JS, certainly they have, and things are apparently going to get even better soon. But the only ones that think JS isn't shite, is those who are heavily invested and that spent a LOT of time learning it. I definitely think it's garbage for the purposes of self-teaching Firstly because you don't know what your code will do. Browsers interpret javascript differently. It's not the language definition's fault, certainly not, but it's there and it's not beneficial for self-teaching. Secondly, because the resources you run into on the web are shit. This isn't the core languages fault either, but there's a lot of happy hobbyists that take up the JS flag and "explain" to others how to do things on the web. Add to this that JS has a lot of bad baggage from the past, and your average search engines disability to realise that newer results are better when it comes to code related things... In the end, whenever I google for an issue in rails, I tend to get a hit on railsguides, or a SO question with a good answer. When I do the same for a problem I have in JS, I often end up with nothing useful at all. This isn't good for self learning either. third, the third party addition market is shit. Google for a bit of JS that helps solve your problem and you'll find 10 who don't, 3 who seem to at first but turn out being shite, and none that do. You can write JS code that is clean and functions well. If you are good. 99% of JS coders are not good, and the language itself (as it's seen through the filter of the web and a search engine), isn't really helping you get there.
Thank you for the detailed answer rubyuy. Isn't the use of modules trying to solve just that? Because I'm including `MyModule`, I technically 'copy-pasting' it into my module/class and changing the method implementation only effect my local modules/class like inheritance do? 
Thanks for the answer jrochkind, I guess I just saw some wrong code examples :)
I would learn Javascript really well (include the framework of your choice with this: Ember/Angular/React/Backbone) or possibly look at jumping into IOS/Android development (depending on what kind of programming floats your boat).
In general: try to expand your horizon beyond just rails. Preferably something low level, to learn how high level abstracted concepts map to hardware. Regardless of whether you want to be a --paid-- rails developer or not. If you want to become a --paid-- Rails developer: try to become active in an open source project using rails. In my experience, Rails tends to be very "pure" in examples, tutorials and smaller apps, but some of the abstractions tend to break done in the real world and developers come up with some very, eh, pragmatic ways to deal with / circumvent these issues. It's valuable to know what real world solutions look like and how to work with them.
 loop until begin end wat?
The code above works, I tested it - But perhaps it's not the ruby way of doing things. What I tried to achieve is to catch the exception inside the loop block so it will continue executing the loop block even if exceptions pops. 
Selenium has a polling / wait api built it, I would use it: def switch_to_alert page.driver.browser.switch_to.alert rescue nil end wait = Selenium::WebDriver::Wait.new(timeout: 10) wait.until { switch_to_alert } Side note: I recommend to everyone that they never, ever, use the `Timeout` module. It is not safe.
It's exactly equivalent to loop end EDIT: ah i see what you're doing, but it's really weird. THe idiomatic way would be just: loop begin rescue end end right?
I would not. It is no longer possible (as in, in a timely fashion) to master both Rails and Angular. They are both just too huge. Plus, there's a bit of an Angular backlash going on right now. You'll make yourself more useful focusing on EITHER frontend OR backend at this point, although you can still try to be a jack of all trades, master of none.
Well, the only reason why I have 'loop begin' in one liner, is because that's the way RubyMine formats the code when I auto-format. I was sure this is legit :-) I guess your right and it's easier to read when the loop and begin are separated. 
Angular is too complicated. There's a backlash going on right now actually. Meteor is too simple. Reminds me of the [old days of RAD tools](https://en.wikipedia.org/wiki/Rapid_application_development). Unfortunately there's always a tradeoff there. React... no real criticism. Let's see what happens. My Chrome browser has a task manager that lets me kill tabs. I think we've gone too far. ;) The future of web development is where the test suite will run, IMHO, and having a frontend-heavy app usually means you have a shitty, slow, nondeterministic test suite. I could just as easily say that the future of web dev is [Phoenix on Elixir due to the channels feature](http://www.phoenixframework.org/v0.8.0/docs/channels) and the fact that you can [get a chatroom web app up in 15 minutes](http://noizeramp.com/2014/12/18/chat-rooms-in-elixir-in-15-minutes/) due to the extreme concurrency, support for websockets [and extreme responsiveness](https://robots.thoughtbot.com/testing-a-phoenix-elixir-json-api).
 def is_anagram(a, b) EXCLUSION_REGEX = /[\s:]/ counts = Hash.new(0) a.chars.each { |c| counts[c.downcase] += 1 unless c.match EXCLUSION_REGEX } b.chars.each { |c| counts[c.downcase] -= 1 unless c.match EXCLUSION_REGEX } counts.all? { |_,v| v.zero? } end Just change EXCLUSION_REGEX to match whatever characters are supposed to be ignored, or if it's easier, change it to only match what is supposed to be included and change the `unless`s to `if`s.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Rapid application development**](https://en.wikipedia.org/wiki/Rapid%20application%20development): [](#sfw) --- &gt;__Rapid application development__ (__RAD__) is both a general term used to refer to alternatives to the conventional [waterfall model](https://en.wikipedia.org/wiki/Waterfall_model) of software development as well as the name for James Martin's approach to rapid development. In general, RAD approaches to software development put less emphasis on planning tasks and more emphasis on development. In contrast to the waterfall model, which emphasizes rigorous specification and planning, RAD approaches emphasize the necessity of adjusting requirements in reaction to knowledge gained as the project progresses. This causes RAD to use prototypes in addition to or even sometimes in place of design specifications. RAD approaches also emphasize a flexible process that can adapt as the project evolves rather than rigorously defining specifications and plans correctly from the start. In addition to James Martin's RAD methodology, other approaches to rapid development include [Agile methods](https://en.wikipedia.org/wiki/Agile_methods) and the [spiral model](https://en.wikipedia.org/wiki/Spiral_model). RAD is especially well suited (although not limited to) developing software that is driven by user interface requirements. [Graphical user interface builders](https://en.wikipedia.org/wiki/Graphical_user_interface_builder) are often called rapid application development tools. &gt;==== &gt;[**Image**](https://i.imgur.com/PDVDY7b.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:RADModel.JPG) --- ^Relevant: [^List ^of ^graphical ^user ^interface ^builders ^and ^rapid ^application ^development ^tools](https://en.wikipedia.org/wiki/List_of_graphical_user_interface_builders_and_rapid_application_development_tools) ^| [^Barista](https://en.wikipedia.org/wiki/Barista) ^| [^Software ^development ^process](https://en.wikipedia.org/wiki/Software_development_process) ^| [^PocketStudio](https://en.wikipedia.org/wiki/PocketStudio) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+csfu4se) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+csfu4se)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
I highly doubt that the `username` is not a string, hence I didn't mention `.to_s`... But yes, you're right. Also, sticking in pointless type conversions like `.to_s` adds unnecessary uncertainty to the code, and just makes it look poorly designed/untested.
This has got nothing to do with security concerns. While it is theoretically true that a POST request could be made with arbitrary data types, it is (`IMHO`) clearly your application's responsibility to determine what format is sent by your input form. Submitting a form with a numeric username rather than a string would, in this case, simply fail the login. This is not a security or usability issue; it is at most a sign that your input form is submitting malformed data.
 loop begin rescue end end Would never exit, note that there is no call to `break` in op's code. What is actually happening here is that `loop`is not a language level construct, it's just a method, `Kernel#loop`. When loop is not passed a block, it returns an enumerator. In ops code the `loop` is doing nothing at all, it returns an enumerator that nothing is done with. Actually, it returns a lot of enumerators. The way this is structured the `until` is a 'post condition' what ops code says is 'call Kernel#loop until ...' so for each unsuccessful iteration for the `until` loop, `loop` create a new enumerator. Ignoring the `begin` / `rescue` for a moment, this code looks like `loop until &lt;condition&gt;` the `until` statement is doing the actual looping here, `loop` is just called a bunch of times with no arguments, one call for every falsy response in &lt;condition&gt;. In other words, the `loop` does nothing here and could just be removed. But, you need something where loop is, otherwise this will no longer be a 'post condition' construct and the interpreter will complain that `until` has no block to run, e.g. replace `loop` with `0` and this code still works, but really the code should be restructured. The other confusing construct here is the remaining `until begin` bit, this is legal, but weird. `begin..end` in addition to allowing `rescue` also wraps the containing code in a single expression. Maybe an example of what is happening will make this clearer: x = 5 if begin y &gt; 6 end if the same thing as: x = 5 if y &gt; 6 You can even do things like: x = begin ....do some work.... 5 end and x will be 5 at the end of it. This type of thing is occasionally useful but should generally be avoided. Finally a cleaner way to write op's original method (see my other comment for why this method isn't great anyway, but just for example): def wait_for_alert_and_accept Timeout.timeout(10) do loop do begin break if page.driver.browser.switch_to.alert.accept.is_nil? rescue Selenium::WebDriver::Error::NoAlertOpenError next end end end rescue Timeout::Error raise Selenium::WebDriver::Error::NoAlertOpenError end 
&gt; all the Rails magic That is Sinatra, not Rails. `params` values in Sinatra are always strings. Unless of course you've stuck some middleware in there yourself to do something else. &gt; no amount of testing you can do to prevent it from being something else than a string. By that logic you also can't guarantee that whatever this theoretical thing is doesn't have a problematic `to_s` implementation. 
/u/tomthecool 's post is largely on target but here is my guess as to what is happening: It looks like you've stuffed a Ruby hash in `users.emy` and are `eval`ing it into `$users`. Now, outside the fact that this is a terrible idea, `Hash#values_at` will aways return an array, even when you only pass it a single key. So chances are your check against the password is trying run `[password] == password` and thus always failing. Instead of using `$users.values_at(username)` use `$users[username]`. Side note: Code like this is why I warn people not to use Sinatra unless you *really* know what you're doing. Double side note: The way you appear to be trying to encrypt the password is fundamentally broken. Don't try to roll your own auth or if you must for some reason, at least use bcrypt or scrypt for hashing. 
/r/rails /r/dcjobs I like Michael Hartl's Rails Tutorial. If you need a more general Ruby resource, there are several excellent ones in the sidebar.
For your SPA I would choose Angular over Ember. While Ember might try and be "railsy", it lacks what makes Rails great, the community. Angular is more established, has a huge community, and a plethora of resources. My suggestion is completely biased from my experience learning both. I was able to really get a hold on Javascript/Angular when I decided I wanted to do a MobileApp, at which point I decided to use the Ionic Framework.
Actually, a rails dev who knows other programming languages and tools is more hirable than one who only knows rails!
if lotus will add some volt real time web or 'action cable' I think people will check it. Now I guess, rails is 'the framework'
Thanks so much for the feedback. My gut instinct is to learn as much as I can across as many languages as I can (insofar as to learn as much without diluting my effectiveness). I just sometimes wonder whether I'm wasting my time. From the sound of it, though, I'll end up being a better, more insightful problem-solver for being open to learning more things.
The word you're looking for is 'append' to a file. File.open(filename, 'a' ) will do it for you. 
This is happening because you're trying to run the code from inside Sublime. Sublime isn't providing a full terminal so the return value of gets ends up nil. You need to run this code from an actual terminal with ruby calc.rb If you'd like to see the same error in the terminal as you are seeing here (for educational purposes), run your code in the terminal and then press Ctrl+d (this is the end of transmission character).
Thanks! That's all I was going to really put in the back end- high scores. 
Also `File.write filename, string, mode: 'a'`
Well, i've learn to program and to develop software. The language is then is just another tool from the toolbox. I haven't used any groovy in production code yet, but I assume it won't take much more time than one or two weeks to get to know the syntax and the eco system. Of course it will take way more time to master the language with its quirks and specialties and bugs. But you will be able to develop software in it way earlier than that stage. Functional programming languages are another league :-)
Then I do not see myself using ROM. The amount of work to map one column to one or more attributes is too much. :(
I just did: https://github.com/nahi/httpclient/issues/257 I hope someone replzs. Is there a general workaround I could use meanwhile? This makes the gem unusable for me. 
Oops, I misread your post. Here's a [working gist](https://gist.github.com/stevenpetryk/0133cd550757801b6582). This is a question that I feel you could have solved on your own by checking the Array API docs.
I'm sorry to hear it but OTOH if you expect AR-like convenience then you will be, indeed, disappointed. This motivates me even more to work on some higher-level repository pattern though.
1) Pick a language or framework that sounds interesting. 2) Code, code, code. Then code some more. 3) GOTO 1
When I ran the code in terminal I got the following err: Macintosh-3:~ ----$ ruby calc.rb calc.rb:5: syntax error, unexpected end-of-input still a text editor issue? 
It's not about the controller, if you have a website then normally that's publicly reachable (especially a login page). Now someone has pointed out to me that this is Sinatra and not Rails and that Sinatra doesn't convert anything, which would not make this code problematic if true. In Rails on the other hand it would be (the solution in modern Rails would actually be `params.permit(:username)`). And *occasional* security issue? I've seen that mitigation strategy countless times mentioned in Rails related CVEs (again this code is Sinatra so not affected). example 1: https://groups.google.com/forum/#!msg/rubyonrails-security/jILZ34tAHF4/7x0hLH-o0-IJ example 2: https://groups.google.com/forum/#!msg/rubyonrails-security/t1WFuuQyavI/6Q4T_toTb7wJ example 3: http://blog.tech-angels.com/post/46249485212/should-you-upgrade-rails-from-3-2-12-to-3-2-13 (first one in the list) Now mostly this is a thing from the past, but only because of the new enforced `permit` stragegy which force programmers to validate that what they received is what they expected. &gt; Or, how about we only add such mitigations if/when they are needed? Which is always the case on the boundary of your system (e.g. when receiving input from your client in the server). **Never** assume that input you got from outside your control is well formed, if your framework already takes care of this, that's fine but something has to take care of this.
Angular is of course a perfectly viable candidate as well. Personally, I quit dislike it, but it's undoubtably a sound and well-built framework. In the end, the choice of framework matters very little for the vast, vast majority of projects and comes solely down to personal preference. If OP decides to go down the Javascript route, I hope she shops around to find one that fits her.
It's likely you've made a typo your code should look like puts 'Hello there, and what\'s your name?' name = gets.chomp puts 'Your name is ' + name + '? What a lovely name!' puts 'Pleased to meet you, ' + name + '. :)' 
&gt; I have had no luck finding anyone in the DC area. Why is the developers Location important? I'd be available if you'd come to the conclusion that we have 2015. Just PM me. Also, if you try it own your own, take a look at the Rails documentation. There are Guides explaining the most important parts of the Framework. But for your own good, don't do it, you'll be responsible for that site until it will collapse.
So, if I understand right, you already hired a company to build you a product. The product doesn't do everything you want -- and indeed you didn't necessarily expect it to, calling it an "MVP". But now you want it to do more or different. But you don't want to pay the same company you were already paying. Because they were too expensive? You didn't say that, but I don't know why else you wouldn't just hire the same people you were already hiring. So you want to hire someone else to make changes to the app... because you think they will be cheaper? You will likely get what you pay for. And if you're paying by the hour, the people who wrote the app in the first place will likely be able to make changes in fewer hours than someone working with someone elses unfamiliar code. As far as tutorial on "editing skills", I'm not sure there is any such thing. You will need to understand how Rails works in order to make changes to a Rails app. You aren't going to find any tutorials on "How to take an existing app and make changes to it without understanding how it works." Or at least I really hope you won't. The tutorials on building an app from scratch are what you want, that's how you learn how Rails works, which is what you need in order to make changes to a Rails app. Also, first start by learning ruby as a language independently of Rails. 
Yes, but to settle your mind, you should try it out on non-critical data first.
For the record, don't do groovy. It's terrible.
Because who wouldn't love to have a passive aggressive contractor working for them?
Ha, read this before. Brilliant!
where does "ANN" come in here?
Sinatra params values are not always strings. I've just tested this with the simple example program require 'sinatra' get '/hi' do p params "Hello World!" end If you call that like this http://localhost:4567/hi?test[]=1&amp;test[]=2 it prints `{"test"=&gt;["1", "2"]}` 
Because the only thing that will, in reality, be making that HTTP request is the OP's application. With respect to HTTP requests arriving from other means, the only thing you *really* need to worry about is security -- which, as I keep saying, is not an issue regarding the `type` of `params[:user]`. I get the whole robustness principle ("Be conservative in what you do, be liberal in what you accept from others"), but I don't see the point in applying it literally *everywhere*, to the extent that it just clutters up your own code and makes your tests less potentially more lazy for no good reason.
So your argument in favour of writing lazy code is that writing robust code leads to lazy *tests*? I mean it's not even being liberal in what you expect. If you want to you could choose to not accept anything but strings, but the default is that it can be a hash or an array or a string. If you expect a string then make that clear in your controller code.
So yes Ruby and Groovy are roughly equivalent in terms of language features but the *ecosystems* these languages exist in I'd very different. (Let's ignore jruby for a moment.). So with Ruby you'll use trails but with Groovy you might use vert.x or akka or something. Probably Maven/Ivy/Gradle too. So if a future opportunity is already JVM-based (Groovy or not) you'll be a little more familiar with that environment than you would be otherwise. If you already know Ruby, Groovy the language will be a breeze -you'll spend most of your time learning the other stuff :)
Groovy + Grails is awesome. It's like rails - the set up is a little more atrocious because JAVA, but its totally worth learning. I regularly switch between ruby and PHP (drupal specifically)
For small, exploratory work, try [pry](http://pryrepl.org/). 
If you're feeling overwhelmed, you likely are thinking too broadly about your app. Try splitting it up into little manageable pieces and build those one at a time, on top of each other, until you have something cool. Just play around with it man. You'll never learn if you don't try.
Been a while since I heard someone mention fxruby. I found this [tutorial](http://www.sitepoint.com/an-introduction-to-fxruby/) on Google. My only gripe about the Fox GUI Toolkit is it looks so [Windows 95](http://www.fox-toolkit.org/screenshots.html)... I would instead recommend looking into JRuby and using one of the [many the Java GUI Toolkits](https://github.com/jruby/jruby/wiki/GUIFrameworks). There's also [ruby gtk3](https://github.com/ebruAkagunduz/gtk3-ruby-examples) bindings available.
Thanks so much! And, sorry if this sounds weird, but are you the person who created [this gem](https://github.com/postmodern/digest-crc)? I use this, and it's so great. :)
Ha! Thanks for that too.
If they really do the same thing, why is the company bothering with Groovy at all? Different tools that "serve the same purpose" never do. Experience fitting your tools to subtle differences in the task at hand will serve you well. 
*Ann*oucing. I think.
I'm around the same learning level as you- how necessary do you think the JavaScript course on Codeacdemy was? Still haven't decided if I want to go through it yet.
Of the ones you mentioned, I only did the Codecademy ones - Ruby completely, Rails partly. I like the Railstutorial.org book. It's pretty short, but have you done the HTML/CSS and JavaScript tracks on Codecademy? Codeschool might also be worth a look. "Discover Devtools" has some JS things and should definitely be useful once you get to building things. Would also recommend "Git started".
Even if you move on to a different framework/language, I'd say web app security is a common challenge. The common vulnerabilities and countermeasures are widely described. However, the fewest of us have a general strategy for security, how to keep up and what security measures to implement in an app. In short: * Keep software and configuration up-to-date * Keep learning * Have high-level security business rules * Be prepared for the worst case scenario I wrote a free guide about the [higher-level strategy](http://bauland42.com/articles/strategy-before-details-keep-up-with-rails-security-guide), if you're interested.
thanks man :) Sinatra is really great, it helps me to keep things tidy and well separated!
I think rails does desperately need something to encourage separation of concerns for efficient poro testing of business logic.
His English isn't great but he probably wants to get an idea of the site
What kind of site does your dad's business need? If he just needs to establish a web presence, the easiest option might be something like Squarespace. That way, he or an employee can easily change copy at some point in the future. If you're set on building the site, Jekyll is a cool static site generator that uses Ruby. If your dad needs a true web application with a database, user management and authorization, I find that [Michael Hartl's RoR tutorial](https://www.railstutorial.org/book) is an excellent source for getting you close to proficient.
That would be only a valid reason if i'd be the only remote contractor available in that field.
wise words
The first code snippet is how things are currently written. I'm not sure there was a lot of design thinking when the owner wrote it. I want to refactor it to make it make more sense. I know I can overwrite the `include`d module, but this will lead to code duplication. For example, the original module method will look like that: def module_method instance = ClassA.new instance.method_a instance.method_b end over-writing it means It will look like that: def module_method instance = **MyOtherModule::**ClassA.new instance.method_a instance.method_b end The issues is the I want to init the LOCAL ClassA, and not ClassA in the base class. Overwriting the module just so I can change the name spacing is the issue. Hopefully I make more sense now :) 
I'm still not sure I get a good feeling from this starting design in the first place, but it's hard to know with just this stripped-of-context example. But ignoring that as you request and just addressing the nuts and bolts of how to refactor to allow the re-use you want, that is doable. You just extract exactly the thing you want to over-ride to it's own method, so it can be over-ridden on it's own. (Hard to know what to name the methods involved without the context -- beware, naming is important for code intelligibility in your context, especially when you start doing extractions like this. ) module MyModule def module_method_helper_instance ClassA.new end def def module_method instance = module_method_helper_instance instance.method_a instance.method_b end end class MyClass include MyModule # Over-ride method from MyModule to # declare a different instance def module_method_helper_instance SomethingElse.new end end As a variation, don't have MyModule define #module_method_helper_instance at all, if there's no reasonable "default" then make every class that includes define it on it's own, as a requirement of including the Module. Not sure if this really gets at what you want -- I gather you are trying to make magic happen purely with automatic module namespacing. Which maybe is possible too, and maybe is how your stuff is structured now. But I don't tend to go in that direction, it usually ends up confusing and inflexible. Although honestly I think even what I suggest is going to end up a confusing over-engineered mess. The real answer is probably a larger refactor based on re-use of pluggable service objects instead of inheritance (composition over inheritance), focused on trying keep things as simple and with as few dependencies as possible. But can't suggest how to do that without more context (and might not myself have the time to figure it out even with more context, it'll take some thinking :) ). Hope this gives you some ideas. PS: For learning how to do good object oriented design in ruby, this book is pretty good: http://www.poodr.com/ 
For a beginner article, you gloss over a couple of things. Like this section: &gt; Using bundler allows other developers to work on your app with the same version of every gem. &gt; Now you can install gems using this: &gt; 'bundle install' &gt; Then, restart the server and apply the changes. You recommend installing bundler, say it can help other devs use your code, and say you can now install gems with bundle install. However, you dont show how bundler helps you share code, or install any of your gems later with bundle install. You say add things to your projects gemfile, but dont explain what a gemfile is or how it works with bundler. Consider your audience. You start good, explaining what a gem is, but then you start assuming knowledge. Someone who doesnt know what a gem is isn't going to understand what bundler does. [Bundler.io](http://bundler.io/) has a much more succinct explanation, so what are you bringing for beginners? [Here is a good example of someone else explaining what bundler/gemfile etc means for Ruby.](http://ruby.about.com/od/bundler/ss/What-Is-Bundler.htm) This reads more like you promoting a list of content more than a description of how to use gems. 
`Requires iOS 8.3 or later.` I'm an Android dev, but why are only targeting the most recent iOS? Your app is simply a list view? It's so simple you could be targeting even 1.0?
I don't think there's a lot of iOS7 users here and if there is then here would be the place to speak up. 
I'm seeing the Heroku error page for that URL.
It sounds like you want to ```exit```, not return. If you're doing a loop then you want ```break```. ```return``` is simply for returning values from other methods and so forth, not the same as C/C++. 
I'm on my phone, but look up 'bash PS1'. It's a variable usually defined in .bashrc.
Type exit
typing exit just shows [Process Completed]. When I start Terminal again the same login thing shows up.
Completely agree!
Which shell are you using?
Well, the confusion may come from the fact that `return`ing from `main` in C is equivalent to `exit` in Ruby.
Sounds like the shell is set to ruby for some reason. Check /etc/passwd and also .bash_profile and .bashrc. Also you should use iTerm anyway.
I understand the other answers, but it seems like the difference is so pedantic. Who cares that it's not technically "returning"? No one would be confused by a return in a main function, and it would help refactor as well as reduce arbitrary code complexity, which Ruby already has tons of.
Thanks for your response, and, yes, I've had little exposure to the Java ecosystem, so this is something I've been bearing in mind.
Hi there - I posted an in-depth answer here: http://www.reddit.com/r/ruby/comments/3b2hev/how_to_explode_multivalued_attributes_with_kiba/ - let me know if you have questions!
I did my best to explain the process of refactoring a source that is not very reusable into reusable components. Questions most welcome!
it's probably `rvm-prompt` https://rvm.io/workflow/prompt
main is not a function though, it's an object context. So it would be semantically wrong to allow returning from it
The difference being that you can `exit` from anywhere in a Ruby script.
You probably want to post this on linux4noobs or linuxquestions but you probably want to use a systemd unit file to run the scripts and set their dependencies (e.g. start after Sinatra). The Arch wiki has pretty good documentation on writing a unit file.
There are some gems that can help turn your scripts into daemons: https://www.ruby-toolbox.com/categories/daemonizing
Instead of logging the data, you could parse the data on-demand in the Sinatra app. As for linux services, checkout [foreman](http://ddollar.github.io/foreman/).
This is what I thought, but I also want to know about services. I got an idea to create small APIs for different devices inside my house and everything must run in a loop as a service. 
Also look into cronjobs, as they are the default way to run recurring jobs.
I have used the daemons gem and it works very well.
It's normal to have emotional reactions to syntax. It's less common to have rational reactions to syntax, unfortunately, but that might be unavoidable since it's largely an aesthetic concern. Do you prefer JavaScript's bulkier syntax?
Yes I much prefer writing in JavaScript. A lot of comes down to feeling like I have a lot more understanding and control over large blocks of JS code simply because there's more to it. Whereas with Ruby everything feels like it's in shorthand and that there's more to the syntax than meets the eye.
Ruby was my first language so take if FWIW but I think the Ruby syntax is very elegant. JS sucks by comparison so much that I will, from time to time, use Coffeescript (gasp) over JS. TLDR: fuck yo semi-colons!
The title makes it sound like a hit piece.
My prime example at the moment is with For loops. As far as I can tell based on what I've read and seen, you're quite limited in comparison using Ruby. Please let me know if I'm wrong here, but with JS you have a lot more control over the functionality of the loop, as you have three possible arguments to tinker with within the loop, as opposed to only being able to run the Ruby For loop for as many items as there are in the object you're calling it on. (Unless it's just me not getting my head around the way this code is formatted and it's structure).
It just seems like you haven't fully grasped the depth of ruby as there is more to loops than what you see if you are limited to for. Check out .each, .each_with_index, while, until etc. which should give you most tools you would need. Beyond that checkout the Enumerable mixin ( http://ruby-doc.org/core-2.2.2/Enumerable.html ). Whether you like Ruby a lot or not I will definitely say their documentation is very easy to use. That being said I would try to expand your knowledge prior accepting discomfort with that language. also, for loops are VERY rarely used in Ruby :)
Don't need no semicolons. I'm a strong independant language.
This is the best approach for something like this. Otherwise to make your code a 'proper' service you really should implement full signal handling. 
Have been doing Ruby for 5 years, but I think it's time to dive into Elixir for my next projects. I think Elixir really could be the "silver bullet" we're all looking for.
you can exit from anywhere in c too
&gt; Is literally compiled to this code: No it's not, they don't even act the same way, just one example of the difference: [1,2,3].each { } =&gt; [1, 2, 3] &gt; x NameError: undefined local variable or method `x' for main:Object vs for x in [1,2,3]; end =&gt; [1, 2, 3] &gt; x 3 Loops variables in `for` loops continue existing outside the 'scope' of the `for` loop because there is no lexical scope inside a `for` loop in Ruby. &gt; All of the ruby examples are passing a closure (in this specific instance, a "block") to a method. There are no closures in your examples, there are just blocks. A block, proc, lambda, or method can be a closure, but it would have to be capturing something in it's defining scope to be so.
Oh god. I felt I had been dropped in the ocean with a storm approaching. I came from procedural PHP. In the end, I had to be forced into a project and listen to MUCH more talented programmers than myself to finally get it.
Javascript is awful, but I love working with Jquery
Rails *developers* do, for sure. Adding architecture to Rails, at this point, would * break every Rails app in production that attempted to deploy against the new version; and * make DHH's head positively explode. At least one of those has unfortunate side-effects.
I use something like this for a similar script. This isn't the best way to handle signals but it works for simple stuff. Read http://www.sitepoint.com/the-self-pipe-trick-explained/ for more info require 'json' Process.daemon(true) Signal.trap('SIGINT') do exit 0 end # your code You can run your Sinatra app with Passenger Phusion. Might be overkill but I use it for production services at work and it works well.
what you're seeing is a representation of an array of subcategory objects. This is because you're telling ruby to output @community.subcategories. &lt;%=stuff %&gt; tells ruby to issue output inside a template, while &lt;% %&gt; will just execute the ruby. Change: &lt;%= @community.subcategories.each do |subcategory| %&gt; to: &lt;% @community.subcategories.each do |subcategory| %&gt; and all should be well.
`array.filter(function(el){ return el % 2 == 0 })` Please don't use deliberately convoluted code to illustrate your point.
Array.prototype.filter is a slightly newer addition to JS.
It would be better if code questions such as this were on stackoverflow instead of reddit.
Build a systemd service configuration file and off you go: http://www.freedesktop.org/software/systemd/man/systemd.service.html
Nice Craigslist mockup! Can't wait to build my first site, will probably be Twitter.
I don't think the larger audience of users on iOS 7 are fiending for a ruby pages app.. Just sayin'.
One thing I'm finding increasingly frustrating is maintaining a work/life balance and competing with other devs. I really enjoy writing software, but I have a ton of other hobbies. Where am I supposed to find the time to work 40+ hours a week, keep up with all the latest tech and methodologies, maintain my relationships and hobbies, AND work on all these open source projects potential employers expect to see? A lot of devs seem to want to write code 60-80 hours a week. I'm not one of those people.
Have you looked at the trailblazer architecture/book? I read the sample chapter and watched his 2015 rails conf video. The author visits this sub, but I am very interested in those concepts. Joining all business logic at the hip to all rails functionality really is an issue. I wonder if fixing it really required a rewrite like with Lotus.
I dunno, it varies. I work a good work week, but I have fun hanging out with friends in the industry, talking shop &amp; drinking beer... there is a social camaraderie in the industry as of lately that i really enjoy.. and not the "lets get drunk because we hate ourselves" but "lets drink to improving life" Are you making sure to learn at work, spending a few minutes each day just picking up something and challenging yourself? can you say no to peers if they're asking you to work on wrong things? I find in most cases when people feel pressured that they have to learn but there is too much work to do that they can't learn, they're often working on the wrong things, spinning wheels or just keeping busy.. work life balance is hard.. but i think you will find people who really love the industry have social/friends/connections/hobbies within the industry. They will be hard to compete against, but they're not wrong, cheating or making your life hard. You're the one choosing to have your own different hobbies/friends/relationships :) (again, *NOTHING* wrong with that..) I don't think this is unique to any industry.. oh, the one thing I *have* noticed is that a lot of people my age have skipped having kids.. they have multiple advantages i can never compete against, but i can't hold that against them :)
Good points. I'll update the README. Rather than a screenshot, the idea is just to login to the demo, but I'll make that clearer.
Looks like someone found an XSS vuln. Check your demo site.
It's definitely less permanent, but certainly the easiest way to daemonize any shell process without worrying about any special logging stuff. Though, if you're on a systemd system, writing a service unit is actually pretty easy. (Or an init script if you're not)
yeah as SkepticalMartian said it is the = showing the return value of the each method which is the collection being iterated over. 
Work for a company that gives you time to research and learn new tech. :)
Related: http://awesome-ruby.com/#awesome-ruby-web-frameworks
Yeah well too many people talk rudely over there I gave up trying to ask there because no one replies and most of the people who do answer me are just correcting my not so great gramar. This seemed like the second most appropriate place to post.
It doesn't have to be a function to return control to the caller. The OS calls the executable. The executable later returns control to the OS.
According to who? in ruby (and C) the context is always a function, and `return` only works inside functions
Right, but that's this weird, strict, and pedantic definition of `return`. "Return" is short for "return control to the caller". In the case of most functions, the caller is another function (or the main "context"). In the case of the main "context", the caller is the OS, so `return` can return control to the OS. Even if we define main as not a function (which--semantically if not technically--it kind of is), we can just overload the keyword `return` to mean two different things. Many languages overload keywords. An example is `else` in Ruby. It can be relative to an `if` statement or it can be relative to a `case` statement. Some even overload them to mean things that are extremely different (though I don't think Ruby does in particular). 
It's not the industry but rather the economic climate. Millennials++ are having less children. Would you want to have kids having grown up during multiple economic crisis? When most of the young generations don't have comparable savings to the previous (no nest eggs), they must focus on their own survival. It's tough these days, and makes people think twice about popping out kids.
I only ever use thread pools nowadays a for multiple io requests. Checkout [concurrent-ruby ](https://github.com/ruby-concurrency/concurrent-ruby) for thread pools and threadsafe containers. Or you could use futures/promises from there as well. threads are cheap to start so the payoff is huge. I've done upto 50 simultaneous requests and they all finish in the time it would have taken 1 to finish. 
Does it support placeholders or are you to just toss SQLi freely?
One thing I would recommend is to _really_ understand the flow of those images and design your back end against the flow. For instance if you are receiving a ton of images and your use of those images is long tail and may require many different size outputs think about not trying to process those variations until last minute along side caching in your backing store. I have worked on a few larger apps where I have seen incoming uploads get transcoded to dozens of different outputs automatically without any thought to the cost to do so. If you know for instance that a thumbnail size will always be needed but 30 other sizes may or may not build the thumbnail and progressively build out the others based on first request. Between that and expiring content that has been created but not used in a very long time you can end up saving huge amounts of server/storage costs on large apps. 
I think once you get a certain level of experience, keeping up with latest technology is not too time consuming. I like to have a good work/life balance and lately I am only working 2/3 days a week on client work(I am contracting), working one day on my own personal projects and open-source(that helps me to keep up with latest tech) and I just try to enjoy life in the rest of the time. Works out pretty well so far. 
I just bought the app and I second that. iOS7+ should be the way to go for this app.
No you're thinking of it incorrectly - `posts.id` in that query is not a variable but part of a nested select. So `Post.all.calculated(:comments_count)` comes out to something like select posts.*, (select count(*) from comments where comments.id = posts.id as comments_count) from posts; And nothing is inserted from a user variable. Or if you want to find a specific post or something, the variable is escaped as normal; in`Post.all.calculated(:comments_count).where(id: params[:id])`the id param is escaped by the ActiveRecord `where` method.
* Job description? * Responsibilities? * Preferred experience level? * Remote OK? * Salary details? If you cannot be arsed to put these basic details down, why should anyone reply? On sidenote: site does not work on android Firefox. Menu is dead and fonts are so thin as to be unreadable
there is no easy answer.
Alright. Guess I'd find to find my own way then. Sorry to have posted this on the main ruby subreddit. I've only just discovered /r/learnruby
It's helpful if you're trying to do a lot of functional programming in Ruby.
Seems like you didn't require it beforehand: require 'pp'
I'm happy to look at any code review questions you may have, PM me. 
This is really cool! I had no idea that lambdas had that syntax sugar. That... is really, really, really cool. Thank you for reminding me that Ruby let's you redefine operators. I made up a gist on composing classes that you might like: https://gist.github.com/parsonsmatt/f64393b9349592b6f1c1
It's difficult to perceive the utility of explicitly composed "interfaces" for Ruby given that our class composition operators (`extend` and `include`) serve their purposes quite well. That said, I couldn't resist the urge to try my own hand at ["class composition"](https://gist.github.com/0x0dea/f2ac964c4cedbc90bb6d). It's entirely pointless, of course, and the pretty syntax goes away the moment we want to specify the attribute(s) to compose over, but I had fun exploring the idea either way.
it's just that it's a hard problem you're approaching, it's not so much about learning ruby or finding your own way, as that it's just that the way to do what you're wanting is not clear, it will require some experimentation and/or cleverness, and will be difficult to do well. There is not anything that will just automatically get machine-readable data out of random PDFs, that would be more A.I. or natural language processing than parsing, exactly, as price lists in PDFs are not created according to any machine-readable standard. 
Add this to the question description so that people can see this easier.
I'd like to give you some help, and learn from each other. You can touch me with chenge3k@qq.com, my email.
Awesome! I have been looking for something like this for a while now. 
I'm coming from a .NET background, and I have some issues grasping OOP in Ruby (modules vs classes, over-writing methods which is not allowed in .NET etc). Wouldn't reading this book put me in the same place? Also, I'm sorry about the context issue. I changed the original post and hopefully it makes more sense now :)
I don't think its this industry in particular, i think its just people realizing they can be happy in life and not have to have kids and a change of paradigm from being obsessed about family lines lasting forever with a bazillion children to enjoying the one life we have today.
You may be interested in a followup gist demonstrating the utility of this a bit more: https://gist.github.com/parsonsmatt/c1abbb830b6976566198
The original code is confusing to me too. shrug. 
Yes, somethings fishy :-( I think I'll just refactor it from scratch. Move everything into a class, and extract only the functional methods in a module if needed.
It's not a Rails only issue, but a Rails specific instance of an issue (although the relevant RFC does say that '/blah' and '//blah' are distinct). Also, requiring no user input has nothing to do with being a XSS vulnerability or not. This issue achieves JavaScript execution in the scope of the vulnerable website, so it is most definitely a XSS vulnerability.
Technicnally he phrased the question such that a regex can correctly be written to find what he's asking for. The href attribute of an anchor tag can't have arbitrary matched nesting like the entirety of html can, so it doesn't cause the counting problem in the first place.
&gt; but a Rails specific instance of an issue (although the relevant RFC does say that '/blah' and '//blah' are distinct). Last time I checked Apache, nginx and IIS all merge multiple '/' into a single '/' in paths with their default config. It may not be in the RFC but it is the defacto standard behavior of the web and not even remotely unique to Rails. I'm not even sure Rails does this handling, it may take place in whenever HTTP server your using in front. 
I am speaking there - https://www.defcon.org/html/defcon-23/dc-23-speakers.html#Menerick . A few of you utilizing Git may be interested in listening to what I have to say.
Or also consider joining us over on #pry in IRC. I wrote pry-macro and pry-session (and need to fix macro on newer versions of ruby...)
I have looked at this and can't figure out a way where this issue could be triggered in any form on any common rails production environment. Do you have an example of a common config that is not protected from this issue?
You might find the exercism project on github interesting.
It can't because it's not a bug in Rails.
&gt; I was thinking that I don't need more then one instance of the above class, and it's totally functional helper Make it a `Singleton` then?
Blocks allow your code to stay generic, so I would say that the opposite is true. For instance, if you want to write a library that only does one thing, you can pass off the "other stuff" to the user of the library to implement through the use of blocks. Your library doesn't need to know how it is being used, rather its use can be dictated by its consumer. 
Beat me to it again, eh? For the record, Banister here wrote Pry originally.
I can't answer the original question (why no RoundUp) but what I CAN say is that you should absolutely not use floating point numbers for currency calculations. Use fractions instead, preferably in a class that wraps it around currency knowledge like RubyMoney. 
Don't use floats for money! They are not precise! That's the mantra of several profs during the first semester and it should be the mantra in every beginners course! But it's not, instead they do the bank account examples with floats... \rant... 
Thanks for responding! Also /u/sprawn and /u/nobbz :) Can you explain to me any further why floats are less precise? Or how to implement using fractions? Much appreciated.
Every modern language has some form of anonymous function.
Good point and your response feels very rubyesque to me. I'm still wrapping my head around it all. 
It's true! I've used C# for several years and it didn't used to have anonymous functions but it does now. 
Still neat, might make use of this for a Ruby terminal game :)
Small soapbox moment: Things like 'Separation of Concerns' and 'Single Responsibility Principal' are too often treated as gospel rather than guidelines. In other words, these ideas are recommendations, not stiff rules. They help you organize code but if taken too literally they create a bigger mess than they solve. You end with crap like this: [RequestMappingInfoHandlerMethodMappingNamingStrategy](http://docs.spring.io/autorepo/docs/spring/4.1.0.RELEASE/javadoc-api/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMethodMappingNamingStrategy.html) 
Gaah, I don't know anything but I want to learn everything!! Someone point me somewhere, please!!
How hard is it to include something like Opal in a standard Sinatra project? Are there any recent good Sinatra+Opal examples out there? I have Googled a bit, but think I need someone to explain it to me...
http://blog.reverberate.org/2014/09/what-every-computer-programmer-should.html 
Way easier than you would think. [Here is a screencast I wrote on how to do it with plain Ruby + Rake](http://datamelon.io/blog/2015/static-frontend-apps-in-pure-ruby.html). If you are using sprockets or something like that, there are ways to do that too. Let me know if that answers your question or not.
This is awesome!!
http://opalrb.org/docs/sinatra/ If anything in those docs does not make sense to you, please open an issue - there's nothing like a real user feedback to improve the docs :)
No you don't *have* to do Thread.new necessarily, there are a number of abstractions that will do that for you if you use a lib such as concurrent-ruby. You are right about Array not being thread safe, you can however use a Queue, or use a threadsafe array if you want. As far as Thread.new having overhead, yes it does. But so does maintaining an EventLoop (i.e JavaScript). So it's mostly a wash, with some caveats about JS not being able to utilize multiple cores. 
http://metaruby.com/ is a new place to hang out :)
This looks promising! I like that it is Ruby specific. Definitely going to sign up for this one, thanks. 
Well it is just for prototyping. Proper designs can come later I guess.
I followed your screencast, and after some tinkering I got it working in my app. This pretty cool.
Great. Glad to hear it worked out for you.
That looks kind of "interessant" ;)
`Enumerable` is a great example of this. By defining an `#each` method that yields a block, you open the way for other methods that build on top of that. Each method is able to constrain its responsibility precisely because they can just call `#each ` with a block instead of trying to handle iteration on their own.
Never heard of Opal before, but looks quite interesting. Does anyone in here use it and can tell me if it's a great thing for production use?
Best name for a board game prototyping tool there ever was. **e:** Actually no. Squig. Squig would have been even better.
Thanks a lot for the pointer to Slate. I really loved it. I will probably be using it.
Neat. First thing I'm going to do is show this to my kids on the weekend, see what we can smash out. Looks like a lot of fun. Well done.
C#. I was thinking about getting http://www.poodr.com/, in hope that with some understanding of key ruby design ideas, I'll be better at refactoring.
What is it useful for?
Thanks :-)
Can't I just store the images in the server where the application is for the time being?
I tried it out, and it seems to work alright
I will do that, and some other perks in the works (haml support, embedded irb, etc..)
&gt; but allow anyone else to inject any other dependency (which support the .until method that is) Do you have an example of anything else that would make sense to pass in? If not, I think your just making this problem harder than it needs to be (over engineering). I'd probably just add parameters to each helper method with a timeout / interval with sensible defaults and instanciate a new wait object in each of them. 
Think I figured it out. Turns out you don't need to put Ruby code anywhere inside the Net::SSH session definition for it to make use of the connection. Just do Thread.new do Net::SSH.start('example.com','funktapus',:port=&gt;30000) do |session| session.forward.local( 9001, '127.0.0.1', 9001) session.forward.remote( 9000, '127.0.0.1', 9000 ) session.open_channel do |channel| end session.loop end end And then execute your code in the main thread. Who knew. FINAL EDIT: Do not use 'localhost' in place of '127.0.0.1' when using DRb! It breaks everything! This method works fine otherwise.
instead of a map to search words you can use a bloom filter 
Thanks for the feedback :) 
Good idea. That could be a good improvement. I (my friend) just needed a quick solution though and actually the [Ruby Gem for sentiment analysis in English with the most stars](https://github.com/7compass/sentimental) does it the same way with just the map so I figured it can't be too bad for a first solution :)
IDK why you're getting downvotes, but it looks cool to me!
Yes I am. I haven't tested the dictionary corpus that I used extensively though. To be honest I don't really like their license and I might keep my eyes open for an alternative.
Did it, also some additional features
Wish this shit was around when I had to do my wedding invites. Yeah, most people got them via email, but some people don't have emails, and so hand-written postcards it is!
I am not noticing downvotes, but this is a goofy gem anyway so I'd be surprised if people take it seriously. That said, thank you! I actually kind of want to add some more features to this but I'm not really sure what. Maybe like a brew type or something - auto drip, French press, etc.
Amazon link if that's useful: http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530
Oh I totally clueless to what you just mentioned. Can you give me some pointers to read about them?
Yeah, but without memcached: no need to setup, no need to network communication. Just a huge hash table in a same process.
&gt; (unit tests, not rspec) Makes no sense. Unit tests are a type of test. rspec is a test framework. Unless you mean Test::Unit which is another test framework. * rspec is a test framework * Test::Unit is a test framework * Which can both be used to write Unit tests (Which are a type of test along with Functional Tests and Integration Tests etc.) Always try and be as specific as possible when talking about code, packages, tests etc lest this kind of confusion snowball.
I strongly recommend [Rails 4 Test Prescriptions: Build a Healthy Codebase](https://pragprog.com/book/nrtest2/rails-4-test-prescriptions) to beginners and expert alike. It covers everything about RSpec and even some minitest with a pragmatic and clear approach. It is a must read in my opinion.
&gt; The documentation says thats what it does. So why not yo? I guess the reason is: So why not yo?
I suppose you could have something like a todo list stored with repos. Clone a repo and bring up current tasks in terminal? Idk. 
The same here. I don't see why anybody should incline to *rspec* contrary to "built-in" minitest. For our usecases it's more than enough. In addition, find the author of rspec a bit of a dumb*ss our company won't plan rely on. 
I built and published this gem this morning - if anyone has any questions/suggestions/complaints, let me know.
Exactly :)
[Here you are](https://github.com/openfarmcc/OpenFarm/blob/master/api_docs.md) PS: Thanks for that PR.
thank you! is there a class where I can just make it "continue"?
It is much simpler to work with. We were previously using popen3 with scripts to isolate dangerous ffi code from the interpreter process - `Process.fork` allows you to do that isolation, but gives you no mechanisms to really interact with the subprocess except the exit status. The two advantages are the pleasant callback system for handling the various failure states, and the exception pipe - when ruby code in the subprocess raises an exception out of the `IsoLatte.fork` block, it gets marshaled and shoved through an `IO.pipe` back to the parent process and re-raised. There's only a page of code - nothing here someone else with a basic understanding of unix IPC wouldn't figure out in an hour or so of fiddling around. But it's so cute!
This looks quite nice - thanks for sharing! One more library of the "_I hope I can remember this the next time I need something similar_"-kind :)
This is pretty useful. I've used Process.fork to run a custom web scraper on a few sites concurrently. It's pretty tedious to manage. Your gem seems to abstract the craziness out in a pretty readable manner. Looks great! When a piece of code is run in a subprocess, does it wait for the code to return before continuing on to the next line?
If you mean `IsoLatte.fork`, then yes - the internal `Process.fork` call causes the subprocess to be run, and from there both processes continue running. The internal call to `waitpid2` shortly after causes the parent process to block until the child process returns. If you're hoping to do parallelization via multiprocessing, you can use its predecessor, [parenting](https://github.com/emcien/parenting) - allowing a bunch of subprocesses (external commands) to be run in parallel is its target use-case.
Released v1.1 in response to [issue 1](https://github.com/emcien/iso_latte/issues/1). This adds the ability to supply a 'timeout' parameter, which will cause a SIGKILL to be issued to the child after that many seconds. [issue 3](https://github.com/emcien/iso_latte/issues/3) will include some improvements to that functionality - let me know in the issue if you see another approach that might be nicer.
I actually love your idea, I decided to start reading other people code to improve my skills. And starting from such a small codebase makes reading it, and understanding, so easy, thank you :)
I expect that those javascript devs aren't asset pipelining their JS and building js clients with their own build system and asset compilation, so they can use whatever they please
&gt;Would it hurt you to be a bit less blunt? Yes
If you want to do exercises and get feedback, join exercism.
Is there a beta yet? I am starting a new app and it's going to be a while in development, so would be happy to start using the beta.
&gt; know of several projects that have left it, for either ES6 ES6 was heavily inspired by Coffeescript - so I don't believe it can be called a total failure. I would use the word.. obsolete. Your point that projects are leaving it appears to support that. 
I can agree with that. Of course, the idea that Rails embraces and virtually requires obsolete technology is nothing new to anyone with real-world OO experience, but that's another (book-length) rant altogether.
Very cool but rmagick is a bit of a heavyweight dependency. Are there more lightweight alternatives?
They've made backwards incompatible changes. That alone warrants a major version. Specifically `return false` will no longer cause callback filters to stop processing. These changes are not mentioned in the article. https://github.com/rails/rails/pull/17227
If you're new to testing in general, I'd encourage you to listen when people tell you to WRITE TESTS FIRST. A test written in the "spike, test, rewrite" workflow is fine, but it basically is a test that your implementation works the way you think it does. Write the test before you write any code, and the tests will be the first consumer of your API, and your code will be the better for it. This can be a hard habit to get into, especially when the code you're testings seems really simple, so one of the ways that you can actually learn this habit (and let your tests guide you to a better, more SOLID architecture) is to write tests at your lowest level of knowledge. (A lot of times that's a pretty high level integration test.) Let's say you're writing a web form that sends an email. You know that it should take an email address and a message body and it should send an email with that message body. Write a test that describes that behavior. What's the first thing we need to do? We need to have a multipart form request that supplies an address and message text. Write a test that describes that behavior. And on and on, until you have only the first test that you wrote still failing. Tweak as necessary, voila! 100% coverage. This is basically more BDD than TDD - but when you're new to the practice of "test first" it can be much easier to wrap your head around writing failing tests for features you understand as opposed to methods you don't.
not sure if it works the same way as selenium, but if you can return the array of objects with that same class you could select it that way.
rails doesn't require coffeescript, it's just the default option. And while Coffeescript will soon be obsolete, ES6 wasn't approved until Rails 5 development was already started and isn't in all major browsers yet (including safari which dominates the mobile market in the US) so while CS is being obsolete fast, I wouldn't say it's obsolete yet. Plus 
http://codereview.stackexchange.com/
The blind faith in CoffeeScript is down to DHH's obstinacy and underlines how Rails is tied to Basecamp's needs. I like CoffeeScript but its usage is starting to tank while TypeScript is seeing huge adoption and of course there's Opal which would / should be a perfect fit.
This looks so cryptic for a newcomer. You forgot to mention rescue statement at the end of method body.
Sinatra is fine for simple APIs, and basic 1- or 2-view web apps. As soon as you get more than that, you might want to look at [Padrino](http://www.padrinorb.com). It's essentially "just" Sinatra with a bunch of helper scripts and some conventions around laying out the files in your project.
I just need 2 pages as of now... But thnks for the info.. 
Not to my knowledge, but hopefully soon - definitely before the actual release.
`foo.bar.baz` is an example of "method chaining", and it only makes sense if it makes sense to call `baz` on the result of `foo.bar`. As a simple example, consider the task of checking how many bits are set in the binary representation of a number: n = 1337 binary = n.to_s(2) # =&gt; "10100111001" set_bits = binary.count("1") # =&gt; 6 This operation is sufficiently "contained" that it makes sense to do it all in one go: n.to_s(2).count("1") # =&gt; 6 Note well that calling the methods separately is not at all equivalent: n.to_s(2) # =&gt; "10100111001" n.count("1") # =&gt; NoMethodError: undefined method `count' for 1337:Fixnum
Coffeescript was great in it's prime and it's still not a bad choice in a lot of ways. We only decided coffeescript might not be needed when it became clear JS was going forward with some pretty solid syntax for future releases. Coffescript helped inspire those changes btw.
its* it's is short for "it is"
`/Add and Continue/` is a [Regexp](http://ruby-doc.org/core-2.2.0/Regexp.html), or regular expression, used for pattern matching against strings. In this case, Watir will look for a button whose text matches the pattern, which is "containing 'Add and Continue'". `'Add and Continue'` is a literal [String](http://ruby-doc.org/core-2.2.0/String.html). If you'd used `$browser.button(text: 'Add and Continue')`, Watir would look for a button whose *exact* text is `'Add and Continue'`; such a button doesn't exist, so it will not find one. However, Watir will be pretty slow to find the button if you use a regexp, in my experience. You're better off trying something like `$browser.img(alt: 'Add and Continue').parent`.
Ah, alrighty then. That makes a lot of sense. Thanks for your help and happy cake day!
Thank you! But I've actually given up and moved the app to Python instead. I hope it isn't as crippled as Ruby. I'd like to come back to Ruby thought, love the simplicity. 
I know pedant.
Nice work! It somehow reminds me of an old thing I did https://github.com/thbar/petite-lettre to communicate between processes. One question: which rubies does this work with? MRI? JRuby? RBX? Maybe adding this to Travis and sharing the matrix would let people know. Otherwise great, I'll definitely try using it!
Oh, thanks. I hadn't even noticed.
this looks like an awesome resource, thanks!
if you have issues with rvm, homebrew (on mac) worked better recently for me. Also here is just an example of what I meant: https://github.com/thbar/kiba/blob/master/.travis.yml
I don't know about the innards. I was just using information from an exchange of tweets I had with one of the rust core guys. https://twitter.com/steveklabnik/status/608778665825083392 . When I asked about specifics he wasn't super familiar with the codebase though. I didn't end up discussing it much further to dig in.
By the way, I just remembered this because I need to create a report about a Rails project. It would be nice if I could also copy and paste .gemspecs into it (spec.add_dependency, spec.add_development_dependency...).
You are effectively designing an API into your object, `MyClass`. You get to decide how it will be accessed from outside. There is no convention because _it depends_: * What is `my_object`/`MyClass`? Is it... * a reliable I/O resource like `File` * an unreliable I/O resource like `Net::HTTP`? * a data structure like `Hash`? * an abstract representation like `Enumerator`? * What do `first_method` and `second_method` do? * are they idempotent or do they have side effects (e.g. change state)? * are they independent or do they need to happen in order? * are they going to return values or are you going to retrieve it? The space of possibilities is quite large. If you'd like some specific advice for your `MyClass`, explain a bit more about what it's supposed to be and what you intend it to do. 
Thank you all. Indeed I am a newcomer so this is all new material to me, but I will study this. Thank you all so much. What I meant by continue was to simply make it go to the next line down.
Oh thank god I was bit in the ass more than once by this behavior.
Jruby does not appear to support `fork`, so no go there. I haven't been able to get any others working, and nothing will be able to bundle install that doesn't support C extensions (the `segfault` gem isn't required for functioning, but it is an important part of the tests, since there's otherwise no good way to simulate that terminating condition). If anyone else is able to get the tests passing on another ruby, I'd be interested in pull requests on the build-matrix. I went ahead and added 2.2, 2.1, 2.0, and 1.9 for now; I thought 1.9 especially was worth testing against.
Your examples are not all equivalent. Two are: my_object.first_method.second_method means exactly the same thing as: my_object.first_method. second_method That is just formatting preference, these statements are identical, it's just a question of style. Like using parens or not in a method call. However my_object.first_method my_object.second_method is not the same thing at all. In this last example you are calling both `first_method` and `second_method` on the same object, `my_object`. However, in the first two examples, `my_object.first_method.second_method`, you are first calling `first_method` on `my_object`, and then calling `second_method` on _whatever is returned by first_method_. Only if my_object.first_method returns my_object are you still calling `second_method` on `my_object`. It requires the API to be written that way to support it. It is a convenient and way to write an API for certain sorts of things -- ActiveRecord uses it well for instance. It can also turn into a mess if you try to write an API in that style but don't know what you're doing. 
Autovivification is conspicuously absent. auto = Hash.new { |h, k| h[k] = Hash.new &amp;h.default_proc } auto[1][2][3][4][5] = 6 auto #=&gt; {1=&gt;{2=&gt;{3=&gt;{4=&gt;{5=&gt;6}}}}}
Hey, I didn't know you could apply splat operator to Range!
What are you asking? What templating engine to use or?
I need a good template and a bisic web service module... I've a two page search and display requirenment
I need an easy to use html template engine.... I'm new to web development aspect of ruby...
It duplicates this one somehow: https://www.reddit.com/r/ruby/comments/3bk73m/squib_a_ruby_dsl_for_prototyping_card_and_board/
What framework are you using? The most common engine is probably `erb` which is the default in Rails and is a content agnostic templating engine (it knows nothing about html for example). For html specific engines, `haml` and `slim` are very commonly used. `slim` is my personal preference for html templating since it is faster than `haml` and IMO has a cleaner syntax. 
Seems cool, there is a limitation, however. I brew my coffee by weight. This helps me control the ratio of grounds to water (e.g. 19g coffee, 270g water). As it stands, I can't use this gem, unfortunately. Is it intended for Bunn style coffee pots only? French press is another viable method for brewing a full pot for the office -- and, honestly, it's going to turn out much better tasting anyways. [/coffee snob]
How are the sizes of the buckets bounded?
okay thanx...
This is awesome feedback. A "scoop" as I use it here is 1 tablespoon. It's intended for auto-drip coffeemakers as that's what we have in our office. French press coffee is better, I agree, but at my place it is not a reality. *Edit: I can't believe I didn't finish that sentence It sounds like I need to think about promoting the ratios to a first-class object and adding a mechanism for weights and measurements.
So what you're describing is something similar to what VB Script used to have, which was an "on error resume next" statement. This was a bad statement and should generally never be used. Here are some articles about why: http://www.vbforums.com/showthread.php?448401-Classic-VB-What-is-wrong-with-using-quot-On-Error-Resume-Next-quot Someone was fired for this: (it masked an actual error, which caused reports to display wrong information for months) http://www.pcreview.co.uk/threads/on-error-resume-next.1007595/ This stack overflow answer explains it well: http://stackoverflow.com/a/11596064/251788 Bottom line is that - you should understand what your code is doing. Ideally, you should handle any edge conditions by preventing them before the error happens. If the line you're running is loading a text file, and one possible outcome is an exception - look for an alternative method that can check for that condition. For example, in Active Record, .save! will raise an exception if there is an error, but .save just returns false instead and then lets you examine the errors. Finally, if you really can't do what you're trying to do without calling a method that can potentially raise an exception, then you want to rescue that SPECIFIC exception. jrochkind's answer is close, but I would take it further, I would not only limit it to the specific exception class I would also verify that the message is what I except it to be: begin load("....something....") rescue TheExceptionClassThatIsBeingThrown =&gt; e if e.message =~ /Volume is not mounted/ || e.message =~ /File Not Found/ # do something or nothing else raise e end end You want to make sure you're only rescuing errors you expect. And if there is a different error, you re-raise it.
1. You will need 3 things: Ruby, RubyGems, and Bundler. The first 2 can be installed using RVM (http://rvm.io) or Rbenv (http://rbenv.org/) if using Linux or OSX. If you are using Windows, which I highly, highly suggest not trying (Use Vagrant and set up a Linux Dev Env), you can there is a RubyInstaller on Ruby's website. You can install Bundler by running `gem install bundler` after RubyGems is installed. Bundler will manage you libs, or gems, via a Gemfile in the root of your Rails app. 2. If you have your EC2 instance fully configured, you can use a library called [Capistrano](http://capistranorb.com/) to deploy your app. If you haven't configured your EC2 instance, I highly recommend using Electric Beanstalk to spin up a fully configured Rails env for you. If you are not married to AWS, I even more highly recommend using [Heroku](https://www.heroku.com/). 3. Paperclip is a gem that manages file attachments for ActiveRecord, Rails' ORM. It allows you to easily add file attachments to Models, process files when uploaded, and even has hooks into popular file stores like S3.
As in my other comment, I second /u/cornbread's suggestion of deploying to Heroku first. It actually uses AWS EC2 instances so your code will be running on AWS. Here is how to get started: https://devcenter.heroku.com/articles/getting-started-with-ruby After you get feel for Heroku, you are welcome to create your own EC2 instance and configure it.
I'm in that channel all the time and those guys are some of the most helpful and patient people ever. I highly doubt they kicked you out for just that. 
Works perfectly. Thanks!
Hi there, I am the author of [Phusion Passenger](https://www.phusionpassenger.com/), a popular Ruby application server. We recently published an end-to-end documentation for deploying an app on AWS using Passenger. Our documentation is always kept up to date, and it covers *everything* related to deploying an app to production: - Launching an instance on Amazon (with screenshots!) - Installing Ruby - Installing Passenger - Installing Nginx or Apache (and whether you should pick Nginx or Apache) - Uploading your app to the server through Git - Setting up your app with Passenger - Deploying app updates - Automating app updates with Capistrano Some people here recommended Heroku. Our walkthrough *also* covers Heroku. Please try it: https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/ It seems you may already have followed someone else's instructions. The walkthrough we wrote assumes a clean install, so you may want to launch a new instance. I've tested the walkthrough a couple of times last week, and if you follow it exactly, everything should Just Work(tm).
This was my thought, too... For example: sqrt_lookup = Hash.new { |hash, key| hash[key] = Math.sqrt(key) } Why not just make it a method, and use memoization?! Something along the lines of: class Foo def initialize @sqrt_cache = {} end def my_awesome_method sqrt_lookup(49) # =&gt; 7 (calculated) sqrt_lookup(100) # =&gt; 10 (calculated) sqrt_lookup(49) # =&gt; 7 (CACHED!!) end private def sqrt_lookup(key) @sqrt_cache[key] ||= Math.sqrt(key) end end
It's 'safe', but it produces a race condition; after timing out, it's possible for the child process to have already terminated before the parent tries to kill it. That's what the [rescue](https://github.com/emcien/iso_latte/blob/master/lib/iso_latte.rb#L109) of `Errno::ESRCH` is for (that's what `Process.kill` produces if the target process doesn't exist). But it's possible you meant something else by 'safe', or that I'm misunderstanding some bit of ruby or unix - did I answer your concern? Edit: In particular, `Timeout.timeout`'s callback cannot execute while `waitpid2` call is doing any work - the GIL keeps that particular tangle from being an issue. If you take a look at the [source](http://ruby-doc.org/stdlib-1.9.3/libdoc/timeout/rdoc/Timeout.html) for `Timeout.timeout` you'll see that it's not using any signals, and is a pure threaded sleep approach. I was initially worried about the thing I think you are concerned about, but there's no alarm signal involved.
Wow...so much wrong with this post. 
Ruby != HTTP servers
Presumably your critique applies to open source in general? The fact that some people are incapable of determining thesmelves the quality or future maintenance risk of a piece of third-party open source code -- is the fault of those people, not of an environment where it's easy to share code. That's the environment we've got (and it's got *tons* of upsides too), a neccessary part of being a modern programmer/software engineer is not just blindly using whatever you find on the internet, but making reasoned decisions about code quality and dependency risk. If you are just mad that you have to make these judgements instead of being given on a platter a curated list of high-quality well-designed code libraries that are completely free for you to use and you don't need to exersize any critical judgement of your own.... sorry? But we've never had that? There certainly are a lot of beginner programmers who aren't very good at this kind of 'due dilligence', it's true, and don't even realize they ought to be getting better at it. Especially in ruby and rails land. What I might blame is not the ease of sharing your code, but the narrative propped up by too many tutorials that developing a rails app consists of just plugging in a bunch of already written gems by other people without having any idea what you're doing. Rails is not WordPress. Heck WordPress probably isn't even WordPress. 
I tried to join the channel after few months and was either alrady banned by mask or automatically kicked, I don't remember exactly. It's AKICK I assume. And I don't care, since there is no fun to talk with people who think *Knut is about ASM* )
Have a patience and just wait for Rubygems v.2 by me or another guy. This post is just a pre-announcement. RubyToolBox gem tracking is suspended for years AFAIK. And static code analyzing is yet too far from any correlation with real quality and value of code.
Please attend university so you'll see how masters do things. Instead of thinking that you can be lazy sitting on sofa and people around you should search for the best pieces of world to give them to you.
I don't need patience myself, because I have no confidence in the usefulness of your plan or your ability to execute, and don't agree that what you think is needed is what's needed. But good luck with that. And guess what, there's no gate keeper to stop you from trying. :)
Whatever you say. Link to your moms boobs photos or shut up, you're to noob to discuss a topic.
Um, that would seem to apply exactly to your whining about how you need to do work to find the high quality rubygems, instead of having others deliver them to you. 
You are right, but he can just open google.com and find my "mll". He didn't bother, because his only motivation is trolling and wasting time instead of research. This is what modern Rubyist is. Yet another "wow, Hash.new can accept block!" copypasta gets 50 upvotes on the frontpage, while start of serious discussion was filled by shitty single-line comments like "nah, go away".
&gt; This post is just a pre-announcement. I think your marketing would be more effective if you were to lead with the value you plan to deliver rather than how disappointed you are with the names chosen by the creators of gems.
Perhaps you aren't very good at starting a serious conversation. A bunch of whining, using profanity, taking a hard-line position without recognizing any trade-offs or nuances, combined with telling everyone else how you're smarter than they are, is usually not effective. None of your contributions look very much like "serious conversation" to me. 
I still use Ramaze in production. Ramaze does not need any updates. It does the job well for me. 
Thank you for your response! So, a newer version of Ruby wasn't installed with Ruby Mine?
I'm starting to think MS 'hands' things to developers too easily, or it could be my ~20 years using it above anything else. I haven't gotten anywhere with Ruby in two days. When trying to download RVM, I get sent on several paths to download other things, which lead to others, which aren't really clear *how* to download/install/use. I'm looking at rbenv right now, so maybe that'll be easier/quicker. Is there a doc somewhere that is something like, "How to get Ruby up and running on your Mac, Step-by-step" that assumes zero knowledge about the environment? For instance, someone pointed out that when I ran the gem install from the terminal, that it was hitting a preinstalled version of Ruby (which I had no idea existed), and not the one installed with Ruby Mine (there is one installed with that, right?). I'm completely lost, and frustrated. I just need an entry point with this thing, then I'll be able to figure most, if not all of the rest of it out on my own. I feel like an idiot.
Why should any marketer bother with such audience, that voted only once for a page-long comment left by /u/jrochkind and seven times for some nonsense about cellphone. They are just hopeless.
Let's find out. /u/nakilon.butthurt? =&gt; true
I don't think that reddit votes are a very good way to take the temperature of a community, given that most people who use reddit don't vote.
Rubymine is just an IDE; it does not package a Ruby distribution with it. You can point to the Ruby SDK you want to use from the preferences menu (should default to the rvm default).
(After some thought, I removed all the 1.9 syntax - it's compatible with MRI and REE 1.8.7 now (both are tested in travis).
http://installrails.com/
`Timeout` works by using `Thread#raise` on the main thread which can have all sorts of unexpected consequences. For example, it can cause a completely unexpected exception to be raised inside an `ensure` block which causes it to abort, often leaving dangling resources or unclear state. It may be that `wait`'s internal implementation is safe from this type of issue but as a general rule, I recommend against using the `Timeout` module for this type of thing because `Thread#raise` has such problems. 
Like others said, just make a system call. One liner. `play` from the `sox` package is a safe bet, and is linux/mac/windows.
Sounds like [this](http://i.imgur.com/TwjLmqe.jpg) might be for you.
Consider emailing the maintainers for a full refund.
It's good as a general rule of thumb to be wary of Timeout, but I think nevinera just explained why it's appropriate here! There's really no way to timeout on waiting on an external process _except_ a guardian thread, unless someone knows a clever unix trick of some kind. 
Well, someone woke up on the wrong end of the spectrum.
&gt; There's really no way to timeout on waiting on an external process except a guardian thread I'm not sure what you mean by a 'guardian thread' here but another simple way to do this if to spawn a separate thread to hold the call to `wait` and only monitor it from the main thread. This allows you to avoid the calls to `Thread#raise` or `Thread#kill`. 
You don't need to use a blocking wait, you can poll the status of the process in the 'process watcher' thread instead, watching also for a timeout signal (from the main thread in the watcher thread, implemented however you wish). The 'process watcher' thread can safely terminate the process in the case of a timeout. This also allows easily implemented async process management instead of only blocking.
Yes, it's entirely an advertisement for their books and consulting business.
Thanks for the extra resource!
This sub is 90% blog spam unfortunately
You'd have to find out where sox is installed on Windows for it to work, since things aren't in PATH most of the time. And if requiring something else is necessary, it would probably be easier to use a Ruby library instead of something external.
At least most of them try to provide something. This one was literally, "HEY WE DO REACT NOW!". That being said, Arkency in general is unimpressive so it doesn't really matter.
Depends on what you define as practical. Is it not practically useful to be able to generate even a skeleton? There are practical uses of this type of thinking, they just get increasingly impossible as you try and approach a complete solution.
Thanks for clearing it up, I didn't know it works on the output of the previous method :)
I was sure It's just a fancy way of calling multiple methods. Thanks for clearing it up :)
And if it doesn't work, at least you learned something along the way. I guess I'll follow the progress of this for a while.
is just a polish agency, they have to do marketing :)
I used to code in visual studio for a long time and transitioning to Ruby was frustrating at first because it meant relearning lots of basic Unix things. You are not an idiot at all. But yes, over reliance on an IDE does insulate us from low level skills. pm me if you are still facing difficulties with Ruby. 
I bought their react book on rails...unfortunately it's basically unreadable due to the appalling level of english. And it cost $40 !!! It's the most expensive and most useless e-book i've ever bought. Shame on them for charging $40 for an e-book that's written in barely intelligible english.
Take your spam elsewhere. If you wouldn't post it under your normal reddit account, don't post it at all.
Sorry, I do not to attack you nationality or gender. That was not my intention. I have a lot of polish friends, and they are super professional guys. I just want to tell that you guys are an agency from Poland. If you where from Germany, or France, I will say the same. Again, I'm sorry
&gt; Not many reasons in there. "It's awesome" is given, I mean, if it'd suck they wouldn't use it. You're right. The original post lacked this information. I have now updated the post with a link to our other blogpost which explains the reasons in a more detailed way. &gt; Never used react, looks interesting Many people enjoy the React.js koans - https://github.com/arkency/reactjs_koans (disclaimer - we created it), you can start with zero React knowledge and learn the basics very quickly. Give it just 10 minutes and you'll see :) &gt; what's now the real point of their blogpost? To advertise their books? Looking at this post out of the broader context it may look as just a really bad books advertisement. This post was too self-promotional and as it is shouldn't be posted here. Sorry about that. The bigger context is that we've been posting a lot about React.js (also here). Many people were interested in our journey to this technology. Some of them bought our book, some of them subscribed to our mailing list. There are also some who contacted us regarding our React help in their projects. To put it differently - there are people who are actually interested in our React story. My mistake was that instead of just posting it on our blog and/or sending it to our mailing list, I also submitted it here. As for advertising the books. Yes, we do that. There are multiple reasons: * Help people solve their problems - we spent &gt;2000 hours on just React.js work and the book is a condensed knowledge, so that you don't need to spend that much * Thanks to the people buying the book, we can blog more and (we believe) deliver more value. So far, we wrote &gt;120 blogposts on the Arkency blog. * The ads help people know that the books actually exist. BTW, so far, 448 people purchased the book. 11 people asked for the refund. The refunds were mostly due to the bad English (which has now been improved in the last update and it's now something that native speakers help us with). I can understand that the ads may be sometimes annoying. We're in constant search for finding the good balance. This post was a bit too far with the self-promotion aspect. Thanks for your comment! 
+1 to this reply. As jr stated, there is a lot going on here. If you really want to tackle this project, try breaking this up into small pieces and figuring out how to make each piece work. I see web crawling, data science / machine learning, data storage, event(ish) responses (more like a sever endpoints that act as callbacks for various APIs). So... all said, figure out what tool makes each of those things easiest.
The difference is Rails is a full featured application framework. You can strip it down if you're knowledgeable and know exactly what you need, but for the most part it comes ready to go with everything to make a basic application. Node is a bit different. What you have is a group of modules that you require with each project and through those modules you create an application framework. You can think of them as gems, node even has its own package manager(npm), which is very much like bundler. So in essence you can use node as much or as little as you want, it's not like Ruby on Rails. You can pull in modules to do everything you'd do in Rails, each of those would be like a core Rails module(ie. ActiveRecord, ActionController, ActiveSupport), but not part of a larger package. This is mostly because JS was built to run in the browser, so think of Node as if it were a Ruby run-time(MRI, JRuby, Rubinius). So to answer your question, yes Rails could be used to do something like that. However I wouldn't use Rails for something so simple, unless you want to run it within an web app. I would likely use Plain Ruby and include the gems that might be helpful, such as nokogiri or maybe [mechanize] (https://github.com/sparklemotion/mechanize) . You could also use something more barebones such as sinatra. Unless you want the whole MVC framework Rails really isn't necessary.
Isn't low quality the top from yesterday? You don't expect everyone to refactor their seemingly good ideas from last month. Or rename them when another trend comes along and some bloke confuses it? Today's yay gems will be the nuisance of tomorrow. It's called progress ^^
Do you patch it? I mean there is always a new zero day...
For me the deciding factor are line characters. We use 80 at work so you can chain all you want until you hit the line limit. In my experience that is a bigger factor in readability.
Wondering about `&lt;&lt;` - why double arrow, and not `&lt;` like in inheritance?
Ruby is [Turing complete](https://en.wikipedia.org/wiki/Turing_completeness), so of course it's *possible* to do with built-in libraries! ...On the other hand, this would be very complicated and fairly pointless exercise, so I wouldn't recommend trying :) Edit: For example, [this](https://github.com/cohena/RAFL) looks like someone's attempt to decompose WAV files, but I don't know if itactually *plays* them. And [the code](https://github.com/cohena/RAFL/blob/master/RAFL_wav.rb#L307-L374) looks horrendously complicated to understand! Also, Gosu has some music-playing capabilities (see `Gosu::Song`), but I wouldn't be surprised if that just makes system calls under-the-hood.
Could you share the introductory level stuff you are reading? I guess searching "ruby symbol vs string" is a good start
The main place-- and by main I mean most frequent-- you'll see people use symbols is in the role of a hash key. For example, say I wanted to represent your thread. Yes, this one. h = {:submitter =&gt; "magical_poop", :title =&gt; "Good documentation on Symbols for a beginner", :subreddit =&gt; "ruby", :text =&gt; "Hi, I'm very new to Ruby, and pretty new to programming in general. I'm having a little difficulty understanding symbols based on some introductory level stuff I'm reading. Is there any good documentation you can help me with to get a better understanding of what they are, and how they are best used?\n\nThanks.", :comments =&gt; [] } Catch my drift? It confuses people because there's no great explanation for what they are, because, functionally, they're just cool-looking strings. (Under the hood, though, there is a difference: Just like a Fixnum, a Symbol never dies. All those strings in the above hash will get garbage collected eventually, but the symbols won't. The more you create, the more memory they take up.) &gt;and how they are best used? Slow down with that 'best' stuff. This is Ruby. 
Good idea. I've been going through the introduction to Ruby through The Odin Project. The stuff I've read so far are: http://tryruby.org/ and http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html
Interesting. This helps me a little bit. As the other poster said, and based on what you've helped with, it seems like "ruby symbol vs string" would be a good start for me. Thanks!
[This video](https://www.youtube.com/watch?v=mBXGBbEbXZY) is not a bad intro to Ruby symbols.
Honestly, set aside your curiosity if you can and keep marching forward. Just about any method that needs a symbol for a parameter (other than Hash methods) will take a string instead and just convert it via #to_sym.
Looks like a font issue.
I think a bit of clarification is in order: * Rails is a framework for Ruby for creating websites. * Node.js is a runtime environment for JavaScript, allowing JavaScript to do much that any other scripting language does. You can use Node.js to create a webserver, and then an MVC architecture for your server-side REST API (of course there are already libraries for this so you don't need to re-invent the wheel), or you can use Node.js to build a curses-based terminal application, or pretty much anything else you can think of. Point being, don't think of Node.js for specifically making websites, that's like saying the same of Ruby.
If you would say the same about companies from Germany or France, then what's the reason for mentioning the nationality here at all? Does it change anything in the discussion? Of course not. But you mentioned it and now some people feel sad. If you really didn't mean picking on nationality then make sure next time you're more careful about that. 
Me too!
Ever see CPAN? CPAN isn't going anywhere and neither is rubygems. There needs to be some more sorting options perhaps on the web-ui, but other than that I see no problem what so ever.
I'm working with TopTal for last year and I'm really happy with them. Most of the clients are US based, but they are flexible enough with working hours overlap that you can work from EU timezones. Hourly rates are in $20-$60 range but you basically choose how much you want to get paid. http://www.toptal.com/#get-tested-engineers Disclaimer: That's a referral link, if you mind just type the url directly
is it per hour or in a per contract basis ?
No problem, keep in mind that they have an extensive application process that include four interviews and it can take a while (3+ weeks) to get that done but it's definitely worth it.
There isn't too much to say about them. The basic idea is that while a String is used for "data", for textual data that maybe was input or will be output to the users (or from/to a file, etc) -- a "symbol" is like a unique token, that's used internally in your program to indicate something. Some languages don't have separate "symbols", they just use Strings for both things. Ruby tried having separate 'symbols' to separate these things. But it's up to the programmer (or the programmers of the libraries you are using) to use Symbols this way, they are just a convention, really. If you just google "strings vs symbols" you'll get more people trying to explain this in different words, some of which might click for you. :)
don't know the OP but I'm a contributing author. I came to see if the bundle had been mentioned here and obviously found this thread. I wonder if it would feel less spammy if the OP had an actual history of contributions. I've posted links to my stuff here before and had people happy and/or annoyed but most of the time I write articles and just add at the end that there's a relevant book/product of some sort. I definitely don't want this reddit to be a list of product links so :thumbs_down: Unrelated, here's some more awesome "spam": it's Avdi's birthday and he's having a sale on some great Ruby stuff too http://devblog.avdi.org/2015/07/06/birthday-sale/ 
Aha, thanks! 
Actually... technically, that should really say "if `A` is in the `ancestor` chain of `B`" since this method works for modules too: [1] pry(main)&gt; module Mod; end [2] pry(main)&gt; class WithMod; include Mod; end [3] pry(main)&gt; class WithoutMod; end [4] pry(main)&gt; WithMod &lt; Mod =&gt; true [5] pry(main)&gt; Mod &lt; WithMod =&gt; false [6] pry(main)&gt; WithoutMod &lt; Mod =&gt; nil [7] pry(main)&gt; Mod &lt; WithoutMod =&gt; nil [8] pry(main)&gt; WithMod.ancestors =&gt; [WithMod, Mod, Object, PP::ObjectMixin, Kernel, BasicObject] [9] pry(main)&gt; WithoutMod.ancestors =&gt; [WithoutMod, Object, PP::ObjectMixin, Kernel, BasicObject] ... Feel free to submit an update to the ruby docs, to make this clearer :)
I find it funny that there seems to be an upvote/downvote battle on this submission and yet no relevant discussion. Thanks for your work [/u/apotonick](http://reddit.com/u/apotonick) Upvote from me!
Reading through Nick's post, I'm not quite clear on why I would use reform. It seems to solve a problem, but I don't know what it is and so I don't know why I would invite this kind of complexity in to my app.
As I mentioned in the post, certainly lots of it comes from plugins, you're right. I might be able to compile the plugin list if that would add to the post, but they're really standard within the Rails-based Vim distributions that I've seen out there
I highly recommend starting with concurrent-ruby for your ruby multi-threaded concurrency needs: https://github.com/ruby-concurrency/concurrent-ruby
This tutorial takes you from building a simple CLI app from scratch and then releasing it as gem. It shows the "big picture" of building a functional CLI app: [Using OptionParser in Ruby CLI apps](http://blog.excelwithcode.com/option-parser-in-cli-apps.html).
I actually think it's less overwhelming than Celluloid. But it could maybe use some better docs/tutorials demonstrating that. Celluloid has been around longer, and has caught on, and there are resources about it. But Celluloid is actually pretty complex, with lots of gotchas if you aren't careful. 
He recommends Jim Gay's [*Clean Ruby*](http://www.clean-ruby.com/) book as core material. That book is one of the dozen or so books I've read in my career that have really made me profoundly rethink the way I develop software, especially in Ruby. I've been writing software with the expectation of getting paid for it since 1979, in a few dozen languages, on more different projects and types of projects than I care to think about now. Read the book, and heed what Adrian says in this blog post. Your schedules will thank you for it.
I think this post is a missed opportunity. It seems to be directed at people already familiar with reform's internals. If I'm any example, this sort of post isn't going to attract new users to reform. A comparison to alternatives would be good. Better examples would be good too.
Nope, I'm recommending that OP take a look at Celluloid-based technologies in addition to their EM research.
Using modules and include/extend is not what is normally called "composition" at all. It is in fact a form of inheritance. Composition is usually contrasted with inheritance. https://en.wikipedia.org/wiki/Composition_over_inheritance It may not be immediately obvious that module mix-ins are just a form of inheritance, but it's more clear when you recall that two elements are related by composition when object A "HAS A" Object B, rather than when object A "IS A" Type B. Composition is about one object having a refernece to another, rather than inheriting code from a class or module. What is illustrated in OP should not be called "composition". It's hard enough to communicate about code design without using words differently than they are generally used. 
&gt; having your controllers serve your API It's unclear what this actually means. Use separate controllers for your API? Sure, I do that often. As for the Grape comment, not really following it, Grape is just a different DSL for defining controllers. &gt; your models choosing their way of representing for an API Common pattern, see AM::Serializers and many others. &gt; polluting your models with callbacks I don't buy this one at all, if you want to use pub-sub or something else for `after` actions, go for it, but there are many more useful callback than just `after` and 'decoupling' them is often not possible (things that need to occur within the transaction boundary, for example). &gt; having code in views Agreed. 
Yeah, thanks! Ruby community at its best: If it's not a fully-understandable, step-by-step introduction to a complex topic, it's automatically bad, too complex, and the author sucks!
The two are often mixed because it's very common for a `module` to be an API layer that is backed by another object which is inserted into the composed class by the module inclusion. In other words the 'has one' relationship is there, but often 'hidden' by the module. 
[If you're going to use Ruby to build CLI apps...](http://godlessmom.com/wp-content/uploads/2015/03/youre-going-to-have-a-bad-time.png)
Why is that?
Seems a little like the Boy Scout method of coding (leave every code base cleaner than you found it), though admittedly the Boy Scout method leaves off where the situational awareness described picks up: understanding business and technical pressures to inform your solutions.
I think that benefits the learning experience, though. Saying, "It's not *my* problem" is defensive and scornful even more so than the boss. He's scolding a petulant child and showing the child why petulance goes punished at the same time.
&gt; &gt; having your controllers serve your API &gt; &gt; It's unclear what this actually means. Use separate controllers for your API? Sure, I do that often. As for the Grape comment, not really following it, Grape is just a different DSL for defining controllers. Yeah, I had trouble with this part as well. I think a better example of the problem would be helpful. 
The only case this doesn't cover is intentional indentation throughout the heredoc, and then you're limited to some beginning-of-line delimiter like the pipe.
So, I'm fairly new to ruby, but I'm assuming that the point of these casts is to show you the more intricate things about ruby through solving problems that you may or may not encounter in your work? I don't particularly see myself needing this in my daily work.
Absolutely! If you're gong to do something, do it right, no matter what you're doing. 
Try using parenthesis when using the || It's possible that it recognizes or as a differing control structure but it doesn't recognize || in that fashion. So if ( option1 || option2) elsif (option3 || option4) else see if that helps?
I'm getting the same errors when I write it like: if choice.include? ("north") || choice.include? ("restroom")
You need to remove the spaces before the parentheses: if choice.include?("north") || choice.include?("restroom") 
Removing the space worked. Thanks!
This isn't treating the developer like crap. Treating the developer like crap is about making them work longer hours for no extra pay. Treating the developer like crap is expecting more raw output than is reasonable to expect. Treating the developer like crap is telling them that they're replaceable and adding unnecessary stress. Reprimanding a developer for being unprofessional and catty is not treating the developer like crap. If you remark on poor code quality to a seasoned developer, they don't go playing the blame game. If the same exact remarks are made to a green dev straight out of college, he's going to get defensive. That doesn't mean the remarks were offensive; the defensiveness of the developer is more relevant to the developer's experience than of the boss's tone. It's simply human nature to be defensive and egotistical about workmanship. Code critiquing is necessary, and yet most new developers (or even most developers, sometimes...) are going to get defensive about it. The maturing process is necessary and unnatural. Entire reputable books have been written about it. Not all experiences can be pleasant, and often the best learning experiences about how to work in a professional environment are quite negative. This isn't optimal, perhaps, but it is necessary. In other words, I would completely agree with you if the boss were attacking the developer in the first place, not the code. But the boss was attacking the code, and it's simply not pragmatic to say that making negative critiques about workmanship is necessarily antagonistic.
https://github.com/bbatsov/ruby-style-guide#parens-no-spaces
What really stings is when you go the extra mile to fix the flimsy wires on your own only to be told that the flimsy wires are the whole point of it, then they go with a version destined to break when circumstances align against it.
I wonder what the reasoning was behind that; doesn't seem very "principle of least surprise" to me.
ISE?
 connection = get_connection and data = connection.get_data is equivalent to connection = get_connection data = connection.get_data if connection whereas the superficially similar data = connection &amp;&amp; connection.get_data is equivalent to if connection data = connection.get_data else data = nil end The reasoning is that `and` and `or` are intended to connect statements (having the least precedence of any operator, including assignment), while `&amp;&amp;` and `||` connect expressions. Or, to put it another way: `&amp;&amp;` and `||` are for calculation, whereas `and` and `or` are for flow control. Of course, given that the only thing that is different is precedence, with some parentheses you can use either for either job, but now you are really violating the principle of least surprise, since someone familiar with Ruby idioms (or Perl ones, for that matter, given that this was inherited) now has to think about the meaning: (connection = get_connection) &amp;&amp; (data = connection.get_data) data = (connection and connection.get_data)
Passenger author here. Many tutorials on the Internet about Passenger are either outdated or incomplete. I recommend that you start over again on a clean server and follow our new, official documentation: www.phusionpassenger.com/library/ You should follow the deployment walkthrough. It covers everything, including launching a server on Digital Ocean or AWS, installing Ruby, setting up users, installing gems, installing and configuring Passenger, etc. Unlike third party tutorials, ours are always kept up to date. It is important that you start over on a clean system, and pretend like you have never followed other tutorials before. If you follow our tutorial exactly, with iur supplied demo app, it *will* work. 
When you're new at a language it's generally a good idea to use an IDE with type checking like RubyMine. I prefer writing my code in Atom but RubyMine saved me a lot of time in the beginning. 
I would recommend to stay away from Swing or JVM in general, as JVM apps never truly look or behave like a native application to host OS.
I think you have the answer to the main question elsewhere but another comment on your code: There is no triple-quote operator in Ruby. What you have works but it's doing something else: `"""&lt;string&gt;"""` is the same as `"" + "&lt;String&gt;" + ""` because Ruby will merge adjacent strings automatically: `"hello" "world"` is equivalent to `"hello" + "world"`. You only need a single set of double quotes (`"`) for string interpolation and Ruby allows strings to span multiple lines. However it can be useful to use heredocs for text blocks.
Rails used to have a `starts_with?` method, until Ruby added `start_with?` to its standard library. Much confusion ensued. I personally agree with you and think code reads much more naturally with `starts_with?` and `includes?` etc.
The official answer is basically that the non-s forms would be removed if it were worth the pain of removing them. https://bugs.ruby-lang.org/issues/9041 Also, apparently you can make sense of the non-s method names by using second person, i.e., "string, do you start_with s?". FWIW I think the s/non-s aliases would be much less harmful than the Enumerable (`reduce`/`inject`, etc) aliases, and also much more beneficial, since it's much more likely that you will forget whether `starts_with?` has an `s` than whether it's `start` or `begin`.
Thanks! Haha, about 100 wpm I think. Been programming for, oh, around 18 years, and spending too many hours a day typing on BBSs (dialup before internet) for another 5 before that. :) You should see how fast I can T9 on a flip phone, haha. 
Added!
I see what you mean, and I understand that Avdi's arguments aren't about difficulty in writing but difficulty in debugging/understanding/analyzing. But in most languages, isn't it an IDE that provides debugging and live development? It's the ruby ecosystem's lack of IDE support that means there's not good tools for debugging and live development, and it's the ruby community favoring patterns that do not require tooling to write code that still leads to this lack of IDE's. Same thing. But yes, where it hurts is in debugging etc not in "writing", to the extent those can be separated. I doubt you'll find an example of a language where most people "write" with a plain text editor, but there's other high-quality tools that people use separately to do debugging or "live development". I think part of what makes a good environment, in the OP's analysis and I agree, is when you can use the same tool for "writing" and "debugging", when those are integrated. 
&gt; example of a language where most people "write" with a plain text editor, but there's other high-quality tools that people use separately to do debugging or "live development". JavaScript in the browser? The tools aren't great-great, but clearly there is a complete decoupling of how the code is written and how the code is debugged.
Ha, good example! I'm going to wave my hands and call it "the exception that proves the rule", even though that doesn't actually mean anything, heh. 
None of which are tools, rather they are language or runtime features. So ... are you a tools author? Why is Elixir relevant to this discussion? Edit: My mistake, you did mention Dialyzer.
&gt; But it's like a relationship you've been in for a while. That flush of young love has faded, to be replaced with a work-a-day companionship that's more about getting the kids to school on time and making sure bills are paid. I like that analogy for a related observation about new languages/platforms/frameworks/libraries. The honeymoon can be great. Sure, it's so new, it doesn't do everything you need it to do yet, it's got bugs and some edge cases it's not handling. But those will come with time! And it's so elegant and lean and efficient and well-designed! They do come with time... and in the process of adding that stuff, you realize why what came before ended up such a mess, and now you've got a new mess too. I guess you can always get another divorce. 
You lose a lot of the benefits of having a compiled language with a type system as loose as Ruby's, so in that sense it makes more sense to make a "Ruby-ish" compiled language rather than just writing a compiler for Ruby. Also, I'd like to mention I know nothing about Crystal or Elixir, so its possible I'm mistaken in their intentions for writing a new language. Also I guess Go compiled and isn't super statically typed, so maybe I'm mistaken again.
Thanks so much. I'll be sure to try it. P.S. if you got to www.phusionpassenger.com -&gt; docs and support -&gt; Phusion Passenger for Apache users guide It takes you to a different tutorial that didn't work for me.
I think he meant those same things. It would be interesting to see a comparison of these tools with their Ruby counterparts.
I didn't "advocate using it." I "highly recommended at least looking at it." Reread what I said. That's a pretty important difference. Like anything new, try it for a small one-off project and see how it goes, don't throw away your entire codebase and dive into the shallow end of the pool, you know? I'm not CRAZY, I'm just romantic lol That said, it's nice to be in a honeymoon phase, for a change :P The fact that Ruby software dev has been moving to being more modular lately might help. You can build a service in Elixir and see how it interops.
&gt; Look, let’s face it: Ruby tools are terrible. Every time I use any other language I'm constant state of pain that I can't do `binding.pry`. Ruby has best tools of any major language. It's insane how much better `pry` is than everything else.
&gt; generics Honestly, anything with generics is better than Go for moderately-complex applications. Casting everything to interface {} is not a proper solution, and the Go developers should feel ashamed to still be lacking such a critical feature.
no discussion of this would be complete without a mention of oliver steele's [the ide divide](http://blog.osteele.com/posts/2004/11/ides/). it doesn't go into great depth, but it frames the tradeoffs very clearly.
It stands for Integrated Scripting Environment. Ruby isn't generally compiled, your program is interpreted into machine code line by line and executed line by line. While this makes ruby very slow, it gives you the ability to write and execute your code at the same time. An ISE is like a special notepad that will execute specified lines of code and show you the result, making it easier to instantly see the results of what you're doing.
`gets.chomp` is one of the first things that every online beginner's ruby tutorial teaches... 
Added too.
&gt;the defensiveness of the developer is more relevant to the developer's experience than of the boss's tone That's terribly assumptive of you. There's no indication of what the dynamics or the relationship between the boss and developer are like prior to that conversation. &gt;negative critiques I never had an issue with his critique. The developer very well may have been confused about what the boss was saying. It's apparent the developer thought the boss was confused about which parts of the project were his. If I were in the exact same situation I would've made the exact comment because I wanted the boss to understand that I know that is weak work and he can expect me not to make those mistakes. That is useful feedback. Telling someone you don't care about their input is not helpful in a team and code is a team effort.
[And the font looks just terrible](https://sc-cdn.scaleengine.net/i/c6ec34468122e00460cf410ef4e2deee.png)
&gt;That's terribly assumptive of you. You're the one assuming what the boss's tone is! It's actually made very clear in the original article: The engineer regrets making that remark, and that experience acted as a learning experience. When he was inexperienced, his first reaction was to be defensive. Now that he is more experienced, his first reaction is to be proactive. If you disagree with the case study being presented, that's a different story. I, however, don't. &gt;I never had an issue with his critique. Sure you did. You said (two posts ago): &gt;If the developer feels defensive, it's almost always partial blame to BOTH parties. That's an issue with his critique. As for the rest of that paragraph, I think there are productive ways to say it and unproductive ways to say it. I think a productive way to say it is along the lines of, "Yes, I agree that is weak work. It should be like this...". In that way, you are conveying both that you understand that it's weak work and that he can expect more out of you. In fact, this is probably better than the alternative because there's a chance that he *is* misunderstanding you and therefore believes that you are becoming even better than you were (and thus are good at learning). I don't think "I didn't do that" is useful feedback in any circumstance unless you believe the team member who *did* do that has a learning experience ahead of him.
I was learning C++ at school and I would have killed for a C++ pry. I spent hours on this one issue only to find it simple and easy to fix. Pry would have saved me. 
Awesome, I was wondering what ever happened with Java. Last I heard AWT was long dead and Swing was basically dead too. I never head of a replacement - JavaFX seems cool.
What happens when you run `bundle install` locally (in the directory where `Gemfile` is)?
You Sir, you know what you're talking about. Can't the same about the post is author.
It would be helpful for any sort of development, including cli. Just out of curiosity what are you planning on building? Why use Ruby? IMO Ruby is only good for supporting rails, and doesn't really have any other practical uses.
Early on I always thought programming was a lot of fun but the ugly, corporate IDEs in the 90s made it seem so ... underwhelming and a lot more like work than fun. Booting up an IDE felt like putting on a bad suit -- looking bad and feeling uncomfortable just to fit in. I embraced the unix philosophy early in my career, starting as a sysadmin. When I moved into development, I stuck with Perl as long as I could before giving in to Java. I ran IntelliJ which I bought for myself on principle when I had to do Java a decade or more ago. It was the best tool at the time and probably still is. Dreamweaver was pretty good for early PHP webdev. When I discovered Ruby 9 years ago I never looked back. Today, when I sit down and think about out how to build something significant as quickly as possible, Ruby is usually the core of my toolset. I think about how I can build things in Ruby to accelerate what I will need to do. I do not dream that some other language is magically going to make it faster or easier. I do not need training wheels. I can read complex Ruby code just fine. When I write, it try to keep it as simple and English-like as possible. Weird computery syntaxes just get in the way. I prefer my editor and environment to be as simple as possible and get out of my way. Clients have handed me piles of steaming garbage with 2000 line classes and 500 line methods without tests, and I do not have difficulty reading, understanding, refactoring and cleaning them up. So, I guess I really do not experience the pain that some people are complaining about. Better the devil you know. I still love Ruby and I think we can go a lot further with it. Unix was a powerful skillset to pick up early in my career and boy has it served me well for 25 years. Ruby is the second such skill. When you invest in really learning something and getting good at it, you want it to have a 20+ year useful life. I avoid fads and stick to fundimentally powerful technologies that are the clear result of a coherent philosophy and one or a handful of brilliant minds. I will also not touch anything that is owned by a single vendor. Companies fortunes change and I trust the sort of open source process expressed most excellently in Ruby land over that found in corporate estates and other less developed or less wisely led communities.
Wont install for me. I get basically the same error as this guy (windows 7 / 64bit) http://code.activestate.com/lists/ruby-talk/42392/
I don't really have much experience with that book, but I do find if a particular learning resource isn't working for me, I will seek out other resources to help me learn the same concepts. To address your particulars: &gt; I don't understand where the value for key is coming from. You'll have to be more specific. Are you asking how to, given a hash key, return a value? I've read through the exercise and there a lot of keys and values. &gt;default=default I think this is a verbose piece of code. I think it simply means 'default'. So #get receives a parameter named 'default' (evaluated to nil if none is provided when #get is called), and that value is passed to #get_slot when it is called. Consider: def some_method(arg1, arg2, arg3) return arg1, arg2, arg3 end some_method(1, 2, 3) #=&gt; [1, 2, 3] some_method(1, 2, blah=3) #=&gt; [1, 2, 3] Since I am a beginner myself, forgive me as my explanation could be totally wrong. Can anyone more experienced weigh in?
But it is Ruby secret sauce. Even `irb` is way better than `ipython` and `irb` has nothing on `pry`. Language must be designed with very high metaprogramming friendliness for `pry` style tools to do anything useful. `ipython` is just awkward as hell.
http://ruby-doc.org/core-2.2.0/Hash.html https://en.wikipedia.org/wiki/Hash_table Could you ask a specific question? The "default=default" part is pointless. If you wondering about named parameters to methods, read https://robots.thoughtbot.com/ruby-2-keyword-arguments
I'd say learning a new language is only a significant cognitive load if you are jumping between paradigms... like jumping from C to Haskell or Java to F#. Jumping from ruby to python is like changing from pants to shorts.
What would this be used for?
I wrote a live scanner 2 years ago in with Rails, Zxing and WebRTC. What I did was using WebRTC to capture images using the laptop's webcam. Then 6 times per second, I feed the current Webcam image to the Zxing library and check whether there is a match. It was quite laggy though. Probably because webcam image capturing isn't very efficient. Another problem was the fact that when I try to scan a barcode, I can't see whether I positioned it correctly because the paper containing the barcode is obstructing my screen. All in all, I recommend hardware scanners over webcam.
That completely depends. In my experience, iOS and Android devices are not fast and efficient at scanning at all. The camera picture lags behind by 50-100 ms or so and stutters, especially when it is dark. Although webcam image capturing via WebRTC is even worse. I'm guessing it's because current WebRTC implementations aren't so optimized. It is possible to capture still images with WebRTC (as opposed to only displaying them in a video) but I don't think browser makers have put a lot of time into making that code path particularly fast, because the abstractions used on the web makes optimization difficult. I think that native APIs are much easier to optimize.
Ah.. I've been thinking about this as well, and experimenting with various libraries. [ZBar](https://github.com/ZBar/ZBar) works pretty well, and there is a [JS version](https://github.com/yurydelendik/zbarjs) of it that I haven't used as yet. Weirdly enough, the reason I was look at this was to build something similar to your idea (a personal asset system). And WebRTC was something else (as per FooBarWidget's comment) was another thing in the mix. I've started and restarted this project several times, as it's just a filler project. But it'd be good to get some traction. Happy to share ideas. 
There's a library doing QR-Code scanning using WebRTC: [QRScanJS](https://github.com/Jeija/QRScanJS). I know this isn't barcode scanning, but it's using the same ZBar toolkit I pointed to before. The demo seems pretty snappy. Might be worth looking at in detail.
Thanks. I went into business for myself because I didn't want to use Windows at work and pretty much every company 10 years ago was using Windows. I was the oddball contractor showing up with the silver macbook. Heck, until the Netscape browser came out (NCSA Mosaic actually), I proudly worked off a dumb terminal green screen hanging off a 19.2k modem. Worked just fine and it didn't need rebooting, registry cleaning, or virus removal... Ever. The computers I connected to were 100x as powerful as any PC of the era and supported 1000 users in multi-user setups. As a professional and self-identified master developer, I choose the tools I use. Would you hire a master craftsman and then ask him to work with one arm tied or take away his quality tools and give him inferior ones? That's what I felt like when people handed me a PC and some clunky IDE and told me to do development on it. Lastly, I have noticed that not all new stuff is progress. A lot of it is the opposite. New for the sake of new. Even in the open source and framework space. Younger developers are ignorant of history and do not know what great things existed a decade or two ago. There are many good ideas that have been glossed over or forgotten and then have to get reinvented. Newer developers have trouble distinguishing the good from the merely new and noisy. New things can look good if they are marketed well and gain a following. Doesn't mean they are an improvement. Rails went through a "slow period" where the development experience deteriorated but the Ruby community itself was still exploding. In 2006-2007 Rails was amazing. So fast compared to the standard ways of doing things at the time. By 2011 startup times, bundler, herd behavior (cargo culting of "best practices") and a profusion of gems led to massive bloat and complexity. Omikase vs Have it Your Way. I'm more of an Omikase guy when the chef is superb. Now in 2015, with a new SSD macbook pro, Ruby and Rails has once again for me attained that super speed it felt like it had back in the day. I have chosen to build my new platform on top of it and I expect both my code and Rails will be around and doing very useful stuff for a decade or more. That's the kind of time horizon you need to build a meaningful and substantial product/career/company. Look behind the code and the hype to the driving philosophy of the creators. Things built on powerful ideas and values have staying power.
I would love to use jruby more but the slow start is too frustrating for me.
We don't really know what parts of the exersize you're talking about becuase we're not looking at it, can you link to the relevant chapter online or something? Or, really, paste in some code that confuses you? "Where the value for the key is coming from" -- not sure what you mean, paste some code and ask about it? **Edit** Looking at the `Dict` code at the end of the [the exersize](http://learnrubythehardway.org/book/ex39.html), on first skim it confuses _me_, and I've been writing ruby for 7 years or so, and am not generally confused by Hashes. I'm sure I could figure it out by spending some time I don't care to spend and reading the next section where he explains the code, but perhaps it's not a great example for a beginner. Perhaps it makes more sense in Python, which I think the 'learn the hard way' was basically 'ported' from by the author. I'd just ignore that particular code -- do you think you understand Hashes? If so, move on, if not find another resource to explain them. 
Well to each their own. The point is a professional craftsman chooses his or her own tools.
I don't think that's the best possible summary of the situation, but Crystal certainly implements more OOP features than Go does.
&gt; Edit Looking at the Dict code at the end of the the exersize[1] , on first skim it confuses me, and I've been writing ruby for 7 years or so, and am not generally confused by Hashes. I'm sure I could figure it out by spending some time I don't care to spend and reading the next section where he explains the code, but perhaps it's not a great example for a beginner. I'm not sure what is confusing about it. The Dict code is the standard way to implement a hash-map, it looks about the same in every language and is the way it would be taught in an intro to data structures class. 
&gt; If I'm looking to jump into coding via bootcamp and/or self-taught, is RoR a good place to start? Sure. I mean, I'd suggest starting with Ruby ("Learn Ruby the Hard Way" is a reasonable resource), then picking up the basics of Sinatra (it's a very light weight web framework), then using Daniel Kehoe's "Learn Rails" book (it's about $20, but worth it), then using Michael Hartl's "Rails Tutorial" (free online). The hard thing about Rails is that there's so many moving parts that are hidden behind the scenes (in particular, all of the magic that ActiveRecord and ActiveModel do); it's frustrating, at times, to not know what exactly is responsible for certain behaviors. &gt; I DO, however, want to have a solid foundation that I can use when I when I pick up a new language or work on a new project. Everything you learn is in the context of things you've previously learned. That's how learning works. When you start with this, you're not going to have many cognitive anchors on which to attach these new concepts. As you go, though, you'll have more and more cognitive anchors and learning new things will be easier. Rails is certainly different, in many ways, from a lot of other frameworks (esp. those built in languages other than Ruby), but not terribly so. In most cases, you'll have somewhere that information is stored, some code that turns the stored information into something usable by your program, code that does stuff with the stored information, and code that makes it all appear on screen (or that sends it somewhere else). This isn't universally true, but it's true enough for now. In all cases, you'll spend plenty of time looking up documentation and leveraging existing libraries and methods to do new stuff. And you'll learn more by picking something good enough and doing it than you will waiting for a perfect solution. TL;DR: Go ahead and start learning with Ruby and Rails. Then learn something totally unrelated. Then learn another thing. Gravitate towards whatever tools are most pleasant to use and solve problems with. Maybe that's Rails, and maybe it's another language or framework, or maybe it's not even a programming language/framework at all! But you have to start somewhere, and Ruby/Rails is a fine place to start, as are many other places to start (you could start with Python and Django, or you could start by learning HTML, CSS, then Javascript, then Backbone or Node, or you could start by learning HTML, CSS, PHP, then Wordpress, or any of a million other options).
To learn rails I did all the Ruby lessons on Codecademy, then all the rails ones. After that I just started watching some video tutorials on different rails features. I knew PHP and the Laravel framework before hand, and honestly there's very few differences. Anywho the point here is I highly recommend Codecademy.
Developing on a windows machine? I had to remove all things 'windows' from my Gemfile.lock. Lines with gems that referenced the windows dev kit or something like that. 
Doesn't SBCL get its speed from type hinting?
If you want to program your examples then I prefer to see this done inside the example, rather than when the file is required. Otherwise folks get tempted to start doing other complicated logic at require time. describe Foo do it "works with various parameters" do [1, 2, :apple].each do |parameter| result = Foo.new(parameter).some_method expect(result).to == (parameter ** 2) # example assertion end end end And it's all just ruby: describe Foo do def foo(parameter) Foo.new(parameter).some_method end specify { expect(foo(2)).to == 4 } specify { expect(foo(4)).to == 8 } specify { expect(foo(16)).to == 256 } end Or use [shared examples](https://www.relishapp.com/rspec/rspec-core/v/3-3/docs/example-groups/shared-examples).
The basics of how a HashMap works was taught in my intro to CS course. Data structures classes went deeper into the design tradeoffs. &gt; what it's functions and performance features are It's hard to talk about the performance of a HashMap without bullshiting it unless you talk about the implementation at least enough to define what a load factor is, which is about the depth that this exercise's code goes.
Well, I think the OP wants to write multiple tests that share the same code but different arguments. I'm more of a test unit afficionado anyways, so I don't really know how to describe this using rspec. But I occasionally write tests like this: [1, 2, :apple].each do |parameter| define_method "test_foo_#{parameter}" do # etc. end end Because if `:apple` is only the parameter that causes the test to fail, I can easily run just that test: ruby test/foo.rb -n test_foo_apple I believe rspec uses line numbers for this stuff, which makes it effectively impossible to isolate the one failing test, unless you explicitly enumerate each paramater as a distinct test (as in your second example).
Interesting choices. Channel as used by something like websocket-rails or socket.io is generally on-the-fly names and actions. In this case channel is an abstraction and the push is set up on stream_from. ~~It doesn't look like the channel actions are two-way, so if you want to be able to listen and send, you'll need two different actions. This is not a huge deal, but I wonder if sending a websocket message to other clients in the channel will require creating two actions, one to stream and one to pass that message on to the stream?~~ e: read that better. The channel in their example only does subscribed/received which makes more sense as to passing between clients. All a client has to do is broadcast back to the proper stream. Not sure if you can broadcast from the JS side, but that'd solve that issue. Redis and a separate WS server required, so will need some hackery to work with nginx and xss, much like a socket.io/rails setup does. It seems like they intend to integrate direct into rails which, to me, would be more ideal: as your rails servers grow outward, so will your websocket servers. Still, looks promising. Love seeing websockets as a first class citizen.
Perhaps not the porn itself, but just some sort of record that makes it look like such files were accessed via a browser (via explorer, firefox or chrome). It also inserts a time stamp and the file names which it refers to on a "C:" drive, so it's assuming a Windows computer.
Using [`shared_examples` with block parameters](https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples#passing-parameters-to-a-shared-example-group).
I disagree with this. Looping the `it` statement gives a much better indication of what failed and why. Also your variant halts at the first failure of `expect` which can be annoying when refactoring code. Knowing all the situations that failed is often very useful for finding the root cause rather than only knowing the first failure. 
I've made my thesis with Ruby and QT a year ago, so that's the only GUI I can recommend to you. The most annoying thing is to make the Qtbindings gem to work (https://github.com/ryanmelt/qtbindings/). The best resource to get a functional install of that is the one Tom Paschenda wrote a few years ago -&gt; (http://tom.paschenda.org/blog/?p=43). If you don't succeed with a fresh install, make sure to have the DevKit installed and all dependencies. I've managed to install qtbindings with Ruby 2.0.0, but that's it, never tried with the new versions. The version of Qt I've used was "qt-windows-opensource-5.0.2-msvc2010_32-x86". BTW, don't mind trying to install the gem "Qt-Ruby", due to it's inactivity, it will not work in Ruby 1.9.2 and newer versions. Qtbindings is more likely to work. And why Qt, you ask? Because of all frameworks, it's the most complete one with a ton of widgets. In Linux works really well also. And the visual style adapts to every OS. EDIT: made a quick "gem install qtbindings" on my actual ruby 2.0.0 AND another ruby 2.2, and the gems "qtbindings-qt-4.8.6-x86-mingw32.gem" and "qtbindings-4.8.6.2-x86-mingw32.gem" installed without errors; so it still works on Windows 7 64 bits, if you want to give it a try ;)
Join me in a functional, test driven design session where we discover perfect, abundant, and deficient numbers using Ruby and Minitest!
It's github dude
lol.
Firstly, whoever came up with the title should have reigned their horse back in a bit because the code does NOT insert child porn on the target's computer. I'll do a nearly line-by-line as to what the code is doing. As a quick summary, the code does not create any new files. The main function "content(*args)" takes in a memory address for arguments (which in this case is a list/"array" of items) and manipulates them. There is no output for the function meaning that the computations are likely used somewhere else in the program. * Line 11: Function declaration. This is where we can see that there is a list/"array" of items in the arguments. * Line 12: The array entered in the parameters is "flattened" into a one-dimensional array for easy index access OR if there is no array then an empty one is created. * Line 14: A variable named "process" stores a hashed element with the key "process" (happens to be the same, although let's call the key "proc") in the flattened array OR if there is no element that goes by the "proc" key in the array then a random string from a list is chosen to be hashed and stored in "process. The strings that can be chosen are "Explorer.exe\0", "Firefox.exe\0", "Chrome.exe\0". * Line 15: Encodes the "process" variable into the ASCII text format. * Line 17: This is the cause of the concern. Similar to line 14, a variable named "path" stores an element from the array with a key "path" (once again, also with the same name) OR if there is no element then it will randomly select a string to represent one. These strings represent filenames that probably don't exist anywhere but you should also note that they are placeholders (like what line 14 uses). The 3 strings, "C:\\Utenti\\pippo\\pedoporno.mpg", "C:\\Utenti\\pluto\\Documenti\\childporn.avi", and "C:\\secrets\\bomb_blueprints.pdf", have very obvious filenames to be obvious to the programmer exactly what they would represent. * Lines 20-29: A variable named "content" is created that represents a string input-output object. Basically, the object can be manipulated to have specific content written to it. Line 21 and 22 creates and writes the time, respectively. The "process" variable is then written to it. A hash of an element with a key "size" is then hashed and written OR if it doesn't exist, a placeholder hash "123456789" is used. The path is then written to the content. What we have seems to be a rudimentary ticketing system for evidence files. The function content(*args) packages up relevant information into a structure that the rest of the program is then able to read.
The first time I simply glanced at the code, I read it over and deduced it might have something to do with the browsers. It's reasonable that he might have done similar and deduced that it was modifying the browser history; however, when a person looks at what the code actually does, it does not modify any files (this includes browsing history). Have your buddy take a look at the "content(*args)" function and read through it. One of the things he might realize is that the generic placeholder strings are only used if certain elements aren't found in the arguments. Basically it would work as follows: &gt; Police reports need to have every line filled out. When they investigate a murder, the report they use has lines for "FIRST NAME", "LAST NAME", "SEX", "LOCATION", "DATE". &gt; A police officer finds a dead person and cannot identify him but knows that he is a male.. When he puts in the report he writes "JOHN", "DOE", "MALE", the location he found the body, and the date at which he found him. Long story short, it doesn't actually modify anything. It's what programmers call a "helper function" because it just manipulates the data you give it and doesn't output anything to the screen, etc. Another function somewhere else in the program then picks up the data that was manipulated and works with it, that's likely where it might be printed out or whatever.
Are you going to correct it or just complain?
&gt; it's assuming a Windows computer. I'm imagining this being run on a Mac or Linux box and the resulting file names...
Why not just use Faye's implementation?
FWIW, I'll add that "pippo" and "pluto" are the italian metasyntactic variables ("foo", "bar", "baz" -&gt; "pippo", "pluto", "paperino"). "Utenti" is "Users".
Someone should send the authors the documentation for Pathname. :) 
/r/conspiracy is leaking into /r/ruby
so?
Oh, you're just trying to make _me_ feel stupid, not the beginners. Okay, that's cool. 
It is using Passenger, that is what I use for my Rails apps. X-Powered-By: Phusion Passenger 4.0.59
I think /u/moomaka is having a bad day! This is not simple. There are multiple pieces of info you need to keep in your head and piece together. Enough pieces of info that it will push your brain to the limit. Anyone's brain. Once I figure out each function and get a better grasp on hashing, this will still be difficult! 
Technically, Passenger could also mean python or node, but yeah, very likely it's rails/rack.
You could use the new aggregate failures option to report all the failures within an example
They have job postings for ruby on rails engineers. https://jobs.apple.com/us/search?jobType=1#specs&amp;ss=ruby&amp;t=1&amp;so=&amp;j=SFWEG&amp;lo=0*USA&amp;pN=0&amp;openJobId=40927414
Is there a pre-req. that posts in ruby have to impress you or something? It's a simple observation that I personal find as interesting as half the posts on here. For one it means as a ruby dev I can look at apple for job opps.
Me too, for a developer docs project a couple of years ago.
That is pretty lazy...
Can't view the page.
The method isn't [lazy](https://en.wikipedia.org/wiki/Lazy_evaluation). Maybe the programmer was.
We just run mri locally, and use CI to make sure jRuby doesn't have any issues with the code before we deploy.
Courtesy of [Radu-Bogdan Croitoru](https://github.com/radubogdan). We are looking into Sass integration now :)
Why don't mods delete threads like these? No information, no discussion, no news... not even a cat or a joke. This is a nonsense thread.
Agreed. They are recruiting heavily for these roles right now
It would be _way_ easier to only accept a strict format instead of writing [this monster.](https://www.omniref.com/ruby/2.1.2/files/ext/date/date_parse.c)
1. `pry` 2. `$VERBOSE = true` 3. `require 'some_gem'` 4. Fork. 5. Fix warnings. 6. Send pull request. 7. Profit. You can also try running the gem's tests to find warnings for code that isn't run at require time. Lots of warnings are fixed by just adding parentheses or changing white space. *You can run tests or just, you know, play with the gem in pry :) http://mislav.uniqpath.com/2011/06/ruby-verbose-mode/
If you're going to write your tests to look like human-readable steps, why not use something like Cucumber? I understand not wanting to write each step manually and all, but doing it anyway in ugly form seems pointless to me.
To be fair, there's a issue open to drop EM
I like [RestClient](https://rubygems.org/gems/rest-client). Super simple but effective, here is an example: require 'rest-client' RestClient.get 'http://example.com' Check out the [README](https://github.com/rest-client/rest-client#usage-raw-url) for more examples.
It's 9 days long, you've got plenty of time! :)
It's the any way of signing up without slack 
&gt; Places where it works well for them Mind elaborating? I need to pitch a team about using rails instead of php! This has the steam to actually convince them to use it! :D
This looks pretty neat. Is anyone besides the author using this in a professional context at this point?
There is a big difference between descriptive programming and creating an entire new language. Gherkin falls into the later category. To me the choice comes down to the consumer of the spec. If the spec is only going to be worked with by engineers, then avoid Gherkin, it just overcomplicates the problem. If you want specs that can be consumed by business folks as a functionality specification, then Gherkin may make sense.
Oh yeah. A link would help. :) https://github.com/stevecj/map_with_indifferent_access
Yes, there is, it's a form of bike shedding, https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Parkinson's law of triviality**](https://en.wikipedia.org/wiki/Parkinson%27s%20law%20of%20triviality): [](#sfw) --- &gt;__Parkinson's law of triviality__, also known as __bikeshedding__, __bike-shed effect__, or __the bicycle-shed example__, is [C. Northcote Parkinson](https://en.wikipedia.org/wiki/C._Northcote_Parkinson)'s 1957 argument that organisations give disproportionate weight to trivial issues. Parkinson observed and illustrated that a committee whose job was to approve plans for a [nuclear power plant](https://en.wikipedia.org/wiki/Nuclear_power_plant) spent the majority of its time with pointless discussions on relatively trivial and unimportant but easy-to-grasp issues, such as what materials to use for the staff bike-shed, while neglecting the less-trivial proposed design of the nuclear power plant itself, which is far more important but also a far more difficult and complex task to criticise constructively. &gt;==== &gt;[**Image**](https://i.imgur.com/JH6UPSW.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Station_Oudegem_-_Foto_3_\(2009\).png) - *A bike-shed* --- ^Relevant: [^Parkinson's ^law](https://en.wikipedia.org/wiki/Parkinson%27s_law) ^| [^Poul-Henning ^Kamp](https://en.wikipedia.org/wiki/Poul-Henning_Kamp) ^| [^Cherry ^picking ^\(fallacy)](https://en.wikipedia.org/wiki/Cherry_picking_\(fallacy\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ct0aolh) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ct0aolh)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](/r/autowikibot/wiki/index) ^| [^Mods](/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Call ^Me](/r/autowikibot/comments/1ux484/ask_wikibot/)
I see you like to httparty hard
Your implementation looks okay, but I think the concept is an anti-pattern. Symbols and Strings are different in Ruby for a reason. If you don't know what type you're using as a key, then you've got larger architectural issues which should be addressed before sacrificing performance by using a custom data type like HashWithIndifferentAccess. If you just make sure that you use symbols as keys in a straight Hash, you get the following advantages: * Symbols are interned, so they only use memory once. * Symbols are immutable, so no need to worry about your Hash keys mutating and having to Hash#rehash. * Hash objects are highly optimised. HashWithIndifferentAccess will be orders of magnitude slower. I'd much rather try to solve the issue at its root by figuring out where you are passing the wrong type.
&gt; it just overcomplicates the problem. It provides tools you'll likely want to build yourself, like parametrized steps, tags, parsers for other languages, etc. The step definitions are almost exactly the same, substituting a method definition with a step definition block, and you get better expressibility without having to clean up step names to fit methods.
If I could go back in time and argue with Matz, I think that Ruby should actually have had immutable strings, and the symbol syntax should simply have been syntactic sugar for an interned string. Given the situation we're in now though, where we're dealing with the Web and converting to and from JSON, XML, CSV, etc., working without string/hash interchangeable map keys is a serious pain.
Yes, indeed, I totally agree with you. I did try out CodeIgniter for about a couple months, but I got frustrated over the lack of a generator pretty fast. Node is very lightweight, for a lot of things. But the coupling is loose, and sometimes, when you need a small tightly coupled application, Rails is the way to go! Thanks for the reply!
Tried that, one repo per day for a week. A large number of responses were outright hostile (Especially the warnings related to usage of @var ||= fooMethod because the non-warning code is not as "pretty") As a community we apparently have decided that warnings are pointless and trying to get people to accept PRs purely to reduce warnings is a thankless (Literally) task. I would actually recommend against this as an intro to open source.
Hasn't been my experience. Every warning PR I've submitted has been graciously and quickly accepted.
&gt; The abstraction of given/when/then scenarios are still valuable to us. My opinion is that Cucumber does that much better than the linked example. It allows you to write actual prose, that reads like one. Doing it in a more standard code format would be fine too. By mixing the two it seems you get all the verbosity, more restrictions and none of the writing efficiency. &gt; The abstraction of gherkin syntax and a second testing tool, cucumber, are not as valuable to us. If you can be content with a relatively small set of tools to work then I can agree. But I have the impression that reaching any non-trivial amount of complexity will lead you to rewrite half of Cucumber without realizing, for worse (readability-wise) results.
That's a fair enough viewpoint. For us the trade off of less tools and simpler solutions is better for us, for now. We reserve the right to change our collective minds at any time.
Both Symbol and String seems interchangeable in a specific use-case, but they are really different beasts. Symbol objects as unique shared representation of all ruby object identifiers, unambiguously referenced, least resources hungry. Contrary strings are much more complex, with lot of batteries included for a comfortable content manipulation. In hashes you may use arbitrary object as a key (with exception of BasicObject), including strings and nothing prevents you use them consistently and comprehensively in your projects. Just curious how immutable strings would help here ? How should be implemented ? p.s. Assuming use of plain `String#freeze` or equivalent is very insufficient (and inefficient) solution. Imagine lot of duplicate strings filling up memory. Even if there would be an optimization checking for duplicities, lot of extra code contained in complex string object would remain. You'll lose an option to memory-optimize your code. And what about additional conversions to mutable strings, immutable would introduce ?
I think a lot of people think that because writing docs is "easy", it is somehow not appreciated. That's really not the case. Maintainers are really really busy and documentation helps keep a library useful. Another one that people miss: 1. Clone and setup local dev env. 2. Add [SimpleCov](https://github.com/colszowka/simplecov#example-output) 3. Run the test suite 4. View simplecov report to find lines of code that are not being tested (usually, people miss `rescue` blocks and `else` branches) 5. Add tests that hit missed lines of code. Sometimes, you will be surprised to find typos and unintentional behavior when you write these use cases. If you think that's the case, raise an issue. Great article. Glad someone finally mentions that there are ways to help out other than just adding new features.
We were long-time users of Cucumber before we moved our feature testing in to RSpec. As covered in the article, we realised that both the authors and the consumers of the feature tests were engineers, and as such, the indirection between feature files, step definitions and the regex glue between them never really offered us any value. For us the underscored method names to explain the feature offers more than enough expressibility. 
I suppose it actually was a stretch to say that immutable strings would help this case directly. I feel, however, that Mutable strings do create confusion in a lot of other cases though, and but I think this problem would never have come into existence if basic strings were immutable. The need for a Symbol distinction would probably not have arisen in that case. What I'm really arguing is that whether strings are normally immutable or not, the distinction between a symbol and an immutable string is unnecessary and introduces the need for a lot of additional work. 
There shouldn't be all that much complexity to writing tests. The need for complex testing tools is generally an indication of poor testing practices, in my experience. This approach seems to give them much of the benefit of reasoning about features the "BDD" way, without having to add an additional dependency to the project. Seems like a reasonable decision to me.
Second Faraday. If you're building a Ruby gem, it's really adaptable for the user of your code to swap in different components based on their use case. I also have a course that may help you with some of it, if needed: http://brandonhilkert.com/courses/build-a-ruby-gem/
This looks awesome!
&gt; Symbols are immutable, so no need to worry about your Hash keys mutating and having to Hash#rehash. This is actually not a problem. Whenever you create a hash with strings as keys (and *only* for strings, i might add!), ruby actually uses `your_string.dup.freeze` as the key; not the original string!! In other words, your key literally CAN'T mutate! 
&gt; If the API isn't available, or if you're just test-driving your own adapter like in the article VCR would be of no use. VCR cassettes are just yaml, I routinely modify them by hand rather than using the recording functionality.
Interested in same question for fresh grads with 1-2 years of experience with Rails. It seems like there are very small number of vacancies with relocation, especially for this level. 
About 3-4k for medior, 4-5k for senior. Of course there's a lot of other factors that decide where in the spectrum you'll end up and there will be companies that have better salaries and/or benefits. 100k/year like in Sillicon Valley is not undoable, but I think you'll need to go freelance and have a lot of billable hours. How did you end up in the Netherlands and getting a remote job in the US if you don't mind my asking? I'm looking around a bit myself :)
I also got an offer around 40-45k gross for a jun/med position. 
Yeah, in fact 72k is even on the very high end of the scale in my experience.
I'm a big Rails fan but I think that the rails team is slow in reacting to what the market is demanding, angular.js and the other frameworks usage is sky-rocketing and users want the kind of experience provided by those frameworks. I think a better integration with those frameworks (the asset pipeline worked ok for jQuery, not so much for an SPA) should be a first class citizen in rails. Right now it's just too complicated, the node.js based build tools have won the front-end war and it's time for rails to acknowledge that. I know there are gems out there, but I think this should have been part of the Rails 5 spec ... is anybody looking at all the awesomely creative backend stuff that the node/meteor community is building ???
now I'm curious if I should take a look at job market in Netherlands, currently I'm In Berlin, but here you do not get so much money. They all say, life in berlin is cheap, is amazing. Is not like that. You work for money, you are not working as a fucking artist. Living the edge and dreaming about meat.
It's a bit hard to work for US business hours from Europe, especially If you have a partner, you'll never meet together except weekends. Also you can't do this for a long time. I could work also for a US company in local business hours but I am being a bit cautious because I've never been a freelancer and I've never worked for someone I never met in person from another continent. 
This is sort of a strawman. Separation of concerns is the *most* important aspect of code design, irrespective of the fact that in practice, many people get it wrong. You can keep your objects separated from one another without creating bizarrely named abstractions. The key lies in namespacing, so that the deeply nested objects don't have to be understood without an outer context. Without namespacing, a unit of abstraction called "RequestMappingInfoHandlerMethodMappingNamingStrategy" actually *violates* SRP, as it doesn't appear to be responsible for any single task on its own. You have to demonstrate a minimum level of isolation to even claim that an object has just one responsibility.
Many companies dont require you work US business hours. Often you have an extremely flexible schedule, you can basically work whatever hours are comfortable for you so long as you get your work done.
Cable uses faye-websockets under the hood. But Faye and ActionCable have different goals and philosophy.
In addition to what /u/jesus_castello said, I think it's confusing that you're calling the attribute 'memberlist' just like the class itself. In Ruby, collections are usually pluralized, so I might call it something like 'members', if it's meant to generally be an array. class MemberList attr_accessor :members def initialize(members) @members = members end end 
Ah, the salary for mid-level remote position for an american company is already much greater than the salary for a senior position in NL (mid-level for remote is already in the 6-7K euro/month range) IMO NL pays embarrassingly low salaries to programmers. I don't understand it.
Ah, one of the examples I was following named everything the same way, so I copied in case it was necessary. I'll take your recommendation. Thanks!
Yeah, I've worked like that, and my friends working remote jobs too seem to have similar flexibility. It's pretty sweet. 
Can I PM you ? 
Are you sure you're actually *using* the rbenv installation of ruby? If you enter `which ruby` into terminal what comes up?
And do you see that path listed if you do `echo $PATH`?
Indeed "/Users/????/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
Try running `gem environment` to see what you get from that. 
Your problem wass most likely that your path hadn't been reloaded after installing, which is why it worked after restarting your terminal.
&gt; Separation of concerns is the most important aspect of code design, irrespective of the fact that in practice, many people get it wrong. Your proving my initial point here by making such a strong declarative statement about something that isn't strictly objective. In other words there isn't a definitive measure which shows that separation of concerns is the _most_ important aspect of code design. It's just one of many aspects of code design that may or may not be terribly important in any given situation. 
I'm a little late to the party here, but I found your project and it looks great. Your blog is great for getting started and I think I'm doing things right. But I'm a little curious as to how you're scheduling your jobs? Furthermore, it would be useful to see an example codebase. Perhaps you can share an example repository using Kiba? Great work! 
Just your primary question is answered already, but another tip: You shouldn't be installing many gems in your global setup, i.e. `gem list` even in your rbenv environment should not have much in it. Use a Gemfile with bundler and bin stubs to setup your gems for each project separately. Other than `bundler`, `pry` and their dependencies I don't think I have anything else in my global gem list. 
I'm not proving any point. But let me ask you this: is there any situation where another principle of code design and separation of concerns actually *compete* with one another? Restructuring code to separate concerns always results in better code, in my experience. I don't end up with a bunch of bizarrely named abstractions that don't make sense. When I was learning to design code, I often raised the same objection you're making. I seemed to have too many abstractions, and they didn't make sense on their own. That's where we develop the requisite ingenuity necessary to produce good design -- we restructure the boundaries until all units of abstraction appear to only be concerned with exactly one meaningful task. That's not to say all the code I write ever is perfect: it takes an awful lot of energy and time to write well designed code, and that's not always in the scope of the task we're working on. But once you are able to achieve a good design in practice, I think it'll reshape your view of the ideal.
Very insightful, I now have a reason to use the and/or operators!
Just out of curiosity, is skipping the initialize method altogether considered bad form? Assuming that the class only has one variable. ie. class MemberList attr_accessor :members end post '/' do ml = MemberList.new(memberlist) ml.memberlist = CSV.read(params[:memberlist][:tempfile]) p MemberList.memberlist end 
RoR is a mature framework, more so than node. If it suits your needs depends on how much you want to build yourself or how many packages you want to add. RoR has a full feature set you can use, so you will want to learn the RoR way while node is just a server, sort of. As for the second question... Bootstrap is a CSS framework/toolkit. It's interpreted by the browser it's served to. It will work with any and every webserver you can run and configure. Even with plain apache.
Get the Hartl tutorial, and work through it. That uses Bootstrap as its CSS framework, with some jQuery. In addition to Ruby, and the Rails framework itself, you'll also need to get to grips with, in this order: * HTML (i.e. HTML5) * CSS (this also gets extended by things like SASS) * JavaScript (and jQuery) You'll need to understand HTML, as this forms the foundation for everything else on a website. With Ruby and Rails, the ERB templating is nice and straightforward, but take a look at Haml; it's weird at first, but quite nice once you get used to it. 
As long as you understand the principles, there shouldn't be a problem. It's extremely useful to understand how to create HTML as a standalone document, and how to link in CSS to style it up; and then how to link in JavaScript to do some funky things. Because when you progress to something like Rails, those bits and pieces all get broken down into various components; it's useful to know how those components fit together as a whole. The thing I found with Rails though, was that it's sort of necessary to get to grips with a lot of things at once; so it's useful to know some of the discrete things that make up Rails. Hm... I should probably add that understanding a little SQL helps a lot too. Rails tends to shield the developer from a lot of the gnarly gubbins in SQL, but it's still useful to understand that as well. It's bloody nice using ActiveRecord though, instead of messing around with raw SQL in your application. Incidentally, if you want to learn something simpler for the web in Ruby, take a look around at things like Sinatra. You'll be able to apply that to your existing HTML/CSS very quickly. 
I don't know any Javascript but it shouldn't be too difficult to pick up on, maybe a short udemy class on basic web development might help me out in the short run. 
Good luck :-)
http://www.madebymarket.com/blog/dev/ruby-web-benchmark-report.html has a big list of ruby Web Frameworks you might want to consider.
I just started working on an app which fits in the "Improve your daily life" theme, and now I see this. Can I still participate with the app? (I started working on it couple days back. Have written about 100 lines of code before seeing this post)
As long as it's been started since 0000 GMT Saturday morning, you're good to go. :) Sign up for our community at [our web site](https://slashrocket.io) and you can chat and get started.
They're rocks, Marie.
Two other bits come to mind after reading what's been suggested up to now: 1. *Every time* you run a command that has the potential to change something in your Ruby environment (installing a new version, installing, updating or removing Gems, etc.), run `rbenv rehash` immediately afterwards. I'd bet heavily that that would have stopped your original problem cold. 1. Remember that, if you installed `rbenv` using Homebrew, that `brew update` *won't* update the internals of `rbenv` reliably. Periodically run the following steps: 1. `pushd $RBENV_ROOT` 1. `git pull` 1. `cd plugins/ruby-build` 1. `git pull` 1. # repeat for any other plugins you've installed, such as `rbenv-ctags` or `rbenv-readline` 1. `popd` 1. `rbenv rehash` And if you didn't install using Homebrew, you need to do the above regularly as well; just change `$RBENV_ROOT` to wherever you installed `rbenv`.
Are Dutch language skills a requirement? I'm in the UK(British) and just started serious job hunting a couple of weeks ago (lots of demand!) but the quality of life here is ... well, not what it should be. I'd be very interested in more details :)
No, we're used to having some non-Dutch people around. I'll send you a PM :)
&gt; And all the logical errors of our system can be detected and fixed quickly That's a pretty bold statement. You probably mean _type errors_ instead of _logical errors_ [1] and even then you would need a lot of tests to ensure the "all" part. `contracts` is a pretty neat project and I mainly like it as documentation. But the _type safety_ it provides is not even close to a statically typed language like Haskell. [1] Returning `a - b` from `add(a, b)` would not be caught if you only check for the proper return type of `add`.
Oh my what was I on when I wrote that? I think it was really late at night. If we want to write encapsulated programs, isn't using `initialize` with `attr_reader` better practice than using it with `attr_accessor`? 
Yes you can set the NO_CONTRACTS env variable to true.
You're totally right, I'll fix the article.
There's a great course on coursera for free called Web Application Architectures. It uses RoR and shows your the principals behind it. Link [Here](https://www.coursera.org/course/webapplications)
Yeah I guess, I mean I guess it always seemed odd to me that he spent all that time reading about rocks and then later, all of the case files were just a phone call away anyways. I mean, given how obsessed he was with Heisenberg already, I woulda figured he'd be practically overjoyed at the thought of having an extended period of time to just pore over the files. Of course, getting shot at work doesn't make one eager to back to work, I'd imagine. Yeah, it's a great show. 
But then won't any code that uses pattern matching break?
Contracts make Ruby bearable. If you like it, check out [Crystal](http://crystal-lang.org).
It's not really pattern matching, it's more like dispatching. But that's separate and still works with `NO_CONTRACTS` as I understand. I've never actually enabled `NO_CONTRACTS` just because the performance hit is not that big a deal even when you're writing realtime code.
Upvoting because I, too, would like to know this answer. If you find the solution on your own, please update! :)
Thanks. Been using rubular.com which is very useful for making regex expressions, but haven't found a solution to this issue
There a Stack Overflow post that may have what you're looking for: http://stackoverflow.com/questions/171480/regex-grabbing-values-between-quotation-marks
I had a question about it, would I pick up HTML/CSS while going through that tutorial or would be better to learn HTML/CSS separately before hand?
[These two lines](https://github.com/amsluis/the_odin_project/blob/aa210bd33c6ddfc7c03ada662194aec729223330/ruby/hangman/hangman.rb#L71-L72) are the root of your problem. They're not mutually exclusive, since you can solve the puzzle on your last guess. When that happens, `#victory` gets called, which invokes `#end_game` and thus `File.delete`. But then, since you didn't actually *return* from `#update_board`, execution jumps back and continues from Line 72. That the game over condition also holds means that `#end_game` and‒here comes the rub‒`File.delete` will be called again, but this time on a nonexistent file. You could either rearrange `#update_board` such that you can return early, or else check whether the file exists before attempting to remove it.
Ah, that's indeed another bug, but it did lead me to the issue I was really struggling with: I was calling save_game right after I deleted the file! I swear I had checked for that before, but alas... Thanks so much, that one really had me stumped!
Awesome! Thanks for your time!
I admire the tenacity in writing a web scraper to login and scrape account information...but you might be able to accomplish the same thing with the [Order History Report tool](http://www.amazon.com/gp/help/customer/display.html?nodeId=200131240), which can generate a CSV file of your entire history. One limitation is that it doesn't go back before 2006, unfortunately. The headers and data look like this: (edit: added an actual table) | Header | Sample value | |--------------------------------|---------------------| | Order Date | 11/05/09 | | Order ID | 555-8675309-8675309 | | Title | Idiocracy | | Category | DVD | | ASIN/ISBN | B000K7VHOG | | Website | Amazon.com | | Release Date | 01/08/07 | | Condition | new | | Seller | Amazon.com | | Seller Credentials | | | List Price Per Unit | 14.98 | | Purchase Price Per Unit | 8.99 | | Quantity | 1 | | Payment - Last 4 Digits | 9999 | | Purchase Order Number | | | Ordering Customer Email | dan@email.com | | Shipment Date | 11/12/09 | | Shipping Address Name | Dan Haus | | Shipping Address Street 1 | 100 Broadway | | Shipping Address Street 2 | | | Shipping Address City | NEW YORK | | Shipping Address State | NY | | Shipping Address Zip | 10006-3734 | | Order Status | Shipped | | Carrier Name &amp; Tracking Number | | | Item Subtotal | 8.99 | | Item Subtotal Tax | 0.80 | | Tax Exemption Applied | | | Tax Exemption Type | | | Exemption Opt-Out | | | Buyer Name | DAN HAUS | | Currency | USD | | External Item Number | | 
Hey, this is great; I actually didn't know about the report tool, so thank you! I originally set out to capture tracking numbers, which seem to be included, woop woop! One thing that my project gets is granular invoice line-item stuff (for example, if you paid with a rewards card or gift card and how that affected your total) which doesn't seem to be reflected here. Maybe I can combine the two... thanks for sharing!
Maybe people are downvoting you for not closing the file handles. Or probably not rubyish enough. :P A possible refactor of your code: file = '/path/to/file.txt' contents = File.read(file).split("\n") File.open(file, 'w') do |file_handle| file_handle.write contents.map {|line| line.gsub(/,".*$/, '')}.join("\n") end 
Just upvoted you to help against whoever downvoted you. This worked, thank you!!!
&gt; in_file = File.open('/path/to/file.txt') &gt; output = in_file.each_line.map{|line| line.gsub(/,".*$/, '')}.join &gt; out_file = File.open('/path/to/output.txt', 'w') &gt; out_file.write(output) 
Are you two in the same class?
hobbyist
Even better would be to split it into actual multiple classes, each responsible for one thing. The 'main' API querying class can hold references to other helper classes that it uses for targetted functionality. 
Read up on html and CSS first in my opinion, you should have a good handle on it in a few weeks.
Thaaaaaaat's a stretch man, crystals and crystal meth. I don't know. Whatever it's supposed to be, it works.
There is a Stack Overflow post for basically everything.
Module mix-ins are essentially a form of inheritance -- multiple inheritance (from abstract base classes, technically). So I think we start by recognizing that. Which leads us to recognize that multiple inheritance can get awfully hairy awfully fast. Which is why some tried and true OO advice is to [prefer composition over inheritance](http://codingdelight.com/2014/01/16/favor-composition-over-inheritance-part-1/) Are your proposed modules going to be re-used, or just used in this one class? If just in this one class, are you still worried? I think designing module mix-ins that actually make sense and _can_ be sensibly re-used is actually a lot more difficult (takes more time, thought, and skill) then designing separate classes that can be re-used. Initializing multiple objects is not a bad thing -- it's called Object Oriented programming after all. Like I said, it doesn't mean all these objects need to be exposed to the high-level caller; a typical thing to do would be to have your APIQuerrier object which itself contains references to other helper objects, which the caller of APIQuerrier doesn't even need to know about. Lots of "duplicated" variables may or may not be a problem, perhaps you can think of a different way to split up the classes that minimizes the duplication that seems wrong. Also, you may find [Sandi Metz's book](http://poodr.com) useful for good Object Oriented design advice. 
Sounds like you need to read this: [Sandi Metz rules for developers](https://robots.thoughtbot.com/sandi-metz-rules-for-developers)
I recommend http://www.poodr.com/
As I said in a [comment on the post](http://julienblanchard.com/2015/contracts-with-ruby/#comment-2136176415), it's a geeky-fun way to turn Ruby into C++ by introducing name-mangled, opaque wrappers around your methods. Anything that assumes that you're writing real Ruby, using introspection and dynamic features of the language, *will fail* when you wrap your code in Contracts. I pointed this out in what I thought was a considerable amount of detail. The response? &gt; Hopefully Ruby 3 will bring some type goodness without the drawbacks. If you want to write C++, go write C++. And including weasel comments like "According to the author, contracts.ruby can have almost no impact on your performances depending on your use case" doesn't convey any useful information. * What use cases does this break (besides anything that assumes Ruby works *as* Ruby)? * How much is "almost no impact"? 2%? 20%? We found significant performance hits when compared to raw calls, up to about 20% slower when using 3-4 parameters each with Contracts allowing two or three possible type values (e.g., `Maybe[Or[String, Symbol]]`). If you're working with existing code, you've probably got methods that are that flexible in their inputs. [Postel's Law](https://en.wikipedia.org/wiki/Robustness_principle) is still a Good Thing: &gt; Be conservative in what you do, be liberal in what you accept from others. **tl;dr** Yes, this is a neat hack to show what can be done — up to and very nearly including turning Ruby into what works as though it were a statically typed language. But the damage done to Ruby in the process is considerable, and *should not* be undertaken without a healthy respect for and clear understanding of the consequences and tradeoffs.
question: Why are there ascii control characters in an xml doc? They are excluded from the spec. http://lists.xml.org/archives/xml-dev/199804/msg00502.html but there is this: http://lists.xml.org/archives/xml-dev/200006/msg00360.html
The problem with this is that these errors are still reported at runtime. One of the main benefits of types is that they allow you to catch errors at compile time. But, since there's no "compile time" in Ruby, adding types without this benefit is almost useless (in my opinion). 
Rails Antipatterns ([free pdf](http://www.mohitsharma.net/sites/default/files/Rails.AntiPatterns.pdf)) is fantastic if you want to get into or polish up your web development. I also recommend [Confident Ruby](http://www.confidentruby.com/) for general architecture. 
I parse data which was not expected to contain any control characters into xml format. Unfortunately, there are some occasions where I get control chars as well. Idealy, I would like to keep the original characters as part of the xml, but I can also use their hex values or something similar instead.
Thanks, make sure to check out the refactored version in the other reply. Let me know if you want anything explained.
I keep it in mind and redesign our classes. Thanks for your responses and references :)
No, this is not possible. The only way to do that is by making a native system package. This differs on every OS. Ubuntu/Debian uses .deb packages, RedHat/CentOS uses .rpm packages, Gentoo uses something else, Arch Linux uses yet something else, etc. Packages are most of the time even OS version specific. Unless you have enough expertise to build executables that work on multiple Linux systems, you'll have to build separate packages for every Ubuntu version, every Debian version, every RedHat version, etc. Some operating systems, like OS X, don't even have a package manager that allows you to specify dependencies. If it sounds like a big mess, that's because it is. I am the author of [Phusion Passenger](https://www.phusionpassenger.com/), and I spent about 5 months creating a system for automatically building Debian, Ubuntu, Red Hat and CentOS packages for Passenger. If we didn't have paying customers I would never have bothered. The easiest solutions that I can think of for solving your problem, are [FPM](https://github.com/jordansissel/fpm) and [Omnibus](https://github.com/chef/omnibus). They are tools that help you automate the creation of packages, but fundamentally you still have to understand the concepts of each OS package system.
Ruby? Sure, absolutely. Although for web development, you want some kind of support beyond just 'ruby', which is why people use Rails. Rails? Not too difficult to pick up? For someone new to web development? I dunno. Give it a try and find out. 
Phusion Passenger is great by the way! Thanks for that. I am an avid user of it.
Mexico vs. Trinidad and Tobago: Gold Cup 2015, Schedule, Predictions, Rosters, Stream &amp; Preview Latin Post‎ - 1 day ago Mexico and Trinidad and Tobago will square off in a critical Group C game. The winner of ... Mexico vs. Trinidad and Tobago 2015 live stream: How to watch the Gold Cup online SB Nation‎ - 35 mins ago More news for mexico vs trinidad y tobago live stream Trinidad and Tobago National Football Team :: Live Soccer TV www.livesoccertv.com/countries/trinidad-and-tobago/ Trinidad and Tobago National Football Team TV and Online Streaming Schedules :: Live Soccer TV. ... Fixtures / Results / TV Schedules / Live Streams. Live; Delayed/Repeat ... PAG · Jul 18, 5:30pm, Trinidad and Tobago vs Mexico. *Women ... Mexico vs Trinidad and Tobago Live Streaming www.cricfree.tv/live/live...streaming/mexico_vs_trinidad...tobago/9201 Mexico vs Trinidad and Tobago Live Streaming ,Mexico vs Trinidad and Tobago Live Stream , Watch Live Mexico vs Trinidad and Tobago Streaming , Mexico vs ... Mexico vs Trinidad y Tobago en VIVO - Ustream www.ustream.tv/channel/mexico-vs-trinidad-y-tobago-en-vivo Oct 26, 2014 - watch online Mexico vs Trinidad &amp; Tobago Soccer live streaming online @ http://nowwatchtvlive.com - Direct Link ... Mexico vs Trinidad y Tobago - Ustream www.ustream.tv/channel/mexico-vs-trinidad-y-tobago Social Stream. Chat ... Mexico vs Trinidad y Tobago, para ver online en Alta definicion entra a http://www.chidatv.com ... Facebook, Yahoo, AOL, Windows Live. Mexico vs Trinidad &amp; Tobago Live Stream Free Football ... www.christianpost.com › entertainment Jul 20, 2013 - Mexico vs Trinidad &amp; Tobago Live Stream Free Football: Watch Online ... Mexico vs Trinidad y Tobago 7-1 Preolimpico de Concacaf 2012 TV ... Mexico vs. Trinidad and Tobago 2015 live stream: How to ... www.sbnation.com/.../trinidad-mexico-2015-live-stream-gold-cup-watch... 35 mins ago - Mexico suffered an embarrassing draw against Guatemala in their last match, but they're still very much in control of their own fate in Gold Cup. Watch Mexico Vs Trinidad And Tobago Live Stream Online ... Video for mexico vs trinidad y tobago live stream▶ www.youtube.com/watch?v=VIrKO7w73Mk 11 hours ago - Uploaded by Liv tv Watch Mexico Vs Trinidad And Tobago Live Stream Online. Liv tv .... Mexico vs Trinidad y Tobago 7-1 ... Mexico. vs. Trinidad. and. Tobago. Live. Stream ... - Reddit https://www.reddit.com/3de3sz 5 hours ago - Mexico vs Trinidad and Tobago Live Stream, Watch Mexico vs Trinidad and Tobago Online, Trinidad and Tobago vs Mexico Live Stream ... {MIRBI.} Mexico vs Trinidad and Tobago Live Streaming ... www.reddit.com/3df4qy/ 1 hour ago - Mexico vs Trinidad and Tobago Live Stream..[CONCACAF]..GOld..Cup..2015..15..July..Start..Time Watch Mexico vs Trinidad and Tobago Live... 
One thing that works fine in my opinion (as far as open source projects go) is displaying a message at gem install that you need to have X installed for this gem to function. In addition, having the gem itself handle a missing executable and raise an exception + print a descriptive error is always a good idea, package or not. 
Hello, to celebrate the successful flyby of Pluto by NASA's new horizons spacecraft - allow me to highlight a little (unknown) Ruby gem named in honor of the formerly smallest planet, that is, pluto. Try $ `gem install pluto` What's it good for? Try `$ pluto help` Resulting in: NAME pluto - another planet generator - lets you build web pages from published web feeds SYNOPSIS pluto [global options] command [command options] [arguments...] GLOBAL OPTIONS -c, --config=PATH - Configuration Path (default: ~/.pluto) -q, --quiet - Only show warnings, errors and fatal messages --verbose - (Debug) Show debug messages --version - Display the program version --help - Show this message COMMANDS build, b - Build planet install, i - Install template pack list, ls, l - List installed template packs update, up, u - Update planet feeds merge, m - Merge planet template pack about, a - (Debug) Show more version info help - Shows a list of commands or help for one command Cheers. Happy Planet.
##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** ##**CLICK HERE »=» [CLICK THE GIVEN SOCCER LINK BELOW TO WATCH LIVE TV IN HD](http://www.edigitalplace.com/amember/aff/go/aniketanik/?i=180)** 
So help me understand how this works. If I give it an RSS feed, it will create a local copy for me to browse? 
hola bueno jajajaj
For what it's worth, `ActiveSupport::MemoryStore` is incredibly slow despite performing comparatively well in this benchmark. Despite being an in-memory store it still follows the `ActiveSupport::Cache` interface which means it serializes everything stored in it. This is probably fine for web caching but don't try to use it as an arbitrary object cache. 
What would you use instead? And, for using Rails fragment caching, you have to use something that follows the ActiveSupport::Cache interface, no? Are there alternatives to the standard Rails fragment caching API's that you use for doing this sort of thing? 
You should check out ruby-install and chruby... Google 'postmodern ruby setup'.
Just to clarify, i'm not the author. :)
In TMDB when you look for an ID you get a specific "movie object"... and then you could look for more info related to that movie, but since every endpoint its kinda like it's own object, at least for me, makes sense to use Class Methods. Besides, if you actually wanna do instance methods on the related endpoints to the original movie, you would have to do more API calls creating overhead, so it actually saves you calls by doing it explicitly with class methods.
But you do work @ 18Months right? I haven't fully checked the gem, but my company also works with the TMDB API and I'm very interested in contributing to the gem, but first I wanna compare what we already have to this gem (which seems pretty much the same in a less encapsulated way). Anyway, for what I've already checked in the readme, seems pretty complete and VERY useful. Gratz
ruby programs should be written the ruby way. not the c++, not erlang way. it's like using XML for any type of data. you can do it, but it's usually not the best idea. ruby is not annotation-based language. it is powerful enough to solve this problem in various other ways (just write a couple of tests). and just because you can do such annotations, definately doesn't mean you should and in this case this is not right. also, pattern matching. really? and there goes KISSness of your code.. so. think simple. think Ruby.
[`set_trace_func`](http://apidock.com/ruby/Kernel/set_trace_func) Monkey patching + method aliasing would probably work as well.
Unless I'm being stupid: module MyCounter def divmod(*args) @@_count ||= 0 @@_count += 1 super end end class Fixnum prepend MyCounter end N.B. I haven't tested this or anything. Edit: Forgot *args
Yes, chruby is a lot more light weight. Rbenv adds a "shims" directory to the front of your `PATH` environment variable, then uses "rehashing" to to maintain shims in that directory to match every Ruby command across every installed version of Ruby. Chruby uses `PROMPT_COMMAND` to switch the context: "Bash provides an environment variable called PROMPT_COMMAND. The contents of this variable are executed as a regular Bash command just before Bash displays a prompt." Where rvm (which uses another method, overriding `cd`) and rbenv have given me headaches in the past, chruby has always worked very smoothly. It may not be worth making the switch if you already have rbenv or rvm working, but definitely take a look next time you refresh your system. More information about the differences can be found here http://zaiste.net/2013/04/towards_simplicity_from_rbenv_to_chruby/ (which I basically ripped off for this post).
I apologize, I didn't go through the readme yet (not in the office) but does this allow for finding a movie by partial title? Such as *min* would find *Terminator* as well as *A beautiful mind*.
Prepend is a wonderful thing! Amazing for language level monkey patching just like this! No method aliasing just pushing yourself to the front of the ancestors.
I was thinking CamelCase but upon one more second of thought turns out I'm an idiot who's read to much java recently, it's high time to get back to my beloved ruby =(
Huh, I didn't even know you could do that! Is that new in 2.2? 
Why would you be doing more API calls? Just going by the code example above, you could just define Movie#reviews like this: def reviews self.reviews = self.class.reviews(self.id) end 
Having completed this exercise and struggling with it, I look forward to this!
Nice, will definitely try that out, virtus default conversion behavior imo is not correct
Gentoo uses ebuilds, by the way.
Which is why I suggested using a method in the final example. Seems preferable to meta-programming the tests themselves.
Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ = Watch Here = http://renews24.com/rugby/ =
 ruby &lt;ruby_source_code.rb&gt;
Nevermind, I figured it out. Thanks!
Awesome! Thanks. I will try it this week-end!
Also, Samuele is completing the documentation right now, and I think that for the weekend will be complete. Feel free to PM me if you need any help!
It's interesting to see that people are still building Virtus clones. 4 years after its first release I have to say I no longer like this concept. Virtus was extracted from DataMapper and it brings with it a couple of ideas that I see as anti-patterns. Defining attributes along with coercions with the temptation of adding even more logic and trying to treat those objects as some sort of "domain entities" is simply mixing multiple concerns in one layer. I stopped doing that and these days I prefer to have an explicit separate layer where input can be sanitized, coerced and preprocessed in whatever way that's needed prior sending it to a constructor of some entity model class. I also think Virtus has way too many features that were added mostly to be "handy" and "convenient" (classic approach in Ruby in general, ugh) without realizing that it's becoming overly complicated. Complicated libraries even though they may feel "easy to use and handy" don't really help in the long term, especially if your stack is built on top of many complicated libraries that together only add confusion to your system. Also take a look at "transproc + anima" vs "virtus" here: https://gist.github.com/solnic/9887ba2549bba43a890f - it's not only faster but also much cleaner from the design point of view. Even if Virtus was optimized (lots of low-hanging fruits there esp in coercion lib) it would still be hard to keep it clean and simple while supporting all the complex tranformation/coercion scenarios.
Before Ruby 2.0 there was no direct support for keyword arguments. People just used methods with a last argument that happened to be a hash, and conveniently, you could omit the curly braces when calling it. def method(options={}) # do something end method(:key =&gt; value, :other_key =&gt; other_value) I can't find any direct documentation about the subject: the [MRI documentation on methods](http://ruby-doc.org/core-2.2.0/doc/syntax/methods_rdoc.html) does not elaborate on how calling methods with keyword arguments work. But I assume that, if possible, a single hash passed to a function that takes keyword arguments will be converted to fit. Unlike your example, in my tests using a hash with string keys also gets converted. def method(arg: 1, other_arg: 2) puts arg, other_arg end method({arg: 1}) # 1 # 2 method({'arg': 2}) # 2 # 2 method(arg: {arg: 2}) # {:arg=&gt;2} # 2 I didn't know about this either, and it's indeed strange and seemingly error prone. If possible I'd avoid having positional arguments that are hashes if you also have keyword arguments. Taking everything by keyword and raising an exception manually if something necessary is missing is not ideal, but will probably lead to less confusion in the future. 
There are exerts here https://pragprog.com/book/adrpo/ruby-performance-optimization
I am at the same place, though I am quite grateful for Virtus (and all your work!) I found that ActiveRecord had ultimately shaped my brain into a misconception about domain models -- that a model was a mutable data structure with methods slapped on top of it. This meant when I stopped using AR for everything, I put Virtus objects everywhere. Later I discovered that ultimately the nature of making changes to a business object is fundamentally different to reading the state of a business object. Before, when I saw a blog post, for example, all I saw was creating, reviewing, and updating bags of attributes. Now I see "submit copy," "publish," "redact," "add comment," etc. All of those actions are eventually persisted as events, which have a very flat structure, and are actually best represented by `Hash` objects or simple `Struct` type primitives. The only time I need type coercion and data validation is the first time the data appears in my system -- e.g. when the API endpoint is deciding whether or not to record the event.
Thank you for the response. But it's still not clear what should I do in my code.
Thank you sooo very much! It works and I understood the logic. Thank you again
Great library. We used this a bunch at Lonely Planet, and I'm still using it today.
`cat file_name.ext | sed -e 's/,".*//'`
I *don't* know, that's why I added "or whatever it is".
win u see it....
I've since switched to Pundit full time. It's dead simple, based on plain old ruby objects, and does not involve crazy DSLs. https://github.com/elabs/pundit
Never seen the IO method before, but always nice to learn something new. Just tried this and it works!! Thank you! Upvoting you good sir!
`","` is a string containing a single character, `"",""` is two empty strings, and `""","""` is a string containing three characters: CSV.parse_line '",","","",""","""' # =&gt; [",", "", "", "\",\""]
I think it's still relevant. You have to mentally switch the syntax around but the concepts on how to test, do bdd/tdd, are still relevant
If you consider this just keep in mind that SQS, like any distributed queue, can only guarantee 'at least once' semantics. This means any subscriber may get the same message more than once. You need to design your system to deal with this which can introduce a _lot_ of complexity.
Yes. I read the earliest draft published and thought it was very interesting. It made inspect my dependencies more closely, judge others' code differently, and think more about what effects my decisions will have on people who rely on my code. I think it's a good read for anyone who writes code that becomes other people's dependencies.
No problem, glad it worked since I was unable to test it before posting.
Yep, definitely. That's being handled by the circuitry gem that we built for this. If the message is handled properly (didn't raise any errors), then SQS is notified that it's been handled. If an error is raised at any point, then SQS is not notified that it has been handled, and thus remains on the queue to try again.
I may not have explained our approach well enough in the blog post then, so my apologies. Each queue is app-specific, and each app only has one subscriber. There is no risk of a message being received twice by multiple subscribers because of that architectural decision.
Yep, that can work, ultimately it depends on the application. When do you store the message id? If it's a long running job that is handling the message you could store the message id at the beginning of the job in some reliable store and then have the job fail mid way due to some uncontrollable situation (e.g. worker node dies). You could store the message id only at the end of the job, but then you could get concurrent execution, assuming your subscriber is multi-process or multi-thread. You could take out a 'soft lock' at the start and have some reaper process clear it after a timeout, just better make the reaper reliable. etc, etc. Mono-rails may be difficult to work on but distributed systems are much harder. Really, a hard line guarantee of 'exactly once' processing in such systems isn't going to happen without a _lot_ of care taken. For what it's worth, our highest throughput SQS queue handles 4k message/sec, and it goes into a slightly bonkers mode with high latency and duplicate message delivery every 2 weeks or so. Usually lasts a couple hours at most. Our messages are small, quickly processed and it isn't mission critical that they aren't processed twice, though we would prefer to avoid it. We use a memcached cluster for the message ids with a 24hr expiration but that still isn't super safe, if a memcached node were to die we could reprocess message ids that were stored on that node. 
Your first paragraph describes exactly what I was thinking. Have a soft "processing" lock with a reasonable timeout (configurable by the application) that changes to a hard "processed" lock once it successfully completes. I imagine that since this is a distributable gem, I could offer locking strategies (i.e.: memcached, redis, db, etc.).
&gt; Ruby has special handling for passing Hashes to methods and I'd rather say inconsistent, because it handles arguments quite different based on type of hash key(s). Still not sure if this is an implementation issue or half-baked design decision, because not yet seen full specification. &gt; your proposed way of passing these arguments makes them very confusing to use in practice, that is fairly objective. Really ? What's so inherently wrong with that ? I see nothing strange or special, positional argument to be set with hash object (or an array, struct, string or any other valid ruby object). Find unjustifiable make an exception to the rule here. Things are getting nastier even without passing hash to a positional argument: def fn(arg=1, kwarg: true); p arg, kwarg; end fn({kwarg: false, 'rubbish' =&gt; 999}) {"rubbish"=&gt;999} false =&gt; [{"rubbish"=&gt;999}, false] # ehm, hash elements with other-then-symbol key is assigned # to a positional argument # what about multiple arguments with default values ? def fn(arg=1, otherarg=2, kwarg: true); p arg, otherarg, kwarg; en fn({kwarg: false, 'rubbish' =&gt; 999, 'xxx' =&gt; 123}) {"rubbish"=&gt;999, "xxx"=&gt;123} 2 false =&gt; [{"rubbish"=&gt;999, "xxx"=&gt;123}, 2, false] #I can start see the pattern here, all non-keyword (symbol =&gt; value) # elements are assigned to a first positional argument, but … # what if some has not got a default ? fn(arg=1, otherarg, kwarg: true); p arg, otherarg, kwarg; end fn({kwarg: false, 'rubbish' =&gt; 999, 'xxx' =&gt; 123}) 1 {:kwarg=&gt;false, "rubbish"=&gt;999, "xxx"=&gt;123} true =&gt; [1, {:kwarg=&gt;false, "rubbish"=&gt;999, "xxx"=&gt;123}, true] # so whole hash is swallowed by first non-default argument, # including `kwarg: false` keyword argument ? # But what about following call of the same method ? fn(100,{kwarg: false, 'rubbish' =&gt; 999, 'xxx' =&gt; 123}) 100 {"rubbish"=&gt;999, "xxx"=&gt;123} false =&gt; [100, {"rubbish"=&gt;999, "xxx"=&gt;123}, false] # For no logical reason, hash argument is not swallowed by otherarg # but kwarg is assigned and removed from hash. What ?! I'm losing you Ruby here :(
Doesn't cover HTTP caching so not complete. Seemingly still not replacement for my guide, but it's certainly newer.
&gt; para 2 My favorite way to do that, a little joke to myself, is to list possibilities in a case-when-then-when-then and then put my own HumorouslyNamedErrorClass.new("I don't know what the fuck I'm doing.") on the else. 
I finished Rails 4 Test Prescriptions a couple months ago. It was very good and I'd highly recommend it. It gave a good feel for how to develop a test suite for an entire project. 
Decouple your Ruby applications by coupling them to proprietary Amazon services! Sweet!
Is it useful outside of rails? I've seen quite a few rails specific things but I'm not sure how widely applicable they are. We're using ruby as a glue language for systems stuff and for writing microservices with Bunny.
FYI: You can see an all-in-one page live book example for - surprise, surprise - [Strange Case of Dr. Jekyll and Mr. Hyde](http://drjekyllthemes.github.io/jekyll-book-theme/) by Robert Louis Stevenson online. Happy reading (and forking). Cheers. 
Your last two examples are inconsistent, and it looks like a bug. You should report it here: https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport
I'm pretty sure you're meant to write the tests as you go. It's like a thing.
Examples?
Sinatra is a good starting point, and there are a bunch if tutorials on building to-do lists and such with it. Fun weekend learning
Examples of small scripts? Log parsers, data parsers, setup, teardown scripts. Reporting scripts. 
Well I guess the name would imply it's fairly Rails specific, but I think that it's explained in a way that would have broad application. 
Pundit and Refile are both probably good examples. jnicklas writes good stuff. I'd recommend jeremyevans' stuff too, like [Roda]( https://github.com/jeremyevans/roda).
Not sure if you wanted a "rails project", but I know this Ruby gem here: https://github.com/braintree/braintree_ruby Rails projects that are more than just "Todo", (way bigger!!!!) you could look at: https://github.com/discourse/discourse If you want something kinda small focused (small API but decent amount of code), I use this gem , also forked it, so yeah it's used: https://github.com/holidays/holidays
I hope this book is 200 pages of " don't do it". In comic sans of course. Last page is a link to the Apple store, and vagrant.
Those are great, thanks.
Oooh then yeah, stay away from the rspec book. It's mostly for concepts and if you already understand them, then you probably won't get much out of it. If you're just looking for syntax, then I would imagine that [the main page](http://rspec.info/) and [docs](https://relishapp.com/rspec/rspec-core/v/3-3/docs) are your best bet.
I would agree with pundit. Refile, too as long as you do not take anything away from the working logic -- it is poorly engineered IMHO. 
I did an article on `grep` recently: http://aaronlasseigne.com/2015/04/01/know-ruby-enumerable-grep/ When I ran benchmarks I was surprised to find that `grep` was not always faster than `select`. It really depends on what you're trying to do. It's been a few months so I don't remember the exact cases that where `select` won but it caught me off guard at the time.
Agreed, it does tend to read well.
[string interpolation!](https://rubymonk.com/learning/books/1-ruby-primer/chapters/5-strings/lessons/31-string-basics) Try this: Nokogiri::HTML(open("http://website.com/#{count}"))
figured it out right before this comment, but thank you, as this is definitely the way to do it!
Yes, the core problem is people but it's still a problem. If you need to hack the Ruby interpreter though, that's a sign that you've got a square peg/round hole situation. BTW, I have been using Ruby and Python on Windows, Linux and sometimes OSX for years. But when you're dealing with something very Windows-specific like COM, well you should just use C# or Visual Basic. Trust me, I agree with you. The above is also part of the reason I left that company. :)
It's not directly answering your question, but I would suggest trying to review what gems you are already using. They aren't always going to be the most sterling examples, but they are as real as they get. If you can get into the habit of looking at a gem's source rather than just it's documentation, you'll be in a pretty good position. You mention Rails as being pretty complicated, and it totally is. There are multiple gems in the [rails/rails](https://github.com/rails/rails) repo which isn't standard, but it is Rails so it is as professional as you can get even if it's complicated to start with. You might not be able to understand how it's all tied together immediately, but that gives you something to work towards.
* There is the "Chef" server provisioning tool written in Ruby (can be used for hosting apps in any language) * There is the "Capistrano" deployment tool written in Ruby (also for language-agnostic deployments) * The "Homebrew" package manager is written in Ruby Two days ago I used Ruby to upload my photos to Flickr (it wasn't some hacker fun, I really needed it, Flickr website and all of the other tools are bad at uploading large amount of photos). So, yeah, lots of things you can use Ruby for :)
I'd say keep learning Ruby as much as you can. I did Ruby development for 4 years before jumping in to Rails, there is so much that can be done. Rails can be a great tool, but you'll benefit much more from continuing to learn Ruby first. Also, I'd second /u/nepalez suggestion of using other frameworks, to better learn web dev in Ruby (which Rails lets you avoid). I haven't used Lotus, but Roda is excellent, and Sinatra has historically been very popular. Volt is incredibly exciting, but I'd wait until you have some more experience building web apps in Ruby, as it is quite a bit different.
Thanks for the suggestions. I was looking into Eloquent Ruby already, as there's an option for my e-reader.
Since no one brought it up yet, I really like the code from rack. It's so nicely written, I sometimes debug that instead of rails when something is wrong with a request :)
[`!~` and `&amp;&amp;=` are missing.](https://github.com/anildigital/ruby-operators#contribute)
What If I want to scan barcodes via a usb barcode scanner and display their code on a webpage ? Any ideas how will I achieve that ? How can I trigger a value refresh (possibly ajax) on an external event (usb read scan code) ? As far as I have seen, If you open up a terminal in OSX and press the scan button of a usb scanner, a beep sound is heard and the code is written to the console prompt like it is written by keyboard.
Lack of experience designing object oriented software. If you lack that it might be harder to see where to apply POOD teachings and you might end up with skewed objects. I think metaprogramming ruby 2 is the next step after well-grounded. Ruby is known for its metaprogramming features and not knowing/using them would restrict you as a ruby programmer. 
I have moved from rbenv to chruby, at first i installed ruby-build and wasn't sure if that was correct as I noticed ruby-build was an extension to rbenv, but anyhow I moved to ruby-install and deleted ruby-build. Installed the latest ruby version with it to ~/.rubies and then had chruby set the ruby version in my bash_profile. I can see chruby is much more light weight though.
This is great man, thanks. I was literally just looking at the Layer Platform API on Friday with an intention of using it for an iOS project I'm working on. For anyone that cares, I was in contact with Layer support last week too and some cool things are in store for the future. Raising the participant limit and in the medium term, Channels, a sort of public chat feature. &lt;3 Layer.
This probably shouldn't be used for untrusted-user-facing applications on any Ruby version prior to 2.2, since up until then symbols were not collectable, and casting arbitrary hash keys to symbols is a recipe for a memory-exhaustion DOS. Any place where user input may be cast to a symbol is a vector. For specialized applications such as data stream processing, you're probably better off just creating hashes with symbol keys in the first place, to avoid the GC overhead of creating throwaway strings to create symbols from. If you're parsing something like JSON, you can use the symbolize_names option out of the box.
True. this shouldn't be used in exactly the case that you mentioned, that's why I created a separate gem without even trying to suggest to include this in Rails 5 (not sure if they're going to require 2.2 for it). However, in a data stream processing case, you can have many developers working on the same pipeline but each one writes a separate step, and steps may even depend on third party gems, and hence it's difficult to guarantee that everything will be symbolized by default. And this is where this gem becomes useful. The main reason I've built this is because we faced that problem with another project, called [OptimusPrime](https://github.com/pocket-playlab/optimus-prime), that we're working on in the company, where developers from many experience levels are working together, and data can be collected from many sources, so it's quite hard to guarantee anything through the every single step in the pipeline and you'd better have inexpensive Hash with indifferent access.
Cheers man, appreciate it and let me know if you have any questions/issues :) Yeah their Atlas UI kits look really nice and they have some sweet API's being released soon. I plan to extend this gem around them when they're released. Personally looking forward to the Web Socket notifications API, which will allow you to receive real-time notifications from Layer's servers
I had trouble convincing my then lecturer that hashrocket was a real thing, given what kins of hash, the word 'hash' normally denotes in both our languages.
&gt; the word 'hash' normally denotes in both our languages A data structure that stores a mapping of objects to other objects? Or do you mean the hash symbol (#)?
Really liked the first example. Didn't know about that.
Obviously `!~` is Geordi La Forge from startrek. `&amp;&amp;=` I'm not sure. Looks like a truck to me. 
Yep, I definitely shouldn't code late at night. :) I ended up switching redis to use the newest SET syntax, which supports both NX and EX without the need for MULTI. I also ended up using the ADD method in memcached, which seems to have the equivalent effect. Regarding your last point, I wrote that off as something that I think is acceptable in the sense that I don't think it will result in any issues related to atomic operation. At this point, it ultimately doesn't matter what value I store in redis or memcached, as long as I set the correct key and ttl for each.
I meant that in a number of non English languages hash usually only means hashish and he thought I was making up the name. It wasn't a comp sci course and the guy was a designer so he didn't think hashtable first.
What does "elvis" do? Is that just the &gt;=1.9 symbol key hash syntax, or is ?: a thing? 
This site is awful in mobile, the list is way too small
I've been calling the twiddle wakka a spermy operator.
I haven't looked through it too extensively but really appreciate what appear to be your thorough tests. Far too often, it seems like someone will share a gem to this subreddit that claims some fantastic features without tests to back anything up. I wonder if HashWithIndifferentAccess in Rails 5 is going to be modified to store keys as symbols. They are dropping support for Ruby &lt; 2.2.1 and my understanding is that it's due to heavier reliance on Symbols, so this seems like a change we can look forward to.
I guess that's good! I'll check it out.
Did you just invent some of these names? I dont know anyone who calls `@` the "spiral" operator, and a bunch of other names seem just made-up too (i.e i've never heard anyone use them, and i've been a rubyist for &gt; 8 years)
So just get them both and figure it out! why do you think a bunch of random people on reddit will know better than you what will work best for you?
"Looking upon this past year, I wish some other orphaned projects would enjoy this kind of revival." Any example of a gem you think should revived?
Really awesome, does this only work with the built in unobtrusive js of rails or will this work with and js framework and correctly tie the stack trace the of the ajax request to the Ruby code?
+1 for `interactor`.
Excellent news, thanks!
This is not using rails, it's using http://voltframework.com
This makes me very happy!
This is not Rails code, actually! It's part of [Volt](http://voltframework.com/), which is a non-rails framework that uses Ruby in the whole stack (even runs front end code in Ruby). The Ruby code you see is running inside of the users browser via [Opal](http://opalrb.org/). So it's not quite the same as UJS.
It's open source, so maybe that person could be you? Any idea why it happens? I'm sure the new maintainer would appreciate a pull request.
Just put a text box on your web page and focus on it. Whenever enter is hit, treat it like a barcode scan event and process the text box's contents.
Ruby can be also compiled with Visual C++ 2013, see this [blog entry](http://cristianadam.eu/20150719/octopress-on-windows/). There I've tuned ruby for Octopress, but it can be tuned to other cases too. GCC also supports Profile Guided Optimizations.
Source examples come derived from your source code. I'm not going to refactor your code for you, sorry. Your criticism is apparently meant for yourself.
RE: Xavier Shay. Yes, 100% of errors are due to methods having the wrong number of arguments... instance_doubles will solve everything... /s You mistake lack of interest with poor language skills. Let me just write a 1000 word blog post to address a common sense issue that nobody else needs to read. I can assure you that 99.9% of readers saw the problem after my first comment. Everything following was a reflection of your inability to accept criticism with dignity. If you want blog posts, [many](http://ngauthier.com/2010/12/everything-that-is-wrong-with-mocking.html) [posts](http://fredwu.me/post/59395419899/writing-sensible-tests-for-happiness) exist that might help you. Personal attacks - umad?
Datamapper. Still my preferred ORM but is missing some stuff like prefetch of associations, improved associations, and there are some bugs that were never solved.
This is good. i'd add a section about the Gemfile.lock and how it's created/updated based on your Gemfile, and what it does. 
I've recently studied a situation with scientific and quasi-scientific libraries in Ruby (for some conference talk) and it seemed to me there *were* lots of them one day, but most are abandoned, even mature and good looking ones. Like stuff form markov chains, neural networks, text analysis and so on. Partially its because Ruby IS slow for scientific tasks, but it also IS very expressive and basically easy to learn and use, so I think current situation with sci libraries is a shame. (Though SciRuby project tries to change it, to be fair.)
&gt; you're probably better off just creating hashes with symbol keys in the first place, to avoid the GC overhead of creating throwaway strings to create symbols from. In Ruby 2.2 string hash key literals are automatically interned, e.g. `my_hash['Content-Type']` doesn't allocate a new string for `Content-Type` every time its called, nor does `my_hash = { 'Content-Type' =&gt; :json }`. Given the way OPs code is implemented though I don't know if the interpreter will still trigger this optimization. 
haha – you know what I had a section on it planned out and I thought "nah too much for one post" should have just kept writing. Thanks, I will look at add it soon.
Sure, make it a separate chapter linked at the bottom if you want. Or split up this post into sections generally, I dunno. 
I liked it. The major topics it discusses are profiling approaches, common bottlenecks, patterns to use/look out for in Ruby/Rails code (eager load, closures, in-place methods, loops instead of `#each` for memory intensive operations, etc), and briefly on the GC. The whole book really gives flare of performance concerns to have when writing Ruby code (basically boils down to: watch for blocking IO, watch for allocations that cause GC, watch for hanging on to object references that prevent GC) Worth the 20-30 bucks
Alright thanks. Looks like it's what I'm looking for.
Thanks for the blog posts. That is all I was looking for. And I am okay with accepting criticism and modifying my approach when it is just and followed up with some concrete examples which you have done now. I can see your perspective on the issue. Your initial comment provided little to no value with any supporting evidence. "No, you're wrong, do this" is not criticism. And why on earth would I get mad at a glorified plumber with an ego living behind a keyboard? ;)
Agree, good article, and should mention lockfile :-) specifically, I'd also mention why you SHOULD include Gemfile.lock in a git repo, despite being machine generated. I might also add a small section mentioning require: nil/false option for gems that shouldn't be autoloaded.
&gt; It isn’t recommended to have more than one source per project. Why? I've had multiple projects use multiple sources - when you have a private gem repo, you have to use multiple sources unless your private repo is setup to mirror rubygems.org (which can be a good idea).
I took that recommendation from the Gemfile man page. http://bundler.io/man/gemfile.5.html &gt; It is possible, but not recommended as of Bundler 1.7, to add multiple global source lines. Each of these sources MUST be a valid Rubygems repository. My understanding is because unless you are scoping them you could get an unknown mix of gems from different sources. With something like a private gem repo I think this is safe enough, but as general advice don't just load in sources. Part of me wonders if it is because *nix folk are used to having loads of sources in their package managers and don't want people copying that idea across.
Ah, interesting they now recommend not using multiple sources - the potential mix of gems is definitely a risk when using multiple global sources and can take some extra care to prevent.
Look into "fuzz testing", https://github.com/seattlerb/heckle is one example
&gt; And why on earth would I get mad at a glorified plumber with an ego living behind a keyboard? ;) Well said :D. My perspective as well, hence "lack of interest". I didn't feel like making a huge argument and digging for sources, so I apologize for not posting them earlier. I didn't have much hope for you seeing my perspective anyway at the time. I hear, "100% test coverage" and think "Oh boy, you're doing it wrong". Test to achieve a "given level of confidence". [Here's another](http://www.thoughtworks.com/insights/blog/mockists-are-dead-long-live-classicists)
Yeouch.. it still seems Ruby is a second class citizen on Windows :(
This is generally a good idea but only if you will be writing about purely technical topics. Github, while not having it as a stated rule, is more than happy to swing the banhammer if someone is offended by your writing and complains. A VPS for something like this can be had for about $5/month from various providers.
See, I feel that you've tried hard to make everything as clear as possible. Yet there's some things that can be done better. **Library**: First of all: decomposition. I feel both sense of "over-decomposition" in the code of your gem and sense of "under-decomposition". Over-decomposition: for pretty simple library (which, if we look at API it wraps, is unlikely to became much more complicated) we have: 2 separate modules included into main class; 2 exception classes (each used only once), long options with implicit defaults and so on. And, for the record, some of it is plain wrong: error meaning "service **returned** an error" should NOT be inherited from ArgumentError, which means "you provided wrong arguments" (and should be called something like ApiError, not InvalidParamsError). Under-decomposition: * [this line](https://github.com/max-si-m/ip_info/blob/master/lib/ip_info/parser.rb#L17) is complicated enough to do separate method, even module; also, as such kind of api hash operations is so widely used, that there should be a third-party code for it; also, the logic is pretty complex and will be happy to have separate test/specification; * there is EXACTLY two values of option "type", which typically implies it will be easier for user to have methods "lookup_city" and "lookup_country", then remember/look at docs for possible values; even more important that API you are wrapping represents it as [separate API methods](http://ipinfodb.com/ip_location_api.php). It is usually a good idea to map source API methods to your code API methods (unless source API is really badly designed). ipinfodb docs even say that methods are different in accuracy and performance -- which also seems a good idea to mention in your docs. BTW, when having two methods instead of generic "lookup", you'll don't need options at all, as the remaining "option" (timezone) is boolean and can play as just an optional second argument. **Specs**. There also are several problems. First of all, you are not checking all branches (even of typical usage). Question: what will your library do if I'll try client = IpInfo.new(valid_api_key) (Hint: it will fail miserably.) Second: development with RSpec usually named "*behavior*-driven development", but you are not specifying any *behavior*, you just check like your methods work. Simplest behavior test for the library should possibly look like this: * when user provides API key (via argument or ENV) and do lookup, the key is passed to ipinfodb; * when user provides arguments, they are passed to ipinfodb; * when ipinfodb returns valid response, it is parsed correctly and returned to caller; * when ipinfodb returns an error, it is thrown at user, preserving error message; * (and so on, like "when user provides incorrect, yet not empty API key, there's something predictable happening"). Currently, your code have specs only for: "my class can grab something from ENV and store it in variable" and "there's a method, which can parse some hash". The specs in [request_spec.rb](https://github.com/max-si-m/ip_info/blob/master/spec/ip_info/request_spec.rb), on the contrary, are very hi-level and are relating on what values ipinfodb have returned when you've developed the library. Take a look at [webmock](https://github.com/bblimke/webmock) or some similar library for reliable API wrappers testing. **Style**. There's many things I'd say about style, yet it is generally personal taste question... Though, personally I find thing like [rubocop](https://github.com/bbatsov/rubocop) very helpful for cleaner code. Yet some things in your code are just feeling wrong. Like this: time_zone = (options[:time_zone] == true ) ? true : false It is obviously super-redundant for boolean variables. # exactly the same: time_zone = (options[:time_zone] == true ) # more Ruby-ish, allowing any truthy value to be treated as true: time_zone = !!options[:time_zone] And like this: params = {} params[:key] = self.api_key params[:ip] = ip params[:timezone] = time_zone params[:format] = "json" What about just: params = {key: api_key, ip: ip, timezone: time_zone, format: json} Sorry for long post. Good luck!
Relying on setting proper ENV variable in tests and connecting with external service is really bad idea. Apart from that there are few minor things that could be improved in your class interface, but I will propose what I think is better solution in PR.
Good question. One thing you could do in order to exclude JRuby would be to use the `install_if` block and pass in a Proc that checks `RUBY_PLATFORM` isn't set to "Java" (all other platforms return the underlying OS)
Is this actually a problem you've run into, hashes with string keys using up too much RAM? You have seen this, and demonstrated it's not a problem in the identical circumstance with this gem? I have, as it happens, written data processing pipelines that create millions of hashes using string keys -- but my pipelines don't generally keep all the hashes around at once, they handle them in batches and let them get GC'd. But i'm surprised it would actually be a real problem even if you kept them all in memory at once. I'd be curious to see a demonstration reproduction if you have one! 
I did not understand why you do this in the first place. I am missing explanations and reasoning. The end result is kinda neat since it tests a decent spectrum of the method. I guess what I am missing is the trail of thought behind all of it so I can reproduce it somehow and in a decent time frame. :)
Yes, rails has this problem. Strictly speaking, rails does not have a view layer, yet I see where this is coming from. Many developers follow the fat model approach, and in most cases the presenter adds a layer of complexity and duplicates code, or moves it into another file. The same happens here. I get it is an example, but most developers stuck with encapsulation issues will not be able to figure out instead how to present. My suggestion for the article is to show what happens when the map code ends up in the controller, and what happens when it's exposed through the model. Both are valid and emphasize the layers that rails ships with instead of adding more. The example is well chosen btw.
Thanks for this. I should clarify that the real reasoning here is to try to identify edge cases that the "simple" tests you wrote first may never identify. The particular function is trivial for the purposes of demonstration, but when a function is less trivial, you may be more surprised to see the inputs it fails on.
Cool idea, thanks!
Yes. As I've mentioned in one of the replies, we had that problem with a data processing pipeline. This is because some sources don't "stream" data, but rather you have to take it all at once into the source step, and then stream it to other steps. An example of that type of (damn) sources is Flurry, we had more than 10GB hashes in memory once we extracted and parsed the report! I know we could use `symbolize_names` to make the keys symbols, but again we need indifferent access through the rest of the pipeline, and hence we had to use ActiveRecord's HWIA which made it event worse. Also, even some destinations and steps have to perform some type of "blocking" where they collect data and wait for a certain amount before performing a batch, sometimes more efficient action on it (especially if you're dealing remote services as destinations).. In general, I have build this gem during the weekend to be used in those pipelines, but didn't yet. I will make sure to reply here when I get some results about the issue :)
This point is where I struggle. I can write code that performs equally well whether it originates in the model, controller, view, or presenter. It's not much of a question of performance, which leads me to believe that it is mostly style. As you point out, the code is simply moved. Don't want fat models? Move it to the controller! Want skinny controllers, move it to a presenter! Don't want logic in the views and don't use presenters? Use a helper. The logic has to live somewhere, so why does it matter where? I realize a skinny model requires less memory. If you have a super fat model, every time you instantiate a User, each user will require more memory (yes?). If you follow the pattern in this post (which I use in my day job - using presenters), you're instantiating the User and Picture ActiveRecord objects, then instantiating a bunch of presenter objects in the same request. Seems like more memory usage than just iterating through the AR objects to begin with. In the end, does it matter? What matters? Edit: certainly not downplaying style, readibility, or encapsulation (which, again, seems to be style-related). But my users don't care about any of that! Yes, "presentation" logic belongs in the view (or presenter... or helpers) but otherwise, does it really matter.
I am currently reading through "The Well-Grounded Rubyist", it reads almost like a novel with some code blocks, I like it for it's abstractness. I bought Programming Ruby 1.9: The Pragmatic Programmers' Guide as it appears to be a little more technical. Together I think there are synergies. 
r/titlegore
http://kapeli.com/dash
Well, it's only a matter of style to a degree. Fat models for instance polute the model space with methods that are only used in certain scopes. The same applies to presenters unless you pull in a presenter hierarchy by scope. Fat controllers will eventually make you duplicate code or move it to modules or into the application controller. That said, I recommend starting with one prefered fat &lt;anything&gt; and when it becomes unmaintainable or slow or poluted, take what you have and refactor it into another layer/pattern (not necessarily presenter, take what solves your problem). Having seen what a 7-layered architecture that was introduced because "we might need it some day" can do to your general productivity and code quality, I'd drive lean and minimal and refactor once I have a clear picture of what my problem's gonna look like. And from there on, it's less of a style-related choice really, but the best solution to a problem.
I was surprised when I went through the examples. Please explain in the article how to generally approach a method to figure out those test cases. I mean, when you usually test a function, you try your best to make sure it works. I don't have time to ponder for an hour about edge cases. It somehow needs to come naturally, or evolve somehow. An idea how that can work would help me (and possibly alot of other people too) tremendously. You already seem to have figured out how to refactor the tests easily, so I am hoping for some hints :)
I have used, it's quite good, but I have some projects that still use datamapper and would be quite a lot of work to move them to Sequel. Sequel has a problem to me, the fact that is jeremyevans doing most of the commits, what will happen to the project if one day he stops maintaining it?
thanks. this look super cool
The answer depends on *whose* code behavior you want to change by redefining method, and for *what* reason. If it's your own code, than having two definitions of the same method in differen files should be considered really bad practice (it's unclear, confusing, and overall behavior may depend on files loading order!). So, basically, yes, if you need "the same class with slightly new behavior", you inherit on it and work with inherited class. The other situation is when it's some library code or even core Ruby class you want to enchance. In this conditions, you can't inherit. For ex., you call SomeLibrary#some_method, and it returns an instance of SomeResult. If SomeResult's behavior is somehow "wrong" for you, you may reopen the class and change it. Note, that such practice is usually called "monkey-patching" and should be avoided (especially when you redefine something, not add features). Unfortunately, it can not always be. But Ruby 2 provides very cool [refinements](http://ruby-doc.org/core-2.1.1/doc/syntax/refinements_rdoc.html) feature, allowing you to change some foreign object behavior locally, without affecting other code depending on the same object.
As a Rubyist who's fooled around a bit with Python, my opinion is Ruby is the better way to go as far as lower barrier of entry. It's easy to write up small scripts to automate, build small APIs with tools like Sinatra and then get into full RoR to build an application. Python has great tools as well, Ruby is just easier (and in my experience more fun) to learn.
You're asking on the ruby subreddit, so people will probably say ruby! I think ruby would definitely work well for this type of work. I haven't used Python much myself, but I'd guess python will also work well, I'd guess either would work fine. I agree with you that doing non-web work in ruby will give you a better understanding of ruby, that you can take back to Rails or other web work. 
I'd like to hear about how you deploy the app with ActionCable, using what app server (puma, passenger, unicorn, etc; apache or nginx or what), and if it matters. Ah, I see you do mention puma. But I'd like to hear more about this, what about puma makes it suitable for this and if any other app servers are too, the details of how you deploy, etc. 
I've used both roo and rubyXL gems for reading and writing Excel files. They're pretty easy to use.
The same could be said for anything.. in fact, this is such a problem on every platform that we end up with 20 gems doing the same thing instead of people fixing them. Why not submit the patches to fix windows instead of ignoring it?
Instead of marking methods private, I like to just further namespace them inside an internal module. This prevents polluting the public namespace, but they still remain conventionally accessible.
Which one do you like more? You'll apply yourself more diligently working with something you enjoy. 
Ah. Well for windows, I'd have to recommend python. Ruby *can* work on windows, but its a huge pain in the ass. Python is slightly less of a pain in the ass
ActiveJob compliant? Some reason you didn't use GlobalID? Edit: I see you've included an adapter for ActiveJob. GlobalID comment still stands.
&gt; This prevents polluting the public namespace How?
Either one works. Use whichever you find yourself enjoying more.
is powershell out of the question?Because... You can do some crazy sick shit on spreadsheets with powershell. 
As a guy that loves ruby and dislikes python but has dealt with many large IT organizations I have to say go python. The reason why is that python has generally become the defacto language for these tasks. While you may be creating a one-off automation, many times even those convert quickly to process entangled automations/tasks that will need to be supportable by the admin staff. It does not make sense to write those in ruby just to have admin staff that are skilled against python try to support them. All that said, maybe your org is different -- for instance google utilizes go for many such tasks. If so this may not apply to your situation. But my experience is that python is generally the best support coverage for sysadmins and new hires usually fit this mold.
Not that I agree with gp, but a more accurate way to state this is that private methods still register themselves as message handlers for the object, just as public methods do. This is why you can call private methods easily with `send`. The only real difference between a private and public method is that ruby will complain if you try to call a private method via dot notation. But this is just a programmer safety net, the underlying implementation is otherwise the same.
As @jrochkind says, of course you *can* inherit from some library or core class, but the library will still return the base class, unless you'll rewrite also some of library methods... Finishing in rewriting half of the library with your patches. Sometimes it even *makes* some sense, but in such a desperate case you should consider to forking a library, or use another library, which better correspond to your needs. Talking about modules and other options, @jrochkind's answer is perfect.
I liked the book-like format (didn't require javascript - was readable from CLI with lynx, was searchable/printable/downloadable, had a TOC). I understand why you needed to do this, but don't understand why you decided on a custom solution. A wiki would have worked better, because everyone already knows how to use one. Your new docs basically require everyone to click and read menu items and waste time trying to figure out how and where to possibly find what they are looking for. TL;DR your new docs require usage docs
Because you predicated this in terms of large IT organizations, or "Enterprise" projects, this is the correct answer. I personally use Ruby for all my personal projects, large and small, applications or system automation scripts. But I use Python for work because that is what everybody in my company uses. If I could just get a job writing code in Ruby, I would be soooooo happy.
&gt; a more accurate way to state this is that private methods still register themselves as message handlers for the object, just as public methods do I don't think that's what gp was saying at all. It looks to me like /u/Kache was saying that they put private methods inside an internal module. And my post was asking how that can prevent polluting public namespace any more than just using the `private` keyword.
Extending on reasons for never opening classes and modules (other comments already state your options), when you include a gem into your project you assume their code and interfaces are tested. As soon as you change their code base, you will want to write tests for your change so you see when it breaks their gem after updating versions. For something like rails this is tedious and complex. If the code is under your control you should edit the original file instead of reopening the class/module. If it's not under your control, try to find a better way. Writing your own middleware on top is a good, maintainable approach if you want an example
Puppet definitely has a lot of sugar, but I'd say Chef is very close to the language. I find myself writing quite a bit of ruby for LWRPs and libraries. The big reason I'd recommend ruby and subsequently Chef though is the tooling that comes along with Chef. Download [ChefDK](https://downloads.chef.io/chef-dk/) along with [Test Kitchen](http://kitchen.ci/) and you've got an amazing environment for building infrastructure, but even more importantly, for experimenting and learning. Using ChefSpec and serverspec you can setup infrastructure just like any CI/CD application and automate practically everything, including the deployment of new resources. Add services like AWS OpsWorks to the mix ... to me, when it comes to any project, large or small, the benefits of the tools that come with ruby/Chef are so great, I find it difficult to spend my time working with anything else. I don't think these tools take away from learning the language, but rather they provide a lot more opportunities to learn more by exposing you to a broader set of problems. $0.02
Here's a hint: You only need to call `gets.chomp` once in your code.
^^^ This is the right answer. Find the one you like the best. Both are very similar languages with their specific behaviors and sweet spots. I've done both and I prefer Ruby but only because I've been doing it longer. 
Knowing basic Unix commands is not a unreasonable demand towards the user. Else, s/he is more likely of not knowing how to securely operate such a system with all its services, which goes way beyond a http daemon. Wouldn't for these kind of people out be a better idea to use platforms like heruko? 
Great episode!
As others have alluded to the issue is that else doesn't take in a conditional statement. In the case of If/Else the else block is used as a fallback when none of the other conditional statements evaluated to true. So with that in mind perhaps you could consider using another if as /u/Oranges13 suggested or even an elsif (not sure if you have covered them yet).
Python has more libs. Ruby is more fun. 
I haven't deployed any ActionCable apps to production, so I haven't looked too closely at the deployment options. [ActionCable README](https://github.com/rails/actioncable#deployment) mentions that it needs a multi-threaded web server (Puma, Thin, etc). This means that we could use Puma or Thin, but not something like Unicorn. Maybe someone who knows more about the internals could comment?
Great idea. When I sign up, the site says there are no beta openings now.
Thanks for the feedback, but I have some trouble understanding your criticism. Could you elaborate more on them? &gt; was readable from CLI with lynx It still is. Well I haven't tried with Lynx, but with Elinks the Library is very much readable. The HTML is written to be responsive and to degrade well to simpler browsers. The only issue open right now is that some things don't work without Javascript. I believe Elinks allows you to enable Javascript. But that brings me to the next point... why is it being readable with CLI browsers so important to you? Don't you use your desktop or phone browser to browse documentation and the general Internet anyway? And since Passenger is an app server, is it unreasonable to expect that you have an Internet connection so that you can read documentation? &gt; was searchable/printable/downloadable It is still searchable through the search box. It is still printable, but on a page-by-page basis. Do you really want to print the *entire* library? It's very big. It is still downloadable. It's a static site. You can clone the Git repository and build the static HTML files. &gt; I understand why you needed to do this, but don't understand why you decided on a custom solution. A wiki would have worked better, because everyone already knows how to use one. This I do not understand at all. What exactly is bad about the fact that we didn't use a Wiki? Even though we used a static site generator (Middleman), pages are just normal files that you can edit in your browser. It should be very discoverable because there is an Edit button on the bottom of each page. I will tell you why we decided on a custom solution: * We have anywhere between 3 and 45 variations of each page, depending on the integration mode that you are using, the programming language that you are using and more. That way, we can show you information that is relevant to you, while hiding information that is irrelevant to you. The beginner walkthroughs have even more variations because the content also depend on the reader's infrastructure, operating system, whether they use RVM or not, whether they use Rails or not, etc. The beginner walkthroughs consist of about 1000 pages, generated from 7 base files but in different combinations of settings. Doing this would have been completely impossible with a Wiki. We generate all these combinations programmatically by writing Ruby. * Wikis make it hard to customize the layout. We wanted complete freedom. For example, the beginner walkthroughs have a very different sidebar (one that lists the steps) than the advanced guides. The front page is also entirely customized for usability. * Wikis are harder to read offline. The Library is a static site and is very easily offline downloadable. &gt; Your new docs basically require everyone to click and read menu items and waste time trying to figure out how and where to possibly find what they are looking for. You say the new docs require everyone to read menu items and figure out where things are. But wasn't that true of the old documentation too? When you read the old documentation for the first time, you also had to scan through the table of contents to find what you're looking for. The new documentation contains a search bar. Didn't that search bar help you? In any case, the old documentation will be updated with redirects to the appropriate section in the new documentation. Is that good enough for you?
Maybe it would, but I believe it is not our place to tell them to go away. They've taken the time to come to us, so our philosophy is that we should help them as much as we can, regardless of their expertise level. And from a more practical point of view, those kind of people are becoming more and more common, which puts a strain on our support team. The less they have to rely on a human to answer their questions, the better.
Thanks for clearing this up. This makes more sense now :)
Maybe you could try `self.class::Bar`, but that only works if `Bar` is defined directly there at `Foobar::Bar`. It wouldn't work if there were even more levels of namespacing, like the `self` class was Top::Middle::Bottom, but the class you wanted to look up was actually Top::Other -- I think. Maybe. It's confusing. Those generic class names make this very confusing to talk about. Either make up a domain of some kind (employees and departments, etc), or use names like Top, Middle, Main, Other, etc., is my advice, to make it possible to talk about and know what we're talking about. 
I use both, either one will work. Similarly, I have a Mac but am sometimes forced to work in the Windows VM. If you need to connect to any ODBC databases Window is almost a must. I could never get ODBC to work in Python/Ruby on Mac. If you need to connect to a JDBC database there's always [Jython](http://www.jython.org)/[JRuby](http://jruby.org). Both Python/Ruby have several Excel-capable eggs/gems and Windows-related modules too. For Excel, in Python I use [XlsxWriter](https://github.com/jmcnamara/XlsxWriter), in Ruby it's [write_xlsx](https://github.com/cxn03651/write_xlsx). *In the past*, in order to get closer to the Microsoft-metal, I've used IronPython/IronRuby when working with MS Word/Excel. Check out some of my [gists](https://gist.github.com/ejstembler): [Replace Text within a Word document using IronPython](https://gist.github.com/ejstembler/1049552), [Converting a Word document to text using IronPython](https://gist.github.com/ejstembler/1049541).
Your right. Ruby was a side project for them (they originally do Java code). I'm getting confused quite often as you noticed because of the current code structure. Changing the core layer is a bit risky at the moment and require more time and testing to make sure nothing breaks. The reason I'm looking into this code, because I'm trying to do something similar - I want to overwrite some of the implementations in the original 'Foo' modules (and the corresponding classes). Is there any good way to do it with the current stricture ? or my only option is to overwrite`baz` inside `foobar` (and technically duplicate all the code in it?)
I lost my hearing after listening to all those bike bells in the intro :(
Sorry for that jrochkind, I edit the original post to be more domain specific. Hopefully this make things more clear.
Thank you all ! Will try it again!
I was asking gp to draw a distinction between: class Thing private def foo end end and "namespace[ing] them inside an internal module" which...I don't even understand how you would put private methods inside another module and allow them to be conventionally accessible, but maybe they mean something like this? class Thing2 module PrivateMethods private def foo end end include PrivateMethods end My point is what difference does it make if you namespace private methods inside a private module or just put them in a class marked as private. It's the same thing. Whether the methods are private or included in a private section of a class via a module, they are still not in the public namespace. The entire crux of my comment was that the gp's comment does not make sense. &gt; Instead of marking methods private, I like to just further namespace them inside an internal module. This prevents polluting the public namespace, but they still remain conventionally accessible. What mechanism allows a method to be namespaced inside an internal module, while remaining conventionally accessible? What mechanism allows a conventionally accessible method to not be in the public namespace?
PJ!
The official blog post: http://blog.jruby.org/2015/07/jruby_9000/
Woot! Anyone know if it's yet possible to get travis to run on jruby 9k, and if so how? 
THANK YOU!! This is exactly what I wanted!! a million upvotes for you.
The one thing I'm looking forward to with JRuby is Graal. Unfortunately, there doesn't seem to be a timeline available at this point.
Since I've never read the book I don't know for certain if these are the ones you are looking for, but this looks like what you're asking about: https://github.com/pierslowe/everyday-scripting
I'm basically a grumpy old user who browses with javascript disabled and doesn't like unfamiliar UIs (especially for something so common as documentation/manuals). Meaning single-page htmls and wikis are more familiar to me. But I *do* understand why you needed that custom solution. The search widget sometimes helps, sometimes doesn't; often displays lots of duplicate entries (I'm guessing because there's a page with the same title and almost the same content for each language/platform/etc.) &gt; In any case, the old documentation will be updated with redirects to the appropriate section in the new documentation. Is that good enough for you? Yes! Thank you.
Gonna be a LONG time for Graal / Truffle to be production ready. I wouldn't hold your breath if you are in the "That is when I will switch to JRuby" way of thinking.
That expression uses backtracking orwhatyamaycallit, `\w` means any word character, so letters of various scripts. It is in matchgroup 2, because it's enclosing opening parents is the second when counting from left. `\2*` means, whatever you found in subgroup 2, I want it again, 0 or more times. Since greedy matching is active by default, each match will contain the longest possible chain of equal characters at a given position of the input. How scan handles these matches has to be looked up in the documentation of scan, which I don't have at hands because I'm on mobile. Edit, I forget it everytime... Numbers and the underscore are considered wordcharacters, not only letters. 
Is this site related to [Hired](https://hired.com)? Different market, but also a Rails-based.
Thank you guys for your help. And thank you /u/sprawn for the link to Rubular, that is extremely helpful in understanding all these "symbols"
What is the benefit of forking over just using the thread pool executor service in a fork join like fashion?
So here is what I imagine it works: (Nope I haven't read other comments yet) MyNewSite#create_user =&gt; MySite(in MyNewSite)#create_user =&gt; Try to find UsersTab =&gt; There is UsersTab in the module =&gt; Use it For me I would do this: Module MySite def create_user(username) users_tab.navigate_to_page.create_user(username) end private def users_tab UsersTab.new end Class UsersTab #blah end end Module MyNewSite include MySite private def users_tab UsersTab.new end Class UsersTab &lt; Foo::Bar #blah end end I actually do this in one of my gems but I got an abstract class instead of a module and it has no default class inside it
Updated version released with much larger font size and better audio. https://www.youtube.com/watch?v=gsgG-JvXsJ0
Agreed. Forking is a *platform-specific* behaviour; we who are (mostly) on Unix-like systems (and move between Unix-like systems) tend to forget that. The JVM is, almost by definition, its *own* platform, and it's neither reasonable nor logical to expect other platforms' quirks to be faithfully and competitively supported. For the record, wild applause and celebration was heard throughout *this* far-flung realm at the joyous news; JRuby 9000 is going to let us solve problems we've been butting our heads against with MRI while still retaining MRI 2.2 language goodness. O frabjous day!
I was excited, [but the fact it's not yet Rails 4.2 compatible](https://github.com/jruby/activerecord-jdbc-adapter/issues/599) is depressing.
I'm assuming that what you mean is that you need to make some of the data available to an application through a webpage and will be using JavaScript. The approach I take is to make an endpoint which exposes the data needed and load it up as required in javascript. It's somewhat obfuscated but look at the bottom here: https://github.com/os6sense/bill_kata/blob/master/billski_application.rb get "/#{name}/" do content_type :json halt settings.bill_provider.send(name.to_sym).to_json end That simply exposes part of the data from the back end. On the client side you then just need to call the URL of the end point to get your data as JSON, either via JQuery or Backbone or some other form of AJAX call. Another approach is to incorporate the array in the JavaScript as a part of the page when you create it but this is obviously far less flexible than the above approach.
Highly recommend checking out [Quasar] (http://docs.paralleluniverse.co/quasar/) if you need light weight threads or actors on JVM platforms. They offer nice clojure and kotlin bindings too
Interesting, thank you for the example. At the moment I don't want to change the original code (as it require much more testing). The original code would be the first code snippet I posted above. What I want to do with it, is to re-implement the `create_user` method. Based on what you said, it doesn't seems possible - because the local class, and the parent class share the same name, and it confuses Ruby (so it calls the 'inner' ancestor class)
Thanks for the answer. I actually doing this now as a workaround, but as you probably experiencing yourself, this require code duplication between the two layer.
We can now run small frameworks like Sinatra, so we're getting there, but yeah I wouldn't recommend using it or planning on using it at this point.
You just blew my mind. 
Awesome! I haven't seen any real "State of play" blog posts about truffle / graal since the first announcement. Have I missed something? If so could you link, if not, make a post! ;-) Graal and Truffle really seems like the second coming and I am fantastically excited for it. 
Yes, in fact we should do a big update blog post before JRubyConf.eu so people can ask us any questions there. There has been plenty of work published though - not least our five academic papers so far.
Wow this is awesome! 
Even the underestimate wins! ;)
For a second I thought it is a reincarnation of [fxri](http://assets.devx.com/articlefigs/15382.gif) ..(
It was awesome for learning Ruby. P.S.: add line numbers and bookmarks )
Hey. I've tried to start the good solid code review (not all pathes are tested, for ex., what if there is 404 returned by ibiblio; not informative method names...), but stucked with it. The thing is: good OO design is also *minimal* design. The volume of this task (and line count of resulting files) hints on [KISS](https://en.wikipedia.org/wiki/KISS_principle) principle as a first consideration and the most important. This sample code: Nokogiri::XML(RestClient.get('http://www.ibiblio.org/xml/examples/shakespeare/macbeth.xml')). search('SPEECH').map{|s| [s.at('SPEAKER').text, s.search('LINE')]}. group_by(&amp;:first). map{|s, lns| [s, lns.map(&amp;:last).flatten.count]}. sort_by(&amp;:last).reverse. each{|s, c| puts "#{c} #{s}"} ...does *almost* exactly what your code does. *Almost* -- because your code has some bug in it and outputs `1 MACBETHLENNOX` as a last line (which is wrong). The shown code is more readable, testable and refactorable than combination of 4 classes and 1 script using them all in predefined order. Sorry, I don't want to sound rude, just to show the point: KISS principle is really, really important for good code and architecture, and IMO should be considered **before** any other design principle.
I did some quick comments via pull request for you. 
You can use actor libraries in the jvm. They are often more performant than elixir or erlang.
How do the desktop applications written in MRI perform? Can you show us a couple?
&gt; They are often more performant Links? Anyway, what drew me to Elixir was a Rubylike lang that was pure-functional, immutable, pattern-matched, and was reasonably performant. The trivial and fast concurrency was a bonus, as there's only a certain class of "massively parallel" problems it can solve anyway. OTP for process management is also awesome.
I picked one file out at random from your lib folder. I applaud you for trying to become a better coder and I will try to go easy but I am an old cynical developer that usually erupts with 25 years of baggage.. :) Refrain from using instance variables (state is bad).. Calculate where you can to avoid state... because state is bad! Tired of tracking down race conditions? Want to go home at a reasonable hour? Want to avoid burn out? DON't HAVE STATE!!! For example, you have an OO construct: class Analyzer attr_reader :line_hash_array def initialize(line_hash_array) @line_hash_array = line_hash_array @sorted_hash = Hash.new(0) end def analyze hash = line_hash_array.reduce(Hash.new, :merge) @sorted_hash = hash.sort_by { |_key, value| value }.reverse.to_h.each do |k, v| puts "#{v} #{k}" end @sorted_hash end end which can simply be replaced by: hash.sort_by { |_key, value| value }.reverse.to_h Why use all that extra code when a one liner will do? More code means more state, more state means more bugs. If you love yourself and the ones around you, only write code as a last resort. Secondly, Functional cohesion is the most important thing in life! Every function performs exactly ONE THING! For example, your analyze does a hash reorder AND puts something out. This is in violation of functional cohesion. Every method can be described in a single sentence.. it's the most important rule in life! Marriages have failed, and people have become constipated since they have forgotten this fact Coupling is bad! Why does Analyzer need to take a var in it's constructor? You coupled the Analyzer to a line_hash_array, I want to take your Analyzer and adjust it to work on my BlueElephant but I can't! If the only operation of Analyzer is to analyze then pass in what it needs when it's needed.. not before.. Maybe the user will want to make your Analyzer and keep it around before using it.. or use it multiple times with different stuff.. Maybe your Analyzer has a big start up time (It doesn't but you get the point) Remember, don't write the code.. be the code
Google aka
If you service has more than 1 instance then Kontena will replace each instance one-by-one when deploying. You can even define that Kontena will wait for given port before moving to next instance.
nice
do you mean Akka?
It's described [here](http://ruby-doc.org/core-2.2.0/String.html#method-i-5B-5D). The variant with two digits is just start and length pair (in characters).
Agreed - good writeup!
No. I'd recommend you make your own project. It'll force you to combine some things and you will hit an ah-ha moment, because there will not be any tutorials to follow.
99% of the advice is not Heroku specific. The advice is good and can be applied to any ruby web app, rails app, and in many cases any web tech ever hosted on X. Advice like don't swap, watch for N+1 queries, cache, use a CDN, etc. kind of applies to every web app.
Thanks, I was lost looking in that Ruby documentation page, it's so confusing, docs are supposed to be readable.