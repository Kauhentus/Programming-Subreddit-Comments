Perhaps we need something that's specifically designed for configuration. Or perhaps there's something out there that already does that. Does the notation used in .ini files have an include directive, for example? I don't know.
it wouldn't be much effort to write a YAML preprocessor, that parses YAML files looking for the include directive and then includes them before parsing the resulting file. 
Somebody should tell the rails team about that.
ini files has many limitations which is why very few of the files in your /etc are ini files. Almost everybody seems to be using some sort of a hybird xml/json/ini thingie. Of course ideally they would all just be .rb files and you could configure using the full power of ruby but failing that YAML would be an excellent choice for most applications except for the missing include feature.
Now seems like a good time to finally learn Ruby.
Nope, still don't care.
Yeah, but rails isnt everything. Also, note how on the site it says YAML 1.2 is the newest standard, yet below it shows that most still use 1.1 or 1.0 (I dunno how often they update that). Even if they add what you want to the spec, people wouldn't make it work right away. http://www.yaml.org/
Thanks I signed up :)
Hey so I'm **sure** I'm a moron, but this document, like every other CouchDB document I've seen assumes you already know the ID of the document you're trying to retrieve. What's up with that? 
I'm new to all this myself, but this wiki article on views might be able to answer some of your questions: http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Basics
Thanks for the link! It's no surprise that they lost me as a customer as the word "search" doesn't appear in that document at all. :)
I can't wait for this to become more fleshed out. Java is nice, I guess, but Ruby is so very much nicer!
Laycock: get head now. Quality.
If you have any programming experience at all I'd say jump into their API it's personally my favorite API on the web http://ruby-doc.org/core/
tl;dr: having data is useful. well, duh.
One man's trash is another man's treasure. Or to paraphrase appropriately, "One man's language pet peeve is another man's favorite feature."
uh, everything?
not again! aaaaaahhhhhhh!!
In Ruby, whitespace is insignificant. That's enough right there ;) Edit: Obviously this was a joke. I guess you guys don't follow 5by5.tv's Dan Benjamin/Jason Seifer podcasts :)
I hate these comparisons...I thought theses comparisons so "newbies" and "anti-pro" were finisheds...both are wonderful languages, both are very different and you can find peoples than prefer ruby syntax and powerful dynamic and vice versa...please stop comparing both...which is better?...the better is where you feel more comfortable, anybody learn nothing reading this comparisons and they are (in my opinion) unproductive...both are scripting languages and not ideals for large apps.. ""I don't WANT a language that is QUITE so dynamic, thank you very much""" fine...then choose python, so simple...many peoples love dynamic languages where the powerful and all liabilities are in them and not in the language..so simple..how my father say: ""with the power is the responsibility"""... Peace and Greetings from Germany
Not always.
Who cares, use what you are more comfortable with. On a sidenote: God damn archeologists.. That email is from 2003... SIGH 
Single word answer: blocks. There's other stuff too, but if it was "Python with blocks" vs "Ruby without blocks", nobody would care about that rest.
So you don't indent your Ruby code, then?
&gt; both are very different No. Sorry. The reason these comparisons come up is because they are extremely similar.
Really just comes down to personal preference. Both are great languages with pros and cons.
Are we Rubyists really that hard up for a moral boost?
in another thread the other day someone mentioned that string formatting is easier in ruby, which i think is quite true.
Python has way more scientific libraries than Ruby does as well. Scipy for example has a huge following in universities. Sciruby exists but it's no where near as mature. As well, python is runtime compiled - Ruby really isn't yet, but they're working on that. Ruby has blocks and they make me happy. In Ruby EVERYTHING is an object. In Python there's still some classless methods out there for handling numeric data. This is a design choice to improve speed, but I find it annoying. All in all, my choice of language depends on the library I need and if it's available. So the other day I needed a poker evaluation library. C or Python were the only libraries written with the poker-eval library, so I used python. 
&gt; Python has way more scientific libraries than Ruby does as well. [There were times when Python had a lot more libraries](http://chaosforge.org/taw/jrpg/), but these days Ruby tends to win this competition much more often than Python. And that's without even going into JRuby (Jython was comatose last time I checked). &gt; As well, python is runtime compiled - Ruby really isn't yet, but they're working on that. Neither of them does JITs, and both use bytecode. I'm not quite sure what you mean here. Ruby 1.8 tends to be slower than Python, but it's not really the case with 1.9 or JRuby. &gt; In Ruby EVERYTHING is an object. In Python there's still some classless methods out there for handling numeric data. This is a design choice to improve speed, but I find it annoying. As far as I know this is about backwards compatibility, not performance. They're method calls under the hood, and you can usually redefine them via some `__foo__` or another. &gt; All in all, my choice of language depends on the library I need and if it's available. Well, if the only available library was in Cobol or C++...
Oh yes, that's one of countless tiny bits that make Ruby great, but they all pale in comparison with simply having blocks. Can you imagine Ruby without blocks?
I like Python for one reason, when i come back to a program after months i still understand it. Or usually refresh quickly. It is a great platform for the casual programmer or production scrpt writer. There are things that I hate though and one of them is the indenting. Especially when code from other platforms, editors or IDEs get moved into a project. Somthing invariably gets screwed up, due to a tab space mixup. 
&gt; to me, [Ruby's optional parentheses in method call] means the mere mention of an object may EITHER mean a reference to the object, OR a call to the object, depending on the object's type I see this complaint (call it "opinion" if you want, because I have no intention to attack the author here) several times and I can't understand how this misunderstanding still persists to these days. It's so ironic because the truth is the other way around! First: You never doubt whether a "`.`" will invoke a method or access variable. Why? Because **you can only invoke method in ruby**. You can't access variable outside it's class definition, got it? For example given: class P attr_accessor :x def initialize @x = 10 end end obj = P.new When you write `obj.x`, what you are doing is "invoke a method" named "`x`", which in turns returns a value of `@x`. And when you write `obj.x = 10`, what you are doing is "invoke a method" named "`x=`", which takes a single argument (10) and used it to set `@x`. This getter `x` method is created by `attr_accessor` method. Try removing `attr_accessor :x` line and you'll not be able to call `obj.x` any more, even if @x is still accessible inside the class definition. Or you can swap it for `attr_getter` or `attr_setter` to get only `x` or `x=` method, respectively. So if invoking methods is a the only thing you can do, why would you be confused otherwise? And then you begin to wonder, since it's the only thing you can do, why not just let you drop parentheses for cleaner code? Now that we get Ruby "ambigous call" issue out of the way, **do you know the real language that you can not be sure it's not going to invoke a method? It's Python**. Given `p.x` can you say confidently that this will not invoke a method call without looking at the definition? class P(object): @property def x(self): throw Exception("think p.x never call function? Gotcha!!!") And given other internal method `__getattr__` or `__setattr__`, how can you be sure it's not invoking a method? Now compare to Ruby where you *always* invoke a method, which one should you call confusing and ambigous? Some people just post their language's "Zen" and think because it says so, it must be true. NOTE: I use Python more than Ruby in my daily job, but that doesn't mean I must ignore how things really are.
Populating a single-table database is trivial. What about when there are relationships between objects?
May be this example will help: http://gist.github.com/555375
I'll be there!
I am!! I am so pumped to go, it's going to be sweet!
I'll be there.
I wish I would of known about this about a week ago. I live about 2 1/2 hours from Nashville and just started getting into Ruby. Damn. I bookmarked the site for next year. 
me
I like the part about spaghetti.
I also have to take issue with his statement about Ruby being "too dynamic." Sure, someone could open Numeric and change the meaning of '&lt;', but who would do something that stupid? And if you really want to prevent it: Numeric.freeze If you're worried about restricting what some newbie might do, choose Ada.
Wish I could be there. School has a way of putting a damper on things. Hope everyone that goes has fun! Ruby Hoedown is awesome.
Looks like ruby needs an Acme gem section...
Ha, the author specialises in code like that, see at: http://mamememo.blogspot.com/ He has some interesting and fun projects. 
Let's just say that in 2003, they weren't finished. Also, you should buy a new keyboard: yours adds random "s"s at the weirdest places.
I can never get the argument that the ability to change stdlib objects is dangerous. If they don't behave properly, monkey patch them until they do. How can you tell that the bevaiour is wrong? Well, that's why you have tests.
Just what I've been looking for.
I would look into [ActiveResource](http://api.rubyonrails.org/classes/ActiveResource/Base.html). That way you can have a central web service (app) where the shared functionality comes from. I would host this on the same machine (if not network) so the communication is fast.
It seems interesting, but I'm not going to share instances
Write plugins
I've been writing plugins but I am now exploring using gems. You can use gemcutter to host them locally, if it's not something you want to share with everyone. http://github.com/rubygems/gemcutter
Getting a 500 error
http://pastie.org/1125097
I use svn:externals to share helpers, models, controllers and config between applications. Shared assets are in a separate location in my source control, and I use svn:externals to check out assets to a root `/shared` directory. - shared - config - helpers - lib - models - tests Then use an initialiser to read them into the application. # require all files in the models, lib and helpers shared folder Dir["#{RAILS_ROOT}/shared/{models,lib,helpers}/**"].each do |file| require file end You might need to wrap things up as a Module, or other small tweaks, so your application can mixin/require/inherit from the assets as needed. This approach also might also work for you; I've never tried with routes though, but I don't see why it would not work. 
There are lots of ways to do it. One way is by using git submodules. Others have pointed out using gems or plug ins. If you are using rails 2 desert is a great way to go.
I've been using separate projects (git repositories) for every library or whatever common code and I use them as submodules in the superprojects, it woks neat for me.
It's ready? hahaha... um. sure. Rails 3's active record with Arel is 2x slower than rails 2.3's active record. tenderlove is working to help fix that, but it certainly isn't in this release. I think I'll be sticking to rails 2.x for now.
Almost always, the answer is gem or plugin, unless it's something you can push to a service oriented architecture. I usually prefer gems to plugins btw, because for typical use you can share the module across multiple apps and don't have to bundle it in with your app. There's times you'll want to freeze the code in, but that's for another day. * settings table - there's probably a plugin for this, I just don't know off the top of my head. [Web-app-theme](http://github.com/pilu/web-app-theme) kind of fits the bill for rolling out a quick admin, but it seems like you're talking about functionality a little beyond its scope. * global template - make your own generator for this, and package as a gem or plugin, or use Ryan Bates [nifty-generators](http://github.com/ryanb/nifty-generators) * url manager - use a gem or plugin for this. There's quite a few friendly slugs to choose from, one example is [friendly id](http://github.com/norman/friendly_id) Another option btw, is to create your own skeleton setup you can reuse, or just use something like [Thoughtbot Suspenders](http://github.com/thoughtbot/suspenders) to get up and running quicker.
Did you try it since the last RC? Because performance improvements were kinda the point. It was the last batch of things they did.
You could use [DataMapper](http://datamapper.org/) instead.
On July 26, about the RC1: &gt; Speed is now pretty good across the board except for part of Arel that Active Record now depends on. We’ll be making sure we get performance of Active Record back to at least 2.3 levels before release. It is not RC1 or RC2 anymore. It's 3.0.0. At least do some benchmarks before complaining.
If the last official statement from the Rails team regarding performance was that it was suffering, why shouldn't zenspider take them at their word?
thats the whole point of Rails 3. It is not opinionated any more(or better put only has defaults). However you may now use any other sub system that you wish, like Datamapper, with it 
&gt; It is not RC1 or RC2 anymore. It's 3.0.0.
Migration (from beta4) in my current project took about one man-hour. Smooth sailing.
Yeah, I can read. In the Rails team's updates since RC1, have they addressed the perf regressions?
I have not run tests myself, so I cannot say for sure.
Sorry, my question was phrased ambiguously. What I meant was &gt; In the Rails team's *[status]* updates since RC1, have they *commented on* the perf regressions?
Sorry, my bad. I haven't seen it explicitly acknowledged, no. Then again, blog posts are all marketing: They're not going to say the word "slow" anywhere in a release announcement. I did a cursory search of blog comments and commit summaries, and didn't see anything in particular.
Huh. That seems... shocking. Well, if it's well-known that the Rails team doesn't prioritize that kind of communication, the criticism levied against zenspider's comment may be warranted. 
Excuse me? I _sit_ next to tenderlove day in and day out.
Yeah. tenderlove has been working on arel continuously (including a complete rewrite) for the past several weeks. ETA: to be clear, tenderlove is working against trunk of rails + arel.
Okay. I'm not super up on arel's development, but since we were promised no performance regression, I assumed that it was the case. I haven't gotten a chance to try it out yet.
All you actually need is a web server and RubyGems. You throw your .gem files in a "gems" subdirectory and then run gem generate_index in the directory that the gems subdirectory is in. It'll scan the gems directory and generate an index that RubyGems can read. Then you just source the address in your GemFile (if you're using bundler) or add it as a source with RubyGems.
absolutely! (tho I prefer sequel myself... very clean code!) but that doesn't help someone with a rails 2.x app looking to migrate (easily/easier) to rails 3. 
Pardon the non-descriptive title, but the first line of the article stuck with me. It is, indeed, a great time to be a Rubyist.
Yeah, there's still a couple categories of changes you'd have to make when going from AR to DM. Although, ActiveModel helps abstract away the two APIs.
We're just getting warmed up.
My Japanese isn't quite at the level at which I can assess the feasibility of doing this but if you can run JRuby on it then you should totally sell the movie rights as a sequel to Inception. 
where's the citation showing this will be a feature in ruby 2.0 ?
I'll hunt the link down, but it was in Matz's presentation at RubyKaigi
Don't know how good a movie it would be, but I can indeed already feel the recursion sickness setting in.
awesome, i didn't know about that.
Can't wait to see someone run JavaVM on JRuby running under JavaVM. I bet you can get ten layers deep before it takes an hour to run an instruction.
&gt; I like Python for one reason, when i come back to a program after months i still understand it. &gt; There are things that I hate though and one of them is the indenting. Allow me to introduce you to Ruby, which has no significant indenting, and is even more readable after months.
Very nice, thank you. Is there any chance of getting the Ruby 1.8.6/7 core and standard library docs up there as well?
[Ruby isn't THAT much slower, lately.](http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&amp;lang=python&amp;lang2=yarv) The philosophy is: Programmer speed &gt; execution speed
**I N S T R U C T I O N**
That's obviously his intention - he's already got the kick: http://github.com/koichiro/rava/blob/master/src/ruby/rava.rb#L30 
tl;dr - You can put override shit in one place, and not have the rest of the world see it. Example: I can set Array.sum to flatten arrays. And another lib can set Array.sum to throw exceptions on nested arrays. Both libs can use their version and not step on each other.
Where is your God now? (Also, I hope Oracle doesn't sue.)
holy shit, what a cloying bunch of rubbish. Yeah, yeah the ruby programming language is great, but did the guy writing the article really have to sound like an overgrown 14 year old? What's with a 40+ year old guy typing stuff like "Win!". Embarrassing 
Fail!
so then this should be so fast that it somehow surpasses the speed of light.
You must be new to this Internet thing.
Honestly for most of the things I do, the CPU load of the language isn't usually the problem as my language environment is usually waiting on the network to do stuff. Database queries tend to be a rather problematic bottleneck.
You're right. I find it fun to try to optimize DB querying either directly via indexing or via various caching schemes (memcache etc).
We are oddly positioned in that we are a startup but focused on a B2B space. Any thoughts on how we can find the right hacker?
At first I wanted to scold you, but then I read the account name.
cool find. 
I do believe that this is an example from [Practical Ruby Projects](http://www.amazon.com/Practical-Ruby-Projects-Programmer-Professionals/dp/159059911X) It's a cool little book that also demonstrates genetic algorithms and other interesting things. The one thing I wish it had included but didn't was a basic neural net in ruby.
Nice link and nice link to the book. Think I'm gonna buy that one!
Why would you want to do this? I imagine most of todays technologies would be obsolete in the next 10 years, much like things from 10 years ago are basically obsolete(or heavily advanced). In reality you can't future proof anything and it isn't worth the time, if you're going to make something you have to keep it relevant or it will die.
What's nice about this is that the code is really good, clean Ruby code. You could probably hack it together in 1/3rd the lines, but this is how it *should* be written.
I actually wholeheartedly disagree. This is a nice implementation, but it doesn't actually take _ruby_ into account in its design. By being so proc-centric you've done your runtime a great disservice and slowed down your implementation. You can do the same thing cleaner and more efficiently using case &amp;/or defs without creating tons of procs and schlepping them all over. That, and it should be test driven to be _proper_ ruby.
Try like it: &gt;&gt;&gt; [:+, 1, 2] ==&gt; 3 &gt;&gt;&gt; [:car, [:quote, [1, 2, 3]]] ==&gt; 1 &gt;&gt;&gt; [:cdr, [:quote, [1, 2, 3]]] ==&gt; [2, 3] It uses Ruby’s own syntax instead of s-expression.
It’s not from any book — exactly, it is a straightforward port of metacircular evaluator described in Structure and Interpretation of Computer Programs.
Here's a short list of some programming languages that are not obsolete nor heavily advanced beyond the point they were 10 years ago: C (1972, ANSI standard 1989), C++ (1983, ANSI/ISO standard 1998), Perl (1987), Bash shell (1987), Ruby (1993), Java (1995), JavaScript (1996). Some programming-related technologies that are not obsolete besides being over 10 years old: procedural programming, functional programming, object-oriented programming, relational databases, shared-memory multithreading, HTML and XML.
Well, to be fair, this is an analyzing interpreter ([see SICP for more details](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_sec_4.1.7)). This requires that analysis be separated from execution, which is why there are so many procs instead of simply executing it right then. That said, this looks very much like a straight port of the Scheme code in SICP, so I'm wondering if there's more Rubyish way to delay execution until all the analysis has been done without using so many procs.
your asian lol
completely fair.
Damn It Feels Good To Be A Rubyist...
Ain't working for me on OS X. [Screenshot](http://cl.ly/64a38bf2368ece6f5cfb) (because Shoes won't let me cut and paste, for some WTF reason).
Thanks for posting that. What version of Shoes were you using and what version of OS X? I've tested using Shoes 2 on OS 10.5.x, but haven't gotten a chance to test on Leopard.
&gt; copy and paste Yeah, there are some issues with this kind of things sometimes. Team Shoes is looking into addressing this kind of thing in the future. :/
Running 10.6.4 and Shoes Policeman (rev: 1321). Shoes appears to be running Ruby 1.9.1. Edit: If you've only tested on Shoes v2, maybe that's the problem; maybe v3 was when they moved to Ruby 1.9.
As long as it's a known issue. ;-)
Don't get me started on tabbing between fields. :/ We're currently exploring ways to move away from 'three different C codebases for three different platforms. Have fun keeping features in synch."
Bingo. Shoes Policeman is 1.9.1, Raisins is 1.8.
Ah, rats. Thanks for the tip... I'll fix and update.
Submitting here so I can find it again later...
It's open-source, if you feel so strongly about it why don't fork it and fix it yourself? Also in the ticket they never say they don't want to fix it. It's just not that high of a priority issue.
I hope your security through obscurity works out fantastic for you.
make a patch and send it them.
Is a book like this meant to be read from front to back or skipped through to specific points of interest?
I do the former first and then the latter way after that.
thank you sir
Doh! I just created http://railsguides.heroku.com to access and download the Rails 2 guides, hahaha, thanks!
Is this erotic fiction involving a threesome between Obie Fernandez, dhh, and why the lucky stiff?
radek, we have never said that we aren't willing to fix it. Nor are we crazy. If there are security flaws then we are committed to fixing them quickly, in which case users should upgrade as soon as possible. Hiding the version number is security through obscurity. It does not give you any kind of real security: any potential exploit will still exist irregardless of the display of this header, and a committed attacker can ignore the header and still try to execute the exploit on your website. Being able to see the version number might be an extra incentive for users to upgrade ASAP instead of sticking to the old version. Given this perspective, it's not hard to see that hiding the version number might easily give one a false sense of security. That said, Phusion Passenger 3 (Nginx version) will provide a configuration option passenger_show_version_in_header which you can turn off to hide the version number. However we still strongly suggest that you upgrade ASAP instead of relying on this hiding ability as a real security feature. P.S. In the 2.5 years that Phusion Passenger has existed nobody has found a critical security flaw in Phusion Passenger...
Any serious attacker can trivially run exploits irregardless of whether the info is shown. Hiding the info is as effective as putting your head in sand.
http://www.delicious.com/ http://www.google.com/bookmarks/ http://www.xmarks.com/ Good link by the way.
It'd be nice if the official site provided a drop down switch to go to older versions or something like that. But nice idea!
i love you.
I actually use [railsapi.com](http://railsapi.com). You can build your own api combo and the search functionality is very well done.
I'm currently learning the language and found this page extremely useful for helping me understand class syntax. It's concise and well-written, so I posted it as it might be beneficial to other people. If it bothers you, try the 'hide' button.
You're a dick, why?
Was pretty obvious why it was posted, people questioning why he would are the ones being the dick.
This isn't really the ruby class syntax and is full of misnomers. Take this document with a grain of... skepticism. You'll get a lot more accuracy and information from something like the pickaxe. I guess you get what you pay for. FWIW, the ruby class syntax can be summed up as simple as: "class" const_name ("&lt;" expr)? expr* "end" using ebnf(ish).
That's to whom he is referring.
Actually I do deny that it's supposed to be common practice. You mentioned Twitter for example. It's more likely that they do it for branding reasons than for security reasons. They've already publicly stated what server software they use so hiding the server tokens is absolutely useless for them security-wise. I view server token hiding as even less effective than changing the SSH port, which I already consider pretty nonsensical from a true security viewpoint.
it's a wiki, and (finally) a replacement for rubygarden. you should help fix it rather than sniping from the sidelines!
Do we really need another writeup for this. 
They should go more in depth into modules. 
You can't get any simpler than ruby for OOP--not even in theory. I love it.
I'm actually waiting for my copy of pickaxe to arrive. &gt; the ruby class syntax can be summed up as simple as... ...you're explaining nothing here. The wiki page had all the details I needed to learn about the syntax of public/private methods and inheritance, written in the type of language I found very easy to digest. I got exactly what I needed from it, and it's filed away now up there in my gray matter. Job done. I'm sure this is all a piece of piss to you but, and this might come as a shock, not everyone is as familiar with the language as you are. 
&gt; "The wiki page had all the details I needed to learn about the syntax of public/private methods and inheritance" and yet it was _**wrong**_ about a startling amount of it.
I contribute to the ruby community *every day of the year*. What do you do?
nothing, but i don't slam other people who try to contribute. "i guess you get what you pay for" was entirely uncalled-for.
Sure you can. I think both self and smalltalk have simpler OO systems. IO, slate, and others I'm less familiar with prolly do too.
okay, i looked it over more carefully. it was a bit light about instance variable accessor methods, so i added a section, but i couldn't find anything that was obviously wrong. since you seem to know more about it, why not go and fix the incorrect info? we've not had a good wiki in way too long.
great article
Got it, thanks.
Go to SunnyConf in Tempe, AZ on September 25, 2010
This is awesome, thanks!
If you'd like to see how I do it with Hackety Hack, [see here](http://github.com/hacketyhack/hackety-hack.com/blob/master/models/hacker.rb#L22). Basically: with MongoDB, store an array of IDs of the users I'm following and followed by.
Very interesting, thanks!
Wait, you want relational database features in a key value store that does not provide relations? Why?
Because life if complex and so are the relationships in it. The fact is that neither SQL databases nor nosql databases are sufficient/efficient enough to model reality as it really is.
[This is a good example](http://github.com/mbleigh/persistence-smoothie). It uses Redis sets to store a user's friends.
Someone here hasn't taken relational algebra. http://en.wikipedia.org/wiki/Relational_algebra 
Well, there are numerous things there, which are fairly okay, if you're beginning to learn the language, but are eye-twitching, if you understand the object model. We already have the pickaxe as the definite and confirmed resource. Are you sure that you want more of the same? Wouldn't the abundance of choice confuse you? EDIT: Removed needless examples.
Use a [graph database](http://en.wikipedia.org/wiki/Graph_database) This is basically what they are designed for.
As a matter of fact, Twitter released theirs. It's [FlockDB](http://github.com/twitter/flockdb/)
upvoted for mentioning FlockDB. It's a little rough around the edges, but if all you need to do is store friendship relations it's a pretty decent way to go.
What about it? Everybody who deploys solutions on relational databases denormalizes. That's just a fact of life. 
Tell me how to find if X is Y's ancestors if you have table of parent-child relationships in relational algebra again? Once you tried that the followup exercise is to figure out which basic mathematical fact makes this strongly impossible with finitely long SQL or otherwise relational query.
Heavy.
Not everybody.
You wouldn't be able to do that with a key value store either. At least with the relational tables you would have a tree you could look for.
He didn't really say he wanted relational database features.
Indeed, if you're looking for the right tool for the job, a graph database is the way to go. Neo4J also seems to be a pretty decent choice. There's a Ruby driver, which looks decent: http://github.com/andreasronge/neo4j
nope, i actually found the wiki page a lot more beginner friendly than the pickaxe, if you were struggling through writing a program and needed a quick refresher on how things worked. i really didn't find anything eye-twitching in there.
I agree - a very nice book
The reviewer writes: "In the first part, you’ll learn everything there is to know about metaprogramming." While I agree that this book is excellent, and I learned many things about the inner-working of the ruby interpreter, method resolution, and eigenclasses in Ruby, the reviewer is going a bit overboard. But there is a ton of great stuff in Metaprogramming Ruby. 
Their claims about instance variable privacy and inheritance are inaccurate, for starters. But again, people won't probably deal with this until metaprogramming, so it's okay. :)
Why post this on /r/ruby? Zed hates ruby and he hates people who program in ruby. He thinks everybody who programs in ruby is a psychotic. This belongs in /r/python he is theirs now (and good riddance).
Yea everybody. I'll give you an example. Names are a many to many relationship with people. According to relational algebra you are not supposed to have a first_name and a last_name field in your person table. Nobody does this though. Everybody puts a first_name and last_name field because relational databases do not handle joins with dozens of tables very well. You'd of course need dozens of joins because telephone numbers and addresses are many to many too. So is pretty much every other field in every other table in your database.
Anything published by pragprog should be considered highly recommended.
Is this a joke? &gt; **Myth**: Ruby is completely outdated in Debian and Ubuntu &gt; So it’s not surprising that **Ruby in released versions of Debian and Ubuntu is behind the latest upstream version**. Perhaps there's a definition of "myth" I'm not aware of? Even the one that turns out to be not true is only not true quite recently, so it was *very much true at the time*. Signed krainboltgreene, Rubyist Ubuntu Developer.
They do provide a 1.9.1 package, but I would want a 1.9.2 package ASAP; which the author is currently testing on all architectures.
Debian has had a bad history with packaging Ruby. Although, they are way ahead of RedHat/Fedora, which still *only* ships Ruby 1.8.6. I think a better alternative to Debian disabling `gem update --system`, is to add a pluggable update system to RubyGems. This way Debian, RedHat, Arc, Gentoo, HomeBrew could have the `gem update --system` sub-command invoke the system package manager.
I get that, I do. But it's still behind, which makes that (and the others) facts, not myths. Besides, why bother with the repository one? RVM provides quite nicely.
I've had issues compiling Ruby with RVM against Debian's openssl and libreadline. You either have to find/install all the necessary *-dev packages or install them with RVM and specify the awkward `--with-openssl-dir` and `--with-readline-dir` options. It would be much easier to just tell a user to `apt-get install ruby1.9.2-full`. That said, I use RVM for development, because Fedora is still on Ruby 1.8.6.
This isn't hard, in fact I have the steps listed in my book: http://github.com/krainboltgreene/learn-you-an-ruby-for-awesome-power/blob/master/task-zero.md#readme sudo apt-get install build-essential bison autoconf g++ curl zlib1g-dev libreadline5-dev libsqlite3-dev libxslt-dev libxml2-dev Sure, 1 step is certainly easier and simpler than 8, but quite frankly? You're fighting a losing battle.
Definitely a lot longer than `apt-get install ruby-full`, but that is handy. I've been trying to write up similar Ruby Install howtos (listing all the necessary library/development packages) for my primary project. Do you have similar instructions for RedHat systems? The naming conventions used for library/development RPMs always confuse me. BTW, awesome project, when will that site go live?
No, but I did just make a boot usb for RedHat, so I'll be experimenting soon. If you want to contribute to that section, feel free. Though, I wonder, how hard would it be to get a package submitted to Debian/Ubuntu named say, _ruby-dependencies_ and simply "link" to all those things? It would cut the steps down by at least 2.
http://www.lucas-nussbaum.net/blog/?p=566#comment-23454 +1 to Brian Candler.
rubygems are broken on debian. The debian team in incapable and unwilling to constantly maintain every gem and to make sure there is a package for every gem. They can't be blamed for this of course. There are just too many gems out there and nobody has the resources to package all of them up and make sure they are up to date. This is why we have gems and bundler in the first place. Debian should give up the gems. Just install ruby and let us keep track of the gems we want. Sure it's nice when an apt-get install also installs the native libraries and -dev packages but that's a problem that gems should try to solve.
I agree with you , eg : Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming and Programming Erlang: Software for a Concurrent World great books
Look what I've just found: http://guides.rubyonrails.org/v2.3.8/
wondering the same thing.
I'm trying to come up with a good metaphor for the state of CMS and CRM engines running on Rails. Our team has been using [SkylineCMS](http://skylinecms.nl), and doing our own updates of the software for whatever we need it for. We'll probably be upgrading it to Rails 3 on our end (I've already started the conversion process). But who knows? A GHOST TOWN! That's a good metaphor. With a few holdouts still living in the middle of town, and trying to keep their establishments alive. It's weird how the Rails community just doesn't care about CMSs. Is it just that easy for anyone to create their own CMS-like functionality in an existing app?
&gt; Myth: Rubygems is crippled in Debian &gt; First, gems are installed in /var/lib/gems, not /usr/local/lib/gems. A change for this is currently being discussed, and should be done after the squeeze release. So what you're saying is that a future release may have a non-crippled rubygems? Cool story, bro.
Refinery CMS rocks and is active. It also works great with ruby 1.9.
I think they are terrified of becoming commodity-ized. If there were a killer comprehensive rails answer to drupal (refinery and radiant are the closest it gets right now) then who needs the likes of hash rocket or envylabs. Of course, my argument is completely bogus because it would just create a larger ecosystem. However, I think image prevents this to some extent.
AFAIK as I know, Francois, the lead developer doesn't work there anymore...
How do you figure? Do you know the team?
I know Francois. Not the whole team.
We tried Refinery, and it's not bad. Skyline blew it out of the water though in terms of infrastructure. It's just not nearly as actively developed; Refinery could bypass it.
I just checked. He left the company in 2008. It doesn't mean the project is dead, just that their lead dev is gone.
Wrong subreddit, we're all converted here. You should have tried /r/python...
it looks like they took it commercial and it didn't work. I tried a while ago and it wasn't that great. Why are all the best CMS systems written in php?
Upboated for good gem management.
This would make my dev life so much easier now!
Control+f "Blocks". Upvote
Control+f "Blocks". Upvote
Does it support dicks.rb?
Definitely supports the dicks gem.
This is going to make managing our test clusters so much easier. Thank you!
This has been needed for awhile. This rocks, thx.
Maybe for a beginner to programming, but if you know any other languages, the Pickaxe book is about as clear and concise as they come. I could see a beginner thinking the fantastic tome on Ruby, The Ruby Programming Language by David Flanagan and Yukihiro Matsumoto a bit dense, but I don't understand how this wiki page is more "friendly" than Programming Ruby. As with most Prag Bookself titles, this one has clear writing, references in the margins, and nice code examples written in an easy to read monospaced font. What more could you ask for? 
Also [this](https://twitter.com/lrz/status/24137640579)
It's a pity that YARD is yet to support automatic linking of methods. Aside from that, does anybody else feel uncomfortable with explicit argument and return type description (when there's duck typing and such)?
&gt; At some point, Apple will have to move beyond Objective C. It’s just a question of the language. wat
&gt; Obj-C was a heck of a good experiment 20 years ago, but it’s just not a good fit for today’s mainstream programming mindset. A relatively small, simple (compared to C++) and dynamic OO C language that integrates easily with existing Unix C libraries. How is that outside of "mainstream programming mindset"?
I would love so much to see this, but the major hinderance (as I understand it) is the garbage collector. For the same reason Objective C still doesn't have GC on iOS devices: it's single core. Efficient GC really requires multi-core. That said, I'm sure it won't be too long before iOS devices have two cores. In the mean time it'd be nice to see Ruby go first class for Mac development.
The "mainstream programming mindset" is unfortunately not about small, sleek, or streamlined. It's about giant terrifying bloat like C++ and Java, which are thoroughly encrusted with static everything and Italian-style bureaucracy. Before Java came along, the "mainstream programming mindset" embraced COBOL, so to be honest, I think the mainstream programming mindset is safe to ignore. I've played around with the Ruby MacOS X interface, and it was a hell of a lot easier than, say, AppleScript. I didn't have to even really think to make it work, it was that intuitive. The article is right about Grand Central Dispatch being a better match for Ruby than for, say, C. They had to add blocks as an extension to C to make it work--and they quite obviously stole the idea directly from Ruby.
I lost respect for this guy because he somehow got this far without hearing about MacRuby. Also, what everyone already said about the GC situation.
I would love this. Then I get to write iPhone apps in MacRuby? Win for me.
Someone (I thought it was John Gruber but I can't find the daringfireball post) posted an article about 3 years ago that one of the benefits to richly supporting llvm itself (rather than just a kick-ass version of clang) was the ability to have a wide variety of front ends developed for OS X and become language agnostic or, at the very least, develop a really rich programming environment on OS X. While I haven't seen anything in Ruby or in Apple's development tools that suggest Ruby will be a replacement for Objective-C 2.0, I do think Apple sees it as one of the languages OS X must support well for its geeky audience.
Well, there are a number of us who would like to write software for their stack, but ObjC just isn't our favorite flavor of programming language.
Well, Ruby's closer to my area of expertise (Python), so I'd greatly appreciate an opportunity to write code in a style more similar to the way I think.
I get that, and concur, but how does it translate to apple having to move beyond ObjC?
Saw this discussed a few weeks ago somewhere, but for me the most convincing argument was against something like this being likely to happen. And that was simply because Ruby as a language is not really controllable by Apple in the same way that they can control Objective-C. Do Apple want to have to pay attention to ruby-core, implement their new features, etc.? They could fork it and do their own thing, but it would just serve to fracture the language with regards to libraries and create more confusion. Compare with Objective-C where Apple is steering the ship and can do whatever they like, that seems much more suited to the way they'd want to operate with their "official" languages.
Serious question: Why is Objective-C the worst thing about developing for the Mac or iPhone? I personally love Objective-C. It has its warts: it's much more verbose than, e.g., Ruby, doesn't have the nice syntactic sugar (like hash/dictionary syntax or list syntax), and lacks a few features I like (like closures -- they're available as blocks now, but the syntax is pretty hard on the eyes). On the other hand, it's also a relatively small language with little syntax. It sure beats C++. On top of that, the Cocoa/Mac APIs are *beautiful* and make good use of the features the language *does* have. I'm just not sold on the idea of using a dynamically-typed language for large-scale app development (and yes, I know Objective-C is dynamically typed -- more on that in a second). I love Ruby, but I don't know if it's a good fit for the desktop. I'm not a fan of explicit static typing like that of C or Java, but I think a language with good type inferencing (e.g., Haskell or Scala) or a dynamically-typed language with type hinting (like that of Objective-C) is better for large app development. But I digress. Why don't people don't like it? Is it because of comparisons to languages like Ruby, or something else?
“Rails is full of evil black magic that I do not understand, but it seems to read my mind, so I don’t really care.” Shazam!
Ruby: the new Pascal edit: c'mon. Pascal was up and coming, then Apple made it the Mac Toolbox programming language. Kiss 'o death, you know. /conspiracy
Yeah, that's not their style. They'll write a new language, heavily ruby inspired, perhaps. I just jumped from ruby + rails into some Obj C -- it was pretty shocking. You really need the IDE to be productive, it would be just absurd without it. Big shock from rails, which is so intuitive and verbose that you can get by with notepad no problem. Edit: Then again! https://twitter.com/lrz/status/24137640579
good idea
Maybe they will pick up dylan again. It's a very nice language and pretty fast too.
This guy lost all credibility for me as apparently he doesn't know about MacRuby nor did he bother to look for info about this rumor. MacRuby development has been going on for about 3 years now, personally I download the nightlies every few days and I'm not even a Ruby programmer. The whole project is fairly open though I get the feeling it is understaffed. The other thing that burns his credibility is his dissing Objective C which is a pretty darn nice language. Frankly I'm not at all impressed with people that dismiss any of the C languages out of hand. Nothing in this world is perfect, but if you are targeting ARM with non trivial apps you need a compiled language. On the Mac you currently have so many choices for development that it isn't even a discussion. The thing here is that Apples support of Ruby might actually gve me the incentive to learn the script. Currently Python serves my needs rather well. Ruby at times seems like a step backwards. The thing is even with the development versions it is pretty obvious that MacRuby will make for quick app development. In the end the article was a waste of time. 
I'm having trouble understanding the apostrophe in that title.
Ya. I suck at titles? Or, the apostrophe came from my tears? :-(
Few have done as much to further the Ruby/Merb/Rails and OS community. I for one am thankful for all of his contributions and wish him best of luck in his exciting new venture.
I absolutly love Passenger, made my life so much better!
When passenger installs NGINX, it doesn't enable IPv6 support. I have to recompile it myself. This makes me a sad panda. Hope they fix this.
You already said you can compile it yourself, so what's the problem? We can't please everybody with the default compilation settings.
Indeed
Anyone can install anything themselves, so why not remove the ability for passenger to install NGINX entirely? If you're going to do it, do it right: by default, enable all NGINX options which don't interfere with anything else, or at least let users select which compile options they want.
&gt; so why not remove the ability for passenger to install NGINX entirely? The ability is there because for most people the defaults are fine. The default is not meant to satisfy everybody, which is why we allow the 5% or so people to compile it however they want. &gt; or at least let users select which compile options they want. That's the point, users *can* select which compile options they want by choosing choice #2, or by the compiling Phusion Passenger as a normal Nginx module with --add-module.
So if I want to stalk Yehuda Katz properly, I should start looking at SproutCore. Got it. No, really. Merb was awesome. Heck, it still is. His contributions to the Rails world were like a drink of cool filtered water after an all-day Mountain Dew bender. I'm going to pay attention if he thinks SproutCore is interesting enough to switch jobs for.
I ditched passenger for unicorn a few months back, but they let you pass flags in to the nginx compilation... couldn't you just do that?
Downvoted for linking to a spammy-ass website.
Seriously, dude, have you met Zed? He doesn't "hate" Ruby. He chooses not to program in it and he has been burned in the past by prominent members of the Ruby community. Google "fuzed" for some background. This misinformation and character assassination campaign against him seriously blows my mind. Relax yourselves and realize that there's always two, sometimes three, sides to every story.
What's the advantage of unicorn over passenger?
This isn't something that I'm super knowledgable about, but [I like Unicorn because it's Unix](http://tomayko.com/writings/unicorn-is-unix) and [GitHub's usage of it](http://github.com/blog/517-unicorn) influenced my decision at the time. Basically, at the level of traffic my sites tend to get, I haven't run up against any sort of limits of passenger, thin, or unicorn.
I think people spend more time getting excited about this "rumor", and less time contributing to MacRuby.
&gt; Names are a many to many relationship with people. I don't think it's *many*-to-many, because the order of people's names is significant. A person doesn't just have the names Joe and Bloggs, he has the name Joe Bloggs, which makes it a one-to-many relationship.
Did you checkout Phusion Passenger Lite ? It looks very neat!
It's called Standalone now, not Lite.
Phusion Passenger is also Unix. Pretty much everything described in that Unix article also applies to Phusion Passenger, we just don't make a big deal out of it because one of our design goals is to hide as much complexity as possible from the user, and we consider exposing low-level Unix mechanisms to be implementation details that the user shouldn't have to bother with. Preforking? Check. Sockets? Check. accept()/select() on shared socket? Check. (Though on a different level than Unicorn) chmod? Check. We do all of that too. Since version 1.0 actually.
&gt;Seriously, dude, have you met Zed? He doesn't "hate" Ruby. No I haven't met him. I just know him by what he has written. He said he hates ruby, he says he hates everybody who programs in ruby. He says ruby programmers are psychopaths. Are you telling me he was lying when he said those things? &gt;He chooses not to program in it and he has been burned in the past by prominent members of the Ruby community. Is this the same members that he said he was going to beat the shit out of? If I remember correctly he was threatening physical violence on people. &gt;This misinformation and character assassination campaign against him seriously blows my mind. If there is any character assassination going on it was him. He is a very violent, obnoxious asshole who goes around telling people he will beat the shit out of them and challenging them to fights and calling people all kinds of names. &gt;Relax yourselves and realize that there's always two, sometimes three, sides to every story. I am talking about only his side of the story. Told by him. In his own words. In his own blog. The guy is a massive asshole. He is a jerk who is abusive and violent. He often goes off his rocker and is unable to control his emotions and outbursts. 
&gt;Basically, at the level of traffic my sites tend to get, I haven't run up against any sort of limits of passenger, thin, or unicorn. Yea me neither. Passenger gives me the simplest way to deploy though so I stick with that basically. BTW Is there a unicorn like framework that's generic for all kinds "unix" stuff. Process management, managing of forked children, signal handling, etc. I tried to read through the source code but got a little lost because I just don't know much about that stuff.
&gt;he has the name Joe Bloggs, which makes it a one-to-many relationship. Not if there is more than one person with a name Joe Bloggs.
1. You can define a role for the staging server and create tasks for only that role. 2. At least I don't want .svn or a .git directories in my release path.
Sweet. I always had a good experience with Passenger, and I like to learn as much as possible about as many deployment stacks as possible, so... thanks for the heads up. I'll probably be giving 3.0 a shot sometime soon.
Regarding 2: By having full copies of previous releases, rolling back is simply a matter of updating a symlink which is nearly instantaneous and atomic. If you didn't have the previous releases, you'd have to have full copies of your repositories on your servers instead of snapshots, and updating (or rolling back) wouldn't be as safe as updating a symlink.
&gt; Yea me neither. Passenger gives me the simplest way to deploy though so I stick with that basically. Eh, I'm using Capistrano anyway, so the complexity is hidden. And really, I don't see how `touch tmp/restart.txt` and `kill -USR2 'cat /var/run/unicorn.pid'` (can't escape backticks, apparently) are that much more different/complicated. &gt; Is there a unicorn like framework that's generic for all kinds "unix" stuff. Not that I'm aware, other than the standard library. That's pretty much what the article talks about, how good Ruby's support for that stuff natively is.
1. You can run any task with `cap HOSTS=hostname[,hostname] taskname` to run on a specific host, or set of hosts. However, if you have a staging server and a production server, you should definitely use roles for this -- that's what they are for. Edit: Actually, you should use the [Capistrano multistage extension](http://weblog.jamisbuck.org/2007/7/23/capistrano-multistage) and maintain separate roles/hosts for production and staging. 2. That's the only way to do it completely atomically. However, `git reset --hard` (which is what you want, not `git pull`, as you never want to do a merge) is very fast, so you could say it's usually _nearly_ atomic. Anyway, it's possible to override the default recipe to perform in-place Git updates, and a lot of people do this. You can read about the [technique here](http://github.com/blog/470-deployment-script-spring-cleaning). 
Something engineyard does in their deploy.rb's is to create a "production" or "staging" task that defines your servers. When you want to run an action, you just call that task first, e.g. "cap production deploy"
1) We maintain our staging/production environment variables within tasks: task :staging do role :app, 'staging.app.com' role :web, 'staging.app.com' role :db, 'staging.app.com' set :branch, "master" set :rails_env, "staging" end task :staging do role :app, 'prod1.app.com', 'prod2.app.com' role :web, 'prod1.app.com', 'prod2.app.com' role :db, 'prod1.app.com', 'prod2.app.com' set :branch, "production" set :rails_env, "production" end to execute this we would run 'cap production deploy' and 'cap staging deploy'. We just keep anything that is environment-specific only within those blocks - so if we were to do 'cap deploy' it would say that it can't find role whatever. 2) Has been answered, the only thing I would add is that you generally want to shallow clone your deploys, you don't need a full copy of the repo on the production box.
&gt;You can define a role for the staging server and create tasks for only that role That was just one example. I have many reasons for wanting to deploy to just one server. I have also resorted to opening up the config file and commenting out all the other servers. Surely there is a better way. &gt;At least I don't want .svn or a .git directories in my release path. Personally I don't see this a big problem. 
I am not sure about the safety aspect of it but with SVN you would not need the full repo. With git well I guess it's not that big of a deal is it?
I have not been able to find decent in depth documentation on that stuff. One example: Today I ran into a situation where a process I launched got "stuck". I tried to find some documentation of how to deal with that but couldn't. How do you kill a process you launched? Do you use the timeout to launch it in a thread so you can see if it's stuck? Are there signals you can catch from the child process? Anyway I'll cobble something together I am sure but I feel like I am groping in the dark when it comes to the edge cases.
&gt;You can run any task with cap HOSTS=hostname[,hostname] taskname to run on a specific host, or set of hosts. I tried HOST=hostname cap task but that didn't work. I'll try HOSTS and flipping it and see if works better. 
Yeah. I'm not 100% sure, to be honest with you; I try to stay as far away from sysadmin type stuff as possible. My experience in this area is lacking. The most UNIX from Ruby that I've done is basically IO#popen, so...
We have cap setup with certains tasks who's only goal is to setup environment. So we run cap staging deploy cap production deploy Both run the environment task first, which sets up server details, then runs the deploy task, which does it's own junk using the server details. Edit: Lol, that's what I get for not reading the thread, I'm #3 to say this.
There's no framework for such stuff. I don't think it makes sense to have a framework: the primitives are simple enough and everybody does process management differently because every app serves different purposes. You should learn about the POSIX primitives directly. I suggest starting with a generic Unix/Linux usage book. After that I would recommend reading on POSIX programming. As for your questions: There are no standard ways to detect whether a process is "stuck" because you define what "stuck" means, the OS doesn't know. Once you have a definition of what "stuck" means you might be able to detect it. You can kill any process, not just the ones you launched. You just need its PID and send a SIGKILL signal to it. SIGKILL guarantees that a process is killed no matter what. Other signals, like SIGTERM and SIGINT, can be caught by the process which may then decide to gracefully exit. But the process can also get stuck inside the signal handler if things go really wrong, so SIGKILL is the only guarantee. Phusion Passenger uses SIGKILL to clean up its process tree 30 seconds after shutdown. You can kill an entire process but not a single thread. It's impossible to kill a single thread without potentially corrupting the entire process because all threads share the same memory address space. This is why Phusion Passenger uses multiple processes: to make recovery possible and easier. Yes there are signals you can catch. Once a child process has exited the parent will receive a SIGCHLD signal. However if your goal is to detect whether a process is stuck then SIGCHLD is the opposite of what you're looking for.
&gt; Eh, I'm using Capistrano anyway, so the complexity is hidden. Maybe we have different definitions of "hiding complexity". By using Capistrano you're just automating the manual steps. You still need to write the automation code yourself. Phusion Passenger does many of the steps for you so you don't even have to write automation code. For example, to deploy a new app with Unicorn you need to 1) add a new virtual host entry and 2) setup a reverse proxy to a Unicorn port or socket file and 3) start Unicorn. With Phusion Passenger you just need to do (1).
I just mean in my daily usage. &gt; With Phusion Passenger you just need to do (1). Maybe we just use different nginx configs. With unicorn, I'm just adding &gt; location / { &gt; proxy_pass http://localhost:8080; &gt; } to my server block. And after that tiny bit of setup, I still only run one command to reboot. So it's the same thing. Anyway, I'm not trying to talk shit on passenger. It was/is awesome. As long as Rack exists, I think it's a good thing for the community to have a large number of servers competing. I'm just saying that while in an absolute sense, Passenger may be easier, unicorn is also so easy that for me personally, I consider them to be in the same bucket. That's all.
No offense taken, I just want to make things clear to avoid confusion. We host tons of Rails apps on our servers. For us managing a Unicorn app process per app would require a lot of hassle.
Totally. :) And like I said elsewhere, I'll certainly be giving 3.0 a spin sometime in the near future.
Uh, that's the 'many' in 'one-to-many'.
1. Try using "cap shell". You can deploy to specific hosts, specific host types, and run arbitrary commands on some or all of your hosts. 
&gt; No I haven't met him. I just know him by what he has written. This is all I needed to know. So, to answer all your questions and assumptions: it's all a put on. He isn't like that in real life, quite the opposite. He's even said so in a few presentations. He has an Internet personality and then there's the real him. So, all your anger is directed towards a fictional character, which leads back to me saying to relax. Have you googled 'fuzed' and read up on its history? Trust me, this over-the-top personality you see and judge is a defensive mechanism against those who have tried to take the disagreements on the internet and affect his life. They've gone to companies and told them that hiring him would be tantamount to suicide. There are two responses to that type of abuse and he chose the aggressive route. Now, please reconsider everything you've heard and read about Zed Shaw, inform yourself a bit more and then form a judgement.
This is pretty cool. Definitely beats trying to find the rdocs online or just manually opening the html files in the doc directory like I have been doing. I setup an alias to make it even a little easier to launch: alias rdoc_server='yard server --gems'
Dude, just use Inploy (http://github.com/dcrec1/inploy) , it's exacly what you want.
This even works in Spotlight. Thanks!
Any chance for a Rails 2.3.x dictionary file?
&gt;it's all a put on. He isn't like that in real life, quite the opposite. That's what you say. How would I know? Why should I take your word over the words coming out of his own mouth (or being typed by his own hands). &gt;So, all your anger is directed towards a fictional character, which leads back to me saying to relax. What makes you think I am not relaxed? I don't like a person. Does that make me tense? &gt;Have you googled 'fuzed' and read up on its history? yea. It looks like zed went on a rampage and some really really smart guy decided to marry erlang and ruby together as a fuck you to him. What's wrong with that? &gt;. Now, please reconsider everything you've heard and read about Zed Shaw, inform yourself a bit more and then form a judgement. What's the matter? He can dish it out but he can't take him. Fuck him. Fuck his temper tantrums. Fuck his insanity. Fuck his paranioa. Fuck his violent psychotic attitude. I am happy the python community has him now. He will lash out them eventually too. He is a sick man. 
For 1. there is an official plugin called multistage. In your _Capfile_, put set :stages, %w(staging production) require 'capistrano/ext/multistage' then create a folder config/deploy/ with one .rb file for each stage. Your config/deploy.rb is still parsed and can contain global recipes and variables that are shared between all stages. After that, you simply infix all your cap commands with the stage name, i.e. cap staging deploy:migrations or cap production log:apache PM me if you would like my deploy configs.
I like that idea ;_;
this is the most awesome thing ever...
I'm just about to finish this book and I've to say it's become my second favorite **ever**. If you want to really "get" the magic of Ruby you *need* this book. Plus, it's very well written and a joy to read. A must!
Try finding a decent sized project on github and just go through it to see how everything is laid out. Try adding new features of your own. What areas do you feel you aren't getting?
Go here: http://www.opensourcerails.com/ Download, isntall, and setup a few projects that seem interesting to you. Learn from them.
[Creating a weblog in 15 minutes with Rails 2](http://rubyonrails.org/screencasts) did everything for me. I didn't know much about Ruby at the time, I landed there from the 37signals' blog. Don't just watch the video, try to recreate the blog on your machine. Then, well, screencasts, blogs, doc, time...
I got hired by a company which is a RoR shop. They were aware at the time that I had no RoR experience, but I've got about 10 years' experience in web-dev. I was hired for my industry experience, and they were confident I'd learn RoR quickly (actually most of our devs had no prior RoR experience before working there), and they were correct. If you've got programming experience, picking up Ruby will be no problem. If you've got (preferably) any framework experience, or at least have developed websites at all, then picking up Rails isn't too much of a challenge either. 
You might want to give [Rails for PHP](http://railsforphp.com) a try
Watch [railscasts](http://railscasts.com/). While it won't teach you the overview of RoR, I think you'll learn a lot. I'd say, just keep doing it. At the job where I first used rails, it wasn't something we did every minute of the workday. At my new job, it is. The immersion factor really speeds the learning process, for any language or framework. Also, here's another suggestion. [Heroku](http://heroku.com) offers free small app hosting, and has many [addons](http://addons.heroku.com/) that are free for low usage. Make some toy apps, deploy to Heroku, and try to make use of the free add-ons. You'd probably have some fun, and learn how to use some good services to boot. You could just install the services on your own local systems and skip heroku, it's just a suggestion for a set of tools to learn to use. Lastly, I'd like to add that, I think I had the same first experience with the PragProg Rails book. It's a good book, but going through it, I still felt like I didn't grok it. Turns out, I just had to do it. So don't get discouraged!
This didn't exist when I started rails but I wish it did. http://guides.rubyonrails.org/ Just read it from beginning to end and you will be in the know.
I started in '07 with a book called Build your own Ruby on Rails web applications by patrick lenz, which was simple enough for me to start with, but by now it's outdated. I read through the book twice and created the project along with the book. From that, and my prior work experience, I got my first Rails job, and learned more on the job. The Agile Web Development book from the prag prog guys has been the best resource all through my learning. If you don't want to start with that book, definitely pick it up as a resource going forward. Here's a list of [free online books](http://everydayrails.com/2010/07/28/free-ruby-rails-books.html). And with Rails 3 coming out recently, there will be books for beginning with rails 3.
http://www.buildingwebapps.com/learningrails I learned by following these screencasts. They are a little old now - Rails 2.1 i think 
First read *Learn to Program by Chris Pine* to learn Ruby, once you mastered Ruby, read *Agile Web Development with Rails*. This is just the beginning. Good Luck with RoR, you won't regret. ^_^
[Ruby on Rails Tutorial](http://railstutorial.org/) is a comprehensive electronic book that covers both Rails 3.0 (~500 pages) and 2.3 (~475 pages), and is [fully available, legitimately, for free](http://railstutorial.org/book) online.
Last reply. &gt; That's what you say. How would I know? Why should I take your word over the words coming out of his own mouth (or being typed by his own hands). I met him in person. I talked to him over e-mail, outside the context of his website. I've asked him questions and asked for advice. So, whether you trust me or not is up to you really, but I'd suggest that you find people who know him in real life and ask them. Or not, whatever suits you. I'm just tired of seeing an excellent programmer's name dragged through the virtual mud. &gt; What makes you think I am not relaxed? I don't like a person. Does that make me tense? The tone of your responses comes across as angry. You might even say it's Zed-like, which is why I said relax. You might be totally relaxed, yet come off as a rabid poster on the 'net. There's a parallel there. &gt; yea. It looks like zed went on a rampage and some really really smart guy decided to marry erlang and ruby together as a fuck you to him. Actually, that really, really smart guy was one of the people who was suggesting to companies not to hire Zed as it would be bad for them. After Zed lambasted him in a public channel, he and the rest of them created fuzed. And then showed it off at Rails or Ruby conf and had a giggle. Put yourself in his position and tell me what you'd do. &gt; What's the matter? He can dish it out but he can't take him. He can and has taken it. He publicly acknowledges that his persona has brought him grief. I am the one sick and tired of reading this juvenile nonsense. Matter of fact, were you to listen to the interview linked here, you might see things differently. Or not, whatever, just please consider that he is a REAL person with REAL feelings and that as such, he has defensive mechanisms. You do, too, as do I. Also, consider that he has left the Ruby community, as has _why and a few other notable people. Maybe the problem isn't them, but us. Again, it's worth a discussion, but sliding into this nonsense is what people in Ruby community tend to do, it seems. Again, tired of it and would like to see a change. I'm starting with you. So, let's have a normal, considered discussion here.
i learned rails because i had to learn it to use Heroku (well, sort of). I hated it. So i decided to found djangy.com :-)
The __rails destroy scaffold__ shouldn't be that useful. If you want to go back to before you generated a scaffold, you should be using git. Before you do anything like generate a scaffold, create a branch. If it's a failed experiment, go back to master and delete the branch. If it was a success, go back to master and merge the branch. Trying to do Rails (or any Ruby development, for that matter) without git or other source control is just silly. Learn git, it's easy, you won't regret it.
This helped me coming from PHP.
Make sure you start out with Rails 3.
Build a site that's not just a scaffold. Realize that it sucks or feels janky. Build a site that doesn't feel janky. Realize that it's buggy and hard to maintain. Build a site that doesn't feel janky and has tests. Realize that you still have a lot of learning by experience to do. Repeat for a couple years.
And Ruby 1.9.2 even if you still find the odd module living in the past. It's way nicer.
This is Great: http://railstutorial.org/ That will glue together ruby, rails and testing. AND it's written for rails 3
'eff yeah. Railscasts is my favourite method. Oh, and R'ing The F'in Manual.
Yep.
I've been following this one and second it, the instructions are very clear and complete. I especially like how he doesn't skimp on helping you to get set up with some awesome typical Rails user's tools.
* http://peepcode.com ($9 for 1 hour screencasts) * http://railscasts.com - free 10 minute screen casts for tackling common problems. * http://railsapi.com - Searchable API, in a better format than the normal rdocs * http://apidock.com/rails - Separate API documentation, with comments * http://railsforphp.com - Find the ruby analog for a PHP method you're familiar with
Step one: learn *Ruby*, not Rails, but *Ruby*.
&gt;I met him in person. I talked to him over e-mail, outside the context of his website. Once again. How do I know that? Why should I take your words over his own words? &gt;So, whether you trust me or not is up to you really, but I'd suggest that you find people who know him in real life and ask them. Or not, whatever suits you. Why do I need to do that when I can read his own words? Anything else is just heresay. &gt;The tone of your responses comes across as angry What a sleazy tactic you have resorted to. You should be ashamed of yourself for sinking this low. &gt;You might even say it's Zed-like, which is why I said relax. No you said that because you saw it on TV on endless cop shows where the cop goes to a person, pulls out a gun and says "you need to calm down" or something similar. &gt;Actually, that really, really smart guy was one of the people who was suggesting to companies not to hire Zed as it would be bad for them. Sounds like good advice to me. I would never hire a guy like that. &gt;After Zed lambasted him in a public channel, he and the rest of them created fuzed. Right. They created it to show him that he was wrong and that they were smarter than he was. It was a great way to deal with zed. Show him up with code. Do something he could not do. &gt;Put yourself in his position and tell me what you'd do. I guess I would feel humiliated. But I don't think I would throw a tantrum. There are many ways to deal with humiliation. He should have said "yup, I was wrong, you guys are better than me, you did something I could not, good for you." &gt;Or not, whatever, just please consider that he is a REAL person with REAL feelings and that as such, he has defensive mechanisms. You do, too, as do I. He never considered the REAL people and the REAL feelings of others so I don't see why I need to consider his feelings. &gt;Also, consider that he has left the Ruby community, as has _why and a few other notable people. Another sleazy tactic. To try and suggest that \_why left the community for the same reason that Zed did or to even attempt to put zed and \_why into the same category is just disgusting. You should be ashamed of yourself and you should apologize for it. &gt;Maybe the problem isn't them, but us. Maybe the problem is with you. You certainly haven't showed yourself to a person of decency or honor in this conversation. &gt;I'm starting with you. So, let's have a normal, considered discussion here. We will after you apologize for trying to smear \_why with zed and for trying to suggest that they left the ruby community for the same reason. After you apologize you should tell me why _why left. 
I made a post covering this a few weeks ago: http://rubypond.com/blog/github-style-capistrano-deployment
Apologize? Wow, dude, that's deep. Honor? Deeper still. You swear at zed, you wish pain and hurt on another human and then call on honor and demand apologies? What gumption and guile. I will answer one thing, though. I don't why _why left which is why it's open to speculation. It could be anything including realizing that there a ton of douches like you in this community. Until you publicly apologize for your slander don't expect apologies nor call on honor. 
Having worked in the Pivotal Labs for a while, I think these guys are great. But this type of project has been done ad nauseum in what seems like every major version of rails. It's useful, but once you know the basics of Rails this is not a project that grows your abilities or understanding anymore, and there are so many examples of it already out there.
Great, just what I was looking for. Thanks for the link!
It's not showing up in mine yet. Does it need to reindex or do I need to log out and back in?
Really really cool! I didn't even realize Dictionary.app was extensible, and I'm an unpaid Apple shill.
How is it possible to hate Ruby? It's like the nicest language ever. And I've seen a lot of languages.
I don't hate Ruby, i hate rails.
I'm not sure how that's possible either unless you just got frustrated with the learning curve; once you get past a certain point, the code seems to just write itself as Rails "thought of everything".
The only thing I did different was that I opened up Dictionary and, instead of searching through the default dictionaries, I searched through "All" which included the RoR and Ruby dictionaries. Perhaps that also affects the way spotlight searches dictionaries. edit: I figured out how to ensure it comes up in Spotlight. Go to Preferences and drag the "Ruby" and "RoR" dictionaries to the top so they're higher in preference than the main "Dictionary" dictionary. I've setup Ruby above RoR since I'm still learning the ins and outs of Ruby. That way when I do a Spotlight search for "String" it shows me the definition of String in the "Ruby" dictionary instead of the "Dictionary" dictionary if that makes any sense. Anything not found in the "Ruby" dictionary (e.g. link_to) will then be searched in the "RoR" dictionary, etc.
The web is PLENTIFUL with arguments for or against both positions. My opinion: rails does too much magic. It's good for first timers and for tiny projects (for me). But maintainence across versions, as well as keeping track of how third party libaries work and how they integrate goes from "magic" to "nightmare" pretty quickly. As always, it appears, YMMV.
&gt;You swear at zed, you wish pain and hurt on another human and then call on honor and demand apologies? Yes I demand an apology. It was sleazy of you to try and suggest the _why left the community for the same reason as zed. &gt;I don't why _why left which is why it's open to speculation. Given you don't know why you chose to speculate it was for the exact same reason zed left. You are a sleazy motherfucker you know that. No wonder you are defending zed so vehemently. 
I just learned that most of my code is unexplainable ;-)
rails has two speeds. (1) Do something simple and get going, fine to know little about the language. (2) Work on larger, more complex web applications, and you better have 2-3 years experience with Ruby. That is what is needed to work well in rails. I love rails, but the learning curve to do things for real is time based. It takes time to master ruby. Once there, it is fast.
The few things I typed in lead to blank pages :D
apples to oranges
yes, but API != guides
oranges poranages
Your poranges intrigue me and I would like to subscribe to your juicebar. 
checkout the materials here :) http://railsbridge.org/
http://www.youtube.com/watch?v=gDoSl-M5tmM#t=1m30s
I would like to see some more documentation about the "load balancing" part of this article. I was under the impression it was broadcast to all nodes and not load balanced between them. 
very good chapter about closures
About.com wraps other people's content with a ton of ads.
[PDF version of the slides](http://tenderlovemaking.com/Gogaruco2010.pdf).
This might be of some use to you: [Learn Ruby ZeroMQ](http://github.com/andrewvc/learn-ruby-zeromq/blob/master/002_Example_Programs/http_load.rb). If you decide to run the examples, you'll want to use JRuby, as it executed them all effortlessly, while MRI 1.9.2 got hung up more than once. Good stuff. 
Why aren't you going to NYC.rb? They've got incredibly talented people there.
Great stuff! I'm part of the Fraser Valley Ruby Brigade near Vancouver BC, and it's the highlight of my week. Good luck!
Location maybe? NYC is a big place I hear, might be doing a more accessible location for people who are far from the "main" location. 
PDF @ http://www.zenspider.com/~ryan/Workflow.pdf I'd really like your workflow keywords. See the last few slides for info.
Beautiful top-model and great presentation 
Just curious, what do you intend to do with this data?
Add some persistence to that and you have something. 
lol, get a life
After doing this I'm still getting, "Unable to load CarbonCore." Can you think of anything I might be doing wrong?
I love NYC.rb. Some of the brightest people I know. It takes on more of a presenter/viewer experience though. I wanted to create something where rubyists can come and crumble their keyboards with each other. Mind you everyone will benefit, either from a deeper understanding of concepts, to noobs getting better habits or seeing how it all fits together. As of right now it would be in main Manhattan but I'd like to spawn 'fight clubs' all over.
I'm also getting that now, although it previously worked. No idea really :(
Hopefully visualize it in some interesting way. I'm not sure yet (and don't really have enough data to do anything interesting with it yet). 
Is NYC.rb not doing the alternating presentation / hacking thing anymore?
I saw this earlier when zenspider posted the link in the comments of that Gogaruco roundup that was on reddit earlier. Good stuff! Maybe someday I'll get to see you present live! BTW, you are a beautiful man. No homo.
I'd be interested in more details on Eric's vim setup. Looking at you guys' setups made me feel like a fucking caveman.
But we all start out as cavemen! What would you like to know about Eric's vim setup? I'm sure I can work up a good blog post about it (and aaron's).
Ok, thanks anyhow!
In the comments the author [explains the title a little better](http://blog.brandonbloom.name/2010/09/where-rails-rocks-and-where-python.html?showComment=1284755687117#c95138244170501945): &gt;In this case, I am genuinely making the case that the Python web-development ecosystem as a whole has a story to tell which is less coherent and less attractive than the single framework: Rails.
Still a useful post, though.
The only really specific question was whether the screenshot was four windows in a tiling WM, or an editor/terminal split up? I'm unfamiliar with OS X... Does he use vim plugins to get the folding and other cool stuff, or is it all built-in features? I've been using vim for years and have only recently started using it beyond a GUI version of vi. I'd be interested in hearing any "advanced" tips for it.
1) it is not a tiling WM, it is just 2 apps lined up well. terminal.app lets you save off config files that include positioning info. vim has something similar I think. 2) no vim plugins. nearly everything is built in to vim. 3) he doesn't have many "advanced" tips beyond "learn vim" and things like "the movement keys are there for a reason"... things like using "3F." to jump over 3 dots on the current line.
Are generating cross language bindings that much easier with llvm then with say gcc? I think its a long way from .net/java where all languages share a gc and I believe most try to partly be/inherit/ecapsulate a copy from at least a few of the base vm objects like basic object/string/list and try to be at least somewhat cross compatible especially with the main language, most also have decent module systems. Besides even if bindings are easy to generate does not mean they will be used on linux where thanks to being pro choices tons of different language bindings for both the two main sets of platform libraries gtk/gnome and qt/kde are available for tons of languages (with varying qualities). Still despite all of this for the most part only python/mono bindings get used for gtk/gnome applications (although these bindings get used a lot since using c/gtk isn't the nicest thing), and for qt/kde applications python bindings get used occasionally(a lot of people think c++/qt is good enough). Java/ruby/c++ bindings for gtk/gnome and c#/java/ruby bindings for qt are used fairly rarely. There are some projects in progress that use javascript bindings for both platforms. There are many reason that these bindings get used, there might not be good enough documentation/examples/tutorials. There are less people using it so bugs are more likely, community is smaller, ect.
Maybe you don't have git installed?
It looks like you don't have GIT installed. This GitHub guide will help you installing GIT: http://help.github.com/mac-git-installation/ After that you should be able to install RVM.
As the others have said, you need git to install RVM that way. You should install git one way or the other. The other option to install RVM is to run a "sudo gem install rvm" command on your current system Ruby 1.8.7 install, and then run rvm-install afterward.
Looks great.
I'd look into [homebrew](http://github.com/mxcl/homebrew) to install git, as well as other command line utilities you may need (such as ncurses and readline for rails console).
On an unrelated note, one annoyance is the new security feature where require statements need an explicit path. So no longer does this work: require 'lib/mylib' You must now do: require './lib/mylib' It's annoying, but I understand why. Don't quite agree it's that much of a security hole either. 
Not the last few times I've been there!
I hate when people compare a ruby gem to a programming language.
You could start ruby with -I: ruby -I. myscript.rb ... or put '.' on the loadpath: # Before any requires $LOAD_PATH.unshift '.' These are kind of lame hacks but it's better than rewriting every require in your app. 
Yeah, I'm not a fan when a programming language breaks backward compatibility like this - this was from 1.9.1 to 1.9.2 the change. Just got stung by it. Not a big deal - it took me a few minutes to figure it out, but it's annoying...
&gt; I understand I have rails 1.8.7 installed already. You mean you have Ruby 1.8.7 installed. Yes, that version comes pre-installed on OS X Snow Leopard, and is a perfectly usable Ruby. You'll find it in /usr/lib/ruby and the executable at /usr/bin/ruby. But to upgrade to 1.9.2, you could also just install [Macports](http://www.macports.org/install.php). Then do $ sudo port intall git and then: $ sudo port install readline * you'll need readline for later when you install Ruby 1.9.2 via RVM, which is *the* best way to run multiple Ruby installs, by far. I have 1.9.2, ruby enterprise edition, jruby, rubinius and maglev all running on my machine. (Don't ask me why I need all those different implementations). Anyway, after installing **git** and **readline**, take a look at this [Rails 3.0 Setup using rvm &amp; Ruby 1.9.2](http://amerine.net/2010/02/24/rvm-rails3-ruby-1-9-2-setup.html) guide. For an editor, unless you are a Vim or Emacs person, you may want to purchase TextMate, which is a really nice programmer editor that is easy to extend and customize for a whole bunch of programming languages. If you get stuck, google is definitely your friend. Have fun. 
You should read the release notes next time. :)
How about [require_relative](http://extensions.rubyforge.org/rdoc/classes/Kernel.html)?
Just requires a code change - wasn't a big deal, but a minor irritant...
Ah this must be the "extend" step.
I often think I want to give vim or emacs a serious go but every time I try it's just too much pain to get the same functionality I get in rubymine or netbeans. 
thanks, this looks like it will make things much easier as I start to understand all the different parts that are required :)
thanks, yeah I meant ruby 1.8.7. I take it Macports is equivalent to homebrew linked above in that it assists me in installing other packages? If so is there much difference between the two?
this will be the step I'm missing! thanks for the link, going to look into GIT
noob.
You want rvm. Hombrew / RVM = answer to all life's problems.
The only thing I can say re: macports vs. homebrew is that if you like *nix, macport has tons of cool packages. Programming languages from Haskell, Io, 5 different Schemes, databases, unix C libraries, editors, etc. Certain things I'll compile myself, particularly if I want them in my /usr/local directory, but for other things I use macports. I installed git with macports, and it has worked flawlessly ever since. 
Thanks for posting this. I'm new to Ruby. New as in, not actually programmed anything in it yet, but have been starting to look at the best way to set it up and start working on it. A lot of web applications out there that do things similar to the sort of stuff I'd like to try my hand at use Ruby, hence my interest. **Couple of questions:** * Can I dive into to Ruby on Rails and still learn Ruby? * Is a 'for dummies' guide worth it or are there better books out there? I've seen lots of titles but am looking for something that doesn't take anything for granted on the part of the reader. I've previously just been doing work in php/mysql creations, so it seems like a very different world.
I think the main issue with learning Ruby by learning Rails without supplementary material is that you'll need to "unlearn" quite a few things later if you want to write code that don't depend on the various Rails libs. [The Pragmatic Programmers guide to Ruby](http://ruby-doc.org/docs/ProgrammingRuby/) is pretty good (link is to a free but older and slightly outdated version) initial read to get you started. Take a look at the online version, and if you find yourself liking it consider buying the updated paper version. Though you'll also want to start keeping an eye on sites like [Ruby Flow](http://www.rubyflow.com/) and [Ruby Inside](http://www.rubyinside.com/) as best practices in Ruby changes very rapidly since the core language is so flexible. 
I just picked up the new rails tutorial book from http://railstutorial.org/, which you can also read for free online. Really recommend it based on what I've read so far.
that looks good, thanks!
I remember that meeting. That was a while ago. I hope this gets off the ground. I'd certainly attend the conference.
After the Pragmatic Programmers' book, your second best friend is the [core API documentation](http://ruby-doc.org/). Get a good overview of the core classes, Object, Module, and Class; that will make a lot of Rails' notorious "magic" easier to get your head around and provide good insight into what is possible to do in Ruby. Once you have a solid understanding of the language, most of the high-level tricks are actually not that hard to grok (or design yourself). Also, that new [Ruby 1.9 book](http://ruby.runpaint.org/) is very promising; it should be a very thorough examination of the language once it's finished but might be a bit overwhelming to begin with. You can also learn a lot by studying Rails' source code, but it *will* be daunting at first.
&gt;Can I dive into to Ruby on Rails and still learn Ruby? Yes! But here's the thing, there's a lot of libraries inside of RoR. Get to know some of the core principles first in Ruby before you dive in to Ruby on Rails. Ruby on Rails makes a use of some techniques that you won't see until later advanced topics in Ruby. Just lots of ruby nuances like optional parameters can't be passed to methods so a lot of methods in RoR take hashes in their method calls.
I'd bookmarked Ruby 1.9. It looks like a good reference to ue along side a newbie book. The Core IPI documentation site is great!
I would be interested in hearing more about your emacs setup, possibly a blog post?
It is faster than ruby 1.9.2-r0 on simple sinatra/sequel page!!!!! Well... in fact REE also faster. I think it is garbage collection issue. But the fact is awesome anyway!!!! Previous releases were neither faster nor stable.
YO DAWG, I HERD YOU LIKE ARGUMENT LISTS ... Never mind.
Eat a dick.
what is this boring bullshit? i thought it was going to be about MVM -- Multiple Virtual Machines in Ruby. fuck this shit
Interesting article, but needs some serious editing: &gt; The artificial mapping from constants to files is present in most Ruby project, &gt; We can use mtime for checking if I file changed 
angry much?
what are you wearing?
I think this should have been the icon for passed: http://i.imgur.com/xIIuu.png
You are right! I'll update the pack ASAP. edit: and done.
All these years I've been destroying my AVI files by hand. Now, at last, there's a better way.
Ahh, back to coded porn again. I feel like a teenager again. 
LOL! haha
May want to also cross post to /r/seattle and /r/seattleevents
Good idea.
I think the logical approach would be to have the system package manager wrap a call to RubyGems to do the actual install. You could have a tool to turn any .gem into a .deb, and the Debian maintainers would then find it easy to keep up to date. However, last time the discussion happened the Debian maintainers were utterly unwilling to compromise. They didn't want RubyGems to be involved in the process at all.
There are consistently great links in this subreddit, thank you for this one!
All feedback is warmly welcomed! If you see any sections of code that you believe are not as clear as they could be, or anything that is not idiomatic Ruby, please let me know and I will fix it.
This is pretty cool.
Thanks! it took me more than two months from starting the project to having something that actually worked, so it's great to have it out there! There are lots of edge-case bugs in the system at the moment, but they will get ironed out over the next few versions.
Neat, it's nice to get something out rather than wait for it to be perfect.
Yeah, although it's a little embarrassing to release something I know has bugs. I guess it motivates me to fix them :-p 
I'm still in the early stages of learning Ruby, so I'm certain that's why I'm confused over this problem. I went ahead and installed jruby, because I was curious about the screenshot.rb they gave an example of. They say that to run the script I can just run it as a ruby script, as such: ruby example1.rb I however, have to type *jruby example1.rb* if I want to run it. Any reason why? Also, when running ruby scripts in general I never type **ruby** in front of the script name. Instead of ruby example.rb I'd just type **example.rb** and it'd run fine. Maybe someone could explain to me why you'd have to ever have to run a script by typing **ruby** first?
Same results here on Snow Leopard. I, too, normally just type the script name as such: ./&lt;scriptname&gt;.rb I have to precede the script name with jruby and it works fine. This was my first foray into RVM and JRuby. I wonder if one of these is suspect in this behavior?
At first, I said to myself, "I love ruby, but why in the name of all that is holy would anyone write a language in it?" - then I read your introduction. All I can say is, great idea and great implementation. I can't wait to start digging through it.
Thanks! It's very heartening to get feedback like this! Using Ruby as an implementation language only really has one downside, which is performance... That being said thanks to new Ruby implementations like Rubinius and MacRuby that cost may soon be a lot smaller. I personally think that given my goals the downside is completely offset by the advantage of Ruby's clarity. I really hope that people find it useful! The process of creating it certainly helped me!
Well, Martin responded to me on the blog saying this: &gt; If you are using RVM it creates a ‘ruby’ symlink to jruby (see ~/.rvm/rubies/jruby-1.5.2/). I’m guessing in your case you installed JRuby by itself which won’t have created the symlink.
We're going to learn the bare minimum required to allow your users to use their Google Account to register and sign in to your Ruby on Rails 3 web app. I think you'll find that it's very easy to add OpenID support for Google Accounts, especially for Rails 3 web apps.
Or, Step 1: Install authlogic.
Ohm is an ORM (for loose definitions of relation) for the NoSQL database Redis. It's a great mixture of high level models (like Activerecord), and low level NoSql benefits with direct key access.
This is a very nice explanation. EM can be confusing and there just isn't enough documentation for it.
Lets start with the RVM issue, what does the compile error look like?
[Learn Rails by example](http://railstutorial.org/book)
Looking at the article you linked, AVS is open source. Go look at the source code and figure it out yourself perhaps?
http://railstutorial.org
I'd agree, great book and definately one of my favourite ruby books. That said, probably not the best for doing Rails 3...
The new version of [Agile Web Development With Rails](http://www.pragprog.com/titles/rails4/agile-web-development-with-rails) is available in Beta format and has been updated for rails 3, so that might be a place to start. If you can getting 1.9.2 working would be handy. Might be worth running "rvm notes" and looking at the dependencies listed to see if that's the issue.
I could be wrong, but Ruby might be too slow to make a really responsive visualization. Especially if you're rendering it in a framebuffer in Ruby. I don't really know how these work much. An oscilloscope display would be pretty easy though. Just take a section of the audio (in PCM) and graph it. Maybe average some samples to widen the graph a bit. Another area you might want to look at is FFTs, which are used to do spectral analysis.
I guess MacRuby would be fast enough.
First you'd have to work out how to get the numbers you would have to use to make visualisation working. Second thing is to get graphics running - you have few options here namely [Shoes](http://shoes.heroku.com/) or wxruby's [PaintDS](http://wxruby.rubyforge.org/doc/paintdc.html)
TIL my Devise OpenID hack to support Google Accounts could've been done a bit easier.
I followed [Installing Ruby 1.9.2 and Rails 3 stable on Ubuntu](http://torqueo.net/installing-ruby-192-and-rails-3-stable-on-ubuntu/) to quickly get setup on Ubuntu 10.4. Even though I run OS X and use rvm for Rails development, I wanted to run Ubuntu 10.4 via VMWare. When rvm wasn't, I decided to just compile ruby 1.9.2, and use it on Linux, since even on OS X I use MRI 1.9.2 95% of the time. For an editor on Linux I like vim with NERDTree, snipmate, and vim.rails. If you want a slightly easier vim, you could install [Cream](http://cream.sourceforge.net/). As far as tuts, I agree with the others about the railsguide and railstutorial. They are excellent. 
The Rails site warns against using the 1.8.7 that is in the ubuntu repos with Rails 3.0.0. Is the problem not significant enough to matter?
railstutorial.org is a very good guide. i wish i had found it a long time ago.
the best option is learn processing..there are many examples http://vimeo.com/videos/search:processing%20audio/b3eea9d1 http://processing.org/ you can use ruby-processing too thought it can be very slowly for a audio visualizer 
Thank you! This looks pretty awesome
very good post
that's a good point, hadn't thought about that. i love the book for really getting me focused on the ruby language. rails doesn't coddle you for long before you need to *really* learn ruby.
I know this is the Ruby reddit, but might I nudge you in the direction of Clojure? Clojure can provide the kind of performance you need, and there's a really rather exciting project called Overtone which combines the power of Clojure with the awesomeness that is SuperCollider (probably the best sound synthesis server available today). There's even an example oscilloscope in the gui repo: http://github.com/overtone/overtone-gui/blob/master/src/overtone/gui/scope.clj 
The problem with bundler is that it doesn't go far enough. They should have cribbed code from puppet, automateit, or chef to handle native library dependencies too. As of now there is no automatic way to deploy your code and install gems using bundler alone.
If you need a quick ruby refresher, http://tryruby.org is a great place to start.
that was interesting.
That book is a bit dated. This is the updated version. Get this http://www.manning.com/black2
What's wrong with using Bundler and Puppet combined?
What platform are you on? The reason that you just type `example.rb` is probably because you have a shebang line on the first line of your script. Check out my response to craigly. That tells the shell what interpreter to run the script with. Otherwise, you need the `ruby`.
Try adding `#!/usr/bin/env ruby` to the first line of your script, and then `chmod +x scriptname.rb`-ing.
You ought to make it self-hosting, for three reasons: 1) It's a pretty standard requirement for a "real" language. It'll also help you nail down some of the API functionality that you might want to include (lists, trees, etc.). 2) Writing a large program in your soon-to-be language helps you nail down the features that you want; a full compiler/VM toolchain is a great way to do this. 3) You can get that sweet double-juiced in slowness of your language, compiling on your VM, which is simulated in ruby.
It has access to Cocoa drawing functions so in this context yes?
You have to set up the infrastructure for puppet. It would have been pretty easy to add the automateit code to bundler. 
You can do this, kind of, using brew. 
That would violate the good old Unix principle of doing one thing, but doing it well.
Interesting but why not use Warden/Devise with these strategies?
Does it have better stack traces on exceptions? I'm loving macruby, but the lack of reliable stack traces is killing me!
How appropriate that it's (at the time of writing) filled with trolls trolling trolls...
not really. The job is the manage your gem dependencies. If you gems depend on native packages and your tool doesn't manage those dependencies than it's failing at the job. 
I knew most of it. You learn something new every day though.
I couldn't find the egg. I mean, we were sperm, right?
oh, from the title I was hoping for a new ruby game like http://github.com/ryanb/ruby-warrior :(
I see gem dependencies and native package dependencies as two entirely different problems.
This looks like it'll have an interesting collection of design patterns. A bit annoying that it deals with Sinatra and not Rails.
I [reviewed](http://ruby.about.com/od/bookreviews/gr/Cloning-Internet-Applications-With-Ruby.htm) this book as well, and was quite impressed with it.
I disagree. There are plenty of Rails-centric books out there to choose from, and hardly any focusing on other ruby frameworks. The fact that the book covers sinatra, haml and datamapper is pretty much the primary reason I'd want to read it.
While it is indeed a very powerful tool, I think the example is just plain bad. _Method\_missing_ shines where you don't know what to expect. Like what ActiveRecord does to construct _Post.find\_by\_name\_and\_author_ and the like - you don't know what attributes there will be on that model, and how they will be chained. If you are making a simple wrapper class, do as the comments suggest and use _define\_method_. What's more, if you want write-and-forget flexibility of _method\_missing_, you could iterate over _Parent.methods_ instead of predefined array shown in comments.
I appreciate the author for taking the time to write well-developed article, but I, too, have to disagree with using method_missing. As Silversmith notes: method_missing really should be used for a runtime consideration. ActiveRecord uses it because until the connection is established there is no way to know what columns exists in the table. There are several issues with method_missing. First, it's a particularly slow way of handling messages. Method_missing is trigger after all of the classes of the parental lineage has been evaluated to see if the message would be handled. Second, if the method is a override of a previous message, the call will never call method_missing. Finally, method_missing can confuse code that is attempting to be introspective is the responds_to? is not also overloaded to check what method_missing. (i.e. you'll have a class that says it doesn't respond to a method when it actually does handle it.) What is being designed is decorator class that is open to specific method implementation, much like the attr_accessor functionality. Creating a method call watch_for_lunch that accepts a target class and method and defines a method that checks the time and only then calls the target class would prevent unintended side effects, be explicit in what is overshadowed, and respond correctly to introspection. Ruby's true power lies in the ability to specifically define methods on the fly.
If $35 is too much for you, you're doing it wrong. But seriously, if it's too expensive, there are things called libraries which loan books for free, or you can hound a Barnes &amp; Noble daily and read it there until you've finished it.
i'm doing it wrong :(
I had a dream last night that a bunch of homeless people in NYC got together with laptops they found in the trash and learned to program. Then they built the next Facebook at a Starbucks. ...is that you?
no, but thanks for telling. things aren't that gloomy anymore :)
Hopefully this site will be helpful to those just starting out with Rails. As I began learning about Rails, I was always looking more more info about the actual process of building a site (more than just Rails basics.) Though, I'm still a beginner and not a programmer by trade, I decided to create a site to help out other people. I'm building the site as I make the posts. There's no feedback section yet, so I would welcome any comments here. Thanks.
Thanks for posting, I've shared this with a couple intermediate-level rails friends of mine. This goes beyond anything I would share with someone starting out with Rails, though. IMO it's a bit overkill with the nested attributes. Thanks for sharing, I enjoy reading about the process of building the site I'm reading it on :)
Is ImageMagick installed properly?
Seriously ? 
ok...i added this to my .irbrc but now fucking irb takes about 5x as long to load!! piece of shit
yes for serious.
Thanks for the feedback. I think that there's a good amount of beginner level stuff out there, so I guess the site is geared for those who have read a lot of that. I had just figured out the nested forms thing, so I guess that influenced my design. I think a lot of what I'll be doing with the site is stuff I want to try out for the first time.
This is awesome!
Can you paste a code snippet of what you're trying to do? For #1, are you referring to a composite key that uses two fields from the same table, or joining on two separate tables? For #2, start by adding an association to the relevant models. Rails is built around associations. Everything else assumes that you have added the basic "has_many" or "belongs_to" to models you'll be working with.
Depends, you should be able to define the relations If all else fails, it's possible to create an sql view and wrap it with a new model... Above all you can still use the classic syntax for find(:all, :conditions, :joins, :includes, :etc) I haven't really looked into doing complex queries with arel but google code search might yield you some results... 
Sure. Here are some common queries I run. Select * from table A inner join table B on A.id = B.a_id and A.customer_id = B.customer_id. This one is to find orphans. Select * from a LEFT JOIN b on a.id = b.a_id where b.a_id is null. as for the "out of model" from what I can see the join(:table) syntax only applies to your declared relations. What I want to join a table that's not declared. Say I have a table of "bad people" and I have a model that has_many users. I want to select users who are not bad people so I want to join the bad_people table even though it's not a declared relation in users or my model. Surely arel will let me join an arbirary table right? 
This may be what you're looking for on this one Product.joins(:brand =&gt; :company) +Product belongs to brand +Brand belongs to company +Product has no relation to company except through the brand
"Ghost Method" sounds so fucking gay. and NO ONE i know uses that terminology.
I think you need to modify your approach to these problems and start working with rails, instead of against it. You should never have to find those orphans if you are doing it the rails way. You simply need to use the :dependant =&gt; :destroy option with your association and let rails take care of the rest. And for finding 'bad people', Why don't you use a column to track users states? I use http://github.com/rubyist/aasm in combination with named scopes for this very purpose. in your model scope :not_bad, where(['current_state != ?', 'bad']) in your controller users = User.not_bad.all 
Just like rails 2, joins can take a string: A.joins("inner join table B on A.id = B.aid and A.customer_id = B.customer_id") A.joins("left join table B on A.id = B.aid").where("b.aid is null")
Again I want to join to a table that's not in any relationship. Just a plain old table. Like this. Product.joins(:customers_who_dont_pay_on_time) where customers_who_dont_pay_on_time is of no relation to products. 
&gt;You should never have to find those orphans if you are doing it the rails way. Sorry but I hate this. Rails is not that good as keeping relationships. The documentation even says so. You can have overlapping transactions or timing issues that result in broken relationships. Even if that wasn't the case why say something like this? It doesn't answer the question. Why even bother replying if you are not going to answer the question? If the answer is "arel can't do it" then fine. Did you really think I don't know about :dependent =&gt; :destroy? Did you really think I didn't know about scopes? I asked a pretty specific question. I would like some documentation on advanced uses of arel. Stuff none of the blogs or documents cover. I didn't ask about dependent destroy or named scopes. I already know about those. Have you really gone your entire life without joining tables on two different fields? Have you really gone your entire life without an outer join? That was an example of why I might want to do an outer join. Is that the only reason why somebody might need an outer join? 
Thanks. That's what I was looking for although that's not very arel-ish it will do.
I wouldn't say it's not very arel-ish. Lots of methods (and the `AR::Base#find` options that were their predecessors) are designed to accommodate both simple shorthand syntax _or_ SQL fragments, without one being better practice than the other. BlogPost.where(:title =&gt; "Foo") BlogPost.where('title is not null') BlogPost.where(:comment_counter =&gt; (2..5)) Above are several different WHERE-clause scenarios. For #1 and #3, we pick the hash syntax because it expresses the idea more concisely than building the SQL string. We use SQL in #2 because there's no easy way to express this with a hash. But there are other scenarios where using a SQL string would be more concise than using a hash.
Please note that the classic syntax is deprecated and will be removed in 3.1
If arel isn't doing what you need. You may find it easier to switch to sequel.rubyforge.org than fight with arel. It's got good documentation and a helpful community.
that does bug me BTW. If you use the hash method AR does the proper translation like converting false to 'f' but if you use the strings you have to put things in the way the database can understand them. 
I think I just might do that actually. Actually lately I have been thinking I want to ditch rails altogether and go to something lower level like ramaze or sinatra. 
Bear in mind I haven't used Arel yet and it's not as nice however I assume you can still let Rails deal with the value escaping for you? BlogPost.where(["flag_col = ?", false]) BlogPost.where(["string_col = ?", "foo"]) BlogPost.where(["int_col = ?", 12]) 
I've used Sinatra for a couple of projects its a great way to get something with a tight scope up and running quickly. As soon as you start getting a bit more complex you'll soon find it worth upgrading to rails to save having to rewrite the wheel. Although saying that I did see Padrino a while back (kind of a full-fat Sinatra) and I have been meaning to give it a go: http://www.padrinorb.com/ 
ramaze looks like it strikes a nice balance. What I would miss of course would be all the plugins.
Right, but you haven't really explained why you can't use a relationship (which Arel is founded on). Your complaint seems to be: I don't want to define a relationship *even though my example clearly calls for one*. So stop being *malcontent* when people suggest setting up the relationship, unless you want to explain why it is a bad idea to use the technology as it is meant to be used.
Ignore everything you know, checkout Titanium Developer by Appcelerator http://www.appcelerator.com/
I'd rather learn how to actually do this than use Yet Another Framework.
Well, Ruby is a scripting language whose standard library does not include a GUI toolkit; one way or another, Yet Another Framework will need to be used. QtRuby is just as much of a framework as Titanium (though admittedly Titanium is a bit thicker). There's nothing that makes one approach "the right way" and another approach _not_. You mentioned OS X, which makes me think you might want to investigate [RubyCocoa](http://rubycocoa.sourceforge.net/HomePage) or [MacRuby](http://www.macruby.org/)… except RubyCocoa has been mostly abandoned, with MacRuby intended to replace it, but MacRuby isn't yet ready for prime time. If you're just asking how to distribute your app… well, bundling will vary based on the toolset you've chosen. Try asking about it on the QtRuby forums.
If you're targeting OS X specifically - consider MacRuby. http://www.macruby.org/ From that page: MacRuby is an implementation of Ruby 1.9 directly on top of Mac OS X core technologies such as the Objective-C runtime and garbage collector, the LLVM compiler infrastructure and the Foundation and ICU frameworks. It is the goal of MacRuby to enable the creation of full-fledged Mac OS X applications which do not sacrifice performance in order to enjoy the benefits of using Ruby. The last part of the tutorial goes over delivering as an .app - with the MacRuby interpreter embedded in. It's admittedly brief. Googling around for "MacRuby app" finds quite a few walkthrus. The only kink might be if your UI is QT - I have no idea how the two might mesh. I would think, without having gone there, that modifying a UI to work with MacRuby would be easier than modifying qtruby to work as a seamless mac app. I could be wrong. Best of luck!
I would use MacRuby, except that this will eventually be on all three, hence the QT. I'm just happening to develop on the Mac, so I'm learning about it first.
&gt; There's nothing that makes one approach "the right way" and another approach not. While this is true, my original point still stands: I'd like to learn how to actually bundle up a Ruby app for distribution, so using Titanium wouldn't actually teach me anything. This is just as much about the journey as it is the destination.
Cross platform certainly makes it harder to do... As much as I hate to suggest it - JRuby? At least then you'd end up with jar files, which may make cross-platform packaging more straightforward. I've not actually tried it, but it may at least shed some light... http://rawr.rubyforge.org/ 
I really hate the way swing looks. QT should handle everything great, except this distribution bit. JRuby is a last resort.
I just created a distribution package for a game written with Gosu. It's just an app bundle with the Ruby interpreter in there, copy your Ruby program into one of the directories and (I assume) pack it up in a DMG. I'm not sure if they use a tool to generate the .app, but it seems to work that way.
&gt;I don't want to define a relationship even though my example clearly calls for one. Is there no way in arel to join a table not in your relationship?
I'm doing very similar thing with wxRuby, and [Platypus](http://www.sveinbjorn.org/platypus) saves the day. One thing though: it relies on OSX's system Ruby interpreter (`/usr/bin/ruby` ), which solves the problem of redistributing the app, because every Mac has Ruby installed. [ It may cause problem on other OSes though, but you'd use different deployment system anyway, and can be easily dealt with - for example on Windows you can use Ruby2Exe] Add some bundler magic (using `bundle install vendor` you can drop all required gems to the vendor directory) and create nice packable project. 
Been there, done that. While Titanium is nice, the idea of using a browser + some custom APIs to acces the OS doesn't exactly work as one would wish. The webkit engine used across all platform isn't consistent (Windows version seriously lacks comparing to OSX). Applications tend to leak and hog quite a bit of CPU - I spent most of my time optimizing the app, instead of working on features. And there's the problem of the UI - obviously when doing cross platform GUI apps you can't count on having 100% native interface (logical trade off). But constructing your GUI using apps like QtCreator or wxFormBuilder is way simpler (and faster) than spending hours on CSS (or learning/using Yet Another Framework with widgets which are not native at all). I'm not saying that Titanium (or AIR) is useless, or anything, but from my experience it didn't work out as expected.
&gt; every Mac has Ruby installed But not 1.9.2... But regardless, this may help me out a bit anyway, thanks for the link.
Yes, this is exactly what I want to do, and sort of what I tried. Did you compile a new interpreter in there? I tried just copying one of my rvm rubies, and it works well when I 'open test.app', but when i double click, no dice...
I'm not a Mac user, but I had to distribute an app for Macs once. Here are a couple resources I could find: [Deploying Qt applications](http://doc.trolltech.com/qq/qq09-mac-deployment.html) [Mac OS Bundle Programming Guide](http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFBundles/Introduction/Introduction.html#//apple_ref/doc/uid/10000123i) Nothing ruby specific, unfortunately.
This is very awesome. Thanks!
http://developer.appcelerator.com/doc/desktop/ruby http://developer.appcelerator.com/blog/2010/06/how-to-full-page-css-3-layout-desktop.html Offhand, there is Shoes if you want to make .app's I'm only suggesting Titanium because you: * Don't need to learn much, it's mostly Javascript, as easy as jQuery * Cross-platform * Portability, port to the iPad in less time than starting a new I wouldn't necessary suggest it for high-computational apps, but for a lot of use cases it'll do the trick, simplicity is the key, appecelrator follows that well.
&gt; Offhand, there is Shoes if you want to make .app's ... this research is for the next iteration of Shoes, actually. ;)
You take up the torch of _why_ the missing? A HOLY QUEST! Pass in peace. 
Thanks. I'm actually the maintainer of Hackety Hack now, which means that I'm also pretty heavily involved with Team Shoes.
You have my upboat now sir
Sorry, I didn't do any of the work. Go to libgosu.org and download the OS X wrapper to check it out. You could email Julian (his email is on the page) and ask how he made it.
Ah! Sorry, I didn't know gosu did that. Ill cartainly check it out, thanks again!
[redcar](http://redcareditor.com/) uses jruby and SWT to provide the interface. It looks quite nice, and is fast as SWT is native.
First all Macs come with Ruby installed so that isn't a problem. Then there is Mac Ruby which gives you access natively to the underlying toolkits. You say you are not interested but frankly using QT on a Mac leads to ugly apps. Better to build your app to use the native toolkit for the platform you are on. This does mean multiple controllers but may or may not be a problem depending on your app. To much work you may say, then consider a publiccode release and get somebody else to write the code for the different GUIs. All in all I'm really biased against QT and most cross platform toolkits. Generally because of the ugly mess that results on one or more platforms. Besides the extra effort might lead to better code design. 
This seems to get revisited every few years. DI just isn't useful or necessary in Ruby. Jamis Buck was the first to propose a DI framework in Ruby, and he later dropped it. http://weblog.jamisbuck.org/2008/11/9/legos-play-doh-and-programming
Nice, maybe they'll get [the book](http://www.pragprog.com/titles/achbd/the-rspec-book) out soon :)
If you create a hash like this: h = Hash.new { |h,k| h[k] = 0; h[k] } Then when you increment the hash values you can just do h[k] += 1 and not worry about the if statement.
Perhaps I don't get it, but wouldn't h = Hash.new 0 be enough instead of calling it with a block? 
Yay! Looking forward to hearing more about the new colors of Shoes! Is QtRuby one of them?
I believe that's Blue Shoes.
In this case it's enough, because `h[k] += 1` expands to `h[k] = h[k] + 1`. However, this won't work: h = Hash.new([]) h[:hello] &lt;&lt; 123 h.keys # =&gt; [] h[:hello] # =&gt; [123] h[:foo] # =&gt; [123] This is because the Hash doesn't automatically add the key/value, it simply returns the default. Then you'll have to `h = Hash.new { |h, k| h[k] = [] }`.
In this case it's enough, because `h[k] += 1` expands to `h[k] = h[k] + 1`. However, this won't work: h = Hash.new([]) h[:hello] &lt;&lt; 123 h.keys # =&gt; [] h[:hello] # =&gt; [123] h[:foo] # =&gt; [123] This is because the Hash doesn't automatically add the key/value, it simply returns the default. Then you'll have to `h = Hash.new { |h, k| h[k] = [] }`.
You are correct.
I like your example, thanks! But I was referring to this particular case. I worried that I overlooked something.
If anyone has any suggestions or questions that I should answer/talk about on either blog, please let me know! I have a bunch of stuff lined up, but I can always use more...
hey this is a fantastic idea, thanks for posting this. I know you posted that you're going to use Devise later, but I was wondering why you didn't start off with that? You're going to need a section where you diff what you have written before to what is needed now. Also IMO, Devise or Authlogic aren't too hard I think for beginners-intermediate to start off with.
Thanks. I've used Devise (along with CanCan) a couple of times before for small personal projects. When I started this project, I didn't want to start off with user registration/authorization stuff because I didn't quite know what I wanted out of it yet. Also, I wanted to look more into the open id type of authorization which I haven't done before. Since I wanted to work on other parts of the site and then get the site up and running as soon as possible, I just went with the easiest thing that occurred to me. Plus, I think it's helpful to see how things are evolving with time as different needs arise. I have thought that it would be nice to easily see the code differences as things change. Haven't quite figured out how I want to display it. I guess screen shots of git diffs between commits might one way to go. I'm also considering just putting the code up on github, so that people can look at the commits and see the differences there.
If I remember correctly there is a way to make it look native. I think it's something like... UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
I'm not very convinced by the examples in the article, because they work around the need for dependency injection by introducing two very dubious programming practices: mocking the object under test and monkey-patching. In the first case, when testing the class with a dependency, the author changes the 'get\_dependency' (btw, I didn't know that anyone uses get\_\* or set\_\* methods in Ruby) method of the object under test to return a test object. Well, congratulations, you're now testing your own test code instead of the code you should be testing. In the second case he argues that SomeClass's dependencies can easily be changed by monkey-patching the class's get_dependency method to return some other dependency. Whether you do this for the whole class or per-instance it breaks so many OO design principles that I get a headache. The one good reason why Ruby doesn't need dependency injection is really simple: blocks. They allow the programmer to require just the right amount of dependency in the right place without the need to pass around roles wrapped in objects. In the example case the work\_your\_magic\_on could take an optional block that is used in place of the do\_something\_with method if given. This removes all the reflection magic that the author needs and gives the programmer a choice of replacing the dependency cleanly without the need to go peeking inside SomeClass's implementation.
I've got one. After you've presented all the new colors, can you maybe write about which toolkit you'd use for ruby desktop development, cross platform or not, if you weren't using Shoes? There seems to be very little discussion about this generally.
`h = Hash.new { |h,k| h[k] = 0}` will do; `a = b` evaluates to b.
Sounds good to me. I've been spending a lot of time evaluating toolkits lately...
Padrino is amazing. I started in rails but it was really too big for lots of my projects. Switched to Sinatra but quickly got frustrated by how simple it is. It's elegant and light weight, but I ended up writing lots of helper methods that I shouldn't have to. Padrino was a nice mix of the two. It's probably going to be my go-to for small-mid sized projects going forward.
The "Deploying Qt applications" link ddollarsign posted is 6 years old. Mac architecture has changed drastically since then, and I suggest exploring newer help.
&gt; please stop comparing but it's fun
Thanks for the heads up.
Welcome!
Oh, we knew it in the 1990s ... Too many people had tried IoC and AOP in Ruby.
Why wouldn't you just use railstutorial.org which is free?
Basically the braces aren't required when a hash is the last parameter passed to a method. They are required at all other times as in your assignment example. You'll see this pattern a lot in Ruby, to account for Ruby's lack of named parameters.
**EDIT: I was wrong. [Spohlenz](http://www.reddit.com/r/ruby/comments/dqxi2/ask_rruby_im_a_php_developer_looking_to_get_into/c128jqp) and [Mytruehero](http://www.reddit.com/r/ruby/comments/dqxi2/ask_rruby_im_a_php_developer_looking_to_get_into/c128k3k) go it right.**
oh wow, so... &lt;%= link_to 'Remove', book, :confirm =&gt; 'Are you sure?', :method =&gt; :delete %&gt; could be written like &lt;%= link_to 'Remove', book, {:confirm =&gt; 'Are you sure?', :method =&gt; :delete} %&gt; ? 
To elaborate: "hash as the last parameter" is the one case that can be parsed unambiguously without braces. some_method("foo", :bar, :baz =&gt; thud, troz) That doesn't work because Ruby wouldn't know whether `troz` was the last argument or the the next key in the hash.
Thanks, perfect example!
Random questions: Are you already gainfully employed and do you live in the Los Angeles area?
Are you looking to pick up any contract work? 
read [this](http://pivotallabs.com/users/nick/blog/articles/category/50-ruby-on-rails) too
PM Sent.
It looks like you got your question answered. I came from PHP as well and found this link quite helpful on various occasions. [Ruby for PHP Developers](http://railsforphp.com/reference/)
Interesting. You just made me realize that something I thought was true about ruby really isn't true. my_obj.apple = "foo" is really syntactic sugar for my_obj.apple=("foo") that is, = is really a method call (or so I thought), which would mean that apple = :color =&gt; 'red' should be a valid statement, since you're really calling self.apple=(:color =&gt; 'red') but it isn't. I've tried a number of ways to get that to work, but it fails every time. So the method def apple=(attr) may be called at some point for apple = but ruby is still doing some other things behind the scenes.
This is exactly why it took me a long time to understand the basics of Rails, even when having studied the syntax of Ruby. Ruby allows for a lot of syntactical magic, and Rails is more than happy to use it. E.g., the respond_to block: respond_to do |format| format.html format.xml { render :xml =&gt; @mah_blogz } end *Looks* beautiful, but having just learnt about blocks, I wondered how it worked on the inside (I fear I might have been manipulated a bit by stricter languages). So I dug down into the source code to figure out the workings. What I saw there first looked like clunky coding (actually rendering all the formats, put putting them in some kind of order -- this looked like wasting time), but after a while I began to appreciate this new way of approaching things. Still, I'm not totally sure to hate of love Rails.
 require "open-uri" open("http://www.google.com").read(15) =&gt; "&lt;!doctype html&gt;" Or am I missing something? EDIT: oh, I see. urllib2 reads lazily, open-uri fetches the whole file straight away.
I noticed this today when I generated a jeweler gem with rspec support and it was broken out of the box (because I got the new rspec 2.0 gem instead of the old one). If you find yourself running into any issues like this: no such file to load -- spec/rake/spectask The solution is to explicitly require rspec version 1.3.0
I think it's worth mentioning to watch out when you can have 2 hashes in the method - this sometimes catches people out e.g. to add html options to a link_to: &lt;%= link_to 'Remove', book, :confirm =&gt; 'Are you sure?', :method =&gt; :delete, :style =&gt; 'color: red;' %&gt; wont work, because you need to enclose the previous hash; you need to do: &lt;%= link_to 'Remove', book, {:confirm =&gt; 'Are you sure?', :method =&gt; :delete}, :style =&gt; 'color: red;' %&gt; or &lt;%= link_to 'Remove', book, {:confirm =&gt; 'Are you sure?', :method =&gt; :delete}, {:style =&gt; 'color: red;'} %&gt; 
The limitation is in the parser and not in the run time.
&gt; open-uri fetches the whole file straight away. This is nearly always what you want, not? I doubt anyone means: open("http://www.google.com").each_line{|line| ... } to issue ridiculous number of get bytes a..b requests. 
urllib2 keeps the socket open so you can recv() as much as you need. I suppose there could be some use for that; for instance, if you want to examine the first magic bytes to determine actual content type, you might want to be able to discard the rest of the data. Perhaps the OP could clarify the intent behind this.
In this context, you'll often encounter the splat / unary operator: def foo(arg1, arg2, *args) [Here](http://raflabs.com/blogs/silence-is-foo/2010/08/07/ruby-idioms-what-is-the-splatunary-operator-useful-for/) is a nice article about it. Grokking this makes Ruby method signatures feel less like magic.
Well, for resources that are not too big, the only difference is who's doing the caching - OS networking subsystem, or url handling library. In either case request is for all of data, and all data gets sent (if possible). If you want something weird like requesting all of data, then throwing most away - well, `open-uri` is simple solution for most common case, there are other methods for complicated case.
well, it's not really about learning Rails or Ruby. but learning the concepts behind services like twitter and facebook which the author seemed to have cloned.
Very cool, thanks!
 data = '' size = 1000 Net::HTTP.start 'host' do |http| http.get '/file' do |body| break if (data &lt;&lt; body).size &gt;= size end end data.size # =&gt; 16101 You get a little more because of the buffer size, but that's negligible.
There's an interesting discussion going on about this over at RubyFlow: http://rubyflow.com/items/4657
Thanks shipshipship. Is there any reason why the `read()` couldn't be implemented in Ruby to work the same way as Python? @ulfurinn, I wanted to do it for speed. When getting the title of a page, there is no need to download the whole page. 
I'm 25 years old, recently unemployed and a few weeks ago, I decided in my down time that I wanted to learn how to program once and for all. My previous experience was as a young child when I taught myself BASIC on an old DOS computer my parents had. Eventually, I went to the library and got a few books on C++ and Java but at the time, I didn't really know enough to actually get a good handle on what the books were teaching. This time, I decided to pretend as if I were starting from scratch. I went to Borders, browsed over their programming section for a while until I came across a book called "[Learn to Program](http://www.amazon.com/Learn-Program-Second-Facets-Ruby/dp/1934356360/)". It just so happened that this book taught programming using Ruby. I had heard of Ruby before so I bought the book, went home, and after a few days I was making programs that could actually do useful things. Now I'm sort of at an impasse. I downloaded [MIT's OpenCourseWare](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/) class on programming and discovered that it was taught using Python. I knew Ruby and Python were pretty similar so I decided to just follow along using Ruby while they were teaching Python. No problem until it got to be near the end of the class. They started running simulations and plotting graphs of the results. I searched high and low for a Ruby equivalent to [PyLab](http://matplotlib.sourceforge.net/)--to no avail. Then I looked for a GUI toolkit for Ruby. Found [QtRuby](http://en.wikipedia.org/wiki/QtRuby) but no good tutorials on how to actually make stuff using the toolkit. There are books on using [Python and Qt](http://www.amazon.com/Programming-Python-Prentice-Software-Development/dp/0132354187/ref=tmm_hrd_title_0) together, as well as tons of books on Qt and C++. In just a week or two, I know I haven't mastered the Ruby language, but I feel that to move on to things other than text-based command line programs, I already need to switch to a different programming language. So, unless there's something I'm missing here, I'm not convinced that Ruby is such a great first language to learn.
it's neither a limitation nor a bug; it's the rules of the parser. ruby has [operator precedence](http://romhack.wikia.com/wiki/Ruby_operators) just like every other language and in ruby = is evaluated *before* =&gt; and : but *after* { }
No reason in particular, it's just not in the API (as far as I'm aware). In MRI 1.8.7 and above the buffer size is in Net::BufferedIO::BUFSIZE, so you can play around with that if you feel frisky.
Along the same lines, in Ruby, you often leave off the parentheses in a method call: foo :bar =&gt; 'foobar' But if you do so, then a hash passed as the only argument *can't* be surrounded by braces. foo {:bar =&gt; 'foobar'} doesn't work, since the hash would be parsed as a block parameter. Ruby is a great language because it values ease of use over consistency.
There's an HTTP header you can use to only get the first N bytes. Look into using that.
IINM that's a really old version of sass -- I don't think sass has had variable names using ! in quite some time. Still, interesting to see the logic/structure behind the idea.
Yeah, [Range](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2) can be used when the server supports it: $ curl -H 'Range: bytes=0-9' netbsd.org &lt;!DOCTYPE $
Dang, I wish I could crank out legendary code like Aaron all the time. I'm surprised arel wasn't always using an AST though... seems like the obvious approach?
That's a really good article, but they didn't mention Ruby Koans at all. http://rubykoans.com/
If you are looking for books... * Book on [QtRuby](http://www.pragprog.com/titles/ctrubyqt/rapid-gui-development-with-qtruby) * Book on [FXRuby](http://www.amazon.com/dp/1934356077/) * There is a book for [Shoes](http://shoesrb.com/) * Tk has a nice [tutorial/docs](http://www.tkdocs.com/tutorial/index.html) with Ruby examples There actually [quite a few](https://spreadsheets.google.com/ccc?key=0AhXm-H2N4yCkdHFlVU1KcEJXeXlUVlRGdGQzbkJlbXc&amp;hl=en&amp;authkey=CKHc3rwM#gid=0) options for Ruby GUI development.
Don't call me a mendicant.
Could someone explain to me what Ruby Mendicant University is? Do I have to pay to join?
you'd employ a noob? nice business you got going there.
Sorry, we've been light on the PR side of things and don't have much information like that, but you can read the blog post that sparked the initial idea: http://blog.rubybestpractices.com/posts/gregory/025-ruby-mendicant-university.html It's completely free. We are working on starting a non-profit organization with a more general goal of forwarding free education (as in freedom, but ideally also as in beer). So for that we're taking donations: http://pledgie.com/campaigns/13580 But for the time being, I've decided to take the majority of my time and dedicate it to RMU to explore an experiment in top-notch, non-commercial alternative education.
I'm (really) new to ruby, just started the railstutorial.org book, I figured out to run the 'gem update rails' command to get the new 3.0.1 version, is there anything I need to do in my actual rails app dir (I'm thinking perhaps change something in Gemfile? or some unknown rake command) in order to protect my sample_app (from the tutorial) from the vulnerability. Thanks in advance.
Not for Rails work off the bat, but we do need a PHP dev that is interested in learning Rails. We are a mainly Rails shop, but we do some PHP work for smaller sites that benefit from being on Wordpress and we are to the point where a dedicated PHP person would be really helpful. I'd rather hire someone that knows my immediate need and then train them on the more important longterm need so they do things the way that we do. 
You may need to change your Gemfile if it specifies an exact version of rails. If it says something like this: gem "rails", "~&gt;3.0.0" ... then you're fine, because that means &gt;= 3.0.0 and &lt; 3.1.x. If you want some extra assurance do a "gem cleanup" after your gem update. This command will remove old versions of gems installed in your system. 
Many thanks for this, didn't know about the ~&gt; and oddly doesn't mention it in the gemfile manual. For anyone else of my ultra-newbie status here's what I did:- *edited gemfile as indicated by retardo above* gem update rails gem cleanup rm Gemfile.lock bundle Now when I run 'rails server' it says reports 'Rails 3.0.1 application starting...' - Yeah! From looking at the bundler manual I *think* the last two commands could be replaced by simply: - bundle update Thanks again retardo :o)
Aaron is the man. And his posts are interesting and informative. 
Just so you know, this post is from the Hackety Hack blog, which is specifically trying to be 'the new BASIC, but with Ruby.' Website here: http://hackety-hack.com/ 1.0 to be released quite soon. As far as GUI toolkits go, Hackety is built upon [Shoes](http://shoesrb.com/). It has [its own blog](http://blog.shoesrb.com), where I talk about developing the toolkit itself. Right now I'm in the middle of a series about developing Shoes itself, but in the middle of next week, I'll be doing one specifically about other options for doing GUI development with Ruby, so keep your eyes peeled for that.
&gt; Many thanks for this, didn't know about the ~&gt; and oddly doesn't mention it in the gemfile manual. It's on the [Gemfile](http://gembundler.com/gemfile.html) page: &gt; Most of the version specifiers, like &gt;= 1.0, are self-explanatory. The specifier ~&gt; has a special meaning, best shown by example. ~&gt; 2.0.3 is identical to &gt;= 2.0.3 and &lt; 2.1. ~&gt; 2.1 is identical to &gt;= 2.1 and &lt; 2.2. ~&gt; 2.2.beta will match prerelease versions like 2.2.beta.12. Also, you're welcome!
NB: foo({:bar =&gt; 'foobar'}) is valid, albeit ugly.
If you do: &lt;%= link_to 'Remove', book, {:confirm =&gt; 'Are you sure?', :method =&gt; :delete} %&gt; you need parentheses, otherwise ruby thinks you're trying to use a proc. So: &lt;%= link_to('Remove', book, {:confirm =&gt; 'Are you sure?', :method =&gt; :delete}) %&gt;
Ann Arbor?
The programmer in me is itching to ask this simple question.... **WHERE IS THE HELLO WORLD?!?!?**
The font looks really messed up for me: http://i.imgur.com/pZieK.png It looked normal at first, and then suddenly, BAM, all blurry and messed up. I think something weird is going in with your typekit integration. By they way, this screenshot was from FF on windows.
Same here and on Chrome.
&gt; Log in via Twitter I saw this on another Rails Rumble site. Is this a thing now?
AA turned off I guess. Also, highlighting is in yellow, that is all.
Fuck you, don't come here asking for help if you're just going to be a dick. He wasn't being condescending, he was just suggesting an alternative approach.
Heh, if you are doing that, you are probably opening yourself up to SQL injection. Better stick to parameterized statements to be safe.
Most of people that would use this site have a Twitter account. No sense in making a user create yet another login information set for a service that will not, most likely, be used every day.
&gt;Fuck you, don't come here asking for help if you're just going to be a dick. Well fuck you too. I ask a question about arel and somebody starts lecturing me about dependent destroy and scopes. If you don't have an answer then why bring up other topics? That's both condescending and dickish. &gt;He wasn't being condescending, he was just suggesting an alternative approach. neither one of his suggestion was an alternative to an outer join.
I don't know about AR but the last time I looked at the source code for ruby DBI it just did a string substitution for some drivers. Maybe AR does the right thing but I think it probably depends on the adapter.
I don't know how these guys make money but they sure do awesome work.
It's nice that they have nginx 0.8.52. I'll be upgrading my server tonight =)
Rails Rumble was crazy. I think we bit off way more than we could chew. I like our site, but not sure how its going to hold up against judging when people are just trying to quickly look at a site to get to the next one. Super-worried about some random bug we never encountered happening and making people leave right off the bat. Still, it was incredibly fun, and I'll be doing it again next year (though with a more scaled-back idea hopefully). If anyone's wondering, here's our site: [http://planitshareit.com](http://planitshareit.com)
They make money through consultancy, Rails and Ruby alike. They also get some money through Passenger-specific support but I believe it's not their main source of income. Passenger probably takes a good amount of their time and it's a great product so I believe the donations they get for it are more than deserved. If you take a look at their clients you'll see that they probably have a good bankroll going.
Great job on your app. Fantastic design. I'll be using this to plan my Christmas trip.
Thanks! We definitely over-planned, in that we wanted to allow * batch photo uploads integrated with facebook, so you only have to upload once * easy sharing of your entire trip's journals/photos, or just a specific day's photos, through Tweet/FacebookWall icons. * activity recommendations * Auto-complete/suggest when typing in your Add Event box populated either through Google, Yelp, or Foursquare * adding photos/journal entries to specific events or days * several printing options, such as printing your trips details in a booklet form complete with daily driving directions * keeping track of flight info (like delays and such), or all the confirmation #s you need (like for hotel reservations or car rental) We really want this to be an all-in-on planning site, and an all-in-one sharing site. We're definitely going to continue working on this to complete that goal, but you can obviously tell where we fell short on time, when you see things like un-styled ul's with bullet points, or plain blue,underlined links. :-P But for our first rumble, we had fun and think we did alright.
Yeah when we were building http://pint.me we had originally planned on using Facebook logins. Turns out the Facebook API doesn't allow posts to friends' walls nor does it allow a user to send messages to friends through the API. Total weak sauce, so we dumped it and switched to Twitter. This was my first rumble, too. I had blast.
&gt; No sense in making a user create yet another login information set for a service that will not, most likely, be used every day. I understand the purpose, I was curious whether the use of twitter as single-signon solution was a trend.
There's a prize for the best apps that use twitter for login in this competition. They are probably going for that.
Duh! NSFW!
Only if your coworkers are offended by eights and equals signs...
Yeah man, its something with TypeKit. We only tested it on Safari and Chrome. 
Hopefully not since I don't have a Twitter account.
While the idea is good, it's not original. Not only that, but it is hard to implement it from an idea to a service. You only have a few bars at the moment. It will be hard to get widespread adoption - but if you did it would be cool.
We didn't enter into that exhibition match. We originally had the app totally ready to go with Facebook, but had no good method of notifying the recipient that someone purchased them a pint. 
The app looks great. http://pint.me was fun as hell to build for the rumble. We had a major issue with using Facebook right in the middle of the competition and had to toss all that work out in favor of Twitter. I can't wait to see who makes it through to the public voting round. 
Good luck to yall. I've seen you around in the irc channel. Did you ever get the Twitter ban straightened out? We dont plan on winning, but we were hoping to at least sneak into public voting. Looking at the 2009 entries, we knew we needed a designer, because if every other category is about the same as other teams, a good design can bump up your score by a full point or more giving you an edge.
Really cool. Maybe instead of fixing it in CTags it would be easier to port this feature to [rtags](http://rubyforge.org/projects/rtags/)?
Thanks for the link. I love the idea of working with a ruby implementation instead... I'm only concerned about maturity/long-term prospects for the project compared to exuberant-ctags (which doesn't look like it's going anywhere, ever).
Yeah we got things straightened out (thanks to @railsrumble tweeting a plea for us). We know we won't win, but if we make it to the public round we're going to call it a success. What app did you work on this year?
[planitshareit](http://railsrumble.com/teams/gabe-s-crispy-duck-balls) We had two decent initial review ratings (with bad comments) but our last two reviews have pretty much dumped our chances of making it into the public round. We only finished maybe 20% of the most important part of the site, so that was a huge issue.
In order to get ctags to generate the tags for describe and context blocks you could add the following to ~/.ctags $ cat ~/.ctags --regex-ruby=/^[ \t]*describe (.*) do/\1/d,rspec describe/ --regex-ruby=/^[ \t]*context ['"](.*)['"] do/\1/C,rspec context/ 
Yea, I thought about a non-code solution. Unfortunately, you still need to patch ruby.c to add those kinds to rubyKinds, so it doesn't work out to be much less effort, and it's more effort for end-users. Originally I did this with a separate rspec parser, but to cut a long story short, that required me to rename all my specs as e.g. dog.spec. The approach I have at the moment is the one that *seems* to minimise the pain for end-users. Thanks for the suggestion though! I released in its buggy state to get feedback like this so it's much appreciated. :)
I'm not certain that I understand what rubyKinds is, but --list-kinds=ruby certainly pays attention to the settings. $ cat .ctags --regex-ruby=/^[ \t]*describe (.*) do/\1/d,rspec describe/ --regex-ruby=/^[ \t]*context ['"](.*)['"] do/\1/C,rspec context/ $ $ ctags --list-kinds=ruby c classes f methods m modules F singleton methods d rspec describe C rspec context $ $ echo --regex-ruby=/bob/bob/b,lines containing bob/ &gt;&gt; .ctags $ $ ctags --list-kinds=ruby c classes f methods m modules F singleton methods d rspec describe C rspec context b lines containing bob My suggested solution doesn't detect the containing describe for a context should there be more than one. Which from the screenshots it appears your solution does. Anyway, good luck with your project. 
For manual use on OS X 10.6 you could also use say -o audio.aac -f text.txt Or for MP3, as a bash function: text2speech() { basename=$(basename $1) filename=${basename%.*} dirname=$(dirname $1) say -o "${dirname}/${filename}.aiff" -f $1 lame "${dirname}/${filename}.aiff" "${dirname}/${filename}.mp3" rm "${dirname}/${filename}.aiff" } `text2speech text.txt` produces text.mp3
For super manual use you can also select the text, Right Click (yes, assholes, we've had this for years now) &gt; Services &gt; Add to iTunes as a Spoken Track. Right?
I am just starting to unlearn everything and restart with TDD. This link was really helpful to me. RSpec is pretty incredible, as well as an interesting study of domain specific language.
What does rspec offer that lighter frameworks like matchy and context don't? What I want is faster tests and that's all. I don't know what has to happen to get that yet but as soon as your test suite gets to a decent size it becomes a pain in the butt. There have been so many attempts to fix this like machinist, factory girl, etc but in the end none of them really accomplished what they set out to do. Autotest is the only important thing anymore. The rest I could give a flying fuck about until they give me something that's ten times faster.
Wow! your username is certainly befitting. I am just starting with test/behavior driven development and heard good things about rspec. I haven't ever tried matchy and context. You certainly have a lot more experience with this than I do. I hope to get there someday, hopefully less *malcontent* with the testing suites than you currently are.
get a few hundred tests under your belt and you'll start feeling the hurt. I have went the full circle. I no longer care about fancy DSLs, I don't want to write my tests in english, I don't want to write a bunch of "given this I do that then I see the other thing" tests anymore. It's just more work for nothing and it takes forever to run your test suite. I say we go back to basics. Unit testing, integration testing. Just make it fast so it's not painful to run the test suite.
I realize registration is closed, but for the entrance exam, what was the sample class' duration? You said optimize the number of students attending at least a single meeting, but never specified how long they'd have to be able to meet for. Unless I just skipped over that part?
Oh, each time represented a meeting start time, the duration wasn't important. Basically, the goal was to pick two start times, one from each day that optimized for the following things 1) That at as many students as possible could attend at least one of the sessions, and that 2) if possible, optimize for the most amount of students that can attend both days without decreasing the 'at least one day' count.
Check this out: http://www.parasoft.com/jsp/technologies/unit_testing.jsp?itemId=326
Yea, I totally agree with this. I like writing tests as part of the development process because it helps me clarify my thinking, but on my current project it takes about 8 minutes to run the whole rspec test suite. Fuck.
Glad you liked it.
clever but I'd like to see less mainstream options. How about using sequel or datamapper for an ORM? How about using erector for the template engine? Hopefully it can be extended.
There are lots of tools like that. I already mentioned autotest which does the job without you having to pay somebody and set up a different machine. 
Yea I am ready to throw rspec under the bus.
How do you become a part of this?
Ruby is very nice as a DSL, and thus for a PEG. I like that. One thing that annoys me in Ruby is the cultural bias towards the implicit. In this case, it took me quite a lot of hunting through the docs before I found the definitive word on the origin of the `SexpParser` class. http://treetop.rubyforge.org/using_in_ruby.html &gt; If a grammar by the name of Foo is defined, the compiled Ruby source will define a FooParser class. That makes me want to strangle people. I would like to *specify* the name of that class. That way, someone reading my code does not have to dive into a rathole to figure out where it came from. Treetop.DefineParser('SexpParser', File.join(base_path, 'sexp_parser.treetop')) Or is there a way in Ruby to do the following? SexpParser = Treetop.DefineParser(File.join(base_path, 'sexp_parser.treetop')) Anyway, PEG specification via Treetop is quite clear. Very nice.
It's on [github](http://github.com/intridea/rails_wizard/)... How about cloning the repo and adding them yourself? ;-P
We just completed a call for students, but there will be another one in a couple months. You can monitor our public mailing list ( http://groups.google.com/group/ruby-mendicant-university----public ) or follow me on twitter (@seacreature ) for announcements. There will also be a 1-week event run some time in the next couple months by our alumni, designed to prepare folks for the entrance exam. That might be a good way to see if RMU would be a good fit for you. 
I absolutely agree on the naming thing. I had the same issue when I was working on my first Treetop grammar, very non-obvious. It might be worth submitting this to the Treetop mailing list. If I see your post go up there I will chime in and back you up.
Ok. I sumitted a suggestion to the moderators at http://groups.google.com/group/treetop-dev/topics?start= And by the way, why is there no monospace (fixed width) font for google groups? It is so hard to discuss code there. Do you ever have that problem? It's bad enough to have to indent for reddit, but at least that works.
This seems really cool, it would be great if it gave an explanation of what it was doing for beginners like me :)
Some data for you: http://www.zenspider.com/~ryan/report.10000.html that's 10k tests, as the url implies, 100% positive and negative tests in two different runs. So, with passing tests, rspec (2.0) is 5.72 times slower than bacon. You can tweak the url to see smaller test run data... from 1 to 10,000 by 10s.
 MyClass.public_instance_methods(false)
Is there a way to determine why it's so slow? Also do you have any numbers for add ons like matchy or context? I would think they would be OK since they are so small.
I must admit I generally avoid mail lists like the plague, so I don't encounter google groups much. I'll keep an eye out for when the mods approve your input, and I'll chime in and concur. Thanks!
To chime in, you'd have to go through a moderator too, I think. It's not exactly "open". I wanted to submit a git-pull request instead, but I could not figure out how it happens in the source code. Can you? ... Oh, wait. I just found it, in `treetop/compiler/node_classes/grammar.rb`. But that doesn't help much. `grammar_name` is global, and it is set in the huge, auto-generated file. I'll have to let the authors consider this.
Why rspec is so slow? Too much code, Too much clevar. That's why. technomancy's bludgeon was written precisely to point out that there was too much code in rspec (enough to bludgeon a man to death if it were printed on paper). Obviously a lot of the clevar can be avoided to speed it up by looking at the times for bacon and minitest/spec. I've done many ports from rspec to minitest/spec with a fairly mechanical process and gotten good gains out of it. As far as matchy and context go. I didn't benchmark them because I didn't know about them. I'd be happy to include them to the mix. You can add them and submit me a patch on the minitest_bench project on github.
I might have to give bacon a try. It sounds like a good mix of functionality and speed. Does it have the capability to only run one or two tests like some other frameworks do? 
A couple of suggestions for you. In addition to the optional depth field you should also have an order field so the children can be ranked. A lot of times you don't want the children in a random order and you want to be able to move the children up and down. Also you may want to look into ltree extensions for postgres. I know that would make it specific to postgres but it would probably make it run a lot a faster too. 
The page no existance? Github 404'd me.
remove the colon from the end of the link... http://github.com/stefankroes/ancestry
Ancestry is compatible with the acts_as_list plugin which will handle child order for you: acts\_as\_list :scope =&gt; :ancestry http://github.com/rails/acts_as_list **edit** markup
fixed
Protip: escape your underscores so they don't render markdown.
I've gotta say, it's an impressive lookin' plugin! Perhaps a bit heavy for most projects, but good to know about. Thank ya!
My experience with Ancestry, for those in doubt: I've used ancestry to replace awesome nested set in a rather complex setup and it works like a charm! In short, we had a nested set with about 50k nodes, and after we moved from DB2 to postgres, writes would easily take 5+ minutes or deadlock. Mainly because a larger part of the tree needed to be updated for every move, create or destroy. There MVCC kicked in and postgres ended up rewriting and indexing the whole table, which took ages. As a result the users started to try the same operation 5 times, locking up the system etc. As this got worse and worse, I bit the bullet and migrated the whole system to Ancestry. It was a huge success ;) The materialized path approach is much cheaper in these operations, even moves, though in efficient, still don't update the entire table and perform way better in concurrent usages situations. And for reads, which you might expect to be slower because nested set is supposed to be super fast with them, I have not noticed any performance difference. I must say we do some crazy complex queries, so it might just not be significant, but it seems materialized path is just as or faster then nested sets. On a final note: nested sets are very easy to break, i've had entire subtree's disappearing or appearing somewhere else regularly with ANS. It is (almost?) impossible for this kind of corruption to occur in ancestry. I've only managed to corrupt the tree with manual updates, and even then it was easy to repair. TL;DR; Migrated from nested set to ancestry, write performance is way better, read performance at least just as fast. And much, much more reliable!
Upvoted originally because I thought this was an interface to the Ancestry.com site which my wife likes, but after reading the description it's actually probably going to help me a boatload on an upcoming project. A++ would upvote again.
Has anyone tried [hyrarchy](http://github.com/DanaDanger/hyrarchy) ? It should be even more efficient than ancestry. It is lacking in some features such as scoping, and there doesn't seem to be a community of users or active development.
Last update was in 2009. Doesn't look like it's being maintained anymore.
yeah, but it was used in production, so it is probably working with few defects. The lack of development does seem to translate to fewer features.
BTW, posgres does have [recursive queries](http://wiki.postgresql.org/wiki/CTEReadme), which would allow you to keep the adjacency model (quick &amp; simple). You'd have to use find\_by\_sql, though.
The problem I have with nested set plugins that led me to develop ancestry is the complexity of the data structures in the database. The same goed for hierarchy i guess. Everything is great and efficient until something breaks (and this eventually will happen). At that point ancestry will prove to be far more understandable and fixable.
It's a graphical way of creating an empty Rails application, with common libraries of your choise preconfigured.
Thanks for explaining some of your reasoning. I think the problem with awesome_nested_set is that it is not efficient. I have never had problems with things breaking, and I wouldn't expect such a problem with hyrarchy either. How you can assert that code will break that you have never used? Are the plugins lacking in transactions? Ancestry does seem that it would be easier to understand when just looking at the db- something that I value, but not because I am expecting things to break.
This is on the front-page of reddit, with no comments as I write this. A travesty. Sinatra helps me develop my programs in a very nearly bottom-up style. It makes my life easier without cluttering my head in the slightest. When hacking in Sinatra v merb/rails (haven't gone back to frameworks since before merb -&gt; rails), I'm amazed by how much more I develop the concept, how much more I can change my code, because in the early stages my sinatra projects are just a Function Soup -- a couple of pages of simple code and a module of functions. Changing the way my app does something is always a nearly lisp-like joy, because with Sinatra and Rack I have a better choice than "use our framework" or "extend thin." I have to say that Sinatra is the most productive environment for me right now. It stays out of my head and never saps my activation energy. I like the new before: filter abilities. That's gonna come in handy. I also let scss fly under my radar. Edit: yeah, and I'd say empirically, as well -- I've spent perhaps 10 minutes reading Sinatra docs because I needed to. Merb was/is a fantastic project by great hackers, and merb/datamapper were an absolute boon, but a random slice of dev time would frequently find me reading up on DataMapper or Merb, so as to work around them, and not getting things done! The same was true of ActiveWhatever and Rails (even moreso). Over time, certainly hours and hours per project. Since going to Sinatra and writing more bottom-up, poof. Complexity vaporized, regular old ruby prevails, any features I'm using or importing, I've wrapped up in a function myself. I could see going back to the framework once the exploratory bits are done, and you have a situation that warranted it, ie, other people maintaining the project going forward. But for my own stuff, I love Sinatra. (As other people have commented, to DHH, Rails is His Stuff, so he's doubly benefited by using it).
^-- This. A lot of people have questioned my preference for Sinatra over Rails, but I value simplicity and minimal-abstraction a lot.
Also note that Sinatra and Rails play very well together (github i.e. is using both).
It's just my general experience that in IT stuff tends to break a lot ;-) Better to be prepared. You are right that I'm not in any position to have an opinion on the reliability of hyrarchy. The documentation and test suite do seem pretty minimalistic.
Rails has a huge ecosystem of plugins, I'd hate to give up all that funtionality I get for free.
I've used both, and will continue to do so depending on the situation. I agree with mr_luc though that Sinatra feels a lot more "friction free", especially when I'm first starting on an app. I plan on starting all my future apps as Sinatra apps and only break out Rails when it becomes necessary. Being able to keep the entire framework scope in my head at any given time is just so much smoother in the long-run.
You could do one of two things. If the code is reusable for more than just your project you should package it as a gem and then just have your model use it. Otherwise, you would put it in lib.
Also check out Defensio: http://github.com/defensio/defensio-ruby Defensio also does malicious content and blocking of URLs based on their category (ie: no pr0n).
When does rails "become necessary" - for plugins? does Sinatra not scale? etc. (I'm a ruby noob).
I've had to do a lot of work with tree structures in Postgres, and recursive queries are easy to manage, but materialized path with indexes on the ancestry columns perform much better at larger scales. The trade off of course is maintaining them.
&gt; does Sinatra not scale? As if Rails does!
phpmyadmin phppgadmin hirb
phpmyadmin phppgadmin need an apache server set up. I don't know much about Hirb, but the goal here is to simply display a list of all tables and columns suitable for printing. Live and let live?
True. Note however, that the number of Sinatra extensions is also growing quite fast and that lot's of the plugins are usable with Sinatra (i.e. if you use Sinatra with ActiveRecord, you can use acts_as_list, ...) or are just wrapping gems you can also use with Sinatra.
Static content scales well. :P My reason for moving off of wordpress and onto jekyll was that I commit to github everyday, maybe I might commit more blog posts. Also way easier to host a jekyll blog for free.
Well, [Duck Typo](http://ducktypo.blogspot.com/) is a blogger blog that was mentioned several times. Otherwise, I don't get the point of the question.
It's more of an observation than a question. If I was to ask a question it would be this. Why haven't ruby blogging engines have taken off. Not even people who use and love ruby use them.
&gt; As if Rails does! does Sinatra not scale *as good as Rails does*? fixed it.
It's a very fuzzy place. But actually, by the numbers, Sinatra should scale easier than Rails as it has a smaller memory footprint. What I use as a benchmark for when to look at switching is at the point I have re-invented most of the Rails directory structure, imported ActiveRecord and ActiveSupport, I'm suffering when refactoring due to a lack of template helpers. That's the point I step back and decide if I should be switching over to Rails.
Seconded. That's exactly how you would go about it.
Only problem with Mephisto is it's a nightmare to start tinkering with. I'm sure it's very capable but if it's so complicated that you've no chance of understanding it then you might as well be on Wordpress or on a blog written in a different language, right? Enki ([http://github.com/xaviershay/enki](http://github.com/xaviershay/enki)) is a really nice rails based blogging engine which is actually easy to understand if you know a little rails, unlike Mephisto. I used it to put together [my website](http://www.pixellatedvisions.com) and it was a breeze. Before then I had a prototype I'd done on Mephisto and to be honest it might as well have been written in PHP because the code was a black box of complexity and not written in a "rails way".
The "why isn't there a Ruby blogging engine?!?!?!" thing comes up all the time. And the simple and honest answer is that maintaining a blogging platform or a CMS is a huge pain in the ass and not terribly interesting. Rubyists have, in their ruthless minimalism, instead opted for streamlining static workflows as opposed to building platforms that require maintenance. Most content doesn't change after the fact, and static content is portable as well as content stashed in a DB. That or you could use Tumblr, which is a Ruby blogging platform :P
nicely explained:)
You discovered Reddit AND Minecraft! - your girlfriend
Not bad, I think I like the concept. Minecraft-inspired?
In the case he described, would there a difference between Person.instance_eval do def test; end end and Person.class_eval do def self.test; end end ?
Not that I know of, and I think the latter is clearer.
dunno, but prolly. I use minitest almost exclusively.
I think this person is randomly promoting parasoft in all of their replies... wonder if it's a spambot.
Same here; it simply sidesteps the whole semantic issue about #instance_eval creating class methods.
I've used sinatra for little one-offs and I love it. I look forward to using it for a "real" project. However, my coworkers remain enamored with rails, sinatra being too "weird" and not holding their hand enough. Then there's the one guy who thinks sinatra does too much and prefers to code directly to rack.
Why not just make find_by_login yield a user object to a block instead of misusing a predicate to do that? User.find_by_login(login) do |user| ... end 
This seems like a horrible idea to me.
Uh, doesn't this wildly depend on the container or server you host your shit in/on?
Did you even *read* his code, dork? OF COURSE he is right and you are wrong! You missed the `self.` which, when evaluated in class context, creates a class method. THat was the whole freaking point of his question. jeez. EDIT: The parent deleted his comment. My comment mirrored the structure (and gramatical errors) of the parent's. I'm not actually this obnoxious.
'horrible' is too strong a term. Many languages support this kind dynamism. Further, Ruby has a very simplistic superclass linearization algorithm and something like this could supplement those shortcomings. 
Let me rephrase then. My primary problem is with the reordering of superclasses. It seems to me that the need to do something like this implies there is a flaw in the design of your software. The fact that Ruby's superclass linearization algorithm is simplistic is a virtue, not a defect. As for unextend, I can see a use for that to simulate scoped open classes.
i think it's pretty clear that the point here is experimentation in meta/super/class relations... there is no doubt the question as to the utility of such dynamics, but how will we ever find utility if we don't first explore it? The key question to me seems to be: how do we allow such dynamism while keeping interfaces clean? There are certainly cases where such dynamism can be useful- and also cases where code will be generated whose maintenance by others is nightmarish... If nothing else, the point of this library is to get people arguing over the virtues and vices of various aspects of such dynamisms.
Well, some people may disagree as to whether the simplicity of Ruby's superclass linearization algorithm is a good thing. What i intend to do next is to use this machinery to implement [C3 linearization](http://www.python.org/download/releases/2.3/mro/) in Ruby.It may or may not be worthwhile (like a lot of these experiments) but it will be interesting to see nonetheless. Also I agree that it's generally a bad idea to do any 'remixing' on a Module or Class (because of the number of instances that will be potentially affected), but i think it's fairly safe and may even be quite useful to do it on a class-instance using the extend-based methods. Imagine an object state machine that can change its functionality by reordering the precedence of the modules in its ancestor chain. Generally I would say the include-based methods should be avoided, I just left them in there for completeness and so people could have a play with an ancestor chain that is completely read/write.
Sweet! Hope it goes well.
Thank you.
 Great article! Thanks for posting.
Sweet article. Thanks for the link -
Is str += str + "a" the same as str &lt;&lt; "a"? What is the &gt;&gt; after str &lt;&lt; "a"? Nice find though.
That `&gt;&gt;` came from irb, it should be on a new line but it looks like a `&lt;br&gt;` got lost somewhere along the way. It should read: ?&gt; fast = Benchmark.measure { ?&gt; str = "" &gt;&gt; 100000.times { ?&gt; str &lt;&lt; "a" } &gt;&gt; } =&gt; # And even then he should have probably put the `}` on a line by itself to be identical to the first example. i.e. ?&gt; fast = Benchmark.measure { ?&gt; str = "" &gt;&gt; 100000.times { ?&gt; str &lt;&lt; "a" &gt;&gt; } &gt;&gt; } =&gt; # 
 str += str + "a" is *not* the same as str &lt;&lt; "a" ... in fact, the first one will probably run out of memory. :-) He means str += "a" 
Sorry for the typos guys :) I wrote it quickly combined with the fact that blogspot sucks.
[Results on my poor notebook.](http://gist.github.com/649954)
No worries. I was just checking to see if I didn't know something new. lol
&gt; `INSERT INTO table (column_1) VALUES 1, 2, 3, 4, 5, 6, 7, 8` That's valid SQL?
No it isn't. I suck at blog posts sorry. I was just giving a sample of what made me come across it. :/
So how *did* you come across this doing SQL inserts? Don't you have to do an `INSERT` per row?
http://gist.github.com/650040 There is the actual code. Technically its one insert of multiple rows.
I believe string interpolation is even faster than &lt;&lt; try that one. 
I'm no DBA, but there has to be a better way to import a large amount of comma-separated data than a million insert statements. Something like DTS tools on MSSQL?
I know there is a gem that will allow you to easily do bulk imports, but I wasn't in a position to be installing new gems in our enviroment.
I've gotten a CSV importer down from 15 minutes to 15 seconds by swapping from a purely ruby-drive implementation with FasterCSV to using a native LOAD DATA and some post-processing UPDATE statements to apply any transformations I was doing before. However, I'm still stuck with one of my imports in the super-slow pure-ruby implementation by due to using [attr_encrypted](http://github.com/shuber/attr_encrypted) on a few columns. Wish there was an AR extension that would use MySQL's native AES_ENCRYPT() functions
Without reading, I'm going to try my hand at a tl;dr. The append operator is faster than the copy-and-append operator because the append operator doesn't have to do any copying. Amirite?
No, because that's not expected behavior.
`str += "a"` is the same as `str = str + "a"` (creating a new string and assigning it back to the original variable); `str &lt;&lt; "a"` is a mutator method that changes the string in-place. Here's a little demo that should make it clearer, through the magic of monkey-patching: class String alias :old_plus :+ def +(val) puts "In String#+, creating new string" old_plus(val) end end str = "foo" puts "Using +=" str += "bar" # prints "In String#+" message puts "str is now #{str.inspect}" str = "foo" puts "Using &lt;&lt;" str &lt;&lt; "bar" puts "str is now #{str.inspect}" 
My small suite of specs went from 6 minutes to 81 seconds with this. My ruby instance running autotest bounces around 20-900mb. Not bad at all.
In the future, just preprocess your csv, then use the .import command (or the equivalent for your db). I've done processing on 1,000,000+ rows in sqlite3 and the initial insert took no time at all with this method. Building the indexes and querying was a different matter, but that was to be expected.
This is the standard sql: INSERT INTO table (column) VALUES (1), (2), (3), (4), (5); That would insert five rows into `table`, with each row having `column` set to the specified number. It's quite a bit faster than running one insert per row, and is *typically* transactional - if any rows fail to insert, none are inserted.
It shouldn't be, as it creates new string objects as well.
Sad, isn't it? That people are surprised.
To put it simpler, http://gist.github.com/650814
Yeah really. It pretty much breaks everything... str1 = "hello" str2 = str1 + " world" puts str1 =&gt; "hello world" eep!
The big surprise comes to many people when functional methods are faster than imperative methods, thanks to all copy-on-write sharing in Ruby internals. Many people expect `#[](start,size)` to copy, silly people...
Didn't maintainership on this project just change in the last year or two? I would be interested to know if they are just too busy, or if there are some other technical or community issues pushing them elsewhere.
That some people don't know this already isn't sad... there is a first time for everyone.
How would you easily change these per environment? I'd want them for the tests but not for development, although maybe I shouldn't care about development.
The best thing to do at this point is take it out back and shoot it in the head. Repeatedly. 
Why yes! Except when you're making applications that go into production.
Every application which has ever gone into production was programmed by someone who lacked a complete understanding of the language he used. This is even more true in badly-documented languages, such as Ruby.
I doubt that knowing how typical string concatenation works requires a complete understanding of a given language (if not Python's ropes).
You are correct. Writing effective software does not require a complete understanding of a given language.
ಠ_ಠ
It must depend on your tests because I didn't see any improvement at all. 
&gt;We've had to stop maintaining it due to ever-increasing constraints on our time.
It's a mess. 
No mention of NetBeans IDE. It has descent Ruby and RoR support.
can anyone who's used this weigh in on this vs. haml
Could you please include erector or a fast markaby clone in your benchmarks please.
Not sure why you were downvoted... it's true. My tests are building/destroying large amounts of data at a time. If you're not building and destroying a lot of data then you don't hit lag as often due to garbage collection.
I've been thinking a lot about the possibility of Cucumber becoming the primary source for 3rd party library documentation. I wrote up my thoughts at this link. Any other thoughts on this idea?
I always have a huge backlog of actual work to do, but if I didn't, this looks like it'd be fun (and I'm slightly ashamed of how geeky I must be to think that). Brought a smile to my face though.
I was ready to downvote and complain about how this technique is often abused, but it turns out the post shows the nuances and restraint that should be applied with method_missing. Good read, especially for greener ruby developers, or those who find themselves reaching for this tool in their toolbox a lot.
Thanks! Actually, it was that very complaint, about how often method_missing is abused, that motivated me to write the article. So, I feel your pain.
I actually use the crap out of RMagick and I think it's pretty great. There are memory issues but (from my experience) they can be fixed. 
Really cool stuff, I'm guilty of not using `respond_to?` - I stand corrected.
[Old news](http://www.mail-archive.com/rubyonrails-core@googlegroups.com/msg07706.html) (and I don't like it, since it can be kinda slow - YMMV)
Right there with you. I started off with "ugh, not another method_missing article". But the OP really highlighted the requirements you should think to integrate before "jumping in bed with method_missing". Great article.
Fun variations: &gt;&gt; class Array; def to_proc; Proc.new { |obj| obj.send(*self) }; end; end =&gt; nil &gt;&gt; %w{john james johannes}.map(&amp;[:ljust, 10]) =&gt; ["john ", "james ", "johannes "] &gt;&gt; %w{john james johannes}.map(&amp;[:ljust, 10, "_"]) =&gt; ["john______", "james_____", "johannes__"] or &gt;&gt; class Array; def to_proc; Proc.new { |obj| self.inject(obj) { |memo, m| memo.send(m) } }; end; end =&gt; nil &gt;&gt; [" john ", "james ", " johannes"].map(&amp;[:strip, :capitalize]) =&gt; ["John", "James", "Johannes"] 
This feels like _why's [mixico](http://github.com/whymirror/mixico).
it's like mixico on crack ;) mixico just supports unextend (and a non-recursive version), Remix appears to let you completely mess with inheritance chains in any way you wish.
Superb article! I definitely didn't know about altering #respond_to? when altering #method_missing; now I do, and now I'll use them both in tandem.
Wow that's pretty nice. The documentation is not clear on how you would actually code up your view or controller though.
Do you say, inside RoR? For now, is programmed only as a module library.
So how would you use it in a rails app? While I have you. It seems to me that syntax if pretty similar to javascript and I am wondering what the advantage of doing all this rendering on the server is rather than the browser. 
I am not using slim but the biggest difference seems to be that haml requires '%' before an html tag, while slim assumes the line starts with an html tag and require a '|' for a line of text. This seems better to me- all the % signs end up as noise that you ignore.
So is apotomo cells now? Are these two different projects with apotomo built on top of cells? 
The syntax preserve the javascript syntax to allow fast translation of previous protovis scripts. I'm currently working on a new API, closer to ruby conventions. About doing work on the server, not everybody work on the web. I do a lot of paper reports of statistical data and the only library allows me to generate well defined charts is SVG::Graph. But now I need to create more complex graphs and protovis way to do things is perfect to me. SVG is just perfect to integrate on reports with good quality. For RoR, there are several libraries to integrate protovis. I like to create wrapper, to allows developer works online or offline, for pdf generation.
The article starts off "I’ve read a few articles lately (like this one)[http://rubylearning.com/blog/2010/10/07/do-you-know-rubys-chainsaw-method/], advocating the use for the method_missing method in Ruby." The post he references was by Paolo Perrotta the author of Metaprogramming Ruby, easily the best book on Ruby in the last few years. He wrote an article on RubyLearning.com for newbies that gave a couple of common uses of method_missing. He wasn't "advocating" its use in all situations, just giving some examples when one *might* want to use it. And tons of commenters (know-it-alls?) jumped on Perrotto's case giving x and y edge cases where method_missing sucks. I really doubt he'll volunteer to write any more free essays to help out Ruby beginners after that fiasco. 
Apotomo sits on top of Cells, cleanly separating concerns: Cells is rendering-only, Apotomo is interactive web components.
It would be beyond retarded if Apple rejected mac apps based on their internal details, with the exception of the undocumented api issue. On the other hand, just about every time I've downloaded an app that turns out to have been implemented with RealBASIC, it's gone in the trash instantly. It's a major drag. I'd be pissed if I paid for something on the Mac App store like that.
It's these "memory issues" that've plagued Imagemagick for its entire existence that calls into question what exactly is going on in there. RMagick, PerlMagick, and even the PHP wrapper suffers the same. The API is horrible beyond words. It's Lovecraftian in design. The documentation is simultaneously thorough and useless. The only way you can safely use ImageMagick now is by the command line where, after it's executed whatever rickety code that's required, it folds up shop and gives back all the resources it used. Embedding it in your application is like going on a long road-trip with a cocaine-crazed serial killer in the passenger seat. 
Your prejudice against an app because of the development tool that was used to created it makes no sense and reduces your credibility.
While I'm glad to see ruby news I think, the role of ruby/ror IDEs is by far filled. We have textmate, vi, nano, Apanta and more. This is prolly a good thing for m$ devs, but just don't shit up the code.
Haven't tried Capybara, but it looks like a good alternative to Webrat
Netbeans. Free, and better than Aptana, though the last time I tried Aptana was at least two years ago. 
 file = File.open('/Users/daniel/Development/newfile', 'w') *facepalm*
hahaha, quite rght
I haven't tried Aptana in years either, but Netbeans is quite sloggish, in that the longer you run the application the slower it becomes. (I only use Netbeans for PHP) Ruby-wise, RoR-wise, I think textmate is down-right unbeatable.
That's what commit comments are for. I left him one and I suggest you do the same. He could be a newbie and might need some help.
The new RubyMine betas are pretty fantastic. It's almost sold me on switching to a real IDE (and I use emacs!)
Great, but you should use jasmine/qunit/jspec or something to test your javascript. Use selenium or whatever to test things that you can't test with another (faster) tool.
I kind of feel bad for these guys. All that work and Ms abandons the ironruby project. 
Netbeans is no speed demon, but I don't find it too slow to use. (on a new MB Pro) I used to use Textmate but got fed up with little things (that maybe could be solved with some bundle, but I never could find 'the one') and switched to NB about two years ago.
You should probably use a different cipher mode; AES-ECB (what it's using) is a poor choice, since any blocks A and B that contain the same password parts will have the same ciphertext E(A) and E(B). (see http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29 ) Please read http://chargen.matasano.com/chargen/2009/7/22/if-youre-typing-the-letters-a-e-s-into-your-code-youre-doing.html before implementing more cryptography.
How would you make sure that all business rules are applied?
Thanks for the feedback. Now using the cbc version.
don't forget the emacs. /noöne expects the emacs, or the trema.
No need to feel bad. Ruby In Steel stopped developing for IronRuby about a year ago. Ruby In Steel 2 supports Ruby 1.8, 1.9 and JRuby. Ruby In Steel is targeted specifically at professional users (we tend to sell to quite big companies) and the plain fact of the matter is that they have never expressed much interest in IronRuby.
In that case I feel bad for the people working for those corporations whose bosses are forcing them to use windows to develop ruby apps.
Fortunately our customers do not seem to share that opinion! :-) In fact, it would surely be very sad for Ruby to lose the vast developer community of Windows. If you had used Ruby In Steel, I suspect that your opinion might be different.
This sounds too good to be true. What's the catch? Minimum-wage pay? Have to give up your first-born?
http://www.youtube.com/watch?v=SKo5rmJIASc
just wanted to congratulate you on the 4 day work week and 6 week vacation policy!
Yep, first born has to be sacraficed to us, and then we systematically allow you to grow in levels based on your gradual denial of your friends and fam-- haha, woops that Scientology. No we're just a hip office that knows what we're doing.
flattering..
Thank you! Its a hella good time.
&gt; What's the catch? ... &gt;We're in Cranford, New jersey I kid, I kid. Sounds like an awesome job opportunity.
&gt; in-house ... beautiful custom designed office Why the emphasis on the physical world? I ask because I work at home, doing mostly ruby, and it's rad. I would never give it up willingly. I'm trying to understand why it took me so long to realize how awesome it is, for both me personally, my family, and my product (seriously, it's so easy to trick me into working 17 hours days now that I don't have to go anywhere to do it). 
Why do I always get that? ;D
It's a Jersey thing...
If only I was south of the border...
This must be the boy's version. The girl's version will have sexy vampires.
Do you freelance? If not, is the company you work for hiring? ;) Been doing web dev for about 7 years now. Would love to be doing it with rails, but there's not much of it around here.
Are you interested in importing talent?
how's your sysadmin skillset? http://bandcamp.com/jobs
Yes. I'm one of the types that has grown tired of the office full of .NET politics. Arguments about being on the wrong project or about removing open source components because of the principle that Microsoft should be used across the stack. I'm moving into freelancing with, preferably, Ruby on Rails. I get to choose my own projects and choose the technologies that will work best, while embracing the Ruby and open source communities. And spend more time at home with my wife. (now accepting new clients and work offers :)
Benchmarks?
Gah too far away. I mean I'm not a mega rails guy but I'd get up to speed quick for that! Good luck in your search.
Good luck finding someone. As a CS major with 2 years of Ruby/Rails experience who is graduating in less than 2 semesters its encouraging to see jobs actually exist.
Intriguing! Going to send over my resume tomorrow.
&gt;In fact, it would surely be very sad for Ruby to lose the vast developer community of Windows. I don't think it would be that sad. &gt;If you had used Ruby In Steel, I suspect that your opinion might be different. That would mean I would have to use windows. No thanks.
Sorry, but no and no. It's crazy. FTE with a real company, and I work at home. It's mostly because I work in a newly acquired division (that used to be pure open source), and nobody could be bothered or see the point in buying us office space. So, here's how you do it, I guess: 1) Start and build a successful open source project. 2) Get acquired by some company that's headquartered far away. 3) Hire your friends on as full timers. * Protip: Be the friend to the guy who does #1 and just jump in at #3, much less work. 
We're going to need a lot more information. What are you working on exactly? Is it a Rails template?
Rails seems to be an odd coupling for your end goals. Have you looked at other solutions that help you move more to the front end?
 At least change the readme for fucks sake.
yeah, if I had the skillset I'd apply. Looks sweet.
Sorry, I didn't blurb so I can't edit... This is a proof of concept for a Rails design methodology. The github repo is a Rails project, but the end goal is a gem. It's in it's infancy, but works and demonstrates what I'm hoping to achieve. The goals are to allow a single code base to support javascript and non-javascript browsers (mostly webcrawlers) transparently, and to avoid writing javascript with embedded html. Rails developers can look at foo, bar, and baz in app/*. These illustrate how I want my controllers to look. Rails hackers can look at app/controllers/application_controller.rb, app/views/jsxy/jsxy.json.erb, and public/javascripts/application.js. This is where the 'magic' is, and is the behavior I'd like to move into a separate gem. The demo app is available running on http://jsxy.heroku.com/. Try it with javascript turned off, too!
It's a Rails app right now, but I'm going to split it into a gem (to support the features in my goals) and an example app in the future.
I'm hoping to improve the way I work with Rails in the future. Sorry, I'm sure I didn't make that clear at all. The github repo is a Rails app (demo, proof of concept), the end goal is a gem.
Changed.
Wrapping all of my method calls with "try" is not my idea of cleaner code. What do other languages do? I vaguely recall Eiffel addressing this issue.
I don't understand the reason for using the singleton lib in ruby. It's more painful then just using class methods. 
By "everything is an object" it is meant that the Object class (rb_cObject in C) is present in the ancestor chain of the class of every object. This is true of actual objects (RObjects), immediates, classes and modules (RClasses), and so on. By showing that there is a distinction in the source between `RObject`s and `RClass`es the author is merely showing that not all objects are CLASSES. Nothing to do with the question of whether 'everything is an object'
Unfortunately, no. We haven't started recording presentations yet. 
I was just trying to show that, while ruby presents Objects, Floats, Fixnums, Classes, and such all as normal objects in rubyland, there are significant differences under-the-hood. (ie. RClass, RString, et al don't use the same struct as generic objects). It was only a trivia point. I didn't mean it to be taken too seriously as meaning classes aren't objects or anything like that.
fair enough, but your next slide goes on to say 'everything with RBasic is an object'. But this is a sufficient but not necessary condition as there are objects (such as Fixnums and Symbols) that are immediate values and do not have an associated RBasic struct
Further your slide after that says that every instance of an RClass has a klasss pointer set to Class, but this isn't true. Modules for example use the RClass struct but the klass pointer points to Module, and classes themselves have a klass pointer that points to the singleton class of that class (singleton's for classes are created at class creation time and not lazily).
Good point, that didn't occur to me. I didn't even realize you can't define singleton methods on Fixnums or Symbols until I tried it just now. Neat.
Yeah, I'm not sure what I was thinking there. Thanks for the corrections.
You can bin every spam email / headhunter that way. Works great.
Ruby is a little different due to how it creates and works with classes. You are correct that it is possible to duplicate most, if not everything, that a singleton can do, but it does require using the classes differently. You have class methods and variables, not instance variables. The advantage of a singleton pattern is that you can instantiate and use the class like any other class, such as instance variables and methods, yet still have only one copy. So, you can expect meta-programming (attribute accessors, etc) that would work on a normal typical class will work on the singleton.
What ever happened to _why? Any sightings in the wild?
He is well, but wishes to be left in peace. (or so I hear)
Thanks for posting this. When I first started hacking away at the Hackety source, I was referring to it as "software archeology." _why's personal coding style, his distaste for comments, and his advanced Ruby knowledge made fixing bugs a real treat. (I say this non-sarcastically: I love puzzles.) I don't have a citation, but I remember seeing something where he said he never learned as much about Ruby internals as he did when creating Shoes. I feel the same way... doing more than just building Rails apps has made me learn more about Ruby than I would have otherwise, and I'm becoming increasingly appreciative of it.
Miss ya, _why!
I saw this on your blog and hacker news, and figured that you weren't going to post here. This is good stuff, and I'm a little jealous of what else you'll find that _why squirreled away in there!
Thanks. Yeah, I think it's a decent filter not to post my own stuff; I don't unless I feel really strongly about it. I figure if it's worthwhile, someone else will post it. :) You don't have to be jealous; it's all up there on GitHub ;)
ahh.. makes sense.. i've not ever needed the "full singleton experience" so my pain points were different.
Still no named parameters. Sad. Python wins here.
I'd rather not have named parameters, and have the options hash. Maximum flexibility.
Ah man. This would be a sick job but its prolly out of my experience range.
I'd encourage you to apply anyway. This isn't a super senior position.
[YARD](http://yardoc.org) supports option hash documentation, and I don't see why a IDE couldn't use the yard metadata as a source for completion.
thats great, if you hate yourself and use an IDE...
*shrug Not a big deal. You still get optional parameters, i.e. `def foo(bar = nil, baz = 1, *qux)` I do kind of wish for method overloading, though.
Honestly, freelance is the only way to go
overloading on type or arity? If your answer is 'type' then have a little think about what else that may imply
I'd also appreciate more language support for named params. Pretty much the only thing I do regularly in Ruby that feels like boilerplate is: options = {:some =&gt; :default}.merge(options) But that idiom is the norm, so I do it as to not be too surprising. Language support for named params that decay into a Hash from the perspective of the callee, regardless of the order or defaults given by the caller would be nice. Python's argument processing is actually pretty complicated (especially before [tuple-unpacking was deprecated](http://www.python.org/dev/peps/pep-3113/)), but back when I was using it more often, it seemed to have all the bases covered.
How soon would one need to start (and/or move to Portland)?
You wouldn't wrap *all* your method calls this way - only the ones where the receiver might legitimately be nil. Instead of name = person ? person.name : nil or name = person &amp;&amp; person.name you would do name = person.try(:name) Like so much of Rails, it's for convenience and readability.
There's the preamble to the GPL, which describes (some of) the spirit of the license. If you honestly attempt to follow the spirit of the GPL then you're at least 99% of the way there. GPL licensors are almost always very forgiving, assuming good faith, and, should you make a mistake, they'll make efforts to resolve it with you directly without resorting to litigation. There's also the [GPL FAQ](http://www.gnu.org/licenses/gpl-faq.html) if you had a specific concern. And note that the GPL doesn't distinguish between commercial and non-commercial distribution, so the fact that it's commercial doesn't really make a difference. Edit: [I think this answers your specific question](http://www.gnu.org/licenses/gpl-faq.html#IfInterpreterIsGPL).
Also: http://img.skitch.com/20101105-c3y6kwq3hy6ny8p2ghhf4afe1p.jpg
And for the actual Ruby version, https://github.com/krainboltgreene/learn-you-an-ruby-for-awesome-power
We're very flexible. I think ideally before the end of the year? But nobody's going to hold a gun to your head.
All that AND a fucking EngineYard programmer?!?! Wow!
Wow. More code, less drama plz. Aside: I know everyone is all anti-copyright, but understanding a little copyright law can go a long way.
So, from the GPL FAQ it looks like using a GPL'd gem would necessitate releasing the entire program under the GPL? Does anyone else find all of this stuff super vague? I don't feel like I'm that much of an idiot, but between the GPL and the Ruby license, I can't make heads or tails of what you're truly allowed to do. I don't mind releasing source (pretty much a fact of life with interpreted programs, but even a compiled extension feels ok to me), but the ability for some dude to take my code and sell it or give it away is... unsavory to say the least. Incidentally, I didn't see any posts about the recent change of Ruby license to BSD v2, which would seem like good news for my purposes. Anyone else hoping that'll drive adoption by commercial solutions?
IANAL. Most of the complication comes from copyright law, which has a lot of detail about what constitutes a derived work and what doesn't. Certain situations of linking object code are considered derived works and other situations aren't. It gets fuzzier when you're talking about interpreter languages and there isn't object code being linked. So, how I understand it, as long as you don't add additional libraries, you can use whatever functionality comes with the interpreter without invoking the interpreter's copyright (your code doesn't become a derived work). If that still worries you, there's this bit from the [Ruby license](http://www.ruby-lang.org/en/LICENSE.txt), &gt; The scripts and library files supplied as input to or produced as output from the software do not automatically fall under the copyright of the software, but belong to whomever generated them, and may be sold commercially, and may be aggregated with this software. If you add a GPLed gem to your program, your program is now derived from that gem and must follow its licensing rules. 
eliza? Eliza is just a simple syntax analyzer as i recall. That's not really... nlp as we know it in modern day. If you wanna see some basic NLP [here's a good one](http://norvig.com/spell-correct.html), there's a ruby version of Norvig's spelling corrector down at the bottom.
Thanks, checkin it out, i have done an xmpp bot, tryin to make it more smarter (:
Oh well, that's a different matter. Bots which interact with humans are complicated subjects. The thing that's actually most important IMO is being able to do things like discourse analysis, where your bot tries to form some idea of what the conversation is about. This is why domain specific applications is where speech recognition and other sorts of bots developed. When you already know the general frame of what the conversation is about (say booking an airline ticket) there's a lot less stuff to consider.
The essence of Eliza is to match patterns like this: (x) my mother (y) and then print a random element from a set of responses: Who else in your family (y)? Tell me more about your family. So I'd start by putting together a small language like: match "(x) my mother (y)" =&gt; [ "Who else in your family (y)?", "Tell me more about your family." ] which adds a pattern and list of possible responses. Write some code that matches text input against a pattern. Then find a way to capture the (x) and (y) variables. Finally, pick a random response and substitute in the text. There's a pretty good list of rules here: http://www.dave-reed.com/csc550.F04/Code/eliza.scm Enjoy!
Yes that is very interesting, the bot must recall old conversations and must respond differently for each person based on the previous chat, wow imagining it /me getting goose bumps (:
Your not concerned that your controllers know to much about your models inner workings?
Seems like a long chain! :) Markov 
Tried to use the eliza web api, but its responses are too slow for a bot! def eliza(str) response = Net::HTTP.post_form(URI.parse("http://www-ai.ijs.si/eliza-cgi-bin/eliza_script"),{'Entry1'=&gt;str}) return response.body.split("&lt;/strong&gt;\n").last.split("\n").first end
Context: &gt; Insulting my "class" for attempting to contribute to your work is a move much more lacking in class than what I did. Have some class and see that someone who wanted to expand your work to make it available to more people was not a common thief. I'm a fucking Engine Yard programmer for fuck sake. **We promote mongrel as a stable deployment stack and I appreciate all the work you contributed to our community.** If I wanted to copy your work, I don't think a public github project that I announced to the world, and that has your name all over it, is the best way to do it. Writing my own book was not my intention, I do not claim ownership of this work, and contributing back to you was the whole point.
Your controller at some point has to take incoming data, and request info from the model. I suppose you could do another layer of indirection, and call a single model method with all your incoming param data. Person.filtered_by_params(:age_between =&gt; [params[:lower], params[:upper]]) But that doesn't really simplify anything, it just shifts the code. The specific items you're filtering on are controller specific, and it does make sense for the controller to request the data it's interested in. By using the named scope, you allow yourself to redefine what it means to be Person.is_active, or whatever you're filtering on, in the model, and the controller continues asking for the same thing. 
If you want to do real NLP in ruby, you must first do real NLP. That is, study some CS and give it your best shot. Then study why it doesn't work. Then give it a better shot.
I dunno how feasible it is but you could run the box all the GPL stuff into a separate process. Shouldn't be too tricky considering the dynamic nature of ruby. 
&gt; ActiveSupport::Deprecation.warn("Base.named_scope has been deprecated, please use Base.scope instead", caller) http://api.rubyonrails.org/classes/ActiveRecord/NamedScope/ClassMethods.html Might as well switch now.
Remember, the GPL says that *if* you distribute your product, you must provide the source *along with it*. It says nothing about distributing the source to *everyone*. So sell your product, include source, everything is fine. 99% of people on earth will not care that there was source included. The last 1% will care, but not try to screw with you. None of your customers are going to turn around, rebuild and repackage and resell your product. I guess what I'm saying is, if you're worried about the GPL, you're engaged in premature optimization. It's like making a car that is based on standard parts - you make it easier to repair, and (with the possible exception of chinese knockoffs) nobody's going to set up a 'Chery' plant in their back yard to try to skim a buck. Plus, having a popular enough product that people try to knock it off is basically one of those 'nice problem to have' situations.
&gt; it looks like using a GPL'd gem would necessitate releasing the entire program under the GPL? … the ability for some dude to take my code and sell it or give it away is... unsavory to say the least. So, you want to use someone's GPL'd code in your code, and sell it or give it away, and that's okay, but you don't then want to license your code as GPL so that others can do the same with your code, right? Okay. I see. In that case, your only options are to 1) not use the GPL code in your code, or 2) get the copyright holders of the GPL code to grant you a different license for their code so that you can then include it in your code without having to license your code as GPL.
First of all, I'm a Ruby programmer myself and I love Ruby. However, I should say that overall, Python has much more mature packages and modules for NLP. There's a whole O'Reilly book that focuses heavily on NLP in Python if I remember right. Its not that Ruby can't do it, but that Python does it well, and the modules are already made so you don't have to reinvent the wheel. Just a thought. If you are a good CS person and know Ruby, then Python will take you all of a week to pick up reasonably well to do some NLP. 
I asked this question a while back on Stack Overflow. Maybe it'll be of some help. [link](http://stackoverflow.com/questions/999410/natural-language-processing-in-ruby)
You ANAL ? wtf?
[IANAL](http://en.wikipedia.org/wiki/IANAL).
My girlfriend said the same thing last night.
Why so much hate?
A while back I wrote [Raingrams](http://github.com/postmodern/raingrams) for doing ngram text-processing in Ruby. It has aged a bit and could use a little polishing, but it still gets the job done.
Repost. Have a downvote.
The options hash basically *IS* named paramaters, YARD supports generating documentation for them and there's even syntax support built into the language for them. You can do &gt; foo({:a =&gt; 1, :b =&gt; 2}) or &gt; foo(:a =&gt; 1, :b =&gt; 2) or if you're using Ruby 1.9 &gt; foo(a: 1, b: 2)
I had came across this, before i posted self.ruby (:
Checking it out thanks (:
Yes i have to! I have done few finite automate and stuff.
I'm conversant with python, but the issue is i have done an xmpp bot already with ruby, so i don want to rewrite it with py. But rather try to make it better (:
Stay as far away from GPL code as you can. Seriously, if you want a reason look at the mess one person created with VLC on the iPad. Once you have GPL'ed code in your product you no longer have full control over that product. I'm not against open source, but I do believe the latest version of the GPL is really really bad. As you note interpeted code is often open source by default but that doesN't mean Ruby will be such forever. I'd take time to carefully consider which license you intend to use. However you really seem to be worried about others using your code. If that is the case why bother with an interpeted programming language at all? C/C++ is certainly slower to develope for (or so some seem to think) but your source is more secure. C++ plus Boost isn't really all that difficult to use for some classes of problems. The other obvios option is to look around for an interpeted language and library that solves your problem and isn't GPL'ed at all. There are actually many to choose from, so maybe the right combo is out there. Anyways what exactly are you looking to do? 
Do a simple markov chain to taks words from a large amount of text, and echo it to chat. It's very simple to use and can bring some amazing phrases. 
Fair point. I guess I just see it as wanting to use a language to create a solution. My preferred language has a history within FOSS, and I've always seen that as a benefit, but when looking to create something to feed my family it's a bit depressing that the language that I'd like to use is hamstrung by licensing.... I guess I see the language separately from the solution, which is probably an incorrect perspective, but I would never take someone's GPL'd app and resell it, whereas apparently I view language components differently. :/ No idea why. 
Trying to implement http://www.dave-reed.com/csc550.F04/Code/eliza.scm
then you can try for turing test :D 
Wow, New Relic, holy crap. If there is one service I use on every project, it is New Relic (Speaking of which, must get my new dev app setup on New Relic).
Cool, I'm always haunting #newrelic on freenode, feel free to drop by. I'm the Ruby agent engineer.
Anyone in the ruby community for a descent length of time knows not to expect anything from Zed Shaw other than complete douchebaggery.
As skeeto pointed out above, the GPL FAQ explains that you can use a GPL'd interpreter in your creation of a non-GPL'd application: http://www.gnu.org/licenses/gpl-faq.html#IfInterpreterIsGPL But, you can't use a GPL'd **gem** as part of your application, and then not also license your application under the GPL. I personally consider that to be the best part about GPL — it's a viral FOSS license.
I go by BrianB04 there. Didn't even know New Relic had a IRC channel on Freenode.
Handy as shit.
I run a free online training program, Ruby Mendicant University, in which I spend several days each week talking with intermediate developers while they work through the course exercises. There are surprising amount of folks who run into similar problems, so I decided to start this newsletter to help others explore these topics and learn about them so that they can be more well-rounded developers. I am hoping that my unique opportunity to spend a lot of time with intermediate coders helps me understand their problems so that I can help solve them for a more general audience. I have mostly quit my consulting work to focus entirely on RMU, so any proceeds from this newsletter will help offset my costs.
I'd love to see some practical uses, pretty awesome though
There goes the neighboorhood
Thanks for all your hard work, hope things work out well.
I think many people's first exposure to ruby is through _why's poignant guide to ruby. You can find it here: http://mislav.uniqpath.com/poignant-guide/ Upon completing it you'll be familiar with all the basics of the language, control structures, variable scopes, basic data structures, and a short intro to metaprogramming. Certainly won't give you mastery of the language or its idioms but its a good place to start. You'll be able to write nontrivial scripts after finishing it.
If you are new to programming: http://www.pragprog.com/titles/ltp2/learn-to-program If not: http://www.pragprog.com/titles/ruby/programming-ruby 
Or if you want your mind blown, free of charge: http://mislav.uniqpath.com/poignant-guide/ 
...I have no idea what I'm looking at here. Why is there a cartoon about Ruby?
Its a book, with cartoons, random stuff, etc thrown in. Very weird, but a very famous book in the Ruby community. I promise you it does start teaching ruby after a page or so.
If you're looking for a straight reference book on Ruby and you know how to program, I find that "The Ruby Programming Language" is better than the pickaxe, but it all comes down to personal preference. Both are excellent books. http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177/ref=sr_1_1?ie=UTF8&amp;qid=1289253722&amp;sr=8-1
Load that puppy up with [Envjs](http://www.envjs.com/). Boom. Headless front-end specs (with some limitations, of course).
Alright, I'll stick with it. Thanks for the resource!
I found Everyday Scripting with Ruby to be great, especially if you prefer to learn by doing. http://pragprog.com/titles/bmsft/everyday-scripting-with-ruby
I'm using it in production as a frontend programming language for our hosted CMS solution. It is sandboxed, and you get full programming environment that can interact with ruby backend. It works ok so far.
_why's poignant guide never did anything for me. [This](http://pine.fm/LearnToProgram/?Chapter=00) helped me the most. I went through the website and then purchased the book. After that, I did purchase the pickaxe, but I find the api documents have helped more than anything else beyond Chris Pine's book. If you want to do Rails programming, be sure to check out Michael Hartl's [Rails Tutorial](http://railstutorial.org/book). I think Michael Hartl's Rails Tutorial is also the only other thing that has significantly improved my non-Rails Ruby programming too (particularly in getting comfortable with rspec and using git)
My first introduction was [Mr. Neighborly's Humble Little Ruby Book](http://www.humblelittlerubybook.com/). After that I gained most of my knowledge of Ruby through learning Rails, with a lot of help from [Railscasts](http://railscasts.com/). I also recommend books by [The Pragmatic Programmers](http://www.pragprog.com).
[The Well-Grounded Rubyist](http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1933988657) or [Ruby Koans](http://rubykoans.com/).
I concur with the humble little ruby book. 
I cannot recommend Ruby Koans enough. Going through it is not just beneficial for new developers but also intermediate developers wanting to refresh their Ruby foo will find it handy.
I was already a programmer, so I bought the 2nd one. It was so good I bought the next version when it came out. The first is the one I recommend to people who come to me asking how to learn programming. If OP is into web development, agile web development with rails is another great book from the same publisher.
http://pine.fm/LearnToProgram/
Start by installing rvm http://rvm.beginrescueend.com/rvm/install/ Read the basics on rvm http://rvm.beginrescueend.com/rvm/basics/ Find an editor you're comfortable with, like vim, textmate or e-text editor. Be aware of irb for simple testing in which you don't want to bother creating a .rb file. Read links to sources listed here, /r/ruby, and hacker news.
Why is rvm recommended to people trying to learn programming for the first time? If you're just going to play around with ruby, you might as well just install ruby and install rvm once you actually find yourself needing it's functionality. It's entirely possible someone gets stuck in rvm and doesn't bother to learn ruby because of a bad experience with rvm (not likely, but possible).
There are plenty of us, however, who find why's book extremely tiresome and annoying. It is neat in that it's unique, but don't be afraid to toss it aside if you just find it grating and start hearing yourself say, "shut up and move on already!". "The Ruby Programming Language" and the pickaxe book are two fantastic resources.
Learn To Program is also available for free online over [here](http://pine.fm/LearnToProgram/).
Try that: https://github.com/krainboltgreene/learn-you-the-ruby-for-awesome-power
buy this book: http://www.amazon.com/Learn-Program-Second-Facets-Ruby/dp/1934356360/ref=dp_ob_title_bk
Yeah if you are new to programming whys book isn't any help. My advice as someone who's been learning ruby is to go on github and find a gem for some service you are interested in, and then experiment with getting it to do things you want. In my case it was the google analytics API, but pretty much anything with an API will have a gem on github. This gives you a foundation of functionality, a purpose for your tinkering, and you can look through the code of the gem as you learn to get an idea of how rubyists tend to do things. Go off on your own tangent for a week, then read through some code on github and you'll notice all the painful unnecessary things you did. Fix. Rinse. Repeat. Actually I think I might be at the stage where whys book would interest me now, and I'd forgotten all about it... Your no 1 resource over time will be the actual ruby documentation - every time you wonder how to do something, you should search it as well as consulting a book or whatever. Edit - actually rereading whys guide right now and the first chapters are a great introduction to syntax etc. The rest still applies though I think. 
Too bad I can't subscribe, because Amazon Payments does not allow te set up my country correctly as I'm not an U.S. citizen (or have an address in that country...) :-(
&gt; *Welcome, Hacker News folks.* wtf? also stop messing with my javascript, that's the reason I use NoScript at home (and I'm about to install it here as well).
That's an outdated version though. It was written for ruby 1.8.4.
Hey man, I saw you the other day, but I was crazy busy, sorry. Glad to talk, any time.
Creating derivative works of Zed Shaw's work is a right only Zed Shaw can give. Some "fucking Engine Yard programmer for fucks sake" thinks that everything on the internet works like Creative Commons. 
Still waiting for Ruby and C : Part 2 /w
Note that you don’t necessarily need to be very different with class methods (i.e., you don’t need to do `def self.method`) and you definitely don’t need class variables: class Foo class &lt;&lt; self attr_accessor :bar def baz puts @bar end end end Foo.bar #=&gt; nil Foo.bar = :qux Foo.bar #=&gt; :qux Foo.baz # prints 'qux' 
Are you trying to pay by credit or bank account? I've heard that credit works. Also, we're getting plenty of international subscribers, so I'm unsure what the issue is that's affecting some people. I will try to figure this out.
I am more active on Hacker News than I am on Reddit, so I posted a message asking HN to help me get this upvoted because I really want to have this newsletter help support my work on RMU. As for javascript, what problems are you having? I know we use disqus for comments, but many blogs do. Does it not degrade gracefully? Feel free to submit a patch to fix the problem you're having at: https://github.com/sandal/rbp-blog
it removed the frame of the reddit toolbar (I hate sites doing that, specially the ones that try to blame it on you (stackoverflow... ¬¬)) anyways, it would be a nice touch to check the referrer and give an appropiate greeting :) imagine yourself getting into a party and being welcomed as if you were someone else D:
Oh, the frame busting code I inserted intentionally because about.com was glomming advertisements over our content and it was pissing me off. I could have probably done a blacklist thing, but see below... I understand about the HN thing, and I actually was waiting to see if anyone would say something about it here on Reddit. :) But my javascript skills are terrible, and the site is static generated so I didn't really have the opportunity to do the referrer hack.
Awesome. Just ordered myself a copy.
Mother fuck, I just bought this book from amazon for 34 yesterday and it was just delivered today. damn it.
One for everyone in the office, thank you Duke!
Is this book worth getting for someone who has a cursory understanding of Ruby?
Just return it?
This book is the place to turn to when you find the documentation lacking in a particular area; in some cases this book is the documentation. I don't know how well it would function as a tutorial read from beginning to end, but I find that it's a great reference.