I like the suggestion. Additional type safety is definitely something I'm a fan of, and this seems like an easy enough feature to implement in the initializer. You should fork the project on github, implement the change, and I'd be more than happy to pull it into my branch. If that's too much work I'll probably get around to adding it myself at some point. Again, thanks for the good suggestion!
A YARD plugin is a good idea. I'd love it if someone would be willing to add one to the github project. If not I'll try to get around to implementing one myself at some point.
 irb(main):009:0&gt; URI.parse("http://www.example.com").host.split('.', 2)[1] =&gt; "example.com" irb(main):010:0&gt; URI.parse("http://www.bbc.co.uk").host.split('.', 2)[1] =&gt; "bbc.co.uk" It works if you limit the # of elements returned by split to 2. It doesn't do subdomains like x.y.domain.com. The correct way in all cases is to use what malcontent says and use the public suffix service. 
URI.parse("http://www.bbc.co.uk/").host.split('.')[1..-1].join(".") I think this is what you want. The only case this wont work for is a host without www. Something like this might be less of a hack. URI.parse("http://bbc.co.uk/").host.split(".").reject{|sub| sub =~ /www/}.join(".")
It's quicker to understand if you know exactly what "enum" does, that's my point - if you don't you either guess or have to figure it out. For the person writing the code that's not a big deal, but whenever others may read your code, it's not obvious that little helpers like this are worth it unless they're used quite a bit in a single project. 
This is a good gem. Thanks for sharing. It looks like it would do everything I need. I'm wondering if it will display subdomains that aren't www. I'll have to test it out.
Cool, thanks for clearing that up for me! Sometimes I get so wrapped up in just getting details accomplished that I forget to pause and understand how it works.
Yes it will. It's very smart with subdomains.
That's a good point - there's definitely spin up associated with new collaborators understanding the helper, but that's true of any helper method you write, not just this one. In the case of a small project, I probably wouldn't use this due to the overhead associated. In a large code base I'd be inclined to do so though, since there will probably be a number of places where it will prove useful, and the overhead of new contributers learning this method will be marginalized and distributed across the savings from being able to leverage it in a number of places and the "DRY-ing" up of the code. Basically, I'd use the same judgement with this as I would with any other helper method - if it's going to be used in a number of places, go for it, otherwise, avoid it.
The only problem with this is it wouldn't provide the right results if the host was something like 'example.com'. Using split('www.') would work, except that it would give me an array if the host was www.example.com and a string if it was example.com so I'd have to use a conditional. Looks like I'm gonna have to do that anyway. I just figured there was a more efficient way. Edit: sub() works well, however. `domain = URI.parse(url).host.sub(/\Awww\./, '')`
GUIs, or raw graphics? Ruby certainly holds its own with GUIs, since it's got bindings for everything, + Shoes. I havent used the Ruby opengl bindings, so I can't really comment on that.
Oh yeah, it has a base for a lot of libraries like qt and gtk, but that's just about it. When you look at the additional support Python gets for graphical library bindings, it's about 3 to 1. And shoes seems kinda limited.
Could you point me to some of these? I'm curious. And Shoes is sorta limited, but not really. Its stability is more of a problem than its power... (I'm maintaining Shoes these days, so I'm slightly biased)
I've used Shoes before to write a simple webserver manager for others on my team to use. It was quite simple and fast, I just don't think it's ready for common desktop GUIs like music players and the like. Toolkits like QT and GTK+ try to provide bindings for as many languages as possible, but the many extensions and extras that developers write like pyWebkit and much more extensive libraries for calculations (math, science, graphics, etc) seems to secure Pythons spot in the GUI. But btw, as a Ruby developer, thanks for maintaining Shoes. Ruby does need decent graphical support, if not from GTK and the like.
&gt; and much more extensive libraries for calculations (math, science, graphics, etc) seems to secure Pythons spot in the GUI. Okay, so it's not the GUIs itself, it's the other libraries that seem to make you think this? &gt; thanks for maintaining Shoes. You're quite welcome. :) &gt; I just don't think it's ready for common desktop GUIs like music players and the like. What specifically about it gives you this reaction? My intentions for Shoes are to make it the default way that Rubyists make GUI apps, so I'm interested. I know it's got a long way to go...
Oops, sorry, that wasn't my point. Python seems to just have more extensive library support when it comes to GUIs. You have the base libraries, you have sound management libraries on top of that, addon libraries like pyWebkit on top of that, you got graphical calculation libraries on top of that, much better opengl support, etc. And Shoes already is the default way Rubyists make GUI apps. Most other Ruby developers I talk to have it as their goto for graphics. :P
Gotcha. okay. :) Well then I've already succeeded!
Thank you! It's saved me countless times from having to explain the commandline to people who call Linux "the penguin thing" and instead simply whipping up a quick GUI.
Why would you want to test sphynx? Only test what you wrote. That means don't test your libraries, don't test rails itself, don't test external tools. 
because I need to test that the search page itself works. The challenge I was having was when I create a new active record object, I wanted to find a way to re run sphinx indexing. 
I wouldn't use URI, it won't parse some URIs (I can't remember which but since I moved to addressable a couple of years ago I haven't had any problems). The Addressable gem is way better and much more standards compliant. It's API is fairly similar to URI: require 'addressable/uri' uri = Addressable::URI.parse("http://www.ruby-lang.org/") puts uri.host
I'm going to use this for projects at work. For maybe obscure user errors.
derp herpherpherpherp herpderp derp . herpherp herpherpherp . herpderp . derpderpherp herpderpherp herp herpderp derp . herpherp derpherpherp herp herpderp
A bunch of dead "enum" projects litter the shores of rubyforge already. Good thing "you" added them. We're all saved!
&gt; For this method, you want to put the herp before the derp. That way, when you derp, the error message will be more herpful. Thanks herp!
And for future reference you want to post stuff like this on http://stackoverflow.com 
It truly pains my soul I didn't roll this project first. First to augment derp with a herp gem to expand the Morse base to full ascii for meta-derpness wins the innerwebs.
Every third instance or so could have the ~erpity suffix
Doesn't round trip. Useful for showing basic tests/library structure. Question are tests like: &gt; def test_to_derp_exists assert_respond_to @derp, :to_derp end &gt; def test_to_derp_returns_string assert_instance_of String, @derp.to_derp end common for ruby code?
only in ruby...
Well, yes, you're going to have to do all kinds of special-casing based on the TLD. I was just suggesting how to extract the components. The problem as stated was quite vague anyway--what is "the domain" in this context?
Checking respond_to is somewhat common, especially if you're TDDing and the best plan you've got is the interface to the object, but few specifics about how it will eventually behave. I normally end up killing off respond_to tests, as they will end up covered by all the other tests that hit the method to test for meaningful behaviour. I find instance_of tests far less useful and doubt I've ever let one survive very long in a code base. But hey, test what you think is important and gives you a feeling of security when you're making changes later, I guess. I'd probably just end up writing something like: def test_derpitude assert_equal "derpderpherp", "uhh".to_derp end Which covers both + conversion behavior.
You can configure that (among other things) via an /etc/gemrc file (globally) or $HOME/.gemrc file (locally).
The lack of C-style return codes in Ruby has bugged me for a while now. I finally got around to implementing them: OK = 0xA4F5D CANCEL = 0xA4F5E ABORT = 0xA4F5F def foo return OK end def bar return CANCEL end def baz return ABORT end case foo() # parens here to make the function call explicit! when OK puts "Great! Thanks!" when CANCEL puts "Canceling now..." when ABORT puts "Closing now..." else raise "UNKNOWN RETURN CODE!" end
I cannot wait for this change.
You sure can, but the point of the patch is to make it the default, since an overwhelming number of developers already have that in their gemrc. 
&gt; Doesn't round trip. Someone submitted a patch, upgrade that shit! &gt; Useful for showing basic tests/library structure. This was the initial reason I created it... I wanted to try out minitest, and gem-testers. &gt; are tests like... I was TDDing, and like I said, I really was just trying out the test infrastructure. And since the tests run in something like 0.0007 seconds, I didn't bother deleting them.
derpderp herpderp derpherpderpderp derpherpherpherp herp . derp herpherpherpherp herpderp derp . herpherpherp herpherpherpherp derpderpderp herpherpderp herpderpherpherp derpherpherp . derpherpherpherp herp . derp herpherpherpherp herp . herpderpherp herpderp derpherpderpherp derpherpderp . derpderp herpherp derpherpherp derpherpherp herpderpherpherp herp herpderpderp herpderp herpderpherp herp . herpherpherpderp herp herpderpherp herpherpherp herpherp derpderpderp derpherp . derpherpherp herp herpderpherp herpderpderpherp herpherp herpherpderpherp derpherpderpderp . herpderp herpderpherpherp herpderpherpherp . herpherpderpherp herpderpherpherp herpderp herpherpherp herpherpherpherp . herpherpherpderp herpderp herpderpherp herpherpherp . herpherp derpherp . derpherpherp herp herpherpherpderp herp herpderpherpherp derpderpderp herpderpderpherp derpderp herp derpherp derp . derpderp derpderpderp derpherpherp herp
That'd be hard to add to String#from_derp, but if you submitted a pull request for this, I'd pull it in.
Because if it was PHP, you'd have to implement it as `str_to_derp($string)`, with its corrolary, `derpFromString($string)`.
*if... IF!!!* \*shakes fist\*
wow. Wtf is this shit.
Nokogiri is a much better alternative than REXML for xml processing.
agreed, and their tutorials are pretty good as well. http://nokogiri.org/tutorials
Everything about this looks amazing. I hope it's only $5.
Been using Nokogiri for about a year now. Much better solution.
I like how the first talk is about Security. About time.
I can't even remember the last time I busted out rexml.
Co.uk is not a TLD, .uk is the TLD. Parsing this very common second level domain will require some special cases. It's not possible to infer the correct domain name from just the string alone. Though you could look into doing some DNS queries if you really want to get this right.
Just what I've always needed.
Just rinse the full string with a regex sub on /ity/
Yup yup yup yup
Once you have the hostname, how about this? **gem install net-dns** first. def domain(hostname) domain = '' for p in hostname.split('.').reverse domain = p + (domain.empty? ? '' : ".#{domain}") break unless Resolver(domain).answer.empty? end return domain end 
One of those gems which opens up so much to you... After I worked that out would constantly see use cases all over the place. 
padrino is really great...when I used rails I missed the simplicity of sinatra, when I used sinatra I missed the "easy way" (generators, helpers, etc) of rail...with padrino I don't miss any other framework and it scale so well than It has become in our first election...maybe only miss plugins like device but we are writting a option similar for padrino
Glad to hear you are enjoying the framework. We built it out of our own desires to be able to use Sinatra's functionality and foundation for any application without hitting the frustrating walls when the need for certain requirements popped up.
Any reason not to use `open-uri` instead of directly calling `Net::HTTP`?
Any reason not to use `open-uri` instead of directly calling `Net::HTTP`?
I love Sinatra. I've never heard of padrino but this looks perfect! So psyched!!
Awesome, definitely let us know your thoughts about it. We are working towards a 1.0 release later this year.
didn't even think about it. Good call.
Just a silly library.
I just read through a the site a bit and watched the video you guys posted. It looks very much like the Sinatra based framework I have been imagining lately. very cool that you guys are doing this. I have recently started working with Sinatra to do an admin control panel for a small form factor plug computer but really like the option of having a more powerful framework without going full on Rails. I look forward to checking it out. Just out of curiosity do you know of anyone who has used Padrino with data visualization or graph generation tools? 
I picked an awesome time to learn Ruby. 
My company has been using Padrino for our main website for 4 - 5 months. It's definitely nice and easy to use. It seems to be quite light in resource-usage compared to Rails. I did have a couple grudges but I can't remember what they were. **Edit:** I'm not entirely sure but I think it was a bit tough to add admin pages to administer models with one-to-many or many-to-many associations. If this is indeed an issue, are there any planned ideas to address it? I may just be blind and misread the documentation; I apologize if that is the case.
Yeah I have used Padrino for an internal analytics tool that was used for graphing and visualizing statistics and data related to action tracking and cohort retention. Any specific questions?
Yeah I am familiar with that issue. We are working on improving the admin backend a lot as we move towards 1.0. There are still some quirks to work out especially as pertains to administering models with more complex relationships. This is an issue and we are working on addressing this problem. If you have any other specific feedback, consider creating an issue on https://github.com/padrino/padrino-framework/issues our issue tracker. By the by, what is your main website? I always enjoy seeing Padrino built sites out of sheer curiosity. 
I'm using Jruby, for one big reason - native threads. I'm writing an application that absolutely must max out all the cores of the system, and I haven't see any other ruby implementations that have native threads.
Oddly enough a lot of people I talk with tell me they used Padrino/Sinatra for their first web framework in Ruby. Generally seems to be a positive consensus that it is a bit easier to jump into and understand then Rails. Let me know if you try it out. I recommend the sinatra book: http://sinatra-book.gittr.com/. Remember that Padrino is just a super set of Sinatra so everything transfers.
I'm a fan of the Programming Ruby book, although I think the koans are a much better way of learning the language - [programming ruby](http://pragprog.com/titles/ruby3/programming-ruby-1-9) There's a pretty good list of projects using ruby on the ruby website at [ruby projects](http://www.ruby-lang.org/en/documentation/success-stories/) There's also a lot of places using rails [rails examples](http://rubyonrails.org/applications) edit: Fixed links
-1 For programming ruby (the pickaxe) - it's a huge, disorganized behemoth of a book that would confuse the hell out of a newbie. Instead he should look at [Learn to program by Chris Pine](http://pine.fm/LearnToProgram/) 
Wow, thanks for being incredibly helpful! When you say "koans" do you mean [this?](http://rubykoans.com/)
Yep
re: #2, https://github.com/languages/Ruby
Our main site is http://www.aelatis.com, we've got a few other sites running on Rails 2.x / 3.x. We'll likely use Padrino again in the future for projects that require an admin interface and/or a lighter framework. :)
Glad to hear it. Nice looking site by the way. Wish you the best of luck with your consulting.
How much lighter than rails is padrino (generally speaking, I know you can't really measure it). I mean is it faster? Does it take up less RAM? Also what about all those awesome rails plugins like devise, omniauth, acts\_as\_whatever etc. Would I have to roll my own? 
Ooh, this is a cool site in general! Thanks!
Interesting, I was looking at that one, in fact, cause it was cheap and seemed simple. Maybe once I've fully understood that one, move on to pickdp's suggestion? :)
Very cool. Seems like the [tryruby](http://tryruby.org/) thing but more indepth? Like a workbook in code?
Yeah Im a sinatra fan
check out Hackety Hack. Its a good way to learn Ruby. Read the pickaxe book if you can (Pragmatic) If its too difficult, Learning Ruby by Oreilly. Try to get 1.9 if you can. 1.8 is being slowly pushed out of the picture. Also Zombie Ruby is fun. Over all its not that hard. Others have done it. YOu can do it as well. It doesn't matter how slow you go, as long as you never stop. 
Thank you muchly for reminding me about Hackety Hack! I will download it as soon as I get home!
Quite a bit lighter. As you know benchmarks are fairly useless I will readily admit but we did them anyways. Disclaimer that benchmarks are not usually representative of much. We are very transparent about that and we included the source and all the measurement details. Basically we did three different benchmark tests: A simple app, a slightly more complex app and a 'full-stack' app to see how the various frameworks compared with each other in rps. You can see the results: https://github.com/DAddYE/web-frameworks-benchmark/tree/more_advanced "Advanced" App with routes, filters, logic, templates, sessions, etc (requests per second). Details can be found at the repo along with all the code. * Padrino =&gt; 731.75 rps * Merb =&gt; 480.03 rps * Rack =&gt; 253.23 rps * Rails =&gt; 207.85 rps * Ramaze =&gt; 177.13 rps * Camping =&gt; 155.96 rps If it helps I have built many projects in Rails and in Padrino and I would say on average the Padrino apps take about 10-25% less memory per process as an equivalent Rails app (some I converted and compared directly). It also is much faster in production where I easily saw a 10-20% increase in throughput purely on the transition to Sinatra/Padrino alone. Keep in mind that many plugins are rack middleware. Plugins like omniauth work out of the box (its just rack). All rack and sinatra plugins work directly. Devise is based on warden (rack based) and Padrino works great with that (check out padrino_warden). In most cases, any library for Rails has an equivalent in Rack, Sinatra or Padrino. Here is a page that deals with a few suggestions on this subject: https://github.com/padrino/padrino-framework/wiki/extensions Let me know if you have any other more specific questions. Thanks!
As an experienced Ruby developer I'd really recommend going with "Programming Ruby". It's _the_ Ruby book. I still use it on occasion. It explains basic concepts very well as well as provide a more in depth look at nitty gritty things (which you'll need later on). However you said you're not an experience programmer and the Pickaxe isn't really going to teach you programming: it teaches you the Ruby programming language. I know nothing about "Learn to program" but given that it's published by the same guys who wrote the Pickaxe it's probably a safe bet. If you got the money though, buy both =)
That's what I was thinking, that the pickaxe was super informative, but over my head. I'll try to check em both out. :)
For what it's worth, I just finished Chris Pine's book and it was much easier to follow than why's guide, which I really didn't enjoy. Now I'm moving on to Programming Ruby as well as the Koans. I know you want a physical copy, but you can also find Programming Ruby here for free: http://www.ruby-doc.org/docs/ProgrammingRuby/
Wow! Well, maybe I'll hold off on purchasing that 50 dollar tome just a little longer. :) Yeah, why's guide is...informative, but while I enjoy the absurdist humour, it was a little distracting and hard to follow. I guess I'm pretty set on Pine's book unless a major dissenting voice arises in the next few hours. Ha.
Have you looked at "Ruby programming language" ? I really liked it better then the Programming Ruby book.
Yes, it's like an interactive exercise book for learning test-first ruby programming concepts.
I can't recommend Learn to Program enough. I bought it for friends who were looking to learn programming. It teaches you programming concepts using ruby as the vehicle. When you get to where you're semi-comfortable with ruby, then buy pickaxe. If you're at all interested in web stuff, I'd almost recommend getting agile web development with rails first because it walks you through writing an entire non-trivial application from scratch.
Good Ruby smells like chunky bacon.
i don't have a specific question at the moment because i just discovered padrino in this thread. did you share the code from this project on github or anywhere? what graphing tools do you like for ruby?
I would strongly recommend [The Ruby Programming Language](http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177) over the pickaxe book at this stage. For a long time the pickaxe was *the* definitive book on Ruby so people tend to suggest it out of habit - but in the past year or so this book came out and in my opinion its substantially better. Check out the Amazon reviews if you have any doubts. Additionally, if you want a fun intro to programming that's short, informative and funny, you can't go wrong with [_why's poignant guide to ruby](http://mislav.uniqpath.com/poignant-guide/) (give it a few pages, but trust me, its awesome.
Agreed. The review may be overly simplistic in saying that the book is perfect, but honestly, this is the best Ruby book I've read. I'd recommend it for anyone in the Ruby world. Being a Ruby master is more about understanding the object model than about any one trick. Other books try to cover either specific libraries or the language as a whole, and neither approach will take you beyond an intermediate level of understanding. If you liked Dave Thomas' talk about the object model from Scotland on Rails 2009, you'll definitely like this book. It's much more in-depth and yet easy to follow.
The comparison is not very helpful. Rack should be the fastest one, as everything else builds on Rack. Padrino is caching the templates and the rack example parses 2 HAML files for each request. 
If learning Rails is one of the reasons you want to learn Ruby, I recommend http://ruby.railstutorial.org/ruby-on-rails-tutorial-book, Apress' Beginning Rails 3 book, and Pragmatic Programmers' Agile Dev in Rails book. (I'd work from the beginning in each until I felt like moving on, then I'd change books and restart from the beginning). Once you understand basic programming logic, you can get started learning Rails while simultaneously learning Ruby (which is what I did). You'd be surprised how far you can get in a programming project just by knowing basic concepts like if..then conditions, loops, and objects without really knowing much idiomatic Ruby. In fact, I'm pretty sure the only Ruby-specific construct I knew for months was that: students.each do |student| puts student end is the same thing as students.each do {|student| puts student} 
That's a terrible benchmark. See [my fork](https://github.com/judofyr/web-frameworks-benchmark/) for some better versions of Rack, Sinatra and Camping.
there are 3 books for me are essencials...first learning ruby from apress..is pretty nice..second a free book... http://www.sapphiresteel.com/ruby-programming/The-Book-Of-Ruby this book is really great...you learn across code examples..the 3 book is metaprogramming in ruby thougth is for advance programmers... 
Excellent! And please let me know if you have any issues with it, I'm the maintainer.
Don't forget the brand new http://sinatra-book-contrib.com/
It smells like starbucks.
Too much disk space? Give us all a fucking break. What is this, 1990? Your average apache log files will be much larger than all of your gem usage combined.
Did they release a new edition of that book? First edition is from 2008 and would not include any of the 1.9 specific stuff.
from the amazon page (and the book cover) &gt;The Ruby Programming Language is the authoritative guide to Ruby and provides comprehensive coverage of versions 1.8 and 1.9 of the language. Yes - it covers 1.9 in the first edition.
Turing test fail.
Yeah I know the benchmark is off which is why I prefaced with that. I like your fork, will merge in those changes soon. thanks.
Well, it wouldn't include 1.9.2 which is what I should have said in the first reply. There's some gotchas there :)
That looks awesome, thanks for the link.
Ah yes, that much is true :)
I like checking out the ruby toolbox (http://ruby-toolbox.com/categories/graphing.html) Some of them are rails only but usually some of the better ones are more generic. https://github.com/Bantik/seer looks promising for instance. Also the http://googlevisualr.heroku.com/ as well as https://github.com/delano/scruffy .
You are right. We are working on updating and re-running the benchmarks in a more accurate way. Never intended to present a misleading picture. Will post back here when we do.
Will do!
Any time. Pull requests very welcome, by the way.
What exactly does Torquebox do? Their own FAQ is rather vague.
I'm partial to "The Well Grounded Rubyist". As far as "real programs", just go to github. Ruby's #1 domain is the web, but I can vouch that there's plenty of Ruby in the "enterprise". I'd go so far as to say there's pretty much a Ruby equivalent for everything you can imagine. Ruby's main domain is the web these days, so while you won't see many things like a full blown client-side word processor, you may see one that's web-based. 
From the description it runs your rails app inside jboss which is all enterprisey. Seriously though it does seem nice but it's probably pretty heavy.
Another test http://rudygems.com/post/655531873/ree-still-faster-than-192
he is running these tests in development mode. this means it reloads the entire environment for each request. of course REE with a high powered GC will perform better in these tests. run it in production mode and throw more requests at it
Moving kinda fast on these releases, aren't we?
1.9.2-preview3 was a long time ago. How about 1.9.2-p136 or p180?
Untrusted certificate warning.
I think you missed my joke... I'm pretty sure gem tldr will destroy almost every gem it's been run on.
meh, it's a self signed certificate. This site is used by a lot of people, you know, the entire bitcoin community. See the bitcoin subreddit.
Does thinking sphinx not auto_index like sunspot?
In addition padrino also provides a plugin/template functionality that generates a few of these libraries for you(and also makes it simple to create your own too). You can check out a list of them here: https://github.com/padrino/padrino-recipes
I've done test with simple sinatra application and sequel: https://gist.github.com/851464 By results 1.9.2 is faster than REE without tuning GC, but tuned REE faster by 5-12% on page with some fetched records.
215 readers on the subreddit. I'd never heard of it before.
Well I'm not surprised. But keep an ear out, this bitcoin thing is either going to be really really big or turn out to be nothing. Either way it's fun for me.
Anything's better than PayPal..
It seems like you are asking for somebody to do a very messy job (cleaning up other people's code) for no money. From the sound of it the work is going to take two months or more. How many people can afford to work solid for that long for no "actual" money?
You would have to exchange the BitCoins for actual goods/services/money in return. There are apparently sites that can transfer BitCoins to/from your Credit Card. At least, BitCoin is backed by cryptography (unlike the now defunct eGold). I'm surprised they use Ruby 1.9.2 and [DataMapper](http://datamapper.org/).
&gt;You would have to exchange the BitCoins for actual goods/services/money in return. That's great but I doubt you local grocery store or you mortgage company is going to take it. My point is that there is a pretty long and very messy job to do and they are asking people to basically do it for nothing. I don't see anybody who is not independently wealthy or gainfully employed taking this job on. If they are gainfully employed they obviously can't put in full time on the project so it's bound to take much longer. It's basically volunteer work. Nothing wrong with that. That's what open source is all about but call it what it is. &gt;I'm surprised they use Ruby 1.9.2 and DataMapper. Mildly surprising but nothing to criticize in their choices.
It's just an intersting milestone. This would be the first, bitcoin paid job (no it's not working for nothing, bitcoins have an exchange rate, averaged over $0.90 for the last couple of weeks), and it happens to be ruby work. Without straight up buying bitcoins for cash on one of the exchanges you're only other option to get them is to trade goods or services. For someone who knows a little ruby, has some time available, and wants bitcoins it's a good offer. Actually right now it's the only offer out there.
Ok we fixed the benchmarks pulling in your fork and upgrading everything. Here is the full data: https://github.com/DAddYE/web-frameworks-benchmark/wiki/Achiu and here is a new example of the result: * Rack =&gt; 1570.43 rps * Camping =&gt; 1166.16 rps * Sinatra =&gt; 912.81 rps * Padrino =&gt; 648.68 rps * Merb =&gt; 619.05 rps * Rails =&gt; 291.27 rps * Ramaze =&gt; 234.35 rps Much more accurate and Rack is at the top where it should be. More tweaks to come but just wanted to follow up. Thanks for your help.
If only it was installable on Windows, or really worked with JRuby...
He actually replied that rails were run in production mode: &gt; I am not running tests in Rails development mode. &gt; When I say "production environment" I mean my VPS machine. &gt; When I say "development environment" I mean my MacBook Pro. &gt; I did run the tests in Rails' production mode (cache classes/views are on). &gt; I never run tests under Rails' development mode (with all the noise of classes reload, etc). http://akitaonrails.com/2011/01/08/testing-a-rails-3-0-3-with-ruby-1-9-2-and-ree-1-8-7#comment-159875689
http://nokogiri.org/tutorials/installing_nokogiri.html says "Luckily for you, building on Windows is so difficult that we’ve done it for you: Nokogiri comes bundled with all the DLLs you need to be NOKOGIRIFIED! gem install nokogiri" is that incorrect? I've no idea, don't use windows...
I forgot to include: 4. Can you recommend any good books, blogs, or other references to get started?
Cucumber is in what is billed as a somewhat human readable form, but it still isn't exactly English language. You might end up spending more time teaching users how to write the cucumber tests than you would writing them yourself. You could comment your feature files with [YARD](http://rubydoc.info/docs/yard/file/docs/GettingStarted.md) which is similar to RDoc, and allows generation of an easier to read documentation format. Cucumber supports [custom formatters](https://github.com/aslakhellesoy/cucumber/wiki/Custom-Formatters), so HTML output is available. You may want to check out https://github.com/versapay/viewcumber as an example of how you might do HTML output (although viewcumber is for web-based applications, so not much use on its own to you).
I can't recommend this book enough: http://www.pragprog.com/titles/achbd/the-rspec-book
rspec2's official documentation is 100% implemented in cucumber: http://relishapp.com/rspec I'm still not completely sold on cucumber, especially with it taking more time to implement than I'd like, but the rspec docs really show off how valuable it can be for both testing and documenting. Kerry Buckley has an excellent [slide set](http://kerryb.github.com/iprug-rspec-presentation/#1) that quickly covers most of rspecs functionality. Rspec doesn't really shine until you start using the more expressive parts of the DSL that makes your tests more concise. To answer your questions: 1. Cucumber is ideal for this purpose, assuming that you're not [cuking it wrong](http://elabs.se/blog/15-you-re-cuking-it-wrong) and not separating the technical details properly. Rspec also includes an output format to ready like plain language, but I've never personally gotten much use out of it. 2. Cucumber features include text that you can place at the top of your feature. Consult the rspec docs above for examples of how this can look 3. TDD/BDD can definitely be beneficial, but if your team isn't used to doing it, it will be a cultural shift that will need to be driven and takes time to adjust to.
(for Rails 3).
I've been getting along just fine with test unit. Although, generally, my peers and I think having users and PMs read and write code is a waste of everyone's time.
They seem very useful, saved for future reference.
Ok, I might as well mention this here, but I had a horribly difficult time trying to install rubygems-1.6.0 on Ubuntu. I installed it in literally 30 seconds on Windows... with Ruby 1.9 as my default. Yet I still have Ruby 1.8 as my default on Ubuntu and no rubygems 1.6. Also, the reason I remember the file name is rubygems-1.6.0 is because I spent 28 years trying to install it. 
Today on OSX: gem update --system =&gt; Installed rubygems 1.6.0 On redhat server: gem update --system =&gt; installed rubygems 1.5 gem install rubygems-update gem update --system =&gt; 1.6.0
Its a decent list, but I would have liked to see Kaminari instead of will_paginate and perhaps CarrierWave instead of, or possibly as a really good alternative, to Paperclip.
on unbuntu with rvm gem update --system Only took a couple of minutes.
Thanks for pointing out Kaminari. I hadn't heard of it before, and it looks pretty nice
Kaminari sounds good. I've been using will_paginate for years but I was never happy with the API and occasionally makes debugging difficult. I'll give this a shot!
I hate when the people think than ruby is only rails....10 Must have ruby gems FOR RAILS!!
Thanks, I'll take a look. It definitely didn't work last time I checked, which was about November 2010.
Does this provide much value over default_scope?
There is a bug in 1.5.0 and 1.5.1 that breaks automatic upgrade. gem install rubygems-update; update_rubygems
Quite a spammy blog post, i would rather have a more detailed post on one gem 
&gt; Here's a secret: if PHP released an official update with an alternate syntax (more Ruby/Python like), and wrapped the existing standard library in the style of the popular Ruby libraries (and made it consistent), and had backwards compatibility and ability to integrate with legacy code, it'd be a killer product. Well, I guess I would use PHP if both syntax and standard library were changed. I wonder what there would still be in common, though. 
Stick this in /r/rails or /r/rubyonrails
The Haml/Sass/Compass combo saves a LOT of time on the tedious task of translating PSD -&gt; frontend code.
Thats the part that didn't work. 
You're not using Ubuntu's 1.9 packages, right?
On the other hand, they mean you can't use normal HTML/CSS tools for changing user interface, you can't have the changes done by a non-Ruby-trained web developer, and they completely break the separation of code and presentation. So I think they're a horrible idea. Saving typing isn't *that* important.
What was the error message?
Bitcoins are very liquid and about parity with the US Dollar. * List of exchanges: http://www.bitcoincharts.com/markets/ * Main exchange: https://mtgox.com/trade/sell Then again, I don't know the details. I'm only assuming that this guy isn't proposing 120BTC/week for full-time work over a two month period. If I were to contribute freely to the Bitcoin community, there's a lot of other ground that could be built-up without working for someone.
Mr. Pine's book is possibly the greatest programming book in existence. Most other things are merely references.
It's incredibly enjoyable so far!
I'll have to boot into Ubuntu and then let you know.
Very interesting. What I'd like to see is the cost of developing kiji, and the ROI of the difference betweened tuned REE and tuned Kiji.
[Matz's take on it:](http://twitter.com/#!/yukihiro_matz/status/43843778947194880) &gt; Building a Faster Ruby Garbage Collector http://t.co/U1ddfpT #en / We'd be more than happy if the GC improvement based on 1.9, not on REE.
do that. Maybe I can help you.
&gt; hey also occupy a large amount of memory: in twitter.com's runtime, [AST nodes] account for about 60% of live objects at any given time. Holy shit, really? That seems beyond insane.
It does seem weird that they provided patches for REE but not 1.9. Hopefully they will do that too.
The program 'gem' can be found in the following packages: * rubygems1.8 * rubygems1.9.1 Try sudo apt-get install &lt;selected package&gt; Doing that tells me that ruby1.9.1 is already the newest version. 
Yes, you would think it would have made more sense to invest the time in switching to Ruby 1.9 first, then tuning that
so you don't have rubygems installed in the first place or you don't have the place where there gem executable is in your path. If you don't have rubygems installed then of course you can't upgrade it. I suspect this is the case since you can't find the gem executable which means you have never used the gem command before. I would go and install rvm and afterwards do a gem update --system if needed. 
No this is pretty normal. In most Rails apps about half of the memory usage is occupied by code (AST nodes).
I've tried to install rvm. Guess I'll give it another shot. Any easier to follow directions for installing rvm in Ubuntu? I completed the install last time and edited the bash file but it never worked =(. /new linux user
Make your own gem. Contribute to an open source project that's wayyy unfamiliar. Fake it and apply for a job doing Ruby.
ya, i think that I have to start working on gems or least modify stuff I find on git hub. I do do what i consider to first step of this: reading code and experimenting with it. But the next logical step would be submitting my own code back to the project. 
That's crazy. Why is it so big?
* Write a blog post that explore how Rubinius runs code. Be thorough. Leave nothing out. * Write a ruby interface to Subversion. Read and analyze the date. As a starting goal, try printing out all of the commit messages.
Nothing pushes you like production code. If you're not using it at work, try making a utility webapp and hosting it on heroku or aws. Or, if you've got more free time and feeling more adventurous, you could write a native mobile app (iPhone AppStore/Android Marketplace) with some client-server interaction.
 next_level.push(it)
close enough.
Ruby Koans are great for what you're asking: http://rubykoans.com/
wow that looks like a great resource. i'll have to go through the koans. **edit**: this IS a great resource. Thanks!
Join the Ruby Mendicant University at http://university.rubymendicant.com These are free but intense courses designed to get you from intermediate to proficient level. The core skills course is 3 weeks long and is led by the Ruby hero Gregory Brown.
I always find that the best projects for me to take up are ones that solve a problem for me. This keeps me motivated to see them through. If they happen to solve a problem for others, then all the better--and, of course, encourages you to make sure things work in a variety of environments (another challenge), as well as make sure your code is documented and readable. Since those last two things (great doc tools and high potential for easily readable code) are big plus points for Ruby, publishing gem is a great exercise/challenge for learning the whole Ruby ecosystem.
next_level.push(self)
Do your own thing. To learn ruby/rails, I created http://reefnook.com from scratch. I use this as a sandbox to try out new things. To learn rails 3 I created http://searched.at. Creating a rails project from scratch was an incredible way to really learn the framework. Find some open source gems that some high profile, smart people work on and absorb it. I'm currently working on a project that Hashrocket and Intridea previously worked on and I'm picking up a ton of neat little things that would be hard to search out in books. TL;DR: experiment
How does it compare to Hoptoad, Exceptional, etc.?
&gt;Any easier to follow directions for installing rvm in Ubuntu? I completed the install last time and edited the bash file but it never worked =(. That's all there is to it. You run the script, edit your bashrc. Here is a set of instructions specific to ubuntu http://www.giantflyingsaucer.com/blog/?p=1792 
A pretty easy way to do something like this is to monkeypatch the logger so it emails you when the error level is error. You can do it as a background job too. It's not fancy but it works and doesn't cost anything.
As others have said, the next thing you need to do, is work on a real-life project. One that will actually be used, forcing you to consider the required specifications, actually finish it on some sort of timeline due to you needing it, and of course, since it will be used, you'll need some degree of stability (possibly getting accustomed to testing). There are a bunch of suggestions I see here already that would fill that bill to varying degrees: 1. Apply for a job using ruby/rails You've said this is your end goal, and really is the best way to push yourself, and it sounds like you've got enough experience to do so starting now (I started a rails job with less initial experience). If getting a job takes a while, then you could also: 2. Use ruby/rails for new (possibly non-critical) projects/scripts in your current job 3. Contributing to open source projects, or write your own gem (I recommend something which you use, or would use personally)
* Use it at work to build tools, or to generate the dumb repetitive code you're forced to write in other languages. Most of my output at work is C# and SQL. I use A LOT of Ruby in my day-to-day activities, however. * Do problems from [Project Euler](http://projecteuler.net/) 
Hope this makes it into the official release
Write something that has nothing to do with serving a webpage. 
Stop for a bit on the web apps, and learn ruby without rails. Read a lot of ruby code, from gems and other sources, and realize some of the code you are reading sucks, and some is brilliant. Learn the difference. Learn what closures, coroutines, and procs are. When you see code that is succinct but understandable, that is what you are shooting for. Ruby is programming without training wheels, but you need to understand why people invented languages with training wheels. Lastly, should you be looking for a junior position, and are willing to move, I hear there are positions in Seattle for someone wanting to become a ruby master, pm me. 
I should add, a great Ruby programmer is disturbed when it took him two lines of code that could be done with one: good_items = items { |i| i.is_funny} bad_items = items {|i| not i.is_funny } This should disturb you, because your are traversing the list twice, and it takes two lines of code. Better is: good_items, bad_items = items.partition {|i| i.is_funny } 
There is also stalling issue in ruby tracker http://redmine.ruby-lang.org/issues/1047 with the patch for `GC.malloc_limit=` and `GC.heap_slots=` http://redmine.ruby-lang.org/attachments/873/1047.patch 
Not sure why you got downvoted for this, but do this for any language you want to learn.
The fact that you're not using Ruby at work is irrelevant - I've been the one to introduce it at my last 3 companies. If you can show that it's the best tool for the job, you'll often be pleasantly surprised that you're allowed to continue. Example? At my last job, we had a queue of results from a web crawler. One guy's job was to receive that queue every day, and then perform a set of steps - open up a CSV file in a text editor, global search and replace a couple of things, save it, upload it to a web site. He got through a few dozen, maybe 100 total, a day. Took me less than a day to create a Ruby program (note, not a Rails app) to do it, far better and faster. It was only a matter of time before the entire process was completely automated and churning through 10x as many results a day (limited only by the crawler's ability to find them ;)) [ The only sad part of that story is that we lived out the old "Go away or I will replace you with a very small shell script" t-shirt, as that young man was basically automated out of his job. ] 
Surely you should be using `i.funny?` &lt;/nitpick&gt;
True. Not a nitpick at all. I go over my code correcting things like this all the time. Too much c++ in my past. My other annoying habit is using "get_", but I'm slowly curing myself. 
True. Not a nitpick at all. I go over my code correcting things like this all the time. Too much c++ in my past. My other annoying habit is using "get_", but I'm slowly curing myself. 
What differentiates this from http://www.getexceptional.com/ or http://hoptoadapp.com ?
Any feedback on how does it compare to Exceptional/Hoptoad?
Is there a free open source tool to do this w/ Rails? 
default_scope can be awkward to disable. Multitentant has scoping disabled by default until you invoke it- that may make it easier to use depending on your needs.
This is wrong. You should NOT use jruby with appengine-jruby. Use regular C ruby with it.
Because Ruby is dynamic, an eval could occur at any time, which would require looking at the AST of the string in the context of the entire AST. Basically, bindings. Because Ruby has to deal with dynamic bindings.
JavaScript has to keep around the names of local variables too, but I'd be quite surprised if half my browser's JavaScript heap was AST nodes. A string table isn't *that* big.
There's more, though. There's a table for each scoping rule for every situation. You're here in the tree? Well use this scoping table.
First of all, you are setting a session variable. Rails stores the variables in an encrypted cookie called _srails_session. I am assuming on your welcome page you will have a link saying "I Accept" or something like that. I would have that link go to a route that sets the variable and redirects them back to wherever you want. So: link_to "I accept", :controller =&gt; 'welcome', :action =&gt; 'accept_and_redirect' def accept_and_redirect session[:accepted] = true redirect_to '/wherever' end I would also change your session variable name to something that makes more sense. Setting "first_time" to true doesn't make sense.
link_to is just a shortcut for writing hyperlinks. If you want to set a session variable you should do it in your controller. You can pass GET parameters in your link_to to tell the controller you want to set the session variable.
I just wanted to say thanks for that link, solved all my problems =)
Not weird at all. REE's garbage collection is different than MRI. Twitter's patches expanded upon that. 1.9 has not acquired any of the REE GC changes.
What, I have to write tests now? Man!
Compare... it's free for many projects.
Glad to be of help.
What? I thought AppEngine only supports Python and Java.
Yeah this is what you're looking for. Make sure you have your session cookie stuff setup in the Rails environment.rb file. If you don't have an expiration on your cookies, webkit will just ignore them after the user closes the browser. Every time they return to your site they will have to re-accept the disclaimer.
Good catch.
gem install appengine-jruby This will run ruby web apps in the Java version of appengine.
I don't think it is encrypted by default is it? It is just base64 encoded.
I can't speak for Apple, but I imagine they will make MacRuby public eventually. The thing is, MacRuby's only at v0.9 right now, and I'd bet Apple wants to wait until at least v1.0 to expose the API.
This. This right here. Makes me want to upvote the comment on the linked post that says the same thing, but I guess not all sites are reddit... I think Apple are being pretty darn good by making it available and shipped with OS X, you can't expect them to commit to it as a public API, until MacRuby itself commits to a public API by releasing verion 1.0, That is what the difference between 0.X and 1.0 is supposed to be after all.
Meh. The sharing I'd really be interested in is a cross-platform MacRuby. Apple doesn't even sell servers these days.
I wonder where is Apple going with this. Would for example MacRuby apps be accepted on the Mac app store? It would be nice to have alternative, high level, modern, and cool language like Ruby to develop Cocoa apps, but then again, I don't know how likely this is.
Afaik, they already are. 
I'm pretty sure you can compile a Mac app with MacRuby code in it and deploy that guy on the App Store. What I don't think is possible is doing an iOS app that way. Would be crazy nice for me, though, being a Rails guy who has only dabbled in Cocoa.
hehe i like the idea, and it's cute, but i dont think i would ever roll something like this out into production as it's using `set_trace_func` - i just dont feel comfortable with a function like this hooking every single line of code that's executed; im not sure how it affects performance but im sure it does have a large negative impact. Also - set_trace_func will not work in JRuby unless the program is invoked with the --debug flag. Nice idea though - I really wish something like this (along with const_added and const_removed) were added to standard ruby. Maybe if you can get a decent user base for this gem, core will think about implementing it.
I actually don't think the author wants to do that. Or, at least, won't want to do that for long. Say Lion ships with MacRuby 3.141. Two months later, since MacRuby is open source, MacRuby 3.2 comes out. Everyone wants to use the new hawtness... so they either complain to Apple (which won't do much)... or bundle the latest MacRuby with their apps, just like this guy is complaining he has to do now. Then expand this situation by the 1-2 year lifecycle of Lion. Been there, done that, with the Apple bundled version of wxWidgets... which advanced wxWidgets developers ignored, to use the latest version (because of the bugfixes and features in the newer version)
Of course I find this the day after writing a much less flexible rails plugin to do basically this...
neat
Agreed, this is definitely more of a debugging gem to help track down modifications to modules that aren't behaving as expected
I'm in college, but shit son, are you looking for a summer intern?
You should probably stay in college until you learn how to properly approach potential employers.
We are. Message me if you're interested. There's no medical/dental for interns but other than that it's the same.
This is good advice
Please apply at http://www.justin.tv/jobs/apply. I should have put that in the post. Thanks!
How much do you pay for working over escorts?
I already have a job, thanks. 
Potential employers need to learn to cuss, bitches.
I love working in an industry where you can say "but shit son" to prospective employer and get a serious response.
How much pay do you work for escorting overs?
Grandpa's still working on his undergraduate degree, huh? Good on you old man.
Man just how entitled do *you* get?
HI I HEARD YOU LIKE CAPITAL LETTERS. CAN HAVE METHOD NAMES? they are much quieter. 
Dude, an email is simple enough; If you have requirements the job applicant should have enough attention to detail in the reply. At a minimum it creates a forward conversation, where a form doesn't.
Eh. The guy wants to get more high-in-demand ruby developers, not fill his inbox with bullshit. Just sayin' it's a far stretch from insulting.
I really don't like when employers add these "challenge questions" or "brain teasers" to their screening process for potential hires. Since when did having a CS degree become not enough proof of critical thinking skills?
Fair enough, I picked my words poorly but, this was posted on r/forhire as well; I feel it's kinda link spammy and from someone with such a large audience can't he leverage justin.tv for hires... Entitlement was only minding that r/ruby should be for ruby programming, ya know? I deleted the comment due to your superior karma. ...I deal with forms enough... 
I'm still using paperclip in most places, carrierwave has come in super handy for it's mongoid + gridfs support. They both have their advantages. 
The more I use pagination at all the more and more I'm convinced that it's a bad design pattern. Am I alone on this one?
Ever hear of Java schools? Look it up on Google and you'll understand why a degree isn't enough.
Yeah! I feel you. But iunno mate, I can't resent people trying to get my peeps hired, knowwhatI'msayin'?
touche, so gotta use 'knowwhatI'msayin' now
touche, so gotta use 'knowwhatI'msayin' now
catered dinner? sounds like you're seriously understaffed. The best thing about my current employer is I can go home on Friday at 5:00 and show up Monday at 9:00 and no one is mad I didn't check my email in between.
Following some of the links led me to the [Event Machine: Protocol Implementations](https://github.com/eventmachine/eventmachine/wiki/Protocol-Implementations) page. A total awesome list of evented libraries for talking to such things as mysql, postgres, memcache, monogodb, amazon s3 etc...
Gonna be honest, I didn't expect him to even consider me as an intern. Lesson learned.
dude It's a great book but I'm tired every day share a new (or the same) review for this book....I'm reading reviews for this book since 2 weeks ago (almost every day)....
I would have talked about [Pathname](http://www.ruby-doc.org/stdlib/libdoc/pathname/rdoc/index.html) and [Find](http://www.ruby-doc.org/stdlib/libdoc/find/rdoc/index.html) (in the stdlib) too.
You're welcome.
When you work 11 - 7 you appreciate catered dinner. Not everyone stays for it (about half the office), but I like to work late personally. Gives you the option to get in later and stay later.
A CS degree is insufficient proof because we've seen hundreds of people with CS degrees apply who were simply not competent to do the job. The challenge question is there so we can see your code, and we can do some back and forth about it. If everyone had projects on github that they had written most of the code for, we might use those instead, but most programmers sadly don't have a significant portfolio.
Bonus points for using a block with `Dir.glob`. I suspect most newbies would use `Dir[]` which can result in huge Arrays of matches.
Yes, but it's an extra language. I can use it, but I don't because it doesn't *really* save me any time.
I don't get this comment. The linked documentation Says Dir[] is an alias of Dir.glob? 
So Charlie Sheen is a low-tech, low-speed, high-latency, unscalable centralized data grid which is pretty much incomprehensible. Got it. 
This really doesn't have much to do with rails3 performance it's more about the performance of ruby itself. Presumably the rails2 app would have run much faster if he applied to same kind of tweaks to ruby. 
Nevermind, it looks like both MRI and Rubinius just build an Array, then iterate over it when a block is given. In a perfect world, calling `Dir.glob` with a block would yield the results back as they are found.
Grr. I've been reading about "garbage collection in ruby" for about three years now. Anyone know why it hasn't it been addressed in ruby core?
Have you tried [paperclip](http://railscasts.com/episodes/134-paperclip)? It's really very simple to use.
Take look at [CarrierWave](https://github.com/jnicklas/carrierwave) and [PaperClip](https://github.com/thoughtbot/paperclip).
Because truly addressing the problem would involve rewriting much of the core to use a fundamentally different approach. The way these articles 'address' the problem is really just workarounds that happen to work because rails uses way more resources (read: initialize way more objects) than the average ruby script. That is also the reason why it has not yet been merged into ruby core - rails, while a major player, is not the only application of ruby.
Would this also improve development mode performance or is this only relevant under server loads?
this looks promising, I'l give it a try. Thanks :)
&gt; During a rubyists *meating* the other day, at one point Cucumber came up. Was that a Freudian penis or an intended joke?
No pun intended.
As it were shown by REE for a while, it would. And it greatly reduce test time.
[ruby-toolbox.com](http://ruby-toolbox.com) - A good place to find different gems with links organized by top downloads. I wouldn't put all my trust in how many people are using it, but its a good way to see whats out there in an organized fashion. 
Use String#% to fill in the values you need when they're needed.
will this let me store a variable containing other variable calls that aren't filled in until i need them to be so I can reuse?
Ruby's interpolation of certain string literals happens when the literal is evaluated, so there's no way to delay that short of simply not using an interpolated string literal. If you read your string from a file or other source it won't be interpolated, or you can simply single-quote it in an example like you gave and it'll be fine. The question then is how to force its interpolation later when you need it to be interpolated. The easiest way is to simply use eval() to force another string evaluation (this time interpolated), but of course there may be significant dangers around doing that especially since you're suggesting some of these things might be user-supplied. You could also use a template engine like erb, but again it's potentially dangerous to have erb evaluate strings that may be user-supplied. Since my grasp of your application's functionality is pretty limited I'm not sure I can offer you too much more advice than that. How you go from there depends on the security needs of your interpolation (since you probably don't want random people eval'ing their strings on your webserver). If you need safer substitutions on user-supplied strings, and if the substitutions you need to make are of limited complexity and/or of a limited number of variables, you might be better off just using a regexp to find the relevant substrings and replace them with the values in some hash of user-set parameters or whatever. You could scan the input string for /#\{[A-Za-z0-9_]+\}/ or whatever and check for the presence of that key in a hash, say, which I'd be a lot more comfortable with than attempting to eval() it. On the other hand, if you are supplying all the types of string that may be interpolated and only allowing the user to interact with or combine them afterward or what have you, using eval, erb, etc. may be fine. That way you can put whatever you want in the interpolated sections. Or if this is something you expect to just run yourself, or have people run on their own machines, you can simply allow people to dig their own graves and go with eval/erb anyway.
You could store a string and an array of replacement string names: scripts = { "ifconfig" =&gt; ["ifconfig %s", :interface_var] } You make no mention about where the values eventually come from. since they currently are real variables I'll assume they could also be placed in a hash. This makes building your script easy. values = { :interface_var =&gt; "en0" } script, variables = scripts["ifconfig"] result = script % values.values_at(*variables) PS: I don't have ruby handy to test this. I can't remember if Hash#values_at is in-order or not.
I had confisered using erb. THanks for this in depth answer. I am going to have to experiment with some of your ideas when I get home. There is some risk of the user making a bad script from incorrect input, however this is going to be used for a simple control panel for a small-form-factor pc running linux. End users will be fairly techincally savvy and there will be little security risk because -- while it will be running thin and serving the options for building the script to a web ui -- it will not actually be facing the internet.
nice, i really like the way that is set up. I will have to try something similar to this when i get home tonight.
that makes more sense, and were the hours I worked in my twenties - prewife, prekids. Truth be told - if I could pick hours it would probably be 5 or 6 pm till past midnight.
Funny, I've seen quite the opposite. Node people are far more fanboi. 
Exact same thing I've come across.
Yes, I get about 18% speed boost in my test suite.
yeah me too. I've always found the ruby/rails community to be extremely welcoming, helpful and friendly.
Why not using a lambda ? irb&gt; script = lambda {|interface_var| "ifconfig #{interface_var}" } =&gt; #&lt;Proc:0x00000000fe98e0@(irb):6 (lambda)&gt; irb&gt; script["eth0"] =&gt; "ifconfig eth0" 
Sounds like it's time to roll up your sleeves and write a library. You could give some examples and see if it piques anyone's interest, but it's a perfect opportunity to get to know the magic of Ruby.
Post a full example to pastie.org or gist.github.com so we can offer solutions.
When I have a closer to working model I will do that. Right now I am trying to put the pieces together in my head and I will be working on building it out for the next few days. Thank you for the suggestion 
Yes, I'd love to, if there's a need. I'm coming from quite a different background, so I wonder if I'd be the best candidate for the job. I suspect that to do the job properly (with optimisations, like what nokogiri is to ReXML) is non-trivial and beyond me (I have no C skills). However, maybe just a simple abstraction wrapper for the existing Win32 library would be enough to fill a gap?
with wouldn't I still have to create a separate method for each script file because they take different variables?
It certainly doesn't hurt to experiment if you can't find anything that fits what you are looking for. A simple abstraction wrapper will work just fine, it all depends on how far you want to go with it. The beauty of Ruby is that you can access all of it's magical features within the language itself.
I've written some abstraction wrappers before (for LDAP and Filemaker), but it's a different approach if you're writing something for more than your special particular situation. But yeah, I'll see whether I can quickly wrap my head around (edit: no pun intended) the existing set of calls, and see if there's a generic pattern I could follow, or something :)
Good deal; feel free to ask if you need any assistance!
If you really want that behavior, I think you can do a Dir.open followed by subsequent Dir#read calls, but it seems like this would be slower than just grabbing the array of entries.
Create a symbolic link to a directory on the card. Install rvm as normal. 
There is a [CarrierWave tutorial](http://railscasts.com/episodes/253-carrierwave-file-uploads) on Railscasts. There is also a [Paperclip episode](http://railscasts.com/episodes/134-paperclip) that is older. Since you are using Rails 3, you'll just have a few changes, but the GitHub page for Paperclip should have any changes from Rails 2 to 3.
Don't, SD cards are usually slow as shit. BTW, how are you low on disk space? EEEPC or something?
haha..who are those who thinking ruby communiy is exclusive and harsh??...the pythonist and javist....It's a bit ironic......
What *part* of the Win32 api are you talking about? It's a HUGE beast. I may be interested in helping out.
Post example code of what you want to do, I will implement the gem.
Why is your home that small.... EDIT: Valid user name, BasicObject, the root of all ruby objects. Object.superclass # =&gt; BasicObject
Generally, I don't like having huge Arrays built-up, this tends to stress the GC. However, it's rare to do Dir globs which match huge numbers of files.
1. Change your online name, "ViralInfection" is obscene. 2. Force labotomies on the idiotic "rails programmer" dorks who mindlessly upvote any stupid article on rails yet downvote interesting articles on Ruby internals. 3. Ban that `malcontent` guy, he's a dick. 4. Instantly block/ban any new article on 'eigenclasses', they've been done to death, and there's enough fucking articles on them to sink a ship. 5. Actually just ban rails altogether, tell those fucking idiots to go to r/rails or something. 
malcontent trolls hard (especially regarding FOSS and microsoft), but his Ruby posts are typically on-point and accurate, if at times dickishly articulated. I'd say he's okay to keep here. I wouldn't miss him in r/programming though.
Remove popular content, insult largest demographic of ruby users. Got it. Enjoy your one-man subreddit/circlejerk.
**Sidebar** * Link to [/r/rails](http://reddit.com/r/rails) and [/r/ruby_proposals](http://www.reddit.com/r/ruby_proposals/). **Encourage** all Rails-centric posts/questions to go in /r/rails. * Remove some of the Rails-centric books from the sidebar, add more Ruby-centric books (such as [The Well Grounded Rubyist](http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1933988657) and [Eloquent Ruby](http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104)). * Link to [TryRuby](http://tryruby.org/). * Link to the [GitHub (Free) Sign-Up](https://github.com/signup/free) page. * Link to the [RubyGems Sign-Up](http://rubygems.org/sign_up) page. * Link to [RVM](http://rvm.beginrescueend.com/). **Moderation** Remove link/blog-spam. It's kind of pointless to read a summary on RubyInside, when I can read the original full-article written by the primary-author/project-lead on their own blog. Summaries of complex issues which span multiple blog-posts are OK though, I enjoy reading those. Also, please no more articles about simple things like recursion or Arrays (that's what [TryRuby](http://tryruby.org/) and [RubyKoans](http://rubykoans.com/) are for). What's this about a Contest? Sounds fun.
Hey! I'm the moderator of ruby_proposals! Hooray!
Thanks for the input, I cleaned up the side navigation, I hope you like the changes. r/ruby_proposals is a rather small community, perhaps those posts can just be discussed in r/ruby! ;) As for a contest, I just want to do something to improve the quality of posts in r/ruby, lately it's been lacking lately with a lot of link/blog-spam. :(
ViralInfection bugs you more than 2,3,4,5? Well, maybe you could patch reddit so I could change my username. :&gt;
Take this man up on his offer
...his name is bigdoog69; it's probably safe to ignore his complaint about your name.
Sidebar links are looking good! Glad to see ruby-toolbox there it's pretty useful, I only found out about it recently myself. I was going to suggest the [github browse ruby page](http://github.com/languages/Ruby) but on second thought ruby-toolbox might actually be more useful than that.
Awesome! I hope the new links will help with the posts from people asking about good resources to learn Ruby.
&gt;Link to /r/rails and /r/ruby_proposals. Encourage all Rails-centric posts/questions to go to the Rails sub-reddit. Why? Do you feel like there are too many posts here and we need less posts? 
wow, TL;DR
Quality over Quantity. I think posts about Rails plugins or Rails best practices could go in [/r/Rails](http://reddit.com/r/rails). But, you could always post more in [/r/ruby](http://reddit.com/r/ruby), if you feel it is stagnating.
If you're going to link to GitHub, also link to [launchpad.net](https://launchpad.net/) and [bitbucket](https://bitbucket.org/).
I, for one, welcome our new infectious overlords.
Also, I suggest linking to [rdoc.info](http://rdoc.info/gems) for documentation for all available RubyGems, and maybe to [their stdlib page](http://rdoc.info/stdlib) too. Also, of course, [ruby-doc.org](http://ruby-doc.org/) for the official docs.
Theme please! Check out /r/android or similar. /r/ruby is boring...
Thanks for pitching in and doing the work -- I know we all appreciate it. I'm just a lurker here, but I don't know that any big changes are needed. I think it's a pretty good subreddit already.
holy shit, I think I recognize your username. By any chance did I play SC2 Island Defense with you last night (Thursday, 2011/03/10)
bitbucket is primarily python-oriented, is it not?
Apart from anything else, you could use sprintf. Also, you'll probably want to know about Shellwords::shellescape in Ruby 1.9.
Not that I'm aware of. There are bitbucket-hosted projects in Java and other languages.
Maybe that was just the impression I got then.
Not really, but GitHub is definitely where the majority of Ruby programmers are.
That's what I thought, so I was wondering why we would need bitbucket in the sidebar. Moreover, why would we need /r/ruby_proposals?? There are 31 subscribers and a total of 2 submissions. Please don't clutter the sidebar just because you have a "friend" with a project they want to pimp. It's clutter, that's pretty much it.
No idea why, but I'm also interested in the answer to this. 
Nope, not me, I haven't played SC2 in months
Good call. Also, [Gitorious](http://gitorious.org/) is good.
Interesting. Well, your doppelganger(?) did a good job!
I wouldn't mind getting a Hackety Hack shoutout in the sidebar. ;)
We do a fair amount of interaction with the Win32 API in Shoes. Dunno if the code will help you (I'm still working on making it more readable, _why's code can be... interesting) but check it: https://github.com/shoes/shoes/blob/develop/shoes/native/windows.c
How does one debug in Hackety Hack? Also since you get the block characters [][][][] from running inside the dmg, maybe you could just not package the app in a .dmg I think it's neat. For beginners TryRuby and RubyKoans really great resources
&gt; How does one debug in Hackety Hack? You can just use `error`, `warn`, or `info` to log to the Shoes console. &gt; Also since you get the block characters [][][][] from running inside the dmg, maybe you could just not package the app in a .dmg That's the standard way Mac applications are distributed, I'd rather just poke at the [][][] problem. Then again, who really runs things from DMG's anyway? &gt; I think it's neat. Thanks!
better threading support
Contests and prizes. Seriously.
&gt; Then again, who really runs things from DMG's anyway? I do, almost always, I don't want the chore of deleting an app, if I don't like it, 'it *should* just work'.
I added these expect the stdlib page, space is limited!
I'd rather have gem announcements and best practices in [/r/Rails](http://www.reddit.com/r/Rails) too, unless they're just RubyGems, generic, or based on Rack, in which case they're welcome to feed the rest of the ruby ecosystem. 
Well, yeah, it was semi-rhetorical. ;) Anyway, it's something I'm looking into taking care of. It's certainly not okay, but it's also not a showstopper.
&gt;Quality over Quantity. Most of the posts here about rails. If you forbid posts about rails it would be a wasteland. You would only get one submission a week at best. &gt;But, you could always post more in /r/ruby, if you feel it is stagnating. Look let's be honest here. Most people use ruby for rails and rubit is not that popular in the first place. As it is you get no comments on 90% of the posts. Why would you argue to make the subreddit even more dead? If anything you should combine the two subreddits because there is not much traffic there either. 
&gt;Look let's be honest here. Most people use ruby for rails and rubit is not that popular in the first place. Let's be factual instead. I've gotten huge amounts of traffic from /r/ruby, all about non-Rails related projects or blog-posts. So based on my experience there is a demographic who is interested in purely Ruby things, outside of Rails. &gt;As it is you get no comments on 90% of the posts. Are you sure exactly 90% of all posts never get a single comment? Could you post some analytics/evidence to support that removing/reducing Rails posts would turn /r/ruby into a "wasteland" or "more dead"? &gt;Why would you argue to make the subreddit even more dead? I was unaware /r/ruby was dead to begin with, it seems to be doing just fine. What are the criteria for a sub-reddit being a "wasteland", "dead" or "more dead"? &gt;If anything you should combine the two subreddits because there is not much traffic there either. Interesting proposition from an SEO standpoint, but that would disrupt /r/Rails even more than it would help /r/ruby. Again, could you post some metrics on the traffic for /r/Rails?
More dinosaurs
To repeat one element from my top 5 [found here](http://www.reddit.com/r/ruby/comments/g1pia/hello_rruby_im_your_new_moderator_how_would_you/c1ka1ks) 3. Ban that malcontent guy, he's a dick. 
Yea that's it. Because we need less people here. 
&gt;Let's be factual instead. I've gotten huge amounts of traffic from /r/ruby, all about non-Rails related projects or blog-posts What do you mean you got a huge amount of traffic? To you blog or something? I am talking about traffic here. &gt;Are you sure exactly 90% of all posts never get a single comment? Could you post some analytics/evidence to support that removing/reducing Rails posts would turn /r/ruby into a "wasteland" or "more dead"? Look at the front page. There are 25 posts here. The one with most comments is this one with 40. Then there are a couple with 25. The rest have less than a dozen comments and lots of them have no comments at all. You think that's too much and you want to cut that down eh? &gt;Interesting proposition from an SEO standpoint, Who cares about SEO. This is not your business it's a site people come to in order to amuse themselves. &gt;Again, could you post some metrics on the traffic for /r/Rails? Yea sure let's see. On the front page of rails there are two posts with 17 comments on them. One with 14 comments. Two with 10 comments. The rest have single digit or no comments on them. Wow. How can anybody keep up with that much volume. Hey we should make one for r/sinatra too because we can't deal with that much volume on one subreddit. 
We could definitely do without you, you bratty little child.
You are the one calling people names.
I'm not sure about combining Rails and Ruby subreddits, but I don't understand forbidding *any* Ruby posts. Rails, whether you use it or not, like it or not, is one of Ruby's killer app frameworks. The Rails community is part of Ruby, and vice versa. If you visit /r/ruby, why not just skip over the posts that don't interest you? 
well this is awkward...
Okay, I feel like I'm witnessing the collapse of somebody's world here. Something's up in bigdoodland. It's not your fault, bigdood.
This is how I wish documentation read.
it does if you use delayed deltas incremental diffs once you change/destroy/create an indexable model, I do not remember if it on by default though
Less whining and nastiness by the readers and global peace
The new policy is for there to be no posts about rails on /r/ruby. See the sidebar, also see this http://www.reddit.com/r/ruby/comments/g1pia/hello_rruby_im_your_new_moderator_how_would_you/c1ka5ks Downmodded because this post is about rails.
Before I make any specific comments on the information you have presented, I want to complement you on your technical writing style. It was a thoroughly enchanting read. The following comments may be regarded as nothing more than my personal opinion influenced by my own experiences with rails and unicorn. Feel free to disregard them completely or take from them what you like. nginx has a [stable ppa](https://launchpad.net/~nginx/+archive/stable) (0.8.54 as of the time I am writing this comment... The same version you are encouraging readers to compile) as well as a [development ppa](https://launchpad.net/~nginx/+archive/development) (0.9.5-4 at the time of this comment). Add the repository with sudo add-apt-repository ppa:nginx/stable You not only get the latest stable version compiled with sane and RoR/Unicorn friendly defaults, but you also get for free the debian init.d startup scripts (/etc/init.d/nginx start|stop|reload|restart), an apache style available/enabled folder structure for config file symlinks, and automatic update management by the apt package manager. Also, since unicorn is built in the unix spirit, you should pass a socket to the listen method in unicorn.rb listen "/path/to/rails/app/tmp/sockets/myapp.sock" Then in your application specific nginx config (in /etc/nginx/sites-available/myapp.conf symlinked to the sites-enabled directory) you would set your upstream application server to point to that socket. upstream myapp_server { server unix:/path/to/rails/app/tmp/sockets/myapp.sock fail_timeout=0; } server { # your other server configurations here... # Rails app server socket: location @app { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; proxy_pass http://myapp_server; } } This way you don't have the overhead of TCP and you can leave unicorn to manage its child processes the way it was designed to work best.
Hmm. I agree on a split in theory, but in practice this is going to be impossible to maintain.
In theory this could be seen as a rails post, but it really applies to any sort of Rack type hosting, and could be used for Merb, Sinatra etc.
That is not the new policy. I merely suggested that the moderators **encourage** Rails related content to be posted in /r/rails, by linking to [/r/rails](/r/rails) in the sidebar. Please do not take my words out of context.
&gt;In theory this could be seen as a rails post, but it really applies to any sort of Rack type hosting, and could be used for Merb, Sinatra etc. Nevertheless it doesn't belong to r/ruby as per the new policy. This subreddit is only for those posts that deal with ruby only.
It could be maintained by downmodding the submission and reminding the submitter of the rules of the subreddit. 
Anyone know what the advantages/disadvantages of nginx reverse proxy to unicorn over nginx + passenger module or nginx reverse proxy to passenger standalone? Is unicorn an improvement over passenger?
&gt;That is not the new policy. I merely suggested that the moderators encourage Rails related content to be posted in /r/rails, by linking to /r/rails in the sidebar. Please do not take my words out of context. How do you propose to encourage this other than downmodding the submission and by telling the author to post it in the right subreddit? I for one intend to do both of those things every time there is a post on /r/ruby about rails, sinatra, camping or any other ruby based framework. you along with the new moderator have made it clear this subreddit is for posts dealing with ruby itself and not any specific framework despite the fact I disagree with both you and the moderator. The really ironical thing is that my posts will be downmodded by people who agree with me (that this subreddit should not be excluding rails based topics) and disagree with you. One of the funny ironies of reddit. 
The ways that Unicorn and Passenger work are more similar than different. Passenger makes it trivial serve a rails app. Just point it at your app and it works... unless you need to do anything exceptional. Passenger performs a bit of wizardry to check if you are pointing to a rails app or a rackup file~~, which, unfortunately makes it pretty much useless if you want to start your rails app with a custom rackup. Also, Passenger hands off requests to worker processes via its nginx/apache module, Unicorn spawns and manages workers via the unicorn master process which speaks in standard HTTP~~. Unicorn makes hot restarts graceful, allowing you to restart your application without stalling out or dropping any active requests. To restart Passenger, you touch the restart.txt file, but Passenger drops your app instance and all of its workers. While your app loads, it blocks on all requests until it can spawn more workers. If you have a rails app with nothing out of the ordinary as far as config and bootstrap, Passenger is the easy choice. Just point it at your app and everything magically works. If you followed along with this comment without scratching your head WTF style and your app needs to be able to be upgraded gracefully or your app is a mix of rails/rack/sinatra/whatever, take a closer look at [Unicorn](https://github.com/defunkt/unicorn). It is simply impressive. Well designed, sleek, and impressive. ____ **Edit** Corrections thanks to FooBarWidget's comment below.
I agree with you but we are in the minority I guess. It's been decided that /r/ruby is for ruby posts and not rails, sinatra, camping etc. Personally I think that's terrible. This place already doesn't get much comments or submissions. Basically it's going to be stagnant.
Or we could work with the natural coupling of Ruby and Rails and not have the overhead of downmodding that appears more punitive than functional. The oldest submission on /r/ruby's front page is over a week old. I think we can deal with interesting submissions that might mention webservers and frameworks. Maybe we can reentertain the subreddit argument when /r/ruby is so active that it needs to be subdivided. Until then, it just feels like rules to have rules because in the end, we just get people like you that play the resident "b-b-but it's in the rules!' vigilante with no added value.
&gt;Or we could work with the natural coupling of Ruby and Rails and not have the overhead of downmodding that appears more punitive than functional. Look I agree with you but both of us have been overruled by the new moderator and others on this subreddit. They feel that only posts related to ruby itself should be here and that rails posts should go to /r/rails. See the sidebar it specifically says &gt;A reddit for discussion and news about ruby programming &gt;Ruby-on-Rails posts are encouraged to be posted in the r/rails subreddit &gt;The oldest submission on /r/ruby's front page is over a week old. I think we can deal with interesting submissions that might mention webservers and frameworks. Once again I agree with you. I argued the same point when the discussion was taking place. I wish you and others would have jumped into that discussion and supported me but it didn't happen. I argued that both /r/ruby and r/rails were sparsely populated and had very little submissions and comments. I argued that if anything we should combine the two in order to build a more vibrant subreddit but my arguments were rejected. &gt;Maybe we can reentertain the subreddit argument when /r/ruby is so active that it needs to be subdivided. Until then, it just feels like rules to have rules because in the end, we just get people like you that play the resident "b-b-but it's in the rules!' vigilante with no added value. Look it's not people like me who made this rule. I argued against it. Don't blame me for the rules I disagree with them vehemently. The rules were not made by me. I argued against the rules but the rules were set anyway. Now that the rules are in place maybe we can make r/rails what r/ruby could have been. r/rails does not have rules against posting general ruby posts for example so it could be the more inclusive ruby based subreddit. As it is the rules of this subreddit have been decided. Those rules are that posts about rails and other frameworks are discouraged. That's that.
This is a rails related gem and therefore belongs in /r/rails. See the sidebar and also http://www.reddit.com/r/ruby/comments/g1pia/hello_rruby_im_your_new_moderator_how_would_you/c1ka5ks Rails related posts should be posted on /r/rails and not /r/ruby. Downmodded because it's offtopic.
Thanks for the explanation. I like the graceful hot restart thing, but seems like it should be possible with passenger as well if you have two backend servers behind a reverse proxy and only touch tmp/restart.txt on one, then wait for the workers to spin up, then touch touch tmp/restart.txt on the other one. Of course this whole thing is contingent on the frontend proxy being smart enough to not send requests to the backend server if it's down. If the backend servers listen on unix domain sockets, if one goes down, will its socket still be there for the frontend server to send requests to? Will that break everything?
You are right for the most part, but when you say that passenger is useless with a custom rackup I'm confused. You can put anything in your config.ru, passenger only requires that you name it config.ru. As for rolling restarts, we have something like that planned for the near future. Stay tuned. Also, Phusion Passenger Standalone speaks HTTP just like Unicorn/Mongrel/Thin.
Nginx reverse proxy to Phusion Passenger Standalone is pretty much the same thing as Unicorn. Both implement the multi-process worker model and both restart worker processes if they crash. However Phusion Passenger Standalone can also dynamically adjust the number of processes based on traffic. If your site is idle for a while then Phusion Passenger can shutdown most processes in order to conserve memory, something that Unicorn can't do.
So it should be x-posted to r/merb, r/rails, r/sinatra, r/rack and r/ubuntu? The policy as per the sidebar is "Ruby-on-Rails posts are **encouraged** to be posted in the r/rails subreddit" Btw, I read your comments in the moderation thread, and I do realise you are just living up to your user-name, and trying to prove a point. 
&gt;So it should be x-posted to r/merb, r/rails, r/sinatra, r/rack and r/ubuntu? That's up to you but the sidebar clearly indicates they don't belong here. &gt;The policy as per the sidebar is "Ruby-on-Rails posts are encouraged to be posted in the r/rails subreddit" Right. That's what I am doing. I am encouraging the poster to post it there instead of here. Do you know of any other way to encourage the poster than to tell him and downmod the post? &gt;Btw, I read your comments in the moderation thread, and I do realise you are just living up to your user-name, and trying to prove a point. I argued against the policy and lost. I am willing to live with that and now am making sure people know what the policy is and encouraging them to follow the policy. I don't understand your hostility here. I am willing to help enforce a policy I disagree with vehemently and you yet you attack me? Why? If you read that thread you will see that I was arguing for actually combining the two subreddits because neither one has much traffic.
I wasn't attacking you, sorry if I came across that way. I know exactly what you are arguing for, and to a large extent, I agree with you. 90% of the people using Ruby, are using it for rails (I can't prove that in any way shape or form), and splitting two very quiet subreddits even further cant be a good thing, and it definitely annoys me as a rails developer. What I was essentially trying to say to you is, pick your fights. I don't think this was the right post to try and prove any points with. It ISN'T a rails specific post, even if the word rails is in the title. Again, sorry for sounding like I was attacking you.
My appologies. Thank you for the corrections. I know that Passenger has had a lot of activity recently. It looks like they are quickly moving toward the best AND easiest solution.
I wasn't attacking you, sorry if I came across that way. I know exactly what you are arguing for, and to a large extent, I agree with you. 90% of the people using Ruby, are using it for rails (I can't prove that in any way shape or form), and splitting two very quiet subreddits even further cant be a good thing, and it definitely annoys me as a rails developer. What I was essentially trying to say to you is, pick your fights. I don't think this was the right post to try and prove any points with. It ISN'T a rails specific post, even if the word rails is in the title. Again, sorry for sounding like I was attacking you.
&gt; As for rolling restarts, we have something like that planned for the near future. Stay tuned. I love you guys.
For some tasks, FFI (https://github.com/ffi/ffi) is good enough to solve the problem.
&gt;It ISN'T a rails specific post, even if the word rails is in the title. I guess I disagree. Even if you are right that it isn't a rails specific post it's certainly not a ruby post. It could be argued that it's a NginX post, an ubuntu post or a rails post but it can't be argued that it's a ruby post. Anyway I didn't pick this fight, it picked me. I will continue to encourage people to post their rails related posts in /r/rails. The only way I know of to do that is to reply to the thread and remind them and downmod the submission. If you know of another way to encourage people let me know.
Rails. Mother-flippin' Rails. The best web framework I've ever used. Also, microframeworks like Sinatra that let your prototype or make something smaller in scale. 1.9! Better performance (I guess) and better hash syntax! Other stuff! Someone else is probably better at this than I am.
&gt; Rails. Mother-flippin' Rails. Yes, Rails was big back then too. Though, it's seen some revisions since then (up to 3.0 now!), and also seems to have been merged with something called "MERB". 
Gems have come a long way in stability, availability, and usefulness. IMO Nokogiri is the best thing that's happened to Ruby since sliced cheese. Ruby integration into other systems has advanced a lot too - For example brew has completely displaced macports for me. 
&gt; IMO Nokogiri is the best thing that's happened to Ruby since sliced cheese. Nokogiri: found [this at rubyforge](http://rubyforge.org/projects/nokogiri/) and [this at rubygems](http://rubygems.org/gems/nokogiri). (Why 2 different places?) Unable to find the SlicedCheese gem you mentioned though. ... ( kidding ;) ) 
Now there's a gem called Bundler which automaticaly manages your projects' gems. You have a list of gems you need in your project, then you run 'bundle install' and it automaticaly installs the last version. Google it. Now, everything opensource is at Github.com. Even big companies like Facebook are using Github.com. Oh, and Git is the (almost) standard Ruby VCS. Rails is hot. Merb was another nice framework which merged into Rails. This resulted in Rails 3. http://github.com/rails/rails is the repository :) The latest stable version is 1.9.2, however lots of people are still using 1.8.7 because of back compatibility problems. And you should take a look at ActiveRecord gem. It's part of the Rails environment, but can be used standalone.
JRuby is *awesome* especially for systems-related work like threading, scaling, debugging, and integrating with Java APIs.
Heroku managed hosting makes deployments of quick projects a piece of cake.
Bundler is much more than just a tool for installing all gems in a list. Bundler is a tool for specifying exact dependency constraints for your application. It guarantees that the dependencies you run in development are the same as the dependencies you run in production, something which has historically caused a lot of problems during deployment. That it also installs gems for you should be considered a convenient side feature, because one can implement gem installing in a shell script consisting of a few lines.
FFI (Foreign Function Interface) is a ruby extension for programmatically loading dynamic libraries, binding functions within them, and calling those functions from Ruby code. http://wiki.github.com/ffi/ffi
My first impression is that most of the folks who have answered so far are relatively new to Ruby. Nokogiri doesn't do much that is new, but what it does, it does pretty well. Rails of course has been around for a long time now, as has ActiveRecord. Maybe he meant ActiveResource? Bundler is new. Git might be new to you, depending on what you have been up to. Merb is definitely more recent that 2006, I am pretty sure EZ hadn't even thought about working on it then. A lot of things about Rails 3 will definitely not be familiar to you. There is a new version of AWDWR out, and of course Programming Ruby. And The Rails 3 Way by Obie Fernandez. All recommended if you plan to dive back in. I don't know if RSpec was around in 2006. It's a nice testing framework. And other tools that work with it or alongside it, like Factory Girl and Cucumber. In fact there are a huge messy pile of testing tools out there now, and it seems everybody swears by one or more of them. 
RVM (Ruby Version Manager) makes it easy to install, manage and work with multiple ruby environments including interpreters (MRI, JRuby, etc.) to sets of gems. http://rvm.beginrescueend.com/
DHH is getting polite. :) Here's from his Twitter today: "I give Twitter a lot of shit over biz model and ecosystem, but mostly because I love this form of communication. Twitter is amazing."
My favourite changes: * JRuby is now quite good. * Nokogiri got usable on Windows just a few months ago, and is almost there on JRuby (you need jgem install nokogiri --pre, stable gems are fail), so nobody needs rexml any more.
* All gems are on rubygems.org * Rubyforge is deprecated, all hail rubygems.org and github * It seems that plain old OO is growing stronger compared to metaprogramming and DSLs, as an example: thor vs rake, gems like inherited_resources and devise show more love for OO principles compared to what I was using back then. * We now have Unicorn and Rainbows! ;)
I just started with Ruby a few months back, so I don't know, but I still find these comments helpful.
rubygems.org is the official gem repository now (changed since 2006) and the site has a page for every gem. Gems are definitely the main packaging solution. How they are generated and managed is still in flux, though. On the upside, most projects are packaged as gems, and therefore have pretty consistent directory layouts. The main Nokogiri site is at http://nokogiri.org/ RubyForge is no longer the focal point of Ruby project management and development. Most of that has moved to GitHub. ruby-doc.org (which I used religiously) is (in my opinion) losing market share to sites like rdoc.info. Ruby 1.9 is actually a complete rewrite of core Ruby and is very much improved over the 1.8 series. Hopefully the 1.8 series will die and we won't have to deal with 1.8.8. My impression is that the community is moving away from 1.8.7 as the initial fear wears off (and 1.9.2 is much more stable than 1.9.1). JRuby is, of the non-MRI Rubies, easily the most active, mature, and well-maintained. Ruby Enterprise Edition (a tweaked MRI) is also quite popular. After that, Rubinius seems to be the most rapidly progressing VM, but it's not really "prime-time". In the web space, besides Rails, Sinatra has made quite an impact. There is also a proliferation of HTTP servers (unicorn, rainbows, thin, mongrel...) and templating libraries (see the [list supported by Sinatra](http://www.sinatrarb.com/intro.html#Views%20/%20Templates)). Testing tools have become very diverse, with RSpec, Cucumber, MiniTest, Shoulda, etc. There are a crazy number of Ruby conferences. And probably a lot more has changed...
I think the concern isn't with someone asking, "I have this [sinatra, rails, rack] app, and when I do this to my model, I get this", but it is more with someone posting a link or asking about rails routing, or webserver comparisons, that are specific to rails, sinatra, camping, etc. The latter should go to r/rails, but the former, when it has nothing to do with the actual operation with the framework but the implementation of the logic or execution of a library behind the application can come here. The last thing I personally would care to see here is questions about nginx configurations, because I can go to rubyonrails-talk to get that noise.
Language features new to Ruby since 2006: instance_exec (instance_eval with parameters) Method#parameters (for parameter introspection) Symbol#to_proc is now in core Blocks now accept block arguments: { |&amp;block| } Blocks now properly scope block variables Enumerators --- these fucking rule Fibers (like co-routines) New lambda syntax -&gt;{hello} and invocation syntax my_lambda.() A ton more awesome Enumerable methods: min_by, sort_by, drop, take, take_while String Encoding support New hash syntax Method#source_location (this can be used to retrieve method source code at runtime) 
I have to be honest, I'm not the biggest fan of Nokogiri's interface. The documentation is weird, there's not a lot of useful complex examples, the actual objects are strange, and I feel it's lacking a lot of helpful mechanisms for doing things like attempt at hash conversion. It's a very good program though don't get me wrong, and I love the speed. I think I'm also just spoiled rotten by JSON. I like Nokogiri's interface more than I do all the other XML parsers.
I have used rails since you left and here is the biggest changes I can recall: * rubygems.org * ruby 1.9 * passenger * bundler * rails3 * cucumber (test-framework) * heroku (rails cloud service) * no more talk about "rails doesn't scale" * ... It's better than ever :)
Well, [home_run](https://github.com/jeremyevans/home_run) is faster at the moment. And issue is fixed in development version of ruby.
&gt; There is a new version of AWDWR out, and of course Programming Ruby. I see that there's also "The Ruby Programming Language" (Flanagan &amp; Matz) available now. Also noticed "Ruby Best Practices" by G. Brown. 
Well, [home_run](https://github.com/jeremyevans/home_run) is faster at the moment. And issue is fixed in development version of ruby.
Yup, the next 1.9 release of Ruby will have a completely replaced date parsing engine that's backward compatible but a lot faster.
 &lt;peeve&gt;Orientated is not a word! &lt;/peeve&gt;
I'd love to see this rewritten using more conventional terms. I'm a professional developer and reading this makes my head hurt.
Ouch, that typo is a bit embarrassing. I'm correcting it now.
While you're correcting, take a look at the bad html entity escaping in your code snippets.
Fixed. That was introduced when I made the previous corrections. Wordpress revisions restore with html entities. 
In an unrelated happenstance, I heard "orientated" on the Dev Show podcast this morning... 
&gt; I'm a professional developer I'm gonna be a dick and say it: Please stop asking for money to write code until you no longer find the language of this elementary post difficult. The concepts are core OO principles and the vocabulary is quite conventional. 
Patch is merged in main tree https://github.com/ruby/ruby/commit/eb807d42eca121df22f72b95465bba52a4e7fefa#diff-15
&gt;The latter should go to r/rails, but the former, when it has nothing to do with the actual operation with the framework but the implementation of the logic or execution of a library behind the application can come here. Well this is not supposed to be a help forum so I'd say neither belongs here. &gt;The last thing I personally would care to see here is questions about nginx configurations, because I can go to rubyonrails-talk to get that noise. Noise is the least of your worries on this subreddit. No new posts in a couple days and the number of posts with double digit comments is rare. 
I've briefly used the invoicing in Ruport and rolled my own a few times, and been left wanting. This is definitely the best so far. The code is clean, has i18n support and uses Prawn. There's a short todo list, but playing with it, I know I'll be getting it into production really soon.
It only supports Rails now, but Sinatra support is planned and it doesn't look like that will be a terrible ordeal. Some /r/ruby exposure should speed that up.
So we're in agreement. I guess rest assured that the new moderator will realize the futility of enforcing the new rule when he's unable to decouple rails from ruby and quality rails-related threads will be upvoted if it interests those who read r/ruby. It seems like every subreddit I'm subscribed to is asking the same question of arbitrary subreddit division. Unless Reddit's subreddit model provides support for subdivision within a subreddit, it seems like the subsubreddits are always too marginalized.
Amazing work from the jruby guys and looks like great changes are on board for the next version. Thanks to the jruby team and engineyard for this. 
&gt; For JRuby 1.6, we “only” resolved 420 issues. Pass it around, man...
Honestly, r/ruby gets a new post like once a day, it really doesn't hurt that much, I rather see it in r/ruby with 7k+ subscribers than rails with 1k+ subscribers... That's just my two cents on the whole "don't post r/rails in r/ruby" --- That aside, I think it's neat, but I'm really in love with [Devise](https://github.com/plataformatec/devise) these days +1 for Sinatra support!
Seems pretty similar to [Trollop](http://trollop.rubyforge.org/).
Thanks for posting this. I'm gonna get around to building an API for one of my side-projects soon, and this will be helpful for sure.
Watching Zed!
No problem. I tried posting to /r/programming, but it got down-voted into oblivion pretty quickly.
What on earth is he babbling about?
http://mtnwestrubyconf.org/2011/sessions#zedshaw
How do you plan to reconciliate data models changes between API versions ?
I'm not hearing or seeing anything. Strange...
I was with you until you scrapped REST in favor of versioned method names. I would much much rather handle the version param in the restful action than muddle up my controller with n*version methods. 
I don't understand how anyone could vote this down.
I got both, but the sound is pretty bad. I had to crank the volume to max to be able hear anything.
No, I mean what on earth is *Zed* babbling about.
Fair enough, but I didn't necessarily scrap REST; the API itself can still be RESTful regardless of the backend code that is executing the requests. I agree that this approach can lead to "muddling" the controller up; for our API we actually have the methods themselves broken out into their own files to keep our controllers from becoming gigantic. We decided to keep the versioning logic outside of the methods themselves, however, as we felt it made more sense to have a method's output be predictable without including conditional logic that had nothing to do with the method itself.
Yeah Hes talking pretty quietly
Zed rocked it!
I don't think anyone actually did. The reddit voting stuff is strange.
Sinatra is in the works right now, thanks for the support :)
This is such a weird and obfuscated way of doing it. I don't see the point. Just namespace the controllers and go about your business. none of this list_1 shit.
Please see the sidebar. Rails related posts belong in /r/rails. 
people on /r/programming hate ruby. This doesn't belong here either. It belongs in /r/rails. 
This belongs in /r/sinatra (if there is such a place) or maybe /r/rails but not here. r/ruby is for ruby related topics and not specific frameworks.
probably the same people who dislike youtube videos of laughing babies or puppies.
Does it not belong in /r/programming either? Where does it belong in then?
I'm using RVM on my Mac and for some reason, 1.9.2 is not quite as happy as 1.8.7. Anyone else get it working successfully? When I try to use irb or gem, I get 'uninitialized constant Gem::GemPathSearcher (NameError)' from rubygems. But 1.8.7 works fine. Haven't figured it out yet. Other than that, RVM has been great. 
It certainly belongs in /r/programming but proggit consists mostly of windows programmers who are extremely hostile to anything that is not C# and haskell (basically because they think haskell is a microsoft research project). So if you post it there it will quickly get buried. /r/rails has no rules about offtopicness, generally they are pretty open. r/ruby encourages people not to post articles about specific frameworks and instead only about ruby itself. 
Actually, I would expect to find it here. Not sure if Sinatra has large enough community for /r/sinatra. Rails is another story.
&gt;Actually, I would expect to find it here. Well the new moderator prefers it otherwise.
Look I agree with you 100% and I argued vehemently against the new policy but all my arguments were downmodded to hell. The new policy got passed despite my objections. I kind of wish you had jumped in on the conversation and supported me. Same goes for everybody else who came days later and agreed with me. The problem is that people who think like us were outvoted and that's the new policy. In fact I called for merging of /r/rails and ruby because traffic on both are very light.
The best I could tell one guy proposed the idea, a bunch of people upmodded him and the moderator accepted his proposals. I don't know where you guys were during the discussion but I was the lone voice of dissent.
All I am doing is stating the policy. See the sidebar.
This is almost identical to, and basically a straight ripoff of my gem, [cleanerupper](https://github.com/fmiopensource/cleanerupper), which was released nearly a year ago.
If you enjoyed that article, you may like this one: http://www.elsewhere.org/pomo/ 
I responded to your comment on the blog post (which was a bit nicer than what you posted here) but I'll respond again. Sorry you feel slighted but if you look at the commit history on my project (and the documentation in the README) you'll see that it's been around since 2008. And like I mentioned on my original response - I actually like your implementation - not sure why you're so upset. You can find the original project on my github account in plugin form if you're interested: http://github.com/adambair/fu-fu
Scruffy here; [Second](http://www.youtube.com/watch?v=ggRLVdOoNGI#t=8)
I'm just grumpy cause I'm tired. Sorry brohan.
Or [this one](http://www.elsewhere.org/pomo/), or even [this one](http://www.elsewhere.org/pomo/).
In other words, powered by JRuby, which you said not to use?
This is awesome. Thanks so much to the conference and confreaks for setting this up!
I see many assertions here but no evidence to back it up.
All power to them. r/sinatra doesn't exist yet. Sinatra posts in /r/ruby are quite rare.
Outsourcing is a form of imperialism? Some interesting points mixed in with a bunch of neo-liberal bullshit.
I have to be honest. I found this article to be wanting. I'm not a "sexist pig" or anything like that. In fact, half of the developers in our office are women. I work with women developers on a constant basis without any problems at all. I'm not going to do a full deconstruction, but let's take this quote for example: "Programming is about sex, gender, money and race." Come on, sex? Seriously? Programming is not about sex at all. Programming is one of the most asexual things on earth. There may gender relation issues, but this doesn't have anything to do with the act of having sex. Come on. I'm a science and philosophy buff, and I love psychology, sociology and anthropology, so don't get me wrong.. but I think there's this serious lack of vetting within some academic groups, that end up dropping Marx/femin/conservativ/*ism dogma on top of every single topic, regardless if it has any relevance to it or not. As (misquoted) by Freud, "Sometimes a cigar is just a cigar". Actually, most developers will probably tell you that lack of interaction with the opposite sex is the worst thing about being a developer. And I'm not referring to the ability to "hit on" women.. I'm talking about having a regular, non-sexual interaction with the other half of humanity. I feel it messes with your brain when you don't mix it up a little bit. As for the glass ceiling everybody keeps talking about, all I have to say is people in town constantly attempt to snipe the women from our office for other jobs. The big reason they give me is they're trying to get an office together that isn't just a bunch of men. So they're actually discriminating in the exact opposite way. Which is probably illegal of course. And I will say (and I'm telling the truth) that we didn't decide to hire the women at our office because of their gender at all. We hired them because they were the best candidates for the job, and did a better job than many male (and occasionally women) competitors. Finally, can I say that questioning women's free will in papers like this can be just as sexist as some football frat boy? I think it's disempowering to tell women that they can't achieve goals in life because of the traditions of their goals. Matz could be just right of Attila the Hun and women could still be great ruby developers. Free Will people! I don't disagree with everything in here, or perhaps even most of it.. she's right about the cultural differences between Java and Ruby developers, for example. I just don't think it's a very well written paper.
&gt;"Programming is about sex, gender, money and race." Everything men do is about sex, gender, money and race. Everything.
That is one of the most sexist things I have ever heard in my entire life. What, I'm afraid to ask, are women about then? What three or four banal, over-simplistic things drive everything that women do?
&gt; I'm not going to do a full deconstruction, but let's take this quote for example: "Programming is about sex, gender, money and race." &gt; &gt; Come on, sex? Seriously? Programming is not about sex at all. Programming is one of the most asexual things on earth. *There may gender relation issues, but this doesn't have anything to do with the act of having sex.* Come on. This statement is contradictory once you take into account the fact that the author is using sex to denote the relationships between genders. You're using sex to denote the literal act of sexual intercourse, but the article is using sex in a more general and abstract manner.
That is a very weird and unconventional way to describe it, but fair enough. My programming has nothing to do with my relationships between genders, and I suspect it doesn't for most developers. I'm a developer because I like making things I can share with the world. I have a job as a developer as well because I have to pay the bills, so why not get paid doing something you love? And before somebody responds with "see, money!", I would work a minimum wage job and still develop software anyways, because I love it. In fact it's exactly what I did after the first dot com bubble burst. Women need to pay rent too.. does that mean everything women do is about money too?
&gt; My programming has nothing to do with my relationships between genders, and I suspect it doesn't for most developers. But here, "gender relations" isn't talking about your specific relationship to other women; it's talking about the interplay between programming, society, culture, and the gender norms present at their intersection. Think of it this way: why do men, as a whole, generally pick, say, programming over being a kindergarten teacher? This article is exploring the notion that there may be gender norms that attract more men than women to technology and programming, and as a result those fields may have been constructed so as to emphasize their more masculine ideals. On the flipside, the author argues that Ruby and its surrounding culture push against this (either intentionally or accidentally) and actually exemplify certain attributes more typical of women. I haven't really digested the article well enough to judge whether I agree or not (and at first glance, there seem to be some holes in the argument, although overall I think there's some meat behind it), but understanding its thesis is central to its critique and discussion.
And that is something I can definitely get behind. I agree with the point that there is a strong feminine quality to the ruby language and its development community in general. I cringe whenever I have to deal with other language cultures largely because of this. Lots of jerry-rigged code, chauvinists, hot shots. Guys that will tell you to RTFM when there isn't a M to F R. Actually, my biggest concern with \_why leaving was that he was one of the large influencers of this (but I could be mistaken). I was worried that we may lose this element of ruby to a certain degree as a consequence of his departure. I would have given this paper a lot more credit if she had mentioned \_why as opposed to Matz. It's just so haphazard to use Matz for this point, when the same argument could have been made for a lot of people. I mean, Linus Torvalds married a six-time Finnish national karate champion.. I don't think *he's* threatened by strong women. That doesn't necessarily mean the Linux kernel and Git must possess a feminine quality, or a masculine one. The programming world is less fatalistic than that.. I really don't see a sex connection there.
Whoosh!
&gt;That is one of the most sexist things I have ever heard in my entire life. It's not sexist. It's also kind of redundant because everything men do is about sex and gender. Money and race are merely a means to sex and gender. &gt;What, I'm afraid to ask, are women about then? If I had to narrow it down to a simple concept it would be security. This is all basic biology. It's how we evolved. 
I suppose then it wouldn't hurt to mention RMU (http://university.rubymendicant.com) and my O'Reilly book (http://rubybestpractices.com). Both are free!
Are you guys considering anyone in a consulting capacity?
just letting you know, but you come across as a self aggrandizing tool and a tosser in your blog.
Thank you!
Anyone using this?
When next version will be released? And current development tree doesn't consist any "replaced date parsing engine". Such engine is in `home_run` and new version of it handles same case as this monkey patch well.
If there's just going to be a million rails posts I'd rather just go to /r/ rails. And rails is just a few gems, scripts and conventions at the end of the day - there's a hell of a lot more to talk about in the wider ruby ecosystem - like how to actually program well in ruby... rails API methods and practices and rails specific libraries and extensions is a pretty narrow topic really. So to have it dominate /r/ruby just because that one framework is very popular in web dev is a shame...
I don't know when the next release of Ruby is planned, I'm not involved in that decision. The new date parsing engine is in ext/date/date_core.c. [Here's the Redmine ticket](http://redmine.ruby-lang.org/issues/4257).
&gt; Everything everyone does is about sex, gender, class and race. FTFY
&gt; (but I could be mistaken) I would agree with this assertion. Remember couchgate, or whatever? GoGaRuCo? _why was one of the people who did a 'collection of reactions from women' on one of his blogs... And that's just one of the more overt things.
I think redo and friends should be made standard expressions. I don't like how they are the exceptions and fail to parse. Sure, they can be caught there, but I really think that they should be caught later on in the execution process. What does McKeeman say about it?
Currently there is no new date parsing engine. There is currently new `Date/DateTime` engine ala home_run - lighter object, methods implemented in C. But parsing is untouched yet (and it is in ext/date/lib/date/format.rb). ext/date/date_core.c [do not define](http://redmine.ruby-lang.org/projects/ruby-19/repository/entry/ext/date/date_core.c#L4350) any parsing method. Everyone would be happy if new parse engine is included in a new version of ruby. So that, I would hope it's just matter of time.
the OP modified it to work, when celtic posted his comment the code was broken. (and it seems the OP has now completely deleted his post)
Reminder it's worth the read for folks who love ruby. I know it's been here before http://www.reddit.com/r/ruby/search?q=why%27s+poignant+guide&amp;sort=relevance
Oh, I see. I don't know that high speed generalized date parsing is really something that's worth the effort. I can see a case for having optimized parsing of common standard formats, though. (e.g. ISO 8601)
I use it cause I have a table with a log data, each row consists of three timestamps with timezone and milliseconds. [skinny_jeans](https://github.com/jotto/skinny_jeans) uses it to parse logs. There is not so much users cause ActiveRecord handles most common case manually (YYYY-mm-dd HH:MM:SS). But if your dates do not satisfy this format, you have a big slowdown.
Torquebox is a way to run JRuby apps inside of JBoss. JBoss in turn gives all sorts of fancy features (queues, scheduled services, daemons, clustering). You can get all that elsewhere, but Torquebox is a great all-in-one environment to work with. The downside of course is that java + jboss has a very high fixed memory cost. From what I've seen, it scales upwards pretty well, but you'd be hard pressed to run it in production in under a gig of ram, even for a tiny site.
High fixed cost of memory, but scales upwards well. Also you can deploy several apps into the same app server, negating lots of the fixed cost as well. But yes, java is huge.
Will Laser also complain about mismatched indentation?
Most people use virtual servers these days and you pay by the megabyte for them.
It's writing it to the end of the file because after reading the file contents, the file pointer is as the end of the file. You can use file.seek(0, IO::SEEK_SET) to go back to the beginning. However, even then if "Second Half".length &gt; "New String".length, you'll still see some of "Second Half" at the end. 
aha! this is the first real answer i have found to this question. I am at the point where i am doing &gt; f = File.open('file','r') &gt; &gt; var = f.read &gt; &gt; f.close &gt; &gt; # do stuff with var to make newstring &gt; &gt; f = File.open('file','w') &gt; &gt; f.write('newstring') &gt; &gt; f.close How would you recommend I overwrite the whole file with the new string? I am also just considering using regex to substitue what comes after my delimeter. 
No, sorry.
Laser is currently... er... *okay* at mismatched indentation. It attempts to figure it out and can auto-correct many simple situations, but the heuristic is not aware of line continuations, which makes it pretty bad. I've been putting off getting that right for a while now. Part of it is the diversity of Ruby styles, and part of it is that it won't help get my thesis signed ;-)
The flip-side of those hours is they are inadvertently family-hostile. Which probably doesn't bother you unless you have a family.
About a third of our current team is married with kids. Like I said in the previous comment, not everyone stays late, but for those of us who do it's a nice perk.
And I would bet money some of those parents feel awkward leaving two hours before you do. justin.tv sounds like a fantastic place to work. Nevertheless, breakfast and lunch is more family-friendly than lunch and dinner. I say all this not as a random guy. I'm a veteran ruby developer working in San Francisco. I just left one job for another and the lack of grown-up hours was a big piece of my decision. Do whatever you like, but I wouldn't apply to your company for this reason.
wtf is laser and wtf does he keep posting shit on it?
[LASER is a tool to analyze the lexical structure and semantic meaning of your Ruby programs. It will be able to discover bugs that Ruby only encounters at run-time, and it can discover properties about your code that no pre-existing tools can, such as whether a given block of code raises, which methods are private, if a method call could require a block, and so on.](http://carboni.ca/projects/p/laser) It's his project, that's why he mentions it a lot.
how does it compare to [diamondback](http://www.cs.umd.edu/projects/PL/druby/) ?
I messed around with this and other Ruby on Android/iPhone solutions. Most of them are really quite terrible (or just not anywhere near being usable practical products). Ruboto is incredibly immensely slow. We're talking &gt;10 seconds for the application to start up. Applications start at 2mb base, even for simple hello worlds. Storage isn't that big of a problem, but the slow startup makes it impractical. A "similar" product is Rhodes, which advertises itself as Ruby on iPhone, Android, BB, and WM using the exact same API (develop once, run everywhere)... but what they never tell you is that the entire application is just a classic MVC web framework that's wrapped inside of a WebView for the client. It looks absolutely nothing like the native environment, and is just overall awkward as heck to use. There's one other I've messed with called Android Scripting Environment (name may have changed), which is an attempt to bring several high level languages to Android, but it suffers the same blazingly slow speeds that Rhodes does (and also uses JRuby). Finding anyone else who used Ruby with ASE was basically impossible, so Rhodes seems like a better choice for the community.
My suggestion about the author : make more explicit that your article is trying to illustrate what laser is and what performance improvements it can bring.
Hi there, author here: The point of the posts aren't to illustrate what Laser is at all, that's just the context of my musings. They're mere explorations of lesser-known details of Ruby implementation, and I note my research's impact on those areas as both a note on how these details can be handled, as well as a shameless plug.
That is what home_run do. And its last version handles formats returned by PostgreSQL and Sqlite3 well.
how does laser compare to diamond back? (link given in my other post below)
I thought opening it for writing like that would replace the contents. Does it not?
I'm getting the following when I try the code, ruby 1.8.7, windows: irb(main):001:0&gt; def count irb(main):002:1&gt; (@count ||= 0) += 1 irb(main):003:1&gt; end SyntaxError: compile error (irb):2: syntax error, unexpected tOP_ASGN, expecting kEND (@count ||= 0) += 1 ^ from (irb):3 Got pretty much the same error in 1.9.1. Any ideas?
right. I just want to overwrite the second half of the file (from the delimeter) with the new string. I am looking into doing it using gsub! now...
Academic use only :(
gsub would be working on the string, not the file, so you'd be doing the same process, except with a possibility your regex would match unexpected parts of the file. For example, what if the top part and bottom part were the same: part of file # part of file You'd end up replacing the top and bottom parts, (unless you accounted for this possibility somehow). Even accounting for it, I think it makes the code more complex than your original split on # and replace the last element in the array, then re-join.
Seems like it's very raw. The doc says to use gem to install it, but it's not up on rubygems.org anywhere. Looks promising though.
It's still a work in progress, and also the gem sites needs time to update and refresh.
Yah. :(
Hasn't the bulk of /r/ruby the last few days been about all of the wonderful dark corners of the Ruby language that the LASER author has been discovering while writing this tool? It would seem to make this particular submission nearly redundant.
Hmm. When I push gems, usually they are there immediately. Has something changed in that regard over the last month or so? Otherwise, I can't wait to play with it. I was just disappointed that I read about it and couldn't immediately try it.
Oh, maybe I'm just acting off of old knowledge.
Props to the conference organizers and Confreaks for making the live stream available. We need more conferences to do this, IMO.
Hammerhead IPA @10am ftfw
&gt; the gem sites needs time to update and refresh. [It shouldn't take too long anymore.](https://twitter.com/#!/qrush/status/50611380532948993)
Diamondback ruby is an attempt to statically type all running ruby code using inference and both static and dynamic analysis. Laser is a general-purpose linter, whose goal is to find bugs of all kinds, not just type errors. My goal is to use gradual typing - optional annotations - to gradually increase the set of errors found. Laser will be completely useable (and hopefully helpful!) with zero type annotations.
I'm one of those married-with-parents guys at justin.tv. I can only speak for myself of course, but I don't feel at all awkward leaving at 6 every day. Look, I can totally understand why startups like justin.tv might *appear* to be family-hostile, but my experience is they're actually *more* family-friendly than big companies. The last place I worked had a couple of thousand employees (and served free breakfast!). Of course officially there were tons of policies in place to make sure people were treated fairly according to their life circumstances. And of course the policies weren't there to be followed. Behind closed doors, I heard far too many discussions about certain programmers getting "too old", or having a lot of family obligations. It definitely woke me up to a realization that a company never cares about you, its employee. But *individuals* at a company might care about you, and that's what's so great about startups - justin.tv included. We all know each other - more than that actually, I think most of us would say we're each others friends. That has a real impact on how people get treated, despite not having a big HR team and a ton of policies. Incidentally, sometimes my wife and kid drop by and we *all* decide to stay for dinner at the office :) /rant. TL;DR: I think justin.tv is a great place to work.
I haven't used either. I've only been using ruby since March 3rd :P
Fixed it. Adding a note. Failboat.
Ohh, yeah, I'm well aware, which is why I brought it up. Java has a very high fixed-price of memory, but the per-user memory usage is lower. So on a super-low traffic site, it's hard to justify the hosting required. But on medium to large sites, it works out fine.
Can anyone tl;dr why this is a big deal?
I didn't submit this one, in all fairness.
It is very raw. That's why I've been submitting the blog posts and not the actual thing. It's a thesis project, and so my first goal is to get my undergrad degree in June, and thus just trying to get to actual results. It does some cool stuff already, but it's not ready to demo really.
I was gonna say, I was reading those articles and was very interested, then disappointed to see it's not working yet. Needless to say I'll be watching this project as I learn ruby. It looks very cool!
yeah....not that funny
I'm getting an Internal Server Error when I try to sign up by email.
Would you believe that our sendgrid add on ran out of emails for the day? Because I sure wouldn't, but that's exactly what happened. The account owner picked the perfect day to be traveling to a conference. It'd be funny if it wasn't utterly embarrassing. We'll have you up and running shortly.
First time all the gems I use installed without any hassle. Build is really starting to get there
noob
Hmm.. I heard the drinking wasn't starting until 10:14...
Yes, because nowadays, you can install your own sendmail server and suddenly start sending mails by thousands without any risk of being blacklisted by most of the mail servers of the recipients of your mails...
Actually, the argument for places like sendgrid and authsmtp gets more powerful on EC2, because the spammers DO know how to setup sendmail and almost every EC2 provisioned IP address is blacklisted already.
I was actually curious how he found that out, in reality it turns out that hash lookups in ruby are [constant time](http://stackoverflow.com/questions/4178240/which-is-faster-in-ruby-a-hash-lookup-or-a-function-with-a-case-statement) (O(1)).
The jerk store called, they're running out of you!
Day two has been streaming since this morning. Hopefully things have been smooth after the audio hiccup this morning.
Hrm. you're not very good at hinternet.
I think you should look up [neo-liberalism](http://en.wikipedia.org/wiki/Neoliberalism)
Welcome to the humanities, circa 1995. Now available on blogs.
Sendmail is free for low usage...
sendgrid you mean?
Also see: http://www.rubyinside.com/review-of-the-rails-3-way-obie-fernandez-4080.html
wow wtf does your name mean? "BunsAndGutter", sounds like a description of a rape
Yes, sorry.
This is one of my favorite Rails books, as Obie Fernandez is great at explaining key Rails concepts and best practices. For example, even though Rails defaults to Test::Unit, there is a whole chapter on RSpec. Also much of the View code in the examples is written in Haml instead of erb. This is nice, as many prefer haml which produces cleaner, more beautiful HTML. Examples of the "Rails Way", or so it would seem. 
While not funny, it was still fairly informative.. I didn't realize module overhead was orders of magnitude worse.
[+ruby-debug](http://translate.google.ca/translate?hl=en&amp;sl=ja&amp;u=http://irohiroki.com/2011/02/08/autotest-guard-spork-and-ruby-debug&amp;ei=5fiQTfaXMYmatwf8zamICQ&amp;sa=X&amp;oi=translate&amp;ct=result&amp;resnum=1&amp;ved=0CBwQ7gEwAA&amp;prev=/search%3Fq%3Dspork%2Bautotest%2Bruby%2Bdebug%26hl%3Den%26client%3Dfirefox-a%26hs%3DEsz%26rls%3Dorg.mozilla:en-US:official%26prmd%3Divns)
This should work great with my soft realtime scheduling library at https://github.com/jvoorhis/gamelan. I originally wrote it for use with MIDIator.
Thanks, I'm glad you posted that. I will definitely put that to good use in the future. btw, I've [released](https://github.com/arirusso/midi-winmm) a Windows equivalent too. I'm working on something akin to MIDIator next...but with the ability to handle input and deal with more high level MIDI/SysEx message objects
GitHub’s pull request makes it so easy to contribute little changes to little libraries. It’s amazing to see just how much it has done.
Read the comment at the bottom about Refinements.
I remember when I was a Mormon rubyist... like Matz, Jamis Buck, and apparently Pat Eyler. I wonder if ever and how long before they will be atheists too... I'm guessing less than a decade for all three. Just thinking out loud, thinking out loud...
Funny how these always seem to boil down to "don't monkeypatch because Rails already did and you'll break Rails".
Klaus in the comments gets it right. Work with the maintainer first and fork last
… ruby doesn't have macros, so how can these be macros?
MIDIator could use some modernization, and I'd really love to see device input, output and SMF level 2 support in the same library. What do you want SysEx for?
A rather zealous title, the comments do more good than the post itself * Forking &amp; Pull Requests are your friend Mark Wilden hits the nail --- &gt;The fact that Rails itself monkeypatches in this method is indicative of its validity. &gt;Adding methods to a class is one of the hallmarks of OOP. Monkeypatching simply makes it less cumbersome. And as with all tools, it is not appropriate for every use.
I have a hardware synth studio...the SysEx flows like wine... I dream of being able to, say, create a sane ruby API for editing DX7 patches or something like that But also things like realtime MIDI recording at the command line are intriguing. Really, I have dozens of ideas that I can't see through with MIDIator. Not that it hasn't been incredibly useful to me in the past SMF isn't something I've ever dealt with but I will definitely work with an eye towards not encumbering that possibility
What an interesting debate, it's great to hear what other developers think about different frameworks, DHH validates some concerns I've always had about cucumber (I love rspec though), especially with shared_examples_for. 
I'm glad DHH stood up and said something about this; rspec has always rubbed me the wrong way, and I thought I was the only one. IMO, tests should be as basic as possible -- assert() only, in a perfect world. When you use a heavy test framework like rspec, you leave more room open for flaws in your tests, and you have a heavier "mental context switch" between writing test code and implementation code. It seems like a lot of extra work and liability for uncertain gains.
I never really understood the whole point of ridiculous test suites where there's just as likely to be an error in the mounds of step definitions as there is the actual application.
You know who says there should only be one way to do it? Python people. This is Ruby, and RSpec is awesome, so is Test/Unit. The test/unit approach goes back decades, and the RSpec approach is new and shiny. Neither has to work for everyone. That said, RSpec has, for me, has led to more complete, systematic coverage of my code. But that's me - to each their own.
Hmm. Good to know my inclination lately isn't solely me being a huge curmudgeon. I likes me some classes and some methods and for most purposes you can take your metaprogramming and your DSLs and sticks it sideways somewhere uncomfortable. 'writing matchers' always seemed like an exercise in failure of design - a 'matcher' is a method that uses assertions just like any other method, and the fact that you have to hop through hoops to make it fit seems like poor form to me.
It doesn't matter how you're writing your tests, rspec, test/unit, minitest. When you're done you need to have coverage for all your edge cases. Without this you've done something wrong. Without full edge-case coverage you'll have a harder time maintaining and improving your code. 
All I know is that rspec and cucumber are slow as hell and that makes them painful to use. On my next project I am going to use bacon or something that promises more speed.
It does matter. Because the people writing the code will not always be the ones maintaining it. And people who use RSpec tend to stub/mock a lot. They're not really testing the result, they're testing the implementation. So of you want to improve the code you have to change it in two places. It's just pure code duplication. Cucumber is a bit silly if it's just developers reading the scenarios, but at least you're testing the result of the whole stack, not just some specific thin slice of implementation.
For rspec, spork can speed up testing significantly. rspec, spork, autotest with growl notifications is pretty awesome. Stories always struck me as a bit extreme, and but if they are working for you or your team, great. 
Check out Contest. It takes Test::Unit and makes it perfect with 100 lines of code. I use it on everything. Explanation: http://blog.citrusbyte.com/2009/05/19/introducing-contest/ Github: https://github.com/citrusbyte/contest Ruby 1.9 has similar niceties baked into Test::Unit, which may be worth looking into. Contest works on 1.8 and 1.9 so I'll probably stick with it for awhile. I agree with DHH, I don't like how RSpec dumps crap into all the objects, and I abandoned it a while ago after finding out it was *causing* too many bugs with this approach. Testing should be simple, and should never create bugs from its implementation ever! Also, the documentation was fairly abysmal at the time.
&gt; And people who use RSpec tend to stub/mock a lot. They're not really &gt; testing the result, they're testing the implementation. So of you want to &gt; improve the code you have to change it in two places. It's just pure &gt; code duplication. Wow, I actually think you're on to something here.
Couldn't agree more. I am big fan of the test/unit. I find myself always debating with other Rails developer on why I don't use rspec or cucumber. I always answer "because it works". All the @dhh replies were pretty amusing to read though.
&gt; And people who use RSpec tend to stub/mock a lot. They're not really &gt; testing the result, they're testing the implementation. So of you want to &gt; improve the code you have to change it in two places. It's just pur &gt; code duplication. Thats why you should have unit and integration tests.
If a new maintainer comes along and wishes to switch to a new framework it's not that hard. It can largely be automated through a script. I've seen overmocking with many test frameworks. It's not endemic to rspec. Agreed, cucumber isn't for writing unit tests.
Dang nang, I had to fix the module name in the generated file before I could even run script/generate --help This is fragile stuff. 
This belongs in /r/rails
1. "ruby -v" should tell you what version of rails you're running. 1.8.7 is the latest 1.8 version, and 1.9.2 is the latest 1.9 version. As far as I know rails 2.3.X and rails 3+ will run on either. (But rails 3 won't run on ruby 1.8.6) 2. For rails, you broke the design pattern a bit. You should have used LiAccount instead of LIAccount. Rails uses camel case for classes, and underscores for file names, and in order for that to work, you need to name things the way it wants. Personally, I remove the helper file, since it's not usually that useful (you can always re-add that file later if you need it). The issues you're having are also platform independent (you'd be seeing them on windows or mac os x too). Keep in mind that the script/generate command is a helper. It creates some files for you, but after that, they're just text files that you maintain. I found these to be EXTREMELY helpful when learning: http://railscasts.com/ And don't give up on it. I know that if feels like rails does a lot of "magic" right now, but once you're past the initial learning curve, it's some amazing technology to work with.
I mostly use RSpec and I hardly ever use mocks. I agree that a lot of prominent RSpec users seem to prefer the isolationist approach, but not everyone does.
The thing I'm waiting for one of the Ostatus apps to do, is provide a URL field alongside the text field. It seems like 90% of what people use Twitter for is posting URLs with descriptions, yet it's incredibly crap at that because you have to obfuscate long URLs through an indirection service. Solve that problem and you'll give me a reason to migrate.
Notice the difference in capitalization between LiAccountHelper vs LIAccountHelper Possibly your problem stems from this: irb&gt; "LIAccount".underscore =&gt; "li_account" irb&gt; "LIAccount".underscore.camelize =&gt; "LiAccount" If that's the case you cannot have following captialized letters in helper names (without some hacks).
 ./script/destroy login LIAccount and try again
this belongs in r/ihatebeinghelpful
yes, what is described above is rails trouble, not ruby trouble.
&gt; So @dhh doesn't like cucumber, unless you use it for its intended purpose. Cool, me too! I'm sorry, but I've got to disagree. Off-label uses of cucumber can be *most* intriguing. Same goes for banana.
To answer your second question: * file_names are snake_cased, ex. bank_account.rb * ClassNames and ModuleNames are CamelCased, ex. BankAccount For your example, the class name would be LIAccount and the filename would be l_i_account.rb. Summation: Be more descriptive with your names -- what the heck does LI even mean?
I'd recommend using ruby version manager. Check here: http://rvm.beginrescueend.com/ This will make it easier for you to have and run different version of ruby and rails.
RVM is the most fragile and alarming looking piece of code I have ever seen. I recommend disregarding this advice and downloading the ruby source and building it yourself.
LI -&gt; Log In Thanls for all the help everyone, right now I'm about installing a Ruby plugin for Eclipse 
I must be doing something wrong. Followed the directions... gem added to gem file, ran the generator, added the js file to my layout along with latest jQuery. Seems to work great except when validating uniqueness. Having an issue getting the middleware part to work. Do I need to add something to routes or manually tell it to load the initializer or something? I see no mention of the middleware stuff in the docs. This is Rails 3.0.5 on Ruby 1.9.2 on Win 7 running Webrick. 
The general convention is to setup a more generic model such as User and give it a field like "login". rails generate model user login:string
I've never really delved into the code but when working on a system that needs to test under multiple versions of ruby with multiple gemsets, rvm is a lifesaver.
Heaven forbid we put stuff in the right place. Or read literally the first non-bold sentence in the sidebar. I was being helpful by telling him where he could get more help.
I realize that you're just starting off, and want to figure out stuff by doing it, but one of the best things about rails, is that most of the time, someone's already written code to do almost any common function. Plus since you have access to their code, you can learn new ways of doing things that you may never have thought of doing before. Here's a couple railscasts for setting up what you're probably already working on: http://railscasts.com/episodes/209-introducing-devise http://railscasts.com/episodes/210-customizing-devise
&gt; You know who says there should only be one way to do it? Python people. Small pet peeve, Python people don't say that. The oft misquoted (or misunderstood) phrase from "[The Zen of Python](http://www.python.org/dev/peps/pep-0020/)" is: &gt; There should be one-- and preferably only one --obvious way to do it. Saying there should be one *obvious* way is quite different from saying there should be only one way. 
While generally good advice, this doesn't have anything to do with the issue the OP is having. RVM is also only useful when you need different gemsets or ruby versions. For a beginner, it's totally unnecessary. The problem is that li_account_helper.rb is expecting a module name LiAccountHelper (lower-case **I**) rather than LIAccountHelper (upper-case **I**). If you really want something named LIAccount, you should do `script/generate scaffold l_i_account` (note that scaffolds are not recommended for production level stuff, but I'm guessing that's the generator you used). That said, I'd go with a more descriptive name (like LoginAccount) since it's only a few extra characters. 
Convention over configuration. If you break convention, be ready to deal with the fallout. 
Took only a few seconds for me to start using it with my existing projects. Excellent job.
+1 for keeping it simple (and fast) with Test::Unit and Contest. I also like to use MiniTest::Spec-style "must" assertions ( https://github.com/sunaku/test-unit-must ) alongside the regular Test::Unit ones.
For running tests in parallel, there is a 170 SLOC alternative to Autotest, Spork, and friends known as test-loop: https://github.com/sunaku/test-loop
Can you open an issue on Github? https://github.com/bcardarella/client_side_validations/issues Please include as much detail as you can. (examples of your validations helps) FWIW the middleware should be autoincluded. I haven't tested under Windows but I do't know what would cause it to fail.
Thanks! :)
this is the lulziest article i've read in ages. 
Nice, but I personally prefer using Sequel or Ohm in my Sinatra projects :)
"You Lose Site of Your Customer". Sorry, the grammar nazi in me cannot read any further.
well, maybe you no back up server, then when disk crash you lose site of your customer!
Thanks for the heads up. Fixed.
I don't recommend you associate with other person if you don't know him...create a project is pretty hard and serious and if you want it project grow you need associate just with the correct person, if you begin it project and you don't have funds to pay to a programmer he would be a partner, and you let him some power and you idea wil be him too...I can recommend 3 options: - get sme funds and contract a programmer...there are some webpages where you can found good programmers with experience and reputation and beginning work with him... - Better and the way I would do it...go to ruby conferences near you...met with programmers, share ideas with they and meet nice programmers, maybe your new socio and sure new friends :) sorry for my english..I'm italian...
"One brief note about architecture: since it's impractical to simply query the activity of 500 friends, there are two general approaches for building scalable news feeds: Fan-out-on-read (do these queries ahead of time and cache them) Fan-out-on-write (write follower-specific copies of every activity so when a given user asks for a feed you can retrieve it in one, simple query) This example uses the latter, fan-out-on-write. The biggest bottleneck in this scenario is, unsurprisingly, write speed. If a user has 100,000 followers and they update their status, then you need to copy (or point to) this status update with 100,000 additional writes." wait wait, why is it 'impractical to query the activity of 500 friends' exactly? That sort of thing is trivial, quick, and what databases have been optimized to do for 60 years. The idea of jamming N*X updates into the database for every X friends you have is a little ludicrous, isn't it? Beyond the question of 'how do you delete or modify all those duplicate records', you're wasting (X-1)*N bytes. 1K update becomes 1M update with 1000 followers. 100 people, each friends with each other, posting 1 1K update a day, is 100M a day in Redis. Let's say you have 10,000 people each posting 5 1K updates a day, each with 1000 friends -- that's 10,000 * 5 * 1000 * 1k bytes in Redis per day = 50,000 megabytes = 50 gigabytes per day = shard city. Or, you could index by reference, and not copy. So that's 10,000 * 1k (the update) * 5 = 50 megabytes, plus 10,000 * 1000 * 4 = 40 megabytes for the index. Or, you could have a join table like a sensible human being, so that's 50 megabytes for the message plus negligible key gain. Probably 95%+ as fast as the key solution and easier to handle.
I wish there were more of you in the ruby community.
The matchers point is dead on. Also, I have junior coders on my team. They will look at test::unit and get it--how hard is == to understand. Hanging .should onto objects that don't normally have that method will confuse them and make them waste time when the abstraction leaks.
letter to rubyists: stop writing testing libraries stop writing testing librariesstop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries stop writing testing libraries 
it's ok, just blogging as i go along.
I like that! That's a very reasonable extension to me. I may try using it.
Whoa, what is going on here?!: https://github.com/sunaku/test-unit-must/blob/master/lib/test/unit/must.rb#L34
Yeah, well, this one is only a single line of code.
I liké this idéa... I uséd to usé this féaturé on Hootsuité, but you havé to usé théir shorténér, and I préfér j.mp. I'll add a tickét for this.
lol fucking canadians gtfo out of seattle, go back to canada!!!!! lol
Gah, I accidentally reposted this because reddit search sucks and I missed seeing this post. I think this is an awesome link, though, two thumbs up. I've run into some truly terrible bugs as a result of monkeypatching -- IIRC the god gem changes 1.kilobyte from 1024 to 1, which is just freaking ridiculous and wrong ಠ_ಠ
What the fuck are you talking about?
stfu and stop posting so many stupid fucking articles. You're half-bot, half fucking retard.
 MacPro:~ rubyfan$ python Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) [GCC 4.2.1 (Apple Inc. build 5646)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; exit Use exit() or Ctrl-D (i.e. EOF) to exit &gt;&gt;&gt; ^D MacPro:~ rubyfan$ Yup... It's still douchey.
I'm really glad that I don't really see performance-vs-scalability and ruby/rails-doesn't-scale debates that seemed to overtake every ruby discussion from 2007 to 2010. Or maybe they still happen and I'm just not seeing them. Anyway, I upvoted this just because it is an interesting discussion in the comments. And the comments section seemed lonely.
Honestly, "MacRuby" sounds like a service sold by joining a no so legit Massage Parlor and a McDonald's 
I think you are mis-interpreting the approach being used. The canonical update information is only written once- a pointer to it is written for each follower.
Really liked this article. Good, thorough explanation.
That is something I call ["guiltless" monkeypatching](http://snk.tuxfamily.org/log/guiltless-monkeypatching-with-uuid.html). I use it to capture the currently running Test::Unit::TestCase through which `Object#must_*()` methods can call `assert_*()` methods.
Proposal submitted.
 Went through this tutorial yesterday. Very well done. I really appreciate the work that went into this article and the Apache Benchmark-fu that you talk about. Thanks a lot. 
I guess you would be very unhappy to hear about [AffirmIt!](http://www.affirmit.org/) then...
I installed rails and sinatra without a problem on my centOS vps but never got passenger to work... :( 
What was the problem?
Where is the standalone version?
It's there. What makes you think otherwise?
I spotted a couple of typos: 1. In the code under the heading 'Prove It' Line 16. Exi**s**ting is missing the S 2. There are two typos in the example of running the script. Line 1. expa**n**d has an M instead of an N. Line 2. As a result of my first point, exi**s**ting is missing the S
I think you misunderstand. I don't want the URLs obfuscated at all.
Ooooh. Yeah. I did misunderstand, sorry. This might be interesting. I'll have to think about it.
Neat, although the "natural language" aspect is really only helpful if your culture uses those language rules. 
Or you could just use Trollop, which has more features, fits in one file, doesn't monkeypatch any classes, and doesn't require you create a class and put all your command-line logic in it. And I definitely prefer its DSL.
The pure Ruby approach isn't so bad ;)
wrong.
Is there a way to have it do recursive directory traversal (either depth-first or breadth-first)?
Not sure what you mean; could you elaborate? Right now it *only* does recursive directory traversal. It's basically just a fancy wrapper around `Find.find`, which traverses directories. I could probably stand to make that clearer in the README.
OH! Yes, it was very unclear in the README that it does that. In that case, it's very awesome :) Does it do depth-first or breadth-first traversal, or is that configurable? Is there an equivalent to Find.prune (i.e., "stop looking further into this directory")?
Heard very good things about it as well. I'm waiting for my school library to get it.
I believe it would be depth-first. I'm updating the README right now to hopefully be a bit clearer about its behavior.
If anyone cares for a full review (I think it did well here on Reddit at the time), check out http://www.rubyinside.com/a-review-of-eloquent-ruby-by-russ-olsen-it-rocks-4432.html
Russ Olsen is my favorite Ruby book author so far... will definitely check it out
I've been working through it, it's pretty excellent so far. Very readable, very informative, highly recommended. I'm also working through "Design Patterns in Ruby" by the same author, which is equally excellent so far. Russ Olsen is fast becoming a favorite of mine, it seems.
this look awesome....hope I can use this with padrino which is based on sinatra...tomorrow I check the code :)
I actually just finished this book last week, **highly** recommended
I recommend this over devise in some situations
just saw him talk at Ruby Nation. cool guy for sure.
If you like recursively crawling directory structures in Ruby, I also recommend checking out Sam Stephenson and Josh Peek's [Hike](https://github.com/sstephenson/hike).
I purchased the book after reading this review. Loved it, and gave it to a friend who's been working with C/C++ for the last 5 years and wants to venture out into other languages. Then I just bought another copy and sent it to another friend who just started learning Ruby. I know it's probably not the best intro-to-ruby book, but I'm hoping in time they will both find the book useful.
This really should be in /r/rails but.... When is redmine going to be on rails3?
Is there really a need for this? Redmine isn't hard to configure.
I'm enjoying reading it, too. But be aware that it's not immune from "assertivitis," where the author states some sort of "rule" but gives no reasons for it. I see this happen surprisingly often in the programming world - surprising, because you'd think we'd be the last people to just accept something on someone else's authority. (One example in this book, which I mentioned on Peter's blog, is the stricture against for...in). Overall, though, a nice little book; though more for beginners than vets.
Can I suggest that folks forgo posting until they've actually read the book? Does anyone care that you're *planning* to read it?
I mean, you're right but that's why reddit has a downvote button. Your post is actually less interesting than the ones you are criticizing. 
Your post is actually less interesting than the one you are criticizing.
Hmm, I think I might buy it now that you've mentioned it. I tend to not buy any technical books that are non-O'Reilly without a recommendation from someone I know.
why? none of the good ruby books are published by o'reilly.
[feedback sound]
I was talking about technical books in general. Not *just* Ruby. Although, in my personal opinion, The Ruby Programming Language, published by O'Reilly, written by Matz and _why, is the best Ruby book in existence.
I work with him - he's an awesome guy in real life, too. Very funny, and always has time to answer my (many, many) questions.
Woah, nice. Yeah, it's definitely his personality that makes "Design Patterns in Ruby" so worthwhile.. I'd already read ad nauseum about oo patterns... to me that book was an important lesson on how to convey those ideas more naturally to other people-- much more than a programming lesson
-1, the way you said "Loved it" (at the start of a new sentence and followed by a comma) was filthy.
`for..in` should be discouraged. why? the (1) scoping rules are all messed up (2) It just wraps an `each` anyway (3) chaining with `each` is easier and looks nicer (4) But most importantly - the ruby community has decided against it - so it's undiomatic. 
Kindle version is only $17, it's a steal.
engine yard is a rip off
also, a Linux variation [here](http://www.reddit.com/r/ruby/comments/ga779/realtime_midi_input_and_output_with_ruby_for_linux/)
Hi, Thanks for the input! I too had concerns about finding the right person--that's why I wanted to meet up with someone locally to see if it was a good fit. I'll definitely look into local ruby conferences and see if I can't network that way. Thanks again! PS. your english was quite good in my opinion 
oooh, I should nab that. anyone ever figure out what happened to _why? (Also, I'm almost through Eloquent Ruby, it's definitely worth getting, it's a really easy read, don't expect wonderous awesomeness at every turn, but it's a good overview of ruby and a good reference for all the little bits of the language without going too over the top.)
Chances of me watching a regular hour+ long podcast: slim to none, and slim just left the building.
Wow that was quick! I actually installed Ubuntu to test out the Linux version, checked my RSS after it was finished and saw this XD
It really is a great read. I first read the Pickaxe back in like 2004 when I got sick of Perl and wanted to replace it. I didn't find it too compelling a book, and if anything, rather patronizing. The reason The Ruby Programming Language (which I noticed is actually in the r/Ruby sidebar) is impressive is because it explains *why* things are the way they are, rather than just how to do things. And it goes through *everything*. I would say I didn't "understand" Ruby until I read it. (Despite being so complete, it's actually rather concise and an easy read.) &gt; anyone ever figure out what happened to _why? _why asked for one thing: privacy in regards to his identity. Turns out some of the Ruby community hunted him down and found his real identity, and posted it online. He promptly deleted his entire web presence. I couldn't find Eloquent Ruby on the Google eBookstore, so I guess I'll have to pick it up from the local B&amp;N. I read a bit of the online preview and it looks fun. Anything that expands my abstract thinking in Ruby is wonderful. My code always ends up too Perlish (concise, short, and overly too "clever"), so maybe this will help.
"Podcall" is potentially the worst, most nonsensical word I've ever heard. "Callcast" might have been a slightly worse choice, but either is unnecessary.
I knew someone exposed him, i was just curious if anyone ever found out where he went. Dude's like a ninja. In any case, it's well worth getting a dead tree copy, I think, It's pretty light for it's size, and the content makes it one of those, "Grab whenever I have to do something and want to make sure it's good" reference books.
Oh, I bet after the fallout, people left him alone. But yea, he *is* an epic ninja. I'll probably pick it up at the end of my book queue. Sooo much to read...
Meh. test-unit 2, or Rails' version of test-unit, let you use declarative syntax. The problem with rspec is that I'm constantly having to lookup which "be_xxx" methods are legal, and twisting my test description, and code, to comply with rspec. I find test-unit much more flexible in this regard.
Completely agree. I mostly learned Ruby by writing a compiler in it for University and using the Pickaxe as a reference, picking up the various language features as I went along. Because of this, I never really felt like I'd got a full overview of Ruby and, more importantly, the way a Ruby programmer thinks. When I picked up my copy of "Eloquent Ruby" I was on chapter 3 of "The Well-Grounded Rubyist", and it was an absolute godsend. I remember eyeing up Russ Olsen's "Design Patterns" book a few years back and being amazed at the quality of writing and the simplicity and immediateness of his code samples. "Eloquent Ruby" retains all those wonderful qualities as the author walks you through an impressive number of Ruby best practices, code standards, must-know libraries in a series of 31 short chapters. I read the entire book front to back in a couple of days, which is an absolute first for me as I usually take months to finish technical books. This book really deserves all the praise it's been getting, and I can't wait to go out and build something great with all the knowledge it's given me.
It should be noted that Unicorn is explicitly designed *not* to handle use cases like this. Unicorn is designed to be put behind a buffering reverse proxy like Nginx (see the Unicorn website's design decisions section). This design decision is mutually exclusive with streaming responses. It still works, but it doesn't work very well because I/O concurrency is limited to the number of Unicorn workers. Incidentally Phusion Passenger "suffers" from the same "problem" (in quotes here because whether or not it's a problem is subjective), at least at the moment. Phusion Passenger's design doesn't differ that much from Unicorn's, it's just that Phusion Passenger hides much more moving parts from the user than Unicorn does.
I agree. It may be, as the author asserts, that RSpec discourages the writing of unidiomatic Ruby - but this comes at the cost that RSpec itself is not idiomatic Ruby. And I'd rather test the methods I've actually defined, not a munged transform of the name. More practically, I find that RSpec is not consistent enough that I can write it first time. It's easy enough to read, but I never know whether to write `.should be_true` or `.should_be true` or `.should == true` or `.should eql?(true)` or …. If I were more familiar with it, maybe I'd remember - but that doesn't seem like a useful place to focus my attention.
Why does the reverse proxy need to buffer? It looks like [nginx supports chunked upstream servers](http://wiki.nginx.org/HttpChunkinModule), and [with proxy buffering disabled](http://wiki.nginx.org/HttpProxyModule#proxy_buffering), we can get page responses back to the user faster. Unicorn would of course use closed connections on it's end. But that doesn't prevent nginx from dealing with persistent connections. That said, for infinite streams, I would probably use rainbows and not unicorn. :-)
1) Could you explain that part about the scoping rules? 2) All Ruby code just boils down to machine language anyway. 3) If you chain, then use #each. I don't think I've ever chained off of #each, though. 4) That's the crux - basically equivalent to saying it's not *fashionable*. I use for...in because it's more intention-revealing and is easier to type. 
I can't imagine *any* post less interesting than "I'm definitely going to read that book!". My post was self-evidently more interesting to you, because you took the time to respond to it. But yeah - like excessive quoting, this is a battle I won't win. I should just downvote. Point taken.
scoping rules: for i in 1..10 y = i end y #=&gt; 10 (1..10).each do |i| y = i end y #=&gt; NameError Basically, the body of a `for..in` does not define a new scope. 
That looks great, I've been casually thinking about using Mac OS X Server in production, I might take the idea a bit more seriously now. 
I don't think this is made with production systems in mind, it's just a way to simplify development a bit.
Thanks for the information (really). But it's hard for me to imagine writing code where that would matter. I would say any such code is suspect on its face.
I didn't say reverse proxying automatically implies buffering. I said Unicorn is designed to *only work well* with buffering. Streaming responses is behaviorally equivalent to an extreme form of slow clients, exactly the thing which Unicorn is explicitly designed not to handle.
Correct. Pow uses Nack, and the Nack website says: "nack was design to be used as a local development proxy. You probably don't wanna try running a production app on it. I'm sure its slow too so don't send me any benchmarks."
I wish this was out a few weeks ago when I decided to convert my whole OS X system over to Nginx/Unicorn for development. I wonder how it handles SSL.
It doesn't look like it handles SSL at all.
Huh... why would they do this, doesn't Passenger Lite provide the same thing?
Yeah it doesn't. I think I'll just proxy it through Nginx for some stuff and the rest I'll leave running on Unicorn.
"As a website, one of our biggest fustrations is downtime. And as a startup, we want to deploy all the time. We hate having to wait until later in the day when our traffic is low, and even then we’re still disappointing customers (if only for a few minutes)." Wait, what? You've only got your app on 1 server? We have a wimpy non-critical app and even *we* have our app on two servers with a load balancer. When we want to deploy we just quiesce one, let all the traffic redirect to the other machine, and deploy. Once that's done, we repeat the process for the other machine. Only takes a few minutes. What am I missing?
We do have multiple servers, but in that case, you need to have load-balancers that fail-over automatically on port health failure. We're just using simple nginx front-ends for our load-balancing. (because we're cheap). Did you automate this process for your setup? But, even if we did have that scenario, we'd be at n-1 capacity each time while we deploy. With the hot-deploy we need to ensure that we have extra RAM to swap in the new instances, but that's about it. And startup time is much faster because of the pre-loading. 
Not everyone has multiple servers, and there's nothing wrong with that. Edit: unless you're 911
N+1 redundancy is great if you can, 2N redundancy is even better. But, it's all about scale. We actually have quite a number of various servers for dedicated purposes, but for our front-end webservers, we have two that load-balance &amp; serve requests. I've also run other sites on single virtual instances and they've been fine as well, but they get far less traffic.
Two questions. 1. Why unicorn and not passenger. Passenger gives you all that too and also plays nice with your PHP sites too. 2. Is there any docs on using unicorn to manage generic daemons and not rails sites? 
This is cool, and I would definitely have a use for this, had my client not abandoned HBase due to its stability issues.
This has little to do with rails and less to do with ruby programming. I'm tempted to remove it, but I guess it still discussion worthy. &gt; As part of the effort, we launched a new real-time search engine, changing our back-end from MySQL to a real-time version of Lucene So they switched to using Apache Solr, A+ twitter; That took awhile. For ruby, there's [rsolr](https://github.com/mwmitchell/rsolr) and [sunspot](https://github.com/outoftime/sunspot) which are awesome. &gt; we launched a replacement for our Ruby-on-Rails front-end: a Java server we call Blender. 3 x faster is fair when you switch out a framework with a custom server, but I don't get how it correlates to rails or ruby programming.
I'd be curious to know what the hell sort of back end architecture they have that requires them to perform sorts on directed acyclic graph trees in order to determine the proper next step after a search. That sounds like the mother of all technical debts.
Our egos can't help but be bruised whenever we can't achieve roflscale.
very bad title Twitter Search is now 3x faster. How? They switched the search front-end from "RAILS" to Java. ruby != Rails rails isn't the faster ruby framework but I think than any interpreted language like ruby or python would have problems for good scaling a soooo big app like twitter....so...behind the sensatiolalist title is is something we would expect unfortunately there are some other ruby options for critical process like EM golliath but they preferred java.....
The search interface itself is usually fast enough for me, but it's frustrating that results only seem to include tweets from a week ago at the oldest. I'd love to see some improvements in that area, as well as in the one where you can't use the API to access your oldest tweets if you have more than 3200 of them.
&gt; very bad title Twitter Search is now 3x faster. How? They switched the search front-end from "RAILS" to Java. ruby != Rails If you're going to be pedantic and say that a language isn't a web framework, maybe you shouldn't be saying "java" in there.
Passenger doesn't support zero downtime deploys.
Sure it does. Where did you get that idea from?
What did they move to.
Downvoted for grossly misleading title. They switch a lot more than the language - they switched the architecture (to NIO), which is likely to make a much larger difference than basic language speeds do. The linked article is nice and juicy - this reddit posting is just rubbish. 
the [TSort](http://www.ruby-doc.org/stdlib/libdoc/tsort/rdoc/classes/TSort.html) lib in ruby is interesting. I keep trying to find a reason to use it for something.
I have no experience with Ruby or the Rails framework, but I do write Java. &gt; The front ends ran a fixed number of single-threaded rails worker processes, each of which did the following: &gt;+ parsed queries &gt;+ queried index servers synchronously &gt;+ aggregated and rendered results and their new Java back end, *Blender*, is... &gt; + Creating a fully asynchronous aggregation service. No thread waits on network I/O to complete. &gt; + Aggregating results from back-end services, for example, the real-time, top tweet, and geo indices. &gt; + Elegantly dealing with dependencies between services. Workflows automatically handle transitive dependencies between back-end services. Why did they specifically use Java to implement these features? Since I don't really know all to much about Ruby, or the Rails frame work could someone explain this to me? I know I could use google for a quick answer, but I would like to hear it someone who writes Ruby and/or uses Rails. From what I read, it seems like they did *a lot* more than just "switching from Ruby to Java". 
Yeah, great programming link, but bad title and wrong subreddit. Can't decide whether to up or down vote. Argh!
http://groups.google.com/group/phusion-passenger/browse_thread/thread/23ef0cf314115609/ad6dbbf0f6c236e5?pli=1
&gt; front ends ran a fixed number of single-threaded rails worker processes Rails has been thread-safe for a few years now right? I'd be interested in the speed gain merely switching to thread-safe mode.
&gt;but I think than any interpreted language like ruby or python FYI, the first time you run a python program it gets compiled to a pyc file. Ruby doesn't do this. I wouldn't put the two languages in the same bucket. Maybe better to compare Ruby to PHP than Python IMO. 
Where it should be - not on the web.
In general you dont't gain any speed. You merely save some resources like memory usage. Threads, whether we're talking about Ruby threads or real OS threads, aren't faster than processes, in so far the bottleneck isn't caused by things like I/O concurrency limitations.
Yeah, I guess the actual latency wouldn't drop any, but you'd probably get X more requests per machine.
Silly question, why shouldn't it be on the web?
Using Python would be analogous to using Perl for web front end stuffs. They just weren't designed for it. Doing heavy back end lifting doesn't make sense either - using C/C++ for heavy load sites is pretty much standard practice. Modern languages and frameworks (like RoR, Grails, etc) are much better choices for front end/DB stuffs.
Ruby web frameworks are traditionally designed for the what I call worker I/O model. In other words, a bunch of processes or threads listening from an abstract queue (usually a server socket). Each process/thread processes each request serially. This is a pretty simple model and proven model and works well for most web apps. Twitter search is an exception in the sense that they not only have to handle lots of users but also that their search service depends a lot on querying various search subsystems that can take an arbitrary amount of time to respond. Their search service is both CPU bound (rendering html and the like) as well as I/O bound. The worker model is very very well-suited for CPU-bound workloads but not as well for I/O bound workloads. The latter is better handled by an evented architecture. At the moment Thin (edit: i forgot goliath as well) is the only Ruby web server that supports evented I/O. Rack, the standard Ruby web app gateway interface, is not designed with evented servers in mind although there are a few non-standard extensions, of which I do not know how good they are. Cramp is the only Ruby web framework that I know of that's designed to work in an evented manner, utilizing said extensions. All in all writing evented web apps in Ruby is *possible* but support for it is not nearly as good as with the worker model. As far as I know the Java ecosystem isn't that much better when it comes to framework support for evented systems. All the facilities that I know of are fairly low-level, you have to write a lot of things yourself. But it looks like the Twitter team chose to do just that, probably because they're *also* CPU-bound. Java is faster than Ruby at memory operations and raw code execution speed. It is also likely that they chose Java because their team was already familiar with Java. All in all, no, this doesn't mean "ruby doesn't scale". It does mean that Twitter's unique workload makes them hit on Ruby's limits earlier and that at their scale it makes sense to use Java. I think most programmers should refrain from ditching Ruby in favor of Java/Scala/C++/etc just because it's faster. The answer is not that simple and the people who do that will likely find a nasty surprise in the form of ultra-slow development or buggy systems that also aren't as fast as they thought it would be.
Only if you were memory or I/O bound. If you were already saturating your CPU then threading will not help.
That actually needs some more clarification. Phusion Passenger for Apache and Phusion Passenger for Nginx have no builtin support for rolling restarts. However, it is possible for the user to implement rolling restarts with Phusion Passenger Standalone, by first starting a new instance, then update the web server to point to the new instance, then stopping the old instance. This is exactly the same method people use to implement rolling restarts in Mongrel, Thin and Unicorn. When it comes down to it, pretty much everything in this article applies to Phusion Passenger Standalone. Unicorn does not have an advantage over Phusion Passenger Standalone as far as the content of this article is concerned.
If you use Rubinus it does.
Wow, that was incredibly insightful and for that I thank you. &gt; At the moment Thin (edit: i forgot goliath as well) is the only Ruby web server that supports evented I/O. Rack, the standard Ruby web app gateway interface, is not designed with evented servers in mind although there are a few non-standard extensions... Is there a particular reason for this? or has it just not really been an issue until now? &gt; As far as I know the Java ecosystem isn't that much better when it comes to framework support for evented systems. All the facilities that I know of are fairly low-level, you have to write a lot of things yourself. Yes, this is true. I have to write pretty much all my own event handling methods. The methods themselves are, however, defined by interfaces. It's not all that bad though. &gt; The answer is not that simple and the people who do that will likely find a nasty surprise in the form of ultra-slow development og buggy systems that also aren't as fast as they thought it would be. I laughed when I read this, because I have demonstrated some Java applications to other developers and they have said exactly this, "I thought it would be a little faster, [staring at my code] why is this slow?" I feel like I should look into Ruby, but I don't know that I would ever use it. I mostly use C/C++/C#, Java, Perl, and I am trying to learn Python. Again, many thanks for your reply.
One learns a lot by developing Phusion Passenger. :) Apologies for the typos in the last post, typing long texts on the iPad really sucks. &gt; Is there a particular reason for this? or has it just not really been an issue until now? Ease of development. When it comes to web apps, evented model systems are harder to write than worker model systems with linear code. That's why most frameworks are not evented. Although nowadays there exist techniques to make evented Ruby code *look* like linear code (EventMachine + rack_fiberpool), but I'm personally a bit skeptical about that because they hide concurrency problems, giving the programmer the illusion that everything is ok. The place where Rails came from, 37signals, has historically not needed a lot of I/O concurrency. Their entire application suite's workload falls into the category of traditional CRUD. As long as they keep their databases fast (which they do) they're not I/O bound so they don't need heavily multithreaded or evented apps. Most Rails apps also fall into this category. This is the reason why Phusion Passenger also implements the worker model and is not evented. Although things are changing now that things like WebSockets and querying of external HTTP APIs are becoming increasingly popular. I'm actually considering making Phusion Passenger evented, but there are some reasons why I'm reluctant to do so. See http://news.ycombinator.com/item?id=2427204
1. First, our previous setup was nginx + mongrel where we were using mod_proxy, so it was a pretty easy migration to unicorn by reducing the proxy down to a single port. Second, passenger supports software reloading, but it doesn't pre-load the new binary. So, you don't lose any requests from the deploy (unless you new binary fails to load), but requests can queue inside nginx/apache while the new binary is being loaded. As a result, your site will appear to be slow a number of requests. Our goal was that users had no degradation in site performance while we deployed. Also, I do run all of our apps on passenger on my desktop &amp; laptop for development. One of the major benefits there is lazy startup and cleanup. Makes life much easier than having to go stop or start servers when you want to make some code changes. 2. You can use any Rack application with unicorn. You just need a unicorn config file and a rackup file. http://unicorn.bogomips.org/unicorn_1.html http://unicorn.bogomips.org/Unicorn/Configurator.html 
That's pretty cool - I didn't ever consider using Phusion Passenger Standalone. But, how would you flip from one instance to another? I know that unicorn has a single master working that listens on a port, then routes requests to the workers. The master is responsible for watching all of the child processes and only serves requests to the children (via sock) if they are up and running. During a reload, the master spins up new workers, then once they are ready, just begins routing new requests to the new workers, and kills off the old workers. Since this all happens within unicorn, there's no lost requests or delays (unless something goes very wrong and the master dies, but I'd say that's pretty rare).
Phusion Passenger Standalone works more like the traditional Mongrel Cluster or Thin Cluster way. Suppose it was already started on port 3000. You start a new Phusion Passenger instance on, say, port 3001. The web server has a reverse proxy rule to localhost:3000, so you replace it with localhost:3001 and restart the web server. You then wait 1 second for the web server to reload and stop the instance that was running on 3000.
I repeat: do not use jruby with appengine-jruby. It will not work properly. Use MRI.
Stop saying 'stuffs'.
&gt; I feel like I should look into Ruby, but I don't know that I would ever use it. I mostly use C/C++/C#, Java, Perl, and I am trying to learn Python. i came to using ruby in place of perl, initially because I wanted to compile to an exe for a windows project, and ruby's exe generator was free whereas perl's was not. After I got used to the syntax (do/end really threw me for a while, until i had to do some lua), I found it to be simply a better perl. You can still see a fair bit of perl under the covers if you dig deeply enough. I've tried python a few times, but everytime i try it I feel like i'm stepping backwards in terms of features I really enjoy using. Multi-line blocks are awesome in ruby, as is the syntax for inserting variables into a string.. Also, rvm is AMAZING - it allows you to manage multiple versions of ruby and multiple copies of library (in ruby called "gems") dependancies. anyway, that's my two cents :) 
Stuffs.
Because for high performance servers you certainly don't want the fastest back end software on earth, right? I understand if we're talking about small sites, but I'm making the relation to large scale servers. Every clock cycle counts. Interpreted languages just don't cut it in those scenarios. Fool.
They are much better choices for *front end* things because of the simplicity involved. You can handle a shit ton of front end requests fairly easily with most scripting languages or frameworks. The back end heavy lifting is what needs to be careful about processing overhead. Fool^2^2 
&gt; I forgot that ruby was designed for the web. In this context, RoR. But continue to take the discussion out of context if you like.
Looks like all the work is just delegated to the method_source gem. Nice extension of that gem though.
yeah i wrote that one too ;)
Ha. Very cool. I just read the source code for it. I've written almost the same library over and over for projects for setting up custom spec runners for distributing specs across multiple machines pre-checkin. Seeing as how I'm too lazy to package it and share, I'm gonna just bum it off of you from now on.
No, I'm saying the appropriate front end framework is appropriate for *front end business* and the appropriate back end language is appropriate for high performance back end computation. This discussion has little to do with language and everything to do with appropriate use of generic languages.
Very cool. I wish they hadn't used another clown for the example though. That shit is creepy.
While I appreciate the intent, articles like this really just perpetuate the gender divide in programming. We really ought to stop treating female programmers like they're magical unicorns. Suggestion: :s/Chicks/Programmers.
Then shouldn't the interviews be generally in proportion to the demographics of the community? To do otherwise seems dishonest. Also, if the community is largely men, there would be more skilled men to select for interviews, so if one were trying to make it 50/50, they would likely have, on average, more skilled men (if they selected the best candidate available), perpetuating the gender divide in programming. Or you could make some informative comment about her as a programmer instead of caring about semantics. Maybe you ran into her in #ruby and she helped you out with a problem, and you could make a nice comment about how helpful she was, or you could respond to something she said about being a programmer in south america. Sure, she got the interview partly by having the right thing between her legs, but that isn't what the interview was about.
I think you misunderstood my intent. My point was only that the article title needlessly brings gender into the equation. The fact that she's female has little relevancy to the content of the article, as you said, "[her gender] isn't what the interview was about" - so why not just title it, "Programmers who rip"?
Because it is a series of interviews with female programmers. It's just being honest about its bias. My only fault with it is that they didn't dig into some technical stuff, mainly because that is what I personally find most interesting about programmer interviews.
I figured given the plurality of "Chicks" - but I don't think it negates my statements. Regardless of the fact that there are fewer female programmers than male, if we treat them (as I stated in my original comment) like, "magical unicorns", we unconsciously draw a line, even if the effort was in good faith. It makes it appear that we're interested in a given individual because of their gender, and not their contributions, this can and does have several negative, non-obvious repercussions. As I said before, I realize that's not the intent, and I do appreciate what they're trying to do, but it's much better in the long run to not single out groups (or preface with qualifiers - "girl gamers", "black scientists", "Inuit doctors"). A large part of why the internet (read:anonymity) is great is because people are forced to judge each other on action and words and not any preconceived notions as to what, or who the others are.
Do you think that they should have interviewed people based on their skill and not gender, or obscured the fact that they were selecting interviewees based on gender?
so, let me get this straight, there are no tests and it doesn't work with rails 3?
There is now full Rails 3 support out of the box. Now works with Tilt, Sinatra, Padrino, Rails 2, and Rails 3. Full test coverage is in a local branch and will be pushed tomorrow.
some first impressions. if i'm missing the point somewhere, let me know... the usage ends up begin a bit verbose. you have to create a dummy table for each enum, and then do another call to populate it. then you have to add model code for the places you want to actually use it. that's way less DRY than something like: validates_inclusion_of :hello, :in =&gt; ['oy', 'que tal', 'hi']. also, what's the advantage of creating this dummy enum table rather than using an actual enum (mysql) or a varchar with check constraints (postgres)? without automagical foreign key constraints (which would be a can of worms to implement), it really doesn't seem that useful. if your goal is "keep it in the database", you should go full-bore, rather than a halfway solution that creates additional overhead for the person using it.
I have added added full Rails 3 Support and XML Support. Tests are coming tomorrow.
RVM is fantastic. I just started using it about a month ago, and now I'm not sure how I got along without it. The gemset feature is probably my favorite. It's nice to be able to separate the gems for various projects. It makes trying out new projects really easy since I don't have to muck up my global gem space with 10 different versions of gems I'll only use once.
there are some way install it after I've installed the different versions of ruby?...I wish try it but I've installed ruby 1.8, 1.9 and jruby
rainman don't care than python compiled to a pyc file or not...this is a myth aorund python...this is a reason because I don't like many python books..they create many myths... than It compiled do it a bit more faster but it's not a big difference...don't compare python with compiled languages because it's crazy..python and ruby have similar speed and similar memory consumption, of course, if you use psyco is other history...it's really fast but I don't know if it's supported for django now...when I worked with Django even the latest version for python wasn't supported
first
I don't think you'll have any problem. Just follow the standard installation procedure. 
what wold be nice is if rvm could actually fix bugs instead of instroduce them like those crappy __rvm_rm_rf bugs that dont go away even with extglobbing turned on despite wayne saying otherwise.
This is correct. RVM uses its own directory hierarchy under `~/.rvm`, and manipulates environment variables to ensure that the desired interpreter and libraries (gems) are used. It will co-exist peacefully with any other installed interpreters.
just to give more detail, rvm puts everything in ~/.rvm and won't mess with your other installs. Once it's installed the 'rvm' command is used to switch your path to different rubies. If you want to use a non rvm ruby just run '$ rvm use system' and it will switch the path back to your non rvm ruby. I.e. whichever ruby your PATH pointed to before. 
... in bed!
For Fixnum operators? Yes I would. For other more complex object types? Definitely not.
Has anyone figured out how to install macruby? I installed LLVM like it asked and I've been unable to install macruby-head and the macruby-0.9 installs but fails at runtime.
Agreed, I don't see what has Nils so upset, he can turn off the option if he needs to.
I am curious about this: "Begin by using #describe for each of the methods you plan on defining" I thought BDD was more about actions a user is going to take and real language. I would expect one would write their desired action then when coding to make the test pass... come up with a method?
Or, you know, you could just stop writing specs for controllers and views because your cukes are already exercising those anyway.
and wayne is really awesome and accepting of patches to rvm.. I had a problem where at work I couldn't access git:// because of my firewall.. I submitted a patch to wayne to fallback to http:// and he accepted it with only minor changes.. Now i can use rvm at work all I want :)
The hilarious part is how the guy refuses to explain why he would want to do that. We only figure out why late in the comment thread when someone guesses it was "for a DSL." I don't really see the point in being so obstinate, it certainly doesn't help him to convince the JRuby folks that it needs to be fixed.
Why you shouldn't use RVM: * It puts files somewhere and then doesn't remove them when you implode RVM, causing you to get numerous errors in your shell. * Multiple rubies are not supported by all Ruby-servers (e.g. Passenger can only use one). * Documentation is inconsistent. Verdict: sure, use it on your developer machine. I wouldn't put it on production machines just yet, though.
You are correct. This is more about unit testing than BDD.
I'm all for re-opening classes in Ruby. That's part of why I love Ruby. There are some things though, like messing with math operators, that I wouldn't mess around with. I'm not sure what Nils is doing, but I'd argue there's likely a better way to do it.
the same I said to rainman...ruby and python today have similar performance and similar memory consumption...the same happen with django and ror...yes..python has other faster frameworks...ruby too...so..if you are thinking python is really fast and ruby is a turtle...maybe you're reading post and articles 2 years ago....:D...I'm a ex pythonist...I hope node.js will be the next internet revolution like rails was...
This optimization breaks existing *correct* code without giving any warning or error. It should be off by default, like any overly aggressive optimization.
It should be fixed because the Ruby language is highly dynamic, this sort of functionality is appropriate for a highly dynamic language, and it's worked in every previous version of Ruby. There are ways to implement optimizations like this that *don't* break existing code and screw up the way the language is supposed to work.
If you don't like an implementation of Ruby, don't use it. Ta da.
[ncurses for ruby](http://ncurses-ruby.berlios.de/) Good luck!
Hmm, may I ask why you're considering a .jar to be more cross-platform than a Ruby script? You can generate standalone executables from Ruby codebases. 
&gt; I know, I know. "I'm writing a roguelike" =&gt; "Neither am I..." What?
The original is "I'm writing a novel" - "Neither am I". It's an old joke about the enormous disparity between the number of such projects that get started, and those that actually get finished (or even significantly worked on)
A lot of people start but nobody finishes ;)
Aaah, I see :-) Cheers!
A-ha!
&gt; Multiple rubies are not supported by all Ruby-servers (e.g. Passenger can only use one). http://blog.phusion.nl/2010/09/21/phusion-passenger-running-multiple-ruby-versions/
Thanks, that's interesting. It's hardly straightforward though.
crossplatform? does this work in windows?
how do executables compare with the original scripts on speed?
With time, maybe you'll see why he refused. If he started down the path of "why I want to" that would be the topic, instead of "why jruby should stay compatible instead of becoming merely ruby-like. Worse, if he had followed that line of thinking, charles might consider it "resolved" when people provided work-arounds for the poster's problem. Discretion is the better part of valor, and "why" was irrelevant. The poster, in my eyes, was not being obstinate--they were demonstrating wisdom in action.
This isn't about whether messing with math operators is a good idea. It is about whether Jruby should be as compatible as possible. I for one, would be FAR less likely to use it without cross compatibility.
It should work but it's a pain. I couldn't get it to work properly las time i tried. I have since given up on using ruby for this.
You can always emit raw ANSI if you're feeling masochistic. That's really cross-platform.
Identical. Often it's the script bundled up with an embedded interpreter. A more accurate term is "self-executing" which is not to be confused with "compiled to machine instructions".
That is what I had confused it with, thanks for clarifying.
I should think so... Ruby is crossplatfrm, and http://pdcurses.sourceforge.net/ has a Windows implementation of Curses (there are probably others out there, that's just the first thing that appeared after a quick Googling.)
yes ruby is cross platform but there are still a tonne of gems that only work on specific platforms.
i guess i'm not a rails dev because i find coffeescript ok?
They should be about the same. Essentially, your application is packed into an executable along with dependent libraries and the interpreter, so users don't have to have ruby installed. 
As do I, friend. As do I
Somehow this made me think of the last episodes of Berserk...
What's wrong with coffeescript?
[Here you go.](https://github.com/rails/rails/commit/9f09aeb8273177fc2d09ebdafcc76ee8eb56fe33)
thanks for all answers...I' going to install it and maybe try rubinius :D.......
thanks for all answers...I' going to install it and maybe try rubinius :D.......
Nothing, the problem people have is making it the *default* over straight JavaScript.
Except you can still use straight javascript *exactly as you would before this change*. Don't want to use coffeescript? Don't add any assets whose filenames end in ".coffee". It's not too hard to avoid. If you have .js files, they will in fact still work.
Why didn't they choose RubyJS? Also, what about debugging support?
it's just being added as a required dependency for rails. So you can be sure that it's there if you have any rails installation. The only possible downside is the ~400k extra download it is. You don't have to use it.
That doesn't exactly answer the question, unless you want to pick out specific and valid points from all the nerdrage.
wow, im going to check this out. does it do traps as well?
How did so many people get the impression that the CoffeeScript gem prevents you from using normal Javascript? Does the HAML gem completely replace HTML/ERB? Does SASS mean you can't use regular CSS? The comment thread for that commit made me sad. 
For uneducated folks like myself: &gt; CoffeeScript is a little language that compiles into JavaScript. Underneath all of those embarrassing braces and semicolons, JavaScript has always had a gorgeous object model at its heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way. [Official website](http://jashkenas.github.com/coffee-script/), [Wikipedia](http://en.wikipedia.org/wiki/CoffeeScript)
&gt; Since the block argument cannot be accessed as a Proc object via a standard Ruby interface (to the best of my knowledge), Does this count? &gt; def f ; Proc.new.call(42) ; end =&gt; nil &gt; f {|n| n + 42 } =&gt; 84
Wow, there is some priceless diatribe (and images) in there. And Reddit references.
I knew I'd missed something! `Proc.new`, of course. Luckily, handling `Proc.new` is no more difficult than handling explicit block arguments, except of course that `Proc.new` could be aliased as could `block_given?`.
no traps yet. I'll probably be adding them soon, and of course, I accept pull requests ;) 
Upvote for legitimate question.
CoffeeScript has a lot of momentum at the moment. Note the switch to jQuery too - same deal.
 coffee&gt; squares_upto = (upto) -&gt; console.log("x: #{x}\tx squared: #{x * x}") for x in [1 .. upto] function (upto) { var x, _results; _results = []; for (x = 1; (1 &lt;= upto ? x &lt;= upto : x &gt;= upto); (1 &lt;= upto ? x += 1 : x -= 1)) { _results.push(console.log("x: " + x + "\tx squared: " + (x * x))); } return _results; } coffee&gt; squares_upto 5 x: 1 x squared: 1 x: 2 x squared: 4 x: 3 x squared: 9 x: 4 x squared: 16 x: 5 x squared: 25
Im going but my laptop is far too dear for me to want to spill beer over =) Anyone wants to test out my live blogging app at the conf? Written in rails obviously.
http://www.roguetemple.com/forums/index.php?topic=1434.0 From the final post on the page: There is a precompiled ncurses package for Ruby 1.8 at ncurses-ruby.berlios.de/ and it works under windows fine. The problem is that there is no same precompiled package for Ruby 1.9 and I can't build it from source with DevKit (it fails with strange errors, not trivial 'header not found' in the first post but much stranger ones). So I must use Ruby 1.8 (which is relatively slow) or use 'curses' module instead of ncurses (it works, but without 'keypad' function i have no idea how to process special keys (such as arrows)). Are there any other solutions?
Yay, I no longer have to work on https://github.com/koudelka/snmp4em :)
hah! well, maybe.. but I bet there are people who prefer a pure ruby implementation. I was using snmp4em quite successfully until I needed snmpv3, btw ;) unfortunately, my options were.. implement v3 myself, or use the c libs. I went with the path of least resistance (to me at least). Not sure whether that will be acceptable to the average user. 
It'd be great to see some benchmarks, too. I'd love to see how it stacks up against the ruby implementation. :)
I'm still irked that you're using a restrictive license.
I'll go with you if you buy me a ticket :)
I certainly understand that; I'm looking forward to sharing this with the Ruby community soon. However, I'm really not comfortable assigning a liberal license to something I haven't released (and with the code still full of hacks): impressions matter, and anyone who ran Laser on a serious, commercial application would think it is trash. Especially since its use is completely undocumented. As it stands, none of the interesting work (such as this post) is even used by the laser binary. The repository is primarily there so others can follow development, and I write my commit messages accordingly. Most importantly, the terms of my thesis require my work to be nearly completely independent, so typical open source engagement could stop me from graduating.
&gt; However, I'm really not comfortable assigning a liberal license to something I haven't released (and with the code still full of hacks) Not really a valid reason to use a restrictive license. &gt; Most importantly, the terms of my thesis require my work to be nearly completely independent, so typical open source engagement could stop me from graduating. Then simply don't publish it. Finish your thesis 'unengaged' and publish openly at the end. As it stands you're no less at risk of me making some suggestions and ruining your thesis, *and* you are frustrating my desires to use such a tool for practical purposes.
I think this should be posted on /r/php. Now it's like preaching to the choir .)
Interesting. I originally was just going to use my private git server, but I thought others might be interested in following the repo until I had something solid, since I can only do blog posts sporadically. I certainly didn't want to piss anyone off... I'm sorry about that. I'll do some research, and reconsider the licensing over the weekend. Deal? Edit: there's no "risk" I'm concerned about, because I'm not going to take other's work. If you start PMing me algorithms, I can just not read them, and I won't really feel bad. But if I encourage patches/pull requests, I'd have to ignore all of them, and the codebase changes so much they'd be worthless when I could consider them. I'd be wasting anyone's time. That's what I meant by "open source engagement" being a problem: I can't read or accept contributions. The middle ground, I guess, is to just state that up front for the next 6 weeks, pick either the Ruby License, GPL, or GPL/Commercial dual license, and stick with that.
I would be very interested in testing your gem, under those conditions, and would reserve feedback until post-thesis. Good luck.
This is more than Ruby powered: &gt; The industry’s first open platform as a service. Run your **Spring**, Rails and Node.js applications. Deploy from your IDE or command line.
Awwwwwwwwwwwwwwwww yeah.
Wow.
The answer is "momentum"? Not particularly compelling in and of itself.
not amused
20somethings acting like kids
What is happening here ? Can someone provide a little context for a rubyist who know nothing about this rails/coffeescript stuff.
That doesn't mean what you think it means. The mechanisms for provisioning servers, monitoring, etc are all in Ruby. The servers that get provisioned can run anything they want.
You might even say that controversy...is brewing. YEAAAAAAAAAAH!
It is a battle in ideals. basically people are fighting over a little frosting that some people are too lazy to remove. Then the entire thread turned into a really retarded meme thread near the bottom.
The people that make Rails decided to add in coffeescript in as a default (coffeescript is an abstraction layer for writing javascript in much the same was as HAML is an abstraction layer for html) Some people don't want to learn coffeescript, or simply don't want to use it at all, and have decided that crying about it is better than commenting out 1 line of code from their gemfile.
Or just, y'know, not using it but leaving it there. Afaik you can still write .js files in public/javascripts. It's not like it'll stop you
I'd also be interested in seeing the benchmark suite run with multiple ruby implementations. 
EVERYTIME!
So long as Rails will still work without Sass, Haml and CoffeeScript I have no objection to their being provided as options. I don't think they should be added as default bloat though.
so don't run cucumber...
http://memegenerator.net/dos-equis/ImageMacro/7215579/I-DONT-ALWAYS-TEST-MY-CODE-BUT-WHEN-I-DO-I-DO-IT-IN-PRODUCTION amirite?
I saw this today when I discovered that cucumber *does not work* with Rails 2 (at the moment)
I think he means test-unit, mini-test, or rspec. Also, whats up with all the memes? This is not [/r/fffffffuuuuuuuuuuuu](/r/fffffffuuuuuuuuuuuu/).
monkey patched the `.` to `U` specifically 
yeah, that's one of the two problems that the kids don't understand: there will be bloat. The other problem is the php problem: novice programmers will think omg dhh is a super genius therefore I will dive wholeheartedly into a syntactic sugaring on top of another language, abandoning all of the tools and systems that have already been built on top of that language. Then I will write even shittier code than people usually write in javascript for pure lack of debugger and browser support. And then four years from now, after coffeescript has gone the same way as the /last/ corkbrained attempt to screw with javascript (RJS), you, dear reader, will be told to help modify and correct a giant broken coffeescript codebase. Bon fucking appetit.
Who put a Java programmer in our Ruby forum?
that's what I saw when upgrading to capybara 0.4 specially because they put a TL;DR and link to BLOGS instead of real documentation in their generated files, fucking retards. the ruby community should really get rid of the teenagers writing their software at the moment.
Pythonista Ruby-sympathizer here. Anyone care to explain?
When you run cucumber tests, a passing test is represented by a green ".", a failing test by a red "F" and an undefined step by a yellow "U" (with subsequent steps represented by a "-" because they were skipped).
It ought to, I'm using it in a bunch of Rails 2 apps at the moment. Which version specifically are you using it with? Are you using Webrat or Capybara, and Test::Unit or RSpec?
Apparently, fuers think every reddit is /r/f7u12.
It's not about removing the line in the gemfile. It's about DHH choosing winners. How come so few people use datamapper or sequel? Because AR is the default and comes built in. Now people are going to use coffeescript even if there is something out there that's better. Anyway there is no need to include this as a default. I just don't see the point of it. 
&gt;Except you can still use straight javascript exactly as you would before this change. Not the point. The reason more people don't use datamapper or sequel is because rails comes with AR. For the same reason this will suck the wind out of projects like backbone.js and others. 
That would make way too much sense. Have to go with what is trendy I guess.
Backbone? You can write backbone code in coffeescript, and you can continue to use backbone scripts in Javascript that you already have. Why couldn't you? Because it isn't in the rails distribution? It wasn't there to begin with.
Now I do...
Hey, I'm the guy who wrote Capybara. Thank you for your suggestion, I will immediately stop working on it, and have someone more wise carry on the work. Are you volunteering? You seem versed in the ways of the world, and I would be glad to have you take over.
two things: * if you don't take your work seriously why do you expect me to do it? * blogs are NOT documentation, if you have a "good practice" to recommend have a fucking page of your own and post it. don't think that because you wrote something you're excused for life. **(edit)** I thought a bit more about this jnicklas and I'm sorry for offending you, unfortunately this is the impression I had when I did the update and to me honesty comes first, I stand by my word I don't think this is proper way for any developer who does something that is not supposed to be a joke; I like memes but they do have a place and it's not here, it's not just you the whole community has this attitude and it sucks. just to be clear being serious does not imply being formal, being serious is to worry to present somthing that inspires others not something that looks like it was written while drunk. ---- for the record, I'm talking about this: # TL;DR: YOU SHOULD DELETE THIS FILE # # This file was generated by Cucumber-Rails and is only here to get you a head start # These step definitions are thin wrappers around the Capybara/Webrat API that lets you # visit pages, interact with widgets and make assertions about page content. # # If you use these step definitions as basis for your features you will quickly end up # with features that are: # # * Hard to maintain # * Verbose to read # # A much better approach is to write your own higher level step definitions, following # the advice in the following blog posts: # # * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html # * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/ # * http://elabs.se/blog/15-you-re-cuking-it-wrong # on the web_steps.rb file it generates after installation.
These are the currently generally accepted practices, but they are also very poor practices, unfortunately. This is Test Driven Development (TDD), in which there is a test for every implementation. TDD falls down because the tests are implementation specific. All of the testing as shown on the website will fail if someone redefines the controller methods. Controllers should never be tested in Rails. They are implementation specific details (i.e. the implement the ties between routing, models and views). Instead, test model behavior with model specs (i.e. that model calls return rows created through factories), views through view specs (for regularly generated data only, like XML or JSON output), and integration specs for all site behavior. And, here's a big one: Use factories to generate your data. Mocks or stubs almost always means that you're putting implementation details into your tests.
My issues with CoffeeScript, HAML and Sass are: 1. You're dooming yourself to hand-editing code, because while there are lots of tools for CSS, HTML and even JavaScript refactoring and live preview, there aren't any for CoffeeScript, HAML and Sass. 2. You're reducing the set of people who can make changes. Rather than being able to farm out presentation changes to any web code monkey, you need someone who knows HAML and Sass. 3. You've introduced a dependency and another possible source of errors, and made it harder to track error messages back to the original source. 4. Terseness really isn't that important. There are so many decent text editors to take the pain out of matching up brackets and automatically inserting block ends. Plus I'm not a bad typist, so typing fewer characters is way down my list of priorities. It's also really bizarre to see Rails developers having orgasms over Python-style semantic indentation. If you like it so much, why not use Django or something?
With HAML, I feel like the point is that it's given that you have to find some way to make HTML dynamic. That immediately forces you into #1, #2 and #3 regardless of which template language you choose. Then, you might as well choose a templating language that is easier to read, write and edit than HTML. With SASS, the benefits are clear: there really isn't another good way to introduce dynamicity into CSS. Is dynamicity a good idea? For a lot of people it is, especially those with extremely complex CSS requirements. CoffeeScript by comparison offers essentially nothing meaningful or programmatic over JavaScript. As far as python-style semantic indentation, I don't think anyone orgasms over that, and it's not a super big check box item when considering django vs. rails. I for one agree it's generally ugly, but I use HAML nevertheless.
Go ahead.
This is the way I see it: I like writing cool stuff. I wrote Capybara mostly for myself. Obviously I'm pleased that it has become successful and I've put in a lot of work making it more accessible and easy to understand for new people. That being said, I don't owe anyone anything, I have absolutely no obligation to carry on developing anything. After all, I'm doing this (mostly) in my free time, for no reimbursement of any kind. If you're unhappy with the way an open-source project is run, you basically have two options: 1) whine 2) fix it Needless to say, the second option is usually more productive. As for this whole debate, the code you're unhappy with actually doesn't come from Capybara at all. This file is generated by cucumber-rails, which is primarily maintained by Aslak Hellesoy. Aslak doesn't even *use* Ruby anymore, and still he's maintaining this project for Ruby people, because apparently no one else wants to. He's not a fucking teenager, he's a busy guy who has put in a lot of effort over the years to give you a great library, which you've never had to pay a cent for. You're free to criticize any project any way you want, and in this case, you may even be right. But dude, lay off the insults, it's totally uncalled for, and utterly unproductive. 
i was going to go but then i learned Fucko McDick was going (you) so i'm not going anymore.
&gt; It's about DHH choosing winners. How come so few people use datamapper or sequel? Because AR is the default and comes built in. DHH wrote ActiveRecord, so why on earth would he not include it in Rails by default? ActiveRecord is an extremely mature and powerful ORM, but nothing at all is stopping you from using DataMapper, Sequel, Mongoid, whatever. I don't agree about DHH "choosing winners", but if he were, he has certainly earned that right. Anyway, I have no problem with the changes, although AFAIK, only Sass and Coffeescript will be added to the Gemfile, not haml, unfortunately. haml seems a perfect match for Rails, and am not sure why some prefer erb, as compared to haml, erb generates some pretty messy looking HTML. 
I'm not from Singapore, but I'll be there. If anyone wants to do an impromptu Reddit meetup, let me know :)
Real talk.
Why not work to create a better JavaScript, instead of creating a language that compiles down to JavaScript (like C++ compiling down to C)?
You don't have to use Capybara and Cucumber? You could submit a bug report or a patch? Given that most of the software in the Ruby ecosystem is open-source, and you do not pay for it, you are equally responsible to try and fix the bugs you may encounter. Calling out a bug on reddit should be your option of last resort. And yes, totally agree, blogs are not documentation unless it's the official project blog.
going there!
Perhaps, but it's more interesting the other way around. Why did they choose RubyJS? Because it has *no* momentum. The last update was over two years ago. This is perhaps the second or third time I've ever heard of it.
1. I've never felt the need to use any of these tools. I'm very comfortable with hand-editing my JavaScript, CoffeeScript, CSS, Sass, whatever. 2. CoffeeScript is really not that hard to learn if you're any good at JS at all. Read through the README and you're pretty golden. Of course if you suck at JS, the README is going to make *no* sense to you. But then again I don't want people who suck working on my code anyway. 3. I'll give you that one, debugging is definitely a little annoying. I find this a worthy tradeoff though. 4. I vehemently disagree with this. Terseness is *everything* when it comes to programming. Terser programs are easier to read (note that I'm talking about unnecessary verbosity here). Easier to read programs are easier to maintain. Also, shockingly there are other reasons to prefer Ruby over Python rather than significant whitespace. I'm not a huge fan of significant whitespace, but it does the job pretty well. 
HAHAHA DISREGARD THAT, I SUCK COCKS
On the surface, yes, but how much performance are we talking here? It would be optimized for numeric programming. Who does numeric programming in Ruby? How much do you ever use in a program?
Cucumber is so 2010.
No tests?? Looks pretty cool regardless. Upvotes for effort.
I think that 1.9 had just the right number of changes for a major release. Just enough that people bitch about it, but not enough that the upgrade is too hard. It would be great to see this kind of update on a more regular basis.
ditto. got an email from rubyconf and TIL that chewing gums are banned from being sold in SG. anyway, i'll be the guy wearing a Starcraft Philippines jacket. probably somewhere close to where the smoking area is
Why does `Hash` now preserve insertion order? That seems to make it less of a hash, and more of an associative array. Does this impact O(1) lookup/insertion/deletes at all? (I'm assuming it definitely affects minimum storage space, since you are now storing information that you didn't need to store before.)
Tests are being written shortly... :)
it's still a hash it just has an extra pointer to the 'next' element. So it's essentially a linked list superimposed on top of a Hash. Yes it's still O(1) lookup --- and in terms of extra storage --- it's just an extra pointer per element, hardly a big deal. I think it's a good thing.
Cheers. Bridge utopia (Kat) just mentioned you in a twitter comment when I was talking to her about Rubyconf. @rstacruz here by the way.
Fork it, add tests, submit pull request.
Nice! I got an API key for this but hadn't gotten around to programming it yet!
Downvote for suggesting other people should write his tests. FUCK. THAT. SHIT.
This is why I use isolate
beat me to it
Thanks; I hadn't heard of Isolate. For anyone else in the same situation, here's a link to [the project](https://github.com/jbarnette/isolate) and [one team's rationale for using it](http://stevenrbaker.com/blog/2010/04/15/from-bundler-to-open-and-inclusive-software-communities.html).
I feel the same way when running rails server, rails console, rake...
Get a SSD. On my four year old laptop running any of those commands is almost instantaneous. It's amazing.
Downvote for suggesting all projects should be an island. That mentality is what made sourceforge so crappy. I wasn't "suggesting" people should write his tests. I was stating that if there is something you think should be in the project, you should add it and submit a pull request.
It's an improvement, but on this i7/SSD it's far from instantaneous, at least on this system it takes ~6.3s to run "rails g migration foo". (ruby 1.9.2, rails 3)
`rake spec` is more time consuming for me, personally.
I did a bit of tinkering with it before this gem was released. It's pretty cool and there are no restrictions on what you can do with the data (as far as I can gather from their docs). My only problem with it is that there is a fair bit of insconsistency between it and IMDB, i.e. some films on RT have a different release year than on IMDB. I piped in about 350 movies from IMDB and it happened quite a few times. Good fun to play with though!
For me it's `rake cucumber`.
There are plenty of ways to implement templating languages without breaking the ability to edit as HTML or XML. Haml throws all that away in favor of a totally different and overly terse and cryptic syntax. Sass is definitely the least bad of the three. However, it still breaks the ability to use CSS editing tools.
Just because you don't need the tools doesn't mean you should lock your projects into being unable to make use of them. Personally I'm happy writing optimized raw SQL queries, but that doesn't mean I think it would be a good idea to break use of tools like ActiveRecord. As for terseness being everything, I think you're just wrong about that. APL died out as write-only, and regexps have a pretty negative reputation for the same reason. What really makes a program easier to read isn't reducing the amount of text, it's reducing the amount of unnecessary cleverness.
nice, but i would never, ever do something like this in Ruby (if performance is any kind of concern at all). Indeed for any per pixel manipulations on images pure Ruby is far from being the best tool. Though it is possible to write a fast pixel manipulator in C and provide a Ruby wrapper over the top, Chunky PNG is not it. Nice toy though ;)
haml's fully supported by vim and textmate as a first class language via syntax highlighting, snippets, etc. What HTML/XML editor do you use when writing erb? Although to your point of 'overly terse and cryptic syntax' I do agree that there's a gulf between haml and html that not everyone is ready to leap over. The jump into erb from html is radically easier.
That's cool. I've been using my own photo album generator for a while now (dynamic photo albums in PHP suck...) but this one looks better.
Hate to continue the trend... but for me its `rake cucumber:selenium`
Couple things to make `rake spec` and `rake cucumber` faster: Use [REE](http://www.rubyenterpriseedition.com/) Increase your memory usage: export RUBY_HEAP_MIN_SLOTS=1000000 export RUBY_HEAP_SLOTS_INCREMENT=1000000 export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1 export RUBY_HEAP_FREE_MIN=500000 export RUBY_GC_MALLOC_LIMIT=1000000000 Tune your MySQL server (especially if you're using innodb): table_cache = 256 query_cache_size= 16M innodb_buffer_pool_size = 256M innodb_additional_mem_pool_size = 20M If you're on Linux, do some googling on performance issues on Ext4 - there are some options (barrier=0) you can pass that can speed up mysql by 10x or more. They come with drawbacks (data integrity problems if you crash), but that shouldn't matter for development (imo). On Linux, you can also increase your kernel HZ value to 1000Hz (or at least 250Hz) *edit formatting... oh come on, code blocks in an unordered list... okay, i need a preview...*
Setting `noatime` should help speed up things as well.
Keep your gems in the repo and use bundle install --local next time.
If app startup is the bottleneck, spork drastically improves this: https://github.com/timcharper/spork That way I can run single specs in a couple of seconds.
What's your OS? Running these commands was really annoying for me when I was sitting on Windows. Switched to Ubuntu* and everything works blazing fast. * actually switching to any other OS than Windows will help
I know I'm late to the game, but that's not the same as using Passenger as many people do (the apache/nginx modules)
Mac OS 10.6
When will isolate support using git repos?
this is just a ripped off XKCD comic http://xkcd.com/303/
I think the point of using Ruby is more because it has a relatively simple to follow syntax, and he's demonstrating the principles instead of necessarily just supplying us with the code.
Never. It's never a good idea to use unreleased software.
I love rails. 
On the flipside, Ruby's implementation avoids littering code with this: my_hash.has_key?(key) ? my_hash[key] : nil Ruby gives you rope. Plenty of it.
Whoops, now you've just propagated the `nil` problem further up the chain! ML type systems avoid *all* this.
Just use Hash#fetch, and you get exceptions.
Except when it's a private gemspec you want to use, or when you need to test something in development. Git support is great. Bundler doesn't support packaging git repositories yet though, which is unfortunate.
I really don't recommend using something that doesn't do dependency resolution. I used a few hacky things like this before and constantly ran into problems. Are we really hating on bundler in here? It solved ruby dependency hell. Just wait a fucking minute.
This is pretty cool. Minor nitpick though: in this context, if you say "agnostic" I think it should mean it's not tied to a particular ORM. It would probably be more accurate to just call it polymorphic. 
Thanks! I understand your confusion, however, in its rawest form the definition of agnostic is noncommital and that's exactly the case :-)
Agnostic is a word that can be used outside the context of ORMs. 