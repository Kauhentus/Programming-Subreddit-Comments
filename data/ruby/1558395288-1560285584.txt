That’s terrible. Why would anyone actually write it that way?
Hey, I was there!
Very simple function. Any comments are welcome, including suggestion and criticism. I’m bad at UI design, so I just focus on the functionality.
Internal server error if you send empty field :)
Internal server error when send any valid url =))
A QA person walks into a bar. He orders beer. He orders 0 beers. He orders -1 beers. He orders 99999999999999999999999999999999999 beers. He orders a yak.
https://en.wikipedia.org/wiki/Code_golf
Yeah but why is that part of Ruby?
Didn't know about that, cheers! Like OP I'd only use it for an existing project if it adheres to rubocop.yml, but for a new project I'm gonna try this one! If it's as snappy as prettier for JS this seems awesome, could have it format on save :)
Check out http://shoesrb.com/ for ruby GUI stuff. It’s neat
I usually use shell scripts when I want portability to be paramount or feel the 2 seconds for a ruby process to start is too long to justify creating a commonly used task with it. I use higher level languages when I do anything even remotely difficult. Mixing the ② feels kind of bizarre, they both have their own unique use cases and I probably use bash script less than ruby but if I need a ruby feature in a bash script I’ll probably just abandon the bash script altogether and just use ruby or python.
I thought it was pretty good. I only joined this sub to learn more about ruby since I’m more of a python/JavaScript devloper. Very informative, now I know what to use ruby for.
Too much ad on that page. Makes it on my mobile unreadable for me. Sorry
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rubylang] [You can have a peek at Sorbet - the static type checker from Stripe](https://www.reddit.com/r/RubyLang/comments/br9fh7/you_can_have_a_peek_at_sorbet_the_static_type/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rubylang] [State of Sorbet: A Type Checker for Ruby](https://www.reddit.com/r/RubyLang/comments/br9fzk/state_of_sorbet_a_type_checker_for_ruby/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What's it about?
I always find the startup time of ruby problematic. If the script is slow no matter what, whatever. But if I’m dumping five lines into a script for convenience, I expect it to be snappy.
Also - https://github.com/leejarvis/slop
Ruby takes about 50 ms to startup on my machine. Is that not snappy enough?
https://eregon.me/blog/2019/04/24/how-truffleruby-startup-became-faster-than-mri.html
How slow are you talking? Coderay isn’t as fast as bat but it’s milliseconds of a difference.
brakeman-pro
RemindMe! 2 days
I will be messaging you on [**2019-05-23 14:35:56 UTC**](http://www.wolframalpha.com/input/?i=2019-05-23 14:35:56 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/ruby/comments/br9sqp/ruby_commercial_gems/eobvrv0/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/ruby/comments/br9sqp/ruby_commercial_gems/eobvrv0/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! eobwaqk) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
For a trivial task, no. If the bash version is instantaneous I don’t want to wait for the ruby version. For context, I’m talking about trivial scripts for personal use only. I work in a rails shop where people don’t have as much bash. If I’m writing something to share there, I’ll use ruby. If I need anything even vaguely resembling a data structure, I’ll use ruby.
Too sad to see it has been acquired
For trivial tasks, you can use the flag `--disable=gems` to disable RubyGems shave off most of Ruby's startup time. Once it's down to about 10 ms, it's just milliseconds difference from a bash shebang. I find Ruby startup plenty fast for my personal scripting, in any case.
Are you using Spring? It preloads and persists the dev environment to cut down the load up time.
For those new to Forme: https://github.com/jeremyevans/forme Made by the creator of Sequel and Roda, so you know it’s going to have a kickass api.
How endtest is spamming up tech subs every day with [multiple accounts](https://www.reddit.com/user/boss_scarbos) and [focused spam posting](https://www.reddit.com/user/dragnea_presedinte) that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion.)
graphql pro https://graphql.pro/ reactonrails pro https://github.com/shakacode/react_on_rails#react-on-rails-pro-and-shakacode-pro-support Kiba Pro https://github.com/thbar/kiba/wiki#kiba-pro
thank you for this
TIL
Well there are lots of commercial services with often official gems like gitlab, sentry, Hunter.io etc
Seems broke or at least doesn’t explain what input it is looking for well.
Do you have any examples of what you'd like to see regarding systems thinking/app design? I could use a new topic to write about and this seems like a fun one
Redmine 2 days
Some thoughts: [https://github.com/FranklinYu/Atom-for-Bugzilla/blob/master/spec/integration\_spec.rb](https://github.com/FranklinYu/Atom-for-Bugzilla/blob/master/spec/integration_spec.rb) * Move lines 1-21 in `spec_helper.rb` and require it here. Also, regenerate and implement the spec helper from `rspec init`. This will help your test suite grow and start you off on better practices included in their config. I highly recommend [Effective Testing with RSpec 3](https://pragprog.com/book/rspec3/effective-testing-with-rspec-3). * Break your specs out into multiple readable `it` blocks. This will help separate responsibilities and provide better context on failures. You could also delete your \`it works\` example - the latter provides context on if it works or not on its own. [https://github.com/FranklinYu/Atom-for-Bugzilla/blob/master/app.rb](https://github.com/FranklinYu/Atom-for-Bugzilla/blob/master/app.rb) * You would be better to have an `/app` directory with this file named \`main\` or separate the two actions out into \`main\` and \`feed\`. This will help your structure communicate what goes where. * `atom_feed_from` would be better moved to its own class. This separates the responsibilities of `app.rb` which is doing too much (configuring routes, responses, and generating an atom\_feed). This is a [SOLID](https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design) principal.
Rethinking the view layer is well worth a watch - github have added react-style view components to improve the testing and reusability of their rails view layer code. It’s a really simple implementation that looks like it could make a big difference. Demo repo: https://github.com/joelhawksley/actionview-component-demo
PowerShell is open source, and runs on Linux with Mono!
\&gt;\_&lt;
Sorry, can't follow what you're talking about. Maybe to explain it better, try telling us exactly what you are doing, and then show us the error you get, including the stack trace.
edited. hope it's clearer now.
I'm the author of Kiba Pro (which I've just started selling) - happy to answer any question you may have on the process (&amp; thanks to Mike for listing these).
ok i figured it out!
Sorry for the delay, that's a good question and I'll answer it on the README when I get a chance :)
It seems most of the commercial "programming schools" and youtubers in Japan are still pushing ruby on rails or php as the "learn this in 3 months, change job and solve all your problems!" solution. Don't see much hype for backend node etc. That said, word of the ruby downward trend is reaching Japan so now you have videos like this one saying stuff like "if you want to be a serious engineer, learn ruby, get an entry level job for a year and then learn something more serious like Go or Kotlin for backebd or Python for data science." https://youtu.be/2wfQ3iG08UI It's still considered the easiest language to start your programming career in Japan among Japanese people, but most of the jobs ads I've seen that explicitly state "foreigners with crappy Japanese skills welcome" are for Java.
Sometimes doing the work to ask your question clearly enough that an outsider knows what you're talking about--leads you to the solution. It's a thing! https://en.wikipedia.org/wiki/Rubber_duck_debugging
**Rubber duck debugging** In software engineering, rubber duck debugging is a method of debugging code. The name is a reference to a story in the book The Pragmatic Programmer in which a programmer would carry around a rubber duck and debug their code by forcing themselves to explain it, line-by-line, to the duck. Many other terms exist for this technique, often involving different inanimate objects. Many programmers have had the experience of explaining a problem to someone else, possibly even to someone who knows nothing about programming, and then hitting upon the solution in the process of explaining the problem. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
This looks really cool. I wonder how Jets compares to serverless.
From what I can tell so far, Jets gives a more Rails-like experience of building with functions (in fact, when you look at it, it doesn't even feel like building on Lambda, it just deploys out that way). I've not tried Ruby with the Serverless framework though.
https://github.com/piotrmurach/tty-prompt/ Haven’t found an excuse to use it yet, but it looks like it goes on well with TFA.
Is there a way to trigger that in a script with a shebang?
[https://www.phusionpassenger.com/](https://www.phusionpassenger.com/)
&gt;ign? I could use a new topic to write about and this seems like a fun one I'm not sure mate. General concepts while thinking a new design. &amp;#x200B; &amp;#x200B; For instance, I have an app I'm developing for my own business (a kind of big business admin) where we want to put everything related to the business (stats, invoices, tools and so on). We made a big effort on an UML diagram where we put the first ideas of our classes, relationships and everything we could think of on a first moment. Now, during the development based upon this UML, I'm kind of struggling on deciding how to tackle this big diagram. What should I implement first? These entities or those ones? How to prioritize this kind of thoughts? Should I implement all the classes and their tests before tackling the UI? Or is it better to move incrementally (i.e.: implement User and all the UI related to it's manipulation? &amp;#x200B; Since I didn't graduated in anything related to development/computer science etc, I feel that what I lack the most is the mindset/patterns of thinking/modeling a system and articles/courses that I found on the web are all focused on explaining syntax/methods and stuff like that. I'm yet to find something where the prologue of an application is taken into consideration. Let me know if my questions are not clear enough to give you hints of what I'm trying to ask. I myself still have troubles wrapping my head around of what I'm needing and how to look for it. Cheers
Thanks for all the recommendations. I'll sure take a look on those. &amp;#x200B; &amp;#x200B; cheers
[HexaPDF](https://hexapdf.gettalong.org) (library and application for PDF creation and manipulation) is dual licensed under AGPL and a commercial license. In contrast to other types of licensing, eg. open core, all commercial features are also available in the open source version since they are exactly the same.
Use OpenFaaS, it's like writing a CLI app. Accept payload via STDIN, process, output to STDOUT.
 #!/usr/bin/env ruby --disable=gems
Tip: You will have much better luck getting help if you try yourself first, and explain what you have already tried, or asking specific questions. This comes across as lazy and insinuates you haven't even made an attempt to do it yourself first. What do you want help with exactly? Surely your course provides *some* guidance.
`gem install gosu`
[F*ck your party rules](https://github.com/tpope/gem-shut-the-fuck-up)
Can someone explain to me why this is "weird"?
That’s always subjective. I’ve never seen this used in any Ruby codebase and quoting the delimiter is not exactly intuitive. For me this is weird enough. 😉
RemindMe! 3 days
:(
This is a Perl thing. One can also provide heredocs as arguments: def foo(a, b) puts (b + a).reverse end foo &lt;&lt;A, &lt;&lt;B Some AMAAAAAAZING text here Tchauzinho A Some regular text here Bye bye B Outputs: ohnizuahcT ereh txet GNIZAAAAAAMA emoS eyb eyB ereh txet raluger emoS
See what you all are missing out on by not learning Perl!
A symbol using an atypical character. I would guess that the underlying SQL driver uses a `$params` syntax to bind arguments to prepared statements. I Ruby the only place I've see this is `global_variables`'s return value.
As quick check in irb shows, it is just a symbol: irb(main):001:0&gt; :$sym.class =&gt; Symbol
Wow, is this number.times thing native or is it a library ?
Native! It’s been built in since at least ruby 1.8 when I started using it. `n.times` returns an enumerator yielding `1` up to `n` inclusive. (In this case we disregard the argument.)
I’m stupid, I thought I was in /r/js :( Still cool though, I don’t know Ruby at all. Not sure how I ended up here lol
it's not special, and it's highly idiosyncratic as far as "let's write Ruby in PHP" goes.
No, no special meaning.
Check out Slim. It’s similar, but (in my opinion) even cleaner. Both are popular web alternatives, although I hear less about haml these days
haml works great, ive used in extensively in production web apps
I prefer ERB because we've all seen a lot of HTML and it doesn't require any special thought to understand or write it.
Exactly. I wish I could upvote this 100x.
Slim and HAML are both great alternatives and to be honest I haven't been in a Rails project which uses ERB for many years.
I've used it here and there –and I like it– but lately I seem to be using ERB. Consciously or unconsciously, not sure, it just happened. The only problem I have with HAML is having to use methods for things that are normally done in markup: http://haml.info/docs/yardoc/file.REFERENCE.html#helper-methods You'll want to make sure you editor has good support for it otherwise you'll likely get indentation space count errors for nested structures. Without editor support, this can become a nightmare. Also checkout [Slim](http://slim-lang.com/). It's a bit more forgiving when it comes to indentation.
&lt;3 HAML. I use it for everything.
I haven't see an ERB file for years, we all use HAML. Hamlit is a fast implementation: &amp;#x200B; [https://github.com/k0kubun/hamlit](https://github.com/k0kubun/hamlit)
I used HAML in many apps with no regrets, but it's not my go-to anymore. My current prefs are Slim and Pug (for Rails views, and Vue components, respectively). Haml is clean, but Slim is cleaner (IMO) and faster. NB: if you are collaborating with web designer(s), then it's sometimes wiser to stick with ERB since then you're all just working on HTML.
I love haml. Erb is painful to write and maintain. Haml is so clean
Idiosyncratic, but actually looking at the sequel docs now linked... I like it! It makes for a pretty nice API, I don't see anything wrong with it. It's got to know you are passing in something meant to mean "unbound as a placeholder in a prepared statement". Instead of passing in "a symbol beginning with $", you could pass in some special object like `Sequel::Placeholder.new("n")`, which is relatively clear, but how verbose! Or you could have some special method meaning "these are all placeholders" (but what if you want to mix placeholders and not?). I dunno, I like it. But yeah, it's not special to ruby, just a symbol beginning with `$`. The Sequel gem chooses in certain methods to treat symbols beginning with `$` as special values.
Slim &gt; haml &gt; erb (imho ymmv)
I prefer sticking with ERB. HAML can be confusing for designers. HAML also makes moving small pieces of your template to JS/React/whatever more difficult. HAML provides little benefit. If you want to type less markup you could use emmett.
We use haml at my work. I think it's sometimes easier to write, but views can be large - semantic whitespace and large files don't mix well imo. But it seems pretty popular.
What's "emmett"? googling `ruby emmett` isn't getting me much.
Sorry I added an extra T. https://github.com/mattn/emmet-vim It exists for editors besides vim.
I also don't understand why people are always saying they want their code to be "beautiful". Pro-tips A: Beauty is subjective. B: Starting lines with a percent sign is objectively un-beautiful.
We use haml although we started with slim. We switched from slim to haml because there was more support for haml at the time despite me liking slim more. Personally I prefer either slim or haml over erb because personally I like the syntax better. It keeps things feeling more like code than markup, and it’s one of the few places that I’m okay with significant white space. I mean, I’m okay with python, too, although I do prefer ruby, but when it comes to markup, I like the compactness of slim and haml, and I also like not having to remember closing tags in general. If forced to choose, I would probably still pick haml over slim if only because there still seems to be more support for haml out there, even with my preference for slim. Sometimes you gotta go against preferences for the net gain. :/
ERB, because any other maintainer can work on it without a manual beside them.
I would say check out both, pick the one you like and stick to it BTW [hamlit](https://github.com/k0kubun/hamlit) is the faster version gem for HAML
HAML was the new hotness 7-8 years ago (spitballing here) and all the l33t kids were hyped about it. But it doesn't really solve any problems that ERB can't handle, and you have to learn an entirely new syntax instead of HTML which any dev worth his salt can code in his sleep. So it faded away as Rails went from a trendy upstart to an enterprise/establishment solution and real coders who had to maintain things and onboard young devs ditched it for simplicity.
i don't write ruby these days (or use any markup at all actually) but i used HAML for many years and would gladly do so again if the need arose. the emacs mode for it is very useful.
As others have said, Slim is best for a new project. I still have a lot of legacy haml. Both Slim and Haml are good at encouraging you not to do too much in your templates. It's sometimes more work to do that - either pushing more methods onto your models or wrapping up in view-specific objects - but getting that complexity out of your views is almost always the right thing to be doing. ERB lets you be lazy sometimes in ways that will make you want to stab 10-years-ago-you in the face.
Hello, What is the advantage using HAML ????
I think one problem is that many coders think that beauty correlates to character count. I’ll take easy to understand over brevity any day.
Easiest way would be to use Javascript. Something like: `&lt;%= link_to 'Click Me', &lt;some_path&gt;, onclick="console.log('foo')" %&gt;` [See this](https://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html#unobtrusive-javascript)
I always use ERB. Anyone can read ERB. HAML/Slim, not so much
I resisted for the longest time because I hate adding extra layers of abstraction. Then I tried it out and really enjoyed being able to rearrange nesting by indenting and realized it truly resulted in a more enjoyable editing experience. Now, it’s my preference, but I’m not offended when someone doesn’t like it.
I've been looking at html for 20+ years. It isn't pretty so I use Slim. It is amazing how much easier to parse-at-a-glance slim is than HTML.
HAML made me love HTML again.
Haml is the best
I love slim, but sometimes I want to do unholy things that don't nest and end up using erb
The open-source version is [PowerShell Core](https://en.wikipedia.org/wiki/PowerShell#PowerShell_Core_6.0), which I don’t think requires Mono.
It eliminates a lot of clutter and redundancy, it practically eliminates accidental unclosed tags, the syntax for ids and classes matches CSS syntax (# and .) so it’s easier to visually match those things up while you’re working on it, and the indentation enforces correctly formatted code.
I wrote this SO answer on this one from 7 years ago. (Good Lord has it been that long already?) [https://stackoverflow.com/a/11402093/793330](https://stackoverflow.com/a/11402093/793330) While haml is great ERB is baked into ruby, think IE before Chrome existed, maybe you're not old enough to get that one though... There is a lot of power in being the default thing.
Thanks for the feedback. I added a one-line explanation; please check whether it clarifies the purpose.
Didn’t think about that; now I made the field required, which should prevent normal user from accidentally sending empty field.
Would totally pay for QA if this is commercial! :D
How can I execute a specific block of ruby code when the button is clicked? Perhaps give the block of code a div and then reference the div class in the javascript code? I'm quite new to this all.
I agree with your entire comment, but I love how contradictive it is
There are a few ways. If ultimately what you want to do is to reveal some HTML when you click a button you can do something like this: ``` &lt;style&gt; .hidden { display: none } &lt;/style&gt; &lt;div id='hidden-div' class='hidden'&gt; whatever content you want here. &lt;%= &lt;your ruby code %&gt; &lt;/div&gt; &lt;a href='#' onClick='reveal()'&gt;Click Me&lt;/a&gt; &lt;script&gt; function reveal() { var element = document.getElementById("hidden-div"); element.classList.remove("hidden"); } &lt;/script&gt; ```
You mean “invalid” instead of “valid”?
I loved HAML back when I wrote Ruby recreationally. I work for a PHP company now and most of our backend tools for the past 5-7 years have been in PHP+HAML. It's weird.
Awesome, thanks! Alright so here is my project: [https://repl.it/@WaffleRuby/NameGen](https://repl.it/@WaffleRuby/NameGen) How can I make it so each time I click the link it will activate/run the code? I currently have a list of arrays that randomly output some text,
Wowowowoow. I literray google searched “bash ruby” like a n hour ago. Now hop on reddit to see this!!! Sweeeeeeet!!!
Don’t want to be rude, but fuuuuuuuuuck haml. Every solution online requires translation and it’s a pain when things are more confusing. Don’t do it and just set a few key bindings to type your erb wrappers in one stroke. That’s what I’ve done and it works much better.
We still all grab for haml by default at the agency where I work
my guess is it probably derives from Perl Special Variables. IME most everything can be blamed on Perl or LISP. :P
A benefit of ERB is that it’s very easy to read if you just know Ruby and HTML. It makes sense quickly. A front-end developer who doesn’t know Ruby can contribute to it. Haml and Slim are both great once you know them but there’s a learning curve. If you don’t use them regularly, you forget how they work and have to relearn later on. It’s great while you’re actively working on it but a real pain in the ass later.
Yes, lets stay with our unproductive method we used for 20 years, because we don't need to think. &lt;slow clap/&gt;
\+1 for hamlit. &amp;#x200B; ERB serves its purpose; it's a good option when writing scripts or if you need one or two views and don't want t pull down haml.
Is the code in Ruby? Not sure why you were recommended using Javascript. Simply create a new controller action and link to it, after it performs your code, make it redirect back. See https://guides.rubyonrails.org/routing.html
@tongueroo made a great talk on Jets in BalkanRuby last week and it felt like a kind of a DSL to write functions that get translated and pushed to AWS. The talk should be published soon enough and I recommend taking a look if you're interested in serverless.
I don't know. Is [https://www.google.com/](https://www.google.com/) valid? BTW, you should consider using method post to send parameters instead of get.
Sequel the ORM? I don't remember that convention when I toured with it about six years ago.
Haml is fun, coffeescript is trash! All the jobs I've had in the last 3 years have been Rails APIs, though, so I have no idea what Slim is, and React is fun anyway, although webpacker can go to hell. But I'm not bitter.
A: Beauty is subjective B: X is un-beautiful
I appreciate the response. Yeah, the code is in Ruby and currently in the view as erb. https://apidock.com/rails/ActionController/Base/redirect_to - Would I use something like this ?
Another vote for slim here! It just makes so much sense.
Exactly! Basically redirect_to can be a last line of your controller action.
Hyperstack is frontend ruby framework that transpiles to JS, maybe have a look at that
Yup slim is great!
I tried haml and slim but I'm back to erb. It's slightly less pretty but it's the closest to html which makes it easiest for newer Rails devs to write. Also; because the majority of html that I write nowadays is in helpers (simple_form, table_for, bh etc.) it doesn't really matter that much.
I used to be a big HAML/Slim fan, but as a lot of what I was creating was based on Bootstrap, it made copying and pasting snippets a real pain. Ended up going back to ERB and while it's not as "nice", it does make working with HTML snippets a lot easier.
Yeah don't listen to this guy. He is salty (for some reason) and is full of it.
Not sure how you write code at all if you can't understand HAML. It's markup syntax unified with CSS syntax and removing closing tags?!
Used slim. Now front is mostly jsx.
I'm pretty new, a year ago I knew very little about coding. Just started a new job where they use haml. Spent an hour translating an erb file before starting and that was enough to hit the ground running. It's pretty intuitive, would use it over erb, really isn't all that hard to learn and any developer worth his salt would pick it up lickity split
Cool! I’ve learned a lot with RuboCop! Today’s I’m in a war with 45 lines limits, but my feeling is that it help me to improve my code. Besides helping to do more legible things.
I inherited a project in haml. I don't like using it, it has few benefits over HTML for me and it meant that I had spent a day reading documentation for fixing a few formatting problems.
Yep.. slim is better. Totally agree.
So, you can add a "ruby" block to your slim template, do all your work, and then output the regular HTML there.. that's how I handle my 'unholy things'.
Slim takes about 20 minutes to understand. Once you do.. you'll be hooked.. its much better.
Slim all the way.
Glad the inventor of Markdown didn't think this way.
I agree. Slim in the next evolution after HAML.
If I have a maintainer who can't grok Slim/HAML ... he'll be "on notice". Yes, there's a learning curve, but you end up with a much cleaner implementation when you use more modern tools. That said it's NOT complicated, and any competent developer can be up to speed on Slim/HAML in a very short period of time. ERB tends to mix too much implementation with presentation. Slim/HAML tend to push you to put your code where it belongs, rather than putting a lot of logic into your presentation layer. Further, since HTML/ERB tends to be so verbose, Slim/HAML templates end up being a lot easier to maintain.
https://github.com/yoshoku/rumale
That seems really cool! Glad to see ruby getting more libraries/frameworks outside the realm of web development.
Did you ever notice how the responses to requests in this gem are such magic. They are hashes but u can do .success? on them...
I would love to see the source code for this - basically I would like to make a cross-platform Ruby editor I can customise and this looks a promising approach
Why cute?
Ok so you have two choices here. You can do this in Ruby on in Javascript. &amp;#x200B; If you decide to use Ruby, then you should create a new controller whose only purpose is to return JSON for the view. Then each time you press the button you will make an AJAX request to the backend that will return data which you can then populate in your view. The advantage here is that your business logic remains in the backend. &amp;#x200B; Or if you decide to do this in JS, you'll need to add your arrays to your JS method and all the logic will be there. This approach will be faster in terms of application speed because you won't need to make a network request each time you press the button. It will probably be easier to implement also. But all your logic will be in your JS file. This isn't necessarily a bad thing, it depends on your use case. &amp;#x200B; To start with, you should fix the JS errors that you have in your JS file. For example, comments in JS are //, not #. Check your JS console when you are on the webpage to see your errors. I know this can be a lot, let me know if you have further questions
It's a DUCK!!!!! ^^
Is this on a platform that supports [`fork`](https://ruby-doc.org/core-2.6.3/Process.html#method-c-fork), i.e., not Windows? Process management can get complex, I encourage you to take a look at [`wait`, `waitpid`, and `spawn`](https://ruby-doc.org/core-2.6.3/Process.html) as well as [`trap`](https://ruby-doc.org/core-2.6.3/Signal.html#method-c-trap) and [`popen`](https://ruby-doc.org/core-2.6.3/IO.html#method-c-popen). In the meantime, here's a starter template that may or may not ultimately suite your needs. Note that there are some edge cases related to error handling not covered here: # List of child process ids (PIDs) pids = [] N.times do pids &lt;&lt; fork do # Create the child process and run system() system "some_amaaaaazing_command" end end # Parent process here. # Wait for children to terminate while pids.any? # Wait for any child proces to finish id = Process.waitpid pids.delete(id) end
I’m thinking of going the Ruby Route. How would I return to a new view using JSON in a new controller? I’m not familiar with JavaScript as much as I am with HTML and Ruby.
I'm curious how the performance compares to scikit-learn.
So you wouldn't return an entire view from your new controller, you just return small pieces of data that you can then manipulate using Javascript. &amp;#x200B; Here is a decent guide on how to do this: [https://www.rubyguides.com/2019/03/rails-ajax/](https://www.rubyguides.com/2019/03/rails-ajax/)
If you're at the university I think you are at, try the code desk and don't be lazy.
Check out the `childprocess` gem - https://github.com/enkessler/childprocess It provides `#alive?` and `#existed?` method to check the status of the process that your clean up task can wait on. I recently started using it for my `screen-recorder` gem and absolutely love it.
B: X is *objectively* un-beautiful. You gotta include the "objectively". That's what makes 'em think you're dangerous.
It isn't weird at all to my eyes. But then, I was a Perl hacker for fifteen years.
/r/CrappyDesign
Actually not sure if this is originally came from Perl as this is behavior exists in Bash too.
Oh, I thought it was a rabbit looking up
It may even be older than that, the historical manual pages show it was in Unix 7th edition. &gt; &lt;&lt;word &gt; The shell input is read up to a line the same as word, &gt; or end of file. The resulting document becomes the &gt; standard input. If any character of word is quoted &gt; then no interpretation is placed upon the characters of &gt; the document (...)
Yep, I think this project should get much more attention though, so help me spread the voice if you want! :) I also just read a recent comment on the github repository where Ylluminate was wondering if Mittsu could be somehow integrated into Opal... That'd be awesome!
Sadly, not on Windows but thank you for the wonderful resources.
Wow, I can see why you would want to use this. It's expansive. I'll definitely be reviewing it to see if it can fit in the project, thank you :)
Totally missed that case. I have fixed it. As for the method, I use GET because the URL is expected to be used by Atom readers, most of which don’t support POST.
I'd like to see an Ncurses wrapper for ruby...
Interesting
New gender?
It this actually so handy! Quite often I've had clients with a bunch of stuff just in a spreadsheet, or want to generate a report from a spreadsheet. Keeping them in their comfort zone with little work on my end is awesome. &amp;#x200B; I did have a few clients who used AirTable also, their API is amazing to work with.
&gt; always No, it depends on what you are doing. Best tool/technique/process for the problem. Fundamentally, everything in Ruby is an object, so you are using oop, in a sense, even if you aren't using it explicitly.
Ummm it was part of the standard library and is still a gem? https://github.com/ruby/curses
this is an odd cross-post. I would think OP didn't realize, but then I saw OP's name...
The way I would put it: I'd recommend always being _mindful_ of OOP principles in ruby. They apply whether classes are involved or not.
It makes me sad when I see Ruby’s great oop characteristics ignored for a large procedure that could be made more readable, testable, and flexible. However, another of Ruby’s strengths lies in its multi-paradigm nature. If you’re using it to just write a quick script, then there’s no need to involve all the oop goodness. If you’re modeling a business domain in a larger application, then I would definitely encourage leveraging oop.
Sounds noobish but could i go by line count
I tend to stick pretty closely to OOP in Ruby and I can't think of a time where I've regretted it. I can think of many many times I've regretted using a procedural approach.
No, it depends on what you are doing. OOP honestly makes things more confusing for certain tasks. However, I do put procedural code in a class just for namespacing reasons.
Slim's syntax is prettier, but the parser is horrendous at errors. It can be so much harder to diagnose an error in a slim template than a haml template.
I know it like ive written java and cs etc. ive just never seen the appeal
For me its difficult to gauge the need. For example, if i need a significant process to be repeated and allow for flexible modular use etc. my instinct is to just knock up a function rather than to set up a class for object instantiation
It’s a reasonable metric. Resistance to change as you add features is another.
Maybe measuring by subroutines is better, i understand how OO wins over juggling functions
"No prior knowledge of machine learning required" hahahahaha I am still laughing about this one
Thanks for that. I don't know why but I've always been under the impression that this was not a thing, for Ruby. I clearly remember searching for it multiple times, but for one reason or another I never used it. It could be I was looking for a windows solution and windows was not supported at the time? Who knows... Or maybe this is just a case for /r/Glitch_in_the_Matrix ;)
You might find this article informative. &amp;#x200B; [https://www.sandimetz.com/blog/2018/21/what-does-oo-afford](https://www.sandimetz.com/blog/2018/21/what-does-oo-afford)
FYI Haml 5.1.0 was released last week and contains performance improvements. No idea how it compares with hamlit now. https://github.com/haml/haml/blob/master/CHANGELOG.md#510
Set it and forget it
I just tested it and I can confirm it! Especially the prediction function
http://ruby-doc.org/stdlib-2.6.3/libdoc/readline/rdoc/Readline.html
? sshaw\_ gave you an answer if you \_are not\_ on windows.
Many thanks!
Another up and coming ruby ml project is rumale
I would imagine you don't have much experience with OO? If so, it can be hard to see the advantage of using it. If what you're doing works, there's no reason you have to change it. Ruby is a very flexible language. But ruby is also a fundamentally OO language, and supports OO very well. You might want to experiment with it.
I'd normally say, "why would anyone use Ruby for machine learning?" but the fact that this is from Andrew Kane is enough to make me really consider it. His work is always excellent.
Slides: [https://speakerdeck.com/shioyama/the-elusive-attribute](https://speakerdeck.com/shioyama/the-elusive-attribute)
Someone like Ruby， and never go ml， so he may try ml with Ruby， yeah, that's me.
Hmm I don't understand, I put the link for my talk but YouTube is showing dhh's talk...
I really liked the talk, very well organized and I liked the analogy. Aliasing feels like a solved problem, I'm surprised by those regex factory methods. Thanks for sharing!
I really liked the talk, very well organized and I liked the analogy. Aliasing feels like a solved problem, I'm surprised by those regex factory methods. Thanks for sharing!
If you want to read up on how to think about OOP in ruby I recommend Practical Object-Oriented Design by Sandi Metz. Its awesome! Check out https://www.poodr.com for more info on it.
I for one try to write
I for one try to write, since some months now, in a functional style as much as possible. Preferring modules and class methods over objects whenever I can. I find them easier to read, due to their explicit calls, and easier to test, due to their stateless nature. Just look at Ruby's standard lib: SecureRandom is a stateless module while Socket is a statefull class. Each have their pros and cons for a given case. However I noticed over time, that in the wild, people tend to create only classes.
I relate to this, i dont know why OO is the favoured paradigm in industry
I agree as well. Objects let you hide and break up state. State is where bugs come from, and needs to be managed carefully. If a function is stateless, it doesn't need a class. Yet I see this so often in the wild: doer = Doer.new; doer.call(args) OOP contributes nothing but line count here!
* [Slides on SpeakerDeck](https://speakerdeck.com/shioyama/the-elusive-attribute) * Rails Pull Requests: * [Give GeneratedAttributeMethods module a name](https://github.com/rails/rails/pull/35595) * [Make plain matcher match first, not last](https://github.com/rails/rails/pull/36005) (PR #36005, mentioned in [slide 77](https://speakerdeck.com/shioyama/the-elusive-attribute?slide=77))
OpenNLP 4 life!
To go from Ruby to `exec` or `system`/backticks: https://github.com/sshaw/optout
This was a good video. I deal with the innards of Rails on a daily basis and it still confuses me on some of the aspects.
I feel like I'm in the minority in this thread. I much prefer ERB over other alternatives. It's hard for me to get behind anything that is tab and space dependent. (hence why I don't like python, coffee script, or yaml for that matter)
Interesting talk (which deals with details I would never thought)..
This was my favorite session from RailsConf 2019
Agreed. Great talk!
I'm new to Ruby, could you give an example how to create a stateless module in Ruby? Can we reference custom modules like so: Kernel.puts 'hello world' # ModuleName.methodName without creating a singleton?
https://www.railstutorial.org/book
https://theodinproject.org
This is neat. Thanks for sharing! I believe that, in addition to the examples listed in the post, we can also achieve similar results with `Enumerable#reduce`. I’m not near a workstation; otherwise I’d benchmark it myself. Maybe I’ll do so later today. Thanks again for sharing!
&gt; we can also achieve similar results with Enumerable#reduce .map{ ... if ... }.compact
Yep enum.reduce([]) do |elem, memo| if elem ~= /foo/ acc += some_elem_transform(elem) else acc end end
Are the lemurs an in joke that I'm missing or just personal taste?
Explicitly passing the same variable for the next iteration is ugly. Also your code has a mistake and so you just proved that it's even error-prone.
Remindme! 1 day
I will be messaging you on [**2019-05-27 12:17:32 UTC**](http://www.wolframalpha.com/input/?i=2019-05-27 12:17:32 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/ruby/comments/bt5cqk/ruby_27_adds_enumerablefilter_map/eoulrlw/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/ruby/comments/bt5cqk/ruby_27_adds_enumerablefilter_map/eoulrlw/]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rubylang] [Ruby 2.7 adds Enumerable#filter\_map](https://www.reddit.com/r/RubyLang/comments/bt7fsf/ruby_27_adds_enumerablefilter_map/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Isn't this the same as a lazy map + select/filter?
Is there a way to use it on a Hash, resulting in another Hash?
What's lazy about it?
That's what I thought too, it's basically a reduce (well, every iteration method can be written with reduce, but still). Having written that exact thing using reduce quite a few times I think it's great to have a method do that. One of the best things about Ruby is the great human-friendly API :)
Using compact ends up being O(2*n), where reduce is O(n). Also, human-friendly APIs are important and at the heart of OOP, that's why we bother having the `alias` functionality.
O.P. is likely referring to [`lazy`](http://ruby-doc.org/core-2.6.3/Enumerable.html#method-i-lazy).
&gt; Using compact ends up being O(2*n), where reduce is O(n). That difference often means nothing in Ruby. You're much better off 'doing more' if it is stdlib stuff written in C rather than Ruby being interpreted. e.g. `reverse.sort` is almost always faster than `sort_by { |a, b| b &lt;=&gt; a }`.
Same as every other enumerable method, `filter_map { .... }.to_h`
Well chaining two stdlib O(n) functions will always be O(2n), and when you can do it with one stdlib O(n) function, it will always be faster. I agree you don't care much about that in Ruby though, I'm all for readability first, then fix performance when needed. Something related though, is that with the new JIT they are working on, they'll rewrite a lot of C methods into Ruby so they can be compiled with JIT and thus, the difference between Ruby and C code will be removed. So you don't have to worry about that. There is a talk from k0kubun on YouTube where he explains that, if you are interested.
Udemy dissecting Ruby on Rails Jordan Hudgens
Most often this can also be achieved by using the grep function.
While we all understand what you mean, for correctness sake, O(2n) is precisely the same class as O(n), O(0.1n) and O(1000n) since it’s about asymptotic behavior. Also, from the benchmark in the article, the speed up is only 10-20% so here we see that while we need to ‘touch’ each element only once, the new method isn’t exactly twice as fast.
More questionable, "cute", additions... &gt; enum.map { |i| i + 1 if i.even? }.compact This is improper use of `#map`, really. Use `#each` with a conditional. &gt; It also gives us a bit of a speed up from its previous counter-parts `#each` + conditional, anyone..? You want to add 1 the all even numbers? 🤔 `map`/`map!`/`collect`/`collect!` + `compact`/`compact!`, `select`/`select!`/`filter`/`filter!` + `map`/`map!`, `reduce`/`inject`, `each_with_object`, `each` + conditional and now: `filter_map` 💥 In the Perl world this is referred to as TMTOWTDI 💪
Good point, it's polynomial order, so yeah, as long as it's not `n*n` it's the same order of magnitude. By the way, I didn't mean it's twice as fast though, I said faster, not how much, but it's good you pointed that out :)
I know you didn’t say it :) It was just that I don’t want people to think that O(2n) is somehow twice as slow as O(n).
It's pretty much the same as `map`- it always returns an array,but you can call `.to_h`on the result, for example: dict = {a: 1, nil =&gt; 'filtered' } dict.filter_map { |key, val| [key, val + 1] if key }.to_h #=&gt; { a: 2 }
Seems a bit pythonic, like one step closer to a python generator.
For naive Bayes like what this uses for classification, there's no reason *not to* - it's trivially cheap to compute. The big caveat is that people need to realize this is not "deep learning" - this is just (very) basic statistical methods. They're still applicable to a lot of problems, but it's hardly a revelation.
Importantly Rumale supports a *lot* more algorithms.
This is exciting, it may be the beginning of ruby`s succession over python
Long one but I really enjoy to watch it. Please continue with these great ideas. :D
O(2*n) == O(n)
Hmm, I just noticed \`to\_h\` doesn't chain very well. \`\`\` irb(main):013:0&gt; \[1, 2,3\].map.to\_h {|x| \[x, x\*\*2\]} Traceback (most recent call last): 5: from /usr/bin/irb:11:in \`&lt;main&gt;' 4: from (irb):13 3: from (irb):13:in \`to\_h' 2: from (irb):13:in \`each' 1: from (irb):13:in \`map' TypeError (wrong element type Integer (expected array)) &amp;#x200B; \`\`\` was really not what I expected.
They've been around for a bit in different mediums: * [Reducing Enumerable](https://www.youtube.com/watch?v=x3b9KlzjJNM) * [Most of my Medium articles have them](https://medium.com/@baweaver) I use them as a tool to teach programming and make it more enjoyable
`#to_h` demands perfection.
This is incredible.
Michael Hartl's Rails tutorial is what I learned from. It was fantastic back in the day (haven't viewed it in quite some time but I believe its been kept up to date).
I'd considered making one later.
Something like this: array.group\_by { |h| h\[:cx\_id\] }.map do |cx\_id, hashes| total\_amount = hashes.inject(0) { |accumulator, hash| hash\[:amount\] + accumulator } { amount: total\_amount, cx\_id: cx\_id, name: "Test Picture #{cx\_id}" } end I don't really know what you wanted to do with the other attributes on the returned hashes like "name" and "id" and whatever else you're excluding from the example. But you can change that all up on the 3rd line
Here's a convoluted example of how you may do this. I'm sure there is someone in here that will do *way* better. ```ruby arr = [ { "id": 1, "amount": 4, "name": "Test Picture 1", "cx_id": 1 }, { "id": 2, "amount": 3, "name": "Test Picture 1", "cx_id": 1 }, { "id": 5, "amount": 2, "name": "Test Picture 2", "cx_id": 2 }, { "id": 6, "amount": 1, "name": "Test Picture 2", "cx_id": 2} ] grouped_by_cx_id = arr.group_by {|h| h[:cx_id]}.values reduced_objects = [] grouped_by_cx_id.each do |group| total_amount = group.inject do |sum, next_item| sum[:amount] + next_item[:amount] end group[0][:amount] = total_amount reduced_objects &lt;&lt; group[0] end p reduced_objects ```
Filter Map would likely be something like this: ```ruby module Enumerable def filter_map(&amp;fn) reduce([]) { |a, e| fn[e].then { |v| v ? a.push(v) : a } } end end ``` Every Enumerable function can be expressed in \`reduce\`, including combinations thereof. That was the thinking behind the talk I gave at RubyConf last year, [Reducing Enumerable](https://www.youtube.com/watch?v=x3b9KlzjJNM). If you take this a few steps further, you can do something interesting by extracting the act of concatenation and make something called a Transducer which I'd covered a bit in [Understanding Transducers](https://medium.com/@baweaver/understanding-transducers-in-ruby-209766372c39). If you really want to go down that rabbit hole you end up in Category Theory land with [monoidial contravariant functors, foldables, profunctors, and some other magic](https://gist.github.com/DrBoolean/fdef9e08352ac42754f1).
That's not a conventional way to write a Ruby array-of-hash. That symbol quoting style looks more like native JSON - that just happens to parse as a Ruby hash as well. You're on track to a possible solution with group_by: data = [{:id=&gt;1, :amount=&gt;4, :name=&gt;"Test Picture 1", :cx_id=&gt;1}, {:id=&gt;2, :amount=&gt;3, :name=&gt;"Test Picture 1", :cx_id=&gt;1}, {:id=&gt;5, :amount=&gt;2, :name=&gt;"Test Picture 2", :cx_id=&gt;2}, {:id=&gt;6, :amount=&gt;1, :name=&gt;"Test Picture 2", :cx_id=&gt;2}] data.group_by { |record| record.slice(:name, :cx_id) } .transform_values { |data| data.sum { |record| record[:amount] } } .map { |item, amount| item.merge(amount: amount) }
This is about the golf-iest I can get it: data.group_by {|r| r[:cx_id] }. map {|_, v| v.inject(v.shift.dup) {|a, r| a[:amount] += r[:amount]; a } } We group by cx_id, then for each group, we take a copy the first row and add the `:amount` values of the subsequent rows in the group to it.
You could probably find a copy of JumpStart's Sinatra tutorial. It got my deployed on Heroku (with some trouble-shooting). And it's pretty easy to following, depending on your level of comfort. And I have a copy I'll share if you can't find one
`tab.group_by {|h| [h[:cx_id], h[:name]]}.flat_map {|k, v| [cx_id: k[0], name: k[1], amount: v.sum {|v| v[:amount]}]}`
While not entirely enumerables, I found [codewars](https://www.codewars.com/) to be good practice for this sort of thing. Many of the problems can be solved using enumerables, or at least as part of the solution. As a bonus after you submit your solution to each problem you get to see other submission (with voting) which often introduces you into some clever solutions you wouldn't have thought of.
I already have a copy of JumpStart Sinatra, and have been following it step by step, but I always get stuck on the Pony Mail gem section where I believe has something to do with my wifi setup. Also I get stuck on the do_postgres part (bundle install gives me that error). Maybe it’s my OS, It probably be something to do with the fact i’m running it on WSL. Which is why I’m asking for more up to date books or references regarding my problems.
So I own [tryruby.dev](https://tryruby.dev). This thread is a quick rundown of what I'm thinking, and I'd love feedback and ideas on how to make this the best it can be for the Ruby community. Naturally, me being me, this is going to involve a lot of lemurs and stories along the way. The fun part will be getting the tech for it working through Opal and React to make a system like this real.
\&gt; ends up being O(2\*n) nah, that's not how it works. O(n) of .compact is negligible compared to O(n) of .map even with trivial mapping functions.
``` ruby -v ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux] pry pry(main)&gt; show-source Class.new From: object.c (C Method): Owner: Class Visibility: public Number of lines: 10 static VALUE rb_class_s_new(int argc, const VALUE *argv, VALUE klass) { VALUE obj; obj = rb_class_alloc(klass); rb_obj_call_init(obj, argc, argv); return obj; } ``` Essentially: ``` class Class def self.new(*args, &amp;block) object = allocate object.initialize(*args, &amp;block) object end end ```
 arr = [ { "id": 1, "amount": 4, "name": "Test Picture 1", "cx_id": 1 }, { "id": 2, "amount": 3, "name": "Test Picture 1", "cx_id": 1 }, { "id": 5, "amount": 2, "name": "Test Picture 2", "cx_id": 2 }, { "id": 6, "amount": 1, "name": "Test Picture 2", "cx_id": 2 } ] A simple way. But change the original array value arr.group_by { |h| h[:cx_id] }.map do |_, grp| grp.reduce { |a, e| a[:amount] += e[:amount]; a }.tap(&amp;:shift) end #=&gt; [{:amount=&gt;7, :name=&gt;"Test Picture 1", :cx_id=&gt;1}, {:amount=&gt;3, :name=&gt;"Test Picture 2", :cx_id=&gt;2}] arr #=&gt; [{:amount=&gt;7, :name=&gt;"Test Picture 1", :cx_id=&gt;1},... so, I suggest you this way. arr.group_by { |h| h[:cx_id] }.map do |_, grp| cx_summary = grp.first.slice(:amount, :name, :cx_id) cx_summary[:amount] = grp.sum { |h| h[:amount] } cx_summary end #=&gt; [{:amount=&gt;7, :name=&gt;"Test Picture 1", :cx_id=&gt;1}, {:amount=&gt;3, :name=&gt;"Test Picture 2", :cx_id=&gt;2}] arr #=&gt; [{:id=&gt;1, :amount=&gt;4, :name=&gt;"Test Picture 1" ..
Thanks for the response! &amp;#x200B; I was at last years RubyConf. I think I attended the parallel programming with guilds talk at the time, so thank you for reminding me about the content I missed! Also, thank you for sharing the article on transducers. &amp;#x200B; I benchmarked the code you provided (100,000 iterations reducing a range of 1,000 numbers). Any ideas for improving the performance? &amp;#x200B; \`\`\` Rehearsal --------------------------------------------------------- select + map 12.227124 0.073947 12.301071 ( 12.318285) map + compact 10.573458 0.113762 10.687220 ( 10.700433) reduce 10.099760 0.034456 10.134216 ( 10.148891) filter\_map (built-in) 9.538983 0.030061 9.569044 ( 9.591195) filter\_map (custom) 29.481435 0.095904 29.577339 ( 29.650903) \----------------------------------------------- total: 72.268890sec &amp;#x200B; user system total real select + map 11.630777 0.055336 11.686113 ( 11.732253) map + compact 9.532696 0.092356 9.625052 ( 9.644272) reduce 9.522715 0.019579 9.542294 ( 9.553010) filter\_map (built-in) 8.653949 0.019188 8.673137 ( 8.678424) filter\_map (custom) 29.384487 0.193329 29.577816 ( 30.249971) \`\`\`
**Update:** I ran the same benchmark on my machine (which is clearly slower than the author's; I digress): ``` Rehearsal --------------------------------------------------------- select + map 12.227124 0.073947 12.301071 ( 12.318285) map + compact 10.573458 0.113762 10.687220 ( 10.700433) reduce 10.099760 0.034456 10.134216 ( 10.148891) filter_map 9.538983 0.030061 9.569044 ( 9.591195) user system total real select + map 11.630777 0.055336 11.686113 ( 11.732253) map + compact 9.532696 0.092356 9.625052 ( 9.644272) reduce 9.522715 0.019579 9.542294 ( 9.553010) filter_map 8.653949 0.019188 8.673137 ( 8.678424) ``` `Enumerable#reduce` performs slightly better than map + compact, but `Enumberable#filter_map` still outperforms them all. Good to know! Thanks again for sharing the article, OP!
I've never seen any reason to not use emacs. Just saying. Use whatever you feel most productive or comfortable in.
Practically any work that you do with data is going to involve enumerable. Manipulate text files, or learn about web scraping. The best way to learn more about it is to have a need to solve problems with it. Any time you are about to write `.each`, find out if there are some better tricks to be used. My favorites that get used every day are `select/grep/reject`, `all?/any?/none?`, `map`, `reduce/each_with_object`. `each_with_object` is particularly awesome paired with the idea that you can assign a default value to a hash. Something like `log.each_with_object(Hash.new(0)){|counter, line| counter[line.split(':').first] += 1}` might give you a hash that shows how many of each line type was in the "log". (The counter and line block args might be backwards. It's opposite to #reduce and I can never remember which is which.)
I don't have any comment other than YES PLEASE. tryruby.org was my go-to place to send people interested in learning programming.
Right. I am not connecting what it has to do with the new `filter_map`. i may be missing it?
The Odin Project is fantastic, though the rails portion draws pretty heavily on Michael hartls book.
There still is: [https://ruby.github.io/TryRuby/](https://ruby.github.io/TryRuby/)
Fair enough. Though if you’re experiencing errors and problems there’s a good chance that new resources might not be able to help. Eventually, no matter what resource your using, you’ll have to figure something out on your own...whether it be how to read Heroku logs, how to switch between SQLite and postgreSQL, or how to ignore an author. Michael Hartl’s tutorial suggests some gem version changes, but I had to ignore those suggestions to make things work. I guess what I’m saying is, if you’re having some specific issues, maybe share the specifics of those and we can help? Or at least point you in the right direction. Most resources are out dated by the time the hit the shelves...so we have to learn how to “patch” things together. And that’s the most programmery thing there is to do..
Rspec tests should be written in a file separate to the thing they are testing - I dont remember the filename convention exactly but I think it's YOUR_CLASS_spec.rb, in which you should require your class. Rspec magic then knows to execute that file based on the _rspec.rb part of the filename. And yes, if the position involves writing ruby code, it's fair for them to test on you this.
\[This\]([https://semaphoreci.com/community/tutorials/getting-started-with-rspec](https://semaphoreci.com/community/tutorials/getting-started-with-rspec)) should answer your issues with getting RSpec up and running. &amp;#x200B; I wouldn't hire a junior if they didn't know how to write basic tests -- it is as important as the operational code.
I realize that "gatekeeping" is becoming an overused (and often abused) term, but I think it applies in this case. Hire juniors that you can teach how to test well.
&gt; Hire juniors that you can teach how to test well. I would fully expect to. I said be able to write "basic tests". And this is an absurd characterization of gatekeeping on many levels, the obvious one being we are talking about what my company would require to want to pay someone a professional salary.
Sure, I can write basic tests. The link you posted is more for getting started with Rspec in rails. I want to be able to test my code in a single file and was wondering if that was possible and how to do it.
Did you read it? Where are any of the instructions Rails-specific?
I guess because it talks about gemfiles I assumed it must be related to framewors. I didn't realise you could add a gemfile and run bundle install for a single ruby file.
&gt; I've tried adding `require 'rspec'` at the top of the file but when I run Rspec in the terminal it doesn't recognise my tests. What the output, your code, and the directory structure? &gt; Is there any way of doing this? You're on the right track. Seems that maybe `rspec` is not finding your tests. Try `rspec path/to/your/file.rb`. Also have a look at `rspec --help` to see the available filtering options. There are many. &gt; And do you think writing tests in a one hour interview for a junior position is expected? Depends on the format of an interview. If you're paring with someone they most likely yes, as they want to see how you will work in their cubicles. Though expectations from team to team vary highly. Usually it's **1**) Solves the problem **2**) approach to problem and how one communicates their thought process. Some orgs claim **2** is more important than **1**, but I would argue this is pure candidate PR on their part and **1** is what they want. If you're doing a whiteboard interview, then testing is less likely to be a concern. They may ask you _how you would test it_ (methods, mocking/stubbing/etc...), but likely no code.
Write a module called `Enumerable2` that requires implementors to define `#each`. Then reimplement all the methods in `Enumerable`.
Are you not asserting that it's justifiable to deny junior programmers job opportunities if they haven't had any exposure to writing automated tests?
Thanks for the reply! I got a bit inpatient and asked on SO. You can see the response and code [here](https://stackoverflow.com/questions/56330352/is-there-any-way-to-run-rspec-tests-on-a-single-ruby-file)
I said I (nor my company) would not hire a junior for a Ruby job if they did not know how to write basic tests.
this
Solved it! Turns out having `require 'rspec'` at the top was breaking it.
&gt; This thread is a quick rundown of what I'm thinking Well that was fun.
Why would you shorten that link to a longer link. What has the internet become.
I second this. I went through it a couple of times and learned a huge amount. I still go back to reference some things today.
understood then, if i have an issue Ill glady post it here much appreciated :)
What is the point? It should have been called \`filter\_compact\` then. When is the "filtering" happening?
Longer link?
[removed]
Twitter "shortens" (alters) links to 23 characters, whether they need it or not.
This seems a bit generic, are there any ruby-specific implementation examples?
It's hard to do click attribution and tracking if you dont force it through their servers first, so /they/ definitely think they need it.
Another use-case (which I've written about) is when dealing with Stripe's card tokens. Say you have a CreditCard object (ActiveRecord): class CreditCard &lt; ApplicationRecord belongs_to :account, inverse_of: :credit_cards attribute :token, :string validates :stripe_card_id, uniqueness: true, presence: true before_validation :create_stripe_card!, on: [:create] def customer @customer ||= account.as_stripe_customer # Stripe::Customer.retrieve(account.stripe_customer_id) end private def create_stripe_card! stripe_request = account.sources.create(source: token) self.last4 = stripe_request.last4 self.kind = stripe_request.brand self.exp_mo = stripe_request.exp_month self.exp_year = stripe_request.exp_year self.stripe_card_id = stripe_request.id rescue Stripe::StripeError =&gt; e errors.add(:base, e.message) throw(:abort) end end credit_card = CreditCard.new(token: "tok_visa") credit_card.save # ... Almost makes the process "fun"
Nice work!
There are benchmark jobs run on every hamlit Travis build [https://travis-ci.org/k0kubun/hamlit](https://travis-ci.org/k0kubun/hamlit)
That is a fair point. I hope to work on some examples in a future post. ;)
The tty gems are all pretty great. Nice scope and solid docs
Please also consider slim. Cleaner and more ergonomic than haml.
It requires reading and mentally parsing the code. Reading and parsing 1/4 of the code and not worrying about closing tags is a huge improvement for me. I use skim which is cleaner than haml.
Anyone have the tldr? Is there a measured performance benenfit?
Rubymine has never worked for me with Rails: tons of falsely flagged errors. I've seen developers use Rubymine with screens full of red squiggles, and they just don't care. I don't get it, to be honest. (In contrast, Jetbrains' PyCharm is amazing, and delivers on its promises.) So for Ruby, I use VSCode with the Solargraph plugin. It has the best ruby support I've seen in any IDE.
My advice: learn a functional programming language like elm or haskell. Then come back and see how you use OOP in Ruby. Me, personally, after having followed that path: I use OOP for Rails models and for [Validated Plain Ruby objects](https://github.com/public-law/validated_object). Otherwise, I so full FP with Ruby: no classes, no instance variables, no automatic variables. Just modules with pure functions. For me, this makes my code easy to test, understand, and parallelize.
100%. That's where i am now too. Modules with pure functions and constants.
It's rapidly changing. FP is on the upswing.
A stateless module is easy: module Math def age_in_dog_years(human_age) human_age * 7 end end
Fuck your spam and your incredibly ironic username.
In your dreams maybe. Industry is still massively dominated by OOP unfortunately.
Why wouldn't you post a link to the actual site? Clicking into it through YouTube or producthunt is definitely a barrier for clicks :)
&gt;Cool! Make sense. Thanks!
Ah ok. Yeah I'm working with Rails too. I have used Pycharm and it's good but so is the support for Python in VSCode. I wonder if Pycharm has good support for Django
is not there yet. - memory is similar - they needs to improve the JIT - they try another approach
I just skimmed this page so far, but the sole idea of promoting Rails as go to platform is something which I really, really like. ❤️
Cheers! I plan to record a demo for each prompt to make the docs even more accessible to newcomers.
Thanks! You're doing some crazy good stuff yourself, the async family gems and falcon project are really impressive. I hope to find time soon to watch your and other RubyKaigi videos.
``` enum = 1.upto(1_000) enum.lazy.filter(&amp;:even?).map { |i| i + 1 } ``` I didn't run any benchmarks. However, this allows for performing all operations on an element at once instead of traversing the collection N times. More broadly, I don't understand why we need a filter_map more than we need a reverse_map, or a zip_map, for example.
Not a tutorial, but I consider The Rails Way 5 essential reading. Dive into it after finishing Hartl's tutorial.
“When it comes to PHP, many developers prefer to build their own frameworks, rather than use existing ones.” - I don’t agree with this part regarding php. I personally see this more with Legacy PHP applications, but feel as though PHP in my day to day is more framework based development. I could be wrong though.
I think you are right. Legacy PHP is in its majority non-framework based. But I have a lot of friends that still work as PHP developers and every single one of them uses Laravel, Symfony or CakePHP.
Beautiful and really useful website. Good job!
Why not did they move to [github.com/ruby/ruby](https://github.com/ruby/ruby) instead of [git.ruby-lang.org](https://git.ruby-lang.org), I wondered.
Ah, I think I understand now, thanks!
Can you run your program from the command line with `ruby your-program.rb` and post the full traceback? One thing that I can see from the above snippet is the `file.` is lowercased, it should be _capitalized_ for example `File.open("Leggimi" "r+")`
Same here. I would add Wordpress to that list.
First place to look whenever you're having issues is the documentation. e.g.: [https://ruby-doc.org/core-2.6/File.html#method-c-open](https://ruby-doc.org/core-2.6/File.html#method-c-open) However, that's not explicitly clear in what you're having an issue with. File.open("Leggimi", "r+") Is probably what you're looking for. Note that there's a comma separating the two parameters. Also, be aware that the file you're attempting to open for reading must exist for this to work. You may want do something along the lines of. if File.exists?("Leggimi") File.open("Leggimi", "r+") end This will check to make sure the file exists before attempting to open it. If you want to be really succinct, you can try something like... File.exists?("Leggimi") &amp;&amp; File.open("Leggimi", "r+") Hope this helps
I use Himl. It's a mix between Erb &amp; Haml.
Just FYI there is a typo under the What is special about Ruby? header. The second to last item has Similar,ly instead of Similarly
I didn't expect a so ~~long~~ complete article.. Very great job! _PS: Regarding the quora question about why estimates are 3 times off related in the beginning of chapter 6... Do the answer on quora is complete? It seems to stop halfway in the story.._
Just wanted to mention https://rails-assets.org/#/ that solves the issue u mention around 8 minutes in : finding a gem for a specific npm package.
Are there many PHP developers like this? Yes, there are. I have no idea how would one want to measure that, or even determine the trend. The fact is though, that I encountered tons of slogans like "I don't want to learn a framework, I can build my own one faster and do whatever I want" in regards of PHP developers. I've never seen a real, resonable Ruby webapp, which wasn't build on either Rails or Sinatra.
I rather prefer to structure specs using AAA patter, so I use \`allow\` and \`expect/have\_received\`.
- [Slides](https://speakerdeck.com/palkan/railsconf-2019-terraforming-legacy-rails-applications) - [GitHub (scripts, links, guides, etc.)](https://github.com/evilmartians/terraforming-rails)
You are welcome :)
I agree that it's a useful practice. How would you change the examples provided in the post using it?
Rubygems are for libraries and tools, not for just any program. Don't clutter them, they are already full of shit.
This is interesting! You could open a pipe to mplayer, or use the FFI to use SDL, in order to display real pixels instead of characters in a terminal, if you wanted to.
That's a good idea. I did play with some old Ruby game framework that used SDL few years back, so it shouldn't be too hard to implement. I should have thought of that. ;) It wouldn't use the terminal window though, right?
No it would either open a new window, or it would use the full screen.
Right. Still, I think it's worth doing as the big "pixels" really make the effect less impressive. I'll try to do it when I get a bit of free time soon. :)
AKA `feature` specs. I recently added the [`puffing-billy`](https://github.com/oesmith/puffing-billy) gem to proxy headless browser access to external sites. Now my specs fail when the CI is slightly overworked. Great gem but browser based tests suck.
Thanks! I really enjoyed this
That's really cool.
You noticed.
This is neat! FYI -- there's a really nice service for recording your terminal session called [asciinema](https://asciinema.org/). It's a lifesaver for showing a coworker errors or logs.
Oh, that's really cool, thanks. I usually just record the window/screen part since that's pretty trivial on OSX, but this will indeed be much better for this.
Really cool! On line 69 of lib/doomfire/terminal.rb you use @thread&amp;.join unless @blocking What is the ampersand syntax in “@thread&amp;”? Haven’t seen that before.
`&amp;.` is the safe navigation operator (introduced in Ruby 2.3 which is also the last officially supported version of Ruby anyway). It's an equivalent of `.try!` so the code doesn't explode on nils. It's mostly there so I can test the stop method without running any other code. These tests are not my best work, I should probably make them more useful :/
Unfortunately, `let_it_be` may add up to flakiness. If you update the object in your example, its state leaks between the examples. Yes, the record is rolled back, but unless you provide `reload: true` or `refind: true` to it, the object itself is modified. A possible mitigation is to always be adding one of those options, but it comes with a performance impact, and it's clumsy. I'm about to submit a pull request to `test_prof` deal with this.
What's the use case here? This seems like a fundamentally risky but also unnecessary thing to do, and there is no indication of when/why you would choose this approach.
&gt; What's the use case here? This seems like a fundamentally dangerous and unnecessary thing to do, and there is no indication of when/why you would choose this approach. Just for development reasons. It may be useful to remove broken data on test servers or locally.
So if I understand, this is for a case where you don't want to simply rely on cascading deletes at the database level. In a case where the correct *production* behaviour is to prevent the deletion of a record that is still referenced by foreign keys in other tables, you can use this gem to still emulate a cascading delete on data that you know is safe to discard, like test data.
Hey can I grab some karma please? Just want to use this site casually, I'm negative
The command prompt said that the comma was an error 🤔. Thanks anyway.
Ok, thanks for the reply
Text is sticking out the right side of the screen on mobile, my screen has 412 device pixels in width.
It is a fresh Ruby feature to hide bugs. You hide the exception in just two chars of code so the application can continue to malfunction and potentially corrupt data. Web development kids love it.
"fresh" == "introduced in 2015 in Ruby 2.3" Riiight.
Well written. Hadn't heard of MiniGL. Any experience with the glu module or know what kind of state that's in? &amp;#x200B; Just FYI another library that I have found good for game dev in Ruby is called Gosu. I don't have any tutorials on it, but a simple Game of Life example available [https://www.devdungeon.com/content/nanolife](https://www.devdungeon.com/content/nanolife)
Yeah you harsh af, b?
Wait count is implemented by looping? That's expensive as hell!
I'm not sure what you're asking here. If you mean in the _real_ `Enumerable` module, then yes it's implemented there with iteration as that is the only sensible approach. Some implementors of `Enumerable` override `count` to provide better performing implementations if they can. e.g. `Array#count` just returns the already known length.
Didn't read yet.. But this is the kind of detailed stuff I want to learn passed standard regular rails stuffs..
An interesting idea
You would probably need to use a pastebin or something and show exactly what you're doing. I can copy paste exactly what's above without issue. irb(main):001:0&gt; File.open("Leggimi", "r+") Traceback (most recent call last): 4: from /home/powder/.asdf/installs/ruby/2.5.1/bin/irb:11:in `&lt;main&gt;' 3: from (irb):1 2: from (irb):1:in `open' 1: from (irb):1:in `initialize' Errno::ENOENT (No such file or directory @ rb_sysopen - Leggimi) irb(main):002:0&gt; That one is expected, because I don't have that file on my system. If I exit the irb prompt and create that file. irb(main):002:0&gt; exit [powder:~] touch Leggimi whimsy.io 0:43:52 [powder:~] irb whimsy.io 0:43:54 irb(main):001:0&gt; File.open("Leggimi", "r+") =&gt; #&lt;File:Leggimi&gt; irb(main):002:0&gt; It works, it has returned the result of the command which is the file object.. irb(main):002:0&gt; a = _ =&gt; #&lt;File:Leggimi&gt; irb(main):003:0&gt; a.read =&gt; "" irb(main):004:0&gt; It returns empty string because I didn't add any content to the file. [powder:~] echo "Hello World" &gt;&gt; Leggimi [powder:~] irb irb(main):001:0&gt; File.open("Leggimi", "r+") =&gt; #&lt;File:Leggimi&gt; irb(main):002:0&gt; a = _ =&gt; #&lt;File:Leggimi&gt; irb(main):003:0&gt; a.read =&gt; "Hello World\n" irb(main):004:0&gt; After making sure that the file contained some data, I'm able to read the data. If you can show more of what you're doing by either copy pasting what you're doing in your terminal and showing the full results, I might be able to help figure out what's going wrong. As you can see from the above, and perhaps the most frustrating phrase in all of programming, "It works on my machine."
MiniGL is a wrapper for Gosu.
Great write-up. Keep up the great work! &amp;#x200B; As you go along, you should include more posts, animations and videos. The first post doesn't have much to show, but ending with a picture of the blank window would still be satisfying, IMO. In the second post, having an animation of the image moving around the window would also be satisfying.
Very nice! I’ve been trying out various structures to define a separation between data, context snd interaction. There was an interesting list of further reading at the end of the post. I also recommend Clean Ruby book (http://clean-ruby.com) which describes the DCI pattern
This is interesting, I have been working on large-scale queue system at my job which basically records a stream of all events that take place. I have two thoughts on your post: 1. If every queue item _must_ be processed, then load shedding seems to not be an option, the way you've described it here. 2. How do you implement "backpressure" without simply moving the bottleneck elsewhere? For example, we are populating our queue from our webservers ... if we put a load-dependent delay on the webservers, then resource usage will decrease, and we may need more webservers ... although I suppose this may be preferrable, because the webserver deployment can autoscale while redis cannot ..
We fixed it already. I apologize for the inconvenience.
It would be really nice to check if the things you wrote make sense and use for yourself, **especially** when pretending to be a representative for paid "Cademy". **About `===`:** &gt; This method is used to check equality in `case` statements. What should it mean? How is "equality in `case` statement" is different from "just equality"? But you can't explain, so you send the reader to... &gt; Feel free to have a look at the `String` class documentation to see how the `Object#===` is overridden in this class. Have you "had a look" yourself?.. It happens so that in **String** class `===` is just a synonym for `===`. The class that could've shown the usage of `===` redefinition is in fact `Regexp` or `Range`. **About `==`:** &gt; The particularity of this method is that it’s more permissive for object comparison. Well, that's a pretty broad statement, while your `Integer` example is pretty narrow. The thing is, `==` redefinition also responsible for comparing objects of the same type (say, `String`s) because the default implementation of equality will consider only the same object equal to itself. So, &gt; when you want to check equality of 2 objects depending on their values and not their types... ...is misleading. **About `#eql?`** You are going into great detail with a super-simple example, without really explaining how `#eql?` is different from `#==` and therefore why do we need it. The explanation (alongside with the better example) is present in [official docs](https://ruby-doc.org/core-2.6/Object.html#method-i-eql-3F) of the method, of all places. To add insult to injury, &gt; When overridden, this method bases equality comparison on the value returned by the `hash` method. ...that seems to be just wrong. To my understanding, the method is used when there is `hash` collision (two different objects have the same `hash`-es), to understand whether they should be really considered the same. So, reimplementing `eql?` as a comparison of `hash` values will make the collision unsolvable. (I will not even pay much attention to the fact that you didn't bother with any links to official docs, or you'd notice that `#eql?` and `#===` despite being factually belonging to `Kernel`, are documented as `Object`'s methods, which makes much more sense.)
&gt;RailsConf Can't agree enough! Going to backport it as a gem as I can't wait to start using it right now :)
thank you
yep DCI is interesting. I didn't read the book you are referring but listened bunch of podcasts where developers were propagating it also tried different tactics from variants articles in my personal projects. &amp;#x200B; I don't mind DCI, If entire development team decides to do DCI and works for them then great. But if there is one developer in the team who don't get it (and is not willing to follow the rules) then all hell breaks loos. So how bounded contexts may help is to introduce some isolation for different styles of coding. &amp;#x200B; For example you can tell that one colleague who don't follow DCI to work only around \`public\_board\` bound context while developer/s understanding DCI will work on the \`classroom\` bounded context =&gt; you will split the layers of influence (I'm talking about the hardcore bounded context solutions, not sure if this would work out with my pragmatic "interface object bounded context solution" listed in the article &amp;#x200B; The main benefit of Bounded Contexts is team organization. People are sometimes the most difficult part for programming :)
Sure thing, please don't forget this article exist :) Within 10 years of Rails coding experience this is in my mind the most important lesson.
Their SSL certificate seems to have expired today. Unfortunate timing .
&gt;If every queue item *must* be processed, then load shedding seems to not be an option, the way you've described it here. Yes. Load shedding IMHO works a bit like [UDP](https://jvns.ca/blog/2016/08/24/find-out-where-youre-dropping-packets/). Your consumers or producers drop packets and there isn't much of an awareness on which messages made it and which didn't. This means it does not work for some use cases like the one you mentioned. &amp;#x200B; &gt;How do you implement "backpressure" without simply moving the bottleneck elsewhere? I think what backpressure does is shield the queue and any downstream systems. It shields those systems and then gives the (producing) client an opportunity to decide what to do (e.g. retry, abort, etc). An example of this in action is what web servers do when they reply with a [429](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) (too many requests). When a system is overloaded (and during an incident in general) it is common to prioritize stability of the system over being able to handle all the requests. Therefore, to some extent backpressure/load shedding provide you with tools in order to mitigate issues even if at the cost of degraded service.
T.I.L. Note , if anyone find this useful
Dude isn’t just a representative, he’s the flippin founder! 🤔 Great post; way better than the article.
So, you don't actually need to `register_driver` for chromedriver in recent Capyabara. It seems to have em built in, you can tell Capybara to use drivers `:selenium_chrome` and `:selenium_chrome_headless` without doing any `register_driver` -- they seem to be built in. I'm not sure why this isn't advertised/documented better, and/or nobody seems to realize this, and all tutorials for using chromedriver with capybara are still using `regsiter_driver`. I'm confused what's going on, not exactly sure when these showed up. The built-in drivers are mentioned in [Capybara README](https://github.com/teamcapybara/capybara/blob/master/README.md#selenium). They've been mentioned "in passing" in the [README since at least Capybara 2.15.0](https://github.com/teamcapybara/capybara/commit/aa0ec97ec75888d6931a5331c2f61aecc992df51#diff-04c6e90faac2675aa89e2176d2eec7d8R335) But I've been using em, they seem to work for me, and I'd rather use them to have capybara's recommended settings that capybara says should work fine with capybara, rather than explicitly provide `chromeOptions` myself that I may get wrong or for which best practices/capybara requirements may change in the future.
I think people are going to trust solnic.
🙃🙃🙃
Since it was created in response to something, an example written in both this and that, showing the relative pros and cons, might help readers understand it.
lunch is something you eat, you might want to change it to "launch", and there is a few others like "memmory" and "remminder". You also typed compose wrong: "docker-compse.yml". But nice article :)
Why not wipe the whole database in those cases?
sorry :) busy day at work. I just typed this TIL note like a moron, thank you for your points all fixed
&gt; Rails Assets is the frictionless proxy between Bundler and Bower. Seems this proxies over Bower not NPM? Given how dead Bower is I'm sure it'll be all that useful.
&gt; Is there something you like or dislike, what would you do different? What do *you* like about `dry-validation`? Which parts of that library are ported across, and what did you keep? What (in more specific terms than "too complicated") do *you* dislike about it? What parts did you choose *not* to port across? What additional behaviour did you add? What syntax did you change?
Haha don't worry about it, it's a nice TIL note :)
I agree that I find dry-validation confusing. I also know that creating powerful/flexible software that _isn't_ confusing/complicated is hard. There are probably "Reasons(tm)" that dry-validation ended up that way, to handle all the use cases it wanted. There is also always maintenance risk in using a third-party dependency, risk that it will stop being maintained, or have bugs that aren't fixed, etc. So, despite finding dry-validation complicated/confusing, I'm unlikely to use a less mature new thing, or even be that interested in spending time investigating it. I am more likely to just use ActiveModel::Validations, and/or just write my own simple thing for something super simple.
It's easy to forget that the operative word in "bounded context" is "boundary." In general, the only data that should be shared across boundaries are identifiers (IDs). The primary exception is the publisher/subscriber pattern, where events (that may contain data) are published from one context and _eventually_ considered by subscribing contexts. Relational data, on the other hand, cannot be shared across boundaries, because if you do, you effectively nullify the boundary, because both sides of the "boundary" would be coupled to the same database. Said another way, boundaries are about encapsulation. Sharing data across boundaries breaks encapsulation. As a result, I don't really see evidence of boundaries in this article. For instance, changes to the underlying database schema are likely to disrupt code in both the Classroom and the Public Board "contexts." A Rails team may find some use of the approaches outlined in the article, but they'd be far better served by establishing definitive boundaries.
&gt; I would like to disagree a bit with Martin. Sometimes I find flaky tests are useful at finding underlying flaws in our application. In some cases when fixing a flaky test, the fix is in the app, not in the test. I don't think you're disagreeing with Fowler; what you're describing amounts to salvaging some value from an otherwise entirely lost cause. As the article outlines, nondeterministic tests stem from mistakes in the code. Prevent those mistakes from being made and test "flakiness" goes away. It's been a few years since I've bothered to run tests in a random order, because it's been a few years since I've introduced nondeterminism in my implementations. I promise it's not because I'm anything special as a programmer, it just takes good habits.
 agree that's why I've enlisted other more hardcore boudary solutions at the bottom of the article. &amp;#x200B; The solution described in the article is exactly what you said =&gt; not strict enough...and that's good :)
&gt; As the article outlines, nondeterministic tests stem from mistakes in the code. Well, it can be mistakes in your code, _or_ mistakes/bugs/misdesigns in your test infrastructure. In Rails-land, selenium integration tests can be famous for being flaky. These _generally_ don't indicate mistakes in your code, but just the difficulty of... well, for one, testing asynchronous javascript code via an automated browser, without race conditions. That don't usually effect the user at all, just the tests. The first step is often figuring out whether it's really a code-under-test problem or just a test-infrastructure problem. As with all race conditions, that first step can be a challenge. &gt; Approach concurrency from the standpoint of what's the least costly pattern to maintain. Actors are easily understood and tested What library do you use to implement actors in ruby? I agree with the goal, but find ruby-concurrent _futures_ to be the simplest possible thing i've found (which sometimes still isn't that simple). ruby-concurrent actors are... not so much. (And ruby-concurrent is only semi-maintained, and kind of left in the middle of a multi-year unfinished refactoring effort making it confusing to figure out what does what :( ). The concurrency story in ruby looked briefly promissing a few years ago with ruby-concurrent, but lately I'm kinda disappointed in it. &gt; Avoid global state. The singleton pattern can allow for exercising a class in isolation that would otherwise be assigned to a global variable (i.e. $redis, ugh). OK, but the singleton pattern _is global state_, if the singleton object has any state. The point of the singleton pattern is a single global object after all... I'm not sure `$redis` is any better/worse than any other way of implementing "single global object", at least it _does_ allow you to change it under test, where [ruby stdlib singleton module](https://ruby-doc.org/stdlib-2.5.1/libdoc/singleton/rdoc/Singleton.html) as an implementation makes that hard.
very cool!
[Ruby2d](https://www.ruby2d.com/) could come in handy here
Is this supposed to be a stopper against memory leaks? Is the rails environment leaky?
&gt; Ruby2d I was looking at that gem already, but I didn't like it having its own native extension (rather than using openGL or SDL or whatever people already have) and I couldn't see an easy way to draw pixels rather than objects. So far I've been able to interface with libSDL2 through FFI, which made the fire kinda working, though with abysmal performance. I'll probably finish it this weekend :)
I'm guessing you have to look at the keyboard in order to type? might be an item for the Todo list.
&gt; In Rails-land, selenium integration tests can be famous for being flaky. These generally don't indicate mistakes in your code, but just the difficulty of... well, for one, testing asynchronous javascript code via an automated browser, without race conditions. That don't usually effect the user at all, just the tests. Indeed, I probably should have mentioned browser testing as a source of intermittent test failures. Regarding the subject, I find that what Kent Beck wrote about testing GUIs back in the late 80s still rings true today: &gt; I don't like user interface-based tests. In my experience, tests based on user interface scripts are too brittle to be useful. When I was on a project where we used user interface testing, it was common to arrive in the morning to a test report with twenty or thirty failed tests. A quick examination would show that most or all of the failures were actually the program running as expected. Some cosmetic change in the interface had caused the actual output to no longer match the expected output. Our testers spent more time keeping the tests up to date and tracking down false failures and false successes than they did writing new tests. &gt; What library do you use to implement actors in ruby? I agree with the goal, but find ruby-concurrent futures to be the simplest possible thing i've found (which sometimes still isn't that simple) I wrote my own [actor](https://github.com/ntl/actor) library that I generally use, but I've never been interested to really promote it much. &gt; OK, but the singleton pattern is global state, if the singleton object has any state. I generally approach singleton classes like this: ``` class SomeClass def self.instance @instance ||= new end end ``` In a unit test, I can call `SomeClass.new` and get an isolated instance for just that test. Code that needs to couple to the singleton instance of `SomeClass` can do so via the `.instance` class method. I'm simplifying the pattern greatly for the sake of getting the idea across. I've found ruby's stdlib singleton module to be pretty useless, for the reason you describe.
* Compaction GC * Pattern Matching * REPL improvement
I find it easier to use `docker ps --filter "name=my-container-name" -q` to get the container id. Here's another goodie: docker commit [CONTAINER_ID] temp_image docker run --rm --entrypoint=bash -it temp_image Useful if the container keeps recycling, and you want to inspect it to figure out where things are going south.
Yum
2.7.0 preview 1 is ready on Heroku https://devcenter.heroku.com/changelog-items/1645
phusion had a product like this years ago, ruby ee or something. check that out
Wow, I hadn't even heard they were working on pattern matching. Neat!
I know, because I made it. :)
If I understand you correctly it's just about providing convenient Ruby packages that are compiled with jemalloc. Since most distributions, if not all of them, does not use jemalloc, this would be a nice alternative. I believe you can do this today without calling it something else than Ruby. You are not actually making a new Ruby implementation by switching its memory allocator (unless you plan to do a lot more). For example, you can use Copr build service to provide alternative Ruby packages like this for Fedora/CentOS. You would just put them under your repository name, and possibly just change the executable name not to conflict with system Ruby.
Yep, it is not an alternative Ruby *implementation*, but a *distribution*.
Oh yeah, it definitely needs a better name, because RubyWhale makes it sound bloated and slow. I know it's for the docker logo association but maybe Orca or something? Google translate says the japanese for "orca" is "oruka" (really? that seems wrong but okay) which would sound rubylike-ish, no?
I'm curious, do you know of any benchmarks for the GC changes?
The speed of GC should not change. They added a method `GC.compact` which will manually move objects you have currently allocated so they are not be fragmented. The goal is less memory allocation.
Always nice to see alternatives, thanks for sharing and I'm flattered that dry-validation inspired your work. Data validation is an extremely complex problem domain. The more people tackle it, the more we learn and the stronger the ecosystem becomes. When it comes to dry-validation itself, I realized that it got crazy complex some time ago and wrote about it [here](https://discourse.dry-rb.org/t/plans-for-dry-validation-dry-schema-a-new-gem/215). As a result, I've extracted (and rewritten) the schema DSL as `dry-schema` and then rebuilt `dry-validation` on top of it and changed its purpose, as it's become a "domain validation" library. Starting from 1.0.0 it uses schema separately from "domain validation rules" and it's got a much more powerful (and simpler) API. On the other hand `dry-schema` is a much much better version of the known schema DSL, which can still be used standalone for things like config validation, simple HTTP params checking etc.
Very nice and understandable article even for me, who never dealt with C stuff
&gt; The speed of GC should not change. It should improve performance for some workloads. Fewer OS pages to troll through during mark/sweep. Also faster allocation in highly fragmented heaps.
Excited about the REPL changes!
My comment was more referring to this &gt; Compaction GC There is such a thing as a "compacting garbage collector" or a copy collector, which is not what 2.7 is bring us. It's not really a GC optimization, it's a one time, on demand, layout optimization. Wanted to clarify that for someone who was familiar with the concept and only skimming.
This is one of the main reasons I don't run the app in containers during development, the experience of running commands in your app is miserable. I do use it for dependencies (databases, etc), it's great for that, but way too many issues to use it for the app itself.
`Enumerable#tally` and pattern matching both look pretty dope.
That's interesting. I learned to do presence/not-nil checking the implicit way, but had a guy with 20+ years of dev experience recommend to use `.present?` because it was more legible and explicit. I wonder if that benchmark justifies it for all cases.
Thank you for your detailed reply! My first attempt to open the file "Leggimi" was to test the functionality of the code, because I'm still learning it. I tried everything to fix this (every solution to this problem that I could find on the Internet), and it didnt still function. The fact is that simple programs like "puts "Hello, world!" give the right result without errors, so I'm confused. I'm going to try what you suggested to me to do anyway.
In general, I agree with the article that `nil` checking be preferred over `blank?`. but question about this part though: &gt; The critical part here is respond_to?(:empty?) where blank? checks the object on which it’s called whether it responds to the empty?, to do this it has to check whether the object is not an instance of some list of classes that implement empty?. Why would it check that the object isn't an instance of the classes that respond to `empty?`? That statement doesn't make sense to me. That approach wouldn't work anyway if the object had a singleton method `empty?` on the object instance itself. If the class isn't overriding `respond_to?` that's implemented in `Object`, wouldn't it just walk up the inheritance/module chain to see if any of those respond to `empty?`?
Man, numbered block parameters are kinda ugly. I also don't get the method reference operator - it's for getting the method object without having to call `method` on the receiver? Like `Math.method(:sqrt)` vs `Math.:sqrt`?
 &gt; Like _Math.method(:sqrt)_ vs _Math.:sqrt_? Yes exactly.
Can you share exactly what you're seeing? If you can't copy/paste the results into a post, can you take a screenshot and post it on imgur or the like for me to see what error you're getting and maybe what you've done to get it? I hate to be persistent in a path, especially if you are doing everything correctly, but, without being able to see it there are a lot of unknowns which means I can't provide a great answer. There's a lot of skills a programmer has to learn in order to grow. You say puts 'Hello, world!' works. ``` [powder:~] irb irb(main):001:0&gt; puts 'Hello, world!' Hello, world! =&gt; nil irb(main):002:0&gt; ``` So, I'm assuming when you try that command in irb you get something very similar to what I pasted. Could you try something different for me and let me know the results? Open irb and enter the following: ``` File.open("testing_for_powder.txt", "w+") { |f| f.write("Hello, world!") f.rewind puts f.read } File.exists?("testing_for_powder.txt") &amp;&amp; File.delete("testing_for_powder.txt") ``` It should look and do something very close to the following. ``` [powder:~] irb irb(main):001:0&gt; File.open("testing_for_powder.txt", "w+") { |f| irb(main):002:1* f.write("Hello, world!") irb(main):003:1&gt; f.rewind irb(main):004:1&gt; puts f.read irb(main):005:1&gt; } Hello, world! =&gt; nil irb(main):006:0&gt; File.exists?("testing_for_powder.txt") &amp;&amp; File.delete("testing_for_powder.txt") =&gt; 1 irb(main):007:0&gt; ``` If it does anything different, there's definitely something wrong. My first inclination though is that you may have typed something wrong, if you're typing these in by hand. The second is the possibility that you're using a different version of Ruby, or that your Ruby install is somehow corrupted. Being able to see the error and/or what you've entered would be helpful. If it does the same thing, and you're still feeling that it's not working, can you tell me what you expected to happen that hasn't happened? Showing the code you're attempting to run is super helpful here.
Interested in how people expect to use this. E.g. a `GC.compact` after every N requests.
expect to see stuff like `price_table.transform_values!(&amp;10.:+)`. depending on your backstory this is either great stuff or appalling line noise
Thank god! We need that. I've been building my own images with Jemalloc (and it includes thpoff for Ruby under 2.6) https://github.com/kaspergrubbe/grubruby-jemalloc and https://hub.docker.com/r/kaspergrubbe/grubruby-jemalloc based off the Discourse dockerfiles. I wasn't aware of malloc_trim(), but it sounds interesting. Your focus on security is also interesting, but for me, and most others, Docker is more of a packaging and deployment platform than a security and isolation platform, but having said that, obviously we should have safe defaults, and things should run with as few permissions as possible.
&gt; japanese for "orca" is "oruka" Japanese language has tons of 'borrowed' words. It also has a completely different alphabet that the roman one english uses, there aren't consonants, but consonant vowel pairs. oruka breaks down to: o =&gt; オ, ru =&gt; ル, ka =&gt; カ. オルカ. So, since there is no stand alone 'r', you end up with 'ru' after it gets re-romanized.
Mostly compacting before forking workers but after preloading the app in web servers like puma.
It's just a syntactic sugar for a commonly used pattern. An example would be: [1, 2, 3].map &amp;Math.:sqrt
Yeah I feel like “obscure and ugly Perl-isms in Ruby” is some kinda universal constant. Remove the flipflop - add a method reference operator.
Yea, I don't know where the author got that but it is certainly not how `respond_to?` is implemented. https://github.com/ruby/ruby/blob/37994bc5322c02a21e8905d373bef802cac91f72/vm_method.c#L2025
hahaha
[https://en.wikipedia.org/wiki/Ugly\_duckling\_theorem](https://en.wikipedia.org/wiki/Ugly_duckling_theorem)
As with everything here, the answer is “it depends”. If you’re explicitly checking that something is nil, and you’re sure the object is always going to be a present object or nil, then yes that’s the way to go. present? gives you a bit of flexibility to accept more kinds of input and deal with it the same way. It helps you code more defensively rather relying on some other part of the code to be correct.
its ugly AF. Looks like an error at first glance. Like you forgot to include a method for the symbol.
how about jit performance?
Good question and a bit hard to answer in detail, but I'll try: So the main thing that I did not want to port from dry-validation is this multitude of different options the DSL offers. What I mean are the different schema types, predicates, macros, rules etc. Those all have different syntax and make it more complicated to grasp what is going on. Also they dont like to mix in a few cases. For example the coercion only works when you use the Params schema, otherwise its silently ignored. Predicates brings in its own logic operators and the macros somehow redefine another dsl for it. Its flexible and you can do a lot with it but at the same time I'm never 100% sure what it does exactly. I hope I can give you a feeling of what I mean. One more thing i did not want to port is that notion of different things between dry-types and dry-validation. They behave distinctly different which adds to my confusion when I use them together. In Definition all "Types" are definitions and validation is simply a composition of multiple Definitions. Thats what i focused on also. Have few base functionalities that can be combined to build complex things. What I liked about dry-validation is the DSL idea in general, and I think you can see it from the examples from Github, that I almost took this over from dry-validation.
You can have a look at this spec where a jsonapi body is validated https://github.com/Goltergaul/definition/blob/master/spec/integration/usecases/jsonapi_spec.rb i have no code for the same thing with dry-validation at the moment but i agree that this would be interesting. I'll have a look into this
This change sounds very promising, but do I understand correctly that the dsl for dry-schema will more or less stay as is? We use dry-validation a lot at the company i work at and it really helped us with validating our apis but its also where we encountered some problems when we had to deal with more complex api schemas. But I'm very glad you wrote this library, it is one of the best for these usecases despite some confusion it causes somtimes ;) Thanks for that!
Is there a solid reason to use irb over pry?
not going to happen. &amp;#x200B; I prefer to get out knowledge out there even with typos rather not publish at all. If I care about grammar and prestige that comes from well formatted blogs I would post my blogs on [Medium.com](https://Medium.com). &amp;#x200B; so the way how I see it I write article on [https://blog.eq8.eu/article/](https://blog.eq8.eu/article/) where I spend usually hours, days weeks, to prepare the content, explanations &amp; arguments. There I do my best to get the grammar correctly (and I usually fail anyway) &amp;#x200B; TIL notes posted on [https://blog.eq8.eu/til/](https://blog.eq8.eu/til/) usually take minutes, max one or two hours. My goal is really to document something helpful. I'm not ignoring grammar but honestly it's the last thing I care about. That's why I always appreciate polite corrections (thank you [BorisBaekkenflaekker](https://www.reddit.com/user/BorisBaekkenflaekker/) &lt;3 &lt;3 ) &amp;#x200B; \&gt; honestly [https://blog.eq8.eu/til/how-to-lunch-rails-console-in-specific-docker-container.html](https://blog.eq8.eu/til/how-to-lunch-rails-console-in-specific-docker-container.html) took me 10 minutes to write. &amp;#x200B; Either deal with it or don't read my TIL notes( as they will be grammar disaster foreveeeeeer) :)
Integrating with OS package managers seems like a lot of work. Do people still use their OS package managers to deploy Ruby apps? I'm pretty sure last time I didn't use Docker to deploy a Ruby app (which is over 4 years ago) I used RVM or maybe ruby-install/ruby-build.
Yeah, I am aware of these technicalities, I just thought they had a native, not borrowed word for an orca. Apparently not. :)
Yes, I was going to say that, thanks!
Thanks! Sure, you're right. Do you happen to know any good free tool for creating animated GIFs?
Don't know what "glu module" is... =/
I would expect him to make th exact opposite suggestion as it's something that's not present in the standard library. Maybe he has 20*1 years of experience? 😬
Eh, nil checks, or implicit nil/boolean checks are fine in almost all cases. The only time present makes sense is if the value could be an empty string or empty collection in addition to being nil. And even then in the latter case calling empty? would suffice, pluss scenarios where the value could either be a string or a collection seem like a code smell anyway.
:)
Just because I was curious myself, they do, but they must have also adopted the english (which is actually latin for whale) term as well. The japanese word 'shachi' (しゃち) is killer whale. [reference](https://jisho.org/word/%E9%AF%B1)
in the company I work for we have full FE BE split (BE is just Rails API) . So FE guys lunch Rails API as a BE application via docker-compose- (that's why they need this TIL note) &amp;#x200B; \&gt; Rails api, sidekiq, redis, postgres, elastic search, .... everything under Docker compose. &amp;#x200B; but us BE developers we code directly on our machines without docker :)
I mean, in the context of Rails, it's standard. And `nil?` is part of the standard library.
When writing a web app (we are in Rails of course), we deal with Strings a _lot_. And when dealing with submitting data via forms, you can get empty strings for text inputs that were blank, a lot. As a result, you can easily wind up with empty strings trickling about throughout your code, and even being saved to the db. In an ideal world, you might want to normalize these to `nil` as soon as they cross the IO barrier into your program (and you might want to use `present?` to do so! or the lesser-known related [#presence](https://api.rubyonrails.org/classes/Object.html#method-i-presence)). But as many of us know, those empty strings have a way of just trickling throughout and even being stored in the db. present?/presence is very useful in a web app. I generally only use it on a variable expected to be either a `String` or `nil`. Or for an Array/nil. In a legacy app, there are a whole bunch of places where changing a singular `nil?` or `empty?` to `present?` is what fixed an edge case bug. If there is a demonstrated performance issue in real apps from a `respond_to?` check -- we could advocate for a PR in Rails that gives `String` (and/or `Array`) it's own custom `present?` that can be written more efficiently in the specific case without the `respond_to?`. But I wouldn't worry about it at all without a demonstrated/measured performance problem. It's _really hard_ to write maintainable/readable/flexible code, and for the most part this is what you should be focusing on, not micro-optimizations of unknown benefit. I think people prefer focusing on the micro-optimizations because it's so objective/quantitative -- either the change was faster or slower -- rather than the more slippery "is this code more maintainable/readable and more open to change?" But I think you're on the wrong path when you obsessively prioritize micro-optimizations. If your code is cleaner with `present?` (and it may or may not be) -- please use it, without worrying about some micro-benchmark on it.
Sure, you can do `thing.nil? || thing.empty?` -- but why not just do `thing.present?` instead? I don't have a lot of cases where a thing can be a String _or_ a Collection. But I do have a lot of cases where the thing can be a String or nil, and I want to treat an empty string the same as nil; or an Array or nil and I want to treat an empty Array as nil. (In fact, `.empty?` is defined on String and Array, so you can *still* do `thing.nil? || thing.empty?` if it could be a String _or_ an Array, I just agree that is rare and probably a bad place to be. But empty string or nil? Empty array or nil? In my experience common, and not necessarily a sign of anything wrong).
I am very impressed by the attention to detail and polish that the `webdrivers` maintainers are giving it. It can be fairly thankless work to work on something like this, something fairly low-level infrastruture that we mostly forget about when it's working -- but we need it! The [chromedriver-helper](https://github.com/flavorjones/chromedriver-helper) gem is what got a lot of us doing selenium tests without headaches over getting chomedriver installed (on local dev workstation or CI) -- but it's been abandoned in favor of webdrivers. Thanks webdrivers maintainers for your work to make webdrivers something that just works and we can forget about too! :)
IRB ships with ruby. I used to use pry, but as IRB got better I switched back.
Looks like the context switching for fibers isn't in yet... does anyone know the status? (Asking because I'm _excited_ about the feature, not because I want to nag :-) )
I would find this super useful, definitely. I would worry about if you (or any collaborators you find) really can keep it up to date as ruby versions are continued to be released. Including quickly getting out your corresponding version when an MRI security patch version is released, cause when that happens one generally wants to update right away. It would be unfortunate to build my infrastructure automation around this, only to have to then switch it back to not this if I can't reliably and quickly get new ruby versions from it. So that might make me cautious to start using it. But if it could be done reliably with quick releases for the long term -- I agree it would be useful.
I've had nothing but trouble with rvm on production machines. I would _love_ to use integrated OS package manager, if there was a way to get arbitrary ruby versions through such. Without that, I build from source, possibly with the assistance of ruby-install/ruby-build, yeah. (Not sure how you'd do ruby-install/ruby-build or if it would be useful with an alternate distro/fork of MRI though). But if it could work conveniently, OS package manager would be preferable.
I use apt to install ruby on production systems. thanks to bundler's `--standalone` feature, I also use apt to deploy ruby projects (apps, services, etc). Y'all have no idea what you're missing :-)
I'm not too familiar with how to record GIFs on Windows, but take a look at [this article](https://lifehacker.com/how-to-turn-any-part-of-your-windows-desktop-into-a-gif-1825787640).
&gt; do I understand correctly that the dsl for dry-schema will more or less stay as is? Yes, it's ~90% the same + it fixed a lot of bugs (like, a lot), and it has new features, like supports chaining, arbitrary meta-data in messages and few more.
There was a bit heated debate about implicit block arguments - [orig. proposal](https://bugs.ruby-lang.org/issues/4475), [request for reconsideration](https://bugs.ruby-lang.org/issues/15723). I would not say *ugly*, but *hackish*, while undermining readibility and internal consistency of the language. Those appeals to the crowd, not enough thought-out but cool-looking features are nothing but signs of inevitable decline and dying-out. Seen that so many times already …
Very good points. I plan on addressing the release speed by: 1. Automating everything. Releasing a new Ruby version should literally be adding a new entry to a config file, and invoking the CI pipeline. 2. Having good maintainer documentation so that anyone can contribute. 3. Making it possible for you to easily build a new package yourself, so that you are not dependent on a third party to release for you.
Any infrastructure that forks will benefit. I added support to Sidekiq Enterprise yesterday: https://github.com/mperham/sidekiq/issues/4181
Seems I touched a nerve.
Love the velocipedia project!
Works great! I use it my project and switched to it from Phony which had some gaps in formats.
It looks like ioquatix's [lightweight selector PR](https://github.com/ruby/ruby/pull/1870) has the best chance of being merged, but it hasn't been yet. You can use the [Async gem](https://github.com/socketry/async) now.
`Array#append` and `Array#prepend` 😎
Hey /u/jrochkind, first of all, thanks for the kind words about the maintainers. &gt; although it's not actually clear to me what the "major improvements" are in 4, there aren't a lot of changes listed and none are obvious to me as "major improvements". /r/lkapoor , want to tell us what you considered the "major improvements" I can now see how the title can be misleading, but I'll summarize what I consider to be the key changes in my opinion. These improvements were gradually added since v3.8.0 to prepare for the big v4 release, and I now realize that it's not obvious from the changelog that they're truly associated to v4. Anyway, here's my list: 1. Caching the drivers (using `Webdrivers.cache_time`) instead of performing an update check on every browser launch. In versions &lt; 3.8.0 (I think), it actually downloaded the driver no matter if you already had the latest version or not. 2. Support for Selenium 4. 3. Added rake tasks (with `Railtie` support) to update, remove, and print current version of the drivers. This is useful to avoid multiple update checks when running tests in parallel. 4. `webdrivers` now looks for Chrome/Chromium binary (for version) the same way that Google's browser launcher and `chromedriver` do. Earlier, it only looked in one location and errored out if the browser binary was not in the expected place. The rest were QOL changes that don't affect the end user.
&gt;https://github.com/telegram-bot-rb/telegram-bot/issues/63 Thanks!
This is a very nice website. I will be using it over the next few weeks and see how it goes. One problem I have with these newsletter is that there's a lot of recycled stuff. What I've noticed since I started reading Reddit more is that damn near everything in RubyWeekly was on Reddit first. This applies to other newsletters as well. Something to keep in mind.
https://github.com/SamSaffron/fast_blank
Thanks! That's an interesting perspective. Come to think of it, I've heard it from someone else, too. I can't think of a good way to avoid it without knowing your browsing history somehow, which would be a bad idea. Let me see if I can think of a way to address that case.
That was an unexpectedly cool response.
I went to check if the article had been corrected since it was posted, but it seems the article has now been removed.
This is just an ad 👎
This post was deleted also.
With the exception of only knowing ruby, is there any reason you would ever want to run Lambda with it over python?
Just an update - after a few days of experimentation I did actually manage to make it work properly. I'm using some very basic FFI bindings to SDL through Ruby's standard library Fiddle module. It probably would have been a bit easier with the FFI gem, but I really wanted to keep the external dependencies to a minimum. I didn't expect to be able to make it work this fast, as I knew basically nothing about SDL before this, so I'm pretty excited to see it working at all (even though it still crashes sometimes, but then I'm not a C programmer, so I guess it's not surprising, heh).
short answer no and for very high traffic we use the jvm. downside is slow start times but its damn fast once its warmed up. most important thing on lambda is keeping it under 100ms because it doesn't matter if its 80ms or 20ms, you get billed 100ms. so if you have a request thats 101ms you just got billed 200ms
I never would have heard of it otherwise and there’s a good chance illl end up using it in the future...
Ads do that sometimes.
I wish more folks would run Ruby on the JVM. Couldn’t agree more that it’s slow to start. It gives you just enough time to strap in because it’s going to be moving fast soon
Ah, didn't notice, good point.
We use Scala. But the great thing about the jvm in general is its stability.
Can you clarify what this actually is? It just sounds like MRI compiled with jemalloc?
* Fullstaq Ruby (the non-Docker product): it is a Ruby distribution. You can think of it as a competitor of \`apt/yum install ruby\`, \`rbenv install\` and \`rvm install\`. It supplies native OS packages for various Ruby versions, which are optionally compiled with Jemalloc or malloc\_trim, allowing for lower memory usage and potentially increased performance. The packaging method allows much easier security patching. * Rubywhale (the Docker product): it is a drop-in replacement for the Docker Inc.-provided Ruby base images. Rubywhale images contain Ruby installations with the Jemalloc and malloc\_trim patches applied. It also improves security by adding a default non-root account and encouraging its use. In contrast, the Docker Inc.-provided base images suggest running everything as root, which as a recipe for disaster.
It's not so much that I encourage using Docker as a security isolation platform. It's that if you run stuff as root in Docker, then it's just *not secure*.
Honestly this feels like a ton of marketing fluff for something that amounts to a couple lines of code. I don't see the need for this to be a 'ruby distribution', these names just add confusion.
Posting links to gems is a problem now?
Main reason for us is to use our existing in-house gems in a serverless context
Original article was written by company I work for: https://railsware.com/blog/ruby-on-rails-ecommerce
This is a wonderful guide, thank you for putting it together!
That was a major concern — thanks for the well spelt out upgrade path!
For some reason I can't upload it... anyway I think that I found the error. Traceback (most recent call last): 2: from C:/Users/federico/Desktop/test.rb:1:in '&lt;main&gt;' 1:from C:/Users/federico/Desktop/test.rb:1: in 'open' C:/Users/federico/Desktop/test.rb:1:in 'initialize': No such file or directory @ rb\_sysopen - Leggimir+ (ERRNO::ENOENT) I guess they updated file manipulation in the latest Ruby version. The command prompt closes itself quickly after running a program so it was difficult to make a screenshot.
Very minor thing: &gt; config.autoload_paths &lt;&lt; Rails.root.join('app', 'bounded_contexts') You don't have to do that in Rails anymore, for quite a while now. Any subdirs you put in `./app` will automatically get picked up as an autoload path. Since, i dunno, maybe Rails 4.0? I don't know that doing it manually will cause any problems, but Rails autoloading/reloading is weird.
I actually use Linux most of the time (though I have created the second post on Windows). But thanks anyway!
&gt; and the necessity of neural networks in rice cookers That's how you eventually get Cylons, you know. How about no? ;)
wow, what a great guide! thanks, Morozzzko!
Oh, ok! In that case, I used to use [recordMyDesktop](http://recordmydesktop.sourceforge.net/about.php) in the past. Looks like [some new options have appeared since then](https://askubuntu.com/questions/107726/how-to-create-animated-gif-images-of-a-screencast).
Functors in Ruby...why oh why....
&gt; Do you have some code like this? No, I don't (though I sometimes have similar code with class methods). If I had I'd write this myself in a couple of lines. Sorry to be harse, I'm glad to see people sharing, but I also think you shouldn't use a gem unless you really need it and it takes more than a trivial amount of time to write/maintain it yourself.
You are not wrong that the jemalloc and malloctrim patches are literally just a couple of lines, but the wag you put it makes it seem as if there is no value in all the packaging work around it, or that all the packaging work is trivial. Is this really what you mean, and if so, can you explain why? Most of the people I have spoken are excited at the prospect of lower memory usage and higher performance. Yet most people also don't know how to patch and compile Ruby, or they don't want to do it because they think it is too big of a hassle. Do you not observe this as well? And if you do observe it, would you not agree that good packaging is very valuable? Do you not see people installing specific tiny versions of Ruby using rvm/rbenv, and then later getting frustrated at how much work they have to do to upgrade Ruby to a newer tiny version? Do you not see people running Ruby Docker containers as root?
There is certainly value in providing pre-built binaries / containers with jemalloc, if you search dockerhub you'll find dozens of them. What I take issue with is that your primary focus seems to be creating a marketable product, not with delivering what is a simple thing. Honestly what I think _you_ want is to associate a name, (Fullstaq, Rubywhale) with 'better performance' when it's not _you_ that is providing that, it's jemalloc. If you're goal here is just to make using jemalloc easier, skip all the marking jazz and just offer `passenger/ruby-jemalloc:2.6.3` docker containers and something equivalent for packages. &gt; Do you not see people running Ruby Docker containers as root? I do, but I think you're overblowing the issue, again in order to construct a market pitch of 'more secure'. While it's a good hedge to not use root in a container, it's also not a current problem. i.e. It's a hedge against an, as of yet non-existent, vulnerability in container sandboxing. You also keep mentioning `malloc_trim` without reference to what you are really talking about. Executing `malloc_trim` on every GC isn't a net benefit, you likely want to execute this periodically. But so far, it's unclear which approach you are taking thus it's unclear what this even means, again 'marketing fuzz', just state _exactly_ what you are doing and why. It's also already possible to use a gem for this and control it yourself which further muddies what the value prop here is.
Oh man, that's cool. So useful
It seems your complaint is mostly on a philosophical level about the acceptability of marketing. I respect that you have such an opinion for yourself, but I will have to disagree with it. Marketing is not evil, marketing is *important*. It helps people discover things of value. Without marketing, people will have to do tons of research to discover such value. Ruby would have died on a hill along time ago were it not for the Rails marketing. Yes, instances of abuse exists, I hate spam as much as you do, but rejecting all forms of marketing is throwing the baby out with the bathwater. There is no such thing as “build it and they will come”. I will certainly not do the community any service by *not* promoting things that I believe are good. You also seem to interpret such marketing as taking credit for Jemalloc’s work. I am afraid you are mistaken, nowhere do I claim that I wrote Jemalloc, I only claim credit for integration and packaging work. I claim that the product gives certain benefits, and I disagree with the notion that I am not allowed to claim such benefits unless I wrote all the code that implement those benefits.
https://bugs.ruby-lang.org/search?utf8=%E2%9C%93&amp;scope=&amp;q=activesupport might be a good place to look.
This is interesting for people wanting to update so I assume that those people already knows the _why_ of using dry-rb.. However, do you have guides about why using dry-rb features over standard rails for example? I've hear many times about dry-rb, but never really understand how it fits with rails.. Thank you btw..
Yea, as usual here you lay out a lot of words. I think it's important that you realize for a lot of people, this is a joke. I mean you don't seam to understand your position in this world, you exist for the same reason Oracle exists: No one gets fired for choosing Oracle. Your end game is brand recognition, not anything else. Stop pretending, you will get the same clientele without it.
Thank you for the feedback! Yes, I am totally missing the *why* point of view — I'm currently discovering the concepts behind those ideas and trying to figure out how they work and what problem they really try to solve. I haven't really worked much with Rails — I've been using Ruby professionally for three years now, and I spent the first two of them *not using* Rails. So I've got a bunch of concepts, ideas and examples of how applications should behave, and none of them are really idiomatic in Rails. So I'm definitely going to write about *why* later, once I fully figure it out. As for articles from other authors, I'm not sure. You can get some of Solnic's motivation at solnic.codes, but I guess we need more articles
`def prime?(num)` `return false if num &lt; 2` `(2..num-1).none? {|n| num % n == 0}` `end`
&gt; Do you have some code like this? No, I don't habitually reinvent closures when then language already has first-class support for them.
Needs more `AbstractSingletonProxyFactoryBean`
Well, if we compare `dry-validation` to ActiveModel::Validations, `dry-validation` has several benefits: 1) Encourages you to separate validations from your Active Record models. This is a good thing, especially in JSON APIs where your public JSON interface will inevitably diverge from your database tables and columns. 2) A simpler explicit functional interface, which is much nicer than having `#valid?` implicitly run validations and mutate the receiver with validation errors. 3) Ability to differentiate between an attribute being missing and it being `nil`. This is important, as a param with `nil` value means you want to nullify the column, while a missing param means you want to leave the column untouched. It's also nice to get different validation errors – `&lt;param&gt; is missing` or `&lt;param&gt; must be filled` – especially for JSON APIs. 4) Its DSL allows you to express more complicated validations with less code. For example, ActiveModel::Validations doesn't have support for [nested data](https://dry-rb.org/gems/dry-schema/nested-data/). 5) ActiveModel::Validations doesn't have type coercion as far as I know. Rails users rely on Active Record to do the type coercion, but sometimes you might need it unrelated to Active Record. I generally consider dry-rb gems to be better re-implementations of their Rails counterparts.
This is obviously either for an assignment or an interview question. If you want help with one of those you should tell us what you’ve tried, your thought process, why you think you’re stuck, etc.
Please don’t help OP cheat.
You want to implement the "[Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)"
It’s not an interview question neither it’s exam
what are the advantages to using python over ruby on lambda? isn’t python even slower?
Depends on what you're doing. Python has the advantage of being a bit more prolific than Ruby these days.
Other stuff you create is written in ruby? You like ruby more than python? Like I'm probably going to end up running PHP of all things in there now.
no doubt, for machine learning tasks. but otherwise, if someone is already coding a ruby application, it makes little to no sense in writing a lambda function in python.
Thank you very much
You should know about modulo. The `%` operator is how modulo or mod is done in Ruby. ``` irb(main):001:0&gt; 9 % 2 =&gt; 1 irb(main):002:0&gt; 9 % 3 =&gt; 0 ``` If you test your number `n` against factor candidates `i` you don't need to test all numbers up to `n` but usually can stop at `n / 2`.
FYI, I wrote a small Gem which wraps up the Rails Validations to use them with plain ruby. I.e., away from ActiveRecord. It doesn't try to improve upon it except for type and nil checking. For me the advantages are not learning another DSL and leveraging libraries that are likely already loaded. [https://github.com/public-law/validated\_object](https://github.com/public-law/validated_object)
Hey! I was looking for something like this, not even kidding. I forget what it was, but I had a combination of functions and methods I wanted to invoke on an object. I'd really like to keep to one consistent flow (either right to left, or left to right). So, e.g.: &amp;#x200B; `object.method1.then(function1).method2`
Wear your downvotes with honour in with case. They are entirely from the mediocrity brigade.
&gt; Do you have some code like this? No, I don't reinvent closures when the language already has first-class support for them.
Could you please set a viewport for mobile users? And also a "what is hot" page would be cool with filters for daily, monthly, weekly
The `parallel_tests` gem works pretty well for us.
ruby-ng
&gt; I forget what it was, but I had a combination of functions and methods I wanted to invoke on an object. How does that even _happen_?
My 3° post of the Ruby Pills series! Appreciate any feedback!
If you run all tests on single powerful CI machine with parallel\_tests then I prepared integration with parallel\_tests to ensure all parallel processes finish work at a similar time to ensure the tests are equally distributed [https://github.com/KnapsackPro/knapsack\_pro-ruby#parallel\_tests-with-knapsack\_pro-on-single-ci-machine](https://github.com/KnapsackPro/knapsack_pro-ruby#parallel_tests-with-knapsack_pro-on-single-ci-machine)
The content seems fine. But you should really proofread. You use "don't" incorrectly a lot.
Thanks for your feedback! I'll take a look!
Consider teams with one single project with a massive, slow test suite. Sure, this may take an hour-long test suite and reduce the execution time down to eight minutes. Fantastic. But consider that the team is getting paid to produce more code in perpetuity, and on their present course, they've already racked up an hour long test suite (when run in serial). How long before new code and tests cause the parallel pipeline to go from eight minutes up to an hour? I'm not suggesting anyone _not_ use parallel testing, but consider combining it with a long term plan that addresses the pathology that got you where you're at in the first place.
I tried to fix some grammar issues, thanks again!
I don't use it because output is fubar
Thank you, I shared it on [Twitter](https://twitter.com/CalligraphicCMS). You should set `og:image` in your page `&lt;meta&gt;` tags. You have a decent image on the page to use for social shares (`/assets/img/ruby_pills.png`), but now you just get a default image when someone shares your post on social media. Boa sorte!
Thank you, really appreciate! I'll take a look how to use these metatags with jekyll.
Thanks to you I could found what was wrong with my Google Analytics tag too! Now I can have my blog traffic metrics!
We all would like to be in perfect world with fast tests but sometimes you make tradeoffs and work on massive projects. You keep trying to write only necessary tests and fast. I worked with teams having 8 hours test suite and running 100 parallel machines and execute whole test suite under 5 minutes. Parallelisation was significant time savings for them.
I’m also not big fan of parallel_tests due to mixed output. I built custom rspec formatter into knapsack_pro gem to collect results and integration for junit formatter so you can have nice summary of failing or slow tests. This works nice if your CI allows to display results in UI, for instance CircleCI.
How come you're spawning a thread to capture the process' output? Seems unnecessary. Either way, you don't [wait for the thread to complete](http://ruby-doc.org/core-2.6.3/Thread.html) nor [wait for `popen`'d process to complete](http://ruby-doc.org/stdlib-2.6.3/libdoc/open3/rdoc/Open3.html#method-c-popen3) Really waiting for `popen`'d process is all that should be necessary.
1°, 2°, 3° are 1st, 2nd, 3rd in english. The current form would be read as "1 degree", "2 degrees", etc... &gt; It doesn’t want to say that you cannot represent an enum with Ruby in many ways (like we all like!) This needs to be rephrased. Maybe: This does not mean that you cannot represent the enum type in Ruby. There are many ways. &gt; Ruby does not have native support to enum... FOR enum... Otherwise: muito bem! 💪
Except... please do not do the second point in practice.
I'm curious, why do you think it's a bad idea?
I'm guessing you meant stop at n^(0.5) = √n, not n/2. If n is composite, any factor larger than √n will have a cofactor &lt; √n, which will already have been checked.
Thank you! I made the changes that you said :)
Thanks for the correction. :)
You should check out this module. [https://docs.ruby-lang.org/en/2.0.0/Open3.html](https://docs.ruby-lang.org/en/2.0.0/Open3.html)
They're using that module.
You might want to mention active record enums.
It's clever for the person writing it and horrible for the people reading it. class Notification include AlertType STRING_VALUE = "value1" SYMBOL_VALUE = :value2 ENUM_VALUES = [ STRING_VALUE, SYMBOL_VALUE ] end That's 100% more clear.
Cool, that's actually what I needed. Let's take a look at your traceback. ``` 1:from C:/Users/federico/Desktop/test.rb:1: in 'open' C:/Users/federico/Desktop/test.rb:1:in 'initialize': No such file or directory @ rb_sysopen - Leggimir+ (ERRNO::ENOENT) ``` I can actually reproduce this by doing the following. ``` irb(main):001:0&gt; File.open("Leggimi" "r+") Traceback (most recent call last): 4: from /home/powder/.asdf/installs/ruby/2.5.1/bin/irb:11:in `&lt;main&gt;' 3: from (irb):1 2: from (irb):1:in `open' 1: from (irb):1:in `initialize' Errno::ENOENT (No such file or directory @ rb_sysopen - Leggimir+) irb(main):002:0&gt; ``` That show's what's being done wrong. Note that if I type exactly what you typed, there's a slightly different error. ``` irb(main):014:0&gt; File.open("Leggimi") Traceback (most recent call last): 4: from /home/powder/.asdf/installs/ruby/2.5.1/bin/irb:11:in `&lt;main&gt;' 3: from (irb):14 2: from (irb):14:in `open' 1: from (irb):14:in `initialize' Errno::ENOENT (No such file or directory @ rb_sysopen - Leggimi) irb(main):015:0&gt; ``` The error you're getting. Which looks like this one. ``` Traceback (most recent call last): 4: from /home/powder/.asdf/installs/ruby/2.5.1/bin/irb:11:in `&lt;main&gt;' 3: from (irb):1 2: from (irb):1:in `open' 1: from (irb):1:in `initialize' Errno::ENOENT (No such file or directory @ rb_sysopen - Leggimir+) ``` This error is caused by not putting the comma character between your parameters. ``` [powder:~] irb whimsy.io 15:34:26 irb(main):001:0&gt; File.open("Leggimi", "r+") =&gt; #&lt;File:Leggimi&gt; irb(main):002:0&gt; File.open("Leggimi" "r+") Traceback (most recent call last): 4: from /home/powder/.asdf/installs/ruby/2.5.1/bin/irb:11:in `&lt;main&gt;' 3: from (irb):2 2: from (irb):2:in `open' 1: from (irb):2:in `initialize' Errno::ENOENT (No such file or directory @ rb_sysopen - Leggimir+) irb(main):003:0&gt; ``` Do you see the difference in the two things I did? Let me know if this works out for you. Also, if you're still getting an error, it's probably because the file 'Leggimi' isn't in the folder you're attempting to run the command. Make sure it's present. You can check that with the following. ``` irb(main):003:0&gt; File.exists? "Leggimi" =&gt; true irb(main):004:0&gt; ``` If it returns true, the file is there. If it returns false, the file isn't there. Also, from your description of the command prompt closing quickly, and your path names I see you're doing this inside of Windows. Can you tell me more about your environment that you're using to write Ruby? Did you just grab RubyInstaller and run that or are you using an IDE etc? If I know more, I can probably walk you through exactly what to do to get it working in that environment. I realize that some of what I'm doing might be a teensy bit weird since I'm working on a Linux environment. Windows doesn't have the 'touch' command, for example. Don't give up! I think we're almost there. :)
And `enumerize` gem, which is a decent extension of these. It's probably hard (or impossible) to use without Rails though.
Thanks for your comment! All I wanted is to provide some basic enum options, mainly to use independently of any gem or framework, like rails... But I can make a second post regarding some gems/frameworks that provide this feature! :)
The thing is that If I try to use a popen ruby block with same structure,I am never getting the pid outside of it to use it in another class while the process is running.
You don't have to use the block form, you just need to wait for the process –and thread– to complete. Check the docs I referenced above but again, I would remove the call to `Thread`, seems unnecessary.
Using enums as a substitute for type is the first stage of the [Switch Statements code smell](https://refactoring.guru/smells/switch-statements). Consider refactoring to use the [State Pattern](https://sourcemaking.com/design_patterns/state) instead. I do this *a lot*, particularly when refactoring Rails code.
Great references! Thanks for your comment! I'll take a look and maybe update the article with your warning, if you don't mind.
good point, I'll add a note that this is needed to do in older versions of Rails. Thank you for pointing that out &amp;#x200B; BTW you deserve a cookie for reading the actual code :) Because it's a complex topic, extensive code example is needed therefore I estimate only 1 out of 10 developers will bother to read the whole thing. :)
You think anyone reading your post is writing in Rails 3.2? :)
If you just want to get it done, I'd use TTY::Command. https://github.com/piotrmurach/tty-command This stuff can definitely get tricky. If you're doing it for a learning exersize, that's cool though.
If you are a golfer, then you should know it.
I've used it for awhile for properly parsing phone numbers from user input to `e164`.
How can we subscribe if we don’t know about their blogs. The tagging idea seems like a good solution.
They had to get their start somewhere!
I don’t understand the point of this? Why are they using ‘self.new’ instead of ‘initialize’? Also, follow up question, what is the article explaining?
How am I going to get the pid If I wait for the process to complete? The purpose I have build this is to save the pid in the DB and be able to sigterm it before it completes. There are cases that processes take 20 minutes to complete.
How is String#b a **hidden** method? It's [right there in the documentation](https://ruby-doc.org/core-2.4.0/String.html#method-i-b).
Basically, he used the wrong method (over wrote new) and returned a string instead of the object then got confused as to why he couldn't do object.a but object.b worked. That's because he was not accessing his object but a string instead, and strings have a "b" method which returns the string with special character codes.
Have you seen the documentation for it? I think it will help you to do it. [https://github.com/javan/whenever](https://github.com/javan/whenever)
I must say I personally enjoy reading from people who post their own posts (and I also enjoy sharing my work &amp; research here that way). A lot of what I learn today (either in Ruby, Elixir or whatever else I use) is coming from posts I would never see, if their authors did not post them. Their work would be just wasted to the bin in most cases. &amp;#x200B; I much prefer having my mailbox empty and go to this subreddit whenever I feel I want to read some Ruby, rather than subscribing to all these blogs. The titles + scoring + amount of comments is mostly enough for me to get an idea of what is relevant to my current interests. &amp;#x200B; That said - it's visibly a real pain for you. I like the tagging idea, and maybe it's doable without too much moderators work?
So then, in summary, this is trash?
As with every programming blog of subpar developers, yes.
No they do not. The code you are looking at probably made use of `attr_reader`
Ah, I missed that. I had it in my head that those were only available after initialize for some reason. Thanks.
What is it you want to read/be posted here? I myself like postings to interesting articles (whether on a 'blog' or not), and prefer them to self-posts asking for help with ruby. I think those should go on StackOverflow or somewhere else. Are those what you prefer, or something else?
Thank you! I used the comma the first time but the command prompt said it was an error. I had 2.5 version of Ruby, but then I updated it with version 2.6. Yep, I just grabbed RubyInstaller to do this. To make programs, I make new files in which I write the code, then I change their names and put an .rb at their end :)
Oh yeah sorry to be misleading with the title, it's actually an article of showing how to use the gem, regardless of that thanks for sharing the direct link to the gem!
+1 would definitely like to see tags. I don't mind people posting blogs/gems but I'm usually more interested in questions/discussion and it's hard to parse that out
&gt; How am I going to get the pid If I wait for the process to complete? This is what **the docs** say: &gt; Non-block form: &gt; &gt; stdin, stdout, stderr, wait_thr = Open3.popen3([env,] cmd... [, opts]) &gt; pid = wait_thr[:pid] # pid of the started process &gt; ... &gt; stdin.close # stdin, stdout and stderr should be closed explicitly in this form. &gt; stdout.close &gt; stderr.close &gt; exit_status = wait_thr.value # Process::Status object returned.
 sudo apt install libffi-dev gem inst ffi may be helpful
Thanks for mentioning this. I need to pay more attention to the docs.
Sidekiq-scheduler is also good if you already use sidekiq.
You could also do something super simple with a small module and a bit of metaprogramming: module Enumable def enum(name, data) # Convert array to hash (numeric enum) data = data.each_with_index.to_h if data.is_a? Array computed = OpenStruct.new(data) define_method(name) { computed } end end class Example extend Enumable enum :idx_enum, [ :foo, :bar, :baz ] enum :str_enum, { foo: 'foo', bar: 'bar', baz: 'baz' } end ex = Example.new puts ex.idx_enum.inspect puts ex.str_enum.inspect
Well, be the change you want to see in the world. Share something useful.
Really interesting! Thanks for your comment!
What is your problem with people posting their own blogs? If I post my blog article then that's shit and noise, but if someone else posted it that'd be fine?
You have the option of not reading.
Fantastic job on the screen recordings. Seeing the code to make the sprite move, then seeing the sprite actually move makes everything feel \_real\_. Keep up the great work!
Oh sorry. I'm a new Reddit user. I didn't notice the article link
Is this any different than swagger / OpenAPI Spec 3 and swaggerhub?
yes
Ah, simple. Thank you.
Just to make sure I have a clear mental model, with enumerable methods like .select and .map, those methods are called _by the block_ and the array or hash for example is _passed in as an argument_, correct? Just been a while with Ruby, dealing with this Java.
I'm surprised anyone is reading my posts :D &amp;#x200B; I see the point you are trying to make, but there are lot of legacy apps that may benefit from this. Contractor Ruby developers out there may still work even with Rails 2 apps (not kidding, no-one cares if there are security bugs if it's internal system. There are still contracts out there for Fortran and Cobol programmers :) ) &amp;#x200B; When you think about that Github only recently (couple of months ago) migrated from Rails 3.2 to 5.2 . Source [https://github.blog/2018-09-28-upgrading-github-from-rails-3-2-to-5-2/](https://github.blog/2018-09-28-upgrading-github-from-rails-3-2-to-5-2/) &amp;#x200B; but sometimes "upgrade to new Rails" is not the best option. Sometimes you want to move application logic to new version. &amp;#x200B; As a developer who rewrote few legacy Rails apps to new versions I can tell you the first step is test coverage, second step is somehow group together functionality and migrate these functionalities one by one. So here is where BoundedContexts may help. Usually you see developers go for "let's refactor chunks of legacy system to microservices" approach but if it's a small business paying extra servers is not an option =&gt; bounded contexts may help. :) &amp;#x200B; Don't know :) maybe this will help to someone, maybe it will not. But the solution is Rails version agnostic. It can be implemented even in Sinatra ;)
I think that you need to make a documentation for w/e you are creating if you want people to use it
It's a mock server based on document. The interface is working after you finish the document.
This looks very thorough! Thanks for posting. I wrote up a similar article recently, but I have yet to post the frontend react portion. That's coming soon. https://mattboldt.com/2019/01/07/rails-and-graphql/
Those methods are called on the collection and the block is an implicitedly passed argument, that is then invoked via the `yield` keyword within a `for` loop in the function.
Practical Object Oriented Design in Ruby is a great book, but i'm not sure its as concrete as pickaxe. For me personally, books are obselete before i can finish reading them. But I feel you on blog posts, the work to filter modern developer blogs is like sifting through landfills for valuable items.
I see. Look at the example directory. I introduce this small project because the basic idea of API is very simple.
Going to butt in because you're knowledgeable to ask a question, if that's ok! I set up a simple sinatra app with ActiveRecord and GraphQL. I finally got it working, but do you know if there is an elegant way to handle requiring the types? I know the newer version of graphql-ruby is tailored more towards Rails with its autoloading, but I'm having to do this: module Types class BaseObject &lt; GraphQL::Schema::Object end class Run &lt; BaseObject; end class Timer &lt; BaseObject; end end So that the Run and Timer types are defined before I require them (since they depend on each other).
There are several deep learning libraries implemented in Ruby today. Red Chainer is the largest implementation as far as I know. But, Red Chainer is a port of the Python library, the writing style is not like Ruby. ruby-dnn is not my work. (I do not have the power to write Deep Learning Framework) But the concept is good. I should contribute with documentation.
Sorry, I don't have much sinatra or non-rails experience :/
No worries, just figured I'd ask. The graphql-ruby docs are pretty awful, especially since they didn't really have complete documentation done before releasing the newest version that has a ton of syntax changes.
I haven't been following GraphQL much lately: Has anyone figured out how to make it not generate a redonkulous number of database calls (or load huge amounts of data) for anything beyond trivial data models?
Are you asking about ruby or Java? I don't know much Java myself.
`URI.encode_www_form` [generates application/x-www-form-urlencoded data](http://ruby-doc.org/stdlib-2.6.3/libdoc/uri/rdoc/URI.html#method-c-encode_www_form), which for an HTTP GET request, results in `?3`, or even `id=3`. It _sounds_ like you want the ID to be part of the URL's path. In this case just tack on the `id` to the path, e.g. uri = URI.parse("https://reqres.in/api/users/" &lt;&lt; id) Note that the above URL has no query, so `uri.query` will be `nil`. Also checkout these: * https://en.wikipedia.org/wiki/URL * https://en.wikipedia.org/wiki/Query_string * https://en.wikipedia.org/wiki/Percent-encoding
**URL** A Uniform Resource Locator (URL), colloquially termed a web address, is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it. A URL is a specific type of Uniform Resource Identifier (URI), although many people use the two terms interchangeably. URLs occur most commonly to reference web pages (http), but are also used for file transfer (ftp), email (mailto), database access (JDBC), and many other applications. Most web browsers display the URL of a web page above the page in an address bar. *** **Query string** On the internet, a query string is the part of a uniform resource locator (URL) which assigns values to specified parameters. The query string commonly includes fields added to a base URL by a Web browser or other client application, for example as part of an HTML form.A web server can handle a Hypertext Transfer Protocol request either by reading a file from its file system based on the URL path or by handling the request using logic that is specific to the type of resource. *** **Percent-encoding** Percent-encoding, also known as URL encoding, is a mechanism for encoding information in a Uniform Resource Identifier (URI) under certain circumstances. Although it is known as URL encoding it is, in fact, used more generally within the main Uniform Resource Identifier (URI) set, which includes both Uniform Resource Locator (URL) and Uniform Resource Name (URN). As such, it is also used in the preparation of data of the application/x-www-form-urlencoded media type, as is often used in the submission of HTML form data in HTTP requests. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Title says endpoint (e.g. server implementation), but body has client code. It seems like `id` probably isn't a variable length argument list, it's just a single argument, and if it's intended to be optional should probably default to nil. In what way is your output not expected? Do you intend to have it read like `users/3`? If so, why are you setting `.query` (which adjusts the 'query' which is the part after the question mark).
I may have missed it as I scanned the article but another very useful feature of PG enums is that you can add values to the enum anywhere in the list and maintain ordering. e.g. `ALTER TYPE my_enum ADD VALUE 'new_thing' BEFORE 'existing_thing'` which alters the sort order. This is something you can't do with AR enums.
Since I think it was missed in the article a bit: This is mostly a devops tool, not something you should use in an application. Additionally most of the examples are _not_ things you should be using this for. The whatever gem literally just edits cron, that means it's not useful for anything resembling an HA environment, even if you have two boxes running your app, both will run these tasks. What you almost always want is something like `resque-scheduler` or `sidekiq-scheduler` with multiple workers.
&gt;It *sounds* like you want the ID to be part of the URL's path That is exactly what I want to do! Tried the snippet you included but did not work. Says no implicit conversion of Array into String.
Take a look at zeitwerk (https://github.com/fxn/zeitwerk). It works really well for non-Rails applications, too (we use it with Cuba, for example).
Brilliant, thank you! I've never thought to look for an auto loader for some reason.
From what I understand, when the Pickaxe book was first published there wasn't much Ruby documentation in English, so it helped make Ruby more accessible outside of Japan. But since then the official docs have improved a lot so there's probably less of a need for it. So instead, I would suggest checking out The Ruby Way (3rd edition, 2015) and The Well-Grounded Rubyist (3rd edition, 2019). They may be less comprehensive than the Pickaxe books, but will more up to date with modern Ruby style.
ruby
I'm not sure what the problem with linking to blog posts is, it's some of the most interesting content in here. There are some links which are of a spammy nature or completely unrelated to Ruby, but those are removed as soon as they're caught. I just enabled flairs and added them to most links on the front page, you can now add them to your submitted links as well.
Also the Addressable library has [support for URL templates](https://github.com/sporkmonger/addressable#uri-templates) though may be overkill at this point.
You linked to the wrong gem :)
Flairs are great. Maybe if you have a bit of time you could add a list of them with links to the sidebar - similar to how r/boardgames for example has theirs? Doesn't have to be pretty but I suppose it would be useful.
There are two separate problems: 1. In order to limit the amount of queries you need to make sure you don't have N+1 anywhere (if you see it - there are plenty of possible solutions like preloading, lazy loading or batching) 2. In order to avoid loading huge amounts of data (which can overload the memory) you need to limit either complexity/depth of your queries or max number of response objects (graphql libraries usually do it for you)
Thanks for sharing this knowledge! Really helpful!
Great article! But I have one question about &gt; This way, we solve one of the common problems of the traditional REST APIs—overfetching. What is that problem? I know it's not time related so I'm guessing data transfer costs? Is it a big difference also when you have gzipped payloads? Of course this varies between APIs, but I think it's a valid question to ask. (However, the problem of underfetching in REST is a very important problem fixed by graphql)
You're right - it should not have a major effect on the data transfer cost, but if we can avoid it, why not? Also, there are a couple more issues: 1. Overfetching increases DB interaction count. For instance, GitHub homepage contains a name and a avatar URL of current user, but here's what GitHub API v3 returns - [https://developer.github.com/v3/users/#get-the-authenticated-user](https://developer.github.com/v3/users/#get-the-authenticated-user). It's definitely not free to load all that data but we do not even need it 2. If you have a public API and third party teams working on clients, you might be interested in how your APIs are used, but in case of REST it's hard to understand what data is really needed and what requests are used to draw the same page. In case of GraphQL it's way easier
Dear OP, so MiniGL works on top of Gosu? If so, could you say more explicitly what it adds?
Yes, it's definitely better to avoid it if you can :) I just think that sometimes this is not that big of a deal. It depends a lot on what kind of API you have.
Hey. I'm sorry, I'm not the author of this piece.
Can you please describe some appliances of it?
OK, I'm a bit confused by your question. some_array.select { |i| i.odd? } `select` is a method called on `some_array`. It has a block passed to it as an argument. A block is a "function" that can take arguments, in this case one. The `select` method on an array takes the block argument, and calls it for each item in the array. The `select` method returns an array composed of all the original array elements for which calling the block with that element as an argument, returns true.
oops — thanks for posting it though
[https://github.com/r7kamura/rspec-json\_matcher](https://github.com/r7kamura/rspec-json_matcher) Here is correct link
Nope. This one: https://github.com/PikachuEXE/rspec-json_matchers
Yeah, look at gems like \`graphql-preload\` ([https://github.com/ConsultingMD/graphql-preload](https://github.com/ConsultingMD/graphql-preload)) and \`graphql-batch\` ([https://github.com/shopify/graphql-batch](https://github.com/shopify/graphql-batch)) &amp;#x200B; We also track number of response objects over time (using Redis) and if a user has exceeded their limit we lock them out for a while. &amp;#x200B; Lastly, we put some hard limits in our queries (literally, \`limit\`) and \`/\*+ MAX\_EXECUTION\_TIME()\*/ \* \` in MySQL.
Huge data structures with deep nesting can also affect UI performance and complexity. Consider an example: you have a list of blog posts. You need to fetch only titles for that list. If you use REST endpoint you will have to download the texts of these posts or create a separate endpoint for titles.
Thank you! Already working on part 4 :)
Hi there! I'm the creator of MiniGL and here's a summary of what it adds: \- Basic physics and collision checking \- Animation based on spritesheets \- Easier to use resource loading methods \- Methods for checking specific events of mouse and keyboard (like double click or checking that a key was released) \- GUI elements (buttons, text fields, drop-down lists, progress bars) \- Camera/viewport control \- Better options for drawing text (multiple lines, left, right, center and justified alignment) The library is also fully documented: [https://www.rubydoc.info/gems/minigl](https://www.rubydoc.info/gems/minigl)
Agreed, every time you add a field with a list type - make sure you set up a limit for that
What's wrong with adding an endpoint for a resource that your client need? The main difference between GraphQL and REST is that the first is more of a DB over http and your clients can do whatever the like. With REST you're designing an application for client that you control and know what the need. In practice it's of course not this simple. But I think that's the way it should be :)
great job!!
Not quite agree. Clients can't do whatever they like with graphql service. Grapqhl data structures shouldn't copy the database. Graphql works in terms of the interface. It provides strictly typed and a fully introspectable way to communicate with your application. The same as REST but a little easier (in most cases) and with documentation out of the box.
I don't think either of those libraries solves the main issues I've seen. Without a way to turn a nested query into a single DB query you end up either sending a lot of database requests or loading a ton of data to later through away, i.e. you reimplement part of your database engine in your application. I haven't seen anything in Ruby really try to solve this, join-monster (https://github.com/acarl005/join-monster) is the closest in JS. This is the very first thing I can into with GraphQL and turned it into a non-starter for any use cases I have.
&gt; It seems wasteful to use multiple iterations How big of an array are you talking about? And what are your time constraints in execution? I think it is important to note that there is no difference in O() time between looping through an array once and dozens of times. If the array is grows particularly large, obviously this will make a constant level difference as size increases. So its not ideal. But I wouldn't let the perfect be the enemy of the good in this situation, unless it actually matters. I think I might treat the array as a processing queue, pulling off each item, and the enqueuing to a processed queue when done. That should keep your memory usage constant-ish, and allow you to do multiple operations on the element.
Sinatra won't expose local variables to erb, at least not to my knowledge. You can do `@name = params['name']` and then access it from the view with @name. Also, params is already accessible from the view, so alternatively you could just use `@params['name']`. Also, you're using the non-printing tag in erb -- usually you'd use that for conditionals, loops, etc; things that don't produce any output (or that you don't want to display). If you want to actually output @name to the template, you need to use `&lt;%= @name %&gt;`.
These libraries are designed exactly for solving your problem. They perform the additional request for each table, why do you want to put everything into a single query? :)
Yes, clients always need to conform to the interface, but with that constraint they are free to do whatever the want. REST is more about serving your clients want they need. Which make it a good fit if you control your clients and know what they need. GraphQL is a much better fit when you have lots of clients (that you don't control) and you don't know what they will need.
I changed that part to this : `get '/greeter' do` `@name = params['name']` `code = "&lt;h1&gt; Hello, &lt;%= @name %&gt; &lt;/h&gt;"` `erb code` `end` And now it gives me this : [https://imgur.com/08NlZBJ](https://imgur.com/08NlZBJ)
Perhaps I should say that by REST I mean real REST (e.g. driven by hypermedia)
They seem to only really solve the N+1 issue which is not what I'm talking about. As a simple example say you have an Order model which has many LineItem. You want to execute a query like "Give me all orders that have status = complete which have at least one LineItem where the product_id = 42". There is no performant way to execute that with separate queries against each table, you have to combine it into a single query which is trivial to write but the ability to map something like this into GraphQL seems far from trivial.
GraphQL tries to hide implementation details as much as possible - my favourite example is many-to-many relationships, e.g. user &lt;- membership -&gt; community. Why client should know what is membership? It needs to be able to perform two things - add user to the community and get a list of members, none of these actions do not require any knowledge about the underline implementation, in case of REST we give the client these details. Imagine that your boss wants you to rename memberships to community\_users, how much code you'd have to change?
In this case I'd come up with the following schema: ``` type QueryType { orders(status: OrderStatusType, withProduct: ID): [OrderType]! } query { orders(status: COMPLETED, withProduct: 42) } ``` The regular query object would handle the backend: ``` class QueryType &lt; Types::BaseObject field :orders, [OrderType], null: false do argument :status, OrderStatusType argument :with_product, ID end def orders(status: nil, with_product: nil) OrderQuery.new(status: status, product_id: with_product).orders end end class OrderQuery def initialize(status: nil, product_id: nil) @status = status @product_id = product_id end def orders Order.merge(status_filter).merge(product_filter) end private def status_filter Order.where(status: @status) end def product_filter Order.joins(:order_items).where(order_items: { product_id: @product_id }) end end ``` You're right, we have to write the query manually, but REST requires to do it either
This is partly a learning exercise and I want to come up with good ideas for handling simulations of 2 and 3-dimensional grids of objects. My current test code is a 1000x1000 grid because it is large enough to do most of what I am thinking of at the moment. Some simulations will use every location, most will not, and one I have in mind will use multiple objects for a large portion of the grid. Time constraints... sometimes there would be none really, just run as fast as possible. Otherwise, quarter second updates or faster would be nice. Of course, if necessary I can always render frames in sequence to play back later at full speed. This is not for a game or production code, it's mostly for fun and learning. I suppose I could just use multiple iterations, each doing as much work as possible until they must do something which adds or removes objects. A queue sounds expensive, but that may be because I'm thinking in C I would use a list and pointers to keep that fast, and Ruby I'm less sure what it does internally. I will probably make a version doing it that way and see how it goes.
Plan on seeing if I can get this running as a 2D game dev sandbox. Thanks for sharing!
I wonder why would you ever want to actually use tables like this.
Check the [Ruby Array documentation](https://ruby-doc.org/core-2.5.3/Array.html#method-i-shift). Ruby arrays have all the features needed to be a simple queue, as well as a simple stack. You don't have to do anything internally with Ruby, you can use that class you already are using.
Actually, I said that, but what you may actually want to do is use the #map!, set elements you want to delete to nil, then call #compact. That may be a relatively straight forward and simple way to implement.
Hm, I've always thought that REST hides the implementation details more, but I guess it's just the same. In your example, as a REST API, the community resource would have link with rel 'join-community' (or similar) as well as a link with rel 'members'. The implementation details is totally hidden. Another benefit is that once the user has joined a community the 'join-community' link will then be gone and instead there will be a link with rel 'leave-community' which makes it very easy for clients to know the current state (and no need to try to join a community that the user already is a part of.
In general, if you find yourself needing to add/remove objects from an array while also iterating over it, you need to re-think your approach. However, in this case, do you actually need to modify the size of the array, or just set "cells" to `nil`? If you are representing world coordinates by the indices in the array, you probably want to set the value of an index to `nil` rather than deleting the objects (which re-sizes the array).
There are two containers that hold the objects. One is just a list (array) of all objects in the simulation and the other is a 2D array of those which have a location (and currently that means all of them). A single "tick" of the simulation runs through all objects in no particular order, and each one frequently has to check its neighbors, so the grid helps with that. The grid does not change size, and it will sometimes be sparse: i.e. not every location will be in use. The simplest sim i can think of and what I am using to test the idea is this: for every object sense neighbors sense location age object simulate tick for that object increase or decrease energy based on sim result if energy &lt; 1 remove object from list mark grid location nil if &lt;various things&gt; create a new object store object in array store reference in grid end of loop That's a gross simplification, but every simulation will follow this basic pattern. In the future, I want to get rid of the discrete grid and use a completely floating point location grid, but that is of course a whole different animal.
&gt; The problem with state machines is that they are fancy wrappers around goto. This may be true of the kinds of "state machines" people bolt on to ActiveRecord, where transitions trigger callbacks, but those aren't exemplary of state machines in general. Outside of ORMs, state machines in software tend to keep the state encapsulated. Rather than coupling to state transitions, downstream users of state machines can often subscribe to higher-level events emitted by state machines. To be blunt, the code examples in this article look like they take one undesirable pile of code salad and turn it into a different undesirable pile of code salad.
It's hard to say what REST is "real" - there is no spec :) BTW, hypermedia changes one of the core REST principles - actions are identified via HTTP verbs, while resources are identified as URLs. Talking about hypermedia, having an action "join-communtity" sounds reasonable, but *what entity* should really it belong to? I guess there is no right answer Let's take a more complex example when we change more than one entity–imagine that we're making a e-commerce app, and user clicks "check out" button. This action changes order's state, books some items in the warehouse, schedules delivery etc. It sounds reasonable to have "checkout" action on the order resource in REST, but GraphQL takes it to another level - it's explicitly stated that mutations change *a part of the graph,* not the exact entity.
I think you may be overthinking it a little bit. I would just use `delete_if` at the end to remove dead objects in a separate pass or `map!`+`compact!` as mentioned by others. Both are fairly efficient, even if it adds another linear pass over the objects.
Understand that base64 is an encoding mechanism, not an encryption mechanism. It takes bytes (in base 256, some of which may be unprintable) and converts them to a base 64 system (all the digits of which are printable). Ruby's [Base64 module](https://ruby-doc.org/stdlib-2.3.1/libdoc/base64/rdoc/Base64.html) deals with encoding and decoding content to and from base64. AES256 is a very common encryption cipher, and is supported most easily though Ruby's [OpenSSL bindings](https://ruby-doc.org/stdlib-2.5.1/libdoc/openssl/rdoc/OpenSSL/Cipher.html).
did they give you the keys for the aes256 encryption?
Fwiw you can configure the cron jobs to only run on 1 host. Via Capistrano roles
I don't know how to add 'flairs' to a reddit post. Where can I find instructions?
Ruby is a general purpose programming language. I like to use it for a lot of tasks, particular 'enhanced shell scripting' https://www.devdungeon.com/content/enhanced-shell-scripting-ruby https://www.devdungeon.com/tags/ruby
Probably should know... 1. Python or Ruby 2. Java or C++
I don't know about the course you have taken so you might already saw the OOP parts of ruby.. However Ruby is *really* OOP, I mean the most oriented one between many languages _(have you already tried for example `send` with `:+` or simply doing `1.+(2)` for example)_ So you might find useful to learn how to deal with OOP (I mean the **correct** abstraction of the problem you want to solve) and especially with common design patterns (take a look at Martin Fowler website, it's relevant even if he gives many Java examples) Another great resource is books from Sandi Metz.
&gt; I was dumbfounded by the ruby on rails course - I couldn't wrap my head around it. How useful is Ruby without Rails - and what should I do to better grasp what Ruby on Rails does/is? Rails is for making websites. It uses a lot of conventions that appear magical to minimize the work you need to do to accomplish this. You would probably need to work directly with a rails guide. A lot of rails for a beginner is learning about patterns Rails uses, and you sometimes have to accept them without any real explanation as to how or why they work. &gt; should I be learning this as a first language? It depends on your goals. Ruby is great for having easily readable code. I've used it professionally for over a decade and I do anything in Ruby given the option to do so. I've also done Java, Python, some C# stuff, javascript, etc. I think Ruby is a great teaching and learning language because of its interperted nature and introspection options. You can call .method on just about anything in Ruby to get all the available methods on that object, for example. Ruby also has a great community. So learning Ruby means you can reach out to an open and supportive community for assistance.
&gt;Ruby also has a great community. So learning Ruby means you can reach out to an open and supportive community for assistance. I've noticed, there's already a lot of comments! As far as my goals go... I've been working a couple jobs for roughly a year now but I'm not happy with them. The most interesting part of my job is using VBA in excel, and I'm trying to get back into programming. I've even considered going back to school and getting a compsci degree - I was always decent at math and logic, but never had a real drive to learn programming before now.
C is incredibly foundational. Almost everything that isn't itself written in C or a C derivative is written in a language that is written in C (or a C derivative), and runs on an operating system that is written in C (or a C derivative). The C standard library and its idioms and behaviours are pervasive in modern computing, and Ruby is no exception. To understand C is to have a permanent advantage when working with everything you subsequently encounter. It is however quite cold and forbidding on first approach. It's not a "fun" language by any means. It was my fourth language, the learning curve is steep, and there's not many opportunities for a beginner, but if you find one, take it.
With your first language you also learn concepts with language quirks and syntax. Those concepts are what really matters. Once you understand how to do things, you can do them in other languages without a lot of work. Particularly if the language is similiar. Learn Ruby, learn about [SOLID design](https://en.wikipedia.org/wiki/SOLID), learn about writing tests, learn about language specific tools. Then learn another language.
&gt; It's hard to say what REST is "real" That's true. There is a dissertation (which I haven't read 😓) but it's more difficult to say what real REST is. Actions in REST are actually identified also via link relations (and the http verb that should be used is normally specified in the API documentation). I agree that it could be difficult to decide which resource should have the "checkout" action, but the order resource seems reasonable to me. &gt; but GraphQL takes it to another level - it's explicitly stated that mutations change a part of the graph, not the exact entity. I'm not sure I fully understand the improvement. Comparing to programming styles, do you mean that GraphQL is more like functional programming and that you don't need to bother about which object should respond to a certain method? If so, I like object oriented programming 😀, but that's just a matter of taste.
Seems like I'll be learning for quite a while. :) Thank you for the advice!
It's for creating value objects I use this heavily in service classes I have service class file template like this: ```ruby # frozen_string_literal: true require "contracts" require "memoist" require ::Rails.root.join("lib/contracted_value/core") module OperationNamespace class Operation extend ::Memoist include ::Contracts::Core include ::Contracts::Builtin class Inputs &lt; ::ContractedValue::Value include ::Contracts::Core include ::Contracts::Builtin # attribute( # :attr_name, # contract: Any, # refrigeration_mode: :none, # refrigeration_mode: :shallow, # ) end private_constant :Inputs class Result &lt; ::ContractedValue::Value include ::Contracts::Core include ::Contracts::Builtin # attribute( # :attr_name, # contract: Any, # refrigeration_mode: :none, # refrigeration_mode: :shallow, # ) end private_constant :Result Contract Result def call # Do something Result.new end def self.call(*args) new(*args).call end def initialize(input_hash = {}) @inputs = Inputs.new(input_hash) end private Contract Inputs attr_reader :inputs end end ``` I also use value objects in workers: ```ruby # frozen_string_literal: true require "contracts" require "memoist" require "sidekiq-symbols" require ::Rails.root.join("lib/contracted_value/core") module WorkerNamespace class Worker &lt; ::ApplicationWorker extend ::Memoist include ::Contracts::Core include ::Contracts::Builtin include ::Sidekiq::Symbols include ::WorkerMixins::Queue::Something::Concern class Inputs &lt; ::ContractedValue::Value include ::Contracts::Core include ::Contracts::Builtin # attribute( # :attr_name, # contract: Any, # refrigeration_mode: :none, # refrigeration_mode: :shallow, # ) end private_constant :Inputs def perform(input_hash = {}) @inputs = Inputs.new(input_hash) # Do Stuff end private Contract Inputs attr_reader :inputs end end ```
This is a cool article. I always love it when a method that accepts a block is a solution to a Ruby problem because it feels like "true" Ruby!
I used to use values gem: ```ruby class Result &lt; ::Value.new( :transactions_price_spacious, :transaction_counts_grouped_by_months, :transactions_last_month_price_value, :transactions_last_month_price_growth, :transactions_total_price_growth, :transactions_last_month_volume_growth, :transactions_last_month_volume_value ) end ``` It's ok until I start using contracts And specifying attribute twice is annoying for me Also there is no freezing for input values Before using values gem I use interactor for a short while But the main issue is the input and output are "too free" There are several issues for adding DSL for stricter input/output - https://github.com/collectiveidea/interactor/issues/92 - https://github.com/collectiveidea/interactor/pull/82 - https://github.com/collectiveidea/interactor/issues/67 - https://github.com/collectiveidea/interactor/pull/135 - https://github.com/collectiveidea/interactor/issues/140 But it takes forever for them to merge those changes (still pending after N years) Also the input and output are mixed together (for "organizer" feature but I never use it) (No way to opt out)
Here is the question: A string has been passed through three separate encryptions in the following order: Original -&gt; Base64 -&gt; AES-256 -&gt; Modified Polybius -&gt; Final. Write a method that takes this triple encoded string mystery_string = "BHFCCBEGEFFAECGFEDFHEBDBFAAHEHECEAFDHDADEHHHBGHEFBGBGFCBABGHHDEGDECADCFFGGDFBEEDFDAFDGHC" and fully unencrypts it to its original state. The method should output the fully decoded string to the console. Add the answer as a commented line at the end of your file.
I’m new to Ruby the past few months as well. I second “Practical Object Oriented Design” by Sandi Metz and suggest you also pick up “The Rails 5 Way” by Obie Fernandez and “Eloquent Ruby” by Russ Olsen. I know it seems weird to buy programming books these days but that’s where the best Ruby knowledge lies.
&gt; You're right, we have to write the query manually, but REST requires to do it either Yes but that is kinda the point. To me the main 'pitch' of GraphQL is the picture of a clean API that lets the frontend query data how it wants it and request only the data it needs. What I find in reality is that for anything non-trivial the beautiful facade crumbles immediately. You end up writing things like you have here, which is fine, but in practice there are often dozens of these types of queries that you may have to implement, it gets ugly fast and when it does it becomes unclear if anything has been gained over REST.
I'm a rubyist but I don't do website development, so I never touched Rails. Ruby is fine without Rails. You can do a lot of things with it.
Very unusual to perform base64 before AES. Normally you'd go the other way to produce an encrypted by stream and then convert it into something that survives copy paste (think ssh keypairs!). All you have to do is run the reverse of each operation in reverse order, though. You'll have to have the decryption hey
cheald gave you good resources for the how. But basically you just need to reverse the polybius cipher https://en.m.wikipedia.org/wiki/Polybius_square if it's modified you may have to write logic to do this yourself. Then you use openssl to decrypt the resulting string. Then you use the base64 library to decode the result of the last step
Eloquent Ruby and POODR, you hit the jackpot, congrats on picking those up in the beginning, you made the right choice!
Rails is about conventions and repeated patterns around inheritance and MVC. If you follow the Rails way it does make sense after a time. Although IMO the Rails community has gotten a lot better at decomposing a lot of the "magic" out into more plain old ruby type of design patterns but there will still be a lot of wth with respect to Rails. It's specifically for serving a website though. I often joke that ruby shops at some point always use it to build a content management system, e.g. like wordpress. I know it's "hello world" type of app is usually a Blog in 5 minutes type of app. Ruby is great for scripting though if scripting is more your aim. Maybe try to build a gem (hint use bundler's gem command to make it a lot easier) as a intro exercise on how to build a ruby library. It will familiarize you with patterns for requiring/loading files, how to namespace, etc. The original Twitter was a Rails app and was notorious for not scaling. Which is the usual joke about rails. It can scale but there are languages that do it better. The main reason Rails is popular is it's fairly easy for a developer to code things up in it. A lot of the Rails/ruby community has also yearned for better threading, data immutability, and a functional programming language and left ruby for Elixir. You might want to check that one out too. There is a Phoenix Framework that is very similar to Rails but since it's a compiled language that runs on the Erlang VM it tends to be a factor of 10 faster, e.g microseconds (Elixir) vs milliseconds (ruby). Although you can also do stuff for embedded devices, see [Nerves Project](https://nerves-project.org/), which opens up things with Arduino etc. The upcoming 1.9 version will bring a new feature called releases which should be pretty cool. Also Jose (the creator of Elixir) has said the language is almost what he describes as feature complete and will probably not change massively but will be maintained unless the need arises. That would bring a stability to the language which is also something I really like. It makes sense though as it's built on Erlang which is rock solid and has been around the block. As an example a website that uses Elixir is bleacher report. It's still pretty niche though so if you're looking for employable it may not be a good path. If the goal is basic programming expertise, most of the Java devs I work with right now really like Kotlin with runs on the JVM and it'll allow you to build Android applications amongst other things. If it's not your jam you should probably at least learn C or Java to make yourself more employable as those are the core enterprisey languages right now. Also if employability is the goal, you should learn JavaScript (esp something server side like Node). That is probably the one language no one really actively seeks to learn but always wishes they knew better. Its got a lot of warts and IMO the standard practice of JavaScript developers is to trend toward the next new shiney, which can be super annoying for continuing education. But learning the core concepts in JavaScript will make you employable almost anywhere in the world no matter their "main" language. Another good one would be Go. It's generally used for compiled binaries that be dropped onto servers and Google created it to be an improvement on C for deploying into their server environments. IMO it's an interesting language that probably shouldn't exist because it's kind of a 2nd system where Erlang was the first system and IMO Erlang does it better, e.g. supervision and the need for guard code. The main limitation cited is usually erlang's requirement for the BEAM but that seems wrong to me. Although by no means am I saying learn Erlang as that definately won't make you highly employable. Apps written in erlang would be the original WhatsApp. It was what allowed them to do that type of app as a bootstrap as it has pretty minimal hardware requirements. Also checkout R as that's used in a lot of shops that do more stats type of stuff. Python is a good one too as the less enterprisey shops will probably be using python in some fashion. If you're really just looking to learn more about CS. You should also learn to use git (or mercurial) for managing your source code. I have found a lot of CS majors graduate with little to no skills in git, which seems insane to me but is the truth. Other things that are somewhat hot right now in CS are graph databases, think Amazon product suggestion, but learning a database in general like postgres or maria would be massively helpful for you too. No matter what you choose to do remember to have fun with it! :)
You may not *want* to. You may be inheriting a legacy database. For clarity, this is not a new feature. It fixes a bug where spaces were allowed in custom table names for SQLite and MySQL databases but broke if connected to a PostgreSQL database.
I can't say there is a functional flavour. The idea is something like "graph works with entities, some of them are connected, you can ask for any part of the graph you want and you also can change any part of graph you want", so it tries to avoid any groupings by entity (= "resource") or anything else
It depends on the application, for instance if one makes the admin panel–REST sounds like a perfect choice. However, having multiple filter criteria in one GraphQL field is fine–client is not forced to use all of them in one query. \&gt; there are often dozens of these types of queries that you may have to implement GraphQL is responsible for providing the *interface* to the client, so writing queries sounds like a problem of a different layer :)
Did you run bundle install?
No, but can running this cause some problem?
Well a graph is made up of nodes. And the nodes are connected (related) to each other in a certain way. This is basically the same in all systems regardless if you call them nodes, types, entities or resources. The difference is how you interact with the API. Typically you can't change all parts of the graph, you need a mutation for that (in my short experience there's not a 1 to 1 mapping of queries and mutations). If an action in REST modifies resources beyond the resource exposing the action then it should be documented. It's been a fun discussion and I've gained some new insights into GraphQL, but I don't think we're getting any further. Agree to disagree? 😀
Oh, definitely over thinking it, but some of that is on purpose. Going to continue playing around, and might try profiling some of this to see how much it really costs.
Consider learning Sinatra first if you're "dumbfounded" by Rails. The core concepts are the same and they're very similar, however Sinatra is far simpler and doesn't give you this huge boilerplate you have to come to terms with.
From last I remember, EC2 storage is ephemeral. Data is stored in EBS but application and OS dependencies will have to be re-setup on shutdown (and restart).
Thanks. I think I have to install bundler and gems again.
Totally agree, getting another point of view is the reason why we all are here :)
This article has a number of issues: \- "With threads we can use concurrency." is a confusing statement when it was previously stated: "When talking about concurrency I will talk *only* about the “managed by interleaving" type of concurrency." \- On Ruby you absolutely can create 10,000 threads or more if you want. I'm not suggesting it's a good design, but it's at least possible. \- "Can we make use of Parallelism with Ruby too? Unfortunately no." is misleading since you absolutely can either with multiple processes with MRI, or using JRuby/TruffleRuby which don't have a GIL. \- "The reason that Ruby uses the GVL is based in its philosophy: **Make programmers happy!** It is very hard to write multi threaded programs. The GVL makes this easy as you can not have a [deadlock](https://en.wikipedia.org/wiki/Deadlock) or other nasty things that would occur very easily in multi threaded programs." is actually not really the reason. In fact, even with GVL, your can make a program that will deadlock quite easily. The actual rational is explained here: [https://github.com/ruby/ruby/blob/trunk/thread.c#L11-L48](https://github.com/ruby/ruby/blob/trunk/thread.c#L11-L48) \- "TruffelRuby" is spelt incorrectly. &amp;#x200B; Good effort, I think you can improve the article :) Let me know if you have any questions.
Thanks for your answer! Am i mistaken that every Ruby thread is one OS thread as well? If so, is it right that theoretically it is possible to create this many threads but the os would have to switch context so often, that it would not only be unpractital but also you could decrease the performance of other services running in the same machine? &gt; "Can we make use of Parallelism with Ruby too? Unfortunately no." is misleading since you absolutely can either with multiple processes with MRI, or using JRuby/TruffleRuby which don't have a GIL. In this context I was talking about CRuby, I mention the other implementations at the bottom where I clearly state that parallelism is possible there. But you are right that it is misleading to say you can not use parallelism in CRuby because of multiple processes as unicorn is using this mechanism. Thanks for the hint, I have improved this part. :-) &gt; "The reason that Ruby uses the GVL is based in its philosophy: Make programmers happy! It is very hard to write multi threaded programs. The GVL makes this easy as you can not have a deadlock or other nasty things that would occur very easily in multi threaded programs." is actually not really the reason. In fact, even with GVL, your can make a program that will deadlock quite easily. The actual rational is explained here: https://github.com/ruby/ruby/blob/trunk/thread.c#L11-L48 I read the link you posted several times, but I can not see another reason for this. But of course, you are right, it is possible to write threaded Ruby programs that will run into Deadlocks. But the GVL helps a little bit as far as I understand it...
&gt;Am i mistaken that every Ruby thread is one OS thread as well? Some older version (&lt;= 1.8) used green threading model. Modern MRI uses 1:1 model. &gt;If so, is it right that theoretically it is possible to create this many threads but the os would have to switch context so often, that it would not only be unpractital but also you could decrease the performance of other services running in the same machine? It depends on how you design your system, but if threads are doing blocking I/O, context switching is less of an overhead. On a 32-bit system, it's possibly to only create 1000s (maybe up to 2000) threads, because of address space limitations. &gt; I read the link you posted several times, but I can not see another reason for this I understand, it was quite a technical summary, so let me explain. Essentially, the GVL is a lock which stops code from modifying VM state in parallel. As you know, simultaneous modification of data structure can cause corruption, so we use locks to sequence multiple threads accessing the same data. In Ruby, everything is mutable - even classes and methods can be modified at run-time unlike other languages (e.g. C). The link I gave you explains the different kind of approach you can take to managing locking. You either have one lock for entire VM, or some kind of fine grained locking mechanism. Fine grained locking can actually be slower and more tricky than a single lock for everything, so it can be a better solution. Even with GVL, you can have deadlock and other thread issue. It doesn't save you from that. It only protects VM state from data corruption (e.g. two threads trying to define the same class).
I feel like an article dealing with concurrency in ruby should talk about sidekiq and the scalability achieved by clustering many ruby servers behind a load balancer. Any long running requests can often be designed to run as background jobs making the requests return much quicker and then any server can execute the job. And any issues with global locking on one server doesn't affect the next server if we're running 3 or even 10 servers behind a load balancer. It may be less efficient than just having non blocking IO but servers are usually cheaper than developers anyway so it seems a very fair tradeoff.
*What I've noticed since I started reading Reddit more is that damn near everything in RubyWeekly was on Reddit first.* Statistically, that's unavoidable. Reddit is real-time. Ruby Weekly is a once a week snapshot. So Ruby Weekly can only be ahead of Reddit if it gets exclusives or unearths things that no-one else found already and posted to Reddit. Our real added value is in the context we place the stories and our summaries/writeups which adds extra depth to *why* something is relevant. Reddit does not have that. If you just want a bunch of headlines randomly smashed onto a page, then Reddit is quite fine for you :-) We provide context, background, and frequently tie stories together. I'm going to run some analysis over this because I quite frequently see things included in Ruby Weekly then reappearing on Reddit, but I'd like to have the actual numbers to cite on that. We surface a lot of releases that Reddit simply doesn't notice first, but I appreciate it doesn't always *feel* that way due to our weekly schedule.
I know what you mean, but the article purposefully didn't focus on app architecture but only on MRI Ruby - except at the end - and how to make concurrency work in one process. I plan another article where I want to focus on sidekiq &amp; co and how to create an infrastructure that can handle many requests.
Never stop learning. I'm at 19 years in the field, still learning every day. AWS, mobile dev, machine learning, theres more than I could ever learn in my life, and more keeps getting added.
I think it depends on if the AMI is instance-backed or EBS-backed. But even that shouldn't matter if he's building the AMI himself and baking the tools into it (what I'm gathering, possibly incorectly, from his description).
You can click the interface and see if your instance is EBS-backed or not, it looks like this: https://imgur.com/SbrlpZP
Yeah it is EBS-based. Would this help in current situation?
I'm not sure how to do it on the old reddit, maybe the option is there after you submit a post. For the new reddit, when you're submitting a post: https://i.imgur.com/eqv1ZRh.png
What happens when your state transitions take longer than the lifetime of a deploy? Serialize and restore stacks?
`gem install bundler`
Ruby can be very powerful without Rails, as an scripting language you can use it to automate things, check [Chef](https://www.chef.io/) for example. I've seen a lot of recommendations about Ruby being the first language, I see this absolutely fine since Ruby is entirely Object Oriented. From the C family I only recommend C# with Microsoft pushing .Net Core, C# is getting stronger among startups and open source projects. Stay away from Java, you don't want to deal with all the verbose it has, I think you already noticed it.
The downside to learning Ruby as your first language is that you won't want to program in anything else, because Ruby is so pleasant to use.
You should be able to call `#method` on *literally* anything, right? It's defined on Object, I think. Anyway, yeah, Ruby is great 😃
This is a gross oversimplification. The right or wrong language for someone to learn will depend on multiple factors - including but no limited to: the problem they want to solve and what programming experience they have.
Not really, it just means that your storage isn't ephemeral, meaning what you had on disk before the reboot should be the same after the reboot.
Even if it's EBS-backed, depending on how ruby is installed, the dependencies may have to be setup again, especially if we are relying on system ruby. Because of this, EC2 should not be thought of as a dumb server but to be deployed and brought up/down using infra/deployment tools or scripts.
It seems like you use capistrano to deploy (based on the directory structure), maybe if you redeploy with capistrano it would take care of everything, including starting Puma?
Bundler is installed.
Got it. Thanks very much. Let me try it.
Not literally anything, but nearly. There is a BaseObject class that Object inherits from, and I'm not sure that everything in Kernel inherits from Object. But its so rare to deal with any of those esoteric things.
Also, I think you should run that command in the \`current\` directory, and not the \`shared\` directory.
Offside: try my book [https://i-love-ruby.gitlab.io/](https://i-love-ruby.gitlab.io/) , tell me suggestions so that I can improve it.
Yeah I believe methods are objects as well. I've never really dealt with anything this esoteric, just find it interesting. I've always been really drawn to the way Ruby is put together with the whole everything's-an-object approach. Once it clicked for me it made working in Ruby so simple and elegant. That was ten or more years ago, and it's still my favorite language to code in by far.
You mentioned JavaScript, but most other recommendations I got from programmers was that it is a 'bad' language. I liked writing it, but was put off of it by all the negativity.
No tests? :(
The approach is interesting although you might want to ensure each redis instance is HA or you might get a bad situation where some keys are lost/unavailable.
I'm aware of crystal, i've never been interested. Part of what Ruby's strengths are, is dynamic typing and interperted execution. Crystal having ruby-esque syntax doesn't intrigue me. I have done some personal experimentation in elixir, which I love.
Have you looked at `Array#flat_map`?
Like I said it has it's warts. Smoothing out a lot of them is the reason things like jQuery and Lodash JS libraries exist. I think most developers brand it bad because it has grown somewhat organically and haphazardly and sometimes defies logic or eschews great design in favor of good enough. However it's used everywhere, whether people admit it or not. No language will make you employable at more organizations than JavaScript as it is the de facto front end language. Add to that it's uptake on the server side via node.js and with options like TypeScript that compile to JS it's heavily leveraged. While TypeScript and it's comparable options exist, you should still understand vanilla JS though IMO. Personally I hate having to program in it most of the time because it's state isn't always transparent, i.e. what is 'this' actually representing, and it is event based so everything is a callback, but bad or not, if employability is your goal, you should consider it.
Did you run this from within your project dir? I find myself needing to gem install bundler from within the project
Fair enough man, I can see what you mean. I haven't messed with Elixir any. I'll have to take some time to play with it this week. What do you like about it?
Elixir gives a pleasent, ruby-inspired, syntax to the BEAM runtime. BEAM is the runtime used by erlang. It is designed to be a functional, distributed runtime. I'm blown away by it because it solved a lot of production issues we have today, ~20 year ago. It just had it all wrapped up in erlang, which isn't the easiest syntax. Elixir can use erlang libraries and modules directly, which opens up OTP, a huge set of battle-hardened patterns and modules for building applications. OTP (Open Telecom Platform) is what Ericson (thats the Er in Er lang) has used for decades in its back end telecommunication platform. Features that elixir has, inherited from erlang and BEAM: functional language supervision tree a new OS independent form of processes hot-code reloading fault tolerance as a first order concern - it has failover - it has auto-restart It's designed to work on multiple nodes - load balancing is built-in - data sharing across nodes is built-in This is all just off the top of my head. There is so much to this ecosystem.
It's a part of my (Andrzej Krzywda, Arkency CEO - on the left) conversation with Artem Sarkisov (on the right), the marketing manager for RubyMine, JetBrains. &amp;#x200B; \- 300.000 professional Ruby programmers \- over 1M of programmers who use Ruby
You are asking the wrong person, I think OP ran his bundle exec within the shared directory instead of the current directory.
Raw prototype. Will be added soon.
yes, definitely!
Damn, that sounds pretty cool. Definitely going to mess with it now. Thanks for the info 😊
PR added with a few specs :D
Thank you! Merged.
Isn't this is a clone of [https://github.com/nhosoya/omniauth-apple](https://github.com/nhosoya/omniauth-apple) ? This sure does looks like it based on comparison on this file: [https://github.com/nhosoya/omniauth-apple/blob/master/lib/omniauth/strategies/apple.rb](https://github.com/nhosoya/omniauth-apple/blob/master/lib/omniauth/strategies/apple.rb) [https://github.com/kirillshevch/omniauth-apple/blob/master/lib/omniauth/strategies/apple.rb](https://github.com/kirillshevch/omniauth-apple/blob/master/lib/omniauth/strategies/apple.rb) &amp;#x200B; Thumbs up on making it available on ruby-gems, but I don't think it is 'fair' to only adding yourself to the authors/contributors. Maybe add an original author to the gemspec and/or Readme?
I like your approach. It brings clarity while still being practical rather than dogmatic.
I’ve been recently experimenting with state machines too. I focused on implementations where each state is represented as a class. Here is an example - https://github.com/arkency/aggregates/blob/master/duck_typing/project_management/issue.rb
Although news is 1.5 years old, I decided to do the _comprehensive changelog_ (with explanations, links to docs and discussions, navigation and stuff) akin to one I did for the 2.6 (see same site). As usual, found some undocumented features in the process, PRs to Ruby docs will be the next thing to do :)
pitchfork time! --------E
Maybe I missed it ... but why would there be 700,000 programmers who use Ruby that aren't considered 'professional'?
True, but the original was released under MIT, so there's nothing _legally_ wrong here, but ethically a credit would be nice :)
Amateurs, people who program for fun, college students, school students, people who sometimes write scripts etc
Agreee
So what is the purpose of GraphQL? As far as I can see, it has none. If fact it complicates matters. You have this abstraction that _doesn't work_ as soon as you do anything interesting with it. What have you saved? The backend team updating the 'client driver' at the same time?
This is _nice_, thanks!
This is awesome! Learned about a bunch of new features
I'm a professional programmer/developer/engineer, but my main languages are C++ and Javascript. I have used Ruby professionally. If I get my choice, I pick Ruby over C++ for applications. I use Ruby far more than Python, Java, and a handful of other languages that I am familiar with and could get a "Hello World" or Fibonacci sequence to print without resorting to the internet to look up functions to call. I would not call myself a professional Ruby programmer. I would say that I am a programmer who uses Ruby. Of course, I am just one anecdotal case.
thank you! :)
Jekyll is written in Ruby. I suspect that counts as "using" Ruby?
Consider sending your PR to the original author of the work https://github.com/nhosoya/omniauth-apple from whom OP shamelessly ganked the code without attribution.
Raw stealing of code more like? You didn't anything from https://github.com/nhosoya/omniauth-apple except moving one magic string to constant (and for some reason not the others).
a normal person would have cloned the repo and just added their own changes so that the original author is in the git history – no need for more credit that that even. The problem is that OP didn't even bother to make any substantive changes so tried to hide the fact.
Wow, my first gold on reddit! Thanks, dear anonymous redditor, I really don't think that I deserve that. To clarify, my goal isn't to start a 'witch hunt' or 'pitchfork time', just to let the original author be known. Opensource contributors are putting their time to let us, end users, do less. Trying to 'ride the hype train' by being the first in the list of omniauth strategy gems available by any mean necessary isn't a good thing. &amp;#x200B; As a 'thank you' for someone out there spending their money on that Reddit Gold for me, I will try to contact the author of original repo and making sure he knows his work is appreciated.
Thank you for this, an excellent summary. The examples are very helpful.
just curious, how does the rails team keep track of which PRs will be merged and made into a release? is there a project management roadmap/planner thats public somewhere?
You filthy stealer! You should ashamed of yourself. Read your profile, github, rubygem make me so disappointed.
No clear info on how they define “use” - but my suspicion would be that they’re counting at least 700k developers using Homebrew (written in Ruby) for Mac software management and developer tool management.
It's worth noting that this code will only work with activesupport loaded: ``` klass = owner.to_s.capitalize.constantize ```
aha, thanks, i have blocked out that there is a new reddit and indeed use the old one. i'll look for it next time i post.
Honestly, I have the same question
There's something I didn't get... It's 1.8x faster than the old code... But it's still 3x slower than not caching at all?! _(for small parials)_ Does anyone know why? This sounds non logical (I mean the result is actually the opposite of what's intended)
If there is nothing to cache the process will introduce overhead. But you don’t cache plain text partials in real apps. Usually there are very slow operations including SQL queries and so involved in producing data for partial. It’s just not feasible to test the caching process if the underlying operation is orders of magnitude slower. The results would not be interpreted correctly because there would be just fractional difference even if you make the caching operation few times after.
This is a succinct and very efficient way to summarize a changelog (loved the _"Reason"_ part). It should be mandatory for all the changelogs elsewhere to be like that!
This abstraction does not solve complicated queries problem because it was not *designed* to solve it. It's just a language to talk with a backend, but it has some major benefits compared to REST (besides all that graph and "hide implementation details" philosophy): 1. No underfetching - we can get everything we need using a single query, so we limit network interactions 2. No overfetchin - we do not require backend to do any useless work loading the data we're not gonna need 3. API schema out of the box (it's part of the stack) - you have up-to-date docs out of the box and you should do *nothing* to make it happen, it just works 4. Predictable backend behaviour - spec describes how execution engine should work (e.g. queries can be executed in parallel, but mutations are run sequentially). Technically it means that there is no difference between GraphQL app built with Ruby or Node or whatever else - if they have a same schema they will work in a same way 5. Subscriptions - in case of GraphQL a mechanism for delivering updates is a part of the specification 6. Strict type system - execution engine validates requests *before* passing it to your resolvers, which means that when client passes a value to an Int argument you can be sure there will be Int, otherwise engine will send client an error and you should not do *anything* at all to make it happen 7. Mutations are technically just fields and they have a returning type - you can change something and get the updated data immediately, without making any additional requests 8. GraphQL was designed to make frontend/mobile developers happy - I guess they can add up to this list :) No need to read complex docs and make query sequences
Sorry, bad wording. "use" meant "touch the Ruby source code to some extent". So no, those who use apps written in Ruby were not included. I also *assume* that the number of Homebrew users should be significantly higher (although, I don't have any data that would confirm this).
exactly, thank you
Can't we use Enumerator#lazy filter and map
Yes, it was based on this gem. And I agree that it would be better to fork, but it looked like "abandoned prototype". So I added this info to https://github.com/kirillshevch/omniauth-apple/blob/master/CHANGELOG.md Let me know if nhosoya is ready to support this gem, I'll transfer repo for him.
All open PRs will be (reviewed and) merged and made into a release... PRs don't stay open if they're definitely not going to be merged. Unfortunately they can spend rather a long time in that state, depending on how much review attention they get. Beyond that, there's no planner (public or private) other than [the milestone](https://github.com/rails/rails/milestone/63) -- which only appears close to release to track blockers.
Til refining methods
*"abandoned prototype"* Updated 2 days ago, wat.
or just focused on other languages who occasionally write ruby
Apparently calculating the cache key for the partials can sometimes be more costly than just rendering the content. IIRC, the details are in the ending keynote of this years railsconf, performed by /u/tenderlove .
Done!
I love your changelogs, I always learn a bunch of things I didn't know.
it’s still not too late to actually fork and work on it. let the commits speak for themselves.
Faster partial rendering results faster response time. Please don’t forget to give 👍 or ❤️ to this PR
Hi, &gt; because for each image we use only one host Why it's important to have _only_ one host for each image? Also, in the context of the ActionController who is putting the `source` argument into that proc ?
I guess to avoid that a page-refresh will nuke the local cache of a browser, which could happen if the method was purely random.
Rendering and returning is faster than calculating a hash key, lookup cache, rendering, storing in cache and returning.
It’s bad practice that came from trying to get around browsers limiting the number of concurrent connections to the same host. But now with SPDY and HTTP/2 this actually works against you for loading speed. And it results in more DNS requests, so it’s probably slower than just using a single host.
Ok this makes total sense!
Thanks indeed this makes total sense..
This is great. I would mention in the readme one downside that if you have more than one class that doesn't implement the required methods, the VM will exit at the first and not notify you of the others until you fix the failing one. Because the implementation depends on `at_exit` and running `exit` you'll be stuck with having to restart the program to find others. But please correct me if I'm wrong, I haven't run the code
Very nice.
Are all modern browsers on HTTP/2?
Great job man
Really nice! We've been using this pattern in some of our API's... I'll give it a try! Thanks!
This is cool. A good addition would be a sort of static check that all the interfaces are implemented. Like `Behave.check_all!` that raises an error if one of the classes is missing a required method.
You should check with the developer on the existing Contracts gem. He's desperate for a maintainer and you could probably combine what he has with this what you're doing here.
Yes, they all support it. https://caniuse.com/#feat=http2
I looked at the demo at https://rbdoc.github.io/rdoc-generator-solarfish/example_output/ More demos, like of the different themes, would be cool. From this demo: This is indeed much nicer styling than the default rdoc (which looks like a web page from 20 years ago). But I miss the 'search box' from the default rdoc template, that lets you search for a class, or a method. Even just class searching would be useful, although both would be great. If it had that, I'd try to use it for all my projects. I don't want to futz with customization or even picking a theme, I just want something that looks good out of the box. (The default rdoc templates definitely don't, and are in dire need of updating).
Cool! I think you're right, but I haven't tested yet. &amp;#x200B; I'm not sure if \`at\_exit\` is the correct way to go about things though, it's also causing me issues during test which I've opened up an issue on rspec. &amp;#x200B; Would appreciate if someone else has got any idea on how to be able to call my method (which needs the method on the \`behavee\`(?) defined first)
Thanks man appreciate it :D
Cool! I'm hoping to integrate this into swapping out adapters for testing purposes. &amp;#x200B; Hope you find a good use for it, do open up an issue if there's anything weird you encountered!
Well with the way that \`Behaves\` is implemented it actually does raise an error if the classes are missing a required method - there's no need for a runtime check like \`Behaves.check\_all!\`, because it'll throw an error when the file is loaded, not when your program runs, hope that makes sense! Ah, great point in regards to the \`Usage\` part. Looking back, it looks like I don't show enough of the actual usage (no example of actual raising error). I think I'll add a little more!
Thanks for bringing it up! That was actually the first thing I saw when I was googling for something like \`behaves\`, but I don't think \`behaves\` does the same thing as \`contracts\` , but will take a closer look on \`contracts\`!
Two things 1. If you don't `require 'set'` before `require 'behaves'` it raises an error. You should `require 'set'` in your gem code 2. Using `at_exit` to show the error seems a bit wierd to me. Probably you'd want to know the error before the code even runs, which is why I suggested the explicit Runtime check
Obsolete and counterproductive advice from a notoriously spammy marketing blog. I'd block them, but then I couldn't downvote them.
Ah, I was initially bootstrapping the idea elsewhere, so might've left out copying \`require 'set'\` :p But the strange thing is this has been passing the tests, mhm. Yeah in regards to \`at\_exit\`, I do think it's a little weird. The point of \`at\_exit\` though is so that you can put your \`behaves\_like\` at the top of the file. Because code is evaluated from top to bottom, there's no way for \`behaves\_like\` to know what method the class has implemented, unless you put it all the way down at the bottom (which is ugly and unconventional). I'm trying to look for an alternative if there's one, mhm. But apologies, I still don't really get what you're trying to say. \&gt; Probably you'd want to know the error before the code even runs But this is exactly what \`behaves\` does right now - it'll raise an error when you load the file. Where would you put \`Behaves.check\_all!\` if it was implemented?
It might seem like an edge case but not all code "exits" before it is run. Consider a webserver for example. I wasnt aware that at_exit runs after a file is required, i thought it was when the parent process ended
Welcome to the Ruby club! I think that [Ruby Monk](https://rubymonk.com/) is a good place to start.
A solid* next step is using the attributes API to instantiate an object, rather than a string, for each enum value. The result is an elegant construction of the strategy/state patterns. * pun intended
* Keep an array of the indices you want to delete, or * Do some work inside the delete_if block. You're not limited to just making the "delete or not" decision inside there, you can do anything.
I'd use [RubyMonk](https://rubymonk.com/) for studying the concepts and [exercism](https://exercism.io/my/tracks/ruby) for coding challenges and mentoring on best practices.
Perhaps you could have `behaves_like` accept a block and you define your methods in the block, which you would proxy to or something or perhaps otherwise include back into the calling location, and then run your check at the end of the block.
In addition to exercism, I'd suggest [RubyMonk](https://rubymonk.com/)
https://github.com/JoshCheek/ruby-kickstart is amazing. Teaches ruby via computer science puzzles. Fun and addictive.
This is cool! I’ll see if I can try it out at work. Great job!
 [https://learnrubythehardway.org/](https://learnrubythehardway.org/)
Thanks for posting. I‘m learning Ruby atm and this article was very insightful
Thanks. Currently, only a single theme is available. Regarding to the search box, I think it would not be very hard to implement this. Could you please open an issue and describe what functionality would you expect?
glad that I can help ;-)
Thanks for the kind words man! Do open up an issue if you find anything weird! Contributions are very welcomed :)
Good job. To be honest, I've always followed the first approach you've described (the "NotImplementedMethod" one). However, I've alwasy been sure there could be a cleaner way to do that. I've aded it to "Awesome Ruby" now https://ruby.libhunt.com/behaves-alternatives
What kind of things do you want to do?
A small web application where i'm gonna fetch this API: [https://www.balldontlie.io/#get-all-teams](https://www.balldontlie.io/#get-all-teams) . Nothing too complicated.
What framework are you using for the app?
Rails
Thanks buddy
Please define "best" **¯\\\_(ツ)\_/¯**
Thanks
🙏
🙏
Net::HTTP
Haha yeah, i mean the most simple to use and efficient :)
Faraday https://github.com/lostisland/faraday
Oh wow that's very nice of you, thanks so much!
Maybe this can help you: https://twin.github.io/httprb-is-great/
Cool idea! But I feel that's a bit over the top since it changes how people write code, but thanks I'll try it out!
[http://i-love-ruby.gitlab.io/](http://i-love-ruby.gitlab.io/)
We've been using Typhoeus, and it's very simple to use, flexible and powerful. You can easily make parallels requests with it to via it's Hydra.
That would probably come down to personal preference.
I imagine the functionality could be copied from the standard template... not sure if it comes from yard or rdoc, but the one you see all over, right? Here's an example, look at the top-left: https://www.rubydoc.info/gems/rails You've seen this before, no? This is the 'default' I still see most people using for autogenerated documentation. Yours has much better typography. But it gives up that feature (and maybe others? I'm not sure if yours is YARD-based and has all YARD features? I also need YARD "Extra files" feature).
https://github.com/jnunemaker/httparty
For simple GET requests, you can get away with open-uri. Example in irb: require 'open-uri' require 'json' pp JSON.parse(open('https://www.balldontlie.io/api/v1/teams').read) {"data"=&gt; [{"id"=&gt;1, "abbreviation"=&gt;"ATL", "city"=&gt;"Atlanta", "conference"=&gt;"East", "division"=&gt;"Southeast", "full_name"=&gt;"Atlanta Hawks", "name"=&gt;"Hawks"}, ...
Don't forget to close that file handle! io = open('https://www.balldontlie.io/api/v1/teams') # ... io.close
If you're just going to slurp it in one go: body = open('https://www.balldontlie.io/api/v1/teams', &amp;:read) Or perhaps slightly tidier: body = URI('https://www.balldontlie.io/api/v1/teams').read
Thanks. In theory I knew about this, but for some reason it never occurred to me that an open file descriptor is created and kept from this short one-liner.
Yes, if you need performance, use this
Interesting read. Two comments: first, stop using the word "obviously", if it's obvious then why are you pointing it out and explaining it? While it might be obvious to you, your explaining it is a good indication that whatever your explaining probably isn't obvious to your audience. Second, proof read! You wrote a decent article here, but it's mired in grammar and spelling errors which detract from the point you're trying to make, you also mix up tenses in a few places which was confusing on first blush. Also, I find it incredibly useful to have someone else proofread for me after I have done an initial proofreading pass. I think there's a sub on reddit to find proofreaders, I'd even be willing (all ya gotta do is ask!). Anyway, I think a little proofreading is all you really need to take this article from good to great! Lots of really good info here.
I like this one the most, straightforward APIs, great wiki with examples for every case in their Github repo.
There’s nothing that really sticks out here (all are pretty dated) but you might something that suits your needs. If not, it should serve as a good jumping off point to roll your own. https://www.ruby-toolbox.com/categories/QR_Codes
Even before HTTP2, it's been a decade since browsers stopped respecting the 2 connection per host in the HTTP 1 spec.
Thanks but I forgot to mention where I've already looked. I used the rqrcode for creating qr code. Gems listed here are mostly for creating qr code. I've tried qrscanner but it seems outdated as I can't even install the gem on my system.
 ~/src/tmp/webrick[1986] $ find . -type f -print0 | wc --files0-from=- | grep total 18696 total :P
Always a controversial topic. You can make everyone happy and just use [HTTPI](https://github.com/savonrb/httpi).. If you need throughput use [Typhoeus](https://github.com/typhoeus/typhoeus), though I think installing it may require compilation as it has libcurl C bindings, if that's a problem. Otherwise, Net::HTTP is fine, really. Interface is not AMAAAAAAAZING when it comes to non-GET/POST verbs. In v2.6 they added write timeout option. Exceptions are not advertised (`Net::ReadTimeout`, `IOError`, `SocketError`, `SystemCallError`, also see [Timeout Errors](https://github.com/gsamokovarov/timeout_errors)), which sucks, but *1*) most Ruby libs don't advertise and *2*) code I've seen that uses Faraday, RestClient, etc... usually never handles exceptions properly anyways so... * [`Net::HTTP.get_response`](http://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html#method-c-get_response) * [`Net::HTTP.post`](http://ruby-doc.org/stdlib-2.6.3/libdoc/net/http/rdoc/Net/HTTP.html#method-c-get_response) For other verbs you can do: require "json" r = Net::HTTP.new(endpoint, port) r.use_ssl = true unless port == 80 r.body = JSON.dump(hash) r["Content-Type"] = "application/json" connection.start do |http| http.request(Net::HTTP::Put.new(path), JSON.dump(data)) end
self is the default receiver, if method is called without a receiver it is sent to self. There are corner cases like in case ``` def blah=(x) end blah = 13 ``` is parsed as a local variable assignment, in which case ppl usually do explicit self : `self.blah = 13` to force it to be the method call. But in your case you can remove most of the explicit self. In conditions a boolean value is usually used directly and not compared to a value ( where the comparison just would give yet another boolean) Like ``` if x? == true if y? == false ``` is the same as the more succint ``` if x? if ! y? ``` so the last block of your code: ``` if is_position_valid? == false return false else return true end ``` is the same as `is_position_valid?` You don't even need the return, as the value of last expression of a sequence of statements is the value of the whole thing (the sequence). Methods return the value of the expression in them without a return.
It's possible to write almost any functionality in almost any language. Are you proposing to *write* a ruby library to spot and decode QR codes from images yourself, or are you *asking* if there's already a good QR-code-decoding library for ruby that you can use?
I agree, this does seem possible.
I think I can see a logic error which is related to my last remark. What I said is not entirely true as the if is not the last statement of the method, its inside the while loop. And that's exactly why logically it doesnt make sense. it always returns therefore the loop can only ever run once. Regardless of position being valid or invalid and what the testing variable holds.
Sorry for being ambiguous. I am definitely asking if there's already a qr code decoding library that I could use. I don't have the skills to write one myself yet.
Second this. I inherited HTTParty. Didn't like it. Build an Api with Ruby Net::HTTP, but am really happy with using HTTP.rb now.
Yep, good point.
Not threadsafe I think :(
Webrick is part of ruby so it is arguably not an external dependency thus doesn’t count right? :P
Awesome thanks! I will do this and make sure future articles are properly proofread as well. Thanks again for the candid feedback :-)
The tutorial you linked uses ZBar for the decoding. A gem providing Ruby bindings exists - http://github.com/willglynn/ruby-zbar.
It probably will not help you, but in my opinion separating frontend from backend is way better idea than using frontend franework inside backend framework. If i were you i would just create an API (rest/graphql) in rails, and make single page app in vue Again sorry for off-topic
The best library for your projects are a combination of what you need + what you feel comfortable with. Play around with them and find the one that suits you. Httparty is a good start, so feel free to break stuff and fool around until you feel comfortable with one.
&gt; little bit annoyed of the amount of configuration or setup I need to do for make it work.(babbel, webkpack, yarn, node, eslint, etc) IMO this is the biggest gatekeeper to frontend web dev. My personal preference is to have the frontend interface with the backend though an API as this typically creates a very explicit layer between front and back and eliminates some compatibility issues. This is obviously not right in every case. If you want to see some real world examples of a more traditional Rails-Vue integration, take a look at [Gitlab](https://gitlab.com/gitlab-org/gitlab-ce). I don't know what Roda is but its prob similar enough to Rails for this to be helpful.
&gt; I getting a little bit annoyed of the amount of configuration or setup I need to do for make it work.(babbel, webkpack, yarn, node, eslint, etc) You chose the 'no batteries included, build it all yourself' approach by selecting the frameworks you did. If you want something that will just work out of the box, use Rails: `rails new myapp --webpack=vue`.
The post is about Rails / ActiveRecord, why would you think ActiveSupport isn't loaded?
Protip: Reddit doesn't support code fencing. You have to indent your code with 4 spaces, like so: class App &lt; Roda plugin :json plugin :render route do |r| r.root do view('home', locals: {bar: [1,2,3,4]}) end end end Backticks only work with inline code `like this`. ---- Anyway, you're attacking the problem from - sort of - the wrong direction. I'm not sure how far you've gotten so I'm going to try to start from the very beginning and I apologize in advance for going over anything you already know/have done. To start, all JavaScript assets run in the browser. The extent of the integration with your Ruby back-end is, ultimately, just serving the JavaScript to the client. Aside from this, literally everything else (with some exceptions) can be treated like a completely separate set of code. The simplest setup I can think of with your setup is probably as follows: 1. Install [Yarn](https://yarnpkg.com/en/) and [nodejs](https://nodejs.org/en/). I assume you've done this part already, but, if not, follow the instructions on each page. The setup will different depending on your OS. 2. From within your app's root directory, install Webpack and Webpack Dev Server with: yarn add --dev webpack yarn add --dev webpack-dev-server Webpack is what you need to compile assets. Webpack-dev-server is a simple way to serve those assets in a development environment. _You will need a way to serve these assets from your app_, but that's a problem you can deal with once you have your front-end working. 3. For simplicity, add the following to your package.json: "scripts": { "start:dev": "webpack-dev-server" } This allows you to easily start the dev server with `npm script start:dev`. package.json contains a JSON object with your dependencies and some other information. It doesn't really matter where you put this as long as it's a top-level key. I would recommend putting it directly before the closing "}" in the file. Once you're done, the file should look something like: { // some keys "dependencies": { "webpack": "[some version]" }, "devDependencies": { "webpack-dev-server": "[some version]" }, "scripts": { "start:dev": "webpack-dev-server" } } 4. Since you're using Vue, don't forget to `yarn add vue`. No `--dev` on this one. Now, there's a lot of information present on Webpack's [Getting Started](https://webpack.js.org/guides/getting-started/) page that you can probably use to get up and running from here, if you want. There's a lot of configuration you _can_ mess with, but probably shouldn't until you have a better grasp of the tool and the ecosystem. A simple way to go from here is to make a `src/` directory in your project root that will hold your JavaScript until you're comfortable enough to dig around in Webpack's config to move them into a more appropriate place. So, within our new `src/` directory, create a file called `index.js`. This is will become the entry point for your JavaScript. This file is the one that Webpack will pick up when you're bundling everything together. Your Vue code will have to be `include`d in this file. Once you've done that, you just need to add a script tag in your HTML document that points to `http://localhost:8080/build/index.js`. For simplicity, this file should probably go at the end of your `&lt;body&gt;`. You'll want the final output to look something like this: &lt;html&gt; &lt;!-- ... --&gt; &lt;body&gt; &lt;!-- ... --&gt; &lt;script src="http://localhost:8080/build/index.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Since roda has templating built-in (and you seem to be using it), this will probably be in your application's layout. Now, unless I've screwed something up, you should have a setup that you can use to serve your assets. You'll need to run your roda server _and_ webpack-dev-server at the same time to have everything working. Once you have both started (and you have something in that index.js file), you should be able to navigate to your application root and it should "just work". Assuming all went well and I haven't screwed anything up, you should be able to get started writing your Vue front-end. Once you get more comfortable with JavaScript and the ecosystem, you should start looking into babel and eslint. As far as I'm aware, Vue doesn't require babel in order to function, so you probably don't need it out of the gate. Babel is only used to provide access to JavaScript language features that haven't gotten widespread browser support and most of those features you don't really need. eslint is a good thing to have, but, when you're just starting out, it can be a little overwhelming. I would spend more time worrying about what your code is doing rather than how it looks. Granted, eslint _can_ help you with how your code functions by catching likely errors that are still valid JavaScript. Hopefully this helps get you running. If not, feel free to shoot me some questions.
I've checked this gem before, but it's explicitely stated that this gem doesn't support video functions/scanning which is exactly what I'm looking for.
If you need to scale, use https://github.com/typhoeus/typhoeus. You can do file uploads, stream responses and make parallel requests. It also has good support for memoization and caching. On top of it, the API is very clean.
Do not forget TensorStream - [https://github.com/jedld/tensor\_stream](https://github.com/jedld/tensor_stream) &amp;#x200B; &gt;There is tensorflow.rb ([https://github.com/somaticio/tensorflow.rb](https://github.com/somaticio/tensorflow.rb)) which allows you to call Tensorflow models via ruby (you still have to use python and TensorFlow to build and train the models). &gt; &gt;This is unfortunate, as aside from having a big and active community, ruby can bring its elegant and expressive syntax to easily train and create machine learning models. &gt; &gt;So, over the past year or so I have been working on **TensorStream**, a pure ruby machine learning framework (with OpenCL support), with the goal of bringing AI and machine learning to ruby. Internally I have modeled its dataflow architecture based on TensorFlow in order to be able to easily port over its higher level libraries. &amp;#x200B; from [https://medium.com/@joseph.dayo/tensorstream-bringing-machine-learning-to-ruby-114582060e3d](https://medium.com/@joseph.dayo/tensorstream-bringing-machine-learning-to-ruby-114582060e3d)
[https://www.reddit.com/r/ruby/comments/bwnely/rubydnn/eqht0to](https://www.reddit.com/r/ruby/comments/bwnely/rubydnn/eqht0to?utm_source=share&amp;utm_medium=web2x)
Hello and thx for the long and clear message. I did all the stuff from there, but, when I start: - rackup - webpack-dev-server I dont have any file under `build` folder
source please
Technically you can select not to load active support when starting rails. Not sure it would start at all, but it is an option.
Thanks for the advice ! I'll do this !
Thanks for your answer i'll look into it :)
Oh ok, i'll look into it ! Thank you !
I'll check it out thanks ! :)
I can highly recommend finding a broader group of "programmers" to ask. It seems to me that they are pretty biased. There are many programming languages because the are many different problems to solve. Only recommending a single one is like trying to build a house only with a hammer. You can probably do it with enough skill, tone and determination, but it gets easier if you use a wife range of tools.
so, after 3 hours of crying this is the `webpack config`: https://www.pastiebin.com/5cfcecb7d71c9 I dont dont understand all of it :( this is the `package.json`: https://www.pastiebin.com/5cfced085ae12 but now it works. I can create single vue component.
It's true. And another think that makes it more difficult is that they're trying to go for a fully integrated solution. I just make two separate projects, a Rails/Grape/Whatever backend, and a Vue.js frontend. It means you lose the backend html rendering abilities, but it means both sides don't have to worry about integrating with the tooling of the other. If you really want backend rendering using Vue you should have been doing your backend rendering in Node.js anyway (since it's fully supported on that platform). At some point someone will say that your app would perform better if the Vue.JS were expanded server-side, and your choice for Ruby on the rendering side does nothing but complicate that.
IIRC `=begin ... =end` is used for documentation string; it typically contains RD (inspired by Perl's [POD](https://perldoc.perl.org/perlpod.html)) formatted text and will be processed by tools such as [rdtool](https://github.com/uwabami/rdtool/blob/master/doc/rd-draft.rd).
There won't be a build folder; it's just the route that webpack-dev-server serves the files from. You may need to create a `dest/` folder as well (this is the default location for bundled files). The docs for webpack weren't completely clear on if the destination folder had to exist first. Most things are smart enough to just make their destination folders if they don't exist yet.
It's been a while since I ran into this particular error, but I'm fairly certain this the live-update websocket failing to connect. Live-updates are used to automatically refresh your browser when your code changes so you don't have to do it manually. If that's not working, I wouldn't worry about it. It's just a nice extra feature. Also, it looks like you used `vue-cli` as your base. This is actually mentioned in [their documentation](https://vuejs.org/v2/guide/installation.html#CLI) as something new developers _should not_ do - particularly those not familiar with JavaScript tooling. So, you may have inadvertently made your setup a lot more difficult than it needed to be. &gt; The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through the guide without any build tools before using the CLI. The JavaScript ecosystem as a whole is a place where you can make your life as simple or as complicated as you want. Most of the "really cool" JavaScript stuff involves complicated build pipelines so that they'll actually work in browsers (re: babel/TypeScript), but you don't really need any of it. The old way of serving JavaScript (with a bunch of script tags) still works just as well today as it did 20 years ago.
I think either http-rb or HTTPClient. Anything but HTTParty.
&gt; [TruffleRuby] is trying to put everything under a Mutex if — and only if — your code uses threads. This way you would have the advantage of a GVL plus the performance boost from multithreaded apps. I don't understand what is meant here. Can anyone explain, or link to discussion? To me, "trying to put everything under a mutex" sounds like just a description of exactly the GVL, same disadvantages as well as advantages such as they are. That's what the GVL is "putting everything under a mutex", no?
I understood the article to be demonstrating metaprogramming to the general ruby audience by way of an example drawn from Rails (so as to be as widely recognized as possible). I could be wrong (I often am).
I think that was the idea, but also clear it was in the context of AR, I mean two lines later there is a call to `klass.find_by` which is an AR method and much more likely to be an issue for general use than replacing `String#constantize` with `Kernel.const_get`.
I don't think the MRI JIT is going to show notable performance improvements on applications that don't amount to a compute kernel until they have fairly aggressive inlining. Without that the method compilation / call overhead is going to more than offset any gains.
This is the most pedantic of pedantic comments. Webrick is part of the standard library, why don't you include a line count of the entire standard library? Why not the core library? Shit why not the source of MRI while we're at it!
When you look at a Ruby method there basically isn't any computation in individual methods. Ruby has such a high level of abstraction that the computation is distributed wide across many methods, with very deep call graphs. You need to inline deep and specialise to expose the basic kind of computation that we're then know how to optimise well. And this needs to be into the core library as well. I did a lecture on this for PhD students in programming languages [https://www.youtube.com/watch?v=b1NTaVQPt1E](https://www.youtube.com/watch?v=b1NTaVQPt1E).
Yep, I've been following TruffleRuby closely as you seem to have an extremely strong understanding of the issues here, thank you for your work!
Because the stdlib doesn't have to be required!
will be possible with truffleruby to gain performance with rails?
I hope so - idiomatic things like rendering HTML templates are already over 10x faster than MRI and JRuby.
for smaller frameworks like: roda + sequel + puma, will be possible this year to start using truffleruby, or maybe next year?
If you have an app you're keen to run, and you have some time and patience to work with us, then either send us the whole app if you can, or send us your Gemfile.lock and we'll start testing your dependencies for you.
It's already faster in my limited and not-entirely-scientific testing. I'm just testing against a very basic app and there are significant time-to-performance issues but once the JIT is all warmed it has a decent performance boost.
`dest`, not `dist`?
Perhaps. I've never heard of RD before.
Whoops, good catch. I have corrected it.
Not weird. For automated documentation.
Wow.. You were concerned with this at least 3 years ago... I hope to see soon real "fast" implementation of Ruby..
I am surprised noone mentioned [https://github.com/rkh/almost-sinatra](https://github.com/rkh/almost-sinatra)
totally unsafe; never use this production code, for a myriad of reasons, but: response = `curl #{url}`
 under absolutely no circumstances should you ever use the most concise form of all: `curl #{url}`
thank you
[HTTPX](https://honeyryderchuck.gitlab.io/httpx/) ftw.
fantastic! My new stack: - roda - sequel - schrine - async-io - dry-validation - minitest
Use a shell script referencing the special ruby when running the code that needs it. Also, don't do any of this. Uninstall all rubies and install anew with rbenv / chruby / rvm. If you are too new to ruby to know the ins and outs of ruby version management, there is no way you need a custom ruby.
Thanks for response, shell script is good. but in case we are installed two different ruby version in two different locations. In this case can i use both verient in my project if there are possible then tell me how can do. because rvm are use one verient at a time I need use both verient. And how to manually setup using code interface. For example user a is need one variant And second user is need another Third user are need to use both verient in special case. How to to switch using RVM one variant to another. Consider at a time both user a active.
I would use `chruby`. It's pretty much does the simplest thing possible to get everything set up to point at an alternate ruby installation. You could reinvent this yourself with a shell script, but why, when chruby already is that shell script. https://github.com/postmodern/chruby
off the top of my head: `define_method` will define an instance method in the current module. `def` will change depending upon the context.
Do you use these gems with rails? If so, do you disable non used parts eg. ActiveRecord? Also, do you have some reading about why one would choose this kind of alternatives instead of default rails modules? Thank you very much..
you can disable AR, just use sequel, and for validation you can use dry-validation. same with ActiveStorage, you can use schrine. For roda, you cannot :)
Upgrade howto: [https://github.com/karafka/karafka/pull/515/files](https://github.com/karafka/karafka/pull/515/files)
For ruby with selenium, use [capybara](https://github.com/teamcapybara/capybara), and I also like to use [site prism](https://github.com/natritmeyer/site_prism) with that. But that's optional. Mainly you want to use these tools because they work in a ruby-esque way, as opposed to selenium, which is a bit java-y in its ways. When you see a `SeleniumError::StaleElement` exception, that generally means that the element you are referencing to is no longer on screen. It can also mean that the screen has refreshed since you created a reference to the element, which disconnects what you are holding in a variable from the actual displayed content in the browser. It's basically impossible to help without the real situation. I can confirm, no matter what, dealing with iframes is really annoying.
You will have to use the [Open3](https://docs.ruby-lang.org/en/2.0.0/Open3.html) module to make calls to the custom ruby variant.
By real situation, do you mean the HTML?
&gt; I call Module#define_method ... &gt; it should create an instance method on the receiver object Indeed. &gt; here singleton class of class A No, that isn't correct. The singleton class of A is opened with `class &lt;&lt; self`, not `self.instance_eval`. &gt; it should be added as singleton method of class A That didn't follow. Module#define_method doesn't add a singleton method to class A. `self.instance_eval` didn't open the eigenclass as I suspect you are mistakenly assuming.
I've tried with class &lt;&lt; self and it gave the same result. instance_eval is nothing but class &lt;&lt; self, the latter one will be used inside the class body for clarity and the former one can be called on the receiver object from any scope, they both open the singleton class of the receiver mod object
Yeah, now you're just wrong. Sorry. You've perhaps polluted your REPL and need to start the interpreter.
well, i'd need to know what you are doing and why. I need to know when you see the exception. It'd be helpful to have access to the real system so I can try and script it myself and see what is happening. I can share this with you. # This method is used to handle stale element exceptions # You can pass this method a block of code, which it will retry on # a stale element reference. Be sure to include both the finding of the element # and the reference of the element in the block. # @param attempts [Integer] - The maximum of times to retry # @raise [Selenium::Webdriver::Error::StaleElementReferenceError] # - Can raise the StaleElementReferenceError if retires are exhausted def keep_fresh(attempts = 5) tries = 0 yield rescue Selenium::WebDriver::Error::StaleElementReferenceError raise if tries &gt;= attempts tries += 1 retry end ``` Although this is no panacea. You would call it like this: keep_fresh do # code to establish reference to element element = driver.find_element('div.whatever') # code to use referenced element element.click end You can use that to wrap both where you establish reference to an element, and operate on that element, so that it will re-establish a reference for a stale element. If you are new to ruby, this may be out of your league at the moment.
&gt; instance_eval is nothing but class &lt;&lt; self That is a super wrong statement. Open a fresh REPL and paste this in: class B self.instance_eval do puts "inside the self.instance_eval block, self is #{self}" def foo self end def self.eigenfoo self end define_method :bar do self end end class &lt;&lt; self puts "inside the class &lt;&lt; self block, self is #{self}" def baz self end def self.eigenbaz self end define_method :quux do self end end end #=&gt; inside the self.instance_eval block, self is B #=&gt; inside the class &lt;&lt; self block, self is #&lt;Class:B&gt; then: B.singleton_methods #=&gt; [:baz, :quux, :foo, :eigenfoo] B.instance_methods(false) #=&gt; [:bar] This is all because `instance_eval` did **not** open the eigenclass. Unless `class &lt;&lt; self`, it does not set self to the singleton class inside the block, as you can plainly see from the output of `puts`. What it does do is change the third implicit context / default definee to be the eigenclass, which is why a def inside the `instance_eval` block comes up as a singleton method.
Thank you for the custom error messages!
&gt; async-io In what scenarios do you use async-io?
If someone is using this with Rails, where do you store your Contract files? What is an example of best practices of using dry-validation on models, in form objects etc?
 [[1,2],[3,4],[5,6]].each_cons(2).map { |(_, a),(b, _)| [a,b] } Sorry if the formatting sucks, I'm on my phone. Hope you land the job! ;-)
There are no best practices yet. We may build an official `dry-rails` gem with various integrations with dry-rb gems one day. This would provide The Right Way™ of using these gems with Rails.
Thank you. I guess I could store dry-validation objects in app/poro/dry/validations.
This was a nice read, thank you! Although I feel the last paragraph, especially this part: &gt; Redis Cluster has built-in measures to redistribute keys between nodes when the cluster configuration changes. Redis Cluster is the recommended way to get automatic sharding and high availability. You may consider using Redis::Distributed in cases where you can’t use Redis Cluster. should have been somewhere in the introduction. I feel like it's nice to get a short description of the options and pros vs cons of the approach being talked about before deep diving.
Thanks. Now it's time to upgrade the entire dry-rb stack we are using.
Super interested in this. I've been trying to find ways to integrate the `dry` suite of gems into some of our Rails apps at work and this sounds like a great approach.
Sounds like a bit of an XY problem don't you think? What problem particularly would you like to solve with Ruby that you currently can and would require such a library?
The best know async library for ruby is https://github.com/eventmachine/eventmachine which has been around forever and is pretty crufty. The projects you mention are some of the more recent attempts to improve on it.
IO in Ruby runs in parallel, so you can do this with just `Thread`. If you want a more full or encapsulated answer then there are several libraries out there (concurrent-ruby is the one I typically gravitate towards)
Well, if you have knowledge of the number of categories, you could turn this into a clustering task (this could work if you don't know the number, but might be more challenging). Assuming you won't have any news articles already categorized, you'll have to start off with a form of unsupervised learning anyway. If you do somehow have some categorized articles that you can use as training data, then you can use Naive Bayes as you mentioned, or other commonly used supervised learning methods used in natural language processing, like maximum entropy models (multinomial logistic regression) or neural networks. Along with the various learning methods, you should also look at how the features can be represented. I recommend reading into TF-IDF, word embeddings, or even just regular multinomial features (counts) using some smoothing/back-off method. Similarity measures are also important to consider, like whether cosine similarity would work better than Euclidean distance in your case. Best thing to do (especially if you're a beginner) is to experiment with different methods! It might be difficult to understand what's going on in every situation, like why one method has worse performance, but it'll really help to learn. And for experimentation and comparison of methods, I highly recommend Jupyter Notebooks, Scikit Learn and definitely NLTK, not Ruby sadly. Also read more about NLP (specifically text classification) and other things I mentioned :)
You should try those gems out and see what you think. Feel free to join the project and write documentation/guides to help people learn about them.
From what I’ve seen, `async` is an excellent framework for async IO, and it’s very actively maintained. It has really nicely layered abstractions (especially compared to EventMachine), so you can go from async sockets, to async HTTP client/server, and all the way to an async web server. My recommendation is to go with that.
Most Ruby webservers these days do use async io along with forking and threading. Puma uses nio4r (the same socketry library underlying async), Passenger rolls their own afaik, Unicorn uses kgio, Falcon uses async, etc. /u/ioquatix has a PR open for a [lightweight fiber-based selector](https://github.com/ruby/ruby/pull/1870) that I'd love to see merged.
+1 [Falcon](https://github.com/socketry/falcon) is a great example of using [Async](https://github.com/socketry/async) to good effect as a web server. I sure look forward to async adapters for Postgres, MySQL and Redis.
EventMachine is buggy and for years was unmaintained. Maybe that's changed. Does it support IPv6 yet? Last time I used it that was a major source of problems.
async/await is just one of many metaphors for concurrency and by no means the single best one for all cases. Take a look at the most comprehensive library for concurrency in ruby that has already been widely adopted: https://github.com/ruby-concurrency/concurrent-ruby also consider that with guilds in upcoming Ruby versions, Ruby is going to be considerably further ahead than python in terms of removing GIL completely and towards achieving real parallelism.
Hard to try a paid service (I know it has free trial) Maybe you want to introduce nokotime first?
Pretty much impossible to say without seeing some code.
Very nice looking code. Quick feedback: 1. Since there are no other "nokotime" gems, just call it nokotime or even nokotime-client. If it's a *Ruby* gem then "ruby" in the name is redundant on the gem level (but not necessarily on the repo level) 2. All your exceptions should inherit from a base exception. This allows users to easily handle all exception from your library if they choose: `rescue Nokotime::Error =&gt; e ...` 3. Validation. Why do this? Does the server have shitty error messages, are requests expensive (these are reasons to do this). Otherwise you've potentially increased the maintenance cost and flexibility of your code. For example, v2.1 is released and allowed values are: 1, 5, 6, 10, 15 and *20*. 4. [does this](https://github.com/sirion1987/nokotime-ruby-client/blob/d95dccb335cece7731bda35e826bf3bbde45b33e/lib/nokotime/client/tags.rb#L23) validate every time `#success?` is called or only once?
Does the binding object help with this?
There are various asynchronous processing techniques(actor, atom, agent, async/await, promise, timertask, goroutine, channel, etc) and examples in the Concurrent-ruby([https://github.com/ruby-concurrency/concurrent-ruby](https://github.com/ruby-concurrency/concurrent-ruby)). Concurrent-ruby is very easy and simple to implement asynchronous processing, and it also helps to learn how each asynchronous operation is implemented at a low level. See examples. [http://ruby-concurrency.github.io/concurrent-ruby/master/file.promises.out.html](http://ruby-concurrency.github.io/concurrent-ruby/master/file.promises.out.html)
Having a public referenced as a private method elsewhere feels like a bad code smell to me...
I don't recommend using library names in your own file paths. The fact you're using a gem should be an implementation detail. You could simply put it under \`app/contracts\` or \`app/models/contracts\`.
2) I will do that. 3) I use dry-validation like a documentation for the query params. If a user call per\_page="page" will take an error (avoiding a call to Nokotime API). 4) #success is called when you call #all. I will fix this bug :D &amp;#x200B; Thank you so much.
[Nokotime](https://nokotime.com/) is a time tracker (Saas).
[Kernel#binding](https://ruby-doc.org/core-2.6.3/Kernel.html#method-i-binding) is what you're after
I thought it might be too, but it seems not. From what I can see, binding objects don't appear have a method that returns the implicit context, even though they can certainly access it when you use as the execution context e.g. as in `eval(param, binding)`. The closest they get is returning the implicit receiver via `Binding#receiver`, which isn't the same thing.
I disagree. The whole point of delegation is to ease composition and classes that function by composing other types can choose to call those types' public methods via their public or private methods as they see fit. The `private:` option allows you to encapsulate your calls to the composed object and to not leak them, nothing more.
Are you sure you're talking about EventMachine? First of all, last commit was 18 days ago and it seems well maintained. Second, it's event-driven IO, so how is it supposed to support (or not) IPv6?
This gives a better summary of the issues with EventMachine. [https://www.slideshare.net/KyleDrake/hybrid-concurrency-patterns](https://www.slideshare.net/KyleDrake/hybrid-concurrency-patterns)
&gt; obtain the current implicit context What is the 'context' in your mind? There is no such value or object that you could 'obtain' as far as I know.
Could OP mean the current namespace? I'm at a loss as to what the context is as well.
Very helpful. Thanks for this!
Thank you for your help so far. &amp;#x200B; I got through my original issue (somehow) and I have some others but I just wanted to ask if it was at all possible to iterate through a dropdown menu and for each option to navigate to a different page to do some stuff before navigating back to the original page and selecting the next option? &amp;#x200B; For example &amp;#x200B; If you navigate to this webpage: [https://www.seleniumeasy.com/test/basic-select-dropdown-demo.html](https://www.seleniumeasy.com/test/basic-select-dropdown-demo.html) You see a dropdown menu with the days of the week. &amp;#x200B; require "selenium-webdriver" driver = Selenium::WebDriver.for :firefox driver.navigate.to "https://www.seleniumeasy.com/test/basic-select-dropdown-demo.html" element = driver.find_element(id: 'select-demo') select_list = Selenium::WebDriver::Support::Select.new(element) select_list.options.each { |option| select each value navigate to a different page click some buttons, do a dance return to previous page go to the next value } And just continue like this until the list is empty? The logic, in my opinion, seems off but I think it's because I don't have a good understanding of the tools I am using. I'm using xpaths since I read somewhere that it's more reliable than id's and such so I don't think my values should get refreshed?
From what I've seen, few EventMachine apps are written correctly. A lot will mix reactor-compatible (evented) code with blocking code, creating various bugs or ineffiencies. Also another problem with EM is that you're essentially teleporting yourself in a slightly yet quite different universe, with fewer people sharing your problems. This leads to some issues fixed later etc (e.g. Twitter SSL/TLS policy change a while back etc).
thanks for the feedback! :) &amp;#x200B; &gt; I feel like it's nice to get a short description of the options and pros vs cons of the approach being talked about before deep diving. I think the Redis docs on [partitioning](https://redis.io/topics/partitioning) are a better resource to read about this. &amp;#x200B; My main motivation for writing this article was because when I was trying to learn about \`redis::distributed\` I bumped into [this issue](https://github.com/redis/redis-rb/issues/219) on GitHub and I didn't see much articles describing it. :)
Questionable, "cute", "neat" methods leading to mass confusion and certainly bugs.
No, i'm pretty sure what you are trying to do is not possible. If the page content refreshes, you have to reacquire references to the elements. That also means if you navigate away and then back, the references will now be stale. &gt; I don't think my values should get refreshed? They always do, xpath and css, as well as attributes on DOM elements give us ways to find specific elements, but under the hood they are unique objects render to render. What you can do is get an array of the text of the options, select the option by text on a given render, while working through an array of the text options.
If you want something that will give you dynamic access to local variables, walk up the stack, etc, there's nothing like that. binding is the closest.
There is a current context in Ruby, but it's not a Ruby value in any way. It's a complex combination of the receiver, the module in which methods will be defined, current visibility, the lexical scope, some more subtle things like whether you're at the top-level or not, and more. There's no Ruby object for that.
so we are taling about an abstract concept rather than a language feature?
Yes
Well, that blows. How would I go about doing that? Should I find the element, and loop through the options to append them into a list?
I had a suggestion at the end of my last comment. But essentially, you have to work out the logic so that you reference objects between page renders. pseudo-coded its like this: find drop-down get list of options as text in an array 'text-options' text-options.each do select option navigate do whatever return to first page find drop down end
Are you running this stack in prod? Would you mind talking about your approach to deploying an app under this stack?! I've been thinking about migrating an API we have at work to something more lightweight to learn more about ruby in general and your stack, without async-io and shrine, is pretty much what I had in mind. Was wondering how you approach deployment.
never deploy on production. What is the issue with deploy? heroku will be super simple, on EC2, or DO, you can try dokku
If you are using Linux, just adjust the PATH variable to include /tmp/ruby/ruby-2.2.2 as first entry for the shells which should use this ruby version.
Thank you, makes sense.
Thanks for the answer. Not that I have an issue, I didn't even try it yet. I was just wondering if it had any caveats that I could very well not know. Our apps are on DO inside docker containers. I have yet to mess with dokku, that might be the occasion. Cheers