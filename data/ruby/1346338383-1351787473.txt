You could try out my crazy Relaxo gems for CouchDB =) They do have some overlapping similarities.
Merb was merged into Rails, wasn't it?
Crazy old information. The Merb team worked with the Rails team to integrate the best things into Rails and is no longer maintained. Rails **is** ORM agnostic. Even at the time this was written (May 2012???) this information was years out of date.
It works for me. Try it again.
My ideas come from a few sources. The "quick tips" sort sof posts are a direct result of figuring something out in the work I'm doing. I don't worry about the fact that tons of people already figured it out before me, and if I learned it from somewhere particular I always site the source. Basically, anytime your writing code, and you say "cool!", that's a blog post waiting to happen. As I said, I also have a lot to say about the experience of changing careers and becoming a programmer. I hope to write a lot more about that going forward. To start the blog, you probably want an uninterrupted period of, say, 6 hours to get everything set up and tweaked, deploy it, and get a couple fo posts up. Basically I started the blog in the first such period I could find after attending the conference I mentioned above. I don't have a schedule. It's catch as catch can. I happen to be mostly off this week. Let's see if I can keep it going. I'll try! As for Octopress: LOVE IT.
Padrino would be a nice add to the list, it uses sinatrarb underneath but still...
Yep. If you remove all the ones that are not actively being developed you're left with Sinatra and ramaze. The github screenshot for Blast shows last update was 1 year ago. RadiantCMS actually runs on top of rails and not really a framework but a CMS that runs on Rails similar to Refinery. 
I get a 500 standard error message on the following URL after the oauth step: http://rubypair.com/auth/failure?message=invalid_credentials
You *can* use ActiveRecord outside of rails, but I would recommend you try [Sequel](http://sequel.rubyforge.org/) ;)
There are several. This is called an ORM, or Objective Relational Model or something similar. ActiveRecord is the very one used in rails, and its quite nice, but there are others, and you shouldn't feel shackled to it. You can also use things like MongoMapper or Mongoid to preform similar tasks using the Mongo DB
Yup. "Here's a bunch of data, process it" is ridiculously common, depending on your job. Some folks will immediately pull it into a spreadsheet and go to town. As a developer I'll rarely leave the command line -- if all they want is some averages and min/max stuff I'll bust out some awk/sed magic. But if what they're really asking for is the precursor to "Hey can you make us a way to maintain this data, change it, add rows to it?" then I'm heading straight for a Rails model. 
If you just want an ORM I would go with Sequel - http://sequel.rubyforge.org
Also take a look at Sequel and DataMapper.
I would recommend DataMapper. While it's not 100% like ActiveRecord, it more closely mimics Plain Old Ruby Objects and has supported advanced features that ActiveRecord 3 is just now getting. Checkout [ActiveRecord vs. DataMapper](http://wrangl.com/datamapper-activerecord) for a feature break down.
and now mention of [Padrino](http://www.padrinorb.com/)?
Also pay attention to `ActiveModel` when you want you're objects to quack like `ActiveRecord` models. 1. [ActiveModel - RDoc](http://apidock.com/rails/files/activemodel/README.rdoc) 1. [ActiveModel - Railscast](http://railscasts.com/episodes/219-active-model)
Yeah, it is. I never got around to writing that page because it was a weekend project that ran overtime. The best place for documentation is the RDoc, e.g. http://rubydoc.info/gems/relaxo/0.3.1/frames
I remembered reading about being able to use simple expressions (i.e: just variable names) right in strings with the `#` without the braces, but it never worked. Now I know why! Neat find!
partial application, not partial evaluation
To counter the three other people suggesting you use DataMapper, I'm going to suggest you don't unless you know what your schema is ahead of time and it is unlikely to change. AR migrations can be a headache; DataMapper's migrations can be a nightmare.
What is the free online class?
&gt; For everyone involved in the project (which a lot of the time is just me). This is what I was getting at, of course. The vast majority of people are used to seeing braces used within strings to indicate interpolation. Removing them forces anybody reading the code to either a) backtrack and make sure they've fully understood the intent, or b) go off and learn this new trick. It sacrifices clarity and the element of least surprise for the sake of saving two bytes, and no sane (or moral) person should consider that a worthwhile tradeoff.
Not exactly related, but just a tip: don't try to think of things to make in Ruby. Try to look at how you're using your computer and if there are things you can automate. Here's a quick challenge that relates to scripting, though: Try making a script that does the following. It takes a directory and moves its contents up a level, deleting the original directory. For instance, if I have a directory structure like: ./ levelone/ a_file and ran the script on the "levelone/" directory, I would end up with: ./ a_file A few things to remember: 1. Don't forget to include dot files in the move (files/dirs that start with a dot, like `.bashrc`, `.git`) 2. If there is something in the directory that already exists (i.e: a file that would be overwritten by the move), find a way around it.
http://rubypair.com was suggested in a previous post
The "Local Git Repos" feature is a real time saver when developing. Always thought this would be nice to have and now it's here. Great job!
Yes, I really think that's a killer feature for this release. Ruby version/engine is nice too, but local git repos is a game changer.
Also auto-migrations, which helps with rapid prototyping.
That's awesome. Looks similar to Rubinius. Is it possible to compile YARV instructions to binary file?
it doesnt seem to be working
I know they had oauth issues yesterday, but they've fixed that. What's not working?
No worries, DM2 supports JRuby.
That's a great presentation solnic, DataMapper-2 is looking really interesting. vitezg's point is especially valid as we're seeing more polyglot persistence with data being stored across multiple repositories and DBs now.
To learn Ruby with cartoon foxes: http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html To build websites with Rails: http://guides.rubyonrails.org/ To find good gems which are like modules: https://www.ruby-toolbox.com/ The sidebar has lots of good links to get you started. My two cents: - you'll probably read about "RVM" for installing Ruby; in my opinion it's better to learn "rbenv" (both are on GitHub). - you'll probably read about RSpec for test driven development; in my opinion it's better to learn MiniTest, also known as Test::Unit, and the "mocha" gem for mocks. (Rails itself uses these). - Ruby and its ecosystem change very fast. When you're reading about anything Ruby-related, check the dates on the articles to be sure they're relatively current. - Much of Ruby and its ecosystem happens on GitHub and Twitter. If you ever see anything on RubyForge, also check GitHub for newer versions, and if you hit snags then check the GitHub project's "Issues" tab and on Twitter for current discussion. - If you learn well from technical books, try Pragmatic Programmer. Their books tend to be accessible, thorough, available electronically in many formats, and updated regularly. - Good blog starting points are http://rubylearning.com/blog/ and http://www.rubyinside.com/ and https://peepcode.com/ - Top Ruby leaders that write superb postings are Yehuda Katz (wycats), Aaron Patterson (tenderlove) Jose Valim, James Golick, Ryan Davis, ThoughtBot, ThoughtWorks, Intridea. (and many others-- my list is just a few off the top of my head, feel free to suggest more) - StackOverflow is excellent for Ruby questions. The community there is amazingly helpful. 
I'll be happy to help you as much as I can. Where are you from? Why don't you post the latest ruby code you wrote so the challenges are challenging enough but don't kill your enthusiasm. Do you think that would be possible?
I'd like to know this too please. Thank you.
I just wanted to say congratulations on your decision to migrate to Ruby. I came from JEE and currently I'm using JRuby + https://github.com/jruby/warbler so my previous customers for whom I developed some JEE apps don't have to make any changes to their servers (here in Argentina, people don't seem to like that)
rbenv is simpler, more stable, and doesn't mess with Unix built-in commands. I manage my gemsets using bundler, so I don't have any need for RVM gemsets. https://github.com/sstephenson/rbenv minitest is simpler, can do styles using "assert" or "spec", has a benchmark library, is in the standard library so it runs consistently everywhere, is easier for me to extend, and is much faster. https://github.com/seattlerb/minitest Of course YMMV so learn about all the choices and choose what works for you.
minitest is also about a billion times simpler to pick up -- I think a lot of experienced rubyists overlook that.
First thing you have to understand coming from PHP is that PHP is **both** a programming language **and** a template engine while Ruby is **only** a programming language. | | Programming Language | Template Engines | Web Frameworks | |:----:|:--------------------:|:-----------------:|:----------------------:| | PHP | PHP | PHP, [Smarty](http://www.smarty.net/), [Twig](http://twig.sensiolabs.org/), etc. | CodeIgniter, Symfony, etc. | | Ruby | Ruby | [eRuby](http://en.wikipedia.org/wiki/ERuby), [Haml](http://haml.info/), etc. | Ruby on Rails, [Sinatra](http://www.sinatrarb.com/), etc. | While snarky, the "completely forget php" comment has a point - web development in Ruby can be vastly different from development in PHP and having PHP at the back of your head while learning Ruby can be an unnecessary baggage. For example, there's a thread right now in /r/rails asking about [the best shared hosting for Rails apps](http://www.reddit.com/r/rails/comments/z8uzc/good_rails_shared_hosting_site_for_ror_starter/). As you would see in that thread, shared hosting is generally ignored in favor of PaaS like Heroku and VPS like Linode or Amazon EC2. Same thing with deployment. With PHP, you could get by with FTP and PhpMyAdmin. With Ruby web apps, in most cases you'll need shell access to perform certain deployment tasks (though they could easily be automated e.g. [Capistrano](https://github.com/capistrano/capistrano)).
Thanks for telling me, I use webfaction so I think I'm good since the give me ssh access.
It was a joke. Sort of. I think you do need to avoid writing ruby as though it is php with different commands and syntax.
Http://pineapple.io/tag/ruby?type=tutorials
The Ruby community keeps surprising me with their witty, creative and beautiful names for their gems. 
Yeah, it was primarily designed as part of a backup system I made called LSync, but it turned out to be useful in other projects so I refactored it into a separate project. RExec is primarily about making it easy to execute processes using Ruby. In this sense it includes a wrapper for making it easy to turn a Ruby function into a fully fledged daemon with a pidfile, output and error logs, etc. You can see examples of RExec in the wild typically combined with RubyDNS which is another one of my crazy projects =) I liked the look of Fallen, it seemed simple. One thing that you might want to steal is how I check for failure in RExec. After forking the daemon process, I check to see if it still exists a few seconds later. If it failed, I print out the last few lines of the error log, because that normally indicates a crash.
Oh, I like that! I'll take a look at your code then. Thanks for the suggestion!
There is no Fallen.start method, so in all honesty, it raises a NoMethodError. Fallen.start! among other things calls to Fallen.run!, which in turn calls `run` which is a method that must be provided by the module/class extending Fallen.
Why did you break convention? Bang methods are normally paired with non-bang versions that behave immutably. Slapping a ! on the end of a method because it looks cool gets confusing.
Daemons should not daemonize.
Check out the sidebar and look into http://railscasts.com/
I never really followed that convention, but it makes sense. I'll see to change it in a later release. Thanks for the interest :)
Yep. For what this is worth, I've been writing ruby full-time for 5 years and with dozens of other engineers and I've *never* seen anyone leave off the curly braces. Even better would be to make the point moot by using accessors instead of accessing all those crazy variables directly.
I teach an online tutored intro to ruby on rails course on http://railstutors.com and we have had good success for students in the past. Comparing to other alternatives online, I think we provide pretty good value / price. I wrote down the rational behind this course here you can take a look - http://qr.ae/8UEJE Let me know what you think! 
Ditto pls... I wound up _hating_ Denver the last time rubyconf was there. It was an unnavigable mess with too many walmarts. Having a whole foods on every block was its only saving grace and kept me fed. Did have an ... interesting time ... in a very strange goth-esque bar downtown. Knowing better places to eat and spend time would be great. Oh... and coffee... damnit there was NO coffee worth drinking that I could find.
For category trees (with seldom writes) [nested sets](https://en.wikipedia.org/wiki/Nested_set_model) are (almost) always better. But CTE's are great when you really need them.
ok sounds good; i am from NYC , this is the last ruby code i wrote class Order def initialize @drink=[] @snack=[] @meal=[] @desert=[] end def greeting print 'Hello and Welcome to Meadowlands Hospital Ordering System' print ' ' print 'How are you doing today?:' gets.chomp print 'Fantastic' print ' ' print 'What would you like to order:' order1=gets.chomp if order1.include?('drink') print 'What would you like to drink:' drink1=gets.chomp @drink[0]=drink1 print 'Would you like another drink such as coffee or tea with that:' drink2order=gets.chomp if drink2order.include?('yes') print 'Ok what would you like:' drink2=gets.chomp @drink[1]=drink2 end elsif order1=/snack/ print'What snack would you like:' snack1=gets.chomp @snack[0]=snack1 end def orderlist puts 'So your order is drink: ' + @drink.join(' and ') end end end neworder=Order.new neworder.greeting neworder.orderlist 
Wow that looks awesome!! I am gonna see where i can cut some holes in my finance and see if i can budget it in by September 24th
No it's not. Asking for support on Reddit, a Mailing list, newsgroups, Google Groups, GitHub or a Local Users Group will nearly always result in someone *volunteering* an answer. I typed over 500 words going in detail of why or why not some options worked using the suggestions the OP tried or thought of trying (without actually trying). That's over 500 words that could have better been spent writing a new feature for my personal projects, or getting a little further on my work projects, that I get paid for. So when someone asks someone else who is looking for an answer to their problem, if the first response is "Did you read the fucking manual?", don't get upset. The people that know the answer want to know if the person who is asking the question has looked at all possible solutions and done their due diligence to figure it out on their own. I was feeling generous when I wrote the original message, and I realized my mistake by not asking the OP if he read the descriptions for the methods he was trying to invoke on the string, which truthfully answered his question. There was no reason I needed to type up that entire response when "RTFM?" was just as adequate. He might have not known about `gsub`, and could have asked: "Hey, I'm a noob walking through a tutorial, and the tutorial says to use method X, but that only takes one argument, and I want to do it multiple times for different arguments. I've chained them all together, but this looks bad and I don't think it's right, is there a Y method that does what I want to do? I've looked through the documentation and found Z, but I'm not sure if it's the correct way to do this. What do you think?" which would have garnered a better response, but he didn't offer alternatives, and demonstrated that he didn't know how to check to see if the suggestions he was offering were going to work or not. This proves he did not RTFM. TL;DR: RTFM Before Posting.
It's a GUI and the website has no screenshots?!
The fancy-scrolling, hand-drawn backgrounds used up all the budget for screenshots. EDIT: [Here's apparently an entirely different website for the same product.](http://unfiniti.com/software/mac/jewelrybox)
Thanks! NYC is a bit away from where I am (Europe) but I'll be glad to help via the Internet thing. :) Here's what I found though that might just be a bit more interesting than the usual stuff: http://rrobots.rubyforge.org/ The app doesn't seem to work out of the box but I've found a fork of the project that does so if you want to give it a try, please let me know. Why don't we get in touch by email, might be easier that way (martinb at xtreeme dot com). 
I'm curious about this "going off to learn a new trick". Like a pilgrimage or something? Is extended study really required? No, instead most decent programmers would see the code and understand it within seconds. That's all the "going off" that would be required. Then they know about it, they use it if they like, and really, it turns out to be just a tempest in a teacup.
&gt; edit: I dunno why I posted this. I'm feeling generous tonight, but it has quickly dissipated.
[Ages ago I made a patch](http://t-a-w.blogspot.com/2007/02/ruby-and-judy.html) that switched Ruby 1.8 from its own superslow hash implementation to Judy library, which is ridiculously faster (and that was like 5% total speedup and 5% lower memory use on silly microbenchmarks). Properly implemented hashtables like Judy can be really damn fast (unlike Ruby 1.8's internal hash tables), so what the post describes can be much less of a problem. I wonder if redoing this for Ruby 1.9 would improve performance much, or if 1.9 depends on hashes much less... &gt; Even if we ignore the cost of calculating a hash code, which at worst requires reading some object data from memory and at best requires reading a cached hash code from elsewhere in memory, we have to contend with how the buckets are implemented. Most hash tables implement the buckets as either of the typical list forms: an array (contiguous memory locations in a big chunk, so each element must be dereferenced...O(1) complexity) or a linked list (one entry chaining to the next through some sort of memory dereference, leading to O(N) complexity for searching collided entries). Ruby never does real time hashes on strings, it uses interned symbols for everything, so there's no cached hash codes - you can use interned symbol id as hash table. And Judy avoids pretty much all of overhead he mentions. 
next returning nil is to be expected especially considering it takes an argument. It would be strange to pass nil explicitly. Also #map can be quite complex so there is need to be able to escape from the block of code quicker and since return and break do different things next is the way to go. Proper way is to first use select or reject like this: [1,2,3].reject(&amp;:even?).map{ |x| x*2 }
I've implemented lighter hash (inspired by lua tables) for ruby 1.9.3 for method tables/constants. It gives 5-10% improvement. https://github.com/funny-falcon/ruby/compare/ruby_1_9_3...sparse_array/ruby_1_9_3
That is actually a very good question. I never really pushed it since it was an external LGPL dependency (and I seriously didn't want to get involved into license lawyering), it was somewhat of a mess to make it optional since Judy and Ruby's crappy hashtable library require different APIs (one differing by one * level by design), and it wasn't clear at all back then if anything is going to come out of 1.9 branch or not, and so if it makes sense to go there or wait and see. Maybe someone should take a look at it again. There's also a new issue, [some anonymous Wikipedia editor linked to some patent which Judy might or might not be covered by](https://en.wikipedia.org/wiki/Judy_array). These are always pile of fail. (if it's even related in any way, who knows, it might be something completely different sounding vaguely similar)
:) I've implemented it just last weekend, so that it had no chance to be accepted yet
In the light of the hashDoS problem that Charles also mentions, I doubt that Judy tries, CritBit, Hash-Array-Mapped Trie or any other trie are the solution. Either they, too, use hashing (HAMT) or it is just too plain easy to elicit their worst case behavior, effectively making them fancy linked lists. While they all might be perfectly valid alternatives for "internal code", things unfortunately look different when the data structure needs to store values that are provided externally.
Great work, btw!
Could you elaborate on managing gemsets with bundler? I use rbenv for its simplicity but gemsets are one thing I miss.
Weeeeeeeelllllllllllll........ 1 &gt;&gt; local_var = "something or other" if false 2 =&gt; nil # 3 &gt;&gt; local_var 4 =&gt; nil See, what happened on the first line is that "" if false Evaluated to *nil* - which makes sense, because that's what the if statement returns. Therefore, it assigned *nil* to *local_var*. Yep. --- Fun fact: &gt;&gt; var = true &amp;&amp; 5 =&gt; 5 &gt;&gt; var =&gt; 5 The article makes a good point, but on completely wrong grounds. If you want to learn more, I strongly recommend the book [Metaprogramming Ruby](http://pragprog.com/book/ppmetr/metaprogramming-ruby), although first you should watch [these screencasts - The Ruby Object Model and Metaprogramming](http://pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming). These are investments and worth EVERY PENNY.
Nope. `local_var = foo if false` is interpreted as `(local_var = foo) if false`, not `local_var = (foo if false)`. So no assignment to `local_var` takes place.
It's interesting to note that the same is not true for class variables. The following code will still cause an exception using class variables, even though the equivalent code using local variables would produce `nil`: @@foo = 42 if false @@foo # NameError: uninitialized class variable @@foo in Object
All this and the word "bound" is never used once. I think the author still has some holes in his conceptual model. 
Hey, Trevoke. Thanks for reading. I'm a pretty green programmer, so no doubt I got some things wrong. Can you be more specific about the way in which my point is based on "completely wrong grounds"? I'm not trying to argue with you; I'd just like to learn. Thanks!
Huh, why do you think that is?
I have no idea to be honest.
If you're not sure, try `(local_var = "test") if false` and notice that the behavior does not change. If you're still not sure, try to set `local_var` to "foo", then do `local_var = "test" if false` and notice that `local_var` is still "foo". If `local_var = "test" if false` assigned the result of `"test" if false` to `local_var`, then surely `local_var` should be `nil` after that line even if it already had a value previously. Also note that `@@class_var = "test" if false; @@class_var` will cause an error while `@@class_var = ("test" if false); @@class_var` will return `nil`.
&gt;If you're still not sure, try to set local_var to "foo", then do local_var = "test" if false and notice that local_var is still "foo". If local_var = "test" if false assigned the result of "test" if false to local_var, then surely local_var should be nil after that line even if it already had a value previously. You're right, that's a very good point. But what's going on then? Why is local_var being added to local_variables? Is it really enough for the parser to see a possible variable and it then defines it as such?
Yes. Activerecord.
Biggest question I have is why would I use this instead of Heroku, AppFog, or EC2? For all of those things I can use the features you mentioned, at varying levels of complexity and configurability. What's different?
I guess it's a veiled advertisement, asking for opinions, and charging €20 to do so.
When you use bundler, you won't need gemsets. Here's a good link that describes it: http://rakeroutes.com/blog/how-to-use-bundler-instead-of-rvm-gemsets/
That was a great way to put it.
You're right and I'm wrong. However, skeeto wrote a [good comment](http://www.reddit.com/r/ruby/comments/ze3hc/one_difference_between_local_and_instance/c63xff1) about what's actually happening. In short - local_var is being bound, but not initialized.
It's a €20 credit for your account, not a plan that charges you €20. OP could have worded it better.
Whoops, you're right. We're giving new customers €20 credit free on signup.
 1.9.2p290 :034 &gt; a.flatten ArgumentError: tried to flatten recursive array Huh. Neat.
Trivial fact one : it works with Hash and Struct as well. Trivial fact two : it lets emulate the "window" behaviour of DOM js : irb(main):001:0&gt; Window = Struct.new :window =&gt; Window irb(main):002:0&gt; window = Window.new =&gt; #&lt;struct Window window=nil&gt; irb(main):003:0&gt; window.window = window =&gt; #&lt;struct Window window=#&lt;struct Window:...&gt;&gt; irb(main):004:0&gt; window.window.window.window.window.window =&gt; #&lt;struct Window window=#&lt;struct Window:...&gt;&gt; Let call that "useful" ?
Try this : 1] pry(main)&gt; Inf = 1.0/0.0 =&gt; Infinity [2] pry(main)&gt; (0..Inf).step(2).take(5) =&gt; [0.0, 2.0, 4.0, 6.0, 8.0] 
Check this out: &gt;&gt; a[a] = a =&gt; {{...}=&gt;{...}} &gt;&gt; a[a] =&gt; nil
It's not about advertising, we really want to get some feedback to make our cloud solution better. If there are Ruby programmers that care to take a look, I'd be glad to hear their opinion.
It's designed to work in tandem with RVM from the command line. All RVM interactions via JewelryBox inherit the same environment as the user's shell and thus should use the same settings. JewelryBox will not take over your RVM experience.
The problem with the OP's example is that `a`'s hash code changes when he inserts into `a`. If Ruby only cared about the object_ids, `a`'s hash code would not change (because obviously its `object_id` won't change), so there wouldn't be a problem.
Very cool - have it installed and was pleasantly surprised on how smooth the process was! :)
Kudos for creating iCar! This is great both for those wanting to set up their own local car pooling site, and for those rubyhackers wanting to learn more rails by reading code. Making it run on heroku out of the box is brilliant. The use of coffeescript and haml makes it a joy to read.
What does Ripper output for the statetment localvar = :foo if false That would settle the binding precedence bit once and for all. Further still, if it then behaves inconsistently with it's parsetree, we've found a bug in ruby.
I'm a bit of a Ruby newcomer so I'm not sure what to make of this: 1.9.2p290 :009 &gt; y Ripper.sexp("localvar = :foo if false") --- - :program - - - :if_mod - - :var_ref - - :@kw - 'false' - - 1 - 19 - - :assign - - :var_field - - :@ident - localvar - - 1 - 0 - - :symbol_literal - - :symbol - - :@ident - foo - - 1 - 12 =&gt; nil 
Very interesting. Thanks! :)
Everying in ruby is an expression, and therefore everything has a return value. Even if `next` didn't take an argument, you'd expect it to return *something*
Indeed, you can do this with hashes too.
Yes...
some hint: $('your-checkbox-selector').live('click', function(){ // AJAX call });
Dang nab it. Now I'm thinking of [this thing](http://www.homebuiltairplanes.com/forums/attachments/hangar-flying/3934d1247789791-unusual-airplane-sikorsky-sky-crane.jpg) lifting up and carrying files.
This. Too many gems with awkward names that reinvent roughly the same wheel, because the author didn't research the existing solutions.
My main concerns, as with any such PaaS, are security, scalability, redundancy and failure recovery, latency, and resource contention. Has your system's security been audited by a reputable third party? Systems like this are extremely difficult to secure even for experts. How does (say) your git repository arch scale with new users and new repositories? There are plenty of systems like gitolite that can handle hundreds or thousands of users but absolutely fall over once you get past that point. Will it take 10 minutes for you to change my SSH public key when you have an authorized_keys file with 10,000 keys in it, or do you have some other SSH system in place? If so, how do we know that this system is secure? What are your single points of failure and how do you mitigate them? For instance, looking at your [architecture diagram](https://shellycloud.com/documentation/architecture), I can see at least four: nginx, varnish, haproxy, and the shared file system. Are you aware that you are using three different load-balancers? Are you aware that nginx can serve static files and that varnish can act as a reverse-proxy load balancer? Why do you need all three when each duplicates the efforts of the others while introducing a new SPoF? If your instances are sitting on top of EC2 or some other IaaS provider, are they distributed across multiple availability zones? If not, is the metal geographically distributed? How is contention in your backend job processing system handled? If the job before mine stalls, will mine be locked out? How robust is your queueing or messaging system? Will it handle network partitions? Unevenly distributed arrival rates with large spikes? Unevenly distributed processing times with large spikes? Etc? What kind of latency and throughput does your shared disk solution offer? How well will it scale out? Virtualized IO is notoriously slow and shared disk on top of virtualized IO is ime a recipe for disaster. How can you guarantee that resources are shared equitably? Can a single rogue process take over an entire shared CPU? Why don't you offer a free tier? Is it because your costs scale linearly with the number of instances you have deployed? What does this say about the viability of your cost model? How can you claim that you're cheaper than Heroku or AppFog if you don't have a free tier? Disclosure: I was AppFog's first employee but I no longer work for them.
This is a really cool idea, but the requirement to use a specific, patched version of ruby makes it a non-starter for me. I want my dev environment as close to production as possible. Any chance that requirement is going to go away at some point?
Not really interested in being a hater here, but this is a solution to the symptoms, not the illness. Rubygems and bundler (which is really just a problem solver for anemic features of rubygems, hence another tool solving symptoms instead of illnesses) have improved in performance over the last few years, but unfortunately a lot of how the systems are architected, and the expectations that surround those decisions are to blame here. Concurrently rails applications have been getting larger as plugins have become more reliable in the rails ecosystem, leaving much more work to be done in gems which goes through that critical (and slow) path. I don't know if there's any clear solution to the problem, though. Tools with this level of momentum are notoriously hard to change and certainly can't be done overnight or in massive, sweeping changes that break compatibility. Alternatives have attempted to solve this problem and floundered largely because they do implement these sweeping changes. All that drek spit out, it'd be really nice to see this problem addressed at the root by the right people(tm), as there appears to be no desire to do so currently.
If you're looking for tablet compatibility, you're not going to be able to use ruby. Rubymotion works for iOS, but I don't know of an alternative for android.
Nice! I seem to recall one of my friends talking about using that for driving Cucumber tests on Android.
Tablet compatibility would be nice, but I am really after creating executables for at least Windows. What would you suggest?
Use jruby and warbler to create executable war files.
This is wrong on so many levels. Ruby isn't fast enough to justify starting an entire VM on every request and by now people should've realized CGI scripts aren't really a good solution to quickly running a script. Using Rack would require some more effort but it will pay off because: 1. All the wonderful Rack middleware are available, there's no need to hack anything together yourself. 2. Rack (the webservers that support it to be exact) can scale, CGI doesn't (at least not Ruby running on CGI). 3. It's not CGI and you don't have to deal with all the bullshit that comes with it :) A basic Rack application is as simple as the following: require 'rack' class MyApp def call(env) return [200, {'Content-Type' =&gt; 'text/plain'}, ['Hello world']] end end run MyApp
No. 
Same, I use Rubinius heavily for my personal projects, and aim to get it used at work as often as possible too, so if I'm tied to MRI, I'm less interested in the project in general. That said, it'll probably be worth mucking around on a few projects.
Fantastic looking tool. Shame about the GC patch part to get it going, but the upside is that, once Ruby 2.0 is out, that'll be less relevant. Going to give it a go without it and see how well Vagrant handles it. Random unrelated question, but what shell are you using that's autocompleting like that? I'm suddenly feeling like I'm in the dark ages.
just stop. keep this bullshit in php land.
http://www.amazon.com/Practical-System-Administration-Experts-Source/dp/1590598210/ref=sr_1_1?ie=UTF8&amp;qid=1347133830&amp;sr=8-1&amp;keywords=ruby+system+administration :)
Thanks for the great questions. We will publish a blog post after the weekend addressing them. But, briefly, I can tell you that our approach is to shard early to avoid scaling issues. 
BTW there is [the next version of Shoes](https://github.com/shoes/shoes4) in active development. It's based on JRuby/SWT and aiming to to be almost-fully-compatible with the previous version.
&gt; Second question: Would it be safe to assume that I could use Rails as a front end for the data my ruby scripts pull? Similar to how people use Perl in the backed and PHP inthe frontend. You _could_, but unless you were building a _really_ elaborate front-end, Rails is overkill. You'd want to use something way simpler like [Sinatra](http://www.sinatrarb.com).
* [Pickaxe](http://pragprog.com/book/ruby/programming-ruby) is a good place to start * [Everyday Scripting](http://pragprog.com/book/bmsft/everyday-scripting-with-ruby) is easy to get into * [Cookbook](http://www.amazon.com/Cookbook-Cookbooks-OReilly-Lucas-Carlson/dp/0596523696/) is good too I'm not completely sure what you mean by using Rails as a front-end for your script data, but it and [Sinatra](http://www.sinatrarb.com) are good for uploading/displaying data processed on the server.
Because heroku sucks. 
except don't bother with 1.8, [Pickaxe](http://pragprog.com/book/ruby3/programming-ruby-1-9) was updated.
Now that I've read more, this is what I would expect as well. What confuses me is why the tutorials I'm trying to learn with don't explain this or how to do it. This includes the Ruby on Rails class on ureddit--created by a guy that works for heroku. Michael Hartl's book doesn't explain this in v1.0 or v2.0 of his book. I found a heroku demo on youtube made by a guy who also works for heroku. He, like the other two, uses the default Gemfile configuration which only specifies sqlite3 and doesn't use any groups.
I understand your point and take no argument with it. sqlite is clearly not for deployment. What I'm frustrated with is that every tutorial/book/demo that I've found uses heroku with the default Gemfile configuration of sqlite3 and somehow it works. Not one of them even mentioned postgres.
I understand what you're saying, but I haven't gotten so far that I've found a resource for the grammar and syntax needed to modify the Gemfile. So far, I've seen two different types, but this is probably just related to having had to fight my OS (Ubunu) to install and actually use the latest version of ruby.
Previous versions worked fine, but I don't use pow myself and haven't tried it with this new release. If it doesn't work, let me know and I'll try to fix it right away. EDIT: When I say it works with Pow, I don't mean that pow actually uses it to boot faster. Though, upon considering that now, I should clearly try to make that work.
It is because local development doesn't require the installation of postgres
Like ViralInfection said, the patched ruby is phenomenal for other reasons (general speediness). I'm using fishfish shell: http://ridiculousfish.com/shell/. It takes a bit of getting used to, but I'm a big fan.
[Pretty basic course for the non-programmer](http://www.lynda.com/Ruby-tutorials/essential-training/47905-2.html). I'm an SA and didn't do any *real* programming before, sans the ocasional simple shell script. This course helped me understand ruby &amp; OO programming. They have rails courses as well, but I've never used them.
Actually, before rubygems was popular these kinds of issues weren't really something you had to worry about, and that was long before the performance gains of 1.9. I have some authority for making these statements; I have quite a few patches on rubygems, bundler, MRI and tons of other projects. I like my anonymity. strace ruby requiring a gem to get a quick glance. here's some important things to note: * even 1.9's integrated rubygems monkey patches Kernel.require. that's right, Kernel.require in the purest form (the C version) is ever only used by rubygems. All other requires will go through a rather large path to find the right file based on your dependencies (see the note about Gem.find_files below). * in 1.9.2 and earlier of the 1.9 series (it may still be in 1.9.3, but isn't used), there was a feature called `gem_prelude` which was thankfully scrapped and was a small C extension which was responsible for populating the gem load path, which the monkeypatched require would use. This had horrible dependency issues and rubygems itself was patched to work around gem_prelude. So, if you're reading this right, rubygems was fighting the ruby interpreter's misfeatures. * Gem.find_files will happily walk thousands of gems to find your require -- this cost is a great deal of the time spent in rubygems, as there is no distinct package -&gt; require mapping. * Even with bundler, rubygems has its own dependency management system and, more or less, both are used in the instance you use bundler (though there are some details I'm glossing over). These algorithms are more expensive than you might give credit for. * And this is before you get into all the politics of these issues, which is a large part of the reason we haven't seen replacements catch any traction. It's easy to argue that bundler would be a completely forgotten tool if it wasn't for its use in rails. It's also important to remember that rubygems was something that was conceived over a weekend at a conference by 3 people who have long since abandoned the project, it took years to gain traction because the rest of the community had little need or interest for it, (and again, largely through rails users adoption) and the maintainers now are doing the best they can with all that debt. The system does not scale and will need to be replaced.
The Rails Tutorial by Michael Hartl most definitely does. &gt;Note that we’ve also taken this opportunity to arrange for SQLite to be included only in a development environment (Section 7.1.1), which prevents potential conflicts with the database used by Heroku (Section 1.4). http://ruby.railstutorial.org/ruby-on-rails-tutorial-book#code-gemfile_sqlite_version EDIT: Also, here: &gt; Note that Listing 2.1 is identical to Listing 1.5 except for the addition of a gem needed in production at Heroku. &gt;The pg gem is needed to access PostgreSQL (“post-gres-cue-ell”), the database used by Heroku. http://ruby.railstutorial.org/chapters/a-demo-app#code-demo_gemfile_sqlite_version_redux You might want to check this out: http://railsapps.github.com/rails-heroku-tutorial.html
Thanks for the lengthy reply -- interesting information. Politics and traction aside, if you were in a position to write rubygems as it should have been, what would you do differently?
I do what is known as DevOps in our organization and Ruby is our language of choice. Prior to picking up ruby I only knew bash scripting. I have found that Ruby is a great language for sysadmins and is extremely flexible. If you ever find that the need arises to do bulk system configuration work I would recommend looking into [Chef](http://www.opscode.com/chef/) which is a system configuration framework built on top of ruby. If you ever need any specific examples on how to do certain Ops related things in ruby feel free to PM me. 
&gt; If I was a Java developer, this post may have been about Factory Factories, and Factory Factory Factories.
It's already posted here http://www.reddit.com/r/ruby/comments/zc044/using_recursive_sql_with_activerecord_trees/
'cause sometimes Puppet or Chef has to run scripts for you.
Fellow sysadmin here. [Learn To Program](http://pine.fm/LearnToProgram/) worked best for me. I liked it so well after using the free online site that I went ahead and bought the physical book. I've read pretty much every recommended ruby book out there, but I think I would have done just as well with just Learn to Program, and then the [Ruby On Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book). The other thinks I use for reference are the official [api documents](http://www.ruby-doc.org/core-1.9.3/) and then [Ruby Toolbox](https://www.ruby-toolbox.com/). As for reading data, you could use a web interface, but I always just write to log files or email reports to my inbox, depending on the situation.
Ruby, no, but Rails is a large framework and to use it well, you will need knowledge of basic web technologies like HTML, CSS and JavaScript. As you dive deeper into into it, you'll need to learn RSpec or equivalent, Heroku or equivalent, Redis/Couch/Mongo and/or MySQL/Postgres/etc. If you're trying to learn how to program in general, though, I would recommend that you forget about Rails and just focus on Ruby (or any language) and just learn the basics of programming.
Don't start off by learning Rails. Just don't. Learn Ruby first, make some things that aren't in Rails, *then* learn Rails. Once you start learning Rails, it would be a good idea to learn HTML/CSS, because Rails is a web framework and you'll need to use HTML/CSS to make websites, obviously, even if you're also using Rails. Also, sentences end in a single question mark.
If you're following my tutorials on UReddit, you skipped over this section: http://guides.railsgirls.com/heroku/. I purposefully didn't put Heroku config into my material but rather link out to sources that I know will stay up to date, like the Heroku Devcenter. https://devcenter.heroku.com/articles/rails3 If you can point at a specific tutorial you would like updated, I would be happy to update it for you. You can also reach me directly on twitter @schneems. Thanks for reading the tutorials. 
We recommend using the same DB for production and development. 
the sqlite3 gem requires libraries installed on the system that are not available by default to install. It also has the nice side effect of ensuring that you're not accidentally writing data to the disk which gets over-written at least once every 24 yours. If you really wanted it to compile correctly, you could use a custom buildpack: http://blog.heroku.com/archives/2012/7/17/buildpacks/
Heroku employee here, the same guy who made the Rails UReddit course. I recommend using our docs when possible: https://devcenter.heroku.com/articles/rails3 they should always be the most up to date, as any changes take time to propagate to 3rd party tutorials. If you see a glaring omission in my work or in the devcenter, point it out and i'll fix it. 
A good article that recommends [Roadmap for Learning Rails](http://techiferous.com/2010/07/roadmap-for-learning-rails/) 
Shoot for the fences, learn Ruby :through =&gt; Rails. I specifically designed the UReddit course with this in mind...if you have feedback, i'll take it. http://ureddit.com/class/40250/web-programming-with-ruby-on-rails
Also, I'd recommend learning some javascript before learning Rails. I'm suffering now because the book I'm learning with uses lots of Ajax and jQuery syntax and I'm not familiar with them.
Grab the command line tools: https://developer.apple.com/downloads/index.action# Then install rbenv: https://github.com/sstephenson/rbenv Install ruby using rbenv/ruby-build, then you can install rails afterward.
We use the following instructions and script to set up all our OS X machines for Rails development: https://github.com/thoughtbot/laptop
I recommend using RailsGirls setup guides: http://guides.railsgirls.com/install/
A little more comprehensive setup than just Ruby: https://github.com/thoughtbot/laptop Highly recommended.
Once you get RVM installed, I highly recommend using [JewelryBox](http://unfiniti.com/software/mac/jewelrybox) to manage the different versions of Ruby and their corresponding gemsets. It's just a graphical frontend to RVM, so you can easily use both! So there's nothing to lose, really.
Others might recommend setting up GCC and XCode and rvm and installing manually, but you just don't need to do that. Go to [Rails Installer](http://railsinstaller.org/) and... install it. It installs GCC (without XCode, which is huge and takes forever to install), Ruby, Rails, git, sqlite, and even RVM. And it's quick and easy. So if you're just starting out, go with that. If you need or want more control later, you can worry about that then.
PostgresApp is pretty cool and is probably a better way to install the db. It is still nice to have brew around though. Also, I would install [pow](http://pow.cx/). It is a great app that allows serving up ruby applications, just by symlinking them to a directory.
There is an option in Xcode to install the command line tools. Not in the installer, the Xcode app itself. Somewhere in the preferences. On a phone at the moment and don't remember exactly where. 
Man I love pow and xip.io If you have a few sites and you're doing lots of device and VM testing, you might like this tiny app I made for pow. https://github.com/daz/powapps 
There is all kinds of magical goodness you get once you install [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) And be sure to check out my theme ([superjarin](https://a248.e.akamai.net/camo.github.com/4de36565dc6643947f094b873dfc86cbbdc7731e/687474703a2f2f692e696d6775722e636f6d2f35503444362e706e67)) :)
Yup, have a look at: * https://github.com/burke/zeus/blob/master/docs/ruby/modifying.md * https://github.com/burke/zeus/blob/master/rubygem/lib/zeus/rails.rb * https://github.com/burke/zeus/blob/master/examples/zeus.json I think I need to beef up this documentation a bit. If you have any questions after reading it, I'll do my best to answer them. EDIT: Basically, what you'll want to do is something like: # my_plan.rb require 'zeus/rails' class MyPlan &lt; Zeus::Plan def boot require 'active_support/all' require 'rspec' require 'spec_helper' $LOAD_PATH.unshift(File.expand_path("../test", __FILE__)) end def rspec exit RSpec::Core::Runner.run(ARGV) end end // zeus.json {"command": "ruby -r./my_plan", "plan": {"boot": {"rspec": []}}}
I recommend you this tutorial : http://ruby.railstutorial.org/ You might run into problems during the install, but not for sure, it's all part of the learning process ! 
cool, I'm going to muck around with this tomorrow, will let you know how it goes.
I'm going to try this the next time I nuke &amp; pave.
tell that to people who have never installed postgres. granted the new postgres.app is FANTASTIC but most of these tutorials were written before that.
Im using: http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html Not completely up to date but is more than enough to get the basics before progressing to rails.. 
I'm sad you dropped the Ubuntu version of laptop, by the way. :(
They're using [Tokaido app](https://github.com/tokaido/tokaidoapp) on OS X which is previously known as Rails.app and [raised funding on Kickstarter](http://www.kickstarter.com/projects/1397300529/railsapp).
You're missing my point; it's rails *requiring bundler* that made bundler popular. It solves real problems, I'm not disagreeing with you there, but so do all those rubygems replacement systems (in an arguably much better way) that never got adopted because of the same political arena. What I was suggesting was that the only way you're going to replace rubygems is as a part of rails or equally critical-mass system (like chef or puppet or sinatra) as a bundled requirement.
yeah, that makes sense. Can you name drop the other rubygems replacement or augmentation systems that you think arguably solve similar problems in better ways? I am not aware of them (you know, because they didn't come with rails :) ) and am curious. (I've been _quite_ happy with bundler, myself. Although yeah, annoyed at the rough couplings in what's become a very ball-and-twine system). 
In another comment so that you'll get the ping. I've started using it on a client project, was wondering whether you prefer a github issue/mailinglist email (do you have a ML?) for bugs I've run into (hit a few doozeys). Also, it doesn't seem to play too nicely with foreman, weird things happen w/ the console's PS1, but tests ran pleasantly fast.
Sure, but I was just indicating the command line tools are still available in XCode, if you wanted to go that way.
More and more projects and code require Ruby &gt;= 1.9. Also, 1.8.7 has been End-Of-Lifed, and will only receive security patches for one more year. 1.8.7 will be officially unmaintained as of July 2013. Apple _needs_ to update their version of Ruby. **Note:** I am not attacking Apple or the quality of their software, just pointing out how Apple could improve the Ruby developer experience on OSX.
Use one Thread to print stuff from the TCP port http://www.tutorialspoint.com/ruby/ruby_multithreading.htm 
Yeah, that's just it though, they're not thinking of the developer experience so much as maintaining compatibility with any systems programming that has been already done for OS X. Similarly, if you sudo apt-get install ruby on Ubuntu now, you get 1.8.7. At some point, as an application developer rather than someone gluing systems together, you're going to have to adopt the practice of ignoring the system-level runtime for your language-of-choice and installing your own, because OS packagers are notoriously conservative about what they'll give you.
what you're trying to do is harder than you think, there's no simple answer or super easy way to do that. the first step might be understanding why you're code does what it does -- do you see how in your loop, you are waiting for input at the top of each loop? In fact, waiting for input from two places -- the socket and the keyboard; if either one has no input to give you, the loop is going to wait until it does. what you are asking, while it sounds simple, is not in fact so simple, in almost any language, not just ruby. 
I've more or less got it figured out using 'monitor.' Just trying to iron out the kinks now. I assumed it was complicated; that's why I asked here.
One of my roommates last semester was convinced that Ruby was total shit simply because a few students told him so. I asked him which language people should be using instead; he replied, "Java".
Zelda &lt;-&gt; Chiptunes &lt;-&gt; Ruby You've discovered the Triforce! [Item Get sound]
Thank you very much for sharing this :-) Most especially for *documenting* your code so we onlookers can understand what is going on!
I didn't skip it, but I certainly missed it. Thank you for your response and thank you for making the tutorials. 
The fact that ruby lets you do shit like this is exactly why I stopped hating it. Epic work.
Why would you avoid doing what's on that line?
Thumbs up! Finally a DSL that makes it enjoyable to compose and arrange a song in a text editor.
It was reasonably straight forward to get the main zeus command to just prefix the 'ruby' bit with 'foreman run', which seemed to work, but I get a weird behavior, in that sometimes my tests fail with Zeus and not with a regular run of rake. I unfortunately can't just show you the code, because it's client code, so I'm going to see if I can track down some potential causes and replicate it elsewhere. I think it may be because I have both selenium and poltergeist tests running in the same suite, and zeus is not preloading bits it should be, or something.
&gt; What this isn't ... good programming practice ... patching NilClass I think you misspelt "fucking awesome."
We are grabbing a constant straight from a Module, it doesn't feel as right as the rest of the code. Meter is being used both as a mixin and a store for constants.
Puppet. Use it. If you're writing a bunch of scripts to manage the configuration of your boxen then you're wasting your time and increasing the chances of misconfiguring them.
In order to invent Linux From Scratch, first you must create the universe! :)
If you have significant interaction with students other than lectures (with some combo of feedback on assignments, interaction in forum, office hours, answering questions over email, whatever), and you actually know what you are doing and are good teachers (and you come off as if you probably are), then $250 is a really great value for that course, nice. (which you could take to mean you could probably get away with charging more, but if you can make a decent living charging what you are, please keep on keeping on!)
you find it's easier for newbs to start with sinatra before rails? Interesting, I would not have predicted that (but what do I know, only played with sinatra a bit, and it's been an awful long time since i was a newb). 
Will happily do. :) we have about right number of students signing up per course as we want, and we can pay our bills with it, so we are happy with the price for now. What it does to me personally is that it freed up a lot of time to hack around other projects, comparing to when I had a day job - it takes only like 5 minutes for me to "grade" someone's assignment and maybe time here and there to answer questions. 
I've been doing Project Euler problems in Ruby for this... going to give this a shot later. I love programming exercises
I've been doing these with some coworkers over the past few months. The're excellent! Try them with a group, it's best to have many minds providing input. 
Clever solution to an ill-specified problem. &gt; we lost track of the timing of execution If the problem is a timing issue, it means your code is coupled in a way that relies on temporally-important events. This is the actual problem. Also, this code makes red flags go up considering it is described to be a solution to a timing issue and may suffer from incorrect ordering of logging due to buffering. It kind of reminds me of [the XY problem](http://www.perlmonks.org/?node_id=542341) in that the solution pursued was to use printf and not unit testing or re-designing.
bad ass. thanks a lot man.
you mean the HTTP get/post/delete verbs? Huh, interesting. I will admit that I'm a heretical hater of Rails "resource-ful routing", I actually still mostly use manual routing. Is that the part that ends up tripping up newbies? i would find it confirming of my heresy. :)
we could chat using skype, icq, google chat, or whatever. I'd just like to have somebody I could have conversations with to better understand the material. Anybody up for it?
You definitely have a point, especially since the solutions are generally short pieces of code that don't require you to focus on architecture/readability/reusability, but I think that being able to scour the internet for information on how to work with those random tidbits and then working effectively with them in programming language x is a good skill.
Here's a curses app I wrote you can check out. Curses stuff is in lib/rdoc/ri/browser* https://github.com/rdoc/rdoc-browser
You should only use curses drawing commands, mixing commands may corrupt your output.
You could have your module redefine method_missing on inclusion -- you're already class_evaling. I think that `define_method` is orders-of-magnitude slower than `method_missing` to boot, though I can't recall the source of this belief.
nice thanks. im having some serious frustrations with this. im gonna tough it out because its definitely what i need. one thing thats bugging me is that it seems that the window requires me to include a getch or getstr invocation for it to display the window. for instance: Curses.init_screen() x = Curses::Window.new(0,0,0,0) x.box("|","-") x.setpos(5,5,) x.addstr("this is a test") That is pretty simple except it does nothing. If I add the line x.getch at the end then it displays the window until any character is hit. 
Most of them aren't that complex. It is find the one tidbit, and the answer is pretty obvious.
You need to do multiplexed terminal I/O. You might try reading this guide: http://ruby.runpaint.org/io
Yep. The OP issue is not a problem of multiplexing, but a problem of managing screen real-estate and cursor positioning. Curses helps with this, but for some simple applications even plain old [VT100 cursor positioning escape sequences](http://www.termsys.demon.co.uk/vtansi.htm#cursor) could do the job just fine. 
That you for the writeup. If it's any consolation, I don't think there is any easily referenced similar system in place for a language similar to Ruby. Python does not have a standard package infrastructure. They have eggs and pips and I don't think anyone is happy with those either. It's different, but it took Java ages to come up with Maven which in my opinion does a good job of handling dependencies.
Wow fish looks cool, trying it out now.
Yep. It's a complete stack just like Rails but unlike Rails it doesn't try to force you to stick to specific design conventions (i.e. UJS, REST, etc..) That's what a framework should do. 
The load path by default does not include the current directory (Ruby 1.9), so you either need to write require './mymodule' or use require_relative require_relative 'mymodule'
Yeah, I think I'll use curses. I just didn't know where to go from there, I was so frustrated because my code wasn't wrong, the design just wasn't working. I felt powerless. Thanks a ton.
Preconditions are pretty useful. http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/base/Preconditions.html
Aditional Info **HOW** was already said. **WHY** is what should concern you. As a security measure, requiere EXCLUDES the current path from what is being required. Ever seen that in linux, to execute something on the current path, you have to type './my_executable' ? It would be quite simple to make a file called 'ls', make it executable (chmod +x ls) and type some nasty bash script inside it. Same rule applies to ruby. require searches through the path. require_relative, well, it's obvious. 
If your file name for MyModule is my_module.rb, and it is in the same directory where you are requiring it, you can do the following: require './my_module' class Foo include MyModule printthis 'bar' end You require files (which also evaluates them) and include modules which are already loaded.
The module you're talking about is actually called "Kernel", not "Kernal"
Hi!
if you go looking for me at lunch, I'm wearing a shirt with a cat-shaped Schrodinger's Equation on it. I'm also one of the few here with no Macbook in front of me, which may help to narrow it down.
I will hunt for your shirt. I have a Giants hoodie on and also no macbook :)
the howling shaolin!!!!!!!
Oh i think i see you...
You were in fact easy to spot. Nice meeting you! 
Further `.()` is shorthand for #call in any circumstance. Example: class X; def call; 42; end end X.new.() # =&gt; 42 
I have that same shirt, it's awesome.
That may be the case, but if so, he should definitely change his wording.
You confirmed my theory that Padrino is cool. EXCELLENT!
I know, but curses is just such a pain. It's poorly documented and not Rubyfied. It doesn't feel like Ruby to me. 
Thanks! Those guys put on a great podcast. It was fun to chat with them.
Excellent book, thanks!
I prefer that curses remains un-rubified. It's easy to figure out what each method does from the man pages or curses tutorials. Since you can subclass Window, it's not difficult to create self-contained functionality, even though `attron` blocks look a little funny.
I know both well. I prefer ruby from a language theoretic perspective. It's elegence, introspective &amp; metaprograming facilities are fantastic. But it really depends on what you're doing. If you just want a scripting language for random tasks, the choice is basically which ever langauge you prefer. The real, practical difference is in what you want to do with the language. The python community is all over the place, while the ruby community is pretty rails/web centric. If I'm doing web stuff, ruby all the way. If just writing an application that needs some third party libraries &amp; community support, I usually go with python. Also, something to think about is the fact that python is pretty much the easiest programming language to learn out there. Significantly more so than ruby, I would say.
http://lmgtfy.com/?q=sinatra+mailer
Doesn't matter, just pick one. Every minute you spend on picking one over the other is a minute you should spend on just learning either one. Flip a coin or something if you really can't decide. Once you're proficient in one it'll be a lot easier to learn the other. 
Already dabbling in JS a bit. I will definitely focus a bit more on it though due to your suggestion! Thanks for your input Jawdirk!
Without a doubt I want to learn both and do so continually. I think your exactly right though in that they (Ruby / Python) really are just different implementations of a similar solution, as in they are alike in many ways. Thanks for the Pony gem-reference, Ill check it out! 
Noted, good advice. Thanks!
python. then ruby.
Ruby. But either is better than the alternatives I've seen, at least for maintainable, general-purpose programming. Just be aware that to a Rubyist, this is what Python looks like: self \_\_init\_\_ self.\_\_init\_\_ self self \_\_init\_\_ self which is an ugliness, in my rubyist opinion. :)
How does this work under the hood? I figured I'd ask before I go and research it. Does it just do a naive iteration up to sqrt(n) and check that way, or does it do a sieve or something?
haha, thanks for the heads up, I shall avoid asking this there!
I have to agree with your rubyist opinion. The more I look at both Python and Ruby, I notice that Ruby is just downright enjoyable to read.
Was there anything specifically that you noticed about Ruby that made it a better fit for you?
To be fair, I don't know. I somewhat expect it to be a C implementation of some prime-finding algorithm - but in general, I'm not worried about the implementation of such a method. Let me know if you do find out though :)
It is. The thing that irked me about python is that I just don't like things like this: len(string) I much prefer Ruby's method syntax: string.length 
Yea Ruby's syntax is far less cryptic the more I look into it. Your definitely right.
The "everything, everywhere, is an object which accepts messages/methods and which returns something" philosophy is awesome. I don't think any other language takes it that far, and it allows for some very concise, readable lines of code that do a lot. It will take you a while to understand the "inject" method, btw... but that's OK. When you get it, it's a "whoa" moment. Here's a line that applies a sum (it's a + in this case, but it could be any method that the objects in the array understand) across an array of numbers: [1, 5, 9, 2, 5, 3, 6].inject(:+) #=&gt; 31 The interaction between blocks and iterators is also great. The language is just *fun*.
I use Ruby everyday for my day job without rails. I have never encountered a situation where a gem I needed required rails to work. I do system level scripting with ruby and some systems automation work in a DevOps capacity at my company.
I guess it all depends on the type of things your are trying to do with your code. Are you trying to write code for web consumption or are you using ruby for systems stuff?
[I added the Sieve to the benchmark and also Ruby's stdlib](https://gist.github.com/3733152#comments), and was surprised to find that even the linked `isPrime` method outperforms the stdlib by almost a factor for 4. Not quite sure what to make of that :/
&gt; Rehearsal ------------------------------------------------- &gt; isPrimeRegexp 7.910000 0.030000 7.940000 ( 7.932688) &gt; isPrime 0.040000 0.000000 0.040000 ( 0.034080) &gt; single_sieve 4.030000 0.020000 4.050000 ( 4.051347) &gt; cached_sieve 0.010000 0.000000 0.010000 ( 0.016110) &gt; stdlib 0.240000 0.000000 0.240000 ( 0.238048) &gt; --------------------------------------- total: 12.280000sec &gt; user system total real &gt; isPrimeRegexp 7.950000 0.010000 7.960000 ( 7.958356) &gt; isPrime 0.030000 0.000000 0.030000 ( 0.031358) &gt; single_sieve 4.060000 0.000000 4.060000 ( 4.060547) &gt; cached_sieve 0.010000 0.000000 0.010000 ( 0.014642) &gt; stdlib 0.230000 0.000000 0.230000 ( 0.230178) Since I wasn't exactly sure what Benchmark.ips did, I switched back to the Benchmarking provided with the Ruby stdlib and made a small change to your code (I asked each report to run 50,000 times). I also asked to have a trial run and a run after the data is cached. I now see that the cached_sieve is ridiculously fast, the isPrime is right behind it, then comes the stdlib, and then other stuff not worth using. Interesting. I guess the stdlib must be implemented in Ruby; and it's not using the isPrime implementation, apparently, which is the one I tend to think about when I have to figure out by hand if something is prime or not. Well.. I'll consider that next time I have to calculate one million primes.
&gt; What jobs hire people skilled in ruby? Mostly web development jobs using Ruby on Rails at smaller companies/startups. &gt; What is ruby mostly used for in the real world to make? Ruby can be used to create anything, but is mostly used for websites and sysadmin tasks. &gt; Also, how is ruby on rails related to ruby (and what can you make with that)? Ruby on Rails is related to ruby because it is a web framework built with ruby. It helps you organize and build your website quickly by using ruby code. If you're interested in learning Ruby on Rails I'd recommend starting with learning the syntax of ruby, or you may end up lost with the "magic" that Ruby on Rails does :). For an intro to Ruby check out: http://tryruby.org/ For an intro to Rails check out the screencasts at: http://rubyonrails.org/screencasts Hope that helps :)
Check out Chef, Sinatra, Buildr, and Rails.
Caching is a memory trade-off, and I'm guessing the implementers didn't want to make that choice for us.
You. I like you.
&gt;which can be acquired via reading and performing lab exercises is this the standard disclaimer for an amateur turned professional like saying "oh, I would never actually crack real sites, I didn't do anything illegal, I just read up about the tactics" ?
I actually have a job where I use Ruby for mostly things that are not website related at all. I have a team of guys (in a department with around 40 non-Ruby devs) that focuses on writing automated tests for the software my company makes. Ruby allows us to build tools and write API-level tests quite quickly, and has thus proved an invaluable tool. Our products (video surveillance) use a wide array of technologies and Ruby has played just great with most of them: UPnP, SOAP, RTSP, A/V streaming (some decoding and encoding of MPEG-4 and h.264), and a whole host of other random stuff.
Twitter switched from Rails to Java in 2011 (see [here](http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html)).
As someone who read a mini Sinatra tutorial on a Monday and had a fully functioning prototype by Wednesday. I cab confirm the claim of witchcraft. 
They still use a lot of ruby for the front end but have abstracted a lot of their high performing code into services written on the JVM, mostly Scala actually and not Java.
I found it better than Powershell for stitching together other processes and sending the results to an external database. 
Thanks. Haskell is high on my list of things to look into for inspiration. Besides quickcheck, what else would you recommend?
Well, there's a host of QC derivatives, Smallcheck being one of the more interesting ones. It tries to exhaustively test in a semi-deterministic way. For small types (in the sense of types with a finite, small number of elements, like Boolean or any old Enumeration), it makes sense to just "test them all" in most cases.This can be combined with the fuzz testing to ensure better coverage of the type. Consider, as an example, the case of `Either` -- with a pure quickcheck scheme, there's no way to know that we ever bothered to test the `Left` side, since we may have only ever generated cases for `Right` -- while the probability of this is pretty low over a few hundred test cases, it's definitely possible if you're running a low number of cases (perhaps during development). To alleviate this, you might try to recognize small types (indeed, smallcheck 'solves' this a different way, by trying to be exhaustive over every type, but limiting the number of cases to some finite amount. I never liked that methodology much[1]) In this way, you still test the 'big' types like (in ruby terms) Fixnum and String with random data, but 'smaller' types like Boolean would be guaranteed to be tested exhaustively. The other notion that's really only applicable in the world of object oriented languages is the idea of mocked-methods. Whereas functions are completely determined from their types, a method is determined by the state of the object it's attached too and it's type. Methods often specify pre and post-conditions (something that ruby has no formalism for (except in external libraries), but languages like C#, Java, and the like all have various tools for that are much more popular). These are ripe with opportunities for shotgun testing. Ensure the input state matches the preconditions, blast w/ data, ensure postconditions hold. A system which allowed for external specification of these pre-and-post conditions in an easy way (something like [2]) would allow for some really nice property specifications and indeed some of that 'executable documentation' we all desparately strive for. Anyway. Hopefully these ideas provide some inspiration. [1] It's been a while since I've used smallcheck, apologies if I'm misrepresenting it [2] assertion do pre do # instance eval in the context of object _before the action_ some_instance_method.should == 1 end action &amp;:method post do some_instance_method.should == 2 end end Indeed, this looks like just 'describe, before, after' with some extra bits, but it is a bit more clear than doing the equivalent in rspec.
Don't forget Rails for zombies.
Anecdotes != Truth. Show me some statistics that say that Ruby is ruining programmers. I've known plenty of terrible Java coders and Java is way more prevalent. Also I'm guessing you haven't heard of Groupon...
+1 for Rails for Zombies. "It's fun, AND educational!" And you'll get the song stuck in your head. Gah.
Most uses for prime numbers, e.g., encryption, require very large primes. It's more typical to simply determine whether the value is a "probable prime". Using a couple hundred iterations of an algorithm like [Miller-Rabin](http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test), it would be expected to be wrong at most once in the lifetime of our universe. For large primes the algorithms provided here are intractable. For example, the standard library method provided would never return from a call like: 64765345643765978569785619876987689768769876876434111357911111111.prime? An [AKS](http://en.wikipedia.org/wiki/AKS_primality_test) implementation in the std-lib would provide a definite answer to "prime?" and still be more efficient for large numbers than those listed.
Want to know the reason you have tons of negative downvotes? Because you're wrong about what "good code" is. Good code is code that works, first and foremost. Crappy code that works may be impossible to maintain and inefficient to update, but that doesn't matter to someone that wants to create an application quickly. There's nothing wrong with not knowing how a gem or plugin works. There's nothing wrong with the "Rails Way" and the "magic" that happens. Ruby is a great gateway to learn that stuff whenever you run into a dead-end. If you're coding a solution that serves it's purpose quickly and correctly it doesn't matter if you roll your own data structure to do it more efficiently, all that matters is that it works. Here's a tip. Stop pretending that "web development" is some pretty little perfect world where you can write sophisticated, well coded enterprise applications. The web is a giant mismatch of technologies. Without Ruby there might be more traditional "good code" but there would also be many people out there that couldn't even get into the field without it. People like you are the reason that Ruby communities exist. If you were in charge of the programming world we'd still be stuck in the Windows 95 days. More developers = More competition = Better applications. It's sad that you spend most of your time trolling the Ruby subreddits instead of contributing to what you consider important.
$_ isn't entirely true - it's the last line read by readlines or gets, IE: from standard input. If you called the program: # app.rb while gets { puts $_ } You'd get a program that puts out its standard input, and ruby app.rb &lt; letter.txt Would be equivalent to cat letter.txt You also forgot $&lt;, which is aliased as ARGF: #rubycat.rb $&lt;.each {|x| puts x} Which acts exactly the same as cat: ruby rubycat.rb letter.txt
Very interesting, thanks. I'll update the post!
If GDataError is inheriting from RuntimeError or StandardError, shouldn't it catch it? class GDataError &lt; RuntimeError
I don't believe so. I just did a quick test: class Blah &lt; RuntimeError end begin "string".abc rescue Blah =&gt; e p e end I believe the @session variable is throwing your error, but that's just from a quick look.
Ahhh, that makes sense. I'll give that a try.
Vim on Linux, SublimeText for small changes from Windows. Tried a lot of other editors but none of them worked for me better than these two.
I've been using Sublime Text 2 recently after spending a considerable amount of time working in Vim and I absolutely love it!
Gvim
Emacs
&gt; I don't think any other language takes it that far Oh, some others do. Smalltalk for one (this is not a coincidence). But yeah, I like ruby too, for that. And i still never use `inject`, heh. 
bookmarked! thanks.
I'm surprised at the number of responses from \*nix users that are *not* Sublime Text 2. Is this mainly entrenchment in an existing editor, preference for emacs/vim key bindings, or does Sublime not work well on \*nix?
vim, as does all but one person at our company.
SublimeText2 and vim. I use those two for just about every language I use.
Sublime Text 2 in Vintage (vim) mode. The features of ST2 combined with being able to control things like vim is absolutely perfect for me.
Rubymine. Yup, I use a commercial IDE. Sue me. 
I second this. Everything JetBrains knocks my socks off. No, I do not work for JetBrains. 
For ruby, python and sh I use vim on linux, win7+cygwin and osx. I also use textmate sometimes. I use textmate for R. For java I use IntelliJ. Because java is impossible to use without and IDE.
Matz write ruby mode for emacs himself.
For me, it's because vim works in a terminal. That means I can use the same editor all the time, no matter if I'm sitting at my dev box, or if I'm SSH'ed in from some random machine elsewhere.
Smalltalk is a good example, clearly ruby took some cues from it!
Can anybody recommend a really good **free** Ruby/Rails IDE for Windows? I tried Aptana, and perhaps I don't know enough of what I'm coding yet, but it seemed really complex. I'm doing Ruby tutorials and such right now and Notepad++ has been sufficient for that, but I think I might want to step it up. With a free program of course.
+1
Well shit. I have IDEA and now AppCode. Rubymine and WebStorm will likely be next. Every few years I can adopt a new JetBrains IDE.
SublimeText2
Well, vim and Emacs are highly programmable and there is not a whole lot that other editors do that vim or Emacs cannot do. It may take time for someone to implement a certain feature but it usually gets done if it's truly useful. Some things that they don't do well have driven me to other editors though. GUI integration is a big one. I love dropping files and folders on my editor's icon and getting a new window with a nice browser for those files. I can also invoke them from the command line in a similar fashion. For me it's a pretty killer feature. I love Emacs but having all windows share the global list of open buffers doesn't really work for me and project modules for Emacs haven't done it for me yet. The situation may be better in vim, I haven't used vim for more than config files and quick edits on servers in quite a while now.
There's an upvote button on this website.
Emacs.
Sublime Text and Gedit.
I wish I had the time to overcome the learning curve required to be productive with emacs. My boss uses it and it's pretty impressive.
What do you use as terminal on windows? I wanted to try win only development, but I just cant work without bash. 
I'm right here with you. Graphical debugging is where it's at. 
gedit, nano
The learning curve is mostly a myth. Emacs isn't modal so you can start typing immediately. Both the GUI and terminal (M-\`) have menus. Fire it up, hit C-h t (control-h t) to run the tutoral. Have fun.
I personally run a VirtualBox instance of Ubuntu Server, have it set up to run headless, have it set up to have a public IP on the network, and SSH into it using Chrome's SSH App.
MacVim
Thanks for the clarification :)
I used Aptana for a little while but once familiar with Rails it was more or less surplus to requirements. In my opinion it's probably better to stick with a text editor (like vim, emacs, whatever doctrine you subscribe to) and shift to an IDE if you find yourself needing something that it offers. Snippets and macros will probably suffice, code completion is probably available if desired as well. Edit: As an aside, I found Windows to be quite painful to work in with Rails, *nix (including OSX) will probably afford less complication while you're developing.
 vim $(gem which English)
Notepad++ with the explorer plugin.
vim or macvim
Emacs (and elisp) inspired Ruby in lots of way, so it's a "must try" text editor for every rubist out there. I love it.
Is it a forgone conclusion that Sublime is better than Vim or Emacs? I suppose you could say I have a preference for Vim 'keybindings'...but Sublime supports those pretty well. I'm not sure how Sublime improves on Vim...it seems like a regression to me since I can't use it over SSH.
Many *NIX users are open source fans. Sublime Text 2 is not open source.
I came from TextMate. Give Sublime a few days non-interrupted use. It's worth the switch (cross-platform use alone makes it awesome: I use it in Linux and Windows as well). Install a few of your favorite TextMate plugins. Config is less than stellar and weird. Once it's setup, though, it's done.
Yes, this. Although, I've found now that I've customized it to do exactly what I want I can't use anything else... I also liked jetbrains stuff, but it doesn't have a lisp.
TextMate plugins are compatible with Sublime?
... and I decided to comment "+1" as well as upvote: I love sublime that much.
Thanks!
So far it seems that most people like some version of Vim. I was using gVim and I think I'll go back to it. I am going to take a look at Sublime since I hadn't heard of it before this thread and a lot of people have mentioned it.
I saw a post about Acme on hackernews yesterday. It looks interesting but I fear there might be a bit of a learning curve with its unintuitive UI. I'm not interested in spending a lot of time trying to figure out a text editor. 
Vim
Upvote all the vims!
Long-time Linux user here. It's [Redcar](http://redcareditor.com/) for me, all the way. As others have commented elsewhere in the thread, Sublime Text 2 is also very good, but its non-Open Source nature rules it out for me.
what is it that you like about redcar other than opensource? i just took a quick look at the website and it looks promising.
By and large, yes. From the [unofficial documentation](http://docs.sublimetext.info/en/latest/basic_concepts.html#textmate-compatibility): &gt;Sublime Text 2 is fairly compatible with Textmate bundles with the notable exception of commands. Additionally, Sublime Text requires all syntax definitions to have the .tmLanguage extension, and all preferences files to have the .tmPreferences extension. This means that .plist files will be ignored, even if they are located under a Syntaxes or Preferences subdirectory. Snippets are also compatible, for the most part. It is also compatible with Textmate themes too, without so much as a rename, so while there are plenty of themes already available for Sublime, if you have an existing theme you are set on, you can make use of that too. Couldn't agree more with cavemonkey though, it's [definitely worth the look](http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/), and there are [tons of great plugins](http://net.tutsplus.com/tutorials/tools-and-tips/essential-sublime-text-2-plugins-and-extensions/). The configuration is a bit less than stellar, admittedly, but I have actually found that other than installing plugins and themes, I really haven't had to do much in the way of manual configuration.
zenspider's [Ruby QuickRef](http://zenspider.com/Languages/Ruby/QuickRef.html) -- which is worth knowing if you aren't familiar with it -- also has a helpful section on [pre-defined variables](http://zenspider.com/Languages/Ruby/QuickRef.html#pre-defined-variables) and another on [pre-defined constants](http://zenspider.com/Languages/Ruby/QuickRef.html#pre-defined-global-constants).
I love vagrant! I run test deploys on them too so I check my Capistrano/Chef recipes too.
Holy crap. I need to look this up. I have the same syntax highlighting in vim and Sublime, and therefore find myself typing things like ":w" in Sublime a lot. This sounds like a win. 
Also, inside `screen` or `tmux`. Also, with [`vipe`](http://joeyh.name/code/moreutils/).
Tried to use it but the shortcuts were all "wrong." Just could not.
Very helpful indeed, thanks for this! The idea of the testing code trying to recognize and infer types and then taking care of testing them exhaustively is really nice. Maybe we could translate that idea to dynamic types. It would be nice to have some kind of assertion for cases like "it shouldn't crash when I pass nil/a Fixnum/String" etc. or "what goes in as a Fixnum should come out as a Fixnum". I would believe that defining pre-/postconditions more generally is something I'd rather see in a "traditional" testing framework, but the idea with testing method signatures for different types sounds like a good fit. I'll consider that in a next version, thanks a lot for your ideas! 
Redcar is written in Ruby and JRuby.
sublime text 2 .. best editor i think i've ever used. 
Suresure. The way SC does it, iirc, is with a variant of the QC method that defines a 'generator' of random data. SC just defines some of these to be exhaustive. Feel free to bug me for ideas about things, always happy to help.
Rubymine
That's the second time I've been told that in as many days, on as many websites. Maybe I _should_ check out Vagrant.
It is ***really*** hard to beat emacs w/ paredit for lisp/scheme programming.
I'm on Ubuntu. Just installed sublime. It is exactly what I was looking for. Thanks.
Sublime is a good editor. I actually just did some research on more keybindings and I think I'll be replacing aptana with it full time.
How did it fail? Did you get an error message? No guarantee I'll be any use in figuring it out either, but you never know.
I would recommend against paperclip and dragonfly and heavily suggest using carrier wave it is an insanely better option for any type of file management.
coderunner on osx
I'm not going to claim it's implicitly better, perhaps "highly functional, with not as steep of a learning curve". Do people really edit files over ssh? I'm surprised. I always thought that was only for people whose deployment strategy is ftp.
Ton of responses about why emacs/vim is better, and I suppose I should clarify I'm **not** surprised there's many folks who prefer those editors. I was just hoping for some confirmation that Sublime does get some usage on \*nix platforms
You can't get around the OO in Ruby really, right?
&gt;My question is this, how would I construct an if statement to get the values the user entered and associate them to the hashes? I think for your basic "hash education" in the spirit of your question, you're wanting to see something like this: operators = {'+' =&gt; 'plus', '-' =&gt; 'minus'} input = "2+3" input.each_char{|char| puts "#{char} is an operator" if operators.has_key?(char)} But I'll add, you're simply not going to be able accept arbitrary user expressions and just sort it all out with a couple if statements. &gt;I want to ask a user for an expression, but then I want to print what it is doing (i.e. if a user enters 3+2 I want to say three plus two equals) and then print the result. Assuming you want this to be a useful calculator for mostly arbitrary length input, mathematical expression to English word conversion is a pretty big requirement. The numbers hash could contain an infinite number of word associations, so this isn't very feasible to express as a hash literal, it's something you'd want to compute on the fly using a rules system around the English syntax of expressing numbers (the Germans really got this one right). You might want to use a [library](https://github.com/kslazarev/numbers_and_words) to convert numbers to words instead of trying to look up their "word equivalent" from an infinite-length hash table. &gt;So I have two sets of hashes: operators and digits, operators handles +,-,/, and * and digits handles the numbers You'll eventually have to do some rudimentary [lexical analysis](http://en.wikipedia.org/wiki/Lexical_analysis). You'll need to iterate through the input, validate there's no invalid characters, enforce that operators aren't next to each other (unless you're a fan of reverse polish notation), tokenize the input and identify the input tokens into either valid number characters or operator characters, then perform the hash lookup for operators and word conversion for numbers. You'll run into even more fun once you start doing division and floating point math, since periods and commas (depending on your country of origin) now become valid "number characters" but will have placement rules too and your resulting answers will have repeating digits that you clearly won't want to convert to English equivalents for. Funny how something as simple as a calculator can blow up in your face.
[Agreed.](https://github.com/kien/ctrlp.vim)
It's a matter of preference, really - they really do have advantages and disadvantages. For instance, for just a simple file attached to a model, paperclip works great, very little cruft. If you're starting to do more complicated stuff, then maybe CW is a better choice. Dragonfly is probably great for smaller sites, but I'm concerned about the production performance for a high traffic site (since the images are processed in real time). It's certainly more convenient, but you have to add in extra cruft to prevent DOS attacks and I have all around questions about its performance under high load. Paperclip has the big advantage of literally years of use in production. It's certainly not perfect, but overall it's worked great for me for sites between a few hits a week and two million a month.
Not entirely since everything is an object and the standard library is mainly OO, but you can write your code using only modules and functions if you want. You can write hello world without making a class. I like that feature for writing scripts.
It's not free, not for beginners, but it is brilliant: [Practicing Ruby](http://practicingruby.com/)
Thanks. When I originally started with Sinatra and saw it referenced Pony, I looked it up on github. Since the project was 4 months old at the time (since last update), I considered it defunct. With that said, upon doing some projects that turns out to not be the case. Apologies for that, it was my in-experience speaking.
My primary goal is definitely web based solutions. However, I am already exploring some system projects that are more along the lines of Scripting. The more time I spend with ruby though I see that it is very much alive and kicking outside of Rails, that was just a poor first impression I had.
Welp, I have no desire to learn Java so we are good there! Im taking it as I go, however I dont see any huge reason to choose Python over ruby even for scripting at this point. However, Im not doing anything largely complex that makes use of SciPy or NumPy, more-so I am focusing on pulling in JSON data, and manipulating that. By the way, Sequal for Ruby looks fantastic, bookmarked it and I definitely am going to give it a go this weekend.
It took us some time, but we have the answers on our blog: http://blog.shellycloud.com/2012/09/response-to-rruby_19.html
this looks great! I'm trying it out right now.
I think it's actually free for new subscribers while Greg gets the new payment processing sorted. Greg is also a redditor.
Sublime Text 2, Ubuntu user.
just installed it. couldnt be happier.
For now what if I limit the input to say 0-9, just to get a grasp of the hash concept. I have operators set up just like the hash you described, and digits set up the same only with numbers =&gt; string (i.e. two, three, etc...). If I set input = gets() and then run the each_char method would that be able to individually select each character in the given input?
You can do this easily with one line of code using the magic panels of the rack-insight gem.
Yes. A very simple example could be: def character_classifier(char) numbers = {'0' =&gt; 'zero', '1' =&gt; 'one', '2' =&gt; 'two', '3' =&gt; 'three'} operators = {'+' =&gt; 'plus', '-' =&gt; 'minus'} classification = nil if operators.has_key?(char) classification = :operator elsif numbers.has_key?(char) classification = :number end classification # equivalent to 'return classification' end input = gets() input.strip! # gets captures newlines input.each_char do |char| # USE ALL THE HASHES! categories = {:operator =&gt; "an operator", :number =&gt; "a number"} classification = categories[character_classifier(char)] if classification.nil? puts "#{char} is not classified" else puts "#{char} is #{classification}" end end 
I'm sure you'll add more content to it - there's the wonderful destroyallsoftware, there's Hartl's book and much more! But I really like it, thanks for doing it!
Definitely a big fan of DestroyAllSoftware - will add it there. Rails Tutorial is there already. 
glad you like it :)
Cool, will do and thank you!
@knwang Could you add my Rails tutorials, please? *RailsApps Examples and Tutorials* [http://railsapps.github.com](http://railsapps.github.com/) * Format: online tutorial and documentation * Cost: free * Description: Example applications accompanied by in-depth tutorials that go beyond Rails lessons for beginners.
Great! Thanks. You might want to take a close look at your new floating "share" widget. It obscures text at certain browser widths (in Chrome).
This would actually be a good resource to have in the sidebar. Keep up the good work! :)
True. Unfortunately none of the sets were intuitive to me. Changing every single of dozens of shortcuts and resolving conflicts... not my cuppa.
I'm always surprised by this. For me, the right set of features, like refactoring and debugging, is a huge advantage that will help me for as long as I use the IDE, while a different set of shortcuts is only a small disadvantage that will go as soon as I learn the new set (three or four days).
And no, Vim can't use TextMate bundles, but there's probably an equivalent vim plugin for anything you'd want. Definitely don't think you have to use exclusively one editor or the other either. It's not a competition, anything that makes the job easier is welcome tooling. The only thing I would suggest is once you decide to commit to learning Vim, you might want to use it exclusively for about a week to cement in your HJKL movement key muscle memory. I had trouble with that until I stopped using arrow keys mix and matched at the same time, now it feels normal to use either.
Thank you, I appreciate your guidance!
I'm looking forward to playing with [HornetsEye](http://www.wedesoft.de/hornetseye-api/) when I get some time, computer vision is cool but I find it hard because of the math, perhaps you will do better with it. I'd say it's an ambitious area to start with if you're relatively new to programming, but certainly engaging if you want to push yourself.
I'm not sure if you know much about math, but I love number theory and formal logic. I hope to learn about formal languages, which I could probably easily use ruby to do stuff with. 
Fixed.. I moved the social bar to the top.
That would be awesome. Do I need to ping a moderator to do that?
As others mentioned in this thread, Ruby is more pure with it's object orientedness. This makes is less suitable for higher performance scientific computing, but more fun and it does well with web applications.
Good job, dude.
I don't really get the graph...you created 18057 issues by using a cool ruby script?
jira is a web-based project management tool, I'm a technical business analyst and use it daily to track project burn down and developer tasks.
We use both jira and ruby at my work ... care sharing the script? My project manager might be very interested in it. 
Alternate title: my small ruby script created 18,000+ bugs at work today.
Online: &lt;http://stackoverflow.com/questions/1008428/whats-the-best-tutorial-to-start-learning-ruby&gt; &lt;http://stackoverflow.com/questions/124371/what-is-the-best-ruby-tutorial-online&gt; &lt;http://www.codeschool.com/&gt; Offline: &lt;http://pragprog.com/book/ppmetr/metaprogramming-ruby&gt; Hope that helps!
Well, the Kernel module is mixed into the main object. It is Kernel.puts until it's mixed in at runtime. There are objects behind the scene we and I explicitly mentioned that you will use objects but you don't have to write classes, unlike Java. And that is true.
I'm sorry. I wouldn't wish Jira on anyone. 
What interface did you use for reading the Excel docs? I've been using "roo." However it seems to have been abandoned by it's original author and they didn't relinquish the rubygems account to one of the more active forks.
i like JIRA, but i also haven't been exposed to many other bug trackers. is there one you prefer?
The spreadsheet gem is also good. A good wrapper for the win32ole object
Even on someone who uses Excel for issue tracking?
Thank you. I thought he was trying to solve a different issue with his script and managed to create a bunch of issues in the process. (And then thoroughly confused about why he would post it up).
Not to me; IMO, the Controller should be responsible for what data it passes to the Model
I've been looking for this sort of guidance for a while as far as taking my vim use to the next level. Very informative, great references!
A good idea would probably be to avoid Rails until you have a rather good idea of Ruby. The "Programming Ruby" book by the Pragmatic Programmers is pretty good (or at least it was when I read it many years ago, heven't checked the new edition for 1.9)
I disagree, this seems to be an area where Rails has been at odds with other frameworks and MVC practices in the past. The models should have no knowledge of what attributes can and can't be assigned to them.
I was going to respond, but this post here gets it right. This is probably my favorite change in Rails 4. Fixing a wrong that persisted for far too long. I think early Rails development was so fixated on fat-model-skinny-controller that stuff like this ended up where it didn't sensibly belong.
I was in the same boat with self __init__ __and_some_others_. But after a few hours, it goes away and becomes natural.
Definitely needs a section on improper use of Crypto (not catching padding exceptions).
Nice. If you use git I also highly recommend tpope's Fugitive gem.
I read Google and Ruby and I had to click. *cough* Ruby + Google App Engine, please.
I think the main reason is dropping ruby 1.8 support
I feel like I'd still list them as a constant arrays in the model to have a central point of definition, and reference that int he controllers. If I add a new a new `email` attribute to my table, I don't want to peck through multiple controllers. class User USER_ATTRIBUTES = [:username, :password] ADMIN_ATTRIBUTES = USER_ATTRIBUTES + [:is_admin, :is_enabled] end 
Thanks!
Extra quote at the end of the graylog link, just FYI.
The only language-level security gotcha I've seen in the wild was omitted from this list: [^ and $ in Ruby regular expressions match more than the beginning or end of a string.](http://homakov.blogspot.com/2012/05/saferweb-injects-in-various-ruby.html)
There are links to the right under **Learning Ruby?**... :P But seriously, working through [RubyKoans](http://rubykoans.com/) helps learn Ruby language, get used to reading/writing/running Ruby code, and gets you in a TDD mindset.
Too much hassle, I just `kill -9` them.
Block's syntax is do..end because he was capable of parsing it on emacs. If he wasn't, it would be something else.
You can create an IDE platform in emacs with lots of extensions, as cedet and ECB: http://blog.wyeworks.com/2009/9/11/my-emacs-for-rails/ I don't like it, though.
And can be customized in Ruby and JRuby, if I understood correctly.
* You might consider using `sed` to [aggressively](https://github.com/postmodern/chruby/blob/master/etc/profile.d/chruby.sh#L7) clean `PATH` and `GEM_PATH`, so that ohmygems plays nice with other minimal shell scripts such as [rbfu](https://github.com/hmans/rbfu#readme) or [chruby](https://github.com/mpapis/chruby#readme). * Needs unit-tests! I highly recommend [shunit2](https://code.google.com/p/shunit2/). * The `name` variable should be prefixed with `local`. * Might consider a more "systemy" project name, such as chgems.
Similar tool that has been around for a while: https://github.com/soveran/gs
unit testing.... shell scripts... but of course. :P ETA: systemy name? oh hell no. omg ftw. :P
Having unit-tests also helps with tcsh/dash/zsh/fish compatibility. If you need an example of shunit tests, checkout chruby's [tests](https://github.com/postmodern/chruby/tree/master/test). Personally, I tend to avoid projects with joke names or no tests. Also, "omg" is not very Googlable.
Using Ruby 1.9.3 I get the following results for your examples: &gt; def func(_,_) end =&gt; nil &gt; def func(x,x) end SyntaxError: (irb):2: duplicated argument name &gt; people.map { |name, (_, _, email)| [name, email] } =&gt; [["Alice", "alice@example.com"], ["Bob", "bob@example.com"]] &gt; people.map { |name, (x, x, email)| [name, email] } SyntaxError: (irb):8: duplicated argument name 
I think you could use threads.
I did think about that, but I wasn't sure if it would work behind passenger. I'll have a poke around when I can
It only spawns one subshell, is it really involves too much subshell management?
You have options, which in this case means none of them are universally applicable (depends on exactly what you're doing), or problem-free. You can use threads with Passenger. You can use threads here. In which case i'd recommend investigating Celluloid rather than trying to use threads directly. Depending on what you mean by "work behind passenger". There's no fundamental problem with using threads behind passenger, but you do need to think about how it interacts with passenger and what passenger does. Passenger will fork multiple processes of your web app due to load; if there are multiple copies of your app running, will that be a problem for your threading design? Etc. What happens if the process with the threads in it dies unexpectedly, is it important that you can tell which tasks completed and ensure the ones that didn't get started again? (Not really a passenger problem, but a potential issue with using threads for background tasks in general). But what you describe sounds like a batch process ("run a few times a day") not an interactive web app at all -- so I'm not sure why passenger comes into it! Even if part of your app is a web app, you could have this 'few times a day' tasks running in a batch process (cronjob?) or daemon that isn't fronted by passenger at all. You _can_ use threads (Celluloid!), but there are potentially other ways to do things too. Mentioned in other comments here. Some kind of background job queueing system is popular. Not just `delayed_job`, but see Resque, which has no Rails dependency but requires you install a redis server! (For that matter, I think you can use `delayed_job` backed by redis too, and I don't think it requires Rails in that case?) Whether database or something like redis, a background queue with worker task system requires the queue of jobs to persist _somewhere_, right? That design actually sounds potentially applicable to your needs, especially if the individual API calls can be made independent without depending on each other; but if they can't (and I'm guessing they probably can't), it potentially gets a bit trickier. But github, for instance, makes extensive use of background queues like that to do all it's work. Then, yeah, there's trying to use fibers here. Like em-http-request. I do the kinds of things you are doing, with lots of external API requests where you don't want to serialize them all, you want work to go on when you are blocking waiting for a response. It gets tricky in ruby. I've only used Threads for this, but not always been entirely happy with how it goes (in particular, if you need to store things in a database as a result of all those API calls, ActiveRecord can be skittish with threads). 
As long as your using event machine, which Faraday will need, can you use Thin, which has event machine built-in?
While it's not that heavy, I agree that subshells seem like an unnecessary step in a workflow. I gotta go back and read the (tiny) code and ask soveran why it does a subshell even, I forget. EDIT: I'm betting the subshell is to avoid "reset" code
Here's more about destructuring: http://tony.pitluga.com/2011/08/08/destructuring-with-ruby.html
The '_' is also nice in hex and binary literals 0b1101_1110_1010_1101_1011_1110_1110_1111 0xF000_1234 
Emacs with Cabbage (https://github.com/senny/cabbage)
between spawning a subshell and not spawning a subshell... I choose not.
I'm not concerned with info-leaks. That can be solved with symlinks if needed. Regardless, it is outside the scope of this project. The use of `~/.gem/repos` was intentional and based on my experiences working on isolate and rubygems itself. I think this is an acceptable balance for most people. What do you mean by name collisions and how is it a problem?
You may also want to check out beanstalkd which is a far superior job queue to both an RDBMS (delayed_job) or redis (resque). If you are curious to learn more about why and how to use beanstalkd to process jobs, check out [a few](http://adam.heroku.com/past/2010/4/24/beanstalk_a_simple_and_fast_queueing_backend/) [posts](http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/) on the subject. I also created a simple ruby wrapper to make job queues with beanstalkd easy called [Backburner](https://github.com/nesquena/backburner).
I meant, was that a choice he was able to make, or was he required to use Passenger. And trying to say that the reason I would ask is because Thin has EM built in. But yeah I see now I worded it pretty terribly.
That's one of the reasons. I think the code is cleaner and gives you the same results.
I might consider using `gs` with bundler. However, [gs](https://github.com/soveran/gs) lacks tests! Atleast [dep](https://github.com/twpil/dep/blob/master/test/dep.rb) has tests. Although, I would like to use a pure shell-script solution and avoid any Ruby issues in the process.
I think this is great and lets you put everything in the controller where it belongs. I hated the mass-assignment in the model. I think only program logic should happen in the model and the model should not know about security and roles which are handled by something else.
You was afraid (╯°□°）╯︵ ┻━┻ 
What is your high level goal with this? Just curious :) You might benefit from doing a quick googling on Ruby AST but then again I might be way off the track.
I am a very big fan of The Well Grounded Rubyist by David Black Explains the workings of the ruby language very well. Plus it comes with a free ebook!
Homakov is Russian, English is not his first language.
I've found that models being "unlocked" outside the controller context is *massively* useful. I never realized how useful until I stopped using `attr_accessible`.
A more recent talk was given at [RailsConf](https://www.youtube.com/watch?v=p3VMf3oQWKg)
There are a lot of people who would argue the exact opposite -- mass assignment is a feature not a bug. Unfortunately this schism seems to be widening.
[chruby](https://github.com/postmodern/chruby) is only 75 lines, and it has tests. The smaller the code is, the easier it should be to test.
My reasoning is that the model isn't _really_ aware of permissions... it's simply associating a keyword with certain attributes (classifying them). It's still the controller's responsibility to determine which keyword is used in which contexts. It's also a bit comforting, when working in a team, to know that someone cannot simply mass-assign sensitive attributes by default. &gt; In what instance are you talking about "ugly code duplication"? Say you have a few controllers that mass-assign attributes to the User model. In each of these controllers, you need a list of attributes that _can_ and _must_ be mass-assigned. If you want to add an attribute to the User model, you need to update each of these controllers accordingly. If you have 50+ attributes on the model, this is going to be a massive and near-identical list in each case.
I hear beanstalkd works well for Sinatra apps. Although the new version of Delayed_job should work well with Sinatra, too.
This looks like a more functional version of RuSH or Urchin. Perhaps if you developed the idea fully, it could really take off. Zsh is needlessly complex, fish isn't flexible enough. A truly ruby powered shell would be excellent, with events or hooks for pre command, post command, etc. I like these to add command timers and horizontal rules between each command, but they are useful for other things
Ah, so you're talking about a shell that understand Ruby syntax?
Yeah, but still is somewhat useful. RuSH isn't unfortunately
I've not long started working on Urchin again after a fairly long hiatus. I like the idea of pre and post hooks. I'd love to hear if you have any other ideas for things that haven't really been explored with other shells.
Well if those people want to use mass assignment they can access it as a gem in Rails 4. The opinion of Rails has changed.
Oh, believe me, I know. I wrote Addressable and I close bug reports and pull requests all the time that roughly amount to "Rails did it this way, you should do it that way too!" In almost every single case, the technical merits of the change would be strongly net-negative, usually by introducing ambiguity or some kind of bizarre magic. To say nothing of the fact that most of these change requests would break everyone's code. The general trends of Rails 3 and 4 toward less ambiguity, being more explicit, and avoiding magic have been extremely positive. The early versions of Rails were both the best and worst things that ever happened to Ruby.
I read these articles a while ago (there are a couple) and they're really interesting. Taught me a lot about how a shell program works internally.
There's also `browse oldfiles` with no plugin needed. Not quite as fancy, but often does the job.
Why not edit a file at the place where it needs to be edited? I can check it into the repository from anywhere.
I sometimes wish it was a little *less* active. We could use less of a firehose of new Gems and more documentation and improvement of existing Gems.
Well, i was always a fan of FiSH's autocomplete as you type, where instead of having to hit tab, it showed the rest of what you were gonna type in a grey color. I also liked how FiSH could attempt to learn from man pages, but this is fairly useless with a lot of programs that use --help
Nice mentions of [DataMapper](http://datamapper.org/) and [Sequel](http://sequel.rubyforge.org/). I always liked how DataMapper was designed to be thread-safe by default.
IAM author of the post, ask me anything :)
https://bitbucket.org/seydar/chitin I wrote this as a fully functional ruby shell. It started because I wanted to have a shell in which I could write "1 + 2" and see the answer. It's tough to expand upon a really usable shell and really use ruby because bash simply has NO excess in its commands. It's tough to go from that to Ruby. Good tab completion will help, but it's a stretch. One rule I had for chitin was that the input commands had to be 100% at all times. I'm interested in getting some more collaborators and seeing where we can take it.
http://www.reddit.com/r/ruby/comments/10dfmx/a_unix_shell_in_ruby/c6day8m
idgi... redefining class is about the worst idea ever.
Awesome. Thank you!
Yikes. I think the case example, the else clause should at least hit super. User certainly shouldn't have infinite constants returning as nil. It's tough coming up with good examples, I know.
None, it was just an idea I had while looking over my GitHub notifications. I think an issue on the Rubinius tracker about alias_method changing the visibility of its argument really brought the idea to life. 
it would be useful in a REPL context.
I think it is scheduled for Ruby 2.0.0 (or later). I agree tho… I was surprised when I found out it didn't exist already.
Except without the nil, why would you ever prefer: def self.const_missing(const_name) case const_name when :PREMIUM 1 when :GOLD 2 when :PLATINUM 3 when :TITANIUM 4 else super end end over, you know, the perfectly ordinary way to do it: PREMIUM=1 GOLD=2 PLATINUM-3 TITANIUM=4 is what I thought of when I first read it, anyhow. Like, why? I guess it's a way to set 'default' constants, that can still be 'over-ridden' by ordinary explicitly declared constants, without triggering ruby's "you changed a constant" warning... but why the heck would you ever want to do that?
Yeah, I don't know. I think it's a case of an example demonstrating how it works, without why you'd want it. I'd avoid stuff like this at almost any cost though. Seems like meta for the sake of meta. The article sounds a bit like it's hinting towards an autoload, which obviously didn't work out for the future.
Windows uses \ as a path separator
Hmm, I thought that got abstracted away to an extent though by the file libraries and separator constants. Otherwise, how could you: require "rack/utils" on Windows? It's good to chew on though; I've used that join pattern before, and never thought about it helping out with cross-platform issues. Thanks. edit: I probably shouldn't say "file libraries" as it's ambiguous; I just took a look and require on MRI is implemented in C.
Hop on IRC (irc.freenode.net) and go into #ruby-talk. Depending on time of day you're active, there is plenty of help available and willing to provide constructive criticism.
File::SEPARATOR is "/" in ruby on windows. File::ALT_SEPARATOR is "\\\\".
First of all, *inside* a library you should never need to muck with the load path (unless you're vendoring dependencies somewhere else). This code doesn't make any sense: # lib/foo.rb $LOAD_PATH &lt;&lt; File.expand_path("..", __FILE__) require 'foo/bar' It's not lib/foo.rb's responsibility to set up the load path. Whoever is *using* foo.rb should set the load path so that it includes foo.rb's lib-directory. When you're writing a lib/foo.rb you should assume that the users of the library require it with `require "foo"` and therefore the load path already must contain the lib-directory. There's only two places where you should modify the load path: 1. In binaries/executables 2. When you vendor dependencies 
Great article, will have to read further to see if any of the articles that they linked to show how to make those modifications on engine yard. With that information this article will be perfect.
The [Rubygems Guides](http://guides.rubygems.org/) suggests some best practices in the [patterns section](http://guides.rubygems.org/patterns/#loading-code). (Essentially what judofyr says above: you shouldn't need to use `__FILE__`, and gems shouldn't tamper with `$LOAD_PATH`, but they also link to an example gem that may be useful.) The guides are also very useful overall.
Can you clarify what you mean by "binaries/executables"? Do you mean executables *not* installed with `gem`? (I thought Rubygems handled `$LOAD_PATH` even for executables if they're installed as gems.)
&gt; Do you mean executables not installed with gem? Yes. As you mentions, RubyGems handles the load path for you.
I can think of a bazillion better ways to improve performance in Rails.
What's to lose? It will make Rails website feel faster. It doesn't require extra work for the developer, like PJAX for example. And if you do want to use PJAX or similar just remove the turbolinks gem.
This was a question (hence the "?") but if you aren't on a new URL and you just change the body and the title... it's not a new page, and a crawler won't see it that way, afaik. Thanks for the downvotes, and lack of explanation.
I love how the "work left to do" is basically, "everything that's already great about hyperlinks that users expect and that we've totally broken by this".
Ever use github? They use pushState and pjax all the time
~~I would like to use this without Rails, I like the zero-config aspect of it.~~ I am an idiot.
dhh seems to be saying it WILL be the default, isn't that what "default-on" means? Ugh. 
It's just a single Javascript (actually Coffeescript) file, that you can simply add to any HTML page. Steps to build your own demo: 1. git clone https://github.com/rails/turbolinks.git 2. Compile turbolinks.coffeescript via http://js2coffee.org/ and fix a few JS errors 3. Host the test/ directory via HTTP, since most browsers disallow file:/// pages to do PJAX Have fun!
Three examples of where performance could be improved: 1. ActiveRecord 2. Routing 3. Views It's perfectly okay to say Rails wasn't/isn't built to be fast. But to tout performance as a feature with a feature that only speeds up client-side (due to loading less) seems silly.
So, changes that make a large, noticeable effect to the end user should be passed over for more structural changes that wouldn't provide nearly as much end-user visibility? I mean, aren't we making sites for viewers? Isn't the biggest speed-up a great choice by default?
I don't get it. Why is this useful, other than to prove you can? It also has some unanticipated side-effects, assuming that all method_missing cases involve a hash like you think they do. In the presence of your Object monkey patch: class Foo def foo ; "foo" ; end end In 1.8.7: Foo.new.bar 1 # =&gt; SystemStackError: stack level too deep # in `method_missing' That doesn't happen in 1.9.3, not sure what was up. Okay, in 1.9.3: Foo.new._bar 1 # =&gt; NoMethodError: undefined method `has_key?' for 1:Fixnum It's like "what error will you get on method_missing" bingo. 
I just looked at the code of this... it's not like this was a huge feature that took tons of man hours, unlike the kind of stuff you're suggesting. This was a quick little feature that looks to provide much better bang-for-the-buck performance to work involved. 
Did you also post this in /r/rails? Rails articles belong in /r/rails. Also, please do not link to tweets, give us the direct link. https://github.com/rails/turbolinks#readme
This very sub-reddit or #ruby-lang on irc.freenode.net.
Rails is opinionated. Everyone should know this by now. 
I'm testing this out and it works great, but I can't seem to figure out how to handle page-specific code that I was putting in $(function(){}). Best I can seem to do is get a function to fire on every page change, but it doesn't solve the page-specific problem. 
nooo... it has several hundred users in it.
It is. https://github.com/rails/turbolinks/blob/master/lib/assets/javascripts/turbolinks.js.coffee#L84 That link was accurate earlier. They've pushed since then. Just look for the 'extractLink' function.
GAH... I'm sorry. I meant `#ruby-lang`. ruby-talk@ is the mailing list and I do that _all the time_.
&gt; This is similar to pjax, but instead of worrying about what element on the page to replace, and tailoring the server-side response to fit, we replace the entire body. This means that you get the bulk of the speed benefits from pjax (no recompiling of the JavaScript or CSS) without having to tailor the server-side response.
Why do micro optimization in three area when doing just one give more benefit? 1. ActiveRecord time is small compared to actual SQL query time. And Rails's way of scaling querying is cache. 2. How much time will be saved by shaving 50% off of Routing code be? 1 millisecond? 3. Again, Rails way of improving view performance is by doing less of it, i.e. caching. Those three improvements are, most of the time, insignificant compared to network latency and multiple network round-trip. &gt; But to tout performance as a feature with a feature that only speeds up client-side (due to loading less) seems silly. Because that's why people optimize their web application. To makes it fast enough that their client do not hate to use. Improving client's perceived performance is one practical feature.
That isn't so much 'ideas for improvement' (or, 'a bazillion better _ways_ to improve performance in rails' (emphasis mine). So much as it is a few places where it would be nice to have more performant tools. This is not a distinction without a difference. Perhaps, given what rails supports, improvement really isn't possible in those areas. I don't necessarily think this is the case, rather I think that your statement is not really an answer to the original question (roughly, 'please list 5 of the bazillion areas where you have specific ideas for performance gains' (rephrased by me from synt4x's words)). So I'll repose the original question as I just did, What are some specific areas in which you have ideas for how to improve performance? By specific, I mean actual changes to the program structure -- eg, "Let's replace the Routing lookups so that they are no longer linear searches, and instead use a Red/Black Tree" (if you mean performance in the sense of raw processing time). Or -- if you mean performance from a linguistic/syntax level -- suggestions of how to better implement DSLs/APIs to be more natural. I excitedly await your more detailed reply[1]. [1] -- I mean this all honestly. I really do want to hear your ideas. I'm not a Rails committer, but I am attempting to address one of the areas you do mention (ORM), so I'm interested to hear what irks you about it and how it could be better. I know that on the internet someone telling you, in essence, "That answer wasn't good enough, please provide another" is commonly interpreted as a _bad_ thing, but I really ask in ernest anticipation of an answer.
&gt; It's a bit like saying "look how much faster it runs with caching". So what? If it runs faster with caching, it is faster. This is not academic study, cheating is allowed. A: Look, this web framework is in C and it's 100 times faster in application code than yours! B: So how much time is spent in application code vs time spent in network latency and actual query time? A: Umm, like 5%? B: Wow, so your web site is now about 5% than mine. Let me turn on my HTTP cache so client do not have to make a request at all. A: ... B: Now my website is 95% faster than yours. Look how much faster it runs with caching. In the end, caching is real answer to scaling. Google use caching, Facebook use caching. &gt; If you care about performance, fix the real performance problems. If you care about performance, don't micro-optimize.
One thing is your JavaScript must not rely on initialize components on `document.ready` event (as it is only loaded once). This will make many JavaScript tutorial on the internet confusing to new programmer.
Oh, no problem. Thanks!
It'll be default until 4.1 :) This is not such a great idea
Have you fixed any that you have identified? Edit: I should add that this is just an honest question, not an attack on his position. I apologize for my lack of clarity. 
That's irrelevant - whether jrochkind himself has ever filed outstanding bugs relating the the asset pipeline has *no bearing whatsoever* on whether it's still buggy or not (and hence asset-related problems which may be expected when using turbolinks with assets). It's technically a [*tu quoque*](http://en.wikipedia.org/wiki/Tu_quoque) logical fallacy, because you're dismissing the validity of his objection on the basis that he hasn't done anything to rectify it... but those two things are completely unrelated.
Those who don't understand the web are condemned to reinvent it, poorly, using inappropriate technology in entirely the wrong layer. Look at Twitter's routing-in-javascript, or the frantic contortions Flash developers used to twist themselves into to make their animations un-break bookmarking, doc-fragment anchor links, the back button, etc. In fact I'm going to go further than that - I strongly suspect that if you come up with a new technique and you find yourself reinventing existing browser/server/transport-layer techniques and functionality just to overcome bugs it causes, it's probably a Really Bad Idea in the first place.
Correct me if I'm wrong, but can't scripts fire document.ready events?
What's the benefit of this approach? Saving a few bytes of &lt;head&gt; (and even then only assuming your stylesheets and javascript is all exactly the same on every page of your site)? It doesn't seem to save on server round-trips (since you still need to request the new &lt;body&gt;), and I can't believe the saving of not having to download a few bytes/kb of &lt;head&gt; code each request is worth the extra complication and fragility of using complicated client-side JS to do what browsers already do for you automatically. Literally all I can otherwise think of is that you can persist javascript variables between "page"-requests (which may be handy)... but only at the cost of specifically writing your code to handle the fall-back case where the whole page reloads from scratch *anyway*... ie, it doesn't even simplify writing your JS - it just gives you *another* event/entry-point/code-path to consider. Seriously - what am I missing? What's the benefit that this approach brings that offsets its extra complexity/brittleness?
The biggest benefit is that you're not making a bunch of extra connections for all the same JS and CSS files.
I think you misread. He's defining a method with a funky name on class Wat.
Cool. Just making sure there wasn't a wrinkle I should know.
But compressing your CSS/JS and proper browser caching solve that problem anyway... and better/with fewer side-effects and wrinkles than body-element-replacement. For body-replacement to work your header CSS/JS has to be the same for each page, and compression gets them down to only two requests anyway (one for compressed CSS, one for compressed/minified JS). Then (as they're the same for every page) they're cached, and subsequent page-requests will simply reuse the cached versions anyway. I don't see any benefit that minification/caching don't already get you... and for a lot less complexity/in a much simpler, more reliable way.
I don't know if this programmatically fired event is in every way equivalent to actual event (does it works across all JS library? does it fire the old bound listener every time?) or if I now have to aware that `document.ready` can be fired multiple time. What if I did `setInterval()` in `document.ready`, does this mean I will have multiple timer if pages are loaded?
Client-side javascript apps that only refresh parts of a page and use history.pushState() *can* be a good idea, but the way Twitter implemented it was terrible. There's nothing wrong with building a static site with hyperlinks to normal REST URLs, and then *overriding* that with javascript that intercepts links/form submissions and requests just the part of the page to be changed, dynamically replacing the old element with the new one. However, plenty of us pointed out that *routing* in JS - forcing every incoming URL request to be routed through javascript, and massively abusing the "#!" convention instead of simply providing valid REST URLs and then overriding them with event handlers - is a really stupid way of doing it. Sure enough, after a while Twitter eventually had to back down and re-engineer their entire system away from abusing the hash-bang convention... except that now they're forced to also maintain (and serve to *every page*) that old javascript routing system indefinitely, or else they break any and all old hash-bang links. Gawker did [something similar](http://www.webmonkey.com/2011/02/gawker-learns-the-hard-way-why-hash-bang-urls-are-evil/)... and sure enough after a while they also recanted and went back to traditional routing because the JS-routing was too heavyweight and unreliable (remember when one trivial, unimportant JS error stopped JS executing on each page, and [broke their *entire network*](http://dl.dropbox.com/u/3205568/lifehacker-loading-screenshot-20110207-1551.png)?). There's nothing wrong with having a javascript-heavy, client-side "web app UI", but if you don't provide a REST-based system underneath and then progressively enhance it, and especially if as a result you then find yourself reinventing fundamental principles like URL routing *on the client-side*, eventually you have to face the fact that you're going further and further out of your way to compensate for a fundamental mistake in your design. The analogy here with Flash develoeprs going to greater and greater lengths to accommodate cutting-and-pasting, docfragment-anchor links and browser history entries is apt. In general, if you find yourself increasingly reinventing stuff that the browser gives you for free, it's probably because you fucked up your design in the first place. Work *with* the browser and HTTP rather than against it, and you rarely (if ever) have to face these kinds of situations.
I have spent some time trying to isolate and debug them,but I have not succeeded (they are hard to reproduce edge cases after all). Have you looked at the asset pipeline code? Split between Sprockets and some Rails on top to configure and sometimes customize (including by monkey patching occasionally) Sprockets, all pretty abstract and indirect code without a whole lot of comments or internal documentation. (oh, plus Sprockets dependencies). But yes, open source works by people contributing. I do have a couple fairly minor patches accepted to Rails, as well as a couple more documentation commits. But lots of Rails code is very tricky. To the extent I've had time to become expert enough at tricky Rails internals, I've focused mostly on ConnectionPool, not assets. While open source works by people contributing, it also, experience shows (like any multi-developer code, open source or not) ends up working only when people who wrote the code, who know it best, take responsibility for maintaining and directing it, instead of just abandoning it to the bazaar. Also, like all code, the simpler you keep it, the fewer features, the fewer bugs, especially bugs that occur because of unintended interactions between a complex feature set. And certainly Rails has the goal of being usable to a wider class of people than those with the expertise and time to develop or fix it's fairly complicated codebase -- this is a good goal, it's had mixed success as Rails has grown and gotten more complicated, and I have plenty of sympathy for it's mixed success, it's hard to make something that's both powerfully flexible _and_ accessible to newbies, I've had my own mixed successes with that in my own projects. So it's a hard thing to do, if it's not accomplished 100% it's not for lack of good intentions -- but what makes it more accomplishable is a ruthless dedication to keeping things as simple as you can (but no simpler). 
My gripes with Rails really extend across a lot of the architecture. For instance, there are ways to tie business logic to requests other than creating stateful controllers. If I don't need state, why force me to use a stateful solution? You rarely need this in business logic. So, give me an out. How? I think a functional approach would give big wins. Instead of creating stateful controllers, the router could evaluate a vector of functions (before/after hooks and the main business logic for that request). Sinatra kind of does this (unfair comparison I know, but I'm talking about Sinatra as a routing system no an application stack). In Rails this is hard because controller state is relied on for a number of things, including the view layer. I could be wrong here, but my understanding is the controller does not tell the view what the data is, instead the view looks it up. To be fair this starts to get into a deeper problem and this isn't the best place to discuss. Let's have coffee or something. Since you're interested in the ORM, I'll address that briefly. I assert that ActiveRecord sacrifices performance for convenience. This isn't necessarily bad, but I personally care more about the former (which is why I don't use Rails). The performance problems with ActiveRecord are well known so I won't repeat them here. But if performance is the goal, I think a lot could be learned from Sequel (which is what I use in all my Ruby apps): http://sequel.rubyforge.org/ This may still not be a satisfactory answer, but it's what I have time to write.
I frequently have scrolling problems with github. If I am looking at the code for a big repository, and halfway down the page I click on a link, sometimes it doesn't scroll back up and show me the content when it loads. That's really annoying because then you have to scroll up to see the content on the new page. I haven't tried turbolinks but I'm assuming that wiping the body would at least fix that problem.
Ah I see. I definitely agree with you on the fact that Twitter fucked up, and techniques like the one Twitter uses is indeed superfluous and mostly idiotic. I think for example the way Github does it is great. It uses REST URL's and History to not break anything the user might be used to (i.e. backbutton, copy-paste the URL, ...) but also provide a major speed up on actions.
The readme says: &gt; ..Instead of letting the browser recompile the JavaScript and CSS between each page change, and potentially spend extra HTTP requests checking if the assets are up-to-date.. Which sounds stupid. They'll potentially break stuff to save maybe 50ms (of recompiling/parsing js/css) on the front-end, where the user probably won't notice.
Agreed, had that been my intention. I was actually just interested if he had fixed any. He said the problems had been identified, and I'm gathering understood. Understanding a problem and having the means to fix it, and not doing so is an unrelated criticism and not intended to be a rebuttal to his position. I should have added an "unrelated" exclaimer here, and for that I apologize in wasting your time. 
Fair enough. I completely understand as well that often those who use open source tools are under incredible time pressure. I was merely curious as it seemed you were saying you had identified, and understood the problems you had encountered. I have just seen it too many times with colleagues, they fork a repo, fix a problem, point they're gemfile at the new repo and then never take the extra hour to write/alter a few test cases and do a pull request. It's frustrating, but it definitely doesn't sound like you suffer from this problem. 
&gt; It's about saving the time of compiling all the JS/CSS of a page Does it really take all that long? Even for quite big, complex scripts/stylesheets? Surely - aside from some unusual edge-cases - it's pretty much negligible compared to server-round-trips, time to download images, etc, etc, etc.
This sounds like a reason to duck type instead of type check, but not a reason to not have better error messages. So instead of checking some_param.is_a?(Hash), you can check for some_param.respond_to?(:each_with_index) (or whatever you need). The general point is that if your function needs something and doesn't get it, it should tell the caller what it wanted rather than expecting that everything is okay and then creating a downstream error.
Quick question from someone still learning forms of fallacy: Assuming your original reading of the cache22x's intent was correct would this even really be tu quoque? In order for it to be tu quoque I thought you had to be accusing someone of operating in contradiction with their own position. In this particular example jrochkind made no statements to his actions or the actions of community members and therefore can not have operated in contradiction to anything. If cache22x's response was meant to be an attack it seems like it would be more similar to an ad hominem attack (attacking his character as a rails developer by not submitting bugs/patches) as opposed to tu quoque. I'm just having trouble understanding how tu quoque could be applied to this case as I'm still in the process of learning the various forms of fallacy. I'd really appreciate any insight you might have that could help me understand it better. Thanks regardless! :)
I'm beyond my scope, but maybe we can get someone like jreisig in here. He has a reddit account, although he doesn't use it much
Cache22x has clarified his position, but initially his comment was just "how many of them have you personally fixed", or similar. Assuming that cache22x's intention in asking this was to discredit jrochkind's argument, I was arguing that cache22x was trying to do this by pointing out that while jrochkind *claimed* there were serious (non-trivial) problems with the asset pipeline, he wasn't *acting* like there were serious, non-trivial problems (by formally reporting them/patching them himself). Tu quoque is also known as an "appeal to hypocrisy" - someone makes a claim, but you point out that they aren't acting in a manner that *you consider* consistent with the claim being true, therefore the claim is false. It's a fallacy because there may be many reasons you haven't considered as to why someone would not act in the way you expect (given some circumstance), and because even someone acting inconsistently or hypocritically doesn't actually necessarily affect the truth-value of the claim. For example, in this case: * jrochkind may only have run into already-reported but unfixed errors, so there would be no point in reporting them * There may already have been fixes for the problemns he's encountered, but they still added complication/complexity to projects * he may not have had the time, resources or knowledge required to formally report a bug or submit code (and wade through the sometimes political process associated) to the appropriate maintainer * he may have simply been to lazy to bother reporting/fixing problems (ignoring or working around them instead), which doesn't discount the claim that such problems *exist*, and may prove problematic/increase complication for others. Hope that helps. ;-)
I haven't seen any benchmarks yet, so I was just guessing. What I meant was, that the potential problems will probably not be worth the gained milliseconds, because js/css parsing is really fast (compared to other events that occur during web-page rendering).
He's using the funky name as a demonstration only. He's using the result of `self.response_attributes` to define a bunch of accessors. Among those are both `class` and `type`. Both of those are methods on `Object` and a bad bad bad idea to redefine.
Worry not, the checksums are stored in RVM itself: https://github.com/wayneeseguin/rvm/blob/master/config/md5 So just make sure to install RVM via HTTPS or a signed/verified package.
Makes sense. &gt; So just make sure to install RVM via HTTPS or a signed/verified package. Yeah, that's the kicker. I don't think anyone is going to independently verify the checksum of their rvm install (not sure how you'd do that anyway), so it's all about https. Does an ordinary "rvm get stable" type action get it over https? Does it warn you if the https key is not as expected, which I guess would mean not signed by someone in your OS root store?
Congrats on your first gem! My co-worker and I just made a gem, although it's only for internal use at our company. Still, I was surprised how easy it was to make with bundler. Great tool. I'd suggest adding test coverage, I know I personally try to stay away from anything that does not have test coverage or gems where the build is breaking. In my opinion it gives your gem more credibility and you also probably shouldn't accept pull requests unless it comes with tests (or if you want to write them yourself). Just my personal opinion though, take that for what you will :).
Why can't they set up an email list for support. Is it really that hard to set up a Google group. Irc is inadequate as the sole support option.
Please don't refuse to accept pull requests unless they come with tests. A lot of great gems do this and ergo languish because they refuse to accept great additions. Requiring tests also puts off contributors because now they have to do extra work to get their change accepted. They don't care that the gem is properly covered, they only care if it works for them. And if their change isn't accepted into the main release, they don't care; they will just use their own version. And now nobody wins. `/rant`
I will definitely make sure that I get some tests in there. The API that this gem revolves around is extremely weird and mostly undocumented, which was the reason why I decided to make the gem in the first place (so people down the road wouldn't run into the same problems that I faced), but I was a little unsure how to write tests for it. Again, I'm a noob and don't do a lot of testing so I was actually a little unsure on how to start but I will make sure that they get in there soon.
Again, that was just my opinion, not the end-all be-all of suggestions. I personally wouldn't be confident enough to release a gem that people may be depending on to not give it coverage. Also, If you're contributing to a gem, don't you want it to be stable? Maybe you're right, maybe people only care if it "works for them", but if you want to contribute to the community, you want to prove to everyone else that "hey, this guy made sure his use case works by covering it with tests". I did mention that if the OP wanted, he could write the tests for the pull request himself. I suppose I should have said "please don't commit a broken build". Now, I understand there is a LOT of code out there that goes untested, and full coverage is usually hard to come by. I'm just saying for me, personally, since I'm heavily involved in TDD, I would much rather use a gem that is tested and continues to adhere to testing rules versus a gem that does not.
I agree, there could be plenty of ideas out there without test coverage. I just feel like if you're one to practice testing, then hopefully either you make a request to the person adding the feature/fixing the bug to cover it, and if they cannot fulfill that request, then you do it yourself. If you don't practice testing or don't care, then, well, I'm just personally less likely to use your gem :P.
I'm guessing you are using RVM, and load RVM in `~/.bash_profile`? This is a wild guess, but you might want to check the configuration of Konsole, and make sure it spawns a full login shell; ensuring that `~/.bash_profile` is loaded, instead of just `~/.bashrc`. You could also move the RVM configuration into `~/.bashrc`.
for some reason after doing "sudo apt-get install ruby1.9.3" (which I had done a while ago so it was already installed) the problem seems to have gone away. not sure what the problem was. thanks. i'll keep your post saved in case i have more issues in the future.
FWIW require 'rubygems' returning false is not a problem. It would raise an exception if there was an issue. 
I figured it out. I feel so stupid. Hence the name "interactive program" lol
Should post this to /r/rails.
Those methods are provided by [activesupport](http://rails.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Integer/Time.html). It's still somewhat frowned upon to use activesupport outside of Rails.
Why not ? Edit : some explanations : I started with can? and can, but i remarked that i used can instead of can? a lot, that's why in introduced can! I can! (badum tss) understand some of you will think can! is irrelevant since it does not modify the instance in place, but how about the can? how is it irrelevant ?
A random date in the future/past is just a random date.
no I think *can?* is the way to go, by convention it's a boolean, that's good. It seems weird to me that to set the permissions for an object you are only changing a single character of the instruction (*can!*). The use of the exclamation is pretty well defined but certainly not [consistent](http://stackoverflow.com/questions/612189/why-are-exclamation-marks-used-in-ruby-methods). Although, remembering how [cancan](https://github.com/ryanb/cancan) works, it is pretty similar.. Regardless, good job, this is a nice gem that can be thrown in quickly
I could not find any other way to name this method :/ Thanks for the compliment! First gem ever, trying to make my way around the ruby universe.
I really like this idea. Any reason I have to sign up to see the about us page? 
To be honest, though, this is the opposite of the problem I'm facing: I have no shortage of candidates that can make unit tests pass. I just got back from a career fair where probably half of the ~two hundred people I talked to were capable of coding within the constraints of a well-defined problem of the sort they've been exposed to in their CS courses. That is, a thoroughly explained problem with easy-to-evaluate results. What I need a way to easily evaluate is candidates on their critical thinking with regards to software development. Can they track down a tricky bug on production that you can't reproduce locally? Can they build a solution to a problem in a domain they know nothing about? Can they learn languages or tools they haven't been taught as needed? Can they figure out what cases they should test on a given piece of code? So, I feel like having them make unit-tested code will provide a glut of exactly the sort of programmers I'm already flooded with. It might be useful as a better version of fizz-buzz to weed out group that can't even do that, but that hasn't really been a problem for us so far.
I agree. I think interviewing software developers is still an unsolved problem. Lots of good candidates get the shaft, and lots of bad candidates get hired. I've been interviewing people for a decade and I still feel like I haven't mastered this.
You're right, I opened a new window that was still in 1.8.7. Seems to work now, thanks!
Should have a trial option without CC setup
This was indeed designed for the problem of filtering the initial list of candidates down to the in-person interview short-list. It doesn't handle the other problem of how to measure fit for the team, etc. in a second round, and that's something I'd also be interested in finding a solution for. In the past, I've given extended open-ended project assignments to good candidates so that I can watch how they solve a tough problem. I also like to work through problems in a pair-programming setting, but as tortus mentions, there's always the issue of false positives/negatives.
Also please don't mix new and old hash styles. Please write either `controller.stub foo: Factory(:bar, baz: true)` or `controller.stub :foo =&gt; Factory(:bar, :baz =&gt; true)`.
Thanks for your response. I have a related follow-up: within a library, do you consider it a good idea to use require_relative instead of require?
I highly recommend [pry](http://pryrepl.org/]) and [pry-rails](https://github.com/rweng/pry-rails) if you're unfamiliar with Rails or working with someone else's existing codebase and are trying to grok things. You can fire up the Rails Console (which pry-rails will automatically make a pry session for you) and then call `show-method` on any method available within your Rails runtime and it will show you the file it came from, plus the method code. Here's an example relevant to the thread: $ rails console Loading development environment (Rails 3.2.8) [1] pry(main)&gt; show-method 1.hour From: /Users/evilduck/.rvm/gems/ruby-1.9.3-p194/gems/activesupport-3.2.8/lib/active_support/core_ext/numeric/time.rb @ line 44: Number of lines: 3 Owner: Numeric Visibility: public def hours ActiveSupport::Duration.new(self * 3600, [[:seconds, self * 3600]]) end This shows you exactly which file the `Numeric.hour` method came from and what it does. If you're just using vanilla IRB, you can also do: 1.hour.class.ancestors =&gt; [Fixnum, JSON::Ext::Generator::GeneratorMethods::Fixnum, Integer, Numeric, Comparable, Object, PP::ObjectMixin, JSON::Ext::Generator::GeneratorMethods::Object, ActiveSupport::Dependencies::Loadable, Kernel, BasicObject] and it will show you that it inherits from ActiveSupport somewhere along the line. 
It seems interesting, and I love Avdi's talks and books, but the sample ("Binary Literals") seems lighter weight than I was hoping. So I'm not sure if I want to spend the $9 / month or not. I guess I'm ultimately leaning towards yes, but was hoping for confirmation than they're better than the first he posted :-)
Do you install it with `gem install qtbindings`?
yup
If you need just a simple UI and it's not required to blend well with your DE try Shoes. For more powerful UI try GTK bindings instead. GTK API is a bit simpler than Qt. Also there's [FXRuby](http://www.fxruby.org/). I have no first hand experience with that. And there was one project that let you use HTML/CSS/JS/Ruby to build desktop apps but I can't remember its name.
How were the Wednesday and Friday episodes? The Monday one seemed too small. More like an amuse-bouche instead of tapas.
For my last co-op in college, the interview went like this: Interviewer: "So, you say you don't know any C#?" Me: "That's right." Interviewer: "Ok, here's a problem* in C# and a computer with VS set up. You can use any resource including me. go." *Problem was something about pulling a few things from a database, changing them around a bit, and putting it back in. I thought it was pretty awesome. For my own hiring now, I've been considering setting up a couple similar challenges in different languages and giving one to a candidate that they claim not to know. See how fast they learn. :)
Yeah, for our onsite interviews, we have a couple challenges that consist of a paragraph description, a 1 hour time-limit, and "use any resource." We've designed the challenges to have multiple stages such that it's nearly impossible to complete all of them. Seeing how far the candidate gets in the hour and how well they can explain what they were doing is really telling.
With a release schedule of 3 vids/week, I'm skeptical as to quality and length Avdi can produce...
Short and sweet still in the same realm of literals. I'm not used to these bite sized screencasts yet. They do however get my brain working and I guess that's the point of them. You're right though they're most amuse-bouche then tapas so far. 
Qt works with ruby too? I think it's just a c++ framework...
Qt works; it's not very "idiomatic Ruby", but beggars can't be choosers I suppose. Like [creating a button](http://zetcode.com/gui/rubyqt/dialogs/), I would expect to define that functionality with a lambda, but instead there's a separate call that basically mirrors the syntax exactly like it reads in C++.
No, you can `connect` to a block.
You've read [this page](https://github.com/ryanmelt/qtbindings)?
Thanks!
Hi! Avdi Here. After many months I've actually logged into my Reddit account just to answer questions here. Feel free to ask and I'll do my best to provide answers. UPDATE: I've made an [FAQ](http://devblog.avdi.org/rubytapas-faq/) Just to get some initial questions out of the way: * Yes, the episodes are short and my intent is to keep them that way. I want to introduce just one new concept or technique in each one, and in most cases I don't think that should take longer than five minutes. * While the initial episodes have been on syntax, I'll be covering standard libraries, program design, method construction, idioms, and the occasional gem as well. New samples will go up every Monday, so hopefully over the next few weeks you'll be able to get a broader picture of what the content will be like.
I really don't buy into the "extra work" point. Sure some more time will be spent writing the test for the functionality but chances are you will be testing the functionally in some way while you are working on the problem. Why not pass that along to other users that will potentially be using that code you contributed? I personally don't test everything I write but I know I would want to write some test coverage if I contributed to an open source project. Other applications, ones I don't even know about, may depend on what I write.
Sorry for the late answer, just noticed it. I don't get that error, even in a VM...strange Open an issue on github if you want to and I'll look into it
My first rumble. I just registered team Chillbro Swaggins. Doing this for fun. I don't expect to be even close to winning.
Thanks for the explanation. I come from a C++/Java/C# background professionally, each of which has its own load path traditions. I'm used to seeing the load path modification idiom or require_relative in Ruby demo code, but I've never run across the reasoning used in real world codebases to manage dependencies. This helped immensely.
Let's get ready to Rumble!
I guess I'm somewhat concerned about whether you can really cover much of interest in such a short period of time... the first one was 2 minutes long and all you really could say is "0b100101" is how you do binary literals, and you can use them for chmod. Which is true, but... I mean, that's not much. Your second public one was a lot more interesting, but it also clocked in at 4x as long.
I'm not familiar with Scala Option. Would you explain what it does?
Well, as I've said here and in in the FAQ, I want to introduce one new idea per episode, and then get out of the way and let you get on with your work. Five minutes is the length of a lightning talk, and in my experience most (though not all) 30-minute talks could have delivered their central idea just as well in the form of a to-the-point 5-minute lightning talk. So, if this format appeals to you, then RubyTapas is for you. If you prefer more elaboration, then it probably isn't.
I should add that of course, I can't guarantee that every idea is new to you. If you already knew about binary literals, then I could see where episode #1 wouldn't be very exciting.
Worth going if you're only interested in Ruby?
Can you explain why you need so damn much plugins? What jobs do they do?
&gt; So, if this format appeals to you, then RubyTapas is for you. If you prefer more elaboration, then it probably isn't. Not so much elaboration, as depth. If you just mention something, that's not that novel. It's whether you have something substantive to say about it that appeals to me, especially since I've seen your other talks / books, and you regularly floor me with your insight. As I said in a comment to someone else, they felt more like an amuse-bouche or hours-d'ouvres than a tapas. (tapa?) The bite-sized talks are definitely an interesting idea, and yeah, I'm ultimately trying to find out if it's for me or not.
it seems he's not running rails - just using wget to create static pages.
Thanks! Let me know of there are any features you'd like! Make sure to check out the Github repo.
Awesome! Where is this data coming from?
There's a swath of data published by the MLB located at: http://gd2.mlb.com/components/game/mlb. This utility makes it easy to stream that data, especially during live games.
[Shameless plug](http://github.com/bolthar/freightrain) It works best with GTK+. There are some examples in the /examples directory. Feel free to PM me if you need help :-)
I saw your post on this a while back. I finally got Qt to work but I'm having trouble with a few things. Maybe I'll try freightrain...
&gt; Set implements a collection of **unordered** values with no duplicates. This is a hybrid of Array's intuitive inter-operation facilities and Hash's fast lookup. - [RubyDocs](http://www.ruby-doc.org/stdlib-1.9.3/libdoc/set/rdoc/Set.html) You shouldn't be relying on a Set to return objects in any given order, that's not its job. If you want order, use an Array.
Coda on OSX and Sublime Text 2 on Linux. My Coda is pretty loaded with extras and configs to get it just right, but it's home. 
PGP signed code / updates are planned for RVM2 - adding them in RVM1 would be an additional effort slowing down RVM2 - which should come quite fast (something like end of year 2012) if we stop adding features to RVM1. Binary rubies additionally to /md5 also are checked with /sha512 which makes it impossible to forge a binary that would match both md5 and sha512 sums.
This is a great post on Enumerators. I have been coding Ruby for a while and I learned a handful of great tips, most of which seem really useful for writing more elegant code. Thanks Jared.
But the input arguments have order, and Arrays are ordered as well. Also, when writing out Sets, one does not randomly change the order of it's elements. So it makes sense that `#inspect` and `#to_a` should retain original order.
You're assuming things about the implementation of the Set class. Because data in a set is unordered, there's no requirement for it to come out in the order it was put in. Imagine I'm implementing a Set class. I notice that the most efficient method of storing unique unordered values is alphabetically (for whatever reason). Is that OK? Yes, because a Set doesn't have to make any guarantees about the order of its contents. If you initialize my Set with ['c','b','a'] then later ask for it back and I give you ['a','b','c'] that's perfectly fine.
Team Fabulous Pandas reporting in! I have a feeling that there will be a LOT of Bootstrap-based UIs this year, so I recommend saving a spot on your team for a designer to help your app stand out from the crowd.
Nice article, if somebody interested in Enumerator::Lazy that is in Ruby 2.0 already - read this http://railsware.com/blog/2012/03/13/ruby-2-0-enumerablelazy/
Seems like a lack of planning. Set, Hash, OrderedSet (SortedSet), and OrderedHash should all exist.. or maybe some type of Ordered mixin module.
You could take this a step further and write a custom matcher that encapsulates the meaning. RSpec::Matchers.define :represent do |expected| match do |actual| actual.to_s == expected.to_s end end # ... JSON.parse(response.body)["_id"].should represent(status.id) Or even something more specialised. RSpec::Matchers.define :identify_bson_object do |expected| match do |actual| Moped::BSON::ObjectId.from_string(actual) == expected.id end end JSON.parse(response.body)["_id"].should identify_bson_object(status)
That is a very nice idea, and very well suited for dynamic languages, where you can keep a REPL open to add/remove things from your extended memory. The challenge would be to design an internal memory that is intuitive to navigate in command line (in order to modify stuff) while allowing for storing everything and anything.
I get the example with automated emails. What do you plan to do for projects? Email the next step?
Persistant REPL ... [Maglev](http://maglev.github.com/)!
Good idea! I may do a similar thing for myself, but with a web interface, so I can access it from my phone.
To be entirely honest I don't see a lot of uses either but I think it would be a fun experiment, because some uses might not be obvious until you're actually using the system. I am just usually overly enthusiastic about everything.
That a Hash enumerates in insertion order is not documented as it's an implementation detail. I added documentation to this effect but it was reverted. Other implementations of ruby are not required to enumerate a Hash in insertion order, so if you depend upon such behavior you're going to have a bad time.
Good point. I think there needs to be a number of ways to palm things off so you don't need to remember them. Mobile web interface makes a lot of sense - the nearest interface to my hands and eyes is either going to be the console or a mobile phone. I know none of this is rocket-science, btw. Just start off with a simple premise: what can Ruby do to make my life simpler? See what happens from here.
Haven't tried this but you should be able to conditionally run it in `.powrc` file in the root of your project, something like: https://gist.github.com/3844594
That looks stellar! Much better then the todo manager I wrote in ruby(http://github.com/metamorfos/rubdo)
Could you please give a link to the changelog?
Thanks, I hope to write more articles like that, covering more of Ruby internals if I stumble over something interesting. Nice article, btw!
Sorry guys: this is the actual gem, I extracted the functionality so that it can be used in any rails app. https://github.com/ciniglio/DistributedRails
For future reference, refactoring means you change code without adding or removing functionality.
Do you honestly expect anyone (other than you) to understand what this does from reading the README? The README is a sales pitch, convince me why I should care. It's great that you're sharing your stuff, but if you want to be successful with it, you really need to think about how this is useful to other people and sell them that idea.
Hey.. but you solve the problem of cross computer todo lists using Dropbox - simple and brilliant. 
Ditz looks great, but more plumbing for what I need right now. Thanks for the link though - will examine further when I have a chance.
Can I suggest you add Taskwarrior (http://taskwarrior.org/projects/show/taskwarrior) and DevTodo (http://swapoff.org/devtodo.html) to your search? They're both tools I've gotten good use out of.
But.. it's still good to see what's happening in other communities. As it happens, bandwidthoracle's post for above re Taskwarrior and DevTodo point to a C++ and a Go project respectively. 
Lame. I was in Disney World for Magic Ruby when this opened, so my team is wait listed. After obsessively checking the blog every day for 2 years, I miss fucking signups by 3 days. FML
Ugh, I still need an idea...
good to know. thanks.
It allows browsers to connect and help you compute highly parallelizable problems. It's not for everyone, but if I were going to write my own folding@home-style project, this would be perfect. A README should not be a sales pitch.
This looks really interesting. To be honest, I've never thought about doing highly distributed computation on browsers - I've always looked at spinning up a bunch of spot instances on EC2 to do it. Will have to check this out next time I hit a problem like that.
Creative. I'd consider hacking on Jekyll a bit to get the asset pipelining you need, or introducing new liquid extensions to do what you want. Then again, I'm more than guilty of my own [over-complicated solutions](http://atevans.com/epic-hackery-in-rails.html) :)
[Jeweler](https://github.com/technicalpickles/jeweler) makes it even more ridiculously easy - did you use that as well? :)
Also [Vim RTF Pygmentize](https://github.com/rafaelfranca/rtf_pygmentize) might be helpful.
This tool would be great integrated as a TextMate/Sublime Text bundle. I'm frequently pasting code snips into emails. Copy/pasting syntax-highlighted snips with a shortcut key would be dope. Got me a side project for tomorrow. 
So why did they choose ":" (colon) over "=" (equal)? Many languages use the colon to specify the type of the argument (not the default value). I'm confused already, what will "def f(a, b = 1, c: 2)" do?
Probably because they're mimicking or internally using a Ruby Hash object. In 1.9, you can take a hash assignment with a symbol key and move the colon over. So the old hashrocket... { :foo =&gt; 'bar' } ...becomes... { foo: 'bar' }
I meant to say that allowing a colon and an equal sign in method signatures will only confuse people. Knowing the "def f(options = {})" convention shouldn't be a requirement just to understand method signatures in ruby. For example: "def f(a, b = c, d: e, **h)" will look really weird and cryptic to newbies (even to python devs that are used to named params).
I still prefer hashes over keywords.
I see you're doin alittle bioinformatics :) Well in Windows a new line is \r\n I believe, in Mac its \r, and in Linux it's \n. best way to convert files saved in Windows on Mac/Linux is to run: dos2unix filename otherwise you have to write extra code for the \r\n
Well you _can_ do all kinds of messed up unreadable stuff in ruby. But most people stick to idiomatic syntax and the result can be rather pleasing. I'm fine with this. It will take some time for people to fully take advantage of this, but it seems to be just a logical expansion of the options hash.
Thanks. However, /r/rails seems quite inactive. Most front page items are from many days or weeks ago.
A problem with using hash is that you don't get error if users passes in invalid option. And the signature of the method that uses hash doesn't tell you what the valid options are.
Heh yeah :D I @edit was edit_box but I changed it to para so now it works. I think I'll add \r just in case there as you and daedalus96 suggested.
How does this compare to paperclip?
I think this is jumping the gun a bit? I would wait for OpenSSL to provide a verified implementation of SHA3, and use it via Ruby's [Digest](http://rubydoc.info/stdlib/digest).
I for one, can not fathom the purpose of an options hash when there are named params...
The reference implementation was released under the [CC public domain license](http://creativecommons.org/publicdomain/zero/1.0/), and the expectation is that OpenSSL will use it too. So, it's probably not going to be any different. 
haha, that's a good point I meant to point at the method invocation / parameter order. Should it not be called via something like `foo(_, _, check: true)`. How does it know `check` is in part of the `options` hash? What if my signature is `foo(str: "foo", hash: {}, **options)`?
That _Hash_ enumerates in insertion order is a non-guaranteed implementation-dependent detail? Weird. Everyone seems to assume that in 1.9.3 Hash's are ordered. I think perhaps the community needs this corrected assumption to be publisized. Last time I looked, Rails for instance used it's own internal OrderedHash implementation in 1.8.7, but used stdlib Hash if ruby 1.9.3, assuming it was guaranteed ordered. For instance, see these Rails docs: http://apidock.com/rails/ActiveSupport/OrderedHash Sounds like Rails needs a patch to use it's own OrderedHash even in 1.9.3, if it wants to guarantee ordering. i'd submit such a patch... but I bet Rails team would say "what are you talking about, Hashes are already ordered in 1.9.3, what do you mean that's an implementation detail, you're wrong." drbrain, can you get any official cite-able confirmation from ruby core team that this is not documented behavior? Perhaps a URL to your reverted documentation patch, as evidence that ruby core team does not consider this a documented language feature? Cause sounds like Rails should really be fixed to use OrderedHash regardless of ruby version, since right now it uses it only in 1.8.x, on the assumption that hashes are already ordered in 1.9.x. 
Why would you want two optional hash arguments? Either way, I believe it would end up inside the hash named parameter. The order goes as: def foo( a, b, c, # mandatory arguments opt = 1, # optional arguments *rest, # rest argument x, y, z, # post mandatory arguments k1: 1, k2:2, # keyword arguments **kh, # keyword rest argument &amp;blk # block argument ) See here: http://ruby-dev.info/posts/44602
To be able to receive arbitrary keys, like you can now with the hash argument faking named args. Maybe your method accepts any key starting with `foo_` in addition to other named args, and uses them to, say, pass on to a third party api of some kind. Personally, I like the elegance and power of the current 1.9 implementation. Assuming the existing syntax for passing a hash as args in is still valid, this just adds yet another syntax which looks very similar but does something different. Note that in ruby 1.9, `foo: bar` is a hash literal key/value pair already. 
Wildcards. I maintain [a gem for interacting with reddit](https://rubygems.org/gems/snoo), and use a lot of options={} hashes, to take options send them to the API. The results is a rather pleasing way of interacting with reddit, that matches the api, while also allowing you to not have to remember 1000 urls.
Can I cite myself? I'm a ruby core team member.
Okay, the confusing thing is that, as [MonkeeSage points out above](http://www.reddit.com/r/ruby/comments/10wltn/constructing_a_set_from_a_set_changes_the/c6jtbph) the current 1.9.3 auto-generated docs _do_ say that keys are guaranteed to sort in insertion order: http://www.ruby-doc.org/core-1.9.3/Hash.html &gt; Hashes enumerate their values in the order that the corresponding keys were inserted. So, um, yeah, we're all pretty confused here. Current [Rails code](https://github.com/rails/rails/blob/8cae31c800f281212c9c5b5ac0ea2be98c4aa611/activesupport/lib/active_support/ordered_hash.rb#L56) _does_ assume that 1.9.x (in any implementation) Hashes will have guaranteed enumeration in insertion order, leaving it's own SortedHash implementation basically empty inheriting 1.9.3 Hash, but implementing it's own guarantee of sorting for 1.8.7. (Rails master, being 1.9.3+ only, has an [entirely empty implementation of SortedHash](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/ordered_hash.rb), counting on stdlib Hash to be sorted) Around the time 1.9.x started to gain traction, lots of people blogged about the 'change' to guaranteed sort order of stdlib Hash. If it's a misconception, it's a very widespread one. Lots of people are writing code making this assumption you say as a ruby core team member is not safe to make. If ruby stdlib Hash is not meant to guarantee sort order (cross-implementation), then ruby core team ought to take steps to correct this misunderstanding, including correcting the rdoc for MRI Hash. (And someone should file an issue/pull for Rails). If I try to do any of these things myself, people are going to say "you're crazy, everyone knows 1.9.x Hashes are sorted" and point to the docs, as MonkeeSage did above, right? As well as the bazillion blog posts saying otherwise. We could really use some official communication from ruby core team here. 
Did you try this? https://github.com/kaspernj/pulseaudio
That wraps pactl, which has even less functionality than pacmd. EDIT: From the pactl manpage: &gt;pactl offers a subset of the available commands. For full functionality, see pacmd
You can use `pacmd list-sink-inputs` to get all the input streams (applications), and you can adjust the volume of an input stream with `pacmd set-sink-input-volume &lt;index&gt; &lt;level&gt;` (where level is 0 through 65536 [0x10000]). I haven't played with it, but it looks like you can do that programmatically with the lib @crm11four linked, using [#list](https://github.com/kaspernj/pulseaudio/blob/master/include/pulseaudio_sink_input.rb#L30), getting the input stream [#by_id](https://github.com/kaspernj/pulseaudio/blob/master/include/pulseaudio_sink_input.rb#L65), and then adjusting the volume. However, the [volume stuff](https://github.com/kaspernj/pulseaudio/blob/master/include/pulseaudio_sink.rb#L140) doesn't seem to be implemented for the sink inputs. Looks like it'd be easy to add though. [**Edit:** [Here's your pull request with volume support for sink inputs](https://github.com/kaspernj/pulseaudio/pull/1). You're welcome :P]
And both Avdi and this blog post end with "happy hacking". 
My recommendations: http://ruby.learncodethehardway.org/ http://pragprog.com/book/ltp2/learn-to-program
Nice! Thanks man!
I suggest: http://www.codecademy.com/tracks/ruby http://ruby.bastardsbook.com/toc/ 
Author's point seems logical to me.
Haven't we seen this posted somewhere else before?
It's possible but not really important. It's new to me and hasn't been posted in a reasonable amount of time. Check the [Reddiquette](http://code.reddit.com/wiki/help/reddiquette) for more info.
Its okay, everyone has the right to be wrong. Feel free to add a ";" to the end of every line and an explicit "return" to the last line in your methods.
Pragmatic Programmers Everyday Scripting with Ruby. Learn ruby in the context of automating your normal activities.
Assuming you have tnsnames and all that Oracle jazz set-up properly it should be as simple as passing the 'database' parameter to the adapter. The database parameter actually holds the TNS name. In other words, if you can connect using sqlplus, you can connect using oci8.
Then you want to go and fix that. * Make sure you have Oracle Client installed * Make sure you have tnsnames set-up * Make sure the proper ports are open or tunneled If you have a DBA (DBA's and Oracle tend to crop up together :-) ), ask him for advice.
Thanks for the tip, I'll annoy the local DBA's, but I believe changing anything on the machines involved (excluding my own test server) is completely out of the question - Two large corporations involved :\
Use [stunnel](https://www.stunnel.org/index.html) to setup a tunnel from HOST A -&gt; HOST B. **Edit:** You could also setup SSH port forwarding: ssh -L local_port:HOST_B:remote_port HOST_A -N -f
No Oracle Client == No Oracle connection. If you need something simple, you can try just running your SQL script or command over SSH. Net::SSH and Pry are great for that.
+1 learn code the hard way - excellent if you've never touched programming before....and pretty easy to breeze through if you have but gives a nice intro to a language.
There are many tutorials for setting up [stunnel under xinetd](http://www.cybersprocket.com/setting-up-stunnel-on-linux/).
I think I understand... I can listen to the Oracle Client port on my machine and forward it to HOST A, correct? Gonna try research this more.
I am worried I know what he means, and it's not good. (Many people don't need the non-digested versions at all, I'm worried they're throwing those who do under the bus) (To be clear, the way rails/sprockets did this before, compiling the assets twice, was indeed broken, performance-wise. All that's needed, instead, is compiling once with digest fingerprint, and then copying the file to the non-digest-fingerprint name. Rather than ripping out support for creating non-digest filenames at all, which is what it sounds like they've done)
Actually you probably want to use ssh port forwarding: ssh -L local_port:HOST_B:remote_port HOST_A -N -f This will open `local_port` on your system, forward all connections to `HOST_B:remote_port`, via `HOST_A`.
I don't understand it entirely either which is why I'm looking for input from those who might know better. Like in the SO post, the only things that seem beneficial are not including the JS in the repo and being able to update everything with one command to bundler. Do these features make it worth it to use Rails::Engine and whatever else is in these gems besides the .js files? Are there additional features to these gems of js that I'm missing?
What else can a javascript gem do? Just include JS in a HTML page. The only debate is how to do it so that it doesn't affect Rails startup time.
/r/rails isn't dead either, just needs more people to submit content. Also, note the sidebar -----&gt;
It's definitely dead. Sidebar is a joke, surely.
[Don't forget to cleanup releases folder after deploy (I just freed 1Tb of memory by doing this)](http://www.reddit.com/r/rails/comments/114rh8/dont_forget_to_cleanup_releases_folder_after/) was posted 3 days ago. Their most recent moderator, [adamblair](http://www.reddit.com/user/adambair), posted 5 days ago. The sidebar is definitely not a joke. /r/rails seems dead because few people submit content to it, few people submit content to /r/rails because they think it's dead. Let's break the vicious cycle.
It is not hard to tell bundler to only install certain environments assuming you have a Gemfile.lock that is kept up to date. 
You should look at the API docs for the gem to figure out what methods to call to get what you're looking for.
The default configuration is to have an assets group and the default behavior is to install that in production environments.
I don't know if it can or does do anything else but include assets. I also don't know what the cost implications of hooking into the asset pipeline through a gem is. These are the things I hope someone in the community who is more knowledgable than I can clarify.
awesome thanks, sounds like not as bad as I feared. Although it definitely doesn't match the OP blog post, where he says it'll just respect `config.assets.digest`, implying that non-digested names won't be created at all. Hopefully he mis-spoke, or otherwise it can be corrected before a release, as it doesn't seem too hard to do the 'copying non-digested-named versions' thing. 
I wish there was a way to update via ruby installer for windows.
&gt; but I just don't have the vocabulary yet to understand everything that is being said. You might want to start taking some time going through basic ruby tutorials, so you can understand the vocabulary. How much time? Depends on if you have done object-oriented programming before, or how much programming at all you've done before. 
 rvm get latest &amp;&amp; rvm install 1.9.3-p286 --verify-downloads 1 the --verify-downloads 1 is because it appears no checksum is available on the ruby ftp so rvm refuses to download without it. EDIT: rvm has been updated now, so a simple rvm get latest will have p286 among rvm list known so you can either use rvm install or rvm upgrade depending if you want ti have different versions side by side or just upgrade your current 1.9.3 installation.
Not really. /r/ruby itself is pretty dead, so nobody feels the need to post Rails shit elsewhere. Pointless subdivision and premature organization. I've watched you post "Uh this belongs in r/rails" for months. How's that workin out for you? How bout let's cut out all the noise and just give up on the pointless subforum. Everyone else clearly has. It's not a vicious cycle, just an arbitrary rule. Maybe you can make us Bundler and RSpec subreddits, submission traffic conductor.
CDN isn't a replacement for local/gemmed assets. You want a local fallback. Gems abstract the CDN/fallback logic into a line in your Gemfile. As I said in my previous post, there is no cost. The railtie is evaluated at recompilation. Performance is irrelevant and negligible.
Well that explains it. Since there is no performance cost, you only stnad to gain convenience in managing JS libraries like gems. Thanks Olaf.
According to [this RVM commit](https://github.com/wayneeseguin/rvm/commit/4085c95c5a0cf584941222c41e44109d977375f6) the falcon patches apply cleanly with no modifications.
Why not combine the two?
Because everyone is free to subscribe to multiple sub-reddits and view their combined links on the front-page. That way, people who want to read about Ruby, but not Rails, can do so.
Ah, yet another `$SAFE` bypass. :) I hope `$SAFE` will be replaced with proper sandboxing or with syscall jails.
I don't mean to sound crabby. I just think that we reach a higher point on the fitness landscape with zero organizational effort right now than our current phenomenon of a few vigilantes here and there pointing Rails posts from the low-activity Ruby subreddit to the crawling Rails subreddit. One day I hope /r/ruby becomes a torrent of posts so rich that we have to mitigate the high frequency of activity by gating Rails posts to /r/rails. We just aren't there yet, so I think you're pushing against the intuitive grain that has most people posting Rails stuff here. Does that make sense? I don't intend to change your behavior or anything, and I'll never "confront" you on this issue again. I just get a sense of futility when I see your posts politely directing people to /r/rails and instead envision a day where /r/ruby will be busy enough to where we can all assist you in shaping a community that splits our ecosystem between /r/ruby and /r/rails because one day it may best serve our lil nook of the internet. Maybe if /r/ruby is as busy as possible right now (a concentrated hub), it'll be more attractive as a subreddit to check up on and comment in, growing us more quickly in the long run. 
You're assuming that people subscribe to sub-reddits based solely on their quantity of posts, not their quality. There is nothing stopping you from submitting content and subscribing to both /r/ruby _and_ /r/rails. :)
Let's walk through what the Sass port of the Twitter Bootstrap gem actually does: https://github.com/thomas-mcdonald/bootstrap-sass/blob/master/lib/bootstrap-sass.rb * When the bootstrap gem is evaluated on Rails initialization (when you boot up the server), it uses `require` to load various parts of itself depending on the environment. * If the Compass Sass framework gem is loaded, it tells Compass the Rails asset folder paths to use. * If you're using a Rails version with the asset pipeline, it loads an empty Rails::Engine. * Engines are just Rails apps that you can mount onto other Rails apps. When Rails encounters an engine during initialization, it looks up the paths that the engine specifies to load relevant files. * In this case, the gemspec tells Rails during initialization about the .scss/.png/.js files in its included vendor directory. * In development mode, Rails will recompile these assets on every request along with the other assets in the main application. * In production, the bootstrap gem isn't even loaded because it goes in the :assets group of your Gemfile. Hope that makes sense. Not the best or most salient explanation. And even if the gem *was* loaded in production, Rails doesn't go hunting for `assets` directories unless it's compiling assets. So it doesn't even matter.
Why? PS: here, have an upboat.
Because update, and all the gems that shit themselves because they check for a specific version of ruby or whatever
Sad but true. It's far more difficult to use Ruby on Windows than on a *nix.
Another nice trick is using "extend self' in a module. 
I'm not hassling people, just suggesting that they submit the same link to yet another reddit, and gain yet more karma from it.
I'm not convinced of this approach. While it may be great for describing what happens, the real difficulty of programming is understanding why the specific steps accomplish the goal they do. Take a sorting algorithm, for instance. This would help you follow the steps, but I'm not really sure it would help you understand the actual algorithm. 
People learn in different ways. This seems to be a fairly good, albeit immature, solution for verbal learners
Awesome! Just some suggestions: - Use method_name not methodName - Where are the specs?! 
We very stupidly pushed some last minute changes and broke one of the bookmarklets. So once you're logged in just use the "quicksave" bookmarklet and not the standard "save" bookmarklet. :) I had so much fun building this with my partner. I've never coded so many hours in a row, worked so hard, or smiled so much. Each breakthrough was so inspirational. I know it's not much, but I'm so happy! 
Probably [this one](http://bootswatch.com/slate/) from Bootswatch. Our team used [this one](http://bootswatch.com/cerulean/).
Yup! We used one from Bootswatch then added some pink for flair! :)
Oh nice! Apparently I'm not the only one who still feels bookmarking hasn't been solved properly yet! Nice work on your app :)
Github signin didn't work for me. Twitter did though.
lol
Nice, although to be honest, I'm not quite sure what it does or why I should use it. You should continue explaining that before you tell people how to install it. Also, I'm teaching myself Ruby right now. Out of curiosity, how much programming did you know before this project?
Serves me right, posting untested code in a hurry. Yeah, should be splatted. Also, fun. :P
This would be a great place to use the `transpose` method, which rotates your array 90 degrees so that each 'row' contains the 'column' values: string = 'word_a - def_a - word_b - def_b - word_c - def_c' words, definitions = string.split(' - ').each_slice(2).to_a.transpose 
I really like the `transpose` method for this: words, definitions = array.each_slice(2).to_a.transpose
You probably won't see my other comments in the thread, so I'll reply here too - You can use `Array#transpose` for your second example; words, defs = array.each_slice(2).to_a.transpose
Nice!
http://railsrumble.com/entries/24-open-source-impact
Promoting your application during judging contest phase looks like cheating for me.
I've made changes to the gists in the post. You are right, the supervisor object should be passed into Project (wasn't really the point). However, the Supervisor struct and your class are functionally similar, with the exception that the struct follows the NOP and you use || to define the default values of your vars. class Supervisor def initialize(*args) @first_name, @last_name, @email = args end end is the same as: Supervisor = Struct.new(:first_name,:last_name,:email) I'll put a permalink to this comment in the article. 
This could be a very interesting way to see where [industry influencers](http://open-impact.r12.railsrumble.com/dhh) are spending their time, and could be VERY useful for predicting future trends. Nice work!
Very helpful my friend, thank you so much, I will do. Just to be sure; since they want it to run it in their server inside their company, it is impossible then to hide my code from them?
No, they want it to run in their server inside their company.
I have never done it. I just know that this is a theoretically possible way of distributing it.
They can run it on their own server after they pay for it, so send them screenshots and maybe do a demo in person or something. Don't give them any code without money, period.
You can use http://rubyencoder.com/, its a bit expensive but might be worth it for you. Personally, I would put it on a remote server and send it to em once the check clears.
Seems like a good alternative, too expensive for me sadly. Thank you for the info.
why so? Media just give us feedback, our goal is not public prize, we just want to know how people feel about our idea. And it seems they like it and there is a point to continue work on project after competition.
Why do you need to sign in? All that seems to do is load up the same page as when I url-hack to my page. http://imgur.com/a/0hr0z Perhaps a box to enter a username would be more appropriate?
There is a box to enter username) Near button to login: http://cl.ly/image/1N2P3t2L0Y1F Button might be faster to someone:)
Hmm, I spotted that afterwards; think it should be more obvious. I also don't see how having to go to another site, authenticate, then return would be faster than typing a username.
That's a pretty stupid way of thinking. There are many advantages to using JRuby, and it's pretty much your only option.
I saw only gitfm and your app promotion on Reddit. Other participants (about 500 teams) are just waiting for the contest to be completed.
What about sending a vm pre-configured for their environment? Encrypt the harddrive and add a self-destruction script. And dont give them login of course.
Why not tell them no? Are they just being unreasonable?
Right. It of course does not remove the code completely. It obfuscates it.
had to read the title twice before I realized it was from the ruby subreddit.
It's not necessarily weird. At a few jobs ago when we'd hire people, we'd want to see code samples but just in the form of print outs. However, it is odd to ask for the full codebase to be run locally.
Things sometimes work like that here in my country, Argentina.
Sure, code samples when hiring a person, but not for an app (which I assume this is about). Either it works or it doesn't.
Either its maintainable or its not. Being able to maintain/modify/enhance someone else's code in the future is important. Just very odd to ask to see an entire codebase.
Nah, maintainability is a quality, not a state.
Thanks for linking to this article. I have a project I've been working on where I've managed to keep logic out of views and controllers, but the models are getting heavy, good to know where to put things. 
I don't now of a Ruby gem to do that (and won't search as I guess that you already did that), but a library doing that should be possible to implement using set_trace_func [See this documentation](http://phrogz.net/ProgrammingRuby/ospace.html#tracingyourprogramsexecution). To extend the example from the link, consider this: #!/usr/bin/ruby class Called def call_me :hello end end class Test def test a = 1 b = 2 end def call_it Called.new.call_me end end t = Test.new puts "My t is #{t}\n" set_trace_func proc {|event, file, line, id, binding, classname| printf "%8s %s:%-2d %10s %8s\n", event, file, line, id, classname puts "WHOAMI: #{eval("self",binding)}" } t.call_it This will give you the following output: My t is #&lt;Test:0x000000016696c0&gt; c-return trace.rb:26 set_trace_func Kernel WHOAMI: main line trace.rb:27 WHOAMI: main call trace.rb:15 call_it Test WHOAMI: #&lt;Test:0x000000016696c0&gt; line trace.rb:16 call_it Test WHOAMI: #&lt;Test:0x000000016696c0&gt; c-call trace.rb:16 new Class WHOAMI: #&lt;Test:0x000000016696c0&gt; c-call trace.rb:16 initialize BasicObject WHOAMI: #&lt;Test:0x000000016696c0&gt; c-return trace.rb:16 initialize BasicObject WHOAMI: #&lt;Test:0x000000016696c0&gt; c-return trace.rb:16 new Class WHOAMI: #&lt;Test:0x000000016696c0&gt; call trace.rb:4 call_me Called WHOAMI: #&lt;Called:0x00000001668568&gt; line trace.rb:5 call_me Called WHOAMI: #&lt;Called:0x00000001668568&gt; return trace.rb:6 call_me Called WHOAMI: #&lt;Called:0x00000001668568&gt; return trace.rb:17 call_it Test WHOAMI: #&lt;Test:0x000000016696c0&gt; As you see, the trace reports three objects which are used: main, a Test object and a Called object. The interesting part is now to find out where the function calls actually happen, but this shouldn't be too hard. If you are finished with this task, you have to get a tool to generate a MSC. This is quite easy with [mscgen](http://www.mcternan.me.uk/mscgen/).
I think rubygems themselves used to have something similar to this, but not sure how well it worked. Was called `gem graph` or something
Fair enough, where in the documentation was I supposed to look to learn this?
Ah, documentation.. The bane of our existence as developers (who wants to spend ages writing docs over every change?) and the bane of our existence as the users if a product where there isn't clear docs.. Not finding the docs, you did the next best thing: ask someone who knows.
Welcome to my world. Those who get in on the ground floor of a hot new technology need only read the patch notes to stay current, while the rest of us are left with the prospect of slogging through the framework source code (now version 3.0+) to understand it on their level. And since most hot new frameworks are optimized (architecturally and philosophically) for the very easy demonstration case ("blog in rails deployed to cloud with tests in under an hour") and the enterprise level, intermediate guides are likely too difficult to write. I don't have a helpful answer, but I'm sure by now you know there are none.
&gt; The objects are just “Plain Old Ruby Objects” (PORO) I think "Plain Old Ruby Notation Objects" is easier to remember.
That is a bad tutorial, agreed. I would read a pure HAML guide instead, like http://haml.info/tutorial.html
&gt; Deployment - is a dark art. Who are you hosted with? I'm one of those weirdos who has his own FreeBSD server &gt; The appeal of the more micro frameworks like sinatra/padrino etc is undermined by the lack of complete documentation and very basic tuts for the complete novice. I've found that knowing Rails really helps with the other ruby frameworks. So the path to web development in Ruby begins with Rails?
Which question?
Yepp, it's like putting all pages of Kindergarden Algebra, Combinatorics and Statistics books in same book in random order. That's why crash courses like RailsGirls work amazingly well. 
Guess we know who wrote readme.
The difficulty in hosting a Rack (Sinatra, Camping, etc etc) is not really any less than a "full-blown" Rails site, and unless you are doing *serious* traffic, you're really not going to see a difference between a micro framework and Rails. If you really "just" had a simple form to save to the DB, then maybe, but once you start talking user authentication, etc etc, just go with Rails. The official Guides are great and there is certainly more momentum and documentation out there for Rails than some of the other frameworks. Once you have your head around how Ruby/Rack frameworks work, you can decide to go with a smaller framework if you'd like to.
Haha, nope not me. Sorry if I seemed combative, I shouldn't post pre-coffee. However, from the Sinatra README: &gt; Static files are served from the ./public directory. &gt; You can specify a different location by setting the :public_folder option. &gt; Note that the public directory name is not included in the URL. A file &gt; ./public/css/style.css is made available as http://example.com/css/style.css.
This article is quite a good intro: http://blog.maxaller.name/2010/01/a-brief-introduction-to-ruby-sinatra-and-haml/ It uses haml, but ERB is more like HTML - here is an introduction to erb: http://www.stuartellis.eu/articles/erb/ You can use haml or erb or the others you mentioned, or a mix of them, with sinatra. Which templating language to use is a matter of which you prefer, I like haml as it's less typing and forces correct HTML output (you can't miss end tags for example), however ERB is probably easiest if you're used to HTML and are learning lots of stuff at the same time. Heroku is awesome and by far the easiest to get going with - it handles lots of things for you automatically. I normally run my own VPS servers on linode or AWS, and the simplest way to do this is with [phusion passenger](http://www.modrails.com/) which is an apache/nginx module. Ruby is culturally quite focussed on new and slightly better solutions to problems, which means unless you're already following the technology can be quite hard to know what to jump in and use. A website called [ruby toolbox](https://www.ruby-toolbox.com/) can help you to figure out what library options there are, e.g. here is the page for web application frameworks: https://www.ruby-toolbox.com/categories/web_app_frameworks This can be quite daunting, however I really like that people are very unafraid to do the work to adopt slightly better tools. I read an article drawing similarities between ruby 1.9 and python 3000, which both made breaking changes to the language and syntax. The updated ruby version is widely adopted, whereas almost noone uses python 3000, and that has its tradeoffs - generally the ruby community will bite the bullet and deal with the bugs in newer software, in return for a more modern approach, whereas the python community will stick with older, more stable and better documented code even if there's something slightly better out there. Unfortunately I can't find this article right now. In terms of your choices, I think rails the easiest way into learning it - it's definitely the most popular web framework for ruby and has the most documentation / tutorials etc. Sinatra is very lightweight but is definitely easier to come at once you've used rails, I think the expectation is (or used to be) that you already know rails to use it. 
Yes, I saw that part, so I guess I should explain what caused my confusion. I was trying to figure out how to serve an html file base on the route i.e I wanted GET /about to display the contents of about.htm. Now if I went the HAML route, I'd just say "haml :about" and have "about.haml" in /views and be done. But if I use the static file method, then the "clean" option seems to be to do something like get '/' do redirect '/index.htm' end which means my url will have ".htm" at the end, and just for the sake of prettiness, I wanted to avoid that. It seems like the File.read method is the suggested way to do that. So, yes, the readme does tell me how to serve static files via a full URL, but not via a "pretty" route
&gt; (I just don't think this problem really demonstrates that) That's fine, I just wanted to explain that I really had read the documentation, and wasn't just posting on Reddit yelling "RABBLE RABBLE BAD DOCS RABBLE RABBLE" because I wanted to fuel the hate machine. :D
Yeah, it will. If you replace any of those characters with a -, it will do a regex search against the branches to figure out the branch you wanted.
Te estas preparando para que te dejen en Pampa y la via. Nunca dejaria que tuvieran todo el codigo gratis sin ninguna garantia. Me parece que al fin y al cabo es una cuestion de confianza. 
I feel your pain. You may find Rails to have better documentation than Sinatra, both official and unofficial. the official Rails guides have gotten pretty decent (guides.rubyonrails.org), and there are good print books available on rails, and lots of web tutorials, etc. 
I don't think this is exactly what you want, but thought I'd share it anyway. http://rails-erd.rubyforge.org/
Saving this post as unfortunately, I'm in a similar boat (although apparently much newer to programming and Ruby than you are). Fortunately at this point things like Learn Ruby The Hard Way and such are still structured enough for me to learn in a smooth and efficient manner, but this scares me for what is to come down the line when I want to step off the beaten 'standard blog' path. Your criticism about just trying to learn The Right Way To Do Things (TM) resonates with me as I have been trying to find the same thing. Even taking a step back from Ruby in general and just for purposes of basic development, database schema, etc. Like, I want to build X type of site--what are some best practices for how to structure the database schema, etc. Best of luck.
Spending hours in the rails console? Spruce it up and show off those hard-working hands!
Learn a server-side language first. Main options are Ruby, Python, or PHP. Your server side language paired with a framework is your bread and butter for web development. You can mess around with Ruby's Sinatra microframework. Here's a small Contact Us page sample app: http://www.reddit.com/r/ruby/comments/11pd4l/question_i_am_by_hobby_a_web_designer_that/c6ohwnd. But I think you jump straight into Ruby on Rails. Even though Rails is a large framework, I'd say it's newbie-friendly in that it's more or less intuitive to at least get the ball rolling. That way, you can sort of fake it until you make it, looking up what's going on behind the scenes as you need to. I jumped into Rails head first after a month of playing with Ruby. Rails' API doesn't expose you to advanced Ruby concepts. It's more important that you get the gist of programming (if/then control structures, classes, methods) than Ruby itself. * Check out Michael Hartl's Rails Tutorial. It's a step by step walkthrough available online. Also teaches you Git, deploying your app to Heroku, and even how to test your app.
x-posted this to /r/rails for you
RVM is no longer necessary for deploying apps to EC2. Amazon now offers a Ubuntu 12.04 VM, which you can [install ruby 1.9.2](http://lenni.info/blog/2012/05/installing-ruby-1-9-3-on-ubuntu-12-04-precise-pengolin/) onto. If you need to install specific versions of Ruby, I suggest using [ruby-build](https://github.com/sstephenson/ruby-build) instead.
Awesome reference. 
If your clients are on the same network UDP broadcast or multicast will allow you to discover other clients. Rinda::RingServer is built in to ruby and allows you to do this (UDP broadcast) and the dnssd gem will allow you to do this (multicast DNS). If your clients are on different networks you need a third party as most networks don't route broadcast UDP or multicast packets upstream. You can use a public distributed hash table (DHT) or build a server to coordinate nodes (which defeats the purpose).
To apply for *any* job? Sure, it's enough to get an internship or equivalent. To apply to a 'Jr. Ruby Developer' or 'Jr. Rails Developer' job? Probably not. You should go forward and build a website that does something - pick an app that you like, that's not too crazy in terms of functionality, and duplicate it. You don't have to sell it to anyone, but that's the best way to learn - with goals. As an example, one of the apps I built to learn sinatra is http://www.ronjeremyfacts.com/ it's just sort of a single-page-app, but it *does* something. Bring it back to the forum here and ask questions, visit stack exchange, that kind of thing. Once you've gotten something completed, you're better off than 90% of the computer science graduates coming into the workforce. After that, I'd say the steps are something like: a) contribute to someone else's application b) contribute to open source via submitting a patch to a project c) start a new open source project to solve some issue you have. Note that nothing about these things requires you to work for anyone - you can pretty much advance to master-level Ruby status with only persistence, stubbornness, and a facility with logical thought.
I recommend checking out [Sinatra](http://www.sinatrarb.com/) before Rails. Sinatra requires less work/structure to go from idea to small app.
Probably [Sinatra::Helpers](http://rubydoc.info/gems/sinatra/Sinatra/Helpers). Ton's of lesser known methods in there.
Have you considered an apprenticeship? It might be an option if local companies are offering them. Ruby/Rails meetups would be a good place to meet local developers and scope out potential options. If nobody is formally doing an apprenticeship program, you maybe able to talk a company into doing one.
thanks for your response, I found it helpful! what is the easiest way to learn how to make a user login? or maybe if it is simple at first, a voting system (up &amp; down)?
Lol. Must have a `sleep 2628000` in your humor class
They teach Algebra in Kindergarten?
I understand that, but I need to do this for a school project, so it's just for peering a small amount of clients (5 - 10). Problem is that I have not found a way to do it, and I'm getting really frustrated right now :(
Learn more Javascript and then try Node.js on the backend. That way at least you only have to learn one language. Once you are more comfortable with server side coding you can switch to RoR to see another language and expand your skillset.
I highly recommend code school and Michael Hartl's tutorial! I did both and currently working on my first app which is a villa rentals app. It is an uphill battle, but I am learning so much making this first app! I also agree with Olaf - school doesn't help with ruby. I tried an online course and it was a waste of time. I learned more from the online resources above. 
Look into zeroconf - there's [ruby libraries for it](https://github.com/lachie/zeroconf) (not sure if there's more maintained versions, last change to that project was 4 years ago) [zeromq](http://www.zeromq.org/) should work for this also - [the gem](http://www.zeromq.org/bindings:ruby) will requires the underlying libzmq C library to be built, but zeromq is great Or you can write your own [with multicast UDP](http://onestepback.org/index.cgi/Tech/Ruby/MulticastingInRuby.red), which might be fun (although you'd largely end up reinventing 0mq or zeroconf)
I'm glad you like it. If you have the time, you might want to turn it into a gem for others to use.
while I don't disagree with you, I want to say that as a Systems guy, developers that don't understand the stack and fundamentals drive me insane. it's not my fault your code is slow. if you don't understand garbage collection, HTTP or resource management, how do you expect to really understand what your code does? having a formal education will help you, but you won't learn the skills you need to be a developer. it's also a big investment for something that may have very little immediate return. a degree will help get you in the door though.
I've got to say that as a pretty experienced Ruby dev without a formal background I would not have been able to have solved some of the hardest problems I have faced through my career, esp when faced with problems of complexity, scale and robustness... There is no underestimating a formal education and when the next new hotness comes along it will carry you forward leaps and bounds and enable you to pick up new skills and languages and really understand your architecture and what goes on under the hood. I think the Ruby community does suffer from a lack of appreciation sometimes for basic COMP101, throwing out the basics sometimes in favour of "The Ruby Way"... as late this is improving vastly but only because lessons have been learnt. I think the one big thing that a formal education helps with is your ability to understand the architecture and pick solutions that match rather then pick solutions that are "hot". I've seen to many projects suffer because they've opted to go with X cause its the new "cool" thing to use when ultimately a good old fashioned and proven technology such as an RDBMS would have sufficed just fine or better in most cases.. Also it has to be said that education does open doors when it comes jobs... However as the OP has already stated that school is not an options why not try some of the comp sci classes over on www.coursera.org like there comp101 course or esp there brilliant SAAS engineering which I believe uses rails (https://class.coursera.org/saas/auth/welcome) TLDR: Formal education will help you long term to understand architecture, build solutions that match and progress your career. Take a look at free saas engineering course from berkeley https://class.coursera.org/saas/auth/welcome
Part of the problem here is that Ruby wasn't just adopted as a *language* for web-dev, but more as part of a whole toolchain. If you want to use Ruby and Rails and Erb and SASS and Git, or Ruby and Sinatra and HAML and whatever the new acronym/library/module/package/system is... you're fine, but it can be a hell of a lot to learn all at once. If you just want to learn very, very simple "writing server-side code in Ruby that spits out HTML" - the way you'd approach, say, PHP - then it's much, much harder to learn because it's not the cool, popular approach that everyone's talking about and writing tutorials for. This is the *one* thing PHP got right - a stable, solid mod_php that's practically included in Apache by default, and the ability to largely rename an HTML file .php, slap some inline PHP code in there and away you go. Conversely, Rails/Sinatra (in fact, I would argue most of the Ruby web-dev ecosystem) is more popular amongst more hardcore developers who are already intimately familiar with Ruby, MVC and similar concepts. They come with a lot of structure and subsystems that doe things for you, and teach good, industrial-strength development practices... but that *necessarily* represents more of a barrier to beginners than PHP's sloppy but simple approach.
Well this is an issue of scale, really. When I first started messing around with HTML, CSS was too buggy and not implemented everywhere (talking 1999-2000). My "workflow" was "edit file"-&gt;"save"-&gt;"refresh". In 2004, when I first started using PHP, it became "edit file"-&gt;"save"-&gt;"upload to webhost"-&gt;"refresh". Then when I finally used PHP enough to install a webserver on my own computer, it would be the first time I had a "development" and "production" environment, even if I didn't think of them that way. Even now, if I'm just messing around with personal projects, I rarely bother using source control. I'd love to be the kind of person who consistently has "development", "testing" and "production" environments set up, with unit tests, source control, build scripts, the whole she-bang. But for the scale of my personal projects, all I keep thinking is "is it worth the effort?". But then if you don't practice those skills frequently enough you'll eventually stop using them even when you should, and that's what worries me. There ought to be some sort of a wiki for a solid *development process* for each language, with information on source control, directory structure, organizing static resources, testing, deployment, etc, so you can look up what the best practices for "development" (which I consider different from "programming") are.
I recommend taking a look at Padrino (http://www.padrinorb.com), a very light framework on top of Sinatra that will help keep you much more organized.
Looked at it, actually started coding in it, then decided I might as well take the recommended route and start in Rails, if it'll save me time in the long run
[google cache](http://webcache.googleusercontent.com/search?q=cache%3Ablog.txus.io%2F2012%2F10%2Fversion-your-ruby-objects-with-aversion%2F)
Not sure I understand why I would blindly be converting some variable to an array..?
I absolutely adore %q and %Q. Ruby is the only language I know where quoting strings isn't horrible. (I'm looking at you python!)
The ability to quote strings like that is clearly inspired by perl (cf. qw, q, heredocs et al.)
Because you were anyway with the `var = input || []` and other tests. This way is more readable.
well fuck.
rather than Array(input) you can also do [*input]
Agreed, all we care about is if the object responds to the messages we'll be passing -- it doesn't have to be an array. In fact, it can be limiting to force it to be an array instead of just using a narrowly defined protocol.
`*` is the 'interpret as a comma separated list of values' operator. Common uses are in method definitions for a var-args style method, eg: def some_method(arg1, arg2, *args) #code end `args` there is an array, but you call the method like: `some_method(1,2,3,4,5)`. `args` in that case is `[3,4,5]` You can also use it, as OP does, in any place you'd drop a Comma-separated list. one of my favorites is the common: str = "Joe Schmoe" User.find_by_first_name_and_last_name(*str.split) This is equivalent to doing User.find_by_first_name_and_last_name("Joe", "Schmoe") You can also do first,last = "Joe Schmoe".split to get `first` assigned `"Joe"`, and `last` assigned `"Schmoe"`. `*` is a neat thing. Well worth reading more about it in the pickaxe.
&gt;You can, though. Agile Web Development is a bad Rails book. If you want I learn how to copy and paste poorly-explained code, I highly recommend it. Depends on which edition. They decided to trim down in the 4th but it's still a approachable book.
That's a pretty facile example, since your method explicitly handles an array argument (using *), and to call it you could just do: validates_length_of *LENGTHY_FIELDS A better example would be something that usually accepts an array of values, but can also accept a single value. For example: class Thing def self.load(ids) Array(ids).map { |id| new(File.read("#{id}.txt")) } end end Now you can do either: Thing.load(1) or Thing.load([2, 3, 4]) 
Exactly. I go to other languages and want to use interpolation in a full-quote string, then realize said languages don't have modern quotes, and rage as I look up the various escape chars
Comments on the article demonstrate a gotcha with hashes. OP of article says it doesn't matter. Looks like it matters to me. -1, sorry. I'm with the people who think respond_to?(:each) is the way to go here. Or, just let it fail and pick it up in an exception handling block higher up -- assuming this is an error that only you can cause, as a programmer. Generally speaking that would be true.
The fact that you can do "$( (stuff ()) )" surprised me. +1, ta.
There's a gotcha with strings: 1.8.7 :001 &gt; Array("oh\nwhat's\nthis") =&gt; ["oh\n", "what's\n", "this"] 
Responding to *each* doesn't ensure an object is Enumerable.
This would actually just test for enumerbale rather than ensure it. Consider the case where you don't know what sort of data type is in a variable. For example, users could be user1, [user1], [user1, user2, user3] or [user1, [user2, user3]]. In the case of `respond_to?`, user1 will be skipped as it (probably) doesn't respond to each: if users.respond_to? :each users.each do |u| # skipped in the case of user1 In the case of ensuring users is an array with `[]`, only user1 would work, as the others will become nested arrays: [users].each do |u| # works only for user1 When using `[].flatten` everything should do what intended but `[user1, [user2, user3]` will become `[user1, user2, user3]`: [users].flatten.each do |u| # Might be what you want Finally, `Array()` will only effect `user1`, leaving `[user1, [user2, user3]` in tact: Array(users).each do |u| # Might be what you want Most of the time you'll want either `Array()` or `[].flatten` rather than `respond_to?`, but which one depends on the use case.
it makes sense to me now, thanks!
I don't know, but I see no reason for it not to at least be in 2.0. The feature has already been in edge for over 3 months.
I tried out some resources from Lynda for Ruby which were great, might be worth checking those out.
What's an example of an instance of a Class that would have "each" defined that doesn't behave like an Enumerable?
I like O'Reilly's "Sinatra: Up and Running". The 2nd half of the book is kind of thick in underlying concepts but the 1st half is true to its title.
Upvoting only because I see this is currently 1/1 and think it should have a chance.
Well then they need to get buttglad. On topic, nice article, and well written.
I work with this stuff on a daily basis. Even with Sinatra, you're dealing with a lot of moving parts (gems, rack, all the opinionated conventions). Because of all of these moving parts, the learning curve you're facing is a bit steep. It took me about a year to get a half way decent grip on Ruby, Rails, Sinatra, various gems, the whole web dev ecosystem... Documentation ain't perfect... Especially for highly opinionated software that makes up almost half of your *entire stack*. Look at other frameworks. You're headed in the right direction by asking questions here :-)
These should get your started: http://www.computerhope.com/issues/ch000549.htm http://java.com/en/download/help/path.xml 
It needs to be C:\Ruby193\bin, not just C:\Ruby193. You need the location where the file "ruby.exe" is located. Usually that is in the bin folder. 
Sorry, I didn't see that part. But, when I just looked at it, it was actually that. AKA, it was really C:\Ruby193\bin. I just didn't see the bin the first time I looked at it.
Aha..so you're good to go. Now in which folder is your actual program file "calc.rb"? Let's say you put it in C:\Test. So first you need to go there: "cd \Test". Then run it: "ruby calc.rb". These are the basics of running commands from the command prompt. "cd" = Change Directory. 
It's not lame, actually. I once wrote a Rake script that updated my path for an app, and after x amount of trial/debug runs, the variable was updating, but cmd.exe refused to see the changes. I tried everything I could think of, including a restart of explorer.exe, and nothing worked. A reboot was the solution.
So, I put this on my desktop in a folder called "learning programming". Is there a faster way to get to that directory than say cd desktop, then cd learn programming. Then typing ruby calc.rb? I did all that and it finally worked. But, seems like it could be easier to do.
Not sure why my response didn't show up to this. Thanks for yours though as it is working now. Is there a more "efficient" way of getting to the file though to run it? AKA, I put my file on my desktop. So, I went cd \desktop. Then I went cd \learn programming (name of folder). Then I went ruby calc.rb, and then the thing ran. Is there a way to just get straight to the folder without having to do a bunch of cd's?
Well..yes. But that starts to get into advanced topics of batch files and DOS prompts. You could google for "open command prompt here" for an alternative idea where a popup menu in the current folder opens the command prompt at that location for you. But how about just double-clicking your ruby file in explorer? That should run it too. You just need to put a "gets" at the end of your program so it doesn't exit before you have time to read the output. On the other hand you just need to cd once. Just leave the command prompt open, edit your file, and then press arrow up + enter in the command prompt window to rerun your last command. 
Oh I see. Sure. You can type it all in one: cd "\blah\herp\derp\something\and\other". You can also press the TAB key to complete long folder or file names. That helps a lot with minimizing typing. 
Sorry for all these questions. What exactly do you mean by using the TAB key to complete long folder or file names? I tried it out, but it didn't do anything. AKA, it just "tabbed" the blinky thing and I push enter and it didn't do anything. I tried partially typing the folder name and pushing tab to see if that would do anything, but didn't see anything happen. Just really curious is all.
Online resources are all you need. Google. Get on github and put all your code on it. This is your resume. Read others' code. Write code. Repeat. Find your local ruby/rails user group. Attend. Get amped. Linkedin.com Profit. 
Monkey patching is great. Romney used it to win the debate tonight, actually. He even open sourced his code. irb(main):006:0&gt; class FalseClass; def ==(other); true; end; end =&gt; nil irb(main):007:0&gt; false == true =&gt; true
You can pass entire paths to the cd command.
Here’s some of our Capistrano Recipes we’ve been using with SCALR to manage our EC2 instances. https://github.com/donnoman/scalr https://github.com/rickrussell/cap-recipes https://github.com/donnoman/cap-recipes https://github.com/donnoman/cap-recipes/blob/master/lib/cap_recipes/tasks/nginx_unicorn/install.rb We use god to manage nginx/unicorn/resque. In some instances we’ve needed Upstart to keep an eye on god, haha. But it works well for us. We’re in the process of moving to chef/cucumber-chef We use these in combination with the SCALR API and Jenkins to do our deploys. All you would need is a seperate repo with stages and set overrides.
The reason I'm curious about best practices is because when I started with PHP, it was just a mess (some people might say it still is). Trying to figure out the right way to do things was confusing because two different tutorials would use two different methods. People were doing things anyhow, PDO was rarely used, MVC wasn't nearly as widespread as it is today. Over time though, PSR-1, the emergence of the frameworks and the addition of OOP improved things to where you knew that even if you weren't doing things the best way possible, atleast you weren't doing them wrong.
Be careful about advocating monkey patching without also mentioning its dangers (like increased maintenance overhead, possibilities of namespace collision, etc)
Or even: 1.9.3-p0 :001 &gt; def false.!; false end Although this makes the whole session unusable: 1.9.3-p0 :002 &gt; 123 1.9.3-p0 :003 &gt; !123
Thank you for this guide, I have shared it with some people I am working with a project on.
&gt;I think that's a bit too harsh. Agreed. I personally like RVM and gemsets and managing it all from my user-level account, but on Ubuntu 12.10 `sudo apt-get install ruby1.9.3` brings down a quick binary install of 1.9.3p194. That's a perfectly fine starting place for development and learning purposes, especially if the students aren't that familiar with linux and/or maintaining software installs outside of the repository model.
*Eloquent Ruby* (see sidebar) is an awesome book that explains the utility and dangers of metaprogramming. It's what allows most of the Rails "magic" to happen (Active Record model filename -&gt; ruby classname -&gt; db table row inference, for example).
Ruby 1.9.3 is significantly faster.
I think you are confusing the jar/war with the class file. Jruby can and does compile the Ruby files to a .class file which is bytecode.
Yes sounds like the poster is pretty irrational.
Thanks, I'll put it on my Christmas list :-)
Note: This was taken from an [old article](http://wiki.openqa.org/display/WTR/Re-Usable+Load+Testing+Example) regarding Load Test. I have modified it so that it can be called easily via CLI. I hope this helps someone out there, and if you want to extend, please do. I know it isn't original, but it might be helpful.
Where can I get a good, reliable, portable typewriter that takes into account the possibility of sand interfering with the innards?
Wayyyy too verbose/fundamental for a topic like choosing a special purpose ruby interpreter. 
The trick isn't preventing sand, it's finding an easily maintainable and serviceable unit. This would lend me to recommend a more robust and older manual typewriter, over a newer electronic one. Perhaps this unit might serve your needs http://www.alibaba.com/product-free/262550605/Robert_E_De_Barth_New_Heavy.html Caution though, mechanical typewriters are known for attracting ice sharks. Use it wisely.
For things like this, I don't think having too much information is ever the problem. If you know what you are doing and can compile without hesitation then do so. There are many people out there that will find articles with this much detail very useful. In my experience assuming that everyone knows too much will lead to the omission of important details. better safe than sorry
Thanks for posting it. I have actually been looking for something like this. Will take a look.
Eek! I've been saying the wrong thing... Thanks. I wasn't confusing jar/war...it was a misunderstanding of what compiling JRuby to Java was doing. That led me to read this "...jrubyc --java(c) will include the complete source of your script in the compiled class..." on the JRuby wiki as confirming my already incorrect understanding instead of only being tangentially related. Thanks...that made me find this page: https://github.com/jruby/jruby/wiki/JRubyCompiler and realize how wrong my notion was. 
why do we want new-comers compiling experimental ruby implementations?
Do these coding exercises: https://github.com/JoshCheek/ruby-kickstart And check out the courses at codeschool.com ($25/month): html5, css, rails, rails testing as well as railscasts.com and this (free online) book: http://ruby.railstutorial.org/ But don't skip step one. It will teach you to write code for common patterns and help you distinguish between rails and pure ruby.
Sure, the point of mruby is to be lightweight. If it is faster, or has any other differences it is purely accidental :) mruby doesn't replace any existing implementations, and instead is positioned to compete with lua. If you're writing a program in C or C++ and need more functionality then you can put a mruby script inside of your program. Useful for game developers, and embedded programmers (think lego mindstorms, phones, cars, refrigerators, etc.). Because of it's lightweight footprint, if you were running a parallelizable task that takes a ton of memory, and you can re-write it to run in mruby, you could spin up more processes. mruby also happens to be faster at floating point math right now, but again that's not the point. mruby has no IO, file access, and cannot "require" other files. If you need any of that functionality you would need to code it into C and then to add mruby to that program. Kindof backwards from what we're used to. Chances are we won't see web-servers written entirely in mruby, but rather written in C and then scripted with mruby. It is still very very young, so you never know. Btw, this is all in the article, but i guess **tl;dr**
New doesn't mean wet behind the ears, maybe you've been coding for a few years and never bothered to understand PATH, or to ask why things like RVM exist. Or maybe you just never connected the dots. Now you know more, and that's a good thing. If you're not doing things that are new to you, you're not growing. I'll bet there are plenty of programming tasks that are still new to you. Have you ever built your own language, running on your own processor? Just because you're new to something doesn't mean you're worthless. Also programming is hard, and Ruby developers are nice. Let's be nice and help people where we can.
Great say hi to Sam for me, he hasn't been the same since he came back from the war.
why not link to a page that actually has some info about the gem, like it's source repo? https://github.com/enroxorz/hash-differ the rubygems page that's linked doesn't tell you much except that it exists and is a gem (and gives you the link you can click on to get to source repo page on github)
[Ruby Koans](http://rubykoans.com/) is pretty cool
While I'm not downvoting the OP I do agree with you. I can't think of an example where I _wouldn't_ want an exception raised so that I know I'm invoking a method with invalid parameters. In general I prefer just defining separate methods to handle scalars vs. containers e.g. def parse_foos(the_foos) the_foos.each do |f| ... end end def parse_foo(the_foo) parse_foos([the_foo]) end
I'd still consider myself a hobbyist in ruby, so take this comment with a grain of salt. Your goal is to build websites? Start doing that. Build one right now. You don't need to bog yourself down with further studying material right now. Well, maybe you can read something on the side, but by actually doing what you want to be doing you'll figure out real quick where you're deficient and what you should be reading. Chances are what you need is not gaining more skill in ruby. For example, I was unemployed quite a while ago, and I hated applying for jobs. Naturally, I wrote a script to apply to jobs for me. It's not the best way to do it, but it actually got me interviews and a decent job in short order. I had to learn how to parse HTML, send emails, and store data, all of which were accomplished using gems. I'd been introduced to gems and such from a book, but I found it to be quite different to try to learn how to use these kinds of things on my own. Most times I try to make something, the logic is not difficult and the bits of language that I don't know are easily looked up. Turns out shit like this is how things get done in the world. Books are great. I've learned a lot from reading books about programming, and they're a great reference for those without a photographic memory. However, every time I've tried to make something I've had to learn how to use something that was not what I had been learning from the books. I've started rambling so here's a TL;DR: Go make something, then turn to reference material when you hit a roadblock. Read the part that you need then get back to work. Also maybe read the whole book/whatever in your spare time.
If your goal is to move into web-based work, go for Rails. I can't cite any statistics, but I imagine most people would agree that there are *many* more Rails gigs than any other Ruby gigs combined. If you know Ruby, as a developer, you are sort of expected to know Rails. Sinatra is very cool, and doesn't make decisions for you like Rails does... but unless you are either a very experienced web developer, or you have very specific needs, I think you're better off learning Rails. Sinatra is a different sort of thing, it is lightweight and highly flexible, but Rails is more analogous to Spring than Sinatra. I think Sinatra is awesome, but given the context of your post, learn Rails. Learning an MVC framework is a must if you want to do web development. Learning two is better! But I think Rails has a very high cost-benefit learning ratio. I didn't give enough credit to Ruby Koans in my initial post. I still do Ruby Koans from scratch every so often, on a flight or whatever (I learned coding in Python and Ruby, and currently am working on a Ruby/Rails project), and I think it's very useful. It's useful to get fast and familiar with the write/run-tests loop, to remember the methods you might miss, to remember the occasionally brilliant design pattern (the "proxy object" koan is basically how ActiveRecord handles Associations, which is a *must-know* if you want to understand the ORM in Rails), etc. I'd also add this - Javascript (and jQuery, which is a library for JS, although an indispensable one imo) is a different beast, but you will have to learn that too if you want to do web development. I personally haven't found any great JS learning tools, and although I use JS/jQuery regularly (weekly?), I don't consider myself expert or even advanced in it. JS is, despite what the Java crowd say, a functional language, and it there will be some things that are hard about it. I highly recommend jslint. Anyway, best of luck. http://guides.rubyonrails.org/getting_started.html is a pretty good intro to Rails, although I really do recommend doing the Ruby Koans at least once before diving in, as Rails - while not difficult to learn/get started with compared to frameworks like Spring - assumes that you know Ruby more than casually. Good for you for taking it on yourself, and feel free to PM me or post to /r/ruby if you need help with further Ruby stuffs. P.P.S. - rspec, rspec, rspec. Write unit tests and write them in rspec. Bonus edit: destroyallsoftware.com - these videos are awesome for design and testing patterns, and although it's something like $9/mo, you could sign up for 1 month and download all of the archived videos (at least 60 or 70 around 10mins each, easily worth $9). Lots of good stuff in there.
The OP wasn't asking if it was an array, he was telling it to be an array. Tell don't ask. Confident code vs timid code. What are you going to do if it doesn't respond to each? The OP doesn't need to worry about that.
Sorry about that. I am new to announcing new stuff I put up there so I don't know the protocol. I will make sure to do that next time :-) 
*I think* that was awesome. 
That font makes me cry.
haha. yep, you're officially an old man now :p honestly, i think it's a combination of: * ruby is pretty featureful and awesome already * all new and exciting things lose their shine * the reason you gave above (ie. time for a mid-life crisis) fwiw, i'm still exciting about ruby and its future. it's my favourite language still, but there are plenty of new things that could be added that would make it even better, and since i still happen to like new things that's a plus ;)
I would be more excited about a new version of JavaScript since all the other scripting languages will end up dying over time, the web is too powerful.
If it starts with `Socket.tcp_server_loop` it's going to be totally awesome.
More sweet shit: http://kresimirbojcic.com/2012/08/23/things-to-look-forward-to-in-ruby-2-dot-0.html Check out those auto initializers! def initialize(foo, bar) @foo = foo @bar = bar end Can now be typed as: def initialize(@foo, @bar) end Also remember that this is 100% compatible with ruby 1.9.3, so you should be able to upgrade without a hitch. 
Aha, better GC excites me somewhat, I've had GC troubles before. I thought we already had lazy enumerables in ruby 1.9.3, but I never understood how/why to use it. I'm clearly confused. 
what kybishop said, plus proper named arguments and namespaces/'refinements'
Gotcha! Well I'll be following it. Is there any particular area of the code that you'd like a second pair of eyes on or are you just looking for general comments? I can take a look some time in the next few days.
Code written in 1.9.3 should run just fine under 2.0.0. No syntax changes are necessary to upgrade to 2.0.0 So if you wrote your program in 1.9.3 and it fires up just fine with ruby ./program_name.rb, it should work just fine with rvm use 2.0.0 &amp;&amp; ruby ./program_name.rb EDIT: as pointed out by drbrain, there are a handful of incompatibilities, but they are pretty specific: http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/NEWS?revision=37126&amp;view=markup I doubt most users/libraries will be much affected if at all. Like I said to drbrain, it does put into questions their claim of "100% compatible with 1.9.3"
Ah I see, behavioral changes in a few methods possibly causing issues. EDIT: It seems like the few incompatibilities are very specific, perhaps with the exception of Array.shuffle. I'm hopeful that this will cause only the slightest bump in a few very specific libraries. It does put into question their claim of "100% compatible" . . .
Never said it was the ultimate web language, but it sure as hell beats the pants off javascript for server side code.
Ah, got you now. You wrote the auto initializer example then said "Also remember that *this* is 100% compatible with ruby 1.9.3." I was taking taking that code example as your antecedent and thinking.. that's not compatible with 1.9.3 at all(!) ;-)
Well, he had the arbitrary requirement that it be written in Ruby. Other than that, Taskwarrior fits the bill precisely.
Just curious - what are you using this for? Its there some heroku limitation you are bypassing?
I have been working on a tiling WM is MacRuby as well, and some of your code is really similar to what I have written. (There aren't that many ways to implement the Application/Window/Workspace stuff I guess :) Definitely work on getting some more layouts and stuff implemented. And the automatic tiling of windows. I don't have too many comments on the code. It looks like you have the right base, now you just need to make it awesome! When I get a chance to look at my code again, I will see if I notice anything when comparing them.
I think there's a huge market for it! The issue is that every attempt that I have seen so far has never succeeded to be much more than that... i.e. they have all sucked. Obviously Apple's window manager doesn't allow for these sorts of tweaks as easily as X. 
Awesome, I will add "pygatea on reddit" to my list of potential testers :)
cross posted to /r/rails for you.
So am I, and I especially prefer the user of `%w[]` over `%w()`, since `[]` makes it seem more like you're actually creating an array. 
 class Foo def each(&amp;block) # bogus crap method to prove a point end end That said, if you just want to check whether some object is an enumerable, try this instead: if object.class.included_modules.include?(Enumerable)
Agreed that it's a bit too harsh. Ruby versioning is great for development machines, but I think on production machines you should have only one version of ruby, and going with the latest stable package is the easiest / best-supported way to do that. RVM on production is a can of nightmares.
Even when multiple Rubies in production are required, one can install Rubies into `/usr/local/$ruby` using [ruby-build](https://github.com/sstephenson/ruby-build#readme), create multiple users and configure their `$PATH`s accordingly in `~/.bashrc`. If developers really need a script to set `$PATH`, `$GEM_HOME`, `$GEM_PATH` correctly, they can use [chruby](https://github.com/postmodern/chruby#readme). RVM/rbenv has been cargo-culted into production.
Thanks for the quick response! * I ask for private repo access in case you want to import a private jekyll repo. I guess having a private jekyll repo is kinda pointless, eh? I'll revert to public info access this afternoon. * For directly editing your github pages thingy, you might check out [prose.io](http://prose.io) - seems more what they're doing. What about a post-commit hook to push all jekyllhub changes to your github repo? * Thanks! Glad you like the UI :) Happy blogging!
How do you figure? The hash is implicitly converted to an array via Hash#to_a. Thus your bound parameter, a, is set to an array with two values, [:test, :asdf]. Calling puts with an array outputs each value separated by a newline. The block can optionally have multiple arguments if you'd like to (in Clojure terms) *destructure* the arguments being passed in but it's by no means required - #each accepts an array of arrays the same as it accepts an array of values.
Ack! I should really do more cross-browser testing. Thanks for the feedback; I'm on it. :)
I see I'm a little late to the game, but I just thought I would mention that I suggest first get a basic understanding of Ruby by reading, typing out the code, and solving the example problems at [Learn To Program](http://pine.fm/LearnToProgram/?Chapter=00) by Chris Pine. Then learn Rails from the ground up with [Ruby on Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book) by Michael Hartl. This site walks you through getting Rails installed, serving static pages, then serving slightly dynamic pages, then onto full-blown MVC websites and handling javascript and image assets in the asset pipeline and so on.
I see I'm a little late to the game, but I just thought I would mention that I suggest first get a basic understanding of Ruby by reading, typing out the code, and solving the example problems at [Learn To Program](http://pine.fm/LearnToProgram/?Chapter=00) by Chris Pine. Then learn Rails from the ground up with [Ruby on Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book) by Michael Hartl. This site walks you through getting Rails installed, serving static pages, then serving slightly dynamic pages, then onto full-blown MVC websites and handling javascript and image assets in the asset pipeline and so on.
Sure, that's how it happens, but it's a rare hash where you want to treat the keys the same ways as the values.
As someone who just in the last few week s started seriously considering switching over to Jekyll from Wordpress, you're timing is pretty awesome.
Ah.. for some reason I never got that in the examples the required key was a Parameters object itself. Makes much more sense now!
That looks really promising. I'll definitely have a closer look. The website looks nice and clean too. I also would like a comparison with cancan. And maybe a simple example app with real world validator use cases.
Thanks for the suggestion, but I ended up completely avoiding the issue by using a feature that I hadn't noticed in the facebook library I was using. It offered batch queries which was exactly what I wanted
Searching for 'ubuntu' finds nothing, but the 'New' listing clearly shows a match for 'Ubuntu'. EDIT: Also: the 'Upload' button simply does nothing.
Learn Ruby and Rails is not my site, but I will be sure to pass on the info. Thank you.
I tried 'ubuntu' as well and found nothing, but entering 'linux' got plenty of results - Ubuntu torrents included.
Still left your root password in your source: https://github.com/tekknolagi/indexer/commit/2a7767115c661a0171ffe25fde19c73c339448ec
Didn't change anything since.
Changed it since then, and put it in the .gitignore :P
Maybe I was to impatient before and clicked a 2nd time when nothing appeared. The fade-in could be a little faster.
I'll fuck with the JS :)
Should be faster now.
That was quick – better now, thanks!
Awesome, no problem. I'm actively maintaining this.
What do you mean by a fulltext search?
He means that it would be hard to to autocompletion for any potential search string (full text search), but would be pretty easy to just enable auto completion for words used as tags in your application.
If you'd have to provide input completion for all words of all the filenames, that'd be rather resource intensive and would require a fulltext index across all filenames. Despite, when having only tags, providing input completion should be rather easy (in terms of handling this on the DB level).
I would highly recommend allowing searching by title.
Actually that was me trying to break that on purpose :P I did not mean to push it to the live though. Was there for maybe 30 seconds haha
thanks!
Thanks for the tip.
Why post this on Reddit if not to self-promote? This thing can scale to about 10k searches/second, I think. On the server it's currently residing, at least.
Also in the same boat. Luckily my app is only about 200,000 lines. :(
Yeah. Luckily for me it's pretty segmented and adding one thing *shouldn't* (note, I didn't say "won't") break anything else. Most is on the backend/worker level, thankfully.
Doesn't look like anyone's posted it yet - IMHO [thoughtbot's "laptop" setup script](https://github.com/thoughtbot/laptop) is tough to beat.
RVM+ST2 = Heaven. However I've had trouble installing rvm directly due problems with gcc/llvm. I'd recommend going with something like railsinstaller.org. It makes the initial setup parts *much* easier. 
I'll go ahead and be the guy that always suggests vim. So yeah, definitely vim :)
What is your favorite text editor and why is it Sublime Text 2?
Emacs!
ST2 has a vim mode and a bigger and more active community for plugin development imo!
Most ruby shops USE OS X for their development. You can use RVM or rbenv (i prefer the former, but both are good). Bundler+rbenv+sublime text 2+ iTerm = win Also, posting to pimp /r/SublimeText
Some more rbenv-Plugins: rbenv-gemset, rbenv-vars and rbenv-each. The last one is especially useful when your app should run on more than MRI (or different versions of MRI).
I'd rather go for vim, but Sublime is really good. The point here is that all that's really necessary (and not in a minimal sense either) is a good text editor and RVM to manage the rest. You don't need and probably don't want a huge IDE.
Good point. I actually use vim when I log on to a server and have to hack in something or pretty much any minor change. Infact I'm so addicted to vim, I run ST2 in vim mode. However for Rails I really like an IDE, especially cause you generally have a bajillion files to edit and I can never remember the names...it just a bit easier clicking around. But to your point, editor choices are like your fav ice cream flavor. You're gonna love what you love and rarely convince anybody to switch over. Just use whatever works for you. 
Never used rbenv, hows it different than rvm?
When people hear I use vim they always say, "wouldn't it be easier to use an IDE?" To which I always respond, "vim is my editor, Unix is my IDE."
Vim + Homebrew + RVM + Git + and other various unix programs. No need for an IDE if you ask me.
It takes a more simplistic approach. It uses a shim, rather than overriding at the shell level. I'd been a big fan of rvm, but issues I've had with it include, crashing servers by forking shells until it's out of RAM due to a bug when not having a default ruby set, updates continually break zsh shell integration for me. Poor versioning support (installing a specific version of rvm) excacerbates these, unless you install it as a gem (a bit chicken vs. egg). I wrote out a paragraph explaining the simpler approach of rbenv, but it read like dogmeat. The readme on github https://github.com/sstephenson/rbenv does a much better job, I'd recommend giving it a quick read to see the fundamental differences in philosophy and execution. rbenv and ruby-build gives you pretty much everything you need though (and rbenv-gemset if you still want to use gemsets, I don't)
Thanks! I think this indeed may work. Time to scour the internet for hours to figure all of it out!
this is blogspam.
It looks great, but it lacks so much features that it is basically unusable.
"Those imply that the most important part is us, the community, rather than the author." But that's wrong, you entitled retard.
No, when you're shopping for Reddit karma, the people who have the power to upvote you are the ones who are important. I didn't say that it *should* be that way (in fact, I didn't even say it *is*). But the fact of the matter is you need to learn to cater to your audience. For the most part, people read Reddit to get something - entertainment, education, cool tools, whatever. So you need to frame your submissions in that light - what does this thing I made do for *you*? Obviously, the thing you made wouldn't exist if you didn't make it. But that's really completely orthogonal to Reddit. The thing you made exists whether or not anyone on Reddit approves. But obviously you're posting about it here for *some* reason - and if you want the natives to cooperate, you've got to play by their rules.
My mistake. /r/SublimeText
Hmm, I like this approach. Does the path have to be absolute? Also, is the general 'gem' file the unextracted tar.gz, or the extracted folder, or a specific component? Thanks! edit: nevermind! Figured it out on my own! Turns out you might need to specify a version number when you add a path! Thanks again!
Fantastic. Love these ideas. Thanks! What sort of "organizational features" do you mean?
Little-endian is dominant among modern CPUs right now (x86, amd64), so I don't see the problem.
The ability to organise torrents into categories (e.g. music, movies, software, books, etc) and the ability to add relevant metadata to a torrent. Some products have a couple of versions, remasters of music albums, multiple editions of the same book, different encodings of the same product, etc. How are you going to distinguish them from each other? Organisation is key.
I bought this ebook after seeing the HN thread today where someone mentioned this other recent ebook [Working with TCP Sockets](http://workingwithtcpsockets.com/) (in Ruby). So I bought that, too. Good week. :) 
Good point! Sounds sufficient to let EC2 only allow other EC2 us-east nodes and then do a X-API-Key check on incoming requests. Thanks
It's not a Heroku limitation. I'm just distributing the load on the remote endpoint instead of piping everything through a single connection.
vim, screen, ruby-build, rbenv, {my/postgre}sql, git and firefox+firebug are really the only tools I use.
RubyMine is indispensable on large projects. I'll admit that Jetbrains' designers threw in one or two stranger features, but the IDE is too powerful and too friendly to pass up once you know your way around it. It's an excellent tool, and well worth the license. 
Have you looked into https://github.com/soulcutter/saxerator ?
A pure ruby implementation would be a lot slower than that. The Ruby stdlib has a fast (read compiled) MD5 function. It's in $ARCH/digest/md5.so and links against libcrypto and libcrypt. I don't think there are big differences in likeliness of collisions. The main difference would be, that you can construct a collision for CityHash more easily than for MD5.
I've had in mind to implement similar functionality to prevent recompiling unchanged assets, but I knew it wasn't a simple problem, and I didn't have the time, nice to see this.
Can you link to the repository?
I'm assuming this is it: https://github.com/comboy/catcher
Yes, thank you. I will check it out later today :)
aha! thanks! 
Note that logging exceptions from crashed threads is [one of many things Celluloid does](https://github.com/celluloid/celluloid)
You'll need to add your vendor directory to your load path. Something like this: $:.unshift(File.join('..','vendor','pg')) # may have to include the lib dir too Either right before you require it or as a part of the initialization of your library. I'd put the load path change in lib/mygem.rb and require 'pg' right after that. This will work but like I said originally, you should really look into bundler package because it literally does all this for you.
What you want is the powerset, with the condition that you only want sets "positions" in size. Powerset function is from [rosettacode](http://rosettacode.org/wiki/Power_set#Ruby) because I'm not that hardcore. But it's pretty straight forward, look up map and reduce if you aren't familiar with them. def powerset(a) a.reduce([[]]) { |ps,item| ps + ps.map { |e| e + [item] } } end powerset(Array(min..max)).each do |set| if set.length == positions p set count += 1 end end
Haven't you installed rails.vim ? This basically solves the issue about the bajillion files to edit by providing commands like :Rmodel, Rcontroller and so on. As it provides autocompletion, you can just hit tab and it lists all your models, controllers or any other types of files ( see :Rhelper ... )
Can you still have the same workflow ? I'm a die hard vim fan, each time I try something that has a vim emulation layer, all you get is the modal editing and the movements keys, which is half of vim's advantage. For example, I find myself rebinding a lot of things like, :map &lt;leader&gt;r :!bundle exec spec %&lt;cr&gt; or any other commands, or hitting ctrl-Z, going to the shell to do some work, getting back into vim with fg, there's also the splittings commands with rails.vim, like :RVmodel user to open a vertical split next to my current file to see my user model, etc .. 
Reading nice rails application that are open source is also a really good way to improve once you get past the first round (books, tutorials, screencasts). See : http://jetpackweb.com/blog/2009/10/14/high-quality-ruby-on-rails-example-applications/
I've been tempted to try to generalize Saxerator to be able to use different parsers under the hood, but haven't had a real use case until now. If you're interested, please open an issue.
If you use [combination](http://ruby-doc.org/core-1.9.3/Array.html#method-i-combination) then you get the same result as the code you posted: `(1..10).to_a.combination(6).count #210` 
:-)
Thanks for this information. I googled permutation and found that ruby offers both a permutation and/or combination.
what are the downsides of using celluloid even for simple thread-needing apps? I've been using it in that situation relatively happily. There are a variety of edge case things you need to take care of with threads, that celluloid just does for you. I find it useful even for simple thread needs. 
doesn't ruby already have something approximating perl style warn and taint? Not sure what 'strict' would do, ruby's got less legacy than perl than 'strict' out. ruby 2.0 is intentionally supposed to be a lot more backwards compat than 1.9. 1.9 was a pretty big jump. Regardless of what they label the version, I am appreciative of not as big of a jump for a while. ruby community managed to transition to 1.9 pretty well, but we can't handle that big a change on a frequent basis. 
I gave ST2 a serious try recently. I had some pretty repetitive editing to do in one file, and it looked really easy with ST2. Pretty graphical, easy to understand what I was doing. When I was done, I realized I could have done the same in vim in 1/5 of the time. If just wouldn't be as obvious how to do it if I were a beginner.
If it fits your needs, and you end up with getting thing done quicker with celluloid, then there are no downsides. Celluloid is a framework, and it assumes you organize things in a specific way. It's a nice way, it's not always my way. Personally what I use the most from catcher is that it appends class name in logs, Celluloid::Logger does not seem to do that, I find that very handy. And even without threads I just find it easier to write Catcher.block("foo") { boom } than begin end with rescue block and exception logging inside. 
Some we've been working on: http://learn.thoughtbot.com/ruby http://learn.thoughtbot.com/rails
Awesome
two year old blog post put on reddit now, why? I wonder if the author(s) still have the same sentiments, two more years into the bundler world -- the OP doesn't even mention bundler. If you don't use the twiddle wacka or other "range" dependencies at all and always fix to a specific version, you can't use `bundle update` and have a big pain every time you want to upgrade a gem, without letting bundler calculate what else may need to be updated to meet the requirements of the upgraded gem (or be happy with the upgraded gem). You end up playing a multi-turn game of "Okay, _now_ is my dependency tree sound, bundler?" For most of your dependencies, that are probably relatively small, simple gems unlikely to break, I think it makes sense to use twiddle wacka or other range dependencies. For especially large, complex, likely to break gems, especially when they are known not to follow semver, then it often makes sense to fix to specific versions. I usually do with Rails -- although you're probably safe fixing to 'approximate' on patch level even with Rails, Rails these days is pretty good at not breaking backwards compat on patch level updates (although they do on minor version level updates, it's not semver). Also good to remember that just because your gem file allows an upgrade, doesn't mean you actually have to upgrade it. Keep your Gemfile.lock in your repo. You can run `bundle update specific_gem_name` to update only that gem and any dependencies neccesary to meet the update of that gem without upgrading any unrelated gems -- except if you've locked all gems to specific versions, it's likely to fail because it requires upgraded second-order dependencies locked in your gemfile! I only run `bundle update` (without a gem name argument, updating all gems) in a well-tested-covered project, to see if it works, and if not roll back to Gemfile.lock in the repo and update only what you need to. And also of course, if you are writing a gem, you _better_ use twiddle-wacka or other range specs (`&gt;` and `&lt;`) in the gemspec, having your gem require only specific versions of it's own dependencies is just asking for an impossible-to-fulfill dependency spec tree, when you combine it with other gems. 
nope. I don't understand the use case. But I admit I don't understand the bulk of those examples. 
Awesome. Faster Ruby gets my upvote every time
[Pedantic side-discussion] What's the correct way to talk about an increase in speed? Is it starting up 2.2x faster? Or is it starting in a little less than half the time? I tend to use the change in duration (i.e double the time, half the time) but I've seen other people use phrases like "4x slower" and like in OP "2.2x faster", so I'm curious about what the right way to convey this is
I use emacs for all of my programming, not just ruby.
Try rubymine.
If you need an IDE and can't just use vim, use RubyMine. 