These guys have tongue so firmly in cheek they're at risk of perforating. Right?
By the way, this looks like as good of a place as any to pimp one joke gem I slapped together: [seamless](https://github.com/michaeledgar/seamless/) (The name endless was taken and I was slightly drunk). It's 1.8.x only, sadly.
Yes, I can confirm that. I watched the talk at RubyKaigi.
does it have the same limitations python does, re multi-line lambdas?
hey pls, it's "a couple OF nested loops". Why is it that americans are really starting to leave out the 'of' in sentences like that?
Probably at some edge cases. But there's no reason why a block wouldn't work: def foo(x) x.each do |y| puts y That block self-closes just fine, because as soon as the indentation drops, the block closes, then so does the method.
I might start looking into the issue, but it won't be before mid-August. We have a rather large launch coming up before then, but I would like to see a more simplified version of a 'dev-boost' gem available.
hmm so why was it that multi-line lambdas didnt work in python again?
Well they're explicitly disallowed. They don't want them. Plus, since Python requires parens around function calls (the most likely place for a lambda), you have to resolve this issue: foo(lambda x: x * x) # does the close paren go here? Weird... ) # or here? That's weird too. Seamless will have the exact same issue: foo(proc do |x| x * x) # doesn't work, no end ) # actually, this might work... but who wants that? Since Ruby makes blocks different from a normal argument, you typically don't have to worry about parens wrapping a lambda.
Noob, here. General Unicorn question: How would you optimize the best number of worker_processes once you have an app deployed and gathering data/traffic for a while?
without gathering data, i'd imagine you should have one or max of two worker processes per core. max two because in various benchmarks I've seen hyperthreading etc. can sometimes allow you to get away with twice as many processes as cores before you start hitting process management overhead. you could always run ab with different settings and see.
Yes. We did some basic ab stuff and found that 1 worker/core is about right. HTH. :)
have you guys investigated using foreman/upstart for process management rather than bluepill? i invested a bit of time in learning bluepill right before becoming aware of foreman and now I'm pretty certain I'm throwing the bluepill spike out.
You can also read more about this topic in this responses: http://mlomnicki.com/programming/ruby/2011/07/20/class-vs-instance-methods.html http://andrzejonsoftware.blogspot.com/2011/07/yes-nick-class-methods-are-evil.html
boring. More "bloggers" writing crap (who the hell are these guys? what major projects have they written? nothing, they're just "bloggers" who love the sound of their own voice) .
Why should we shun perfectly good features of Ruby, just because they can be abused or currently unfashionable? Class methods are perfectly fine for defining top-level API methods.
The way this guy bolds a phrase in every other sentence is really annoying.
You can keep states in classes if you want. That's what @@variables are for. 
Sure, but you introduce global state then. Read about hidden globals [here](http://c2.com/cgi/wiki?GlobalVariablesAreBad)
It's not really a global state, it's a class state. Global state is when you this. SOME_CONSTANT={} 
How is that different from globals? You are just namespacing them.
what? you can keep state in classes using `@variables` too; in fact `@variables` are better as they dont inherit to subclasses and instances and instances of subclasses, ad infinitum. class Hello @class_state = 10 end
Constant is not a global state. State changes and constant doesn't right? What you call a class state is really a global state but only hidden behind a certain class.
&gt;Constant is not a global state. State changes and constant doesn't right? If we are going to be sticklers about it you can change constants in ruby. It gives you a warning but it lets you do it. Anyway back to the point. Because you have a hash as a global variable you can keep all kinds of stuff in there to maintain state. Here is the thing though. In ruby classes are constants too. So in a very real way you are supposed to be keeping global state by the use of constants. Weird but then again it's ruby.
To be clear classes are not necessarily constants. f = Class.new(Fixnum) In that case *f* is a class which inherits from Fixnum but it isn't a constant. Anyway I agree that usually classes are accessed like constants. Global state also sucks in terms of testing. To give a quick imaginary example: it "should not raise when ORM is not specified" do Rails.orm = nil some_object.should something end This is a sign of global state. Consecutive tests are affected by that one as a global change has been made. We'd have to revert it after each test. There is not such problem without a global state.
The argument against class methods is the same argument against singletons since the class instance is a singleton. the only advantage of breaking class methods out in to a builder/factory class other than naming would be to be able to work with multiple instances. I haven't run in to too many cases where I needed to refactor because of this In many cases I think this would just create unnecessary complexity-- especially when working in non-gem type apps
If you're very careful about leaky abstractions, you're 100% right. 
Class methods are instance methods too! They just happened to be defined on the instance of a class. &lt;/trollface&gt;
Why was this downvoted? Plenty of libraries use class-variables or instance-variables at the Class/Module level to keep Class/Module state. Class/Module methods are there for top-level purposes.
Correct, top-level Class/Module methods should be important and act as gateways to new instances or store important configuration. Also you can control the binding of these methods: def self.foo(...) end def Explicit.foo(...) end 
Why the &lt;/&gt;? It's an important consideration to keep in mind when programming with Ruby.
You can find this patch in the [ruby-patches github repository](https://github.com/michaeledgar/ruby-patches) as well, which provides instructions for using the patches with RVM (and has some other fun/interesting patches for 1.9 and JRuby)
There are lots of languages that don't allow global state. There are languages that don't let you change variables (everything is a constant). We use ruby because like the way it works and I don't understand all this hang wringing about global state, monkeypatching and all the other features of ruby. To us these are features not bugs to be avoided or worked around.
I think you just answered your own question. :)
Before I spend the next few hours watching these presentations could somebody tell me which of them are on par with or better than plone, drupal, joomla, wordpress, zotonic, alfresco, dotcms etc. Thanks.
I'm working on a Java project these days, one made worse by using XML/XSLT as a templating engine. So... enterprisey... So... horrible! :(
Hah! I'm in the same boat w/r/t the templating situation. You have my deepest sympathies.
I'll just be glad people stop trying to tell everyone else what they should like or not like. 
Java's a miserable language, completely aside from how poorly it stacks up against Ruby. . . . and, in answer to the guy who asked about PHP in the comments on that page: PHP is in many ways worse than Java.
Same here. Our application of it isn't that bad, but it's kind of weird to work with.
I put mine on GitHub first :) Beat them to it!
Nobody cares about your source code. Nobody. Ever. For fuck's sake, Windows source code leaked at least twice, and was widely disseminated on torrent sites, and how little that mattered? Why do you think anybody even wants to "steal" your crappy app's source code? Stealing passwords, sure, but why the fuck would they make any effort to get your source code?
In alternative universe where Ruby uses `#new` for casting, you could use `[1,2,3].map(&amp;String)` instead of `[1,2,3].map(&amp;:to_s)`. There's even certain elegance to it. irb&gt; String.new(2) TypeError: can't convert Fixnum into String In this universe however `#new` doesn't cast, so the idea is outright horrible.
You know, you could be polite. 
But does it fix `rm -rf *~` to `rm -rf *`if you have no backup files in your home directory? I can see a lot of potential problems here.
GPL!
i didn't really interpret it as impolite, just blunt and venting.
because: source code = original ideas = money
And a single case in the entire history of computing where someone "stole" source code for some website and this resulted in some actual financial gain is? You'd have extreme trouble naming even one. Nobody gives a shit ever. This is a true fact.
Your sort of right, when companies admit to a breach, they focus on the data that was stolen. Database dumps, passwords (even if hashed), email-addresses, internal emails, etc are far more useful than the Source Code. It depends on the application. No one cares about your twitter clone, but if your implementing proprietary-algorithms for the Bio-Informatics Company you work for, I could see how Competitive Intelligence folks might be interested...
I think your asking the wrong question, but have the right concerns. Instead, you should try some [Threat Modeling](http://en.wikipedia.org/wiki/Threat_model) exercises, to list your potential Threats that you wish to defend against, and your Weak Points that you must secure. Typically, it's easier for an attacker to * compromise a developer * compromise the SCM server * steal ssh-keys from a developer * bruteforce the password to a developer's GitHub account Even if you compile/obfuscate the source-code, it still has to run on the production server, and a determined attacker will eventually reverse-engineer the source.
You can obfuscate your code. Use Jruby and compile your ruby scripts to java class files (warbler does this for you). Although it's possible to de-compile back to a java source files, the result will [not be easily readable](http://www.mailsend-online.com/blog/jruby-as-a-java-obfuscation-utility.html). Also found this [product](http://rubyencoder.com) (don't know if it's worth the money though).
And what would they do with all that source code? Without people who understand it, infrastructure to support it, data to feed it, and the entire process in which it's embedded it's just worthless. Not that you'd want to risk your company on hacked technology. The fact you're using it could leak really easily. By the way, most of bioinformatics source code in use is open source, done by universities for public money in the open etc. All interesting algorithms get published, as does pretty much all interesting data like 3d structures, genetic sequences etc. If there are any interesting spying targets, source code is very low on the list.
Here's a true story: Once upon a time there was an obscure freeware game. Engine was compiled, but a lot of the code was done in lua. To protect that lua code from viewing, it was precompiled, encrypted, and that encrypted vm code was then inserted into the executable. Modders hacked all that, disassembled lua vm code, manually converted it to lua source (there's no reliable decompiler), and used that to write mods. Now if people can go to all that effort for the lulz, imagine how little it matters to a determined attacker that you compile java source code. The only reason source code for almost everything is safe is because nobody cares. Once people start caring, you lost.
These things do not mutually exclude each other! Being blunt and rude is a form of impoliteness. 
Many great things have come from Java, and the author is correct with regards to childish comments. However, there is a tremendous amount of bullshit involved when working with Java simply due to the nature of the language. I will pick Ruby over Java any day if it's my choice, unless there is a real technical need for something in Java, which will require me to use JRuby :)
Good point (valid for security in general), but I'd like to add that people only care that much (are willing to invest a certain amount of time/money). Obfuscation is usually an additional step in the build process (meaning simple/cheap) and places a simple hurdle (time/money) in the path of anyone wanting to poke around at the source code. Of course if at least one person is willing to invest time to see your code, bigger/better/more hurdles are needed.
The biggest problem with java are the people. People who don't know how to model properly, use patterns properly and not use patterns properly. E.g. The visitor pattern. It'll beat the pants off of if/elseif/elseif/else instanceof Foo for a few quick reasons. You decouple the logic with in your if/elseif/else blocks into separate methods. Those methods are very testable in their own right. Should you have had a 50 line if/else block, it can widdle down quickly using this pattern. Then you see people over-pattern-ising. You get reuse where there will never be reuse, such as in the case above. Though in the case above, reuse isn't the point. In other cases, you'll see factories producing factories. Gigantic wads of code that are so loosely coupled, there is no cohesion, and no pragmatism. In the case of XML, you get people writing tonnes of code traversing it instead of using XPath. You have people using XSLT for generating CSVs from XML instead of turning XML into other XML, which is a better purpose. It's where you wind up with 75 line stack traces. Any language can be made beautiful if the writer understands that their audience will never be just themselves. It'll be some guy who has to unwind the entire mess.
&gt; bruteforce the password to a developer's GitHub account While I see it's number four on your list, online password cracking is pretty difficult to pull off with even a mildly complex password (8 random ASCII characters is intensely secure from straight bruteforce).
You hire lawyers to protect your source code.
**RBI** -------- LOL
Oops, and I'm not even doing fantasy baseball this year.
♥=♥
ಠ.ಠ ಠ…ಠ ಠoಠ 
upvote for sinatra love! ●π●
 -,- Sleepy kitty.
|ಠ| &lt;---Plankton!
Indeed, except not everyone has good password policies, and uses combinations of simple words or even uses the same password across multiple sites.
Just realizing that my Debian distro has close to zero cool characters installed. 
Like the idea! Care to share some code or explain how you approached this project? :)
ಠ∴ಠ *"Luke I am your father"*
öΩö
⥁-⥁ ... my fav
Been there, had to figure that out a few weeks ago (I'm running arch though.)
®㈠® It's a trap!
A guess.. - boxnumber.times do %box -eye = eyesArray.sample -nose = noseArray.sample =eye + nose + eye
ya, what he said
ಠ¿ಠ
 emoArray = [] @chars = File.readlines("possible_chars.txt") x = [x,max_emos()].min x.times { |ch| outter = rnd_char() inner = rnd_char() while @chars.size &gt; 1 &amp;&amp; outter.eql?(inner) inner = rnd_char() end emoArray &lt;&lt; "#{html_escape(outter+inner+outter)}" } emoArray 
The hardest part is copying to the clipboard. An invisible flash object follows the mouse and handles that.
Thanks for sharing. BTW, emoArray is an excellent variable name. Poor array needs to harden the fuck up.
ಠ„ಠ &lt;- Disapprowl.
Comments from Anonymous at the blog are very interesting!
Sweet app. I love trying out little stuff in sinatra. It's fun.
¬|¬
the code is now up on https://github.com/jeremywen/emo
https://github.com/jeremywen/emo
Don't worry about people stealing an idea. If it's original, you will have to ram it down their throats. -- Howard H. Aiken
Hate to be a stickler, but this belongs in [/r/rails](http://reddit.com/r/rails).
Why do people choose names that would be impossible to Google for reliably?
Not to mention I will never remember this name, nor what it does. :(
o stands for option.
why dont i? because i dont want to. Bitch.
This looks very useful, so much so that I strongly suggest changing the name to something more human-referable. A suggestion would be *guten-option*, *GutenOption*.
related: http://configatron.mackframework.com/
Beat me to it. Anything having to do with programming with ungoogable names are DOA. Looks like the author is the OP. 
Agreed. If the author wants the name to be easy to type when used, it's just a matter of suggesting user to type. O = AweSomeOptionLibrary On the first line.
that's a pretty kick ass suggestion
I really wish people would break away from the dot files trend, and that there were a standard dictionary for UNIXy configurations (`~/etc`?). Them being invisible also makes it a hassle to back-up.
it's possible you'll just want [the handout](https://docs.google.com/document/d/16GAjYlGOhyD-mwtIZSRb75WywwUUCWyCxzBb_QLjsg4/edit?hl=en_US) 
`~/.local/` is used on modern *nix systems.
But in the end, it's each application that decides right? bash, vim, git, ssh... I'm sure there are environment variables for many of them though.
Found this. Thought I'd share. ^.^
~/.local and ~/.config are specified by the [xdg basedir spec](http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html). However, it's not enforced, and applications can put their config files wherever they please. 
&gt; Use ASCII (or UTF-8, if you have to). &amp;#3232;\_&amp;#3232; I say - **always use UTF-8** and just use # encoding: utf-8 as first line.
Why isn't this the default assumption?
Why don't they like "then" ?
so, any good names to suggest?
thanks for the name. I'm agree with the more human-referable name.
Awesome, you're most welcome. I can't wait to experiment with this.
why hate on hashes-as-optional-parameters? active_support's extract_options! make's method calls beautiful. Otherwise I liked it.
I'm now going to use SCREAMING_SNAKE_CASE whenever possible to describe it. I got an awesome mental image from it.
belongs_to [/r/raills](http://reddit.com/r/rails)
~~Use utf-8 when you need it. Otherwise, don't.~~ Edit: I think the style guide is trying to say that you should use UTF8 when you need it. Otherwise use ASCII. I don't think it's really giving preference to ASCII over UTF8.
See also: [http://www.caliban.org/ruby/rubyguide.shtml#style](http://www.caliban.org/ruby/rubyguide.shtml#style)
One thing I don't like about ruby not having language support for named parameter is that I can't see available options from method signature. hashes-as-optional-parameter is okay to use when it's well documented public API.
-1
I personally disagree with the "Write for 1.8" statement. And why would you gist it when the original is there and has been there for over a year? Besides, it's from the author of Rack, so I don't see this going anywhere any time soon. [Original](https://github.com/chneukirchen/styleguide/blob/master/RUBY-STYLE)
I put a link to the original source in the gist. Not trying to take credit for anything.
Yep, you did, but the question was why you would do that when the original is still around :)
I gisted it to show others on my team then decided to post on reddit. Easier than giving them a git repo.
&gt; Use RDoc and its conventions for API documentation. Don't put an &gt; empty line between the comment block and the def. I sort of like heaving an empty comment-line between the docu and the method signature. &gt; Use &amp;&amp;/|| for boolean expressions, and/or for control flow. (Rule &gt; of thumb: If you have to use outer parentheses, you are using the &gt; wrong operators.) Always found it goofy how some developers overuse `and` / `or` for booleans. &gt; The length of an identifier determines its scope. Use one-letter &gt; variables for short block/method parameters, according to this &gt; scheme: Please no. Avoid single-letter variables at all cost, they confuse/anger code auditors. Use 1-2 words or 3-4 letter abbreviation: `path`, `orig_path`, `dir`, `delim`. ## My own 2c: * Use parenthesis when doing assignment within conditions: if (result = some_method(...)) * When adding methods to `Kernel`, `Object`, `Array`, etc, define them in appropriately named modules, and `include` or `extend` them in. * ~~Almost, never, _ever_, use `inject`.~~ (OK, maybe it's not that bad, but make sure your not creating lots of one-time Objects as `#inject` iterates.) * Do not fear in-place modifying methods, such as `select!`, `reject!`, `map!`, `uniq!` or `merge!`. * Use simple String methods instead of (ab)using Regexps. [String#chomp](http://rubydoc.info/stdlib/core/1.9.2/String#chomp-instance_method), [String#chop](http://rubydoc.info/stdlib/core/1.9.2/String#chop-instance_method), [String#tr](http://rubydoc.info/stdlib/core/1.9.2/String#tr-instance_method), [String#delete](http://rubydoc.info/stdlib/core/1.9.2/String#delete-instance_method), [String#start_with?](http://rubydoc.info/stdlib/core/1.9.2/String#start_with%3F-instance_method), [String#end_with?](http://rubydoc.info/stdlib/core/1.9.2/String#end_with%3F-instance_method). * Call [String#split](http://rubydoc.info/stdlib/core/1.9.2/String#split-instance_method) with a limit argument. * Use `Set[1, 2]` more often. * Use `%w[foo bar]` more often. * When using lambdas/procs as functions, call them using `#[]`. Ex: `y = translate[x]`. * `$stderr.puts` instead of `STDERR.puts`. * dump/inspect data used in Exception messages: raise(FooBar,"someone set us up the bomb: #{data.dump}") * Treat user-input like **poison**.
Tabs FTW
Å for en jævla klønete ting å si. - that's what I think. Internationalization FTW. There is no valid reason to use anything else than UTF-8 as a default.
Couldn't agree more. Can't count the number of times I've had to `gem open gem` to read how they use their own options hash. 
&gt;Almost, never, ever, use inject. Why? `inject` is friggin awesome. Right up there with `tap`.
+1
Overall, it's got some good ideas in it, but style guides like these strike me as mostly useless. If you're not going to explain why a rule exists, then you're just creating noise and implying that other developers should memorize this laundry list of rules. What's worse is, even if an inexperienced developer did memorize them, without knowing the *why*, it would do nothing toward improving their skill. And yes, I mean every trivial bullet point should be explained. Example: &gt;* Use 2 space indent, no tabs. Try adding: &gt;*This is important for collaborative code writing, such as open-source development. When different indent-spacing is used among developers on a single code-base, it becomes difficult to align method bodies and maintain coherent context.* And if you can't give a good reason (i.e. the explanation is "that's just the way it is), then it's not a rule, it's personal preference, and you should leave it off the list. For example: &gt; * Prefer map over collect, find over detect, find_all over select, size over length. Why? I prefer `collect` over `map`, because it more accurately describes what the method is doing most of the time. Like, if I do `@objects.collect(&amp;:name)`, I am "collecting" the name attribute from the collection of objects. I also happen to prefer `detect` over `find`, because "find" is just too ambiguous. For one, I can't ever remember if `find` finds a single element or all of them (hint: `find_all` is the one that finds all of them, but I usually have to look it up). Secondly, I work with Rails a lot, and you may have heard of ActiveRecord's own `find` method. Ugh, no thanks, I'll stick with `detect` when working with Enumerables. Am I saying that they are wrong in their preferences? No. Their preference is just as valid as mine. Which means, it's not a rule. So take it off the list and let other developers decide for themselves.
I disagree with using #[] to call lambdas and procs in general. By using .call (and using respond_to? :call if calling conditionally) you can use any object which responds to call instead of just a lambda or a proc. Rack applications follow this guideline and I think it's clear why that's beneficial. 
I totally agree, for when you are receiving the lambda/proc in question. If you are defining it explicitly within your own code, use `#[]`; it allows you exchange Arrays/Hashes with lambdas.
&gt; Like, if I do @objects.collect(&amp;:name), I am "collecting" the name attribute from the collection of objects. Actually, you're mapping the function which calls "name" onto the collection of objects. "collect" is no "more accurate" than "map" unless you're unfamiliar with what "map" means. While I understand having a friendly english word for a computer science term is likely nice for some, `map` has a long, long history of doing exactly what it does in ruby.
Hmm, I take that back. It's not that `Enumerable#inject` is bad, it's the usage of it. Typically developers will use some non-in-place operation, which results in a new Object for each iteration of `inject`.
[Tabs, in Ruby?](http://www.youtube.com/watch?feature=player_detailpage&amp;v=mwu6JM0l6vQ#t=61s)
&gt;"collect" is no "more accurate" than "map" unless you're unfamiliar with what "map" means. Exactly my point! While `collect` makes more sense to me, `map` makes more sense to you. This is personal preference, not a rule or guideline. EDIT: Also, to be more clear, the reason `collect` makes more sense to me is because it's more expressive in that it describes the outcome. In other words, `collect` describes my intention better. I'm trying to "collect" the name of the objects, by "mapping" the `name` method onto the collection of objects. Notice how one word describes the result and the other describes the way in which it obtains that result. It's like the difference between calling a method `@objects.active` or `@objects.find_active`; it all comes down to context and personal preference.
The canonical URL for this is: https://github.com/chneukirchen/styleguide/blob/master/ (probably more updated)
It is only useful for one liners if then else. But you'll generally use the ternary ?: to express that (or even *'cond and expr1 or expr2'*, but it's rarely more relevant than the alternatives).
It's alright, just use reduce.
Because people [don't see emails/messages/errors like these](http://skitch.com/plugawy/sets/bxb/hall-of-unicode-shame) if their primary language is English.
What about visibility? We're having arguments at work all the time wether to put private one indentation level up or not, like this: class Foo def bar end private def baz end end or class Foo def bar end private def baz end end Also I've seen that some people write lots of empty lines, like this: module Foo class Bar def bar end end end I have no idea why but it looks stupid to me.
Many posts here do.
I've always referred to it as ANGRY snake case but screaming is awesome too :-)
It may not be a rule, unless a company or a development team make it one. Then it is a rule. And it is a guideline, simply because it is on a style guide list. You may or may not obey it - if your personal preference is otherwise and you don't have a pressing reason to follow it, you are free to ignore it. This is what guidelines are. However, style guidelines all have one purpose in common: readability by other people. If you cooperate with someone and they use a different style, it can seriously damage the code readability, to the point that a significant time is spent on either understanding code, or on rewrites (hated by both the rewriter and the original coder, although for different reasons). For example: def print_row row, cols cols.times do |col| print (row + 1) * (col + 1) print "\t" end end def multiTable(x) x.times(){|r|print_row(r,x); puts();} end I admit to exaggerating a bit, but I would hate working on this project. Actually, [This guy](http://blogstrapping.com/?page=2011.197.13.23.05) says it much better than I can - with a real-world example that is not much less ridiculous than what I wrote above. The point is, the moment you start sharing code, it stops being "just a personal preference", and turns into "personal quirk" that is to a greater or lesser degree annoying to anyone else reading your code.
`private` is just a method call, like any other. And your first whitespace is muuuch better than your second.
 Thank you :)
If they're talking about 'fixing' ruby's http api, we should probably turn to other implementations in ruby or in other languages as examples. 
As I'm AD naive... would it be possible to write an intranet Rails app, using Adauth, which would: (1) transparently sign-on the active domain user (not asking for their credentials, again)? and (2) provide their domain username to the application?
I agree. Thank you!
If anything, I would say "write for 1.9" Unless you're writing a Rails plugin to support Rails 2.3 or such... I guess if the guide is a year old or more, it's understandable
I agree with everything you say concerning style guidelines. However, "Prefer map over collect, find over detect, find_all over select, size over length," still doesn't belong in any such guideline. Any developer who has been working with ruby for at least a couple years will know they're synonyms and not bat an eyelash. Any developer who doesn't know that, will look take 5 seconds to look it up and then know it from then on. And that is just part of learning a new language. If the argument is that I shouldn't use `collect` because it makes some new developer look up the method, then that's obviously ridiculous. &gt;The point is, the moment you start sharing code, it stops being "just a personal preference", and turns into "personal quirk" that is to a greater or lesser degree annoying to anyone else reading your code. Things like differences in indent-spacing are annoying, for the reason I described in my original comment. Notice how there's actual reasoning that leads to that conclusion. So, why would something this trivial annoy anyone? And again, if the reason is, "it just does," then it doesn't belong on the list.
Net::HTTP's API would be unchanged. As I wrote in the proposal, it is single-connection-oriented and has lots of baggage that exposes extra implementation detail. Introducing a separate class allows it to handle multiple connections and hide the implementation details. At this point the question is "should it be in the standard library?" not "should the API look like X?"
May be because I know `map` before but I prefer `map` in this case because it emphasize 1-to-1 mapping. `collect` feels to me like it also has ability to drop some item, or it feels more like `folding`.
&gt; Multiline {...} is fine: having different statement endings (} for blocks, end for if/while/...) makes it easier to see what ends where. Disagreed. Every control block ending with `end` makes everything uniform. Ruby block has `do...end` syntax to make user define control flow as first class as built-in control flow, don't make it different.
Ah yeah, I can see that.
As I said, it's a list of guidelines. They are not hard and fast rules for all Rubyists, they are the rules particular to that project, or development environment. The only conceivable purpose of that rule is team cohesion - thus, obviously, someone would be bothered if there were two different names used for the same function. I wouldn't be, but there's obviously someone who would, otherwise that rule would not be there. Thus I don't think any further explanation is necessary, except in serious cases when a style guideline prevents an error (such as "do not use single statements when a block can be used" in C-style languages, i.e. prefer "if (x) { y(); }" to "if (x) y();"), when an explanation is necessary to point out the pitfall ("if you add another statement in 'if', indentation might suggest both are conditional, when in fact only the first one is").
In every other language, it's called `map`. I really hate that the ruby language designers decided to name common functions something completely different. Another one is `select` - it should be called `filter`, following suit with every other language.
-12
Which is an alias to `#inject`, although a much better method name.
I use the second example of indenting `private`, since it's called _within_ the Class/Module. This is also the default indentation behavior of `vim`. Somewhere along the line, I picked up not adding space after `module` declarations: module Foo module Bar class Bazz # ... protected def foo end end end end
i think my prostate is spasming, and it hurts. Hvae you experienced this before, can you offer any advice?
which post?
you made a self-post brah
That was the joke :)
constructable looks pretty nice but this line in the readme means I won't use it. &gt;The constructable macro also works for modules(not for themself, but for the classes, you include them) but it will define the 'included' hook. So if you want to use the 'included' hook yourself, you either need to around alias it or to use another gem. 
constructable looks pretty nice but this line in the readme means I won't use it. &gt;The constructable macro also works for modules(not for themself, but for the classes, you include them) but it will define the 'included' hook. So if you want to use the 'included' hook yourself, you either need to around alias it or to use another gem. 
use RUBYOPT="-Ku" for a global setting.
Which is technically the correct usage of #inject since #inject is really the reduce operation of map-reduce which derives from functional programming which really should be using immutable objects. To be honest, it's just a matter of preference, but so you know, the people you criticize are technically doing it correctly.
Updated that point to not be so black/white.
This technique is a little guess-and-check. Could one collect diagnostics from a running application using [valgrind](http://valgrind.org/), DTrace or [SystemTap](http://sourceware.org/systemtap/)? Still, awesome job hunting down a C-extension memory-leak.
where is "The post"?!
AOL - Awesome Option Library
Watching process memory usage may be primitive, but in the end it leaves no doubt whether or not you have a memory leak in the scope covered by the extension's unit tests.
"Stop Hating Java" was written to Ruby devs. This guy, igor, wrote a response that got one user on DZone pretty pissed. The link goes to a DZone link page where the comments are further down the page.
There's no comments on that page.
Raising an exception is fine if rb_ensure is used to free the appropriate structure.
?? I'm missing the troll... all of the comments on the article's page are pretty constructive.
Absolutely, and in this case I think rb_ensure would work just as well. Just beware when you raise an exception from a callback and the C library doesn't expect it -- you are leaving everything in an unknown state.
We don't care.
Works as long as you tie your rb_ensure method to the implementation of the C library. For example, there is nothing to prevent this from happening: C library, version 1 void function () { allocate a; invoke callback; deallocate a; } C library, version 2 void function() { allocate a; allocate b; invoke callback; deallocate b; deallocate a; } 
That post says very little about finding and fixing memory leaks in Ruby C extensions. It's just guesswork.
Guesswork can still lead to finding the error.
"Take wild guesses" is hardly a terribly useful advice. It's more of a last measure when all better advice failed.
no worries!
This is not unique to rb_ensure. Many C methods of handling errors non-locally have the same problem.
upvote for the shiggles, but actually a terrible name for obvious reasons.
I see you've renamed to 'optimism', a much much better choice :) Obviously will take a while to rename all the files, classes/modules etc, when you get around to doing these, can I recommend you rename the directories used to ~/.optimismrc etc. I'm also confused as to the naming convention for the system level config files 'APP/lib/guten/rc.rb' If this installs into the system (which should be configurable and default to either /etc/ or even better /usr/local) wouldn't /usr/local/optimism/config.rb (or rc.rb) be a a better choice?
This is a weird edge case, which is why I think the koan makes a point of showing it to you. Take a look at the documentation for `Array#slice`. This is mentioned as a "special case": a = [ "a", "b", "c", "d", "e" ] a[2] + a[0] + a[1] #=&gt; "cab" a[6] #=&gt; nil a[1, 2] #=&gt; [ "b", "c" ] a[1..3] #=&gt; [ "b", "c", "d" ] a[4..7] #=&gt; [ "e" ] a[6..10] #=&gt; nil a[-3, 3] #=&gt; [ "c", "d", "e" ] # special cases a[5] #=&gt; nil a[5, 1] #=&gt; [] a[5..10] #=&gt; [] If the start is *exactly* one item beyond the end of the array, then it will return `[]`, an empty array. If the start is beyond that, `nil`. It's documented (and seems pretty clearly intentional), though I don't know what the rationale is. See http://ruby-doc.org/ruby-1.9/classes/Array.html#M000738
[There's an interesting discussion of this very question over on StackOverflow.](http://stackoverflow.com/questions/3568222/array-slicing-in-ruby-looking-for-explanation-for-illogical-behaviour-taken-fro)
I hope you meant "Detective Work". :) It's always better to solve problems by testing hunches and narrowing down possibilities, than frantically commenting out blocks of code at 1am hoping to find the offending line.
It needs a lot of work, but I think it's at a place where it can be genuinely useful. Would love any comments on it, or help with it :)
This isn't a wild guess. It's a binary search through the problem space.
Tomato, tomahto.
Syslog is your friend. That's pretty much all I have to say. Syslog is proven, it is robust, it is universally supported, it is ubiquitous, it has a massive ecosystem of products to slice, dice, alert, ship, filter and consolidate your entries. Syslog is not perfect of course but neither is this project which you admit needs a lot of work. Rails (BTW this belongs in /r/rails and not here) should embrace syslog IMHO. 
I'm very interested in helping out. Great project by the way!
Thank you - I've looked at syslog and I agree with your sentiment. However, at the place I work (an "enterprise" company), it would probably be more cumbersome to use than this project. If that sounds sad, that's because it is. Also, I put it here because the Whoops logger can be used in any ruby project. The rails engine is just one part.
&gt;However, at the place I work (an "enterprise" company), it would probably be more cumbersome to use than this project. That seems unusual because most "enterprise" companies usually insist on syslog because they have invested money in various syslog consolidation and reporting tools. 
I thought it was unusual, too.
Awesome! The next items on the todo list are "finish email notification of events" and "graphing". I can provide you with details on either, or if there's something else you'd like to do that'd be great too. My email address is at the top of the site if you want to shoot me an email, or you can send a message through github Thanks!
Looks very promising, great work!
Can several hundred *nix hosts syslog to it? If so does it have something (pretty much exactly) like tenshi built into it?
You should write a tool which automates this process of running the fine-grained test-suite, watches memory consumption, then individually omit lines in each unit-test, in order to narrow down the exact function which is not freeing the memory.
Discussion continues in the [GitHub pull request](https://github.com/tenderlove/nokogiri/pull/498).
I would add Errbit (https://github.com/jdpace/errbit) is a good alternative to Airbrake/Hoptoad. It's also open source.
That'd be pretty sweet.
Thanks, I will add that
re: syslog - I have no idea, I haven't tried. I'm not using it with anything with that much load. re: tenshi - I don't know what tenshi is :(
1) By transparent sign on do you mean pickup on the user currently logged into the windows PC? so that when logged in at work users wouldn't have to type out their username and password again? 2) Adauth requires the domain username to authenticate users, and by default will save it into the db on login (if you use the generated code). It can pickup on details from Active Directory, like the Full Name parameter which each account has which I use to display "Joe Bloggs" instead of "j.bloggs"
(re: 1) Yes, exactly! When pitching a Rails solution for intranet projects, I've regularly hit the same hurtles... some person always pitches SharePoint because of the ability to "pickup on the user currently logged into the Windows PC." I was hoping that Adauth could assist this exact point. (re: 2) Full Name parameters would be amazing! If you could assist me with #1, I'd be an instant evangelist.
I‘ve renamed it to optimism.
see new README. it contains '/etc/foo' now. all these names/pathes are examples only, they aren't nameing convention. 
(re: 1) I don't believe its possible, rails and adauth run in the browser which means there isn't a direct link to the work station. I don't think a script that opens the page and posts to it would work either due to the password not being available in its plain text form. It maybe possible with Javascript to pickup the current username and do a search on that (User.find_by_login) but without the password adauth won't be able to pull across any data or update the data at a later stage. You also have the security risk of anyone being able to create a local user account of the.boss and having it pick that up and log you in. It's an idea and something thats definitely worth looking into but off the top of my head I can't think of anyway of implementing it. I've opened it as an ideas issue on github (issue #10) and will see what I can do. (re: 2) Full name is already there, after a successful authentication adauth returns Adauth::User which has a method of full_name which returns what ever the full name is set to in Active Directory. I'm looking at putting custom return data into 1.1.0 (see issue #9 on the github repo) so you can pull email etc... over swell.
Whoops must be absolutely great for sites hosted on heroku. Looking forward to seeing email notification in the future. ☺
...I just saw the open [github issue #10](https://github.com/Arcath/Adauth/issues/10). Thank you! You're giving the rest of us, hope! :) I have located a few resources which may assist in this particular concern. I'll post them on github.
Above all else, thank you for considering the concept!
I also like then to line up longer if conditions like that: if first_very_verbose_and_long_condition &amp;&amp; second_very_verbose_and_long_condition then puts "yeah" else puts "nope" end That way it's easier to see where the if condition ends and the then block begins.
Try this: ic = Iconv.new('ISO-8859-1', 'UTF-8') feed.description = ic.iconv(feed.description) from: http://snippets.aktagon.com/snippets/158-Parsing-feeds-with-Ruby-and-the-FeedTools-gem
I'm installing feedtools right now, but I thought I'd share this while that chugs away. When I'm testing new or problematic bits of code or gems I like to use IRB...its instant response is like using an interactive debugger on code that you're writing as you go. You should be able to start it with the 'irb' command.
Interestingly enough, IRB threw a similar stacktrace when I included the gem: robacarp$ irb ruby-1.9.2-p180 :001 &gt; require 'feed_tools' SyntaxError: /Users/robacarp/.rvm/gems/ruby-1.9.2-p180/gems/feedtools-0.2.29/lib/feed_tools/helpers/uri_helper.rb:43: invalid multibyte char (US-ASCII) /Users/robacarp/.rvm/gems/ruby-1.9.2-p180/gems/feedtools-0.2.29/lib/feed_tools/helpers/uri_helper.rb:43: invalid multibyte char (US-ASCII) /Users/robacarp/.rvm/gems/ruby-1.9.2-p180/gems/feedtools-0.2.29/lib/feed_tools/helpers/uri_helper.rb:43: syntax error, unexpected $end, expecting ')' if IDN::Idna.toASCII('http://www.詹姆斯.com/') == ^ 
What's the problem with it? Need to know what you're expecting before a diagnosis can be given.
My initialize_code method will always return false, so the record will never create. It doesn't add any errors or return valid? == false, so it was a hard mistake to track down. 
&gt; so it was a hard mistake to track down So you've fixed it? If not, remember that ruby will return the last line of a method, in your case "self.accepted_code = false". Add a "return true" or a simple "true" on the last line of your method to force it to return true.
I ran into this same thing a few months ago. Was definitely a pain to debug.
Depending on how this code evolves i.e there is a possibility of returning true shouldn't the method name end in a ?
What happens? The before_create fails? It's because your last line assign false to something, forcing the function to return false, causing the before_create to fail. Add "true" at the end.
Making this a predicate doesn't make sense to me; you're not asking "is this initialized?" You're saying "Do this stuff when the object is created". From the looks of it, this method should always return true, and throw an exception if for some reason it fails.
It looks like IRB is trying to parse your string as ASCII, but those characters can't be shown in ASCII. Try starting IRB like this: irb -E UTF-8:UTF-8 Also, if you put this in a file, be sure to include the encoding hint at the top of the file: # encoding: utf-8 Finally, DON'T use that for in crap. Do this: feed.items.each {|item| puts item.title; puts item.link; puts item.content } For..in is not idiomatic Ruby. You'll find this style suggestion along with many other good ones here: https://gist.github.com/1105334 
Another thing to consider is just putting this into an initialize method. Then you don't have to worry about return value def initialize self.code = UUID.create_random.to_s if self.new_record? self.accepted_code = false end You could also use @organic's approach below and write it like this: def initialize self.code ||= UUID.create_random.to_s self.accepted_code = false end
Yeah, it's totally fixed. I was hoping others would learn from my mistake and not spend a whole afternoon tracking this down. 
Returning false from a callback by accident is a nasty bug. Unless I know I want the callback to every fail intentionally, I just put a 'true' on the last line of every callback method.
Yup; posting this to /r/ruby.
Just so you know, `self.accepted_code = false` returns `self.accepted_code` when it's done. `self.accepted_code` is false. Since it's the last line in your method, the method returns false. That's why you're seeing what you're seeing.
The top post in rubyonrails is a month old.
You should probably not override the initialize in an ActiveRecord model. Better to create a factory object and explicitly set all your defaults there.
How come nobody talks about Ramaze anymore?
Well.. it wouldn't be if you posted this here ;-) See also: [/r/rails](http://www.reddit.com/r/rails).
super? I'd be curious to see what your factories would look like, if you're willing to write them out.
&gt;super? I remember reading someplace that this was a bad idea too but to be honest I don't remember where. &gt;I'd be curious to see what your factories would look like, if you're willing to write them out. class SomeObjectService def create(params) obj = SomeObject.new obj.attr_1 ||= some_default. .... obj end def destroy(obj) #take care of all the relevant child objects, make any changes you need to the monitoring system etc. end def do_something_involving_multiple_objects(obj1, obj2) #read a file, put data in some objects, adjust dependent objects etc... end end You know... A business layer.
I'd go MacRuby, personally. Because of the Cocoa wrapper, you have OpenGL support, and it compiles which makes the program run faster.
"and it compiles with makes the program run faster." Actually it doesn't. The "application" contains your original Ruby source code, unaltered, and runs it just like any other Ruby VM. You can see this yourself, by right-clicking the application, choosing "show contents", and browsing around inside.
[ruby-processing](https://github.com/jashkenas/ruby-processing) might be helpful here... You can write your whole app in Ruby and still use the Processing library.
Well, I know google sketchup can be extended using ruby script, but I really never played with it.
Damn, I hate it when I'm mistaken.
hmm I thought that they had implemented code obfuscation and actual compilation.. I must be mistaken 
Just went through padrino's github page and noticed the benchmark repo. I ran the suite against the latest versions of the frameworks. Interesting results: http://pastie.org/2294509
Not a problem, I had always intend to expand Adauth's features after 1.0.0 and I had considered going down this route anyway.
I was just thinking about this the other day. Huzzah!
Dude wtf I was *just* thinking about creating this yesterday lol. Awesome :) Sinatra + a light MVC wrapper (Fedora) = awesome :D
yeah why dont you start a subreddit for `irb` next you piece of shit? 
yeah why dont you start a subreddit for `irb` next you piece of shit? 
I don't see the point - r/ruby only has a bit above 8k readers, and isn't exactly high traffic. If the volume of Sinatra posts to r/ruby ever get to the point where they'd become a nuisance for non-Sinatra users on r/ruby, perhaps I'd understand it. 
&gt; For..in is not idiomatic Ruby. If only `for..in` had been designed to have its own scope like `.each`, this might never have happened. Alas.
I believe the default is [http://localhost:3000/](http://localhost:3000/) after starting webbrick with "rails server". That said, you seem to have no idea of what you are doing, are you at least following some guide?
Yes, I am using this one: http://developer.apple.com/tools/developonrailsleopard.html however I get this error when I run "rails server": Installing sqlite3 (1.3.4) with native extensions /Library/Ruby/Site/1.8/rubygems/installer.rb:551:in `build_extensions': ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError) /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby extconf.rb mkmf.rb can't find header files for ruby at /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/ruby.h how can I fix it? I'm completely starting on Ruby that's why I seem so lost haha, because I kinda am x).
It looks like your Ruby installation is broken. Try reinstalling it.
I'm pretty sure those header files come with an Xcode install. Do you have Xcode? (Xcode is normally used for developing iPhone/iPad apps... you don't actually need to use it for ruby work, but you need to have it installed in order to build gems with native extensions).
I highly recommend going through this book. At least the first few chapters, and preferably the whole book. It's free. It's wonderful. It will get you up and running and building your first rails app. http://ruby.railstutorial.org/ruby-on-rails-tutorial-book
I downloaded Xcode for Snow Leopard a while ago, but now I updated to Lion and Xcode isn't working (I'm downloading now the new version that supports Lion). Maybe that will make it work?
I downloaded Xcode for Snow Leopard a while ago, but now I updated to Lion and Xcode isn't working (I'm downloading now the new version that supports Lion). Maybe that will make it work?
awesome! thanks :D
that's it, Xcode is no longer on the PATH environment variable, so the sqlite gem can't compile. reinstalling Xcode is the simplest solution - you can get Xcode 4.1 for free from the App Store.
thanks!
So close, yet so far: `_ಠ_`
Look for a guide to getting rails up on the Mac. You need to do special things on a Mac in order to get going.
This is timely for me, I will be starting work on a backend for the project I've been working on some time this week. Thanks!
I'd also recommend looking at using RVM. [Ruby Version Manager (RVM)](http://beginrescueend.com/) [Setting up RVM and Rails 3 on Snow Leopard](http://www.blog.bridgeutopiaweb.com/post/how-to-install-rvm-and-rails-3-on-snow-leopard/) edit: fixed rvm link
You could also set the accepted_code default to false in the database, then you would only have to worry about updating its status to true.
While you're at it, watching railscasts by Ryan Bates (link in the sidebar) is _brilliant_ lots of good little tidbits of various gems. Recently he's been doing a series on testing, which is _wildly_ useful for a new developer, I think.
While you're at it, watching railscasts by Ryan Bates (link in the sidebar) is _brilliant_ lots of good little tidbits of various gems. Recently he's been doing a series on testing, which is _wildly_ useful for a new developer, I think.
While you're at it, watching railscasts by Ryan Bates (link in the sidebar) is _brilliant_ lots of good little tidbits of various gems. Recently he's been doing a series on testing, which is _wildly_ useful for a new developer, I think.
takes like 5 minutes to learn, and is far superior.
Uses Ruby - Hooray! $19.95 price - Boo!
Swifty! 
A trial version will be on the website very soon. Give it a try and I think you'll find it's well worth the price.
So what I'd really like to do is have a command that would setup my ruby dev environment for a specified project. All my projects are kept in one directory and what I'd like to do is open 3 terminal tabs for a specified project name. One that runs a rails server, one that runs the rails console, and one that is just in the directory so I can run rake and what not. Additionally I want textmate to open and I'd like to possibly start postgresql and redis. Then I also want a command to close all that. Would this work?
*Hi-jacking this thread/comment:* This is the exact reason I wrote [Mynu](https://github.com/RobertLowe/mynu), it's a menu dsl for osx. Specifically, I use it in tandem with projects I'm actively working on to get into that "developer mode" and contain all my projects/links/dirs in one menu. These examples might help you: * [workflow](https://github.com/RobertLowe/mynu/blob/master/examples/workflow.rb) * [terminal tab (assumes you use visor / one window)](https://github.com/RobertLowe/mynu/blob/master/examples/terminal.rb) In my personal scriptlets I use more advanced hack-brew as such: require 'mynu' mynu = Mynu.new mynu.menu "App 1 Stuff" do |app1| app1.menu "Terminals" do |terminals| app1_working_directory = "cd ~/workspace/app1" terminals.item "Environment" do terminal = Mynu::Support::Terminal.new terminal.create_tab("#{app1_working_directory}; git pull;") terminal.create_tab("#{app1_working_directory}; ") terminal.create_tab("#{app1_working_directory}; bundle exec autotest") terminal.create_tab("#{app1_working_directory}; ps aux | grep '[m]ailcatcher' | awk '{ print $2 }' | xargs kill -9; mailcatcher") sleep 2; `open http://localhost:1080` `touch #{app1_working_directory}/tmp/restart.txt` `open http://app1.dev` end terminals.terminal "Working Directory", "#{app1_working_directory};", :focus =&gt; true terminals.terminal "Restart", "#{app1_working_directory}; touch tmp/restart.txt", :exit =&gt; true # shell commmand terminals.terminal "Autotest", "#{app1_working_directory}; bundle exec autotest" terminals.terminal "MailCatcher", "#{app1_working_directory}; ps aux | grep '[m]ailcatcher' | awk '{ print $2 }' | xargs kill -9; mailcatcher" do sleep 2; `open http://localhost:1080` end end end mynu.run I do this in the morning and everything is ready to go! (sorry for the hi-jack, look forward to the trial)
On a side note, the [foreman gem](http://michaelvanrooijen.com/articles/2011/06/08-managing-and-monitoring-your-ruby-application-with-foreman-and-upstart/) is awesome at having rails server, postgresql, and redis all startup with a single command for your app.
yo, tone it down on the screen cast editing!. I had to stop watching, the spinning was just driving me crazy.
Check out https://github.com/achiu/terminitor - I think this will do just what you want. 
You should be able to name those views .html.erb instead of .html.haml and use erb just fine.
Absolutely, pretty much anything you can do with your keyboard and mouse you can automate. The next major update (in the next few weeks, hopefully) will have recording and playback which will make stuff like this even easier. Hit me up if you need any help @kevincolyar
Great resource but already in the sidebar.
http://www.youtube.com/watch?v=7biXuhEGaDs
retro ftw!
You certainly don't hear much about MagLev anymore. Why is that?
I think its because its closed sourced, and they haven't really made any noise lately :/ i was excited about it when it first was released, but now it seams to have been surpassed by jruby and the likes
Page Style -&gt; No Style I think this is missing some important information, those funky characters you've put there without knowing what for are the ANSI escape sequences that alter the properties of the printed text when read by your terminal, you're making a mistake by hardcoding them into your prompt which makes it totally unreadable, use variables for that. more info: http://mywiki.wooledge.org/BashFAQ/037
Cool, stuff. Edgecase (the creator) is a local company that knows their stuff. I'd check it out from [their github](https://github.com/edgecase/ruby_koans).
a not that atypical thing in ruby land, alas. I love you ruby, but there are core assets that are unmaintained. Not as bad as it used to be, but still kind of bad. I think it's cause ruby community has less corporate backing than most similar stuff, which is part of what ends up leading to ruby's awesomeness as well, just part of the package. 
Christ crackers, how did they manage to make Rails' performance even worse?
I haven't used Ruby in about two years, but I'm surprised to learn that Watir is no longer being maintained. It seemed to be pretty popular back in the day.
Capybara is great and actively maintained.
Dunno why you're getting downvotes. RVM is probably the easiest way to get rolling with Ruby, especially if the book you're using is asking you to use 1.9.x.
Agreed. Interestingly, the alternative ruby interpreter implementations JRuby, and Rubinius seem to be much more in touch with the community
I work in Ruby and I like it... but the Ruby community seems to behave like teenage girls, running after the next fashionable shinny thing and forgetting about the last one every other week. It happens to almost everything in the Ruby community. For example: attachment-fu, paperclip, carrierwave, or restful-authentication, devise and some others. I know everybody is free to do whatever they want and people just re-write stuff, because they want it different or whatever. What puzzles me is that we change libraries as often as underwear.
in other communities the focus is on the quality of the code, here it's all about popularity.
Actually, usually the new shiny is better, because it wasn't shackled by the old. Devise is zillions of times better than restful_authentication, paperclip was nicer to use than attachment_fu and now carrierwave is better than that, etc. Nokogiri is tons better than hpricot. If you can accuse rubysists of something, 'lack of improvement' is certainly not it.
Giving you an orangered to check my other reply. Tl;Dr, it's because they're actually better. 
I don't think it's black and white. There's a factor of innovation and there's a factor of popularity.
How does one volunteer to assist with keeping the site in check?
I think the reason you are seeing a proliferation of libraries is because the community is maturing, and learning lessons from mistakes made in older libraries. Coming from a more established language I can see how this might be viewed as frustrating or ADD, but I take the perspective that it's refreshing to see how people are able to improve upon functionality without being shackled to backwards-compatibility. I don't think it's fair to say that code quality is not improving in Ruby libraries.
bullshit, innovation means you actually create something new, these were old wheels all the way and they were because of popularity of their authors nothing else. when you start from scratch over and over again whatever you've "improved" gets lost among the defects the others already had solved.
One of the positive outcomes of the post is that James Edward Gray II has given some pointers on this. Check out http://www.rubyinside.com/official-ruby-site-not-so-good-5248.html#comment-44523 - essentially you need to e-mail the webmaster account.
It really saved me a lot of headaches especially when dealing with rails apps of different versions. I maintain legacy apps on 1.8.7 with rails2.3.4. As well as a more current rails 3 on 1.9.2. So it comes in very useful for me. And to get ruby 1.9.2 on a mac without rvm can be a nightmare. 
Not just that, but mucking around with the system Ruby can be kinda dangerous. It's there because Apple uses it for various stuff... not so that developers can have instant Ruby machines.
Agreed. Here is a related post regarding messing with system ruby on OSX. [http://stackoverflow.com/questions/6003620/how-to-update-system-ruby-to-1-9-2-on-mac](http://stackoverflow.com/questions/6003620/how-to-update-system-ruby-to-1-9-2-on-mac)
I've begun porting the HTML from [www.ruby-lang.org](http://www.ruby-lang.org/) (a Radiant CMS site) to [Jekyll](http://www.jekyllrb.com/). If your interested in porting legacy HTML to Jekyll/Markdown, the repository is here: https://github.com/postmodern/www.ruby-lang.org
Okay, here's one example: restful_authentication was based around generators, making it hard to upgrade. AuthLogic, its successor, took them all out in favor of inheretance, which made it much easier. Then Devise was 1) based on Warden and 2) let you have multiple namespaced user accounts and authentications.
Of course. But there WAS improvement. I can't ever think of a time where the new library was worse thanthe old.
none of that prevents the original auithors to make major releases and change the approach or the new guys to fork instead of rewriting, none of that prevents the people from all teams to collaborate instead of "making their own" and that situation happens on ALL areas, how many json libraries are there? how many attachments? how many authentications? there's no collaboration anywhere.
What's the point of forking if the approach is totally different from an existing library? At that point you're just arguing about the change in gem/project name. I think the proliferation of multiple gems that solve the same problems differently is a testament on how easy it is to just get up and started with Ruby. I don't think it's necessarily a bad thing. Let people create their libraries and the community will decide what works and what doesn't. Kind of like the current browser wars. And I totally disagree with you about there being no collaboration. Just look at all these libraries on Github and look at the pull requests and contributor lists. Just because the entire community isn't contributing to a single library doesn't mean there's no collaboration going on.
"matz is nice, so we are nice". a corollary to that is "matz doesn't care, so we don't care."
&gt;I don't think it's black and white. Maybe it's more popular because it's better. I suppose one thing that could have been done would be to come out with restful_authentication version 2, 3, 4, 5, 6, 7, 8 etc until it became Devise but then people would cry about backwards compatibility.
I run RubyFlow and even I'm going to say.. why not just link directly to the article? :-) http://www.engineyard.com/blog/2011/fog-2011-halftime-show/
Closed source? What about https://github.com/MagLev/maglev?
Sir, thank you &amp;#3232;\_&amp;#3232; 
Oh cool, that shows how little Iäve been paying attention to them, I just remembered in the early stages they didn't want to release the source (understandably)
That actually made me dizzy. 
Rubyist tend to glue code, I don't think we behave like teenaged girls. We discern something else has improved on an implementation, so we change our glue and upgrade and keep a strong code life-cycle. By contrast in gemified-world, knowing is half the battle, some libraries work better than others, some conflict, some aren't actively maintained. I think the fact that we *can* change our underwear so frequently is a good thing.
I would take a community that changes libraries like Ruby over one that never changes anything like Java any day. Actually, I'm doing it... my Ruby code pays for my food, my roof, my clothes, etc. Sometimes I do get mad... carrierwave! damn... libraries for attachements come out at a higher rate than I start projects in need of attachments. Every time is a different one. And yes... next project I'll be trying out carrierwave or whatever the hive mind is blessing at that point.
But I guess that the server for storing objects is closed source (http://gemstone.com/products/gemstone) and there is no much use from maglev without the persistence feature.
Actually, I think in general popularity of code in the ruby community is pretty closely correlated to quality. ruby community is as strong there as any other community I've seen. What you're saying is a weird thing to say "in other communities the focus is on quality of the code" -- so you're saying in other communities quality code is popular? I think it is here too, generally. (Although I personally always thought auth_logic was a mess, but, hey, I think 50% of the java stdlib is a mess.) Now there are a couple things going on worth mentioning that make things tricky. One is that the ruby community is REALLY focused on re-using each others code and not re-inventing wheels. So you end up with LOTS of dependencies to other people's code, in complex chains. That is one thing that neccesarily requires paying attention to what's "popular", becuase, what dependency are you going to pick? Is it going to be what your users want? Is it going to be supported (how popular it is is certainly one signal for how likely it is to not be abandoned, although no guarantee as many of us find out the hard way). There is a downside to the kind of crazy level of devotion to code reuse and never rewriting something when you can use someone elses that we have. Another thing is that it's a lot easier and more fun to write something, than is to maintain it, and to worry about backwards compatibility. And the ruby community ain't too great at that last part. Lots of cool (quality!) stuff gets written, people start using it and depending on it... and nobody maintains it, or the people maintaining it don't care about backwards compatiblity creating a mess for everyone. (Again, you think re-using instead of reinventing the wheel will save you time... until you spend all that time it saved you and more dealing with dependency conflicts and upgrading things that aren't backwards compat). 
I generally scrutinize my libraries by popularity / github pages and docs [ruby-toolbox](http://ruby-toolbox.com/) &amp; [rubygems](http://rubygems.org/) are highly valuable resources in regards.
The gem "itslog" by John Marino does a pretty good job of reformatting the logs as well, in case anyone is interested.
Doesn't Rails just use Logger.new still? If so, you don't have to go through all that work, you just have to reset the default format string.
Nope, it doesn't, like I wrote about in the readme. Maybe it used to in 1.0 or something? Old Rails (2.0? 1.6? can't remember) used Logger.new, yes, but monkey-patched it to ignore the format string! For all Loggers! It disabled the formatter functionality! Which was very annoying. I can't find the source now, but here's someone else complaining about it from back in the day. http://darwinweb.net/articles/undoing-rails-monkey-patch-to-logger 2.3(I think it started then?)-3.1 uses it's own BufferedLogger, which doesn't sub-class Logger, and doesn't provide a formatter. (You _could_ replace it with an ordinary logger, sure, if you wanted to give up the Buffered part, but I figure the Rails folks must know something to put it there in the first place). https://github.com/rails/rails/blob/master/activesupport/lib/active_support/buffered_logger.rb Really, I wouldn't have hacked it if I hadn't had to. It remains a mystery to me why Rails is so weird about this. 
not enough deprecated APIs in this release. 
Would it be possible to have the formatter discard lines that I don't want? Say... any lines containing the word "asset"? All these asset pipeline messages are annoying the heck out of me. Have to scroll up endlessly just to see what queries were run.
I have been monkeypatching bufferedlogger for a while now. Rails should use a better default logger, one that can work with syslog if need be.
This version number sure isn't going to confuse anyone :)
I think the Watir General mailing list is the best place to go for such questions. watir-general@googlegroups.com
Absolutely would be possible, quite easy once you have a logger that takes a formatter, you can easily supply your own formatter to do whatever you like. So use the OP gem to monkey patch BufferedLogger to use a formatter, then just write your own formatter. (I have no idea if this gem will get any interest at all, but happy to accept pull requests to add additional formatters or formater options; but it's quite easy to write your own local one, that's the point of the Logger#formatter, let you write your own formatter). 
there's also _probably_ some way to config those log lines you don't like off in Rails, but yeah, I don't know how to find it either, other than spelunking through the source trying to find a guard. 
Decided to go finally do all the Koans. Pretty awesome stuff. Love it when they point out alternate ways of doing the same thing.
Hello fellow Rubyists and Redditors! I just wanted to share something I started for the Ruby community. It's called [RubyLang.info](http://rubylang.info). It's dedicated to publishing the most up to date information about the Ruby language and popular Ruby projects. I am looking for more contributors for a new open source site called RubyLang.info. I mainly need doc writers but any help is most welcomed! I'm proud to host [RubyLang.info](http://rubylang.info) on Github, both source code and site. Since it's on Github, anyone is able to contribute to the site, just fork it and submit a pull request! Aiming to be hassle-free. Enjoy :] Link: [http://rubylang.info](http://rubylang.info) Fork it on [Github!](https://github.com/rubylang/rubylang.github.com)
Looks great! Like an updated version of the official site.
YES.
I think it's useful. You should Gem it IMO.
Did you even attempt to contact the owner/maintainer of ruby-lang.org? ;) As much as I appreciate finally having an up-to-date version site for Ruby's identity, I feel like it might be better if this could instead be the next re-design iteration of ruby-lang.org. While forking code is simple enough, forking an online identity can be much harder to repair. Hopefully my first question didn't surprise you. I'm hoping you already know that you essentially just forked a site "owned" by Matz and the Ruby Users Group. If you contact him about your site/project/vision he'll probably give you good consideration. After all, MINSWAN. That said I definitely appreciate the hard work you've put into this and your willingness to maintain the project. Thanks!
I appreciate your kind words! :] Yes, I did actually talk to the maintainers of ruby-lang.org and the response from them actually is the reason why I started this. As much as I appreciate their efforts it isn't easy to lend a helping hand as just submitting a pull request on Github. Also, it shouldn't take a popular article on the internet to motivate updates to the site. ruby-lang.org is not owned by Matz. They started the site in 1999 and became "the ruby site". Matz doesn't take any ownership.
Loves it. There's nothing glorious about waiting around for old animals to change, if they ever do. Looks great.
IM BRINING IT BACK!
Interesting start, but needs more work: * missing pages: community, news, security * google search? * rss? * imo: avoid white text on red, content sections should be black text on white for readability issues * imo: too red for my tastes Cheers
I love the design, but, for me the "fork me on GitHub" is over the Downloads menu, and so it's not click-able unless i zoom out. [Screenshot](http://i.imgur.com/QH7jC.png)
Noted and fixed. I moved the banner to the right.
Still working on the content. Thanks for the suggestions.
THE EXAMPLE CODE SUCKS 9" DICKS!!! for a start, dont use the %w[] syntax, it looks ugly, and will give ppl a perlish first impression of ruby. secondly the comment is retarded, it's not interesting, it's not a feature of ruby that is distinctive nor interesting, and further it's not 'math' so dont call it such. Aside from the example (which fucking SUCKS) the site looks good, keep up the mostly good work.
Username appropriate to the comment!
[vit-core](http://rubyforge.org/pipermail/vit-core/) (which "maintains" ruby-lang.org) has essentially agreed that it will change to a "static files on GitHub" approach.
It can in fact be compiled: http://tedwise.com/2009/10/08/compiling-ruby-with-macruby-0-5b1/
&gt; for a start, dont use the %w[] syntax, it looks ugly %w is a nice convenient way to make an array out of a list of lexical barewords. It's less ugly than the usual bracketed list of quoted strings. Just because perl does something doesn't mean it's a bad idea. &gt; secondly the comment is retarded, it's not interesting, it's not a feature of ruby that is distinctive nor interesting, I mostly agree. Overloading arithmetic operators to do set operations on arrays is not the most distinctive or interesting feature of ruby. &gt; and further it's not 'math' so dont call it such. You need to learn more math. A∖B = {x : x ∈ A and x ∉ B}
I get that red is like, the ruby colour, but I really think this is just too much red.
my first thought too. the ruby community as a whole needs to get over the obsession with red as a thematic colour.
I also made a fork of [www.ruby-lang.org](http://www.ruby-lang.org/) available here: [github.com/postmodern/www.ruby-lang.org](http://github.com/postmodern/www.ruby-lang.org) I kept the design the same and focused on converting all of the static HTML to Markdown. Currently, I have converted all English content to Markdown. I will eventually be merging this content into either the new official www.ruby-lang.org site (will be Octopress based on GitHub) or [rubylang.info](http://rubylang.info). Please review [github.com/postmodern/www.ruby-lang.org](http://github.com/postmodern/www.ruby-lang.org) for typos or formatting errors. Thanks in advance.
Dude. For me the white text on red is unbearable. You probably can't see it, and I'm probably a minority here; but what I see with this body text is not too disimilar to what I see [in this picture.](http://www.woophotos.com/wp-content/main/2011_07/optical-illusions-2.jpg)
We're actually in the process of merging our efforts.
Ouch! I must say the design doesn't hurt my eyes at all. We're working on making it better!
Thank you :)
http://rubylang.info/
it's the use of the `%` character that makes it ugly, it's true that the normal `["hello", "goodbye"]` syntax is more verbose but it's using the standard symbols. Similarly although Symbol#to_proc is shorter/sweeter than an explicit block, the use of the `&amp;` symbol makes it appear ugly and i wouldn't use it when demonstrating ruby to new users.
Any plans to host a wiki? A few language communities have really helpful ones (python for example).
very cool, going to give the beats gem a try
its great for people that are anal about their syntax and spacing. you can't f*ck it up, or else it doesn't work. its not that its just the new hip thing, its superior because it creates standards. those lazy assholes you work with? their code has to be as neat as yours.
[the fork button is right here](https://github.com/rubylang/rubylang.github.com/#fork_box)
[the fork button is right here](https://github.com/rubylang/rubylang.github.com/#fork_box)
Have you seen [OpenStruct](http://ruby-doc.org/stdlib/libdoc/ostruct/rdoc/classes/OpenStruct.html)?
That's sufficient. I'll get it out this week.
You could just [link to issue #1](https://github.com/rubylang/ruby-lang.org/issues/1). ;)
I don't think OpenStruct would work very well with the other methods I need in the Persona class. I'll revisit the issue of whether a subclass of OpenStruct can be made to do the job without screwing up my extension API, though.
I like to use Intridea's [Hashie toolkit](https://github.com/intridea/hashie) for problems like this.
I would use it.
That's one ugly fucking site. I really don't think fragmenting the ruby site is a good idea. Was any attempt made to contact the ruby-lang.org maintainers? This is just going to cause confusion. There is no mention of the ruby-lang.org on the site, the download page has no mention of Linux -- the main deployment platform. This is one of the more stupid ruby community decisions. FFS we are supposed to be a _community_ not a bunch of fighting factions.
One other way to do it would be with method_missing instead of programmatically adding accessors. Over-ride method_missing to check if there's a key of that name in the hash, if there is return the value, if not just call super. BUT whenever you over-ride method_missing, you should also over-ride respond_to? to match, something people often forget, and forgetting ruins duck-typing and just generally makes things less predictable than they should be. (One of my biggest ruby peeves, people who over-ride method_missing without correspondlingly overriding respond_to -- or people who over-ride method_missing and "assume" that the missing method can be forwarded to another object or is a hash key or whatever. Instead of checking if it is, and calling super if it's not, so you still get the expected ruby language method missing exception if it really IS a bad method call, instead of some mysterious exception which doesn't say 'method missing'. If you over-ride method_missing, do it right!) I am not sure if I'd consider the method_missing approach more or less 'clean' than the dynamically adding methods approach. The method_missing approach you have to actually do it right as in the above parenthetical, or you just make things really messy and confusing.) I can't think of any other way to do it in ruby -- in fact, I can't think of any other even hypothetically conceivable way to do it in a ruby/smalltalk/message-passing-type language. I may just lack imagination however. 
I agree trying to subclass OpenStruct is a bad fit for this problem, FWIW, I wouldn't either. Again, leads to really confusing errors when you DO send an actual bad method name/message (one that's NOT a key) -- leads to really confusing exceptions when you make a typo or have another bug that sends a bad method name to the object -- I want the typical ruby missing method exception when that happens, otherwise debugging gets really confusing, especially if someone else wrote the object and you didn't even know it was an OpenStruct (why should you have to?) That someone else can of course be you a year ago too. 
wonder if it just seems that way because you and I are part of the english-speaking community, and MRI is mostly developed by Japanese speakers. So our impression of 'the community' is one thing. Maybe Japanese speakers think MRI is much more in touch with 'the community'!
Do you intend to create those methods only on one instance? Then you should use `class &lt;&lt;self; self; end` instead of `self.class`. Currently called on one instance `hash_accessors` adds method to all `Persona` instances. In other way, it has more performance, so it could be what you want to do.
I've seen Rails apps using Log4r. How does that fit in? I just got to the point in a project where I need to think about effective logging.
it's also the fastest JS driver. You should just use it.
Thanks. You've articulated some of what went on in the back of my head when I first pondered how to solve this problem. I tend to be pretty skeptical of my ability to plug all the holes in a boat built from `method_missing`, which might have influenced my choice to dynamically define methods rather than redefine `method_missing`. I'm not 100% wedded to my current solution, though, for the long term; I just want to keep the API usefully somewhat stable.
I'm still considering the matter of which way I want to go with that, actually. As things currently stand, it is typically the case that the way the class is used, one instance that is used heavily is created with each run of the program, and up to a handful of other instances may or may not be created for very limited purposes interacting with the first instance, so it has not yet been a very important concern to settle. It is something I'm going to need to deal with at some point, though.
Thanks for mentioning that, by the way. It looks interesting, though I have not looked at it in depth yet.
"Ruby on Rails programming is easy. Idiots can learn it in 21 days, even if they are Dummies."
What the hell was that?
some care to explain a) what a CI does and b) why it rocks/sucks?
Say I'm running a rails server and I want to see the log output in lolcat mode? `rails s | lolcat` doesn't seem to do the job. What can I do?
This is the most beautiful gem I have ever seen.
This article does a much better job of explaining what craftsmanship is all about than anything I've seen from the software craftsmanship movement folks. It's a beautiful appeal for experience-based, slow-cooked knowledge. This is exactly the message I've been trying to express to the students at Mendicant University. It flies in the face of the "RIGHT NOW! RIGHT NOW! RIGHT NOW!" startup mentality, but is so important if we actually want to build a sustainable ecosystem for software developers. Yes, to make a living and to solve the problems of this exact moment, we need to grind out code quickly. But our experiences should be teaching us how to rise above this sea of false urgencies, not perpetuate them.
The problem is most likely that the log goes to stderr, not stdout. Try: rails s 2&gt;&amp;1 | lolcat
CI is Continuous Integration. At it's most simple it builds your project on each commit. This avoids "builds on my machine" problems. The next stage is to run tests on each commit. This avoids "works on my machine" so long as your tests are good enough. It's also a good place to run deployment scripts as it is a clean, known environment without developer tools potentially adding complications. This increase in certainty and reliability of process is why CI rocks. 
I'm getting an error when I try to use it http://pastebin.com/sk4HRp6C
for some reason I'm still thinking about this. Another way to do it, basically what you're doing but perhaps a BIT 'cleaner'. Dynamically create an entire module with Module.new &amp;block. The block (which is a closure), which will include pretty similar code to what you're doing now, but it'll be inside it's own Module. Then include it in the class, or #extend it onto the individual instance, depending on which you mean to do. Not too different than what you're doing now, might not be any better (or worse?) practically, but somehow feels a bit better to segregate these things in their own (anonymous) Module, instead of adding the methods directly to the class or instance. 
I can't believe I actually installed it. LOL Love it :)
Why is this called lolcat? PS: Totally should have called this [nyancat](http://www.youtube.com/watch?v=AAiCRuK98ig).
cat displays the contents of a file lolcat for extra lulz
I'm only getting a few colours on mac iTerm. Any suggestions? 
nice; could you also add the ability to grep for code and it returns you which class/method it's located in?
Ah clever. Still, rainbows not very lulzy; maybe that's just me.
Oooohhh.... probably. So, like, if you had a method with "puts some_error_message" or something, it would give you back the names of class#method that contain that code? That could be useful!
yep :)
works great for me on [iTerm2](http://www.iterm2.com/#/section/home)
Trying to work out how to set my $PS1 with lolcat. Anyone know why it just comes out monochromatic? export PS1=$(echo "\\u@\\h: \\W/ $ " | lolcat)
ruby.
I should probably consider how to better protect the main namespace of the class with these methods, actually. Your mention of modules got me thinking about that.
s/Narraw/Narrow/
the `--animate` option is awesome :D
Build 1.0.0? What terminal type? I'm using 'xterm-256color' so I guess I should only expect 256 colours! I've tried the other settings but don't seem to be able to get any more colours on the palette.
What do you get from the below? gem list lolcat Can you 'require' the gem in irb?
Perhaps because it's only one line deep?
GoRuCo is usually my favorite conference. But this year I was a little upset at how 4/7 of the talks were about Rails and the Web; one of the talks was about CoffeeScript, not even Ruby. I love all these things, but come on, this is a Ruby conference, not a Rails conf. Also, I remember seeing Sandi Metz in 2009. Good talk, but with a really similar theme. Maybe a little more diversity would be sweet? Also, I love you Evan Phoenix, but when you first submitted your talk to GoRuCo, you didn't even have a description listed. Assuming this was more than just a clerical error... c'mon, GoRuCo, don't just hand out talks to big names. I'm a little butthurt. Disregard my rant.
If there were a non-Rails centered Ruby conf in nyc, do you think people would turn out? this isn't a loaded question, I'm really curious... I certainly would but I could imagine it being like 10 people
I agree. People probably wouldn't be interested. 
Well, i'm definitely down if something like that comes up. Not that I have anything against Rails (I use it too), but it's nice to hear from people very close to your niche
there's really no good way to do that in ruby but naming em something unique, generally. that i know of. 
Neato!
That, or use module namespaces. I might use a prefix for the method name, though.
Having dabbled with node.js a lot lately this looks intersting..love how fibers make asynchronous code so cute :). Cool how ruby can make something that tends to be messy beautiful.
What makes this realtime? Realtime means that there is a dealine that will cause a complete failure if missed (however long that deadline is). This framework is asyncronous. 
I know that not everyone is wise in the ways of marketing, but... Cramp? Really? Might have tried running this by a small test audience before committing to such a painful name.
FWIW, I named it 'cramp' because async programming always cramps my style!
Why is this person being downvoted? He's not wrong, calling this "realtime" is wrong. Realtime computing is a well-defined area and typically includes custom OSes and very carefully-written code written for specific hardware. This is asynchronous, and has nothing to do with realtime computing. [Wikipedia on Real-time computing](http://en.wikipedia.org/wiki/Real-time_computing)
Has anyone used this library with success?
Yeah, doesn't mean I don't like the framework, certainly something I'm going to be using fairly soon since I don't facny having to learn how to use NodeJS.
I like its simplicity. From README: "It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well."
I also like the simplicity of [ruby-build](https://github.com/sstephenson/ruby-build).
I agree it's not "realtime" in traditional CS sense. But in real-time web sense http://en.wikipedia.org/wiki/Real-time_web
meh. real man use source ruby-$VERSION.sh
Reddits anti spam algorithms sprinkle down votes here and there. It doesn't mean anything. 
I was one of the original GoRuCo organizers and was on the selection committee for the first conference we ran. IIRC, we has a full house in 2007 zero Rails talks. http://2007.goruco.com/speakers/ GoRuCo now always sells out, and very quickly. I don't think this is the issue.
Are you still a GoRuCo organizer? Would fewer Rails talks be too much of paradigm shift or hurt something that I don't see? Also, you signed my copy of Rupert Reports with a PacMan ghost a long time ago. Thank you!
Nice.
No, he had 0 upvotes and 4 downvotes. He'd clearly been downvoted by a bunch of people who didn't know the meaning of "realtime".
&gt; This article appears to contain a large number of buzzwords. &gt; This article needs additional citations for verification. I think it'd be best to just stick to accepted terms. WebSockets, Comet, and so on are more than enough to get the point across. And yeah - don't think I'm shitting on your work itself. Just the use of "realtime". It's the academic in me.
Do you see anybody else there?
I don't think you're shitting on my work! No worries. I kinda like the "real-time" buzzword, so I am happy to take the blame :)
It looks like the EM integration has been cleaned up. But what is with Tramp::Base? Has anyone directly compared Cramp to Goliath or [async-sinatra](https://github.com/kyledrake/sinatra-synchrony) 
Yeah, real time web, thats going to not going to get confusing :p In regards to the framework, makes me think of Sinatra in it's format, makes me feel right at home.
260 peeps. Wondering if there were other redditors.
Ah, that's not what you asked. ;) Glad to hear you are not alone there. I went to the Boston Ruby Group the other day.
Tramp was completely removed from Cramp. Should just use AR instead.
Ok. 
This was a fun interview about one of Ruby’s regional conferences. This one is Rocky Mountain Ruby Conference being held in Boulder, Colorado. Marty Haught and Charley Baker talked about the town, the conference, the venue, and what it takes to organize a conferences like this one.
it's cool, sure, but I don't see anything wrong with RVM that'd make me want an alternative. 
I'm here. I'll be speaking on Saturday, 1pm.
Thanks. I saw it in one of the examples. Have you tried Goliath or async-sinatra?
He explains a few things that RVM does that he doesn't like. I think he has some good points, although I'm wondering if he tried to send patches in first?
Wayne Seguin is pretty responsive about pulling patch requests, but one thing that I find appealing about this that RVM can't do is support non-Bourne shells, as long as they maintain that abstraction. Also, it's nearly impossible to move away from the way RVM overrides builtins. A rewrite is better off if that is what you want.
~~only works in bash :(~~ ~~corrected by reply. i hope you're right sstephenson~~ i'm an idiot and didn't read :/
For example, rbenv doesn't redefine your 'cd' command which is way too much magic. And with bundler, there is no need to have a different gemset per project. I'm really glad the rbenv alternative came around.
[rbenv](https://github.com/sstephenson/rbenv) looks like a promising alternative - I definitely plan on checking it out when I get a chance.
Enjoyed your talk very much. Good to see someone so passionate about the community. Maybe I will give shoes another try on my next desktop app.
Thank you. :)
What if a similar program wanted to change how cd works? Would this still be possible? Or would there be some necessary communication between that program and rvm's implementation?
uhhh, we all know about this. That was the point of this post, as a reaction to the arguments in rbenv? you fucking moron
Sounds like you've heard a lot of talk. Tell me, how do you execute your gems using only bundler? Because with gemsets, I don't need to ever worry if there's been another version of it or its dependency installed for another project. It's as if this set of gems is the only one that exists.
It didn't really occur to me that overloading the `cd` command was how rvm acheived that result either, but it's really not as bad as some are making it out, and the seamless results I've got so far have been very impressive, I'm definitely going to continue to use it for the time being.
It's always been possible to do that with plain old RubyGems: https://gist.github.com/1143900
No, it's written in Bash, but it'll work with any shell — rbenv is not a script you load into your shell but rather a set of commands you execute.
I responded here with why I think overriding `cd` is bad design: http://news.ycombinator.com/item?id=2880232
As people mentioned in the HN thread about this all, in a shell context last definition wins (and there's no `super`). So if multiple programs redefine `cd`, something is going to break. (At least, this is what I understand. If there is some advanced shell-scripting trick to make this work, I would be very happy to hear it.)
&gt; it's nearly impossible to move away from the way RVM overrides built-ins The only built-in that `rvm` overrides is `cd`, no? (I may be wrong, but that was what I thought.) You can easily opt-out of that behavior, by [setting `rvm_project_rvmrc=0`](https://github.com/wayneeseguin/rvm/blob/master/scripts/cd#L4). The business about `cd` has gotten the lion's share of attention, but really `rvm` and `rbenv` are very different tools (different styles of shell scripting, different goals, etc.). There's no good reason that both can't exist and flourish. There should be plenty of room for both of them.
Jenkins is actually more generic than that.... It will run a job, based on triggers, and can report the status as "failed, successful, unsuccessful" where: * Failed means it exited with a non-zero exit code * Unsuccessful means it exited with a zero exit code, but some condition wasn't met (tests failed, output had a certain string, etc.) * Successful means it exited with a zero exit code and all conditions were met. I actually use Jenkins as a replacement for cron, since fast-repeating jobs can be configured to only bug me once if the job fails, not every time. In addition, I can look at a history of how the job ran and even view logs for successful runs. Jenkins has a mass of plugins, so you can integrate it with github, various version control systems, execute builds on various platforms, etc. An example setup we have at work: * Every time someone commits to Gerrit (a code review system) a build is kicked off to run our short tests on the commit. * When a commit is pushed into HEAD, then a build is kicked off to run the short tests and to build the resulting project. * When the short test on HEAD finishes, it is deployed to our development server for testing. * When the short test on HEAD is finished we then kick off our long tests. The long tests aren't run for every build, since they take a long time, but we alway have a fairly recent long test. Having tests like this is really awesome.
Yes, that's a powerful way of using Jenkins. However, the question was about what CI was, not what you can do with Jenkins. Though I'd chose Jenkins, I'd recommend people set up **any** CI server over none at all.
Yeah, this just seems like the whole monkey-patching drama, revived.
No, I only participated in planning for the first year. But I basically agree with you that there should be a different balance, at a minimum. Ahahaha, Ruport. Nice.
I am one of this year's organizers - and I appreciate the feedback. We're always looking for it. It's difficult to accommodate an audience as diverse as NY's Ruby community in a one-day, single-track conference - and I hope at least a few of the talks were interesting to you. While - I'd be hard pressed to describe four of this years talks as about Rails, or even the web, you do have an interesting point about it not being the Ruby language exclusivity. (I feel) Rubyists, more than most developers - have a healthy interest in fields and technologies that are adjacent to their bread-and-butter language. During talk selection - it's hard to balance the brackish skill level and interests of our attendees and I've always valued the breadth of topics and GoRuCo. But hey - what would you expect I'd say?
This is exactly what most people should be doing. The guy doesn't like rvm, so he goes ahead and writes an alternative. Congratulations, mate.
In zsh, this is prevented by a global environment array which contains all the functions to run before/after the command -- rvm uses this for zsh, and simulates this behavior w/ bash. It also forces a call to the builtin cd (as far as I remember), so it sets itself "at the bottom" of the stack, this is perhaps the one questionable practice -- since I "might" want to hook inside of the rvm scripts, but I'm having trouble finding a use-case for such a thing. I know about this principally because I've been trying to recreate `super` in a bash environment, and I've been trying to solve the `commit .rvmrc?` debate in my office via a `rvmrc.example` script which would be autodetected on first entry only. (I've since pivoted away from that idea, but only because factoring out the bash chunk of what rvm does isn't readily apparent to me, I've still got a long way to go in my bash-fu training).
Indeed, overloading the shell is what a good shell user _should_ do. The shell is _your_ interface to _your_ environment. Overloading `cd` isn't a bad idea, it's just a method to achieve some madness. I really wish more people would take the time to learn shell and the sort of "philosophy" associated with it. Shell (in my estimation) is like a Smalltalk VM, it's _supposed_ to be a malleable environment, if you get hung up thinking "Oh, I shouldn't hack this method onto that object" you're not really programming in good shell practice. But I'm an opinionated asshole, so there's that. :)
What are the points against checking in the .rvmrc into version control? Other developers not using rvm? In theory you could check in both an .rvmrc and .rbenvrc in, because having them there is really the best way to document which ruby version an app was developed on.
Also, nice to know a concrete feature that zsh provides that bash doesn't :)
I see how HAML outputs all the html, but I'm a bit confused on how it runs the Ruby. The example you gave "%p= Time.now" is all fine and good, but what if I want to run ruby code that I don't want to be in the html? In erb, this is easy. For example: &gt;&lt;% @examples.content.each do |example| %&gt; &gt; &gt;&lt;%= "The example is: " + example %&gt; &gt; &gt;&lt;% end %&gt; Only the middle line is actually rendered to html. How would this look in HAML?
replace = with -
In my opinion SLIM is a much better alternative: http://slim-lang.com
In my opinion, HTML isn't so bad that we need to create new templating languages to generate HTML. ERB is a light, thin layer between HTML and Ruby, it's a perfect balance for those who write Ruby, and for designers who write views in HTML(why would you expect a designer to learn something like Haml?). 
I wasn't talking about HAML but another alternative called SLIM. One advantage that SLIM has over ERB is that ERB can result into spaghetti code. When using things like SLIM's logic-less mode http://slim-lang.com/logic-less.html you don't have this problem.
What I miss in Slim is the filters you get in Haml. markdown in particular.
I disagree - Haml or slim has so much less line noise in the form of closing tags and angle brackets, it is incredibly more easy to read and write. Also, why would you NOT expect a designer to learn something that can make their job better? Designers get coddled for no good reason IMO. Everybody should be expected to continually learn. A designer who can HAML is more valuable, so why fight it? Hell, a designer who can program, even more so, but then I'm not suggesting forcing them to go that far. 
-examples.content.each do ¦example¦ The example is #{example}
They are called engines in Slim: http://slim-lang.com/docs.html#engines
It's actually pretty basic and kind of silly, some people want to name gemsets differently for various reasons. Personally, I just say check the things in, but we came to a compromise which requires only a little work. My current plan is to re-write an existing shell function I have to generate an rvmrc based on the default ruby and current directory (it's a terribly basic thing). I'm going to instead have it dump a file which will ask you if you want to rename the rvmrc before continuing (as part of the trust process). Since rvmrc is just a script that gets sourced on entry to a directory, it's pretty straightforward to do, I think. I just haven't got around to it. **tl;dr,** there's no particularly good reason to not check them in, but office culture demands a more indirect solution.
Indeed, it provides a few nice features over bash. I've been planning a switch to it, it's just a matter of getting all my ducks in a row. Wikipedia has a nice breakdown
I like pure ruby things like markaby and erector.
actually, if I wanted logic less views, I'd use something similar to [Mustache](https://github.com/defunkt/mustache) or [Effigy](https://github.com/jferris/effigy). Slim doesn't impress me either, for the same reasons that Haml doesn't impress me. 
yeah, 50% less code, but at the cost of the simplicity. How much more simple can you get than &lt;% %&gt;, and &lt;%= %&gt;. That's all you need to know, and HTML on its own is simple already. Even when you interpolate Ruby into HAML, it isn't Ruby anymore, you have to omit the "end", because Haml decides that line is one too much, so, it doesn't even work how the Ruby programmer would expect it to work. To be honest, asking a designer to learn Haml isn't something I'd do or expect them to do, unless they wanted to, because all the designers I know(one in particular) have flirted with haml before falling back to the simplicity of ERB/HTML.
Dont downvote me for disagreeing, downvote me for not contributing to a conversation. Asshat redditors these days.
do you use sass? 
I just released the Teleport gem - easy Ubuntu server setup via teleportation. Teleport sets up servers by "teleporting" to the machine and running itself there. It installs Ruby, then follows the instructions laid out in your Telfile to customize the server. The role/server setup is similar to Capistrano, though the syntax is slightly different. You can also run "teleport --infer" to reverse engineer a Telfile from the current machine, similar to blueprint. Feedback welcome! 
Neat idea. What do you imagine it would take to add CentOS/RHEL support?
How is it not distro agnostic? Does it support RVM? How is this an improvement over Capistrano (do you use net/ssh or do you use something else that does a proper login when you ssh in?)? Why did you feel compelled to write it? Also: Stick an example in the howto. 
Because I've used Debian/Ubuntu exclusively for the last few years, I don't really want the testing burden imposed by other distros. I rely on apt-get all over the place, for example. There is no RVM support - this is for servers. RVM isn't well suited for production machines, though it works great on dev boxes. Capistrano is for deploying Rails apps. Teleport is for setting up servers (ruby, accounts, apt sources, packages, config files, etc.) They have different purposes. Teleport is akin to Chef/Puppet. There's an example right there in the howto - see the sample Telfile. That's the whole thing. People can't believe it's that simple compares to Chef or Puppet. Teleport is conceptually based on the setup tool I wrote at Urbanspoon, then rewrote at subsequent startups. It's a great solution if you need to setup 1-10 machines, which is really all that most companies need. I decided to open source my work after struggling with Chef for several days and getting frustrated. Why should it be so complicated to setup a couple of machines?
Thanks, glad you like it. I've pretty much used Debian/Ubuntu exclusively for the last few years. So my "opinionated" server setup tool is targeted right at my sweet spot. There's no reason a fork couldn't target a different distro, though. Certainly tools like blueprint have had an easy time targeting multiple distros.
Yeah, I don't blame you for your focus. :) I'm just imagining what it would take to convert it. We're pretty well committed to capistrano (5+ years...) and wrote a bunch of custom tools for new-server setup, but if I were starting fresh, this looks pretty cool. 
&gt;RVM isn't well suited for production machines, though it works great on dev boxes. Ah but it's great for staging servers where you're running a dozen seldomly used apps. &gt;Teleport is akin to Chef/Puppet. Why should it be so complicated to setup a couple of machines? Cool, those two can be monstrously complicated. I'll give it a shot when I rebuild my server next week.
I didn't down vote you, for what it's worth.
I don't, but the developer I work with does. 
Yep, after 5 mins. I already like it better than Chef, Puppet or Blueprint.
In my understanding I can have different versions of gems installed at the same time, and bundler will choose the versions that are defined in Gemfile and Gemfile.lock, so with bundler there is no need for gemsets anymore. gemsets were a great thing before bundler, but if I can reuse a couple of gems now that's even better for me. Didn't know about the way to specify a version with plain old RubyGems that sstephenson posted below, interesting.
I think it's the same principle. CSS is 'simple' but there are ways of improving the way you express it.
Liked it! I'm trying to learn TDD, thought it was good. Next time get spell check plugin :)
This makes me so happy. Thanks.
I like ham.
OH FFS!!! I just spent half a week doing all this stuff on my own! *shakes fist*
I use RVM for all of my production servers. It works wonderfully. I don't know where you got this odd idea that it doesn't.
As for blog post I think I spell checked it :) You should have seen it before. As for video, all bets are off... but I can tell you it's hard work. 
nice video but you need to be a little bit louder and fast. :)
No worries :) I wasn't sure who did it, which is why I responded to my comment and not yours. Didn't want to blame ya.
Does the [delegate.rb](http://ruby-doc.org/stdlib/libdoc/delegate/rdoc/index.html) module in the standard library not do the trick for you? 
I sincerely recommend this driver. It was a breeze to install on a linux box, and it has finally enabled me to test my Sinatra apps' js-based behaviours. Unlike the selenium mess, it's very fast and doesn't summon legions of firefox windows to your screen while you're trying to get work done. I've tried testing my apps with zombie.js, but, sadly, it doesn't support all necessary javascript behaviours. Until pure-js headless browsers become stable and well-intergrated into the Ruby ecosystem, capybara-webkit looks like the best option. 
I will gladly and happily celebrate _whyday
It's a full shell script, so you could just put whatever in the .rvmrc to give people different gems based on `whoami`
That's what I was planning, I'm just pondering the relative value of it all -- it's totally straightforward to hack in a shell function to write such a thing on the fly, but it might be nice to have a script which provides a hooking functionality for future hacks around rvmrc. The fundamental question is, do I do a little work now so people will check in .rvmrc.example? Or do I do a bit more work so that I won't (potentially) have to do as much later on this (and, ostensibly) other shell hacks. Part of what makes said decision hard is that shell is so much fun...
No, they should just stop being jerks and use the same gemset name. If it helps you at all, checking in the .rvmrc is considered [best practice](https://rvm.beginrescueend.com/rvm/best-practices/) by wayne.
I'm with you (and best-practice), but what Lola wants...
Totally.
I was part of the ruby community while _why was active, and I was a huge fan of his work. That said, I believe he suffers from either bipolar disorder, or it's younger brother, cyclothymia. I can relate to that. I was in the top three in a much smaller programming community, and I also vanished. Not quite the same way that he did -- I just let everything decay, didn't make the effort to destroy it on my way out. I've been battling it for years, and I'm currently hitting rock bottom (I simply can't get myself to write code). I've been programming since 1981, so perhaps, I'm simply burned out. Either way, I understand what he did, but it still makes me sad that he did it, and I wish him nothing but the best. He really was a shining star, and I still miss him.
I respect and love the work of _why but I really don't buy into this bizarre worship. Right now I am like, "Really???".
omg!
There are far worse heroes to worship. Anyway, it's all in fun.
&lt;3
Get yo' whimsy on!
I'm extremely curious to find out what he is working on now. He must be working on something to stay alive, right?
how come women always give these lame non-technical talks? even seen a female in teh ruby community ever talk about anything cmplicated? anything interesting? bitches.
I feel honored that I saw his RailsConf 2006 show in person. Magic times.
I'm not sure this is the right thing to do. I mean that literally -- it might be, it might not be, I don't know. _why seems to value his privacy. Maybe he'd rather we honored his feelings there. Or maybe he's pleased. We don't know. The only hint we have is that he's chosen to drop out, and he's choosing not to come here and say anything. There's a post here speculating about some specific health problems he might have. It feels to me like we're being kind of invasive. 
If you think this is some form of worship, I think you're missing the point.
I believe he found nirvana and transcended.
This guy is an inspiration for being passionate about what you do. I need to find more creative outlets in my programming like he has done. :)
I made this rubygame last _whyday: https://github.com/ippa/whygone I'll see if I have the time to do something fun this year around :)
He ascended. Stargate style. 
This is definitely not invasive by Internet standards. 
Ruby is a general-purpose programming language. Rails is a web framework written in Ruby to help make writing web applications easier. Apache is a web server which (simplistically) answers requests for resources on your domain. Apache does not natively handle Ruby applications, so it is typically configured to reverse proxy to a Ruby application server such as Passenger. SQL is the language used to query relational databases. 
I don't have a visualization, but I can break it down for you. Ruby is a programming language. Rails is a web framework written in the Ruby language. One component of Rails is called ActiveRecord, it is a domain specific language for producing SQL queries. SQL is a language for interefacing with a database. Apache is a web server, if you install the Passenger module for Apache, you can connect your web server to the Rails application, making it available to the web. Is that any clearer? 
Forget the internet -- we like this guy, he gave us free stuff, he was fun to read. Are we treating him well? I don't know. We might be -- he might be really thrilled that we remember him.
He may be thrilled, sure. If he's pissed at the attention... come on. It exposes more people to _why, and Ruby in general. Taking a purely utilitarian point of view... that's good. And considering the other issue (his privacy)... the line has surely been moved in recent years, but I see nothing absurd here.
Yeah, what this guy said! Shouldn't really require any visualization!
gotta get down on _whyday.
[Here ya go.](http://www.sentex.net/~pkomisar/Ruby/Rails2.png) Now, this won't help you see the relationship between Ruby itself and the Rails gem, but it will help you see everything else. If you want to know more about MVC (Model-View-Controller) architecture (which Rails uses extensively), then I would google some articles on it.
Thank you!! 
Hi, I just made [a quick graph](http://uploadpad.com/files/graph.png) to help you visualize it. It's a bit naive but shows the big picture. You'll notice that Ruby is not appearing. That's because ruby is simply a programming language, it just happens to be the programming language the designers of Rails chose to use (just as Apache or MySQL are written in C). I guess that if you want to place it somewhere in the graph you could put it below Rails to represent that Rails needs a Ruby Interpreter to run. Hope it helps ; )
Brilliant, thank you! *lightbulb goes on over head*
We have a winner!
While this graph is great I tend to think that [this](http://puu.sh/4twG) is the most accurate visual representation
That graph is fit for ELI5. Well done!
Sorry for the ugly code highlighting; I haven't liked it when I split the boxes for "code" and "laser results," but I may have to do that to have the highlighting not go bananas on the laser results.
Fantastic.
I've been looking for something like this too. Perfect.
Are Rails controllers request scoped (i.e. one instance created per request)?
That great. You should repost this to /r/explainlikeimfive/ and harvest teh karmas.
If you make a request to the database, it should look something like this @examples = Example.find(:all, :order =&gt; "examples.id ASC") This request is made in the controller. The scope of @examples is that of an instance. What this means is that @examples (which is an array of Active Relation objects) is available to your View that the Action rendered. I'm not sure if that answers your question, but you SHOULD be scoping a database request as an instance variable so that it doesn't interfere with other requests at the same time (if you were to make it global) and so that your Models and Views can use the results (which you couldn't do if it was local/block level scoped). Feel free to ask more for clarification. Also, if anyone reading this thinks I am mistaken or off, please feel free to chime in :) **EDIT**: As of Rails 3, the request should be like this: @examples = Example.order("examples.id ASC") The way I wrote it first will still work, but that form will be deprecated in Rails 3.1, and completely removed in Rails 3.2.
I don't see how Apache fits into the mix
In some Java frameworks the controller itself can be request or session scoped. A request scoped controller will have one instance creates per request. A session scoped controller will use the same instance to respond to all requests during a session. What happens when the Dispatcher creates a Controller? Does it create one per request?
Looks rather useful.
Okay, I don't have full confidence in the following answer. However, I believe the answer to your question is "yes". If I understand your question correctly, then this explanation (which I'm shaky on anyway) may help. If you're doing the request like this: @examples = Example.scoped @examples = @examples.where("examples.id ASC") @examples = @examples.limit(20) then the code waits until it goes back to the view to do the SQL request. So there is one request per instance. Again, I'm kinda pullin' that explanation out of my ass. [Try this link for an explanation of Rails Active Record methods.](http://guides.rubyonrails.org/active_record_querying.html)
 ph0rque@ph0rque-desktop:~$ rubybuntu-gedit install /home/ph0rque/.rvm/gems/ruby-1.9.2-p290/bin/rubybuntu-gedit:19:in `load': /home/ph0rque/.rvm/gems/ruby-1.9.2-p290/gems/rubybuntu-gedit-11.08.18/bin/rubybuntu-gedit:84: invalid multibyte char (US-ASCII) (SyntaxError) /home/ph0rque/.rvm/gems/ruby-1.9.2-p290/gems/rubybuntu-gedit-11.08.18/bin/rubybuntu-gedit:84: invalid multibyte char (US-ASCII) /home/ph0rque/.rvm/gems/ruby-1.9.2-p290/gems/rubybuntu-gedit-11.08.18/bin/rubybuntu-gedit:84: syntax error, unexpected $end, expecting ']' ... everything worked correctly °_°)", :green] ... ^ from /home/ph0rque/.rvm/gems/ruby-1.9.2-p290/bin/rubybuntu-gedit:19:in `&lt;main&gt;'
Who uses gedit?
Thanks, the latest version fixed it!
Really, anyone who's doing serious development work should invest in learning a more powerful text editor. gedit is the (vastly superior) notepad.exe of Linux, existing just to give newcomers a simple, working text editor. 
I am actually referring to the scope of "controllers". I mean when a browser HTTP request comes in and hits a dispatcher, would it always create a new instance of that controller?
grow up and use a real editor!
Nice idea, but you would get much better (more synchronous) results if you just stream the music via RTP from the source. Additionally, you can use broadcast/multicast and save the network some bandwith. You could just start vlc listening on a (rtp) multicast group on every client and send the data via one vlc streaming server.
GLORIOUS !!! JOIN THE ARMY !!! The silence has dominated the office desert for many years. BUT NOW !!! TIMES HAVE CHANGED !!! Now have a weapon to strike back !!! FULL VOLUMES AHEAD !!! THERE WILL BE SOUND !!!
LOL glad you like it :D
That sounds kinda complicated but cool ... have you got some entry point where I could dig in and start reading about that?
Perhaps [this](http://wiki.videolan.org/Documentation:Streaming_HowTo/Advanced_Streaming_Using_the_Command_Line) is of some help. The most complicated part should be to find the right parameters for vlc for the server and clients. Once that is done, it should "just work". 
gedit is a solid editor with a solid user base, for example, gmate has 629 watchers on github. In console environments I mostly use vim, but I enjoy using gedit for my rails projects. See http://rbjl.net/22-rubybuntu-4-make-gedit-better-than-any-ide for more details.
I didn't listen to the 'cast, I'm just here to upvote the dude's name. **LAYCOCK**
Awesome, that'll be really useful. I've been looking for libs for writing MS Office Docs for a while and there's really not a lot out there, apart from the win32ole based stuff. Any plans to write one for docx?
comments from twitter: http://twitter.com/#!/josh_cheek/status/104526871449972736 &gt; Kudos to him! But many files are in lib rather than lib/namespace. Then, gemspec sets lib as require_path, polluting all apps. http://twitter.com/#!/josh_cheek/status/104528396918329344 &gt; Have him read http://t.co/a1gZFpz
At this point i think supporting more of the features in xlsx is the priority, but docx support would be a good future goal.
Hm, I thought there were libraries out there that already did this. What separates this gem from those?
The only other library I have used is spreadsheet, and the major advantage I see is reduced code for making style changes and data parsing. Specifically i like his gettable function which lets you pull out columns from a spreadsheet so you can easily apply your logic to the fields you need. For instance if a spreadsheet contains something like monthly expense data you would pass the month names you wished to process into the gettable function and it would return just those columns to you instead of having to know positionally where they are. Simple yes, but useful.
Great! it's my background now.
I don't know if any of you guys remember this, from him: https://github.com/fogus/potion But it was always intriguing. I wasn't huge into ruby when he was the bees knees, but he did make me take a second and third look. He is the main contributing factor in why I look at rubbit everyday.
I need to find some way to make a _why day greeting card.
LISP/Scheme has great performance and is also good for scientific/AI computing... (just a suggestion, not from personal experience). Or you might try Scala and use JRuby to interface with Rails.
[NumPy / SciPy](http://www.scipy.org/) focus on speed, they're Python. there's also some toolkits for ML in that lang: http://www.google.com.uy/search?q=machine+learning+python and a subreddit! http://www.reddit.com/r/machinelearning :)
Posted 1 month from the future!
[Ruby/GSL](http://rb-gsl.rubyforge.org/)?
I'd suggest using something like Avro and/or Qpid to do messaging between languages and processes.
ruby-gsl works very well on *nix. You have the usual suspect on linear algebra, plus mutidimensional minimization and integration methods. 
Or redis pub-sub, or ZeroMQ. Redis is far easier to setup.
rubygslng
Ruby's [Matrix](http://rubydoc.info/stdlib/matrix/1.9.2/frames) class has a limited set of matrix operations. In Ruby 1.9.3-preview1, they [added new methods](http://redmine.ruby-lang.org/projects/ruby-19/repository/revisions/32351/entry/NEWS#L159) useful for Linear Algebra. I would try JRuby and use one of the many Java Machine Learning libraries.
If you are writing the machine learning parts from scratch, don't use Ruby for this, srsly. It's not what it's for. I'd be looking at Clojure or Scala. LuaJIT is awesome too, if you're just doing number crunching and don't need a lot of support libraries. If you aren't doing the maths and can depend on other libraries for the ML parts, JRuby is a good bet because, well, you already know it apparently, and there are quite a few ML libraries for the JVM.
ZeroMQ is not really enough for building a work queue, and don't fucking use Redis, please. If your workers stop dequeuing for whatever reason and requests start piling up, you'll run out of memory and become totally screwed. Yes, there's the VM. No, it's not useful for this. Also, there's no built-in support for timing out pending message consumption and handing them to another subscriber. This is very important when building a robust messaging system.
Sorry, I misinterpreted your original comment. You said "**messaging** between languages/processes". Both ZeroMQ and Redis are great for messaging. You should have specified Work Queues.
Are they well documented and maintained?
Yeah I released that right after I got it to this point. Sadly I dont wan't through away the already existing code base, hence the search. Still I agree that I should have planed this beter.
Has anyone used this library for production code before? I'm wondering how useful tools like these are on real projects.
Looks nice. I really like [Gosu](http://www.libgosu.org/) myself.
Only implemented Vector, Matrix and some methods on Rng. Almost useless
they're both great libraries. and i extend out both my hands with equal love and compassion to each one.
i definitely recommend checking out [sciruby](http://www.sciruby.com). i don't know how mature the project is, but the folks on freenode#sciruby can probably point you in the right direction
Old, but still useful [Matrix module extension](http://rubyforge.org/projects/matrix/). Some time ago a released a [gem](https://github.com/clbustos/extendmatrix) with 1.9.* support. I will look into 1.9.3 new methods, by the way. The eigen calculation is a must.
My best suggestion would be something that I haven't seen done yet: Surely there are existing C routines for doing these math functions. Why not put Ruby call wrappers around them and bundle them up into a Ruby gem? That way good performance is pretty much a given and nobody is re-inventing the wheel. 
Why not *another* Ruby game library? Because everybody keeps writing game libraries, and nobody writes games.
Yes, they are two great Apache projects. Avro is a part of the Hadoop project, which is Apache's implementation of MapReduce.
You're going to need them for C extensions or FFI where you're simply copying macro definitions from a header file. I mean I suppose you *could* make those methods in Ruby, but that could be a *lot* of extra work.
It's 42nd, as in forty-second :) 
I know that [Shoes](http://www.rubyinside.com/whys-shoes-grows-up-1014.html) can make games, but it's not specifically a game library.
I feel like this deserve some feedback: Why not just use [CanCan](https://github.com/ryanb/cancan) 
CanCan is a greatest one - but i dont like it cause of next 1. It uses current_user 2. It make conditions magic behind the scene 3. It set some limitation on ability class
Yes, we do need them. I believe MRI fetches constants much faster than performing method-calls. I suppose you could use class-variables instead of private constants?
Except the lookup rules are very different; constant lookups work differently to method lookups in `class_eval` situations (often to the benefit of the DSL) and also constants are also looked up lexically as well as up the inheritance chain - also a benefit in some situations.
Checkout these articles: [http://robots.thoughtbot.com/post/8700977975/2011-rubyists-guide-to-a-mac-os-x-development](http://robots.thoughtbot.com/post/8700977975/2011-rubyists-guide-to-a-mac-os-x-development) [http://www.phossil.org/2011/03/30/the-right-way-to-set-up-a-rubyrails-environment-on-os-x/](http://www.phossil.org/2011/03/30/the-right-way-to-set-up-a-rubyrails-environment-on-os-x/)
Thanks!
RVM is basically the best way to install ruby, and it's pretty much virtualenv, with the added bonus of having multiple versions of ruby (not just sets of gems). Just run the install for rvm (on their website), then run `rvm install 1.9.2` and `rvm --default use 1.9.2` then you should be set!
Hey! I've just come across your issues. RVM is a great tool for compiling, installing and switching different Ruby versions on MacOSX. This is the best way to start with Ruby + Rails on Mac.
As a beginner Rubyist I learned a lot form [this website](https://rvm.beginrescueend.com/rvm/basics/). 
RVM is definitely a must, it's the easiest way to maintain ruby and ensure you have the right environment for any given app. You can isolate gem dependencies as well, however as most people use bundler, it is no longer entirely necessary, because you can strictly specify which version of a given gem should be loaded for your app. However it does help when you want to make sure you are generating a new rails app with the right version of rails. Here is a step by step that I put together for a colleague last week https://gist.github.com/1160338
wow, the thoughtbot setup is awesome.
You should check Ilya Grigorik's take on machine learning - http://confreaks.net/videos/361-gogaruco2010-intelligent-ruby-getting-started-with-machine-learning and http://www.igvita.com/2011/04/20/intuition-data-driven-machine-learning/
It's getting there, but isn't quite ready for production code just yet. The primary issue right now is that Laser can't type code that's not in Ruby, and production code uses a *lot* of the code that's in C in MRI/Java in JRuby. Laser has a handful of stubbed out type info for the basic classes (String, integers/floats, hashes, arrays), but it needs a lot more. Without accurate type information, when it sees a call to an unknown, non-Ruby method, it has to assume the resulting object could be of any class. This is incredibly slow and pretty inaccurate, though luckily duck typing makes it not a complete waste. I'm experimenting with using Rubinius' standard library at present, in order to rapidly close this gap.
Hey, nice that you responded! I actually installed your gem and played around with it yesterday. My main question has been if it can predict method missing errors. I tried out some simple programs to see just that. Let's say I have this as temp.rb: class Foo end f = Foo.new f.bar Then running 'laser temp.rb', does in fact let me know that there will be a method missing error: (stdin):3 Error (10) - Method missing: Class:#&lt;Foo:2b0a584&gt;#bar However if I wrap that call in a method, it doesn't really seem to catch it. In other words, this doesn't say anything about the error: class Foo end def whatever f = Foo.new f.bar end Which is a little unfortunate, but not such a huge loss. I tweaked said program a bit more, just to see what it could and couldn't predict: class Foo end a = (1..3).to_a a.each do |i| if i == 3 f = Foo.new f.bar end end This works as expected and does give the method missing error. But if we replace 3 with, say, 1 million, things definitely start to take a while. I never actually let it finish. I assume that it's "simulating" each number from 1 to 1 million for the variable 'i', is that correct? So I guess in that case, my question is, since it doesn't catch errors in uncalled methods and takes a while for large datasets, what difference would it be (at least in the case of method missing) to run the program directly versus using your library? For what programs does this out-perform ordinary unit/integration testing for finding method missing and similar errors? BTW I do think what you doing is awesome and I would love to contribute if I had more spare time to work on these types of projects.
&gt; So I guess in that case, my question is, since it doesn't catch errors in uncalled methods and takes a while for large datasets, what difference would it be (at least in the case of method missing) to run the program directly versus using your library? For what programs does this out-perform ordinary unit/integration testing for finding method missing and similar errors? Well, here's the thing. It actually *does* catch the error in the `whatever` method, but you didn't call it. It would've picked it up. But there's another problem, which is when you call methods based on non-constant values, it discovers the errors but doesn't report it. I haven't figured out exactly how to report those appropriately yet. But I assure you we have the technology! You can actually see it working because it will report code that occurs lexically after the "missing method" call as dead: class Foo end def whatever(x) f = Foo.new f.bar p x end whatever(gets) Unfortunately, I just got struck by the Lion + Enumerator segfault bug and now Laser doesn't work, and I can't get the output. Shit. Well, if you try that code, you should get a warning about how x is unused, and line 6 is dead code. That's because it discovered the guaranteed raise on line 5. That guaranteed raise should also be a warning, but sometimes you write methods that are supposed to be guaranteed to raise, and I haven't put the work in to iron that distinction out yet. The same algorithm will pick up arity mistakes and privacy violations, though `protected` isn't well-supported yet. &gt; But if we replace 3 with, say, 1 million, things definitely start to take a while. I never actually let it finish. I assume that it's "simulating" each number from 1 to 1 million for the variable 'i', is that correct? Yeah.... I think I have the "stop simulating at X instructions" count set way, way too high. Eventually it'll suspect you've written an infinite loop (or a loop it just shouldn't be simulating) and switch to just the type/constant/raise propagation phase. And yes, it's got an interpreter for a hefty subset of Ruby in there. And interpreting Ruby in pure Ruby is laughably slow.
&gt; Yeah.... I think I have the "stop simulating at X instructions" count set way, way too high. Eventually it'll suspect you've written an infinite loop (or a loop it just shouldn't be simulating) and switch to just the type/constant/raise propagation phase. Is there any way to just run type propagation and not worry about constant propagation or simulating the Ruby runtime? In other words, what amount of type inference do you do in your program? I ask this because I was working on some type inference myself, but trying to juggle multiple freelancing clients in this economy, plus full time school in spring and fall means I haven't got much time for my own projects lately. But you can see what [I was working on earlier in the year](https://github.com/farleyknight/type_inferencing). It was mostly inspired by the the DRuby (Diamondback Ruby) project, plus various texts on how to give Lisp some type inference. It doesn't implement all of Ruby, nor does it even tell you about said errors. I think I've got some tests in there that shows what it does.. The only thing that really keeps me from contributing patches is that, I'm not really familiar with your coding / organization style, so I'm not sure what's been done, even with the specs. And without that, I wouldn't know how to go about adding something that fits your style. But if you could make that a bit easier, I would definitely add some code to make this work in a production environment. I would love to tell my clients that they're getting a higher quality product because of your tool.
I've personally had a lot more sane behavior out of my systems with rbenv than RVM. I really don't like the way things get handled with RVM and have had problems keeping it happy more than once. https://github.com/sstephenson/rbenv
Yep, rbenv seems like a solid alternative to RVM. Just looking at the output of "rvm --help" makes me cringe at the unnecessary complexity. I don't care about the controversial way that RVM overrides the "cd" command, that's fine with me; it's everything else. Quick, without looking, how do you upgrade RVM to the latest version? How do you list the available Ruby versions? How do you upgrade RVM's copy of Rubygems? RVM has developed a rapid pace, but the author doesn't seem to have planned anything, so the command-line interface is a huge mess.
RVM is the norm right now, with rbenv (described in another post) gaining popularity. Both allow you to manage ruby installations and let you pick which version to use for a given project. http://beginrescueend.com/ Run the command on the home page to install RVM. You're on a Mac so it should set up bash_profile correctly and will be good to go right away. Restart terminal or source bash_profile to load rvm, and then just run the two commands tominated posted. After you've got some experience with Rails, you can try other versions and distributions of ruby straight from rvm.
Install rvm, update rvm. rvm --list will show you list of available ruby versions rvm use 1.9.2 will switch your active ruby to that version, rvm install 1.8.7 will install said version and add it to your list of available ruby versions. rvm WORKS, you might disagree with how it does things, but truth be told, most of the time you forget it´s even there. which is what should happen.
Um, homebrew has 1.9.2 https://github.com/mxcl/homebrew/blob/master/Library/Formula/ruby.rb
Got a new MacBook coming next week - I'll be sure to use RVM this time to avoid any strange installation problems.
1.9.1 is not considered a good Ruby. The current homebrew recipe is for 1.9.2 but you should go with RVM or its ilk anyway...
I wasn't asking how, I was asking whether anyone would remember the main ways to use RVM. I keep typing "rvm --help" to find out. I can never remember "rvm list known", for example (to list available versions).
&gt; In other words, what amount of type inference do you do in your program? I use what's called the "Cartesian Product Algorithm" modified a little bit to use metaclasses when possible, and in my case, it's flow-sensitive which is an improvement over the original. CPA was designed for Smalltalk and Self. The papers are out there, but the idea is that when you see a method call, you look at what types come out of it based on the cartesian product of the types of the arguments. So if you see: x = foo(Fixnum | String, Float | Hash) then you consider the type of X to come out like this: x = foo(Fixnum, Float) | foo(String, Float) | foo(Fixnum, Hash) | foo(String, Hash) It's been implemented for Ruby before, although with more limitations, but pretty much, it's a conservative estimate of the concrete types that are passed to each method. I've also added a limited tuple type which models arrays of fixed size - that's how variable-arity dispatch is handled. &gt; The only thing that really keeps me from contributing patches is that, I'm not really familiar with your coding / organization style, so I'm not sure what's been done, even with the specs. And without that, I wouldn't know how to go about adding something that fits your style. This is definitely something I want to make easier. Loren Segal does an *awesome* job documenting how YARD works so people can experiment with it. I do a horrible job. Plus I've got some technical debt to clean up. The thesis does a decent job, but it's written for an academic audience, so it's got a lot in there a developer doesn't give a shit about. [Link](http://www.cs.dartmouth.edu/site-content/reports/TR2011-686/)
Just follow this free html book to the T. http://ruby.railstutorial.org/ruby-on-rails-tutorial-book It was the single thing that most help me get started in RoR after multiple failed attempts.
It was the first thing I did after wiping mine for lion. Also, you don't need to sudo to install gems.
1. ruby 1.8.7 (stock ruby on osx) will do you just fine. 2. yes, brew has 1.9.2: (why this line is needed to get pre to work is beyond me) % brew search ruby jruby ruby ruby-odbc macruby ruby-enterprise-edition % brew info ruby ruby 1.9.2-p290 
Meh... Alarmist post is alarmist. I do agree that using git urls as bundler sources is a stupid mistake... but that's a tangental point at best.
That's a pretty cool comparison! Anyone know of any decent resources for learning Scala? It looks like a nice language. 
Kind of a generic name, still a cool idea.
Not signing Gems, and not enforcing that all Gems be signed, is more likely going to screw us.
Open Source Pivotal Tracker?
How do I update? I ran `brew update` but nothing was updated.
*shrug*... I don't think that the OSX version is relevant... try to match up with this as best you can and see where you get. They're pretty responsive on irc if you get stuck. % sw_vers ProductName: Mac OS X ProductVersion: 10.7.1 BuildVersion: 11B26 % brew -v 0.8 % sudo brew update From http://github.com/mxcl/homebrew * branch master -&gt; FETCH_HEAD Already up-to-date. % git log -n 1 --pretty=oneline feba62bce0fabb51c076787e6dfd3ba1d5b16401 dotless 1.2.1.0 
Looks like it. Actually that might be something my team is looking for - PT is _okay_ but it would be cool to add or tweak few things to make it more suitable for our workflow - and this looks like something we could use.
http://www.scala-lang.org/node/1305
http://www.simplyscala.com/ and http://www.scala-lang.org/node/10695 , and have fun!
Do you use [gem signing](http://docs.rubygems.org/read/chapter/21)? If the whole "TODO" list there would be solved, this could solve the whole problem, no?
Very cool.
That was a fun interview... =)
http://www.artima.com/pins1ed/ http://ofps.oreilly.com/titles/9780596155957/ It's hardest language yet for me, in term of all the concepts it try to incorporate. 
If you're incorporating code into your project, then you have the responsibility to make sure it does what you want. RMS talked about this with his whole "evil compiler" story, right? That said, I sure as hell don't review all the code I use in my projects from foreign gems. I either use big-name gems, write something myself (I have NIHism), or use something small enough such that I can review it. In fact, I generally do review the smaller gems, but that's only because I'm a greedy bastard and need to know how they work. This is definitely a good starting point for discussion on it, though.
Sweet. Please clone github next. ;)
&gt; Hey Devs - You're too trusting. Using any third party library without reviewing the code could screw you. FIFY. Not a Ruby specific or Gem specific issue.
WoW looks neat! :)
This library seems to be very similar in concept to [VCR](http://rubygems.org/gems/vcr), except that it's got more modular storage engines (Redis, Memcached, or memory vs just the filesystem). I understand that VCR is primarily used for stubbing requests in a test environment, but there's nothing stopping you from using it in other environments, if necessary. Why put the effort into creating web instead of possibly extending VCR?
This. Even when you do need to use git urls, fork it use that or _whyday will bite you in the ass.
All I've wanted from PT is the ability to turn off the Velocity stuff. It doesn't fit our workflow. I don't know if this has that ability, but being open source, I can code it in
Interesting. I've been wishing I could tweak Pivotal Tracker to be more integrated with the deployment and QA stage of each story.
Gitorious is as close as you're going to get for a while I think. It has a lot of dependencies. Any Github clone is likely to have a lot.
It's only a matter of time before the C&amp;D arrives. Hard to believe Pivotal Labs doesn't have any patents or trademarks on the UI
The word you are looking for is copyright
No, I fully believe this code is not plagiarized 
I would be interested in features of Scala, that Ruby does not (yet) have.
I used to sign my gems back when I was using [Hoe](http://nubyonrails.com/articles/tutorial-publishing-rubygems-with-hoe), which made it really easy. I stopped signing my gems, since RubyGems was permissive about unsigned gems by default. Since the majority of Gems are not signed, requiring that all installed Gems be signed is kind of useless. If one cannot enforce signed Gems, then all an attacker needs to do, is MITM your connection, unpack the Gem, remove the signature files, add malicious code and repack the Gem. I wish RubyGems would adopt [PGP](http://en.wikipedia.org/wiki/Pretty_Good_Privacy), since it's easier to integrate with than OpenSSL, and is used to sign/verify all [Debian](http://wiki.debian.org/SecureApt) and [RedHat](http://www.rpm.org/max-rpm/s1-rpm-pgp-signing-packages.html) packages.
Actually you do, if you believe "It's only a matter of time before the C&amp;D arrives." then you also believe it is plagiarized - so which one is it? http://en.wikipedia.org/wiki/Derivative_work
awesome_print
gemedit
powify heroku pry
hirb, gem-open, ap
I'll be interested to see if a C&amp;D does arrive, in the immediate future I doubt they would bother as the project isn't feature complete. In the long run ... who knows. The project most certainly does not violate any copyright or trademarks, patents I don't know.
why not doing that with "bundle open gem_name"?
*hug* Thank you for telling me that this exists.
awesome_print, gem-toolbox, pry, bundler, lunchy, dotty
bundler and rake
Just Bundler, Heroku and Rake for now.
In addition to ones already mentioned: `wirble` and `irb_rocket` for `irb`; `minitest` (to get latest rather than the one bundled with 1.9.x) and `mynyml-redgreen` for testing.
recently, pry
probably for projects not using bundler if such still exist. personally I also like: mate `bundle open gem_name`
I personally consider stuff like Jeweler and Hoe to be deprecated now. They had a good life.
Here's a piece of ruby code: `Test::Unit` - that's two constants. How would you replace it with methods?
I keep my global gemset empty.
awesome_print, bond, wirble, rake, bundler, gemedit
not already mentioned: interactive_editor
ups 0:-)
Why?
Bundler generates the project, and adds Rake tasks for building/releasing the gem. Sure you get to edit the gemspec, but how is it really that different from Jeweler / Hoe?
Thanks for letting me know about pry! This looks _great_.
It actually doesn't require Rake at all.
Implementation-wise, the other posters here make very good points that color me inclined to say that we need constants. Semantics-wise, I think the manner you bring up is superior and I am tempted to bring that into my own code. That said, I think its syntax is a little clunkier than just plain constants and I would like to see it cleaned up or made specific to "constants". However, at that point, we'll have constants again.
 require 'bundler/gem_tasks' 
Read it. It actually only requires Rake::DSL if Rake::DSL is around. Edit: I do see what you're trying to say. Sure, it creates Rake tasks, but they aren't required to actually use Bundler. I never use Rake. Only gem build.
Sounds like an easy and selfish way to build up and perpetuate the jobs of "teachers" instead. 
Why?
Not only do you have penis hidden in your blog post, but you wrote "butt" as well. I am offended.
because it's pretty ugly, from a user experience point of view. the only real reason for it seems to be "rubies are red", not "this will make our page more pleasant to look at or easier to pick information out of"
wirble, hirb, bundler and rake
I think I've been trolled after looking for said penis for several minutes. 
;-)
But... That's a very real reason to use red ::
at the very least it's putting branding above usability.
Using the color red? Maybe you don't like the implementation, but the reason to use red for Ruby-related sites is sound. 
in my personal opinion, having the odd red element is sound branding policy, but saturating your site with red as a major functional/thematic element is just ugly. it is not a colour that rewards heavy use.
I'm inclined to agree with you. 
[Probably not](http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/39065).
I agree that writing a gemspec simplifies the gem creation process. But adding bundler and rvm is unnecessary overhead. For a more straightforward guide, see http://guides.rubygems.org/make-your-own-gem/
Rubygems will (99.99% sure) _never_ adopt PGP. Sorry. But we just can't introduce such a dependency.
NO! putting so much documentation inside the rubygems page itself is fucking stupid and looks ugly, stop it
I could see how having a Windows user install PGP, so they could install a gem that had a PGP signature, would be painful. Still, I wish Rubyists could leverage PGP more, it is a very robust file signing/encryption solution, already installed on every Debian / RedHat system.
&gt; you can **pe** easily **nis** override to_s to return something other than a String master level
I believe you can do that in PT. 
Wait, since when does the bang "!" imply a boolean return? Methods ending in "?" for sure. I know of two commonly used differentiations the bang usually implies (either that the method modifies the callee such as #reject! or #merge!, or sometimes used to signify that the method can raise an exception such as rails' #save!), but I've never seen it imply a boolean.
I believe the ! there is talking about overriding the ! operator itself, not methods that end in !. This wasn't possible in ruby 1.8 but is possible in 1.9. irb(main):004:0&gt; true.! =&gt; false irb(main):005:0&gt; def true.! () true end =&gt; nil irb(main):006:0&gt; true.! =&gt; true irb(main):007:0&gt; !true =&gt; true
Ah, that makes a lot more sense thanks
lol you got owned!!!!
you are welcome :)
Shame, I was looking forward to the faster loading times
The other posters got what was going on there. On the topic of bang, though, I have been wondering if Laser should make any inferences about a method name ending in "!". The general idea is that "`foo!`" means "potentially dangerous version of `foo`", so maybe Laser should tell you about that. If it doesn't find a method with a similar/equal signature with the same name, without the bang, say "hey, ! has a certain idiomatic meaning, etc etc". I'm less confident about writing warnings for bang, since it's less understood as a community anyway. We'll see.
Yeah, I've got it now thanks, I agree, I think there isn't necessarily a consistent enough usage of the bang, and a high number of unwanted warnings could be likely. That said, a disabled by default check for safe versions of bang methods _might_ be nice, though I doubt I'd particularly miss it as a feature, I've often written only bang versions because sometimes there never is a safe version of a function (e.g. delete! removing something from a remote service).
I 100% agree, I find the extra rake tasks for holding your hand provided by jeweler to be quite unnecessary, when all you need to do is "gem build" and "gem push" doing it yourself is definitely the way to go. I do like using hoe though, not for it's extra layers of support, but because it can template a new rubygem using the file layout, that I like (and have written by hand, picked from the best parts of bundler/jeweler/hoe's default setup). This is [my default gem setup](https://github.com/jeremyolliver/gem_template/tree/master/default)
I would have just used an alias.
I've developed .NET (C# and VB.NET) and currently develop in RoR. (I've also developed in classic ASP [blech], Cold Fusion and PHP). Here's my take on it. (I'll only discuss RoR vs. .NET) 1. Much cheaper technology stack. Sure, you can run .NET on mono, but almost nobody does. Not to mention the cost of Visual Studio. Sure you can develop without VS.NET, but who does? I can run RoR on Linux/Apache quite efficiently and it easily supports all of the open source data stores, and do my development in cheap/free programmer oriented text-editors. I use textmate, but there are many other free/cheap choices. 2. Ruby is a more 'expressive' language. The code reads almost like words on a page. Yet, you do in only a few lines that which takes many more in other languages. All things are objects and a lot of the 'busy work' you typically do over and over again in other languages just isn't necessary in RoR. 3. Awesome community support. There's just a ton of 'invented wheels' out there for you to just freely grab and roll into your project. While this does exists to some degree in the .NET ecosystem, most of the good stuff is pay to play. 4. Rails has really set the standard for MVC architecture. Almost all MVC projects out there try and emulate Rails' functionality. It is very mature, actively developed and continually pushes the bleeding edge of what people are doing on the web. 
You can alias a command, but you can't alias a command *line*. You can use a bash function for this. For something like this, though, it might be better served by having the code in question reference a RACK_SERVER env variable and attempt to load the the declared default that way.. 
I think his first mistake was choosing thin... it all went downhill from there (hah)
I briefly started a job in .NET and 2 months in we switched to Ruby on Rails. My biggest frustration with .NET was the very well done 3rd party libraries/projects that got completely ignored because they didn't receive Microsoft's formal blessing and the community was afraid to adopt it. Too many good projects withered while Microsoft eventually got around to building a crappier version of their own that after awhile would become decent but was adopted right away just because MS did it.
Is he originally a Java programmer?
What the f is a gemset?
They?
as the name says it's a set of gems, usually isolated from other gems. read more at [https://rvm.beginrescueend.com/gemsets/](https://rvm.beginrescueend.com/gemsets/)
The [person or persons responsible](https://github.com/wayneeseguin/rvm) for the change.
The [person or persons responsible](https://github.com/wayneeseguin/rvm) for the change.
He said the CODE is not plagiarized, not the UI. The UI is likely patented, not copyrighted.
I was wondering why he didn't do that as I read through as well. He addressed it pretty thoroughly in the blog comments: &gt; &gt; Why not just create a Bash alias for “rails s thin”? &gt; No reason, creating an alias is a valid way to get around the issue. I do have a couple of niggles against it. Firstly it is creating a totally different command rather than using rails s which everyone knows, not a biggie but nevertheless. &gt; Secondly, every developer has to create one of these as it doesn’t live in the codebase but rather in your machine environment, also not a biggie but there it is. &gt; Lastly if you’re using RVM with a separate gemsets per project, when you jump into a different project which doesn’t have thin as one of the installed gems, your alias is still active and will blow up if you try to invoke it, of course you know not to do that but once again there it is. &gt; Solving the problem within the codebase avoids all these issues. 
&gt;The UI is likely patented, not copyrighted You got it wrong, the UI is copyrighted.
yes of course, hindsight
&gt; Luckily, since we're using Ruby, we can reopen the class and replace the method with our version. What does the author mean by "reopen the class?" All they are doing is editing the source file. It isn't a feature unique to ruby at all.
I'm making the assumption that Wayne had a bit of help.
Totally agree. Exhibit A is MonoRail, which was a great port of Rails to .NET that was bullied into irrelevance by ASP.NET MVC.
I dunno. I had a stint last year where I did a lot of .NET development in C#. If C# ran (well) on unix-based systems, I'm not sure I'd use ruby any longer. Been paid to do ruby for the last 5-6 years now and third party libraries, RTFS culture (no documentation), speed woes, and in-fighting within the community leave a lot to be desired. C# has most of the features that Ruby does and then some, you just have to dig a little deeper in the language to get there.
it has much better support for laziness
Interesting, but I wonder how often I'd need a tool w/ this much power. With some recent API work I've been doing I've used a built-in python feature to pretty-print JSON, for example: curl -s http://api.twitter.com/1/help/configuration.json| python -m json.tool
http://www.castleproject.org/monorail/ It used to be called Castle On Rails. I googled "MonoRail .NET"
Don't ruin my mental image of Wayne as a one-man dynamo of Ruby and Bash awesomeness.
Survey says, back to default source project .rvmrc https://github.com/wayneeseguin/rvm/commit/7d7cb4591c311a913eb0ff908ef514ccff154ff1
I have seen ads by recruiters that where 100% identical to the ad by the employer in a small city in Germany and on the same site of the German Federal Employment Agency, which runs a site where you can place ads for free and which is used by many German companies. At the last company I worked it was quite common for recruiters to call without being asked, when they placed an ad. Seems they are scanning the market carefully and check against resumes of people registered with them. Which is their job after all.
What the f is a gem?
Well it looks like Melbourne is the place to be. Too bad the cost of living in Melbourne and Sydney is so high. 
I wonder how widespread the problem PilotPirx suggests is globally?
thank you Wayne. Only sensible option, don't change it to suit others, write it for yourself! Don't like it - go fork/somewhere else!
I believe he edited a file _other_ than the source.
I have no idea how that got there. Either seydar put it there, or one of my roommates slipped it in, or I put it there subconsciously. Either way, there's some tough questions to be answered.
I thought it was a subtle joke about how one might override the to_s method in order to insert hidden dirty words in a blog post
You can always build a custom ruby with the relevant patches - check out my [ruby-patches](https://github.com/michaeledgar/ruby-patches/) repository!
Beginner level basic practices.
Fat models are a bad idea. Also overriding to_s doesn't give you that much and will probably bite you in the ass sooner or later. 
"methods are objects" - wrong.
&gt; Fat models are a bad idea. Why is that?
Lots of reasons. First of all it's unnecessary memory usage. You load the module up and it loads up all kinds of junk you probably don't need at that time. They really slow testing and make it hard for your mock them up. They often manipulate multiple models and violate the SOLID principles. They often have many callbacks and observers etc which leads to spaghetti code and weird side effects. Every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class. 
Fat models make testing easier and pull code out of controllers so it's re-usable. Not sure why you think they are bad for testing... If your model is getting too fat you can always wrap it in a view decorator or something to pull some stuff out while maintaining re-usability. There are a lot of ways to re-factor a model that's too fat, but making the controller huge is usually not a good one. What would you suggest?
It's part of the Castle Project (best know for Windsor IOC) [MonoRail](http://www.castleproject.org/monorail/)
Personally, I don't like the "fat model, thin controller" mantra. Why not "thin everything"? When model files get to 600+ LOC they get kind of unwieldy. Break them apart into more classes or modules. Remember models don't need to subclass `ActiveRecord` or actually access your DB at all.
I think you may be referring to a different concept here than what most people are thinking. Most are probably thinking *"try to put logic into models instead of controllers"*, while you're probably thinking *"don't bloat your models"*. In my opinion, the two are not mutually exclusive. You can put most of your code into models, but still keep your models slim by breaking them apart into more classes/modules. Boom: thin controllers, thin models. Putting those two concepts together kind of invalidates much of your points. Memory usage would be leaner if you don't auto-load everything. They're faster to test because you don't need to test via Capybara (just make unit tests of your model instead).
I wouldn't call this a static site builder. This is pretty dynamic. The tagline even says "Static Sites Made Powerful." 
If your models and controllers are thin, are you putting everything into an /api like directory? (Really ugly ad-hoc code ahead) class FooController def lots_of_code m = FooModel.find(params[:id]) api = FooApi.instance api.do_that_thing(m) end end I like this layout best since your models are more easily sharable and the logic is outside the controller, so you can share it w/ other things, like rescue (instead of one gigantic app)
This is a static site generator, similar to [Jekyll](http://jekyllrb.com/). You build the site using dynamic tools, but the output is the static files, which you then put on a web server.
It generates a static site, as the name and description implies. &amp;#3232;\_&amp;#3232; 
If you mean *"where should FooApi be defined?"*, the answer is usually either in `/app/models` or `/lib` depending on it's purpose. Alternatively, you can break it apart into a plugin if it's compartmentalized enough to be reuseable.
you're thinking to specifically about one source file. The model _layer_ however you have it should contain all the logic.
You're right - I've fixed the error in the post.
lol, it's down
Hosted on GitHub Pages, so blame them :)
lol, works fine for me
I wonder how this compares to [nanoc](http://nanoc.stoneship.org/)?
You should post this to [r/rails](/r/rails). This subreddit is more Ruby-centric (with the occasional sprinkle of Rails).
You should post this to [r/rails](/r/rails/). This sub-reddit is more Ruby-centric, although we enjoy reading about Rails internals.
Or [middleman](http://middlemanapp.com/).
or [Jekyll](https://github.com/mojombo/jekyll)
One thing nanoc can do that stasis can't (I think) is handle multiple filters for one item. For example, you can do the following in a nano `compile` block (the example is from nanoc's docs): filter :erb filter :kramdown layout 'default' filter :rubypants I also like this for (say) running `.scss` files through Sass and then a minifier.
It's a middle ground: the *building* part is dynamic, but the result is static HTML, CSS and JavaScript. I find this to be the best of both worlds for many cases. Imagine a largish site with many fast changing menus, navigation sections and lots of content. You can write the static content as content, but use the dynamic power of Ruby (or whatever language your static site compiler uses) to put together the menus (for example) at a higher level of abstraction. The resulting site is faster and more secure than a typical PHP+MySQL CMS (because it's just HTML), but you can make big sweeping changes far more easily than dealing with only raw HTML files.
I think Tilt already handles that? `foo.erb.kramdown` ?
Did not know that. Thanks. (That said, I doubt Title can do `.scss.rainpress`.)
I don't run "hundred" plus or even "ten" plus infrastructures and I still prefer Chef after trying out all three. Chef's community and tools are larger than what Sprinkle offers, that alone drives a lot of value. Chef's has a great command line tool `knife`. It's methodology for handling attributes gives you a lot more flexibility than Sprinkle. In my opinion if you're considering using Sprinkle, don't bother just freeze your AMI's and update them as needed. It's not worth the effort and time it will take you to code, and debug. If you plan on using configuration management as it's indented, go with Chef. It's worth the effort and adds roflscale.
I have tried all three as well at different times and I wouldn't say it is as simple as all that in regards to you saying to just always use Chef. I like Chef and I have used it in the past for a previous company. Once it was setup, the capabilities made it a valid choice. I would tend to use Chef over Puppet for my larger needs if they arise but that's very much a subjective choice and because I am using Ruby for most of my applications. However, I think there are more considerations. There are a laundry list of useful existing sprinkle recipes (included in my post) that make pulling in components a breeze. You can find a recipe for nearly any common library that you might need installed (agreed this is true for chef as well). You can download passenger-stack, change one line and deploy a full passenger rails stack with nothing more then a 'gem install sprinkle' and a single command. I think it is hard to deny the setup and configuration necessary for sprinkle is considerably less. It is extremely lightweight and simple to use and understand. Sprinkle is also quite a bit more flexible and robust then just having a saved AMI contrary to what you suggest. In addition, the ruby community is already highly familiar with Capistrano and scripting using that tool and it turns out it is well-suited for provisioning as well although Sprinkle provides a nice abstraction on top. I am not saying Sprinkle is always the right answer (although it was for us at Miso), but it's also not quite as worthless as you propose here. I would recommend people compare the different options and make an informed choice for themselves.
&gt; You can find a recipe for nearly any common library that you might need installed (agreed this is true for chef as well). You can do the same for Chef &gt; You can download passenger-stack, change one line and deploy a full passenger rails stack with nothing more then a 'gem install sprinkle' and a single command. With Chef the 'quickstart' guides put you on the same path. &gt; It is extremely lightweight and simple to use and understand. Sprinkle is also quite a bit more flexible and robust then just having a saved AMI contrary to what you suggest. I find the major difference between a saved AMI and sprinkle is verification. Neither allow you to fully automate infrastructure. I'll admit that sprinkle does come with a bang for your buck, but I like to remind devs that if you plan to automate infrastructure your sprinkle code becomes technical debt. :( &gt; In addition, the ruby community is already highly familiar with Capistrano and scripting using that tool and it turns out it is well-suited for provisioning as well although Sprinkle provides a nice abstraction on top. Speculation, but if you use Chef, you no longer need Capistrano, so that replaces a dependency from your project. --- Sorry, I didn't want to jack your posting, I just felt like you threw Chef aside without justifying valid use cases for them. Sprinkle does have its uses, but I feel like most of them are superseded by Chef. At the end of the day it's whatever works and about what you can put in your customers hands, glad it's working for Miso. 
Fair enough, thanks for your input. My blog post title was intentionally chosen to attract feedback and be a bit hyperbolic. I actually don't recommend people "forget" Chef, it's a great tool.
Thanks for your thorough and reasoned response to the blog title's request.
meh, i disagree.
&gt;Every object should have a single responsibility, and that responsibility should be entirely encapsulated by the class. That's a good principle to keep in mind.
because you want a static site
Amen! One thing I notice though is that some developers have a hard time distinguishing when to do a *has a* or *is a* relationship. Should a `class Car` have an `attr :engine` (has a), or should a Car be an engine? In the real world, this is easy to answer (a car has an engine of course), but in the development world this gets blurry. Should the CSV exporter functions of my `List` class be in the List class? Or should there be a `SheetExporter` utility class? Doing the former too much results in bloat too easily (leading to excessively fat models), and happens in real projects more often than I want to see.
looks promising. i ll give a test.
It's not a science. Nothing in development is. It's just a principle to help you guide your decisions. I couldn't tell you how many times I decided some functionality should be in one class and then moved it to another class. Once great thing about Ruby is that you can put the behavior into modules and mix it into any class you want including your controller. So maybe stop thinking about classes so much and start thinking about behaviors and functions. 
Sounds like you just volunteered to fix it.
[ChiliProject](https://www.chiliproject.org) [does](https://www.chiliproject.org/projects/chiliproject/wiki/Installation).
People have volunteered to fix it before, and their patch sat idle on the tracker for 6+ months, so I don't see anyone wasting their time on that one again ;-) 
I contributed a little patch to Redmine once. Waited two years until it got closed because it wasn’t relevant anymore.
Doesn't support rails 3.0 either.
No, it doesn't. 1.9 support is "beta" at the moment, and there are still "some encoding issues".
what do you care which version of rails it runs on?
what do we care what version of ruby it runs on?
Maintaining 2+ versions of ruby on a production box is a pita. Maintaining 2+ gem repos is easy as pie. 
Both are easy with RVM. rvm install 1.8.7 rvm install 1.9.2
when you are writing plugins it makes life harder.
Official RubyGems 1.8.10 ChangeLog: http://blog.rubygems.org/2011/08/25/1.8.10-released.html
This belongs in [r/rails](http://reddit.com/r/rails).
Now you have two problems...
Thanks.
This is a good article, and gives me a few avenues to explore.
coz after 10 years of vb programming she discovered c# but bought a Mac
You don't need an IDE just to run the code. Just type "ruby filename.rb" If you want an IDE I like redmine.
They will also need to install the dependencies before they can just run it. Once you have ruby installed (with your rubyinstaller), from the command prompt, you'll need to install savon and pp (assuming the rubyinstaller also installs rubygems): ruby gem install savon ruby gem install pp ruby filename.rb
Well damn, I think I like Ruby! I did just that once it was installed, got an error relating to Savon (expected). Took about 2 seconds to find the command I needed: gem install savon That installed the gem very easily, then I ran the code. Granted, I'm getting errors that I don't understand, but at least they're not related to the environment/Ruby install I don't think. 
What is pp? I managed to install Savon no problem. Googling 'Ruby Gem PP' doesn't really get me much, unless it's 'prettyprint'?
It is for pretty-printing. It should be in the standard library, so you don't need a gem for that.
Can you paste one of the errors?
So from the code below, it's clear there's some sort of issue calling the web services. It appears to be taking issue with the line of code where Savon calls the WSDL. The username/password are correct, as is the WSDL location. It doesn't seem to like SSL (https). Anyone have an idea? C:/Ruby192/lib/ruby/1.9.1/net/http.rb:678:in `connect': SSL_connect returned=1 e rrno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL ::SSL::SSLError) from C:/Ruby192/lib/ruby/1.9.1/net/http.rb:678:in `block in connect' from C:/Ruby192/lib/ruby/1.9.1/timeout.rb:44:in `timeout' from C:/Ruby192/lib/ruby/1.9.1/timeout.rb:89:in `timeout' from C:/Ruby192/lib/ruby/1.9.1/net/http.rb:678:in `connect' from C:/Ruby192/lib/ruby/1.9.1/net/http.rb:637:in `do_start' from C:/Ruby192/lib/ruby/1.9.1/net/http.rb:626:in `start' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/httpi-0.9.5/lib/httpi/adapter/n et_http.rb:74:in `do_request' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/httpi-0.9.5/lib/httpi/adapter/n et_http.rb:22:in `get' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/httpi-0.9.5/lib/httpi.rb:86:in `block in get' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/httpi-0.9.5/lib/httpi.rb:194:in `with_adapter' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/httpi-0.9.5/lib/httpi.rb:84:in `get' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/savon-0.9.7/lib/savon/wasabi/do cument.rb:33:in `resolve_document' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/savon-0.9.7/lib/savon/wasabi/do cument.rb:15:in `xml' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/wasabi-2.0.0/lib/wasabi/documen t.rb:110:in `guard_parse' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/wasabi-2.0.0/lib/wasabi/documen t.rb:103:in `parser' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/wasabi-2.0.0/lib/wasabi/documen t.rb:25:in `endpoint' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/savon-0.9.7/lib/savon/client.rb :109:in `preconfigure' from C:/Ruby192/lib/ruby/gems/1.9.1/gems/savon-0.9.7/lib/savon/client.rb :75:in `request' from filename.rb:28:in `webserviceName' from filename.rb:42:in `get_session_id' from filename.rb:48:in `&lt;main&gt;'
Sure! I posted it as a separate message to hopefully avoid clutter.
You need the no verify flag set for Net::HTTP : http://www.rubyinside.com/nethttp-cheat-sheet-2940.html
This might help you: http://martinottenwaelter.fr/2010/12/ruby19-and-the-ssl-error/ 
Looks like the SSL certificate of the service you are connecting to is probably a self-signed certificate so it's failing SSL verification. You need to set the `verify_mode` for the Net::HTTP object to either `OpenSSL::SSL::VERIFY_PEER` or `OpenSSL::SSL::VERIFY_NONE`.
So, since 3 people said the same thing, I'll just reply to myself. First, thanks for the very rapid response. Looks like you're right. I tried putting this at the beginning of the code: &gt;require 'net/https' &gt; &gt;require 'uri' &gt; &gt;uri = URI.parse("https://link-to-wsdl-file?wsdl") &gt; &gt;http = Net::HTTP.new(uri.host, uri.port) &gt; &gt;http.use_ssl = true &gt; &gt;http.verify_mode = OpenSSL::SSL::VERIFY_NONE But I'm still getting the same error. Am I putting it in the wrong place? Or using it incorrectly? I didn't change anything about where Savon calls the wsdl file later on in the code. Do I need to 'utilize' or otherwise access the HTTP code change I made? 
If you need to locate Ruby files in Ruby stdlib, or from other Gems, use the `gem which` command: $ gem which pp ~/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/pp.rb
You're using the savon client so you need to set the `verify_mode` attribute in the right spot: http://stackoverflow.com/questions/4325563/ruby-savon-connect-ssl-connect-returned-1-errno-0-state-sslv3-read-server-cer/4433647#4433647
So it looks like you're calling the [`Savon::Client#request`](http://rubydoc.info/gems/savon/0.9.7/Savon/Client:request) method which accepts a block, so you'd want to set the `verify_mode` on the HTTPI object there (the Savon client is using the [HTTPI](https://github.com/rubiii/httpi) library): response = savon_client.request(:whatever) { # this block is executed within the context of the Savon::Client object http.auth.ssl.verify_mode = :none }
I think you mean rubymine. Redmine is an issue tracker: http://www.redmine.org/
yea brainfart.
Hmm, I've been trying different things, but having no knowledge of Ruby, I really don't understand what I'm doing. I've just been stabbing blindly at answers. If you care to take a stab at it, I would be most greatful, but at this point you're bordering on doing my work for me, so I understand if you don't want to. This is the entirety of the code that relates to web services: &gt; //Used to do your webservice calls &gt;def webserviceName (method_to_call, options_to_send) &gt; results = @client.request method_to_call do &gt; soap.body = options_to_send &gt; end &gt; results.to_hash &gt;end &gt; //Create a session and return a session id &gt;def get_session_id &gt; Savon.configure do |config| &gt; config.log = true &gt; config.log_level = :info &gt; end &gt; @client = Savon::Client.new do &gt; &gt; wsdl.document = "https://wsdl-location-url?wsdl" &gt; end &gt; @session = webserviceName :login, {:userId =&gt; "demouser", &gt;:password=&gt;"demoUser"} &gt; @session.to_hash[:multi_ref][:session_id] &gt;end 
Just a quick note: 1. Rails Hotline has got your back if you have any questions or troubles, you can find out more here: http://www.railshotline.com/ 2. Use `rake rails:update` with the `d` option on each file, it's your friend.
Yup, that's the only gem I know of that goes by 'pp'.
Just a quick note: 1. Rails Hotline has got your back if you have any questions or troubles, you can find out more here: http://www.railshotline.com/ 2. Use `rake rails:update` with the `d` option on each file, it's your friend.
You add it here: def webserviceName(method_to_call, options_to_send) results = @client.request method_to_call do # set the ssl mode http.auth.ssl.verify_mode = :none soap.body = options_to_send end end
Wow... I never knew Rails hotline existed. I would volunteer, but I'm more of a Ruby guy than a Rails guy.
I'm working on getting a Ruby version up.
I tried something similar before and I just tried what you have, but I still get the exact same error. No change from the error I posted above. I don't have to do anything to get ruby to pick up code changes, do I? I mean, it's just running a script, so there's no compiling or anything, but it just seems odd to me that the error message doesn't change at all (besides timestamps).
Am I missing something here? I have Redmine running on 1.9.2 just fine...
Yeah, it is immediate, there's no compilation step or anything.
"Yak" is the proper spelling of our hirsute bovine friend. (The article uses "yacc" to reference the parser generator)
Does YAML have any advantages over a Hash? Language agnostic? When dealing with YAML, I've always wished I could just use a Hash; a familiar, ruby hierarchy.
Ya, I can't spell. :'(
&lt;3 Tenderlove. It's all good (I used 'hirsute' just for you, srsly).
Yes, that's one. Two, a hash ins't saved on disk. Three, YAML is a lot more than key-value pairs, you can [check out the spec](http://yaml.org/spec/1.2/spec.html) for more.
You can parse YAML without having to eval potentially malicious Ruby code, which would be a problem for [rubygems.org](http://rubygems.org/). In fact, you can represent all of the information from your gemspec as [pure-YAML](https://github.com/ronin-ruby/ronin/blob/master/gemspec.yml).
 if a[i] = b[i] is assignment, not comparison.
I think the main thing here is that you're subclassing Array to make LotteryTicket, but you never use the LotteryTicket array itself. I believe you want to use its array functionality to store the tickets? Instead you're storing the ticket data in LotteryTicket#ticket. So either you want to run compare with item.ticket, or you want to modify the code so that tickets are stored in the the LotteryTicket array itself (easiest way - call self.[])
Yaml really needs an "include" feature. I don't know why they haven't gotten around to that one yet.
I refactored and commented for you. Seems to work for me: # This class stores a set of three lottery numbers class LotteryNumbers # This is the size we want. Variable SIZE = 3 # Creates a setter (LotteryNumbers#numbers=) and getter (LotteryNumbers#numbers) for numbers attr_accessor :numbers # Initializer will take as many arguments as we want def initialize *args @numbers = args raise ArgumentError, "#{args.size} items were assigned to numbers, it should be #{SIZE}" unless args.size == SIZE # Probably not the most elegant way to do this, but it'll do for now end # The score of this set of numbers as compared to another array def score_compared_to array score = 0 @numbers.each_with_index do |number, index| score += 1 if number == array[index] end score end end # This class is a ticket, which has an owner and multiple lottery number sets class LotteryTicket attr_accessor :owner, :tickets def initialize print "Please enter your name: " @owner = gets.strip print "How many tickets would you like to buy? " number = gets.to_i until number != 0 print "Please enter a number, you did not enter a number. " number = gets.to_i end @tickets = [] 1.upto(number) do |i| print "For ticket ##{i}, please enter three numbers between 0 and 9 " a = gets.split.to_a.map{ |x| x.to_i } if a.length != 3 puts "You must put three numbers " redo end @tickets &lt;&lt; LotteryNumbers.new(*a) end end def score_tickets_against array @tickets.each_with_index do |ticket, i| puts "Ticket #{i+1}: #{ticket.score_compared_to array}" end end end myticket = LotteryTicket.new winner = [1,4,5] myticket.score_tickets_against winner
Is this an assignment for school?
why did you do his homework?
Because whenever I see someone using an until loop where it should be an upto, some part of me dies inside.
I'm pretty convinced this is an assignment, so I don't want to give too much specific help. Here are some pointers, though: 1. Use to_i, not to_f. Lottery numbers are integers, not floating point, ditto to the number of tickets to buy. 2. You don't actually verify that the user entered digits. "hello".to_f is 0.0 3. You can delete a lot of code by asking the user to input numbers separated by spaces, then chopping up the resulting string. Less code = less opportunity for error. 4. You're using a while/until loop for nearly everything. Most of the time you'll want to use a method from the Enumerable module instead (Arrays and Strings have these methods). 5. Your logic for comparing two tickets is wrong. Consider the tickets 123 and 234. They have two matches, but your logic would say they have 0. Don't forget to account for duplicates, for instance 223 only has two matches in common with 123. 
Just for fun, here's my code for scoring a ticket. Use it if you feel like you could explain it to the satisfaction of anyone reading it: `(ticket &amp; winner).map {|n| [ticket.count(n), winner.count(n)].min}.reduce(0, &amp;:+)` &lt;3 Enumerable
I smell homework...
Ah thanks for the help everyone...this is NOT an assignment for school, as I've graduated and now want to learn programming. I believe this is in why's poignant guide to ruby, but I wanted to try to do it on my own. There's a lot I haven't been exposed to yet, and you guys are helping with that. Thanks, and upvotes all around.
Nope. I'm done with school and my only comp class was a very very basic java class, so basic in fact that we did almost nothing.
Sorry, I should put away my jump-to-conclusions mat.
Wow, that's some crazy metaprogramming that allows this syntax to work: d { @first; @second; @third } log_buddy finds out the file name and line number of the Ruby code that has called `d()` (using [`caller`](http://ruby-doc.org/core/classes/Kernel.html#M001397)), it then *opens* this file and searches for the line in the file, extracting this as a string. It then grabs everything it can in the braces, splits on `;`, and then `eval()`s each variable within the binding of the block given to work out its original value. It's a nice way of (mis?)using blocks, but everything it does could be done without reading the contents of your program and `eval()`'ing if they had gone with this syntax. d { @first, @second, @third } Edit: The only downside being that you couldn't pass log_buddy whole expressions, which I now suppose is the actual intent of log_buddy. I think the author probably imagined allowing people to wrap whole lines of code in `d()` to log them, in which case, well done.
Or use a debugger, you know, for debugging. 
I've been loving just launching a repl session with Pry.
why does it use caller when it could use `block.binding.eval("__FILE__")` and `block.binding.eval("__LINE__")` ?
Being a bit new to ruby and typically using VIm as an editor what do you recommend for debugging?
He's right, mintiest is much better than RSpec. I'm forced to use RSpec at work, I _hate_ its DSL, and I _hate_ how unbearably slow it is. I don't think I've been as frustrated and annoyed by a single library my entire life. 
Spork doesn't make RSpec "less" slow. It is already slow. Spork preloads the Rails environment so the boot process takes less time, but if you compare mintiest versus rspec at _running tests_, it is fucking slow. 
Here's a tip, don't use RSpec. You'll pay for it later, especially as your suite gets bigger. 
* You probably don't need Bundler if you gem has &lt; 5 dependencies. * Needs a ChangeLog / History file. * I would make `Urban::Web` a module, since it doesn't have state. Maybe inline directly into `Urban::Dictionary`? * `Dictionary#process` probably doesn't need to return an `OpenStruct`, a normal `Struct` or `Hash` should be fine. * Good job on the CLI, simple and easy to use.
You need Bundler if you have even 1 dependency (other than rake). Even if it's just a dev dependency. Can't tell you how many times I've gone to run the tests on a lib whose only dependency was RSpec 1.x, and the tests won't even run. I have to add a gemfile to their app and use trial/error to find what RSpec version they were using. Really annoying and most people won't care that much. Always use Bundler.
Nice use of OptionParser, though I would do the following things: * Just put all that text in the banner; you can make it multi-line * Put the version in the banner and kill --version * kill `options.exit` and the explicit `opts.on('--help')`; `OptionParser` gives you that already. * The check for not random and no phrase should generate an error message on `STDERR` before you print the help on line 66 (of `cli.rb`) The tests look nice; if you want to do a full-blown integration test, [aruba](https://github.com/cucumber/aruba) is a bunch of cucumber scenarios to help. 
Thanks for the feedback. You make a good point about moving Urban::Web into a module due to its stateless nature. I originally did have it as part of Urban::Dictionary. I moved it because I was thinking if Urban Dictionary ever re-implemented a true API, Urban::Web would just be replaced by that, or an interface to it (With the assumption I would need to clean up their results). Thoughts? I know it is insignificant to be that worried about architecture on a small project like this, but it is more about learning. 
What would putting all the text in the banner accomplish? Would it not double print the information for random and list?
Nice job. Here's a few thoughts, I'll rank how important I think each is with a star rating (out of 5 stars) (5/5) If you ask for a word that Urban Dictionary doesn't know about, it blows up: urban -l lkjlkjlkjlkjlkj /Users/joshuajcheek/.rvm/gems/ruby-1.9.2-p180/gems/urban-0.1.3/lib/urban/dictionary.rb:29:in `process': undefined method `content' for nil:NilClass (NoMethodError) from /Users/joshuajcheek/.rvm/gems/ruby-1.9.2-p180/gems/urban-0.1.3/lib/urban/dictionary.rb:23:in `search' from /Users/joshuajcheek/.rvm/gems/ruby-1.9.2-p180/gems/urban-0.1.3/lib/urban/cli.rb:19:in `run' from /Users/joshuajcheek/.rvm/gems/ruby-1.9.2-p180/gems/urban-0.1.3/bin/urban:7:in `&lt;top (required)&gt;' from /Users/joshuajcheek/.rvm/gems/ruby-1.9.2-p180/bin/urban:19:in `load' from /Users/joshuajcheek/.rvm/gems/ruby-1.9.2-p180/bin/urban:19:in `&lt;main&gt;' (5/5) (EDIT: According to comments, this is true for application code, but not library code. I've done a little research, and they appear to be correct) Your Gemfile.lock should be in your version control, but you have it in your .gitignore. This meant that when I tried to run `rake test` it appeared to work, but really I wasn't in the Bundler sandbox (at least that's what I think was happening). It took me a while to realize I had no Gemfile.lock and do a bundle install. From the [Bundler homepage](http://gembundler.com/) *"Make sure to add Gemfile.lock to your repository. This will ensure that other developers on your app, as well as your deployment environment, use exactly the same third-party code as you just installed."* (1/5) My opinion of encapsulation is that you should encapsulate from even your current object. You've defined the `attr_accessor :web_service` but you access it everywhere through the instance variable. My opinion is that your current object should access it only through setters/getters, unless the method itself is a setter/getter (or presents that interface). (1/5) I have grown to prefer lazy access. So instead of defining `@web_service` in your initialize method, I'd define it in the getter: attr_writer :web_service def web_service @web_service ||= Urban::Web.new end (3/5) I wonder about the interface you've selected. You have `@web_service.query(:random)` and `@web_service.query(:define, phrase)` That feels forced to me. I assume you started by writing the Urban::Web class and after you got it working, you wrote the Urban::Dictionary class to use it. I strongly recommend going the other way around (and if you get into the BDD scene, there area some really awesome tools like Cucumber to help with this). So I'd start by writing Urban::Dictionary, which at some point will probably need a web service (but don't constrain yourself with this knowledge of destination), and then have it write the code it wishes it had. Then go implement that code. You will probably not end up with a publicly facing method like your query method. For me, if you told me to do that, I'd probably come up with something like this: def random process website.random_word end (4/5) Which brings up a point worth taking note of, your random word and search phrase methods don't really seem like they should be dealing with Nokogiri. That really isn't [their responsibility](http://en.wikipedia.org/wiki/Single_responsibility_principle), it doesn't have anything to do with getting words, it is a lower level of abstraction that should probably be part of the processor (if we say the web service's responsibility is merely to format queries and actually talk to the site, then it is the processor whose responsibility is to decide how to interpret that data. No one else should have to know whether it uses Nokogiri or Rexml or just a regular expression or anything else) (1/5) OpenStruct isn't necessary in the Dictionary class as you always have the same keys, a regular struct should be fine. Result = Struct.new :word, :definitions def process(raw) document = to_document(raw) Result.new extract_word(document), extract_definitions(document) end (2/5) It's kind of awkward to say `Urban::Dictionary.new.random`, instantiating the object shouldn't be necessary, I think these should be class methods (maybe make it a module, then extend it onto itself so that others can include it if they like, but you also get the class style methods) (4/5) The CLI interface is unintuitive. It looked to me for a long time that I was supposed to do `urban -l smokey bear` as the complement to `urban -r`. I initially was going to say that --list doesn't really imply that to me, but eventually I got to the test for `urban -rl`, where I realized I must misunderstand what list does. Maybe have some examples in the help screen. Based on the tests, there are only four ways to use it from the CLI, so it would be easy to show each of these. (2/5) It looks like you might have forgotten -v shorthand flag for --version. I see that you have tested for it, but it is completely unclear to me why it works -- is this some sort of optparse "feature"? Also, not sure how I feel about version also printing out help screen, it seems like that's not what it should do. Consider if you were trying to consume its output from a bash script, you'd have to then parse the specific line you wanted. I suspect it just does that b/c of the procedural way you parse the args and then print the results makes it hard to deviate from that route. (4/5) CLI#parse is also outputting data. This means its name is lying, you can't just give it options and have it parse them, there is an almost certainly undesirable side effect of writing to stdout. (4/5) `Bundler::GemHelper.install_tasks` requires you to have a git repo... That's not really your fault, but it means that if I even do `rake -T` or `rake spec` that it prints out "fatal: Not a git repository (or any of the parent directories): .git" fifteen times. I shouldn't have to have a git repo to run the tests or see the tasks. (4/5) Your stub module doesn't stub the object like you think, it actually stubs the class (meaning your test stubs Urban::Web#open for *every* instance of Urban::Web) Consider changing the implementation to be like this (in 1.9.2, there is already a singleton_class method, but since you're trying to be compatible with 1.8, we'll do it this way) module Stub def stub(name, &amp;block) singleton_class = class &lt;&lt; self; self; end singleton_class.send(:define_method, name, &amp;block) end end (1/5) You do `CLIDefinintionOutputTest &lt; CLITest` which means that CLIDefinintionOutputTest has all of CLITest's methods, including its test methods, so all of it's tests get run twice (ie stick a print statement into any of CLITest's methods that begin with test_) (3/5) Your dependencies in your gemspec say "s.add_dependency 'nokogiri', '&gt;= 1.5.0'" It's generally inadvisable to use &gt;= because that will allow anything, even nokogiri version 5.7.3 which might not be developed for another decade, but will probably not be congruent with your app. Generally, use the ~&gt; operator instead (there's a brief discussion on it at http://guides.rubygems.org/patterns/) Anyway, you did a really nice job with this, I ran rcov against it, and it only had 1 line that wasn't tested (Urban::Dictionary#parse_definitions last line `end || []`), but it might have been used in another version of Ruby (rcov is only 1.8), so I'll assume 100% code coverage, which is a really nice accomplishment. I enjoyed reading your tests, and liked how you broke the responsibility of talking to the website out from parsing results and from interfacing with the user. Your code was generally clean and easy to read, you adhered to a lot of good practices and demonstrated a competency across many diverse topics. Great job, and as I often reference Urban Dictionary, I'll probably be using it :P Also, a feature request: Display the URL the info is taken from that way I can link people to it easily.
More details would have been nice.
I just use autotest out-of-the-box for non-Rails apps. It's fast enough, especially if you're stubbing out database activity, and only runs the specific spec that's changed. I use Spork + Watchr for Rails. In both cases, my tests run in a second or two and I'm not manually invoking the tests, which adds extra time. It's plenty fast.
Thanks very much for taking the time to go through all of the trouble of reading, analyzing and commenting on my code. You have mentioned a lot of things I was unaware of. I am aware of the problem with entering a word that doesn't exist. This was handled with a catch all rescue in an earlier version. I rewrote the whole program first writing tests then implementing the code. I wanted to properly handle 404's and other exceptions that might arise, but I forgot about it and it was never included. I changed the OpenStruct returned by the Dictionary class to be a hash, but after further reading it might make more sense to make it a struct as you have mentioned, since the contents are related. I did not forget the shorthand flag for version. I intentionally left it out because I found usually -v is shorthand for verbose (which could be an alternative to --list but I'm not sold). You found an interesting problem. I forgot to change the test for the -v flag to --version. The result of this seems to either be a mistake on my part or, a side effect of OptionParser. I will be making a lot of the changes you have mentioned. Do you mind adding an issue for the feature request? I will be implementing it because it is a really good idea. I would like some advice on the placement of it in the results. 
according to some other things I've read you should not check in your Gemfile.lock if you are creating a gem http://stackoverflow.com/questions/4151495/should-gemfile-lock-be-included-in-gitignore
I am thinking you may be right. I just ran a test by creating a gem with bundler and it created the .gitignore with the Gemfile.lock ignored. This is how it ended up in my .gitignore.
This is interesting, and do agree that tests should be written with minimal dependencies and should not take a long time to run, BUT... Have you considered running specs solely on the classes you are working on, and letting CI run the whole shebang? (as opposed to you running all of the tests all of the time). You can even automate this with watchr so that you're not wasting time manually invoking tests. I think [this is a better guide for fast tests](http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html), although you could certainly combine it with your suggestion of reducing dependencies for a lot of cases.
(Devil's advocate) Could be that writing games in Ruby isn't the most fun experience, or consistant.
Even better, just run the *one* test that specifies the functionality you're working on. Every now and then, run the whole file. Then, just before checking in, run the suite. I have a nice Vim script that runs the current test (or current test file) no matter what window it's in. That way I can work on the code under test without having to bop back to the test window.
Could be. :)
I agree that at some point viable option is to divide and conquer. On that line are running one suite, one test or using autotest to pick up changes. I've tried all of them and from time to time they would let me down in terms of not detecting error at first possible moment. Anyhow thanks for reading, I know it it not exactly revolutionar but I tend to write down my toughts because I learn a lot from feedback. Sorry for spelling, HTC is to blame not me :)
autotest does this all with a very reasonable workflow.
I agree with most of this, I've noted a couple areas where my opinions differs slightly. &gt;Your Gemfile.lock should be in your version control, but you have it in your .gitignore. This meant that when I tried to run rake test it appeared to work, but really I wasn't in the Bundler sandbox (at least that's what I think was happening). It took me a while to realize I had no Gemfile.lock and do a bundle install. From the [1] Bundler homepage "Make sure to add Gemfile.lock to your repository. This will ensure that other developers on your app, as well as your deployment environment, use exactly the same third-party code as you just installed." This is the best practice when developing an app, not a library. The `bundle gem` command adds Gemfile.lock to the .gitignore automatically. &gt; I have grown to prefer lazy access. So instead of defining @web_service in your initialize method... I used to prefer this method, but now I prefer to create it in initialize. I will make it use lazy access if building the object requires some external resource or there is a chance it will not be used during the object's life. &gt; I wonder about the interface you've selected. You have @web_service.query(:random) and @web_service.query(:define, phrase) That feels forced to me... I agree, Web#search and Web#random seem better than lumping all of the logic into #query. &gt; It's kind of awkward to say Urban::Dictionary.new.random, instantiating the object shouldn't be necessary, I think these should be class methods (maybe make it a module, then extend it onto itself so that others can include it if they like, but you also get the class style methods) I personally like that Urban::Dictionary is a class that can be instantiated, however, I think that you could expose some convenience methods on the Urban::Dictionary class itself. Urban::Dictionary.random Urban::Dictionary.search("foo") These methods could delegate to an instance of Dictionary stored in the class itself.
this is awesome
Using separator for banner text is odd. The banner's only printed when you --help, so just use it to put any pre-text you want to appear before the options. 
Keep blogging! My criticism was intended to be constructive, so I hope it didn't deflate ya. :) 
No offence taken.
Does watchr experience the same problem that I am having with autotest, ruby 1.9.2, and Ubuntu 11.04? Ctrl+C simply does not work for spork or autotest. ^C prints to the screen but not interrupt is sent. I suppose I can downgrade to 10.10 and try it there. It does seem to work fine if I am in windows, ssh-ing to the box, and using putty with 11.04 server. Desktop edition is all sorts of wonky in that setup, though. 
I utilized Guard with RSpec and Cucumber plugins. It watches what I'm editing and then runs the corresponding tests immediately after a save. Very handy.
This makes sense. I interpreted your first point incorrectly and thought you meant all of the options.
Absolutely.
I wish this worked for every case. With [Laser](https://github.com/michaeledgar/laser/), I used RSpec for most of my tests, and it takes a solid 120-140s for a full run. Unfortunately, that's because most of those are exercising nearly the entire codebase - from Ruby code to analysis results, which is slow. Even more unfortunately, it's a lot like testing a compiler - it's *really hard* to test small units without over-specifying things and without going batshit insane. Given the choice between mocking out the AST and Control-flow graph of a given bit of code - which form an enormous object graph which will be deeply accessed by calling methods - and just running a string of Ruby code through the compiler, there's no way you don't pick the latter. Unfortunately, that means you aren't unit testing, you're integration testing.
Put this in the `Rakefile` and `spec/spec_helper.rb` files: gem 'rspec', '~&gt; 1.4.0' Also, if your not using Bundler, it's probably a good idea to wrap your rake tasks in begin / rescue: begin gem 'rspec', '~&gt; 2.4' require 'rspec/core/rake_task' RSpec::Core::RakeTask.new rescue LoadError task :spec do abort "Please run `gem install rspec` to install RSpec." end end Project generators such as [Ore](http://github.com/ruby-ore/ore#readme) can generate Ruby projects withour or with Bundler. That is how I generate projects without Bundler, and prevent the dependency hell you described. Never, _always_ use Bundler. Bundler works great for large projects, that often use git repositories, not for small libraries.
The people at /r/javascript might appreciate this more, but glad I found your blog nonetheless :) 
I would make `Urban::Dictionary` the main class for the API, maybe have other classes to represent the different results from the web-scraping.
https://github.com/rubygems/rubygems.org/tree/master/features But if you're interested in saving yourself a lot of headaches, don't use Cucumber. Try Capybara's Integration DSL instead.
Wow, that's great, thanks. If you have any more info as to why/how I should drop cucumber I'd appreciate it.... testing is really proving painful to get into when doing things for myself, by myself.. Edit: blog post here: http://jeffkreeftmeijer.com/2011/acceptance-testing-using-capybaras-new-rspec-dsl/ This looks much more *rubylike* .. like discovering Camping or Sinatra after trying to wade through rails generated code. Thanks for the tipoff!
I'd second this. I've used both, and the 'main selling points' for cucumber are: * BA's can in theory write acceptance scenario's and you fill in the required steps. * You can read/write the features in english. In practice, I'd be surpised if you had a BA that would actually write the scenario's, let alone be able to provide enough detail with out input from a programmer to spec a medium to complex scenario. Also, writing code in english is confusing because your brain wants to make grammatical switches that mean the same thing in english, but aren't the same thing to cucumber, and besides, we're talking about ruby here, it's pretty damn readable as far as code goes. On the other hand, when writing using the pure capybara DSL: You only have to code the scenario once (with cucumber it's about twice the work to abstract out the scenario, and then implement the statements via steps)
what is the best resource to learn capybara in depth? E.g. is there a "the big capybara handbook" somewhere on the net or is rdoc+README+ loads of googling the best hope?
Looks great thanks. I'm going to go this route for sure.
That's interesting; we use Cucumber exactly for those two reasons, and they work well. Remember, you're not "writing code" in English, a BA (who might be you playing that role) is describing the behaviour they expect to see. Our Cucumber steps run against an Adobe AIR application, but we use a lot of grammar tricks (*a lot*) to make most steps reusable; "I click X", for instance, works on any button in the application, by looking up a selector with the name 'X' in the currently open module/screen in the application. It works really well, and it means that BAs and QAers can write new features or regression tests and get 90% of the steps executing (correctly) out of the box; usually all I need to do is correct a few grammar points, or make the grammar a bit more flexible, and we're gold. It simply wouldn't be possible if I didn't expose an English(-style) grammar to them. (not to mention the app isn't in Ruby, we just use Cucumber with our [AIR testing framework](https://github.com/noblesamurai/swiftest) to instrument our app, the latter which was done in Ruby for the former to be used) I think you lose a lot of the power of these tests when you have them in plain code, again, because it no longer is self-documenting (even when the 'plain code' is actually DSL-rich). When you explain what your code should do in plain terms of the code itself, then the meaning is carried by the semantics of your code. That was really backwards, but I mean that when you first write a piece of test like "answer_question.should == 42", that makes sense because you look up the documentation for "answer_question" and it says "Supplies the answer to Life, the Universe and Everything." Later that function changes somehow; maybe it becomes "answer_question(question=:how_much_wood_can_a_woodchuck_chuck_if_a_woodchuck_could_chuck_wood)" and you have to supply ":ltuae" to get 42. The problem is that your test is in terms of code, and so it's not immediately clear why it should be failing. Is the problem in your test or the codebase? OTOH, if you had a Cucumber test for this, you might have something like, "When I ask the question of Life, the Universe, and Everything / Then the answer should be 42". Suggestion: When /I ask the question of Life, the Universe, and Everything/ do @ans = answer_question end Then /the answer should be (.+)/ do |ans| @ans.inspect.should == ans end Now you have a third thing that can break! But the problem is easier to trace: the meaning of the code is that we're asking a more specific question, because we had to word it such that it made sense in English. (You could probably skip this by using a more descriptive function name in the first place. *Anyway.*) The nice thing is that the test doesn't need to change; as long as the BA/QAer did their job, it's specific enough. The code isn't broken either; all we forgot to do was make the step connecting the grammar to the code more specific when we upgraded "answer_question". Thus: When /I ask the question of Life, the Universe, and Everything/ do @ans = answer_question(:ltuea) end Or preferably: QUESTIONS = { /of life, the universe, and everything/i =&gt; :ltuae, /of woodchucks/i =&gt; :how_much_wood_can_a_woodchuck_chuck_if_a_woodchuck_could_chuck_wood, } When /I ask the question (.+)/ do |q| raise "unknown question: #{q.inspect}" if !QUESTIONS[q] @ans = answer_question QUESTIONS[q] end A tad ugly with the raise, but I guess the idea is conveyed. This is how we do things, anyway; we use the same principle for our web tests, too, but it was all banged out in application land. Now more than 12,000 lines of feature files!
One good reason for me, which you are missing, is the documentation, which could be created from cucumber features. See [Relish](http://relishapp.com/).
Probably. I believe that bug is due to the Linux Kernel version. A newer or older version of the kernel should fix that problem. See http://redmine.ruby-lang.org/issues/4777 for more information.
All good points, and I suppose it depends on the style of testing that you're doing. I've found that regardless of test framework (TestUnit, RSpec, Cucumber, Capybara) what have you, it's always possible to write either readable, documenting tests with tests that explicitly show your assumptions, as well as cryptic tests, where if they fail, you don't know why they were supposed to pass in the first place. I certainly agree that the tests should be clear and documenting, but to summarize, I find that's easily achievable with any framework.
Rdoc is working pretty well for me. The methods are very well designed and map well to the 'verbs' of someone browsing and using your app.
I built half of this last night: " Run the test for the current file map &lt;leader&gt;t :!rspec &lt;C-R&gt;="spec/".expand("%:r")."_spec.rb"&lt;CR&gt;&lt;LF&gt; " edit the test file for the current file map &lt;leader&gt;et :e &lt;C-R&gt;="spec/".expand("%:r")."_spec.rb"&lt;CR&gt;&lt;LF&gt; Not sure how to make it run the current test file though, gonna investigate today.
This is a clusterfluff waiting to happen. If you are doing OO properly, you should not need this. Using this will encourage you to be messy with your class structure. Not only that, but you lose the semantic value of the methods, along with the ability to test if interfaces are really supported using `#responds_to?`.
Dude, it's satirical.
obviously a (well made) joke! I hope so.
From the [GitHub page](https://github.com/garybernhardt/base): &gt; See that embiggen method calling encode64 and deflate methods? Those come from the Base64 and Zlib modules. And the SEPARATOR constant is defined in File. Base don't care where it's defined! Base calls what it wants!
Made the effort to submit this but couldn't manage to replace &amp;mdash;?
what's the downside of just using Bundler? I am inclined to just always use it: 1) Something that starts out small can grow to be large, why have to worry about it later, just use Bundler. 2) Even something small with 5 dependencies can theoretically be victim to the sort of conflicting dependency problems that were commonplace before bundler -- After all, those 5 dependencies have their OWN dependencies, the total dependency tree could be quite large even with only 3 or 5 top level dependencies. you know, where something includes WidgetGem unconstrained and gets the most recent one, and then something loaded later wants only an older one, and rubygem raises. 3) Using bundler gives the end user a clear way to install all gem dependencies -- bundle install. What's the alternative to _installing_ dependencies, reading the documentation and manually installing each one? Even with only 3-5 dependencies, I'd rather just type 'bundle install' -- something any experienced ruby developer recognizes how to do, these days. What are the downsides to using Bundler, why NOT use it?
On the other hand, the calculus may be different for a gem -- since under _ordinary_ use of the gem, bundler in the gem itself isnt' actually used for dependencies (the gem spec is used instead -- possibly by bundler, but that's up to the end user). So in a gem, bundler is in fact only used in development by developers. Still, why not just use it?
rspec can generate documentation as well. --format documentation
This has got to be one of the worst trolls in history.
Hey Steve you say... &gt;Sure. And in one way, this code isn't bad. It's also not good: We've mixed a presentational concern into our model, which is supposed to represent buisness logic. I submit to you that business logic does not belong in your models. At least not in any class that inherits ActiveRecord::Base. Business logic most often involves making changes to all kinds of models in a transactional way so it really belongs in it's own class hierarchy. Leave the models to dealing with tables, validations etc. In fact I think of models as the code equivalent of triggers. If I see that a model is manipulating another another model that raises flags for me.
&gt;the secret weakness of Agile was that one sociopath could ruin an entire project. So true. 
Absolutely. Small slip of the tongue. I'd agree with this entirely, and I think it's basically this principle taken to the next level.
stay classy ruby people~
Need more details. What's your current setup? Just telling us that you have HAproxy and Passenger/Nginx isn't all that helpful.
Perhaps because it doesn't really need it. Also, YAML already has references, what they call anchors and aliases: http://yaml.org/spec/1.2/spec.html#alias//
That is true of any project, not just agile, not just software development. Look at [Victor Ninov and element 118](http://en.wikipedia.org/wiki/Victor_Ninov) for an example.
I'm inclined to concur. :)
HAProxy allocates memory per-connection, I think. Maybe someone's attacking your site by opening a bunch of really slow connections.
Thanks! I did some googling but some how did not turn up that thread. I'll do an update. 
Seems like it could be of use in certain cases. I'll keep that in mind next time I have benches to do.
This is so good that it should have a pattern named after it (edit: formatting): def self.instantiate_regardless_of_argument_count(klass) (0..100).each do |arg_count| begin return klass.new(*[nil] * arg_count) rescue ArgumentError end end end
&gt;Perhaps because it doesn't really need it. Who decided that it doesn't need it? &gt;Also, YAML already has references, what they call anchors and aliases I know about them. I am talking including another file. 
How about 10 years of review and use my _many_ people?
&gt;How about 10 years of review and use my many people? How about it. I use it too that doesn't mean it's complete or perfect or could you no improvement whatsoever. You know... Like rubygems. 
As a present, [here's](https://gist.github.com/1200257) a little vim macro which wraps statements in scenario do/end blocks. 
Neither a vim user or a cucumber convert, but thanks anyway :)
OMG Thank you.
How many times must we discuss that Rubyists need decent design patterns and DI too? Ah well, it's still a great post for the newbies. I too learned Ruby via Rails years ago, and my Rails intro did a number on me with respect to understanding Ruby design. I think it's because when you first get started with rails, you want to make cool websites that do a lot really quickly - which it certainly enables you to do - and you feel like you're just filling in methods and files at pre-specified locations and not designing a piece of software. I'd venture a nontrivial number of Rails programmers *never* create classes that don't inherit from a Rails class.
I found it randomly yesterday. I already tried the basic examples: need to install libgtk2-ruby to use them.
Hey, do you know if this will work with the GTK2 bindings on windows?
Good question. I'll have to try that this week sometime. I'm still trying to get back up to speed on Ruby: being a sysadmin means spending more time on things like hardware and printer glitches. :/
I will try it too this weekend. Thanks for the great link bro
This is neat, but I'm not sure I'd use it. Is there a master password to run the `cloak` command? If not, how is this any different from just having a plain-text file with passwords? With access to your system, I could read/run either anyway.
&gt; At least not in any class that inherits ActiveRecord::Base. Although I will not argue with this point, in a generic MVC pattern, models are specifically where business logic is intended to reside.
&gt; Is there a master password to run the cloak command? Yes, it looks like it. The ~/.cloak_password file is just a bcrypt hash of the master password, presumably for quick verification that the typed-in key is correct (rather than having to correctly detect/handle decryption errors). That file is a potential attack surface, but brute force probably isn't going to be reasonable.
If you're going to say "business logic doesn't belong in models", please, *please* change your terminology to something other than "model". Business logic, *by definition*, belongs in models. If you want to say business logic doesn't belong in database mapping classes fine. Also, be aware that the very tight coupling between ActiveRecord-derived classes and the database tables is an artifact of the Active Record pattern and, by extension, the implementation of the ActiveRecord library. Codebases that other database mapping patterns such as Data Mapper (also from PoEAA) have a lot more leeway to structure their database mapping objects in a way that makes sense from a domain point of view.
Why did you use blowfish instead of something more modern, like AES-CBC? Also, I think it would be better if you stored the main auth password along with the other passwords within a sqlite database. Sqlite provides a lot of things like ACID etc. It might also help prevent your whole password file being corrupted, which would be pretty bad for a password storage system.
Since every rails app is a rails engine, you should be able to package your sub-applications up and route them all with the base application.
Agreed on sqlite, but I don't think you would want to store the master password in there. That would defeat the point of a master password. Ideally you wouldn't store the master password anywhere. If you were to store it, an environment variable would be a better solution.
Good point, the master password should be used as the key to encrypt each password.
Don't forget about the ability to use Swing with JRuby. There are also a couple Ruby frameworks to make using Swing sane.
Meet RainbowCrack, that's how it's done these days. http://project-rainbowcrack.com/
Meet RainbowCrack, that's how it's done these days. http://project-rainbowcrack.com/
Thanks for the info :) Worth looking into 
Thats what I've done :) I kind of found it kind of over kill to save some random passwords. I just wanted to work with something that exists that provides a certain layer of security. Thanks for the feedback :)
Thanks for all the feedback :) It was sure insightful to see everyone's opinions. Also thanks for the info on the potential flaws :) Cloak isn't meant to be completely secure, I just wanted a certain level of security in contrast to the "password" gem that holds things in plain text :) Thank you everyone!
I think it's worth mentioning a dedicated password keeper, like [Keepass](http://keepass.info/) or [1Password](https://agilebits.com/products/1Password). I know these work a lot differently than cloak, but for what it's worth, I use Keepass every day.
No, what I mean is that you need to get rid of the bcrypt auth. If you use AES-256-CBC, it will tell you if the decryption failed, no need to keep a password file laying around. Also, it reduces the attack surface, due to you not being vulnerable to bcrypt algo/library issues. I suspect the Blowfish library probably does this too, but I've never used it before. Still curious to why you used Blowfish instead of AES. I am not a security/crypto expert, don't treat me as such :)
Ruby could be fixed and tidied up quite a bit there seems to be no real impetus to do so. I am looking at mirah as an example of where ruby could go if the community wanted to. It seems to me that at a minimum ruby should have the equivalent of perl's warn and strict (not the stupid ruby strict). They should also add optional typing, PHP did it why not ruby. 
&gt;If you want to say business logic doesn't belong in database mapping classes fine. Which is why I said "At least not in any class that inherits ActiveRecord::Base." 
Do you have any info on PHP adding optional typing? Never seen such a thing myself.
Optional typing is not a bad idea, but we don't really have a syntax for duck types. Consider the method: def test(obj) obj.to_s.gsub("#", "") end How do you express obj as a type? It's clearly a duck type of something that responds to "to_s" and returns something that itself responds to "gsub". We really don't have a nice syntax for anything like that yet.
There would be a tradeoff for sure. In your case if you were expecting any one of many types you would not declare it. OTOH it would be nice to have this option. def test(person as Person) child_ids = person.children.map {|c| c.id} end it would be nice to know that person is always an instance of Person. Another way to do it might be with pattern matching or guards like erlang has. I know there are a couple of pattern matching libs out there already so that certainly seems possible.
http://php.net/manual/en/language.oop5.typehinting.php I should have said type hinting. I haven't used php in years.