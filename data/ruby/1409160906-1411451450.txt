True, but it seems to be used as much as MRI 1.8.7. It's been EOL for two years, AND it seems a lot of people have switched to a newer ruby 1.9/2.*. Probably older applications, and less new applications use REE.
/r/dailyprogrammer ! :)
&gt; Equal to self[41]. Also known as accessing “the reddit”.
It was one of the many ruby dramas back in the day https://github.com/rails/rails/commit/22af62cf486721ee2e45bb720c42ac2f4121faf4 -&gt; https://github.com/rails/rails/commit/e50530ca3ab5db53ebc74314c54b62b91b932389
Hmmm... I should import the repo into my Satellite server and try configuring RedMine using Phusion Passenger rather than version of passenger which comes in RHSCL. I'm assuming this is the proper url to sync the Yum repo from? http://passenger.stealthymonkeys.com/
No. The RPMs at http://passenger.stealthymonkeys.com/ are 2-3 years old and entirely out of date. Their use is discouraged. Currently we do not have any up-to-date RPMs. Which version is distributed through SCL?
Yes, SELinux can be a royal pain for some people, but as you know it is a best practice to enable in Enforcing mode. I applaud your efforts thus far to follow this best practice. As for packaging, have you spent much time working in the Fedora community? Fedora is the upstream for the RHEL ecosystem and starting there would be a good idea. Packaging of all Fedora RPMs and EPEL RPMs is done on Fedora build servers, who's builds are maintained by community members. All builds by their very nature follow Red Hat best practices. Also have you tried reading Dan Walsh's blog? http://danwalsh.livejournal.com/ He is a fellow Red Hatter and the industry expert on SELinux.
You need to install the OpenSSL development files, since an extension that is part of a gem you want needs it. Your package manager is probably the best way to find it.
Maybe I'm dense, but, I don't get it...
I can only tell you what worked for me since to a certain extent, it's all about how you learn as an individual. My very first taste of programming was C++ in high school and I was fine at it. I didn't touch programming again for another 6 or 7 years when learning SQL. Then I learned python, then ruby. With all that said if I could do it again, I would probably learn python first because it is easy, forgiving, and can do nearly anything you want it to do, so you can start working on projects almost immediately. However, learning a low level language first probably will make you better coder in the long run, it will just take a little longer to pick it up at first. Once you have fully wrapped your head around OOP, you will pick up the rest very easily.
I disagree, Chef is about infrastructure. Chef (and Puppet) are system configuration management software. They exist to make creating and provisioning servers auditable, trackable and replicable. Your software is not something that should be a part of your configuration. It doesn't exist to give your servers context, your servers exist to give your code context. Your configuration should be to serve your software. It's like writing a good spec, your software is your "it" and your configuration is your "context". You need to setup your server in such a way that it supports your code. Mixing the two up feels just wrong. The configuration of my server feels very "static" to me. I don't change the requirements and packages of my code very often, but I change my code *alllllll* the time. The other part of this is that your production servers (or any server) should be hands off. If you're logging into your server and manually installing packages, etc, that's just wrong. You should be able to tear down your machine and rebuild it flawlessly. How else are you going to scale your machines from one server to a rack of servers, to a warehouse? You need to be able to audit, track and replicate how to build machines. There are some situations I agree in however. Such as if you package your software in a way that it best benefits from being apart of a server configuration. This is usually done in very mature projects, and in a way that makes sense. Such as packaging your code and installing it using Debian packages. I really don't think that Chef should be deploying code.
If I had to recommend a first language to someone, it would be Ruby. If you have the will to learn, though, you'll be fine no matter what language you pick. My first language was C++, and people typically advise against that being your first language, but it was fine. You just have to be willing to work at it.
Ruby is fine for a first language. What do you want to make? That should be the first question before you decide which language.
I've said plenty about why it's bad. Your server lives to give your code context and somewhere to live, why would you mix that up with what's creating context? Your server is *static*, how often do you change the configuration of your server? Not often, it's pretty stable for the most part. Your code is *dynamic*, pretty it changes pretty fucking often (I hope). How do you justify using the same tool on two very different processes? How do you justify using the same tool that builds a server as the same tool that deploys code? Your server is NOT code, it's somewhere for your code to live. How about instead of insulting me, you justify why you think that your code should be apart of Chef? Why do you think that using the same tool for something that changes often, and something that changes almost never makes sense? Why does Chef feel *right* to use when deploying code to a server? Does code feel like a configuration on a server to you? I'm not saying I'm right, I said I disagree. So again, instead of insulting me and my knowledge, how about you go ahead and tell me why you're so much smarter.
Ruby is probably pretty easy to get started in, but it gets very complex if you want to. I'd say go for it.
I'm fairly quickly proficient in C# and JavaScript and also have a strong grasp of assembly( arm flavours) Looking at ruby I get "wtf is this" feel every time
Yes I have. It took this long *because* we're working with they Fedora community. They insist on all sorts of packaging guidelines so I had to study them intensively and make modifications to Phusion Passenger itself in order to conform to all the different the guidelines. If I could create an RPM that drops everything statically linked in /opt, then I'd be done very quickly.
Why is that? Is it the functional aspects of the language, or something else?
&gt; But please, don't learn PHP. Alas, I have but one upvote to give for this pearl of infinite wisdom. 
&gt; Setup is very easy. Takes time away from product development &gt; Maintenance is usually pretty easy. Takes time away from product development &gt; Security updates are extremely easy if you have an automatic update schedule, and also if you follow news. Takes time away from product development &gt; Product development you'll have to do with or without Heroku. And you can get more done in the time available by outsourcing the rest to Heroku. As GP says there is a balance but it is not necessarily when you have to start paying for Heroku.
As much as I love Ruby, I can't really recommend it as a first PL. I don't think any OOP language is good for that. OOP is not an easy concept to grasp at the beginning of someone's programming training. There are specialised languages that are more suited for learning programming, like Pascal or even Logo.
Yeah, but it's the question of simplicity and complexity. Compare these two pieces of code: puts "Hello world!" And: #include &lt;iostream&gt; using namespace std; int main(int argc, char ** argv) { cout&lt;&lt;"Hello, world!"&lt;&lt;endl; return 0; }
I'm starting a computer degree in the next 3 weeks! Why do you recommend not learning PHP?
PHP has grown over the years and its syntax and standard library have become quite confusing and inconsistent. A lot of concepts that other languages had from early on were added in PHP 4 and 5 and because the syntax you would normally use for those was reserved for other things they had to be... creative.
"Creative."
On all accounts, yes. I would also recommend POODR (Practical Object Oriented Design in Ruby) to help nail OO concepts transferable to other languages. If you keep Github's Ruby style guide handy, you'll write code others can read and help you with. Be a bit careful with Google/StackOverflow. Ruby and Rails move very quickly, so advice from 2007/2008 may hurt more than help. Take freshness into account. Ruby is a really flexible utility language and a great pleasure to code in almost all the time. (Writes a guy who is fluent in a bunch of languages.)
And even if you look over those faults, the stuff you find on the internet regarding certain topics (like database access) is either outdated, wrong or simply dangerous. And even worse, it gets perpetuated by a cargo-cult like copy-paste reusage of the same dangerous code, which was best practise circa 2000.
How is Ruby "not strictly OOP"? IMHO Ruby's OOP even more strict than that of C++ or Java, with no public variables and stricter privacy levels. Sure, Ruby ships a lot of syntactic sugar which compensates a lot of it, and I appreciate it a lot, but at its core Ruby is a *very* object-oriented language. You can start easy in Ruby, of course, but I think a newcomer would be somewhat confused by the phrases like 1.upto 10 do stuff end
Ruby koans: http://koans.heroku.com
You can write ruby scripts without having to write any classes at all. You can even completely leave out methods at the start. That's what I mean by "not strictly OOP". Ruby is a multi-paradigm language. It really doesn't matter with what language you start, there will be some finger-waving at some point. For example `puts "Hello World"` really is `Kernel.puts "Hello World"`. Want to do something with files? Yes, you use `File.read("path/to/file")`. Doesn't really matter what `File` is in this case. Want to do something 10 times? The ruby way would be `1.upto 10 do`, but ruby also has a normal `for` loop. The same applies for python as well, where the idioms are a bit different, but the argument is the same. And from there, you start building from the "how" to the "why".
In the long haul the pain will be worth it. Plus if you were to ever want to get it included in RHEL that's the route you will need to go anyway. Keep at it, your efforts will bear fruit.
Ruby is a great first language. If you don't believe all the comments here, go check out the codecademy.com course. By the time you're iterating nested arrays, I promise you'll be hooked.
Sure, I think ruby would be fine as a first programming language. Ruby is basically in the same class of language as Python. I think both are better than Java or C++ as a first programming language. Both ruby and python have the advantage, as a first programming language, in that it's pretty easy to get a basic 'hello world' running without having to spend lots of time figuring out how to set up your environment and IDE and how to get things compiled. I don't agree that learning a 'low level language' first will make you a "better programmer in the long run" as someone else said. I've been programming for 20 years but I learned, um, I think logo first and Pascal second. Neither are 'low level languages', and both in fact were mainly invented as teaching languages. I think lots of people of my generation followed a similar path. You're in the ruby reddit, so you're going to find more partisans of ruby here. To me, python seems more confusing than ruby, but in the python reddit you might get the opposite opinion. I think either python or ruby will be fine as first languages, and both will be better than C++ or Java. If you take to programming, I don't think it really matters what language you start with. 
Likewise Ruby's loose syntax is great if you're an experienced developer, but things like * begin...end vs. {} * optional braces when calling a function (in fact the general "message-passing" style rather than explicitly "calling a function" or "assigning to a variable") * Symbols vs. strings and confusion/ambiguity over their correct use * implied hashes (quick beginner test - how many parameters are passed into `this_function(:one, :two, :three =&gt; "four", :five=&gt;6, :seven)`, etc) ... don't make it a good beginner language in my eyes. Ruby is a subtle and nuanced language with a lot of flexibility and power but the ambiguous syntax is also quite confusing when you first learn it, even for an experienced dev. A good beginner language would be something like Python (with its famous "there's only one way to do it") with relatively simple syntax, relatively limited options for expressing a given concept and even the significant whitespace to inculcate good indentation practice. I'm not a huge fan of Python outside of learning environments, and *as an experienced developer* I generally prefer working Ruby myself, but that doesn't make it a good *learning* language for a non-developer to pick up as their very first programming language.
Assuming no database migrations are taking place. Once you're trying to mutate a shared resource across what is production and what will be production all bets are off.
I think it is okay, yes. I'm not saying your opinion is wrong, actually it's a perfectly fine view to hold. I think it depends on the audience. I remember my first math class in university, mainly about set theory, functions, relations and the like. Didn't really matter where you start, you would have to assume some stuff, and only introduce it later. If you think back to school, that's actually how a lot of stuff is taught. Maybe using Pascal at first is worth it, but you pay the extra time you need to learn an OOP language. And at that point, learning new syntax takes longer than it would take you or me. Maybe it's worth doing it that way, I don't really know.
I disagree completely, C is an incredibly simple language, much, much simpler than Ruby. It's subtle maybe, but it's undeniably simple. I also disagree with your conclusion - as an example, Haskell is both significantly "stranger" and probably more "fucked up" (depending on what you mean by that) than C. I found Haskell much harder to learn.
I recommend Ruby Quiz - http://rubyquiz.com/ and http://rubyquiz.strd6.com/ because most of the challenges include solutions in Ruby by more experienced programmers than you are, so you can learn a lot of techniques. Sure, the solutions are written in older versions of Ruby, but it's not difficult to understand and correct them anyway.
Well I guess that's a matter of taste but I also think that for the most people C is quite hard. When it comes up to compiler problems, pointers so on. I haven't seen any stranger and fussier language then C, haven't written any code in haskell though. Did you start with C?
Ruby and Python are pretty similar as languages, and Ruby is a fine choice. If you're interested in creating websites, you might want to learn Ruby and then Ruby on rails. (See https://www.learneroo.com/modules/12/nodes/94)
That worked! Thank You!
[Ruby also has GOTOs](http://patshaughnessy.net/2012/2/29/the-joke-is-on-us-how-ruby-1-9-supports-the-goto-statement) (Yeah, I know it's a joke. The point is: most languages support GOTO)
No, i started with QBasic but C was the second language i picked up :) I didn't say C wasn't fussy, i just said it was simple - it has very few language features and a very simple grammar/syntax.
The joke was that PHP recently got GOTOs recently. 
Just an addendum, I agree about all the bad things about PHP but there ARE a lot of jobs writing it(probably more than Ruby/Python put together) so if your primary concern is finding a job (as in any job, no matter how crappy: most PHP jobs are going to be crappier) then learning PHP is a good choice simply due to the numbers. On the other hand, if you don't want to constantly be asking "why does my language do it THIS way?" you should stay away from PHP.
Why isn't PHP dead yet?
I started with Ruby, way back 10 years ago. Wouldn't recommend it back then, but definitely now- Ruby's grown A LOT.
Well, I write clojure and ruby. I think we are simply disagreeing on what inferior means when applied without decoration to a language.
I think he wants to learn programming, not make something specific. 
Uh, really..? You think that .net has fewer platform related problems than ruby...? As for elegance, this is entirely a matter of preference. I think that Java is extremely unwieldy and verbose, while ruby is beautifully concise and understandable, especially if you write in the functional style. What kind of dependency problems did you have?
&gt; you can do anything in PHP that you can do in other languages You can do anything with pretty much any language, they're all Turing-complete. How you get the things done, concerning factors like readability, maintainability, productivity, performance, etc make a whole world of difference. I personally find PHP to be inferior in those criteria in most cases for new projects, compared to existing alternatives. It used to be that PHP was all you could host cheaply, but the scenario changed and choice is pretty much unlimited with VPSs.
&gt; system administration as a profession would simply not exist! Obviously I didn't mean that your server never changes. It changes very rarely in comparison to your code. If it did change all the time, your server administrators aren't doing a very good job. Stability is from building something strong and keeping it that way, not patching things on to keep the lean-to up. &gt; because any good CM system is idempotent anyway. Idempotent **adjective.** 1. unchanged when multiplied by itself. By this definition, that means no matter how many times you build a machine, it should run the **exact** same way. If you're deploying code that's changing and doing different things, then by **definition** you're not idempotent. You've contradicted yourself. How do you ensure that Chef won't change a machine between one minute and the next? Again, if you're deploy has evolved to a way that lends itself **well** to container based deployment, and is stable enough to be packaged in a way that lends itself to being idempotent then sure, go for it. The only systems I've seen like this have been very mature, slow moving projects where releases happen monthly/yearly. Not weekly/daily. These are the type of releases that are generally deployed via packaging your code in a debian, and installing using aptitude (or similar). Practically, why does it make sense for me to deploy outside of Chef? Because my code is NOT idempotent. If I create a machine with a CM one week, then create it again the next week, I want my server to be *exactly* the same. &gt; * What do you gain by using two separate tools? i.e. How does it make my life easier? * What do you lose by using a single tool? i.e. How does it make my life harder? * I can separate make a clean line between what I want idempotent and what I want moving * I can't make this clean distinction. &gt; It's not just about writing configuration files. It's about scaling your whole infrastructure and moving it from one "state" to another Exactly. How can you expect to scale your operations from what state to another state when you don't know what's building your machines? How can you expect to scale from one machine to multiple machines when you can't build replicable machines? How can you ensure that Chef or Puppet installs the same code to all machines when your code is changing on a per minute basis? There are answers to this, again, packaging your code, and deploying via package managers ensures that your code is idempotent across all machines, but I suspect that's not what you're talking about.
At least it's possible to introduce Gem with a simple workflow so beginners can start to get a hang of it, and learn that reusing code and collaborating with other developers works great. It's virtually impossible to get a newbie to write Maven XML without driving them mad.
Ruby as a first language would be good - I had exposure to C and C++ in college, but basically had forgotten anything beyond control flow by the time I started Ruby. I will say though, if Ruby is your first language, do learning WITHOUT Rails. I learned Ruby and Rails at the same time and not understanding where one stopped and the other started caused some conceptual blocks for me. Along with falling in the bad habit of thinking the only classes I should make needed to be tied to a database table. Learn Ruby on its own, make a simple command line program that does some stuff, learn about classes and creating interfaces to your objects. Rails is great, but it makes it hard to learn certain programming practices because there is a specific way to do almost everything, and it's not always a good platform to see abstractions and simplifications.
What do you have to do with rvm? I just set it up and forget about it tbh. Personal preference. :)
What about JRuby or even Groovy? Ruby's been meeting Java for a while now. 
This was from Charlie Nutter, creator of JRuby - as something to be a bit more lightweight. It's still in the infant stages. And the "Ruby Meeting Java" was just a clever title thing. I'm aware this isn't their first get together.
I think literally *every* sensible language is better than C/C++/Java/C# as the first language. ^\(excluding ^PHP ^hardy ^hardy ^har) Even assembly. Some of the CS courses in our uni start with assembly as the first language (though they usually do it for low-level programmers, not application devs). Heck, even Brainfuck would be a better first language. Sure, it's friggin hard to do something complex, but it presents a simple Turing machine for you, which is nice.
See, you didn't just say "php is inferior" you said "i find php to be inferior in the following ways". I was taking issue with just saying it was inferior.
Nope, I did not downvote your posts. Actually haven't upvoted or downvoted, though I usually upvote all participants in any discussion. I try not to call any language superior or inferior without any further qualification. I personally think PHP is inferior to clojure and ruby for every use case I currently have. However, there are use cases where PHP would be superior to clojure and ruby, mainly due to things besides the language's design, itself. A statement like "I don't like these things about PHP, see this blog. Due to these things, I find PHP to be inferior for my use cases." is fine to me. Saying it is inferior without any other qualification isn't helpful, especially when talking to people who are getting into the industry. I haven't read your other posts in your thread, since I replied I haven't followed the thread as a whole but only replies to my comments. To be clear, I get your point and I don't want to use PHP if I can avoid it.
Rails monkey-patched Array to have methods first, second ... tenth. A lot of people expressed their disgust so DHH responded with #forty_two() just to tweak people. The forty_two is probably from [Hitchhiker's Guide to the Galaxy](http://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29)
Thanks
I've been waiting for Mirah to mature since it was Duby (which was *five years* ago). It's a promising project, but the rate of development on it leaves a lot to be desired.
Ruby is a fine staring language, but I have to say Python is better. Many of the design decisions in Ruby are chosen to make experienced programmers happy, where Python puts simplicity first. 
So, you're saying they're both good as long as you ignore all the bad stuff and only use the good stuff? :) The reason I think ruby is better than Java as a first language: * Less boilerplate overhead. Ruby hello world, "puts 'hello world'". * No figuring out IDE's and classpaths, and no compilation phase, instant gratification -- just write a text file, and run it * It doesn't have to be OO -- I'm honestly not sure if it makes sense to learn your first programming language as an OO (most of us probably did not do so) -- but either way, you can learn basic programming concepts in ruby without touching OO (variable assignments, loops, conditionals, functions, just the basic idea of programming as writing a list of instructions for the computer) "often times to get ruby to run fast, you end up putting in in a jvm anyway" -- what does that matter for a first learning language?
Wait, why is not "real" to suggest that you don't need to worry about scale/concurrency/availability problems when considering suitability for a first learning language? I didn't think I was doing that for Java either. The reasons I think ruby is better than Java for a first learning language have to do with the things I think someone using it as a first learning language is going to run into, not the things I don't think someone using it as a first learning language is going to run into. You asked "Why do people say ruby is better than java as a first language?", so I told you why I said that. But you mainly seem to be interested in bashing ruby as being too slow, that's cool. For ruby or Java. I don't think "mimicing the real world" has anything to do with considering a first learning language. What's best as a first learning language may not be what's best for production software (and what's best for production software will have to do with the nature of that software and it's environment/requirements). We could argue about your claims about ruby -- obviously there are plenty of people who's experiences differ from yours, and work on production code in ruby that has not had to migrate away from ruby -- but I just don't think it's relevant for discussion for a first learning language. And I don't think there's anything not "real" about that.
Great work, +1 :)
&gt; That's not what idempotent means at all...What it really means is that no matter how many times CM is run, you will get the desired state at the end. Here we have the fundamental difference in our understandings. Unfortunately, the definition as **defined** by not only [dictionary.com](http://dictionary.reference.com/browse/idempotent), [merriam-webster](http://www.merriam-webster.com/dictionary/idempotent), and [wikipedia(under Computer science meaning)](http://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning) disagree with you. Idempotent means that no matter how many times you do the same thing, the result is exactly the same. So if you run Chef one day and code is deployed via Chef, and then run the same Chef setup the next day and code is different. Your server(s) is now different. That by **definition** is not idempotent. Even if you do this on a weekly basis, you're **not** being idempotent. 
Hey many thanks! If there's something else you'd like to see, let me know.
Have you tried InfraRuby? http://infraruby.com/live
Could you do a dive into ActionController::Live?
For anyone looking to obtain an OAuth access token for the Magento REST API, I've written a Ruby module to get it done. You can find it here: https://gist.github.com/narzero/313885a136265cbb0418
I'm actually quite surprised that newer rubies have caught on that quick, I expected to actually still see a chunk of 1.8.7 (I know twitter still has at least some services on 1.8.7, or did 6 months ago)
I'm curious why they don't leapfrog RHEL5, and go right to RHEL6 at this point? (Or is RHEL7 even out yet? if so, then that)
Ruby Koans 
It's a little of both. Most often it comes down to whatever enterprise software they are using and what it supports. It's not uncommon for a lot of organizations to be running some customised version of a major ERP or similar application on RHEL for several years without issue. Then when they're faced with the costs of extended support they find themselves up against a wall. Migrate to the next version and experience some small waves, or jump a version and experience waves of unknown magnitude. RHEL7 for instance is going to cause quite a few disruptions in the near term with some of the changes like systemd. However when people come up to speed and understand systemd they will understand why it can be a better choice.
&gt; I try not to call any language superior or inferior without any further qualification. I accept your rebuke. &gt; there are use cases where PHP would be superior to clojure and ruby, mainly due to things besides the language's design, itself. I started coding php because it was what was installed on the server. Funny how immediate exigencies become forks in the road!
Are you writing custom Chef recipe per deploy of new code? Updating a recipe to reference a new branch? If not, then you're not idempotent. Running the exact same thing twice will not guarantee the same output. I don't care if your intention was to change the output, you're **not** idempotent. If you are, then yes, you're idempotent, but now you're doing extra work. By configuring Capistrano properly, you're done, set, finito. Deploy once, or a million times, the branch of code you say to deploy will always idempotently deploy. Why two tools? It splits up the idempotent from not idempotent. *** &gt; No disagreement here. [...] Well yeah, of course the servers will be different if you purposely make them that way! This is contradictory again! Just because the result is what you wanted, does not mean you're idempotent. Definitions don't work that way. You're either idempotent or you're not. If you run the exact same configuration a million times over a million years, you get the same result. For a CM, this means the server is exactly the same, from the daemons, to the version of nginx/apache/whatever, to the files on the filesystem. *** How are you using Chef idempotently to deploy code? What is your process? The two ways I can imagine you deploying from what you're specified are as such... 1. You are cutting a branch, updating a Chef recipe to specify this branch and then pushing this out to all servers 2. You have a release branch that your CM pushes, and your latest release gets to that branch Either way are wrong. One is not idempotent, the other is much more work that can be resolved by using a code deploy tool like Capistrano.
Judging from the comments here, it looks like a lot of ops guys are struggling to stay relevant. 
Where can i download this porn ?
Or you can use the Rails session hash to persist data into the users session, although in this instance I'd probably stick to url params as you are doing.
Very cerebral. Thanks
Hopefully that will be picking up soon. When I first approached I was afraid I was writing an article on abandonware, but at the time (a few months ago) I saw strides being made and since I've seen development really pick up.
ok. sorry for the slowness, but this doesn't seem to have fixed it. i was working A-ok right then, but now it's the same issue again. every rails project i have needs to have the ruby version set before anything works. Also, every project is set to the same version of ruby, even tho i've created gemsets for them with different versions. dev/rails-apps/prettynimbus ▶ ruby -v ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.5.0] dev/rails-apps/prettynimbus ▶ rvm list rvm rubies ext-2.1.2 [ universal ] ext-2.12 [ universal ] ext-ruby-2.1.2 [ universal ] ruby-1.9.2-p320 [ x86_64 ] ruby-2.0.0-p247 [ x86_64 ] ruby-2.0.0-p353 [ x86_64 ] ruby-2.0.0-p451 [ x86_64 ] ruby-2.0.0-p481 [ x86_64 ] * ruby-2.1.2 [ x86_64 ] # =&gt; - current # =* - current &amp;&amp; default # * - default no matter what, there's no 'current' ruby set AND the ruby showing from 'ruby -v' isn't the one that's marked as default with RVM. i tried doing the same for zsh and here's what i'm getting.. ▶ /bin/zsh -login /bin/zsh: no such option: gin which doesn't even make sense to me. when i open up terminal, it's already logged in zsh afaik. 
You don't have to restart your computer, just Terminal. Your $PATH should be in either ~/.profile or ~/.bashrc.
&gt; /home/erik/.rvm/bin:/home/erik/.rvm/bin:/home/erik/.rvm/bin:/home/erik/.rvm/bin Yeah, there's definitely something weird going on here. I'd recommend nuking RVM $ rvm implode and starting over. It seems like some bad initialization is going on.
When I would try to execute command (ex: Compass), it would return an error because the paths weren't set correctly. It looks like i have it fixed now, I edited my bash_profile and now my $PATH variable has the original value plus the RVM paths appended. Everything seems to be working again. Thank you for your help, I'm going to check out rbenv and chruby.
Well, there are a lot of devs dismissing everything they do as easy, and configuring Chef for all these tools as easy. I don't have any pithy way to out-argue them. But I'm currently debugging all the stuff they call easy, so I know they're wrong. "Just use &lt;tool&gt;" is a better answer if configuring that tool is easy. I've used a fair number of the tools they're talking about, so I don't trust people who say so. But hey, maybe there's a magic bullet here and I don't know which one it is. That's happened before.
Hmm! I've never actually used it, but I certainly could (and should) take a look. Have you read TenderLove's post on it? http://tenderlovemaking.com/2012/07/30/is-it-live.html
Thanks for the reply!
That's an incredibly useful resource, thank you for the heads up!
For sure. Why not actually just write automated tests that are easy for other programmers to read? It's easy to do this with test unit or rspec and practice. Gherkin is unbelievably awkward for non programmers. They may need their own documentation (or better yet design a good interface).
Been a while since I last used RVM, but `rvm reset` should reset any changes.
i'd try chruby. i've been happy with it. 
I would highly recommend looking for a diagram of MVC as pertains to rails. This will greatly help you understand the flow of data. Know what layer it starts in and how it travels to its destination. Where roes it get routed? Just start asking basic questions every step of the way and look to answer them. It will be very rewarding in the end. It's okay to not understand what you're reading. You probably won't grok it until you do it in code anyways.
Yeah, and I've actually built a few apps with it. But it still seems a little magical
Im working on one just to remake TMNT:IV Turtles in Time. I'll make sure reddit hears about its finalization haha.
Not exactly true. Database is the tricky one to tackle, but if you change your mindset on how to do them, there are solutions. Probably the most used solution in the Continuous Deployment world is the idea of a before migration and an after migration. The idea of feature toggles tied with migrations also is hot right now. Deploy the newest code, get old servers out of the mix, then turn your feature toggle on with cascading db migrations that are non-blocking.
Sign me up coach
No, but it's a fast way to provision an app in the early stages before you need a dedicated ops person, vs spending a ton of money on Heroku.
Yes you can use a session variable, i.e. session[:some_variable] to store something local, typically login or session information. There's good doc in the edge guides as usual: http://guides.rubyonrails.org/action_controller_overview.html#accessing-the-session You can do some session variable settings in the controller and pass back by instance variable, or something along those lines. However as Digital-Ghost stated, I think you need to dig more into MVC and how the plumbing of moving stuff around in Rails. Also, it's not a great idea to use global or class variables in a production environment as they can not traverse processes that might have been spun up on a separate worker. 
Well, the classic snake game, looking exactly like on a 1999 Nokia 5210 :) Sorry but you asked for it - the best game that /me has done :-P Anyhow, it seemed like a good library, if i need to do something graphical, i'll come back to it. Could be an arbitrary solution requiring a "graphical terminal" (sorry for the 1980s terminology), doesn't have to be a game at all.
Good read. It goes a little slow in my opinion, but otherwise it's a great introduction to lexing. And TIL about Ripper. I can't wait to see more in this series! 
Rbenv
rvm has always struck me as a hack. Confidence is not inspired with installation instructions like this: curl -sSL https://get.rvm.io | bash -s stable
Also note that JRuby uses a *lot* more memory than YARV, it's generally slower, and has compatibility issues with some gems - pure ruby gems are fine, but those with C extensions won't work (except if they use FFI!). Parallel threading is indeed a killer feature, but YARV does have the [Parallel gem](https://github.com/grosser/parallel) which is worth looking into if your application is heavily concurrent. 
Yeah it's still a good book. Ruby hasn't changed drastically (Rails has changed a lot more over the same period) so you can pick up the language and all it's idioms and then take a look at what the newer releases of ruby have added. The new features will not affect your code much.
That's like saying "Who cares about performance, we have 12 users, it's the fastest way to build an app in the early stages before we go big". You're not wrong, but you're taking on huge amounts of technical debt that will cost exponentially more later on.
It depends. All of the Ruby was made to support 1.9 so all the code elements are fine as the core language has not changed significantly since then. The parts about installation and webapps are out of date however but that's unavoidable unless you rewrite every two years alas with how Rails goes ;-) I recommend Googling for the PDF and judging for yourself, it's ridiculously easy to find and it doesn't offend me :-)
New edition of Well grounded Rubyist came out in June. It's good.
I cannot imagine that one will build a web application for production purpose without using any kind of datastore, at list the file system. So what I understand from his question is that he wants to know the different option possible besides the use of a database. As you've mentioned using global or class variables has its limitations as well as using a session, which is not for storing big values, no matter what session store you use. 
I like this one: http://spooner.github.io/games/wrath/
I liked it better than 'Well Grounded Rubyist' but the last few chapters felt a bit weak. Unfortunately I haven't come across anything I'd love to recommend. 
hahaha! Peter I was cracking up when I read your reply. I have heard you say the same thing in interviews. I did not realize you were a mod here.
a search for mislavs guide seems to point to 'Why's Poignant Guide to Ruby' I have never heard WPGR called Mislavs. Is there some inside joke I am missing? 
That was a good read. Thanks for sharing.
FYI: "scraping", not "scrapping". Very different meanings.
I've got the first edition - worth buying the second?
You might try codetriage.com, which is often recommended but I haven't personally had fruitful experience with it. Try getting involved with a local Ruby group (or start one), they often have a OS project or two for members to hack on.
Well, it's updated for Ruby 2.0. I haven't read first edition so second one is helpful to me.
He's probably confused because [Mislav](http://mislav.uniqpath.com/) is the one who's maintaining [the book](http://mislav.uniqpath.com/poignant-guide/). Notice the domain where the book is hosted. Mislav also maintains [Dive Into HTML5](http://mislav.uniqpath.com/diveintohtml5/) and is a great open-source contributor. Love the guy.
Good language books don't need to change since the core remains the same. K and R is still relevant for many :-) Peter had some major issues with his publisher, apress, and so was never motivated to maintain the book across different versions of ruby. That said, it is still a very good introduction to the language. I myself prefer "The Ruby Programming Language by Flanahan and Matz by Oreilly" but that's a bit advanced. The pickaxe is also not too bad. 
nah, that's the one though. it's awesome. 
I agree, the most important thing is finding a project you enjoy working on and play, I would also recommend doing code Kata's semi frequently. Just switch up the rules every once in a while to make it harder. 
What shell are you using (bash, zsh, etc)? What terminal emulator are you using (Terminal, iTerm, etc)? How are you setting your Ruby version (.profile, etc)?
Probably a good idea to put an "echo In bashrc" in your .bashrc file and an "echo In bash_profile" in your .bash_profile. Then you can find out if one or both are being sourced differently in the first terminal window versus the later ones. If those are different, there's your problem. You may need to source your .bashrc from .bash_profile (doesn't happen automatically.) Or figure out what to do if terminal isn't sourcing .bash_profile when opening a tab -- that's a problem, and you probably don't want to start RVM from .bashrc. Maybe get a different terminal program? I like iTerm2.
I don't think your gonna get many contributors on this. You would be better off asking specific questions so we can point you in the right direction
I will vehemently disagree with you. Chef is a well vetted, well known configuration management tool and the community cookbooks for most name-brand infrastructure are also well vetted and documented. Wiring up the infrastructure for a Rails app fronted by nginx with some unicorn servers and a Redis dependency for Resque/Sidekiq is *not* hard nor is it something that will result in a "huge amount of technical debt". Where is this perception of Chef coming from?
&gt; cobble together someone else's Chef cookbooks to provision a few servers Chef is well vetted, doesn't mean your use of it is. Likewise Rails is well vetted, someone can still make a mess out of that. Just because you use a good tool, doesn't mean you're using the tool well.
good call. if i open a new terminal tab and switch to bash (by typing 'bash'...that's the correct way, right?), the ruby version still isn't set. I am also using the --auto-dotfiles flag with RVM... or i thought i was... that might be getting reset every time too for all i know.
I'm enjoying the series.
In order to get model associations going in rails, or really any relational-data project, you need a firm understanding of how relational databases work. You don't particularly need to know SQL since activerecord handles interacting with the database for you (unless you're using another ORM), but you still need to understand things like 'one-to-many' and 'many-to-many' relationships, and how to build out a basic database schema. This is all assuming you're using relational databases, which I'm assuming you are since you're mentioning associations - and because rails defaults to SQLite. How do you feel your skills are in DB-land?
There's a cool tutorial called RubyKoans which helped me a lot in learning it. It's a downloadable zip which has a lot of files which walk you through everything. You just need to run the main file in your terminal (or however you run ruby files), and it takes care of telling you what to do next. http://rubykoans.com/ A bunch of tutorials out there, but I enjoyed the interactiveness of this.
Awesome - I checked out the repo and it looks very well thought out. Nice gem.
Nice post - is SQS database agnostic? I know Resque requires redis, and I know there are some other background job handlers built for ruby, with QueueClassic being one of my favorites due to its speed - but that's only for Postgres. 
Honestly, learning ruby opposed to C++ is like only going into the shallow end of a pool. All the content on the 'deep end' have been abstracted out for you so you dont have to worry about memory and data structures that utilize heap or pointers. Arrays in ruby are not the traditional 'arrays' since they accommadate various data types in a single array and they grow and shrink as needed. In addition, ruby has a lot of cool toys added on top that let you do interesting things that arent default in C++; iterators, generators, codeblocks, modules, etc. You can make/imitate these features in C++, but take some time. If all you ever have to do is work from the hypothetical shallow end, then you are fine to use Ruby as a first language. I may be a bit crazy, but im a strong advocate that C++ is the best starting language to learn. It is painful, but I feel that it is necessary pain that every programmer should go through and learn. It's low level, but not so low to the point of unpracticality. It is also high enough so you learn about and use object oriented programming. (I dont consider structs to be pure oop.) After you learn C++, pretty much all concepts you learn in C++ get transferres over to any other language that operates at a higher level... which encompasses majority of the langauges out there. (Excludes C, assembly.)
SQS doesn't read jobs from an external database such as MySQL, Redis, etc. Instead you explicitly send a message to it and Amazon stores it in whatever backend they happen to use for SQS. So yes, it's database agnostic.
That's a pretty common setup. I use the same.
If the aim is to avoid setting up DB servers, another good AWS option is to use Amazon's Elasticache to set up a hosted Redis instance you can point your Resque app at. Very simple to do if you're already familiar with Resque. SQS is a good tool, but you need to make sure your code recognizes that if the process runs longer than the visibility timeout of the SQS queue, it might get run again (so you need to build some extra logic to prevent this).
Now that you mention it, I haven't been using factory girl on one of my new projects, and my test suite has been running incredibly fast. Now, it's only an API and I'm not testing anything view based (so no need for integration or headless testing), which surely speeds it up too, but I wonder if factory girl too has caused some latency for me in the past. Thanks for your thoughts!
try finding a ruby meetup through meetups.com That's how I'm learning-- we hack on a project together, and I end up taking it home. For example, writing a [Forth interpreter](http://www.puzzlenode.com/puzzles/15-poor-mans-forth). Just try to find people to learn with. It will make you question what you think you know and help you learn much faster. You can also hear about their projects and get some inspiration.
MiniTest, Capybara webkit, Webmock.
Hey codeboss, Thanks for your insight. I'm still pretty new to programming in general, in fact this is my first app i've ever created (or at least part way created), so my knowledge of DB-land is quite minimal. I'll try looking into how relational databases work and see if that will help me overcome some of the issues I have. 
Awesome, welcome to the world of coding! While you can create some really cool things in Rails, it really is a high-level framework that sits on top of a lot of other technology stacks. Ruby, databases, how API requests/responses work, and how the MVC (Model-View-Controller) architecture works. Rails makes it deceiving with how easy it is to scaffold a base app, but to get past that, it really helps to understand some of those other concepts. To really get into programming, I would recommend starting off with a good object-oriented language like Ruby. Everything you learn in ruby will translate into making you a better Rails developer, should you stick on that path. That will help you understand key programming concepts such as variables, loops, methods, classes, modules, objects, etc. Then, you can start learning about databases, of which learning SQL will be the most beneficial there. Then, as you feel moderately comfortable, take another stab at Rails. Like I said earlier, you can do really powerful things in rails, but it sits on many other stacks of understanding. And if you have any questions about anything (seriously, anything), hit me up on twitter, where I am also thecodeboss. Glad you're getting into programming, it's hella fun!
Minitest (spec), Capybara.
Have you run into any issues with test data getting jumbled up with minitest and webkit testing, thus causing different tests to fail? I used minitest for a long time, but running my integration tests with a javascript browser seemed to distort my testing data randomly - even when running tests in transactions and cleaning the database after each test. That was my big reason for switching to rspec.
Persisting objects for each test is slow. FactoryGirl can be told to only "build" objects, not to persist them, but that leads to much awkwardness for many common use cases. ActiveRecord depends on a working database. It's cheaper to just bite the bullet and give it one :)
This has been insanely helpful in helping me A) figure out curses and B) bang out a simple window management lib. Thanks!
I downgraded rspec to ~&gt;2, and now it works.
Show us your gemfile.
I'm glad it helped.
Pry is a lifesaver, both in the test suite and during just general development - good call on mentioning that. I never really thought of it, but maybe using fixtures is the way to go, because you're right - there wouldn't be a need for any database cleaning (since the db isn't used), and tests would be exponentially faster because of the lack of database. I'm gonna give that a shot, thanks!
I use all the gems in your post. I would like to suggest adding [capybara-screenshot](https://github.com/mattheworiordan/capybara-screenshot). It has saved my bacon several times already since I added it to our Gemfile. Whenever a Capybara JS spec fails(which is ALL THE TIME) it will dump a screenshot as both html and image for you to use for debugging. Truly great.
re: "Nest all the things in a class" If you instead use the minitest-rails gem, which also adds spec support, it sets up all of the describe inheritance chains correctly. It automatically picks up the correct spec type for models and controllers, and for views you would do something like: describe "my view", :view do # end You can see how it detects the spec types here: https://github.com/blowmage/minitest-rails/blob/master/lib/minitest/rails.rb
Minitest::Spec, FactoryGirl, Mocha and Faker (for creating test names etc in factories) Also usually include Rack::Test::Methods in all projects for integration testing rest APIs.
It's nice that Rails is going to have some built-in support for background workers, but I have yet to see any compelling reason to use these global IDs. It just adds complexity and encourages bad practices that will tie the worker code to ActiveRecord.
Right, but this argument can be applied to any part of any app that someone may be creating. That's how you learn how to do new things.
-_- AJ uses GlobalID
And the output of `gem list`, tell us if you use gemsets or why not.
https://www.pragprog.com/book/achbd/the-rspec-book Note that this uses rspec 2.x while rspec 3.0 was recently released. Just because 3.0 is out does not mean 2.x is instantly terrible, there are new syntaxes etc but this book is still useful. I imagine they will be releasing a 3.0 compatible version of this book soon.
Sorry for the late reply. I understand the MVC concept, I've worked on it in ASP.NET before, and I've recently taken a RoR course. Perhaps I should have worded my question better: I was more wondering about the practical implementation of passing about information from action to action, controller to controller, etc. Note: I'm not saying I'm a MVC master, of course I would read more if you have anything specific to suggest, just saying that I get the MVC pattern and routing concepts enough. 
I am using git on a mac, but (git gui) ≠ git ≠ GitHub. Get your title right.
Great answer! Yours and u/atf104's combined are exactly what I needed. Cheers mate!
You're right of course about using some kind of database, this was more for my own piece of mind, I like to have as many pieces of knowledge as possible, you never know what could come in handy. Thanks for the reply.
Yeah - a gui might occasionally be nice for viewing some things, but gotta use command line for Doing Stuff.
Why?
It's much much faster. I can issue 4-5 commands in the time it takes me to click on something in the GUI. 
Is it really /r/ruby sub?
In addition to these two (which I agree with), there's the general reason to use terminal or command line applications when available: any machine you get on to develop will have git installed, and the command line version is not going to change between machines. If you rely on a GUI you're more likely to run into an instance where the tool you use to interact with git is unavailable to you. 
Check out [Tower](http://www.git-tower.com/). While I agree with the points youve made, Tower does an incredible job at enhancing your workflow, not abstracting it like other Git clients I've used.
This is where I learnt from. It's a great book. It'll teach you about BDD and not just RSpec.
Sorry about the long post -- I wanted to give as much context as possible. Also English is my second language, so please excuse any grammatical errors.
Later; https://www.youtube.com/watch?v=4F72VULWFvc and related videos will help you a lot by explaining why some things are just very hard to test; and ways you can make life a bit easier.
Also: http://blog.teamtreehouse.com/an-introduction-to-rspec Intermediate reading: http://betterspecs.org/
You want to learn the inner workings but Ruby does not expose them. If you want to explore the inner workings, try C instead. If you want to learn Ruby on a deep level, read the documentation, the standard libraries, and then read the Ruby source (written in C). Write C extensions, or browse other people's, and I'm sure you'll learn a tremendous amount. Personally, I don't plan to contribute to libraries as I only use Ruby to get work done, so there's no need for me, or any other competent developer, to understand the inner workings. That's a different kind of development, and certainly not required before you can be considered "competent". Still, yes, algorithms and data structures are important, or at least the ability to think about algorithms, recursion, etc. along with that, look into software design principles and patterns (book: Elements of Reusable Object-Oriented Software). Learn you tools -- editor (Vim/Emacs/Sublime/IDE) and debugger (pry gem). Then go read source code for large applications such as Gitlab and Spree. Read the style guides. If you want to stick with web development, read about Internet Protocol Suite on wikipedia for an overview. Really, there is a huuuuuuge amount of information it's hard to know where to even begin. Don't forget to CODE! Everything you read, have a console open or a test project and start playing around with the concepts you're learning immediately. That's all I can suggest off the top of my head. Good luck!
An automated test is: setup, execution, and assertion. I'd start with test unit because it's much simpler. You can move on to rspec later if you prefer, but it's easier to grasp the basics of testing with test unit: require 'minitest' require 'minitest/autorun' class PaymentProcessorTest &lt; Minitest::Test # Description of the feature you are testing def test_collecting_payment # Setup the dependencies credit_card = CreditCard.new(number: '4444444444444444', expiry: "12/14") # Execute the codes payment_processor = PaymentProcessor.new response = payment_processor.charge credit_card, 20.00 # Check that the execution worked correctly assert_equal 20, response.amount_charged end end Super simple. To build an automated test, you write a method that encapsulates a single aspect of your object that you are testing. In that test, you set up any dependencies you need to supply to use that feature, then you run your code using those dependencies, and then you check to make sure that the result was what you were expecting. It's all there really is to getting started.
Hi OP, sorry for this late post. Here is some copypasta of info I had noted down about RVM and installing Ruby. Hope it helps. ## Setting up Ruby ### Installing RVM RVM allows you to install many different versions of Ruby! This will be useful when you want to test your code against different versions and platforms. #### - RVM for MacOSX - http://blog.arvidandersson.se/2012/10/29/installing-ruby-2-0-with-rvm - http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/ - http://www.computersnyou.com/2673/2013/10/install-ruby-rails-macos-x-mavericks-10-9-mysql-step-step/ First install Xcode command line tools, and then install Homebrew. Homebrew manages your installed packages (Linux users use `apt-get`) $ xcode-select --install # when asked, choose install $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)" A lot of stuff is about to get installed to `/usr/local` -- take ownership of this directory from root (on a Mac, as with other POSIX compliant Unixes, `/usr/local` is for users only) (See discussion at: https://apple.stackexchange.com/questions/1393/are-my-permissions-for-usr-local-correct) $ sudo chown -R `whoami` /usr/local Then use Homebrew to install useful development packages and then RVM $ brew install autoconf automake libtool libyaml readline libksba openssl $ brew install rvm #### - RVM for Linux: - http://octopress.org/docs/setup/rvm/ Install several utilities needed by Ruby on Linux: $ \curl -sSL https://get.rvm.io | bash -s stable ### Installing Ruby (Mac OSX or Linux) Install the latest Ruby: $ rvm install ruby-head # tell RVM to install the latest version of Ruby $ rvm use ruby-head # tell RVM to use the latest version of Ruby $ rvm list # ask RVM to list all the versions of Ruby you have $ ruby --version # ask Ruby for its version number ### Install useful packages for Ruby development $ gem install bundler # Bundler helps your Ruby applications manage their libraries ### RVM for ruby language version control - [reclaim ownership of rvm/gems director](https://stackoverflow.com/questions/3853489/installing-gems-using-rvm) 
Hey pchun008, I'm taking the Treehouse RoR course and building my first to-do app as well. I can't offer much help since I'm also new, but I recently found this awesome list of resources that's helping me put the pieces together: http://www.skilledup.com/learn-ruby-on-rails-guide/ My new favorites are [Why's (Poignant) Guide to Ruby](http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html) because it's hilarious and [Code Wars](http://www.codewars.com) because it helps you get more practice time in. 
&gt; Web Engineering Who the heck calls it that? it's just "Web Development"...let's not get too fancy here ;)
Here's some copypasta of resources I found when I was learning Minitest. I'm still using it religiously and can't imagine life without testing anymore. However, I prefer specs to usual tests. ### Minitest (Ruby) - Minitest Introduction - [Minimalicious testing in Ruby 1.9 with MiniTest](http://blog.arvidandersson.se/2012/03/28/minimalicous-testing-in-ruby-1-9) - best guide of Minitest! - only covers specs (not tests) - [Minitest Rakefile to run all tests](http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html) - [Mini MiniTest Tutorial](http://www.millwoodonline.co.uk/blog/mini-minitest-tutorial) - [Video of Minitest by its author](http://confreaks.com/videos/618-cascadiaruby2011-size-doesn-t-matter) - tests vs specs; idiomatic writing of specs - randomization of test order - [Using Ruby's builtin MiniTest](http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html) - [Minitest Cheat Sheet](http://danwin.com/2013/03/ruby-minitest-cheat-sheet/) ### Minitest &amp; Sinatra - [Sinatra Recipes - Minitest](http://recipes.sinatrarb.com/p/testing/minitest) ### Rakefile for testing - [rake/testtask](https://stackoverflow.com/questions/4788288/how-to-run-all-the-tests-with-minitest) 
"By default WEBrick is single threaded, single process. This means that if two requests come in at the same time, the second must wait for the first to finish." https://devcenter.heroku.com/articles/ruby-default-web-server#why-not-webrick
For development, I use thin. For production, I use apache/passenger
Thanks a lot! I will definitely dig deeper into the Ruby source, also glad to know that it isn't fully required to be deemed "competent". Thank you for the book suggestion, will definitely check it out. I don't really understand much about the workings of the internet (all I know is server &lt;-&gt; client), so that wiki would definitely help me a lot. Haha, you are right. Sometimes I do forget the application part of things -- too much theory without practice isn't good. Thanks!
No problem.
Understand duck typing. Baby Jesus weeps every time someone writes a series of type checks. Yes, there are times you care about type. No, it's not nearly as often as programmers coming from other languages think.
A great book for learning about the inner workings of Ruby is Ruby Under The Microscope: http://www.amazon.com/Ruby-Under-Microscope-Illustrated-Internals/dp/1593275277 It walks through the the whole MRI implementation, the parser, lexer, byteocdeo, YARV etc. along with some of the C source code to give you a picture of how Ruby actually works internally. I believe there's some chapters about Jruby and Rubinius as well but I haven't read those yet. 
Poo Dr. dot com.... uhhhh. OK, I'll check it out.
Awesome, thanks a bunch! Will check it out.
`Enumerable` (which is included by `Array`, `Hash`, and other collections) has a lot of functional-style methods (maps, folds, etc.) that are worth knowing about. Using them where appropriate instead of writing custom loops can really make your code more concise in a good way. Writing a ruby class or module in C is a good way to understand a bit about how ruby works under the hood. I've always found the [extending ruby chapter](http://ruby-doc.com/docs/ProgrammingRuby/html/ext_ruby.html) of the pragmatic guide, along with grepping/reading the ruby headers, to be good references for ruby's C API. Ruby is primarily an OO language, but it supports other paradigms too. I think the mark of a relatively mature ruby programmer is that they know which tool out of ruby's enormous toolbox is right for the task at hand; you can only do that by writing a lot of ruby code and understanding *why* some things work out and some things don't. And, where possible, having a more experienced ruby developer around to give feedback is great. If you want to get better at math and logic, I can't think of an easier way to do it *while* learning a new language than [project Euler](http://projecteuler.net/), although most of those problems will not require large programs to solve, and probably won't really help improve your design skills.
Hey Vidiseo, Thanks so much for the links- i'm reading through Why's guide. Can I ask, what are your opinions about Treehouse, as an amateur/starting developer wanting to make a jump into a programming career? Would you recommend it?
There is nothing wrong with knowing your language well, of course. Just be aware that that is only maybe 20% of the skills you need to be a great developer.
That's the thing though -- I *want* to be a great developer. What would the other 80% be?
Thank you, I appreciate it.
Thanks a bunch for all the resources. Mastering ruby's enumerators and iterators definitely is a must. My knowledge of functional programming is severely limited, so it will definitely help. Probably will also make picking up Scheme/Haskell easier. Yeah, experience is very important. Somebody told me that a good way to learn is to apply the learned knowledge on a non-trivial problem. However, I'm so out of the loop that I can't seem to recognize such problems. I'm interested in Math/Logic mostly because I want to participate in competitive programming -- which seems like a great way to learn things. Thanks for the project Euler link. 
WTF.
WEBrick is not suitable for production, but is fine in development. The end. You have a variety of choices for production deployment, puma being one of them. Comparing the actual ready-for-production ruby web servers is a harder question. But the question you asked? WEBrick is not for production, puma is, the end. 
Some things I'm thinking of are... Technical skills: - Writing readable code - Writing maintainable code - Actually maintaining the maintainable code - Preferring simple over 'clever' design - Understanding when to worry about performance - Understanding when to **not** worry about performance - Understanding the 5-10 other tools you're using Workplace skills - Being part of a team - Working with other, often odd, developers - Working with product owners and users There is certainly several more. Again, if you're the guy who knows the language in every detail, that is very valuable for a team, and I'll probably come to you for questions ever so often. But it's just one of several important things.
This is basically implementing lambda calculus with ruby. It isn't meant to be a useful thing if that's what confused you. It's part of a book, Tom Stuart's "Understanding Computation" which teaches the theory behind computer science but using Ruby rather than something like Scheme which is usually used.
Jim Weirich had a [presentation](http://www.confreaks.com/videos/1287-rubyconf2012-y-not-adventures-in-functional-programming) about this. 
Haha I had that reaction the first time I read it too. Now it's one of my absolute favorites. Made me really consider the nature of computation. 
Lot of good suggestions here. I would add knowing Rack, Sinatra and maybe Padrino. Rails isn't the only web framework for Ruby. In addition to TDD, learn to document your code with RDoc or YARD; good documentation is a gold mine. I would also stress learning secure coding best practices.
Oh. Are there are tiny frameworks to learn then? I only want to do small things and bringing in Rails or Sinatra seems like using a bullet to swat a fly.
They are recent (1.9.3+) but the language level is pretty irrelevant to what they teach and the examples they use are pretty plain ruby. This is more about architecting things than "How to use these gee-whiz bang 2.1.2 features".
http://www.madebymarket.com/blog/dev/ruby-web-benchmark-report.html has a list of frameworks (A lot of them small) you might want to look at.
A report on the various options can be found here: http://www.madebymarket.com/blog/dev/ruby-web-benchmark-report.html But listen to /u/jrochkind - Do NOT use Webrick in production. As an aside, sinatra did not "come" with webrick. Webrick is part of the ruby standard library so most web frameworks use that as default because it can be counted on to exist. It is the very definition of least common denominator.
Sinatra is really quite small, at only 1500 LOC. I've used it for many small to medium projects professionally over the last several years, and love it. If you want something lower-level than Sinatra, you could use Rack (which both Sinatra and Rails are built on top of), but I've never done this myself. Another alternative, depending on your requirements, is a static site generator like Jekyll or Nanoc. The former is more opinionated, but easier to get started with. I have sites made with both and they have their pros / cons but I would recommend either.
Great resource! I hadn't seen this before and had heard of less than half the frameworks evaluated. It also reminded me of Cuba, which I'd taken for a trial run a while back but completely forgot about.
Every time I read this, I can make it one additional paragraph in. I think it's the perfect tool to measure prowess of Ruby. Or a love of masochism. Or both.
Edit: that said, he's not really avoiding Fixnums if his #to_integer uses a 1 and 0, is he?
What do you mean by 'minimal'? Limiting? Small memory footprint? Low LoC? Go for rails-api, it's damn simple and has a ton of examples. Go for Rack if you want bare minimum.
Rails is indeed a huge monster, but Sinatra is very small and lean and nice! I very much recommend it. 
Those are not part of the computation, only of display. The computation starts with a proc and ends with a proc; but we just can't read it nicely. Saying he's not avoiding 0 and 1 is kind of like saying a LCD monitor is a part of a ruby interpreter.
Thats quite an expensive solution :p
http://rubyinstaller.org/ http://railsinstaller.org/en 
It's worth watching the [original talk](http://rubymanor.org/3/videos/programming_with_nothing/) too
Well, I understand what this is ... but I was just WTF because someone actually did this! :-) It's absolutely awesome!
If you are talking about the `git clone`, `bundle install`, etc commands, you are not supposed to enter those in an IRB shell but in the plain old command prompt. `git clone` will create a folder, `cd` into it, and run `bundle install`. If that fails, run `gem install bundler` and try again. 
At least it works ;D
Here's the process with screenshots: http://imgur.com/a/fDoAS I used [RailsInstaller](http://railsinstaller.org/en) 3.0.0-alpha2 but the process with your installed Ruby should be the same - you just need to run `gem install bundler` before everything else.
Ok so i've run the git clone using the GitHub for windows. The folder is created. Then I opened the plain command prompt and cd into that folder. The bundle install command didnt work. It says that "bundle" is not recognized. Then I ran the gem install bundler in plain old command prompt and again something hapened. The cursor mover to next line but nothing happened.
Run the commands (`bundle install` and `bundle exec middleman`) again after installing Bundler.
I'd recommend using Linux if you are serious about Ruby or Rails development. It's just quite a hassle to get Ruby running consistently on Windows. Download VirtualBox and set up Ubuntu (not 14.04, for some reason it's really slow on VirtualBox).
It's still a very good book to get started with. But like other books, this doesn't follow rails versions closely.
There was a network problem while installing eventmachine. Try running `bundle install` again or follow the instruction and run gem install eventmachine -v '1.0.3' 
ok so bundle install executed fine. Then I moved to bundle exec middleman and got this: http://i.imgur.com/gUPYeRi.jpg This is really annoying.
Nah I mean database data in the test environment. For some reason when I combined minitest with running integration tests in a javascript-capable browser (like webkit), my tests were never stable - the JS tests would randomly fail. It would see records that shouldn't be there, as well as not see ones that were there (randomly). With a suite of 200+ tests, and the suite already taking about a minute to run, we spent a lot of time dealing with that. That's why I switched to rspec - it fixed all the madness. However, minitest seems very stable since Rails has adopted it as its default framework, so there's a large chance there was something wrong with our setup. I do like minitest's smaller API compared to rspec - it gets a little bit heavy at times. Thanks for your thoughts dude
I would suggest that duck typing IS caring about type (it's got the word 'type' in it as a hint!), and that's part of understanding duck typing, that class != type. 
It worked. I cant thank you enough!! :D
Yep, in undergraduate CS class in the mid-90s, we did something similar in Scheme. It's a great learning exersize. (And a damn shame that undergrad CS programs are moving away from teaching in lisp/scheme instead of toward it. Although, sure, they COULD use ruby and still do similar exersizes, which arguably MIGHT work as well pedagogically... but they're not doing that either)
Could use a vm with Ubuntu as well! You will pry my macbook from my cold dead hands, though.
The long and short of it is that Ruby on Windows is less than optimal because the overwhelming majority of developers who work on and with Ruby develop on a *nix-ish OS and likely deploy to a Linux environment. You have two choices that are easier. One is to try JRuby. That is less finicky about where it runs and is a vibrant and positive community. A second option is to use Vagrant and ViritualBox. Vagrant automates creation and management of Virtual Machines and can be used to easily spin up a Linux environment that will automatically share files from the host into the VM. That allows you to continue to use your preferred text editors and OS while having the power to run your code inside the VM. Yesterday I posted two comments along these lines with more information if you're interested. http://www.reddit.com/r/rails/comments/2f8e25/help_needed_rails_server_fails_to_launch_after/ck7fuif http://www.reddit.com/r/rails/comments/2f8e25/help_needed_rails_server_fails_to_launch_after/ck8159p Vagrant is worth the investment in learning as it's not terribly hard to get started, well documented and supported and will give you a toolset that can be used for many different types of projects, not just for Ruby. :)
I call it "type funneling".
Based on your screenshots, you might want to considering using [Console2](http://www.hanselman.com/blog/Console2ABetterWindowsCommandPrompt.aspx) instead of the regular Windows Command prompt. Will let you have more width in the console. You can also have tabs so run the server in one and commands in the other. If you had installed msysgit, you can also create that as another tab as well.
This article shows that working with lambdas in a language without first class functions is painful.
[Duplicate](http://www.reddit.com/r/ruby/comments/2fagf2/programming_with_nothing/)
Was writing up something like this, but pubkey gave you what you need.
In addition to pubkey's stuff, but un-related to your issue, I would recommend reading into (https://github.com/bbatsov/ruby-style-guide). Name your class with CamelCase.. class SimpleServer def initialize .. end end
That would be rather stupid.
That book blew my god damn mine.
Oops, it didn't give me any dup link warning, which it usually does.
Heh. I got distracted by following is link to [Uncle Bob's keynote...](https://www.youtube.com/watch?v=WpkDN78P884). Good Stuff! The absolute most important takeaway from that talk is this quote.... &gt; Architecture is the art of drawing lines.... And once you have drawn the line, making damn sure that _every_ dependency crossing that line goes the same direction. I get screamingly frustrated with what I call "warm fuzzy cloud" architectures... Not "cloud" as in *aaS type thingy, but cloud as in fuzzy blob in the middle of a picture that is suppose to represent the program... but has no concrete meaning.
Getting excited about this kind of architecture and building one from scratch plus actually shipping it are two different things.
I think that approach works well... UNTIL you run into ActiveRecord. The approach illustrated in "you need to create an ActiveRecord version of the repository" seems to me likely, with anything beyond a toy example, to turn nightmarish. I absolutely agree that you are best off with an architecture for your business logic that is not coupled to Rails, actual pure ruby business objects of various sorts. But yeah, where it gets tricky is where you need to interact with database persistence. And, for that matter, with rendering HTML. (You want to do all your HTML rendering independently of ERB and Rails, and then write some kind of translation layer to tie it in? Really? No you don't.) And yeah, Rails doesn't always make it easy. 
Doesn't look like it
The OP says they were using a gem `minitest-spec-rails` Is minitest-rails an alternative to this? They both try to do the same thing? But you find `minitest-rails` works better?
The Hash gets garage collected over time, because it isn't referenced anywhere outside the scope of Object#assert_all_instance_variables_not_nil. 
using [pw](https://github.com/hallwaykid/pw) for [webmail](http://m.whats-your.name/2014/09/03/?set=dir&amp;view=threads) and a news/[activitystream](http://b.whats-your.name/news/). it's a heavily modified fork of camping dating back to 2006 and rewritten numerous times since then
In my experience with both, minitest rails works better. Can't remember the specifics now, though.
So that's what Elixir would've looked like without Erlang.
Well-grounded-rubyist second edition was released in July, so it should be very up to date. I've been going through it as a refresher and have found a lot of stuff I didn't know. 
Database persistence is a tricky part of Clean Architecture. But I think the trade-offs are valid depending on your context. Regarding rendering templates, I consider it part of the delivery mechanism, so in the Rails Controller you have calls to the business gem that responds entities or simple data structures, these can be rendered at the view using ERB. 
Which Hash? "seen"? Yes, it get's GC'd once we unwind all the way out... but that is OK. Yes, this pattern works. It's used in several places in the stdlib (tsort for example if I recall correctly). And I have used it in other code without problems.
Ive bumped into a few errors with it. Not meaning out of date tough.
Stop trying to handle all the details in one place. You might start with min and max methods on `Vector`s, so that your `reduce` block becomes `[vertex.min(memo.first), vertex.max(memo.last)]. You could go a step further and define a `Bounds` class for `Vector` pairs, so you can say `bounds.grow(vertex)` to expand the bounds. The stick a `minmax` method on there as well, and you end up with something like: min, max = vertices.reduce(Bounds.empty, :grow).minmax
One big gripe I have with this is the idea that you need to decouple everything from rails. While that does have it's benefits, it's also overkill 99% of the time. I mean realistically for most of your projects, what are the odds you're ever going to need/want to move your ruby code to something other than rails? Yeah it happens (maybe with a queue system, or an API) but it's an edge case. I try to build my rails apps with a lot of PORO. I love some decorators, service objects, form objects, single purpose helper classes, etc. But going full out and making everything independent of rails with adapters to talk to rails seems like a lot of work without a lot of benefit. 
It's lack of hardware acceleration that makes 14.04 a nightmare in Vbox IIRC.
Have you tried scripting ffmpeg directly?
I have tried this, but I ran into problems I couldn't solve. Namely, ffmpeg on the command line seems to always direct its output to STDOUT and not return anything to the Ruby executing it. By which I mean, if I run `system "ls"`, it runs the ls command, and then nothing happens, as you'd expect. If I say `str = system "ls"`, the result of running the command is saved to `str` as a string and I can do stuff with it. But if I run `system "ffmpeg -i happydog.mp4"`, I get the full ffmpeg log directed to STDOUT (which I didn't ask for) and if I run `str = system "ffmpeg -i happydog.mp4"`, I get the output again, and `str` is empty. This means that I can't get the duration information, which I need to do my screenshotting (I'm taking one screenshot at 20% of duration, one at 50%, and one at 80%).
Honestly the benefit is in a couple of places, and maybe you don't have these problems, but I've seen them frequently: A) Multiple apps sharing similar logic. Anything but 'share it in a gem' is a nonstarter. B) Running background tasks and reporting - they're not web-linked, running them in a rails rake task is pretty heavy-weight. With your logic in a gem you can do them outside the request loop without bending over backwards. C) Testing and maintaining your business logic separately from your display logic - it's often very handy to see that 'no, our logic here is broken', or 'oh yes, the logic is sound, but we are displaying it wrong'
You problem might by that ffmpeg -i outputs to stderr, not stdout. Try redirecting it in your call (ffmpeg -i example.mp4 2&gt;&amp;1 ), or using a named pipe, or a temporary file. Edit: doing str = `ffmpeg -i video.mp4 2&gt;&amp;1` Gets you the stderr output in str. Doing str = `ffmpeg -ss 0.5 -i video.mp4 -t 1 -s 480x300 -f image2 imagefile.jpg 2&gt;&amp;1 &gt;/dev/null` Outputs a screenshot at 0.5 seconds into the video, stores the stderr output in str, and redirects all the log info you'd normally see to /dev/null, so it doesn't pollute your script's output. Hope that helps!
Ok, at the danger of sounding like a negative nancy, I have some big issues with this. The ObjectId of a mongodb entry is, semantically, completely unrelated to the created_at date time of the model. The fact that a BSON ObjectId stores a timestamp is an implementation detail. If you ever decide to move your dataset to another data store, or if you ever have to import an old dataset, you are gonna have a bad time. Also, the timestamp stored in the ObjectId is probably the time it was inserted into the data store, not necessarily the time it was created. What if you asynchronously store stuff after some expensive validation? Then there might be a big gap between when something was created and when it was persisted. Also, there is no relation between the order items are created and in what order they are persisted. Some records might be persisted earlier than records that were created before them. So, while this technically works, it is semantically incorrect.
I use ffmpeg-thumbnailer
This? min = Vector[vertices.map(&amp;:x).min, vertices.map(&amp;:y).min] max = Vector[vertices.map(&amp;:x).max, vertices.map(&amp;:y).max] Or am I misunderstanding what you want to find? Also, what's with the variable name `vertices`? I'd expect an item in an array named like that to be a vertex, not a vector?
 longest_word = File.open('my_text.txt'){|f| f.read}.split.sort_by(&amp;:length).last
Can you post an errors you get? Code you posted works just fine (only File.open replaced to string) http://rubyfiddle.com/riddles/d3f2a 
I would love to hear your thoughts on how to keep architecture clean and introduce concept of micro services to it?
Huh, so it is.
Now to make it efficient
&gt; Nope, it isn't semantically incorrect, it could be semantically incorrect depending on now long after new you call save. I'm sorry, but I have to disagree with you here. A specific method of storing something is either semantically correct, or it isn't. It is not correct some of the time and incorrect some other time. The BSON ObjectId is meant as a unique identifier and it happens to also use a timestamp to achieve uniqueness. It is not meant as a field to store timestamps. Ok, so you say that the ObjectId is set before persistence? I believe you, but I find this kind of strange. I'd expect that the mongo server dictates the ObjectId, but whatever. The behavior you describe is flipped from my example, and because of that it suffers exactly the same problem.
Your code should be relatively isolated anyways, even if it does live in the app. "Clean architecture" like this is what people dream of having but always end up abandoning because it's impossible to maintain and you end up having A LOT of code in A LOT of places. It's just not sustainable.
Efficient for what metric? It should be relatively time-efficient as-is i think. Could be more memory efficient if you read smaller chunks of the file at a time and keep a running record of longest.
You can skip the File.open, File#read step by using File.read directly. File.read('my_text.txt').split.sort_by(&amp;:length).last 
If the developer doesn't know how the id generation is implemented he wouldn't even know it is a timestamp and that it could be used for that. And if adding an index to a field isn't a burden for you, that's great. Unfortunately, including indexes to multi-million document collections without taking the database down isn't exactly simple.
+1. There is an ancient ayurvedic proverb I just made up: "When isolation is bad, a decoupled hexagonal architecture is of no use. When isolation is good, a decoupled hexagonal architecture is of no need."
I actually do something similar, except I grab 3 different resolutions of 16 screenshots equally spaced (by time) across the entire video. I script ffmpeg directly, and it runs on about 100k 30-90 minute videos in about 18 hours. I've attached the relevant code snippet below, in case it helps! ffmpeg_output = `ffmpeg -i "#{existing_file.full_path}" 2&gt;&amp;1` resolution = ffmpeg_output.scan(/[\s]+([0-9]+)x([0-9]+)[,]/) if resolution.count &gt;= 1 then resolution = resolution[0] end if resolution.count &gt;= 2 existing_file.width = resolution[0] existing_file.height = resolution[1] else existing_file.width = 0 existing_file.height = 0 end existing_file.size = File.size(existing_file.full_path).to_s duration = ffmpeg_output.scan(/Duration:[\s]+([0-9]+):([0-9]+):([0-9]+\.*[0-9]*)/) if duration.count &gt;= 1 duration = duration[0] if duration.count &gt;= 1 (0..2).each do |i| duration[i].sub! /\A0+/, '' if duration[i] == '' then duration[i] = '0' end end duration = ((Integer(duration[0]) * 60 * 60) + (Integer(duration[1]) * 60) + Float(duration[2])) end else existing_file.duration = 1 end existing_file.duration = duration puts ("File is: [#{existing_file.title}] for #{existing_file.duration.to_s}@#{existing_file.width}x#{existing_file.height} (#{existing_file.size}b)") existing_file.save unless existing_file.duration &lt; 16 or existing_file.width == 0 or existing_file.height == 0 dstep = existing_file.duration / 16 `rm -rf #{Rails.root}/public/thumbnails/#{existing_file.thumbnail_dir}/*` (0..15).each do |i| Rails.logger.info "Generating thumbnail #{i.to_s} (#{existing_file.thumbnail_dir})" `ffmpeg -ss #{dstep * i} -i "#{existing_file.full_path}" -vframes 1 -vcodec mjpeg -an -f rawvideo -s 100x75 #{Rails.root}/public/thumbnails/#{existing_file.thumbnail_dir}/#{i.to_s}@0.5x.jpg 2&gt;&amp;1` `ffmpeg -ss #{dstep * i} -i "#{existing_file.full_path}" -vframes 1 -vcodec mjpeg -an -f rawvideo -s 200x150 #{Rails.root}/public/thumbnails/#{existing_file.thumbnail_dir}/#{i.to_s}.jpg 2&gt;&amp;1` `ffmpeg -ss #{dstep * i} -i "#{existing_file.full_path}" -vframes 1 -vcodec mjpeg -an -f rawvideo -s 400x300 #{Rails.root}/public/thumbnails/#{existing_file.thumbnail_dir}/#{i.to_s}@2x.jpg 2&gt;&amp;1` end end
It has been a couple of months that we are introducing this approach at Magnetis (magnetis.com.br) that has a big size codebase that grows everyday, there are pros and cons as anything that is worth looking at software development. What I can say so far is that the pros are higher than the cons in our context; we also consider the context of the page/feature of the app we are developing, if it is part of the core business we consider using clean architecture otherwise we go with Rails way (there a lot of pages in our app using the Rails way and it works just fine). There are cases that we need to deliver responses not only through the web but also in the command line or for internal API’s so changing the delivery mechanism is easily done with this architecture. We also changed the way data is persisted in the database (twice), so being coupled to the interface of the repository instead of the ActiveRecord model and fields was beneficial.
Most of these issues we deal with by building single purpose services (which are an abstraction at an app level) or gemifying up common code when for some reason we can't do a service. Note that I'm not speaking about gems being unuseful, rather the idea that your entire rails app should actually be a gem or engine in isolation from rails.
You should be blogging and giving talks about what you've learned :) I sort of consider the repository pattern to be more trouble than it's worth, so I haven't been a fan of these "bolt on hexagonal architecture around your rails app" type approaches. We've been having success abandoning ActiveRecord (and a repository middle layer) altogether and implementing persistence with event sourcing, but it's a tremendous challenge to get something like this off the ground.
Got any more information? I've been running Ubuntu Server 14.04 in Vbox since it was released and it has seemed sluggish compared to some of my previous VMs.
Thanks!
True that, although this syntax is actually significantly easier for me to understand than lambda calculus notation (which could be because I'm a lambda calculus noob or indicative that the notation is opaque) 
So what's the point of STI? Why would you even do that?
I was trying to avoid going outside the code, if possible. In this case, I've already got Capistrano 3, Chef, and Ambari. Just kind of annoying that something like this: task :uptime do on roles(:all) do |host| execute :any_command, "with args", :here, "and here" info "Host #{host} (#{host.roles.to_a.join(', ')}):\t#{capture(:uptime)}" end end doesn't seem to work nearly as fluidly with the server syntax. [Source](https://github.com/capistrano/capistrano). Or if it has, I haven't found it yet.
Doge!
There's no reason to sort the whole array, OP has a much faster method with Array#inject. [Enumerable#max_by](http://ruby-doc.org/core-2.1.2/Enumerable.html#method-i-max_by) is nicer though: ``` File.read('my_text.txt').split.max_by &amp;:length ```
So you can have a single collection of documents which all share a base class - but specific rows may be subclasses: Animal SheepAnimal CowAnimal Then you can either do Animal.first or CowAnimal.first without needing to create new collections (tables) for each one. This works really well with Mongoid etc. which have no penalties for extra columns in some rows.
General notes to most replies in this thread: 1. just calling `ffmpeg -i` without an output file *will* give duration information, but will exit with a status of -1 (same with `avconv`). Use `ffprobe` or `avprobe` if you aren't actually generating an output stream, if all you do is want to inspect the source file. 2. Use [open3](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/open3/rdoc/Open3.html) rather than backticks to explicitly separate stdout and stderr.
STI is very useful if you use it well and properly. As a rule of thumb I generally use it when: * most of the fields are the same (likely most of the logic is shared) * when you would want to look at or manage the entire collection at once (eg. from an admin page) * when there is a clear hierarchy of inheritance (you were thinking about some OO inheritance anyway) * especially where only things relevant to AR differ such as relations It's very easy for an STI subclass to for example place conditions on a relationship or add additional relationships with other model tables. This may help where the same value needs to be obtained but it needs to be calculated differently. For example, in a billing system we may have: BillingPlan \ - RecurringBillingPlan (having a period) - AlaCarteBillingPlan (doesn't care about periods) 
How about adding "-vf fps=fps=1" to the ffmpeg options... In the few tests I did (seek to 90 seconds), the "normal" capture took about 11secs while setting fps took ~3s. Quick &amp; dirty example [https://gist.github.com/srinivasmohan/2fb604bda6d464a89517](https://gist.github.com/srinivasmohan/2fb604bda6d464a89517) 
Yeah minitest-rails is an alternative which I personally think has better integration than minitest-spec-rails. It allows you to just use describe blocks on their own like you would with rspec.
Only one suggestion I have: def firefox Headless.ly do driver = Selenium::WebDriver.for :firefox begin yield driver ensure driver.quit end end end
*facepalm* Duh. Thanks man, really appreciate it.
ActiveRecord's api is as big as SQL. There is no way to substitute it for an in memory repository in any general sense. You can, however, choose to enforce that your team use a limited subset, and build the memory repository against it. That doesn't seem to be worth it to me, either. I'd rather run my tests against sqlite3 in memory, and take mysql/postgres extensions off the table, than go with the in memory approach.
`[memo, word.length].max`
To add, you also can define different validations for each of the subclasses. For example, a parent model of 'Vehicle' has a subclass of 'Motorcycle'. The Motorcycle may require that the number_of_seats be less than 5.
That might work, but it'll walk the vertices array 8 times. Ideally I'd like to do it all in one go. Sadly, Ruby doesn't have a Vertex class, so I used Vector instead. Actually, the code this was taken from uses Geometry::Point, but I thought that might add noise to the discussion. Apparently 'vertices' brought the noise anyway.
Why is this downvoted without explaination?
I had thought about adding min and max methods to Vector (actually, Point), but I was worried that people would expect those to return the min and max values of the Vector, rather than the min/max of each axis. Maybe I'm over thinking it. I like the Bounds idea. It adds another class, but I need a bounding box class anyway, and it's a lot cleaner than what I have. That just might be the ticket. Thanks.
I was thinking the same thing. If it really made sense to structure the app that way, you might be better off going with a different database.
I was using it for "game objects". &gt;* most of the fields are the same (likely most of the logic is shared) all "objects" had costs, score values, construction times, etc, but subclasses had different properties. &gt; * when you would want to look at or manage the entire collection at once (eg. from an admin page) I had a few operations where I knew I wanted to access all object times simultaneously. &gt; * when there is a clear hierarchy of inheritance (you were thinking about some OO inheritance anyway) see #1 I also had the added benefit that I knew the total object count would be relatively low, probably less than 100. GameObjects were "fixed data" for the lifecycle of that Game.
Seriously do yourself a favor and use a page object framework like taza.
I made it about halfway. TLDR?
It's not so much that STI is hard, it's that it is limiting because it ties your behavior/logic to your hierarchy, which is resistant to change. Favor composition over inheritance.
As others have said, do not use WEBrick (especially not in production) Unicorn, Puma and Thin are all quite good. Unicorn is the suggested server for Ruby if you plan on hosting your application on Heroku. Edit: At my current client we run hundreds of Unicorns and rarely see any issues with it. We also plan on using Puma for a service running under JRuby.
Congrats, dude.
It will take a long time to fix all gems everywhere, tried to turn that on in a small project and the amount of warnings is incredibly high.
I used to work with one of the guys who wrote Taza! It's a pretty cool framework for sure.
If you want readability, you may have to sacrifice that constraint. How about: left, right = vertices.minmax_by(&amp;:x) top, bottom = vertices.minmax_by(&amp;:y) This'll only walk it twice, and then you can construct your bounds vertices like: min = Vector[left.x, top.y] max = Vector[right.x, bottom.y]
If you're willing to throw down for a subscription fee ($29/month), then code school has some very good interactive videos and challenges for Rspec and TestUnit, as well as other common testing gems like Factory Girl and Capybara. Even if you don't use either of those test frameworks, the ideas behind them will help regardless. Test Unit: https://www.codeschool.com/courses/rails-testing-for-zombies RSpec: https://www.codeschool.com/courses/testing-with-rspec
Oscar! 
Well, maybe twice isn't so bad. I like the readability of it.
;)
So much great stuff!
Show us your current code? Depending on how your options are set, ffmpeg will read the whole file sequentially until it hits the desired frame instead of just skipping to the timestamp where you want a screenshot.
And I overlooked a very critical aspect in the gist posted earlier... Put in the `-ss` BEFORE the `-i` - Thats makes ffmpeg seek directly to the offset without having to decode thru the whole video till that time... Now 3 thumbnails from a 10MB video at 20,50 and 80% in 0.7 secs. (ymmv but you get the idea). Dont even bother with the fps change... 
The nokogiri gem has an executable that does something very similar: https://robm.me.uk/ruby/2014/01/06/nokogiri-command-line.html.
In the code I mentioned, it was not. And in any case, then you would be left with the length of the longest word, instead of the longest word. Sometimes (and especially with code and newbie questions), it's best to be explicit and show your work.
Oh, cool! Didn't know about it. Thanks, will look into it.
for little web server : femtows (300 Loc pure ruby) : https://github.com/glurp/femtows
One reason for the error is that the class is defined in a module. If you have your Simple_Server class inside a module, you will need do instantiate it as: s = ModuleName::Simple_Server.new
I can't remember the last time I wrote a loop in ruby.
Everyday Rails Testing with RSpec A practical approach to test-driven development https://leanpub.com/everydayrailsrspec
Whenever anyone says they're having an issue with Windows no end of people chip in with "use Linux ..." It really doesn't add anything to the debate.
The most common way is the `curses` library.
Depending on what version of Ruby you're using, you should have the `curses` library available to you through std-lib. just `require 'curses'` at the top of your file. I believe as of Ruby 2.1.0 they took it out of the standard library, so you'll have to `gem install curses` from the command line and then you can require it like normal. After that, check out this [tic-tac-toe](https://github.com/grosser/tic_tac_toe) source or this [progress bar](http://0xcc.net/ruby-progressbar/) code for example usage. Happy coding!
Nokogiri is beast, especially when used with watir
That will work 10% of the time.
Que sera, sera. I have used Ruby (not Rails) at school and then at work for the last 15 years, but don't feel the need to evangelize for it. Although it's obviously important to me that it continues to be supported and updated, I don't much care whether all the kiddies think it's the kool language. It seems to already have a big enough, robust enough base of users and developers to ensure its long survival.
I wish the GIL were removed.
Sharing code with non-Ruby developers and end-users.
TBH ruby support on Windows is terrible, to the extent that the most common advice is to use a VM with nix. Personally I don't care about windows BUT improved platform support would be a major boon for Ruby usage.
Agreed. Rails' "opinionated" curation, particularly the flamboyance and (occasional) learning-as-he-goes of its head cheerleader. Watch [this](http://codon.com/the-dhh-problem) and imagine something similar being said by important people in the Python community about Guido van Rossum. Can you? I can't; the whole point of Guido as BDL is that we generally agree that he's (always trying to be) a *Benevolent* Dictator for Life…and doing a pretty darn good job of it, too.
`s/\.$/ other than JVM-based Ruby implementations./` This. C bindings are lovely, but they're more along the lines of "hey! we can *probably* make this work for most of the people, most of the time" than a serious open interop platform — the current state of affairs likely (or at least plausibly) being close to the original intent?
rubinius is here to answer your prayers
have you tried rubinius?
the one thing that's actually relevant. i wonder how many of the other commenters here are actually running into issues with the GIL (especially when there's rubinius right here too). but agreed, we need more command-line ruby things. i'd love to write a DVCS in ruby.
That's not actually the point though :) The point is that the default Ruby should just work that well.
fpm, Puppet/Chef, logstash (distributed as a jruby jar), Vagrant... Ruby is dominating the "devops" space.
Nokogiri and watir? Can you elaborate a bit more?
I like Rubinius but it is too buggy for me. It is also missing a few elements of the std-lib which makes programming in it annoying because you sometimes need to add a workaround for something that is fully supported in MRI Ruby. 
The community. Lazy programming practices. Eschewing data-encapsulation.
While it would be nice, that pretty much guarantees a rewrite of yarv, since all the data structures would need to be made threadsafe too But hey given the history of MRI, if you start writing your own threadsafe interpreter it might become the new official one ;)
I'm still waiting on http://x.rubini.us/ :)
IIRC, YARV originally had a thread-safe mode, but it never went anywhere because it would break pretty much every C extension. PHP has had a thread-safe VM for many years, but look at how rarely it's deployed as such.
Yup, really comes down to the libraries... that's probably the most code to change. In comparison, java.util.concurrent is an oasis of thread safety. (which I miss dearly sometimes in non-jvm languages)
Came here to say this, found it already said.
Ruby is in great need of Accessible educational material: Clear, non-obfuscanted, concrete, explicit examples with glossary-style jargon-free, low-barrier-to-entry proofread documentation (and goal-oriented narrative guides) that lists out supported features and expected behavior in an organized, updated, verified, maintained, easy-to-navigate^1 way which observes w3c's usability and contrast guidelines^2 and behaves well on multiple devices.^3 ... that would awesome ... [1] server-side page-renders that respect bookmarks, printing, and the back button [2] distinctive fonts such as "Times" and "Georgia" and text colors such as "black" on "white" [3] From a variety of manufacturers (not just i* products).
You didn't link it haha
oh sorry ... rubydocs is ok. i'm talking about third party :: essentially everything in the form of a rubygem. I used ruby professionally for about 2 years (2010-2012) to build ambitious back-end networking systems for a company I was at (frameworks, apis, libraries) - those were my assignments and ruby was a requirement. It seemed to be a cultural thing to not have documentation like the one that I outlined. Ruby itself wasn't bad ... and it got progressively better while I was involved with the company. It may be great today ... I don't use it more than a few times a month these days - and nothing I do is quite as ambitious any more.
yes. GREAT book.
begin i hate that begin end crap. why can't it be like c with { } or python with white spacing or even lisp with the (()) , begin end? i can't take it serious. :-( end
&gt; Lazy programming practices Could you provide some specific examples?
Dude you're over engineering like crazy, lol.
Haha, yeah working on my design patterns. Anything specific?
abstract factories, singleton pattern..
You are going to have to "require" the relevant file(s). Rails loads your code when the app boots, which is not something Ruby does by itself. A simple google search for "require files ruby" should steer you in the right direction...
With irb it's a bit of a hassle, but pretty easy with [pry](http://pryrepl.org/): require 'pry' x = 10 binding.pry Will result in a repl with pry(main)&gt; puts x =&gt; 10 From (http://stackoverflow.com/a/7102815/127059). Replace x = 10 with whatever loading/initialization code you have.
My favorite approach is having a handy rake task like so: http://erniemiller.org/2014/02/05/7-lines-every-gems-rakefile-should-have/
There's the Ruby-debug gem. Or, you can use pry which offers some unique features. Also, there's debug mode from the command line argument. You'll want to use the gem, based on the limited information. I would provide links, but I'm on my phone. Google for the ruby toolbox.
I found a neat little tip in IRB that will run a file, load 'file.rb' It has come in handy a few times when debugging some stuff or if I put my long list of code in my editor, save the file and then load it for execution. Same thing as pasting the code into IRB without the mess.
I'd say Puppet/Chef are not the type of tools "end users" or even developers in general tend to use, but devops/sysops do. `yum` the package manager, though, is something everyone uses and almost everyone wants to write a script for, sometime. Haven't used Chef though, but the fact that Puppet has a DSL for writing recipes is a big no-no if what you want is to make ruby popular. I like ruby, I don't like dealing with Puppet. I'm seriously biased against Vagrant because I've always believed that the reasons people put for using it (one OS/environment for both dev machines and production ones gives you less headaches) is mostly the result of not being familiar with what you're running. I've never come across any issue with environments so I've seen it like an unnecessary overhead. Also, it's a tool that some developers use, but hardly that many. I know, it became a trend among ruby/rails/node/blah devs, much like docker and coreos seems to be the trend now, but it's still used in a very specific community of developers. I'd like to see a more generic ecosystem. Like /u/seydar said, a DVCS in ruby for example would be something many devs from different platforms and ecosystems could hack on. I also think maybe a blogging platform that's extensible with plugins/modules written in ruby that could rival WordPress. Most ruby based blogging platforms I've seen are pretty sad and extending them is usually a pain or simply something I can't be bothered with. WP themes, on the other hand, I have no problems writing. It's that kind of quick and dirty hacking that Ruby needs, and not the strict, engineering-grade architecture that people try to shovel into any ruby project (write this as a module, use this DSL, etc). In fact, what killed ruby web development for me was things like Cucumber. I like writing ruby because ruby is beautiful. I don't need tools that make me write ceremonial code in your favourite DSL just because you thought it would be great. Let us hack, without much hassle, and in ruby. 
Then don't post.
This. I ran "yum install ruby" on my CentOS machine when I was about to start learning it. The standard rails installation process barfed that my Ruby version was unsupported and refused to install. Several attempts at following tutorials on Ruby (without rails) landed me with advise that the tutorial won't work pre-Ruby 1.9 or something. Installing outside of repositories is a terrible no-no in sysadmin land, but Ruby doesn't leave you a choice.
Sure, this is doable. `require 'pry'; binding.pry` will open the pry REPL at whatever context you drop it in. I use this a ton in Rails projects for inspecting controller states, etc. - probably one of my favorite Ruby tricks.
Yes ran into this myself, I wanted to use Ruby for system scripting on our prod boxes (we are running RHEL 5, which is still supported by RedHat) but the version in the official YUM repo was so old. I ended up creating my own RPM using FPM after compiling from source.
The point of vagrant is ensure all developers have the same environment while coding. You say cucumber ruined web dev in ruby for you? Lol
Rails hooks into the application by loading your environment. To load your rails application into a pry session try this: `pry -I . -r config/environment`
I've been working on this gem for about 2 weeks - enjoy and let me know what you think! And if you run into any issues :)
wait how do you process php and wordpress api calls?
Why didn't you just install the ruby193 software collection? http://wiki.centos.org/AdditionalResources/Repositories/SCL
If you're lucky. We also track click-throughs with a service on our web server, and encoding any URLs embedded into the emails; it captures a few more people that might now have followed through to a registration process. Inside Sales are then unleashed on the hapless fools.
I've heard this a lot, but honestly I'm not sure how necessary it really is. For example, the GIL isn't often cited as holding python back. The [Parallel gem](https://github.com/grosser/parallel) goes a long way towards addressing common parallel processing use cases. Too bad it isn't part of the standard library the way the multiprocessing module is in Python. That said, [Matz is planning](https://twitter.com/yukihiro_matz/status/495219763883163648) on removing the GIL once there are some better concurrency primitives in place.
&gt; People: service objects are bad imperative code dressed as objects; smells for code that wishes it was in a functional paradigm, and is almost but not quite functional nor object oriented. I find it interesting, could you elaborate on that?
I usually just run $ bundle outdated https://gemnasium.com Is also a nice service to keep track
Slightly misleading? Should be 'site theme' instead of just site? Pretty cool though. Have an upvote.
This does nothing with php - just sets up a quick way to grab the CSS, JS, and HTML in a manageable way.
+1 for Gemnasium.
Nice post - I love tenderlove's comment. Edit: From the comments... &gt; You can just do "bundle exec pry --gem" as well -- automatically adds './lib' to the load path and loads the gem
Any plans for Python and Go SDKs? Also, are the wallets stored on your servers?
You are right. I tried to edit the title but do not see an option. And thanks!
There's a `bundle outdated` ? Awesome, thank you.
Yeah, who put that there? &lt;/sarcasm&gt;
I use this zsh function: function ccc() { file=$(find lib -type f -depth 1 | head -n1) pry -Ilib -r./$file }
Rails is weird because it auto-loads all of your dependencies. It does this via the line: Bundler.require So, assuming you are using Bundler, you can mimic this behavior easily. I personally don't like auto-loading libraries, but I still like Bundler to setup the load path, so my scripts usually look something like this: require 'rubygems' require 'bundler/setup' require 'irb' # Bundler.require :default IRB.start Now, when you run the script, IRB will run but the load path will be setup correctly. &gt; require 'mylibrary' =&gt; true 
how is that differnet to just using `require` in irb?
Where does OP say he wants access to locals? Locals aren't available in the Rails console either. 
He doesn't, but the more context the better -- and `binding.pry` provides that whereas IRB.start does not.
No problem for keeping data in sync. Usually the initial configuration is a bit more than what one may enjoy doing, but isn't too bad. I will usually only do this if I am intentionally trying to keep different sets of data separated. For example, if I am trying to meet the criteria for a SSAE 16 Audit, there is certain steps that I have to take to ensure that certain data is well protected. In order to do this, I may decide to keep this set of data in a physically separate location with much more restrictions. Such type of physical spaces can cost more money so only sensitive data is stored in this facility, while the less sensitive data is a different facility without the extreme measures of data protection. I haven't seen or had any issues where the data synchronization was any sort of issue.
Try require '. /update_all' You need the ./ and do not need the .rb extension. 
regex is your friend here [8] pry(main)&gt; strings = ["0128505444FD1928k1121", "0123978505333FD197k1221"] =&gt; ["0128505444FD1928k1121", "0123978505333FD197k1221"] [9] pry(main)&gt; strings.collect{|s| s[/012(\d+)[^k]+k(\d+)/, 1]} =&gt; ["8505444", "3978505333"] [10] pry(main)&gt; strings.collect{|s| s[/012(\d+)[^k]+k(\d+)/, 2]} =&gt; ["1121", "1221"]
Making lots of assumptions: a = '0123978505333FD197k1221' a[a.index('505'), 6] =&gt; "505333" a[-4,4] =&gt; "1221" 
I work with 40 devs who all can have vastly different dev environments. I appreciate wanting to know why it doesn't work on one or the other, but when it comes down to getting an application out I do not even for a second want to have to consider 39 other development environments if the production code is not going to have anything to do with them. Especially if I have no idea WHAT your dev environment does differently and have to spend hours solving an the issue which doesn't benefit me at all in the end. That is the point of Vagrant. I don't care which version of python/ruby/puppet/java/mysql you have installed or how customized your PATHs are because it's not what I'm going to use in production. Vagrant is basically a wrapper that alleviates that headache.
If the project uses Bundler: bundle console [rubygems-tasks](https://github.com/postmodern/rubygems-tasks#readme) also provides a configurable `console` task: rake console 
Good news! Ruby appears to feature a built-in function for this: http://www.ruby-doc.org/core-2.1.2/File.html#method-c-fnmatch
Three: MariaDB as primary store, Redis for ephemeral data needed by multiple threads or app configuration settings, and Memcached for, well, caching. We store different kinds of data in each so we don't really have synchronization problems. Redis being single threaded can bottleneck us if we aren't careful, but we've made sure not to be over-reliant on it, and it's worked out quite well.
Company wide we use postgres, sql server, redis and memcached, no issues with synching though. Most projects use one or two stores simultaneously (one for storage and caching each mostly)
Use Regex For your problem this is the simplest solution I could think of, assuming the number 505 is the starting point for the search. Also another place to look: [Regex lookaround](http://www.regular-expressions.info/lookaround.html) string = ["0128505444FD1928k1121","0123978505333FD197k1221"] results = [] string.each do |num| num.match %r|(505.+?)([a-zA-Z].+?)(k)(.+)| res = [$1 , $4] results &lt;&lt; res end =&gt;["0128505444FD1928k1121", "0123978505333FD197k1221"] &gt; results =&gt; [["505444", "1121"], ["505333", "1221"]] *edit* - Edited code and comments
The pattern/approach I take in Rails is to create a service object that includes `ActiveModel::Model` which allows me to create custom validators and make use of the standard errors property. Here is an example from a project of mine that creates this service object: https://github.com/bensheldon/panlexicon-rails/blob/master/app/models/search.rb#L1-L7 ...that has a very simple controller: https://github.com/bensheldon/panlexicon-rails/blob/master/app/controllers/search_controller.rb#L2-L8 ...and a very standard looking view that display's the service models "error" property: https://github.com/bensheldon/panlexicon-rails/blob/master/app/views/search/search.html.haml#L3 
The prep work for App Academy is riddled with little challenges: https://github.com/appacademy/prep-work Project Euler is fun: https://projecteuler.net/ Also, codecademy is a good tool I am sure you know about. It does a good job at giving problems that are directly related to what you have just learned. http://www.codecademy.com/en/tracks/ruby
Are all coding challenges like the app academy one?
Very cool! Will you make a tut on how you made it ?
Heroku Postgres for the main data store, memcached for caching, elasticsearch for search indexes of data stored in postgres. Syncing between elasticsearch and postgres is all handled by the elasticsearch/model gem for rails and haven’t had any issues. Postgres is the primary store for all the data that is in ES, so it can be re-indexed at any time within ~2-3minutes. Memcached can be flushed at any time as we usually hold third party searches combinded with our ES searches for 24 hours, sometimes this needs flushed, but it is usually pretty well cached again within a minute or two. We also do two way sync with dropbox, that has only been released for a couple of weeks and so far has been a bit of a pain in the arse for keeping stuff synced. Dropbox usually ends up grand, but have seen a few occurrences in the wild where we have had duplicates on our end. We are using dropbox web hooks to manage the two way syncing. The main issue here is that all you get from dropbox is a file path whereas we store a lot more metadata about the files on our end.
Postgres, Redis, and ElasticSearch. Only Postgres is a source of truth, so sync isn't that much of a problem. 
May I ask the name of the camp? I am a recent grad of one in San Francisco. 
MySQL, HBase, Solr, S3, HDFS
This is true and a real shame. My day job is wireless network R&amp;D, and Ruby has been a joy for writing analysis tools where the week or two I spent considering Python for this role scared the shit out of me. What a goddamned mess.
Do you have a link, or something more specific I can search? Thanks for the well wishes!
FizzBuzz: For all numbers up to 100 print out Fizz if the number is divisible by 3 print out Buzz if the number is divisible by 5 print out FizzBuzz if divisible by both 5 and 3. You will be asked this. It is almost the litmus test of these schools. I was accepted into 3 of them and ultimately decided not to attend. Make sure you feel like it is a good choice for yourself, they are very expensive and with a little willpower you can teach this stuff to yourself. Network by going to your local Ruby meetup and you can find yourself an internship, and get paid to learn more.
%
In the right use case, it is. We dumped Mongo for ES as a store and we can't be happier. 
Me as well. Which one? 
Making even more assumptions: a = '0123978505333FD197k1221' puts a[/505\d*/] # =&gt; "505333" puts a[/k(\d*)/, 1] # =&gt; "1121"
Mysql, Reddis, Elasticsearch and Memcache. Elasticsearch contains fields from mysql and is updated whenever the model updates. Memcache contains anything and updating it is handled by the web framework. Reddis is for work queues and shared settings.
"Not all templating engines play nicely with html. If you run into templating issues, erb will be your safest bet because it renders as pure html." ... not quite getting your point since all mentioned template engines you mentioned (erb, haml, slim) all render to pure html.
I have a very elementary understanding of these skills. I know what they are, but don't know how to do them. Total n00b.
The gem converts html for page A to slim, erb, or haml. Sometimes the html for page A is messy and in turn produces bad slim, which can cause the application to blow up until corrected.
Oh now I see! Yea makes more sense this way :)
It could be an if..else expression, which would be the easiest way to do it. Instead of running a while loop, consider doing it in a range: (0..100) do |num| end I wouldnt be helping you if gave you a solution. You can do it! Post yours here and I will give you some feedback.
That just kind of proves the point though, doesn't it? The "Project Status" talks about a release that happened in March 2013. Hopefully GSoC 2014 will bring some new life.
What is your monetization strategy? What are your current expenses?
Others may have a better solution, but what about just loading the iframe URL in PhantomJS?
+1 for Gemnasium too :)
leaving this here for those that don't know, lambdas would handle the return in a "conventional" way (returning only from the lambda), while procs return control flow from the method they were called from.
I've tried that actually and it's just "/ajax" after the original URL and it won't let me "submit" the account information and password. 
This seem ligit! I am a web dev with 4 years of xp. I live in quebec (Qc, Canada) and as you can see, i'm not completly fluent with english (french speaker)! I am full time dev for a big corpo. Working on lab's management system (quite big, quite complex etc..). Been working most of these last years in a .net environment (SOA(wcf), MVC3/4 used like a json api and angular as client side (1year and half for angular)). Most of my personnal project are done with ruby and angular. Actual project (at work) is a SPA (angular off course) with about 60 pages (about 10 of them are really complex pages using a lot of directives, services, filters etc...). (Project released and working, off course, i cannot show you anything as this is all corpo projects, so far from open-source world). Dont really see much more to say, but feel free to ask anything. By the way, my name is Dominic. Have a good day
why the h is this in a ruby sub? 
So, if we decide that `accepts_nested_attributes_for` is undesirable in most circumstances, then how does this gem address its' issues? It looks like the exact same thing as `accepts_nested_attributes_for`, in practice.
Because he's using watir. (Hint: The 'R' at the end stands for Ruby)
Fortunately there are alternatives to RVM. I use a modified chruby and ruby-install. (https://github.com/postmodern) but there are others too. I am the biggest hater of "clever" code. This is one of the worst trends in the ruby world i think. Programmers biggest enemy is complexity, try to make it simple. 
GIL is not that bad, just forget multithreading, it is a big step backwards anyhow. You can find better solutions nowdays i am sure.
Bonus, if you want to use a file glob the same as a regexp, I've written a gem that does just that: https://github.com/adamsanderson/file_glob
I'm running this in my console Ruby app and it still looks crappy! Halp!
&gt; The last half-dozen or so that I've learned make no such claim. I'd be interested in knowing what those languages were.
my initial reaction was "isn't bootstrap simple enough? why do I need helpers?" but damn, that looks like a nice way to save some keystrokes.
MySQL (Percona) as primary data store. backend processes denormalize data into MongoDB and Elasticsearch for additional functionality. Redis as a cheap cross-server shared memory. memcached for caching. S3 for file uploads. lots and lots of messages on RabbitMQ to drive it all.
I'll consider it if enough users show interest. I've run into some really interesting challenges and have a bit more to wrap up with the gem before I'd feel comfortable making a tutorial
Should probably make it a bit more obvious that it's for Bootstrap 3. I saw the optional theme on the homepage and almost thought it was for v2.
Sent you a PM. Lets have a chat!
Currently, there is no monetization strategy. My goal is the build the best creative writing tool out there and get a ton of exposure. The goal is to have 50,000 active users by 2015. I've explored many ways to monetize this product, but it is not the focus at this stage. Current expenses are quite low: 1) Digital Ocean Server ($10/mo) 2) Private Github Repo: ($7/mo) That's about it.
I'm Mexican and speak some English
What?
My same thoughts. However, I use Sublime Text 3 and have the Bootstrap3 Snippet plugin installed. makes it even easier to not have to recall anything from memory.
I came in here to bitch at you about that's-not-really-anybody's-business-but-Matz's, but before I did, I figured I'd open TFA, only to see that Matz wrote the article himself. Duly noted. Thanks for sharing. *EDIT: Added a bit for clarity.
What version of Bootstrap is targetted? Has Bootstrap ever changed HTML requirements/recommendations within a minor version? How are they going to handle versioning/release-management when that happens next (even in a Bootstrap major version?) I think it might be wise to version `bh` with numberse related to Bootstrap versions, instead of calling this first result `1.0`. In general, some of my biggest headaches in maintaining Rails projects have come from this sort of thing, figuring out what versions of what goes together (and sometimes not having compatible dependencies available) in a tangle of multi-party dependencies (especially when some are non-ruby dependencies, as in this case). Maybe that's made me oversensitive though, and it's not likely to be a problem here? It still makes me cautious of adding this dependency.
While that is, for me, personally disappointing and hilarious to hear, it's also none of my business or yours to post and share.
Matz himself wrote the article
Upvote for referencing http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
Sounds like a nice product. What do you mean by 100K page views off of one post? You posted it on Reddit or somewhere like that and got 100K page views that time? The stats you provide, are they per month or since the beginning? In any case, I wonder about the time spent on site. I think 5 minutes is normal if part of the process for using the site is about waiting. I don't think that's a significantly good number. It would probably need to be much higher than this. Bounce rate is also not that great. I wonder how many people go beyond 2 pages. Since interacting with that page (submitting that form on the homepage) is very easy, it's normal that your bounce rate is low. However, I don't know if that action from the user means much. Sure, they initiate the process, but I bet part of why people interact with the form is because they don't know what's on the other side and are curious. Little did they know, the next page is going to make them wait until somebody joins their writing session and they still don't know what's happening there, what it looks like or much of anything. I really do like the idea, but I think the metrics presented here are either vanity or misleading. I don't think that's on purpose, no offense intended. How many active users do you currently have? How do you define an active user? You're aiming for 50K active users in a little over a year. It sounds like you're expecting a pretty incredible growth. Ming sharing V2 with us? What problems are you solving with this new version? To me that's going to be primordial. At the moment, it sounds more like you're selling (to us) your ability to bring people to your site vs the actual product. Since it's all going to change in V2 and that the current state of affairs is not representative of what it will be (since it was a prototype), then what should we expect with this new version?
What is your objective with installing ruby on Windows? I ask this because there may be better solutions for accomplishing your task.
1. Marshalling - "Saving" an object so that the script can re-use it at a later time. Marshal.load loads the saved object. More details [here](http://www.ruby-doc.org/core-2.1.2/Marshal.html) 2. It looks like it comes from RohMobile's [DateTimePicker](http://docs.rhomobile.com/en/2.2.0/rhodesapi/datetimepicker-api). 1. **k** and **v** probably stand for **key** and **value**. So, $choosed is probably a [hash](http://www.ruby-doc.org/core-2.1.2/Hash.html). So from the example above, the key-value pair is { 0 =&gt; 2014-09-12 11:26:50 }.
ty 
np, hope that helped.
I never really used Ruby. I just installed it so I can use SASS with my web development. Lol, I just ate my lunch and when I came back to my laptop, Ruby Installer ran. It took it 30mins to run it, holy god... EDIT: Whoop, "ruby -v" from the cmd: ruby command does not exist EDIT2: It works, finally... Restarted PC 3 times, rofl
It's far from dead. There are still plenty of people using it for plenty of tasks to which it is well suited. E.g., git's built-in SVN interface is written in Perl. If it's not the "glue language of the Internet" anymore (which may or may not be true), that would be because Python/Ruby/PHP/What-have-you were just better suited for it.
Kobaltzz, you make a good point. The reason why Bh was built in the first place, though, was that we work in a team where developers can use their favorite text editor, so that specific solution was not working for us. I'm curious about that plugin, though: what is the URL? Thanks!
Can concur. I wrote a little gem for parsing/normalizing grab-bag prices scraped from the internet ([FuzzyMoney](https://github.com/bensheldon/fuzzy_money)) and made a huge mistake in hindsight in using Floats. It works (the point of the gem was to just throw strings at it and it would do its best to turn them into currency-like objects), but modeling them in floats is more fuzzy than I'd like. 
jrochkind – you are right! I forgot to mention which version of Bootstrap. I just updated the README file, replacing "Bootstrap" with "Bootstrap 3" to clear things up. Regarding versions, I see your point. For now, I'm following semantic versioning, and that's why I released 1.0.0, because the (Ruby) API is not meant to change. I will consider your suggestion later on.
This is the one I use. https://github.com/JasonMortonNZ/bs3-sublime-plugin
NoInkling – thanks for the feedback. I am used to Bootstrap Theme and I didn't realize it would cause confusion. Because of that, I have now updated http://fullscreen.github.io/bh so it does not load "Bootstrap Theme" by default, although I have left the option to enable/disable it with a link in the right sidebar. Thanks for your feedback!
Regardless of the fact that he wrote the article, this has nothing to do with Ruby. If we found out Matz's shoe size, would it appropriate to discuss his shoe size on /r/ruby? Or if we found out that his favorite food was artichokes, would that be appropriate to discuss on /r/ruby?
It's a persistence layer. It has an extremely rich query interface, high availability, configurable consistency, and it can even do limited joins. How is that not data storage?
How any sane or rational person can believe in religion blows my mind, but if he's happy does it really matter?
It's "inappropriate", and "than" not "then". You're such an illiterate underwear skid mark
Well we have his disposition encoded in the community via MINSWAN. It's not like we pretend he doesn't exist. Personally, I like the human connection to the guy who wrote the language in posts like these.
If new job is not urgently needed spend some time contributing to open source projects. Having some big names on your CV can change thing dramatically. It doesn't really mater how big (or small) your contribution.
Yeah, job isn't super pressing. Just looking to shift career path's a bit. This is good advice, I've focused on my own open source ruby projects a bit, getting some PR's under my belt would be nice to show.
I think major voices in the (early?) community had been badly burnt earlier in their careers, with code and comments that are the next worst thing to *guaranteed* to be out of sync. [Hilarity](http://tvtropes.org/pmwiki/pmwiki.php/Main/HilarityEnsues) reliably ensues. Others of us have embraced the "only use comments for 'heads up!' notes on things that might not be sufficiently obvious from the code" meme were twisted at an early age by Knuth's views on literate programming and the work he and others put into developing/evangelising them. If you have a good internal DSL (which Ruby happens to be great for, although *all* programs essentially have one), then you can come arbitrarily close to code that "reads well" yet, on closer examination, is specific enough to be verifiable. Design principles like [SOLID](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) and DRY help you survive the code that implements and uses your DSLs far more comfortably. At that point, your code literally *is* self-documenting, since it expresses its logic in terms accessible to a non-developer. (Rails goes *parsecs* out of its way to make that more difficult than justifiable, however.) If your code artefacts (programs, Gems, etc) reach that happy state, then internal comments literally become redundant and just get in the way.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SOLID (object-oriented design)**](https://en.wikipedia.org/wiki/SOLID%20%28object-oriented%20design%29): [](#sfw) --- &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), __SOLID__ (__Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion__) is a [mnemonic](https://en.wikipedia.org/wiki/Mnemonic) [acronym](https://en.wikipedia.org/wiki/Acronym) introduced by Michael Feathers for the "first five principles" named by [Robert C. Martin](https://en.wikipedia.org/wiki/Robert_C._Martin) in the early 2000s that stands for five basic principles of [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) and [design](https://en.wikipedia.org/wiki/Object-oriented_design). The principles, when applied together, intend to make it more likely that a [programmer](https://en.wikipedia.org/wiki/Computer_programmer) will create a system that is easy to [maintain](https://en.wikipedia.org/wiki/Software_maintenance) and extend over time. The principles of SOLID are guidelines that can be applied while working on software to remove [code smells](https://en.wikipedia.org/wiki/Code_smell) by causing the programmer to [refactor](https://en.wikipedia.org/wiki/Code_refactoring) the software's [source code](https://en.wikipedia.org/wiki/Source_code) until it is both legible and extensible. It is part of an overall strategy of [agile](https://en.wikipedia.org/wiki/Agile_software_development) and [adaptive programming](https://en.wikipedia.org/wiki/Adaptive_Software_Development). &gt; --- ^Interesting: [^Object-oriented ^design](https://en.wikipedia.org/wiki/Object-oriented_design) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^Interface ^segregation ^principle](https://en.wikipedia.org/wiki/Interface_segregation_principle) ^| [^Object-oriented ^ontology](https://en.wikipedia.org/wiki/Object-oriented_ontology) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckemrad) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckemrad)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I'm the maintainer of the rails-footnotes gem, it has a fair number of stars and I'll gladly accept a well done PR :) 
Very cool! I was just browsing github for some interesting projects. I'll give it look. Thanks!
I'm not arguing for or against internal comments. The point of encapsulation is to make it not necessary to scrutinize internal implementation - you know, to save time. The common ruby attitude which you just went over isn't very respectful of other people's limited time or resources. In the 20 or so years I've been at this, I've found that some things, like PHP are designed to get you a suitable answer quickly, while others, like say, openldap or i dunno, chef ... don't seem to be interested in giving you concrete answers to common questions that immediately suggest a course of action "use this to do that, and this to do that". It's like there's this presumption that I want to know how the engine works and the philosophy that went into it when really I'm just looking for the steering wheel and gas pedal. I'm not a hobbyist, I'm a swamped time-strapped professional.
Most of the ruby gem codebases are on github and open to pull requests. Especially if your PR contains tests and passes travis. Id say just poke around, make a few PRs and one of them is bound to get taken in. Even a small refactoring is helpful.
Its almost always to store currency as values of the smallest denomination. There are, of course exceptions, but storing money values as cents is vastly preferable to anything else. Great article!
I find that I often get better error messages using Capybara's own assert_selector over the test library's expectation + Capybara's predicate methods. For example, from the "Good" examples, `expect(page).to have_field("Username", with: "Joe")` becomes `assert_selector(:field, "Username", with: "Joe")`
Not sure why you're getting downvoted. The post isn't well written, and you'd find more detail in your average COMSCI 101 class. Meh.
Brought to you by the department of redundancy department. (sorry couldn't help myself =)
It's well deserved at this point. 
Thanks for the advice! I have a few repos on BitBucket as well, but I figure $7/mo won't break the bank... at least I'm hoping it won't!
Nice post. Basically -- 100K page views off one post means: I've done no other advertising for the product other than one post on /r/startups. All the traffic didn't happen at once, it was over a period of 6 months. The stats I'm providing is over that 6 month period. It was most popular within that first week -- and then had random spikes when someone would make another post to reddit or the web. The metrics are presented as is -- and I agree they can be interpreted in many different ways. I still think Bounce Rate is a good statistic because it proves that people are curious enough to click the call to action. Many web apps have issues with users even trying out their product. There are very few active users because of the way the site is set up right now. Unfortunately if there is no one on the site, there is very little one can do. v2 is looking to change that: Create a community around all the writers and add a scene vault where users can read all the scripts (and scene starters) that have been written. They're also able to submit their own scene starters and then read what kind of scripts have been created based on their submission. The three sections (Writing Application/Community/Scene Vault) of the site have been the goal from day-1 when conceptualizing the application. I just wanted some form of validation that this is what the people wanted before rolling all the features. There is also alterations of the "Writing Application" UX making it easier to add narrative, change characters, and add a cut-to. Side-chat is also implemented much better. Many of the ideas for v2 come from here http://www.reddit.com/r/WriteTheScene/comments/1x21fh/submit_ideas_for_write_the_scene_here/ and have been strategically thought out how to best implement.
This looks interesting for debugging. I'm gonna check this out tomorrow during downtime at work! Thanks!
I must have went to a weird boot camp then because I got paid for my 6 weeks and now they're placing me with a company because it was through a consulting firm.
Pry is badass. Just remember to use `exit` or ctrl-d to quit. Ctrl-c will totally screw with your terminal (at least on a Mac), and I'm not sure why or how to actually recover from it. 
!!!
I got the error "warning: already initialized constant Pry::DEFAULT_HOOKS". I reverted to pry-0.9.12 and it went away.
Exceptions don't proove a rule, and besides, it's difficult to extrapolate from your personal experience and apply it to all bootcamps. Only by looking at aggregate results over a period of time can we come to any conclusion as to their suitability.
Don't use RhoMobile.
Is the 'reset' command available ?
hm, I've never seen this happen. Maybe it's because I'm using iTerm instead of Terminal.app?
Thanks for the advice, but its part of a university course and i didn't have a say in any of the software decisions. 
call `.reset` (the leading dot indicates to pry you wish to run a shell command)
Fair enough, I just didn't know that most people pay to go to these training opportunities - we don't have a lot of them in the midwest that I'm aware of, to be honest.
I love space and I'm learning Ruby so I find this very cool.
I've been using Pry for years and didn't know that, thanks!
Try 'stty sane' to fix your terminal
I've got no qualms with examining the man's disposition and such, however I wish this post about his religion related to ruby or programming in some way, or at the very least led to conversation about how it relates to such things. Instead, as is to be expected of a post about religion on a programming-centric forum, the comments are nothing but jokes or religious criticism. 
Hmm, maybe [magic](https://github.com/qoobaa/magic#readme)?
Thanks, that's a very useful library for this! Grr, turns out mime-types, like every other system I've tried for this task, has false positives and false negatives. Ruby mime-types thinks `json` files are binary.
&gt; no data is stored What? Of course data is stored. I can't even imagine what you think you're talking about. 
I can't even talk about what you think you are imagining. No but seriously tho, let's not agree with each other. That's ok.
[MIME::Type#binary?](http://rubydoc.org/gems/mime-types/MIME/Type#binary%3F-instance_method) isn't what you think it is.
projecteuler.net seems alot of the questions are based on these. 
No problem, now two people in the world have found it useful!
Pretty seasoned with Object Oriented coding, do you know of any cool places I can learn rails similar to how Code Academy is set up?
Best (free) tutorial for Rails: https://www.railstutorial.org/book
Have a look at TheOdinProject www.theodinproject.org
http://pragmaticstudio.com/ has good classes on Ruby &amp; Rails http://www.codeschool.com/ has pretty good classes also if you can get past the cheesy music. 
You should learn SQL - too many Rails developers don't and they make slow, clunky and terrible applications as a result. EDIT: The downvotes illustrate my point. Pro-tip, don't use Nokogiri when you can use LOAD XML (or DATA) INFILE - you will get 100x the performance at 1/10th the effort.
This doesn't make sense in context to the question. I would never recommend someone learn SQL before they learn Ruby or Rails. Plus, there are a million more likely mistakes a entry-level coder would make to slow down an app: AR protects the dev pretty well.
Frak. https://github.com/halostatue/mime-types/issues/68#issuecomment-55352608
know any sites with stuff for SQL? I'm pretty rusty with SQL.
I like this a lot, thank you.
I have written about 15 production apps. Never written a line of SQL. Maybe needed a bit for a bit of a crazy scope, but just copy/pasted from stackoverflow though. I focus on getting stuff built, performance as I need to. As for your original question, I started building the thing I needed to make in Rails and learnt Ruby along the way.
You should give this a read: http://wozniak.ca/what-orms-have-taught-me-just-learn-sql - SQL was the first language I learned, and has and continues to be my most valuable asset.
I would bet that you write about four to ten times as much Ruby to do the same thing you can do in 1 line of SQL. I focus on getting stuff done too, and writing custom set logic, join and aggregations in ruby is reinventing the wheel, over and over and over again. Slower development, slower application. It's a lose-lose. Product.available.select { |a| a.retailer.starts_with?('Amazon-') } Might work great until you have realize you are transporting 14,000 records across a network connection so you can get one out of it.
Of course I have, you are intentionally misunderstanding the example. Its intentionally bad, and you are using SQL when you type where - now do something more complex like a subquery or an outer join, and make sure its littered with n+1 issues. or a complex aggregation. If you don't understand the SQL that it generates you are going to do it wrong, no question. You are inadvertently illustrating my point, whilst misunderstanding it.
Now get the products with the most recent created_at date, by their unique sku and use just activerecord and Ruby. Multiple products can have the same sku, you want the most recently created one. As an additional challenge, the sku is on an associated model (has_one) called ProductDetail (product_details)
Two words: Ruby Monk https://rubymonk.com/
How's the rails part of that?
&gt; by their unique sku &gt; Multiple products can have the same sku ERROR ERROR DOES NOT COMPUTE
`joins(:product_details)` `uniq` `order(:created_at).last` Some combination of the above, if it was my problem or I could be bothered with games I'd solve it. Arel is readable and incredibly powerful.
For a visual sku | name | created_at | note ---------------- A101 | shirt | 2010-01-01 | NULL A101 | t-shirt | 2014-01-10 | renamed by sarah You want only A101 | t-shirt | 2014-01-10 | renamed by sarah In the first statement I am describing the expected result, in the second, i am describing the source data.
And applaud to you for falling into my trap and proving my point. That code will fail. Why? Because you don't understand the SQL that is being generated. You will get the first product for each sku ordered by that first products created_at date. Hopefully you test that properly and realize it doesn't work before launching into production, but all to often is not. Once you realize it (if you do), somebody who doesn't know SQL will fall back to code similar to my demonstration: Product.select(:sku).uniq.map do |sku| Product.where(:sku =&gt; sku).order(:created_at =&gt; :desc).first end And now you see that they are pulling down even more data, over and over again for each set. Point proven. My work is done here...
If you're into Treehouse, I just went through their MySQL Basics track. It was pretty darn informative.
Also, if you're an experienced programmer, just try out [Ruby Koans](http://rubykoans.com/), you'll go through them pretty fast and I really enjoyed them when I was learning Ruby. Also, use RVM (my choice) or RBENV, to manage your local ruby environment -- it will save you headaches later.
SQL is more readable than Arel, are you kidding? SELECT * FROM users Or users = Arel::Table.new(:users) query = users.project(Arel.sql('*')) query.to_sql You are seriously kidding right? users.where(users[:age].gt(10)).project(Arel.sql('*')) Vs SELECT * FROM "users" WHERE "users"."age" &gt; 10
You really keep shifting the goalposts in your efforts to promote sql over activerecord. But the whole point of activerecord and, to a lesser extent, rails is to hide the complexity which can easily creep up into vendor-specific sql.
I disagree. The original purpose for active record is to *model data*. The only thing I've truly criticized is Arel, for being ugly. I agree with DHH, you are never going to actually change your backend, and if you do, Arel isn't necessarily going to protect you, where('custom sql here') is too commonly necessary. Different things are different, and its an attempt to solve a problem that didn't exist. I only 'shifted the goal posts' because he was being intentionally daft or more likely because he didn't understand my point, and I felt he misrepresented it. So I beefed it up so he couldn't misrepresent it.
Should you learn German before you write a book in German? Definitely. Although you don't need to understand the entire language before you start using it, you do need to understand the basics.
You are welcome to dis-agree. 1) The original purpose of active record, in my view, as a design pattern, was to address the imbalance between the relational and object-oriented world. Check out Patterns of Enterprise Application Architecture book for more info. 2) With respect to Active Record implementation in Rails, it was to bake in a ruby ORM, and to make it database independent at the same time. A whole lot of work by a lot of folks went into this aspect of activerecord. 3) Modelling data is a completely independent activity. It really has nothing to do with any specific framework. If you use a framework like rails for this activity, you are missing the whole point of this activity. 4) It's true that in most enterprises, the backend doesn't often change and front-end tools have to live with this constraint, but having spent more than a few decades in this industry, i can tell you that the backend does change from time to time, and when that happens, more often than not, a complete re-write is done. The Rails framework can save a lot of potential work down the line, thanks to it being vendor agnostic. 5) Lastly, don't make this into an ego thing. If you don't like Arel, fine. Don't use it. If you like to use SQL, fine. Use it. But that doesn't make it the only possible approach, and, personally, i have seen a lot of hairy, vendor-specific SQL to tear my hair out a lot, and active record code is a lot easier to maintain, provided the programmer takes time to understand the SQL code generated and fine tunes it to a specific situation. 
Your point 1 is also mine. A complete rewrite should be done, frequently, imo. You should rewrite things once you understand them better. Including when you understand you chose the wrong database. Modeling data is in reference to ActiveRecord, not Rails. Luckily SQL is a standard. It doesn't need to be abstracted or modified much to adapt to a different database. Activerecord code can be easy to maintain, but its pretty clear that Arel is not. Your final point is my whole argument. You need to understand SQL. We are in agreement. Its not an ego thing so much as, I would hate to work on a team with somebody who thinks you don't need to know SQL, and I have... Often.
Hasn't pry been around for quite some time now? 
On the contrary. Every single rails app save one or two written by other developers (and I've been into several dozen such) shows a lack of appreciation for or comprehension of database design and management. SQL is the foundation of most business information systems created in the last 30 years and it's not going away any time soon. It is a great place for an aspiring guru to focus. You have so many low hanging fruit to pick and can easily add value on projects where for example front end skills are common as grass. Also almost any system that has accumulated data for a while can speed up substantially with just a few indexes added. Knowing which ones to add or how to tweak a query can land you a juicy client or curry the bosses favor and you can milk that for a long time. 
It's nice to know that we are on the same page. Knowledge of the generated SQL and how to fine-tune it, and on occasion, replace it with custom SQL, is critical in many legacy applications. Rails does not obviate the need for that knowledge. However rails does clean up the code quite nicely, and makes maintenance much more pleasant.
I dont agree with the predicition of companies becoming IT companies. He says that core competencies cannot be outsourced, but all kinds of necessary services are outsourced. Take accounting for example. Not all companies do all of their own accounting. Yea they do payroll, but for taxes and auditing and stuff they usually hire a CPA. Maybe he's on to something and IT will be so integrated in life and culture that most of it will have to be done internally to a business, but that seems like a stretch.
&gt; Java has been optimized to the extent where it now runs faster than code written in C++. Is this true?
New version coming out soon too!
Yeah, although that's more the fault of the vague as all hell statement. It's hard to give a specific answer about all of Java code regardless of quality or purpose or structure or infrastructure compared to all of C++ code. Good Java runs rings round bad C++ but, then again, it always has.
SQLZoo is a great way to brush up on basics. You can work through most of it in a (full) day or so.
For those that just want to skip to the code, the repository can be found at https://github.com/yorickpeterse/oga. I'm currently at Baruco so I'll answer any questions later during the day.
Congrats on the release, Yorick, and thank you for doing this!
YES. period. 
Very exciting. The announcement mentions namespaces, but the README does not. Can someone provide an example of xpath querying with namespaces? The [rdoc](http://code.yorickpeterse.com/oga/latest/Oga/XML/Querying.html#xpath-instance_method) isn't too helpful. 
congrats, dude 
I'm reminded of [this](https://www.youtube.com/watch?v=gbqf201kkaM). Learning the little skills helps to solve the bigger problems. Not to mention, it assists in avoiding generous amounts of pain.
The point of the question is do I need to know Ruby before Rails, and not does Rails use Ruby, that's pretty obvious. 
That's what I was looking for, thanks! I like the ability to register namespaces on the root, that's great! (and something i always wanted nokogiri to have). I'll have to play around with it and see how it works, it's a bit odd that it lets you use the namespace prefixes declared in the document if you don't do register_namespace -- although I guess that's what people want, although it kind of goes against the intention of xml namespaces. How about, in addition to register_namespace on the root, provide nokogori-compatible api to supply it with the xpath call? document.xpath('root/foo:div', 'foo' =&gt; 'bar') Would make it easier to migrate existing nokogiri code that does things that way. 
There are plenty of us who don't need to click on a link to come up with a list of things we'd like to be different about nokogiri, and we don't even use rbx. (We can start with ~10-minute install times on one of my servers). 
The next time I install on a new server, or a new version of nokogiri? The compile time is just one example though. I am not going to turn this into a "what's wrong with nokogiri" thread, and if you haven't had any problems with nokogiri that's great, and nokogiri has served rubydom well for many years, but you can google around for issues people have had if you want, and I am very excited about an alternative and I'm not alone. 
Perhaps my original comment wasn't very clear, but I am excited about this alternative. Otherwise I wouldn't ask any questions.
I'm pretty sure there is no possible solution that won't return false positives and false negatives -- especially if you need to accept any encoding not just UTF-8. The best a computer can do is see if a file is legal for a particular encoding, or is legal for a particular binary type, from a known list of encodings and binary types. And libraries like `magic` are efforts to do that. (Or, rather, magic might not guarantee legality, but say that it looks probably legal for a given type, and probably more likely to be that type than some other. which is already enough work for it.) There's no way for software to tell "is it text or not?" for any possible char encoding past or future, or "is it binary or not" for any possible non-text format. All you get is heuristics based on known types. Some will work better than others, none will be 100%. 
This looks great! We're heavy users of nokogiri but agree re: crashes, finicky/slow install and slightly antiquated API. I'm especially nervous using nokogiri inside our production rails app (i.e. - Roadie). Don't get me wrong, we love nokogiri too. It's an amazing piece of software and quite mature at this point. But alternative approaches are welcome.
I've actually had some really painful battles on a mac trying to get nokogiri installed. There are issues between versions of nokogiri, versions of apple developer tools, versions of homebrew libraries, etc. I have literally spent hours before just trying to get the right combination of things to get nokogiri to compile...
s/Ruby/Ruby\+Gosu
Wow, thanks for sharing. I know a bit of SQL but I'd like to practice more. That site looks perfect for what I need.
I can help you fill in the gaps and give direction. PM me if you're interested; full stack rails dev for 3 years. 
Technically this is possible, but I'm not a fan of it. Oga pulls namespace information from the actual element nodes using a method called [`available_namespaces`][namespaces]. I'd have to modify the XPath code that uses this to then also take into account a list of custom defined namespaces. Considering you might query the same namespace multiple times it's much easier to just do this: document.at_xpath('root').register_namespace('foo', 'bar') And then query as following: document.xpath('root/foo:div') Another thing is that currently the second argument of the `xpath` method is used for variable bindings. So similar to Nokogiri I'd have to change this method signature to instead use the 3rd argument for variable bindings. This however leads to the following wacky call signature if you don't use namespaces: document.xpath('...', {}, 'some_variable' =&gt; 10) tl;dr: yes it's possible, no I'm not a fan of it (and as such won't change the method for this). [namespaces]: http://code.yorickpeterse.com/oga/latest/Oga/XML/Element.html#available_namespaces-instance_method
A LOT more than 10% of the time. If you read the readme you would know that this was intended for personal use. Not commercial, and if one were to use this for commercial you would get a 30-40% open rate. 
1. CSS selectors are not yet supported, I plan to add these in the coming 2 months. Once added it should be fairly easy depending on how tightly coupled your code is to Nokogiri. The guide http://code.yorickpeterse.com/oga/latest/file.migrating_from_nokogiri.html should provide a bit more information on this. 2. Rubinius currently implements most of Ruby 2.1, except for some dodgy parts such as refinements. There are numerous benefits of Rubinius such as: no GIL, proper concurrency (along with some nice primitives such as a channel), a JIT, an upcoming metrics system, a revamped REPL/console (coming soon), and much much more.
install nokogiri and watir first.. obviously.. #&gt;sudo gem install nokogiri watir-webdriver then your code should look something like. http://pastebin.com/VeWdiqWy and run it. This should create a file named "file.txt" with text in it from reddit.com. Formatting is off on this. so i posted it on pastebin
Oh gosh, actual pull parsing, thanks a bunch :D
All of that sounds really cool. I use Nokogiri all the time for small projects; next time, I'll use Oga instead. And I'll definitely give Rubinius a try. Thanks!
[Pry](http://pryrepl.org)
`gem install pry` `require pry` # in code you're debugging Place `binding.pry` where you want to be dropped into an interactive shell. The program will pause at that point and you can look around at what's going on in a specific part in the code.
Fuck you. I hope you get found out and fired. This is incredibly unprofessional.
What ever you are calling [] on is currently nil, and not an array or a hash which is probably what you are expecting.
Would seriously suggest Michael Hartl's Rails Tutorial Free Online Ebook. This is very hands-on, practical and also comes with a Video Series. The Video series is a paid product, though. [Ref](https://www.railstutorial.org/book) 
Also check out the [learn rails](http://www.reddit.com/r/learn_rails) subreddit.
Well the point is not to do the parsing. I wanted a solution that helped me do it command line.
It sounds like, when you receive the params from the post, you need to turn params[:category] into an actual Category object, i.e. something like Category.new(params[:category]) (depending on rails version you'll need to perform the proper filtering with strong parameters)
When the webpage returns the params hash, it is only a hash. You need to take the keys and values inside `params[:category]` and turn it into a `Category` with `@category = Category.create(params[:category])`. Of course, if you're using a recent version of Rails, you need to do one more thing and permit certain keys from `params[:category]`. [Here's a walkthrough example of that.](http://blog.sensible.io/2013/08/17/strong-parameters-by-example.html) (you can see about halfway down he tries to create a new `User` with `params[:user]` in the same way you need to create a `Category` with `params[:category]`)
Three steps?? That's too many steps!
If you have any interest in incorporating Rails, I'm currently working straight through this guide (https://www.railstutorial.org/book). I'm partway through Chapter 9 and the author explains everything from the ground up. Absolutely phenomenal guide. If you're just teaching Ruby, learn what you can from his style. I've never been happier with a tutorial and I feel that I am really understanding (most) of the concepts and why I'm doing what I'm doing.
What would we do without pry?
You should probably be using a select for :category_id and not :category, and then you will populate your drop down with a list of category ids.
I really want to use Orchestrate, but I can't think of a use case. If I already have a server running code, chances are that I already have a database.
You may want to look into iterators like [Integer#upto](http://rdoc.info/stdlib/core/Integer:upto), to make your code look nicer (subjective). [Here](https://github.com/bbatsov/ruby-style-guide)'s a link to the (unofficial?) style guide for consideration too. Better to follow/read a style guide earlier than when you're set into habits in my opinion! e.g. 1.upto(numgroup) do |f| 1.upto(ingpergrp) do |i| ... end end Sorry if I'm jumping ahead (or off topic) here! Since you're only beginning now.
Thanks will have a look.
Could you please explain in more detail what you're trying to accomplish? Are you trying to split a flat array into multiple arrays that each contain a maximum of 4 elements? &gt; Maybe Enumerable#each_slice[1] it's better but objects are not shown in a good way. What do you mean by that? Each 'group of 4' is given to you as an array. "Not shown in a good way" just leads me back to wondering what you're really trying to do. Off the top of my head I can only imagine that what you're trying to do is break up a long list of ingredients into 4-line groupings (like breaking up a very wide paragraph into two or more columns for easy reading). Am I on the right track here?
Ruby conventions favor snake_cased variables with more descriptive names so that your intent is clear. RECIPE_COUNT = 10 INGREDIENT_COUNT = 4 ingredients = IO.readlines('./ingredients.txt') RECIPE_COUNT.times do |list_num| puts "\n*********" puts "List #{list_num} with #{INGREDIENT_COUNT} ingredients per group" # Array#sample(n) does exactly what you want. Returns n number of unique elements ingredients.sample(INGREDIENT_COUNT).each do |ingredient_name| puts " - #{ingredient_name}" end end EDIT: Added a comment about the Array#sample method
I think an example is better. I have 10 ingredients I want split into 3 groups. I would like to have for result. List 1 with 4 ingredients - ingredients8 - ingredients6 - ingredients4 - ingredients2 List 2 with 3 ingredients - ingredients7 - ingredients5 - ingredients3 List 2 with 3 ingredients - ingredients1 - ingredients9 - ingredients0 And that's it. 
My brain is now fucked. :D
Thanks a lot will have a look.
Since you already shuffled the ingredients just take the first `i` elements of the array. 1.upto(numgroup) do |f| puts "\n\ List #{f} with #{ingpergrp} ingredients per group" ingredients.shift(ingpergrp).each {|i| puts " - #{i}"} end http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-shift 
&gt; I should be able to search for a given node under a given namespace without &gt; knowing what prefixes the document producer used, and without having to modify &gt; the document. You can query documents just fine using the `namespace-uri()` function and compare URIs, see below. &gt; With oga's current model, I have to know what namespaces prefixes the document &gt; already uses. In your example, if I say 'I want to find the namespace with URI &gt; 'http://baz', and try to `register_namespace('foo', 'http://baz'), I'll get a &gt; "namespace 'foo' already exists" error from noga. This is nonsense. You can have the same namespace prefix at multiple places in the document with different URIs just fine. For example: require 'oga' document = Oga.parse_xml &lt;&lt;-EOF &lt;root&gt; &lt;div xmlns:x="1"&gt; &lt;x:text&gt;First&lt;/x:text&gt; &lt;/div&gt; &lt;div xmlns:x="2"&gt; &lt;x:text&gt;Second&lt;/x:text&gt; &lt;/div&gt; &lt;/root&gt; EOF document.xpath('root/div/*:text[namespace-uri() = "1"]') # =&gt; NodeSet(Element(name: "text" namespace: Namespace(name: "x" uri: "1") children: NodeSet(Text("First")))) If two namespaces are defined twice in the same context (e.g. on the root element), the first one is used. This is the same in Nokogiri, except it doesn't raise an error (which I think is stupid): require 'nokogiri' document = Nokogiri::XML &lt;&lt;-EOF &lt;root xmlns:foo="bar" xmlns:foo="baz"&gt; &lt;foo:text&gt;Foo&lt;/foo:text&gt; &lt;/root&gt; EOF document.xpath('root/foo:text').first.namespace # =&gt; #(Namespace:0x3f8b171bf594 { prefix = "foo", href = "bar" }) &gt; even if I can discover this via introspection, it's not the way XML namespaces &gt; are intended to be approached. I'm really not following here. How the heck do you intend to query something if you don't know what it is and where? This statement really makes zero sense. In Oga you can quite easily request what namespaces are available (or just look at the raw XML): require 'oga' document = Oga.parse_xml &lt;&lt;-EOF &lt;root xmlns:first="foo" xmlns:second="bar"&gt; &lt;div&gt;&lt;/div&gt; &lt;/root&gt; EOF document.at_xpath('root/div').available_namespaces # =&gt; {"first"=&gt;Namespace(name: "first" uri: "foo"),"second"=&gt;Namespace(name: "second" uri: "bar")} &gt; Also, an XML document can actually reuse the same prefix for a different URI &gt; at different parts of the document. Oga's current internal model (and api) of &gt; namespaces also seems incapable of handling this. This is supposed to work just fine, though I noticed a bug in the behaviour of retrieving all namespaces. As such the top-level namespaces take precedence over the more deeply nested ones. This has nothing to do with the internals/models whatever, it's just me being stupid with merging Hash objects. &gt; Also default namespaces (&lt;foo xmlns="http://something"&gt; means all children are &gt; by default in the http://something namespace). Haven't experimented with how &gt; oga handles this, but it doesn't seem to fit into your model very well. Oga does not handle this currently as it expects the `xmlns` attribute to have a namespace name to declare. I don't really see the point of changing the default namespace URI either since Oga doesn't use a default URI for elements. That is, changing the default URI has literally zero impact on Oga itself.
That's a very cool example. The thing is I'm stuck just before when the result have to be non equal per group. [Here is an example of the result I would like](https://www.reddit.com/r/ruby/comments/2gb6rc/1th_program_in_ruby_playing_with_arrays_need_help/ckhv9fp). I thought about using modulo of the my division and add it the first group but it's seems quite tricky and not the best. studentname = IO.readlines('./names.txt').shuffle #Number of group we want numgroup = 5 numstudent = studentname.length studpergrp = numstudent / numgroup puts "Their is #{numstudent} students" puts "Their is #{numgroup} groups with #{studpergrp} students per group" 1.upto(numgroup) do |f| puts "\n\ List #{f} with #{studpergrp} students per group" studentname.shift(studpergrp).each {|i| puts " - #{i}"} end
It's cool but I'm now [stuck before](https://www.reddit.com/r/ruby/comments/2gb6rc/1th_program_in_ruby_playing_with_arrays_need_help/ckhw4y3). 
Ok, from this I conclude that, when you have 10 ingredients, and your want three groups, you want lists of length 4,3,3, not lists of length 4,4,2, right? The second is rather easy, each_slice will indeed do that for you. e.g: ingredients = ['salt','pepper','beef','onion','garlic','rice','flour','cabbage','herbs','butter'].shuffle ingredients.each_slice(4).with_index do |items,index| puts "List #{index+1} with #{items.length} ingredients: #{items.join(' - ')}" end Note that I am doing `index+1` here, because ruby starts counting indices from zero. Result: List 1 with 4 ingredients: garlic - salt - rice - butter List 2 with 4 ingredients: cabbage - onion - pepper - beef List 3 with 2 ingredients: herbs - flour The second is slightly more complicated, but we can still use each_slice. We also use the Array#zip method to transpose an array of arrays. Array#zip takes, for example, 10 lists of 3 items and turns it into 3 lists of 10 items. If some of the lists are not long enough, it'll add `nil`s to pad the list. ingredients = ['salt','pepper','beef','onion','garlic','rice','flour','cabbage','herbs','butter'].shuffle groups = (1..3).zip(*ingredients.each_slice(3)) groups.each do |index, *items| items.compact! #remove nils puts "List #{index} with #{items.length} ingredients: #{items.join(' - ')}" end Here, the each_slice method cuts the ingredients into chunks of 3. Then we take the range 1..3 and for each item take the corresponding items from each chunk. The end result is three lists, the first element of which is 1, 2 or 3 (the items from the range) and the rest of the elements are ingredients. We then go through the groups, split each into index and ingredients (that's what the |index, *items| does), remove the nils (with Array#compact!) and print the proper output. Result: List 1 with 4 ingredients: pepper - flour - rice - garlic List 2 with 3 ingredients: cabbage - onion - salt List 3 with 3 ingredients: butter - herbs - beef This uses some more advanced syntax, like the splat operator (*) on lists, so you might want to play around with it and see how that works. Alternatively you can roll your own code to do the same thing, with nested loops and Array#pop :)
Then you probably just want to find the appropriate category with something like Category.find(params[:category][:id]), but then it is probably better if the form just returns a straight params[:category_id] from the select.
I'm not totally opposed to teaching rails, however those who have never programmed before wouldn't be able to jump right into it. At least they shouldn't. I guess it depends on who the curriculum should be targeting.
Sure i can make it work with .find but it will be extra database command. It return correct category with correct fields and value here the request &gt; {"category"=&gt;{"id"=&gt;1, "name"=&gt;"Jeep", "status"=&gt;0, "created_at"=&gt;"2014-09-13T10:21:42.127Z", "updated_at"=&gt;"2014-09-13T10:21:42.127Z"} I dont understand what im doing wrong
Well, the database command is only necessary if you want to verify first that the category exists. Otherwise, you can just use the id. E.g. Suppose you have a model like this: class Car &lt; ActiveRecord::Base belongs_to :category attr_accessible :name ... end And when creating a car, you allow the user to select a category (e.g. "sedan", "truck", "station"). So there is a category model like this: class Category &lt; ActiveRecord::Base has_many :cars attr_accessible :name end Now in your cars_controller#create method, you can have something like def create car = Car.new(params[:car]) car.category_id = params[:category][:id] car.save end But probably, you want to build your form differently. You would like tyo get rid of the second line by making sure that the chosen category ends up in params[:car][:category_id]. Which is entirely possible, but you'll have to change your form. Personally, I like using simple_form, and then it is something like: &lt;% form_for(@car) do |f| %&gt; &lt;%= f.input :name %&gt; &lt;%= f.association :category %&gt; &lt;% end %&gt; 
Thank you soo much. Now the hardest is to understand how it's done. The [Array#zip](http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-zip) is quite complicated but powerful. It's very interesting to get both code versions, I will try with Array#pop. But here is the "final code" with your help. ingredients = IO.readlines('./ingredients.txt').shuffle puts " How many group you want? " #numgroup = gets.chomp.to_i numgroup = 5 ingredients.each_slice(numgroup).with_index do |items,index| puts "List #{index+1} with #{items.length} ingredients: \n\ - #{items.join(' - ')}" end An other cosmetic change is because I've had cariage return in my list. But very often just one item doesn't go. Group 1 with 5 ingredients: - Pla ra - Makhwaen - Abdrahmane - Kaphrao - Bai po Group 2 with 5 ingredients: - Opchoei - Khanaeng # &lt;&lt;&lt;&lt;&lt; - Dipli - Nam pla - Saranae
The one item that doesn't go is the last one in the file. All the other items have a newline at the end (IO.readlines does not remove them), but if your ingredients file does not have a newline after the last line, that one item will be without newline (in your example, it seems Opchoei is the last item). It is better to remove the newlines from all items and then add them again in the output (that way it'll work regardless of whether that newline is in the file or not). To do that, you can use the String#chomp method. In this code, just add .map(&amp;:chomp) after the readlines call: ingredients = IO.readlines('./ingredients.txt').map(&amp;:chomp).shuffle Then to get the proper output, add a newline to the join call: puts "List #{index+1} with #{items.length} ingredients: \n - #{items.join("\n - ")}" 
thank you for replay yes this is how i have designed my models and actions. f.association this missing in my rails Im using 4.1.6 
f.association is from the [simple_form gem](https://github.com/plataformatec/simple_form) (see http://simple-form.plataformatec.com.br/#usage/associations for docs on the association method) If you do not want to use another gem, you will have to build it with something like: &lt;%= f.collection_select :category_id, Category.all, :id, :name %&gt; (I'm not sure of the exact syntax, as I always use simpleform, but this should be findable in the docs). 
Can you give some example input? It's hard to determine what this should be doing without what you're giving it.
Specifically, this is the text it will be reading in, thought it will be in a text file : IT was the best of times, it was the worst of times; It was the age of wisdom, it was the age of foolishness; It was the epoch of belief, it was the epoch of incredulity; It was the season of Light, it was the season of Darkness; It was the spring of hope, it was the winter of despair; We had everything before us, we had nothing before us; We were all going direct to Heaven, we were all going direct the other way. In short the period was so far like the present period that some of its noisiest authorities insisted on its being received for good or for evil in the superlative degree of comparison onl
Thanks you really helped me
Wow, thanks a bunch for all this information. So are you saying that my 'twoOfArray', is actually still just a bunch of hashes? Because in my directions for this activity it says exactly, "Use select from Hash to get an Array of key value pairs, but only for words having at least two occurrences." So I just assumed that using the #select method returned an array of hashes.
That's cool.
gem install nerd_flirt if you feel like joining this digital love tunnel. The idea is to actually make use of the User object and match together clients, like chat roulette or something. Haven't gotten that far yet. Maybe have rooms to... Anyway: https://github.com/eric-khoury/nerd_flirt
Oh hmm, I just looked up the docs again for the older version (1.8.7) I linked to earlier, and noticed that #select used to do what your assignment says: &gt; select {|key, value| block} =&gt; array &gt; Returns a new array consisting of [key,value] pairs for which the block returns true. [\[Link\]](http://ruby-doc.org/core-1.8.7/Hash.html#method-i-select) So yes, the only issue here is that there's a difference between #sort and #sort!, and you should be fine if you use the latter. I haven't tested it so let me know if that doesn't work. Edit: I should elaborate a bit - Ruby rarely changes the behavior of core methods like this so dramatically (i.e. change the type of the return value), but it seems to have in this regard. Your assignment seems to be referencing 1.8.7, while most of the world currently use Ruby 2.0+
Yeah, the machines at my school are actually using 1.9.3, probably should have mentioned this. So Im still using the same .sort method I have before which is : twoOfArray.sort! {|key, value| value &lt;=&gt; key} twoOfArray.each { |key, value| puts "#{key} occurs #{value} times" "\n" } From what I can tell from the ruby docs website I am doing it right, but I am getting an error saying "undefined method 'sort!'. Not sure what I am doing wrong though because I am taking it right off the website.
Hmm can you run: &gt; ruby --version On the command line and post the results here please? Also, do: &gt; puts twoOfArray.inspect right after you create 'twoOfArray' so we can verify what is in there.
ruby 1.9.3p545 (2014-02-24) [x86_64-linux] Brightbox. twoOfArray.inspect gives me this : {"it"=&gt;3, "was"=&gt;3, "the"=&gt;3, "of"=&gt;2, "times"=&gt;2} {"of"=&gt;3, "it"=&gt;2, "was"=&gt;2, "the"=&gt;2} {"it"=&gt;3, "was"=&gt;3, "the"=&gt;2, "of"=&gt;2} {"the"=&gt;3, "of"=&gt;2, "it"=&gt;2, "was"=&gt;2} {"we"=&gt;2, "had"=&gt;2, "before"=&gt;2, "us"=&gt;2} {"we"=&gt;2, "were"=&gt;2, "all"=&gt;2, "going"=&gt;2, "direct"=&gt;2} {"the"=&gt;2, "period"=&gt;2} {"its"=&gt;2}. Also, this is the output I get from using the .sort method of : twoOfArray.sort { |k, v| v &lt;=&gt; k } Output : it occurs 3 times was occurs 3 times the occurs 3 times of occurs 2 times times occurs 2 times of occurs 3 times it occurs 2 times was occurs 2 times the occurs 2 times it occurs 3 times was occurs 3 times the occurs 2 times of occurs 2 times the occurs 3 times of occurs 2 times it occurs 2 times was occurs 2 times we occurs 2 times had occurs 2 times before occurs 2 times us occurs 2 times we occurs 2 times were occurs 2 times all occurs 2 times going occurs 2 times direct occurs 2 times the occurs 2 times period occurs 2 times its occurs 2 times 
JRuby?
You could start here: http://www.tutorialspoint.com/ruby/ruby_multithreading.htm
MRI Ruby has a global interpreter lock (GIL). That means that instead of running two threads in parallel, the threads run interleaved (they take turns). There are some exceptions though, IO for example. A thread that's blocking on an I/O operation (it has to wait) will yield control to another thread while it's blocking. Fetching a webpage is such a blocking operation. The JRuby and Rubinius implementations do not have such a GIL and can run threads in parallel. This is useful if your threads are computationally intensive. Which implementation to use is dependent on your application. If I/O is the bottleneck, MRI's GIL won't be too much of a problem. If the CPU is the bottleneck, you'll be better off with JRuby or Rubinius. EventMachine implements an Reactor (in C). A reactor is single-threaded and uses callbacks. It's executing model is very different from idiomatic Ruby and similar to that of JavaScript (Node.js in particular). Often you need a library that's specifically written for EventMachine. It can greatly speed up an application, though.
Well, Ruby's the only language I have any familiarity with so far, beyond a touch of JavaScript. Any recommendations for starting to learn Go?
&gt; Is it true that Ruby is not capable of true multithreading? Ruby MRI has a global interpreter lock, meaning only one thread can be running at a time, regardless of how many CPU cores you have. If you want to use all 4 cores, you'd have to use 4 Ruby processes. You could use JRuby, but then you lose the ability to use any gems that utilize C extensions.
https://gobyexample.com/ http://tour.golang.org/
This is a good suggesiton. JRuby is very powerful, and does have true multi-threading. Rubinius also has multi-threading. I've been very pleased with JRuby's performance so far. At times, I've seen JRuby's performance close to Go's performance for similar tasks. Generally, I find it consistently faster than MRI except for initial load times, but even that is not too bad. If you're going to do heavy multi-threaded processing, JRuby could be a good choice.
Especially because you mentioned youtube. I must recommend the Ruby tapas screen casts by Avdi Grimm. He has a few episodes where he covers just this stuff.
Haha yeah. I just wanted the sockets to work at this point. I'm thinking more about a group chat for teams, so it's just fun and games until I get more of it implemented. I will eventually get rid of all the presentation and let the user chose how to present it. Anyway, thank you for calling me a sad lonely man, really appreciate it. edit: Oh, and you don't need to chat with yourself if you have it running on a remote server. But maybe you don't give a shit, and I will stop wasting your time now.
http://jruby.org/ It is just a ruby interpreter written for the JVM. In other words it translates ruby code to JVM bytecode so that the JVM can run it. This tends to give pretty bad startup times so it's terrible for short living ruby scripts, however for long running tasks you get the benefit of real threads and the impressive JIT compiling of the JRE. For the most part you just write ruby. There are only a few catches (like some gems which use c extensions may not be an option, you have to use special gems to talk to a database rather than those you may be used to, etc). But mostly just write ruby and run in on the JVM. If you use rvm it's as easy as rvm install jruby. 
There are two other things not mentioned that may work depending on the problem at hand... 1. Sidekiq/Resque. These are queues powered by redis that do work. Sidekiq is thread based, Resque is process based. Because of this on MRI Resque can work with multiple cores pretty effectively, Sidekiq not so much. Sidekiq + JRuby is a good combo. These are very good tools for things where you want to set up a cpu intensive task that doesn't have to be performed now, for example sending out mass emails, batching data, generating reports, etc. 2. Celluloid. This is an implementation of the actor pattern for Ruby, though it abstracts it a bit. It let's you, fairly easily, write concurrent ruby applications. It's actually what powers Sidekiq under the hood. JRuby would be recommended again. This is a better alternative than Sidekiq/Rescue when you want to process data in a thread off the current app and then do stuff with the results, whereas queues are better for things where you just want them to go off and do their own thing and don't care about collecting results. Celluloid takes care of a lot of the pain of threads for you. 
Does grep, like many programs, erroneously treat oddly encoded text files as binary (e.g. KOI-8, HEBREW, ARABIC encoded)? How does grep identify a file as "binary"? How can we leverage this in a Ruby program?
JRuby together with java.util.concurrent is extremely powerful for multi threading. For most of the things you want to do, what you need is a fixed size thread pool and an incoming queue. Something like this. Extremely simplified. You also need to wait for the threads to finish with awaitTermination. And if you want to do non-threaded stuff with the data, there's more stuff to look into. You get a future back from submit, with a method .get that blocks and returns data once the thread has executed. So you can put that into an array and do futures.map(&amp;:get) to get all data. require 'java' java_import java.util.concurrent.Executors queue = # array with stuff thread_pool = Executors.newFixedThreadPool(number_of_threads) queue.each do |item| thread_pool.submit do # do stuff with item end end 
Yes, there's the namespace axis (which I have never used before but was vaguely aware existed, but I believe you it could be used to do what I needed), but the xpath spec also say you can query like prefix:nodename, where the prefix is expanded with "[query] context namespace declarations". That is what oga doesn't support, with the semantics that the spec suggests, at least according to my reading. But okay, obviously we'll disagree on this one! I was taking a look at the oga code, and it's very clean and nice, kudos. It looks like it will be fairly straightforward for me to write my own extension on top of oga that supports namespace searching with the semantics I need/want (without resorting to cumbersome explicit namespace axis), so I may take a stab at that. Awfully nice to have such a nicely written thing in (almost all) pure ruby, makes it a lot easier to work with, thanks! 
First off, while JRuby doesn't suffer from the GIL (and is the implementation I personally use), the use-case you're talking about won't really be affected by the GIL under MRI because you'll be waiting on I/O. The GIL only refers to ruby code running, not ruby code waiting. :-) Keep in mind that you'll need to make sure that the *results* of your computation need to be thread-safe as well (i.e., don't run multiple threads and try to write all their results to the same file without protecting that call with a mutex. Here's a simple implementation using the `concurrent-ruby` gem (https://github.com/ruby-concurrency/concurrent-ruby). require 'concurrent' require 'thread' num_threads = 10 write_mutex = Mutex.new pool = Concurrent::FixedThreadPool.new(num_threads,:overflow_policy =&gt; :caller_runs) myurls.each do |url| pool.post(url) do |u| result = do_something_with(u) write_mutex.synchronize do myoutput.puts result end end end Also httpclient (https://github.com/nahi/httpclient) is a good, threadsafe http library for this sort of thing. 
Cool, so there's a discrepancy between version the assignment is referencing (probably 1.8.7) and what your computer has (1.9.3). In 1.8.7, #select returns an array - [\[docs\]](http://ruby-doc.org/core-1.8.7/Hash.html#method-i-select) But in 1.9.3, #select returns a hash (as you can see in the #inspect output you just posted) - [\[docs\]](http://ruby-doc.org/core-1.9.3/Hash.html#method-i-select) So for 1.9.3, you can reference my first answer to figure this out, or you can just talk to your instructor and figure out what version you are supposed to be using/and or correct the error in the assignment. Hope this helps! Edit: Accidentally linked to the same version of documentation twice, fixed.
Shift already takes care of that for you. Example: irb(main):001:0&gt; a = %w[a b c d e] =&gt; ["a", "b", "c", "d", "e"] irb(main):002:0&gt; numgroup = 3 =&gt; 3 irb(main):003:0&gt; pergroup = (a.length * 1.0 / numgroup).ceil =&gt; 2 irb(main):004:0&gt; 1.upto(numgroup) do |f| irb(main):005:1* puts "\n\ List #{f} with #{pergroup} students per group" irb(main):006:1&gt; a.shift(pergroup).each { |i| puts " - #{i}" } irb(main):007:1&gt; end List 1 with 2 students per group - a - b List 2 with 2 students per group - c - d List 3 with 2 students per group - e =&gt; 1 irb(main):008:0&gt; 
Go, much like Ruby 1.8, uses [Green Threads](http://en.wikipedia.org/wiki/Green_threads#Green_threads_in_other_languages).
Short language neutral answer... prefer multi-process to multi-thread. Once you get that firmly as the top architectural item... the rest becomes pretty obvious.
But unlike Ruby 1.8, Go doesn't have anything equivalent to the GIL, and it can map multiple green threads to multple native threads just fine (it does that automatically, in fact).
.sort returns a new object, .sort! modifies the existing object in place. --edit-- Deleted where I thought you were sorting a hash.
That's a bit simplistic... As I understand it, goroutines (the main concurrency construct in go) uses a custom scheduler backed by native threads. The scheduler manages a lot for you making them simple and fast and avoids spawning new threads unless it has to. Needless to say it's much more advanced system than any MRI threading model or even older JVM green threads. 
I wonder why you can't use `sort_by` on a hash? I needed a small victory before going to bed, so I wrote a quick and dirty solution. (One or two lines aren't really necessary.) But now I can't figure out why it doesn't print when run from the command line. It does print when run from irb or pry. [Here it is...](http://pastebin.com/iRuLBeLE)
Perfect thanks a lot. I've decompose what your did and it's more clear now. Will try other method tomorrow or other language (because this is the challenge). 
Interesting, if a little convoluted in the syntax. For Rails folks, DateTime objects have really nice helper methods like beginning_of_month, end_of_day, etc. In Rails (ActiveSupport, really) you can also do things like date + 1.month, or date - 3.hours.
Agreed. Threads are just plain wrong. c.f Erlang or Haskell "processes". However, given that you are using ruby I would use processes. They're easier to understand than threads, you don't have the hideousness of shared state and you won't fall foul of the GIL.
I frequently use the parallel gem https://github.com/grosser/parallel to run on all CPUs. There are some fairly dramatic limitations - I've found no good way to easily and efficiently share data between processes without marshaling/unmarshaling - but it does the job. You don't mention the OS you're running under - if it's windows, this may not work as well due to differences between forking there and under linux, I honestly don't know. But this gem will do the sort of load-distributing you're talking about (and I use it myself, today, in production to do so - running the same job versus a large number of targets, and in the end I have one task collate all the results). So - parallel execution is actually pretty easy. The *ugly* will come in if/when you need your tasks (threaded or per-cpu) to communicate with each other. Someone mentioned resque - that sort of thing (a library to talk between independent processes) is likely to be the most straightforward way to do it, especially if your needs are simple. The fact of the matter is that there aren't yet gems (that I'm aware of - correct me if I'm wrong!) that easily encapsulate things to do reliable, deadlock-free communication between ruby processes. That sort of stuff is really hard to do, so it's not a big surprise. 
:+1:
It seems to be able to recognize that a KOI-8-encoded file is not binary, at least it worked here. I don't know how it works. You could call it from Ruby, but that's not portable.
agree , compiling all of its libxml (the system option requires manual-intervention and usualy fails as clearly it's written to its slightly-forked-version) tends to crash out w/ oomkill related issues when running in a proper-POSIX-userspace chroot on an Android tablet. Groonga is even worse, its expr.c especially. wish i knew a good alternative for sql-daemon-free freetext-search.. guess Grep is still the winner
From the `twoOfArray.inspect` you give above I think you will end up with trouble. After counting words I would think you should either see a single `Hash` which contains something like: { "of" =&gt; 12, "the" =&gt; 11, "foo" =&gt; 1, "bar" =&gt; 2 } or an array of pairs is something you could work with, too: [ ["of", 12], ["the", 11], ["foo", 1], ["bar", 2] ] Once you have data in that format you should be able to use `select` to trim out the ones that don't have two-or-more. The result will be in the same format. As for the sorting I think your issue is that you aren't clear on what the `sort` method will provide to the block. On each call to the block it will provide _two_ elements (let's call them `a` and `b`). If you were sorting a list of numbers like [2, 4, 5, 7, 1] then it may call your block with 2 and 4. So if you are sorting an array of pairs then each argument will be a _pair_. To put that into psuedocode you would get a call like: `sort_block.call(["of", 12], ["the", 11])` which you have mapped as { |k, v| v &lt;=&gt; k } which, in this case, would be trying to evaluate `["the", 11] &lt;=&gt; ["of", 12]`. There are two ways to deal with this in Ruby (1.9+ should support this). The old way would be to have a block like: { |a, b] b[1] &lt;=&gt; a[1]} or { |a, b] b.last &lt;=&gt; a.last} but with a "modern" Ruby there is some limited pattern matching that can help you here: { |(k1, v1), (k2, v2)| v2 &lt;=&gt; v1 } Interestingly this should work whether the input is an Array of pairs or whether it is a Hash (because Ruby will pass each hash entry as a pair [k, v] to the sort block). And the output should be the same: it will produce an Array of pairs. I hope that is clear enough to understand how the sort routine works. But as I mention at the beginning I think the issue is that when you are building your initial dataset you may have something not quite right there.
I guess try and make something that just streams all the incoming tweets in the US or something. 
I wish I knew. The only pointers I have are to use Rubinius and http://celluloid.io/ But I don't have any real experience. Hope someone else comes with experience.
Go is fantastic but some of us have Ruby jobs, teams of Ruby developers, and mountains of Ruby source code. It's just not feasible to switch it all out for the current hotness. I'd love to hear how you might convince uppers to give Go a chance? Maybe reimplement one of their services in Go to prove superior performance and stability?
wow, this is a great source for nasty, nasty bugs. 
Assuming the data you are working with is something along the lines of: words = { foo: 20, bar: 40, hello: 30 } it seems all you want to do is sorted_array = words.sort_by { |word, occurrence| occurrence } sorted_array.each { |k, v| puts "#{key} occurs #{value} times" "\n" } The #sort_by method used above can be nice and concise. It is equivalent to doing: sorted_array = words.sort { |arr1, arr2| arr1[1] &lt;=&gt; arr2[1] } Hope this helps.
It looks really interesting, I'll definitely try it once I have time. Has anyone used Opal before? How it compares to Ruby?
That's what I call an *active* project. 511 commits and 73 releases on `master` since… [11 January](https://github.com/voltrb/volt/commit/d732db5b4f1710d0219cd8e0b8346fafb0db73d7)?!? *Awesome!* (Does this guy have a life away from the keyboard? Would his wife/gf agree that he did?) I've poked at Opal before and have been hoping/expecting to put it into production apps shortly; seeing others doing so (especially leveraging Volt) would make that sales job much easier.
I would recommend jstorimers [Working with Ruby threads](http://www.jstorimer.com/products/working-with-ruby-threads)
A lot of that stuff clicked with me when I read "Working with UNIX processes" by Jstorimer: http://www.jstorimer.com/products/working-with-unix-processes He goes through a lot of UNIX stuff, and then he explains the forking model. Its mind-boggling at first, but you will understand it quickly. If you're not up for buying a book, because it is quite pricey, you might be able to find some C books about fork, or some nice blog posts like this: http://www.tweetegy.com/2012/04/forking-ruby-processes-or-how-to-fork-ruby/
This looks really fucking amazing. Like "Vault is to Rails as Rails is to PHP" amazing.
While Volt looks good actually you already can use Rails + Opal as js compiler
Yes but the persistence model is a ginormous improvement too.
Yeah, Opal is awesome , its close 1:1 to real ruby except you can't use some features, but that's not big deal. Also its slower than pure JS. And see http://opalrb.org
I'd like to help but for the life of me I can't figure out what you are trying to do here.
anything that let's escape from JS on the client side is a worthy effort. Hope it succeeds.
No, the idea is great. Sorry for my inept advices, I meant to help actually. Why did you delete the github repo?
Give us a good plugin mechanism and I'm sold.
So this is like meteor?
Very cool.
It's not about switching it all out, it's more along the line of what you hinted at: Breaking your problem into smaller problems that can be isolated and using the appropriate tool to solve each problem. In my real-world case I am currently working on, we have a core system which is a rails application encompassing the marketing website, the web application users interact with, and an API for use by the iOS/Android devices that allow for using a subset of the web application functionality. With that said, most of the processing that is required as a result of the user interacting with the application does not need to happen immediately, but there is a lot of this. To take load off of the Ruby/Rails application so it can continue to do what it does very well, it simply pushes messages onto a message queue as data comes in which are then popped off my a message handler written in Go. Most messages that come in are used to then initiate a workflow execution to process that data through multiple steps, and all of the workflow processing is also handled by small Go applications. Go has a couple advantages here: 1. Fast as hell. 2. Simple to write once you wrap your head around the different way of thinking. 3. Pleasurable to write with the native concurrency, something that applies very nicely to our exact problem. Ultimately, if you're in a place that calls itself a "Ruby" shop, that's obviously going to be a problem. Where I do contract work, they are a "technology shop" and use different tools to solve different problems. If the decision is made to use Go on a project, everyone is expected to learn Go and operate at a reasonable level of proficiency very quickly, but they have investing in training/learning built into the core of their business.
Thanks for the explanation. I start at this Ruby shop on the 22nd, but they seem open to other technologies; they using Java for native mobile apps instead of insisting on a Ruby platform like RubyMotion. I'm the company noob so I obviously won't be so arrogant to start making suggestions on tech choices just yet, but I've seen many instances in the Ruby community where switching it out for Go in places has had a dramatic, positive effect.
You can think of JRuby the same as normal ruby, but it uses the java virtual machine instead of ruby's MRI. With JRuby you can include p pretty much any java library, as well as most ruby gems (some ruby gems that are written in C do not work well with JRuby). 
You can use mechanize instead of watir. The only problem you'll run into, is when a page needs to run javascript to update the DOM. You won't get the data (obviously) because the dom didnt refresh when you "get" from the server. 
How many users are you tracking? You could use a lighter framework if you have less traffic. EX: sinatra
I get your point. it's just that JS is such an awful language, compared to the alternatives. At least on the server side there is a wide array of choices. But on the client side it's always the same old flawed JS...or everything else fails.
so in 2 years we gonna have a new merb merge :)
I agree. There is a reason we have over 100 different languages and preprocessors that compile to JavaScript. We're doing everything we possibly can to avoid it.
Looks like, but with Ruby as the base language (cross-compiled to JS for the client-side, using Opal) rather than JS as the base language (run client and server-side). Personally, that sounds like a big enough improvement to me to be worth paying attention to!
sure! and dOP said he wanted someone to learn with, so that might be good to do as well
Your logic is flawed, because you use "OR". If you enter 1 for example, then it is not 2 (so color_bet != 2 is TRUE). Basically if you do this: if var != 1 || var != 2 this will always be true, because var can't be 1 and 2 at the same time. This is what you want: if color_bet != 1 &amp;&amp; color_bet != 2 &amp;&amp; color_bet != 3
[Martin Fowler has a good writeup on what they are](http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs). As for when to use them: the reason why you'd use them is to help isolate code for testing. A good test verifies *exactly one* thing -- a method, a behavior, whatever -- but sometimes that one thing requires collaborating with other objects. So in the interest of writing tests that verify one thing, you set up a bunch of fake objects that behave a certain way.
Oh my god... I feel so stupid right now, haha. This is what I get for not programming all summer! Thank you so much!
If you're just getting into testing, my advice is to not get into stubs and mocks at all. They are a great tool to use situationally after you're comfortable testing without them. There is a certain pain that one can experience when writing an automated test. Sometimes, you're trying to write a test for an object with a dependency that is cumbersome to work with in your test environment. Here are a couple reasons why you might be feeling pain: 1. The dependency is hard to instantiate from scratch in a test environment. For example, your dependency normally gets built out by a network request or from ingesting an Excel spreadsheet. 1. The dependency is slow. This is closely correlated with (1) 3. The sheer number of dependencies is really great. Stubs let you intercept method calls and "fake" the output. This helps you ignore dependencies that you don't really care about. Mocks are implemented similarly to stubs, but further allow you to assert that you interacted with the stubbed object the way you're expecting. The problem with these approaches is that 99 times out of 100, the cumbersomeness of those dependencies points to an isolation problem in the design of your actual code. Stubs and mocks are workarounds that allow your code design to continue going down the wrong path. It's a good idea to introduce abstraction between annoying dependencies like network calls, file systems, etc., so that testing them isn't so cumbersome. Those abstractions can often be substituted for "null objects" or doubles and lead to much easier testing *and* well isolated production code.
Fuck every single person who starts their post with "ELI5". It's the dumbest possible expression. If you want to be treated like a child programming is the wrong hobby.
You could also add in Coveralls for stats on the test coverage
Didn't mean to come across as "dumb", I just thought that was convention for these types of posts.
1. You can use the same for while while (0...amount_to_win).include?(user_money) 2. Use puts instead of print - it adds also new line char to the end of line. puts "What color..." puts "Please use correct input." etc 
This is what are you looking for Hash[{ a: 1, b: 2, c: 4, d: 3 }.sort {|(_,val1), (_,val2)| val1 &lt;=&gt; val2 }] Please remember that it works only in Ruby 1.9 where hash keeps the order (not random one). Basically what you do is you pass 2 values to block split into next two values. (_, val1) means that you get first key and it's object (stored in val1) and (_, val2) you get second key with it's object. Since you're not interested in comparing keys, I've placed them as _ (temporary [trash] variable). As sort returns array of arrays then we need to merge it back to hash. You can read about it here http://ruby-doc.org/core-2.1.2/Hash.html#method-c-5B-5D Please also remember to assign the sort result the variable as it doesn't change sorted hash, but returns new one.
Thank you so much for taking the time to explain this. I'm starting to grasp the concepts on them and how they are necessary.
Awesome. I'm definitely going to read through that! Thank you so much for posting it!
Glad to help! :-D
I'd definitely like to join a study group...maybe we can all work to build something together? Should we start an IRC channel?
Is there a way to make the JS work; with something like PhantomJS? I was never able to make it work.
Cool so when you guys want to start?
This is a really interesting project and I'm curious to see where it will go, but I'm having trouble getting excited about a monolithic framework solution to the problem of synchronizing data between the client and server in modern web applications (even though I'm a huge fan of Ruby). I'm more optimistic about this than Meteor, but only because I'm more optimistic about Ruby than JavaScript. Ultimately, strong coupling between system components (client and server in this case) sacrifices long-term changeability and scalability, and committing to Ruby for the server-side application means you're already making certain tradeoffs with regard to memory consumption, CPU utilization, and concurrency. I'm all for getting rid of JavaScript—I think it cannot be fixed and has to be replaced—but I don't think welding the client and server together is the solution.
Here is the link for the chat. Use reddit_ruby as the channel. http://webchat.freenode.net/
Sinatra's pretty solid. 
It uses rubygems. Therefore you already have one of the best plugin system out there. I can imagine more 'volt-*' packages to come. They already have 'volt-bootstrap'. For client side i think you can still use bower for javascript 
Do frameworks like Volt and Opal basically do exactly what CoffeeScript does, meaning transcompile into javascript and create .js files from your ruby client-side code that execute in JS on the browser? Or do they completely take the place of JS as the client-side scripting language? It seems that if Opal/Volt work as transcompilers, then CoffeeScript already addresses this problem within the JS community. Granted it's technically not ruby, but it's just like ruby (in philosophy). As a developer, are you not better off accepting the community standard if it offers a similar solution?
yes, Volt uses Opal.rb for the client-side code. This transpiles to JavaScript in the same manner that coffeescript does. CoffeeScript is not the only transpiler, there are LOADS of them so calling CoffeeScript a "community standard" is very misleading I think. Plus, some of us just prefer using ruby :p
There is the Odin Project which is an online `coding school` which teaching Ruby and Rails and has a nice curriculum to follow. There's codecademy's Ruby track which is super excellent, too. (That's how I learned Ruby, but I also knew Java prior so the CS concepts weren't hard)
things are good 
The `open` method you've defined is already part of the `openuri` gem. Also, with `openuri` you can just open the image and read it to a temp file, saving you the trouble of calling `curl` and also `rm` at the end. Why have the two shell scripts at all? Why no just call the `ocascript` from within the Ruby file? You could probably make this into a method, that you could use for both calls.
Might be worth a look at: [Alex Speller's LRUG Music Repo](https://github.com/alexspeller/lrug-music)
Oh wow, this is cool. Thanks. :)
 Go Ninefold!
Hmm, no dice. I was able to locate the point where I had Ruby installed, but after hitting enter on the Command Prompt with Ruby it just showed me the current version of Ruby. C:\Users\Name&gt;"C:\Users\Lloyd\Documents\Ruby files\Ruby-1.rb" ruby 1.9.3.p545 &lt;2014-02-24&gt; [i386-mingw32] I looked on the comments at Youtube and other people seem to be having the same problem as well. Maybe he addresses it in the next video, but I'll message him about it. Thanks for the help.
Check out my [sound](https://rubygems.org/gems/sound) gem. It's still in alpha, but I welcome feature requests. The goal is to make tools for Ruby developers, so any input would be welcome! I'm trying to grow audio and sound libraries with my [Ruby Sound and Music Project](https://github.com/RSMP). What platform are you on? &gt;Or am I setting myself up for a lot of work? Hehe, probably
[Best talk I've seen on them](https://www.youtube.com/watch?v=fAb_OnooCsQ) Basically a mock/stub is a fake version of an object that the unit under test interacts with. Let's say you have a Player object in a video game and you want to test when the Player shoots an Enemy. Well, if you expect that the Enemy dies, from the Player object perspective, it doesn't matter what actually happens to the Enemy. Let me lay it out in a different format. 1) you're testing the Player "shoot" method 2) since it's a unit test, you're testing the Player class, not the Enemy class 3) if you're not testing the Enemy class, you just need a dummy that 'looks like' an Enemy object. So the question becomes "why would I go through the trouble of creating this fake Enemy object if I have the *real* Enemy class right here ready to go?", and there are answers to this question. One answer is that if you can make the Player class work with a fake Enemy object, then those classes are decoupled. Another answer is a bit more general and abstract, but it is the idea that if you fake the interaction with another class, it helps you craft your classes in the appropriate manner. Sometimes it's not obvious if a method belongs in one class or another, and writing unit tests can help you see where certain methods belong. Keep in mind that mocks and stubs are for unit testing. Unit testing means you're testing one little thing. If your Player#shoot test expects that the Enemy object is dead, that's not a unit test, that's an integration test (testing across stuff in your application).
If you're doing cross-platform, cygwin support would be nice. I use it on Windows to pretend I'm on Linux, but it seems that most who support Windows target the Mingw compiler ecology rather than cygwin.
Well...although I'm a systems programmer, I haven't really figured out the Cygwin::Windows boundary, so maybe it's just my ignorance, but every time I've tried to install some gem that involved multimedia or GUIs or something that inherently required system resources, it always seemed to fail badly in the installation phase. I was meaning to attempt to write a C program under Cygwin to link to some Windows DLL that supported audio or something, to test the waters, but since I'm a Linux programmer and don't know Windows programming I never got around to figuring out what that interface would be. In terms of your code above, I'm sure it is nicely cross-platform as you say -- but it requires 'sound' to be successfully installed under Cygwin and linked to the appropriate Windows DLL, which is the part where I always run into problems. I presume you test your Sound gem against a standard Windows interface (Visual C++ and system32.dll or whatever), but I was expecting that to work differently than the Cygwin interface, which emulates Linux after all, which in turn I would expect to use a different ABI than Mingw. Possibly I'm worrying about nothing, but again, many systems-resource-using gems have failed on the install step.
Well I am using the FFI gem to load up winmm.dll. FFI just requires that the Devkit be installed with the Ruby installation on Windows. I didn't write any extension code myself, I'm just piggybacking off of the FFI gem. [Here's an example of using it in my gem](https://github.com/RSMP/sound/blob/master/lib/sound/device_library/mmlib.rb). As you can see on line 27, I'm loading up winmm.dll using FFI's ffi_lib method. [You can check out ffi here.](https://github.com/ffi/ffi)
Seems like a perfect candidate for supporting [JSON Schemas](https://github.com/hoxworth/json-schema) instead of manually setting the verification.
I'll check that out, thanks. Meanwhile I belatedly realized that your little test program above should work right now, and that I should try that, so I tried to install the "sound" gem, with this failure (in FFI I guess, from what you're saying?): gcc -I. -I/usr/include/ruby-1.9.1/i386-cygwin -I/usr/include/ruby-1.9.1/ruby/backward -I/usr/include/ruby-1.9.1 -I. -DRUBY_EXTCONF_H=\"extconf.h\" -ggdb -O2 -pipe -fno-strict-aliasing -I/usr/lib/libffi-3.0.13/include -mwin32 -o ClosurePool.o -c ClosurePool.c In file included from /usr/include/w32api/winsock2.h:56:0, from ClosurePool.c:39: /usr/include/w32api/psdk_inc/_fd_types.h:100:2: warning: #warning "fd_set and associated macros have been defined in sys/types. This can cause runtime problems with W32 sockets" [-Wcpp] #warning "fd_set and associated macros have been defined in sys/types. \ ^ In file included from /usr/include/cygwin/sys_time.h:13:0, from /usr/include/sys/time.h:61, from /usr/include/ruby-1.9.1/ruby/intern.h:40, from /usr/include/ruby-1.9.1/ruby/ruby.h:1383, from /usr/include/ruby-1.9.1/ruby.h:32, from ClosurePool.c:44: /usr/include/sys/select.h:31:5: error: conflicting types for ‘select’ int select __P ((int __n, fd_set *__readfds, fd_set *__writefds, ^ In file included from ClosurePool.c:39:0: /usr/include/w32api/winsock2.h:995:34: note: previous declaration of ‘select’ was here WINSOCK_API_LINKAGE int WSAAPI select(int nfds,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,const PTIMEVAL timeout); ^ Makefile:206: recipe for target 'ClosurePool.o' failed make: *** [ClosurePool.o] Error 1 make failed, exit code 2 EDIT: I see the formatting on that got screwed up but I suppose that's just as well, for brevity, especially if that is not even your own code.
I just looked at devkit, and as usual it is aimed at the vanilla Windows environment (with Mingw), not the funny case of Cygwin's Linux-on-Windows, which amounts to being a different platform...mostly it's the same as a Linux platform *but* any flags that test to see if the environment is Windows test true. On cygwin's bash command line everything looks just like linux, including that / is the top of a filesystem that looks like a linux filesystem (windows FS is accessible via e.g. /cygdrive/c). But -WIN64 or whatever is defined. So every C/C++ program seems to need explicit porting, annoyingly.
Check out this solution to ffi with cygwin as a possibility: https://github.com/ffi/ffi/issues/284#issuecomment-33752957
This appears to just be a breakdown of previously reported (and fixed) CVEs. Counts of past vulnerabilities do not indicate how secure a project is or how many undiscovered/unreported vulnerabilities may still be lurking.
That looks very promising, thanks for that. I'll give it a try.
It reports CVE vulnerabilities in current versions from gemfile.lock or possible CVE vulnerabilities in version intervals from gemfiles and gemspecs (e.g., `&gt;= 3.1.3, &lt; 3.3`). Those CVE vulnerabilities might be fixed in later versions of gems, but not all projects update gem dependencies quickly, hence the idea for Security Watch ;)
Check this: http://www.reddit.com/r/ruby/comments/2dcl0v/a_gentle_introduction_to_music_theory_in_ruby/
Well, it may not be that difficult to implement a simple subset of Ruby like I did in GobiesVM. All you need is a lexer, a parser, and a copy of Ruby Under a Microscope :p The real tricky part is to introduce STM in it.
Nice, but I'd like something that is real-time, not generating a wave file and playing it. 
So ... when the "photo of the day" widget stopped working on my GF's laptop I promised her I'd write a small script to do exactly what you have done. Thanks for saving me the work :)
Hmm.. quite a few false positives. For instance, ActiveAdmin gets warnings because Rails 0.0.0 has known CVEs. This just looks like its gemspec doesn't specify which version of Rails it uses explicitly. Still, interesting system.
I submitted a [pull request](https://github.com/vikram7/national-geographic-photo-of-the-day/pull/1) with my suggested improvements.
I like his todo list: * refactor code Do what you suggested. * add ability to have the photo automatically update without having to run script Add to crontab/launchd.
These are really cool! You've done lots of the bits I've been thinking about how I'd implement. i.e. notes, scales, etc. It'll be interesting to read how you've done it. I'd like to possibly contribute to this project. Are there ways I can help, perhaps? I'm on Linux, though I have access to a Mac, and anyone I'm working with will probably be on Linux too.
Thanks!
People can try to help, but honestly, unless you do it on a Linux system it will always be a losing battle. Yes, you can get Ruby to run on Windows. But every tutorial you ever see will assume Linux, and you're just going to keep having issues like this.
The website does not make it clear which, if any, projects are affected by the past vulnerabilities.
Ah, I didn't get an email like that, instead I went to the site and made an account and asked it to scan some projects. You can ask it to scan specific projects and specific branches of projects, and get a report for that branch. That email does sound annoyingly vague. The report of a specific branch is not quite as bad, but yeah, still has some things I believe are false positives, which could use a bit more information to understand exactly what's going on. Definitely not perfect, and I see the risk of people insisting you just need to address anything on it's report and not recognizing there will always be false positives. But I still think it's a pretty neat idea which is on the right track. The main problem I think I'm getting is that it scanned a gem which works with multiple versions of Rails, and it's telling me I'm vulnerable because I'm using old versions of rails which need to be upgraded, which, yeah, it doesn't quite work like that. ah, there is a "mark false positive" button, which is good. oh neat, it did identify one vulnerability that I'm surprised it was smart enough to identify, this one definitely took some code analysis not just matching gem versions to known vulnerabilities. And this one is legit, my code was insecure (a Rails redirect_to params.merge(stuff)), which can allow an attacker to set the host, something I never thought about)
There is a more direct route, but you have to interact with whatever native sound API is available for your operating system. I've done a lot of dirty work for doing this on Windows and Linux with my [sound gem](https://github.com/RSMP/sound). It's still in alpha, but you can play notes on both platforms with that sample code in the readme. Also, for music theory stuff, check out my [other gem juicy](https://github.com/RSMP/juicy).
This is really neat. There are _definitely_ false positives, as one would expect. And a "mark as false positive" button, which is great. One class of vulnerability it scans for is dependency on gem versions with known vulnerability. The biggest improvement I would recommend is more information here -- it knows what about your gemspec or Gemfile it didn't like, and what the minimum version of the dependency it wants you to have are. It should explicitly give you both those things, rather than making you scan the CVE which may or may not have the info. For instance, I had it scan a gem which allows any rails 3.x or 4.x. It marks this as vulnerability because the spec includes known bad versions of Rails. Okay, fair enough, but this is def a false positive, there's not much I can do about this on the gem level (I don't believe there's any way in a gemspec to say allow any versions of rials 3.2 greater than X patch level AND/OR any versions of rails 4.0 greater than y, etc.) Also, it tells me my nokogiri is vulnerable due to containing a libxml vulnerability. Again, I think this is because my gemspec allows a range of nokogiri, some of which include known vulnerabilities. But the report doesn't tell me what version of nokogiri it considers secure, and the CVE is about libxml so doesn't give me that info either. The tool must know what versions of nokogiri it doesnt' like and what version it thinks is acceptable, it would be helpful if it told me. It did, however, tell me about one vulnerability which I think is legit, and which I'm impressed that it found -- one that was about analysis of my code not just dependency version blacklisting. A Rails `redirect_to params.merge(stuff)`, which can allow an attacker to set the host, something I never thought about but I think is a legit vulnerability. Really neat product, I look forward to it getting even better over time. Note, however, as public security information, this also gives attackers a way to find open source projects with specific vulnerabilities -- and even find this in an automated fashion. I can imagine an attack suite which has it's own Rails static code analysis, which can use the information from this tool to identify not only that a particular app or gem is subject to a vulnerability, but even exactly what URL at a particular app will trigger the vulnerability. I expect security to keep getting harder. :)
What part of the website are you looking at? The part I'm looking at is a report for a specific github repo, and in fact a specific branch of that github repo. So it's pretty clear what project is effected -- exactly the one I am looking at the report for. 
&gt; Which Ruby on Rails project? The one you are currently looking at. How can it be made more clear? &gt; Why are they mine? Which gems? Because they are part of the project. If you click on the gems link in the sentence, it will show you which gems are affected. &gt; What do they mean by project? Project on GitHub that could be a gem, an app, or any other Ruby project.
Thank you for the extensive feedback—it's hugely appreciated! &gt; The biggest improvement I would recommend [...] what the minimum version of the dependency it wants you to have are. This is actually pretty tricky because CVE vulnerabilities don't have this piece of metadata available. The only related metadata that exists is what versions are affected but it's not enough to provide meaningful recommendations for what versions to upgrade to. It could be extracted from the description but there are several obvious challenges that stand out: natural language processing and non-standard nomenclatures for products and versions. So, this bit is still work in progress :) &gt; I had it scan a gem which allows any rails 3.x or 4.x. [...] Okay, fair enough, but this is def a false positive It's still a possible vulnerability because there are vulnerable gem versions in the range. Say, you have another gem with pessimistic versioning for Rails that was not updated in a while in your gemfile. Then a vulnerable version of Rails will be locked because of it *and* because of the former gem that had too wide of a range of possible Rails versions. &gt; I don't believe there's any way in a gemspec to say allow any versions of rials 3.2 greater than X patch level AND/OR any versions of rails 4.0 greater than y, etc. Nope, unfortunately , as far as I know, there is no way to do it. &gt; The tool must know what versions of nokogiri it doesnt' like and what version it thinks is acceptable, it would be helpful if it told me. Point taken again :) &gt; Note, however, as public security information, this also gives attackers a way to find open source projects with specific vulnerabilities I think the attackers already have a variety of automated tools that do much more than any of the Hakiri tools. The purpose of Security Watch is to provide visibility to developers that are unaware of possible security issues in their projects. Thanks for the feedback again! Ping me if you have any other comments.
Thanks, but I'm a mac guy. Did see the theory one. Very cool
I'm currently reading up on the Core Audio library so I can open devices and shove sound data to them on MacOS. It'll take a few weeks to get up and running but I'll PM you once I've implemented it in the gem.
I just started following this same tutorial on YouTube as well. I am on day 10 or so. I haven't had any trouble using Windows and following along with him as the video plays. When you say you are dragging and dropping the folder, do you mean your "Ruby Files" folder? You should be dragging over just your .rb file. or have you just tried typing the file location into the command prompt?
No, I'm dragging over the file and not the folder. But I've resolved the issue now. His 1.1 video shows that I can just use the debug program that's in Komodo IDE instead of using Command Prompt. 
I haven't used Phantom.JS b/c the majority of my work consists of dynamic automation instead of static. BUT i did run into this article awhile back. It says it uses Phantom with Capybara then pipes the information to nokogiri. If you do use this you should post some simple test code. You can also run watir headless with the headless gem. Code looks something like ---- headless = Headless.new ---- headless.start ---- browser = Watir::Browser.start "google.com" #do stuff here ---- browser.close ---- headless.close ---- [article](http://www.chrisle.me/2012/12/scraping-html5-sites-using-capybara-phantomjs/)
&gt; This is actually pretty tricky because CVE vulnerabilities don't have this piece of metadata available. The only related metadata that exists is what versions are affected but it's not enough to provide meaningful recommendations for what versions to upgrade to. Okay, then how does your tool know which versions to flag? It clearly knows which versions it finds acceptable, it has to, right? So it can tell me. I'm seeing a lot of criticism over the dependency version flagging stuff. I think it's especially going to be an issue when scanning gems (which lack a Gemfile.lock), rather than apps. I assume if your project has a Gemfile.lock, and the version in the Gemfile.lock is okay, it will _not_ get flagged even if the Gemfile itself allows other not-okay versions? If it doesn't work that way, it should. But for gems, it can be especially confusing. If your gem is compatible with any version of Widget (`gem "widget"`), and _some_ version is flagged, you get flagged. This is confusing people. I don't think the basic operation of your scan is wrong. But a couple improvements to avoid confusing people: * You just need to be more clear in the flagging of exactly what's going on. See telling us what versions you find acceptable or unacceptable. "Your project allows Widget &gt;1, but widget 1.0.0 is flagged bad. Consider updating your requirements to &gt;= 1.0.1 to avoid risk of using vulnerable gem. Or mark 'false positive' if you can't do this and know what you're doing." That sort of thing. * I wonder (I'm not sure) if there should be a "gem mode" (when no Gemfile.lock is present; and/or by explicit settings choice) as opposed to the present functioning which is basically "application mode". In "gem mode", if your range of requirements allows the more recent 'safe' version as well as the older unsafe version, you still pass. Because that's really how gem dependencies have to work, honestly. &gt; It's still a possible vulnerability because there are vulnerable gem versions in the range. Say, you have another gem with pessimistic versioning for Rails that was not updated in a while in your gemfile. Then a vulnerable version of Rails will be locked because of it and because of the former gem that had too wide of a range of possible Rails versions. I understand what you mean, and the risk you're talking about -- but I don't think it's feasible to expect/require gems (rather than applications) to account for it. If I release a gem Foo that is compatible with Widget 2.x (with Widget under semver), that's my responsibility as the gem releaser. If Widget 2.0.3 is insecure and they release a 2.0.4 security fix, then the applications using my gem should `bundle update` and they'll get it. If my gem actually _prevents_ update to 2.0.4, that's my gem's fault -- so in your case that 'another gem with pessimistic versioning' is at fault and should be flagged. But it's not reasonable to expect/require me to release a new version of Foo every time anything in my dependency tree releases a security patch, a new version of Foo that prohibits the insecure dependency. I might have to be releasing a new Foo every day, with no change except raising the minimum version of some dependency. It's just not a realistic model. It is for _applications_ when you have a Gemfile.lock, but not for gems. I'm seeing a lot of resistance to your gem flagging in the comments here online, and I think it's because of this issue. I think you could ameliorate it simply by adding more description to the flagging as described above, so authors understand what and why you're flagging, and can say "okay, good to know about that, but I don't think it justifies another release of my gem, I'll mark it false positive." I think that alone would do a lot. And then the next step would be the 'gem model' of dependency checking as described above, which I'm not 100% sure of but def lean towards. 
Thanks!
* https://hakiri.io/security-watch - "How secure are open source Ruby projects on GitHub? Watch out for potential CVE and code issues here." * https://hakiri.io/github/sinatra/sinatra/master - "sinatra/sinatra » master" * https://hakiri.io/github/sinatra/sinatra/master/e7f65ab3de21819fa7d505bcda2d53948094f5e4/warnings?name=Buffer+Errors - "sinatra/sinatra » master » Commit e7f65ab - Warning Types » Buffer Errors" Every single link provides data about gems, not Ruby on Rails projects. &gt; Hakiri found a Ruby project with 40 production gems in your repo. The project has a total of 10 security warnings. Here is the breakdown of security warning types: This appears to be lazy copy text. I am not logged into the site, so how would it know _my_ repo.
* https://hakiri.io/security-watch - "How secure are open source Ruby projects on GitHub? Watch out for potential CVE and code issues here." * https://hakiri.io/github/sinatra/sinatra/master - "sinatra/sinatra » master" * https://hakiri.io/github/sinatra/sinatra/master/e7f65ab3de21819fa7d505bcda2d53948094f5e4/warnings?name=Buffer+Errors - "sinatra/sinatra » master » Commit e7f65ab - Warning Types » Buffer Errors" Note: I am viewing the unauthenticated version of the website.
Check out what's been posted below :)
Performance doesn't mean anything if the Gem crashes all the time. The repository contains a benchmark (https://github.com/YorickPeterse/oga/blob/master/benchmark/xml/parser/comparing_gems_bench.rb) that compares Ox, Nokogiri, Oga and REXML. On my own laptop the ranking is as following: 1. Ox 2. Nokogiri 3. Oga 4. REXML While good performance is a long term goal, it's not something I'll be focusing on initially. I'd much rather have a stable/consistent API before I start optimizing things.
&gt; Every single link provides data about gems, not Ruby on Rails projects. Yes. Why would you expect to see data on Ruby on Rails projects? And what projects would those be? &gt; I am not logged into the site, so how would it know my repo. You are right, it should say "in *the* repo." Thank you for noticing!
This is what the specification pattern is for. 
I was wondering if Avdi was submitting his own article to /r/ruby and then I saw OP's username and decided not.
I'm not sure how using that pattern would making debugging easier—the valid? method would still just return true or false, and you'd still need to painfully dig through a bunch of objects to find out where the failure is coming from. Did you have a better way of using that pattern to trace through the logic at runtime?
Couldn't we just write to a pipe and have something like aplay on the other end reading from the pipe?
As a rule I don't submit my own stuff. Or stuff, really.
I saw a suggestion to ditch Windows for linux. I highly recommend this, or at least getting a VM or another machine running linux. If you have an old computer, install Ubuntu on it and shove it under a desk with no monitor, ssh in with PuTTY and do your development that way. I use cygwin on my Windows desktop at work. Never tried to do Ruby in it ( I just ssh to an Ubuntu VM ) but it works well for other things where I would normally use linux. Any of these options probably seem like lots of work to just start coding Ruby, but I think it's worth the time, and you'll learn a bit about other fun stuff in the process. The first gem I would install is "pry". It's a drop-in replacement for the standard IRB but it has lots of other features that will help you learn the language and debug code.
I've seen it from time to time here, but yeah, doesn't seem your style :-) 
That's not just good OO code, it's good functional code too. Notice that all of his example code is just functions (nice ones with no side effects at that), he doesn't even need to show us the classes for a complete example. This is a pretty functional case. I think it could be written much the same in a purely functional paradigm, and would still be considered good code. I get what he's getting at, I see the design challenge he wants solved, and I don't immediately know how to solve it either. But I don't think it's a problem caused by OO paradigm, and doubt it would be magically solved by functional paradigm although I'm not experienced enough functionally to say. It's just a problem that requires thinking about what API you actually want and how to get it. It turns out you don't _just_ want to know a boolean `available_to_user?`, you want to know if it's available *and* _why not if not_. (Do you want to know _why_ if it _is_ available too, why it is? I dunno). Okay, so what does the api/contract have to look like (probably not just returning a boolean, which probably means returning an object of some sort that can tell you what you do want to know), and what's the simplest code following your standard design principles (law of demeter or what have you) that can get you there? That's just how code design works, right? And some design patterns (clean ways people have found to solve similar problems before) don't hurt either, I like FYIAV's specification pattern suggestion. 
This is literally already built into ruby. :( object.define_singleton_method(:bar, -&gt; { "foo" }) Please don't take my commend the wrong way. It's great that you're exploring!
&gt; Okay, then how does your tool know which versions to flag? It has a list of vulnerable versions. I guess, I could make a recommendation to upgrade to `&gt; x`, where x is the latest unpatched version, but then I could only do it for the latest version branch. E.g., if the vulnerable versions are, say, `3.1.0`, `3.1.1`, and `4.0.0` then I would say "Upgrade to `&gt; 4.0.0`" leaving the 3.1.x branch uncovered. On second thought, I could make it work for all branches but it could be tricky in some edge cases. &gt; I assume if your project has a Gemfile.lock, and the version in the Gemfile.lock is okay, it will not get flagged even if the Gemfile itself allows other not-okay versions? You are right: it won't get flagged if the Gemfile allows other vulnerable versions. &gt; You just need to be more clear in the flagging of exactly what's going on. + I think you could ameliorate it simply by adding more description to the flagging as described above I absolutely agree with this. I will try to implement this soon. &gt; In "gem mode", if your range of requirements allows the more recent 'safe' version as well as the older unsafe version, you still pass. I haven't thought of this before. It's a very cool idea. In the case of the gem mode I wouldn't raise any warnings but I could still note somewhere that there are potential vulnerabilities in the version range, just as an FYI. &gt; But it's not reasonable to expect/require me to release a new version of Foo every time anything in my dependency tree releases a security patch I would argue that for certain gems (like Rails, Devise, cancan, Warden, etc.) it should be expected as they are key to providing security. Again, thank you for all of your feedback. It's very helpful!
does that mean `Object.new.respond_to?(:bar) == false` ? Edit: just tested in irb. That is correct. This certainly makes the implementation much easier. haha Edit2: actually, that only cleans up one method. I still need the other things for aliasing methods.
&gt; It has a list of vulnerable versions. I guess, I could make a recommendation to upgrade to &gt; x, where x is the latest unpatched version, but then I could only do it for the latest version branch. E.g., if the vulnerable versions are, say, 3.1.0, 3.1.1, and 4.0.0 then I would say "Upgrade to &gt; 4.0.0" leaving the 3.1.x branch uncovered. On second thought, I could make it work for all branches but it could be tricky in some edge cases. Actually, just tell us what you know then, that's good enough. "Your gem requirements are: "~&gt; 2.0". (Give a link to the line in Gemfile or gemspec via github that expresses this dependency, woot!). That includes version(s) 2.0.2 and 2.0.4 which are flagged as having vulnerabilities, which is why this has been flagged. To fix, change your gem version requirements so they don't include those versions. Or mark 'false positive' if you understand and have reasons not to." Except using clearer and more concise language than that! If you don't know exactly what versions are 'good', it might be risky to try guessing, or not worth the return on investment. I still think I disagree about expectations for what gems (rather than apps) are responsible for doing with their dependencies, but if you just explain quite clearly what's going on, getting accross the above, I think will do a world of improvement. (And explicitly acknowledging that marking false positive might be legit is a good idea i think). I definitely still like a 'gem mode' where this kind of dependency check is just an informational note and not neccesarily flagged as a warning though, a lot. The trick is, I realize, if the gem is expressing it's dependency such that the _latest allowed version_ is flagged unsafe, it should definitely still be flagged as a problem. Determining that should be possible, but will require interaction with the rubygems/bundler api's to see what the _latest released gem_ (by which I really mean highest-numbered, not date) that satisfies the spec is. Of course, this is what bundler and rubygems do already, it's quite possible. But I don't know if you're interacting with rubygems like that yet (and i dunno if you'd wanna cache the calls). And, actually, once you do that, it might be well along the way answering the question from the first point, what version you need to change to as your minimum requirement to avoid the unsafe versions. 
I've seen this response in various forms, and it suggests a kind of exceptionalism: this code is somehow *special*, and presumably I should have planned ahead for that fact in order to avoid this painful debugging experience. But the point is, there is nothing special whatsoever about this code. Two weeks down the road I'll be asking a similar question about some other, unrelated deeply nested chain of dependent query methods. If it's worth altering the APIs here then it must be worth altering the design everywhere, and in the process making the program into something which no longer resembles idiomatic Ruby code. 
Is there a reason you are using class methods for this entire thing? module Xorer class Char def initialize(char) @char = char end def to_byte char.ord end private attr_reader :char end end
&gt; I wouldn't have used String as a reason though, but a dedicated ADT with constructors for each error Hmm, interesting. Then your `return` method becomes a `Left/Right` chooser and each of your predicate methods must `return` the correct constructed ADT error type. &gt; should be data Either a b = Left a | Right b you are correct.
I made [a fork](https://github.com/chendrix/simple-xorer) of your code that in my opinion is better encapsulated and has better OO design.
Disqus is not loading right now for some reason. I had a project where I constantly needed to debug complex boolean logic defined in an obscure dsl in thousands of lines. Every "false" had to be answered, "why?" It helped me a lot when I noticed, that "success" (or "matched" in that particular case) is just one entity, and "fail" has "many faces". Looks almost like boolean logic in ruby, but reversed - everything is true, but only nil and false are false. So I reversed predicates in my code, and all my predicates start to return reason of failure, (as a symbol, but it could be anything), and nil if everything is ok. something like this: def valid?; !failure; end def failure; @predicate1.failure || @predicate2.failure; end 
I know he was clear about the fact you shouldn't use this for encryption, but in case anyone was thinking about it.. https://github.com/technion/matasano_challenge/blob/master/set1/chal6/chal6.rb (working example, reads 6.txt and cracks repeating XOR cipher)
You don't even need to do that, this works just fine: def object.bar "foo" end
It's a fair point but the biggest issue with ASP.NET is the huge html generated for maintaining the state of the page. ASP.NET was born when broadband was taking off and so not enough attention was paid to what was being transferred via HTTP. Also the further down the line you go, the page event model gets increasingly difficult to manage. A C# version of Opal would be pretty popular would be my bet (I'd use it).
I still don't understand what your gem is doing that isn't just as easy to do with stdlib. 
not much. https://github.com/NullVoxPopuli/MetaInstance/blob/master/lib/meta_instance.rb it auto-backs up overridden methods on an instance though, which is useful for a couple of my projects.
not quite, that defines the method bar as a class method of object $ irb irb(main):001:0&gt; class Foo; def Foo.bar; "foo"; end; end =&gt; :bar irb(main):002:0&gt; Foo.bar =&gt; "foo" irb(main):003:0&gt; Foo.new.bar NoMethodError: undefined method `bar' for #&lt;Foo:0x00000000d9be08&gt; from (irb):3 from /home/lprestonsegoiii/.rvm/rubies/ruby-2.1.0-preview1/bin/irb:11:in `&lt;main&gt;' irb(main):004:0&gt; edit: I thought there was a typo in the post that this is in reply to. The above irb makes an incorrect assumption, and banister's example is correct.
err, i just said that: def object.bar; "foo"; end is equivalent to: object.define_singleton_method(:bar, -&gt; { "foo" }) Which it is. Your IRB session is totally irrelevant. 
oh gotchya, I thought that was a type, and did Object. sorry. you are correct 
NP, sorry for snapping :)
I checked `Sidekiq.methods` in my Rails console and found this Easter egg.
Cool. ActiveSupport `alias_method_chain` is another approach to doing that, which you've already got if you've got Rails. Don't get me wrong, I'm not recommending alias_method_chain, its a mess. but I think I probably don't recommend any way of backing up overridden methods (other than calling super to call them within the override, as usual). 
:-)
yeah, I've heard lots of stories of alias_method_chain. what I've done is allow the overriding of a method multiple times, but without chaining. So at any given point you'll just have :backup_method and :method, until you restore them. then :backup_method becomes :method again, and the :backup_method (now an alias) is removed Is calling super.method the proffered way? I imagine it'd be the cleanest. Requires a subclass though. 
That's part of the [flip table API](https://github.com/mperham/sidekiq/commit/c112716), which [allows angry developers to express their emotional constitution and remedy it](https://github.com/mperham/sidekiq/blob/master/test/test_sidekiq.rb#L28-L36).
My aim was to keep it very simple and easy for anyone to follow. This is without a doubt "better encapsulated" and "better OO design". Awesome job!
You can only call super within the logic of the overridden method itself. super is definitely the preferred way to do that! But I don't think you can explicitly call `super.method` like you can in java. 
&gt; [...] it's good functional code too. Not necessarily. There are people who despise the Boolean type in (statically typed) functional languages because it carries little to no semantics: http://existentialtype.wordpress.com/2011/03/15/boolean-blindness/ Meaningless booleans seem to be the exact cause of Avdi's (and everyone else's) pain.
can I ask what your console is? i like the color scheme
Most security apps will tempt the unauthenticated users with "We found X critical vulnerabilities in Y repos. Login to see if _you're_ vulnerable!". Just showing CVE counts per gem doesn't adequately communicate the risk.
It's certainly possible. I'm currently running the PIA client on my desktop which is Ruby based. That said, it just feels like the wrong ecosystem. You'll want to use Git. Git for Windows is the half assed implementation of Git for Linux. Assuming you do any sort of web development, you'll want Apache or nginx. Both of these were originally Linux applications, with a Apache on Windows frankly making no sense. Yes it can be made to work, and you'll be forever fighting the fact that every piece of documentation ever is Linux based. Then you'll have to deal with Windows sysadmins, who will be offended by the suggestion and respond to everything you ever try to recommend someone with the statement "we should find a .NET application". 
Nothing to not understand, those are my backups in case Windows can't run it well on its own. I have to have Vagrant regardless and it's not too terrible creating a bash script to get an entire Ruby environment up and running. 
I'm new. I don't understand.
So a few things: * what's so half-assed about Git? I'm using it in CLI without an issue (under Cmder which adds a ton of \*nix utilities so that could be the difference) * makes sense about the servers which is probably why I'll be running full sites on a vagrant machine but how about tools like Capistrano? Or Ruby gems that do other non-site stuff (like SASS etc.)? * I'm running windows for dev only, not for deploying it elsewhere. And anyways, I'm not working at a windows shop. Thanks for the help!
This is related to the [very first open source contribution I tried to make](https://github.com/mperham/sidekiq/pull/759). 
Try building a simple game in Ruby, then read POODR and Confident Ruby
This is also why things like the Null Object pattern exists (which /u/avdi knows a thing or two about), because primitive types like nil carry no domain meaning and their definition/semantics cannot be modified by users.
I've used Aptana in the past for other projects and found it good. I literally just saw the Rails update this week and installed it earlier so I'm hoping to see some more comments here. The only other IDE I've used with Rails is Webstorm 
That's so bad it's good 
‮
Heh, I quite like the idea behind this
1,2 disagree. 3. used MRI and it was fine and this was all a decade ago, using Gridflow, an addition to PureData, a graphical-programming environment. needed compatibility with vast ecosystem of VST plugins and other audio/3d software that only existed on WinNT based OSes. the key was installing mingw, and its related binary packages such as MSYS and GnuWin32. then you find out where Windows sets the PATH variable.. yes it has one, throw in mingw's /bin and /usr/bin, then you can start-&gt;Run and type 'rxvt' and boom you have a bash shell. they threw in a bunch of header-file hacks so that much of the GNUserspace compiles w/o too much hassle (along with a few helpful #ifdefs in the code. i know i was able to trivially compily Gimp at least). ruby stuff just worked fine though
I once created some mathematical methods using Greek characters. I guess it was poor form, but I thought it looked terrific and was briefer than spelling out the symbol "λ" as the word "lambda".
What font is that?
Anonymous Pro, 16pt. 
Make something. Post on Github. Discuss here.
I'm a .NET dev by trade but recently bought a Mac because I had issues running anything outside the MS eco system as soon as I started getting serious with any language or framework. That said, if you just want to learn and play around Windows is fine (people saying "don't" isn't helpful - not everyone has the spare cash to go and splash on the latest Macbook and running a Linux VM can feel like a chore to a newbie). I've built a lot OSS on Windows and it's usually fine - it's when you start using third party libraries (usually the less industry standard ones) that you'll find problems.
Spaces in method and variable names, that's great. I will certainly use this in future hobby projects.
I was getting confused too. I think it's always slow first, fast second.
Yes, the very first text on the page: &gt; We are pleased to announce the release of Ruby 2.1.3. This is a patchlevel release of stable 2.1 seriese. &gt; This release contains a change of full GC timing to reduce memory consumption (see Bug #9607), and many bugfixes.
the only problem I see is, losing sugar for performance, just makes me think: write it in C ... performance is never the reason I use ruby, not that it isn't important, but this sure looks like premature optimization to me
this is a great presentation but some of the examples could use a little more rigor. Their example of control flow only looks at the case where the method is not defined. In the contra example -- where the method is defined -- using an exception for control flow will be faster because there is no conditional test. I always try to use exceptions for control flow on pieces of my system where they interface with other systems and I can assume that they do the right thing 9 times out of 10 and the 10th time is a bug that needs fixing. The 9 times through the happy path are more performant and the 10th time is easier to identify. Now, if your validating user input, then you want to use if .. else because people will get stuff wrong more than 1 time out of 10.
I think so too, but in some cases it seemed a bit unbelievable, so I would have liked to have had clear labels :)
If you want to do something with index only, you can use `array.size.times`. Seriously, half of the examples were incomparable in intent and function, yet they are being compared in speed: - Hash.merge returns new object, Hash.merge! updates existing one. What the hell do you compare these two in speed for? Compare Hash.merge! with Hash.merge.clone if you want some meaningful number. Like map.flatten was compared against flat_map. - Hash.merge! vs. Hash.[]= is retarded code at best. Hash.merge! already does what's that `each_with_object` code tries to emulate. Of course it's slower. That benchmark is meaningless data. - `#gsub` vs. `#sub` and `#tr` is a "use simple tools for simple deeds" example. If only can show a bug in `#sub` or `#tr` implementations respectively. - Looping vs. enumerating is again an example of comparing different tools performing different tasks in benchmark. At the very least, I don't see that loop code building an enumerator from looped data. Basically only the five examples were meaningful and useful: first three, `#fetch` with yield and mass assginment. Even then there are two things I have problems with: - `#fetch` slowdown is something to be reported as CRuby bug, not promoted as "fast code way". - Assignment example is quite likely a problem with ruby parser and again should be reported to CRuby team for investigation, not promoted.
I see a lot of interest in micro-optimization in ruby/railsland, in a way that confuses me. Okay, so flat_map is 45% faster than map.flatten. But how much of your actual program execution is taken up by map.flatten or flat_map? If only 1% of a particular or typical program execution was spent on flat.map overhead (just made up that number, but I'd be unsurprised if real number was even smaller), then you've just sped up your program by 0.45%, not so exciting. Is it worth the extra confusingness to read (in this case maybe not much but while loop instead of `each_with_index`, really?), or the time it took you to measure, analyze, and convert (in this case maybe not too much either, but there's always an opportunity cost, you could have been spending your time on something that actually mattered)? I see lots of concern with micro-optimization of certain operations, with no analysis of how much that will actually effect any particular application, or a hypothetical typical application in some or any domain. Not just in this slide deck, but often these days. If you're in Rails, it seems like it might be useful start with a profile of an actual or hypothetical-typical-normalized app, and see where it's actually spending it's time, before deciding what operations to micro-optimize. And I haven't really seen any reports of anyone doing that, just micro-optimizing. Am I missing something?
If you want speed, don't write ruby. Making the writing process in exchange for a slight speed boost is missing the point of ruby.
If what you want to find is _old_ code, wouldn't it make more sense to look for files where more than X% of the lines in the file hadn't been touched in X amount of time? That info is in git too of course!
Even though `yield` is 5x faster than `block.call` are the times involved *really* bottle-necks and worth optimizing?
You can click on CVE counts and see the exact CVEs without logging in. Please advise on how to make it more obvious.
Exceptions as flow control are bad, bad juju. Don't do them. They're a code smell, and they will *wreck* performance under JRuby, where a Java stack trace has to be generated with each exception. Just say no.
Well, I think that something like this deck probably came out of profiling applications at a higher level and identifying hotspots. You're right that microoptimizations like this won't do much if used naively; you need to understand where the hotspots are in your code as a whole. That said, it's good to be armed with a few rules of thumb that you can rely on when writing code so that you don't add additional overhead when not necessary. If you can use an implicit yield rather than an explicit &amp;block, go for it. Sometimes, it is important to think about the runtime characteristics of your code, especially if you're a library author. So many Ruby(/Rails) gems these days have performance problems deep in their core, which are innocuous little things on their own, but once they start being called 400,000 times per page view, it really adds up. As in all things, it's a balance. You should know how to write fast code, and you should know when you don't need to.
I really wish I saw the talk because I think it's getting interpreted a little wrong. I think the big takeaway is that as when functionality, expressiveness and ease of writing are all equal, you might as well know that one particular option is more performant than another and employ that unless there's a good reason not to. You may have map.flatten on an array that starts out with ten items when you write it but later grows to 100k. Why not take the potential performance gain? I think what you're missing is that these are just supposed to be little habits that you can remember which take the same amount of time to write as the unoptimized versions. They're just little freebies, not necessarily things you'd go back and fix later. Memoization is very similar. I tend to memoize everywhere it will return the same value on each call since it's usually pretty much free.
Most of this is perfectly known to anyone, who learned Ruby from Project Euler. But anyway nice to have it in the form of nice slides.
Most of this *tricks* aren't so hard and aren't making code look worse.
When not logged in, show counts of apps that are affected by the CVEs. Tons of gems have had CVEs in the past, that information alone isn't very useful. Also, could the people downvoting me stop please? I'm trying to give feedback. The downvote button is not the "I disagree" button.
&gt; Most security apps will tempt the unauthenticated users with "We found X critical vulnerabilities in Y repos. Just showing CVE counts per gem doesn't adequately communicate the risk. So, what was this about then? Were you not referring to Hakiri? &gt; show counts of apps that are affected by the CVEs. What do you mean? Show how many apps are affected by a particular CVE? How is that helpful? &gt; Tons of gems have had CVEs in the past, that information alone isn't very useful. You are right it's not. But Hakiri doesn't do it. It shows vulnerabilities for *current* versions. It's sort of the point.
Sugar is the exact point of ruby. Just ask matz
yea, thats kind of my point, if you are using loops instead of each and blocks, and worried about performance, I think you are using the wrong language
&gt; I really wish I saw the talk because I think it's getting interpreted a little wrong. Yeah, really! Slides like these aren't very useful without the guy speaking. Slides are a medium specifically designed to give you a quick snapshot of what the guy is about to talk about in much more depth. They are explicitly NOT designed to convey all the information in the talk. I bet there was a good chunk in there about using profilers that we missed. EDIT: [I found a really similar talk on youtube.](https://www.youtube.com/watch?v=FIgFnGM52C8)
I realize that 50% of the post here is about ruby slowness.
Thanks, right on. Your post at https://www.coffeepowered.net/2013/08/02/ruby-prof-for-rails/ is super helpful. If anyone is doing profiling of real apps to identify optimizations like this in frameworks that will make a difference, I would definitely encourage them to share their findings. While there's a chance of mis-interpretation, there's also a chance of mis-interpretation by just sharing microbenchmarks, and I think the more transparency and complete information, the more it helps us all learn how to optimize effectively and understand optimization and effect on actual 'business' performance. 
This patch helped a TON on my production app running on Heroku. The dip is where I deployed the patch. You can see response time go down and swap memory get cut in half: https://www.dropbox.com/s/vjs36emykfseh8x/Screenshot%202014-09-20%2000.30.33.png?dl=1 Granted, I should have cut down on puma workers before this point, but still the results are impressive. I highly encourage you try it.
that dashboard looks really nice / custom or ?
You'd be surprised how bad many people are at writing good benchmarks.
Correct, if you want speed just use x86 assembly. This is the closest to the ~~bear~~ bare metal you can get without hanging yourself.
It's a new thing on heroku. go to https://dashboard-next.heroku.com. Click on your app, then click on the "metrics" tab. It also shows you an aggregate of your application errors. All of this info is aggregated from your logs.
I should have known :) the hexagon icons reminded me of something. Very nice!
Sure, a game board plus movement logic is complex enough. POODR = Practical Object Oriented Design in Ruby 
Well, this type of optimization is only relevant if you're running the code in question many times. Writing all your code in Ruby, then making critical parts of it ugly for the sake of performance still means most of your code is idiomatic. There are times where you need all the performance you can get, all the time, so Ruby is not the right language for that, but sometimes, you just need acceptable performance in a small chunk of code.
Well, the other tricky part is nearly all of his example pull requests were against general purpose tools. Even if we use the same gems, your application is extremely unlikely to have the same peformance profile as mine. I've submitted performance patches for things many would consider a premature optimization, but absolutely were a problem for me (more a death by 1,000 cuts type situation). As a higher level abstraction, I think gems and frameworks should strive to be as fast as reasonably possible even if it makes the internals messier because of the lack of specialization the receive.
I like to use 'parallel' for a quick boost of speed (where applicable). it's sugary too!
`current_user` refers to an object, likely `User` instance. You access the class/class instance from within one of its methods using `self`. Such as: def is_friends_with?(user) puts "I am #{self.inspect}" end The correct nomenclature is method, not function. Read up on the difference, as that may give you a better understanding. See [here](http://phrogz.net/programmingruby/tut_classes.html) for a basic guide on Ruby classes/objects.
self is what you are looking for something like this maybe? def is_friends_with(user) return self.friends.exists? user end
Look into [self.](http://rubylearning.com/satishtalim/ruby_self.html)
Nope. Volt is number 1.
C will be faster though.
mmm. philosophical ruby.
New version released with that functionality: http://thomasleecopeland.com/2014/09/18/olde-code-finder.html Thanks for the idea!
So others are right about calling self to access the current_user, but in Ruby you don't actually need to call self all the time. def is_friends_with?(user) friends.include?(user) end would be identical to def is_friends_with?(user) self.friends.include?(user) end
This is really the best answer. When you call an instance method, you are already operating within the context of the object that called it, so from within *is_friends_with?* you have access to all same public methods you could call on an instance of User. In addition to what /r/Lucky_Chuck said, this is also true: current_user.is_friends_with?(user) def is_friends_with?(user) friends.include?(user) end ...is also identical to this: current_user.friends.include?(user) Also, I hope you're considering Neo4j for this. Graph databases are perfect for social networks. Check out [Neo4j.rb](https://github.com/neo4jrb/neo4j), make sure you use a release candidate for 3.0.
Congrats on your high goal, because there is no better way of learning programming than actually doing it. But as I see it, you are new to object-oriented programming. I suggest you to read some entry-level articles on OOP, or OOP in Ruby, like [this one](http://www.tutorialspoint.com/ruby/ruby_object_oriented.htm).
&gt; Type inference is something that Ruby and Objective-C have. Huh? How does type inference make sense in a dynamically typed language?
Temet nosce.
If you want real time you'll need to look into using sockets. You could even use the http class and set up a small webserver to simplify message structure. If you can settle with near real time but with a slight delay you could use a message queue. 
Would you mind to give a little more info about both? are they relevant when both instances run on the same machine?
For something pretty simple, you could use [drb](http://www.ruby-doc.org/stdlib-1.9.3/libdoc/drb/rdoc/DRb.html) which provides an RPC-like interface between programs.
Thanks. I learned oop with Python and understood it. Perhaps it was just a long night and I forgot a lot. But I appreciate all the advice. 
FYI: More Docker than Ruby but it's still a great talk.
Will take a look at when you set inddentation to two spaces and remove that line spacer.
UNIX way would be to create a pid file for a long running process and to trap USR signals. Thus you will be able to use standard tools to send events to your running script. MPD opens tcp socket. Some use dbus. Some use unix sockets. Up to you.
Enumerable doesn't define an `each` method, it uses the one defined in the class it was mixed-in: &gt; The Enumerable mixin provides collection classes with several traversal and searching methods, and with the ability to sort. The class must provide a method each, which yields successive members of the collection. (see [docs](http://ruby-doc.org/core/Enumerable.html)) 
Nice. However, just because you can cram it all onto one line, doesn't make it a "one line" program in my optics. A line is 80 characters. You used 700. 
In ruby, "functions" are called "methods".. always. You used both words so I'm a little confused but yeah. 
If you're just looking to signal the running app rather than passing in state, use UNIX signals. Signal.trap("USR1"){do thing}, Process.kill("USR1", pid_of_running_app), where the PID is stored in a file (usually in /var/run). Otherwise, ZeroMQ is a nice lightweight way to do IPC.
It doesn't count if you use semicolons.
Sorry to confuse you. I meant methods.
Thanks for mentioning that. I knew that, but also made each so that I "got it" from floor to ceiling. It does look like I think Enumerable includes #each, doesn't it? I'll change that. I mostly did this to get practice with blocks, and to become familiar with things that are new to me in Ruby. But if I'm leaving it up on github I should make it clear that I know that Enumerable needs each to exist outside of itself. Thanks.
OK, I'll do that as soon as I'm home. Looking at it now it's difficult to follow. Thanks.
To whet your appetite try typing puts RUBY_VERSION Then hitting Run. There's a full tutorial in the Help section
Why not use JRuby? That would be my first question. Looks interesting!
C extensions?
In methods like .any?, you can end the method early by doing like self.my_each do { |x| return true if yield(x) } false Instead of iterating through all of them, setting the value to true, and returning the value at the end, just return true (and stop the loop) when there's something there. If there's like 200 elements, and the first one would set it as true, you can skip the remaining 200 by breaking on the first iteration! Have you tried that approach and it didn't work? Let me know; I haven't really worked with blocks/yielding!
I haven't been able to compile it :-(
interesting 
I like JRuby but the start-up time is just too damn high :-)
Yeah is still really early ...
On the website, the audio samples don't work on Firefox (30, Ubuntu) ... That said, I don't care; this is really cool. Messing about with the SID on my C64 was what got me into coding, I'll be sure to check it out.
Can't argue with that. But it's only a pain during development. Nailgun helps alleviate most of it. I stopped using JRuby in development purely because of the start-up time.
What about them?
You can't use them with jruby
Sorry, I hope I didn't crush your spirit. Keep trying!
So? There are just as performant equivalents on the JVM. Not having C-extensions isn't really a downside unless you heavily rely on C-extensions. Most gems that do already have alternatives.
 1. this subreddit isn't that bad for stuff like that. maybe /r/learnprogramming or /r/learnruby 1. maybe not what you're looking for, but I wish I read the documentation more than than looking up solution on stackoverflow. reading the docs is harder at first but then helps a ton more in terms of general comprehension. git is great, so is bundler. 1. Git is the actual backend. github is just where you upload your project from your local git. It's really useful and isn't that hard to set up. Just get in the practice of simple committing. The minimal you need is really: 1. git init 1. git add -A 1. git commit -m "commit message" if you want more, learning how to upload to github is great to show off your projects and makes getting feedback easier. If you ever want to start a big project or join some projects, visit /r/progether or visit our irc at #reddit-progether at freenode. We don't have any active ruby projects right now, but we could provide some basic help if you needed it.
welcome 1. I've seen some of these types of posts but I'd recommend something like [Stack Overflow](http://stackoverflow.com/) 2. You didn't mention what kind of OS youre running but you should checkout the Tools section on the far right. 3. Github is a online service that hosts public (free) and private (paid) git repositories and tools. Whether or not you want to use github with your git repos is completely up to you, but I would definitely recommend pushing up your code bases to some external source in case you have computer failure. In regards to just git, I'd recommend it for larger projects or anything you want under version control. 
Is this a ruby DSL for controlling the Supercollider synthesis server? :o
Cool, thank you for the tips! I will definitely check out Stack Overflow. The more I poke around with Github, the more it makes sense to use no matter how small the project. Since I'm basically flying blind when it come to programming (as in, I'm making shit up and seeing if it works), it would be good to have some version history to see what I've tried already or revert back to something I liked better.
&gt; maybe not what you're looking for, but I wish I read the documentation more than than looking up solution on stackoverflow. Seems like a good idea. Since I didn't know about Stack Overflow's existence until a few minutes ago, I have actually been referencing ruby-doc.org for a lot of things, especially when it comes to the terminology of the language.
`play 50` and lower doesn't sound good -- it almost doesn't sound at all. Is it ok? Mac OS. P.S.: someone explain me, why should I use `define :foo do` instead of `def foo`
Excuse my ignorance but what is the benefits/reasons for coding audio like this as opposed to using things like garage band etc to create music? 
I fixed it, if you still have time to take a look.
Oof, I had a bad feeling about that inject. How do things look now?
Wow. That's way more Ruby then what I had. I mean, why on earth am I looping like I am? Thanks for the time you spent on this. Much work still to be done.
So I'm in the process of getting everything setup. Can you tell me what the PIA client is or where I can get it?
OK, so this solves the problem I had, which was if a symbol was the only thing passed. I went with a case, which seemed cleaner than what I had (even if it worked), but still less concise then what you have.
[Nope](http://en.wiktionary.org/wiki/whet)
Pry can be very useful (http://pryrepl.org) for getting information about a class or method, or for trying things out before putting them in your program. IRB serves the same purpose but is less powerful. Also, even if you don't use git to track your projects, it is useful to know enough to check out ruby projects, because it opens a whole world of free examples for you. I'd also advise you to, once you get the basics of writing projects down, to spend some time reading source. Its a bit of a different skill from writing code, but I've been coding professionally for 15 years and I still learn things every week. http://rubyquiz.com is an excellent place to start and github serves as a much much larger (though less well explained) repository of code. Good luck and stick with it! Its a rewarding hobby.
Besides being awesome? Algorithmic composition and the emphasis on live coding/performance. That's not something you can do in most DAWs (like Garage Band). Ableton Live being a notable exception.
There's also irc ! I use textual but there are many irc clients you can use. Come hangout at #reddit_ruby and ask away !
The rails guides are a good start for rails. Codeacademy for ruby is a good start on the language. ruby toolbox to look for popular gems (as a rule, google first and see if it exists, it probably does). Tools and such wise, it's a bit all over. The tools links have the biggies, RVM (though chruby is popular too) for managing ruby versions, and Bundler for managing gems (same as composer, or npm). If you're just starting out you don't need to worry about RVM or such, though it can make setup easier depending on what kind of OS you're running. Current stable ruby is 2.1.3 which is perfectly fine for use, Ruby is fairly backwards compatible and most code examples you'll find will be just fine. Unrelated note: if you're looking, [we're hiring](https://www.covermymeds.com/main/careers/apply) remote software developers. Our software is a mix of PHP/Python/Ruby and moving more towards Ruby, we're looking for either people familiar with Ruby or experienced web devs who are interested in learning Ruby. 
Thank you for the tips and encouragement! I'm 27, poor, and switching careers, so it's been an uphill battle so far haha. Hopefully I'll be professionally coding in a couple years myself.
No problems other than Guard not working. Everything else work like a charm.
I dont control my desktop - IT SOE does. And that's ok, cause MRI and JRuby dev works fine in windows.
It is indeed a DSL but it also bundles a full version of Ruby. You have all the Std Lib and control structures to go at when coding pieces.
For books I'd recommend: [Practical Object-Oriented Design in Ruby](http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330) [The Rails 4 Way](http://www.amazon.com/Rails-Edition-Addison-Wesley-Professional-Series/dp/0321944275) - Good for after you've covered the basics of rails. 
Can we use it with just a text editor and scsynth? I'm interested in the language, but not the educational IDE
On the play 50 thing, I'm guessing you're listening through laptop speakers? Use some headphones and it should come through load and clear. The issue is that the smaller laptop speaker can't reproduce those lower frequencies very well. That's not such an issue when listening to most music because the high overtones help us "fill in" the lower frequencies even though we can't actually hear them! http://en.wikipedia.org/wiki/Missing_fundamental The default synth in Sonic Pi is a sine wave which has no overtones - try typing use_synth :saw above play 50 and you'll be able to hear the difference. With define :foo, I'm not 100% sure but I'm sure Sam Aaron has his reasons...
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Missing fundamental**](https://en.wikipedia.org/wiki/Missing%20fundamental): [](#sfw) --- &gt;A [harmonic](https://en.wikipedia.org/wiki/Harmonic_series_(music\)) [sound](https://en.wikipedia.org/wiki/Sound) is said to have a __missing fundamental__, __suppressed fundamental__, or __phantom fundamental__ when its [overtones](https://en.wikipedia.org/wiki/Overtone) suggest a [fundamental frequency](https://en.wikipedia.org/wiki/Fundamental_frequency) but the sound lacks a component at the fundamental frequency itself. The brain perceives the [pitch](https://en.wikipedia.org/wiki/Pitch_(music\)) of a tone not only by its fundamental frequency, but also by the periodicity implied by the relationship between the higher [harmonics](https://en.wikipedia.org/wiki/Harmonic); we may perceive the same pitch (perhaps with a different [timbre](https://en.wikipedia.org/wiki/Timbre)) even if the fundamental frequency is missing from a tone. &gt;==== &gt;[**Image**](https://i.imgur.com/Ua8oPRZ.png) [^(i)](https://commons.wikimedia.org/wiki/File:Missing_fundamental.png) - *Missing fundamental \(A 55 Hz\) and harmonics \(divisible by 55\). 55 is the greatest common divisor of the frequencies of all harmonics.* --- ^Interesting: [^Psychoacoustics](https://en.wikipedia.org/wiki/Psychoacoustics) ^| [^Virtual ^pitch](https://en.wikipedia.org/wiki/Virtual_pitch) ^| [^Fundamental ^frequency](https://en.wikipedia.org/wiki/Fundamental_frequency) ^| [^Pitch ^\(music)](https://en.wikipedia.org/wiki/Pitch_\(music\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckp591v) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckp591v)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I like to think of it by comparing Garage Band etc. to Excel. Excel is an incredible tool and it allows lots of people to write simple "programs" for their own purposes. That said, we as programmers know there's a big difference between the power of Excel and the power of a good programming language (like Ruby). You can make lots of amazing music in Garage Band but because it's a user interface, there's also a lot of music that you can't express easily. Take this short Sonic Pi program: note_seq = [-1,1,6,8,9,1,-1,8,6,1,9,8] note = -&gt;(x) { play (63 + x), release: 0.2, pan: -&gt;{rrand(0.4, 0.6)}, decay: 0.01, attack: 0.005, amp: 0.4 } in_thread { loop { note_seq.each {|n| note.call(n); sleep (1.0/6) } } } in_thread { loop { note_seq.each {|n| note.call(n); sleep 0.1672 } } } It makes a "phasing" piece of music a bit like the works of Steve Reich. The two loops fall slightly out of sync with each other over time and new patterns and rhythms start to emerge. I'm not saying its the greatest music ever made, but it is an example of something you wouldn't naturally make in Garage Band (or Ableton or whatever). Code is a powerful way to create music and up till now hasn't been properly explored because of barriers to entry being high (niche languages, having knowledge of synth design and coding). That's why I think Sonic Pi represents a step forward. It's a real world language and an approachable way to experiment with coding music.
updated work: http://researcher.watson.ibm.com/researcher/view_person_subpage.php?id=5206
If you want to make interesting music that is out of the box, then there is better ways to do it than manually pressing keys on a keyboard. The Figure app for iOS, for instance, makes you forget about which key you are playing and makes you focus on the rhythm. The sonic pi seems excellent for generating sounds and sequences way outside anything you could ever imagine with a keyboard and a sequencer like Garageband.
Thank you, This makes a lot of sense. The idea of writing music like this seems really nifty Especially for things like battle music in games where I would assume you could procedurally generate music live and dependant on visual stimulus adding to the suspense of horror games or the excitement in battle that isn't just a track that fades in but rather one generated out of the environment. 
As you said there are plenty of resources for beginners, but not so much for devs with experience in other languages. Here's what I would recommend if your goal is to do web development in the near future with Ruby on Rails: - You probably know what an array, a hashmap, an object and a switch statement is. ['Learn Ruby in Y minutes' is a nice overview of how all this is done in Ruby](http://learnxinyminutes.com/docs/ruby/). - Read [Agile Web Development with Rails 4](https://pragprog.com/book/rails4/agile-web-development-with-rails-4) and find yourself a nice project to work on. This book also covers best practices and tools that are mostly built into or closely related to Rails. - For the quick overview of some good libraries and tools, take a look at [Railscasts](http://railscasts.com). Some episodes might be outdated, but all of them are really well produced and helpful. - When working with Rails there is *a lot* of magic going on, especially when you have a PHP background. That might be irritating at first. [Metaprogramming Ruby](https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2) does not only explain how you can use Metaprogramming to your advantage and not shoot yourself in the foot. It also explains the Ruby object model quite detailed. - After the first wave of excitement, you'll probably run into problems. Huge methods, weird callbacks and checks. I recommend to read [Confident Ruby](http://www.confidentruby.com) which explains how you can use Ruby's flexible and object oriented nature to your advantage and tackle these problems. - [Ruby Tapas](http://www.rubytapas.com) by the same guy, Avdi Grimm, is an excellent resource, too, if you want to dive deeper into Ruby (without Rails). All these resources don't try to explain basic programming principles, but they will explain the important parts of development with Rails and Ruby.
How is "Tell me how to learn Ruby" the "current status of Ruby as a language"?
I really like POOD as well!
I still think the lessons at [RubyMonk](https://rubymonk.com/) are outstanding. You can start off easy but eventually land in some very advance topics that are [somewhat] specific to Ruby.
This is very helpful, thank you, I'll give it a go. 
Come up with a pet project and implement it. That's how I started a few years ago. It's hard to learn "The Right Way" from books or articles. Just code, you'll face real world problems, and then find real world solutions on Stack Overflow or Google.
To get comfortable with ruby syntax - beyond the beginner level, here's one approach that worked for me: 1) Study the source for the ruby libraries. They are right there on your machine and they are a good source of ruby programming idioms and syntax. 2) Learn to use the ruby debugger thoroughly. Learn how to step through code. Learn how to set breakpoints. Learn how to use watch expressions - and then try to step through the library code. 3) Some books which i found especially useful are - The Ruby Programming Language - flanagan and matz ( the creator of ruby ) - The Pickaxe - The Ruby Way ( hal fulton ) - Eloquent Ruby - Design Patterns in Ruby - Metaprogramming Ruby 4) Also check out the source to the many ruby projects that litter github, rubyforge etc. Clone a popular git repo ruby project, and try bug fixing, writing tests, and committing changes to the source and create a pull request to send to the project maintainer. Hope that Helps.
Why do you recommend it over codeschool? Just curious.
Well, codeschool costs money for one.
Here's a chart I created with some resources for learning ruby: https://www.learneroo.com/modules/61/nodes/337
Learn english before you learn a programming language.
sure -- but aside from that? (and the beginning ruby course is free)
I converted a project that had over 50 gems from MRI to JRuby and had NO TROUBLE finding alternative gems (around 10) for the ones that used C extensions. So yes, lack of C extension support is no argument unless you heavily rely on C extensions, as in _custom_ modules you've built yourself. Have you used JRuby for an extended period of time? I'd love to know about your actual experiences with it and not your opinions.
Prepare an empty Set to track known email addresses. Read the file line-by-line, adding email addresses to the Set as they're encountered. Return the Set size. https://gist.github.com/duncanbeevers/d6324ff03bc30a2d2cb6
Try the railsguides and the rails source code
Check out [Ruby Tapas](http://www.rubytapas.com/)
Railsguides is what you need. Also have a quick read of the Hartl Tutorial. You probably won't benefit from actually doing it but reading it will get you in the right frame of mind as a starting point.
Sweet. Thanks for the Hartl suggestion.
railsguide looks like what I need. Thanks!
Indeed. Just started a different one for a real on-topic discussion. https://www.reddit.com/r/ruby/comments/2h5m8f/current_status_of_ruby_language_the_real/
Ruby is still going strong in the DevOps field: puppet, chef, logstash, etc.
The beginning Ruby course on codeschool is pretty bad imo
My points: 1. Ruby moving into the browser next to JS, ( dart, opal, asm.js,). 2. Ruby 3 bring a vm, concurrency. 3. A revolutionary performance jump similar to what V8 did for JS. 4. Or a bigger success than Rails (complementing it)
You can have git log return only the emails: git log --format="%aE" Then just remove the duplicates and count the lines: git log --format="%aE" | uniq | wc -l | cut -c4- In ruby it's much the same idea: p File.read('log.txt').scan(/^Author:.+&lt;(.+)&gt;$/).uniq.size
I second the suggestions for the Rails Guides - they're quite good. I also really enjoyed the latter portion of "Agile Web Development With Rails," a book that's almost canonical. The initial chapters of "Agile Web Development With Rails" were somewhat frustrating/redundant to me - they're a step-by-step walkthrough in which you build and iterate a simple ecommerce site for an imaginary client. But they don't really explain the technical *why's* of why you're doing anything. But the latter chapters of the book are a very good overview of Rails, sort of like the Rails Guides but a bit more in-depth. I can't believe I never did the Hartl tutorial... going to check that out now.
[This](http://imgs.xkcd.com/comics/new_pet.png ) is Python and not Ruby... But we can always `require 'soul'`, can't we?
https://github.com/mperham/sidekiq/blob/master/examples/upstart/manage-one/sidekiq.conf https://github.com/puma/puma/blob/master/tools/jungle/upstart/puma.conf
[Original Source](http://xkcd.com/413/) **Title:** New Pet **Title-text:** ONE LAPTOP PER HAMSTER! [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=413#Explanation) **Stats:** This comic has been referenced 11 times, representing 0.0319% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_ckpomdp)
If installing a dependency is an option, on non systemd systems use something like [Monit](http://mmonit.com/monit/) or [Daemon Tools](http://cr.yp.to/daemontools.html). If you are building your own daemon, it is probably going to be easier to use one of these than to write your own init script and juggle pids and stuff yourself.
Learn `xargs -0` for files with whitespace issue. Replace `rm` with `echo` for dry run. `xargs` makes a lot lot more than just prefixing files.
It' possible to implement all, any, none, count reusing my_select. Try to dry it down. And indentation is still far from being perfect. Try splitting inject into several methods, extracting the common parts.
That's a good point about my_select. I see how that could be done, but didn't think of it the first time. I'm not sure why the indentation is still so far in. It looks far more indented on github then it does when I view it in my editor, which is Sublime Text 2. It's two taps of the spacebar in there, but it looks like two tabs on github. I'll look into it. Thanks!
&gt; because websites and web apps are more visible than other uses of ruby, it's easy to think that there isn't any use for ruby behind the scenes Yes, indeed. In fact, I even checked which cloud providers used Rails and which Django, but then refrained to post it as it's not valuable at all. Still, it's quite visible that Python dominates open source virtualization software. Just wondering if there are any areas that are dominated by Ruby, except for web apps.
&amp;gt; Writing simple scripts in Ruby is much more pleasant than writing them in Perl IMHO. I agree. And more pleasant than Python too. My Ruby adventure started 4 years ago with system scripts.
&gt; There's qmlruby being developed, which can build a bridge between Ruby and Qt Quick. 1 commit in the repo, no kidding.
I'd really enjoy writing Ruby for web browser. I haven't had a chance to use Opal, anyone used, is it good?
Wouldn't a hash(0 initialized) be easier with the author as key and for ecery match increment the value by one?
I would say (as others) the devops space is pretty firmly in the ruby camp, two of the biggest tools in the area (Chef and Puppet) are both Ruby. There's also tools like Vagrant, which isn't front-facing, but is an insanely critical component of my devops stack. In terms of DSLs (both real and glorified-ddl), I can't think of a better stack, but DSLs are a pretty niche area still. I'm sure there are other entries, but I think Ruby really excels at being a jack-of-all-trades sort of language. Python really sticks in a few areas, but doesn't rise to the level of being truly generic-use-it-anywhere like ruby or perl.
rails-api gem is not the only option. Have a look at Grape https://github.com/intridea/grape Rabl https://github.com/nesquena/rabl Thus far I have built my APIs with Rails controllers and RABL templates. Another solution is create a series of methods in your models that serialize to a hash. This is then a data tranfer object (dto) A top level model can call a custom to_dto method that then calls its children to produce the desired hash structure. Then encode that as JSON and pass it back as the response. This requires more effort but requires no additional dependencies. for example a Post model might have a to_dto method like this def to_dto { title: name, body: body, comments: comments.map{|comment| comment.to_dto } } end Comment model might have a to_dto like this def to_dto { body: body, author: author, } end you can always create all the dto methods you need with as much or as little data you choose to expose. 
True, echo-ing may be a better option. Just got interested in the script I saw and made it.
Hey Tom, there's another approach that may be a bit more clear. You can just pass Struct a block: Team = Struct.new(:players, :coach) do def slogan "A stitch in time saves nine" end end Everything in the block is defined in the scope of the newly created struct.
Can you show us some input and expected output? An example of some kind?
Hmm, I could give you the link to the page I am learning it on. http://ruby.learncodethehardway.org/book/ex32.html
I think you've found one particular area that Ruby isn't well known for. I do plenty of virtualisation, but it's all VMware based hadn't heard of any of the technologies you've mentioned. Scripting there is all Powershell. There will be plenty of OS applications which will always be C or C++ - I can't see a serious competitor to nginx or OpenSSL ever being done in Ruby, Python or any other similar language. That doesn't make Ruby dead. I used to do mostly Perl. I know a dead language when I see one.
Alot is listing yet, but changing. He mentioned changing or adding stuff to a array, thats whats confusing.
Haha, wow. Alot simpler then I thought. Thanks cocoa, will really help.
Good response, although I do just want to point out a couple errors. array = [ 1, 2, 3 ] array &lt;&lt; 5 #=&gt; [ 1, 2, 3, 5 ] not [ 1, 2, 3, 4, 5 ] Also you've got an extra ' in your first string array.
Whoops, I should be more careful, thanks.
You might want to take one more look at the first part about adding to arrays. I added an extra value, a `4` in the `3` index of `array`. There was also a `5` that should have been in index `3`.