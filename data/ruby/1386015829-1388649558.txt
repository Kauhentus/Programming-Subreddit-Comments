I took a similar path. I started with plain Ruby and quickly (2-3 weeks later) created my first Sinatra app. This allowed me to underatand most of the differences between Ruby and other languages, and i was able to create a quite cool website. After 2 months, i started to use Rails. This was a really tiny step after having mastered Sinatra, and it all just made sense. So, I would recommend you to take some intermediate steps. It helped me a great deal and going to the next level was always quite easy.
Thanks, but still you too won't suggest digging into Rack? It seems too ambitious for a beginner right?
or if you don't have ruby installed, python -m SimpleHTTPServer 
If you're starting up a one-off thing, that's fine. If you're doing something expected to get hammered, such as a LAN party server, use `python -m SimpleHTTPServer`. [Benchmarks](https://gist.github.com/colindean/5930096). Python completed more than twice the number of requests in the same time period. Note that I did not test concurrency beyond what `ab` did.
You should submit this some how to be on www.ruby-lang.org
You should consider making an SVG, with links to documentation for each class.
Thanks for suggestion, I have sent a diagram to the webmaster of Ruby website.
+1 just open an [issue](https://github.com/ruby/www.ruby-lang.org/issues)
Done
The book recommends RVM. If I am not worried about using multiple versions, any reason not to just use homebrew?
I don't think it would be too ambitious, but it's maybe not on the direct path between learnin Ruby and creating a Rails app. It's more like an extra. That's my personal experience, but I think I had no benefit in getting used to the Rack interface. Sure, it's a great opportunity to make up your mind and you can do really cool things with Rack. You can probably compare it to asking me whether I would learn to code a Ruby library at this point: yes, because it's great to learn new things, but no, because it's not too related to creating a web app.
I wonder how jRuby holds up
If you're going to handle a load, you'd use unicorn or something else more robust. ruby -run is meant for quick tests, etc.
Author here. You can find out more about the book at https://railsdeploymentbook.com, but I'm currently offering beta access to what I've already got written so far via the link in the post for 20$ off the final price of the book.
Or Node. 
I'm pretty interested in this (in fact I'm on your mailing list), but right now you're asking me for $20 without a sample chapter to read and an overview of what is done/is yet to come. I'm sure you can see how this makes me hesitate.
That diagram looks great. What did you use to make it?
Wow. Well done. This is great! Thanks.
I am interested in this, though I'm not yet sure if I'm interested enough to buy a book on it. So +1 for a sample chapter to 'wet the whistle' :) 
OT: I wish Confreaks had an RSS feed (even better, multiple feeds, by languages). Until then, I guess I'll just keep subscribed to their Youtube Channel.
Having recently gone through the learning process with puppet/chef/rubber etc. etc. I know there's definitely a need for this sort of book..... BUT it's going to need to be damn good and the problem, perhaps, is there are really TWO books that are needed (or that I need): the dumb guide to getting things done, and the in depth guide with the arguments and use cases as to when tool A is preferable over tool B. I'm not sure the two audiences could meet over a single book...good luck whatever, I'll keep an eye open. P.S. RVM and provisioning? *shudder*
This is the one that worked flawlessly, thank you! I'm sorry I'm replying to your post so late. I was wondering if you can explain a few parts that are confusing. I appreciate it, I'm still a noob at coding. wrong_hash.values.inject({}) { |acc,value| acc[value[0].to_sym] = value ; acc } Since the code prints out modified keys, how is that wrong_hash.values is used instead of wrong_hash.keys Is the ({}) after inject there because inject usually requires a value and you do not want to inject something predetermined? How does the following equal to **value** in **acc[value[0].to_sym] = value** when you are modifying *acc* with the first character of the values, I would mistakenly have used acc ; value
That's... amazing. Thanks!
Would love any help on tutorials of RecordRTC and Ruby. Any leads, can't seem to find much online with my search results.
It's a good toy project to build using Ruby. You'll want to read about the [reddit API](http://www.reddit.com/dev/api). Learn about the HTML verbs GET, POST, PUT, DELETE and how to submit them to a URI using Ruby. You can consume the API replies in JSON, so learn about JSON. Here is an example of [your most recent 25 posts in JSON](http://www.reddit.com/user/jd0098.json). You can play with that JSON directly from your browser in the JavaScript console. It's very easy in Chrome, and likely just as easy in Firefox. Here is a quick example. Hit the link to the JSON there, and copy and paste it into a variable: var json = &lt;paste data here&gt;; // Access the most recent post json['data']['children'][0]['data'] This returns Object {domain: "self.ruby", banned_by: null, media_embed: Object, subreddit: "ruby", selftext_html: "&amp;lt;!-- SC_OFF --&amp;gt;&amp;lt;div class="md"&amp;gt;&amp;lt;p&amp;g…lp :).&amp;lt;/p&amp;gt;↵&amp;lt;/div&amp;gt;&amp;lt;!-- SC_ON --&amp;gt;"…} which is a truncated version of the JSON for this very post I am reply to. Here is a very basic Ruby script that does the same thing: require 'open-uri' require 'json' open('http://www.reddit.com/user/jd0098.json', "User-Agent" =&gt; "example for jd0098") do |reply| json = JSON.parse(reply.read) p json["data"]["children"][0] end Note the User-Agent key to the open method. It's part of the [reddit API rules](https://github.com/reddit/reddit/wiki/API) that you: &gt; Change your client's User-Agent string to something unique and descriptive, preferably referencing your reddit username. Also, you're limited to one request every two seconds: &gt; Make no more than thirty requests per minute. Those are the most important rules to not break. Doing so can get you banned, so don't spoof a browser user-agent, or hammer the reddit site. If you want to do something more involved, and not bother implementing the sort of behaviour above yourself, there are existing reddit API wrappers in Ruby. See [this GitHub search](https://github.com/search?q=ruby+reddit+api) for some results. I believe that by far the most popular reddit API wrapper is [PRAW](https://github.com/praw-dev/praw), but it is written in Python.
So, all this is a bit new to me. I have looked into the reddit API, just not sure how to really use it. I'm not going to lie, a lot of that went over my head :/. I guess this is just something I'm going to have to learn. Do you know maybe a site or something that walks through an example of this being made (or something similar)? I know I still have a lot to learn, but I know if I keep working at this I can eventually build something like this I'm sure.
I'm not sure if anyone has done a writeup on this exact topic. If nobody else replies with one, I could possibly write one up for you later this week. Don't worry about not understanding it just yet. I only knew what to do immediately as I have only recently implemented a few Ruby scripts that consume the reddit API. We all learnt this kind of stuff at one point. As I suggested above, your first investigations should be into the HTML verbs GET, POST, PUT and DELETE. They are how you talk to a large number of modern web-based APIs. You may have read my post before I edited in the information about the currently existing API wrappers. You could just use those, and perhaps even read their source code to see how they achieve what they do. Another option would be to copy and paste that small script from my first post, and start modifying it. Call a different API method, pull out some different information from the resulting JSON, etc.
No problem! So if we look carefully at the requirements, as /u/bignothing pointed out, we really only need the values, we don't have to care about the existing keys (and who knows what Martha did to the keys; you so crazy Martha!). So our goal is "a hash with letter symbols as keys to represent items that start with their keys" and we have an existing hash with whatever as the keys, and the values we care about. So everything in ruby is an expression. That just means that everything is evaluated to a value. In this case [Hash#values](http://ruby-doc.org/core-1.9.3/Hash.html#method-i-values) gives us an array of strings. We then call inject on that resulting array. The [Enumerable#inject](http://ruby-doc.org/core-1.9.3/Enumerable.html#method-i-inject) method can be used several ways. The way I used it takes an initial value and a block: the initial value is an accumulator and is passed to the block on each iteration, along with the item from the array, and the block returns a value that's used as the accumulator on the next iteration. So we inject an empty hash as our accumulator wrong_hash.values.inject({}) { and for each item in our values array is passed into the block with the accumulator |acc, value| we set a key on the accumulator acc[ as the first element of the string value[0] converted to a symbol .to_sym and assign the value to that key ] = value then return the accumulator. ; acc } &gt;&gt; wrong_hash.values.inject({}) { |acc,value| acc[value[0].to_sym] = value ; puts acc ; acc } {:b=&gt;"banana"} {:b=&gt;"banana", :c=&gt;"cabbage"} {:b=&gt;"banana", :c=&gt;"cabbage", :d=&gt;"dental_floss"} {:b=&gt;"banana", :c=&gt;"cabbage", :d=&gt;"dental_floss", :e=&gt;"eel_sushi"} =&gt; {:b=&gt;"banana", :c=&gt;"cabbage", :d=&gt;"dental_floss", :e=&gt;"eel_sushi"} 
I have some code that works (or at least used to work) with the Reddit API. I started building a gem for reddit a couple of years ago, but college got in the way, and I never got back to finishing it. I'll throw it up on github and send you a link later.
Thanks for this sage advice. I'm sure most people on /r/ruby don't have Ruby installed.
PHP is also the first language to offer the Salsa20 hash function! https://bugs.php.net/bug.php?id=60783
Nice read 
Could you possibly post the link on here so other interested parties can take a look? :)
Aye, I know; There's a chef recipe too. 97 open issues and not reported to work on my target OS, although there are workarounds. After lots of hair-pulling with the various ways to provision a base deploy with Ruby I found the route with the least stress was a source build (pre-built tarballs when reliable of course) while bootstrapping chef. If apps require different Ruby versions, provision a separate VPS. As said, I'd love a good book...
Is there a python script I can run to see if I have it installed?
Yep, here it is: https://github.com/michaeldever/reddit I can't confirm how any of it works anymore, last I remember it worked for pulling down comments/threads/user info etc., but it's been a while so some things may have changed.
I tried to jump into Rails and found myself not understanding what was going on. I was following conventions and it worked, but it limited me. Made reading other people's code difficult. I definitely recommend learning Ruby basics, then jumping into Rails... Then learning the advanced stuff (blocks, procs, etc). [Code school](http://www.code school.com) has some great courses on the advanced stuff. TryRuby is a good starter, but doesn't fill in the gaps in between the core basics, and their Ruby Bits series. I recommend a book on Ruby to fill that gap.
lol, point taken. i use far more ruby than python these days, but python -m SimpleHTTPServer is engrained in my muscle memory. 
I agree. I was exactly doing that till now to learn Ruby; though I am yet to complete [Koans](http://www.rubykoans.com); which I think helps a lot in that regard. Perhaps following is what I am behind: * What are a bunch of concepts/constructs that might have been utilised repeatedly in Rails/Sinatra, so that I can make sure I grasp all of that in pure Ruby in sufficient depth. * Help me deconstruct on the goal of understanding web development in depth. Perhaps to help me enumerate what all are the blocks that I need to go through. Specifically, networking concepts, HTTP, server etc in the purview of developing using Ruby. * Try to put the goal of making a functional web secondary and perhaps focus on the so called drier concepts.
I think I understand Ruby blocks and procs; also a bunch of other non-basic stuff. But, I have feeling, I need to understand how it would be work with something more basic; I am looking at Sinatra; or will dig to see if there is something even more bare bones.
I think it looks pretty good. Here are some stylistic things that most rubyists do, but not critical: @ram[@rm] = 0 if @ram[@rm].nil? # can be written as: @ram[@rm] ||= 0 * use a 2-space indent instead of 4 * leave the trailing () off of function calls and definitions with no arguments. Also, you shouldn't be calling `initialize` directly. It's called automatically when you call `Brainfuck.new`. 
Excellent work Yinut, I'll just suggest you use different colors to represent modules and classes in the Gliffy diagram -- they're almost indistinguishable with this monitor!
So what does ||= do? I'm guessing it assigns a default value if the current one is falsy. Also I have no idea why GitHub is using 4 spaces, my code has 2 space indentation. EDIT: Updated my code following your suggestions, also fixed the indentation issue. Thanks for the feedback!
an O( n^2 ) search is a super power?
Your language is not incomprehensible. I just meant that I wasn't sure if you actually meant learning Rack before Rails/Sinatra; I have not heard of something doing it in that order. Learning about implicit/explicit blocks is important but it can be learned independently of learning Rack and developing your own framework. IMO method_missing is not something a beginner needs to know. If you find yourself implementing it early on, you are probably using it wrong. There are better ways to handle the cases where you might use method_missing such as "delegation" and dynamically creating the methods at run time. Using method_missing hurts debugging since you cannot get a list at runtime or load time of the supported messages. The only way to determine the messages supported is to either 1) send the message or 2) query the respond_to? method which SHOULD correspond to method_missing, but in practice, a lot of developers forget about implementing this method.
You mean to use more intense colors? (as diagram obviously has different colors). I didn't make them more intense because on my monitor it is ok (IPS), maybe on TN matrix it is pale. I made more intense version for you: https://lh3.googleusercontent.com/-GiCyUdzzOTM/Up4ofqEGT_I/AAAAAAAAAn0/zboH7TJpsXI/w1530-h800-no/rubycoreobjectmodel.png
This: a ||= b is shorthand for this: a || a = b Here is a page with way more discussion on it and links to yet *more* discussions: http://stackoverflow.com/questions/995593/what-does-or-equals-mean-in-ruby
Hmm, I like the sound of this... I'm getting that same warm tingly feeling I got when I found out that merb was getting merged into Rails. Could just be the syphilis though...
This seemed inevitable. Bundler+rubygems is possibly one of the best package manager/dep manager i've ever used.
Unfortunately, they kept AR instead of merging Datamapper.
Really? You're the first person I've ever heard say they thought that was a good idea.
I use bundler with great success and I use rubygems with great success, and quite often I use them together. Why is this not a good idea?
I'm not sure how I feel about this. Bundler is pretty nice but some things like "bundle exec" feel like shit solutions to problems that rvm gemsets already solve more cleanly. I guess we'll have to see how it turns out.
I hear Datamapper is quite popularly used in Rails and going to give it a try myself soon, isn't it pretty easy to use datamapper rails if you elect to do so?
It is, it's just not the 'default'.
Use `binstubs`, and never have to do the `bundle exec` dance again.
Thanks :).
Yeah, I think I did see it after the edit. If you do have the time, I would love to see maybe a write up of exactly how to do this? Again, most of what you are saying is going over my head :/. But, again, I'm still learning this and I guess I'm at the point where I want to start building stuff. So, guess I will learn it through building stuff.
No problem. If you have any code to add to it, I'd love to get a pull request and see it pushed in the right direction :) I just don't have time myself at the moment.
'bundle exec' and binstubs are both symptoms of a deeper underlying problem. I don't use either, I use per-project GEM_HOMEs instead. Much less code.
I have `alias plz="foreman run bundle exec "` in my .bashrc. Then I just run `$ plz rails -s` or whatever.
I believe an easy way to put how the ||= is 'assign a value to a variable unless that variable already has a value' 
It's like the whole "I need a car" but "I also need a truck" so you buy an SUV and it doesn't really work great at being a truck while also getting bad gas mileage. Some things are better left separate. The whole ramming of merb down everyone's throat who uses rails is a big part of why there are so many people on Rails 2.3 who are like "Fuck. I have to re-write my whole app in order to upgrade."
That's basically what I use RVM for. It works great.
Don't use the dollar sign. At all. Websites use it as an indicator of a command line prompt.
Ah thanks!
And how do you do that?
rails pls go
&gt; some things like "bundle exec" feel like shit solutions to problems that rvm gemsets already solve more cleanly. People still type "bundle exec"? I haven't done so since 2011 (thanks, rubygems-bundler[1]), which was around the time that I stopped using RVM (thanks, rbenv). https://github.com/mpapis/rubygems-bundler
It's awful. AR has come a long way
type ruby if it works you have it installed
while we're at it, if you have node.js installed var util = require('util'), http = require('http'), fs = require('fs'), url = require('url'), events = require('events'); var DEFAULT_PORT = 8000; function main(argv) { new HttpServer({ 'GET': createServlet(StaticServlet), 'HEAD': createServlet(StaticServlet) }).start(Number(argv[2]) || DEFAULT_PORT); } function escapeHtml(value) { return value.toString(). replace('&lt;', '&amp;lt;'). replace('&gt;', '&amp;gt;'). replace('"', '&amp;quot;'); } function createServlet(Class) { var servlet = new Class(); return servlet.handleRequest.bind(servlet); } /** * An Http server implementation that uses a map of methods to decide * action routing. * * @param {Object} Map of method =&gt; Handler function */ function HttpServer(handlers) { this.handlers = handlers; this.server = http.createServer(this.handleRequest_.bind(this)); } HttpServer.prototype.start = function(port) { this.port = port; this.server.listen(port); util.puts('Http Server running at http://localhost:' + port + '/'); }; HttpServer.prototype.parseUrl_ = function(urlString) { var parsed = url.parse(urlString); parsed.pathname = url.resolve('/', parsed.pathname); return url.parse(url.format(parsed), true); }; HttpServer.prototype.handleRequest_ = function(req, res) { var logEntry = req.method + ' ' + req.url; if (req.headers['user-agent']) { logEntry += ' ' + req.headers['user-agent']; } util.puts(logEntry); req.url = this.parseUrl_(req.url); var handler = this.handlers[req.method]; if (!handler) { res.writeHead(501); res.end(); } else { handler.call(this, req, res); } }; /** * Handles static content. */ function StaticServlet() {} StaticServlet.MimeMap = { 'txt': 'text/plain', 'html': 'text/html', 'css': 'text/css', 'xml': 'application/xml', 'json': 'application/json', 'js': 'application/javascript', 'jpg': 'image/jpeg', 'jpeg': 'image/jpeg', 'gif': 'image/gif', 'png': 'image/png', 'svg': 'image/svg+xml' }; StaticServlet.prototype.handleRequest = function(req, res) { var self = this; var path = ('./' + req.url.pathname).replace('//','/').replace(/%(..)/g, function(match, hex){ return String.fromCharCode(parseInt(hex, 16)); }); var parts = path.split('/'); if (parts[parts.length-1].charAt(0) === '.') return self.sendForbidden_(req, res, path); fs.stat(path, function(err, stat) { if (err) return self.sendMissing_(req, res, path); if (stat.isDirectory()) return self.sendDirectory_(req, res, path); return self.sendFile_(req, res, path); }); } StaticServlet.prototype.sendError_ = function(req, res, error) { res.writeHead(500, { 'Content-Type': 'text/html' }); res.write('&lt;!doctype html&gt;\n'); res.write('&lt;title&gt;Internal Server Error&lt;/title&gt;\n'); res.write('&lt;h1&gt;Internal Server Error&lt;/h1&gt;'); res.write('&lt;pre&gt;' + escapeHtml(util.inspect(error)) + '&lt;/pre&gt;'); util.puts('500 Internal Server Error'); util.puts(util.inspect(error)); }; StaticServlet.prototype.sendMissing_ = function(req, res, path) { path = path.substring(1); res.writeHead(404, { 'Content-Type': 'text/html' }); res.write('&lt;!doctype html&gt;\n'); res.write('&lt;title&gt;404 Not Found&lt;/title&gt;\n'); res.write('&lt;h1&gt;Not Found&lt;/h1&gt;'); res.write( '&lt;p&gt;The requested URL ' + escapeHtml(path) + ' was not found on this server.&lt;/p&gt;' ); res.end(); util.puts('404 Not Found: ' + path); }; StaticServlet.prototype.sendForbidden_ = function(req, res, path) { path = path.substring(1); res.writeHead(403, { 'Content-Type': 'text/html' }); res.write('&lt;!doctype html&gt;\n'); res.write('&lt;title&gt;403 Forbidden&lt;/title&gt;\n'); res.write('&lt;h1&gt;Forbidden&lt;/h1&gt;'); res.write( '&lt;p&gt;You do not have permission to access ' + escapeHtml(path) + ' on this server.&lt;/p&gt;' ); res.end(); util.puts('403 Forbidden: ' + path); }; StaticServlet.prototype.sendRedirect_ = function(req, res, redirectUrl) { res.writeHead(301, { 'Content-Type': 'text/html', 'Location': redirectUrl }); res.write('&lt;!doctype html&gt;\n'); res.write('&lt;title&gt;301 Moved Permanently&lt;/title&gt;\n'); res.write('&lt;h1&gt;Moved Permanently&lt;/h1&gt;'); res.write( '&lt;p&gt;The document has moved &lt;a href="' + redirectUrl + '"&gt;here&lt;/a&gt;.&lt;/p&gt;' ); res.end(); util.puts('301 Moved Permanently: ' + redirectUrl); }; StaticServlet.prototype.sendFile_ = function(req, res, path) { var self = this; var file = fs.createReadStream(path); res.writeHead(200, { 'Content-Type': StaticServlet. MimeMap[path.split('.').pop()] || 'text/plain' }); if (req.method === 'HEAD') { res.end(); } else { file.on('data', res.write.bind(res)); file.on('close', function() { res.end(); }); file.on('error', function(error) { self.sendError_(req, res, error); }); } }; StaticServlet.prototype.sendDirectory_ = function(req, res, path) { var self = this; if (path.match(/[^\/]$/)) { req.url.pathname += '/'; var redirectUrl = url.format(url.parse(url.format(req.url))); return self.sendRedirect_(req, res, redirectUrl); } fs.readdir(path, function(err, files) { if (err) return self.sendError_(req, res, error); if (!files.length) return self.writeDirectoryIndex_(req, res, path, []); var remaining = files.length; files.forEach(function(fileName, index) { fs.stat(path + '/' + fileName, function(err, stat) { if (err) return self.sendError_(req, res, err); if (stat.isDirectory()) { files[index] = fileName + '/'; } if (!(--remaining)) return self.writeDirectoryIndex_(req, res, path, files); }); }); }); }; StaticServlet.prototype.writeDirectoryIndex_ = function(req, res, path, files) { path = path.substring(1); res.writeHead(200, { 'Content-Type': 'text/html' }); if (req.method === 'HEAD') { res.end(); return; } res.write('&lt;!doctype html&gt;\n'); res.write('&lt;title&gt;' + escapeHtml(path) + '&lt;/title&gt;\n'); res.write('&lt;style&gt;\n'); res.write(' ol { list-style-type: none; font-size: 1.2em; }\n'); res.write('&lt;/style&gt;\n'); res.write('&lt;h1&gt;Directory: ' + escapeHtml(path) + '&lt;/h1&gt;'); res.write('&lt;ol&gt;'); files.forEach(function(fileName) { if (fileName.charAt(0) !== '.') { res.write('&lt;li&gt;&lt;a href="' + escapeHtml(fileName) + '"&gt;' + escapeHtml(fileName) + '&lt;/a&gt;&lt;/li&gt;'); } }); res.write('&lt;/ol&gt;'); res.end(); }; // Must be last, main(process.argv); 
We use Sinatra for all our server-side systems primarily because it is lightweight and the conventions are similar to Rack. It's a very good web framework DSL.
Truth. Though I admire the *accomplishment* of RVM (when was the last time *you* wrote/managed 20KLOC of shell script?), my experiences with it were at best marginally survivable. RVM 2 *could* be sweeter than honey, or it could be really bumpy; I guess we'll find out in a year or so. :-)
DataMapper is effectively deprecated. It has not been maintained for [a long time](https://github.com/datamapper/dm-core) (note the "last modified at" dates), and was supposed to be superseded by [Ruby Object Mapper](http://rom-rb.org/), which as you can see does not seem to be under active development ("Status: coming soon"). That wouldn't actually even be a problem, if the current DataMapper code was in good shape, but there are some major problems with it. One huge issue is the lack of support for explicit eager loading. DataMapper 1.x tries to be clever about avoiding "N+1" queries by delaying the actual SQL call to the very last minute, and gathering information about which sub-objects you need from a relation in the mean time, but this often fails and results in suboptimal performance. Even when it works, it performs a second query instead of a join, which is less performant on most RDBMS's. In summary, the concept is good, but work is needed, and there is currently no viable competitor to ActiveRecord 4 that hits a comparable balance between abstraction and access to the innards when you need it.
To be fair, that situation still exists for people trying to upgrade from Rails 3.x to 4.x. The general issue is that Rails devs give very few shits about maintainability.
It also resulted in a very much improved rails infrastructure. 
I used to be an RVM user like you, then I took a broken shell function in the knee.
rails stahp
Yeah, you should be fine. This is a simple machine, Ubuntu should work well on it. After that you can setup RVM etc. and get running.
Rails development? I'd go with a MacBook Air 13". Amazing battery life, all the best rails apps and scripts and whathaveyou. Plenty of support since a ton of other devs have already dealt with pretty much any snag you'd come across and fixed it with their pretty much exact same computer. I know it's pricey, but it's worth it. OS X is pretty damn good. The machine is built like a tank. There's very little to break on it. the touchpad and shortcuts make a mouse obsolete. If you value your time at say $100/hr, which is modest for a mid-level freelance rails developer, and it takes you an extra 4 hours to setup your ubuntu/windows machine, then that's like spending an extra $400 on your laptop, no? I was a windows/linux user for years. I ended up with a company macbook because i had to write some applescript (looong story) and can't imagine going back. it was the 2011 bare bones base model and served me well until i bought my own when the 2013s came out. 
Why bother with a new machine? Install Virtualbox, make an Ubunbu VM, setup shared folders, and you're 90% of the way there. It's a little fiddly with needing an ssh session to the VM on occasion. Also buy an SSD for your existing laptop with the money you haven't spent.
Thanks so much for the response. I've been seriously thinking about getting a Mac. Do you have issues developing on Mac and then deploying to non-Mac Unix servers? (A few people appear to have some issues with it on the forums I've been reading..... because the internet is anonymous its hard to tell how qualified a person's opinion is) I've been deploying on Heroku.... but its time to switch from Windows to something else. Do you find the screen to be really small? Or do you use an external monitor? Thanks for your response!
A ruby games sounds amazing, and I would absolutely like to participate. But a little more details might help me to understand what exactly do you mean by "game". Is it a browser turn-based-strategy game? Is it a desktop real-time city planing simulator?
I'd like to start simple, like with a Mob Wars clone or your generic RPG clicker. I already have such engine for Facebook, but it would be interesting to implement it with Unity so the game can reach multiple platforms.
Cool. What is the connection between Unity and ruby? Last time I've checked unity is Mono-based.
Oh, i thought Unity could be used with a Ruby game to publish on multiple platforms. Maybe we should keep things super simple first and work on FB and then take it from there.
I personally haven't played Mob Wars, but it sounds great.
It's like Mafia Wars or similar games like it. If you have FB i can link you to a couple using the ruby game engine i have.
RoR isn't exactly a framework for making games. It's a framework for making database-backed web apps. If you want to make HTML5 games, Javascript, Coffee-script, Opal.rb or WebRuby is what you want to use. If you want to make Ruby games, rbSFML is the ticket, or embedding mruby in a C++ game...
Wow, thank you so much!!!! I'm definitely going to get a Mac. Having used different operating systems and different languages, I understand your point not to "Windowsify" it - that instead I need to learn to do things the Mac way!! I'll let you know how it goes!!!
That sounds super!! Thanks very much. Did you upgrade to Mavericks? How much of a difference does it make to run Mountain Lion vs Mavericks when it comes to Rails development? I think I'll get something with Mavericks... probably a bottom of the line MacBook Pro.
&gt; Do you have issues developing on Mac and then deploying to non-Mac Unix servers? I've been doing this for years and had no problem with it. It's pretty much the norm in the Rails world. The only significant difference is the installation of software dependencies or server components, and in most cases that turns out to be a brew install on Mac and an apt get (or yum install) on Linux. The Air is a very nice machine. I definitely second the recommendation. edit: to explain the "brew install" thing, in case you haven't run across it yet, see here: http://brew.sh . It's a must-have. The Thoughtbot thing mentioned by afxjzs installs it.
I recently got this laptop for Ruby on Rails development. I have an Ubuntu VM with Host Only Adapter to host the rails development environment and use samba to create a network share that I use to do the local development on the host. I use Sublime Text 3 on Windows as my editor of choice. http://www.newegg.com/Product/Product.aspx?Item=N82E16834152443
i develop on macs (iMac desktop and Air laptop) and deploy to *nix environments (mostly CentOS and Ubuntu). came to OSX with years of linux usage (hadn't really used Mac since my LC II back in the early 90s), i was very resistant (mostly for philosophical reasons) but couldn't particularly imagine developing on anything else now. maybe if somebody came out with an equivalently awesome laptop that was half the price of the Air I would go back to developing in *nix, but at this point (esp considering my work pays for my computers) I don't see that happening... 
if you're coming from java you might find http://www.jruby.org a fun way to learn ruby and re-use some of the java you know.
Make a cookie clicker clone mmo with more features
Well, how good were you in Java? Ruby was one of my first languages, and I was still working on key concepts, but if you're already making intense programs, then /u/kcdragon is right, try to rewrite some of your old programs. Also, it would be help if you constrained it to a category. Try "What's a good project to learn about math in ruby?" or networking in Ruby, or graphics in Ruby, etc. Learning Ruby is a big task, and honestly, you don't need to know all of it. You might not need to know how to make a GUI if you're just working on command line tools, etc.
I like telling my friends to make an echo server, then a chat server, and then a MUD where you can simply walk around between rooms. The point of making a MUD is not to complete it, but to simply gain experience using databases, networking, and metaprogramming.
I just wish that each\_with\_object had a shorter alias. 
Cookie Clicker?
Best advice so far. Most Rubyists love macs but starting with a VM is the cheapest option and is totally fine (the SSD suggestion is icing on the cake) for ruby development..
Gotcha! Thanks for the reply :)
Thanks for giving me the heads up!
agreed my first app was a todo list - used html and css and viewed the file locally in a browser rather than learn a gui framework and it ended up helping when i started hacking in rails a few weeks later. you can check it out on github if you'd like - https://github.com/pathouse/task-tracker EDIT: it's actually funny, I haven't read that code in a while. Ah youth. 
Thanks! Unfortunately Ubuntu in a VM is incredibly slow in my computer.... because my computers are all pretty old. What languages do you spend most of your time on? Have you tried NodeJS? If so, what do you think?
I feel the opposite. Almost every time I encounter .inject in ruby, I find myself rewriting it in a more performant, readable way. def inverted_index_for(file_hash) index_array = Hash.new{|h,k| h[k] = []} file_hash.each do |filename,contents| contents.split(' ').uniq.each do |word| index_array[word] &lt;&lt; filename end end index_array end 
inject is the bomb... took a personal challenge to rewrite it in ruby. you can use inject instead of map or each. is insane what you can do with this little method
Nice I like that solution. Doesn't really invalidate my love for inject, but I agree this is a nice refactor.
~~tip:~~ ~~Hash.new([])~~ ~~does the same thing~~ edit: nm
Single-line fix: word = word.to_i if word.to_i.to_s == word Is that allowable? Edit: jawdirk's method is basically the same. I'm figuring you are using the hash for some reason...
In that case, unless you really really want one, I would avoid a mac. There isn't much inherently superior about them regarding dev work and they are much more expensive. A non-mac laptop with Ubuntu installed or windows installed and an ubuntu VM is the better choice imho.
I've found .each.with_object to be cleaner in most cases. It doesn't require that you return the memo object at the end of each iteration. 
For the laptop SSD is really a big gain. Ubuntu is just great for rails development. You can take a look at my last installation notes http://mestachs.wordpress.com/2013/11/29/fresh-machine-installation-notes-for-ruby-developer/
Ruby != RoR Do you want to make a Ruby game dev project, or a RoR game dev project?
why split on ' ' instead of simply doing split without arguments? Personally I'd probably write require 'set' def inverted_index_for file_hash indexes = Hash.new {|h, k| h[k] = Set.new } file_hash.each do |filename, contents| contents.split.each do |word| indexes[word] &lt;&lt; filename end end
103 pages for $29.99 covering something that is pretty well supported and documented by the RoR community. What a bargain! If anyone is interested btw, I will soon be releasing my new book, "How to walk and chew gum at the same time" at the bargain price of $9.99. Serious question, am I alone in feeling (and being annoyed by) the level that the R/RoR's culture seems to be disproportionately targeted by people/companies with for-profit learning materials?
As far as I'm concerned, anyone that change $; deserve any problem they get.
EDIT: *scrub that* Pre coffee post. sorry. "14" is a string, '14' is a string, 14 is a number (Fixnum) hence why your method returns false. As others have pointed out, if you want to test if a string can be converted to a number, use to_i. 
Nobody ever messes with things like `$;` that outside one-liners, where they hopefully know what they're doing.
A good blog to check out for any ruby programer http://www.allerin.com/blog/ .
1_000.
I mostly use inject when all I need to pass is an method: p [1,2,3].reduce(:+) #=&gt; 6 a = [ {a: 1}, {b: 2}, {c: 3} ] p a.reduce(:merge) #=&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;3} 
Spam.
Yes! This is what I was looking for... I knew it could get improved over using Hash.new([]) TY!
Well the numbers don't lie. **edit:** I looked into this more and my [writeup is here](http://www.gabekoss.com/blog/2013/12/benchmark_inject_versus_each_with_object/). each() is definitely more efficient in this case than inject() or each_with_object(). Thanks for the feedback. Learning FTW!
Yea, each_with_object() is nice too!
I agree, but if history has shown us *anything* it's that relying on other people being flawless is a really poor strategy.
#reduce is an alias of #inject, and the second example converts an array of hashes to a single hash.
datsecondexample.jpg Definitely using that.
Also good if you need to find all common elements in many arrays: a = [ [1,2,3,4], [2,4,6,2], [4,5,2,0], ] p a.reduce(:&amp;) #=&gt; [2, 4]
That's super cool.
I'd just like to note that this statement is false: &gt; if you call to_i on a string, it defaults to 0 for non-integer strings. Indeed, here's a simple example: irb(main):001:0&gt; '14a'.to_i =&gt; 14 Here is what the docs say: &gt;Returns the result of interpreting leading characters in str as an integer base *base* (between 2 and 36). Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0 is returned. For something like a homework assignment (which I assume this is), there's a difference.
same, so much better than ruby-doc
Spend more than 5 minutes in the Java or .NET worlds and it'll seem like *nothing* ;-)
You don't need all of that to be a competent RoR dev. There probably needs to be people in your organization who combine to know all of that, but if you are not doing the deploys, you won't be expected to write deployment scripts. If your organization separates the front-end work (HTML, CSS, JavaScript) from the back-end work (Ruby), you won't need to much of an understanding of CSS or JavaScript (although, HTML is probably needed). There are a lot of good things to learn in that graph, but don't let that stop you from thinking you aren't competent developer just because you don't know something there.
I *have* to know "power editing" to be a competent RoR dev? Does that mean you're not competent until you, from the top of your head, remember what `&lt;C-A&gt;jjx$a &lt;Esc&gt;5J2bqahr&lt;CR&gt;7bq3@aj06i &lt;Esc&gt;5Gh&lt;C-V&gt;jjxZZ` in Vim does? And I have to know about pairing to be a competent dev? Some of the items on the list are genuinely useful if not downright required, but the article and the graph itself make it look like you *have to* know everything in order to be "competent". This is bullshit.
I think it's saying understand the concept, not be a master of it. You at least need to know how to search Google for an answer—right? 
&gt; I think it's saying understand the concept, not be a master of it. You at least need to know how to search Google for an answer—right? 
+1 to Mac Air. I have the cheapest mid-2013 model. Honestly there's a social element for me, "all the cool kids are doing it". But that's just a very small part, everything just works, from installing Rails and its tools, long battery life for taking down notes when outside or in a conference, plus Homebrew is awesome. Re: small screen, I use an external monitor. This is easily the best laptop I've ever had.
I for one, think it's a good list. You do need to know what all the stuff is, you might not use it all, but you should at least know what it is.
Awesome. I'm getting excited now!! I'll look out for Christmas sales.
This is honestly ridiculous. I don't know what else to say. This misses so many things that are actually important to being a "good" rails developer and then hits on so many things that really are... extraneous. 
Looks to me like it's just them trying to make a scary and complicated chart to get beginners to sign up for their bootcamp.
and elegant
+1 for the "some general knowledge about those concepts" help, and also to remind everyone that there is more to development than just coding. I've been in companies where as a developer you could ignore a lot of stuff (database admin, deployment, even build) as those tasks were done by dedicated teams/people. Now: not every company is big enough for this, and it may be a bad idea anyway: having general knowledge about those subject will make you a better developer. Need everything to start? Sure not. A good list to look to when you want to expand your horizons? Think so. And we should be looking to expand our horizons.
Any idea of a better list? There are probably holes and extraneous things here, but the exercise is meaningful and the result not that bad.
The convention in Ruby is to use 2 spaces for tabs. 
That and using snake_case for method names. For the OP, here's the community style guide: https://github.com/bbatsov/ruby-style-guide And as for idiomatic code, I recommend reading "Eloquent Ruby".
@both of you guys, thanks. I'm aware of the conventions, but write a few different languages and often forget to style appropriately. That aside, the idea was to enjoy this little demo, not to ask for a code review. Cheers edit: changed my tabs to spaces, changed method names to snake_case
Ruby? Ha, Ha, Ha. Try Perl
I really really like Gosu. It's primitive, but it does exactly what I was looking for. Check out my draw methods - I'm plotting every rect and triangle, but that's fine for my use case. If you're not trying to do anything insane, i think it's fine. It also has image support, but I'm not really using it. Good luck, and feel free to bounce a question off me if you start playing with it.
Things like $; are genuinely useful in REPL, live coding and things where keystrokes are expensive. But yeah that's a specialized case and using it (or split without args) anywhere else is insanity. I actually might argue that it shouldn't be in Ruby by default and that you should have to call require "terse" or such to activate those things.
The only issue I want to see fixed is the dependency on Java.
yep. been using passenger for a couple years now with both sinatra and rails apps, super easy and problem free for me.
This is a GREAT resource. http://blog.teamtreehouse.com/an-introduction-to-rspec I'm in the process of learning [chefspec](https://github.com/sethvargo/chefspec), and this gave me the foundation to understand the nuances that i needed to get it.
Note: I'm making all this up as I go, so I apologize if there are errors in the code, or I have muffed the syntax somewhere. Also, I'm sure this could all be totally refactored :) One rule of thumb is to only test code that you control. For example, don't test rails behavior (like validations, etc). Rather, just test the code you are writing and committing. In your example, depending on what is happening in your controller actions, I might not test at all. For example, the following code is all basic ruby/rails functionality: def update if @model.update_attributes params[:model] flash[:notice] = "Your model was saved" redirect_to admin_models_path else flash[:warning] = "Your model cannot be saved" render :action =&gt; :edit end end Testing this serves no purpose. If it is broken, that's a ruby or rails problem. On the other hand, if there is complex code that needs to happen in the controller, I would extract that out to its own class and then test that. For example: def show begin @model = Model.find params[:id] rescue ActiveRecord::RecordNotFound @model = ArchivedModel.find_by_model_id(params[:id]) unless @model raise ActiveRecord::RecordNotFound unless @model end end In this case, I would probably extract that logic into a ModelFetcher class, and then test that: def show @model = ModelFetcher.fetch params[:id] end def ModelFetcher def self.fetch(model_id) begin model = Model.find model_id.to_i rescue ActiveRecord::RecordNotFound model = ArchivedModel.find_by_model_id(model_id.to_i) unless model raise ActiveRecord::RecordNotFound end model end end Now, you can test your ModelFetcher (assuming RSpec here): describe ModelFetcher do describe "#fetch" do it "returns a Model if one exists" do model = Model.create expect(ModelFetcher.fetch model.id).to eq model end it "returns an Archived Model if one exists and a Model doesn't" do archived_model = Model.create.archive! expect(ModelFetcher.fetcher archived_model.id).to eq archived_model end it "raises ActiveRecord::RecordNotFound if neither a Model or ArchivedModel exists" do expect { ModelFetcher.fetcher 123 }.to raise ActiveRecord::RecordNotFound end end end Hope this helps.
Awesome man. I have to go to the gym first so I'll read and study it later
Thanks, but I don't quite understand. Do I used a triggered event to override the method? The Tween class is a native Java class that requires its method to be overriden and with Java I can override it from with the call instead of defining the class separately. Sorry if I don't understand your suggestion. Like I said, I'm a bit new to Ruby. 
damn it! I literally upgraded all my environments to 1.7.8 this morning... ugh, I guess I know what I'll be working on Monday now
This video explains it http://www.youtube.com/embed/mvvYlyYjuBw
This is so sweet! 
If you want one that is current and regularly posted to: [rubylove.io](http://rubylove.io)
Normally while doing this, I would make those extracted methods private as well, unless you intended for them to be public? Also, while the code looks cleaner, sure, it doesn't actually solve the problem of the update method having more than one responsibility, and doesn't become any easier to test. You need to take it a step farther and extract into classes. Maybe something like an OrderProcessor and a ShippingContractor. These would allow you to test them in isolation and would make the code in your controller even cleaner. Testing is what even allows you to safely refactor in the first place, and the test in this case won't change at all and won't get any simpler. The cyclomatic complexity of your example is already pretty high, by pushing some of the decisions into new objects you can eliminate a bit of that and make your tests easier to understand as well. Not trying to take anything away from what you wrote, by the way, just pointing out what I feel could be done better. I think having clearly named methods is a great starting point, but ultimately if the test is still difficult to write or has too much complexity, it's not that much different and will need to be broken down further in order to be more valuable.
&gt; Testing this serves no purpose. If it is broken, that's a ruby or rails problem. I disagree. If you meant to render the :edit action, but someone comes along and changes it to the :new action, and there's no test that fails when they do that, that's not a rails bug, that's you not testing that you meant to render :edit. Likewise with setting the flash message, if they change it to "LOL" or even delete it and tests don't fail, they could assume that that was correct behavior and that that line isn't needed, when in fact it is, but you just decided not to test it. I'll agree that writing those tests is trivial and may seem pointless, but I'd argue they hold at least enough value to write them.
That...doesn't make any sense.
JRuby just gets better and better. It's been the only implementation of Ruby I use lately.
I think the key word in your comment is "value." I don't want to get into an argument about the specifics of my example code, but I would say that, in general, the granularity and "level" of your tests reflect the importance of the code. If it is important to your app that, for instance, a certain action returns a certain status code, or displays a highly specific message, then, as you say, it should be important that you test it. Sometimes, we can trust that our co-workers aren't going to put "LOL" in as a message :) As a sort of an aside, Sandi Metz says that it's not necessary to test private methods in classes. Her argument is that those are not part of your public "API", and as long as the public API is under test and passes those tests, you can change and refactor the private methods that make it happen as much as you want. In this case, the value of the code is the public API, not your messy private methods. Similarly, you can sometimes skip testing your Rails classes themselves and just test your web API with, for example, Cucumber. This can be useful when you need to be sure that certain that your app responds in the right way, but you aren't sure yet how that will be implemented ("are we using gem X or Y?", "are we using Rails for this thing?", etc). Here, the "internal code" is valueless until we decide on the implementation we want, at which point we would probably write a huge test suite for it.
Let me guess, I'd get a cut of equity when it launches, right? 
why not post the spec sheet here?
It's a bit of a funky method because it's basically doing the job of the router but based on query params. It would be far better to just use two different controllers/actions i.e. post {:credit_card} =&gt; /orders post {:shipping_address, :shipping_address} =&gt; /shipping_contacts It's probably just a contrived example but unfortunately the end result is not an example of well factored code. 
If it is in the same directory as you started irb from, just load the file: $ irb 2.0.0-head :001 &gt; load "./test.rb" hello world =&gt; true 2.0.0-head :002 &gt; 
is it possible to pass in def arguments from that same command?
Use pry while you're still learning! Has the same basic functionality of IRB, but sooo much better. http://www.sitepoint.com/rubyists-time-pry-irb/
You can also just require a file from irb: require "./filename.rb" and then you will have access to its classes/methods/etc
I am sorry... method arguments. 
Perhaps you should use a different example if you would like to convey it as pure ruby; one that does not use the update method as the main focus, and one that does not "render" anything either. Otherwise I would imagine anyone who knows about rails is going to assume you're talking about controllers as I did.
An echo server: whatever you type into it is printed back out to you (generally you have to type and then hit enter) a chat server: whenever you type something, it sends your message out to the other people. whenever they type something, it is printed out to you. the addition of a username ("what is your username?" then you type "seydar", etc) will help with this. a MUD: http://en.wikipedia.org/wiki/MUD you might have to do a little more research with this one. the internet can explain it better than i can.
Thanks! I am looking to improve and master Ruby before exploring Sinatra/Rails; see: http://www.reddit.com/r/ruby/comments/1rxjfa/concepts_in_ruby_to_understand_before_going_into/ Echo server: Sorry if I am being too stupid; but isn't an echo server this: loop { puts gets } Chat server: So how do I send the info to another person? Did you mean something like this: http://www.rubyinside.com/advent2006/10-gserver.html MUD: That seems too difficult with my capability; but let me think!
process_order create_shipping_contact Self documenting. I don't care how, I care what. Please expand inigo montoya :D
1. That's exactly what an echo server is! Now do that over the network. 2. Yep, exactly that. Try to do it yourself without following a guide. 3. It just has to be super basic, and the goal is not completion; the goal is the journey.
You could write a helper and call that from your route blocks. def render_erb(template) erb template, :layout =&gt; !request.xhr? end I looked around for a way to set layout to false on a per request bases using filters, but couldn't find anything. That's how I would do it if there's a way.
Ah how did I not think of this! Sometimes I have a horrible one track mind when I'm stuck... trying the same thing over and over. Thanks!
Neat post. I did a double take on line 12 of the first Ruby example - I had no idea that `lambda.(arg)` de-sugared into `call`! Looks like it works on regular objects as well, i.e. class Person def call(*args) p args end end Person.new.(:hello, :world) will print `[:hello, :world]`. No idea what else I might use that for, but TIL!
try not to use generated symbols, they leak memory. So if your code contains .to_sym it's probably doing the wrong thing.
what does `-&gt;` mean in this context?
It is just another way of writing a lambda, added in Ruby 1.9. The advantage this has over writing out "lambda", other than concision, is that you can specify default parameters: -&gt;(x, y=0) {x + y}
You speak of return types. The ruby I know and the ruby you know are obviously different beasts. print_bitmap IS self documenting. I am concerned about the what, not the how. When I am grepping a library and I am looking for something to print a bitmap... yep, self documenting. As far as the splatted args, there is a good way to know what they are without reading inside. They are called tests :) I do not write code for non rubyists. I write ruby for rubyists to read. If you don't know ruby, you can't complain you don't understand something. I never understand any language I don't know :p xslt... now I know you are trolling. you can keep your dirty xml love to yourself. I have json thank you :)
This is not a comparison. It's just a listing. It also leaves out several jruby specific servers like mizuno, trinidad, torquebox, thick etc.
Thanks! I will try them, but may I clarify? Aren't you assuming that I am familiar with networking concepts? But my knowledge about it is absolute zero! (Of course, I have consumed several APIs using open-uri + json parsing or even used Nokogiri). But frankly, I my knowledge in HTTP or any other similar protocols for that matter is zero! I am looking to learn it well, understand each building blocks of the networking stack. Do you have some pointers that I can dig deep. I was thinking of starting with HTTP wikipedia article to start? But somehow seems a lot to cover; nonetheless, I just can't settle to implement on something without at least a fair understanding if not complete.
I'm curious why you chose that interface. It feels very non-Ruby to me. I probably would have just made it work like `juxt([func1,func2], [val1, val2, val3])`.
I think you're well into the realm of premature optimisation if you're worrying about the performance of an inject statement. There's extremes like having a massive number of items in your array but in general use you really shouldn't need to worry about the performance of an inject statement.
I just upgraded from a MacBook Air to a new MacBook Pro with retina. I loved the MacBook Air but if you've got the money the retina screen makes code absolutely beautiful to read.
You are rather choosing to miss the entire point. There is no such thing as "self-documenting" code. Rather there is code that when written using a few conventions often ends up being comprehensible by a small subset of potential users of that code. The BIG problem is that that subset usually ends up being the author of the code alone. Rather than belabour the point I'll leave you with a quote and a book recommendation: _“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”_ -- Fowler (1999), "Refactoring: Improving the Design of Existing Code" Since you're interested in refactoring, I would suggest you read it.
I think the proper™ Ruby way would have been to create a monkey patch for `Enumerable`, so that you could do something like [1,2,3].juxt([:inject, :+], :min, :max) #=&gt; [6, 1, 3] Maybe someone could make a Gem for that?
 f = lambda {|x, y=0| x + y } works in Ruby 1.9 as well :-)
I've used daemons (http://daemons.rubyforge.org) several times with good results. You'll want to pair it monit or nagios checks for further insurance.
I can't quite say I'm 100% happy with god, as that's what I'm using right now. I may try bluepill in the near-term future.
I would not make a regular expression for something that is built into ruby. Regular expressions are prone to edge cases, as you can see by the comments below. I'll add one more: "000123"
This seems pretty cool actually. Currently learning some basic bash scripts but this seems to make the scripts look a lot more readable and manageable.
I started using Ruby because I hated bash and Python doesn't have backticks. having a Rails-like DSL for arg parsing seems nice, but I don't see whats "MVC" about this at all. or why I'd want to use MVC for simple utility scripts.
I don't believe that you would get the same exception from your code example. You would instead get an undefined local variable or method. Here is a reference as well http://www.rubyist.net/~slagell/ruby/localvars.html
You're right, I meant to capitalize simple. Fixed it. 
&gt;makes it look like a new Chef. Pretty much took the words out of my mouth. Though for options parsing, you can't go wrong with [Trollop](http://trollop.rubyforge.org/)
I couldn't help but to pick up on the animosity in this comment. I can only speak for myself, but I have benefited greatly from constructive criticism and I am a much more humble and open to learning because of it.
what's the best way to get started? I do a lot of JVM administration already (tomcat, elasticsearch), I think adding JRuby could be really powerful. are there any limitations? do I need to know Java and install Eclipse?
Bluepill is very similar from what I can tell. If you're having odd behaviour like flapping (constant restarts), and random restarts etc, which I did encounter when I was using god. I might suggest not checking the cpu or memory of the supervised process, and just use the supervisor to ensure it's running, which is why I take a simpler approach now.
Also note that the parenthesis are optional: my_lambda = -&gt; x, y=0 { x + y }
It is certainly "the wrong thing" if you call `#to_sym` on user input. Any user may exhaust your process' memory by triggering `"aaa".to_sym`, `"aab".to_sym`, and so forth.
There's a few things that are definitely worth changing from stock: - Use iTerm2 instead of the system's terminal. - Install the Homebrew package manager and install your development tools through it. - Install a better text editor than the built in one. Vim/MacVim/EMacs are amazing but have a steep learning curve. SublimeText is also great and much easier to jump into and use. RubyMine is good if you prefer using an IDE. - Install an app like Divvy or Slate to make window management MUCH better. There are a bunch of other alternatives if you don't like either of those. All the apps of this type thAt I've seen take a bit of configuring but it's worth it.
Unless you really need a built in optical drive the base model 13" Pro isn't worth it. It's actually kind of strange that Apple still sell it. The 13" Air is much lighter, has better battery life and will feel much more responsive due to the SSD for slightly more money. The base retina Pro is heavier than the air but lighter than the non-retina Pro, has more grunt and a better screen than either and has battery life similar to the air for a bit more money again. Mavericks is fine for Rails development, especially if you're setting up a new system. The very few issues I've seen people have posted about around the internet are all existing development environments that got broken by the Mavericks upgrade.
I have to wonder why you keep posting these updates? If they contained actual ruby content then I wouldn't mind but they all they say is "and I continued building a course today." Just strikes me as being a little spammy. Why not just post the final result?
Sure, but the parent comment just blanket states that just "using .to_sym is 'the wrong thing'". Without any qualifiers. Which is ridiculous.
This might have been the best talk at Rubyconf this year. That or maybe the Artoo talk. But I like Pry a lot and in this talk, Conrad shows just how awesome pry is and how far along it's come since the days when outputting anything bigger than 20 lines meant a significant slowdown. Pry is now a great tool with a thriving ecosystem. [Edit: PS: I am not affiliated with pry and I'm not getting paid to say this. Though I have submitted the occasional patch]
Most of the time, it really is. Symbols are supposed to be internal identifiers. It's quite rare that those are represented in strings, although it does of course happen, but it should be handled by libraries such as `ActiveSupport::HashWithIndifferentAccess` or `Hashie::Mash`.
This is a good presentation. I'm definitely not using Pry to its full potential. From this year's Rubyconf I'd recommend watching: - this talk (Pry) - Building a Pong game in 15 mins http://www.confreaks.com/videos/2880-rubyconf2013-rapid-game-prototyping-with-ruby - Artoo.io http://www.confreaks.com/videos/2883-rubyconf2013-ruby-on-robots-using-artoo and I also liked the regular expressions talk http://www.confreaks.com/videos/2862-rubyconf2013-beneath-the-surface-harnessing-the-true-power-of-regular-expressions-in-ruby
I don't know that 'ruby' is the appropriate subreddit for this post. Perhaps /r/web_design or at least /r/rails 
Meh. I'd rather have the extra battery life than the pretty screen. Also I much prefer the form factor of the air. 
This is a pretty awesome tool. You can find here a bunch of console gem in one list, but this is not there. It should be listed there. http://www.awesomecommandlineapps.com/gems.html
Please be upfront about it if you're posting your referral code…
The Artoo talk is a real crowd-pleaser, for sure, but Pry is just so damn useful.
_"Hi. I'm Brandon. I'm a technology entrepreneur in PA"_ ~ quote from site. It's marketing. For once I don't object to it since he's being open about it and releasing sign-up information. Persuasive web-design in action.
Works great until you're on the plane, or at a coffeeshop with a flaky wifi connection. :-p 
Ruby is a very pleasant language, I think most people find an easy enough time getting comfortable with it, especially if they've done some Python in the past. I think the one thing I wish I had really understood in the beginning is that Ruby offers you many different ways to do one thing. It can be a bit overwhelming at times when trying to come up with "the optimal solution". Sometimes you just have to start writing (even if it's bad), don't get stuck thinking about it too much or you'll wind up with a mess in your head. Figure out what you should prioritize in your code. This can vary from project to project. My personal preference for programming in general is usually to prioritize readability/extensibility/maintainability in my code. 
Do check: http://devdocs.io
Sounds like a prime candidate for offline mirroring (hint hint)
Or you can use Dash (http://kapeli.com/dash) which indexes rdocs from local gems and has full-text search.
We've been debating the best way to implement this -- do you want typeahead, or actual, google-style instant search? One thing to note is that we cover a lot more code than ruby-doc or the rails references. We've indexed the current version of every public gem (with all the older versions Coming Real Soon).
Does nobody use [god](http://godrb.com/) anymore?
Thanks for the reply! Ideally, I'd like the fuzzy search that the rails api has: api.rubyonrails.org. Searching for "abscon" will bring up "AbstractController" as well as "establish_connection". 
I also use [rubydoc.org](http://rubydoc.org/stdlib).
The day that your App has the same traffic as Twitter does, you will have so much money that scalability will be the last of your problems, probably you will have people to take care of this problems. Here is a link for benchmarks &gt;http://www.techempower.com/benchmarks/ I think Rails community is one of the best out there, so you should check that too. 
These no-comment blogs drive me NUTS. "RI slows down gem installations" is not a good reason to stop using RI, it's a good reason to speed up RI.
Or you can use Zeal if you're on Linux or Windows. https://github.com/jkozera/zeal
These days, Twitter is a straw man for Rails scalability. Your project will never ever achieve the scaling problems that Twitter has. For the rest of the world, Rails scales just fine. &gt; Any high traffic or critical sites built using RoR that can be used against the arguments. All of 37 Signal's products. They have hundreds of thousands if not millions of users. &gt; Any benchmark/stats to look at? Here's one from a quick search: http://www.techempower.com/benchmarks/#section=data-r7&amp;hw=i7&amp;test=db&amp;l=4qo&amp;p=2hwd2-0&amp;w=1g&amp;c=1&amp;d=6&amp;a=1&amp;f=so-0-0 &gt; How is the stability of the framework? Very stable in my opinion. I've got projects running on v2.3 that have never had any issues due to the framework itself. The 3x version was even better, and now 4x is still better than that. &gt; What about security issues? Yes there have been some security holes in the past, including the highly publicized wave of them pretty recently. They were fixed quickly. I don't know how hardened it is versus other web frameworks though. &gt; Any strong negatives? Not that I can think of :) 
This is awesome. One question though... How would you deal with interrelated data when using Spigot? For example, say you were consuming data from a service via two resources: Posts * Title * Category names * Body Categories * Name * Description You would define a Spigotized resource for Post but the Post's categories come in as an array of strings. To properly save this data local to your app it would require first getting a Post's info and then some how having Spigot build another object required for the Category. Am i thinking about this incorrectly? Thank you! 
&gt; Likewise, if you know that your code is computationally expensive, e.g. if your app's core business is to calculate solutions to the Traveling Salesman Problem, then you're probably better off picking something else Even in this case, you can just implement the expensive operations in C and call them from Ruby. 
This was without a doubt my fav talk of the conference. Extremely useful no matter how adept you are with pry.
According to https://www.ruby-toolbox.com/categories/server_monitoring it's still fairly popular. I stopped using it before ruby 1.9 was ready for real world usage. In all fairness, the current experience will be quite different from what I encountered back then.
Oh, interesting. Is that because you often forget names, or otherwise aren't sure what to search for? (I'm asking so that we can get a better idea of what you need).
You'd be amazed at what the world is like outside greater SF, LA, and NY. Take [shitty ISPs](http://arstechnica.com/information-technology/2013/12/internet-horror-stories-how-isps-screwed-over-ars-readers/), then add wireless routers managed by baristas/cashiers and douchebags using bittorrent, and you have plenty of situations where this kind of thing is basically useless.
I my experience, it's almost brainless to scale the Rails part of the application. You just run more instances of Rails, throw them behind a load balancer, and you're done. Like everyone else said, you'll have data store problems before you have web application problems. The problem everyone has with Rails is how inefficient it is. It might take 10 Rails servers to serve the same amount of traffic as a single Java server. The tradeoff is you can probably save a lot of engineering hours doing the application in Rails. Hardware is cheap and engineers are expensive (and rare); writing your app in Java may save you a couple servers, but it may require a couple more engineers. At some point during scaling, you'll hit the point where it's more economical to hire more developers and rewrite everything than to use 10x more servers; that's when you hit Twitter scale. I'm sure Twitter could have continued scaling using Rails; it just wouldn't have been cost effective to do so. 
I used to build mobile travel guides with all the reviews, images and maps available offline, so I definitely understand connectivity issues. Even in major cities radio congestion can make 4g/wifi unusable. That said, when I'm actually programming my first order of business is to secure a proper net connection since most of my brain is online these days.
You mean Github (millions of daily users), Hulu, Groupon, Twitter... Dude, if you get even close to the limits of Ruby on Rails you'll have so much cash coming out your ears that you'll be able to hire hundreds of devs to write a custom compiler for whatever language you effing want. Scalability is like the stupidest thing to be worried about as a new business. We've made shitloads of money on Rails and haven't even gone past three Heroku Dynos. There are ZERO strong negatives.
Glad you like it! As Spigot is now, I don't think it's well equipped to handle your situation. I'll be sure to keep your case in mind as I continue adding features. For now, as a suggestion for a clean way to accomplish what you need, add an attr_accessor on your Post and then in an after_create callback, build your categories using what you assigned to the attr_accessor. I'll put some thought into a clean way to take care of this usage. Thanks for the feedback!
&gt; It might take 10 Rails servers to serve the same amount of traffic as a single Java server. In my experience this is bollocks. I've seen examples in which the new Rails app reduced server requirements by 80% compared to the old Java server. It mostly depends on how well-written your app is. A really well-written Java app *may* outperform a really well-written Rails app. Emphasis on "really well-written". It's definitely not the case that you get a well-performing app easily, just by using a certain technology. Note that Twitter *still uses Rails*. They never left it. A lot of their frontend is still Rails and their backends are a mix between Java, Scala and probably other stuff.
First of all thanks a lot for such a detailed explanation and insight. Frankly, I do understand Ruby isn't for computationally intensive tasks. But I was thinking what can be considered as a typical maximum. Say will it scale for a 1 million user FB or a 10 million user Twitter and the like; I know my examples seems too silly. But, I am looking for some perspective. Sinatra: Oh! You wouldn't suggest it? I was thinking to learn Sinatra instead of Rails to build webapps. Had heard few good things about its plugins.. Anyword about Padrino?
Sure, I understand; but wanted a perspective of when to expect an instability: as in what sort of scale.
Thanks; but I am tending to feel, I am at the wrong place to ask for negatives :)
Can you provide some pointers to dig deeper into data store issue; I think I just missed the point totally.
+1 for "really well-written" bit, I do agree. A compiled will in theory perform better. So no surprises there; but just wanted some idea/metric on how good or bad.
I'm afraid nobody can tell you what to expect. It all depends a lot on your workload, your traffic and use cases. The last time I tried to optimize my app pre-launch, things went horribly wrong: most of the problems were not at the places I thought they would occur. I spent a lot of time post-launch to analyse the traffic and workload and figuring out how to optimize the system properly. I thought that Ruby would give me problems at some point, so I wrote some parts in C++ just to be sure. I was wrong. Ruby was not the limiting factor in our app, and considering current trends and how insanely fast our CPUs are, I don't expect Ruby to be a problem in the foreseeable future. The database was our problem #1. So instead of predicting or expecting, measure measure measure. Observe the status of your system. Observe where the problems actually are. Nothing beats facts.
Off-topic: Did you have any solutions for that DB scaling? I suppose its the same which ever language it is.
Hmm, will this make sense then: Say you have a standard infrastructure (say fairly powerful); then how does these languages fare.
I wrote this further in but the long and short of it is that in 90% of cases, scalability comes from the architecture and infrastructure and not the back-end application services. While it TOTALLY depends on what the site/application is, with efficient caching &amp; CDN, only a small proportion of traffic will be hitting the actual application servers. 
I think the problem here is that there really isn't any "standard" infrastructure because at any sort of meaningful scale, your infrastructure has to be designed to fit your product in the same way everything else does. E.g. it's not like you can go and buy "infrastructure," for a rails app, you setup various components depending on what your application needs. Heroku is the closest to off the shelf and even that can't be described as standard because it's pretty likely the first scaling limits which will be hit are around database optimisation and caching strategies. What I'm getting at is that it's probably impossible to answer the "how many users will it scale to for x use case with standard infrastructure" because there's no such thing as standard infrastructure for anything other than the most basic apps.
Lets assume you have some sort of data for your application; if you don't then Rails tends to be a poor choice of tech. Your data is typically stored in a database(MySQL, PostgreSQL, Cassandra, etc.), but could also be stored on the filesystem (Hadoop) or in-memory (memcache, redis). At some point, you're going to need that data faster than a single instance of the data store could provide. For relational databases, this is when you start considering master-slave replications and sharding. Relational databases tend to not scale well mainly because cross-shard joins are extremely slow. This led to the popularity of NoSQL databases since they generally were designed with scalability in mind. When you hit Google/Twitter/Facebook scale, you have everything built on top of Hadoop. 
Yes, you are right. The terminal works faster, better, and don't depends on weather or connection. Recently I had worked with one old perl project. I haven't seen perl for ages. And only tool I used to remember what is what, and how to use some libraries was perldoc. I wish ruby community had something good like perldoc.
Assuming the Rails and Java-based application were equally well written, and are standalone technologies, then Java is almost always faster. /u/robzdc posted the benchmarks, and my personal experience matches the benchmarks pretty well. Generally speaking, a Java will perform about 20x better than Ruby, but takes 5x longer to write. Also, in the real world, high traffic Rails apps are rarely standalone. There is usually some sort of request cache system(varnish/squid) in place to minimize the amount of requests actually reaching Rails. 
I believe you can do the following: callback = TweenCallback.new def callback.onEvent(type, source) ... end Tween.to(ext4, ChunkAccessor.ALPHA, 1.0f).target(0).setCallback(callback) The only thing I don't know is if you can override overloaded methods that way, because ruby doesn't have those.
Hmm, that something I never would have guessed! So in short, DB is the bottleneck! And the language is kind of the lesser weighing factor. 
Here's some starter tips: * if you can, give the db enough memory to keep all of its files in memory with working space to spare * most databases come with configurations designed for use on any machine. You'll want to tune them for your machine * most (all?) queries should hit indexes. I've never regretted time spent reading up on indexes or reviewing the ones we use. There's a lot of details here * databases really struggle with poor disk I/O. If you're running on something like AWS, look into options for improving on the crap I/O situation you get by default * N+1 queries will be a common problem. There are tools out there that will help you diagnose them, but knowing about them ahead of time is important * caching is your friend. Many use cases are very read-heavy and a solid caching implementation will go a long way
Thanks a lot! ps &amp; off topic. Culini == something the restaurant world has needed for a long time! 
Just a note about Twitter, Scaling and Rails since it's brought up so often. I think Twitter's problems are beyond meaningful discussion when average people with average websites talk about Rails. Twitter is an "old" example (by internet standards). At the time Twitter chose Rails, Rails was and still largely is, a server side rendering web framework. It did the job just fine when they started out and as far as I know Twitter *still* uses Ruby and Rails for rendering client views. In that sense Rails was an amazing success because it let them pivot and grow to where they are now. What did not scale was the absolutely massive Rails-based *real time distributed messaging system backend* which is what Twitter's "real product" became as they matured. A massively distributed messaging system is not really within the scope of what a Rails application "is" to begin with, and the majority of what composes Twitter's application stack is going to be largely related to that custom messaging system's infrastructure. If you're going to look at Twitter and say "Rails failed them since it didn't handle every aspect of their product from beginning to end", I say show me anything else that would have not required similar levels of significant customization growing to that scale over the better half of the last decade.
Garbage collection may be unsexy, but it is a very important topic every programmer should be familiar with. If you don't understand what's going on behind the curtain, you will be puzzled when things behave unexpectedly.
REGEX talk for sure! That and the Pry presentation gave great insights
Haha, yes, you are asking people who not only are ruby programmers, but also choose to hang out on the ruby subreddit, and want to be vocal enough to actually respond to you. I would suggest asking other programming groups (subreddits?) what their experiences are like, but most of the programming-related subreddits I have read have an extremely negative disposition towards ruby / rails in general, so you will probably experience the opposite bias there. Honestly, if you have friends / coworkers / professional acquaintances that have experience with ruby and rails, ask them. I would trust somebody whose technical skill I can roughly evaluate 10x more than a random commenting on a subreddit.
Thanks a lot! I've saved this thread and will come back to it when I get my Mac. I really appreciate your advice!!!!
Thanks for the advice. I don't think I'll be moving it around a whole lot.... so I figured it might be worth it to sacrifice the portability of the Air, for the more powerful Pro. It's strange that even though the Air is lighter and has longer battery life.... its STILL cheaper than the Pro. Thanks for your reply, I'll take another look at the Air!!
Nice, thanks. The methods aren't overloaded anyway so it should be fine. This is cleaner than the solution I came up with.
Use `proc` [1] instead of `lambda`. Lambdas, by design, enforce arity. Or accept a parameter and don't use it, i.e. `lambda { |foo| @sales &gt; 10 }` P.S. You can use backticks (\`) to blockquote inline code. (Or indent lines 4 spaces for blocks of code.) [1]: But beware that a Proc will return from the calling method, so I recommend removing the `return` keyword.
Thank you for the response! Unfortunately, I am being forced to use lambda in this scenario. Perhaps more context will be of help: def rule(condition: nil) t = Object.new t.class.module_eval{ attr_accessor :condition def act(something) if(condition.call(something)) return "SUCCESS" end end } t.condition = condition return t end value = rule(condition: lambda {@something &gt; 100}) value.act(120) The call to the rule method MUST look like that, but the rule definition can change. Is this possible with lambdas? Again, any help or point in the right direction would be helpful. EDIT: Fixed definition of act, had it typed incorrectly here. CLARIFICATION: The rule method is being supplied by the user. and must take the format listed above.
Also, the line that states `if(condition.call(something))`, should that not be `sales` instead of `something`?
edited! I had removed code that was extraneous and missed bits :( Sorry for the confusion
 def rule(condition: nil) t = Object.new t.class.module_eval{ attr_accessor :condition def act(something) if(condition.call(something)) return "SUCCESS" end end } t.condition = condition return t end value = rule(condition: lambda {|something| something &gt; 100}) puts "20 = #{value.act(20)}" puts "101 = #{value.act(101)}" This works just fine: $ ruby lambdafoo.rb 20 = 101 = SUCCESS
That definitely works, but my goal is to avoid changing how lambda is defined
...wat
There is a standard trick you can use def act(something) (class &lt;&lt; self; self; end).instance_exec(condition) do |blk| define_method(:condition_caller, blk) end if condition_caller(something) return "Success" end end Basically the above trick forces `self` to refer to the current object so references to instance variables work as expected.
so like: puts "Asks for userinput:" userinput = gets.chomp *userinput = "hi there"* Newvar = userinput.gsub(' ','') *Newvar = "hithere"* ?
thank you!
You probably don't want to use a capital N to start the variable name. irb(main):001:0&gt; var = "whatever" =&gt; "whatever" irb(main):002:0&gt; Newvar = var =&gt; "whatever" irb(main):003:0&gt; Newvar = "something_else" (irb):3: warning: already initialized constant Newvar =&gt; "something_else" This syntax is usually reserved for constants.
Haha yeah, My phone autocorrected
Also can use a Regexp if you want to remove all kinds of whitespace: userinput = gets.gsub(/\s/, "") 
How do you handle lambdas with parameters? The Op needs to pass parameters to the lambda. Actually, nevermind. That still works. `instance_exec` general form is `instance_exec(*args, &amp;code)` and `*args` are passed to `&amp;code` as the parameters.
FYI - local variables should start with a lower case letter in Ruby. And we typically use snake_case! 
If you didn't already know, the chomp method simply removes the trailing newline character (produced when the user hits return, to submit the stdin input). The gsub with a literal space `" "` won't remove any other newlines or tab characters. Using a regular expression to match for any whitespace would catch those edge cases if they matter to you: example: `user_input = gets.gsub(/\s/, '')` would remove spaces, newlines, and tab characters. http://rubular.com/ is a good interactive ruby regex guide.
Depending on your usage, you could use something like [highline](https://github.com/JEG2/highline) to make taking input from the command-line a little cleaner: require 'highline/import' answer = ask("Question? ") answer = answer.gsub(/\s/,'')
Well, the most efficient way to solve it doesn't vary by language. The problem is solvable in O(n) time using the algorithm given on the Wikipedia page. A ruby solution would look very similar to the python one listed there. I wouldn't beat yourself up about doing badly on this question. If you didn't know the answer already, chances are you're not going to be able to figure it out in the time allowed in an interview. Generally speaking, brain teasers like this aren't a good indication of candidate ability. They're not even a good proxy for the everyday work you'd be doing at the company. Like I said don't worry about it.
 class Array # sum the integer values of array contents def int_sum self.inject(0){|sum,i| sum+i.to_i} end # find the maximum sub array in an array def max_sub_array (0...self.size).inject([self.first]) do |max_sub,i| (i...self.size).each do |j| if max_sub.int_sum &lt; self[i..j].int_sum max_sub = self[i..j] end end max_sub end end end # test example if __FILE__ == $0 my_arr = [-1, 2, 5, -1, 3, -2, 1] puts "array: #{my_arr.inspect}" puts "maximum sub-array: #{my_arr.max_sub_array.inspect}" end 
Unfortunately, this has at least O(n^(2)) performance, possibly even O(n^(3)). You have two inject loops summing inside an each loop inside an inject loop. I didn't know about the triple-dot range operator though, pretty cool.
When I ask these kinds of question, the answer isn't necessarily the goal. The goal is to see how they break down a problem. The main thing I personally look for is: 1) identify a brute strength algorithm 2) identify that #1 is a brute strength approach 3) can they identify any parameters which can limit the problem's scope 4) can they improve their #1 For #3 in this problem the limiting parameter is that the empty set will have a sum of 0 and thus is the case to beat. On a related note my personal favorite questions are similar to what you suggest. I just want to state that there is value to these questions. Maybe it isn't the best way all the time and it can be misused, but it isn't useless.
Yeah... wait until you have millions of users to solve those problems. Otherwise, it's fun to think about. But, a total waste of time. Rails lets you get to a million users much faster than anything even close to what I've come across.
 def max_subarray(a) max_ending_here = max_so_far = a.shift a.each do |x| max_ending_here = [x, max_ending_here + x].max max_so_far = [max_so_far, max_ending_here].max end max_so_far end
nice. I also use and like mina. What bugs me is that project seems not so active...But maybe we can change that pro-actively :)
Cool. I was suspicious that you knew better, but since it was a newbie kinda thread, anyway...thanks for being cool.
I would be psyched if Moonshine switched to use this instead of Capistrano.
I'd really like to see deploy.rb file differences. 
Very interesting, I think I'll have to give this a try. Thanks for sharing!
Mina is nice, but lacks the support that Cap has. That said, Cap 3 appears to be breaking all sorts of workflows and after upgrading a Rails site (unicorn+god) to 3 I've lost the ability to do zero-downtime deploys due to the new way the deploys work (which ends up with cwd for everything being /releases/x, not /current - so hot-restarted unicorns end up trying to start in /releases/x-1 when you next deploy etc). Not nice.
That's why you have a hotspot, or a mobile device with a 3/4g connection. 
Your comment is bound to help another! Good work
The major problem I have with capistrano is the fact that it not only depends on the server setup, but also on the client setup. I had a case were a deploy was working perfectly fine on my machine, but didn't on another persons. What happened? I changed the `deploy:symlink` hook to `deploy:create_symlinks` (was a change like a year ago in cap) and the older version that person was running tried to call the old one. Yes, you need to update it, but that stuff kills productivity. I've since switched to directly deploy via git (post-receive hook on a deploy repo, like heroku does it), it works way better, as I only have to manage the server side of things.
This was a big issue for my workplace. We switched to using a CI server that runs our capistrano deployments, which has standardised the deploy environment across all sites.
yup, CI server would be the best way imo.
Documentation.
Check out Apigee's talks on designing good apis. https://blog.apigee.com/detail/restful_api_design Here is one of them. They have some great examples of how to do things well and how to design it to succeed from the start.
Consistency. I care less about perfectly true RESTful adherence than I do about being able to follow a consistent pattern with all of your endpoints. As a simple example, don't have some endpoints that return a rootnode and some that don't.
Hey guys, current maintainer of Mina here. We're looking for new maintainers! Ping me (github.com/rstacruz) if anyone's interested.
+1000. Documentation can make the difference between a great API that everyone loves and a great API that no one uses.
Documentation, consistency, and something other than XML. Don't call something by an initial or abbreviation in one place, and then its full name in another. The very best APIs are actually localized, which can help solve consistency problems, because you define all the language abstracted away from the API, thus fostering consistency
 1. JSON - Nothing is worse than having xml returned especially since it's much easier to go from json to hashes than from xml to hashes. 1. Documentation and Clients - It's all very well to have lots of documentation, but by having a simple ruby or python api client to interact with the API easily, you lower the barrier to entry enabling a lot more people to get interested. Along the same lines, web interfaces are not discourage either. 1. Backwards compatibility - May not matter to much in the beginning when you getting started, but don't change it to much after your stable release since you could potentially break a lot of 3rd part clients. 1. Quick and comprehensive data - No one wants to wait a long time for data to come and then find out that there isn't enough data. Similarly, it becomes very frustrating to have to make 10 calls to get one piece of information. Make the chain no longer than two, preferably. 1. Set up a network - Blog, rss feed. anything as long as it makes it easier for others to learn about changes and new features or bugs. Try not to make a twitter or mailing list since some people may not have an account.
Not yet mentioned here, but also quite important is the correct use of HTTP status codes. I've seen APIs responding with `200 OK` but containing a message body like {"error":"not found"} Sometimes I believe people translate RFC with "recommended for consideration" (or worse: haven't ever heard of RFC 2616)... Having an interactive API explorer is also very useful (see this example of [The Guardian](http://explorer.content.guardianapis.com/) or this thing called [Swagger UI](http://swagger.wordnik.com)).
Idiomatic language bindings. Who uses the energy sensor network, and what do they use in their jobs? If I program in Fortran, and you give me a URL where I can fetch a bunch of nested Javascript hashes as text, you've just made my life much harder.
Check this: http://eli.thegreenplace.net/2010/04/05/pthreads-as-a-case-study-of-good-api-design/ Not a web API but the principles described there are the ones any API should aim for.
JSON is #1? Seems like supporting JSON and XML is a simple enough request. Backwards compatibility is huge, versioning should be supported in either the header or the URL 
Documentation is great, but examples just goes that step further to confidently show how something works. It's the whole "Give a man a fish" vs. "Teach a man to fish" paradigm.
The order isn't really important. I just added them as I came up with them.
The site gets rather clingy when you go to a different tab... http://i.imgur.com/aqVn2mJ.jpg Nice article though
&gt; Just build as many apps as you can. This. I started using Rails (and Ruby) when I started at my current job about 8 months ago. I made an internal app for whatever I could think of, some of which are now in wide use within the company. Maintaining these / working on others made me the competent Rails dev I feel I am today. I did have a decent amount of programming experience before, but mostly from a data analysis / processing background.
See Joshua kemp' (http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html?m=1). On my phone right now, but he was a blacksmith that learned to code Rails recently. He documents his schedule (how many hours a night, how many weeks). I think he has an eBook on the topic too.
[https://github.com/josephalevin/fson](https://github.com/josephalevin/fson) ;-)
Succinct names, terse descriptions, and examples are the biggest thing for me. I end up writing my own examples to refer back to if there aren't any.
12-14 hours a day for studying it will probably just end up burning you out and making you hate it. You'll also want to learn some jquery for that task you want so mix some of that in. Good luck and once you start taking more breaks cut back the hours before you start to dread it. Unless it's a matter of life or death for you to build a todo app with a timer don't burn out over it keep it fun.
I want a testing sandbox. Something that I can easily clear out, that won't actually fire the missiles, so to speak. I want to write integration tests against the live, running code, so I know if my app breaks before I push to production.
Easy authentication and authorization.
I've looked at and like the idea of mina, but sadly until it supports quick and easy rollbacks it's a no go for us. 
It is very much possible to build something like that in 40 days. I think the important thing when you are starting is to take good look at what you know and don't know and to prioritize your learning. How much html, networking or coding do you know? Ruby on Rails is a framework designed to make the actions of building a database heavy website follow a common logic. In other words, rails sits on top of a front-end website + database back-end that talk to each other. If you are starting from square one, a la you know no html or css, nothing about databases and nothing about a programming language like Ruby then you are going to want to structure the way you learn very differently then if you have experience in one or more of these areas. So... how much do you know?
ITT: "Documentation"
I'd jump straight into Rails and jQuery for something like this. Just devote 2 hours a day to making this app come true until it's done and when you look back you'll realize you learned a lot and are much more capable. Don't study for the sake of studying. *Do* for the sake of learning. ^^^Knowledge ^^^bombs.
Thank you! I always try to keep my hands on my keyboard. I'll check it out. Thanks again.
If it took him 827 hours, I'll get pretty damn close over this 40 day break. Thanks for that!
Thanks. I've done 12-14 hour study days before. I won't hate it because it is a life or death thing. If I want to achieve the lifestyle/goals I want, I have to learn to code. Thank you!
Thank you. This is a really good approach to answer this question. I know absolutely nothing. Since November 25th (15 days ago), I've started studying 6-8 hours a day consistently. I know how HTML works pretty well conceptually but I know very little HTML, I know how CSS works pretty well conceptually but again, I'd have to look up all the attributes and whatnot. I know absolutely nothing about what a database even is and I don't know much about programming languages but I've made some good headway in these past 15 days completely understanding concepts like variables, loops, pseudocode, statements, conditions, booleans, etc. It may be better summed up as: I know absolutely nothing. Strating from ground zero. I do have unlimited (that word used lightly) $ to purchase resources/books/tutorials if that helps.
Thank you!
XML is unnecessarily verbose, bloated, and painful and only when demanded by a project owner will I bring it up. But other than that its not too bad.
For the actual data itself, think about what you have to vend and what routes make the most sense. Second, think about what kinds of advanced options (queries, filters, data combinations, summary data, etc.) you want to provide. I think a lot of the comments you've received here are very valuable. If you want to provide an example of the kind of data you'll have I'm sure folks would be more than helpful in suggesting some reasonable routes for your API's.
I think you can be done with this in under a week with your hours. The only real issue is that you may not know WHAT you did, only that you accomplished your goal. My advice: Break the problem down. How would you do this if you had pen and paper? Or if you were to treat the computer as another person. What would that person need to do/remember/react to. What information is needed from the user of the application. What information is needed by the application? (I'm being intentionally vague, as to not seed ideas with my questions). Once you know some of this, having the application do it for you may be more clear (and then you can just worry about figuring out HOW to do it)
Thank you so much! I agree with you as well. I could definitely do this on my IDE or interpreter (where you run the program). I could probably do it now with exhaustive help from stack overflow and reddit. but what I can't wrap my mind around yet is how to get that piece of code online with pretty text and nice looking buttons. I'm guessing a lot of that is CSS. and I also know no javascript which I guess plays a part. Some pseudocode-ish guesses: (keep in mind I know absolutely nothing and these are from one day of reading) task = gets puts task (user would have to click a button and that would create some equivalent of a for loop that goes): for (i = 0, i goes on forever, i++) print "You have been working for i seconds" (when uses clicks button) stop for loop print i when check box clicked, print "You have completed #{task}" Thank you so much. Your questions have made it clearer for me and now I am slightly more optimistic about how quickly I'll learn to do this! Thanks again! 
I'll need to patch it a bit to work with fixed form and 72-column punch cards, but I am happy that this thing exists. ;-)
Thank you!
Basically what everyone else said, good documentation and examples, and don't ever break the published API/versioning. Make it easy for me who has never seen your API to get started using it. Don't ever change what you've published. If you have to introduce non-backwards-compatible changes, do it in a new version and support the new version for a reasonable amount of time. 
A good tip is not to worry about how it looks until the end. Get the functionality, then get the pretty stuff done last. Then once you have it working, refactor your code to make it work better / smaller / more efficent. You sound like you have a decent grasp already and the best thing to do is to set up a local server so you can start playing around! I find there are many great tutorials here https://www.digitalocean.com/community, from setting up a server, ruby tips, dns, everything. Should help you out a bit. I also recommend learning linux if you haven't already and doing a lot of your development on there. The terminal is great. Also check out Git and Github for version control, to store your code as you progess, and give you points to go back to if you mess up. 
Definitely checkout discourse and diaspora. Full fledged rails apps. 
Versioning is the hardest thing to execute correctly in my experience. Additive changes to an API are no problem, but subtractive and changes that conflict with backwards compatibility can be very tricky to maintain in the same code base. There are ways to do it, but having two APIs with conflicting behavior separated by versions is much more difficult that just putting a version number in the URL. I'm not saying versioning and not breaking an API its not important. I'm just saying there are times that not breaking an existing public API can be difficult.
One thing that drives me crazy about JSON APIs is that almost every one, is different from the last. There is little to no agreement about how to commonly structure an rest-based JSON API. There are some who are pushing to establish a convention for JSON restful APIs over at http://jsonapi.org/format/. I don't agree with everything that jsonapi.org suggests, but I like enough of it to put my personal preferences aside. Now if only there was a WSDL for restful JSON APIs :)
I get it, but is it kind of like definite that one has to ditch Rails when traffic exceeds say 100-200 million users with say around 100K requests per second and a peak request hit of around a million. (Assume a couple of standard DB lookup per requests; also assume no only simple text data is picked up from the DB)
Sure, I heed that :). But, just wanted some random perspectives too; but as we conclude, the 'random' experiment seems to be a failure ;)
Pardon my ignorance; I respect each one's feelings about me generalising the Twitter ditching rails episode. I have to thank you specifically for one reason: to pin point exactly what aspect required a specialised customisation that Rails wasn't good at: 'real time distributed messaging system'. I will dig deeper in those areas, just to get a feel of the limits of Rails. Its purely an academic interest; I understand that its meaningless to crack your head over this before my requirements scale to it.
Get it; so imagine what I want is a Yahoo chat room clone as a web app; will Rails scale? (Sorry for sounding blunt, just a silly question)
this should come in handy http://www.opensourcerails.com/
Another vote for diaspora from me as well. I found [gitlab](https://github.com/gitlabhq/gitlabhq) to be pretty good too.
&gt; But now, before even starting Sinatra, I am thinking to do some basic webApp without any framework (probably CGI based), just to get an understanding of what is involved at the lowest layer. [Rack](http://rack.github.io/) is the lowest layer and is what all ruby web apps use to interface with web servers. However, you'll quickly notice that it would be far easier to just use Sinatra or Camping than mess around with Rack on non-trivial apps. IMO, learning both the nuances of Ruby and server-side web app design patterns would help you more in understanding how Sinatra and Rails work than learning Rack.
MrJiks, I also took this same path, and dove into Rack, but eventually came to the conclusion that Sinatra is really the best starting point. You almost never need to dive below that level of abstraction. (If you do want to play with Rack, give it a day or two of your time, but not much more.) Make a handful of small but real-world database-driven web apps in Sinatra. Get them working on a remote server. Make some changes to the database, and push the code to the server. Get used to this process. Then rewrite them again with Padrino and notice if it's saving you time or not. You might not need the shortcuts it provides, listed at the bottom of http://www.padrinorb.com/ Then rewrite them again with Rails, and notice if it's making life easier than Padrino or not. Some (well at least I) went through this path, then found that Sinatra was all we really wanted or needed. Maybe your balance will be Padrino or something else. Rails is the most popular, but might not be right for what you need.
Proxying is not an HTTP job seen from the client's perspective, though. The client doesn't care about your internal infrastructure, and shouldn't have to. Furthermore, many valid HTTP codes *are* from the service and have no other meaningful interpretation: 201 Resource Created, 404 Not Found, 30x Redirects, 400 Bad Request (can be used to indicate invalid input data or even a resource validation error), and so on. For sure, HTTP status codes don't always map perfectly to the logic of your app, and it's sometimes awkward. But using HTTP status codes to indicate network errors is even more wrong. ;-)
Well, I would say this is the easiest and most readable way: my_variable = gets.chomp.delete(' ')
I've been looking at [teambox](https://github.com/teambox/teambox) from time to time for inspiration.
[camping.io](http://camping.io/) is small enough.
https://github.com/rails4fun/website
Discourse seems like it is full of hacks, and wierd stuff to make Rails do as they please. I am not sure if it is a good example of good ways to write Rails code.
Apparently, many are suggesting me the exact same thing you are suggesting, so I believe I should explain what I have in my mind: * I don't know what a port is. * I don't know what the building blocks of a server is. * I don't have much idea about TCP/IP stack apart from the name of the layers. * I still don't understand what Rack or CGI actually does. Or how the block functions. * My Ruby knowledge is just a couple of months old, though I went quite deep into it (I am yet to do Fibers, Metaprogramming and advanced stuff like those) * I have zero experience with coding for backend. * I wish to learn in real depth with excellent foundation. * Was trying to make a plan to complete the basic blocks of web development and start with Sinatra by start of 2014. * I am not a good planner, so wanted to make a realistic goal and complete a significant chunk by the end of this month.
It's also quite massive. (Though a lot of that is Javascript.)
This obviates the whole point of HTTP status codes. When would you ever use a 4xx code in your case?
Yes, probably! Just was checking whether there was something even smaller.
Funnily enough, I'm experimenting (for fun) with scaling a chat-room application with Ruby at the moment. Rails has VERY little to bring to the party for a chat rooms app (Rails is most suited for applications which require CRUD operations in some way) hence it uses Sinatra *purely* to provide stream support. It uses a mongodb backend and each *application* server can currently support about 2000 active users, but due to the *architecture* if I wanted to support 10,000 or 100,000 users I could just shard the DB, introduce more application servers and load balance via haproxy/nginx. Rails could do just the same but I just don't need (for a chat app) the features that Rails brings to the table. Again, the key to scaling ISN'T the language, framework, database or OS. Its the architecture and infrastructure. That said, I suspect that I could increase the number of users I could support *per server* by an order of magnitude with a different architecture and hence I'm experimenting with different ways to accomplish that. Is *ruby* the optimal language to implement this in with regards to performance? No, but it is VERY easy to experiment with this in.
Wouldn't recommend Discourse for just casual browsing. Tried to get it running on my Mac OS X environment and the test suite wouldn't work(though, weirdly, the app itself did). It seems like a fairly involved process to start tinkering with it.
Hey man, I think we have sort of the same story. I have some PHP experience when I was asked to do Rails. It's hard to learn Rails when you're learning Ruby too. So I thought of going with Sinatra. Try to make something small, like a basic CRUD app. The good thing with Sinatra is you can start with just one file. Then slowly add stuff to it. The DataMapper ORM. The Haml for templating. Sessions. Etc. etc. Half of the things you said, well they matter but not in the immediate future. Good luck.
Thanks. Sorry for being pedantic but figure for a beginner (the OP) they should get that kind of love straight from the start :)
I think this backwards, if your learning objective is to learn web development. Do you want to learn about developing web applications, or do you want to learn about web servers and Ruby? If it's the latter, muck around with Rack. If it's the former, you might want to reconsider: learn Rails. Most of what is involved in being a good web developer has very little to do with HTTP. It's everything to do with abstracting a set of business logic into code. Some will argue that Sinatra with it's lightweight framework is ideal for a beginner. This is backwards. Sinatra does less, so you must do more. Rails does more, so you have to do less. Sintra is not a beginner's framework. It's an expert's framework. Rails is not an expert framework, but can be used by experts very powerfully. I must also add that Rails experience is far, far more marketable right now than Sinatra, and that's likely to remain the case for at least a couple of years. Think about what it is you want to learn, and make the choices based on that: if you really want to learn about HTTP, go ahead and do what you want to do. But if you want to build full-blown applications? I think you're wasting your valuable time on detail you probably don't need to concern yourself with right now.
Nested hashes can be accessed like your_hash[key1][key11] but you must be interested in an iterative way to access them. You can write a function that takes a hash and a series of keys and returns the value found at the end which will raise an exception if there are any missing keys along the way. Take a look here: http://stackoverflow.com/questions/13259181/what-is-the-most-ruby-ish-way-of-accessing-nested-hash-values-at-arbitrary-depth By the way, you really ought to use symbols instead of strings (call to_sym on the ones you create dynamically from data) as you will use less memory and I think the access is faster.
 def foo(key) keys = key.split('.') keys.inject(myhash) { |memo, key| memo[key] } end foo("key1.key11") =&gt; "value11" 
This is the repo for the sample_app you build in Michael Hartl's tutorial. https://github.com/mhartl/sample_app
@Piterniel Yep I have see that on stackoverflow I prefer refactor my app. Use a "fake" format instead a real and natural format disturb me .. I think it's not really clean (in the context of my app)
you could always subscribe and just wait for them all to come in before you read. but different people learn differently. a regular reminder is nice. sometimes people (myself included) can read something, move on, and forget the lesson quickly. "repetition is the mother of learning" and all that.
I prefer x = gets.gsub(/\s/,'')
You can use the 'reply' link located under an user's comment to reply to that person directly, and they also get a new message notification so they can read your reply easily.
I'd definitely prefer to use `gsub` if I was trying to implement something serious but for the sake of silliness I prefer my approach.
Dragonfly is yet another highly customizable ruby gem for handling images and other attachments. No idea what distinguishes it from carrier wave or paperclip.
Good point. Disregard symbol tip unless the keys are from a controlled source.
Should've checked your comment before crawling through that site to find out what it is.
The API service wouldn't. In fact, the API service would only ever return 200.
HTTP codes aren't used to indicate network errors, rather they indicate errors in the HTTP layer. I treat the API as a protocol built on *top* of HTTP (and maybe this is fundamentally flawed) and therefore have their own codes independent of HTTP.
 jruby-1.7.8 :010 &gt; {"key1" =&gt; { "key11" =&gt; "value11"}, "key2" =&gt; {"key21" =&gt; "value21"}}["key1"].keys =&gt; ["key11"] jruby-1.7.8 :011 &gt; {"key1" =&gt; { "key11" =&gt; "value11"}, "key2" =&gt; {"key21" =&gt; "value21"}}["key1"].values =&gt; ["value11"] jruby-1.7.8 :013 &gt; {"key1" =&gt; { "key11" =&gt; "value11"}, "key2" =&gt; {"key21" =&gt; "value21"}}["key1"]["key11"] =&gt; "value11" Hopefully something there helps...
Fair question, it's sort of the nature of an email course. I've found the drip course-style to be effective because it's biting off small bits at a time. It gives me time to think about the concepts with the extra day in between. Alternatively, I could've just written a 5,000 word blog post and called it quits. However, that's a different mechanism for delivering content and I don't do well with that much all at once. So to each his own...hope you still check it out!
Thanks for sharing your journey. Though I dont have the exact story I am starting a dev camp on Monday and plan on getting job as jr dev in 12 weeks. I havent done hartl's book but have done the codecademy course and felt the same you did with rails for zombies. Maybe one day I will try that again. 
Ruby has a built-in [GC::Profiler](http://ruby-doc.org/core-1.9.3/GC/Profiler.html) and 2.0 added [profile.rb](http://www.ruby-doc.org/stdlib-2.0.0/libdoc/profiler/rdoc/Profiler__.html). $ ruby -rprofile -e 'puts "hello world"' hello world % cumulative self self total time seconds seconds calls ms/call ms/call name 0.00 0.00 0.00 1 0.00 0.00 TracePoint#enable 0.00 0.00 0.00 3 0.00 0.00 Thread.current 0.00 0.00 0.00 1 0.00 0.00 Mutex#lock 0.00 0.00 0.00 1 0.00 0.00 MonitorMixin#mon_enter 0.00 0.00 0.00 1 0.00 0.00 MonitorMixin#mon_check_owner 0.00 0.00 0.00 1 0.00 0.00 Mutex#unlock 0.00 0.00 0.00 1 0.00 0.00 MonitorMixin#mon_exit 0.00 0.00 0.00 2 0.00 0.00 IO#write 0.00 0.00 0.00 1 0.00 0.00 IO#puts 0.00 0.00 0.00 1 0.00 0.00 Kernel#puts 0.00 0.00 0.00 1 0.00 0.00 TracePoint#disable 0.00 0.01 0.00 1 0.00 10.00 #toplevel 
I actually wrote a gem for this exact purpose: https://github.com/patricktulskie/deep_tree Basically, sometimes you don't know whether or not the end leaf is there and this handles it for you.
Dragonfly will save one version of the media and then cache the results using Rack::Cache as different formats of that media are requested. In contrast Paperclip will generate all image sizes when you save your record. If you change the definition of wide image from 240x320 to 240x360 you will need to regenerate your images in paperclip (iirc). However in dragonfly that is not required as the new images are generated on demand. Obviously there are trade-offs in the different ways of handling things.
[God](http://godrb.com/)?
Any time. If you're going the Rails route, remember that the process doesn't run all the time, but rather is event based (the user loads a webpage, which is an event) As an example, when you are looking for time that the user has been working on something, an event-based method may be to create a timestamp when something starts, then when they ask "how long have I been working on this?", you can subtract the timestamp from the current time. I hope that gives you a good place to start while still not ruining your learning experience.
It was closer to something like [stratify](https://github.com/jasonrudolph/stratify), but not quite. You could write your own collectors, but rather than data from them appearing in one big timeline, you could route events generated by those collectors to other collectors/event handlers (like a digest email collector, or an SMS notification system). So basically, you could collect weather data all day, and if the forecast included rain, you could route it to a digest email that fires off every morning at 7am. The guy had written a bunch of really cool pre-existing collectors for polling all kinds of different data sources (weather, amazon, ebay, IMAP, rss, etc), and the project seemed really well maintained.. I don't know why I'm having such a hard time finding it now :(
Was it [huginn](https://github.com/cantino/huginn)?
Dtrace is awesome
Indeed my final goal is what you mentioned initials; but I find it difficult to work on something especially something like programming, without understanding the underlying details; though I am pretty convinced about this, I find many expert developers advising me against this route; may be I am too naive that I am not understanding its pointlessness. But may I ask: will spending 3 weeks or say till the end of this year to understand such details such a waste of time? Won't I be a better Rails developer with all such knowledge? Won't be able to see fundamental design reasons why something is the way it is; and perhaps even be able to extend the current functionality as I gather experience? Perhaps, the way I understand everything from a very young age is like this; that I am trying to replicate it at this too. Please feel free to correct my mistakes as time is of critical value to me now.
Next silly question: I am not sure what I am asking even makes sense. So please excuse. Will using Ruby throughout and using another language such as Erlang or Node when such specific requirements come easy or practical? That is, building wrappers to all other components implemented in other languages that finally its all better managed in Ruby?
There aren't any blanket rules; it depends on the specific problem and as said, ANY language *can* scale. 
https://github.com/LTe/bundler-bower
It might make you better informed, but a better Rails developer? No. I'm not sure it will. Understanding agile processes; listening to people; Improving your communication skills; learning design patterns; reading the best books and blogs and applying that knowledge These are things that will make you a better developer. Writing code is one piece of the problem and good developers learn what they need to when they need to, not just because it's there. 99% of developers have never looked at the internals of Rack because they don't need to. Right now, that is not the most valuable thing you can focus on. If I had to write a list of 100 things you should learn right now, I'm not sure that would make the list, and if it did it would surely be towards the bottom
Why not Rubbit 2 the Electric Bugaloo
I will do that ! Thx
Hum, interesting. I check that and give you a feedback
Sadly neither have the granularity I needed. I'm actually somewhat surprised at just how basic GCs output is. And in the case of profiling I need more detail on the time for each call on a particular method do that I can graph it....
yesssss, oh god I love you.
I write my programs in Sublime Text 2 and use irb in the Command Prompt to run the programs. What is it that is not working for you?
That's a great example. Thank you.
I'm disappointed this is down voted, it's a completely reasonable thing to be confused by if you haven't used unix 
Title should be "deploying refinery cms using shelly cloud."
Oh boy. I somehow missed irb. I don't remember doing anything with it. I will check when I get home from work today. 
Here's my guide to deploying RefineryCMS: 1) Try not to
haha. yea bit. it is pretty easy to setup.
Would be cool if we could see all of the slides!
Rails 3.2? Good luck trying not to get owned by script kiddies. 
I'm pretty impressed, but install seems...rough.
The odd part here is that `validates` checks its arguments, so one of the two blindly accepts garbage arguments and the other kind of doesn't.
Awesome find, I should add it to the article.
Yes. These settings used to be particularly useful back before rdoc got a massive refactor and performance boost. Nowadaysit should be OK.
Thanks, I would probably shouldn't spend more than a day or two below Rack I guess.
I looked at it; certainly looks like what I want! But, I doubt whether they assume prior Rails knowledge?
There anything better in the rails world?
AT&amp;T sponsored hackathon? no thanks.
I'd say you already possess all the procrastination skills required to become a first class ruby coder in Sinatra or any other framework.
Yes, MVC!! Thats one thing I missed to give proper emphasis!! .. Thanks!
Thats flattering :) .. now let me try to live up to that guess :)
Can't believing I am seeing this!! I have been looking for something like this for weeks!! I am so happy to have this write up!! Cheers my friend for this great work. Wanted to learn all the minute details that went into the framework!
I'm interested. Are you using Ruboto?
Hashes, know what they look like and how and when to use them. You will see hashes everywhere in rails. 
None, just jump in.
jsut go for it, fear is the only thing stopping you from learning anything http://www.ted.com/talks/tim_ferriss_smash_fear_learn_anything.html 
I didn't know any of that shit when I started with Rails. Just jump in and you'll figure out what you need to know soon enough.
Yeah, I can see that it's quite a big investment just to try it out, but I can say for certain that it has saved me a lot more than that each year in terms of efficiency and the time I've saved building apps with Ruby versus working with Objective-C. I couldn't say for sure, but I'd imagine many Rubyists would see a similar positive return on their investment.
Well, I am thinking of Sinatra itself; but a more thinner version of it [Almost Sinatra](https://github.com/rkh/almost-sinatra); which at just 10 lines of code, seems to be the best way to understand the fundamentals. But I wish to learn Ruby to a mastery level before going into this. Thats why I was making a check list of the 'next level' concepts to learn.
Thanks, will surely see it.
Well, I somehow learn quite differently; anyways thanks, many commented in a similar way, which makes me feel the framework is pretty easy to grasp.. :)
In my opinion, all you really need is Ruby knowledge. And to get it, just do [the RubyMonk tutorials](https://rubymonk.com). Really fun and super helpful!
Don't obsess over testing at the start. Test-driven development is almost unanimously agreed-upon as the way to develop in Ruby. HOWEVER, it's not realistic to TDD from the start. When doing tutorials (e.g. Rails Tutorial), skip all the testing stuff the first few times through. You definitely want to get to TDD eventually though.
I'd recommend spending some time with SQL in order to learn how Active Record works under the hood. Metaprogramming also helps in that regard, at least for Rails. 
Not a forum per se, but Thoughtbot has a pretty good podcast series. http://podcasts.thoughtbot.com/giantrobots Also, this is a great weekly newsletter. http://rubyweekly.com/
Just jump into the Rails Tutorial. http://ruby.railstutorial.org/ruby-on-rails-tutorial-book It covers the MVC/Ruby part. As for HTTP/Rack/CGI, those are concepts that I gradually absorbed through constant "so that's how that works!" moments after I was already somewhat Rails-proficient. Skip all the tests your first time through. (You should still read the test sections though, because that's where he's explaining what he's doing.) I think Rails is a better introduction to Ruby than Sinatra/Padrino not because of the specifics of the framework, but because there is so much more information regarding Rails on the internet. You should be able to find all the resources you need on the internet for free. 
Hmm that's good to hear. I'd definitely much rather write Ruby than Objective-C, but then I think "Meh, I already started this in Xcode... might as well tough it out." But if it's a real efficiency boost, maybe I should just take the plunge.
Another satisfied rubymotion user here. It's so much more pleasant to write stuff in regular ruby than obj-c. Want a new class? 2 lines of code (class YourClass; end). Need to monkey patch something? Just do it. Need an interface? Just implement the methods. You still have to twist your mind around the native library and interfaces, but the code you write is beautiful (assuming you find ruby beautiful). RubyMotion had a lot of teething issues with ARC and memory management 6 months ago, but it's pretty damn stable these days (I have an app with 3k+ DAUs and I haven't had a sigbus in weeks). Also the CLI build system is great. And yeah, $200/yr (if you want to continue getting updates), but that's what, 2 or 3 billable hours? I will say though that Obj-c is getting a lot better with literal syntax and Xcode now has some nice CI and debugging tools that you have to forego (Instruments and RubyMotion is a crapshoot). But RubyMotion has made me a better obj-c developer, so I think it's worth it. 
Check out learn bash the hard way then go on to ruby or any other language
Intermediate level Ruby is good enough. If you look at enough rails code (models, controllers...) you will see that it is not some magic thing. It is just a collection of Ruby classes that are easily extendable and customizeable. Also I don't have too much rails experience (less than 1 year, been iterating on a project idea of mine for a while) and am starting to get the hang of the 'rails' way. Start off with something simple like a blog (I'd recommend following a tutorial, and also trying to build it on your own too!). After you spend some time looking at rails tutorials, you can start to see all the possibilities and the ways that rails makes web development easy!
Railscasts has the source code for the site on github, in addition to the code for the individual episodes. https://github.com/ryanb/railscasts I see Reddit has its source code on github as well. Alas, it's in Python...
&gt; treat the computer as another person That's a really good line.
Any luck finding the one you recall?
You need to Google: "command line &lt;your operating system&gt;". That will show you some instructions on finding your prompt where you can then enter commands. Having been a CS major myself, I'd assume they have taught you some basics about navigating a linux command line in the first few years but I guess it depends on what kind of school you go to. Maybe they just showed you an IDE and told you to hit some compile button? If they aren't teaching you that, you really need to take the time to learn it on your own. It's 100% necessary in my opinion. I have to assume you are on a mac or windows machine. Look up a tutorial on how to use their underlying command line tools. You don't have to learn bash right away. You just need to get comfortable with creating and entering commands. Keep in mind that user interfaces abstract away the details of the operating system. If you want to develop good software you will need to get comfortable with interacting with your OS on a lower level closer to it's own language. 
No, I am kinda pissed that I can't find it anymore, it was a well written material. I might give it another try searching, I'll post it if I do.
http://parley.rubyrogues.com/ is really good. But it's not free. That's also maybe why is good ;)
+1 Parley is fantastic.
use Sinatra proper. Almost Sinatra is a nifty piece of work, but it's not intended for real use. also the Sinatra code base is very well regarded. it's worth browsing and is not large.
Yeah, it's so fantastic that I can't view a single thread!
I did something like this 3 years are with just MacRuby. https://github.com/robertlowe/mynu I haven't done much with as it was just an exploration into MacRuby.
I went to the site and they keep using the word hackathon....I don't think they know what that word means....The description ways their hackathon is basically building an app in a short amount of time. I would think a hackathon is compromising a system in some way 
RubyGems is built-in. Shouldn't have to do anything else.
Sure
I'm a junior rails dev but would be willing to help you out with some questions if I'm able to. It would probably help me as well, because explaining things to others will cement it more in my mind. PM me with your email and I'll shoot you a message. 
I tell everyone who will listen to read Michael Hartl's Rails tutorial. The first time I read it it was way over my head. Then I read The Ruby Programming Language published by O'Reilly. Then I went back to Hartl. I'd hardly call myself an expert (I'm actually looking for my first programming job now) but I really think that combination was really really good for me.
I will give it a go. Http://github.com/CloCkWeRX for context
If you're willing to put up with the signal:noise/cats ratio, following people like the ruby core and rails core developers on twitter is an excellent way to listen in or be part of the conversation.
PM me and I'll give you my Twitter handle. 
Went from a high school C++ class to a live heavy-load Rails app 4 years ago. Rough climb up that mountain; PM for contact.
Despite being Admin, I get $ gem install jekyll ERROR: While executing gem ... (Gem::FilePermissionError) You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
That explains why it throws up a permission error.
Thanks, have subscribed to the RubyWeekly feed :)
Yes, I see that this subreddit is pretty active! Got some amazing responses to my questions! Was thinking whether this was the most active :)
Ya, have followed a number of them; but the issue is the tweets ends up just getting lost in the chatter; the SNR is too low ;)
The straight code is really ugly. What is wrong with: def straight(cards) cards.sort.each_cons.all? {|a,b| b==a+1} end i.e. for a straight, each pair of consecutive cards must be adjacent and then small straight can use the straight function with slices, either of which must be a straight.
There is a paid forum/mailing list? Hmm, then it should be pretty good :)
There is no such thing as admin on OSX, that is a Windows thing. On UNIX, there is a single super user called _root_, which on modern UNIX systems you don't log in as. Only the root user can modify system files! If you want to temporarily grant yourself super user rights, put _sudo_ before the command and write your password (identical to the root user password if yours is the only user account) when it prompts you to: &gt; $ sudo gem install jekyll Edit: never mind, I can see you in your edit that found this out yourself 
I bought RubyMotion in late 2012 but unfortunately I got busy with other projects so I didn't even get a chance to try it and now my license has expired and I can't get any updates. :/ not even up to the date at which my license was still valid, which sucks. So I'm stuck at 1.2 something. 
Stack overflow, Ruby rouges podcast, Thoughtbot podcasts
Nicely done. Could you add the ability to either sort by distance or job posting date when you select the given suggested location ?
And know the difference between proper MVC (Smalltalk-style), MVC as it's used in most languages and frameworks today, and Rails MVC. They are *not* the same things in *very* important ways, and if you go into Rails (in particular) with the assumption that "MVC should Just Work pretty much the way it did in Language X and Toolchain Y that I used before", you *will* fall off the cliff after being led down the garden path. The landing, several kilometres down, is…*unpleasant*.
Tod: the deadly task manager
What if you're playing 7-card stud?
This looks pretty slick. Have you seen [Todo.txt](http://todotxt.com/) which is essentially a text-based file format for handling todo lists? Essentially the format allows for due dates, @Project tags, +Contexts, and Priorities (A), (B), (C), ..(Z). I used todo.txt for years and synced the the todo.txt file in dropbox to multiple computers and my phone. I only recently stopped using it in favor of Trello.com because that seems to flow better with how I think about tasks. 
Thank you!
I have done the first two there; I have to resume from Metaprogramming. Wish to do it after completing the same topics in Pickaxe and building a simple gem.
Phew, I was just born in 85 :). Thanks a lot for your time! I have in queue to download Uncle Bob's video. Will definitely see it! And will also read POODR. Off-topic: May I ask your opinion on a plan that I am devising to prepare a checklist? I wish to chat with you, if its not too much to ask. May I PM you?
I think, I am fairly convinced that I wouldn't dive into Rails, and I will be in Sinatra + plugins or Padrino land till I have no other way out to use Rails. I feel, that will make my foundations strong.
Oh thats news! Can you give me some pointers to search for? I guess I should spend quite some time learning about MVC.
Because Almost Sinatra is just a game. The creator of Sinatra wanted to see how much functionality they could jam into 10 lines or less. Thinking that because it's 6 lines it will be easy to interpret couldn't be farther from the truth. In order to get the code down to 6 lines he has to resort to insanely obfuscated code that violates boatloads of recommended practices all for the sake of brevity. You will learn far more from reading and working with the standard Sinatra code base than from trying to understand those 6 lines of brilliant insanity. Sinatra proper is very clean and bare-bones already, you won't find much in the way of cruft. THAT is code you should appreciate. Almost Sinatra is clever but not going to teach you any useful design patterns, especially as a beginner. I don't really understand your interest in using it. Is it just because it's 6 lines? Have you seen those 6 lines? %w.rack tilt date INT TERM..map{|l|trap(l){$r.stop}rescue require l};$u=Date;$z=($u.new.year + 145).abs;puts "== Almost Sinatra/No Version has taken the stage on #$z for development with backup from Webrick" $n=Module.new{extend Rack;a,D,S,q=Rack::Builder.new,Object.method(:define_method),/@@ *([^\n]+)\n(((?!@@)[^\n]*\n)*)/m %w[get post put delete].map{|m|D.(m){|u,&amp;amp;b|a.map(u){run-&amp;gt;(e){[200,{"Content-Type"=&amp;gt;"text/html"},[a.instance_eval(&amp;amp;b)]]}}}} Tilt.mappings.map{|k,v|D.(k){|n,*o|$t||=(h=$u._jisx0301("hash, please");File.read(caller[0][/^[^:]+/]).scan(S){|a,b|h[a]=b};h);v[0].new(*o){n=="#{n}"?n:$t[n.to_s]}.render(a,o[0].try(:[],:locals)||{})}} %w[set enable disable configure helpers use register].map{|m|D.(m){|*_,&amp;amp;b|b.try :[]}};END{Rack::Handler.get("webrick").run(a,Port:$z){|s|$r=s}} %w[params session].map{|m|D.(m){q.send m}};a.use Rack::Session::Cookie;a.use Rack::Lock;D.(:before){|&amp;amp;b|a.use Rack::Config,&amp;amp;b};before{|e|q=Rack::Request.new e;q.params.dup.map{|k,v|params[k.to_sym]=v}}} It's also not really the same, hence the "almost" (surprise, you can't actually reduce ~2000 lines of good clean code down to 6). To paraphrase the creator in the following video: "A lot of the methods where you can say GET that, POST that don't really work properly but for any simple enough Sinatra app you will not notice. ... It does not matter if you use GET, POST, PUT or DELETE it actually just uses the Rack map method" "it also means that when you say /foo it also matches /foo/something" http://rkh.im/almost-sinatra He defines all methods on the top level Object class, so every single object in the Ruby universe inherits every single method in Almost Sinatra. I could go on and on. It's clever, but it's not a real tool, it's a fun hack that employs tricks you should probably never use. Start with the real deal, don't use Almost Sinatra.
 def all_consecutive(cards) cards.sort.each_cons.all? {|a,b| b==a+1} end def straight(cards, length=5) cards.sort.each_cons(length).any? {|c| all_consecutive(c)} end def short_straight(cards) straight(cards, 4) end 
Let me know if you find it, it sounds awesome. 
If you'd like to start closer to the metal than Sinatra, check out Rack. http://www.rubyinside.com/building-your-own-fake-sinatra-with-rack-and-metaprogramming-3837.html
Ah, I stand corrected.
Wow, thank you so much for that.
I don't understand what benefit there would be for the other person or how that person could even make a difference for you. Unless you're talking about someone teaching you out of the kindness of their own heart which of course would be entirely one-sided. If you have a plan and you want to learn, then do it. You're the only person that can do that for you.
Although it's not exactly what you're asking for, maybe you'd be interested in this article -- it shows you how to implement a minimal HTTP file server in Ruby, using nothing but some standard libraries: https://practicingruby.com/articles/implementing-an-http-file-server?u=dc2ab0f9bb
Yeah, my thoughts as well. Refinery has some warts, but I've found it useful in a few projects, and am currently using it for another now. Could be better, but its serviceable, especially after I figured out everything to override to make it make sense.
Thanks a lot, I am so impressed with articles too!!
Thanks, will definitely will go through that first!
No problem. Good luck. 
I can't express my gratitude!!! You are right, I understand what it is now! Just wished something like that existed, which was bare bones. Probably, I would checkout the other video you suggested! note: having said that; I wasn't going to look at those 6 lines you quoted; I was specifically thinking about this blog: http://robm.me.uk/2013/12/13/decoding-almost-sinatra.html But I feel now, that too isn't a good way as it might only introduce anti-patterns into me as the author was looking for brevity rather than elegance of the architecture. 
Sure, have added TDD/BDD to the list .. thanks
Yes, relational DBs and Metaprogramming should be in the list too! I have no clue about both :(
Hacking has many meanings. http://en.wikipedia.org/wiki/Hacker_(programmer_subculture)
I'm interested. One of my favorite hobbies is taking things apart. I have written a few web applications, but none which are shining examples of good design. PM me if you want to share contact info.
I'm probably close to a senior developer, and I think we share the passion you describe for examining how things work. I've been diving into Ruby over the past year and I'm liking what I'm learning. Let me know how I can help!
Instruments partially works with RubyMotion but some of the features are pretty tightly bound to XCode or Objective-C and HipByte/RubyMotion provides no in-depth documentation about what may or may not work, hence it being a crapshoot. e.g. You can use it to analyze memory usage, but can't use the UI automation stuff. 
Yes, will check it out today itself; funny, I never went into it till now!
Thanks a lot for offering to help; such a senior talent in the team will definitely help us!! Will PM you and discuss.
FYI, the convention in the Ruby world is for tabs to be two spaces (not a hard tab). And while we're talking about indentation, all your elsifs should be in line with their parent if. if foo do_this elsif bar do_that elsif baz do_something_else end You set `lineWidth` to 40, and then divide that by 4 nine separate times. Why not set something like `align_column = 10` and just use that? Good start, though. Edit: Since I'm here... All your big or's at the end. If you want to be more Rubyish, personally I'd probably change that to an array include. So rather than this: if (win == '-2' || win == '-4' || win == '-6') you can rewrite it like this: if [-2, -4, -6].include?(win) 
how are you escaping your variables? If you're doing it by hand, SQL injection is still very viable.
A case statement might look cleaner. You can also conditionally assign variables with case or if/else: user = if user == '1' 'Rock' elsif user == '2' 'Paper' elsif user == '3' 'Scissors' end user = case user when '1' then 'Rock' when '2' then 'Paper' when '3' then 'Scissors' end Multiple conditions can be passed to the "when" lines: case win when '-2', '-4', '-6' then .... end
Just as a heads up, I'm going to be overly critical here so please do not take this personally or feel like I'm trying to rain on your parade; Writing your first program is exciting and I'm glad you got it to work, I have no intention of dismissing your work, but it might seem that way from my comments. Also keep in mind that some of this may be common in the Ruby world but it is also mostly my opinion, so do not think that I'm providing hard and fast rules by any means. First, as /u/LoveGoblin said, you should stick to tabs that are converted to 2 spaces. At the very least, everything should be consistent, and it isn't. On that consistency note, sometimes you have puts with a bunch of arguments (granted they are blank lines) and sometimes you don't. Why the distinction? I think I personally would have separated them all out, which might look silly, but then that makes you think "why do I need all of these blank lines in the first place?". You probably don't, unless maybe this was for an assignment or something that required them. Remove the extra blank lines as they are unnecessary. Perhaps you wanted to be consistent here, but line 17 is a no-op. gets.chomp already gives you a string. Similarly on line 35, there is no need to convert win to a string. You should do your comparisons with integers, so it would look like this: win == -2 || win == -4 || win == -6 Also as /u/LoveGoblin pointed out, you should convert that to an include, and drop the parenthesis on the if statement so that it reads: if [-2, -4, -6].include?(win) Edit: Sorry I accidentally submitted without finishing...typing more now... I think your variable names could be slightly better. Points for not using single letter variables, but I still don't think "user" is a good variable for the user's input. It reads more like it's an actual user object, but it isn't. Same with "computer" and "win". I would expect "win" to probably be true or false, not a number. Also lineWidth should be snake_case (line_width). One thing I think is missing is methods. You should extract common functionality out into a method name that describes what is happening, and then you can call that method. For example, this: if user == '1' user = 'Rock' elsif user == '2' user = 'Paper' elsif user == '3' user = 'Scissors' end Could be turned into something like this (this also assumes you are not using a string anymore): def determine_user_choice(numerical_value) case numerical_value when 1 then "Rock" when 2 then "Paper" when 3 then "Scissors" end end Then you would call this method and pass it the value you wanted, it would probably look like this: user_choice = determine_user_choice(user_input_value) This helps you read your program a bit, because if you care exactly how the user's choice gets determined, you can go look at that method. If you do that for all the other code you have, your program might look something like this, and it should be very easy to tell what's going on: greet_user_with_welcome_message user_input_value = get_user_input_value user_choice = determine_user_choice(user_input_value) computer_choice = determine_computer_choice winner = determine_winner(user_choice, computer_choice) output_win_lose_or_tie(winner, user_choice, computer_choice) Note that also, I've kind of changed your algorithm a bit here, as user_choice and computer_choice now hold the actual choice they picked ("Rock", "Paper", or "Scissors"), not the numerical value. In this case, you would have to change the way you compare how the user wins or loses, and you may not want to do that, but as I wrote above, that functionality would be contained in the "determine_winner" method, and if you cared to look at how it was implemented, you could go there. I realize that most of this is probably overkill for a simple rock paper scissors program, but hopefully it helps. Let me know if you have any questions, happy to help a new recruit to the Ruby world :)
I got some great feedback last time I posted v0.1 to reddit. I used to use a yaml file for configuring the translation. Making the switch to ruby has provided a lot more control over the returned values. I'd love some more feedback on what else could be useful to add.
Are you using nginx ? I had the same issue, with assets then i ran the below command and it was fine rake assets:precompile
Wish I could help, but I don't hire folks - [tweeted it out for you though](https://twitter.com/aspleenic/status/412651279832215552)
Hmm...looking at your GH it's fairly recent. As is your blog and your twitter... Could this be some sort of troll that my good natured side has unwittingly been compelled to tweet about?
In addition to what everyone here as said, sometimes its a good idea to split your code into smaller functions. For example you may want functions like this: def player_move #player move code end def computer_move #computer move code end def win(player_move,computer_move) #determine who wins end def game #initialize the game end Even if they are simple 1-2 line functions, they will make your code look a lot cleaner and easier to maintain in the long run. If this is one of the first things you have programmed, it's a great start and you will only get better! 
I jumped all over this and it really cleaned things up a LOT. I kept thinking when I was first writing, "I bet an array would make this a hell of a lot easier..." I just wasn't sure how make it check if the variable was within the array. So thank you!
I'm going to try this out later when I get off work. I was running into collisions with 123 vs 123 the first time around so I wanted to ensure that each result had a different sum. Thanks for the tip!
I hadn't used the case text substitution before. It is awesome! :D
Hello! I'm the author. What I say in the introduction is that you should have written one medium-sized Ruby app, or a couple of small Rails apps. You can also get the first few chapters on my site in exchange for your email address -- feel free to get started and decide if it's a reasonable level for you. 
&gt; represent the numerical mapping This confused me a little bit and I had to reread it a couple of times. It will give me something to work on tonight when I get home. &gt; user entered a VALID choice I wasn't sure how to go about that just yet but it is on my to do list. I haven't played with loops yet. Is there a way to say if 'player' != within a range (1,2,3) then etc.? **edit:** Wait! Idea: valid = [1, 2, 3] if valid.include?(player)
Defining functions is something I have yet to try. But duly noted! I might PM you later about this should I run into any trouble getting them working. But yes this is my first program! I've dabbled with some smaller scripts just from going over material but this was my first; "I have an idea and I am going to make it!"
Don't worry about being overkill. This was exactly what I was hoping to get when I said that constructive criticism was welcome! You explained things really well and it helped me understand how things should fall into place a bit better. Originally I wanted to compare actual choice to derive a winner opposed to a numerical value but could not get it to function correctly. I stepped back and came up with the current method (see edit) until I got a little more comfortable with things. I haven't covered a lot of ruby material yet and I felt I had just enough to make this idea of a game work. It really had me trying to think outside the box and use what little I knew to make it happen.
You may want to edit your link. As it is, it produces a 404. The gemfile doesn't really say much (except that you're using both unicorn and thin in production). I think you'd be better off linking to your apps main repo, if 'rake assets:precompile' suggestion by leo doesn't pay off.
The best way to learn is to just make stuff, so you are going in the right direction! I'm self taught and trying to make a career change to become a developer, so I know the struggle you are about to get yourself into. Just keep at it and it will get easier!
Rewrite for [Rock, Paper, Scissors, Lizard, Spock](http://pennysrandomlife.blogspot.ca/2012/04/rock-paper-scissors-lizard-spock-and.html) then you've got a game!
Challenge accepted.
Indeed! Ternaries can also be useful: var = something == something_else ? do_this : do_that
Rails 4 doesn't have `initialize_on_precompile`, so disabling it won't have any effect. I wrote about [deploying Rails 4 on Heroku](http://new-bamboo.co.uk/blog/2013/07/18/deploying-rails-4-on-heroku), which offers some tips for getting things working, but the gist is that you probably need to do the following: $ heroku labs:enable user-env-compile --app=YOUR_APP # config/environments/production.rb config.serve_static_assets = true This was from almost 6 months ago, mind. I've not deployed a Rails 4 app since to know if Heroku have smoothed it out. 
I would use: PLAYS = [:rock, :paper, :scissors] PLAYS[user.to_i - 1].to_s.capitalize Reach nirvana by representing logic as data. You have an implicit mapping between the user plays: * Store them as an array of symbols * get the user input (which is just a reference to where in the array the play is stored) * then fetch the correct array index (array indexes start with 0, not 1) by converting the user text input into a integer and subtracting 1 * then convert the symbol to string and capitalize it. 
I am not using nginx, I also ran rake assets:precompile but it still did not work.
I have edited the link. I have done that but it still does not work.
From the readme on the github I linked: &gt; Need to escape something first? &gt; escaped = client.escape("gi'thu\"bbe\0r's") &gt; results = client.query("SELECT * FROM users WHERE group='#{escaped}'") 
Do you get any errors when you push your updated code?
It is still the same, when I pushed the updated codes. 
Thanks for the heads up! But, I am somehow looking at the possibility to start at a bit more lower level; making web apps without any framework initially and then moving to Sinatra or Rails. Probably, I am looking for rebuilding-sinatra? :)
Congrats on the first program. It looks great. Regarding the case statement, in case you find it confusing as I did when I first started, a wordier way to write it would be like this. case player when '1' player = 'Rock' when '2' player = 'Paper' when '3' player = 'Scissors' end btw, I didn't know about "ljust" so thanks for that. I'd just today written a longer solution for that! def make_5chars(obj) obj.to_s + " " * (5 - obj.to_s.length) end EDIT: fixed code formatting.
do you know what is 404ing on console end?
Neat! 
I added a comment on the gist for you. Hope it helps. https://gist.github.com/jacobsmith/7998115#comment-970634 As for links - the rails guides are very good: http://guides.rubyonrails.org/association_basics.html
"Terminal Wedding" can't be good luck! 
Which gem did you install from rubygems? From what I can tell the snooby gem on rubygems isn't the linked repository; the gem corresponding to that repository appears to be SnoobyPlus.
I installed 'Snooby', and after looking at SnoobyPlus, you're right. Thank you! Now to get this new gem working...I'm getting this error when requiring it: NoMethodError: undefined method `datadir' for RbConfig:Module from /Users/drwl/.rvm/gems/ruby-2.0.0-p247/gems/SnoobyPlus-0.4/lib/SnoobyPlus.rb:10:in `&lt;top (required)&gt;'
It looks like you might have 2-3 underlying issues: 1. RVM might not be installed in an ideal way. Normally you shouldn't need to sudo anything. 2. Given there is no mention of gemsets in your issue, you might be installing everything into the default ruby. 3. You might not even be using an RVM controlled ruby. That might be the system ruby, which would explain the path its on, which definately doesn't look like RVM. Its also not the up-to-date patch, which is p353. Some linux and osx distributions have ruby pre-installed, which is usually just a pain-in-the-ass because its rarely set up how you would want, and we usually need to manage multiple versions. Most people use RVM or rbenv I would recommend running the following commands, and reading up a little on how the gemsets work, they allow you to keep everything isolated and therefore easier to control rvm get latest rvm install 2.0.0 rvm use 2.0.0 --default that sets the rvm ruby to be the system default rvm use 2.0.0@jekyll --create that uses a named gemset for putting jekyll into, and will create it if it doesn't exist, then gem install jekyll at that point, your jekyll, and all the other gems it uses are in a gemset (also called jekyll), and you can switch to that for jekyll projects.
I just wrote a gemspec file for the Snooby repo. 
What's a command prompt? You are not running Ruby on this abominable Windows thing, are you? You may want to set your environments path to where you unzipped Ruby: http://stackoverflow.com/questions/6750867/how-can-i-execute-ruby-scripts-and-irb-from-windows7-powershell something like: click Start, type "environment" and then click "Edit the environment variables for your account.
&gt; choices = %w[Rock Paper Scissors] So, I realized this syntax could be a little confusing. The bit like this: **%w[ ]** basically takes a sequence of characters, and splits them up into "words." that's what the **w** is meant to remind you of. From there, you get three words, divided by the spaces between, and **%w[ ]** tells Ruby that you want those three words to be three elements in an array, in the same order that you typed them, and put into a variable called **choices**. So with that one line, it's the same as if you had typed this: choices = ['Rock', 'Paper', 'Scissors'] It's just a little bit of syntax that makes it a bit cleaner to read or easier to type (if you like that sort of thing), when you really are just putting a list of simple terms like that into an array. After that, **choices** is used just like any other array, so **choices[0]** would be the way to refer to the word "Rock" from then on. And yes, your edit would work. There are many ways to do that, of course. If you want to look at Ruby ranges (another data type), you could also do this: if (1..3).include?(player) Ranges are similar to arrays for purposes such as this, when you really want a consistent sequence with all values included. (It's all values from 1 to 3, in this case, but if you typed **1..10**, that would mean all the values from 1 to 10.) There is lots more to learn about ranges, but I just thought I'd mention them. 
Yes I commited the changes but did not specify it like what you have done.
No I don't know what it is? Can you explain that to me.
I'm still not convinced DI is strictly necessary in Ruby like it is in, say, PHP. Working with mutable classes and modules gives you a lot of flexibility to swap out dependencies without the ugliness of DI patterns. I'm sure it's still useful, just not as much as in other languages.
Faker maybe? https://github.com/stympy/faker
[Faker](http://rubydoc.info/list/gems/faker/method) might fit, there are others if not: https://www.ruby-toolbox.com/categories/random_data_generation BTW ruby-toolbox is in the sidebar: _Looking for new gems? ruby-toolbox_
Would something like this assist? You could always generate a random name and then concatenate a random number to this name or something along those lines. https://github.com/tomharris/random_data
Shame on me, ty
Thanks for the suggestion!
Uh oh, -18 days till the special day! That's okay I prefer to be fashionably late.
&gt; The first one ...is a natural for loops or enumerations, and if you're looking to learn about loops, you might as well go straight to learning about Enumerable. I don't want to solve the whole thing for you, because that kind of misses the point, but there are many ways to write a loop like that one in Ruby. Here are a couple: 1.upto(1000) do |n| # process n in here end (1..1000).each do |n| # end for n in (1..1000) do # end The most terse and arguably "Rubyish" way to solve that problem might use [Enumerable#inject](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-inject), but you might try learning some of the forms above before you go down that route. Unless you have used the inject method (or map/reduce algorithms) in some other context, it will probably seem a little complicated to you at first. Edit: On re-reading, I realize that they say **below 1000**, so everywhere I wrote **1000**, you could replace that with **999** to exclude checking 1000. Also, when using Ruby Range literals, they have a special syntax for leaving off the "last" value in the range. You just put three dots in there instead of two, and it knows that you want everything *except* the last value in the series. irb(main):001:0&gt; (1..1000).count =&gt; 1000 irb(main):002:0&gt; (1...1000).count =&gt; 999
I would love to participate in this. I'm not a senior (or even junior) developer (yet), but I feel like I'm getting close. Please PM me!
check out the railscasts for faker http://railscasts.com/episodes/126-populating-a-database
appreciated
That's okay, you don't need to be that specific. Without being able to see the code, the last thing I would suggest would be to make sure: bundle exec rake routes and heroku run rake routes gives you the same output. 
'til death do us part ;)
I guess it comes down to whether increasing the complexity of your classes is worth a similar decrease in complexity for your tests. I'm inclined to like my classes cleaner than my tests, but I could certainly be wrong.
~~the way I start my rails server is by entering 'rails s' into the console. It will start the rails server and then [show me the http requests](http://i.stack.imgur.com/oB7fJ.png)~~ I just read it's on heroku...might be of some use &gt;Troubleshooting If you push up your app and it crashes ('heroku ps' shows state crashed), check your logs to find out what went wrong. Here are some common problems.
You're right, and I think this is generally the side that DHH takes when arguing that DI is unnecessary. The fact that you change the class signature to just to accommodate tests isn't always a clear winner. I can see both sides. I think a discussion around a more complicated example might make it easier to determine whether the practice of DI helps/hurts.
i am not going to be popular, but you need to hear this i think: avoid rails if you can
What about: some_number = 2535 points = Hash[ (1..10).map{ |x| [(some_number*x*0.1).to_i, x] } ]
It doesn't look complete. From management standpoint, .idea and .DS_Store should be in your global .gitignore. As for the code, as I said, it doesn't look finished, so it is hard to judge. In counter.rb you could maybe use some more of ruby's enumerable methods, like: numbers = all_cards.collect(&amp;:number) methods like `select`, `collect` and `inject` are your friends here. Can't comment on tests as I have never written good test. Also just to throw it out there, I have no idea how Crib is supposed to be played :)
that's good! thanks :D
Why do you say so?
Great feedback. Thanks so much. I do not have it complete as of yet. i mostly wanted someone to say im on the right track as far as OO design. Also ruby syntax etc. Thanks for taking the time to look.
What was the original?
https://gist.github.com/drwl/8015023/revisions started with the most bottom
Sure, we have just started! Right now digging into HTTP, FSM and then planning to move to TCP and DNS. Will PM you.
Yay, Enums
Firstly, make sure an have an **end** for each code block.
I don't know what I'm doing half the time so I apologize: def no_repeat(year_start, year_end) no_repeat = [] characters = [] (year_start..year_end).each do |year| year.to_s.each_char do |char| characters &lt;&lt; char end unless characters.include?(char) no_repeat &lt;&lt; year end p no_repeat end end p no_repeat(1980, 1987)
Man, enums are going to be so useful. I've been using bitfields to do something roughly similar, and while it works great for a surprisingly large amount of cases, it sure isn't easy to debug
Are you applying to App Academy?
[Michael Hartl: Ruby on Rails Tutorial](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book)
Rails is hype nowdays, some love it, and if you will be one of them, i have nothing against you, but as a fresh mind, you need to know that it is not the holy grail of web development, you have to make your own choices. This is my personal oppinion, some share my point of view, but we seem like minority thats for sure: Rails is a bad framework, especially when you start to learn programming. It is complex and tries to hide this complexity from you (they call it magic). The result is frustration: the first time you hit an error, you will have no idea whats happening, and what went wrong, and how to fix it. Sure you can learn how it works as time goes by, but it is not worth the time i think. If you want to make modern web-pages (like reddit) you have to use javascript, there is no other way currently, and javascript is a third class citizen in rails world, it feels like an aftertought. There are plenty of bad design choices also, but i wont go into details now. So you better split your application in half: - the frontend in javascript, there are tons of frameworks out there, i can not recommend one (some use only parts of frameworks they like, and mix 2-3 as they see fit) - and the backend without any html rendering you can use sinatra or goliath for example if you like ruby
for the code in general launch tools like rubocop, flay, excellent, flog on your code eg: - avoid instance variable @@fresh_deck - initalize the fresh_deck with a loop (less error prone) take a look at https://www.pullreview.com it's free for open source project the score methods looks complex (for a simple task), dilute the complexity in the orther objects ? try perhaps a hash for counts per "family", why not using symbol for these family (eg counts[:hearts]) for the tests: don't use instance variable, prefer the usage of let, it makes the code more readable ``` let (:deck) { Deck.new } it 'has 52 cards when new' do deck.cards.size.should eq(52) end ``` 
Answer to my own question: you can use explicit mapping. Makes sense, should have scrolled down! :-) enum status: { new: 0, in_progress: 2, resolved: 3, rejected: 4, reopened: 5 }
third. i got the videos and the book and found them to be a solid intro, though I wish he used a simpler testing setup, that whole part felt rushed and overly complex. 
I like I like. The enums, the message verifier and the action mailer preview also looks super useful. Spring is something I've been looking forward to as well. Been wanting to look at zeus/spork for a couple of our apps that I run tests for frequently. 
year.to_s.chars.to_a.uniq.length == year.to_s.chars.to_a.length
But it's not the default behaviour, and that's going to cause problems for lots of people.
I'll leave my feedback as GitHub issues for your repo. I have several suggestions, but I won't have time to make them all at once. I'll try to add them over the next couple of days. edit: Feel free to ignore my advice. My feelings won't be hurt. Ideas are often rejected in code review. :)
Yes maybe they should not have the Array format allowed. Make it explicit.
Your best bet is to start learning Ruby, first. Get into Rails (the framework) later. Reason being - there is nothing more frustrating than interviewing someone for a programming position only to find they try to shove everything into MVC, don't understand how to build a gem, and are uncomfortable building a model that doesn't follow the active record design pattern. Check out [Beginning Ruby](http://www.amazon.com/Beginning-Ruby-Novice-Professional-Experts/dp/1430223634) and [Learn Code the Hard Way](http://ruby.learncodethehardway.org) Also, I'd advise you to build a thing or two just for fun outside of Rails before you get into Rails.
Yap, I doubt i'll get in with my quality of coding if there are people with a programming background, worth a shot though.
Although it's a strange limitation that enums in the same model can't use the same states. I wonder why that's the case.
**Look at the sidebar**
Pretty much! Just from my playing around with it last night, it seems spring is rather effective. I also enjoy the idea of not having to boot / reboot and leave zeus running in another terminal.
I'm wrapping up with the book now. I actually really like guard and having it be able to push growl notifications to me automatically. I totally agree that his instructions were a bit rushed in this section but it has worked well for me once I got it working. I'm curious what you have found or are doing now that is better/simpler. 
Oh that's neat. It might not win a beauty contest but it sure is awesome! 
This explains a lot. I knew that the problem looked familiar! Best of luck to you!
If you want to learn rapid prototyping, check out [One Month Rails](http://www.onemonthrails.com/).
If you don't mind $25/month, Treehouse.com is amazing although the material is still for Ruby 1.9 and Rails 3.2. And it's not just RoR, there is a ton of material.
I see where you are coming from. I guess I was very interested in TDD when I started with the book so I really liked getting it all in one go. I could certainly see how someone who is first starting out could really struggle though. If you don't know a fair amount about HTML, CSS, MVC, and all the other underlying technologies that rails works with it can get very overwhelming to jump into TDD as well.
No sarcasm here, the best way to improve is to just sit down and do it. Start using rails and writing apps, converting old apps, etc... to it. You will learn the best by getting experience and getting your feet wet.
Well, for starters, Ruby is probably what you're interested in. Rails is just a framework (for more info, checkout /r/rails) akin to Laravel or Symfony. As far as improving your skills with Ruby, I personally took things I wrote previously in PHP and re-wrote them in Ruby. This taught me how to implement concepts I already knew I wanted to use: inheritance, static variables, object instantiation, etc. Also make the effort to build new projects you can in Ruby rather than relying on your old standby, PHP. In short, write more Ruby to improve your abilities.
I'm not familiar with Rails, but since you didn't mention how much experience do you have with Ruby itself, assuming you have just started exploring Ruby i recommend you to do the following things: * Read ["Learn ruby in Y minutes"](http://learnxinyminutes.com/docs/ruby), it nicely lays out the core features of the language in a beautiful README. * Browse [The Ruby Toolbox](https://www.ruby-toolbox.com). It's designed for gem discovery, but if you browse it randomly you could find various interesting projects and read their source code. * Bookmark [the documentation](http://www.ruby-doc.org). It's not perfectly organized in some areas, but it's a great reference for Ruby Core and Standard Library methods, which you would use all the time.
Awesome! This plus sinatra equals one very cool weekend project
Grab a book or online tutorial and start building stuff. When you don't know how to do something in Ruby just google for example 'php substr ruby' and most of the time an adequate answer will pop up. I advice to first dive into Ruby and play around with the basics of the language, try to rebuild small classes etc. you use in PHP. Then move on to Rails en just start building stuff. Even when you don't know how to do something just Google for it.
Perhaps this is pas&amp;eacute;, but I found Michael Hartl's [rails tutorial](http://ruby.railstutorial.org) indispensable while learning ruby and web programming.
I took a C++ class about 7 years before I started learning Ruby and that was it for programming experience. So I'd say that you don't need to learn any other languages first. Codecademy.com is where I started out and I'd say its pretty good at getting an overview of a language. exercism.io is probably my favorite learning tool; it's really fun and it teaches you a lot. The one problem with exercism.io is that it can be a bit of a steep learning curve at first. The other thing I would recommend is picking up a book that just goes over the language. I read the Well Grounded Rubyist and it was a great introduction to the language beyond a per need basis. With those three things, I would say you will be well on your way to learning Ruby.
If you need the result as a Hash: some_number = 2535 points = Hash[(1..10).map{|x| [some_number*x/10, x] }] If you are willing to just have an Array with 11 elements: some_number = 2535 points = (0..10).map{|x| some_number*x/10 } I chose 11 instead of 10, because that way the Array index preserves correspondence with your original values stored in the Hash. irb(main):004:0&gt; points[0] =&gt; 0 irb(main):005:0&gt; points[1] =&gt; 253 irb(main):004:0&gt; points[2] =&gt; 507 irb(main):004:0&gt; points[3] =&gt; 760 ...and so on.
Hey! I want to take this chance to plug Omniref -- a better way to find Ruby documentation: http://www.omniref.com/ I use it allllll the time now! It definitely would have helped me learn Ruby.
Definitely the Michael Hartl Tutorial. But also, what I found just as amazing was the Pragmatic Studios courses. http://pragmaticstudio.com/ruby https://pragmaticstudio.com/rails Worth every penny. 
I was in the same position last year. 5, going on 6 years of PHP experience, 3 of which were spent leading a small team of 2-3 devs. I've worked my way through http://ruby.learncodethehardway.org and pragprog.com's "Agile Web Development with Rails" in a few weekends to get a good idea of what I could do with the language and the framework. Eventually I decided to just jump in and switch jobs to a small company (2 people) doing fairly small, but technically challenging projects in Ruby/Rails. Prior to this, I've made 2 small apps (an RSS reader and a tool to generate menu's + matching shopping list). I'd like to tell you the transition was easy and painless, but it was not. The first project I tackled was one where I made lots of mistakes, and we went quite a bit over budget. The most consistent mistake was writing too much code to get from point A to point B, due to lack of knowledge about alternative ways to get the same result in way less code (often a one liner). Having said that, I learned an immense amount of dos and don'ts by just undertaking a project with a deadline. It were a rough few weeks, but looking back I feel good about how much I've learned during that time. Though a little more time and a little less to do was probably a healthier path, no doubt. Know your limits. :-) 4 things were key to improvement for me over the next few months: * Find someone who is more knowledgeable then you about RoR to do code reviews. I'm fortunate enough to have a colleague who made a lot of the same mistakes in the past and knows how to prevent them. * Goes without saying, but StackOverflow. Don't feel bad; You're not copy/pasting solutions, you're feeding off the mistakes / experiences of others. Look up exceptions you don't fully grasp, or funky behaviours you can't get your head around. Read why certain solutions are acceptable and others aren't. * Learn about blocks and enumerators. They will ease your transition and let you do more with less code. They are by far my favourite improvement in Ruby over PHP. * http://api.rubyonrails.org - Learn in what ways you can manipulate data in Ruby by exploring what's in the base classes; Array, Hash, String, Date,... Other resources that still help me: * The official Rails docs: http://guides.rubyonrails.org/ * A RailsCasts subscription is probably the best $9/month you'll spend - http://railscasts.com * Github. Scour the codebase of various open-source gems. Read the source code, try to understand it. Pull the repo, fiddle around with stuff you're interested in. Try and contribute, and you'll learn from every mistake and success along the way. Good luck with the job hunt!
[Why's (Poignant) Guide to Ruby](http://mislav.uniqpath.com/poignant-guide/). I'll just leave this here. I feel it has aged gracefully.
Don't have time to mess with it at the moment, but try p get_post_date(location + ".craigslist.org/sfc/vac/4248712420.html") See if that works. If not, maybe location.to_s for good measure.
I hadn't thought of this before, I really think it is something many people don't consider.
I get the same error for both lines. But if I add http:// they both work p get_post_date("http://#{location}.craigslist.org/sfc/vac/4248712420.html") I can't explain why you'd see what you explained. 
it seemed to work with the http. I thought I had added that previously, but perhaps I got caught up in the troubleshat. Thanks for the help.
On the other hand, Rails has a lot of built-in conventions that for me (when I came from PHP) made me a way awesomer programmer: like testing, scripting (rake), database migrations, asset compilation and templating, for example. If I had started with Sinatra, I might have just followed my same old patterns of just cramming stuff together and refreshing my browser until it worked rather than taking a structured dive into rails and having a lot of *aha* moments of "where has this been all my life?" I totally agree that Sinatra is a lot less hand-wavy about how Ruby (and Rack) work, but as a beginner, I think Rails hand-holding tour can be helpful. 
"Better" is entirely subjective, of course, but there's certainly a cleaner and much more "Ruby" way to use /u/jrochkind's advice: (year_start..year_end).select do |year| (digits = *year.to_s.chars) == digits.uniq end The `#select` here makes a great deal more sense than building up a second array and using `#delete_if`. Also, there's no reason to bother checking the length of the unique digits, and especially not to check for a particular size; what do you have against the first and eleventh millennia?! In general, you should consider doing so much explicit iteration a code smell when writing Ruby. The language provides all sorts of convenient and "functional" features that allow you to much more clearly and concisely express your intention.
Take a look at [whipped-cream](https://github.com/justincampbell/whipped-cream). It uses the pi_piper library for accessing pins.
thank you... I appreciate all of your insight. I am learning. 
Let's start a Github project together, no better way than to pair program!
if you haven't yet, add this to your bash profile. it lets you open omniref from your CLI using `ref some terms` function ref { open http://www.omniref.com/?q="$*" } 
This. I was told the same thing when I started (learn Sinatra, then bring in the magic of rails.) I ended up finding a rails project to work on first, and am glad it happened that way. I feel like I benefitted so much from the wisdom that went into the framework that it definitely changed me as a programmer.
Yes, that's exactly what I mean. People are most likely going to pick the simplest option.
protocols are important (Y).
Take a look at the gem's owners talk about using it to automate home. You'd love it. https://www.youtube.com/watch?v=BeyTsdkItg4 :)
I don't think Sinatra is that great to begin with. I feel there is a lot of undocumented cases where you think "WTF?!". I think Rails is better to begin with.
wat? that has not been my experience at all. Sinatra is very well documented and the code base is quite clean. maybe you are expecting things from Sinatra that it is not intended to do out of the box? can you provide examples? ~i also don't understand how you can say Rails is better. you may prefer working with Rails but Sinatra solves different problems and has different goals.~
I don't say Rails is better, I say Rails is better to begin with. First of all Sinatra has two modes of operation, Modular Style and normal, I think that is confusing. Also there is all of their contrib modules that needs requiring just to get going. I've had several issues with the reloader, where it wouldn't reload my changes done to other files in the project. I also think their raise_errors, show_exceptions, dump_errors variables could be better. I think Rails is a more frictionless experience, but Sinatra have its merit. I have several projects built with Sinatra, that aren't DB-backed, and very simple. But I wouldn't ever throw Sinatra after a beginner, I feel Rails is much better for them. And thanks for the downvote.
This book is worthwhile every dollar! I´m Brazilian ($1 == R$ 2.34), although I really recommend that you brought the Golden Label($55). The screencast is verry important to see the parttens in action! And the other book is so interesting too!
Learn Laravel if you haven't already, then learn Rails. Headaches will be avoided.
you create an empty restart.txt file in your project's tmp dir (generally with "touch tmp/restart.txt" for example) and Sinatra will reload before the next page load. or do the same with always_restart.txt to have Sinatra reload every time. I think this is actually a Phusion Passenger thing, not a Sinatra thing. So if you're not using Passenger to serve your apps you may need to look at the documentation for whatever tool you are using instead. Sinatra may have less functionality built into its routes but they couldn't be simpler to use IMO.
I have never thought about it like that but you might be right. I read everything I can about the subject before I actually start doing anything, I then try things out, and then in the end I implement what I want.
I don't know how else to make this work though. I just want to get the accounts balance to see if they have made it to the next level. No transfers or anything like that. Just a number. Then I want to use that number to see what level they are at to be able to display how much they need to reach the next level of the game. That's pretty much the whole game really.
This looks awesome. I seriously can't wait for it to be done!
maybe check out something like https://plaid.io/ I know there are other services like that out there that might be better. company's like wave and xero use them but cannot recall their names.
I think this is a great idea, where do I sign my enemies up?
Thanks! Looking over just a bit about this and it seems really in line with my needs. I'll make sure to dive into it tonight and read up on similar solutions to see which would be the best fit. :) thank you!
I'd like to get experience in using APIs and creating APIs. I'd also like to mess around with Twilio and perhaps Pusher. I'm looking for something to spruce up my Resume/Github page with.
Then how does mint.com do it? Or any service that accesses bank information? What am I missing here?
What are you trying to achieve? What do you need the account balance for?
I just want to compare the account balance to the level in my game. Example: account balance is $450. Level 3 is $300 and level 4 is $500. So only $50 to reach level 4. That's all I need the account balance for... I'm not trying to game people or anything. I just thought it would be more user friendly to automatically get the balance without the user having to jump through more hoops.
/r/learnprogramming
Here is some feedback (most style) on the tests: * Instead of having multiple "describes" in a file (describe Player, '#choose_discard") you should have a top-level describe and then method-level describes within it. That is how most projects I have seen do it. describe Player do; describe '#choose_discard * The folder should be named "spec" instead of "test". * Some of your tests under '#initialize' don't actually describe the constructor. For example: player_spec - has a card after you deal a card to it. This should be in describe '#add_card'. * Instead of commenting out tests, you can make the pending by changing "it" to "xit" or just leaving out the "do end" block. This way, you are notified after the suite runs that you need to implement them. * Instead of "require"ing each file for the test it uses, you can create a spec_helper.rb file that loads all the files necessary.
Yodlee allows you to collect data from all kinds of financial institutions (banks, credit unions, mortgage lenders, etc) on a users behalf. Their API is not the greatest, but they have one. See: http://developer.yodlee.com/. Yodlee was Mint's data provider until Intuit decided to build their own. Assuming they grant you access, you'll have access to some sample apps. Their Ruby examples are limited. Most of the integration code is in Java or PHP. Source: me, I've done this.
I've been using Passenger for a little while now and it is fast but I had memory issues. Neither Unicorn or Puma goes beyond the Heroku limit of 512mb. With Unicorn the problem was that request wasn't served fast enough and were waiting. I just switched to Puma last weekend and so far it seems to be going very well. Requests seems to be served a bit slower than with Passenger (a bit hard to tell as the stats from New Relic are significantly different put together when switching servers). Instead of DelayedJob I highly recommend Sidekiq. And while HireFire works very good if you are looking for a simpler and free solution I really recommend https://github.com/JustinLove/autoscaler.
Great stuff here.
Five years ain't so much damage to undo. Lots of people are WAY worse off. 
Dow this also execute bundle exec implicitly?
Ruby rogues: worst sound engineering of any technical podcast. Not listenable. 
huh, so it's "automatic," I see. I'll have to check it out! 
If you're looking to dive deeper into Ruby, this is a GREAT ruby book. http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330 You'll see it pretty much has a perfect rating on Amazon. It logically explains how to use ruby in an effective OO way, with solid real-life examples (A bicycle shop). It's not a particularly long book, but a lot of information to digest. One warning tho, is that if you're still not fully comfortable with Rails, you may want to wait, because it breaches topics that are somewhat difficult to marry with Rails conventions like ActiveRecord models and controllers.
This looks pretty cool! Might take a weekend shot at it as well. Now I just need to buy a house with a garage… Do you know of any good ruby+raspberry pi tutorials? I'm a ruby/rails developer but have zero experience working with raspberry pi.
As another PHP refugee (&gt;10 years, with ~3 years of modern Ruby experience now), I can't recommend POODR strongly enough. The remainder of the first 4 books you need to read are: * *[Eloquent Ruby](https://www.informit.com/store/eloquent-ruby-9780321584106)*, by Russ Olsen; * *[Objects on Rails](http://objectsonrails.com/)*, by Avdi Grimm; and, for a different take on Ruby, Rails and services than you got from POODR (that you should have read before this), read * *[Service-Oriented Design with Ruby and Rails](http://www.informit.com/store/service-oriented-design-with-ruby-and-rails-9780321659361)*, by Paul Dix. Most intro-to-Rails books walk you through creating something like a blog app, because that exhibits a lot of the patterns that Rails was designed to solve (and that you'll hear described as "The Rails Way", which for years was *the* bible for Rails (but hasn't yet been updated for Rails 4, according to InformIT/Pearson; [Amazon](http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321944275/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1387527089&amp;sr=1-1&amp;keywords=rails+4+way) list a publication date of 28 April 2014). You'll also find [Railscasts](http://railscasts.com/) *amazingly* helpful. I think the [Railscasts Pro](http://railscasts.com/pro) subscription is worth every penny because it gives you access to advanced and revised episodes, but check out the freebies and see if *you* can walk away from the crack pipe. And, for the love of `$DEITY`, stop what you're doing right now and watch *[Architecture: The Lost Years](http://youtu.be/WpkDN78P884)*, a keynote presentation by Robert C ("Uncle Bob") Martin. I've been in software 35 years now; he's done it longer; and I have absolutely no doubt that he has forgotten more about the subject of good development practices than I will ever know. You'll want to watch it again after you've read a few of the books and beat on some code. Finally, speaking of "beating on code", a good way to Learn Stuff™ is by pitching in and helping. [CodeTriage.com](http://www.codetriage.com/) has lists of open-source projects hosted on Github in several languages, ordered by "Projects that need the most help". [Here's the link for Ruby](http://www.codetriage.com/#ruby1794993970972719698). Welcome! EDIT: The other big suggestion I'd make to PHP survivors is to *learn other Ruby frameworks besides Rails!* [Sinatra](http://www.sinatrarb.com/) is good, almost-bare-metal, efficient tech you *should* know; [Padrino](http://www.padrinorb.com/) puts a nice full-stack framework on top of Sinatra; [Espresso](https://github.com/widler/espresso) looks at things from a rather different perspective (especially compared to Rails); and [Camping](https://github.com/camping/camping) will blow your mind and/or push the limits of your understanding of how Ruby *really* works.
Readme.md of the [pi_piper](https://github.com/jwhitehorn/pi_piper) project is great for getting started with RasPi.
This. Had PHP 5.5, Laravel and Composer been what they are today three years ago, I may well have had my transition from PHP to Ruby years later. You can now write *almost* as eloquent, clean code in PHP as Ruby, save for two things: Ruby has a real object model and PHP's namespace and object semantics are just corrosive to think in.
The problem I have with [LrTHW](http://ruby.learncodethehardway.org/book/) is that they introduce composition vs inheritance much too late, and automated testing about 40 chapters too late. The first thing, in any language, you ought to walk through after *Hello, Omniverse!* is how and why to set up automated testing. Especially for PHP refugees, who have too often had little or no exposure to the concepts, and especially since the concepts are so foundational to the Ruby culture. I don't (really) care if you use RSpec, MiniTest or Test::Unit; if you don't use *something* consistently and pervasively, I don't believe you really know what your code is doing.
What kind of memory issues did you have? With passenger-memory-stats you can see exactly which process is responsible. There are many configuration options in Passenger to make its memory usage behave exactly like how you want it to.
Again, in my opinion (35 years, 30+ languages; 2/3 of both of those numbers in OO) BDD (and TDD, to the extent that it supports BDD) is a *primary design tool*, like UML was 20 years ago. Adding good, informative test coverage to *existing code* is one of the hardest things you will ever do in this craft (and the two books you want to grok in fullness before trying are Michael Feathers' *[Working Effectively with Legacy Code](https://www.informit.com/store/working-effectively-with-legacy-code-9780131177055)* and Martin Fowler's *[Refactoring](http://www.informit.com/store/refactoring-improving-the-design-of-existing-code-9780201485677)*. Doing conscientiously spec-first code in the style taught by *[Practical Object-Oriented Design in Ruby](http://www.informit.com/store/practical-object-oriented-design-in-ruby-an-agile-primer-9780321721334)* or *[Growing Object-Oriented Software, Guided by Tests](http://www.informit.com/store/growing-object-oriented-software-guided-by-tests-9780321770356)* will multiply your productivity (and enjoyment) by a *stupefyingly large* positive integer.
As someone who is distant from any sort of developer community thanks for posting these. A lot of these look pretty good.
You could look to see if there are any meetups in your city. From there find out if any of the Rubyists you get on well with have vacancies in their companies. Never tried it, but might be one way.
But *which* process exceeds memory usage? Is it Apache or Nginx? Is it one of the Passenger processes? Is it one of the Rails processes? If it's Apache/Nginx then that's their problem, and we can't do anything about it. If it's Rails then that's a problem in Rails or in your app, and moving to another app server probably only masks the underlying problem by coincidentally not triggering the bug in the same way. If it's in one of the Passenger processes, I'd be interested in investigating whether there is a leak.
They used to use 3rd party account aggregator like CashEdge or Yodlee, then they built their own integration with those systems. If there's no API, then I think they resort to screen scraping.
Not sure. Log just says "heroku web.1 - - Error R14 (Memory quota exceeded) ". The problem might be in my code but I'm not seeing this problem when running Puma. I'm just using the gem with default setting (just specifing the nr of workers), so it is using Nginx.
+1 for the Rise Against reference in the title
Which itself was a reference to a quote that is often wrongly attributed to Mark Twain. http://phrases.org.uk/meanings/368850.html
+1 for correct reference.
 Attributions of common quotes to Rise Against have been greatly exaggerated :p
Based off of what I've seen on the first few pages, it doesn't quiet fit the bill there. Most of them have an external dependency on ffmpeg or something.
The MP3 format is fairly complex, I don't think there is a current pure ruby system out there for this type of thing... 
If there's no 'pure ruby' means to do this, what would be the most ruby-istic way to do what I'm attempting? To give a sense of the overall goal: I'm wanting to create a tabletop streaming radio based around a raspberry pi. I've previously written something in Python (don't hate me for that...) that leveraged MPD but it's somewhat clunky.
Guys, I have still not been able to solve the problem. I have tried all what you guys have said. I have been busy doing college stuff, that is why I am commenting on this by this time. I still need help. Thanks. :(
If you just need to add additional sources of gems you can run: gem sources --add &lt;URL&gt; Gem sources --list will show you your current sources. Or you can just add the source to your gemfile on a per project basis
Below is what I have on my routes.rb. I hope that will help. ScutIsu::Application.routes.draw do # The priority is based upon order of creation: first created -&gt; highest priority. # See how all your routes lay out with "rake routes". # You can have the root of your site routed with "root" # root 'welcome#index' # Example of regular route: # get 'products/:id' =&gt; 'catalog#view' # Example of named route that can be invoked with purchase_url(id: product.id) # get 'products/:id/purchase' =&gt; 'catalog#purchase', as: :purchase # Example resource route (maps HTTP verbs to controller actions automatically): # resources :products # Example resource route with options: # resources :products do # member do # get 'short' # post 'toggle' # end # # collection do # get 'sold' # end # end # Example resource route with sub-resources: # resources :products do # resources :comments, :sales # resource :seller # end # Example resource route with more complex sub-resources: # resources :products do # resources :comments # resources :sales do # get 'recent', on: :collection # end # end # Example resource route with concerns: # concern :toggleable do # post 'toggle' # end # resources :posts, concerns: :toggleable # resources :photos, concerns: :toggleable # Example resource route within a namespace: # namespace :admin do # # Directs /admin/products/* to Admin::ProductsController # # (app/controllers/admin/products_controller.rb) # resources :products # end end
~~I want to replace the one that's already there. Is there a way to delete the one that's already in there?~~ Edit: nevermind, used --remove and it worked.
Out of curiosity, why do you want to avoid dependancies on things like ffmpeg?
OP already has their feet wet &amp; jumping in doesn't teach you things like best practices.
You can try using nokogiri and rubyzip http://stackoverflow.com/questions/9074828/edit-docx-using-nokogiri-and-rubyzip Without context though, it's kind of hard to figure out what you're actually trying to accomplish. If you want a document template which you can programatically edit, print and save, you might want to consider doing it with a PDF instead. The prawn library is very well documented and easy to get started with. It was even written by a redditor: /u/sandal
My thought is that I'd like to avoid external dependencies (outside of libs/gems I suppose?) as I'd like to have a more elegant solution than just doing the equivalent of a sys.exec type call... 
Thanks for the reply. I never thought about doing it in PDF. After looking into the Prawn Library, I think that is the best way for me to go. Basically what I am doing right now is I have a database with client information and when we need to create a "Proof Of Delivery", I open up a word document and input the clients information into the template and print it out. I would like to automate this process so I do not have to copy and paste the information, which becomes time-consuming. 
I just picked up the Well Grounded Rubyist actually. That was recomended to me by somebody else as well. Did you go through the entire book first, and then go on to the exercism.io and codeademy, or did you work through all three at the same time?
Yeah this was recommended along with codecadamy. Ill check them both out, thanks. 
Yep, sounds like a perfect use case for prawn. Good luck!
Here's a rundown of the updates from the preview a few months ago. It doesn't look like much has changed since then. http://spin.atomicobject.com/2013/09/26/ruby-2-1-preview/ The most exciting thing to me is the new GC.
Thanks, I will be starting the project tomorrow. One more question, Am I able to only edit the "bookmarks" in the PDF template with prawn? Or how would i do it.
Sounds good! I will post back here if I need more help, and with the finish project :)
Let me ask this: Do you have any recommendations on how to achieve mp3 playback via a ruby (not rails) solution?
The most Rubyist way would be to choose an external library and build objects around it. Video Game development in Ruby works this way: http://www.youtube.com/watch?v=Vo5OVEmSDtY
Run it on Travis and Heroku! Do it, do it now! * https://twitter.com/travisci/status/414128742408392704 * https://devcenter.heroku.com/changelog-items/375 
So with `def` now returning a symbol, I could potentially write something like validate def some_validation_method # ... end ?
Oh wow, thank you, that is extremely clean and concise. I've been using RubyMonk and Chris Pine's book on how to program, do you recommend any other resources?
Thank you! Did you attend? If so, how was it and do you have any suggestions?
 undefined method `road?' for main:Object (NoMethodError)
Very cool! This would be something that would be great to have in a simple gem, if not for any other reason than to bulk out the libs available to rubyists.
I agree Rails community is so huuugggeee! But, I finally concluded to go in path of HTTP/Rack/CGI first; I stumbled with a really great guy here to work together, I must say, I am kid before him. Not sure about the value he gets, but I have gained a lot from the team up. I hope its not a bad decision to follow along this route. Anyways, thats a lot for your time and patience. I really appreciate that.
Wow, that experience is chilling to hear. You must be a big time nerd to still look around for more resources and helping other programmers. I bow to your patience and interest. I am honoured that you replied for my post. Also, I will be starting of your suggestions with Sandi's POODR.
Im sorry I dont have an answer. Nir do I have any real experience with ruby or git. I plan on at least getting my hands dirty over the holidays
there's only one way to find out, isn't there?
to git push origin other-side
I should say that it'll only take you a few days to get familiar with each. Bash is not that hard, Git not much harder, and you can learn the basics of HTML and CSS in a day. Ruby and JS should be the hardest of the bunch, and that's assuming you know how to program. But if we're going by my progress: ??? I can't tell you how long it took me to become familiar, because I use all these things every day. I've done things to integrate using these tools to my daily life, from using Linux on my home computer to running my projects on Heroku. I even version out Word documents I write in Git (but I am a little weird).
You could also create a PDF as a template, that has forms in it, and use https://github.com/pjones/pdf-fdf to fill them out with your user-data. I've done this manually (without the pdf-fdf gem) and it works pretty well. You can make the PDF as fancy as you want in your favorite PDF creator software, and just need to provide the forms. 
html, a few days. git, a few days. terminal, a few days. JS/ruby, anywhere from a week to a few months depending on if you know other languages already or not. 
Nice! Relatedly, I made a simple gem to extract frequency info from a wav file using FFTW, along with some basic analysis functionality. I made it for use in a ping pong table-in-use app. http://rubygems.org/gems/spectrum-analyzer
seems like you could. But then I might have to kill you.
Pure ruby? Sounds painful. You'd probably have to write the decoder yourself as it's unlikely anyone else would have bothered when they can just use existing ones.
It'll take as long as it takes. It's not like we're all clones that learn and comprehend at exactly the same speed.
What others have said, and also depends on if you have any other programming experience already, or familiarity with XML.
other_side = gets.chomp
I say this on the assumption that ruby is your primary language, and you haven't written components (gems/libraries/whatever) frequently, as well as consumed other's components. If that's not where you are, my bad, ignore all this. I personally wouldn't go for this - its a lot of ruby specific content, which won't necessarily make you a better developer; just a dangerous one. I say this because the SOLID principles are a better stepping stone to a lot more enlightenment. I was unlucky in that no one explicitly told me about them, just the way I structured code sometimes "felt right" or "felt wrong", and bluntly, OOP didn't provide much more than a container for a few common functions in some kind of namespacey thing. Finally I saw some of the clean code talks (by google, misko hervey) and things began to make sense. Tests became generally quite a lot faster as I learned to enforce SRP, and ended up being able to test exactly what I wanted to; for example. I ended up understanding why I absolutely hated some component libraries that bit me only months down the track in some obscure way; and how I could recognize when a dangerous developer was going to inflict that on me. Once you have a firm handle on that, I'd say go for it - but ramming 20 concepts at once in your direction isn't going to help, as you'll suffer from an abundance of ways to solve a problem - and likely pick a new one every other time. I find it's better to go and find an open source project you are interested in, find a problem they have, and solve it in a manner consistent with their style. You'll learn a lot about how people structure things, and when you come across stuff you don't comprehend; that's the time to learn about it. I'd suggest the most useful content there - reflection, so that you can interrogate your objects to determine what they can do; composition - why it's better than deep chains of inheritence, even if the mixin approach can sometimes leave you wanting, and perhaps; just so you can be horrified, the content about "why classes aren't anything special". 
So, just to be clear, you expect [[0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1]] but get [[0, 1, 1, 0, 1], [0, 1, 1, 0, 1], [0, 1, 1, 0, 1], [0, 1, 1, 0, 1], [0, 1, 1, 0, 1]] ? Remove the .flatten [[0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1]] [[0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1]] .each_pair doesn't do a .flatten, it justs gets the value for the corresponding key. http://rubyfiddle.com/riddles/bec3b
mat has been constructed using only one instance of Array.new(5, 0) at all indexes. mat = (0..4).map{ Array.new(5,0) } would fix this problem. It looks like there may be other bugs, but that is why it is changing values in all the arrays. 
Agreed. And the languages where *everything* is an expression with a value make good use of such things. "private" appears to be borrowed from C++, so whether that's good or bad perhaps depends on how much one likes C++.
Very valid point. I should have probably made mention of tests in my summary, but we did do automated testing at our previous company. So for me it's just something I'm used to doing. :-) For new recruits it was something they had to actively learn, not something they pick up along the way. It was also usually harder for devs with prior working experience than fresh graduates to make "test first" into a habit.
Thank you so much for this explanation. It is very, very useful. I actually solved this /r/dailyprogrammer problem rather quickly but it was very ugly and violated a lot of convention so I'm trying to clean it up. I'd love some feedback if you have the time/inclination: http://www.reddit.com/r/dailyprogrammer/comments/1t6dlf/121813_challenge_140_intermediate_adjacency_matrix/ce4weym
The main job does Chromaprint, I made the bindings as a gem: https://rubygems.org/gems/chromaprint Or do you mean extracting the RSpec matcher into a gem? Thanks for feedback!
Unfortunately I am not familar with Discrete Fourier Transform, but it seems to be ingteresting, thanks for mentioning it:) If I am in shell, I use `soxi` (sox info) tool to get meta info about audio file. Like this: $ soxi demo1.ogg Input File : 'demo1.ogg' Channels : 1 Sample Rate : 96000 Precision : 16-bit Duration : 00:01:42.28 = 9819254 samples ~ 7671.29 CDDA sectors File Size : 3.06M Bit Rate : 239k Sample Encoding: Vorbis 
Either, but mainly the chromaprint gem
You can get similar information putting the file through the ruby-audio or wav-file gem. Ruby-audio may be able to handle .ogg or mp3s, but I only used it on wavs. I actually learned about the fourier transform while working on the ping pong project and trying to figure out how best to recognize a specific sound. 
"private" is not borowwed from C++ but from Smalltalk. Matz said that. cf: http://junichiito.blogspot.jp/2012/03/matz-answers-why-ruby-lets-sub-classes.html
A few days? I don't think I could agree with that at all. I'd say I'm "familiar" with the terminal and I've been using it for years.
Hmm, I don't remember any kind of "private" in Smalltalk, I'll have to look that up. (Taking Matz at face value, I would guess then that C++ also took "private" from Smalltalk, albeit in a different way than Matz did.) Interesting in any case, thanks for the link.
I'd say it mostly depends on your definition of familiar. Being familair with each of those is fairly trivial. Shouldn't take longer than a few minutes staring at a cheat sheet to become familair with the syntax of Ruby, JS, CSS, HTML, and git. The terminal might take a little bit longer because there's not really a set syntax too terminal, just more of an expectation and the ability to browse/maneuver through a file system. At least, that's all it's take for what I consider 'familiar'. For a dictionary definition of considering yourself well-versed and knowing most of what there is to know, you're going to be looking at a little bit more of a time investment on Ruby and JS, the rest of it would still be relatively quick. Considering your stating 'basic knowledge' though, my first answer seems more appropriate. You can consider yourself having achieved 'basic knowledge' of all of those in a glance. Usefulness of that basic knowledge left as an exercise to the reader. :)
As someone that is both looking to make the jump from PHP to Ruby, I'd recommend to make connections with folks in the Ruby community. I've found that there's no better resource then having someone that's gone through the same steps as yourself, and if you're fortunate, understands that it's just a matter of syntax and either can introduce you to folks looking to hire multilingual developers, or can help to refine your skills while you search for that job that gets you into the Ruby world! Good luck, and remember, we're all in this together.
Doesn't do this for me... did you check http://www.sublimetext.com/docs/3/ for answers?
I just press backspace tab and it gets rid of it and puts be in the block. Not sure how to turn it off though.
What exactly does "benchmarking" do? Inserting elements? Calling `length`? Your article makes it sound like linked lists are always superior to arrays for large datasets. That's definitely not the case: http://en.wikipedia.org/wiki/Linked_list#Linked_lists_vs._dynamic_arrays What do you mean with the heading "More memory efficient?" and "This is where the only correct answer is very grey"? Linked lists waste definitely more memory.
An article on data structures without a mention of big O performance characteristics.... 
That's *so* 20th century. As the article says, "Tweet your results!" That's how we measure algorithms at WebScale!
What's XML got to do with the above question? Personally, it's usage is on the decline and is irrelevant to a beginner.
I lol'd :)
https://github.com/thatrubylove/functional-lists/blob/master/bm/array_vs_list.rb An linked-list should have O(1) (constant time) performance for insertion (push)...I've not looked at the implementation but when benchmarking ensure you are benchmarking what you *want* to benchmark. 
For the lazy: http://gitlab.org/ It is pretty much an open source clone of github that you can run locally under your own control.
Ehhh, I assume you are based in the USA? You need to be sure you are still being legally compliant when doing something like that, I am rather sure that doing so would violate some form of privacy law.
Thanks, I have updated the post; please take a look to see if you want to contribute another answer.
HTML is a subset of XML.
Not really. For one, HTML is not well-formed, and for another, they both derive/inspired from SGML. The main point i was trying to emphasize is that it's not really a good area for a person new to HTML, CSS etc.
better in /r/learnruby
I only saw an option to turn it off completely.
Unfortunately, `private` does not seem to return the symbol passed to it. What would be awesome (and probably disgusting), would be chaining methods that take in a symbolized method name as a parameter. E.g.: class Order &lt; ActiveRecord::Base # some code... private validate def ensure_at_least_one_line_item errors[:base] &lt;&lt; "Must have at least one item in your shopping cart" end # some more code end
def foo will return :foo and private takes a symbol argument. 
Right, that's how the new feature works. But unless I'm way off base, you can't combine e.g. `validate` and `private` as I showed in the example.
It does support public repositories to an extent. Once enabled a small link appears at the top of the login page which shows repositories that have been made public. It's really subtle and it took me a while to find. I don't think that GitLab was built with anonymous users in mind really. It might also be (speculation) that since it's so similar (visually and feature-wise) to GitHub, that they don't want people setting up public GitHub alternatives.
Well, the article isn't about migrations, it's about learning how the code that runs migrations works, and reading the rails source. That aside, I've personally found migrations to be a very useful way to ensure that the database is consistently transformed both in a development, test, and production environment. We use them in production systems to manage views and stored procedures as well as the typical tables and columns.
Required keyword argument looks great. There's many cases where named arguments make a method call more readable. I imagine I'll be using this a lot.
&gt; Is there a dictionary library in Ruby? It depends on your exact requirements. Try http://rubygems.org/ and search for wordnet and wordnik. There are many OS dictionaries that might suit your needs better of course... &gt; Will DataMapper suffice if all I need to store are the words someone looks up and it's definition? It depends on your exact requirements. I can see a simple database lookup working for a prototype. Why would you want to store the definition alongside the word that they have looked up though? &gt; I plan on authenticating a user via third party like Twitter just for the name and a minimal user account. Omniauth? &gt; Kudos to anyone who can assist. Happy holidays boys. Bah, humbug! :)
I depends on the Gem. For example you can use SASS to convert SCSS files in one directory to CSS in another (as separate process), while your PHP project uses the CSS files themselves completely unaware of how they are generated. Same for Capistrano, it is not tightly integrated to code, so you can use it to deploy any project, you just need to setup Capsitrano properly. Some Gems use Ruby heavily so there will be little or no benefit using them in your PHP project. You just have to choose carefully.
What makes frozen strings different from symbols?
I like the optimization technique for #freeze. I'm not a fan of the #f (I don't see a large amount of use cases) and the magic comment seems inconsistent to me (Are there other magic comments in Ruby?).
Yes, there is a magic command for setting the default encoding. As for #f, I can see it be quite tedious and noisy to write .freeze in certain circumstances.
Is String#f just an alias for String#freeze? I didn't get that from the link; it seemed like it exposed a method that the VM used, not just call #freeze.
Rubymotion or rubato
I didn't know about these. Thank you! 
[Freezing](http://www.ruby-doc.org/core-1.9.3/Object.html#method-i-freeze) is a general tool that prevents *mutable* objects from being modified. Symbols aren't mutable, so the concept of freezing them isn't exactly sensible, they just inherit it from Object#freeze. Quite a few places in the Ruby standard library use a copy-and-freeze technique for strings you hand them. `Hash` keys are one, `File` paths are another. Otherwise you could get yourself into trouble with stuff like: a = "immutable" h = Hash.new a =&gt; "value" a.gsub! /im/, '' If `Hash` *didn't* copy and freeze that string you could really whip up confusing code. Note that, [as far as I can tell](http://www.ruby-doc.org/core-1.9.3/Hash.html#method-i-5B-5D-3D), this copy-and-freeze behavior is unique to strings.
That would be a cool job - spending all day freezing strings :D
It's true that inserting a new element into a ruby array *may* cause the array to be copied. I say *may* because, reading array.c, it looks like the array's capacity is doubled in this case, rather than just being increased by 1. So you'll get a reallocation with exponentially decreasing frequency as you insert more and more items. Additionally, ruby does a realloc most of the time, so if we can allocate more memory onto the end of our existing array, we will, and no copying will take place. That said, if you know you're going to be inserting a lot of elements one by one, pre-allocate your array! Then you get all of the advantages of an array, without that memory-copying disadvantage.
*[ruboto](http://ruboto.org/)
Then I need inspiration :) I can't say I am familiar with this part of Phusion Passanger. I though it was a apache-ruby module / web server?! Would you mind tell me what this repo is? What can I so with it? Thanks man! 
The Stanford NLP (Natural Language Processing) Library has Ruby bindings. Link to the Stanford NLP Library: http://nlp.stanford.edu/downloads/ Link to the Ruby bindings: https://github.com/louismullie/stanford-core-nlp
I like #f as much as #b, but I want a literal `%f()`.
I agree that a literal would make more sense.
It builds the module. Compiles stuff, makes the packages, etc.
Puppet and chef are both ruby if you want to spend time configuring systems.
Yeah. It's essentially a big example of how you can use Ruby as a more powerful replacement for shell scripts.
Check out shoes.
A very quick google search reports there is such a thing as PHamlP. But that is a port of php, so if there are updates to php you'll have to wait for a new version of PHamlP to come out.
You reminded me of something. OP: Also take a look at the Ruby project [Chef](https://github.com/opscode/chef) . You can find it easier by googling "opscode chef". It's another great example of ruby outside of the Web. Although the server end is written in erlang now, the client code is still ruby.
Chef
Depending on effort and ability, six months, plus or minus a few. 
I've been doing Rails for about 4-5 years, also quite bored of it but it gets bills paid. That being said an I've been playing with clojure in my off time and enjoying it immensely, though not exactly what you've asked, coming from a similar place, thought I'd throw that out there
This. To be honest, the only time I use Ruby for web is when I need to perform actions on the system itself outside of the scope of what's practical with PHP. 
[ruby-processing](https://github.com/jashkenas/ruby-processing) is great fun. If you're interested in music at all there's also a bunch of fun stuff you can do with ruby &amp; midi hooking into GarageBand/Reason/Logic etc.
thanks
Is Chingu still a thing? Or do newer releases of Gosu surpass it at this point?
isn't Puppet python based?
Also, `Array#flat_map` happens to behave a lot like `Array#map` and `Array#flatten` combined together. I believe `#flat_map` will only flatten to a depth of 1.
Where can I review the code before signing up? What is the advantage over Github's [post-receive hooks](https://help.github.com/articles/post-receive-hooks)? Btw. &gt; I can't afford SSL [StartSSL](https://www.startssl.com/?app=1) offers certificates for free. 
https://github.com/vaneyckt/Jently does something v similar, but rather than testing before deploying, it checks pull requests before they get merged
Nope! You might be thinking of [Salt](https://github.com/saltstack/salt).
Only the hook itself is open source at this point ( http://git-hook.mrsnowf1ake.com/post-commit ), but it's very possible I'll clean up the code a bit and release it under an open licence. Recall though that this is running on my server so even if I open source it you don't know what other code I could be running. You'll just have to take my word on that, and also on the fact that I have no access to your Twitter password (it uses OAuth). I originally wanted to have it just as a hook, but then I'd either have to ask everyone to register a Twitter application themselves and configure it or I'd have to release the consumer token publicly, neither of which are particularly favorable solutions. If I recall, the free certificates from StartSSL are level 1. At that point are they even worth the trouble? I'm not too familiar with the differences between levels but I read somewhere that with a level 1 certificate many browsers complain about a security risk.
Inspiration: http://hackety.com/ 
Is the hook on GitHub or just "Open source" because it is downloadable when you login to the site. The latter is not "Open Source" as far as most are concerned. You have to provide a license with the code for it to be "Open Source" (at least by OSI standards). Throw the hook onto GitHub with a license and place the link on the page.As it stands now, users have no explicit license to modify or re-distribute your hook.
Check the link to the hook above. Probably should have a license written into it explicitly... The README ( http://git-hook.mrsnowf1ake.com/README ) says in very vague terms that the hook is public domain. EDIT: More explicit license included. In addition, I'll license the server code under MIT and release it on GitHub later today.
This is super cool by the way: https://github.com/michaelfairley/hasu
i hope someone has a solution, it annoys me too. 
I like knowing about the arg to flatten that is neat. But there's no reason to ever have done this: map_data = [] track.each { |lap| lap.each { |waypoint| map_data &lt;&lt; waypoint } } When you could have done this: map_data = track.each_with_object([]) {|lap, arr| arr.concat lap} 
It's not a violation of SRP. It's a single transformation, and it's not at all arbitrary. The need to map an array of things into a corresponding array of arrays is very common. Conversely, your examples don't actually make sense. Let's go through them one by one: `#flat_select` would be undesirable. `#select` will return a subset of the array you call it on. If your array is already flattened, `#flat_select` would be useless. If it isn't, then wanting to flatten it is indeed a totally separate concern. However, `#map` can take you from a flattened array (like `posts` in my example) into a non flattened array (like `posts.map(&amp;:comments)`). This means that if you *know* that you're transforming an array of single elements into an array of arrays, `#flat_map` actually does something good. `#flat_inject` would be totally useless. `#inject` might not even return an array, in which case `#flat` would exception. If it did return an array, then you'd have the ability to ensure the flatness from within the block you pass to `#inject`, e.g. posts.inject([]) { |array, post| array.concat post.comments } `#map_select` could actually be derived with `#flat_map`. E.g.: posts.flat_map do |post| post.some_conditional? ? [] : post.comments end Of course, I wouldn't call the result super clean code. However, `#map_select` seems like it'd be a good candidate for `#each_with_object`: posts.each_with_object([]) do |post, ary| ary.concat post.comments if post.some_conditional? end If that use of `#each_with_object` doesn't violate SRP, then certainly `#flat_map` doesn't either. At any rate, you could also rewrite `#flat_map` with `#each_with_object` exactly like I did with your hypothetical `#map_select`. But`#flat_map` isn't some arbitrary API bloat added to `Enumerable` that simply chains two unrelated methods together. It serves a single, easy to understand purpose. It could be that the reason it looks ugly to you is that you've never used it, and programmers often balk at the unfamiliar. If you approach it with an open mind, `#flat_map` is a nice tool to have available.
The validate method currently returns an array with just the model class in it, but I suspect that's a coincidence and validate could be made to return the method name. Then your example would work. Wanna submit a pull request for that?
I knew there was a cleaner way. Thank you for the input.
I think a key point has been missed here. The tricky thing is that it isn't easy to articulate. `#map`'s block returns a single value. `#flat_map`'s block returns _an array_. `#map`'s intended use is to take each value from a collection and transform it into another single value. `#flat_map`'s intended use is to take each value from a collection and transform it into *zero or more other values*. Each of those sets of values forms a subset of the final result. That "zero or more" bit is important. Take a look at this: [1, 2, 3, 4].flat_map{ |x| i &gt; 2 ? [i, i*2] : [] } #=&gt; [3, 6, 4, 8] Half the time we return 2 elements, half the time we return zero. When we return zero elements, nothing gets added to the result - not an empty array, nothing. C# makes the `#map` / `#flat_map` distinction - they call them `Select()` and `SelectMany()` - the difference being that, because C# is statically typed, the "block" (lambda) passed to `SelectMany()` may only ever return an array of values, whereas ruby's dynamic typing allows `#flat_map`'s block may return a single value for convenience. However, the intended use of `#flat_map` is that it returns an array, which forms some subset of the final result. Does that make more sense?
&gt;Performance is reasonable. (Best case startup 4 seconds or less). Has anyone worked with Ruboto yet? It sounds really interesting, but all my app ideas are fairly simple and a 4 second best-case startup time doesn't sound too good to me. Does this have a noticeable impact on the app or is it really not a big deal?
`#flat_map`'s single responsibility is to map a collection on each element in an array into a new array. It's easy to describe in a single sentence. The relationship between `#map` and `#flat_map` is analogous to the relationship between `#&lt;&lt;` and `#concat`. That's also why `#flat_map` is aliased to `#collect_concat`. Now, there's nothing wrong with you preferring `posts.map(&amp;:comments).flatten`. Preferences are often arbitrary. The point of SRP is to make sure our objects and messages perform a single role and operate at a single level of abstraction. `#flat_map` does not violate SRP. Or, if it does, so does `#reduce`.
Alright, released as open source! (MIT license except for the hook which is public domain) https://github.com/mrsnowf1ake/twitter-git-hook
No, not cool. Keep this sub-reddit useful. 
Sweet. Looking forward to trying it out.
Great! Did they agree to ditch patch level nonsense and go with semantic versioning?
Well, sort of. What they are using is not semantic versioning ( backwards incompatible minor releases for instance)
These guys work their tails off to build a great language that's been around way before "semantic versioning." I figure these guys can number these releases with the cyrillic alphabet for all I care. I get to go to work every day programming in a language I love. (Not necessarily bagging on your comment; I can certainly understand the desire for more sensible version changes. 1.8-&gt;1.9 was rough).
Also the most helpful thing has been having an existing rails app to work on that was created by an experienced developer. I recognize that's not common but no matter what you should have a project of your own that you are always working on. It has been really helpful in learning both Ruby and Rails to have a clear understanding of additional functionality I want to implement. I primarily use railscasts, google and stackoverflow as well as local Ruby meetups as resources when I'm trying to solve a specific issue, error message or to figure out a new feature I want to add. [edits - words]
woahh nice!!
My comment was a bit dry, but I do appreciate the language.
Rvm actually can update it: https://rvm.io/rubies/upgrading
`#map`'s responsibility is to map each element in a collection into **ONE** new element. `#flat_map`'s responsibility is to map each element in a collection into **MANY** new elements. That's the difference. Yes you can mimic `#flat_map` using `#map` and `#flatten`, but you can mimic `#map` with a loop - that doesn't mean that `#map` violates SRP. 
the Gitlab developers aren't from github or anything, are they? Why would they not want people setting up public github alternatives, why would they care? But I think it's true that their focus has been on non-public repos, and the popularity and cost-free-ness of github for public repos probably influences that. 
True, I'm sure I read something somewhere about it - GitLab does use GitHub for developing [GitLab](https://github.com/gitlabhq/gitlabhq) (at least publically). Edit: scratch this. Seems [gitlab.com](https://gitlab.com/public) is open for business.
okay so how would I use regexp to remove characters from a string? for example, the string says "blahblah/aslkfja/asgadfg/asdfhgadg/asg" and I'm looking to delete everything after the first "/"
So is bundler already merged?
Thanks, really. It's nice to see a person helping another person. I'm learning programming outside of any sort of institutionalized education. Found myself stuck on a personal project. I've only asked one other question online, other than this thread, so I hope I'm not bothering anyone by asking questions on here. As a last question, do you know a better place I could ask questions? I used [Codecademy](https://www.codecademy.com), for anyone else who wants to learn more at home.
No. The plan I saw before is that rubygems will gradually have some overlapping functionality with bundler for a while. So some functions that originated in bundler are now in rubygems. 
Remove every character after the first forward slash: my_fixed_string = my_string.gsub(/\/.+/, "") or modify the original inplace: my_string.gsub!(/\/.+/, "") 
Sorry for the shameless plug, but the service I run (http://practicingruby.com) is pretty much exactly what you asked for. We've got over 90 articles, very few of which are specific to Rails, and all of which can be used as a springboard to dive deeper into various interesting topics. It's $8/month, but I give free or discounted accounts to anyone who asks for them (see the fine print at the bottom of the homepage). There are some samples there as well, along with a link to view the titles of all articles in the archives.
Thank you so much!
[Bundler: a tiny locomotive driving over your toilet paper](http://s23.postimg.org/fgfbh4up7/Screen_Shot_2013_12_26_at_8_05_29_PM.png).
I'm not sure I'm a fan of having the instance itself be the argument to the `describe` block. For one thing, that makes it difficult to test multiple flavors of the same object, and your specs will read strangely: # this? describe User.new("Bob", "Smith") do # ... describe User.new("Ann", "Apple", :admin =&gt; true) do # ... # or this: describe User do context "a regular user" do ... context "an administrator" do ... Likewise, when you output spec descriptions, in the first case you'll have situations where the spec description is something like "#&lt;User@0x2929375f&gt; authenticates with correct password", which is not very helpful.
Seems so :)
&gt; Or wait, is it intended to set it to a relative path like ./Gemfile, is that the idea? If you set it to be `RUBYGEMS_GEMDEPS=-` (minus sign), it will look for a gemfile in the current directory (and deeper directories too, I think). 
Defining #to_s should improve readability. I usually use a custom subject block instead of passing an instance to describe.
You're right... the 'global' describe block should almost always be the Class itself... then within those contexts you would make a call to subject like so: describe User do context 'admin' do subject{ create :user, admin: true } when_calling '#allowed_to?', 'eat pie' do it{ should eq true } end end end
Not sure how I feel about this. While it does definitely DRY up a common pattern, most rspecs I encounter in the wild already have too much confusion around *what* state the test is in and *why*. Seems like a cool gem, though!
I'm going to predict the answer would be practice, practice, practice. Just like how he went through using the console to explore methods, that's what you should do for everything you don't (yet) understand. He didn't acquire those skills overnight, though - it's going to take you a long time to get to that level of comfort and understanding. The two most important things you can do right now are experiment and read. Don't do one or the other - you need to do both. If you're reading up on the Enumerable methods, you also have to try using them. Nobody ever became a great boxer just by reading about Muhammad Ali.
No offence taken at all. In general I'd agree with you and it's quite rare that I post short "code snippet documentation" pieces to subreddits, I usually reserve that for longer, detailed tutorials. However, people regularly get in touch with me with queries about capistrano/ deployment because they've either followed instructions from my book about deploying rails apps or read a tutorial I've written on the same subject. A disproportionately large number of people got in touch because they were stuck on either this exact task or some variant, e.g. how to do stream output back rather than wait for execution to complete and then return output. Whilst it's a very small number of lines of code, actually working out how to do it in Capistrano 3 when your starting point is "here's how it works in cap2, how do I rewrite this to do the same thing for cap3" is none trivial. This is partly because there's very little documentation around for Cap 3 as it's quite new. Since a lot of people seemed to be struggling with it, it seemed worth posting somewhere the community would see it to avoid a lot of people spending a lot of time working out how to do something which as you say, once you can see how it's done, is actually very simple!
Nice, download options look really useful. The tail methods quite different because it gives you the most recent lines and then completes instead of live streaming the logs until you cancel edit: just saw your edit! think you might have to use 'execute' rather than 'capture' as if I remember rightly 'capture' only returns when the command completes?
You should never run production machines without any sort of centralized loggin infrastructure. Splunk is popular but expensive, centralized syslog is cheap but only handles syslogs. Logstash + kibana can give you excellent handling and presentation. Ops guy, chiming in :)
So far, I've not found any external libraries that do mp3 playback. Thanks for the Gosu video though, fun to watch.
These guys are pretty cool as well &lt;https://papertrailapp.com/&gt;, not that expensive and simple to setup. Would you extend that never to very small (e.g. less than half a million hits a day) production applications running everything on a single server?
Don't forget staging environments. While you may have a logging solution for your production environment, it's possible you don't want to pay extra to run one or more additional test/staging/etc. environments.
Papertrail looks awesome, I also know of Loggly. Being in the Big Corp(tm) field right now we seldom use 3rd party services, which is a shame. For small environments, logging to a 3rd party service is my best bet. I would also suggest thinking through some basic disaster scenarios and how you would deal with them if you only have one server. Some basic redundancy might be helpful to avoid most of those scenarios. Separation of app and persistence layers is often beneficial if only for the I/O and hopefully not that expensive server wise. 
Double post, sorry.
Definitely re testing restore scenarios! We outgrew single box configs a while back and moved to something with more redundancy and better geographic load balancing but I have to admit I sometimes miss the simplicity of the old setup!
I wonder if there's a performance difference between `[]` and `Array.[]`. Hmm.
&gt; Did you know about `[{"foo" =&gt; "bar"}] == ["bar" =&gt; "foo"]`? This is neat, but not too surprising. This just looks like another example of ruby in "[poetry mode](https://courses.edx.org/c4x/BerkeleyX/CS-169.1x/asset/handouts_slides_04_ruby_continued.pdf)", which allows one to leave off the curly braces of hashes, except where it's ambiguous where the hash begins and ends. 
try running ruby --debug filename.rb
Try running with -w or -v , it will warn and verbose mode. So, you can know what's going on
I tried. No matter what I type, no matter what file, it just blinks.
sounds like an awesome release. bravo!
Thanks. I did that, it still just blinks. Doesn't matter what file I try to open up.
Post anonymized code to a gist or pastebin.
I just made a sample file called "hi.rb" and put puts "Hi" and even that won't work.
You're not supposed to type the "&gt;". 
what about "ruby --version"? Also do "which ruby" and see where your symlink is pointing. Is this on Linux? What if you add: #! /usr/env/ruby to the beginning of the file and make it executable. Then will running the file on it's own work?
I'm not typing the &gt; either! I've done this before for weeks, it's just not working today for some reason.
All .rb files.
Try removing your ruby package and then installing it again (or even an older version)... I'd suspect that one of it's binary files (or a dependency package) is borked. 
What do you think about Fluentd?
Are you using rvm? Try installing a different version of ruby. It sounds like your ruby might be corrupt
Yeah, it just blinks with nothing being displayed. I'll reinstall. Thank you!
I don't think I am. Yeah, I'm going to reinstall. Thank you
Can you run `which ruby` and check what are you running when you run `ruby` ?
ohhh.... Even if you're running the command from the directory which holds the ruby executable?
your code look fine. I think the problem is your ruby installation
OP here: I'd love some feedback about what the TOC looks like for this. I'm aiming things at the novice Rubyist, I guess — probably someone who's had some experience with Rails but who now has to do some text processing, or a data scientist who isn't quite familiar with Ruby.
It's not Array.[] that gets called, but Array#initialize: &gt;&gt; class Array | def initialize(*args) | puts "hehe" | super | end | end =&gt; nil &gt;&gt; [1,2,3] hehe =&gt; [1, 2, 3]
Your preview currently has practically nothing on it (first 4 pages, fourth page is empty aside from the header). I went ahead and bought it anyways because it's only $5, and I haven't really seen a decent source for this yet... which is weird since it's something that you frequently have to use In The Real World, but I haven't really seen it covered in the books or tutorials I've read.
Hmm, looks like Leanpub doesn't regenerate previews when I publish a new version of the book, which is odd. I've generated a new one, which should give you a sample of the "shell one-liners" chapter — which is the area that I find even experienced Ruby devs find something new with.
Wow. I'm surprised with the Event Machine performance. Nice talk.
I'm curious, but not enough to watch a 30-minute video. Anyone got a tl;dw?
Hey. Posted this a few months ago and have been working on it as I use it in the meantime. This is basically just a to-do list with time estimate/fulfillment tracking built in. But I've tried to make it small, clean and usable in the console. So after a few versions I have what I consider to be a usable, distributable release... "Ferocious Poodle." Hopefully someone else finds it useful. Also still interested in feedback as far as code style, features, anything that would make this more usable or attractive, etc. (Thanks to those who responded last time I posted.) Cheers, Cameron
Event machine is better in terms of performance however you end up writing more code. And not all ruby libraries work with em. 
EM is great. EM and Cellulite.IO can make even the nastiest problem fairly straightforward, as long as you stay out of callback hell
Which kind of apps have you used them for?
I've made a few reddit/irc bots using them
What about other scripting languages, like python? Can you generally run things from the cli? Do you have any aliases set up? 
I'd love to see some performance comparisons with C/C++ or viable techniques to make Ruby performant for large volumes. I used to deal with 100s of GBs of text and must admit, Ruby isn't a language I'd reach for where that sort of workload has to be processed ASAP...
my problem with this kind of approach is that we're testing a method call. that alone is very simple. i don't think we need to provide an abstraction around what can be expressed as "obj.foo(123)".
Would you upload it on TPB?
EM is a massively underrated technology. You get all the Ruby sugar and it's quick. Not as quick as Node or Go but the apps you're likely going to use it for can be scaled using hardware. At the very least it gives a nice prototyping platform and you can optimise out the hotspots later using something faster. If you're interested in Ruby concurrency it's worth going through the libraries like EM-HTTP that Ilya Grigorik wrote and his blog posts around that time.
I'm a newbie at programming and just started learning Ruby, and this happens to be the first script I tried to run that wasn't mine. http://puu.sh/62cGW.png What do I do? @_@
Thanks, that's an interesting topic. My gut feel would be that the "do I use C or do I use Ruby" question has the same answers in this domain as it is in most others. It's easy to think of extreme examples where performance is critical, datasets are huge, and where the code will be running forever (and so development time is a drop in the ocean relative to execution time): in these cases, it's entirely rational to reject high-level languages and reach for C. There are other cases at the opposite end of the spectrum, though, where you're drilling down and exploring the data, where you haven't yet settled on the solution to your problem or even what your problem is. In these cases, I think I'd optimise for speed and for ease of development and reach for Ruby (just as a Pythonista would reach for Python, a Perl monk for Perl, and so on). In the middle, there's a crossover point where that question is harder to answer; there are so many more variables than just pure execution speed, though, so it's difficult to say clearly where the dividing line would be. One thing that perhaps tips that divide a bit further in Ruby's favour is that it's straightforward, once you've written something in Ruby and your design has settled, to identify the bottlenecks and rewrite those sections as C extensions. Look at something like [Redcarpet](https://github.com/vmg/redcarpet), the Markdown processor: the performance critical elements are in C, the general API is in Ruby, and so you get the best of both worlds.
That's actually an interesting question: what would be the reasoning behind it? I've definitely been in the situation where, as a student and a junior dev, I couldn't afford high-priced tech books; when the pricing is so obviously oriented to companies with cash out the wazoo, and so an individual book was $100, I found that hard to justify. So I can definitely sympathise with the position of someone hunting for a pirated version of a tech book. But I've also tried to be sympathetic to that position in my pricing: I don't think seven US dollars is a horrendous amount to ask for a full, DRM-free ebook and a lifetime of new editions for free. I'm realistic: while I'm not sure if information wants to be free, enough people want information to be free that all ebooks will eventually be pirated. I'm not going to stand, Canute-like, and try to stop that: but I have tried to make this book as accessible to as many people as possible.
You mean Celluloid? 
I have no idea why someone would do the text processing with Ruby but I definitely like the answer. Markdown is good for web, not for the book. Take a look at «Programming in Scala», it's the bes't TeXeD book I've ever read.
The value of is_even changes at is_even = !is_even This changes the value to the opposite value (true/false) of the current value of is_even 
Oh jeez... punch me in the head.
This strikes me as something undesirable and dangerous. I have a hard time imagining a case where I want objects to always create new attributes when trying to assign, but I can think of quite a few where `some_instance.my_TYPOthing = 3` not throwing an exception would be horrible. It seems to me in Ruby, especially with regards to it's metaprogramming features (method_missing, define method, class &lt;&lt; some_instance, etc.), it's easy to get caught up in making "Ruby-like" syntax at the expense of clarity/simplicity. `Object#method_missing` (for the record you should probably **never** over ride method_missing in Object, do it in a much less universal class) can let you do some cool things, but at the end of the day is having something like: send_mail(user.get_email, msg) rather than: send_mail(user.get_field(email), msg) really worth the indirection and complexity it adds? The dynamic syntax seems really nice on a glance, but personally I would much rather work on a code base using the much less magical static `get_field` method. It's easier to test, easier to find and easier to understand.
Problems with it: * no type security, it's effectively the same as dealing with referencing fields via strings, only a bit concealed, incredibly easy to break everything with a typo, and you have absolutely no idea what happend or where, as setting a field is completely opaque; it will happily create a field for any identifier you pass in. * forces you to use `self` inside the class itself to access the 'field'. * `attr_accessor` not only generate the methods, but also serve as an indication to the programmer using the class. This is pretty useful to see public variables. If one would use your way, it would've to be documented anyway, so you don't even save lines. Example: class Foo def set_with_self self.value = :foo return end def set_without_self value = :foo return end end Results in: irb(main):018:0&gt; f = Foo.new =&gt; #&lt;Foo:0x007f93eb9ec6c8&gt; irb(main):019:0&gt; f.set_without_self =&gt; nil irb(main):020:0&gt; f.value NoMethodError: undefined method `value' for #&lt;Foo:0x007f93eb9ec6c8&gt; from python.rb:6:in `method_missing' from (irb):20 from /Users/femaref/.rbenv/versions/2.0.0-p247/bin/irb:12:in `&lt;main&gt;' irb(main):021:0&gt; f.set_with_self =&gt; nil irb(main):022:0&gt; f.value =&gt; :foo I'll stay with `attr_accessor` for the general purpose. However, this doesn't mean your example isn't useful, it's quite nice to create hashes accessible by method.
There's always going to be a way to accomplish what you want without metaprogramming, but there are definitely times where it's appropriate and useful. The other commenters explained why it's not a great idea in this example. Look at how Rails uses method_missing, particularly in ActiveRecord / ActiveModel.
Hi. Sorry, was in the process of writing this last night when my girlfriend made me come to sleep x,x It's actually working correctly save for two things: 1. A problem in my build script which was placing that constant declaration in two different places. 2. I forgot to add the text that says you don't have any tasks, and to add them. In this version I decided to take off the banner declaring "Day.rb ; Today's Tasks:" to make everything "lean." --- A slight usability oversight I guess. I'll fix it up today. Thanks for trying it out.
Interestingly enough, I did try "jeweler gem" on an incognito non-Chrome browser...but still tied to my IP...and technicalpickles/jeweler made up the top two results on Google. Is it because that gem, and more particularly, that phrase, is more popular than people searching for a jeweler (old-fashioned) who works with (physical) gems? Or is Google guessing something about my IP, or if not my IP, my location (NYC, which has a fair amount of Rubyists)? 
I get the same result using a fresh browser not tied to any google account through a VPN so looks like a normal result?
I don't think it would be tied to an IP as most ISPs (outside US) allocate dynamic IPs, as far as I'm aware.
On the flipside I remember getting countless hotel sites when researching Trinidad. Especially when looking into how it handled thread pooling. 
Yes I do. I'm so doped up on morphine right now (Wisdom tooth extraction) that I mangled it
Same here
Not to hurt your ego, but it has nothing to do with your history. Same result on Start Page: https://startpage.com Google just knows "gem" + "jeweler" is more likely to be associated with Ruby.
Oh, it is.
I don't see this as something I'd use in production code, but I could definitely see a use for this in my .irbrc. My own way of working is very REPL oriented, I spend a lot of time "building sandcastles" and trying things out side by side with the source code I'm working on, and having the ability to modify a little bit of object behavior without having to reopen the class could really save time.
It is acceptable to use `method_missing` when providing access to an infinite set of things. If you only need to provide access to a 100 things, write a class method to define the 100 methods. If you do use `method_missing`, please define `respond_to_missing?` as well. Also, you should not define `method_missing` on `Object`, this will break a lot of code. Instead, put your `method_missing` in a module and include it where needed, or just inherit from OpenStruct. 
I remember when we first started implementing Unicorn and God... that really lead to some interesting search results.
Oh no worries, I was excited - I thought there was another library I got to look into. :) GL on your recovery, bud.
I still like my "man find date" search. Went directly to Unix results. Could have gone way worse. 
neat! can't you exec some commands to check if the server is running / prompt the user for stopping it?
Probably. I should add that to my to-do list. It'd require checking the running processes for minecraft (which I'm not sure how to do [yet]). The environment I designed it for was a server running McMyAdmin, where it would be executed from within the mcma scheduler after the server had already been shut down, then mcma would bring the server back up. However, a preflight check to see if minecraft is running, and break out of the script if it is would be useful for people who want to implement it in non-mcma environments.
This is great, very cool!
This is very cool. I received a Pi as a gift this year and have been playing with pi_piper for a few days. My first project for it is a little web app that records my plant's soil moisture (via an analog hygrometer attached to a serial ADC) and the same relay board shown in the video to power on an aquarium pump to feed from a water reservoir. I share the presenter's enthusiasm; these little machines make it super easy to build and automate your own "internet of things."
What is the plan on proceeding further, after completing this ?
You could make it possible to pass an array so the usage of gem will be simplified, no need in a loop "addresses.each do |address| ...." 
This should assist you: https://github.com/djberg96/sys-proctable
Google knows you better than you do, Dave...
Your browser's fingerprint is probably fairly unique. Check out https://panopticlick.eff.org/ (especially the PDF linked in the last paragraph) for more information if you're curious. If that's the case, Google can track you across IP addresses (but not necessarily browsers / machines) with relative ease.
You might want to consider using composition rather than inheritance for the different drivers e.g. class Database &lt; Struct.new(:adaptor) ... end class PgAdaptor def initialize(database,host,port,username,password=nil) ... end end class MySqlAdaptor def initialize(database,host,port,username,password=nil) ... end end adaptor = PgAdaptor.new(database, host, port, username, password) database = Database.new(adaptor) In this case this would be an example of using the adaptor pattern as well (I think ActiveRecord uses it from memory).
So hard... but so worth it.
Great article. I had a hell of a time getting PostreSQL set up. 
FYI your link back to this reddit post is missing the colon in the link. 
If you're on OS X, don't forget about [Postgres.app](http://postgresapp.com/); if only to get the ball rolling a little more quickly (especially for new users).
I'm a developer at Phusion. Thanks everyone for letting us know. We're working on rolling out a new release right now. A new gem, tarball and binaries are coming up. In the mean time, you can work around this problem by setting a Date header from your application. For example in Rails you can do: before_filter { response.date = Time.now.utc }
If you're on a Mac, and you want to easily start or stop Postgres, I recommend [the Lunchy gem](https://github.com/mperham/lunchy).
Thanks Hongli. I appreciate it. It's been a fun morning.
 rescue =&gt; e puts e end Swallowing every exceptions is usually bad (although you're not really 'swallowing' since your printing them out, but your program is continuing execution). If you don't know what to do with an exception when you catch it, it's better to just fail fast. Only catch exceptions that you know about and can handle (maybe retry, or gracefully get past like if for example there was a network timeout) http://programmers.stackexchange.com/questions/164256/is-catching-general-exceptions-really-a-bad-thing 
It's fixed! http://blog.phusion.nl/2013/12/30/phusion-passenger-4-0-30-released-fixes-date-header-bug-that-causes-cookies-to-expire-prematurely/
Computer tries to represent real numbers as fractions with denominator equal to a power of 2. It often leads to the loss of precision. You need to calculate using rational numbers, for example. Float(Rational(111, 100) + Rational(444, 100))
Great point. Lunchy is awesome. In fact, it was using lunchy that I discovered that it was the system Postgres that was getting in the way of homebrew's.
Personally, I'd run a Linux VM over trying to run stuff in windows. I haven't really developed in Ruby in Windows. I know that python development is a lot harder in Windows than a nix based environment. The guys at work who use windows still run everything in a vagrant VM. That being said, I think the only real contender for IDE is RubyMine, which is cross-platform. However, I don't think most Rubyists use an IDE for the most part. Ruby culture is much more geared to testing over debuggers. For interesting exercises try [Codewars](http://www.codewars.com/) and [Ruby koans](http://rubykoans.com/). I don't think it is really possible to *understand* rails until you understand ruby. If you just wanna make a toy web app though, you can get going pretty quick with Hartl's tutorial. Book recommendations: *Eloquent Ruby*, *Practical Object Oriented Design in Ruby*, and *Metaprogramming Ruby*
I'm learning Ruby at the moment as well. It's my first language so I apologize if this isn't really what you are looking for but I use [codeacademy](http://codeacademy.com). Really clean and strait forward instructions, test editor, and console(i think this is what it's called) all in the browser.
I don't want to simply make a "toy web app", so Rails will have to wait. Thanks for confirming that for me. I'll check out the books you recommended as well as the websites. Codewars looks interesting; I didn't delve in Ruby Koans. I was in the middle of a chapter in a Ruby book and just took a break and saw your post. As far as what you said regarding Ruby culture being geared more to testing over debuggers, that was the impression I already had. It wasn't necessarily from informed sources, however. You've confirmed this for me. I'm no stranger to testing (without benefit of debuggers). I will check out Rubymine but not until a later date. It has code completion (among other things) and I personally believe typing each letter and command is better for my learning. Personally, I STILL have problems using code completion for any language. I type rather fast and would just rather type exactly what I want without a program "guessing" what I really mean to type. :) (does that make sense?) Thank you for the information!
I am a software dev with a lot of experience that recently picked up rails. if you don't know any programming you should learn ruby first. if you don't know web development at all but you know programming in general you can probably start with the hartl tutorial and it should get you in a good direction. (I found the hartl tutorial way to basic for my experience. reading the API docs and just querying what I wanted to know worked better for me.) The rails guides are good, dense docs but not as good as the django docs are. There are a lot of different ways to do ruby. try to learn the idioms if you can. rails does a lot for you behind the scenes and is a bit perplexing sometimes if you don't know the ins and outs of naming conventions, etc.... The magic is not that magic though. the generators do things and tell you what they do after they do them. if you run any rails command out of the box it will list the man page. "rails generate" will show you the available generators. "rails generate model" will show you the docs for generating models... it's pretty handy. From the get go you should start learning about git, rvm(and gemsets) and bundler. you can set a .ruby-version file and a .ruby-gemset file that automatically load up what you want to use. They are excellent tools and will make you a stronger developer(not to mention dependency management when deploying to a server will be much, much easier). 
As already pointed out, this is due to a floating point error. You can add them with BigDecimals instead and get the correct result. (BigDecimal.new("1.11") + BigDecimal.new("4.44")).to_f # =&gt; 5.55
Rails is such a well-designed stack (basically every chapter of Fowler's Patterns of Enterprise Application Architecture maps to a part of it), that I would recommend just making Rails apps. The Ruby will bubble up from that. Rails is many Ruby developer's "gateway drug" for a reason. It's accessible, and the underlying language isn't abstracted behind some kind of witchcraft; it's right there when you start to use it, it reads well and is intuitive. You learn it almost without realizing it. One of the barriers when wanting to learn a new language is staring at a blank text editor and thinking "OK, now what?". Rails will give you that initial push to get creative, then just take it from there.
There's no reason you can't learn Ruby through Rails, but I would suggest familiarizing yourself with the language first (such as rubykoans) before diving into the framework. The debugger is fine in ruby, you generally don't utilize as much as testing. It can easily be used inside tests as well.
I suggest you try vagrant to run your rails server, you'll be able to pick up some Unix skill in the meantime, installing packages such as mySQL / PostgreSQL, Mongo, Memcached, or other services often used with the rails stack. I'd recommend using chruby as a ruby version manager. For the text editor, I'll recommend Sublime Text. Also, you can use git to manage your code, github can be a good choice if you don't mind having your code online. And you can also learn how to use heroku, it's free and you'll have your app online. Have fun !
I learnt Ruby through Rails. It's a fine way to do it if you've already got some coding in another language under your belt. I'd steer clear of IDE's for a while, though. They're big, complex beasts which can go wrong in ways that have nothing to do with the specifics of what you're trying to learn. As far as formatting errors go, you can go a long way just by paying attention to your editor's syntax highlighting and automatic indenting. I presume Notepad++ can do as good a job of this as anything else.
Without a computer science degree, I'd say it's very reasonable to expect arithmetic with decimal numbers to Just Work™.
After completing this; proceed to reading till chapter 7/8 of Pickaxe book. Then build a Ruby gem to emphasis file organisation, understanding best practices in (CLI) API design.
That's not an excuse, especially when some of these people are writing software that need numbers to work properly. Floating point precision is a fundamental concept that every programmer needs to be familiar with, even if it's only at a rudimentary level.
Look at Rails as a Rapid Application Development framework.... at least at first. I'll second the advice about concentrating on Ruby before rails. Matz (author of Ruby) wrote the Emacs Ruby mode. You might like it.
I was one of the people who learned ruby through rails instead of before. The hitch for me is that I need to have a project to work on or I lose interest. If the project you can come up with to learn on is ruby only, great! Just not necessary. What you mentioned about "doing stuff automatically and not knowing what's going on behind the scenes" is a beginner trap in any language. You can choose to gain a broad, but shallow understanding of what's going on or take one piece at a time and try to understand it in depth. Personally, I choose broad since it allows me to get some early success that will keep me motivated to learn more. I write a bunch of naive implementation and ignore the fact that I have no clue how or why it's working. Then I go back later and refine it. If rails is a fit for your learning project, use rails to learn. There's going to be magic you don't understand no matter which way you start, pick the way that keeps you most interested. Rails taught me what an incredible language ruby was. As far as software, rubyinstaller.org and the devkit are your friend (the x64 version has problems with a few important gems, so I would stick with x86 on windows 7). I like notepad++ for non-rails ruby stuff, but can't live without rubymine for rails. The auto formatting and variable checking alone make it totally worthwhile. I used to use netbeans before they dropped rails support and I've used aptana (eclipse) extensively, but rubymine has totally spoiled me, it's absolutely excellent. Ugh, now I'm starting to get some pretty big remorse since my license is up for renewal as of a week ago and I haven't upped it yet :S Additionally as far as software, I do love me some linux (but I also love videogames, which is why I stick with windows), so I need me some linuxy tools. Console2 for windows and ansicon make the terminal friendlier. I also have msys-git installed and the binaries included in my path so that I can use nifty things like capistrano. Finally, don't let people get to you with the whole song and dance about how you can't write ruby on windows. Yes, linux and mac are the preferred OSs of many ruby devs, but support for windows has never been better. My last three rails projects have been developed on windows and deployed on linux without any OS related problems. Vagrant is great and all, I just find myself using it less and less for small and medium sized projects.
I have a strong opinion against codecademy with regards to their Ruby lessons. I've tutored a few beginner Rubyists and went through some CodeCademy tutorials and found their code examples to not be idiomatic Ruby code. It looked like a Java developer created their Ruby courses. I recommend Russ Olsen's fantastic Eloquent Ruby[1] book. Russ writes in a fluid and loose manor and has an incredible grasp of the Ruby language. I can't recommend it enough. http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104
Seconded on all points, I have not used Notepad++ for a while, but sublime is awesome.
&gt; nothing for newbies? What do you mean? Putting a book together isn't trivial, but maybe you've done it and found it easy. Hope that's the case! 
There might be some flaws, but I highly recommend Code School still for advanced ruby (RubyBits) and Rspec. 
&gt; Rails is such a well-designed stack When you step back from it, a lot of Rails uses very strange patterns, and tosses good structure and pattern aside in favor of concise developer-side syntax. It still mostly works in its own way, but I wouldn't blanket it as entirely "well designed". It gets downright insane in some of the internals if you need to look under the hood. [Rails as She is Spoke](http://railsoopbook.com) is a (non-free) e-book that covers some of the more interesting aspects where it breaks from established OOP principals for better or worse.
What if eg. OP just started programming using Ruby. Do you seriously expect him to know how it works? I've been working for two years and I still don't, only I know that it happens and that I need to be careful &amp; make sure I avoid any problems.
I don't disagree with you. It doesn't baffle me, however, that many programmers are ignorant of it. It's just a topic that you have to stumble upon if you don't take CS classes. It's rarely mentioned in "Intro to *high-level-language-here*" type guides, because it's not in the scope of the guide. It's rarely mentioned in tech-community places like this one, because "everybody knows it already".
It's trivial to include active support as a dependency in other projects, and it thankfully doesn't add any appreciable load time compared to the rest of the rails stack. I think we can agree that core extensions are asking for trouble (until refinements are figured out and adopted), but thankfully active support is ubiquitous enough that anything else duck punching stays out of its method name foot prints.
I do my Ruby coding on Linux or OS X and use Emacs + Pry. I'll split my Emacs window in the middle and have my code open int the top and Pry running in the bottom. The Ruby mode for Emacs makes it easy to send code to Pry for evaluation. I really like Pry for inspecting objects, evaluating methods, and generally fiddling with the current state of the program. Doing this on Windows? Damned if I know…
I do not have a computer science degree and the floating point number precision problem is something that I learned very early on (roughly 3 months into my 1 year of fairly rigorous learning regimen). I'm a bit of an oddball however. I did not learn programming and computer science on my own to solve a problem that I had encountered, but rather just to learn it for itself.
i second virtual box or dual boot or whatever for linux, but i use sublime. also, i find codecademy to be ok at first, dont love ruby koans. But, i like the model of https://github.com/alexch/learn_ruby (test driven exersizes) and doing project euler problems more. also check out https://github.com/appacademy/prep-work for a scripted curriculum. 
To add on I love using the [rails vagrant box](https://github.com/rails/rails-dev-box)
Nope. I truly understand the effort. I believe, for now, any critical response is more valuable than «great man!» or «keep going». A lot of books covering Ruby already exist. Only few of them are worth to read. Let's say, you can read that: [Programming CoffeeScript](http://www.amazon.com/Programming-CoffeeScript-Developers-Library-Bates/dp/032182010X) or instead, you can read that http://coffeescript.org. Second way would be quicker and better.
Fair point. However, "It's so ambitious!" is not necessarily productive critique, IMO. But I hear your point, which is why my content is written for those already familiar with Ruby/Rails. There is plenty of beginner content and the last thing I want to do is add something that's already been well covered. Additionally, I learned Ruby through those same resources and I don't think I could do any better. The topic of creating gems and the common patterns within them has not been well covered, AFAIK. Hence my direction there. 
You haven't really developed in ruby or on windows, but you would like to make a recommendation. Maybe you're not qualified to make one? Just a thought. Happy new year.
&gt; in Ruby in Windows I've obviously developed in Ruby based on the rest of the comment. Moreover, my advice to run in a VM was echoed by a bunch of other comments. Happy new year.
Vim. There's tons of plugins for ruby, rails, and web dev in general. Also, ruby before rails is not necessary (as long as you have some programming experience). Check out [railstutorial.org](http://railstutorial.org), although you will want to read a ruby book at some point. I've enjoyed *Practical OO Design in Ruby* by Sandi Metz, *The RSpec Book* by a lot of awesome folks, and have heard good things about *Well Grounded Rubyist* by David Black and *Design Patterns in Ruby* by Russ Olsen
I've been doing Ruby/Rails since about 2007. Once I made a few toy apps (this is not a pejorative), it's been my main language. I love it. Every once and a while, I'll try to get the stack working with a variety of good tools (Railsinstaller is an excellent project) but open source development on Windows never has worked out for me. I've even tried shared folders through VirtualBox and VMWare. At this point, I think I've done every iteration (and blogged about it). VirtualBox fullscreen with certain distros have their own quirks (such as a certain distros crashing virtualbox for some reason). I just think the best thing is to run a Linux VM like others have said unless Linux/Unix is too much of a learning barrier. Ruby is cross-platform but Unix is superior (imo) for handling text. And code is text. A lot of the gems/libraries assume a *nix box. And not to mention databases or services. Good luck, it's a great language and stack to learn. I've had a ton of fun with it and defined my career around it. :)
Thanks! I do have programming experience. I need to learn more about program design rather than programming itself (if that makes sense). I can code in quite a few languages (on an intermediate level) but, whether or not it's part of my studies and/or career, I'm particularly interested in the book you mentioned: "Practical OO design in Ruby". Thanks for all your suggestions!
Thanks for your suggestions! I won't have a problem with Linux as long as everything installs ok. TBH, I can troubleshoot the heck out of most things on a Windows platform (and that's probably not much to brag about! &lt;chuckle&gt;). I will have to stick with a Windows platform (for now), however, if I run into too many problems with the intricacies of a Linux-based platform. I'll get to that this weekend at the latest. What bothers me the most about my Linux-platform experience is: I used to live on the command line (and still do a lot of CLI with Windows). I don't know why I haven't just dove into Linux yet. It's so much more versatile; so much more secure. It's much more important to me to learn Ruby at this point, however. That should adequately explain my position, I think. I'll switch to a Linux-based VM or a dual-boot configuration on my development machine. Unfortunately, if I run into anything that requires more than the most basic troubleshooting, I'll have to stick with Windows for now. For all those that suggested Linux-based VMs or a full-blown Linux-based installation, I *WILL* get there. I just don't know if it will be now or spring break. Thanks again for all the suggestions! 
Good luck with the book! I would have linked directly to the book's site instead of the blog post though. Looks off topic here until you click through.
Regardless of what the community wants, produce what you want. Like you said this is your goal for the year. It's only a bonus if others enjoy and benefit from it (and if you happen to make something off of it)! Good luck with this one in 2014!
Thank You! Based on the description and your recommendation this books feels like a must buy. I will definitely get this book as well as the one /u/kschmidt6226 is reading. I guess it just hit me that I really need to dive in if I want to be able to do something with Ruby. Anyway Happy New Year!
Thank You! I'll definitely check it out. Happy New Year!
IMHO, it should be more cool if you added chapter about manage gem as open source in github . Good luck!
You're right! It was sort of 2 things packed in to 1. Probably should have separated them...
Thanks! I appreciate it... That's the plan :)
Except for the fact that that's not semver..
it's pretty ridiculous.
It's better than the previous scheme, but you're right, it's absolutely not semver. Ugh...
WTF? I don't even...what? Update minor every Christmas? Number of commits since minor? This isn't even trying to be semver, unless they've just gone and decided to reinvent it for some unnecessary reason.
Perhaps I'm a zealot, but is the only reason they're not doing actual semver that they're not using Git (or any other reasonable VCS)? It's getting a bit absurd..
It's funny because I was about to post this here the other day. Instead I just posted it in [/r/40DaysofRuby](http://www.reddit.com/r/40DaysofRuby/). :)
Sorry I beat you to it. Thanks for sharing.
Haha! You should check out the sub. Lots of Ruby learners out there. You can also join us in IRC. :)
My favorite is when programmers store money as floats. If you care about the result store it as cents(ints!). 
Exactly. I don't see what useful information that conveys. :-(