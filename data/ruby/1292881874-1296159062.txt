How does it compare to Python's eggs? On sid repos there are approx. 2x more eggs than gems.
I really don't know. Many of the comments on the slashdot article try comparing the Ruby ecosystem to Perl or Python based on personal experiences, but no one is producing statistics or comparative reviews. A survey of the Ruby/Python/Perl communities would be really interesting.
What makes you say that? Disclosure: I am an engineer at SFDC.
And here I am, editing that first v=0000 like a chump!
I have yet to see a proper usage of startup/shutdown (I assume you're meaning a setup/teardown that is only run once). Except maybe for hardware testing, which I haven't seen in ruby yet. Do you have any examples that need that? What other goodies does it have? I'm always looking for good clean small additions to minitest.
Heh. Alright, but I'm not convinced—you still seem to be drawing a distinction where there ain't one.
Are they simply blocking ports, or is HTTP traffic going through a proxy? If not, you could setup a server w/ SSH on port 80 or 443. Boom.
My extremely unscientific guess: $ curl -qs http://pypi.python.org/pypi?%3Aaction=index | grep 'class="even"\|class="odd"' | wc -l 12938 
Get a shell account, install RVM on it, and hack away.
third party javascript code is really easy, imo with haml's filters javascript: your javascript(); here { } http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html#javascript-filter not arguing the point, just saying filters are worth looking at for when you're not writing markup (like using textile: or markdown: when you have a paragraph of text and a single link)
The HTTP trafic goes trough a proxy. Everything else is blocked. It's lame, i know.
Actually, i'm downloading cygwin to a CD and see if i can use it at work in a portable way, without installing anything.
I'd say that's a pretty bad idea. I've never actually gotten Cygwin to work 100%, and things are always quite buggy. Have you looked a Pik?
Yeah, but it requires admin rights to install it.
Are you a developer without any kind of admin rights? What the shit dude find a new job.
I would really suggest setting up an SSH server then. I mean, you can do everything you want and then all you have to do is worry about getting putty running on the machines.
Nah, looks good. I didn't know it had that. I'd just encountered this problem a few times while trying it out.
Don't you have hosting with your ISP or similar? Or set up your home computer to host it...
Good read. &lt;minor-criticism&gt; It would have been nice to have some examples of your system working. &lt;/minor-criticism&gt;
Huh. Well, there's a *huge* data point to bring up when people say Rails doesn't scale. I had no idea the NYT used it, but that's cool to learn.
What kind of examples would have been interesting to you?
That's a good idea, thank you all for your help. I think i'm going with SSH and see how everything goes.
&gt; and a final EC2 hosting bill of a few hundred dollars. That's somewhat disappointing, especially since the time period was, what, maybe a couple days?
Who says Rails doesn't scale? Sounds like someone poorly misinformed. Between just Github and Twitter you would think people would be convinced. It's not like either of those companies had to pull a Facebook and compile their scripted language into C++ to get more performance out of it. Ruby 1.9.x with Rails 3.x is QUITE fast.
You can take a look at [rails_admin](https://github.com/sferik/rails_admin), one of the most well known engines. I think it's badly documented as well and it's really hard to find any information about it.
awesome 
awesomeness
Noice one
I don't think there are that many Rails 3-style engines around at the moment tbh. 
Great introduction.
Yah, rails_admin is pretty nifty, but not as fully featured as ActiveScaffold, I liked to see more engines.
You can start with Engine documentation in edge rails: http://edgeapi.rubyonrails.org/classes/Rails/Engine.html Also... this question has a very good timing ;) A few minutes ago I pushed new post on that topic, then I entered google reader just to see this in reddit news. Enjoy: http://piotrsarnacki.com/2010/12/21/mountable-apps-tutorial/
rails_admin is very good engine, but unfortunately it does not use new Rails 3.1 features yet, it's still treated as a part of application (like 2.x plugins) - support for new 3.1 features will be added as soon as 3.1 is stable.
Some A-level trolling going on in the comments there.
First, thanks for all the work you did on engines. Second, currently I'm more interested in what engines are already available. Though, I'll likely be building some in the near future.
I suspect you're right.
Trace the problem and file a bug report? The problems you describe are certainly not the norm.
Stuck on Windows? The Ruby Windows installers don't require admin rights to install. Cygwin also doesn't require admin access to install, so you can use gnu tools with Ruby on Windows without any admin assistance. If you're not closely monitored and you don't need some company app to do your job, I'd vote to use a bootable linux thumbdrive and bypass their Windows bullshit altogether. It's not easy, but you can tunnel SSH over HTTPS and create a SOCKS proxy to your house or whatever, or if they allow VPN access, you can totally bypass their local filters either by hosting your own OpenVPN instance or subscribing to a VPN service..
Good intro to the mongo ruby driver
I have a few I developed. They are pretty rough (not much testing) as I am still determining what I want but they may be useful to you if they provide the functionality you need: * [logmein](https://github.com/eric1234/logmein) - Provides a simple login setup designed to be not a swiss-army knife of login systems but instead just one step above something like HTTP Auth. * [remindme](https://github.com/eric1234/remindme) - A companion engine to logmein that provides the "Forgot My Password" feature needed by some websites. * [file_browser](https://github.com/eric1234/file_browser) - A engine that provides a FTP-like web-based interface for managing files. Provides integration with CKEditor and integration with other editors would not be hard. * [managed_emails](https://github.com/eric1234/managed_emails) - Think of it as a simple CMS but for e-mails instead of web pages. Allows an app to define certain e-mail that admin users can then edit the text of rather than the text being hard-coded in ERB templates.
Little problem: rubygems won't install w/o admin rights, and there is the little matter of a proxy. 
Nothing new to me here, but this is a valuable post for anyone who isn't in the know. I'm glad that rvm is getting a lot more attention these days. I don't know what I'd do without it.
Rubygems will install just fine. I had no admin access to our local machine at my last job and I had 3 flavors of Ruby running. Netbeans will also install w/o admin if the JRE is already installed, and the Netbeans Ruby package bundles a fully functional JRuby with it (getting the debugger to work is a bitch though).
Devise (the de-facto authentication solution for Rails 3) is a Rails engine: https://github.com/plataformatec/devise .
MMm I am currently fighting with rubygems in windows because, after the ruby install, rubygems refuses to behave. EDIT: Never mind - I have the proxy fight, but rubygems works fine.
Thanks for sharing!
I've used devise and I never realized it was an engine. That fact is a little obfuscated by the devise_for call in the routes.
The biggest application that I know done on engine is currently spree: http://spreecommerce.com/, e-commerce on rails. The thing is, spree does not use new APIs yet and I don't think that there are any stable engines that use it. After all, I finished work on it pretty recently and it's still in unstable version of Rails.
The scaling problems held true to the Ruby 1.8 and Rails 2.3 combination. With the new Rails, and the new engine that replaced the old one in 1.9, there is a great improvement in performance and scalability.
I guess I thought you were pretty much done when you posted this: http://piotrsarnacki.com/2010/09/14/mountable-engines/
awesome, i didn't even know GOSU existed. is it currently the top ruby game development library?
There's two big ones I would say: http://libgosu.org/ and http://rubygame.org/. Rubygame is built on SDL while GOSU does accelerated 2D through OpenGL/3D hardware.
http://redcareditor.com/ - written in JRuby
[adva-cms2](http://adva-cms.org/) is a set of engines. It's a CMS framework so you can built your app around it. The interface is not absolutely generic like rails_admin, more tailored towards what you really need in a specific context.
RubyMine uses [ruby-debug-base](https://rubygems.org/gems/ruby-debug-base) under the covers. 
As mentioned elsewhere in this thread, this IDE (as well as the ones by ActiveState and Eclipse) in fact use the same underlying [ruby-debug-base](https://rubygems.org/gems/ruby-debug-base). So I'm not sure what the "No" refers to. 
The [pydbgr debugger for Python](http://code.google.com/p/pydbgr/) shares a lot of code with [ruby-debug (http://bashdb.sourceforge.net/ruby-debug.html) and the new incarnations of [ruby-debug for 1.9.2](https://github.com/rocky/rb-trepanning/wiki) and [Rubinius](https://github.com/rocky/rbx-trepanning/wiki) called trepanning. That said, the pydbgr code uses a flaky require_relative package I wrote. So if you are using virtualenv or pip, running it may require some custom hacking to install.
Ethan knows
In my opinion, raw performance is not the biggest problem. Ruby 1.9.2, performance-awareness in the community, and increasingly powerful machines has pretty much solved that. *This* is the biggest problem in the Ruby community: https://skitch.com/dtrasbo/rgeb8/two-zillion-cores We need to make it dead simple to write code running in parallel without worrying about thread safety and the like. Functional programming languages solve that by carrying state in function arguments and not allowing modification of variables. That won't work in the context of Ruby, but never the less we need a solution as well. Once we have an easy way of fully utilizing the power of multi-core processors we need to get everyone on the wagon so that we never have to ask ourselves: Can this code run in parallel. It should Just Work™.
I know microbenchmarks don't really say anything about general performance, but I just updated a [prime number finder](http://blog.marc-seeger.de/2010/12/05/prime-numbers-in-ruby) example and Rubinius seems to have improved again. Really like where this is going :) Here are the numbers: ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]: Found 183072 in the numbers from 0 to 2500000 in 3.543216s rubinius 1.1.1 (1.8.7 release 2010-11-16 JI) [x86_64-apple darwin10.4.0] Found 183072 in the numbers from 0 to 2500000 in 1.333367s rubinius 1.2.0 (1.8.7 release 2010-12-21 JI) [x86_64-apple-darwin10.4.0] Found 183072 in the numbers from 0 to 2500000 in 1.277507s JRuby 1.5.6: Found 183072 in the numbers from 0 to 2500000 in 1.804s 
Awesome.
This uses lest memory and is a bit quicker than injecting a hash: Hash[enum.collect { |elem| [to_key[elem], to_value[elem] }] Our favorite monkey-patching library activesupport [has something similar](http://api.rubyonrails.org/classes/Enumerable.html#method-i-group_by) to what you want to do. Intead of monkey patching you could always create a module named something like "Groupable" and define the method there and you can include only on classes that you want to have the grouping function so you can have more control over where it exists. module Groupable def group_by #group by code end def group_as #group as code end end class GroupableObject include Enumerable include Groupable end
So let's take a loot at what you're doing here. You're modifying hash and then trying to return it, which is already confusing (since if you're modifying it, why do you need to return it?). Since you HAVE to return it, why are you modifying it ([cue functional programming](http://www.oreillynet.com/ruby/blog/2006/07/nubygems_inject_is_functional.html))? So that all is to say that you should be using hash.merge(). However, that's kinda messy and I hate using it, so you should just do what [beaucollins](http://www.reddit.com/r/ruby/comments/epz42/whats_a_good_name_for_this_idiom/c1a01ps) says and do: Hash[enum.collect { |elem| [to_key[elem], to_value[elem] }]
which only gives me a single value for each key, not an array of values.
On IRC we call the inject version "lolinject". Not to be confused with lolreturning, loltap, and others. It is less readable, slower, and gains you nothing. It is more complex in every way. Lame. I use `Hash[]` myself. Or `each`... `each` is pretty awesome.
See - the 'you're an idiot' comments below are one of the reasons why not very many people share code snippets. No one wants to put their code out there and risk being humiliated. Better would be to say -- 'Hey - that's cool. Here's something similar I do that you might want to look at'. 
Gosu has a very nice minimal interface, it makes writing games pretty fun.
This is why more people should commit to open source repositories. Public humiliation is a great way to break bad habits and kill off bad ideas.
is it the same as this proposal on ruby-core ? http://www.ruby-forum.com/topic/642740#new
what are lolreturning and loltap?
It adds some handy assertions: * assert_true * assert_false * assert_boolean * assert_alias_method Nothing earth shattering, but handy. It also adds the ability to skip, pend and notify with: * omit * omit_if * omit_unless * pend * notify It also allows multiple setup and teardown methods, which are individually controllable via :before and :after arguments. I've never used that feature, but it's there. If memory serves, rspec has a similar feature, but the syntax in rspec is nicer. It has better diff output than test-unit 1, a priority mode that lets you skip (or not) previously passing tests on subsequent runs, and colorized output. I'm sure there's some overlap between test-unit 2 and minitest, but I couldn't say how much. 
Tests with simple sinatra application running on webrick: http://funny-falcon-en.blogspot.com/2010/12/rubinius-120.html (actual code and results https://gist.github.com/gists/752120 )
So, enlighten me, given to_key = lambda { |s| s[0] } to_value = lambda { |s| s[1..-1] } enum = %w{ one two three four five six seven eight nine ten } goal = {"n"=&gt;["ine"], "o"=&gt;["ne"], "e"=&gt;["ight"], "f"=&gt;["our", "ive"], "s"=&gt;["ix", "even"], "t"=&gt;["wo", "hree", "en"]} How would you transform `enum` into `goal` using `Hash::[]`? I'm not on a machine w/ ruby19 installed right now, but, AFAICT, using `Hash[enum.map{|elem| [to_key[elem],to_value[elem]]}]` will produce {"n"=&gt;"ine", "o"=&gt;"ne", "e"=&gt;"ight", "f"=&gt;"ive", "s"=&gt;"even", "t"=&gt;"en"} Which isn't the same thing at all. The `inject` code isn't overly efficient, but the benfit of it, or something like `enum.group_as { |elem| [ to_key[elem], to_value[elem] ] }` to me is that it's chainable, so I can do stuff like: records. # associate each item with its buyers group_as { |r| [ r.item, r.buyer ] }. # bin the items according to how many buyers they had group_as { |item, buyers| [ buyers.length, item] } 
Pretty much, and that's a great discussion, thanks! On reading, `Enumerable#each_with_object` looks good.
why, a poignant post!
Agreed! Say what you will about this guys mysterious disappearance, _why brought a beautiful spark of personality to the programming world. We need more folks like him.
*sniff* chunky bacon 
I remember when hid disappeared, us old hoodwinkers were crushed.. what a loss to the ruby community :(
I like to think he is still around, just silently observing. :(
The fact that someone like _why was involved, as well as the way he wrote about the ruby language are what pushed it to the top of my list.
You really don't want to know.
Here is the code from the test I wrote from your snippet above: actual = Hash.new { |h,k| h[k] = [] } enum.each do |s| actual[s[0,1]] &lt;&lt; s[1..-1] end "Do the simplest thing that could possibly work." As I said before, I'd use Hash[] or each. Each is awesome. So awesome in fact that it runs in 60% the time yours takes: null_time 0.010000 0.000000 0.010000 ( 0.010245) simple each 4.480000 0.240000 4.720000 ( 4.731057) proc each 6.770000 0.190000 6.960000 ( 6.978922) proc lolinject 8.320000 0.200000 8.520000 ( 8.520814) simple lolinject 6.420000 0.210000 6.630000 ( 6.647656) You're past "isn't overly efficient" at that stage imo. And chainability isn't a good enough excuse as it leads to unmaintanable law of demeter violations. I benchmarked both my each and your inject with procs and non-procs to show the costs of each dimension. So basically it goes from: simple proc each 4.7 7.0 lolinject 6.6 8.5 
Wait! Look over there....
Repeat after me: "I am not my code" "I am not my code" "I am not my code" "I am not my code" "I am not my code" "I am not my code" "I am not my code" Thin skinned butthurt ego attachment to one's code is a sin. Plain and simple. I don't see any comment below that even remotely insinuates "You're an idiot"... but your ilk will see it _everywhere_. If you can't see feedback as a means of educating yourself, you're in the wrong line of work. I suggest you go take an art class. It'll help with learning what critique really is and how to deal with it. I'm sorry... maybe I should have said: Hey bro -- that's a really cool outlook in life. But what I do is get the fuck over myself and realize that when someone points out something better I can learn from it. You might want to try it out. Better?
I totally agree, except it really doesn't have to be public humiliation at all... Simply putting stuff out there and having eyeballs on it at all will help. Feedback and critique come in many forms and when reflected on give us an opportunity to hone our craft.
I'm not sure I'd ever use assert_boolean. assert_true and assert_false are only slightly shorter than assert_equal t_or_f, x... but for all three of these I'm not sure why you'd bother and not use assert t_or_f (or refute in minitest). I'll have to look at assert_alias_method. Thanks. omit_if/unless look really interesting. I have skip in minitest. What's the difference between skip and omit? for that matter what are pend and notify? minitest adds some more useful assertions: * assert_output * assert_silent * assert_includes * assert_in_epsilon (and refute versions of most of those... where they make sense) Other methods: * captureio * mu_pp -- the ability to override how failed output gets printed in case you need pp or to_yaml output to make things clearer. Test randomization is the only thing I've really added over on the runner side of things. All the crazy stuff that rspec adds seems like a non-feature or dealing with symptoms (rspec is slow, so let's let you run just the failures instead of making it fast). I always pass my test output through autotest's (aging) unit_diff. I should look at how testunit2 does it. Great info. Thanks!
I hope that made you feel better.
I really do.
It's not that if you have a social life that you wont make a good programmer, it's that they might try to claim ownership on your personal projects.
Even if you don't prefer ruby, or you don't program, this character _why? is very interesting and worth checking out. 
Why can't you show off your small projects? One aspect of this is that they may want to look at examples of code you have been written. Turn some of them into gems/plugins or at least github repos that you can share with the world and show to a potential employer. Particularly if you graduate without a job, spend a few weeks focused on this and you will probably greatly improve your chances with those employers.
Companies cannot claim ownership of prior work. They can claim ownership of code you wrote using their resources, or if you signed an overly aggressive Non-Competition Agreement.
Many of these companies are looking at the quality and competence of your work, not the quantity. If you can go from interesting problem to interesting solution, then maintain the project, it shows that you can "Ship It".
As someone who used to sit in on a lot of developer interviews for a startup (I was in on probably fifty interviews in the year I was there), I would say that seeing a persons side-projects was the best way to determine their skill. Not only that, but we almost always found that the people with good side projects had a much higher skill level than people who simply did not do side projects (usually because they viewed programming as a job and not something they love to do). Personally I've found that while I learned a lot on the job, it was my side projects where I was really able to learn and become advanced in different areas. I'm not saying thats the only way, but from the interviews I saw, it seemed to be the main way people became experts.
I'd love feedback on the documentation and the idea. Does the readme make sense? Does the idea make sense? Is the value of the gem apparent? It's extracted from a live site where it made things a lot easier for me. Thanks
Tests with simple sinatra application running on webrick: http://funny-falcon-en.blogspot.com/2010/12/rubinius-120.html (actual code and results https://gist.github.com/gists/752120 ) 
I got to see him perform at a Railsconf. I had no idea how rare that ended up being. He was awesome.
or you could just do it with jruby http://www.devdaily.com/blog/post/ruby/jruby-code-that-takes-screenshot-of-your-desktop-saves-it-as-fi
I've always been interested in scripting and hobby web design, spending a lot of hours of my life on Stackoverflow and random communities, but I recently realized that I had nothing to really show for it. I noticed that other students looked better on paper even though I had much more experience that was harder to prove. So I started my own simple website as a portfolio. I've always had a bunch of ideas for even small web apps, so I've been going through them all and actually making them into accessible projects online that I can link to on my resume. I'm also a senior in college and I recommend this sort of "portfolio" approach. I feel good going into recruiting this spring with a personal website that links to applications that people are actually using and I'm currently looking into contributing to plugins/repos that I'm interested in.
Paranoid much? Coming from someone who has interviewed lots of developers in the past, let me give you another 2p-worth opinion. Another reason interviewers like to see outside projects is that a)generally university projects are a bit out of date and b)coding during education is often different to real world coding. A good example of b is comments - during education the lecturers like you to over comment to ensure you're understanding what you're doing, during work most senior developers prefer to reduce the comments to just explaining the "why" you're doing something a certain way and to prefer to clarify code over adding useless comments. I'm sure you can get a job without needing to put in 40 hours per week outside of school in coding on projects, but in a competitive market place every little helps - so if you can try to get involved in a project or start one, it may just help you get that better job.
I'd love feedback on the documentation and the idea. Does the readme make sense? Does the idea make sense? Does "dynamic, cascading configuration" make sense? Is the value of the gem apparent? It's extracted from a live site where it made things a lot easier for me. Thanks
I often thought of his disappearance and came up with some theories that I haven't seen proposed so here is the one I think is most reasonable (please note that this is my own view and has no basis in any real event or otherwise) He totally mastered what he was seeking in Ruby and grew complacent and bored. But being the ever inquisitive sort, he wanted to venture forth and master another language/persona/dimension etc.. Unfortunately with so much invested within the Ruby community, anything but a clean break would wear on his conscience/patience. There were other languages that caught his fancy, namely IO and Potion (his own creation) and although Potion is dead, IO is still alive and has an active mailing list. 
Link is dead.
I just don't get people's fascination with _why. I never found him particularly funny and I certainly don't miss him. Maybe abandoning all his projects and code without any notice left a sour taste in my mouth, and having everyone else defend his erratic behaviour was even more annoying. He *was* talented, and he did good work for the Ruby community, but the extent to which he is revered borders on the ridiculous.
I found his APIs good but his implementations lacking. I tried to fix a bug in Hpricot but couldn't find my way around at all after writing the test. He never responded to my bug reports either.
I don't doubt that he's doing more than silently observing. The man really valued his anonymity. I'd be willing to bet that he's still working in secret.
Possibly, It was never really confirmed one way or another but why would _why leave just because some jerk found out who he is? (Although his identity was always known by some). I think he was beyond that and all about the code.. IMO, like a writer/artist/dancer, a coder craftsman usually cares little beyond their art.
Cool project! Feedback: a more fleshed-out example might be nice. For instance if the current example code included example *keywords* and *filter_terms* methods, and then full example output. 
I've been looking forward to something like this ever since dcov went abandonware.
No of course not. Having said that welcome to capitalism. 
I knew this would happen - I was on the Shoes mailing list and people were sending _why nasty messages when there was a problem - real 'fuck you asshole' messages. \_why is a delicate person - he lives in this altered state where the really good software is. It's kind of like being on a drug trip - I've visited this place but people like _why live there. All you have to do to get great productivity out of people like _why is NOT KICK THEIR ASS. But we just couldn't do that.
I agree. Let's have a really complicated example. I have done similar things with wrappers around YAML and the use cases are pretty varied.
It's tempting to be bitter at him over his sudden departure when he was so into the community, but part of the trouble with his outing was his job, I think.
He was much more powerful as a tool to get people into the ruby language. He left just as I was getting people into ruby using his poignant guides. 
I've been waiting for this moment. I am excited as well as worried that my old apps(rails2) might crash.
Why would you run your rails apps on dreamhost
I don't know about the OP. However, I like DreamHost because it is cheap and has a lot of features. You can have unlimited accounts and traffic. For small applications, DH works great. I have about 20 rails2 applications on DreamHost.
I would not run it on Dreamhost if you plan to have anything even close to real traffic.
If you have anything even close to real traffic, odds are your site is making enough money that you can afford not to put it on DreamHost. If you're just prototyping and want something that's cheap and easy, you can't go wrong with shared hosting though.
On the other hand, it's a super-cheap "spot on the web" for your 5 user custom app you hacked together.
Shared hosting is always wrong. VPSes are like $10/month.
I probably wouldn't but I have clients who are artists/printmakers and want portfolio websites and they don't want to pay a big monthly fee. The other reason is DH uses Passenger which makes deploying Rails apps super simple. Shared hosting *is* a major drag in many ways, the inability to customize, but DH requires fairly little maintenance once you do deploy. 
Which ones? Dreamhost is nearly $10/month, so I would definitely be interested in a recommendation for a good, cheap VPS. 
I've been wondering lately if cheap shared host for static files (or flickr account..) w/ framework on heroku isn't a good way to go.. For sites like portfolios
Can I ask which VPS can be had for $10/month? I pay about $30/month for my Slicehost account, and I'm pretty sure it is the lowest caliber package available. Edit: Is Slicehost just really expensive?
[Rackspace](http://www.rackspacecloud.com/cloud_hosting_products/servers/pricing/) will give you a vps for $10.95/mo. There's also [prgmr](http://prgmr.com/xen/), which is going after a certain segment. I've been a customer of theirs in the past. Oh, and Heroku will serve up all of the `rack` apps you want 100% for free, on the low end.
Giving you an orangered and a pointer over [here](http://www.reddit.com/r/ruby/comments/eqmlk/finally_rails_3_on_dreamhost_tips_n_fail/c1a6arj) And Slicehost has a $20/month plan.
Just use jekyll or toto on Heroku for static stuff. Super easy, it'll be awesome with their varnish.
That's what Heroku is for.
Heroku free apps are far easier than even passenger to deploy, and are plenty for portfolio sites.
Hm, maybe they did not have those smaller plans when I signed up, because I seem to remember reluctantly selecting the smallest package. I swear 512 used to be the least you could get. It seems that all the prices are different now, as I have the 512MB, 20GB, 300GB one for what amounts to about $30/month, and here it is listed as $38/month. Anyways, thanks for the orangered :)
Dreamhost also has kickass support. 
Rackspace's vps is *not* $10.95/month. The bandwidth is calculated separately. 
Oops, you got me! If you use 15GB of outgoing bandwidth, you'll be paying a bank-breaking $13.65/month instead. The point is that the prices of all of these things are so low, the difference is totally irrelevant.
Yeah, they change things around. I remember Linode recently gave like a 40% RAM bump to all of their customers... I also have a 512MB VPS from Rackspace, and it's $22/month, but I also pay a few cents for bandwidth. They all seem pretty competitive.
The problem is if you get 'reddited', you could be in for a surprising bill.
That's true. That said, if you got reddited on dreamhost, your site just would explode. I'd rather pay $20 in bandwidth charges and get the users. That's just me. Everything in life is a tradeoff.
Programming is a lot like art or music. People who really are into it are REALLY in to it. Unlike most other jobs, we have fun. We like to program even if no one pays us to do it. Programmers, like artists and musicians, are often egotistical. We want to create something that other people like. So we spend free time working on projects that the community (not just our employers) want to use. Having said this, yes, of course you can be a good developer without working on major projects in your free time. The trouble is that you'll be competing against programmers who do.
fuck that's awesome! 
If you like that stuff, I wrote a gem a while back called hash\_set\_operators. require 'hash_set_operators' {:a =&gt; 1, :b =&gt; 2} &amp; {:b =&gt; 3} # =&gt; {:b =&gt; 2} {:a =&gt; 1, :b =&gt; 2} - {:b =&gt; 3} # =&gt; {:a =&gt; 1} {:a =&gt; 1, :b =&gt; 2} + {:b =&gt; 3, :c =&gt; 4} # =&gt; {:a =&gt; 1, :b =&gt; 3, :c =&gt; 4} {:a =&gt; 1, :b =&gt; 2} | {:b =&gt; 3, :c =&gt; 4} # =&gt; {:a =&gt; 1, :b =&gt; 2, :c =&gt; 4}
How does your gem deal with hashes inside of hashes? Does it apply the same set operators on embedded hashes and arrays? If not then maybe it should at least as an option.
Good point. Heroku is pretty awesome, and I have experimented with it, but for some reason I never thought of hosting one of my clients websites there. 
Just in case anyone else uses both Ruby and Python and likes this trick: Python can use this same pattern with the [collections module](http://docs.python.org/library/collections.html). For example (from the library reference): s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] d = defaultdict(list) for k, v in s: d[k].append(v)
blatyo, you ask where are the rails 3 engines?? answer --- IN YOUR ASS, BITCH. merry xmas
The methods only operate on keys in the top layer. In this respect they're are a lot like Hash#merge. {:a =&gt; {:b =&gt; 1}} + {:a =&gt; {:c =&gt; 2}} # =&gt; {:a =&gt; {:c =&gt; 2}} Here's the source to the whole thing, it's only a couple lines of code: http://pastie.org/1404093
Uh, what?
Haha! It looks more like a giant upvote arrow.
Someone forgot a trailing `"`. Still, neat :)
A new version is available here : https://github.com/camilleroux/140-char-Christmas-Tree/blob/master/christmas_tree.rb Fork it and do a nicer one ! :)
I was expecting to learn something new to Ruby Arrays. Instead, this was just a summary of what can be done with an array, a decent summary, but not even close to a revision.
For those lazy, like myself: puts "\e[32m";((1..6).to_a+(3..9).to_a+(6..12).to_a+[2]*4).each{|i|puts ("#"*i*4).center(80)};puts "\e[31m\n\n"+"Merry Christmas".center(80)
rvm install 1.9.2-p136
[W0_0T RVM!](http://img.skitch.com/20090904-fyqnyu8pcr36ahe91er9x28bhi.png)
It's..so..cute..
That changelog desperately needs cliffnotes :)
or if you already have 1.9.2: rvm upgrade 1.9.2-p136 1.9.2-p0
Awesome work Steve!
Wish I'd seen this 5 minutes ago...
-1 Lame
i guess that's how they go from p0 to p136...or did i miss something?
I agree with all of your points but would make a minor correction from what I remember: he didn't just abandon his code, he deleted everything he could get his hands on by deleting all of his accounts, including master repositories and web sites, and then disappeared, leaving those left behind to cobble together the ruins. I just cannot understand how someone that showed that level of disrespect to the open source and Ruby communities can still be revered.
there doesn't seem to be anything here
What do you mean?
Heroku requires pretty much ZERO system administration. You pick the environment and additional services, but as far as installing and configuring software, you don't have to do squat. And sometimes you'd rather be writing software instead of setting up a server and configuring all the little pieces you need. That's what they charge their premium price for.
&gt; And sometimes you'd rather be writing software instead of setting up a server yeah, like for the first 3 days you spend setting up a server ... heroku spares 3 days of development and charges their obscene premium for the lifetime of the application. fuck heroku. and engineyard. on the other hand, it's useful if you have to convince a know nothing suit to use rails. "uh, there's enterprise support, or something. they will help you blow your budget." f-ing managers. hire better employees.
**yes, it is a fucking rip off** heroku and engineyard are niche leaches. expect more to follow. resist all of them. edit: EY's "cloud" and heroku are really just value adds built on top of EC2. all you need is like 1 engineer who knows how to build systems and write puppet or chef configs and you're good.
Free heroku, at least, is really usable, for reasons like the git integration. 
&gt; yeah, like for the first 3 days you spend setting up a server ... When the traffic spikes and your servers are dying, what do you do? With Heroku or Engine Yard, you spin up a new instance and you're good to go. Assuming instead you've got a colo set up somewhere, you and your IT guy will be shitting bricks and you're facing hours of downtime. Your customers (and possibly investors) will be pissed. Just because I can set up a full stack does not mean it's the best use of my time to maintain it 24/7, especially when you've got a day job. Like beaucollins already said, I'd rather be writing code than playing around with nginx/varnish/etc configs. Disclosure: I am currently hosting a personal side project on Heroku, using the free package with one paid add-on service.
Not enough pluses for this guy
You have to look at the total cost. A respectable sysadmin+rails type who can set up and maintain your server will certainly cost more than the difference between heroku and a more bare-bones provider for a while. Even if you already have someone good on staff, you're better off using their time in developing your product, instead of babysitting servers. Your product is what sets you apart. Use heroku, focus on development. When heroku's costs are worse than the cost of transitioning, invest in a move; its not that hard to move to more traditional hosting.
One engineer? Really? Good luck.
2 dynos + 2 workers + 20 GB shared DB != One Server (IE One EC2 server). Those 2 dynos are actually on multiple servers, and it has intelligent routing. One Dyno down? No problem move on to the next one. Not only that, but those Dynos are behind an intelligent cache, which gives you static caching at not charge. Heroku is expensive, yes, however they do things differently than just running a single server. *edit* Heroku responded to the expense of Heroku at one time, and I just managed to find the quote: This is always tricky, since every app is different. Here’s the short version – 10,000 per month should easily be handled by the free dyno. 50,000 is $36/month. 100,000 is up to $100/month, depending on your app performance. For reference, we have sites serving &gt;200,000,000 (yes million) visitors per month, and they spend in the range of $1500. Now, if you can find a host that you can manage 200M visitors per month for under 1500 a month, let me know. BTW: I do not work for Heroku, but I feel they get an unfair bashing when folks don't understand how Heroku works.
There are other rails hosting services that also require zero administration on your part and they also cost a lot less. 
The only problem with the free version is that it contains a 5mb database which is pretty much useless for anything. How could you build a $36 per month config? The $20gb db alone is $15 per month.
Is the 5mb db enough?
But ease of deployment aside, why do you think heroku, compared to media temple grid service for example, decreases the TCO in the long run?
&gt; How could you build a $36 per month config? I think they meant they need $36/months for two dynos, without accounting to DB. &gt; The $20gb db alone is $15 per month. Which is fine for any profitable business to pay, don't you think?
Agreed
Yeah, free. You shouldn't be expecting to build a huge business on free. But as to the rest of it, they are slightly more expensive perhaps, but if you're charging any kind of money for a service you should easily be able to cover their fees. And yes, I suppose it is a bit of a convenience premium. But where I feel the real value in Heroku lies is it makes it possible for one guy who maybe has a great idea and builds it in his spare time can afford to launch a business on a solid platform that makes it easy (as in drag a slider easy) to scale as his business grows. It levels the playing field as far as server admin goes. He doesn't have to hire anyone, he can just pay a little more to scale.
Thanks. :)
Can you provide links?
We're doing self managed ec2 right now. For the most part things are fine but has sucked up a couple additional days of maintenance. Perhaps it's due to incompetence on our part but we don't have room in our budget for an employee who does sys admin. I use heroku on toy projects right now so I haven't had to face the reality of heroku pricing yet. It has been a pleasure to use in those cases.
Seriously, I wasted a couple days last week because of high load and the inability to spin up extra resources because the specific site was on some rented machine somewhere. And I want to write software. I DON'T want to get calls on the weekend telling me to fix the server that went down due to high load.
This is not a question that can be answered for you, as it depends so heavily on the application. If you know the peak load you want to be able to handle, and the average response time of your app, it's easy to figure out your heroku cost (peak req/s * sec/req = # of dynos). It is less easy to figure out what the comparable cost/performance of the competition is, you basically need to build it and then bench it. Then, what do you do when a traffic spike arrives that exceeds your performance? You can either dial up your heroic dyne count (or pay heroscale or someone to watch it for you), or you might be building another box somewhere. Hopefully with chef or something not manually-from-scratch. What is that time saved worth to you? obviously, background workers and other services (add-ons) complicate matters further. If you feel that the redis add-on for heroku is too expensive, it's easy enough to stick it on your own ec2 slice, but again that's the tradeoff of you being the one to fix it when it breaks at 3am. Personally, as long as the app is cash-flow-positive, I'm happy to pay a premium to heroku and some add-on providers if that allows me more time to spend on improving the business, rather than playing sysadmin.
How much do you expect this one kick ass engineer to cost annually?
It's not just deployment. It's setting up and maintaining the whole stack. What do you do when your site gets featured on TC or gets front-paged on Reddit or HN or Digg? If you're running on a VPS, you might be able to just spin up a bigger instance. Migrations on Linode take a few minutes. That's not too bad, but what if you're already on the largest instance, or moving up an instance isn't enough? Now you're in serious shit, and you better have someone on staff that knows how to solve that problem. With Heroku, you avoid all of that. You can just flip on a few more dynos to handle the traffic and kill them when the traffic goes back down. Once you get to a certain size, it also becomes worthwhile to have a sysadmin on staff. With Heroku, that's mostly unnecessary.
Heroku is far more expensive than other Rails hosts. It's also far easier to deploy on and to scale up as needed, which can be worth a lot of money if you want to spend your time not doing sysadmin work. Linode starts at $20/month, and Amazon EC2 micro instances run you ~$15/month; both are viable options for Rails deployments, but you'll have to add additional instances, set up failover and load balancing, manage background jobs, and do all your deployment and systems administration yourself. If you're comfortable with it, great, you can save a lot of money (I do it this way, too). If you just want to launch your app ASAP, Heroku is great. About a week and a half ago, I launched [a delicious clone](http://1r7.net). I wrote it in ~10 hours and wanted to get it online ASAP (time from first piece of code to online and available was &lt;24 hours; I slept between code and deployment). I initially launched it on Heroku's free plan, got a surge of traffic, dialed the dynos up to handle the traffic, and then when I ran out of DB capacity I spun up a couple of my own EC2 instances and moved it over there. In that case, it wasn't an end-to-end solution, but it got me online while I worked out a more permanent solution.
The add-on I'm paying for is mongohq small (2gb).
I just sustained 16k hits yesterday, and 4k more today, on just a free app. Just saying.
One engineer who will do the same thing for the same price? I wish I lived in the same world as you do.
engineyard and rightscale have similar offerings but honestly, heroku is cheaper and better for certain types of applications. Unlike heroku which is a platform as a service however, engineyard and rightscale offer fully managed personal VMs (and cloning of server configurations with a button click) and as such cost much more to scale out. Of course that comes with the advantage of being able to install whatever you want such as custom c modules and nonruby libraries.
What type of app? Was it making very many db calls, or mostly static?
Can you show us that you have any right in saying this? What apps have you built? What cloud apps have you deployed? Who the hell are you?
Have you ever worked with MediaTemple? It's a nightmare to get anything set up properly. Heroku just works. Plus, at 2 dynos and 2 workers 24/7 you're pushing a *ton* of traffic. We're talking 70 hits a minute and 70 jobs per minute or better. You should be so lucky to have such problems.
It's the new [Hackety Hack](http://hackety-hack.com) site. Frontpage is static, but if you're logged in or click a link it's your standard dynamic stuff. I'm also using Sinatra, not Rails. The signup page sends an email in the request cycle rather than using a background worker, but other than that, it's pretty basic CRUD style stuff.
Heroku has a pretty unique approach to server administration and scalability. But they've distilled handling sudden increases/decreases in load by moving a single value, how many "dynos" your rails app needs to run on. It's pretty incredible, TBH. But that's why it's more expensive. Something else to note, since Salesforce bought them, who knows if their pricing structure is going to change? It **might** get cheaper. Time will tell.
http://www.google.com/search?client=ubuntu&amp;channel=fs&amp;q=rails+hosting&amp;ie=utf-8&amp;oe=utf-8
http://www.google.com/search?client=ubuntu&amp;channel=fs&amp;q=rails+hosting&amp;ie=utf-8&amp;oe=utf-8
That's the error message on Rails apps' default 500 error page.
Well, the grid service for Media Temple with 100gb storage and all is only $20 per month.
Media Temple gs, apparently, can also handle intense bursts as well. 
Number 1 link is Engine Yard, which costs a heck of a lot more than Heroku.
and FYI MT's Rails hosting is absolute balls. I've had to use them for two client projects and every single time I want to shoot myself in the food and yell at the architects who work at MT. 
media temple's forward proxies basically break rails page caching last time I checked. I'm sure they've fixed it now, but that's just one of handfuls of problems I had with MT when I used them last
&gt; Linode starts at $20/month, and Amazon EC2 micro instances run you ~$15/month; both are viable options for Rails deployments, but you'll have to add additional instances, set up failover and load balancing, manage background jobs, and do all your deployment and systems administration yourself. If you're comfortable with it, great, you can save a lot of money (I do it this way, too). If you just want to launch your app ASAP, Heroku is great. Yeah exactly. And load balancing, failover, etc will all be additional instances too. With Heroku the infrastructure is already there and you don't have to pay for it until you use it. 
404 actually.
Whoops, that's right.
Also "good engineer"'s time is going to be worth $50+/hour. Unless he spends less than 2 hours per month on deployment and systems administration, that is not a cost effective argument.
that's pretty much how i roll. don't pay the EY/heroku hourly premiums... use chef for new systems, burn a few days here and there. it's cheaper in the long run.
sorry, no.
&gt; less than 2 hours depends on your deploy, doesn't it? 2 hours a month if you're running 150 servers is a lot less than what EY or heroku will charge you hourly for the life of the application in exchange for their help setting them up. 100 servers? 50? 25? i don't know where you break even. i'd guess it's closer to 25 than 150. obviously there will be an initial time sink for someone to come up to speed on chef or puppet or whatever other sysconfig management and that costs money... but if your app is online for any substantial amount of time, it costs less to keep it in house. hire developers who can run your systems. shit, people like that basically created heroku, ey, etc.
IDGI, up until he mentions keywords, he's describing what autotest already does. quite well at that. And the keyword thing is an interesting idea, and would take about 5-10 lines to do in autotest and could be shipped as a plugin with no effort.
That's not the only choice.
I was pretty sure Sinatra could be lighter weight, but I think a lot of it depends on the application code you write. Thanks for posting those stats. How about the database size you're using? Is it still the 5mb free one, or did you do an add on? Side note... the diagonal stripes cause an optical illusion that the content on the page is tilted to the right. For me at least. It was freaking me out so much that I had to measure it to maks sure ;) Very cool site!
Sinatra is waaay lighter weight. I'm using the MongoHQ free db right now, and I'm only using 600ish kb of database space. Oh wow, that's crazy, I never even though of that... I wonder how common that is? If you want to check it out, all the code is [here](https://github.com/hacketyhack/hackety-hack.com).
Awesome! I've been learning Sinatra lately (trying to) and it helps to have a production app to take a peek at. Thanks!
This is my first gem, as well as my first project using RSpec and YARD, so I'd love any feedback anyone can provide about my specs, documentation, or approach in general. Feel free to be ruthless if it sucks cause I want to get better. :)
Cool. Feel free to ping me with any questions, I'm actually friends with one of the guys on team sinatra, and I might get a chapter in the next version of the Sinatra book...
Awesome! I remember "back in the day" when I actually got some code that I wrote into a decently-recognized framework (CodeIgniter, PHP MVC framework). I was on cloud nine for weeks! I'm choosing Sinatra to provide web front ends and API's to some applications I've been working on at IU. It's just really cool to see something real, in the wild, aside from you know the "make a blog in 3 seconds" tutorials.
The one thing I would add is that there should be a general method that you can pass a language to. Something like **"the cat jumped the fence".translate_to(:french)**. That would make it really easy to use this gem in an app to do full translations. EDIT: Forgot to mention it, but this is awesome!
There actually is such a method: http://rdoc.info/github/jimmycuadra/to_lang/master/ToLang/StringMethods:translate I suppose I will add it to the readme to make it more prominent. Thanks!
ahhh, cool. Looked through the source to try and find it but must have missed it
Yep, it's a good feeling. :) Luckily, GitHub has made it easier than ever to contribute, and the Ruby community is usually really good about accepting patches. Also, I should say this: this app was entirely re-written in the last few weeks, so some of the code is still a bit messy. I have yet to go through and actually DRY it up, so take it with a grain of salt. ;)
No problem. Hell... 99% of my code is in that state ;) Quick question, if you know offhand... when you produce a patch in Git... its that a standard format? If I have a Mercurial repo, and I use git-hg locally (so I can use git instead... I do this with svn repos at work) and I make a patch, can I send the patch to whomever is running the Mercurial repo, and they can use it? If you don't know right off hand, no worries.
Sorry to hear about your nightmarish experience. Is there anything in particular you found extremely troubling? Which service were you using? We're always looking to improve and welcome the feedback. 
I haven't done it myself, but `git-format-patch` should give you something that works with the `patch` command. I don't have any real `hg` experience, but I'd assume that it should all work out.
Basically the grid server system straddles the uncomfortable line between vps and shared hosting, in my experience. You guys have a really high bar to beat with heroku though - they were built ground-up just for solving the problems of ruby deployment. It's been a long time since I tried to use either seriously, though, to be fair. The sites I manage now are hosted on bare metal hardware at a colo.
Yep. Works great.
No they didn't, trailing " is after the hashtags which Ruby will see as comments.
This is completely and entirely superfluous to the point of being ridiculous. I love it. Nice work!
From the README " sanely manage it’s configuration " HEY FUCKO! it's spelt "ITS" --- no apostrophe!
A bit of old news but I felt it was important to note.
Ahh, good catch :)
* Delegator * Forwardable * Observer * Monitor * Weakref * Timeout * Shell * GServer * PStore * un.rb * sync.rb
So do you use these libraries, or are you curious about them? Shell is a fairly large one I have never really looked at...
Definitely document RbConfig, pls! there's hardly any docs on this bitch.
OpenSSL goes into same hole as RbConfig. Especially when it comes to RSA signing with SHA1 hash and so on. It's really hard to even find all the proper methods with known parameters without resorting to look into C code. Unfortunately.
I've once or twice used GServer, Delegate and Forwardable, but mostly I'm curious about the rest.
https://github.com/ruby/ruby/blob/trunk/ext/openssl/ossl.c#L409 Found that yesterday while doing some SSL programming. Explains EVERYTHING.
Neat, I've looked at Delegate and Forwardable, but never found a good use for them, partially because in ruby 1.9.x it's so easy to make a Proxy with a BasicObject... Perhaps I'm missing something though.
+ open rdoc?
Obligatory: "the documentation part." :-) Not StdLib per se, but I was just recently surprised to discover that Float, String and Integer are functions in Kernel, which makes ruby act like those classes have casting constructors. E.g. String(3.5) #=&gt; "3.5"; Integer(3.5) #=&gt; 3; Float(3) # =&gt; 3.0. I spent an hour trying to take an object and send "0" to its class (to construct a zero of the same type as the members of an array) before discovering that they were methods, not overrides on the classes. Anyway, my point is, it might be good for somebody to go over some of the darker corners of the "obvious" stuff in Core, like Kernel. For example, Array#assoc() #rassoc() make NO sense until you understand Ruby's lisp heritage.
thanks for the feedback! I'm going to try and write a longer example soon
It's really kind of odd that there is String.new and String(). Some of those methods on Array are pretty funky as well, that's why I covered abbrev earlier.
[open_gem](https://github.com/adamsanderson/open_gem) does that, but it doesn't really fit Qwandry. Though, something along those lines might be possible.
I was unaware anyone did rails development on windows. Is there a specific reason?
I use gedit(default Ubuntu text editor), with the gmate package installed(https://github.com/gmate/gmate - lots of textmate-like plugins, you may have to look up how to use some of the plugins). Never was a big fan of RAM-hogging IDEs(tried aptana w/ radrails), a good text editor and a few terminal windows works fine for rails. edit: didn't read the part where you wanted to stick with windows. honestly, rails development can be a bit of a hassle with windows...I tried it a couple years ago when I first started Rails development and kept running into all kinds of problems(especially with gems that included c-extensions)
Earlier this year I did some Rails mentoring for a client who was using windows, what a pain the in the butt. The Rails and Ruby community doesn't as a whole provide any where near the level of support for windows than what they/we do for Linux and OSX. The client and I spent more time trying to get plugins, my code etc... working on their desktops that actually covering Rails. It was very frustrating and cost them way more than it should have. If your production servers are windows based then I'd understand the decision to develop under windows. But your life will be a whole bunch easier if you moved away to something more main stream. If your servers are not Windows based then you need to change something so that you are developing on the same OS that your website runs on. On the IDE front I used RadRails on my XP laptop when starting with Rails but quickly bought a Mac and then soon after that switched to TextMate. My Windows client tried using NetBeans which I wouldn't recommend.
hopefully the people you hire are smart enough to tell you that you're out of your mind to work with rails on windows.
I agree with all the posters so far pointing out that Rails on Windows just seems like a bad idea... having said that, I use MacVim+Rails.vim, so I supposed I'll recommend [gVIm](http://www.vim.org/download.php#pc)+[Rails.vim](http://rails.vim.tpope.net/) without knowing much about how well it works in Windows.
I agree a lot of people don't like Rails + Windows, and I simply refuse to work anywhere where I have to work with Windows. However, Engine Yard is seriously looking at the Rails on Windows issue right now http://www.engineyard.com/blog/2010/honey-im-home/ As for the dev environment, have a look at RubyMine if you like IDEs, otherwise I'm very happy on Vim + Rails.vim
I've done it once with project that uses rails on windows. And I have to create installer for it (ruby + rails + mysql + the application). What a nightmare. For editor, I can recommend netbeans. It has syntax highlighting, autocomplete, templates, rake tasks on project window, and more. You can also use vim with rails pluging.
vim/macvim
The two possible answers are emacs and vi. Neither costs money. I am an emacs user, but vi is also acceptable, if you're good with it. You should not expect to hire good developers if you are developing on Windows - I know many people that I've worked with would flat-out refuse. At the very least they'll need a virtual machine with linux on it. And if you're doing that, you may as well just install linux on the machine to begin with. The people you are hiring should have opinions on these things. If you don't have strong opinions, just hire someone excellent and listen to them.
Try RubyMine. I work with a bunch of folks who used to develop windows applications or java web apps. They feel most comfortable working in something like Visual Studio or Eclipse. They tried Aptana (and several others) and weren't happy. Now they've all switched to RubyMine and have nothing but good things to say about it. 
I use rubymine. I have used netbeans, radrails, and eclipse. While it isn't perfect I prefer rubymine!
Shouldn't your devs be able to choose their own tools? It would be like forcing everyone to use a left-hand scissor. It works for right-handed people but not very efficent.
I used to dev on windows - netbeans was pretty nice. Not sure how the rails 3 support is. On ubuntu I've been using [redcar](http://redcareditor.com/)
I use Vim or Aptana (RadRails)
Redmine is probably the best of a bad trio of editors. Like others it's written in java so it suffers from being bloaty. You other choices are text editors and I am sure everybody here will mention either vim or emacs but honestly you will need to dedicate some hours every day to learning those. Not only do you have to learn how to use the editor but you also need to learn all the plug ins you need to do ruby development. They say it's worth it but honestly I don't think so. BTW ditch windows. Use linux. 
How is redcar coming along?
RubyMine is an absolute joy to work with. You won't look back. Also - as everyone has mentioned - do not use windows.
I'm used to windows and I've got good tools. Sure there are still some hiccups but nothing I can't fix. Can you please tell me why should I move to Mac/Linux?
When I do a tutorial session I always provide a preconfigured VirtualBox image of Ubuntu. Everybody keeps saying "We need better Windows support for Ruby", but apparently nobody is doing it. Only a handful of developers use Windows. I guess it's a supply-demand thing. Ruby lives in an open source world, and most inhabitants of open source world use Linux or OSX.
Are any specific reasons I should not be able to do that? I wish Ruby was portable in reality not only in words, I've never had problems with Python or PHP + Windows. But thankfully, some people try to change that. What kind of thinking is that: "buy a mac and textmate" to develop Rails app. You have to been kidding. so far the only problem with Rails on Windows is that... rake tasks and rails generators run much slower. And the biggest pain are the rspec tests. Even with spork running, they take far to much time. As for the anti IDE guys (with no good reason) http://www.youtube.com/watch?v=mslMLp5bQD0 and skip to 35:10 Both on Windows and Linux I am using Netbeans. I wouldn't recommend it to anyone who does not know how to use professional tools. This is a great (and free!) IDE, and after configuring keyboard short cuts, macros and templates I can stay most time on a keyboard, and thanks to the tools NB provides I am more productive than I ever had been using VIM.
&gt; (especially with gems that included c-extensions) There is no such problem now, thanks for http://rubyinstaller.org/ and their dev kit
&gt; gVIm+Rails.vim without knowing much about how well it works in Windows. Works wery well, I tried that.
I had no problems with Netbeas and Rails 3 so far. BTW. This redcar editor looks pretty neat, I should try it. Thanks for mentioning it.
Switched over to the Mac a few years ago so bear in mind my info is out of date: I was generally using aptana but I can agree with your comments. You might want to check out NetBeans - http://netbeans.org/ although the last time I used it I found this really slow on large ruby files. However I know at least one person that still uses this since switching to the Mac. Also if you want something a bit more lightweight &amp; similar to TextMate you might want to checkout e-texteditor http://e-texteditor.com/ I would've thought your best bet is to just try each IDE out for at least a day and see if it fits your style &amp; tastes. 
No. You can get a lot of responses to this, but there's only one person who can answer the question, and that's you. All you can do is load up a version of Linux, and try to do what you normally do in it. If you can spend time _living_ in Linux, then you can get a feel for what makes it great. Maybe you value those things; maybe you don't. There are positives and negatives to running Ruby on Linux versus Windows, and it would seem that many people here (including myself) who have done both prefer the former. At the end of the day, though, it's as personal a choice as... what Ruby IDE to use. The only thing that upsets me in talking about OS religion is when people who have no experience in a platform start slagging off on it. I was a NT zealot before I became a Linux zealot. I prefer Linux. Vastly. What drove me nuts were the people I used to have to work with who constantly told IT managers at my old company how Linux was crap, when the only thing they ever did with it was install it. If your whole day is filled with nothing but developing in Visual Studio or using Outlook, yeah, you're not going to feel very welcome on Linux. But if your day is filled with administrating servers, networks, and programming in open web environments like Rails, you're going to see the utility of working in Linux very quickly.
I'm a VIM guy. When I went to college in the late 80's, all we had were green screens and VI. So I'm pretty abused to it by now. The first thing I install after setting up a server are SSH and VIM. That all being said, I wish I could grok using VIM for Rails development. I've installed the vim-rails and NERDTree plugins, but I can't get used to it. Even after 20 years of using VI, I guess I'm still not good enough to do this. At the end of the day, I want a tree view on the left side, and tabs on the right. GEdit is almost enough for me. So I stick with NetBeans. I've tried RadRails, and it just seemed more complicated. I'd like to try RubyMine, but it's not free software. I don't have a big hangup on it, but my opinion is that NetBeans is good enough to choose over closed source. It's a little sluggish, true, but all of the Java-based IDE's are.
I like redcar a lot so far.
Do you run the development server on your local machine or on a linux box? If you are developing on a remote Linux server, and you are happy with the laggy workflow, then keep on keeping on. If you are developing under a Windows environment and you arent having problems with third party gems, then thats also great, stick with Windows. I tried developing my last rails app in Windows using a Virtualised Linux box as the actual environment, but even that was a huge pain in the ass. After a while, I was developing solely in the Virtualised Linux, and that was when I realised there was no point staying with Windows. I switched over to Linux after that, and have been really happy since then. (Especially since I got Photoshop CS2 running properly and well with Wine). The only thing I use Windows for at the moment is when I feel like playing a few rounds of StarCraft. The last time I tried to make the move to Linux (something I have tried every year for the past 15 years) was about a year and a half ago, and I have to say, Linux as a real alternative to Windows has really improved more in the last year than it had in the previous 7-8 years.
I didn't mean to imply buy a mac and use textmate, but that you'd probably have a better experience with a unix based system (linux or OS X) because there is virtually no community support for windows since nobody is using it. I've also heard of problems getting the environment up to date and running smoothly on windows. If there is no real reason why you're using windows it'll probably easier and more pleasant for you to use linux.
I use emacs too, would you mind giving some details about your emacs rails setup?
When I first read this, I immediately though that there are still going to be problems. When I saw that the sphinx site says its easier to install as a service in Windows than in Linux, I was shocked. I bought a copy of eTexteditor when I started rails development, and then spent the rest of my time using vim in a Linux virtual machine. If windows is now a viable alternative, I may get some of my moneys worth.
RubyMine. If you're looking for an IDE not just a text editor, RubyMine is by far the most advanced Ruby IDE out there. It actually pried me away from TextMate which is saying something. Also, drop Windows and get your team on Mac. If you're doing serious Ruby development that's where you want to be right now. Ruby has deep Unix roots. It may work on Windows but you *will* have problems. The community is starting to look seriously at fixing that but right now there is a lot of pain on Windows. Linux is an option too, but I'm guessing if you're coming from Windows, that would be a very painful switch.
I also use and like RubyMine. It can do some stuff no other IDE can do, specially related to refactoring.
It sounds like you are planning on not just mandating what OS developers use, but what tools they use to write code. This is a mistake in most circumstances -- developers should be free to work with the tools they are most comfortable with -- but especially when you are going against the flow so spectacularly. Ruby and Rails are \*nix centered. *Requiring* Windows to do Rails development is unwise on many different levels.
I keep mine on Github (it's a fork of Chris Wanstrath's): http://Github.com/bkerley/emacs/
You a rinari fan?
Ask your devs what editor or IDE they want, then buy it for them. It's as simple as that. And be prepared for them to say "No thanks, Vim/Emacs is good enough for me". Also, you're going to have to ditch the Windows-centricity if you actually want to assemble a half-decent Rails dev team. I would never stay on a team that mandates what tools (IDE, OS, or otherwise) I use on my dev machine, and neither would most of the top-flight Rails talent I know. By saying "we only use windows" you are basically reducing your potential developer pool to zero, since there are very, very few Rails developers who willingly use Windows as their personal work environment. Use Windows as your hosting environment if you have to, but never tell your developers what they have to develop on.
Fair enough. But that is not true, about no support, just looking at some projects, I could saw that some people just try to do something (often this costs them additional resources - because of Windows usually), and make their gems work on every popular platform (Spork, and Typhoeus are the ones that came to my mind). So saying about no support for Win, and that nobody is using it, that is not really fair - not for Win users, but for those Rubyist, that actually spent a real time and effort to provide even a small support. And I appreciate that, because probably not all of them like MS's OS, but still do it.
NetBeans has a great plugin named jVi, whose name tells enough.
Well when I hire them I'm shipping them out a dev machine. If they want to change what they use, that's fine. I'm just giving them a standard set of tools that we'll support. If they want to use something else, go for it.
You should describe your target server environment. If you are running on Windows servers, you may very well have a reason to set up your devs with Windows tools, even though it's not the happy path for Rails development. If you are targeting Linux servers (or maybe even if you're not), you might be better off letting devs pick their own local platforms and tools.
Yeah, that's what I've been using. I don't know why so many people have problems with it.
Once you've tried developing on Mac or Linux vs. Windows, it will pain you to go back. I was a Rails dev on Windows for years, now I won't touch it on Windows. As far as editors, I use Netbeans although it can be sluggish at times. I'd probably try RubyMine if I were going to pay for an IDE. 
I've used both textmate, netbeans, radrails (the horror), and rubymine. I would recommend rubymine because of its .rvmrc support, model dependency diagram, better syntax highlighting (haml), and faster code completion. The major feature is the .rvmrc support and once Netbeans finally implements I will take a look at it again. To the discussion of windows for rails development. My opinion is that rails is generally a command line based development environment, even when using an IDE. Because of this, having a native *nix command line is the most effective way to develop. I commonly use standard command line tools like grep and vim for quick edits, all of the standard rails commands, Capistrano, etc... They perform much faster on OS X and Linux that windows or windows with cygwin. Additionally Rails app will generally be deployed onto a linux server, and I prefer to keep a similar environment for dev and prod. On top of the shell argument, features like multiple desktops, mountable ssh folders, and top of the line planning tools like Omnigraffle and Omniplan remove windows from my list of tools entirely. If I was forced to use Windows or a specific IDE at a rails gig, I would find another gig instead. In the end it is a personal choice and I have listed my personal choice above.
I have been doing rails development on windows for years now. With rubyinstaller.org and their devkit, I don't understand how anyone with a moderate amount of experience with windows has trouble with it. I'd prefer linux actually, but we're trying to keep whatever we can standardized. I'm not going to be able to convince sales and marketing guys to use linux.
I actually love linux and would actually prefer using it. My home PC is windows only because Mozy doesn't make a linux client. Honestly, that's it. I do admin a fairly large windows network for a living though. Linux fails badly in a highly automated IT environment. There is no suitable alternative for AD/eDir or Zen/SCCM (that I know of at least). I have a ubuntu VM with seamless mode ready and willing. I even have ubuntu wubi'd as an alternative startup OS. I find myself not using them very often because there isn't anything for what I'm doing that I can't do on windows. With that said, I'd be a crazy man if my development and production servers weren't running linux. There's no question there.
That looks pretty sharp. Actually kind of reminds me of gedit. Big bonus of native ruby plugins. 
True, and more people attempting to use it will only help to improve support. I was just wondering why someone would choose to use windows if they weren't forced too or if there was something they needed to use windows for.
I personally hated using eclipse. Just getting the thing set up was so cumbersome. I'm pretty sure ruby mine is the way to go so far.
Just out of interest: Are your servers going to be running Windows too?
I'm actually a big linux head. All our dev/production servers will be running either debian or ubuntu. Since ruby 1.9 I've had a ubuntu VM on windows and a wubi dual boot set up, but have yet to find something I need those to do that I can't do in windows. I REALLY wish I could just apt-get install things, but when I'm in an office environment with SCCM, it will actually be easier than apt-get install to set those things up.
Hmm, that's kinda strange because I have my machine dual booting ubuntu and I have a ubuntu VM. Throughout this project I still have yet to find anything that I actually need for it that I can't do on my windows box. Servers however are a totally different story. I wouldn't dream of running anything but linux. Can you give me some examples of things regarding rails development that won't work on windows but will on linux or mac?
I'd just go and do all three decent IDE's: Komodo Edit, Netbeans, and Eclipse with all the plugins enabled. Seriously though, they're programmers. It's not really a big stretch for any of them to decide on what ide they want to use. 
&gt;As for the dev environment, have a look at RubyMine if you like IDEs Komodo Edit is a pretty nice Ruby editor, and I'm a pretty big fan of Eclipse's Ruby and Rails tools, and Netbeans is pretty slick too... Oracle is the antichrist though... They'll probably start trying to monetize Netbeans as well those douchebags. EDIT: Dear Oracle Lawyers: this is only my opinion and not a statement of libel. Please don't ass rape me. I have no money anyway. 
lol no I'm just looking to ship people off a dev machine the day I hire them. It has to have some kind of development tools on it. I'm just picking what.
I'm just looking to ship people off a dev machine the day I hire them. It has to have some kind of development tools on it. I'm just picking what. As long as they do the job, I don't really care what they are writing the code in.
You should really let your programmers set up their own machines. Programmers are most effective when they get to use the tools that they know - be it textmate, vim, Eclipse, Netbeans or whatever. When you force platforms down a programmer's throat it seriously costs your company money. Just hand them a clean install of something and have them set it up the way they like, if they want a linux desktop let them. I have worked in places before that don't allow me as a programmer to be a local admin. I have worked at places where I can't have root on a dev server. These are not very well thought out policies because at the end of they day a programmer waiting for a resource to do something costs your company a lot of money. Assuming your programmers are using version control, a downed dev server is just a day of downtime, which honestly isn't that big of a deal. 
Everybody is going to be remote when they start out, so I'm going to ship them a dev machine with a standard dev environment on it. If they want to change that, have at it. At that point though, they will need to assume responsibility to fix it if it breaks, otherwise our IT people will be responsible for fixing it. Yeah, I don't think I'd ever take away root on a dev server (admin rights on a local pc are even more laughable). Production servers, totally diff story though. 
&gt;If I was forced to use Windows or a specific IDE at a rails gig, I would find another gig instead. To be honest, I don't understand why employers ram IDE's and platforms down programmers throats. I work in a Java shop, and no one cares if I use Netbeans or Eclipse, as long as I mavenize my work and commit my work to svn. A programmer who is working is generating the most value for the company. Let them use whatever tools they want to get the job done with, as long as they get the job done within the standards the company has laid out. We're not talking about some doofus in accounts payable here who's useless because he installed 25 different toolbars in his browser and now complains that his computer is too slow. As an IT person, you can walk up to the programmer, hand them some install media, and leave. That doesn't cost the company much other than their downtime. And let's face it, I'm sitting here on reddit instead of doing real work today... =D
I'd not worry about the IDE at all. Not unless you've purchased one. Most rails programmers are going to pave the computer and put a Linux flavor on it anyway. You're better off sending them a box with Ubuntu on it with Windows in a VM. That's my prefered platform.
I'm just giving them a pre-set up machine. If they want to use a different IDE, or even just a vanilla text editor. I don't care as long as they're doing their job. I just want to have an environment set up that's good enough for the average dev to sit down and work without having to tinker (which I accept may be a pipe dream).
Well, there may be, in many cases, plenty of good reasons. But this particular topic was discussed (read: inflamed) many times over the past decades (!) already. Do we really need to begin another one here, right on the beginning of a new decade? :) So I wish you a happy new year 2011, so it be full of joy, abundance and successes :)
https://github.com/technomancy/emacs-starter-kit - that's what I use, generally, with a couple tweaks. Works good man.
Wait a second... you've stated that you're working for a "startup company". But then you say that you're trying to set up an "highly automated IT environment", use enterprisey version control tools, etc. Something here does not compute. Either you are not really in a startup, or someone is trying very, very hard to drive your startup into the ground before it's even funded. If you really are in a startup, you and management need to sit down and have a talk with your successful Rails startup veteran mentors (you have these, right?). They will tell you the same thing I'm telling you: you can't run a startup like a massive corporation and expect it to succeed. 
Not particularly. https://github.com/technomancy/emacs-starter-kit
Minor bit of advice: having your dev environment such a platform away from production could bite, hard. It would be a good idea for your continuous integration server to mimic production then, for sure.
&gt; Can you give me some examples of things regarding rails development that won't work on windows but will on linux or mac? Almost every gem with a C component. Edit: well, I guess if you're using MinGW and it works for you, more power to you.
On top of this, Rails isn't the only part of the equation, and I feel this is often lost. Working with Rails tends to imply a pretty big ecosystem of backend possibilities. So once you've got your ruby/rails up and running, you might have to install redis, riak, whatever, which probably won't turn out easy either. EDIT: best solution to this wall, should it ever get hit in tandem with a windows requirement, is to run VM for the backends. You could rollout images to the system of choice so the devs don't have to monkey with that stuff.
If you want an IDE on windows, then, Rubymine.
Haha thanks, same to you too.
Nice! What's the escape sequence, btw? edit: I bet it clears the screen, duh.
Nice work, i read the code but did not find any caching mechanism. Is this true?
RefineryCMS is build up with engines and you can add functionality by creating new engines
Niiiiiiiiiiiice.
Exactly. I've even tried running copies of our prod servers with those types of services running as VM's on my mac to dev against. After a while it just got annoying, I gave up and installed everything directly on my mac. This xmas break I've finally spent the time to dual-booted my MBP and now have everything but the mic going with Ubuntu 10.10. This is in an effort to be as close to our server setup as possible. That being said along with our production servers we have a staging setup, obviously, and each of us has our own dev instance we can deploy to which is proving invaluable. It's not exactly the same as prod, but close enough to be helpful - I totally recommend it.
good to know(though I'm hooked on linux now)
&gt; On Ruby 1.9.x: &gt; &gt; tl;dr: Just don’t… for now. &gt; &gt; Ruby 1.9 ships with rubygems and contains a very buggy “gem-prelude”. It is a gem loading system that can interfere with updating rubygems itself. We do NOT recommend you update to rubygems 1.4 if you’re running ruby 1.9.x until we get that sorted out in a future ruby release. &gt; &gt; If you absolutely hate kittens and you must upgrade, you’re going to have to do something really hokey like: &gt; &gt; % alias ruby19="ruby19 --disable-gems" &gt; % alias gem19="ruby19 --disable-gems -S gem" &gt; &gt; Even deleting the stock rubygems in 1.9 doesn’t fix this situation. http://rubygems.rubyforge.org/rubygems-update/UPGRADING_rdoc.html So… not worth the trouble right now if you're using Ruby 1.9. :(
I have to say that I think the very idea that you're thinking of using Windows for development when you're planning to deploy to *nix worries me deeply. I honestly don't rate your startup's chances very highly with poor choices like that being made so early on. 1. Poor support in the whole Ruby ecosystem for Windows…*nix is just the de-facto development platform, end of. I'd bet the majority of Ruby gems/libraries aren't even tested on Windows, just like they aren't tested on OS/2 either. 2. You're limiting your toolbox. Want to experiment with NoSQL/queue systems/caching systems/webservers other than Apache? Good luck on Windows. 3. You're going to have a hard time hiring decent Ruby developers who [want to] use Windows. Anyone who limits their toolbox as mentioned in the previous point will probably do more harm than good in a growing startup.
You lost me on both points. First: are you tied to Mozy? There are other online backup services that have Linux clients. Of course, you probably know this, so I'm guessing there's a reason. Second, and more confusing: Novell makes Linux clients for both eDir and Zen. Yeah, it's a pricey setup, but so is AD/SCCM, at the end of the day. I'm not saying that either of these facts are persuasive in switching to Linux, but they shouldn't be a hindrance, either.
Which databases are supported by eventmachine? Which ones work with ActiveRecord 3 AND eventmachine?
The methods work differently than the constructors. They're more like massagers/mungers than the .new() methods. For example, Array(3) and Array([3]) both return [3], which makes it ideal for taking a variable that could be a single element or an array and either casting it to an array of one element or leaving the array unchanged. It's equivalent to ray = [ray].flatten(1), but ray = Array(ray) is just nicely readable. I suspect that the methods exist because of Python's ability to define the __call operator on a class; I would love it if Ruby allowed the same thing, but it's not lexically possible as long as Ruby's parentheses are optional. There's no way to distinguish between Array (a class) and Array (the method call). I think this is why there was a brief spate of writing class methods named []. Mercifully it never caught on, but Array and Proc still sport them. (And of course, Array[] does not behave the same as Array(): Array[[1]] =&gt; [[1]], Array([1]) =&gt; [1]. Sigh/Heh.)
Alternatives to mozy were expensive. AFAIK there's no cheap unlimited backup for linux like mozy. Last time I checked (which I admit is a while ago), novell stuff only supports their crappy suse. If it would work with ubuntu, we may be on to something.
So what successful startup do you manage?
There's a [list of adapters](https://github.com/eventmachine/eventmachine/wiki/Protocol-Implementations) for EM on their wiki. &gt; Which ones work with ActiveRecord 3 AND eventmachine? Plenty. If your question is which database adapters work with EM and AR3, I'm not sure.
Seriously! There's [no indication](http://ruby-doc.org/stdlib/) that it even exists! I never heard of it until I ran across it in the Poignant Guide. 
Look at PowerFolder for cheap backup. Also s3
Where is the docs for this? How much faster is it than other frameworks? Any benchmarks? 
There is no need for such a distinction. I don't see why you could not implement an upsert method. You know find\_or\_create type thing. If you get an ID you do a find\_or\_create\_by\_id otherwise you do a create
I feel like my intelligence was just insulted.
This would have been great back when we did the AI contest. Mine didn't come anywhere close to being over a second, so I didn't have anything to worry about. It's nice to know, though. 
I gotta say this is one of the hardest things about ruby for me. I LOVE writing ruby code, but the ecosystem *for* *me* is a bit of a nightmare. This is one example of many: I think the latest (prior to this announcement) rubygems no longer supports ruby 1.8.5 which is what RHEL5 ships with. Due to policy, we're unable to update to a newer version of ruby, so a good deal of the most popular rubygems just don't install because they require a version of rubygems newer than what we have, but we can't update just rubygems because rubygems doesn't support 1.8.5. It's pretty mind boggling that the folks behind rubygems would make the choice to freeze out something as popular as (the latest version of) RHEL. Now I read that it doesn't support the latest versions of ruby either, so it seems like you're stuck in this very small zone of compatibility. Every time I've lamented this situation on #ruby or elsewhere I get roll-eyed "just upgrade" remarks, but that's just not possible in my case. I really hope ruby matures out of this problem. Living on the cutting edge really limits ruby IMHO.
Replied via PM.
Hey just so you know, I covered [Timeout](http://endofline.wordpress.com/2010/12/31/ruby-standard-library-timeout/), I'll take a peak at the others.
https://github.com/schacon/kinectaby and i'm pretty sure there are more.
Sounds cool, unfortunately I don't have a Kinect yet otherwise I'd be in. What are you aiming to do? Create a wrapper to the c libs? OSX only, but on the face of it this java lib looks like it might be handy as a guide: https://github.com/nrocy/processing-openkinect 
Yes I'm aware that there are a few wrappers out there for libfreenect, yet no pure Ruby driver.
No I don't want to build another wrapper, instead I want to see how far you can get with pure Ruby.
Sounds pretty awesome. I just got a Kinect and I've been working on learning Ruby as well. I would love to be able to tinker with both!
hi meltingice, good to hear that you're interested :) have you seen/tried my code snippet? if so I can give you the part where I got stuck...
Yeah I took a look at it. Unfortunately I don't have much experience with writing USB drivers though. Where are you getting the Kinect USB driver API info from?
This guy [http://idav.ucdavis.edu/~okreylos](http://idav.ucdavis.edu/~okreylos/ResDev/Kinect/) did his own Kinect driver in C (without libfreenect) and I was learning from his code. The control-stuff works as I said. But I'm unable to retrieve any information back from the device.
What's your motivation to avoid using a native wrapper? Is it just to have fun doing the ruby one or something else? (honest question)
yeah. mostly because there are several wrappers but no native thing. I kind of find this more interesting and insightful .. also as a fun way to get a bit more into ruby from another perspective, because at work it's mostly web-dev with rails.
Any chance you want to throw your code up on GitHub? Would make collaboration easier.
https://github.com/pachacamac/rinect
Sweet, I'm following it now. I'll go through and help to clean up the code a bit first.
Cool project idea. It's very nice to have pure libraries for these sorts of things. Hope you get farther!
&gt;I wish Ruby was portable in reality not only in words, I've never had problems with Python or PHP + Windows. But thankfully, some people try to change that. + Lack of a decent shell and predictable environment. + The language performance itself is slow on Windows. It doesn't have to be though. That should definately be fixable. + it's no such much the language, as the frameworks with their shell scripts, dependency management, etc. In the end rails is gonna run on a linux server. Without a unix environment, the windows experience is always going to feel like an 'emulation'. If/when Rails takes support windows servers for production, seriously, the development experience on Windows will improve with it. But from database migrations to imagemagick tricks, to file-upload support, all those components expect UNIX. Personally, if you _have_ to work on windows, I would run either a local headless vm with linux on it, or use a VPS for development. SSH into it, and mount the file-system. Off course, at point, IDE integration is going to be tricky. 
Hey cool :) let me know when you got something so I can merge it in my branch.
So participate if you like it ;D it's on github now
Writing in pure Ruby will likely be fun, but the simple wrapper around libfreenect will likely run significantly faster. Bear that in mind as you press ahead :)
You're right of course. But for some things it doesn't have to be that fast. Imagine a project where you need a few 3D-shots of an object on a turntable from every side. Wouldn't matter if it takes 0.1 or 1 second per shot. So there sure is something useful to this ;)
All of the functionality you had isn't added in yet (working on that now), but when it is, I'll send a pull request: [https://github.com/meltingice/rinect](https://github.com/meltingice/rinect)
Can't no Kinect! Maybe will get one eventually..
You're right that it's probably possible to handle these amounts of traffic but there are quite some options where it wouldn't work. For instance, each dyno can only handle 1 request at a time, so in case you have a page or so that's rather slow, you'll actually block other visitors. This generally also means you'll also need a worker to speed things up, which costs extra. Heroku also has a few other limitations, for instance, you're pretty much required to use Sendgrid or another third party provider to send emails, which can get rather expensive if you need to send larger volumes. SQL backups are not really included either, it's possible to do so using cronjobs and your own script, but then you'll of course also need a third party storage solution (or their 30$ option if you want to store more than two backups). Basically Heroku is pretty nice, but not perfect. Especially if you have the ability to set up a regular dedicated server, it'll easily be cheaper in the long run. In the case of MediaTemple, I'm not so sure, it seems like it offers the worst of both worlds, limitations and no easy deployment.
ad. 1 that is somehow true, easily fixable with cygwin + console2 + ansicon as shell. ad. 2 no doubt, I have done some benchmarks, performance on Win 7 x64 is definitely worse. This usually have no impact on developing some small stuff, but for things like Rails 3 + RSpec 2 ... well, one must have some patience. ad. 3 Never had really big problems with that point. There are literally binary libs for everything you could expect (with some obscure exceptions). Still many things will be sort of 'emulation', and to make some things work you will need to use some google-fu, but really, the only one issue that was bogging me down was poor performance (sloweness) of all things in Ruby on Win. 
I don't have a kinect but I really admire what you are doing, it's nice to see a developer looking at ruby as something other than a web development language. Will be watching this thread/the github page with a keen interest 
"If/when Rails takes support windows servers for production, seriously" There's no one company backing Rails. For the most part Rails 'support' comes from it's users. If Windows users want to see an improved Rails ecosystem on Windows, then the path is exactly the same as how it got to be so good on *nix systems: volunteer patches and documentation whenever you find something lacking.
1. agree with you there 2. like I said, that should be fixable. 3. sure, in the end, all the opensource stuff is portable and somebody like has ported it But at that point, it sounds like it's about 100 times the effort, compared to just running a virtual machiene. It's not windows fault, or anything. It's just that Windows really isn't unix. At all. And perhaps someday there will be a 'unix on windows' one-size-fits-all install-to-go environment. You still need to work around those tools that use unix-specific features of the file-system though. File-locking, access-time, case-specific nature of file-names, extends. I'm not saying it isn't doable. It should be. But what are getting yourself into? There are turnkey linux setups that you can literally throw in a VM and be done in 30 seconds. You are never going to shake the feeling you are on less supported grounds. If you find a bug in one of these ported libraries, few developpers give a shit, if it's on Windows. You are so out there on your own.
I wasn't referring to companies, but to community. Yes, you are right. But somehow I think the people with that mindset, aren't running windows.
Sounds pretty reasonable. Thanks for that answer.
&gt; But somehow I think the people with that mindset, aren't running windows. Now, really? Are you 100% sure? Have any statistical data about it?
Is anyone working on a C library for use with Kinect? It might be easier to interface with that. My concern is that Ruby won't be the best choice for doing the image analysis required to make something usable with Kinect. Plus, there's little sense in duplicating work on Kinect at this stage (besides for a fun project), and interfacing with C libraries or bundling C code in a gem is not terribly difficult. It would be awesome to use Ruby with Kinect though.
There are several libfreenect wrappers for Ruby. Or are you talking about a pure C (not C++) lib?
Nice to hear that, thanks! I always hate it when versatile languages with such a high potential get pushed into one corner -like web-development- even if I mostly do backend development for web projects.
Dude ruby 1.8.5 was released in 2006!. You should be mad at the completely insane and incompetent people in your company that refuses to let anybody install any software that isn't supported by the packages of your distro. I bet they don't have the same rule for windows though. I bet the windows sysadmins can install things that didn't come with the OS but the linux sysadmins are cut off at the knees and are not allowed to install anything that is not in the official red hat yum repos. Ruby is the least of your worries my friend. Your sysadmins are not allowed to install hundreds of extremely useful utilities, security tools, and productivity tools either. I would like you to do me a favor please. Please send me a PM naming the company you work for so I can be sure I am not investing any money in a company whose management would cripple their system administrations this way. Needless to say I also would want to avoid sending somebody there for employment. Think about how dumb it is to let you install gems willy nilly but not allow you to upgrade rubygems or ruby. That's got to be the stupidest thing I have ever heard of. I am stunned at the level of retardedness your management is displaying. It's like a nightmare out of fuckedcompany.com 
I respectfully disagree. First of all, I work for a state government, so yea feel free to `require 'std_state_jokes'`. :) I disagree because of things like Perl. Perl 5.8 has been out for a very very long time, is the standard on all 3 of the *nix OSes we run and most perl packages work against it. There is a dev branch that a lot of things don't work against, but I think it'll be a very long time before people take it as seriously as rubyists think of 1.9. Yuck, I can't believe I just used Perl as an example. I hate perl. Also, RHEL expects to be in "regular production" for [7 years](https://access.redhat.com/support/policy/updates/errata/). RHEL5 came out in March of 2007, which really isn't that long ago. When the community, or at least a huge part of the eco-system completely de-supporting a piece of software that's only 4 years old (ruby 1.8.5) I think it makes it difficult to imagine using it for any sort of production software stack. If I write some huge app in ruby (rails or not) how long is it reasonable for me to expect that app to work for others? (Where they can go install it and the gems it might require in whatever ruby version they happen to have.) What if my app takes six months or a year to develop? Once I'm "done" should I immediately upgrade every dependency and spend even more time fixing everything that changed? Once I do that, how long do I have until the ruby clock runs me out? 4 years just doesn't seem that long to me. As a reminder, I LOVE ruby and I'm sincerely and respectfully trying to discuss something that I see as a problem.
Just a small nit-pick. Instead of creating get/set methods, why don't you just call attr_accessor :state and define state=(s) in your LED and Motor classes? That follows Ruby idioms a little more closely. 
Good point
No, I don't. But open source developpers tend to have a stronger bias for Linux and even Apple. Can we run Git on windows these days? Because github is pretty popular. I'm not saying that windows is less popular for developers, but it might be at the end of the stack when it comes to popularity in number of contributors to opensource projects. 
The comment that "all the technical discussions should happen on the english-speaking ruby-core@ list instead" is a bit... much, I think. Like it or not Ruby was born and raised in Japan and despite its more recent popularity here, it's awfully rude to tell members of the core team that they have to carry out discussions in the language of your preference which is likely one many of them don't feel like they can adequately express themselves in. It might be convenient for you or I but I think it's disrespectful to demand it of those for whom it may very well be very inconvenient. Most likely they'd just end up sending emails to each other anyway when they wanted to talk about something in their native language and you'd end up with a less visible, less usable mailing list. I've seen some of the discussions on ruby-core as well, and some of the comments about it being fine as long as they can "get an idea across" aren't really borne out in reality. There's plenty of heated debate that goes on in there with English-speakers attempting to present very narrow complex arguments in favour of some feature, stating that this or that should happen unless they receive an adequate rebuttal. I might not exactly call it hostile but it's certainly hostile to someone without the capability to argue in that fashion due to them not speaking the same language as you. I've already felt a number of times that some more leeway should be given there, it's bad enough getting into arguments about semantics for native speakers, forcing someone who struggles with English to argue with you on some semantic point simply isn't fair. It's not like matz, yugui, etc. don't post on the English mailing list or won't respond to questions or attempt to engage the development community there. An effort is made and I appreciate that effort, I think it's a reasonable middle ground. It's wrong to exclude either side.
&gt; Can we run Git on windows these days? Most certainly. I use since long time already. And believe this doesn't feel like emulation (one thing you may not like, is Putty auth agent process running - that stores your ssh keys). And in my opinion it has even better Open tools (like TortoiseGit). Some other leading OS projects like Firefox or Thunderbird, run (usually) smoother on Win platforms (but that is my experience I have no reference for that). Github is great, but don't forget about SourceForge. You can browse projects by platform, and well... browse a lot http://sourceforge.net/directory/desktop/windows &gt; and even Apple Linux yes, but with Apple you went too far ;) But well, we already went to far from discussion about Ruby...
&gt;Most certainly. I use since long time already. And believe this doesn't feel like emulation (one thing you may not like, is Putty auth agent process running - that stores your ssh keys). And in my opinion it has even better Open tools (like TortoiseGit). Yeah, I hate putty. But I think it's mostly just another mindset. You install a gui application for windows. Which is just .. wow. How can you hookup a git-commit and such to a shortcut in the OS like that? Wait, it's been a while. Mindset shifted. There is likely git plugins for IDE's that provide nice short cuts or something, right? The big mindset shift for linux is that the OS is the IDE. You can hook up and connect all kinds of tools. Script common tasks, etc. You like tab-based interface? You just change your window manager. Because, the desktop environment is so less flexible in Windows, people tend to put everything in the IDE. Something like Visual Studio or Eclipse; they are completely desktop environments, if you think about it. &gt;Some other leading OS projects like Firefox or Thunderbird, run (usually) smoother on Win platforms (but that is my experience I have no reference for that). Agreed. They put more effort in their windows forks, eventhough their toolchain is very linux oriented. But then again, those are products targeted at consumers. Their development isn't driven by developers-interests. Mozilla really does make a lot of money, for example. The developer community projects are less commercial in nature. It's from developpers, for developpers. It's harder on Windows to have this kind of setup where you have hunderds of interchangable tools that can hook up together. From managing the dependencies, to integrating the toolchain. Its just more work, and there is all this cool stuff from Microsoft, that can't hook up into, or anything. So, there's also more competition. the type of competition that fragments the efforts, and hurts the community. You need a package manager and usuable shell for starters. And they need to be somewhat standarized. &gt;Linux yes, but with Apple you went too far ;) Apple is quite popular with the Rails crowd. They don't seem to like linux that much; too much hassle, but they need a real unix shell. I prefer linux, but I can definately understand their choice. You do get unix + the windows-type-of-mind-set. (like IDE's that integrate everything, you have to pay though) &gt;Github is great, but don't forget about SourceForge. You can browse projects by platform, and well... browse a lot http://sourceforge.net/directory/desktop/windows Many of those applications are linux applications as well. At least, the first page suggests that. Audacity, VirtualDub, FileZilla, 7Zip, GIMP. Most of these are ports. Windows is not the main development OS for the gimp (i doubt it's even officially supported), Audacity or VirtualDub. FileZilla i can't really tell, like most XUL based applications they tend to have cross-platform developpers, because it doesn't really matter. Shareaza is a real windows opensource project though. Compare the windows link to: http://sourceforge.net/directory/desktop/linux That's actually more applications. And that's on SourceForge. Many of these type of projects, especially desktop related are hosted at KDE, GNOME, Launchpad, Debian. Since to be a desktop application on linux it makes sense to stick close to the distrobutions or desktop-environments. And those are just the desktop applications. The developer tools have even a more strong linux bias. I mean, the defacto base compiler, is GCC. The most used lexers in the world, is from GNU. And even something like the GTK syntax highlighter keeps popping up in windows editors. All source control tools tend to have a strong linux bias, as well. I mean, in time stuff like subversion got all these nice tricks to deal with windows not having proper file authentification stuff. But the data-models all assume Unix, and then they just add some hacks to make sort of it work on Windows. Git didn't always work on Windows either. And i doubt upstream Git is actively supporting Windows. So this must be a 3rd party effort. 
&gt; I have finally reached a decision regarding my involvement in the Debian Ruby packaging efforts. I have decided to stop. Thank you. 
It's pretty much a drop in replacement for test/unit. If you're curious I wrote a bit about [minitest](http://endofline.wordpress.com/2010/12/10/ruby-standard-library-mini-test/) and [minitest's mock](http://endofline.wordpress.com/2010/12/18/ruby-standard-library-minitest-mock/) library. The source is mirrored (I think) over at [github](https://github.com/seattlerb/minitest) if you want to see what's in there.
Now that's an answer... I will not dare to reply to that ;) But I agree with some of the points. Best regards. &gt; So this must be a 3rd party effort. http://code.google.com/p/msysgit/ And is actually very, very good.. and Open Source ;)
Translation: "The Ruby developers won't abandon RubyGems, and we Debian maintainers refuse to integrate RubyGems with APT, so I'm going to paint the Ruby developers as unprofessional and then go off in a hissy fit."
Pulled your code into the main branch, added some new code. Can you look into the accelerometer class? I can't manage to get back any data from that damn thing :/ EDIT: I managed to get a reading from the accelerometer! Had a wrong constant, took the right one from the libfreenect code :)
Install RVM, write your code to run using whatever version of ruby you want and then the system can retain its own version of ruby. Problem solved. If your release schedule and development environment is that tied to the operating system then you either need to just deal with it and move on or find another way to solve the problem. Ruby is a new language, development is frequent and open.
C++ is fine too, I just meant native code.
I'm going to come out in defense of Debian on this point. RubyGems just spits files all over the /var/lib/gems file system which doesn't make sense. It's basically relegating Ruby to a second-class citizen on every system - if you want ruby to be taken seriously, you should be installing in /usr/bin like perl, python, and bash scripts do. As an added advantage, you avoid name clashes with other binaries, and you also don't have to tell every user of ruby to add /var/lib/gems/1.8/bin to their PATH. Add to this, I don't know what files are installed from which packages. I can tell which package installed what file on my Debian system through a simple dpkg -S filename command. What's the equivalent command for rubygems again? Gems get some points for being easy to use and being able to install multiple gems at once, but they are less flexible and more complicated than the normal Debian way of installing. rubygems exist because there was shit for packaging available for Mac OS X when everyone was getting all happy with ruby and rails and needed a module packaging system, and they were all using OS X. Also, the article is way more about the Ruby language and interpreters than it is about rubygems anyway. 
This is counterproductive to advancing the goals of Ruby as a language. Debian is installed on any number of servers and if you have to tell the admin "compile everything from source and install it" instead of "run apt-get install ruby", it's going to take them longer. It's sad to see more maintainers throwing up their hands at Ruby, but I understand when the community is hostile like this. 
Ah, but that's exactly the point--Debian breaks RubyGems so that you have to add things to your path, and they change its install point to /var. Real RubyGems as shipped by the Ruby developers doesn't have the path problem, and installs gems to /usr/lib or /usr/local/lib where they belong.
Well take a look here http://idav.ucdavis.edu/~okreylos/ResDev/Kinect/ and here https://github.com/OpenKinect/libfreenect for example ;)
Programs should not be screwing with things in /usr/lib. I should be able to identify the source of every file in that directory. That's why it's in /var/lib/gems on Debian - because rubygems is just another program, and data that programs mess with goes in /var according to the FHS. I actually prefer this to the mess that a third-party system would put all over the filesystem. In my opinion, they've fixed RubyGems so that I can actually tell what is installed by apt, and what is installed by gems.
&gt;This is counterproductive to advancing the goals of Ruby as a language. I vehemently disagree. Debian had the right idea. Many ruby gems are dependent on native packages and it's super convinient to be able to apt-get install rmagick and have it also install all the dependent *-dev libraries etc but let's face it gems change too often and there is no way debian can keep up. It's best to just let the ruby community handle this. 
&gt;if you want ruby to be taken seriously, you should be installing in /usr/bin like perl, python, and bash scripts do. As an added advantage, you avoid name clashes with other binaries, and you also don't have to tell every user of ruby to add /var/lib/gems/1.8/bin to their PATH. But that won't work if you have more than one version ruby installed. &gt;Gems get some points for being easy to use and being able to install multiple gems at once, but they are less flexible and more complicated than the normal Debian way of installing. There is no way in hell debian will be able to keep up with gems. They shouldn't even try. 
How does installing via apt-get only to have to reinstall later because the apt-get package is broken save anyone any time?
&gt;Also, RHEL expects to be in "regular production" for 7 years. In this day and age it's unreasonable and I would say downright stupid to run any software that is seven years old. In no way, shape or form do I want the ruby any other software community to handicap themselves or to hinder progress because some people want to run seven year old software. That degree of backward compatibility is crippling and damaging. Can you imagine running a seven year old version of rails? A seven year old version of linux? &gt;When the community, or at least a huge part of the eco-system completely de-supporting a piece of software that's only 4 years old (ruby 1.8.5) I think it makes it difficult to imagine using it for any sort of production software stack. The choice is to support people whose idea of production is using four year old software or to add new features at the expense of some backward compatibility. I for one am very glad the ruby community chose not to pursue the former. &gt;If I write some huge app in ruby (rails or not) how long is it reasonable for me to expect that app to work for others? At this point I would say extremely unreasonable because the number of people running four year old versions of ruby, rails, linux, mysql, postgres, apache etc are vanishingly small. &gt;Once I do that, how long do I have until the ruby clock runs me out? 4 years just doesn't seem that long to me. Four years is eternity in the internet age. Where was reddit four years ago? Where was facebook, twitter, wikileaks, etc? Look the choice is slavish dedication to backward compatibility or moving forward with breaking changes. There are no other choices and like I said I see slavish dedication to backwards compatibility as more of a problem than incompatibility with ancient versions of ruby or rubygems. 
&gt;Install RVM, write your code to run using whatever version of ruby you want and then the system can retain its own version of ruby. Problem solved. It sounds like he is not allowed to install RVM. RVM is a recent invention and he is not allowed to install anything on his server that are not in the default repos of RHEL. His sysadmins are not allowed to add other repos like EPEL, they are not allowed to compile their own software, and they are not allowed to install binaries. His problem is not technical. There are hundreds of ways to solve his problem including simply upgrading ruby. His problem is political. It's the fact that he is working for the state who has hired insane, idiotic, retarted, ignorant management who made a rule that nothing outside of the official RHEL repos can be installed on the system. 
Having more than one version installed works fine with python - I have python2.5 and python2.6 installed in /usr/bin, with /usr/bin/python pointing to python2.6. If ruby needs more than two versions installed at the same time in order to make things work, then there are more problems with it than I think. It makes sense to depreciate / break some things from ruby1.8 to ruby1.9, but if you need three different versions of the _same language_ on your system, something is broken about that language. I'm not saying Debian should try to keep up with all the gems in existence (it's probably not a good idea anyway). Just that there is some sanity between the two systems. I am happy with the /var/lib/gems/1.x system that they have set up now - gems things stay where they should be, and **real** programs can be in the real directories. In my opinion, gems are second-class citizens and I'm fine with that. When a rubygem needs a native package, I install the required -dev package on my system with apt. 
This article is not about gems, it's mostly focused on the actual ruby language. If you want to be able to `apt-get install ruby` and get a sane interpreter, you want Debian to be able to package ruby. I agree with you that gems are probably too fast-moving for Debian maintainers to follow, but the language should be stable enough to be packaged. So should the `gem` packaging system.
Well then, I trust you'll get rid of /usr/share/i18n/locales, because those are all installed by the locale compiler, not by dpkg itself.
&gt;Having more than one version installed works fine with python - I have python2.5 and python2.6 installed in /usr/bin, with /usr/bin/python pointing to python2.6. We are not talking about versions of ruby, we are talking about gems. We need to keep a separate set of gems for different versions of ruby. If all the gem binaries were in /usr/bin that would not work. &gt;It makes sense to depreciate / break some things from ruby1.8 to ruby1.9, but if you need three different versions of the same language on your system, something is broken about that language. If you think there is something broken with ruby then don't use ruby. I think it's not right to tell the ruby community what they can can't do with their language. The ruby community has 1.8X, 1.9X, ree, rvm, jruby, ironruby and others. The fact of the matter is they exist and I would submit that than if your operating system can't deal with multiple versions of a programming language something is broken about your operating system. &gt;When a rubygem needs a native package, I install the required -dev package on my system with apt. Ruby needs to either ditch bundler and embrace automateit, chef-solo or puppet or needs to extend bundler to deal with external dependencies. There is no doubt about that. You should not have to apt-get anything. Bundle install should suffice to get your app going.
&gt; `~ » dpkg -S /usr/share/i18n/locales/fr_CA ` &gt;`locales: /usr/share/i18n/locales/fr_CA` Looks like they're installed by dpkg to me. Also, /usr/lib != /usr/share 
&gt;The ruby community has 1.8X, 1.9X, ree, rvm, jruby, ironruby and others. The fact of the matter is they exist and I would submit that than if your operating system can't deal with multiple versions of a programming language something is broken about your operating system. jruby, ironruby, ruby1.8, and ruby1.9 are all available in apt right now. I don't think Debian has a problem with multiple implementations. &gt;Ruby needs to either ditch bundler and embrace automateit, chef-solo or puppet or needs to extend bundler to deal with external dependencies. &gt;There is no doubt about that. You should not have to apt-get anything. Bundle install should suffice to get your app going. I can not disagree more strongly. Native libraries should be installed by the packaging system, not a third-party system.
Thanks. They really should have some docs though.
&gt;This article is not about gems, it's mostly focused on the actual ruby language. If you want to be able to apt-get install ruby and get a sane interpreter, you want Debian to be able to package ruby. Debian currently has no problems with this as it supports multiple versions of ruby. &gt;So should the gem packaging system. This is where we disagree. Slavish devotion to backwards compatibility will only harm gem
&gt;I can not disagree more strongly. Native libraries should be installed by the packaging system, not a third-party system. Automateit, chef and puppet use the native packaging system.
&gt;downright stupid So much for civility. &gt;to run any software that is seven years old. I hate to break it to you, but every real shop does this. It's simply not cost effective to be constantly upgrading the underpinnings of your applications. Why do you think OS vendors go through all of the effort to backport security (and some bug) fixes to the versions they support? Just for kicks? &gt;In no way, shape or form do I want the ruby any other software community to handicap themselves or to hinder progress because some people want to run seven year old software. Instead they handicap themselves by having an ever-narrowing sweet-spot that you simply *must* be at in order to have a functioning system. No one trying to do real work has time for that. &gt;A seven year old version of linux? Absolutely. Again, why do you think OS vendors support OSes (and included versions of software) for that long? &gt;The choice is to support people whose idea of production is using four year old software or to add new features at the expense of some backward compatibility. Four year old software has a couple of things going for it: stability and support. &gt;If I write some huge app in ruby (rails or not) how long is it reasonable for me to expect that app to work for others? &gt;&gt;At this point I would say extremely unreasonable because the number of people running four year old versions of ruby, rails, linux, mysql, postgres, apache etc are vanishingly small. The question was: If four years is too long, how long isn't too long? What *is* a vaild amount of time to run a given interpreter and/or library? 6 months? 1 year? 2? &gt;Look the choice is slavish dedication to backward compatibility or moving forward with breaking changes. There are no other choices and like I said I see slavish dedication to backwards compatibility as more of a problem than incompatibility with ancient versions of ruby or rubygems. Here's another choice: Save your backward incompatible changes for the development version of ruby. Things aren't all that different 3 revisions ago, or if they are -- they shouldn't be. I'm not suggesting some crazy new idea here, this is pretty much how the rest of the [world works](http://en.wikipedia.org/wiki/Software_versioning). As to "ancient versions of ruby or rubygems" my initial post was entirely about the fact that rubygems doesn't support the latest and they don't support the old stuff either. I'm surprised this sweet spot is so acceptable to you. I'm also surprised that you think it's the only way things can work when nothing else works this way.
What if your application isn't a web application? What if you intend for others to download and use it? Should they have to deal with RVM too?
I think it's great. The Kinect is high on my shopping list for next month :) It's cool that you want to keep the project in pure ruby and not just create c bindings. Followed your project.
Maybe I'm completely clueless... but isn't Ruby itself expressed in English? (class, def, for, if, things like that). Why could you also not expect documentation and lists to be in the same language?
Aaron is hilarious. Very recommended, the laugh alone is worth it!
Can you speak about Calculus in French or German or Russian? Would you expect someone with a major break through in non-linear differential equations based on a Russian sub-school, suddenly to express their inner desires in English just because that's the language *you* speak when *you* do Calculus? The future of science/math is going to be more and more muti-lingual as Western Nations spend less and less time and money on core research and the rest of the world gets seriously into the game. 
I don't see how that is relevant at all. You're either completely missing my argument, or you're completely clueless. Ruby, the programming language, is written in English, is it not? If not, please correct me. So, if the language itself is written in English, I don't see why we are jumping down someone's throat who would like to see the other related materials in English as well. And certainly not citing that "it's from Japan" as the reason you can't have that desire fulfilled.
The character encoding support of [Ruby to 1.8](http://blog.grayproductions.net/articles/bytes_and_characters_in_ruby_18) was * None (n or N) * **EUC** (e or E) * **Shift_JIS** (s or S) * UTF-8 (u or U) notice anything missing, that would have default support if the language were written by people with English as the primary language?
Are we talking about the same thing? I'm talking about the actual Ruby code that gets interpreted. 
Its keywords are based on English words, that is really not even close to the same as the language being "expressed in English", nor does it come close to implying that anyone who uses it is even remotely fluent in English. I know probably 50 words of French but I can't even come close to expressing myself in the language, and 5 years of working in some language where "if" and "else" were in French wouldn't help this situation--they are keywords in a programming language, not an exercise in learning French, and they constitute a very limited set without any language grammar or syntax and likely very little in the way of semantics either. Keywords in programming languages being mostly English is generally a historical thing based on the origins of modern Computer Science, it doesn't signify that anyone working in the field can or should speak English any more than surgeons should speak Latin due to how bones are named. Surgeons will of course know the names of bones which are in Latin, but I'd wager very few actually speak Latin.
Oh, glorious. They're all up now. /downloads for extended viewing
Why aren't they in Japanese, if that's the argument people are making to justify not providing English versions?
I edited probably after you posted that (unfortunately) but it's mainly a historical thing I'd guess. matz of course knew C, Perl, Smalltalk, etc. before he made Ruby, these languages will influence how Ruby turns out. I think most speakers of other languages are used to having their keywords derived from English, but it doesn't follow that they should also wish to only talk about programming in English.
Gotcha. I was seriously curious if there was some Ruby interpreter where all the language's keywords were in something other than English.
Really great presentation. Thanks for sharing this.
Your argument is that the 38 key words of Ruby are english, therefore all discussion of the future development of the language should be done in english. My argument is that key words are like symbols in mathematics and can and should be discussed in whatever language. Yet the conceptual framework for using those symbols particularly in innovative ways is necessarily going to depend on the native language of the innovator. In programming languages the first nod to human language is not keyword choice, but character set. How do you handle strings? What services do you support. You would imagine for example and Arab speaker may be more interested in right to left display than English left to right display. In the case of ruby it's clear that they were more focused on the Japanese character sets than English. Further the expectation that the language development discussion be in English is a symptom of having lived in a world where the technological world was led by the West and the West was lead by English speakers. This is sadly really only a brief post WWII phenomena. And that era is at the beginning of the end. So not only am I answering your question I am giving you the context and expectation of what to expect given the framework in which your question rests. TL;DR: If you want to participate in the Ruby project as a first class citizen learn Japanese.
I sent you a message on GitHub... just making sure you got it :)
It was a great conference this year. I was there helping kobier out with his Confreaks stuff, and it made the conference that much funner. 
Why is this being voted down? This is 100% accurate! Rubygems in debian is patched by hither-complainer-in-the-blog-post. 
You can't now though. Ruby is divided up into like, 15 packages on debian. To get any *sane* version of ruby on debian, you need to _apt-get install ruby-full_, which actually installs everything you need. Stop dancing around the topic -- debian has always had their little hissy fits with language developers and this is only the most recent one. even perl devs will tell you to install local::lib (bundler or rubygems, take your pick) on debian and possibly perlbrew (rvm). Just because this author is unwilling to cave to anything and decides that instead of constructively trying to tackle this problem, he throws up a blog post like some 15 year old with a myspace, doesn't mean I have to care. What bothers me is that debian's been having these problems long before ruby was popular and they *still haven't learned anything*.
And while I'm here responding to all your righteous indignation, who the hell are you to say what "Ruby's goals as a language" are? I know I can't answer that question and you've displayed a fair amount of ignorance in your posts.
aaron is a total badass. 
Hey thanks. I think it was informative on how Timeout uses Threads.
[ffi-libfreenect](https://github.com/jgrunzweig/ffi-libfreenect) - Ruby FFI bindings to libfreenect mainly done by Josh Grunzweig and Eric Monti. Technically, it is pure Ruby since it uses FFI to interface with libfreenect.
&gt;So much for civility. Jesus H crist on a pogo stick man. So I am not allowed to call your management stupid even when they are stupid? Are you really that easily offended? The word stupid when applied to stupid decisions pushes you over the edge? Come on now. Be serious. We are adults here. We can have an adult conversation and yes sometimes that involves using the word stupid or much worse. Grow up. &gt;I hate to break it to you, but every real shop does this. No every real shop does not do it. &gt;It's simply not cost effective to be constantly upgrading the underpinnings of your applications. It's all open sourced. It doesn't cost you anything to upgrade ruby. &gt;Why do you think OS vendors go through all of the effort to backport security (and some bug) fixes to the versions they support? Just for kicks? Red hat, centos, debian, and the entire open source community work very hard to provide you with quality software and work diligently to keep it safe, secure and up to date. I can't help it if you refuse to take them up on it and continue to insist on using outdated and insecure software. &gt;Instead they handicap themselves by having an ever-narrowing sweet-spot that you simply must be at in order to have a functioning system. The idea that there are no other functioning systems is laughable. You are not becoming a parody of yourself. &gt;Absolutely. Again, why do you think OS vendors support OSes (and included versions of software) for that long? For the money. Not for your benefit. For theirs. &gt;Four year old software has a couple of things going for it: stability and support. The idea that there is no stable or supported software newer than four years old is laughable. You are becoming a parody of yourself. &gt;The question was: If four years is too long, how long isn't too long? Oh I don't know. Let's pick a number out of our ass. How bout one year. If you can't upgrade your apps once a year you are incompetent. Oh what the fuck I am feeling generous. How about two years. &gt;What is a vaild amount of time to run a given interpreter and/or library? 6 months? 1 year? 2? Not four. Nobody runs a four year old version of postgres, mysql, apache, ruby, etc. At least nobody sane. &gt;Here's another choice: Save your backward incompatible changes for the development version of ruby. No absolutely not. If that was the case we would never ever get those development versions into production because there are people like your bosses around who will keep using outdated and insecure software for a decade. &gt;I'm not suggesting some crazy new idea here, this is pretty much how the rest of the world works. Nowhere in your link does it say that software must never break backwards compatibility for at least four years. &gt;As to "ancient versions of ruby or rubygems" my initial post was entirely about the fact that rubygems doesn't support the latest and they don't support the old stuff either. Once again.... Keeping backwards compatibility is a greater evil in the open source world. Release early, release often. &gt;I'm surprised this sweet spot is so acceptable to you. It is acceptable to me because it's progress that I may or may not install at my whim. The choice is mine. Unlike you nobody is telling me I have to use software from 2006. &gt;I'm also surprised that you think it's the only way things can work when nothing else works this way. "open source" look it up. 
With RubyGems you *can* identify the source of every file. RubyGems installs to /usr/lib/ruby/gems/(ruby version here)/gems/(gem name here). Or, in case of Debian's patched version, it installs to /var/lib/gems/(ruby version here)/gems/(gem name here). Let me give you two examples. /usr/lib/ruby/gems/1.8/gems/rails-2.3.5/lib/commands.rb - I can clearly see that this file comes from the Rails 2.3.5 gem. /usr/lib/ruby/gems/1.8/gems/sqlite3-ruby-1.2.4/lib/sqlite3/translator.rb - I can clearly see that this file comes from the sqlite3-ruby-1.2.4 gem. So I have no idea where you got the idea from that you can't identify the source of every file RubyGems installs.
You don't tell the admin to compile everything from source and install it. You tell him to use RVM. Ruby can be installed by copy-pasting a few commands.
technically it still is a wrapper ;)
yep I did. sent you a request on gmail from my jabber account. don't have/like icq/aim/msn/skype
Then you'd bundle ruby and all of your gems with it.
When I install a locale update the compiler goes through and builds them all. And trying to shore up your argument after the fact by noting irrelevant details isn't terribly convincing.
What about all of the files in `/usr/lib/ruby/gems/1.8/bin` (or `/var/lib/gems/1.8/bin` on Debian)? I know that you can identify the source from the path for most of the actual files inside the gem itself, but gem does more than just unpack zips in a directory. Additionally, now as a system administrator I suddenly need to know that the `/usr/lib/ruby/gems` tree is a magic part of my system where files get installed by a separate package manager that I need to learn about. 
I know that I'm thrilled whenever I need to install an entire compiler buildchain on my server in order to support a language instead of just typing `apt-get install ruby1.8` and having the compiled binaries downloaded and installed for me. 
All of the productivity of a garbage collected language with all the fun of dangling pointers!
`apt-get install ruby-full` depends on the packages `ruby`, `ri` and `ruby1.8-dev`. So there are exactly two packages difference between your `apt-get install ruby-full` and my `apt-get install ruby`. I can't speak to the author caving to anything because I don't know too much about the specifics of the ruby/Debian communications, but within the bounds of Debian there are rules that need to be followed, and a package maintainer doesn't have very much leeway in those rules. One of the rules is that you can't install things in /usr after the install process is complete. Gems breaks this rule, so Debian needs to break/fix the package so that it installs somewhere you _can_ change after the install, /var. 
I'm personally a fan of [Trollop](http://trollop.rubyforge.org/)
For ages I thought his mullet wig was his real hair.
you're funny.
First create the file: touch hello_world chmod +x hello_world Edit the file and set the shebang line to: #!/usr/bin/env ruby puts 'Hello world' Then run it ./hello_world You can access command line arguments using the global variable ARGV as well as read from STDIN. You can also use the built in OptParse library for parsing command line arguments. It also helps with documenting your script. 
I can assure you: the mullet is real, the hair in this video is a wig.
Is there something inherently inferior about ruby that necessitates this sort of clumsiness? The majority (all?) of PHP/Perl/Whathaveyou apps don't have such an albatross.
And the moustache is equally as epic.
This will be my last reply, so feel free to get the last word. &gt;Grow up. &gt; The idea that there is no stable or supported software newer than four years old is laughable. You are not becoming a parody of yourself. &gt; You are becoming a parody of yourself. I find it ironic that you're telling me to grow up and then slinging more insults my way. Just because we disagree doesn't mean you have to insult me. I haven't been insulting towards you or your ideas, you've called my assertions "stupid" (you weren't referring to my management, you were referring to the idea that I think it's reasonable to run software for a long time,) and "laughable." You should also decide if I am or am not becoming a parody of myself as you stated both. I was trying to discuss this with you, but it's clear that for you, you're 100% right and I'm 100% wrong. That's unfortunate. &gt;It's all open sourced. It doesn't cost you anything to upgrade ruby. &gt;"open source" look it up. I'm very familiar with open source, thanks again for being condescending. The cost associated with updating the underpinnings of your applications once a year has nothing *at* *all* to do with paying for that software and I think you know what I meant. In case you didn't, these upgrades take system administration and developer time. By having drastic changes in revision versions and a narrow sweet spot, you've made *more* work for everyone, not less. When I asked why you think OS vendors support software this way you said: &gt;For the money. Not for your benefit. For theirs. This raises the following (rhetorical at this point) questions: What benefit do they get from it? Why do people pay for it if it's such a horrible idea? &gt;Release early, release often. I don't think you understand the import of that statement. It's about being open, not about production. &gt;&gt;I'm surprised this sweet spot is so acceptable to you. &gt;It is acceptable to me because it's progress that I may or may not install at my whim. The choice is mine. These two statements indicate to me that you've completely missed my point. I think you've convinced yourself that I'm saying that everyone should run really old software and things should never change. I'm not saying that at all. Of course you maintain your application with recent versions of the things it depends upon. *Of* *course* *you* *do*. I'm saying ruby makes that more difficult for both the developer and the customer than any other language I've ever used. You don't seem to have a problem with that. I'm fine with that. Your lack of a problem with it doesn't make me 100% wrong, however. Have a nice day.
Wow, that was great! Are you going to re-type the rest of the article too?
Sorry, thought it was an ask reddit self-post due to the submission title being a question and the RSS feed for reddit not displaying the domain of the link. Maybe I'll take a look at the link now.
If you're distributing an application written in an interpreted language and you don't know the destination platform then you bundle your own runtime environment with the application (license permitting). If you're writing a web application then you configure your web server however it needs to be in order to run your application. If that means upgrading PHP, or Perl, or Ruby, then so be it. Are you trolling me, or do you really not understand how these things work?
&gt; apt-get install ruby-full depends on the packages ruby, ri and ruby1.8-dev. I'm sorry, this must have changed recently. Feel free to verify my assertions if you wish; before the *ruby-full* package there were tons of packages, like ruby-openssl and ruby-zlib that you had to install. &gt; I can't speak to the author caving to anything because I don't know too much about the specifics of the ruby/Debian communications, but within the bounds of Debian there are rules that need to be followed, and a package maintainer doesn't have very much leeway in those rules. One of the rules is that you can't install things in /usr after the install process is complete. Gems breaks this rule, so Debian needs to break/fix the package so that it installs somewhere you can change after the install, /var. See, this *is* the problem right here. The current that debian thinks it's the authority on all the packages it maintains is just broken in mentality. It's smug at best and ignorant at worst. I want my system to be as close to the *author's* intent, not the *packager's* intent. Packaging isn't the reason I'm installing the package probably 95% of the time. It's not a coincidence that when given my preference, I choose FreeBSD which is pretty good about doing just that. What you don't seem to understand is that ruby and rubygems, especially in 1.9, are inseparable. So inseparable that a great pile of political drek is going on in rubyland right now where the gems team (which I am not a part of, but follow closely) is fighting with the core team to get a certain feature (called 'gem_prelude') axed so they can actually patch it properly. The key difference here is that the gem_prelude debacle is getting discussed with the key personnel involved on both sides and a solution is approaching. That's *constructive*. When CPAN had this problem with Debian, dh-make-perl was written to help solve it. This has gone largely unpatched and now the mess that is the patched CPAN on debian installs some modules into /etc/perl. Feel free to verify. debhelper could be used, in conjunction with rubygems, to build *debian packages*. It's not out of the realm of possibility, but our foremost contributor in the link there seems to think that threats and whining are going to solve this problem instead of hard work and cooperation. But the fundamental disconnect you and others seem to have is, simply put, that somehow your system ruby means a hill of beans to people launching actual software on your platform. Rarely is the system default the deployed target. This problem is not unique to ruby or debian. Please stop acting like it is.
I'm new to Ruby, but this looks like pretty good IDE... I just don't know if I can make the switch from using Vim to program to something like Redcar. Also, anyone have a good guide on how to setup Vim for Ruby development?
&gt;I find it ironic that you're telling me to grow up and then slinging more insults my way It's not an insult to say your bosses are stupid for not allowing your sysadmins to install any packages that are not in the official repos of a for year old operating system. That's just stupid. You are too sensitive. Adults use the word stupid all the time. Get over it. &gt;you weren't referring to my management, you were referring to the idea that I think it's reasonable to run software for a long time,) and "laughable." You should also decide if I am or am not becoming a parody of myself as you stated both. Man you are a sensitive bastard. Yes it's stupid to run four year old software. Do you really expect that people are not going to criticize your choice to run insecure and out dated software? &gt;The cost associated with updating the underpinnings of your applications once a year has nothing at all to do with paying for that software and I think you know what I meant. In case you didn't, these upgrades take system administration and developer time. If you can't upgrade your operating system every two years you are incompetent. There is no excuse really. Linux is so easy to upgrade and it can be completely automated. &gt;What benefit do they get from it? Why do people pay for it if it's such a horrible idea? Not everybody who pays for it are as stupid as your bosses are. People who pay for it upgrade when a newer version comes out. &gt;I think you've convinced yourself that I'm saying that everyone should run really old software and things should never change. No you are saying people should never advance their software to accommodate the stupid people who continue to run four year old versions of ruby. I am saying slavish devotion to backward compatibility does more harm than good. It holds back progress. &gt;Have a nice day. You know what.. You completely deserve this... Fuck you. 
Occasionally, I find myself accidentally adding semicolons in my Ruby code after working extensively in Javascript for a while.
http://tammersaleh.com/posts/the-modern-vim-config-with-pathogen
I'm not trolling. I really don't understand how you can think that the mere existence of RVM doesn't point to a problem. No other language has this and for good reason: you shouldn't have to bundle an interpreter for something as general as ruby. If I'm selling (or giving) you my perl app, or my java app or my haskell app or my whatever app, I'm only going to bundle the interpreter if I've done something really stupid such that you can't use the one you've already got. RVM is cool and I'm glad it exists, but I can't believe anyone thinks that it's the best way to solve the clear and obvious (to me anyway) problem. Maybe all of this will be a non-issue when 2.0 comes out. I hope so.
I've been using redcar on the rare occasions I'm doing any Ruby or Rails stuff on my laptop. I like it. I would say it's better than gEdit, and as close to TextMate as youre gonna get in Ubuntu.
To install packages to a bunch of boxes maybe use something like [puppet](http://www.puppetlabs.com/) (although that can be a big change if you only want to use it for installing packages).
Wow, that looks really cool. Thanks for the link.
They are a pretty cool company, they sponsor a lot of community events locally(portland). I also know a few people who got hired by them.
Since we're now talking about distribution desktop applications, and not web applications where you control the environment, consider this: You send me your application. It's a .pl file. I'm on Windows XP. How the hell do I run it? Do I now need to go find Perl and download it? Which version? Which release? Should I compile from source or use something like Active State Perl? Did you bundle your own version of known-to-be-working Perl with your application? Java is a bit better in this regard because most systems seem to be able to cope with having multiple versions installed just fine. So the system can happily use Java 6, while your new phone system console can use some flavor of Java 5, and when you're doing Blackberry development and need your J2ME stuff, it's not a big deal. RVM goes a step further here and gives you a way to manage what version you're using in the console and an easy way to select whole gem repositories for your application. You're comparing 2 different scenarios that don't make any sense and you're arguing with proper application distribution techniques and developer freedom. Who cares how many versions of Ruby there are? Do you know how many versions of Java there are? How many versions of Perl? Ever install a newer version of Wordpress on a server running PHP4? I mean pull a language out of a hat and you can probably find version incompatibilities up and down. The ruby community moves fast and embraces the bleeding edge. 4 years is an eternity and the Ruby community should not be bound to the life cycle of RHEL. If you ask me, RHEL and Microsoft's support cycles are too long. I'll do you one better though... I manage a cluster of RHEL 5 boxes and a few Cent OS boxes on Amazon. None of them even have Ruby 1.8.5 installed. I don't even think it came with that out of the box but it was so long ago I forget. If your policies are to use old software with bugs and security issues then let me offer you some advice: Plead your case - old software has vulnerabilities and performance issues. If you get a lot of push back then find a new gig. There's plenty of work out there for talented ruby developers.
pretty neat solution....definitely classy
Install the the `vim-ruby` gem (then run `vim-ruby-install.rb`). If you do rails, make sure to get Rails.vim as well. Someone suggested pathogen for plugin management, but I would go with [vim-addon-manger](http://www.vim.org/scripts/script.php?script_id=2905) instead (if you felt like you needed plugin management... not necessary if you won't be using many).
Your .pl example is apples to oranges for me. If you have a .pl script and I have perl, I can very very likely run your script. Not so true (in my experience) with ruby. I think I'm not conveying my point very well because your java examples aren't really what I'm talking about either. I don't know any non-developer that has multiple versions of Java installed, nor why anyone would want to install multiple versions of java. Let's say I write a blog engine or Puppet or Ruby Ripper, I don't want to have to compile and ship my own interpreter for those apps and I would think that you as a consumer of my app would want to run it on your copy of ruby. Hell, for shared memory's sake if nothing else. &gt;You're comparing 2 different scenarios that don't make any sense and you're arguing with proper application distribution techniques and developer freedom. Who cares how many versions of Ruby there are? Do you know how many versions of Java there are? How many versions of Perl? Ever install a newer version of Wordpress on a server running PHP4? I'm not sure what you mean by the first sentence. I'm also not sure when you're asking about how many versions there are if you are asking about how many versions exist or how many I have installed on my system. I very much care how many I have installed on my system, but obviously I don't care how many versions there *are*. A new version of Wordpress not supporting the former *major version* of PHP is completely fine by me. The distinction I'm making is that ruby 1.8.5 and 1.8.7 are the same major and minor version -- and that, to me anyway, should mean something. Beyond that though, I'm surprised no one can see what I'm saying about ruby being a moving target that seems to move much faster than any other language. I also don't understand why it's such a foreign idea that I'd like some code I write to work for a very long long time. We have perl scripts here that have been working for 10 years across the same number of release versions of perl that we're talking about with ruby. Further, I didn't have to make any changes for those release versions because they're the changes are that minor... the way release changes should be IMO. &gt;If your policies are to use old software with bugs and security issues That's the thing though. All software has bugs, so let's forget about that, but OS vendors -- in theory anyway -- are back-porting security fixes. I think they'll fix bugs too depending upon the severity. &gt;There's plenty of work out there for talented ruby developers. Yea, but what about me? :) Based on the feedback I'm getting from you guys, I'm doing a piss-poor job of explaining my point, so I'll sign off. Thanks for your time and comments.
Try Kate, I've found it to be way better than gEdit. Plus it's got a Vim mode so you can use Vim commands if that's your thing.
Perfect timing! I was just looking for a light-weight RoR editor for my Windows 7 box. As I love TextMate, I was contemplating buying e-texteditor. But I think this may be exactly what I need. Question: has anyone written a rails integration plugin? E.g. to start the dev server, console, run tests, etc?
I would do almost anything for Love Bucks.
You should cross post this to web_design
This is retarded.
Thanks for this! Never knew this existed.
Thanks for your input, will try this as well!
Does it work with Ruby 1.9.2 ?
in erlang, this feature is supported by the runtime. in ruby, it's not. your example is actually just re-defining a global variable. you could drop the global variable if you passed around a binding, but you would end up with an example of a closure. you would get farther to embrace both the dynamic nature of ruby, and embrace the like-a-telecom-boss nature of erlang then fight against ruby like this.
This is not fun, and certainly not "hot-swappable". The ugliness in the code (as you mention) is evidence of its not being "Ruby"ish—if you can make it a lot more clean and still feel like Ruby, then that would be great. 
Rails does something like hot-swapping: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/dependencies.rb
Also, this: http://rkh.im/2010/08/code-reloading
We already have vim.
Pretty sure Unicorn does this.
Yep. Test suite passes on 1.9.2-p0 here. 
Yay hadoop. What can I do with Hadoop practically?
http://wiki.apache.org/hadoop/PoweredBy
hahaha its a real funny gem! I wonder if anyone ever wrote a full app code using it.
THIS SEEMS LIKE THE BEST GEM EVER! &lt;3&lt;3&lt;3&lt;3
I'm most surprised by the fact that it's fully decked out with a test suite and everything.
This is retarded.
glad they picked a non-confusing name. Edit: s/they/you/g
Instead of using your require_local deal, just make sure your project lib is in the load path ($:) and do a normal require. You can even get fancy and glob, bob; rather than require require require require.
Although I applaud the idea of using ruby for fun projects like this, how does this work with maintainability of the application? I'd think that it would be quite difficult in a rails app to me in one file wondering what the hell that method does...
Haha, I like that you're discussing maintainability of code when using this gem. Makes the gem even more entertaining.
whoosh
No, no whoosh. I understand. I guess I should have been more clear: "What was the developer thinking? Why make things harder?"
I was thinking that absolutely no one would use it in any serious context.
actually: still whoosh.
specs are too full of fluff.
I used Exerb a while ago due to problems with ruby2script creating a large amount of temporary garbage due to its self-extracting nature, even when things terminated seemingly normally. Exerb solved that problem perfectly.
Now, explain why `=&gt;` is not a decent syntax?
What is Obie going to do?
I fscking well hope not: "The benchmark I ran on Fixnum (bench.rb) shows that using a fscked method is roughly 23485.707692308 slower. That's 23.5k"
Is it really gone? Link somewhere besides a comic?
http://svn.ruby-lang.org/repos/ruby/tags/v1_9_1_0/NEWS Search for "New literal hash syntax". That's what it's called. Also note that it only works if the key is a symbol. Otherwise you have to use the old rocket syntax.
1.9.1? Isn't the main branch 1.9.2?
Because webcomic …. EDIT: Actually, I particularly like the “Now you don't have to remember anything when switching languages!” argument. How about we switch Ruby to an [sexp](http://en.wikipedia.org/wiki/S-expression)-based syntax, so we don't have to remember anything when switching from Lisp? Or, hey, just `ln python irb`?
This is an old change, since early 1.9. The comic above is kinda late to the party. And as mentioned, the old syntax isn't exactly "gone", the new one is just an alternative and it only works when the keys are simple symbols.
So long Ruby. It was fun while it lasted, but 1.9 is a dog with fleas. Time to meander over to something new. Erlang or Haskell. Maybe Reia.
Aaah! So, if the colon is at the end we have to know that it magically changes the label from a variable name to a symbol? If foo = :bar, what does { foo: 'baz' } mean? { :foo =&gt; 'baz' }, I'm guessing.
Yeah, fuck that. Hash rocket syntax is my fucking left and right pistols.
Colons have been around for a while, but the thing that prevents me from using them is: backwards compatibility and the fact that they are limited to symbols only. But the real deal here is Ruby 2.0's keyword arguments. Does anyone know how are they supposed to look like? I always thought that colons would be used. So it would seem that they interfere with current implementation of hashes. (now you can drop braces if a hash is the last argument to a method, so how to interpret for example 'foo(a:5, b:3)' ?)
"bundle exec" means you are using bundler. if you use the rspec from your global gems, it may not know about your bundled gems and throw errors.
I guess Obie didn't like my joke. 
Yup. When was the last time you used a variable name as a key in a hash constructor?
Until YAML loads data with keys as strings, I will not bother (even if I would like get rid of the rocket syntax). The same situation is while working with MongoDB. Somehow symbols for me look like more trouble than it is worth. The proof? So why things like HashWithIndifferentAccess exist?
I did not have that problem. What would RVM have to do with that? Wouldn't that just be a problem with the version of Ruby you were running?
I'm not sure, but removing and rebuilding the ruby install solved the problem. Maybe I'm just crazy - or unlucky. :)
Got it down to 20x!
also http://grease-your-suite.heroku.com/#1 (use the arrow keys to change slides)
jruby does the trick there.
what about when the hash key isn't a symbol?
If you're new to Rails, I've decided that http://railstutorial.org/ruby-on-rails-tutorial-book is among the best places to start, if not the best. He starts you off in RSpec off the bat (and Git, pushing to Github, deploying to Heroku, utilizing factories, and much more). Really nice to learn all the "extras" from the beginning, tied together by one tutorial instead of having to scavenge for independent tutorials. 
if you like capistrano, check out chef! if you're setting up a bunch of machines, it makes things supersmooth.
every day i thank the universe for the miracle of rails
CSS is pretty awesome once you get its zen!
Pretty much defines my development career as well. Add heroku to the euphoria though! Rails3 really put everything over the top for me. It's such a great upgrade. The rails ecosphere is phenomenal now.
Hey, there's nothing wrong with SVN.
After some grepping and some git blaming... 2010-12-04 2010-09-26 2010-09-23 2010-05-29 2010-05-21 2010-02-15 2009-07-02 2008-09-03 
Branching/merging can be, uh, less than ideal in SVN vs Git.
Wish it had variables and inheritance though. Sass to the rescue!
It doesn't really matter what you use on the front end. Passenger and Unicorn have been rock solid performers for me. If you run out of processing power with 1 server, then buy a second and load balance them. If you can't buy another server then you need to optimize your code. There is no magical scaling Rails sauce. You gotta figure out what your application needs and then build your infrastructure around that. Personally, I really like Passenger w/ Apache as well as Unicorn with Nginx. Either of those work well.
My understanding is that that will be the calling syntax, and it will still be the same as passing a hash (the internal mechanism is still this) except the keys will be "expanded" to locals automatically by the method according to how its parameters are defined. The way it looks in the def is a little weird last I saw it, e.g. def scan (limit: max) where limit would be the keyword and "max" presumably the local it magically expands to. I'm not sure if you can do (limit: limit) to make it feel cleaner or if there's a shorthand for that, but it's still early days I guess.
This alternative syntax only applies with symbol keys. You still use the rocket for everything else, and can do so for symbols as well if you prefer it (or for backwards compatibility).
I really enjoy CSS and HTML because I never have to look anything up! Which I think is funny because I feel like CSS/HTML involves a lot more memorization then C/PHP and the like. And I am horrible at memorizing things...
Memes in my sub-reddit?
It's more likely than you think.
Those slides use [slippy.js](http://seld.be/notes/introducing-slippy-html-presentations) and use the arrow-keys for navigation (took me a while to figure that out).
Looks like there is an [open issue](https://github.com/rspec/rspec-core/issues#issue/191) regarding the use of 'bundle exec' and in the future we'll be able to disable it.
What's wrong with C++!!!??
if you want to scale your site out and the ruby part of your rails app is too slow, you can try optimising your caching or getting more frontend nodes behind a decent load balancer. More often than not, however, I've found my problem to be around how i'm querying the database and what indexes I have in my schema. 
I always liked everything. C, Perl, assembly, even Java and PHP are better than not programming at all. The creating part is fun no matter what. I still really like tools that stay out of the way a lot, especially Lisp and languages influenced by it such as Ruby and JavaScript. Other dynamic languages like Python. Those are my gotos for day to day work. Sometimes Cocoa which is fairly nice; Xcode has just enough completion to make it bearable.
passenger standalone uses nginx so I don't think anybody is going to be able to beat that.
20k hits per hour? Thats pretty easy for most applications. That only comes out to around 6 requests per second. Keep your DB requests to under 20ms and your view render times to 130ms or less. Unless your app is doing stupid amounts of data processing, has overly complicated views or the database is improperly setup/has bad indexes/etc, you should be able to hit that number with a mere gigahertz and a gigabyte or less of RAM. If your database is being hosted on the same machine, just make it two gigs of RAM and a dual core processor. Then again, the scaling solution is horribly dependent on what is actually being scaled. It's far far far to variable to be worked out to a simple solution. If scaling were that easy, many engineers (including myself) wouldn't have a job. Beginners lesson: Avoid Apache, identify the chunks of your code that do the most heavy lifting and try to make them as efficient as possible, caching is your friend, don't run your database on your web server unless you can't avoid it and don't let your server get swappy.
For the record, I actually enjoy/have enjoyed all these other technologies. Like you say, programming, creating, and problem solving is always fun regardless of the medium. The comic is exaggerated to express how the combination of things in the last panel just "feel right" to me in a way the others haven't, and how I'm happy to have finally found the tools I want to be working with long term.
Try watching this great series of videos covering scaling rails: http://railslab.newrelic.com/scaling-rails Also as mentioned by joshbydefault, avoid apache. Try using nginx with unicorn.
So you're looking for approval for your choices, right? Here you go: If it works for you, it's great.
You never had to look up anything for HTML/CSS?! Jesus, I spent way too much time reading the W3C specs..
Yes, you should definitely check out [SASS](http://sass-lang.com/). It's got more than just inheritance and variables -- when you pair it with Compass, you also get lots of sexy mixins, which makes writing code way easier.
You accidentally his second sentence. Edit: No longer relevant due to edit.
To be honest PHP (and to a lesser extent, Java) really do seem in limbo between something like Assembly/C and something like Python/Ruby and is overall not a success...
I meant it more as an enthusiastic agreement, as in "yes, definitely check out Sass!".
Oh no you've got me all wrong! I used to have to look stuff up like crazy! But for some reason CSS sticks to me but I find myself looking up stuff all the time for other languages!
Troll!
You should try [this](http://i.imgur.com/0oTyD.png)
I don't even know what capistrano is. Are you sure it's not the name of an italian food?
Me too, except text-wrap. I can never remember that one.
It's a pita, but for the areas where it's good, there really isn't much of an alternative. Just know how to make it suck less.
It's an automated deployment tool. I have one 10 line deploy.rb file in my project. Anytime I make an update: $ git push $ cap deploy Magic!
It's a fairly unpleasant language to program in. Yes, you have more control and can generally do more things with it, but the trade-off is that you end up wasting time and energy on side problems like object ownership (memory), cross-platform differences, and general nonsense like string representation instead of producing the code you set out to write.
Full disclosure: I work at OMGPOP, and love it. If anyone has any questions please ask!
That's awesome. I remember similar feelings when I started writing Ruby.
"Strong programming knowledge across several languages and platforms including ActionScript 3, Java and/or C++." Based on this and other job requirements, it doesn't actually seem like you're looking for a Ruby programmer. "solid understanding of algorithms, physics and math." These people tend to congregate around FP languages.
I had no idea that either stub_chain or mock_model even existed! Great deep dive into rspec.
Oh, I see. Carry on, then.
Command-F : no ruby on page. ??
Well, they can love Ruby engineers and be hiring. To be completely fair, cwholt did not say they were hiring Ruby engineers :)
I've been coding Ruby (mostly in Rails context) on a Mac for some three years now, and yes, it is awesome. But the thing that really SHINES in your graphic is GitHub. Find a bug, fork the authors repository, poke around until you find the source, fix it, test it, commit. Send a pull request to author to get that fix into the next release (that automatically appears for review to anyone interested, by the way), in the meantime use your own fork in your application. Next day, receive email that your fix is going to be included in the next release. Your project is already fixed, the bug won't float up next time you refresh the versions of dependencies, you have probably saved someone else the effort, and maybe even made a bit of a name for yourself in the process.
Are you actually hiring Ruby developers?
This is for "Game Developer" I image ruby developers would look at the other options.
Looking for any interns? I'm a CS student in hoboken looking for something to tack on the resume, while also learning and having a good time.
Overview OMGPOP is looking for a talented software engineer to join its backend team. Our vision is to create the most engaging social games in the world. To achieve this vision, we are developing world-class backend, frontend and analytics systems that will empower every game developer, artist, and producer in the company. In this role, you will work with massive traffic, challenging problems and cutting edge technologies. Responsibilities Design and scale key backend systems for OMGPOP games and other applications Evaluate new technologies for use across games Develop a solid platform to support tens of millions of users Work with partners to expand the reach of OMGPOP games across the internet Work closely with the game studios to bring new features and abilities to upcoming games Be a student of emerging social games on Facebook Requirements BS or MS in Computer Science. Very strong software design skills. Expertise with scaling applications. Scripting Language Experience (Perl / Python / Ruby) required, experience with Ruby is desirable Compensation Excellent pay and benefits, including medical, dental, vision, 401k, and commuter Work with highly motivated and intelligent colleagues passionate about games Your choice of computer, monitor, headphone, and keyboard setup Abundant, democratically chosen snacks, drinks and sustenance A relaxed working environment with regular social events Other information Contract type: Full Time http://omgpop.producteev.com/j-1-49
yes. our entire backend is ruby -- we're actually pretty proud of it, and VERY pro-ruby. http://omgpop.producteev.com/j-1-49
Sometimes, but not right now. Send your info over: cwh [at] omgpop.com and i'll see what we can work out. you interested in ruby at all?
we *ARE* hiring ruby engineers.
Will do once I get something together, I was just curious. And yep I'm a total python geek but I love ruby almost the same (it's just so beautiful)
word. we're not stuck on people who only know ruby, a couple of our other backend dudes came from python backgrounds.
Oh, very cool
update: Ruby specific. http://omgpop.producteev.com/j-1-49
Not sure what's going on there. Try running IRB from the command line with those commands to see if ruby has been installed properly. 
2nd. copied pasted from that page into irb, worked fine. http://1strule.org/2/Screen%20shot%202011-01-07%20at%207.57.00%20PM.png
oh.. is that IN ruby.exe? try running "ruby p001hello.rb" from CMD not from within ruby itself. ruby is trying to interpret the literal "ruby p001hello.rb" as a ruby command.
thanks for the reply! but I'm such a newbie here that I'm not even sure what you mean: do you mean for me to open up a dos command prompt, and try to run IRB? (what does IRB stand for?) and then once IRB is open, type: # p001hello.rb puts 'hello' p 'hello' print 'hello' into IRB? sorry to be this useless, but I have to start from somewhere!
Yep, think this might be the issue. What he means by this is.... Click start-&gt;run and type CMD, then hit enter. This will bring up a DOS prompt. Then type ruby and the name of your file. 
IRB stands for Interactive Ruby Shell. It is very useful.. and as a beginner you should take the time to learn how to use it. if you run irb, simply paste the code in, and you should see the expected output.
Its okay man we all have to start somewhere. Anyway I think cwholt has solved your issue 
yes, that was in ruby.exe when I try and run the program through CMD I do this: chdir c:\rubyprograms\ ruby p001hello.rb and I get the following: "'ruby' is not recognizable as an internal or external command operable program or batch file" 
in that case, your path isn't correct. did you use the ruby installer as specified in the instructions? http://rubylearning.com/satishtalim/ruby_installation.html all you need to do is add the dir of the ruby binaries to your path and it should work.
scratch that - nailed it! i had to start a command prompt with ruby (that apparently was installed ) lol I'm dumb
I've had problems with passenger in the past (~1yr ago). Now I rely on nginx + unicorn. Maybe things have changed, but I've been jaded by the sudden roar of ~3000 people at a live event as passenger melted down.
Yeah. But compare SVN to CVS or RCS before that. SVN is actually usable - and the learning curve is quite a bit shallower for SVN over git. Don't get me wrong. I use git exclusively for my work/personal projects. It's been a bit of a nightmare getting all of the non-programmer types up and running with it though. 
Hey if you are interested in Ruby + SketchUp and other cool things to do with you industry, you should check out what the Ennova guys are doing (http://www.ennova.com.au/). I know a few of the devs and it seems to be fairly similar to what you are describing.
I really hope that they let 1.8.x die in a graceful manor. Ruby 1.9.x should be the way forward and 1.8.x should only get minor security updates. I have mixed feelings about 2.0 but if we can use it to get off of the GIL then I think it would be worth it.
manner*
Yeah, Smalltalk gave me an idea for a pretty awesome tool. Now we can even test with Doom guy!
You might want to try **Windy** for partitioning your windows. http://projectwindy.codeplex.com/ 
Getting to know the Ruby Standard Library seems related. No video though. http://endofline.wordpress.com/2010/12/
There is [Rails Casts](http://railscasts.com/) for rails obviously, don't know about anything like that for pure ruby.
[Ruby Koans](http://rubykoans.com/) are helpful. 
get rid of the GIL, add tail call optimization, remove some of the stack trace stuff that makes ruby slower than it needs to be, add optional type checks. 
&gt; How about we switch Ruby to an sexp-based syntax, so we don't have to remember anything when switching from Lisp? Well, for one, Scheme (a Lisp) has =&gt; in `case` macros, but that's besides the point. If you want Ruby-ish Lisp, [Nu](http://programming.nu) is probably what you want.
&gt; If you want Ruby-ish Lisp … It's not what I want (though nor am I opposed to it). Rather, I was mocking the idea that all languages should migrate to the same syntax, so that one wouldn't have to change anything when switching. (Next the same programming paradigm, then the same execution model, ….)
That's what I thought (that you were being facetious), I was just pointing out that we're there already, esp. when you consider Nu. 
Not 100% sure if this answers the question you are asking, but the value of `self` in an `initialize` method for an object will be equal to the instance that's being initialised when that method is called. So if your initialize method is aware of the presence of a `world` instance (e.g. as a parameter to `.new`), you should be able call something like `world.character_array &lt;&lt; self` to add the instance to an array. I'm not sure I'd recommend this over a 2-step process where the character is created first and added to some world afterwards, but still, if what you need is access to the instance during object creation I think `self` is what you need.
There's an issue in your overall design: Character shouldn't derive from World. Inheritance is used for "is a" relationships, but a Character is not a type of World. Ignoring that, here are two standard approaches: **1. A factory in World** If it's ok for World to know about Characters, then you could add this method to World: def create_character(*args) character = Character.new(*args) @characters &lt;&lt; character character end You could also have a similar method outside of World, that takes a World as an argument. **2. Character's initializer adds itself to the world** If Characters can know about Worlds, and don't ever exist outside Worlds, the Character can add itself: def initialize(world) # misc initialization here world.add_character(self) end
Those are excellent examples and thanks to your clear explanation I now have a better grasp of the overall concepts. I think this will help me beyond just this one problem. Thank you. 
The concept of using "self" at the right times has eluded me since my classes on C++. This gives me a good direction for studying more into Ruby. Thank you. 
unfortunately not at this time, no.
There's [tryruby](http://tryruby.org/) but it's not a screencast series, it's an interactive tutorial.
The question is, of course, why do you use semicolons in JavaScript in the first place.
DHH had some good points here (particularly regarding guidance vs enforcement). I enjoyed the Larry Wall quote. "Freedom patching" was humorous. The signal-noise ratio was way to high; could have done without the digressions on marijuana/junk food/etc.
And it's down.
Seems to be happening a lot lately.
Good but too many in-jokes for something trying to sell Ruby ostensibly to non-Rubyists. I also didn't appreciate the slam on Zed Shaw.
Zed should be slammed. He is a psycho.
I watched this last week, and to be honest, the only reason it's tolerable is because I happen to agree with his opinions. But objectively, he turned what should have been about Ruby into a political soapbox that went on way, way too long when its relation to Ruby was already very clear. Essentially, it was a circlejerk for liberal Rubyists, which like I said, is what I happen to be. But to anyone else, I didn't see it as very effective.
Good read for you is the [Gang of Four](http://en.wikipedia.org/wiki/Design_Patterns)
The obsession with location when finding programmers is the first problem. Hiring telecommuters will place emphasis on quality code, not busywork+meetings, and will probably be cheaper to boot.
My brother just moved to Chi-town and I'm looking to follow suit. Sounds promising, personally :)
Communication happens faster + better when it's face-to-face. It doesn't need to lead to busywork+meetings.
Ah, but it always does. *Always*. The pressures are simply too great. If it hasn't yet at your current workplace, it will eventually. Furthermore, having your coworkers nearby for your questions might be convenient, but the person you've interrupted has to get back into the flow, which can take quite some time, far more than the few minutes for your question.
wish I could find something like that, I'm stuck doing .net when I love ruby because of no ruby jobs here locally in mid michigan, so I do as much ruby freelancing as I can to keep happy
Untrue. 3 years+ on at my company and meetings + busywork are almost non-existant. As for flow interruptions, questions are preceded by an IM which can be ignored, minimizing the disruption (making it much like online in that regard). Also, it's incredible how much value comes from informal discussions during lunch, etc. 
I can't agree with this enough. There is a lot of knowledge/information that is conveyed informally just by having people in the same room.
Don't know if I'm doing things the "Ruby way". Let me know what you think and where there's room for improvement! So far I think ruby is really cool, but feel like I need to learn rails before I can really use it.
I wish telecommuting worked well for everyone, but my experience suggests that as projects grow communication becomes more of a bottleneck than raw code does. Telecommuters can code well, but it is harder to communicate well with them. There is a lot to be said for the value of face to face communication.
&gt; I also didn't appreciate the slam on Zed Shaw. Yeah, man. Zed would never slam anybody like that.
The Chicago Tribune ran an article similar to this back in November. It's definitely a good time to be a ruby developer in Chicago.
It really isn't just Chicago, it's hard to find good Ruby developers pretty much anywhere, as far as I can tell.
Many software developers have adequate bandwidth for webcams, voice chat, and an internet white board app. That's all the face to face you'll probably need. My organization uses skype pretty exclusively.
Yup, these are all great, and the technology we need is coming along quickly. It's still not perfect though, and (at least for the next couple of years) I'm going to prefer working on site whenever I can.
Pick an open source Ruby project and start learning and contributing. 
Some Ruby-ish tips: The lines for i in (0..(array.size-1)) Could be redone like this array.size.times do |i| Generally you won't see a `for` loop in Ruby, but instead you'll use one of the many iterators. The padding code could perhaps be replaced with the `ljust()` method in the standard Ruby library. For example: "hello".ljust(40) Will produce a string "hello " For a fun experiment with Ruby idioms, you may be able to do away with the functions you define altogether. Try defining a proc, instead of a method. pad = Proc.new do |i| i.ljust(15) end Then you can call the proc in a more OO way, using the `map!` iterator, which loops over an array object and modified each element: day.map!{ |d| pad.call(d) } Or, if the padding is as simple as just calling `ljust()` on each element, you could have: day.map!{ |d| d.ljust(15) } I'm not a super Ruby-user myself, so these tips may be bad form, but some ideas nonetheless :)
Oh well, I'm just going to throw a possible project you could take a look at: http://www.h3rald.com/glyph/ It's neither fancy nor famous, but if you're interested in publishing (e.g. Your thesis?), I am desperately looking for some contributors! Doesn't have to be for life, but any little help is appreciated! :-)
Thank you h3rald! This was definitely something like what I was looking for. I see the documentation for your project is awesome, so I will look through everything in the next few days. 
I think crate was a great idea that got abandoned a while back. Maybe you can take a look at it. You can also see if you can improve rubyscript2exe which is nice except that it does a full extract every time you run it. It wouldn't take much to have it extract the code just once and have it run much faster subsequent times. 
That's awesome! I love ruby's iterators but need to learn/remember them. That ljust() function looks like it's just what I need. I'll try some of these things out tonight! Ruby defiantly feels a lot different to me but in a good way. 
Fair enough. I was sold on Zed due to [this blog post](http://www.zedshaw.com/essays/programmer_stats.html) and due to his work on Mongrel and seeing him talk. I know he sort of slammed the entire Rails community for some reason, but I just assumed he had gone through some inordinate amount of time not getting laid and just needed to vent. (I say this as a former Psych major familiar with misattribution theory as well as a person who has watched himself sometimes act strangely when out of touch with humans for too long.)
So wrong. I am sure that in a lot of companies it does happen. As dennyabraham said, it's a function of the work place culture. I'd say it's also related to the size of the company to an extent. I ran a ruby consultancy for the last two years and we always hired locally or relocated if we could. The improvements in code and programmer happiness were substantial. &gt; Furthermore, having your coworkers nearby for your questions might be convenient, but the person you've interrupted has to get back into the flow, which can take quite some time, far more than the few minutes for your question. Not necessarily true, but definitely a factor. This is also a factor of culture and the work place dynamic. A small team that works well together will know when to ask questions and when to wait. If your pairing (as many Ruby shops are increasingly doing), then you always have one person with whom to discuss without throwing off their groove. Furthermore, it's worth looking at the total gains of being able to ask a coworker a question, rather than the inconvenience to that employee. For instance, while your question might take 3 minutes, and it might take them 10 minutes to get focused again, it may save the questioner an hour of his own time. The benefits there are completely obvious.
If this had been around a year ago, Zed Shaw might have kept using Ruby.
Oh yeah. He isn't evil or anything. It's just boys being boys, i guess. And Zed did intentionally play an 'angry' character as an artistic experiment. Reality and act just sort of got blurry after a while. But I found DHH reaction moderately mature considering everything. I doubt Zed would disagree or take issue with the 'weird-angry' label. 
I'm a good ruby developer and I'd love to have a job that even used 50% ruby. I especially love Rails... but seems like you have to live in a city where there's a lot of ruby work to get the opportunity. I see 100s of openings for .NET and Java here and I may have to even settle for a PHP job, and Java's not entirely horrible. I've already done years and years of C# code and I'd love to do more large scale ruby work.
More companies need to embrace remote workers. Not everyone can pick-up and move to Seattle, SF, Chicago, Boston, NYC.
Setting up an XMPP chat server helps a lot. [OpenFire](http://www.igniterealtime.org/projects/openfire/) is probably the easiest to configure and administrate. Group the users into Teams, enable shared Groups, create a few Channels and make sure people auto-join them. This way you're always in contact with the other team members.
the proejct isn't bad, but that little '3' in your nickname looks fucking stupid.
Definitely. I just moved FROM Chicago -- I simply don't want to live there, but the companies I worked for would love to have me back. Even as a lead programmer and project manager they loved me, yet refuse to do remote work on any scale. It's bizarre. I imagine the world is eventually going to be forced to embrace remote workers since the fossil fuel economy can't support burning gallons of gas a day for every single worker once fuel costs become even higher. Maybe not, it'll be interesting to see.
lol nerd
Ooh, I want to take a look at that too. I could use something like that.
That hurts! :-( Well, can't blame you really. But I've been using the nickname and the domain for years, so I'm not gonna change it. *Normally* people get past that though... 
Shameless plug of my little Rails3 site - https://github.com/kimptoc/Bingo-Caller *ducks*
I think that the numbers for the size of the terminal etc should be moved to meaningfully named variables. Comments and code can get out of sync and I think that stops that from occuring. Just my personal feelings on the matter.
The major new feature is Ruby 1.9.2 capability, which brings JRuby fully up to date. The best new feature (IMHO) is the built-in profiler. Congratulations to the JRuby team!
Many thanks to the JRuby crew!
Chicago, land of highways, tolls, wind and cold ass weather. No thanks.
Jruby is one impressive project. Sometimes I think it should be the official ruby. I also like that you can bundle your whole app as one jar file and send it to somebody. 
Very cool. JRuby seems to be gaining a lot of steam and attention. Can't wait to see what happens in JRuby 1.7 with Java 7 and invokedynamic.
Related to JRuby, I've been playing with Torquebox recently. An amazing layer on top of JBoss to host Rails &amp; Rack apps. Really cool to have ruby, but all the power of the whole app server.
My statistical library: http://ruby-statsample.rubyforge.org/ I need help to optimize many algorithms, including translate some to C.
&gt; Sometimes I think it should be the official ruby. To make Ruby development (not deployment) 100x slower? JRuby is great for production use but it is not as pleasant as MRI to develop with.
http://kschiess.github.com/parslet/ Please don't post blog-spam.
I forged your project on github, but couldn't find any issues or bug reports. Would you like to email me what needs to be done/modified/optimized? I will try to take a look at it when I get a chance. My contact info is in the OP.
I've been an active member of the ruby community for over three years now and I only recognize about 1/3 of these names. I cannot recommend this list.
Does anyone have a good link to setting Windows up in VirtualBox for Mac?
It's not rocket science: install Virtual Box, pop in your Windows disc and boot newly created virtual machine - the rest is just like a regular Windows installation.
Thanks. I will send you the feature to implement now.
Sounds surprisingly similar to Rocket Science to me.
2010 edition, or Mac edition? I'm confused :P EDIT: I too am a Ruby developer. My tools are similar: * Firefox - It's compliant. That's enough for me. * Vim - Religion. Don't go there. You can have Textmate, but I'll keep my Vim. I do use the Molokai theme, however, which I believe was inspired by a Textmate one. * Awesome - I don't use Divvy, although I have looked into it when I ran a mac. I use awesome for the same purpose. * Git - Cultures are different. The use of GitX is respectable, given the mass amount of the community that uses ruby also uses git. +1 for this, mine is just the cli version. Present.ly, however, is interesting. I find that the ability to bounce things off of people, even if they don't say anything (like today, where a coworker stared at me blankly while I discussed how to effectively test an app) is an invaluable tool. Skype (or any instantmessanger) loses this. Present.ly is interesting. I don't know if it would work as well, but interesting none the less.
While I used to use and enjoy TextMate, discarding two immensely useful and effective text editors (although some may want to qualify EMACS as more of a "computing environment") because they don't fit in with the Cocoa environment is akin to dumping your girlfriend who cooks, cleans and doesn't complain when you forget to shower because her shoes don't match the new spoiler on your Honda. Also, Ruby is not mentioned once in the whole article. ಠ_ಠ
Why awesome as opposed to xmonad or others?
It works great if you are using netbeans or rubymine.
It was the easiest to get up and running with, they have a windowing mode that I absolutely love (awful.layout.suit.magnifier), and the config file is in Lua. I tried a bunch (subtle, xmonad, dwm, etc) and this was the first thing that really clicked for me. I do, however, miss dmenu.
is ruby easier on Mac? I doubt I'll switch over, but it seems like everyone is building websites on mac these days...
http://www.gnu.org/licenses/gpl-faq.html "Does the GPL require that source code of modified versions be posted to the public?" The GPL does not require you to release your modified version, or any part of it. You are free to make modifications and use them privately, without ever releasing them. This applies to organizations (including companies), too; an organization can make a modified version and use it internally without ever releasing it outside the organization. But if you release the modified version to the public in some way, the GPL requires you to make the modified source code available to the program's users, under the GPL. Thus, the GPL gives permission to release the modified program in certain ways, and not in other ways; but the decision of whether to release it is up to you. "If I only make copies of a GPL-covered program and run them, without distributing or conveying them to others, what does the license require of me?" Nothing. The GPL does not place any conditions on this activity. As far as your own code goes you can do whatever you want with it. It is your code as long as you don't copy and paste other peoples work into it.
What is the point of this?
Thanks a lot for your reply! So internal usage within an organization does not constitute "distribution" (or "conveying" as they call it in the GPL3 license). So, for example, I could make my gem available *internally only* without ever releasing it to the public, and such gem can depend on GPL3-licensed gems, right? In this case, however, I HAVE to use some form of proprietary license for my internal users simply to prevent the distribution outside the company, right? Now, for some more questions: 1. What if I bundle my gem and its dependencies via RubyScript2Exe into a single executable file (or I distribute the gems myself internally, along with Ruby itself). Can I "license" the whole bundle with a restrictive license to prevent distribution outside? Can I bundle non-GPL-compatible libraries within the same internal application as well? -- This may be trickier. 2. Say that my company allows me to release portions of my application as open source code, can I release my gem (*only* my gem) under a non-GPL3 license (say Apache 2.0), even if it *depends* on GPL3 gems? This also applies to personal projects: do I have to make sure that the licenses of *all* my gem dependencies are compatible with each other and the open source license I chose for my project? -- I doubt it as ultimately it's *the user* who downloads the dependencies, so there's no distribution of other people's code in my gem, am I right? 
About.com? Really?
If it's work for hire, the company owns the copyright, and nobody has license to distribute it at all. It's all a moot point - you don't need a license at all, if you're not going to distribute. Internal users would never need any license - it's like licensing yourself to use your own arm. It's yours. You can bundle whatever you want with it. I can't speak to your last question, but your first question and restatement don't make much sense - you're overly worried about license issues.
&gt;What if I bundle my gem and its dependencies via RubyScript2Exe into a single executable file (or I distribute the gems myself internally, along with Ruby itself). Can I "license" the whole bundle with a restrictive license to prevent distribution outside? Can I bundle non-GPL-compatible libraries within the same internal application as well? -- This may be trickier. Compiling the code or using a packager like rubyscript2exe does not absolve you of the license and it does not give you the right relicense the product. Think of it this way.... You can't take windows, put it in a tar file and sell it as your own. &gt;Say that my company allows me to release portions of my application as open source code, can I release my gem (only my gem) under a non-GPL3 license (say Apache 2.0), even if it depends on GPL3 gems? It depends on how it "depends" on the other gems. If a judge rules that your code is a derivative of the other gems you have to release under a compatible license or refrain from releasing. The concept of derivative can be tricky so your best is probably to release under the GPL if the code you are using could be considered to have derived from the GPL. &gt;do I have to make sure that the licenses of all my gem dependencies are compatible with each other and the open source license I chose for my project? -- As a general rule you don't (IANAL) as long as you are not shipping those gems yourself. For example let's say your gem depends on the will\_gpl gem. You can release your gem under any license you like as long as you don't ship will\_gpl. You can put the gem in your Gemfile and let the user install it. You can list it as a dependency in your gem and let the user install it. If the user installs it then you are not obligated because you are not distributing the code. 
Hashes, brand new in the world of ruby ?
Yeah, I really don't think the political slant was appropriate for a conference about a programming language. Even when I agreed with him it annoyed me because this kind of thing doesn't need to be politicised, when I didn't agree with him it was just nauseating to be told what "my" community is about, what "my" values are. Honestly, I don't think anyone goes to RubyConf to hear a Dane talk about how Rubyists Support Drug Legalisation and Oppose The TSA or whatever fictional consensus he dreams up based on the fact that TDD is popular. Those who agree with his stances can probably deal with listening to it but it's not interesting, it's not related to Ruby, and it's needlessly offensive and divisive to anyone who just so happens to have different political beliefs.
Does anyone know if there is an equivalent for python? EDIT: found it! [https://github.com/gregmalcolm/python_koans](https://github.com/gregmalcolm/python_koans)
If I'm typing fast I miss the &gt; at least a few times. This is a welcomed change.
It's easier doing ruby development on a unix based system. The Mac is prettier, and has IMO better development tools! I can't live without textmate and espresso. 
I'm in Sweden. It's impossible to find a ruby job. Most, if not all software/wev development companies rely on php or c#. I wish I lived in the US:(
Why not just 1.9.x?
Disclaimer: I'm a Pythonista. This just seemed the most fitting subreddit to post this. Please don't lynch me.
I'm not stating which is better, just saying that there exist other solutions as well. i.e. Sphinx.
Oh, let's just start with http://tinyurl.com/6cl8lsw for issues with encodings in 1.9.
1.9 has much better support for encodings than 1.8, so there's really no need for it. UTF-8 support in 1.8 was bolted on and worked accordingly. This library is attempting to work around that for some subset of behavior.
Very cool!
Is he suggesting that the DataMapper version is more concise? If he hadn't spread the call to AR::Base.establish_connection across three lines, both examples are exactly the same amount of code.
that does seem dumb doesn't it?
Looking for some feedback on this guide from people with more solid backgrounds in programming than mine. It's intended for designers who are trying to add styles to RoR applications. Thanks!
&gt; Is he suggesting that the DataMapper version is more concise? I don't think so. I think he just included two ways for comparison.
Looks about right for someone completely new to RoR and Ruby.
Beware of believing the outdated rants against 1.9.0. With 1.9.2, I stick # encoding: UTF-8 under the #! line at the top of my Ruby file, and everything pretty much works, unless I hit a malformed file. Which is pretty rare, and mostly happens because of legacy data written by Ruby 1.8 or some other language that doesn't deal properly with UTF-8.
HAML seems very noisy to me, where as [Slim](https://github.com/stonean/slim#readme) seems a lot more succinct. I like @wycats original comments about ditching RJS and just learning to write clean JavaScript. XHTML and CSS are relatively simple to work with.
Whoa, haml and slim both look really cool. Thanks for the rec!
Yes, there are many other solutions, this is just a tutorial about one of them, it its by no means a comparision between full text search solutions. Solr is well known, well documented, has lots of applications using it and offers a lot of features that other tools do not (like live updates, custom filters and things like that). But every case requires thinking and trial and error, if you're building a one of search solution that doesn't require updates, going with Sphinx might be simpler and faster. I'm not sure why people really need to fight about "which tool is better than the other", they should spend time thinking about WHEN a tool is better than the other, there's no one single best solution for all needs.
All I'm suggesting is that my attempt at a short AR preamble for one-off scripts and demos seemed kinda long, and I hoped someone would show me how to trim it down. As it happens, someone did - see the post update.
P.S. Suggesting that using 1 line instead of three for that connection statement would make the code "shorter" seems a bit silly to me. By that logic I could have shortened the whole example to one line with judicious use of semicolons. I was looking for a version that reduced the actual token count of the code.
I would enjoy hearing your explanation of this Quine.
It... doesn't make monkey patching feel any safer. It is nice that you can see where a method comes from, but unless you are willing to check each standard library method before you use it, and then correctly re-alias the methods (and thus write much uglier code) does this really have much of a practical application? It lets you see that you're monkey patched but it still doesn't fix being able to use differently monkeypatched libraries together, for instance. On the other hand, I liked this idea http://timeless.judofyr.net/refinements-in-ruby
What fun is safe monkey-patching?
In most cases this is overkill and MySQL or PostrgreSQL can handle full text searching for you, without having to run and maintain another service. http://dev.mysql.com/doc/refman/5.0/en/fulltext-natural-language.html http://www.postgresql.org/docs/9.0/static/textsearch.html
Yeah, I think he probably could have picked a better word than safer. What he's really doing is making his monkey patches more discoverable, or maybe transparent.
OMFG its fucking awesome. /me have never seen a quine like that. Explain! :)
More or less I meant why continue to use 1.8.x branch? The ruby developers recommend 1.9.2+ for all new projects
Don't forget to mention that MySQL full text search only works in MyISAM, can only return results if the matches are LESS than 50% of the indexed data and you usually have to tokenize/filter/transform the data by yourself. Oh, there's no faceting either. Summarizing, if you really need full text search, don't waste your time with MySQL full text search support, just go for sphinx if you think Solr is overkill. Never used PostgreSQL text search support, though. 
Agreed, I was just trying to figure out what you could've meant. It wasn't clear why the DataMapper example was there.
"My biggest concern with modules is that they break the concept of "Everything is an object"" ............................how exactly?
&gt; I don't like inheritance. It doesn't fit into my model of thinking about object oriented design. Stopped reading right about there. WTF? 
This post would have improved ten fold with code examples.
Inheritance is very useful in when types resolution is done compile time. For dynamically linked languages such as Obj-C, ruby, python and such, it become much less of a big deal, since any object that fits (duck typing), will do the job. So in such a programming environment, this heretic comment about oo design makes quite a sense. edit: Ok, that said, i re-read the article, and it's still quite a piece of shit
I understand your points and none of that is news to me, and praise be to duck typing, but I still find it ludicrous that anyone could say inheritance doesn't "fit into my model of thinking about object oriented design". Inheritance even as applied in dynamically linked languages makes a lot of sense as far as creating readable, well-structured, extensible, and plain good code.
Sure, i let caught myself by the fact that many people over uses inheritance due to a typed language past and habits, and made the common error of misreading your comment based on that bias. But check out the edit of my comment while you where typing that answer, i think we will definitely agree.
I concur. :)
&gt; My biggest concern with modules is that they break the concept of "Everything is an object." Inaccurate. Modules are definitely objects, since everything in Ruby is an object. Consider: Foo = Module.new { def foo; "invoking foo!"; end } Foo.name # =&gt; "Foo" The author may have meant that they aren't _classes_, though `Module` itself is an instance of the class `Class`. But that's okay; lots of things in Ruby aren't classes. The literal "5" is not a class, for example. This fact does not make anything inconsistent.
The credit for the awesomeness of the Quine is all due to Yuske Endoh and the original quine. I merely studied it to be able to change the data :) I'm working on a redaction on how the data are stored in the quine (there are quite obfuscated... I don't know if it's for compressing them or to obfuscate them...) and some trick he used to make the quine possible (mainly ruby tricks to make it possible to insert some strings while executing ruby statements)
&gt; The limitation is that a class can only inherit from one base class. Python is better here, allowing multiple inheritance. Matz didn't include multiple inheritance for a reason, because it's too complex. &gt; You can include as many modules as you want into one class. That's kind of a work around for the lack of multiple inheritance. It's not a work around, it's how you're supposed to do it. class User attr_accessor :buyer def add_to_cart(product_id, quantity) buyer.add_to_cart(product_id, quantity) end end User.new.add_to_cart(params[:product_id, params[:quantity]) So the method is not related to the product or user, but to a cart belonging to the user. What about `user.cart.add` ? No wonder why he doesn't like inheritance or modules if he organizes his code the way he does…
can anyone make this thing run infinitely? so far a good single turn script is: for i in {0..360}; do clear; ruby qlobe.rb $i; sleep 0.05; done; 
_derail_ Readable as in "easy to understand" or readable as in "prettily formatted and under 80 cols wide"? 'Readable' is one of the mushiest and least clarified words in discussions of coding methodologies/conventions. Both can be true as a description of 'readable' source code, but when meta-programming and(or) code generation is involved "prettily formatted and under 80 cols wide" is like a big 'FUCK YOU' from the people who wrote the code, broke it into 12 different files and then didn't comment it. _/derail_
I was never subject to any such confusion in all the years I have been programming, to me it has always meant, in your words, code which is "easy to understand".
ATM this tutorial just shows how to setup rails with some gems. No development yet.
This is a pretty ambiguous question I don't know what I am suppose to answer to this since you say you have done tutorials and such. To get real world advice I think you need to ask direct questions so is there anyway you can narrow this? 
Yea, woody does it that way, slow and steady (with mistakes intact). I'd like it if there was a more brief and to the point version as well (maybe notes in the blog post), but for a noob like me, it's still good stuff.
I agree with the more 'to the point stuff'... but that's what railscasts.com is for I suppose
I'd say checkout Github; Find a gem you LOVE, checkout the issues, patch one. Repeat.
1.8.7? Isn't it time to move on to 1.9.2 yet? 
I see what you did there Mr.Microsoft I'll stick with [Ruby-Version-Manager](http://rvm.beginrescueend.com/)
My thoughts as well.
Rails Magazine also has some interesting articles, although they don't release that often. http://railsmagazine.com
I wish this could be stickied or something
On windows you'll want to use Pik: https://github.com/vertiginous/pik
Agree I think we should amalgamate some of the self.ruby posts so we don't get repeats. Its good that people want to learn RoR and ruby but us redditors should by DRY about our help.
Absolutely; I'm all for helping the nubbits but couldn't jamesgolick put all that goodness in the sidenav? I'd really like to keep r/ruby as more advanced topics; Such as: * Gem news * Ruby hacks / tricks * Tools * Methodologies * Guides / Tutorials * Startups / Implementations Reports * Monkey Patches You know; the stuff that makes you go "Aw damn, why am I NOT programming in this language" 
I think seeing some information in the sidenav would be a good idea too. Other subreddits certainly have it.
I'd add Pragmatic's Metaprogramming Ruby book by Paolo Perrotta. Starting out, Rails seemed a bit too magical for me. As a CS grad, I wasn't comfortable just watching it do the "right thing" most of the time without understanding how. This book cleared up a lot of those concerns for me and made me really love the Ruby language. Most importantly, it helped me know enough about Ruby to be able to dive into the Rails source and other Ruby gems and projects and understand what was going on. 
I can message the moderator, other subreddits have an FAQ on the right hand side
Is this really THAT hard that it needs it's own installer? * Download the Ruby installer, ensure it adds the bin folder to path * Go download Ruby Gems, run "ruby setup.rb" * gem install rails -v=3.0.3 Seriously, less than 5 minutes.
Mucho-respect
The tutorial by Hartl is great, i've been reading it for the past couple days. 
[use RVM!](http://rvm.beginrescueend.com/)
just wrap it in a while loop. while [ 1 ]; do for i in {0..360}; do clear; ruby qlobe.rb $i; sleep 0.02; done; done
yup, the whole thing is written as though it's spoken by a marketing manager.
I recently started learning Ruby for this very reason. I'm still a fledgling developer and I'm hoping I can find a 'learn on the job' gig soon.
I think it's cause I have ruby 1.8.6 on my mac?
yah.. in 1.8.6, splats had to be the last argument.
Just [install RVM](http://ruby.about.com/od/rubyversionmanager/ss/Installing-Ruby-On-Snow-Leopard-With-Rvm.htm) and 1.9.2.
alright thanks for the help guys
Not a bad post, but the final line "proper functional programming is more possible in javascript" or whatever is inaccurate. Why do you think this is true?
This code was not developed by a "well rounded rubyist." It needs a semicolon to work: def args_unleashed (a, b=1 ,*c, d, e) puts "Arguments: "; p a,b,c,d,e end Any "well grounded" rubyist would have caught that in seconds.
The newest Ruby includes RubyGems. * Download Ruby and Install, add to path * "gem install rails"
i'll give that a shot, i think i was doing my while loops wrong.
I started with Apress' Beginning Rails 3, moved Pragmatic's Agile Rails 3 book, and ended on Hartl's tutorial. I worked along in all three until I lost interest in making their tutorial apps, but it wasn't until Hartl's tutorial that really made me feel like I was developing like a developer with a solid foundation of tools. Never used Git before. Didn't like Rail's default testing, and Hartl introduced me to RSpec. Never heard of Heroku, FactoryGirl, Faker, etc. Hartl pulled it all together for me. I couldn't get halfway through the tutorial before I stopped and started working on my first real application. I don't like long lists of resources for people trying to learn as I think it's overwhelming, but I recommend anyone interested in Rails to go through various Rails books and follow along until you lose interest in the particular demo app. Exposure fosters familiarity, and seeing it from different perspectives helps you mix and match your favorite way to do things. Some books operate on your wavelength and some don't. Start with http://railstutorial.org/. If nothing else, you'll become familiar with Git and pushing your work-in-progress to Github. Once you learn the basics, you can immediately start contributing to other Github projects or even collaborate with friends. You also learn how to deploy to Heroku which was a game-changer. You really can't beat a service that lets you deploy your entire app by typing "git push heroku". Frankly, I'm obsessed with Rails now. I can watch Railscasts for fun, and it's made me pine for Ruby/Rails when I'm working on our VBScript website at work.
That was me. I made a different post. I am sorry I took it down, but I explain in my new post. http://www.reddit.com/r/ruby/comments/f4tml/hey/ 
If installing Rails on Windows is confusing anyone, Windows has a lot more in store for them down the road. I recommend running Ubuntu from a USB stick at the very least.
You guys need to get jamesgolick to create a FAQ and put it all in there, then just reference it on the sidebar for people to check out. Each subreddit can create a FAQ for itself. 
I still can't wrap my head around Procs. In the first Proc example in the Order model, how come you couldn't just evaluate "order.paid_with_card?"
He is reading this: [The Well-Grounded Rubyist](http://www.manning.com/black2/) No need for the attitude.
In regards to your installation issues on Windows, perhaps the Rails Installer might help. I haven't tried it, but I trust the developer: http://www.railsinstaller.org/ 
Not in the 1.8 branch of Ruby. Colons like that didn't go away until 1.9.
care to share? I have had 0 issues with Windows + Rails...
I didn't really read your modeling requirements. They're definitely tl;dr inspiring. Now to the core of your problem -- overwhelm and workarounds for stumbling blocks. 1) Rails can be a difficult beast to get running on Windows. You feel like you're stuck and can't make progress. Use virtualization as a short term work-around to keep moving forward, while sitting at your windows box, until you can get it running on windows proper -- maintaining forward momentum, until the windows install stuff gets sorted. See: a) Installing Ubuntu inside Windows using VirtualBox http://www.psychocats.net/ubuntu/virtualbox b) (section of page) "V is for Vagrant, VirtualBox and all things VM" here: http://drnicwilliams.com/category/hudson/ 2) It's hard to keep coding when you're used to knowing what you're doing and now you know that you don't. Trying to do rails without knowing Ruby means you'll have to let go and let the framework -- while keeping to the plainest of vanilla implementations. 3) ActiveScaffold may be your friend: http://activescaffold.com/ 4) Hobo may be your friend: http://hobocentral.net/ Deep breaths, and good luck.
Dear fuck-head, Ask your question on stackoverflow.com the ruby reddit is not the place for this crap.
you have a wrong order of arguments to the method, should be read as: args_unleashed (a, b=1 , d, e,\*c) the '\*c' must be the last
If you can't even manage to install Rails, isn't it a bit early to be designing your models? Try googling for "beginning rails 3" tutorials. Some people have had luck with the Rails Installer for Windows, but I recommend you just run Ubuntu in a VM. Anyway, if you want to keep track of price changed over the years, there are a few ways to do it. Simplest would be to just version your models, but that'll make generating reports much harder. If I were you I'd think about having separate models for products and prices: each product has several prices, and each price has a type (who it applies to) and a date. Then you can query all the prices for a certain product and type and plot the numbers according to the date field. But then again I only skimmed your wall of text and I'm not confident I know what you're trying to do. And finally, please don't submit posts with the subject "Hey." For this post you probably would have gotten more help with a subject of "Trouble installing Rails on Windows" or "Keeping track of product prices over time in Rails."
Hear, hear.
Please, post this on /r/Rails. Pleeaaaase?
OOO is it burn on Rails day? To the *I'm gonna go learn Rails, its easy* community, pleeeease stop relying on copy-paste tutorials and just learn some damn Ruby already :) Also, because this has been bugging me for the last 6-8 months: **Bundler + Capistrano is not an acceptable deployment strategy!** Another passionate Rails Developer.
This has to be one of the best articles on scalability I've ever read. Far too many people are concerned about what "scalable" technologies they use and trying to make their tiny app handle astronomical loads they will probably never see. EDIT: Due to the surprising lack of a scalability sub-reddit: [/r/scalability](http://www.reddit.com/r/scalability) is born!
Isn't there a moderator to filter articles?
Dear author of that wall of text that I read, Warning: I'm going to be mean for a moment. You clearly do not know enough PL/SQL to "write out the logic for the manipulation and report writing". Sin number one: Thinking you should have multiple, nearly **identical** columns on the same table. Sin number two: Thinking you should give each of your competitors **their own table** There are enough things wrong with just those two things I want to jump in front of a speeding bus. Now, please note, I'm not making fun or being a dick at a pathetic attempt for karma. I'm genuinely trying to help you here. Now, your assigned reading. You will read (or skim) these, in this exact order: * [The Manga Guide To Databases](http://www.amazon.com/Manga-Guide-Databases/dp/1593271905/ref=sr_1_6?s=books&amp;ie=UTF8&amp;qid=1295446977&amp;sr=1-6) * [Why's Poignant Guide To Ruby](http://mislav.uniqpath.com/poignant-guide/) * Whatever rails book you like, but I would suggest a current one from [Pragmatic](http://pragprog.com/titles/rails4/agile-web-development-with-rails) As far as the Windows thing goes, I honestly can't help you. Also, this really should be posted in /r/rails :| Edit: Stupid formatting and a grumpy warning.
I messed with rails last year on Windows 7 using: http://instantrails.rubyforge.org I didn't seem to have much of an issue running it. Looks like they are point to http://railsinstaller.org/ now. Using a Linux VM or one of the prepackaged systems will probably get you going quickest.
Ugh. Rails **IS** Ruby. Plus /r/rails is pretty much inactive. There's an article posted every 30 days.
I think we've asked but no response yet.
No video? All the Vim guys do videos. Hmm. j/k, bookmarked.
What's wrong with bundler + capistrano for deployment? ::sarcasm:: 
While I agree with you that Rails is indeed Ruby, it still remains a highly specific subset of Ruby. Albeit (probably) the most commonly used subset of Ruby. You can and should do so much with Ruby without ever touching ActiveRecord, Erb or ActionDispatch's plurality dilemmas. Which is why there should be /r/ruby and /r/rails.
there, there?
Useful when autotest is overkill. Works with other languages than ruby too of course.
Do you think you can provide a little more detail on: &gt; __Bundler + Capistrano is not an acceptable deployment strategy!__ Curious as to why it would be _unacceptable_. Bundler [includes a capistrano recipe in its codebase](http://github.com/carlhuda/bundler/blob/master/lib/bundler/capistrano.rb), which would seem to encourage this combination for deployment. 
Sure! I'll start off by stating that for the most common use cases (read: hobbyist, one-offs, very small apps and simple deployments, etc) Bundler and Cap are fine. They are not *horrible and/or broken* tools. When you move up to larger apps and more 'professional' production environments from here, there are a few reasons that stand out. * Your production servers should not have build tools or development libraries on them * You should not be running 'bundle install' on a production server. Ever. * Running 'bundle install --deployment' pre-deployment works great until you depend on a native gem. (Architecture mis-matches will be hilarious, plus freezing binary deps is typically frowned upon) * Production servers shouldn't require access to your VCS to deploy * Fast, trouble free rollbacks. *Yes, I know cap has rollback stuff. However, how do you run it when you accidentally hose the app/env?* Keep in mind, most of the issues revolve around Bundler. The rest of the issue is since all of these shiny tools (not just Bundler and Cap) target a very specific set of use cases, that as soon as you step outside of their fuzzy, monkey-patched boundaries they either fail to get all of the job done or just refuse to work. Granted, there aren't too many great out-of-the-box deployment strategies for rails apps or other web apps in general. I applaud the teams that work on both Bundler and Capistrano. **TL;DR:** However, the default and often suggested/followed strategies encourage piss poor systems administration practices.
I don't see why that's a reason to not use 1.8.7. I do see that as a reason to know your environment and language though. If it still irks you that much, then lemme fix that for you: class Range; alias :old_max :max; alias :max :last; end Presto! 
Or go to stackoverflow. I get most of my rails questions answered within minutes.
It's a reason not to use 1.8.7 in as much as it was reason enough to be changed in 1.9 (so that #max doesn't iterate over every integer in the range). 
Go register, there are some great looking talks (again) this year.
Suggesting that something isn't bad because there's an easy way to fix it is kind of silly...
erb is part of the standard library, not rails.
&gt;I'd like to show you how you can go from a default installation of Emacs HEAD (24) to a workable Rails development environment in only a few minutes. I will make the following assumptions: &gt; 1. You are running Mac OSX 10.6 2. You have Xcode (&lt; 4 beta) installed 3. You have homebrew installed and working 4. You have installed git using homebrew 5. You are using rvm to manage your rubies and have a default configured. 6. You have a basic understanding of Emacs That seems like a weird set of assumptions
Whoops! Thanks for pointing that out.
Why does the video start in the middle of his talk?
https://github.com/mynyml/watchr
autotest is overkill? autotest works with other languages than ruby too.
Seems like a perfectly rational set of assumptions to me. Describes the largest subset of ruby developers out there pretty well and helps keep his writeup small. You just like to bitch.
No, he has the wrong order for ruby&lt;1.9. That code should work fine for 1.9 and above.
That's simply not true in any sense. It doesn't work on 1.8 because of 1.9 syntax _and_ because of the missing semicolon. It doesn't work in 1.9 simply because of the missing semicolon.
Not having the time to learn ruby means you don't have the time to do this yourself. Not knowing ruby means you don't know how much you don't know. Not knowing how much you don't know means you can't estimate how much time this is going to take. If you don't have time to learn ruby to do this properly, and you're having problems installing it on your windows 7 boxen, then I highly recommend you throw money at this problem and hire someone to do this for you or to at least coach you through it. Without an experienced sanity check, you have no idea how deep you're in. For all you know, it'll take as long muddling through it as it would to invest the time to learn what you need to know properly. If there is _anything_ I've learned working with marketing, it is that underestimation is par for the course. Get a sanity check.
He assumed correctly for the first 5 for me.
Dear Fuck, max was defined on Enumerable not on Range. It's a method from Enumerable. In 1.9 Range overrides the method from Enumerable with its own max method. Goodbye Fuck.
 irb(main):001:0&gt; (1...10_000_000).max =&gt; 9999999 irb(main):002:0&gt; class Range; alias :old_max :max; alias :max :last; end =&gt; nil irb(main):003:0&gt; (1...10_000_000).max =&gt; 10000000 Oops, you broke it.
&gt; (setq make-backup-files nil) &gt; (setq auto-save-default nil) ಠ_ಠ
That is quite a reply.
This is quite possibly the worst excuse to upgrade to 1.9.2 that I've ever seen.
&gt; "Fascism and Faux-pen Source" by Zed A. Shaw &gt; Everything you need to know to run your very own Faux-pen Source project in the Fascist style. I'll cover the history of Fascism, how it works, relevant scholarly research, and how you can leverage fascist tactics and "the community" to further your own goals. I thought he was gone for good. D'oh.
cos your gay, lol
most ruby programmers I know use linux.
Autotest is a great tool for rails projects and rubygems! I really love it, but I wanted filewatcher to be an absolute don't-make-me-think/no-brainer command line utility to use. Many rubygem projects could be tested automatically by simply running: $ filewatcher "lib/*.rb tests/*.rb" "rake test" 
Wathcr looks more flexible, but it seems you need to create a script to be able to use it.
Ever heard of [inotify](http://en.wikipedia.org/wiki/Inotify)? There are ruby bindings too.
Note that this tutorial does not work with Aquamacs (which is based on Emacs 22), in case anyone is tempted to try.
Use two dots instead of three.
Interesting... Three dots only gives you a range starting at the first and excluding the last. Admittedly, I've never use the 3 dots in my code. What's interesting is the behavior here. Ruby considers `last` to be the last number that you used to construct the Range instead of the last number of the Range. Apparently, internally, Ruby 1.8.7 is converting the range to an array in order to acquire the `max` on the Range and that's what is taking the most time. 1.9.2 appears to have this function directly in the Range class. Funny enough, converting a range of that size to an Array in either version of Ruby takes just as long. Fixed: puts (1...1000).max # 1 puts (1...1000).min # 999 class Range alias :old_max :max alias :old_min :min def max self.include?(self.end) ? self.end : (self.end - 1) end def min self.first end end puts (1...1000).max # 1 puts (1...1000).min # 999
I never suggested the behavior wasn't bad... I simply suggested you shouldn't throw the baby out with the bathwater. Lots of fairly new and large scale apps won't run on 1.9.2.
I think its more like "4chan shows its influence in Rails commit discussions"
I won't be attending because of this.
I second watchr- it will use native file watching if available. There are some other file watchers out there also. I don't think there is a real situation where you wouldn't want it to be a (one-line) script. I would turn the given example in a script- invoking the script is faster then re-typing the watch parameters.
I don't think the suggestion was ever "oh em gee port every ruby 1.8.7 app to 1.9 immediately blarglargl," it's just a matter of seeing the benefits in one version over another. Porting might be an issue, but I think you'd be hard-pressed to find a problem that can be solved with 1.8.7 that can't be solved with 1.9. They're just not different enough.
Please don't leave comments like "I came from reddit to ROFL my LULZ." It adds noise to the discussion and makes us all sound like idiots.
That's too bad. Speaking of Zed, Matz said: "And I love him. Really love him. How many times do we mention him in the presentations at the conference? Yes, we love him." [keynote](http://confreaks.net/videos/430-rubyconf2010-keynote-3) (~2:45) [We love Zed](https://skitch.com/blowmage/r811w/we-love-zed) I love Zed. He's wicked smart and way more generous than he gets credit for. And he doesn't contribute to an echo chamber. All things we should encourage, IMO.
I go to Ruby Conferences to hear about Ruby topics. I'm not interested in listening to some attention whore who can't let go.
Emacs in preference to Xcode, TextWrangler, TextMate, Smultron, Coda or BBEdit seems highly questionable to me. Most Mac Ruby developers use emacs? Really? At least vim lets you script using Ruby.
I took it as "oh em gee, stop using 1.8.7 because it's bad blarglarl." In any case, if you have the same performance issue in one of your apps, you now have a solution.
Technically, my code was broken for the exclusive Range. I think a lot of thinks are broken conceptually about the exclusive Range, but some people like it and use it. My code was supposed to help with performance, not break functionality though.
It's the last talk; you could easily duck out early. I've gone to every mwrc and I'm looking forward to this one too.
Bundler + Capistrano is a perfectly acceptable deployment strategy. That said, I worked at a company where it was deemed unacceptable. They had standardized on debian and used apt for all the reasons you outlined. So we simply created a debian package for every release. We even had hooks to recycle apache when deployed. Bundler or Isolate don't preclude you from doing this however, and would have actually made the process of building the debian packages much easier.
LOL But seriously, I'd rather people express their grievances via jokes/pictures, than epic hate-filled mailing list flame wars.
I &lt;3 Tenderlove. 
the biz team
thanks!
have ever hung out on r/programming?
The enterprise stuff is sorely lacking. I know that's on purpose but it's still annoying. You can't write a decent soap server in ruby, you can't deal with SSO very nicely etc. As far the language goes I'd be in favor of optional typing at least in method signatures. I think Mirah is going in the right direction there. 
&gt;You can't write a decent soap server in ruby, you can't deal with SSO very nicely etc. Actually that's always bugged me - that in ruby's SOAP library it won't generate the WSDL... Kinda makes it hard to publish a SOAP server. That's more of a pet peeve. The latest ruby change in the require statement now needing paths - that caused me about 15 minutes of grief before I figured out that that change was made. I actually think that was a pretty annoying change that broke a lot of ruby code because of it. I'm not 100% what the security concerns were, but it was still irritating to go through all my ruby code and have to change that. Ruby code at least should be forwards compatible across minor release. 1.9.1 to 1.9.2 shouldn't have had that change in it. 
EM makes this stuff look easy but it's much trickier than it seems. You need to learn when and how to use defer, how to co-ordinate events etc.
Sort of, though a single line would cover the basic example. The benefit, then, is that it's easier to extend to dealing with multiple types in one rather than using multiple shells, and you don't need to memorize anything or keep pulling it from history as you just run 'watchr' and your predefined watch comes into play.
I think my biggest gripe is the require statement is a bit confusing with relative/absolute paths. I known 1.9.2 has added the require_relative keyword to alleviate this but it's useless if you want to make your application or gem backwards compatible
It is nice to be inspiring!
An even better way to deal with the problem is to specify the exact version of ruby (or whatever other language) your code wants, in the code, so in the event that you make a bad mistake (e.g. upgrading your production version of ruby without knowing what the consequences are), your code continues to run against the version it expects.
Yeah I generally like to use RVM for that and am quite happy with it, but still, it'd be nice to see some respect for backwards compatibility in minor revisions. 
Great post. I honestly didn't know about the change in `instance_eval` behaviour, that's very interesting - btw, instance_eval on the class itself still works like a class_eval as regards constant lookup (i.e it works lexically): X = 10 Foo.instance_eval { X } #=&gt; 10
tenderlove, the manliest man in ruby community. What would I do without nokogiri.
&gt; Hobo may be your friend hehe
Those are a lot of entires.
Might want to take a look at this [code](https://github.com/postmodern/gscraper/blob/master/lib/gscraper/search/web_query.rb#L403-447). Biggest thing to think about, is that the HTML will change every couple of months, so you must refine your XPath/CSS-path queries to be flexible.
I'd recommend taking a look at something like [domainatrix](https://github.com/pauldix/domainatrix), [public_suffix_service](https://github.com/weppos/public_suffix_service) or [Addressable](https://github.com/sporkmonger/addressable/tree/) for getting the actual domain
First off let's see if I got your problem description right. You are writing a method called scrape that you'll be implementing for different search-engines. I'm guessing by the Rails comment you want to 'mixin' these methods somewhere somehow. If I had to solve this problem I'd start off with three classes that implement the same interface instead of writing three methods. This will help you in creating more defined boundaries between code. You need that if you want to write code that can be easily reused. class GoogleSearchHelper &lt; SearchEngineHelper def find_domain_rank_for( domain_url, search_keyword ) end # Possibly implement other methods here in the future :) end How I would implement this method: I try to write very small methods (3-4 lines). This can be difficult and frustrating at first but just try it out. def find_domain_rank_for( domain_url, search_keyword ) reset_search_results while( get_url_rank_in_search_results(domain_url) == -1 ) next_search( keyword ) return end def reset_search_results @search_results = [] @pager_position = 0 end def get_url_rank_in_search_results( url ) @search_results.each_with_index do |result, idx| return idx if result.url_match( url ) end return -1 end def next_search end I think you get the gist. For implementing the next_search instead of scraping as you chose to do I would use the Google Ajax API and work with JSON. But that's a story for some other time. For now I'm off doing the dishes which should've done three days ago. Some other points: * In your code you use self.keyword and self.text as arguments, you really shouldn't have done that. * You are missing copyright and licensing statements. * It's a long method (over 80 lines). Some people would even say this is a very long method. 
I realize above comment might not be entirely useful for you on the short-term. Regarding the Ajax/JSON search method: you might want to look at [GoogleAjax](https://github.com/geemus/googleajax). It's available as a gem so you should be able to install it pretty easily. &gt; reliably comparing a given domain URL with a URL scraped from a search engine results As rb2k mentioned: [domaintrix](https://github.com/pauldix/domainatrix)
I agree. I've done similar stuff before and always use [Addressable](https://github.com/sporkmonger/addressable/tree/).
http://www.atmos.org/cinderella/
I manage a [gem] that does something similar to this, but specifically looks for links to sites. Ideally you want to separate out the parts that change a lot from the parts that don't change often. This means the brittle things like the url and xpath should be extracted out so they are easier to change. I would also make a division between the poller and the scrapers. The scrapers are likely to have common code, so I would create a class for the common code (Scraper), and classes for the specific implementation (GoogleScraper). What you'll likely find is that the only thing that needs to be put in the sub-classes is the url and xpath information. [gem]: https://github.com/blatyo/page_rankr
Unfortunately, Google's API is very limited and seems to consistently return different results from those you'd see in an actual Google search! I'd love to use an API over a screen scrape. 
Wow. Thanks a lot. My scraping code was thrown together in an .rb file on my desktop and I pretty much just pasted it into they keyword model which probably breaks every rule in the Rails/OOP/programming book. Right now, I'm calling "keyword.scrape" which explains the self.___ references. I know I should move the scraping mechanism elsewhere, but I'm unsure where to put it in the Rails context. Thanks for the insight into making a more flexible OOP version out of it. I definitely need to invest in a basic programming design book to gain some intuition on how to structure classses.
Excellent. *scraped_url =~ /url_to_search_for/* would probably even work better than what I was originally doing. A search for "standford.edu" would get thrown off by "www-ee.stanford.edu", but then it'd catch "www.stanford.edu" further down the page and return an accurate position. Addressable looks exactly what I need.
I really like your implementation!
Or at least [vote](http://reddirtrubyconf.com/vote)! 
Here's a thought: it sucks and your a dick.
Great illustration of a subtle gotcha.
Now you've succeeded in breaking the Range class for everything but Integers. The ends of a Range object can be anything that has a `succ` method. So, because there's such a thing as `String#succ`, `'a'..'z'` is the range of all lower-case letters. Because there's no such thing as `Integer#prev` or `String#prev`, I doubt there's an O(1) way for Ruby to determine the final value in a three-dot Range. It can't just do the equivalent of `Range#end#prev` under the hood. 
I'm fairly sure that has nothing to do with syntax, just a method implementation.
And? You like emacs littering its shitty little files everywhere?
I don't see the connection. Anyway, who the fuck cares how this guy presents his name? It's not like he's doing it like '|-|3R41D'
he'spretty much doing exactly that
You can either post a grey text box or a link .. not both
Yeah, just noticed that. Fixed. :)
True. It is now broken for anything other than integers. When I get a chance later, I'll see if I can break open the source for the Range class and mimick the same stuff in Ruby for 1.8. My point was you can still write fast code even if the interpreter isn't doing all of the work for you.
Well, yeah, Range isn't going to know how to increment a date properly. In general, any time you're dealing with dates or times you need to stop and think carefully, and try not to be clever. In fact, I personally favor avoiding the urge to be clever in all my code. There's no special prize for reducing the number of lines of code, whereas if your code is clear to read and understand people will love you.
This looks awesome for students who can't afford to go to big conferences, thanks!
`apt-get install ruby-dev`
debian packaging is broken for all scripting languages, pretty much, now and in the future. I built mine from scratch. Here's a very good documented workflow for getting the libs and environment you need and getting it all going: http://burakdede.com/2011/01/11/start-with-ruby-on-rails-on-ubuntu-10-10/
ok, did that... then **rails server**, got same error and **bundle install** got same error... didnt help at all :(
tried following the tutorial, but on the first step bash &lt;&lt; ( curl http://rvm.beginrescueend.com/releases/rvm-install-head ) i get bash: syntax error near unexpected token `('
Have you also installed libsqlite3-dev ? It is required for ruby sqlite3 extension compilation.
[Baramin has the right answer.](http://www.reddit.com/r/ruby/comments/f87nn/problems_installing_rails_on_ubuntu_1010/c1e1dh5) If you try to install a ruby library that depends on having some external library installed on your system, you will run into problems. This is not unique to ubuntu or sqlite, this would happen in you tried to do the same on windows or os x, or tried to install bindings for mysql, curl, etc. &gt; did a search to find something relating to this. How exactly? I googled [ubuntu rails](https://encrypted.google.com/search?client=ubuntu&amp;channel=fs&amp;q=ubuntu+rails&amp;ie=utf-8&amp;oe=utf-8) and the first page is all tutorials on how to get started with rails on ubuntu. Even searching for the same [on reddit](http://www.reddit.com/search?q=ubuntu+rails) returns many similar links. I'm sorry to come down so hard on you, but this is information that's readily available if you use somewhat generic terms. &gt; RoR Don't refer to rails as RoR or Ruby on Rails or anything else like this. Ruby is the programming language, rails is the web framework. Ruby on Rails is a slick marketing term useful outside the community, but inside it fell out of favor a long time ago, if it was ever popular. 
Do this instead: curl http://rvm.beginrescueend.com/releases/rvm-install-head Without the bash and parens.
Works for me.
i dont know... perhaps i didnt recognise the answers... complete ruby n00b here... sorry for asking!
There are ways to fight the litter that won't make you miss those files the day day you need them: (add-to-list 'backup-directory-alist '("." . ".~")) 
did that... it probably printed the contents of the file to the out stream... continued the installation, got to the rvm usage part, and it says no command 'rvm' found
One of the packages he recommends to install, Rinari, has a screencast linked from its homepage: http://rinari.rubyforge.org/
Assuming this was true (it isn't). Who cares? As a person who spends his day writing ruby code, I can safely say that ruby-lang.org going down with affect me not at all.
You could try out the [Rails Ready](https://github.com/joshfng/railsready) script. It runs these commands for you: sudo apt-get -y install wget curl build-essential bison openssl zlib1g libxslt1.1 libssl-dev libxslt1-dev libxml2 libffi-dev libyaml-dev libxslt-dev autoconf libc6-dev libreadline6-dev zlib1g-dev sudo apt-get -y install libsqlite3-0 sqlite3 libsqlite3-dev libmysqlclient16-dev libmysqlclient16 sudo apt-get -y install imagemagick libmagick9-dev sudo apt-get -y install git-core bash &lt; &lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head ) [[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" &gt;&gt; "$HOME/.bashrc" source ~/.rvm/scripts/rvm rvm install 1.9.2 rvm --default use 1.9.2 source ~/.bashrc
http://www.downforeveryoneorjustme.com/ruby-lang.org TL;DR - It's just you.
Ruby, or Ruby on Rails? From having a short look at your website, they appear to be RoR positions.
I'm great with Ruby and would be willing to move to NYC, but I've never used rails...
Just a couple critiques/criticisms/questions: * no sudo gem installing, please. No one puts gem install baby in the corner. * Consider a points attribute and simply shovel "&lt;&lt;" either [{:x, :y}, ...] or [Point.new(:x, :y), ...], so you can remove both your add_points and add_point methods. The benefit is you can access the object for both reader and writers in essentially the same way; this is more rubyish. This also makes it so you don't need an each_point method. Instead, you could call points.each * Ditch the clear_points method and instead add an attr_writer on points so you can call points = []. * several of your ivars use nondescript names, e.g. rp1, rp2, zp. What are these? * I couldn't find test or library code to plot the points onto the test image (map.png). * I'm not exactly sure of the utility of this gem. It seems the user needs to know both the x,y,lat, and long of a coordinate. Can you include a handy sample in tests using a google map? 
Debian packagers hate RubyGems and want everyone to use dpkg. They deliberately break RubyGems as shipped with Debian. Remove Debian packages, build Ruby from source. (Optionally using RVM, though personally I just use 1.9.2 for everything and treat failure to work with 1.9.2 as a valuable indicator of poor code quality and lack of ongoing code maintenance.)
A working gemspec with docs are basics hopefully everyone knows bundler for installing dev dependencies is overkill. gem install &lt;gem&gt; --dev works just fine
open a new shell first or "source ~/.rvm/scripts/rvm" to load rvm in your current shell. 
Don't let that stop her... we have plenty of secular projects to work on :)
*stepping on toes* OMGPOP is hiring ruby developers (NON RoR). Check us out.. http://omgpop.producteev.com/j-1-49
Hi and thanks a lot for your honest and detailed feedback :) I instantly changed what you suggested in point 1 and 4. About the plotting: I did not want to use an image lib gem like GD2 in my gem. Any tips about that? Also you don't need x,y for all points, you only need to know x,y,lat,lon for 2 distinct points on your image for initialization. After that you can give lat/lon OR x/y and the missing ones get calculated. (please see the example in the readme or the testcases)
Are you sure you got the exact same error after installing ruby-dev ? ruby-dev should also install ruby1.8-dev which contains the mkmf.rb mentionned in the error message. ruby-dev and libsqlite3-dev are the only packages you should have to install prior to install sqlite3-ruby. 
There is a script a couple of posts down from this one. I havn't had good a look at it so I can't comment on its quality. Reddit needs sticky posts. http://thechangelog.com/post/2857400260/railsready-setup-script-to-get-ruby-and-rails-running
I just interviewed for a Rails position down here in Titusville (east of Orlando) and will most likely take the job. Been looking for Rails positions in the area, but there are so few -- and everyone is telling me it's equally hard to find Rails devs. I'll let you know if I run into any devs near the area.
Yeah, it does seem a bit hard to find qualified devs. Long term, we're open to any good web devs really. If they're strong in HTML/CSS/Javascript and have solid experience in some other server-side technology, they should be able to pick up Ruby/RoR quickly. What's making it harder though is we need part-time help right now, so we can't invest the time in training someone unfamiliar with RoR. 
The example he uses is pretty horrid. Let's review the problems: * Explicitly sets the date. Don't do that. * Explicitly sets the rubygems_version. Don't do that, either. * Uses "authors" plus an array. Just use "author" and a string. * Who uses %q{} for a simple string? Lame. * I'm not a fan of reading VERSION out of the library. * lib is automatically in the require path, no need to add it * It has a summary but no description All in all, pretty wretched example.
 bash &lt; &lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head ) is not the same thing as bash &lt;&lt; ( curl http://rvm.beginrescueend.com/releases/rvm-install-head ) `&lt; &lt;(..)` and `&lt;&lt; (..)` are two completely different operations
It's great that you know the basics about gemspecs, but just remember that every developer who knows this stuff needed to learn it at some point, including you.
I thank the author and publisher for making a free pdf available. Because of that, the probability of me purchasing the book went from 5% to 95%. Also, thanks to the poster. 
Thanks, that was the one of the ideas behind doing it.
You could get the same stuff from the actual RVM site. Also the sample .gemrc file is wrong... github doesn't serve gems anymore and gemcutter.org is now rubygems.org.
Yep, you can also learn Java from the JavaDocs. But it's easier if someone walks you around the language and a basic workflow. When I started using RVM I couldn't find a place where I could be told HOW to use the tool, what I did was writing about my way of doing it. Not sure where you got the info that github doesn't serve gems, it doesn't build and accepts new gems, but all the old gems that were in there are still available and being served - http://gems.github.com/ - check your information before saying it out loud :)
You're quite welcome. I'm just happy that people are interested in the content. Also, the content for the book and code examples can be forked on github, if you're keen: https://github.com/jbrownlee/CleverAlgorithms
Wonderful, thank you for sharing.
Hi and thanks a lot for your detailed and honest feedback! I appreciate that a lot! I implemented your first four suggestions. (inheriting from Array now btw). About the actual plotting to an image: I didn't want to add a dependency to an image library gem for now. But you can see in the sample code how it would be done ... just say something like "mapper.each{|point| draw_on_image(point[:x],point[:y])}"
The job would require learning and working with Rails, but is not limited to just that. There are other ruby projects we have going on, rails is just for our web app. If you have strong Ruby experience I would recommend sending me your resume.
We are looking for Ruby developers, not necessarily just Rails developers. Our web app is a Rails app and you would have to learn Rails as part of the job. However, we do have other ruby projects and if you have good Ruby experience I would recommend sending me your resume.
That's cool, I'm just saying it's a good idea to mention. Also consider /r/rails.
Totally agree on the ideals of making it easy for others to develop on your code and getting setup, but this does just look very messy. What's the benefit of using the .gemspec in place of the Gemfile? I would have thought that the Gemfile was a nicer place to specify dependencies (with using group(:development) etc ).
This is awesome. I'm actually taking a class in swarm intelligence right now and implemented one of the ant algorithms in ruby. Check it out at https://github.com/dpick/SwarmIntelligence
ಠ_ಠ
✌
You could post your software development job openings for free on softdevjobs.com
The fact that you prohibit using the code for commercial purposes will put rather a dent in your audience, I suspect.
Awesome post! Really a great way to get into music visualization, thanks.
One could strongly argue the code in the book is not even close to production ready. The code is demonstration only. There are many excellent libs out there, and I have an LGPL lib that has better code if you need it: http://optalgtoolkit.sourceforge.net/
Would be nice to see some sample output
Oh sure, I'm not expecting production-ready code; but the fact that I can't take the code as a starting point is a major annoyance.
Thanks! I'll check that out.
Not your typical post, thanks for this. 
My point is, you can't make `Range#max` work O(1) in all cases (I mean, the non `block_given?` cases) unless the end object is allowed to define a `#prev` method and `Range#max` uses it. Here's the latest [CRuby 1.9 code for `Range#max`](http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/range.c?revision=27865&amp;view=markup): static VALUE range_max(VALUE range) { VALUE e = RANGE_END(range); int nm = FIXNUM_P(e) || rb_obj_is_kind_of(e, rb_cNumeric); if (rb_block_given_p() || (EXCL(range) &amp;&amp; !nm)) { return rb_call_super(0, 0); } else { VALUE b = RANGE_BEG(range); int c = rb_cmpint(rb_funcall(b, id_cmp, 1, e), b, e); if (c &gt; 0) return Qnil; if (EXCL(range)) { if (!FIXNUM_P(e) &amp;&amp; !rb_obj_is_kind_of(e, rb_cInteger)) { rb_raise(rb_eTypeError, "cannot exclude non Integer end value"); } if (c == 0) return Qnil; if (FIXNUM_P(e)) { return LONG2NUM(FIX2LONG(e) - 1); } return rb_funcall(e, '-', 1, INT2FIX(1)); } return e; } } We see that if `Range#exclude_end?` is true and `Range#end` is an integer, CRuby subtracts 1 from the end value and returns it. I don't have Ruby 1.9, but I'm guessing `Range#max` is broken if `Integer#succ` or `Fixnum#succ` has been monkeypatched to skip ahead a few values. &lt;del&gt;Also, `Range#end` appears to raise an exception when an excluded-end Range consists of anything but Integers.&lt;/del&gt; Edit: Ignore the last sentence above. Ruby 1.9 appears to call `super` for excluded-end Ranges of non-integers. If `super` is `Enumerable#max`, I bet it iterates from the start value calling `#succ` each time. 
This looks really interesting. I always found rdebug a slight hassle.
Custom web-server? Maybe just use Rack directly?
I'd go with Sinatra.
Ruby Camping is a tiny web framework that works great for little front-end projects. http://camping.rubyforge.org/
I would use Rack or Sinatra if you just want to replace the command line with a url I would use Rails if there's going to be a certain amount interaction with the user through the browser. For example, if you want to store default arguments for the scripts in some kind of database, and allow a user to edit them. Or maybe you'd like a user to be able to schedule them as jobs... or maybe you'd like the user to be able to do custom reports with the scripts' output..etc..etc 
Sounds like possibly you're doing it wrong? Can't tell for sure, but it seems maybe reexamining the approach to these things would help? To me, it sounds like you are trying to use rails as a front end and then shelling out to the old scripts. If you want to really modernize things, rewrite the scripts with a database backend and use AR. If that's not an option, Sinatra might help.
There's definitely no option to rebuild the backend. Sinatra it is, by the look. 
Understandable. Rails does give you a lot in way of view/templating tools and things like that. And you might even be misunderstanding REST if you are having trouble fitting things in. REST is not strictly CRUD, but you can read up on it. Sinatra really is bare bones, even routing is manual, so I'm not sure it's what you're going for. Either way, good luck!
In rails 3 you can map a route to a function and you can completely ignore active record as a model. This is basically what Sinatra gives you, but Sinatra is missing some things out of the box. You have to wire in your own testing setup, your own environments, your own rake tasks, etc, etc, etc. It's usually hard for me to justify rolling all that on my own, so I usually stick with rails, even if I don't need active record
Compact to read, a nuisance to type. 
How about just forgetting about REST (which is just a guide anyway) for your scripts, which is what it sounds like you'd get with Sinatra, and just use plain old named routes? Then u can use all of the controllery goodness of rails and huge gem ecosystem with non of the resty guilt tripping. Good luck!
http://imgur.com/E0HYN
I would either consider [Sinatra](http://www.sinatrarb.com), or [Rum](https://github.com/chneukirchen/rum). Rum is probably the closest you'll get to Rack without implementing too many low-level things yourself. If you just need to execute something when a request comes in, they can both do it well. **Sinatra:** class Main &lt; Sinatra::Base get '/diskspace' do `df -h` end end **Rum:** App = Rum.new { on path("diskspace") do puts `df -h` end } Rum can get you more requests-per-second theoretically, but I think Sinatra will surely be just fine for your purposes as well. Other things to consider would be Camping, and maybe just plain ol' Rack.
The answer to that is Monk :) Basically it sets up everything for you: directories for model/routes/helpers/etc, thor/rake tasks, gems, et al. $ monk init myapp Creating myapp/ Creating myapp/init.rb Creating myapp/app/models/ ... (snip) $ cd myapp $ ruby init.rb # starts the app Official site: [www.monkrb.com](http://www.monkrb.com) I've also made a monk 'skeleton' that doesn't have an ORM, you can find it at [http://github.com/sinefunc/monk-experimental](http://github.com/sinefunc/monk-experimental).
Love camping.. Will have to check out rum! Ps. The camping mailing list is super friendly and helpful, and would probably love to tackle something like this. The main keepers of the current codebase are quite active on there.
We need better support in editors to make it easier to type scripts with modern ultra compact symbol based programming (m.u.c.s.p.). We need macros for emacs, vim and textmate. We also need rubyscripts that can transform old boring verbose rubyscripts to new fancy modern ultra compact symbol based code (m.u.c.s.). Let's make utf-8 and "# encoding: utf-8" a standard for ruby scripts. Let's create new ruby idioms. Soon all programming code will look like this. But the creative ruby community started the movement first. 
If you want simple DSL for API calls you can try grape - https://github.com/intridea/grape
At that point, why not use rails? There is a much more vibrant ecosystem for rails, you know it's going to be maintained, etc etc
Awesome. I always thought Oracle sucked for the way it's handled the MySQL and Java takeovers, but now I think I'll just actively promote boycotting of Oracle.
Oracle is on a roll right now for killing everything good that Sun did. I just wish there were quake sounds to go along.
It's both incredible and unbelievable to see how Oracle is destroying every single community that gravitates towards their tools. Tried to kill Hudson and now they're onto killing NetBeans. I have surely met much more Ruby developers using Netbeans than Java ones using it. Eclipse still reigns alone in the Java IDE land.
i'm not sure this is nefarious. out of the ruby devs i know it breaks down to be: 65% vim 33% textmate 2% rubymine why would they continue to build a tool most ruby devs actually scoff at?
This is unbelievable. I have been using Netbeans for Ruby development since I started programming in Rails a year and a half ago, and am more than comfortable with the environment. I *really* do not want to give it up :\
Netbeans? is that some Emacs plugin?
So, how and why does one use an IDE with a wagon of console-based tools that shape the environment of Ruby?
Both NetBeans users are going to be furious.
Like I needed another reason to tell Oracle to get fucked...
I'm sure Oracle will reconsider their decision if the price is right. Larry could use a new yacht. Do you have a few billion to spare?
It looks like they really didn't like that article about how Java is dead and Ruby is the future/modern replacement :D. 
i use vim for ruby development, and netbeans for java. i think it still has a fair bit of mindshare in java land, though nowhere near eclipse's
Being one of those 2 NetBeans users, any recommendations for a replacement IDE for RoR development?
[RubyMine](http://www.jetbrains.com/ruby/) I tried NetBeans and couldn't get into it at all. I've been using RubyMine for over a year and it is wonderful. Our project is getting massive and I'm having a few speed issues, but it's still worth using.
Vim. Or emacs, if that's your thing. Before I get any more downvotes, I should say that I'm not just being an arse: I write rails apps in vim with [rails.vim](http://www.vim.org/scripts/script.php?script_id=1567), [nerdtree](http://www.vim.org/scripts/script.php?script_id=1658), and [syntastic](https://github.com/scrooloose/syntastic) - I don't really need any more plugins than that. I can run rake commands from my editor, I have syntax checking, I have a decent file browser and project support, so I guess I have a fully functioning IDE. I'm very happy and productive with it. Edit: More vim info! * [My dot files](https://github.com/veryhappythings/dot_files) - very messy, but I guess they might be useful to someone. There are better examples out there, I'm sure. * [Pathogen](https://github.com/tpope/vim-pathogen) - makes vim plugins not rubbish. Allows you to put them in separate files so that you can use them as git submodules and the like. * And speaking of git submodules, every vim plugin on vim.org is mirrored on the absolutely colossal [Vim-scripts](https://github.com/vim-scripts) github account.
I was using NB 6.9.1 fo R and RoR with good results. I am not really sure why they do this, writing Ruby apps was great pleasure in NB (I like it even more than RM). Guess I will just stay with 6.9.1... 
Any reference to *real* source of this data?
Nothing is lost yet... http://wiki.netbeans.org/RubySupport
NB 6.9.1, or contributing to NB Ruby support
I saw somebody had downvoted you so I upvoted you to fix it. Link to these vim addons so people find your comment more helpful, please. vim is awesome. :)
Two people care. One of them works at Oracle. One of them will post an angsty remark here.
It's a web XML-RPC driver for USB espresso machines.
Textmate with the rails bundle
My first impulse is to echo the comments to bite the bullet and get up to speed with Vim. It's one of the best investments of time a developer can make, IMO. *Eventually* you will learn Vim, and you will ask yourself why you wasted so much time dancing around the issue in the past. (The answer, of course, is that Vim does take some time and effort). But if today isn't the day to jump on the Vim train, and it has to be an IDE, then it's RubyMine. Frankly, as much as I'd like to hate on Oracle (and I do!), the existence of RubyMine really has to make one wonder why they should dump a lot of time and effort into developing NetBeans's Ruby support. Also, if you're looking for another IDE choice, and especially if you're looking for a non-commercial choice, there is Aptana's RadRails.
Done, plus more.
The reason I use an IDE is for debugging. A good gui makes debugging much much faster. Other than that, I'm a console jockey.
Some of my coworkers love [Aptana RadRails](http://aptana.com/products/radrails).
&gt; Eclipse still reigns alone in the Java IDE land. [&amp;#3232;\_&amp;#3232;](http://www.jetbrains.com/idea/) 
Might want to try this repo, [vimfiles](https://github.com/akitaonrails/vimfiles), as it's all setup with this stuff already. I _just_ installed it, based on this news, but I've got a long way to go to learn it all.
I won't downvote, but RubyMine is absolute rubbish on my Linux machine. It's not a very fast machine (here at work), but it's only a couple years old. Running RubyMine makes it feel like it's a 386. NetBeans was bad enough. RubyMine is just NOT. ON. Plus, it looks really ugly. It's written in Java, sure, but even Java has native widgets in Gtk+. Why aren't they using it?
Yeah, I'm gonna give VIm a try at this juncture, but I have no idea how to get the same easy debugging (especially of Ajax calls) as I could get in NetBeans.
[Citation needed]
I'd say this is a clear sign that Oracle has concerns with projects like JRuby