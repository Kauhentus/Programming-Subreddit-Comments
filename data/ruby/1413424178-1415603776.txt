What's wrong with business-time? https://github.com/bokmann/business_time It works well with the holidays gem as well.
Oh shoot, I only saw this in /r/rails, so I missed your comments. I created a fork, and a branch, which I believe fixes it up nicely, [here](https://github.com/short-matthew-f/has_streak/tree/allows_for_months).
How does one package such an app for distribution? I.e. MSI, dmg or deb/rpm "Gem install app" is not good enough. All of the things like warbler, ocra etc have failed for me.
Not sure what is up, but the answers shown in the detailed results didn't match what I had input.
Oh, misread your comment
Thanks for the feedback guys. I think this is confusing design or our part, or possibly a bug. Let me see if the following makes sense: On the detailed results page, If the user answers a question incorrectly it says [wrong] above the question, shows a red dot next to the answer the user guessed, and a green dot next to the correct answer. (Like this http://imgur.com/uf2fDF2) If the user answer correctly then it says [correct] above the question and shows a green dot next what the user guessed, the correct answer. Like this: http://imgur.com/EBp4I0b And I agree, a block is a ruby language construct. 
Hey thanks for the heads up ... Let me do some investigation.... 
Ah, when I did it earlier, I only saw the answer I chose, not the correct answer (in the instances where I was wrong). In the first image you posted, I'd have the red dot but not green. I was using most recent Chrome on Windows 7x64
Ahhhh I see. Yeah Im now seeing what you and probably /u/aposter are seeing on production. Thanks, looking into it!
Yep, promises are awesome. [q](https://github.com/kriskowal/q) is really useful, as are [RSVP](https://github.com/tildeio/rsvp.js/) and [bluebird](https://github.com/petkaantonov/bluebird). Also, I'm getting to that point with Coffeescript too. At work, I'm using Rails + EmberJS, and doing all of the Ember stuff in Coffeescript. I'm finding more and more that the [ECMAScript 6 transpilers](https://github.com/esnext) are pretty cool, and seem to take care of a lot of the stuff I used Coffeescript for.
Ok got this fixed! (also for /u/thisisseriousmum &amp; /u/aposter) If you go back to the /detailed-results page you should now see the correct results now. Anyways thanks everyone for pointing this out... I might have not caught this since I was avoiding doing testing on prod T_T. 
I tend to approach libraries on a use case basis. If I need milk I'd opt to own a cow rather than an entire farm. (Edited removed useless tldr)
What makes it "modern"?
There's a section about business time in the README : * it suffered from several bugs we had to fix ourselves * it does not support business minutes 
There's one potential performance issue for bigger tables. `created_at` columns are not typically indexed, so ordering by them for big tables is going to be an expensive task. Unless you're doing something weird, ordering by `id` will accomplish the same thing, and since it's the primary key it's basically ordered for free. So that's one thing to consider. It's still going to be an issue for tables with million of rows, but then again, this is perhaps impossible to do strictly in the database with just Arel or portable SQL. 
Mathamagic
This is a relatively common approach to modern GUIs. Sadly crossplatform GUI development in Ruby really is hard with no great options. Tk looks good at first, until you realize you really need [ActiveTcl](http://www.activestate.com/activetcl) to get the nicest-looking widgets. Try playing with Ruby's example apps (there are a bunch [distributed with Ruby](https://github.com/ruby/ruby/tree/trunk/ext/tk/sample)) and you'll find you need ever more plugins and workarounds for everything to work. Then you can puzzle out how users will install ActiveTcl and plugins... The best "native" option I've found is [jrubyfx](https://github.com/jruby/jrubyfx) which is an interface to JavaFX. But it's also a bit shaky and convoluted. So really shipping a webapp as a desktop app is not crazy or awful, and you can use your existing skills instead of wrestling with a GUI framework.
This is a terrible article. ||= doesn't behave anything like how he suggests in the text. x ||= 99 Is equivalent to: defined?(x) &amp;&amp; x or x = 99 The fact that ||= will assign if the variable is false or nil is *obvious* from the logical OR operator in front of the equals sign! I'd say the most surprising thing about the operator is that you *don't* have to define 'x' first - that is, it doesn't throw a NameError. As for the last paragraph... WTF does thread safety have to do with the ||= operator? You know what else is unsafe if you don't synchronise your code? Everything!
Thanks, had read it.
No worries! I should have created an issue instead of commenting here but meh. You forgot to include tests though ;-)
There are some meetups in The Netherlands. I'm mostly aware of the DenHaag.rb and Rotterdam.rb meetups (as I live on that side of the country). Probably Amsterdam has some meetups too.
The answer to question 1 isn't really that helpful. "A snippet of code that can be passed into a method" vs. "Another word used to describe a method" both describe an anonymous function. Blocks are closures, they retain information from the scope where they were described. The answer to question 10 is incorrect. Returning from a block will result in a LocalJumpError. irb(main):024:0&gt; def rawr; yield; end =&gt; nil irb(main):025:0&gt; rawr { return } LocalJumpError: unexpected return from (irb):25:in `block in irb_binding' from (irb):24:in `rawr' from (irb):25 from /usr/local/bin/irb:12:in `&lt;main&gt;' You can return from a Proc however. irb(main):031:0&gt; def rawr; Proc.new { return }.call; puts 'cats'; end =&gt; nil irb(main):032:0&gt; rawr =&gt; nil In that case it'll escape from the enclosing method, a lambda will resume immediately from the next line. irb(main):033:0&gt; def rawr; lambda { return }.call; puts 'cats'; end =&gt; nil irb(main):034:0&gt; rawr cats =&gt; nil
Realistically you'd just keep track of the users streak somewhere, and only compute backwards to see if from today the current streak is longer, updating as you go. You could get away with much much less if you were implementing it on a large scale.
Is there no way to do inject configs? It can only be done on a global level? It looks like it but want to check.
The general reason that a rubyist should take a look is that it lets you author an html presentation using technology that you're used to: haml, slim, textile, erb, etc. The entire stack is ruby: tilt, gemoji, and you've got auto-preview (change a file, your browser reloads) using guard-livereload, and rack-livereload. Let me know if you have any questions!
Thanks for the reply. Checking out Q as it seems simple enough, and gives an API for working with callback structured libraries.
One cannot retain his monthly 50 points, ungiven pionts are not being paid. In my opinion, I wouldnt condiser it as an 'receiving points will motivate people to do for each other things that encourage gratitude and point transfers'. I'd call it more like a good will of group of people that meets, works, shares experiences 5 days/week. 
Regarding the block syntax, I created an issue and will work on that. I'll study your other proposition 
I dislike the usage, but it is a pretty cool (and simple) gem. require 'has_streak' class User &lt; ActiveRecord::Base include Streakable end Now all the code is concised into one model, the dependencies are clear, and all other models don't magically has access to the `has_streak` method. has_streak(:posts) Could also be a solution, so you can generate the methods like: User.post_streak
Because you're working in a team, and as part of team there is the expectation that you will communicate with your team. Wether that is related to fires, or project stuff, or because someone has a question or needs your help or because there's a funny video they want you to watch.. it doesn't matter... I want to be able to communicate with my team. If that doesn't work for you, that's okay too :)
So only given points carry value, that's good. Sounds interesting and the amounts are probably too low to inspire hacking (like everyone transferring 50 points to the next person at the end of the month). &gt; In my opinion, I wouldnt condiser it as an 'receiving points will motivate people to do for each other things that encourage gratitude and point transfers'. I'd call it more like a good will of group of people that meets, works, shares experiences 5 days/week. Are you saying that the points will show the good will people have for each other? The app description clearly speaks about motivating your colleagues so that's confusing for me. Also the examples of transfers showed "thanks for the call" and I consider that gratitude for a specific action. Looks like tipping to me (tipping service staff like waiters and barbers is the norm in the US). Please clarify if I am not understanding correctly. This is a very interesting social experiment and I'd love to hear how it goes. It would be great if you posted a series of blog entries with stats. My concern with such a system would be that some actions will receive points and some will not. Eventually, "favors" that do not receive points may build resentment. "After all, why should I waste time to do favors that do not bring points or for people who do not tip me? I'd better spare my efforts for the right people and favors." Again, the sums are probably very low to make a difference in this way but I imagine you get the point: someone expecting a reward for their efforts will perform less well than someone who does not. http://www.alfiekohn.org/teaching/ror.htm
Cool gem, I know I was looking for something like this a few months back. However, in a production app with thousands/millions of records in a table it doesn't make sense to do this in ruby, better to use sql. Postgres has a great 'generate_series' function that can also take timezone into account which is often very important. It would be awesome if Rails had AR support for more advanced sql functions
Thanks! I've been thinking about putting together a short (1-2min) screencast that'd be front-and-center from the repo and the companion website. I think that'd suffice? This screencast would highlight "what you write" and display "what you get." It'd detail markdown, emoji, live-reload, etc. As of this very instant, I think the best I can do is point you to this tutorial: http://jedcn.github.io/reveal-ck/tutorial/ and the actual [slides generated from the tutorial markdown](http://jedcn.github.io/reveal-ck/tutorial/slides/index.html#/).
This is a good point. People talk about explicitly passing blocks and then using the call method so I can definitely see confusion there. In reality a explicit block is actually converted to a Proc, which was why I had made that distinction. Maybe I'll have to be more specific in my question definition? Maybe a code example would be good here too. 
http://lrug.org/ Is the London Ruby Users Group. They seem like a friendly bunch. 
This is really cool! Some great work here /u/jedcn 
Oh didn't see the link! Yea I think the generated tutorial would be sufficient. Thanks.
&gt; There are some different opinions around whether or not blocks are closures or not. Some say that blocks are not complete closures, thought they are often referred to as a closures. Blocks are closure like, but can’t be used outside of the scope they were defined, so they don’t 100% qualify as a closure. A Proc or a lambda on the other hand are closures, according to more strict definitions. Since there was some disagreement in the blogosphere around this topic I basically used The Ruby Programming Language[1] (p. 200) as my ultimate reference. The definition from The Ruby Programming Language reads like it was explaining blocks to someone that had never written code before. Anecdotal I know, but I've never heard anyone refer to them that way. Blocks retain information from the referenced environment, as do procs and lambdas. I'm not sure what you mean by &gt; but can’t be used outside of the scope they were defined You could argue that once you capture a block it becomes a proc, but without checking what MRI does I'd argue a block is just a sugary proc generally for immediate use. &gt; The example in IRB, is failing because the function call rawr { return } is called directly from IRB and not from within a method. If it was called from within a method it would return from that parent method. Exactly, however the question is "How does a returns statement act within a block?". There's a dangling ", assuming you supply the block from another method".
Amen. Would love to hear what problems/issues people have with it. Any feedback is better then no feedback :)
I had no problems with rbenv on upgrade. Everything just worked when my system came back up. 
I'll upgrade my personal computer tonight and see what's what. On the surface, it looks like just upgrading homebrew and RVM should do the trick. Generally I find myself re-installing most of my rubies and brew packages whenever I do this.
Why did you switch? Why should I switch? I am kinda in the boat of "if it ant broke, don't fix it"
I've been on Yosemite for a while now with no issues doing development using RVM. I would say you're pretty safe to do the upgrade. 
You might look in to controlling https://wiki.archlinux.org/index.php/rdesktop on the command line
Yeah, I ideally was trying to run the script without having to invoke the OS, or other non-ruby scripts. However, if that's my only option, then that may be what I end up doing.
I had the same experience. Nothing broken that I've found yet.
Everything seems to work!
I'm not him, but I can say I switched because I was having trouble integrating RVM with TextMate, and more broadly I was bothered by the fact that RVM was so complex that I couldn't reason about it. Now I use rbenv, and I'm not saying it's a perfect piece of software, but in the rare case when it's not working the way I expect I can always figure out why. In your case, if RVM is doing what you need it to, you're fine.
I first played with Ruby in 1999. The reason I gave it a try was because I was working with some Japanese software developers who were praising it. At that time, there was very little resources and community around Ruby unless you spoke Japanese. Meanwhile, Python had a two year headstart, and it's original communities and resources were in English. Rails didn't just give Ruby it's first proper web framework, it spawned an English speaking community around Ruby. It was cultural and language barriers that primarily slowed Ruby's initial adoption in North America and Europe. 
Based on your feedback, I've added an animated gif to the main README in the project. My hope is to give you a better idea for how reveal-ck is used and what it produces: https://github.com/jedcn/reveal-ck#what-is-it-like. Thanks again!
I upgraded at Beta 2 and everything just worked. It was surprising.
I'm getting an error when installing ruby 1.9.2 with rvm on Yosemite. Could someone help me? I updated homebrew and rvm. I'm working with someone else on this project so I can't upgrade ruby. I put a link to my output below. Thanks ahead of time! http://pastie.org/private/0y1mv6mgevqgmggiqgqcg
Only reason why i have ruby installed on windows is that I've written some interactive Windows Services in ruby, compiled via ocra.
eh, USENET (with a decent GUI client on a Mac) was basically like reddit only decentralized and not a single company's product, with plenty of programming-lang groups. it was out there. PureData, an open-source version of Max/MSP, had an entire extension-system named GridFlow whereby one could write modules in Ruby.. and the GF authors were even trying to make Ruby "self-hosting" by rewriting most of the stdlib in Ruby and experimenting with VMs - a full decade before i remember Rubinius/JRuby people talking about this again. between Perl, Python, TCL, a dozen varieties of SH, C, C++, Java, SML, the mid 90s already arguably had plenty of programming languages competing for developer attention. not terribly shocking it took a while for ruby to attain traction
This reminds of RMarkdown (uses yaml headers and md text), which may even be more mature at this point. RMarkdown is also great for running R code that is on your slides and showing the output (text/tables/plots) in your slides as well. It also comes with an awesome tufte style template for print reports. However, even though RMarkdown advertises it works with inline Ruby, I could not get it to show the code in proper colors/formatting. Can anyone suggest something that allows you to write Ruby code directly into your slides/reports? reveal-ck doesn't seem to be able to do that right now.
I used RVM for a long time and also moved to rbenv. It's just more stable, simple. 
No problems on my end either
Dont know what the cause is but I had major problems compiling C after upgrading last time, apple changed the path/version or something. Try specifying another compiler
This is the same reasoning that led me from rbenv to chruby. I especially don't miss rvm.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SOLID (object-oriented design)**](https://en.wikipedia.org/wiki/SOLID%20(object-oriented%20design\)): [](#sfw) --- &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), __SOLID__ (__Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion__) is a [mnemonic](https://en.wikipedia.org/wiki/Mnemonic) [acronym](https://en.wikipedia.org/wiki/Acronym) introduced by Michael Feathers for the "first five principles" named by [Robert C. Martin](https://en.wikipedia.org/wiki/Robert_C._Martin) in the early 2000s that stands for five basic principles of [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) and [design](https://en.wikipedia.org/wiki/Object-oriented_design). The principles, when applied together, intend to make it more likely that a [programmer](https://en.wikipedia.org/wiki/Computer_programmer) will create a system that is easy to [maintain](https://en.wikipedia.org/wiki/Software_maintenance) and extend over time. The principles of SOLID are guidelines that can be applied while working on software to remove [code smells](https://en.wikipedia.org/wiki/Code_smell) by causing the programmer to [refactor](https://en.wikipedia.org/wiki/Code_refactoring) the software's [source code](https://en.wikipedia.org/wiki/Source_code) until it is both legible and extensible. It is part of an overall strategy of [agile](https://en.wikipedia.org/wiki/Agile_software_development) and [adaptive programming](https://en.wikipedia.org/wiki/Adaptive_Software_Development). &gt; --- ^Interesting: [^Object-oriented ^design](https://en.wikipedia.org/wiki/Object-oriented_design) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^Open/closed ^principle](https://en.wikipedia.org/wiki/Open/closed_principle) ^| [^Interface ^segregation ^principle](https://en.wikipedia.org/wiki/Interface_segregation_principle) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+clbxgft) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+clbxgft)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Were I to do it over again *now*, I too might choose `chruby` over `rbenv`. What turned me into an RVM survivor was trying to get CruiseControl up and happy with RVM. Took all of about five minutes to get it right with `rbenv`, and half of that was double-checking that yes, it really was as straightforward as it seemed to be. I *like* when things work the way I expect them to. As a regular user of different development tools, this is a depressingly far more rare experience than it "ought" to be. (We've only got so much blood available; be selective about the edges you choose to bleed on.)
Regarding your question about alternatives-- I'm not aware of any-- but I scan through [this list of web-based slideshow software on wikipedia](https://en.wikipedia.org/wiki/Web-based_slideshow#List) every so often, maybe that will be helpful? This is /r/ruby, so it's worth noting that the last time I saw matz present he used [rabbit](http://rabbit-shocker.org/en/). ... I wasn't aware of [RMarkdown](https://support.rstudio.com/hc/en-us/articles/200552086-Using-R-Markdown)-- that's pretty neat. My understanding of reproducible research is limited to [emacs' babel](http://orgmode.org/worg/org-contrib/babel/intro.html) so I think I understand where you're coming from. With that said, I think you should decide if you like "the look" of [reveal.js presentations](http://lab.hakim.se/reveal-js/#/). If not, then definitely pass on reveal-ck. But if you do like reveal.js (which has the syntax highlighting you're looking for), then you can build a system where a single command can kick off various other (ruby or non-ruby) commands that download data sets, run code, generate plots, build images, whatever-- and then follow all of that up with a reveal-ck generate. ... I'm a rake fan and so if I were doing this it would likely take the form of a Rakefile that causes the data analysis and image generation to occur, and then your slides file would be, say, slides.haml (not slides.md), and I'd write the presentation in haml. I'd pick haml over markdown because you get finer control over the end result and could use the [contents_of helper](https://www.relishapp.com/jedcn/reveal-ck/docs/contents-of-insert-files-into-slides) to inline the same research + code snippets that you used to generate your image plots. If you copy the generated images into the "images/" directory they'll be copied into your presentation and will be available for easy reference. As you're well aware-- the neat part of investing in this system is that if your data and/or code snippets change, you can just re-run "rake" and your slides will be re-generated in place with the latest and greatest. ... Anyway.. let me know if this sounds appealing to you, and I'll can supply some additional details. Finally, here's a screencast I made that shows [some tips for achieving what's possible with haml](https://vimeo.com/jedcn/reveal-ck-stop-haml-time).
Mine totally stuck on less than a minute... Now I know why! Thanks!
Postgres failed to launch for me after the update. Apparently empty directories were "cleaned up" during the upgrade process. Recreating them worked mkdir /usr/local/var/postgres/pg_tblspc mkdir /usr/local/var/postgres/pg_twophase mkdir /usr/local/var/postgres/pg_stat_tmp Solution from: http://stackoverflow.com/questions/25970132/pg-tblspc-missing-after-installation-of-os-x-yosemite-beta
Very slick and feature rich! Vcs style time tracking... titillating
There's a problem with that version of gcc on Yosemite. I ran into this a few weeks ago with brew. My notes say: brew tap homebrew/dupes brew install apple-gcc42 rvm install ruby-1.9.3-p194 --with-gcc=gcc42 Is how I got past it.
Well it ran over night and it looks like it completely locked up. Looks like I'm doing a clean install this weekend.
Worked fine for me!
Update went fine. However, I have my system on 24 hr format. While existing appointments in iCal show in this format, I cannot add new appointments in a 24 hr format. 
It goes back to why I chose RVM in the first place I didn't know better. Now by saying I didn't know better I'm not saying RVM is broken, bad, or bloated. I'm just saying it isn't the best choice for me. For the last few years my main machines had been pair of older MacBooks. Yes, MacBooks the old white plastic shell computers. As they aged I maxed out the RAM, upgraded to SSD and eventually left Mac OS X for linux. I actually was kind of happy for the year plus I was running linux exclusively. Oddly, my current 10.10 setup on my MacBook Pro looks much like my linux systems, anyway during that time I switched to rbenv as it just intergraded with my work flow a bit better... and I've grown to like it a lot. It wasn't that hard for me to switch as something about RVM always rubbed me the wrong way... I just can't put my finger on it. So then the next question might be why did I choose rbenv over chruby? I didn't, and still don't know enough about chruby. So maybe chruby is 'better', but what is better really comes down to you. All three do a job and they do it very well.
Ruby 1.8 and 1.9 and JRuby 1.6.7.2 and JRuby 1.7.x all appear to run fine on Os X. As regards to wanting to use linux, that's trivially easy to accomplish. Donwload VirtualBox, install it, download a linux development virtualbox image file, and boot a virtual linux server. All you need to do is mount your Os X dev folders in the the virtual linux machine and you're good.
Out of curiosity which distro? What issues are you having that is making you consider switching? I think most guides, for ruby, online are written assuming your using a Mac OS X. And if you conduct a poll on people who write ruby code, I would imagine most use OS X.So yeah it works just fine.
Best answer ever.
Thank you :D!
Use Vagrant to make that even easier!
Only needed to install the latest version of VirtualBox because the kernel extensions broke due to the upgrade. Same thing happened with Mavericks.
Primarily because they can.
Ruby/Rails is very much at home on OSX. It's probably the dominant platform for the dev community. Start off right though, use a Ruby version manager instead of the Ruby that ships with the OS (I use rbenv, but chruby is a popular alternative, and RVM is also an option, but not really recommended anymore). Also, homebrew is a great way to manage dependencies like installing database engines, etc...
My main systems for years where Macs running the latest version of OS X... I've been a "Mac Guy" basically my entire life. I've used System 6 and up; including early Rhapsody builds, all the Mac OS X 10.0 public betas... moved to 10.0 full time before it was ready from everyday use. However I stopped updating my laptops for a while and I was using to old MacBooks; I maxed out the RAM and upgraded to SSD... but I needed to slim the system down and moved to Arch Linux for about a year. (Which I'm sure your well aware thats what Manjaro is derived from). Earlier this year I bought a new MacBook and moved back to the safety and comfort of MacOS X. Just a few ideas if you wash to keep using your linux boxes... * Drop Gnome and try MATE or Cinnamon (I tried both like neither) * It is linux after all tweak something together you like. Personally, I went the second route. I didn't use a tradition desktop environment... I used the openbox window manger with the numix themes... used things like tint2 for a task manger bar... and punted on the font issues by using [bohoomil fontconfig-ultimate &amp; ](infinality-bundle). Oh, for a file manger I used thunar. I always wanted to use a tiling window manger but I didn't like a single one I tried.
Ruby is awesome on OSX. It comes pre-installed, and RVM works great.
3rd*
Works great on a mac. And you can move all your custom .bashrc/.bash_profile/etc. hacks to your mac as well. And then there is native pbcopy/pbpaste as well. The only thing that may take getting used to is that OS X users eschew sudo when dealing with /usr/local/. Its more idiomatic on OS X to let /usr/local/ be controlled by the user. But that may change with Yosemite.
You shouldn't do that. Search is quite a hard problem to solve. It's common for Ruby on Rails apps to make use of elastic search in order to implement that. Take a look here: http://www.toptal.com/ruby-on-rails/elasticsearch-for-ruby-on-rails-an-introduction-to-chewy
a friendly warning to homebrewers - The [informative article linked above](https://jimlindley.com/blog/yosemite-upgrade-homebrew-tips/) mentions that you can check the install logs with Command-L to see if things are progressing. I was stuck at '2 mins left' for a couple of hours before I found said article and did open up the log viewer to check that it hadn't hung. Things were progressing so I went to bed. This morning however, I woke up to find that the install had failed because the log buffer was full.. I'm not sure if the issue will persist without the logs being displayed or not (I'm currently midway through my followup attempt) but I would recommend that you close the log window when not in use. 
***Okay, I do realize this reply can easily come off as a bit flame/trollish that is not my intent.*** What exactly does 'native' mean with regarding to pbcopy/pbpaste; well I know the answer but lets be fair nothing is really 'native' on a linux system then... so lets just say pbcopy/pbpaste is more elegant than xclip on linux. It should also be noted that Homebrew is a must when moving from linux to OS X.
Maybe you could use a category/tagging system to group up similar terms. You could also take a look at specialized search software like [Elastic Search](http://www.elasticsearch.org/), there is also this ruby gem for [Apache Solr](http://lucene.apache.org/solr/) -&gt; https://github.com/rsolr/rsolr.
I used to use rvm, but switched to rbenv. Why is it no longer recommended?
See if you can use your database to do some clever stuff. [Postgres full-text search is Good Enough!](http://blog.lostpropertyhq.com/postgres-full-text-search-is-good-enough/) 
Ruby has a symbol to proc construct which can simplify what you did with the block for collect there: sentence.split.collect(&amp;:downcase)
Primarily because RVM overrides some shell functions (like cd if I remember correctly). The issue is *mostly* philosophical, because most folks will never even notice, but I'd never want to use RVM in production for that reason (for example). And it'd be nice to be using the same ruby version management tool in production and development. Conversely rbenv and chruby are lighter weight and self-contained and less feature-rich. Also, bundler has largely obviated the need for one of RVM's most useful features which was gemsets.
That was the feeling I got while reading around. I mostly switched because I love switching. I switch from Android to iOS each phone upgrade just to see what's on the other side of the aisle, so why not do the same with version management just to see what's what?
happy to concede on both counts
I used RVM back in 2011 ... but I've been on rbenv for over a year now. Next setup I do, I might try chruby.
Oh that's super good to know, thanks!
My mouse cursor doesn't change shape anymore whenever I hover over hyperlinks in chrome and safari. Is anybody else having this issue? It's very annoying! 
Linux is my personal favorite, but both Linux and OS X are fantastic choices for Ruby development and I use both regularly.
Mac is the primary platform you will see blogs and articles and stack overflows about related to RuBy and RoR development. Linux is the de facto standard for a deployed (production-like) environment. Windows is generally avoided at all costs by most Ruby and RoR devs. Many tools simply do not and will never run on Windows.
&gt;In my experience, OS X is the primary choice of ~~Ruby devs~~ hipsters more concerned with how good their laptop looks rather than what's on it.
Works great under OS X, but I prefer it in Linux. When on a mac, I'll use a Linux virtual machine to better emulate the production environment the software will be used in. This way I get the best of both worlds.
no problems at all. 
It could be both, you know. I won't dismiss the hipster factor entirely, but I've met a lot of damn good Ruby devs in the 9.5 years I've been coding in Ruby. MOST of them use OS X, with a decent fraction using their favored Linux distro, and a handful on Windows.
**brew** I have a homebrew install, and use if for some Node and lots of Ruby stuff. It took about an hour to do the copy back to usr/local (looked hung on 'one minute remaining"). I *did not* follow the instructions in [this blog post](https://jimlindley.com/blog/yosemite-upgrade-homebrew-tips/). Before and after the Yosemite install: brew update **git** After the Yosemite install: brew upgrade hub brew upgrade git **X Code** After the Yosemite install, opening X Code prompted me to "Install additional components?" (unnamed, creepy) and I clicked "Yes". After that I also installed the command line tools with: xcode-select --install **rvm** After the Yosemite install: rvm get head **memcached** After the Yosemite install: brew upgrade memcached **redis** After the Yosemite install: brew upgrade redis **postgresql** Before the Yosemite install, I had already upgraded to PostgreSQL **9.3**, and everything just worked. **pow** After the Yosemite install: brew unlink pow brew install pow # followed instructions Also tried following the [readme](https://github.com/basecamp/pow/blob/master/README.md) but still not working: brew unlink pow curl get.pow.cx | sh Then tried uninstalling and reinstalling pow: curl get.pow.cx/uninstall.sh | sh curl get.pow.cx | sh And *that* worked. **RubyMine** After the Yosemite install, attempting to open RubyMine I was met with "To open "RubyMine" you need to install the legacy Java SE 6 runtime. So I clicked "More Info..." which [took me to a download page from Apple](http://support.apple.com/kb/DL1572). Downloaded &amp; Installed, then re-opened RubyMine. **Overall** So far only pow had trouble, but I got it working (see above).
Homebrew broke for me, Yosemite no longer uses ruby 1.8 as default. $ vim /usr/local/Library/brew.rb Replace #!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby -W0 with #!/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby -W0
lol. It's nothing to do with how the laptop looks, and everything to do with the fact the OS X is a descendant of BSD. All the Ruby tooling is designed for a POSIX environment. Windows is a joke in that respect, so that leaves you with only two options: Linux or OS X. And there are plenty of reasons why people might not want to use Linux.
I'm working on a Rails app right now and my dev environment is on OS X. I used to work on a Ruby app in my previous company on a Windows env but it's too much of a hassle to get the dev env correct. Also, even the basic stuff is wildly different between Windows and POSIX, like file modes. Makes it hard to debug stuff. The only reason I got a mac was because of that sweet retina screen. Text has never looked better and as a dev, I look at text all the time. The bad thing with OS X is package management. Homebrew helps but it doesn't hold a candle to apt or yum. However, OS X as a dev env is quite popular enough that everything is a Google search away. 
Your regex matches everything because it matches the empty string! If you put `^$` around it to force a full string match then it would still fail, since it would require all occurrences of each vowel in the string to be adjacent (e.g. it wouldn't match "peter" due to the "t"). My instinctive solution to this problem would be .gsub(/[^aeiou]/,'').match(/^a*e*i*o*u*$/) but if you really want to do it in a single regex then you could do something like /^[a-df-hj-np-tv-z]*[b-hj-np-tv-z]*[...]*[...]*[...]*$/ I omitted the last three character classes due to laziness - the idea is that it's [consonant or a]\*[consonant or e]\* etc. If you're using 1.9 or later then I think you have access to extended character classes that let you write something like `[a-z&amp;&amp;[^eiou]]` instead of `[a-df-hj-np-tv-z]`, which is a little neater.
EDIT4: tldr: two simple regexp-based solutions, one that finds the words where vowels are correctly ordered: /^[^eiou]*[^aiou]*[^aeou]*[^aeiu]*[^aeio]*$/ and an equivalent one that finds the words where vowels are *not* correctly ordered: /e.*a|i.*[ae]|o.*[aei]|u.*[aeio]/ ORIGINAL POST: /e.*a|i.*[ae]|o.*[aei]|u.*[aeio]/ Basically, to check if all the vowels are correctly ordered, we just need to check that there are no vowels badly ordered. You can see in http://rubular.com/r/8TFTbzKfAd that it correctly match the three last words. `/e.*?a|i.*?[ae]|o.*?[aei]|u.*?[aeio]/` may or may not be quicker by using the non-greedy version of `*`. EDIT: to correct your regexp, you need to modify some things: * there can be more than one letter before the first `a` so `.` need to become `[^aeiou]*` * as explained by /u/amdpox it currently requires all occurences of each vowel to be adjacent, so `a*[^aeiou]*` becomes `(a*[^aeiou]*)*` * at last, you want to ensure that the property is verified everywhere, and not check if a substring match, so you need `^` and `$` So your regexp would become for example (http://rubular.com/r/ZG5yxwuSvw): /^[^aeiou]*(a[^aeiou]*)*(e[^aeiou]*)*(i[^aeiou]*)*(o[^aeiou]*)*(u[^aeiou]*)*$/ You can also see that we actually find the same result as /u/amdpox: by removing `/[\^aeiou]/` from the string, we only need to check `/^a*e*i*o*u*$/` EDIT2: In fact, the reason your regexp matches *everything* is that a word where the vowels are bardly ordered is simply the concatenation of multiples subwords where the vowels are well ordered (`"Broke" = "Brok" + "e"`), and your regexp finds all these subwords. You can verify if by running `"Broke".scan(/.a*[^aeiou]*e*[^aeiou]*i*[^aeiou]*o*[^aeiou]*u*[^aeiou]*/)` EDIT3: the first regexp was originally `/e(!?.*a)|i(!?.*[ae])|o(!?.*[aei])|u(!?.*[aeio])/`
Did they start counting at zero
 Working with what little I know how to do without using .gsub I kind of went about it the same way and took the word to an array and .deleted_if the value wasn't [aeiou]. I understand how you're building your regex and totally understand how it would work, but I think we can both agree /u/_darkleo's answer is a little easier to type out. Thanks for the explanation of an error I wasn't even aware of! Off to go look up what an extended character class is...
Saw an offer on StackSocial and was wondering if it was worth it, what do you think? https://stacksocial.com/sales/the-ruby-on-rails-rookie-to-rockstar-bundle
I only wish i had this problem, I really only like the mouse pointer and the "I"-beam... and despise the pointing finger hand; for some reason it doesn't feel right. Maybe it goes back to those old web days where the cool new trick was to change your pointer to some animal.
Thanks so much for these tips, helped a lot.
Please don't use a regex for this. Pull out all non vowels and compare the order to the same string except sorted
This one
Fuck.
If efficiency is a concern at all, you kinda have to loop thru the characters one by one to be able to exit early. Solutions that involve sorting, etc are elegant but you know... Not something you'd want to run on an enormous string or file. Going through the letters once is straight up O(n)
Why wouldn't you use the Hartl Rails Tutorial? https://www.railstutorial.org/book
ive been using Ruby for about 15 years. although i prefer OCaml for more complex projects i like Ruby for its approachability and find it much cleaner for quick jobs (which won't require subsequent devs to understand "Monad Transformer Stacks" or "dependent type monomorphisms".. to understand) than Perl or Bash. if you have 0 degree, little paid-experience, and you won't sign NDAs or won't write proprietary software, I can assure you the demand is essentially 0. even if you dogfood your own apps to the point you've written your own [webservers](https://github.com/hallwaykid/pw), CMSes, webmail engines etc 
Don't use Ruby on Windows / OS X / Linux. Use Vagrant ! But if you are too lazy to, I used Ruby on OS X for a year now, and everything is fine. Just keep in mind to use RVM to keep your Ruby version up-to-date, and to use GEMSET ! 
Possible. They'll want experience, at least a bit for Jr Dev job, but I know ROR is in high demand in places
Being a recruiter for ten years I would hope you know how to land a job... That being said, you will get a job if you prove to your self that you have a passion for programming. 
since I use vagrant to vm into an ubuntu box, is this the same as developing on native linux? 
Being a developer for 15 years, I would like to ask you to stop calling me.
Where are you located? In Boston and SF, you probably will be able to get some sort of gig. Find somewhere that needs some sort of domain knowledge you have (linkedin?) and approach it from that angle. I managed to make the transition because I was a good fit otherwise for the company.
Another handy bundler/gem thing is bundle console, which lets you experiment with the types defined in your gem. For example: pippi&gt; $ bundle console Resolving dependencies... irb(main):001:0&gt; Pippi::Report.new =&gt; #&lt;Pippi::Report:0x007fc1b35e26e0 @problems=[]&gt; 
Some day they will stop calling you when it's no longer a developer's market. 
Based on what you've stated, a while conditional block would be most appropriate. For example, if you were waiting for a user to enter 'q' on the command line: inputVal = nil begin puts "Input Value?" inputVal = gets.chomp end until inputVal == 'q' _Edit_ Note: The reason I recommend begin...end until instead of a standard until loop is that it ensures the code executes at least once. For example, if I had the following: inputVal = 'q' until inputVal == 'q' do puts "Input val?" inputVal = gets.chomp end The loop would never be executed. Using the first code sample, the user would be prompted for input no matter what the value of inputVal currently is. In this example, since we were declaring the input value immediately before the loop, it really wouldn't matter.
That's much easier than what I'm doing at the moment! I haven't gotten to play with begin or until yet. I was setting a variable to false then looping through a while loop until the correct input is given, then switching the variable to true.
Well, if anyone could do it, we'd all be making $15/hr. Not worried at all about that shift. Please stop making unsolicited phone calls. Email all you want, but stop calling me god damnit.
Seriously, it's really awkward to sit in the middle of the office and explain that it's a bad time to talk and I already have a job while not being overheard by my manager who sits in the next cube. 
This has the desired effect, but `begin ... end while` is not a [recommended construct](http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/6745) because it's a little unclear what's going on. This is a bit clearer: loop do print "Input? " break if gets.chomp == "q" end 
Lol that is so not the case. Jr. RoR is still expected to know Ruby and at least understand the core of Rails. As someone who has experience in both and tried getting a Jr job, and getting turned down consistently because I didn't know enough. My job now also does not consist of small grunt work. Knowing how to open Sublime does not get you a job.
I guess I don't understand the bit about initializing inputVal before beginning the loop, in your two examples. In the first one, you don't need to initialize it, because, as you say, the body of the loop will get executed at least once. In the second one, you do need to initialize it, because you're checking for the termination condition at the loop beginning. But in that case, you'd probably set it to nil or some other unexpected value.
Another idea is to create a method that collects user input, and then use an `until` loop. def user_input puts 'What do you say?' gets.chomp end until (collected_input = user_input) == 'q' puts "That isn't what I had in mind." end And if you need more complex validation of the input, you can also write a method for the termination condition. def user_input puts 'What do you say?' gets.chomp end def valid_input?(input) input.downcase == 'cool' end until valid_input?(collected_input = user_input) puts "Not cool." end 
Excellent. I hired someone with a similar resume last week. Ruby skills in DC are in extremely high demand right now. If you attend a local meetup you'll find you are not alone. Move fast while demand is high, find a recruiter, start interviewing before you feel totally comfortable even if you bomb a few.
&gt; Also, it's up to you but you don't really need to learn Ruby and Rails separately if you already have coding experience. I disagree. If you already have coding experience, the learning ruby part will probably be pretty quick (a day or two maybe, if your coding experience is in similar stuff), but it's still advisable. 
I found the thing that helped me the most with interviewing for ruby jobs was working through katas (I used the kata gem). If you can implement the backpack problem with perfect style, you'll ace practical interviews. It also really helped with whiteboarding because I just knew the syntax cold. It's totally different from a real job (I jump between coffeescript, ruby, clojure and stylus all day and I _do_ need to think about syntax between all of them). But, it really helps to work on one language and know it cold when you're interviewing.
For development, the only thing thing I miss in OS X is Docker. Boot2Docker is a joke for any kind of serious work. 
It's always a good idea to initialize your variables.
sorry, I forgot to put the context of my IT skills. they were a couple of years of unix and novell admin and testing. Mostly consulting experience consisting of auditing operating systems (unix, NT) and integration work. i know my way around unix command line but no development experience.
I have no development experience but I went through rubymonk and quickly understood the ruby primer. I already picked up strings, arrays, methods, arguments etc. in classes I took for my degree.
thanks. I plan to look in the DC area. I'm not ready to interview yet. I'm probably 6-8 months to getting to a comfort level to interview in ROR. what kind of sample programs do you look for on github?
I'm about 30 min. outside Philly. relocating to DC is also a possibility.
Okay, thanks.
Oops, I meant that it's up to 4x faster than Unicorn and up to 2x faster than Puma. But I can't edit anymore. :(
ALL ABOARD THE #HYPE TRAIN
This sounds great! How come there's no comparison to Phusion Passenger?
You can state that is not the case in your experience. My experience has been different and I was not posting it to be a joke. A junior dev is not expected to know much. They're expected to be able to learn quickly and grow over time. It'll be clear during the interview process in most cases whether someone has the potential and capability to fill the role or not, and often times the interview process will expose a lack of knowledge about Ruby and/or Rails but highlight that they possess the critical thinking neccessary to accomplish the job they're simply lacking in syntax. Junior devs are given what seems like grunt work quite a bit of the time because a lot of the value of a junior dev comes from them learning the platform from the ground up and leaving the senior devs available to continue doing more valuable work to the company as a whole. During this process the junior dev not only provides a valuable service to the rest of the dev team, but, they become acquainted with the product and if being mentored properly, will grow into developing features and other parts of the product. Knowing how to open sublime/vim/etc alone will not get you a job, but, chances are if you know your editor well and can move around it with some matter of skill, you're going to leave a better impression than if you balk at how to edit a text file. This is also being said not in the stance that you can grab some clueless person X off the street and get them a junior dev position (who knows, you might be able to) but, for someone that's interested in programming, has a background in any language whatsoever, and/or IT. They have the desire and want to do it. They can get a junior position relatively quickly because mastery of the language is not an expected attribute for a junior position. In most cases that I've experienced in my career when looking for junior candidates you're looking to see if they have the skill to program and the attitude necessary to grow.
I think the fact you say you have a CS background is confusing some people in their answers, they are assuming that means you have development experience. 
I didn't mean to confuse. I stated I had a CS degree with background in IT.
Hello davidk01. I am one of the authors behind Raptor. I understand that you are being skeptical, and rightly so. If I were in your position, I would respond the same. :) After all the code is not out there yet. But we have actually spent a lot of blood, sweat and tears on the code already. It works - mostly. Unfortunately the last mile of tedious, boring work also has to be done. We have to polish installation, polish documentation. We have to fix the biggest bugs. We have to do extensive QA. We don't want to release a buggy product to the world which would ruin everybody's first impression. You could say that we follow the Blizzard mindset: better do it properly than to be too early. Some of you might say: just open source it. But the reality is, most people don't want to read the source code. They want a product, and they want one that works well. There's already a ton of crappy open source codebases out there that never become production-ready, and the Internet doesn't need more. That's why we've chosen to release the code after when we think it's worthy, not before. So why don't we announce it after it's completely done? Well, we've worked that way before, but it failed because we were too perfectionist. If we don't have a deadline, we have a tendency to never finish the work because there's always room for improvement. So by announcing it, we're putting a hard deadline on ourselves. If we don't release it on the announced date, we would receive much shame. It forces us to be not *too* perfectionist. Additionally, we've been at this project for so that that we think we deserve a little vacation. That's why the release date is a little bit more than a month from now, so that we can get rid of a bit of the stress. So, in the end, you are right to be critical. But we want to prove to you that we are in fact not bullshitting. So could you give us a chance to prove this to you? If you subscribe to our Twitter account, or to our mailing list, we will show you proof when the time comes. Thank you.
wtf? why not just post it when it's ready? why the suspense?
At least tell us how you did it. How your product works different than other products. Show us guts instead of 4x, 2x talk. I learned nothing from your home page and your comment.
We will. We have a vacation which begins tomorrow. In 1-2 weeks (when we've come back from our vacation) we will post on our mailing list some more details about how we achieved this performance. In the emails thereafter, we will reveal more information about Raptor, such as what other features it has. I understand you want to know more as soon as possible, but please bear with us. In the mean time, you might want to read this review by Fabio Akita, one of the early testers: http://www.akitaonrails.com/2014/10/19/the-new-kid-on-the-block-for-ruby-servers-raptor
&gt; But we want to prove to you that we are in fact not bullshitting. Then release the code, otherwise we'll keep calling it what it is: vaporware.
Because #SocialMediaDouchebags! Thunderclap.it, bro!
lol backpack problem in a practical interview
Post removed, this sub-reddit is to discuss code; not advertise vaporware.
It was done for the point of illustration, not practical use. In any case, the suggestion by /u/smix is a much cleaner approach than what I showed - I've been out of the Ruby loop for quite some time, and hadn't remembered off-hand what all loop types were available. To the OP: My suggestion is to follow the advice both /u/smix and /u/JeffMo have provided (in his other comment). Breaking out of a loop with the break keyword is much more explicit about your intention, and knowing when to use functions in place of inline code is a critical skill that you will develop as you continue to learn and practice programming.
I'm following your internet breadcrumbs around on this problem to see if anybody knows wtf is going on.
Yes.
I agree with the direct approach, but its really not FUD. They're entirely legitimate technical critiques. I stopped trusting RVM after the second time I saw it end up fork-bombing out of control and taking out an app server.
Here are some alternatives: - https://github.com/progrium/localtunnel Python, installation using `pip` - http://proxylocal.com Ruby, installation through Rubygems - https://ngrok.com Go, installation by downloading the binary - http://localtunnel.me Javascript, installation through NPM Personally I would recommend using Ngrok as it has more features compared to others.
It really depends but we usually talk about monthly aswell. (Swiss here)
If you're OCD like me, and want to have a relevant folder icon in your home folder for each item, here is a Ruby folder icon for you. FYI, this was a quick and dirty job, but it works well for me. To apply this to your folder, open the image in Preview (or right click and select copy). Select Copy from the Edit Menu. Go to your folder and select Get Info from the Right Click menu. Click on the upper left icon in the Get Info panel and then select Paste from the Edit menu. For those who would like the ICNS versions of each one of these, check out the Google Drive folder link below. I've also uploaded the corresponding PNG files so that you can preview them prior to downloading the ICNS. https://drive.google.com/folderview?id=0BwftKOSyj6dibjFETGpwcEs1Z2s&amp;usp=sharing
A blue ruby! Sacrilege! :p
Awesome. Whenever I get around to updating, this'll be useful!
hi there! sorry for a weekend silence. oh, I must have made some fuss by presenting you my own friday-afternoon casual, personal and a little bit emotional opinion. But, on the other hand, don't you think that motivation and good will sticks together as a well-matched couple? Anyway, really sorry for confusion. ps - thanks for link with article, i'll take a look at it asap. 
Someone know where can I get more icons like this? 
Yes. Every time I log into my Mac, the desktop has reverted back to a previous image. The volume level is muted. I have three UAD-2 PCI cards installed and I have to re-start my machine at least twice before it recognizes the cards. I can no longer use Logic Express because it crashes when I try to save the project. That's just the things I'm only now discovering. Already dreading the upgrade and hoping for OS 10.10.2 soon already. Lesson learned not to immediately upgrade on the initial release.
You can make them. Which ones did you have in mind? Here is a template http://coloradan.deviantart.com/art/Yosemite-Custom-Folder-459481587
These tools can be disappointing because there are so many false positives. For example on this page there are a bunch of "assignment in condition" reports: http://refactorcop.r14.railsrumble.com/redmine/redmine?page=3 But those are all intentional assignments. Neat tool though; nice formatting, good execution.
Python, for example.
Regarding XCode 6.1, brew doctor provided a link to me for a direct download of the latest XCode. Sorry, I don't have it handy anymore.
Personally I don't recommend RVM because I looked at the code...
How about OneDrive?
Wow, thank you ! Sorry for my ignorance but do you use photoshop to achieve that? 
**ruby-install** $ find . -type f | wc -l # 90 $ find . -type f | xargs wc -l # 5568 You'll find that a lot of the lines are actually just lists of checksums and other documentation. The actual code involved is much smaller, which is only about 302 lines total, with the rest being mostly documentation, tests, and checksums. RVM supports more workflows, tools, and features than any of the above. I don't use it as my primary tool. I prefer chruby and ruby-install, which are both extremely tiny, don't use shims, and do the simplest thing. rbenv was born out of a desire to reinvent a complex tool into a simple one, but unfortunately the author enjoys spreading complete fud along with reasonable assertions on why rbenv is somewhat preferable to RVM. I feel like it's comparing the minix you built in school with linux, with all that it wins and loses you.
That looks really nice. I'd love to use it if I could GET THIS FUCKING OS TO INSTALL GODDAMN IT
http://i.imgur.com/cJahmX1.png
If the tool becomes successful enough, it would be awesome if the presence of a `.rubocop.yml` was an indication that the project was opting in. I say this because I can imagine a lot of popular ruby projects getting inundated with PRs for style fixes that don't really contribute much, and rob the author of valuable time.
Basically, I use the template, place an image, do some resizing/cropping, and then use the blending to overlay the mask snippet.
You should read https://devcenter.heroku.com/articles/pgbackups If you want to copy the database from Heroku to your local machine, uou'll want to run: # This creates a DB snapshot, if there's not a recent enough scheduled backup for you. heroku pgbackups:capture --expire --app &lt;your heroku app name&gt; Then you can get the URL for that backup from: # You'll probably want to pipe this into a wget or curl command heroku pgbackups:url --app &lt;your heroku app name&gt; Otherwise you can download snapshots from the heroku.com interface. Once you have a dump file you can import it locally with the `pg_restore` command.
I upgraded from Mavericks and had no issues. Using Homebrew -&gt; mysql, phpmyadmin, memcached, elasticsearch, ffmpeg, imagemagic, etc.
That looks great, sir.
The main issue is that he wiped the database.yml with dummy info to conceal his private information. That's totally fine with me, of course, but it brings us to this impasse. So I've been able to configure the local app, run the bundle and install all of the gems/dependencies (terminology is blurry here for me), but when the app runs, there are errors from no database being present. At this moment I am attempting to just transfer within heroku and then start my journey from there. It seems the client and the former dev relationship is weakening quickly, so best to just do the easiest thing.
Nice one.. I'd like too see more basic at some point. :)
phusion passenger will be
Awesome, I stated in another comment that I'll likely just start my own heroku account and go through their collaborator process. From there I'll start transferring the db's myself. Hopefully it's a fairly straight forward process.
Anecdotal, but: After spending 15+ years with the Microsoft stack, I started switching over to RoR a couple of years at my old job and got a decent amount of experience with it. Several months ago, I landed a RoR job at an (almost entirely) RoR shop, some of whose employees I'd worked with in the past. They were having trouble finding RoR coders in the Philadelphia area (something I've heard from others as well) so they were willing to give me a shot - knowing I was a pretty experienced dev in general, even if I was a bit of a Rails n00b. A lot of people, myself and the people who hired me included, feel that an experienced programmer can switch stacks/languages fairly easily. My current employer and I were honest with ourselves about this up front - we agreed there'd be a learning process. So far (fingers crossed) things have been working out well. I got up to speed really quickly and was able to start pushing small fixes and features after just a day or two. Had a bunch of beginner-level questions my first few weeks... not so much RoR-specific questions but questions about the RoR *ecosysterm* - their build/deployment process, etc. So good luck. I think a lot of RoR shops would value an experienced coder who is new to RoR but has put time and effort into a few RoR projects he can show off on Github, especially in this job market where coders are in short supply. If there is a question mark in your work history it's probably the 10-year gap where you weren't working as a coder. But I don't think that's insurmountable either. (Of course, as a recruiter, you know way more about that part than I do!)
The installer told me that my hard drive needed to be repaired. When I tried to repair it, it told me it was fine. I couldn't continue with the installation, and it wouldn't let me go back to Mavericks...
If you run cmd as administrator does it do the same thing?
Your `let(:testargs)` is calling the method `def add_arg`. Your `def add_arg` method references `let(:testargs)`.
I'll bite and drop my email in there, but uhh, I hope you can live up to the hype. E: and I have to agree with /u/mperham; this is a weird way to announce something, especially over a month out.
Ugh, that sucks. 
 pxlsrt brute &lt;input.png&gt; &lt;output.png&gt; **pxlsrt** = name of the 'program' or gem that you want to run **brute** = what you want it to do **input.png** = the name of a file that is on your hard drive that you want to process **output.png** = the result of the programs actions on the input file This is the simplest command of the pxlsrt gem Here is a [example](http://imgur.com/a/OuOfy) of a input and output file using the following command pxlsrt brute .\rhToPEv.png output.png I feel like there is a output.png in your sunrise folder. There is no output in the Promptscreen as seen below: &gt;Minimal Wallpaper $ pxlsrt brute .\rhToPEv.png output.png &gt;DL is deprecated, please use Fiddle &gt;Minimal Wallpaper $ --- BTW I'm using Powershell as my prompt and a Module for it called [posh-git](https://github.com/dahlbyk/posh-git) and [pshazz](https://github.com/lukesampson/pshazz) so your prompt output could be different from mine at least the beginning
Thanks for the info. I found the problem. I was constantly running it from pxlsrt-master/lib instead of running it from pxlsrt-master/bin. Don't know why because all the important file are in /lib but it works this way. There is probably other method but I am fine with this. Again, thanks. 
I have to be a bit pedantic here. I think tools like flog and flay will help you identify sloppy code, but that is different than technical debt. Here is a [great](http://naildrivin5.com/blog/2012/10/05/making-it-right-technical-debt-vs-slop.html) article on the subject that says it way better than I could. Basically, writing sloppy code isn't technical debt. Though, `debt_ceiling` is a really cool name for this gem.
Purdy! I want a Python one now, too.
Oh, thanks!
I wrote my own using Beanstalk, its a good exercise in Unix and Ruby.
[pw](https://github.com/hallwaykid/pw) has been around for 8 years and i'm not announcing it for another 8. still 1 [user](http://m.whats-your.name/2014/10/20/?), 0 stars, 0 followers. oblivion is nice
nice. But it doesn't blend in with others in list or columns view for some reason
I don't think there's a good way to do that with a regex. I _think_ it's not actually possible with a traditional regular-expression regex (although I could be wrong). Although modern regex's let you do lookaheads and such that go beyond traditional regular expression languages -- I still think if a regex is possible at all, it's going to be a beast. Why are you wedded to a regex? Is is part of an assignment with that requirement? (And if it's an assignment, how are you going to learn anything just by copying and pasting someone elses solutoin anyway!)
Presumably you are setting the folder icon to the PNG itself? I think you may get better results using the PNG as the source image to make an ICNS file with a tool such as [makeicns](http://bitbucket.org/mkae/makeicns).
thanks but I didn't mean to imply I was a developer. I was never a developer. I did everything but development. Here is my ROR learning roadmap, please feel free to comment. I'm going through rubymonk for ruby and metaprogramming, then onto code academy for ruby primer. Then go through Michael Hartl's rails tutorial. Then the pragmatic studio Rails Programming (looks like there's a couple of exercises online).
Definitely need to do that.
Really? You'd borrow $100 to hopefully get an $80 return on investment someday? That's exactly the kind of economics present when you 1. write slop, and then 2. refactor that slop into something "better." The article I linked to does a great job of pointing this out.
Not dropping my e-mail in a random website that MIGHT eventually have a product. Will hopefully see what you have in a month when it comes out. Hopefully something free and actually useful :).
Oh wow; can't believe I overlooked that. Thanks so much for the input.
Why would they only work if there is exactly one of each vowel in the word? For the first one, `/e(!?.*a)|i(!?.*[ae])|o(!?.*[aei])|u(!?.*[aeio])/` which should be `/e.*a|i.*[ae]|o.*[aei]|u.*[aeio]/` or even `/e.*?a|i.*?[ae]|o.*?[aei]|u.*?[aeio]/` which is possibly even quicker (I'll edit my first post, it works exactly the same but is much simpler), I simply check the reverse condition. So I only need to search for (for example) *one* `e` (`/e/`) followed by *any subword* (`/.*/`) and a `a`. If there is more than one `e` or one `a`, it doesn't change anything. For the second one, let's just consider there is only vowels, so `/^[^aeiou]*(a[^aeiou]*)*(e[^aeiou]*)*(i[^aeiou]*)*(o[^aeiou]*)*(u[^aeiou]*)*$/` means `/^(a*)*(e*)*(i*)*(o*)*(u*)*$/`, which means `/^a*e*i*o*u*$/`. This last regexp matches any word which is "start of line" "whatever number of `a`", ... "end of line", so all the words that only contains voyels, and are correctly ordered. The consonants can either be at the start of the word, or after a vowel, so we need to add `/[^aeiou]\` at the start, and change each vowel by "a vowel that can be followed by any number of consonants", that is to change `/a/` to `/a[^aeiou]*/`, and we find the original regexp. In final, they both works for all words written in lower case (which is my only assumption of the specs), but that can be changed by setting the case insensitive flag `i`. For why OP wants a regexp for this, regarding his questions, I think he only wanted to use regexps. They may be often the wrong tool to use, but regular expressions are incredibly powerful when you know how to use them well.
totally. i think the reason the cd thing is hyped as such a thing, not considering technical merits of the argument, is that it's just symptomatic of the overreaching inherent in rvm at this point. a better explanation is just to dump `env` and see exactly how much pollution is going on; when all most folks want to do is have multiple rubies installed and auto-switch on the presence of .ruby-version, a simple version managing utility shouldn't be getting between the user and the system to that extent.
"Traditionnal" regexps matches type-3 languages in the Chomsky hierarchy, that is, the languages obtained with a finite state automaton. It is actually a good and easy exercise to find an automaton that check if all the vowels of a word are ordered (or equivalently a grammar that generate all the words where vowels are ordered). In fact, for this in particular, the automaton is linear, so the regular expression is very simple. So simple that in complexity, every non silly regexp should be much better than, for example, sorting the vowels of the word (even with all consonants removed). EDIT (because I absolutely love contradict myself): Sorting algorithms are slow (in O(n*log(n))) compared to linear solutions (in O(n)). But is this very precisely case, we could use the counting sort to sort the letters, and compare to the original. As the number of vowels is that small, it wouldn't be that unreasonable to use it. But all other "true" sorting algorithms are a no-go if we want to go through long strings.
It is a folder for ruby therefore it is a blue ruby and therefore sacrilege :p
It's the first gem I release so do **not** be kind: the more criticism I get the better I can be as a programmer. That's also why I'm posting this here: nothing finds bugs and flaws in the design of *your* software like other human beings. Thanks!
Tic tac toe program is a good one. Make it human vs AI where the AI cannot lose. Maybe for starters, make it human v human. Up to you. 
RubyKoans is quite good. 
The counterargument is that style fixes to existing code only need to be done *once*, and rob future would-be contributors of the "opportunity" to write code in whatever the hell style they feel like when they get to their basement that evening. &gt; If not us, then who? If not now, then when?
Okay, didn't know that. Thanks for the info.
That shit Dope!
I think the method you used looked fairly sensible, but I've just tidied the code up a bit to make it hopefully more idiomatic. https://gist.github.com/revdan/54c6dbea14fbacf7bf8a
yes, someone else commented on removing the #join method. i didn't think to compare the time difference of comparing strings over arrays though, so thanks for that caveat.
I'll suggest something that somebody is going to pick up on, first of all. The gem's name. I can't say to Mr. Jenkins, "Yeah, it's a bug with the mothereffing bases gem". This sorta-throwaway naming was referenced in a [Reddit post](http://www.reddit.com/r/programming/comments/2jemyv/we_dont_need_these_stupid_warning_messages/) a couple of days ago, similar issues would arise if 'non-technicals' saw things like this.
Yes, in place means you do not create a new matrix, but only swap around values in the original one. Not in place would be: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] clockwise = matrix.reverse.transpose countercw = matrix.transpose.reverse (the original assignment does not specifiy the direction of rotation) Doing it in place takes more code. :) EDIT: In place... matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] Clockwise: matrix.reverse!.each_with_index { |_,i| (0...i).each { |j| matrix[j][i], matrix[i][j] = matrix[i][j], matrix[j][i] } } Counter-clockwise: matrix.map(&amp;:reverse!).each_with_index { |_,i| (0...i).each { |j| matrix[j][i], matrix[i][j] = matrix[i][j], matrix[j][i] } } 
Using a struct/class hadn't occurred to me. I tend to (naively?) avoid creating class/structs unless I'm modeling a stateful, real-world object - as opposed to an action. Also, I think the name `compare` is confusing. `backfill` or `replace_defaults` might be more appropriate. It might make sense to add an additional method that actually allows for a boolean comparison of the two hashes post mutation. Anyways, thanks for your feedback!
A lot of the standard libraries and better gems out there give us so much re-usable code, rather than writing stuff from scratch all the time. Things like date helpers, or fancier functions in enumerable. How easy it is to get things like a JSON string from a hash.
The same discussion took place with the "bitch" gem. https://github.com/JacksonGariety/bitch/issues/1#issuecomment-26248303 &gt; "As a steward of the rubygems.org namespace, if someone were to submit this name as offensive I would have a difficult time deciding in favor of keeping this name." 
To continue to maintain and support the rails app, you really do need to re-create a dev database either on your own machine or on a local server. If you need any specific help in either backing up your production db from heroku or in re-creating the db locally through rake, let me know. It's not too bad.
I have to admit I'm getting confused about which regexes are supposed to be solutions and which are just intermediate steps, and which are supposed to match the solution, and which are inverse solutions supposed to match the complement. I tried running your regexes against the examples given in the OP, but realized I was confused about which regexes were being suggested as what. 
Probably the expressiveness of the core language. Whenever I look at confusing code that I've written, I feel like if I work on it for a bit it can be simplified. The language doesn't paint me into a corner.
I actually never use the and advise against them, but `unless` &amp; `until` are pretty cool, conceptually.
Blocks. The rest of the language is nice, but blocks are what put it over the top in terms of expressiveness and conciseness.
I actually clean house on homebrew pretty much every single time I install/upgrade something; I just have a ton of stuff in there. That said, they both finished overnight, and they both seem to be working fine, so I'm not going to complain too much.
I agree, but at this point in time the relationship has sort of gone in not the best direction. I've given the previous shop instructions on how to add me as a contributor to the app, then transfer the app to me. That way I can hopefully get the app without any real changes occurring, then start to set up my local stuff from there. So really, this is a political move rather than a technical move at this point. Just need the other shop to add me as a contributor and we're done. 
I think that the community is its biggest plus. Rarely do I find an angry Ruby developer (unless if it is DHH, but he is rather more opinionated than angry). Without the community's support with gems and applications, I probably would never have started. They take the guess work out of a lot of the development and allows you to focus on your task that you're trying to accomplish while not being distracted by the ancillary parts of your application. 
expressiveness and concisiveness of the language, as well as how clean the meta programming looks.
A lot of people talking about the expressiveness and conciseness of the language, and that's definitely nice, but for me it's the object model. The fact that literally everything is an object and every method returns a value is really strong for me.
I find inline `unless` to be pretty valuable. Certainly clearer than `if` with a negative condition.
thanks for the insight John. I've seen job postings where the front-end stack is delegated for front-end UI developer. But I'm motivated to learn because I find it interesting and I want to become good at this.
I use it with inlined with very simple conditions, otherwise it takes to much time to understand it when reviewing
yup, it's the object model for me as well. plus the extensibility at runtime, it's just something that sold me to ruby, although I rarely ever use it. But I just like the fact that I can. Also the syntax is pretty easy on the eyes, it's just aesthetically pleasing if you ask me ;)
Yeah, I have found that trying to do too many clever things with the object model makes for unpredictable code that I hate having to grep for (and so do my colleagues), so the only places I really find myself ever using some of that metamagic is in predictable places like `Class.inherited` and `Module.included`. But that object model also gives me a very strong confidence in understanding any code I'm looking at. I KNOW that a method call has a return value, I KNOW that I'm not having to deal with primitives that have fundamentally different character, things like that. It's the kind of thing that always made working in Python feel more tentative to me.
I see what you're saying. The metaphor definitely is terrible. How about a credit rating history? A company typically asks to take on technical debt with zero credit history. And what about when programmers simply "feel" rushed so they decide to write slop? Who lended to whom? My pedantic nitpicking here centers around not wanting to see its' usage increase, more than anything else.
Well detailed post, congrats! How are you guys consuming SQS messages `ruby worker.rb`? I'm working in a project (pretty new - but already running in production) to help with the SQS messages consumption: https://github.com/phstc/shoryuken Besides a better process handling than a `ruby worker.rb`, it also load balances the queues, so one process can consume multiples queues. Any feedback would more than appreciated! :)
The Object System. Came from Java/C++ and love how easy it is to write proper OO software.
The metaphor is ubiquitous, and though definitely imperfect, I don't agree it's terrible. What's useful about it is, in my view, primarily it's value as an analogy for non technical people, to understand yes we can do this, but don't assume because it's done and looks like you asked that the product is the same, or that you 'own it outright'. It's a useful metaphor because, like real debt, it's not that it's inherently 'bad' or never worth incurring, but that it is always a tradeoff, and should only be accrued when done so thoughtfully, lest you be be unable to make forward progress in the future as you make 'interest only payments' on the debt and are barely able to make those, let alone have any 'disposable income'
I intend to dig a bit further, but I couldn't help getting caught up in a few mixed messages you seem to be sending regarding the order of digits in array-defined bases. &gt; `base2 = [0, 1]` The code is law, and this is indeed how to define binary in Bases. That would be all well and good if this protocol weren't ostensibly violated in a few other places. &gt; Use custom bases defined as arrays, like this binary base: ['↑', '↓']. It may well just be me, but `'↑'` and `'↓'` seem like they'd correspond to 1 and 0, respectively, this being in line with the "on" or "off" metaphor frequently applied therewith. &gt; The array is assumed to be a list of digits (each element is a digit) from the most significant one to the least significant one, like you'd expect. I've hitherto been speaking with a bit of sugar, but this is definitely a contradiction. In positional numeral systems, the digit which has the most minimal effect on the overall number's magnitude is, logically enough, the least significant one. This could well have been an anomalous slip-up, but you needn't feel bad otherwise; "Flipping that bit, and that bit *alone*, changes the parity of the entire thing!" was how I initially intuited digit significance.
Granted I just kinda skimmed this since some of it was over my head, but IIRC the first line of most Rails stacktraces are EventMachine stuff and I thought Rails was single-threaded. Does Rails' thread-safety mode impact the threaded-ness nature of the EventMachine driving it?
&gt; every method returns a value is really strong for me. This is actually something I personally hate. 
If you're into SQS message processing in Ruby, you should also check out: https://github.com/tapjoy/chore
Why does it bother you? Couldn't you just ignore the return value? 
expresiveness, natural flow of the code, conciseness, blocks, composability, uncompromising unrestricted object model, lazy enumerators, rich standard libraries and 3rd party gems covering most of thinkable tasks (except of numerical analysis maybe) Most appreciated is the philosophy behind - do not stay in programmer's way to solve a problem. I'd yet add significant improvements of the reference implementation in recent years (YARV, RGenGC) and maturity of the codebase.
Mixins. Specifically, enumerable is a god send. For loops just seem so foreign and inexpressive now.
Very much this.
I think it makes it too easy to ignore command query separation. And yes, I can personally ignore the irrelevant return values, but that doesn't mean my software libraries haven't ended up with people having unexpected issues after depending on undocumented return values for commands. 
Rails is multi-threaded by default (4.1 is, at least). The standard MRI Ruby interpreter is not. However, you can use a multi-threaded app server with Rails, backed by a multi-threaded interpreter. E.g.: Puma+Rubinius.
Provides an easy to use time frame class for Ruby 
bcrypt() is not encryption. It's dangerous to call it as such, as it implies "encrypting" a password is acceptable.
I also think doing that to create a fluent interface might be more forgivable than returning the thing that mutated (not that was mutated) 
Does the multithreaded nature of Rails come from the EventMachine later or is there another mutex/threadpool at a higher level of abstraction as well?
Why would you write unless / else?
unless with else is evil evil evil unless on its own (inline or not) is fine.
That is indeed very true! Good point. Constructing domains out of mostly immutable objects simplifies a lot of problems and contributes to the overall robustness of systems. Cheers.
This came from Perl: http://perldoc.perl.org/English.html
So it should read "Replace the perl with different perl in my ruby" :p
One thing I hate about almost every Ruby post I come across is the level of JFM (Just Fucking Magic) in each post. For instance the author mentions a versions file, and then creates a versioned gem, but does not discuss if there is a connection between the two, or even if the version file is manually or automatically created. 
Thanks for your comment! The `['↑', '↓']` array was indeed an oversight, I changed it right away. When I talk about arrays as **numbers** instead of bases, what I meant to say is that when you pass an array to `Bases.val`, you need to write it down like you would write down a number on paper. For example, we're currently in the year `[2, 0, 1, 4]`. Writing it as `[4, 1, 0, 2]` seemed a bit confusing to me, while it sounds more natural when talking about bases (think of 0123456789). What do you think?
Ruby has support for native threads. It just can't run those threads at the same time. So you can have concurrency in your Ruby programs, but you can't have parallelism.
Good call! I used the worker name, because you can set only one worker per queue, the relation is 1x1. Which names do you recommend for the queues and workers? Thanks for the feedback. 
Bugs and feature requests are welcome!
Thanks! Glad you like this and the book :)
I can easily "think in Ruby"
 1|\+|\s|\(|\)|\-|\. gross
I don't know the details of EventMachine's implementation, but I do know that Rails can run multi-threaded regardless of whether you use EventMachine with it. I don't think anything EM does inherently requires multiple threads, though the Reactor pattern is obviously well-suited to concurrent applications.
Keine Suppe für Sie!
Does Pry have the same annoying issues with slow copy/pasting and overwritten characters that the Rails console has had for the past decade? I'm not sure if the problem is Rails, OS X, or rb-fsevent, but I'm looking for a replacement to the console that doesn't have these issues.
gosh, leaving IDEs behind is the best thing i did for myself. i actually understand all my code now. more importantly, its MY code now!
What would you say salaries for mid-range Ruby guys in DC? You can PM me if you don't want to post here. I want to get an idea where I stand.
Bugs are welcome? Or bug requests are welcome?
Since RubyGems are the standard unit of packaging for Ruby code, can you package up code in the domain repositories as gems and include them in the front-end project?
It's not that you don't need them at all but for sure you know better what you're doing and you can live without them ;)
&gt; However, I'm really not sure how to do that with multiple domains To me this sounds more like each domain is its own application (service oriented architecture).
A very telling session I recently had with a PHP developer. "But look. This IDE has a feature to quickly write all your getters and setters, you just give it a list of attributes and it writes them all for you. Saves me quite some time. How would you do that in vim, huh?" So I explained a bit about inheritance and PHPs magic methods. We wrote a base Model, introduced phps 'attr_accessor' into that. We then made all the models inherit from this and could remove over 400 lines of getters and setters( and stupid boilerplate comments). Point is: it is far more valuable and timesaving to write properly architechtured code than to have a tool writing stupid code for you. Edit: this comment was supposed to be a reply to iconoclaus. I used the wrong button in my app...
&gt; slow copy/pasting and overwritten characters This happens allllll the time for me. It's so painful. I don't know of any workaround for it though. It happens in Pry for me too.
I don't get it :/
Hey! That's awesome, I was trying to create something similar, but didn't have time for that and also had some issues with Twitter's URLs. This seems actually working pretty accurately! Good job...
I've written it before, and then immediately went back and changed it before committing recognizing it as an abomination. But, unless some_problem_case_happened do_normal_thing else handle_unusual_case_thing end Like I said, when i get to start typing the 'else', I catch myself and go change it one way or another. 
Perl has a lot weird, global variables. Since Ruby is inspired in Perl, it also has those same, weird variables. For example, if you use backticks to run a shell command using Ruby, like this: ``` `pwd` #=&gt; The path to the current working directory ``` You can then check the success status of the command using the global variable `$?`. Since the command was successful, `$?` will return `true`. Now, obviously, this is fucking weird. You can't tell what the variable `$?` is just by its name. However, you can include a standard library (stdlib) called "English" in your Ruby code that allows you to reference these global variables using less cryptic names. Instead of using `$?`, you can use `$CHILD_STATUS`, for example. Much better. Finally OP's title for this post should now make sense to you: &gt; Get the perl out of ruby. :D
You should handle exceptions from the endpoints - speaking from experience, it'll happen. Facebook sometimes won't return JSON, Twitter will throw a 500, etc.
One doesn't use beanstalk to spawn and manage worker processes.
Oh, cool, I missed that. Carry on then! :D
Absolutely. After well over a decade in PHP, following a decade-plus of C++ academics, this *feels good*. Matz famously said that Ruby was designed for programmer enjoyment. I think one of the major consequences of happy developers is functioning developer communities that welcome new people and help them get up to speed. I've had far too many years wasted in languages that I often thought were designed as the result of (losing) bar bets.
Truth. The only other language of the (too) many I've written in that I can imagine something like *POODR* being written for would be Smalltalk — where, of course, there are too many good books of that level to bother listing here. Can you imagine an enjoyable, productive C++ or PHP? I can't.
It's the closest we've yet come to Knuth's Literate Programming in a production-capable language. &gt; A program is a conversation between two or more developers, that *just happens* to be executable by a computer. That and the Gem architecture (sublimely great reusable, standardised components) are tied at the top of my own list.
The "hands-on" nature of the [Ruby Koans](http://rubykoans.com/) is pretty effective for getting the material to stick.
&gt; Ruby Koans Ooops your talking about ruby. not Ruby on rails. With that being said. OMR is ROR specific. The prag. studio still does have a JUST ruby course but I haven't done it. 
From a person who went from Ruby, to Hartl's and then back to focusing on Ruby - I'd suggest you skip Hartl's until after you've completed a beginner level book/course on Ruby (not primers like rubymonk or codeacademy). If I could start over I'd go: rubymonk, codeacademy, Well-Grounded Rubyist, then either OMR -&gt; Hartl or just straight to Hartl. You'll appreciate going through the Rails stuff with a better Ruby foundation and not be lost like me when I first went through Hartl. 
I took the pragmatic course as well and it's pretty nice to get a good grasp on rails.
&gt; idgi Like a videoconference, but with pics. So your laptop battery does not drain in 30 minutes like having an Hangout session on.
No, but it is useful to communicate between producers and workers.
the url here is direct to the live demo. it is explained in the home page http://higuys.io it is a tool for remote working teams that want to have an eye contact during their working time.
Happy Cakeday!!! Woohoooooooh!
I've done loads of different Ruby tutorials including the CodeAcademy track http://www.codecademy.com/en/tracks/ruby, CodeSchool www.codeschool.com and Try Ruby http://tryruby.org/. One thing I'm noticing as I get further down my ruby learning path is that, although these tutorials are fun and teach you the syntax, they don't give you enough real skills to be able to go and write actual well-designed ruby programs and run them yourself. Just checking out the http://pragmaticstudio.com/ course and it looks really solid. I might have to give that a go! Despite the heavy price tag.
https://www.railstutorial.org/ is very good for building a rails app.
I learned with [Programming Ruby](http://docs.ruby-doc.com/docs/ProgrammingRuby/). It was straightforward and taught everything simply and without too much frippery. Everything was explained well.
Did you mean? #superhero
This is a really good overview of all the techniques we can use to have a more OO Rails project
Cool. Makes sense, I've just pushed the changes! Thanks :)
JRuby and Rubinius interpreters have no GIL and can run code in parallel.
This is such a good idea!
What is the state of the previous version (1.2) btw? Did it have any particular downsides, are people still using it in new projects? 
You don't need them because of [Duck Typing](http://en.wikipedia.org/wiki/Duck_typing). Interfaces are a thing in statically typed languages, as you can actually check for them at compile time. Ruby is not statically typed, as such, interfaces aren't really possible to implement. Instead of explicitly defining the contract, you check if the object you were passed fulfills your requirements.
Hi, I am one of the organisers of the room. If you have any questions, ask!
Technically, Ruby does have interfaces. They are just embedded and inseparable from the implementation. Nothing about OOP concepts says how interfaces and implementations must behave. In Java things are very rigid and in Ruby things are very flexible, these are just properties that fall out of how these languages were designed. From the linked article, that author is only talking about adding in features that are similar to Java's Interfaces and Abstract Classes: ensuring that a class that declares it implements and interface has implementations for all of the methods it claims to implement. Really, it's not a terribly useful feature. The use case for them comes up pretty rarely. One, if you've got a base Class in Ruby, it will provide a full default implementation 99.9% of the time, it's rare that you have base Class which has some implemented and some unimplemented methods which need to be provided by the subclass. Two, classes which do expect to have the missing methods implemented are either trivial (here is mostly complete implementation, add this one thing in), so they don't need fancy checking -- or they're extending a system which is designed to be extensible and extending through base classing in large systems gets messy and is usually bad form and there are better ways to do it. (Also, side note, that author confuses the terms Abstract and Interface. The two words are synonyms, so AbstractInterface is a redundant name ... Abstract means "summary", like an abstract is the TL;DR for a scientific paper, where in OOP abstract means a method signature.) Python added AbstractBaseClasses to the Python Standard Library and _no one used them_. They were a solution looking for a problem. It was a case of "Java has them and Java has the rep of being the gold standard of what OOP is" so let's cargo cult that and see if we gain some of Java's powers ... Python has also had Interfaces for over a decade (via the zope.interface library) and they're used reasonably commonly. Those Interfaces were designed with the use case of providing a means of _formal_ documentation. Which is a useful thing to have for any library or framework that is intended to be consumed by a third party. They also served as a use case for adding metadata to an object, so that it's possible to distinguish between two objects that have the same method signature (e.g. they duck type) but are not actually the same thing. The zope.interface Interfaces were also extended by the zope.schema package, which allows rich formal descriptions of an objects attributes. So you can say, "This Object has an attribute named foo which is an integer between 1 and 100". Which shows some real power in what a dynamic language can do with interfaces, as it's possible to have an object from an ORM and formally declare what the data attributes of that object should look like, and it's also possible to seamlessly create an Object from a web service and also formally declare it's data attributes ... and if a web app builds a UI based on an object from an ORM and an object from a web service, it can do so completely interchangeably. Which is an example of an actual, useful feature of something that can be built with interfaces. 
Depending on abstractions, not concretions, is important to OOP. Java uses interfaces to accomplish this. Ruby uses duck typing.
Awesome answer. Thanks. Reddit is better than Stack Overflow sometimes ;)
It does, they're just not explicit. Java uses explicit interfaces to make some compile-time assertions, i.e., if you write a method that is supposed to take an object that implements `IEnumerable`, and then you write a method call with a class that doesn't, the compiler detects it and throws an error in your face. Ruby is (conceptually) interpreted though, so there is no compilation step, and thus no compiler that could throw a compiler error. If you pass something that doesn't implement the right interface, all Ruby can do is throw a *runtime* error - but then, that's what happens anyway, whether you declare the interface or not - either you get a runtime error that says "this object doesn't implement interface Foo", or you get a runtime error that says "this object doesn't have a method named Bar" - but honestly, these two are actually the same thing, on some level. On a side note, the compile-time polymorphism you can get in C++ using templates actually uses implicit interfaces too: you can call any method you want on a templated type, but if you substitute a concrete type that doesn't have that method, you'll get a compiler error. Anyway, I digress. One thing you win with explicit interfaces is, well, explicitness for a human reader, and this is a legitimate concern, although documentation can go a long way.
Abstract and Interface are not synonyms though. An Abstract Class is just a class, except that some (in pathological cases, *all*) methods are "stubs", so you cannot call them on the base class itself. Other (non-abstract) methods in the base class, however, can reference them through `this`, calling into whatever implementation the derived class provides. An Interface, by contrast, never implements any method bodies itself; it just describes the methods that must be present in a class that implements it. And conceptually, their purposes are different. An abstract class serves as a "template" for derived classes, where you implement common functionality in the base class, and leave "blanks" for derived classes to fill in. An interface is really just that: a contract that tells both ends of a dependency how they should behave. IMO, abstract classes are mostly useless, and when they're not, it's a sign of a design flaw.
i_see_what_you_did_there.rb
I meant that abstract and interface are synonyms as computer programming concepts. An "Abstract Class in Java" is different than "abstract" as a computer science concept. If you read the linked article the author names his Abstract Classes as AbstractInterfaces, which is just kind of confusing.
Yeah, Abstract Interface doesn't really make sense. If anything, I'd say that Interface is "more abstract" than Abstract, in a way... but either way, either it's an Abstract Base Class, or an Interface, but not both. Or maybe you're using C++, in which case it's a "pure virtual class", the next best thing to an interface in C++.
i've used the open-tok gem for my live video streaming in my rails project. you can check it out at brogramit.herokuapp.com (might have to refresh page if video doesnt load) 
In [InfraRuby](http://infraruby.com/), a statically-typed Ruby, modules like Comparable and Enumerable are interfaces with abstract methods and default method implementations. 
Are there any examples w/ code of someone using this?
*If* it can do static analysis, then that would be quite something. Due to very dynamic nature of Ruby there would be lot of ambiguousness and even impossible to detect errors at metaprogramming constructs. But even coverage of subset of cases like direct methods sending and assignments would be handy. Currently Tim Pope's Vim plugins help me catch many type errors at design time in both standard Ruby and Rails 3 &amp; 4 programming. His code completion works surprisingly well.
I'm actually going through the pragmatic Ruby course now and finding it pretty damn good. I have no prior programming experience. Granted I have to watch the videos a few times through before I move on to the exercises, but I find myself actually understanding what the hell is happening and why(something I couldn't seem to grasp in a treehouse/code school environment). Also of note for the pragmatic course, Mike and Nicole (the people who run the course) have a google group you get access to where they answer any question you may have about anything in the course. Good luck. 
Before I started the Pragmatic Studio course, I actually went through this book. It's amazing if you have no prior programming experience. Dumbs it down to a point of understanding, and it's fun as hell too. https://pine.fm/LearnToProgram/
Thanks I'm going to check this out! I'll let you know how it goes!
Thanks, yeah I'm going to learn Ruby on Rails eventually but it seems like I should learn just Ruby first. But I'll definitely keep that in mind when I get Rails into the picture. I'm a pretty experienced programmer in other languages, so i don't need anything spoon fed. Does prag spoon feed?
Thanks, very helpful insight. I would like to avoid paying $150+ to learn Ruby if possible (prag charges about that much). I am a pretty experienced programmer, though I have no formal training. Do you think I can go with the free options like codeacdemy or tryruby and code at a professional level eventually? Thanks!
thanks, I have a fair amount of prior programming experience. How has Pragmatic been for you? it seems like the best option but honestly, I really don't feel like spending the $180...what do you think?
I'm really digging the pragmatic course. At times it's a bit over my head(google and stackoverflow help me out too). But if you have prior programming experience, I imagine you'll just be picking up the syntax and the rubyisms. The game is simple, but for me, that's perfect. I think a lot of people on the google group have prior experience and a)their company is paying for course, or b)they're just building their portfolio. I've heard the rails course(s) from pragmatic are even better. Maybe give a book a spin first and if that doesn't work, start looking at pragmatic. Good thing is once you pay for first course, the next courses you take are 25% off. Also, if you have military experience, they offer a discount as well. 
Ruby Koans.
thanks, I appreciate you taking the time to answer me
It was extremely difficult to fix bugs in. Much of the code was coupled together in [dm-core](https://github.com/datamapper/dm-core), making it difficult to fix minor SQL generation issues (such as when to use an `INNER JOIN` vs. a sub-`SELECT`). Also, they never fully supported embedded value, due to the design of [DataMapper::Property](https://github.com/datamapper/dm-core/blob/master/lib/dm-core/property.rb). Validation errors didn't propagate upwards. Auto-upgrades couldn't drop constraints once in place. Basically a whole litany of minor gotchas and edge-cases. That said, DataMapper 1.2 _worked_ and tested features that would later be copied in ActiveRecord 3 (ex: ability to override reader/writer methods and type coercion system). You just had to familiarize yourself with all the gotchas of DataMapper's 1.2 API. Many people still use DataMapper 1.2 and I hope they can replace some of it's internals with ROM.
I see you wrote your own crawler. Did you test it against the [Web Spider Obstacle Course](https://github.com/postmodern/wsoc#readme). You may want to use [Spidr](https://github.com/postmodern/spidr#readme) or [Anemone](https://github.com/chriskite/anemone#readme) which will spider anything you throw at them.
Haskell uses typeclasses, and it's not even an OO language :)
Go Text Wrangler before XCode. I think that you will find that most Ruby developers will use ST, Vim, Emacs, Atom or Textmate. As far as IDEs, RubyMotion is the best one. I have a license for it, but always find myself going back to ST.
If you really want a full-featured IDE, RubyMine is a good way to go. It's going to cost you a bit of cash if you want to use it past the trial period, though. Other popular options are vim, SublimeText and other text editors that can closely approximate the full-featuredness of an IDE through configuration languages and plugins.
&gt; RubyMotion I think you meant RubyMine? I definitely second Rubymine. Great IDE but cost some $ (currently $99 for a personal but yearly upgrades are cheaper). 
Yep, I checked out RubyMine, definitely looks like the best one. I'm learning this in order to possibly code for an acquaintance's startup, so until that's for sure I'm gonna not spend $100. I'm thinking Aptana Studio 3 for now, unless you hate it. Also I'm thinking of reading through this book to get started, any thoughts on that at all? http://chrismaloney.org/notes_s/Ruby%20on%20Rails_/ProgrammingRuby-4thEd.pdf
if you are a student, contact them and they will give you a free license for a year (renewable). better yet, ask your prof to get one for your whole school. :)
VIM + Tmux 
I've used a few over the years: * RubyMine * Pros: Really good at static analysis, if you've done Java/C# it's a really easy IDE transition, warns you a lot * Cons: Resource heavy * Sublime Text * Pros: Resource light * Cons: Slow development, plugin system is odd, expensive considering most of the interesting stuff was external plugins * Atom * Pros: Free * Cons: Slow, clunky, weird Sublime Text clone with node in it somewhere * vim * Pros: Free, Infinitely configurable, plugins to do anything and everything, it's installed everywhere * Cons: Infinitely configurable I finally rested on vim, partly because I was already using individual tools to do most things outside the IDE. ack for searching, tig for git shenanigans, vim was just an extension of that. Once I got over how vim worked, force yourself not not use the arrow keys, and how vim builds commands I find it really hard sitting at a colleague's machine and invariably end up with a line of gibberish before I realise I'm not in command mode. One thing I also noticed after switching from RubyMine is that it made me much more critical of the code base as a whole. If there isn't anything magicking the relationships for you and shortcuts to traverse them you force yourself to have a simpler, more concise code base. Things being in weird places is really annoying and it's harder to ignore.
I've been a long Textmate fan and it fell behind, but I think Textmate 2 has come a long way. Worth a shot if you're more a fan of text editors rather than full-featured IDEs.
i'm not a student cause i'm old :(
The best IDE is vim in a terminal window. Particularly when combined with [ri.vim](https://github.com/danchoi/ri.vim) and [syntastic](https://github.com/scrooloose/syntastic).
aww shucks. but here's the good news: you've got more money than students :)
I'm surprised people mentioning [Atom](https://atom.io/) don't think more highly of it. I'm loving it since I discovered a couple weeks ago. But then, I'm barely a casual coder these days.
Thanks!
rubymine owns if you have a not-shit computer. If you have a shit computer then definitely not rubymine.
Atom isn't really that slow anymore. Github has made it a lot faster, and it can do some pretty cool things. If you want, say, static code analysis, a la Rubymine, slap [linter](https://atom.io/packages/linter) and [linter-rubocop](https://atom.io/packages/linter-rubocop) in there. If you don't like rubocop you can use [linter-ruby](https://atom.io/packages/linter-ruby). Presto, now you have inline static code analysis, just like a fancy IDE, and you didn't pay a cent
I have. It's fantastic and I highly recommend pragmatic studio's Ruby course it if you want to learn Ruby. Well worth the price.
http://code-rippa.herokuapp.com/assets/syntax-bc805d473ab22fe84a01b232e3023d14.png I know it's just a syntax demonstration, but my brain cells started to commit suicide anyways
Thank you, I don't know how we could forget :). Website updating, should be on it soon.
As far as I know Rubocop won't try and resolve method/constant/variable references and potential scope issues. RubyMine goes to somewhat ridiculous lengths to check code for you. 90% of it I ended up turning off, some of it's just never going to resolve correctly and it takes up a fair amount of cycles. Atom still strikes me as a prettier vim+plugins.
I use Sublime Text, i actually use it for all my developing except Java. I cant get around including depencies on my own.
Wow this is great guys. Unlike banister, I can see the use for this. The occasional pic of your team mates helps bridge the gap between working remote vs working in the same room. It's a small step in building unity, and culture within a group. And, it's prolly just plain fun. Kudos! 
Having the same problem and still don't know what to do about it unfortunately.
Sublime Text is perfect for Ruby. Sometimes when I'm declaring a block, it will automatically put the || even if I didn't ask for them and I have to go to write out the next line and delete it or it'll keep trying to put the || there. That only happens every once in a while though, nothing to really complain about. Honestly, can't say I remember the last time it happened. 
Are you also trying to use the winkapi or another service?
That is true, you can do that. However, you should not do that. It would be a very annoying aspect of the code base to work with. Your IDE should be doing the heavy lifting and checking for method names existing... adding in extra layers like that will only confuse developers jumping into the system. Clean, concise, readable, straightforward. Not "locked in because I'm used to Java/C#/C++". Write tests to ensure your project &amp; the elements that make it work as expected. The point of static typing is to let you ensure certain aspects about your code. The most important thing to you as a developer should just be that it works, and tests do that even better than static typing.
+ rspec + guard + pry
So now you are hitting some Ruby code every time you are serving content. You are much better off having Nginx serving the same assets.
For something similar, have a look at flynn.io and deis.io
Is this a call for action - to participate? Or are you looking for speakers and content?
We're looking for speakers and content
Have you ever set one of them up? Curious as to the level of involvement required. 
No, an own service running on Elastic Beanstalk (aws). Got a solution for the problem now. You can override the ssl version used by rest-client whose default is SSLv3 like this: users = RestClient::Resource.new 'https://foobar.com/users', ssl_version: 'TLSv1' users.get Unfortunately there doesn't seem to be a way to change the default from SSLv3 globally so you either have to specify it in the resource object like shown above or you have to use #execute directly which allows you to pass that option. The calls failed for me because in reaction to poodle Amazon updated all load balancers to only allow TLSv1, v1.1 and v1.2. To clarify: I'm actually using the [rest-client](https://github.com/rest-client/rest-client) gem.
Lol yes. Sorry, I've been neck deep in some RubyMotion stuff lately.
All hard technical stuff or would some of the less technical, "softer" topics (community, mental health in tech, etc.) be considered?
I agree. Been using both Sublime and Atom. Sublime is fast, it is excellent when getting started. I even used it when was working with huge codebase. Fast to switch between different files. Atom is a bit slow and the vim-mode doesn't support :w (which i love in vintage in sublime). But Atom is getting there as a free alternative (or even better alternative) to Sublime Text.
Major thanks to everyone in this thread. The last time I setup a production server I spent 16 hours configuring the server, capistrano, passenger and everything else. This looks like a very streamlined solution, excited to give it a shot.
Wow thank you!
FOSDEM is generally very technical and has an extreme number of tracks. We only have a room for one day, so the topic is a bit narrower here. Community, I'd try, mental health is probably out. But, eurucamp 2015 will happen, as far as I've heard and there, soft topics are _very_ welcome.
&gt; So as a junior developer ... Good on you for learning. I wish some of the junior devs I've worked with had the balls and talent to just go and learn something new for the sake of learning, let alone blog about it. Can't imagine you'll stay a junior for much longer. 
That's a good point! However, I will avoid having nginx serving assets for as long as I can for two reasons: one, I don't run nginx in my dev env, and I wouldn't like that hassle. Two, and most important, I usually deploy on heroku so I don't have control over the server config. So, unless I end up having a performance issue serving assets (which I doubt I'll have in the near future), I'll keep rack serving it.
I use the following for such cases: use Rack::TryStatic, :root =&gt; 'public', :urls =&gt; ['/'], :cache_control =&gt; 'public', :try =&gt; ['index.html', '/index.html'] 
nice, thanks, i didn't think about pointing the gem requirements at the repos. it is simple, and you're right, it's not strictly necessary, but i'm doing it because i want practice in using this approach, and the app has the potential to grow over time, which is well suited to ddd. thanks for your response!
Yes I was skeptical about this idea initially, but after a week of use I can say it's handy having a visual feedback of your teammates when chatting. We use Flowdock to communicate, it works really well and we don't need to replace it, this is just a complement.
Got it up and running, took some time, and had some issues, but i enjoyed it and learned a few things, and had lots of fun. Thanks for the article
Look into [Chef](https://www.getchef.com/chef/).
The last commit in the repo you've linked to was on May 8, 2013.
I moved one of my apps over to dokku, just a personal project, but I got a bit scared to moved client apps over. With Flynn and Deis looking like they're gaining traction, I don't want to have to put clients through DNS downtime again if I move, Deis and Flynn look pretty serious. I really love using Dokku but all the docker container stuff is way above me. I did manage to get memcached working but it was from a fork of a fork, it all felt a bit flimsy and if anything went wrong I'd be much more lost than I would with my deploy user Capistrano setup. Any random advice would be appreciated!
That's my biggest problem with RubyMine too. The inspector just isn't good enough at figuring out that, say, Devise's authenticate_user! method comes from the gem and isn't a typo
If you haven't read it yet, Eloquent Ruby is a great Ruby book
Vim is the text-editor module of the Unix IDE.
I think Geocoder is pretty awesome: http://www.rubygeocoder.com/ Edit: Also, Flipper - https://github.com/jnunemaker/flipper
The language itself is really nice - imho, the default platform (MRI) still has a lot of things to work on. But where ruby really shines for me is the infrastructure "helpers", which is really well done compared to other languages: rvm/rbenv, bundler, rubygems, guard, rubocop are just a few i use daily. Those are not part of core ruby (yet? in case of e.g. bundler?) but for other languages i am not really able to find equally mature equivalents. In the past year alone i had to deal with package management and infrastructure stuff for c# (+ Unity - custom packages), Java (Backend &amp; Android), python, javascript (mainly angular/backbone stuff - grunt/bower) of course c/c++ and none of them come even close to what is available in ruby. I remember the time (like ~2008ish) when rubygems was about to take off and bundler did not exist yet and i longed for something like python's infrastructure. In that regard ruby surely eclipsed python on that front. So in the end all that is made possible by the community. In conclusion i would probably say that the best thing about ruby is the community. EDIT: The only thing i would love to be done the ruby way is yeoman. Yeoman is really nice and i am writing more and more generators, although i find the process a little clunky. Having some competition in the scaffolding area for yeoman would be nice.
ed
Other than directly linking to the source file would it be possible to do the same if we supply code/snippet from a database or web gist?
Anything written by [thoughtbot](https://github.com/thoughtbot) is probably a good place to start. I recently discovered [Trailmix](https://github.com/codecation/trailmix) which is Rails app written by Ben Orenstein and Chris Hunt. It's very clean, you can look at it's Rubocop (static code analysis tool) scores here: http://www.refactorcop.com/codecation/trailmix I also suggest reading "Practical Object-Oriented Design in Ruby" by Sandi Metz or "Clean Code" by Uncle Bob. These books helped me a lot.
Gitlab is a beautiful rails project. 
And if you want to get started with Chef for Rails hosting, have a look at [chef-repo](https://github.com/intercity/chef-repo) by intercityapp. It is a rather opinionated repo of preconfigured, integrated chef-cookbooks. 
So one of the reasons I used 'dokku-alt' over 'dokku' is because it let you configure way more. I had a app server up with the original version of dokku and heroku changed their [buildpack url](https://github.com/heroku/heroku-buildpack-ruby/issues/304) for ruby 2.1.3 and I just couldn't deploy anymore. My company is expecting some serious traffic soon so it will be good so see how it will compare to heroku.
Thanks man, its great to have such a positive response. I love learning new stuff and no one in my office had heard of dokku before so I decided to give it a shot and write a blog about it.
Thanks for reading.
I'll definitely read through it and see if I can learn it. Thank you for the response and willingness to answer questions. I got some not so helpful personal messages regarding this. 
In some of the coding shops I've seen, its the senior devs who are stuck in their ways (and proprietary tools) and its the junior ones who would like to learn new things. And new tools are actively shot down (especially if they are open source). Its the saddest thing you can imagine.
Hey thanks. I was actually seriously considering that book but it seems like it's for people who already know ruby some. I don't know it at all, however, I have learned a lot of other languages so am in no way a novice when it comes to learning new ones or programming in general. Do you think someone with no ruby experience but a good bit of other programming experience would do well with that book?
If you don't know ruby syntax at all, I would start with Why's Poignant Guide to Ruby: http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html
thanks, so i had started on this one https://7chan.org/pr/src/ruby.pdf know anything about it? I like the looks of it, but if you think the one you reccommended is better i'll probably go with it since i'm basically just taking shots in the dark here.
I haven't read that one, but as long as you get the basics you'll be good to go for Eloquent Ruby. 
Similar to what /u/fgilcher said, FOSDEM is very dense on the technical side of things. We're trying to cover topics that are not usually well represented at regional Ruby conferences such as challenges in implementing Ruby, interpreter improvements, debugging/profiling tools, etc.
I look at a lot of rails apps and by far the number one issue I see is people rescuing too many errors. Remove those rescue blocks and let it bubble up!
Ruby already includes the `Date` and `Time` classes. This simply appears to be a wrapper of the `Time` class. Also, you mention parsing and validation but offer examples of neither.
As a suggestion, saving a few keystrokes by shortening 'month' to 'M' and 'minutes' to 'm' isn't worth the resulting obfuscation of intent in the code using it. This is especially true given the overloading of abbreviation letters like the examples I gave. 
Anyone knows whether the new web console in 4.2 is any good? The one issue I have with better_errors is that it sometimes wrecks my computer when trying to display variables containing relations which are then expanded to arrays (&gt;300k records = no good). Apart from that better_errors is really awesome :)
How is rspec part of your IDE?
I'm a SublimeText guy but has anyone spent any time with LightTable? There's a Ruby plugin that seemed pretty cool when I played with it last year but I don't think I gave it enough of a chance.
what are you trying to run? you need to provide more help, otherwise we are just guessing. Are most of the people are terrible at guessing. 
I'm trying to run a regular .rb file but this happens with any ruby command. I should mention also that I'm running this in a Linux terminal and "intranacht.rb" in the last line is the .rb file I'm trying to run. 
I used Arch Linux's pacman. Would you recommend rbnev + build? 
ruby ~/IntraNacht/intranacht.rb
Oh for sure! Uninstall the pacman ruby and go with the rbenv + ruby-build. 
is this working? ruby -e "puts 'hello world'"
Any success?
Using rbenv install 2.1.3 with ruby-build istalled returns pretty much the same error :/ &gt;BUILD FAILED (Arch Linux using ruby-build 20140926-6-gc2b2e15) Inspect or clean up the working tree at /tmp/ruby-build.20141026060932.4590 Results logged to /tmp/ruby-build.20141026060932.4590.log Last 10 log lines: from /tmp/ruby-build.20141026060932.4590/ruby-2.1.3/lib/rubygems/specification.rb:736:in `stubs' from /tmp/ruby-build.20141026060932.4590/ruby-2.1.3/lib/rubygems/specification.rb:691:in `_all' from /tmp/ruby-build.20141026060932.4590/ruby-2.1.3/lib/rubygems/specification.rb:882:in `each' from /tmp/ruby-build.20141026060932.4590/ruby-2.1.3/lib/rubygems.rb:428:in `map' from /tmp/ruby-build.20141026060932.4590/ruby-2.1.3/lib/rubygems.rb:428:in `find_files' from /tmp/ruby-build.20141026060932.4590/ruby-2.1.3/lib/rdoc/rdoc.rb:551:in `&lt;top (required)&gt;' from ./bin/rdoc:16:in `require' from ./bin/rdoc:16:in `&lt;main&gt;' uncommon.mk:420: recipe for target 'rdoc' failed make: *** [rdoc] Error 1 I'm thinking that a clean install of Arch Linux would be the best option at this point.
It looks like the problem is entirely encapsulated within rubygems. Try reinstalling it. If that doesn't work, nuke your whole Ruby installation and start again.
Why? If you don't have the need to run multiple ruby versions in parallel, and your operating system offers a fairly recent ruby version, why not use that? One reason I can think of is that it is generally nicer to not have to become root to install gems, but that should be easily solved by setting GEM_HOME to be in your the home directory.
Thanks, I'll check it out.
Thanks!
Thanks!
Good shout, I'll allow users to use the entire key or the shorthand.
Then don't version it? With regards to parsing, are you going to do something similar to [chronic](https://github.com/mojombo/chronic)?
VIM (w/ lots of plugins) + iTerm2 + Fish
Ruby is used for much more than just rails. Some interesting, well-written non-rails stuff: * [Unicorn](http://unicorn.bogomips.org/) - web server * [Rake](https://github.com/jimweirich/rake) - ruby make * [Metasploit](https://github.com/rapid7/metasploit-framework) - pen-testing framework * [Jekyll](https://github.com/jekyll/jekyll) - static site generator * [Nanoc](https://github.com/nanoc/nanoc) - another static site generator 
I wouldn't expect it, in it's current state, to be released at all. I wasn't expecting it to be 1.0, I just don't see the point in cutting a version already, but that may just be me. Jiff.new.add(14, 'd').add(6, 'M').subtract(10, 'y') Time.now + 14.days + 6.months - 10.years I'm not trying to poop on your parade, but I don't get what the difference is between ActiveSupport (which is included in the gem) and what Jiff is offering. I don't want to write idiomatic JavaScript in Ruby.
Thanks! I'll check them out, at first glance they look great. Edit: Spidr is excellent. Thanks for that.
Awesome talk bro! I wrote my final year thesis on the topic - focusing on the normalisation of YouTube Comments. http://revett.github.io/Academic-Papers/
They can. It all depends on what you are accomplishing. If you are working with low level things, then C extensions are awesome. But as for robustness of the library, it can be a hindrance. EDIT: By robustness, I mean, it is a little more involved when trying to make patches to the library.
I completely understand where your coming from and partly agree that v0.0.1 is pretty much a wrapper. I created it because I used [moment.js](http://momentjs.com/) a lot, and there wasn't anything out there for Ruby. The reason why I released it as v0.0.1 is because I wanted to use the functionality that I added. I could have just worked around the problem by implementing separate solutions in my application code, but I saw it as an opportunity to create something useful. I guess when the gem gets to v1.0.0 it will hold greater value.
Wow - never really understood what all the different terms were. This was really informative, thanks! 
From what I've seen from writing Ruby C extensions a few years back (e.g., https://github.com/tcopeland/revolution) the performance gain is biggest when the extension is tuned to the way the data is used. For example, if client code usually needs all the emails in a folder, provide a coarse-grained API to fetch them rather than forcing the client code to make a bunch of calls and cross the Ruby / C boundary repeatedly. It's interesting to see the different solutions around this kind of thing. I mean, some people like rmagick, which is a classic C extension. But some prefer to interface by shelling out with something like skeptick. It's less efficient, but a whole class of problems just goes away.
Awesome. I didn't mean just rails. I meant Ruby as well. I will check the source code on this stuff.
Hi coderhs! CodeRippa author here. Currently not yet, it was just meant as a command line tool. Would totally consider it if given enough interest. :)
For computationally expensive stuff it can provide a massive speed increase (Which is one reason sciruby is mostly written in C). However they do have their own sets of problems (Memory management , threading etc.)
It's obvious that it isn't complete - it is v0.0.1 There is still value in saying what the purpose of the gem is. The post was there to gain feedback, and anyone informed of how Major/Minor/Patch versioning works would understand that.
If you want feedback, ask for feedback. I know how semantic versioning works. However, if someone shares a gem/source code without mentioning that it is incomplete, I expect it to at least have the features it mentions in the description. All you have to do is make a note at the top of the README.
Talk video link has been updated you can find the talk here. https://www.youtube.com/watch?v=fGFM_UrSp70 
You can find a lot of awesome Ruby projects here: http://marcanguera.net/awesome-ruby/
Also released: 2.0.0-p594 https://www.ruby-lang.org/en/news/2014/10/27/ruby-2-0-0-p594-is-released/ 1.9.3-p550 https://www.ruby-lang.org/en/news/2014/10/27/ruby-1-9-3-p550-is-released/
Comparing Sinatra and Rails is like comparing a car with an Airbus A380.
In theory, the performance of a C extension is only bound by the CPU. In practice, you have to be a pretty experienced C programmer in order to achieve any performance gains by writing C extensions.
Rails isn't that much more complicated than Sinatra. People act like Rails requires some sort of superhuman programming skill when I find it to be one of the most simple and straightforward web frameworks ever made. It gives you some simple built in features that you'd almost definitely want if you're making a decently sized web app. Nothing wrong with using Sinatra either since you can just import parts of Rails that you want. It's just super close to rack, yay. Just choose one.
https://github.com/pezra/rspec-mode
If you are a student, JetBrains is offering 1 year licenses on most of its products for free ( https://www.jetbrains.com/student/ ). This includes RubyMine.
That doesn't make rspec part of your ide. You can hook up any test framework to an advanced editor like vim or emacs.
It frustrates me that we build all this tooling to integrate with specific tools like rspec. If we integrated with, for example, junit xml -- which both minitest and rspec can output trivially -- then vim and emacs users could use the same plugins/macros. As a minitest user, I have to write a lot of my own text editor integration. I don't mind it, but I wish we wouldn't constantly use tooling that locks us into one framework or another. All that tight coupling between tools is bad. So I guess what I'm really saying is, "a specific tool like rspec *shouldn't* be part of your IDE." Which is different than saying "that doesn't make rspec part of your ide." I should have thought through what I was saying more carefully.
_developing_ with Rails may not be much more complicated than Sinatra, but the complexity of the resulting codebase (including the respective libraries) is a very different story. Sinatra's source is a beautiful ~2,000 lines of fairly easy to interpret ruby code. Rails on the other hand has at least 100 times that, with over 200,000 lines of code. As a result, it is much easier to understand exactly what your Sinatra app is doing. Rails is effectively magic. "Any sufficiently advanced technology is indistinguishable from magic." -- Arthur C. Clarke
Does this one have the symbol garbage collection ?
sure, obviously there are reasons for those 198k lines of code
JRuby + truffle is beginning to look like the holy grail. High speed, multi-threading and CExt compatibility.
Do I need to wait for some mirror updates or something? "rvm list known" seems to stop at 2.1.3.
It doesn't show up for me either when running rvm list known but it still worked perfectly with the usual rvm install 2.1.4 and when running rvm list it also shows up correctly. `ruby -v` says: ruby 2.1.4p265 (2014-10-27 revision 48166) [x86_64-linux]
Your headline is correct render plain: params[:article].inspect render(plain: params[:article].inspect) render :plain =&gt; params[:article].inspect render(:plain =&gt; params[:article].inspect) Are all the same. :article in this case is just a key in the params hash. EDIT: See /u/400921FB54442D18's comment as well key: value Was introduced in ruby...1.9, it is the same hash syntax as JSON (Personally I dislike it and prefer the 1.8 syntax). :key =&gt; value You should try and be consistent in your code (i.e. in a particular project), use either 1.8 or 1.9 syntax and try not to mix. 1.8 syntax will never (or close as) go away. Note that the 1.9 syntax does not allow string keys render "plain": params[:article].inspect will fail.
&gt; Render is the method. "plain" is the key, and params...inspect is the value, i.e. :plain =&gt; params[:article].inspect. Is this right? This is right. If we pretend we're using a language requiring more explicit code, the call looks like this: render({plain: params[:article].inspect}) &gt; How can you pass JUST a key as a parameter without a value? `:article` isn't a key. `:article` is a [Symbol](http://www.ruby-doc.org/core-1.9.3/Symbol.html). A symbol can be used as a key (or a value) *in* a hash, but a symbol's just a symbol the same way an integer's just an integer. It is but a data type. In the olden days, you had to use "rocket syntax" to define all keys and values in a hash: { :cows =&gt; 5, 'sheep' =&gt; 7, 42 =&gt; 42 } Due to widespread use of symbols as hash keys, a shortcut was added to Ruby 1.9. Iff the key should be a symbol, you can simply append a colon: { cows: 5, 'sheep' =&gt; 7, 42 =&gt; 42 } It's one of those features that's nice with experience but confusing as a beginner.
ugh, this ridiculous stuff is abundant in ruby - completely opaque to newcomers, offers little in the way of additional expressivity since Ruby is already Perl syntax-depth-wise, and complicates the parser to ever more rube-goldberg extremes. who wrote this? they probably relish in cargo-cult practices there are several features stacked up here. first, functions can take, in addition to your standard de-bruijn-index style positional arguments, hash key/val arguments, without a requirement for the wrapping braces. 2nd , around Ruby 1.8 to 1.9 transition, Ruby got a new Hash syntax which is much closer to JSON. instead of the =&gt; arrow , one can say key: :val. however, the key: is expanded to a symbol not a string. which is unlike JSON. there are some arguments related to memory-management, allocation-overhead and speed why you might want your language to have both symbols and strings - also Ruby has ways to both "intern" and "freeze" strings though. so here :article is a symbol key for a Hash called params. which is odd, as i'm pretty sure Rack gives its params string-keys, so Rails differs from Rack here. no idea what the plain: symbol key would mean without reading Rails docs. maybe they mean text/plain MIME type. but it arguable would be better to handle that in a more easily intuitive way, like 'text/plain' =&gt; "sometext" or so..
It will be glorious. Maybe 2.2.1 will be, anyway ;)
&gt; yup, you do not have access to low level code What is low-level in this case? Could you be more precise? Like the name of the software part that is not OS? 
Interesting topic! Someone should post implementations using Fiber-s and Enumerator-s and explain the differences for each (how they work, resources used, etc.).
I usually have to upgrade my rvm using `rvm get stable` before new versions of Ruby will show up in `rvm list known`
also since you've mentioned it is only applicable for symbols, note that you cannot do this: foo = "bar" { foo: 42 } # { :foo =&gt; 42 } But the old syntax ofc allows this. { foo =&gt; 42} # { "bar" =&gt; 42 } 
I do not believe that is the case: "As with the rest of Graal, Truffle is published under GPLv2" https://wiki.openjdk.java.net/display/Graal/Truffle+FAQ+and+Guidelines#TruffleFAQandGuidelines-License
Yes, the Ruby interpreter, Truffle, and Graal are open source all the way down. The C interpreter is not open source yet - it's a student's project and a work in progress. However I can demo it to people and show you how it works if you find me at RubyConf.
Go learn some Ruby. It's really the most important thing I did in the first month or two of learning Rails. Spending an hour at codecademy.com for a brief introduction was super helpful.
I think others have answered :symbol_key =&gt; value vs symbol_key: value. In the migration: create_table :articles do |t| creates a block with the t object to set up your table / model. The t.string method call creates a varchar column in your db and a string attr in your model. :title is the name of the attr and in this context like much of rails is interchangeable with "title" 
Others have already answered this, but alternate explanations are often helpful - Ruby has a concept of a [Symbol](http://www.ruby-doc.org/core-2.1.1/Symbol.html), which is represented when on its own as a colon followed by an identifier. Symbol identifiers *can* contain spaces and such, but must then be quoted (:'symbol name'). Most people try and avoid doing this by replacing spaces with underscores or whatever, or just using a string if they really have to have the spaces. So there are couple of places that symbols are commonly used. One is as hash keys. Hashes were previously defined using the 'hashrocket' (=&gt;) syntax: hash = { :key1 =&gt; value1, 'key2' =&gt; value2 } In that case, key1 is a symbol, and key2 is a string. You would access the values using hash[:key1] and hash['key2']. Because symbols are so often used as hash keys, ruby 1.9 introduced a shorthand way of defining them. Move the colon to the *end* of the symbol, and then you don't need the hashrocket: hash = { key1: value1, 'key2' =&gt; value2 } You access them in the same way. As you can see, the string hash key still has to use the hashrocket syntax. The shorthand is specific to using symbols as keys. Also, you can't use quoted symbols in this way. Although :'key 1' is a valid symbol, trying to use the shorthand syntax in a hash ( { 'key 1': value1 } ) will result in a syntax error. The old syntax still works, and mixing the two just causes confusion, so if you have hashes which *don't* use symbols as keys (or which use symbols which would need to be quoted) you're better off just using the hashrocket syntax everywhere. On to your migration. Another thing symbols are commonly used for is as arguments to methods where those arguments can only be one of a discrete set (and sometimes even when not). Ruby doesn't require parentheses around method arguments, so the line t.string :title could also be written as t.string(:title) where t is the created 'articles' table (also referenced as a symbol in this case). The example you gave isn't the best because it is so simple, but if you were adding a row to a table later on you might do it using: add_column :articles, :description, :text, null: true, default: nil, limit: 500 So, inserting all the bits that ruby allows you to leave out: add_column(:articles, :description, :text, { null: true, default: nil, limit: 500 }) So that's 3 required arguments to the add_column method - the name of the table (:articles), the name of the column (:description) and the type of data the column will contain (:text), followed by a hash of optional arguments that further add database restrictions/options (the field can validly be null, the default is for it to be null if it is not specified, but if present it cannot exceed 500 characters in length). The first 3 arguments are symbols, but are not hash keys. Having not looked in depth at the code for migrations I cannot say why symbols are used for the table and column names instead of strings, but certainly for the data type it makes sense. :text is an easy to understand and short descriptor, which can then be used within the method to do different things for the different data types (For a start, which additional options are valid depends on the datatype being defined). In Java (for example), you would probably do this by having a static integer with a name like DATATYPE_TEXT = 4 defined in the class, and then you'd have to either know what the integer value of the datatype you wanted was, or reference it by long form name (Package::Class::DATATYPE_TEXT) whenever you wanted to use it. That would also be global to the class, whereas the Ruby symbol can be local to the method it is used within.
I know this is just personal preference, but this is exactly why I wish Ruby would require parenthesis for calling its functions - personally I think it makes it more readable when they're used.
&gt; I wish Ruby would require parenthesis for calling its functions Oh dear god no.
If it's any consolation, I rarely actually use rspec-mode any more, since guard will run the tests for me automatically. I just haven't figured out how to make guard part of emacs yet.
Personally, I use parentheses on method calls pretty often, but I agree with you that they should be optional, not mandatory.
You might also want to note that each of those is also equivalent to render({:plain =&gt; params[:article].inspect}) and render({plain: params[:article].inspect}) for completeness, and so that OP can see what's actually going on there (implicit hash).
&gt; Personally I dislike it and prefer the 1.8 syntax Gasp!
Good point, thank you.
I also dislike coffee yet am a programmer!
WHAT ARE YOU
If you mix styles inside a hash, I will stab you in the face with my keyboard.
but you have seen starwars and read dune right?
it is pretty easy to write one-file Rack handlers for specific web-related tasks and launch them w/ the server of your choice, Thin, Unicorn etc.. 
1. read each line of the file 2. assign the output of the file in a new empty array 3. enjoy
`File.open(filename).each_line do |line|` and then [regexp](http://www.rubydoc.info/stdlib/core/frames) the hell out of it from there, I would imagine.
- rubymine - vim - sublime at then the operating system: emacs :)
I'm not 100% clear on what you're asking for, but it sounds like you want to loop through an array of strings and substitute each into a system command. Here are three examples, all equivalent: %w(IP1 IP2 IP3 IP4).each { |i| system("firefox #{i}") } ... or ... %w(IP1 IP2 IP3 IP4).each do |i| system "firefox #{i}" end ... or ... ["IP1", "IP2", "IP3", "IP4"].each do |i| system "firefox #{i}" end 
Or use Sinatra as a lighter weight framework than Rails.
Sinatra is a DSL, not a framework. It's a great DSL with which to build light-weight (or heavy-weight) frameworks, but still a DSL.
To continue on the topic of objective reasons, it's not really about "can language X do Y" because the answer is "yes" 99.9% of the time. I could write web apps in assembly if I really wanted to – it's technically possible, even though it's probably a terrible idea. So, for the question "what is possible in Ruby that is impossible in PHP?" (and vice versa) the answer is "nothing." But that isn't the real reason why you pick a language or framework. Off the top of my head, here are some actual objective criteria you probably want to look at: - **How stable is it?** How many people are using it in production? How long has it been around? - **Is it actively maintained?** How many people rely on it in production? How many contributors are there? When was the last release? - **What libraries can I use with it?** Can I use existing libraries to implement the functionality I want, or do I have to write it from scratch? - **Is support and documentation available?** If I hit a road block, is there somewhere I can get my questions answered? Is the documentation good? - **Who else can work on this?** Is the existing team familiar with this? Do they like it, or are they going to resist it? If I need to hire, is it popular enough that I can find people with experience in it, or will I have to train them from scratch? What is the average salary for these people? - **Does it have good tooling and automation?** Are there standard tools for testing and deploying the app, or will I have to make these myself? I'm sure there are plenty more criteria to look at, but they really all boil down to _productivity_, which is kind of hard to measure. It's about how _quickly_ you can implement your functionality, at a certain level of _quality_, given a certain amount of _resources_ (time, staff, money, etc.).
IntelliJ. I primarily write test automation for Agile teams, so I slang a lot of Cucumber. The ability to click-navigate from Gherkin into the step definitions is incredible.
yes and.... er, well, I have read the wikipedia entries for all the books...
I primarily write test automation for Agile teams as well! I use robot framework. Have you used it before, it's a really neat tool! i've never used cucumber, but obviously heard of it. what do you like most about it?
I'm not sure I would know exactly where to start but have you tried opening the RestClient class and modifying it?
https://bugs.ruby-lang.org/issues/9424 https://www.ruby-lang.org/en/news/2014/10/27/changing-default-settings-of-ext-openssl/ These are good reads.
 def in_stock_text stock.text end Something along those lines
Do you really need ruby for that? cat list_of_ip_addresses.txt | xargs firefox one by one: cat list_of_ip_addresses.txt | xargs -n1 -firefox add http:// and https:// : cat list_of_ip_addresses.txt | xargs -n1 -I{} firefox http://{} https://{} 
Thanks!
Optimized version: 1. array = File.readlines('filename.txt') 2. Enjoy 
&gt; It will be glorious. Maybe 2.2.1-p783 will be, anyway :) FTFY. To be fair, CRuby is a bigger and more complex project than most of us will work on more than once in our careers. (Whether that's due to opportunity or experience is left as an exercise for the reader.)
Hi! In general therms they are like private methods that are visible for subclasses. In other words. Imagine you have created a class named "A" and you define 2 sublcasses "A1" and "A2". In A you define a method that you don't want it to be usable from other scopes, so your first thought is to define it as private. If you do that then you only will be able to use it in instances of class A, but if you want it to be visible from A1 and A2 then you have to define it as protected instead of private. Regards
"Greenfielding a new app ... the performance is great". There.. The Textbook example of premature optimisation. You really should not worry about performance until performance threatens to become an actual problem. Which, in the overly large majority of projects is around Never. EDIT: I am sayding this as a former Drupal-performance-consultant whos job was largely fixing horrible performance in Drupalsites. I am not saying you should disregard any performance issues. You could, e.g. investigate if the framework you choose allows performance-fixes in some distant future at all; so that in the rare case your app becomes an actual hit, and performance starts to matter, you have an oppoertunity to fix it. But that is really not the same as choosing a language (Jruby/Java) because of "Performance". Because I'm sorry to tell you that statistically seen, your app is probably going to "fail" in attracting the masses you have envisioned.
Assuming input is 192.168.0.5:80 192.168.0.6:80 192.168.0.7:443 etc, you could do system("firefox #{File.readlines("ips.txt").map(&amp;:chomp).join("/ ")}") this translates to the shell command firefox 192.168.0.5:80/ 192.168.0.6:80/ 192.168.0.7:443 `readlines` creates an array in which each element is a line from the file, `map` executes an action against every element in an array, `&amp;:chomp` turns the `chomp` method into a proc and uses that as the action, and `join` unites every array element into one large string, elements separated by a slash and a space. You could also issue a separate `firefox` command for each one, if you wanted to space them out a bit: File.readlines("ips.txt").map(&amp;:chomp).each {|ip| %x|"firefox #{ip}"|} That way it's easy to add a sleep timer between calls if you want to.
Ruby core switched away from using the -p naming style. Now they follow something more like semver. 2.1.4 is a patch release for the 2.1.0 version, in the old style it would have been 2.1.0-p428 or something.
Except that, e.g., my current Ruby 2.1.3 reports as ``` ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin12.0] ``` So we've *three* different numbers that are/could be significant: 1. The version number (2.1.3), per semver; 1. The patch level (here, p242); and 1. The revision number (from `svn`?) Whee!
Their pricing is really reasonable. 
&gt; why I wish Ruby would require parenthesis for calling its functions with parameters Fixed that for you - nobody wants function parens with no params. 
I think i'd rather see privately-written tutorials posted here as opposed to a company's how-to section. It seems a tiny, tiny bit shill-y.
Strange, I don't see any mention of Twillio... ooooh I get it, let me re-write the title: "This is **one option out of many on** how you send SMS with ~~a~~ **our** Ruby Gem" God I hate absolutist titles 
 class A def test(other_a, meth) puts other_a.pub if meth == :pub puts other_a.pro if meth == :pro puts other_a.priv if meth == :priv end def pub "works" end protected def pro "works as well" end def priv "obv. does not work" end end So, suppose I'm calling it like this: a1 = A.new a2 = A.new # This works, public methods are always available a1.test(a2, :pub) # This works, two instances of the same class can call each others' protected methods a1.test(a2, :pro) # This does not work, you can't call anyone else's private: a1.test(a2, :pro) I almost never have to use protected methods. I can't remember the last time I've used one.
I just want a starter project to learn the language. 
Why do you need to find the "genius of Ruby"? What makes you thin it exists? Perhaps the genius is the fact that Rails can achieve what it does because of Ruby.
Read [Principles of Object Oriented Design in Ruby](http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330). Quite a few things clicked for me when reading that book. Programming in Ruby is also just fun, and when I get frustrated, the reason for that frustration inevitably turns out to be a pleasant surprise, as in there was a language construct that I didn't quite understand and that figuring out the solution unlocked a new way of doing things. Also not sure how much programming you've done in other languages. In Java you inevitably run up against bone-headed decisions made by the designers to dumb-down the language. They were clearly designing Java for their intellectual inferiors. Then go attempt to debug some C++ template errors. Dear gods what a mess that can become… Python can't figure out where it wants to go with the v3 vs. v2.7 schism. I'm a huge fan of Lisp, but the lack of libraries makes it difficult to use for many tasks. I see Ruby as giving me all the things that I love from Lisp along with access to a large selection of polished libraries.
Yeah well, Java and C++ are (still) out of my league, but thanks for the suggestion, I'll take a look at that book.
Exactly. Plus, Twilio is the shit.
The book that /u/Stubb mentioned is really cool for getting to know design patterns in Ruby. How solid are you on OOP? I'd say just start writing Ruby. Build a small game or application for something that you personally care about. Build it quickly, just dive right in. Then go back and refactor it. I've grown to love Ruby more and more because now I use it all the time (for work and at home). I love Ruby because most of the time I can guess at methods and they work. The syntax allows me to express what I want done in an easy way that makes sense. The code isn't littered with semicolons or dollar signs. The most popular style guides keep things simple and easy to read. No tabs, no camelCase or strHungarianNotation. I know these types of superficial things are (or can be) present in other languages, but Ruby is the first language I've used that seemed to have the entire community on board with it (for the most part).
I think part of the problem could be that you dont know other programming languages enough to hate them? 😛 I like ruby because: * it looks pretty (subjective, i know) * the REPL * its functional side * it is expresive (i've surpised people on how much it can do on few, readable lines of code) * closures * heredocs * in-file data * you can script in it 
Here's a contrived example of why people like ruby. Problem: I want to find all the elements in a list for which a condition evaluates to true, and return these as map of objects mapped by their uuids. Java: Map result = new HashMap(); for (A a : initCollection) { if (a.condition()) { result.put(a.getUuid(), a.getAttributeMap()); } } You can do the same in ruby as: result = Hash[init_collection.select{|a| a.condition }.map{|a| [a.uuid, a.attributes]}] And it can probably be reduced further. Obviously, the Java code is more verbose, but that's not what's really important here - the important thing is that ruby makes functional programming expressions *natural*, whereas in imperative languages like Java, functional programming feels at best stuck on with crazy glue. As an ex java dev, the thing I find most amazing about ruby is that it drastically reduces the amount of boilerplate I have to write, and means that I think in terms of *data flow* through my application as opposed to _things I need to do to the data_ 
ActionScript was OO, or it turned OO with AS3 (I think), so I have some idea about how it works, and I understand the concept behind it.
I tried to open OpenSSL::SSL::SSLContext and change the default parameters for ssl and that didn't work for me. I eventually even downloaded the latest 2.1.4 and copied the openssl and net/http folders. While there were changes, inline with the bug and patches listed above, it still didn't work for me. Have any ideas? I'm very tempted to open an account on rubymine and comment on https://bugs.ruby-lang.org/issues/9424 saying this still doesn't work. Does this work for you?
I should mention I do my development on a windows 7 machine.
VIM + Tmux + a bunch of vim plugins listed below * [Nerdtree](https://github.com/scrooloose/nerdtree) * [Ctrl-P](https://github.com/kien/ctrlp.vim) * [Fugitive](https://github.com/tpope/vim-fugitive)
Thank you for a great explanation. This was exactly what I was looking for. I have bash scripts that I want to convert over and your reply taught me a good chunk to do that. 
The book *Metaprogramming Ruby* expresses where what I think a lot of the awesomeness of Ruby comes from. 
I was going to post an example very similar to that. On a daily basis, elegant functional expressions like this are what I really love about Ruby. Here's a simpler example I'd already typed up when I saw your reply. # Return all elements of an enumerable (an array in this # case) that match a certain condition ["Fred","Fredrickson","Joe"].select{ |foo| foo.include?("Fred")} =&gt; ["Fred", "Fredrickson"] Here's the documentation for all the things you can do with enumerables (such as arrays) http://ruby-doc.org/core-2.1.4/Enumerable.html
http://rubykoans.com/
&lt;-- this guy, the genius of Ruby
With your limited exposure to programming languages (JavaScript and JavaScript), it's going to be a lot harder to find that "hot damn!" moment. Learning Ruby as effectively a first language, you don't have a basis to experience its exciting differences. You'll learn to do some neat things and that'll just be The Way Things Work. It'll be a pleasant language, and it'll grow with you, and you'll probably have "hot damn!" moments as it does, but you'll skip over the dozens of "FINALLY, SOMEONE GOT IT RIGHT!" experiences of many polyglot users. TL;DR: Just keep using it.
 # Return all elements of an enumerable (an array in this # case) that match a certain condition ["Fred","Fredrickson","Joe"].select{ |foo| foo =~ /Fred/ } =&gt; ["Fred", "Fredrickson"] Sorry, your lack of regex was bothering me.
&gt; `["Fred","Fredrickson","Joe"].grep /Fred/` FTFY.
Test First Ruby for Ruby syntax, Michael Hartl's guide for first Rails project. Railscasts is the definitive rails screencasts. He seems to have retired, but 90% is still relevant with maybe minor tweaks for Rails 4 here and there. Spring for the pro from the beginning to get revised episodes, it'll save so much time. Forget other screencasts, if a worthy successor has sprung up I haven't seen it. But then again I'm not searching for tutorials as often as I used to (and Mr. Bates is a solid reason why). You already know JS and generally how web apps run under the hood so conceptually it shouldn't be too hard to understand what's going on.
Now we have two problems! &lt;/obligatory&gt;
The dashboard is broken. {{error.message}} {application.ApplicationName}}. It's ok now. Happened after I logged in first.
&gt; but you'll skip over the dozens of "FINALLY, SOMEONE GOT IT RIGHT!" experiences of many polyglot users. He'll have these moments when switching to other languages. There's plenty of stuff which other languages "got right". Concurrency: Erlang, Type System: Haskell, Low level memory safety: Rust, ...
I tried to build a project with wkhtmtoimage on heroku a few months ago and came up with nothing. I ended up building a ubuntu machine on digital ocean and just going with that. Just did a quick google search though, and [this buildpack](https://github.com/versacommerce/wkhtmltox-buildpack) came up. It's been updated since my project went live. Might be worth a shot.
I prefer foo.include?("Fred") to the regex... is there a reason you prefer it over the include? method of ruby?
Chances are that data is being loaded via some AJAX requests. If the browser can pull the seat data down, so can ruby. :)
Well, most anything is POSSIBLE. The question is whether or not it can be done in a way that will ultimately save you any time. You CAN, if you'd like, make what amounts to a web spider that can crawl across ticketmaster's website and scrape data off a web page and then put it into the format you want. This can totally be done. But you're gonna have to deal with a ton of bullshit, you may have a completely outrageous number of edge cases, and any time they change the website it'll completely break your setup. What you would like is an API that Ticketmaster (or whomever else you want to scrape) exposes. Some Googling suggests that such a private API exists, but it is only available to Ticketmaster affiliates. I couldn't find any explicit information about that on the US Ticketmaster website, just a lot of people talking about it elsewhere (and I did find some info on the UK Ticketmaster site). [This page](http://www.ticketmaster.com/brandguidelines) has a contact e-mail to inquire about becoming an affiliate, and it seems reasonable for Ticketmaster to want to affiliate with a concierge service, so it's probably worth at least contacting them. Best of luck in your efforts. Hopefully someone else chimes in with some gems that might make the hard way easier, because I'm sure some exist--I just don't know them.
It entirely depends on how the data is being displayed in the browser. If the representation of the theater you're seeing on the screen is an object you can interact with you may be able to look at the html/javascript that's running in the browser and get some indication of how the data is being presented and manipulated. If that's the case you could then interpret the data programmatically to get the result you wanted. If what you're seeing is just a static image, a jpg or png that's being generated dynamically on the server's back end and then served to the browser for display it's gonna be far more difficult. It could be done, but you're going to have to build something that knows how to compare images and recognize differences between them. Here's a rather impressive example of a guy who got rather comfortable with [Rmagic](http://www.imagemagick.org/RMagick/doc/) and used it to break CAPTCHAs: https://github.com/mieko/sr-captcha (Very impressive shit.) So the answer in both cases is yes, but especially in the second example you really have your work cut out for you. In either case, take a look at the [Mechanize gem](https://github.com/sparklemotion/mechanize). I use it all the time for interacting with the web. The other thing to keep in mind is that these types of screen-scraping activities are inherently brittle. They only continue to work as long as the website in question doesn't change anything. If they change code on their end, your scraper breaks, and you may not even realize it. You might be getting data, but it might be incorrect data. You have to sanity-check these things periodically. This is the reason websites provide APIs for their data. That way, outside programs can interact with them and pull consistently formatted data in an expected way without worrying about changes to user interfaces. This is also something that ticketing companies will NEVER do because they already have massive problems with ticket scalpers attempting to automate ticket purchases with bots. Hence the timers on their websites, the CAPTCHAs, etc. Now that I think about it, what you're trying to do is exactly a portion of what ticket companies are actively trying to prevent. You've likely got your work cut out for you here. 
Technically, there will be some way to do it, one way or another. It could be tricky, and fragile, meaning it might break whenever TicketMaster changes something about their website. But even worse, if TicketMaster does not want you to do it, they can make it intentionally very difficult or infeasible -- including counter-measures they can put in place to try and notice that your requests are coming from automated software, and deny your software access to their website. Amazon does this for instance, and if you have software that looks at Amazon too often, Amazon will notice and refuse to let the software see anything. 
regex is just more powerful and the =~ is a cool operator. No real reason otherwise.
I want to re-iterate /u/jrochkind's point that this could be very fragile. You might work for a month to get it working and then it works for a month and breaks and you need to work another day to get it working again and then it will break again, and... It's like if you teach a robot to read the menu at a restaurant and then they change the font (either on purpose to mess with you or just because they like the new font better) and the robot stops working.
Faly, I've been working mostly with Rails but for the past few months helping PHP team working on Laravel. And I wish I could just ask them to move into Rails :) Few things I've felt I write here * Templating in Ruby: Supports erb, haml, slim, ... and the switch is super easy. I love haml and slim and the support in Rails is fantastic. * Assets Pipeline: Laravel has good support for Assets Pipeline but I stumbled upon a bug where I had to disable minification as it caused errors. * Deployment tools: Rails has good integration with capistrano, mina etc which is still missing for Laravel. * artisan is getting better, rake is super easy. * Concept of view helpers: I felt a bit weird trying to figure out where to place it in Laravel, they are straight forward in Rails. * Test driven development: The default testing framework that comes with Laravel is not as mature. You could integrate Codeception for BDD style development. Yet again I find the integration in Rails ecosystem much tighter with Rspec, minispec and other fantastic testing environments. Laravel is doing great, it is getting there, improving on every release. But if you like ruby as a language, rails is a great framework to do things quick and fast.
Play around with Mechanize and Watir and you'll probably be able to get it.
You will need to use your browser's Developer Tools to inspect the HTTP requests the site is making and find the URLs that return the seat data. Once you know the URLs or can generate them, you can use Ruby's [Mechanize](http://docs.seattlerb.org/mechanize/) library to scrape the data from the website.
No, Ruby and even programming are essentially irrelevant to this goal. You need an understanding of networking (primarily HTTP) and web servers first and foremost. Once you've identified how the web application is generating the results for the seating, it's a matter of writing a script that essentially replicates what you would do in a web browser. You could write that script in any language, including Ruby. There are many possible ways the web app may be generating that image. It is possible the image is generated purely on the server side and then sent to the client; in this case there is no easy way to convert it into text (without complex image recognition techniques, which really isn't worth the time or effort). But if the client (which is the web browser here) is generating the image based on data points sent from the server (perhaps as HTML, or XML, or JSON), it's simply a matter of finding how to get those data points. Once you've done that, the rest is pretty easy: you arrange and format it into some kind of text. What you're trying to do is basically a form of reverse engineering, which requires skills in various different fields. Ideally Ticketmaster would provide an API, in which case you could write a simple script to consume their API and you wouldn't have to jump through any hoops. Things like Chrome Developer Tools can be very useful in this reverse engineering process.
There are many potential bottlenecks; typically, the bottleneck is the barrier between Ruby and C. You want to cross between Ruby and C as little as you can. This usually means writing a full-fledged C application with a `main`-like function you can call from Ruby, and then some basic bindings to convert the result into types Ruby can handle. This overall binding layer can be a serious bottleneck if you don't design it correctly (for example, if you're calling a C function thousands of times from Ruby instead of calling a single C function once, which then calls other internal C functions thousands of times). And of course, you need to actually be good at C so you can write good, correct, efficient C code.
 get '/' do "#{['Hello', 'Hi', 'Hey', 'Yo'][rand(4)]} World!" end ...Please tell me people don't write code that actually looks like this in the real world.
Just pointing out how possible it is at the very smallest level.
This is going to be a hard problem. Nobody here who has commented has appeared to have spent a few minutes at the problem. First off, from viewing the HTML source of the seating chart (I could be looking at the wrong one, the seating charts on ticketmaster.com for random events don't look anything like the ones you've screenshot) there's a mindnumbingly complex dynamically generated page with lots of javascript that you're going to have to sort through and learn. Then you're going to have to inspect traffic from the network layer because Ticketmaster uses flash, whose interactions between the browser and user are likely going to be obfuscated, and I'm not even sure are any network interactions because there's no lag between mousehovering over a seat and seeing its price, and you're certainly not going to be able to decompile each SWF. But if that were possible, you'd have to come up with an appropriate data structure to use that arbitrarily contains the seats that exist (which won't be the same across venues AND [shows](http://www.ticketmaster.com/event/1C004CE8D8566EE2?brand=&amp;tm_link=tm_homeA_g2&amp;hot_ticket_brand=home)) vs the ones that are available, and then somehow come up with an algorithm that constitutes what are "good" seats or not. And you're going to have to do this for every venue to even get it half-right. This sounds difficult for a very senior programmer, and the amount of front loading makes it especially painful. And then when they change the code on the site, your app breaks. I would call Ticketmaster to see if they have a partner API to work through before attempting to reverse-engineer something from the front-end. 
thx. builpack if for Cedar-14 unfortunately. Trying one last time to compile a static binary
If you've done some programming (so you have been exposed), but you're not a programmer, and you've never been excited about programming, or interested in it's intricacies, or excited about a programming language, or at least perhaps the opposite, frustrated with the limitations of some programming language... ...then you probably aren't ever going to be excited about ruby either. Some people get excited by programming, some don't. 
If it's a Javascript heavy site you're not going to have any luck just pulling HTML. Check out [Watir](http://watirwebdriver.com/), you can use it to drive Firefox or Chrome with Ruby. Figure out how to navigate to the page you want and poke around using the developer tools in a seperate browser window. Eventually you should be able to identify the bits of the page that you need to target and then use Watir to pull it down. Once that's all sorted you can use [Headless](http://watirwebdriver.com/headless/) to run your script without the UI. Good luck!
Probably the most practical advantage for a simple case like this is that you can easily make the regex case insensitive, unlike .include? ["Fred","FREDRICKSON","Joe"].select{ |foo| foo =~ /fred/i } =&gt; ["Fred", "FREDRICKSON"]
your best solution, in my opinion, is to try to find an api. [Here](https://darwin.affiliatewindow.com/documents/ticketmaster/Ticketmaster%20API.pdf) is something i found after a few seconds of searching. i know there is a private ticketmaster api for commercial partners. that might be worth looking into. it might not be as expensive as you think (although it could totally be as expensive as you think). and google 'consuming rest apis in ruby'. google is your best friend. i should also add that the ticketmaster api i linked is actually a soap api. edit: and once you look more into that, here's a [gem](https://github.com/jnunemaker/httparty) that might help you edit2: and now that i looked at that api a little more, it looks like they don't have seating information queries available. that's obnoxious.
Interesting. That definitely does sound like the most robust way of doing it. Plus it is completely independent from the differences between flash/silverlight/etc, and I wouldn't have to wade through a sea of complex javascript. Like you, several posters mentioned the fragility of the deciphering their code and having the website update and breaking everything. Obviously every different venue would have to have a separate script, but it would be nice to only do them once and be done. The obvious downside is the unknown of how complex this will actually be. My initial reaction is that it's going to be very tough, and there may be less resources available because image analysis (I assume) isn't as common. The upside is that what I'd be trying to "recognize" would be about as simple as it could get. A solid color within a square is way easier than "is this a face". Do many people have experience with this? Is this realistic or would this be a wild pipe dream only for the most experienced programmers?
This release was kind of nice due to the merge request from back in July where `--ssl-disable-verify` was added in. It was a missing, but handy feature for those who were getting certificate warnings. Unfortunately for me, I had an older bump of Doc Brown and was having that issue. I had to put a manual fix in place, but now can revert back to using the latest version without monkey patching. Edit: I'm using Faye in production through Thin. So far it seems to handle the workload very well for 400-750 rps.
I recommend the Pragmatic Studio. They have Ruby and Rails tutorials that are beyond stellar. http://pragmaticstudio.com
If you want a really quick hack it appraoch, I would urge you to consider using some OCR (optical character recognition) software and script something up - you can get a quick, working inventory script with no prior technical knowledge after ~45 minutes using AutoHotKey. The more I think about it, this is the tool for what you're looking to do. * Use the screenspy software and make a list each pixel location of the seats * Make a script that runs through the list and tallies which ones are colored as open / closed / etc. for given set of shows
I highly recommend a recent Ruby Rogues episode about the topic: http://rubyrogues.com/176-rr-rails-as-an-soa-client-with-pete-hodgson/
What can I say, the Ruby community is contagious
&gt; Please tell me people don't write code that actually looks like this in the real world. You mean you have never worked on a real-world app, or in a team with deadlines or with a CEO telling you to ship tomorrow or the company will go bankrupt? If not, I'll have to dissapoint you: People write code like that in the real world. In fact, "the real world" is probably the place where code like that is witten most of all. By people who are quite often very well aware that what they are doing is dead-ugly. 
Maybe try http://www.codewars.com/ there's a lot of practice tasks like that. 
The mix of video and text is really awesome, they build an events app and make you build a movie app in the text exercises.
rvm get head
I've been trying to collect SOA resources lately, particularly those related to Rails. I second maskalor's recommendation of the Ruby Rogues episode on Rails as a SOA client. Pete Hodgson's talk from Rails Conf is also worth checking out. Here are other resources I've come across: Martin Fowler: Microservice Prerequisites - http://martinfowler.com/bliki/MicroservicePrerequisites.html Martin Fowler: Microservices - http://martinfowler.com/articles/microservices.html Rails as an SOA Client - https://www.youtube.com/watch?v=CzF3g_JM1YQ Ruby Rogues discuss Rails as an SOA Client With Pete Hodgson - http://rubyrogues.com/176-rr-rails-as-an-soa-client-with-pete-hodgson/ MicroServices.io - http://microservices.io/ Ruby Rogues discuss Extreme Deployment and SOA - http://rubyrogues.com/172-rr-extreme-deployment-with-badri-janakiraman-and-florian-motlik/ Migrating to SOA - https://tech.bellycard.com/blog/migrating-to-a-service-oriented-architecture-soa/ Lessons Learnt Working with Microservices - https://blog.dropletpay.com/lessons-learnt-building-a-microservice-architecture/ Testing Rails SOA - http://www.bignerdranch.com/blog/testing-rails-service-oriented-architecture/ Developing SOAs - http://lethain.com/lessons-from-developing-software-oriented-architectures/
Read *Eloquent Ruby*
For me, even your Twitter clone warrants rails. I think Sinatra is perfect fot static websites and machine level computing services that want to tack on some sort of web interface (think resque). Still, I know there have been full scale sites built with Sinatra and I'm not saying that's bad, I'm just saying I wouldn't do it. 
Not saying you are wrong, but this happened nearly a month ago. Still nice about the ssl fix.
http://www.thinkful.com/ is pretty good. They pair you up with a mentor to help you when you get stumped and to work with you on your specific goals and questions.
Basically what this adds over just using a Date/DateTime is the fluent-style interface? That could be reasonable, for people that find that to make certain things easier, I guess. I'm a bit worried about it's handling of timezones, which I (and others) have found to be an error-prone area of date handling. For instance, you give examples of 'changing the timezone', but there are a couple different things this could mean -- if you change the timezone, does it keep the same clock time, but just change the timezone tag; or does it keep the same 'moment in time' but translated to a different timezone (meaning clock time changes). Both operations can be needed sometime. If you could initialize with an existing Date or DateTime object, that would be useful. (And it should respect the timezone of the input, of course). One of the trickiest parts of date arithmetic is addition/subtraction over things like DST changes and leap years. You can probably handle this properly by implementing in terms of DateTime which already does, and you may already, but it would be a good thing to test for and advertise. Dealing with dates properly in all edge cases is actually much harder than it originally appears. If writing a new date library, it would be wise to acquaint yourself with some of the issues (you possibly already have). Implementing in terms of the underlying ruby DateTime class might let you get it's solutions for 'free', but it might also be easy to accidentally mess it up. http://www.hanselman.com/blog/BackToBasicsExploreTheEdgeCasesOrDateMathWillGetYou.aspx http://www.reddit.com/r/programming/comments/16v8ja/what_every_programmer_should_know_about_time http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time-wisdom
Hashes also have built-in memoisation support. fact = Hash.new{|h,k| h[k] = (k == 1 ? 1 : k * h[k-1])} p fact[1] p fact[2] p fact[4] p fact[8] p fact.size Gives: $ ruby memo.rb 1 2 24 40320 8 
Rails is definitely complicated, and has gotten more complicated since early days of Rails 1/2. But a lot of that is because of all things discovered that web apps (at least certain kinds of web apps) needed to do. For instance, are you handling CSRF attacks in your Sinatra app? Do you need to be? Rails just does it out of the box (which gets frustratingly complicated in the edge cases where it's not doing what you want, but ordinarily means you're handling it without even knowing it). Other things Rails does, some of which you probably eventually will need whether you know it or not, include: HTML injection protection in a sensible way with the `html_safe` extensions to String; i18n (including pluralization and dates); really powerful routing that lets you refactor your underlying implementations without changing your public-facing URLs (including taking care of URLs your app generates to itself). Probably more things I'm forgetting about because Rails lets me forget about them. Also, the ability to share common code with Rails Engines is super useful when you need it, and relies on all the Rails conventions to make that code work accross projects. "All the Rails conventions" is also not unrelated to "Rails bloat". You certainly can do all this stuff in Sinatra -- sometimes by using ActiveSupport or other parts of Rails in Sinatra (!) -- but it requires you to think about them and decide how you're going to deal with them figure out how to integrate them with your app. (And then makes it hard to extract and share code that may solve a common use case, but other apps may be architected in incompatible ways). There are plenty of parts of Rails I don't like too, plenty I find over-complicated or bloated. Personally, I hate Rails migration of more and more functionality to rack middleware; I think it makes things harder to read/debug, harder to maintain, and harder to modify when you need to change or extend default behavior. But most people seem to disagree with me (and I acknowledge one of the points of the middleware architecture is supposed to be making it _easier_ to change or extend default behavior; I just haven't found it working out for me that way in practice. mostly.). And this points out that one of the reason Rails is sometimes messy or bloated, is because the problems it's trying to solve are difficult to figure out how to solve in a non-messy non-bloated way, and Rails represents the work of a bunch of people trying and sometimes failing to figure it out, while disagreeing with each other, and while balancing legacy compatibility with improvements (and not always choosing the same balance points I would!). But those difficult to solve cleanly problems are problems that most will need solving one way or another. 
I agree. Security is hard. Rails has your ass covered. I don't agree about the route-thing; sure it might work like that in some cases, but in most cases you really need to also update documentation, incoming links from e.g. a blog and whatnot. In practice I've found this nearly never really easy. But that aside. &gt; For instance, are you handling CSRF attacks in your Sinatra app? Do you need to be? Rails just does it out of the box (which gets frustratingly complicated in the edge cases where it's not doing what you want, but ordinarily means you're handling it without even knowing it). A nice example. Because this CSRF-protection is nice when needed. Your API does not need it. An API-only app might still really want activerecord and some parts of activesupport, but it does not need such features (nor sessions, etc). Sure you can move them all out; rails will prove very modular in those cases. In Sinatra, at least I actively choose to include `rack_csrf` (Rails gets it from there too AFAIK). You might forget; which is why including it in a framework by default is good. But so is e.g. rate-limiting. Rails does not include it, nor Sinatra. Again there is a simple rack-middlewhere for that. I've had several Sinatra apps that grew into something that certainly should have been a Rails app. But I've had rails apps where, on hindsight I spent so much time tuning what parts of the stack should be there, that I certainly would've had an easier time with Sinatra.
You make some good points. I think you misunderstand what I was saying about routing though: &gt; I don't agree about the route-thing; sure it might work like that in some cases, but in most cases you really need to also update documentation, incoming links from e.g. a blog and whatnot. In practice I've found this nearly never really easy. But that aside. What i was saying is that the Rails routing system lets you fairly easily _keep your URLs the same_ so you don't need to update any incoming links (which may be on third party sites not under your control) or documentation related to links, _even when_ you want to change the way the URLs are routed to your code (different controllers split up in different ways, different action names, etc). But, sure, this may or may not be a good idea depending on how confusing it's going to make your code (in some cases a bunch of redirects may be wiser, which is probably equally do-able in Rails or Sinatra). On another point, in general I agree that an API-only app is not the pattern Rails is best suited for. If you are already familiar with Sinatra, familiar with all the problems you will want to solve, and familiar with the sinatra/rack-compatible tools for solving them (rack_csrf for example, although you might not need that particular one in an API-only app), then Sinatra might be a great choice, sure. But if you aren't, and are familiar with Rails, Rails might also do the job. We all have limited time/energy to become familiar with new universes of tools, which is another reason why Rails monstrous include-everything approach can be come popular (for good and ill). 
Actually started with code school and it looks really nice
Ah, clever use of method definition returning method name !
yes, but if I want to test a whole wizard and at the end I have a big post with all the input information I would like to check the POST, otherwise I have to provide static JSON objects on my. I get your point but I'm a little bit limited from my company. My biggest problem is that I don't understand many ruby mechanics, like World() and what the many ruby gems are doing. I solved it for now, I save the POST in my Sinatra and can ask him for the last POST he got when I call localhost:4568/last_post/, I do it with a HTTP Client in a gherkin step, but it's not really the right way I guess. I saw something like And/^it matches my expected response$/ do |response| last_response == response end but it didn't work with Rspec,Webrick,Rack::Test,Capybara but I think it didn't work because I don't know how the mechanics are working. Probably I should read a book about ruby :)
It's stuff like this: &lt;%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true %&gt; Which really gets to me. I genuinely don't see how that is more readable than: &lt;%= stylesheet_link_tag ( 'application', {media: 'all', 'data-turbolinks-track' =&gt; true} ) %&gt;
Or just use rbenv or system Ruby packages. Anything that actually verifies the package before installing. One liners involving curl piped into a shell should be considered harmful. 
&gt;Ruby packages. Yes. Why do anything else?
Why the class variable? Why not an instance on the class object?
Hi, OP here. If you read the command line, it is not a curl piped into a shell, it's merely downloading a file and extracting it into a specified directory.
Which is much better! Obviously. Oh wait. You're kind of missing the point I think. Without cryptographic verification of binaries nobody can be sure of what they're installing or running. Edit: Oh, and we're piping direct into sudo! So tar is as root. Best hope there's nothing nasty in there. Could be installing setuid binaries for all I know. 
Because you are assigning to a local variable called speak within the wont_work method. It would be ambiguous to allow this. Therefore, when calling setter methods you must use "self.method_name". 
The benefit of installing ruby via the package manager is a) the package specifies all runtime dependencies b) the package can easily be upgraded or uninstalled c) the packages are PGP signed. You should consider creating a PPA like [brightbox's ruby-ng](https://launchpad.net/~brightbox/+archive/ubuntu/ruby-ng). You also might want to look into [deterministic builds](http://gitian.org/howto.html), which allows users to verify the binary was built from the source and that no extra code inserted.
It's amusing that this is a thinly-disguised advert for a packaging service that builds debs. Clearly they know what they're doing.
thanks. I'm going to include rubykoans as well.
Volt actually looks pretty sweet. Have any of you guys tried it yet?
I'd love to hear some first hand accounts as well!
I love ruby but let's not kid our selves here. ...
Um, can anyone give me a tl;dr for volt. The author is clearly impressed but is it just a web framework with Opal instead of CS/JS and built in support for, I'm guessing, websockets?
*Disclaimer: I've contributed a bit of code to Volt so keep in mind that my oppinion might be biased.* Volt is exactly what I had been looking for some of my projects for quite some time. I really love being able to write ruby on both server and client. Especially if the framework makes it so easy. I had played around with Rails + custom Opal code but it kinda sucked. There's still some stuff missing (for example live reloading for server side parts or support for databases other than MongoDB) and other parts that might change before the final release (WebSocket implementation, config files). Right now I'm building a web interface that allows me to control my Raspberry Pi home media center. It's pretty easy to build components that update in real time for all clients and you don't have to write a single line of JavaScript.
**tl;dr:** A framework that focuses on using Ruby on both server and client and offers two way binding even between data on different clients. **Slightly longer version:** Volt clearly focuses on reusing code between server and client so for example when you write validations the same code will run in both environments. That makes it way less work than writing a Rails backend and a CS/JS frontend. For more details, look at my reply to /u/juicypt
Gem idea: Let Rspec play "Whoops" and "Whoops, it worked" for spec pass and spec fail.
Anyone know any reviews of it for buggyness or performance?
I had a good play with it about 3 or 4 weeks ago but it wasn't ready and the documentation was seriously lacking (I think it still is). That said, I'm not a Rubyist by trade so others might find it easier to pick up than I did.
just learn javascript...
Looks like it has a lot of functionality for such a young framework. I really like the idea of write once, run client+server for validations and other helpers. Will definitely be taking it for a spin one of these days :)
Exactly. I'm a long time Python coder and new to Ruby and boy oh boy would I be thrilled if we could use Python and/or Ruby natively in browsers. This sounds a bit like Pyjamas. Or GWT even (may I never look at it again). I see why something like this is attractive but it annoys me that we're still stuck with generating Javascript. Actually, my dream for browser scripting would be even better than that - an open API integrating with the DOM, CSS, etc that any language could plug into: Ruby, Python, Perl, even compiled languages, whatever. THAT would be awesome. One of the things that absolutely drives me crazy about web programming is that we are pretty much locked into Javascript or something that compiles into Javascript. It's a giant clusterfuck that we've all come to accept this and I don't even really hate Javascript. Compare that monopoly to the spectrum of server side options.
JavaScript as a compilation target is actually a much better experience than you might expect, with things like source maps errors show you where in your (ruby) code the error occurred. Also because Opal is "transpiled", it's easy to see what ruby code generated the JS code.
The goal isn't to avoid learning JS, it's just that JS has limitations/annoyances that are nice to avoid. (Not saying ruby is perfect, but personally I think it's a lot nicer to work with)
I agree with everything you said. Compiling to js is a bandaid imo. Js is getting better, however, it's mostly only supported in node and we will never escape the browser wars. 
Fair enough, still wish we could remove the Javascript dependency though.
Why? it's blindingly fast. If you can compile to JS with emscripten, and you have access to the GPU, then I can't see any real constraints.
Can I ask you to check out my own book? The Trailblazer architecture is basically a service-oriented design with strong focus on loose coupling and OOP. Trailblazer - A New Architecture For Rails https://leanpub.com/trailblazer
Meteor in Ruby? I love that they started with server-side rendering.
"It's either ASM or something that compiles to ASM." Yes, we would.
why? it's not a particularly pleasant language, and there are lots of better ones that compile to it now.
Actually, given DHH's stated opinion of RSpec, you'd need to find an "I find that offensive" soundbite for every RSpec pass or fail. :)
For real! Very exciting. It's a shame it's built around MongoDB but I'm sure that will change in time.
Updated the article with https links, note about `sudo` usage, and more examples to show this is not limited to Ubuntu. So yes, while verification and proper packages would be a nice to have, this is a first step that proved useful for us in a lot of cases when you just want a specific Ruby installed on any of the supported platforms. As far as I know brightbox's packages are limited to Ubuntu only. And system packages are generally not up to date with your requirements. Finally, at some point, you also have to trust the provider of the packages/archives you install, though once again some cryptographic proof of the integrity and authenticity of the files is a must.
Have fun! If you have other questions feel free to ask. Either at our new subreddit or at our gitter.im chat.
Ryan moved the documentation to http://voltframework.com/docs It's way easier to read now and he's closed a few gaps. If there's still a topic you want to read more about, just leave a message and I'll either add it myself or ask Ryan.
They accept it with Java, C#, and Node. And before you say that the first two use VMs to compile to assembly, you should read up on JIT in current generation javascript. And before you say that you don't have to convert to another language you should read up with on Scala, Clojure, and F#.
This doesn't even look like ruby. Can somebody please explain to me what this is and how this is useful vs. normal looking ruby code?
Looking forward to this! Opal, Volt framework and Fire look promising. RubyMotion has the potential to change the iOS and Android's development landscape. And mruby is a refreshing direction for Ruby, away from the web and into embedded systems -anything that make Ruby more versatile and diversed are much welcomed.
I found that book to be hugely disappointing, it didn't really cover anything other than obvious stuff.
Yeah his talk is pretty good too: https://www.youtube.com/watch?v=CzF3g_JM1YQ. Slides: https://speakerdeck.com/phodgson/railsconf2014
`Either` and `Option` force you to explicitly handle possible errors since neither `Left`, `Right`, `None` nor `Some` have the methods you want to call. To make working with these two types (and monads in general) easier, there are a bunch of operators defined on monads. The cryptic notation (`&gt;-&gt;`) has its origin in Haskell AFAIK.
idk about "getting rid" of nil so much as wrapping it in a None, but yeah
Huh, I've never seen the "say" method or the WhateverRepository pattern before. Regarding service objects and presenters? So. Much. Yes.
Good stuff! Quick note... `Minitest::Test#setup` should not need to call super. If you need code to run before every test in your test suite, you want to put that in `Minitest::Test#before_setup`.
Awesome. Did you follow one month rails? If you did, do you understand most everything you did? I didn't the first time around. Just wondering. 
@txustice why are you trying to merge Haskell into Ruby!? The humanity!!! Said in jest. :)
Ah, stupid muscle memory. Just corrected, thanks for the assist!
Added support for rails 4.0, 4.1, and 4.2. If building the mocks didn't work for you before try it again, a ton of things have been fixed/improved for version 1.7.
Could you elaborate on what you meant by instance on the class object? I'm curious about other, more efficient ways to do this. My reason for going with a class variable was that the memoized version of the method always depends on the arguments of the method, so every instance of `Calculator`could rely on the same cache.
Putting `./bin` on your path isn't generally regarded as good advice, and it's certainly not a good idea to put it first. If some nefarious gem created, for instance, `./bin/ls` when you ran `bundle install`, you're not in a happy place.
This. I just use `bin/rails`, `bin/rake`, etc.
As /u/realntl suggested, you can just install binstubs and use `bin/rails`, etc. Way safer, way less magical. It's only 4 extra key presses. Also, add this to your `~/.bundle/config`: --- BUNDLE_PATH: ".bundle/gems" BUNDLE_DISABLE_SHARED_GEMS: '1' This really ought to be the default. This will install all gems locally into your projects' `.bundle` directories instead of globally, more in line with the way e.g. `npm` works. Yes, this takes up more disk space, but will save you from lots of headaches. Now you only need to globally install gems you *really* need available everywhere.
I love the content
I have `alias plz="foreman run bundle exec "` in my `.bashrc file. Then it's just muscle memory to shove it in front of any command. plz rake plz rails ...etc
&gt; It's only 4 extra key presses Probably just 2 ("b" + &lt;Tab&gt;)
Instead of setting an insecure `$PATH`, install the [rubygems-bundler](http://mpapis.github.io/rubygems-bundler/) plugin.
Has anyone ever tried to run Rubinius in production? Would be interesting to hear some experiences.
&gt; Ultimately, strong coupling between system components (client and server in this case) sacrifices long-term changeability and scalability, and committing to Ruby for the server-side application means you're already making certain tradeoffs with regard to memory consumption, CPU utilization, and concurrency. &gt; I'm late to the party but the persistence model only supports MongoDB. Until it supports a relational database i don't think i'd consider using for more than a toy project
Have been using it for about 6 months now for its ability to support websockets in process. No issues with stability. Speed is comparable. I would recommend using it with the Puma webserver over any of the others.
Hey, nice job man. I'm only about halfway through the OMR course...I'm wondering how much actual knowledge I will have by the end of it, and if I will at all be close to building a rudimentary Pinterest/Instagram clone. Crossing my fingers.
That first example is wrong! Or at the very least, not applicable to Ruby (and JavaScript, and Scheme, and a bunch of other languages). Because in the procedure b, x is a free variable and y is a bound variable. When you call b, y is bound to 5. Since x is a free variable, not defined in the local environment of b, the parent environment must be searched. x is in the parent environment with a value of 2. Thus, the result of x + y is 7. Hope this helps. Just FYI, Ruby has more complicated scoping rules than simple lexical scoping. This example doesn't illustrate them, but be aware.
A quote from PEP-8 (Python's style guide)...
Seems to me you're referring to some older RuboCop version, as the self bug you're talking about was fixed long ago. No tool is 100% bug-free - if you spot problems you should report them.
That's exactly why Github has private repositories.
If you want private repos and don't want to pay, use bitbucket.
Thanks for replying. To clarify semantics: &gt; in the procedure b, x is free variable and y is a bound variable. When you call b, y is bound to 5. Since x is a free variable, not defined in the local environment of b, the parent environment must be searched. x is in the parent environment with a value of 2 Doesn't lexical scoping mean that yes it is searched in the parent environment, but it then should find "x = 1" because that was what was declared when the function was created?
You are using Proc, it's a closure that will capture outer variables. Take a look at this confusing, but thorough article: https://innig.net/software/ruby/closures-in-ruby
`&gt;-&gt;` is probably the 'bind' operation, which you can think of as a sort of programmable semicolon (e.g., the thing that says "process this line of code and then do the appropriate effectful stuff). In Haskell, this would be written as `&gt;&gt;=`.
In the Ruby example, your Proc `b` won't try to resolve what `x` is until it's called (and it resolves it anew each time it's called). But when it _does_ resolve `x`, it does so in the context of where the Proc was defined, not where it's executed. This example is bad for illustration because in both the definition scope and the execution scope, `x` refers to the same thing. Here's a different example: x = 1 b = Proc.new { puts x } b.call # =&gt; 1 def other_scope x = 2 b.call end other_scope # =&gt; 1 Even though there's a different `x` inside the `other_scope` method, the `x` that the Proc can see from its definition is the one that gets used.
When you reassign x, you're mutating the binding in the top-level environment, which is the environment where f's body is to be evaluated. ML's semantic model for closures is not applicable to ruby, which is a lang. with much greater support for imperative programming. Have you seen the Week 4 Motivation videos?
Ha! At first I dismissed `&gt;-&gt;` as simple operator overloading until I came across [this test](https://github.com/txus/kleisli/blob/bc194f39976d9e04e712c574367a44a4bca40f35/test/kleisli/either_test.rb#L13-L19): def test_bind_right v = Right(1) &gt;-&gt; x { if x == 1 Right(x + 90) else Left("FAIL") end } assert_equal Right(91), v end `x` is never defined, but this code somehow works. Turns out `&gt;` is the method name and what follows is a lambda using `-&gt;` notation. Mind = blown.
Seems as though Codeship can use Bitbucket and it's free for private repos. Maybe that would work for you?
Saving this to shove down my boss's throat
What you said is only true in statically typed language though. In case of kleisli and Ruby, there's nothing at all forcing you to handle error case.
&gt; there's nothing at all forcing you to handle error case. I don't think that's true: get_value("missing_key").to_i # =&gt; 0 vs get_value("missing_key").to_i # =&gt; Undefined method `to_i` on None
Maybe Semaphore? semaphoreapp.com
You have your app in some sort of source control though right? 
I'll give that a try 
I'll give that a try 
But they don't come for free 
Its not about privacy of repo, I'm looking for continuous integration which works with heroku.
Its on git provided by heroku 
I don't see any definition of `get_value` in Kleisli. Anyway, according to Kleisli's example. Some(10).value == 10 None().value == nil None().value.to_i == 0 You can blindly call `#value` on both `Some` and `None`, on `Either` and on `Try`. Nothings forces you to handle both case separately.
Jenkins could work, but you will need to do most of the boilerplate yourself.
`get_value` is user code. I didn't know about `#value`. I expected Kleisli to be inline with other implementations of the `Option`/`Maybe` type and at least raise an exception when unwrapping a `None` (e.g. `fromJust`). So, yeah, `#value` shouldn't exist in Kleisli.
out of curiosity, does that mean you want the CI tool to run tests *after* deployment?
Supporting more databases is on the roadmap.
Yeah, that would be my complaint too: a slower boot time. Otherwise, I'm pretty happy.
Websockets in process...that sounds like something I'd be interested in. Do you have any links to some example code?
that is pretty genius, actually, haha.
...heroku is not a source code repository. it happens to use git remotes to kick off the deploy process, but that does not mean it is a repository. And most of the apps you are talking about for CI will require you to pay to use them in a closed source manner. You should really push your code up to bitbucket, though.
Host the code on bitbucket and use codeship for CI
It seems so... It won't be "out of the box" easy... But it wud be straightforward 
Yes... Deployment on staging branch -&gt; ci runs tests -&gt; i push to master branch.. 
Jenkins is anything but straightforward to set up. I'd only recommend it for larger organizations, not individuals.
Imgur (#14) afaik is written in php
Cool gem. I haven't looked at escort before but it looks that your reliance on it is what's hindering your ability to make your flags order-independent or where the order is meaningful. Someone I work with wrote a gem that included its own flag parser and it was only one file, under 100 lines. One thing that might be nice is to include the pry gem and give a flag option to make it an interactive shell session. That way, you can maintain the credentials behind the scenes and query the JIRA database repeatedly w/o needing to explicitly authenticate each time.
"gojira" is an amazing name.
Sometimes lexical scoping does work that way, but not in ruby. 
Your Gem structure is pretty standard from what I can tell. Not bad there. Actual functionality seems alright, so that looks good as well. As for ordered options... I don't like ordered flags so much. Subcommands would be better in my opinion. There is a gem called [Subcommand](https://github.com/rkumar/subcommand) that lets you do just that. You can call `gojira issues open --list 15` would be different than `gojira issues list 15 --open` or whatever you want. Having ordered flags, while easy to type, are difficult to remember without a detailed help file and are very difficult to interpret. Diverging from UNIX-style command usage would be confusing for a lot of users. If you really want to look at gem structure, then browse http://rubygems.org/ and find some popular ones, then check out the source.
I strongly recommend everybody to simply clone the volt todo example and try to play around with it. Volt is actually even easier to read and modify than meteor. Volt still lacks a security model, but it's already great for prototyping single page webapps with websockets. git clone https://github.com/voltrb/todos3 bundle install bundle exec volt server Now try to add a puts statement to a method in the main_controller.rb and watch it appear in your browsers console. Then add a simple input field to todos.html &lt;input type="text" value="{{ current_todo._owner}}" Notice how this is all there is to it. Your data is stored on the server. What I want for christmas is a security model for Volt and some way of integrating this with the f****ng awesome famo.us javascript library for faster than native scroll views and animations on mobile devices. If my wish come true, fast responsive mobile apps packaged with cordova would be easier to develop than ruby on rails.
Speaking of orderedness, [here's a great talk on code simplicity by Rich Hickey](https://www.youtube.com/watch?v=rI8tNMsozo0&amp;t=45).
very nice -- didn't even know heroku supported anything but master branch. perhaps just setup and run jenkins-CI locally? i'll stop now since i'm talking out my ass. p.s., see the recommendation below that codeship supports bitbucket now.
It isn't.
The order of the options shouldn't matter, I think it is too confusing for the user to think about whether she wants ''open --list 15'' or ''open 15 --list'' I wouldn't even implement the "get the last 15 issues and display the open ones", that's kinda an edge case and it would be better to just show the 15 issues along with a status. Generally the options should be composable, otherwise you end up with really complicated ordering or an explosion of command line options.
Mozilla, Bugzilla, (Go)Jira. . .
I seriously enjoyed the Lynda.com videos for JavaScript and jQuery Essential Training. Highly recommend those. E.g. http://m.lynda.com/JavaScript-tutorials/JavaScript-Essential-Training/81266-2.html
I think we need more context to help you answer this one. &gt; I'm developing a Sinatra app and I want to make it available internally only. At work? At home? &gt; I imagine I have to setup a server box, deploy the app there and connect to it. Yup. Depending on the scale of the project and for whom you're doing it, there are different ways to handle this.
*Crockford. Great recommendation. He also does a really good job at presenting the history of the language and is a pretty gifted speaker.
I've never tried this, but opal is making some good strides. There are front end frameworks in the making for opal, as well as more bare bone front end frameworks that already exist like [vienna](https://github.com/opal/vienna). I wonder if writing some front end stuff with opal to learn how code interacts with the DOM, then getting into JS would be good?
Are you thinking of something more UI-driven or API-driven? You probably don't need Nginx unless you're serving a lot of static assets (images, etc.) or if you expect enough traffic that you need a load balancer -- which probably isn't the case for you. However, you do need to use some kind of app server framework like Unicorn (or Puma or Thin). You mention a Postgres DB. I assume this is something that already exists in your environment, rather than something you'll need to create? Either way, you might also want to consider using an ORM framework like Active Record, unless you're super comfortable with SQL already. There's a gem for integrating Active Record into Sinatra, so that's probably the easiest and fastest even if you do know a lot of SQL. I've mostly worked with Rails rather than Sinatra, so that's kind of the end of my expertise here. I'll go ahead and link dump you, though. * Basic Sinatra tutorial: https://www.digitalocean.com/community/tutorials/how-to-install-ruby-2-1-0-and-sinatra-on-ubuntu-13-with-rvm * Example Sinatra CRUD (Create, Read, Update, Delete) application, probably similar to what you're doing: https://github.com/ryanbriones/dbc-sinatra-crud-example * Slightly more advanced Sinatra tutorial (covers application and web servers): https://www.digitalocean.com/community/tutorials/how-to-deploy-sinatra-based-ruby-web-applications-on-ubuntu-13 * App server comparison (for choosing between Unicorn or the other alternatives): https://www.digitalocean.com/community/tutorials/a-comparison-of-rack-web-servers-for-ruby-web-applications * Sinatra-ActiveRecord: https://github.com/janko-m/sinatra-activerecord
At least in Rails, you can restrict the requests to those with a certain IP range using [scopes](http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Scoping.html). This is kinda hacky but maybe you could just have a line in each endpoint that returns nil unless the request (you get a request object in sinatra, right?) object's IP is in a certain range...?
D'oh! Corrected, thanks!
My favorite... https://www.destroyallsoftware.com/talks/wat
Answering your questions: It's UI-driven. And I don't **have** to use Postgres, but I only hear good things about it and seems like a good choice. And I'm using Sequel as my ORM. About not needing Nginx: that's interesting! All the tutorials and guides I found would pair either Nginx or Apache with an app server. I'll investigate further. And thanks for the link dump! There's some things there I hadn't found on my own.
This leaves the application vulnerable to ip spoofing. 
&gt; The language makes a lot more sense Coffeescript is literally just new syntax for Javascript, so how can it make more sense?
Ooh, did not know. Upvote.
Here's my modification of websocket-rails: https://github.com/Yakrware/websocket-rails And my issues thread with some issues I've run into: https://github.com/websocket-rails/websocket-rails/issues/229 Sorry that it's not more organized: haven't had a chance to go back and clean everything up, nor finish off the process of removing event machine reliance.
I think that multiple machines would be overkill for what I need. It's a app with very small scope. It seems Nginx and Unicorn is the way to go? Or is that **also** overkill? That's what I'm really trying to figure out, I guess; if it's an internal app, with five client connecting to it, is there a simpler -- yet reliable and non-hacky -- alternative? Or I should just go with it? Once again, thanks!
It's inspired by Ruby and closer to Ruby syntax. It fixes some issues with JS until ES6 arrives. I agree that CoffeeScript is a better choice for guys already familiar with Ruby, but I recommend learning vanilla JS first. Understanding JS is fundamental and you can't skip it!
Ok, simplest way would be to get it running on a machine somewhere in the local network. From the sounds of it, it could be your work desktop, or something else. Make sure the workstation/server only has inter ip addresses (10.x.x.x, 172.16.x.x, 192.168.x.x) - run ifconfig on Linux, or ipconfig on windows. Send people the internal address to connect to: eg http://192.168.1.10:5000/ Some more advanced bits you could add later: - Reverse proxy like nginx or Apache - DNS name instead of IP address - service management to ensure its running/restarted - package for easy distribution/installation (den/rpm/msi/docker image) Good luck. 
An important thing you should start soon is adding tests for your gem. Here is an example how I do that: https://github.com/apotonick/nit/blob/master/test/commands_test.rb In order to handle HTTP and the JSON parsing I'd like to recommend https://github.com/apotonick/roar. This will help you focusing on you business (which is JIRA) and not how to parse/serialise JSON for their API. Other than that, your gem looks good. I like how you keep code out of the bin class and delegate to classes in lib - that's exactly how it's done!
I've written a fair amount of CoffeeScript without knowing much JS. Never had a problem. It's really rare to have to read the generated JS, and it's usually quite clear what it does, since the translation is so direct.
numbers being sorted lexicographically... shit like this is why I personally try to avoid JS at all costs. hell, the entire "Number" type is stupid.
Yes! You can actually think of the identity value whenever dealing with an operation on the empty set. For example, the sum of an empty list is the additive identity, 0. The product of an empty list is the multiplicative identity, 1. Likewise, the min of an empty list is the "minimum identity," or the value x such that `min(x, y) = y` for any y. Clearly, x would be positive infinity.
Surprised that github wasn't mentioned.
Gotcha. Nginx and Unicorn is a pretty sensible combo. You can easily run all of it on one box, with the kind of loads you're talking about. Unicorn is definitely easy to configure, and Nginx really isn't that much harder.
I stand corrected! Or, I guess, my comment was literally true. Thanks for this!
For those wondering what `&gt;-&gt;` was about it is really just `&gt;` followed by `-&gt;`. `&gt;` is greater than operator which the library overloads and `-&gt;` is the stabby lambda. `-&gt;(x) {...}` is equivalent to `lambda {|x| ... }`.
It was mentioned in Part 1 of this list: https://thecoderfactory.com/posts/top-15-sites-built-with-ruby-on-rails
1. Adversary gains access to your internal network, or to a network trusted by your network, via social engineering, hacking, wireless network cracking or other techniques. 2. Adversary determines that your application exists, by running something like nmap or wireshark. 3. Adversary notices that other ip addresses are able to connect to that service, even though he isn't. 4. Adversary makes use of software that permits him to to craft TCP/IP requests that appear to originate from a trusted machine. Alternately, of course, if he's in your network he can most likely gain access to one of the trusted hosts and connect directly to your system. IP address white-listing is merely one layer of a proper defence-in-depth strategy.
If you understand Coffeescript you understand Javascript.
It is a recursion. In fact, if you try looking for "anonymous recursion", you will arrive to Y combinator. Every party, I know.
Maybe look at [Opal](http://opalrb.org/). I think you should be able to use it without knowing javascript at all. The important thing you'd have to learn is how to interact with the DOM.
This was helpful thanks. I think I was misunderstanding the true difference between static and dynamic scoping. 
How does that work in TCP/IP ? Isn't it really hard to spoof a request when you are not able to receive data back? This seems to support my theory: http://serverfault.com/questions/381393/can-the-ip-address-for-an-http-request-be-spoofed
I sincerely doubt that ruby has access to the packet-level IP addresses in a Rack-based webserver. It is much more likely to be using HTTP-header-level addresses. Unless your webserver is configured to only accept TCP connections from whitelisted address ranges, or your webserver is running iptables or a similar operating-system level firewall that enforces this, an attacker can open a TCP connection to your webserver and forge the origin IP address in the HTTP headers to gain access past your application level security. I am not a blackhat, merely a developer with a passing interest in crypto and security. IP address filtering should always be done at least once in a firewall that supports proper packet inspection abilities to mitigate against this issue above. If someone is on your network, though, you have bigger problems than simple IP address filtering. Editted to add: The canonical example I can think of of IP spoofing in the wild is online polls that allow you one vote per IP address. They're almost always application-level filterered, and the simple application of an anonymous proxy or script can allow you to game them.
This is in the sidebar content for this sub reddit... **Learning Ruby?** * [Try Ruby](http://tryruby.org/) in your browser * Syntax, structure, and some common functions and libraries try [RubyKoans](http://rubykoans.com/) * [Hackety Hack](http://hackety.com/) a shoes app for playing around with ruby
Ahhh, OK. I missed that. Thanks.
Without recursion but then you use recursion, think you need to go look up what recursion means, watch for stack overflow on that. There is a way of doing this without recursion in C but its sneaky and horrible.
[Regexp.union](http://www.ruby-doc.org/core-1.9.3/Regexp.html#method-c-union)
There is [lazyman](https://github.com/easonhan007/lazyman), which will generate a structure for you. It uses watir-webdriver, page-object, and rspec. I'd like to note two things: 1. I've never used this. So, I'm not *suggesting* it, just letting you know that it's out there. 2. It is by no means a "standard" way of structuring an automation project. Just one way. A lot of the way you should structure your suite is dependent on the framework you're going to use. A Cucumber suite and an RSpec suite will probably look very different. FWIW, I use RSpec for acceptance testing and this is the basic structure of my suite: test-suite/ |- Gemfile |- Rakefile |- README |- .gitignore |- spec/ |- spec_helper.rb |- support/ |- pages/ |- page_class_1.rb |- page_class_2.rb |- etc. |- helpers/ |- api_calls.rb |- db_queries.rb |- email.rb |- etc. |- tests/ |- page_class_1_spec.rb |- page_class_2_spec.rb |- etc. In RSpec, everything under `spec/support/` is automatically injected into the load path. It's very easy to require classes/modules from there when needed, and this is why I keep these things in `spec/support/` and not in a top-level `lib/` directory. This also serves to free up the top level `lib/` directory for something else you might want -- like a custom reporting app or framework-independent scripts. **Edit**: It's worth noting that I assumed you meant an acceptance test suite maintained in a separate repository than the application you're testing. If that's not the case, then disregard my bit about a top-level `lib/` directory. 
Thanks for bringing this to my attention! I didn't know about this, and using this gem/setting RUBYGEMS_DEPS on newer versions is a much better solution than demanding that people magically remember to run `bin/mygem`. Unfortunately, I'm seeing [errors from rbenv](https://github.com/rubygems/rubygems/issues/991) (fixed in newer versions), errors upgrading RubyGems with the env variable already set, errors with older versions of Bundler, and [errors from this method on things like gems from git repositories](https://github.com/rubygems/rubygems/issues/1054), so I don't think I can recommend it to junior devs yet. Hopefully soon it will be ready for primetime and I can start recommending it without reservation.
You're not wrong. I've added a note to the article to warn people of this problem and let them choose for themselves. I'm sticking by my recommendation, though. Expecting people to always remember to add a `bin` to everything is as bit wishful IMO, and offering this as a solution is telling junior devs "everything will be fine if you remember the magic incantation, but the second you forget it you're going to encounter an arcane error that will do nothing to direct you to what you did wrong." So no thanks. Maybe I'd be more concerned about this if I was aware of any cases in recent years in which this vulnerability caused widespread damange. For the average user, I just don't see this as being any more of a concern than the million other insecurities in your average desktop computing environment. So I'm not going to sacrifice a system that works in non-confusing ways for it. `RUBYGEMS_GEMDEPS` sounds like the actual good solution. Unfortunately, it's a little raw at the moment. As soon as that is ready, I'll happily change my recommendations. Security is great, provided it doesn't come at the cost of chasing away everyone who's not already a certified neckbeard.
You are correct - http://imgur.com/blog/2013/06/04/tech-tuesday-our-technology-stack/
My favorite part of Cucumber is how closely it ties in to business-facing use-cases. It's self-documenting, easy to read for non-technical people, and highly maintainable. Our team will often sit down with product owners, or sometimes customers, and walk through the primary use-cases in plain english. That's literally the test driver, is plain-english "steps" which you then hook up via Cucumber "step definitions." I've heard of robot but not had the chance to use it yet, thanks for the pointer, I'll check it out. 
This is awesome.
Njerpez's answer is really awesome, but I thought I'd throw mine in there for color. I've written custom Cucumber frameworks for a few years now, and they kind of look like cousins of an MVC framework. I call it the Page/Model/Resource Framework. The cucumber step definitions act like the "Controller" from MCV in glueing the pages together with the model and resources. It's make up of 3 main pieces: 1. Pages - each html page gets its own class. These classes wrap around webdriver handlers to get/set/use elements on their respective page 2. Model - Database drivers/handlers to get data from your data store(s). Typically I use these to compare page data to what's actually in the db. 3. Resource - this wraps around API's internal to your apps, and also external API's that your webapp uses, like elasticsearch, email handlers, social media, salesforce, whatever. Typically, the Cucumber will read something like this: When I log in to the webApp as a some role &lt;-- Page::Login.login(data) And I fill out the contact info form &lt;-- Page::ContactInfo.fill_out(data) When I click submit &lt;-- Page::ContactInfo.submit Then I should see that data in the db &lt;-- Model::User.contact_info(id) And I should see a new lead in salesforce &lt;-- Resource::Salesforce.leads personally, I like having a top-level lib/ directory, and including lib files explicitly in the features/support/env.rb directory. I also like having rake suites for large projects, and using Rakefile namespaces to create nested features like this: rake page:user:contact_info automation/ |- Gemfile |- Rakefile |- lib/ |- page/ |- page.rb |- login.rb |- contact_info.rb |- user_dashboard.rb ... |- model/ |- model.rb |- users.rb |- otherdomain.rb ... |- resource/ |- internal_api.rb |- external_api.rb |- salesforce.rb |- features/ |- login/ |- login.feature |- contact_info.feature |- step_definitions/ |- login_steps.rb |-support/ |- env.rb |- suites/ |- ui.rake |- api.rake ... 
[This](http://learnxinyminutes.com/docs/ruby/) should do quite nicely.
I've had 35 years experience in over two dozen languages, including nearly 8 years of C++ and I will warn you: you can learn to write valid Ruby programs in a weekend but, with how you've been trained to think about object-oriented development by C++ and other statically-typed languages (I'm assuming you also have Java, for instance), it's going to take *at least* a year before the light bulb comes on and you start writing *fluent* Ruby. This actually shouldn't surprise any C++ old-timers; it took us ~20 years (until the early 2000s) before good C++ really became a thing.
This is sweet. . . I'm learning Ruby myself, coming primarily from Java, Python and other languages. Thanks.
If you're willing to spend a little more time, Eloquent Ruby is a relatively short book and still the best Ruby book I've read.
I've only just peaked at this, and it's great. 
I highly recommend playing around with the C API it is a tough learning curve at first but really worth it. Helps you understand the language better and you can do pretty amazing and powerful things with it.
Is it necessary to be cautious not to register the same class twice?
can't upvote this enough. this book jumps to the heart of why Ruby is beautiful. 
take a look at eloquent really by also, as recommended below. 
Thank you for the reply, this is very helpful as well! I really like how it's comparable to the MVC pattern. As someone who uses cucumber, and after reading Njerpez's response, how do you feel about Cucumbers reporting capabilities? Njerpez mentioned they use a separate Sinatra app for things such as collecting screenshots, cookies, etc.
Pretty good - learned some things.
That was pretty good. The last example was pretty clearly just to get laughs because it's not actually surprising that ("wat" - 1) is NaN.
Does Laravel or any other framework have something similar. I read the sample chapter and do not understand it. I don't know if he is implementing something which is in practice elsewhere but I think he is trying to do something brand new.
I don't know of any further reading you could do for the reporting app. I basically just read the Sinatra [documentation](http://www.sinatrarb.com/documentation.html), which is very helpful in getting a small application up and running. I use an RSpec after hook to POST the information I want to the app, which then renders it on the frontend, of course. The hook looks something like this: RSpec.configure do |config| config.after :each do if ENV['REPORT'] &amp;&amp; example.exception do report = { 'name' =&gt; example.full_description, 'exception' =&gt; example.exception, 'screenshot' =&gt; @browser.screenshot.base64 }.to_json RestClient.post "http://cutom/reporting/app/api", report: report end end end This lets us decide when we want to report a failure to the app via the REPORT environment variable. Helpful so we don't report failures that are caused by a change we made to the suite. As for your second question, I'm afraid I don't understand. What do you mean by wrappers/scaffolding?
That is a very well organized Cucumber suite. +1 for that. I really like the `suites/` directory idea too. I'm going to bug you with a few questions, because this kind of thing is super interesting to me. Feel free to ignore me. How do you like working with Cucumber? How large is your automation/testing team, and how often do you deploy to production?
Ah thank you, this clears that up a bit for me. We have some java automation and they want to migrate to Ruby. The person who created the original automation had setup a large amount of custom code around selenium to fit our needs, basically making it more script like and abstracting away from selenium itself.
It might be necessary in other cases, but this one would still work as expected :)
There's a short answer and a long answer. I'll try to provide both. **Short Answer** In the specific example you gave, the code is defining a class method (as opposed to an instance method). It may be helpful to realize that class Foo class &lt;&lt; self def bar :bar end end end is functionally equivalent to class Foo def self.bar :bar end end In both cases, you can subsequently call `Foo.bar` and it will return `:bar`. **Long Answer** Technically, when you have an object `x` and you open `class &lt;&lt; x`, you are opening what ruby calls the *eigenclass* or singleton class. Allow me to go full meta for a moment, because this is a gnarly concept. Say you have an object `obj` that you created by calling `Object.new`. This object is an instance of `Object`, yes, but more specifically it is an instance of a *copy* of the `Object` class. (Remember, classes are objects too, and can be cloned.) Because `obj` is an instance of a *copy* of `Object`, you can modify the class of `obj` at runtime *without affecting other instances of `Object`.* Every object has its own copy of its class, and that copy is called the *eigenclass* of the object. Back to a more concrete example. Let's say you have two strings, `x = 'foo'` and `y = 'bar'`. Now watch: class &lt;&lt; x def do_something_ridiculous x.reverse end end x.class # ----&gt; String x.do_something_ridiculous # ----&gt; 'oof' y.class # ----&gt; String y.do_something_ridiculous # ----&gt; NoMethodError: undefined method `do_something_ridiculous' for "bar":String We have added the method `do_something_ridiculous` to the eigenclass of `x`, so that even though `x` and `y` are both `String`s, `x` has the instance method `do_something_ridiculous` and `y` does not. **Okay, But What About `self`?** In the original example we didn't have an object `x` that we opened the eigenclass of; we opened the eigenclass of `self` instead. How is this different? Well, inside a class definition, `self` refers to the class you are currently defining. So you actually *are* opening the eigenclass of an object, it's just that in this case the object you're opening is `Foo`, which is an instance of `Class`. So when you call `Foo.bar`, you are calling the method `bar` on the `Class` instance called `Foo`. It's not actually any different than what's going on above in the long answer; it's just that we don't usually think of `Foo` as being an *instance* of `Class`. **TL;DR.** Eigenclasses are one of the components of Ruby's powerful metaprogramming features, allowing you to modify the behavior of an object at runtime without affecting other instances of the same class. But if all you want to do is define class methods, you can just use `def self.some_method` instead.
Thank you So much for this. I have a follow up question: What is a use case for this? I understand that i can use this approach when i want to add methods to an object w/o impacting other objects stemming from the same class BUT... why or when would i want to do that?
That sounds like fun. I like your tumblr. Definitely going to take a closer look on that later. I wounder, perhaps I could make some sort of Reddit feed with RoR...
Nice name, pi
I get a lot of kicks from cloning popular sites. So far I've made 2 kickstarter clones, one using the braintree api and the other using wepay. My next project will be either a craigslist scraper or a test maker for teachers with a question &amp; answer randomizer and answer key generator. 
Here's a (slightly anonymized) example of how I used this on my current project recently. I had an ActiveRecord model called `Vehicle` and, for reasons I won't get into, I needed to be able to get a cloned copy of a `Vehicle` that lacked the ability to save changes back to the database. A "safe" copy of the object, so to speak, that could be changed, but could never save those changes. So here's what I did: class Vehicle &lt; ActiveRecord::Base # ... typical activerecord stuff here ... def safe_copy v = self.clone class &lt;&lt; v def save raise "You can't save this object!" end def save! save end end v end # ... more methods here ... end So what's going on here is that I start by cloning the `Vehicle` I have, then I open that clone's eigenclass and I override the `save` and `save!` methods that `ActiveRecord` provides. So, if `v = Vehicle.find(n).safe_copy`, then `v` will look to the rest of the app like a nice, normal `Vehicle` right up until some code tries to call `save` on it, and then it will raise an error instead of touching the database. As with most of Ruby's metaprogramming features, the sky isn't even the limit when it comes to finding creative ways to apply this!
Interesting. How long since you started RoR? Also, do you have them on GitHub? I'd like a peek...
:] "Wow what a name ..with ..16char-"
I think you're confusing a few things here. To run a Rails application you need to have Ruby installed. Therefore it's called Ruby on Rails. (It's fine if you say Rails though) Ruby is a programming language, which you can compare with Python. It depends on your system, but most of the times there's already a version installed on your system. If you want to switch from Ruby version you can try [RVM](https://rvm.io/). Rails is a framework written in Ruby, which you can compare with Django that is a framework written in Python. When you started with your Rails application, you've probably ran something like `$ rails new my_application`. This created a whole bunch of files. One of those files is the `Gemfile`. The `Gemfile` is used to specify the dependencies of your application. If you open the `Gemfile` you will see that it includes `gem 'rails'`. This means that Rails is a dependency of your application. To install the dependencies of your application you can use [Bundler](http://bundler.io/). It's probably already installed on your machine. To use Bundler to install the dependencies of a project you can run `$ bundle install`. This installs the gems specified in the `Gemfile` on your system. Once you've installed the dependencies of your project, you should be able to run your Rails application. *Note:* The specify versions of the gems are listed in the `Gemfile.lock`
But couldn't you just exclude v and use: class &lt;&lt; self, since the class would really be an instance of a 'Vehicle' eigenclass itself? Or is there a benefit to using a clone's eigenclass?
I'd google "object oriented programming with ruby". OOP is the term for what you're talking about. For specifics with rails, there are general rails tutorials out there. Railtutorial.org covers all of it, but it's a bit dry and you might not learn enough to make things. Incidentally I'm typing this from [AppAcademy](http://www.appacademy.io/#p-home) which is one of those new bootcamps for full-stack web dev in RoR/Backbone. It's fantastic so far, and I recommend it if you're really serious about learning it enough to do a job with it (well). I'm learning a lot more than I would have on my own. 
```` self.clone.readonly! # also does the job ````
[Reddit API](http://www.reddit.com/dev/api) is a good place to start then, but rails might be overkills (depending on what you need to do).
I'm not sure precisely what you're asking. Can you write out the code you're imagining? If I had written `class &lt;&lt; self` then I would be modifying the *current* instance, whereas with the example as written I'm modifying the *cloned* instance before returning it. For example, if I have `a = Vehicle.find(n)` and `b = a.safe_copy` then I want `b` to have its eigenclass modified, but I want `a` to remain unaltered. If I replaced `class &lt;&lt; v` with `class &lt;&lt; self` then I would be modifying `a` and not `b` instead.
Good tip, thanks!
Good lord that sounds amazing. Our code is so slow and fragile. I came aboard and basically never stopped playing maintenance man. I'm still going back and forth deciding between Rspec and Cucumber. I'd really like to get it right the first time.
[The Well-Grounded Rubyist](http://www.manning.com/black3/) was recommended to me and is worth every penny. It is a thorough treatment of Ruby and you will definitely learn everything you're wondering about. The other books recommended in this thread are also good.
I use this often when I want to define class methods in a clean way. You can define all class methods on a class using: class Test def self.hello_world puts "Hello World" end #etc end In my opinion, however, it's much more readable to dedicate an entire block of the class to class methods: class Test class &lt;&lt; self def hello_world puts "Hello World" end # any other methods defined here are now class methods end end
Another common use of Ruby's eigenclass is _class instance variables_. Here's a good [rundown](http://stackoverflow.com/a/15773671). Class variables (`@@var`) are generally only used when truly needed.
Are you now trying to work on a Rails project as a developer? It sounds like you may want to work through a [Rails tutorial](https://www.railstutorial.org/).
I've been rubying for 7 years and pride myself on understanding almost everything I do and never just cargo cult copy-pasting, and understanding some of the darker corners of ruby and it's stdlib (not to mention Rails)... And this is still the one thing that never fails to confuse me, and which I still don't really understand. I just cargo cult copy and paste it when I need it, knowing it's got something to do with the (mis-named) singleton classes and class-level methods that work the way you expect. Every once in a while I get the drive to spend some time figuring it out, and eventually feel I understand just what's going on, and then forget it again not having needed to deal with it for a few months. (PS: What's an ELI5?)
Rails is a piece of software. It has versions. Rails3 and Rails4 are not strictly compatible. The most basic of apps, or app or gem code carefully written to be compatible with both, can sometimes be compatible with both. But in general, things can work on one that do not work on the other. While there are certainly still some people maintaining Rails3 applications that they have not had time to upgrade to Rails4, in general few if any people are creating new Rails3 applications anymore, and there are few maintained open source gems for use with Rails that are still maintained for Rails3. For a new project, you should start it in Rails4, not Rails3. I am not really sure what you mean by "I downloaded Rails from my local repository." What local repository? You downloaded Rails? I am not sure what you did, but I don't think you did what you are describing, because it doesn't entirely make sense. It's possible the Rails app you wrote on your Windows machine at home, you accidentally wrote using Rails3. In which case you could start over in Rails4, or upgrade it to Rails4 (which isn't that hard). Not quite sure what you've got going on, provide more information about what you mean by 'downloaded Rails from my local repository', and exactly what you are doing to determine the "version you had" on your Windows vs Linux boxes. It is quite possible to have both Rails3 and 4 installed on the same box, and not really a problem, and quite easy to install newer versions of Rails than you currently have. Well, nothing with ruby is 'quite easy' on Windows, but as a general rule. But a given app written with one version of Rails can't generally be run with a different major Rails version, and generally _won't_ run with a different major Rails version, as it generally specifies the version(s) of Rails it will work with in it's Gemfile, and that Gemfile will make it insist on having access to one of the versions of Rails specified. 
Hey Weierstrass! Fellow high-schooler here. Think about solving problems. Projects that solve problems are cooler because you get to validate ideas and have other people genuinely interested in using the stuff you make. If you're decent at HTML/CSS then here's a good idea: **Simple-to-use announcement board.** My school's missing one. Announcements are sent on paper. It's hard to read. You can do user testing in your school. As far as I'm aware, the following should work: 1. Announcements can be submitted using pre-made accounts for teachers/students or can be emailed to a special address 2. Announcements must be approved by 'admins' 3. Announcements show up as a list only on the day(s) they're supposed to. Bonus points if you can make it school-agnostic (so that schools can sign up). Good luck with the idea hunt!
This is one book I've actually read already. I started reading it a second time as my knowledge of Ruby moved up a level and thought these principles would make sense again. The main issue however was exactly what you pointed out, not the best intro... fantastic book however. I get what she's saying throughout the book and I can follow it. Nothing there is her fault though, it's just that I don't have the foundations of OOP to know where to begin at all. (Looked at finding a mentor, but most services are well out of my financial power).
Thanks for the advice, will check into AppAcademy for sure. I'm currently in a Jr role where I work, and a lot of the time just 10 minutes with one of the Sr devs can push my basic working knowledge of something pretty far. So I value the 1 to 1 contact for sure.
I haven't read this book, but will look into this one as well to see what it actually covers. Thanks! 
/r/explainlikeimfive
Who will write your Gherkins? And who will be reading them? If you have to write your own Gherkins, you're not really using Cucumber to its full potential. A BA or product owner should be writing the feature spec IMO. Otherwise you might as well while write your tests with descriptive code and save yourself the trouble of an abstracted layer. My exception to this is if someone is going to be actively using your Gherkins as documentation. Then it might be useful to write the abstraction for them. But if the test team is the only team that's going to use the documentation, they probably know the app well enough to decipher well written tests easily. I'm of the opinion that you should also use Cucumber if your test cases are overly complicated and hard to follow in plain English. Like government regulated healthcare applications. But it doesn't sound like that applies to your app. 
Had I known something like this existed three years back, I would've probably gone this route. It's definitely appealing. Now I'm 2/3 years in, have a family and all that jazz it's not really doable.
I see you read POODR, so maybe [Eloquent Ruby](http://eloquentruby.com/about/) or [Design Patterns in Ruby](http://designpatternsinruby.com/) would give you a broader understanding. Both great books.
Yup, it's openSUSE and it indeed uses an ancient version. So I can do 'gem install rails' and get the latest version, but how do I access 'rails' from the terminal? Can I make a link in /usr/bin to a Ruby file?
Unless SuSE ships with a totally broken Ruby/rubygems install (which, sadly, is par for the course in many distributions), `gem install rails` should by itself make the `rails` command accessible from any user shell with a standard `PATH`. If you're not already using rbenv, rvm, or simply a compiled-from-scratch version of Ruby, strongly consider starting there.
The is THE best book to start learning ruby with. I owe my career to that book.
Not something I'd use a ton but it certainly is pretty cool how this works. Great educational tool
In my opinion this monkey-patching syntax is terrible and confusing. This is much clearer: Class method: Class String def self.foo "hi" end end Instance method: Class String def bar self.reverse end end Singleton method: a = "hello" def a.quux self.reverse end 
I have stopped using AMS because of some issues like https://github.com/rails-api/active_model_serializers/pull/343 
Here's a nice explanation: http://madebydna.com/all/code/2011/06/24/eigenclasses-demystified.html That said, if you're starting to notice the metaprogramming concepts in ruby I highly advise you to checkout [Metaprogramming Ruby](http://www.amazon.com/gp/product/1934356476/ref=as_li_tf_tl?ie=UTF8&amp;tag=redditrrubyco-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1934356476) and here is a nice video on [Ruby Internals](https://www.youtube.com/watch?v=NlPxvRSUVQI) it's a bit old, but provides a great view from the c &amp; ruby aspects and is generally entertaining and intriguing. 
Check this tutorial I have posted. A simple ToDo application with rails. http://arubystory.blogspot.com/2013/12/tutorial-creating-simple-todo.html
What I like in AMS is the inheritance for Serializers, you can have a UserSerializer with the default attributes and create subclasses without copy pasting everywhere.
Fantastic!
I've seen this a lot too. I think both are fine and it's mostly a matter of personal programming style. However, I have sometimes encountered an issue if the `class &lt;&lt; self` block gets very long, with many class methods defined. In that situation it can be hard for another developer to know whether the code he's looking at is a class method or an instance method, because the `class &lt;&lt; self` that would tell him is much further up the file and off the screen. If you define class methods with `self` instead, then you always know just from looking at the method definition whether you're dealing with a class method or instance method. But in the end it's mostly a personal preference. I wouldn't fail a junior dev if he brought either one of these to a code review.
Most people get as far as thinking "well, that's a whole bunch of hex" and give up.
This is a great post, and I think it is a good example of dependency inversion, but I think the solution also shows that dependency inversion alone is insufficient for solving the problem of tight coupling. Adapter no longer knows about Adapter::Child, but now every Child knows specifically about Adapter and registration with Adapter. Moreover, the mere presence of those classes in the system means they will be registered with Adapter, whether or not this makes sense in a given context. For example, if there is a reason to definitely not support "mongo" (such as MongoDB not being installed), you would not want those classes registering and having to duplicate the notion of "uri is not supported". It is questionable that the classes even need to be in this specific "Adapter" namespace; maybe they can be used more generally. An approach with looser coupling would be a higher-level (perhaps application-level) entity that performs these registrations, an entity that knows the business rules and context, a "controller". In general, self-registration is a code smell of tight coupling.
Greetings fellow high schooler! My senior project involves making a scalable computer cluster, and for this I'm building my own system management framework in Ruby and C. I routinely build random scripts to do my boring, repetitive homework for me (define this list of 150 terms because fuck you --teacher). If you are into IRC, I used Cinch to make Cleverbot for IRC. Also, I'm always up for a random project so if you need/want help just PM me.
I think that for basic object serialization, sure, AM::S makes perfect sense. JBuilder's strength is creating complex JSON objects. If you need to control what your JSON looks like, JBuilder is a dream. **EDIT** See my gist of these benchmarks when using the OJ gem: [https://gist.github.com/subvertallchris/caaa99727990cfd3e4b3](https://gist.github.com/subvertallchris/caaa99727990cfd3e4b3). TL;DR: It makes things faster.
So, I've solved my own question here. The problem is that the Linux distro I use, openSUSE uses an odd Gem strategy called "[one gem per rpm](https://en.opensuse.org/openSUSE:Ruby_Gem_Strategies)" and the repositories only contained rails 3.2.17. Luckily, openSUSE has a PPA-like system that allows you to search for custom repositories, so I added the repository for the [latest Ruby](http://software.opensuse.org/package/rubygem-rails) versions, including Rails4. Problem solved.
If, for whatever reason, we see the need to decouple it further we may introduce a high-level adapter-setup system within the library. For now this solution is just simple and works well in our context. Also notice that an adapter is only registered when it was explicitly required (as in `require 'rom/adapter/something'`).
Well, that's just the thing. There could and couldn't be someone to write/read them. I'm the only qa dev and we are trying to get our manual testers to learn code. Our most complicated test right now is probably a carts/purchase or downloading test. I don't think that would warrant the use of cucumber alone. I'm also already a bit familiar with Rspec. 
&gt; It is questionable that the classes even need to be in this specific "Adapter" namespace I see how the example might have lead you to believe that, since the Memory adapter is in the Adapter namespace. But you could register any object that responds to the expected protocol.
Caching has been a sticking point and was flat out removed from the `0.9.0` release. From my understanding they are working on making the architecture more flexible (not quite a re-write), and are [working on new caching support](https://groups.google.com/forum/#!topic/rails-api-core/kxP0WxWzFEg). I like AMS, but its definitely not a one-size-fits-all solution
Speed issues have caused me to switch to AMS over jbuilder. AMS is simply much, much faster and when dealing with 100's of records, that's 10x speed change is a big deal.
I thought class &lt;&lt; self created an instance of Vehicle's eigenclass? I also thought that given this scenario: class a &lt;&lt; self def idk somefunction end end class b &lt;&lt; self return 0 end ...would be such that b.idk and Vehicle.idk gave errors, since a and b each are instances of separate eigenclasses of Vehicle, meaning altering one wouldn't affect the other or the class from which their eigenclasses are defined? And even if I'm wrong about that, class &lt;&lt; self.copy would save you the trouble of defining v within safe_copy maybe?
Thank you for the kind offer! That cluster seems like a nice project. What are you going to use it for? Also, how did you manage to define the 150 terms with Ruby? Do you have some more examples of how you solve you homework with Ruby? I'd like to know.
&gt; I thought `class &lt;&lt; self` created an instance of `Vehicle`'s eigenclass? It doesn't *create* anything. `self` already exists and is an instance of something. What exactly `self` is depends on context. In a class definition `self` is the class being defined. Inside an instance method, `self` is the instance. Nothing new is created when you open up `class &lt;&lt; self`. Also, it's a little weird to say "an instance of [something]'s eigenclass" because, for any object `x`, `x` is the *only* instance of `x`'s eigenclass. So the only object which could be "an instance of `Vehicle`'s eigenclass" would be the `Vehicle` class object itself. &gt; `class a &lt;&lt; self; def idk; somefunction; end; end` This would be a syntax error. What is `a` doing in there? If you wrote `class &lt;&lt; self; def idk; somefunction; end; end` you would be adding the `idk` method to whatever `self` is. But `class a &lt;&lt; self` isn't valid ruby. You might be mixing up the class reopening operator `&lt;&lt;` with the class inheritance operator `&lt;`. If, inside a class definition, you wrote `class a &lt; self; def idk; somefunction; end; end` then you would be creating a new class called `a` which inherits from the "outer" class that you were already defining, and any instance of `a` would have the `idk` method on it. But, as written, that's not valid ruby. &gt; `class b &lt;&lt; self; return 0; end` This would also give a syntax error for the same reason (`class b &lt;&lt; self` is meaningless). But, even if what you meant was `class &lt;&lt; self; return 0; end`, that's still also invalid ruby. What is that `return` trying to return from? There's no method or proc there. You're just trying to return from the middle of a class definition, which is nonsensical. &gt; ...since a and b each are instances of separate eigenclasses of Vehicle, meaning altering one wouldn't affect the other or the class... You have the right idea here, but your terminology is slightly off. It's not quite accurate to say that they are instances of "separate eigenclasses of `Vehicle`." Rather, we would say that there is "the eigenclass of `a`" and "the eigenclass of `b`". Both eigenclasses are *copies* of the class called `Vehicle`, but to say that an eigenclass is "of" an object means it is the eigenclass for just that object. &gt; `class &lt;&lt; self.copy` would save you the trouble...? That's an interesting idea. I've never tried putting a full expression on the right-hand side of that operator. I would expect that `class &lt;&lt; self.clone` would, indeed, open up the eigenclass of the object returned from `clone`. But I haven't tried doing it that way. The main problem with that approach in my example is that I need to be able to return `v` once I'm done modifying it. If I wrote it as `class &lt;&lt; self.clone` then I would open up that object's eigenclass, modify it, and close it again... but then I would have no reference to the modified object, and I wouldn't be able to return it from the method. Hope this helps!
If you want to tell your clients, "hey, here's my database," AMS is a good choice. If you want to build a system where the logical schema of your domain model differs from your user interface, jbuilder is better -- this is really a data driven UI vs. task driven UI debate. Rails prefers data driven UIs, but many complex applications are better served by a task driven UI.
http://semver.org/ I think the formal name for this style of versioning is literally "Symantic Versionig"
&gt; couldn't you use `class &lt;&lt; self.copy {etc.} return self`? From what I understand the first self would be referencing `Vehicle` and the second being returned from the class would be referencing self.copy? Sort of. You are correct that the meaning of `self` changes when you are inside that class definition block. But "returned from the class" is nonsense. Classes don't return things; methods return things. The keyword `return` would be invalid unless it was inside a method.* So if you wrote class &lt;&lt; v def foo return self end end you could then call `v.foo` and it would return `self` (which is `v`), because you're returning from a method. But if you wrote class &lt;&lt; v return self end then ruby would simply refuse to compile that, because `return` has no valid meaning in that context. I think that part of your confusion might be coming from the fact that, to open up an eigenclass, you have to already have an object instance that you're trying to open up. Eigenclasses are NOT like regular classes, where you define them first and then instantiate instances of them later; instead, they are copied from the regular class "under the hood" at the time you instantiate that object. So if you just write class Foo def bar :baz end end you don't have any instances of `Foo`, you just have the class `Foo`. But as soon as you call `f = Foo.new`, then `f` has its eigenclass, which is a copy of `Foo`. So, now that you have `f` you could open up the eigenclass of `f` with `class &lt;&lt; f` and do whatever you want to it. But if you haven't created the instance `f` then there's nothing for you to open up. ------------- \* There are a couple other places where `return` would be valid, too, but they are similar enough to methods to gloss over them for the purpose of this discussion.
Multiple sites is an interesting challenge. Could be a lot of fun. Make sure you're using page objects! Are you going to test all sites out of one test repository? Or will each site get its own test repository? If it's the former, I'd create a `SharedHelpers` module that I'd mixin where I needed it. And I'd do something similar for my page objects. It would look like this: test-suite/ |- spec/ |- support/ |- pages/ |- shared/ |- shared_page_1.rb |- shared_page_2.rb |- etc. |- site-1/ |- site_1_page_1.rb |- site_1_page_2.rb |- etc. |- site-2/ |- site_2_page_1.rb |- site_2_page_2.rb |- etc. |- helpers/ |- shared_helpers.rb |- site_1_helpers.rb |- site_2_helpers.rb |- etc. If one file is too little for the helpers, you could namespace it a bit: helpers/ |- shared_helpers.rb |- site_1_helpers.rb |- site_2_helpers.rb |- site-1/ |- api_calls.rb |- db_queries.rb |- etc. |- site-2/ |- api_calls.rb |- db_queries.rb |- etc. The `site_1_helpers.rb` and `site_2_helpers.rb` files should require and include any helper modules under their respective sub-directories (as well as the `shared_helpers.rb` module). You'd probably want to conditionally include the helpers into your suite. I'd use environment variables when calling the tests and include the conditionals in my spec_helper. # spec_helper.rb RSpec.configure do |config| config.include Site1Helpers if ENV['SUITE'] == 'site1' config.include Site2Helpers if ENV['SUITE'] == 'site2' end So you're only loading the site-1 helpers when you execute tests with `SUITE=site1 rspec spec`. This could possibly allow you to reuse a lot of helper code, since you could use `api_call("/path/to/api")` in a single test but could be calling `Site1Helpers::ApiCalls#api_call` or `Site2Helpers::ApiCalls#api_call` based on the environment. If you're going to use multiple test repositories to test your multiple sites, then I would create a private gem to share code between the repositories. The gem could include shared helpers and page object classes. That's not too difficult to set up. **TL;DR** Conditionally executing tests and including helper code with environment variables or a private gem. 
The one issue I've ran into with AMS is separating index and show route serializations. A frequent use case is to return a smaller set of attributes for the index route. It's not impossible to do it in AMS, but definitely harder. 
AMS 0.9.0 is a mess, we're using 0.8.0 with success but eagerly awaiting 1.0
I just ran a few benchmarks of my own using this project but using the `oj` gem. (Incidentally, I had to move all the code that created the Movie object and `movies` array into each task or I'd get an error about the Movie constant. Anyone know why? Just cloned the project and tried to run, wouldn't work.) TL;DR using 'oj' gives JBuilder a serious performance boost when just creating JSON. I can't help but wonder if there's something happening in `render_anywhere` that accounts for the performance difference when rendering. Either way, I think it makes it clear that there's more to this than just, "JBuilder is slower." You can find it at [https://gist.github.com/subvertallchris/caaa99727990cfd3e4b3](https://gist.github.com/subvertallchris/caaa99727990cfd3e4b3), removing it from this comment cause it made this post hideous. Give me a minute to adjust its formatting.
That makes a lot of sense, I think I understand the whole eigenclass thing now, but yeah, I meant it to mean instead of returning v to return self but you obviously know what you were doing writing that class method(?) safe_copy. Are you a software engineer?
is there any particular reason for the class &lt;&lt; foo syntax instead of, for example, Object.eigenclass?
I also updated it just now to show what happens when you also use the `oj_mimic_json` gem. It gives a big boost to AMS.
This "speed difference" based more on render_anywhere than JBuilder. See other comments in this thread regarding OJ for examples.
I see the insanity, but I don't see where sanity comes in. Where is the conclusion?
In conclusion, apply ActiveRecord uniqueness validations in your models carefully. Adding validates_uniqueness_of without conditions will make for a lot of unnecessary database calls. Run uniqueness validations on when circumstances dictate, either on creation or when the attribute changes. Does that work?
[NoBrainer](http://nobrainer.io/) (ORM for RethinkDB) does this optimization that out of the box. I'm surprised ActiveRecord doesn't do it after all these years. Not only NoBrainer uses the dirty information to speed up things, it's also safe by taking global locks during the read and the write to avoid races: http://nobrainer.io/docs/validations/#race_free_uniqueness_validations
Hey thanks for the response. I am a fan of some of your gems. apotomo solves a real need. I used it for some ajax functionality and not sure what else would have worked. I am interested in your book because I do agree with the issues of where to put business logic/functionality. Look forward to reading more about it.
No, because a lot of Rails developers adds or modifies validations AFTER the fields have been introduced into the application. The safest approach is to run every validation to make sure that the model is indeed valid. If you are sure that your models are 100% valid 100% of the time, then you can do what you are proposing, but that is not the case in most Rails apps :( There is gems out there for running `valid?` on all your model instances in your app. 
Right, still a problem with the implementation that AMS does not have.
I've created a bunch of random stuff with Ruby. A lot of my inspiration comes from doing things people don't usually think of Ruby for. My biggest project is [PSD.rb](https://github.com/LayerVault/psd.rb), which parses Photoshop files and let's you extract info and render parts of the document. There's also a reader/writer I made for the ASE (Adobe Swatch Exchange) format. There's also this somewhat silly project that lets you store arbitrary data on Flickr by encoding it as a PNG: https://github.com/meltingice/flickr-store An older project of mine (no guarantees on the code quality) that maps subdomains to git branches for testing purposes: https://github.com/layervault/divergence Otherwise, everything else I've done is for work and is private, but it includes a big Rails app and a preview generation pipeline.
Hey thanks a lot! I see what you mean about the application.js file and put it in there. I'm going to try and use some functions in the file now to see if it works, I'll let you know how that goes, I appreciate the help.
This is so needed. The documentation for the C API is so outdated and incomplete that most of my time was spent scanning and reading ruby.h to figure out how things work.
Hey thanks, that works, I appreciate it!
You may want to explore options for installing rvm, "Ruby Version Manager." It does exactly what it sounds like and is a godsend.
Would love to get some feedback on this, if possible. It's my first major FOSS program.
Any good starter programs you might recommend? I have git, rails, ruby, heroku, and sublime text 2 so it'd be cool to have something to use them for. That's really cool though.
No JavaScript MVC == Luddite? Bit harsh...
I'm not sure that benchmarking 1000 failures is the right way to think about it. In reality less than 10% failures seems very reasonable, so that would be a better way to benchmark it. Also you can't avoid the occasional exception even with the validates_uniqueness_of validation (I speak from experience here), so ideally you would catch that exception and provide an equally good user experience anyway (there is no reason you can't access errors for potential other errors and then add in the uniqueness error message too).
Rails _does_ know which attributes are dirty, it does track them. I've been surprised many times that it doesn't take account of this information in places it could; I guess it would be more challenging code to write in an already complex codebase. Now, I guess just because some_attribute isn't dirty, it doesn't mean it couldn't fail a uniqueness validation -- someone could have modified the db since you fetched the record, in a way that would make uniqueness fail. However, as noted, even Rails check for uniqueness doesn't guarantee against this, since someone could have modified in the brief interim anyway, so you've really got to deal with the condition anyway, so. 
&gt; (there is no reason you can't access errors for potential other errors and then add in the uniqueness error message too). Well, the problem OP talks about at the end is if other ActiveRecord validations fail, then you won't be saving to the db at all (AR won't let you), so won't be seeing the db-generated uniqueness failed exception. I started imagining doing a trial save to the database anyway, in a transaction that you are going to rollback, to see if the db complains about uniqueness and if so manually add that to the (possibly already existing) validation errors reported to the user. It seems conceptually possible, but will definitely get tricky, and involve a bit of struggle with AR. 
you need db uniqueness constraints as well
Ah, reporting is a great topic. The short answer is, cucumber reporting is intentionally thin, and has no concept of historical pass/fail trends. This is kind of by design, because much like unit testing, behavior-driven-development tends to favor instant feedback and failing fast. You write the tests first, then run those tests repeatedly during development. In this paradigm, they should bomb at the first failure, giving instant feedback. Devs make a change to fix that failure, run the tests again, fix the next one, etc until all scenarios pass. When they pass, the work is done, mark the story as complete and move on to the next one. This doesn't work for all orgs. I usually do something similar to what Njerpez described. The reality is, test code (especially UI tests running against modern, asynchronous web apps), can be flaky, state-dependent, and be riddled with timing issues, so it's good to know which tests are failing the most, which are flaky, etc. I usually write some lightweight web app that accepts cucumber test results as input, stores them in a database, and on the front-end, shows per-scenario test results over time. You can use a graphing plugin if you wanna get fancy :) Just put an after-hook on your main cucumber config that pushes results to that service.
Hey thanks for the reply, it's great to find other folks passionate about this stuff. Personally, I love Cucumber. It has absolutely revolutionized the way we develop. There are caveats though. The biggest win is that it glues the business-facing product team with the code-facing engineers, and encourages the self-documenting english-language use-cases to actually drive the test engine. At its best, the Product Owner will sit down with an engineer and a tester, and write the Gherkin steps collaboratively. Often the PO will discover things he/she had not considered, and it really helps focus the development work away from sandbox code-slinging to focused, lean dev tasks. Tests run every time there's a git push. This is absolutely key because developers need to know that every code push will be "inspected" by a third party. The goal is to change the dev's psychology from being idea-driven to being data-driven. I've repeatedly observed three phases of developer evolution with BDD: 1. Dismissal - "Uh, we have unit tests. How are these tests gonna help anything? it's just going to add noise, and they'll break all the time. 2. Fear - "Every time I push code, I break the tests, and everyone sees my bone-head bugs." This usually leads devs to push less often - this is normal, but needs to be worked through. 3. Adoption/Appreciation - "Wow, these tests really help me understand whether my code is working or not. These are actually making my life easier! I'm gonna write these tests too." If you don't create a super-stable test framework with very low false-failure rates, devs will bounce back and forth between steps 1 and 2, and you'll have to start answering some difficult questions from management. Now, there are three main challenges that I've repeatedly encountered, that can cause the dreaded false-failure loop which keeps you from reaching the nirvana of step 3: 1. Shared, static, centralized development environment - Symptoms: Concurrent test runs blow up, change is hard/slow, high entropy. smell: "Oh, if there's a schema change, that's gonna up this story." 2. Data Dependencies - Symptoms: same as above. smell: "Don't touch this data, this is used by automation." 3. Inexperienced testers/devs wreaking havoc in the test code. Smell: copy/paste all over, lots of type casting, queries hard-coded in the step-defs, methods in feature-specific step-def files, copious use of back-ticks around bash, etc. You ideally should be able to provision the app(s) you're testing locally, on-demand, using a specific (bootstrapped) data store (or mocked data) for each test run. You also need to CONSTANTLY audit people's test code, because even really good devs will write shockingly trashcan code when it's "just for tests". Enforce the framework. Encourage/educate people so they use consistent design patters. It's a labor of love, and you have to be able to stay sane in the face of chaos. How has Rspec worked for you? Have you experienced the same integration with the product-side of the business?
I don't think you need the closing `&lt;/script&gt;` tag there, and shouldn't have it. And please don't do the src literal "/assets", just don't. You could do this if you wanted to: &lt;script src="&lt;%= javascript_path('ng-infinite-scroll') %&gt;"&gt;&lt;/script&gt; But there's no reason to, just use `javascript_include_tag` like nilru says. Also, it's worth reviewing the Rails Asset Pipeline Guide, although it assumes a certain level of familiarity with certain topics, and might be confusing to beginners, check it out and see for yourself: http://guides.rubyonrails.org/asset_pipeline.html
I think there are lots of reasons, but as far as IDE's which you bring up... Personally, I've spent a lot of time fighting with and learning IDE's. I want a language/platform/environment where I don't need an IDE, so it's one less thing to learn and fight with, more than I want IDE support. In communities that come to embrace IDE support, community/language practices tend to evolve to _depend_ on IDE support. If you're running on a platform without a good IDE for that platform, you're out of luck. If you want to do things differently than the IDE wants you to do them, you've got to start figuring out how to modify your IDE. In communities that insist on trying to make things as easy as possible without IDE support, those gains lead to benefits regardless of what IDE you use, or if you use an IDE, do not lock you into any particular IDE, work in novel environments, are composable into other solutions, and set things along paths where you can make things easier or customized for your needs by using the language itself (the same thing you have to be good at anyway to work in the language), not by writing an IDE. I think there are lots of other legit reasons people prefer statically typed languages that have nothing to do with IDE's, even though I love ruby. But I don't find "because it gives you better IDE support" to be a particularly strong one. 
Dynamically typed languages are a lot faster to prototype in. If your interfaces are quickly changing and you want something that will still run though half built static typing and compiled languages run into issues. Of course, my experience has shown you'll end up writing tests to enforce your final interface, which will rot, and end up with weird problems in 6 months when things change and dependencies aren't as explicit. But a lot of places choose to push that risk forward rather than dealing with a slower prototype phase by biting the typed interfaces bullet from the get-go
Since this is in /r/ruby I'll respond with ruby-specific responses, though in some cases my response apply to all dynamically-typed languages. I'm also a Rails dev so my thoughts will skew towards those use cases. &gt; the less I am using an IDE and the more I am using a text editor I think you're just using the wrong IDE: https://www.jetbrains.com/ruby/. With Rubymine I can easily dive into method definitions or variable assignments. Auto complete is great; I never need to type a full method or variable. I can see the method parameters with one keystroke. &gt; Refactoring via grepping is a joke Rubymine has built-in refactoring tools that work quite well. Sometimes it gets indentation wrong or it can't automatically refactor a method (usually when lambdas/procs are involved), but for the most part it works fine. Renaming variables/methods across a whole project? Easy. Inlining a variable/method? Easy. Extracting a variable into a parameter? Easy. Creating a method from a highlighted segment of code? Easy. You run into more complications with a dynamic language than a static one, but in everyday programming those complications aren't common. &gt; dynamic code is probably always going to be at some sort of disadvantage speed-wise True, but this doesn't always matter. For your typically website, for example, the performance loss is irrelevant. Ruby (and other dynamic languages) probably are bad choices for embedded systems or graphics processing or anything super intensive, but there are plenty of great applications beyond that. &gt; Sometimes it isn't obvious where the code lives. No argument here, and this can be frustrating. But as you spend more time diving into Ruby internals/rubygems you tend to learn different design patterns and then it becomes easier, although I still run into gems where I'm bewildered as to what the code path is. &gt; Sometimes function/method names are not very specific That's just poorly-written code. I don't think this is unique to dynamic languages. &gt; I can think of lots of pros for statically typed languages and none for dynamically typed. Startups love Python/Ruby because they're super fast to code in. I can build a Rails site in much less time than a Java site, and it's much easier to iterate. The open source community is huge so I don't have to write nearly as much code on my own. It's just stupid fast to build and iterate with Ruby on Rails. I also don't have to declare an interface or some sort of abstract class if I want a method to return different types of objects; instead, it's as simple as if it walks like a duck and quacks like a duck then it's a duck.
Lol. Go get rubymine and tell me you don't get great IDE support for Ruby, including amazing Refactoring tools. In a duck typed language like Ruby I don't need to worry about whether I have extracted the proper Interface and implemented it in the relevant classes only to make a generic method that relies on a piece of behavior instead of relying on specific types. I also then never have to worry about forcing other library code to use my Interfaces just so I can use my generic function on more than just my code. I've found that when I use an IDE for Ruby programming, it acts as an enhancement to my productivity experience. When I use one in Java programming, it becomes a crutch because I rely on its autocompletion of type signatures etc. 
The TL;DR version: Because it's easy.
Check out the HTML that javascript_include_tag generates; it includes the closing script tag. As far as I know, the closing tag is required and self-closing tags won't work (i.e. &amp;lt;script src="..." /&amp;gt; is invalid) But like you said, the asset pipeline would be the best way to handle it, followed by javascript_include_tag 
Where are the tracks stored?
Dynamically-typed languages allow you to spend less time thinking about what your objects *are* and more time about what they can *do.* Example: Instead of worrying about what type my object is, at the moment I just need to worry about whether or not it has a to_yaml method. Obviously, statically-typed languages do have some tricks up their sleeves here that let you do a lot of this. Example: in C# I don't always have to worry about what type my object is; I can instead focus on what interfaces it implements. &gt; Conversely, the more dynamically typed the language is, the &gt; less I am using an IDE and the more I am using a text editor. &gt; Of course, my productivity plummets at that point. As somebody who moved to Ruby from C#, I totally feel you here. Ruby feels like the dark ages at first. The short answer is that being able to interactively play around with, explore, and inspect code &amp; objects in irb or pry is a huuuuuuuuuge productivity win. Instead of going through a whole code--&gt;build--&gt;run--&gt;inspect cycle to see if a regexp is working the way I think it should, I can try it out in irb. In my experience this more than cancels out a lot of the things I lost when I said goodbye to Visual Studio. Also, it takes a little setup, but there are plugins for editors like SublimeText (SublimeLinter) that leverage tools like Rubocop to continuously audit your code. It won't automatically fix things like Resharper+C# but it's still very nice. &gt; I have to refer to documentation more to determine which methods are available. In irb: MyClass.new.methods.sort Or, even better (sometimes): # Suppress all the standard methods that all Ruby objects have (MyClass.methods - Object.methods).sort &gt; Lastly, dynamic code is probably always going to be at some sort of disadvantage speed-wise because it is dynamic. Yes. But, a lot of times it doesn't matter. Think of a typical Rails web app. The app logic is Ruby (slow) but most of the "heavy lifting" is done by a web server (nginx) and a storage engine (postgres, mysql, redis, whatever) that are fastfastfast. &gt; Refactoring Another tradeoff. A big part of refactoring is *testing* and this is one place where dynamic languages shine. With something like Guard you can have your tests run continuously in the background while you code. While you're refactoring one part of your code, it's nice to know if/when you accidentally break something else somewhere. &gt; Sometimes, projects will have hundreds or thousands of code files. This is more of a cultural thing than a technical merit, but... I just started a job and was able to be productive almost immediately because it's a huuuuuuuuuge Ruby on Rails project that's several years old and the development team has stuck to MVC principles. On my first day on the job I knew where (mostly) everything was. You can accomplish that in static languages too. It's not like Ruby invented MVC, and MVC far from the only architecture pattern out there. *But* in my experience you are more likely to see solid architecture practices in Ruby projects, and more likely to see spaghetti code in C#/Java. Especially if you're working on in-house, enterprise-y stuff.
&gt; This doesn't work for all orgs. I usually do something similar to what Njerpez described. The reality is, test code (especially UI tests running against modern, asynchronous web apps), can be flaky, state-dependent, and be riddled with timing issues, so it's good to know which tests are failing the most, which are flaky, etc. If you're using Jquery or .Net you can inject javascript that hooks into the ajax/postback engine so that you can block in your tests until the calls are complete. That one change eliminated most of our timing issues.
Git provides hooks that allow you to perform actions when a commit happens. You can set a post commit hook to export your repo to the file system and kick off your tests.
The upload! method is actually defined within SSH-Kit, not Capistrano itself. Sounds like OP is trying to use SCP instead of git in the deploy workflow, though. That would require defining a different SCM in the Capistrano configs. I don't recall if there's a "local file" SCM defined in Capistrano 3 by default, but the SCM definitions are theoretically extensible to include one.
Our entire automation process is based around multiple, small feedback loops. Feedback loops include: 1. Peer review/pair programming 2. Repository specific unit testing 3. Repository specific integration testing 4. Full stack acceptance testing (RSpec) 5. Manual testing (if necessary) Everything except for steps 1 and 5 are automated for every push to master. So we don't run on every commit but every logical grouping of commits. We expect every dev to run repo specific unit/integration tests on their local machine, but even if they didn't, steps 2/3 would catch their failures. And steps 2/3 are run for submitted pull requests too, so developers don't have to wait for a branch to merge to master. Failing fast is definitely important! If any of the steps above fail, the steps below it won't be run. We see no point in continuing tests against failing code. Conversely, we want all successful steps to be automated as much as possible. So, passing unit/integration changes are automatically pushed into our testing environment, where Jenkins sees a change and automatically kicks off acceptance testing. And changes that pass acceptance testing are automatically staged for manual testing/deployment. We have not gone full continuous deployment (yet), so I'm still required to hit the deploy button when the time comes. We've found that this setup works extremely well for us. Our devs have a lot of confidence in their abilities to break shit and iterate, and they know it won't get accidentally pushed out. This also gives us the confidence to definitively say something "looks good", so we end up deploying multiple times a day. Usually a merged PR will go through this process and be deployed within an hour. The slowest part of the process is peer review, which encourages our devs to do pair programming instead. We like that. &gt; Shared, static, centralized development environment - Symptoms: Concurrent test runs blow up, change is hard/slow, high entropy. smell: "Oh, if there's a schema change, that's gonna up this story." Our development environments are really just a single configuration file. This config ensures that each environment "spins up" equally, but changes you make on your environment have no effect on mine. This is also the environment that is spun up for unit/integration testing by CI servers. &gt; Data Dependencies - Symptoms: same as above. smell: "Don't touch this data, this is used by automation." Data in the development environments is mostly stubbed, and like I said, local changes have no affect on others' environments. We have one, "monolithic" test environment. Here, tests pull the data they need when they need it. Most of this is dynamic, meaning tests are run against new data every execution. In some cases, data is hard coded but we clean that data before/after every test that needs it. &gt; Inexperienced testers/devs wreaking havoc in the test code. Smell: copy/paste all over, lots of type casting, queries hard-coded in the step-defs, methods in feature-specific step-def files, copious use of back-ticks around bash, etc. We've never really had an issue with this because peer review or paired programming takes care of it. Every commit goes through one of these two processes, including commits done by our test team and dev changes to test code. &gt; Have you experienced the same integration with the product-side of the business? Yes and no. Devs, testers, and POs often get together to talk through aspects of a feature: the business idea, code implementation, and testing. But our application is not overly complicated, and the Gherkins we once wrote were not used as "living documentation." It became pretty obvious that no one really cared how the features were documented (just that they were documented somehow), so the Gherkin abstraction was only beneficial to the test engineers. And we didn't find it all that beneficial. &gt; How has Rspec worked for you? I love it. We use rspec-given to give us the Given/When/Then syntax from Cucumber, but the real benefit is being able to easily describe a feature while also implementing the test inside that description. So a test might look like this: describe "user is able to log in" do Given{ home_page.click_sign_in } When{ sign_in_page.login_as "user", "password" } Then{ member_session_cookie.exists? } end We've also found that if we pass a test like this off to a PO or other interested party, they're more than able to parse the feature from the test. Readable Ruby goes a long way, I suppose.
That sounds really interesting/beneficial. Do you happen to have any reading on this? 
/u/Jdonavan has the right of it if you're going to maintain your own CI setup. Git hooks are definitely the way to go. And other VC systems have hooks too. Alternatively, there's [TravisCi](http://travis-ci.org) or a number of other hosted CI services.
Tagged pointers, that is all.
I recently learned of a much nicer way to get an object's "interesting" methods: `MyClass.new.public_methods false`
Why don't you set up a scheduled task which will download and import the csv file every 5 minutes? Try the gem "whenever".
Just set it to do the CSV.foreach every 5? 
What we do is inject javascript into each page that registers a callback with Jquery and the microsoft ajax libraries (depending on which is in use). That callback simply sets the status of a hidden field (one for each hook). We have a function on our base page called robust_wait. This function checks the various watir methods to determine is the page is busy and then checks the hidden fields to make sure no background calls to the server are active. Anything that modifies the page calls robust_wait immediately after. With luck, this code and a whole bunch of our custom tooling will be getting released as open source soon. We're just getting all the ducks in a row with our senior management. 
This may mean you need a build dependency on your system, as the gem trys to build native extensions. For example, to install MySQL gem you need libmysqlclient. Alternatively, it may mean you just don't have the privileges required to install the gem when it has a binary, e.g. to install padrino (which provides a padrino command) you need to run as root, because a normal user doesn't have permissions to install to /usr/local/bin. So just running with sudo (root) could be the solution. Or you can go with possibly more secure option or changing ownership of /usr/local/bin and /var/lib/gems to gem group and adding yourself to the group.
It's probably easier to just chown the directories, then. Installing Ruby as a system install should have it available to root, so I'm guessing you compiled ruby as it isn't in redhat repos as far as I know (at least, it isn't in 6.4). e: It looks like you do have write permissions? Can you double check by touching a new file in each directory?
The tracks stay in the folders you index. If you move them, you have to delete the index (````wavhead.rb -d```` should work) and index it again. The album art is stored in a hidden folder in the wav_head directory, as is the database with track info.
 Edit: I failed to read. 
I'm sorry, but I just can't relate to your point of view. Maybe it's because I use IntelliJ. Have you tried it for ruby? It's insanely good imo.
Step 1. You write ruby code (and tests) that downloads the CSV file, parses it and processes it however you need it to. It has no concept of "every X minutes" I will refer to this as parser.rb Now you need a way to run parser.rb every 5 minutes. (You could also hide this behind a rake task if you are using rake) Step 2a. On linux, learn how to use cron to run "ruby parser.rb" every 5 minutes Step 2b. On windows, use the windows scheduler to do the same thing. This is probably the simplest way of doing things. Once you are comfortable with doing it this way, investigate the [whenever](https://github.com/javan/whenever) gem but make sure you understand the basic concepts before diving into that since it is slightly different.
Turn back, mobile users.
On the other hand interfaces make for more robust code. It's not like there is no purpose to them. Duck typing in this context allows you to write less code but it is also less robust. Testing helps with this substantially however, and since most Rubyists write tests, I think that is the major factor why interfaces are less relevant. Also Java is a bad example, it is a very old language, I would take Scala with its type inference. I think it is a very good alternative to duck typing. But for the moment when I look at Ruby code it is "clear" to me much more quickly than looking at Scala code, since there is still more noise, but I also have less experience with it.
Guido van Rossum is holding him on a deserted island along with _why. 
All comments from about 8 months ago, so probably not so relevant still at this point.
Perhaps your company would be happy to enrol you? Having a good front-end dev with knowledge of the full stack is surely valuable to them. If not a full month long full time course, then perhaps a 2 day / 5 day course?
I agree - it seems like Capistrano might not the best choice for your use case. Since you are already using Grunt, I bet you can build an rsync-based deploy task right in your Gruntfile. I happen to use gulp and here is what my deploy task looks like: gulp.task('deploy', ['build-prod'], function (done) { return cp.spawn('rsync', ['-avz', '--delete', '_site/', 'mysite.com:/home/ryan/mysite.com'], { stdio: 'inherit' }) .on('close', done); }); It just shells out to rsync after building the site. I'm sure you could recreate something similar in Grunt (looks like there are some rsync plugins too).
I use Rubymine and I love it, but it's refactoring is not perfect. Renaming methods or classes sometimes renames other symbols and strings which were not intended. It is better than nothing, but not like a static language. I use Ruby but for a large project with a lot of people I can see the benefit of a staticly typed language.
&gt; Refactoring becomes more difficult and more (completely) reliant on unit tests to ensure they are done properly. &gt; Refactoring via grepping is a joke, time consuming, labor intensive, inefficient, and very error prone. When you have a test suite that is fast and comprehensive, refactoring is really easy. I don't ever need to grep for stuff. I can figure out if anyone is still using `#my_method` by simply renaming it to `#x_my_method`, and running the tests. Less than two seconds later I have stack traces showing me a list of places that are still using the method. One thing I will say, is that the test speed of your entire suite is crucial to being able to refactor quickly in a dynamically typed language.
Requiring you to extract an interface also means that conceptually you've tied a distinct set of behavior to disparate objects. I've found that I'm always more reluctant to experiment with changing interfaces and particularly removing an implementation, which has left me with poor abstractions. 
Could I put them on s3?
It's hard to ignore [Hickey's siren call.](https://www.youtube.com/watch?v=rI8tNMsozo0) Especially when he brings it right to their doorstep.
I would very much like to buy Ryan a beer for all he's done for me and countless others. Incredible human.
Or Go
It's weird I have permissions set but for some reason the gems aren't able to use the /tmp directory. I keep getting " tmpdir.rb:85:in `mkdir': ERROR: Failed to build gem native extension" on every gem that I try to run. Yes on ruby being compiled as it's not in the repos. I can touch files on the directories
The error I am getting repeatedly is "tmpdir.rb:85:in `mkdir': ERROR: Failed to build gem native extension" but as far as I can tell the /tmp permissions are correct
You need to post the full error message somewhere.
What is the output of `ri --list-doc-dirs`?
I am curious, how is the experiment going? Are points being actively exchanged?
[Lambda, etc. in Ruby 1.9](http://railspikes.com/2008/9/8/lambda-in-ruby-1-9) [Becareful With Space in Lambda Rocket Syntax Between Ruby 1.9 and 2.0](http://ruby-journal.com/becareful-with-space-in-lambda-hash-rocket-syntax-between-ruby-1-dot-9-and-2-dot-0/)
With well-written code, it just works. Sometimes someone writes obtuse code and then I have to spend some time understanding their design philosophy and intended use for the classes before I can solve the problem at hand, but that's happened once in 4 years. For the most part, I never really run into rabbit-hole-style bugs like the hypothetical you described. &gt; provided some sort of optional 'interface decleration' feature Oftentimes people will raise errors in the top level class and require lower-level classes to override that behavior. Then if you're consuming this class and you misuse it, errors get raised immediately. There are probably other design patterns to help with this, too.
If this is Red Hat 7, try turning off SELinux for shits and grins. Some of the default policies are, uh, *very secure*.
Ask the user for a subreddit from which to show recent posts and/or comments.
Or Rust. Or Elixir. Or ...
Can you post the whole stack trace you get?
Are you on older Rails? In recent versions there's even no `assets` group in gemfile. You can find detailed discussion on this, it's controversial, and the reason are the templated js files. You might want to fight his, and there are good reasons, but this got mainstream already.
How about using the last.fm API like they suggest? Something like listing top tracks by country (geo.getTopTracks). You could validate that the user provided a valid country which would meet that requirement pretty easily.
The Google Maps API is awesome and easy to use. Ask for two addresses and display the distance between them. Use incorrect addresses (Google maps will tell you if it's wrong) to display errors.
How's the course btw? Is it good? Are you taking it in DC? 
Indeed.
&gt; MyClass.new.public_methods false Wow, thanks!
I've been learning Angular.js over the last few weeks pretty much exactly as this article describes. Can anyone with experience in both talk about pros and cons of Ember?
Make a Twitter command-line utility. You can tweet, list, search, login, etc. Super simple, API is really easy to use and well-documented.
For the cluster, I'm building my own PaaS (like Heroku). As for defining 150 terms, it's pretty simple. Just find a site that's sort of relevant to your class. For this example we'll just say I'm in English class and the teacher wants me to define a butt-load of vocab terms. So for this we'll use http://dictionary.reference.com/. Throw the list of terms you need to define into a text document, write a Ruby script to put those words into an Array (separate your terms with a newline then use IO#readlines for easiness). Loop through the Array sending a GET request to "http://dictionary.reference.com/browse/#{term}" using your favorite HTTP client gem, parse the HTML with Nokogiri and extract the definition of the page, throw that into a Hash then loop through the Hash object and print to STDOUT (make a PDF with Prawn if you are l337). Sorry for the wall of text, but yeah. There's a real world example.
The car variable is only local in scope to the new_car method. Search for how to make a class in Ruby: read about initialize and attr_accessor.
This is due to scoping. The variable cars is a local variable which means only that method can access it. Instead you can use an instance variable @car to be able to access it from the other methods. A cleaner way of approaching it though would've to use attr_accessor which will create the getter (car) and setter (car=) methods for you. You can read more about attr_accessor at http://apidock.com/ruby/Module/attr_accessor
Pretty great write up in general.
http://www.quora.com/What-happened-to-Ryan-Bates-of-Railscasts
You also will not need the `return car` lines at the end of every method if you use `attr_accessor`.
Nicely explained. 
That is simply... fantastic!
heck yeha! 
Or use https://github.com/krautcomputing/gem_config which adds some additional features, such as allowed values for a setting.
it's from the book Stranger in a Strange Land. IIRC, it means to understand something at a very deep and intuitive level. 
I'd also suggest ActiveSupport::Configurable
Have you tried opening a new terminal window? If you're trying to use the `rvm` command in the same window with which you just installed it, the command may not be loaded in that bash process. 
YMMV, but RVM seems to be less popular these days. Maybe checkout Rbenv or Chruby?
Look at the RVM pages dealing with bashrc &amp; bash profiles might help.
I'd recommend the ruby bindings for Google's perftools [here](https://github.com/tmm1/perftools.rb) - see the section about generating graphviz callgraphs
 arr.sort[0] arr.sort.first arr.sort.[](0) It gets you the first element of a newly sorted array. [0] is just a method call that looks fancy.
oh wow, haha thanks!
You could try max = -Float::INFINITY I use it in ranges for iteration all the time when I don't have any idea how many iterations it's gonna take.
acadiansith's answer is good. My safe answer for this procedural approach is to set max to the first value in the array: max, *rest = array for i in rest if i &gt; max max = i end end I know you didn't ask for it, but I can't help it: array.reduce {|max,x| max &gt; x ? max : x} And, of course: array.max 
PC running Vista. yeah I installed both. Edit: I put the sqlite files under in a file named db under my ruby file (i have no idea what I am doing, seemed like it could work). Is there a particular place the file needs to be?
I'm not a windows user, did you tried [rubyinstaller](http://rubyinstaller.org/)?
 max = array2.max Then forget about the loop.
You have begun down the path of pain. Ruby + Windows is not a good time. You may want to look into setting up a virtual machine running some flavor of linux or mac os x. 
What would be a good language to learn for a windows user?
&gt; The Ruby website recommended I download version 1.9.3 so I did. 1.9.3 has been outdated for a long time now, so I'm wondering what website you were actually on. The current version is 2.1.4, with 2.2 coming out soon.
That's an interesting question, but, only because (to me) it feels kinda backwards. However, that being said, the obvious beast in the room is to learn C# or VB.NET. Microsoft provides free versions of Visual Studio, and you'll produce software that for the most part will run on any other windows machine. There's a ton of different languages that don't have the windows interoperability pain Ruby and it's Rubygems ecosystem possesses. I normally approach the decision of what language to use as 'What do I actually want to accomplish?' Am I coding a web application? I want ruby/rails because it's one of the speediest platforms for prototyping a web application. Am I trying to make a 3d game? I'd probably start with C# / Unity and go from there. 
Ah. I'm not sure about the state of Ruby &gt; 2.0 on Windows, but in either case I would not recommend learning Ruby with 1.9. You will run into problems as more and more libraries drop support for 1.9 over time.
Rbenv FTW
`Array#max` is O(n) while `Array#sort` is O(n log n).
Thanks, I think I should start with something more compatible with my system considering how limited my knowledge is at this point. Could you recommend a good place to begin learning C#?
For the overengineered approach, you could use an option class: class MaxHolder attr_reader :value def has_value? instance_variable_defined? :@value end def &lt;&lt; v @value = v unless has_value? and v &lt; @value self end def inspect "#&lt;MaxHolder has_value=#{has_value?}#{" @value=#@value" if has_value?}&gt;" end end def check(array) max = array.each_with_object( MaxHolder.new ) { |x, max| max &lt;&lt; x } if max.has_value? puts "max is #{max.value}" else puts "array is empty" end max end Then irb&gt; check [] array is empty =&gt; #&lt;MaxHolder has_value=false&gt; irb&gt; check [-Float::INFINITY] max is -Infinity =&gt; #&lt;MaxHolder has_value=true @value=-Infinity&gt; irb&gt; check [3,1,4,1,5,9] max is 9 =&gt; #&lt;MaxHolder has_value=true @value=9&gt; 
Well, everyone learns differently. However, there are LOTS of resources for people wanting to learn languages. It's been a long time since I was at the just learning stage, so I forget some of the concepts I struggled with, thus, take these recommendations with a bit of salt, they look good to me, but, there's no guarantee they aren't making assumptions about what you do or should know. MS Has a set of tutorials on C# http://msdn.microsoft.com/en-us/library/aa288436(v=vs.71).aspx LearnXinYMinutes has a section on C# http://learnxinyminutes.com/docs/csharp/ A set of youtube videos that I've seen linked multiple times. http://www.youtube.com/watch?v=x_9lfHjYtVg Hope these help!
you don't need them now either. 2.1.2 :024 &gt; car = [] =&gt; [] 2.1.2 :025 &gt; car &lt;&lt; 'Ford' =&gt; ["Ford"] the expression ````car &lt;&lt; "engine"```` returns the car array anyways and the method will return the value of the last expression anyways without an explicit return statement
I've noticed that you are using windsows. My main machine is a windows PC and I recommend using http://railsftw.bryanbibat.net/ - even if you are not working with rails it should install everything you need, including "SQLite3 DLL and command-line shell".
The iOS API will be the biggest issue. Knowing what is inherently available will be the slowest learning bit. I'm in the same position as you. Luckily I got a RubyMotion license.
Thanks for the feedback. Interestingly, when I visited a couple of dev places that do Ruby and iOS...both of them had ultimately switched to using RubyMotion. The current project I'm on is native however.
Objective-C is stupendously more verbose than Ruby. Swift helps a little, but it's still new and the mental model only works (I think) with knowledge of the Obj-C APIs. It's difficult to do much outside of XCode. With Ruby, you have a wide choice in tools. I haven't had a chance to play with RubyMotion yet. I really should.
iOS to Ruby for me. Issues with iOS that I don't have with Ruby as much: - Memory concerns (iPad 2 has a half gig of memory, sometimes loading objects into memory will take more than that). - API issues: For example, animating a table is much more involved and requires protocols and delegates. Another example... I ended up creating a map function that works like it does in Ruby. This ultimately lets me reduce code complexity. - Views. These are either hand coded and fairly complex in comparison to something like Ruby on Rails, or they use story boards and bindings. Overall iOS is a different paradigm - compiled, MVC, Ruby lets you get away with anything, iOS is strict in its syntax. Just little things, nothing overly major.
Languages are a personality fit. Some people match up well with Java, some with C, others with Ruby, Python or JavaScript. Swift vs Objective-C. Same with frameworks and platforms. If you don't like HTML &amp; CSS, consider iOS or Android programming. Explore all of them and something will "click" with your personality. (ok, just got a visual of the Harry Potter sorting hat) Since you are just starting, I suggest getting a subscription to http://teamtreehouse.com/ as they are targeted for beginners and they have content for all the relevant platforms. Try out tutorials in all the different languages and within a month or two you will have enough information to make an initial decision. To complicate things a little more, job and geography ecosystems are also a personality fit. If you are a fit for Ruby, but like rigid corporate environments, you might have problems finding work. Java is more common in these ecosystems. Explore the job boards in your geography. 
Using Ruby as a web developer still requires - at the very least - a working knowledge of HTML and CSS. I'm originally a self-taught developer who went back to school after the fact for a degree. I landed my first job by reading a bunch of Ruby and Rails books, and building a bunch of hobby projects. From the time I made the decision to go for it until the time when I received my first job offer was about 9 months. Landing that first job is the hard part. Once you have any kind of professional experience, you'll get more job offers than you know what to do with. You can get by with pretty minimal CSS and HTML knowledge (though you'll probably need more HTML than CSS), but if you want to be truly attractive in the job market, you'll become competent and productive with both in addition to Ruby. I consider myself a back end developer, but I probably only use Ruby 60% of the time. Javascript is another 25% of my time. HTML is 10%, and CSS is 5%. At the end of the day, being a good "web developer" means having general knowledge about many things, and having specialized knowledge about those few things you really care about. By all means, specialize in Ruby, but don't go in thinking that HTML/CSS don't matter.
I'd suggest the alternative: max = array2.first
I don't know the answer to that, but at any point in execution if you put in a breakpoint (via, say, pry), you can type `caller` and get the stack trace as an array of strings.
FYI, RubyMotion *is* native. 
And on the flip side I don't see how the second is more readable than the first. The nice thing about ruby is that you can use whichever you think makes more sense at that point in time.
why not just use http://ruby-doc.org/core-2.1.4/Enumerable.html#method-i-min ?
Hello, thank you for the comment. I have looked into Android programming but because I am self teaching I thought it might of been something that was impossible to get a career out of without a degree. I'll give Ruby a go for a few months. I have noticed that it pays very well in London/UK and the entry barrier doesn't seem that high. Thanks.
Hi, thanks for the comment. That sounds very promising that it only took you 9 months to get a full time position. Congratulations! I was a bit too critical with HTML/CSS. I dont mind using them but I'd rather do some actual "programming". Back end development does seem best for me and I'll commit myself to learning Ruby. Could you explain to me what exactly you do and how the languages you use all coincide with one another? 
Moreover, it also requires you to be familiar with HTTP and all the zoo around it, and understand data structures, and how databases store data and how not to shot your feet off when designing model schema. And after all it requires you to have basic understanding of Linux system administration to do a initial host machine setup and deployments of your project to the machines you control. Add some system monitoring skills. You will also have to understand how Rails work, learn its command line tools, multiple testing tools. And you're still far from being proficient. Documentation with yard. Dev env with guard. ActiveJob*. And it's not getting any easier to learn over time.
Happy cake day! Ruby, to be fair, has `array1.max` which solves the max problem, as well as a `max_by` method. I realize this is not the question you're asking, but this is Ruby.
The brackets are how you access an element in an array by its index. Sort returns an array. So you are accessing the first element of the sorted array.
I work at a startup that's grown from 5-30 devs in the last two years, so I can only share my own experiences. The smaller your company, the less structure exists around development and the more things you'll be expected to do. When I started, I was more or less taking a feature from idea to implementation and deployment with very little guidance. I usually was handed some rough wire frames, and I otherwise had to do everything from design (CSS/HTML) to user experience (HTML/JavaScript) to data modeling and business logic (Ruby). That's the early startup life in my experience. When you work in a larger, more structured environment, you tend you have designers, product managers, and maybe UX engineers. Now that we're a little larger of a company, I tend to get more specific requirements, and I usually spend more of my time working solely in Ruby doing data modeling and business logic. Our UX team is not very big, so I still end up doing a lot of front end work in JavaScript, hooking things up to a back end API and so forth. There's also the ops component of all this (see philpirj's comment below) which may or may not be a concern in a particular work environment depending on the chosen deployment stack. So basically, I would say that it's easier to get a foot in the door at a larger, more established company where the expectations for your knowledge base are probably more focused, and they are probably more willing to train a junior person. However, working at a startup is exciting and fast paced. You will learn a whole lot more in a very short period of time. But it's riskier (startups fail, layoffs happen, etc.), and it will be harder to find a small company who's willing to train or who doesn't expect you to know more from the get go.
You have to wonder why it pays so well if the barriers to entry are low. IMHO, Ruby is a language that keeps giving to those who want to know more. It is easy to start with but it belies a tremendous amount of depth. Once you're past the basics, keep going and asking and discussing. Its the start of a very long journey, but know that you will be productive even shortly! One last thing. I recommend learning: Ruby --&gt; Sinatra --&gt; Sinatra+ActiveRecord --&gt; Rails I fear for those who jump straight into Rails.
Getting your app rejected because a reviewer had a bad day, the app was too close to something Apple is doing, too obscure for the reviewer to understand, or any combination thereof; rendering months of development wasted. Enjoy!
That's good advice. Rails is far more complicated these days.
how long have you been a ruby developer? what job lets a ruby dev just "work on the IOS app"...unless you have years of development experience and you can pick up a language in a month or two. To be proficient could take 6 months or more. wish I had your job!
^^ This is more correct. I was trying to say something exactly like you did about Ruby's automatic returning of the last evaluated expression.
I was hired to clean up an iOS project where the company gave a bunch of Ruby devs a week of iOS training and expected them to make an app. There were tons of problems. Of course it didn't help that half the team resented being put on the project. I think the biggest issue was changing your mindset from request &gt; process &gt; return to an app that is continually running. On the web, you push a new page and are done. In an app, you have to think about how you're going to push that page and how the user is going to get back. There's a lot of state you have to think through. Also the client server differences, where in a client you don't have access to the entire database.
How's your experience with RubyMotion? It looks pretty impressive.. Any limitations you're running into?
Using Windows here. It's sort of tricky to set up Ruby but it can be done. Make sure you set your PATH environment variable correctly!!! Also install DevTools. If that doesn't work you can switch over to JRuby, but make sure you read up on the intricacies and differences when dealing with gems if you go this route. Overall, I would stick with plain ole' MRI Ruby. I believe that Cygwin provides packages for it, so you can always try that. 
The storage variable initialization is a moot point. There's no need to implement a max function for arrays... max = array.max { |a, b| a &lt;=&gt; b }
The whole reason why I even got into iOS app development and RubyMotion is due to a mobile web application that I developed. Our clients presented us with a few issues which we later found were limitations set by Apple when dealing with websites. Specifically, we need to use the getUserMedia() javascript function to interact with a user's camera to take a screenshot of them when they are clocking in or out. Their image is uploaded to the server and is compared to previous images (facial template) that the user has previously created. The problem is that Apple does not allow the getUserMedia() function within Safari or other web browsers (Chrome, Opera or Firefox). The second issue that clients raised were that they have employees who are often out in the field and cannot use the software since it is a mobile website. If the employee's clock in/out data can be locally cached on the device and then uploaded when in range of a cell tower/WiFi network then this would solve their problem. These two issues spawned our need to move from a simple mobile web application to a native device, which brings me to answering your question. I have several years of Ruby and Ruby on Rails development experience under my belt. Becoming familiar with the class inheritance and other ruby-style parts of RubyMotion hasn't been an issue. I quite love it. I mainly have found a few points about RubyMotion that is rather annoying and/or not good. #1. Documentation (or lack there of). From what I have seen, the RubyMotion community lacks VERY far behind of what I'm use to seeing with Rails. There isn't much documentation on the different RubyMotion specific ways of handling things. It has been very much trial and error. The documentation that RubyMotion does provide doesn't cite any examples which is also rather annoying. They simple give you the different objects available and then leave you to figure out the rest. More often than not, I find myself browsing through the official iOS documentation to see the available objects from the API. #2. Real Time Translation - Ok, this is kind of a strange one. Even though you're programming solely in ruby with RubyMotion to develop an iOS application, you still need to know ObjectiveC and/or Swift. The main reason for this is my Reason #1. You're having to look at ObjectiveC documentation and code to see how to implement a feature. The ObjectiveC documentation can help guide you to what you need to accomplish, but it's written in the wrong language. Becoming familiar with how something is written in ObjectiveC and being able to rewrite that in your mind to the RubyMotion equivalent will be a great asset. #3. UX/UI - There are several gems out there that can help you with UX/UI (the look and feel of your application). Specifically, I'm referring to the layout of your application. I've tackled and rewritten my application a number of times before I found my "best practice" of doing something. I would HIGHLY advise against using the Storyboard method as I quickly ran into limitations between the view controllers and what should/shouldn't happen. However, if you are a visual person, you can still create NIBs which is an extract of the Storyboard and will be for a single view. I first started with the Storyboard method and quickly deleted that project and started over using NIBs. side note on NIBs. You have to use XCode to compile your XIB to a NIB. You can create a `create_nibs.sh` file in the root of your application and run it any time you have made changes to your XIB files. for i in resources/*.xib do echo "compiling `basename $i`..." ibtool --compile resources/`basename -s .xib $i`.nib $i done Using NIBs can make your simple application easier to layout. However, you will quickly find that there are some downsides to this. For example, if you have some sort of logic where an input field should be a text box, or a dropdown, or a label depending on the configuration of your API backend application, the XIB will become very ugly very fast. Instead my approach is currently to create a very basic XIB (which gets converted to a NIB) and the content is dynamically added in. I've taken this approach since a lot of the navigation and features of the site are dependent on what was received from our API. #4. PODs - I've had some trouble between working from home and the office on two separate machines. For some reason, my PODs got out of whack and kept running into issues where my application will run in the iOS simulator at work, but will not run on my home machine when I pull down the latest changes from git. Using `rake clean` is your good friend in these instances. It has fixed my PODs issues more often than not. #5. iOS APIs - Understanding and knowing what the APIs are for interacting with the iOS devices will be the biggest hurdle. If you have a good idea of navigating through the iOS Developer Documentation and you know in general the structure lifecycle of iOS applications and functions then you should be able to get by okay. #6. Deployment - As I've learned today, and cannot find any conflicting documentation, you cannot compile the APP without having a certificate. This only applies to iOS. You can generate OSX applications without having a certificate from Apple's Developer program. I have not found this to be the case with iOS yet. It is rather unfortunate because I do want to test the application on an actual device, but haven't signed up for the Developer program yet. I hate that it's $99 + tax a year from the moment you sign up. I've been trying to delay it as long as possible until I'm ready to push the application to the App Store. Apple REALLY should make the starting counter from the first time you push an application to the store if you have never published an application with them before. #7. Android - As expected, you cannot cross compile your application to Android OS. Instead, you will need to generate a new RubyMotion project for Android. While you can reuse a lot of your business logic from your iOS application, it will be relearning a whole different API for Android. All-in-all, I'm sorry for the complaining. However, I do feel that it was important to give you the bad stuff because you will not read these things on RubyMotion's website. That being said, despite all of the negative stuff here, I would do it all over again. I have never met an angry Ruby developer. That cannot be said the same about PHP, .NET, Android, and iOS developers from my experience. I do honestly believe that RubyMotion is a great product.
*RubyMotion* Reading ObjectiveC - Eyes Hurt *ObjectiveC* Reading and Writing ObjectiveC - Eyes and Fingers Hurt. I think that once you have created an app or two in RubyMotion that touches on a lot of the APIs that you will most commonly use, you will find that you're consulting the documentation less and less and referring back to your own codebase more and more. At least, this is a common pattern that I have. When I first started with Ruby on Rails, I was following Railscasts pretty closely; pausing and rewinding a lot. Now, I don't watch the videos at all but rather refer back to my old code or simply look at the show notes. Where I was watching his screencasts multiple times a week, I may look at one every two or three weeks. Sometimes just because I miss his "It works. Yay!". (i have separation anxiety) 
haha nice, sum-up! and yeah, that all makes sense and sounds like my experience with rails. now back to my internal state of hybrid-vs-native indecisiveness!
http://samsaffron.com/archive/2013/03/19/flame-graphs-in-ruby-miniprofiler
Very good write-up &gt; 7. Android - As expected, you cannot cross compile your application to Android OS. Instead, you will need to generate a new RubyMotion project for Android. While you can reuse a lot of your business logic from your iOS application, it will be relearning a whole different API for Android. Sounds like a pretty good use-case for splitting all business logic into POROs (In a gem?) sandwiched between the custom UI in front and the Device specific APIs in the back. Is this what you do? 
As others have said, the brackets are just a method on the array itself. You can actually implement them into any object you create, just by doing `def [] argument`.
Your goal of 4 months is not unrealistic. Finish LRTHW. Write simple Ruby programs, write tests. Don't use outside libs (except for testing) yet. Simple CLI things like triangle area calculators, roman numeral converters, that sorta stuff. Start branching out, move into object-oriented stuff. Make go-fish, hangman, conway's game of life, etc. Next start using DB libs, like pg etc, write out your own classes to connect to a database. CRUD classes, create, save, update, delete, find, find by id, sort. Get a feel for the nuts and bolts of what makes a good model tick. Go through the repetitive steps of making CRUD classes. All the while you're just using CLIs. Once you're comfortable with using the core language and only a few libs, then move onto to the big frameworks like Rails. Better yet, before you hit Rails, start with Sinatra or Cuba and make some simple web-based cruds.