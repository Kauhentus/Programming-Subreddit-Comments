Maybe because there's no conditionality to the take?
yeah but... but... i like it?
in no place did he argue for readability. the argument was that control structures allow us to introduce coupling to other objects or concepts more freely. removing control structures helps put up a barrier to coupling. You can still make an argument about control structures being more readable.
Yep, but I wasn't arguing for readability.
I'd argue that the following is clearer (and likely more performant) ary.take(n).concat (n - ary.length).times.map{0}
What happens when `n - ary.length` is negative in this situation? (very naive w/r/t ruby here)
Nothing, and the call to map will just return an empty array.
What??? $3,200 to learn something that is perfectly well-documented, with free tools available and a decent community to support you? I'd spend the money to take a month off of work and just learn the language myself.
The best class I ever took was one where I showed up to a programmers workplace with a problem and they walked me through the workflow to solve it. I had been self taught and wanted experience from professional programmers. It was a fantastic week of training. However, I already knew some ruby, so I was getting experience on top of my previous learning. I can't say if $3200 is worth it for this specific course. I have seen similar courses that guarantee you a job or your money back. it's hard to say that $3200 is too much to launch a career. I'd try to find people who took the class and get their impressions. If you can go from 0 to career in ten weeks, that's pretty damn cool. 
The way of insertion method into an already defined class is called [Monkey Patching](http://en.wikipedia.org/wiki/Monkey_patch) and is generally considered a bad practice. The change happens in all parts of the program and functions can be overwritten and that can lead to unexpected behavior if your project grows large or if you are more than one person working on the project.
I can't tell you whether *that* camp is any good, only students whom have attended could attest if that is their opinion. That said.... From my own experience, a course like this can save yourself countless hours of bashing your head against the wall to accomplish the most basic of tasks. Having access to professionals will also help you build good habits (very hard to do as a self study). Considering you could spend $10k for a semester of college that ends up teaching you jack shit about building things in the real world, I would say it's a bargain.
because you think people would learn more in a month via self-guided study than 10 weeks of access to experienced professionals that can answer almost any question you throw at them ???? suspicious.
http://vimeo.com/17420638
Do you know any programming at all or are you totally fresh?
It's kind of an art, when to do this and when to not. ActiveSupport modifies hash so that you can reference a hash key by string or symbol. I find this very useful, and it's cool if you're expecting this behavior. If you applied this to some other code base that isn't expecting this, it could be disastrous. (create bugs that are really hard to find or even notice)
No; I just happen to think that *I* could learn a language like Ruby successfully in one month without paying a dime for it, and I assume the same goes for many others. I also happen to think that self-study makes for deeper, more thorough learning than any pre-processed course material could ever hope to achieve. And no, this is not bitterness on my part.
is there a doc somewhere? Because i would like to implement a command line app to buy train ticket. I'm sure it would be awesome for at least 15 persons!
I was in a similar position and found that I needed to go back and invest more time into learning Ruby. I was staring at blank controllers and models thinking, "okay, I know that the model contains data, the controller should communicate between model and view, but what do I put in there??" Truthfully, you are just writing a bunch of Ruby scripts and giving them special names. Like someone suggested, try some webscraping. Use the Nokogiri gem. I am a weather dude so I taught myself Ruby by writing a series of rake tasks that go out and fetch weather data and them save them into a model. Once I managed to write my own Rake tasks, the thought of developing a whole Rails app seemed less intimidating. Remember to always break the problem down into small steps. The functionality you want to include in your app is really a collective of very small functions working together. Pinpoint some of this low-level functionality and start building it until you get to the high-level functionality you desire... On a non-Rails note, try building a text based vending machine in Ruby.
Here's that article http://words.steveklabnik.com/beware-subclassing-ruby-core-classes
This is not metaprogramming.
See Avdi Grimm's book "Confident Ruby" for a lot more refactoring techniques like in this article. 
tdammers - I totally agree it's possible to teach yourself to code. Even a blind squirrel can find a nut, right? :) I just don't want to waste time teaching myself. I'm already teaching myself Cantonese through audio lessons while walking around Hong Kong. In general, things go a lot faster if someone is there to help you along. 
I know some front end html / css. Been messing around with the ruby lessons on codeacademy.com. Friend of mine is going to a code camp in NY next year and that got me looking into these coding camps and the value they offer. $3,200 is pretty cheap comparatively but if I can learn the same on codeacademy, I don't see the point. I went ahead and registered for their Q&amp;A session later this month so we'll see how that goes. 
u/someretard - love the username dood. I agree about the past student feedback. I'm going to a Q&amp;A session later this month to find out more. def agree about good habits and the college comparison. some programs are actually FREE! app academy in SF has a REALLY good idea about cranking out developers and getting 15% of their salary for the first year. nifty idea there... if I didn't have a gf out here in HK, i'd prob be in SF doing the code camp / startup scene. stupid hot gf! 
&gt; the author was able to move a conditional out of his own method by leveraging max, which is itself conditional Yup. Pick a random standard library function with a conditional, wrap things up in a few closures and `.call()`s, and you can have the author's perfect code.
It sounds like you're comfortable dealing with computers, but maybe not so much with programming. If you want to learn to program, the best way to do so is to figure out just what you need to solve some problem you care about. Try automating your process for changing or deploying HTML and CSS. If you want to be seen as a "Ruby programmer," ask the place about their placement rates.
Just a thought, but if you had time it would be cool to see python's Panda library get ported to Ruby (where and if possible). I'm sure the project would amass quite a few contributors and I think it could really help diversity and expand the Ruby community... Just a thought. :)
Depends on your learning style. Most of the best coders out there are self-taught, because a lot of what writing software is about is being able to teach yourself new things. For example if you're building a new inventory tracking system for a car dealership (woohoo! the big leagues!), you are going to have to learn about the business processes inside a dealership, the laws around sales of cars, the flows and interactions between the team members of the dealership you're in, third-party APIs to other services, possibly more aspects of the framework you're working in, maybe some language syntax features you've not seen before, issues with deploying (there are always issues with deploying) and a host of other things. Being a good programmer is about being able to teach yourself. Before you go into this, ask whether teaching yourself is something you really want to do, because it's what you'll be doing every single day. And if after that you think you can teach yourself Ruby and spend that $3200 on something else that will help you setup your own business or something, that might be the way to go. If you think this is the best use of your capital right now, why not?
As others have mentioned, monkey patching core classes isn't a great idea. Actually, monkey patching *anything* can be a headache. Also, this isn't really metaprogramming. That rabbit hole goes much deeper. Take a look when you get a chance, but think three times before using it. 
You're not really arguing for anything. You've produced code that's harder to read thus harder to maintain. A comment could have solved your stated purpose for doing away with the conditional.
Two points: * Your command objects should be named after an action, e.g `ThrowBall`. * If you use `#call` instead of `#execute` your command object behaves more like a proc/lambda and your command stack will be able to accept anonymous functions (aka procs/lambdas) as well.
Anything would help, thanks!
I am! I am! I'm coming down from Tampa on a Greyhound bus. Was gonna take my bike down but I had just passed a kidney stone recently and my back feels like The Sisterhood of the Traveling Pants.
This is a lousy way to explain that pattern. using an bad chosen analogy(footbal) and then a pure abstraction(compositecommand). Also making the invoker a command doesn't help
https://github.com/georgeu2000/coinhost
I'll be there. Here's a list of events happening around the conference: http://www.mikeperham.com/rubyconf-2013-events/ Looking forward to board game night.
I heard it was cancelled.
http://rubyconf.org/ still there, but sold out 
Me!
Yes, sounds great! I'm already in town; Anyone else early?
Heh my co-worker and I are coming down from Ohio. Not as cold as Denver but it'll still be a nice break from the blah weather.
My plane lands tomorrow afternoon.
SF checking in. Post an update with reddit party info :)
My co-worker Thuva Tharma is going. If you see him, say hi from Mark for me!
There's about a half dozen of us from [Shopify](http://shopify.com/careers) coming down from different parts of Canada.
There is a [huge?] tech event tomorrow hosted by Tiger Direct: https://www.facebook.com/events/384501875006477/ It is free, just need to get tickets! I'm a Miamian and would love to meet some fellow Ruby devs! Shoot any questions my way.
It makes more sense if you've ever been to DEFCON
I'll be there - this'll be my first time attending. Super excited! I'd be down for a drink or five.
I have never used Luigi, but from what you're describing [plines](https://github.com/seomoz/plines) sounds like a decent fit. Plines is built on top of [qless](https://github.com/seomoz/qless).
Get this man a beer!
Does the backtrace tell you where it raised?
This is the backtrace: /home/ricardo/.rvm/gems/ruby-1.9.3-p448/gems/mechanize-2.7.2/lib/mechanize/http/agent.rb:306:in `fetch': 500 =&gt; Net::HTTPInternalServerError for http://thesite.org/ -- unhandled response (Mechanize::ResponseCodeError) from /home/ricardo/.rvm/gems/ruby-1.9.3-p448/gems/mechanize-2.7.2/lib/mechanize/http/agent.rb:974:in `response_redirect' from /home/ricardo/.rvm/gems/ruby-1.9.3-p448/gems/mechanize-2.7.2/lib/mechanize/http/agent.rb:298:in `fetch' from /home/ricardo/.rvm/gems/ruby-1.9.3-p448/gems/mechanize-2.7.2/lib/mechanize.rb:1273:in `post_form' from /home/ricardo/.rvm/gems/ruby-1.9.3-p448/gems/mechanize-2.7.2/lib/mechanize.rb:540:in `submit' from /home/ricardo/.rvm/gems/ruby-1.9.3-p448/gems/mechanize-2.7.2/lib/mechanize/form.rb:223:in `submit'
When you create a Rails project it will come with a file called Gemfile. This file defines all the gems your site uses. It's used by a gem called Bundler which installs all your gems for you when you run the command 'bundle install' from the command line in the root directory of your Rails project folder. If you're setting up authentication, it's highly recommended that you use the Devise gem, although there are many other authentication gems available. Also, deploying your app to a VPS for hosting can be difficult for a beginner, using Capistrano gem. If you want to host your app easily, you can use Heroku. They make it really easy, and host it for free if you're using only a single virtual server instance known as a 'dyno'.
Since you're fairly new to the language &amp; the framework, I highly advise you taking a look at this: http://railstutorial.com/ But to answer your question, most gems come with fairly good documentation, especially on their github repo: https://github.com/plataformatec/devise But you generally need an understanding and familiarity with rails to know how to use it, where to put the method calls, etc. But no, you'll never see a script=ruby tag (well one can hope browsers would implement ruby some day). Also most of the time you will probably not use a raw form tag in your code, but some of the helpers rails gives you. Don't worry about that for now, start off on the tutorial i linked and go from there :)
Check this out --&gt; http://railscasts.com/episodes/283-authentication-with-sorcery 
Yea, I have a basic form submission thing and I wrote that in PHP. I also have a contact box that collects emails people put in and inputs them in a SQL database, also written in PHP. Since they are just temporary pages until I get the real thing up and running it's not so bad. Basically my site is going to have people look at a post made by me, login to their accounts, and then write things and allow others to vote on what everybody writes.
Thanks! Although Michael probably has an edge on me when it comes to functional refactoring. I tend to spend more time pushing polymorphism in the CR.
I just installed sorcery, but I still don't know how to actually use it. I can see it in rails and I have Aptana Studio to write code, but I have no idea how to use it.
Did you check with the Tampa Ruby Brigade? They did a group charter bus to Ancient City Ruby conference last April. Gavin Stark is the ruby user group organizer.
Others here have given good advice so I won't repeat them. DOuble check with your hosting provider on Rails support. Many shared hosting platforms don't support Ruby or Rails and if they do, they may have a lot of limitations on what you can do, what you can deploy, how you can deploy etc.
Are you rescuing Net::HTTPInternalServerError? 
I was hoping for a print poster of a real gem under a real microscope.
I was hoping for a poster that had the entirety of Ruby's syntax in very fine print and you could inspect it using a microscope
You can get 40% off when you use the code RUBYWEEKLY on checkout. (not sure if for print or only ebook, but worked for the pdf). Same with the code LENS (limited for the next 7 days). That one is directly from the author. 
I have three friends that went through a boot camp, and one friend that taught at boot camps. Here's the summary: - All three had *zero* coding experience going in to the program. - Friend A went to General Assembly. He is now working as an intern at Nest (internal tools team). He got the job maybe a 3 - 4 weeks after graduating. - Friend B went to DevBootCamp. She got a job a couple months after graduating and more recently switched to working at Thoughtbot. - Friend C went to DevBootCamp. She is still looking for a job. My take: if you want to get a job as a software engineer, its totally worth it. $3200 (or even $10k) is a small chunk of the money you'll be making as an engineer. And it seems like people who go to a boot camp come out MUCH better prepared than those who don't. Some people can learn coding on their own (I did). If you're posting this here, I'm guessing you aren't one of those people, and that's perfectly fine. Going to a bootcamp will give you a big push. *However* it's not a silver bullet. There's no way to cram 4 years of CS education into 3 months. This means you will work like crazy for three months, then get an internship instead of a software engineering job. Throughout the internship and for a couple of years afterwards prepare to feel like the dumbest guy in the room. It will take that long to get up to speed. On the bright side, even as an intern or a junior dev, you still get to work on cool projects. The work culture (at least at companies in SF) is usually great, and it pays well too. If it was me, I would do it in a heartbeat since you can literally change your entire life. But just remember that its not 3 months of learning, its more like 3 months + 3 more years.
Yeah, I did talk to Gavin. He said there wasn't enough people from our area going to do that. Still, I got here in one piece. My wallet is gonna leave here in a thousand little pieces however...
Shit. That is a hell of a find. I've never used Ruby's bsearch but that does appear to be pretty broken. I'd have to get into the code to see how Ruby 2.0 implements binary search but I'd imagine that the bug has something to do with the fact that it's handling blocks so deciding which direction to go can be tricky. Still, this feels like a really simple case that Ruby that should have been tested before making its way into canonical.
Seems that it shouldn't be tricky based on the comparing operator. &lt; and &gt; should tell it which half of the array to discard. It appears that currently it's always discarding the lower half.
I think you may misunderstand the purpose of binary search. &gt; Let’s try to find the first guy less than 7. Should be 0, right? If I understand this question correctly, in a sorted array, you only have to make one comparison - if the first element is &gt;= 7, the answer is nil, otherwise it's the first element - note that this does not require binary search. If you want it the other way around, reverse your search. In general, finding the "min" or "max" in an array is trivial if the array is sorted. This is not what binary search is used for. &gt; Okay, this works nicely. But what if I set the condition to be the last guy less than 7? That should be 4, the third element of the array. Reverse your array, binary search. Use binary search when you're not sure where in a list an element shows up or if it shows up at all. This is how database indexes work - you keep a sorted list of whatever field you're indexing so instead of having to visit each row, you can binary search on the sorted list. Ruby's `#bsearch` appears to work as described in the docs so I'm not really sure what the beef is.
Is this worth the buy? Always down to buy a good boo on ruby
depends what you are looking for. This book really delves ino the nitty gritty of how Ruby works as a language, e.g. how your code is parsed, how your code gets executed on the VM and all the internal data structures required for this. This not a book about programming Ruby in so much as it is about how Ruby was programmed.
Here you go: https://github.com/bbatsov/ruby-style-guide
Don't do much ruby but I found [this guide](https://github.com/bbatsov/ruby-style-guide) helpful. One of the bigger things I'd advise is going with 2 spaces for indents. Ruby is a very terse and readable language. 4 spaces works for C style languages, but ruby is generally better off with 2.
My biggest doubt is about this bit of code which is supposed to test if any two elements in the array of integers sum to n. def sum_to_n?(array,n) array.each do |x| array.each do |y| return true if x+y == n end end return false end Is there any more elegant way to do this ?
check out other enumerable methods like 'any?'
Something like this? array.combination(2).any? { |a| a[0] + a[1] == n } I didn't read the specification, so maybe you have to check also the sum of an element with itself. 
I too prefer 2 spaces for ruby
Alright I had a post about what to change, but I think you should figure it out :) The docs for Array are incomplete, you also need to look at the docs for Enumerable. http://ruby-doc.org/core-2.0.0/Enumerable.html Hint: Look at detect and include? there **is** a better (faster) way to search for what you need. Next this kind of code is considered bad form if array.empty? return true if n == 0 return false end This can be made one readable line. Remember n == 0 returns a true/false value. So that can be changed to return n == 0 if array.empty? If you need more help, I'll be more then happy to clarify and guide you. Note: This function, as written, will return true if you call sum_to_n?([2], 4)
I hate returns. The style guide also says to avoid them. Here is an example: def sum(array) if array.empty? 0 else array.inject{|sum,x| sum + x } end end or you could def sum(array) return 0 if array.empty? array.inject{|sum,x| sum + x } end or even better IMO def sum(array = [0]) array.inject{ |sum,x| sum + x } end 
In homework 3 you can use parallel assignment: @isbn, @price = isbn, price Also, the price_as_string function could just be: def price_as_string; '$%.2f' % @price end 
I'm with you. This guy is bitching about a binary search that already provides more functionality than it needs to because it doesn't provide enough. If he wants a complex search, he should either look elsewhere or write it himself, he is a qualified programmer right? 
The last part does not really work. If you pass in an empty array it returns nil instead of 0.
Good effort! 
Hell yeah! https://github.com/mcandre/dotfiles/blob/master/.emacs#L41-L92
Good catch! try def sum(array) array.inject(0) {|sum,x| sum + x} end
First can be simplified to def sum array array.reduce 0, &amp;:+ end Second to def max_2_sum array array.sort.last(2).reduce(0, &amp;:+) end Third to def sum_to_n? array, n return true if array.empty? and n == 0 array.repeated_combination(2).map{|i,j| i + j}.include? n end
Looked through the code and (except for the returns) it looks good. Remember that the last the last evaluated statement will be returned. So, you can create an if-else to take all the returns out. Also, the rubocop gem and the flog gem might interest you. 
Semantics are slightly different, and using `:method` over `&amp;:method` only works with some methods.
"What are all these .rb files slowing everything down??"
You can actually leave off the first 0 too, so just `array.reduce(:+)` will work. The reason for this is that Enumerable#reduce will use the first element in the array as the accumulator if none is specified. From the docs: If you do not explicitly specify an initial value for memo, then the first element of collection is used as the initial value of memo.
No, you can't. &gt; [].reduce(:+) =&gt; nil Expected: `0`
For **binary_multiple_of_4?(s)**, I'd want to be sure that "0" is not considered a string representation of a multiple of 4 in your application. The usual definition is that zero is considered a multiple, but that may not be the rule for your particular exercise. Also, did you remember to actually check the string for validity? I tried this against your code: irb(main):012:0&gt; binary_multiple_of_4?('10040') =&gt; true The reason this returns true is that your call to **s.to_i(2)** goes until it finds a non-compliant character (in this case, the '4') and then simply stops and returns the value. So **int** gets set just as it would if you had called **'100'.to_i(2)**, which IS a multiple of 4. Your idea of converting it an integer and using modulo checking is just fine, and is quite readable. Here's another approach that includes validity checking of the string, and works with string-based operations: def binary_multiple_of_4?(s) return false if s.empty? || s =~ /[^01]/ (s == '0') || s.end_with?('00') end And if you don't care about "0" being counted as true: def binary_multiple_of_4?(s) return false if s.empty? || s =~ /[^01]/ s.end_with?('00') end 
&gt; Is there any more elegant way to do this ? Almost always there is. array.product(array).any? { |x, y| x + y == n }
This misses the point of strong parameters entirely! Why even bother using it! You automatically accepting every field! This is seriously dangerous do not use!
So. Do we still need to make a plan?
+1 to the recommendation of using rubocop. It would help you get used to the "ruby way" pretty quickly. Some of it may seem arbitrary but keep in mind that these are conventions that have been carved away through years of the community refining what's the "right" way. OP, also keep in mind - "right" is subjective. However, when you're jumping into others' code, or vice versa, the less you have to think about how or why someone wrote it THIS way versus THAT way could make a hell of a difference.
I follow, and love, the thoughtbot style guide - https://github.com/thoughtbot/guides/tree/master/style But, as has been mentioned, the following style guide is a more widely accepted across the ruby community - https://github.com/bbatsov/ruby-style-guide
How about just: def sum(array) array.reduce(:+) || 0 end 
I prefer tabs. Then anyone editing the code can set their desired tab width instead of forcing their preference on you.
space more popular than tab for indentation? i think i'm either reading it wrong or else the stats are out of whack and must be taking in to account minified files or something which would skew them a great deal...
What? No, exactly the opposite. Everyone uses spaces.
Kyle Drake wrote a gem for interfacing to the bitcoin API: https://github.com/kyledrake/silkroad
What do you want out of it? Depending on what you're wanting to do with the results of the match, there may be different solutions. You can trivially iterate one array and use its index to compare against the matching value from the other array: a1.each_with_index {|v, i| v == a2[i] } If you want to collect the matches: a1.map.with_index {|v, i| v == a2[i] } Or more cleverly: a1.zip(a2).map {|x, y| x == y }
Spaces are a common convention. What Editor do you use?
I'm shocked how many of you savages are not using parentheses around arguments in def. Shocked... You people need to learn some civility, we aren't cave men anymore...
You are a gentleman and a scholar, thank you!
everyone I've ever worked with on Ruby has told me to use spaces over tabs.
I just hit the tab button in my IDE... is that not the same thing as tabs?
Just use signed_form, it allows whatever fields you rendered in your form. https://github.com/erichmenge/signed_form
It probably converts it to set number of spaces, not an actual tab character.
I would be interested to see how many projects use assignment in conditional like if user = User.find(params[:id]) puts "hey there, #{user.name}" else puts "who dat?" end instead of user = User.find(params[:id]) if user ... else ... end Many folks are horrified about the first convention, in my opinion it's quite common and I've never had any confusion if it's an accidental typo for ==. Speaking of ==, I'd like to see the percentage of x.eql?(10) vs x == 10 I use the first one. However I use x &gt; 10, I don't think there even is something like x.gt?(10).
Ah of course, overlooked that
Please look at the latest version. The generator serializes a graph of your model attributes to yaml. This structure is loaded into a class variable during Rails initialization. You can edit the generated file to remove the undesired attributes. So when your app loads, the undesired attributes will not be allowed.
My guess is because do/end and {} create closures, and methods are not (really) closures.
I can't believe that many people don't use whitespace around operators. It makes the code so much easier to read, and is just more aesthetically pleasing in my opinion. It's the same reason you put a space after commas and periods in sentences.
I'm overhauling my backup setup at work. Everything's now on LVM ( on top of a mirrored RAID ) so I can snapshot it and use rdiff-backup to save delta-copied versions.
I thought that at first too but looking at the Readme that's not what it does.
&gt; Note: This function, as written, will return true if you call sum_to_n?([2], 4) Given the question doesn't specify behaviour for single-element arrays, and subsequently does not specify whether 'any' must refer to distinct elements, I'd say that could reasonably argued to be correct behaviour. `2` and `2` are two [non-distinct] elements of the array [2]. If the problem was better specified I'd probably argue differently, but it's not.
I'm pretty sure the parser is bugged. foo = :bar No space after colon... And for defs def foo end No parentheses in def ... 
I prefer 2 spaces for everything.
Yeah, I regularly take jobs on Elance/Odesk. Here's the most important tip: personalize your bid, ask some questions about the job, give a basic outline on how you'd do it. This will set you apart from the horde of indian 'agencies' that copy-paste their bids on all ads. 
Came here to say this. I've also had good luck with odesk. You won't compete on price with most of the overseas contractors, but buyers who've had more than one posting will understand that quality (and English as a first language) costs more than $15/hr
You must be some kind of superman or your application is quite simple if you can go from rails 2 to 4 in a weekend. We have planned to have a feature freeze of one month to do that by multiple developers. 1.8.7 to 2.0 isn't that hard if you don't use a lot of gems that are not compatible or have changed alot from the 1.8.7 compatible version. (we have plenty.) https://www.youtube.com/watch?v=BX-xcaJH6AA Here's a theme song for your weekend.
Oh I get it. Yaml map. Yea still bad idea. This should be per controller not per model.
Hi there ! In my company, I took care of the migration from custom rails2.3 fork with ruby 1.9/2.0 to Rails4. The apps I migrated are huuuge and several years old, I'm talking about ~150k lines of ruby code. It lasted ~ 4.5 months. Here are a few steps I did that may help you : - First, I wanted the app to boot a rails console, I updated the Gemfile to include rails4, ran bundle install, and resolved some gem conflicts. - At that point, a rails console was obviously not working, I commented out all initializers - Then I launched rails console several times, each time fixing what prevented to boot. - Once I got a rails console (several hours, hurray !), I wanted to focus on models firsts. Hopefully, the app is tested very well, but unfortunately, with rspec 1. So my first goal was to pass model specs, each time fixing what was wring either with rspec or the actual app's code. I also had some fun migrating former rails plugins (located in vendor/plugins). I found / made gem replacements for some of them, or manually loaded those who were too dependent. Model specs were not that hard to pass, as it was mostly ruby logic inside them. ActiveRecord has changed quite a bit, but with the deprecated_finder gem, it was okay though I replaced the old finders with the "new" chained api. Mailers had to be entirely rewritten, ActionMailer's api has completely changed. Then there were controller specs, biggest issue was strong_parameters. Finally, integration specs were the trickiest, erb views have changed (&lt;%= instead of &lt;%) so some blocks weren't showing up, and html safety introduced in rails 3 was a huge pain too. Meanwhile, I had to merge the work of the other devs of the team, until the feature freeze. We pushed to production gradually and we finished not that long ago, it was very stressful but also great to know we're now up to date. If you got some questions, feel free to ask :) Cheers
A week? Again - either your apps are very simple, or you have no idea what you're doing. If this app has been under active development since the Rails 2.x days, the upgrade path is a months-long process. But it doesn't really require a "stop the world" step. Other developers can probably work during the upgrade. I would approach the upgrade as several independent projects: * Upgrade Ruby to 1.9.latest - this should be fairly simple. Get it out there in production, let it shake out for at least a week. * Upgrade Rails to 3.0.latest - this is the biggest step in the whole process, and the one with the most compatibility problems. If you can shut down new features during this time, that's great. If not, merge their branches into yours early and often. Expect to replace at least one major gem completely, and upgrade most of the rest. At this point, your app will start warning about deprecated APIs, but they will still work. Ignore those warnings for now. Get a working rails3 version of your app into master and on production as quickly as possible. * Fix the deprecation warnings, and upgrade to Rails 3.1.latest. This will take some work, as you rewrite all of your ActiveRecord stuff. * Upgrade Ruby to 2.0.latest. This should be pretty painless. * Upgrade to Rails 3.2.latest. This should be pretty painless. * Upgrade to Rails 4.
This is the correct answer. I went through this very same process about a year ago with a large app, and it was a couple months and a half-dozen devs. Hell we're still 2.0/3.2. 
I did 1.8.6 - 1.1.6 to 2.0.0 - 4.0 in a weekend. It's not that hard. along with several dozen plugins that doesn't exist anymore.
&gt; It's a slightly ambitious I'd say "irresponsible", if your app is of any decent size. Take it one step at a time - at least go to 1.9.3/3.2.x first, have it running in production for a few weeks, then go to 2.0/4.0. I remember upgrading our (large then, but even larger now) 2.3 app to 3.x and it was a complete nightmare. (We're not planning on going to 4.0 any time soon)
It's parentheses for methods **without** arguments.
It took me about a week (i.e. a little under 40 hours) to upgrade a medium sized app (including payments, emails, etc) from 1.8.7/2.something to 2.0.0/3.2. Might as well take the final step to 4.0 after new layout is implemented. It's certainly doable, just have a good test-suite ;)
Parenthesis for methods without arguments is a thing yes, but that's not what we are talking about. This is what we mean by *not* using parentheses around arguments, try it and see if you like it, you barbarian: def some_method arg1, arg2 # do something... end 
That's how we approached the 1.8.6/2.x to 1.9.3/3.x move - Ruby first, then Rails. I would add that it's possible to break those parts into still smaller ones that you can get in before you move. There are often changes that are backwards compatible and it's worth getting them in to production before you flick the switch. Two examples that spring to mind: Ruby 1.8-1.9: FasterCSV was adopted to just be CSV in 1.9. So we added an initializer that contained something like: if RUBY_VERSION == "1.8.7" &amp;&amp; defined?(FasterCSV) CSV = FasterCSV elsif RUBY_VERSION == "1.9.3" require 'csv' end Then you can change everywhere you use the FasterCSV constant to be CSV and get that code into production independently. An example for Rails 2-3 would be using the https://github.com/rails/rails_xss plugin in your rails 2 app. That means you can make the changes to your templates to use html_safe properly separately from everything else.
one company != community Companies make decisions like this all the time. It costs more to be platform neutral. If it isn't a requirement, why waste time and effort on it? In the community, some gems are platform specific and some aren't. We shouldn't have to program to the least common denominator all the time. If you don't like your company's direction, either work with them to change it or find a new company.
To be fair, 2.3 to 3 (and then asset pipeline in 3.1) is a much bigger step than 3.x to 4 (tho, who knows - what with that order() AREL bug they fixed… that would've been hell to find).
Be aware that `==` and `eql?` are not the same thing.
"Phasing out" implies there ever were Ruby users on Windows. Perhaps you're looking for "freezing out" or "excluding." More seriously, it's not nearly so much lack of consciousness or lack of effort as simple technical issues. Windows itself has issues with POSIX compliance. MinGW and Cygwin have weird quirks. Even for things that can/should work, eccentricities of Windows and/or MinGW/Cygwin make working with MinGW or Cygwin a pain. So nobody uses it, so nobody develops on it, so nobody tests against it, so... If you need to develop with Ruby or any other POSIX-targeted tool on Windows, just give in and run a Linux VM. Your life will be immensely easier, and in the year of our lord 2013, when it costs $0 to do so, there's no reason your development environment shouldn't be identical to your deployment environment.
So much this. I don't think I have ever heard of anyone explicitly developing a ruby application to be platform neutral nor do I hear people refer to ruby as being a write once run anywhere platform. More projects are probably platform specific than they are platform neutral. I would liken this to someone expecting .NET devs to write code that would run under mono when there is no explicit requirement to do so.
Well my experience involves multiple companies making it difficult to be a Windows Ruby developer, hence my question about the community at large. Your advice is exactly right, and right now I'm deciding whether I need to switch to Linux, or if I should work with the company to make Windows a reasonable option. Ruby is a platform independent language by design. But is this a practically unnecessary design feature of Ruby? Would I be fighting against the momentum of the industry by holding on to that design goal?
Doing any kind of Ruby work on windows is an unmitigated pain in the ass. Gem breakage, CRLF nonsense, etc etc etc. Unless you're developing Windows apps, using Windows as an IDE is just painful. There's a reason I dual boot..
Does the final product need to run on Windows?
windows is phasing out windows developers
Nope. It's just nice to be able to use a Windows machine for development.
I personally have never heard of a rubyist using windows. I know there has been discussion around the importance of supporting it, but in reality you will certainly have a bad time if you are not on a *nix box. I don't think this is a bad thing. I don't hear any Mac or Linux users complaining .net doesn't work on their platform. IMO, this isn't a battle worth fighting. 
if you mean "microsoft is phasing out windows developers", i concur. before i joined the Ruby community, I wanted to join the C# community because I LOVE that language (for very different reasons than why I love Ruby; I love lots of things). Anywhoo, yeah, it was basically impossible to find a job as a C# developer. I went straight to the Microsoft website and started asking MS reps for information on how I could become a developer of one of their enterprise systems that required that you hire a C# developer to use it. Basically, they blew me off, like they are not setup to recruit new developers. I couldn't find C# work anywhere except for really boring companies that do nothing but tack on bloated code on top of bloated code. I like Windows. I'm productive under Windows. The gatekeeper of Windows is a deadbeat, but that's irrelevant to me. After reading some of the comments in this thread, maybe this is the moment that will prompt me to bury Windows forever. I don't like the idea of dual-boot or VM for the same reason I don't mix plaid with stripes. If the Ruby community is rejecting my choice of using a Windows station, I am starting to hear "Either you are a Microsoft developer or a Ruby developer".
While it may be nice, you're going to be fighting an uphill battle. The community generally is all on OSX or some type of Linux distribution. At least if you have a mixed shop of Linux and OSX developer platforms you can get some cross-over in regards to trouble shooting a local environment. With Windows, you will typically be on your own to figure some stuff out (and your online support will be harder to find).
There's really no such thing as a truly platform-independent language. Inevitably, the community gravitates toward one side or the other. If you want to code in C#/.NET you'll have a much nicer experience on Windows. If, however, you want to use ruby, POSIX-based OSes are where it's happening. If you insist on coding C# on POSIX or ruby on Windows, there's a place for you but you're definitely going to be blazing your own trail.
That's a good question. I started to enter an answer, but this thread will take a huge left turn if we start picking on the reasons I prefer Windows. Let me politely leave one platform absent from conversation, and say that I'm willing to consider switching to Linux. But installing software and maintaining the box is just so cumbersome and my day quickly fills up with mundane IT tasks whenever I upgrade anything. I know this well because of course we use Linux in production. As for the Linux GUI, it will be a big learning curve since the days I did my due diligance on Gnome vs KDE. There was a time where I tried to switch everything in my life to Linux. But when I ordered a Linux server, I signed a service contract that was emailed to me... in Microsoft Word format, requiring... Windows. 
No. Are you a sheep? Edit: Troll=somebody who blindly disagrees with the majority Sheep=somebody who blindly agrees with the majority 
Oh, I just saw your username. That's a novelty comment. OK hahaha!
Ok, I'm blind for using a POSIX-compatible development system. Can you please enlighten me about the advantages of using Windows as a development platform? Three would suffice.
In all seriousness, I don't think I can make you understand my OS preferences any more than I can make you understand my sexual preferences. I'm not gonna debate other people's preferences.
Look into Vagrant. Develop on your Windows machine, execute what you develop within a headless Linux VM. [Developing with Vagrant and Git on a Windows box](http://www.enrise.com/2012/12/git-and-vagrant-in-a-windows-environment/) [Developing Modern Web Applications on Windows With Vagrant](http://www.habdas.org/developing-modern-web-applications-on-windows-vagrant/) [Developing Ruby on Rails in Windows](http://manuel.manuelles.nl/blog/2013/07/23/developing-ruby-on-rails-on-windows/) EDIT: I very much dislike Windows, but to the people downvoting the post that this is in reply to, just because it's someone saying they like Windows: You are assholes. Leave.
you misunderstood the OP is looking for the index of the matches not if the entirety of both arrays match.
This is probably the best suggestion here. I develop ruby on Linux (using a VM if I'm on windows) because it just makes sense to me that development and production environments should match (plus I love Linux). But if you'd prefer to stick with windows dev tools then vagrant might be just the happy medium you need.
The .contains? in the sum_to_n? method should be .include? instead.
Ah, thanks. I have `#include?` aliased to `#contains?` in my irbrc. 
Thank you kind sir. On multiple levels, thx! I'm gonna look into Vagrant.
OK, I like Windows 8.1. The start menu was too small before, and now it takes up the whole screen. I love it. When I hit the Start button, I seriously want to see nothing more than an entire screen full of my apps, arranged the way I like. Yeah, you can do that by showing the desktop and having all your apps arranged on the desktop, but then all of the states of all of the windows get lost. I like Office for Windows because I use features that 99% of Word and Excel users don't know about, including advanced layout. Office for Mac and Open Office are all very "light" versions of Office for Windows. I like the selection of shareware apps, even if nobody calls it that anymore. For example, there's a good Hex editor that's only on Windows. There's a good window manager that lets me snap windows to certain positions. I like hotkeys. Other GUI's make me have to reach for the mouse a lot more. I hate taking my hand off the keyboard and moving my hand over to the mouse and then moving the mouse to one of 2 options on the screen that I must click on, when I could instead be using one of the 101 keys under my fingers to represent those 2 options. I am a ninja at using the arrow keys and the HOME and END keys to move the text cursor onto the right line position. (In fact I'm such a keyboard nazi that I only use the dvorak layout.) I like having a display resolution of 2560 x 1600. (The best Mac I know of is 2560x1440.) I have no problem with Mac or Linux. I tried to move everything in my life to Linux 12 years ago, but the timing wasn't quite right then. I bought a Mac G5 when it was brand new, but I always still had a need for something that only Windows could do, even if only 5% of the time.. and I found that having 2 operating systems is a lot less productive than having 1. I have written killer Bash scripts, and I love the Unix command line. But now that Bash is available for Windows, I'm no longer missing the one big thing that I really like about Unix. In conclusion: The differences between the big 3 operating systems are trivial. They are all equally capable of getting any job done. In fact, this is the worst time in history for anybody to get into any kind of a debate about which OS is "better". That is why I am questioning the need for a cross-platform language to get typecast as a Unix language. 
I did the upgrade from Rails 2.3-3.0 at my internship two summers ago. Took probably a bit more than a months worth of work doing that, so it's not something to be taken lightly. At this point, I'm just echoing other comments, but if the app is of any reasonable size, and has been maintained similar to how many rails-2.3 apps have, there will be a lot of work that needs to be put into it.
I'm fairly convinced Linux does all of those things better. And yes, it does matter, because you were the one who wanted to put in extra work to be able to develop on Windows. If you actually think the differences are trivial, you wouldn't care. 
Second the suggestion above. If you prefer developing in Windows Vagrant is an easy way to have the best of both worlds. Stay in Windows and still have access to a Linux shell to run code, download gems, etc. I have been using this setup for a few months now and it's been great.
Develop in the env you host in dude... so much easier.
One word. Jruby.
This is a really dumb assumption (although, I've been there asking similar questions)... developing in an environment different from what you host in is always going to create problems. It has nothing to do with Ruby, Window or Mac or Linux. You wouldn't create an iOS app in Windows because it'd be a huge p.i.t.a. and you wouldn't build an android app using Xcode. Develop in/for the environment you're going to host in. If you do this, you'll have 99 problems, but env ain't gonna be one.
If you use Putty ( I am not sure what else you would use on Windows ), Vagrant uses the same ssh key which can be found at `c:\Users\&lt;your account&gt;\.vagrant.d\insecure_private_key` Additionally, building your VagrantFile ( outline recipe for building a virtualbox instance) with http://docs.vagrantup.com/v2/networking/private_network.html and giving names to your instances in `\windows\system32\drivers\etc\hosts` like `mybox.local` will allow you to easily ssh to `vagrant@mybox.local` or browse to running http instances @ `http://mybox.local:8080/`
Majority of Ruby code is developed and runs on Linux or BSD, so developers tend to focus on those two platforms. To make things more annoying, many (MRI) features are simply not available on Windows (ex: Open3), forcing the developer to add extra code/dependencies ([win32-open3](https://rubygems.org/gems/win32-open3)) just for Windows support. Might want to checkout [JRuby](http://jruby.org/) or the old [IronRuby](http://ironruby.net/) project.
Even though the specs were very complete and relevant, when 100% of the specs passed, I still had a lot of work to do, some pieces were untested. Tons of erb problem were undetected even by the integration specs. The work of other devs was a pain to merge, I tried to do it once a week. Depending on what they worked on the fixes went from very simple (renaming some functions ) to quite complex (refactor a whole block of code). Tons of time I had to check and compare with the old rails2 version that my behavior was correct and I didn't add any bugs after the merges :)
&gt; "Phasing out" implies there ever were Ruby users on Windows So what you're trying to tell me is that there are no ruby users on windows? The OP would tend to invalidate that sentiment.
The "a significant proportion of" in that sentence is clearly implied.
Array#bsearch have two modes find-minimal (which is what happens when you return true/false) and find-any: In find-any mode (this behaves like libc's bsearch(3)), the block must return a number, and there must be two indices i and j (0 &lt;= i &lt;= j &lt;= ary.size) so that: * the block returns a positive number for ary[k] if 0 &lt;= k &lt; i, * the block returns zero for ary[k] if i &lt;= k &lt; j, and * the block returns a negative number for ary[k] if j &lt;= k &lt; ary.size. Under this condition, this method returns any element whose index is within i...j. If i is equal to j (i.e., there is no element that satisfies the block), this method returns nil. ary = [0, 4, 7, 10, 12] # try to find v such that 4 &lt;= v &lt; 8 ary.bsearch {|x| 1 - x / 4 } #=&gt; 4 or 7 # try to find v such that 8 &lt;= v &lt; 10 ary.bsearch {|x| 4 - x / 2 } #=&gt; nil
That's interesting, thanks! I always assumed the view code would be the simplest, as it normally has little logic in it. By what you said though, changing behaviour is hard to catch, as no one really writes specs to test every little thing appears on the page. Hopefully the upgrade to rails 5 will be easier whenever it comes out :)
Java 7 is almost there in platform independence and nice handling of platform specifics, but just the other day I had to deal with a bug where a unit test failed on Windows because it was wrongly coded to expect line.separator (\r\n on windows) instead of \n (as this was network code it always produced \n).
So, how's it going? 
JRuby is great and all, but it doesn't solve OP's team interoperability problems unless the entire team switched to JRuby, and even then it is still not a silver bullet, JRuby has drawbacks too (slower startup and warm up times, larger memory requirements) There are many gems that utilize a C library that would have to be replaced with a JVM equivalent or they're untested on JRuby/Windows and will run into the same common POSIX problems all that afflict most cross-platform code. OP's example gem, Railroady, would encounter the *exact* same issue in JRuby/Windows as it did in CRuby/Windows too, because the problem isn't really one of Ruby compatibility, it's that the gem is a wrapper around another application (graphviz) that leans also towards treating Windows as a second class citizens (and understandably so). Plus just flipping the JRuby switch on the development side simply isn't enough, deploying JRuby apps are typically significantly different than CRuby apps. At the very minimum, you'd have to add another step to accommodate the single JRuby developer to double check their code worked when ported back to CRuby, and the JRuby dev would have a unique and different (and thus error prone) set of deployment steps. Porting a nontrivial app to JRuby would be a pretty significant decision for a company of more than 1 person. Personally, I think OP just needs to bite the bullet and conform the the job requirements or find better fitting employment.
It's way easier to maintain a developer environment on Linux. That's what this whole thread is about after all, the fact that developing on Windows is a pain. Personally I actually develop software for Windows, but treat it like an embedded target and do all the development in Linux. :P
Just reading the comments here is enough to state that - yes, Ruby community does not give a damn about people working on Windows. It becomes obvious with more and more "just run VM with linux" answers appearing. But there are developers that work on Windows, myself included. When I first came to my current job and I heard that the software targets only Windows so development is done on Windows, I was kinda scared. But months passed and I just got used to it. Saying that Windows has some intrinsic flaws that make development on it impossible is just arrogant bullshit. Of course, setting up some tools is harder than just "apt-get install git" but they work too and nowadays with DevKit etc. there is no reason to exclude Windows as the target platform for gems. Unfortunately, many people still do it. Things like simply adding something to regexp, like the OP said, are not done and pull requests with such changes are frequently ignored, because "who uses windows?". The perfect example is sass-rails gem where all files are referred with relative path but you cannot refer everything in Windows this way. Change to absolute path would fix it but no one does this, because "meh, use linux". Well, I can't...
Now you have. For big stuff that requires *nix only gems I'll use vagrant, but for everything else, windows + rubyinstaller + devkit + git bash (basically cygwin) works just fine. Keep in mind this is my home machine and I like to be able to play video games. Mac and linux both SUCK for game support. No, I won't dual boot because vagrant gives me everything I would gain from dual booting.
Actually read what he said. What he clearly implied is that "phasing out" couldn't be used because nobody uses ruby on windows which is bullshit.
I certainly don't pledge allegiance to one platform over another, but I do feel pretty strongly that using Windows for a (Ruby) dev machine is more trouble than it is worth I could see using Vagrant either all the time, or none of the time... but switching between environments based on dependencies just sounds like a pain. I'm not saying that it isn't a feasible solution, but as someone who does this all day every day, I want it to be as frictionless as possible. I don't think it is an unfair assumption to say most people that do Ruby full-time have enough income to have nearly any setup they desire. Why not have a dedicated box for gaming, and a box for serious work? I am not a gamer, but I use OS X for my "serious" work, and a separate Linux box for my home entertainment system. Not trying to prove you wrong, just sharing my thoughts on the subject :)
I'm into form objects too. Currently we use combination of ActiveModel and Virtus(for automatic type casting), but we copy attributes to actual models "by hand", and validations aren't very clean. Something could be done about it.
This should be the top comment. The OP mentioned "Unix developers" possibly excluding "Windows developers". I take that to mean that the environment is Unix but there could be a dev who uses Windows join the team. &gt; Develop in the env you host in dude... so much easier. If people do this, it is a non-issue.
Real link: http://jeromedalbert.com/dead-simple-file-handling-in-ruby/
Why not configuring development enviroment(s) in virtual machine(s) instead? Each vm can have installed the development tools you need, and even be configured to be as similar as possible to your production/target environment - maybe you can have other ones configured as proper test machines. This way you can easily migrate them as you need on any major os able to run them - OSX, Windows, Linux - and you can configure the host system as you need masking most of systemistic problems to the virtual machines, if you are more proficient in the host os for that sort of things. In the long run the ability to keep separated the machine that is most convenient to buy from the environment(s) you need to support, may be a big advantage.
Hey man, I actually just posted about something similar today (http://www.reddit.com/r/ruby/comments/1qbiwr/any_form_object_fans_out_there_who_might_want_to/). I've written another form library that I'm planning to release as a gem. Would you be keen to join forces? My implementation is a bit different than yours, but I think that they aim to solve the same problem.
&gt; nobody uses ruby on windows Yes, *colloquially* speaking. When you say "nobody does X" you may mean *literally* nobody does it, or you may be employing hyperbole to imply that *very few people* do X. As in, the GP was arguing that the overwhelming majority of Ruby developers use Linux or OSX, so the proportion of people who develop Ruby on Windows is basically negligible. The assertion that there are *literally* no Windows Ruby programmers in the entire world is clearly and self-evidently ridiculous, so most people were able to do the relevant mental translation for themselves.
I will take a look, definitely.
I've used form objects before that have cascading validation of real models usually using nested attributes and a few other fun clever hacks. They even have transaction rollbacks to allow for SQL validations. Is is pretty simple to just use active model. The harder and annoying part is setting up strong parameters. This is where some automation might be appreciated.
So I feel like strong parameters aren't needed if you just loop through accessor and set each attribute. Maybe I'm thinking about that incorrectly though. I'll post the gem back here in the next few days, and maybe you can have a look?
Yeah, that would definitely require a bit more work. I was mainly concerned in just making sure that my objects wouldn't allow the setting of a protected variable. One question - do you think strong parameters is a form object responsibility, or a controller responsibility? I could see it going either way. My main argument for "controller responsibility" would be that some users might only use form objects for complex forms, and use AR models in forms in other parts of the application. In that case, Strong Parameters should probably live in the controller, right?
I don't think its all that clear cut. strong_parameters is all about ensuring the object or graph you want to interact with has been created safely, with only the appropriate data. In an app of the sort that often needs form-objects, you ideally want to just feed the params hash into the form-object and let it take care of ensuring everything, which conceptually puts the strong-params in there, except it doesn't work right. We have some highly interactive pages, and have done this in controller a couple times (document_form is a 200 line form model handling the interaction between 4 different models) #documents_controller.rb def create ... @document = DocumentForm.new(create_document_form_params).create_document ... end def create_document_form_params hsh = {} hsh[:document] = params.require(:document).permit(:name, :description, :approval, :template_id, :cover_id) hsh[:included_sections] = params[:included_sections] hsh[:approvals] = params[:approvals] hsh[:project_id] = params[:project_id] hsh[:current_user] = current_user hsh end def update_document_form_params create_document_form_params.merge(document_id: params[:id]) end 
It's hard to say without seeing the code and knowing what version of Ruby it is, but it could be any number of things related to the method cache or maybe the Google connection getting re-initialized more frequently because of the context of the method or something.
Alright, let's break this down: i.slice(vowel..-1) + i[0,vowel] + "ay" let i="hello" i.slice(vowel..-1) This will take "hello" and slice it at the first vowel ('e') and continue to the last character (a negative at the end of the range means from the end; you can't have -0, so they use a 1 index from the end). So, now we have: 'llo' + i[0,vowel] + "ay" Now, rather than splitting i, we will take the indices of i. (This is a little bit more "old-school" C style, if you will--basically, we say we are taking the characters in i from the 0th position to the position of the first vowel. So, now we have: 'llo' + 'h' + 'ay' and, putting it together we get: 'llohay' as the returned value. ---- i.gsub(/[aeiou].*$/, '').size the regex matches any vowel through the end of the word. So, with the example of "hello" the regex will first match: "ello" and then gsubs it with an empty string, leaving you with just "h" and a size of 1. Because the vowel position is in a 0 based array, while the size is a 1 based position, this takes care of a possible off-by-one error you may have. hope that helped!
Hrm, that's an interesting suggestion. Currently, I use a different form object for my "create" and "update" actions if there's a difference between them. And often one just inherets from the other. I'm not sure I want my forms to be aware that they tie to a controller action. That seems a bit like bleeding of concerns; why should the form object care if it's being called by a controller action, a SOAP api, or the console? That all said, I'm open to the pattern if you can make it a bit more clear to me. LIke I said, I should have something up soon to post back here so y'all can really play with it.
Yea I haven't played with form objects in a while. Most of my projects recently have been pretty small. Definitely give me a heads up when you are done with it.
This does help some, thank you!
Of course! What I wanted to achieve with this one is, first of all, to collect the knowledge I saw in the different posts, about how to make a Form Object. The other thing I wanted was to keep an interface that resembled ActiveRecord, so it would be familiar for users. Can you show me your code / your design ideas?
&gt; I like having a display resolution of 2560 x 1600. (The best Mac I know of is 2560x1440.) My 2010 mbp pushes my 2560x1600 monitor just fine. My 2012 macbook air (work laptop) does so too. I haven't tried but I'm sure my Mac mini htpc would too if I ever felt the need. A Mac pro damn sure will. As for trying Linux 12 years ago, first off [nailed it](http://www.reddit.com/r/ruby/comments/1q9btv/are_we_as_a_community_phasing_out_windows/cdamb1h). Secondly its a lot better than it used to be. As for widows being a better keyboard driven environment... I seriously don't know whst kind of crack pipe you've been smoking but Linux beats windows hands down here. You may be more comfortable with it now but really it's not even a competition. Shareware apps. Uh, what? You find Linux lacking in free development tools? 
the thing i find most disturbing about this thread is that the windows users feel that the community owes them the dubious honour of being able to write ruby on windows. why are people going to waste their precious time catering for your whimsical desire to work on windows when everyone else is sensible enough to install unix and be done? if you want to use windows, then suck it up.
He has to quit. People who dictate that every computer in their business run windows are hard headed and frankly stupid.
I've tried to use windows for ruby development - it borken! May I be frank? You're doing yourself a diservice by not moving over to *nix as your primary platform. There is a LOT of platform specific knowledge that is essental (IMO) to being productive as a ruby developer and I would look somewhat askew at someone who didn't use it as their primary platform... 
Try to jump to ruby-1.9.3, Rails 3.2.15 first(it can be pretty hard, make sure you have a good test coverage).. It will much easier to go to 2.0.0 after this. Then upgrade Rails version. Splitting it into 3 steps can make things easier. We have big enterprise application, and we jump from REE1.8.7 to ruby 2.0.0 through 1.9.3. It took for us about 6 monthes. But actually I did the work in 2 weekends, but our chef developers wan't rapid to merge my changes, so I had to synchronize all the repos. It was the biggest hell. Currently we use Rails3.2.15. It's the only version which I would recommend to use against ruby 2.0.0, the previous few releases were buggy.
Very nice! As it happens I *just last night* spent a few hours learning nokogiri. Where were you then, pal? Get higher on google search results somehow! BTW, it looks like your second "English:" paragraph was copypastad without revision.
Speaking from professional experience serving Ruby developers, you're looking at way less than 1% of the population developing or deploying on Windows. To the level that builds on my project could be broken on windows for weeks/months without a single complaint or bug report. That's basically nonexistent for most practical purposes.
Enjoyed both of your posts. I tend to just use accepts nested attributes, etc - but I'm thinking I may prefer this pattern instead
Oh god, nokogiri is the most amazing and frustrating thing to use. It's amazing. I've used it for sorting out download link for a web series for a friend (wish I could remember what it was called, that was a bunch of fun), and I wrote a general script to grab artist names and albums from collections (as well as some other stats) on a music website, so I could do some analysis on it and find what album was the "best" considering downloads, votes, comments, etc.
Thank you! If I notice spaces in code I'm working on, I change indentation to tabs and make sure my tabwidth is set to 2.
Nice, I was just looking for something like this to manage small deployment scripts. Thanks!
If you are new to scraping, [mechanize](http://mechanize.rubyforge.org/Mechanize.html) can make this a bit easier. Also if you need to scrape anything that requires javascript, [capybara](http://www.chadcf.com/blog/using-capybara-javascript-capable-replacement-mechanize) will do the job nicely although this is obviously not it's indended usage...
...and yet they exist, so it would be wise for him to stop speaking in absolutes.
I believe this is the flaw in your reasoning: &gt; Are developers so unconscious about Windows that they won't make even the most minimal effort of trying to make their gems Windows compatible? Here is what one would need to do *at a minimum* in order to properly support Windows in their Ruby software: 1. Buy a Windows license. (I already have one, because I am formerly a Windows developer ... but that is not true of everyone.) 1. Create a VM to run Windows tests on, including dealing with all the headache that you're complaining about above. 1. Run, if not every test pass, the vast majority of test passes twice ... once on POSIX and once on Windows. (Or, even worse, multiplying one's test matrix by two. Support MRI 1.9.x, 2.0.x and JRuby? Congratulations ... now there are *six* test passes to run ... does Travis support running tests on Windows?) 1. Become experts on *two completely different stacks* ... by the way, how does one build `nokogiri` on Windows? Is `libxml2` even available over there? So ... why is the Unix programmer the one expected to take on all this effort? Wouldn't it be more efficient for the Windows programmer, the acknowledged expert in the platform, to take on this burden? If you want to put a HEMI in your Mazda Miata, do you complain to Dodge (or whoever that makes HEMI engines) that they didn't make the "minimal effort of trying to make their engine Mazda-compatible"? I'm more than willing to accept pull requests or try to fix issues that others point out, but I don't feel that it is my burden to build a thermometer that works in Antarctica when I'm only going to be using it in Hawaii.
Profile both versions.
I love conditional assignment, but the [Excellent](https://github.com/simplabs/excellent) static analysis tool does not :-(
I was there, I just wasn't here! Hopefully you ended up getting everything sorted, but if not I'd be happy to help. The 2nd English: Paragraph is the same, its the XPath that's different, I was trying (poorly it seems) to show that accomplishing a task could be done in multiple ways.
Ain't workin' for me. Nothin' but a penguin.
What more do you need?!
Good point.
Your best marketing adjective is "understandable"? Reminds me of [this](http://neat.io/blog/diary-of-a-programmer-with-no-clue-about-marketing.html).
So, can the two things you linked to be used for testing with unit tests?
I've tried to sketch out a library to collect code in one place for all the sites I like to scrape.. Once reason scraping is reviled is that the code you need to write tends to be boring. For example, some websites have a similar structure. A page with one or more entries - so you have a page object with a "next page" method and and an entry object where most of the data of interest is stored. Duplicating the code for this from site to site gets old fast. The challenge for me is finding the best generalized pattern to implement for screen scraping. Table driven? State machine? It'd be a lot less tedious to feed nokogiri selectors, some navigation instructions and output targets (a graph?) for a particular web site to a scraping "engine" and get out ruby hashes for a db or any other sort of app. Anyone try something like this? Or this hopeless?
Those with no programming experience should not be programmers. Edit: Let me clarify that I do not agree with the basic premise of the domain name on which this article/screencast/whatever is hosted. Not just *anyone* can learn to code *well*, and there is no reason to encourage it. Should we have a site called everyonecanbeamechanicalengineer.com and teach people to build bridges with screencasts?
Unfortunately, not everyone can roll out of the womb with full knowledge of the field and an inflated sense of self worth...
Fortunately it is very easy to get some programming experience. I didn't say that one should be a *good* programmer to watch this screencast.
I guess, if the web is the only thing you are focusing on.
Well, the blog entry is very web-focused, yes. Would you like me to write a longer one that dives into other topics? I'm a little worried it might turn into a book, but if you would like me to focus on some specific topics, I'd love to do the legwork and do another write-up.
I'm sorry--how exactly does one gain experience if they do not try to be a programmer? We all started from nothing. Remember that.
I'd be interested to read. I am currently learning Ruby and really enjoy the language but I did notice this trend of people saying that Ruby is dying. I am just closing my eyes and focusing on learning it anyway. So yeah, I might learn a thing or two. I don't mind that Ruby is heavily focused on Rails and web but anything else is being rarely discussed. 
 attr_reader :time you have to set the ability to read the property edit: Check the answer here, which I think is very well explained http://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby
The people who say "ruby is dead" are too busy focusing on what the hot new thing is, and not spending enough time building an actual product. It's like the giant movement of people who've gone to Node.js as if that's some sort of fucking cure all to scaling issues. Don't just learn Rails, take some time and actually learn Ruby, the interpreter, optimize your code for the garbage collector, use Ruby for scripting and manipulating your OS, screen scraping, etc. Rails is great, but I've built more applications from scratch in Sinatra than I can count.
If only I could find work in it outside of silicon valley, I'd be more inclined to agree. I love ruby, but jobs are really hard to find.
I'd love to find a job anywhere. Everybody says ruby/rails jobs are everywhere. Not so much for an experienced junior Dev. 
I've been writing rails apps in my spare time with some pretty decent sided projects out in the wild since rails 1.2.3. Everyone seems to be too picky about having experience in every single gem and technology they use. Used memcache but not redis, nope. Deploy your stuff on linodes instead of aws... nope. Well, I learned all that stuff in a few days because I needed to, I've even written my own gem, pretty sure your stack is too complicated to pick up in a few days though.
The title is kind of sensational. Mongo has a lot of great things going for it, but holy crap creating relationships in it is a huge pain. The right tool for the right job.
There are more jobs than can be filled here in Boston. Go to the monthly ruby meetup, BostonRB, and you'll see a ton of job offers.
There are 4 ruby shops, all of which are hiring, where I live in St. George, UT. If you want to find a job, go to a ruby conf. The last several I went to had a "hiring" board where companies would list themselves.
I'm going to be a little critical here and say that this is far less convenient than Google for 2 reasons: 1. I have to spell everything correctly 2. The time taken for me to think about which API I want to make my search on could be spent typing it into Google. 
Agree it's definitely sensational. Genuine question though, what are the use cases in which Mongo which would make it the right tool for the right job as opposed to be Postgres or similar? I ask because having used it for over a year in a fairly large production application and several small ones, I struggle to think of any use case where I'd choose it again. That's not because it does anything particularly badly, rather than I've yet to come across anything that it does especially well which makes me think "yep, this is why I'm using this not Postgres". Don't want this to come across as another Mongo bashing exercise, genuinely interested to hear of applications people have found for it.
I am trying to get it to a point where it has the best of both worlds: Things like "accepts_nested_attributes" DO make sense inside the form, as I see it
Not to mention that you need to click on something. Mouse, lol.
Really? I've seen a lot advertised (never verified if they actually remain beyond just hearing about it, though) even over here and we're in Maryland. Just to clarify - are you saying you don't see many jobs, or you don't see many jobs within the salary requirements you're looking for?
Not sure if this will help you out or not, but apply anyway. I'd usually throw in a note on the cover letter with something to the tune of "Willing to be evaluated on site" so they know the lack of "time" isn't a lack of "experience". I know that when I see anything like that on the resumes coming in for us, they're the first ones to get calls. Though, it sounds mainly that the ones you're referring to are the typical "hey Mary from HR go find me a rails developer" and they come up with that using the usual experience-based template. Regardless, hope it helps. Sidenote: Feel free to drop me a PM if you want a 2nd pair of eyes on your resume. I'm not a professional when it comes to it, but I'll tell you what I (personally) would change (if anything) if I wanted to get my own attention. :)
Good. A whole lot of Ruby code is in production and making money. I get inquiries all the time at [AELOGICA](http://aelogica.com/) from people who want to use it to build new systems. Am looking to hire several new developers in the next couple months.
This is true but the community has matured tremendously in those few years. The culture of TDD and care for the code is making the Ruby community jump through the same hoops that the Java culture jumped through, but at an accelerated rate.
Come to NYC.
There was one at Rubyconf. In fact ... They added a second one. There is high demand for Ruby devs.
Agree with you whole heartedly. It could be worse, though. A few years ago I was turned down from an interview for a position where they required a masters degree in the field, of which it's not taught in university (they were relying heavily on the "or related field" of which I only have a bachelors). A year later, their CEO (if not him, best doppelganger I've ever seen that happened to also work in the same field) attended an industry conference where he paid to see me talk about what he would have hired me for. Always ends up interesting, whichever way you may go - heh.
That's interesting, is that using safe or unsafe writes? Can imagine in a scenario where unsafe writes are acceptable (e.g. logging/ analytics) that could be very attractive.
Unsafe writes for most stuff. It's a logging/analytics platform so it's not a big deal if occasionally a write gets lost during a crash (the crashes don't happen that often anyway). The important data that *must* persist (but that are also very small), e.g. customer records, are stored in a normal SQL database.
Cool! It's been a while since I looked at their actual API, but I guess this gets around the need to register an API, use a key, and do the whole OAuth dance. Nice.
I live in Buffalo, NY and there are more than a few ruby jobs to go around.
I would encourage you to benchmark any attempts at memoization...I have benchmarked a couple cases that outwardly seemed to be an optimization, but turned out to be 100% slower. 
I was recently laid off from a mobile payment company where I worked on the core API written in ruby. Unfortunately, for the 6 months I worked with them, I did very little rails work, and create none from scratch. I've had 2 interviews and one of those was for a QA job. I can't find a legit entry-level junior rails dev job. Every Junior job posting I see requires 3 year experience, knowledge of every tech in the stack and multiple database schemas. 
yes! exactly! I just replied virtually this same thing to another post.
PMing you my Skype, drop me a line.
I don't understand what you mean by schemaless models. NoSQL? Front-end frameworks like bootstrap and variants drop right into Rails or whatever you're using. Realtime data? You mean like pushing data back out to the client? Again, not tied to your server-side framework or language. Just because you're using Ruby, it doesn't mean you need to use Rails. You can use goliath or eventmachine or Sinatra or whatever fits your needs the best. There is no one-size fits all framework and I think that's a good thing. MRI performance is getting better every day but a lot of the problems Ruby developers encounter is people writing shit code because "woo hoo I learned meta programming today!" and then your interpreter grinds to a halt while it's bouncing around the heap. I'm not saying meta programming is bad - I'm saying that overuse and abuse is one of the leading causes of performance issues in Ruby apps. Second biggest cause? Failure to benchmark your code and reject pushes because of performance problems.
I'm with you, very interesting, can definitely see the benefit there, thanks. May I ask what the site is?
Strange. Any way you can share the code?
Thank you very much. That's an excellent explanation. Let me just say that as a fairly devoted Pythonista I'm really digging Ruby, I'm going to spend some serious time on learning Ruby and then Rails. 
Opal looks totally insane - and yet I kinda want to play with it. I wonder how well it plays with other js objects…
If you're sharding data and want a system that can keep up, you should look at Cassandra. As an added bonus, you can actually compress your data with Cassandra so you don't need 70 servers to do the job of 3. I had an app that was mostly there for data archival purposes but it was getting a boat load of writes. Mongo held up to the writes just fine, but holy balls did it take up a lot of space. I re-wrote my DB wrapper, moved things to Cassandra, and ported over all 1.6 TB worth of Mongo data into a small 3 server Cassandra cluster. Today it's got 3x the data the old Mongo cluster had but at only about 760GB. Best part is, I don't have to maintain separate servers to handle sharding and replication. Just 3 servers handling everything. Depending on how you're querying the data, you might be able to save yourself a lot of money and aggravation going this route. I'm just doing primary key lookups and I have like one or two other columns indexed. If you're using deep document queries in Mongo you'll need to shift some things around a bit.
Well duh. Are people seriously asking this? 
&gt; I don't understand what you mean by schemaless models Using databases without fixed schemas basically means you throw out ActiveRecord, the core of Rails. &gt; Front-end frameworks like bootstrap and variants drop right into Rails or whatever you're using But they're not embraced, instead the community has been encouraged to forgo them in favour of turbolinks. This is a very damaging position. Instead, the out-of-the-box behaviour should be to compile HAML views to javascript so you can flow between client-side and server-side with ease. &gt; Realtime data? You mean like pushing data back out to the client? Again, not tied to your server-side framework or language. Websockets, handling many concurrent and long-lived network connections is simply not something Ruby is good at. It totally is tied to your framework, ecosystem and language. The language is slow and the interpreter is large. The ecosystem is full of synchronous-only gems. Eventmachine suffers badly. Rack barely got streaming working in 1.5, and again, it's a shitty hack. &gt; Just because you're using Ruby, it doesn't mean you need to use Rails. Of course I agree, but the vast majority of ruby development is happening because of and on Rails. &gt; You can use goliath or eventmachine or Sinatra or whatever fits your needs the best You can also select a framework in another language. When switching between ecosystems like rails / eventmachine, the paradigm shift is large enough that the language sameness doesn't matter. Also, eventmachine is a massive hack that is busted and monkey patched beyond belief. We have used it on some major projects and are not happy customers. &gt; MRI performance is getting better every day Not really. It's still *insanely slow*, and not improving significantly. 
&gt; They added a second one And a third.
I guess I didn't look closely enough (I love the company where I work).
That's a good point, I'd forgotten about those.
global
interpreter 
lock EDIT: before i get downvoted, i am trolling, but i hope you see what i did there.
One technique I've seen is to make the first line `return @foo if_defined?(@foo)` ...is there any advantage to short-circuiting like this vs. a plain `||=` line?
to be clear, neither is my technique :)
ActiveRecord is NOT the core of Rails. ActiveRecord is just one of many plug-ins for the Rails framework.
MRI is way faster than it used to be, but it's true that Rubinius and JRuby are better candidates with every passing day for a ton of reasons.
these days, the return version, but I still have projects without it, or stuff like `if @current_user` ...but it's all generally cargo code, hence my question. :)
shhhhh
I'll be at BostonRB tonight...first time!
I started using emacs two weeks ago or so and I'm pretty gung-ho on setting up my environment the way I want it. It's gonna take me a while, but I aim to do similar things. I'll post to this subreddit (or I'll create a blog for it) when I have updates. Eclipse-wise... Ew. Honestly, just buy Rubymine. It's WAY better. It will blow your mind and if you're serious about writing code in Ruby, it's probably the best IDE out there. It's worth noting that the majority of the Ruby community seems to be Vim users (Check out tpope's github account, he's quite prolific with helpful vim plugins). I was a Vim user for about two years. So this may be the way you want to go. Emacs-wise: 1. inf-ruby lets you send commands to the running irb shell 2. robe-mode lets you jump around your project and do, I think, some auto-completion (may need to be hooked up to a completion engine for that). That's all I got for now. 
Ah, thanks! I come from a heavy Java background and must have slipped back into their method-naming mentality. 
No problem :) Also, this piece of code... entries.each { |x| if x.date == todays_date total_shows_watched = total_shows_watched + 1 total_time_watched = total_time_watched + x.hours #Show the title of each show puts "=&gt; #{x.title}" end } ...can be written a bit more Ruby-ish: shows_watched_today = entries.select { |entry| entry.date == todays_date } total_shows_watched = shows_watched_today.size total_time_watched = shows_watched_today.inject(0) {|sum, entry| sum + entry.hours} 
Howdy, I see a few things that are either incorrect or I think need clarification. &gt; while tower1 || tower2 || tower3 != [8, 7, 6, 5, 4, 3, 2, 1] I'm pretty sure you mean something like: ordered = [8,7,6,5,4,3,2,1] while (tower1 != ordered) || (tower2 != ordered) || (tower3 != ordered) because testing this in irb tells me that the result of this statement is always tower1 which evaluates to the loop continuing. &gt; moveto &lt;&lt; tower(disc) So moveto has an integer appended to it. I chose tower1, 2, and tower3. This gives me "tower3\u0002" because moveto is a string at this point? I might use an if or a case statement to select the towers.
He does, but ... Ruby is written in C :p I don't know if he writes much in Ruby, and if he does, I have no idea if we can find out what his setup is. I would be interested to find out.
Except the author of Rubinius and the Ruby Spec project has basically rage quit, declared ruby dead and has never gotten Matz to agree to any formalization or standardization of the language, so those alternate implementations are fraught with edge cases and gotchas and will forever lag MRI.
So apparently I can do this: makes.each(&amp;method(:process_make)) But that only passes one parameter to the method. Still not sure how I can get it to split out the key and values. (makes is a hash, by the way)
I believe the issue is that ASP.Net forms require a hidden field to be filled to work correctly. I've come across this in the past and managed to get around it by filling out the field myself. Unfortunately I no longer work for the company that I wrote this code for, and dont have access to it any more, however [this](http://stackoverflow.com/questions/968722/how-do-i-use-and-debug-wwwmechanize) SO post may be helpful. Scroll down near the bottom to the post by anschauung as it may point you in the right direction.
stripe
https://stripe.com/docs/checkout/guides/rails
I'm totally stumped, I wanted to create the if statement to select the towers but I'm not sure how. I thought maybe I can select it based on the contents of the array using an if statement but then the contents of the array would be shifting every time. I've been messing with it for the past 2 hours and still can't figure it out. I see where a few of the things I'm doing is wrong but I'm not sure how to fix them. I noticed the error in while statement and changed that. For some reason "tower1 = ", "tower2 = ", "tower3 = " was stopping the program from running so I removed those. You mentioned moveto has a string appended to it and I think the same thing is happening to tower because when I run the program and ask for input on which tower to select, the program prints only whatever is inputed by the user and not the array contents. I also noticed that (disc) in moveto &lt;&lt; tower(disc) is used if I had made a method. If I use [disc] it would grab the number in the array based on the position. So how would I push a number in an array to another one not based on it's position. Ex. Pushing 2 in array_1 [1, 2, 3] to array_2 [4, 5, 6] without doing this: array_2 &lt;&lt; array_1[1] And finally, I remembered that in Tower of Hanoi one can not move a larger disc onto a smaller disc so I added the following which I'm sure need works also: if moveto.last &gt; tower[disc] moveto &lt;&lt; tower[disc] else puts "wrong move" end Again, thank you for the help, this feels a bit over my head right now.
I'm not exactly sure what your process_make method is supposed to do, but I was able to get something to work with some proc manipulation. process_makes = Proc.new { |a, b| puts a, b } call it by issuing makes.each(&amp;process_makes) Hope that helps! edit: code formatting
Don't give up, you're really close! So the issue is that moveto is a string, where you need it to be the array it represents. Here is how I would do it, if anything I do doesn't make sense feel free to tell me to slow down. #Initalize Towers tower_1 = [1, 5, 3] tower_2 = [8, 2] tower_3 = [7, 6, 4] #Initalize completed tower for comparsion ordered_tower = [8, 7, 6, 5, 4, 3, 2, 1] #Set up pairs for naming #This is a hash of symbols and the tower arrays from above towers = { tower_1: tower_1, tower_2: tower_2, tower_3: tower_3 } #This is the same as the while loop but might be clearer until (tower_1 == ordered_tower) || (tower_2 == ordered_tower) || (tower_3 == ordered_tower) #Print using string interpolation print "tower_1 #{tower_1}" print "tower_2 #{tower_2}" print "tower_3 #{tower_3}" puts "Which tower would you like to select?" #changing the name to make it clear tower_input = gets.chomp.downcase #Take the input and look up the tower tower_source = towers[tower_input.to_sym] #As far as I'm aware we're only aloud to move the top disc? puts tower_source puts "Which disc would you like to move from this tower?" disc_input = gets.chomp print disc_input puts "Which tower would you like to move this disc?" target_input = gets.chomp.downcase tower_dest = towers[target_input.to_sym] #Take the element from the end of the target tower disc = tower_source.pop #Add the element we popped to the target tower tower_dest &lt;&lt; disc end
Gonna use this as a chance to pimp [snoo](http://github.com/paradox460/snoo), my battle-tested api wrapper
[Stripe](http://www.stripe.com) or [Braintree](https://www.braintreepayments.com). Possibly PayPal, depending on your needs and customers.
Thank you so much! That is really clean and concise code! The pop method, of course! I was going to ask a ton of questions but I have good news! I kept going through the code and it kept making more sense. I was going to ask about the hashes but it looks like they take care of the appending issues with the tower and moveto variables. I was also going to ask about tower_source = towers[tower_input.to_sym] and that seems that its calls on the key value pair in the hashes. One thing I'm not sure of, is the conversion to a symbol in tower_input.to_sym and target_input.to_sym because the values in hashes are symbols and not strings? It took me a while but I added one more thing so you can't add a larger disc on top of a smaller one. It seems to work, is there a better way to do it by any chance? #Take the element from the end of the target tower legalmove = tower_source.last #Add the element we popped to the target tower if legalmove &gt; tower_dest.last print "Illegal move! Try Again. " else disc = tower_source.pop tower_dest &lt;&lt; disc end end
wont work
Well that's a proc. I want to do it with a method. process_makes looks like this def process_makes(a,b) ... end 
They had a similar talk at RubyConf that I wanted to see but there was another talk that I went to. Damn you three tracks!
If you're in NYC or Boston, send me a message.
No, just make sure you start the file with # encoding: UTF-8 This signals that the file is utf-8 encoded.
I have per [reference](http://stackoverflow.com/questions/5359928/make-ruby-1-9-regard-all-source-files-to-be-utf-8-encoded-even-if-recompiling) (linked above). realizing there's some emacs directive there as well. Probably no coincidence since Matz wrote the ruby mode for emacs. \# -*- mode:ruby; coding:utf-8 -*- Edit, [better link](http://stackoverflow.com/questions/8879237/how-does-the-magic-comment-encoding-utf-8-in-ruby-works). Original discussion seems to timeout.
I'm from France and Rails was never a hit here. it's either java/php or .net. 
in a total hack, you could put the method call inside the Proc call Proc.new { |a, b| process_makes(a, b) } I wouldn't recommend it, but it's an option
And you don't expect anyone to ever use your non-latin variable names. 
It's situational but generally I would say it's bad form. They're a pain to type out.
Ah, it will work. Sorry (misread).
I read in the link I provided that the -Ku approach is being deprecated. I cannot confirm. It seems to me that there should be a way to look at a file and know the encoding used, either by extension or some intimately associated indicator.
Ruby 2.0 assumes UTF-8 by default. It's also a hop, skip, and a jump for most users if you're on 1.9 right now. (Though if you're relying on distro packages, most of them aren't even on current patchlevels of 1.9.3.)
I think you'd run into more problems than saving a couple of characters warrants. Imagine someone else maintaining your code. She now has to know how to type all the utf-8 symbols you used, or resort to copy-pasting them whenever they're used. What about pair programming or describing code changes in words? "Set delta to 0.1. No, the character 'Δ', not the word 'delta'."
Maybe have a look at [eclim](http://eclim.org/) and [slime](https://github.com/jpalardy/vim-slime). This way you could get an editor + repl with vim-slime + tmux and you still get the Eclipse features you want. Only problem is this solution uses vim not emacs, but I would guess something similar exists for emacs as well.
It's the same presentation. It was good.
Cool talk. I've always been interested in trying game dev but I have exactly the problem he mentions at the end of the talk where I have no idea how to structure game code. Can anybody say more about the book he recommended ("Game Programming Patterns")?
Symbols tripped me up until I had dealt with them for a bit. to_sym takes input and returns a [symbol](http://ruby-doc.org/core-2.0.0/Symbol.html). A symbol is a way to create a label or name without the overhead of a string. We really could change the code so it uses strings for the hash. towers = { "tower_1" =&gt; tower_1, "tower_2" =&gt; tower_2, "tower_3" =&gt; tower_3 } This would not require to_sym, so we could just pass in the string from gets.chomp.downcase tower_source = towers[tower_input] towers is our hash, and the [#[] method](http://www.ruby-doc.org/core-2.0.0/Hash.html#method-i-5B-5D) lets us provide a key to get the corresponding value, in this case we're taking the user input, converting it to a symbol, and looking up the value that corresponds to the key. &gt;#Take the element from the end of the target tower &gt;legalmove = tower_source.last &gt; &gt;#Add the element we popped to the target tower &gt;if legalmove &gt; tower_dest.last &gt; &gt;print "Illegal move! Try Again. " &gt; else &gt; disc = tower_source.pop &gt; tower_dest &lt;&lt; disc &gt; end &gt; end This is good code, I only see two things, and neither of them is incorrect, just idioms for ruby. I changed legalmove to legal_move, within ruby [snake case](http://en.wikipedia.org/wiki/Snake_case) is very common for naming. I removed the assignment to disc, in this case I think it is pretty clear what is happening, but this is just my preference, not any sort of style guide. #Take the element from the end of the target tower legal_move = tower_source.last if legal_move &gt; tower_dest.last print "Illegal move! Try Again. " else tower_dest &lt;&lt; tower_source.pop end Have you seen [TryRuby](http://tryruby.org/) from CodeSchool? I'm really found of this ruby introduction.
In ruby 2.0, UTF-8 is the default file encoding. In 1.9 you have to use the magic comment `# encoding: UTF-8` My general rule of thumb is if its something obscure that looks like a standard character, or has no visible codepoint in most fonts (eg: emoji), I use `\u` syntax, eg `\u1234`.
Are you running Ruby 1.8? In Ruby 1.9+, `to_proc` should cope fine with multiple arguments — for example, it's common to call: [1, 2, 3].reduce(0, &amp;:+) (Where `reduce` obviously passes two arguments to its block, the memo and the individual object.)
No, the ruby world does not need an Apache Foundation, it's working fine as is, many gem providers provide README info on gem compatibility with different versions of Rails and do a good job of separating incompatible versions across different branches of git. 
I'm going to have to disagree with you there. One of my early Rails projects explicitly disabled ActiveRecord because I wasn't accessing a database. I was scraping things from a 3rd party web-service in realtime. Everything else worked as expected and it was quite nice. Sure, Rails is opinionated but you can bend it to your will with minimal pain. Every time I find someone who doesn't grasp that I wonder where they've been for the past 5 years. I can't even remember the last time I used a scaffold or something of that nature. Alternatively, you can use ActiveRecord with Sinatra projects fairly easily. It drops right in and you can connect to your database in 1 line of code and be up and running.
jaroh is spot on. There are better and worse ways to code, some truly awful ways, and some ways that look bad but are necessary. Don't hit yourself too hard for going against the grain of the coding style of the day, until you're ready to contribute to multi-developer projects, where style differences make a codebase a pain to look through. Snake case, though, for Ruby variables. Learn.
What do you mean by "without fixed schemas?" You can make changes to your database and kick your Rails app whenever you make such a change if you want it to pick it up. I don't understand what is so hard about that. You can disable TurboLinks if you don't like it. I, personally, don't use it but it's a nice boost for small apps. I've been using jQuery since Rails 2.1 and haven't had an issue worth writing home about. As for the rest of what you're saying... I'm struggling to determine whether or not you're just new at this, or you haven't been challenged to solve any legitimately hard problems with Ruby. I have several standalone EventMachine apps running, in production, handling hundreds of requests per second, that haven't given me any issues in over a year. Need a synchronous gem to be async? Use EM::Deferrable. I guess it's just weird for me to hear someone complain about as many things as you are especially since I think I've overcome virtually all of these "issues" in the past with minimal effort.
There is a Ruby Association, but its influence and funding is minimal -- as far as I'm aware. However, the basis of your question is the "ecosystem of stalled or out-dated gems" that you describe. I do not recognise this at all. What gives you this impression?
Plenty of gigs in NYC. Everyone is always hiring. The quality of Ruby developers looking for work has been iffy though - tough to find someone who knows what they are talking about these days who isn't already employed.
&gt; What do you mean by "without fixed schemas?" Different records can have completely different structures. Document databases. &gt; You can disable TurboLinks if you don't like it. It's not that I do or do not like it, my point is about DHH's greater shunning of front-end frameworks and forcing them out of the Rails omasake solution. &gt; I'm struggling to determine whether or not you're just new at this, or you haven't been challenged to solve any legitimately hard problems with Ruby. I've built literally hundreds of Ruby / Rails apps for clients, I work at one of the leading Rails development shops. We have large services running on EventMachine. I have a deep understanding of these problems and how they fare against other reactor-pattern implementations such as nodejs. &gt; I guess it's just weird for me to hear someone complain about as many things as you are especially since I think I've overcome virtually all of these "issues" in the past with minimal effort. I'm not saying this stuff is impossible and you have to give up Ruby. I'm just highlighting the reasons fewer and fewer projects will be started on Ruby/Rails, why fewer developers will be rushing to learn it and fewer big companies will be running it. On that last point, when Rails was the hot new thing, you could point to dozens of big sites running it (Twitter, Groupon, etc). Who are the shining examples these days? We struggle to find examples when pitching client work. 
ActiveRecord doesn't work for document databases. There's different drivers and adapters that do. Right tool for the job, dude. Building a new class to wrap your driver of choice is so trivial that I don't understand why you'd want to shove it all into ActiveRecord especially since its name is literally the [design pattern](http://en.wikipedia.org/wiki/Active_record_pattern) it follows. I don't think that Twitter and Groupon were ever shining examples of quality Rails sites. Twitter and Groupon both built giant monolithic applications and then tried to scale horizontally without actually taking a step back and saying "What is actually broken here?" Today Github, LivingSocial, Shopify, and even a bunch of RackSpace's client facing stuff is Rails. If I had to start a new business today I would absolutely build it with Ruby and whatever frameworks fit for a given component. Rails has only been out publicly for ~108 months so you're building 1-2 apps and deploying them per month since the beginning? I guess that's the main difference in our perspectives here. I don't build tons of new sites but I definitely maintain, scale, and optimize them.
I think we completely agree at this point.
Plus, you've got to consider what happens if you have two characters which render the same on screen but are actually different, and therefore create two different variables in the code.
Would you like to pair on creating a simple gem from scratch? I'd be happy to explain the process of creating a gem and using TDD to create a clean API. I have a gem in mind which I'd like to extract from an existing gem from my https://github.com/restpack project EDIT: I'm going to do this [later today](http://www.reddit.com/r/ruby/comments/1qmb29/building_a_gem_from_scratch_google_hangout_today/) if you'd like to participate: http://www.reddit.com/r/ruby/comments/1qmb29/building_a_gem_from_scratch_google_hangout_today/ EDIT 2: Here's the video : http://www.reddit.com/r/ruby/comments/1qplmu/tutorial_build_a_gem_from_scratch/
Chrome will let you search trough other websites with keywords. Right from the address bar. Zero clicks! - `rdoc` searches http://rubydoc.org/search/stdlib/core?q=%s - `gem` searches http://rubygems.org/search?query=%s - `hub` searches http://github.com/search?q=%s Etcetera.
I do believe from my brief faffing in IRB that the single argument is an array, the first entry being the hash's key and the second the value. You might be better off, if it's not too complex, with an array of `Make` instances on which `process` is defined. `makes.each(&amp;:process)` would become `makes.each {|make| make.process}`, and they would already know about their own works, which would be, well... processed inside the method.
I'd start by looking at the tests for a gem/library - these would often link in the same code that gets packaged up. Basically these tests run code not from the gem as installed, but from the code in lib or wherever relative to that test file. 
nope. never had that feeling. 
Who exactly contributes all of the money to the Apache Foundation? How does it fund the projects that it funds? In my opinion, the Apache Foundation is simply another level of abstraction between the real key ingredient, corporate-sponsored donations. Most of the gems that are in wide use today are being maintained and contributed to, simply because of the volume of developers who need it. Many companies can justify allowing a developer to work a few hours a day on open-source projects if those projects will directly contribute to the app's success. And I believe that corporate investment as well as wide participation are directly responsible for the increase in quality of RubyGems in the past few years. It wasn't very long ago that you *really* had to make sure a Rails plugin or gem was legit before you allowed it into your app. You wouldn't believe how much weird shit is out there... I feel that as a Ruby developer, and an open-source community participant, it is your duty to contribute back to the open-source world in some fashion. I look at outdated gems that I require or like as a way to contribute back to the software I love and use, that people built for me, and didn't charge me a dime to use it.
No. Not at all.
&gt; using TDD to create a clean API Screw that. The only way to create web-scale clean APIs in the cloud is BDD.
I believe that's a reference to [Game Programming Patterns](http://gameprogrammingpatterns.com); a book in progress but free-info resource for the time being.
I disagree. First of all Apache's role is not ensuring that its projects have README files. :) Apache can allocate money and fund developers to keep evolving, improving, and maintaining libraries and frameworks. Besides, there are gems that once upon a time used to be very popular, but now if you look at their Git repos you see they have not been updated in three years or even more and probably just got abandoned. Had an umbrella ogranization like Apache oversaw them, it would become less likely for incidents like this happen. At least Apache announces when a project reaches its EOL when they discontinue a project.
2) Yes but there are also gems that are written by hobbyists and being valuable become very popular in the community. Yet the original developer might end up abandoning it due to time constraints. Sometimes forks are created and the project continues to live but sometimes nobody steps up and it becomes a tech debt in your project. 3) I don't know what do you exactly mean. What make you think that I say that we should use gems/libraries whose functionality we don't understand? I never said that. I said that there are gems that are very useful but are not maintained for years and thus I end up disregarding them when starting a new project. Writing everything from scratch is a process-smell. As a business you should focus developing the parts of the project that makes you competitive compared to others. Or what that has value to your customer. Not the glue and low-level code that is provided to you in a reliable and documented fashion already elsewhere.
The Apache idea is unrealizable, you might as well ask why can't we have flying cars, teleportation, and perpetual motion machines? The reason why the Apache idea is unrealizable is because the [Apache foundation manages only 86 projects](http://en.wikipedia.org/wiki/List_of_Apache_Software_Foundation_projects), whereas there are [65,837 rubygems](http://www.modulecounts.com/). It's apples and oranges. More importantly, I think you're gonna find the issue you are describing is a problem you have and not one shared by the community.
Or you could just run rake -P
Happy snoo user here, it powers all of my MLB and NBA game chat and sidebar scripts :D Doesn't mean I won't look into this new one, though. It's good to have competition.
Sure, let's do it over a hangout so that it is recorded and many people can sit in. What time zones are you all in? EDIT: I'm in GMT
You are misunderstanding me it seems. &gt; When a project is valuable to your company, maybe you should consider working on it? For small stuff, sure. For large libraries and frameworks? If my company allocates the required budget and resources needed to do so. And when my company's customers don't have tight deadlines. If a customer asks a company to develop them, for example, custom accounting software, and you tell them "no worries. first let us develop you an MVC framework" chances are they laugh at you and dismiss you. &gt;writing everything from scratch is a process-smell &gt;&gt; is absolutely missing the point. If a function on a gem is critical to your business you should: a) understand it, and b) be able to implement your own solution or take over if the current maintainer stops. Consider the persistence problem domain or ORMs. Or even MVC frameworks. If when you start a project, you decide to write your own ORM or MVC framework from scratch because *a) you should understand it, and b) be able to implement your own solution or take over if the current maintainer stops*, you are doing it wrong. Unless the goal of your project is to develop an ORM or an MVC framework. Or when you are a small part of a gigantic company like Facebook or Google that have the capital and workforce needed to invest in such efforts. Fortunately in the Ruby/Rails world, MVC, ORM, and a few other areas are evolving well thanks to the companies behind those efforts and the contributions from the larger community. However there are plenty of gems that do not have any roadmaps, maintenance plans, etc. and it makes one avoid those gems for any kind of serious project as otherwise they might quickly become tech debt.
&gt; The Apache idea is unrealizable, you might as well ask why can't we have flying cars, teleportation, and perpetual motion machines? This is a fallacy. For one, the mere existence of Apache is proof that it is realizable. Besides Apache is not the only such company. We have Codehaus. We had OpenSymphony (till 2011). We have OW2. And we have Eclipse. Also Java is not made of 86 projects. It is very likely that there are hundreds of thousands of Java libraries out there. Apache is supervising a small subset of them. Similarly an Apache-like organization in the Ruby world doesn't have to manage all of those 65K gems. And yes, we already have flying cars. Just not commercially mass produced yet.
If by "iterate down hash" you mean "deep fetch", then this is what I used just recently: class Hash def deep_fetch(keys) keys.inject(self) { |obj, key| obj[key] if obj.respond_to? :[] } end end hash = {'level0' =&gt; {'level1' =&gt; {'level2' =&gt; 'change-this'}}} hash.deep_fetch(%w(level0 level1))['level2'] = 'foo' p hash # =&gt; {"level0"=&gt;{"level1"=&gt;{"level2"=&gt;"foo"}}}
Having released a quite a few gems, I'm sorry to say that the standards really aren't there. Most developers use bundler's gem process, so you'll want to look at `bundle exec rake -T`, a lot of older gems use jeweler, which really sucked, and may have their own process. `gem build` won't do everything you'll need to do in some ruby gems. Best to ask the maintainer for a guide.
I'm going to follow the snake case from now on, it really makes everything more legible. I've actually tried TryRuby, I'm going to practice with it again. Thank you again for taking the time out of your day to help me with this! Enjoy the gold!
Some of those are in Meteor as it stands (or trivial to add), others will be trivial to implement before 1.0, some are irrelevant and the others are wrong (seriously, 'A well run system of add-in modules'?!). I am not trying to cause a fight - my first install of Rails was 0.6.3 and I've been doing little else since 2006, but Meteor is a sea change for two really important reasons: 1. It makes real-time updates of elements bound to model attributes trivial 2. One language everywhere This means that Meteor is going to give a productivity kick to developers used to Rails in the same order of magnitude as Rails gave to the PHP generation. That doesn't mean Rails can't react. Adding the real-time updates and data binding fun - perhaps building on a mature client-side tech like AngularJS - should be a feature that can be added quite quickly. The one language everywhere thing is a bit more complex. I remember when we used to write "Javascript" in Ruby. It was horrid. Maybe it could be tried again with judicious use of Opal in the asset pipeline providing dynamic reloading could be sorted so it worked nicely in development environments. It's all doable, and it should be done, but don't dismiss Meteor: it is taking us to school, and we should accept that.
Check out Ara Howard's Map gem: require 'map' def change_hash( hash, path, value ) Map.new( hash ).set( *path.split("/"), value ) end change_hash(hash, "level0/level1", "here i am") # =&gt; {"level0"=&gt;{"level1"=&gt;"here i am"}} Seriously, map is awesome.
EST here.
Yeah, that's going to be an interesting thing in the coming years.
IMHO, you probably shouldn't because depending on the font a person uses, the characters may or may not even render. Also, perhaps others who are reading your code aren't familiar with the symbols you're using. Now, if you use vim, you can use the conceal feature to transform specific strings within the code into unicode symbols. It doesn't affect the source code itself, but you can still see the symbols you prefer. So, using the first line in your code, vim could transform "delta = 0.1" to what you have.
I like this reason. This matters. As an aside, one would think that the filesystem could/would store the preferred encoding of files. If binary, then that would of course be nil/null. thanks
Have you tried making a 10 out of it? Wibble? Sorry your question does not make sense, could you please try and explain more coherently? Do you mean that you only want to compare the K:V pairs where the same key is present in both hashes, discarding the rest? 
Can you show some code? I'm a bit unsure what exactly you're trying to do still. "Mapping the keys between these hashes" is a bit ambiguous.
I'm GMT. I'm going to do this later today at 9pm GMT / 4pm EST / 1pm PST: http://www.reddit.com/r/ruby/comments/1qmb29/building_a_gem_from_scratch_google_hangout_today/
I went ahead and edited with an example + more of an explanation.. Sorry for being vague!
 first_hash = {:key_1 =&gt; 1, :key_2 =&gt; 2} second_hash = {:key_one =&gt; 1, :key_two =&gt; 2} mapper = {:key_1 =&gt; :key_one, :key_2 =&gt; :key_two} def same(a, b, a_to_b) a_to_b.each{ |key_a, key_b| return false if a[key_a.to_sym] != b[key_b.to_sym] } true end same(first_hash, second_hash, mapper) # =&gt; true Note that this solution also yields true when you define no elements in the mapper hash, because none are compared.
If you have 10 years of experience, all you should need is the ruby API, the rails API (and possibly rails guides), and stackoverflow.
&gt; So I have these two hashes and I need to see if :key_one matches :key_1.. So I need to have a map stating that the :key_1 will map to :key_one, from this I need to compare all values between matching keys. The key names will always be different between my two hashes. Is there any guaranteed relationship between the two hashes? Will they always be the same size, or in the same order, or will there be a known pattern transforming one key into it's mapped key? If not, I'm not sure how you could write a general solution when the values you're trying to match are going to be artibrary. That all said, You could write a function like: def compare(hash_1, hash_2, dictionary) matches = 0 #Our dictionary provides the mapping through K:V pairs dictionary.each_pair do |key, mapped_key| if (hash_1[key.to_sym] == hash_2[mapped_key.to_sym]) matches += 1 end end matches end So then given your example, I could define a dictionary like first_hash = { :key_1 =&gt; 1, :key_2 =&gt; 2 } second_hash = { :key_one =&gt; 1, :key_two =&gt; 2 } dictionary = { :key_1 =&gt; :key_one, :key_2 =&gt; :key_two } And then call results = compare(first_hash, second_hash, dictionary) And I should get 2 (**Note:** consider this as pseudo-code at best. Syntax incorrect or no money back!)
You have two sets of key/value pairs, and you need to **map the keys of one to keys of the other**. You can change the implementation, but the core insight is that you need this map hash. Lukas-skywalker's data structures are well stated. Depending on your needs, I'd loop through one hash or the other: first_hash.each {|k1, v1| mapper.key?(k1) &amp;&amp; v1 == second_hash[mapper[k1]] } If the mapper doesn't contain the key, there's no match. If the value from the first hash doesn't match the value from the second hash, referred to by the mapped key (located with the key from the first) then it's not a match.
I found this article in Hacker News today to be quite interesting! https://news.ycombinator.com/item?id=6732670 (Lol to the first comment that someone left)
Awesome! Hangouts can be recorded as well and viewed later, right?
Yep, it'll be on youtube soon after.
There are still a lot of "gotchas" in both Ruby &amp; Rails outside of the syntax and API. Too many to list in fact. Working through a decent book or two is a good start (Agile Web Development with Rails isn't awful); pick up some of Avdi Grimms e-books; subscribe to Railscasts for a month - should get you up and running. And as a newcomer (&lt; 1 year) to Ruby/Rails myself I would advise to use TDD religiously and look at RSpec/FactoryGirl/Bogus early on...
https://github.com/ahoward/map
I agree. My opinion now is that the smaller regional conferences are a better bet. Last April I went to Ancient City Ruby and found it to be better than RubyConf. I felt presentations were better at ACR. ACR also facilitated outside networking with a pirate ship cruise and pub crawl. This might be nit-picky, but I also didn't think a young girl learning to code was worthy of a keynote speech.
Very cool. Won't be able to join live but looking forward to the recording.
The whole notion that a JS framework is going to suddenly make people stop using Rails is beyond absurd to begin with.
I'd suggest not bothering with RSpec/FactoryGirl/Bogus early on as it's just another framework to learn. Stick with what comes with Rails: http://guides.rubyonrails.org/testing.html I'd say don't bother with 3rd party testing frameworks at all. 95% of the time fixtures will do the job. Sometimes it makes sense to bring mocha/webmock/vrc for mocking. Rarely you'll need factories. Key is to never fight Rails. If you feel like it's getting complicated, you're probably doing it wrong.
&gt; However there are plenty of gems that do not have any roadmaps, maintenance plans, etc. and it makes one avoid those gems for any kind of serious project as otherwise they might quickly become tech debt. I get the impression you're coming at this from an enterprise background, where the large vendors often artificially delay availability to generate more revenue. Nobody's shipping gems on a schedule for customers or software maintenance customers. By and large, there are no roadmaps because there's no call for roadmaps—improvement isn't being driven by revenue generation but by actual need. If the original developer finds they need a new feature or a refinement, they add it. If a user of a gem finds they need a new feature or a refinement, they add it (or, if their Ruby-Fu is weak, request it). If there are no known bugs or deficiencies, what exactly do you expect to be on a roadmap? "2.0: New, higher version number!"? Roadmaps and maintenance plans crop up only where they're genuinely needed: Huge projects like Rails or Spree. Most gems (including a number of the ORMs) don't even remotely approach that level of complexity and necessary coordination.
You'll actually need to use attr_accessor. attr_reader reads a variable, attr_writer writes a variable and attr_accessor does both. BTW, you'll need to do that for title, mood and fulltext as well. Without those you'll also get undefined methods for those variables as well. see comment on your gist...code format was borked here.
Came in here to talk about about your hangout. Thanks, btw.
_"Stick with what comes with Rails:"_ [hahahaha](http://kakubei.blogspot.co.uk/2012/05/why-i-hate-rails.html) Sorry. I suggested he "look" at them since they are valid alternatives with *good* reasons to use them, just as there are equally valid alternatives to many of rails internals. 
If you don't mind spending a bit of well-earned money, I *highly* recommend http://codeschool.com. They have courses which feature video guides, pdf notes/slides, and code challenges which are all performed in-browser. They have everything ranging from node.js, backbone.js, coffescript, some html/css, ruby, rails (and testing), git, and even R. Plus, if you complete at least a course a month, that goes to $5 off your subscription renewal. Rewards also include discount codes for http://railstutorial.org and a http://railscasts.com pro subscription (also good resources). There's also a wide selection of screencasts that detail topics related to the normal coursework. Currently, they're at $29 a month, so if you progress, $24 a month. The skills I've learned from Code School helped me to build a simple rails app to manage server infrastructure where I work. It's quality instruction that's I feel has paid for itself with what I'm able to contribute to my employer in the tech industry. edit: grammar
Perrrfect. Thanks. :)
Yup, `rake -T` or `rake --tasks` is handy...as mentioned in the article! :] Personally, I find the visual format much more appealing. Do you see any benefit to it? 
That one is new to me! Looks like it lists out all dependencies of every task as well? It's a lot of output for at-a-glance output, but very handy to know about!
&gt; Ok, let me be honest, the built-in tests suck, you have to learn them, but they suck and you won’t even end up using them cause they suck. That's a pretty inane rant. I think one should know how to use available tools and then switch if they don't cut it. Jumping head first into RSpec/Factories without trying UnitTest/Fixtures is dumb.
The whole rant is inane (and often totally off-base), but it's especially inane in the case of UnitTest/MiniTest. It's capable, it's easy to use, it's lightweight, and you're guaranteed to have it. If you prefer the syntax of RSpec or something else, great, but to suggest MiniTest flat-out sucks suggests a gross ignorance of testing in general. (Which sums up the whole blog rant: "I have to learn things?!")
I'd never written a line of Ruby before I started my current role as a Ruby dev. I did have, however, good groundings in all things computer science. I'm now the lead dev after 8 months.
What does this have to do with Ruby?
~~So Ive never actually done a google hangout before, wondering if anyone can explain this. I signed in and clicked The Yes button under "are you going?"~~ ~~So it starts in a few minutes? When it starts, how do I watch/participate?~~ Figured it out. :P 
So this was pretty interesting and I know a bunch of other people that would probably find this interesting as well. If you plan on doing another hang out in the future, or would want to do one for a larger group of people let me know! I could help set up a group of people to watch it potentially. Just pm me for my email if you're interested :)
I decided to go with a modified version of your approach. Thank you!
Indeed
Here's an upvote. I couldn't resist.
What problem does this solve? It looks pretty useless to me as long as you can't pass a block to it.
\*its use
For RestPack, I want to create modules dynamically so that I can do this: module Commands::Groups::Invitation instead of: module Commands module Groups module Invitation https://github.com/RestPack/restpack_group_service/blob/master/lib/restpack_group_service/commands/invitation/rsvp.rb#L1 https://github.com/RestPack/restpack_service/blob/master/lib/restpack_service/loader.rb#L21
As above I should have clarified that the Rails is not the primary tech/skillset. There is a focus on pair programming especially when learning new tech and the interview to offer was extremely quick. The team understands the ability to learn is important rather than X years.
This article reminds me of funny/painful experience. I remember watching a live demo of rails by a very good programmer. Most of the demo was watching him stumble over the non-language issues. The fact this programmer was arrogant made it pure Schadenfreude. This is a nice warning. The truth is every significantly advanced language and/or framework general ends up this way if you are going to use it for anything but a toy.
What a contrived example. Just because we _can_ design for change does not mean that we design for every _possible_ change. If we can design for every possible change though - do so. "Pat"'s variability analysis looks rather good, its his implementation which sucks. def initialize factory @http_client = factory.create_http_client ... def find_postal_name zip_code ... Pat may have prevented a rather nasty bug too in that eventually someone would pass in a non-danish postcode. Pat would make a good (if somewhat anal) analyst. P.S. Before I get jumped of for just using a factory, the problem here isn't DI, it's the implementation of DI without adherence to the Dependency Inversion Principle. DI should arise very much as a side effect ( a detail one could say ) hence DI without DIP will always smell. Address.new( country, "21232" ).city would be somewhat more fragrant.
Awesome! Looking forward to seeing this!
 puts stands for 'put string', which comes by way of C land. Similarly gets stands for 'get string'. There is also 'print', which you may prefer aesthetically, but it doesn't put the new line in for you.
Wow, thank you!
you can just use "p" as : p "aString"
I know what you mean. It feels more natural to use put (in an English grammar sense), however, I found that after a while, I just got used to it. 
I see, thank you both! Follow up: [p foo does puts foo.inspect, i.e. it prints the value of inspect instead of to_s, which is more suitable for debugging (because you can e.g. tell the difference between 1, "1" and "2\b1", which you can't when printing without inspect).](http://stackoverflow.com/questions/1255324/p-vs-puts-in-ruby)
That makes more sense, thanks for clarifying.
This really doesn't make any sense to me. Why would you ever build an MVC framework? I probably am misunderstanding you. I thought you were talking about individual gems going un-maintained?
It's put "s", for "string".
Railscasts.com -- chances are, whatever mixture of functionality you're trying to accomplish is in one of those screencasts.
did you even read the article?
 print "Welcome to this simple program" print "Are you a girl or boy?" user_gender = gets.chomp print "so you are a #{user_gender} right?" print "yes or no?" user_decide1 = gets.chomp if user_decide1 == "yes" print "I'm glad I guessed correctly." elsif user_decide1 == "no" print "You told me you were!!" else print "I said either 'yes' or 'no'." end The if/else statements are used to perform some action when the condition in the if statement is true. If user_decide1 is equal to "yes", then the "guessed correctly" line will print. in the "else if" (elsif in Ruby) the "you told me" line prints if user_decide1 is equal to "no". If it's not equal to either yes or no, the 3rd line prints. Note the difference between = and ==.... = is an assignment operator, it assigns a value to a variable. == is a comparison operator, it looks at the two values, and if they're equal, returns "true". I found it's easiest to say in my head: x=1 "X equals 1" x==2 "X is equal to 2"
dont know why people are downvoting this. Codeschool is the shit.
Thank you so much!
But lets say they don't say either for gender is there any way to force returning and putting a different value for that variable or only limiting the options?
 if !(user_gender == "boy" || user_gender == "girl") user_gender = "boy" end So if they don't enter either boy or girl, (! means "not", and || means "or"), it will assign "boy" to user_gender. You could also put the entire thing into a loop, and only break out of the loop and continue if they entered boy or girl. (I'm not sure about the Ruby syntax, but this should work.....) while(1) print "Enter gender: " user_gender = gets.chomp if (user_gender == "boy" || user_gender == "girl") break end print "You didn't enter boy or girl.... try again." end Since "1" is always true, and the while loop keeps going whenever "1" is true, the loop will continue forever. That's why we have the break statement, which will "break out" of a loop and continue with the code after the loop. Again, I'm not 100% sure on the while and break syntax for Ruby, but in C++, it would work.
how do I make it for something like name where it can have infinite variables but when i say your name is so or so and they reply no, Is there any way for them to re enter the value for the variable?
You can use the same idea of a 'while' loop: We'll use the user_decide1 as the condition, set it initially to "no", then start the loop. print "Welcome to this simple program" user_decide1 = "no" while(user_decide1 == "no") while(1) print "Enter gender: " user_gender = gets.chomp if (user_gender == "boy" || user_gender == "girl") break end print "You didn't enter boy or girl.... try again." end print "so you are a #{user_gender} right?" print "yes or no?" user_decide1 = gets.chomp if user_decide1 == "yes" print "I'm glad I guessed correctly." elsif user_decide1 == "no" print "You told me you were!!" print "Let's try this again...." else print "I said either 'yes' or 'no'." user_decide1 = "no" print "Let's try this again...." end end In the "else" clause, we set the value to "no", so that when the outer while loop comes around again, the value is no, so the loop is executed again. If the value was anything but "no" (for example "yes"), the while loop would exit.
I tried following your advice and am using the interpreter on Code Academy however it says the following error :"(ruby):14: syntax error, unexpected $end, expecting keyword_end" for this code: *print "Welcome to the Pokemon world, I am proffesor Willow" *print " " *print "Well before we get into anything what is your name?" *while(1) *user_d1 = gets.chomp *print "so your name is #{user_d1}?" *print " " *print "yes or no?" *user_d2 = gets.chomp *if (user_d2 == "yes") *break *elsif user_d2 == "no" * print "Ok enter it." *end 
&gt; *print "Welcome to the Pokemon world, I am proffesor Willow" &gt; *print " " &gt; *print "Well before we get into anything what is your name?" &gt; *while(1) &gt; *user_d1 = gets.chomp &gt; *print "so your name is #{user_d1}?" &gt; *print " " &gt; *print "yes or no?" &gt; *user_d2 = gets.chomp &gt; *if (user_d2 == "yes") &gt; *break &gt; *elsif user_d2 == "no" &gt; * print "Ok enter it." &gt; *end You're missing another "end" at the end of your code in order to close the while(1) loop. You have one 'end' which closes the 'if' statement, but you need another one to close the while loop. Also, adding 4 spaces at the beginning of each line formats your post in "code" format on reddit. 
&gt; "(ruby):14: syntax error, unexpected $end, expecting keyword_end" The error says that the problem is on line 14. It found the end of the file ($end) when it was looking for the keyword "end" to be there.
4 spaces at the beginning of each line.
Oh so the number after says the line its supposed to be on thank you!
Thanks for linking directly to the article. Totally not sarcastic about that. Truly, great job.
Perhaps it may be ask why you don't just add the features you need in a PR to the gems you are talking about? At least every other week a dev in my office notices will submit a PR to a gem that they use as they have encountered a specific business need for it, and envision that it could be useful for others. It seems that some of your arguments against this is the disdain for developing low level code and instead developing features for your customers? But if the glue code is necessary to make it work, why not just write it yourself. It saves a lot of time instead of waiting for someone else to do it, and you're giving back to the community that gave you all your favorite gems in the first place, for free. Or are you above that? Perhaps your attitude towards the ruby/rails community is where the change should occur.
I switched from a C# to a mostly Ruby role a few months ago. Structurally, a Rails app is very similar to an ASP.NET MVC app. To pick up the Ruby syntax and style I found the Eloquent Ruby book useful. Practical Object Oriented Design in Ruby by Sandi Metz was also a big help in getting better at applying OO concepts in a dynamically typed language. Coming back to *nix development after spending most of the last decade developing on Windows I was pretty rusty in the terminal. Brushing up on some bash helped.
Agreed. DI is about understanding which things are likely to change and pulling them out just enough to make the cost of change and maintenance a little lower than it otherwise would be. I'd normally code things the first way to get things rolling, and move towards "Pat's" method as I refactored and maybe moved the lookup into a library, made it possible to use local files for lookups as well as web services, etc., but I'd still want a clean interface for the developer to use that library, and the contrived example OP points to is a mess.
There is already any amount of json support built into Rails so there would not be much need for additional gems. The parsing would be the larger part of work. For the response, if you have a model (say cars) you can just put something like this in your controller: @cars = Car.where(whatever_conditions_you_have).all respond_with @cars and if json is requested you will get a json response. You can tell Rails that json is the default like that in routes.rb: namespace :api, :defaults =&gt; {:format =&gt; :json} do Your controller needs to define respond_to :xml, :json and that's mostly all to it. Though maybe if you have very complex data this article (and [RABL](https://github.com/nesquena/rabl) gem) may be interesting: http://mt.gomiso.com/2011/05/16/if-youre-using-to_json-youre-doing-it-wrong/
I tried RABL, but would instead recommend [Active Model Serializers](https://github.com/rails-api/active_model_serializers). They are really very lean. Let me give you an example complete model, controller and serializer (in an app I'm building right now): EDIT: code formatting here sucks. moved to [gist](https://gist.github.com/kryptonik/7484470#file-active-model-serializer-example). GET to http://localhost:5000/tasks returns a JSON doc like {tasks:[...]}
[Here](https://github.com/bbcrd/REST-API-example)'s a lazy Sinatra-based REST server using DataMapper to serve "Things" from a database; almost exactly what you're looking for, though perhaps a bit code-heavier than a "drop in a gem" solution.
The idiomatic way to loop forever in ruby is with the loop method: loop do print "Enter gender: " user_gender = gets.chomp if (user_gender == "boy" || user_gender == "girl") break end print "You didn't enter boy or girl.... try again." end Although the while construct should work too
Grape is good, but [webmachine](https://github.com/seancribbs/webmachine-ruby) is better if you want to get code up the fastest.
Didn't realize there were that many pictures of Katie tweeted by people who weren't me :)
Couldn't agree more. ActiveModel::Serializer is one of the simplest method for serializing something. You could use it also for create an hash representation of the data. For example, given the above example, you could write (IIRC the syntax): TaskSerializer.new(Task.first).as_json This could be very helpful in some situations.
Hey man, I have a beta version of the gem up. Please take a look and let me know what you think. https://github.com/brycesenz/freeform One big note - my gem supports nested forms, but it gets a little hacky to use the `nested_form` gem with it. I have support for it now, but it's not ideal. All of that is documented in the README.
Hey man, I have a beta version of the gem up. Please take a look and let me know what you think. https://github.com/brycesenz/freeform One big note - my gem supports nested forms, but it gets a little hacky to use the `nested_form` gem with it. I have support for it now, but it's not ideal. All of that is documented in the README.
Hey man, I have a beta version of the gem up. Please take a look and let me know what you think. https://github.com/brycesenz/freeform One big note - my gem supports nested forms, but it gets a little hacky to use the `nested_form` gem with it. I have support for it now, but it's not ideal. All of that is documented in the README. If you want to team up, let me know! I'm using this gem now in one of my newer projects, and it's been a big help over trying to accept nested atributes.
Didn't even notice the article actually....why did you link to the comment thread?
Why would you recommend Active Model Serializer instead of RABL? For simple cases like your example they're equivalent. And from my experience RABL is more flexible than Active Model Serializer. 
Here you go: http://www.reddit.com/r/ruby/comments/1qplmu/tutorial_build_a_gem_from_scratch/
"Two roads diverged in a forest, and I? I plowed right down the middle." I support this mode of thinking.
I thought you might be doing some rudimentary error checking at first, but `obj` is always going to be a `Hash`, and `Hash` is always going to have a `#[]` method. More to sing my praise of Ruby than disparage you for verbosity, your method body could just as well have been `keys.reduce self, :[]`.
Yep. We use grape and [grape-entity](https://github.com/intridea/grape-entity). Previously, we used [roar](https://github.com/apotonick/roar) in place of grape-entity, but found roar to restrictive.
Thank you.
Pre-existing library: https://github.com/LaunchWare/roboto
Uh, shouldn't you keep the staging env behind some form of auth? At every job I've worked, we just drop a bit of rack middleware in that puts up a HTTPBasicAuth
It's a great book for such a terrible acronym. 
I've agreed with points on both sides of this argument, and I think the balance lies somewhere in between . I value being able to chat and socialise with the people in my office, and everybody values each other's concentration so it's generally fairly relaxed. I also enjoy working from home, because there's no distractions and I can get on with things in a comfortable environment. But if I had to do either exclusively, I think that's when I'd go mad.
&gt; obj is always going to be a Hash Not always: # last obj is a String (responds to :[]) hash.deep_fetch ['level0', 'level1', 'level2', 0..5] # =&gt; "change" # second obj is NilClass (doesn't repsond to :[]) hash.deep_fetch %w(level0 foo bar) # =&gt; nil With just `reduce`, the second example would cause an _undefined method [] for nil:NilClass_ on the third key fetch.
Heyyyyy, you summed up the point of the post!
That's fair. I tried not to be too argumentative, but wanted to give the same/similar viewpoint from the other side, as I felt the article was skewed a little bit in one direction.
&gt; Really what it comes down to is knowing how to work effectively in &gt; your current environment. In an office that might mean headphones, &gt; cube walls and letting people know you don't like to be interrupted and &gt; they should send you an email instead... When working remotely it &gt; might mean the opposite, needing more effective communication. This is the crux of the article, I believe. I think he used the remote working example and the POODR example as illustrations to his final point, which I thought was very powerful. Don't just cargo cult, think before you do things, try things out and do what works for you and your teammates. But communicate. For God's sake, communicate.
I started with RABL but recently moved to AMS. In my opinion, [AMS handling of associations is much better](https://github.com/rails-api/active_model_serializers#embedding-associations). Look at the JSON you can output with very little code: { "post": { "id": 1, "title": "New post", "body": "A body!", "comment_ids": [ 1, 2 ] }, "comments": [ { "id": 1, "body": "what a dumb post", "tag_ids": [ 1, 2 ] }, { "id": 2, "body": "i liked it", "tag_ids": [ 1, 3 ] }, ], "tags": [ { "id": 1, "name": "short" }, { "id": 2, "name": "whiny" }, { "id": 3, "name": "happy" } ] } Also, the AMS developers are the same developers responsible for Ember.js so they are definitely eating their own dog food. I also really trust Yehuda Katz's vision regarding the web so that's why I moved to AMS.
i pick one issue from the post: 100 lines per class. what do you think - is that possible for a driver? or something hardware related? is it even possible for a very special service? i mean we have divide and conquer, but sometimes it just feels better to keep everything in one place but thousand classes... is this stubborn?
Sorry you're right. &gt; how to create a method that takes a block as an argument This is exactly what I'm trying to figure out how to do. I'm trying to create a method that takes a default block as an argument and then counts how many times the default block was called.
what additional functionality do you need apart from what sinatra gives you out of the box? extra gems aren't needed, except for whatever you want to connect to the database with. (mysql2, etc)
I think you're confused about blocks. When a function accepts a block, *that function* is responsible for calling the block however many times it wants to (which may be never, or many times). For example, you've probably seen the following Ruby code, 5.times do puts "Hello!" end The `#times` method on `Integer` is implemented something like this: class Integer def times i = 0 while i &lt; self yield i += 1 end end end The `yield` statement executes the passed block, if any.
You pass it to times with &amp; block right? Also, what does the block need to look like that I would pass to times?. Do I call it times as well? Edit: Just to be clear, I do understand a block. I can write something like this: def test yield 5 puts "You are in the method test" yield 100 end test {|i| puts "You are in the block #{i}"} However, I need to to make test do integer addition. How would I make it so I can make the test method above take an argument and then have the test block do the addition and then return that addition in the test method. I hope that makes sense. Second edit: How do you format code in reddit?
Well, you can create a method that takes a block without specifying the name of the argument, like so: def foo puts "about to yield" yield puts "yielded!" end Then when you call the method, you can pass it a block: foo do puts "lol" end This outputs the three lines "about to yield", "lol", and "yielded!". You could also yield if the block was given, like so: def foo yield if block_given? end This means you could just call foo without a block. What you're thinking of with the &amp;block is just an explicit way of taking the block as a parameter. For example, maybe you want to have other parameters too, you could do: def foo(name, &amp;block) puts name block.call #you can also use yield here if you want end Your request is odd because you'll know how many times the block was called by how many times you put yield or block.call inside the method. Does that make sense?
Nobody supplied an example where you yield more than one value, so here you go: def count_to(number, &amp;block) counter = 1 while counter &lt;= number # when you yield with arguments, # those values come accessible to # the block like # do_stuff do |yielded_value| # puts yielded_value # end yield counter, percentage(counter, number) counter = counter +1 end end def percentage(part, total) (part.to_f / total) * 100 end count_to(5) do |count, progress| puts "did stuff pass #{count}, progress #{progress}%" end did stuff pass 1, progress 20.0% did stuff pass 2, progress 40.0% did stuff pass 3, progress 60.0% did stuff pass 4, progress 80.0% did stuff pass 5, progress 100.0% 
I have only ever worked in open plan office environments. My feelings towards them are actually rather positive, given a few ground rules. Those rules usually change based upon the people involved, but first up is the removal of all desk phones. Never put people who spend most of their day on the phone next to people who need to work quietly. You also need to give people plenty of space. My current office follows both of these rules, so I find it easy to work. I've also worked in cramped, noisy hellholes where I simply got nothing done. &gt; "I can walk over to Steve..." (who is a knowledge worker[1] ) "...and interrupt whatever he's doing, effectively wasting at the very least 15-30 minutes of his time for a simple question, rather than letting him respond when he's at a breaking point." I see this kind of figure thrown around a lot. Sometimes I get the feeling that this number is bloated, reinforcing the "I am a magician of my art, you cannot possibly comprehend what I'm doing" stereotype a lot of developers display to non-developers. Sure, there are circumstances where having no interruptions is incredibly important - "the flow" is a real phenomenon. I'm just not so sure that "the flow" is required for a significant portion of the work a typical developer does. 
It is worth noting that these rules were constructed within a Ruby context, where brevity is a hallmark of the language and its associated libraries. It's a world away from low-level programming.
Sure, I'd be happy to do more of these. Do you have any particular topics in mind?
If anyone is interested, I'd be happy to create more of these hangouts/videos where we explore a concept in Ruby. Let me know of any topics that you'd like to see.
 Think
Yeah! Can you do more handouts with test driven development and agile development because that's the one thing a lot of these types of screencasts miss out and that's what I liked about this hangout!
Sandi even said in her talk to break the rules if you can convince someone else it's a good idea. It's this kind of dramatic bickering about nothing that has made the Ruby community so increasingly annoying.
I learned all I needed from Code School Ruby Bits.
I think the very idea of tolerating ANY opinion without first putting it to the test and seeing if it works for you *is* cargo culting. Anyone can write a blog, with any knowledge of programming. I've read a lot of posts in the past, especially about JavaScript, which are literally just flaming the language and espousing "facts" that are flat-out wrong! So I don't really trust most things I read before actually testing them out.
[Ruby Weekly](http://rubyweekly.com/) is a pretty good weekly email newsletter. And you can go through all the back issues on the site.
+1 for Ruby Weekly. It keeps you up with the last news of the ruby world, the hot topics, discussions, interesting projects or articles... 
I think Nginx and Unicorn should be two different sections. Nginx is a reverse proxy server which directs traffic hitting a particular port to a particular service or a different port/location. Unicorn on the other hand is an app server. Its pretty fast (might not be the fastest) and it has rolling restarts (hence no downtime when deploying). It has a master process which forks multiple workers each handles one request. Hence you can go ahead a kill one worker then restart it with a newer version of the code whilst still serving requests.
Yeah, but Unicorn and Nginx must be combined. Nginx provides the much needed buffering for Unicorn. Passenger is like Unicorn and Nginx combined into a single thing, making administration easier and reduces deployment complexity. So in deployment one would either use Nginx+Unicorn or Nginx+Passenger (other combinations are also possible...) Both options are very good and have their own strengths and weaknesses. Full disclosure: I'm one of the Passenger authors. But you should use whatever you think is best. :)
This sub-Reddit is, obviously, a good place to start! :-) But I'd also point you to http://www.rubyflow.com/ if you want a daily flow of links too (disclaimer: I started the site several years ago).
Thanks! 
For my edification, do you mind pointing me towards some of these rumblings?
that's weird, sure it's just not in your path? `sudo find / -type f -name irb`
Yeah - I definitely will - he's my instructor, actually. Thanks. 
Thank you. What's the difference between a web server and an app server?
Based on previous works, I'd recommend rails-api too.
Seconded for RailsCast, most screencasts, confreaks can also be helpful. Checkout [Ruby Internals](http://www.youtube.com/watch?v=NlPxvRSUVQI)
What does `which ruby` and `which irb` report?
I missed this one, I'd like to see more. How about OAuth 2.0 and Google APIs for Ruby
Looks good to me. (Also a ruby newb, but it's pretty straight forward.)
Http://Pineapple.io
They're the same. A couple of tips though. This can actually be reduced to a single line. 2.0.0p247 :001 &gt; xxx = [2,3,4,5,6,7] =&gt; [2, 3, 4, 5, 6, 7] 2.0.0p247 :002 &gt; xxx.take_while { |x| x &lt; 4 } =&gt; [2, 3] The advantage of `take_while` over say, `keep_if` is that it doesn't destroy the original array. If that doesn't matter to you then you can use `keep_if` with the same block. Also, in your first `array_copy` method you are missing a `end` to close the `each` block. You can also leave out the `return` keyword and just have `destination` as the last line. Edit: Turns out `take_while` doesn't really work for what you're looking for here. `select` would work though. 2.0.0p247 :001 &gt; xxx = [9,8,1,2,3,4,5,6,7] =&gt; [9, 8, 1, 2, 3, 4, 5, 6, 7] 2.0.0p247 :002 &gt; xxx.select { |x| x&lt;4 } =&gt; [1, 2, 3]
Check out reject. def array_copy(source) source.reject { |number| number &gt;= 4 } end 
So HTML is like the construction materials needed to build a house and CSS is like the paint, decorations to furnish/decorate the house. Rails is the framework on which the house is built. Ruby is like the language the used by the construction workers when building the house and reading the architectural layout.. 
&gt;page can be written HTML actually it is not written by humans, it's written by Ruby. Ruby runs on the webserver, and produces the HTML according to what the bits inside the Ruby code says
In the future, you should consider writing tests. If you follow TDD, then you can refactor your code and KNOW that they are functionally equivalent. You can then try the other suggestions people have given you, and see which makes sense for you.
Once upon a time web servers provided static content. The web was just a way to request files on some remote disk. These are the HTML documents you speak of, that web browsers present to computer users. Then some guy got the bright idea "What if our web server software ran could run software and generate custom documents for each person viewing the page?" Thus [CGI](http://en.wikipedia.org/wiki/Common_Gateway_Interface) was born and so was very useful for [Checking the coffee in the break room](http://en.wikipedia.org/wiki/Trojan_Room_coffee_pot) without leaving ones desk. Ruby, perl, php and a million other tools could sit on server and spit out HTML for web browsers to consume instead of directly serving file directly from a disk. Edit - Spelling Edit - More details There are a bunch of ruby tools to make web site generation easy. [Rails](http://rubyonrails.org/) is a whole suite of software web server/Database abstraction layer/ Model-View-Control paradigm and a few odd tools to provide an ideal environment for proficient rubyists up to experts to allow rapidly making sophisticated web pages. Rails has a ton of stuff that might overwhelm a complete novice but is suitable for most web tasks otherwise. [Sinatra](http://www.sinatrarb.com/) is a minimalistic web framework, that exposes routes and few other tools to let the application developer control the emitted page contents. Sinatra is good tool to allow a complete web novice a playground to try things or allow an expert to have complete control, but it is not well suited to Rapid Application Development
Molokai... So pretty.
This is my preferred method. reject makes for some concise code when you have an instance method that can act as a filter (or standard methods such as empty?). For example, array.reject(&amp;:empty?) 
You're missing an `end` in the top one.
Jut tilt your head and cross your eyes, duh
What is php?
it's a scripting language so similar in purpose to ruby in this analogy.
The termite mound under the foundation. 
This. TDD is a core skill and far more simple to master than you might be lead to believe. http://en.wikibooks.org/wiki/Ruby_Programming/Unit_testing All you have to learn is the very basics.
Except take_while stops whereas the original code does not, it just skips. So they could perhaps use select instead.
Why not select? It seems easier to define things in positives than in negatives (to me, at least). So, source.select { |n| n &lt; 4 } .. that is, "select all elements less than 4" versus "reject all elements greater than or equal to 4".
Try reading the Passenger Architectural Overview, it should answer that question in detail. http://www.modrails.com/documentation/Architectural%20overview.html
To complete Squeaky answer (or to take another analogy): HTML is static content. You ask for my page, I send it back. Now, what if I want to send different information regarding your query. When you put a query into google, the page with the result is not static - it has been generated for you, using your query parameters. At that time, you need dynamic content. This content will be generated in several steps (simplified, and used as an example): * Parsing your query (let say "how to cook fish"), separating the words, maybe converting some part * Transforming those into one or more queries on a database (or file, or another backend), like "select pages where content like "fish";" * Getting the result into a "template" page with some static elements (the google logo, the general links) and some dynamic (each result we found) All those steps cannot be done in HTML, and are more than just DB queries. A language such as Ruby (or Java, or Perl, or PHP...) is used for this kind of stuff. We tend to call that a "Web application" (vs a more static "Website"), even if the difference is not that simple. Now if you want to get a better idea, why don't you test if for yourself, for instance by doing the free, interactive tutorial at http://railsforzombies.org/ Martin
Your code's not the same. It's better. But like others have said, use reject.
I'm not sure I understand what you mean. Edit: My mistake. I get it. `take_while` will take until it reaches an element that doesn't satisfy the condition in the block. I've only ever used it a few times and it's on a sorted array and so somehow I missed that feature of it. Thanks man.
I guess these days my context switches a lot milder as they're usually in the same domain at least. In jobs where I was expected to be a project manager, lead and code monkey rolled into one, I found it took much longer to dive back into what I was doing originally.
Actually, the select is the more defensive approach. Reject is basically "allow all, except these that match this condition", while select is "deny all, except these that match this condition". It's practically the difference between a black-list and a white-list, and a white-list is always the more defensive approach. I'm guessing that's what you meant, too, but your example doesn't show it.
As /u/justoman and /u/petercooper mentioned, `#reject` and `#select` are definitely cleaner implementations (and what you should use, IMO), but you could also use `#each_with_object` to clean things up: def array_copy(source) source.each_with_object([]) do |i, arr| arr.push(i) if i &lt; 4 end end Also, `&lt;&lt;` vs. `push` is really a stylistic choice as the implementation (at least for MRI) is essentially the same for both methods.
Side note, always use "source.each do |i|" and not "for i in source". The for..in construct is implemented with "each" in ruby and so will always be less performant than just using "each".
I want to answer too :) Redis &amp; Memcache are pretty much the same thing they store things like dude.age = 10, dude.weight= 200 or dude.picture = &lt;PICTURE_DATA&gt; or dude.profile_page = &lt;HTML_DATA&gt;. Memcache holds these in memory, Redis does so too, but in addition saves them to disk so that if you restart the service, your data will be loaded in again. Memcache as the name implies is for caching, keeping stuff in memory so it can be accessed really fast. Redis is useful as a database also, place to store data and expect it to stay there. Ruby application can be made to check from the redis/memcache before searching some database or generate a web page or something and see if it's already done before and just return the stored content instead of spending time and resources on generating the content again. Passenger and unicorn are pretty much the same thing with minor differences, they run your ruby (or some other supported language) applications and return the output of your application to a web server. They can do things like start multiple instances of your application so that while one instance is already busy processing the request, another one can process the next request. Nginx takes requests from browser and passes them on to passenger, unicorn or just serves files (like html files or pictures) from a directory. Passenger, unicorn, puma, mongrel, webrick, etc (all do the same thing) can work without nginx or apache, but many run them together because nginx and apache are faster at serving normal files like html + pictures without having to have your ruby application do that and they can queue the requests to unicorn/passenger until they are free to process the request. Rack sits between passenger/unicorn/etc and your ruby application. With it you can create a stack of applications, so that the same request passes them all and each can do some operations on the request or response. An example would be a rack middleware that checks if the user has logged in and if not, redirect to login page and if yes, pass the request forward to your application so that it can return the content that was requested. Another example would be that if the requested url starts with /api, the request is served using a ruby application that processes api requests and if not, pass it on to rails which processes normal browser user requests. So the basic stack is: Nginx (responds to your browser) | +-+ Passenger (responds to nginx) | +-+ Rack (responds to Passenger) | +--+ Rack middleware | +--+ Rails app (responds to Rack (is also in fact a Rack middleware app) | + Database like MySQL/PostgreSQL + Redis/Memcached 
I listen to [Ruby5](http://ruby5.envylabs.com) frequently to learn about the latest news and great tools for my Rails apps.
Locally this is serving up content with content type [text/plan](http://i.imgur.com/I7D1OXu.png), might want to fix that.
That's really cool, didn't know that existed.
Another thing to note here is that `#each` introduces a new scope, whereas `for` does not. $ pry [1] pry(main)&gt; d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [2] pry(main)&gt; for x in d [2] pry(main)* t = "hello" [2] pry(main)* end =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [3] pry(main)&gt; t =&gt; "hello" [4] pry(main)&gt; x =&gt; 10 vs. $ pry [1] pry(main)&gt; d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [2] pry(main)&gt; d.each { |x| t = "hello" } =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [3] pry(main)&gt; t NameError: undefined local variable or method `t' for main:Object from (pry):3:in `__pry__' [4] pry(main)&gt; x NameError: undefined local variable or method `x' for main:Object from (pry):4:in `__pry__' Check out [this question](http://stackoverflow.com/questions/3294509/for-vs-each-in-ruby) for more. 
As a stylistic note, you might consider using a different block variable name when calling Array#each, because i is conventionally used for iteration count, but in this example i is instead used to refer to the element. If you want what i normally refers to, check out Array#each_with_index
Code School is legit. Thanks!
Which interpreter did you benchmark that on? Because that's exactly not what I get.
Cheers, I wasn't aware of that. [Fixed](https://github.com/daz/powapps/commit/90e22bf2a850ddcf1c3d053dec7ef725915e17e7).
I think stdin is the main object for standard inputs so you are calling the same thing when you write stain.gets.chomp and gets.chomp. But I am also a beginner so I'm not 100% on this. 
One thing I am noticing is when I bring in parameters with ARGV, I need to use the STDIN.gets.chomp(). I think it has something to do with having to be specific about the methods we are pulling, but I am not there in understanding why. 
You can't open a directory as a file. the e stands for error, and isdir means is_directory. So specify a filename, not a directory.
The file the site is sending back to me is a zip file named search_result.zip. So I should have /Users/jody/Desktop/search_result.zip? If I do that I then get a different error. bad URI Or do I need to go about this a different way?
Since you didn't specify a filename in your File.open, I wonder if you might be wanting to save the file with the filename of the zip file returned by the open() call. Using open-uri, it's a tad tricky (but doable!) to get the name of the downloaded file - the filename is stored in the HTTP headers. This [Stackoverflow post](http://stackoverflow.com/questions/13393725/ruby-how-to-get-the-name-of-a-file-with-open-uri) explains how to do it with a bit of regex. If you use mechanize gem instead of open-uri, it's a lot easier to get the name of the zip file. require 'mechanize' agent = Mechanize.new file = agent.get('http://clinicaltrials.gov/ct2/results?term=&amp;recr=Recruiting&amp;rslt=&amp;type=&amp;cond=&amp;intr=&amp;titles=&amp;outc=&amp;spons=&amp;lead=&amp;id=&amp;state1=&amp;cntry1=&amp;state2=&amp;cntry2=&amp;state3=&amp;cntry3=&amp;locn="university+of+virginia"&amp;gndr=&amp;rcv_s=&amp;rcv_e=&amp;lup_s=&amp;lup_e&amp;studyxml=true') puts file.filename =&gt; "search_result.zip" Granted, mechanize has dependencies which add a lot of bloat that you might not need, most notably nokogiri, so the open-uri route might make more sense for you. In either case, you would need to download the zip file BEFORE you open the local file - so you can set its filename properly :)
Most likely that has to do with the open() line. At a glance I would say it's the quotation marks that need to be urlencoded
whoa, that whole block is crazy. input = if-statement....
that's the problem
Not really crazy - there is an implicit return from each path of the if block. I think this is a common ruby-ism
you could also do the one liner that follows: input = File.exists? ARGV[0] ? File.open(ARGV[0], 'r') : STDIN I feel it looks a bit cleaner than the full block.
I'm fairly new to ruby, still trying to learn various "rubyisms" for maximum efficiency and expressiveness. I don't think I've seen that kind of construct in any language before.
Couldn't you still use gets.chomp instead STDIN there? 
Had to give it a go, so opened up the laptop. This seems to set `input` to an object `#&lt;IO:0x007fff1a86f530&gt;`: input = File.exists?("ARGV[0]") ? File.open("ARGV[0]", 'r') : STDIN While this sets `input` to a string: input = File.exists?("ARGV[0]") ? File.open("ARGV[0]", 'r') : gets Hrm, fun with strings. Maybe someone that knows more than ruby than I do can explain? (Also both versions work with the correct filename, or no filename, but not if the filename is incorrect.) edit: the STDIN version works using the gets Object method (`input.gets`), so there's the difference... The Object method can use `gets` while the String method cannot. (*I think that's what's going on anyway*)
How does this help the OP with their problem?
It's useful as a way to make your code more [functional](http://en.wikipedia.org/wiki/Functional_programming) (specifically, reduce the use of intermediate variables). Here is a good article on it: http://www.opensourcery.com/blog/zack-hobson/objectlet-ruby-0 Here's where I used it most recently: def process(char) scrape(char).tap do |lookalikes| case lookalikes when -&gt;(x) { x.count &gt; 0 } then emit char, lookalikes when -&gt;(x) { x.nil? or x.count == 0 } then @logger.info "#{char} - No lookalikes." end end end
Considering there were three or four answers already posted, I figured it would be more helpful to bring up a new technique. If OP tries TDD, then it would be a long term benefit. It might also have the positive side effect of not having to ask the same question of two different snippets of code. Teach a man to fish, and all that... 
It isn't the same. Kernel#gets is ARGF.gets so it can read from files listed in ARGV.
You can get virtual private servers for as low as $5 / month. But to learn Rails / sinatra you don't need to host it anywhere else than your own laptop unless you're running a public service. 
The problem is when I go to a hackathon I need to deploy it online. So for example in a hackathon yesterday I wanted to go with Sinatra as a backend but because of few experience with deploying I just went back to php. 
Yeah, that's not a performance argument. The thing with performance arguments is that they tend to become wrong over time. For is faster than .each on jruby, for instance, which is why I commented. Mind you, the difference in either case is only a few percent, so making the decision on that basis alone isn't particularly justified. Stylistically... it's arguable. The github style guide is a good starting point, but I wouldn't take it as gospel.
So you use it similarly to writing a method inside another one in Python or JavaScript? As in, naming the tap method and writing it before the loop, and calling it inside the loop?
Just a few people from my RSS feed: * [Ben Orenstein aka r00k from thoughtbot.](http://codeulate.com/) Love this guy. Definitely watch his talk [Refactoring from Good to Great](http://confreaks.com/videos/1233-aloharuby2012-refactoring-from-good-to-great). * [Zach Holman from GitHub.](http://zachholman.com/) * [Aaron Patterson aka Tenderlove, the only person that's in both the Ruby core and Rails core teams.](http://tenderlovemaking.com/) * [Ernie Miller, Rails contributor.](http://erniemiller.org/) * [Avdi Grimm, creator of Ruby Tapas.](http://devblog.avdi.org/) * [Yehuda Katz aka wycats, member of the Ember.js, Rails and jQuery Core Teams.](http://yehudakatz.com/) Also one of the main contributors to the active_model_serializers gem. * [Sandi Metz, author of Practical Object-Oriented Design in Ruby.](http://www.sandimetz.com/)
There are many, many blogs out there that represent the author's interests, but perhaps aren't so tailored to wider audiences. It's quite normal to see a blog evolve as the author develops: initially it's some quite basic stuff, then as they learn how to write gems that appears, and then over time they're writing long tracts on DI and the internal implementation differences between lambda and Proc. There are few quality blogs that appeal to all levels, and so the reader needs to go and find the generalist blogs as well as some more that are hitting the spot they're in themselves. I'm a CTO and there aren't any decent blogs out there for people doing my role in Ruby shops, to my knowledge. If you know them, shout. I'm thinking about starting a blog for CTOs but each role is so specialised, it's hard to see where to start. What might make more sense is something for developers from the viewpoint of a CTO so they can understand how to see the World from this angle a bit more. Anyway, I'd add to your list as a minimum: * http://www.rubyinside.com/ * http://rubyquicktips.com/ * http://www.rubyflow.com/
TBH, it works better as a random selection in your browser home page: http://rubyquicktips.com/random There's a lot of interesting tips in there. Worth knowing for many, I think.
A typical use-case for me is when I want to find or initialize a record, and also update/set an attribute. For example user = User.find_or_initialize_by(uid: uid).tap do |u| u.token = token end I just prefer the above block style over user = User.find_or_initialize_by(uid: uid) user.token = token This example is a little trivial, but you should get the jist
Mostly rails related stuff, sometimes very short, but very often it's an excellent source to keep up with the latest gems. http://afreshcup.com/
Beyond that though, the fact that "for" does not introduce a new scope is pretty significant.
&gt; Is it enough for me ? There is never going to be "enough" by simply reading books/following courses. https://www.codeschool.com/courses/try-git to learn git fist, then sure start with those links. There are also links in the right side menu on this page for "Learning Ruby?" Once you have done a course or two try to build something yourself. When you hit a wall start searching on google, someone else has run into that problem and had it solved almost all of the time.
Excuse me, I meant if it is enough for beginning
I want it to be my first real programming language.(Learned a bit in the past, it was Pascal, but haven't studied it deep, all I was able to do - simpe arrays). Thank you for your post, it is delightfull. I will study it for sure. Can you enlighten me on "gems" from ruby? Are they also tools that you have mentioned? Or Are they something like '#define System.IO' or 'using System.Windows.Forms' from C-based languages?
I got a two day trial pass. I must say it is a neat learning format. I have done dev work on proprietary online learning LMSes and it is very well done. I will probably grab a month or two. The iOS track is intriguing, I haven't not had time to learn Obj C other than a doing a quick hello world. I will let you know how my two days.
Then yes!
Codeacademy is great and I can also highly recommend [Codeschool](https://www.codeschool.com/courses).
I typically combine tap with inject to get maximum job security
Could you explain that further?
You are indeed correct. Cheers!
sure, lets say you have a regular instance variable, well everyone can understand that so lets replace that with a tap. Nine times out of ten people are just doing that to feel cool about themselves or shave off a few keystrokes. The problem is that code with tap is only partially intention obscuring and we need full obscurity if we want to make sure no one can ever refactor our code. This is where inject comes in. The first step with using inject is to make sure you aren't using the reduce synonym. Inject makes no sense unless you have a background in smalltalk and it's safe to assume very few people have that. I've seen people use inject before to generate static data structures where they didn't want to repeat a value in a hash that was the same for a few different keys. Really the sky is the limit with inject especially when you ignore it's reason for existing. **tl;dr**: i think most uses of tap are just to help people feel like they are smart and/or to obscure the intention of the code. there is also a minority who truly feel like the saved keystrokes matter.
I highly recommend reading [the Kestrels chapter](http://combinators.info/#kestrels) of Reginald Braithwaite's [Kestrels, Quirky Birds and Hopless Egocentricity](http://combinators.info/) for his take on Object#tap. It probably won't have the same effect on everyone, but it fundamentally changed the way I looked at writing Ruby. **WARNING**: may lead to harder drugs like Haskell (it did for me).
Yes. Code school is really specific to Ruby related courseware. They've really put a lot of thought into their courses. I've never been confused by their presentations
Probably 90% of my use for it is when I want to acquire a hash, do some complex modifications to it, then return it. It's the easiest way to ensure you don't accidentally return the last assigned value instead. 
Thank you!
http://pine.fm/LearnToProgram/?Chapter=00 This is my favorite programming book. It helped make me a programming and now I recommend it to everyone else. It's very simple to understand and very easy to follow.
It should be either in a before/after block or an it block to be accessible :) I'd change the loop to: addresses.each do |invalid_email| it "#{invalid_email} should not be valid" do @user.email = invalid_email expect(@user.valid?).to be_false end end
Everybody hates hashie, but `ostruct` and `struct` doesn't work with nested hash as intended. I really like `objectified_hash` approach there https://github.com/narkoz/gitlab/blob/master/lib/gitlab/objectified_hash.rb
rvm --default &lt;insert something&gt;
Check to make sure there aren't any .ruby-version or .rvmrc files in your project directory that are specifying jruby.
 $ rvm --default ruby Please note that `rvm ruby ...` was removed, try `ruby ` or `rvm all do ruby ` instead. ( see: 'rvm usage' ) I'm thinking there is a keyword missing from this.
I'm still getting the same NoMethodError--any other suggestions?
I'm afraid I do not understand. What do you mean by "project" directory? (Like I said, I haven't used Rails yet.)
To clarify, I think you meant `rvm use ruby --default` which seems to work after closing and reopening a terminal. At any rate, thanks for helping me fix this.
I just mean whichever directory you're starting irb from. RVM will look for files in your current directory with those names, and if they exist, it will use the ruby specified in them. I don't remember which one takes precedence; but usually if I end up running a ruby I didn't mean to, one of those files is the culprit.
'gems' are basically just what Ruby calls packages or libraries. Just bundled code that is meant to be reusable and broadly applicable. For example, if in your program you want to be able to spell out numbers to the user in sentences, e.g. "You have two dogs", but the 'two' needs to be calculated. You could write your own function to translate 2 -&gt; 'two'. But that's a pretty common coding problem. If you search rubygems.org, you'll find gems like this - https://github.com/kslazarev/numbers_and_words, that already solve that problem. So you can just use that 'gem' in your ruby program to get all of that same functionality. Gems are great, and they will make your development go much faster. But don't go too overboard with them - I've seen projects that try to use 100+ gems, which can get chaotic.
didnotseethatcoming: exactly. Associations is much better.
Could it be because you're not saving the user to the database in test cases? Try @user = User.create rather than User.new
Which line are you getting the error on? And I second the point about trying the test with User.create, just to see if saving it to the database actually prevents the error.
I tried that and it still didn't work--though it should verify before saving, so it's breaking before any database interaction would be involved 
sample_app/spec/models/user_spec.rb:48:in `block (3 levels) in &lt;top (required)&gt;': undefined method `email=' for nil:NilClass (NoMethodError) It errors on the line inside the invalid email block at @user.email = invalid_email saying that there is no method email= for nil:NilClass--I just don't know why Rspec won't recognize my @user model (it does in all of the tests before this one)
I'd also like to know
If you use rails-api, keep in mind that a lot of gems inject themselves into ActiveRecord::Base, so you may find yourself having to add include statements for various things.
Thoughtbot Learn is very good and has the option of a 1-on-1 mentor. Works great for me.
&gt;# Usage User.find_or_create_by_api(:github, data).inspect #=&gt; #&lt;User id: 1, name: "Dean Martin", email: "dino@amore.io", token: "abc123"&gt; Should "token" be "auth" in this example?
It's not scoped properly (as was stated by the top commenter). If you define an instance variable in a `before` block, you can only access it inside other before/after blocks, or `it` blocks. His code is the correct fix - try it and then give him an upvote :)
Quickly tacking onto this: I also really enjoyed [Rubymonk](http://rubymonk.com)!
Ah good call. I fixed it. Thanks My first version of the code had the db attributes as keys, and when I got into nested configs, it wouldn't work so I had to switch them. Don't think my brain ever caught up.
No problem. I'm not a Ruby developer, so I'm afraid I can't give much in the way of feedback. Looks like it could be helpful for people that interface or integrate third-party APIs though.
That sounds large but then I dont honestly notice these days. Maybe try the --disable-install-doc configure option, although thats just a guess....
http://rubycon.rkcudjoe.com/ : It's I project I launched just this weekend and I already have some positive feedback. I hope more people start contributing their links. For now, it just reading a bunch of content and recommending the ones I think are useful for beginners since I'm a beginner myself.
Am I the only one around here that thinks blocking/throttling in Ruby is insane? Ruby is, relatively, slow. Throttle with nginx, throttle with C/C++, hell, even throttle with java, but it seems crazy to do this in Ruby.
Many thanks! That worked perfectly! :)
Ruby Inside hardly ever gets updated.
Why does everybody hate hashie?
I'm currently using Unicorn on Heroku, so I don't really have a choice. Also, I have a throttle for which I need to parse the JSON in the request body, rather than IP address - that probably reinforces your point to an extent :) It doesn't look like nginx limit_req can do that sort of thing - is there an alternative?
When would a really nested hash like that be better than creating a separate data structure? I can see tap being useful there, I just can't see the code getting you to a state where you have such a hash as being useful over writing a specific data structure...
&gt; API An API is where you define how your clients will use your code/library. For example, the ActiveRecord library has defined their API for looking up a record with id 123 by using "MyActiveRecordModel.find(123)". &gt; github Github is a platform for hosting Git repositories. Git is a distributed version-control system. I recommend learning to use a version-control system; git works well enough for my needs. &gt; opensource Opensource software is that which you may take and modify to your needs (I'm simplifying here, it depends on the license used). To paraphrase what I think you're getting at in your first paragraph, you can write your Ruby software according to whatever API you come up with. You could decide to make it available on Github. If you publish it with an opensource license, then you are allowing others to copy your code and modify it for their own uses. This last point is not necessarily the standard in software usage. In my experience it is usually just 1) someone makes software, 2) they publish it somewhere, 3) I use it as-is. As for IDEs, you can use what you're comfortable with. I used Eclipse and Aptana and Netbeans for a long while, then switched to Textmate, and now I use Sublime Text. Full-blown IDEs will give you some nice-to-have features such as "find method usages" or "refactor method" etc. I've found that I'm productive enough simply searching my project for keywords or method names to get such tasks accomplished. Some co-workers of mine simply use VIM. I'll defer to the other commenters on the ruby tutorial sites as I've never used them. Have fun! Challenge yourself. Make up things. See what works and doesn't. Ask questions. 
Thanks for posting this. I have a new member joining my team who has linux knowledge but no chef knowledge. I will have him run through this and let me know what he thinks.
Awesome! Thanks, I want this to be a great "primer" for someone. If you need an elevator pitch on it i have a "lightning" talk deck [here](https://speakerdeck.com/jjasghar/chef-book-lightning-talk)
I see nested hashes like this quite often in my line of work -- consuming and creating JSON APIs.
Also, you're almost always dealing with nested hashes in Rails controllers (params)
http://www.rubytutorial.io/
It can be useful but I worked with projects where they were treated like glorified hashes - there was no benefit of having setter / getter methods defined. It always looks like people don't like typing square brackets etc. For me it's an antipattern where instead of creating proper classes people take the easy way out.
I've found that ansible is an easier sell, because of the distribution model.
you didn't break it, you made it better... On a serious note, do you have a .rvmrc file anywhere in your source root directory? RVM will read this and load the ruby referenced in it. Take a look at http://rvm.io/workflow/rvmrc and see if it helps. 
Broadly speaking, build and setup tasks. Is this for rails, or more general projects?
Glad it worked. :) The biggest cause of downtime is usually something new which needs the kinks working out. Once we "old" peeps have things up and running stably, anything "new" gets pretty scary since it usually means we have to do some work rather than look like we're busy!
Resources that contain mailing addresses for congresspeople are frequently out of date or faulty in some way. I'm not sure what the best single source of all of this data may be, if there is a single source, but I've worked on a project in the past that needed it and it was dropped due to uncertain availability of this data.
Short version: In Rails apps, I use it quite a lot for configuration management tasks. Longer version: Often, after releasing a new version of a web app, there can be one or more tasks that need to be performed once, often related to existing data. And in apps that have been around for awhile, it can sometimes be difficult to tell if there are latent data quality issues that prevent those tasks from running to completion against every relevant database record. I tend to use rake tasks a lot for these purposes. I write them in much more verbose style than I would for normal app code, with lots of log/puts messages, and lots of reading data first, building up the information that will be needed for a data update, and checking for proper states. I also try very hard to build in per-object idempotency, so that when such a script occasionally crashes in the middle, I can fix the bad record that led to the crash, and kick it off again to catch the remaining records. So once I have the task generally written, I test it against all the data I have in my local database, to make sure it's basically good. The companies I've worked for tend to have multiple deployed environments, as well, so that gives me a chance to validate my task against our dev and staging environments (which usually have the worst data quality) and make changes as needed before running the task on real production data. There are many other uses for rake tasks; this is just the pattern that I use the most frequently in my daily work.
Thanks a lot!
&gt; taking a step toward automation, ... even if it seems to have been shunned by the upper tier admins. Presumably the "scary" Perl scripts are automating the relevant processes.
Thanks for this, I've just become responsible for some machines that are built using AWS opsworks and am a complete newbie when it comes to Chef.
95% of my rake tasks are either importers (e.g. loading external vendor-supplied data into my database) or periodic email reports
Thanks for posting this. I wanted to know how this is done
I would recommend to use **let** instead of **before**. This could be your issue. If you want to read more, check this out: http://betterspecs.org/#let
This is awesome guys, i'm so glad people are cool with it. I'm more than willing to take suggestions, help, PRs, anything. I want this to be a one stop shop for a primer to chef.
I only use ruby to write cli scripts. My rakefiles build gems, publish gems, build docs, run tests. 
i created /r/chef_opscode but it's not very active.
Austin, TX is a great option as well. There aren't enough Rails devs for all the work here; at least that was the case before the winter slump started. 
I am very excited for this. Looking forward to trying to break it (as the README suggests).
I'm a bit biased but you probably want to give Rails a try. You can start by going through Rails Guides: http://guides.rubyonrails.org/ It's a bit overwhelming, but it starts to make sense rather quickly. Plus you don't really need to know every nook and cranny of the framework. If you get stuck, you can find an answer for pretty much any question you might have on Stack Overflow: http://stackoverflow.com/questions/tagged/ruby-on-rails Django is a similar framework, but in my experience it's more like Sinatra and not Rails. I did not enjoy working with it. I was always expecting to find functionality that is found in Rails, yet in Django I had to hand-roll it. 3rd party libraries for Rails are just better too. Python is a fine language though. Meteor.js is probably not even in the same opera as far as CRUD applications go. However, I don't have any working experience with it. Looked nifty when I saw it months ago.
I'm a Ruby dev. I think Rails is pretty good, and I think it'd be the easiest of the three options. You're also asking in the Ruby subreddit. The learning documentation for Rails is far better than the other options. I know a lot of people like Django, I just haven't agreed with any of them. It has its benefits and people coming from academia like Python, so naturally they go with a Python framework. If you want to start building scientific apps, you'd be well-served going this route. However, if you want to skate to where the puck is headed, go with Javascript. **Not Meteor.** Learn Node first, and then if Meteor takes over, you can easily make the switch. Watch the Node and Express vids on codeschool.com, *learn the ins and out of Javascript*, and read Javascript: The Good Parts. And don't get caught up in the NoSQL/Mongo hype, you don't need it for what you're doing. Focus on learning Postgresql until you know why it's not the data store for you.
A link to a set of links which don't even link to the article linked from the initial post. WOW! Lucky I had my coffee this morning. Oh, and the article is yet another of those silly articles which make something very simple sound incredibly complex. I'd expected more of the author.
Meteor represents a paradigm shift. It does away with [REST](http://en.wikipedia.org/wiki/Representational_state_transfer). I actally think that's the future. HTTP is getting old. And yes, you are right, development time in meteor is very fast. I chose Ruby on Rails because I like Ruby just a little bit better than Python. Rubuy is a bit more crazy, free, expressive than Python. It's more of a mess, too. But still, it appeals to me. My advice to learn wed dev would actually be this: https://www.udacity.com/course/cs253 It's in Python, but you can do it in Ruby and Rails/Sinatra, or Java and Play! for that matter. It will teach you the fundamentals. If you know the fundamentals it's not too hard to switch to another language or framework. 
Please avoid using C Extensions and use the ruby FFI interface wherever possible, especially if you intend to distribute it. It is more compatible with things like jruby and rubinius. It would be nice for original blog post to also talk about the trade-offs of FFI vs Cext [EDIT] I should rephrase that my earlier words to "Do not use Cext and Static libraries if you can avoid it; Use FFI and shared libraries"
There are some cool examples out there like the stuff from [Ryan Bates](https://github.com/ryanb) who runs Rails Casts. There is a lot of crap out there too, which is worth looking at when you know a bit more. I do a bit of rails, and I'm trying to do more now that my internship is over. If you're ever interested in working on something together, or swapping notes, let me know. 
&gt; The learning documentation for Rails is far better than the other options. That's debatable. The Django docs are pretty solid in my opinion. If you just look at the Rails Guides, then yes. But the Rails API documentation leaves a lot to be desired compared to what the fabulous folk over in Django-land have done. That being said, if you're a newbie, the Rails Guides should cover the majority of the use cases you'll experience (for now) 
So, the problem I was having was that I kept changing one spec, but not the other (only the valid emails and not the invalid emails spec). Thanks for your help!
&gt; HTTP is getting old. Except it's super easy to cache HTTP and makes sense for content that isn't changing constantly. Sites that don't change a lot definitely benefit from that. I recall one of the Meteor devs (or a dev that uses meteor) threw some linkbait up on HN and their site didn't work because: 1. He was using websockets to send the data over (and couldn't cache it) 2. Because he wasn't caching his server keeled over and died 3. Because it was uncacheable people couldn't share a google cache to read the content instead
How would FFI work with a static library (which is what this article is about)?
Me too. It has everything I want for running on Heroku (database backed, by Postgres so no need for expensive redis addon, and the ability to run in the web process). This seems perfect for background carrierwave processing and uploads. 
https://news.ycombinator.com/item?id=6642893 4. The blog page refreshed when he reloaded the webserver, causing anyone reading the blog to suddenly get unexpected "Reloading" messages. ( https://news.ycombinator.com/item?id=6643108 ) Basically he used the wrong tool for the job.
Fair point, the Django API docs are solid. I meant "learning documentation" more in the sense of the ecosystem of tutorials/videos, etc., and not just the official Rails Guides.
http://ruby.railstutorial.org/
How is this different to and better than https://github.com/ryandotsmith/queue_classic
Great article. Learned a couple new awesome shortcuts in Sublime Text. Reminded me about plugins so I have a feeling I'll be wasting a day or at least a few hours in the near future searching out other useful plugins that fit my workflow. thanks!
&gt; Meteor represents a paradigm shift. It does away with REST. I actally think that's the future. HTTP is getting old. And yes, you are right, development time in meteor is very fast. Wut? HTTP isn't getting old, it's only just finding it's feet. As others have pointed out, there are problems with caching on other content, and there are considerable problems with scaling. WebSocket is great stuff, but it involves keeping TCP connections open for long periods of time. For many apps that might not be a problem, but for some that gets hard to scale. My day job involves a site doing millions of unique visitors a month with an average duration per visit well over an hour (it's streaming video), so it doesn't take a genius to work out that locking up that many TCP connections is costly for us. We have websockets implemented via Pusher so it's somebody else's problem, but considering bringing it in-house soon. And trust me, it's hard to get this right operationally.
If its a trivial application, implement in all 3 and form your own opinion. Your list is a few hours (or less!) in meteor, and probably...well a bit longer in Rails/Django but once you're familiar with the frameworks, I believe both are equally as productive (and probably more so due to the ecosystems) as Meteor. I would also look at Rails/Sinatra + AngularJS as an alternative to meteor.
Have you looked at fb_graph? (https://github.com/nov/fb_graph) Documentation at: http://rubydoc.info/gems/fb_graph/2.7.8/frames Also see: http://fbgraphsample.heroku.com/
first, you're kinda trolling asking /r/ruby if you should pick django or meteor. Why not ask the people who are more familiar with those frameworks? at the moment, I'd say meteor is best for 1) prototyping or 2) apps that require real-time communication. Most sites aren't doing either, but if you are, check it out. I love it - very easy to learn if you're familiar with javascript but also very young so you're limited by database choices and even in stability. if you're not interested in those two things, or care about job prospects etc.. pick either rails or django. The choice is largely to do with which language's syntax you prefer. I like ruby's blocks, but it's a preference rather than a deal breaker. 
&gt; If we try to raise an object that is not an Exception ...or a string.
Looks similar, except: - que seems to offer an async thread for running in the web process (no separate worker/executable, while queue_classic doesn't - que's last commit was 13 hours ago. queue_classic's is 2 months. ...the 2nd issue may shake out, but the first one is a really interesting (as sucker_punch isn't database backed)
Since learning these switches, I've managed to forget what little I ever knew about sed and awk. It didn't ever occur to me to use BEGIN though. 
Will look into it, thanks
Thank you for the links! Checking them out now
Be sure to check other useful flags, like Perl's `-l` which automatically adds and removes line-endings when appropriate, and `-i` for editing files in place.
Reminds me of copycopter - https://github.com/copycopter/copycopter-ruby-client - a thoughtbot SaaS that doesn't really exist anymore. Neat library, I think we'll try it out for a client in a future project. 
print_first_word is meant to be called with probably an array of words, or something similar. You're calling it with "words," which hasn't been defined up until that point -- Try doing something like: words = ["these","are","some","words"] Ex25.print_first_word(words)
You'll see in the example on your linked page that they create their array of words using a sentence. sentence = "All good things come to those who wait." words = Ex25.break_words(sentence) before calling the other functions.
Yes... in the irb, I actually passed in a sentence to break_words and then order words. I did this for the sentence "All good things come to those who wait" And it worked as expected. The variable words is an array that is sorted. In the irb, if I print words, it looks accurate. I then used print_first_word(words) and blammo. broked. 
Ok, reworking these problems while trying my best at refactoring. Is http://pastie.org/8496441 better? Also, how do you test in Ruby? I've done rspec when doing rails but can't seem to wrap my head around testing ruby code by itself. Wouldn't you need two .rb files and how would you run both... don't need to answer, I'll google. Just haven't gotten that far yet in my ruby education. 
those commands look to be the same as the example. sentence="This is a phrase" thingy=break_words(sentence) #make sure this returns array print_first_word(thingy) #this should output the first word "This" does this not work for you? Only other thing I can think of is you called Ex25.print_first_word(words) too many times and shifted out all the words. Everytime you call shift, it'll change thingy/sentence so in the above example, you would only be able to call print_first_word 4 times - then thingy would equal []
That's cool. But isn't Cmd-P the canonical Sublime Text key for these searches, not Cmd-T?
super.initialize does not what you think it does. That needs to be super(@@search_base, params) super without parentheses will call the current method in the superclass with the parameters for the current method. So in this case it's equivalent to super(params). (With the small difference that super without parentheses would also pass through a block if there is one) Also: be very careful with class variables, they often don't do what you expect. In this case I would use a constant instead class AucScraper SEARCH_BASE = "http://poe.xyz.is/search" end Or else use a class instance variable: class AucScraper @search_base = "http://poe.xyz.is/search" def self.search_base @search_base end def initialize(params) super(self.class.search_base, params) end end
I'm wondering what you'll end up using, let us know :)
Sounds good. Thanks for the answer! I'll give that a try after work (posted on my lunch break). What do you mean by class variables not doing what you expect? I know you can change a class variable within an instance method, and I agree that a constant is better in that case, but is there something else I need to know about with class variables?
Hmmm...'call it from irb'. What do you mean? What 'program' are you referring to? Is there an online course that has an input box and that's what you're referring to? There's no difference between running a .rb file and calling that same file from irb.
How easy would it be to incorporate a Gosu game in a rails project?
Well... I walked through it and i'll be... it worked. I cannot see the differences, but I suspect the damn user must have messed up somewhere. I will make sure he is fired. Thank you for your help in working through this. 
If you add a subclass of AucScraper that uses a different @@search_base then AucScrapers @@search_base will change too. See: http://stackoverflow.com/questions/1251352/ruby-inherit-code-that-works-with-class-variables If you add a subclass of AucScraper and set a different @search_base then AucScraper.new will still use poe.xyz.is/search as it's @search base, but SubAucScraper.new will use example.com/search as it's @search_base (even if you don't override initialize) I was also thinking of some quite strange behaviour based on the order you created subclasses and when you used the class variable for the first time in the super class. OTOH I can't replicate it so either some things were changed with ruby 1.9 or I remember things incorrectly. 
My guess is because i posted it in the Ruby subreddit instead of the Rails one. 
You're welcome! Glad to hear you found it useful.
As I understand it that's for Linux actually.
Here's a `bin/add` (for an OS where your #! processing isn't broken): #!/usr/bin/env ruby -wn BEGIN { $total = 0 } case $_ when /\d\.\d/ then $total += $_.to_f else $total += $_.to_i end END { puts $total } 
If your processing CSV like data you might like the `-a` and `-F` switches, too. From the documentation: -a autosplit mode with -n or -p (splits $_ into $F) -Fpattern split() pattern for autosplit (-a) So you can do: ruby -F: -ane 'puts $F[6]' /etc/passwd And don't forget about `-i` if you want to change the files in place, like so: ruby -i.bak -p -e '$_.gsub!(/localhost/,"sweethome")' hosts
You should also go ask the Vim guys whether you should learn Vim or Emacs ... You really need to use a language you enjoy and then pick a framework based off of that. Building your idea using a framework just because it is popular is not always the best decision. If you are starting out you should be working with what is most comfortable to you and as you grow in your career start branching out to different frameworks and languages.
You can find some great Ruby one liners here as well: http://benoithamelin.tumblr.com/ruby1line
To be fair, finding {} on a mac with non-english keyboard layout might be a pain :|
What the seagull brothers? Aren't they located behind the square brackets? {[Just shift]} 
Oops, Stackoverflow just deleted the question. Apparently there is such a thing as asking stupid questions on SO. Not very friendly to newbies I believe.
I've been meaning to do this for ages, but didn't realise how easy it actually was in Jekyll. Done! http://robm.me.uk/feed.xml
I'm not sure it's anti-newbie, anti-troll perhaps. [Google Cache](https://www.google.co.uk/search?q=google%3Ahttp%3A%2F%2Fstackoverflow.com%2Fquestions%2F20116301%2Fcan-somebody-tell-me-how-to-type-curly-braces).
I second this. I've found that the best way to learn is by actually doing and by following the examples of people who know what their doing (best practices), building something from the ground up. I've done that tutorial 3 times now using it as a base resource (with other resources on the side) to build different types of applications and it has been extremely valuable. Besides that the railscasts videos are excellent. 
So far, I've indexed the ruby standard library and the current version of every ruby gem. I've got lots of ideas, but I wanted to know what would make life better for other ruby devs before prioritizing new features and enhancements.
I like it a lot! kudos!
Pretty impressive! I'm already using hehe Comments below the definitions would be great to, because other users can post some usages tips for the functions, just like the PHP Manual website: http://us1.php.net/is_int#usernotes Don't know if this will be tricky to implement, but its a idea :P
Comments on documentation are definitely on our TODO list, it's been a pretty common request so far. It'll take a little bit of work, but hopefully we should be able to get it rolled out sooner rather than later.
Great work on this. The existing Ruby doc sites suck, hard. This is a nice alternative.
You make me forget what I was going to... 
Sarcasm, I hope. If not, the answer is: yes, there are a **lot** of things wrong with ruby-doc.org. Search for something simple, like "puts"... [here](http://i.imgur.com/YynTuqP.png) is what documentation should look like. [Here is the useless garbage](http://i.imgur.com/kF3PriW.png) that ruby-doc.org spits out.
It looks good. I have a couple of suggestions: 1. Allow for easy version switching while looking at a particular method or class. APIdock (my current go to) has this and it can be very helpful when upgrading or debugging. 2. When I search for a method the signature and return type have the same visual weight. They're at the same level, same text size, and color. It makes it hard to quickly scan the method signatures. edit: Old vs New example for the second point. [old vs new](http://i.imgur.com/9sVASlI.jpg)
I'd love it if you prioritized 'keywords' like break, return, next, if, etc. It took me ages to find information relating to control structures with ruby-doc.org.
I agree with #2, and I'll implement your fix. #1 is going to take a bit more work, but we've got it on our shortlist. Thanks for the feedback!
To be fair, they use Google search so the ads are not so surprising.
&gt; ...but there's no need to be patronizing. I'm just talking here, not shitting down anyone's chimney. I honestly could not tell if the comment I replied to was sarcasm or not. That isn't something to take personally.
Hmm, couldn't you just run queue_classic in a background thread yourself? You can run any ruby you want in: thread= Thread.new do any_ruby_you_want end At least that's what I planned to do with queue_classic, when I saw it and figured I'd give it a try when I get around to needing a queue, which I haven't yet. The que readme suggests that in some simple benchmarking, the author believes que performs better than queue_classic though. 
Great! Bookmarked.
Very nice. This is a real service to the community. Right on.
Looks awesome! I'll definitely use it. One question -- is it meant to be typeahead search? Because as soon as I start typing, the search bar pops to the top... but no results show up.
Yet another "want to search by version".
We're set up to do multiple ruby/gem versions, but we're still working out the kinks. It's coming soon!
It's a useless search feature for sure, but I don't think that's the primary way ruby-doc is supposed to be used. If you go to the [Core API page](http://ruby-doc.org/core-2.0.0/) and scroll down to the Classes and Methods boxes, you can type a class or method name and it filters your options and links you to the appropriate documentation. That part works beautifully and hasn't failed me when I need to look something up. Are most people not aware of this, or think it's not usable?
huh
First see what version of ruby you are using. rvm list Here is my Ruby.sublime-build file: { "env":{ "PATH":"${HOME}/.rvm/bin:${PATH}" }, "cmd": ["rvm-auto-ruby", "$file"], "file_regex": "^(...*?):([0-9]*):?([0-9]*)", "selector": "source.ruby" }
When I was brand new to Ruby the lack of useful search results from the main search was extremely frustrating. Now I know that I can filter on the Core API page as you mentioned, but that still feels clunky. We can't actually search from those filters, meaning we first have to go to that page, then scroll down, then click in either Classes or Methods and *then* we can finally type some search terms. Contrast that to what OP has created, or the [Python docs](http://docs.python.org/2/search.html) or even [PHP.net](http://php.net). Say what you will about the latter, but the docs are solid, clear and very easy to search. Documentation for Ruby is, overall, abysmal. For a language that prides itself on being human readable and simple, I've never been able to understand why the docs are so crummy.
I didn't take it personally. I just hoped I could encourage you to be more thoughtful. I also didn't mean any offense, though I'm not sure whether I caused any.
I went through this with rubber a few weeks back: web_tools,web,app,passenger,mysql,haproxy,mysql_master,collectd,monit,db:primary=true Gives you everything, but on one server (EDIT: Of course you must have vulcanised using a configuration which includes them or do them all individually). To split it out you will have to define multiple hosts and roles if I recall...http://www.eizesus.com/2009/03/deploying-ruby-on-rails-on-ec2-using-rubber/ gives some ideas (sorry this is the next step for me too) Now....I would not trust this stack on a live box; I'd run webtools only behind a firewall (jump on me if you will but graphite didn't inspire confidence from a security perspective). Also...one problem with Rubber is that it requires a lot of tweaking depending on your target OS. I'd look at running under Vagrant first and get a basic setup before looking at the webtools since thats where a lot of my time was spent troubleshooting.
Thanks for the reply! My problem was that I used the complete_nginx_unicorn_postgresql recipe and that didn't include graylog or haproxy. Now that I've vulcanised those recipes as well, those roles seem to have been attached to the web_tools instance. I'm still waiting on rubber to finish setting up the instances to see if it actually worked.
My terminal and irb show that 1.9.3 is being used. Thanks for taking the time to answer, but unfortunately I already tried the code you posted and it didn't work. Always error 2 no such file or directory and the letter 'u' keeps appearing.
Good eye! Our typeahead isn't quite ready for prime time yet. One reason is since we just started, we haven't seen how people complete their searches once they start typing. We're working on some educated guesses and once we've got people regularly searching we'll be able to learn a lot more.
Yeah, I understand. I've been learning python/using its online docs and comparing it to Ruby's. Which parts of the Ruby documentation do you think are sparse? I'm asking because I've contributed to ruby-doc a couple of times to help with this exact issue; if you have specific suggestions I can try to send a pull request about it.
A-ha! I will try to fill it out, then =)
Have you considered making this responsive? 
Hah I like the explanation for Spec.it :)
My rvm already uses 1.9.3. I'm trying to get ST2 to use 1.9.3 instead of the base 1.8. 
http://railscasts.com/episodes/399-autocomplete-search-terms seems pretty solid
Interesting ideas but it became hard to watch due to the very regular use of uh/uhm after each sentence.
There are a few lines of css to make it responsive for small, medium and large browser widths, but nothing terribly sophisticated yet. I've also noticed that mobile safari is ignoring @media (max-width:640px) for some reason, so I may have a bug to squish. Do you browse docs on your phone while you code on another device? 
I think this is great. I'll be using this for sure.
It's less flexible than Ruby, I don't like whitespace as syntax and some of the language features feel poorly implemented to me against Ruby. Don't get me wrong, Python is lovely compared to Java or C++ or indeed almost any other language. If Ruby didn't exist, I'd probably be a Python programmer: I'd have adjusted through the pain points. And sometimes when I want to use something that can only be done in Python, I'll get it done begrudgingly. But once you've really *got* Ruby, it's ugly by comparison. Ruby was designed to be a language that is joyful to program in. Not "clear" and "simple" and a "bridge between the shell and C" which are the design goals of Python. No, Ruby was just meant to be "nice". And it is. It meets that design goal well, and all other languages by comparison feel a little less warm and fuzzy.
 [winning Design PullRequest](https://github.com/ruby/www.ruby-lang.org/pull/338)
Here is what I have for my Ruby.sublime-build file: { "cmd": ["/Users/$MYUSERNAME$/.rvm/bin/rvm-auto-ruby", "$file"], "file_regex": "^(...*?):([0-9]*):?([0-9]*)", "selector": "source.ruby" } This works for me. Sublime uses which ever ruby version I have set to default in RVM. edit: A little more detail In other comments you mentioned the letter 'u' appearing, that is normal. It's an artifact of the way Ruby handles unicode characters and how Sublime deals with it. So just ignore them. The real problem you are having is that you have the wrong path and aren't actually linking to the file. If you prefer to use Finder to find the correct path, you can use this command in Terminal to view hidden files and folders: defaults write com.apple.finder AppleShowAllFiles TRUE Once you do that, you should navigate to your home directory in Finder and make sure the .rvm folder exists. If it does not, check to see if it exists in /usr/local/ in the hard drive directory. Once you find .rvm, navigate to the bin folder and make sure rvm-auto-ruby exists. Then use that path to point to rvm-auto-ruby. It will most likely be one of the following: /Users/$YOURUSERNAME$/.rvm/bin/rvm-auto-ruby or /usr/local/.rvm/bin/rvm-auto-ruby
What is it that you are trying to achieve with using ruby in sublime text? I used to do that too, but instead ended up using guard to run (test) tasks on every ruby file save. 
Be aware that this will use the version of Ruby that Vim was compiled to, which might be old and almost certainly won't be the version you're using for your other Ruby development.
It's nice and simple. Very well done.
Currently no. Audio can be sent as a video with the `play` command which will send it as a media and the Apple TV will play it but since it's basically the same way that sending an image it can only be one. Part of the idea is to add Airtunes to allow handing of audio in a separate way so other things can also be executed.
Here lies Ruby 1.8. You had a good run of releases, but with this new security issue it would be impolite to reanimate your tired bones with patches.
Are you https://github.com/elcuervo? If so, really nice work. I absolutely love shit like this. PS - I've never heard of Gumroad before, so I was hesitant to give them my credit card info. I'd love to donate a little bit of money to you for this project.
We have a similar home-grown solution where I work. What you have here looks pretty good! Just a note, we ended up having to (subtly) break format-agnosticism to support XML attributes and CDATA, so as you're looking to support more formats you may want to think about simple ways to handle format-specific details. 
"puts" was a very simplified example. One should not have to rely on a Google search of the entire web when looking for documentation as specific as this. The docs themselves should be clear and easy to use. 
Nice design...but is that Hello World example the best we can do to show off Ruby?
[Scala lang](http://www.scala-lang.org/) is super nice.
I did something similar to this a few weeks ago for 4chan threads. It could definitely be expanded as it just saves to whatever folder the script is ran from. require 'open-uri' require 'nokogiri' def download(url) document = Nokogiri::HTML(open(url)) document.css('.fileThumb').each do |thumb| system("wget http:#{thumb['href']}") end end download ARGV[0] It worked a few weeks ago when I used it and I assume 4chan thread HTML hasn't changed much since then.
True, the docs should be good, but searching google has always worked for me. I wouldn't use the docs site for searching even if it was decent because going to the site is an extra step. Just use good queries and searching the entire web isn't a problem. 
What are you talking about? The site renders and navigates just fine with JS turned off. Their randomly rotating example snippet stops rotating and you just get the same example over and over, but the page is hardly broken because of a degradation of a snippet rotation. edit: your comment history indicates you need to return to /r/php instead of trolling here
I am indeed. I'm glad you like it the future releases will allow more crazy stuff :). You were right, I've added the Paypal button. Thanks for the heads up.
Bro...https://github.com/enroxorz/grabmoot
it never changes. my old gem (grabmoot) has been doing something similar for a while. Check it out: https://github.com/enroxorz/grabmoot
Ah. I did turn JS off (Chrome dev tools -&gt; disable JS), but I didn't check it at small screen sizes. Yeah, the menu does break for me on small sizes without JS. I'm not seeing the example render as HTML though. 
Not so nice to mobile though
not mobile friendly
Troll account. 2/10, would not feed this.
For a little context. I just spent 2 VMs and a couple hours trying to get RVM to work to no avail. I ultimately found this post in which one of the core RVM devs recommends not using multiuser because… it sucks? not sure why exactly. http://stackoverflow.com/questions/18737006/rvm-ruby-permission-denied?answertab=active#tab-top Anyway, I've wasted too much of my life with RVM, it's compiling from source for me from here forward.
you hipster, you
No but really, how is this the industry standard for installing Ruby? I've tried it periodically over the past few years and 2/3 of the time my attempts to install fail miserably. The other 1/3 the install goes fine, no prob. And then there's multi-user, which evidently even the core devs don't recommend you use: http://stackoverflow.com/questions/18737006/rvm-ruby-permission-denied?answertab=active#tab-top
Well normally, ST uses the rvm defaults. Are you using homebrew? if yes, try brew doctor or which ruby to see if your $PATH is correct. BTW mine is /Users/user/.rvm/rubies/ruby-2.0.0-p247/bin/ruby
Yeah, I'm a hipster for wanting my code to work.
RVM is not industry standard for installing ruby. You can install Ruby to a server without RVM if you don't need to support multiple rubies. You can use RBENV instead of RVM.
Luckily the entire site is available on [GitHub](https://github.com/ruby/www.ruby-lang.org). Feel free to [submit some new examples](https://github.com/ruby/www.ruby-lang.org/tree/master/en/examples).
If you feel like it, could you submit an [issue](https://github.com/ruby/www.ruby-lang.org/issues) about this?
If you're having trouble with multi-user installs, checkout [chruby](https://github.com/postmodern/chruby#readme) and [ruby-install](https://github.com/postmodern/ruby-install#readme). chruby supports using rubies installed into `/opt/rubies/` or `~/.rubies/`, and keeps gems installed into `~/.gem/$ruby/$version`.
If you only need one Ruby, then you don't even need rbenv or RVM. Just install the Ruby into `/usr/local` with [ruby-install](https://github.com/postmodern/ruby-install#readme), [ruby-build](https://github.com/sstephenson/ruby-build#readme) or [manually](https://github.com/postmodern/chruby/wiki/Ruby).
rvm multiuser is not recommended because not many developers have a good understanding of linux permissions, groups and security, it is a lot safer and easier for normal user to just use user installation because it removes all the linux permissions, groups and security from the horizon
Industry standard: 1) wget http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz 2) tar xvzf ruby-2.0.0-p353.tar.gz 3) cd ruby-2.0.0-p353 4) ./configure 5) make 6) sudo make install
you can install with rvm, no need to use rvm for switching rubies, just use the ruby via PATH after installing it
I believe that can be done using [mrvm](http://rvm.io/workflow/chruby) (mini-RVM). Can you install mrvm separately?
I wrote an article about how to build .deb packages for deployment using ruby-install over [here](http://blackkettle.org). You might want chruby to switch runtimes, but you can probably get away without it - all you need is to stick /opt/rubies/$version/bin on the front of $PATH.
Looks nice! Will definitely be giving this a try.
It's slow as hell, but it works fine on my phone.
Based on your description, I don't see why you can't bump your ruby up from 1.9.1 up to 2: 1) wget http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz 2) tar xvzf ruby-2.0.0-p353.tar.gz 3) cd ruby-2.0.0-p353 4) ./configure 5) make 6) sudo make install
The load time results are skewed, as under Chrome all of the files are returning "304: Not Modified" which means it's loading from cache instead of downloading from the server.
I used chrome dev tools with disabled cache (you can find this option in chrome dev tools settings - first checkbox), so I always have 200 http code for all images, if I have opened dev tools. So my results is not skewed :)
I got a lot of mileage out of this. projecteuler.net/ A series of challenging mathematical/computer programming problems that will require more than just mathematical ...
So cool. Makes me want to open source my repo.
Being nervous about concurrent threaded programming is reasonable, it can get tricky. But (in ruby or anywhere else) it's pretty much just about avoiding mutating any shared state without proper locking. For instance, if you can eliminate shared state entirely, then you know you're good. It's when you do have shared state, and it needs to be mutable, that you have to figure out how to do that safely, which can get trickier than it sometimes seems at first. But, as I was about to say that you could do something with queue_classic, I actually went and looked at the documentation for queue_classic, and see that it actually uses a forking process model for multiple workers -- so, yeah, no, that's not gonna work like I thought, nevermind, heh. But I still say it's useful to know enough about concurrent programming to not be scared of it! Which means knowing enough to know what things should work, and what things will get complicated quick (although like everything else in programming, you'll make some mis-judgements at first). 
You need to fix the formatting on your code.
Ahh...it alternates between all those examples. That's not too bad, I thought it was just the hello world one! :)
Fixed it sorry!
Sounds good. Hope you'll like it. :)
*Very* nice initiative, but dear lord do they need to learn to rebase before going public with code. 
You could create an amazon aws account and host images on s3. They have a nice introductory package where you get the micro tier free for a year. After a year if you're only getting a couple hundred hits a day, it would probably cost cents a day.
Thank you for the asnwer. I deploy my Ruby on Amazon too, right? I have some credits from a Startup Weekend I went to.
i recommend openshift... they give you 3 free gears... one gear give you 512 MB of RAM and 1 GB of disk storage... they also support mongodb and redis (i am just a new user there...)
if its a really simple cms they want , i'd look at doing jekyll / prose.io with github pages. they login to their github account with prose io, manage their markdown pages using the editor, and its free. I realize "use something else" might not be the option you are looking for, but its pretty easy to use jekylll if you are a developer and get it to a state were they just edit their content.
Is the hit on performance significant though? If it waits for Rails to start, then maybe it will take 3-5 seconds or more.
Thats fair, check out prose.io on your own and decide it it'd be acceptable for them to use. I know I've really enjoyed it, but i'm sure with my years experience, its through very differently tinted glasses.
No honestly a barebones rails app on Heroku can take 10-15 seconds. It's significant enough to care about it. You can kinda cheat it by having something hit the server every minute or so (pingdom for example)
Ow, that's too much I think. Going to check AWS. Do you have any recommendations? Thanks for answering btw.
Exactly. This could easily be done with [middleman-s3_sync](https://github.com/fredjean/middleman-s3_sync). I guess Heroku gives you free bandwidth, though they're gonna limit your max asset size since you'll have to shove them all in your slug. I guess it's kinda cool to use an nginx buildpack, but this seems like "when heroku is your hammer, everything looks like a heroku app"
Will do, I appreciate the answer!
Like I said you can use Heroku and have something like pingdom polling the server which would keep the application alive. AWS is probably over engineering a simple CMS. 
New relic monitoring probably better than pingdom :)
Use whatever CMS you want, then export it to HTML and host it on AWS. Will be blazing fast and don't have to worry about Heroku spindowns.
I feel like an idiot asking this, but when you say "use any cms you want and export to HTML", what does that mean? How can the owner update it if everything is in HTML? He just needs a few pages where he can update the prices of the rooms, and add blog posts/promos.
A rails app on heroku can reference assets on a different cms server.
rubinius is excellent. I cannot say it enough. The error messages are wonderful, and having so much source in ruby makes understanding what's going on fantastic.
Please note that Heroku devs have publicly asked people to *not* keep free tier servers up this way. I'd imagine that if enough people abuse that it will sprout more limitations or go away entirely. 
Every 5 minutes will do it. If you setup cloudflare, have it ping direct.yourdomain.com. That way it will avoid the CDN and always hit heroku.
Is there a uniqueness constraint on username? Is couchdb able to enforce it? What happens if two users try and claim the same username at the same time?
Your screenshot of Chrome Dev Tools shows cached results. The left column "Size and Content" , the grey numbers represent "Content". Content is the size of the asset, which are indeed smaller, but the "Size" (data sent over the network) is 0 for all of the assets in your picture, indicating cached results.
Thanks, I've found this to be the most useful for my skill level. 
Is there any sample code using cocos2d-android (https://code.google.com/p/cocos2d-android/) ?
Am I missing something? It doesn't seem to actually protect anything (i.e. define any resources that would require someone to be authenticated). id ... is this an integer (bad!) ? This is being passed to the session and is tied to the users account (BAD!). Logout simply invalidates this (BAD!). It looks like a sloppy first attempt at something - devise *can* be used with rack and is well-tested, use it. If you really want to roll your own, look at token based authentication at least. Oh and don't ask here if it is secure - write tests to prove its secure! Try to break it. If you're concerned about security always go down the tried and tested route. And then still, try to break it! 
Thanks for that. The thing is I've never implemented a login system before and I'm trying out various things. Would using [Warden with Sinatra](https://github.com/sklise/sinatra-warden-example) be a suitable method of doing this?
Indeed - devise is based on warden hence why they are compatible. EDIT: although that said, Sinatra + Devise is a less than common solution to things and given the hassle I'd probably just go Rails + Devise unless I had a strong reason to only use sinatra. THAT said, I have to work out how to implement this myself over the next few weeks....
Honestly, if you're making an app with separate logged-in and logged-out views, you should probably switch to Rails for the extra guidance and complexity management.
The one spot couchdb can guarantee uniqueness is on document ids. So if you make the username part of the _id, you are for sure unique. That is not without its problems (for one, if you want to change your username you probably used it as an entity id and now you have some work to sync). edit: another possibility for uniqueness with couch is to keep a secondary document as a uniqueness reservation. But since you have 2 docs and no atomic guarantees outside of a single doc, writes would be fraught with peril ;) Maybe the bulk api could do it.
another possibility for simple authentication with rack apps is [cyx/shield](https://github.com/cyx/shield)
JSON is much harder to write by hand. Personally, I think YAML lends itself better to readability and is much easier to write by hand.
Another thing to be aware of that's a common mistake when starting with Sinatra is when you enable sessions: enable :sessions Since you don't specify a session secret, Sinatra generates a random one. This means that if you redeploy your app, or restart it, all your sessions get invalidated. Also, if you deployed the app across multiple processes, the session secret would be different and not work between them. https://github.com/sinatra/sinatra/blob/master/lib/sinatra/base.rb#L1837 you should always provide the `:secret` option when enable rack sessions so stuff works.
Cap 3 for sure.
http://monosnap.com/image/PjA8119dTjccIUkeR4pXH3oRz - as you can see codes 200, cache swicth off, load time almost the same in column "Time". P.S. Size of images changed, because I changed default setting for webp encode. Added by this pull request: https://github.com/kavu/sprockets-webp/pull/3
As I can see, even after manual clear of cache in this column top numbers have zero. Maybe because my resource working under SPDY or because I working in chrome beta version (need for development).
Which do you prefer to write? I don't know that it will matter that much. Personally if i'm writing data structures, I prefer JSON. I haven't done this exact thing, however. Options C is JSON-like btw, just write plain ruby hashes. BTW, rails uses YAML because it gives it deeper meta-info about some type information. For instance, it can say that a given attribute at .foo is an instance of the Ruby class Foo. This is also possible in some JSON implementations I believe, I just rarely see it used. For your purposes, I don't think you need to worry about types beyond what JSON already provides.
You're welcome. Check these out as well: * [Project Euler](http://projecteuler.net/): "a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve." * [UVa Online Judge](http://uva.onlinejudge.org/): "... hundreds of problems. They are like the ones used during programming contests ...." * [Guru of the Week](http://www.gotw.ca/gotw/): "a regular series of C++ programming problems created and written by Herb Sutter." (may want to skip, since it's C++ specific) * /r/dailyprogrammer * /r/tinycode * [hackerrank](https://www.hackerrank.com/): "Explore, solve and compete in a wide variety of Computer Science challenges." I just noticed that most of these are mentioned in the /r/learnprogramming wiki [Programming Challenges](http://www.reddit.com/r/learnprogramming/wiki/index#wiki_programming_challenges) section, along with a few others.
I completely agree with a lot of what you're saying. I work in a software agency where we create many new projects every month, and more and more of those new projects are not rails, because we do want to use web sockets and make more specialized, non-CRUD appliance style api servers for js frontends and native mobile apps. We also maintain many long-lived projects that have been around since the rails 1 days and have followed the upgrade path all the way up to 4 and we think a lot about this stuff, about making the responsible choice for our clients who are often business partners, their success is our success. Technology does move forward however, rails is "opinionated software" and unfortunately those opinions were set in stone over 10 years ago when the web was a very different place. One note about performance - it's not about scale as you say. Performance and scale are two separate problems, and often scale is not important. Performance however is very important for virtually every project, and in this area rails is abysmal. No amount of hardware you throw at it is going to make individual request times acceptably fast by today's standards. Rails is naturally very slow, response times are terrible compared to almost any other platform except for maybe PHP and python.
Thor is quite good for creating command-line utilities, but it's not only one, there's multiple choices for such task, for example [Boson](https://www.ruby-toolbox.com/projects/boson) and others. Some while ago I needed to create interactive command line app and didn't found any gems which could make that task easier so I created [CLI-Console ](https://www.ruby-toolbox.com/projects/cli-console). Basically difference is that typically you work from shell and just pass commands to utility while still in shell, but with interactive CLI you're inside app and executed commands can still keep some state in memory, providing some guidance and more. For example [simple shell made with CLI-Console](https://github.com/davispuh/CLI-Console/blob/master/examples/shell.rb) shows currently active directory.
Cap2 + Cap3. They are both relevant and it would actually be useful to have a reference for both. 
Cap 3 please
&gt; Host on heroku. Setup pingdom to monitor your site (that will keep the dyno up). While this is very common advice you should not be doing it; the free tier is for prototyping and dev sites. If you cannot survive with the spin-down spin-up issue then you should be paying.
&gt; Completing version one of the book with Capistrano 2 and then releasing an update early next year with updates for 3. Gets my vote.
I would recommend having a look at [Locomotive CMS](http://locomotivecms.com) and [Refinery CMS](http://refinerycms.com). Both are very mature CMS applications written using Rails. They do all of the heavy lifting, so you can focus on the layout and design of your website.
[Anyone can invent a security system that he himself cannot break.](https://www.schneier.com/blog/archives/2011/04/schneiers_law.html)
I see a lot of people posting that they prefer cap3. Is there any compelling reason for this? I haven't used it yet in production since I have several dozen apps that I still support with huge, custom cap tasks. When I dabbled with cap3, it felt a lot more complicated to do common things and there were some features that were outright broken at the time (eg, `capify` was broken). Was that just a case of me being surprised by a total change? Any of you who've gone from cap 2.x -&gt; cap 3, how was the transition?
This is much more helpful and less rambling than my reply.
He's referring to doing a publishing process. Which is a common way to generate all the content from the CMS into just static content and hosting it. It makes the applications in production simpler and removes the hack-ability of your platform from being exposed to on public domains as easily.
I left you a pull request on the repo with some comments. But if you want to replicate it on javascript, I would advise you to start looking into that right now instead of trying in ruby, as the JS implementation will differ a lot if you use another 2D library (as https://github.com/turbulenz/turbulenz_engine) Good luck! 
I just graduated with my degree in antrhopology. Do you mind telling me how your career went immediately after you graduated?
thanks for your well considered response. I guess performance is a matter of perspective - at my place of work, a lot of our stuff is on sharepoint. If you think rails is slow, you really need to try some sharepoint! I've never had a problem with the performance of any of my internal apps, nor most external apps using rails. Have you got problems with the performance of github? And then I also get benefits like the rich gem ecosystem with rails. I've never seen anything like better_errors in node. anyway, interesting discussion.
I started my career while I was in school, working on building compute clusters for the physics department. My career path started with more unix admin role stuff, transitioning more into software engineering. My advice would be: don't be unwilling to relocate early in your career. Take jobs that challenge you, and don't work in higher ed (I've worked at a university since graduating, it's a great place to stagnate). And don't be afraid of start ups, they are often more willing to hire self-taught engineers. Get yourself out there. Anyone hiring for an engineer that doesn't see an engineering degree is going to bee-line for your github page. Doesn't have to be good code there, just not empty.
Wow, thanks a lot! I really appreciate your taking the time to do that. I was just looking at Turbulenz today actually, but the example games all seem to require you to install the "Turbulenz Engine". Do you know if this is always required in order for a web-based app to use hardware acceleration? I'm pretty sure I've seen some WebGL-enabled games which just load straightaway. 
Since Rails 3.0 is all about engines: http://edgeguides.rubyonrails.org/engines.html Basically it's like Rails app that you can cram into other Rails apps. Here's a simple engine-based cms for Rails 4: https://github.com/comfy/comfortable-mexican-sofa
I'm still in the process of learning ruby; Information like this is really useful because I want to learn exactly how the language behaves, without having to follow goal-oriented tutorials. Is it accurate?
Thanks a lot for your thoughtful reply. 
Thanks - that's a good thought to be aware of and consider. 
The open source project active admin is another GREAT resources for rails projects CMS 
Kind of. Best practice unless you have to support Ruby 1.8 is to use `require_relative` instead of modifying the load path. Never heard of someone being afraid of module (or class) methods and using `Class.new.extend(SimpleModule).my_module_method` seems very strange. `module_function` is [more complicated](http://ruby-doc.com/docs/ProgrammingRuby/#Module.module_function) than mentioned in the post. It duplicates the method to create the module method, then makes the original method private. The original method *is* mixed into classes that include the module, it's just private: $ irb 2.0.0p247 :001 &gt; module A 2.0.0p247 :002?&gt; def a 2.0.0p247 :003?&gt; puts "a" 2.0.0p247 :004?&gt; end 2.0.0p247 :005?&gt; module_function :a 2.0.0p247 :006?&gt; end =&gt; A 2.0.0p247 :007 &gt; class B 2.0.0p247 :008?&gt; include A 2.0.0p247 :009?&gt; def b 2.0.0p247 :010?&gt; a 2.0.0p247 :011?&gt; end 2.0.0p247 :012?&gt; end =&gt; nil 2.0.0p247 :013 &gt; B.a NoMethodError: undefined method `a' for B:Class from (irb):13 from /home/justin/.rvm/rubies/ruby-2.0.0-p247/bin/irb:12:in `&lt;main&gt;' 2.0.0p247 :014 &gt; B.new.a NoMethodError: private method `a' called for #&lt;B:0x0000000140da70&gt; from (irb):14 from /home/justin/.rvm/rubies/ruby-2.0.0-p247/bin/irb:12:in `&lt;main&gt;' 2.0.0p247 :015 &gt; B.new.b a =&gt; nil I've only seen `module_function` used once, and it did more harm than good. Most of the time I see module/class methods defined using `def self.meth_name` or using `class &lt;&lt; self`.
I'd also be interested in anyones comments on this as it was similar logic which led me to choose Cap 2 for the book initially.
Ruby string interpolation has all kinds of fun and interesting behaviors. For example, you can mix string interpolations like this: `"hello #{x} %f" % 10` And the `#{}` interpolation happens before the `%f`. I was playing around in rails source code earlier this year and found somewhere that they were doing this with semi-user input (Recipients in the mailer), which let you abuse it, along with another rails bug, to crash rails mailers (Or rather the async workers that called them). They fixed it in [Rails 3.2.15](http://weblog.rubyonrails.org/2013/10/16/Rails-3-2-15-has-been-released/) though.
In ruby, you can't call lambda's by just putting parens at the end. You need to say @calculate_angle.call(@position)
In Java, and in Ruby, class methods are really really really unfun to refactor/maintain/modify/test for behavior changes. They have a class scope and can get real messy.
What are some use cases for job queues? Coming from simple web stuff, then game development I don't really get what you use these for.
thats right, now that im thinking about it, you can actually do @calculate_angle[@position] as well to save some space :p
I don't get why this is weird, it is described on Ruby-lang, specs and the Pickaxe.
Adding to what you mention, http://googletesting.blogspot.com.au/2008/11/clean-code-talks-unit-testing.html has been my lightbulb moment for some time. Some people argue the lessons don't apply in ruby to the same degree, but I'd disagree when I look at many of the community practices out there.
Can't help you there... I haven't worked on 2D graphics with JS, you'll have to search.. :)
Here is what you exactly looking for http://www.allerin.com/blog/ruby-on-rails-vs-other-languages/ . every language has its pit and falls. Here know more about ruby, php and python.
Yeah, speed is all relative, I hear you on that point. It's funny you bring up GitHub, Zach Holman said recently they're still on their highly customized Rails 2.3 deploy and aren't planning on upgrading because of performance reasons. I also suspect they barely use ActiveRecord.
module functions are useful for functional style programming. I like to use 'extend self' to make all non-private methods in a module static while still allowing the module to be used as a mixin (though I'm not sure i've ever used mixins apart from Sinatra helper methods...). this provides a stateless collection of related methods. testing and mocking static methods couldn't be easier in ruby, and especially when there is no state involved.
`module_function` is for functions that are conceptually related, and that you might want to use either separately or as a group. A good example would be `Conversions`, which does things like `Conversions::feet_to_meters`. If you have a class that makes extensive use of functions in `Conversions` internally, you can mix it in and use them without `Conversions::`.
Makes sense. Thanks. Always better to have a real world example than foo::bar kinda stuff.
I think of thor as being specifially for 'generators' -- something that is going to generate files on disk, usually from templates parameterized by various runtime information. Do people really like it for other kinds of command line utilities too, that aren't generators? If you just want it for it's command-line-argument-parsing and help-page-generation, I guess that's fine if you like how it does those things, but you definitely have other options. I use [slop](https://github.com/leejarvis/slop) I love thor for generators though. 
Opal looks awesome. I'm looking forward to a future w/out Javascript, as long as this thing is debuggable.
same, this is starting to get ridiculous.
I think I'll stick with coffeescript, unless I can have ruby syntax but without an external library. For example: class String def output console.log "outputted string: #{this}" end end "string".output 10.times do |i| window.alert "count: #{i}" end --- Should compile into: String.prototype.output = function () { console.log("outputted string: " + this); }; "string".output(); 10..times(function (i) { window.alert("count: #{i}"); }); // I define my own Number.prototype.times **Edit**: Really, I'm getting downvoted for having an opinion?
are you aware of [Hashie::Mash](https://github.com/intridea/hashie) ?
Yes. Hashie didn't have the dynamic assignment I was looking for.
I prefer Ruby though.
Nice project, I intend to play with it on some pet projects but if I see it in production code I think I'd run screaming for the hills. However, yes, it would be nice to have some choice in front end languages.
In the 5-6 years that I ran a certain archive, the html only changed two or three times. But why even bother with html anymore since there is the api and changes to html are far more likely than changes in the api? https://github.com/4chan/4chan-API tl;dr: y u no parse json?
TIL I can parse JSON.
We spend a lot of time on my team working through things like this. There is always a more succinct way, and it he's our fluency to constantly learn new things. Giant Robots posts are always awesome for this sort of depth.
We intentionally preserved the history per the request of the RubyGems maintainers. Is there something specific you'd like to call out?
 def mutually_signed? signers.map(&amp;:signed_by?).inject(:&amp;) end I don't think this code is any *less* obtuse than the anti-pattern example. I can agree with the broader points of that article, but as far as anti-patterns, I think accumulators are pretty benign.
Word, I'm working on a way to use python syntax on top of the ruby vm. I like the syntax more. Good idea huh?
I would have reached for flat_map, not inject, to avoid chaining map and flatten, but hey, to each his own.
Book buyer here. I like option 3 so I can learn how to deploy your battle tested strategies immediately and start migrating next year.
The indentation is brutal. Most Ruby code is 2 space indentation. Not sure if this is spaces or tabs, but it's too wide. Since you implement [method_missing](https://github.com/TinderBox/MetaHash/blob/master/lib/metahash/metadata.rb#L63-L72), you should also implement `respond_to?`. [This](https://github.com/TinderBox/MetaHash/blob/476aae440d9f1869e10f47e7ba5df636768fa12c/lib/metahash/metadata.rb#L78) could probably just be `respond_to?(key, true)`. respond_to? will just look at the method table rather than the O(N) array test that you're currently doing. [Same here](https://github.com/TinderBox/MetaHash/blob/476aae440d9f1869e10f47e7ba5df636768fa12c/lib/metahash/metadata.rb#L67). Is there a reason [you're making instance variables](https://github.com/TinderBox/MetaHash/blob/476aae440d9f1869e10f47e7ba5df636768fa12c/lib/metahash.rb#L32-L33)? I would stick with local variables in this case, if you can. Hope that helps!
Having a history is fine and nice. Small commits doing one thing and one thing only is very nice to work with. The question is what part of the history will be interesting down the line. Commits like 'Have TUF Verifier check expiration dates' which tell a clear story of what feature is changed will be a lot more interesting than 'put back tonys work' which can mean anything or nothing, or 'whitespace fix' that fixes a class you added in an earlier commit. IMO. YMMV.
IMHO this is NOT and "anti-pattern". Some counter-arguments: * "t={}; .each{ t[]= }" is universally understandable by anyone (PHP-er, Java-er, your mom, anyone) * the .each solution is the most simplest and maintainable - does exactly what it says (no guessing memory usage, no surprises) * .inject usually confuses inexperienced Ruby-ists (this wastes time -&gt; lower maintainability) * most people can't tell/guess how much extra memory map/inject will use (will it consume extra memory just before/after iterating or for each iteration? how much?) So, I'm thinking one should use map/inject only if: * everyone who'll work with the code understands inject/map and knows how (in-)efficient it is * OR you don't care how efficient it its (iterating only a few objects, not doing it lot's of times on many servers)
&gt; so write code like you're using other languages .each is still ruby (even if not idiomatic), just more readable to more people than .inject (this makes it more practical) I ♥ idiomatic ruby (clean code in general), but sometimes I have to be practical. And sometimes, when your team doesn't consist of "rockstars" or you care about garbage collection, idiomatic != practical. That's why I think it's not fair to call using .each to build collections an "anti-pattern". It's not idiomatic, sure, but not an anti-pattern. Also, .inject is a stupid method name, .reduce is better, .fold would be OK too.
I googled a bit, and found [a blog post by Avdi Grimm that had some interesting discussion about transforming hashes](http://devblog.avdi.org/2009/11/20/hash-transforms-in-ruby/). Here were the building blocks: The method `Array#flatten` converts an Array of Arrays into a single-dimensional Array. irb&gt; [ [:b, "banana"], [:c, "cabbage"] ] =&gt; [:b, "banana", :c, "cabbage"] The splat operator, `*`, converts an Array into multiple method arguments. irb&gt; def inspector(argument_one, argument_two) &gt; puts "argument_one: #{argument_one}" &gt; puts "argument_two: #{argument_two}" &gt; end =&gt; nil irb&gt; inspector(*[1, 2]) argument_one: 1 argument_two: 2 =&gt; nil The class method `Hash.[]` builds a Hash from each pair of arguments it receives. irb&gt; Hash[:a, 1, :b, 2] =&gt; {:a=&gt;1, :b=&gt;2} Combining those, we can rewrite `hash_correct`: def hash_correct(wrong_hash) key_value_pairs = wrong_hash.keys.map { |key, value| [(key.to_s.ord + 1).chr.to_sym, value] } flat_key_value_pairs = key_value_pairs.flatten new_hash = Hash[*flat_key_value_pairs] end Ninja edit: typo
Actually it does. You just need to call methods with bang: Hashie::Mash.new.b!.c!.d! 
Yup, its called Jython if I recall.
yeah I will put it online under: http://github.com/plotti/twitterinterest just give me a couple of days to clean it up a bit. :) 
since its developed in rails i thought it belongs here. 
I fucking love PRY, and didn't know all of the useful things in that article.
Thanks for the feedback, I hope the rest of the book is working well for you so far!
use pry everyday, can confirm.
Here's one. The City publishes food inspections results on a regular basis: [https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5](https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5). Yelp supports the Local Inspector Value-Entry Specification (LIVES) [http://www.yelp.com/healthscores](http://www.yelp.com/healthscores), which allows for data like this to be streamed directly onto the Yelp website, associated with the restaurant's record on Yelp. Example: [http://www.yelp.com/inspections/belmar-la-gallinita-meat-market-san-francisco](http://www.yelp.com/inspections/belmar-la-gallinita-meat-market-san-francisco) The issue is that the Chicago inspection data is very well-formed (authoritative information published in separate, predictable fields) but not compliant with LIVES (mainly because the Violation information is published in a single field, rather than a field for each separate violation). There may be more reasons why it's not compliant-- this just happens to be the one I'm aware of. The cool thing is that the City now publishes the Violation info in pipes-separated format (example: 33. FOOD AND NON-FOOD CONTACT EQUIPMENT UTENSILS CLEAN, FREE OF ABRASIVE DETERGENTS - Comments: CLEAN THE FILTERS ABOVE THE STOVE AT THE FRONT PREP AREA OF GREASE BUILD-UP AND CLEAN THE BOTTOM COMPARTMENT OF THE DEEP FRYERS,HAS GREASE BUILD-UP | 34. FLOORS: CONSTRUCTED PER CODE, CLEANED, GOOD REPAIR, COVERING INSTALLED, DUST-LESS CLEANING METHODS USED - Comments: FLOORS NEED GENERAL CLEANING IN THE FRONT PREP AREA,ALONG WALL BASE AND CORNERS) The project would be: -- take the raw data (no pun intended) -- make it LIVES compliant -- store it somewhere for Yelp -- call Yelp and ask them to hit your store -- prosper If you need server space or other tools to host / make this, hit me up here: [http://www.smartchicagocollaborative.org/projects/developer-resources/](http://www.smartchicagocollaborative.org/projects/developer-resources/)
http://xforce.iss.net/xforce/xfdb/89191 &gt; Remedy: &gt; &gt; Upgrade to the latest version of Ruby (1.9.3-p484, 2.0.0-p353, 2.1.0 preview2 or later), available from the Ruby Web site. See References.
I use the ever loving hell out of this gem. And the dev is really good at responding to your queries (pun intended) on IRC.
I've seen the latter case with creating a new hash every iteration in the wild. Lets just say the performance was less wild in that particular piece of code. (puppet actually. somehow I ended up with a commit in my name without actually ever running puppet..)
Great examples. I've briefly read up on Pry in the past to see what all the fuss was about and didn't get very far. This was a great run down of examples. I'm sure there's plenty more greatfeatures.
The given examples were clearly anti patterns. The solutions was not always optimal though. See the comment from tenderlove for that.
Personally I'd prefer to squash that sort of stuff. It's something we can discuss prior to actually merging it (if that happens)
love it. although remote sdk seems broken...at least on windows. on osx it also didn't work like it used to ... :/ edit: actually it works, had some problems but I solved them
Thanks for the feedback! :-) My indentation only uses 1 tab. Github just has 8 character wide tabs or something ridiculous like that (should be 2 to 4, imo). Personally, I hate the spaces, because they aren't wide enough. I've gotten lost in indentation before, cause I couldn't tell the difference in really tall blocks. But I also don't like that spaces are ever used for indentation in code, cause it's more arrowing in most editors. I understand that tab width is very inconsistent between fonts though. But anyway, this is all personal preference, and I'm willing to take whatever the community wants to throw at me for not following this standard. Here is what my code looks like: http://i.imgur.com/nMQBP6G.png My Sublime Text font settings: "font_face": "Ubuntu Mono Regular", "font_size": 8, "tab_size": 2, implementing respond_to? is a good idea. [I'll add that to an issue](https://github.com/TinderBox/MetaHash/issues/2), so I don't forget. thanks! The instance variables are to store the pre-save state of the Metadata instance. You'll see in the after_save callback, I'm reusing that instance variable data to re-set the Metadata instance to the `serialized_field`
huh neat. Still looks much more complicated than what I need. Will keep it in mind for the future though.
I guess. Awesome initiative anyhow.
I refuse to work on a project that doesn't include pry in its development gemspec
Pry is for noobs.
Pry kicks ass. I have a hotkey set in pretty much anything resembling an IDE I use to insert `require 'pry'; binding.pry` at cursor position. Now if RubyMine would just support it...
I recently wrote DeepTree to handle digging things out of deeply nested hashes. I deal with a lot of deeply nested hash structures and document data on a daily basis, but 99% of what I need to do is reading. I had forgotten about sharing it with the world until I had to use it again today... It's 2x faster than just wrapping things in a rescue block and 17-29x faster than the equivalent Hashie::Mash calls. It's not bad for a 0.0.1 release but if anyone has anything they'd like to contribute I'm all for it.
You're living the dream... I hope to be in your shoes sometime.
Nah, RM is actually really good. Definitely worth the $60 IMHO. Nothing else even comes close.
Done. You converted me. Live syntax highlighting? Nice.
In the best way.
Congrats and thanks, this is a great tutorial! 
Thanks! I'll love to see how it works underneath.
Is this what you're looking for? https://github.com/nixme/pry-debugger
This man is a legend. 
foolproof*
@juggernautco's idea is excellent and could really be impactful. Another useful idea would be to combine the various sources of RFP for contracts from city governments into a single feed that users could filter and subcribe to particular filters. (http://apps.mwrd.org/ContractAnnouncements/, http://www.chicagoparkdistrict.com/doing-business/purchasing/contracting-opportunities/, etc) Another app that is probably less useful, is something along the lines of isthereshitinthechicagoriver.com http://www.mwrd.org/irj/portal/anonymous?NavigationTarget=navurl://a5611bcef89c3cc2abca008c0ea969df It's hard to think about how this would be really solving anyone's problem, since people are not swimming in the river anyway, but it's serious social-media bait. I do think it could do a pretty compelling educational piece that helped Chicagoans understand one of the biggest infrastructure projects since reversing the flow of the river the Deep Tunnel http://www.encyclopedia.chicagohistory.org/pages/367.html 
til. Also, it's interesting how the conventions of using both are acceptable in certain instance and how full-proof may make more sense in the end. Weird.
Psh, [real programmers use butterflies](http://xkcd.com/378/).
I'm not cool. I still use [ripl](https://github.com/cldwalker/ripl) with all the [plugins](http://rubygems.org/search?utf8=%E2%9C%93&amp;query=ripl-).
DAE PRY
the guy who wrote pry is the biggest noob of them all.
I just don't understand the appeal. Obects aren't file systems, why would I want to cd into them? I can change the context in irb just by typing irb &lt;object&gt; already. 
Topaz Ruby is like the inverse of this. 
I'll be interested to see the API for stdio streaming. Neat start.
How does this compare to the map gem's Map#get ?
Opal looks great for OO scaffolding.
Great article. 
This is so wrong and pointless. "I have a ton of exp in framework X and none in framework Y. Now let's compare how long does it take to write an app in X and in Y".
It completely depends on the application you are developing and on your prior knowledge of the framework. This kind of comparison is utter nonsense.
when I saw 'ls' to list all methods. i lost my mind. im converted!
Cool, I use the PG gem a lot but this might be more effective.
I follow this guy on Twitter. And now I am going to go read the book
My new book is aimed at beginners, as a "prequel," to be read before other books such as: * http://ruby.railstutorial.org/ruby-on-rails-tutorial-book * https://leanpub.com/tr4w * http://pragprog.com/book/rails4/agile-web-development-with-rails * http://www.manning.com/bigg2/ These are other excellent books that will help you learn Rails. Start with 'Learn Ruby on Rails' and you'll be well-prepared for the others.
That was pretty fun. Third shortest on my first try. I think the guy who got shortest (and fastest, at least at the time) may be hard to beat.
And someone riffed mine, got it a bit shorter, and I learned something. Good times.
FIZZBUZZ!
Well, that's pretty impressive.
You could do a lot to organize your code. Your creature_class.rb "should" probably be creature.rb. Create a folder called "creatures" and in there have one rb file for each creature's class.
The guy who keeps copying other people's code and resubmitting is pretty annoying.
Yes. It would be better to keep solutions hidden until next challenge is posted.
Why does the link ask to create a password and account just to download? Why can't it just ask for email and that's it?
OP talks like SEO spam 
Yay it's back up! This site disappeared for a long time.
FYI, there's no emailed download link. You can enter bogus info for the email address, etc. and still download the book on the next page. 
Is there a way to show the output for each input when your code fails a la codegolf, or do they adopt the attitude of "fuck you, deal with it"?
Does it block? Does it buffer? What happens when the buffer fills up?
Thanks for your idea - I pitched it but another (very cool) project was chosen instead. 
Why does it need an email - why does it need anything? I thought it was "free"... 
I don't know why the account creation is necessary but since the book was free I was alright with giving my email. The author might be trying to build a contact list for future clientele. It's alright with me but the account creation part is really unnecessary. 
Typically, things die off in favor of other things. It's part of the evolution of software. As someone who has had to support rails 2.3 apps, and try to upgrade others to rails 3, I can attest to the frustration of gems falling out of support. If the gem is popular, it will stay alive. Devise, for example, isn't going anywhere soon. Rails is the same way. People use it, people contribute. Sometimes better comes along, and the community shifts to that, and sheds any deadweight. I think with apache; their audience needed that. Or they did. But I don't see that as the case here. Yes it means what was good code can become bad code, but thats part of the nature. 
If I'd posted this myself, I'd have titled it: "You Can't Learn Rails in a Day; New Book Shows You Why." :-)
that was fun! though it looks like they should add more test cases... most of the solutions return the wrong result when given negative numbers, and many of the fast ones fail on different positive inputs (e.g. 15, 30 should return [4, 2, 2], not [4, 2, 1])
Yep. The current shortest and second fastest solution yields wrong results for e.g. fireducker(111, 111) correct output is [1, 0, 0] (as 3 evenly divides 111) however the shortest solution yields [0,0,0]
Why is an email address required to download an updated edition?
1. Foundation 5 is released and I update the tutorial code. 2. I send you an email so you know there's an update. 3. You use your email and password to log in and download the update.
I'd like to get better at databases. I understand basic SQL concepts (eg. selects, inserts, basic joins) and have read one or two beginner books, but I'd really like to find an intermediate book that hits on database optimization.
I've used this simple snippet in the past: class Module def memoize(method_name, &amp;block) define_method(method_name) do |*args| @memo_cache ||= Hash.new @memo_cache[method_name] ||= Hash.new @memo_cache[method_name][args] ||= instance_exec(*args, &amp;block) end end end Lets you define an instance method whose results (given 0 or more parameters) are cached like this: class Klass # this method isn't memoized def foo(a, b) a + b end # this one is, for each (a, b) # probably in this case my memoization just makes it slower! memoize(:bar) do |a, b| a + b end end I thought it was kinda neat, but it's a simplistic approach with obvious pitfalls (many of which are mentioned in OP's article) and not really fit for heavy-duty work. There's also a gem for memoization somewhere out there that does way more things.
This doesn't really address the root of the question though. /u/aZeex2ai was likely inquiring as to why anyone would need a login for an updated version. Why would you not instead just email them a link to the new (fully public, not password protected) version. Rails Tutorial does that and it has done wonders for them.
&gt; This course guide helps you learn Ruby, HTML &amp; CSS, jQuery, Sinatra, Rails, and RSpec, the technologies you need to know as a Ruby on Rails developer. Along the way, you will learn best practices, design patterns and principles, and the fundamentals of design. You will also take practical steps towards professional development. ^. &gt; 19 pages I'm sorry, what?
I don't generally recommend things that approach a subject from the negative perspective but [this book](http://www.goodreads.com/book/show/7959038-sql-antipatterns) is brilliant. I learned a lot just reading through it as if it were prose.
Because I assume he wants to sell the book so a free public version isn't an option.
Marketing myself and whatever I do. And finishing things! Oh, and I'm very good at procrastinating.
Regular expressions. Marketing myself. Not being fat and lazy.
I could really use some help on my database interactions. I know how to get data in and out, but doing so in the 'optimum' manner is not within my knowledge right now. Specifically I need to learn joins. I could also use some experience with the flavor of the month JS framework, I think it's backbone?
I think saying as much would have addressed any concerns.
Yes, this book is suitable for people who've never tried programming. You'll build something useful and develop your "code literacy" (your ability to read code). The book will point you toward additional resources for further learning, such as Chris Pine's "Learn to Program."
see: indexes, memcached, and query optimization. 
Ahhh, you want to fill up peoples junk mail box. Gotcha. It's not my intent to be deliberately facetious; you may benefit from a cursory glance at persuasive web design theory since you might benefit from a more....reciprocal and forthright approach.
It still doesn't support Ruby 2.0 :(
Marketing! :)
Hash[wrong_hash.values.map { |value| [value[0].to_sym, value] }] Written on my phone, so sorry for any errors.
Could you post the error? I don't see a problem with line four of this template.
What is the exact error?
Yeah, I took two screenshots: http://i.imgur.com/48VlTxE.png http://i.imgur.com/ikns5H3.png Updating OP with these too. Thanks for the help
What does the **index** action in your ProductsController look like? I'd ctrl+f for a semicolon in that method where you're setting @products maybe. Edit: Hmmm nevermind I just saw how it's seeing a semicolon BEFORE @products. What happens if you clone a working rails app from github or something and try running it with your current setup, as a sanity check?
There is no semi-colon anywhere in my ProductsController... 
My mind is blown right now. I don't know what (if anything you changed) but this cleaned up code fixed it
There were a bunch of unicode characters in your original pastebin code: http://i.imgur.com/mBx2QY2.png I stripped them out when I did my cleanup. Still not sure where they came from, but here you go: http://stackoverflow.com/questions/2973698/whats-html-character-code-8203 
Oooooooooooooouu! Thanks! :)
We've made some changes so that you can see all the test cases we run the data through :)
In half a day I'm about 60% with the book. It includes and gives a great explanation of awesome gems to be used in your rails app, which I loved. IMHO is great also, since it avoids the "rails g scaffold" used by other books... "Qui scribit, bis legit" This book is very very good, and indeed might as well be the best beginners book for rails. However, to make the very most of the book you do need some programming or some kind of web experience.
Well written article, but I can't help but feel Padrino is not really fixing any searing problems or bringing anything new to the party. What am I missing?
No, the equals sign is not necessary since you don't output the loop itself. It's enough to output the table and links in the loop body. Your suggestion doesn't break it either though.
I think it's a promising project. It provides more than Sinatra but much less than Rails. This makes that the creation of a new application is painless and fast in the initial stage (no need to programming things like for example mailer). At the same time the developer has quite a lot of control. Some applications are very simple and using Rails is a triumph of form over the content. While in pure Sinatra developer needs to spend some time to build the basic features/functions. You have to remember that it is still in version 0.11, so I guess still in the development phase.
I'd recommend you take a look on the Discourse project: https://github.com/discourse/discourse
I mean, I thought it was fairly obvious...
Thanks! I'm looking at it now.
This seems like a lot of work, and a lot of code for just. 'git branch --merged | grep -v "\*" | xargs -n 1 git branch -d' Delete all branches that have been merged
Just a note for the future with issues like this ~ open up a github account and put the code under source control, then you can paste a link to the entire project. 
Looks like my design skills :)
I disagree. Padrino has been around for a while and I don't feel like it offers much. It's stuck in the purgatory between light (Sinatra) and heavy, Rails.
Hi. Cool project. I had a few code suggestions. First, you should probably switch to using two spaces for indentation. It sounds like a nitpick, but it's very standard for ruby projects. The first thing I noticed is the use of define_method and send. There's no real advantage to having the keys defined as their own methods (Tivo.j, Tivo.k, Tivo.J, etc...). Instead consider making the interface a single function, say ".keypress". Much easier to define def keypress key @tiv.cmd("IRCODE #{HASH[key]}") end And just as easy to call Object.const_get(@mode).keypress(str) Next, that const_get is another code smell, but it should be easy to replace. Modules and classes are first class objects in ruby. This means that they can be stored in variables like any other object. Consider changing the case statement which selects mode to use the module itself rather than its name. case inp.chr when 'p' @mode = Plex when 't' @mode = Tivo when 'y' @mode = Yamaha end Now we just call @mode.kepress(str) Perhaps the biggest cleanup is making everything a proper class. Consider this adaptation of Yamaha class Yamaha CMDS = { 'k' =&gt; 'VOL=Up 5 dB', 'j' =&gt; 'VOL=Down 5 dB','p' =&gt; "PWR=On", 'P' =&gt; "PWR=Off", 'h' =&gt; "INP=HDMI1", 'l' =&gt; "INP=HDMI2" } def initialize host="10.0.1.9", port=50000 @yam = Net::Telnet::new('Host' =&gt; host, 'Port' =&gt; port, 'Wait-time' =&gt; 0.1, 'Prompt' =&gt; /.*/, 'Telnet-mode' =&gt; false) end def keypress key @yam.cmd("@MAIN:#{CMDS[key]}") end end The code in the main loop would now be @mode.new.kepress(str) I think that reads much better. The host and port can now be passed in (where to get this config is another question of course). Hope this gets you started.
Thank you for your suggestions. I knew it looked messy, but I wasn't sure where to start. This will help me a lot.
So you made a TV remote that is functionally unintuative and has a learning curve? It seems sort of like the opposite of how I'd personally want a TV remote to be. Neat project all the same, I'm sure some will like it.
&gt; functionally unintuative and has a learning curve? yep, definitely unintuitive. I prefer Vim as an editor, so there wasn't much of a learning curve for me. This wouldn't be my go to remote for watching TV either, but I like to have the TV or music on while browsing, etc(as background noise). Also, I wanted to improve my Ruby skills. Thanks for looking at it
It's about time my wife and 8 year old daughter learned vi! I'll install this on the media centre! 
That's a great idea! Vim is just like the violin. You have to start them very young... A Vim scholarship could be in her cards.
Any thoughts on this vs. rubocop? https://github.com/bbatsov/rubocop
Yeah, I don't use anything like this. I'd love someone to comment on these.
Having had this question in the past I should probably clarify this ruby-lint's Git repository. Having said that, the main difference is that Rubocop mostly focuses on style such as method naming, the amount of allowed lines in a method, etc (it does have some technical analysis though). ruby-lint on the other hand focuses more on technical issues such as the use of undefined methods, non used variables (global, instance, etc) and so forth. In it's current form ruby-lint does have some style analysis, though that mostly serves as an example on what analysis classes would look like. I have no particular interest in adding more of this. One of the things I'm currently looking into is trying to see if there's a way to detect (potentially) non thread-safe code and issue warnings for this. Since they both do different things you can run them side by side if you'd like. Both can be hooked up in [Syntastic](https://github.com/scrooloose/syntastic) (for Vim) and [Flycheck](https://github.com/flycheck/flycheck/) (for Emacs). I'd be happy to provide support for other editors as well if needed.
I just can't see a reason to use the middle approach personally. If I want something light I'll go with something and build up my own architecture. If I want something complete I'll use a full fledged framework. It might be a bit irrelevant, but my go to light approach is Express and my heavy is Rails. And I have a ton of Rails experience.
It seems, given these two projects, ruby-lint is very similar to Ruby's built-in `-w` parameter, right? That you could even replace checking with `ruby -w` with ruby-lint.
note that rubocop has reimplemented most of the ruby -wc check to avoid double parsing : https://github.com/bbatsov/rubocop/tree/master/lib/rubocop/cop/lint Rubocop has also checks for cyclomatic complexity, exception handling, missing documentation, ...
Up to a certain extend yes, though ruby-lint does not implement all of warnings thrown by `ruby -w` (e.g. `end` alignments and such). On the other hand `ruby -w` will not warn you that you're using an undefined method for example.
Just jump in. You can try and follow this abstract plan which will, in theory, end with you knowing web dev in ruby... Or you can just start doing it and not worry that you're going to have gaps in your knowledge. You'll figure those out as you go, so I suggest getting Hartl's book at railstutorial.org and running with it. After that I would just read another and code, code, code. I started that two months ago without ruby knowledge and its panning out well.
I'm not sure if I understand you correctly, but are you planing on learning Rack and building a web framework THEN learning how to build a web application with Rails or Sinatra? That seems backwards to me. Building a Web framework before a Web application is like building an interpreter before writing programs in that language. If this is the case, I would strongly reconsider. The entire point of a web application framework like Rails or Sinatra is that you don't need to understand how Rack or Web Servers work. While it certainly would help a more advanced developer, I'm not sure how it would benefit a beginner to Ruby web development. IMO the benefit of building your own web framework is to try and identify the weaknesses of an existing one and it would not be possible to understand the weaknesses of an existing framework if you have not developed with it.
Never heard of bitbucket until now. I like that it provides unlimited private repositories for free.
Thanks; Hartl's book seems to be the best in this regard. I will start Rails with it, probably after one or two video tutorials to get up and running.