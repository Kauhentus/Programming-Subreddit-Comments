I agree and disagree. An assembler class can be incredibly useful in giving students a deeper understanding of what's going on. But it should never be taught as an introductory language. For beginners all concepts are new (by definition) -- sequences, variables, data types, I/O, conditionals, loops, subroutines, objects, etc. They're challenging enough, and languages like Ruby, Scheme, Python, etc. allow those to be learned well first before tackling deeper issues (e.g., memory management) or more abstract issues (e.g., polymorphism and meta-programming). Ordering of topics is important.
Can you, perhaps, just tell them you want to teach Fundamental Concepts of Programming, and use Ruby as the example language? How much do they care how you teach the class? Chances are good that's going to be your "in"; if you can convince them to let you teach that class with Ruby as the example language, or if you can just get away with doing so without having to ask permission, you'll later have an excellent precedent for teaching Ruby. As for C++ . . . what would you use to teach Structured Programming instead? I'm not a fan of it, either, but about all that would be suitable for that in a mainstream educational environment other than C++ would be C (which is at least better than C++, in that it's better suited to its niche than C++ is to its niche). Personally, I'd rather deal with C++ than VB, so *please* don't punish people by arranging to replace C++ as the OOP language of choice with VB. Anyway . . . think about the possibility of using Ruby in the Fundamental Concepts of Programming class. You don't have to have a Ruby-specific class to teach Ruby, after all. I think Ruby would be an excellent choice for such a class, too, because it well suits so many different requirements of a class like that. It can be used to easily support functional programming, object oriented programming, lightweight algorithm development, simple structured programming, domain specific languages, and scads of other things. It lags behind something like Scheme or C for more "computer science" kinds of concepts like implementing a Turing-complete language or systems programming, but there's always going to be a trade-off; C will fail at the incredibly high-level stuff somewhat, and Scheme will fall a little short on familiarizing students with the more mainstream styles of OOP, for instance.
I find it odd you linked to the school, the guy's Weblog, and his Twitter page, but not to your book.
Way back in early february, someone casually mentioned hackety hack on a [self](http://www.reddit.com/r/programming/comments/7wa4l/suggest_a_programming_language_for_a_newbie_to/c07l0r4) post of mine. Hackety hack really got me really interested in learning more in ruby and I've gotta say is what actually got me into programming. However, even as early as March, I was warning people that hackety hack was a great way to discover the beauty that is ruby, it wasn't a true representation of what ruby is like. I would of prefered that _why used less of his own libraries (like those little windows for outputting messages) and just stuck with the console. Then again, that would of been less exciting. I say keep it natural. If code written in hackety hack can't run standalone without requiring hackety hack specific files, it shouldn't be part of the lessons. I pretty much have no idea what your job as a maintainer entails but a refusal to implement my suggestions immediately will be taken as a personal insult.
I haven't been briefed on the details that much. So there ain't much I can tell you. Truth of the matter is, anywhere else in the world, I'd hardly be qualified to teach university courses but this is 3rd world africa and they'll take what they can get. And I'm not doing this to make a buck. I've learned a thing or two that I wanna pass on to others, and hopefully find some eager people who want to learn and then start a outsourcing firm where we can easily outbid the Indians (due to lower living standards) and put them (i.e. the Indians) out of work. This would in turn start a series of events which are irrelevant as my goal is to actually find some people who wanna code as I've actually done some freelance work and now am looking for more talent to work with. Since there's no one around, might as well teach.
The book has little to do with his recommendation.
I think Ruby is an excellent language for people who want to build something because of Rails. Simply put you can make things without really knowing what you are doing that aren't a total nightmare to change and improve once you do know what you are doing. But I don't think it's the best language for becoming a serious programmer who really knows their stuff. In your situation it sounds like the first would be a better target.
Humility: it's sexy! EDIT: fat fingers -_-
Unless I'm mistaken, Ruby is more OO than C++. If I'm wrong, teach me something new please. :)
Links: they're useful! Seriously. Provide a link.
No, you're right -- but the point may be more to teach C++ than to teach OOP, in that case. You should hit the high points of OOP in the fundamentals class, anyway -- and get into specifics that depend on implementation in classes devoted to particular languages. . . . though, in a *follow-up* to a given OOP language class, some kind of advanced OOP theory class might be interesting. For something like that, I wouldn't choose C++. Squeak (a Smalltalk implementation) might be a better option for that. Another option might be to require students to be familiar with several languages, and not use a single example language for the OOP theory class, I guess, but the likelihood of enough students meeting those requirements to make the class worth holding would be pretty slim. I'm probably getting a little off-track here. Anyway, my point is that I get the impression the OOP with C++ class is more about C++ programming in an OOP style than it is about OOP itself.
No offense to Peter, but there are lots of good ruby books out there. Just because there's a good book doesn't translate to a compelling reason to teach the language. The POV of a successful cs professor at another university, however, will tickle the ear of the powers that be.
&gt; I pretty much have no idea what your job as a maintainer entails but a refusal to implement my suggestions immediately will be taken as a personal insult. Hahaha, okay. :) Well, you'll be happy to know that there isn't a plan at the current time to include a canonical set of lessons, the next release will have a feature that will let people create their own and share. So if people want to include Shoooes specific stuff, they can, and if they don't, they won't. I can see both your position and _why's with regards to his own libraries. The key thing he was trying to achieve was letting people do something cool in as few lines as possible. Getting things done sparks the imagination. However, you're right, it's not a totally accurate picture of using just vanilla Ruby without Shoooes specifically. There's certainly a balance of letting people konw that they're using libraries, and creating non-Shoooes apps is a bit different.
I just feel uncomfortable promoting my own stuff in some situations :) Besides, I didn't put together a specific site for the book yet - but am planning to.
"equences, variables, data types, I/O, conditionals, loops, subroutines, objects, etc. " Don't really exist in most ASM though, so you don't have to worry about them. Especially if you take a language designed for teaching that only has a few basic instructions. Nothing makes you understand what a pointer or a sunroutine is until you've placed it in memory yourself, marshaled the parameters and told something to jump there. 
I think Ruby is great for learners because it never bothers you with the details. Having to worry about details can make you lose track of the big picture. Students should also learn assembly to understand datastructures, memory allocation, and all those details; but that should be a different course with a different focus.
http://lmgtfy.com/?q=%22beginning+ruby%22
C++ in OOP style seems to be a very large part of my university's programming classes. Hell, I don't think they have a degree here that teaches somebody how to be a successful software developer.
[**xTRUMANx**](http://www.reddit.com/user/xTRUMANx)!!! I just realized it was you, I didn't notice who it was on the original link. Glad to see you're doing well.
&gt; No offense to Peter, but there are lots of good ruby books out there. I know. I own several of them.
Thanks.
See . . . the problem is that in this case you basically promoted your own stuff, but then made it difficult for people to *find* it. I'd rather have an easy, direct link to it, be sure I got to the right book by that name, and make up my mind whether it sounded like something I wanted to read.
Well I'm not keen on having people think I posted to promote my book so I've removed the reference.
Notice I never once said I didn't find it on my own. I'm just pointing out how the guy who brought it up in the first place should have linked to it.
Well . . . as you wish. I, for one, wouldn't have thought ill of you for linking to it. I'm glad I know of another Ruby book, now -- and that I can link it in my mind to a redditor.
The top wish on my wish list for shoes is the ability to create lessons and just send them off to other people with hackety hack installed. No shoebox-esque website to have to go through. Just send a small file named something like looping.hacketyhacklesson with a smaller file extension. Also gem support. And also make hackety hack a gem so it uses my currently installed ruby instead of bringing in its own interpreter like shoes. I've changed all the code in the String class so that every method used on a string returns a string with eVeRy OtHeR lEtTeR iN uPcAsE. Other wishes concerning other _why projects: * Why's Poignant Guide to Ruby: The Videogame * Why's Poignant Guide to Ruby: The Animated Series * The Fox Show (A spin-off from their animated series where every episode there's a hidden reference to chunky bacon) There are others wishes but they just get weird.
That is disappointing to hear schools still teach VB. I can understand why schools teach C++. C++ is a good tool for teaching some very low level concepts so you can better understand what magic is happening when using a high level language like ruby. I love ruby. I would say the best arguments for using ruby is its friendly syntax and ability to create dsls that resemble english. I think it would be a very educational excercise to write a dsl in ruby. Ruby is one of the best languages for object oriented programming and I think that ruby would be a very strong contender for teaching OOP.
I don't think you will be able to convince your teachers and even if if you did it probably won't matter because the decision is being made at a higher level. Microsoft, apple, and other corporations spend a lot of money making sure their products are forced on the students in order to try and guarantee future consumers. 
HacketyHack as a gem doesn't make any sense. It's an application, not a plugin. Maybe I've just never seen apps distributed that way before. Lessons as files, maybe. We're trying to make it as easy as possible for people who aren't programmers, and unfortunatly, doing that tends to make things harder for those who are. Such is life.
you took an 'assembly' class and you still it call it 'assembler' ? ;)
I've never used their Ruby fork, but their website is a total failure. I'm really glad their passion lies in delivering excellence, especially in this era where there is no scarcity of competition. But since they strive to bring innovation, perhaps they could innovate up a web site that doesn't reek of meaningless marketing-speak. At least they don't use a stock photo headset-hottie. 
&gt;But since they strive to bring innovation, perhaps they could innovate up a web site that doesn't reek of meaningless marketing-speak. Well they are selilng an enterprise edition so it has to be full of marketing speak. 
Phusion Passenger is pretty much the best thing to ever happen to Rails, regardless of what you think of the site.
RailsApi Example:http://img.skitch.com/20090930-t45qsna53s3ny219nfmbx58tta.png
I'm not a rails guy. If you go to railsapi.com, there's a drop down to choose which custom API you want to look at. Just ruby 1.8: http://railsapi.com/doc/ruby-v1.8/ Just ruby 1.9: http://railsapi.com/doc/ruby-v1.9/
http://www.zenspider.com/Languages/Ruby/QuickRef.html
Thanks everyone, free (useless) comment karma around!
http://www.gotapi.com/ is useful
There's [fxri](http://rubyforge.org/projects/fxri/) which is similar.
http://apidock.com/ruby
mIRC script is pretty basic and doesn't have object orientation, namespaces, or anything like that. Its help file therefore can be composed of a single list of aliases and commands, a bit like the PHP help. It's slightly more complicated with Ruby.
`ri` from the command line is an incredibly useful tool. `ri String#strip` for example, will give you documentation on the `strip` method for `String`.
I like [rubybrain](http://rubybrain.com/), but unfortunately it's not updated for 1.9.1 yet. Even the [standard rdoc](http://ruby-doc.org/ruby-1.9/index.html) is similar to the example you posted.
Does it still suck though?
I'm gonna make the obligatory 'It's still not emacs' post.
I use gotapi quite a bit, but the docs can be pretty dated.
Seconded, RailsAPI is awesome, even if you're not into Rails. If you're using OS X, try [making it into a menu bar icon with Fluid](http://blog.programmanstalt.de/articles/rails-on-the-menubar/) - voila, all APIs, only a keyboard shortcut away.
Apart from the official API docs, you might like the [cheat gem](http://cheat.errtheblog.com/) created by \_why; it gives you command line cheat sheets.
wish this was easy to get working on solaris w/ sun studio compiler. solaris is meant to be supported, but that's with gcc. And gcc builds of apache aren't supported by sun.
I was bored, so I wrote something that might help you out. I find that it is very helpful at times to have an easy to use local copy of your documentation that is not rdoc. Using the same tool that generates the documentation for railsapi.com, sdoc http://github.com/voloko/sdoc/ (install sdoc first), I just came up with a script that will generate the sdocs for all of your highest versioned installed gems. Warning this takes a long time to run depending on how many gems you have installed. Disclaimer: This code is written by a guy who is a little drunk and very sleepy. http://gist.github.com/198819
How does it suck? I've used Idea before and quite liked it; is the Ruby version just not up to the same quality?
I don't think that's _why's. Defunkt has the original repo on Github.
Oops - thanks, it seems you're right. For some reason I've always allocated errtheblog into the _why universe.
Yeah, I guess you're right. I just don't like the idea of having to install gems twice. Once on my ruby installation, and once on hackety hack if gem supports arrives. How about just pointing hackety hack (during installation) to an available ruby install if preferable by the user?
The direct link is [here](http://www.jetbrains.com/ruby/nextversion/index.html)
Very cool -- I didn't realize you could specify a method and not just a class. Thanks!
I think it comes down to focus and purpose, right? I mean, you shouldn't really be developing huge things in Hackety. It's a tool for learning. Once you learn your way around Ruby, you can just make a regular Shoooes app, you know? Not saying it won't happen. I think that's an interesting idea, but if you're on the "installing gems" phase, you're probably already past the point where Hackety is useful. Is there an advantage of using Hackety over just straight Shoooes that I'm missing?
Still used swing last I checked, I downloaded the trial a few months ago and I ran into all sorts of issues and the Linux install process was not what I'd call enjoyable.
I agree that you'll understand what's going on at a deeper level when you learn assembly language. But we're talking about a first language, as the original poster says: &gt; However, what I would rather do is convince management that ruby would be a far better language to teach students programming especially considering I'll probably be teaching students who have never been exposed to programming. There's a lot to learn and keep people engaged and wanting to learn more before you get to marshaling parameters.
Point them at this:http://web.mit.edu/6.00/www/info.shtml and point out the similarities between Ruby and Python. - Paddy. 
Well, this article made no sense to me, because I'm unfamiliar with the buzzword "bowling game kata". It sure sounds like something a middle-manager who keeps up with all the fads would like though!
this is really great. i really think that Enumerators are going to have a big part to play in modern ruby 1.9+
I believe your dismissal is premature: this is about programmers writing code for fun and for practice -- but not for money, something that most fad-loving middle managers would think was a waste of time. Katas are a way to practice your programming skills -- in this case, by simulating a bowling game in Ruby. See here for background: http://en.wikipedia.org/wiki/Kata_%28programming%29 I hope that context helps you understand the author's motivation.
Show them this in IRB. &gt;&gt; infinity = 1.0/0 =&gt; Infinity &gt;&gt; (0..infinity).include? 124118764 =&gt; true &gt;&gt; (-infinity..infinity).include? -1235 =&gt; true &gt;&gt; (1..infinity).each {|value| puts value} =&gt; &lt;lots of numbers output&gt; &gt;&gt; infinity-1 =&gt; Infinity &gt;&gt; infinity-infinity =&gt; NaN &gt;&gt; infinity+infinity =&gt; Infinity The language is so symbolic that you can work with infinity as a value, even creating range objects with it.
Nice. I just happen to need this *right now*! Is this a feature or a bug? Meaning, will it still work in future versions of Ruby?
accidental feature. `(a..b).include?(c)` is equivalent to (a &lt;= c) and (c &lt;= b)
http://weblog.jamisbuck.org/2007/2/7/infinity
Nice. Could come in handy.
I don't like the 1/0 thing but the functionality is good.
Clever, reminds me of _why...
 tar zxvf rubymine-build.tgz sudo mv rubymine-build /usr/local/lib sudo rm /usr/local/lib/rubymine sudo ln -s /usr/local/lib/rubymine-build /usr/local/lib/rubymine
It's pretty awesome. They worked on stability and performance. For most Ruby development, it gives me a productivity advantage over the Vim/Emacs/Textmate users I've seen. There are some UI flows that are unmatched on any other application I've used (navigating to panes, type search in trees, project-wide search, refactorings). It is very resource intensive though (we use 8-core machines, so it's not a problem). Also, they have some support for SASS, which is nice.
If you are going to give it a try, learn the hotkeys. The demo video hosts only use the mouse, which is a shame.
Assuming you already have a functioning JRE. I would have much preferred a .deb or apt repository too, personally.
Well, hackety could be extended to teaching people how to use gems. There's this great gem called gosu used for making 2d games. It comes with a couple of small sample games. My vision would be something like making a lesson for gosu on hackety hack. Showing people how they built the sample games. I like hackety hack's 'interactive' lesson system. I'd like to see it used not just for beginners but for people trying out gems they're not familiar with. Imagine a world where every gem came with a little .hacketyhack lesson file to show how to use the gems features. Beats learning out of an txt file.
I will be sure to check this out. I have had to fight a boatload of security issues with the Try Ruby project.
Hm. That's really sweet. I could see that, yeah. Both of those ideas are pretty cool. Because you're right. Every gem always has a little tutorial anyway...
Whats wrong with the example? It doesn't show for me.
Looks nice. I was just wondering if something like this existed for Rails. Component-oriented web development is a good approach for building rich webapps. The standard Action Pack view/controller approach works well for a lot of apps, but if you find yourself with a lot of shared partials and helpers, then it becomes increasingly hard to manage.
I think these guys are on to something. I'd like to see the rails guys seriously consider folding this in somehow. At a minimum use some of their idea.
I'm not sure whether or not I feel like this is cool or an exercise in insanity o_O.
In an environment that already has eval and lets you redefine symbols, writing a lisp interpreter is fairly straightforward. [Topher Cyll](http://www.apress.com/book/view/159059911x)'s book includes one that spans like 10 or 15 pages.
Be sure to check out [RLisp](http://t-a-w.blogspot.com/search/label/rlisp).
Don't forget Bus Scheme: http://github.com/technomancy/bus-scheme
Ruby is an acceptable lisp for most people.
1.0/0 has applications like Ohm's law. I suppose it applies to any engineering field where x = 1/y, in this case conductance and resistance. Also, x/Infinity = 0 and Infinity/x = Infinity, for all x except Infinity. This completes the usefulness. It works perfectly in matrices. &gt; but the functionality is good. So we agree then. I learned to stop worrying and love the 1.0/0. FWIW, Javascript and Haskell do it too. EDIT: Actually it's a floating point [standard](http://en.wikipedia.org/wiki/IEEE_754-2008). There is also a negative infinity and it too works exactly as it should to make Ohm's law work.
 irb(main):001:0&gt; puts the: :new, hash: "syntax", is: :awesome, in: "Ruby", version: 1.9 {:the=&gt;:new, :hash=&gt;"syntax", :is=&gt;:awesome, :in=&gt;"Ruby", :version=&gt;1.9} =&gt; nil
That's [standard](http://en.wikipedia.org/wiki/IEEE_754-2008). C can do it too. #include &lt;stdio.h&gt; int main (int argc, char **argv) { float temp = 1.0; float infinity = temp / (temp - 1.0); printf("%f\n", infinity); return 0; } # ./a.out inf
yeah, it was mentioned as a standard in further googles. my bad. was it really necessary to downvote tho? it's not uninformative, it's just not unique to ruby.
i've been doing something similar using rake-compiler, which makes the process very straightforward. i wonder though, when i have to link to an external library, such as freeimage or so, what is the process then? I have some idea about statically linking to another file that has stubs for the dll, but im still not sure. anyone know what to do in this situation?
This is a very interesting article. Maybe somebody will write a higher level library to make use of these techniques easier for people who are not unix socket programming gurus. 
javascript has it too, didn't knew about haskell but I like the approach where the +/-infinity is a magic constant and not a number because infinity itself is not a number and 1/0 is an invalid operation mathematically speaking, it's the limit what we're talking about. but yes, from a practical point of view these subtle differences are meaningless to us programmers so I guess it's ok :)
holy crap! for a freebsd + ruby fanatic, this is so completely awesome that i think my brains are leaking out.
Can anyone who is better at benchmarking than me weigh in and comment the validity in a "general" case on this?
I am Lisp programmer and I write an article on issues as macros, fexprs and eval. I want to compare opinion of Ruby and Lisp programmers on eval. Some readers might think that such post constitute spam on Ruby site, but I believe that resulting information will not be completely devoid of value for Ruby community. If you want to contribute few seconds, the poll is on my blog, on the top of the right column. Thanks, Kazimir Majorinc
one thing, consistent colors would have been good :) unicorn is purple in the first graph and red in the next, that's a bit confusing... ;)
This saves about 8 keystrokes. Why not put a method in the client model? def hiv_diagnosis? self.diagnoses.include?(Diagnosis.find_by_name('HIV')) end @client.hiv_diagnosis? # Returns true or false
My thoughts exactly. You could also just define get for your model as simply: def self.get(name) self.find_by_name(name.to_s.uppercase) end 
Beware that the method unnecessarily generates two queries and loads a bunch of objects in memory, as the version in the blog post also appears to. A leaner way to do this check is with a single query on the association: def koro_diagnosis? self.diagnoses.find_by_name('Koro', :select =&gt; 'name') end # generates the query: # SELECT name FROM "diagnoses" WHERE ("diagnoses".client_id = 42) AND ("diagnoses"."name" = E'Koro') LIMIT 1 This will return either the object (which would evaluate to true) or `nil` (which is treated as false), and it uses a single query and less memory since it only loads one attribute ('name') of the one diagnosis object. If you want it to return actual true/false, then use a double bang before the query: !!self.diagnoses.find_by_name('Koro', :select =&gt; 'name') or a not `nil?` !self.diagnoses.find_by_name('Koro', :select =&gt; 'name').nil? If it needs to take an argument like `include?` so it can be used on any instance to check for any diagnosis name, it could be something like: def is_diagnosed_with?(name) self.diagnoses.find_by_name(name, :select =&gt; 'name') end which you could then use like this: if @client.is_diagnosed_with? 'Koro' ...
I think you'd like def is_diagnosed_with?(name) self.diagnoses.exists?(:name =&gt; name) end That does an SELECT id FROM diagnoses ... LIMIT 1
Indeed. I should have know there was a method like that. Thanks!
It is more Rails-ish (declarative) but more importantly it caches the result. 
Less than $1k/month to write it? I hope it isn't a full-time project. You can make more money as a Wal-Mart greeter.
I like his attitude on pirating the book.
this gem is intended for "static" data in your app -- like diagnoses. so in that domain this gem is intended to do two things: 1) make your code more concise and more readable 2) cache the result so that you keep data that is static in memory; thereby reducing the number of database hits also i think there is value in gemifying this and making it more declarative as stevedt points out.
surprise! yeah... didn't see that coming at all.
likewise, everyone else was saying it was going to come back but I wasn't holding out hope.
Wow, what a bummer. They should at least point gems.github.com at gemcutter, assuming they find a way to deal with the namespace issue.
Well, you've got a year to transfer 'em over yourself, so it shouldn't be too big of a deal. Also, I think the namespace/forking isue is pretty much decided on according to [this](http://litanyagainstfear.com/blog/2009/10/09/on-gem-forking/).
Long live gemcutter!
What are people most upset about this that they can't host there anymore or that they don't have something to automatically build there gem on commits?
As a Debian user, I fucking hate the idea of gems. It makes life hard on package maintainers and ensures ruby based applications including rails will be hopelessly out of date. Moreover rails applications are that much harder to ship on Debian. Gems solve a problem for individual developers while making it difficult for normal users who just want to install the software. Learn from CPAN! They do it right.
Any news on annotations? 
There is a lot of work going on to speed up Ruby on appengine. Also, you can use cron to keep your app loaded as a hack for the mean-time. 
Thanks, I thought about using cron for that purpose - I will give it a try. Right now, though, I am just using JRuby 1.4.0RC1 + Sinatra + DataMapper - no problems so far. I would bet that eventually Rails support on AppEngine will be very good. The Java support using Eclipse plugins is great.
How does having them prepackaged make life hard on maintainers? Can't they just do what FreeBSD ports do and just leverage what they provide? What exactly is it about CPAN which makes it "right"?
These topics have been discussed in much better detail elsewhere. see: [http://www.gwolf.org/node/1740](http://www.gwolf.org/node/1740) Basically the idea is that even though CPAN works in a similar way, there is sufficient metadata in CPAN packages to allow packages to be built more or less automatically for Debian. See `dh-make-perl` package on Debian. Most gems (not all, though) do not have this. Also its does not seem to be possible for gems to specify dependencies on non-ruby components. Another problem is that gems do not install themselves into places where other ruby apps can see them. This makes it impossible for non-gems applications to use them. I understand why gems exist and what they are for, and I think they make getting development environments easy. But I need some way of packaging my software to be installed on hundreds of machines through my computers' standard software installation mechanism. Edit: grammar
Also see: http://www.madstop.com/ruby/ruby_has_a_distribution_problem.html
apparently unicorn's scalability and unicorns in general have something in common It doesn't exist. /troll off 
&gt; Also its does not seem to be possible for gems to specify dependencies on non-ruby components. I don't see how you could manage this, because different OS's name packages differently, so how would you express dependencies on them usefully? If it's metadata you need, name it. I'm sure extending rubygems to provide it would be possible. I'll point out that CPAN modules in FreeBSD ports take almost exactly the same level of effort as Rubygems; a ~10 line Makefile with manually specified deps and a line that instructs the ports system to use the appropriate mechanism to install and generate the plist. This despite CPAN having 600+ lines of perl dedicated to integrating with the ports system (BSDPAN) - it doesn't negate the effort packagers have to make. &gt; Another problem is that gems do not install themselves into places where other ruby apps can see them. This makes it impossible for non-gems applications to use them. Ruby 1.9 resolves this by handling gems internally. I do find this somewhat annoying, personally; it doesn't scale well with a lot of packages. However, I don't think it's particularly intrinsic to gems to have them installed in this way; it could just as well unpack gems in a standard site-ruby directory, it's not like there's heavy magic involved. You wouldn't even have to lose the ability to have multiple versions installed at once, it'd just involve some file/directory juggling.
The royalties keep going for hopefully much longer than what the book originally takes to write. But regardless, only a *very* small percentage of authors can make a decent full time job out of it. 
Hey look yet another reddit douchebag!
Has anybody abstracted unicorn out to a library we can use to write generic servers with?
ive seen a few of your comments, 90% of them are about how much you hate reddit.
Someone has a bad case of the Mondays :-) 
awesome... hopefully it can take over for image_science
This pastie shows how to access usernames and password by spawning a subprocess that calls the os x command line utilty secutiry. It works, but unfortunately the user have to grant the program named "security" access to the os x keychain. A better solution would be to grant access to to the actual ruby script instead. In order to do that, a system call had to be done from ruby to access the keychain directly. Any help would be highly appreciated.
This is a neat idea. I didn't know about `security`. Thanks... BUT... This code is a mess and can be improved a lot, from small style/idiomatic changes to big sweeping **wtf** changes. Usually I can look at someone's code and know/guess what language they're coming from. I can't in this case. (C, maybe?) * Stop using parens everywhere. * Use `unless x` instead of `if ! x` * Use string interpolation instead of String concatination. * Use Array#join instead of String concatination. * Use ANYTHING BUT String concatination. * Learn your iterators and use the right one for the job. * Use arrays instead of continually building and breaking down strings. Ruby has data structures! Use them! * Match what you actually want. * Say(read: code) what you actually mean. Here is a simple example: # original: stderr=~ /^password: (0x.*)$/ password = $1 if(password) password = decode_hex_string( password.sub(/^0x/,"") ) end # vs: matching what you actually want stderr =~ /^password: 0x(.*)$/ password = $1 password = decode_hex_string password if password # vs: saying what you actually mean password = decode_hex_string $1 if stderr =~ /^password: 0x(.*)$/ Here is a more serious example: # original: def decode_hex_string(hex_str) str = "" i = true hex_str.split("").each do | char | if(i) str += char i = false else str += char + " " i = true end end decoded_str = "" str.split(' ').each do |val| decoded_str += val.hex.chr end return decoded_str end # vs using arrays, map, join, and better variable names def decode_hex_string(hex_str) ary = [] str = "" odd = true hex_str.split("").each do | char | if odd str = char odd = false else str += char ary &lt;&lt; str odd = true end end ary.map { |val| val.hex.chr }.join end # vs using the right iterator for the job def decode_hex_string(hex_str) ary = [] last = "" hex_str.split("").each_with_index do |char, i| if i % 2 != 0 last = char else ary &lt;&lt; last + char end end ary.map { |val| val.hex.chr }.join end # vs treating strings and arrays like real objects def decode_hex_string hex_str hex_str.scan(/../).map { |char| char.hex.chr }.join end And now all of a sudden that method is ONLY there to give it a name and really isn't necessary. The whole program could be: host = ARGV.shift or abort "usage: #{File.dirname $0} hostname" text = `security find-internet-password -g -s #{host} 2&gt;&amp;1` user = text[/"acct"[^=]+="(.+)"/, 1] pass = text[/password: "(.+)"/, 1] pass = $1.scan(/../).map { |n| n.hex.chr }.join if pass =~ /^0x(.+)$/ puts "Username: #{user}" puts "Password: #{pass}" That's a lot simpler, more efficient, easier to maintain and understand over time. 
There was a Google summer of Code project this year which generated a Python package which provides a keyring API and implementations for a variety of different systems (Keychain, KWallet, gnome-keyring). http://pypi.python.org/pypi/keyring The src/keyring/backends/ directory contains the C/C++ code which is compiled as an extension module, so that it's not necessary to spawn a subprocess, and you can instead talk directly to the underling keyring system. It works pretty good. 
Truly impressive. Lots of ruby constructions I haven't seen before. You are a better ruby golfer than any tiger in the woods. 
Thanks! This is exactly what I was looking for. It would be great if it was ported to ruby. I am working on a webdav client in ruby: http://github.com/thomasfl/davclient/. At the moment it only works if passwords are stored in plain text in the users ~/.netrc file. It works, but it's not always preferable. 
that's some scary-ass code...
Nothing like scary ass-code to get your heart pumping... For example, check out this ass-code: def fib(n, t = n &lt; 2 ? n : fib(n-1) + fib(n-2)) t; end \*shudder\*
&gt; Both Ruby and the previously mentioned forgotten language are very powerful, and can get a lot of the same things done, but it seems that Ruby code ends up being written in a largely idiomatic way. Translation: "I finally learned to hang out with *good* programmers (i.e., the people on the ruby-talk list, who are basically the core of the language's community) at the same time I started using Ruby. I never learned to hang out with *good* programmers (i.e., the people on the PerlMonks site, who are basically the core of the language's community) while I was using Perl. I will blame this on the language, because it can't possibly be my fault."
The scariest thing about it is that it doesn't do tail call optimization.
Good point. That deserves a feature request.
The mysterious string concatenation is just like C.
thanks, but no. golfed code is an unmaintainable mess. I strive for simplicity and parsimony in my code, not smallness at the expense of everything else. But, you do see the point I was trying to make, right? Even something as simple as: unhexify str.sub(/0x/, '') if str =~ /(0x.+)/ vs: unhexify $1 if str =~ /0x(.+)/ Goes a long way to say what you actually want.
One of the reasons I really like to program in ruby, is the ability to write readable and simple code. I have studied your code thoroughly to learn from it. I didn't knew about the string[/regexp/,index] construction and have never user string.scan before. I will certainly have another look at my pick axe book . 
so much for ass-code
*Yeah, we can define code in default parameter value ! Awesome, let's use it like mad !* Reminds me my noob developer behavior.
Here ya go: http://paste.segment7.net/bl.html I was bored. :) BTW, you shouldn't use pastie for reddit posts as they're temporary and your link will be broken soonish. 
(reposting this comment up top, since I kinda flooded and ppl will miss it) Here ya go: http://paste.segment7.net/bl.html I was bored. :) This doesn't solve your problem. First off, authorization goes to the binary (ruby) not the script. Second, the authorization model is very fine-grained. You must authorize EACH keychain item for EACH app. If the item is created by the app, then it is automatically authorized to access it again, so my code is useful for maintaining a new set of keychain items, but isn't as useful for accessing existing ones (unless they're accessed many many times).
Tanks a lot! Lots of kudos to you! After first installing the wrong inline gem, I got it working after running "sudo gem install RubyInline". It would have been better if authorization was given to the actual ruby script rather than ruby, but this is much better than storing passwords in plain text in a .netrc file. A port of the python keyring library is an excellent idea for a ruby gem. I have enough work on my hands right now on my webdav client, but maybe in the future. 
Oh, I get it. Nice one.
I got bored again... % sudo gem install osx_keychain 
http://www.cancer.org/docroot/don/don_0.asp ?
Thank's again! 
Is that a question or a statement?
I'll be happy to do it.
Not recommended. It would be a better idea to get the [Technology Preview2 installer on Rubyforge](http://rubyforge.org/frs/?group_id=167). This way you get a later version of Ruby-1.9 (patch level 243 as opposed to the patch level 129). Also, you get MinGW, a Windows port of GCC which can compile many gems which are available as source.
I think this could be used quite well in combination with CUNT, the Concurrent Universal Nonasynchronous Transaction library.
Seems similar to [nanite](http://github.com/ezmobius/nanite).
But do you think it will violate the whole synchronous approach from a design standpoint?
Both are pretty heavyweight relying on running separate servers. There needs to be a more self contained, lighter-weight version of these things. 
Rumor has it, that it was designed for FUCKING: "Functional Upwards Compatible Knowledge Interpreter for Next Gen"
Oh man, I ordered this back in March and have been waiting eagerly. I almost cancelled my order to settle for the Java version. Can't wait to get it in the mail! (Oddly, Amazon says it doesn't ship til the 27th).
&gt; I almost cancelled my order to settle for the Java version There is a Java version of this series? I couldn't find one on Amazon...
it's been out for almost ten years...different series, shares a lot of the same authors (fowler, beck). http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1256190312&amp;sr=8-1
This reminds me of MovableType of olden days. Darn thing would spit out everything as a static page, and development was a pain in the ass. &gt; Static files are fast This is undeniably true, and may apply to A-list blogs who receive millions of hits. For small and mid level blogs, Wordpress + sensible caching is almost as good. &gt; Source control friendly Nah, not quite. Source control is meant for *source*, not data. &gt; Less security concerns &amp; Easy to deploy Agreed, but at what cost? &gt; Use your favorite editor You aren't restricted to using the default Wordpress editor, there are many desktop and web-based apps you can use to manage your blog.
I agree with this. Why not just make a blog with Dreamweaver?
GOOD. Been waiting for days. Maybe some day the RSpec book will get printed.
http://twitter.com/maglev oh and public alpha supposed to be coming soon
Didn't know about this, thanks!
Jekyll still updates indexes and provides a template engine.
Luis Lavena has done tremendous work in getting Ruby to work well on windows. You get a Ruby which is faster, more stable and has more up to date extensions. It can still be a bit fiddly to get gems to compile from source - tracking down dll's, header files and libraries so that the rakefile can see them. I have found his [rake-compiler](http://github.com/luislavena/rake-compiler) gem really useful. Edit: if you have a problem with IRB this newer version of [rb-readline](http://github.com/luislavena/rb-readline) should fix it.
Monty from GemStone gives updates at the local pdxrb meetings. It's still active, and you can see the update notes from our August meeting: http://j.mp/2wpWv0 They're working on separating their persistence tier so MagLev can be more of an MRI replacement instead of a whole platform.
&gt; Nah, not quite. Source control is meant for source, not data. True, but it's not restricted to only that. Why not use it for data?
This is similar to both [hobix](http://github.com/hobix/hobix/) and [whisper](http://masanjin.net/whisper/). Does anyone have experience for a comparison?
Those are five reasons to use _any_ static site publishing tool. I'm particularly fond of http://nanoc.stoneship.org/ (but that's because I wrote it).
&gt;&gt; Source control friendly &gt; Nah, not quite. Source control is meant for source, not data. I don't agree. You shouldn't just put source under version control. Everything should be under version control. &gt;&gt; Less security concerns &amp; Easy to deploy &gt; Agreed, but at what cost? In my experience, it is _much_ easier to deploy a static site than a dynamic one. The cost is near zero. You don't even need a special web host—even those free ones will do (not that I recommend using a free web host). To deploy my own site, I type "rake deploy" and that's that. &gt;&gt; Use your favorite editor &gt; You aren't restricted to using the default Wordpress editor, there are many desktop and web-based apps you can use to manage your blog. How, exactly, do you manage your entire Wordpress blog in an external desktop app?
Dreamweaver isn't scriptable enough. Automatically generated RSS feeds, site map, paginated articles, category pages, … are not possible in Dreamweaver.
MovableType is still alive, on its way to the 5.0 release (beta 3 was released yesterday).
&gt; I don't agree. You shouldn't just put source under version control. Everything should be under version control. I guess a good developer would do both. It's good to have data in source control because it makes deploy and roll-back actions easier. &gt; In my experience, it is much easier to deploy a static site than a dynamic one. The cost is near zero. You don't even need a special web host—even those free ones will do (not that I recommend using a free web host). To deploy my own site, I type "rake deploy" and that's that. By *cost*, I was referring to the loss of features when moving from a dynamic to a static blog. &gt; How, exactly, do you manage your entire Wordpress blog in an external desktop app? http://illuminex.com/ecto/ http://wbloggar.com/ http://www.scribefire.com/ http://www.codingrobots.com/blogjet/ http://www.qumana.com/ http://www.zoundry.com/ http://download.live.com/writer
Nailgun for MRI would be pointless, as MRI (the C implementation of Ruby) has very little cost to start up, but is very slow during runtime. JRuby is faster than MRI in execution time, but takes longer to start up because it has to start up the JVM. If you're looking for a very fast Ruby, check out MacRuby.
Definitely looking forward to it. It's enough to make a grown man wet his pants. 
I always seem to have trouble watching InfoQ videos. Anyone have an alternate link?
I have to obviously agree with you... I chose nanoc for http://www.h3rald.com because it's MUCH more flexible than Jekyll or any of the others.
Oh and here I was searching it in '09 books :P Thanks.
i think what you are looking for is called a compiler. also, nailgun just keeps a warm jvm on hand so you don't have to wait for it to start. you *have* to start the jvm some time....
I've met this guy before, he's a charming geek.
&gt;If you're looking for a very fast Ruby, check out MacRuby. Don't have a mac. 
&gt;&gt; How, exactly, do you manage your entire Wordpress blog in an external desktop app? &gt; [lots of links] Ah, sweet. Nothing prevents a static site generator from providing a blogging API, though. This is something that's on the wish list for my own static site generator, but so far I haven't started working on it yet.
Anyone try RoRed? I was about to try it...
one thing to note about macruby, is that it doesn't comply to the ruby specs. Only about 80% of the core specs [are implemented at this time](http://www.macruby.org/blog/2009/10/07/macruby05b1.html) and if the jruby team's experiences are anything to go by, the last 20% is the hard part/part that slows ruby down.
dude's never heard of math rock.
Vaporware, I'll believe it when I'm running it.
First I learned how to publish gems to Github. Then, after they switched hosting providers, they decided to discontinue gem hosting. So, then I figured out how to publish gems to RubyForge *a week* ago. Now this.... I give up.
Don't give up! The gem you pushed to RubyForge should be on Gemcutter (if not this second, then soon). And "We’ll be merging user accounts from RubyForge, so you’ll be able to log into RubyGems.org with your RubyForge login credentials. Your gem ownerships will also be transferred over." So the RubyForge publishing process will remain the same for a while, and whatever changes will likely be minimal. The Gemcutter team is fixing our problems (so it seems). It's a time for rejoicing, not despair.
thanks for everything, rubyforge! including your timely departure :-)
I really suggest that you check out this awesome Railscast on the site: http://railscasts.com/episodes/183-gemcutter-jeweler
where's the best place to discuss problems with getting HH up and running on OS X?
I am a little sad to see it go. It was nice to have one place to go when you want to search for ruby stuff. It's just going to get lost in the noise of sourceforge or github.
I've been doing this for years and years through simple test class inheritance.
Thanks for the link, I will have to watch that.
Weird. That's exactly what I thought when I read the article. :-/
wait.. did you guys read the rdocs too?? i was wondering where my almost magical rspec super powers came from...
take your decision based on the pessimistic scenario
rdocs for what exactly? What I'm saying is that you don't need ANY engineering for this feature. It is built into class based inheritance and already existing unit test infrastructure. 
This is about the only reason it is sad to see it go, in my opinion. It became a great place to search for Ruby-specific libraries, applications, etc. Now that I think about it, though, I haven't visited RubyForge in quite a while, so maybe it has become less necessary.
i needed to better indicate that i had my sarcasm turned up to 11. 
oh _that_ rdoc. :P
 d = 1.m; e = d**2; d + e #=&gt; #&lt;Alchemist::NumericConversion:0x10f8ec0 @unit_name=:m, @value=2.0, @exponent=1.0&gt; This should blow up because you can't add length and area, the units are inconsistent. There are a couple of different unit conversion gems available now, most of which handle this sort of thing. for example: http://ruby-units.rubyforge.org/ruby-units/ EDIT: trying to get the code formatting to work
Completely useless without Solar Masses.
Hey olbrich, thanks for pointing that out, it only currently handles simple mathematics. There is also the ruby Stick library, but I wasn't a fan of the formatting for either of them. I'll roll out a fix for that issue in the next version, thanks for the heads up.
I'll be sure to add those in the next version.
This would make me far too lazy for my own good.
:)
 10.kilometers + 1.mile # 11.609344 kilometers How is the return value of this expression obvious? It could be miles, it could be kilometers. Hell it could be feet or centimeters. It should not allow this kind of math and make you force the same units. 
The library is here to make your coding experience easier... if that part of the library doesn't make it easier for you, then don't use it. EDIT: Also, keep in mind you can do (10.kilometers + 1.mile).to.feet if you really wanted to.
&gt;The library is here to make your coding experience easier... if that part of the library doesn't make it easier for you, then don't use it. I am simply pointing out this library can be the cause of unintended errors in your application. To me it makes sense to enforce some sort of a mechanism so you don't accidentally add cubic centimeters to miles or as in my example get confused about the unit that is being returned. &gt;EDIT: Also, keep in mind you can do (10.kilometers + 1.mile).to.feet if you really wanted to. Sure but I would prefer 10.kilometers + 1.mile.to.kilometers 
nice lib, but i cant help but feel a cool name like 'alchemist' is wasted on a simple unit conversion library ;)
It does throw an Exception if the types are incompatible. 1.mile + 1.square_meter # Exception: Incompatible Types Also, I took the google approach here. If you google "10 kilometers + 1 mile" it returns 11.609344 kilometers. I can see where you are coming from though, perhaps I will add an option to turn on strict unit typing. Thanks, malcontent
Install ffi, ruby-sdl-ffi and nice-ffi gems first. You need to have the SDL libraries in the path. On Windows found that I had to copy the contents of the 'lib' directory of the RubyGame gem into C:\Ruby\lib\ruby\1.8 directory. Otherwise it works nicely.
shouldn't it install the dependencies on its own?
You are right. It does. I was following the instructions [here](http://blog.rubygame.org/articles/2009/10/21/rubygame-2-6-test-release) and [here](http://rubygame.org/wiki/Windows_Installation_Guide). The one thing it doesn't install is the ruby-opengl gem used by some of the sample files. All of these are either pure Ruby or available precompiled. Compiling gems from source on Windows can be a fiddly, Google intensive business. I was taking no chances. But this works out of the box. Nice.
I like that it's faster but I don't like the syntax. context "a new user" do setup { User.new } asserts("its balance") { topic.balance }.kind_of(Currency) end I would prefer the old kind of assertions to that. Of course ideally it would be something like. topic.balance.kind_of?(Currency).should_be_true or something. 
Perhaps you are looking for RSpec? http://rspec.info/
Scenes? Props? Backdrops? Why make people learn ersatz nomenclature for concepts that have existed for years?
[the wiki explains](http://limelightwiki.8thlight.com/wiki/A_Cook's_Tour_of_Limelight#Theater_Metaphor) how that came to be
I agree. BTW if you are happy with jruby you should check out monkeybars (swing) and glimmer (swt)
Yes or matchy. I wonder if it matchy could be made to work with this.
Drama Driven Development
Uhh.. why in the calculator video is it building an OS X app and having the menu inside the app window?
Yeah, not liking that, or the way that your "styles" change from a hash to method calls depending on what file you put them in. Interface inconsistency all around. 
If you want your scripts to look like natural language, take a look at the treetop gem. Cucumber uses treetop for the grammars and for parsing feature files.
I actually prefer this syntax. There is no magic whatsoever. I can immediately tell what's going on. As a result, it is concise, readable, debuggable, and fast. I've benchmarked it and it is screamin' fast. My only complaint so far is that failures don't give the file:line of the failure so they're kinda useless to me. Errors also have unfiltered backtraces, but I don't actually mind that as much.
rule of the thumb for using attachment_fu/paperclip with s3 = DelayedJob + God
The thing I dislike most is the fact that you have to put your explanation before your assertion. I am glad it's fast but I don't like the syntax.
I guess he moved stuff around or something, but the link is now bad. Here is the current link [http://yehudakatz.com/2009/11/03/using-the-new-gem-bundler-today/](http://yehudakatz.com/2009/11/03/using-the-new-gem-bundler-today/)
Can anyone find a direct link to the video? We have Vimeo content-management fail.
Oh, it's a private video. Nevermind. I guess us peasants will have to be content with a disjointed PDF.
That is SOOO much nicer than the crap macros I have from wake back (I think from maurico's blog?). I'll still prolly need both, but this is a great front end to the high level views you need most of the time.
While I find this idea somewhat interesting, there are a few drawbacks. 1) While we do have the new arrow notation in 1.9, I doubt it'll gain much adoption as a common style, until a lot of high-profile people start doing it. Modules and monkey patching / eigenclasses seem to be Ruby's bread-and-butter in terms of software modularization, and will probably stay that way for some time. 2) Amongst the few that are taking on this style, there's a bit of disagreement on implementations. A quick search shows 3 or 4 different implementations of function composition, which seems like almost a necessity to work in this style. I think this functionality would have to go into a major library, probably ActiveSupport, before there's an agreement on the "correct" way to do this. So yeah, if you could get the guys maintaining Rails to use this style, you'll probably have something.. Otherwise.. write your multicore stuff in Erlang or Haskell :)
ok... looking at it in detail I think it terrifies me. Dependent on its own gdb 7, runs python, etc etc etc... crazy. Still, that reads really well.
a patch to fix a memory leak in GDB and another to print stuff out. yes, there are some crazy hacks we snuck in, but without them you wouldn't get the cool output that you do.
And here I thought this was about process monitoring with [bluepill](http://theinvisiblethings.blogspot.com/2006/06/introducing-blue-pill.html)
We would not want to make people cringe. That's not politically correct.
he improved the performance of several methods, 63% in maximum, 8% in average. Not overall ruby performance by 63% as the title implies. But still a good job. 
To be fair, the title does say "up to" and not "by"
Wow, who'd have thought: [1,2,3].map {|n| n+2} Is faster than: [1,2,3].map {|n| n+1}.map {|n| n+1}
That's great. I hope it spurs greater 1.9 adoption. Soap4R I am looking at you!
Why not just use Drupal or Wordpress? Rails doesn't have any largely supported CMSes with tons of plugins like those two. So why not just use one of them?
Of course I could use them. I am just asking why such a thing hasn't been written in rails yet? 
I'm still using the copy of ruby I downloaded in February and haven't updated since. Is there any big changes between 1.8.6 and 1.9.x? At first I just stayed away from 1.9 since I was learning ruby and read that 1.9 was experimental but now that I feel more stable, I'm just lazy to download and use 1.9. Am I missing much (besides the performance boost)?
&gt;Am I missing much (besides the performance boost)? I like the new hash syntax but the real reason to use it is the performance boost. I haven't had to use fibers or anything.
Great job by the original article auther, heh. He will forever be immortalized as "that Japanese teenager" -_-
Oh gotcha. Well there's a number of CMS solutions. The only I've used is Radiant, which just isn't that user friendly. Looks like the other CMSes, some are alright but non have that many plugins and cover that many usecases. So really depends on just what you want to do in this instance. There is nothing that can compete with Wordpress and Drupal on sheer features though and number of user cases those work on.
browsercms is the best rails CMS right now, and it isn't even so good feature-wise compared to php cms software...
Does it support plugins. For example can I create a forum or something by just dropping something in?
no, as I said it's not good compared to php cms software... if you want to add a forum you set up the forum independently the rails cms space is an eery place, better go with php solutions
Looks like that's exactly what I have to do.
You can still install gems without sudo. They just install to your home directory under ".gems". I think anyways.
`sudo` installs them system-wide in `/usr/lib` or `/usr/local/lib` usually. Without sudo it installs in your home directory (`~/.gems`) so if you don't have your home directory install in your path or a different user is running your ruby script (like passenger/apache), it won't be able to load the gems.
Or Heroku just doesn't fit your needs. I was evaluating a few hosts for a client and took a look at Heroku. I had a call with a couple people there and by the end of it they didn't support some relatively 'standard' things (I think one was ferret, but don't quote me on that, it may have been postgres, this was a few months ago) and they had to do a review of my code and possibly make changes for it to work on Heroku. I was like WTF? For those prices! I never thought deployment was a big deal. I'm not sure why people get in a tizzy over it. Give me a plain jane linux server where I call the shots any day.
As others have mentioned, you don't need to. Even better, use [bundler](http://github.com/wycats/bundler) to keep track of your dependencies, and avoid polluting either the system or your home-directory. 
You don't. I install mine to .gems 
&gt;Would it be safe to chown all directories that gem uses to my user? Or is it something else? Please don't chmod 777 the /usr/lib directory. If you want to install system-wide gems then you need to be root. If you only intend to use them as your own user then you don't need to sudo. I generally prefer to install them system wide if possible, as I don't think I'll be running all my apps as my own user. 
You don't. It'll work perfectly well for libraries if you drop the sudo. If you want binaries to work, though, you'll need to add ~/.gem/ruby/1.8/bin to your $PATH.
&gt; Would it be safe to chown all directories that gem uses to my user? Or is it something else? Then a rouge user comes along and in he slips his malicious code to a gem library which your program later executes.
I believe you meant rogue, but since I enjoy French, I'll let the rouge user slide.
I convinced my department to use Ruby instead of Perl for all new development. It's working great!
I used jekyll for my pages artha42.github.com and found it to be awesome. I needed a bit more functionality than that so I am evaluating webby and webgen.
If you install gems to /usr/local and own /usr/local $ sudo chown -R `whoami` /usr/local you will not have to use sudo to install gems. I recommend this. 
Nice library - I like it. Net::SMTP sucks if you want to attach a file... 
rails: bringing ruby to the enterprise, and vice versa!
tl;dr: "include" already exists, and "acts_as_foobar" is just plain silly, and really acts as a sort of abuse of magic. So yeah, I agree with this post.
I don't think the point of the article was not to use the acts\_as\_yaffle pattern, but to use it when you need the additional complexity it involves. If I had to sum up the article in one sentence, I'd probably go with "Stop abusing include to act like extend and just use extend" or "Learn about what the rails plugin guide is doing instead of blindly copying it".
Bad title. This "feature" should have been available from day one. It's not rocket science especially for a web framework.
The new YARD is really awesome. The autobuild by YARD / Rdoc.info is a pretty sweet thing for the Ruby community.
well if you use rails there is a handy constant RAILS_ROOT
So why didn't you include it? You sure do work in mysterious ways. 
If you're using above about 2.3 or so, Rails.root is a lot handier - namely because it returns a a Pathname, not a string, so you can do things like: require Rails.root.join("some-folder", "my-lib") vs. require File.join(RAILS_ROOT, "some-folder", "my-lib")
Well that and pom files fucking suck with Maven :)
Dive in. Head first. You won't be super-developer, but you can learn a lot. I started work at a ruby shop without a lick of ruby experience (I had previously done C, Bash, and Python). It's easy to read, and easy to learn. Just make sure you stay devoted to it. I like the Apress books. Beginning Ruby and Beginning Rails. 
 require 'pathname' root = Pathname(__FILE__).dirname.parent require root + 'lib/foo' require root + 'lib/bar' Also, in certain circumstances (like writing a gem, for instance) you can avoid absolute paths altogether and use ruby's -I option: $ ruby -I.:lib app.rb 
I think most people say to start with [Agile Web Development with Rails](http://www.pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition). Good luck to you, it's a ton of fun! 
I have found that you should just modify $: since it is simple and intuitive. The only issue I have with it is that it modifies a global variable, which is heartily discouraged. My current solution to this obvious folly is to sack up and do it.
http://railscasts.com/ Helped me out a lot. But after I got a basic understanding of the framework, I wanted to go back and learn more about Ruby itself. 
I have a basic understanding of how to open tins of beans, make toast, and prepare microwave popcorn. I wouldn't call myself a gourmand, and I haven't done any chef training. However, I'm planning to open my own restaurant within the next month or two, and hope to win a Michelin Star sometime in the future. Any ideas/links/tips on how I can make a complete asshat of myself in public? Yes, web application development is a skill that may be learned and developed: just like gourmet cooking, public speaking, or sword swallowing. But although Ruby is a comparatively friendly language, there is almost nothing inherent in its design that will save you from having to make informed decisions about the design and architecture of an application. Let me save you some time: this is not something you will get from a book, because the books people will tell you to read will teach you how to implement, not how to think for yourself. Rails won't save you from having to know how to optimise your database queries, or load-balance your servers. Rails won't teach you how to write a web application any more than a fancy spatula will teach you how to make a better omelette. Yes, you can be a self-taught web developer. But be prepared for a fuckload of work, failure, and repetition. Be prepared to spend entire days hunting down a simple typo. Be humble, be patient, learn from your mistakes, read everything you can. Exercise your lateral thinking skills, because the first way you think to do something is almost never the right way, and you have to train yourself to think through several alternatives before you touch a keyboard. Draw diagrams. Write notes. Think analogously. Yes, you can build a web application in a month. But don't expect anybody to pay for it, or use it, or even see it. Be ready to throw everything away at the end of the month except what you've learned about yourself and your own process. 
I have to agree, dive in. Working within the medium probably will help the best. Find something simple that you might like to build and start there. That should help keep your interest. If your familiar with php railsforphp.com might be a nice place to look. Both ruby and rails have good docs, at least I like them. Can't forget rubyonrails.org. The guides are nice. Pragmatic books are my favorite, but there are some other good ones out there. $rails name_of_your_app have fun!
gem install rails 
You can't build a webapp with no experience, not really. You can learn, and put together an app in a month, but don't expect it to be something you can release into the wild. Sometimes, it just takes experience. If you're gonna build something in a month to learn Rails, make something trashy you can play with locally. Not being harsh (here's a [picture of a kitten](http://www.pet-health-insurance.org.uk/images/kitten2.jpg) to prove it), just speaking from experience. I came from a PHP background, and I've been working with Rails for a couple of years now. Anything you make in your first few months won't come close to shippable, production-ready stuff. Good luck with your endeavor, though.
even better is modifying $LOAD_PATH. It's the same variable as $:, but without the cryptic name
When I first started learning ruby and reading Why's guide, I couldn't get the metaprogramming bit and tossed it away. Later on, I revisited it and learned alot. If you haven't read up on Why's explanation of metaprogramming, I suggest you give it a try. I learned a lot and the specific example he used has helped me reduce the line count on code I wrote in the past. The bit that impressed the most at the time was: def metaclass; class &lt;&lt; self; self; end; end Took me forever to figure out what that was about. class &lt;&lt; self seemed magical to me at the time. P.S. If not familiar with metaprogramming, prepare for a total mindfuck. I spent a couple of sleepless nights trying to *get* the code. P.S.S. Thanks gst for the submission.
I kind of disagree. I'm not sure what your background was pre-ruby but mine was pretty similar to the OP's with a bit of Java, ASP.net and SQL. And programming was far too difficult for me to bother with. It wasn't even about not getting it, it just seemed tedious and a whole lot of work to get little done. I get your analogy and the OP won't figure out how to load-balance servers or optimize queries but guess what; he may not need to. He never said he was building a twitter killer. All he needs is to put up a web app and I think its possible. Well, it depends on how quickly he can understand some programming ideas but its definitely possible. It took me about a couple of weeks to learn some ruby (basic i/o, strings, nums, arrays, hashes and some common methods) and about a couple of weeks more to push out my first rails app onto heroku. Sure, the app had bad code in it but it works and that's what mattered to me. Shit, I still write bad code but I think I'm still learning. How about we just point him in the right direction and make it a team effort to help this guy learn instead being all negative.
Your best bet would be to build a time machine. You can learn, and you shouldn't get discouraged. But it'll take more than a month. 
First thing's first, learn some ruby. Not rails, but ruby. I like Why's Guide to Ruby but since we're on a deadline, there's no time to willy nilly and you should read [Chris Pine's Learn to Program](http://pine.fm/LearnToProgram/). Once you figure that out, download the rails gem (I'll explain that later) and figure out how to build a blog with a comments system (rails version of hello world program). The problem is, there's no way to tell how long that will take you as different people take different amounts of time to *get* programming. When I was learning ruby back in the day, there was this dude in freenode (#rubynoob) who helped me out with some basic questions. Not sure if he's still around as he was the only guy there but since there ain't much I can do for him to show my gratitude, I'll just pay the favor forward. If you need help, send me a pm on reddit. It's much better to have someone on hand to answer your questions quickly while learning. I'll try to get on irc to make this work better but I'm working and am not online regularly nor do I think management will take to kindly to me chatting while at work. Good luck.
dont rush it 
GHC automatically makes this optimization, but that's for Haskell, not Ruby. Although this is a simple concept, kudos for posting it for those who didn't know.
I was hoping something like that would be available in ruby.
All of that is **BULLSHIT**. _Use your damn language_: require 'config/environment' _Anyone_ who pretends to have some reason to need more than that is full of it. Q: But what if you're not in the root directory?!? A: **BULLSHIT**. You are _always_ in the root directory because you're a _smart_ developer and use rake. (rake _always_ chdirs to the root dir) Crap like stupid requires is the reason why rails double loads everything and can't ever become `-w` safe. Clean it up.
Write a bunch of apps. Break shit, and learn how to put it back together. Help people on Stackoverflow, IRC, etc. Make small, testable contributions to open source projects.
Yep. The tutorial section is very good - follow it from start to finish, read it attentively, re-read and/or google the sections you don't get straight away. In the end, you should have a notion what does what in Ruby (on Rails) web development. That's basically how I started - the book led me from "What's ruby? What's a dynamic language?" straight to writing bad code in a commercial project.
&gt;require 'config/environment' That's a rails thing right? I am talking about generic ruby scripts. Does that work outside of rails and if so what does it give you? 
You're going to need a montage.
Here's something I don't understand - rake a Rails unit test - if they're always supposed to be executed via Rake, why bother with "require 'test\_helper'" in every file? I've assumed it was so that the file can be executed in isolation, but what's the use of that "require" at all, when the test_helper is in the parent directory, thereby requiring that the require be modified? I fully understand that I may have missed something fundamental, in which case would someone please enlighten me? tyvm
In Ruby 1.9 the bug is fixed and you don't have to expand path. (If you are sure that you don't load that file twice, no need to expand path too) Or just change the working directory: require 'fileutils' FileUtils.cd File.dirname __FILE__ # or some other working directory Do it once and then you can use paths relative to that directory.
You can't. Reason? All Ruby web app developers are noob programmers. AHHAHAAHAHHASH h ah AHAHAHAAHH
Well, I am looking to make a Twitter alternative actually... but yeah I just want to get my skills to the point where I can put out a workable prototype of whatever app I can think of. Should the app catch-on and start gaining tract, I'll hire people with greater skills... e.g. think of Ev Williams (Twitter founder), I've had a few back and forth emails with him back when he was doing Odeo [post blogger, pre-twitter] and from what I could gather, he knows some programming but he just codes a prototype. I highly doubt he would have done any of the optimisation and load-balancing for Twitter when it took off.
The time limit is artificial. Start digging in. I grabbed all the documentation and bookmarks I could want for. Then I teamed up on a project with someone who has some Ruby on Rails experience (learning both at the same time). Give yourself a chance to dig through nuances of the language. The syntax and string literals are first to get down. For rails understanding the MVC model is helping me dig in. The conceptual balance of objects, where data and handlers reside, and database migrations/updates are all part of the learning process. Using MongoDB has helped me a little to avoid the additional burden of learning MYSQL at the same time, although I wouldn't mind understanding databases more in the future (I've built many of my own binary databases over the years, but they don't live on the web or have to worry about locking/write and read, and relational search). You've got plenty of folks learning with you. Check the google groups, and forums. Finding a community of like minding thinkers will keep you enthusiastic about the learning process. Give it at least a few months before you expect to feel comfortable. Maybe even a year or two before you get the higher order conceptual thinking down.
I guess my point is that people conflate "learning to program" with "learning to write code", or even "learning to write code that compiles, passes tests, and has meaningful documentation". What's missing is the step of asking yourself all the right questions: what am I building? who will use it? why would they want to? what bits will I need to build? how will they interact with one another? with the users? etc. I'm not trying to be negative: I'm trying to be realistic. "Dive right in" is simply not a helpful answer to "how can I accomplish X?" for any meaningful value of X.
The website teach me to code - http://www.teachmetocode.com - has a Screencast series, with 6 episodes, called "Creating a Twitter Clone in Rails" - http://www.teachmetocode.com/screencasts/6. That's a step by step Twitter app written in Ruby / Rails. So I think you can learn from it then try to adapt to your needs.
rails or not. All I'm suggesting is to use require like a normal sane non-magical (ignoring rubygems for this discussion) require. ETA: besides... I was converting your own example back to something sane.
I will frequently run a single test (usually via autotest, but sometimes by hand). I still thing the test_helper "idiom" is bad because it encourages bloat (a LOT of bloat in the case of most rails projects I've looked at / worked on), but that's a different discussion.
`require 'some-folder/my-lib'` is still _vastly_ better.
I... rest my case?
Well, I'm not sure how you measure success, but I actually got paid for one project I made on rails after a few months of self-study. The code I submitted was bad even by my own noobish standards: * No tests * One giant method that basically did everything * Lots of repetition * etc. But I felt like I've accomplished something. To each his own I guess but diving in was a hell of a lot of fun and educational for me.
$: &lt;&lt; File.dirname(__FILE__) require 'config/environment.rb'
You've surely set yourself a challenging timeframe, but I think it's possible to have _something_ working by the end of month two. If your goal is to have a prototype of sorts, I say go nuts, have fun and dive into it; you are going to be fine. But please, please be prepared to throw all your code away should you choose to develop this idea further later on by hiring more experienced coders. Swallow your ego and your pride. Your code is not going to be a "foundation" for the real product - it is most probably going to be a weird, sprawling mess, and the coders you hire will be far better off starting from scratch and duplicating your work anew in a week or two. That being said, a couple things from the top of my head that might be helpful: 1) Tools Develop on a Linux flavor, or preferably on the Mac. Do not develop on Windows. I don't say this as a Windows hater; it's just that this is what is used by the biggest part of the Rails community, and going with the crowd will allow you to make far better use of all the resources, tutorials, gems and plugins out there. You don't want to waste your time troubleshooting platform-related issues. Learn the basics of Git right away. Always version your code and use branches like there's no tomorrow. It's very liberating to know that you can experiment and mess around and can undo everything with a single command. Spending two or three hours upfront here will save you countless hours over the next weeks. 2) Use commercial documentation There are lots of great free resources out there, but I highly suggest spending around $100 on (e)books from the Pragmatic Programmers and screencasts/PDFs from Peepcode. * [Programming Ruby, Second Edition](http://pragprog.com/titles/ruby/programming-ruby) * [Agile Web Development with Rails, 3rd Edition](http://pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition) * [Advanced Rails Recipes](http://pragprog.com/titles/fr_arr/advanced-rails-recipes) * [Git screencast](http://peepcode.com/products/git) * Rails from Scratch [Part 1](https://peepcode.com/products/rails-from-scratch-part-i) and [Part 2](https://peepcode.com/products/rails-from-scratch-part-ii) * [REST for Rails 2](https://peepcode.com/products/rest-for-rails-2) On the free side, [Railscasts](http://railscasts.com) and the [Rails Envy](http://railsenvy.com) podcast both are excellent. 3) Libraries You don't have to reinvent every wheel at the beginning. You'll find a lot of usable code at [Ruby Toolbox](http://ruby-toolbox.com) and [Agile Web Development](http://agilewebdevelopment.com). If you have the need for public hosting (say, for demos etc.), have a look at [Webbynode](http://webbynode.com). They offer pre-configured Rails Stacks; if you have your repository on GitHub, you just enter your repository URL and have your system up and running automagically in a couple minutes. Hosting Rails still isn't as simple as slapping an Apache with mod_php somewhere, so this can ease the pain. PM me if there is anything I might be able to help you with. Have fun!
If you like railscasts, I'd also check out [asciicasts](http://asciicasts.com/) which has text transcriptions of railscasts' videos.
Since when has the distance between noob programmer and Ruby web app developer been &gt; 0? 
even more simple.. call yourself a rock star, get yourself a "hip" hair cut that looks like you just got out of bed but really cost you about $100, refuse to show code examples of what you do believe in, and come up with a catch-phrase and flog it to death. off the top of my head i would recommend "anti-pattern." for eg. "i had to specify 'self' cuz Active Record is such an anti-pattern" or more advanced.. "i never use class methods cuz they remind me of the singleton anti-pattern" or even more advanced.. "what...? you aren't using git? that's such an anti-pattern" or you could just break down and be like the rest of us and spend years perfecting your skills. either or.. your call
This is a very good article and corrects a pretty fundamental mistake in [Yahuda's article](http://www.reddit.com/r/ruby/comments/a4pin/metaprogramming_in_ruby_its_all_about_the_self/).
Have you done any maintenance work on that project? If not, and if it's still in use, there is at least one other developer out there somewhere who hates you without ever having met you.
use ruby -I to modify $:, don't modify it directly.
As for your question; no, I haven't done any maintenance work on the project. As for the prediction; there's not much I can do about that. I'm not sure what to take away from you telling me that. That I shouldn't try to earn a few bucks on the side for the benefit of some potential superior developer who'll get annoyed? I find good code to be important but not to keep fellow programmers happy.
Anyone got any experience with radiant (another ruby based cms) and can give us a comparison?
I never really liked radiant. To me, it always was a content programming system, not a management one. What really seems interesting is [Seed](http://github.com/desaperados/seed), a rails based CMS. Couldn't get it to run with 1.9.1 though
How about giving us (or maybe it's just me) a quick comparison between the two (or all three if possible). Not sure what you mean about radiant being more content programming, too. I messed around with its demo page a while back and if memory serves me well, it was pretty much the same as refinery.
Ruby 1.9 has require_relative: require_relative 'config/environment.rb'
There is no such thing as meta programming.
I can't really give a good "comparison" since I didn't really use both of them in production, just played with them for a bit. I personally never got the "concept" behind radiant. Inheriting layouts, setting page types, snippets here, sidebar tabs there, yadda yadda yadda. Seed has a nice "in page" admin interface. --&gt; if you wanna change something, just log in as an administrator, click on the item in question and select edit. I'm sure radiant has its purposes, but for smaller projects, I'd prefer seed
hehe (explain)
We use Radiant for a couple of large, high-traffic sites and are very happy with it. Its plugin architecture in particular has been incredibly useful.
The previous article about the [fetch](http://avdi.org/devblog/2009/03/16/go-fetch/) method is interesting, too. I recommend people check it out.
The #initialize example is static and brittle. If you subclass, you can't extend like so: def initialize super # handle new option that depends on old options being processed. @uncaffeinated = options.delete(:caffeinated) { not_feeling_creative } end 
Since you've taken the trouble to post this to both Reddit and my blog, I'll copy my reply here: I subclass and add new options all the time. It's just a matter of pulling out the added options *before* calling super. If for some reason you *must* have the superclass initialized before processing the added options, pull the option out into a local before calling super and then process it after. Your subclasses shouldn't be permitting values to get to the superclass constructor which they don't expect it to be able to handle.
Activescaffold is very useful for a whole host of things including admin pages. You pretty much have to have mislav-will\_paginate. I always use restful\_authentication calender\_date\_select is very nice. Of course the usual database gems for sqlite or postgres. 
Ah yes those gems are very good. I like authlogic more than restful auth. I use will paginate all the time. Kinda forget about it because it performs such a "small" task.
Searchlogic, made by the same guy as authlogic, does pagination in a will_paginate compatible way and does a bunch of other cool stuff. You might check that out. 
will_paginate auth_logic delayed_job mocha rspec paperclip rack-bug faker populator haml factory_girl app_config 
To add a few extras to an excellent list: cucumber pickle hpricot ZenTest
My common ones: * Factorygirl * state_machine (you should not be using AASM) * prawn * validatable This is of course excluding the testing ones that are common -- cucumber, rspec, etc.
agree state_machine is much better
Why were you at -1? That's very weird for a helpful post.
There are a lot of bots which downmod all my posts. I am infamous around here.
All environments: * haml * mislav-will_paginate * rake thor highline * fastercsv * facets * imagescience/rmagick * prawn * capistrano * nokogiri Testing: * rspec * rspec-rails * spork * thoughtbot-factory_girl * faker * blueridge * webrat * heckle * rcov **See also [Ruby Toolbox](http://www.ruby-toolbox.com).**
In approximate order of can't (or at least wouldn't want to) live without-ness: * haml (because closing HTML tags is so 2007) * fastercsv (I deal with CSVs a lot) * mongrel (I developed using webrick before mongrel came along) * RedCloth * thoughtbot-shoulda * roodi (the mild endorphin rush from reducing the "error" count gets addictive) 
+1 for Authlogic, and Searchlogic - very easy to implement and use, and they both provide the flexibility one need in these kinds of gems. I've recently started using ThinkingSphinx for my search needs, which I can also recommend as an alternative to Searchlogic.
Too late... moved onto nokogiri when Hpricot's maintainer pulled it from the web.. 
Aww, no faith in the community? I think we did a good job picking up the pieces…
I have faith in the community... The community is amazing and the internet is an amazing place. I was using Hpricot in a production environment, needed to use the docs to look up something and they were gone. That was the motivation I needed to checkout nokogiri. I understand the urges to disappear, but he handled it in the worse way possible. Just my opinion. 
Can you elaborate on the AASM comment?
Did anyone ever find out what happened to _why? 
&gt;I understand the urges to disappear, but he handled it in the worse way possible. Trusay.
Here's a little list I just compiled for myself (sorry the formatting sucks) FasterCSV # CSV parsing will_paginate # pagination authlogic # authentication delayed_job # asynchronous execution of long background tasks paperclip # file attachments prawn # PDF generation ActiveScaffold # CRUD scaffolding rack-bug # debugging toolbar for Rack applications app_config # environment specific application configuration highline # console IO with error checking and validation haml # HTML/CSS template language RedCloth # Textile markup language in Ruby facets # collection of general purpose method extensions roodi # parses Ruby code and warns you about design issues pony # send mail from Ruby active_merchant # payment abstraction library for e-commerce state_machine # state machines workflow Vlad the Deployer # automated deployment Capistrano ImageScience # thumbnail generation RMagick # image manipulation faker # generate fake data: names, addresses, etc. populator # mass populate an Active Record database nokogiri # HTML/XML parser using XPath and CSS hpricot ThinkingSphinx # full-text search Ferret SearchLogic scrapi # data mining scrubyt mechanize # automated website interaction (fire)watir # " " browser " " rspec # behavioral testing rspec-rails # " " for Rails cucumber # behavioral testing based on "stories" mocha # mocking and stubbing webrat # acceptance testing shoulda # unit testing Blue Ridge # unit testing for JavaScript in your Rails app heckle # mutation testing rcov # view test coverage of your code factory_girl # fixture replacement for focused and readable tests spork # fork a clean state before each test run
Charles Nutter blogged about these stupid benchmarks. If you don't implement all of ruby the benchmarks run very fast. 
That might be true, but the company ( [except](http://www.exept.de/en/products/smalltalk-x/stx-overview) ) that manufactures smalltalk/x and apparently also experiments with this ruby thingy does a pretty good job. I was lucky enough to be able to listen to two semesters of lectures given by their [CEO](http://www.google.com/search?hl=en&amp;q="claus+gittinger"&amp;btnG=Search&amp;aq=f&amp;oq=) at my university. He's been creating high-performant VM's for decades. I hope they keep advancing this :) p.s. they already got java running on their vm. paper (sadly only german) available [here](http://www.netobjectdays.org/www_old_netobjectdays_org/pdf/99/stja/ClausGittinger.pdf) AND [Here](http://www.cincomsmalltalk.com/blog/blogView?showComments=true&amp;printTitle=Industry%20Misinterpretations%20162:_SmallRuby&amp;entry=3435729720) is an episoce of podcast that deals with smallruby
yeah, i was thinking about that post too. apparently, what happens is you can get a huge speedup in the early stages, but the more you handle the edge cases, the slower you get till you're approaching mri
Which of course makes you wonder why they are not eliminating those edge cases.
because in the absence of a spec, mri is the reference implementation.
Deja vu to Maglev. I remember Maglev showing off some impressive cherry picked benchmarks. I would like to see how well it ran against the entire benchmark suite. Also memory use would be another interesting metric to show in the graphs.
so the guy who made this is a total ruby newbie? if (self.salt == nil) self.salt = salt_generator(5) self.password = Digest::MD5.hexdigest(self.salt + self.password) else self.password = Digest::MD5.hexdigest(salt + self.password) end should be more like: @salt ||= salt_generator(5) @password = Digest::MD5.hexdigest(@salt + @password) but even this is crap since it encourages code repetition and overall many of these methods make no sense since there's no way of creating a new user with that code there are plenty of explicit returns when they are not needed, this one especially crap: redirect_to "/admin/login" return false lol wut? redirecting to an specific path after having redirected to the action in other parts of the code plus explicit return. but hey, really nice program flow diagram, you must be a professional
This should just be a link to AuthLogic or restful_authentication's help documentation instead. Either one is better than doing this. At least they included links at the bottom.
Nonsense. A superclass should be flexible. Since it can't anticipate the myriad of ways it can be used, it shouldn't try to mandate anything.
&gt; so the guy who made this is a total ruby newbie? I'm guessing. This is good too: &gt; Rails provides multiple methods of encryption like sha1 and MD5 internally as a part of the Rails framework. More like Ruby has built in encryption libraries. I really wish people would learn a language first before trying to work with frameworks on top of said language.
oh yeah I missed that one, he knows he has to require the digest library but somehow thinks it's part of rails :P also one could learn a language first before writing tutorials... appreciate the intent but this is very misleading to anyone who is starting out and follows the code style
A much better pun title would have been "Metaprogramming is a matter of self control." 
Curious! I guess timing is everything here. I submitted the plain link first, but this one with the FeedBurner gubbins added on the end gets more votes.. :-) Not that I'm going to complain!
Just played with it for a few minutes, some really basic stuff. But it is coming close to ruby 1.9.1 which I find pretty impressive for the "alpha" state of the software. A bit of a weird installer though... On some pretty basic unoptimized math stuff, it looked like this for me: 1.9.1: real 0m0.322s maglev: real 0m0.726s 1.9.1: real 0m0.710s maglev: real 0m0.971s 1.9.1: real 0m1.159s maglev: real 0m1.262s It has to be said that this wasn't methodical, serious benchmarking but rather just using what I had already lying around [shameless link to the post with more details](http://blog.marc-seeger.de/2009/11/21/impressed_by_maglev)
* rcov * heckle * mislav-will_paginate * hpricot!
your blog link shows that maglev actually spends less time on the cpu than 1.9 -- i guess that indicates some blocking on io (distributed persistent cache?)
there is no other (disc/network/...) IO in the scripts besides some console output. I guess it might have something to do with the inter process communication between gemstone and maglev (as you already noted). That would actually be an "ok" drawback for a distributed persistent cache :)
Sorry, I meant to come back to this but I forgot!! State\_machine is far more powerful than AASM, on top of having a much nicer DSL. Look at the state\_machine examples, you'll see what I mean -- you can be a lot more terse. I have also experienced many little AASM quirks, but state\_machine, for the most part, behaves as expected.
seems like a clone of Machinist
Thanks for pointing out. I have updated my article. But it wasn't there when I wrote the article :)
Although it's not a rails plugin/gem, in general I use [open_gem](http://github.com/adamsanderson/open_gem) a lot for peeking at rails internals, etc. Disclaimer: I wrote it, so feel free to ignore me ;) Otherwise we find will_paginate handy. I would recommend avoiding some plugins though: Ferret for instance is not well maintained these days, and we've seen it get out of synch with the database on larger datasets. Likewise although we use ActiveSalesForce, it seems a little shaky (not sure if it has been maintained much lately either).
Link broken for anyone else?
looks like a broke Rails app
it should be http://nex-3.com/posts/88-sass-supports-rack
It should work now.
Looks like somebody can't figure out what URLs are supposed to look like.
this was already posted a couple of days ago :)
No, only blueprint keyword matches. The whole idea is different.
Impressive and crazy at the same time. I wish them luck.
Looks like fun, but it smacks of a certain kind of fetishism to me: the desire to have the software you used be "pure" by implementing it (presumably perfectly) using just your language of choice. I certainly understand that impulse, but I don't know if it really advances the art much.
It looks like they are actually focusing on a wider scope, hoping to create a customizable meta-VCS that can be used with any VCS.
We're (I'm working on it with bobindashadows) also looking to implement new features. We would like to write these features for Mercurial's hg as well, but we find their code to be less than desirable to work with, to say the least, so it is easier for us to make new features at a faster pace with our code as opposed to theirs. That said, mad props to the Mercurial team to make something so awesome in the first place.
For those of you who want to try it out – please post bug reports! I can't stress how important this is. It's important that they're reproducible, but at this stage, we'll take anything you've got.
Let me see if I remember correctly. &gt; irb(main):001:0&gt; def a(b=def a; end) puts "aaa" end &gt; =&gt; nil &gt; irb(main):002:0&gt; a(2) &gt; aaa &gt; =&gt; nil &gt; irb(main):003:0&gt; a() &gt; aaa &gt; =&gt; nil &gt; irb(main):004:0&gt; a() &gt; =&gt; nil &gt; irb(main):005:0&gt; a(2) &gt; ArgumentError: wrong number of arguments (1 for 0) &gt; from (irb):6:in `a' &gt; from (irb):6 
Looks exciting. I recently started learning ruby and was wondering when someone would create a VCS in Ruby. &gt; Here's how amp rolls: hg clone http://bitbucket.org/carbonica/amp/ I wonder what their plans for making amp self hosting are? It would be really cool to do `amp clone URL` That would definitely give a lot of confidence in the project. 
Actually amp clone http://bitbucket.org/carbonica/amp/ *should* work. Cloning a remote repo should be fine, but it doesn't have a full test yet, so we haven't made that a recommendation just yet.
I really like the way you can customize it so easily. Big props to you guys. I am looking forward to seeing how this project matures. 
FYI, it fails to build on 1.9: http://gist.github.com/241621
All I can say is that if you actually do that, you deserve all the confusion that results. That, and NEVER check it into my repo.
Yeah, we have to port Guy Decoux's BZ2 library to support 1.9. It was written... a long, long time ago. Use `gem install amp-pure --no-wrappers` for a pure-ruby version, which won't have any 1.9 issues.
defined?
Yargh. It technically is self hosting (we use commit, push, pull, update, etc. for managing our own code). We tell people to use 'hg clone' because as of release time, 100% of the world didn't have access to 'amp clone'. EDIT: I forgot a period.
`defined?` is [a little funky at times.](http://www.coffeepowered.net/2009/03/02/syntactic-sugar-will-occassionally-kick-your-puppies/)
Thats great. Thanks :)
Ambitious? Perhaps. Awesome? Definitely. Although, honestly, I probably wouldn't touch it until Git support works.
There's some weirdness with the way operators are defined that don't allow Ruby to have i++ type of syntax. irb(main):001:0&gt; 2+++++++3 =&gt; 5
It's all locked up and hidden there in a patch for Ruby Gems :(
dang how'd i miss your comment?
Just running [random stuff](http://blog.marc-seeger.de/2009/11/21/impressed_by_maglev) though maglev, I think they are kinda impressive and not thaaaaat far off from 1.9.1 :) (not a good benchmark methology on my side though)
The determination of whether a symbol is a method or a variable is a bit tricky: whatever /25#/; raise 'this dies!' This is either whatever(/25#/); raise 'this dies' or whatever / 25 # remainder of line is a comment Which it is depends on the current scope. I wrote [a bit more about](http://po-ru.com/diary/ruby-parsing-ambiguities/) it a while back if you're interested.
It's not a CPIO implementation.
Syntax isn't the biggest issue, though the Ruby grammar is hideously ugly (unfortunately a good deal of that complexity is what makes Ruby so pleasant to write code in). I wrote a blog post [about some of the problems with compiling Ruby](http://www.hokstad.com/the-problem-with-compiling-ruby.html) a while ago. That's where most of the difficulty in making Ruby really fast (most of them can be overcome, but it's far more work than for some other languages) Syntax wise, though, not much of it causes performance issues - it's just that you need to handle a *ton* of obnoxious corner cases. A lot of it is tied to correct placement of whitespace, the optional use of parantheses around method arguments, and determining what is a hash vs. a block.
There was a huge thread about this topic recently on the Ruby Talk mailing list. From what I understood, to support n++, Ruby would have to implement Fixnum as a mutable object and there are performance implications doing that.
There's a great keynote by Dave Thomas from the Lonestar Ruby Conference 2009 that talks about all about funky Ruby syntax. i.e. a/b/c is not a/b /c http://lsrc2009.confreaks.com/something-interesting-dave-thomas-28-aug-2009.html 
How is that a dark corner? It does exactly what it looks like its doing. I wouldn't want to get rid of default parameters being full ruby expressions, and I wouldn't want to lose the ability to redefine functions. Just because its possible to combine features in a bad way doesn't mean they shouldn't exist. If someone were to use that code in production, the problem lies with the programmer not the language. Even with the most basic features, a language can be misused.
 Foo::Bar and Foo:: Bar both work... go figure
At first it seemed like I would miss n++, but after a year of using Ruby I have only used n = n + 1 sparingly thanks to Array.each Array.each_with_index for each in Array do etc. *formatting
It's not a full CPIO implementation, but it's enough to let you pull data out of CPIO files with ASCII headers.
don't forget the terser "n += 1" which gets you within 1 character of "n++"
i read your article...wow, "evil" is right...i shudder to think of when this might burn me in the future...
thanks for the response and link to the blog post, i don't understand why you've been downvoted so much...do you think there are any aspects of ruby syntax that could be dropped without hurting its expressiveness in any real way?
That's completely unholy, and yet, at the same point, several flavors of awesome.
Goto finally comes to Ruby. w00t!
This is offensive to me. Blasphemy!
Sorry! I'll never do this again, I swear!
Though this is certainly ugly, it's codified in the Ruby grammar for good reason - if you don't make this decision explicit, you end up with an [unparsable grammar](http://www.perlmonks.org/?displaytype=print;node_id=663393), like Perl 5's (link goes to formal proof that Perl cannot be parsed). I'd rather have a syntax with some hairy corner cases, as the alternative - not being able to parse code without running it - is far worse.
Ironically, since Fixnums are the only immutable numeric type in MRI, you _could_ hack in pre/postfix ++ support for Bignums or even Floats (shudder). From what I've gathered in my work on MacRuby, the parser transforms n += 1 to n = n + 1: this is reasonable for Fixnums, but prevents optimizing in-place addition with Bignums (I tried to do this for MacRuby, and failed miserably).
There are a couple of minor bits. Multiple heredocs in the same expression is horrendously ugly to me, and it makes the parser really ugly (it's not *hard*, just causes warts), but very few people use it. But Ruby's grammar is mostly ugly because it makes the *syntax beautiful*, and that is largely worth the pain for the small group of people (like me) who write Ruby parsers. For example, I quite like having the freedom not to use parantheses around arguments to a method call, but the moment you make them optional, combined with the hash and block syntax, you get inconsistencies. For example: foo 1 foo { something } foo({ something }) Since the first one is legal, one might assume the second and third are equivalent, but of course they are not. If "something" is a block, then the third one is illegal. If "something" is a hash, then the second one is illegal. And you can't generally determine which one it will be until you either come across a block argument or something that is not legal in a Hash key, or "=&gt;". It's not in itself a major thing, but it's one of many things that each slightly complicates the parser and it adds up quickly. 
No, actually, it's a parser change. Matz and others have opposed it historically because they didn't want people to think numbers were mutable. Personally I don't see how "n++" suggests numbers are mutable while "n +=1" does not.
I had a double take when I saw the following line in the video: ./environment.rb: # config.gem "hpricot", :version =&gt; '0.6', :source =&gt; "http://code.whytheluckystiff.net" Heh. Maybe someone should patch that out.
My eyes! I will never be able to unwatch that!
Does this mean we can finally run cake and codeigniter from rails? 
[ahem](http://raa.ruby-lang.org/list.rhtml?name=ruby-goto).
My god, man, you actually used PHP in the way it was designed... How could you?!?
This is all good and well, I'm fine with people doing legal but disgusting things behind closed doors, but will we start finding "Ruby on Rails" apps with PHP plastered all over? PLEASE, THINK OF THE CHILDREN!!
Why isn't there a rails forum app/plugin/gem? I heard 'Beast Forum' a few times, googled, it seems dead... don't go to the [top hit](http://www.google.com/search?hl=en&amp;safe=off&amp;client=safari&amp;rls=en&amp;q=beast+forum&amp;aq=f&amp;oq=&amp;aqi=g-p1g-sx9) either :S
I'm pretty sure this gem is a clear indication that some really intelligent, motivated, and skilled individuals have too much time on their hands.
Savage Beast is another possibility, but Vanilla seems to be a better product overall.
That's a dark corner because it has no light :p No one expects a default parameter to be "assigned" a function. Even more, "def a; end" turns out to return a nil. Of course the problem lies with the programmer not the language, that happens to be true for every dark corner. If not it would be just a curiosity.
wrong. it is a clear indication that some people need more therapy than others.
you've GOT to be joking...
everything in ruby is an expression, including function definitions :D 
Same here. It wasn't that long ago that he was still here. Suddenly I feel the need to pour a 40oz on the floor.
Out of topic but I love that Ruby evaluates to an expression everything... I just wish they returned something useful... like a Method object. Or "true" if it's an overwritten method or something, useful.
&gt; WebROaR aims to make the deployment of Ruby on Rails™ applications more easier even MORE easier?
hoping they are not using WebROaR for their website, cause it's down to me..
What's up with everyone getting into the 'rails deployment' game? I've been using rails for over four years now. I never thought deployment was a big deal but it seems there are a lot of people out there who do I guess. *shrug*
Especially now with Passenger
Did you read it? It goes beyond deployment, it's a server. Check out [these benchmarks](http://webroar.in/blog/2009/11/25/comparison-of-rails-deployment-stacks-2). It's impressive enough to at least take a serious look at it.
I'm guessing it was written by a non-native English speaker, given the domain name.
You know what would be nicer? Something that is more like servelets where objects are loaded once into memory and stay there instead of being re-loaded every time. 
cool :)
I'd have prefered nginx + passenger vs webroar... At the moment, the statistic interface seems nice. I wonder how much more difficult it would make deployment and how performance would change if I switched from nginx+passenger to nginx (because I also need PHP) + webroar
What's new in this release? I'll be checking it out myself later, but it'd be good to have a few bullet points to go away with, and there isn't anything clear on the site.
There doesn't seem to be any release notes yet but you can [view recent commit history here](http://github.com/evanphx/rubinius/commits/release-1.0.0-rc1).
That's...what a prefork server does.
The framework still loads all the classes from fresh on every request.
Would it have killed them to write a paragraph about it on the front page?
Only in development mode. In production mode (or more accurately, when `config.cache_classes = true` is passed to your initialization block), they're loaded once for the lifetime of the instance. A preforking Rails deploy loads the framework and your application classes onces, then forks off workers to handle requests.
Has anyone seen a "Rails for a Django developer" out there?
Just read that blog post from bottom to top...
:: is an operator. So treat it like plus: 5 + 6 and 5 + 6 are the same.
One is increment in place, the other is ' add this and reassign' or ' n = (n+1)' They're semantically different. You can't write ++ in expanded notation. i.e. there's no method you can send to a fixnum that will cause it to increment itself in place. This is good, because then you'd have to deal with the same BS as you do when using string mutator methods.
Currently broken under rvm, it would seem.
Actually, ++n is increment in place. n++ is hard because (for example in C++), you must 1) create a temporary copy of your variable, 2) increment the actual object, 3) return temporary copy. ++n == n+=1 n++ doesn't have an equivalent AFAIK
I've been known to do things like this: shell_exec('ruby do_something_php_cant_do.rb ' . escapeshellcmd('some args'));
How well does it handle associated objects in Rails? FactoryGirl is painful as soon as you introduce a `has_one` association.
yay, someone submitted my paper to reddit. In all honesty: I'd like to have done a little more research, but this paper was part of a class at my university and I just couldn't invest as much time as I wanted to. So if you read this: also look at [mongodb](http://www.mongodb.org)
Only a few so far, it seems.
and those seem to be out of sync (slides &lt;-&gt; video ++ audio)... at least the *-large.mp4 ones (in vlc and totem for me) :(
I'm watching the keynote via Flash and the slides are moving way ahead of the video/audio.
the "rediscovering coding as a hobby" video (large-mp4) works fine... at least towards the end
I've sent Coby an IM notifying him about the sync issues.
Waiting for the epic "g" gem lightning talk to be online. A++++ would standing ovation again.
But did this blogger file an issue with ruby-core? **Of course not...** This is what drives me the most nuts writing open source software.
We "Confreaks" are working on the sync issues and will be posting corrected videos as soon as possible.
What's so unreadable about using the 2nd parameter of the [] method for the capture group you want? I use it all the time when I just want to capture one thing and can specify how the data looks around it.
I'm going to argue that the Ruby library is doing the right thing here. The URL -is- invalid according to the RFC. Per section 2.2 of [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt) &gt; The character "%" is unsafe because it is used for encodings of other characters. All unsafe characters must always be encoded within a URL. The reason, of course, is that while "thing%ding" could be extrapolated out to literally mean "thing%ding", something like "thing%dang" would be interpreted as "thing\332ng". Again, per the RFC: &gt; Octets may be encoded by a character triplet consisting of the character "%" followed by the two hexadecimal digits (from "0123456789ABCDEF") which forming the hexadecimal value of the octet. (The characters "abcdef" may also be used in hexadecimal encodings.) So, in the first example, any sane URL parser will attempt to parse "%di" as a hexadecimal value, but will fail as "i" is not a valid hex digit. "%da" will be parsed as a valid octet. That ambiguity is the reason that it is so critical that the RFC be followed when constructing URLs. In the cases of the Amazon URLs, it is up to you as the consumer to pre-process the URL before passing it to an RFC-compliant URI parser. Per the [Java docs](http://java.sun.com/j2se/1.4.2/docs/api/java/net/URLDecoder.html): &gt; There are two possible ways in which this decoder could deal with illegal strings. It could either leave illegal characters alone or it could throw an IllegalArgumentException. Which approach the decoder takes is left to the implementation. Obviously, that particular implementation took the prior route. It's not "right" - the character is still illegal - it's just "nice", and potentially dangerous. You're going to end up with mangled data down the line.
"+" is actually a method call to that number. the same as 5.+(6) i've been looking through parse.y and it seems that "::" is referenced as tCOLON2, but as far as i can tell it's not actually a method.
You are correct sir, but I was just pointing out that you wouldn't expect space to matter in other infix expressions.
Does it work on the Google App Engine cloud?
What happened to XRuby?
No.
I'm confused. I always thought that Ruby was just "Whatever MRI does," and the only real standardization effort was RubySpec, which was more about defining exactly "Whatever MRI does." Where's this coming from?
Here are some [comments from Matz](http://www.ruby-forum.com/topic/169195) on this subject, from the initial announcement on ruby-core.
Yeah, I think 'unreadable' isn't quite the right word: it's probably more that it's 'unfamiliar'. I know I haven't seen this used much.
Cool, thanks. Pretty interesting.
So this looks mostly like a way for Ruby to get more government work. Which is cool.
MacRuby looks cool. Might make me start developing desktop applications.
I'd take anything from NaCl with a grain of salt.
"Other terms are defined where they appear in bold slant face..." I can't believe that kind of racism got into a professional specification.
ensuring return value requires an explict ensure: def foo 'foo' ensure 'hello' end foo #=&gt; 'foo' def foo 'foo' ensure return 'hello' end foo #=&gt; 'hello'
This is fantastic.... I'm working on a Ruby compiler, and while I've been taking the "quick and dirty" approach so far (the goal has been more to illustrate concepts and get things to a semi-workable state quickly than to be thorough) one of the biggest challenges in implementing Ruby has been/is the lack of a proper spec, including a proper grammar. RubySpec is great, but it's complementary to a written, descriptive spec that can contain explanations. I have bedtime reading for a while :) 
This is great! Thanks!
Some things are...like JRuby having ObjectSpace disabled by default.
regardless, it'll help a LOT of us out.
Too many frameworks.
I agree. And they all copy X while introducing a new abstraction layer to Y.
+1 for saying "I agree." and not just "Agreed."
And yet not enough. There are too many similar frameworks all using the same libraries. 
I wouldn't say not enough frameworks, I'd say not enough "revolutionary" frameworks.
we need different kinds of frameworks. Not fifteen of the same kind of framework.
Since you mostly use standart active record methods for associations (blueprint method is actually only a wrapper for Class.new.save!), so it can handle anything that active record can
Why do I have a feeling that the professional code you write would be too "clever" for most developers to understand?
I enjoy rails personally and use that as my only ruby framework. For all else web I just use PHP.
very very good document / comparison.
Thanks, I took the liberty of [quoting you](http://github.com/raganwald/homoiconic/blob/master/README.markdown#readme). Let me know if you'd rather I didn't. ...*elided in favour of*... Also, your comment reminds me of this maxim: &gt; Those who can do, do. Those who cannot do, teach. Those who can neither do nor teach, consult. Upmod granted.
check out Pow (http://github.com/probablycorey/pow) for a photo gallery app I wrote a class that lists images in a directory and returns a javascript object containing their path, filetype, name and dimensions http://gist.github.com/249877 there should be enough there for you to determine how to write your program
If you don't mind actually reading the file contents (depends on the size of your directory obviously), then instead of using UUIDs you could hash the file with SHA1 or similar and name the file after its hash. The benefit of this is that it becomes immediately clear when files are duplicates since their filenames will collide.
 Dir.chdir(ARGV[0]) Dir.glob('*.{png,jpg,jpeg,bmp,gif}', File::FNM_CASEFOLD).each do |item| next if File.directory?(item) ... end
this is definitely where i would start. also, you can use File.extname(filename) to find out the extention on a file, and File.rename(oldname, newname) to rename files. on another note, i don't think i have ever seen anyone use 'next' in ruby for any reason... and then here it is twice on one page. wonders never cease.
&gt; 'next' Why not? This is a standard practice of getting rid of too many nested if's.
&gt; you can use File.extname(filename) You don't need to -- extension matching is already handled by glob.
we are renaming this file, and he wants to maintain the extention. finding out the extention is required.
Ah, sure.
i didn't say not to, i just said i'd never seen it. personally, i think an if block is easier to read than that sort of control logic, but that is just preference. 
[Well...](http://www.google.com/codesearch?hl=en&amp;lr=&amp;q=next%5Cs%28if%7Cunless%29+lang%3Aruby&amp;sbtn=Search) :) Edit: And yes, there are two kinds of programmers: the ones who return early, and ...
Check out the pathname class. It will make your job trivial. http://ruby-doc.org/stdlib/libdoc/pathname/rdoc/index.html 
so just to sum up the conversation dchestnykh and i had, i think this will do what you're looking for: require 'uuid' Dir.chdir(ARGV[0]) Dir.glob('*.{png,jpg,jpeg,bmp,gif}', File::FNM_CASEFOLD).each do |item| next if File.directory?(item) File.rename(item, UUID.generate+File.extname(item)) end 
ahhhh so many nexts.. so many. so ok. it's in use. i learned something today. and if it's in here, then i suppose it is fine by me. http://www.google.com/codesearch/p?hl=en#xlIhUNSWIrE/tags/REL_0_9_4_6/setup.rb&amp;q=next\s%28if|unless%29%20lang:ruby&amp;sa=N&amp;cd=7&amp;ct=rc
when are you guys going to upload the rest of the vids? :) 
&gt; Unfortunately often the name is generic, like 01.jpg. How is a UUID any less generic? It has no more meaning than 01.jpg. The only time a filename like 01.jpg would be an issue is in case of duplicates, in which case you could just rename those that clash as you go. Unless, of course, you're throwing in hundreds of new porn images at a time... *g*
Was in the same boat about 2 years ago. Ideally you'd have a few months, some comp. sci background, etc. but without either you can make it up with boatloads of energy, dedication and practice. 1) Learn Ruby. No way around it. If you can solve random problems on http://projecteuler.net/ in Ruby, you're good. 2) Learn Rails. Try the 15-minute blog, improve on it. MVC, thin-controller/fat-model, no-code-in-views are important concepts to understand. 3) Make the damn app! It's not going to be perfect, but you won't get there unless you try. As long as you're using source control, don't be afraid to try new things and experiment. Make railscasts.com your friend. As long as you stay focused and dedicated, you can definitely get an app out in a month.
What does FNM_CASEFOLD do?
If that 'next' offends, you could do a select or a delete_if across the array, but that method is less efficient - next is the way to go in this case. I would actually be tempted to make it recurse into directories, instead of nexting them out of the way. It depends on how deeply you nest directories, I suppose.
I did work with the RC from sourceforge, and found the same problems that the article indicated - I had to go chasing the DLLs all over the place before getting a working installation. And yes, I did install the patch level 243. 
Disables case sensitivity (to catch not only .jpg, but .JPG, etc)
Are you sure it was the one from [Rubyforge](http://rubyforge.org/frs/?group_id=167). There are a few other places you can download versions for windows. The DLLs mentioned in the article are present in Ruby19/bin, except for the readline.dll which has been replaced with a pure Ruby library. The article you posted has been [updated](http://blog.orangecabin.com/2009/05/install-ruby-1-9-on-windows-using-zip-binary/). Check it out - it also recommends the Rubyforge release candidate.
I did this last week, and finally updated all the DLLs today. I am working on linux and Vista, and the one with the problems is the 64bit Vista machine. I do consider that the work on these installers is great, especially since the 1.8.xx is so old, but the extra effort to get this running was getting me miffed. 
I am running windows XP on a crappy old laptop so I would not have encountered the challenge of installing on a 64 bit machine. The Rubyforge version is compiled with 32bit MinGW. There have been problems running MinGW on Vista, 32bit as well as 64bit. Was it a case of ensuring that Ruby only found 32bit DLLs in its path? 
Seems pretty arcane. Why not just call it IGNORE_CASE ?
Yes, I downloaded the DLLs again (using the instruction in the article) and proceeded to install gems and rails. I am doing some more testing, but the "x file missing" are gone.
POSIX Standard for [fnmatch](http://www.opengroup.org/onlinepubs/9699919799/functions/fnmatch.html). Though I cannot find FNM_CASEFOLD specifically in POSIX, maybe it's an addition to it. It's implemented on [BSD](http://www.rootr.net/man/man/fnmatch/3) and [Linux](http://linux.die.net/man/3/fnmatch). (Ruby's [File module](http://ruby-doc.org/core/classes/File.html#M002519) is an interface on top of POSIX functions).
Did the problem occur when compiling gems from source? The new dev-kit fixes a problem with paths. Before that I used to have to copy header files into the gem source and libraries (.dll and .so) into the i386-mswin32 folder.
i was also thinking about recursing into directories. aside from that, personally, i would be most inclined to nest the active logic in an if. at least then there is a visual representation of the control structure. if it were my code (and i wasn't going to recurse through directories, which i absolutely would), it would look like this: require 'uuid' Dir.chdir(ARGV[0]) Dir.glob('*.{png,jpg,jpeg,bmp,gif}', File::FNM_CASEFOLD).each do |item| File.rename(item, UUID.generate+File.extname(item)) unless File.directory?(item) end or, if i were going to recurse through directories (which i absolutely would) require 'uuid' def rename_contents(item) if File.directory?(item) rename_contents_under(item) else File.rename(item, UUID.generate+File.extname(item)) end end def rename_contents_under(file) Dir.glob('*.{png,jpg,jpeg,bmp,gif}', File::FNM_CASEFOLD).each do |item| rename_contents(item) end end rename_contents(ARGV[0])
that eigenclass post is from 2007
confreaks was having problems with some of their videos. Hopefully they will get them all online soon.
For anyone usin' Arch Linux, here's a PKGBUILD for it: http://gist.github.com/250699
Finally.
[Changelog](http://svn.ruby-lang.org/repos/ruby/branches/ruby_1_9_1/ChangeLog)
Isn't there a huge downside to getting a language under ISO standardization? I would think that it would mean that the language is no longer controlled by the community making it much more difficult to evolve. It seems like none of the other open source languages that play in the same space (like Perl and Python) are moving in this direction so does that mean they can't use those languages in Japanese government projects right now ? 
&gt;so does that mean they can't use those languages in Japanese government projects right now ? I would think the desire for ISO certification has something to do with being "enterprisey" and "approved". I agree with you that it's not needed and may even prove harmful. 
At the moment they're mainly looking to define a standard that enshrines a reasonable subset of shared behavior of Ruby 1.8.6, 1.8.7, 1.9.x, JRuby, Rubinius etc.. I don't see how that would prevent the language from evolving as long as the spec is clear about not defining the full language but just a "standard core". Personally I don't really care if it becomes a standard. But on the other hand I'm really happy they are trying to define a spec - I'm working on a Ruby compiler, and the lack of a formal spec is a real pain. 
I haven't dealt with compiling just yet - but I have found that [this site](http://isitruby19.com/) aggregates gems and their compliance with 1.9 - it is a beginning. So far I am stuck in gem install xxxxx --no-ir --no-rdoc
It'll just get bogged down like HTML, C++ etc. I don't believe there are any enterprises saying we can't use it because there is no agreed international specification. Is RubySpec not sufficient for your needs?
&gt; a language that has been flagging in popularity lately. It has been? I thought it was the fastest-growing "major" language. Where are people going who leave Ruby?
I'd imagine that it's just not growing at the astronomical rate it was growing at a few years ago.
Thanks for using the awesome UUID library and not that crappy uuidtools library!
&gt; In addition, one of reasons why we need open standard for Ruby is that the basic guideline for the government procurement in Japan require it. In that policy, we should refer to open standards instead of specific products for fair competition. --[Shugo Maeda](http://www.rubyinside.com/ruby-iso-spec-draft-2900.html)
He may be referring less to population growth than a general sense of "popularity", as in positive-negative noise about the language. It was a glossy, new and unknown language a few years ago, and now everyone knows what its warts are. Which is nothing to fear, it means we're heading out of the trough of disillusionment (peaked about a year ago with Ruby monkeypatching, Zed Shaw noise) towards the Plateau of Productivity (all these implementations coming up to 1.0 releases). 
&gt; It'll just get bogged down like HTML, C++ etc. Nothing in those standards prevent people from implementing extensions beyond the standard if they so choose. What's "bogging down" those standards is that they've matured to the point where people expect and demand interoperability. In C++ in particular, a lot of people even pretend large chunks of what *is* in the standard doesn't exist, because making use of things like RTTI isn't interoperable "enough" for a lot of people. If there's anything C++ should teach us, it is the harm of the standard arriving too late after there were multiple implementations. &gt; Is RubySpec not sufficient for your needs? Not even remotely. RubySpec isn't useful until you've already implemented a very substantial chunk of the language, for example. RubySpec is fantastic, but it doesn't remove the need to plug the holes. 
I'm in it \o/
Hilarious. Thanks for the link!
this is great, and definitely my kinda project... but when you use the word "minimal" in a sentence and substitute your username, i have a nearly uncontrollable urge to puke on my shoes.
This sounds like a great way to get into testing. Just start asserting stuff and if it's helpful, go back to the usual way. 
Your feedback is harsh, but constructive and funny. I appreciate it, thank you. I updated the README accordingly.
How does it deal with exceptions?
Currently it just lets exceptions through, the reasonning being that nanotest suites wouldn't become big enough to justify dealing with them. But you're the second person to mention it, so maybe I underestimated the feature's importance. I'll play with that; meanwhile, patches are welcome ;)
I disagree. I like it as-is. Exceptions are automatically dealt with by ruby itself just fine. This is beautifully small.
i'm wondering if writing gems with c extensions might just be shooting our collective selves in the foot with the different platforms that ruby is moving to..
Are there platforms that don't run C? And if so, should I be interested in them? And will they have CSV files?!
As a redditor, a rubyist and a knitter, this article is relevant to my interests.
Also, Raverly shows that Ruby does scale.
yes.. JRuby for one.. Iron Ruby also comes to mind. I think JRuby is worth a serious consideration if you already work with java, need java integration, or take advantage of rails in thread safe mode.
Is it faster than fastercsv?
Ruby 1.9's CSV library is FasterCSV. It replaced the old one from the standard library. So, yes.
fastercsv was never faster. MUCH faster is to use Ara T Howard's hack: split. Then if/when the column lines don't match what they should, pass the offending line to CSV. This approach _screams_ in comparison.
absolutely correct, and reasons why there are essentially 2 versions of nokogiri: the FFI version and the _real_ version. The FFI version sucks and is only used for jruby. Besides, does anyone really _need_ java integration? :P
At my previous job I did. Java has significantly better libs for handling MS Excel files than Ruby does (e.g. Apache POI). Using JRuby made life simpler when using these libs.
Good point. However the standard CSV library should take care of those situations.
I agree. This should be frowned upon. It makes it much harder to get your library to run on jruby, windows etc. 
I think it also shows that the Ruby on Rails framework gives niche communities (har, har) access to rich, social, and domain specific web applications like never before.
Sorry, where's that phrack command from? Is that a rubygem? Where can you get it?
That's really neat! How many lines in total for the application?
Wait, you mean scalability is a function of architecture and not language? Sshhhh, don't tell the Java/Scala people. They need to sell books.
Pretty decent Ruby/Rails IDE. I find myself using it more than TextMate on the mac. 
Same here. Add in the Dark Pastel theme and it's remarkably similar.
I've found the Ruby language to be wonderful, and getting into Rails is quite interesting, but it's amazing to see what just one guys has built with such minimal effort.
Good article. Thanks.
This is nifty. If I have some free time over the holidays, I'm going to try something similar for Linux+[Tracker](http://live.gnome.org/Tracker/)+GStreamer.
No I think an empty array makes more sense. "string".split.size == 1 "".split.size ==0 That makes sense to me. I would not like it if they both returned 1 
Way to showcase it using Edward Sharpe!
Empty array is also array of strings! 
This is almost always desirable behavior. For example, if you want to parse a comma-separated list, using `'foo, bar, baz'.split(', ')` gives ['foo', 'bar', 'baz']. In this case, an empty input string should result in an empty array, and indeed this is the case: `''.split(', ')` gives [].
It's totally ok for me.
it is available in the phuby gem. ETA: and if you use it, you're a _very_ bad person.
It's Perl-compatible therefore obviously correct ;-)
No.
The Ruby behavior is exactly right according to my PoLS.
it makes sense to me because probably you will have some sort of enumerable method after the split (map, each, partition, etc..) which will do nothing for an empty list. if you had it return an empty string, then you would have to write more code to specifically check for that situation. 
I ran into a variant of this yesterday. I was wanting to have a boolean that toggles between new states. When the app is loaded it should be set to true, all other calls should just toggle it. This was my initial pass: @use_new_rrvc ||= !@use_new_rrvc The thinking being that since @use_new_rrvc hasn't been initialized yet it will evaluate to nil. The not operater would then toggle it to true and assign it to @use_new_rrvc. Obviously this didn't work, because the LHS @use_new_rrvc initializes it. Too bad. Would have been cool if it had worked.
I was calling split with a regexp on an array of strings and expected at least one string in the result, even though the regexp didn't match the majority of the collection. Your example makes sense, though. Thanks for your help. 
I said this already in another reply, but I was confused by the case of the argument to split not being in the string. The behavior I was expecting was that if the argument didn't match, I'd get an array with the original string. Essentially I expected these to return equivalent things: &gt;&gt; "xxx".split /[aeiou]/ =&gt; ["xxx"] &gt;&gt; "".split /[aeiou]/ =&gt; []
Some examples are trivial on purpose. This post was inspired by every line of Ruby code of the form foo.map(&amp;:bar).map(&amp;:baz)
I don't see why the scope of the validators is an issue here. The author is thinking too OOPish. Think of those validators at the class level as commands to to add those validation hooks.
The scope of the validations is an issue because it adds complexity and introduces an unnecessary DSL. I think perhaps it's easier to see when you're not thinking about ActiveRecord which you're probably used to. Consider these (pseudo-codeish): Using a class-level command to determine how things will happen at the instance level (like AR): class Dog class &lt;&lt; self cattr_accessor :thing_that_need_to_happen_later def bark(options={}) @things_that_need_to_happen_later &lt;&lt; [ :make_a_noise, options[:if] ] end end def go self.class.things_that_need_to_happen_later.each do |thing, condition| send(thing) if send(condition) end end def make_a_noise ... end end class SnappyDog &lt; Dog bark :if =&gt; :cat_is_near? def cat_is_near? !!@cat_is_near end end Versus using an instance-level command. class Dog def bark make_a_noise end def go;end; def make_a_noise ... end end class SnappyDog &lt; Dog def go bark if cat_is_near? end def cat_is_near? !!@cat_is_near end end The implementation of the class-level command is needlessly complex (cataloging things to be called later then calling them dynamically) and adds an extra DSL (bark :if =&gt; :cat_is_near?) around something simpler (bark if cat_is_near?). Not to mention in this case my DSL limits me to the scope of options I have provided, in the same way that AR's validation methods limit you to the scope of options provided (albeit a larger, less-limiting set). So as written above I can't do: class SnappyDog &lt; Dog bark :unless =&gt; :got_a_treat? end but I can do: class SnappyDog &lt; Dog def go bark unless got_a_treat? end end 
Well, that's fantastic Mr. Author. Submit your patches to change it all to instance-level validation.
Why? I don't use ActiveRecord.
why is delegating @post#:name, :to =&gt; :user any better than @post.user.name? 
Because validations are moving from ActiveRecord and into ActiveModel in Rails 3. This will allow any particular ORM to benefit from a common, shared codebase.
I agree that having instance level validations in Rails 3 would be a good thing. That said, I don't use Rails or ActiveRecord. I took it as an example of a superfluous DSL and if some Rails contributor likes the idea, the implementation is trivial.
&gt; Submit your patches to change it all to instance-level validation. If you expect people that don't use your software to spot bugs or design issues *and* fix them, you are expecting too much. Reporting a bug or a design issue is already a lot of help.
The point trying to be made is that is that it not necessarily obvious that the user's name is meant to be the author. So, by delegating Post's author method to the user, one can more readily write English code by (such as in the view) display the other with: @post.author.user_name Delegate are one way to do this, but I prefer to use ActiveRecord's means to override values. I have situations where it is non-obvious to which class a relationship belongs because there are multiple relationships between classes. For instance, I once modeled people, who have people for parents and people as children. My prefer way handle an author is to specifically declare the relationship: belongs_to :author, :class_name=&gt;"User", :foreign_key=&gt;"author_user_id" Thus, @post.author.user_name still works. Then one can use the same class for multiple purposes: belongs_to :author, :class_name=&gt;"User", :foreign_key=&gt;"author_user_id" belongs_to :moderator, :class_name=&gt;"User", :foreign_key=&gt;"moderator_user_id" Delegates can be neat, but they're a little less interesting in Ruby. Delegates are important in other languages where the class definition is fixed at compile time. The only way to dynamically link is a delegate. Since in Ruby a class can be modified on the fly, it really about simplicity over utility: Changing: def author # let's use try to bypass nil-check user.try(:name) end To: delegate :author, :to =&gt; user, :allow_nil =&gt; true 
the ol' in and out eh...
Coming from someone who does use the software, I'd have to say the article is opinion.
I had heard the performance was better, but damn! That's a hell of an improvement in performance and memory usage.
Key-value databases IMO are a fad like object-relational databases were a decade ago. Databases are for much more than persistence of objects. Not much sense in stuffing data in a database if the only thing you're gonna do is leave it there. ORM's are great, and so are object store databases, but they certainly aren't the be-all-end-all... 
but that makes the likeness to rails stronger, no? I mean, KV stores are way simpler than relational databases but they are good enough for many uses, just like rails is a very simple framework that fits certain types of websites (CRUD)
Mongo is far from just a key value store. More like an object database. Stores native data types for most languages like strings, numbers, arrays (collections), hashes, dates, etc, etc. Really give it a look before you discount it.
No I'm not discounting it at all - I think sometimes though developers want what's easier for them rather than what's better for the company; it depends on the application whether it's a good fit or not. The question to ask really is why are you persisting your objects. Is there anything you'll want to do that's more set related? Will you need to write a ruby script every time you want data out of your db? It's design questions that need to be asked is all. I work with too many bleeding edge developers who want to implement the next interesting thing. It's healthy to take a step back and be a skeptic. 
Rails is a simple framework? That's news to me.
isn't it? you can copy actionpack with rack in a couple hours activerecord is more complex but datamapper is a better generic ORM and there are lots of more specific ones (mongomapper, for instance) activesupport is meaty but lots of it are hacks that have been recycled time and time again in ruby. facets has many similar features and you don't even need all of them as I said, rails is good for CRUD but it's definitely not a complex framework.
&gt; Will you need to write a ruby script every time you want data out of your db? MongoDB has an interactive shell for queries.
KVSes aren't be-all-end-all solution true. But few are saying that. The point is that Relational SQL stores aren't either. Still for the last 10 years everyone has just crammed every single type of data into relational databases with no thought on what would be the best solution. They knew exactly one type of database product and were to lazy to consider alternatives. They didn't even bother to learn about other relational databases than the first one they learned. And tell me how that fits in to your thougts on what is good for the company. But majority of websites are not even displaying relational data. They are displaying document data. And then programmers used to spend a lot of time trying to figure out how to make the data more and more relational. And then of course hit the scaling problems that come with that territory along with all the added complexity they worked hard on creating. Making a blog run on a relational database for example is just silly in my opinion. 
It also has drivers for pretty much all the major languages out there (java, ruby, python, php, etc, etc)
So, basically, this guy contributed a lot of code and documentation to Ruby, then had a sudden mental break-down and vanished? OK, save the code and docs, but why do we care about his comics and such?
I take it you're new around here.
Because they were awesome. He was a brilliant Renaissance dude (still is... somewhere) who just so happened to be in the Ruby community. Check out his most favorited tweets, they are [brilliant](http://favstar.fm/users/_why) (if some of them are a little inside-jokish), especially the first one. I wish I could find him and buy him a nice beer and try to convince him to return :(
hey asshole. did you ever see him perform? did you ever use his code? did you use his guide to learn Ruby? *Did he ever give you any joy?* Clearly, the answer is "no." Then why the fuck are you here talking? FOAD, DIAF, EABOD, and no holiday wish for you. Yeah, I love Ruby, but being angry at someone for loving something you don't is just... stupid.
I've used some gems he apparently started, but the few comics I read on that site weren't at all noteworthy.
you're a fanboy if you love it. not all of us hoard our love to ourselves i guess. people don't express enough love in the world, for anything.
It is a certain sense of humor, I'll give you that.
i'd forgotten the trifocals tweet! cracked me up all over again :)
&gt;Making a blog run on a relational database for example is just silly in my opinion. Totally agreed. Just developers need to understand a KVS is what it is, and they shouldn't fear DB's when they need them is all... 
I've used it for everything from REST APIs to web crawlers and of course many different types of websites. Rails is kind of like Ruby itself. At first glance (at Ruby) you think, "Oh., another scripting language kind of like Python." But when you start diving deeper into things like meta programming and the subtleties of the object system you see how different and powerful a language it is. Rails has around 2,600 public methods in its API. I dunno I've been working with Rails 4-5 years now and I'm still learning new things about it. It's way beyond CRUD but it does make CRUD easy and that's what most people see.
The code is probably all explicitly licensed, but what about the writings? Unless _why released them under a CC or similar license, he has implicit copyright and since he cannot be contacted, permission to reprint them cannot be obtained. I don't think hosting all these is right in that case. I'll contact the maintainer.
I was thinking the other day about how bizarre the whole _why thing was. I wonder if he died, and had all his stuff set up to auto destruct...
...And some men raise their pedantic boring cry...
I'm sorry if abiding an individual's copyright is pedantic or boring to you, but I actually think it's very disrespectful to simply ignore a person's rights over their own works. And if you're setting up a shrine to someone I think it only makes sense that you be respectful towards them.
have you heard of the "fair use" doctrine?
Explain to me how this is fair use. Because if it is then every poetry collection ever published has been erroneously paying authors when it didn't have to.
one def; "Fair use is a means to allow people to comment on a pre-existing work, not a means to allow someone to take a pre-existing work and recreate it into their own work." im not saying it is fair use but it seems likely it is given the 4 prong test and also some of the ratios esp regarding internet cases i have seen
The individual works are being published in full, there is no "ratio" to examine. If this is fair use then it would be fair use for me to go out and buy a book of poetry and post them all on the internet for free. This isn't his work being "commented on", commentary would be if someone wrote a review of his poetry and quoted some passages. It's the same as taking a book or movie and just putting it online in entirety. The only difference is this is many small works instead of one large one, but they are all clearly individual copyrighted works being digitally published in a collection without authorisation. I think it's about as clear as can be. The only reason you can do this kind of stuff online isn't because it's legal but because it's not practical to sue over. But that doesn't make it right. If you care about _why's work you shouldn't be asking for him to sue you, you should be respecting his rights without having it ever reach that stage.
ratio is a legal term meaning the material and binding content of a judgement. a blog entry and/or tweet can be distinguished from a book of poetry not just because of the lack of a commercial aspect but also because of the nature of internet content in general. i am not going to continue this discussion but advise you to look at the ratios (i hope you know what this means now) of copyright cases re internet content.
Guys, you're arguing over the wrong thing. It's not a question of fair use, the issue is that _why's writings are [orphan works](http://en.wikipedia.org/wiki/Orphan_works). This is a legal grey-area that is understood to be a problem by the U.S. Copyright office and others. Though as far as I know no legislation has passed yet, frameworks are being developed. These would allow orphan works to be published provided the copyright holders could not be tracked down with a reasonable effort, and if the copyright holder did object, the publisher would have reduced liability. The legal system isn't really geared to deal with pseudonymous individuals like _why.
Considering _why quite intentionally unpublished all his works it seems obvious what his intent as the copyright holder is, to deny publishing. If his goal was to continue to publish his works he need not have done anything. But quite to the contrary, he went to significant effort to do the exact opposite. Even if he is not contactable I think his intent is clear.
I completely understand what you're saying, but in my somewhat limited experience with the legal system, I don't think that would hold up in a court of law. I believe your view violates the spirit of copyright. Copyright is a system meant to encourage the production of creative works by giving authors a limited monopoly on their rights, particularly sales. It is not meant to be a mechanism to protect one's privacy.
So, that music ("moonboots") seems to reveal clues to _why's identity. The [info file](http://ftp.df.lth.se/pub/scene.org/music/groups/starving_but_happy/sbh-lp003-moonboots-elfin_princess_(starvingbuthappy%2c_2004)/moonboots-elfin_princess.txt) mentions two people (jonathan and kylie), one who is an aspiring programmer and the other has a blog at hobix.com. So, my guess is one of the two. 
Maybe somebody has some use for it. It isn't packaged up or anything like that yet, just the raw (working) code. Writing plugins for other sites should be pretty straight forward and is a nice exercise :)
People still have copyright over things they are not selling, however. If _why wanted some day to publish a book of his stories or poetry he's harmed by someone else taking the liberty to do so first without his permission. Since we can't predict whether or not he'll do such a thing I don't see how it's fair to say he'll never do so. The point really though is that he quite intentionally stopped publishing these things and if you're a fan of his work (which the creator of this page clearly is) I don't understand why you wouldn't respect those wishes. I'm no lawyer and I don't know if the legal aspect would hold up in court or not, but what I do know is that we have legal principle in addition to ethical ones the grant him rights over his work in addition. If it weren't clear that it's the wrong thing to do ethically (which I think it is), its legal questionability surely seals the deal. The rights granted by copyright aren't as simple as just profit either. If copyright only protected works where profit was involved the entire Free Software movement would be dead for starters. In many cases use of free software licenses in practice reduces profit for all involved, and the authors generally surrender their ability to profit by using such a license. But the GPL has held up in court every time, even though it is a license that exists only to control and limit distribution, not protect profit. The fact that the author of a GPL work isn't making money from it (or indeed could never make money from it) doesn't mean you can do what you like with it and ignore copyright.
anything that has a `plugins/` folder can't be considered "small" (maybe in ruby)
The rationale for having copyright is to benefit the public. We give authors exclusive rights to sell or license their works because our society is enriched by their creation. The GPL is a novel use of copyright that encourages an open collaboration and free distribution model of creation that also benefits the public. Now, I agree with you, if _why wants to sell an anthology of his writing, he has that privilege under copyright law. Under the law, it would be acceptable for him to shut down unauthorised publishers of his work. He'd receive royalties from his writing, and we as the public would get the benefit of access to it. However, we have no evidence he intends to do so, and his lines of communication are now stone cold. If he wants to pave the way for publishing his work, let's assume he will contact the unauthorised publishers, asking them to take it down. But, if _why doesn't intend to republish his work, mirroring it has caused him negligible harm. He has lost no potential income, he remains an anonymous figure and these works do not defame him nor impinge on his privacy. Meanwhile, we retain an interesting artistic work, a public good. You ask why his fans don't accept the deletion. I assume because they want to preserve his writings before they're lost. Without mirroring, internet ephemera are fragile (look at Geocities). With US copyright terms as they are, we're looking at around 120 years until _why's work enters the public domain, by which time it would have well and truly disappeared down the memory-hole. As an analogy, would it be acceptable if Joss Whedon in a fit of pique ordered every single copy of *Firefly* (including masters) to be recalled and destroyed? Would you frown upon 3rd party efforts to preserve the series from annihilation? **TL;DR:** Orphan works are at risk of being lost forever, and copying them is a safeguard against that.
+1
At the end of the day copyright still grants your the ability not to publish, and in fact it does so so strongly that that is the default state of copyright. A copyrighted work needs positive permission to allow someone to publish it, not negative permission to prevent this from being done. What the GPL shows is that the "ownership" granted by copyright can encourage the creation of works for reasons other than profit. In the GPL's case the ownership is used to *prevent* others from publishing under certain conditions. Similarly the ability to control publishing rights may be partially what encouraged _why to create his works in the first place. If _why thought he had no copyright or control over publishing, would he have been as willing to create what he did? I actually think none of this would matter in a court, but if you want to pretend courts are somehow looking back at the foundational rationale for copyright in every case then it's still not as simple as you make it out to be. And the difference between Whedon recalling all copies of something and this is that I'm not saying you should have to delete any copies you've saved locally to read or whatever. Keeping those is fine, you already have them for personal use. What's wrong is continuing to publish and distribute new copies without permission. If Whedon stops printing Firefly DVDs and elects never to sell a single new one, I think that's perfectly within his rights. Chances are that 70 years after his death someone somewhere will still have a copy and it can be distributed then. The more value a work has the more likely it is to still exist at that time. Regardless, saying "this guy won't give me a copy so I'll just start copying them and giving them out myself" isn't an excuse. Copyright does grant the right not to publish, and again, this is not some novel use of copyright but the default state of all copyrighted works. You cannot publish something which is copyrighted without the owner's permission.
the plugin mechanism is 7 lines of code :) since the app is fully modular, most application logic is in the plugins. the only thing the rest of the app does is check if the video url matches on of the plugins
Did you actually read the link transcriptase posted on "Orphan works"? 
Didn't you leave a little comment that you were done responding to me?
Satoshi Asakawa's notes on Ruby Metaprogramming. Simple to understand.
It's cute that a guy who doesn't even know what "ratio" means is babbling on about a legal issue so long and so voluminously 
Why are you still here? You said you were done talking about this issue. Can't you keep your word?
Good idea, will do when I get home (and still remember). If you wanna brush up your nerd superpowers (aka: regular expressions), I highly recommend [rubular](http://rubular.com/). It's a REALLY awesome site to test out stuff
This is becoming unwieldy and protracted, so I'll try to condense it: The most striking thing in your answer is that you evidently accept the use of copyright in a way that would retard cultural development without any clear benefit. To follow the law slavishly even when it creates avoidable negative consequences suggests something is wrong with the law. As mentioned earlier, orphan works are a legal grey area the US Copyright Office acknowledges needs to be [remedied with clarifying legislation](http://www.copyright.gov/orphan/). I therefore think it is perfectly acceptable to examine the rationale for copyright to determine how it applies. Using the US Copyright Office's own framework, I proposed two scenarios above that would be beneficial to the public and would be beneficial or at worst neutral to _why. I strongly contest either scenario is better than having _why's work removed publicly and lapse into oblivion. This would be detrimental to the public and have little benefit to _why. I would also offer that an inflexible approach to copyright would hinder extremely useful resources such as the Internet Archive and the Google cache. These services scrape entire sites and are opt-out. To make them opt-in would severely cripple their usefulness, and we would lose swathes of the internet for little appreciable benefit. I sense I am beginning to repeat myself, so I will end by saying judging by your comments, you may be well-meaning but ultimately overly dogmatic in your interpretation of copyright law here. I truly believe the current situation strikes the best compromise ethically, and if it not yet unambiguously legal, it is surely only a matter of time.
The consequence of what you're saying though is that copyright is essentially an opt-out procedure at best, since you think _why should have to opt out of having this works published even though in fact copyright is entirely opt-in at the basic level. That's the best case interpretation. A slightly worse one is you essentially saying that people don't have effective copyright on anything that's not being sold, but the GPL and other such things show that this is not the case. The GPL happens to protect certain ideals but cases involving the GPL aren't ebing won because the judge sees the benefit of having the Linux kernel, they're being won on the technical details of copyright law which includes the right not to publish regardless of profit or lack thereof. The whole issue of Google cache etc. being opt-in is indeed an unresolved problem but that does not mean that any old individual can say "well Google sort of does it" as a defense. The basics of copyright law are clear and I think the basics are all we need here to prove that what is being done is wrong. These basics grant _why copyright over his work including the right not to publish at any given time should he wish. Given the circumstances surround the removal of his work there is no reason for anyone to assume that _why wants his things published or that they somehow have the right to publish _why's copyrighted material without asking him.
It would seem on the public internet that publishing is an an implicit opt-in to services like Google cache, at least going by [this ruling in Nevada](http://www.eff.org/deeplinks/2006/01/google-cache-ruled-fair-use). While I now see with greater clarity your point about the GPL, I would counter it clearly must have public benefits, otherwise it would simply not take off. I still want you to address whether or not we should amend laws that do not serve their original intent and create chilling effects. Otherwise I cannot see any amicable resolution.
Sorry, newb question here. What repository should I be using for progressbar and nokogiri?
Here is a link to the original post of this video: http://rubyconf2009.confreaks.com/19-nov-2009-10-25-bert-and-ernie-scaling-your-ruby-site-with-erlang-tom-preston-werner.html 
Key-value databases have been around and popular for a long time.
They've certainly been around for a long time, but they're getting a lot of recent popularity lately. Stuff like Ruby on Rails has made Mongrel and CouchDB quite popular recently. 
That's a pretty good trick, but I think it might slip by undetected. That f in there is a bit difficult to see. Just using BigDecimal would be a lot more clear.
I wouldn't say it's a good trick. There is no reason to monkeypatch a core class when you can just use BigDecimal to begin with.
People do love them literals in Ruby... but sometimes.... you just gotta let it go.
What happens if three different modules add method_missing to the core Integer class? 
Look no further than [RVM](http://rvm.beginrescueend.com/)
method\_missing is like any other method, which means only one of these method\_missings will get called (which one depends on the module look-up order). The idiomatic way to alleviate this is to alias method missing to something else (like old\_method\_missing) and call that after one’s done with handling ‘their’ missing method calls (so that other modules’ method\_missing definitions also work). To clarify: module Integer alias old_method_missing method_missing def method_missing method, *args, &amp;block # …do your stuff… old_method_missing method, args, block end end 
Just start now. There's not a definite release date for Rails 3 right now anyway. As far as I can tell, things are getting simplified in Rails 3, so the concepts won't be that different. 
I agree with Scyllinice. The best way to learn is practice, so start with the current version, when rails3 will be out, then you'll study his new features ;)
The Rails 3 public API is intended to be as backwards compatible with Rails 2 public API as possible, so don't worry too much about it. Read Yehuda Katz's existing and upcoming posts about Rails 3 on [his blog](http://yehudakatz.com/) and the [engine yard blog](http://www.engineyard.com/blog/) and they should give you an overview of what's going to change.
+1 for Merb. It still today is my proffered full stack ruby framework. Blazing fast, ships with authentication and has not changed its public API since the 1.0 release in Oct 2008. Oh, and DataMapper is amazing! that said, if your brand new with ruby go with the latest stable version of rails.
Even though I hate rails and prefer merb myself I'm going to have to downvote you for the lack of tactfulness.
A lot of the things you like about Merb are coming to Rails - ORM agnosticism, [modularity](http://yehudakatz.com/2009/07/19/rails-3-the-great-decoupling/), and significant performance improvements. Check out [Yehuda Katz's](http://yehudakatz.com) blog for details.
I think the whole point of the post was that he found using the second parameter of [] to be very readable, and very much preferable to the previous ways of doing the same thing.
And when 3 does hit, there will likely be a glut of tutorials for porting your 2.x apps over.
You could try some other framework. Merb, Sinatra, Rango. I believe current merb is closer to rails 3 than rails 2 with its agnostic ORM etc. I've been using it since its ~0.6v. However I tried Sinatra and Rango with CouchDB/MongoDB and it was like WOW… so edgy things to learn. I learned more about rack, discovered warden, mongomapper. It's really interesting to play with such things and you can learn much more than using monolithic framework like Rails.
definately love sinatra + mongodb. saves SO much code in the end :)
The version called "Sinatra." Here: [http://www.sinatrarb.com/](http://www.sinatrarb.com/). ... at least, that's what I'm doing. Seems a lot less crufty than Rails, and a lot more pure ruby-ness (I have basically no background in web development, so giving it a shot with this route). 
Does it come with stuff like an ORM and / or authentication support? I wish more frameworks would come with a nice auth system out of the box. 
Start with the philosophy first which is to say, just do it. Also do you know Ruby?
This is a jackass answer, but I wanted to post something like it, anyway. Check out Sinatra for light-weight stuff. It's pure web-app bliss.
Use DataMapper. It's a good ORM. And if you want free hosting, both Sinatra and DataMapper work great with Google App Engine.
Downvoted for the edit and the fact that you didn't answer the OP's question.
I'm messing with DataMapper now. As for authentication, I'm using something quite similiar to [this](http://www.gittr.com/index.php/archive/sinatra-basic-authentication-selectively-applied/). There's also some Googlage on using Sinatra with OpenID for more session-based auth. Sadly, the chapter on "Authentication" is curiously absent from [the Sinatra Book](http://www.sinatrarb.com/book.html). 
try mongoid. It's nice and much cleaner API than mongomapper. But it is newer so maybe missing some features. Definitely good to keep your eye on though. It als works pretty flawlessly with merb etc
Not till Rails3.
No built-in auth system, but you can use Authlogic, which is sorta the rails standard now I guess. Here's a template for using it in Sinatra (Disclaimer: I wrote it): http://github.com/ehsanul/Sinatra-Authlogic-Template
[warden](http://github.com/hassox/warden) :)
Yup, looks nice. I'll make a branch in my project and see how it will go. :) Thanks
Very cool! Any chance you'll share the source with us?
Glad to hear you're joining the team. I've put some links together here addressing this very question: http://nickmerwin.com/some-links-for-learning-ruby-andand-rails-fro
You don't absolutely need to start off with Rails. Sinatra has a very simple and clear API for creating web applications. It doesn't have a load of the helper stuff that Rails has, but that's because it aims to be light. If you do want to start with Rails, just pick a web application that you want to make and go for it. Read the guides on [http://guides.rubyonrails.org/](http://guides.rubyonrails.org/) and ask questions on the Ruby on Rails IRC channel (freenode #rubyonrails). If you do go to the channel, please make sure you're prepared to do some research and maybe get heckled a little. We do have trolls that like to spend time there. As long as you can show you've made an effort to figure it out yourself, all will be well.
[Railstutorial](http://www.railstutorial.org) is the best introduction imo, albiet a work in progress - you write an rspec test, learn git, and deploy your app to heroku all in the first two chapters. It's a lot to take in, but I get the impression that the author is pretty fastidious about best practice which is a good thing :) There's even an irc channel specifically for the site/book if you get stuck. Why's Poignant Guide to Ruby is one of my absolute favourite computing related books, however it's not a particularly practical introduction to the language. That being said, do read it - just don't rely on it as your only learning resource. Incidentally, Rails isn't the only ruby web framework - you might want to check out [Merb](http://www.merbivore.com), and for 'micro-sites' Sinatra is pretty nifty. One thing to be mindful of, while Merb is arguably a more elegant and well conceived framework than rails, many of the core Merb developers are now part of the Rails team. Many of the features of Merb that distinguish it from Rails (performance and modularity primarily), will in fact be coming in Rails v3.
Yeah, no reason to assume you must use rails. There are lots of web frameworks in Ruby, and personally I prefer Sinatra. It'll feel more like you're actually programming at least, and there's much less to learn. Here's a one-file hello world for sinatra: require 'rubygems' require 'sinatra' get '/' do "Hello, World!" end
&gt;When I installed Ruby I don't believe I selected rubygems to install with it. What operating system are you using? Usually it's "apt-get install rubygems" or "yum install rubygems". You can also install it manually by downloading it and running the installer.
yea I just reinstalled :-P t'was a stupid question
I wouldn't recommend installing it via apt or any package manager. Generally they neuter the update capabilities and that would put you behind in the future. Better to install it outside of the package manager.
pardon me, but how do I install and set up sinatra? I found a tutorial with a command line using rubygems, but I'm on XP and I honestly don't know what to do. thanks
I posted this yesterday, it might be helpful to you as well (it was helpful to me) http://www.reddit.com/r/ruby/comments/aioww/ask_rubit_which_version_of_rails_should_i_start/
If you want to learn it well, I would seriously recommend the book [Agile Rails](http://pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition). I'm a professional rails slave, and this is how I learned. I tried to learn online when I was getting started. It's probably better by now, but I was finding all of the online resources patchy and not particularly in depth.
If you're on Windows, I recommend using the new [RubyInstaller](http://rubyinstaller.org/download.html) over the old "one-click installer". After you have it installed, just follow the RubyGems instructions you found in the Windows command prompt.
[railscasts](http://railscasts.com/) is an amazing resource. Edit: If you use a mac then [giant robots](http://robots.thoughtbot.com/post/159805668/2009-rubyists-guide-to-a-mac-os-x-development) can help you set up your environment.
If you want a book to use as a newbie. Get 'Simply Rails 2' 
Rails is certainly not required, but as it is the de-facto standard framework, it's probably a good place to start out. It's not half-bad as a framework either.
"rubit" :D
Should this be NSFW? I'm afraid to click the link...
LOL. And the fact it's submitted by someone with the username "retardo" probably doesn't make you feel any more secure about its contents. :)
These look pretty helpful, but not nearly as robust as [pickle](http://github.com/ianwhite/pickle), which includes Then helpers to check existence afterwards too.
You definitely don't need to start with Rails, but it *is* the defacto standard webapp framework in Ruby. Most of the Ruby community tools kind of assume Rails as a start: capistrano, cucumber, etc. To get started, I recommend Michael Black's book "The Well-Grounded Rubyist" for ruby in general, and the previously mentioned "Agile Rails" for Rails itself. Heroku's pretty cool for learning rails, too - it's an interactive hosting environment that gives you some nice advantages. Sorry no linky, I may come back and edit later for that. ;P
I would second this recommendation. This book is made of pure win. 
i totally agree with the op, especially considering the rather analogous behaviour of split's bizzaro-superman cousin *scan*. irb(main):023:0&gt; "baz".scan(/[a-z]/) =&gt; ["b", "a", "z"] irb(main):024:0&gt; "".scan(/[a-z]/) =&gt; [] irb(main):025:0&gt; "".scan("") =&gt; [""] 
If you can afford it, check out the Peepcode screencasts. Railscasts as well which are free but smaller in scope.
And it's free!
It is here: http://github.com/knu/ruby-digest-extra/tree/master/digest-tiger/
Excellent. Thanks much.
Upvoted for the name. And the fact it's a damned good idea.
Holy crap, "CFStringTokenizerCopyBestStringLanguage()" is the most ridiculous function name I've ever seen in Ruby, ever. 
Maybe it has something to do with how MacRuby interfaces with Core Foundation. Cocoa is chaulk full of functions like that.
DOWNVOTED FOR THE NAME CHANGE BOOOO
Yes, it is. It is bridged directly to the [corresponding C function](http://developer.apple.com/mac/library/documentation/CoreFoundation/Reference/CFStringTokenizerRef/Reference/reference.html#//apple_ref/c/func/CFStringTokenizerCopyBestStringLanguage). Core Foundation names tend to err on the side of verbosity, as you can see; there's a project called [HotCocoa](http://www.macruby.org/trac/wiki/HotCocoa) that wraps these function calls inside idiomatic Ruby.
hehe, it's a C function that you can call directly from MacRuby because MacRuby's String implementation is done on top of NSString which is "toll-free bridged" with its Core Foundation counterpart: CFString. Basically, thanks to MacRuby, you can directly call any of the C functions offered by CoreFoundation &amp; Foundation.framework from within your Ruby code. The beauty of it all, is that you can wrap the ugly C functions like shown in the example. This way you never have to worry about "ridiculous function names" ;) 
Take a look at Shoes (http://github.com/shoes/shoes)
Have a look at shoes: http://shoes.heroku.com/
Well, do you have ruby installed first? I'm not sure at all about how you install ruby on windows, but I believe they tell you here: http://www.ruby-lang.org/en/downloads/ Then install rubygems: http://docs.rubygems.org/read/chapter/3 Then run this command: gem install rack sinatra And then, you may run the sample app above by saving it in say hello.rb and running: ruby hello.rb And voila, a working sinatra app. Not that bad.
u could also try fxruby http://www.fxruby.org/
Shoes is interesting, but unless someone else has picked it up since why disappeared, it might not be wise to start using it now.
I've been looking into GUI toolkits for ruby lately, so I'll give you my impressions of what I've found: - Qt was appealing to me as a KDE user, but it's got some license issues (I'd have to pay if I wanted to distribute my app commercially) and it doesn't look very easy to distribute (I'd have to point users at a 170MB installer). - FxRuby looks very well supported, but it's ugly on all platforms. Just looking at [the screenshot on wikipedia](http://en.wikipedia.org/wiki/File:Fox_apps.png) turned me off of it; it has a very old-school Windows look to it, which might be ok if you just want to play around with gui coding. - MonkeyBars looked very promising and I was excited by the chance to play with JRuby, but I was turned off when I saw that their ["hello world" app](http://monkeybars.rubyforge.org/tutorials/usage2.html) had 5+ directories and 15+ files. It might be worth the complexity but I didn't get far enough to tell. - Shoes is what I went with to get a prototype going. It's very slick if you just want some basic gui stuff quickly. It's a bit limited in the widgets it provides. Also one of if its biggest strengths and weaknesses is that it is basically its own ruby distribution; it makes packaging your app for different platforms dead simple but it's using a 3-year old version of ruby that has a lot of warts. Like uzimonkey said, the guy who wrote it disappeared from the net and other devs are just now getting around to picking up the pieces. Shoes might be a better option in 6 months to a year from now. - WxRuby is what I'll most likely use for the app I'm working on in the future. It looks very easy to distribute (the whole thing can be delivered as a binary blob with your app) and has a liberal license for commercial use. It's also very heavyweight but the ruby bindings look like they abstract away a lot of the underlying stuff, which could be good or bad. I haven't used it much beyond a "hello world" but it looks very nice to me so far. Edit: Added some links.
http://github.com/shoes/shoes/network
I use WxRuby and DialogBlocks http://wxruby.rubyforge.org/wiki/wiki.pl http://www.dialogblocks.com/ Then I use RubyScript2Exe to make it portable. http://www.erikveen.dds.nl/rubyscript2exe/
BTW, Qt is LGPL now. Doesn't that work?
&gt;MonkeyBars looked very promising and I was excited by the chance to play with JRuby, but I was turned off when I saw that their "hello world" app had 5+ directories and 15+ files. It might be worth the complexity but I didn't get far enough to tell. you can distribute your app as one jar file. 
Wow, you're right. I must have been reading outdated material.
Yes, but the code needed to write a "hello world" seemed unnecessarily complex to me.
Maybe give glimmer a try http://www.eclipse.org/glimmer/
Thanks for the heads up, that does look cool.
kiss. my. ass. The debian and ubuntu package zealots have had numerous opportunities to work with the rubygems developers to help make it work for their needs. Not only have they NOT provided any patches, they have actively thwarted those who tried to bridge the gap between the two systems. Instead of working within the spirit of open source by collaborating, debian and ubuntu package zealots have instead chosen to make demand after demand. Apple had similar needs when they chose to distribute rubygems. Instead of demanding, bitching, and moaning, they submitted (good) patches. Problem solved.
Heh, the Ruby package that the Debian guys asked me about adding to the distribution (they were actually concerned about the license, but I had no problem letting them license it with a license they liked), I had already made it so it could be installed with and without RubyGems. That seemed to make them happy. It was only a happy coincidence that this happened though--my package actually predated RubyGems, which is why it turned out the way it did.
thanks all, I think I will try out wxruby
We need to figure out a better way to package and ship ruby apps. Shoes is brilliant, crate is a fantastic idea but both them are suffering from neglect and lack of momentum. 
i was not a fan of shoes's packaging system actually - it required the app to be extracted every time you ran it, rather than extracting the first time and then caching it. unnecessary startup hit.
There is an ongoing effort to port Shoes to JRuby. Keep an eye out for it.
When Apple outshines you on collaboration, you're really fucking up.
Zealots? WTF? How could that word *possibly* be a appropriate to describe developers who are trying to important stability rules that work for everyone but the Rubygems people?
IMO, FXRuby is ridiculously complex.
Yes the same is true for rubyscript2exe. Maybe we can do something like nailgun. Load up ruby once and have a tiny C loader that contacts the ruby daemon and tells it to load and run a file (in a fork).
it's not starting the ruby interpreter that costs you, it's untarring the "executable" on the fly every time you run it. i must confess i cannot think of a fast, secure solution at the moment (i.e. one that's resistant to a malicious script tampering with the installed files of some other script)
Agreed. RVM has everything you need, and you get named gem sets for free.
If you don't think "zealot" is an appropriate description in my description above, either you don't know the definition of the word ("a person who is fanatical and uncompromising in pursuit of their religious, political, or other ideals") or you _are_ a zealot and are blind to it (or something else, but I can't come up with it pre-caffiene). **We've _tried_ to work with them, it just doesn't work.** 
I've been doing a lot of dev with Shoes lately so I've been following the mailing lists. That's where my 6 months to a year prediction for a Shoes resurgence came from.
Expect this to get changed. It's just using `makeself`, which is nice for the single file, but you're right, the startup is annoying. This is something that's on my Hackety Hack to do list, and I'm sure I'll be contributing that back to Shoes. I haven't looked into any alternatives yet, though.
Any URLs explaining the story?
I did see word of some issues if you're trying to switch ruby stacks out from underneath something that rides on top like Phusion Passenger (might be permissions related since RVM puts the stack in your home dir) but I trust that sort of thing would get worked out eventually (or maybe already can via some config changes)
They left off python? The closest language to ruby? I'll pass on this botched survey.
Looking forward to Shoes on JRuby. Good luck!
It's not a 100% sure thing yet.
"Note: MailStyle was originally called Shemail but was changed due to a general negative response to the name from the public." [Deja vu](http://www.binarylogic.com/2008/11/03/rip-gasm-make-way-for-logic/).
Include a setup.rb? What is so bad about using Rake? Removing any references to rubygems might be difficult for projects that integrate explicitly with rubygems. I suspect most of the "require 'rubygems'", are from the days of users forgetting to set RUBYOPT="-r rubygems". But this is now a non-issue, given that Ruby 1.9.1 bundles rubygems 1.3.1. Why should distributions (and the rest of us?) still be using Ruby 1.8.7? Adding of the 'lib' directory to $LOAD_PATH should already be handled by the test-suite of choice. Generating man-pages could be automated, using some (RDoc|MarkDown|TextTile) -&gt; Groff translator. Using proper she-bangs is a valid suggestion, although I've rarely ever seen projects not use #!/usr/bin/env ruby.
I think it's worth pointing out that Debian (or any other distribution) cannot merely issue guidelines/orders and expect every upstream project to follow them. They have to work with the rest of us, even if that means accepting some of our practices.
Simply Rails 2 is a great Step by Step tutorial that goes through building an entire site and explains a lot of how Rails works along the way. I hear that 'RailsSpace: Building a Social Networking Website with Ruby on Rails' is another good book. Check them out if you have the money to spare.
&gt; $: is basically a shorthand version of $LOAD_PATH. &gt; $* is basically shorthand for ARGV. Excuse me for being pedantic but these things aren't "basically the same", they're aliases of each other. That is, they refer to the same objects. As mentioned by one of the commenters, [stdlib's English](http://ruby-doc.org/stdlib/libdoc/English/rdoc/index.html) is a good way to avoid having to use the cryptic variables. Other things are aliased in other places automatically like the ones above, and Process.pid being equivalent to $$. [Ryan Davis's Ruby QuickRef](http://www.zenspider.com/Languages/Ruby/QuickRef.html#18) has a nice succinct list of these globals. EDIT: formatting, links. EDIT2: s/stdout/stdlib/
It's like RTFM but in blog format!
Now with more Beta and Social Chicklet!
Is [this line](http://github.com/hanklords/flickraw/blob/master/lib/flickraw.rb#L29) giving away any sensitive info?
1+ for the quickref link
I thought it would be easier if the library is working out of the box whithout getting a key from flickr. Note that I don't publish the secret key, so no signed call can be made. If people abuse it and it get banned, I won't publish it in next version and that's all. How are you supposed to deal with this in open-source software anyway ?
Another tools in this category are [Flay](http://ruby.sadi.st/Flay.html) (for finding code similarities), [Flog](http://ruby.sadi.st/Flog.html) (for finding complicated code) and [Roodi](http://roodi.rubyforge.org/) (for finding potential design issues).
As an added fact the way that `scope` is implemented here is actually similar to how `let` is implemented (in theory) in lisp. (let ((x 1) (y x)) ... ) is equivalent to: ((lambda (x y) .... ) 1 x) Which is a combination of both a `lambda` definition and invocation. Likewise for `scope`, it is, in effect a `lambda` being both defined (the block) and then invoked (yielded to). 
It's a small part of the survey and has no impact on others results. (well except the little bias due some python people that might be offended and left when they didn't saw python in the "other languages do you use" list)
Interesting, but is this a typo? 01 require 'rcapture' 02 03 # Enrich single instance 04 x = [] 05 x.extend(RCapture::Interceptable) 06 07 # Define procs that will modify the input arguments 08 inc = Proc.new { |ci| ci.args[0] += 1 } 09 dec = Proc.new { |ci| ci.args[0] -= 1 } 10 mul = Proc.new { |ci| ci.args[0] *= 2 } 11 12 # Capture ':&lt;&lt;' multiple times. 13 x.capture_pre :methods =&gt; :&lt;&lt;, &amp;inc 14 x.capture_pre :methods =&gt; :&lt;&lt;, &amp;mul 15 x.capture_pre :methods =&gt; :&lt;&lt;, &amp;inc 16 x.capture_pre :methods =&gt; :&lt;&lt;, &amp;dec 17 x.capture_pre :methods =&gt; :&lt;&lt;, &amp;dec 18 19 x &lt;&lt; 2 &lt;&lt; 4 20 p x 21 #=&gt; [3,7] I'm not sure how you're stacking the capture_pre calls, but I tried normal associative rules for math, and also in-order: 2 + (1 * 2) + 1 - 1 - 1 = 3 # associative, OK 4 + (1 * 2) + 1 - 1 - 1 = 5 # associative, NO MATCH (((((2 + 1) * 2) + 1) - 1) - 1) = 5 # in order, NO MATCH (((((4 + 1) * 2) + 1) - 1) - 1) = 9 # in order, NO MATCH Neither way results in your answer of [3,7] 
Hi, No, it is not a typo. When installing a capture_pre hook with callback c, c is invoked before calling the hooked method (which itself might be hooked). So every time you call capture_pre that particular last callback is called before previously installed callbacks and the original method is called. Likewise, for capture_post the most current callback is called after all previously installed callbacks and the original method is called. In the above example the following occurs (((((2 - 1) - 1) + 1) * 2) + 1) = 3 (((((4 - 1) - 1) + 1) * 2) + 1) = 7 Well, I'm not sure if my explanation helps. I will probably update the documentation, maybe with a picture, to clarify the invocation chain. Issue created. Thanks for your feedback, Christoph 
Looks like it's recommended: http://www.ruby-forum.com/topic/124830#559376
I've been wanting to learn ruby for a few days now, thanks for this! I really like ruby, it's so powerful and simple
Here is a fun expression to try on Ruby 1.9... [].pack("@#{2**31-1}")
and what exactly does it do? [] &lt;-- array .pack(bla) &lt;-- Packs the contents of arr into a binary sequence according to the directives in the string bla @ &lt;-- Moves to absolute position 2**31-1 &lt;--- big number 
We have done this in several places, and it works pretty well. We're also using STI with them, which has caused a few hassles when upgrading versions (because they changed the format of the type column) but it was manageable.
Yes, but more to the point, it does the following (and on the TryRuby page too): $ irb # [].pack("@#{2**31-1}") (irb):1: [BUG] Segmentation fault ruby 1.9.1p376 (2009-12-07 revision 26041) [i686-linux] 
Thank you both, that eases my mind for sure!
Keep in mind, nesting an AR class in another will prefix the table name for you. In your example, the Schedule::Preference's table name will be `schedule_preferences`. I use this style of namespacing pretty heavily in my Rails apps. It's great for nesting similarly-named classes under different modules. For instance, you can easily have Schedule::Preference and User::Preference.
Yes, then don't do that... ;) I think C programmers do that kind of stuff for a living. The question is: What would be the correct way to handle this input? also: it doesn't segfault immediately. it basically uses up all RAM that is there and THEN segfaults
Bad boy :(
does not compute
After doing the tutorial and deciding that I like ruby (I've been trying to decide between ruby and python as my next language) I ordered "Learning Ruby" from amazon today.
I’m currently using [ron](http://github.com/rtomayko/ron) for generating man pages. It uses a syntax that is very Markdown-ish with a few additions and a few features removed.
We've had problems with STI while doing this but nothing unresolvable. However we also moved to DataMapper this year so I can't report on the latest edge AR versions.
Good choice. I was a long term Python user (5+ years) and started looking at Ruby a few months ago. To cut the long story short, I really like Ruby and wish I had come to it sooner. I am still exploring the stdlib. My only complaint is that the docs aren't as good as Python. The pick axe book helps a lot. I know I can share this in /r/ruby without getting flamed :P 
What happen if preferences.rb is loaded before schedule.rb by autoloading mechanism of rails? Try: $ script/console &gt;&gt; Schedule::Preferences.count &gt;&gt; Schedule.count 
Docs are definitely the biggest issue with the ruby community. They're generally scattered and vague. My top suggestions for docs are: * http://railsapi.com (select the "ruby" docs above the box) * http://apidock.com/ruby * http://railsforphp.com/ (if you're coming from PHP, this is a great map) * http://ruby-doc.org (I consider this the "standard", but generally more clumsy than any of the above)
Thanks for the resources, I'll be sure to look there if/when I need more info after reading the book.
Schedule::Preferences autoloads schedule.rb first, then schedule/preferences.rb.
Cool stuff. A friend of mine rolled a version of this to find what parts of our system were calling certain methods - our codebase is 16kloc, so it can be tough to tell which method is calling #split way too many times. This library would be awesome for profiling in that respect.
Nice. Having it be Markdown based, I bet you could get it to render in the documentation with YARD.
&gt; Using other formats (.tar.bz2, for example) is discouraged, as it requires additional steps for the packager Maybe the article means something else, but... tar zxf pkg.tar.gz tar jxf pkg.tar.bz2
Can you write briefly how does RCapture differ from existing AOP libraries like [Aquarium](http://aquarium.rubyforge.org/), [Gazer](http://github.com/teejayvanslyke/gazer) or [Aspectory](http://github.com/nakajima/aspectory)? I’m looking for a centralised logging solution and AOP looks like a nice way to solve this problem; I’m currently using Gazer, but all of the libraries linked above seem to be no longer developed, hence I’m on a constant look-out for a replacement.
Did you try ruby-prof? The HTML graph output is all about which places call which others (and where are they called from).
I'm afraid I can't answer this question to full extend, as I'm not aware of the libraries you named. From skimming the documentation those libraries seem to by syntactically using AOP syntax, rcapture is more like an generic approach, plus I did not find examples that captured methods from individual instances only.
Nice to see rcapture in action! BTW help is wanted on development in case anyone is interested. See http://code.google.com/p/rcapture/ for details.
As far as maintenance is concerned, I cannot afford to spend my full spare-time on this project. You might be interested to read the "Help wanted!" section at http://code.google.com/p/rcapture/ for details. Best regards, Christoph
This has made working with color in the browser better than working in a design app. Now I can tweak colors and try out different schemes without constantly switching applications and copying and pasting hex values. Here's a great example of what these color functions have let me do. http://brandonmathis.com/projects/fancy-buttons/
check out: http://shoes.heroku.com
active fork here : http://github.com/geekq/workflow/tree/master 
every time I read FSM I think of the flying spaghetti monster, goddamn internet silly, I know.
Wow that's pretty impressive. 
Exception performance shouldn't be a big deal as they're meant for *exceptions*--things that happen out of the norm. So during the normal main loop of your application, you shouldn't need to factor in the performance of an exception because at that point you should be more worried about handling the situation gracefully. `&lt;/obvious&gt;`
I was going to post the same thing. It's the non-exceptional code you need to worry about. Although I have seen code that used exceptions for a non-local goto, 8-/ 
This is nice, just not Ruby at all. Should be posted in /r/html imo.
I generally use this if I want to point out that the class is *internal* to the enclosing class. For example I used it when I created models for [DBMail](http://www.dbmail.org/) (you guessed right, with the intent of creating a webmail interface): I have classes like MailMessage::Physical, MailMessage::Block which allow me to do AR magic, but make no real sense in the "outside world", hence it would be pointless to pollute the global namespace with them. They are small classes of only a few lines of code and as such they sit right in app/models/mail_message.rb. I also have a module inside the MailMessage class, a mix-in for a set of above-mentioned inner models. No problem with that either.
It would have been Ruby if the source was released. BTW; Great work!
Why doesn't more people create websites designed to look great on iPhones instead of creating iPhone applications? With css you can make the same page look like an iPhone application on iPhones and normal page on desktop computers. Apple: Creating Compatible Web Content: http://tinyurl.com/ylxjau5 Css that adjust well to screen size: http://people.opera.com/howcome/ http://people.opera.com/howcome/base.css (try resizing window)
Thanks for your replies! I agree that RCapture does seem more general, and that’s one of the aspects I like about it. :) Per-instance capturing is also definitely a plus. I’m not making any money on my software (it’s the code for my PhD studies), but as the AOP solutions are not maintained at all, switching to RCapture does not seem to have any disadvantages; I’ll definitely see how it works in my case in the coming weeks. Thanks for this nice library!
Ruby programmers do occasionally use exceptions for non-exceptional code, e.g StopIteration in external iterators in ruby 1.9, also the 'rescue nil' idiom 
It used to be 100x slower (well, it was at least O(N) slower) since it walked the object graph of the thing throwing the exception... I was working with very large graphs and my code was performing horribly. Matz and I sat down and worked out what was going on and got exception handling up to reasonable levels. This was a long time ago tho... Rubyconf in Austin, TX so... 2004?
I'd like to hear your [feedback/suggestions/critics](http://code.google.com/p/rcapture/issues/list) on RCapture if you don't mind. Please bear in mind that there will be limited, as in sparetime, support. Therefore, you might wan't to consider joining the RCapture project in order to contribute. - Christoph
Hi fellows. The official submissions app is now up and working. take your browser over to [bugmash.com](http://bugmash.com/)
Very nice!
Some of those are implemented by 'utility_belt'.
Utility Belt is a superset of Wirble. It requires Wirble and adds a bunch of other facilities.
For even more IRB tricks, check out [Utility Belt](http://utilitybelt.rubyforge.org/). It starts with Wirble and adds a bunch of other utilities.
Ah, nice, I didn't know that :) +1.
For more irb goodies i.e. 200+ irb commands: http://github.com/cldwalker/irbfiles
Nice read. Thanks for posting. &gt; Mr. Sasada, the developer of YARV, said that he would like to introduce MVM around 1.9.5. For someone like me who didn't understand, can someone share what MVM is? 
On one benchmark. 
And is an incomplete implementation, last I checked. One of the JRuby guys wrote up something to the effect of "that last 2% that you've been putting off implementing? Yeah, that's where your performance is going to go right into the beancan."
Yes. That was charles nutter. Of course that begs the question "how important is that 2% anyway and could somebody fork ruby and leave that bit out". I guess that's what duby is kind of like.
[Multiple Virtual Machine](http://blogs.sun.com/shita/entry/implementation_of_an_mvm_environment)
Microbenchmarks like these aren’t really useful.
I'l really love to see MacRuby on http://shootout.alioth.debian.org/
yeah, he had a great post up somewhere about how pretty much every ruby reimplementation starts off with *fantastic* benchmarks, and then the more corners of the spec they have to cover, the slower they get.
For years people have been whining about the fact that Ruby is very slow on synthetic benchmarks. Now that there's an implementation that's actually *very* fast on synthetic benchmarks, as fast as Scala, Clojure, etc… and even close to Java and C, these benchmarks are suddenly not important anymore? WTF?
Makes me wonder if there's mileage in porting MacRuby's LLVM VM to a more cross-platform environment.
A single tiny code snippet isn't useful as the sole comparison between language implementations.
Buy me the machine!
&gt; Now that there's an implementation that's actually very fast on synthetic benchmarks How do you know it's very fast? That one code snippet shows 8.5 times faster than Ruby 1.9.1 - it doesn't show Scala or Clojure or Java or show the compile options for C.
Dammit. this makes me want an Android phone now. 
This combined with cool things like Goggles, ability to develop apps for your own phone without paying anyone any fees, and the eminent grooveshark client are making me want an Android phone too. I think I'll ditch my iPhone on the next upgrade.
Still can't get rid of my Blackberry, unfortunately. No one else has a reasonable worldwide roaming data plan :( I may get one of the android phones to hack on, though. 
0- Sorry. I can't afford it, and also I can't pay online. 1- Debian project doesn't have a single Mac OS X computer?! 2- If no, maybe we can get some restricted SSH account from some open source Mac OS X project for this specific purpose. 3- If Darwin is enough for running the benchmarks, I guess this is achievable using virtualization.
&gt; 1- Debian project doesn't have a single Mac OS X computer?! "**Alioth.debian.org is ... much like sourceforge or savannah** but it's a service for Debian Developers." The benchmarks game website and source code repository is just one of the 871 projects hosted on alioth.debian.org - Debian have nothing else to do with the benchmarks game. (In any case the extra work would be unwelcome - surely there's someone with a good Mac OS X machine capable of using the measurement scripts on more than fibonacci?)
Ugh. exceptions are a freaking goto, they shouldn't be slow. Just register (saving the position on the stack) it under the condition, and then goto a handler.
I just tried wxruby and made my first window, gui app in my life. Wow it felt good to see the window pop up. :)
...considered harmful. Else: awesome Rickroll.
This is beautiful and I want it, but why am I getting： `C:\&gt;gem install hammertime` `Need to update 0 gems from http://gems.rubyforge.org` `complete` `ERROR: While executing gem ... (Gem::GemNotFoundException)` ` Could not find hammertime (&gt; 0) in any repository`
The gem is hosted on Gemcutter, which is the new official home of Rubygems. Make sure you have an up-to-date Rubygems installation and the Gemcutter source enabled. See http://gemcutter.org
none. it is a hardware problem.
Looks interesting, and I was surprised to see that the [entire library is only 129 lines](http://github.com/avdi/hammertime/blob/master/lib/hammertime.rb)
&gt; "None to write RDoc." So true. So true.
The only thing it is missing that I see is something about "# to write tests to make sure future light bulb changes won't break anything"
Funny.
At the risk of being "that guy", how is this ruby? Cool none the less
You don't need to have the gemcutter source enabled. http://gems.rubyforge.org/ *is* the gemcutter source now, they made it a redirect.
My bad, I mis-submitted it!
Great post. Worth a read and a re-read. The second because it's so packed with information.
Love the name.
Ahh, DB2, my least favorite O/RDBMS.
Hands up who uses DB2.
You know there's a linux version of DB2 eh, and it's free. And it's a pretty damned goodDB. 
I do. It's an excellent DB for anyone but the ignorant. 
A large method creating headaches? Sounds like it needs to be slimmed down or split up.
Every call in Ruby is a method, at some level (with the exception of a few oddities like `defined?`). ruby-prof should be able to help you track it down. If you can't determine the issue from the ruby-prof readouts, you probably aren't reading them right.
What OS are you using? If you're on a Mac you should perhaps look into DTrace.
You're probably right. Ruby prof tells me that the issue is lots of calls to class#new. I'm not sure what to do with that.
Why not post the profile results somewhere? You'd likely get better help...
Nice. Was going to ask where the "developed for Rails 3" came from, but then noticed the author is http://github.com/rails/ ;-P I wonder if they're using anything from Chris Wanstrath's [Ambition](http://github.com/defunkt/ambition)?
&gt; So far the only profiling options I can see operate on the method level. With this comment I'm guessing you mean ruby-prof. It's true that ruby-prof does operate at the method level, but you can just find the offending method and it will tell you what inside of that is taking time. &gt; I have a fairly large method which is the cause of a lot of profile headaches, and I need to figure out what lines in the method are causing a major slowdown. Take a look at [the example](http://ruby-prof.rubyforge.org/files/examples/graph_txt.html) where it explains how to decipher ruby-prof's output.
As far as I can tell, this is going to be used by ActiveRecord/ActiveModel 3, which is why I tacked on the "for Rails 3" part.
proftools.rb is pretty awesome too. I prefer it to ruby-prof these days. http://github.com/tmm1/perftools.rb and http://www.igvita.com/2009/06/13/profiling-ruby-with-googles-perftools/
May as well have just linked to the Github page: http://github.com/twoism/postly
Yeah, that's what I was using. Ilya's blogpost was what got me on it.
Ah, useful. Awesome, thanks. 
I don't think I'll have the time unfortunately, but there are some projects which help you get started with writing Ruby libraries. Some people swear by jeweler (http://github.com/technicalpickles/jeweler/), personally I like newgem (http://github.com/drnic/newgem/). I'd highly recommend one of these, because it means, packaging and releasing a gem is as easy as: rake package gem push pkg/my_gem.gem (this requires you to have an account on gemcutter.org, the site where Ruby gems are hosted, and the gemcutter gem installed (gem install gemcutter))
Thank you for the pointers, I really appreciate it!
I went ahead and spent some time trying to implement a suitable client for ruby. Here's the code: http://github.com/samuraisam/pyapns/blob/ruby-client/ruby-client/pyapns.rb Can anyone help me validate this code? Is this interface going to recognizable to most rubiests? The interface works like this: require 'pyapns' c=PYAPNS::Client.configure :host =&gt; 'localhost', :port =&gt; 7077 c.notify :app_id =&gt; 'myapp', :token =&gt; 'app token or list', =&gt; notification_hash_or_list 
I do like the concept of building queries from chained methods, but just like using (:key =&gt; :value) hashes for conditions we are going to run into trouble when wanting to make anything that requires OR.
Not exactly. You could do the OR operations just the same way you'd do it with Rails 2.3 ( or before ).
In perform\_call, it's more idiomatic to use "if block_given?" than "if block". And do you mean for it to run in a new thread only if a block is passed?
Which doesn't use key-value pairs or chained methods, being the issue.
If you generate the graph\_html output (*ruby\_prof -p graph\_html -f profile.html -- yourscript.rb*) then you can see which places call Class#new how many times (it’ll be above the result for Class#new).
I will have to remember that. Thank you! However, I solved the problem. The code is running 20x faster thanks to some regex changes.
check out http://github.com/jpoz/APNS for a ruby APNS gem
Yes that was the intention.
I'm interested to see what would come of this, but can not suggest anything to help
How about an Indiana Jones motif holding a ruby?
If only _why were still alive. *He* could have drawn us a really cool reddit icon. (Sniffle.) Perhaps an anonymous stranger will be able to draw us an icon every bit as cool as _why could have. *hint* Hint **Hint** ##Hint##
As much as I would love to see a foxinated reddit alien proudly brandishing a strip of chunky bacon... we must move on, and let _why rest. :sniff: :( Here's to anonymous strangers making us a cool icon!
Maybe a reference to Japan, or a reddit alien caricature of Matz?
I am the moderator of this reddit. If somebody comes up with a cool icon, ping me (jamesgolick at gmail) and I'll set it up.
I went to /r/python and don't see a cool icon. Did they remove it? Here are some free ruby icons you can use or get ideas from. http://www.rubyinside.com/6-free-ruby-icons-for-your-projects-2056.html 
I always liked the big ruby in the bottom left on that link. Maybe a reddit alien with a ruby head?
You should wait for a few days to give people time to come up with logos, and then have the rubbit community vote in a later thread for the winner, if there's more than one.
Yes, I think the best custom reddit logos are the ones that interact with the alien in some way, rather than /python/ which has swapped in a totally unrelated logo.
Might want to checkout using Ruby FFI to interface to the win32 sound API. http://wiki.github.com/ffi/ffi/windows-examples I'm not sure, but IronRuby might also be able to interface to the win32 API, much like how MacRuby exposes the OSX ObjC APIs.
How about a reddit alien holding a ruby and its face expressions are like [gollum](http://en.wikipedia.org/wiki/Gollum) when he is saying 'myyyy preciousssss'.
[Beginning Ruby: From Novice to Professional](http://apress.com/book/view/9781590597668) by Peter Cooper is a great intro to Ruby with many examples of well-formed Ruby. Remember: *everything* is an object. This took a while for me to wrap my head around. For example: 2 + 2 #=&gt; 4 2.+(2) #=&gt; 4 "+" is actually a method for the object "2" (of class Fixnum). Ditto with "&lt;&lt;" on an Array object. Once this concept really clicks in your head, you'll be writing "real" Ruby with ease. Oh, and blocks. Blocks are your friend.
I find that a good rule of thumb is to think "Is what I'm doing likely to be a common task?" For instance, adding a value onto the end of an array is likely to be a common task, therefore there's probably a function to do it.
The first thing I'd point out is that you very rarely need to manually increment a counter in ruby - if you find yourself doing so, stop and think about how you could write it as a more natural loop. Make sure you understand the functional idioms behind `map`, `grep` and `inject` - they can really clean up a lot manual structure-building and calculation. Oh, and don't feel you have to write ruby how how some people think it should be - there are, of course, many styles and golfing isn't always the way to go. Particularly, I wouldn't have used the ternary operator in the example you gave, as I find it often just confuses things when not being used to select from two 'similar' values.
you should be more concerned about larger, OO code, which needs to be rubylike small snippets don't matter that much
[Here](http://pastebin.com/fd39dbba)'s my version of your version. I'm sorry, but (input = gets.chomp) == 'q' ? break : words &lt;&lt; input makes me want to scream (for multiple reasons). * Based on the code, it doesn't even show the same behavior as your program (last element in the array being "q"). * It's terrible to read. * I can't stand endless loops and stopping them with a break. The usual loop is doing fine. To me, it looks like the programmer from #ruby is more into C then into ruby, too. You can put a lot into a single line of code, but in my opinion, the above is something you shouldn't. To your original question. I learned a lot about "the ruby way" by exchanging with other programmers and looking at ruby code. I have never been to #ruby, but it's probably a good start. It's been a while since I started ruby, but the Pickaxe has always been a good reference for me. You can also take part in the [Ruby Quiz](http://www.rubyquiz.com/). It's good challenge and you get a solution to it that's "ruby like". I think it's mostly practice. It will take some time, but sooner or later you'll find that you are doing everything the ruby way.
Love it
That code is a bit too obtuse really. You are better off being a bit more c like if you ask me. Anyway just keep coding. Eventually your brain will start thinking in ruby.
In your example the letter 'q' is in the array. He probably doesn't want that. Oddly enough this one works.. while (puts "Enter your word ('q' to quit)" ; input = gets.chomp) != 'q' words &lt;&lt; input end 
You should start by learning a bit of Lisp first of all. Here's my take on your words thing, with a distinct Lisp accent: puts "Enter words, one per line (^D to end):" words = STDIN.map do |l| l.chomp end puts "You entered: ", words.join ", " That's Ruby with much more of a Lisp accent than your C-accented Ruby.
My version is a rubyesque version of his version. His version contains the "q" and that's why my version contains the "q". ;-) I have yet to come up with a version that skips the "q" that I'm confident with. I might be a bit too pedantic. A lot of stuff "works", but it just doesn't look right.
Did you ask the Win32Utils guys about this?
Suggestions: * submit snippets you aren't happy with to http://refactormycode.com/ * Read examples of Rubyists' approach to problems at http://www.rubyquiz.com/ * Check out http://rubylearning.com/ They have a monthly challenge for Ruby newbies in which a Ruby pro defines a challenge and then critiques the submissions (disclaimer: I'll be doing one of the upcoming challenges).
I'm no expert, but this sounds like the immutable collections in Clojure. A Very Good Thing.
Seems like you're busy-waiting there, which is probably a bad idea. Have a look at [inotifywait](http://linux.die.net/man/1/inotifywait)
http://dinhe.net/~aredridel/projects/ruby/ruby-inotify.html
[The Ruby Way](http://rubyhacker.com/) is a pretty decent book that shows off a lot of good rubyisms.
Your version also terminates on a 'q'. If you notice in the original version, word[i] is set, and then i is incremented, word[i -1] is never read again. I assume this is an obo error but I'm surprised no one noticed yet.
Don't ask in #ruby, ask in #ruby-lang (the _official_ ruby channel). We're happy to help. Many of the most experienced rubyists don't even bother to join #ruby. P.S. the code they pointed you at absolutely sucks for the same reasons why you wouldn't write it that way in C. P.P.S. the code you started with isn't a good candidate to really see ruby shine. Just stick to it and you'll come around.
What helped me hone my ruby skills writing code, and iterating on it. Doing exactly what you're doing here by asking for people to improve your code, but do it yourself. One way of measuring whether you're doing it right when it is concise and too the point; you don't have anything you don't need. Become familiar with the standard library, especially for Array, Hash, and what they share in Enumerable.
but then you throw all portability out the window. This is why autotest does something similar to filewatcher.
apparently, the first rule of comp.lang.ruby is never talk about comp.lang.ruby call me a rule breaker. check out the [ruby quiz](http://groups.google.com/group/comp.lang.ruby/search?group=comp.lang.ruby&amp;q=quiz&amp;qt_g=Search+this+group). it's fun and stimulates your smalltalk neurons.
I use FSSM for this already - cross-platform and not resource intensive at all. http://github.com/ttilley/fssm
I'd like to plug my [rb-inotify](http://github.com/nex3/rb-inotify) library. It's also an inotify wrapper, but with a nicer API and using FFI so nothing needs to be compiled (and it works on jRuby and Rubinius).
FSSM is excellent. It uses native backends where possible, unlike this -- currently inotify on Linux and fsevents on OS X -- and it has a much more robust polling backend.
Thanks, I was looking for something like this. My goal is to do a quick script to "sync/version" file automatically between multiples computers (kind of like Dropbox) using Git.
comp.lang.ruby or the ruby-talk mailing list. They're the same thing.
A fox-alien holding a pet ham?
The File System State Monitor gem (fssm) uses FSEvents on MacOS (with ruby 1.8), Inotify on GNU/Linux, and polling anywhere else, so it seems to be perfectly cross-platform. It not only handles updates (like filewatcher), but also detects creates and deletes in folders. Besides the API uses blocks and looks good. The rb-notify (gem) has a very nice API, but seems to be linux and jruby only, and I use a Mac? If I knew about the 'fssm' or 'rb-notify' gems this morning, I would not have created the 'filewatcher' gem today. The filewatcher is a minimal, pure ruby, solution for detecting changes in files by using polling. It meets my needs, and I will still continue to use it. After gems started beeing hosted on github.com and gemcutter.org, they stopped beeing registered in the rubyforge project tree, AKA The Trove Software Map. What's missing is a proper directory of rubygems, with a wiki like system for maintaining categories (ontology). It would have been nice if the directory could display number of downloads on gemcutter and number of forks on github.
rb-inotify is specifically a wrapper for inotify on Linux. It doesn't attempt to be cross-platform. It's what FSSM uses for inotify support on Linux.
Here: [Why's Poignant Guide to Ruby](http://mislav.uniqpath.com/poignant-guide/). 
Fraudulent trolls at that.
Learning exactly how much more like C (and how much more like smalltalk (and how much more like haskell (and how much more like python (and how much more like lisp (...)))))) is the real trick.
I *do not* like InfoQ's interface. Direct video link [here](http://flv.thruhere.net/interviews/09-nov-matzyukihiro.flv).
And your haml gem uses fssm to auto-compile sass files when using the --watch option. I didn't discover fssm because i googled for things like 'detect file changes monitor ruby' not 'monitor file system ruby'. The description found http://github.com/ttilley/fssm could be extended, but I still feel the world needs a directory for rubygems. I would probably have found fssm right away if it was categorized under 'file utilities'. 
Too creepy
I'm working on a piece of logic that I would like to express on the server as well as in the browser. Something like validating a form where there must be certain logical relationships between the elements based on what has already been entered. So... If I can write the logic once and somehow end up with both Ruby and with Javascript, I can write the logic just once and not have to worry about making sure that two pieces of code written in different languages have the same functional behaviour. I don't need to reproduce everything in Ruby, obviously, and one simplification might be to port a single general-purpose library like Functional javascript to Ruby. Does anyone have experience with RubyJS? Can anyone point me to an existing project using RubyJS? Are there alternatives I should consider? Thanks in advance...
There is also [Red](http://github.com/backtik/red), which I had better luck with, but it is not IE compatible, so be prepared to do some reworking on the client end.
Thanks for the link. I'll experiment with it. As I said, I'm looking for a way to write some fairly simple code that runs in both languages, so this ought to be interesting...
The company I work for has a voip API in private beta right now. Not only does it work with ruby it is written in ruby. If anyone wants an invite you can message me or go to beta.Teliax.com
Hey man, just wondering what CMS you settled on? I want to use Rails and am looking into BrowserCMS now. Really don't want to have to use PHP if I can avoid it, due to the cognitive performance hit of having to task-switch between yet another language.
I have installed and played briefly with all of them. I really can't say that I can reccomend any of them over some of the more advances PHP ones. BrowserCMS is decent but you have to be a rails programmer to use it. Refinery is suitable for non programmers but it does not support multiple sites and is pretty limited. Comatose is decent if all you want is to write pages in textile (it's very lightweight). It does nothing else, you have to code your own. There is nothing like drupal, silverstripe, or MODx out there in rails land. Not even close.
I suppose the best solution is to use inotify/fsevents when available, and fall back to the portable busy-wait solution if everything else fails.
If you add in support for focused Shoulda tests (a la Command-Shift-R) I will love you forever. Upvoted all the same. :]
so, in the end, we'll realize there was never really any 'comp.lang.ruby' and that it was actually just US the whole time, coding away in 'C'.... ....mind...blown....
simply a ruby gem.
Can't believe no one suggested [Ruby Best Practices](http://www.amazon.com/gp/product/0596523009?ie=UTF8&amp;tag=jermca-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596523009). It's basically a whole book about this sort of thing: 
There's a good chance this will be very useful to me. Thank you!
I'm brand new to this, and while it works, the output is "small" and tucked into the corner. I'm a bit confused by HAML. 
HAML is HTML. On the h1 tag add a "style" attribute that controls the size and positioning. If the site gets more complicated than that one page, set it up with proper HTML and CSS.
how do i add a style attribute? im not sure where that would go because it looks different. could you post an example?
 require 'rubygems' require 'sinatra' require 'haml' get '/rand/*to*/' do first = params[:splat].first.to_i last = params[:splat].last.to_i @r = rand(last) + first haml '%h1{:style =&gt; "font-size: 50px; text-align: center;"}= @r' end
thank you :)
No. split() returns an array always, it just so happens that 99% of the time the array contains strings. It's still always 100% of the time an array, so no surprise there. 
It does get set to true the first time, but subsequent calls to this same statement will not affect @use\_new\_rrvc because of the lazy assignment ||= what you probably want is something like so: def use_new_rrvc @use_new_rrvc ||= false @use_new_rrvc = !@use_new_rrvc end 
You can always use `erb` instead of `haml` to write something closer to HTML: erb '&lt;h1 style="font-size: 50px; text-align: center;"&gt;&lt;%= @r %&gt;&lt;/h1&gt;'
If anything, what's wrong with ... Dir.entries( dirname ) ?
If the gem doesn't work you can checkout sinatra from github and instead of doing 'require "sinatra"' you will require the file sinatra.rb inside the directories you checked out
i could try that
the dirname is a web address, and it will not allow me to do that
Im in your railz fixin' ur codez
It might help if I knew what OMG was.
Just take a look a the diff of a recent file on there. It should all start making sense to you.
Oh, heh, got it. :)
For some reason, [this seems related](http://www.theonion.com/content/node/28975).
Funny, we just converted a .net/asp app to rails app, and did it in minutes thanks to heroku. The reality is that the site was all static html. So we moved it to public of a new rails project, fixed up the routes in rails. Pushed it to git, and then push it to heroku. I actually like heroku so much, I wish I could do my own servers the same.
But you can: http://github.com/mislav/git-deploy
Not free but you can try this: http://blog.webbynode.com/rapid It will deploy your app and still give you full root access starting at $15/mo.
You kinda can, if you use VPSes from Webbynode. Check my reply to this post.
"I just want to upload a ruby script and be able to run it :P Thanks" You pretty much described exactly what Heroku does.
Yeah, it doesn't get much simpler than Heroku, actually.
Heroku requires me to do some stuff with Git and create an AppController or something? And I need to bootstrap? I'm not sure, I'm just confused :)
I mean, it's like literally 4 steps: http://blog.heroku.com/archives/2009/3/5/32_deploy_merb_sinatra_or_any_rack_app_to_heroku/
Oh, I misunderstood. You'll need to turn on directory browsing on that server and visit the url (say with Net::HTTP). That will show you the contents of the directory, which you can then list and follow the subdirectories recursively. If you can't turn on directory browsing on the web server, then I'm afraid I don't know of any other options.
For a minute there I thought Rails 3 was released...
Rumor has it that the first beta drops tonight or tomorrow.
Yeah, I was scared for a minute there, I need to get my plugin running under it before they release the full version.
yes, i know it's sensitive to spam, but I never intended it not to be. :) FINALLY got heroku working today, and so far loving Ruby.
\*refreshrefreshrefresh\* hehe
my problem was with RSA keys. ive since figured it out. now i just need to learn how to update my code without redoing all those steps. 
I've never used Sinatra or HAML, but this syntax: "@@ layout" looks wrong to me; should be no space: @@layout 
thanks for your help :) but that's actually the syntax. without a space, a static variable is created. I think the @@ is like a label type thing. I have other projects that use HAML, which work, so there must be a space there.
Huh, weird. I don't like DSL syntax like that (that could be mistaken for another language feature). And to be accurate, it would be a class-var, as opposed to one @ which is an instance-var. :) "Static" to me brings back horrible memories of Java. 
hehe sorry :P im in AP Computer Science (Java) now, so that's why I used the term. still learning ruby :)
Works fine on my Mac OS 10.5 and Debian 4.0, sorry I can't be more help. Sinatra 0.10.1 Haml 2.2.17
perhaps it's an indentation error? i have no idea what's wrong.
The code I copied from codepad had whitespace mixed with tabs, and failed to run. But it was a different error (explicitly saying you can't mix whitespace with tabs). If you send me your email address privately through reddit I'll email you the corrected .rb file, it's worth checking that this isn't your problem so you could at least scratch it from your list of possibilities.
Wait, is it a hit counter?