Why would you want to do this?
Why no mention of SecureRandom?
rand(rand(rand(rand(rand(rand(9999999999)
Oh I see, awesome, thanks for the explanation :)
This is downright irresponsible, \`rand\` does not deliver cryptographically secure results and is thus unfit for use in encryption, despite them claiming it. Use \`SecureRandom\`, which uses the cryptographically secure random number generator provided by the operating system to generate sufficiently unpredictable numbers.
Unless I'm missing something, that means we'll have coroutines support very similar to go functions. I'm excited about that, it's the concurrency primitive I was hoping for in Ruby.
Yes that's right - many lightweight threads that can be scheduled in parallel. And as a bonus TruffleRuby has some incredible work on automatically synchronising access to shared objects without synchronising them if they're only used from a single thread.
Because syntax highlighting in vim chokes up on my 3.5k line heredoc so I thought that I would move it into `__END__`.
not for nothing....a 3.5k line heredoc?
Aside from not talking about the security aspects of RNG... What does this blog post cover that has not been covered ad nauseam for years? I didn't think the Internet needed another Ruby RNG for Dummies article. Guess AppSignal's marketing folks needed fluff for their blog.
Sounds like the real problem is your 3.5k line heredoc
I was actually surprised how many breaking API changes there were between 5.0 and 5.2. Definitely not semver.
I don't think they really do say `rand` is suitable for encryption. They say that one purpose for random numbers in general is encryption, and then they describe some ways in Ruby to get random numbers in general for any purpose. Most of the article is about deterministic sequences of random numbers, and statistical distributions, which definitely aren't anything to do with encryption. I think you're being a bit harsh.
Don't think we claimed these numbers are suitable for crypto purposes, just that one of the purposes of random numbers in general is crypto. That being said: Not covering \`SecureRandom\` is an oversight and we'll update the article.
Good points being made here on not covering \`SecureRandom\`, we'll update the article to include it.
Seems like recently Ruby's gotten a bad case of the "pass a bunch of flags" rather than being opinionated in their APIs. It makes me uneasy.
I like it.
Yeah, Rails doesn't use SemVer. They call it &gt;... a shifted version of semver https://guides.rubyonrails.org/maintenance_policy.html
So what is the catch ?
I'm not sure what you're referring to? Do you think there is some technical limitation why we wouldn't be able to do this? Go, for example, also has M:N parallel scheduling of lightweight threads, so it's not anything new. Automatic synchronisation is new. There's a paper on it if you want the gritty details http://ssw.jku.at/General/Staff/Daloze/thread-safe-objects.pdf - the guards are very lightweight.
It's a weak inference, but I definitely see where that was not the intent but could be perceived that way.
\`SecureRandom.random\_number\` is all you'll ever need.
 string.hash 
The only issue is that the block-chain files are already generated and need to be verified with the given hash rules or the verification will fail.
Haven‚Äôt tried it, but my guess is that it still produces the same sequence each time, therefore not improving on rand(). 
It doesn't, rand() takes an argument as an integer which is the end of a range starting at 0 from which the random number is picked, if you don't specify an argument it just uses the 0 to the largest number so passing rand() through rand() makes it more random than specifying a range
The difference between 5.0 and 5.1 is truly awful with far to many breaking changes between them. 5.1 to 5.2 isn't so bad.
You can't because erb uses `eval` and eval doesn't understand `__END__`: $ cat t.rb eval &lt;&lt;-EVAL puts DATA.read __END__ stuff EVAL __END__ other When you run this ruby ignores the `__END__` inside the eval string and uses the one at the end of the file: $ ruby t.rb other 
You can take advantage of sum in the enumerable module to eliminate intermediary variables def generate_hash(string) sum = string.unpack('U*').sum { |x| (x**2000) * ((x + 2)**21) - ((x + 5)**3) } (sum % 65_536).to_s(16) end
I think perhaps what /u/genuinejedi is getting at, and I'm somewhat curious about as well, are what the side effects are. For examples there are various issues brought up here, which propose the initial bits of a similar concept in MRI (perhaps many of these do not apply): https://bugs.ruby-lang.org/issues/13618 Maybe the other question goes directly to the tech article like from your post (https://aardvark179.github.io/blog/fibers.html/), the overhead seems to be fairly unknown at the moment. Given, it's early and we can't expect blazing performance of M:N fibers, but it's also worth having a concept of the intended performance which tends to follow the use case. i.e. "Designed to use on occasion" tends to have less mind-share involved in improving performance and less ability to push against conflicting interests than "Designed to be used at a huge scale". To compare to Go, the language implementation is generally willing to make sacrifices to improve performance of go funcs because that is the core concurrency primitive of that language, It's unclear if Loom has the weight to do the same. 
There's `Object#display`, though it doesn't print the backtrace: /tmp &gt;ruby -e'StandardError.new("some shit").display($stderr); puts' some shit Guess you can do class Exception def display(out = $&gt;) out.write full_message nil end end StandardError.new("some thangz").display($stderr) But yeah... 
Only the data section defined in `$0` (the file passed to `ruby`) can be accessed: /tmp &gt;cat a.rb class A end puts "A: #{DATA.read}" __END__ class A /tmp &gt;cat b.rb require "./a" __END__ MAIN /tmp &gt;ruby b.rb A: MAIN
Most of the stuff on here seems to be regurgitations of what one could find by RTFMing. 
I think you should be able to take advantage of the fact that (x+y) % 65_536 == (x % 65_536) + (y % 65_536) So there might be more efficient versions of (x**2000) * ((x + 2)**21) and ((x + 5)**3) that ignore the most significant digits, because you only care about the least significant digits which impact % 65_536. Of course, the bottom line is that ruby running on a PC is not going to be very efficient no matter what you do. You are probably burning more dollars in use of your processor than you'll ever find in block-chain.
you can use select, partitition, or even a map
Would you mind writing out the code?
Can he/she/they do your homework? Read docs for select, max and min that should be enough to get a satisfactory answer.
Sorry to bother you, but I‚Äôve spent the past hour and still have no concrete answer. The closest I‚Äôve gotten was doing an absolute value, but that only works for one result and not both. 
ints=[1,-1,2,5,6,-8,-9] positives=ints.select{|i| i &gt; 0 } negatives=ints.select{|i| i &lt; 0 }
I‚Äôve tried that, just multiple outputs. I‚Äôm looking for a singular output. Sorry. Thanks for the help though!
adding code you have tried helps in such cases - it shows that you have tried something yourself and not asking complete solution.. it also allows a chance offer suggestions on your approach, spot where you went wrong, etc
problem is... I have no code because I do not know what function to use
If you mean "finding positive number closest to zero &amp; negative number closest to zero": x.select(&amp;:positive?).min x.select(&amp;:negative?).max (requires ruby 2.3.0 or above)
`x.min { |a, b| a.abs &lt;=&gt; b.abs }`
Did you get the job?
RemindMe! 3 years
RemindMe! 1095 days
RemindMe! 365 days
Are you sharing links like this now to get around some sort of spam filter?
Poor benchmark - surely the more interesting question is whether it's any quicker for the success case. Are you really that limited by how fast you can fail to parse Integers? rescue FAIL 275.332k (¬± 0.7%) i/s - 1.386M in 5.033049s kwarg FAIL 1.034M (¬± 0.2%) i/s - 5.180M in 5.008666s Comparison: kwarg FAIL: 1034190.2 i/s rescue FAIL: 275331.9 i/s - 3.76x slower rescue OK 4.249M (¬± 1.1%) i/s - 21.278M in 5.009007s kwarg OK 988.686k (¬± 0.2%) i/s - 5.002M in 5.058963s Comparison: rescue OK: 4248553.6 i/s kwarg OK: 988686.2 i/s - 4.30x slower It makes the happy-path slower more than it makes the exceptional case faster.
This gem computes the distance between two latitudes/longitudes using the famous Haversine formula: https://github.com/kristianmandrup/haversine If I were querying a database for results sorted by distance, I would scope the query based on an initial distance from the "nearby location" - basically, a box of X miles across/tall which I want results from. Then I would get those results and sort them by Haversine in Ruby.
This is 100% self-promotion, which is against Reddit‚Äôs own rules‚Ä¶ *sigh* #spam
Is happy-path slower even when the argument is not used?
FYI https://github.com/grosser/single_cov seems very similar ... does not have the fancy inline-code print-out, but seems to overall do the same.
Thanks for sharing @grosser! single\_cov seems to solve the same kind of problem in a slightly different way. It looks like it doesn't need to parse coverage reports or source code like undercover, so it's probably much faster to run
I meant that, sorry. I was commenting on this specific account, **only** posting links to their website‚Ä¶ üôè
Pfft... I'm guessing you never upgraded a rails app from v1 --&gt; v2, or from v2 --&gt; v3 ;)
Another useful coverage tool is Dan Meyer's Coverband [https://github.com/danmayer/coverband](https://github.com/danmayer/coverband)
you are correct
There's literally decades of existing work on this subject, don't roll your own. I would suggest you use Digest::SHA256. It's optimized in C, allows you to stream in data so it's memory efficient and available everywhere. [https://stackoverflow.com/questions/4233113/what-checksum-algorithm-should-i-use](https://stackoverflow.com/questions/4233113/what-checksum-algorithm-should-i-use)
This is a very bad idea. Ruby's \`hash\` is designed for in-memory objects in hashtables, not designed for checksumming. It is not stable across process restarts. \`\`\` $ irb \&gt; "foo".hash =&gt; -77716747987321742 $ irb \&gt; "foo".hash =&gt; 457663462166757194 \`\`\`
This is my require file: `require 'active_file'` `require "fileutils"` `require File.expand_path ('lib/livro')` `require File.expand_path('lib/biblioteca')` `require File.expand_path('lib/loja_virtual')` as you can see i added `require "fileutils"` but the error persists. If i let just the "fileutils" the code runs ok, but when i add my thing the error kills me. (I'm Brazilian so my I'll commit a lot of mistakes in english)
Are you sure one of the other files doesn't have `require 'FileUtils'` in it?
In addition to /u/gray_-_wolf's suggestion, I just realized that you're using ruby 2.5 which starts the ["gemification" of the stdlib](https://bugs.ruby-lang.org/issues/5481). So, run `gem list` to see `fileutils` is listed. If it is, check the version as [there](https://github.com/ruby/fileutils/issues/22) are [some issues](fileutils-require-an-unavailable-ruby-version) with the latest version (1.1.0). You can try downgrading the `fileutils` gem to the previous version with `gem uninstall fileutils &amp;&amp; gem install fileutils -v 1.0.2`. Though when I couldn't reproduce the error on a ruby 2.5 docker image, and attempting to uninstall `fileutils` would throw an error, however I was still able to install the previous version with just `gem install fileutils -v 1.0.2` and everything still worked, so you can give that a try to see if thats what is causing the issue and just have both versions installed. But since I can't reproduce it in fresh container, you might want to double check there are no `require 'FileUtils` in any other files first, as this works with no issues: $ docker run -it --rm ruby:2.5-alpine /bin/sh / # gem list *** LOCAL GEMS *** ... omitted fileutils (default: 1.1.0) ... omitted / # irb irb(main):001:0&gt; require 'fileutils' =&gt; true irb(main):002:0&gt; quit / # gem install fileutils -v 1.0.2 Fetching: fileutils-1.0.2.gem (100%) Successfully installed fileutils-1.0.2 1 gem installed / # gem list *** LOCAL GEMS *** ... omitted fileutils (default: 1.1.0, 1.0.2) ... omitted / # irb irb(main):001:0&gt; require 'fileutils' =&gt; true 
So what is it? Autocomplete/IDE extensions for ruby? [This is the only thing](https://code.visualstudio.com/docs/extensions/example-language-server) that seemed related when I googled "language server".
Using MySQL now.
Using MySQL now.
You should be able to do this in mysql 
It not works for me. I added `reverse_geocoded_by` to table's model in Rails: ``` reverse_geocoded_by :latitude, :longitude ``` When I search and check the result, got all data without sorted. So didn't fit geo feature.
I do not use MySQL, but this is something you can easily Google. How to sort by geospatial distance mysql. Or how to calculate geospatial distance between two points mysql.
Thank you. I found this: https://ja.scribd.com/presentation/2569355/Geo-Distance-Search-with-MySQL
Is the name `Orbacle` mocking Oracle? (sorry, can't help)
Yes, exactly. This is extension for simple editors (like vim, emacs, atom) giving them IDE-like possibilities. Currently I'm focusing on smart jump-to-definition, but autocompletion is also on the list :)
That's not going to work, assuming you're using the [structured query parser](https://docs.aws.amazon.com/cloudsearch/latest/developerguide/searching-compound-queries.html), Cloudsearch only supports search within bounds. That's not the reason what you're doing won't work though, the `near` method is a scope on an `ActiveRecord::Relation` added by the `geocoder` gem, and the `search` method is added by `nazrin` to act as a kind of `ActiveRecord::Relation` for Cloudsearch queries, so you're essentially scoping the SQL relation then discarding it and switching to a Cloudsearch relation. To query within bounds in Cloudsearch you'd need to compose a structured query and pass it to the `query` method chained onto the `nazrin relation`, something like `location_field:['north_lat,west_lng','south_lat,east_lng']` (yes, Cloudsearch uses `NW,SE` bounds, which is weird), i.e. `location:['90,-180','-89.999,179.999']`, I'd suggest using something like the [csquery](https://github.com/marcy/csquery) gem to build the search term you pass to nazrin's `query` method. P.S. I hate Cloudsearch and don't envy you, good luck!
Sorry for not responding sooner! This isn't bad. You've got the import part down, which is that the logic works. One thing to keep in the back of your mind as you develop these skills is that Ruby is great because it enables you to write extremely readable code. There are three keys to that: 1. simplifying your logic to remove intermediate steps, 2. extracting complex operations into their own, well-named methods and classes, and 3. learning language conventions and idioms that allow you to express simple actions clearly in few words. Here's my take on this assignment: def print_supplies_list(supplies_by_season) supplies_by_season.each do |season, supply_hash| puts "#{season.capitalize}:" supply_hash.each do |holiday, supplies| puts " #{snake_case_to_title_case(holiday)}: #{supplies.join(', ')}" end end end def snake_case_to_title_case(phrase) phrase.to_s.split('_').map(&amp;:capitalize).join(' ') end Note how I renamed some variables to more clearly express the data they represent. `holiday_hash` is now `supplies_by_season`, and `data` is now `supply_hash`. I also extracted your logic for reformatting `:fourth_of_july` as `'Fourth Of July'` into its own method. Importantly (to me), this allows me to reduce the `supply_hash.each` block to a single line. This kind of simplification is the essence of readability. One little trick I threw in there is I rephrased `.map { |w| w.capitalize }` as `.map(&amp;:capitalize)`. This bit of trickery is very handy, but exactly what's going on under the hood is rather advanced. Read up on it!
check out this blog you might find the answer that you are looking for [https://www.icicletech.com/blog/top-ruby-frameworks-to-speed-up-web-development](https://www.icicletech.com/blog/top-ruby-frameworks-to-speed-up-web-development)
&gt; passing rand() through rand() makes it more random than specifying a range No. I don't think you understand what it means to be "more random". The key word you need to be aware of is **entropy** - i.e. How complex is the "initial seed data" that's used to generate the final result. If haven't increased the complexity of this initial seed data, then the final result is *not* more random. For example suppose you have one password hashing algorithm that does: ``` sha512(input) ``` And another that does: ``` sha512(sha256(base64(input.reverse))) ``` Does the second version store a *more random* hashed result? **No**. Because the entropy - in this case, the `input` - is identical in both versions! Try setting the initial seed value yourself, and you'll get identical results to me here: ``` [1] pry(main)&gt; srand 1234 =&gt; 330340344382533425701744850174345217260 [2] pry(main)&gt; rand(rand(rand(rand(rand(rand(rand(rand()))))))) =&gt; 0.8018721775350193 [3] pry(main)&gt; rand(rand(rand(rand(rand(rand(rand(rand()))))))) =&gt; 0.5611961860656249 [4] pry(main)&gt; rand(rand(rand(rand(rand(rand(rand(rand()))))))) =&gt; 0.3688240060019745 [5] pry(main)&gt; rand(rand(rand(rand(rand(rand(rand(rand()))))))) =&gt; 0.43617342389567937 [6] pry(main)&gt; rand(rand(rand(rand(rand(rand(rand(rand()))))))) =&gt; 0.9093159589724725 ``` The initial seed (the **entropy**) is set by `1234`. It doesn't matter whether you call `rand` once or a billion times; you're not adding any more entropy, and therefore *not* making it any "more random".
Is it possible interact with rails runtime like robe-mode for emacs? robe-mode can autocomplete and go to definition methods that defined in booting. Under the hood it uses pry-doc and show-source from pry gem.
Something like robe is doing (interacting with rails/ruby runtime) is on my plans, but later in priority list. Orbacle is trying to solve the problem from a little bit different angle (more static analysis). Interacting with runtime grants you more comprehensive list than static analysis (because of lot of metaprogramming used in rails for example), but it doesn't help much (AFAIR - someone can correct me if I'm wrong) with direct jump to the \_right\_ definition (for example, when you have expression \`x.foo\`, you need to know which class \`x\` is, to jump to correct definition of \`foo\`). So, I would like you to jump immediately to the correct definition, instead of providing you a list of 5 possible ones (obviously, that's impossible in some polymorphic cases, and list sometimes IS required, but I would like these results to be as accurate, as possible).
This is my active\_file.rb content: `# coding utf-8` `require "FileUtils"` `require "active_file/version"` `module ActiveFile` `def save` `@new_record = false # seta objeto como registro existente` [`File.open`](https://File.open)`("db/revistas/#{@id}.yml", "w") do |file|` `file.puts serialize` `end` `end` `def destroy(id)` `unless @destroyed or @new_record` `@destroyed = true` `FileUtils.rm "db/revistas/#{@id}.yml"` `end` `end` `module ClassMethods` `def field(name)` `@fields ||= []` `@fields &lt;&lt; name` `get = %Q{` `def #{name}` `@#{name}` `end` `}` `set = %Q{` `def #{name}=(valor)` `@#{name}=valor` `end` `}` `self.class_eval get` `self.class_eval set` `end` `def find(id)` `raise DocumentNotFound, "Arquivo db/revistas/#{id} nao encontrado.", caller unless File.exists?("db/revistas/#{id}.yml")` `deserialize "db/revistas/#{id}.yml"` `end` `def next_id` `Dir.glob("db/revistas/*.yml").size + 1` `end` `def method_missing(name, *args, &amp;block)` `field = name.to_s.split("_").last` `super if @fields.include? field` `load_all.select do |object|` `object.send(field) == args.first` `end` `end` `private` `def load_all` `Dir.glob('db/revistas/*.yml').map do |file|` `deserialize file` `end` `end` `def deserialize(file)` `YAML.load` [`File.open`](https://File.open)`(file, "r")` `end` `end` `def self.included(base)` `base.extend ClassMethods` `base.class_eval do` `def initialize(parameters = {})` `@id = self.class.next_id` `@destroyed = false` `@new_record = true` `parameters.each do |key, value|` `instance_variable_set "@#{key}", value` `end` `end` `end` `end` `private` `def serialize` `YAML.dump self` `end` end
There you have it, change second line to `require 'fileutils'` and it should work (well assuming there are no other bugs). Also, please learn how to paste a code on reddit, this is not very readable. if you just prefix lines with 4 spaces it will look like this which is imho much better so again, 4 spaces before each line :)
Done :) https://keith-mifsud.me/projects/jekyll-target-blank
Thanks for your help :) https://keith-mifsud.me/projects/jekyll-target-blank
üëç
Visit Asia sometime. They cough everywhere without a care who or what they‚Äôre coughing on. 
OH it worked, thank you so much and i'm sorry for my bad post, I'm still learning. But i found another error. Can you help me, please? `Traceback (most recent call last):` `2: from loja_virtual.rb:6:in \`&lt;main&gt;'` `1: from /usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require'` `/usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja_virtual/lib/lib/livro (LoadError)`
OH it worked, thank you so much and i'm sorry for my bad post, I'm still learning. But i found another error. Can you help me, please? `Traceback (most recent call last):` `2: from loja_virtual.rb:6:in \`&lt;main&gt;'` `1: from /usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require'` `/usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja_virtual/lib/lib/livro (LoadError)`
OH it worked, thank you so much and i'm sorry for my bad post, I'm still learning. But i found another error. Can you help me, please? *Traceback (most recent call last):* *2: from loja\_virtual.rb:6:in \`&lt;main&gt;'* *1: from /usr/local/lib/site\_ruby/2.5.0/rubygems/core\_ext/kernel\_require.rb:59:in \`require'* */usr/local/lib/site\_ruby/2.5.0/rubygems/core\_ext/kernel\_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja\_virtual/lib/lib/livro (LoadError)*
OH it worked, thank you so much and i'm sorry for my bad post, I'm still learning. But i found another error. Can you help me, please? Traceback (most recent call last): 2: from loja\_virtual.rb:6:in \`&lt;main&gt;' 1: from /usr/local/lib/site\_ruby/2.5.0/rubygems/core\_ext/kernel\_require.rb:59:in \`require' /usr/local/lib/site\_ruby/2.5.0/rubygems/core\_ext/kernel\_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja\_virtual/lib/lib/livro (LoadError)
I'm a junior Rails developer (~1yr. formal experience). In the job hunt for my current position, I applied to a lot of of listings on boards like angellist, stackoverflow jobs, remoteok, weworkremotely, whoishiring, jobs.ruby.tw (I'm located in Taiwan), and the like. I put a lot of effort into a relatively small number of high-quality applications, and didn't get a lot of responses. (FWIW, I had never heard of toprubyjobs, though I'm not sure my chances would have been better there, either.) In the end, I wound up finding my current position through someone else's post on /r/rails. If I had to do it again, I'd probably skip job boards entirely. As a junior developer looking for a remote position, my experience on job boards was time-consuming and mostly fruitless, though I'm not sure I'm the kind of candidate that's going to bring companies flocking to your site ;)
hn
Wtf is going on in this article? Why would you do _any_ of these things? .touch is a leaky abstraction? The author doesn‚Äôt know how to get an ID off of a created model? He is worried about swapping storage engines for some unknown reason? Of course it‚Äôs going to be a big deal to go fro Postgres to Mongo, totally different use cases, different tools. This reads like the author does not have experience with running rails apps larger than a toy project. 
There is only one [SQL on Rails](https://www.youtube.com/watch?v=Es9-l1up3r8)
1. again, learn how to format code... 4 space before each line.. please 2. this one is easy, it cannot find the file `/home/zeka/Documentos/loja_virtual/lib/lib/livro`. Does the file exist? My guess is that it should probably be `/home/zeka/Documentos/loja_virtual/lib/livro`. Can you post `loja_virtual.rb` here? It's nice chance to try formatting it correctly this time :)
So this guy is complaining that he manually inserts database-specific SQL code to his AR models and he then can't just swap databases?
ok My file `/home/zeka/Documentos/loja_virtual/lib/loja_virtual.rb` `require "fileutils"` `require 'active_file'` `require File.expand_path ('lib/livro')` `require File.expand_path("lib/biblioteca")` `require File.expand_path("lib/loja_virtual")` now `/home/zeka/Documentos/loja_virtual/lib/livro.rb` `# encoding: UTF-8` `class Livro` `attr_accessor :valor #Defini√ß√£o de um m√©todo de leitura e de escrita.` `attr_reader :categoria` `def initialize (autor, isbn = "1", numero_de_paginas, valor, categoria)` `@autor = autor` `@isbn = isbn` `@numero_de_paginas = numero_de_paginas` `@valor = valor` `@categoria = categoria` `end` `def to_s` `"Autor: #{@autor}, Isbn: #{@isbn}, P√°ginas : #{@numero_de_paginas}, Categoria #{categoria}"` `end` `end` `biblioteca = []` `teste_e_design =` [`Livro.new`](https://Livro.new)`("Mauricio Aniche", "123454", 247, 60.9, :testes)` `web_design_responsivo =` [`Livro.new`](https://Livro.new)`("T√°rcio Zemel", "452565", 189, 67.9)` `biblioteca &lt;&lt; teste_e_design` `biblioteca &lt;&lt; web_design_responsivo` when i try to compile loja\_virtual.rb this error appears: `Traceback (most recent call last):` `2: from loja_virtual.rb:12:in \`&lt;main&gt;'` `1: from /usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require'` `/usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja_virtual/lib/lib/livro (LoadError)`
ok My file `/home/zeka/Documentos/loja_virtual/lib/loja_virtual.rb` `require "fileutils"` `require 'active_file'` `require File.expand_path ('lib/livro')` `require File.expand_path("lib/biblioteca")` `require File.expand_path("lib/loja_virtual")` now `/home/zeka/Documentos/loja_virtual/lib/livro.rb` `# encoding: UTF-8` `class Livro` `attr_accessor :valor #Defini√ß√£o de um m√©todo de leitura e de escrita.` `attr_reader :categoria` `def initialize (autor, isbn = "1", numero_de_paginas, valor, categoria)` `@autor = autor` `@isbn = isbn` `@numero_de_paginas = numero_de_paginas` `@valor = valor` `@categoria = categoria` `end` `def to_s` `"Autor: #{@autor}, Isbn: #{@isbn}, P√°ginas : #{@numero_de_paginas}, Categoria #{categoria}"` `end` `end` `biblioteca = []` `teste_e_design =` [`Livro.new`](https://Livro.new)`("Mauricio Aniche", "123454", 247, 60.9, :testes)` `web_design_responsivo =` [`Livro.new`](https://Livro.new)`("T√°rcio Zemel", "452565", 189, 67.9)` `biblioteca &lt;&lt; teste_e_design` `biblioteca &lt;&lt; web_design_responsivo` when i try to compile loja\_virtual.rb this error appears: `Traceback (most recent call last):` `2: from loja_virtual.rb:12:in \`&lt;main&gt;'` `1: from /usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require'` `/usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja_virtual/lib/lib/livro (LoadError)`
ok My file: `/home/zeka/Documentos/loja_virtual/lib/loja_virtual.rb` `require "fileutils"` `require 'active_file'` `require File.expand_path ('lib/livro')` `require File.expand_path("lib/biblioteca")` `require File.expand_path("lib/loja_virtual")` now /home/zeka/Documentos/loja\_virtual/lib/livro.rb `# encoding: UTF-8` `class Biblioteca` `attr_reader :livros` `def initialize` `@livros = []` `end` `def adiciona(livro)` `@livros &lt;&lt; livro` `end` `end` `biblioteca = Biblioteca.new` `teste_e_design = Livro.new("Mauricio Aniche", "123454", 247, 60.9, :teste_e_design)` `web_design_responsivo = Livro.new("T√°rcio Zemel", "422665", 189, 70.9, :web_design)` `hash = {"123454"=&gt; teste_e_design,` `"452565"=&gt; web_design_responsivo}` `p hash["123454"]` `#popula a biblioteca` `for livro in biblioteca.livros do` `p livros.valor` `end` when i try to compile loja\_virtual.rb this error appears: `Traceback (most recent call last):` `2: from loja_virtual.rb:12:in \`&lt;main&gt;'` `1: from /usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require' /usr/local/lib/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja_virtual/lib/lib/livro (LoadError)`
**ok** **My file:** */home/zeka/Documentos/loja\_virtual/lib/loja\_virtual.rb* *require "fileutils"* *require 'active\_file'* *require File.expand\_path ('lib/livro')* *require File.expand\_path("lib/biblioteca")* *require File.expand\_path("lib/loja\_virtual")* **now** */home/zeka/Documentos/loja\_virtual/lib/livro.rb* *# encoding: UTF-8* *class Biblioteca* *attr\_reader :livros* *def initialize* *@livros = \[\]* *end* *def adiciona(livro)* *@livros &lt;&lt; livro* *end* *end* *biblioteca = Biblioteca.new* *teste\_e\_design = Livro.new("Mauricio Aniche", "123454", 247, 60.9, :teste\_e\_design)* *web\_design\_responsivo = Livro.new("T√°rcio Zemel", "422665", 189, 70.9, :web\_design)* *hash = {"123454"=&gt; teste\_e\_design,* *"452565"=&gt; web\_design\_responsivo}* *p hash\["123454"\]* *#popula a biblioteca* *for livro in biblioteca.livros do* *p livros.valor* *end* **when i try to compile loja\_virtual.rb this error appears:** *Traceback (most recent call last):* *2: from loja\_virtual.rb:12:in \`&lt;main&gt;'* *1: from /usr/local/lib/site\_ruby/2.5.0/rubygems/core\_ext/kernel\_require.rb:59:in \`require' /usr/local/lib/site\_ruby/2.5.0/rubygems/core\_ext/kernel\_require.rb:59:in \`require': cannot load such file -- /home/zeka/Documentos/loja\_virtual/lib/lib/livro (LoadError)*
weworkremotely.com used to be _the_ place to look for a remote ruby job. Since Basecamp sold it, the quality of the jobs there has dropped significantly. There is room in the market there, I think. I think there is also a niche for a job board which is exclusive to select, verified candidates. Promote quality of applicants instead of quantity. Verifying the quality would be the hardest part, maybe through open source contributions or a coding test? Connection vouching? Idk. Hiring is broken from both the applicant and employer end. Connecting good employees with good employers is as hard as ever, especially if you're remote.
I also feel like the author didn't express himself well, but I would like to play devil's advocate here. &gt; Why would you do any of these things? For example, if you call `ActiveRecord::Base.update_all`, ActiveRecord will not update the `#updated_at` column of the updated records; only if you update individual models. And in larger apps you often need to use `.update_all`, so the only way to make sure the `#updated_at` column is always updated is to use triggers. The same for `#created_at` and batch inserts. &gt; The author doesn‚Äôt know how to get an ID off of a created model? I think he does, but he doesn't know how to also get other fields like `#updated_at` and `#created_at` as well. &gt; He is worried about swapping storage engines for some unknown reason? I think he's not actually worried, just wanted to mention that ActiveRecord has this advantage. &gt; Of course it‚Äôs going to be a big deal to go fro Postgres to Mongo, totally different use cases, different tools. I didn't get this either, it sounds very off-topic. &gt; This reads like the author does not have experience with running rails apps larger than a toy project. I think that going off the "ActiveRecord way" happens actually only when larger apps force you to do it, in pet projects you could get away with keeping things simpler.
It seems that the OP should probably be using Sequel instead of ActiveRecord, as it already has the mentioned features. For the safe updating of the `#updated_at` column via triggers there already exists the [sequel_postgres_triggers](https://github.com/jeremyevans/sequel_postgresql_triggers) gem, so you can create the tigger with just: DB.pgt_updated_at(:table_name, :updated_at) The gem also has a trigger template for creating a counter cache, as mentioned in the post. About the `RETURNING`, Sequel already automatically adds `RETURNING *` when creating records, which retrieves all column values that were set on insert, which includes default column values on the database level or values set by triggers. Sequel actually encourages you to use the database (e.g. it has many Postgres-specific functionality), but still allows you not to if you don't want to. So you have the best of both worlds.
&gt;For example, if you call \`ActiveRecord::Base.update\_all\`, ActiveRecord will not update the \`#updated\_at\` column of the updated records; only if you update individual models. And in larger apps you often need to use .update\_all, so the only way to make sure the #updated\_at column is always updated is to use triggers. The same for #created\_at and batch inserts. Sure, \`update\_all\` is a decent example. I'd still rather simply pass \`updated\_at: Time.zone.now\` in with my mass update before resorting to triggers. &gt;I think that going off the "ActiveRecord way" happens actually only when larger apps force you to do it, in pet projects you could get away with keeping things simpler. Agreed. In general if they find themselves fighting ActiveRecord, most developers should take a step back and reassess their schema design. If you need to punch through the abstraction and get dirty with SQL, ActiveRecord gets out of the way pretty easily.
`attr_accessor` is a ruby method which will define a getter and setter for whichever attributes passed: class MyClass attr_accessor :color, :fruit, :count end instance = MyClass.new instance.color = 'blue' instance.color == 'blue'
Ruby is a fully (really fully as you will soon find out) object oriented language. So wether accessors are bad practice or not is more a question for OOP design more than ruby itself. If you wish to read about this here are useful links: https://www.yegor256.com/2014/09/16/getters-and-setters-are-evil.amp.html https://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.amp.html But don‚Äôt let them scare you, they are a legal part of the OOP design. Just use them wisely.
In Ruby you typically avoid \`get\_\` / \`set\_\` names, and instead use \`attr\_accessor :foo\` (where \`foo\` is usually a noun), which defines \`foo\` and \`foo=\` methods. When you are working with data inside your class, you can either directly access the instance variables (\`@foo\` and \`@foo = ...\`) or use the methods (\`self.foo\` and \`[self.foo](https://self.foo) = ...\`). You can even manually define the "reader" (ex: \`def foo\`) / "writer" (ex: \`def foo=(new\_foo)\`) methods if you need to add custom logic to them.
From the description of attrs for individual lines from that file inside the class that reads all the lines from the whole file, it seems to me like a weird conflation of the concepts of an individual fruit count and a collection of all the counts. Here's a quick example of how I would consider doing it, based on the descriptions here without example code or description of how it would actually be used. `class FruitCount` `attr_accessor :fruit, :color, :count` `def initialize fruit, color, count` `@fruit, @color, @count = [fruit, color, count]` `end` `end` `class FruitCountCollection` `attr_accessor :fruit_counts` `def initialize filename` `@fruit_counts = []` `# read file, and for each line create and add to collection like this:` `@fruit_counts &lt;&lt;` [`FruitCount.new`](https://FruitCount.new)`('pear', 'green', 3)` `@fruit_counts &lt;&lt;` [`FruitCount.new`](https://FruitCount.new)`('apple', 'red', 5)` `@fruit_counts &lt;&lt;` [`FruitCount.new`](https://FruitCount.new)`('banana', 'yellow', 2)` `end` `def find_fruit fruit` `@fruit_counts.find{|f| f.fruit == fruit}` `end` `end` `collection =` [`FruitCountCollection.new`](https://FruitCountCollection.new)`('somefile.txt')` `collection.find_fruit('apple').color # red` `collection.find_fruit('banana').count # 2`
From the description of attrs for individual lines from that file inside the class that reads all the lines from the whole file, it seems to me like a weird conflation of the concepts of an individual fruit count and a collection of all the counts. Here's a quick example of how I would consider doing it, based on the descriptions here without example code or description of how it would actually be used. class FruitCount attr_accessor :fruit, :color, :count def initialize fruit, color, count @fruit, @color, @count = [fruit, color, count] end end class FruitCountCollection attr_accessor :fruit_counts def initialize filename @fruit_counts = [] # read file, and for each line create and add to collection like this: @fruit_counts &lt;&lt; FruitCount.new('pear', 'green', 3) @fruit_counts &lt;&lt; FruitCount.new('apple', 'red', 5) @fruit_counts &lt;&lt; FruitCount.new('banana', 'yellow', 2) end def find_fruit fruit @fruit_counts.find{|f| f.fruit == fruit} end end collection = FruitCountCollection.new('somefile.txt') collection.find_fruit('apple').color # red collection.find_fruit('banana').count # 2
There‚Äôs two things to consider here: 1) are you making your attributes public or are they more for private internal use? Instance variables generally should not be accessed outside of an object, although you can of course do that with `instance_variable_[sg]et`, although that‚Äôs usually a really bad idea. 2) are you worried about future modifications? Instance variables can it be overridden, but attributes can be, which can be really useful if you want to override behavior for debugging purposes or if there‚Äôs some special logic you need to insert on setting or getting. It‚Äôs also slightly more future-proof ‚Äî you can make changes to the getters and setters and keep the overall API consistent. For the sort of thing you‚Äôre writing, it would look nicer to my eye to just return hashes and use index access to get the information you need, and probably be more flexible, too. Something like `object.counts[‚Äòorange‚Äô]` for instance. Generally ruby style guides will have you avoiding explicitly naming methods with `get_` and `set_`. 
Btw, that was keeping it simple and based on your original class, but for efficiency, short of using a database, I'd maintain the list in the FruitCountCollection as a hash with the fruit names as keys.
I've been professionally developing ruby for a long time, and here are my recommendations, for the cleanest classes: 1. Use attr_readers only most of the time. Don't use setters on a class; pass everything that you need for the class in through def initialize. 2. Don't use instance variables anywhere in a class except in def initialize, unless you have a value that is truly private to the class and nobody should care about it externally. Even then, it's a code smell. Instead, use your own attr_readers. 3. Avoid imperative programming as much as possible. For example: Instead of: def build_widget4 @widget1 = build_widget1 @widget2 = build_widget2 @widget3 = build_widget3(@widget1, @widget2) @widget4 = wrap_in_a_bow(@widget3) end Code it like this: def widget4 @widget4 ||= wrap_in_a_bow(widget3) end def widget3 @widget3 ||= widget1.combine_with(widget2) end You never know when you'll want to replace an instance variable with a method, and methods should not be messing with instance variables that affect other methods unless it's unavoidable. Even worse than that, is letting other classes mess with instance variables that affect your methods using accessors.
The problem with getters and setters is that they lead to procedural, spaghetti-like code. [_Tell, Don't Ask_](https://www.martinfowler.com/bliki/TellDontAsk.html), along with [SOLID](https://en.wikipedia.org/wiki/SOLID), _will_ save your bacon if you adapt your thinking and use them well. In our shop, `attr_writer`s and `attr_accessor`s now cause a Git commit to fail, and publicly visible `attr_reader`s are seen as a code smell; not a bug _per se_, but likely to lead to code that's harder to understand and maintain than it needs to be. Objects should _do_ something, and return data from the method called to do whatever it is that object does. (Yes, that implies that minimising the number of public methods on an object is also a Good Thing.) Read up on Clean Architecture after you've grokked POODR a bit more. To the point of your toy project: I'd probably encourage a junior I had working through an exercise like that to read the CSV data into a Hash-like data structure that is used as a _read-only_ [data transfer object](https://martinfowler.com/eaaCatalog/dataTransferObject.html) (marked and thought of as private to your API, and allowable because it's both immutable and logic-less), with your query class exposing methods for `count`, `find` (to query a single type of fruit), `fruits` (returning a list of the available fruits), and so on. This would let you write client code like Fruity.new('fruits.yml').find('apple').count to find how many apples you have, or fruity = Fruity.new('fruits.yml') fruity.find('grape').map(&amp;:color).uniq to find a list of all the colors of grapes you have. Does this make sense? It's a _lot_ for a new dev to take in; don't be discouraged! Just take it a step at a time and see where you get. Your first question: "what is a 'fruit'?" üòÄ Good luck!
Which is really annoying when you're trying to google about using those annotations in html code. 
Interesting. I wonder why they called it Ruby. Also, the examples were for Japan and Taiwan but there was no example for pinyin for mainland China.
`File.open` is the standard initializer for a `File` instance, internally it calls the kernel to create a new file descriptor. In order to check whether the file exists, or to calculate the basename and extname of a path, or to do all the other functions defined on the `File` class, you don't need to actually open the file. That's probably why there are no `File` instance methods. Also, note that a path on the disk doesn't necessarily have to be a file, it can also be a UNIX socket, for which you'd have to use the `Socket` class. However, Ruby has a class that should answer your prayers ‚Äì `Pathname`. It allows you to initialize the object with a path, and provides instance methods that delegate to `File` or `FileUtils` methods. require "pathname" pathname = Pathname.new("/path/to/file.ext") pathname.open # retruns an opened `File` instance pathname.exists? #=&gt; true pathname.basename #=&gt; "file.ext" pathname.extname #=&gt; ".ext" pathname.size #=&gt; 4813
I've been developing in Ruby for some time as well and I really don't understand this hate of some developers for instance variables. First of all, they are a feature of the language, so why should not use them. The @ mark helps me to know straight away that it is just an instance variable that is local to the class. I understand that some people think that instance variables some times can evolve into methods. I agree. But what is the problem to change 2 more lines of code when this happens. If refactoring an instance variable into a method is a problem, maybe the class is too complex in the first place!
They pretty much are bad yea. It‚Äôs a way to get around true OO. Avoid them.
You're supposed to call `File.exist?` with a file name, not a file object. The fact that `File.exists?(file)` even works in your code is more or less an accident (`File.exist?` uses `rb_stat`, which works with both file names and file handles). Using `File.exists?` with a file object will never return false, so it is not a useful check. If you open a non-existing file in read mode, you get an exception (so the call to `File.exist?` won't even execute). If you open it in write mode, the file will be created (so `File.exist?` still returns true). In consequence, `File#exists?` does not exist because a method that only ever returns true would not be useful.
When I try to run a file that depends on another file the "Livro" class does not initializes. error: `Traceback (most recent call last):` `biblioteca.rb:16:in \`&lt;main&gt;': uninitialized constant Livro (NameError)`
When I try to run a file that depends on another file the "Livro" class does not initializes. error: Traceback (most recent call last): biblioteca.rb:16:in \`&lt;main&gt;': uninitialized constant Livro (NameError)
In case anyone was wondering, this isn't connected to the name of the programming language. It was named after Perl (also a gemstone) as Ruby was targeted at being the successor to Perl. Ruby was also the birthstone of one of Matz' colleague's. The Ruby the programming language is much older than Ruby markup in HTML, though I think the use 'Ruby' in typography is much older. 
The winning move is not to play. Using ruby tags in HTML is so goddamn painful.
So how is your code interacting with the instance variable? Ideally, it should be set in exactly one place. If it's set in more than one place, it may be difficult to follow exactly what its value is. Setting it should be the responsibility of the initializer, or a single method, and in the latter case, that method might as well be named the same as the variable. This furthers the goal of having immutable objects, which furthers the goal of having less bugs. If your code is reading the variable in more than one place, how do you know it has already been set? Which of those places will be executed first? It's fine if it was set in the intializer, but what if you decide later you want to delay setting the variable until it is actually needed? I did this kind of find-and-replace dozens of times and then realized there's really no down side to using attr_reader and not typing the extra "@". And there is upside too. You're in console. You're trying to debug why the widget isn't widgetting. You type "widget.color" and get an error. You groan and type "widget.send(:instance_variable_get, :@color)". What advantage did you get by doing this? 
To highlight some aspects from the Japanese perspective, those characters are generally referred to as furigana and the word ruby („É´„Éì„Éº) would more likely be associated with the gemstone as it is in English. 
Oh OK, that makes sense. Thanks for the tip. :)
It's better to address your questions to the author himself on [dev.to](https://dev.to), I believe he will be glad to get any type of feedback to his post. Of course, if you want.
It was covered by Matz here: https://www.youtube.com/watch?v=gTNC26BtRFc
Hello! I am used to keeping a record of the Ruby tips I learn or I discover on a daily basis on the internet. Now I want to give back and I created a twitter account where I share everyday a ruby tip. I try to only write simple examples in less than 20 lines, for beginners and experienced developers. And it is also a way to force me to keep learning. I am opened to the suggestions and the contributions üôÇ
Interesting approach. I guess I'll be the dissenter here :) In our projects, we absolutely add getters and setters to classes, but programmers are expected to understand not to couple other classes to them. The rationale is that if a programmer understands "tell, don't ask," then they must already possess the discipline to avoid asking altogether. Therefore, we don't gain anything by prohibiting accessors. The reason we add getters and setters is for diagnostic or testing contexts. Setters essential to be able to control an object's state during test setup, and getters are essential to verify the outcome (i.e. observe the state for assertions). Of course, we also presume that new programmers are going to be supervised closely until they have acquired the same habits that we've cultivated. This doesn't work for every organization.
&gt; Extracting services is one way to keep classes lean and separate business logic from framework code. class SendEmail extend Dry::Initializer option :to option :body option :emailer, default: -&gt; { MyMailer } Schema = Dry::Validation.Schema do required(:to).value(format?: URI::MailTo::EMAIL_REGEXP) required(:body).filled end def self.call(**args) return false unless Schema.call(args).success? new(**args).call end def call emailer.send(to, body) end end "We decided our code was too coupled to a framework so we created another framework to couple our code to instead" (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª 
Twitter is cool but maybe a blog would better so we can search, categorize, etc
Yes I would be better! For now, archives are on my blog: [https://beckr.fr/daily\_ruby\_tips](https://beckr.fr/daily_ruby_tips) I'm looking for a solution to simplify the publication process. Currently it's Jekyll + custom scripts + [carbon-now-cli](https://github.com/mixn/carbon-now-cli) for twitter images.
&gt; makes it more random just no.
What a beautiful, gentle introduction to dry-rb. Thank you!
Well, at least this ‚Äúframework‚Äù is universal and can be used in any Ruby web application, so you‚Äôre learning libraries that are actually reusable. When I switched from Rails to other Ruby web frameworks, I realized that 90% of code that I was using so far was Rails-specific, so I couldn‚Äôt use it. The remaining 10% was ActiveRecord, which I replaced with Sequel. So all of that Rails API knowledge turned out to be useless. On the other hand, learning dry-rb is more future proof, and the functionality is very advanced and flexible. Also, you can choose the level of abstraction and dry-* gems you want, it‚Äôs all composable.
This. Pretty sure the dry-rb folks would be much happier implementing their alternative dialect of Ruby as a whole new language, because the current effort looks utterly tortured to me. 
Consider trying to DRY it up. A little metaprogramming might help. method_and_arg = case @sort when 'count' [:order, 'cells_count DESC'] when 'hot' [:order_by_hot] when 'views' [:order, 'views_count DESC'] when 'rating' [:order, 'wilson_lower_bound DESC'] else [:order, 'created_at DESC'] end query.public_send *method_and_arg You could simplify it further if you can change :order_by_hot to be :order with args as well.
If it wasn't for the "order_by_hot" edgecase, you extract a constant: SORT_QUERIES = {'count' =&gt; 'cells_count DESC', 'views' =&gt; 'views_count DESC', 'rating' =&gt; 'wilson_lower_bound DESC'} Then pass the appropriate argument to the #order method: query.public_send :order SORT_QUERIES[@sort]
I don't get the gripe with 'action'. every language/dsl has reserved words that if used will result in wonky behavior, after you experience a bug of this type it become second nature to verify the variable or function name used is not part of this list.
&gt; because the current effort looks utterly tortured to me. Which part? There are three distinct constructs here: dry-initializer, dry-validation and dry-monad. The dry-initializer part can be replaced with simple keyword arguments, it‚Äôs completely optional. It‚Äôs just nicer in certain cases. The dry-validation part is very minimal, and dry-validation is much better than ActiveModel::Validations. The dry-monad concept already exists in the Ruby ecosystem outside of dry-rb. For example, the github-ds gem (used in GitHub) also has result objects. In my previous project I would have had a much easier time making the app resilient to Redis timeouts if we had used result objects.
Followed! I‚Äôm a sucker for random cool features that don‚Äôt need too much setup. It makes it easy to grasp a single tip‚Äôs usefulness. 
Nice. I did this everyday for a year 2013-2014. It was an awesome learning experience. Softwarehabit.com Tips: keep it simply, prepare ahead for days off (vacations), chain tips together to make mini-projects, commit to a timeframe (i.e. 100 days). 365 days was a bit much imo. It would be great to see the tips on Reddit. Then we can vote on and favorite them. Good luck and have fun.
&gt; The second one, validations. We only need to validate data that comes from the outside world. Domain service is not the right place for that Yes but one thing that is important to note is that this interactor can be called from multiple contexts, i.e. an API endpoint or another controller. Having validation in multiple places for that can be a nightmare.
Thanks! 
&gt; The first one is self.call. Why write a stateless service if you still have to instantiate it before every call? I mean, that stuff is pointless. You don't have to instantiate it on every call. But when you aren't doing anything special, its a nice interface.
Thank you for your support! I read some of your last tips, it's awesome üëç Yes, I should definitely commit to a timeframe. If I run this account for too long content quality will drop. Do you think it would be relevant to post these tips in /r/ruby? I not very comfortable with the idea of flooding this subreddit with 5 lines tips every day.
:+1 Good content is good content. 
So use result objects. Don‚Äôt create a result object framework. The guts of dry-rb are just horrifying, and the resulting programs look like someone tried to gene splice FP into J2EE and then skin it with Ruby. 
&gt; The guts of dry-rb are just horrifying I cannot argue with that. I always had troubles reading the dry-rb source code; I tried to start with dry-initializer, but it was still too difficult. There are often too many levels of indirection, I would prefer if things were simpler. But I guess that's just the downside for having such a large featureset. I liked what Tom Dalling has done with [Resonad](https://github.com/tomdalling/resonad/blob/master/lib/resonad.rb), which is a very simple library for creating result objects.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tomdalling/resonad/.../**resonad.rb** (master ‚Üí 81e2239)](https://github.com/tomdalling/resonad/blob/81e2239e5159f8b3fa25f315fc40c05d3f22855a/lib/resonad.rb) ---- 
Having validation in multiple places is not a nightmare, it's a sound design. Whenever data comes from outside world, we MUST validate it. Once we've validated and coerced everything, we can just use it in our application without any extra checks. If you get exceptions on this point, that means either of two things: * Wrong validations * Errors in your code and data transformations Either way, it will expose an error in your application design, and that error should be fixed. Also, since you're talking about validation in multiple places being a nightmare. A typical real-world application has a lot of going on inside, which results in dozens of services. Putting validations in each service instead of controllers/API/whatever will actually *increase* the complexity and number of validations. 
&gt; The guts of dry-rb are just horrifying I deleted my previous comment where I was agreeing with this statement, as it's just too extreme. I can admit that the dry-rb code can be a bit challenging to navigate, because it has several levels of indirection and at times I'm having troubles finding the "meat" of the functionality. But I cannot understand how can you find it "horrifying". It's objectively very quality code, it's just that it has to support a lot of features. &gt; resulting programs look like someone tried to gene splice FP into J2EE and then skin it with Ruby. I've seen this statement many times, but I've never seen an actual comparison that shows both side-by-side. I have no idea what is J2EE and how does it look like, but dry-rb looks very Rubyish to me, especially dry-initializer and dry-validation.
&gt; So use result objects. Don‚Äôt create a result object framework. What result object framework are you talking about? People will always have to make up some kind of abstraction to express result objects. Why in the world would we encourage people to reinvent the wheel on every project, when we already have a mathematically sound abstraction for that? Having tools that integrate with that abstraction is good for ecosystem, as it promotes standards and reusable concepts. Moreover, it makes it easier to switch between projects as things are surprisingly similar. 
&gt; Whenever data comes from outside world, we MUST validate it. Of course, I never argued against that. &gt; Either way, it will expose an error in your application design, and that error should be fixed. If I know for a fact that an Interactor needs a ussr_id and a post_id to operate, and is used regularly throughout the app, are you suggesting I spray and pray everywhere I use it? &gt; Putting validations in each service instead of controllers/API/whatever will actually increase the complexity You make a bold claim so please back it up. 
&gt; look like someone tried to gene splice FP into J2EE and then skin it with Ruby. That's the most accurate description I've heard for it yet. 
&gt; Of course, I never argued against that. The second sentence is as important as the first one. Once we've validated the data, there's no need for extra type checks. &gt; If I know for a fact that an Interactor needs a ussr_id and a post_id to operate, and is used regularly throughout the app, are you suggesting I spray and pray everywhere I use it? I am definitely not suggesting that. I do, however, realize that we're all human, so we make mistakes. Type errors and argument errors are one of those. It's way too easy to get caught up in data transformations and differendly designed services and pass a `user` object instead of `user_id`. That happens everywhere, and it's just something we have to live with. &gt; You make a bold claim so please back it up. It's practically a question of "validate once" vs. "validate on every step". The latter is naturally more complex. The "validate on every step" occurs whenever we decide to compose domain services. Which is a pretty common task inside a functionally designed code. 
...also this answers the question of "Where the devil has black magic Ruby guy been for the past month and change?"
I think you‚Äôre playing too much code golf here. Repeating query multiple times has no practical disadvantage, and anything you do is going to make the code less clear. Think about readability first, that leads to the best code.
The replies so far in this thread seem to belie an unfamiliarity with Ruby implicits. I would strongly suggest reading a few tutorials on === to gain a better understanding as to what is being proposed here. It's not new, and all the grounds for rejection act like it is. The difference is that these two classes specifically have not ever had a === coercion. More commonly you could call === the match or inclusion equality operator. It's called case compare officially. 
Did you reply to the wrong post?
It's in general agreement with yours, though yes, it appears it did. 
To make this work for the edge case, you could separate each algorithm into a different objects and use the hash to pick the correct one. I think in OO talk this would be the strategy pattern, but instead of injecting the strategy it's an implementation detail of the object. class OrderChooser class Sort attr_reader :query def initialize(query) @query = query end def sort query end end class SortByCount &lt; Sort def sort query.order('cells_count DESC') end end class SortByCreatedAt &lt; Sort def sort query.order('created_at DESC') end end class SortByHot &lt; Sort def sort query.order_by_hot end end class SortByRating &lt; Sort def sort query.order('wilson_lower_bound DESC') end end class SortByViews &lt; Sort def sort query.order('views_count DESC') end end SORT_STRATEGIES = { 'count' =&gt; SortByCount 'hot' =&gt; SortByHot 'rating' =&gt; SortByRating 'views' =&gt; SortByViews } def initialize(sort_string) @sort = sort_string end def apply_order! query SORT_STRATEGIES.fetch(sort) { SortByCreatedAt }.new(query).sort end end 
Excellent!
&gt; Actually, they do. It's just a constructor injection as described by Martin Fowler. If you mix user-provided data and dependencies you won't be able to build your dependency chain separately and therefore won't be able to extend your services through e.g. decorator objects without relying on meta programming/other hacks: service = LogAllParams.new(ServiceA.new(gateway_a, gateway_b)) # Somewhere else service.call(params)
We've been living with constructor injection for so long in many languages, including Java in Ruby. Why all of the sudden we "won't be able to extend our services"? Java is not widely known for good metaprogramming, yet manages to survive. 
Dude, this is awesome! I'm just picking up Ruby and am really enjoying it. Not sure what to make, but I have a question on what Ruby/Rails can do. You seem like a profficient Rubyist, is the following possible: completely automate printing shipping labels with Ruby? In my day job, I sometimes process shipping labels as an e-commerce assistant and some tasks are extremely repetitive and tedious. Specifically, splitting up orders to be shipped from multiple warehouses. The company I work for uses Shipstation as the shipping software. We've got 4 warehouses in America: California, Texas, New Jersey, and Florida. Sometimes a customers order would need to be split, one shipping from Cali, another from Texas, and the other from Flrodia, for example. I have to create manually create orders by hand, which would take around 2-3 minutes for one order. Now, there might be about 15-50 orders needing to be split everyday. I want to automate the hell out of it! Is this possible? Thanks! Meanwhile, I'm going to continue learning Ruby!
Oh, yes, I definitely misunderstood. Thank you. Are you suggesting that we need to inject dependencies in constructors and provide data using other methods? That's what your example is about, right?
That's exactly what I'm getting at - you've got: SendEmail.new(to: email, body: spam.generate, emailer: MyMailer.new) Where you've got per-task params alongside application-level configuration, and an instance which is a highly specialised "email this user this message using this emailer" object who's only future is for you to .call it with no arguments and then throw it away. Instead if you do: SendMail.new(emailer: MyMailer.new).call(to: email, body: spam.generate) Now each service instance is a generalised, reusable object you use to send emails. You can inject it, make a singleton out of it, stuff it in a container, whatever. Each method has a single job and unnecessary state is minimised.
tap is great, basically you can add block syntax to any object.
&gt; You don't have to instantiate it on every call. But you _are_ instantiating it on every call. `self.call` calls `new` to create an instance, then calls `call` on the instance, then throws the instance away. Pure fucking insanity....
I work primarily in Service Oriented Architecture and web apps. I am pretty familiar with every aspect of that, and I specialize in building bulk endpoints (to support a server, or the front end getting or posting large numbers of records in one web request). 
You can always use something like Dokku on DigitalOcean.
Hatchbox as a service is $15/month. It takes the place of Heroku's platform and ease-of-use, which is very nice. You also don't pay the Heroku premium on poor-performance (per dollar) AWS hardware. It's not exactly the same, but for most of us, it's good enough for production. If it wasn't good enough for production, it's very likely the resources would be made available to have more ambitious setups.
Article doesn't mention Cloud66, which is also very fun to play with and is similar to Hatchbox. It's not as inexpensive as Hatchbox, but it also does quite a bit more. Not to say that Hatchbox is bad (I love it); Cloud66 is merely a very mature, venture-backed product.
What's wrong with that? Would you rather define service behaviour on the class level or the instance level? I always prefer the instance level, it's much easier to work with. There is a great RubyTapas by Avdi how using short-lived "throwaway" objects can lead to fewer bugs, but I forgot which episode was it. If you have such strong resistance against such mild things like making a `self.call` wrapper method, that makes it very difficult to focus on real problems. You could also argue that we're instantiating `ActiveRecord::Base` instances just to write a hash of data to the database.
&gt; You know what is really reusable? Plain old Ruby, it doesn't require setting up an IoC container to do something as trivial as instantiating an object. None of dry-validation, dry-initializer or dry-monads require you to set up an IoC container. Notice that this article introduced those three gems without even mentioning IoC containers. Can you give me a concrete example of what is too difficult and/or requires an IoC container and it shouldn't? BTW, I don't like the term "IoC container", because it sounds like you have to learn a new concept, for me it's just a sort of dynamic hash. I haven't used it yet, though. &gt; Why is it future proof? Because if I use dry-rb in Rails, and later decide that I would like to use Roda instead, I can just continue to use dry-rb, so that part in the migration from Rails to Roda can remain the same. &gt; What 'new' things does dry-rb provide? What is 'advanced'? That's a too generic question, because dry-rb ecosystem consists of 18 gems. Components that struck my attention are * dry-validation, which provides an API for defining validations with the precision and conciseness that `ActiveModel::Validations` simply doesn't have * dry-system, which allows me to organize code in the way which allows the least boot time when running tests (I didn't manage to achieve this on my own), which is a big improvement over Rails' "just load everything on boot" approach * dry-container + dry-auto_inject, which provides uniformity when defining external dependencies such as Redis or Postgres connections In general it really helps when you have some of this general problems solved in a flexible way. &gt; IoC containers, static typing and high configuration are not new concepts by any stretch of the imagination You can use most dry-rb gems without using any of these things, so they're far from being the main features of the dry-rb ecosystem.
To sum up in a single query: Take your largest code base, count the number of times your IoC container injects a single dependency universally in production. Also count the number of times your IoC container injects a different dependency in dev and test. Let me know what the numbers are. 
&gt; Would you rather define service behaviour on the class level or the instance level? I always prefer the instance level, it's much easier to work with. Where's the instance in `SendEmail.call(to: email, body: bla, mailer: foo)`? It's just a function call. There may be an instance under the hood, but it's of no use to the outside world, it's just an implementation detail. Behaviour is defined at class level in the default argument definition and you get to override it at call time, but you can't make a `SendEmail` service instance with, say, a dummy mailer for testing because it needs passing in each time.
I inject depenencies 307 times. I stub dependencies for testing 35 times. Sounds like a fair number for starters, right? Only stubbing whatever needs to be stubbed
&gt; I don't have enough data to stick to either side, but it sure feels like Rails is an awful way to back your position But yet your implication is that what existed before is better... Interesting how things move in waves for no actual reason...
So you introduced a runtime dependency and forcible code model to facilitate 11.4% of your tests. Rather shit trade off don't you think?
It would have been a really shitty trade-off if it actually caused visible problems. So far, the only problem I've encountered is having to remember the keys for injected properties. Not sure how shitty it is, but still. Also, are you bashing IoC containers or DI in general? I've used DI both with and without IoC containers, and it feels way too similar
&gt; But yet your implication is that what existed before is better... How so? Never took myself for an "the older the better" kind of guy
&gt; It would have been a really shitty trade-off if it actually caused visible problems. You can't even insatiate a class without the container there, you are 100% coupled to your framework in the extreme sense. &gt; Also, are you bashing IoC containers or DI in general? DI in the general sense is fine, IoC is brain dead. This is DI: My.application do |c| c.logger = Logger.new end IoC Container leave a shit stain on the entire language they work on....
You don't most of the time. This is why IoC Containers are infectious. It's pretty simple: Should a dependency be configurable in production? If yes then make it configurable via any of a number of means already available in the Ruby programming language. Should it only be configurable in dev / test, then make it configurable via any of a number of means already available in the Ruby programming language. Why people seem to think Ruby is Java (which requires IoC to implement either of the above sanely) is beyond me.
&gt; You can learn how to build a Rubyflow.com clone. Because of that, I may not be mentioned in the Ruby Weekly anymore if Peter Cooper will not like it but the show must go on! Haha, no problem, keep up the good work :-)
I don't know how to answer that, what feature / gem out of dry-rb do you think is 'new' (not new to you) in the sense that it's a new idea in programming? 
I don't think any of dry-rb gems invented anything new. They just brought some practices from other languages into Ruby, with respect to Ruby's semantics and syntax. There are not so many new concepts in programming these days. 
My apologize, I should have checked the user names more closely, I assumed you where the OP of this thread and attributed this comment incorrectly: &gt; On the other hand, learning dry-rb is more future proof, and the functionality is very advanced and flexible.
Well, it is a bit future proof, since you have to learn concepts from other languages. Gets better if you realize how and why those concepts became popular. Libraries don't matter, concepts and ideas do. It gets even better when you find a reason to ditch some of those ideas because they are obsolete or badly designed. It was a pleasure removing dry-transaction from the code. I'm kinda hasty to remove dry-matcher soon. 
&gt; What's wrong with that? Would you rather define service behaviour on the class level or the instance level? What's wrong with instantiating a class, then calling a single instance method on it, then throwing it away? Does that really need an answer? 
&gt; Well, it is a bit future proof, since you have to learn concepts from other languages. Gets better if you realize how and why those concepts became popular. Libraries don't matter, concepts and ideas do. &gt; It gets even better when you find a reason to ditch some of those ideas because they are obsolete or badly designed. Agreed, this is my point, these ideas were tried and found wanting, Rails was one counter point, but there are plenty of other places where IoC containers in particular have been found to be a bad idea. For whatever reason, the concept is coming back in the form of dry-rb, I'm guessing mostly because a bunch of folks whom haven't actually tried it, or don't understand it's pros / cons read a random paper from 20 years ago and now think it's the missing link in Ruby. 
Just a small criticism. The looping gifs are really distracting when trying to read the text content.
`let` is typically used to remove duplication in tests. It can store a value so you don't need to repeatedly define it across separate tests. You *could* do something like this: describe Fruit do let(:fruit) { Fruit.new("banana", "yellow" } describe "#fruit_info" do it "returns info about the fruit's name" do expect(fruit.fruit_info).to include("This fruit is called an banana") end it "returns info about the fruit's color" do expect(fruit.fruit_info).to include("the color is yellow") end end end However, over-using `let` can also make your tests less readable. Here's a couple of posts which advocate against it: https://robots.thoughtbot.com/my-issues-with-let https://robots.thoughtbot.com/lets-not
A command line application that reads a yaml file, opens applications and positions them on the screen based on the values in the yaml file. 
Hi there, \`let\` statement in RSpec tests is a way to assign values to a variable and share it across the context/description block. Avoiding some issues in your code and removing the \`puts\` keyword you could write a test like this: describe Fruit do let(:name) { 'Orange' } let(:color) { 'Orange' } it 'returns fruit info' do fruit = described_class.new(name, color) # You can use name and color here! expect(fruit.fruit_info(name)).to eql "This fruit is called an Orange and the color is Orange!" end it 'returns wrong fruit info' do fruit = described_class.new('Apple', color) # you also can use color here! end end
Yes, I feel like you're avoiding answering, because I already told you that I do need an answer. This happens in Rails all over the place, for example a `#destroy` controller action: class AlbumsController &lt; ApplicationController def destroy # instantiating a class album = Album.find(params[:id]) # calling a single instance method on it album.destroy # then throwing it away redirect_to albums_path end end
&gt; this kind of find-and-replace dozens of times It's really rare that I have a class that is more that 100 lines long. If I need to change a variable name, I just `Crtl+D` and select all of them. I mean, I never felt that it was a problem. &gt; You groan and type "widget.send(:instance_variable_get, :@color)" I don't remember the last time I debuged in production. But it must be over a decade ago. In dev, I just add a `binding.pry`.
And yaml shall set you free... I'm going to get cracking on this idea tomorrow at work. Thanks!
Thank you for the feedback. I was experimenting with this
How exactly could one achieve the second part of this challenge? Not looking for the answer, just to be pointed in the right direction
On macOS you can do that with AppleScripts. Ruby could generate and execute that to move windows.
Do you play DND?
I used to but not in a while 
Hi there, Below comment, they explained to you. \`let\` is for sharing variables. But why? Because the variables declared by \`let\` just have values if we \`use them\` in the context. It's like lazy loading. Hence, with \`let\` we can share the context but still save memory.
Main downside to Dokku is that it doesn't support multiple servers.
Create an application which allows you to draw pictures, write notes and use various colors to flesh out ideas for projects, kind of like an online white board. 
I didn't mentioned Cloud66 because I never used it and it's a bit difficult to talk about something you never used. Also, I created this article using my Hatchbox affiliate link so if anybody use my link it helps me and also it helps Hatchbox which is not a venture-backed product but it's a quality service I use for over an year. 
I love it! Does your blog have an RSS feed? 
As with most Medium links in this sub, unfortunately, this is an advert (for Hatchbox, in this case). Part of my job is to evaluate hosting/VPS providers twice a year, to see what our options are as we grow and as our then-current provier's platform evolves over time. I'd never heard of Hatchbox before this and, regardless of their technical merits, this post gives me little motivation to even investigate them further.
Unfortunately, not yet because I moved from Wordpress to my dedicated Ruby app and I didn't implement it. But I will, I added a card on Github to not forget about it :) 
Qo v0.4.0 released! Changes: * Wildcard replaced with the Any gem: https://github.com/baweaver/any * New logo Example: Qo[:*, :*] === [1, 1] Qo[name: :*] === {id: 1, name: 'foo'} now becomes Qo[Any, Any] === [1, 1] Qo[name: Any] === {id: 1, name: 'foo'} Going to attempt to reconcile against the Array and Hash === proposals in core at the moment: [Any, Any] === [1, 1] {name: Any} === {id: 1, name: 'foo'} Expect more releases in the near future as we approach a solid v1 api. I will try and emulate the path of 2.6 as much as possible depending on future releases. - baweaver
Glad it could help you! Your automation project seem doable in Ruby. If Shipstation API allows you to create your order. It's even easier if they provide an API client in Ruby.
Github repo: [https://github.com/rubyhero/rubyflow](https://github.com/rubyhero/rubyflow)
Um... What are the chances this get adopted officially into Ruby? 
Good call on replacing `:*` with `Any`, this probably prevents some corner-cases. Personally I would prevent values with special meaning altogether and provide a catch-all function which simply wraps `-&gt; (_) { true }`. `Any` is good enough, though. Qo.m(Any) # Identity function, catch-all This isn't really an identity function, because it's type is roughly `a -&gt; Bool` and not `a -&gt; a`. [Tautology](https://en.wikipedia.org/wiki/Tautology_(logic)) seems to be a better name.
Thank you! Also, I‚Äôd love to hear your story of migrating from Wordpress. I moved from Wordpress to Jekyll about 2 years ago and my ease of posting really dropped. I‚Äôm debating whether to go back to Wordpress or build a simple CMS in Rails. 
True. That comment was fairly old and before I really got what identity was. I'd just done a find and replace so I didn't catch it. 
If the Array and Hash === proposals are accepted in the next Dev meeting in Japan, most of it already will be for 2.6. It's been a bit of time coming, but I think those of us pushing pattern matching are getting traction. Most of it was that Matz wanted a nicer syntax which was perfectly fair. 
That's a great idea for the next article, thank you! I will write about it. If you want to be notified about it, check my Twitter, I post there link for each new article - r/http://twitter.com/pdabrowski_k1
I have to say, I agree strongly with your rationale here. Just because IoC containers operate _outside_ classes doesn't mean that classes don't become sympathetic to them. In fact, they seem to greatly skew the design of classes, particularly when dependencies are injected into constructors. Instantiating classes should never require more than the _essential_ parameters (i.e. non dependencies). I'm not going to so far as to denigrate their efforts, however. They're trying to build the tooling they want to use. IoC containers just aren't my jam, so to speak. Neither is Rails outside of acting as a web server, for that matter.
Form AI, ML and data science either language is fine BUT Python dominates these 3 domains in terms of the available libraries and community focus. 
Currently working on a rails app to handle bill splitting with my friends. I've been doing it via spreadsheets for a few years now. To help you understand what I want from this, my spreadsheets look something like this right now https://imgur.com/a/vO57ceR I'd like to be able to do something to this effect with this app.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/VM43DRC.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e3q3oiv) 
Making a script which navigates to some web pages, downloads some csvs (which are all in different formats) and then inputs the data from those csvs in to a MySql table. Saving the users quite a bit of time in doing so, so that's good. 
Getting ready to launch an app extension that handles employee time off requests, with admin mgmt of requests, hours accounting, and Google Calendar API tie-in. 
I am working on a maintenance tracker app for a local ride share company so they can log and track repairs and issues with their vehicles. My first project as a dev after graduating from a bootcamp 2 months ago! 
You might want to look at Splitwise for inspiration.
Seen this? https://www.kittysplit.com/en/
I can give you a better answer if you flesh out your example a bit. What methods does the Fruit class have? What methods do the subclasses have? How are they using their parent's methods?
I am in the planning phase for a Project Euler style RoR website in Chinese.
On Linux you could script wmutils with Ruby.
* Final month of developing in Spree, it's being replaced by Demandware. Not my choice, I suggested Shopify but the Demandware salespeople were really nice apparently :-) * Huge backend application for hiring and planning candidates * Small Trello-like Rails backend with react frontend
Keith, I see you have no intention of replying or refunding the proceeds from your illegal actively so I'll ask you again. You have time to work on this particular project, but not on the countless of others you have taken money for and either not completed or started at all. At what stage will you drop the act and openly admit you are nothing more than a common criminal?
Ok
I don't know who you are and by judging your comments you're probably just a troll realising that real engineers can build better code than you. This is very common and we ignore your kind. Bye!
If you are talking about using modules as mix-ins with `include` (or `extend`) -- no, that's still inheritance. 
&gt; A lot of the issues come from the fact that the ActiveRecord API is very messy and inconsistent at times. For example, size, length and count are functionally all equivalent in that they retrieve the number of elements in a set of records. However, their implementation and therefore performance characteristics are very different. That's rather the point, and doesn't really mean that they're bloat. It means they're meant to be used in different circumstances. `size` is probably what you want most of the time. `length` is useful when you know that you're going to be loading the records later (e.g. `Displaying N results` as a header above the list). `count` is probably the most niche, but especially when dealing with associations there are cases where you know the records in the database differ from what you have in memory, and `.reload.size` is wasteful. `count` is also used to do queries *other* than `count(*)`. I'm not sure how 3 methods which give the same result but are for vastly different purposes constitutes bloat.
Would "my kind" be the victims from which you take money to complete a project, then cut communication completely? Would "my kind" be a non-programmer looking for a genuine, authentic and ethical developer to undertake a job? Would "my kind" be someone who will end your illegal activity once and for all? A quick background check on your name(s) and aliases highlights an entire decade of shady and illegal activity. Did you ever pay those third-party freelancers back you hired to complete work and vanished once they had delivered it? You are a despicable person and time is running out Keith, how long can you keep up appearances? 
And here I was trying to figure out how to do a `INNER JOIN` for 2 different REST endpoints. Thanks guy!
Please don‚Äôt use ‚Äúguys‚Äù to refer to a mixed gender group. I‚Äôm aware you meant no offense, I know that you know women who do it, and I get that you were told it is okay. If I asked you to ‚Äúname five famous guys‚Äù, how many of them would be women? 
I was about to reply "I meant no offence" but you were preemptive and disarmed me. I only have apologies left to offer so I'm sorry for the title if it has upset you. Just out of curiosity, how would you do this tittle?
JSONAPI.org provides everything graphql does (except for type checking) :)
\~\~\~ triggering intensifies \~\~\~
At work (ChartMogul) Priority Queue/Subqueue extension to Sidekiq which is likely to be open sourced
I agree with you /u/schneems, however I'm not a native english speaker, what would be a better (gender neutral) alternative expression in this case? "Friends"?
I find ‚Äúfolks‚Äù is usually a good replacement. ‚ÄúGang‚Äù works too. 
&gt; Fellow developers of various genders, REST APIs are not Databases
You can drop the ‚ÄúGuys‚Äù and it would be stronger ‚ÄúREST APIs are not databases‚Äù. Is shorter and more of a statement. You could use ‚ÄúFor the last time REST ...‚Äù if you want to convey a sense of frustration. ‚ÄúHey, REST ...‚Äù Or ‚ÄúHey everyone, REST...‚Äù or ‚ÄúY‚Äôall REST ..‚Äù or ‚ÄúDid you know REST ..‚Äù or ‚ÄúYo REST ...‚Äù for an informal tone I would probably drop it all together. 
I posted another reply with some alternatives. Friends is good in some cases. The most ‚Äúdirect‚Äù alternative would be ‚ÄúYou all‚Äù. I generally use y‚Äôall since I‚Äôm from Texas.
lmfao
Well shoot, you mean all I had to do was use a database for a datastore and not a REST API? 
You know exactly what I‚Äôm taking about. Temporarily banning people for slip ups in chat. Berating newcomers. I‚Äôm not here to argue though. I follow the rules. I‚Äôm just describing what‚Äôs happening here.
English can be annoying in this case. The context that you used guys was the masculine/neutral use of the word, and depending on the interpretation and region of your audience can be interpreted different ways. Technically the ‚Äúguys‚Äù is extraneous in the statement. Eg: ‚Äúhey! I made this‚Äù vs ‚Äúhey guys I made this‚Äù or just ‚ÄúI made this‚Äù could also work and be a more appropriate context when showing off something that you made and soliciting feedback etc.
What is happening **here** is that I asked someone to consider using a different word in the future. What you‚Äôre doing is building a straw man argument and playing coy. I did not ban OP. We are having a nice conversation while the rest of you all are flipping out because different people have a different interpretation of language than you. I appreciate you ‚Äúfollowing the rules‚Äù but it seems you don‚Äôt understand why we are asking for such an extremely subtle shift in language. Or you do understand, and are trying to, not so subtly, undermine it. 
You are joking. But this are some requests I (backend developer) got from our app-developers: 1. I need to fetch both the user and its subscriptions in one request. How can I craft a request that (\`INNER\`) joins these? 2. How can we create a user and subscribe it to several Foos in one POST? 3. When I cancel a subscription, I need to re-fetch all it's subscriptions to update my local database, can we not return the user with it's subscription on the DELETE subscription request-response? The smell here is that we modelled the User+Subscription too closely to our database. Remodelled as "Member", which is a "Thing that is subscribed to one Foo" and most cases above could be closed. 
"Folks" is more region-neutral than "you all" or "y'all". I'm just here to balance /u/schneems's texan bias. For instance "Folks, what do you think of this?". "People" also works. I can be used in sentences like "All right people, let's go!". I would have titled this post: "REST APIs are not databases, folks" or "People, REST APIs are not databases".
You see, this mixing of concepts is becoming an issue
I have to agree here. At one point I also tried InheritedResource ...until I rewrote it back without it. At current work we use Ransack to replace ActiveAdmin with our own admin and so far looking good.
&gt; I think GraphQL solves that problem The thing is, GraphQL does not solve it. Because the problem is not "how to let some consumer combine stuff". But "how to define a domain model where consumers don't need to combine stuff". I'm not saying that combining, filtering, joining or embedding is never appropriate. But it *always* is a "code"smell first. A sign that your domain models are wrong. Look for the solution there. 
Rub some graphql on it. Magick!
I agree. And I don't like JSONAPI.org or GraphQL solutions that let client define their interface too much for this reason. Sure, handing some tools to the clients is good. But when a client wants "batch APIs", mix, embed, join, or have different resources returned, that is a sign that your domain model, and therefore your API is wrong. Solving that with a "just add a generic toolset to allow clients to create their own domain model" is quite certainly a bad idea. And that latter is what GraphQL is implemented for far too often. Far too often, GRaphQL is used because developers lack the time, skills or knowledge to implement proper domain models, and therefore don't implement any and simply say "we'll leave that to the clients". A guaranteed recipe for painting yourself into a corner.
Could you share more insight about the abuse? 
&gt; precise in their language https://www.merriam-webster.com/dictionary/guy is pretty clear on "used in plural to refer to the members of a group regardless of sex" being one of possible meanings 
I don't know if it is just me but: &gt; Gang, REST APIs are not Databases Reads a bit weird for me.
I agree that all three have their reasons for existing. However, that doesn't mean the interface can't be improved. For example, instead of having 3 different methods, I think it's better to have one method but with different parameters to control different behavior: ``` collection.size # size collection.size(reload: true) # count collection.size(load_records: true) # length ``` In my opinion, something like this is preferred because someone who isn't familiar with the ActiveRecord API just needs to look at a single method to find all the behaviors. Currently, this is spread out over different methods, and you can find the information only if you are already aware of the existence of `size`, `count` and `length`. So yes, I agree that the functionality provided by the three methods is useful. However, I do think that it is unnecessary bloat from an API point-of-view and that it is responsible for ActiveRecord being harder to use well than strictly necessary.
Agreed that the naming could be improved. I think the API proposed here would be a dramatic step backwards though.
How is it different from ‚Äúguys‚Äù or ‚Äúdudes‚Äù as a way to address a crowd of people? Is that weirdness you feel maybe a little bit better than weirdness that developers who don‚Äôt think of themselves as ‚Äúguys‚Äù feel when they read a title like that? It‚Äôs a pretty small ask, I think, for us guys to adjust our language choices to be more inclusive when we‚Äôre talking to the entire community. 
You obviously never worked with salesforce 
How else are you going to put down people and feel superior otherwise? 
hahaha, is their API bad? PTSD level?
A REST API can solve #1, too. Just implement a new GET endpoint!
`obj.singleton_class.include(M)` is equivalent to `object.extend(M)`
That‚Äôs a paddlin‚Äô.
They developped a query language (really close to SQL) to interract with their API See [here](https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql.htm)
Learning Ruby on Codecademy
For sure, I was just commenting on that I think "Gang" reads as a strange word to use, and that I don't think it is a 1:1 replacement, I am all for inclusive language, I was just questioning the choice of words, but I am not a native english speaker so what do I know. And also, if we want to be inclusive, I do not think it is great to address people as if they are in a gang, what about all the non-criminal developers out there? And what about all the introverts that probably want to keep to themselves that will never function in the group dynamics of a gang-environment?
I feel like this should be a Rails standard and also be a configurable.
Certainly not. So, many people would probably simply implement them. Through some graphql, jsonapi.org or other abstraction even. We took the opportunity to thonk a step further. The problem, like often with API's is a leaky abstraction: the domain model needed improvement.
A paddlin'?
Ah, I see. I'm using the word in an older, more colloquial sense. A gang in this context is just a word for a group of people who hang out together. A group of friends, co-workers, or in this case, a community of Rubyists. It's a term used to address a group that you belong to. It sounds weird to you without the idiom of American casual speech.
I was working on the free Rubyflow.com clone course, and now I started to work on another ‚Äûclone‚Äù course - Grammarly - it‚Äôs a time-consuming thing but very exciting 
But isn't "guys" in this context different than what /u/schneems seems to suggest? I mean, yes, a gang does mean a group of criminals, just as guys does mean a group of men, but that is clearly not what anyone meant or suggest, and the terms can be used in different contexts.
replied here: https://www.reddit.com/r/ruby/comments/959ww0/guys_rest_apis_are_not_databases/e3s6sv8/
I'm not from the Southern US, but I've adopted "y'all" for this kind of purpose anyway. (I blame one of my high school Latin teachers, who insisted that "y'all" was the best way to translate the second person plural.) So, I'd probably say something like "Rest APIs are not databases, y'all."
Close but not quite with regards to the module callbacks \`Module#included\`, \`Module#append\_features\`, and \`Module#extended\`. So depending on the way you interact with other code while metaprogramming, there could be important things missing.
Correct, but those differences are immaterial in the example in this blog :)
There‚Äôs a few things to unpack. If it truly was ‚Äúclear‚Äù based solely on context then its addition is not adding anything and should be taken out. For example I could have added ‚Äúobviously‚Äù to the end of that sentence but did not, since it would have added nothing. This omission makes the sentence stronger. Unfortunately while it might be clear to you, to others it is not. Some people do purposefully choose these types of subtly exclusive language as a way to assert themselves and this community as a ‚Äúsafe space‚Äù for bros. You may have heard of the term ‚Äúmicro aggression‚Äù. This could be interpreted as one or it could be totally innocent. Without going into the psyche of the writer it is impossible to tell. In either of these cases removing the word or using a more specific word would be better. 
Yes, but in this case extend is the idiomatic and correct ruby way to do it. The behavior in this example is explicitly supported in ruby with the simpler `extend`, and has been since before the `singleton_class` method even existed, or before we even knew to call it a "singleton class" instead of an "eigenclass" as some used to call it, or not knowing there was such a thing at all. :) 
Also see the anti-pattern, [Call super](https://en.wikipedia.org/wiki/Call_super). 
Context may matter but your statement did not say "for the examples given on the blog" so I added the note for those reading who may not know.
I'm not sure what you're responding to in my comment. I was pointing out that they are not equivalent. The author of the article may have been better of using extend in some cases but I think the idea was to reveal what is happening by showing the relationship between an object instance and the unique singleton class that it has. This code of writing can lead to a better understanding of Ruby's object model even if it's not what you'd sit down and write in a typical application. My favored approach is to teach this idea through common def syntax first and then discover how it works via reflective methods. For example, we could emulate a differential prototype inheritance with this: ``` proto = Class.new def proto.clone; Class.new(self) end a = proto.clone # We could add some sugar to assignments but def does the job for now. def a.ans; 42 end b = a.clone b.ans #=&gt; 42 def a.display_answer puts "Answer is: #{self.ans}" end b.display_answer #=&gt; prints "Answer is: 42" def b.ans; 43 end b.display_answer #=&gt; prints "Answer is: 43" a.display_answer #=&gt; prints "Answer is: 42" # Now we can start looking at a and b to discover how they work. ``` Perhaps I'll write up a post sometime. It's been a long time since I've written anything about Ruby.
If calling super is a code smell, the entirety of Android must smell like a landfill
Something certainly smells here... 
I'm working on a blockchain project, trying to implement Ethereum in Ruby, get passed the Ethereum tests yesterday. https://github.com/ciri-ethereum/ciri Does anyone have interesting in this idea?
Hello, I've updated the [csvpack (formerly known as datapak) library / gem that let's you work with tabular data packages](https://github.com/csv11/csvpack) in ruby. Download comma-separated values (CSV) datafiles in text - also known as tabular datafiles and read into any sql database (e.g. SQLite, PostgreSQL,...), query w/ ActiveRecord and more. Cheers. Prost. PS: You can find 100+ (starter) tabular data packages at the [/datasets github org](https://github.com/datasets) (thanks to the DataHub.io folks). 
Good job, mate! I hope it gets adopted. It opens the door for even more elegant code.
Yes, we are using it on production and transitioned from Carrierwave. It has been a smooth transition overall. We connect it to Amazon S3 so all of our images and files are now stored there. The biggest advantage compared to Carrierwave, other than being really easy to host on other server for example Amazon, is that you don't need to define smaller or cropped images beforehand, just do it whenever you need a smaller image or whatever and Active Storage will just generate a new thumbnail when the first request for a particular image is received. There are of course many other advantages to it that I'm simply forgetting right now. The biggest disappointment with Active Storage is that the documentation is not that great, however that may have been fixed since we were scratching our heads a few months back. The biggest difficulty really was just migrating data. We were hosting all the files on the same server as the rails server so our file management was very poor overall. Active Storage really made us just overhaul our entire file management and we couldn't be happier with the results :) Another one was the generated links. Active Storage generates links on the fly for the images/files since they are hosted on Amazon or wherever and figuring out how that works was a small headache. But after we figured it out we haven't had a major problem.
and you couldn't use paperclip for S3? or ActiveStorage was a better option?
Paperclip was already using s3. I wanted to give activestorafe a try and found out it was cleaner to extend and easier to work with. Both do the same thing but i chose it over paperclip because of its approach in coding attachments. Just used a rake task transfer all my existing stuff to it.
I don't know what a module is either. 
Then you should stop and think what are you doing as long as you are not programming professionally. I myself have a few scripts that do not use any of this. Read Why's Poignant guide. And BTW since everything is an object in ruby, your methods are under Kernel class. Also for loops, try not to use 'for' and 'while' since ruby has all sorts of stuff.. I myself haven't used these in ruby in those few months.
Does anyone pay people to keep updating Rails or is it just through donations?
For loops I just write loop do, and break the loops with break, usually in if statements. 
That sounds like terrible thing... What do you do in loops?
If I'm taking numeric inputs, then I will loop the gets.chomp until I get a numeric input and break it. 
Try to make it until loop.. Something like, "until input is int".
I imagine a lot of the core team works for big rails companies like Basecamp
&gt; Is it bad to code without using classes? For small and simple scripts, it may be fine. But for anything non-trivial, I imagine this would get very messy, very quickly. &gt; Is it bad that I don't use classes and don't even know what a class is? That depends what you mean by "bad", and the context of what the code is for. If you're just writing a few little scripts for personal use, then - while I would still *strongly recommend* learning about classes - it may be OK not to bother. If the code is slightly bigger, it will get messy and confusing to not build it with a clean structure (e.g. with classes) - so it's "bad" in the sense that you're wasting your own time, spending far longer trying to build/maintain the code than you need to be. And if this code is being used by *other people* (especially if you're getting paid to write it), then it's even more "bad" to do a sloppy job with the code structure. So to summarise, I would say: * It's bad for your own education/knowledge to not learn all the language fundamentals. * It's bad for your own productivity to write poorly structured code (but I cannot really comment on how good your code is without seeing it!) * It's bad for your career if you're getting paid to write sloppy code (but I don't know if you're a professional, and don't know how sloppy the code is without seeing it!)
Oh, and you probably could have learned the basics of "what is a class" in roughly *the same about of time as you've spent in this reddit thread*. It's not a super difficult concept, especially in ruby!
Shopify as well
**David Heinemeier Hansson** David Heinemeier Hansson (born 15 October 1979; also known to the Ruby programming language and automobile racing communities as DHH) is a Danish programmer and the creator of the popular Ruby on Rails web development framework and the Instiki wiki. He is also a partner at the web-based software development firm Basecamp. Hansson co-wrote Agile Web Development with Rails with Dave Thomas in 2005 as part of The Facets of Ruby Series. He also co-wrote Getting Real, Rework, and Remote with Jason Fried. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I am saying that despite the edge cases differences, `extend` is the normal, idiomatic, intended-by-ruby's designers, way to do what is presented in the article. And `singleton_class.include` is a weird way to do it. 
I am self taught in Ruby, I planned to do some online courses, but I haven't done it yet. Here's an excerpt from my code using each (I think). https://pastebin.com/zm8C07sc
&gt; just do it whenever you need a smaller image or whatever and Active Storage will just generate a new thumbnail when the first request for a particular image is received. Interesting, can you point me to docs or examples showing how this works? Is the generation done inline in the "foreground"? Like just as a result of asking for... an image URL? In the model layer?
Thoughbot has now declared they are deprecating Paperclip in favor of ActiveStorage: https://robots.thoughtbot.com/closing-the-trombone 
I don‚Äôt see any reason to migrate from carrierwave. 
Congrats! I'm excited to see how 2.0 shapes up.
HTH: https://en.wikipedia.org/wiki/Packing_problems
I do agree from the perspective that Carrierwave is a solid, current and maintained gem. However, if my project is on a later Rails version and the investment to the file upload solution is minimal (no crazy callbacks, advanced post processing, etc) then I would consider migrating to something like ActiveStorage. The main reason for this would be to be aligned with Rails core. In the long run, it will make upgrading the Rails versions for a particular project easier and fewer chances of conflicts with gem versions.
Interesting, thanks. But the thing has to be _generated and stored in S3_ before it can have a link to it! But I guess that's done there. I forgot ActiveStorage has it's own routes/controller built in. I guess it does it in the foreground, and the browser is waiting (and taking up a web worker) for the amount of time it takes to generate, when done on demand?
/u/iKnowInterneteing That was just an old idea, discarded a lot of time ago. In the meantime I rewrote `hanami-router`, to remove the dependency with `http_router`. This new rewriting is really powerful and fast (10k req/s on my computer). If you're curious: https://github.com/hanami/router/tree/unstable
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hanami/router/.../**a5c7969f353abd0c7df61b1ddd56111e4937ea16** (unstable ‚Üí a5c7969)](https://github.com/hanami/router/tree/a5c7969f353abd0c7df61b1ddd56111e4937ea16) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3tzn9a.)
The packing problem is about packing objects in space. You may have been thinking of the https://en.wikipedia.org/wiki/Knapsack_problem, which could work by considering that value = weight. This is probably overkill, but is in the right direction
Very cool, I will take a look later.
Thank you.. Indeed it seems that it is the Knapsack Problem... They all seem to be related ot *Packing Problems* if we do abstraction ot the Physical Quantity.. It could be area, weights or unitless numbers.. BTW, it is interesting to think about this problem with its theoretical aspect..
PHP developer for 4 years learning Ruby/Rails for the last couple of months. I'm only a couple pages into this, but it's seriously amazing work. Your description of the PHP ecosystem and objective approach to comparing the two are seriously refreshing. Really excited to dive into this. Thanks for your hard work!
Wow, thank you. I'm seriously floored. I'm glad you got some value out of it. Please let me know if I can improve it / add to it - me@dylanjpierce.com
Cloudxls (saas)
My advice is use Python with the Pandas library. It's built exactly for these kinds of things and will make your life so much easier. And if you don't know python you get to learn something new!
[Here](https://gist.github.com/remuspoienar/35dd7341f3990fab8305f0de37b2b3c6) is how i did it. Of course i tried to make it as clear as possible, this is not very performant(for now). Also algorithms is not something that i master. Let me know if there's anything unclear
Have look [here](https://spin.atomicobject.com/2017/03/22/parsing-excel-files-ruby/) for options. It sort of seems that is impossible to use one gem that can operate on xls/xslx files. Not that i strongly reccomend it, but where i work we used the one called spreadsheet on multiple projects, and it was quite easy.
you could also use the Object#to\_b method from the **wannabe\_bool** gem, e.g you're not in a Rails project
I use rubyXL for all excel sheet processing in tiny, you could try it out. 
You don't need to define a class for something this small/simple, unless it's being used in a more complex wider context. However with that said, one thing I would suggest here is that you write this using ruby's built-in `CSV` library! 
&gt; Is it bad to code without using classes? No! Is it bad to write _Ruby_ code without classes? Possibly. This is the one of the key features of the language. If you're doing stuff like this in large quantities: def user_disable(user) end def user_unfriend(user, friend) end Then I'd look into classes. 
It might be ‚Äì but you shouldn't worry about it. Write whatever results in clearer, more maintainable code. As the famous quote from Donald Knuth says, "premature optimization is the root of all evil". http://wiki.c2.com/?PrematureOptimization
The types of things I can do with this, especially for later versions of Qo, will be amazing. Get ready for some fun in v0.6.0 once I stabilize the idea!
&gt; However, if there was a service out there that I could upload our data and the data model to and it would build an interactive backend (somehow) for accessing that data, that might also be a good solution -- this solution only needs to be read only. That exists, it's called a Business Intelligence tool. In general they either kinda suck to work with (BIRT, Jasper, Pentaho) or are expensive (Looker). Given that you probably have little data, I'd just build a few CSV/XLS spreadsheets each night and save them on S3. Give your partner links to these files somehow so he can download them and use Excel to get to the data he needs. You can try the google doc approach, but I've found their API pretty flaky when sending anything more than a trivial amount of data. 
Also &gt; Please the corresponding webserver (eg. Nginx) feature Seems to be missing a word.
Based on solely that metric I'd say no. But, I'd have to see the code. Here's [some code that's 300 lines](https://github.com/sshaw/export-pull-requests) and no classes. No problems!
You need to share the full code example, but it looks like you are defining your methods `human` and `ai` as instance methods, but your loop is at the class scope.
Thank you!
Out of my skill set right now unless I use PHP ;)
Neither. It's all volunteers. Some of us are able to contribute during work hours but not most. 
Oh, wow, It has probably been 10-12 years since I've thought about Tk. 
Is it bad? I'll put it this way, it is likely that your code could be easier to understand and maintain if prudent use were made of of classes. Object oriented thinking is more top down than functional thinking. Okay, an example that I liked more than the old example of class Animal, subclass dog, method bark etc. Lets say you were writing CAD software and you wanted to model the lighting. You could have a function that takes a parameter of efficiency, that returns Lumens when fed a certain current (as another parameter), *or* you could model that light as an object, which becomes a certain type of light when you create it, this light class could contain an entire spectrum curve defined with in it so it mimics an incandescent or an LED of a certain color temperature when you turn it on or hook it up to a dimmer. Classes make that type of stuff a lot easier. 
You can check out Redash. It‚Äôs a nice tool that lets you write SQL queries and save them and then you run them daily or on demand. You can also visualize data as well. I believe you can export. 
While I do agree with your post in general, I hope people actually read the full quote from Knuth (in the link you provided) &amp; not take it out of context like most of the internet does.
I agree with u/moomaka, though I‚Äôll add that in the short term you might be able to get away with a less flexible solution. The only use case I see in your post is looking up customer information. If that‚Äôs mostly what you need, consider integrating with a tool like Intercom. Intercom allows setting data for each customer, so you can add basic information and search on it. We have Looker where I work and it‚Äôs great for hardcore stuff, but Intercom still tends to be the tool of choice for simple ‚Äúfind customer‚Äù reports just because the interface is so easy. 
That's awesome, thanks! Glad I now know about [Qo](https://github.com/baweaver/qo) and also after following links in that repo the [ruby version](https://github.com/lazebny/ramda-ruby) of [Ramda.JS](https://ramdajs.com/docs/#)
Blazer might work for you. It's solid. [https://github.com/ankane/blazer](https://github.com/ankane/blazer)
What happen if you try to\^ `expect(page.has_css?("input")).to be == true` If this length return, looks like "which one, cuz i see 3" - it' s ok then you can `expect(page.has_css?('#id1')).to be== true`
Nice initiative, well done mate
It gives me an error: undefined local variable or method `page' for main:Object (NameError)
&gt; Mostly Quoran Techno Engine So... you're looking for friendly Ruby experts who are also into Islam and the Techno scene? If that's what you're into then that's great but I can see why you're struggling to build a large community on that basis because your pool may not be very big to begin with.
Nice try, ISIS.
Em, my fault, i think it's work for all ruby. Ok. What if: `$`[`b.radio`](https://b.radio)`(value: '0').exists? =&gt; true` 
So, you do one mistake, you can use your code, just change position `":"` like: `$b.radio(id:,'id1').exists? =&gt; true` then `$`[`b.radio`](https://b.radio)`(id:'id1).set` it must be work, i think 
There is a style of programming, called functional programming, that is pretty much classless. But ruby is possibly the most object oriented language there is, so it would seem a bit strange to write something other than OOP. Classes really aren't that complicated, and are super useful. I would just take the leap and try them out.
I think this article misses some stuff. In a more statically typed language, like Java, DI containers or hard-coded constants are the only real choices. In Ruby it's trivial to just pass a class in, because everything is dynamically dispatched.
A useful introduction to the concept, particularly for rubyists who haven't been exposed to dependency inversion. Eventide uses an approach similar to the "hybrid" approach discussed in the article: http://docs.eventide-project.org/user-guide/useful-objects.html We have enjoyed all the benefits of depending on abstractions, not concretions, without needing a container object to instantiate classes.
In Ruby you can pass classes as parameters. I haven't seen a situation where a full dependency injection container is a better solution and more expressive then simply accepting the class as a parameter.
Good bot.
Perfect!
I'm not sure I that follow what you mean. I can't think of a situation where you would pass in a container as an argument, where it would be possible to pass in a class instead.
Nice article. LOVE all comparisons between anonymous functions, lambdas etc.
Well, that's not very nice to more than 350 people.
As someone new to Ruby, what is the most common practice you see in production code? Coming from PHP (Laravel/Symfony), I find it hard to imagine a scenario where dependency injection is not used frequently in a code base. Indeed, the very core of OO software design relies on concepts like dependency injection/object composition. Is it really considered good practice in Ruby to ditch these concepts for the sake of less boilerplate? If so, why?
You can, it'll preform the calculation correctly.
You know, something that could be interesting is [integrating Ruby support](https://github.com/stepan-mitkin/drakon_editor/issues/26) into the [DRAKON Editor](https://github.com/stepan-mitkin/drakon_editor): http://drakon-editor.sourceforge.net/
If you're doing lots of calculations it's worth understanding how "floating point" numbers work http://fabiensanglard.net/floating_point_visually_explained/. You can use BigDecimal to help solve some of the precision issues https://floating-point-gui.de/languages/ruby/. 
do you need to know this kind of stuff to get job as ruby developer?
wrote this for a friend who is just learning Rails, Posting here so that maybe someone will finds this useful too ;) 
Literally a proper usage as the word is defined in the dictionary. ## Definition of guy **1** **a** **:** [man](https://www.merriam-webster.com/dictionary/man), [fellow](https://www.merriam-webster.com/dictionary/fellow) **b** **:** [person](https://www.merriam-webster.com/dictionary/person) ‚Äîused in plural to refer to the members of a group regardless of sex * saw her and the rest of the *guys* **2:** [individual](https://www.merriam-webster.com/dictionary/individual), [creature](https://www.merriam-webster.com/dictionary/creature) * the other dogs pale in companion to this little *guy* **3** *often capitalized* **:** a grotesque effigy of Guy Fawkes traditionally displayed and burned in England on Guy Fawkes Day **4** *chiefly British* **:** a person of grotesque appearance ... I wonder when we will get to the point where " " is the best choice for all posts. At some point the most neutral non-offensive possible post is simply a single space or not posting at all. I get the gender neutral thing and bro town, but there is a problem with the way that all possible ramifications to all wordings and statements of ideas and thought are policed for any potential (or perceived) offense to anyone. This is especially so when groups are so fragmented and each of our sensitivities are so sharp that there are few truly neutral ways to convey any given thing. 
What a bullshit. Someone somewhere declared something "anti-pattern", forgetting even before that specific case where it could be slightly worse than other options, and others will just declare this a global rule, put it in rubocop etc., pass as common knowledge, shutting down their brains entirely.
Could I use this to take screenshots of websites or its a bit out of the scope?
Hey! Thanks for sharing! I'm looking forward to contributing to this. I've been writing a lot of our own framework internally and have been thinking about this a lot. Recently I was forced to pick up Python because the full Scrape framework was too compelling to pass on. I've been miserable!!!
Checking a single key: if your_hash.keys == [:key_you_want] # do stuff Checking for multiple keys: if [:city, :state].any? { |k| your_hash.key?(k) } # do stuff 
**Literally** already a conversation that already happened. Please respond to the proper thread https://www.reddit.com/r/ruby/comments/959ww0/comment/e3ro67m 
A Japanese spider?
I've frequently written a guard condition like this when I'm trying to figure out where extra hash keys are coming from: ``` bad_keys = hash.keys - [:city, :state] raise bad_keys.inspect unless bad_keys.empty? ``` For your specific case, I might do something like: sorted_keys = hash.keys.sort if sorted_keys == [:zip] elsif sorted_keys == [:city] or sorted_keys == [:state] elsif sorted_keys == [:street] else raise "Expected only one of zip, city, state or street" end I sorted the keys because I'm guessing you're going to have an if in there that wants more than one key, but if you only want one key, I'd probably be guarding on the hash size first and then just reading the single key to if on. But that's pretty ugly too. I'd probably stop using a hash pretty soon and turn that bad boy into an object that I can define my own methods.
Honestly it'll probably make sure you don't get a job as one :P Joking aside, esoterica is not and should never be required knowledge for a job. I've just been working with Ruby for years so I tend to find ways to bend the rules a bit to do fun things to the language. 
Looks great - definitely the first serious Ruby scraping framework I've seen that can hold a candle to scrapy. I see you mentioned scrapy several times in the docs - was there a reason you created this instead of just using scrapy?
Thanks for the link, it's aways great to hear about alternatives. `localhost` is designed to be very inflexible, but provide just the basic self-signed certificate. I didn't want to make a general purpose CA. The end goal is (near) zero-configuration `https://localhost` development, which I think is largely achieved with the latest release.
That's exactly how I felt üòÇ
You don't ditch DI you just don't need a framework to do it. example: [https://gist.github.com/mgreenly/192627cb10ea69d8c611862bd2303b3d](https://gist.github.com/mgreenly/192627cb10ea69d8c611862bd2303b3d)
The most common practice I see is not using DI at all (not saying that's the best method by any means), in most code bases I've worked on the "standard approach" is just initializing objects using in-line hard-coded constants, or sometimes in a private method. Obviously in PHP, if you do this you end up with code that can't be tested in isolation, the problem in Ruby is that you have monkey-patching, and entire test frameworks with DSLs to make monkey-patching for testing easy (as mentioned in the article), so you can ignore good design principles and still end up with code that can be tested in isolation.
yes :) [https://en.wikipedia.org/wiki/Kimura\_spider](https://en.wikipedia.org/wiki/Kimura_spider)
Scrapy didn't support out of box easy scraping of Javascript rendered websites. It has Splash [https://github.com/scrapy-plugins/scrapy-splash](https://github.com/scrapy-plugins/scrapy-splash) (Their own Headless browser, special for Scrapy) but even if so, it's not that easy to interact with Splash browser (click buttons, filling forms, etc.), you have to provide Lua (yes, not Python) script for that.
Why not just use selenium webdriver with headless chrome ? It takes care of JavaScript and it's using real browser. 
In my experience, DI is used very sparingly in Ruby, with the exception of a few people who love it and use it everywhere (e.g. the dry-rb gang). I think that the people who avoid DI aren't doing it because of the boilerplate, they usually see DI as unnecessary complexity, and that their code would be simpler and more easily understandable without it. I'd be interested to see some examples of good, modern PHP for comparison, because I haven't really been keeping up with the evolution of PHP.
Python, Java, &amp;c. are currently supported so adding support for Ruby should be fairly easy, I would think.
Same reason why sometimes people prefer Ruby on Rails instead of Sinatra :). Kimurai already uses selenium webdriver because it uses Capybara
Man good work but your selfie pic on github gave me some bad vibes lol
I think the use of `attr_accessor` should be avoided where possible. Using `attr_reader`is fine, but I've seen far too many bugs that were caused by the over-use of `attr_accessor`. All it takes is one coder using the same name in an another class, and suddenly you have bugs that are both hard to notice and hard to track down. If one class needs to constantly modify a variable in a different class, then it may be time to refactor that.
Thanks for feedback about my selfie! You're right probably I should change it
Thank you! Looks like I missed it while browsing the readme! 
Hello, I've put together a new library / gem, that is, [csvutils - a collection of tools 'n' scripts for working with comma-separated values (csv) datafiles](https://github.com/csv11/csvutils) - the world's most popular tabular data interchange format in text :-). Command-line tools include: `csvhead`, `csvheader`, `csvstat`, `csvsplit`, `csvcut` and more. It's just a start. Happy data / text wrangling with ruby. Cheers. Prost. PS: For some getting started .csv datafiles, see the [/football.csv collection](https://github.com/footballcsv) (incl. English Premier League, Bundesliga, Seria A, Ligue 1, European Cup, etc.).
Chrome allows you to disable the security warning for localhost: https://improveandrepeat.com/2016/09/allowing-self-signed-certificates-on-localhost-with-chrome-and-firefox/
There is an open source BI tool in ruby/rails that I use with non-technical employees that works great: https://github.com/ankane/blazer
Ah I'll give that a go, sorry I'm new to the syntax
Think about the string interpolation. If `channelName` is "foo" and `specifiedUser` is `"Rebecca"` then after interpolation your query becomes `select * from foo where user = Rebecca`. There should be quote marks around `Rebecca` because it's a value, SQLite sees `Rebecca` as a column name. But you should avoid using string interpolation at all here. Use a parameterised query instead, eg `execute("select * from foo where user = ?", specifiedUser)`. Using string interpolation opens you up to [an injection attack](https://en.wikipedia.org/wiki/SQL_injection).
No need to apologize, we all start from somewhere! Good luck and never hesitate to ask more questions if you run into more problems. :)
Ahh, I see what was going wrong now. Thanks
Does this support tab separated values? Also, what if the CSV is actually | separated? I‚Äôve dealt with that type before and it sucks, would be nice to have it supported
All CsvUtils tools use the standard CSV ruby library "under the hood" that support almost any separator. For a different separator you can pass in sep: "\\t" or sep: '|'. I only tested it with semicolon (that is, sep: ';'). See &lt;[https://github.com/csv11/csvutils/blob/master/lib/csvutils/cut.rb](https://github.com/csv11/csvutils/blob/master/lib/csvutils/cut.rb)\&gt; as an example method signature with the sep keyword. Cheers. Prost.
[removed]
Try to separate output from logic. There‚Äôs no gem or library when your ‚Äúgem‚Äù is still outputing to console both the result and CLI Text. 
This product seems like a countermeasure for flawed deployment processes, in particular non-reproducible builds masquerading as reproducible. For instance, if you expect Gemfile.lock all by itself to make your build reproducible, you're exposed to all the problems that this kind of product is meant to solve. Specifically, if a gem referenced by Gemfile.lock is pulled from rubygems.org, you would never be able to reproduce whatever build wrote out that Gemfile.lock in the first place. A far, far cheaper alternative to piling on more tooling is to simply store the `.gem` files of all your dependencies with each build. Okay, rant time (you've been warned): traditional package managers technically solved this problem years ago with source packages. I keep hoping the web development world will one day realize that there are solutions in the broader software development landscape that they can benefit from, but so far it's not looking good, sadly. With the rise of native-web-development tools like Electron, web development is having far more of a negative influence on software development than vice-a-versa.
Yep, some people like it one way, some people like it the other, IDC which as long as the code is well designed, which tends to be more likely when DI is used in my experience (YMMV). Personally, I've seen way too many instances of tightly coupled code with dependencies that belong on either side of a boundary hard-coded into the same file, then monkey-patched in a brittle unit test to allow the code to be tested in isolation.
The call super anti-pattern is a legit framework design issue. Checkout the example on the Wikipedia page. Or here: https://www.martinfowler.com/bliki/CallSuper.html
The Laravel framework is heavily inspired by Rails, so you may want to take a look at that to see some well-written PHP. Here's the HTTP router, for instance: https://github.com/laravel/framework/blob/5.6/src/Illuminate/Routing/Router.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [laravel/framework/.../**Router.php** (5.6 ‚Üí 2aff496)](https://github.com/laravel/framework/blob/2aff496524fc5a7abef301744c389c65a7a3fd71/src/Illuminate/Routing/Router.php) ---- 
People will downvote anything. 
Sorry I don't understand - what do you mean by " separate output from logic " Can you explain in more detail (maybe with some examples).\`Cheers. Prost.
It was very weird having a great scripting language like ruby without its scraping framework . Great effort 
Note that the CFP has been extended until August 17th!
Same thing that I've been working on for over six months, and likely will be working on for months to come. Simulated character AI for tabletop RPGs. It's currently able to generate realistic personalities for random NPCs, but the applications go far beyond that. I'm planning to eventually adapt it as a Discord bot, and have been considering expanding it so that it works as a GM emulator for solo-roleplaying. 
Thank you for your feedback banister! You are absolutely right, saying that Rubyist are friendly doesn't imply that other communities are not. All I wanted to communicate here is that friendlyness to me is something Rubyists specifically aim for. Hope that makes sense!
Well, I still don't think that's true at all with perhaps the exception of matz and a few other notable rubyists. Definitely not true as a general statement about rubyists. What is true about rubyists though is a taste for drama especially drama about gender and God knows what. 
Not going to click on a ONE WEIRD TRICK title like this, anybody wanna tl;dr?
TL;DR Rubyists are friendly, has a welcoming community for beginners, they care about code quality and quickly delivering value. 
IOW, the first things everybody learns about the Ruby community. Thanks! :)
Looks like random Selenium QA automation engineer decided that his setup is somehow the best among thousand of similar in any another company which uses Ruby for QA automation. But looking at how many dependencies it already has (including the damn activesupport), fuck no, I won't recommend to build things with it. Just take Capybara, install xvfb, firefox and launch two jars -- that's it, no magic involved, ffs.
It's just a Capybara with several unneeded dependencies.
That‚Äôs not very friendly üòò
Found the anti-CoC.
One thing - you can live without database cleaner in RoR 5.2, just enable transactional tests. 
Agreed. The way I try to explain it is that Ruby offers the shortest distance between my vision for a solution and a working implementation of that vision, with the least possible compromise along the way. You don't have to bend over backwards to accommodate the language, it bends to your will. But yeah, double edged sword; it does nothing to protect you from yourself.
I don't think that's true at all. It's clearly very heavily inspired by Scrapy, which has quite a large community behind it, and for a good reason. If anything, this random QA engineer was trying to mimic a lot of great features in Scrapy and decided to contribute to the public Ruby community so that people like you and me can choose to use or improve it. Or, even easier, choose to not use it.
Between your two comments, I'm feeling like you've got this down. I'm curious what your setup is, and why you feel this gem is so unnecessary? You also keep referencing QA automation, which while very similarly related, large scale scraping projects has different types of challenges. You are not only trying to verify, but also clean and add value to the data. Ive found this to be quite a bit more complex than just firing up a few selenium mechanize instances. Scraping data from a page is the easy part. Managing it all in a project, I feel, is the true challenge. This seems to provide an opinionated framework to work within, including a lot of the management tools. I'm curious of your own experiences and tooling. I'm not trying to troll you or anything. Personally, I had been building the same tools at my company, but gave up when I saw how many concepts were already baked into Python and Scrapy. Managing ~130 different ecommerce scrapers is a massive chore. After reading a book about the true power of the Scrapy framework (it's quite a bit more than just a browser automation tool), I decided I needed to reluctantly pivot to learning Python. Doing so has given a lot of great insight to how to try such tooling again in Ruby, and then this project came along.
I was able to find this which will work well: https://tabler.github.io Now I'm trying to decide how to best implement. I'm thinking of using jekyll locally, with a bootstrap script that: * Downloads generated JSON files from s3 and places them in the _data directory * Runs jekyll serve This way, the data never leaves my business partner's laptop, and I don't have to worry about (web) security and/or automation. I'd like to avoid querying the database directory, as I have models within Ruby to work with that already structure the data well. Lots of .to_json will work just fine. Thoughts on this?
wtf? 
Uh, there's been a shit-tonne of Ruby related drama over the years. And yes, most of it related to twitter mobs and gender related stuff, so i think he has a point. I didn't say anything about CoC or whether he's against it, but you cannot deny there's a lot of drama and that Rubyists have been disproportionately loud.
Do you think perhaps that an availability bias might be in play here? Would you say Ruby is your predominant language? Not sure if you‚Äôve been following node but there‚Äôs a lot of ‚Äúgender‚Äù issues there as well. If you‚Äôre mostly reading Ruby news then it would make sense that you feel that Ruby has higher than average scandal rates. Also fwiw I‚Äôm generally in favor of Ruby being an inclusive language and an inclusive community. I don‚Äôt mind the boat rocking as long as it ends up in a better place when it‚Äôs done. 
Just one tip, you can use rails instead rake in Rails 5. I myself dont even use rake anymore
Nice!
Can you please provide example of what you mean? Maybe I'm not aware of this feature
You can use "rails db:migrate" instead "rake db:migrate". This was a big feature on Rails 5 at time. You can kinda forget rake word lol
Hello! Thanks for your comment! I'm not saying that this gem is an ultimate scraping solution. But, after doing scraping using Ruby for a two years (where 1,5 years I did it FULLTIME), I got some ideas how should looks like a good Ruby scraping framework which will cover most of my day to day requirements. It's not for everyone, of course it's not that flexible like Scrapy. But Kimurai has all base things which are usually needs while doing a web scraping. And it's written in Ruby. Not Python. I'm not a Python developer. I'm Ruby developer. So I want to write programs (including web scrapers) using Ruby language. Again, thanks Scrapy for inspiration. 
Since you‚Äôre a DBA, you could look into using the [scenic gem](https://github.com/thoughtbot/scenic), which would allow you to create a db view, so you could use raw SQL that I imagine you‚Äôre pretty comfortable with to define a view that contains all the columns across the joined tables you want to export, and this view is used to back a (read only obviously) active record model, allowing you to use the same active record object methods, without having to try to force activerecord to build a complex query. Then you can just do `FooReport.all.to_json`. If you can‚Äôt add dependencies or modify code, another option you could look into dropping down into [arel](https://www.rubydoc.info/github/rails/arel) to compose the query and select all the columns across the tables. However, this method is not as clean as using scenic, it‚Äôs still a powerful tool that comes with rails and works (mostly) seamlessly with activerecord. I really like using Arel actually, and as a DBA you might find it a bit more pleasant to work with for building complex queries than using activerecord‚Äôs api.
&gt;QA engineer I never worked as a QA engineer :)
The Rust community seems fine, but my first experience with the Python community went somewhere along these lines: I asked a newbie question on a newbie forum, and got chewed up for not sticking to the standards such as 79 characters per line. The forum was full of the same: no answers, just rigid policing of the style guide. As far as I can tell, there are clear differences between the coding communities. 
Lots of great books and videos out there!
I don't mind that either, but honestly it's the twitter hate mobs that are the worst. Whenever there's any kind of drama i notice that rubyists start ganging up on the person on twitter and doxing them, this shit is not good.
I‚Äôve not seen any doxing. I have seen people impersonate Ruby core members to spew hate and anti inclusion messages. 
Here's hoping that [Hash#=== proposal](https://bugs.ruby-lang.org/issues/14869) gets traction. 
Associations are free with rails. https://apidock.com/rails/ActiveModel/Serializers/JSON/as_json You can do: Foo::Bar.all.to_json(include: :otherstuff) If you provide exact models/methods I can tell you exact methods
&gt; FactoryBot is a rewrite of older gem with the name FactoryGirl It's not a re-write, it was just renamed.
&gt; I have seen people impersonate Ruby core members to spew hate and anti inclusion messages. How often has this happened ? be honest. And compare that to the number of twitter attack mobs spear-headed by Sarah Mei, and Coraline and so on. They infiltrate themselves into every single drama and fan the flames. You are right to be concerned about inclusion and equality and all that, but the vicious, relentless, mob-based approaches by some of the Ruby community are not a good way to go about it. You seem like a reasonable person, I haven't seen you engaging in this hate-filled mob rage but i also feel like you should at least acknowledge it's not the right approach. There was even a case a couple of years ago when the ruby twitter hate-mob targeted the WRONG person (he just had the same name of the supposed 'sexist'), calling for him to be fired, spamming him on social media, emailing his employer and so on. When they found out it was the wrong person, there wasn't even any apology, there was no attempt to address the harm done. This stuff is terrible and i hope you can call people out when they do it rather than just brushing it off as "rocking the boat" and thinking it's going to result in justice in the long-term. I don't think it will. It just results in a shitty climate of fear, which isn't even about justice, it's about ganging up on someone and jumping on the band-wagon. 
Ruby offer many other values that can not be quantified, Friendliness, Code Beauty, etc.
I like the Rails doctrine in answering "why" rails is different and worth picking up (garnted, it's about Rails and not Ruby but still relevant to the discussion). [https://rubyonrails.org/doctrine/](https://rubyonrails.org/doctrine/)
The title is fine , why can't you just read it ? It's about Rubyists being responsible for global warming.
You said there was doxxing. There has been no doxxing that I‚Äôm aware of. There was a hate mob against the wrong person? Who, when? It sounds like you‚Äôre dodging. It sounds like you‚Äôve made up an alternate reality version of the Ruby community to support your biased views. Sara is a co-worker of mine and a great person. Coraline got Ruby hero award the year that I did. As I see it you‚Äôre trying to start flames where none exist and fan them. It looks like the problem is you. 
Kinda sounds like you've had some personal experience here that you're eliding.
Maybe every tip shouldn‚Äôt end up in /r/ruby. Maybe your best tip of the week. Look forward to reading. 
Nokogiri is a thing
nokogiri is ok if you scraping a website that doesn't depend on javascript , it is just an html parser .
If your script is under a couple hundred loc, then you don't need OO but it is something that you might want to practice.
Also Hitler invented Ruby.
Pertect! Thanks for share.
You can use backticks like: 2.5.0 :001 &gt; result = `host google.com` =&gt; "google.com has address 172.217.30.238\ngoogle.com has IPv6 address 2800:3f0:4002:808::200e\ngoogle.com mail is handled by 20 alt1.aspmx.l.google.com.\ngoogle.com mail is handled by 30 alt2.aspmx.l.google.com.\ngoogle.com mail is handled by 40 alt3.aspmx.l.google.com.\ngoogle.com mail is handled by 50 alt4.aspmx.l.google.com.\ngoogle.com mail is handled by 10 aspmx.l.google.com.\n" To make system calls and capture output. If you need to do more complex things like capturing process ID or exit status, take a look at [Open3](https://ruby-doc.org/stdlib-2.5.0/libdoc/open3/rdoc/Open3.html)
Thanks for the input mate. I'll make sure to use backticks when I start to mess with this. I'll also check Open3. Peace
Keep in mind, there's often a Ruby way to do it without shelling out. For example https://ruby-doc.org/stdlib-2.0.0/libdoc/resolv/rdoc/Resolv/DNS.html
Maybe worthy to mention: If you want to do this with user data aka. unsafe data then you should really use something like [Shellwords::shellescape](https://ruby-doc.org/stdlib/libdoc/shellwords/rdoc/Shellwords.html#method-c-shellescape) if you want to shell out.
There wont be any user data on this but I'll check the effects of your suggestions regardless. Cheers
Thanks for the link!
BTW, the script tests IPs/Domains against a handful of blacklists. Original project is here: [https://github.com/IntellexApps/blcheck](https://github.com/IntellexApps/blcheck)
Or at that point just wrap `Open3#capture2e`...
Have a security-awareness high-5, that was the first thing I thought when I saw the backticks :)
You can't use ? for column names/table names.
With a recent program I made, I was able to incorporate she'll commands... Maybe it can help you https://github.com/FadiniGIT/BackupScript-2.0
Congrats on taking control of your platform! This is not only a great adventure for you, but also makes the internet a better place. I get excited when I hear these great stories. I totally get your point about how its more expensive, both time and financially to host your own app. There are a lot of great hosts out there, and I don't want to really come off like I'm plugging any. But there are great $10/mo private hosting solutions out there that give you a full shell access, public IP address, and great support. When you feel comfortable sharing your code it will help you not only reduce the amount of time you spend bug fixing things yourself, but allow other people interested in a similar solution to contribute to improving it. I hope you post it on Github, Bitbucket, or similar service.
#2 seems about right. I don't even understand how #1 could work. 
#1 would basically just wrap the id internally I guess. Some C APIs work like this (mainly on windows), but the #2 seemed better to me too. I'll support both, seems like bit more useful. I hope I'll manage to get the blocks working, it's partly trial and error at this point :/
I still don't think number 1 can work. How can you remove a block you already added by passing a new block that returns false, how can the receive possibly know which already added block to remove? It's supposed to somehow know "the block with the same code except for not having return false at the end"? I don't think that's possible. I'd be interested in seeing a proof of concept showing it working, even though I don't think it's a great API anyway, heh. 
I don't love ruby's built in `Observable` API, but it might be a good place to start. It will show you one approach for how removing listeners might work.
hm, I guess I could modify its methods to support block argument as well
I kinda liked the [Signals](https://photonstorm.github.io/phaser-ce/Phaser.Signal.html) (and [SignalBindings](https://photonstorm.github.io/phaser-ce/Phaser.SignalBinding_.html)) from the Phaser game framework (JS) but tbh I never had a use case to apply it to Ruby. The essentially did #3 except that you don't reference the block itself but the add method (on a "Signal") returns a new "SignalBinding" object with some methods like removing it from the signal or just conditionally activate/deactivate them.
&gt; Hm, what about RubyVM::InstructionSequence.disasm and detecting if the iseq ends with Ok, I guess one should never say "not possible" in rubyland, but... yeah, no. :)
Noah makes a good point about the guide being focused on returning JSON, instead of rendered HTML. We should really fix that: server-side rendering is definitely the Railsy approach. And we do have an API to make that easy; the fact this article gets distracted with how ugly it is to roll your own shows we need to do a better job of highlighting that, too. Until then, the best option to see the Official Rails Way interpretation of Action Cable is probably the last few minutes of the your video on https://rubyonrails.org/ The only thing I really disagree with in this article is that "A Rails API [tends to have] excellent documentation": it grows over time -- so the more established components have great contributed guides, for example -- but I think our track record on initial documentation for new features is pretty consistently not-so-fabulous.
Personally I'd go with option #0: don't. Allow blocks as a convenient shorthand, but by their nature, adding them is a one-way street; if people want to be able to remove it afterwards, they have to use a lambda [which they can store] instead, as you've shown. (This is how ActiveSupport callbacks work, for example: you can skip a callback you can refer to, but if it was defined as a bare block, you're out of luck.) If that really doesn't work (e.g. callers ~always need to remove it later), then I'd go with #2. (Noting the thing you return can actually be the block-as-proc.. no need for a separate identifier.)
For anyone not in the know MD here is a top Rails contributor. Thanks for the insights! I‚Äôve still not actually implemented a ‚Äúreal world‚Äù action cable feature. I keep brainstorming and keep coming back to some kind of ‚Äúchat‚Äù. Would love to add a non-chat based AC feature to https://www.codetriage.com 
&gt; but I think our track record on initial documentation for new features is pretty consistently not-so-fabulous. Not that that's anything to be proud of of course! Personally, I think people should no more accept a major new feature without docs than without tests. 
The Shrine test suite initially used actual S3 calls, and I was reborn when I found out aws-sdk stubs and rewrote the test suite. I was happy I didn‚Äôt have to resort to VCR or WebMock, the aws-sdk stubs were so much easier to use. The new API call recording looks very exciting. I had to use assertions inside the dynamic procs to test everything, and it‚Äôs not great, because some tests will pass even if that API call was never made (and thus the Proc never called). I look forward to using API call records instead.
For what it's worth, I noticed this to post here, because rubyland.news, the rss/ato feed aggregator I run, includes the RSS feed from `https://aws.amazon.com/blogs/developer/category/programing-language/ruby/feed/`. Shameless plug for http://rubyland.news. Also cause lately I was wondering if there was any point to rubyland.news after all, was I actually finding anything useful there that wasn't on here already anyway? Turns out, yes, at least sometimes. :)
The thing I would do in real apps I work on if I were to do it, is a "mailbox notification" feature. Like the reddit red envelope, but it can turn red even without reloading the page. This is something that would make sense in some real apps I work on and be appreciated by users... but not enough value so far for me to be willing to mess with AC. :)
&gt; But there are great $10/mo private hosting solutions out there that give you a full shell access, public IP address, and great support. OP said he was paying $10 *a year* for the original WordPress. You aren't going to match that. And said they were paying around 9x more now, which would be around $90/year, actually less than the $10/mo you suggest. 
One note is that it kinds depends on whether or not you're doing TDD, and the state of your models. * From your #1, if you have business logic in your models, test it. (I tend to put this code elsewhere - outside of Rails MVC - but it's still common to have in models) * If your validations are custom, or complex, test it. (i tend to use form objects instead of model validations - complicated validations are code smell for me) Also take some time to read [betterspecs.org](http://www.betterspecs.org). It doesn't directly answer your question, but if you're new, it's well worth reading. I'm interested in others answers to your question, though, as I hear a lot of people arguing to not test a lot of what you're proposing.
Deployment options is also appreciated, what is the best practice way of running ActionCable in production? Is it spinning up a few seperate Puma servers that lives at ac.sitename.com, with a loadbalancer or something in front, or how?
tl;dr imho, if you see a line of logic/code, test it. If it is using another method, trust that behind the scenes implementation, and stub it's return/response as needed. Unabridged: Personally, I follow the "test what you see" philosophy for model/unit tests. Trust that the code your model relies on outside of itself is properly covered and behaving as expected. Mock/Stub those dependencies as needed, construct the scenario for each test case to match the environment you expect/want for that situation. Point being, don't test ActiveRecord methods themselves, but rather stub them and set them up to deliver what you want for a given test case. Assert that your attrs are properly using AR validations? Yes! Send in specific examples of data to check whether the AR (built-in) validation is doing what it says it does? Nope. If you see a method in your file, test it. If its using a method with an implementation elsewhere (AR, another class, a helper module, etc), just test it is being called properly -- trust that those guts are working as intended and the associated tests for that entity exist on their own. Best of luck! 
Missed opportunity to name it ttpie
Why, oh why, is anyone trying to tell the rails cache to store `nil`?
I read that wrong, too, but actually there are a couple ways to do better. Elastic Beanstalk would beat the Wordpress plan if the blog falls into the free tier (which I'm sure it does), and a $5/mo Digital Ocean plan beats the new $90/yr service. Both of those would also be educational, if OP wants to understand the stuff that's running his app.
How did I not know about betterspecs.org? Cheers for sharing.
Prepare to go nuts refactoring specs after you read it...
Your blog could probably fit into the heroku free tier, depending on your database usage.
Doesn't the aws free tier expire after a year?
That's true (AFAIK), but I imagine a free year would be appreciated by someone who is bothered by paying $10-120 per year for any of the other options mentioned. Don't know how bothered OP is, but they did call out the price difference.
For medium-scale apps, I'd personally default to using the same puma cluster that serves your primary web traffic, though at a certain point it probably still makes sense to use separate server pools even if they're running identical code. Nginx should be happy to handle the main connection distribution work (https://nginx.org/en/docs/http/websocket.html); you could put a TCP load balancer in front of that if needed. My only production-level experience with a proper ACa setup is from when I was at Basecamp, where it ran as a separate cluster at least partly for historical reasons: pre-release/early versions were not very friendly with running in the same process as normal web requests.
I think we do a reasonably good job of insisting on _API_ documentation; it's the more structured guides that can suffer more... partly because it's hard work, partly because technical writing is a separate and valuable skill set, and partly just because the full prose "how to best use this" does evolve as more people start doing so (within certain constraints, of both high level vision and low level aesthetics). While I agree it'd be very nice to have comprehensive "how to do the thing you want to do using this" docs for everything we add, as soon as we add it, I think there's a more useful mid-line to be drawn. To take the code execution guide as a personal example: given that it was easy to turn off the new functionality entirely, I reject the suggestion that we should've withheld the support for threadsafe reloading from everyone until I'd documented how unusual applications could achieve their requirements while still keeping the new feature. Like most contributors, I only work on Rails in my free time, and that's a limited resource... if we have something that'll Just Work for the majority of people, and others can just avoid/disable it entirely, I don't think it's fair to punish that majority (by holding back a feature that'd work fine for them) or me (by turning my hobby into unpaid "real work") just because I thought ahead enough to design the underlying API in a way that'd eventually allow that last 10% to get the best of both worlds. (Consider how comparatively easily I could've proper-documented "if you're spawning your own threads, you need to turn this off and reload by restarting, or go back to disabled request concurrency and hoping it doesn't break", and that that would've given the same benefit to the 90%.) (You're welcome, and I really am sorry it took so long -- you probably saw the PR get merged in November; it then would've graduated to https://guides.rubyonrails.org with the release of 5.2.)
#2 is really testing your factory definition. Whether that's useful is up to you... it's unlikely to ever be your only failing test, but it might give a clearer pointer to what's wrong. The edge cases that matter are those that affect your code: if you have a condition that checks `if age &gt;= 21`, then 20 and 21 are your edge cases. If your code is going to behave identically for age 50 and age 99999, then the latter isn't much of an edge case, despite being a more extreme value. (This is obviously white box testing; if you're writing tests that assume you don't know what the implementation looks like, then you can derive some edge cases from business rules, but otherwise might be more likely to cover a wider range of arbitrary values, even where the expected behaviour is consistent throughout.) Personally, I don't bother testing simple validations at all. If it's a one-liner "validates presence" in the model, no future developer is going to accidentally introduce a logic error: if they delete it, they meant to (regardless of whether they should / that's a good idea), and will just delete any related spec too. (A format validation with a regex, OTOH, would be worth testing: you're not testing _that_ the validation is there; you're testing that the regex does/doesn't match the things you need it to.)
I don't mean to harp on this one issue or critisize you personally. You did some really clever work there. I don't think API level and guide are _entirely_ different. One could imagine in-code comments explaining everything one needed too -- in this case, I believe there were very little API in-code-comment docs either. &gt; (Consider how comparatively easily I could've proper-documented "if you're spawning your own threads, you need to turn this off and reload by restarting, or go back to disabled request concurrency and hoping it doesn't break", and that that would've given the same benefit to the 90%.) Yes, that would've helped! Also if there were a way to _turn off_ the new feature and go back to pre-5.0 behavior. I don't believe there is? Or is that what you mean by "disabled request concurrency"? You say "others can just avoid/disable it entirely" -- is there a way to do that I still don't know? My understanding until now was that there was no way to go back to "before improvements" behavior, if there is I still don't know it but would like to! While I am amazingly impressed you figured out how to make Rails auto/re-loading thread-safe (something I think many thought was basically impossible before)... I think the outcome has been more disruptive than expected -- to anyone trying to do concurrency, which may be a tiny minority, not sure, but is something many of us _hoped_ was becoming popular and no-brainer, especially with concurrent-ruby. Concurrency failure condition went from occasional race-condition exception to reliably reproducible deadlock; if you are trying to write/use concurrent code that is not rails-specific in rails you almost always will trigger the failure condition. This has been really disruptive and a set-back to further adoption of concurrency. And the reason it's relevant to docs is that the lengthy delay between this becoming true and docs being present that would allow the bystander to make any sense of it or start to figure out (not always trivial or obvious) remediations -- was really disruptive and dispiriting, sending some people away from the problem never to return, or to remove concurrency from their code in frustration, changing the curve of adoption of concurrency in the community with arguably long-term consequences. I don't mean to harp on it or make you feel bad... but docs really do matter. 
yeah, I really need some specific tutorials on this, personally. I don't really understand the deployment situation with AC. 
Damn it! Maybe next time :) The link works fine for me? Are you sure it wasn't because GitHub was down?
&gt; (A format validation with a regex, OTOH, would be worth testing: you're not testing that the validation is there; you're testing that the regex does/doesn't match the things you need it to.) I wonder if it makes sense to extract the actual thing you want to test so you can test it without AR in that case. It could even be as simple as: SomeModel &lt; ApplicationRecord NAME_VALIDATION_REGEX = / / # needs to have a space in it validates_format_of :name, with: NAME_VALIDATION_REGEX end And then a spec that actually tests inputs and match/not match for SomeModel::NAME_VALIDATION_REGEX, and doesn't need to create AR models and call methods on them to do it. I actually _really don't know_ if this is a good idea or not... 
My former employer hired Ombu Labs to help incrementally migrate an absolutely massive Rails app (something like 300kloc of Ruby, hundreds of models, etc) from 3.x all the way up to 5.x. Mauro and the rest of the team did a great job... they *definitely* know Rails upgrades. (I'm not affiliated with them in any way, other than the fact that my former employer was their client)
Oh man, thank you so much for the kind words! I really appreciate it :)
GitHub.com/railslove/fight\_csv
Thanks for highlighting fight\_csv. Looks like it would need a little love :-). Last update 5+ years ago. Do you know if it works with the ruby 2+ series?
https://github.com/buren/honey_format
Worth noting that ActiveStorage isn't a replacement for gems like Paperclip if you're using public images. ActiveStorage is for serving up private images via temporary references for cases when you want to control access to the underlying file. If you're serving up public images in a CMS type setting then you're better off sticking with Paperclip which allows for direct, cachable, CDN image urls.
Thanks for highlighting honey\_format. Great csv reader alternative.
Or something else, since [Paperclip is going away](https://robots.thoughtbot.com/closing-the-trombone).
Sure, just used it as an example. Depending on your use-case it may make sense to continue to use Paperclip's final release vs migrate to ActiveStorage until AS reaches feature parity. The core team has seemed hesitant to support public files so I'm not sure how long this may take
Again thanks for the great Fight CSV gem and code and docu. CsvRecord works slightly different e.g. it always starts with the record schema / fields definition (e.g. the header in the csv datafile is optional; mapping is for now always by index e.g. 0,1,2 position by default). 
Isn't this what `ARGF` and `ruby`'s `-pnale0` options are for?
Seems like it would be faster to just use a calculator though. It's just foil multiplication.
Because you may be unfamiliar with awk/sed and very familiar with Ruby. Also the highly optimized C won't make a difference for many, many use cases.
You mean like [this (Hacker News)](https://news.ycombinator.com/item?id=17755541)? From the post: (+ how's it like with [rb](https://github.com/thisredone/rb)): 1. Capitalizing a line &amp;#8203; echo hello world | ruby -pe '$_.capitalize!' echo hello world | rb -l capitalize 2. Printing only unique lines ps | ruby -lane 'BEGIN { b = 0 }; b += $F[0].to_i; END { print "sum of PIDs: #{b}" } printf '1\n2\n3\n' | rb 'map(&amp;:to_i).sum' 3. Computing the sum of numbers in a table printf 'hello\nworld\nhello\n' | ruby -le 'puts STDIN.to_a.uniq printf 'hello\nworld\nhello\n' | rb uniq You tell me what's better.
I've recently discovered the bundler inline stuff and it's made simple Ruby scripts so much easier to distribute for me. Absolutely brilliant feature
I would say RTFM, but man pages can be a pretty tough slog, and people who say RTFM don't seem to get that. I own this O'Reilly pocket reference, and it's helped remind me of things I'd done and forgotten many times. http://shop.oreilly.com/product/9781565922259.do https://www.amazon.in/sed-awk-Pocket-Reference-OReilly/dp/0596003528
I'd argue that `nil` is a perfectly acceptable value to cache, it can be returned from a function that can take a long time to run just as true or false could be returned. I think it's fantastic they've added this feature for those that need it and made it toggleable
I have a [curated list of resources for text processing](https://github.com/learnbyexample/scripting_course/blob/master/Linux_curated_resources.md#resources-for-specific-commands) if you are working with GNU versions, I have a [cli text processing repo](https://github.com/learnbyexample/Command-line-text-processing) that has hundreds of examples for grep/sed/awk/sort/etc as well as one-liners for perl and ruby
Thanks, didn‚Äôt know about that. The only concern I would have with the man pages is that I‚Äôd understand the command basics but not the true power as discovered by others. 
Wow, this is incredible! Nice work and thanks for the help. 
This is insanely awesome 
These examples don't convince me to install it (and #2 is a bit ponderous). So... does that mean it's better? Let's look at the projects docs and do some more comparisons: df -h | rb '[first].concat drop(1).sort_by { |l| l.split[-2].to_f }' df -h | ruby -e'puts STDIN.to_a.sort_by { |l| l.split[-2].to_f }' docker ps | ruby -ane'puts $F[1] if $. != 1' docker ps | rb drop 1 | rb -l split[1] Now I'm possibly almost _certain_ I don't need to install it. But of course this is fun stuff and I *do* applaud the author for their creativity! 
Yes, but there was a write timeout :p
Lol. That's my patch :)
If it can help, after submitting the upstream patch, I used a monkey patch: https://gist.github.com/casperisfine/061cd6576d0a153720b0aa9aac321ce9 It's for ruby 2.4, so you might or might not need to update it to your needs. 
Yeah, I'm not sure either. If it's a super-simple regex, I'd likely bucket it as "not going to be broken accidentally" and not bother... if it's super-complex, I might lean toward putting it in a [custom validator](https://guides.rubyonrails.org/active_record_validations.html#custom-validators) (and testing that, along the lines of what you're suggesting). For something in between... I do rather loathe the whole feel of "set attribute x to y; assert whether model should be valid" tests (for no justifiable reason), so asserting directly against the regex definitely has some appeal.
I'll grant you that the result of some expensive computation might be nil. I'll then argue that if a cache is an ordinary cache, I should be able to store nil as a value. Why, oh why, then would someone need this feature to stop themselves from caching nil? If they've decided they _don't_ want to store nil, then why not just stop trying to store it?
It requires Ruby to be present though which isn't true on Linux machines by default.
This is a default since Rails 5: ``` if ENV["RAILS_LOG_TO_STDOUT"].present? config.logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) end ``` Not that it would you help you, but I thought it was worth a mention in your article.
Great example. Added your Honey Format example / snippet to the Awesome CSV page. Thanks for sharing.
This is pretty bad ass. It would be awesome to have some kind of API that I could feed it a gem list and get back any relevant CVEs. Maybe even gem and version? Like, Sinatra has one, but if I'm using 2.0.3 that CVE seems to be fixed. So if I say have `sinatra-2.0.2` I'd get a link to the [CVE](https://cves.octotrack.com/advisory/sinatra/CVE-2018-11627.pdf) but using `sinatra-2.0.3` there's no vulnerability so get a "no vulnerability found in public databases" kind of message.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://cves.octotrack.com/advisory/sinatra/CVE-2018-11627.pdf) - Previous text "CVE" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20e4bevqb) 
Thanks for an article! Haven't figured myself that there is no need to yield every single step. We too started using dry-rb do notation in our service objects. But shouldn't you return Success from #call method in last example since it is wrapped in Do and tries to guess was it Success or Failure?
Very interesting, how do you see this against something like RubyAudit and BundlerAudit? I use those in my pipeline for automated and integrated testing to get uptodate information and automated checks. Then add brakeman to it as well and you get a pretty good suite of both self induced issues and those by others. [https://github.com/civisanalytics/ruby\_audit](https://github.com/civisanalytics/ruby_audit)
You mean like: gem install bundler-audit bundle-audit update bundle-audit
Thanks. This is exactly what [octotrack.com](https://octotrack.com) does. You can upload a gemfile.lock, setup a git post commit hook or integrate with your CI flow and get a report and emails everytime a new CVE comes up. Let me know if you get a chance to try it. It would be great to get you feedback. Thanks!
Thanks for your feedback. There are a couple of main differences but I'd say that the main ones are getting this notifications via email whenever a new CVE comes up instead of when a certain action is triggered (like deploy or commit) and the emails and platform also alert you of new versions of your gems with the complete release notes which help you keep your app up to date. Let me know if you get a chance to try it. It would be great to get you feedback. Thanks!
Which flavor of Linux doesn't have ruby by default?
Debian, Ubuntu, Mint, Fedora, Red Hat, CentOS, Arch, SUSE. These are just the ones I've used in the last few years. A better question would be which ones actually come with ruby, and the answer is I have no idea.
&gt;Debian, Ubuntu, Mint, Fedora, Red Hat, CentOS, Arch, SUSE. These are just the ones I've used in the last few years. So let me get this straight. You are claiming that none of those repos come with ruby installed right? If I pull a docker today and run "ruby -v" I can humiliate you right? 
I wasn't aware we were talking about docker images...?
I am not sure what you mean, but if it‚Äôs that performance critical maybe consider a different language. Ruby is plenty fast - but there a limit to how much performance a dynamic, garbage collected, interpreted language can give you. 
There's bundler-audit, like /u/this_is_not_nil said, and also https://audit.fastruby.io which is essentially a UI for bundler-audit. 
How does this compare to gemsurance?
This is all very confusing...
Why is gmail related to this alert thing?
Didn't know about gemsurance but it seems a great tool. Some of the main differences might be the continuous checking and notification via email of CVE's, analytics of the main dependencies your projects are using and information about new releases along with their release notes every time a new one is published. It would be great to get your feedback if you get a chance to try it. Thank you
I have updated the blog and done the correction `Ruby 2.6.0-preview2`. Thanks for pointing out.
The Gmail message is my "alert" It says such and such has changed.... I'd rather have Windows show my string in a message box but I don't think that's possible 
Lol I know sorry
If I understand correctly, I didn't explicitly return a `Result` from `MyOperation#persist` and that caused a confusion. Yes, you're correct: we must return a Result object from `#call`. I figured that `#persist` would always return one. Forgot to illustrate it in an example. Thank you!
Then there‚Äôs nothing you can do. Google have serve millions of users. They are not going to send all mail instantly. 
it's a good option but will not solve the issue of STDOUT pointing to different pid. But I think I'm getting to another solution thx to this discussion https://www.reddit.com/r/docker/comments/97src6/application_output_to_docker_logs_works_only_when/ (where STDOUT will be under correct pid) therefore your comment will be valid option, So once I manage to make that work I'll update the article 
Non-Mobile link: https://en.wikipedia.org/wiki/Inner-platform_effect *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^205248
The whole read I was thinking one thing: that‚Äôs exactly what `#select` does.
Hi there, I'd recommend you to watch [this talk](https://www.youtube.com/watch?v=9lv2lBq6x4A) Sandi gave at BathRuby in 2015. There is a crystal-clear explanation, in the code, of how she see composition, and how to use it to decouple classes from implementation details. Cheers!
Did I get it correctly that you decided not to use standard lib numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] odd_numbers, numbers = numbers.partition { |number| number.odd? } # =&gt; [[1, 3, 5, 7, 9], [0, 2, 4, 6, 8]] just because it looks "a bit complicated" and instead created a pull request with +107 lines to have the same functionality written in a different way? numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] odd_numbers = numbers.extract! { |number| number.odd? } # =&gt; [1, 3, 5, 7, 9] numbers # =&gt; [0, 2, 4, 6, 8] Indeed, I would never understand people trying to get into rails/rails contributor list and proudly add this info into the CV.
The difference is that ‚Äò#select‚Äô doesn't modify the original array. 
&gt;Dont's &gt;hash = { one: "one", two: "two", three: "three" } &gt;hash[:one] -&gt; one\ Aside from that backslash that doesn't make sense, I do this all the time and I don't intend on changing. There's nothing wrong with this.
It's only problematic if you don't expect it to return nil. With `#fetch` you either pass a default value (so nil could be made explicit, but even better you handle missing key behaviour there) or it raises an error. 
My work was using `will_paginate` but we recently found [`kaminari`](https://github.com/kaminari/kaminari) and we're in the process of switching to it. It's been pretty nice.
In my opinon this functionality reinforces bad, mutable code. I'm dissapointed DHH supported it. Using #partition, as ArcaneRain pointed out, is much cleaner and idiomatic.
I did think about that, but the "do" then goes on to use fetch without a default..
String formatting is a part of Ruby, not Rails. Also, generally Ruby will prefer symbols over strings internally, because strings are mutable and slower to compare. Hashes not treating strings and symbols as equivalent is very useful, storing `'foo'` and `:foo` as distinct keys in the same hash come up more often than you'd think.
Depending on what you actually need. If you need to go to page 100+ with a 200 records per page, neither will_paginate, kaminary nor pagy will help you. You need to use keyset pagination technique. There is a gem that uses that technique for pagination: https://github.com/glebm/order_query But we are using kaminari because its views are easier to change than will_paginate.
are there any pagination gems that support this technique out of the box without having to write boilerplate code? Looks like order_query mentioned above helps you do the querying, but then there's integrating that with a UI like will_paginate/kaminari/etc do.... sounds like a good topic for a blog post if anyone wants to write a blog post. :)
I recommend Kaminari. But you aren't expecting users to tab through 43k records to get to the value they want, are you? UI-wise, you should be providing some manner of filtering.
Stuff like this reminds us that there are Ruby devs and there are Rails devs.
Recently? Oh man, it‚Äôs older than my mother. 
Exclusively use kaminari on all apps with no problem, pretty large datasets here
This could work if no ids were missing. 
bad bot
It's not exactly identical in capability, because in-place mutation works to modify arrays that are referenced by other things, such as a hash of arrays, to which you don't have a symbolic reference. So it's more like extract, remnant = original.partition { ... } original.replace(remnant) which IMO is also still better than that OP. 
Timeout is basically [*never*](https://www.reddit.com/r/programming/comments/3ui1sw/why_rubys_timeout_is_dangerous_and_threadraise_is/) the right way to do it.
AFAIK it only supports symbol keys, see the docs on sprintf which is the underlying implementation: https://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sprintf That said, percent formatting is very rarely used in Ruby, your example is more idiomatically handled with string interpolation.
Docker images of the stock OS. You know those things exist right?
Read their Company page (for example), and you'll notice that attention to correct English (and hence, presentation to a sceptical audience) isn't necessarily high on their priority/capability list. The best use of high-calibre firearms *is not* to shoot one's own foot.
*"many lines are copied from private proprietary code"* and *"other 10% can't be written differently if you're going to code Scrapy-like framework using Ruby with Capybara/Nokogiri"* IANAL but I don't think *private proprietary code* can be applied to apps written in Ruby and those other stacks. In any event, shitty news. I was looking forward to sitting down and messing with Kimurai.
Im not sure 100% if they're Anhedral or Euhedral. 
Haha - well, I'm not sure we don't have a gemologist in this sub, but this is Ruby the programming language, not the precious stone :)
How are you defining your values? 
Haha! Ok sorry about that! Feel free to delete post! Im new to reddit! Don't know much about it yet.
/r/lostredditors 
The mods are asleep, post pictures of precious rubies. 
Corundum.new(&lt;your_corundum&gt;).value
&lt;your_corundum&gt; is not defined
This rules
require ‚Äòfaker‚Äô Corundum.new(Faker::Rubies.corundum(1)).value
Except when what's inside handle Thread#raise properly, which is the case of `IO.copy_stream`. 
Rubyists are pretty nice folks, so I'm sure everyone here will just giggle a bit and wish you the best in your quest for knowledge =)
Maybe try r/gemstones? 
How can I upgrade from Ruby 2.5 to this version?
That's really disappointing. I spent quite a lot of my time replacing a much worse solution with this over the last few days and now I'm not sure what to do. 
I thought I was quite the expert at ruby, but I thought wrong!
Check the forks: https://github.com/vfreefly/kimurai/network/members
This is just a ruby gem. gem install one_weird_hugeass_ruby
Let me try to address your points one-by-one. Before I do, I want to say that there are certain things the answers will depend on. For example, are we assuming you're writing tests for existing code or new code? If existing code, is it simple stuff you recently wrote yourself, or a huge, messy legacy project? 1. I would for the most part agree that you'd want to have at least one test per method in your class. I actually often don't though. My workflow tends to go like this. Let's say I'm developing a new class and I don't have any code yet. I'll write a failing test, then I'll write the code that makes the test pass. I'll repeat this maybe 7 or 8 times for a single method. Inevitably, I'll look at the method and imagine ways it could be refactored to be more understandable. After the refactoring my 1 method might end up as 4 methods instead. (The methods I write are often just one line long.) Because I followed the rule when writing the original method of only writing enough code to make the tests pass, I know that all my functionality is covered by tests, so I can feel free to refactor as wildly as I please without having to worry that I'm breaking anything. So even though only 1 of my 4 methods is covered by tests that explicitly address that method, I know that all my execution paths are covered one way or another. This is good enough for me. 2. I don't test that the model can successfully be created. Pretty much all my tests will start with creating the model, so if my model can't be created, a lot of my tests will fail. So a test that just tests if the model can be created doesn't add any value, in my mind. I do test that the model is valid. If I have a model that has, say, 3 required attributes, I'd write tests that basically say, "If X, Y or Z is missing, I expect this model to be invalid. If all those attributes are present, I expect it to be valid." 3. Yes, this is generally a good idea. I usually don't go too nuts with the edge cases. Usually I find a simple "if this value is missing, I expect the model to be invalid" kind of test sufficient. The use case dictates what makes sense. If it's an admin panel that's only used by 4 internal people who I know to be tech-savvy and meticulous, I'm not going to bother testing a whole bunch of crazy edge cases. If it's a public form with tons of traffic, testing edge cases becomes more valuable. The "seriousness" of the feature also matters. I'm going to test edge cases for a checkout page a lot more than for an "update my profile" page because the consequences of a bug are a lot more serious in the former case than the latter. 4. Yes, this is a good idea. 5. Yes. 6. Yes. You say you've always heard not to test ActiveRecord's actual validations. The idea is that you want to test your application, not Rails. This doesn't mean you shouldn't write tests that ensure your model is invalid when the conditions of your validations are not met. You want some protection against the case where someone deletes or changes a validation of yours in such a way that introduces a bug. Would I recommend doing edge cases for each attribute? It depends on some of the conditions I described above. Usually I don't. When I do, my edge cases often include things like empty strings, strings consisting of just spaces, and valid strings with leading or trailing spaces. This is pretty uncommon for me though. I usually don't find it called for. Hope that helps.
hahaha this is great!
Too late for me to fork it, however I can check out the other forks. I have a copy of the code base in my Gem path so it's not really an issue. I'm more concerned about the legality issues with continuing to use this package.
Hi I've been programming in Ruby for 10+ years. It looks like your compiler is broken.
Haha i cracked over 120 upvotes..y'all are great!
&gt; Your two-line patch wasn't replaced with two-dozen lines of tedious non-blocking code because the maintainers are paid by the line. Eric Wong's implementation is much safer of course, and yes there is plenty of ways to shoot yourself in the foot with `Timeout`. But in this context since the connection is thrown away in case of timeout it was a fine patch for us, and much better than exposing ourselves to being DDOSed by slow services. Also note that even the author of the non blocking version is not as categorical as you on the matter: https://bugs.ruby-lang.org/issues/14859 Yes `Timeout` is very dangerous, but sometimes it's the only option (granted it wasn't the case for my patch). Hopefully EW will fix it once &amp; for all.
Wish I could tell ya lol
Hahahahahaha
 r/trees is a stoner page lol. And arborists go post there! üòÇ that might be funnier then what I just did with this post!
Dangit
I prefer /r/marijuanaenthusiasts.
Thank you sir
FTFY Corundum.new(&lt;your_corundum&gt;).valuable? 
You can also use the safe navigation operator `&amp;` which will return nil instead of throwing an error. So you could do: [x.foo, y.foo].select { |str| str&amp;.downcase&amp;.include?(‚Äúword‚Äù) } Since nil is falsy, if one the elements is nil, it won‚Äôt be selected.
[My contribution](https://media.newyorker.com/photos/5909512febe912338a37272a/master/w_727,c_limit/ruby-dee-remembrance.jpg)
Is it bad my first thought was to run a daily job to ping r/geology, gather OP‚Äôs latest 5 posts, and somehow calculate average worth? I bet literal ruby enthusiasts end up on stackoverflow all too often... 
Regardless of sleep, if over 100 people are actually upvoting this already, I'm not feeling compelled to remove the post üòÜ
What does OP stand for? Lol
For what its worth they ended up not being rubies...If you ever want to know if your Corundum is valuable or real do a check under a uv light and they should fluoresce. Meh.. They're Just non valuable garnets. Still really cool, but they're sure not rubies!
r/lostredditors
Original Poster (in this case you)
10-4.
2k views.. 165 upvotes. In 14 hours. üòÇ I don't comprehend it. People must really look at this ruby coding page a lot. Anyone care to tell me how ruby coding is used in the world and if it could help benefit me by knowing about it?
Ruby is a language that is typically used for web applications via the Ruby on Rails framework. It's easier to pick up than a lot of other languages and very good for fast prototyping, which makes it ideal for early stage startup web applications (although there are many mature companies that still use it as well). What makes it so good for building new applications is that it removes the need for a lot of the setup and "boilerplate code" that a lot of other languages require. If you're interested in learning programming, it's a great language to start with! 
Ruby is primarily used for web applications. It‚Äôs a language that runs on servers, so it‚Äôs not something a user downloads (like in an App Store). Ever hear about ‚Äúthe cloud‚Äù? The cloud is a collection of servers running web app software, and in some cases they‚Äôre running ruby! Ever heard of Github? It was recently acquired by Microsoft. They run on ruby! Or how about Shopify? They‚Äôre ruby too. Twitter also started out as a ruby app. There are tons of uses for any given language, but these are just some examples of big shops and what they chose to do with ruby. If you‚Äôre at all interested in programming, web apps, or if you just like to tinker on computers, ruby is a terrific language to learn!
Ok..thanks for the intel. That's really cool to know. It seems like the foundation for a lot of successful platforms.
My geologist girlfriend would like you to know that "only very special rubies from very special mines (3 in the world) will fluoresce. If it is fluorescent it means that you have a very expensive ruby, probably from Russia, but 80% of rubies will not fluoresce." (She explained it in much more complicated terms and then I asked her for an ELI5 version and this is it.)
She says you should check with a gemologist anyway as no one online who has not seen it with their own eyes (or proper equipment, I assume) will be able to give you the correct answer. Well, from my point of view, it's pretty ¬Ø\_(„ÉÑ)_/¬Ø 
Haha.. Salute! I just really wanted to get my gems checked out by someone that knew about rubies, and I never read any posts on r/ruby before i posted. üòÇ
üòÇ
Please share the lines your `routes.rb` which mention states.
Ruby is the language that puts the happiness of it's developers first, as a core tenet
What‚Äôs the url path?
Do you make good money as a coder or do you just do coding for fun? Please keep in mind i know NOTHING about ruby coding! üòÇ but if i could make some bankroll doing it ,,,i can learn quick if there's a job opening hahahaha
Do you make good money as a coder or do you just do coding for fun? Please keep in mind i know NOTHING about ruby coding! üòÇ but if i could make some bankroll doing it ,,,i can learn quick if there's a job opening hahahaha
I use it for devops. I'd learn on it first, them go or js next
/states/show
Always read the rules of a sub before posting. Some subs are vicious and will tear you apart for violating their rules. That being said, I got a good chuckle out of this.
For fun and monies. No shit, buddy. There are coding bootcamps like [Codeup](https://codeup.com). Most graduates find employment in IT. And if not, they give you half of money paid back.
Huh
For fun and monies. We like what we and get paid well. Wanna become one of us? There are coding bootcamps like [Codeup](https://codeup.com) in all major cities. Most Codeup graduates find employment in IT. And if not, they give you half of money paid back.
Awe, too bad OP. Since it turns out that you actually have a variety of crystal there, the nice folks at r/crystal_programming should be able to help!
üòÇ
Found the bug. :-) Because the URL path it matches is `/states/:id`, the second segment of the path becomes the `:id` param (`params[:id]`). Since that's `show`, it's trying to find a record whose `id` attribute is `show` rather than something like `1234`. Change that to the id of the record you're looking for and you should be good to go.
Great! I'm a little confused though, what do you mean to change the id to the record I'm looking for? Sorry, I'm a beginner! ;-)
10-4!
No worries, you‚Äôre safe here! Now to figure out a good use of ruby to go with your rubies!
[Precious rubies](https://i.imgur.com/te5J3Wv_d.jpg) My mind takes odd turns....
The action is called ‚Äúshow‚Äù in the controller, but the URL is /states/123, where 123 is the id of the record. The word ‚Äúshow‚Äù is not actually in the URL - it‚Äôs implied by passing the id.
I honestly didn't realize I was talking to OP but hey you did ask
That's a real life benchmark of r/ruby popularity. OP made all these Ruby lurkers giggle and leave an upvote. Thank you, OP!
https://www.reddit.com/r/lostredditors/comments/98ahlx/looking_for_some_geology_help_in_a_ruby
No problem! Glad to create some positivity..=]
I updated the post (framework will be reopen soon with a few rewritten parts).
I‚Äôll put it another way. If you visit `states/show` how do you think ‚Äòthe computer‚Äô knows which record to show you? Remember the show page is for showing individual records. You need to _tell_ the computer which record you want to display, by giving it the id of the record in the url. So instead of `states/show` it is `states/_insert-id-here_` of the record you want to show
Right, so how do I remedy this? That's the part I don't understand.
It should be &lt;% end %&gt; and not &lt;%= end %&gt;
A decent advice! I wish the team I have joined had used it in the past. Now, there is so much code, no one will edit it to meet some standard :D
Not that you were soliciting advice, but I read this article a few years back and saved it because my company faces the same issue: https://blog.codeship.com/how-to-apply-rubocop-to-your-large-rails-codebase/ The main idea is starting somewhere is better than not, and it at least enforces "not committing even more violations". 
Thanks for the link! It has actually turned out to be an interesting read. I will start by writing my own code properly and see how I can explain this to my team :)
Okay, so I am assuming you have created a record and saved it in your database prior to viewing your show page. Assuming you are using the default ports for Sinatra then visit this page: `http://localhost:4567/states/1`
Wat...
What would be awesome is if you could write the whole app in Ruby, then just compile it all down into Go for production speed.
Speechless.
You might like Crystal...
On east coast out of a ruby bootcamp I've seen 100k. Keep in mind it was an extremely selective bootcamp. 
but... why
Follow the SOLID principles for one. Rubocop is a decent tool for guidance, but that‚Äôs just about it. Learn TDD and you will get better at creating better ‚Äúclean‚Äù code.
People are truly bored these days. Most ex-Rails people I know went to pure Go without anything complicated or fancy like "Go on Rails".
That would be *0.3.1*
* There are code style for every language you've mentioned. And it is actually a good thing in the described scenario. It helps people with different background write code in the same style which increases readability and maintainability of the project. * Rules are arbitrary and customizable. If you agree with your team to use double quotes, you're free to do so. The point is to be consistent.
I would hate to have to develop a web app in Go. Not fun. 
That's good advice.
Neat! Haven't tried it, but I'm liking the simplicity. One short source file? Always peaks my interest.
because someone wanted to code, the beauty of FOSS.
Your `State` model doesn't have a `user_id` column, which is why you can't assign it. What you (likely) want to do is ``` @state.users &lt;&lt; current_user ``` This assumes you have set up your associations correctly. Also, you'll have to have some error handling around this. If the user is already connected with that state, it will throw an error.
yes, thanksÔΩû
The purpose of the user_states table is to allow a has_and_belongs_to_many relationship between states and users. If you add a user_id column to states, you're making a belongs_to relationship between states and users, and that's not the same thing.
Rubocop aside, I'd also suggest using flog/flay on your code. These are more focused on finding complex and redundant code.
True. FOSS is (rarely) about "should we?", so much as "how can we?" There are a *lot* of display screens that are getting coffee wiped off them this morning.
The teams behind [Echo](https://echo.labstack.com/) and [Revel](https://revel.github.io/) might disagree with that. I'm a Web dev who uses (and loves) Ruby daily (with [Hanami](https://hanamirb.org/) nowadays; successfully Rails-free for two years now). I'm teaching myself Go just so I can talk about it reasonably intelligently with teams considering their technology stacks, and I'm using Echo as part of that learning process. At this point, while I wouldn't entirely agree with you about web dev in Go, I would have Go/Echo as at least my third choice, behind Ruby/Hanami and Crystal with either [Amber](https://amberframework.org/) or [Lucky](https://luckyframework.org/). Go holds some appeal for me due to its association with Rob Pike and Ken Thompson; old-school '70s Unix geeks like me regard both of those men with profound awe. On the other hand, Crystal has taken a few noticeable pages from the Go playbook, as well as from Ruby; it's a lot of fun. And for those who think Go on Rails merely the latest variation on [RFC 2324](https://tools.ietf.org/html/rfc2324), an overgrown April-Fools' joke, I'm pretty sure I remember reading back in the early 2000s about some BigCorp releasing a Web development system for *COBOL*. Let *that* infest your nightmares. üëª
&gt; People started arguing that they only moved code around but hadn‚Äôt actually changed it. The shop I was in previously had a simple rule to deal with that, which I've carried over here. If it shows up in `git diff master^`, it **must** be blessed by RuboCop and by [Reek](https://github.com/troessner/reek), and its method(s) must (each) have a [Flog](https://github.com/seattlerb/flog) score below the established project limit (defaulting to 9.0).
I've been working a lot with Go/Echo the last 6 months and for high performance apps where concurrency matters it's my go-to choice.
Sounds like every language ever. Language use is generally a pick your poison kind of choice. If there was one "good" option, it would be the only option.
I found crystal really frustrating to use. 
I'm curious to understand why?
&gt;has some (probably) unfixable design flaws. Didn't stop PHP...
 @state.user_id = current_user.id Each `state` has and belongs to many `users`. It would therefore not make any sense for a `state` to have a `user_id`; that would only work if the `state` belonged to **one** `user`. Now, your database *might* be modelled incorrectly... Is it really possible for a user to have many states? (If not, then there should be a `users.state_id` column.) Is it really possible for multiple users to share the same state? (If not, then there should be a `states.user_id` column.) But if both of those things *are* possible, then the database model is correct. Assuming the database is correct, you need to do something like `@state.users &lt;&lt; current_user` - which will add a new record to the `user_states` JOIN table.
No more so than you would going to another language entirely. The benefit of the inspiration is that your ruby syntax understand translates quite substantially. Sure things are going to differ and cause exceptions when you misuse it, but these issues regularly relate either to features specific to crystal and it's functionality (typing) or due to changes the creators made in the hopes of improving the syntax. At the end of the day all languages are subjective to their creators tastes, but I appreciate the large overlap between ruby and crystal.
So, did you ever find out if you're a gem millionaire yet? :-D
Look at log/unicorn.stderr.log
I wasn't able to follow the article at this point: &gt; Of course, DelayedJob could no longer handle its queue, since it wasn‚Äôt able to write to a read replica database. Why were you not able to connect DelayedJob to a master database, while simultaneously ensuring that the jobs are querying data from the replica? Are you unable to control the connection used by DelayedJob? Or is it the jobs themselves?
Good catch, thanks. Fixed.
I'm also having this exact issue, so any help would also be greatly, greatly appreciated.
Bit of a shame it calls internal Hash functions, instead of just calling `fetch`. You can't even pass it a HashWithIndifferentAccess, because it bypasses the overrides.
It seems like it's a problem with RubyMine 2018 versions. I rolled back the RubyMine to a 2017 version and everything worked fine.
The primary purpose here is to return [named values](https://github.com/BurdetteLamar/test_values#named-values) for use in testing. Method string_of_length is needed to support other methods such as strings_in_length_range. It could be made private, but there's no reason to do that. Because the values are for tests, they should be the same on each test run, not random. 
Not a quite a gem millionaire. But the real gem that I found out of the ground is really cool =]
&gt; The primary purpose here is to return named values for use in testing. So I can see this as a legitimate use, but to be honest I think it's overkill to define a gem for this (other than as a fun challenge/exercise, of course). For example, could you not just do: def test_item_length_min_length items = MyItems.new assert_raises(ArgumentError, /too_short/) do items.add_item('x' * 3) end end def test_item_length_max_length items = MyItems.new assert_raises(ArgumentError, /too_long/) do items.add_item('x' * 9) end end Or for (the common use case of) a rails project, there exists [`shoulda-matchers`](https://github.com/thoughtbot/shoulda-matchers) which includes *many* helpers - enabling test code like: is_expected. to validate_length_of(:password).is_at_least(4).is.at_most(8) &gt; Because the values are for tests, they should be the same on each test run, not random. I disagree. Random test data is a **good** thing. Random test data, in general, provides better coverage. It helps prevent tests from passing "by fluke". Yes, this *could* mean that tests sometimes pass and other times fail; but this indicates a problem in the underlying code; and is something that should be fixed. Such issues can admittedly be hard to diagnose, but there are several methods that help, such a `rspec --bisect` or even just displaying more verbose information about the test setup upon a failure.
&gt; Why the repository was removed &gt; removed by a claim from a company where I worked as a freelancer through Upwork ~ half a year ago Eak! Glad to see the developer was able to workout a way to get the project back :D
[https://ruby-doc.org/core-2.2.2/Marshal.html](https://ruby-doc.org/core-2.2.2/Marshal.html) will do the job.
Yes, Marshall, but for some reason(s) it's not used much in ruby, I'm not sure why. 
&gt; I'm not sure why. You need to trust the other end. That's an issue for significant number of places where it could be used.
Thank you, so where would I be putting, `@state.users &lt;&lt; current_user` ? Does this go in the state model or controller? I'm not quite sure what you mean by is it really possible for a user to have many states? Is it really possible for multiple users to share the same state? I mean shouldn't those both be possible? What would I do differently to model the database the correct way?
&gt; What would I do differently to model the database the correct way? I just told you... and it *may* already be correct! For example, in many applications, the desired behaviour is that a user can only have *one* state. **If** that's the case in your application, then you need to have a `state_id` on the `users` table. However, it's also perfectly acceptable for a user to have *multiple* states. If that's the desired behaviour in your application, then fine. &gt; where would I be putting, `@state.users &lt;&lt; current_user`? You would write that *instead of* `@state.user_id = current_user.id`. Because this line, currently, does not make sense (hence the error message). There is no such thing as `@state.user_id`, because each state belongs to **many** users.
&gt; "A structure is a dummy data container. Unlike an object" Sorry OP, that's where I stopped reading. 
That is a really badly written article filled with buzzwords and marketing FUD. 
I must be missing something here... Middleman is a static site generator. How is it consuming memory on your server? 
They have basically the same warning: Python: ``` Warning The pickle module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source. ``` Ruby ``` By design, ::load can deserialize almost any class loaded into the Ruby process. In many cases this can lead to remote code execution if the Marshal data is loaded from an untrusted source. As a result, ::load is not suitable as a general purpose serialization format and you should never unmarshal user supplied input or other untrusted data. If you need to deserialize untrusted data, use JSON or another serialization format that is only able to load simple, 'primitive' types such as String, Array, Hash, etc. Never allow user input to specify arbitrary types to deserialize into. ```
Yeah, by default DelayedJob uses the same connection as ActiveRecord to handle jobs by updating, deleting, inserting rows. This article basically outlines how to change that behavior as a demonstration of module injection. 
/u/unsignedotter, /u/jdickey, thanks for the suggestions will have a look. I do like how Echo handles routes üòâ
&gt; it's not used much in ruby, I'm not sure why. It's the default serializer for the session and cache stores in Rails so it gets used quite a lot actually. It's not exactly 'safe' to use in any contest the application doesn't have control of, so you won't see it used in many other situations. 
You still have to trigger a build for the site. So it'll take some amount of resources to generate the static site itself.
What is Kimurai? Not a single word on it in the readme. 
I have experience with more strictly typed scripting language frame works, but crystal is so new that there is almost no way to debug it except for throwing a puts in the code and trying to find it in the log. If it had a bye bug or similar then it would have made the entire process way less painful. 
I did something like this recently, here's my models and relationships. The `AdvertSubcategory` relationships are set to `optional: true` because of the saving order of objects when creating records, you can see that the `validates_associated` line (which contradicts the optional one) ensures that there are no invalid links. Slightly confusing, there may be a better way but this *does work*. class Advert &lt; ApplicationRecord belongs_to :category has_many :advert_subcategories, inverse_of: :advert has_many :subcategories, through: :advert_subcategories end class Category &lt; ApplicationRecord has_many :adverts has_many :subcategories end class Subcategory &lt; ApplicationRecord belongs_to :category has_many :advert_subcategories has_many :adverts, through: :advert_subcategories end class AdvertSubcategory &lt; ApplicationRecord belongs_to :advert, inverse_of: :advert_subcategories, optional: true belongs_to :subcategory, inverse_of: :advert_subcategories, optional: true validates_associated :advert, :subcategory end
I don't quite understand "each subcategory displays posts, as well as categories themselves" Do you mean: "a subcategory page shows links to associated post pages AND links to associated category pages" or "a category page shows links to associated post pages AND links to associated subcategory pages"
Reminds me of my C days... Good times... *eye twitches erratically* You made me curious, and after some googling there do seem to be some efforts to create a repl tool for crystal, but it seems they'll need to build a lot of infrastructure to achieve it. Binding.pry in Ruby is only possible because of the Binding object which is it's own black magic. This all said, I agree with you though, something like that would definitely be a feather in Crystal's cap once it has one, but at the moment it's absence is just a con on the list. You'd have similar pains if you wanted to use C or C++ for their performance gains. (Even if they do have specialised debuggers, not that I enjoyed using them.) Thanks for the perspective though. Always nice to see things from different view points.
This is how I set it up last time and it worked pretty well: class Category &lt; ApplicationRecord belongs_to :parent, class_name: 'Category', optional: true has_many :subcategories, class_name: 'Category', foreign_key: :parent_id, dependent: :destroy scope :main, -&gt; { where(parent_id: nil) } end
üíØthis one is the best
These design flaws make it a blocker for larger projects. Compile times grow exponentially and there is nothing to do about it. Also the devs are atm not willing to sacrifice the ergonomics to solve this issue.
It's not a polished project. They have no manpower for that.
Hmmmm. That's very interesting. To be fair the Ruby devs has a similar stance on the sacrifice of ergonomics, it's why it still carries a reputation of being slower to this day, regardless of the result. I would happily bet that crystals compile time could be significantly improved without syntactic sacrifice just by implementing systems like fragment caching. Though I'm hardly an expert in such things.
I would say Ruby is on par with Python or faster. It can only get faster with things like Jruby or Graal/Truffle. Even 3x3 with jit is significantly slower than Jruby. I am curious if Sorbet.rb can make some Ruby projects faster (not on its own) but by accompanied in changes in the interpreters or compilers. I would use Crystal but atm it's not a good Ruby replacement. 
I think this could help you if umderstood your question. https://en.m.wikipedia.org/wiki/Composite_pattern
Non-Mobile link: https://en.wikipedia.org/wiki/Composite_pattern *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^206387
**Composite pattern** In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that is treated the same way as a single instance of the same type of object. The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Maybe you can try [Gin](https://gin-gonic.github.io/gin/) \~
When you say "by default," do you mean that the connection used by DelayedJob can be explicitly overridden?
In my config, the build happens locally. All that gets deployed is static html.
I've started to put together a new library / gem, that is, csvreader - that lets you read tabular data in the comma-separated values (csv) format the right way :-), that is, uses best practices such as - stripping / trimming leading and trailing spaces, - skipping comments and blank lines, - "fixes" quote errors and more all out-of-the-box with zero-configuration. And, thus, fixes some major bugs in the (old) standard csv library with a purpose-built parser (instead of a suppossed "faster" split(",") kludge). Happy data wrangling with ruby. Cheers. Prost. PS: Usage sample in Ruby code: line = "1,2,3" values = CsvReader.parse_line( line ) pp values # =&gt; ["1","2","3"] or use the convenience helpers: txt &lt;&lt;=TXT 1,2,3 4,5,6 TXT records = CsvReader.parse( txt ) pp records # =&gt; [["1","2","3"], # ["5","6","7"]] 
 string.match? /\A[a-zA-Z'-]*\z/ This is a [regular expression](https://ruby-doc.org/core/Regexp.html). * `\A` means "start of string". * `\z` means "end of string". * `[...]` defines a *character set*. Inside, you can either state literal characters (e.g. `'`), or ranges of characters (e.g. `a-z`). (You can also do some more advanced things, but I'll skip that for now.) * `*` means "zero or more" of the previous pattern. Putting this all together, the pattern will match if, and only if, the string contains only these 'whitelisted' characters.
Does it [correctly un-escape double quotes](https://tools.ietf.org/html/rfc4180#section-2) in double-quoted values in files? `"Double quotes ""are escaped like this"" in CSV format"` should evaluate to `Double quotes "are escaped like this" in CSV format`. Likewise, backslashes are *not* used for escaping in CSVs, so a literal `"Test \n" value"` in the CSV should be imported as `Test \\n value` in ruby, not `Test value`
Since tomthecool already did the regex I thought I would add that there is a great site for practicing regex basics. [This is a regex crossword](https://regexcrossword.com/) that is a great place to get started. 
of course mate, https://docs.ruby-lang.org/en/2.5.0/Hash.html#method-i-key
Thanks for your help. I don't think `match?` is a valid expression for Ruby 2.3, but I got this to work using your regex: `abort "Last name only allows letters, hyphens, and apostrophes" unless /\A[a-zA-Z'-]*\z/ === last_name`
Yes, of course. CsvReader supports reading double quotes and newlines in quotes. :-) Note: The RFC4180 write-up is NOT a CSV standard spec - it's just a write-up by a random guy for a mime type and the write-up has many flaws by being way too strict (and, thus, doesn't reflect reality). Note: Using backslash escapes in CSV is "legal" and perfectly fine - it's called the unix-style/dialect in contrast to the windows-style/dialect also known as excel spreadsheet :-).
Not intending this as a criticism, just curious: If there are bugs with Ruby's CSV class, why did you choose to make a gem instead of fix the problems at the source?
Good questions. You cannot fix the source because it's a major design flow. See above with link to the source of the standard library. It uses a supposed "faster" line.split(",") kludge that will never and cannot work for edge cases - you need to use a custom built-parser and that's just a start, that is, it's not about changing a line here and there it's basically unfixable and easier to replace with a new library.
Use find index. That‚Äôs your clue
Are integers as keys a weird case? I've tried every combination I can think of, both old and new syntax, and can't get it to work. eg. points = { :1 =&gt; ["E", "A", "I", "O", "N", "R", "T", "L", "S", "U"], } points = { 1: ["E", "A", "I", "O", "N", "R", "T", "L", "S", "U"], } points = { :"1" =&gt; ["E", "A", "I", "O", "N", "R", "T", "L", "S", "U"], } points = { "1": ["E", "A", "I", "O", "N", "R", "T", "L", "S", "U"], } puts points.key("B") And I get errors on each, can't even puts the number as a string.
It probably makes more sense to use the letters as keys, since they are unique. To get all matching keys by a value, you can do something like this: https://stackoverflow.com/a/38418570 Or, if you only want one key, use the Hash#key method. 
Thank you but I've actually been able to do it that way already, I just wanted to see if I could have less keys and store more data within them, rather then writing out 27 pairs.
 module Scrabble extend self POINTS = { 1 =&gt; Regexp.union(%w[E A I O N R T L S U]), 2 =&gt; Regexp.union(%w[D G]), 3 =&gt; Regexp.union(%w[B C M P]), 4 =&gt; Regexp.union(%w[F H V W Y]), 5 =&gt; /\AK\z/, 8 =&gt; Regexp.union(%w[J X]), 10 =&gt; Regexp.union(%w[Q Z]) } def play print_header loop do word = get_input.upcase exit_on_request(word) score = word.chars.sum(&amp;method(:calc_score)) puts "Your score: #{score}" end end private def print_header print "\033[2J" # clears the screen print "\033[1;1H" # move to row 1 col 1 puts puts "~~~ Welcome to Scrabble! ~~~".center(80) puts puts "Enter a word to determine your score. For blank tiles, insert a" puts "space, e.g. 'foo bar'. To exit, enter 'q'." end def get_input loop do puts print "Enter a word: &gt; " input = gets.delete('^A-z') break input unless input.empty? end end def calc_score(char) POINTS.invert.each do |regex, value| return value if regex.match?(char) end 0 end def exit_on_request(str) return unless str.casecmp?('Q') puts "\n** Exiting..." exit(0) end end Scrabble.play 
I like that you investigate and try to resolve the task yourself, you think in a right direction, the only issue you'll face is that "Hash#key" wouldn't actually work in this case, because your value is an array, but you search for a single character. As a suggestion I would suggest you to do: "points.find { |_, v| v.include?('R') }[0]" - "Enumerable#find" finds the first occurrence which matches the criteria in a block which is if array includes a character. As a result you'll get an array where the first element is a key and second element is the value of the matching occurrence, so you use "[0]" to get the key you need.
Nice! Last week I was working with a csv file in utf-16 and needed to covert it to utf-8 to perform a find in string and save to the dB. This was in php and I used a build in method to convert the encoding. I see that your always using utf-8 when reading a file, is this ok for a file with other encoding like a utf-16 encoded csv?
There are two things that you are wrestling with here: 1. It's annoying to type extra text in my code. 2. How should my code work? These are not always synergistic, and this exercise is a good example of where they are not always synergistic. To satisfy both 1 and 2, I would recommend that you use code to transform the way you want to type the data for your code into a form that facilitates your code working the right way. This is the concept of a "domain-specific language" and you may run into it again as you learn to code. So if it's important to you to type {1 =&gt; %w[E A I...],...} then write some code to transform that data structure into the structure that actually makes sense for your code, which is {'E' =&gt; 1, ....} The reason the latter data structure is better, is because that's what hashes are for. They are for searching within your data for a specific key and returning its value. You don't want to search for 1, so it makes no sense to make that the key. There are many ways to invert a hash, and for your data structure, you are going to have to write some code to do it because you are starting with a hash with array values. Hash#flat_map, Hash#inject, Array#group_by and Hash[] could all be useful.
.all is lazily loaded. It wont call it until it needs to. Since pagination is layered in it wont call it for millions of records. 
Use a framework such as Rails or sinatra for such web application. 
First time I see this gem, looks neat! Thank you.
 rails new api_name --api
Add Active Model and some form fields in your view and you‚Äôve got yourself a User filter. 
Depends on what do you need to store. If you upload json data/files and want to get it back later, then a sinatra app with s3 storage is the way to go, no rails + database overhead needed
For your specific request, Rails is overkill. I‚Äôd suggest something like Sinatra. You don‚Äôt need a datastore really... but it depends on how you‚Äôre gonna model your dictionary. If you‚Äôre new to this sort of thing I‚Äôd definitely avoid heavy duty frameworks and database systems. Start simple: Sinatra or a similar basic http server toolkit. Start inefficient: If your flat file or statically coded dictionary is slow, that‚Äôs fine. Learn about that and use that knowledge to inform your decision in a database engine. 
Good point. You're right for now the "hard-coded" default is utf-8. What I do now if I download a file is convert it to utf-8 first (e.g. from iso-8859-1 in my case or lets say utf-16 in your case) and than read all csv datafiles in "standardized" utf-8. In the future I plan to add a open method that works like File.open (it's just a wrapper) and you can pass in any encoding. Cheers. Prost. PS: The csvreader is just getting started and the idea is to add (or change) methods / functionality on what's needed to make the library more complete - as the name says too - for now it's just for reading (not writing).
That would be great. I would love to do this in Rails.
Don't tell anyone!
I have a repo and tips for you. Interviewed with them last month üòâ
I know about Gin. If I'm going to have to write code like this: package main import "github.com/gin-gonic/gin" func main() { r := gin.Default() r.GET("/ping", func(c *gin.Context) { c.JSON(200, gin.H{ "message": "pong", }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Without any requirements that Go can help with I may as well just use Sinatra. 
I‚Äôve used [Grape](https://github.com/ruby-grape/grape) in the past, and it‚Äôs worked perfectly.
[Qo](https://github.com/baweaver/qo) may be of interest.
That's really confusing What's the point having that?
Your co-worker is lame.
&gt; It turns out that those default values are evaluated in the same context as the rest of the method. Ruby‚Äôs syntax only requires that the default value be an expression. This section gives it away, I think. Because the default is evaluated in the context of the method, `(return self; nil)` will return early (read: immediately) from the method and return the instance of the object. You might think about replacing this with a guard clause, but then you cannot call the method with no args. Maybe you would then make the default `nil` and guard against that, but then what if you want to handle `nil` differently in the method. I don't really know, to be honest, but it's interesting that this is even possible.
could you give an example of how you add subcategories and query the tree with this?
i think i‚Äôve heard [something to the contrary](http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html) about TDD
Here's why Go on Rails is developed: [https://github.com/railstack/Awesome-Railstack](https://github.com/railstack/Awesome-Railstack)
I think this is really pretty, but I truely wonder in which real life situations do we desperately need this
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jgdavey/tree-sql-example/.../**category.rb** (master ‚Üí 39fc100)](https://github.com/jgdavey/tree-sql-example/blob/39fc1009952c034207dfa94b3ef6e13efb9ee5b7/app/models/category.rb) ---- 
I have. If you‚Äôre married to ruby, it‚Äôs a great option. 1.8 (iirc) has some substantial changes so careful while checking examples. As for a client, I recommend Apollo. It‚Äôs more faithful to the graphQL spec.
Alo, wrote Qo, and yep it does pretty much this. It also has hash x hash and hash x object matching you may enjoy. 
There was a proposal to add something like this to the language. Matz likes the idea, but is looking is seeking better syntax [https://bugs.ruby-lang.org/issues/14709#note-9](https://bugs.ruby-lang.org/issues/14709#note-9)
I am for multiple projects out experience has been great so far! We are using it all the time and now for over 8 projects! Hit me up if you got questions!
Works with anything as long as you inplement the resolvers, i use it for multiple datasources such as yaml, redis and postgresql with activerecord. 
Oh, that's great! I'll look into it. Thank you!
My question remains.
That doesn‚Äôt surprise me coming from him. He wants you to rely on the magic of rails for everything. Check out books and blogs from the likes of Uncle Bob Martin, Kent Beck, Sandy Metz to name a few.
There is never a desperate need for pattern matching, thought I answered that. It's just a quality-of-life improvement.
I‚Äôm all for quality of life. That‚Äôs why I‚Äôm on Ruby. I just don‚Äôt find those pattern matching examples really edge cases. Would be cool to see some real life examples‚Ä¶
FWIW Don't use OpenStruct anywhere that might be performance sensitive. It is really slow. Alternatives are to use a hash, or make a small PORO. I wrote about this a long time ago https://www.schneems.com/2014/12/15/hashie-considered-harmful.html#using-openstructs They're still useful for prototyping and mucking around, just be careful before you commit to using one in a library or your app code.
Fun/powerful, yes. Helpful for writing self-contained code that only needs to run within limited contexts - e.g. tests, or a small personal project, sure. But would I advocate putting this into a main application, on an important production setup? No. For the sake of just writing some slightly uglier code, e.g. if x == 1 &amp;&amp; y =~ /foobarbaz/, &amp;&amp; z == 999 # ... I would only consider using this library if it's an integral part of the application, and is well-understood by the whole team. Not just for the sake of a few lines of code.
I agree. But they're really [cool](http://errtheblog.com/posts/28-strut-your-structs) Plus for small stuff, it's really convenient!!
Instance eval is not, strictly speaking, necessary for this type of task. It makes things slower and more prone to subtle context and scoping errors. Triple Equals and proc coercions are insanely powerful in Ruby, and provide a much more natural API. When solving for a general use case I find that making a gem and proposing inclusion is more effective as a means of implementing ideas. This ensures that the idea can be seen on its own merits aside from the code base you're working in, and lets it be tested in its entirety outside of that one specific usecase. Now as to when you would use these libraries in production code? Most of my use cases for gems like Qo and Xf were working on ETL or data munging tasks. That's not to say they don't have use in other areas, but that I get the most mileage in production code there. 
Try it yourself. Example: require 'csv' require 'pp' begin CSV.parse( %{1, "2"}) rescue CSV::MalformedCSVError =&gt; ex pp ex end # =&gt; #&lt;CSV::MalformedCSVError: Illegal quoting in line 1.&gt; begin CSV.parse( %{"3" , 4}) rescue CSV::MalformedCSVError =&gt; ex pp ex end # =&gt; #&lt;CSV::MalformedCSVError: Unclosed quoted field on line 1.&gt; pp CSV.parse( %{"","",,} ) # =&gt; ["", "", nil, nil] Is that what you expected?
Qo ( https://github.com/baweaver/qo ) has several in the bottom of its Readme. I try and add them as I use it in prod code or debugging sessions. I also have entire areas of tests dedicated to just that. 
Ah, I see. Not only is the root ActiveRecord connection the default connection used by DelayedJob, it's _also_ the _only_ connection that DelayedJob can use. I was going to ask if you had considered using module injection in order to open up an interface on DelayedJob to allow the connection to be specified externally. My thinking was that it seems like a missed opportunity to merely exchange one case of implicit configuration (getting DelayedJob's database connection from ActiveRecord) with another case of implicit configuration (getting DelayedJob's database connection from a global constant). However, when I looked in greater detail at DelayedJob, it doesn't seem like that would even be possible. Really, it would be nice if DelayedJob could allow users like us to control the database directly and explicitly. Since that doesn't appear feasible, I understand the use of applying a monkeypatch via module extension. Cheers!
yes, rubycritic includes these tools :)
Agreed, everyone does have any opinion and most are based on experience and working in environments that contribute to said behavior. What I'm trying to say is that code can be clean and readable, not convoluted, and you don't have to mock everything. Code should be loosely coupled and highly cohesive. This does not discourage the use of integration and end to end tests. These are very important, and unfortunately, some don't think so. In my experience, TDD can help drive the design process to limit side effects from other objects. I'm not saying it's an easy practice to do, but the end results should yield more stable code at the unit level. Working on legacy code, that is a whole other animal. Especially when you need to add features and there are little to no unit tests. Sure there might be gherkin feature files or something, but if we are passing objects around, now I have to think about state when a method is called and there are no unit tests around it.
I Managed to put it to work, just accessed the directory where the file is. 
There are unbalanced quotes in your input, so the terminal is waiting for you to finish entering the command. One way to solve is to just cd to the "ruby-poo" directory, and execute `ruby ola_mundo.rb` from there. 
Pretty much. You use quotes or you don't, **nil** has its own meaning. So there is no surprise for me there.
GitHub too... soon. https://mobile.twitter.com/eileencodes/status/1030461847256875008
They've improved OpenStruct performance in recent versions of Ruby. The caveat remains that instantiating an OpenStruct will define accessor methods, which in turn clears Ruby's method cache. Using OpenStructs is fine. Just don't create them. ;-P Or create them up front, not while the method cache is being used.
Alright can the person who downvotes this explain themselves? This is literally the answer. 
You can always just return string values from the route. It will display in your browser. Great way to debug and get a handle on what url parameters the route is dealing with. 
I also noticed that people use them a lot in tests to mock objects, so it's not just the performance, but also the fact that you can define just any methods on that object(even ones that are not defined by the original object), and the code could easily get out of sync with tests, since your openstruct will not raise an error if you're stubbing a method that doesn't exists or has been renamed in the original class. I would always prefer rspec's verifying doubles over them
&gt; You use quotes or you don't, Can you explain what you mean? If you use all quotes, you get the same errors / exceptions (it's not about mixing quoted and not quoted values).
do you have the erb template at the expected path ? (`app/views/user/show.erb`)
So what exactly is the slow part here? I have an app that creates a solid ~20-30 openstructs and it's how data is passed around. I'm noticing it being a bit slow, when I feel like it should be faster. It's not a web app though, it's a local tool that processes a lot of data. I'd love to know more about what part is slow so I can do some testing before I wholesale refactor to remove the openstructs to see if I am actually going to gain anything for the work.
Something I only saw really recently is mocking the method itself For example if you have a Foo class that has a method bar on it then in the test you can: f = Foo.new def f.bar; return "new mocked behavior here"; end While it looks a little funky in the test body it's really easy to work with you can also do things like call super or other methods. It's a really versatile trick. 
It's still about 30% slower. This is on 2.5.1: require 'benchmark/ips' require 'ostruct' hash = {foo: "bar"} open_struct = OpenStruct.new(hash) Benchmark.ips do |x| x.report("openstruct") { open_struct[:foo] } x.report("hash") { hash[:foo] } x.compare! end Gives me Calculating ------------------------------------- openstruct 7.386M (¬± 5.1%) i/s - 36.938M in 5.017134s hash 9.702M (¬± 5.5%) i/s - 48.634M in 5.031363s Comparison: hash: 9702192.9 i/s openstruct: 7386022.6 i/s - 1.31x slower 
Before you refactor I suggest you use a tool like derailed_benchmarks to see if it's a hotspot. If you're using it here or there, it's not a big deal. If it's being called hundreds or thousands of times per request then there might be some savings. There's another comment on here which points out that it got faster. It's slow for two reasons: it uses some metaprogramming to work and a hash is ultra optimized inside of the Ruby interpreter.
`Errno::ENOENT` means the file is missing. My guess is `erb :'/user/show'` should be `erb :'/users/show'` (notice users being pluralized).
thanks, will dive into some benchmarks when i have time soon. This is just a side project in a lot of ways so it's not something i spend a great deal of time on consistently. 
Interesting - it's actually views/ by default in Sinatra &gt; By default, this is assumed to be a directory named ‚Äúviews‚Äù within the application‚Äôs root directory &gt; http://sinatrarb.com/configuration.html#views---view-template-directory But based on the error message, I'd agree with your suggestion and move it where the error says. I suspect OP has configured sinatra differently (or is maybe including a gem which does something unexpected)
Yes but if the original bar method calls another method in your class(which is bad to stub since its in your class), in the case that something breakes in that method, your class' tests will not catch that bug, and no other tests will. Not to mention that you have to keep it in sync with the original method(signature, name and so on). It's a nice trick for testing super call though
Maybe it tries to load it by relative path, e.g you are in `app/routes_file.rb` and when you tell it `erb: '/user/show'` it tries to look after it from the current dir ? I am not really familiar with Sinatra, but everytime i got a load error it was because of this
I'm on Diaspora already, I feel like I really only need to be on one federated social network. But maybe I'll do this. What happened with the ostatus network being like, branded by the Ruby implementation though? There's been ostatus servers written in PHP, Haskell, Python, Java, but then a Ruby ostatus server named mastodon comes along amd suddenly the whole network is named after it. How'd that happen?
Argh, I predate the cool ruby.social instance. I'm here, fellow tooters! https://mastodon.xyz/@mperham Since Twitter has pulled the plug on useful 3rd party clients, many of us are moving to Mastodon, which happens to be built on Rails, Puma and Sidekiq.
[removed]
Ok, I get it. No, it's not all the readers in the world. Although, it's a known issue and Ruby has an option added since 2.4 for this scenario: CSV.parse('1, "2"', liberal_parsing: true) =&gt; [["1", " \"2\""]] Before Ruby 2.4, you could use: CSV.parse('1, "2"', quote_char: "\x00") =&gt; [["1", " \"2\""]] And for better formed (without spaces around the comma) string, you could just use the *quote_char* option: CSV.parse('1,"2"', quote_char: '"') =&gt; [["1", "2"]] It's all in the [doc](https://ruby-doc.org/stdlib-2.4.0/libdoc/csv/rdoc/CSV.html#method-c-new). 
And `open_struct.foo` is even slower. 
&gt; CSV.parse( %{1, "2"}) &gt; CSV.parse( %{"3" , 4}) Error message is confusing, but the problem here is not the quote, it's the space before/after the comma: irb [2.5.0] (sshaw)$ CSV.parse( %{1,"2"}) =&gt; [["1", "2"]] irb [2.5.0] (sshaw)$ CSV.parse( %{"3",4}) =&gt; [["3", "4"]]
It's a Twitter competitor. Anyone can create their own instance or register to one that is open. When in your instance you can see posts from people in your instance in the local feed and then there is the federated feed that shows posts from all the public instances.
I wouldn't bother running format validation on names, just validate that it isn't blank and let them set it to `TABLE "users";` if they want.
Mainly by adding new features people wanted, having a more modern UI than the competitors, and creating a unique culture. &amp;#x200B; Also note that OStatus is considered a legacy protocol by now, Mastodon and most other implementations prefer to use ActivityPub.
I've been working on a graphql API for my company for the last 4 months. The API has been really nice for our clients so far (nothing public).
Or drop the second quote.
See also https://bugs.ruby-lang.org/issues/14916. 
Sort of...anyone on [ruby.social](https://ruby.social) can follow you even if you're on your own instance. So for example, I started my own instance at [openweb.social](https://openweb.social) but I'm following a bunch of folks on other instances such as [ruby.social](https://ruby.social) and they can follow me back. Then anything I post they see, and visa-versa. It feels rather magical.
I see a similar result with Hash being about 1.35x faster on your microbenchmark with CRuby: Calculating ------------------------------------- openstruct 8.250M (¬± 3.5%) i/s - 41.346M in 5.018162s hash 11.088M (¬± 5.8%) i/s - 55.279M in 5.005694s Comparison: hash: 11087887.7 i/s openstruct: 8250373.1 i/s - 1.34x slower With TruffleRuby, OpenStruct is 700% faster - just folding the problem away to achieve billions of ips: Calculating ------------------------------------- openstruct 1.822B (¬± 8.0%) i/s - 8.749B in 4.991954s hash 250.275M (¬± 8.0%) i/s - 1.231B in 5.003405s Comparison: openstruct: 1822405800.0 i/s hash: 250275005.1 i/s - 7.28x slower They're about the same speed on JRuby on Graal with invoke dynamic: Calculating ------------------------------------- openstruct 24.161M (¬± 8.2%) i/s - 119.585M in 4.991765s hash 23.230M (¬± 7.1%) i/s - 115.307M in 4.995369s Comparison: openstruct: 24161190.6 i/s hash: 23229795.9 i/s - same-ish: difference falls within error I like that OpenStructs are usably fast these days. It'd be neat to avoid busting the method cache on initialization and when new keys are set. I thought this recent proposal had some interesting ideas: https://bugs.ruby-lang.org/issues/14555 
Or preferably, use `pry`. Using a debugger is one of the most important skills you can learn.
I do not believe harassing dhh on twitter will make him consider doing it. A github issue would in my opinion be the proper channel.
Thanks for trying. That's my point. Why not fix the csv library / parser [1] instead of asking people to change their csv datafiles? PS: It's not too hard to be more accepting (and isn't the human part more in line with the ruby philosophy?) What kind of irony that the strict python has a modern "liberal" csv library as do other languages. 
Thanks for the details explanation. I'm down the rabbit hole alreay :-) and trying to "fix" or lets say modernize the csv reader one commit at time. See [/csv11](https://github.com/csv11) PS: From the ruby talk posting about some more background: The heart of the matter and the joke is that if you want to parse comma-separated values (csv) lines it is more complicated than using line.split(",") and you need a purpose-built parser for the (edge) cases and (special) escape rules, and, thus,, you're advised to use a csv library. After using the csv std library I'm getting all these parse errors so I look at the source code and read-up what's going on and - surprise, surprise - the joke is on me: parts = parse.split(@col_sep_split_separator, -1) [1] By definition it is impossible and unfixable unless you use your own purpose built parser - sorry, there's no "ingenious" hack for a supposed "faster" library and the excuse about parsing only very, very, very strict RFC is getting old. What do all the other csv libraries in the world do (see python, java, go, javascript, etc.) Anyways, here's how a parser looks like (it's not magic but definitely more work - e.g. instead of 10-20 lines you will have 100 or 200 or more): def parse_field( io, sep: ',' ) value = "" skip_spaces( io ) ## strip leading spaces if (c=io.peek; c=="," || c==LF || c==CR || io.eof?) ## empty field ## return value; do nothing elsif io.peek == DOUBLE_QUOTE puts "start double_quote field - peek &gt;#{io.peek}&lt; (#{io.peek.ord})" io.getc ## eat-up double_quote loop do while (c=io.peek; !(c==DOUBLE_QUOTE || io.eof?)) value &lt;&lt; io.getc ## eat-up everything unit quote (") end break if io.eof? io.getc ## eat-up double_quote if io.peek == DOUBLE_QUOTE ## doubled up quote? value &lt;&lt; io.getc ## add doube quote and continue!!!! else .... and so on and so forth [2]. See the difference? [1] https://github.com/ruby/csv/blob/master/lib/csv.rb#L1248 [2] https://github.com/csv11/csvreader/blob/master/lib/csvreader/parser.rb 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [csv11/csvreader/.../**parser.rb** (master ‚Üí 025e513)](https://github.com/csv11/csvreader/blob/025e5130880df7d791090df80c8e80618f9b5dc2/lib/csvreader/parser.rb) * [ruby/csv/.../**csv.rb#L1248** (master ‚Üí 1acfe1a)](https://github.com/ruby/csv/blob/1acfe1a11f68600a264ec09afa8732b28ff90338/lib/csv.rb#L1248) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e4oi7p9.)
https://guides.rubyonrails.org/contributing_to_ruby_on_rails.html
PM me. 
u/ksec Thanks for the post! New 1.0.0 version available at [https://github.com/vifreefly/kimuraframework](https://github.com/vifreefly/kimuraframework)
This is invalid CSV per RFC 4180. As someone pointed out, there's an option for lax parsing. I think defaulting to valid makes sense. Even the venerable [Perl CSV module](https://metacpan.org/pod/Text::CSV) and its 50K+ tests behave this way be default: /tmp &gt;cat /var/folders/fn/5bmn_rf52x54hj7lxsw5c7ch0000gn/T/scratch.pl use Modern::Perl; use Text::CSV; use Data::Dump 'dd'; my $csv = Text::CSV-&gt;new or die Text::CSV-&gt;error_diag; die 'cannot parse' unless $csv-&gt;parse('1, "2"'); dd $csv-&gt;fields; /tmp &gt;perl /var/folders/fn/5bmn_rf52x54hj7lxsw5c7ch0000gn/T/scratch.pl cannot parse at /var/folders/fn/5bmn_rf52x54hj7lxsw5c7ch0000gn/T/scratch.pl line 6. 
How does Apollo do file uploads these days? That isn't part of the GraphQL spec, but I keep finding gists and snippets around the internet that say things like "this is kind of like how apollo does it," so I presume they have _some_ solution they've settled upon.
Can you explain why did you move to from \`will\_paginate\` to \`kaminari\`?
I can offer some guidance as well. PM.
I agree with that. People should not be cheating these examples into their codebases. They should know what they‚Äôre doing.
Why can't TruffleRuby optimize the has calls too? I would expect they would both be in the same ballpark like jruby.
Why do you think it's acceptable behavior to publically harass an open source maintainer on social media to get your way? This just drips of entitlement. Put close twitter, open your editor, write some code and open a PR.
Hey, moomaka, just a quick heads-up: **publically** is actually spelled **publicly**. You can remember it by **ends with ‚Äìcly**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Why compare it to `Hash`? It's the useful comparison against a PORO? `Hash` is obviously going to be faster than something created with OpenStruct or a PORO, it simply does less work for what is being tested here.
You're comparing the performance of a hash map lookup with the performance of an extra method call + return instance attribute. Method calls are fairly expensive on MRI, truffle can simply get rid of them in cases like this but your still left with 'the work', hash map lookup vs return instance value. 
Global test is always painful to manage in a test suite. Minitest has been pretty aggressive on pushing its users to get better and write better test suites. Over the last decade: 1. test/unit runs tests serially in a deterministic order 2. minitest 1.0 runs tests serially in a random order 3. last I heard, minitest 6.0 will use parallel testing by default, tests are run concurrently. All of this is meant to push users to write more functional, isolated testcases and explicitly disable parallelization to allow global state usage where necessary. I think this is a great example of a library helping its ecosystem improve over time.
The api is easier for us to write and read, and it offers more functionality/queryable info than `will_paginate` offered us.
I believe this one https://bugs.ruby-lang.org/issues/14912 is currently used to synchronize all the opinions and is supported by core lang developers.
Looks interestng. You might find [Qo](https://github.com/baweaver/qo) interesting too.
I'm not sure this is broken. The CSV spec (such as it is? Does it even have a spec) would probably say leading and trailing whitespace are part of the value -- I don't know if it should be stripped by default. Are comments even part of the CSV spec either? Stripping them means a value can't start with a comment, which might not be to spec. I'm not sure any of these things should be default, but they could be _easier_ non-defualt options, like a `strip_whitespace` config instead of having to supply the regexp yourself. 
You've literally got the code I used. Feel free to run your own benchmark instead of snarking on what I __didn't__ do. 
If you deal with CSV a lot, you're going to get burned one way or another, because CSV is so various and non-conformant in the wild. For instance, let's say we by default ignore comment lines (beginning with `#`), which I dont' believe is in any spec or standard for CSV. Now maybe I'm processing hundreds of CSVs a day, they each could be thousands of lines wrong. And in some line in the middle of _one_ of them is a _first value_ that begins with `#`. `#16,Joe Montana,49ers`. So that line just gets skipped, when it was actually not meant to be a comment. How long until I even notice that bug? How confused do I get figuring out what's going on? The thing producing this CSV and giving it to me didn't even do anything wrong, right? It didn't know we were using some "comments extension" to CSV, there was no reason a `#` had to be escaped. There's a reason "be liberal in what you accept" has been reconsidered as harmful to reliable code and ecosystem sanity.... Because CSV is so various in the wild, you're going to run into weird cases _no matter what_ if you deal with enough of it (that was produced by various third parties). It's best to keep the default parser as simple and close to spec(s) as possible, which will make debugging those problems more clear, you know what's going on, and can figure out why it's not working, without needing to look at source code to realize "Oh, _this_ CSV parser decides that a `#` is a comment line, what? Now do I got to tell everyone giving me CSV's to adhere to that standard and always escape #? Is their software even capable of that? Or I guess I can turn off that option in the ruby CSV parser, I hope...." Easy config options to turn on extensions, heuristics, and liberalities is fine and great. I guess that's what the `liberal_parsing: true` is supposed to do. More specific switches may be required. But making the parser by default do things you think make sense or you think you've seen in lots of CSVs (but where there are plenty more that dont' comply), is just asking for trouble. If "all the other CSV parsers" actually behave consistently (I doubt it) in a way different than official 'standard', then someone should write a new spec/standard for this enhanced/++ version of CSV, and then the parser can be told to use that with a simple flag. If every CSV parser and producer does it's own idiosyncratic bag of heuristics that are similar and overlapping each other but not exactly the same... adding one more like that doesn't help anyone. 
Wow. Thanks for your detailed explanation and examples. To handle different formats / dialects the idea is to use keys such as you do with encodings e.g CsvReader.RFC4180.parse, CsvReader.EXCEL.parse, CsvReader.MYSQL.parse or pass in the individual options as keyword arguments. The main point that got lost is that the "parser" in the csv standard library is broken, broken, broken. It's just a line.split kludge - it's not working by definition for different formats because you will need a purpose built parser. See python :-) as an example (parser is in c) &lt;https://github.com/python/cpython/blob/master/Modules/_csv.c#L587&gt;. Anyways, I don't really care - use what works for you - was just trying to point out the obvious (if you look at the csv code itself). 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [python/cpython/.../**_csv.c#L587** (master ‚Üí 096329f)](https://github.com/python/cpython/blob/096329f0b2bf5e3f0a16363aa631d993ce078737/Modules/_csv.c#L587) ---- 
All good points. Again don't even have the option currently of stripping whitespaces because there's no parser "under the hood" - and using str.strip like str.split(",") will NOT work - because CSV has - that's the point - some special escape and quote rules (e.g. the parser itself needs to handle the stripping - but that one doesn't exist). Again thanks for trying to think it through. I'm offline. All the best. Cheers. Prost.
Please don't. Stupid idea in Rails context. Turbolinks and ERB is what Rails builds on. That is what Rails encourage devs to work with. 
While you're at it, ask for native gRPC support. And some French fries for table 3! Yes, I don't care if they're Belgian! I heard he's Danish, he don't give a!
there is a typo in this article where account is spelled "acount"
\+1 I'm new to ruby myself, but as far as I can tell, Ruby's all about readability. So your code should capitalize on that.
Option 1, I like to minimize the use of the ‚Äúif‚Äù keyword, and while I love ternary operators, they look worse as the Conditions get longer
&gt; The caveat remains that instantiating an OpenStruct will define accessor methods, which in turn clears Ruby's method cache. It's actually not instantiating them, it's dot access to properties that defines methods now, see: https://github.com/ruby/ruby/pull/1033 e.g. a = OpenStruct.new(hi: 'hi') # doesn't define anything. a.hi # defines the getter and setter for hi, busting the cache a[:something_else] = 5 # doesn't define anything. a.something_else # defines the getter and setter for something_else, busting the cache again. I'm not sure I agree with the performance trade off choice, but it depends on use case. If you define an openstruct and access all the properties with dot notation now you'll end up busting the cache many times instead of effectively once, but creation of openstructs is faster now. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ruby/csv/.../**csv.rb#L1259** (master ‚Üí 1acfe1a)](https://github.com/ruby/csv/blob/1acfe1a11f68600a264ec09afa8732b28ff90338/lib/csv.rb#L1259) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e4phq9g.)
I like to use local variables when there are multiple method calls and prefer using guard clauses over `if..elsif..end` blocks dog_id = params[:dog_id] curr_usr_dogs = current_user.dogs return curr_usr_dogs.last unless (user_is_dog_lover || user_is_cat_hater) return unless dog_id.present? return Dog.find(dog_id) if current_user.is_system_admin? curr_usr_dogs.find(dog_id)
Good point!
Well yeah, you might need it in order to clean up someone's ninjacode.
Like "hot potatoes" for https? I can dig that.
I don't love this, but here's another option: if dog_id = params[:dog_id].presence available_dogs = current_user.is_system_admin? ? Dog : current_user.dogs available_dogs.find dog_id elsif 
String f time
I like where this is going, but looks incomplete. 
I say strafe time like i'm Neo dodging bullets in slo-mo. 
I'd probably do this: def find_dog return dogs.find(params[:dog_id]) if params[:dog_id].present? # Put !user_is_dog_lover &amp;&amp; !user_is_cat_hater in the User class and give it a name current_user.dogs.last if current_user.name_this_conditional end private def dogs current_user.is_system_admin? ? Dog.all : current_user.dogs end
All three seem quite smelly. Why is the same action being called whether or not a dog_id is provided? Can't that concern be pushed off to the routing layer? Shouldn't concepts like "system admins can see any dog" be encoded in the model layer? What concept is the final conditional modelling, can't that be better named? But, eh, if I had to write it like this, probably something like: dog_id = params[:dog_id] dog_finder = current_user.is_system_admin? ? Dog : current_user.dogs if dog_id.present? dog_finder.find(dog_id) elsif !(user_is_dog_lover || user_is_cat_hater) current_user.dogs.last end Digging into a hash repeatedly with the same key is error-prone and longwinded. Misspelling a local variable name is more likely to result in a meaningful error than misspelling a hash key. Selecting the target for the `find` call separately keeps the two concerns&amp;mdash;how you select which dataset to use, and what you do with that dataset&amp;mdash;distinct, and avoids having you repeat yourself. "NOT foo AND NOT bar" is more clearly spelled "NOT (foo OR bar)".
 class Dogs scope :for_user, -&gt;(user) { user.admin? ? Dogs.all : user.dogs } end def find_dog return Dogs.for_user(current_user).find(params[:dog_id]) #...
Yea I like that.
`striff-time` is what I say.
For some reason this describes my feelings on working with time as a programmer in my native tongue. https://m.interglot.com/nl/en/sterf
We C programmers pronounce the `str` as stir and `f` as eff.
OK, I'll give Mastodon another try. I have been hoping for more topic specific mastodon instances, as the main ones are far too noisy.
`s-t-r-f-time`
i believe you should never say the word aloud, at risk of summoning a punctuation-obsessed demon. 
`Text::CSV` also converts to an integer, so the equivalent Ruby code would be: /tmp &gt;cat $TMPDIR/scratch.rb require "csv" require "pp" pp CSV.parse(%{1, "2"}, :liberal_parsing =&gt; true, :converters =&gt; [ -&gt;(n){ n.gsub(/\A\s*"|"\z/,"") }, :integer ]) /tmp &gt;ruby !$ ruby $TMPDIR/scratch.rb [[1, 2]] Perl's `Text::CSV` certainly handles things better, and appears to be more feature-rich but, its has been around for 21 years. Ruby's CSV module has been around for ~13 years so this is expected. 
i'd say that's clearly the right answer then, since that's where the method name comes from. 
This is an authorization problem, you are wanting to change behavior based on the user attributes. Use a policy object to keep the intent clear without leaking user details back into your dog model. Something like Pundit works great for this. But a Poro solution might look like: ``` def find_dog @dog = DogScope.new(current_user).scope.find_by(id: params[:dog_id]) @dog ||= default_dog end def default_dog return false if user_is_cat_hater &amp;&amp; user_is_dog_lover current_user.dogs.last end class DogScope def initialize(user) @user = user end def scope return Dog.all if @user.is_system_admin? @user.dogs end end ``` It is a few more lines of code, but separating out the parameter logic, the user roles, and the policy scopes makes the gaps in the logic very clear and easy to debug.
I pronounce it: Stringify Time
Ese-te-ere-efe-ti-me
I agree with the dangers of metaprogramming on a project level, but it's quite useful for writing libraries (e.g. Rails would not exist without some meta &lt;3 ) think of this as a collection of "what is the syntax again ?" reminders for those who know what are doing As for Junior developers sometimes from learning perspective it's more helpful to get burned then just being told not to touch something dangerous :) It's useful to understand metaprogramming for general understanding of how Ruby works internally.
...ok try to have a look at the article now, I think I nailed it :) 
string from time
A real C programmer would also pronounce the (3). 
S T R F Time
What exactly is your question? Are you asking how to debug in ruby? How to use your forked version of the gem instead of the rubygems version?
rhymes with Smurf-time
How to use the forked version and also debug it, if that make sense. 
Actually that's how I remember the method name!
Sure that makes sense. There's a lot of different ways that you could mean to use the forked version. I'll assume the simplest reason: you want to make a modification for your existing app that uses the gem already. **Using forked version:** Clone the forked gem locally. Modify the Gemfile in your application to specify the :path to the local yard-cucumber gem. I can't link directly to the relevant section of the page, but search for 'path' on the [Gemfile docs page](https://bundler.io/v1.5/gemfile.html) **Debugging:** I like to use a gem called [pry](http://pryrepl.org/) for debugging. You basically just need to include pry in the Gemfile, require the pry gem, and add 'binding.pry' where you want to inspect the state of the application.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](http://pryrepl.org/) - Previous text "pry" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Lol these are all really great replies. I didn't intend for this to be a breakdown of permissions or authorization, the specifics of what it's doing was not the exercise more the question was "which is the easiest to quickly parse and understand", I should have made that more clear. Really it was a breakdown of 3 ways to represent a moderately complex conditional and I was curious how people felt one way or the other. 
You're not encoding the same logic in your example.
1. I realized I never have said this out loud 2. I would have said ‚Äústring eff time‚Äù 3. thank you for saving me the embarrassment 
I changed the track at `unless (user_is_dog_lover || user_is_cat_hater)` didn't I?
For what it‚Äôs worth my comment has -12 votes! You did write a good article. I just don‚Äôt want my junior engineers trying to define methods on random shit because it‚Äôs neat. Good post.
Junior dev advisory is beautiful.
This is the correct answer
I agree that it's a scope plus a default, although I might write it slightly differently. You've also covered the situation where the user is either a cat hater or a dog lover (I think you meant to write `||` instead of `&amp;&amp;`). That branch was completely missing from the OP's examples, which would indicate to me that we didn't get all the code, or maybe that case was accidentally overlooked because of how the conditionals were written originally.
Thanks for highlighting smarter_csv. Other great csv libraries / gems include: - [hippie_csv](https://github.com/intercom/hippie_csv) - [lenientcsv](https://github.com/sj26/lenientcsv) - [wtf_csv](https://github.com/gremerritt/wtf_csv) The idea is to bring them all together by using a better "core" parser, that is, able to handle the "smarter, hippie-style, lenient or wtf-style" parsing of more csv formats/dialects. Cheers. Prost.
https://medium.com/@tiagoparreira/powering-your-ruby-rails-development-with-pry-3d5dbd2a8b80?source=linkShare-4af34845749e-1535095692
struh fuh time
&gt; Instance eval is not, strictly speaking, necessary for this type of task. How else would you define `__`? Unless you're planning to define a global method, or change the proposed syntax, I think `instance_eval` is necessary.
Who cares about that, I wanna know when it's strptime!
no worries mate, fully understand how you mean it. No hard feelings. Re: -12 :It's constructive criticism, I just guess Its just the way you phrase it that made people upset :) 
Graph QL is awesome, webpack is awesome, but you kind of missed the point of the long-term Rails vision and mission please listen to this interview to fully understand what I mean * https://player.fm/series/all-ruby-podcasts-by-devchattv/rr-342-rails-development-and-more-with-david-heinemeier-hansson or this talk by DHH: * https://www.youtube.com/watch?v=9LfmrkyP81M
I say stringy-fy time. However I'm 100% aware that isn't strictly cannon
try doing that at a multi thread app and you'll see that when in a repl, background threads keep annoying your session, just to name a simple scenario. So i''m looking for a thorough intro to see all the pry features.
you're a lifesaver
Well you probably should have said so in the beginning. It was a bit hard to tell what you were after.
Good initiative. Very useful, I didn't know of wtf_csv. Thx!
Gotcha that makes sense. I guess if truffle could optimize the hash call then it would have to deoptimize on hash element additions which would be quite a bit of overhead? 
Thank you!
Thank you!
UNIX manual section 3.
I wrote [an article about this too](https://medium.com/square-corner-blog/new-class-naming-rules-in-ruby-bb3b45150c37) a few months ago that checks out the new characters.
Yep, you're bypassing parameter handling for users matching that conditional - it's meant to be a fallback when the user didn't specify a dog_id.
For me, I use [\`Any\`](https://github.com/baweaver/any). Previously I had used \`:\*\`. [Any](https://github.com/baweaver/any) is very simple: class Any def self.===; true end def ===; true end def to_proc; -&gt; { true } end end I believe underscores are not very intention revealing, so I'd asked the original owner of the Any gem if I could repurpose it for this. He agreed to let me use it for this, so now we have a very simple solution that makes a bit more sense from a glance: Qo.case([1, 'str', 42]) { |m| m.when(Integer, /^s/, 42) { ... } m.when(Integer, /^s/, Any) { ... } m.else { ... } } Though to be fair one could use Object to achieve the same, just without the idea of `to_proc` giving back an always true function. Instance eval is slower than `===` and `to_proc`, meaning finding a way to avoid it is imperative towards having a comparable speed to vanilla Ruby code.
I'd definitely consider using scopes. They give a name to potentially obscure param acrobatics. Now there's an issue with this particular scope, in that it cannot be used in any place except the first. That can be fixed with instance method references: def self.for_user(user) return all unless user.admin? joins(:user).where(user_id: user.id) end `all` makes a very handy identity type function for ActiveRecord. If you don't want to "apply" a scope, return `all` instead.
rubocop is quite nice if you set-up an automatic formatter. I'm not going to spend all day chasing quotation marks, but if it does it for me, I'm into it. The default rubocop formatter only does a couple of things that are quirky (unless for negative if's), but I'm fairly certain they can be turned off. 
That sounds really handy. I'll have to check it out. &amp;#x200B;
Thanks for sharing
Yeah, this scope is much better than mine.
Yup, and apparently django (at least some versions) used pickle for session serialization, which played a role in [this just-responsibly-disclosed facebook vulnerability](https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/). Somewhere else on this page someone said that Rails by default used Marshall for cookies. I _think_ that's not quite true. Marshall may be the default in the code, but I think Rails apps generated since ~4.1 will automatically generate configuration to use json instead. 
\&gt;mean by **broken**, but I think a better term for it would be** unexpecte**d... Exactly! if the CSV is not in spec to parse it you need to start backing away from the spec in random (to the word, maybe not to the library author) ways which are not defined by a spec -- its a series of tradeoffs and in almost every case those tradeoffs include unexpected or untestable (against a set of all possible CSV) outcomes. A CSV parser that does not perform a strict spec import and error state by default is broken to begin with. If you want your CSV parser to handle undocumented usages in CSV, not complain, and guess what the output should be -- ffs make that an option that comes with red labels. &amp;#x200B;
While perhaps technically the default, I believe since around rails 4.1 (4.0? 4.2? not sure) generating a new Rails app will generate config to set the _session_ serializer to json instead. I believe this was done for security concerns, although technically a cryptographically signed cookie it ought not to matter, but it can exascerbate other security errors, as in this [recently responsibly disclosed facebook vulnerability](https://blog.scrt.ch/2018/08/24/remote-code-execution-on-a-facebook-server/). I think pickle still is used more commonly in the python ecosystem than Marshall is in the ruby one... which might not be a good thing.
You seem to be a very experienced dev (I've used some of your gems in the past), so I'm curious to know where you draw the line between creating a monkey patch gem like this and just doing things the way they were intended in the framework. To me, it seems if you have the presence of mind to use this gem you could simply just review your code for usages of ActiveRecord::Relation#present? and update accordingly and save yourself from adding yet another dependency. 
Hello, for you convenience all recorded talks from day #1. Enjoy. Cheers. Prost. Greetings from Vienna. Day 1: - Yukihiro Matsumoto - Keynote https://www.youtube.com/watch?v=cs0s5lZAUwc - Chris Salzberg - Metaprogramming for generalists https://www.youtube.com/watch?v=1fIlcnrJHxs - Joannah Nanjekye - Ruby in containers https://www.youtube.com/watch?v=qPNkOPvjecs - Damir Zekiƒá - Tool belt of a seasoned bug hunter https://www.youtube.com/watch?v=ObB0dzX_rBs - Igor Morozov - Ducks and monads: wonders of Ruby types https://www.youtube.com/watch?v=v-H9nK8hqfE - Brad Urani - Rails anti-patterns: how not to design your database https://www.youtube.com/watch?v=zo3iRBPzscU - Coraline Ada Ehmke - The broken promise of Open Source https://www.youtube.com/watch?v=5ByUPh_uPqQ - Louisa Barrett - Ruby not red: color theory for the rest of us https://www.youtube.com/watch?v=OgO1EIFDgPU 
Close. Sturff time is the only time!
There's a bit of context missing that I guess I should add to the readme. This bit of code was already committed but then removed for being too disruptive. The idea is to pull the functionality out into a gem so people can try it out and if it has legs, then maybe we can consider merging into Rails propper. I've got commit to Rails and a pretty good finger in the pulse. Generally if I want a new feature I develop it straight on Rails. However before I got commit I would always make a stand alone gem first. I actually had one called `sextant` that I didn't intend to upstream (seemed like too much work) but Rails core actually reached out to me. The benefit of going with a gem first model is that you can get real world use feedback without waiting on rails. You also get to use the feature before a new rails release. If it's a good idea then you can point to high download numbers as anectdata. Most important though is if they say "no" you can keep using your code and your idea. 
Okay, that makes a lot of sense. Thanks for taking the time to reply. It's also nice to get some insight into how a large open source project validates small features like this.
While this change would make a lot of sense to me in Rails, I also think it's not a huge deal. No matter what Rails does, the developer _has_ to be constantly thinking about (or instrumenting/watching) what lines of code hit the database when and how, and if that's the right way for the job. With or without this in Rails default, developers need that message. Don't get me wrong, I actually kind of love active_record (I know, I know, it's uncool to say). But it does not get you out of having to understand SQL and rdbms, or having to think about when queries happen. So in the end, even if this change improves things in more cases in real world code than it makes things worse (which I think it will) for people just doing what comes naturally and not considering the db implications of every method on your models -- it doesn't get you out of having to consider the db implications of every method on your models. 
I personally wouldn't install the gem - I appreciate and rely on the subtle difference between .present? and .exists?. That said, as you know, it's a super common mistake in the wild and I can appreciate why a team would use the gem. I personally cringe a little bit when i see two SQL queries in a row in the logs - an exists followed by a select *. Of course, it's a smell, so you can track down where it's called and fix that instance. If this change were committed to Rails, it would be interesting to see another gem undo the change and track its popularity :) 
I think option 1 is clearly preferable out of those three, and probably good enough. Here's yet another one: if params[:dog_id].present? base_scope = current_user.is_system_admin? ? Dog : current_user.dogs base_scope.find(params[:dog_id]) elseif !user_is_dog_lover &amp;&amp; !user_is_cat_hater current_user.dogs.last end Better yet, extract the `current_user.is_system_admin? ? Dog : current_user.dogs` into another method, whether in the model or controller. 
This is such shit. It takes a lot for me to comment here, let alone downvote. But this is so fucking stupid, a shit take on of all things \#slice? GFY.
Whoa there man, calm down. What's so offensive about the article? He can't improve if you don't give him reasonable criticism.
/r/titlegore 
sent while i was taking a dump..happens from time to time
I have no idea what that title means. 
I gather the exact same data but using manual means. I did use a TMDb script back in the day. My logging is with Criticker and Excel. My % of women has never exceeded more than 7-8%, even when I'm trying hard (over a year) to focus on those directors. Good luck with your goal of 1/3, I'd bet money that you never reach it!
I prefer watching new good films, i don't give a damn if the director has tits or balls.
OK, thanks, maybe i'll consider replacing the irb with the pry command.
OK Harvey Weinstein.
nothing like it, what should matter is talent.
Unrelated question on AR If I have an eager loaded relation and I call a model method on one of the objects from an eager loaded association, the method is unaware of the eager loading, and proceeds to reload everything again. E.g. post.comments.is_highest_rated? will reload all the comments for the post again, despite them being loaded already. In these cases do I pass the eager loaded relation to a method and perform my logic there? It seems to work but feels unconventional. E.g. is_highest_rated?(post.comments,comment)
Keep it up! Writing about your language of choice is a rapid way to improve. The article is pretty simple; I'd try to find some unusual edge cases or beneficial uses of a language feature to keep the audience interested. I'd try to choose topics that push the edge of my knowledge. If this is the current edge of your knowledge, that's fine, if not you might want to dive into more challenging content.
Love your content, but I am a little confused about the real need for this gem. Perhaps my brain isn't thinking clearly as my 2 year old woke me up at 5am, but wouldn't `exists?` be a better option? ```[1] pry(main)&gt; User.where(username: 'kobaltz').present? User Load (2.0ms) SELECT `users`.* FROM `users` WHERE `users`.`username` = 'kobaltz' =&gt; true [2] pry(main)&gt; User.where(username: 'kobaltz').exists? User Exists (0.3ms) SELECT 1 AS one FROM `users` WHERE `users`.`username` = 'kobaltz' LIMIT 1 =&gt; true``` This way you still reduce the size of your query without adding an extra dependency into the app.
That is what _should_ matter, but we know it doesn't. Supporting those whose talents have unfairly been overlooked (or worse) is a good way to show the industry that talent should be the benchmark.
This is rail uploaded, not ruby üòî
From speaking with Janko @ EuRuKo today, he would like to make the configuration process easier for Rails. So there is hope that some pains will be resolved, but compared to ActiveStorage it‚Äôs an up-hill battle.
This all depends on your implementation of `is_highest_rated`. If you use a `where` in that method somewhere, yes, it will cause another query. What I would do would be do load the highest rated comment separately and compare it to post.comments.first.
I'm interested in Shrine, but, I am using CkEditor, with carrierwave as a backend for it. Can Shrine do that too? Because I don't want to have carrierwave and shrine at the same time.
I haven‚Äôt used CKEditor in years. But if I remember correctly it only expects you to return a JSON object containing the file url. So it shouldn‚Äôt be too complicated to implement it with shrine. If you are asking about something out-of-the-box then, as far as I know, there isn‚Äôt anything out there at the moment 
String format time
This would make Rails less attractive to me as a web framework. Rails may be opinionated about things that Rails uses, but it shouldn't be opinionated about the world outside your rails app.
What gem are you using for integration of CKEditor with CarrierWave? Or what code? I will gladly make a Shrine port, I just need to know what is it that CKEditor expects.
Shrine has a plugin for direct uploads that is fully customizable. Should be able to use the json responses from it to integrate it. https://twin.github.io/better-file-uploads-with-shrine-direct-uploads/
I think to some extent it's kind of an existential trade-off. What makes Shrine awesome is that, as it's tagline says, it's a file attachment _toolkit_ -- it was designed from the start to have composable primitives making it ultra-flexible, so you can do so many more things without feeling limited by or fighting with the file attachment library. The tension between flexibility and ease-of-use is, I think, an inherent one in software architecture. You can make something that is really easy to use at first but you hit a sharp challenge curve or even just plain a wall when you need to do something more complex (most previous Rails file attachment libraries, and also ActiveStorage). You can make something that has a somewhat steeper getting-starved "curve", but it's not actually a "curve" at all, the "challenge line" stays linear, allowing you to do very sophisticated and complex things (including things not originally considered by the author) with only proportionally increasing difficulty (shrine). To do both is really hard, and takes not only more development time but lots of design _skill_. I think this is a fundamental thing in designing reusable software in any domain. What shrine has done successfully is actually a lot harder, and I think puts you in a better position to achieve both. But even without that, if you think you're going to need sophisticated flexibility, the initial investment in something like shrine will pay off over the long-term. So long as shrine continues to be maintained...
Even if you believe the original story, what it's saying is your car sends telemetry back to a server running ruby on rails. I don't understand how everyone is blowing that out of proportion.
ActiveStorage really needs to go through some maturation. I tried using it for a new project and it's so married to processing images that it's a battle to make it work for anything else. That said, it's not an impossible thing to do, but it's not as effortless as using something like Shrine.
I agree with this. The article itself is well-written in terms of human language, but as it stands it's basically a more user-friendly variation on the RDoc for `#slice`. There's still value in that though -- articles like this helped me when I was still learning the ropes many years ago, because sometimes the RDoc is somewhat dense.
I wrote my first Rails app in years recently and ActiveStorage was great. It just did what I thought and hoped it would, and did it well. As usual, the only thing that doesn't feel right is the lack of foreign keys in the database because of the polymorphic key. Luckily my app isn't really dealing with *important* data at a high scale, but I'd feel that something was missing if I was.
There was actually a really good talk about polymorphic relations at EuRuKo two days ago - [https://www.youtube.com/watch?v=zo3iRBPzscU](https://www.youtube.com/watch?v=zo3iRBPzscU)
nice writeup. I‚Äôve found VCR to be useful in my case because we interface with several complex business APIs that are somewhat orchestrated by our app. The APIs are far too complex to write normal fixtures, furthermore we only care about a small ripple of relations above the surface, so mocks aren‚Äôt good in this situation. Why so complex? Well, having heavily bought into SOA, there are over 14 of them owned by different groups written in different styles, from REST to REST-RPC to SOAP, etc. It‚Äôs brutal. Likewise, creating a mock server would involve a huge amount of reverse engineering to match behavior, so no. Instead VCR has been useful as a quick and dirty method to capture ‚Äúknown good‚Äù behavior. Here‚Äôs how we use it: ‚Äòrake integration‚Äô clears all the vcr fixtures and runs the specs against real services, recapturing new cassettes in the process. ‚Äòrake spec‚Äô then runs against the cassettes essentially as unit tests. As an added convenience we place the VCR code in an ‚Äòaround‚Äô filter in the RSpec config, so every spec automatically gets wrapped by VCR. Normally, people would use fixtures to say ‚Äúthis is right‚Äù ‚Äî we merely use it to say ‚Äúthis was how it worked when we submitted our code‚Äù, so the lifetime is considerably shorter and less predictable. 
Thanks, this already helps a lot. I haven't used `ckeditor` so I assumed the gem just vendors in the JS library, I didn't know it also provided integrations for file attachments gems. I started looking at the CarrierWave integration, I will try to add Shrine integration soon.
You might like https://github.com/ioquatix/rack-test-body
Just published some of the Rails Console techniques that I use myself to increase productivity. I hope you can get something new out of it, and I'm always open to constructive criticism. Enjoy!
You should do some reading - that's the point of symbols.
`object_id` never varies for any object. If you're seeing that then that's a bug in Ruby. What is happening is when you write `Object.new` you're getting a new object each time. When you write `:symbol`, you're not getting a new `Symbol` object - you're getting the same object each time in the same way as when you write `14` you're not getting a new `Integer` object each time.
I know that there's only one :symbol (and that's a wonderful and useful thing), but I was surprised to find that it's the same one (same id) even in different runs of the program.
It's not that - what you are getting is the same object ID allocated to the nth symbol allocated in your program. If you run the program twice then yeah everything runs the same and that symbol gets that ID. See this example - it's the time of the allocation, not the name, that causes the same ID. ``` $ irb irb(main):001:0&gt; :foo.object_id =&gt; 1279708 $ irb irb(main):001:0&gt; :bar.object_id =&gt; 1279708 irb(main):002:0&gt; :foo.object_id =&gt; 1280028 ```
Extremely useful!
With sandbox mode I always get screwed over if I leave the console idle longer than the timeout set for the MySQL connection on the app config (understandably). Is there a way to avoid this other than configuring the app to having a ridiculously long connection timeout?
Since moving to crystal, I have a better sense of my deployed code being a lot more stable. The nice things in ruby are: there's usually a gem that does what you need, upgrading to the next ruby almost never has huge consequences, code moves quick. The nice things about crystal are: code feels more stable, forces you to focus on writing better code for type safety, performance boost by 4x or more from what I've seen. You do end up writing more code, but it's still really readable, and fun to write. The toughest part is a new version of crystal comes out and nothing works for several days while you're waiting on PRs and such. It's going to get better, but takes some time.
The first part of that statement implies the second. If they have different object ids, they‚Äôre different instances. 
I think I have this working now. What I did was that I removed the original gem from my system and installed the one from my forked repo. This way I can put in debugger (byebug) in the gem code itself. Thanks for all your help ! 
The app portion is incredible, definitely going to play with that tonight. Thanks!
Nah, I get his point. They _could_ have different object_id's in entirely different runs of the program. That they don't is just an MRI implementation detail. I can see why it would be convenient in MRI implementation, but it's not required. 
Object ids don't have any meaning across processes.
I completely read past the process bit. 
Yup. That's sort of what I'm doing. I have a monolith rails app. I chopped it in half so it's half Lucky and half Rails. This gives me the chance to work through the new environment and not have all my eggs in one basket. I use less memory on Lucky and have a lot better performance. 
After writing 10s (100s?) of API clients with and without stubbing my conclusion is this: whenever possible, write tests using real requests. 1. You will make an error in your stubbed response and code for that case, assuming it's correct 2. The API docs that you're using to craft your response will be wrong 3. Important headers will be missing from your stubbed request/response cycle VCR is nice, but for large tests suites it can lead to 10s or 100s of random YAML diffs, conflicts, etc... which becomes a pain. 
For possibly more tricks see: https://github.com/sshaw/dotfiles/blob/master/irbrc
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [sshaw/dotfiles/.../**irbrc** (master ‚Üí 60b9d69)](https://github.com/sshaw/dotfiles/blob/60b9d6919d2cdb7f949db822c665569e8d1709c5/irbrc) ---- 
Pleroma, Misskey are two other microblogging servers that speak ActivityPub, and there are some other projects (e.g. Pixelfed for Instagram-like image sharing, and Funkwhale for distributed music libraries).
If you don't want an array of values, what do you want to get? Either give each checkbox a unique name, or use the array of selected state names you were getting. If you need some kind of ID for each state, turn make sure you're setting the value of each checkbox to something other than the name of the State. I don't know how you are generating the checkboxes, but you may want to try passing `checked: true` to the ones that have a value that is included in an array of previously selected values. 
I always forget about ‚Äò_‚Äô. sandbox is very cool, but alas I seldom use db. I use pry alot to look up source, but it‚Äôs nice to know how in vanilla too. Now that get and post is awesome! How does that work? I didn‚Äôt think console was starting a webrick or puma on the side? Is this faking it? How about csrf on the post?
Is crystal considered stable enough to be a solid choice for "real world project". Forgive me the quotes, last time I checked it looked experimental enough. I love the static typing though.
I kind of wrote this on a whim, thinking it might be interesting to other Ruby programmers to have a small real-world example of Rust alongside the more-or-less equivalent Ruby, just to get a taste of it. I've tried to explain anything that might be confusing and provided plenty of references for people who want to dive in deeper without getting too waffly. Whether I've succeeded or not, you be the judge.
This is great, thanks for sharing! 
really really good stuff 
The grammar in that article was painful. 
So is Rails still relevant in 2018??? Asking for the people who don‚Äôt have time to read through the book that was suppose to be a blog.
As another comment pointed out, your code currently checks inclusion of the full array `global_variable` in the downcased version of each element in `[x.foo, y.bar]`. I think what you want is this to check inclusion: return unless [x.foo, y.bar].any? do |element| puts element if global_variable.include?(element.to_s.downcase) end Another way could be to use intersection: `intersection = [x.foo, y.bar].map { |e| e.to_s.downcase } &amp; global_variable` This does an intersection of the two arrays and gives you what was found in both of them. You could call `intersection.any?` on the resultant array to see if there were any items common to both. This has the disadvantage that this will `downcase` and check inclusion of every array element of `[x.foo, y.bar]` regardless of if we already found one match (`any?` quits as soon as one is found iirc).
&gt; Is crystal considered stable enough to be a solid choice for "real world project" Nope. But I really hope there will be 1.0 soon and we will slowly get there. If you want to start today I would suggest doing only a small project and limit dependencies as much as possible (they will break few times before 1.0).
Yes
The issue is that lots of people are using `present?` when they mean to use `exist?` as mentioned in Nate's thread. Here's some more info on why I made this a library https://github.com/schneems/attendance#wait-why-not-commit-to-rails-you-have-commit-right.
What do you mean when you say you want each value separately? Adding [] is the way to solve it. 