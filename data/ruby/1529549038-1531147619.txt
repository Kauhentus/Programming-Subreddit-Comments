Probably a bit early right now, but I always recommend the [Ruby Style Guide](https://github.com/rubocop-hq/ruby-style-guide). You should add it to your list for when you have a bit of a better grasp of Ruby.
Thanks a lot for sharing your insights! It's refreshing to hear about your experience. I'm definitely still in the enthusiastic phase with Elixir and haven't built any projects with it. But lots of your points resonate with me. Without a doubt, Ruby's ecosystem is way more mature and complete. And we are very lucky to have it. ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è I'm still interested to see how elixir goes. :)
Hi kenman345. Thank you for your feedback. I completely agree with your suggestions. In fact, they are both already planned for v1.1 https://github.com/keithmifsud/jekyll-target-blank/issues Please feel free to create a new issue if you have more ideas :)
Thanks. I'll bookmark that
Thanks for sharing! I did a quick search and found the talk (or a similar one) you mentioned. (https://www.youtube.com/watch?v=UNWPp5YSDXQ) 
One thing to note about the operators, is they are really just methods. `'hello' * 3` is the same as `'hello'.*3` is roughly the same as `'hello'.public_send(:*, 3)`. How this works is a method with the identifier of `*` is defined on the String class. The implementation, when using MRI looks like: VALUE rb_str_times(VALUE str, VALUE times) { VALUE str2; long n, len; char *ptr2; int termlen; if (times == INT2FIX(1)) { return rb_str_dup(str); } if (times == INT2FIX(0)) { str2 = str_alloc(rb_obj_class(str)); rb_enc_copy(str2, str); OBJ_INFECT(str2, str); return str2; } len = NUM2LONG(times); if (len &lt; 0) { rb_raise(rb_eArgError, "negative argument"); } if (RSTRING_LEN(str) == 1 &amp;&amp; RSTRING_PTR(str)[0] == 0) { str2 = str_alloc(rb_obj_class(str)); if (!STR_EMBEDDABLE_P(len, 1)) { RSTRING(str2)-&gt;as.heap.aux.capa = len; RSTRING(str2)-&gt;as.heap.ptr = ZALLOC_N(char, (size_t)len + 1); STR_SET_NOEMBED(str2); } STR_SET_LEN(str2, len); rb_enc_copy(str2, str); OBJ_INFECT(str2, str); return str2; } if (len &amp;&amp; LONG_MAX/len &lt; RSTRING_LEN(str)) { rb_raise(rb_eArgError, "argument too big"); } len *= RSTRING_LEN(str); termlen = TERM_LEN(str); str2 = str_new0(rb_obj_class(str), 0, len, termlen); ptr2 = RSTRING_PTR(str2); if (len) { n = RSTRING_LEN(str); memcpy(ptr2, RSTRING_PTR(str), n); while (n &lt;= len/2) { memcpy(ptr2 + n, ptr2, n); n *= 2; } memcpy(ptr2 + n, ptr2, len-n); } STR_SET_LEN(str2, len); TERM_FILL(&amp;ptr2[len], termlen); OBJ_INFECT(str2, str); rb_enc_cr_str_copy_for_substr(str2, str); return str2; }
omg that code looks way too hard for my stupid brain to understand but I will try after I eat dinner. Thanks for the help though. 
Don't bother reading it. The idea is to not think of `1 * 2` as anything special compared to what you'll be defining. `1` is an instance of class `Integer`, and we send it a message named `*` with single argument of `2`. When you see `'foo' * 3` we are sending a message named `*` to an instance of the `String` class so it can have a different implementation which just happens to be written in C.
Ah, gotcha. Thanks a lot
Sounds like you need to be able to look up predefined products but their given name? You can use a Hash to store these where the name points to the object with the name. Below I wrapped the Hash in a class named `Products` class Product attr_reader :name def initialize(name:) @name = name end end class Products attr_reader :data def initialize(data = {}) @data = data end def find(name) data[name] end def register(product) data[product.name] = product end end products = Products.new apple = Product.new(name: 'apple') grape = Product.new(name: 'grape') products.register apple products.register grape products.find('apple') == apple # true products.find('grape') == grape # true 
I like Elixir. I feel fun while coding with a pure functional programming language like Elixir or with a pure OOPL like Ruby. But, I don‚Äôt like Phoenix. I would rather write the pieces that need concurrency in pure Elixir, not the whole app in Phoenix. I believe the design of Phoenix would improve as the community grows. 
Interesting to see so many people have mentioned similar things. I haven't tried out Phoenix yet(, particially because I don't want my brain to marry Elixir with Phoenix). Do you mind sharing which parts of Phoenix you don't like? And what do you think an Elixir web framework should be like?
We definitely love both of them :)
It is not. I'm not even sure how you would do that in ruby, really. Not any way good. 
apart from the excellent style guide, using the docs is helpful too - https://ruby-doc.org/core-2.5.0/ (or https://rubyreferences.github.io/rubyref/ ) diving in and searching online as you go is good.. but it'd help to get an overview of doing things in a scripting language - it'd save you time.. https://rubymonk.com/ has various tutorials+exercises from beginners to advanced... see https://www.reddit.com/r/ruby/comments/86yvcy/where_can_i_learn_actual_ruby_programming_not/ for more recommendations I'm writing an example focused reference guide as well as part of my learning, check it out if you have time: https://github.com/learnbyexample/Ruby_Scripting 
Same here. And the 2.x line doesn't even seem vulnerable since it uses `Pathname` instead of `URI` to represent asset paths.
As other people have mentioned, it all goes in a single file. In Ruby, the ‚Äúinterface‚Äù of an object does not exist in code. There is only the implementation. If an interface is declared anywhere at all, it‚Äôs usually in the comments or other documentation. This is what people refer to as ‚Äúduck typing‚Äù. 
Apparently it's been wrong in all versions of Ruby until 2.5 based on the bug tracker.
Ah I'm talking about getting the user‚Äôs input with gets.chomp and then I want to say that input (let's say the user says "pies") will then refer to the object created from the product class called pies. 
Thank you this is perfect I will try this!
Ruby [arrays](https://ruby-doc.org/core-2.5.1/Array.html) *are* dynamically sized arrays, similar to C++ vectors. The [vector](https://ruby-doc.org/stdlib-2.5.1/libdoc/matrix/rdoc/Vector.html) in the standard lib is another array-like class with methods corresponding to vectors in the linear algebra sense.
`item = 'name'; item = 1` does not capture the essence of a dynamically typed language since the same code works in statically typed languages with type inference and name shadowing, e.g. Rust allows `let item = 'name'; let item = 1`. /u/sirachakettlechips: Read this: https://en.wikipedia.org/wiki/Type_system#Dynamic_type_checking_and_runtime_type_information and compare it to static type checking.
ahahah. maybe this will happen and you don't know yet ;). Obviously by having HMR enabled nobody prevents you from keep using your editor, but changes are reflected in the browser much quicker. If your screen is big enough I would suggest to keep them side to side.
I use HMR with Nuxt on a 28‚Äù monitor. Originally started with Webpacker but dumped it because Nuxt is such a joy for front end development.
Ah interesting, thanks.
I saw your other questions on this subreddit and want to give you a general advise. While learning new language try to avoid questions like "there's that thing in C++, how can I use that thing in Ruby?". Ask yourself (yep, ask yourself first, then google, then ask others) "I want to achieve this or that; how do I do this in Ruby?". Also remember that Ruby is a multi-paradigm programming language, so every thing can be done in many different ways. Start learning Ruby from something basic like [https://pine.fm/LearnToProgram/chap\_00.html](https://pine.fm/LearnToProgram/chap_00.html) . Then maybe read [https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0](https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0) (a bit outdated tho) and [https://pragprog.com/book/rails51/agile-web-development-with-rails-5-1](https://pragprog.com/book/rails51/agile-web-development-with-rails-5-1) . Write code to try things you learned. Try something like [https://www.codewars.com](https://www.codewars.com) . Read code from popular opes-source projects written on Ruby, there is a ton on github. Oh, and don't forget to have fun! Many developers choose Ruby because it's just nice to use. ;)
I've been following along with the development and must say I really like your approach@jrochkind üëç I've been waiting for something more serious to build (only played with it thus far) where I can use it and just recently started working on an app that will! :) Thank you! 
I guess you could just define empty methods class FooBar def foo; end def bar; end end require_relative 'impl/foo_bar' and in `impl/foo_bar.rb` you would just define the content class FooBar def foo puts 'foo' end def bar puts 'bar' end end This would probably get as close to how we do it in C++ (or in C for that matter) as possible. Don't see much benefit though, you can always just fold the method bodies if you want see just method names for some reason...
Cool! I noticed that `rel="noopener norefferer"` was missing and opened a [PR on GitHub](https://github.com/keithmifsud/jekyll-target-blank/pull/7) :) Without that set, external pages opened with `_target="blank"` gain access to full `window` object of the original page! 
I never post Patreon-related pages, yet I feel supporting Sam to continue his work on this Ruby live coding synth would be great (including to promote Ruby).
I remember having to hack around this, I just assumed I was doing something wrong.
So it doesn't have any dependance on QT/QML, correct?
Correct. It does not use any Qt headers, implementation files, nor does it link to Qt.
Can't wait to see this extracted from the audio/vst only context into something more generic! Ruby desperately needs good GUI libraries.
You probably shouldn't listen to a random on the internet, but I'm fairly certain the 2.x line of sprockets is not actually vulnerable, despite its inclusion in the CVE. As I said above, that version of sprockets uses \`Pathname\` for handling paths and \`file:///blah/blah/blah\` will not be treated as a \`file\` URI when using \`Pathname\`.
Can you clarify with reference to spec what makes this right/wrong?
Can you say more about what about upgrading to 2.5 broke your use of mariadb?
https://tools.ietf.org/html/rfc3986#section-2.3
Post the JS version for comparison.
This is a more formalized version of the previous version of this challenge, along with a detailed solution provided and multiple illustrations to walk through the concepts. Also, as a reminder, baweaver == keystonelemur
"ruby is dying", "only used for web development" I use Ruby on the backend for anything more complicated than what bash can handle. For data manipulation/transformation, Ruby absolutely slays Python (Perl? ... forgettabootit). For learning, I recommend ignoring the esoteric concepts (i.e., metaprogramming, "everything is der objecten!"). Practice with Classes, Objects, Methods, Attributes, Exceptions (concepts mapped easily to C++). Add in Modules and their use. enumerator concept. Standard Library. Gems. You can go a long way with just that. Inline blocks (i.e., anonymous functions) may be a new basic (and required) concept. THEN, learn how 'attr_accessor' is implemented -- BAM, a metaprogramming implementation you've been using all along! Then avoid doing your own metaprogramming unless it can make things SOOOO much easier/possible (in my opinion ;) ). 
This is a more formalized version of the previous version of this challenge, along with a detailed solution provided and multiple illustrations to walk through the concepts. Also, as a reminder, baweaver == keystonelemur
Learning [Array](https://docs.ruby-lang.org/en/2.4.0/Array.html), [Hash](https://docs.ruby-lang.org/en/2.4.0/Hash.html), and [Enumerable](https://docs.ruby-lang.org/en/2.4.0/Enumerable.html) makes programming in ruby so much easier.
**Well, you definitely got me moving in the right direction. I just did that and received a new error that I'll put below. I really appreciate the help you've given so far; I think I owe you a drink at this point!** **Error:** H:\rightsignature-pdf-download&gt;bundle Fetching gem metadata from https://rubygems.org/.......... Resolving dependencies... Using bundler 1.16.2 Fetching http-form_data 1.0.1 Installing http-form_data 1.0.1 Fetching http_parser.rb 0.6.0 Installing http_parser.rb 0.6.0 with native extensions Gem::Ext::BuildError: ERROR: Failed to build gem native extension. current directory: C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser C:/Ruby25-x64/bin/ruby.exe -r ./siteconf20180621-6720-1omt82p.rb extconf.rb creating Makefile current directory: C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser make "DESTDIR=" clean 'make' is not recognized as an internal or external command, operable program or batch file. current directory: C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser make "DESTDIR=" 'make' is not recognized as an internal or external command, operable program or batch file. make failed, exit code 1 Gem files will remain installed in C:/Ruby25-x64/lib/ruby/gems/2.5.0/gems/http_parser.rb-0.6.0 for inspection. Results logged to C:/Ruby25-x64/lib/ruby/gems/2.5.0/extensions/x64-mingw32/2.5.0/http_parser.rb-0.6.0/gem_make.out An error occurred while installing http_parser.rb (0.6.0), and Bundler cannot continue. Make sure that `gem install http_parser.rb -v '0.6.0' --source 'https://rubygems.org/'` succeeds before bundling. In Gemfile: http was resolved to 0.7.4, which depends on http_parser.rb
 (buddies + pals).uniq(&amp;:id)
Will that ensure that the rejected items are of type B ?
I'd be curious if that actually performs significantly better than the original, and curious about what made the original so poorly performing! This way of course has the cost of temporarily keeping them all in memory double. Which is probably fine. But I think I've rarely been in a situation where the performance of the first version would matter either, myself. 
Convert one array to a set to avoid your O(n^2) duplicate check.
Yeah, that's how you'd do that, I guess. Nobody does this. I hate using `require_relative`. There are other ways to do it. Whatever way you do it, if something goes wrong and the runtime loads just your 'empty' one and not your 'implementation' one, you have a bunch of methods that don't do anything, but no actual syntax error. (Or a bunch of methods with the wrong method signature, depending on how you do it). 
Well, not totally sure it's because of 2.5. I had a similar problem before, but now it's consistent on 2.5. When using 2.4 and running my tests, sometimes it would break and stop working. NoMethodError: undefined method \`rows' for nil:NilClass I couldn't find any info on this, seems like a generic error. I assumed my test env is dropping the connection to the database somehow. I never noticed this problem on staging and production, so I figured I could just ignore it. However, after trying 2.5.1, the errors happen every time I run my test suite. The tests break midway through with error: \`ActiveRecord::StatementInvalid: Mysql2::Error: Unknown MySQL error: BEGIN\` Then, the rest of the tests would have the same "rows" error as above. Again, I couldn't find any info on it and couldn't figure out what test case causes it.
Ahh, good ol Windows. The http_parser gem needs to compile native extensions, and Windows doesn't do that. You might be able to do so by installing Cygwin or MinGW first.
Can't you use a hash? Put all values of A into a hash and then do the same with B. 
"Application Testing with Capybara" ![](https://www.packtpub.com/sites/default/files/1251OS.jpg)
What is your platform? Anyway, here you can find all what you need to install ruby https://gorails.com/setup/osx/10.13-high-sierra for any platform.
You could just redefine the method, copy and paste the body of this method into it along with your binding.pry? SomeClass.class_eval do def some_method binding.pry (code from other method) end end Though, if you're just trying to debug something, I'd suggest taking a look at the "byebug" gem, which lets you step into methods.
I agree with you. I'd not be surprised if it performs worse even. I didn't even benchmark it because the given example would obviously be super fast for either. I think we need to know the slow part in order to actually give optimization suggestions.
Just because this is possible: you can use the fact that Method objects returned``Module#instance_method`` don't just store the name of a class and the name of the corresponding method, they store a reference to the actual implementation of the method. So by keeping a reference to such a method object and redefining the method, you can do something like this: class Module def prepend_to_method(name, &amp;block) old_method = instance_method(name) define_method(name) do |*args, &amp;method_block| block.call(*args, &amp;method_block) old_method.bind(self).call(*args, &amp;method_block) end end end class Foo def hello puts "World!" end end foo = Foo.new foo.hello Foo.prepend_to_method(:hello) { print "Hello " } foo.hello
It should, yes. The first value is kept with `uniq`. Though I'm not sure if that is guaranteed behavior outside MRI.
&gt; I'd be curious if that actually performs significantly better than the original My guess is that it will. &gt; curious about what made the original so poorly performing! It has bad complexity running through Ruby code. &gt; This way of course has the cost of temporarily keeping them all in memory double. No, it duplicates the memory used by the array, not the objects. The array is basically just an array of 64bit pointers. 
My guess is that this is the fastest approach, though that could _possibly_ change with large input. In general complexity analysis in Ruby doesn't matter if there is a way to do the same thing via built in methods. The reason is pretty simple: The constant factor is huge for executing Ruby vs executing built in methods that are usually implemented in C. (Assuming we're talking about MRI here)
If you just want to install ruby itself I'd checkout RVM @ https://rvm.io/ It also sounds like you want a packager like: https://github.com/pmq20/ruby-packer to compile your executable, but if I'm understanding you correctly it may not be necessary because you should still be able to call your scripts via CLI `ruby myscript.rb`.
This is a kinda strange request, and there may be a better approach if you can explain the context of what you're trying to do. I'll hazard a guess that you want to pry into a class within a gem you depend on? If so, you can run `bundle info somegem` to get its path, then edit its source to add the `binding.pry` call. Afterwards, you can run `bundle pristine somegem` to restore the original code. 
thank you :) I'm on windows 10.
I was hoping to one day make my own softwares with ruby. But for now just for learning algorithms so I can grow as a developer.
Assuming order isn't important (just preserving B uniqueness) I'd use a hash table: t = {} # hash of ids =&gt; A/B object buddies.each{|b| t[b.id] = b unless t.has_key?(b.id)} pals.each{|b| t[b.id] = b unless t.has_key?(b.id)} combo = t.values Notes: 1) Never call Array's :+ method on large datasets. In order for :+ to work as expected, Ruby has to allocate another Array which has room for every object in both Arrays and copy each item into itself as well! 2.3.4 :016 &gt; z = x + y # x is [1,2] y is [2] =&gt; [1, 2, 2] 2.3.4 :017 &gt; x.push(3) =&gt; [1, 2, 3] 2.3.4 :018 &gt; z =&gt; [1, 2, 2] # z is a new Array!!! As you can see, Z has completely copied X's data into itself as modifying X does not impact the content in Z. It is obviously not performant (execution or memory-wise) to copy multiple lists. Be SUPER careful calling Array#+ in general. 2) Calling `include?` on an Array is SLOW... There is a linear execution growth with the size of your Array since it has to compare each element in your Array to the given element. Why does a hash table help? Hash tables essentially achieve a constant `include?` regardless of the dataset size via the `.has_key?` lookup 3) My hunch is that the A/B classes are most likely rails models in an SQL database... If this is the case, the fastest way may be to not do this is not in Ruby at all! SQL databases are engineered to run queries like these much faster than Ruby can ever process data.
It's not about everything on one line having to be the same type. It's that Ruby does not allow you to add an number to a string with the `+` method.
That's interesting, but didn't found anything about step into methods through. Maybe you have an example?
That does sound rough. You didn't change your Rails version or any other gem dependency versions, all you changed was the MRI version? That is disturbing if so. 
Thanks! I wonder why just posting it to reddit is getting downvoted, heh. 
You could override the \`Object#hash\` method and add them to a set `class A` `def id` `%q{im not your buddy pal}` `end` `def hash` `id.hash` `end` `end` `class B` `def id` `%q{im not your pal buddy}` `end` `def hash` `id.hash` `end` `end` `class C` `def id` `%q{im not your buddy guy}` `end` `def hash` `id.hash` `end` `end` `buddies = [`[`A.new`](https://A.new)`,` [`A.new`](https://A.new)`,` [`A.new`](https://A.new)`]` `pals = [`[`B.new`](https://B.new)`,` [`B.new`](https://B.new)`,` [`B.new`](https://B.new)`]` `guys = [`[`C.new`](https://C.new)`,` [`C.new`](https://C.new)`,` [`C.new`](https://C.new)`]` `# Without mutation` [`Set.new`](https://Set.new)`([*buddies, *pals, *guys])` `# With mutation` [`Set.new`](https://Set.new)`(buddies.concat(pals).concat(guys))` `# =&gt; #&lt;Set: {#&lt;A:0x0055efa5bb4c58&gt;, #&lt;B:0x0055efa5b9ee58&gt;, #&lt;C:0x0055efa5b790b8&gt;}&gt;`
Install and run it via the Linux subsystem, its way better than the windows install 
hmm, i notice that rubocop still warns that trailing dots should be leading dots. are they disagreeing with the style guide?
Interesting, totally missed that. Have you had a look at https://github.com/fazibear/awesome-opal ?
According to that, the list sites using Opal in production include: - Two at the author's own domain - Four "Opal demo" type pages - Three basically empty landing pages - A few pages that don't load This really doesn't strike me as something with much "real world" use
What about future updates to the method? you will have a duplicated code base (anti-DRY pattern)... IMHO, this is a bad idea.
&gt; Whenever you have something like collection.map{|e| e.name } you can write it as collection.map(&amp;:name). This is a pretty neat shorthand but it never made much sense to me that the syntax used a colon :. It's using a symbol. :name is being called on all objects in the collection.
Thanks for your response. Sadly I'm parsing poorly modeled XML rather than talking to a database.
Patreon is a double edged sword for open source projects. In the long term it can be a successful model, but building up the audience is a lot of work and you do need to gamble to a degree that you'll be able to grow an audience fast enough that you won't run out of $$ while in the process. Sonic Pi is a pretty cool project, though it does have a limited total audience size, which might be a contributing factor for the slow growth. I'll wish the author the best of luck, though financial success with respect to open source work involves a lot of hard work and a good amount of luck.
Yeah, I was read it as equivalent to \`...map(&amp;.send(:name))\`
Hello, for the world cup I've updated the [sportweb command line tool](https://github.com/sportdb/sport.db.web) that lets you browse your local sport.db / worldcup.db with a built-in instant web admin server (and rails engine). Browse all world cups (from Uruguay 1930 to Russia 2018) or build your own league / tournament. Cheers. Prost. Enjoy the beautiful game with ruby (and rails).
What `&amp;:name` basically does, is converting the symbol to a proc object of the form `proc {|x| x.send(:name)}`. This is the reason why you can't use methods that take multiple arguments with this short form.
Thats true, vuejs is the only successfull open source project in patreon that i'm aware of, the developer is doing around 12k a month, but yea he has a big audience. I created this livecoding environment that can be used in the browser (uses opal-ruby): https://negasonic.herokuapp.com/, working on it was fun, but i can't work on it all the time, have to work on a real job to make money unfortunately. I wish sonic-pi the best of luck!, if it does well on patreon i could try to do the same for my project in the future :)
It's more optimized than this nowadays but you can think of it as, class Symbol def to_proc proc{ |x| x.send(self) } end end You can see this yourself in IRB: (:to_s.to_proc).call(123) # =&gt; "123"
Disclaimer: This probably is not your use case, and it likely isn't worth your time to make it match your use case. But sets are a great way to perform, well, set operations like the one you want (union). class Element attr_reader :id def initialize(id) @id = id end # define equality of elements def eql?(b) self.id == b.id end # override hash to match equality logic def hash id.hash end end a = Element.new('a') a2 = Element.new('a') b = Element.new('b') c = Element.new('c') d = Element.new('d') set1 = [a, b, a2].to_set set2 = [a2, c, d].to_set # a union of unique elements set1 | set2 Not sure how performant this is, but set logic sure makes sense given what you want.
A long time ago, I fell in love with Ruby, and due to people's opinions on the language and its "lack of future" (somewhat new to developing in high school at the time), I stopped working with it. I want to get back into it now for web dev and among general purpose use. What libraries should I look into besides chef and puppet?
i created this project for doing live coding in the browser: https://negasonic.herokuapp.com/, its really a beta, but im planning to make usable for music live coders in the future
For web development Rails is still king, but I'm not a fan of it personally. You should check out Sinatra as a much lighter weight web framework.
What are anything like this in other languages?
Can you give a brief comparison for use cases? I've not seen Sinatra in many websites when I check out tech stacks using Wappalyzer (tech stack analyzer browser extension).
tidal cycles is the most popular, is built in haskell. Theres also gibber (works on js)
Would you consider using the attributes API for casting? e.g. as in https://gist.github.com/inopinatus/f454241886866562f7b39b9b41267a4c
Sorry, I'm not sure what you mean to suggest with that gist. It already is using the Rails Attributes API. What are you looking for it to do that it doesn't?
Does this mean if you put in a private method name it would allow it even if the object shouldn't have access to it ?
Ok, you're a lifesaver. So I've got it bundled - can I just leave the bundle in the same directory as the project? Or should it be in the repo itself? Finally - do I run the script from inside of the bundle, or somewhere else? I actually just ran it from inside the repo, and it ended up erroring out after stating that it processed a couple hundred docs - but I can't find them anywhere; they're definitely not in the repo. Again, thank you so freaking much. 
Does look cool. I certainly don't mean to take away from work like that.
Wow that fun fact is really awesome.
Ruby is not good for desktop development in general, it's a total clusterfuck to deploy and ship.
The git .bundle file is unnecessary, you only needed to run the Bundler gem command `bundle`. [Git bundle](https://git-scm.com/docs/git-bundle) is not a common part of running a normal Ruby project. The gem's readme says &gt; This will download all PDFs into a docs directory 
with Module.prepend you can call super to call the original implementation FWIW
No, it gives you an error if you try that.
So it's not actually using send then? Something similar ?
I used Opal in a production app (my own startup) for a few components / controls. It was fine. This was back in early 2016. I never wrote more than a few of them but I left them there until very recently, late Winter of this year, because they just worked. I pulled them out because I was upgrading to Rails &gt; 5 from 4.2.x and had started introducing VueJS to the app. I didn't want to support Opal any longer, since I never really bought in to it, and those Opal components were our very first VueJS components. I realize that probably doesn't help you much, but if you have any questions I'm happy to try to answer them.
The exclamation mark reverse the Boolean value. So let‚Äôs say you have a conditional statement like 4 &lt; 5. That statement returns true but if you do !(4&lt;5) it returns false. If you do something like !!(‚Äúhello‚Äù) it returns true. Double bangs coerce a datatype into a Boolean. Hope this helps! 
This is incorrect. A bang modifier at the beginning of a value does what you are saying but that is not the context here. In this circumstance, this modifies the object itself instead of just returning what the modification would be. E.g. * $ arr = [foo, bar] $ arr.reverse -&gt; [bar, foo] $ arr -&gt; [foo, bar] * $ arr.reverse! -&gt; [bar, foo] $ arr -&gt; [bar, foo] 
I am asking about the exclamation mark as a method e.g. `'something'.!` not as `!(4&lt;5)`. Except If it's the same. But I always get a `false` in anything I have tried. 
http://ruby-for-beginners.rubymonstas.org/objects/bangs.html Not the official docs but basically sums it up
! It is known as bang operator. It modifies the object used to call the method itself. Ex: alphabets = ['A','B','C'] =&gt;['A','B','C'] alphabets.map(&amp;:downcase) =&gt;["a", "b", "c"] alphabets =&gt; ["A", "B", "C"] alphabets.map!(&amp;:downcase) =&gt; ["a", "b", "c"] alphabets =&gt; ["a", "b", "c"] Calling the map method without the bang operator returned a new array with downcased values. Calling the map method with the bang operator modified the array(the object calling the map method) itself. https://stackoverflow.com/questions/612189/why-are-exclamation-marks-used-in-ruby-methods 
If I'm not wrong, it modifies the object. If you use a method on an object without the bang, you create a copy of that object with the new value. But if you use the bang, the original object changes to the new value.
So what's the point of using the exclamation mark as a method alone? I have tried (1==1).! 1.! 'something'.! a = 1 and then a.! it always returns false and does nothing I can think of.
this is not what I am asking. 
not what I am asking too.
Haven't seen exclamation mark alone, sorry can't help with that. I'd would also like to know.
I'm totally going to eat crow and say /u/gejr90 was correct. It's returning the opposite boolean value. It can work in front of the object or as its own method. To test, try: $ nil.! -&gt; true $ false.! -&gt; true It was returning false because any object is 'truthy' and will return therefore return false when the .! method is run. Interesting find!
I don't know the answer to your question either, but I kind of feel I have to apologise to you for the community's appalling and embarrassing reading comprehension. You asked a very clear and specific question, and it's slightly embarrassing that the first three people to post responses apparently only got as far as "exclamation mark" before confidently answering with completely off-topic comments that have nothing to do with your question.
The edit makes it way more obvious and most of us answered before that edit. If you read the question without the example listing of the method it made sense that we thought that was what OP was asking.
&gt; It modifies the object used to call the method itself Not what the OP was asking, and [not necessarily true](http://davidablack.net/dablog.html#2007/8/15/bang-methods-or-danger-will-rubyist) either.
&gt; In this circumstance, this modifies the object itself [Not necessarily](http://davidablack.net/dablog.html#2007/8/15/bang-methods-or-danger-will-rubyist)
Nice observation and analytical skills :D Confirmed with (1==2).! Thanks ! (not to be confused with Thanks.!)
Check [/user/my\_toesies](https://www.reddit.com/user/my_toesies) reply. Makes sense !
It's not worth getting into an argument about, but honestly it's blindingly obvious what OP was asking just from the text description.
Oh I see what you‚Äôre saying now. When you add an exclamation to a method it‚Äôs destructive meaning it mutates the original piece of data you call the method on. So for instance: arr = [1,2,2,3,4,2,3] If you call arr.uniq it will return a *new* array without mutating the original instance of arr which can be saved to a new variable. However, if you did the following arr.uniq! It would mutate the original piece of data saved in the variable arr. So what was originally saved in arr no longer exists. 
You must use attr\_reader in Cat class.
I changed your code a litte: ```ruby class Cat attr_reader :name, :age def initialize(name, age) @name = name @age = age end end class Person def initialize(name, cats) @name = name @cats = cats end def print_cats @cats.each do |cat| puts "#{cat.name} is a cat and is #{cat.age} years old." end end end ``` With this, your cat objects respond to `name` and `age` instance methods so you can call `some_cat.name` and `some_cat.age`. Your code would look like this then: ```ruby # MAKE SOME NEW CATS mittens = Cat.new("Mittens", 3) tom = Cat.new("Tom", 12) fluffy = Cat.new("Fluffy", 8) # MAKE THE PERSON'S CAT ARRAY billys_cats = Array.new # PUSH THOSE KITTIES INTO THE ARRAY billys_cats.push(mittens) billys_cats.push(tom) billys_cats.push(fluffy) billy_length = billys_cats.length puts "BILLY length: #{billy_length}" # CREATE THE PERSON OBJECT billy = Person.new("Billy", billys_cats) # why do I have to define the array billys_cats above, but I don't have to define the string "Billy" for the name field? # PRINT OUT EACH OF THE PERSON'S CATS billy.print_cats ```
You may want to look into Ruby's Enumerable module: class Cat def initialize(name, age) @name = name @age = age end end class Person def initialize(name, cats) #cats is an array of type Cat @name = name @cats = [] end # no need to pass argument, because Person already knows its own cats def print_cats # iterate through the cat array and print all cat information @cats.each do |cat| puts "#{@name} is a cat and is #{@age} years old." end end end mittens = Cat.new("Mittens", 3) tom = Cat.new("Tom", 12) fluffy = Cat.new("Fluffy", 8) billy = Person.new("Billy", [mittens, tom, fluffy]) billy.print_cats I'm not entirely sure what you mean with "Why do I have to define the array but not the string". As you can see, you don't need to explicitly instantiate an Array object, but can just use it implicitly. 
Thanks, yeah that helps a bunch. I tried to make those changes you made above but I'm not getting any output? I then tried to copy + paste exactly what you wrote above and I'm still not getting any output? I'm running the correct ruby file, when I type in a puts "testinggggg" at the very end of the file and run it it's printing out testingggg. I guess something in the code above is still not accessing the print_cats function? 
Thanks, sorry could you please give me a quick rundown of what attr_reader is? I googled it but I'm still confused. Also is the .each do loop better than using a for loop up to cats.length like I did? I also am having trouble with your print_cats(cats) function in the sense that I stilll don't quite know how it's now using the CAT name and CAT age. Because ruby is dynamic, so you don't define what types you use. You passed in a field (cats) to the print_cats function, but technically this (cats) thing could have been anything.. right? How does it still know that we're referencing the actual Cat objects above? Like I typed in instead def print_cats(cupcake), and then had cupcake.each do |cakes| etc.. would this still be accessing the Cats?
The answer makes sense now that I think abou it. I mean, if you place `!` before a statement, you expect it to negate it as well.
`for i in 1..cats.length` should be `for i in 1..@cats.length`
You're telling ruby 'let other objects read this value' is the layman's answer
attr\_reader is the shorthand for get method. You can have your own get method like def name @name end . But if you need to make many get methods you can have attr\_reader :name, :age, :type, :gender like that.
Instance variables in ruby is always private unlike others in which they are usually public by default. So you need a getter (get method) to access it from other class (Person). attr\_reader :name is exactly the get method for name. So, where you have cat.name and cat.age you are not getting instance variables (member variables) directly, but you are actually calling get methods to get the instance variables. So, they are actually [cat.name](https://cat.name)() and cat.age().
Yea I had to make some edits, because I forgot some stuff. Try again then it should work now 
Short and painful: ``` sentences = cats.map { |cat| "#{cat.name} is a cat of age #{cat.age}." } puts sentences.join ' ' ``` prints info about all cats of the person. To do this you need public methods `name` and `age`, yielding the resp. data in the cat class. This can easily be achieved by writing ``` class Cat attr_reader :age, :name # ... end ``` which defines these getters for you. Or ``` def age @age end ```
C, and it doesn't take you time, but you have to understand precisely.
Bad idea, or make zero sense.
You have made a mistake in the initializer, you ignore the `cats` argument and assign a new array with five `nil`s to `cats` instance variable, instead of assigning the passed argument to it.
Answering to your question in the code, you don't have to pass a variable as a `cats` argument, you can pass an array of cats directly: billy = Person.new("Billy", [mittens, tom, fluffy]) By the way, you don't have to initialize an array by calling `Array.new`, `[]` will do. Also, it' usually better to list the items you want to add to an array in square brackets instead of pushing to it one by one. 
For what reason?
When you are calling `@name` from `Person#print_cats`, you are inside an object of the Person class, not the Cat class, because that method belongs to instances of Person. So when you are trying to access `@name`, you will get the `@name` that was defined in the Person initializer and `@age` will return nil because it is not defined in that class (Ruby returns nil in many cases when things are not defined, which has its pros and cons). So to get started, you have to store your cat objects (`mittens`, `tom` and `fluffy`) in you person object (`billy`). You are already passing them as an array to the Person initializer, but then you are not assigning that array to the @cats attribute, instead, you are storing a new array of `nil`'s in there (`Array.new``(5)` =&gt; `[nil, nil, nil, nil, nil]`), so your person object has no reference to any cat object and thus cannot access the cat's attributes. class Person def initialize(name, cats) @name = name @cats = cats end ... end If you do it like this, `@cats` will have an array of references to your three cat objects. Now let's move on to `Person#print_cats`: First of all, you don't need the `cats` parameter anymore, since now you already have your cats in the Person object. So when you are inside this method, you can call for example `@cats[0]` to get the first cat object. However, now we have to get to the cats attributes, but there are no methods defined to access them from outside the Cat class (remember, you only have access to a classes instance variables from within objects of that class). In many languages, you would create methods like `Cat#get_name` and `Cat#get_age`, but in Ruby, if you only need default getters, you can simply use `attr_reader :name, :age`, and that will create those methods automatically for you. class Cat attr_reader :name, :age def initialize(name, age) @name = name @age = age end end # This is the equivalent of the code above class Cat def initialize(name, age) @name = name @age = age end def name @name end def age @age end end Ok, so back to `Person#print_cats`: You are already iterating over all the cats, but you are not making the individual cat entries accessible to the block. To achieve this, you should take a look at `Array#each`, or more precisely, the each method in general, since every class of the Ruby standard library that can be iterated over has to have this method. Furthermore, the each method and all other methods that spawn from it (`map`, `reject`, `select`, `all?`, ...) are your best friends when writing Ruby code (say good bye to tedious for or while loops). class Person ... def print_cats @cats.each do |cat| puts "#{cat.name} is a cat and is #{cat.age} years old" end end end Now, when you are calling `Person#print_cats` after assigning an array of cat objects to your person, it will iterate over that array, access each cat object that is inside of it and then access the `@name` and `@age` attributes of each cat object by using the getter methods that you have made available with `attr_reader`. But make sure to only put cat objects in that array or else you might get a `NoMethodError`. Hope that helps and feel free to ask more questions.
https://ruby-doc.org/core-2.5.1/Module.html#method-i-attr_reader
AWS Lambda can run arbitrary executables, which means you can use [Traveling Ruby](https://github.com/phusion/traveling-ruby) to run Ruby there. There's [a quick guide here on doing that.](http://www.adomokos.com/2016/06/using-ruby-in-aws-lambda.html) It is unfortunate, though, I agree. 
For ruby I would say JRuby would be the best way to go taking advantage of the java runtime. But that solution loses for node or python in increased code base complexity when the architecture relies heavily on lambda micro-services. Small code base for each lambda. Size matters here. The smaller the better. There is no point in using ruby if it is not supported natively. 
It is literally the definition of the `!` operator. You've seen that operator before? As in `! value`? In ruby, operators definitions are contained in method definitions. There's still built in to the language to call those definitions when the operators are used. Check out this craziness: irb(main):007:0&gt; class Foo irb(main):008:1&gt; def ! irb(main):009:2&gt; puts "you really don't want a ! method like this" irb(main):010:2&gt; end irb(main):011:1&gt; end =&gt; :! irb(main):012:0&gt; !Foo.new you really don't want a ! method like this =&gt; nil irb(main):013:0&gt;
i agree that it‚Äôs not worth having such large runtimes for small functions. when lambda came out, they only supported js and python came quite some time after. they actually tweeted asking if folks wanted ruby or go next, and go seems to have been favored. in any case, I don‚Äôt care to use aws features that are so finicky about language support.
&gt; I am asking about the exclamation mark as a method e.g. 'something'.! not as !(4&lt;5). It's the same thing. Almost all operators in Ruby are methods and can be overridden or called as methods as well. Both `'something'.!` and `!'something'` are calling the `!`method on `'something'`. This is also true of infix operators: `2 + 2` is the same thing as `2.+ 2`. &gt; Except If it's the same. But I always get a false in anything I have tried. Ruby has a notion of 'truthy' and 'falsy', the only falsy values are `nil` and `false`, everything else is 'truthy'. So `!nil == true` and `!false == true`, everything else will return `false`. This is mostly used in conditionals: if 'something' puts 'it is truthy' end 
The ‚ÄúI don‚Äôt care‚Äù part of your statement is a source of concern because that is what I think it is happening to the ruby community. Not paying enough attention to the future of technology. Saying I don‚Äôt care about AWS lambdas it is like saying I don‚Äôt care about cloud infrastructure or containers some years ago. Lambdas are the future and ruby should be part of it. The community should fight for it. Such a shame that a google technology like go takes advantage over ruby on this...
Just learn go 
I mean you pay for the cputime, so pick go because it's the best bang for your buck on this platform. If I want to optimize for developer happiness I chose Ruby on a permanent instance.
Yeah I mean lambda is just perfect excuse to learn something new
This is neat, but not really op's use case or the build target for that project
Jruby is never the answer, and if it is you are asking the wrong questions. 
I decided to use node for the time being. But planing to add go to the stack in due course.
Jruby is not the answer but better than a packaged binary.
if you are in love with FaaS then vote with your dollars and use iron.io instead ‚Äî they‚Äôve supported Ruby from the get go and AWS lambda is a brash copy of what iron.io had long offered. In fact, iron workers even support docker deployment (making language choice moot) while aws lambda is stuck in the ancient days of zipping files and other bullshit. Or else, learn another language instead of fighting to remain blissfully monolingual for life. Ruby has great but limited uses for business logic. Don‚Äôt shoehorn it into everything. Use this opportunity to learn Go or something else. Using python/ruby for one off functions is a joke given how slow they are. ‚Äúlambdas are the future‚Äù ‚Äî they most certainly are not. they‚Äôre just another shiny toy that kids will abuse until they learn basic rigor. there are genuine limited uses of FaaS, but if you‚Äôre crying that ruby isn‚Äôt supported then i assure you that you are not dealing with the use cases they were created for. 
Features are created with a purpose and then suddenly they grow beyond the initial aim. Micro-service architectures using lambdas are the current debate. It is very disappointing the input we have in a ruby channel is: I don‚Äôt care; Just learn go. Does any of it help? I don‚Äôt think so. Ruby is getting behind and it seems people are ok with it. I‚Äôm not. Iron.io is what compared with AWS? I have no chance to sell that to my employer. 
The best thing that Ruby did for me, after a decade in Java stagnation, was to teach me to learn new things. Stopping at Ruby is stunting your own growth as a developer. If your employer asked you to develop a mobile app, or analytics code, or IoT services, would you fight to stick with Ruby? I hope not. Use Ruby for the one thing it‚Äôs really good at and then expand your horizons. Back to talking about AWS lambda, so why aren‚Äôt you just using Traveling Ruby? AWS has made it possible to run any executable. It‚Äôs greedy to demand they support every language. And it‚Äôs boring talking about how the Ruby community isn‚Äôt making your shortcomings our problem. Almost every developer in here can write in at least one other language, which is why you won‚Äôt see much whining about why isn‚Äôt Ruby supported natively on browser/mobile/firmware/etc. FaaS is just one more such thing.
So you think I can‚Äôt code in any other language? You base that assumption on what? Discussions like this are worthless.
You're coming off as a bit immature. That's not a knock on you, but an observation. We get it: you really like Ruby. If you want Ruby support on AWS Lambda, you should spend your energy talking to the Lambda team. Posting to reddit won't magically make Ruby on Lambda a thing. It's okay if others don't care about Ruby on Lambda. Some folks don't want to be tied to a single cloud provider. It's okay if others don't care about FaaS. Some folks want to retain full control, or may not have a need for the service. Others' opinions on these matters don't really affect you, and are not worth arguing over.
I don't think there is any reason to believe that the reason Ruby isn't supported on AWS Lambda is because it's somehow not a good fit. You already said that using Python for one-off functions would be a joke as well, and yet Python is supported on AWS Lambda. &gt; Ruby has great but limited uses for business logic. How so? What are some limitations of Ruby that sometimes hold you back when implementing business logic? &gt; Or else, learn another language instead of fighting to remain blissfully monolingual for life. What's wrong with wanting to use only Ruby? I think there is great power when you have deep knowledge of the language and the ecosystem that you acquired over the years. I often see long-time Rubyists still not being aware of big chunks of the Ruby ecosystem. To be clear, I think being multilingual is great, I just don't think that being monolingual isn't. It can definitely be really useful to be able to read and be inspired by projects written in other languages (keeping yourself from that *would* be a limitation), but I don't think that it's of significant importance that you have to also *write* code in other languages. Overall I agree with the OP that the Ruby community should fight for getting Ruby support into things like AWS Lambda, I see no reason why it should be left out. 
Man, great suggestion, I didn't think of that option
This is a great point! I've updated my blog post with this tip and I'm using `ls` in pry all the time now. I guess you can `grep` an array of methods but `ls` combined with `CMD-F` in the terminal covers most use cases that I have.
&gt; Lambdas are the future Um ok....I highly doubt that, but good luck I guess.
Thank you so much for stepping in. At least there is a like minded voice over here. May there is still hope? Software technologies are constantly in war. Cloud is here now. Who is winning the cloud war people? Is it AWS? Right! I‚Äôm putting this post forward not because of me but because of ruby. Two voices are 100% extra so Ruby is already winning with this discussion. I hope more can join us! 
The actual feature is multiple assignment: https://nathanhoad.net/ruby-multiple-assignment Lots of fun things you can do with it, e.g. ```ruby [1] pry(main)&gt; foo, *bar = 1, 2, 3 =&gt; [1, 2, 3] [2] pry(main)&gt; bar =&gt; [2, 3] ```
There's always `Array.new`, which is useful at times.
The method is defined here: https://github.com/ruby/ruby/blob/cd0fec37281a72d402981894b764d27ab7d1fb39/proc.c#L1202 And the important method where the proc gets created is here: https://github.com/ruby/ruby/blob/cd0fec37281a72d402981894b764d27ab7d1fb39/proc.c#L640 From what I can see from that method is that there is a special implementation for a proc that gets initialized via a Symbol. I didn't follow the trace any further.
Array(nil)
In Python this is really useful for when a function returns a tuple rather than a dict. I‚Äôve used it much less in Ruby since hashes with syms are usually a more preferred contract. 
JRuby : only if you like paying Amazon to start JVMs
JRuby is IMO a perfect answer when you have to use a specific Java API (e.g. interfacing with a CRM using something much faster than HTTP REST interfaces). It's also a great answer if you need real multithreading. I'm curious why you are stating this really!
Overtone (http://overtone.github.io) comes to mind for Clojure.
Python is heavily used for analytics, using c extensions for performance. it fits well, and that need alone has a much larger base than ruby. 
You just have to ask them.
:(
&amp;#37;w()
I love ruby and use it every day. But Lambda is priced based on per-invocation utilization, and I really don‚Äôt want to waste 75% of my compute dollars paying for on-the-fly compilation.
&gt; The fact that AWS lambda doesn‚Äôt support ruby out of the box is just beyond me. I agree; it's disappointing that Amazon still haven't added native support. It's [possible](https://aws.amazon.com/blogs/compute/scripting-languages-for-aws-lambda-running-php-ruby-and-go/) to run Ruby in Lambda, but - like you said - not "out of the box". &gt; Ruby is getting behind again No idea what you mean by "again"... AWS Lambda was officially released over 3 years ago. Nothing has changed with regard to ruby support.
The again refers to the go adoption by AWS lambda over ruby. (There was a poll for it) Also python is ahead in AI and ML.
I'm not arguing that Ruby is equally popular as Python, I know Python is used much more (and therefore it makes sense giving Python priority in AWS Lambda support). I'm just saying that I don't see anything in Ruby's design that makes it inherently not suitable for AWS Lambda.
TIL
So, I think it would be helpful to know about the object model in Ruby, here, in order to understand. Pretty much everything's an object in Ruby (even a `Class` is, itself, an object). It's a little weird, but all you need to know is that the class of any class (remember, a class is an object) is `Class`, which inherits from `Module`. So, ```ruby Class.class #=&gt; Class (yep, even Class is a Class) Class.superclass #=&gt; Module Cat.class #=&gt; Class ``` In Ruby, there are class methods and instance methods. Class methods are usually called `SomeClass::some_class_method` in documentation, and are accessed in code like `SomeClass.some_class_method`. Instance methods are usually called `SomeClass#some_instance_method` in documentation, and are accessed in code like `obj = SomeClass.new; obj.some_instance_method`. Class methods are actually _instance methods on the Class_ (since, again, a class is an object, too). They can be used within the class definition itself, as long as they're defined. So, ```ruby class Foo def self.say_something # you can define a class method like this puts "something" end say_something # this logs the string "something" to stdout when the class is declared end ``` Now you know that you can use class-level methods in the declaration blocks of classes, and that they are interpreted (and executed) at run-time. And since you know that `Class` inherits from `Module`, and that `Cat` is an _instance of_ (**not** a subclass of, but an _instance of)_ `Class`, you should know that instance methods on `Module` are available as class methods of `Cat`. If that doesn't make sense, don't worry, it's still hard for me to wrap my head around. Just know that `Module#attr_reader` is available as `Cat::attr_reader`, i.e., `attr_reader` is available as a class method of `Cat`, so you can use it within the body of the `class Cat` definition. We sometimes call a class method a "macro" when it's used like that. I'm a li'l tipsy, which might explain the above over-explanation, but I hope it elucidated some of the non-obvious basics of the Ruby object model... it was probably the _last_ thing I learned as a newcomer to Ruby, and I wish it were the first. So, on to what `attr_reader` is for. You could define `Cat` like so: ```ruby class Cat def initialize(name, age) @name = name @age = age end end ``` But then if you wanted to use it, you couldn't access its properties easily: ```ruby snugs = Cat.new snugs.name #=&gt; undefined method `name` for &lt;Cat:0x123asdf12345&gt;: ``` So, you might instead write getters and setters, like so: ```ruby class Cat def initialize(name, age) @name = name @age = age end def name @name end def name=(some_name) # yeah, welcome to Ruby, it's weird @name = some_name end def age; @age; end # you can use semicolons in place of line breaks def age=(a); @age = a; end # you get the point. don't use semis often, it's bad style end ``` But that's _suuuuuuper_ fucking verbose. Ruby wants you to be happy. So you can use `attr_reader` to create a getter method (`Cat#name`) for an instance variable by passing it the name of the instance variable as a symbol (`attr_reader :name`). You can use `attr_writer` to create a setter method (`Cat#name=`) for an instance variable by passing it the name of the instance variable as a symbol (`attr_writer :name`). _Or,_ and this is the one you'll use most often, you can use `attr_accessor` to make both methods at the same time (`attr_accessor :name`). So with that in mind, you might refactor `Cat` to look like this: ```ruby class Cat attr_accessor :name, :age # you can pass multiple names to the macro def initialize(name, age) @name = name @age = age end end ``` ...which would behave exactly the same as the example above it.
I realized I didn't explain _how_ `attr_reader`, `attr_writer`, or `attr_accessor` worked, so check this out: ```ruby class Cat def self.attr_reader(*variable_names) # the `*variable_names` takes all the arguments and # stores them as an array called `variable_names` # to make this less complicated, I'm just going to use the first # instead of iterating over all of them instance_variable_name = variable_names.first instance_variable_name #=&gt; :name (it would be :age if we did variable_names.second) define_method(instance_variable_name) do # the block here becomes the method definition instance_var_as_string = "@#{instance_variable_name}" #=&gt; "@name" instance_variable_get(instance_var_as_string) end end # similarly, we can do attr_writer... we'll iterate over them this time! def self.attr_writer(*variable_names) variable_names.each do |variable_name| define_method("#{variable_name}=") do |value| # this will be the value passed # to the `Cat#name=` setter method instance_variable_set("@#{variable_name}", value) end end end # all together now! (and let's use inline `{}` blocks instead of `do; end` blocks) def self.attr_accessor(*variable_names) variable_names.each do |var_name| define_method(var_name) { instance_variable_get("@#{var_name}") } define_method("#{var_name}=") { |val| instance_variable_set("@#{var_name}", val) } end end attr_accessor :name, :age # now you magically have `#name`, `#name=`, `#age`, and `#age=` defined on `Cat`! end ``` Man, metaprogramming in Ruby is fun. Try not to get too clever, though, or nobody will ever understand what you've written. Remember: code is written once, but read a thousand times.
If I am right, and I might not be, it's the name of the method the full name of the method is *title=*. I think [this](http://www.rubyist.net/~slagell/ruby/accessors.html) might help. 
Ah, maybe you didn't copy and paste _fully_‚Äîhe _did_ use `attr_reader`, up at the top (hard to see because there's a big comment under it). 
It's an [assignment method](https://docs.ruby-lang.org/en/2.0.0/syntax/assignment_rdoc.html#label-Assignment+Methods), it allows you to use the = sign so you can do this. ` my_obj.title = "Guards, Guards"`
but wouldn't def value=(value) @value = value end be the same as def value(value) @value = value end
If they had a big customer demand, they'd support it. Maybe all the rubiest are using Azure?
Or in JS ``` const { public_creds: publicCreds, private_creds: privateCreds } = get_credential_pair(); ```
No, the first can be called like `my_obj.value = 5`. The second can only be called like `my_obj.value(5)`.
They would both set `@value` but the first would be called with `value = "foo"` and the second would be called with `value("foo")`. Assignment is clearer with the first form. 
You're technically right, the name of the method is `title=`, and it can be used as a regular method. `my_obj.title=('hi')` and `my_obj.send(:title=, 'hi')` would work, but the main reason to define methods like this is to allow 'setter' usage, `my_obj.title = 'hi'`. 
This would be better in /r/rubyonrails and the title changed to "I made a gem for no-js slideshows"
Ah, yeah that comment was edited. The code was a bit different yesterday. Thanks though
i understand.. thanks. 
got it. thanks. 
"No javascript that I wrote, plenty of javascript from a framework, fie in this case" would be more accurate. Also "fie" sounds terrifying, I'm having flashbacks to JSF after reading the description.
This is how I usually do it. This way makes me feel a bit less confined for whatever reason hahaha
is it the setter or the writer? I can never keep them straight. I know the primary use of them is because you want to over write the standard methodology (for instance, if you're taking user input you want to make it title case or something regardless of what the user inputs), never really used them much, but I have used them when i was writing code. 
I don't think there is any particular difference between calling it a 'setter' or a 'writer', you can call it whatever you like! I don't know if I'd say the 'primary' use of the is to override something else. You write one whenever you want to provide a... writer. :) All sorts of objects have attributes you can set, this is how you write a method that lets you set something. i mean, you don't _have_ to, any method _can_ set something, but this is the standard way to make it clear that the method sets some attribute. 
Yeah, but, and my ruby is rusty, if you create the instance variable when you create the class instance the writer/setter and getter are *automatically* set by writing the initialize method aren't they? (These kind of things are why I think it's better to learn ruby before rails) 
Sorry, not really sure what you mean. But I don't think so. 
Why was this particular syntax chosen for creating an array? It always strikes me as odd.
Yeah, this is maybe a neat tech demo but... yeah. If you want to write front-end code in 2018 I would pick one of the popular and well-supported front-end libraries and start there. 
I think either terminology is fine. In Ruby 'writer' is possibly more correct just because `attr_writer` would be the way to add the default implementation (or `attr_accessor` for both `attr_reader` / `attr_writer`). However most languages call these 'getters' / 'setters'. In general CS terminology, 'setter' or 'writer' would be called a mutator method. 
&gt; if you create the instance variable when you create the class instance the writer/setter and getter are automatically set by writing the initialize method aren't they? No. `attr_reader` / `attr_writer` / `attr_accessor` (both) would create the default implantations. Creating an instance variable in the initializer doesn't create these methods automatically. 
In this case, it'll be [`BasicObject#!`](https://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-21). You can investigate methods through their handle. 2.5.1 :001 &gt; a = 13 =&gt; 13 2.5.1 :002 &gt; a.method(:!) =&gt; #&lt;Method: Integer(BasicObject)#!&gt; 2.5.1 :003 &gt; a.method(:!).source_location =&gt; nil That shows as nil because it's natively defined (i.e. in C). For something written in Ruby, including from gems, you'll get the file and line number of the method definition: $ pry -r csv [1] pry(main)&gt; CSV.method(:foreach) =&gt; #&lt;Method: CSV.foreach&gt; [2] pry(main)&gt; CSV.method(:foreach).source_location =&gt; ["/home/user/.rvm/rubies/ruby-2.5.1/lib/ruby/2.5.0/csv.rb", 1139]
The following, from page 3, would define those methods for you. attr_accessor :name Are you trying to define name and name= manually? If so, you may have done the following: def name= end That would cause the error you're seeing. But, without seeing the exact commands you typed I can't be sure. 
I‚Äôm not sure if this is what you‚Äôre asking, but the idea is to have alternative syntax for common scenarios that lets you avoid repetitive characters. In this case, it‚Äôs a way of avoiding typing the quotes for every string in an array of strings. It‚Äôs a minor optimization, but some people really like it. I don‚Äôt use this one much, but I do find a use for %Q fairly often. 
It's Perl-derived, like many of the less readable aspects of Ruby. In perl, it was written `qw(Larry Curly Moe Iggy)` and the qw literally meant "Quote Wordlist" as part of a broader literal-quoting operator family that came across to Ruby. `qq` became `%q`, `qw` became `%w`, `qx` became `%x`, `qr` became `%r`. They also carried across the delimeter-matching which is why you can write `%w()` or `%w[]` or `%q{}`, `%x//`, `%q^^` and so on.
For what reason this performs very well. I did not invent the idea, it started in the elixir community with a hex package called drab and, although they were skeptical about it, it did very well there too. If so many things need to go through your backend with Ajax anyway, why not just use WebSocket and have it go through the backend to begin with?
Yes of course JavaScript was written, just like C code was written to creat Ruby, the point is that JavaScript was written so that the majority of your action go through your backend over a permanent WebSocket connection. After that point not much JavaScript is needed.
Well I did make a gem but the possibilities are endless. I am just showing this is one of the easiest way to make a slideshow, and it so happens to use a gem I made. It also uses animate.css but I do not need to mention it you know.
&gt; The again refers to the go adoption by AWS lambda over ruby. (There was a poll for it) [The poll](https://twitter.com/awscloud/status/659795641204260864) was way back in 2015 - 3 years ago - and was very close. &gt; Also python is ahead in AI and ML. Different languages are better for different things; often primarily due to the communities that drive them. Python has (pretty much) **always** been the "best" language for AI/ML, because it's popular within academia and therefore is commonly the chosen language of researchers. As much as I enjoy writing ruby, any skilled/experienced developer will tell you: There is no one language that's the best fit for *everything*. (Although that's exactly what JS developers are trying to convince themselves, sadly.) Use ruby when it makes sense to. Use something else when it doesn't.
Interesting enough we can only see people asking for ruby on the replies. A completely faked and biased poll looking at the answers vs the poll figures which is not surprising at all.
It's a setter method for a class instance variable. class Foo def initialize @bar = nil end def bar=(value) @bar = value end end Is equivalent to... class Foo attr_writer :bar def initialize @bar = nil end end Which lets you do... f = Foo.new f.bar = 'Hello World's
I had no idea that /r/rubyonrails existed, I thought there was only /r/rails.
Array.new(1,2,3,etc.)
Not sure if I'm being slow or not but it looks like the guy uses square brackets.. 
Me too haha
He did that to prove that the second line where he does not use brackets &gt;b = 1,2,3 is equal to a. 
&gt; But I always get a `false` in anything I have tried. Have you tried `false.!`? :) Or `nil.!`? :) (By definition, those are the only two things in Ruby for which `!` should return `true`.)
Oh right I didn't see he was using ruby from the command line
Just use the | operator: a=[1,2,3,4,5] b=[3,4,5,6,7] c=a|b print c =&gt; [1,2,3,4,5,6,7] 
&gt; Yes of course JavaScript was written, just like C code was written to creat Ruby That is not even remotely the same. You're not deploying C to your user's flaky and inconsistent browsers. 
The amount of JavaScript written essentially amounts to basic ActionCable function calls and a few event listeners, hardly anything crazy. This is because the framework does not use DOM manipulations but HTML diffing. Of course a certain amount of JavaScript is necessary but very little and mainly as a relay to your backend. As flaky as the browser is shouldn't make too much of a difference.
I think what you're describing is behavior added by one of the `active_____` gems.
No, I'm explaining something that happens in ruby, not rails
Could you elaborate/give an example of what you're talking about then? I'm particularly confused by &gt; if you create the instance variable when you create the class instance the writer/setter and getter are automatically set by writing the initialize method aren't they?
What do you know about creating classes and the initialize method in Ruby, not rails? I'm bad at teaching this stuff myself but [this](http://www.rubyist.net/~slagell/ruby/objinitialization.html) seems like a good start. If you haven't already, pick up the pick axe book
I code in ruby both with and without rails on a daily basis, that's not what I am confused about. What you said in my quote is what I'm confused about. This: class Foo def initalize @instance = 1 end end Does not create getters/setters, but that's my understanding of what you said.
https://www.reddit.com/r/ruby/comments/35k5at/can_someone_eli5_attr_reader_attr_writer_and_attr/
I think we're both confused here and trying to help one another. I am a professional Ruby developer trying to help you because you said your ruby is rusty and didn't mention `attr_getter`/`attr_reader`/`attr_accessor`, so I was confused.
I was using them interchangably - my bad
If you want the assets to work in both the asset pipeline and webpack (presumably webpacker gem is being used) then you'd package the assets in the `vendor` directory as normal and tell your users to add the `vendor` directory to the `resolved_paths` option in webpacker.
I didn't remember at the time and my autocomplete didn't see /r/rails. I'm subbed to both, they're both fine.
I didn't even know TTY-Progressbar was a thing, thanks! I'd used TTY-Spinner a few times but never thought to look for this. Must try and shoe it into a project or two.
There are about 20 tty-* gems to choose from - see http://piotrmurach.github.io/tty/gems/ for more inspiration!
I'm not entirely sure what you're trying to do but I'd suggest sticking with rails primitives. CSS and JS code only need the asset pipeline to function. Best to avoid the JS toolchain and stick to Rails' opinions. That said it is fairly easy to integrate YARD into Rails, but that sounds like the opposite of what you're looking for
Holy crap, awesome! Thanks!
following cause interested too. 
Check out webpacker's set up: https://github.com/rails/webpacker
 params['word'].to_s This is never nil. nil.to_s == '' 
The encrypt method you provided returns a string value (never nil). Can you provide the complete code for your controller method?
fun challenge. one note - you don't have to cheat with the html tags for Nokogiri. It can handle fragments directly with `Nokogiri::HTML.fragment(str)`: $ pry -r nokogiri [1] pry(main)&gt; str = '&lt;h1&gt;title&lt;/h1&gt;&lt;h2&gt;test&lt;/h2&gt;&lt;h2&gt;test2&lt;/h2&gt;' =&gt; "&lt;h1&gt;title&lt;/h1&gt;&lt;h2&gt;test&lt;/h2&gt;&lt;h2&gt;test2&lt;/h2&gt;" [2] pry(main)&gt; noko = Nokogiri::HTML.fragment(str) =&gt; #(DocumentFragment:0x2b219c600a98 { name = "#document-fragment", children = [ #(Element:0x2b219c600520 { name = "h1", children = [ #(Text "title")] }), #(Element:0x2b219c600458 { name = "h2", children = [ #(Text "test")] }), #(Element:0x2b219c600390 { name = "h2", children = [ #(Text "test2")] })] }) [3] pry(main)&gt; noko.css('h1, h2') =&gt; [#&lt;Nokogiri::XML::Element:0x2b219c600520 name="h1" children=[#&lt;Nokogiri::XML::Text:0x2b219c5e9208 "title"&gt;]&gt;, #&lt;Nokogiri::XML::Element:0x2b219c600458 name="h2" children=[#&lt;Nokogiri::XML::Text:0x2b219c5df744 "test"&gt;]&gt;, #&lt;Nokogiri::XML::Element:0x2b219c600390 name="h2" children=[#&lt;Nokogiri::XML::Text:0x2b219c5d3f84 "test2"&gt;]&gt;] 
Its not clear to me from your code sample what could be being nil where you don't expect it . Have you ever used a ruby debugger, like [byebug](https://github.com/deivid-rodriguez/byebug)? I think you'll find it's the tool you want to track down bugs like this. 
The fact that ciphertext appears in your log and you're complaining about an unexpected nil suggests you have a stray `puts` in some surrounding code. More broadly, consider this: you've pasted code that works, and you know it works, and then asked "why doesn't this work in context?". Hint: that means you need to show the context. 
Actually people seemed to be much more interested in this rails related article here than in either of those subreddits.
This is cool, I'm using this (plus tty-spinner) on a text-based adventure game to catch the ultimate Jira. I might open this to more contributors if someone is interested: [https://github.com/tcob/jiraquest](https://github.com/tcob/jiraquest)
Are you looking at the replies from **after** Golang was added? There is zero evidence that the poll was faked, or that it would be "unsurprising" if it was. Whether or not the twitter poll was answered by a representative demographic of potential Lambda users, however, is another matter - which I do not know.
I use webpack all the time, and its probably overkill for what you need. Maybe [rollup](https://github.com/rollup/rollup) would better integrate into your ruby workflow.
[Here's](https://github.com/jwhitish/learning-rails/tree/master/sinatra/caesar_cipher) the repo. Thank you for taking a look!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jwhitish/learning-rails/.../**caesar_cipher** (master ‚Üí da0e8d2)](https://github.com/jwhitish/learning-rails/tree/da0e8d2d971c24f68a3fa8111808e97af5e899a9/sinatra/caesar_cipher) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e18h0eu.)
I think the index.erb is the only thing that I didn't include... it's a stupid simple project for how much of a pain it's being. [Here's](https://github.com/jwhitish/learning-rails/tree/master/sinatra/caesar_cipher) the complete repo. Thank you for taking a look! And my apologies for not including more information.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jwhitish/learning-rails/.../**caesar_cipher** (master ‚Üí da0e8d2)](https://github.com/jwhitish/learning-rails/tree/da0e8d2d971c24f68a3fa8111808e97af5e899a9/sinatra/caesar_cipher) ---- 
I used ruby -r debug ... to try and track it down but will give that a look now. Thanks for the suggestion!
I think this needs to be more asynchronous. /s :)
Agreed, this is just adding way to much baggage to a library that doesn't need it. This has become such a common practice among web developers, bloating everything for no real reason. Unless there was a very clear reason as to why, I also wouldn't use a gem that was pulling in tons of JS.
Bit rude of u/whitisj to just bail on us like that.
The actual `Random` class object is being returned by the mock, rather than a number itself. You're not setting a return type when you call `expect`, you're setting the actual return value.
Can you provide a code example? I don't understand what you're talking about, and do not think it is right, but perhaps we're all just not understanding each other. A code example would clear it up. 
I may have stated the question incorrectly, but I don't see why this would involve "pulling in tons of JS". It would involve making the JS/CSS that already exists available in your pack if you choose to do things that way in your Rails project, while maintaining support for the assets pipeline way. You can see the kind of thing I'm trying to achieve with the [chartkick gem](https://github.com/ankane/chartkick#charting-libraries). There are instructions for both asset pipeline and Webpacker. However I believe this gem is different in that its JS also exists as a standalone usable thing so the npm package existed anyway.
Your double is not actually being called by anything. In your test, `double` and `@game` have no connection to each other. This sort of testing is awkward to do with MiniTest, but here's one way: @game = Game.new called = false my_stub = -&gt; { called = true } refute called @game.stub(:make_rand_num, my_stub) do @game.start_game end assert called You might prefer to use a gem that makes method mocking more straightforward. I've used [rr](https://github.com/rr/rr) in the past, but no idea what the cool kids are using these days. `Minitest::Mock` is really meant for mocking out an entire object, rather than single methods, which is what you're wanting here.
&gt; I would like to add support to include the CSS and JavaScript with Webpack What's the reason for this though? It's already setup using the asset pipeline, why add webpack to this equation?
Take a peek at zeroconf: https://github.com/lachie/zeroconf
Ah yes I was driving at just using `attribute` in the models but I can see you've gone a bit beyond for a richer model. Beware of `-&gt;&gt;`, I found issues with non-string types. I've updated that gist to use `-&gt;` with a quoted cast, thus handling integers and booleans correctly as a result. It's not gem-worthy code yet, I'm still tinkering. I hope to get to nested model queries using the dig-like `#&gt;` operator, but I'm loath to reinvent, or depend on, the activerecord predicate builder. 
Have a look at [This Tutorial](https://www.tutorialspoint.com/ruby/ruby_socket_programming.htm) (note this is a little outdated as it's `#new` not `#open`) Forgetting about autodiscovery for a moment (which is what you're doing with your UDP Broadcasts), what you want is to start a `TCPServer` on the server and a `TCPSocket` on the client side. The gist of it is: # server.rb require 'socket' server = TCPServer.new 2000 loop do Thread.start(server.accept) do |client| client.puts "Hello !" client.puts "Time is #{Time.now}" client.close end end # client.rb require 'socket' server_ip = '127.0.0.1' s = TCPSocket.new server_ip, 2000 while line = s.gets # Read lines from socket puts line # and print them end s.close What this does is starts a TCP server listening on every interface (i.e. loopback and eth0, or if you have more than one interface lo0, eth0, eth1, .. ethN), when a client opens a connection to the server, the server spawns a thread, sends the current time to the client, then closes the connection. The client opens a connection to the server specified, prints input from the server, then closes the connection. See also [TCPServer](https://ruby-doc.org/stdlib-2.4.0/libdoc/socket/rdoc/TCPServer.html#method-c-new) and [TCPSocket](https://ruby-doc.org/stdlib-2.4.0/libdoc/socket/rdoc/TCPSocket.html) Now, for your Server discovery... is there a reason you won't know the IP address or Hostname of the machine running the `server.rb`? What you're doing I don't think is going to work. "Service Discovery" is actually a huge problem that [many](https://github.com/coreos/etcd) Have [solved](https://www.consul.io) in [various ways](https://www.habitat.sh/images/infographics/habitat-runtime-service-group-binding-dde570a3.png). Though it may be suboptimal to run a cluster of servers... I suppose you could have the server broadcast a packet with it's IP, then have the client read the broadcast packet to establish connection with the TCP server. [This Stack Overflow](https://stackoverflow.com/a/48709600) thread has a good example. Anyway... that's my thoughts.
I'd be grateful if you kept in touch, I'd like to see what you do, or feel free to try to add it to attr_json with a PR if you like. [jsonb_accessor](https://github.com/devmynd/jsonb_accessor) has some pretty neat jsonb query-generating code too. (I don't believe it uses the attributes api at all, and it [doesn't use the Arel](https://github.com/devmynd/jsonb_accessor/blob/master/lib/jsonb_accessor/query_builder.rb#L15) API like you have either (I do not understand the Arel API!)). For attr_json, i'd like to implement it in a way that can use keypaths to go through nested models, the way [I've done](https://github.com/jrochkind/attr_json#querying) just for the `@&gt;` contains operator already. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [devmynd/jsonb_accessor/.../**query_builder.rb#L15** (master ‚Üí d31ce5c)](https://github.com/devmynd/jsonb_accessor/blob/d31ce5cc9391022819d757a9dde07b4cf98581d6/lib/jsonb_accessor/query_builder.rb#L15) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e18z92u.)
[I wouldn‚Äôt do it but you can](https://medium.com/craft-academy/functional-programming-in-ruby-for-people-who-dont-know-what-functional-programming-is-f0c4ab7dc68c?source=linkShare-f8354741d7e6-1529906966) 
Jesus, it's 10 years old. Can it even work anymore?
If I run a simple server on my desktop, i can open the webpage in any other desktop or mobile which points to the IP and the port of the desktop. Same thing for websockets. What exactly is your application?
This is one of the biggest reasons why I have started to create Ruby runtime for other serverless frameworks(in my case, it was OpenWhisk). [https://github.com/apache/incubator-openwhisk/pull/3725](https://github.com/apache/incubator-openwhisk/pull/3725) This is a kind of differentiating strategy for Ruby to live better in serverless world. The best-case scenario would be: big cloud providers such as Amazon or Google will treat this kind of competitors as non-negligible in future. This is just my two cents but IMO this is what we can do at best in the long-term unless you are the one who determine priorities of feature development of AWS Lambda. 
What is wrong with SICP itself? It's not like they force you to learn some complicated language. This book is about programming, not programming language :)
Thanks for stepping in. Very interesting contribution. I will follow closely. 
Things haven‚Äôt changed that much that it wouldn‚Äôt.
It's a unary method. Used like this: !13. A more common unary method is :-, which is used like this: -13.
If you want to find out if a method is called just put something at the top of it like puts"called" and it'll print out called if the code is run
I apologise in advance for not answering the question you asked, but ... You appear to be trying to test the wrong thing. `make_rand_num` looks like it should/could be a private method and is just an implementation detail of `start_game`. Testing the implementation of a method is not generally recommended. Your implementation may change in the future, which will break your test. What you ought to be testing is the side-effect of calling `start_game` which, in this instance, is to assert that `@prng1` is set to a new random number. This now presents a new problem. In order for your test to be consistent you will need to stub `Random#new` to return an explicit value that you shall be testing for. I don't use minitest so the following code hasn't been tested and might not be correct, but a suitable test might look like: def test_game_start Random.stub :new, 42 do @game.start_game assert_equal 42, @game.prng1 end end Here is a [great talk by Sandi Metz](https://www.youtube.com/watch?v=URSWYvyc42M) discussing what to, and what not to, test. 
Funny thing about these methods in Ruby. I believe they are the only methods not to use the last executed line of code as the return value. In other Ruby methods you would expect Excellent! to be returned, but the value of var is returned. def whatisthis=(var) @whatisthis = var "Excellent!" end
**I definitely was looking in the wrong directory for the files, so I'm an idiot haha. So here is where I am now: It actually *sorta* worked! It downloads a single page of documents (I assume, any ways) and then stops, returning the following error:** :20:in `block (2 levels) in &lt;main&gt;': undefined method `[]' for nil:NilClass (NoMethodError) from rs3.rb:17:in `each' from rs3.rb:17:in `block in &lt;main&gt;' from rs3.rb:13:in `each' from rs3.rb:13:in `&lt;main&gt;' **Any idea what's going on here? I think the pagination method (if that is the correct terminology) isn't working correctly. I think this is the relevant bit from the .rb file:** (1..result["page"]["total_pages"]).to_a.each do |page_number| this_url = "#{url}?page=#{page_number}" result = JSON.parse Http.with_headers("api-token" =&gt; token).get(this_url).to_s result["page"]["documents"].each do |doc| guid = doc["guid"] File.open("docs/#{guid}.json", "wb") {|f| f &lt;&lt; doc.to_json } email = doc["recipients"].find {|r| r["is_sender"] == false }["email"] pdf = CGI.unescape doc["signed_pdf_url"] `curl -o docs/#{guid}-#{email}.pdf "#{pdf}"`
What exactly do you need to update? That would help with offering advice, **html** files are for formatted data. Basically those `&lt;p&gt;&lt;/p&gt;` style tags define hierarchy and allow for fancier/stylized emails. **text** files are just that, text. They contain no formatting. It's there for email clients that don't support html. Which would otherwise show those html tags, making the text unreadable. For **HTML**: * [Check this overview](https://www.w3schools.com/Html/) and follow that basic structure. * Make sure the syntax is correct. You can do that [here](https://validator.w3.org/). Keep in mind that it won't understand ruby. So you'll need to remove those &lt;&amp;#37; &amp;#37;&gt; tags if you want to test it. For **text**: * Really just put the text there as you'd want to read it. It's going to be put in the mail as is, with every line break.
It appears that SSDP should work for what I need :). Sadly it appears that I will need to change the order (with the server broadcasting itself for clients to connect to). It makes more sense I suppose.
The difference is with email, depending on the configuration on the email client, they may choose to not display HTML email for a variety of reasons. Because of this you usually have two templates, one HTML formatted and one plain text. I would edit them separately, and make sure the content is similar between the two.
Thanks for this lengthy, detailed post. To answer your question, the more specific goal of this is a project that I want to create for a coding bootcamp that I am a student at. I'd like for a set of students on the LAN to be able to have a sort of code-battle where they are issued a set of ruby problems to solve. The first one to send the computer running server.rb a correct set of solutions (checked by RSPEC) will receive a point. The goal was to solve the problem of being able to execute ruby.rb from any computer and have clients on the LAN be able to connect without knowing its IP. I am certainly going to read all the resources. I appreciate you identifying the term "Service discovery," as I'm sure that will help. Another poster identified "SSDP" which aligns with my less-preferred choice of having the server broadcast. However, I understand that it makes more sense and was probably created like this due to scaling issues of having a lot of clients broadcasting vs a few servers broadcasting. Once again, thanks!
Most people are going to get the html.erb file, this is the email you get with staying and images in it. As I understand it the text version is for people with slow connections who just want to read the text. A handy trick is to copy the html/text into scratchpad.io and see what they look like. Keep in mind the embedded ruby will not change 
Thank you for your reply. The two files I have for each email are html.erb and text.erb. I suspect this is why the text.erb files don't really look like simple text. What I am updating is the content of the email, the description lines and in some cases the function (usually removing if then statements). However, confusingly, the text.erb files seem to also have certain commands like if then statements and {base_url} links. Could this be because as it's a .erb file it is essentially more than a simple text file? 
Thanks for this suggestion. I really like the story it tells much more than my code. In playing around with the various solutions proposed here, I've been able to get my execution time down to 11s (with one large example). I need to do 4 calculations of this type in a given run. I implemented your solution for 1 of the 4 to test it out and sadly it took the execution time from 11s to over 9 minutes at which point I killed it. Dang :(
hah! good to know! I might then suggest that you write a light wrapper around your implementation to make look more like set unions? Hit me up on pm if you‚Äôre interested in exploring. 
ERB stands for Embedded Ruby. In a nutshell, it's a template file. You can create any kind of file you'd like and insert data dynamically into it. This is basically how webpages are built. You'd usually see erb files named like this `index.html.erb`. Which would imply that when Ruby generates the file, it will end up as `index.html`. Just keep in mind that anything between **&lt;\% \%&gt;** is ruby code. The rest is part of the actual file. **text.erb** For example, you can write all this text inside the text.erb. But maybe you want send some user data. &lt;% if @user %&gt; Your username is &lt;%= @user.username &lt;% end %&gt; The **html.erb** example of the same text would be this. (I'm excluding some other &lt;html&gt; tags here) &lt;p&gt;For example, you can write all this text inside the text.erb.&lt;/p&gt; &lt;p&gt;But maybe you want send some user data.&lt;/p&gt; &lt;% if user %&gt; &lt;p&gt;Your username is &lt;strong&gt;&lt;%= user.username %&gt;&lt;/strong&gt;&lt;/p&gt; &lt;% end %&gt;
It wasn't meant to be maintainable, I'm assuming he just wanted to see what was going on inside the method, which is why I suggested byebug instead.
After including the byebug gem, you just add "byebug" in the same way you would use "binding.pry" to stop the execution at a certain point, giving you a command prompt. Unlike pry, byebug allows you to step through and into code using "next", "step" and "up". So, for example if you add a "byebug" statement just above where .some_method is called, you could then use "step" to enter into the method, and examine it's contents. To get yourself out of the method, just use the "up" command. It will take a little getting used to if you've never debugged this way, but is infinitely useful. Check out the byebug commands: https://github.com/deivid-rodriguez/byebug#byebugs-commands You may also want to read up on the call stack, which will help visualize what step/up are doing.
I think that AWS will eventually support ruby for lambda, but there is no real motivation for it right now. The biggest use-case for ruby (rails) does not play very well into lambda's characteristics, which caps the bundled code and privileges quick bootstrap, which are definitely not a rails community strength, which preferes to eager load upfront (and therefore pays the cost in bootstrapping) and bundles many libraries they might not need but come as part of the cake. AWS lambda supports python, but I haven't heard of anyone migrating django apps to it.
Looking at line 20: email = doc["recipients"].find {|r| r["is_sender"] == false }["email"] It could mean that `doc` is nil, or `r` is nil in the find block, or the result of the expression is nil when calling `["email"]` If you want to just brute-force ignore those, you could change these lines: email = doc["recipients"].find {|r| r["is_sender"] == false }["email"] pdf = CGI.unescape doc["signed_pdf_url"] `curl -o docs/#{guid}-#{email}.pdf "#{pdf}"` To this: email = doc["recipients"].find {|r| r["is_sender"] == false }["email"] rescue nil pdf = CGI.unescape doc["signed_pdf_url"] rescue nil `curl -o docs/#{guid}-#{email}.pdf "#{pdf}"` if email and pdf 
Is this any different than declaring an `attr_writer` or `attr_accessor` on the variable?
No. SSDP is there to "shout" its address to whoever is listening. You can also add any information in the XML. When the client gets to know it, you can simply redirect it to whatever application is running in your host machine. I use this everytime to connect my Pi to the desktop and control it. Give it a try, is not trivial at all.
I believe it is technically a Module which is included in everything by default (except BasicObject?) It's a utility drawer of random methods, like `puts`, that are available everywhere.
ive seen it described as a module included by Object, and thus appears in class hierarchy/method lookup bath before BasicObject. i love me some Kernel, gives us lots of nice stuff.
Great that you're using tty gems! However, I must say I'm slightly disappointed to see another progress bar gem! How very dare you! :-) 
If only there were any Ruby gems that made things more asynchronous... :-)
Interesting, that makes perfect sense to me. I'm still scratching my head slightly though as the text.erb files I have here have &lt;&amp;#37; before and after each line of text &amp;#37;&gt; and each line of text and each line of text isn't actually a line of text like this but rather a reference. So something like &lt;&amp;#37;= t user\_mailer\_bad\_login.description1 &amp;#37;&gt; which references a line of actual text in a .yml locale file. Does this explain things? I think that adds up to me actually. I think I can see now, the html.erb files have (declarations?) like &lt;&amp;#37;= email\_header(t( where as the text.erb files have the exact same line but simply &lt;&amp;#37;= t at the start. 
I like it but I wouldn‚Äôt use it as it adds cognitive load for me. 
alas, I don't believe there is. 
I didn't even read the username! I will rectify this immediately! All the tty gems are really fun, nice one!
This was great. 
The `sup` gem seems to be rather old and doesn't restrict highline version at all, which is a bit problematic, because it assumes that all future versions will be compatible. Since highline has been released recently, I imagine this to be the cause of the bug. What I would suggest to do is first uninstall all versions of highline for the current ruby: ``` gem uinstall highline ``` and then install older version released around the same time as the gem: ``` gem install highgline -v 1.7.8 ``` Then try running `sup-config` again?
Solved! Thank you!
Whenever you want to reduce boilerplate, you can check whether there is already a [dry-rb](https://dry-rb.org) gem out there that solves this. In this case [dry-initializer](https://dry-rb.org/gems/dry-initializer/) already comes with this functionality (with the exception of `is_callbable`). require "dry-initializer" class ApiClient extend Dry::Initializer param :network_provider param :api_token end
&gt; I have a method that I would like to have accessible to my Sinatra application's models, views, and controllers. What's the recommended way to do so? It's easy to share methods across controllers and views, but you shouldn't try to share them with models as well. For example, in some helper methods you'll likely want to depend on the request context, which just isn't there in your models. &gt; I'm guessing that I should create a module for this, but where should I locate it? /project/bin? The beauty of Sinatra and other non-Rails web frameworks is that you can put it anywhere you like. Yeah, you can choose `app/helpers/*` if you want. &gt; Do I require it in the config.ru, then require it in the desired models/controllers? You can require everything in `config.ru` if you want, as that's the only file that gets loaded by default when you start the web server. I personally prefer to require "dependencies" in the files that use them. For example, if `app.rb` defines `App &lt; Sinatra::Base`, I would `require "sinatra"` in `app.rb`, and if it performs `helpers ApplicationHelpers`, I would also `require "app/helpers/application_helper"` in `app.rb`. In `config.ru` I would only `require "./app"`, because I usually just have `run App` in it, and let `app.rb` take care of requiring all of its dependencies.
An object with a single public method named `call` is not a service object. It grinds my gears that we hear this misattribution so frequently. An object with a single public method named `call` is a function, and since Ruby already has closures I don't think it's wise to reinvent that particular wheel. 
people don't write servers from scratch nearly often enough IMO. bravo you for going there.
Anything but Windows. Can someone chime in on their experience with your typical Rails stack and WSL?
This is why I think Sinatra and its ilk are an anti-pattern. It tries to be as "lightweight" and minimalist as possible, at the expense of making it less idiomatic.
Glad you figured it out! Now stop using that terminal and check out the [chomp](https://ruby-doc.org/core-2.2.0/String.html#method-i-chomp) method to get rid of newlines (or other specified characters) in user input.
I would say either a Mac or Linux machine. Purely because most all tutorials and guides are using a Unix she, so it'll be a lot easier to follow along. I find developing in Windows to be a hassle for languages that aren't Java, C#, or C++
Definitely a distro like Ubuntu or macOS. I had some success using Vagrant or just a standard Linux virtual machine on Virtualbox on Windows.
I see you figured it out, but for giggles, try adding this as the first line: `$stdout.sync = true`
Honestly whatever you already have. If it‚Äôs for learning and fun, whatever you‚Äôve got. If it‚Äôs for a bigger project: Linux 
Would also recommend Linux. As far as IDE Sublime Text 3 and Atom are good ones to start with but I would also take the time to get comfortable in a terminal editor like vim or emacs. With a bit of learning and some plugins these editors are feature rich and can even be used in place of an IDE for most things. I recommend this because often you will probably be in the terminal and these editors are very nice to open files quickly and make small edits. Personally I started out using Sublime Text 3 and vim on Ubuntu but now do basically all my editing in vim (with tmux to manage splitting terminals and things like that, but that's for another day)
I'm kind of familiar with ubuntu, has it improved much?
Do you actually have this problem?
Yes. This is the kind of load I am dealing with. 
Yes. This is the kind of load I am dealing with. 
I have no real world experience with this type of load but in general you'd scale horizontally.
macOS just works, all you need is a Linux tbh. Maybe Ubuntu?
Arch
Heh, like redwings fans... always one in the crowd.. 
You can explicitly call `$stdout.flush` to write the contents of the output buffer immediately. http://ruby-doc.org/core-2.3.1/IO.html#method-i-flush It's also possible to set `$stdout.sync = true` to disable all output buffering from ruby. http://ruby-doc.org/core-2.3.1/IO.html#method-i-sync-3D 
Linux or Mac. Windows is such a hassle. Plus all the tutorials use a Unix terminal. I use Ubuntu because I was a windows user prior to getting into web-Dev and working with Ruby. 
Why do you kick toads?
Thumbs up for arch + vim development.
Mac will let you do anything right away and there's very rarely a hasse setting up any of your tools. There are a few Linuxes out there that can also say this (Fedora), but you tend to hit more sharp edges at speed unexpectedly. Too bad that Apple hardware is becoming disposable bling.
I found it well-written and informative. Thanks for sharing!
Great article! Not really hidden but one of my favorite classes is Pathname. It‚Äôs everything I wish File and FileUtils was wrapped up into one. Makes Code much more readable and simpler. 
Ruby can handle more than Node.js nowadays, the still main difference is that Node.js is async by default (so fuction call function call function, etc.) whereas in Ruby you would have to work with HTTP library that supports this, like http.rb. 
So will a default rails server wait for a request to finish before making another request? Does this mean that the default server can't accept any more requests while another request was being made?
Yes, default rails web server has to wait, however you can us threads to alleviate that. 
It‚Äôs probably in the works, or at least it‚Äôs probably on their list. On 5/3 they asked what they should add next. Lots of people, including myself, voted for Ruby support. https://twitter.com/chrismunns/status/992090315254185984?s=21
Nice, I didn't know about dry-initializer. Looks like it handles keyword params too, which is awesome. 
Thanks. I'm trying that on the buggy terminal but I'm getting: bash: stdout.sync: command not found ??
Thanks! Just because I'm dumb I just want to clarify, you mean stop using the MINGW terminal, right? Because in Ruby we have to use a terminal to run the code? I should be using a terminal, just not that MINGW one I was using? Or should I be using something else entirely, like an IDE? I like using that MINGW terminal because it's colorful lol. The default one is just black + white. And thanks yeah I'll check out the chomp method.
Thanks. I'm trying that on the buggy terminal but I'm getting: bash: stdout.flush: command not found ?? 
Sorry for the confusion, it's a ruby method on the global stdout variable. Try: puts "Hello, please enter your name: " $stdout.flush name = gets puts "your name is #{name}"
Thank you. Taking into account your remarks on the correct function of attr\_accessor and the fact that "greeter" and "Greeter" could symbolize two difference versions of the same thing (hence the confusion), I was able to redo everything from scratch (for the 6th time though lol) and I was able to do it. It seems to me that if I don't know the ins and outs of every little instruction I'm led astray. The sense of accomplishment is grand nonetheless. Thank you for your help :)
&gt; SSDP Yep, might be more trouble than it's worth... but have a look at the [SSDP](https://github.com/daumiller/ssdp) gem. We've had lots of trouble with SSDP (unrelated to Ruby) hence the need for 3rd party service discovery tools listed above. Perhaps your use case will have no issues :) I guess my question is, where do you derive value? Is it in figuring out how to setup a client/server auto discovery? Because that is not an easy topic and would be a valuable learning experience in and of itself.... buuuuuutttttt..... Why not just run a web server, give everyone a URL to go to and have them submit their code. If the value you are looking for, why reinvent the wheel in ways people can submit sample code? To get a proof of concept going you don't need anything crazy... Check out [Sinatra](http://sinatrarb.com/) it's a light weight "web framework". require 'sinatra' get '/code' do '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;form action="/code" method="post"&gt;Code:&lt;br /&gt;&lt;textarea rows="4" cols="50" name="code" id="code"&gt;&lt;/textarea&gt;&lt;br /&gt;&lt;input type="submit" value="Submit"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; ' end post '/code' do puts "#{Time.now} - #{request.ip}, entered: " puts "#{params['code']}" end You really don't need anything fancy sorry I crammed the html form into one line... (I actually didn't test this... :/ so if it blows up, divides by zero, and/or creates the singularity... well... you've been warned... Also, it should give you a web server where people can submit code and it'll print their IP and code. But it's pretty trivial to add processing beyond that (i.e. run rubocop and spit it back if it doesn't pass) Happy to help work through any issues... Also, I think it again is worth reiterating, where are you deriving the most value, is it in the application/ability to have multiple people submit code in a "race"? Or is it in learning how to write client/server software? I can and will make arguments to support both sides, so what do you want to hear?
It depends. If you are on a budget, buy a Windows laptop. If you want to use Windows programs (e.g. games) then install Ubuntu on Windows, which is a pretty full-functioning Linux OS that you run from within Windows. If you don't feel a need to keep Windows, install full Ubuntu desktop (or dual install). If you have cash to burn, buy a mac and treat it well because that shit is pricy (and has [keyoard issues](https://www.macworld.co.uk/feature/mac/macbook-pro-keyboard-problems-3653458/oard), for example my b key works like 1% of the time and n keys works like 50% of the time)
This is a question of personal preference. I've been using [Sublime Text](https://www.sublimetext.com/) for around two years and half and really like it. It's light, fast, and extremely extensible. [Setting up Sublime Text 3 for Rails Development](https://mattbrictson.com/sublime-text-3-recommendations) Some other popular options are [Vim](http://www.vim.org/), [Emacs](https://www.gnu.org/software/emacs/), and [Atom](https://atom.io/). [Atom](https://atom.io/) seems to be gaining popularity, but compared to Sublime Text I find it slow and heavy.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](http://www.vim.org/) - Previous text "Vim" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20e1b46lo) 
Parse the string: * Each time an `(` is encountered, add 1 to a depth counter. Store the maximum depth in an additional variable. Note that empty the final maximum depth is one less because of the empty node syntax! * Each time a value is encountered, push it onto a result array together with the current depth, e.g. as an array `[value depth]` * Each time an `)` is encountered, subtract 1 from the depth counter. When the whole string is parsed, select all items in the result array which have the maximum depth as depth. Since the values are already in the correct order, you just need to output them.
Thanks for the link. Will follow up.
You're a life saver. Thank you so much. I was trying to go through it recursively and track the depth across recursions etc etc etc and getting nowhere. Breaking it down like this really helped. Thanks!
Note that it doesn't have to be a top-level DSL. If you `require "sinatra/base"`, the top-level DSL won't be loaded, and in that case you have to define your application inside a `Sinatra::Base` subclass. This is also the approach the OP chose. I still like that you can choose the minimalist approach with the top-level DSL, but that should only be used for pet projects and test apps, I think it's a bad decision to use it for production apps. But it's super easy to switch from to the other, you just wrap the top-level DSL with `class App &lt; Sinatra::Base ... end`.
I like to call them service objects.
I gave it a try but there is too much stuff in there compared to what I need.
Holy crap, this is very tight to get a working solution in 30 mins, unless your language already has good primitives for parsing. Here was my solution: * `treeParser` routine: * Parse `(` * If the next character is ')' return a depth of 0, and an empty list of integers. * Parse a series of decimal digits as an integer: `value` * Parse a space * Parse the left tree using `treeParser` * Parse a space * Parse the right tree using `treeParser` * If both the left and right trees have a depth of zero, return a depth: 1, and a list containing `value` * If the depth of both the left and right tree is equal, return their depth plus one, and a list containing the list from the left tree and the list from the right tree combined * If one side is deeper than the other: return the larger depth plus one, and a the list from the deeper tree. * end routine Here is my code (not Ruby sorry): import Text.Parsec hiding (Error) import Text.Parsec.String import Text.Parsec.Char treeBottom tree = snd . fromRight . runParser treeParser () "" $ tree fromRight :: Either a b -&gt; b fromRight (Right a) = a treeParser :: Parser (Int, [Int]) treeParser = choice [ do try (string "()") return (0, []) , do char '(' digits &lt;- many1 digit spaces (depth1, nums1) &lt;- treeParser spaces (depth2, nums2) &lt;- treeParser char ')' let num = (read digits) :: Int result = case (depth1, depth2) of (0, 0) -&gt; (1, [num]) (depth1, depth2) | depth1 == depth2 -&gt; (depth1 + 1, nums1 ++ nums2) | depth1 &gt; depth2 -&gt; (depth1 + 1, nums1) | depth1 &lt; depth2 -&gt; (depth2 + 1, nums2) return result ] 
One thing to be careful with zlib are decompression bombs. Ignoring implementation limits, theoretical maximal compression of zlib is 1032:1, so decompressing 1MB of data can result in over 1GB of plaintext. Not really an issue in stream mode usually.
I think if all web workers are busy serving requests, most web server will still take new requests into the queue, and have them wait until a web worker becomes available to process it, otherwise the request would time out after N seconds. That's what I observed with Unicorn, but I'm guessing Puma works the same.
Ruby libraries are designed to use blocking IO, and classic Ruby web servers embrace that, so web workers will be busy even while waiting on I/O operations. That's the main advantage, from what I understand Node.js "workers" use nonblocking I/O, so they can process other requests while waiting on I/O operations. This allows you to achieve great parallelism, so naturally you're expected to have better request throughput. There are two ecosystems in Ruby world that bring async IO ‚Äì [EventMachine](https://github.com/eventmachine/eventmachine) and [async](https://github.com/socketry/async). From my experience it seems that the EventMachine community has diminished from what it was before (someone correct me if I'm wrong), I think primarily because you needed to patch every Ruby library to support async IO (for [em-synchrony](https://github.com/igrigorik/em-synchrony) to work). Lately I've been looking into `async`, as one of my projects ‚Äì [tus-ruby-server](https://github.com/janko-m/tus-ruby-server) ‚Äì would really benefit from async I/O. It's really beautifully designed, and it fixes some "mistakes" that EventMachine ecosystem has made. The author of `async` has recently opened a [pull request](https://github.com/ruby/ruby/pull/1870) to Ruby to support swapping the default Ruby's blocking "selector" to a custom one; the main use case here is to have Ruby use [nio4r](https://github.com/socketry/nio4r), which uses non-blocking I/O (and is the base of the `async` framework). From what I understood, that would enable switching all Ruby libraries to use non-blocking IO in context of `async`, without having to create async wrappers. What's also nice is that you can still continue your Rack-based web framework (something that [Goliath](https://github.com/postrank-labs/goliath) tried to bring), because the author of `async` wrote [falcon](https://github.com/socketry/falcon), a Ruby web server built on top of the `async` framework.
I can definitely understand that, I didn't realize your gem was so lightweight compared to dry-initializer.
Rails doesn't ? ;)
Take the time to learn a terminal editor (I prefer vim) The number of tools and integrations is huge, and it makes development within a repository easy
I meant to add it as the first line of the ruby script file. It‚Äôs a ruby command to set STDOUT to flush to the terminal after every write, instead of buffering it.
That's a very vague question. Improved in what way? Since when?
That depends on what you want to do with ruby. If you're just learning, or making a few small scripts for yourself then it doesn't really matter. Vs code is a good all platform editor that does what you want. If however you're becoming serious about programming, I would recommend getting more used to the terminal by using a terminal based editor. Personally, I use vim, but emacs has a big following as well and you can't go wrong. Just pick one and learn it back to front. It'll become super, super helpful when (if) you write code all day. 
From The Well Grounded Rubyist: "The answer is that **variables** in Ruby (with a few exceptions, most notably variables bound to integers) don‚Äôt hold object values. str doesn‚Äôt contain ‚ÄúHello‚Äù. Rather, str contains a *reference* to a string object. It‚Äôs the string object that has the characteristic of containing the letters that make up ‚ÄúHello‚Äù." Passing variables is no different. You'll understand better the first time you attempt to assign a passed variable to a method and want to access it outside the method. def name(var) var = "what" true end def name2(var) @var="what" true end
[We Want Serverless Ruby!](https://www.serverless-ruby.org/)
I created a new post with the link to it. Also spoke with @chrismunns from AWS lambda team and gave him the link to the petition. Check the tweet: https://twitter.com/ddsferreira/status/1011597241356865536?s=21
Yeah exactly. I personally like [iTerm](https://www.iterm2.com/).
 irb(main)&gt; Dry::Monads::Maybe::Some.new(2).fmap { |_| nil } =&gt; None Is this a bug? At least it breaks the functor law `fmap f . fmap g = fmap f . g` (where `.` is function composition), counter example: `f = -&gt; (_) { 1 }` and `g = -&gt; (_) { nil }`. Expressed in another way: `fmap` shouldn't switch from `Some` to `None` or vice versa. I don't feel like opening an issue yet, maybe breaking the law was done intentionally.
Right, this is intentional, mostly for historical reasons, it worked this way in the Kleisli gem. We preserved this behavior since it makes more sense for Ruby, at least no one seemed to be affected. It's possible to have an alternative, lawful version of `Maybe` but so far it's not clear anyone needs it. Note that `Result` is not affected, i.e. `Success(nil)` doesn't get transformed into `Failure`.
I am currently learning Ruby so I can give you a bit of information on the direction I am taking... First off, I am a full stack web developer (stronger on back end) using the LAMP stack professionally for about 3 years now. I decided a little over a month ago to learn Ruby as I wanted to explore more complex topics that don't come up much in the PHP ecosystem such as concurrency and idempotency. The first thing I did was race through the Ruby course on Codecademy. Codecademy might be geared towards complete beginners to programming, but I find it is a great resource to quickly familiarize yourself with a new language's syntax, even if it is a bit boring. As a professional developer, you should be able to breeze through the entire course in a couple of hours max. From there, I decided to play around with the Rails framework by following the build a blog tutorial on Rails' getting started guide as well as a couple other API tutorials in Rails. This introduced me to some more complex Ruby features as well as getting my hands dirty using Minitest and Rspec. I would say that at this point I am capable of reading a fair amount of Ruby code, but still have a lot to learn. The thing about Ruby that I realized pretty quickly, is it is a very expressive and vast language, with a lot of community-driven conventions and many different ways to accomplish the same thing. It's definitely a language that can only truly be learned by building a lot of things with it, moreso than any other language I've worked with. Hopefully this helps you a little bit. As an automation tester, I think Ruby would be a good language for you to learn. Aside from testing, Ruby is commonly used in devops (particularly CD) which seems to go hand-in-hand with automation testing.
I like SublimeText. I'm not sure it offers "word suggestion based on the language" though. 
Thanks for the Setting up ST for Rails link! It's got some plugins I hadn't been using, but see i want to. That's one of the challenges with ST, getting it set up right involves installing a bunch of plugins, and knowing about the good plugins and avoiding the poorly written ones is an issue. 
Thanks, I see. &gt; but so far it's not clear anyone needs it "Needs" might be strong word, but code like `if a.some?; a.fmap{...}.bind { |x| do_some_stuff }` might not necessarily call `do_some_stuff` which I find surprising. `Success(a).to_maybe` not always returning a `Some` is also not expected (at least the library warns about the unexpected conversion which is good). Why I care: I thought about replacing my custom Maybe/Result implementations with dry-monad, but I'm not too confident in doing so with the different behavior around `nil`. The code base is rather large. :/ &gt; mostly for historical reasons 2.0? :)
I picked up sublime text. I am hoping to become a programmer. for now I have books to study.
Fair point. Perhaps it's possible to add this behavior with a config option for the mixin, something like `include Dry::Monads::Maybe[:strict]`. On the other hand, this may be even more confusing so I need to think it through. In 2.0 we can change the behavior for `fmap` and just add another method to `Maybe`.
TLDR; + Depends on a open source [one-click deploy microservice](https://github.com/danielwestendorf/breezy-pdf-lite) (can be deployed anywhere) + Generate PDFs with a Rack Middleware + Generate PDFs pragmatically
Example: [This HTML](https://github.com/danielwestendorf/breezy_pdf_lite-ruby/blob/master/example/ex.html) is turned into [this PDF](https://www.dropbox.com/s/v4j4n1cvtm032w9/breezy-pdf-dashboard-example.pdf?dl=0).
The emphasis is on *me*. If rails does attempt to streamline the ruby init boilerplate code, I am not aware of it and I am not using it. I am sure the proposed pattern works for many, and the author. For *me*, seeing the initializer is better.
I did the opposite. I started with Ruby and then moved to Java. My UI tests were originally written in watir-webdrive (I think it's just watir now). But, I made the switch and now use java selenium/junit/maven... Anyway...the irb is your friend. Simply go to a command line (assuming you have ruby) and type in irb. There you can require your libraries. e.g. I would do the following: require 'watir-webdriver' browser = Watir::Browser.new browser.goto("URL") browser.text_field(:name, "username").set "jgriffin" browser.text_field(:name, "password").set "Loan9Loan!" browser.element(:xpath, '//input[@name="Login"]').click You can also use pry in your .rb file for even better troubleshooting: e.g. require 'pry' binding.pry That will load your program in the irb. Anyway, best of luck. 
Pick a project that you're interested in building and work backwards. What do you need to do every day for 3 hours to make the next step? Maybe it's a fun web app idea, then you would start with some rails tutorials and when your done try building your project. A real world project forces you to not "cheat" and to actually understand how to the material. When you're done you have a project you could potentially show employers to say that you've built a thing. If you're more interested in one area than others (for example rspec) then make sure the project is thoroughly tested with rspec. I also recommend finding a Ruby or Rails user group nearby. Will help you meet local people who might be able to give you moral support and maybe point you at a few resources. 
Personally, I want to start with a reference/tutorial on just how the language works, and understand how the language works (like do some text-only command line play things to learn it). Before diving into real code. But everyone learns differently. 
One of my favorites as well! Self-promotion: I wrote [an extension](https://github.com/jonathanhefner/pleasant_path) to add a few more utility methods to Pathname and also give it a [fluent API](https://en.wikipedia.org/wiki/Fluent_interface). It lets you write code like `files = "should/eventually/exist/".to_pathname.make_dir.files_r` or `contents = "should/eventually/exist.txt".to_pathname.touch_file.read_text`, etc.
5 seconds is a _long_ time for a result to return, most people don't benchmark with that kind of load. Presumably those 5 seconds are _mostly_ waiting on IO, like the db? That might make it at least feasible. If the 5 seconds were really all CPU, that load is going to destroy a node server or a rails server. Although I guess you just said "100,000 web requests", you didn't say in what period of time they come in. But that's a lot of load if it's in a short period. There is no simple answer to "Rails will do it better" or "Node will do it better." Depends on what's going on. 
Depending on what you mean by "default rails server" -- many common servers will be using threads out of the box. Which can help out a lot if your load is almost all IO-bound, but don't help if it's primarily CPU, if you are in MRI. And even if you are in JRuby (or another language/platform that can do true paralellism, which by the way is _not_ node.js), there's only so much CPU to go around! 
Hmmm. I think I will use the SSDP gem and set up the client/server auto discover. The rest of this seems rather simple, so I will get to learn something new. I'm currently thinking of using SSDP to initially connect the server and clients (but there actual connection would take place with a TCPServer and TCPSocket.) Is that a good idea?
The 5 seconds is waiting on a response from another server. 
I'm in a very similar boat. The other comments are spot on - it's not about learning a specific thing, it's about picking a task or excercise, and not stopping until you've completed it. In some ways, Ruby is much easier to learn than Java. Reading other people's code like you did before is a great way to learn. Stay focused and I bet you'll learn a shitload in 3 hours a day. 
looks interesting
Yep exactly, your service discovery is only the initial "How do I connect to you", once that's established you actually need to make the connection.
Check The Odin Project's [Ruby](https://www.theodinproject.com/courses/ruby-programming) track. The curriculum is very thorough and you have a good amount of projects to complete.
I use RubyMine. It‚Äôs free for students. Sublime is pretty good. Atom is popular as well. The new kid on the block is VS Code which is pretty nice. I‚Äôve used a bunch and nothing has pulled me away from RubyMine. It‚Äôs built for Ruby/Rails, updated frequently, and works really well.
That is step 2. Step one is understanding the fundamentals of variables, assignment, flow control, etc... Read a Guide to understand the tools you will have at hand -- then start plugging away at a project or playing.
I do like ruby a lot, but: &gt;For data manipulation/transformation, Ruby absolutely slays Python (Perl? ... forgettabootit). ... is purely subjective -- maybe while being easier to maintain/read but I would put up a skilled perl dev against the same level of ruby dev any day for data manipulation./parsing/transformation. If you have a hammer ...
I would go into a little more detail as to the real problem you are facing. From your description it seems like no matter what your language or deployment looks like you will quickly invert the problem from 5X100,000 requests (need to run async!) to something more like I need to limit X concurrent requests at a time from a batch of 100,000 with retry and blah blah blah. 
it seems plausible node.js will do better with tens of thousands of requests all simultaneously (do I understand your load model right?) paused waiting for an IO response. Not sure, I haven't used it, but it's async model is theoretically well-suited for that. If your app is gonna be that big (100K concurrent connections?), I think it would be worth your time to make simple demos in multiple platforms and load test them. 
... Hidden gems?
Oh that was a missed opportunity!
i‚Äôd suggest calling it a command object - it‚Äôs literally following the command design pattern. ‚Äúservice object‚Äù implies a command object for a particular layer of your architecture. e.g., infrastructure services produce side effects and typically return nothing. 
Bringing in a microservice AND chrome just to convert HTML to PDF? Sounds like a fun project, but I'll stick with pandoc
&gt; It offers an alternative to using Struct.new which does not check for number of parameters provided in initializer Classes created by `Struct.new` check parameter count. Maybe I don't understand what you mean? irb [2.0.0] (selfie-formatter)$ Struct.new(:a,:b).new(1,2,3) ArgumentError: struct size differs from (irb):1:in `initialize' from (irb):1:in `new' from (irb):1 from /usr/bin/irb:12:in `&lt;main&gt;' Though seems as if the error message may confuse callers. üòµ
Using class2: irb [2.4.0] (selfie-formatter)$ ApiClient.new(:api_token =&gt; "123") =&gt; #&lt;ApiClient:0x007fb92a1099e8 @api_token="123"&gt; irb [2.4.0] (selfie-formatter)$ _.api_token =&gt; "123" irb [2.4.0] (selfie-formatter)$ ApiClient.new(:api_token =&gt; "123") =&gt; #&lt;ApiClient:0x007fb92aa77c50 @api_token="123"&gt; irb [2.4.0] (selfie-formatter)$ _.to_h =&gt; {:network_provider=&gt;nil, :api_token=&gt;"123"} Or even: require "class2/autoload" require "pp" c = ApiClient.new(:token =&gt; "SHHHHHHH", "provider" =&gt; "111") p c.provider.class pp c.to_h __END__ { "api_client": { "token":"X13123123123", "provider": 1999 } } But it uses `ActiveSupport::Inflector` so... 
Eu amo goiabada com queijo de Minas. Todo mundo precisa experimentar. 
The microservice runs Chrome, so they‚Äôre one in the same. If you only have simple needs, other solutions are better. If you need to support custom fonts, headers, footers, charts, advanced styling (gradients, drop shadows, transformations, etc) and it isn‚Äôt sensible to learn new new markup/tech, then something like this might make more sense.
I started out thinking "oh god, why do we need method pattern matching, leave poor ruby alone", but by the end I thought "Sure, that seems pretty fine, right there." So your post worked. :)
What's the difference between running Ruby on Ubuntu with/without Windows Subsystem for Linux? 
üëçAlways nice to hearing about Ruby being used with Microsoft products.
Sidekiq for background jobs, to allow workers to horizontally scale to additional hardware if necessary. Concurrent-ruby for local stuff. I'm partial to the [channels/goroutine implementation](https://github.com/ruby-concurrency/concurrent-ruby/blob/master/doc/channel.md) they are hiding in -edge.
I haven't used Windows Subsystem for Linux(WSL), but I've doubt quite a bit of reading in it. WSL gets you access to the UNIX terminal where you can navigate the whole computer. The largest downside is performance, although it's probably not really noticeable irl. 
Here is my latest summary of asynchronous processing with Ruby. https://www.codeotaku.com/journal/2018-06/asynchronous-ruby/index Sidekiq is still a well maintained and excellent option for job processing. I've been working on `async-redis` which we hope to use to build a background job processing system. We are replacing an existing one based on `resque`. My goal for this project is to build something roughly compatible with `resque` so we can drop it in without much effort. I've also been toying with the idea for different levels of prioritisation. We've got quite a decent chunk of data (2+ billion rows) and one aspect of that is statistics and analytics. We've got an existing pipeline for this but I'd personally like something a bit less "background". I've been working on actor based concurrency models with an idea to have a cluster of actors performing both background jobs and other processing tasks - such that you can connect to the cluster using `pry` or some other CLI, and basically work with them as if they were local (think `Drb`, `Dcell`, etc). I think a general purpose model like this would be really awesome for a lot of different things. 
 Note: I've updated the article 27.06.2018, added section on CSRF Breach. It's quite important note 
Pretty much this. Sidekiq/Shoryuken/etc. are explicitly to run jobs in a different process altogether; its for jobs that make sense to keep running if your controller crashes/restarts (e.g., sending out a mailer, sending results from a long-running computation/task). Concurrent-ruby is awesome but for concurrency within your application process (e.g., making multiple API calls).
This case: &gt; Struct.new(:a,:b).new(1) 
Why not just use Sidekiq?
Will have to look at that, been using wkhtmltopdf and mini_magick
I‚Äôm curious as to why you were initially against adding pattern matching to ruby? It‚Äôs one of my favorite elixir/erlang features. Ruby is one of my favorite languages, and I‚Äôve generally been fairly satisfied with it‚Äôs language features when compared to others ‚Äî especially given how extensible it is with things like DSLs being super easy to write. That is until I started using ES6 destructuring daily. Now every time I switch back to ruby I find myself constantly wishing I could use it. I thought this was a great post. The pattern matching I could take or leave. Would I use it if it were added as a language feature? Sure, it‚Äôd clean up cases were I‚Äôm using guard clauses/early returns, but I hardly think it‚Äôs a needed feature. But holy shit, that destructuring implementation is what I‚Äôve been desperately wanting. 
In my experience, this is a correct assumption
[removed]
Oh wow, I really like that channel implementation. Was actually looking at concurrent-ruby the other day and must've completely skipped over it because it was in edge. Definitely going to have to play around with that one. I don't think I would've actually ended up using it, as I was writing a task that creates a large development seed dataset from production data, and my issues I were running into were mostly memory related and not so much speed/efficiency because I really don't care if it takes 1 minute vs 5 minutes. So, to throw another async processing solution that hasn't been mentioned here yet, how I solved it was using `fork` and `redis.pubsub` to process the data through three processes (one that reads it, one that transform its, and then one that writes the data). fork do data_sources.each do |source| source.load.each do |data| redis.publish :transform, Oj.dump(data) end end end fork do redis.subscribe(:transform) do |on| on.message do |channel, message| redis.publish :write, transform_data(Oj.load(message)) end end end fork do redis.subscribe(:write) do |on| on.message do |channel, message| buffer &lt;&lt; Oj.load(message) end end end
omg...
I think the merge solution with default values is the nicest
Only one mention of the `#===` operator, which is what powers `case`. That's the closest thing that Ruby has to pattern matching. See also MenTaLguY's `case` gem: https://www.rubydoc.info/gems/case/0.5.2.1
I knew about this for the test environment but for whatever reason it didn‚Äôt occur to me it would work the same for other environments. If you use sandbox, can you attach to the database from a DB app? I‚Äôve noticed when I run tests with rspec and I use pry to give me access in the middle of a test, I can‚Äôt see anything in the database outside of the pry prompt. TablesPlus shows an empty database. This got me to thinking that maybe it runs in sandbox mode for the tests and maybe you can‚Äôt connect to a sandboxes instance. This is just basically me guessing at this point. 
The post is based on the assumption that reader knows about `#===`, and have read/ thought a lot about how it could be made more powerful. Everything proposed (in the post and in accompanying library) is based on usage on this operator -- as well as 80% of other pattern-matching imitation libraries.
I switched from Mac to Linux some years ago and I havent looked back yet! i3 and vim are huge productivity boosters for me
Ruby 2 has support for keyword arguments. Or am i missing the point of the article? [https://robots.thoughtbot.com/ruby-2-keyword-arguments](https://robots.thoughtbot.com/ruby-2-keyword-arguments)
What about using keyword arguments? I haven't tried it with object creation but maybe its an option. [https://robots.thoughtbot.com/ruby-2-keyword-arguments](https://robots.thoughtbot.com/ruby-2-keyword-arguments)
Neat! had no idea this existed. Still wouldn't want to do this on production though
I haven't used elixir/erlang, so I'm probably not 'grokking' how method invocation pattern matching is useful. But in general, ruby is already a pretty complex language syntactically, and I'm cautious about adding more things to it. For instance, keyword arguments are _great_, I love them. But the fact that they were added on later, on top of the legacy last-hash-arg substitute (really a kind of syntactic sugar, except with additional built-in arg checking)... definitely makes ruby more confusing to the newcomer, by adding another syntactic construct on, while leaving the first one in place too. 
How does an article on this topic not even mention keyword args? They would created to solve this problem.
Is this for people stuck with 1.9? I'm not following .. 
Thanks for the downvote I assume, but I think it would've been helpful to better explain the `#===` method including its relationship to pattern matching and the `case` statement.
¬Ø\\\_(„ÉÑ)_/¬Ø The article target audience is assumed to clearly understand those things (otherwise the article would not be interesting enough for them). I don't try to be elitist or something, but when writing on complex topic there is always compromises in what "entry level" you assume. And, BTW, the first section of the article has enough links (including my own earlier article) for explanatory material. PS: I rarely downvote (and neither this time) when I can answer something.
I continue to maintain that the full pattern matching powers of the `#===` method, and that it's invoked by `case`, are not as well understood by Rubyists as you think. But perhaps I'm wrong.
It doesn't exactly run in "sandbox mode" when running tests, but Rails does, by default, use _transactions_ for tests, which is also what sandbox mode uses. But I don't know if sandbox mode uses them in such a way that you will "not be able to see anything in the database." Try it and let us know? :) In tests, it is actually _intentional_ that you don't _have_ a database that persists between tests, if that's what you were looking for. It's considered good test practice that every test runs in a database that starts out empty, to avoid unintentional cross-test effects. 
I think Sandy Metz would actually ask "Is it Movie's responsibility to know if it's starring Keanu Reeves or what it's box office is etc.?" ;)
Well, I have written on this in [previous](https://zverok.github.io/blog/2015-07-18-matchish.html) (3 years-old) article on this topic. And Qo's author [did that recently](https://medium.com/rubyinside/triple-equals-black-magic-d934936a6379). And also there are, like, three dozen more articles with the same attitude. So I allowed myself to spare the keypresses this time.
huh, I didn't know about this either. thanks for the heads-up, does look promissing. Interested in hearing from anyone using it if they've run into any bugs/problems. 
An actor implementation is part of concurrent-ruby too, definitely explore that before reinventing the wheel. I don't know about distributed actors Drb-style though. Personally I tend to be scared of that, it can go wrong in so many ways. 
Do not agree with this analysis of what code choices are better than others. 
Concurrent-ruby has been having trouble getting regular maintenance lately. I would investigate its current status before building a system that relies heavily on it.
With the modular Sinatra style and multiple controllers, your structure is going to look something like this: . ‚îú‚îÄ‚îÄ Gemfile ‚îú‚îÄ‚îÄ Gemfile.lock ‚îú‚îÄ‚îÄ app ‚îÇ ‚îú‚îÄ‚îÄ controllers ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ application_controller.rb ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ other_controller.rb ‚îÇ ‚îî‚îÄ‚îÄ helpers ‚îÇ ‚îú‚îÄ‚îÄ application_helper.rb ‚îÇ ‚îî‚îÄ‚îÄ other_helper.rb ‚îú‚îÄ‚îÄ app.rb ‚îî‚îÄ‚îÄ config.ru # Gemfile gem 'sinatra', require: 'sinatra/base' # app.rb require 'bundler' Bundler.require :default Dir["./app/{helpers,controllers}/*.rb"].each{|file|require file} class ApplicationController &lt; Sinatra::Base set :erb, layout: false end Make sure that the helpers are required before the controllers, and that way you can get rid of the `helpers ApplicationHelper if defined?(ApplicationHelper)`. Don't define your routes in this class. Instead do all of your application settings here, and define your routes in the reopened `ApplicationController` class in the `controllers/application_controller.rb` file. # config.ru require './app' map('/other') {run OtherController} map('/') {run ApplicationController} A pretty simple `config.ru` file. All that's happening is that routes starting with `/other` will be mapped to the `OtherController`. So, for example: * The `/` route defined in `OtherController` will map to the route `/other` * The `/route` route defined in `OtherController` will map to the route `/other/route` ## ApplicationHelper module ApplicationHelper def foo() 'foo' end end Since all of the other controllers will inherit from ApplicationController (which includes the methods in this module once you call `helpers ApplicationHelper`), all methods in this module will be shared among all of the other controllers. ## ApplicationController class ApplicationController &lt; Sinatra::Base helpers ApplicationHelper get('/') {ERB.new("&lt;%= foo + bar %&gt;").result(binding)} get('/index') {ERB.new("&lt;%= foo %&gt;bar").result(binding)} end Note that you'll get an error if you request the `/` route, since the `bar` helper is only defined in `OtherHelper` and therefore only available in routes defined in `OtherController`. However, the `foo` helper method is available since it is defined in `ApplicationHelper`. The second route will work fine since it's only calling the `foo` helper method. ## OtherHelper module OtherHelper def bar() 'bar' end end ## OtherController class OtherController &lt; ApplicationController helpers OtherHelper get('/') {ERB.new("&lt;%= foo + bar %&gt;").result(binding)} end This route will map to `/other` and will render `foobar` since the `foo` helper method was inherited from `ApplicationController`, and the `bar` helper method is defined in the `OtherHelper` module.
Why does a UK guide include events in new york? 
Medium.
It depends on how your specs are set up. If you use transactional fixtures, or happen to use database_cleaner with transaction strategy, this is as expected.
First learn the basics - use something like Thoughtbot's Upcase, or read 'Agile Development with Rails 5', or read the Free Rails Book / Tutorial available free online. Next, you will want to read a lot of additional books. For Ruby, they say the best book is the Pickaxe book (Google it). For rails, once you want to go further - and there are some great books on Ruby / Ruby on Rails. A few I would suggest as necessary: Refactoring (Fields / Harvie / Fowler), Rails Antipatterns, Enterprise Rails, Thoughtbot's Ruby Science and their Testing Book. Eloquent Ruby is good too. Some of the Rails books are a little older so you will want to make sure you current on the latest Rails 5 syntax before reading any of them - so you will understand what you can do differently in the latest Rails. But the overall lessons in those books will stay the same 95&amp;#37; of the time.
Why?
++ for Mike and Sidekiq. 
I think either controller or request specs are fine, honestly. The rest of my answer assumes you're working with Rails, which seems like the case here. At the end of the day, your controller actions are just instance methods on an object, and controller/request specs set up the environment to mimic how they would be called (setting up a session, rack env, etc. is what I mean here) You *could* do all that setup yourself, and test the endpoint as if it were a regular old method on a model, but it would be a pain in the ass.
Why wouldn‚Äôt you use request specs for this?
Config option for the mixin might be a good idea, but I doubt it will work well with `include Dry::Monads`. I really can't be bothered to include `Dry::Monads::Result`, `Dry::Monads::Unit` and `Dry::Monads::Maybe` separately, so I always `include Dry::Monads` instead. However, some kind of a global strict mode might be nice. The mode could also add type checks to methods like `#bind` and `#or`. And probably check if all `yield`s return the same monad in `Do` notation. 
Request specs are for integration, and for this sort of (very specific) controller, I really only care about auth and a response code. (There's one other action, but that's covered very well elsewhere.) So it really fits the intent of a controller test, IMO. [Docs](https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec#requesting-a-json-response) say: "Request specs provide a thin wrapper around Rails' integration tests, and are designed to drive behavior through the full stack, including routing (provided by Rails) and without stubbing (that's up to you)."
I think you're getting hung up on terminology. The only difference between a controller spec circa Rails 4 and a Request spec circa Rails 5 is that controller specs mocked out a bunch of stuff then called the controller action directly. Request specs package up a Rack request and run it through the middleware stack. Otherwise, they serve the same core purpose, and what you're describing trying to test fits perfectly into the use case for request specs. 
&gt; At the end of the day, your controller actions are just instance methods on an object, and controller/request specs set up the environment to mimic how they would be called (setting up a session, rack env, etc. is what I mean here) Largely speaking the entire point of request specs is that they _don't_ do all that setup and mocking. They just package a Rack request and pass it to the entry point of the app. 
Another Rust/Ruby project is Helix https://github.com/tildeio/helix
I‚Äôm trying to use Pry to pause in the middle if all of a test and that part works. I can interact with everything just fine with Pry. What I can‚Äôt figure out is why I can‚Äôt see the state of the DB outside of Pry. If I do Users.all, that hits the DB and gives results. So I know the DB has the test data.
Yea I know it gets wiped between tests. What I don‚Äôt know is why it‚Äôs not accessible in the middle of a test that‚Äôs paused via Pry. It‚Äôs accessible through Pry and the data is in the DB, just not outside of that. Which led me to believe it‚Äôs somehow sandboxed. I‚Äôll eventually figure out what the deal is. It‚Äôs not a high priority because I can write tests, and my tests work right now, but sometimes when writing tests I‚Äôd like to be able to examine what‚Äôs being written to the DB. 
Why would you want to use db outside of pry?
hm, TIL
Most recently I wrote tests for oauth. I have it stubbbed and I‚Äôm able to register and login. Through Pry it doesn‚Äôt appear that anything is getting loaded into the identities table but that seems odd because without that I shouldn‚Äôt be able to login. So I think it‚Äôs working fine, but I‚Äôd just like to be able to check. And I can check various tables faster through the GUI than I can on the command line. Not much faster though. 
What is meant by "continuation of ruru"?
the idea of not testing the controller applies more to not testing the concretion but the abstraction, for example sending a request you expect a certain response. but the test shouldnt be concerned with who handles the request or how
Ruru is the primary project this was forked from. A lot of features have since been added and a few alterations made. Ruru hasn't been developed in 6 months, and then many other months before that. To continue to build upon the code base to be improved is what is meant by ‚Äúcontinuation of ruru‚Äù. Although since I haven't heard from the author of ruru about what his vision for the project is/was I've had to branch out into my own vision for where the project is to go.
Yes. And many brilliant and well established people in the community are working on Helix making it quite a wonderful project to use. The visions differ from one project to the other so they each serve a purpose.
Ironically, earlier this year I converted a Ruby program to Go Lambda thinking it was the fastest option. Then I came across this article: [Comparing AWS Lambda Runtime Performance across Go, .Net Core 2.0, Node.js, Java and Python](https://www.contino.io/insights/comparing-aws-lambda-runtime-performance-across-go-net-core-2-0-node-js-java-and-python)
I wonder if you've somehow ended up in a different thread than the data. With the method of using DB transactions to make the data 'temporary', only the thread that created the data will have a DB connection with the uncommitted transaction that can see the data. 
I‚Äôm pretty excited for Rust. I can‚Äôt wait to finish my masters so I have time to play with it. Rust is the first new programming language to really peak my interests. Thanks for sharing! 
I always recommend "The Well Grounded Rubyist". The title says it all: You'll get a really good understanding of Ruby. It probably covers over 90% of what you'd use of the language itself, for a typical web app or general scripts. It's a big book, which you can keep as a solid reference material, and it's also such a pleasure to read. I recommend a PDF version, so you can quickly navigate around in the future, but that's a matter of preference.
Awesome stuff! One thing I would love to see for rust/ruby is the ability to compile to LLVM bit code so users don't have to have rust installed. This might be more of a task for the thermite gem but would love to hear your thoughts on this.
hey man, I've got some commits that I never merged to ruru and ruby-sys that might be interesting to you. They're implementing fibers and ruby procs. They're still a little bit segfaulty but quite close to being correct I think: [https://github.com/tinco/ruby-sys/commits/master](https://github.com/tinco/ruby-sys/commits/master) [https://github.com/tinco/ruru/commits/fibers](https://github.com/tinco/ruru/commits/fibers) Unfortunately my employer changed focus and I couldn't continue work on it.
As you go, there will be more and more things to check. This is one of the things where automated tests help you. Check out pry-byebug, type 'help' at breakpoint, play with 'next', hope you'll be able to figure out what is wrong with your spec. Consider this an investment that will save you from mundane task of registering and logging in each time you make a change.
&gt; What should we be using for API (or other non-UI) controller testing now? Request specs. &gt; I'm talking about controllers that aren't appropriate for request or system testing, because they may only have a side effect and return a specific status code, interact with a third-party API, etc. With VCR you can handle third-party API requests. Also with rspec-mock you can manage, test(test spies) and control every object used by controller action, if you want. 
*pique
*written on mobile
&gt; It‚Äôs a good idea to delete as much flow control code (i.e. ifs, and case expressions) as possible. It improves adherence to the Single Responsibility Principle and makes the program more readable in general. Am I the only one who considers this statement questionable?
I love you, Mike. We all do!
I think this is a matter of using things like polymorphism and duck typing instead of if(object==mechanic) object.fix(car) if(object==appraiser) object.appraise(car) etc etc It's a matter of writing reusable code that doesn't have a lot of dependencies on other objects or control flows Practical Object oriented design in ruby by Sandi Metz covers this concept really well
Thanks! I'll take a look at it soon (next week most likely). I will know more then what I can do to help. Would you be willing to do a little more work on it once a branch for it is made? I'm not asking for a commitment here as I know your time is valuable. I'm just wondering if you'd be excited enough about it to put in a little of your own time to see this work through when you have the opportunity?
It sounds like what you're asking for is having the ability to use Rust without Rust since Rust uses LLVM. What Thermite specializes in is building binaries for different platforms all on your CI server and storing that in Github Releases. Then is will also pick the right binary from Github Releases to download when someone uses your project so they don't have to have Rust installed. My Ruby project FasterPath already takes advantage of using Thermite so people don't have to have Rust installed to use it.
Good article. I didn't know about custom validation contexts and the Solution #5 I could see making good use of in many contexts.
Agreed. 5 confuses me a bit. `validates :terms_of_service_accepted, acceptance: true` _isn't_ adding this to validation to the entire class, even though it's a class method? something involving "singleton" classes? I don't get it! 
would you say the difference is allowing using ruby functions in rust?
Great article Karol, I didn't know there was so much under the validations hood. 
A brief developmental blip - hopefully moving to their own country on Monday!
I agree with it to an extent. Flow control code is often more complicated to test, and it can definitely become less readable if there are too many branches of logic.
[this ancient blog post](https://www.devalot.com/articles/2008/09/ruby-singleton) helps explain an instance's singleton class (which is not related to the `Singleton` module). It's sort of a way to break into the class-level context of an instance, in a way that *only affects that instance*. You can use the `singleton_methods` methods on an instance to see methods that have been added this way.
Maybe you‚Äôre more familiar with the terminology ‚Äúeigenclass‚Äù? https://medium.com/@ethan.reid.roberts/rubys-anonymous-eigenclass-putting-the-ei-in-team-ebc1e8f8d668
although it‚Äôs not the rails way, all the more reason to separate model from both database and validations? that would be the ddd way of doing things and this issue wouldn‚Äôt even arise. https://martinfowler.com/bliki/ContextualValidation.html also, i can‚Äôt agree that accepting terms of service during registration is a mere UI issue - this seems like a business rule. 
I use minitest and savon for my XML/SOAP/RESt testing.
Yet still you want to keep branching in one place rather than smattering it out over your code base :)
True, but hopefully if you design the system well enough and the variable/class names are good enough. It shouldn't be a problem. As with anything, there's a time and place for both approaches :)
I know basically what it is, how it's being used here and if it's reliable confuses me. Googling suggests that maybe it would _not_ have worked in Rails 3, but maybe sometime around Rails 4 they fixed the validation implementations to work with the "eigenclass"/"singleton class". Which confirms my suspicion that it won't necessarily "just work" to add validation stuff to the "singleton class" of an instance such that it works but doesn't effect the "real" class; the validation-related code attached to a class has to be written to accomodate it. 
That is the most obvious difference yes. But it's so much more than that. Helix is designed to be written in a more like Ruby code by have Rust macros create a Ruby DSL and minimize the amount of Rust code or the need to understand Rust. Ruru and Rutie embrace Rust code and style being more idiomatic towards Rust. Helix has its source code designed with coercions between Ruby and Rust with the tests being example projects. Ruru and Rutie create a direct API to Ruby objects and functions documenting each of their uses and providing tests for each API proving the code works. Helix provides generators to get you started with minimal setup. Ruru and Rutie use 3 layers to integrate with Ruby with: * The raw external function mapping being ruby-sys/rubysys which are unsafe * The \`binding\` layer which wraps the unsafe methods to use them safely * Then in the \`class\` folder are the methods meant for public use which is fully documented and tested With Rutie you can use several of these layers as it makes them available but the safety guarantees are meant to be only at the purposefully public API level in the \`class\` folder. So Ruru embraces the complexities of Rust and is transparent in its source code. Helix abstracts away Rust and is mainly transparent through it's code examples. So when you are deciding which library to use it's best to see what their values are and what's important to you when making the choice. None of the projects are feature complete but they're more than capable to get most anything done. They would greatly benefit by having more people contribute to them. \^\_\^
\*in Ruby
It's possible, but I would suggest using the Ruby [Vector](http://ruby-doc.org/stdlib-2.5.1/libdoc/matrix/rdoc/Vector.html) and [Matrix](http://ruby-doc.org/stdlib-2.5.1/libdoc/matrix/rdoc/Matrix.html) classes to prototype what you're working on first. I think trying to do this out of the gate in C is very much premature optimization. If you really have your heart on a C extension, maybe start with [Rubygems' Guide](https://guides.rubygems.org/gems-with-extensions/). The bottom links to other sources of information on how to do this.
And I would not reinvent the wheel unless you need to, and judging from this question, there are a lot more technical questions you probably want to figure out before proceeding. It sounds like you are just trying to iterate over each row in the database until you find an exact or partial match - and I think you may be approaching this the wrong way. If you are using a SQL database, you can look at the LIKE operator ([https://www.w3schools.com/sql/sql\_like.asp](https://www.w3schools.com/sql/sql_like.asp)) - but you wouldn't iterate over anything. Now if you're trying to build your own database search algorithm / search-engine from scratch, that is very different, but you would be reinventing the wheel and this wheel has indeed been invented MANY times over.
Request specs are literally made for this. As somebody else mentioned - I think your getting hung up on the terminology. Even though RSpec discourages controller testing and tells everybody to just do feature tests - I actually still use request specs regardless for my own attempt at RSpec functional testing controllers (referring to the Minitest definition of functional tests, which is really just a controller test), just to get a concrete test for each controller in my system and make sure its returning a successful response (or a forward response, unauthenticated response, etc...) - but NOT for testing the template loaded ofcourse.. Then I use capybara feature tests as my integration tests to test important flows between multiple actions / controllers. But you should indeed use request specs for the tests you described in your question - I actually also got hung-up on RSpecs documentation's definition of Request Specs also
Yes, I will use going forward use SQL with Ruby, and the gem On Rails, but for now I just want to let the Ruby concepts sink in a little bit deeper in my bone box. So I want to use just Ruby. But thanks for the advice.
if you use PostgreSQL it has full-text search integrated, look into the implementation of this gem for ActiveRecord https://github.com/Casecommons/pg_search
Awesome! I think this works. I now have one final question, just to save some folks auditing it a lot of time. How would I change the code around to produce a file name that include the name and document subject? I've tried something like this: name = doc["recipients"].find {|r| r["role_id"] == "signer_B" }["name"] pdf = CGI.unescape doc["signed_pdf_url"] `curl -o docs/#{guid}-#{name}.pdf "#{pdf}"` But that outputs a curl error: 0curl: (6) Could not resolve host: Here's a redacted example of the JSON Data: "recipients": [ { "name": "name1", "email": "name1@yahoo.com", "must_sign": true, "document_role_id": "signer_B", "role_id": "signer_B", "state": "signed", "is_sender": false, "viewed_at": "timestamp", "completed_at": "timestamp" }, { "name": "name2", "email": "name2@aol.com", "must_sign": true, "document_role_id": "signer_A", "role_id": "signer_A", "state": "signed", "is_sender": true, "viewed_at": "timestamp", "completed_at": "timestamp" As always, thank you for the help! 
Thanks for the information.
+1 for form objects. Once you start using them, there‚Äôs no going back. The MVC stack starts feeling right even for complex forms involving multiple models and contextual fields. 
Do you use (and have you used) `reform` or something else? I don't like all the boilerplate that's needed in reform to delegate all the attributes you need. I'm interested in something that auto-delegates more, so it's more like a decorator. But reform seems to be the only game in town at the moment. I've experimented a bit with DIY, but I think there are enough confusing weird parts (especially with AR) to justify a dependency. I haven't actually used reform beyond playing with it though, so perhaps I'm just wrong and it's totally fine the way it is, heh. 
If you weren't told by your instructor to use C to complete this chapter of the textbook use Ruby's Matrix and Vector classes as /u/x1a4 said. Unless you already know C and have implemented linear algebra in C, a C extension to do this is going to take you a lot, lot longer than the small amount of extra waiting you're might do using the Ruby classes.
1) If you're mounting any volumes into the container, you should at least consider running under a different UID. It's a best practice, but can be a pain in the ass, which is why it's skipped in the first place. 2) I have a convention of containerizing any and every app to `/src`
As long as you are aware that it will yield a suboptimal solution to the problem its a great project to undertake. Databases are fun pieces of software to work on and depending the Without understanding the structure of your data its hard to give you concrete advice. I'me assuming you are using hashes/arrays or other enumerable data structures. Otherwise i'd advice you try and include the [Enumerable mixin](https://ruby-doc.org/core-2.5.1/Enumerable.html) in the representation of your table(s)/tree(s)/string(s). It ought to teach you a lot about powerful features in like enumeration, blocks, objects. I think "String#match?" and "enumerable#select" will be handy. you might also want to read a bit about [indexes](https://en.wikipedia.org/wiki/Database_index)
You've stated you want this in Ruby. So why not iterate over the records and check if it matches all the words in the query? (the best way is to use your database for this - or a search engine like solr) Iterating through your records and using include?, it would be something like this: query_words = user_query.split(/\s+/) # split on one or more spaces records.select do |record| query_words.all? do |word| record.name.include?(word) end end Regex should be a bit faster, but the regex for this is not really for beginners. Unfortunately, regex doesn't have an "and" syntax, so you have to use lookaheads - [here's a stackoverflow answer for reference](https://stackoverflow.com/a/470602). You can dynamically generate the regex in a loop, i.e.: regex = "^" query_words.each do |word| regex &lt;&lt; "(?=.*#{word})" end regex &lt;&lt; ".*$" records.select{|record| record.name =~ /regex/i } You could also implement the .include? version by selecting results which match a certain percent of the words matched, or sorts the records based on the number of words matched.
Also the regex isn't straightforward since it doesn't have an 'and' expression, per se. [This stackoverflow answer can help with the negative lookaheads](https://stackoverflow.com/a/470602) (not really beginner stuff). 
Yes, I am using arrays to store each entry sequencially, and using String#match to analyse the contents. And enumerable#select looks like good method to use.
He could have explained it better. `extend` is the runtime version of `include` so where ever you see `extend` you‚Äôre just including the methods of the module into the class. It‚Äôs the objects singleton class in this case but the idea is the same. There‚Äôs nothing about Rails that prevents you doing this, it‚Äôs standard Ruby. The only question is whether the validation will be added to the validation chain correctly. It appears it does. 
Hoisting the and to ruby is easy enough if you don't need your searches to be super fast. I'd skip complex regexes, they suck the fun out of programming real fast!
I wish I were in school, that's why I have a MIT textbook on algorithms. Just someone mentioned not to use ruby matrix, but I've not worked with it honestly. I did a coarse of pre-calc and calc before I quit school, used to do calc before I was allowed to take it.
Well, you'd need a validation chain that belongs to the singleton class, not the "real" Class, but includes validations from the "real" class as well as the ones you added just to the singleton class. I'm not sure you'd get this without trying, but apparently it works, so okay! 
Dude that‚Äôs not what Ruby‚Äôs for. If you did manage to build a search engine in Ruby it‚Äôd be slow as heck, use a ton of RAM, and chance are the search results would be a lot less relevant than if you use the right tool for a job. That said, the simplest possible Ruby ‚Äúsearch engine‚Äù would just iterate through an array of strings and return the ones that match the ones where article.include?(search_string). Play around with it if you‚Äôre masochistic, but don‚Äôt deploy it in production! üòÇ
Dude that‚Äôs not what Ruby‚Äôs for. If you did manage to build a search engine in Ruby it‚Äôd be slow as heck, use a ton of RAM, and chance are the search results would be a lot less relevant than if you use the right tool for a job. That said, the simplest possible Ruby ‚Äúsearch engine‚Äù would just iterate through an array of strings and return the ones that match the ones where article.include?(search_string). Play around with it if you‚Äôre masochistic, but don‚Äôt deploy it in production! üòÇ
This article explains a lot of what went into the creation of something like Qo - https://medium.com/@baweaver/for-want-of-pattern-matching-in-ruby-the-creation-of-qo-c3b267109b25 The article @zverok_kha mentioned that I wrote was what I was about to recommend to get a decent overview of `===`, but looks like he beat me to it. I'd very freely admit that `===` can be confusing, and honestly a bit magical. More than likely it'd earn some negative comments on code reviews if I saw it being used directly as it very rarely communicates intent clearly. It's far more an implicit feature of the language and a common interface for things that act in a certain manner. Now all that said, I'd agree with Zverok that the intention of that post presumes prior knowledge of these materials. It _might_ be a good idea to put a prerequisite list on it for newer Rubyists, but that's up to them.
There's no good way to do what you are trying to do. If you really want to re-invent a database index though, you want to look at ["inverted indexes"](https://en.wikipedia.org/wiki/Inverted_index)
If you're doing textbook exercises the built-in classes are fine. If you're doing scientific work I think [numpy](http://www.numpy.org) would be an easier transition from Ruby than to a C scientific library.
It's just a deeper practice exercise.
Ok :) sounds good. 
For purposes of your textbook, I'd just do it in ruby, is it just a learning exersize or does performance actually matter? But, coincidentally, there was recently a reddit post about a new library to make this a lot lot easier. This is _not_ the way people normally do this up to now, it's a new thing, may not be mature, but: https://www.reddit.com/r/ruby/comments/8o9e0h/a_rubylike_language_for_writing_ruby_c_extensions/
Good point, ruby Vector and Matrix are _already_ written in C, so if you can do what you need with their api... But if the point of the learning exersize is to implement that stuff yourself... I'd just do it in ruby, unless there's a reason performance matters. 
Yeah not everything "just someone mentions" is good advice. :)
If anyone, like me, was wondering where exactly anyone affiliated with RSpec/Rails was saying this stuff, you can find these things [here](https://github.com/rspec/rspec-rails/issues/1838) and [here](http://rspec.info/blog/2016/07/rspec-3-5-has-been-released/).
my goal for end result is one day writing my own game engine library in ruby. and then eventually a run time gui environment. But ya, I can just use the ruby methods for now. I think the suggestion was so I could learn to optimize.
Agreed. I wrote a ray tracer awhile back in pure Ruby, which uses Vector extensively. It's not a speed demon, but it still renders the scene in under a minute in typical cases.
oh awesome. Actually, the book is meant to teach you how to make optimized algorithms. So probably C matters, and the pseudo code is more for python and C languages.
You may find there is a reason there aren't really any game engines in ruby. :)
You can totally learn how to write optimized algorithms in ruby. They just will be optimized "for ruby", not something you'd really want to use in production necessarily. But the same techniques will apply -- unless the text is really about optimizing the sorts of things you can do only in a lower-level language like C, where you have direct memory access. In which case, you should find some people who know something about C, haha. 
I think it could work for ruby. I need to watch another lecture for the prior chapters, and do the handouts. Even though I've heard ruby is not great for visuals and games, I don't really mind. It's just a personal project for now. I've got a 3 year old game doc and I'm kind of hoping to develop in my own software.
not sure what you mean
You could see how many pages it's expecting to find by adding to this line: result = JSON.parse Http.with_headers("api-token" =&gt; token).get(url).to_s like so: result = JSON.parse Http.with_headers("api-token" =&gt; token).get(url).to_s puts "result: #{result.inspect}" 
Maybe they mean using C to write the parts which require performance and Ruby as the glue? I can see this being feasible.
I somewhat tackled this subject in this post I wrote a while ago: https://revs.runtime-revolution.com/validating-form-objects-8058fefc7b89 In summary, validations can be divided into two groups: data integrity validations and business logic validations. It's up to you to treat them differently.
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#general-guidelines-and-recommendations It helps to think of a container as a chroot; it's just a process, network and filesystem namespace. It's not truly isolated from the host processes any more than a normal process; you can give a container any host level priviledges you could give any process. A default container runs with pretty restricted priviledges but it's something to be aware of. If you need more privs, use caps and don't just run in priviledged mode. Yes, should run the ruby server as a non-root user just like normal; there's some pretty juicy stuff that an attacker would have access to inside the container if your app gets hacked, just like on a normal host. Generally people try to remove anything that isn't a runtime dependency from the container. This makes everything move faster when you're developing and deploying. Alpine is good for this but be warned that it has literally no deps and you're gonna have to look up packages for stuff. You can also just use the ruby container if you're cool with a little unused code.
https://ruby-doc.org/core-2.5.1/Hash.html#method-i-3D-3D
The `==` method means are those 2 objects equal (usually as in, the same value). The default implementation that is in Object doesn't try to do any guessing and just says it's the same value if they are the same object. You can see that ``` Object.new == Object.new #=&gt; false ``` Most classes then override the `==` method to give the the "same value" kind of behavior. The doc you read was simply for `Object`'s method. 
elasticsearch my dude
The solution you are looking for has nothing to do with Ruby specifically. You are operating in the realm of pure algorithms at this point. Implementing it in Ruby will be the easy part, designing a well thought out algorithm and accounting for edge case behavior is a tough challenge sometimes. The things you are going to need to design are replications of how databases work under the hood. The solution you mention above will work, but not at any kind of scale. I would store my quote as a refrencible object, maybe a frozen string would do. What you don't want is for any given quote to be copied. Thats wasting memory. You want references all around. You want to use a [b-tree]([https://en.wikipedia.org/wiki/B-tree](https://en.wikipedia.org/wiki/B-tree)) to store individual letters. every time you form a full word of letters, you add a reference to a collection of references to strings that represent every quote containing that word.
**B-tree** In computer science, a B-tree is a self-balancing tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization of a binary search tree in that a node can have more than two children. Unlike self-balancing binary search trees, the B-tree is well suited for storage systems that read and write relatively large blocks of data, such as discs. It is commonly used in databases and filesystems. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
When i start rails i get warnings...but all work fine...
Reading a picture of text is pretty hard, maybe cut &amp; paste next time
Seconded. It was used on my last job and was excellent. A bit of work to set it up but once the infrastructure is there you‚Äôre golden.
Update your gems. bundle update 
You‚Äôre setting some constants multiple times. Search for them. Make sure they‚Äôre only instantiated once.
The problem in fileutils version... sudo gem uninstall fileutils (version 1.1.0) sudo gem install fileutils -v 1.0.2 
Thx all :)
I think that the form object offers the opportunity to distance the view away from the underlying object, and delegate just brings it back. You can craft the UI that you want, express the interface of what data you want going to the server, without caring how it ends up in ActiveRecord. There is some complexity dealing with associations if you DIY, but I think that decoupling the view from the model might be more beneficial in the long run.
It's because they're like a service layer in the Fowler sense, operating at the boundary of the domain model and the controller, and thereby make a lot more intuitive sense to your OO instincts than (say) transaction-script "service objects". Don't be afraid to treat your form models like a rich collection of objects in their own right. You can also persist them for a record of what happened. Form objects can be `&lt; ApplicationRecord`:) I'm specifically not a fan of Reform though. The whole Trailblazer ethos of "even more framework" leaves me stone cold.
When you have the same kind of branching happening in multiple parts of the codebase that‚Äôs when you want be able to encapsulate that logic somewhere that you can reuse and with some guarantees. For a very simple use case, then yes breaking things down into multiple classes doesn‚Äôt make sense. However, most systems get more complex and you‚Äôll want to deal with the complexity at multiple levels, especially architecturally at some point. 
A handwavy explanation of what is happening: Every object you create has a local copy of its class to lookup methods and you can also modify that local `class` object at runtime like seen in the blog post. This does not change the original class (the constant), only the local copy. That way you can add methods to one object, but not to the other even though these two objects are instances of the same class. "Eigenclass" is the proper term for it.
In my previous project we used [Scrivener](https://github.com/soveran/scrivener) for validations, which completely separates validation from the model, and I think it worked wonderfully. class Signup &lt; Scrivener attr_reader :email attr_reader :password def validate if assert_present(:email) assert_format :email, /@/ end if assert_present(:password) assert_length :password, 3..20 assert_equal :password_confirmation, password end end end signup = Signup.new(email: "foo@bar.com", password: "secret") if signup.valid? User.create(signup.attributes) else puts signup.errors end Yeah, you'd need to reimplement uniqueness validation, but that's an ok tradeoff for me. This was a JSON API, and over time JSON fields and table columns will inevitably diverge, so I think we would go crazy if we still relied on model validations.
I think you should use `case` statement here: input = gets.chomp puts case input # 'i' flag makes regex case insensitive when /y/i then "confirmed" when /n/i then "cancelled" else "invalid input, enter yes or no" end this will match any variation of Y/y/yes/Yes/yEs and similar with No 
Oh man, this is a really neat solution! I didn't even need that long regex haha. The only thing I find a little confusing is the *puts* infront of *case.* How does that work? Does that just mean it will print out the result of the respective case? Thank you so much for your help. Seems like i over-complicated things just a little bit! 
`case` blocks (and pretty much all blocks in ruby) returns the last value returned by the last statement/expression executed in the block. Here our statement is just a string value, which normally would do nothing. Since `case` is a parameter to `puts`, the value returned goes into the `puts` parameters.
Yes, that's exactly what it will do. The `case` statement itself has a value, which is the result of the code executed in the matching `then` clause. Since the result of each `then` clause is a string, the value of the `case` statement is that string. So the result of the `case` block gets passed as an argument to `puts`.
Be careful as though you might want to tinker with your regexes a little, if you don't want responses like 'absolutel**y** no' to trigger confirmation. &gt; puts infront of case. How does that work? In Ruby you can use your `case` and `if` (and some other statements) in this way, for example: str = "hello" case str when "hello" then puts "hello there" when "goodbye" then puts "goodbye" end is going to be equivalent to str = "hello" puts case str when "hello" then "hello there" when "goodbye" then "goodbye" end ruby will see `puts`, then evaluate `case` statement into whatever it evaluates into and sort-of substitute the whole statement with the result of this evaluation, if that makes sense. There is some fancy name for it, that i can't quite remember at the moment. You can also use it as a conditional assignment: str = "hello" my_variable = case str when "hello" then "hello there" when "goodbye" then "bye then" else "some default" end puts my_variable =&gt; "hello there"
How do I make sure of that? I usually saw this in Rails when code reloading is done. 
Thanks for the fast explanations everyone. I've edited my regular expressions a little to make sure there will be no undesired results (thanks for pointing that out /u/DoubleJarvis) I hope you all will have an excellent weekend!
It's not unreasonable. Cyclomatic complexity is moderately correlated to a) the number of bugs and b) the volume of technical debt. In descending order of readability, at least of my own code, and noting that all generalisations are dangerous and have exceptions, injected dependency &gt; polymorphic type &gt; early return &gt; case &gt; if/else. 
If you're looking for a path forward on this, check out portal.apiotics.com. We're building tools to help Rails developers build exactly this kind of application.
FYI: Calling `extend` on a User object clears Ruby's method cache for that class (and subclasses). :\
Calling extend on an _instance_ clears the method cache for the _class_? I have no idea myself, just clarifying. 
I had not heard of scrivener, I'll check it out thanks!
Have you done it DIY yourself? 
Yeah all the time, I don‚Äôt use reform at all. 
Earlier versions of Ruby would've cleared all method caches, newer versions should "only" clear the class' and subclasses' method caches, iirc.
&gt; injected dependency Exuse me, but how *this* can ease understanding what a program does?
I would consider adding some ‚Äúwhy‚Äù to the start of your README. Particularly, I look for - why did the author make this? - who is the intended audience? - when is it intended to be used vs. other tools in the space (e.g. pry, byebug)? This kind of information makes it easy to figure out how it‚Äôs supposed to fit into my tool chain. 
Is any of your code open source/shareable? I'd love to see an example. 
Both tools you mention seem to be for interactive debugging? This debug\_helper is for printf (or print, or trace) debugging, per the first link: [https://en.wikipedia.org/wiki/Debugging#Techniques](https://en.wikipedia.org/wiki/Debugging#Techniques).
AFAIK no. Except that you can execute custom logic if you write the method yourself.
&gt; this means we‚Äôre going to have to type out this monstrosity every time we work with it in our code: &gt; ‚Äú/students/#{@student.id}/grades‚Äù &gt; The whole point of Rails is to have code magically be written for you. Eh, I don't know if I'd say that's the whole point of Rails. In this case, the point is actually not saving you keystrokes, the point is if you _change_ the route, but leave the path helper the same, all your code is still good and doing the right thing, you don't have the exact URL hard-coded all over your code, because it's subject to change. Which is still a good point. 
So that ends up outputting a whole lot of the JSON data, but at the very end of the it I'm seeing this: "total_documents"=&gt;3311, "total_pages"=&gt;100, "per_page"=&gt;10, "current_page"=&gt;1} Now, I'm not great at math, but **100 pages at 10 results per page would be 1000** results, but it says **3311** total. Now the real kicker is that when I'm in rightsignature, it says we have a total of **12974** documents. 
You'd have to contact Rightsignature, maybe their api has a bug, maybe there's a newer api etc
I am coming up with an article with sample code on different techniques I‚Äôve learned using form objects but I‚Äôm gonna have to split it up, will update you when it‚Äôs done along. I did post an answer on SO with an example of how a form object can be used (in this case a query object but the techniques are the same): https://stackoverflow.com/questions/46488932/rails-where-query-chain-with-or-for-array-input/46489540#46489540
Awesome. You've seriously been such a big help - thank you! 
For a quick and dirty fix you can change the https to http in your gemfile, if i remember correctly. There is a better solution, I'll see if i can find it once I'm on a pc.
Awesome, looking forward to it! 
Any joy in pulling this together?
Thanks, modnar42. I have updated the beginning of the README. See whether you think \[this\]([https://github.com/BurdetteLamar/debug\_helper#debug-helper](https://github.com/BurdetteLamar/debug_helper#debug-helper)) is better.
Hi!, RubyGems developer here. You want to checkout our \[SSL troubleshooting guide\]([https://bundler.io/v1.16/guides/rubygems\_tls\_ssl\_troubleshooting\_guide.html](https://bundler.io/v1.16/guides/rubygems_tls_ssl_troubleshooting_guide.html)) which will help solve your problem.
I don't believe Reddit didn't tell you the same link was already posted 3 weeks ago: https://www.reddit.com/r/ruby/comments/8p0xhp/hidden_jewels_of_ruby_stdlib_drb_optionparser/
Some might say that the resulting decoupling is a good outcome in itself, or that this is a nice means to achieve contextual composition because details now depend on abstractions, but to me the greatest benefit is that behaviours are now named rather than implied. The extreme form of DI seen in IoC containers is however an anti-pattern IMO. 
That‚Äôs perfect. Thanks for contributing to the ruby community!
http://shoesrb.com - I haven't tried it but heard good things about it. Also there is a nice list here - https://www.ruby-toolbox.com/categories/GUI_Frameworks
Shoes is the standard one, but like many of the GUIs I found, it requires JRuby as it uses the JDK to render platform-agnostic UI. If you don't use JRuby there's something called Flammarion, which is a gem that uses Chrome to render GUIs in HTML (but exposes a "nice" API). Anyway, /u/tony-sunny's list is a great starting point and contains links to Shoes and Flammarion. Personally, I couldn't find a really "good" Ruby GUI, so I've started writing my own in C++ (using something called Dear ImGui), and using sockets to "talk" between Ruby and the "UI Server". It works pretty well (and you can write a library in any language that supports sockets to talk to it), but it wouldn't be ready to release to the wild quite yet unfortunately.
Is Flammarion offline?
Depends on what kind of GUI you need, but I've found "FXRuby":https://www.ruby-toolbox.com/projects/fxruby to be suitable for most projects. 
Looking for a sort of tkinter style type of thing
Practical Object Oriented Design in Ruby - Sandi Metz Design Patterns: Elements of Reusable Object Oriented Software - Kevin Zhang (not Ruby specific, but worth a read) Rails, novice to ninja - Goodrich and Lenz
In that it runs without an Internet connection? Yup. The only caveat is that do need to have Chrome installed on the target machine (in some cases it can use a built-in Electron browser, but I found it often chose not to!)
Alright I'll check it out
Like the ideaüëç One thing that came into my mind: it would be great to have a shorter syntax. For example: ```ruby putd obj, ‚Äúdebug msg‚Äù ``` So, it‚Äôs just like `puts`. Yes, monkey-patching, but in this case it seems reasonable. And it‚Äôs always possible to make this syntax optional.
A well-written post. I tend to think that Ruby should go for maximum breakage in 3.0 and do this and other things right, without compromise. But I'd understand a reluctance to do that given the experience of Python 3.
GTK?
Overall good article and explanation. Kind of just confirms I have no reason to every use AND and OR. The neat tricks above are less intuitive and harder to read than a begin rescue block, and the ‚Äúand next‚Äù doesn‚Äôt read as well as ‚Äúnext if‚Äù. 
Thanks, palkan. I'll think on it.
It did not, and it got more up votes this time, so I guess it was worth the repost! 
This is exactly what I‚Äôm working on now as well. I‚Äôm using the Chromium Embedded Framework to make a very lightweight browser window, and then using web sockets to communicate back and forth. My aim is to eventually distribute whatever apps I end up making with it, but I‚Äôm hung up on how the user basically has to run both the Ruby interpreter and the Chromium executable. Do you know of any decent solutions for that particular problem?
Reposts suck twice as much when they get more upvotes by just having luck to be posted in better time of the day or anything. I still don't believe you've encountered a bug.
Palkan, could be a mix-in (module), not a monkey patch?
This works: module Putd def putd(obj, name) DebugHelper.show(obj, name) end end
I always liked ‚Äòrender ‚Äú...‚Äù and return‚Äô in a rails controller but it‚Äôs too clever so I try best not to. 
Shoes requires jruby now? Last time I used it is was using pure C extensions. What happened?
Yeah, definitely, if you're on Rails then ActiveModel validations probably make more sense, as you're already used to them from ActiveRecord. My point was just illustrating the approach of separating validations &amp; coercion of request parameters (coming from an HTML form or a JSON request) from the ORM model instance. Whether you're using ActiveModel::Model, dry-validation, or Scrivener, it's basically the same thing. Reform is different, as it expects to be initialized with the model instance to which it will delegate stuff. I just found that approach adds more overhead to my thinking than having it separated.
not enough information. what state is required? is thread safety an issue? My tendancy is that anything that requires reading or writing state should be at the instance level. If a method is just a function applied to its arguments, I will consider a class method, but if one of those arguments is an instance of the class, then it should just be an instance method.
Great article. I often use the cook_dinner() or raise(RuntimeError, "Not in the mood.") idiom, as it emphasizes `cook_dinner()` to the reader and puts the `raise` as a secondary thing, and I still get to keep both on the same line. The [And/Or RubyTapas](https://www.rubytapas.com/2013/08/15/episode-125-and-or/) first introduced to me the use cases in which `and`/`or` are a better fit, and since then I learned to embrace both.
I myself started with poignant guide to ruby.. Best is I guess pick a project, get yourself familiar with gems, structure, commonly used stuff and so on..
Yeah, having a mixin is also a good idea. If someone wants to make it _global_ it's possible to do this: ``` BasicObject.include(DebugHelper::Putd) ``` And I think it make sense to add this monkey-patching example to the Readme. Another option is make it possible to activate this monkey-patch with a custom `require` declaration: ``` require "debug_helper/global" # and then in Gemfile gem "debug_helper", require: "debug_helper/global" ``` So, both monkey-patching haters and non-haters would be happy) I believe, that a debugging tool should be as easy to use as possible; thus making it possible to just add gem to a Gemfile and use `putd` anywhere, IMO, provides the best UX.
This really resonates with me. I personally think this is very clever, and allows for very expressive syntax. But it's absolutely unintuitive until you've taken a moment to understand it. Ruby is filled with this kind of stuff when coming from other certain languages... and it's really fantastic. Poetry mode and `&amp;:` come to mind immediately. But a guy I work with won't touch Ruby because of all of this "unpredictable implicit nonsense bs". This is the exact kind of thing that he would definitely say, "I'm out." to.
I guess the question is if the validation object _just_ does validation, all it can do is take the parameters (directly from parameters, with no model involved?) and return a "yes or no valid" answer -- or if it's also responsible for them persisting the data to the db. And if it's also responsible for providing the validation error messages to the UI. And if so, if it's also responsible for providing the _values_ to the UI when editing an already persisted object, or re-displaying a form with validation errors. And if it's resonsible for more than "valid yes or no", how it does these things, with a developer API that doens't make you crazy. So... I understand your point, but the devil is in the details. Is why I'm super interested in seeing code examples of what people are actually doing in real live code, and liking. 
1) Antipatterns in Rails (Ruby ON Rails.. Still Ruby though) 2) Refactoring Ruby 3) Ruby Science (Thoughtbot)
Useless and harmful thing. There were years before this guide, years when Rubyists cared about risks of starting using bad practices -- everyone had patience and respect but then some kid said "hey, let me tell you how to write every single character of your code" and the hell began among unexperienced masses who did not realise how much the guide sucked. So much unnecessary work were added and so many bugs were made during years after people started using this "guide" that was compiled from random rules that were not carefully tested. All the rules were rewritten to opposite, then back, now every rule is "you can write A, also you can write B, also C, whatever" that has no point at all. If you want a good style, use the one Seattle guys use -- I came up with the same one independently and then was happy to discover their code and that the world is not all that stupid to use bbatsov's guide.
I guess the question is if the validation object just does validation, all it can do is take the parameters (directly from parameters, with no model involved?) and return a "yes or no valid" answer -- or if it's also responsible for then persisting the data to the db. Yes, all it does is validation, you're then required to retrieve the validated/whitelisted parameters and create a DB record with them. Scrivener can also transform parameters to match the record columns, which is nice. &gt; And if it's also responsible for providing the validation error messages to the UI. You can use ActiveModel/dry-validation/Scrivener to set validation messages. Our JSON API simply returned `not_found`, `invalid_format`, `not_unique` etc. identifiers for validation errors, and then the frontend transformed those identifiers into sentences. &gt; And if so, if it's also responsible for providing the values to the UI when editing an already persisted object, or re-displaying a form with validation errors. Yeah, we didn't have to deal with that since it was a JSON API. In the earlier Rails days you would have to define certain methods on the form object to have it accepted by the Rails' form builder and SimpleForm. But nowadays it's easy as you can just include `ActiveModel::Model` to have your form object quack the way Rails' form builder expects (that's my understanding at least). &gt; And if it's resonsible for more than "valid yes or no", how it does these things, with a developer API that doens't make you crazy with lots of duplicated boilerplate. I'm not sure what you mean here. No validator library should only be able to "yes or no", it should also provide the list of validation error messages. I'm not sure where this would lead to lots of duplicated boilerplate.
I've tried to write idiomatic go code and ended up with nearly 20% of my code on 2000 lines being a variant of if err != nil { return nil, err } because I *had* to pass errors between components instead of "dealing" with them on the spot (it seems for most go users to mean to log it). Not to mention all the ways in which the code is harder to follow because you can't easily create abstractions with types while keeping the static type-checking. I've also ended up with an architecture very similar to what you'd do with erlang but without the benefits of the OTP framework. Never again but for simple command line tools and simple daemons without much logic in them. I've learned ruby after learning go and it's much nicer for building abstractions and managing exceptions.
Not too sure - my current solution requires the user running the UI process manually first. You may want to look into Flammarion though, as what you're describing is exactly how that library works :)
Yup - as of Shoes 4 it's required JRuby, which is a shame IMO! Not sure if Shoes 3 is still maintained though actually...
In fact, this example is so discouraging. I just can't imagine writing golang after Ruby's beauty and expressiveness :|
For what it's worth, I don't need to maintain my go code too much or worry about swallowed errors (though some people who publish libraries fail to return or cause a panic with all of them). A recent example with ruby: I wanted to keep things simple and use a few threads for a websocket client that needed to stay on all the time and manage errors gracefully. I tried `websocket-client-simple` but found that it didn't bubble up errors during handshake and just hanged for any other HTTP status than 101, and used a *ton* of CPU. It turns out it gets *one character at a time* from the underlying socket instead of taking batches of bytes to create a frame! It was easy to rewrite though thanks to websocket-ruby, but I don't know if I would have had the courage to rewrite [gorilla/websocket](https://github.com/gorilla/websocket).
Oh, error handling was the most discouraging point for me as well. I still don't understand companies, who claim that they completely rewrote all their Ruby-based microservices to Golang. Btw, I find it is nice for small things like Lambda functions, where you even don't have a dozen code files. I also can imagine having some microservices purely written in Go.
What do you mean by a 'page edit'? An edit of what page? Where?
Well I didn't post anything because I wasn't sure you guys would be alright with it. Want to make sure that I'm not breaking any sub rules (which I couldn't find) or such. I'll update then.
Yeah I know why you didn't post anything - that bit wasn't clear. But I still don't know what you mean by editing pages. You don't edit 'pages' in Ruby. What do you mean?
My website has a .liquid My resume nformation is that it's written in Ruby, am I wrong?
I've updated the post description with a link.
Oh so you mean a web page template - you didn‚Äôt really provide any context at all.
I am sorry.... I've had my head around the page all day and wasn't thinking enough when posting. Let me update.
Glad you like it :)
(unrelated note: `subsets_helper(power_set=[], nums, temp_nums=[], 0)` probably isn't doing what you think. This looks more like a Python call than Ruby. Ruby keyword arguments [have a different syntax](https://ruby-doc.org/core-2.5.1/doc/syntax/methods_rdoc.html#label-Keyword+Arguments)) You're passing object references around as arguments, and then mutating them. This isn't a pattern you want to be using in Ruby if you can help it. For example, when you do `temp_nums.pop` in your `else`, that pop also mutates the `power_set` array, as `temp_nums` has been inserted into it. This is probably not what you want, and is probably at root of the problem you're talking about. Here are a couple of other ways to approach this: # Iterative arr = [1, 2, 3, 4, 5, 6] iterative_result = arr.each.with_object([arr]).with_index do |num_acc, idx| num, accumulator = num_acc accumulator.concat(arr.combination(idx).to_a) end puts "Iterative result: #{iterative_result.sort}" # Recursive def subsets(nums) result = [] result &lt;&lt; nums nums.each.with_index do |num, idx| trimmed = nums.reject.with_index { |num, trim_idx| trim_idx == idx } # do not mutate nums result.concat subsets(trimmed) end # uniq because subpieces can boil down to duplicate results. # We could also just convert to a Set instead. result.uniq end recursive_result = subsets(arr) puts "Recursive result: #{recursive_result.sort}" pp "difference of iterative and recursive sets: #{iterative_result - recursive_result}" 
Thanks for your detailed answer--it was helpful. My application has a similar structure (simplified a bit): . ‚îú‚îÄ‚îÄ Gemfile ‚îú‚îÄ‚îÄ Gemfile.lock ‚îú‚îÄ‚îÄ app ‚îÇ ‚îú‚îÄ‚îÄ controllers ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ application_controller.rb ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ home_controller.rb ‚îÇ ‚îî‚îÄ‚îÄ helpers ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ application_helper.rb ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ home_helper.rb ‚îÇ ‚îî‚îÄ‚îÄ views ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ errors ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 403.erb ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 404.erb ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ home ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ index.erb ‚îÇ ‚îî‚îÄ‚îÄ layout.erb ‚îî‚îÄ‚îÄ config.ru `Gemfile`: source 'https://rubygems.org' # require doesn't seem to work for 'sinatra/contrib' and 'sinatra/reloader' gem 'sinatra' #, require: ['sinatra/base','sinatra/contrib','sinatra/reloader'] `config.ru`: # causes an error with Sinatra::Reloader # require 'bundler' # Bundler.require :default require 'sinatra/base' require 'sinatra/contrib' require 'sinatra/reloader' require 'sinatra/flash' # ensure that the helpers are required before the controllers; eliminates if defined?(ApplicationHelper). Dir["./app/{helpers,controllers}/*.rb"].each{|file|require file} map('/') { run HomeController } `application_controller.rb`: class ApplicationController &lt; Sinatra::Base helpers ApplicationHelper if defined?(ApplicationHelper) # set folder for templates to ../views, but make the path absolute set :views, File.expand_path('../../views', __FILE__) configure :development do register Sinatra::Reloader end error 403 do title 'Forbidden' erb :'errors/403' end error 404 do title 'Not Found' erb :'errors/404' end end home\_controller.rb: class HomeController &lt; ApplicationController helpers HomeHelper if defined?(HomeHelper) get '/' do erb :'home/index' end end Questions and observations: * There seems to be some redundancy in your `app.rb` and `ApplicationController`. Is this intentional? * I kept the `if defined?` in case I forgot to create the associated `_helper.rb` file * I noticed that if I use the `require 'bundler'` and `Bundler.require :default` lines, I get errors with `Sinatra::Reloader`. Have you experienced this? * I have not had success in getting `require` to work in the `Gemfile` as you've used it. Shouldn't it work with `sinatra/contrib` and `sinatr/reloader` too?
&gt; subsets_helper(power_set=[], nums, temp_nums=[], 0) This is just setting default values, i thought this was pretty standard ruby #ruby 2.3.1 def subsets_helper(power_set, nums, temp_nums, count) puts "power_set: #{power_set}, nums: #{nums}, temp_nums: #{temp_nums}, count: #{count}" end def foo nums = 10 subsets_helper(power_set=[], nums, temp_nums=[], 0) end foo #=&gt; power_set: [], nums: 10, temp_nums: [], count: 0 
So aliases and git hooks but in a Ruby program? 
#pop mutating the power_set array makes sense
not when calling a method. this is how you do it for method declarations.
step through it with a debugger. why does power_set completely change every recursion?
A part of it, yes. But git-god (in terms of aliases) allows you to have a configuration per project, having commands behave in a different way depending on this configuration and making it more powerful. Then again, if you have any suggestions/ideas on what you would add to a script like this, do let me know.
Each project? Git does that you have a config per project in `.git/config` maybe this helps people who aren't comfortable with Git but overall to me it obscures too much away. 
Gotta say I didn't know about that config per project, but, as I have explained in my previous comment, this configuration is not only about aliases and hooks, but about extra functionality such as logging, issues/comitting in faster/cleaner ways.
This refactor solved the issue, which was the issue with pop. To get around the pass by reference, I just reassigned temp_nums each time. So power_set can bubble up as its always pass by reference. def subsets(nums) count = 0 temp_nums = [] power_set = [] subsets_helper(nums,count,temp_nums,power_set) end def subsets_helper(nums,count,temp_nums,power_set) if count == nums.length power_set &lt;&lt; temp_nums else temp_nums += [nums[count]] subsets_helper(nums,count+1,temp_nums,power_set) temp_nums = temp_nums[0...-1] subsets_helper(nums,count+1,temp_nums,power_set) end end p subsets([1,2,3]) # [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []]
&gt; `temp_nums += [nums[count]]` This line also creates a new copy of temp_nums. Good job getting it working! 
Have you tried GTK? [https://iridakos.com/tutorials/2018/01/25/creating-a-gtk-todo-application-with-ruby.html](https://iridakos.com/tutorials/2018/01/25/creating-a-gtk-todo-application-with-ruby.html)
Lots of coffee
I pretty much recommend Practical Object Oriented Design in Ruby - Sandi Metz
No, that's not Ruby.
Oh well...that's just great. What is it, can you tell? I've tried to find out before posting it anywhere and this is the result I got.
It‚Äôs Liquid! Which is written in Ruby. Liquid is created by Shopify. https://shopify.github.io/liquid/basics/introduction/
So I'm not a complete idiot after all. Am I technically in the right place then? You guys have any idea about the code?
People could make some guesses but your best bet would be to talk to someone who knows how Liquid works. You could try /r/Shopify 
Here's a sneak peek of /r/shopify using the [top posts](https://np.reddit.com/r/shopify/top/?sort=top&amp;t=year) of the year! \#1: [Quick Tricks to Increase Shopify Sales](https://np.reddit.com/r/shopify/comments/7pdxl0/quick_tricks_to_increase_shopify_sales/) \#2: [I started thanking my Shopify customers and it changed my business](https://np.reddit.com/r/shopify/comments/79z0zr/i_started_thanking_my_shopify_customers_and_it/) \#3: [Yay! I made my first sale today that was not friends or family! Woo hooo!!!](https://np.reddit.com/r/shopify/comments/80gveo/yay_i_made_my_first_sale_today_that_was_not/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
I see. That of course makes absolute sense. Thank you.
Well, Reddit didn't tell me it had already been posted and I'm just pleased to have been able to share this and have more people read it since. That can only be good for the author and those that didn't get to read it the first time. Reddit isn't a game of who can score the most points, it is a way of sharing and discovering useful and interesting content. ¬Ø\\\_(„ÉÑ)\_/¬Ø
Yes, it's such a fantastic site. I'm going through it right now and honestly it's one of the best experiences I've had learning any language. Hopefully someone can get a hold of them.
According to the @rubymonk Twitter profile, the company behind it (C42 Engineering) was acquired by @gojektech. You could try asking them.
I've been using `git_remote_branch` for quite some time. It seems git-god could be a similar tool but more customizable :)
Let me know if I can help host it, could put it on Heroku?
What's the difference with : config.active_job.queue_adapter = :sidekiq In your application.rb ?
In general, I'd prefer class method. Because it's clear at the call-site where it comes from, and because it can't possibly effect or be effected by the state of the instance where the call happens if called as a class method (well, unless you pass the instance in as an arg, which this example isn't doing. I would not write a class method where an instance is passed in as an arg). So you know it's not coupled to anything else except it's args (in this case no args, great). I'd save module mix-in for places that really need it -- that use instance state, or call other instance methods. Module mix-in is essentially a form of multiple inheritance. Which can actually be great sometimes (Enumerable being the class example of something everybody likes), but should be used sparingly, because can also lead to a mess of inter-coupled code. If a method can easily be provided as a class "utility" method instead, I'd do so.
[removed]
I'm a simple man. I see /u/ioquatix, I upvote.
Thanks! If you have any questions about it let me know :)
Very cool, but went to dive into the code and it's super hard to read with those tabs unfortuantely.
Yeah github code formatting isn‚Äôt the best. I wish they‚Äôd fix it. In the mean time you can either check it out into your editor of choice or append &amp;ts=2 to the URL. Or whatever width you want. Now that I think about it I haven‚Äôt tried setting it to 200 :p
Its not really Github's fault. You are using tab's instead of spaces. Configure your editor to use spaces (2 for every tab). Rubocop can be your friend in this instance too :)
As others have mentioned, this isn't a good idea for production use. But it's great as a learning experience. The two things you probably want to start with are inverted indexes and n-gram indexes (google these). The former is really simple to implement, the later is also trivial to implement in a naive manor but you can do more interesting things with them like accepting minor spelling errors pretty easily. 
Side question: why put the license at the top of each file? Just wondering if there's some motivation I'm not aware of. Most people seem to add a LICENSE file and `spec.license = "MIT"` to the gemspec.
POODR. Not specifically about testing but can change the way you think about testing Ruby. 
A good book to read if you want to brush up on the basics of good Object Oriented programming in general. :)
Not in the Ruby sense. Collections tend to hold multiple Ruby objects. Ruby strings are one object. That said, Ruby strings do have methods such as `#each_char` which give you an Enumerable interface to the string. You can iterate through them, index specific bytes or characters out of them, etc. You can transform any enumerable into an Array, which would be a collection. For example: &gt; "foobar".each_char.to_a =&gt; ["f", "o", "o", "b", "a", "r"]
It depends on what you mean by collection... Its parent object is Object and it does extend Enumerable. You can explore the entire class definition here and #[] is implemented in String: https://ruby-doc.org/core-2.4.0/String.html#method-i-5B-5D
got it thank you
thank you. yeah was doing some testing and saw definition from Minitest assertions that included collections: `assert_includes(collection, obj)` and a string was referenced in an example for `collection` above, i guess what we are talking about is string can be worked on like a collection at least to degree. 
Hey, glad that I could be of help! I'll just respond to each of your questions individually ## Redudancy in app.rb and ApplicationController &gt;There seems to be some redundancy in your `app.rb` and `ApplicationController`. Is this intentional? It does seem a bit repetitive, but it's for a good reason. It isn't specified anywhere, but I think it's common convention for Sinatra applications to have a core/main application file that lies at the base of your application's directory. In this case, that file is `app.rb`. It normally contains all of the `require` directives and Sinatra settings, but in reality it can contain whatever you want (including routes, like you've done with the errors). So for example, a larger `app.rb` might look something [like this](https://github.com/simplatra/simplatra/blob/master/app.rb). But if you're calling your `require` directives for all of your controllers, helpers and other files at the top of this file (like was done in the file linked above), you'll need to make sure you `require 'app'` in your `config.ru`. Then I like to have the main `application_controller.rb` controller file only for managing routes, [like this](https://github.com/simplatra/simplatra/blob/master/app/controllers/application_controller.rb). Remember that this is actually just an extension (or reopening) of the `ApplicationController` class in `app.rb`, so all of the settings you make, or helpers you include, etc. in `app.rb` will be available in `application_controller.rb`. This actually seems very similar to what you've done, just imagine moving your `application_controller.rb` file to the base of your application's directory and getting rid of your `application_helper.rb` and you'll have exactly the same thing I have, since your `home_controller.rb` seems to be taking care of the same routes that my `application_controller.rb` does. Your way actually seems cleaner and more intuitive, so I would keep it! ## Problems with sinatra/config, sinatra/reloader and Bundler.require Having a look at the `Gemfile` I posted: gem 'sinatra', require: 'sinatra/base' The reason why we can do this is because `base` is simply a file in the `sinatra` gem/library, [as you can see here](https://github.com/sinatra/sinatra/blob/master/lib/sinatra/base.rb). If you simply do `require 'sinatra'` at the top of your main application file, or your `config.ru`, you'll be requiring the entire Sinatra library. This isn't necessary when making the (modular) style of application you are, where your controllers are inheriting from `Sinatra::Base`. All we need for this is the `sinatra/base` file, so that's what the directive in the `Gemfile` will require for us. As for why we can't do the same for `sinatra/contrib`, this is because the [`Sinatra::Contrib` project](http://sinatrarb.com/contrib/) is not a part of the `sinatra` gem/library (although it actually is, but it's easier to treat it separately), and instead is a separate gem, `sinatra-contrib`, an external library consisting of extensions to Sinatra. As for `sinatra/reloader`, it actually turns out that it is one of the many extensions offered by `sinatra-contrib` gem, with its own file (located within the `lib` folder at [`sinatra/reloader`](https://github.com/sinatra/sinatra/blob/1b0edc0aeaaf4839cadfcec1b21da86e6af1d4c0/sinatra-contrib/lib/sinatra/reloader.rb)) within the `sinatra-contrib` library, meaning you can do something similar to what we did with `sinatra/base`: gem 'sinatra', require: 'sinatra/base' gem 'sinatra-contrib', require: 'sinatra/reloader' This avoids having to require the whole `sinatra-contrib` library, since all you need is the `sinatra/reloader` extension. If you wanted to use [other extensions offered by `sinatra-contrib`](http://sinatrarb.com/contrib/) such as [`sinatra/namespace`](http://sinatrarb.com/contrib/namespace) or [`sinatra/custom_logger`](http://sinatrarb.com/contrib/custom_logger), then you can do that by giving a list for the `require` directive similar to how you did, and it will only require those files from `sinatra-contrib`: gem 'sinatra', require: 'sinatra/base' gem 'sinatra-contrib', require: ['sinatra/reloader','sinatra/namespace','sinatra/custom_logger'] Sorry for the super long response, but hope it answered everything!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [simplatra/simplatra/.../**application_controller.rb** (master ‚Üí e1c9bbe)](https://github.com/simplatra/simplatra/blob/e1c9bbe2d50d2777e0ea1449a6024fbaeffb04e9/app/controllers/application_controller.rb) * [simplatra/simplatra/.../**app.rb** (master ‚Üí e1c9bbe)](https://github.com/simplatra/simplatra/blob/e1c9bbe2d50d2777e0ea1449a6024fbaeffb04e9/app.rb) * [sinatra/sinatra/.../**base.rb** (master ‚Üí 180158b)](https://github.com/sinatra/sinatra/blob/180158b725b8a964711ef8bdb3c8cbaf53d2e6a3/lib/sinatra/base.rb) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e1ofmq4.)
Ruby doesn't have 'collections', I'm guessing you're coming from Java given the terminology? In Ruby, `[]` is just a method, they can be implemented by any class (even your own) and can do whatever you want it to. e.g it provides index access in `String` and element access in `Hash`. An object that can be iterated, which is probably as close to a Java collection as you'll find in Ruby is an `Enumerable`, anything that implements an `each` method can be turned into an `Enumerable` trivially in Ruby. 
I like this article. It's not about testing in Ruby but about testing in general: http://blog.codepipes.com/testing/software-testing-antipatterns.html. I strongly believe that every self-respecting developer should be aware of the topics highlighted in the article.
`assert_includes(collection, obj)` is shorthand for `assert collection.include?(obj)`, so it can be used on anything that responds to the `include?` method, eg. [Arrays](https://ruby-doc.org/core-2.5.1/Array.html#method-i-include-3F), [Hashes](https://ruby-doc.org/core-2.5.1/Hash.html#method-i-include-3F) and [Strings](https://ruby-doc.org/core-2.5.1/String.html#method-i-include-3F)
The only bug/problem I've run into using this to process ~20,000 records and write them to `.yml` (hence the buffered writes instead of just appending) is gracefully unsubscribing. For whatever reason, the method mentioned in the docs and the (few) examples online I could find (`redis.unsubscribe`) would just throw a bunch of errors anytime it's called. So, a quick work around to get each forked process to cleanly exit was to just create a new error `class Unsubscribed &lt; StandardError; end` and when a process is finished (the previous process in the chain will publish a message that just contains `"exit"` before itself will exit) I throw that error and then catch and do any cleanup (like in the write process flush the buffer so any unwritten data will write): fork do begin redis.subscribe(:write) do |on| on.message do |channel, message| throw Unsubscribed if message == "exit" buffer &lt;&lt; Oj.load(message) end end rescue Unsubscribed buffer.flush! end end
Huh, have you reported that as an issue to ruby-concurrent? If not, please do, for all of us! 
I'm not sure if there's any specified definition of "collection type", in what context are you asking, for what purposes?
Not yet, I actually just finished up working on that script, so I was waiting to play around with it some more to make sure it wasn't just some mistake on my part. Will probably submit an issue sometime tonight actually now that I'm thinking about it and have (mostly) confirmed it isn't something I'm doing wrong.
When you set `config.active_job.queue_adapter = :sidekiq` that tells ActiveJob that you want to use sidekiq instead of the default (or other) queue options. This means you can use all the normal ActiveJob api's like inheriting from `ActiveJob::Base` and those jobs will then be run through sidekiq. However, you can use sidekiq without using ActiveJob at all (like they are in the OP). The main differences you'll notice is that job classes will `include Sidekiq::Worker` instead of inheriting from `ActiveJob::Base` and queue config being set with `sidekiq_options` instead of `queue_as`. This will also result in having to use a different API to queue jobs (sidekiq's instead of ActiveJob's) so you'll use `Job.perform_async` instead of `Job.perform_later`. You can read more about what using the ActiveJob adapter gets you as well it's limitations in the [Sidekiq docs regarding using the ActiveJob adapter](https://github.com/mperham/sidekiq/wiki/Active-Job).
I made this decision a long time ago, based on a couple of things. - I asked in the FSF IRC about it and got the advice that it was a good idea. - It's what most major open source projects do, e.g. Linux. - Having per-file copyright/license removes any ambiguity. - It allows specific files to be under multiple licenses if required. - Each file lists major copyright holders clearly and unambiguously. I apply this logic across a large number of projects. However, in some projects [I don't include the full license](https://github.com/kurocha/buffers/blob/5682a350506d62ad8eaebd6d106684a6e1a57caf/source/Buffers/Buffer.hpp#L3). In some situations like new projects which have a single license and a single major copyright holder, all this information could be considered irrelevant, I still think it's good for consistency. Maybe I'll switch to copyright + short license clause for my Ruby code too. If I do this I'll probably write a script to do it across every project at once. As an example of where things like this cause problems, take a look at Xapian. They want to relicense under the BSD/MIT license, but they can't because they don't have a list of copyright holders for the source code. They also don't know on a per-file basis which files need to be "re-engineered". So, a small amount of up-front "documentation" sometimes saves a world of pain.
If you do really care about this, then check out https://www.codeotaku.com/journal/2017-01/jquery-syntax/index Even if you don't care for the implementation, at least it shows that it's possible to present code in a way that's much more practical than how GitHub currently works. As an example, I find it impossible to read code on GitHub via a mobile phone, because it doesn't implement any kind of decent soft wrapping. `jQuery.Syntax` also dynamically adjusts the tab width based on the browser width so that on a mobile phone you can use 2 (or even 1) width indentation, but on a desktop it often uses 4 width indentation. I personally think that's a fantastics way to present readable code on both desktop and mobile, and I get kind of frustrated when I have to scroll horizontally to read each line of code.
Wait, I'm confused. I thought we were talking about [channels in ruby-concurrent](https://github.com/ruby-concurrency/concurrent-ruby/blob/master/doc/channel.md)? At any rate, that's the thing I'm interested in a report-back on after some real use! &gt; Oh wow, I really like that channel implementation. Was actually looking at concurrent-ruby the other day and must've completely skipped over it because it was in edge 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ruby-concurrency/concurrent-ruby/.../**channel.md** (master ‚Üí 0ee31d0)](https://github.com/ruby-concurrency/concurrent-ruby/blob/0ee31d0d2a7f144471578fb0e95a25e436ec48f5/doc/channel.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e1orjqm.)
Won't that leave it unsecured though?
your code is using `add_resource` as a singular.
Thanks for the advice, man.
I was just making a remark that I like the implementation, because for what I was trying to accomplish the CSP concurrency model (or similar) was exactly what I was looking for. However, using channels wouldn‚Äôt alleviate the issue of my task (read: ruby) eating a ton of memory and eventually crashing. Though now that I think about it, it could work as the objects could probably be garbage collected sooner if I went that route. So, I figured I‚Äôd then mention my poor mans CSP -like implementation that utilized `fork` and `redis pub/sub` that I ended up going with as a possible alternative for those already familiar with redis that maybe don‚Äôt want to have to add concurrent-ruby as a dependency. Which worked well given immediately started offloading things to `redis` when I first realized the task was going to eat memory faster than an poorly written electron app. The main memory eating culprit is the ‚Äúprimary key‚Äù registry I use, given my application uses `uuids`, I initially was storing the production id of a record and the newly generated corresponding dev seed id in a regular ruby hash so that when I transform/anonymize the other attributes, the primary keys &amp; foreign keys will still be valid. So, the first thing I did was put that into redis (just using the basic `get/set`). I imagine if I leave the registry in redis, that I could swap the pub/sub bits with channels and it will actually work without crashing. But, it works now, so no need to fuss with it, and it gave me a reason to play with redis pub/sub (which is what ActionCable is built on). Though, I definitely can see myself reaching for concurrent-ruby channels in the future, as I really like the CSP concurrency model for things like data processing, which Ruby is unfortunately not the best at.
ah cool ty
I was thinking collecting it was a collection due to someone i saw in testing for `assert_includes` in minitest. but technically it isn't, others have gone on to explain it detail for me here though fortunately. ty!
Oh, no, just in our material we call them collections, and I'm only studying Ruby. ty.
I've actually tried this guide a couple times but always ran into problems, specifically the error message I receive on the first step of the solutions is different from the two options provided: $ ruby -ropen-uri -e 'eval open("https://git.io/vQhWq").read' C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/net/http.rb:923:in `connect': SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL::SSL::SSLError) from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/net/http.rb:923:in `block in connect' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/timeout.rb:73:in `timeout' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/net/http.rb:923:in `connect' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/net/http.rb:863:in `do_start' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/net/http.rb:852:in `start' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:318:in `open_http' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:736:in `buffer_open' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:211:in `block in open_loop' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:209:in `catch' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:209:in `open_loop' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:150:in `open_uri' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:716:in `open' from C:/RailsInstaller/Ruby2.2.0/lib/ruby/2.2.0/open- uri.rb:34:in `open'
Forgot to mention it also doesn't let me install gem install bundler as it says it can't find it in the repository.
Ruby that looks like PHP. üëå But you know, we are all little snowflakes. 
How is the pragmatic programming rspec book - i have it but haven't had time to get into it
I‚Äôve tried VSC and while it‚Äôs not bad, I don‚Äôt think it‚Äôs all that great. I‚Äôm a big fan of RubyMine and Sublime Text. Atom is also really good. I think it‚Äôs all just personal preference. It‚Äôs nice we have so many choices for quality editors. Speaking of editors, do any of the currently popular ones have the autocomplete the way TextMate did it? It was simple and a lot of completions were included. I have Emmet in RubyMine but it‚Äôs just HTML stuff I think. 
You know what, I think Flammarion is where I got the idea initially. I had an ‚Äúa-ha‚Äù moment; I was trying to find a way to use PIXI.JS with a Ruby logic underpinning and I remember coming across Flammarion using websockets. I started rolling my own solution because I wanted to better understand websockets and I just forgot that Flammarion is where I lifted the idea. 
link to the "Seattle guys" style guide, please?
Things i do with turbolinks: Delete it.
Honestly, you can make your page fast enough without it, using traditional web techniques that don't break every 3rd party library and framework.
Probably there is no such article. Because they don't want to tell you how to code. Just observe their code here https://github.com/seattlerb and make your choices. The most obvious difference of their style from the popular style is omiting as many parentheses, brackets and characters of code as possible -- Matz made it possible not just for lulz.
The Ruby Solargraph extension provides some of the Ruby auto completion. It is helpful but not always on target. I think RubyMine still wins in this area.
I embraced Turbolinks in a few of my rails projects a few months back, these were pretty simple apps (think CRUD back office) but I ended up quite liking it. Honestly, I don't fully understand where the hate for Turbolinks comes from :/ 
In your situation it might be a good idea for speeding up page loads. As a drop-in plugin for a CRUD app with little to no Javascript running in the page. It's an option for easy performance improvements. It's not *hate* for it, that is too strong of a word for a tool with a specific purpose. There are other ways to improve page load times without breaking other javascript, including Rails very own ujs. While special considerations are needed of most library decisions in the browser, Turbolinks has particularly shown itself to need special integration in most cases. It's an architecture choice, and one that will usually end up causing problems as the UI gets more complex, or avoiding javascript programming as much as possible in favor of using Turbolinks to render everything in Rails.
And I was thinking who is [/u/ioquatix](https://www.reddit.com/u/ioquatix) that got [/u/nateberkopec](https://www.reddit.com/user/nateberkopec) upvote. Turns out it was the crazy guy that wrote assembly to speed up Ruby Fibres.
Great work
I haven't read it in a long time but I found it useful when I was first getting started with RSpec.
TDD book by Kent Beck is worth a look. 
It is good to remember that `Enumerator` exists. It is not clear to me how this is better than simply putting a rescue inside the `each`. I guess, as the OP says, it does let you "handle it on the console", and do other things interactively in a repl more easily. 
this is [source](http://blog.bitwrangler.com/2018/03/11/resumable-iterators.html) P.S. next time remove twitter link : )
"I'll make my own GIT interface with ruby and hookers."
Thanks! :)
Turbolinks of versions past wasn't that great. The latest version, along with turbolinks-ios and turbolinks-android, are easy to implement and work great. If you still think turbolinks is junk but haven't tried the latest version, you're missing out.
Shopify-ers: What's the analytics stack like?
Analytics as in Google Analytics &amp; such, or as in data-science etc?
Shopifier here. I'd be happy to answer questions people might have. Especially if they are about CI &amp; CD since it's my specialty.
Do you use rubymotion for Shopifiy mobile app ? If not, why ? And what do you use instead ?
How do you like buildkite? We use ChefAutomate for out Chef stuff, And I'd like to use it more, but for doing non-chef things there really isn't the community/support... I've been looking at buildkite, circleci, and concourse (but YAML... yuck) as a replacement for Automate and Jenkins (I hate Groovy...). What I love about Automate is all the jobs are Ruby...
I'm not working on our mobile apps, so I only have shallow knowledge of our mobile stack. But from what I know they use the standard stack for each platform, Java on Android, Cocoa on iOS. I don't know if RubyMotion was evaluated at some point, maybe. I know we experimented with React Native a while ago, but were not really satisfied with the quality of the resulting apps, so we went back to native apps. More broadly, and kinda my personal opinion / personal understanding of our technical choices on that matter: we do love Ruby as an organization, but not to the point of using it where it doesn't have a clear advantages over the more commonly used ones. In the specific case of RubyMotion, we have many mobile developers, and frequently hire new people, so it's much simpler to stick with industry standards so they have transferable skills, than to pick a less known / less used technology. In a similar way, our data science stack uses Python rather than Ruby, because that's what most data-scientists uses, so they are much easier to hire and train.
Buildkite is absolutely awesome. My main job is actually to maintain our CI infra which is based on Buildkite. What's great about it for us: - It support huge parallelism, the screenshot in the article is truncated, but we actually run builds with 400 parallel jobs. - You bring your own hardware, which allow us to save tons of money as well as to run our test on much more beefy servers and without having to deal with noisy neighbours. - It's is extremely customizable, you can entirely replace logic that actually runs your jobs (git clone, run test command etc), which we did to great extend to provide lots of goodies on top of vanilla Buildkite. &gt; What I love about Automate is all the jobs are Ruby... I don't really have skin in the game, so I'd say go with what works best for you. But if I had an advice to give it would be not to focus too much on the job definition syntax. You only occasionally edit it, whereas every single commit you push will trigger a run. So if I was you I'd look more at performance and reliability than syntactic concerns.
The article mentions hundreds of apps. How many do you have to deploy to one of your pods to increase capacity?
Just one. A pod only contains one app and it's supporting datastores and services. All the hundreds of apps are deployed independently of each others, and do their own logical splitting. Also this only applies to big, customer facing apps, many of these hundreds of apps are either for internal use, or small enough that cascading failures are less of a worry so that a simpler failover setup is enough. 
&gt;Over the years, we moved from shards to the concept of "pods". A pod is a **fully isolated instance of Shopify** with its own datastores like MySQL, Redis, memcached. &gt; &gt; &gt; &gt;Am I correct to say "80K requests per second at peak" are all these pods combined? Do the "600K merchants" get a pod of its own? Or likely many small merchants share one pod and large merchants gets its own pod? 
Spam?
&gt; "80K requests per second at peak" are all these pods combined? Yes. &gt; many small merchants share one pod and large merchants gets its own pod? That's pretty much it, even though no merchant is really alone on a pod, even the biggest ones. We do move merchants from pod to pod from time to time to rebalance the load properly, because their size evolve over time and you can't predict it. So sometimes we might spawn a new pod because a merchant got really big, and we move them there. So they are alone for a bit, but then when new merchants sign up they join them in that new pod.
Interesting. I don't like JSON either... but it's tons more palpable than YAML. JSON is the worst, except for all the rest. :D At least it's not XML... Also, I agree about the job syntax, it's a new DSL regardless. But I enjoy Ruby and Groovy frustrates me, so job syntax that's Ruby is a nice bonus... Anyway, that's awesome, one of the problems we've run into is running numerous jobs in parallel. Weird things start to time out... How do you provision infrastructure? We essentially have two job types, "net new" and "long running". Net new is just build new servers/vms/containers, run smoke tests, etc. For the super important apps we do both, but that's where we'll maintain duplicate infrastructure to validate upgrade/downgrade processes. It's actually the tests where we're provisioning new infrastructure to run tests where we've had the most difficulty as it's really exposed our holes in automation. ANYWAY! Long story short, we use a lot of terraform to provision infrastructure.
How do you handle backups and high availability within these pods or are they more of a concept that encapsulates a pool of resources across data centers?
Can I use this to compile my jruby app to native? That... would be cool... 
&gt; Aren't you basically using a JIT to JIT? I always thought that JRuby doesn't do JIT, it's the underlying VM which does it. So in the normal case the JVM, in this case Graal.
If you want the full story, JRuby there's three or four levels of "JIT"s involved: our JITs from simple IR to full IR and from full IR to JVM bytecode, and then the JVM's various levels of JITs for JVM bytecode to native code. We have various modes to skip one or more of those levels, though. Why JRuby? * Concurrency - real parallel threads, where CRuby can only run one at once * Best garbage collectors in the world * Native JIT - usually better performance than CRuby. JRuby's the fastest way to run Rails right now, for example. * No C extensions - this is sometimes a hassle if you need a library from CRuby, but most extensions have JRuby equivalents that are made for the JVM, so they're memory-safe and part of the same heap. * Integration with other JVM languages - you can call them as if they were any old Ruby class.
Did you rewrite your backend Rails views to React? I'm still in doubt whether to use simple_form and table_for for the views in a large **backend** application, or to use react for frontend. I see the benefit of frontend components and jQuery seems to be on the way out. However, I love the simplicity of simple_form, and the small amount of code to make it work. Files like this ( https://github.com/mdeket/rails-reactjs-graphql/blob/master/client/movies_reactjs_apollo/src/components/NewMovie.js ) make me uncomfortable. I love Shopify by the way, it's a better solution for almost everyone than Spree/Solidus. Applications like Shopify is where Rails excels.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mdeket/rails-reactjs-graphql/.../**NewMovie.js** (master ‚Üí 2b32623)](https://github.com/mdeket/rails-reactjs-graphql/blob/2b326232b10b6a7de2a577b1613f8578c3b69ae6/client/movies_reactjs_apollo/src/components/NewMovie.js) ---- 
&gt; How do you provision infrastructure? Our buildkite cluster runs on GKE. We have an app that watches the workload, and add or removes nodes as needed.
&gt; How do you handle backups and high availability within these pods Each pod is replicated into another region and can be failed over at any moment. It's no different than a regular app. Conceptually pods are simple. It's just like having multiple deployments of your application.
Same disclaimer than before, I mostly work on our infrastructure so my knowledge of the fronted stack is shallow. But AFAIK, yes most of the view code moved to React. And we have server side rendering for those views.
Keep 'em coming ‚Äî the more analytic projects for Ruby, the better. Anyone used SciRuby for matrix math yet?
Concurrency and parallelism are two different things. 
There is error in example: `"A STRING".upcase # =&gt; "a string"` 
Also `content = File.open("my_file.rb") { |f| f.read }` could be simplified to `content = File.read('my_file.rb')`
Thanks. One more question. To me it seems you sprinkle different technologies here and there (especially on the infra side). How long do you spend on evaluating the stack you use and how proficient are people with the tooling ? It just seems too many moving and complex parts to be fully understood and utilized.
Thanks! Fixed now :)
Fixed that too. Thank you!
&gt; How long do you spend on evaluating the stack you use It really depends, but usually quite some times. &gt; how proficient are people with the tooling ? It just seems too many moving and complex parts to be fully understood and utilized. The thing is we're quite a big company now. So almost nobody has to understand the entire infra. That's what I tried to say about RubyMotion. It might have a competitive advantage if you are a small dev shop, and need your developers to do both mobile and backend work, but in our case people are mostly dedicated to mobile / backend / frontend / data / infra. You can submit changes to areas totally different to your main specialty if you want / need, but that's very rarely required. Hence why I know very little about our mobile &amp; frontend infra, because I mostly work on the backend one. Also we indeed use many moving and complex parts, but we don't just give access to it to everyone, we almost always encapsulate them in more high level and user oriented layers so that they are easily and consistently used by our developers without them needing to take a crash course. For example, if you need to create a new Rails app, by just going through a web interface and editing a couple YAML files using the documentation as a reference, you'll have a high quality production environment, a fast CI, continuous delivery setup, monitoring, etc
so what do folks here think? should all controllers delegate to operation/service/query objects? Should your services folder read like a full list of all responsibilities and capabilities of your app?
This is a fantastic write up. I‚Äôve been looking for something like this to share with some of the newer Ruby devs at work. Thank you!
Great stuff! Devs often complain about Java being boring and old-school, but it never ceases to amaze me how cool Java and Java-related techs are (JDK, JVM, GC etc.)! Literally, state of the art, almost alien technology. And it seems that more cool stuff is coming.
Thanks for the info. That is what I find troubling. Rails didn't "scale" to 80K RPS, but multiple instances of Rails did. This settles the debate of who had the largest monolithic Rails app, and that is Cookpad from Japan. \[1\] \[1\] [https://speakerdeck.com/a\_matsuda/the-recipe-for-the-worlds-largest-rails-monolith](https://speakerdeck.com/a_matsuda/the-recipe-for-the-worlds-largest-rails-monolith)
Service objects have their place but a subset of the Ruby community seems to use them like a golden hammer to compensate for poorly decomposed domain models and in support of some vain quest for overly anemic, almost router-like controllers. 
agree with you that services are not the place to hide domain logic and consequently finding oneself with [anemic domain models](https://en.m.wikipedia.org/wiki/Anemic_domain_model) but ‚Äòanemic controller‚Äô is not an anti pattern i‚Äôve heard of. it can be argued that a controller should only have a single responsibility: routing. 
**Anemic domain model** Anemic domain model is the use of a software domain model where the domain objects contain little or no business logic (validations, calculations, business rules etc.). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I basically agree with this. I don‚Äôt think of them as service objects per say, but just other classes with SRP mostly followed to keep the class small and easy to understand and test. Keeping controllers dumb and simple is something I definitely strive for. As with anything in programming though, there are always exceptions to the rule, and pragmatism trumps idealism. 
&gt; a controller should only have a single responsibility: routing. I would say most Rails apps violate that then as POSTs, PATCHes, PUTs and DELETEs usually have some side effect. Whatever the side effect is it doesn‚Äôt always need to be encapsulated in some intermediate object. Even if we‚Äôre not using Rails I‚Äôd be fine calling my repository from my controller sometimes. üëç
uh... yes obviously. That's called horizontal scaling, and the limiting factor that forces us to have many pods is actually MySQL, not Rails. Rails scale absolutely perfectly horizontally, since it's stateless. Give it enough hardware and it will scale linearly to infinity. Give us a big enough database server and we'll run 80kRPS on a single "Rails instance" (whatever that means). Also I couldn't care less about the "largest monolith" title, but I'm pretty sure that "largest" here mean largest codebase, not biggest amount of RPS. And I don't think we claim any of those.
Thx. That answered my question.
Yes, but he didn‚Äôt use the terms improperly. 
Ankane gets my vote for ruby hero this year. Guy has tons of awesome ruby libs to his name. 
I‚Äôm glad you found it useful. There are more on the way :)
Amen to that last sentence. 
Some time ago I discovered "request objects" (I have no idea if it is a commonly used name, but I guess it might be), where you use params as input (also sometime things extracted from the session, such as current_user), return data and only use controller to render the output. This way it's easy to test and you really decouple from the framework - it is easy to switch Rails as routing/HTTP layer to Grape, for example. Although you might argue they are not really service objects.
Worked with him at Instacart a few years back. The dude is prolific. Sometimes a little lacking in coverage, but always filling a niche and filling it well.
It's just bundler-audit hosted on the web? OK I guess. 
Absolutely. Controllers should invoke a service layer. A service layer can be (should be) a rich set of collaborating objects, just like our domain models are. The objects described in this article do not qualify as a "service layer". They could charitably be called command objects. In practice they are little more than functions, being an object with some bound variables and a single public method named `call`. I was not surprised to see mention of the `dry-rb` project, this is the kind of style I've seen associated with elsewhere, usually promoted as though it was some universal good. It isn't, it's actually terrible OO style. 
Controllers should invoke a service layer. A service layer can be (should be) a rich set of collaborating objects, just like our domain models are. The interface it exposes to controllers should read like the capabilities your app exposes to the world, only non-channel specific; the controller makes them web-specific. The objects described in this article do not qualify as a "service layer", neither in the Fowler nor the Evans sense. They could charitably be called command objects, but in practice they are little more than functions, closures at best, being an object with some bound variables and a single public method named `call`. I was not surprised to see mention of the `dry-rb` project, this is a pattern I've seen associated with it elsewhere, usually promoted as though it was some universal good. It isn't, it's actually terrible OO style for all but those limited cases where the command pattern makes sense. 
Actually, they are. That's much more like a service layer as intended in the Fowler or Evans sense. The objects presented in this article, which combine some bound variables with a single `call` method to invoke a procedure, are more like closures. I'm not keen on that. Application code that invokes `call` is a red flag to me. 
Done, and thanks.
It's not even a command object. The [command pattern](Command pattern) is a specific behaviour implementing a contract between the command, a receiver, an invoker and a client. 
We've composed our app with Interactors (service objects that model operations) and it has been wildly successful for us. We build up our domain objects, our controllers, and a vocabulary of re-usable, composable commands that our app can perform internally. We've found that testability, reusability, conceptual simplicity and other things have all been dramatically improved.
Praise be, praise be.
`textPositions = [` `[spiegazione2[0], 300, 30, 0, baseColor, shadowColor],` `[spiegazione2[1], 295, 50, 0, baseColor, shadowColor],` `[spiegazione2[2], 295, 70, 0, baseColor, shadowColor],` `[spiegazione2[3], 285, 90, 0, baseColor, shadowColor],` `[spiegazione2[4], 285, 110, 0, baseColor, shadowColor],` `[spiegazione2[5], 285, 130, 0, baseColor, shadowColor],` `[spiegazione2[6], 285, 150, 0, baseColor, shadowColor],` `[spiegazione2[7], 285, 170, 0, baseColor, shadowColor],` `[spiegazione2[8], 285, 190, 0, baseColor, shadowColor],` `[spiegazione2[9], 285, 210, 0, baseColor, shadowColor],` `[spiegazione2[10], 285, 230, 0, baseColor, shadowColor],` `[spiegazione2[11], 285, 250, 0, baseColor, shadowColor],` `[spiegazione2[12], 285, 270, 0, baseColor, shadowColor],` `[spiegazione2[13], 285, 290, 0, baseColor, shadowColor],` `[spiegazione2[14], 285, 310, 0, baseColor, shadowColor]` `]` `def get_lines(linesToShow)` `textPositions[0...linesToShow]` `end`
[removed]
Not specific to Ruby but worth checking out: http://xunitpatterns.com/
&gt; sender = ApiSender.new &gt; sender.call(data) Or even: `ApiSender.new.call(data)`
In Rails, your config in routes.rb does routing, not the controller, no?
For some code I was working on for a gem, I wanted to encapsulate something in a class for single-responsibility/separation-of-concerns (ie, to keep my code tidy), and I realized a 'private' class would be useful. So nobody would be tempted to think this class is public API in any way. So I googled how to do it and found this post. The `private_constant` method is not obvious, I don't think I've ever seen it before. So I re-posted the OP I found on google, even though this has been posted to /r/ruby before, 2 years ago. 
E-Commerce on Rails? This sub is supposed to be about Ruby.
If anyone is interested he may make a subreddit icon or propose something for sidebar so I won't just copypaste/edit the sidebar from here.
I totally agree with you
I like private classes since if you stick to "1 responsibility per class" they allow for some very clean code. If you combine with common accessors for return type (to_s, to_i, to_json, etc) its possible to end up with something that documents the internal type system (I avoid the term 'self-documenting'). The problem I've found is that most people are unfamiliar with it as a clean code technique and I've found it hard to encourage adoption and had opinions given that its 'not worth the effort' or 'that we should use modules instead'; somewhat missing the point but meh.
&gt; 0 points (38% upvoted) Downvoting already 0 points post just for the fact I started a subreddit? This clearly shows how toxic is the audience that want this subreddit to be half about Rails.
In this simple case, maybe. But you don't really want to: ApiSender.new(key: 'vdfavas', token: 'vcqa34c43cqc24s2').call(payload: data, version: 15, log: true, dismiss_exceptions: false)
It‚Äôs a pretty common pattern for method objects like service or query objects. I prefer FooClass.new.() :) 
It depends, but if you are not assigning to any variable `FooClass.new` then I prefer to declare `method_a` as class method for `FooClass` and call directly `FooClass.method_a`.
I concur, the pattern presented only makes sense with instance methods if arguments are passed to`initialize`
&gt; this looks kludgy and wasteful to me It is. It's procedural programming using objects for whatever reason. If `FooClass` is not a data object, but some kind of dependency, gateway, service object or another abstraction you also lose all benefits of dependency injection by mixing instantiation and usage.
I think you are wrong here. There's a lot of us who are here for Ruby, but it's inevitable to get Rails posts because of its popularity. There's nothing wrong with it. Also we already have r/rails and r/ruby , there is no need for more fragmentation. I would advise you to take it down a notch since I don't think there is any toxicity. The best way to get people into plain Ruby is to keep this sub flowing with Ruby posts, so just contribute and let it happen naturally. Cheers!
People downvoted even the comment about "may make a subreddit icon or propose something for sidebar" -- they just try to downvote as many places as possible to make me feel bad. What else is this if not toxicity?
And since when creating more subreddits is a fragmentation? There are around 1000 subreddits about cats and I never saw anyone complain about another to appear.
&gt;r/rails While I understand your frustration, and trying to break Ruby out of Rails, but I think breaking it down doesn't really help. WE already have /r/rails and it doesn't seems anyone is posting there. P.S - I upvoted you.
Here's a sneak peek of /r/rails using the [top posts](https://np.reddit.com/r/rails/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality and save our Internet!](https://www.battleforthenet.com/?utm_source=AN&amp;utm_medium=email&amp;utm_campaign=BFTNCallTool&amp;utm_content=voteannouncement&amp;ref=fftf_fftfan1120_30&amp;link_id=0&amp;can_id=185bf77ffd26b044bcbf9d7fadbab34e&amp;email_referrer=email_265020&amp;email_subject=net-neutrality-dies-in-one-month-unless-we-stop-it) | [0 comments](https://np.reddit.com/r/rails/comments/7eov47/join_the_battle_for_net_neutrality_and_save_our/) \#2: [Ryan Bates of Railscasts.com is getting married on Saturday. I'm going to speak at the reception. Do you have anything you'd like to share?](https://np.reddit.com/r/rails/comments/6ls2xn/ryan_bates_of_railscastscom_is_getting_married_on/) \#3: [RailsConf 2018 vids are up](https://np.reddit.com/r/rails/comments/8jp7ry/railsconf_2018_vids_are_up/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Thank you. Downvoting should be applied to things that are wrong or harmful, not to proposals.
Downvoting is "disagree or not interesting", it is Reddit's mechanism for self-regulation and feedback. Nothing "negative" or "toxic" is shown by downvoting. Harmful things are reported and handled by moderators. PS: I \_had\_ downvoted the post, because I believe that further fragmentation of already reducing community will lead to no healthy/useful results. /r/ruby already have, like 2-3 posts a day?.. And on current first page is, like, 2 or 3 (of dozens) "Rails-first" posts. So, yeah, I disagree with proposal, I don't believe in it, I downvote it as \_feedback\_. You see it downvoted ‚Üí you quickly understand proposal is rejected by community; you see it highly upvoted ‚Üí proposal is accepted. It is absolutely healthy process.
Do you disagree with a comment about "may make a subreddit icon or propose something for sidebar"?
I often downvote thing that is from what I know completely wrong or spreading FUD. But there are thing while I disagree, doesn't necessarily make it wrong. I think it is best "not" to vote in these cases.
\&gt; There is nothing wrong with it but it is downvoted It is 0 currently. Which means exactly one person (not me, for that comment) had pressed exactly one button exactly once. Maybe offended by the fact that you ask for icons from the exact Reddit you are trying to fork, maybe just having a bad day. It is pretty unlike some community witchhunt or something. \&gt; Even downvoted a guy who said he upvoted me Or maybe they agree with you and downvoted him for statement "I think breaking it down in Reddit doesn't really help". Or maybe they are fan of /r/rails and downvoted the statement "it doesn't seems anyone is posting there". Or maybe they downvoted explicit "I upvoted you" because dislike this. And again, it was exactly one person. My point is, "toxicity" is a very strong concept regarding community state, and trying to find toxicity in every small fact and interaction is definitely not what leads to healthier community.
Ty for posting! This is a concept I‚Äôve tried to reach for, but never found. 
&gt; exactly one person The number is this low only because dozens have already downvoted the post discouraging others to look into comments. Even without that it is known that people rarely look into comments section. Maybe there were only three men here, then 33% is not that much small amount as "exactly one" sounds.
It's not particularly common and you are correct that it is a bad idea.
In what way do you think do you think avoiding a temporary local variable is _wasteful_? Not sure what you mean by "converted to a singleton". I'd say it's not unusual. 
please no. That looks far far far too much like `FooClass.new()`. 
&gt; it feels like it should at least be assigned to a variable i mean, _maybe_ it makes sense to assign the `FooClass` instance to a (temporary) variable first and then call `method_x` on it. but that's purely a matter of aesthetics. there's nothing more or less performant about doing it either way (at least not in a way that will make a practical difference) &gt; or converted to a singleton if possible if the singleton pattern makes sense, then go for it, but that's a decision you make when you design `FooClass`. all we know from the snippet being studied is that `FooClass` has a method called `method_x`, and in one place that it's used, we don't care about keeping a reference to the instance of `FooClass` around beyond the `method_x` call. a singleton may indeed be the right design decision, but just because you see `FooClass.new.method` a lot is not an indication of that
IMO, there's a large audience for cats, people come to Reddit for cats, and not so much for Ruby, or Rails.
Thanks for this. I made me excited about Ruby for the first time in a long time.
 Why wouldn't you post the original source? https://www.youtube.com/watch?v=VjR3GU0-vpc
Yes, that's it! If you don't want to install `bundler-audit` in your app, you can use this microsite. Also, you can share the results with a private link. For example: https://audit.fastruby.io/gemfiles/579EC1CC
Cool. You don't actually gotta make bundler-audit a dependency of your app (in it's Gemfile) to have it audit your dependencies, but you do of course gotta install it (`gem install bundler-audit`) on a machine that has your app on it (or at least the Gemfile/Gemfile.lock). And remember to update the vulnerability database if you installed it a while ago and are re-running it. `bundle audit update` or both at once with `bundle audit check --update`. I don't really find that burdensome (in cases where I'm not integrating it in CI anyway), but to each their own! 
Thanks for your suggestions! In my applications I like to add a scenario to my test suite that uses `bundler-audit` and that automatically downloads the latest advisory db. I gave a lightning talk about this in the last philly.rb. The test scenario looks like this: https://speakerdeck.com/etagwerker/lightning-talk-bundler-audit?slide=10
That's a great idea. Alas, it can be from a couple days until a couple weeks or more until zero days show up in the advisory db. :(
We are switching from Ruby to Java where I work. I enjoy writing Ruby for sure, but it doesn‚Äôt scale that well.
While I'd love more non-Rails ruby-focused stuff here, I don't think the reason we don't got it is because there's too much Rails stuff (Rails is of course still ruby). I'm just happy if the subreddit doesn't turn nearly exclusively into a beginner-help-if-you-don't-like-stack-overflow forum, like /r/rails is. 
&gt; Even without that it is known that people rarely look into comments section I don't know if that's "known"! I think there are plenty of people who read _only_ the comments in fact, and don't bother following the link before putting their two cents in. :)
"Doesn't scale that well" is just FUD unless you give us specifics on what sorts of problems, what sorts of resources you were using too many of or performance you didn't have enough of. And _ideally_ report back later to compare how Java made a difference, but I'm not going to insist on time travel. 
If I had to swap from Ruby to Java I'd probably just quit my job lol
Actually Spring Boot is awesome
Can someone expand on what he means by "higher-order functions"? Just methods or procs that return procs, is that all that means? 
I don't understand what's going on there. But what determines what's listed in the case for each `linestoshow`? How did you know what lines to write there in each case? I bet it's actually determinable mechanically from the `linestoshow`. That's how you fix that code, don't hard-code the text positions for each linestoshow, write a method that _calculates_ them and creates them based on `linestoshow`. 
This post doesn't mention single-responsibility, but I think it's very, very important when writing *good* service objects.
spring boot is just a tool, generate some configuration for you to use spring. you still have spring. And spring + java after ruby is like having a vasectomy and enjoy it.
We need quality over quantity. "No news about Ruby today" should not mean "you have to read 100 Rails news titles instead". Reddit itself is a nice website because it allows to read only what you want. There is no problem in that some subreddits I'm subscribed have one post per month -- at least I don't see what I'm not interested in and instead I can read or do something else.
Ruby is a programming language.
At my current level that's the best I could do.
&gt; And spring + java after ruby is like having a vasectomy and enjoy it. :) Thanks for that.
In the first example `FooClass` is instantiated twice. That's the code which could be optimized by assigning to an instance variable and therefore save one allocation.
If you are getting 100 Rails news titles a day in /r/ruby, you're reading a different /r/ruby than me! 
A parrot that knows how to code, amazing!
Doesn‚Äôt scale? The fine folks at Shopify beg to differ. They‚Äôve been vocal about what they use, how they use it, and the many reasons why they use and love both Ruby and Rails. In 2018 if you can‚Äôt scale with Ruby it‚Äôs not the language that‚Äôs the problem. 
i guess i meant to ask ... is it possible?
This is horrible and I feel bad, but I think it'll do what you want. Probably not the best way. str1.split('').uniq - (str1.split('').uniq - str2.split('').uniq)
This only returns the intersect between two chars .. which you can do with str1.delete(str1.delete(str2))
Are you saying that I shouldn't build my Unity game engine competitor in Ruby?
Yes. https://en.wikipedia.org/wiki/Higher-order_function
**Higher-order function** In mathematics and computer science, a higher-order function (also functional, functional form or functor) is a function that does at least one of the following: takes one or more functions as arguments (i.e. procedural parameters), returns a function as its result. All other functions are first-order functions. In mathematics higher-order functions are also termed operators or functionals. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/ruby/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Honestly I kinda wish they'd just call blocks functions. It'd be more intuitive. Consider a map implementation: ``` def map(collection, &amp;function) new_collection = [] collection.each do |item| new_collection.push(function.call(item)) end new_collection end ``` Now granted these could be abbreviated more, but I'm being verbose explicitly here. Admittedly I tend to abbreviate it as `&amp;fn`, though I almost prefer to use `call` over `.()` and `[]` for teaching as it very explicitly delineates what's a function versus what's not. Any time I teach Enumerable methods, block has always been a stumbling block (ehehehe, puns). The name isn't intuitive, and causes confusion. You might want to mention what happens when you call map directly on a hash, as the coercion to an Array can really trip people up. Also, don't go and scare the newbies with Functors quite yet :)
My mind is more in the place of: suppose Ruby programmer uses a toolkit like concurrent-ruby and it‚Äôs all they know, the statement about real parallel threads under a point about concurrency may not immediately ring home as ‚Äúoh AWESOME‚Äù if they don‚Äôt know the difference (and the aforementioned tool even if not parallel had probably yielded performance benefits to them). I‚Äôm not saying these concepts are mutually exclusive ‚Äî but I am not certain that most Rubyists will immediately care. I hope I am wrong, though! 
This. I've never heard someone actually explain why exactly Ruby "doesn't scale". Is it the language speed, or the available tools, or Rails, or other web frameworks as well, maybe concurrency (GIL), or what? My problem with scaling was pretty-much always the database and queues (Redis, Postgres, Elasticsearch, RabbitMQ). That app was very data-heavy, and I'm proud we were able to scale it while the traffic was increasing multiple times. Only one time I had to optimize Ruby code itself (with no I/O), but that was because I wrote inefficient code. There are two things I wished from Ruby: faster ISO8601 timestamp parsing and less memory usage ‚Äì both fairly actionable IMO. Therefore, I will have a hard time being convinced that Ruby doesn't scale without a more detailed argumentation.
Most of the time it's done to abstract certain logic into a class, especially that which "belongs" to something else. That said, I find that it's exceptionally rare that you need more than one or two methods on an interface that retain enough context to necessitate a class. If your constructor needs no arguments, it does not need to be a class in most cases. Just use singleton methods and maybe `module_function`. It'd literally be a container of functions meant to model a certain domain. module Math module_function def add(a, b) a + b end def subtract(a, b) a - b end def multiply(a, b) a * b end end Math.add(1,2) We'll ignore the immediate practical usage of this Math module as that's not the point. In this case it would make no sense whatsoever to make a Math class. All of the functions have no context dependency, nor do they rely on context from other functions. I would argue in cases where you _do_ need to save context, you're making a bit more of a mess and creating a maze of mini objects to follow to find where a certain amount of state is being hidden. That may be a bit of a functional bias that I've picked up over time as well.
`each_with_object` may be a good thing to mention as well, but then you risk turning it into an entire Enumerable post. `reduce` tends to be a confusing subject for a lot of newbies, so it may be a good idea to expand upon that in a later post. Enumerable itself is a goldmine worth of topics to talk on.
Well, that wasn't what I was saying, but: Yes. 
JRuby does also have its own JIT to avoid throwing too much code at the JVM. So we interpret our own internal representation for a while, and once we determine the code that's hot we "JIT" to JVM bytecode. Eventually the JVM takes that and turns it into native code.
Perhaps it would be able to say that JRuby provides true concurrency while CRuby only provides parallelism. But usually I just say CRuby can only use one core at a time and JRuby can use all the cores...people usually can internalize that better than abstract concepts like concurrency and parallelism. In any case...JRuby makes much better use of today's multi-core systems.
&gt;Since classes generally should follow Single Responsible Principle, we should apply it to service objects too.
That‚Äôs like saying that switching from a hammer to a screwdriver to tighten some screws is just a matter of ‚Äúscaling‚Äù. I‚Äôm sorry but that‚Äôs just a matter of ‚Äúright tool for the job‚Äù. I think the ‚ÄúRuby doesn‚Äôt scale‚Äù FUD is mostly a product of a lot of people trying to use a screwdriver to do a hammer‚Äôs job.
I went from Java to Ruby and I will never go back. 
Missed it, doh üôÑ
I'm almost sure this is the same interactive content: https://ruby.github.io/TryRuby/
Great article. &gt; There are scenarios where SPA makes more sense. If you need to offer a high level of interactivity, have to manage a lot of state, execute complex client-side logic, etc. an SPA framework will make your life easier. I see this argument a lot. It would be really helpful for me if someone could quantify, and give examples of *"high level of interactivity"* and, *"a lot of state"* apps. 
In general I agree but there are cases where this makes sense. If the methods (private and/or public) depend on shared state this can help with thread safety by introducing local copies and/or simplify private method signatures. 
Unless you're using the chain or responsibility or command pattern or designing some sort of "plugin" system I'd recommend that you wipe from your brain the idea of creating a "Service Object" with a single `#call` method. 
Or `#perform`, `#execute`, etc...
Games. Office applications. To a lesser extent, and depending on their sophistication, system dashboards, maybe. But the last near-real-time dashboard I built wasn't an SPA, we used Vue components on otherwise static HTML, fed data by ActionCable. 
This is a really good point and its consideration can't be understated. I think in general, the answer is, "you'll know when you need it". Unfortunately, that moment might come too late to do anything about it, i.e. the app is already mostly built out. One cool recent trend in front-end JS development is blurring the distinction between "pages" and "an SPA". See [Next.js](https://github.com/zeit/next.js/) (React) and [Nuxt.js](https://nuxtjs.org/) (Vue) for examples of such projects. You get the advantages of boring old relatively-static pages when desired, with the ability to supercharge individual components using the full power of the front-end framework.
Awhile back Code School was acquired by pluralsight. Looks like they've completely scrapped the Code School content and redirected everything to pluralsight. ¬Ø\\\_(„ÉÑ)\_/¬Ø
&gt; Better Practices &gt; Write code against boundaries &gt; Isolate... &gt; Dependency Injection These are good programming practices that have been around long before 2007. My takeaway from this is: what many in the community may have told you about application design was wrong. Sorry. &gt; Kernel#then, Method#curry, etc... Has anyone here done functional programming in Java? &gt; sorbet.run The Browser is The Platform of the 21st Century ‚Ñ¢Ô∏è; JavaScript is quirky and has dynamic, weak typing. I can understand the need for type safety/transpiling. &gt; sig(foo: Integer).returns(String) &gt; def bar(foo) &gt; foo.to_s &gt; end Do people really want to write Ruby like _that_? If your problem benefits from types ‚Äìor you just want them, just choose a type safe language (I'd recommend [Groovy](http://www.groovy-lang.org/)). For the web, if I had to choose between writing web apps in Java with DB mapping and HTTP mapping annotations vs writing web apps in Ruby with sorbet style type safety I think I'm going with Java. 
Easy with `String#gsub`: irb [2.5.0] (class2)$ removed = [] =&gt; [] irb [2.5.0] (class2)$ str1.gsub(/[#{Regexp.quote(str2)}]+/) { |s| removed &lt;&lt; s; "" } =&gt; "2" irb [2.5.0] (class2)$ removed =&gt; ["abc", "e"] 
Though performance is likely not as great but, that may not matter!
 &gt; when it comes to strings with spaces in them, the conversion is not straight forwards... &gt; "First Last Name".gsub(/\s+/, "_").downcase.to_sym # =&gt; :first_last_name What's wrong with `"First Last Name".to_sym`? &gt; " abc ".strip # =&gt; "abc" This only works for ASCII whitespace irb [2.5.0] (class2)$ s = " abc\xc2\xa0" =&gt; " abc " irb [2.5.0] (class2)$ s.strip =&gt; "abc " irb [2.5.0] (class2)$ s.gsub /[[:space:]]+/, "" =&gt; "abc"
A somewhat dismayingly content free talk. A TL;DW; don't watch the video, follow these links... * https://celluloid.io/ (although I'd argue instead of this one, try https://github.com/socketry/async) * http://trailblazer.to/ * http://rom-rb.org/ * http://dry-rb.org/ * https://sorbet.run/ ps: Avoid the Python 3 tragicomedy, Enable frozen string literals in your code *now* and start updating _all_ your gems to do so. 
I went the Nuxt route after doing a lot of the app in ERB and jQuery. The performance benefits of using Rails in API mode, removing a lot of edge case UI state management API calls, and a very snappy feeling UI are worth the effort. Bonus is now we can package our UI for IOS and Android now as well.
Python 3 will sell more popcorn than Perl 6 did. Which of these projects was code-named *Godot*? And if not, why not?
I think I never had to fix shared state by instantiating another copy. You either have state you want to be shared across threads (mostly wrapped in some concurrency primitive) or you have local variables (including instance variables). Do you have an abstract example?
I think calling them functions would make things even worse. Because functions, in other languages, behave differently than blocks do (they're probably closer to procs). And then you would have methods \*and\* functions which would probably confuse people even more :) Thanks for pointing out the hash coercion.
That's a good idea. I'm ok with turning it into something else as long as it helps people better understand the concepts :) I should probably write about Enumerable too. Thank you.
If you really want to use delete you could just run delete on each character in turn and get only the letters that the delete set expression matches: str1.chars.chunk{|c| c.delete(str2).empty?}.select(&amp;:first).map{|c| c[1].join} =&gt; ["abc", "e"] It would be more efficient to just rewrite the delete expression as a regex and scan though: str1.scan(/[abc1e]+/) =&gt; ["abc", "e"]
You're right there's nothing wrong with it. I was implying that it won't convert it to a snake case symbol, but it was all in my head :) I've updated the post to reflect that. I've also added your non-ascii solution. I hope you don't mind. Thanks.
I‚Äôd say there‚Äôs 2 cases where it makes a lot of sense to do SPA: 1) sites that update their view separately from their data like sorting, filtering or a chart type and 2) services that also have native apps, because it can be simpler to design the api for all the interfaces at once.
It really sucks though when you have a Rails form you built using all the nice form helpers that you now have to convert to a React/Vue component effectively writing raw HTML and having to handle things you take for granted like highlighting form fields on error
the procrastination imp on my shoulder enjoyed your remark, suggests we could develop a gem-quality custom form builder that uses Vue components for progressive enhancement of otherwise standard HTML5 Rails forms. 
TIL, thanks
And that's because...?
&gt;effectively writing raw HTML If you're writing raw HTML in every form component, then you're absolutely using React/Vue wrong. You should be using components in a very similar way as form helpers, you should write base form components (or just install an component library and skip this part all together) that handle everything the helpers do (like highlighting form fields on error). Then when you need to write a form, there should be little to no raw html, only components. I actually discussed [building a reusable form component in /r/vuejs the other day](https://www.reddit.com/r/vuejs/comments/8vnbry/is_there_a_simpler_way_to_do_this/e1p9901/). But, to give an example, this is how a form should look in Vue: &lt;template&gt; &lt;BaseForm v-model="formData" :submit-fn="submitFn"&gt; &lt;FormGroup attr="firstName" label="First Name"&gt; &lt;FormInput required /&gt; &lt;/FormGroup&gt; &lt;FormGroup attr="lastName" label="Last Name"&gt; &lt;FormInput required /&gt; &lt;/FormGroup&gt; &lt;FormGroup attr="bio" label="Bio"&gt; &lt;FormTextarea /&gt; &lt;/FormGroup&gt; &lt;FormSubmit /&gt; &lt;/BaseForm&gt; &lt;/template&gt; I love Ruby &amp; Rails in API mode, but after using Vue.js for two years, I can safely say I never want to go back to a template based frontend ever again. Vue's single file components are great because the view, script, and styles are all in the same place, writing modular frontend code is incredibly easy, and even SSR is easy these days. I don't see a single advantage Rails views have over React/Vue.
I would say that when people talk about Ruby and how it does not scale they talk about availability of Ruby programmers, Rails lock in etc. Ruby (and inherently Rails) is strong only in specific regions,areas and it's hard(er) to hire programmers that know or are willing to do Ruby (||=Rails). Ultimately the frontend took over and people realized they can use JS on backend (nodejs), desktop (electron) and mobile (React Native). Ruby is fragmented in this area and a lots of projects like Opal,CoffeeScript failed because they did not get the momentum... It's just easier and better for everyone not to write Ruby on frontend...Rubymotion that's a whole different story. Lets hope Ruby 3 or Graal will make for a big comeback for Ruby. 
Yeah, same here. Moved to rails api + vue front and enjoying as hell. My code is clean. No more abusing instance variables in controllers. No more helpermania. Code is clean ui is fast
Exactly, switching to api only rails + using service/query objects has eliminated pretty much everything I hated about using rails. Almost all my controllers are less than 60 lines, not a single instance variable, and every bit of logic that doesn't have anything to do with rendering a response is encapsulated into it's own module/class making testing a breeze. With a well indexed postgres db, [fast_jsonapi](https://github.com/Netflix/fast_jsonapi) for serialization (migrated from AMS), caching with redis, and utilizing sidekiq to kick off background jobs for anything non-essential to the request response, I completely forgot people complained rails was slow because my API is fast as hell. Then on one of the apps I work on, I have that combined with Nuxt.js set to compile to the frontend to static html file served up with nginx, the entire app is blazing fast. Feel comfortable that the backend probably won't ever have to rewritten in something like Go because "Rails is too slow and won't scale".
&gt; I would say that when people talk about Ruby and how it does not scale they talk about availability of Ruby programmers, Rails lock in etc. Ruby (and inherently Rails) is strong only in specific regions,areas and it's hard(er) to hire programmers that know or are willing to do Ruby (||=Rails). Oh, it would never come to my mind that this is what they meant. Ok, I can't argue with that. But I think the ecosystem itself is very developed, with some great advanced libraries (more in the Ruby ecosystem than Rails). &gt; It's just easier and better for everyone not to write Ruby on frontend... Yeah, writing frontend in Ruby made sense before, when JavaScript wasn't so strong. But now it just doesn't make much sense to me, because the Node.js tools are so advanced, and the UX standard is so much higher now, so you need a lot more JavaScript. It's good that Rails embraced it with Webpacker. &gt; Lets hope Ruby 3 or Graal will make for a big comeback for Ruby. Me too, faster Ruby is always great :)
In theory, this wouldn't be too difficult. If you install some vue component lib, and have a Vue instance mounted somewhere in your js, you'd just need some helpers for writing vue component tags in rails templates: def vue_component(name, bind = {}, attrs = {}) tag = name.kebab bindings = bind.map { |(key, value)| vue_bind(key, value) }.join(" ") attributes = attrs.map { |(key, value)| vue_attr(key, value) }.join(" ") render inline: "&lt;#{tag} #{bindings} #{attributes}&gt;#{block_given? ? yield : ''}&lt;/#{tag}&gt;" end def vue_bind(key, value) ":#{key.to_s.kebab}=#{value.to_json.gsub(/\s/, '&amp;nbsp;')}" end def vue_attr(key, value) "#{key.to_s.kebab}=\"#{value}\"" end As someone who has tried something similar (where those helper functions came from) you almost certainly do not want to do this. You lose all the benefits of using rails templates (helpers and their tight integration with rails) and all the benefits of using Vue (SFC, modular reusable components, all the es6 JS goodness), as well as it being hard to maintain and organize. Just keep Vue code in vue/js and rails erb templates in rails and you'll be much happier after adjusting to the different workflows/design patterns/etc.
Rails is awesome, I feel great for the future of it. Same here using fast_jsonapi. Not proficient in caching now, but I will get into it pretty soon. 
I'm no expert, but I'd do something like this: def show_lines(number_of_lines) x = 300; y = 10 (0..number_of_lines).each do |line| textpositions &lt;&lt; [spiegazione[line], x, y + 20 * line, baseColor.shadowColor] next if line &gt; 2 x -= 5 if line == 0 x -= 10 if line == 2 end return textpositions end lines_needed = 15 textpositions = show_lines(lines_needed)
Definitely, Ruby's future is looking faster, especially with things like JIT coming. And with more slimmed down Rails API apps, the "rails doesn't scale" meme could finally die. And, just to give you a few (unsolicited) tips on caching, as especially with JSON APIs, you can see some huge performance gains but you also introduce new potential (hard to debug) problems -- stale cache/invalidation. I'm not familiar with too many of the other cache stores, but unless there some reason you can't, use Redis. It's really good. If you have a JSON response (like a big array of records) that aren't frequently updated but frequently read, I've found it to be incredibly fast to just cache the entire JSON response instead of having `AMS` or `fast_jsonapi` cache the individual objects: records = Model.all render json: Rails.cache.fetch records.cache_key, expires_in: 2.hours do ModelSerializer.new(records).serializable_hash end Make sure that if you doing things like including relations in the api response (`Serializer.new(record, include: %i[relation])`) that on the relation's model where you define the relation to the model that is including it that you include the `touch: true` option so that when the relations get updated, the including record's `cache_key` will get changed so you don't get a response with stale data for the included records. class Parent &lt; ApplicationRecord has_many :children end class Child &lt; ApplicationRecord belongs_to :parent, touch: true end parent = Parent.first parent.cache_key # parents/475be5b9-8e80-48dd-810a-bb050f3764ed-20180627130211967246 parent.children.first.update_attributes foo: "bar" parent.cache_key # parents/475be5b9-8e80-48dd-810a-bb050f3764ed-20180706103413478525 
Are you trying to make a point with your image? It's not clear. Are you complaining that there is a single article that mentions Rails? Is that really a problem for you? There's tons of content here just about the language.
&gt;Turbolinks is heavily inspired by [pjax](https://github.com/defunkt/jquery-pjax) and has gone through [several revisions](https://github.com/turbolinks/turbolinks/wiki/Turbolinks-5-FAQ). Why hasn't Github adopted Turbolinks and stayed on pjax? Just wondering. I have always always been on the HTML side of things. Speed from Turbolinks is great. It gets a little slower if you are far from the Origin. And for most, I have yet seen a JS frontend implementation that feels\* fast. [Dev.to](https://Dev.to) was the first one that I thought, wow.... this is fast and feels very pure HTML, when in fact it is based on preact.js. And [Dev.to](https://Dev.to) is built on Rails as well. I think the SPA rabbit hole example, has nothing to do with TurboLinks, SPA, Server Rendered, or any other tech or ideology. It has to do with the fact, no one, not a single one in those camp, saw the bigger picture , the complexity. Most of them saw a new toy, new tech to play with, and decided newer is better. Reinventing the wheel, or as Alan Kay put it, reinventing the flat tire. It happens in both hardware and software. The wisdom that went into some of these older pieces of software were ignored and pointed the finger where old = worst. new = better. In Silicon Valley where you get hipster under the age of 30 dancing around new tech every generation, while older people finally saw the cycle repeating itself. 
Nothing else gets to my front page from this sub than Rails.
Did you look at the front page right now before you wrote that? It's an infinite page now of course, but of the top ten posts right now just three are about Rails, and one of those is you complaining about it, and one is really about Sidekiq in general.
Yep, this is definitely the more common and universal pattern (or preferably a singleton).
I think both approaches communicate a different intent. To me, FooClass.new.method_a FooClass.new.method_b seems like the developer created `FooClass` with the intention of holding state, yet now treats it as if it were a singleton or static class. This makes it unclear if this is `FooClass`'s intent - either it uses the default constructor and is better suited as a singleton, or it does some initial setup in the constructor and using it like a singleton is wasteful as it potentially creates brand new objects that could be reused if it was assigned. For the first intent, the class could be rewritten as a singleton and used like so FooClass.method_a FooClass.method_b For the second intent, the author should make a point of documenting the class, and stressing that wherever possible, one instance should be used (e.g. if the class creates a network socket, reusing that socket is more efficient than creating a new one for every request) like so instance = FooClass.new instance.method_a instance.method_b The second intent also makes using the class much less brittle - for instance, if in the future some params are added to the constructor, the call to `new` only needs to be changed once, rather than on every method call. Of course, these are all just design patterns. If you feel that your way is more maintainable or is sufficient for your particular use case, then that's totally fine.
I'm looking into Crystal language. Types and Ruby like expressiveness. Also fast and single binary similar to Go language.
I am just wondering, what's the point of republishing content into your own YouTube channel? (I see content's license allows that, and you provided the link to original, but still?) BTW, for Confreaks-authored videos, they typically provide very convenient [page](http://confreaks.tv/events/rubyhack2018) with talk abstracts, author names and links to previous-year conferences. I don't think republishing (if license allows that) is some kind of "sin", but I suppose it is somehow more "fair" to NOT do it unless you have something to add (like remixing videos for some specific topics, making exceprts to stress out some points and so on). Just "republish the whole conference in different channel ot split out audience/likes" is somewhat questionable.
Why don't you show post #2 and #3?
You would never actually make a game with an SPA.
It's rather interesting to watch this 'modern' movement using techniques from decades ago. DI containers, static typing, 'service objects'... None of these are 'new', none of them are 'modern', none of them are even particularly interesting topics and in many cases Ruby / Rails or Python / Django explicitly made choices to avoid them e.g. DI containers are fucking _awful_ to work with. It mostly just seems like people rediscovering shit on one liked working with yet thinking it's now the best thing since sliced bread. I'd be so much nicer if folks would skip the trends and just write easy to understand code.
I‚Äòve got the original but haven‚Äôt opened it (found a cheap second hand copy), but I‚Äôve read about half of the newer RSpec 3 book - would thoroughly recommend that one.
The point is, if I'm using standard Rails form helpers or simple_form, I want to continue using those in 95% of my app where I don't need JavaScript. I don't want to switch *everything* over to some JavaScript form library like your example uses ("Element UI") - which I'd either have to do, or do a lot of work making sure both approaches render the same stylized forms. If you go all-in with Vue, good for you, but at that point personally Rails has lost a lot of the prototyping appeal for me and I'd just use something else.
Do you put _all_ your validations in client-side code? Is there is still some chance of a server-side validation failure? How do you handle reporting that to user?
Have you found a solution?
This guy is just trying to make money :(
&gt;Do you put all your validations in client-side code? Good lord no, data is validated both client and server side. &gt;Is there is still some chance of a server-side validation failure? Of course. &gt;How do you handle reporting that to user? I (attempt) to follow the [jsonapi spec](http://jsonapi.org/format/), and use [fast_jsonapi](https://github.com/Netflix/fast_jsonapi) to serialize. When the serializer goes to serialize the record in a response back from a `POST/PATCH` it checks the passed record for any errors (I assume with something like `record.errors.any?`), if there are any errors on the record, instead of using the record's serializer class it'll instead use the error serializer which will render a [jsonapi error object](http://jsonapi.org/format/#errors-processing), the server then returns a `500` response with that error object instead of a `201/200` with the record JSON. So, on a model with a attribute `name` that can't be null and is validated with `validates :name, presence: true` (as well as a `null: false` on the db column), if a create request was sent with the payload `{ data: { attributes: { name: "" } } }`, the server would respond with `500` and a body containing: { "errors": [ { "status": "422", "source": { "pointer": "/data/attributes/name" }, "title": "Invalid Attribute", "detail": "Name cannot be blank." } ] } Handling this on the frontend would look something like this: async submit() { try { const { data: record } = await this.createRecord({ data: this.formData }); this.$notify({ type: "success", message: "record created" }) this.$router.push({ path: "/record", params: { id: record.id } }); // switch to the records show page } catch (e) { const { errors } = e; this.errorMessages = parseErrorMessage(errors); // { name: ["Name cannot be blank"] } // this.errorMessages is passed to the form component // as soon as this gets set it will display the "Name cannot be blank" message // above the name input } } It's not quite as simple as, well, using something `simple-form` would be in a rails view, but that's largely due to having to use JSON requests while `simple-form` actually has access to the models themselves on the server side.
Not really; last time I ran into this I just copied the form's rendered HTML into a React component and added the error class stuff, CSRF token, etc. manually myself. It would be cool if there was a better way to migrate a Rails form to a Vue/React component when suddenly you need that bit of dynamic behavior (a sibling commenter suggested maybe someone could make a gem for it - that would be neat). I'm all ears if anyone has suggestions.
Woow such an incredible guide to power up my development with Pry!! Thanks mate! 
Aha, neat. errors are in JsonAPI. Were you using Rails? Are there any out of the box "just work" serializations of ActiveRecord to JsonAPI, with errors?
[fast_jsonapi](https://github.com/Netflix/fast_jsonapi) is the newest, and you have to write the error serializer, and handle checking for errors manually. [active_model_serializers](https://github.com/rails-api/active_model_serializers/tree/v0.10.6/docs) with it set to jsonapi mode will automatically render the errors object for you based on the activerecord errors. [jsonapi-resources](https://github.com/cerebris/jsonapi-resources) will also handle the error object for you. However, this one is less drop-in than the other two and is extremely opinionated, but will actually make your responses completely compliant with the spec, while the other two just follow it loosely, and you have to some extra coding if you want to be fully compliant with the spec.
Just to follow up with a work around, I had the exact same problem (on OS X). I could open a TCPSocket to an ip address or any domain name that resolved to a single ip address (like slashdot.org) but not a domain name that resolved to multiple ip addresses (like api.rubygems.org). I have found that killing nsurlsessiond temporarily solves this issue for me. Very strange. ``` irb(main):008:0&gt; Resolv::DNS.new.getaddresses('api.rubygems.org') =&gt; [#&lt;Resolv::IPv4 151.101.192.70&gt;, #&lt;Resolv::IPv4 151.101.0.70&gt;, #&lt;Resolv::IPv4 151.101.64.70&gt;, #&lt;Resolv::IPv4 151.101.128.70&gt;, #&lt;Resolv::IPv6 2A04:4E42:200::70&gt;, #&lt;Resolv::IPv6 2A04:4E42:400::70&gt;, #&lt;Resolv::IPv6 2A04:4E42:600::70&gt;, #&lt;Resolv::IPv6 2A04:4E42::70&gt;] irb(main):009:0&gt; Resolv::DNS.new.getaddresses('cnn.com') =&gt; [#&lt;Resolv::IPv4 151.101.65.67&gt;, #&lt;Resolv::IPv4 151.101.193.67&gt;, #&lt;Resolv::IPv4 151.101.129.67&gt;, #&lt;Resolv::IPv4 151.101.1.67&gt;, #&lt;Resolv::IPv6 2A04:4E42:200::323&gt;, #&lt;Resolv::IPv6 2A04:4E42:400::323&gt;, #&lt;Resolv::IPv6 2A04:4E42:600::323&gt;, #&lt;Resolv::IPv6 2A04:4E42::323&gt;] irb(main):010:0&gt; Resolv::DNS.new.getaddresses('slashdot.org') =&gt; [#&lt;Resolv::IPv4 216.105.38.15&gt;] irb(main):011:0&gt; TCPSocket.new('api.rubygems.org', 80) ... Go kill nsurlsessiond irb(main):011:0&gt; TCPSocket.new('api.rubygems.org', 80) =&gt; #&lt;TCPSocket:fd 11, AF_INET, 10.0.1.45, 65489&gt; ```
Yeah. Or just make it yourself? 
Pry is awesome, every ruby dev should know aobut it. Especially with show-doc/source even working for c-methods. A while ago I held a talk about pry. You may find find some more things in the slides (navigate with down/right arrows) [https://tessenow.org/talks/pry/](https://tessenow.org/talks/pry/#/)
"Growth hacking."
Yeah and the things we both mention are just a small bit of what Pry can do, I use quite a lot more things but know I could use a ton more to be more efficient! I did a "lightning talk" in my previous company about it, but I went way over the allotted time (hence the quotes :) ) I was in a Rubyconf in Barcelona \~3 years ago and wanted to have done a lightning talk on stage, as they had it requested, but was too lazy to prepare one. (also not a very good public speaker at the time)
That is kinda the opposite of what I had in mind, looks to me more like a helper for summoning arbitrary vue components, it's not form specific. What I was thinking of was a collection of vue components that can hook onto appropriately hinted Rails forms &amp; inputs to enhance them. As rails-ujs does, but with more capabilities. By form builder, I meant using [something more coupled to the framework](http://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html) to provide the hints for Vue components. I'll have to just start work on it and then everyone can decide if they like it or not. 
In your second example, you don't need to include Enumerable to get sort on `me.emails`. When you assign the array to the `emails` accessor, its just assigning an array which already has the sort method in it. class Person attr_accessor :emails end me = Person.new me.emails = ["home@gmail.com", "work@gmail.com", "newsletters@gmail.com"] me.emails.sort # =&gt; ["home@gmail.com", "newsletters@gmail.com", "work@gmail.com"] works exactly the same.
[But why?](https://media.giphy.com/media/1M9fmo1WAFVK0/giphy.gif) What is the advantage of adding in Vue if you're just going to use it to wrap a plain form? Vue doesn't offer anything that makes forms better, it's all just plain JS with some syntactic sugar. From what you've described it sounds like you just want to use Vue to make a regular form a bit more interactive and look nicer/consistent, so why not just use plain JavaScript and css and achieve the same thing without tying it to a framework to use 10% of it's functionality? How is it more advantageous to add Vue components, when you could just wrap the form inputs with rails partials that have their own css and js and write helpers that render those instead of shoehorning in a full framework to add some light interactivity to forms? I promise I'm not trying to be disparaging, I'm just trying to understand what the benefit you'll be getting from using Vue instead of just plain old JS. 
Oh, that's a really good point. I'll think of a different example. Thanks for pointing it out.
It's a trick to build audience using someone else's content. The CC-BY license allows it, but here there's no value added by the republisher. You only get a low-end or naive audience because most folk are smart enough to see what's going on and will self-select away. Advance-fee-fraud scammers rely on the same mechanism. 
I do sophisticated things with forms. 
https://www.reddit.com/r/ruby/comments/80r52z/use_static_facades_when_you_dont_care_about_the/duxosnn/
In practice `Kernel#enum_for` or `Kernel#to_enum` are a _lot_ more useful. 
Yes, this langue is promising, but it's not mature and not sure how 3rd party library support is. Though there does appear to be a decent amount [here](https://github.com/veelenga/awesome-crystal), but I don't see Stripe, Twilio, XML/JSON Schema. I'm sure there are others. 
 # Assume DB is not thread safe module Foo @connection = DB.new @other_config = ... def self.method_a result = do_part_1 # uses @connection and @other_config result += 1000 # or some operation do_part_2(result) # uses @connection and @other_config # ... end end # Thread safe, but connection and other_config needs to be passed module Foo def self.method_a connection = DB.new other_config = ... result = do_part_1(other_config, connection) result += 1000 # or some operation do_part_2(other_config, connection, result) # ... end end class Foo def initialize @connection = DB.new end def method_a result = do_part_1 # uses @connection and @other_config result += 1000 # or some operation do_part_2(result) # uses @connection and @other_config # ... end end
I agree. There's a whole channel that has had a lot of success republishing videos now with over 200K subs: https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ Making excerpts or repackaging is fine but simply reuploading seems pointless to me.
That's what shared examples are for. shared_examples_for "a monitored website" do |args| describe args[:name] do context 'the website' do it 'should be online' do expect(args[:domain]).to be_up end end end end it_behaves_like "a monitored website", name: 'Oregon Laws', domain: 'www.oregonlaws.org' it_behaves_like "a monitored website", name: 'Public.Law', domain: 'www.public.law' it_behaves_like "a monitored website", name: 'Dog Snog Dot Blog', domain: 'dogsnog.blog' Or: shared_examples_for "a monitored website" do context 'the website' do it 'should be online' do expect(domain).to be_up end end end context "Oregon Laws" do let(:domain) { 'www.oregonlaws.org' } it_behaves_like "a monitored website" end context "Public.Law" do let(:domain) { 'www.public.law' } it_behaves_like "a monitored website" end context "Dog Snog Dot Blog" do let(:domain) { 'dogsnog.blog' } it_behaves_like "a monitored website" end Doing it this way lets you abstract your common tests to shared (and optionally parameterized) behaviors, or you can rely on `let` values set within your context, rather than having to pass everything in. This also means that you get an accurate line number for your failing specs - `it_behaves_like` call site shows up in the stack trace, which makes tracking down the test much easier. There is a place for dynamically-generated tests, but too many of them lead to an inscrutable test suite.
Yes. The ruby internals have a complex and efficient sorting algorithm that pragmatically minimizes the number of calls to the block. The block's responsibility is purely to provide the comparison information, and it will be called on actual elements in the sorted object as needed. There is no guarantee about which elements will be passed to the block, or the order. That is completely up to the sorting algorithm, and could change between ruby versions. 
https://www.igvita.com/2009/03/26/ruby-algorithms-sorting-trie-heaps/
I really enjoyed this. It affirmed how I feel about a lot of modern web development work I've done over the past few years, while giving legit context about every choice. I ask this question to the community though.. How do I bring back simplicity to the workplace, without sounding like I want to 'regress' with technology tools. My company wants to API everything with rails, and build these react / redux / recompose that totally complicates every feature. There is no reason in my mind to create these additional codebases to maintain when the 95&amp;#37; of the feature could be handled beautifully with simple html, css, and *dare I say* jQuery! So to reiterate the question, how can I bring back simplicity without sounding like I don't want to learn the 'new best practice' tools?
thanks
It's called the spaceship operator.
Did YOU look at the front page? https://i.imgur.com/RyYUh8H.png
They were about cats.
That was a sad day. I went to a few of the meetups CodeSchool did. Was a great group of folks. 
Doing python development now at work and holy heck do I miss pry so much. IPython just doesn't hold a candle to it.
My dude, do you reread what you type before posting? Breathe.
What's cool about Ruby is that you can easily pry open the internals and see how this works if you want! Paste this into IRB: class String alias_method :old_comp, :&lt;=&gt; def &lt;=&gt;(other) puts "Compared #{self} to #{other}" self.old_comp(other) end end And then try sorting an array of strings. It'll show you each comparison as it performs it.
What would you say are the main missing parts?
Hartl Rails is probably the most common recommendation.
That's good to hear. I think I just downloaded the book so will see :) 
He has a new site with the original tutorial. It‚Äôs called Learn Enough. If you have any Rails specific questions, feel free to ping me.
Hey thanks, I will check that out right now. I appreciate your offer also. :) I'll keep this in mind. 
assuming you asked in a ruby subreddit by mistake, are you looking for something like this: http://newcoder.io/tutorials/ ? those projects are in python 2, learning and converting them to python 3 would sure be a good portfolio I feel.. 
Checkout Udemy courses, that‚Äôs how I learned and now have a job as a RoR programmer. 
Wow. How long between starting and getting the job? Did you have any programming experience before? If so what?
Wow. How long between starting and getting the job? Did you have any programming experience before? If so what?
About 4 months. I was coming out of college with a CS degree, but no Ruby experience at all. I know several languages but primarily used Python and Java. I also taught myself HTML and CSS (and their derivatives) using YouTube and now do freelance web development. 
Here's what I did : I knew what I wanted to build so I started with hartl to get an idea on the basics. Setting up what I needed etc. From there I just kinda started building and googling what I needed to figure out. I wrote a lot of code to how I thought it would work and then googled the error and figured out what I did wrong and how to fix it that way. The downside to this way is I probably broke a lot of convention. But everything functions exactly the way I wanted so I guess that's a bonus. 
Do you build web app?
ill try :) its hard for me learn some parts of code if I cant understand what exactly its doing... Thanks!
Which ones?
Not sure if this is what you are after but I have a YouTube channel/blog where I build with ruby on rails to learn while doing so. My focus is actually building apps rather than single concepts. The end result may not be 100% portfolio worthy but it could lead you on a path to creating something as such. Check out: YouTube.com/c/webcrunch or web-crunch.com 
&gt; Looks like at least in 2009 MRI used a "quick sort" algorithm. MRI still uses quick sort. 
It was a step learning curve at first. But once I got over that initial hump, it got easy and beautiful. But with rails and conventions you have to juggle a few things that have to work. But once it clicks, it‚Äôs glorious 
You might wanna go for a paid bootcamp at Udemy / edTx / Coursera. Sites like Codeacademy are great for introducing yourself to a certain programming language. However, what you're talking about (especially, Ruby on Rails) has a couple of concepts, design and conventions involved. You certainly might find out about them by yourself, but a paid course will make the process much faster (3-6 months) depending on amount of free time
whats your goal? rails had a lot of learning upfront by enforcing its opinions but its supposed to help once you've learned it. If you are just getting started I might even try with something simpler like sinatra and then move over to Rails once you've learned more and why you'd need it.
What do you mean? Do you mean have I built any web apps before? If so I've just started doing them. Basic stuff like to do apps etc
Will check it out now thanks
Thanks! This seems like my style
it was hard for me at first as well. I don't think I could have learned it without Bates' Railscasts. Check 'em out. They're old, but great.
Hey man, I am doing one your tutorials right now. Thank you so much for them. I will do all of them and any future ones that come along.
Just take it slowly. You wont master or understand everything at once.
&gt; it can be argued that a controller should only have a single responsibility: routing. Why would a controller be responsible for routing? If all it does is routing, it's not a controller.
Do you build web app at work? I just wondered what kind of jobs you got after learning RoR/Ruby with that duration.
I can't agree that your approach is clearer. Consider that the English meaning DSL code that actuates the tests effectively asserts that each URL "behaves like" a "monitored website," but in the code the tests themselves *do* the actual monitoring. Instead of testing something that monitors websites, the tests themselves are actually doing the monitoring. That's an incredibly confusing byproduct of kludging your objective (monitoring websites) with the RSpec DSL. Reading test code that loops over some data structure explicitly is definitely more cognitively expensive than a simple test without iteration, but actually offers beneficial properties in return, which justify the cognitive burden. The use of shared examples add additional confusion for zero benefit. In addition to the point mentioned above, shared expamples force the reader to go _find_ the shared example implementation and consider it together with the individual tests. I wonder sometimes if RSpec usage unduly triggers the reward centers of our brain every time we make use of one of its more elaborate features.
Oh you're talking to the other guy but you accidentally replied to me
Well, it's only been two days, it takes a while to get everything and depends on your source base. Before I did any coding at all I did a lot of database work (Filemaker Pro, MySQL, SQL Server) so I came in with a good basis Database design, query design, etc...and still active query drives me nuts. It takes a lot of time and practice, and also you have to decide what matters to you (does knoing how the server works matter in the beginning? Not really, and even when you're ready to deploy there are many services that will help)
jemalloc isn't a bad recommendation but you should probably also look at your thread pool sizing. High thread counts is what really causes jemalloc to have the effect it does. Running more than ~2x cpu cores threads is likely not helping your app at all and if you aren't running an intermediary connection pooling system for your database (pgbouncer, etc) then you're probably hurting your database performance as well. 
Do you build web apps on the job?
It's definitely not just you! Everyone has to learn this stuff at some point. Feel free to PM me with questions. 
Well, it was demonstrably false.
Yes, for some reason a lot of posters seem to think that Ruby people who are interested in Rails are too dumb to find /r/rubyonrails and /r/rails, and if you say something about that they say "just tryna be helpful, GOSH," but I think you're pissing into the wind.
Not mentioned on that blog post is that if you are a true beginner, the author of the Ruby on Rails Tutorial Michael Hartl, has a whole series of beginner tutorials that teach you all the basics that you need to know to get started as a web developer. Things like the command line, git, HTML / CSS, etc, and like the Rails Tutorial all the beginner tutorials are online for free. If you want the screencasts for everything, including the Rails Tutorial, there is a $29 /mo subscription plan - much cheaper than buying the Rails Tutorial screencasts. 
Very interesting article! I like how the performance issues where split up per inefficiency cause. From my experience it's also good to keep your Rails logs open during development to spot some of these issues early one.
As a current student, i'm doing [The Odin Project ](https://www.theodinproject.com/) which is an open source full stack web curriculum going over the ruby, rails, html, css, javascript, etc. It is entirely free and work at your own pace and i am in love with it. 
We‚Äôve had really good luck using the jemalloc buildpack (http://github.com/gaffneyc/heroku-buildpack-jemalloc/) when we deploy to Heroku. We did a big push four or five months ago where we set it up for several of our ([Collective Idea](https://collectiveidea.com)) client‚Äôs sites most saw some big wins. One had been fighting memory leaks for months with 2x dynos, just switching to jemalloc dropped their memory usage by half for web dynos.
I would be careful with node:rails job counts. Most results you get when searching node.js on job boards are in fact frontend jobs ... and probably half the python results are data science jobs
These apps aren't under heavy load at all.. mostly internal tools we use. The puma thread count at puma is set at 4 / 4, so I don't believe db pooling is a factor here at all.
If you mean hundreds per request I'd strongly suggest a background worker like Sidekiq. If you mean one per request then I don't think the web server itself makes much difference, it'd be the imaging library you use (rmagick, minimagick, etc) that would cause performance issues.
It‚Äôs per request but I can make my own queue easily with Libvips which is more efficient than other image processing.
It‚Äôs per request but I can make my own queue easily with Libvips which is more efficient than other image processing.
If you can do it in the background, use an MQ. If you have to do it in real time then most likely you shouldn‚Äôt use ruby for it. 
I need near real-time for image resizing, look like GoWorker for job queue is a good idea?
Sidekiq for background processing and mini\_magick for image processing(inside Sidekiq job). 
I don't know if you are building an app which primary goal would be to do image processing but if not. If you are building something else and you don't need any special features for image processing, consider using [https://www.imgix.com/](https://www.imgix.com/) instead of doing it yourself in your servers. We've been using them in a few apps and we've been pretty happy about the results. It's nice to no longer need to deal with resizing, cropping, transforming images etc. 
No mention to the most comprehensive free resource to learn Ruby and Rails, [The Odin Project](https://www.theodinproject.com/).
Thanks, I know there are image services but I‚Äôm serving various images formats that isn‚Äôt available anywhere and cheaper to do on our own.
Are you sure? It sounds like you're wanting to make something like cloudinary, which is incredibly inexpensive for what you get.
There are some really weird lines of code in there... `true if number &gt; 0` why would you even write that? Why would you not just write `number &gt; 0`? &gt; `return true unless true || flase` Do you find that easy to read and figure out? I know I don‚Äôt. I don't find it easy to read because it's insane code, not due to the `unless`. 
I generally try not to be critical of code that is just made up to demonstrate a point, but that is bad. The whole article seems to be unaware that ruby style guide and rubocop have rules for when to use unless. And basically, its to convert a negative logic if statement into a positive logic unless statement and nothing else.
I find the Rails logs totally overwhelming, so much info that there's no way I'm going to just notice something suspicious browsing the waterfall of logs going past. Do you have techniques (mental or configuration) to make this more reasonable for yourself?
&gt; A similar inefficient updating issue occurs when N queries are issued to update N records separately, instead of using update_all. That one isn't so simple. `update_all` may be more efficient on the query side, but it bypasses validation / callbacks. Use it with caution.
I doubt it will matter if you use `GoWorker` or `Sidekiq` or `Resque` since you'll likely be using `imagemagick` to do the actual work anyway. 
Unfortunately [tryruby.org](https://tryruby.org) now redirects to [pluralsight.com](https://pluralsight.com), to something completely different. I'm not sure if they plan to bring it back or it's dead. :( 
I guess that post got highly voted? I don't know why. What are you looking for as a response?
Thanks, FYI, I won‚Äôt be using imagemagick which is not good enough.
What are you using? 
Sure, libvips if you heard before
It is good that we have this figures just when the Rails communities are figuring out what to do with Speed and Scale. ORM have managed to solve the ease of use, what we need now is better performance by default. And it seems to be much harder. 
Yep, either way the heavy lifting will be in a C lib, not in the language of the worker, so it's unlikely to matter much which job system you use. Most likely what I would do, assuming I understand your use case correctly, is accept the images from the user and enqueue background jobs in Sidekiq to process them. You can use something like https://github.com/utgarda/sidekiq-status to track job progress and have the UI poll for updates or use web sockets (actioncable) to update the UI as quickly as possible as the images are processed. 
Nice, that‚Äôs useful, I have the same idea on the process, will take a look and upvoted your comment!
This article actually highlights one of the weaknesses of AMS; nested object serialization. Using a jsonapi.org compliant serializer will save you a lot of headaches down the line. I recommend Netflix‚Äôs fastjson_api. At the very least use the oj gem to improve the speed the serializer produces json. 
&gt; true if number &gt; 0 why would you even write that? Why would you not just write number &gt; 0? You're probably right, I was trying to make a point about the value of the `if` expression. Would `return if number &gt; 0` make more sense? &gt; I don't find it easy to read because it's insane code, not due to the unless. Again, the example is just that, an example. You can easily imagine that being. ``` return true unless email_valid? || email_missing? ``` I need to make those examples more obvious. Thanks for pointing it out.
Yea netflix's or personally I prefer Jsonapi-rb. Though there's some hackish things that need to be done to get it up and running properly with Rails. But its worth the effort imo.
I find this article more confusing than anything else. The use cases are pretty straightforward for both if and unless. That said, by all means, do what you are comfortable UNLESS it makes the code less readable/usable to the next person looking at it.
Sorry for the confusion. I hope the updated version is better.
Correct me if I'm wrong, but it would matter in terms of concurrent request handing if using a forking application server (i.e. Unicorn) vs a threaded application server (i.e. Puma) as the majority of the request time would be IO bound for image processing.
wow. I didn't know about reduce being the same as inject... but as a word it makes much more sense than inject!
someone just posted an article on this topic. https://mixandgo.com/learn/ruby-sort-and-sort-by
&gt; Would return if number &gt; 0 make more sense? Not in context, no. Your example methods _always_ return `nil`, regardless of the value of `number` and it doesn't really have anything to do with the conditional. &gt; `return true unless email_valid? || email_missing?` Still doesn't make much sense as you're returning a boolean literal based on the outcome of a boolean expression, just return the result of the boolean expression. More fundamentally though I find these two examples confusing because they aren't functionally equivalent. `email_present? &amp;&amp; email_valid?` short circuits at the presence check, `email_invalid? || email_missing?` doesn't. What code is executed isn't the same, the `valid` check will still run with a missing value in the later example. 