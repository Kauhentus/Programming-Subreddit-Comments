I don't think this sentence is true. The algorith creates a path, this path is twisted and ends in a cul-de-sac (let's call it C1). Then some other (already visited) cell is popped from stack, the algorithm continues from here and the original C1 cul-de-sac remains in the maze, doesn't it? Also see the example here. It has a lot of cul-de-sacs: http://www.foothills.wjduquette.com/blog/archives/3077
I understand "cul-de-sac" to mean "dead end". There are many dead ends in the linked example. What exactly do you mean when you write "braided (contains cul-de-sacs)"? EDIT: I searched for "braided maze" and found that it means "maze with multiple solutions" (which is something very different from "contains cul-de-sacs"). If this is the case, then I don't see at a first glance what could be the problem. Could you provide 1) the code that prints out the finished maze 2) the code that initializes the data structures?
If the files you're trying to change were all identical, you could replace all the old files with a new, updated version. If you're using Linux or Mac, this should be easy: find . -name myscript.lua -exec cp correctversion.lua {} \; If they're not quite identical, searching and replacing text over a bunch of files should also be easy. Most IDEs or text editors have such a function built in. If you're using Linux or Mac, you could try something like this with vim: :argadd **/myscript.lua :argdo %s/search/replace/g | update :qa **Be careful if you try any of this!** I obviously didn't try anything of the above. If you're not using version control (which you should), make a backup before doing anything or you're going to have a bad time. PS: If you have repeated pieces of code scattered all around, you should stop doing this. The main reason being the problem you're now facing: changing the program becomes a difficult and tedious task. Instead, put the blaming code in a separate file and `require` it in the rest of them. Another approach would be using symlinks, if you're in unix. **Edit**: Note that the first thing is a unix shell command, and the second ones are vim commands. Doing this in lua would take more effort. It's just not the right tool for it.
https://github.com/Neopallium/lua-llthreads
&gt; getting the book all formatted/styled nicely. What do you recommend I use? [LyX](http://lyx.org)!
&gt;So...document, or "comment" your code where necessary, or you'll get shot in the ballsack/ovaries (perhaps by yourself...) I certainly hope you aren't going to try and charge people for this. Also, don't write a book targeted at beginners when you are one. There are already books on Lua and there is no real reason a "beginner" should choose it unless they're programming a very specific subset of games.
Lua 5.1 as target may be better, because it's more widely used, also LuaJIT is mostly compatible with this version. I think that book from Lua's creator is easy at all, so if you want to make something easier, then maybe make something for kids. For example writing games with LÖVE (+ setup etc), it may be more entertaining then playing with console that usually most people are scared of and when they see it they run away (anxiety is not so good for learning ;p). About formatting - Lot of ppl make books with LaTeX.
Bookmarking!
Look at [Zerobrane](http://studio.zerobrane.com/) and the tutorials and default supported Lua implementations, pick one with graphics and sound and write to teach around that because vanilla Lua with just text processing isn't very fun and attractive when someone could find any number of Unity books and learn 2D/3D programming in C# or Javascript. Ignore formatting for now, get the book written in plain text, then deal with formatting after you have someone (or ten) read the manuscript to see if its clear and interesting. No sense wasting time formatting, editing, and then reformatting around the edits if you are a terrible writer. Avoid over using exclamation marks, in fact, avoid using them entirely. &gt;So...document, Avoid ellipsis, it shows that you are not having a complete thought. Avoid beginning sentences with "So", it terribly overused and is akin to pausing to say "Uhm" and "uh" before starting to speak. It is a horrible habit of redditors who all sound like preteen girls when they use it. &gt;Go ahead and copy-paste this into a new file, save it with the extension ".lua" and run it. Sorry? Run it? How? Vanilla Lua doesn't have a "run" command like BASIC or [Chipmonkey Lua](http://cmb.retrogamecoding.org/) Don't skip steps, tell the user how they are going to make this file run. It will run automatically when copy/pasted but functions will need to be called to run, so that has to be explained somewhere. &gt;This line right here is a comment. bla bla bla &gt;This is a variable declaration. bla bla bla No no no Put every element of the language under a subtitle, explain what you are talking about in as few words as it takes to explain it. Then show an example. Every few elements, explain the goal output of an example and why steps are being taken, then show the example, use code commenting to explain what is happening in the example. Like this: **Comments** Comments are used to remind the programmer or explain to another programmer what a block of code does. Lua uses a pair of minus symbols, "--", to initiate a comment. Code that follows a comment will be ignored by the program when it runs, comments are for human eyes only. **Variables** Variables are locations of memory that hold some data such as aninteger number (-1,0,10, etc), a floating point number (.001, 1.7, 3.14596, etc), a string of text, a Boolean value of true or false, or even an entire function. By default any variable not assigned a value returns 'nil'. Lists of values can be stored in variable structures called tables explained later in this book (see page xx.) Here are some examples of variables as used in Lua. -- an integer I = 10 -- a floating point number F = 3.14 -- booleans Fact = True Fiction = not Fact -- a text string (note the quotation marks) Name = "Sativan" -- a variable that holds another function myPrint = print -- now myPrint will work just like the built in print function myPrint("Hello"); **Concatenation** Concatenation is the merging of multiple text strings into a single string of text, in Lua this is achieved using a pair of periods ".." between the strings. The following example combines a string of text with a string variable resulting in "Slim Shady" lastName = "Shady" print("Slim "..lastName) &gt;I promise I'm not creepy..." This book isn't about you, take yourself out of the equation. You'll probably want to explain functions before you explain variables since the user will be printing "Hello World" to get their feet wet. Check out [MurgaLua](http://www.murga-projects.com/forum/showthread.php?tid=429) its self contained and jam packed full of libraries for building cross platform GUI applications. It could use a book, maybe it will get wildly popular. [Here's the old online docs](http://www.murga-projects.com/murgaLua/murgaLua.html#A walk through) see how quick and easy it is to make a GUI program. 
use TeX
This isn't the start of the book, before this is still an intro (what is Lua/programming/why Lua is good), installation and about running Lua files (eg. lua somefile.lua) and the Lua REPL (so they'll either know how or be able to read back to that section of the book). The snippet I gave is just a quick taste of how Lua looks like, because people tend to be impatient. I might change my writing style, actually screw that I almost certainly will, people aren't liking it. Again, I know teaching just Lua is boring, but teaching people Lua + something else is way more content. I'm undecided on this one. Another thing I might do is get the basics down and then introduce little projects - for example making a calculator with GUI, using MurgaLua, or later, creating a small game in Love2D. Anyways, thanks for the suggestions and critique.
 for i=1, #t/2 do t[i], t[#t+1-i] = t[#t+1-i], t[i] end for i, v in ipairs(t) do print(t[i]) end ┬─┬ノ( º _ ºノ)
why `t[i]` instead of `v` at the end though?
Cause I copied the code from the OP
..this does what I think you mean it to do, at least in 5.3b: 6 5 4 3 2 1 
&gt;_&lt; I completely missed that, sorry!
That is useful for everyone who is looking for a hands-on way to understand various encryption schemes, thank you. What about RSA and Elliptic Curves though?
do you have more info about them removing math functions? 
Lua random really resolves down to the rand() function that comes with whatever c std library you have. See the link below and look for math_random http://www.lua.org/source/5.2/lmathlib.c.html I really cannot imagine the algorithm rand() would change but it could I guess. I do not think the cstdlib dictates the implementation. If you must be absolutely sure then I would do it yourself. Or use a library that you can get your hands on, like this maybe? https://github.com/LuaDist/lrandom Just a thought.
&gt; Lua random really resolves down to the rand() function that comes with whatever c std library you have. See the link below and look for math_random Interesting. Does this mean that the results on different architectures might differ? Or do all of these C libraries use the exact same implementation? If there might be differences between different machines then that's another argument in favor of implementing it myself. &gt; If you must be absolutely sure then I would do it yourself. Or use a library that you can get your hands on, like this maybe? Yeah, it seems like the only way to be completely sure is to do it myself. I will check out the one you linked to. Thanks! 
&gt; 12.5 seconds vs using the native Lua method which takes 4 seconds The "native Lua" method is just a compiled C routine (`rand`) statically linked into the Lua interpreter. You can do the same thing yourself, either statically linked a C RNG into your interpreter, or dynamically loading one via a shared library. Either way, if you care about performance, there's no reason you need to use an implementation written in Lua. That said, if you want to still to an unmodifed Lua interpreter or not require any external modules, you should look at LuaJIT, which is a version of Lua that dynamically compiles to machine code. It's scary fast.
Getting in over your head is a great way to learn. :) Yes, you can just place the lrandom library within your program's directory. In the Lua shell you can see the default search path in the error message that results from importing a nonexistent module, like "require'dave'", and the first places it looks is in local directories. PUC Lua (the standard Lua from lua.org) itself is so small that it makes sense to distribute along with your program as well, to lower the barrier of entry. To add to what others have stated, LuaJIT is an extremely fast implementation of Lua; it uses the very best techniques to translate Lua into CPU instructions. That said, it will only help if your program's execution is spent on Lua code, so if your only complex code is random number generation then using the lrandom library will provide bigger improvements.
http://www.lua.org/manual/5.3/manual.html#8.2 &gt;The following functions were deprecated in the mathematical library: atan2, cosh, sinh, tanh, pow, frexp, and ldexp. You can replace math.pow(x,y) with x^y; you can replace math.atan2 with math.atan, which now accepts one or two parameters; you can replace math.ldexp(x,exp) with x * 2.0^exp. For the other operations, you can either use an external library or implement them in Lua. I guess they weren't removed just deprecated.
There's a compatability lib that will get you up to [5.2 compatability](http://luajit.org/extensions.html). LuaJIT was original written for Lua 5.1, and didn't bother to really maintain compatibility because a lot of the changes were pointless bullshit (infix bitwise operators are nice, though). The important question is what you want your project to be: 1. Lua code only. You rely on people to have or download the right interpreter. 2. Lua code plus the interpreter required to run it. If you go with option #1, you should probably stick with Lua 5.3 features. If you go with option #2, I'd probably use LuaJIT.
I'm curious as to what the goal of the library is being licensed under the GPL. Being such a small and straight forward library means I'd be better off just implementing it myself. 
&gt; Neither solution requires users to compile anything. But if I understand what's going on, then I have to compile the library for the various platforms myself and make those available for download, correct?
&gt; I have to compile the library for the various platforms myself and make those available for download, correct? Yes, but I wouldn't require users to do that separately. I would include the Lua interpreter in your app's package as well. That way, when Lua 5.4 comes out, it doesn't break your app. That's how Lua was intended to be used, anyway. That's why it's so small. In fact, if it was me, the "Lua" executable would be called pme.exe (Platonic Music Engine) and it would have a few tweaks to run my Lua source from a subfolder, so the user would just download the app, unzip it somewhere (or install it, if you'd prefer to supply an installer; very easy to make), then click "pme.exe" to run it. Just as you don't want people to have to compile source, you don't want to force people to assembly the moving parts of your app: "Download Lua. Download the RNG module and put it &lt;here&gt;. Download the source and put it &lt;here&gt;. Alter your PATH variable to include &lt;blah&gt;. [so on and so forth]". You want "Download. Click &lt;blah&gt;".
As it stands there is one program called music.lua and a folder that contains all the files necessary for running the software (functions, tables, etc). Right now there are a couple of big programs needed that the user must install separately in order to take full advantage of the PME: LaTeX and Lilypond. There are other smaller programs as well (Timidity, Sox, lltag, etc). The Platonic Music Engine is primarily for programmers *really* interested in music and composers *really* interested in programming. Eventually there will be an online version for "regular" folk to use (and integrated into the bigger project I mentioned in my original post). My point is that most people who are going to download it and be able to use it should be able to handle the technical requirements of installing the other programs. That said, I think your overall approach is still better. I only have access to Linux machines and have absolutely no idea if this will run on Mac or Windows but I'm guessing there will need to be tweaks to the various files in order to get them to run on the different platforms. So I probably will have to create complete (nearly complete -- see above) zipped packages for the different platforms.
You are right, I was digging around about it last night, and this seems like something not doable for someone of my skill, especially seeing as how some stats have indeed been suppressed. It seemed like something handy to have tho. Let's hope someone capable can take the work.
Thanks for the link -- that's cool stuff! &gt; Also, another thing that might be nice, is instead of having completely random numbers, have some sort of pattern to it. Like a sine wave of notes with more random waves layered on top and then random shifts to the pitch of the notes. The random numbers are actually vital to the piece! The user supplies some data (like their name) which is converted into a number via a simple hash algorithm.That number becomes the initial seed for the random number generator which generates all the MIDI parameters for the music. This music, the Platonic Score, is intended to be as pure a reprensentation of the original data as possible. Something unfiltered by my own likes or dislikes or by what anyone considers "good" or "interesting" music. But once that first piece is generated then the software allows the user to apply any number of filters or "style algorithms" (terminology I use in the software) to make that initial random-sounding music to sound more musical and maybe even good (to them). A good example can be found in my sub for the project [here.](http://www.reddit.com/r/platonicmusicengine/comments/2iapwm/first_progress_report/) Listen to the link called *Platonic Score.mp3* and then *Piano Bach Invention.mp3*. The latter piece is the Platonic Score as manipulated by a number of different algorithms to produce something that's pretty close to conventionally musical (that's a simplistic approach that was intended as more of a proof of concept -- I'm working on a more complicated version of that style algorithm right now). I think this approach makes my software unique. The way it allows for any kind of style algorithm to be developed using any aesthetic and apply to a piece of music intimately connected with some initial piece of data. That said you are the second person to bring up sine waves and my project in the past week. I haven't figured out how to do that as a style algorithm yet but I am thinking about it.
but the main question is: have you encountered with the default algo, or any other for that matter, inconsistency in output for a fixed seed? It really seems a type of premature optimization type of problem. I realize it is a critical requirement for your project, but unless proven otherwise I will trust proven for years algo than self cooked ones!
I'd love to switch but it really sucks not to have LuaJIT :(
You just blew my mind. Thank you!
Imagine my joy to think that someone had ported the Vectorial SIMD library to Lua https://github.com/scoopr/vectorial But I guess this is not the same Vectorial. (Lua doesn't support SIMD, come to think of it) Keep using GPL though. Even if a library is small, it doesn't need to be proprietary.
Just a heads up that this is for 5.1. I found it interesting though, not too sure if things have changed in 5.2 or 5.3
Are you on Windows? It's (generally) easier to download binaries (such as [LuaForWindows](https://code.google.com/p/luaforwindows/)). 
Just curious what is your purpose of wanting to learn lua? Usually lua is embedded into another program like a game, because lua by it self doesn't have much of a purpose.
lua by itself can be used with stuff like love2d which is very easy for beginners to pick up programming games with
Yep! I'm a composer and not a programmer but have managed to put the /r/platonicmusicengine together in Lua. I tried several languages in the beginning and Lua was the one I was able to understand the easiest and get the results I wanted from the quickest. Whether I should have spent some more time looking at the other candidate languages is an interesting question but I'm very happy with Lua and the progress I'm making. There is the odd library/command I feel I'm missing but an internet search generally turns up a solution. (And all this without anything like Love2d).
No idea if this is the right place, either, but as it happens I just started playing with Computercraft. It looks like there are a few ways to export code from Computercraft - [this thread](http://www.computercraft.info/forums2/index.php?/topic/7858-how-do-i-export-code-computer-craft-to-pc/) has details on how to export to a file that notepad++ can view. There's also a pastebin API for import/export, though I don't know much about it.
Lua source code (and all programming language source code in general) is just a text file. There is nothing special about it. It just "happens" to be in a syntax that the lua interpreter can understand. Computercraft also defines additional lua functions so you can interface with the turtles. But basically you can create/edit lua code that uses those commands anywhere where you can edit text because a source code file is nothing more than text. As far as transferring the code between notepad++ and your game, the best way is probably the pastebin api. It will work on both servers and clients (assuming they set everything up properly). This CC thread has pretty good info if you encounter any problems along the way - http://www.computercraft.info/forums2/index.php?/topic/2530-how-do-you-use-pastebin/.
 I'm looking into ZeroBrane right now. Is this the preferable method on Windows? What is the difference between using something like ZeroBrane and compiling it yourself? Is there a benefit to compiling it intead of downloading an editor? 
Here are some helpful resources: ~~[Learn Lua fast](http://stackoverflow.com/questions/8092382/learning-lua-fast/8097810#8097810)~~ (I'm super sad to see that this has been removed, but thank the lord for [the wayback machine](https://web.archive.org/web/20140802221313/http://stackoverflow.com/questions/8092382/learning-lua-fast)) [Learn Lua in 15 minutes](http://tylerneylon.com/a/learn-lua/) [Lua cheat sheet](http://thomaslauer.com/download/luarefv51.pdf) [Lua Rosetta Code](http://rosettacode.org/wiki/Category:Lua) [Lua: Good, bad, and ugly](http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts) [Functional Intro to Lua](https://pragprog.com/magazines/2013-05/a-functional-introduction-to-lua) [Moonshine Lua VM](http://moonshinejs.org/) [Awesome-Lua](http://www.reddit.com/r/lua/comments/2dsm31/awesomelua_a_curated_list_of_quality_lua_packages/) [ZeroBrane](http://studio.zerobrane.com/) [Lua Unofficial FAQ](http://www.luafaq.org/) EDIT: Although not vanilla Lua, [Terra](http://terralang.org/) is really cool too. If you are looking for help using Lua and C/C++ together, there are plenty of articles out there that you can get via Google. Also check the sidebar to the right for other resources.
If the installed directory is a standard PATH location it should work fine. The pCall is different than your exist/if...then thing because it protects the program from crashing if the call to execute goes bad, like missing a file. Also it doesn't look like os.execute returns true/false but a 1 if the program ran successfully and a 0 if there is an error. Ah ok, the which command works on Windows, lets see, this appears to work. exist = os.execute("which Lilypond") -- find if Lillypond exists if exist ~= nil then os.execute("lilypond with command line arguments") else print("please install Lilypond") end If you are still crashing then you should enclose this in a function and handle the exceptions for whatever errors you are running into using pcall. [This might help you](http://stackoverflow.com/questions/132397/get-back-the-output-of-os-execute-in-lua) if you need to get data back from lilypond to use in your lua program. 
&gt; Also it doesn't look like os.execute returns true/false but a 1 if the program ran successfully and a 0 if there is an error. I wonder if that's a change for 5.3 then as that code works for me (and the 1 vs 0 doesn't)? &gt; Ah ok, the which command works on Windows, lets see, this appears to work. Really? That's very good news. Given what /u/Norfirio said above can you confirm that the following works in Windows: os.execute("lilypond -v") &gt; The pCall is different than your exist/if...then thing because it protects the program from crashing if the call to execute goes bad, like missing a file. OK, I understand and that is definitely a better solution.
Yeah looks like os.execute in 5.3 returns true or nil. Weird that they would change the language and break ten years worth of code. os.execute("lilypond -v") does not work with the default install on windows. C:\Program Files (x86)\LilyPond\usr\bin\ or whatever the actual install location is, needs to be added to the PATH variable. I suppose copying and merging the bin folder to C:\bin would do the trick to. The command produces this in the console: GNU LilyPond 2.18.2 Copyright (c) 1996--2012 by Han-Wen Nienhuys &lt;hanwen@xs4all.nl&gt; Jan Nieuwenhuizen &lt;janneke@gnu.org&gt; and others. This program is free software. It is covered by the GNU General Public License and you are welcome to change it and/or distribute copies of it under certain conditions. Invoke as `lilypond --warranty' for more information. 
 What a wonderful list of resources, thank you so much! A question about Terra: What does "low level system programming language" mean? Is it meant to be tacked on to more robust programming languages like C or C++?
 This is incredibly informative, thank you for your time and your write up. I greatly appreciate it. P.S. when something is described as "batteries included" - is that implying that it comes packaged with a variety of libraries?
&gt; or whatever the actual install location is, needs to be added to the PATH variable. &gt; I suppose copying and merging the bin folder to C:\bin would do the trick to. Thanks for checking this stuff for me. So how would I go about doing either of these? Obviously this is specific to Windows so I would need to be able to detect that this is being run on Windows -- how do I do that?
The command: set PATH=%PATH%;C:\Program Files(x86)\Lilypond\usr\bin works perfectly in the windows command line but through Lua it fails to do anything. Well almost perfectly, PATH updated to add lillypond while in that console window, but once that window was closed then PATH as checked through Control Panel &gt; System Security &gt; System Advanced Settings &gt; Environment Variables didn't return the new path. I thought this would work but it doesn't and I don't know why. -- get the environment variable PATH O = os.getenv("PATH") -- get first two characters of PATH S = string.sub(O,1,2) -- where we want look for our application P = "C:\\Program Files(x86)\\Lilypond\\usr\\bin" -- if PATH is not nil and "C:" is the start of PATH if S ~= nil and string.match(S,"C:") ~= nil then -- if Lilypond path is not in PATH if string.match(O, P) == nil then -- add the Lilypond path to the original PATH variable C = "set PATH=%PATH%;"..P os.execute(C) end end print(os.getenv("PATH")) Most likely you'll have to concatenate the path to your os.execute command string. You may need more libraries than the standard Lua to perhaps ask the user to find the installed Lilypond and then use that found path, since vanilla Lua doesn't have any means of browsing files. Copying files on Lua should be as simple as using the cp command on unix and [copy](http://ss64.com/nt/copy.html) command on windows through os.execute(). 
You're welcome. Yes, "batteries included" usually means it comes with additional, popular libraries. 
So uh.. what line is the error on?
I think this pretty much sums it up. Just consider how long it took before javascript, another embedding-targetting language, which was always way more popular than lua (because web), is way more familliar syntax and semantics-wise to the average programmer (C-style syntax, 0-indexed arrays), and comes with way more "batteries included" in its standard library took before it took off as standalone-language (which first really happened when node.js arrived.)
Thanks for your answer :) Interesting how you link to Love, as I've been learning that recently, and am currently working on a compiler for portable bytecode using LuaJIT's string.dump() extension.
It also integrates really well with C++, which is often used for game engines.
It didn't answer OP's question, but it would certainly make it helpful for us to answer OP's question if the notation was consistant. Also using "_" to seperate words in the identifiers, or capitialising the first letter of each next word would also help a bunch in reading the code, example: function slide_puzzle.slide() or function slidePuzzle.slide();
And then you answer yourself: "luajit"
Because it doesn't have rich and powerful sponsors. Fortran and COBOL had IBM, C/C++ had AT&amp;T and Microsoft, Basic and C# had Microsoft, Perl had O'Reilly, Javascript has all the browsers, Go and Python have Google, Objective-C and Swift have Apple... Java had Sun and Pascal/Delphi had Borland. When the 2 companies flunked, the languages flunked too. A.F.A.I.K., the only language that became mainstream without powerful sponsors is Ruby.
Why not just use it (or not) and not base the decision on popularity? If it's a good language that suits your needs, then go ahead If it is lacking and no other users have filled in the hole with something, then consider other languages. 
http://luajit.org/sponsors.html
Good one
Is there any specific reason why, out of curiosity? The only place that I've ever seen lua code personally is in Paradox games, but I'm not a big gamer. 
Wait, so lua doesn't have multidimensional arrays? 
Also, everyone who uses Lua tends to like it :) So having used Lua in one game, they'll tend to want to use it in another when the need for a scripting language arises again. It probably spread across the games industry that way.
What kind of memory are we talking here? Like working memory or storage memory? 
I guess both, but I was referring to RAM.
Tim Caswell, Rob Emanuele and I are working on Luvi and Luvit2. Luvi is an executable with Luajit and libuv built in. We optionally ship binaries with openssl and zlib support for Windows, Linux (x64,arm), and OSX. The Windows binary has support for windows services. Often times ecosystems depend on a good package manager, so Tim is working on a package manager called 'lit' for Luvi and Luvit packages. `lit make` will package the luvi executable, compress the lua scripts, and attach them onto the executable so only one executable needs to be distributed. Luajit has great FFI support, so if you want to make a game with SDL, or make a async TCP server then it is super easy. No compiler needed! :) The project is coming along nicely, and any help is appreciated! https://github.com/luvit/luvit https://github.com/luvit/luvi https://github.com/luvit/lit
I like lua very much also, I made my own wrapper to SDL before I saw LÖVE. I prefer mine I definitely like how it interfaces with C. It is simple to call the C functions and to call out to lua from C. 
I disagree, the purpose of the language is as an extension language. Allowing a program to create sockets if that isn't the intent could create dangers. It is not intended first to be a system level scripting language for general purpose programming, although it can be used as such. All extensions such as networking belong in a separate package. One of the benefits of lua is that it is small and fast and doesn't include the world by default. If you want the world you can add it back piece by piece and get just what you want and no more.
Why you think Lua's a shitty language?
"Thing should be as simple as possible, but not simpler". And Lua is simpler. It is too simple. Yes, it is still turing complete, and you can do every thing in it. And first time you think: hey, it is very simple, i like it!!! But then you realize a number of bicycles you ought to invent, and number of "unusuals" you ought to deal with.
Why is simplicity bad in a language? Why is Lua "too simple"? Simplicity makes it easier for a beginner to pick it up, and allows an experienced programmer to write and debug programs more quickly. I'm failing to see the catch. I get that higher-level languages tend to be far slower than the lower-level languages, but Lua with LuaJIT is very quick.
Simplicity is not bad. Over-simplicity **is** bad. Look at the Scheme - it is also "too simple" language. And it is also doesn't have wide adoption. If you use "over-simplified" language, then you should invent standard ways to do things. And then encourage other people to use your standards. Or choose your standard among many invented by other people. Every successful language or framework gives to programmer standard ways to do common things. If language doesn't give it, it will not be successful. What is standard way to have real array in Lua? with ability to store "nil" and get real length? What is standard way to have real hashes? not only for numbers and strings. What is standard way to have OOP? There is one: "you don't need OOP, use metatables". But metatable doesn't handle all standard use cases. Also, there is no standard library to present Lua as a standalone language. No standard library to show "standard way of doing things". Python says: "there is always one standard way to do a doing". Ruby says: "there is even standard way of *naming* things". What does Lua say?
Lets copy comment, cause i were too emotional at a root of previous comments branch. Lua is too simple. Simplicity is not bad. Over-simplicity **is** bad. Look at the Scheme - it is also "too simple" language. And it is also doesn't have wide adoption. If you use "over-simplified" language, then you should invent standard ways to do things. And then encourage other people to use your standards. Or choose standard among many invented by other people. Every successful language or framework gives to programmer standard and convinient ways to do common things. If language/framework doesn't give it, it will not be successful. What is standard way to have real array in Lua? with ability to store "nil" and get real length? What is standard way to have real hashes? not only for numbers and strings? What is standard way to have OOP? There is one: "you don't need OOP, use metatables". But metatable doesn't handle all standard use cases. And there is no standard way to do functional programming either. Python says: "there is always one standard way to do a doing". Ruby says: "there is even standard way of *naming* things". What does Lua say? Also, there is no standard library to present Lua as a standalone language. No standard library to show "standard way of doing things". Note that javascript were not such succesfull at Client side until "standard" libraries like jQuery, Prototype and others. And it were completely unsuccessful on serverside before "standard nodejs" become real. And CoffeeScript makes javascript convinient.
Woah, didn't realize that Lua is so old
Exactly what I was looking for! Thank you very much!
If you want a similar setup with no effort required, use [repl.it](http://repl.it/). Perfect for learning the ins and outs of Lua.
Ok that's all fine and cool. But what about when I start writing bigger/more complex scripts? How would I run those? I'm useing sublime text 3 if that matters.
Follow [this tutorial](http://www.thijsschreijer.nl/blog/?p=863) to install Lua on Windows. 
Cool. Thanks!
If you use the Love2D API then you can drag and drop your code onto the interpreator and it will excecute the code, but of course that'll be a bit more complicated and will use a window instead of a console, so you will have to draw the text to the screen too.
Oh you'd be surprised how pretentious people are. Garry's Mod creator cited that as the number one reason for why he fell out of love with Lua. 
[zerobrane studio](http://studio.zerobrane.com/) will let you run different variations of Lua from the text editor/IDE with the click of a button. Basic Lua (5.2 I think) comes pre installed with it, you can download and add addition types of Lua software if you want. One weird thing I've been trying to figure out, is that drag and drop of files on the Windows desktop gets disabled by running zerobrane, hitting the escape key should fix this weird bug though. [Here's some files for Sublime and Lua](https://github.com/rorydriscoll/LuaSublime) 
Nice little article about your experience with the language. I've used Lua for a lot over the years and have over come a lot of hurdles like yours. It is kind of surprising that no one has sat down and made an editor that can handle Lua like we all want one to. It is feasible, it would just be hard and a pain in the butt to do. Maybe when i'm bored i'll give it whirl, after all i like taking on those types of challenges. I cannot really agree with your performance statements, though they are understandable after only 1 year using it. While there is a performance hit in some cases, it definitely shouldn't be that extreme if you are using LuaJIT. LuaJIT isn't just about the JIT, it also has the FFI for C which gives you structs, pointers, typed variables, and unmanaged memory. So knowing when to use the FFI in your LuaJIT code is a very very large part of using LuaJIT. I know you reference C++ in your article, but you can still interface with classes with the FFI if you do some clever struct work (after all, a class really is just a glorified struct...) Yes, if you just slap some Lua code into a LuaJIT environment it should run faster, but you have a lot more options to optimize. There was a mailing list post about 4x4 matrix multiplication some time ago that I found while working on a game written entirely in LuaJIT for the OculusRift. Lua has a hard time making matrix math fast, and so does LuaJIT, but I managed to massage and tweak the code with the help of the FFI to make it faster than it's basic C counterpart (without relying on DirectX libraries to do it for you, which were still faster by a small margin). As with normal Lua, you need to be very very careful with global variable access as that can cause some extreme performance hits itself. I have made it a personal policy to avoid globals whenever possible and it's saved me several times over. Most of your slow down when using LuaJIT will actually come from the way you are interfacing with the rest of your application b/c that will generally be where most, if not all, of your bottlenecks are. Which is also another area were you need to be careful.
What is the length of following arrays: a = {1, nil, 2, nil} b = {1, nil, 2, nil, 3} c = {nil, 2, nil, 3} d = {nil, 2, nil, 3, nil} ? What is result of: h = {} h[{1,2}] = 3 h[{1,2}] + 1 ? Can you remember (without looking in a book) how to use metatables for inheritance? How do you make multiple inheritance (like python) or mixins (like ruby)? Which lua's OOP library considered to be "Standard de Facto"?
Are you trying to animate the move? Because Lua isn't asynchronous (usually). Love will run the move loop to completion before updating the screen again. If you want to see the movement happening you'll need to use frame events to update the position. But getting to what you've actually written, I can tell you that there's a logical gaffe here: while hero.x ~= x do if hero.x &lt; x then hero.x = hero.x - 5 elseif hero.x &gt; x then hero.x = hero.x + 5 end end The loop condition guarantees that `hero.x` and `x` are unequal. Thus when you test `hero.x &lt; x` the false branch is guaranteed to be `hero.x &gt; x`. Thus the second test will always be true. You're wasting time and verbosity by testing for it. There's another rather obvious flaw in there that I'll let you see on your own because it'll be more fun to see how hard you smack your head when you realize it. Hint: the loop never finishes... well, almost never. 
There's no such thing as perfect. But it suits me better than anything I've found. It's very practical though. What being ANSI compatible means to me is that I can compile it on my Raspberry Pi or Terminal IDE on Android or even MS-DOS with some Turbo C compiler from the 80's. The implementation is outstanding, and the language itself is simple, easy, and flexible too. Why complain so much?
The question were: why Lua hasn't get wild adoption? Answere: it is not as convinient and comfortable as more popular languages for average programmer. If you found Lua convinient and comfortable for you, then you just not among "average programmers". Some found Scheme/Lisp/Fortran to be comfortable language, but there is no much of them.
So there are 2 issues here. 1) Your loop will never satisfy the while statement (in other words, it will be an infinite loop) because the chances that you can get hero.x == x by only incrementing by 5 is incredibly low. You need to have something that checks if it is close enough, like if (math.abs(hero.x-x) &lt; 5) then hero.x = x end This way you don't need to worry about him overshooting it, and you don't need to mess with changing the movement speed. 2) You probably want the character to move at a certain speed (say 5 here) so that he doesn't instantaneously appear at the clicked spot. Right now it would happen instantaneously because you don't allow more frames to draw in between your while updates. So you need to save some of that information else where, do one movement, allow everything else to update, come back and do another movement, update some more, etc ... until you satisfy while. One way to do this is with a dedicated tweener. A tweener is an animation term for inbetweening. You have the start point, the end point and how long you want it to take and the tweener does the rest. In this case you have a fixed speed so you want it to use that instead of time. Love has some tweening libraries, but I haven't ever used them. I made my own for my own needs, but I wouldn't recommend that until you've used on and understand how it works. The other way is to just track everything in the class. So you may have some extra properties like hero.destination = { x = 0, y = 0 } hero.clickmove = false hero.speed = 5 And then your mouse click will instead do something like this hero.destination.x = x hero.destination.y = y hero.clickmove = true And then you should have an if statement in the update() loop that checks if hero.clickmove is true, and then it moves it closer to the destination by a certain amount (based on the speed). And the last thing the if should do is check if it hit the destination, and if it does then it should set hero.clickmove to false. For the movement, instead of adding the speed to each direction, maybe you can do a vector, find the unit vector from the original point to the destination and then multiple by the speed, that way the character will go directly to the point clicked instead of moving in a way that may look weird to the player. I could write out how I would do this, but think about it for a bit, you may come up with something that works for you. Also, one thing you may want to consider is what would happen if you click somewhere, and then try and move using the keys? You should find a way to stop the clickmovement so that the player isn't fighting it. I hope I didn't give too much away, its good to learn and explore and hopefully I didn't hand you a solution so you can still 'struggle' through it a little.
&gt; As you can probably tell, I'm new to Lua :P I think I used the ~= because I was looking at the documentation and thought it said something about it being the inequality comparison. This is correct, but it's not the issue I was drawing attention to You need to reanalyze the logic diagram of the move function. -- Is hero.x the same as x? while hero.x ~= x do -- No it is not end -- Yes it is The values will never be equal inside the loop. So when you next test whether it is less than or greater -- Is it lower than x? if hero.x &lt; x then -- Yes it is else -- No it isn't -- Is it higher? if hero.x &gt; x then -- Yes it is else -- No it isn't ... But how? end end I split the `elseif` to make it clearer. What possible way would the program get to the "But how" part? If you had made the logic diagram before the code this would have been obvious. As would this: -- Is it lower? if hero.x &lt; x then -- Yes. Make it... even lower? hero.x = hero.x - 5 else -- No it is higher. Make it... even higher? hero.x = hero.x + 5 end But although this is all worth discussing, it's not in fact what you want to do. If you're trying to simulate moving one step at a time then you have to use an asynchronous method that updates on each frame. local move_to_x = nil local move_to_y = nil function moveTo(x,y) -- Don't actually move yet, just make a note of where to move to if x then move_to_x = x end if y then move_to_y = y end end function update() -- Along with the other usual frame update stuff -- Is there a move in progress? if move_to_x then -- Moving horizontally local distance = move_to_x - hero.x if distance &gt; 0 then -- Moving right if distance &gt; 5 then distance = 5 end hero.x = hero.x + distance if distance &lt; 0 then -- Moving left if distance &lt; -5 then distance = -5 end hero.x = hero.x + distance else -- Arrived at destination. move_to_x = nil end end if move_to_y then -- Moving vertically local distance = move_to_y - hero.y if distance &gt; 0 then -- Moving down if distance &gt; 5 then distance = 5 end hero.y = hero.y + distance if distance &lt; 0 then -- Moving up if distance &lt; -5 then distance = -5 end hero.y = hero.y + distance else -- Arrived at destination. move_to_y = nil end end end 
Wow... again, thanks so much for the help!
This is on Windows?
Yes. It is.
Thanks, but if I understand correctly, `io.popen()`is not available in Windows. I tried anyways and failed. Is there a way to make it work with Windows? If not, are there other options?
Hmm, maybe write a C Lua module?
Hi! This is the new site for luarocks.org. It still redirects to the rocks.moonscript.org URL because of the SSL certificate and server configuration. This transition was done in a hurry because of the latest outage of luarocks.org, but it's something that has been in the plans for a while now. UPDATE! The documentation has just moved here: https://github.com/keplerproject/luarocks/wiki/Documentation
Maybe you can find a module with that functionality in, such as lua-posix (unsure of this is on Windows though).
[Static typing, which is being done here](https://github.com/andremm/typedlua), but with generics.
Surely you can't be serious about performance? LuaJIT describes itself as one of the fastest dynamic language implementations in the world, and as far as I'm aware, it's actually the fastest; only the big JS engines are anywhere close to it.
0-indexed arrays (an idea for Lua 6.0, as it breaks backwards compatibility).
Goto is more flexible
Goto is an abomination.
- Compound assignment operators `+=`, `..=`, etc. There is ambiguity surrounding how they should invoke metamethods, but they're still desirable in instances where you may have deeply nested tables, which is not uncommon in Lua, especially with the whole roll-your-own approach to OOP. - `%b` pattern not capturing delimiters. I can't think of a single instance where I would use `%b` to capture something, and NOT have to strip the ends off the resulting string. - A character class denoting a UTF-8 codepoint, rather than 5.3's `utf8.charpattern`. - If possible, better module finding: as a fallback, look for the module in (or relative to) the path *where the Lua script itself resides*. This would allow us to do Apple-style library bundling, which simplifies small projects considerably. - Generic radix number literals. Like, `2r10` for the number 2 in binary. Alternately, binary number literals, like `0b10`. - No more automatic coercion between numbers and strings. At best this is lazy, as worst it introduces subtle and hard-to-find bugs. - `collectgarbage` is a terrible function. It does several things in one, and is incorrectly named. The functionality should be split into appropriate and separate functions, and probably go in `debug`. 
No, it was my OOP professor who told me that goto is poor use of computer architecture. I've never had a reason to use goto ever, and I don't think I will have.
If you want continue, **you literally have a use for goto already**. And I'd seek a refund on your education because your "oop professor" sounds like a fucking moron. 
Your professor needs a new career. "continue" and "break" are implicit gotos, except without the nice label to make it clear where it goes. If you've never found a situation where goto has made your code cleaner, simpler, and easier to maintain, you've not been programming very long. Banning it is just religious jingoism. (I use it all the time in C for cleanup in case of error; reduces copy and pasting of duplicate clean-up code -&gt; easier to maintain.) 
Interesting, could you give me a short example where you'd use goto? (somewhere that's not obvious) And yeah, I'm still a 1st grade software engineering student and the only language I know well is Java, so you could say I'm a bit of a noob.
Sorry if I was a dick before. It's late and I can't sleep and I'm grouchy. Here's a canonical continue using `goto` in Lua: for i = 1,10 do if i == 2 then goto continue end print(i) ::continue:: end `goto` also has the power to implement things like "break N levels", "break all", the somewhat common `goto fail` idiom, etc. If you can emit all these features using a single keyword, it's prudent to do that instead of complicating the implementation with multiple single-purpose things. `goto` is commonly criticized for encouraging unreadable and messy code. I think that's a terrible argument. Inexperience and/or laziness are what encourage unreadable and messy code. And those things will happen with or without `goto`. `goto` is a powerful feature and has many legitimate uses. 
That's easy to add yourself by putting a metatable on the global environment.
TCP library will never happen; Lua's written in ANSI C. And not even POSIX defines a socket interface. There are token filters which are an unofficial hack, but I've used them in the past for macros.
Interesting. Here I'd use `break`, but I guess that's just the same as using `goto`. Thanks for the help! :)
`require 'pl.strict'`
This is a very interesting idea. Thank U
Probably string interpolation à la Python's str.format or CoffeeScript's "#{foo}".
I would highly recomend going back and reading Dijkstras's original "goto considered harmful" article. Its a very easy read (2-3 pages that read like a modern blog post) and you will see that the real problem is not gotos by themselves but *unstructured code*, which is what you get when you use gotos for everything. Using goto to brea out of loops in a structured manner is perfectly fine.
While I agree that this would be great to have for some reasons, I doubt it's going to happen, as ownership passing is basically something the entire API is designed to avoid...
 getmetatable("").__mod = function(a, b) if not b then return a elseif type(b) == "table" then return string.format(a, unpack(b)) else return string.format(a, b) end end "foo %s bar" % "cheese" -&gt; "foo cheese bar" "foo %s %d bar" % { "cheese", 42 } -&gt; "foo cheese 42 bar" 
The reason LUAJIT can be so fast is that it targets machine language. This requires coding a new backend for every different processor platform and is incompatible with PUC Lua's development model, where everything is coded in ANSI C for maximum portability.
I agree that fragmentation is undesirable, and you're spot on about the bus factor; there are billion dollar companies hinging on LuaJIT's performance - scary thought! I also agree that a factor of 3 would be significant, but I think you're overestimating that significance and underestimating the difficulty of achieving it. The decision between the two boils down to whether, in a particular system, Lua's performance is a limiting factor. When it is, people will use LuaJIT. When it's not, how much reward is there to spending a bunch of time making the interpreter faster? There are certainly cases where it could make a difference, but in most systems, there are one or two major limiting factors, and the rest is pretty insignificant. That's all to say nothing of how hard it is to come by a 3-fold performance increase in such a mature project.
1. Easier way to include modules in relative paths. 2. Variables are local as default, use "global" to declare globals.
Local by default does not work with lexical scoping. With local by default, which upvalues are accessible? Any of them? None of them? When are upvalues shadowed by locals and arguments? Local by default would make scoping very unintuitive and less powerful than it currently is. I know people see global by default as an inconvenience and a source of mistakes, but local by default is not the solution. Really, the **real** problem is that undeclared variable access is OK. Really, the cause for mistakes are, you forgot to declare the variable with "local" (causing you to leak it) or you misspelled a variable name (causing you to lookup the non-existent global by mistake). The real problem in both cases is that undeclared access is allowed in the first place. Note that I don't consider this a problem. I'm fine with global by default. I'm fine with undeclared access. I like the simple mechanism that the global environment is just a table, and that tables allow undeclared access. And note that this problem is solvable with one line: setmetatable(_G, { __index = error, __newindex = error }) Now you rawset and rawget your globals. No more mistakes. Think that's ugly? Wrap them in functions called 'export' and 'import' or something. Or write a slightly more flexibly mechanism where _G's __index and __newindex allow for regular access as long as the keyword name has been passed to a function like `declare('x')` first. 
Lua 5.3 has [string.pack](http://www.lua.org/manual/5.3/manual.html#pdf-string.pack) and [string.unpack](http://www.lua.org/manual/5.3/manual.html#pdf-string.unpack).
I'd really love symbols as valid variable names, similar to ruby. Then, we could have functions with the same names, but use symbols to denote action. There is a common convention in Ruby to append ! to a method that alters the parameters, and ? to methods that return a bool. However, lua doesn't pass a few types by reference (string, number). A way to denote that a value should be passed by reference would be great. 
math.randomseed has TERRIBLE performance for some reason. That would be a nice fix.
The problem with that is that strings are interned in Lua. So there is only ever one instance of every unique string. Which is also the reason why string comparison is a very fast operation in Lua (since it basically only has to compare a pointer). I'm not sure how that would work together with your suggestion. 
&gt; Speaking of keywords, I thing I forgot is that I wish they changed the "type" function to "typeof", many times I wanted to use type as a variable name. That's totally arbitrary. And if we can be arbitrary, I'd rather Lua be *less* like Javascript than more. ;) `type` is not a reserved keyword anyway. It's just a library function. You can use the identifier if you so choose. I've used it as a local before, but seeing my editor color it as a keyword reminded me that I should be using more descriptive identifier names, like "actortype" or "accounttype", not just "type". 
You might have a look at [moonscript](http://moonscript.org/). It's a language that compiles to Lua and adds some interesting features. Anonymous functions work like this: foo = (x) -&gt; print(x()) foo(-&gt; "bar") which compiles to local foo foo = function(x) return print(x()) end return foo(function() return "bar" end)
Moonscript is too sugary for me though. I had a similar issue with coffeescript in my JS days.
I know, but it's handy. In a specific context, you know what type is without having to explain more, and type is something that comes out a lot, at least in my experience.
Thanks, hadn't seen that somehow. This is just what I was looking for!
Also, the ability to call C functions directly and operate directly on C data, as in LuaJIT.
A good Lua code has no globals. Use tables to do basic namespace. Break your code down into discrete module that can then each be `require()`d by each other to stitch together the overarching functionality. -- M.lua: local M = {} -- I'm a module namespace! M.foo = 'strings are cool!' function M.bar() print("I'm a public function of this module!") end local function baz() print("I'm a private function of this module") end return M -- N.lua: local N = {} local M = require('M') function N.foo() return M.foo() end return N You can still OOP in Lua, and it's outlined in the book [Programming in Lua](http://lua.org/pil), along with much other useful information. If you're using the language in any good capacity, I would strongly advise picking up a copy. It's the authoritative introduction to the language, and the best resource out there. Make sure to get the correct edition for the version of Lua which you are using. 
There is an add-in called strict which uses the metatable functions to catch the bug of making something global when you meant it to be local.
Thank you! This seems very obvious in retrospect. I will pick up that book. I dove right in and started coding without knowing what I was doing. This resource looks perfect.
Because out of the box it's less useful for a lot of the sort of things you use scripting languages for, or at least it was. Perl has been used everywhere for so long because everyone had it installed and everyone had CPAN ready to install new packages. Eventually python started to catch on on the back of being "perl, but readable." 
It's possible and it *is* done. People have written web servers and stuff with Lua and extension libraries (see the Kepler project). And whether Love is extending or embedding is a matter of opinion. But the two things that makes people use Lua for embedding mostly are probably these: * it was designed to be used that way; * the creators don't urge people to do extending instead of embedding (which other scripting languages do).
It absolutely can be used as a standalone application. The [Prosody](http://prosody.im/) XMPP server is a great example of that. The main thing against it is, as Ubertekk stated, the fact that there aren't as many readily available high quality libraries for lua as there are for perl or python or ruby (or whatever) so there is likely to be a cost associated to going this route that there might not be going with other languages or embedding lua. One other point, many things that "embed" lua are actually just getting things set up to the point that lua can take over and then most of the application/etc. happens once lua has been brought into play.
Lua 5.3 now uses Posix random() instead of rand() if possible. Not sure if that fixed your issue, but it could have.
I use Lua pretty much for 95% of everything I write. Its dynamic debugging facilities (and updating parts of app without restarting) are excellent. The only exception is multithreaded applications (e.g. webservers) where I use Lua "glued together" using Erlang. Yes, really. Lua is extremely customizable which makes it great for my projects but at the same time makes it difficult to be used in team projects - if you use it there, you need to have excellent documentation and coding discipline.
I made some CLI/Terminal apps with lua no problem , even tried some GUI bindings once. The short reason why no lua for full GUI Apps is it's so much easier in any other language. Even with full featured languages with tons of libraries I try to avoid a graphical app unless it's html5/browser based like python/flask or php/javascript with whatever back end I want.
I do not deny the importance of meaning *standard*, to the term of general purpose libraries. On the other hand it really only means you'll have higher chance to find/hire somebody who'll already know them. The bare Lua core however does not prevent you in any way from just picking up any available "non-standard" modules to do the job. There are widely known [Penlight libraries](http://stevedonovan.github.io/Penlight/api/index.html) which provide comprehensive set of modules covering the most common tasks, adding "batteries" to Lua.
There's Idle by Thomas Lauer, which is a dialect of LuaJIT, plus some useful libraries, plus a way to link together a small stub and compiled bytecode, so you can distribute your program as an .exe plus a .dll for the runtime. But you're still limited to writing small utilities, because the standard library is so small.
It's funny that you mention penlight, because I consider it an example of that "hit-and-miss" that I talked about. * It has this kitchen-sink approach. It's a library that does "x and y and z and beta and gamma". * It is not very idiomatic in parts - it feels like a library trying to "bolt on" python idioms on top of Lua instead of going with the Lua flow. * It also does not cover even a fraction of what standard libraries have in other languages. Take Ruby's standard library, for example: http://ruby-doc.org/stdlib-2.2.0/ . You have compression libraries, net access, matrix operations ... it even comes with a default web server (webrick). 
&gt; * It has this kitchen-sink approach. It's a library that does "x and y and z and beta and gamma". The *kitchen sink* approach can be found in many pick-your-favorite-language libraries, including mentioned Python and Ruby. Just look yourself - duplicate modules for command line parsing, external processes interaction, html &amp; xml document parsing, stringio, network clients etc. &gt; * It is not very idiomatic in parts - it feels like a library trying to "bolt on" python idioms on top of Lua instead of going with the Lua flow. You are adding an extra demand here - to be idiomatic by your imagination. &gt; * It also does not cover even a fraction of what standard libraries have in other languages. Take Ruby's standard library, for example: http://ruby-doc.org/stdlib-2.2.0/ . You have compression libraries, net access, matrix operations ... it even comes with a default web server (webrick). I didn't say the opposite. You are free to use other available lua modules not covered by Penlight. Or code it yourself. I don't argue Lua has much lesser available codebase then more widely used languages. But if this means a show-stopper is very individual and depends on the particular use. In my use cases I deliberately sacrificed "comfort" of Python libraries for the sheer runtime speed of LuaJIT, most times order or two higher then any available implementation including PyPy and Cython. Also standard TCO in Lua allows me to write recursive by nature algorithms directly, without need to rewrite them in an iterative style or implement tail calls with some fancy adhoc decorators.
&gt; Not on their standard libraries AFAIK. This happens exclusively on custom-built libs territory. I mentioned that on my opening post too. [Really](https://docs.python.org/2.7/py-modindex.html) ? See *argparse* vs *getopt* vs *optparse*, *htmllib* vs *HTMLParser*, *popen* vs *popen2* vs *popen3* vs *popen4* vs *subprocess* (popen[3,4]? already deprecated), *urllib* vs *urllib2*, *xml.sax* vs *xml.etree* vs *xml.dom*, *glob* vs *fnmatch*, *StringIO* vs *cStringIO* &amp; other C-boosted variations etc. &gt; Being idiomatic is expected on the standard library of a language. Penlight is openly pythonistic - it even states so on the docs. It has little to do with my imagination. And what's the problem ? It would be *nicer* if the importing and some function calls would be more similar to the core Lua not trying to mimic Python stdlibs, but I didn't find it any barrier. If you are not a totally newbie how can it be an obstacle ? If you are more on philosophic then pragmatic basis, you can find other extended string &amp; filesystem manipulation modules that would better suit your faith. &gt; The fact remains that most people out there use Lua as an embedded language, not as a general purpose one. The OP was asking why we think this happens, not how each of us uses the language. I'd have no problem with the fact probably most people use Lua as an embedded language. It was actually designed in this way, mentioned by its creators. I just couldn't agree Lua can't serve as a standalone general purpose language. There is no any objective reason. p.s. I do like what leafo did to Lua as a showcase for standalone Lua applications, like OpenResty based [Lapis web framework](http://leafo.net/lapis/) which is a joy to work with. Or Löve framework is an another example which allowed to reach demands Pygame, resp. CPython couldn't.
&gt; argparse vs getopt vs optparse Most of what you are listing are deprecated libs. I said that standard libs adapt new solutions when they pop up. Deprecation is part of that process. &gt; It would be nicer if the importing and some function calls would be more similar to the core Lua not trying to mimic Python stdlibs, but I didn't find it any barrier. If you are not a totally newbie how can it be an obstacle ? You inferring that since you didn't find any barriers, only total newbies can. I urge you to rethink that. But anyway, even assuming that it was true: a barrier, even if only "for total newbies", is still a barrier. &gt; you can find other extended string &amp; filesystem manipulation modules Finding and evaluating libraries is more work. It's *friction*. Languages with an expansive standard library have *less friction*. That is the whole point of my post. &gt; I just couldn't agree Lua can't serve as a standalone general purpose language. There is no any objective reason. This discussion was never about whether it was *possible* or not to use Lua that way. Everyone agrees that it is possible. The question was why it happens so infrequently (compared to the embedded scenario) &gt; OpenResty based Lapis web framework [...] LÖVE I agree that those projects are great. But those are prime examples of embedded Lua, not stand-alone.
&gt; I wish they changed the "type" function to "typeof", many times I wanted to use type as a variable name. Somewhat of a hack, but at the top of one of your files, you could do `typeof = type` and then be able to use both! 
&gt; And whether Love is extending or embedding is a matter of opinion. This thread is the first time I have ever heard this. What makes you think Lua might be acting as anything other than an embedded language in LÖVE?
&gt; Lapis is pure Lua, but the thing it uses underneath, OpenResty, is not. Openresty is an nginx distribution which embeds Lua inside nginx … No, you are mixing apples with oranges here. Openresty is quite independent project to Lapis, so the ngx_lua. Where and how is Lua code written for Lapis embedded, and what is the base language ? You are probably confusing API/ABI with embedding a language within a main language. That's ridiculous. &gt; LÖVE is a classical example of Lua acting as an embedded language. No, it's not that clear. The development process is completely shadowed out of the main C/C++ so from this perspective, it may look like stand-alone, although dev is not directly in control of the main program loop. I'd find *classical example* of Lua as an embedded language in games like Battle for Wesnoth, where is used explicitly in an embedded style along with the main language. p.s. [Embedded style language](http://en.wikipedia.org/wiki/Embedded_style_language)
Thanks for the apologies. It is a rare thing to see on the internet these days, I appreciate it.
Awesome thank you so much! Will you elaborate on the second io.read() for me? I don't quite understand what you mean by "input is left on the stream"
That makes sense, thank you. Thank you x2 actually hah. I wanted to make sure the question was clear enough that someone did not have to dig through my words to figure out where I was stuck.
So you would say something like "Lua, allocate a blank mutable string of X bytes", then fill it in and hit an "intern this string and make it immutable" button?
~~Hm. Isn't that what [luaL_prepbuffer](http://www.lua.org/manual/5.3/manual.html#luaL_prepbuffsize) is doing?~~ Edit: No it isn't. As /u/rjek already noted, buffers use lua_pushlstring internally to get the data into a string, so there's no benefit.
&gt;I've switched through so many different languages in an attempt to learn Stop that. Just pick a thing and stick with it for a while. Jumping all over the place gets you nowhere. That said, once you learn a language, picking up others becomes easier. Now Lua's a bit different from most languages, so there's slightly less transferable knowledge, but most all of the basic principles of "thinking in code" still apply. I know this is not a direct answer to your question, but just some advice to maybe think about.
My reasoning for using lua is I like the syntax and the ease of integration (not from experience lol). Why should I use lua from your perspective?
So do you suggest avoiding Lua? Can I not do all the same tasks as similar languages (python, ruby) . I know a lot of this is opinion based but what would you suggest?
Thanks for the input! Congrats on the promotion!
"So do you suggest avoiding Lua" - if it's your first language, it doesn't really matter much either way. No programmer just learns a single language and then rolls with that. Right now, you're probably still grappling with learning the basics, and for that, lua is about as good as any other language. Eventually most programmers settle on a small set of 1-4 languages in which they end up doing most of their day-to-day work. That's for later, however. If you however actively want to improve your employability, then yes, I would prefer learning a language different from lua. "Can I not do all the same tasks as similar languages" - Lua is rather different from those other languages you've listed, in that it has a very strong focus on embeddability, meaning lua is to a large degree intended to be used from withhin a C/C++/similar application (in fact, back then it started out as a config file format.) Python et all on the other hand have always been intended as "full languages" and come "batteries included" (as python-users would put it.) That means they have much larger standard libraries where new stuff is constantly added, a much larger library ecosystem, more "big" frameworks (like django or rails) which make up the common bread &amp; butter of many users of that language, et al. Lua OTOH is more intended to be used alongside C/C++/etc, and generally there don't exist as many big frameworks and library infrastructure, because people tend to use it in a way where they expose libraries and functionality written in C/C++/etc to the lua program. So huge frameworks like django and rails that have absolutely massive user-bases, plugin-ecosystems etc do not exist for lua. My personal opinion is that you really get the most out of lua if you already have a strong background in another language like C/C++/whatever, which you can then pair up with lua to make your application more flexible. If this is your first language, no need to feel bad for moving to a different language, even if you like lua as a language. (But as someone else already said, pick a language and then stick with it, at least for some period of time!)
Man, I only use Lua for game development with LÖVE (Love2D), so I wouldn't know anything about the other applications it has. You talk about ease of integration, but say you don't know from experience. How about you get started with Lua as your first programming language, try a couple of simple programs, then teach yourself C++, Object Oriented Programming (OOP) in C++, and then start to worry about mixing the two languages.
Marketability might be better tied to learning to solve problems rather than learning a specific language. So, pick a problem (e.g. a game) and solve it in a way a development team would solve it. Think hard about structure, names, objects. Document the code properly. Automate testing and deployment tasks like building deliverables. Everybody can go through a tutorial and reach the end with the impression that they know something about a language but to actually use it is a little bit different. All these little projects can then act as a portfolio. So play with it. Make some stand alone GUI apps on Windows and OS X. Create some mobile apps with Corona. Have fun. 
Hi! This is just my opinion, but I think it doesn't really matter what language you start with. Once you learn 1 language, it becomes a lot easier to learn others, because they share many of the same concepts and all you have to do is learn a new syntax for those concepts. That said, when learning a language, it's good to have some project or goal in mind. If you want to script GMod, you will have more motivation when learning Lua instead of Python, because you will be able to apply what you learned to make something cool out of it. As for tutorials: Use everything you can find! If you don't understand something on one site, try and see how they explain it on another site. Eventually all the pieces will start to fit together. The book [Programming in Lua](http://www.lua.org/pil/contents.html) explains most parts of the language very well. It looks like the GMod wiki also covers some maths concepts which might be useful if you're unfamiliar with them. So in summary: Learn Lua because it's what you want to use. Use regular tutorials for learning the language, and the GMod documentation for learning their API.
[Lua Tutorial](http://luatut.com/) Google all the GMOD Lua references you can. Each implementation of Lua has its own keywords for doing specific tasks, beside the thirty or so words Lua has built in. You'll want to be speaking the same language as GMOD. You can pick up Python later if you need it. 
Thanks for your answer, i've began learning in Glua (gmod lua) for 2 days then went to python, returned to glua since it has many motivations behind it. 
+1 Completely agree with the module finding mechanism. I don't understand why they didn't add this in in 5.2 or 5.3 but it really needs to be in there. To elaborate, this only makes perfect sense. Consider python's `sys.path`, the main running script's path is included in there in the search path. Also consider how an OS executable loader searches for dll's and shared objects, that also considers the running executable's path location. In fact, I can't think of any scenario where it would make more sense to search for a script's module dependencies in the current working directory *instead* of the actual script's location directory. Because of how lua's current searching mechanism works, you have to add the main script's location manually to `package.path` and `package.cpath` at the top to ensure it looks in the right places prior to `require`ing the module. Other solutions like penlight's `require_here` isn't foolproof because it presumes and requires some level of setup on your existing running environment. eg. That penlight's `require_here` here script can be found in one of the `package.path` locations. Usually that means you either need luarocks or you manually set the shell environment's `LUA_PATH` etc. creating a bit of a catch-22. In other words, if you just take a clean host environment with *only* a standard lua vm installed, running a non-trivial lua script with any kind of moderate dependency modules will result in `require` issues not being able to find those modules. This situation has always been bothersome to me and I really wish lua addressed this better.
There's lua for windows that comes with batteries, and also luarocks. Sure, not as many packages compared to say Python or Ruby but I wouldn't say its lacking either.
Not directly related, but if you want to learn Lua and are a fan of minecraft I highly recommend computercraft. The turtles are a really cool way to write basic programs and get immediate visual feedback from what you are doing.
This is purely anecdotal, so take it for what you will. I told a recruiter at my university just around a year ago that I made a game in Lua using Love2D, and he thought that was impressive enough to write on my resume (for his own personal notes). I had other things that I mentioned to him as well that may have ended up getting me the interview (and in turn the internship offer), but having that Lua experience only helped. It may even be worth noting that this company uses Lua for absolutely nothing. They primarily use C#, C/C++ (mainly C, C++ for things that need to integrate with C that use certain libraries only written for C++). The only scripting language that they use heavily is Python for testing code, which doesn't even require a very in depth knowledge of the language. Basically what I'm saying is that if you want to use Lua to make something for yourself, then go for it. Having that experience is only going to help you when trying to get a job, even it just comes up in a conversation as "Oh, you've used Lua. That's neat!"
Stick to a language and learn it. Then, at some point, learn other languages. I'd advise this kind of learning plan: - keep learning lua, and practice data structures and classic algorithms: start with [Linked lists](http://en.wikipedia.org/wiki/Linked_list), [Binary search](http://en.wikipedia.org/wiki/Binary_search_algorithm), this kind of stuff. Have a look at the notion of [Algorith complexity](http://discrete.gr/complexity/). - Then, try a compiled language, with a static type system. I'd go with C, as it is low level and has [manual memory management](http://en.wikipedia.org/wiki/Manual_memory_management), opposed to Lua's [Garbage collection](http://en.wikipedia.org/wiki/Garbage_collection_\(computer_science\)) - Then an OOP language. C# could be interesting : modern language, refreshing. - If you're still there, a functional language: OCaml is very itneresting IMO. I'd avoid jumping straight to C++ - OOP, memory management, the type system, macros, and the fact that it's a huge language make a lot of things to learn at once. 
If you're looking to do game development, grab [LÖVE](http://love2d.org) and start working. Don't stop until you've finished at least one game. A finished game will speak more for your skill than being able to add ``random language`` to your resume.
What job and what do you use it for?
Python is certainly a bigger language in many areas, but I don't think there's another language that's bigger than Lua in the specific area you're interested in (as an embedded scripting language within games). Stick to Lua for now, and specifically the Lua embedded in GMod. This will teach you the basic programming skills you need while you're doing something you enjoy. As others have said having a specific goal in mind will give you the motivation you need to learn quickly.
It is, but computercraft uses a java-based lua implementation of some kind.
AFAIK ComputerCraft uses LuaJ
I played a lot of modded minecraft some time ago (some modpack that contained ComputerCraft), and for me the best part was playing creative mode and just code stuff that does things. Like a Computer-controlled 6-directional aircraft using Frames from the RedPower 2 mod, or just plain old Lua code that implemented an EventLoop that allows for asynchronous programming (excluding asynchronous IO unfortunately). [GitHub Link](https://github.com/Ferdi265/ComputerCraft-EventLoop)
The error message is telling you that it expected a number, i.e an index, to remove as detailed in [1]. The table you have inserted has been put at index 1, which your i iterator index will confirm. [1] http://www.lua.org/manual/5.3/manual.html#pdf-table.remove
I've never heard of this. Examples?
Also, Lua does not promise `table.remove` will work in an `ipairs` loop. If you want to remove elements while iterating then either 1. Make a memo of the indexes then remove them after the iteration is finished. 2. Use numeric for to iterate backwards from `#t` to 1 then you can safely use `table.remove`
&gt; Also, Lua does not promise table.remove will work in an ipairs loop. To clarify, this is because `ipairs` just keeps incrementing by 1 and rechecking the table until it finds a `nil` index. It is equivalent to the following code: local n = 1 while t[n] ~= nil do local i,v = n,t[n] --[[ your block of code ]] n = n + 1 end `table.remove` does not just remove an element. It also moves all the elements *after* it down one slot to fill the gap. Doing so in an `ipairs` loop will cause it to skip the next element after the one that was removed. Although it's not technically an illegal operation! *Edited because of the bug mentioned below.* 
Oh my, yes! In my defense I had pretty much just woken up when I typed that up. But it's a lesson all the same: this is an easy bug to introduce, and a hard one to find! 
The `i` and `v` in your for loop are typically used as `index` and `value`. Here, since you use `in pairs`, you'll want to use the convention of `k` and `v` which stands for `key` and `value`. You're trying to print `value.something`. it should be `key.value` or `index.value`. ___ Edit: Ignore what i said. You're putting a table into the table "t" instead of putting in what you have in the table that you're inserting. Then use what i said before. A quick fix would be to take a look at your remove call. It takes a table and an index. You're passing it a table with v instead of a number.
&gt; In Lua most local declarations go at the top of the function or module I stronly disagree and I know many Lua veterans who do too. This is not C. Locals should be defined close to where they are used. Their scope and lifetime should be obvious from their declaration. The only things that belong at the file are variables that are accessed across the entire file. 
I also disagree on that point. Even within a function, all local declarations need not be hoisted to the top. At best it's unnecessary, and at worst it makes the code less readable. Local variables belong where they are being used, not at the top of the function or module they are being used in. 
I disagree but only as a matter of style. I don't think there's anything objectively wrong with your opinion. So the original poster should feel confident using your approach if he wants.
So for the purposes of require(), I should create a local table and return only the functions I wish to expose, then name the functions as a key in the table, like this? &gt; local functions_table = {} function functions_table.tail do blahblahblah end end return functions_table
LuaJIT can generate more optimal bytecode the deeper a local is first declared, especially with loops. Don't hoist locals.
well, so you need testing. please share the code and LUA interpret version you are planning to support! I have hard time getting anything from this thread, quite nosiy! I can test myself on: win7/win8/ubuntu14.04/12.04/raspbian-RPi
I took the Lua code from [here](https://love2d.org/forums/viewtopic.php?f=5&amp;t=3424) and updated the Mersenne Twister part to use Lua 5.3's builtin bitwise operators which increased the speed tremendously. But it's still slower than multiply-with-carry which is what I'm now using. [Here's a link](https://gitlab.com/davethecomposer/platonic-music-engine/blob/485f6bb23337fdf9eba41ecb2b64891d20f3908a/scripts/random_number.lua) to the current version I use. I see no reason why this shouldn't work the same on any platform. But it would be nice to see that confirmed! And I would love to improve the performance of the code if you have any ideas for optimizations. 
Please be more specific? Do you mean the ellipsis (...)? You can use it like this, to catch a variable amount of arguments: function foo(...) end `...` will now be all arguments function bar(baz, ...) end `...` will now be all arguments after `baz` Basically, it will catch an arbritrary amount of arguments, without you having to name them. (There's more in PiL, for example, but keep in mind that the way ... worked changed since 5.0) If you did this in a for loop (which doesn't work, but if it would), it would just catch all the results from the iterator function, without you having to name them. Hence, for event, a, b, c in poll do stuff end The event can only have 3 parameters. for event, ... in poll do stuff end The event can have any number of parameters, and this avoids using a table to hold them. 
Luvit is an impressive project. However, as far as I can tell they still use Node.js style callbacks to handle asynchronous processing. Lua's coroutines are a natural match for even driven, async code and easier to use than nested callback IMHO. There are no callbacks in Luaw which makes writing nonblocking codes essentially as straight forward as blocking code
Huh. I've put the Lua distribution in a folder which is in PATH, but it tells me that luac is not a recognized command. The actual .exe is luac52.exe, but luac52 is not recognized either. I had the same problem with LuaRocks - everything installed, paths configured, but command line tells me it's not recognized.
This isn't mine, but I'm surprised not to see it posted in /r/lua yet! Implements a fairly consistent API as the C Lua, while giving the conveniences of Golang's static analysis, rapid compilation, etcetera. I'll certainly be using this, C is terrible. Can someone rewrite Lua 5.2 or 5.3 in Rust next? :)
The problem with Lua, or rather, the problem with the Lua community is the embedding situation. Not like a problem as in something is wrong, but the problem with implementing Lua in other languages is that so much of the Lua devbase are using Lua in embedded systems. eLua has been hugely successful, and the C api lets lua go anywhere it wants. This is the beauty of Lua. That being said, I've never used the embedding features, and I use Lua as a minimal scripting language. I've always wanted stronger concurrency primitives, and while they're at it, I'd like runtime macros/templating. Either way, Go is cool, but I don't think it really needs a standalone embedded scripting language, it's plenty expressive already. I suspect two things, that the author knows this already, and that the author implemented this largely because it was fun. Go is very receptive to lang-dev, right from the get go, and the stability that Google affords makes it all the sweeter.
Hisham, why did you leave luarocks down for weeks before the redirect?
It was not on purpose. It wasn't weeks, it was more like four days (it felt like weeks though!). We were talking about making the move for a while, but one sunny day the server went down, the VPS provider locked us out of it and wouldn't answer our emails. We were trying like crazy to reach their customer support, to the point I eventually gave up, contacted Leaf from MoonRocks and we went on with the migration in "emergency mode".
Go needs lua (and scripting in general) because it has no plugins (all is statically compiled). So I'm very happy for this.
I would recommend OpenComputers over CC oc.cil.li
It sounds like what you want is a decorator, as they are called in Python. Something like this: function f() return 42 end function decorate(func) return function(...) print('called func') return func(...) end end f = decorate(f) f() 
That is *exactly* what I need---and I was so completely over-thinking it with all that talk of metamethods. Thanks a ton!
Go to this site http://luabinaries.sourceforge.net/ and then pick your version. Go to "Tools and Exectutables" Download the Mac version. You should be all set to go =]
Thanks you so much! I had to go back to version 5.2 for it to be compatible but it does work now. Although for some reason whenever I open terminal I get this before I can type in anything Last login: Wed Mar 4 06:32:22 on ttys001 -bash: ‘alias: command not found -bash: ‘alias: command not found Any ideas?
Use Homebrew: http://brew.sh/ Then use "brew install lua" in your terminal
Probably something in your .bash_profile or .bashrc trying to run upon login.
A typo. There's supposed to be a `alias` command being run but whatever inserted the command into .bash_profile added extra quotes around the command. So instead of `alias` bash is seeing `'alias`.
Really new to this sub. Still, [been messing](https://github.com/o-jasper/o-jasper-luakit-stuff) with [Luakit](http://mason-larobina.github.io/luakit/) a lot, so why not! * Imma (ex)lisper. Full-power lisp-like (symbol-)macros. Make sure there is a `gensym`. I mean, metatables put people in charge of objects a lot, why not put them in charge of code too. (that being an argument againt "people can do dumb things with macros"; they can do with metatables too) Stuff like `+=` would be a matter of adding those infix things and then making them the macros corresponding to `+=` * Easier way to make to C FFIs by just feeding it a list of C functions with input/output types? Longish time ago wrote [Julia-FFI](https://github.com/o-jasper/julia-ffi), that, well it just uses `dlopen` and stuff, but it shows how a macro might do it in a way that merely describes it. Macro not at all necessarily here though. Even better if it might be able to read C headers and automatically FFI them. (sortah tried that there too. no success) * `local` seems like a bit of a PITA, i'd rather say `global` and have them defaultly local. * If a variable is not declared, you should not be able to touch it. Error, not `nil` or anything like that! Below is more about libraries, but then languages are often judged by them. * Perhaps some sort of way to interact with streams nicely. Possibly this is not a language thing, and can be done in a lib. * Wonder if there is a lib that does "tables that is mirrorred on the filesystem". Really, i feel that tables and metatables would be cool if filesystems did them. I.e. some directory have programs tell what their contents are. (Plan 9 i think does sort-of this but.. yah not exactly convenient?) That said, i'd possibly not use it, because, well, Luakit uses SQL, and often browsers need them searches. * There is often stuff missing in standard libs, these can be found by functions that everyone ends up reimplementing. In Lua this doesnt seem to happen *that* much. Particularly `string.split`. Or when functions have a reason to do not exist, and you should do things another way, have documentation explain why. Edit: `for i, v in range(from, to, step) do ... end` is another one.
Well, i'd fork/avoid code with gotos. Though i dont really like limitingother people for such reason. Limiting yourself is a feature, it makes sure code has some known properties so you can think about it properly. Unfortunately never encounted goto-rich code, but i am sure that lack of limitating yourself while doing it would recreate the spagetti code from the fables.
Do you have any recommendations on where to put the lua source files so i can include them. 
This is never a good idea. You're not supposed to put third-party source files in your own source file directory. And besides, Lua is a library, which should be precompiled and then referenced in your own project by adding a flag on the commandline or a reference in your IDE.
Are you using an IDE? If you are, you can usually just add the files to your project and you set the include paths to include the directory where your lua sources are installed. If you're using the commandline, you need to add an `-I` flag that points to the directory with the lua sources. If you're using the commandline, I would suggest using a build tool, though.
learning to use the command line is a good thing. but ya a build tool can make things easier while your still just messing around. 
&gt; Also just where is it stated "You're not supposed to" Putting third-party sources into your own source folder just isn't done. I've never seen anyone not at least put them in a 'vendor' or 'lib' folder. &gt; All in all I would say don't use NEVER because it is NEVER the case, there is always more to learn or another way to do something that was not thought of. Fair enough.
This. You can even store them in separate files and read them dynamically with loadfile when you know what language you need. Lua is not only a good scripting language but also doubles as a good configuration file format.
And you can set the English or a similar language (or a similar dialect) to the currently used as a backup via metatables, if the translation is incomplete.
I would love it if luaw used LuaJIT FFI instead of requiring a manual build process...
Well, this is a bit of a shameless plug, but I've always liked luabind. It was a bit of a nightmare to dig into the source code with all that Boost.Preprocessor stuff though. Fortunately, decimad replaced the boost dependency with beautiful modern C++11. That version had a few bugs that weren't cought by the test cases, but I've started to extend &amp; fix those on my branch: [luabind deboostified](https://github.com/ltjax/luabind-deboostified) I'm currently using it with VS2013 and Clang.
Thanks for the ideas, though I would still like to use Gettext after reading everyone uses .po files and such. Thanks again :)
Keep using tables to store language data in mind. With Lua's metatables all of the table access could be turned into a function call which uses gettext's api to grab and return the appropriate string. The upside to using tables is it'll take less time to get a working prototype going. Binding to the gettext api can be something that is added once the program is working. This also has the added benefit of making it easier to separate your logic from the database access. If later it's decided gettext is just not the appropriate library, the only thing that'll need to be changed is the binding to the library.
Fixed it, thanks!
I would prefer not to deal with the stack, but I will check LuaWrapper. Thank you for the suggestion.
Thank you all for the suggestions, I will check these libs.
Just use more upvalues. // lua_upvalueindex(2) lua_pushlightuserdata(L, extra_information); // or whatever type of value // lua_upvalueindex(1) lua_pushstring( L, "function_name" ); lua_pushcclosure( L, function_pointer, 2 ); lua_setglobal( L, "function_name" ); 
A combination of [luaFS](https://keplerproject.github.io/luafilesystem/) and the standard string.match is the easiest solution in my opinion. The standard lua library does not include the capability to search the filesystem. LuaFS is one of a few libraries that allow you to do this.
Something like: * Get a list of the dir contents * Iterate over that list and use `string.match` to check the filename I guess that is doable.
I'm not familiar with luakit chrome pages project. From a quick look at the project on GitHub it looks like it is framework to script WebKit based browser engine using Lua? Is my understanding correct? Luaw is a HTTP server. How were you planning on using it with luakit? Build it along with luakit so that you have a server and browser together in one scriptable framework? 
Yep, thats what it is. Lua-scriptable(and largely lua-implemented) browser. Well, i just noticed that luakit chrome pages could probably be turned into things that can be served as a http-server. If you just use "the data you return" and javascript bindings, all it'd need is to automatically do AJAX or something the javascript bindings it exposes. That said, perhaps easier said than done. Advantage might be some 'cross-polination', if you play with the browser, making chrome pages, you know how to do the server, and vice-versa.
yeaaaaaah *_*
Gaagh, problem solved - I had some extraneous spaces in my PATH, deleting them made both Lua and LuaRocks work. Got an external editor for PATH and the like since the default one is s**t.
You can always treat Lua as your secret weapon. *Especially* if you're going to spend a lot of time with C.
There are various ways but to start simple, try this: http://luadist.org
For example, the majority of Natural Selection 2 is written in Lua. The source code is available with the game, if you own it. Here's http://wiki.unknownworlds.com/ns2/Lua some incomplete documentation.
Thanks, this is one of the most interesting things I think. You can choose if you want to base all the game-specific parts on Lua or just a bunch of them. What I find even more interesting is that you can choose whether a certan lua scripted part can be modified by the End User or not. 
Mari0 was pretty big a while back. Written in Lua using the Löve framework. The game and source are available at http://stabyourself.net/mari0 
I'm creating a new LuaState for every mob, and one for the level. I have a LuaState wrapper class that has functions it's making available to lua, which in turn (the functions) do various things to affect the game world. Mobs have script files that make for the logic of that mob (there is a mob that's used as a player, so it reacts to keyboard input and moves accordingly, another that's a rat, so it for example runs away if somethign comes close...). Examples of functions that aade avalable to lua are: * setBackgroundMusic * applyImpulseToBody * destroyFixture (this is Box2D stuff, not sure if you're familiar * killMe (They're not all called exactly like that.) The level script (I have not implemented this yet) is planned to also have things for ending the level, loading a new one, perhaps saving, of course spawning other mobs... So I guess that's the outline, ask more if you want to know some other specifics. Also, note that I by no means have it all figured out yet, and have changed stuff around many times already.
C++? if so what do you use for bindings? Could you go into more detail on how you attach a script to each mob? (I am looking at do the same thing in my engine)
Sure, and yes, it's C++. '11, in fact ;) My approach is actually that I don't have a mob class at all. A mob is literally just a LuaState with a default set of bodies and fixtures given to it at the beginning (because I prefer to make the mob bodies in an editor (I use blender) than having to generate them with code). So the way this works is this: the LuaState constructor takes a string "type" and a `std::map&lt;string, b2Body*&gt;` of the loaded bodies for that type^1. It then creates the lua_State (hope you know what this is, if not then say so), exposes the functions it will need to it, then creates a global table in it and fills it with with the std::map from the arguments (BTW, the strings in that map are names that I specify in blender. How else is the script going to know whar body is "left_arm", "torso", etc?). Finally, the constructor loads the lua file with the name that is was given ("rat", "player"...), executes it in the lua_State, and starts the main function. Now what the main function does depends a lot on the mob type. I could, say, have it check if all the named bodies it's expecting are present, and call `killMe()` if they're not, whick would mean the file where its body is saved is malformed. The player mob would request the camera to track it in its main function, as another example. ^1 I should note that the reason I don't load the body inside the LuaState constructor is because I already have functions for loading level files in the Level class, and since the process of loading a mob body is basically identical to loading a level (my game is heavily based around the physics simulation; the mob body files are the exact same format as level files, just currently a little more restricted as to what they might contain.) Anything else you'd like to hear about? 
As array: args = {"Test",234} As table with keys: args = {Foo = "Test", Bar = 234} 
So you give the LuaState contructor a map of the body part and the name of it so that you can load it. Are you calling the constructor for every body part with a loop or sth. like that? I haven't used blender so I dont know anything about it. Where do you specify the name of the mob? Because the map is used to load the body, right? And by loading the body / level you mean that you load the blender files into the game? I have a vague idea of what you mean. I understand your main goal but the 2nd paragraph is hard to understand, at least for me :D Though I dont know if I'm too dumb to understand this or if I just have too little programming experience to visualize it in my head Anyway, thanks for the detailed answer, it's really helpful.
Thanks! That clarified a lot. I guess I wrote it bad, but with the constructor thing I asked if you create a new object for every body part. But I understand it now, you already have the body parts and you just give it to the mob through the constructor. The rest is now pretty clear
Garrys mod uses Lua for it's add-ons. Has It's own brand called GLua, mostly bindings for in-game stuff really. ___ Yo dawg, I heard you like scripting, so we put scripts in your scripts, so you can lagg while you crash, seriously though. There's even an add-on for in-game scripting called expression 2 (part of the wiremod add-on).
Called a [vararg expression](http://www.lua.org/manual/5.2/manual.html#3.4). [table.pack()](http://www.lua.org/manual/5.2/manual.html#pdf-table.pack) may also be useful.
Thanks for the help everyone. Not exactly what I was looking for, but like I said, any advice is appreciated! I feel like all of you actually know what you are doing, and I almost couldn't be more clueless. I'm sure I'll be able to figure it out after some thinking. All of this helped! Thanks!
Not quite what I was looking for, but this definitely helps! Thanks!
Almost all of our game is coded in Lua. Basically used tolua++ to wrap up our engine's main classes. Start a lua vm that then starts and Initialises our engine. Creates and loads all the UI, assets etc.
(PS: Noodles are delicious.)
Thanks for the answer. Coroutines do seem pretty useful, I might consider this (but will have to read the given chapters first). The caveat you spoke about; could you elaborate? Is my understanding correct that me calling C functions in the coroutine is fine, but those C functions called may not call lua functions in the same coroutine that called them? What would happen if they did, how would lua know?
By the way OP, listen to /u/smog_alado below; coroutines are apparently real nice.
yeah, pretty much.
I love guessing games! Can we get some hints? Also, why do you have two ends at the end of your code?
_103112_15__1_nulled here is the key, any idea how it is gotten?
Yes, that's close to what I had. Except I put a 4 in the third spot but I knew that could vary with the length. Still, I'm not seeing where the `sub(1,3)` fits in. Are you absolutely sure the snippet is complete? Decoding it is trivial. It's just a state machine. Not like he's using any real obfuscation tricks like runtime code generation or a trapdoor function. Anyone who's tried to debug the output of yacc has seen worse.
He said there are multiple possible keys. Know any ways to get others?
Well for one, anything after the 11th character doesn't matter, just the length of the key. Well, up to the 11th and then the 9th from the end so a 20 character long key will need the 12th. Which is where the key I first guessed at (`_143112_15_`) works but the `sub(1,3)` threw me off because I was expecting it to match a defined value. The trick is it's intentionally comparing to `nil`. I should have just run the thing instead of only tracing by hand. It can be confusing if you don't know Lua's scoping and table constructor rules. [Annotated source](http://pastebin.com/cmWKyD07) showing explicit table index assignments.
Is this news? He disliked Lua 5.2 too.
Lua 5.3 libraries cannot be used with LuaJIT for starters. The old 5.1/5.2 split was not that bad because those versions were almost identical. Porting from one to the other was usually trivial and LuaJIT fully supports 5.1 and mostly supports 5.2. It was perfectly possible (and common) to develop Lua libraries "compatible with 5.1, 5.2, and LuaJIT". In the other direction, people who want / need the speed of LuaJIT will stay away from 5.3 and all further development of the Lua language, thus reducing the (already relatively small) size of the Lua community. Last but not least I think your view of "environments Lua is intended to be deployed in" is a little limited. It is true that Lua is primarily used as a minimalist scripting language embedded into a host application. However, that is not its only use. Look at all the Lua libraries which exist. That ecosystem will suffer horribly now that people will have to decide which fork they want to support. The community will be divided into a 5.1/5.2/LuaJIT camp and a Lua 5.3 camp. I hate having to make that choice. 
I don't think Mike would try to upgrade in any case. He has a several clients with 5.1 code that cannot upgrade. There is 0 motivation for him to support a newer version of Lua.
These are my notes from working through the question. All the possible answers (that I found -- I think it's all of them) are listed at the end: t is just the key translated to an array with the digits converted to numbers. We can figure out the contents of _,__,___,____ by recursive printing _= { [1]= { ["_"] = 9, }, ["__"]= { [1]= { [2]={}, [3]= { [1]= { [2]=key, ["__"]=9, } }, [4]=1, [5]=6, ["_"]=1, ["__"]=3, } }, ["___"]={}, } __= { [1]= { [1]={}, [2]=5, ["_"]= { [1]= { [2]={}, [3]= { [1]= { [2]=key, ["__"]=9 } }, [4]=1, [5]=6, ["_"]=1, ["__"]=3, } } } } ___=nil ____=key expr1=__[t[5]][t[_.__[1]._]][__[1]._[1]._][t[4]][t[6]][t[8]..t[11]]+t[7] t[5]=1 -- __[t[5]] must be a table expr1=__[1][t[_.__[1]._]][__[1]._[1]._][t[4]][t[6]][t[8]..t[11]]+t[7] __[1]._[1]._=1 -- lookup expr1=__[1][t[_.__[1]._]][1][t[4]][t[6]][t[8]..t[11]]+t[7] _.__[1]._=1 -- lookup expr1=__[1][t[1]][1][t[4]][t[6]][t[8]..t[11]]+t[7] t[1]="_" -- __[1][t[1]] must be a table expr1=__[1]["_"][1][t[4]][t[6]][t[8]..t[11]]+t[7] t[4]=3 -- __[1]["_"][1][t[4]] must be a table expr1=__[1]["_"][1][3][t[6]][t[8]..t[11]]+t[7] t[6]=1 -- __[1]["_"][1][3][t[6]] must be a table expr1=__[1]["_"][1][3][1][t[8]..t[11]]+t[7] t[8]..t[11]="__" -- __[1]["_"][1][3][1][t[8]..t[11]] must be a number expr1=__[1]["_"][1][3][1]["__"]+t[7] __[1]["_"][1][3][1]["__"]=9 -- lookup expr1=9+t[7] expr2=__[t[2]][t[7]]+_.__[t[9]][t[10]]+_.__[t[9]][t[#t-8]]-t[2] t[2]=1 -- __[t[2]] must be a table expr2=__[1][t[7]]+_.__[t[9]][t[10]]+_.__[t[9]][t[#t-8]]-1 t[7]=2 -- __[1][t[7]] must be a number expr1=11 -- !!! expr2=__[1][2]+_.__[t[9]][t[10]]+_.__[t[9]][t[#t-8]]-1 __[1][2]=5 -- lookup expr2=5+_.__[t[9]][t[10]]+_.__[t[9]][t[#t-8]]-1 t[9]=1 -- __[t[9]] must be table expr2=5+_.__[1][t[10]]+_.__[1][t[#t-8]]-1 -- the numbers available in _.__[1] are 1 and 6 (3 is not available because the key is too long) -- to be == expr1 == 11, so 5 + 1 + 1 - 1 is not enough -- 5 + 6 + 6 - 1 is too much -- 5 + 6 + 1 - 1 and 5 + 6 + 1 - 1 are both acceptable, so -- a) t[10] = 5, t[#t-8] = 4 -- b) t[10] = 5, t[#t-8] = "_" -- c) t[10] = 4, t[#t-8] = 5 -- d) t[10] = "_", t[#t-8] = 5 -- This is what we know for sure key="_1?3112_1?_" .. possible_suffix -- So, #t is at least 11, and #t-8 will be at least 3 -- this character must be 4, 5, or "_", and it must be different from t[10] -- So, it can be at index 3, 8, 11, or anything bigger than 11 -- this is always true: ___==_.___[key:sub(1,3)] -- because ___ is nil and _.___ is {} keys = { -- ? can be replaced by any 1 char, ?* can be any string "_153112_14_", "_153112_1__", "_143112_15_", "_1_3112_15_", "_1?3112_15_?????", "_1?3112_15_????????", "_1?3112_15_?*4????????", "_1?3112_15_?*_????????", "_1?3112_1__?*5????????", "_1?3112_14_?*5????????", }
Well, he also has potential clients who don't want to be hamstrung with an obsolete version of Lua. I'm at the point where I'd probably avoid LuaJIT just because it's clear it will never advance, and I used to use it for *everything*.
Lua is the only language I know how to program in and I've run into situations where I *really* need LuaJIT's speed but like you I've come to the conclusion that LuaJIT is not going to upgrade so either I go with the version that continues to add new features at the cost of speed or the one that is not going to grow but is super fast. I've chosen the former, I now use Lua 5.3 and will switch to 5.4 when it comes out. Partly I feel like there's more community support for the 5.3 branch which is something I really need (as I suck at programming).
You completely missed the point of my reply. Breaking changes are not bad. They are *inevitable.* Lua avoids the problems that Python faced by allowing things to break on every major release. 
&gt; Lua 5.3 libraries cannot be used with LuaJIT for starters. The old 5.1/5.2 split was not that bad because those versions were almost identical. Porting from one to the other was usually trivial and LuaJIT fully supports 5.1 and mostly supports 5.2. That's because of compatibility libraries. The reason 5.3 stuff can't be used with LuaJit is because all the deprecated stuff was dropped. LuaJit is still 5.1-only with a few backports. But as the previous poster said, it doesn't really matter because you can still use the old versions. I still mostly use 5.1 (vanilla). &gt; Look at all the Lua libraries which exist. That ecosystem will suffer horribly now that people will have to decide which fork they want to support. The community will be divided into a 5.1/5.2/LuaJIT camp and a Lua 5.3 camp. Or you can support both.
&gt; Lua is forked - and that is very bad for the language. It's bad if you want Lua to be a general purpose, stand-alone language with a vibrant module community. I would love this, because I love the language, but that ship never even left the port, primarily because it's *not what the language was designed for*. Lua designed to be a language-as-library, for use as an embedded scripting language. In that sense, Lua is *always* forked. World of Warcraft Lua is not Gary's Mod Lua. That's why things like the number type were added, because people embedding the language wanted it, and compatibility issues created for Lua as a stand-alone language are always secondary to that. That's also why it doesn't really matter if LuaJIT supports Lua 5.3. LuaJIT has always been a fork, and it was forked at a good point in Lua's history, so it's a fine language.
&gt;Lua is forked - and that is very bad for the language. It was already forked -- LuaJIT never supported _ENV, so it's been separate since 5.2. I think this is fine, because LuaJIT is really a better basis for an ecosystem than Lua itself, and imo third-party libraries depending on standalone Lua should probably target LuaJIT.
&gt; It's a pretty good video. Full of good info. Just too long all at once. Brand new to lua and I'm not sure if I'm right for lua. Would you recommend the video? I don't mind pausing the video/taking notes/FF and rewind. If that's not the right video, do you have something more helpful?
&gt; Making it work involved compromises that in the long run may be regrettable I didn't see many compromises in that. Some code paths became a lot faster, and some became slightly slower (but in a percent difference that, if you care about speed that much, you're probably using LuaJIT instead anyway). &gt; 5.1 didn't break a lot from 5.0 but only by accident 5.1 broke `for k,v in t` which was one of the most common idioms of the language. (It was deprecated in 5.0 but still supported.) 
See also kikito's [six-parter on this very topic](http://kiki.to/blog/2014/03/30/a-guide-to-authoring-lua-modules/).
I understand what you're saying, but I want to add a different point of view: While luajit didn't adopt the changes in Lua 5.3 (and partly 5.2) it doesn't mean that it's inferior. It just has a different focus: performance. You probably won't get the same awesome [ffi library](http://luajit.org/ext_ffi.html) in Lua 5.3. There is https://github.com/jmckaskill/luaffi, but it seems like it didn't get updated for 5.3 and will never be as fast as the luajit version since it's less integrated into the runtime. Plain Lua doesn't offer the [low overhead profiler](http://repo.or.cz/w/luajit-2.0.git/blob_plain/8cc89332ffa3b65a43f6e730df18e282bb66ea41:/doc/ext_profiler.html) that luajit (v2.1 branch) provides. Also going with 5.1 provides you with almost 10 years of solved problems ready to be googled. Right now I feel like Lua 5.3 doesn't offer enough to convince me to update.
I wrote a [programming game using Lua](http://infon.dividuum.de). It's using a client-server architecture. The server is running Lua for each player in a sandboxed environment. To see the current game, players connect to that server using the [game client](https://github.com/dividuum/infon/wiki/ScreenShots). To play the game, they connect to the same server using telnet and use a command line interface to update the code that controls their creatures. They can also inspect the current state of their creatures. Lua is pretty awesome for that, since it allows you to update running code on the fly. The game is open source, so feel free to have a look: https://github.com/dividuum/infon. The game hasn't been updated in a while, but it still works.
I've always done it this way, because module was already deprecated when I *started* using Lua.
Numbers are symbolic and can mean whatever symbolism you place on them. It doesn't matter that it's called "5.3" or "6.0" or "Lua SysX v.10 Vista SE". Changing the dot number *is* a major release. I think it was once described that the first part is the version of the language, second is the implementation, and third is release. Semantic versioning is not some axiomatic law that must be followed else your project be irrevocably broken. Lua versions are what they are. To insist it's wrong is pure dogma.
Ah yes it does have that. But that basically tells you people stopped watching somewhere at minute 1 through 60 and there could be any number of reasons they stop watching: information they already know, video too long, attention span too short, confused on some point and frustrated, had a stroke, whatever it is, you won't really be able to see by a graph that covers a whole hour of material. If if a person Googles "Lua tables" or "Lua loops" they may never load this video at all. If it was broken down into different videos those would likely come up in searches from titles or from the description and the person could get right into it without having to sift through an hour of material. Then you'd have x number of direct hits on each topic to get a sense of how in demand a topic is and could analyze the length of time people spent watching each video to see how effective that particle presentation is at holding attention. 
...and I'm using it. ;)
Does rainmeter work with HSV? Tell it the saturation and value as a definite value, rotate the hue (i=i++, if i = 361, then i = 1) instead of 3D vectors. Might simplify it forwards and backwards in the code, especially if you use a seperate value for a counter and hue. Just a thought.
Theres ALOT of different Variables and Measures that are tied together through 4 Visualizer Files and 2 Lua files (+1 for the Refresher.Lua)
You're more than a little confused. `doSub` does not mean "do subtract" that you seem to be thinking. It means "do substitute". Rainmeter isn't the best environment for learning a new language. It's got a lot of different layers with confusing terminology. (A RM "variable" is not the same as a Lua "variable".) Just to point you in the right direction, the LineExtrude.lua script is where all the magic is happening and all it does is grab the meter values (`SKIN:GetMeasure("mBand" .. i):GetValue()`) then throw some mathematical trickery to change the parameters of the lines (`SKIN:Bank("!SetOption", ...)`). Right now it just changes the position and length of the lines, you want to also change the color. That would be the option `LineColor` as an RGBA value. If I wanted to make all lines red, what one thing would I write in the script that would set the `LineColor` option of each line? Once you have that down then you can work on the correct algorithm for making a different color for each line. Although it really shouldn't need to be that way. The script updates because the meter values change. The colors are not going to change over time (or are they?) and you should be able to set the colors once then not worry about it again. Except you need special formulas for working with RGBA values (has to be done in the HSV space as /u/SimonJ57 said) but I don't see anything like that in the Rainmeter manual. Or... actually it just occurred to me the best way to do it but I don't know enough of RM to say exactly what the script should be. But don't worry about that, the sloppy way of updating every frame will get it done with the simplest modification of the current script. Just get to the point where you can draw lines with the color you choose before trying to do more sophisticated things. Doesn't Rainmeter have their own subreddit for this kind of thing? Or are they equally as naive about Lua as you? We don't spend a lot of time here talking about Rainmeter. (At least all the Garry's Mod people finally learned to stick to their sub.)
I know that. But semantic versioning was created for sake of consistency, not using it makes no sense. Surely any project can come up with it's own definitions for version increments and what not, and it will work. Doesn't mean it's clean, ideal, or helpful to do so. Making things more confusing is the only guarantee you get. And in Lua's case every minor seems to break compat in some way. It's a shame Mike doesn't want to support 5.3, but it's a bigger shame that Roberto is so irresponsible with backwards compatibility. Had he saved those changes for 6.0 things would be so much better.
You do realise that you only cited examples of other languages breaking stuff at majors and you're contradicting yourself right? The "problem" you said they are facing is not really a problem. It's nothing but a fact of life. There is always people who will never want to adapt to newer things, just like there will be people that 5 years from now will still be using PHP4 despite all of the security issues fixed in 5, and just like there are people today who still use COBOL and IE6. There is always resistance to change, but once in a while everyone has to do it. Lua breaking stuff at every little update, contrary to what you're saying, doesn't "help" with that problem at all. While we're at it let's rename binaries at every POSIX revision, have more planes crash so it's no longer shocking, and make the drive position of a car's gearbox sometimes trigger the rear, that way we won't always expect it to go forward and take it for granted. Let's make everything inconsistent so we can never rely on consistency or a solid base ever again!
Manage your path finding, your camera, your unit spawns and interactions, your gui, your user input, sounds and animations, file saves, and apply physics to objects. Like in [Homeworld 2](https://youtu.be/CouvsLHav9I) If you are just starting , you'll want to figure out the elements you'll script with Lua by creating something like Pong in some version of Lua with graphics, maybe over at [codebymath](http://www.codebymath.com/) or using [wxLua](http://wxlua.sourceforge.net/) that [Zerobrane Studio](http://studio.zerobrane.com/) is built on and has built in. 
In Lua, X.Y.0 releases are the breaking releases, but they take _years_ to be released. Any X.Y.Z release with Z &gt; 0 is _completely_ compatible with X.Y.0. _Only_ bugfixes are made. No changes, no additions. There's not even a way to get the .Z point release number programatically from inside Lua, because it _doesn't matter_. That's how far they go in backward compatibility guarantees. Lua 5.2 is Lua 5.2, no matter if it is 5.2.0, 5.2.1 or 5.2.5. Plus, a while after they release X.Y.0, they release another releasing X.(Y-1).Z, fixing _all known bugs_. Yes, there are currently _no known bugs_ for Lua 5.2. http://www.lua.org/bugs.html The distinction between bumping X and Y is somewhat arbitrary, but take a look at the timeline: http://www.lua.org/versions.html Roughly, in a new X.Y+1 release, there is compatibility breakage but you have an upgrade path. The list of incompatible changes is usually short, and I maintain [code](http://luarocks.org) that runs in 5.1, 5.2 and 5.3 with no issues, and I've seen people who maintain code even for 5.0 (I don't do it because no one in my user base seems to be using that anymore.) I wasn't around in the 4.0-&gt;5.0 switch, but I hear it was a major change that required significant rewriting. Same with 3.2-&gt;4.0 (I know of companies who remained in 3.2 long after 5.0 was released because it "just works".) Having said that, Lua 6.0 is nowhere in sight. As you can see in the above timeline, Lua releases have been stabilizing over the years. The release date timelines for point releases are also interesting. http://www.lua.org/ftp/ 
1. There are 4, but technically they don't all exist because func() is never called. The first one you declare is global, but it is immediately shadowed by the local; they both exist in the same scope, but the local will be the first one to be accessed, so the one on the first line will never be reached. Inside the function you declare a new local, which is our third. The next line will access the variable in the scope closest to it, which is the local on the line above. The one inside the if is its own variable. 2. The variable in the if block is not being reassigned; it's a new variable. 3. The if is testing the variable declared on the first line of the function (which, again, is the same as the one on the line after it) 4. If you get rid of the "local" on the variable inside the if, it should access the variable declared on line 1 of your function, unless I'm misunderstanding your question. Feel free to ask me more if you need clarification.
1. 4 2. It's a new variable that goes out of scope after `if ... end` 3. The first variable in the function that has been assigned to twice prior. 4. The variable in the outer-most scope, that isn't a global, is inaccessible to the `if` statement because the local variable of the function scope hides it. 1. Stop using conflicting variable names like an doofus. 2. Or use the `debug` library... 3. Accessing upvalues with the `debug` library is using napalm to light a cigarette. The `local` keyword introduces a new variable that shadows any other variables with the same name until the current lexical level's `end` statement (or `until` in the case of `repeat`). If you don't use the `local` keyword you're working with the variable that is currently in-scope. When you use the keyword `local` you are starting a new scope with the names in the statement. Scopes are strictly nested and resolved at compile-time. (But note that what is called "global scope" isn't really a lexical scope.) When you see `local` you can mentally insert a `do` before it and an `end` after the last line of the current block and it will be lexically identical. A local variable from a scope above a function that is used inside the function is referred to as an "upvalue". Upvalues are like semi-globals. They're shared between different functions, but aren't available outside the lexical unit they're defined in (file, function, etc.) Think of it a bit like the "private" keyword of class-oriented languages. A "global" is a variable that doesn't resolve to any introduced local name. It's a fallback that behind the scenes translates to `_ENV['variablename']` and thus you can force a value into the global namespace by reading/writing the `_ENV` variable directly. `_ENV` is always a local variable. 
Others have already noted there are four variables named "variable". However, there are actually five variables in your code, as "func" is also a variable which has been assigned the function.
I changed the name of each variable you defined to be different: a=0 local b=0 function func() local c=0 c=0 if c==0 then local d=1 end end Note that the variable only changes with the `local` keyword.
'as well'? as in a seperate project? or do it under the one umbrella? For me, unicode support is a must, which isn't available under ROTE (only libvterm). I assume that libvterm is a strict upgrade from ROTE? just adding more features?
By going through some cleanup to package it up to paste here, I found a couple problems, and now I get LUA_TFUNCTION on the top. Nothing to see here please move along.
updated.
Do you have the rights Scrabble? Why specify Lua as the language? What platform is this intended for?
You should sandbox the whole script before running it instead of running it in the global environment and then sandboxing a function it sets there. You'll have to change 'createSandbox' to leave sandbox environment table on the stack, and then index that table instead of global environment when fetching exported functions.
...oh. Yeah, this is much simpler and cleaner. You're right, I had misunderstood what coroutines were meant to simplify. Also, this means I'd be saving registry keys instead of lua_State pointers in my wrapper class, right? Because I still want to have that vector of mobs in C++ (i.e. the mob scripts should run in lua, but I don't think they should be created or managed in lua), and that's the only way of permanently (longer than a function call lifetime) referencing a lua object from C. Also, thanks for responding. :)
Okay, yeah that's how you usually do it, just wanted to check if I had happened to miss anything else.
&gt; So the "priming run" has the potential to execute user-supplied code, outside the sandbox, if the sandbox has not yet been applied? Right, the loaded script is just a function. It can do anything with its environment, not only assign functions to global variables. &gt; Do you have any opinion about doing something like, &gt; &gt; lua_rawseti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS); &gt; &gt; This could be done prior to the priming run, and prior to loading script text. This is a nice solution if you use one environment for all scripts you load - everything is sandboxed from the start and you can access the environment conveniently using 'lua_getglobal'. However, if you need to load several scripts in separate environments IMO it's better to avoid global side effects and use 'lua_setupvalue', like in your 'createSandbox', immediately after loading a script. By the way, you should probably use 'luaL_loadbufferx' with "t" argument instead of 'luaL_loadbuffer' to avoid loading bytecode, which can be maliciously crafted.
&gt; Would you recommend the video? Not unless you're already an experienced programmer. It doesn't explain programming concepts at all (variables, types, operators, functions, etc.). It assumes you're an experienced cook and is showing you where the forks are in a new kitchen.
I did post there, no response yet but I know more. I think it is an OSX behavior. Apparently .bash_profile is only checked once when terminal.app starts. if another program changes the environment starting a new window will not get the original environment defined by .bash_profile. It is necessary to completely close terminal.app to return to the environment defined in .bash_profile.
Other bash related files where you can look are ~/.bashrc, /etc/profile and /etc/bashrc. There is also another file, ~/.MacOSX/environment.plist, where environment variables can be set. It does not exist by default
Wow's whole addon api uses Lua. Likely other parts of the game as well, but thats conjecture.
Your `while` loop is conditioned to end when `b` becomes larger than or equal to `LIMIT`. Try to execute this loop in your head and see how `b` changes with each iteration.
the "a,b = b,a+b" line should probably be INSIDE the "while" loop, right?
Because it never terminates.
I am new to Lua,but I am positive I put in a end for that part of the program
You're telling your while loop to end when b reaches the limit. Problem is, you don't increase b, so it never reaches that.
How would I increase B???
The only issue I can think of is the coroutine execution crossing the c call boundary, I've not really explored this sort of stuff, and I could be off. But that's all I can think of. I also don't know how to trigger this in your example.
One of the most important use cases of my system is handling communication protocols (mostly Bluetooth, maybe NFC). Bit handling is crucial for this scenario. I'll take a look at the source code, just to be sure. I might implement my own library for doing that, it is quite simple in C.
Wow, I got a bad case of rtfm. Thank you. 
As I recall, it should work. Otherwise, try a reassign: ``` fun = a["b"]; fun() ``` Edit: code tags are hard to format.....
It works, I initialized the function improperly.
`a.b` is just another way of saying `a["b"]`, in all contexts.
Just write your own. Lua is realy easy to bind to C++ and you will learn a lot about lua that way. 
Np, glad you got it! There's tons of ways to define member functions (including : vs .), it can be confusing. Truth be told I still look stuff up on luawiki every now and then and I've been doing it for 4 years!
Luabridge's manual is in the github repository and also available through[1]. There are alternatives if that is what you want, have a look at [2] as there are many listed. [1] http://htmlpreview.github.io/?https://github.com/vinniefalco/LuaBridge/blob/master/Manual.html [2]http://lua-users.org/wiki/BindingCodeToLua
&gt;Should I start looking for alternatives at this point? If so, are there any recommendations for C++ bindings? The only other one that comes to mind is LuaBind. There's a relatively new (but stable) one that's built upon C++11 features. I worked with it myself and followed it since its creation, it's very neat: https://github.com/jeremyong/Selene
I now know this is an OSX issue. Apparently if the environment is changed in a terminal.app window any other window launched while that invocation of terminal.app is running shares the environment. Closing and reopening terminal app restores the old environment.
I thought that it would be fun to create something out of openresty and decided to write this tutorial, after struggling making this application. It would be awesome to get some feedback, especially about part two https://phpb.com/portfolio/create-image-server-with-nginx-lua-openresty-graphicsmagick-part-ii/ , where I am not so confident about my first attempt at writing lua.
Interesting. I'm working on an image service currently. I first went with perl but after weeks of tuning I couldn't get the concurrency I needed. I'm currently learning lua and doing the same thing as you. 
Awesome, that worked, thanks! Now I have two new problems: **print** and **strmatch** don't exist in this version of lua either. Any idea with those?
In newer versions, the latter is string.match. Which version of Lua _are_ you using anyway?
For other later Lua versions: _G = package.loaded._G Though, if `_G` isn't set due to sandboxing (incorrectly) then the table `package` will probably be nil too; but then again, you should probably also be using `_ENV`.
If this is a second Euler project question, you should think a bit harder about the problem. When is the sum of natural numbers odd? What does this mean for the Fibonacci sequence? Maybe use a little algebra.
LOVE is great because it doesn't make any assumptions about the type of game you want to make. It gives you easy drawing, input, audio etc, and leaves the rest to you. So that means you have to implement things like states/scenes, tile maps, and an entity system by yourself (or use a community library such as [hump](http://vrld.github.io/hump). If you're just getting into game development then this will be a good learning experience, but also considerably more effort than using an engine which already provides those things for you.
Start with 2D - the "3D" aspect of Don't Starve can be built in that with some work. If you go directly to a 3d engine, the term you will be looking for is billboarding - making all the 2D things face the camera at all times. Build a game in 2D and then get fancy with overlapping, angles, and such! It is not a trivial task. Edit: Urho3D is good. Less community, more robust 2D/3D engine support, less helpers (omre work for you)
Interesting. Been playing around with [lapis](https://github.com/leafo/lapis), which runs on ngx_lua, but this might be a viable alternative.
In Lua? 3D? Maybe [Cafu](http://www.cafu.de/downloads) [Dreemchest](http://dreemchest.com/) maybe. Or perhaps [EGSL](http://www.egsl.retrogamecoding.org//pages/home.php?lang=EN) can handle the task. 
Object orientation, as a tradition, is burdened with memes about inheritance. Students trying to learn an OO language encounter the syntax and idea of inheritance, look for more information, encounter ideas about inheritance being crucially important to OO, and then propagate those ideas, confusing another generation of students. Inheritance is not crucially important to OO. Programming-by-difference is not generally a good idea. The most important concept in programming is "Don't Repeat Yourself". In procedural and functional programming, if you see a pattern in your code where you do "the same thing" you create a new procedure or function. This rule does NOT change in object oriented programming. Creating a class is not automatically a good thing. Code, by itself, is bad. Factoring out several similar occurrences of tables BY creating a class is a good thing - it's exactly what was recommended by "Don't Repeat Yourself". Similarly, connecting several classes together via inheritance is not automatically a good thing. If they have duplicate implementations, then yes, you should factor the duplication out, but by default you should factor the duplication out into new function, method, or class, not into a superclass. (If you're thinking of factoring duplicate implementations out into a superclass, then you should instead factor it out into a new class, linked with a has-a relationship with the old classes.) The most important kind of inheritance is "class implements interface". Because Lua is dynamically typed, you don't need to do ANYTHING in order to achieve this kind of inheritance. Just write down what the interface is in a comment, something like "every animal has the speak method". This also works for inheriting from multiple interfaces! Please try to build something moderately real and moderately large (at least two thousand lines?) without using inheritance, BEFORE studying how to implement multiple-inheritance in Lua. Also, if your domain contains an ontology (various kinds of things related by is-a links), it is often actually a good idea to build the domain ontology as an explicit data structure, rather than thoughtlessly conflating the implementation architecture with the structure of the domain.
I have no idea what "IO framework" means... it's like a webserver? In any case, looks interesting.
Im not at the level yet where I could do something like that. I am 100% self taught and have just started playing with Object orientation. but Ill give this a try thanks alot man 
The bit32 library does just what you'd do to implement it yourself. It's very lightweight.
Did you mean `math.acos(x)`?
I agree with many of your gripes, but there are other reasons it's popular. Many implementations are fookin' ***tiny***, allowing it to be embedded in places other languages could *never* fit. I got into lua because that's what [CHDK](http://chdk.wikia.com/wiki/CHDK) is using for it's scripting language.
So...after a grand total of four hours, you declare the language a failure? What the actual...?
If your thinking is as sloppy, disorganized, and incoherent as your writing is I'm utterly unsurprised that you couldn't figure something a little bit new out.
Ah, no. I should clarify. I've used the language as a part of a collection of languages that I use. C++, C#, action script, a priority language my company developed and Lua. I have used Lua for the better part of a year as a part of my solution stack. I wasted 4 hours today tracking down an error that ended up being a syntax mistake in Lua. Lua really is the odd man out when it comes to syntax similarities. It doesn't play well with others in that regard. Wasting 4 hours of my day on a syntax mistake that would never have happened in any if the other languages I listed above made me frustrated. I look at a programming language from a usability perspective and Lua just doesn't measure up. You can't even use tables as hash maps to with string keys. 
Nice Ad Hominem. 
So, for your opinion to be valid there would have to be a consistent alternative to != But for the sake of your game, I'll play. These are the programming languages that I have a passing familiarity with. They all use !=. * Perl * Python * Ruby * Swift * Actionscript * XPath/XSLT * Javascript * Bash * Boo * D * PHP * HLSL Have fun! :)
&gt; short for argumentum ad hominem, means responding to arguments by attacking a person's character, rather than to the content of their arguments. You attack my character by describing my writing as a product of my thinking and thus it must reflect the value of my coding. None of that actually refutes the opinions that I express. So, Ad hominem is exactly what it is. 
You'd realize that we agree on one point if you didn't have such a knee-jerk reaction to my post. 
One other point about usability is also about familiarity. QWERTY keyboards are less efficient then Dvorak but the gains were never capable of winning over people for the learning transition. The majority of the world uses QWERTY keyboards. [Looking at the popularity index for the languages you cite](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html): * C (2) → Lua (37), Prolog (39), Rexx (&gt;100) * C++ (3) → Lisp (33), Basic (9), Fortran (30) * Java (1) → Cobol (27), J (28), Forth (&gt; 50) * C# (5) → Modula-3 (&gt;100), SNOBOL4 (&gt;100), SML (&gt;100) So 4 of your languages you list don't even show up in the top 100 programming languages. And only one of them shows up in the top 10. And yes. I recognize the "TIOBE Index" doesn't reflect line count or "best" language. Just popularity. Just familiarity. What is discussed. In the relevance of the conversation. If someone were to ask "What "no equals" comparison operator a programming language is like most likely to be used familiarity and popularity play a vital role. 
There are far greater problems, it's just that as a perfectionist it can get on my nerves.
So you've gone from "a majority of languages" and moved the goalposts to now talk about popularity. How pathetically predictable. Here's a thought, Sparky: just admit you were wrong. It's not that hard. Then here's another thought, Sparky: remember that when the != style was first introduced (I think BCPL, but not sure here) it was the odd man out and there was probably some bright guy like you talking about how that was bad syntax because it was unfamiliar, like curly braces. Perhaps this way you'll learn two things that are badly-needed for your future: * perspective; * humility. (I'm not holding my breath for either, of course. It's far easier to whine about four hours of incompetence than it is to actually learn.) (P.S.: The TIOBE Index measures precisely nothing except rankings on the TIOBE Index. Methodology matters.)
0-indexing is nonsensical. Indexing is counting. When was the last time you counted something and started at the "zeroeth" one? A 0 base is perfect for offsets. Offset 0, offset 1, offset 2, offset 3, etc. For indexing the ONLY correct basis is 1. The fact that C programmers and those who've been infected by the C blight confuse an index and an offset is on them (C and its infectees), not on the people who use the terms correctly.
This presupposes that the intent was to refute your opinions. It wasn't. It was to point and laugh at the incoherent idiot. The refutations are in other messages above.
Ya, I'll stop feeding the troll then. Have a good night. :)
print(nil) does *not* cause an error. What in hell are you talking about?
Well in the newest system it doesnt have a package system, and i like it that way! That said, wish it had macros so some simple shit could be done to make it slightly less repetative. I.e. `@localize_members table (membername, membername2)` to "import".(though it can also used for tables anywhere!) (in [Julia](http://julialang.org/) syntax, probably they should just take that if they implement it) Really, i love the whole "everything is tables" thing. To be clear "importing would replace: local package = require "some_package" local a,b = package.a, package.b With `@localize_members require("some_package") (a, b)` (edit: this is akin to common lisps `with-slots`) &gt; Some of its syntax choices are dubious, like providing break but not continue for loops. And yet providing goto. Coming from lisp.. Well, dat not syntax. But yeah, perhaps a continue would be nice. Really, would like to have macros. Although inevitably that'd lead to people making silly ones. &gt; No baked-in OOP. OOP Well, if it can be implemented in Lua, Lua should not bake-it-in. But then.. well, it would be nice to have a standard library or something. Seems like a risk of haphazzardness. Building-it-in is like "blessing" it, and then force-feeding it to everyone, so that aint better. &gt; Batteries not included. They clearly state that they're not into making a popular language, but one they'd like to use. Really though, why saddle all sorts of stuff with the distribution. Why implement package systems when distros should be doing that already. Perhaps they should do it anyway though, because in practice, there are too many package systems and many of them wont have it.. Dunno. One disadvantage is that Luas approach is very adverse to being compiled. At least, when it is not JIT, and when the user is not limiting him(her)self to a subset.
Nice! I was looking for a static code analyzer, and this is perfect. 
Perhaps something like this? https://github.com/xopxe/lua-persistor
Unless you just want everyone's favorite logger, why not post your requirements?
Tbh that doesn't sound that difficult to write yourself, you could probably do that in the time needed to read all the replies to this thread.
 local histogram = {} for count,symbol in string.gmatch(text, "(%d+)(%w+)") do count = tonumber(count) or 0 histogram[symbol] = count + (histogram[symbol] or 0) end print(histogram["A1"]) Exercises for the reader: 1. How do you match symbols that do not have a number in front of them? 2. Do the symbols appear in a particular context? i.e. a comma and optional space before then a space after. How do you make sure only that context is chosen? 3. The pattern treats a symbol as a string of letters and numbers. How do you add the dash and underscore characters to the definition of a symbol? 
&gt; It might also help to know what system you are developing for. Primarily Windows. Thank you for all the helpful info.
This would have been better as an extension/plugin/addon for an existing IDE, instead of its own free-standing program.
This is probably true. I should have made it a MonoDevelop plugin. Scintilla's IDE features are pretty outdated at this point. For example, it can't display an auto-completion list and a calltip at the same time. I thought that by making it a standalone program, I would gain more architectural freedom. I wanted to use kind of an avant-garde programming style that makes heavy use of code contracts. I suspect this would have been just as easy to do if I had made a MonoDevelop plugin. The other benefit of making a plugin is that you get customization features (color schemes, snippet setup, etc.) for free. I haven't implemented that stuff in love studio. The standalone app does have at least one advantage over a MonoDevelop plugin: it has a sensisble, minimalistic layout. People need to stop using tree views to navigate their projects. :)
Here's how: download and use "30log" into everything you write. Python-like classes with a faux-braced "class" keyword. That'll sort out your immediate problem, but more broadly here's the core detail you are missing: Lua does not *have* object orientation in its DNA, what it has instead are: * A great do-everything compound datatype, the Table, that can contain functions * A syntactic sugar, the use of the colon instead of dot-syntax, to access table-contained functions: *all this does* is pass the table as the first argument to the contained function, which is exactly equivalent to Python passing the class instance as first argument to a method (which we typically call `self`).
Beyond what /u/cathalgarvey said, you'll also have to learn about metatables, and especially the `__index` field: proto = {foo = 5} obj = {} function obj:bar() return self.foo end -- equivalent to `obj.bar = function(self) return self.foo end` setmetatable(obj, {__index=proto}) print(obj:bar()) --&gt; 5 This is what OO libraries do under the hood. `proto` can also have a metatable, and Lua looks up the `__index` chain until it finds what it's looking for. In more complex situations you can also pass a `function(self, key)...end` as the index, rather than a table.
Here's how i do it. You could also use metatables if you prefer. Class = {} local privateStaticVariable = whatever local function privateStaticMethod() --privateStaticMethod code here end function Class.newClass() local this = {} -- empty table or another class' constructor, which would be a super class local privateVariable = whatever local function privateMethod() --private method code here end this.publicVariable = whatever function this.publicMethod() --public method code here end return this end function Class.publicStaticMethod() --staticMethod code here end Class.publicStaticVariable = whatever return Class Wherever you want to import/include/require this class, add `Class = require("path/to/file/Class")`
If you need a singleton class, have a look here: https://wiki.multitheftauto.com/wiki/CSingleton You need the classlib for LUA by sbx320: https://github.com/sbx320/lua_utils/blob/master/classlib.lua You can use that class for basic lua too. /edit: Just use class = inherit(cSingleton) and you are fine. 
30log seems like it will suit my purposes. I am using it to write a roguelike on my TI-Nspire CX, and I needed class-like things to help me manage the monsters in the environment. I'll be sure to check those out in the future, though
Lua has NO classes or objects, period. Lua has tables and metatables which can be used to implement classes / objects in various different ways.But they are NOT a part of Lua. I usually implement different kind of objects for each of my projects, it usually only takes a few lines of code.
If you want to get something working quickly, [middleclass](https://github.com/kikito/middleclass) is very nice and should be familiar. If you want to understand how it works behind the scenes, then the source is there and is well written. 
I think lupy is now written for the latest version of Lua - it manipulates the environment to get the syntax sugar. You could try an earlier version of that file. This is a good resource for OO in Lua - http://lua-users.org/wiki/ObjectOrientedProgramming
Thanks a bunch! Now [this](http://www.lua.org/pil/16.html) makes a lot more sense.
Lua arrays start at index 1, not 0. Use just math.random(#name1)
Did you install torch first? See torch.ch
Are you sure you've installed the *development* version of OpenSSL, which comes with headers?
This seems to be the most logical going by the error. Either the development files are not present, or the import path is not set up correctly.
Depends on your distro.
You generally want to use raw, unbuffered input and write out the asterisks yourself. I don't really know how to do that in Lua, though, except by looking for Lua bindings for curses or something.
I don't think you can do this with Lua's io lib. You could do this with a system call or using something like curses, as robin-gvx suggests (extension or FFI) or by exec'ing a command line utility maybe.
Ok guys, I figured it out. If anybody is interested, here is the fixed code. http://pastebin.com/yEsuTiJ3 I doubt anybody will find it useful, but in case they do, there you go. If anybody has an easier way of doing this please let me know.
Here you go. I explained some other things as well. http://pastebin.com/26tQ70Db You could simplify your abs function even more by doing return value &lt; 0 and -value or value This is called a [ternary operation.](http://en.wikipedia.org/wiki/%3F:#Lua) 
I'm at work, so the TL;DR comment is: Was this inspired by something like: http://angg.twu.net/miniforth-article.html Which implements what's traditionally the inner &amp; outer compiler in one go (technically I think it's likely along the lines of string threading.) Having only very briefly peeked at the source code, it looks like it's a more traditional implementation on a stack machine. In any case, I think it's a cool idea. I do like seeing more Forth implementations.
value - value - value works for me. [Method #1](http://pastebin.com/pZMGJBYQ) And this is how I told you to do it: [Method #2](http://pastebin.com/eCQhK4K4) And with the ternary operator, you can make it even shorter: [Method #3](http://pastebin.com/KZ3uNDPP) Ternary operators might look like scary wizardy (it's actually not that hard), but know that they are completely optional.
That's where I got it from, but the same didn't work in a normal Lua interpreter.
&gt;pure Lua LuaJIT isn't pure Lua.
This is not possible. You could return a table, that's something like this: `{value = 0}`, (and set it's metatable) but that's about it. You'd then need to do: `tbl[1].value` or `tbl[1][2][3].value`, etc. Maybe mess around with `__call`? `tbl(0, 12) -- 0` You could skip `tbl[0][12].value` then, but it might make your code a bit less clear.
Making both tbl[0] and tbl[0][x] evaluate to zero is impossible. The expression "tbl[0]" in *tbl[0][x]* already evaluates to zero, so you end up doing "(0)[x]", and there's no way you can (or should) make indexing the numeric value zero work. If you really want the behavior in question, you should probably make a custom accessor, rather than using the index operator: tbl.get(0) --&gt; 0 tbl.get(0, x) --&gt; 0 Which is definitely doable, by counting the size of the argument list, and defining the desired behavior.
It is possible. You probably don't want to do it, but here's how: debug.setmetatable(0, {__index = function () return 0 end}) This means that every number now has this metatable where if they are indexed, it returns `0`. So: &gt; print((1)[2]) 0 &gt; --but also: &gt; print(tbl[0][0]) 0
I don't think I learned much, but I have no pre-ordered a game I know nothing about except it looks super cool. 
Does the URL need to be hashed? It might be faster to use raw data. As with all optimization efforts, I'd run some benchmarks first. SHA-1 might be fast enough. As a general rule, disk I/O will be the bottleneck.
sweet!
&gt; Does the URL need to be hashed? It might be faster to use raw data. Hmm, I suppose technically it doesn't, but for my requirements it seems like the best way Basically my PHP is taking an arbitrary url to an image, downloading it and saving it to disk, in a place where my lua script can then predict where it will be for all subsequent requests I could in theory write a lot of code sanitising the urls (path traversal, malformed unicode etc), but it seems like throwing each url into a hash such as md5, will make things a lot simpler (bearing in mind the path code needs to be replicated in both PHP and lua) 
Spookyhash looks interesting, thanks I think if I sanitise the images domain and then suffix it with the Spookyhash to create a filename, this would be perfect. As you say I think MD5 would be very suitable for this too, but the main md5 lib I've found for lua seems to be going through some platform/inconsistent hash issues (depending on which lua is being used)
This is really cool. I just watched a [video](https://www.google.ca/url?sa=t&amp;source=web&amp;rct=j&amp;ei=joVXVefUHI2MyATC4IDwBw&amp;url=http://www.youtube.com/watch%3Fv%3DigkEr8dw9Lk&amp;ved=0CCYQtwIwAw&amp;usg=AFQjCNFG1cl45iiO0B62nT5avDFk1WGJNg&amp;sig2=uXO9fzocX3nbeYdhll6aVg) last night on of the 2014 lua workshop, and I will be following this closely (lapis too). One framework that was not mentioned in the video is [tir](http://tir.mongrel2.org). I wonder why that one never took off. 
That was because I only heard about tir after I decided to make sailor. I still need to take a deeper look at it before I build some opinion :) Gonna add this to my list ^_^
Just string.rep asterisks for the length of the input?
I'm trying to do a proposal through the game, where, once she beats the first level, a "well you marry me" message comes up. Would you be able to assist? 
You need to give a lot more information. Specifically, what Lua-based (since you are posting in the Lua reddit) technology are you trying to use to accomplish this? This sub is not about modding roms so you need to give us more information about what tools you are trying to use and what this has to do with Lua.
You would have more success in the GTAV subreddit than here I reckon. 
What error message does it give you?
Hmm. sounds solid. let me give it a try. EDIT: It worked! Thank you so much! Sometimes all you need is a fresh pair of eyes!
No worries dude! Yeah, your code was all good so I took a peek between those brackets and bam, there it was. Also, you don't need to use semicolons in Lua
Oh cool. Yeah, I guess the dev didn't know. I'm now pondering how I might get some use out of that tweak.
I'm using it to get free gift cards faster through perk tv. 
I've heard about that sort of thing. Does it actually work?
Table-dot-field notation simply doesn't work for numbers or for fields starting with numbers, sorry! I imagine this makes it easier to code a parser that can handle tables and float numbers well?
You've got it slightly wrong: The correct syntax for accessing table elements is: a["x"]. You can also use the shorter syntax a.x, but ONLY when x is string and this string contains only alphanumeric characters or underscores and BEGINS WITH A LETTER. Basically, x must be valid variable name. The string "5" does not start with a letter.
To be fair, it's not that silly a question. For over 70 years people have been asking "How can I write this in a way that can be read by a computer but still makes sense to me.?" When you encounter something that looks odd and makes you ask why, there's likely a good reason for it that isn't going to be immediately obvious. And in your case, there are some languages that really do let you write almost whatever and it tries to do something with it. Look at HTML, it lets you write `&lt;class class=class&gt;class&lt;/class&gt;`, not that anyone in their right mind ever would. 
By far the most common kind of error I get is the sort of thing you see in any dynamic language: typos, passing the wrong values to a function, etc. As others said, undefined variables are just a matter of using a linter. Typos in table keys are still a pita though.
&gt; How often is one tripped up in practice by ending up an array with a gap (nil) in it and thus having the length come out incorrect? Personally? Never. Been using Lua since version 2 and this has never happened to me. Look at Word of Warcraft. ~10 million subscribers supporting a massive online ecosystems of websites dedicated to customization in Lua. There have probably been many millions of lines of addon code written for that game. I used to write them myself and was active in that community, and don't remember this ever coming up in as an issue. It's not like `=` vs `==` in C, for instance.
I've been coding in Lua regularly for the last 4 years and don't think I've tripped an these two, although I did trip on some other things. I've documented them here: http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts; you may find this list useful if you are switching from a different language. I listed handling of array length for tables with holes in the "ugly" category, but I now know *why* it's the way it is (the result is more of a tradeoff between performance and convenience) and I learned to live with it.
I've written some pretty table / data structure intensive stuff like terrain generators / voxel handling / pathfinding, so I definitely fall into the odd camp. You're right that I don't think I've ever run into the problem in a case where I was just writing high level game logic.
I don't know if it's the best, but I liked [ZeroBrane Studio](http://studio.zerobrane.com/). Why? It did everything I needed it to with virtually no setup/messing around.
This is probably the wrong answer, unless you’re *really* open to a long-term, high powered solution, but someone’s gotta mention Vim. It turns the act of editing text itself into its own language you can become fluent in. Plus it has plenty of plugins available to suit whatever purposes you might have. But like I said, it’s a long-term, high powered solution. You kinda have to become familiar with Vim for its own sake before you can effectively customize its functionality with its myriad settings &amp; plugins. For an example of how crazy it can get, [here’s my “vimrc” file](http://goo.gl/3yn8bH), the place I put all my customized settings (and list my plugins, thanks to a plugin that lets me list them that way in order to automatically download &amp; install them from the internet). It’s easier to navigate in vim itself, those box-character headers have “fold markers” in them for collapsing sections of text.
I haven't used a Windows machine in a decade, so I don't have any direct feedback. Be sure to ping the [lua-l mailing list](http://www.lua.org/lua-l.html). 
Lua means moon in Portugese which is the actual etymology for the name. Fun fact.
Wow! Great article. Comprehensive. Thank you.
I've really only used ZeroBrane Studio, but it seems to hit all the important stuff: * Acceptable editor (project view, to jump definition) * Out of the box support (including debugging) for different Lua runtimes (51, 52, 53, LuaJit, LOVE, etc) * Static analysis * Zero setup While cool I've never actually used the live coding or Markdown comment support.
That's why I said it was a cautionary tale and an marketing lesson. &gt;the cautionary Chevy Nova tale (not a totally true story but a good marketing lesson). 
Main requirement was remote debugging of Lua embedded in a C++ application. It used mobdebug to do this, and it worked flawlessly.
Well one obvoius thing is having it warn me if I'm referencing a variable that has not been declared, perhaps because of a misspelling. The lua language does not do this, so if an IDE can, that's nice.
Mahalo! I thought it was relevant for OP, too, as he'll be interning at Lua central... I should add that *Lua* is also a name of Hawaii's martial arts practice. It's all very contextual! And the use of Hawaiian words on the web is pretty popular. *Akamai* is an old one... It means smart, wise. I still don't know if akamai.net has a local Hawaii connection. *Wiki* is the one most people are familiar with; Hawaiian usually use it as *wikiwiki* for quick or quickly. Mahalo nui loa... Many thanks! 
Just project, debugger and syntax highlight would be enough for me!
I think you want to use string.char() to convert integer character codes to strings. You should be able to do something like: foo = "foo" .. string.char(a,b,c) .. "bar"
Would you be able to forward me some data on how popular typed lua is? I can then start spreading the word here at Microsoft.
Working on it! What do you find most annoying when writing lua code?
1+ here, seriously!
It's why I mentioned it. Even without type annotations, this kind of example should raise a warning from the tooling: local x = true local y = x .. " world" -- type mismatch
I very much abuse lua, and it is one of my favorite languages. My current project is running LuaJIT 2.0.3, and contains about 4.5mb of lua code. By abuse lua, I basically treat it as dynamic C++, with classes, objects etc. I use tolua++ to build bindings back to our C++ game engine. I currently use ZeroBrane Studio as my IDE, and I like it a lot. I have also used Decoda and Tilde in the past. I have not used BabeLua or NLPLanguageService. A Lua Language service for VS would need the following: * Minimal Setup, it should just work. Use the pdb or static analysis to hook into the lua library. * Debugging support. With support for changing scripts while the project is running, and breakpoints update their line numbers correctly. I.e. Lua throws an error about a nil value. Insert an if check above it. Breakpoint has moved from line 90 to 93. Every IDE I have used so far fails. Leaves the debug breakpoint at line 90, but moves the IDE breakpoint indicator to line 93. This requires toggling breakpoints on both lines to correct. * Syntax Highlighting * Auto completion * Goto to function name * Outliner/Class view like thing. List all functions within a table or 'type' * Just for fun, a parser for C++ header files to build automatic bindings for LuaJIT's FFI. I.e. builds wrapper C functions and C structs for C++ classes. :P 
Yes a million times yes.
Never though about debug pointer moving between Lua and C++. It would be amazing to have a complete callstack, seamless between Lua and C++
I agree, Vim is my go-to editor, my vimrc is not as crazy as yours though. However, I am asking about IDEs since it's something I am looking into at the moment - if you have any suggestions that'd be great.
I think it's important for debuggers to trap errors (i.e. open up a call stack/variable browser/etc. when runtime errors occur). I've spent some time making a Lua IDE myself, but people don't seem to be very interested in it: http://www.reddit.com/r/lua/comments/33rvn7/a_type_checking_ide_for_l%C3%B6ve/ If you have any questions, I'd be happy to help out. 
The usual question: does it work with LuaJIT (Lua 5.1)? I definitely approve of wrapping STL containers.
Note also that you can integrate Luacheck to your favorite code editor: that's even better than having it in the interpreter.
Agree! I would put debugging on the top spot, though.
I've used [Decoda](http://unknownworlds.com/decoda/) before, made by the guys behind Natural Selection 2 (which uses Lua extensively). It worked well enough for my purposes, but now I'd probably use ZeroBrane instead.
LuaJIT follows the 5.1 Lua API. As you can see [here](http://www.lua.org/manual/5.1/), the function luaL_setfuncs is not available in this version of the API.
I'd handle security in the host (C/C++ code) instead of in the Lua code itself. Lua programs are stored in plain text format so anyone can edit them. Obviously, this is not secure.
Because Lua is an interpreted language, meaning the script will be translated at the same time as it is executed, and thus the script will be stored as is instead of as executable machine code or object/intermediate/byte code. At least this is what I assume, I'm not an expert in the specifics of Lua.
Which still makes no sense, writable binary is just as bad as writable text, just some tool/harder to understand stuff between the hacker and what he does. And it doesnt make sense in the context of MAC. The assumption should be that an uncompromised system gets some compromised addition. MAC then has to be able to enforce what that addition can/cannot access.(potentially limiting the compromise of the larger system) Anyway, mostly i am hoping this is a viable way for defining what should(nt) be accessible in the first place. In principle implementation and defining how things may depend on each other are separate. (but i dont quite oversee the problem well) (edit: btw [think this](https://www.gitano.org.uk/supple/) might be the sort of thing i am looking for.)
Just to let you know, I just pushed Lua 5.1 support. A lot less changes than I expected!
decoda seems to work the best of what i've tried - handles multiple vms no problem zerobrane doesn't seem to work with multiple vms running in the same application Unfortunately for actual text editing.. both are terrible, I currently use sublime for that.
Also my experience is that BabeLua is borderline unusable, and that NLPLanguageService crashes VS 
cool wonder what ever happened to that 'new gc' that was talked about a few years ago 
Things that work on later versions are somewhat preferred, of course :) Noticed `_ENV` in the `lua` implementation seems to be automatically added; load("for k,v in pairs(_ENV) do print(k,v, _ENV[k]) end", nil, nil, {pairs=pairs, print=print, _ENV="but then now a string"})() -- Prints it Infact i think it is "special" at some other level, as if it has a metatable when actually in execution.(`_ENV[k]` shows the string too, so it isnt a matter of the iterator not being altered) `luajit` has the `setenv`, no `_ENV`. That said, `loadstring`, `loadfile` seem to work on both, so at least when focussing on "`require`-replacing",(which is what i am thinking of doing) maybe not go `setfenv`? sandbox.lua might be using `setfenv` because they're sandboxing functions, not strings/files. (even so, wonder why a funcall function doesnt just have an `env` input.) Dunno what this protected mode `pcall` does. I think that if aiming for "security" in sandboxing, [this supple thing](https://www.gitano.org.uk/supple/) might be good, but definitely looks more complicated to do. At least in principle, the first step is specifying what things may(not) access, and then to actually implement that.. I am basically hoping to specify it, basically transparently. People can just add extra files specifying what may be touched, or by monitoring via a metatable put on `_ENV`, looking at that, and then "setting in stone". Once specified, hopefully sandboxing implementations can just use the information and do their thing.
I've been mostly writing C++ of late, but did write a few bits of Lua recently, after not using it much in some time. Errors that bit me 1. I'm used to C++ syntax for member fxn call, so some times I accidentally use it in Lua instead ":" 2. Setting up a metatable __index function, which ends up being called in an endless recursive loop. 
It would be cool if you could emulate / connect with [Luacheck](https://github.com/mpeterv/luacheck). It detects a bunch of stuff that the regular Lua parser doesn't. The biggest exponent is using undeclared globals. But there are others like empty if branches, or unused variables.
In basic terms, you can have a game engine running in a high level language (eg. C++), where this will handle the graphics, audio, game loop etc. Then you can have a virtual machine ontop of that where you use a scripting language (Lua) to control certain aspects of the game (eg. enemy behaviours), this allows you to tweak them in real time. You can do this because Lua is compiled as it is executed inside a virtual machine, and you can bind variables/functions to the ones inside this process by making them point to the same memory address. To actually do this you will need a library for whatever language you are going to be using, I assume you'll be using C++, where there are quite a few libraries for this but LuaBridge is the main one I know of. https://eliasdaler.wordpress.com/2013/10/11/lua_cpp_binder/ Alternatively you could write your own virtual machine/interpreter, but I imagine you don't want to take that much time to do that if there is already something out there.
Yes, definitely! And much more. That's the simplest case.
I really like html helpers like this. I use Lua for mobile apps and am glad you have put the work into making HTML5 output easier. Thank you!
I have been using [Lua Glider](http://www.mydevelopersgames.com/Glider/) for a couple of years and I really like it. I believe it is a Netbeans IDE with Cider Debugger. It has breakpoints, watches, step into, etc. There's also a profiler and the GUI is very customizable. I tried out ZeroBrane when I was having trouble with Lua Glider after an OS X upgrade, but I could not get used to the editing of text files to customize the GUI. I didn't try the debugging features then, because I was so frustrated I couldn't get it to look the way I wanted. So I don't know how the debugging differs.
Would you be able to add some perspective on why you feel babelua is borderline unusable?
This is being considered, though at this point, we are working on a solid base for the Lua language service.
Integrating with luarocks
REPL for debugging a live program would be cool!
It has been awhile since my last used it so I reinstalled it to try again. It seems *much* better now, the debugging was just bad before, but now its fairly good. It seems quite usable now. I did encounter some issues getting it working once again. -it installs fine, but when I first set up my project it was doing these rather irritating things: 1. When I add files to the project it is *copying* my lua files into some other directory relative to the project file 2.because it copied the files, debugging wasn't working because it couldn't figure out where the lua files were actually at I remade the project a few times and eventually it worked and discovered the existing files and stopped trying to copy them Debugging is solid, but could use a few things -I have to either debug C++ or debug Lua, it does not let me debug both of them at the same time -when debugging the local variables view is always empty (Decoda actually did have the local variables view working correctly, and I think BabeLua uses Decoda so it should be able handle it--) -there is no syntax highlighting going in any of these views -when it tells you where some code is located(file/line) it doesn't let you click on that link to navigate there(like in the context view) -goto declaration doesn't seem to work, I know this is a dynamic language so this stuff is imprecise, but sublime manages this much better. If it doesn't know the type it can at least bring up the option to jump to any location in the lua source that defines that name. When debugging it even knows exactly where it is defined since hovering over it shows the file/line..but it still won't navigate to it. -smarter syntax highlighting(and enabled within all the various view windows). It colors function declarations, but not function calls. -local variables should be colored differently than members/globals -the intellisense is just ugly white, and doesn't bring up any of the comments as you would see in Visual Assist. intellisense only appears to work when debugging. It should ideally work even when just editing outside the debugger. It may not be 100% but anything is better than what it is currently doing -intellisense seems to require clicking on things to actually see results. It is much better if it shows results by hovering instead -tables syntax should have its own color -it isn't doing brace matching highlighting Overall I'd say the thing that needs the biggest improvement is code navigation; being able to figure out where things are, and quickly navigating there. Right now its leagues behind VisualC++ w/ Visual Assist, and even sublime is much better at handling Lua 
Maybe that's why no-one's doing it yet. Well, what about giving small warnings if the variable you're referencing is very similar to a declared/existing one? That would be a high probability of a spelling error. Buto of course the warning should be easily dismissible.
ZeroBrane Studio doesn't support debugging of multiple VMs, although it's possible to run multiple instances of it and debug different VMs from different instances (you just need to configure different ports for different instances). It's probably possible to support multiple VMs from the same application, but I couldn't come up with a proper UI for it. How does Decode deal with debugging stopped in the same file in two different places? How does it distinguish between stacks and watches in different VMs?
Well you could either write the whole thing to run on the linux system then set up some sort of vnc based solution or write the gui as a seperate program that connects and issues commands to a program on the server. you would need to develop a security system for this
What I would do is use a vnc to remotely control you Linux desktop. Then just make a GUI on that. I use tightvnc, works like a charm. 
strict.lua, which ships with Lua, stops script execution if you throw it an undeclared global variable and tells you the line number of the call to the undeclared variable. See http://www.lua.org/extras/5.2/strict.lua There is also Thomas Lauer's LuaStrict, http://thomaslauer.com/comp/LuaStrict 
Damned 5.2/5.1 divide...
We've been using lua for a while now. Development of lua scripts is either in Sublime or Zerobrane, and all other dev is in Visual Studio (C/C++ and C#). My suggestions; on the development side: - syntax highlighting - intellisense - right-click on require'xx' to open the file On the debugging / runtime side (pretty much the standard debugging idioms): - step (F10, F11..) into lua scripts. Ex: call/pcall step into lua and not C. I don't ever want to step into lua's C code, I'm not debugging lua, I want to debug the scripts... - regular breakpoints into lua scripts - watches, locals when debugging lua scripts - when I'm in a breakpoint in a C module, and there's a lua_state around, I'd like the ability to look at the state (using a watch for example), and from the watch manipulate the lua stack. I'm not talking about the call stack, but the lua C stack. At the minimum it would be nice to expand the C stack as a table with pretty writes of the content (this is a common way to debug lua_state issues from C). - when debugging scripts, so from within lua scripts, seeing the lua callstack would be very useful. It would make it easier to debug other people's scripts, easier to reverse engineer existing lua scripts. In the debugger's watches, when expanding a lua table, I'd be happy if it behaved similarly to lpeg's pretty.write . I'll think of other ideas and post some more later.
At first, I struggled to figure out what I needed to change, then I thought I found what I needed to change and changed it, but then I couldn't immediately see what changed. The IDE I am currently using shows you a mock UI which changes instantly when you change one of the color settings, so you can see what things will look like.
Agree; having the immediate impact of the changes is very useful and I plan to enable that for most of the settings (although it will probably be applied to the actual UI).
I was about to ask where this would be useful... I think I still prefer a templating solution over a generation solution: https://john.nachtimwald.com/2014/08/06/using-lua-as-a-templating-engine/ Great work though!
This is not true because the attacker (who can modify or write new Lua files) may not be the same person as the person who is running the binary on their machine. For example, an attacker might distribute a Lua file as an extension for a certain program. That program can use a sandbox to limit the amount of mischief that the Lua file can perform as a way of protecting users of the program. The attacker may not be able to distribute a binary patch through the same channel.
You could use a client-server architecture with the client being the GUI. Or you could just forward your local X server through ssh?
The thing that I think is really missing that I've been hurting for is a way to debug (and profile) that unifies the C view of the world and the Lua side of the world. The problem right now is that if you debug Lua through tools like Zerobrane, you can only see the Lua side of the world. You can't peer into userdata, nor can you really get any information about where you might be in the native side of the application. Conversely, if you are debugging on the C-side of things, assuming you can even figure out how to break at a particular point in Lua code, your C debugger shows you only the representation of the Lua C implementation (which is essentially running through the virtual machine). This is not useful for most people since it isn't obvious how the C internals of Lua map to your actual Lua scripts. What I would like to see is a way to break at some code either in C or Lua, and see the entire callstack (which includes when C calls Lua which calls C which calls Lua, etc), and a way to visualize data in a way that is understandable (e.g. seeing Lua VM implementation isn't useful to me, but seeing how variables passed/shared between C/Lua and being able to watch them change, or to inspect the contents of userdata from the Lua side) would be extremely valuable. I believe Python and Ruby projects had used Dtrace to accomplish some of these ideas for performance analysis. I believe they set probes and defined the transition barriers in such a way that instead of Dtrace spewing out C callstacks of the VMs running, they were able to map it into the functions you had in your scripts. 
That is a fair point and completely true. However, my point still stands in that 1) Lua being plain text in itself does nothing to make it less secure and 2) armornick was talking about the sandbox, not about sandboxed code: if an attacker can modify the sandbox if it's written in Lua, the sandbox is clearly either broken or circumventable, and writing the sandbox in C/C++ would not have fixed anything.
&gt; if you debug Lua through tools like Zerobrane, you can only see &gt; the Lua side of the world. You can't peer into userdata, nor can you really get any information about where you might be in the native side of the application. That's true, although you can attach __tostring or __serialize metamethod to your userdata and this will be used by ZeroBrane Studio to serialize the values in Stack, Watch, and Console panels (as well as in the tooltips); this way you can have more control of how userdata is shown during debugging. It's a bit of a hack, but since you can use expressions in ZeroBrane watches, you can also write a function that returns current C stack as a Lua table. When you use that expression in the Watch panel, you get your C stack shown and can explore it.
 decoda has a window called "Virtual machines" so you can select which VM you want to debug. Also this is basically the same thing as debugging multiple threads in C++, in Visual Studio, there is a window called "threads". By default you don't need to select a VM or thread, you place a breakpoint, and if any of them hit it, it breaks at that location, and selects that vm/thread as active. If you continue, it will then break again on whichever VM/thread first hits the breakpoint. If you change the VM/thread while paused, it updates the callstack /locals to reflect the new thread.
That's interesting. Decoda's case is simplified by doing "local" debugging; this in my case is done over sockets, which allows for remote debugging, but complicates a bit the case of serving multiple debugging sessions. So, if you paused the debugging in one VM and the breakpoint is triggered in another VM, then the IDE is switched to that second VM, but the user has an option to switch between them, right? I've been thinking about implementing this mechanism and if you have interest in testing it (and can answer few more questions), could you drop me an email to the address in my github profile: https://github.com/pkulchenko? Thanks.
Hi, i am author of NPL Language Service (open sourced) you mentioned in the post (Check the spelling) Is it an open source project at microsoft? Here is my wish list if you are taking it seriously: 1. Refactoring of variables or function names (at list within the same file) 2. Search for references (guess is fine) 3. Find and Goto function within same file 4. Attach and debug a running process. (I already implemented it, you can refer to NPLDebugger, another open source VS plugin of me)
What would be the advantage over just using electron? If you want your guest application to be written in lua, adding a lua interpreter to electron seems like a better approach, IMO. Also consider luakit is GTK+, not native.
There wouldn't really be a big advantage. I just though it would be a fun project to implement.
Add some support for the concurrency in [luaproc](http://github.com/askyrme/luaproc). It's decidedly more [scalable/performant](http://www.inf.puc-rio.br/~roberto/docs/ry08-05.pdf) than most alternatives, but a downside has always been passing code in as strings which aren't syntax-highlighted. Adding syntax highlighting to code in longstrings (perhaps only certain longstrings, such as those defined with `[=[`) would make the library a lot easier to work with. The same could be said for supporting [LPeg.re grammars](http://www.inf.puc-rio.br/~roberto/lpeg/re.html) with similar highlighting. Supporting [typed lua](http://github.com/andremm/typedlua) description files could be helpful as well.
No I had not. Thanks. 
I felt the same way about PHP syntax. I think my career as a PHP programmer failed to get of the ground because I found its quirks compared with the languages knew so frustrating that I gave it up, and that is when I had started to develop a PHP framework when no one knew what PHP frameworks were. That's programming life. Stick with it, get used to it and get over it.
https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
I'm on mobile but let's try: - is your stdout attached to a console? this is what makes the actual beep - how is the \7 interpreted in lua? can you pipe the output thru hexdump? - what os are you on? on linux you can try `aplay` with a sound file
Thank you for your response, I`m using Autotouch app in iOS 8 that uses Lua language scripts. It has a built-in function [playAudio](http://autotouch.me/?page_id=5#playAudio), but whenever I include this function into my script my iphone restarts into safemode. I already emailed the developer of autotouch, and he said he will look into it. However, this app supports many Lua functions that are not included in the manual, that`s why I wanted to find out if I could execute some kind of a sound alert in the code by using another function, since the default one is not working. &gt; *is your stdout attached to a console? this is what makes the actual beep? I'm not sure, I`ll check now. &gt;*how is the \7 interpreted in lua? can you pipe the output thru hexdump? I found those code commands through google, so I don`t how they are supposed to work... &gt;*what os are you on? on linux you can try aplay with a sound file? I`m using iOS 8 on iPhone 6. I`ll try to check out 'stdout' and ' aplay'. Thank you very much! 
sorry, you're as far away from a linux console as it gets. none of aplay or \7 will work for you. you may need to work with the authors of the framework.
LuaJIT is almost compatible with Lua 5.2. Basically, just avoid using _ENV. It does not, however, support the changes from 5.3. The main advantage from 5.2 is probably the support of goto, which is useful if you use Lua as a compilation target. The main advantage from 5.3 is the support of 64 bit integers.
Anything written in Lua 5.1 can be run in LuaJIT. LuaJIT does add some features that extend 5.1 which could make a program written in LuaJIT incompatible with 5.1, but these features can be disabled during compilation. 
LuaJIT did backport goto from 5.2 and unless a larger than 2^53 integer is needed, it doesn't matter (doubles store integers just fine). That said, LuaJIT's FFI is pretty powerful and makes it possible to use any C data type quite easily, including 64-bit integers.
A quick look at [pLua-XE source](https://github.com/felipedaragon/pLua-XE/blob/master/src/Lua.pas) shows it to use a wrapper around Lua5.1.dll. From [LuaJIT](http://luajit.org/install.html): &gt;LuaJIT is API-compatible with Lua 5.1. If you've already embedded Lua into your application, you probably don't need to do anything to switch to LuaJIT, except link with a different library: It may be as simple as replacing Lua5.1.dll with the LuaJIT version. 
Maybe it's because of my poor English but by writing "100% compatible" I meant "compatible both ways". LuaJit (at the time of Lua 5.1) had extra features that Lua 5.1 lacked.
For the record, LuaJIT has a [BitOp library](http://bitop.luajit.org) which can also be used in Lua 5.1/5.2. And yeah, Lua itself is a very divided language. Lua 5.3 itself has broken a lot of compatibility with previous versions of its own language. For it's purpose as a embedded language this is fine. But ever since 5.3 came out, I can see libraries either supporting 5.3 or LuaJIT/5.1/5.2. It'll be pretty difficult to support both and that's unfortunate for the Lua community who uses it as a general purpose language.
Interesting, but unuseble
Well that's freaking awesome. 
Why would it be unusable? Unless you're talking about for everyday use of course.
Yeah, in good old BASIC this would read FOR dy = -BoxRadius*16 TO BoxRadius*16 STEP 16 FOR dx = -BoxRadius*16 TO BoxRadius*16 STEP 16 
So, why are the BoxRadius variables multiplied by 16 and the increment is also 16? why not just not have those two things?
Yup, the old recursive __index... Speaking of that, what's the cleanest workaround? I usually set __newindex to redirect elsewhere and then __index to use that, but maybe there's a nicer way?
The syntax is: for beginning, end, increment do end In your case you can also write: local iVar = 16; local iRadius = BoxRadius*iVar; for (iRadius)*-1, iRadius, iVar do
I think if you genuinely care about the situation in, say, 10 years from now, lua isn't your best option in any case. Its strength is that it "just works", and that strength kind of gets undone if you don't stick to one lua version for the duration of your project.
just a table with multiple arrays. I've been looking at serpent and message pack. I think for my purpose it shouldn't be hard to code a serializer per hand. 
But you can declare them before the loop begins.
Really, that should be a 10-line program at maximum. Give me an example of such table.
Currently, the only language for the browser is js. Just accept it. But you can use a tiny http-server to interact with your lua-scripts through CGI. Just start the server and use any browser. Or you can use some lua bindings for Qt/Tk/GTK/etc
Exist there free LUA Apps for Android for first contact with LUA programming?
There is QLua but I have never personally used it, so I cannot say how good it is or not.
Thank you, i will have a look
lua.vm.js needs better docs :/
Another thing: A `lf` or `crlf` sequence (a carriage return, in other words) that immediately follows the opening token is ignored.
[Orbit](http://keplerproject.github.io/orbit/) is an MVC framework, which also contains an ORM implementation built on top of [LuaSQL](http://keplerproject.github.io/luasql/doc/us/). To see how to use it to create a little blog, see [this tutorial](https://luanova.org/orbit1-2/).
Is the ORM dependent on the other web related aspects of Lapis, or can it function independently?
LUAforums.com, slowly growing. All else I see is slack mailing lists, so I decided to make a stack overflow esque site dedicated specifically to LUA
Stack Overflow, Reddit and IRC - doesn't that cover all types of questions?
I honestly don't know.
The lua-l mailing list is another option http://lua-users.org/
Lua is a pretty raw language. Most of the time, if you have a question about the language itself a manual is going to cover that just fine.
it's a 'dialect' of lua - it compiles to lua script.
contrary to, sadly, most IRC channels, #lua is welcoming.
 str = "ÿÿÿÿrcon jelly status" head = "ÿÿÿÿrcon " -- Find the last character in the head _,a = str:find(head) if a then -- Cut off head str = str:sub(a) -- Capture the first two words into variables local b,c = str:match("(%S+) (%S+)") end Note that str:match(x) is shorthand for string.match(str, x)
I can't find 'find(head)' specifically but [this page](http://lua-users.org/wiki/StringLibraryTutorial) explains the find function in some detail.
Ah, never seen that.
Everyone knows the real universal data structure is the cons cell.
I've seen people alias them to "first" and "rest." I actually like the names so it doesn't bother me.
What additional details can I give that would enable you to answer the question?
There isn't ever going to be a "nice" way to do DLL injection and threadsafety guarantees.
it is unclear how one would judge the "nicety" of obtaining the lua_State. Personally I'd do the same as you do already, but ymmv really. Regarding multithreading, I remember there is some compile-time cruft in the reference implementation to enable concurrent access of lua states, but I cannot find any decent reference, which basically means nobody uses that. You will know that multithreading (as in threads not coroutines) is not where lua shines, so I'd give up. EDIT: regarding lua_State locking, see http://stackoverflow.com/a/3010999/1073006 . So basically it's a no for precompiled stuff, if you haven't noticed multithreading already then they don't have a non void implementation of lua_lock/lua_unlock.
Kinda like any logic circuit can be built with a NAND (or is it NOR? It's been a while). 
Thanks, dood!
Since basically you're asking what metables are good for, well, they're good for having "tables that are computed" and classes and such. I do think lua does have a bit of weakness as there doesn't seem to be much guidance about how to do it. In the case of "classes", i never-effectively-change them when they're not being defined, and try keep things simple, effectively just copying stuff over when deriving. I do have a fairly elaborate `Class.new` that is added automatically-when-doesnt-exist though. Mixing "as class" and "as computed-table", is a bad idea too i expect. Computed tables could look up in the file system, as /u/armornick suggest, environment variables, in sql tables.. whatever, really. Though that in some cases loses information on what is really happening.
Check out this tutorial, it should give you an idea. http://nova-fusion.com/2011/06/30/lua-metatables-tutorial/ It took me a while for it to click and I think it's easier if you just write some code that makes use metatables a lot. But yea, this is the one concept in Lua that you should be familiar with that gives you a lot of power.
Sorry if this is addressed in the post but I couldn't find it. Is there a way to handle name collisions when adding methods without overwriting the previous method and making it so that all methods added with the same name get called when that method is called? Like, say I want to add a *getHit(attacker)* method to my NPC, and in one mixin I'm handling damage/stat logic with a function of the same name, in another I'm handling particle effects with a function of the same name, and in another I'm handling sound. It's useful then to make it so that whenever *getHit* is called, all those different *getHit* functions that were added to the object get called. Is this possible? I imagine it has to do with changing __base somehow but I'm not sure.
I think your articles have been terrific. The only suggestion I have for this particular article is that maybe you should provide a few additional references regard upvalues, like [the relevant section of the Lua 5.2 documentation](http://www.lua.org/manual/5.2/manual.html#4.4) and the relevant chapter of "Programming in Lua" (which I don't know off the top of my head, sorry). But that's only a minor suggestion. Overall your work has been great, so thank you for writing and sharing these posts.
you should try /r/garrysmod haha
Download the best of toybox, it has a vuvuzela you can extract and pick apart.
Very very cool, really enjoying your recent posts. 
Thanks for these articles, leafo. They're really well written.
It depends what kind of weapon it's going to be. Look up Maxof2SD source files. [The Gmod section here](http://source.maxofs2d.net/index.php?dir=gmod%2F) Would be your best bet, especially with the c_arms_citizen.* files. You may be better off asking in the appropiate subreddit for the 3D manipulation program for assistance.
&gt; Lua metatables and JavaScript Prototypes are synonymous. This is not true. A Lua metatable with an `__index` metamethod which points to a table is roughly equivalent to a prototype in Javascript. An `__index` metamethod which points to a function is somewhat similar to implementing a "getter" in Javascript (via [defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)) except that a Javascript getter is bound by field name to an object (which may be a proptotype) whereas in Lua the getter must be bound to a metatable and you only have one per metatable, parameterized by field name. A Lua metatable with `__newindex` metamethod is similar to a Javascript property "setter", with the same caveats mentioned for the getter. There is no equivalent in Javascript for any of the other metamethods in Lua: add, sub, mul, div, mod, pow, unm, idiv, band, bor, bxor, bnot, shl, shr, concat, len, eq, lt, le, newindex, and call. In particular, you can't create a Javascript object that handles arbitrary indexing with known field names, you can't overload any operators in Javascript, and you can't make a "callable" object in Javascript. 
Try [swig](http://www.swig.org). There you can define a module "shape" that will be your table "shape" containing all automatically wrapped functions of your C library.
&gt; From the book Programming in Lua Chapter 29, I know how I can bind a single "object" to a Lua module, such as: &gt; &gt; rectangle = require "shapes" &gt; rect = shapes.new() Error: "attept to index a nil value (global 'shapes') Are you reading the latest version of PiL? shapes = require "shapes" rect = shapes.rectangle.new() rect:get_width() tri = shapes.triangle.new() tri:get_width() Why `rectangle.new()` and not just `rectangle()`? If you were exposing the methods themselves to `rect:get_width()` was equivalent to `rectangle.get_width(rect)` ala the `string` library then yes you'd want a `new` method in the table. But you don't have that. static const struct luaL_Reg rectangle_f [] = { {"new", new_rectangle} {NULL, NULL} } static const struct luaL_Reg rectangle_m [] = { {"get_width", rectangle_get_width} {NULL, NULL} } You have two tables, one for constructors that is your module contents. And another shape-specific table of methods. You want multiple constructors in the same module. I think, like many people new to Lua's first-class functions, you're getting caught up on the names. Stop thinking about values as something with a name. A value, whether it's a function, table, number, string, or userdata, is just its own contents. It can have any name and live in any table. So when you get in a situation like this, where you have two constructors for a rectangle or a circle, but in your prototype they have the same name, then to put them both in a single module all you have to do is give them different names. In this case, instead of `new` name your constructors `rectangle` and `triangle` and load the table with those functions as the contents of your shapes module. And if you insist on having `shapes.rectangle.new`, well that can be done too. Just remember that your module is nothing more than a table of values. 
That's almost like asking for a decompiler from a codebase into software system specification... Not likely to work without human involvement.
&gt; lua_newtable(L); &gt; luaL_newmetatable(L, "rectangle"); &gt; luaL_setfuncs(L, rectangle_m, 0); &gt; luaL_newlib(L, rectangle_f); &gt; lua_setfield(L, -2, "rectangle"); &gt; &gt; And now with local shapes = require "shapes", I can do rect = shapes.rectangle.new(), but then no rectangle object can access its methods: rect:get_width() doesn't work. I'm sure I set up the tables on the stack in the wrong order, so this is the reason I asked for help. Thanks anyways for your time! Indeed you did. Because `luaL_setfuncs` leaves the table on the stack. You end up assigning the `rectangle_f` table to the field named `rectangle` in the `rectangle_m` table, and presumably returning that table instead of the first table you created. On top of that you're not actually creating a metatable, just the methods. The metatable needs an `__index` field that points to the methods. You can just create the field in the method table and make it point to itself. luaL_newmetatable(L, "rectangle"); luaL_setfuncs(L, rectangle_m, 0); lua_push(L, -1); lua_setfield(L, -2, "__index"); lua_pop(L, 1); /* Remove the metatable from the stack */ 
Well, Reddit messed with the formatting and I can't be bothered nor do I have the knowledge to fix it, sorry!
Ah, yes, that would have been better xD
Btw i have a pretty good knowledge of gmod printers and doing lua for it. I have no idea why you have so much code. What exactly do you want them to do?
Oh yea that is a pain in the ass.
Flow charts.. I don't know. It is certainly -in-principle- possible to make graphs. (as in vertices and edges) More of a 'photo' than a 'diagram' though! I did do it for common lisp and ethereum contracts at one point.(with [graphviz](http://www.graphviz.org/)) In lua, two approaches to get at data, looking at the source code,(basically you want the AST-tree, dunno how) or -probably more relevant here- evaluating. [This](https://github.com/o-jasper/o-jasper-luakit-stuff/tree/master/alt_require) redefines require when loading a file, and is able to record stuff. Havent tested it much, you might encounter a bug, or problems i havent noticed yet unleashing on real libs. (I'll probably apply it to my own code eventuallly) I have nothing to help you actually draw the graph. Aforementioned graphviz is likely a good option. (edit: [see this](http://luagraph.luaforge.net/), dont see a github linked from there, just [this](https://github.com/LuaDist/luagraph), but i think they just mirrored it) Edit: wrote that thing to get at the information, and for potential mandatory access control. [i.e. this thread](https://www.reddit.com/r/lua/comments/36zijo/access_control/)
I'll do it now Edit: DONE!
Is this for gmod 13? 1. Item 2. Item
Yeah, from all of the printers files and then the file that makes the game recognise the printers, and it's for whatever is the latest gmod.
Like a default one? Yeah it spawns and works all fine. If you mean like a custom gun or something I haven't tried adding any
No I mean the one you are creating. If you remove almost everything and only leave the stuff like name etc. Does it spawn then?
I don't know, I'll give it a try when I'm next on.
Go for it :)
Ok!
Well, as the error message indicates, you haven't initialized 'tmr' variable. Also take a look at 'ow' variable which doesn't seem to be initialized either.
It's cool that you enjoyed it :)
Making that change gives me a similar error: &lt;[string "--unfinished..."]:15: attempt to index field '?' (a nil value)&gt; What the field '?' is, I have no clue.
That '?' means that the field you were trying to access came from a variable name, in this case `target`. Your initial creation of the `pickStats[target]` doesn't work. It's been a while since I've last used Lua, but after some digging I found that `type` returns a string. So your if-condition is always false (you are basically doing this: `"nil" == nil`). Remove the `type`, like this: if pickStats[target] == nil then ...
That worked perfectly! Thank you very much.
The "free" space on any medium is relative to file system used on it. You need use the right commands to get this information. It's a problem easy to resolve on OS level, if you OS is Unix-like... :P
Thanks for the reply! I'm using a FlashAir card and trying to get around the fact that deleting files is a bitch and has to be done 1 by 1. The card can execute a LUA script on any write event. My thought would be to find free/used space on the disk and then delete older images if there isn't enough free space or too much used space. The card will be sitting in a Olympus card reader (microscope feeds images to the reader)...so I don't think there's an OS associated with it...though it's most likely unix based. Any ideas on execution?
Plain Lua does not know what "disk space" or "file attribute" is. You must either write C extensions for this or you can call existing OS commands from Lua and parse their output. On *nix machines this is very straightforward, for example you can do this in Lua: local fd = io.popen("df -h") local txt = fd:read("*a") fd:close() And then you parse what you got in "txt"...
I have a hard background with SD cards, in fact, I finished a project about a mechanism of data allocation in this type of cards. But, I don't know about the card you comment. I need read about this, right now I don't have nothing to say. I'm sorry. 
Could you use if statements? local value if button == 0 then value = 1 elseif button == 1 then value = 2 elseif button == 2 then value = 4 end
 local mytable = {} -- alternates mytable[1] = 0 -- table.insert(mytable, 1, 0) mytable[2] = 1 -- table.insert(mytable, 2, 1) mytable[3] = 2 -- table.insert(mytable, 3, 2) for k, v in ipairs(mytable) do local val = v if k == 3 then -- if v == 2 then val = 4 end end Is this what you're looking for?
Use a table to store the states for each button and simply increment an index/pointer to use to access that table using the array syntax, and once it reaches the limit simply reset it to 1 (arrays in Lua start with an index of 1). Other than that I'm not too clear on what you want but I can only suggest ideas on where to start with what you want. Example: index = index + 1 if (index == max) then index = 1; end; return button[index];
Its Lua btw. It means Moon in Portuguese so no need to write it in allcaps :)
To answer your specific question - you CAN transform "0, 1, 2" into "1, 2, 4" without using IF statement, using this simple formula: &gt; f = function(x) return (x &lt;= 1) and (x + 1) or 4 end &gt; =f(0) 1 &gt; =f(1) 2 &gt; =f(2) 4 
0,1,2 to 1,2,4 should be as simple as this: function foo(num) return 2^tonumber(num) end I'm surprised no one saw the pattern...
What is the problem exactly? The code looks fine at first glance. 
:)
Fun post. I would also explore how metatables for non-table types are shared across all values of that type, rather than being set individually for each value. This is an important difference between tables and non-table values.
Absolutely. In fact well sandboxed code would have the debug table very nerfed. So it's really only a matter when guest code is duck-typing and the host application wants to play games with the types. I'm not sure that this ever happens in the wild.
That's awesome. Nice job!
Can't seem to figure how to turn some bits, like the search terms-to-sql-command into proper libraries.. It is not clean enough.
&gt; I really want to do something similar for LuaJIT what the Hylang guys have done for Python sometime. Didn't know about that project. That's pretty cool. Clojure is getting kinda popular and already runs on both the JVM and CLR (EDIT: and JS!), so I'd consider that dialect if I wanted to seriously run a Lisp on LuaJIT.
Hi! You need upload your "unit test" for avoid our modifications inside your code and break the error logic. Cheers.
First of all, on which line are you getting the error? We cannot debug this code because it's incomplete. It references undefined things like "rageCost[]", "rageBar.echo" or "wsys.stats.". Also, you are assigning to "rageColor[]" which is undefined. This isolated script does not run at all so we cannot analyze / debug it. The only potentially problematic place I see is calling rageBar:echo(). Are you sure you don't redefine rageBar.echo to string value somewhere else? However, if your script raises "attempt to call string value" error then it's highly improbable it "does exactly what it was meant to", unless you catch errors (which you don't in this piece of code). Other notes: 1) The line "if rageBal[k] then" will always be true. Also note that "rageBall[k]" is the same thing as simply writing "v" in your script. 2) Why are you even defining the rageBal global at the beginning if you don't use it for anything? Note that the rageBal[] you define later does NOT replace the original rageBal[] because it's local.
&gt; Note that the rageBal[] you define later does NOT replace the original rageBal[] because it's local. That was the problem! I don't know why I named it the same as an already established table. They were supposed to be two separate things. Thank you very much! I changed it to a different name and the errors went away.
That's more scary than comforting. I have no idea what kind of weird things happen in your code... :)
If it makes you feel better, the script is running inside of a program (basically a telnet client) aside other scripts. rageBar:echo() takes a string and displays it in a gui element that I've established elsewhere. The table rageBal[] needs to be explicitly put there so it'll set those boolean values when the program starts, then other scripts toggle their values later. It's hard to give all of the functions that change those things because they are established in a bunch of other places in the program.
Something like this might work: local i = 0 repeat i = i + 1 if i &gt;= 10 then usleep(1000) i = 0 end --the rest of the repeat-until loop
I found the solution, I used the following structure and it worked: local i = 1 repeat i = i + 1 [code block] until (i == 10) Thank you.
The for loop version of this code is for i=2,10 do [code block] end As you can see, it only does 9 iterations. If you want to do 10 iterations you should use `for i=1,10`. By the way, almost every simgle time you should use `while` loops instead of `repeat-until` loops because while lops are better at dealing with the case where you have 0 iterations. local i = 1 while i &lt;= 10 do [code block] i = i + 1 end
okay i will check this, thanks
I advise newcomers to Lua to use 30log to get the `class` function and pretend it's a statement. It's a wonderful addition to the language.
`a:b(...)` → `a.b(a, ...)`, and constructing something to fill `__index` of the metatable, doesnt seem *that* roundabout to me.
i allready did a tutorial and created my first game... the flow thats löve brings with it, is awesome. i really like it. i found different libraries that will maybe help. but now some questionts (again): the game works in tiles.. so that you can put a card on a specific tile (maybe you guys now the game and can give me advices?)(and sorry for my bad english...) and set rules to them... is there a good tutorial to make tiles-based maps? i found a tile library ("Advanced Tiled Loader"), is this good for it? and then i have to set rules for ~180 different cards = classes right? the menu and start of the game is finished, same to loading a new game via keypressed. what should be my next steps?!
Lua tables are references. When you use table.insert(psorted, nextEntry), you're putting a reference to nextEntry in psorted, so each element in psorted is essentially the same. Move line 85 to between 88 and 89 (i.e. set a new table each iteration).
Thank you very much. I didn't realize that it wouldn't return the values, so there was no way I was going to catch that on my own.
Me (a little bit) and a coworker (who did like 90% of the real work) helped implement PS3 and X360 support. We had a lot of contract with him, but I never met him in person. He's absolutely brilliant IMO.
I have met him once or twice, but it was completely unrelated to his Lua work.
I suppose it's a good example program. Little practical use, though.
I originally intended it to be a kill switch for folders with 'sensitive' content. But yeah it is pretty useless because you could just delete the whole directory yourself haha.
Another note is that the title is slightly misleading. It doesn't wipe one directory, it wipes EVERYTHING in and under the directory the main.lua file is located in.
it's the line break between lines 33 and 34. Don't have one. Also, reconsider building a json object as a concatenated string; serialize a table instead. Multiline strings can be done with square brackets, if you, must. http://lua-users.org/wiki/StringsTutorial
Let me know if you find anything. You could try using OpenShift - but the deploy process always breaks there for me...
1) Multiple sources told me that the keyboard is using LUA, and that this language is what I should be using, and that it is called LUA. 2) I want to call PressAndReleaseKey ("e") once for every four digits, so it should look like, "e0001, e0002", 3) Can you show me how to set up PressAndRelease with string values? Thanks.
1) You misunderstood me. I meant that the code you link to at IDEOne cannot be "your current code", because your code "gives you eee1,e2e3e4e5" (as you wrote yourself) whereas the code you posted to IDEone cannot give you this because IT CANNOT RUN AT ALL. That is not a valid Lua code, and there is an error you can see yourself at the bottom of your page: "prog.lua:42: 'then' expected near '='". So, this code does not run at all and cannot produce anything. It looks like three different code chunks that make no sense together. Please provide the actual code you are using (that runs), then we can tell you what's wrong with it. Also, it's "Lua", not "LUA". 2) Here is the code that calls PressAndRelease with the 10000 combinations you requested, from 0000 to 9999, prefixed with "e", character by character, when "(event == "G_PRESSED" and arg == 5)" is true, doing Sleep(1) after each of them (including the last digit): https://gist.github.com/fuxoft/323ba0125c320b08eb10
Sorry, I tried to run your code, and it just presses the "e" key for me. No numbers. I get an error code that says, "string ["CLuaScriptReader"]:6: attempt to call global 'gmatch' (a nil value)
Sorry, I wrote that code from my mobile. Try the updated version now.
Thank you so much! It works finally!
The problem is, we can only debug this if we can run it. In what environment do you run your script exactly? Can I run it in Linux?
Honestly no. rtmp is so mature module to nginx. video-streaming is a small library that generate a video using motionjpg tecnique, no more than it nowadays.
Ah, unfortunately, I cannot run that. It's not available for Linux. If your problem is that you want to write: table.1 and it produces error, that's because it's illegal. You have to use: table["1"] But if you don't know this then you couldn't even possibly run the script that I wrote so we clearly have some miscommunication here...
Thank you very much! I'll try to read more about stdin and stdout, and their use. 
I understand "King of Thieves" to be some sort of mobile game but I didn't find anything Lua related.
Autotouch is an iOS app which uses Lua to let you interface with the phone.
I downloaded this game to see what you are talking about. For now, I can say that you can download a FastForward app from this repo: http://harrisonapps.com/repo ,pick your game in the app list and set the speed to 50 in settings, and ads will be played in 1-2 seconds. Your best bet with the script is to play with getColor, findColorsTap functions, since this way your script will not depend heavily on manual taps.
How do u use getColor, is it within script cuz like I said I can't write script.
It`s a built-in function in AutoTouch app: http://autotouch.me/?page_id=5#getColor If you open Autotouch and choose "New script" there will be a helper menu with all functions. When you choose getColor helper, it opens your Camera Roll folder, where you can choose a screenshot from your game. Check this thread for an example of using getColor function and other relevant info: [Lua script for Autotouch iOS app](https://www.reddit.com/r/lua/comments/38kvd9/lua_script_for_autotouch_ios_app/) 
Basically I need someone like u to write most of the color find stuff, and I'll have a lot of trouble with the actual manual tapping stuff also bc I don't understand all the code for basic taps and slides. Sorry I'm such a bother but I've wasted so many hours trying to make bots for this game and trying to learn lua 
It's kinda complex but I'm assuming u know the steps to attacking. The bot will find a match with wooden locks, go thru the process of unlocking all the locks and watching an ad at every lock in case that's the point I run out of keys, once it is positive that It has cleared all possible locks, it taps the screen to start the battle and immediately leaves the battle, then goes out for a second to collect gold, in which It loops and starts over from the home screen. This may seem like I don't gain profit considering there is no way the bot would actually beat any bases, but the idea is that because you can get orbs and potions from opening locks, this bot can earn me lots of orbs and potions overnight. I hope this covers enough of the basics. Tips: the 'x' to get out of ads is sometimes a little lower the the left top corner, and sometimes in the top right corner Sometimes when you click a lock and ur out of keys, it won't show the watch an ad button, only the spend orbs for full key button, so I have the bot click on each keyhole and exit the out of keys pop up 3 times to make sure that the bot will be clicking the watch ad button. This randomness of sometimes not showing a watch ads button may be KOTs attempt to prevent bots, and this might be a problem if for some reason it still dates to display watch ads, but after three times of going in and out, it's never not displayed this option. Thanks again I know this is a lot, but if you can make this bot, I'll pay u thru gift cards. Thanks so much! PS is find color a cydia tweak or something because I have no idea how running a script with Findcolor in it can tell me the color id as autotouch scripts don't relay back info. Could u do it with the photo I provided in the previous post? 
Thanks for explanation, having been playing this game for quite a while now, I'm starting to understand what you mean. findColor is an option inside Autotouch itself when you make a script you can choose it from menu. What device do you have, since each script is usually made for one device due to difference in resolutions. 
I'll see what can be done, but I need to know on what apple device you are going to use this script. I have only iphone 6 now to play with. 
No, there isn't and cannot be. The first argument of pcall must be a function. The expression "testFunc1(10)" (which is the first and only argument of "pcall(testFunc1(10))") is not a function but number 10. Of course, you could write a special function mypcallTestFunc1() that could be called as mypcallTestFunc(10) and in fact execute another function wrapped in pcall(), but that's not exactly what you asked for (You'd have to write specific wrapper for each function.) Also, I don't understand your note about "standard argument syntax". Both of those examples are standard argument syntax but each of them does something completely different. pcall(testFunc1, 10) -- pcall is called with two arguments: Function and number 10. pcall(testFunc1(10)) -- pcall is called with one argument, which is the result of calling testFunc1(10), i.e. this is nonsense
You could use an anonymous function pcall(function () return testFunc1(10) end)
Not without editing the Lua source code and doing something positively evil to the language. This 'pcall(testFunc1(10))` "errors" because `testFunc1` is called first and it's return value is based to pcall, which expects to be passed a function.
Agreed. This is just a general Lua endpoint.
Numbers aren't added by reference; adding the number 1 to a table 100000 times results in 100000 numbers in memory. It doesn't matter if the numbers are the same or different, so s and t are essentially doing the same thing. Setting u = t, on the other hand, doesn't make a copy of t but simply makes u point to the same instance. So: u[1] = 20 ... means that t[1] is also now 20. They are both referencing the same table; there are not suddenly two copies of it. 
Hm. Well in your example, t[1].left = t[2].center should be more efficient, because you're referencing an existing table. t[1].left = {0,1,1} creates a new table. 
if you are doing gamedev you are probably using luajit. if(and only if!) memory becomes an issue you could use c-structs with the luajit ffi to decrease your memory usage. [The docs already have an example that might help you(see 'Motivating Example: Using C Data Structure')](http://luajit.org/ext_ffi.html)
I'm scripting for [Just Cause 2 Multiplayer](http://wiki.jc-mp.com/Main_Page). I'm not sure whether I can access anything lower-level than what's given with the API.
You can use [love.mousepressed](https://love2d.org/wiki/love.mousepressed) to be notified when the mouse is clicked (there are other ways, too, such as polling the even queue, but this is simplest for beginners). Then just divide the mouse position by the tile width (rounding up) to determine which cell it landed on. Let's say your tiles are 64x64 pixels. If the mouse click is at 4,85 (x,y) then that's: x = math.ceil(4/64) --&gt; 1 y = math.ceil(85/64) --&gt; 2 Row 2, cell 1. &gt; And how i could create a working dice? See math.random.
oh damn sorry, didn't know that reddit also got a love part :( 
Nice article! 
http://www.lua.org/pil/contents.html
The Source engine itself has no publicly available Lua scripting features. Are you looking to develop for Garry's Mod?
nice, now it is easy to adopt active objects in lua :)
No not neccesarily, im looking to script towards a variety of games that runs on source, primarily on dota 2 due to the new workshop tools and its scripting capabilities, and csgo and gmod if possible.
Due to the fact that much of valves games are built off of lua and c++ And c++ is no mans land for begginers like me
Well, currently dota is built off of c++ with lua extensions for coding, im pretty sure youre speaking about games such as csgo, portal, tf2 etc, Currently the source engine 2 also has many lua extensions as you may already know
You might be interested in this page to see which title use which language (non exhaustive): https://developer.valvesoftware.com/wiki/VScript
I did a bit of digging and found out the tutorial is outdated. It's even easier now XD
Yup. First off, in loop_data(), you are referencing a global table called 'table', which is a standard Lua module (itself a table) of functions. You probably want to pass in a table to use. Second, you iterate through the table and call the passed in function, but you do not pass that function any data. In your example in using loop_data(), you are trying to use a variable that doesn't exist in any scope (i is local to loop_data(), but the passed in function can't see it because Lua uses lexical scoping, not dynamic scoping). You might want to try something like: function loop_data(f,t) for i = 1 #t do f(t[i]) end end loop_data(function(item) print(item) end,{ 1 , 2 , 3 , 4 , 5 }) 
Sorry! That was just an example of the problem I had. But, thanks for the help!
Unfortunately your problem has very little to do with Lua itself. You'd be better off finding a subreddit or forum that deals with the Nspire specifically.
If you pass the predicate function first, then it's easier to curry/partial-apply the function, and easier to compose the results. 
True. It does have that. I generally take the approach of readability, in most cases, especially if the args could be as small as a single character and get overlooked. Allowing null values in the cases where the predicate is given last does become a larger eyesore - so I recant my followup to /u/spc476.
Paying for a few full time developers is not really an issue as CloudFlare have already said they are will to pay for full time developers. The problem is finding these developers with such specialist knowledge who do not already have full time employment. I realise that having a bus factor of one was an issue but a democracy always needs someone at the head. Someone who sees the big picture and keeps tight reins on all the issues. I just do not see the community being able to do this. LLVM was held up as an example, yet even this has a chief architect.
I personally can go either way with this sentiment. I'd wager only a few people are even capable of maintaining and progressing LuaJIT let alone forking it. With everyone and their mother thinking they can contribute—with no one person to guide the language—LuaJIT might fall victim to pointless bike-shedding. Also, compared to the official Lua distribution, LuaJIT has veered away from it and with features such as the foreign function interface, has become a language in its own right. On the other hand, maybe CloudFlare already has someone in mind who can guide LuaJIT into the future. At the same time, LuaJIT development has slowed but that also suggests it's just become mature. One strength I feel a community has over a single dictator is maintenance. Also, there's a lot of groups that do make a living using LuaJIT so I can't imagine they want to completely ruin the language.
The amount of garbage-collected memory you can use with LuaJIT varies between 1 GB and 4 GB depending on the platform. If you need more memory, allocate it with the FFI.
What is "garbage-collected" memory?
if I do this: `local m = ffi.new("char[?]", 4*1024^3)` would the memory allocated count into the 1 GB - 4 GB depending on the platform? 
Lua Patterns efficiency is sublime, but for convenient rewrite rules, they may end up wanting to patch it somehow so it is possible to match (this|that|other)
lpeg is hairy ball of code beast, it would defy the point
The lua API is designed such that you don't have access to any kind of structures that are visible inside the lua vm. This means that C/C++ code can never have ownership over any kind of lua object. Instead, the lua VM state always has full control over all objects. This means the lua vm can simply garbage-collect lua objects whenever it feels like it, as it does not need to be afraid that native C/C++ code still holds a reference to said object. Hence you (in general) never need to worry about freeing any kind of lua objects you create through the API. Specifically in this case, whether the lua VM will ever garbage-collect a *code* object, I don't know. It might not be possible (it's not possible in some other languages I've worked with)
It isn't a leak as you are holding a reference to the chunk on the stack still. You can pop the chunk from the stack to remove the reference.
Cool :) will try to remember to look at this ^^
I see no call to findColor. From what I can tell, try replacing getColor with findColor in line 2? As a side note, in Lua it is not necessary to end each statement with a semi-colon (``;``) like it is in C. It takes a little bit to get used to but in my opinion it make the code more readable to omit the semi-colon.
Quite stumped how it can be "this is the beginning of the end for the language" considering the large number of games and devices lua goes into. Or that it is a fairly simple language. Probably fairly easy to port to common lisp, gets you two JITs; SBCL and JVM via closure. (though a bit roundabout way) And i dont dig that luajit is a "new language" it is easy enough to make luajit work on lua and vice-versa. The FFI being specific to it is a PITA, but kindah doubt that it cannot be done as library. (dont depend on `type(luajit_ffi_object)`)
Are you asking for a command line REPL that has those features? Because rep.lua does.
Depends on the use and the platform. Some are require native binding, other are pure lua... Unfortunately you will bump into that with almost any Lua library.
I never had to do Crypto stuff with Lua so I can't give advice from experience. However, I can second the suggestion for NaCl. It is a very well designed library if you want to add some crypto stuff to your application. The API offers some high-level crypto operations directly instead of providing low-level cyphers directly so its much harder to mess things up. If you can't find appropriate bindings for Nacl, look for lindings to libsodium, which is a fork of NaCl that is more focused on portability (it replaces the hand-optimized assembly language with portable C code and so on)
Do it and then check with collectgarbage("count")
I just started looking at dota workshop tools and am very interested in lua scripting as well. Hoping some good resources pop up here.
&gt; In general I think the advice recommending libsodium is good, but there are no full-fledged bindings I know of. This one is made by a well-known member of the Lua community but is apparently not production-ready (and not pushed to LuaRocks) so I would advise against it: https://github.com/daurnimator/luasodium Indeed, I wouldn't class it as production ready; thought it's still usable for toy projects. I've lately decided against making ffi based libraries: I have no desire to tie myself to luajit (I don't use it any more). luasodium is quite far down my TODO list, so it might not get some love for a while. There's another set of equally unmaintained libsodium bindings over at https://github.com/morfoh/lua-sodium
&gt; If you can't find appropriate bindings for Nacl, look for lindings to libsodium, which is a fork of NaCl that is more focused on portability (it replaces the hand-optimized assembly language with portable C code and so on) [libsodium](https://github.com/jedisct1/libsodium/) still has the hand optimized assembly (and it even adds more for other platforms). There's no reason to use raw NaCl instead of sodium. In regards to lua bindings, there are two mostly unmaintained libsodium bindings: - https://github.com/daurnimator/luasodium (mine) - https://github.com/morfoh/lua-sodium
What sort of crypto things do you need to do? If you need x509 things, or well known hashes, HMACs, or ciphers I recommend luaossl: http://25thandclement.com/~william/projects/luaossl.html
You should denote (next-time) that this is a x-post. Generally speaking, people will upvote the main one to get it traction. That being said, AWESOME!
Crosspost from [r/golang](https://www.reddit.com/r/golang/comments/3imvtx/golua_an_implementation_of_lua_written_in_go/)
There is much more behind development practices in general that get covered elsewhere. Some would argue that it you would be doing a disservice if you threw a newbie right into programming without the understanding of the low level computing principles. I just think that Lua is a developers language - meaning in most cases you use Lua (aside from cases like GMod, WoW, and Love2D) you have a host you have written in something else. JavaScript is a simpler introduction (not exactly better). If they haven't developed before, setting up a dev environment, running scripts from the CLI, and such is a new thing. If you teach the basics of development through JS, they already have an environment - the console window in Chrome or Firefox. Once they get their feet wet there, then brink in Lua. You could even bring in Lua much later - if they learn JS prototypes, then meta tables won't seem like such a mind-fuck. Finally, you can quickly get stuff on screen and interactive in JS, terminals can be scary to non-dev/techies. TL;DR - no, there isn't a programming 101 using Lua - that I have found. Use JavaScript to kick them off, much less setup and scare factor.
[codebymath](http://www.codebymath.com) will take you through many basic steps that you can play with and develop some understanding. [zerobrane studio](http://studio.zerobrane.com/) has built in docs, tutorials and features like launching different Lua environments to help you be the best Lua programmer you can be. 
codebymath looks ideal - extra bonus is that people don't need to setup a lua env, they can just dive straight in via the website I guess the demo page on lua.org is another useful resource for tinkering around (although it won't teach people much): http://www.lua.org/demo.html I've not tried zerobrane yet so can't recommend it to anyone until I've tried it.
...for a beginner who already knows how to code, yes. When answering questions on forums my first reaction is to post links to PIL but then I read what's there and decide not to because I know it will just add to the confusion of the person I'm trying to help.
What about this one? http://www.tutorialspoint.com/lua/
&gt; Example of **beginner guides** that assume the reader is already a coder: Yet you said this :)
Thanks for the feedback. While I agree completely on your points, I do want to ensure you that I wasn't trying to say JS is superior, easier, or simpler in any manner. I was just trying to use it as an easier start point - in terms of not installing anything, having a LARGE community, having an easy-to-access REPL, and various hosts (web, node/v8, etc). I will also say that as I write JS professionally, I dislike the language and the inconsistencies in hosts and actually hate that I suggested the language as a starting point. It is one giant cluster of tiny base + way too many "addons" at the language grew. When I was suggesting it, I went for quickest start - not meaning you would learn ALL in the REPL. What I didn't think about was the project setup for the more in-depth examples (Node.js or index.html - thus adding more confusion) and instead thought about how generally speaking, building a web page/app is an achievement for the beginner vs a terminal script. Also, just now thinking about resource loading and local servers &gt;_&lt; NONONONONONONOOOOO. Lua is the way to go - simple install for basic interaction, great language, great starter libraries/engines/endpoints (LOVE, Lapis, WoW, GMod, etc). I would love to see a beginner book, and would gladly contribute to it. **EDIT** I truly thank you for the feedback - it is very well thought through. I at first was upset, since the tonality seemed rather blunt, which came off rude to me. If you meant it that way, you did great! If not, thank you for being passionate about teaching and using a great language :D
Okay. So here's what I got so far. Sorry if syntax is a little weird for WatchMaker, but this is what should be working. I'm thinking I need to go to the WatchMaker subreddit from here. function on_second() if {dh23} &lt;= tonumber(string.sub("{wsr}",1,2)) or {dh23} &gt;= tonumber(string.sub("{wss}",1,2)) then var_s_test = 'FFB378' else var_s_test = 'FFFFFF' end end {dh23} = 00-23 hour timeframe {wsr} = Sunrise given in "HH:MM" format {wss} = Sunset given in "HH:MM" format The formula comes up true when it is outside of the sun being risen, so it works, but it doesn't update on the watchface. But this helped a ton and I got what I needed. Thanks for the tip!
I spent a small amount of time messing around with it last night. It ran well, started up almost instantly, and I didn't run into any slow down when doing things like searching through large files or using things like Ctrl+P to open up a file in a large "project". I didn't spend any time customizing it, so I can't speak to its quality in that respect, but I liked what I saw from the documentation with regards to customizing the editor. Like you, I'm not looking to change my editor either. But Howl left me with a very positive first impression.
Awesome. (at work, sorry for silly questions) How does it work? Is it always on editing or does it have command mode like Vim? Or is that able to be "added" via customization? I know you didn't spend long, but If I can have a vim-like experience that is easier to mod/customize, I may consider it more.
It's always on editing. You enter into a command mode by pressing Alt+x, which brings up a small prompt at the bottom where you can enter commands (which has very nice and fast tab completion, and will also show you what key each command is bound to, if any). There is a built-in layer of Vi emulation but I'm an Emacs user so I didn't bother testing out how well Howl emulates the editor of the Devil.
What rate does this sort of thing bit-rot at anyway? Basically an ffi implementation of FFI would solve any issues, i basically wouldnt depend on luajit at all. Might be a lot slower though. (perhaps going via those lisps can bring back the speed.) Seems like a problem with [his comment](http://www.freelists.org/post/luajit/alleviate-the-load-of-the-GC) is that metatables are used in varied ways.. It begs the question about how people are supposed to use metatables.. Also, how important is what they're saying there? Just silly bastards, or dipshits (potentially)in charge?
&gt; Always seems that Vi(m) and Emacs users HATE the other editor... Heh, yeah. All joking aside though, I use a number of packages in Emacs that implement and emulate functionality from Vim, like `ci` and `co`. And Emacs packages like Evil which try to go a long way towards mimicing Vim are becoming more and more popular. Because honestly, Vim is amazing when it comes to just straight-up editing text; while Emacs is amazing (in my opinion) in terms of customizability and the wide amount of functionality. So nowadays many of us Emacs users try to have the best of both worlds.
Hi Guys, I have a similar problem, as the previous speaker and I now hang even several days on this problem. Before starting, my English is not good, so I let it translate by Google. I very much hope that everything arrives understandable and can be helpful. I would like, once a certain color (yellow) appear on my phone that is clicked. The dots of color Raining top down and spawn randomly. That's why I can not work with fixed coordinates. But according AutoTouch Help http://autotouch.me/?page_id=5#keepFindingColorTap it's possible local region = {100, 50, 200, 200}; local exit = false; keepFindingColorTap (0x0000FF, 2, Region, 1000, exit}; exit = true; to leave the region looking for a paint and when it was found, it is pressed or? Now I have tried many things. Try to find useful resources. But so far I have not really found something up on this thread. My script looks like this: CREATETIME="2015-08-27 03:10:02"; SCREEN_RESOLUTION="320x568"; local region = {3, 94, 318, 431}; local exit = false; function keepFindingColorTap(0xfff802, 0, region, 26000, exit) local f = funktion() findColorTap(0xfff802, 0, region); end keep(f, 26000, exit); end exit = true; Unfortunately, the script is not working. According AutoTouch Log: * .lua: 6: &lt;name&gt; or "..." expected near "0xfff802" Is this now because I have written down the RGB value in Hex? My other idea was: CREATETIME="2015-08-20 03:10:02"; SCREEN_RESOLUTION="320x568"; local region = {4, 97, 315, 422}; local exit = false; keepFindingColor(13204882, 0, region, f1, 1000, exit); local f1 = function(locations) for i, v in pairs(locations) do tap("x:" .. v[1] .. ", y:" .. v[2]); usleep(26000); end end Does not work either. Hope I can go and one probably even more detail to explain what I'm doing wrong. I'm quite a novice in terms LUA.
your formatting is messed up. surround your snippet in `
looks quite nice at the first sight
Hi, original author here. I actually used TextAdept for a while between Emacs and creating Howl. I haven't looked at TA for a long while so my comparisons might be somewhat outdated. Anyway, they have some technical similarities, in that both uses Lua and Scintilla, and Howl also uses some lexers from the Scintillua project (by TA's author) using a compatibility layer. Starting with the next 0.4 release Howl will move to a new custom editing engine in lieu of Scintilla however, so that similarity will soon be gone. Both are fast and light weight editors. Howl is more keyboard/text oriented than TA, which features more standard UI dialogs, menus, etc. You can make TA a little bit more like Howl using the [TextRedux](http://rgieseke.github.io/textredux/) module (which I created for TA prior to starting Howl). Howl is much more like VIM/Emacs in this regard, with a strong focus on a text based UI with a powerful prompt/command line. In my very subjective opinion Howl has a much better looking interface, and will in the future have support for more eye candy stuff such as transparency for those thus inclined I personally found TA to be to restricted in what I could do with it. At least at that time it was explicitly minimalistic, which is not a goal in and of itself for Howl. Howl should always be fast, but it should still allow for a lot of customization (in the vein of Emacs), and provide a rich and simple API for doing so. And it should pack a lot of power out of the box, without having to manually fiddle around a lot with extensions, modules, etc. Anyway, that's a little bit of a comparison, but if you have more specific questions I'll be happy to try and answer them.
&gt; Starting with the next 0.4 release Howl will move to a new custom editing engine in lieu of Scintilla however, so that similarity will soon be gone. Just out of curiosity, what's the motivation for changing over to a custom engine? My gut-reaction guess is that it will allow for better, finer-grained control and customization, but maybe I'm waaaaaay the Hell off.
Really cool stuff. This will allow us to write system scripts combining powers of both Lua + Shell.
No, your gut reaction is right on target. While Scintilla is a good, capable editing engine there are a lot of things to work around when using it in order to provide a sane API and good editing experience. Going with a custom engine affords the ability to completely define the experience, and allows the addition of new features such as transparency support, variable height lines, etc.
I was hearing great things about this. I have been so locked into my vim setup the past 10ish years because it is a pain to change... I love the way it runs, but it has taken lots of time on my part and past co-worker parts as we all built a common "base" config/plugin setup.
Awesome! This is very compelling. If I get time or the Mac build installs simply (even better if it installs quickly over homebrew ;) ) then I will attempt a jump!
Awesome. So this runs in its own window, not in terminal - am I correct? I will give it a go, but if it breaks out of the terminal tabs/tmux setup - this might be a big challenge. I will try a build out now!
Yes Howl is a GUI application built with GTK. It does not run in the terminal. For remote editing I've used sshfs with Howl, but it's not the same thing as tmux.
Cool, so initial thoughts. I will need to do a decent amount of setup to get my "vim feel" back. Although, to accomplish that won't be entirely too painful. I can't get into GUI apps, been dedicated to CLI based apps for so long that that part of my workflow will be a challenge. I will give it a go a few more times, but not sure how it will fit into my workflow. I love the moon/lua interface for customization and how you can do just about anything. The auto-complete is nice, quick! Only spent a few minutes messing with current code, since I didn't have all my vim binding (window splits, window nav, :Explore - although I found that :e did similar, and block selection). Can't wait to see where this goes, maybe the core editing capabilities could be distilled and a CLI version can be driven by it.
+1 for this. Polluting _G is never a good idea, leave it to the person using the library to decide where they want it to go. IMHO it would be worth creating a table called `shell` and then you could use __index and __newindex metamethods on that to interface to the shell commands, along with a library of wrappers for common commands (eg. so that error handling could be built in). It would certainly be delightful to write shell scripts in nice clean Lua syntax.
You should package it using luarocks
1. What is the advantage of this library compared to existing ones? 2. You should make a luarocks package for it.
I have figured out the issue. My new code: local audioVariable = audio.loadSound( "audio.wav" ) local onTouch = function(event) if event.phase == "began" then audio.play ( audioVariable, {channel = 1}) return true end end Runtime:addEventListener( "touch", onTouch )
heres the file: http://hastebin.com/ihatamanut (or [raw link](http://hastebin.com/raw/ihatamanut)) it's "fairly large" at 260K but the online JSON lint said it was flawless. I tried I think 3 different lua json parsers.
I definetely remember trying dkjson and this one: https://github.com/harningt/luajson
TL;DR: Lua is not a "batteries-included" kind of a language, but it's easy to find the batteries. Lua is intended by design to not have all the bloated facilities that are baked in to other languages whether you need them or not. What it provides instead is the mechanism for constructing those facilities should you need them. If you *must* do OOP in Lua, well, building OOP frameworks for Lua is somewhat of a cottage industry. A variety of techniques and implementations are outlined [at the Lua-Users Wiki](http://lua-users.org/wiki/ObjectOrientedProgramming), for example, and that aside, a [quick search at Github](https://github.com/search?utf8=%E2%9C%93&amp;q=Lua+Object+System) finds a few (dozen) more. It's trivial, once you know the language, to build up your own object system, but smarter to take up an object system made by others that suits your needs. Each of the various options has the usual engineering trade-offs of functionality vs. performance vs. memory footprint, but because you're not stuck with one specific language-enforced model that brings with it a myriad of features you may not use (nor even want), you get to make those trade-off decisions to your advantage instead of forcing the language designer to foresee each and every possible use case in advance and take it into account.
Moonscript adds a few features to Lua: http://moonscript.org
&gt; If you *must* do OOP in Lua So this suggests I might by thinking about this wrong. I'm not sure exactly what question I should be asking now. I guess - what would you showcase instead of this example? How would you say I should treat it instead?
Well, I'm not an OOP guy. I was once. Then I noticed that OOP, contrary to its claims, did not actually make code easier to reason about and easier to reuse. It, in fact, made both cases worse in my experience. So when it comes to asking me how I'd treat it? I'd treat it as a procedural language (which it is) with some nice functional capabilities (which it has). My code in Lua tends to look functional in flavour rather than object-oriented. That being said, there *are* some use cases for which objects are suited. When you hit those, just pick an object system from the dozens available. 30log is an OK basis for most of what people use objects for anyway. 0class is another one, slightly faster, but for that offers less hand-holding and shielding you from some of the harsher realities of the OOP worldview. Other more feature-complete (but larger and slower) ones exist if you really need what they supply. You *can* do OOP in Lua…in many different ways. Pick the one that suits you best.
I've recently been digging in to OOP in Lua and I'm sad to say I've come to the conclusion that this cake isn't fully baked. Lua seems to try to cater to both class-based and prototype-based approaches to OOP. And it fails miserably at both. The big problem is that methods and events work in completely different ways. If you go down the prototype (metatable) chain approach, methods work wonderfully; but events fail on a scale that's hard to fully comprehend. If you go down the class-based approach, events start working but methods become unwieldy to the point of being farcical. And woe betide you if you want something like '.super'. With that being said, the best looking libraries I've seen so far are: * [Lupy](https://github.com/uleelx/lupy) - easily my favourite, but only works if the debug library is available :( * [Classic](https://github.com/rxi/classic) - small and effective, but lacking in some areas though * [30log](https://github.com/Yonaba/30log) - pretty decent in terms of speed and functionality 
Generally speaking, you build up classes the way you would in Javascript (ES5), i.e. local Parent = {} Parent.__index = {} function Parent.__index.method(self, params) -- code end function Parent.init(self) self.x = 27 end local Child = {} Child.__index = setmetatable({}, Parent) function Child.__index.otherMethod(self) -- more code end function Child.init(self) Parent.init(self) self.y = 42 end function new(class, ...) local self = setmetatable({}, class) class.init(self, ...) return self end But as others have said, cottage industry, there's a million ways to do this.
That approach (and any other metatable chaining based approach) will start to break down once you start adding 'superclasses' because the meta events will cease to function as expected (only way to fix is to clone all the superclass metatable events on to the parent class - and every class in between assuming they are all used in their own right at some point). If it wasn't for that glitch, metatable chains would make inheritance trivial in Lua. a = { a = 'a', name = 'a' } a.__index = a function a.__tostring( self ) return self.name end function a:bleh() print( self, 'bleh' ) end b = { { b1 = 'b1' }, { b2 = 'b2' }, name = 'b' } function b.__index( self, key ) print( self ) local val for i = 1, #b do val = rawget( b[i], key ) if val ~= nil then return val end end return getmetatable( getmetatable( self ) )[key] -- *sigh* end c = { c = 'c', name = 'c' } c.__index = c d = { name = 'd' } d.__index = d e = {} function e.__tostring() return 'I am E' end setmetatable( b, a ) setmetatable( c, b ) setmetatable( d, c ) setmetatable( e, d ) print( "a="..tostring(a), "b="..tostring(b), "c="..tostring(c), "d="..tostring(d), "e="..tostring(e) ) print( "find = "..e.a ) e:bleh() print( d:__tostring() )
I hadn't heard of events before this, and searching for "lua events" or the "lua event system" turned up a few libraries and a tutorial for using coroutines for event handling. Do you have a reference for what you're referring to?
&gt; ...it would already if it weren't for the broken event system... I've not heard such a criticism of Lua before, so you could please elaborate on what you feel is broken? 
In my experience, you just don't really need OOP in lua. It's a very lightweight scripting language made for embedding, which means it's not really made for the big, complex things you build using languages like Swift. But if you want to build complex apps using lua, you can still easily do so - you just have to implement a solid solution for organizing all the code. For many people, this solution is OOP and that's why many languages already have OOP built in. Lua recognizes there are many different valid solutions and lets you decide which you want to use, and if you want to implement it yourself or pull in a third-party library. For teaching, I'd suggest you just leave out the OOP stuff and focus on the basics like loops, conditionals, functions and, if you want, some basic functional concepts like map/reduce/filter. I personally structure small to medium-sized applications using modules that contain functions, without any real OOP. Sometimes, if I really need state, I use simple classes - but I *never* really needed inheritance. I think composition is easier to reason about. edit: wording
&gt; but events fail on a scale that's hard to fully comprehend What? o.O &gt; woe betide you if you want something like '.super' Trivial to implement.
I'm surprised all answers so far when it comes to OOP in Lua has been focusing on metatables. You can get OOP like behaviour using closures as well: local Dog = {} function Dog.new(name) local newDog = { name = name, age = 0, woof = function() print "woof" end } return newDog end local oscar = Dog.new("Oscar") oscar.age = 9 print(oscar.name) print(oscar.age) oscar.woof() But, with that said, I agree with [what Allan_Smithee said about OOP](https://www.reddit.com/r/lua/comments/3jutaf/im_from_an_objectoriented_objectivec_swift/cusjrzq) and how much it gets in the way of what you really want to do.
&gt; I added a handler function for the missing table items in the globals table Dynamic language abuse.
Take this with some salt because this refers solely to my own experience, but the closure approach is a little nasty since you're creating a new closure every time you return an object (in your case, `woof`). If you were to implement private variables with your approach, your objects would be as large as the number of closures (methods) in your object, scaling with the number of upvalues used (private variables accessed) per closure, plus the table itself. The metatable approach is the most conservative when it comes to memory usage, especially if you come up with a scheme to share metatables between child objects. I worked on a fairly large codebase in Lua 5.1 where we used that approach, except the objects were substantially larger. It caused some headaches with memory consumption until we went to the metatable approach. This was for a game though, which had some pretty tight requirements. Most codebases don't have that kind of pressure.
I'm not really sure what that is.
I'd pick option 1 but if your languages have different menu structures, I'd just put the menu structure in the same file as the language. Depends on the different combinations of language - menu structure though. For example, if there are a few possible menu structures to choose from, you could put all the possible menu structures inside a single file (a table with all the structures) and make a global variable inside your language files to define which structure to use.
Look at using something like [Kikito's i18n](https://github.com/kikito/i18n.lua). That follows similar patterns for localization/internationalization that other libraries in ruby/js/etc follow. If you are localizing the menu, you will most likely want to localize the rest of the app/game. As far as menu layout goes, I would start with one table for the layout/text/callbacks until you are sure you need another per language. In which case you could come up with a way to load the language specific or fallback to the default.
Your gut is right, if you go with option 2 and want to make a simple change to the menu layout, you would have to update all the i18n-files.
STM32F4+WiFi(Broadcom)+Lua
&gt; Trivial to implement. After looking at around 40 OOP libraries, only a handful of which implement `super` I remain unconvinced.
Yes, that's one of the key issues with the metatable events, but there are others. I'm going to try writing a blog post to fully illustrate the range of issues, and also illustrate what OOP in Lua would be like if the events were instead treated like methods. EDIT: Blog post: https://github.com/aubergine10/blog/issues/7
No problem re. the late reply. I look forward to reading your posts!
You're assuming that people tried to implement it and couldn't, rather than choosing *not* to implement it. In prototype based inheritance, your "superclass" is your prototype. Javascript works the same way and also [lacks a super keyword](http://blog.salsify.com/engineering/super-methods-in-javascript). In Lua, prototypes aren't even baked into the language, as with Javascript. They are implemented via a more general mechanism. Part of the reason Lua is so tiny, fast, and semantically simple is that its authors take economy of concepts as a fundamental precept, choosing to make the most of a small set of carefully chosen and very generalized mechanisms. To implement a prototype in Lua you give an object a metatable which implements the "index" metamethod. This metamethod allows you resolve missing field references on an object via another object. To access your "superclass" you can simply grab your metatable. Here's a minimal class implementation that supports constructors, mixins, and `super`: local Object -- base of the class heirarchy (forward reference) function class(super) super = super or Object local prototype = setmetatable({}, super) prototype.super = super prototype.__index = prototype return prototype end Object = class() function Object:constructor(t) if type(t) == 'table' then self:include(t) end end function Object:new(...) local instance = setmetatable({}, self) instance:constructor(...) return instance end function Object:include(t) for k,v in pairs(t) do self[k] = v end end Not the most feature rich system, but I just made it off the top of my head. Here's how you'd use it: -- create Mammal class Mammal = class() function Mammal:speak() print('Yo.') end -- create Dog subclass Dog = class(Mammal) function Dog:speak() self.super:speak() print('Woof!') end -- use our classes local fred = Mammal:new() local spot = Dog:new() fred:speak() spot:speak() EDIT: This would actually be kinda ugly, syntactically, if you need the superclass method to access state (`self.super.speak(self)`) but it works.
Closures rag the garbage collector, especially if you're instantiating and destroying large numbers of instances.
If I'm not mistaken it starts to break down once the class structure is a few levels deep? Specifically, the _index() event handler receives 'self' as being 'the table that triggered the index event' rather than 'the instance table'.
Lua does not consider `__tostring()` to be a metamethod in the same vein as it does for `__index()`, `__add()`, et cetera. I think there is merit in a criticism of that inconsistency, but at the same time [the documentation seems to make it clear to me](http://www.lua.org/manual/5.3/manual.html#2.4) that `__tostring()` is not considered part of the same "family" as `__newindex()` and friends. &gt; It's why the smallest OOP libraries are still 50 lines long, and most are well over 100 lines long. Why are lines-of-code a problem here? For example, I am a big fan of [Middleclass](https://github.com/kikito/middleclass/blob/master/middleclass.lua), and while it has its pros and cons, I am not sure why lines-of-code would be considered one of its downsides. &gt; The fact that there are so many OOP libraries available for Lua is not a good thing... I disagree, but I will admit that's based on personal preference. I do think there is value in a language having a single approach for OOP. However, I also think there is value in a language that has the simplicity yet flexibility to support a variety of approaches to OOP, and for Lua in particular I like that since there is no One True Correct Way for OOP in my opinion.
Yes, using `self.super` would break. My bad. You'd have to reference the class rather than the instance to call superclass methods: A = class() function A:constructor(greeting) self.greeting = greeting end function A:report() printf('A says, "%s"', self.greeting) end B = class(A) function B:report() B.super.report(self) printf('B says, "%s"', self.greeting) end C = class(B) function C:report() C.super.report(self) printf('C says, "%s"', self.greeting) end local c = C:new("Hello, World!") c:report() Of course, you could also just get rid of `super` in the class code and just reference your superclass directly: A = class() function A:constructor(greeting) self.greeting = greeting end function A:report() printf('A says, "%s"', self.greeting) end B = class(A) function B:report() A.report(self) printf('B says, "%s"', self.greeting) end C = class(B) function C:report() B.report(self) printf('C says, "%s"', self.greeting) end 
Yup, like I said, woe betide anyone who wants to use 'super'. That being said, I agree with you that it's better to just reference the class/superclass directly - it makes the code more readable (no guesswork as to what 'super' is referring to).
That may be the case, but all the other metamethods (except `__index` and `__newindex` which are even more bizarre in their operation) suffer the same issues as `__tostring` in that Lua won't search the whole metatable hierarchy for them (thus they also need cloning to the metatable closest to the instance table just like `__tostring` does). I'm not so much fussed about lines of code as I am concise code. Middleclass would be able to do pretty much everything it needs to in a fraction of the code bloat if it weren't for the weird way events work. I'm not so much pushing for a single approach to OOP (although if I was a simple metatable hierarchy would be that approach). I'm just pointing out that due to the way events (and 'event-like' things such as `__tostring`) currently work it's quite a crufty task to implement any form of OOP in Lua beyond a single level of hierarchy.
Fair point. Still, it's damned annoying the way they currently work :)
Yup, that can be pretty nasty. More commonly, however, I run in to the issue that 'self' (or whatever one names the first argument when using functional `__index()`) points to the table that triggered the event rather than the 'instance' table. In theory that could actually be really useful in some scenarios, but in practice it's a huge hindrance when it comes to OOP &amp; inheritance (which are the only contexts I've encountered where such things matter).
&gt; You didn't fix the problem, you bypassed it with a completely different approach WTF are you talking about? I didn't change the class implementation at all. I tweaked hastily written *example code*. How do you get from *no change at all* to "completely different approach"? o.O &gt; makes a mess of that approach. While the mess can be overcome - with lots of unwanted code Again, what the fuck are you talking about? Where's the mess? Where is "lots of unwanted code"? &gt; For example, just flicking __index to point at a different table would allow states to be implemented (a bit like middleclass with the stateful mixin) You *can* do that in Lua. Try swapping out the vtable on a C++ class instance. &gt; while there are alternate ways to implement such features, inheritance and OOP can offer a much cleaner design that's easier to maintain Without "such features" being specified, that's a meaningless statement. I'm an architect on a large object oriented system, I know OOP, but there are numerous problems for which OOP does *not* produce the cleanest design, and certainly not the most maintainable. OOP systems can crumble under their weight almost as easily as procedural ones, primarily because mutable state is [the primary source of complexity in computer programs](http://shaffner.us/cs/papers/tarpit.pdf). 
You need to provide a "sink" if you're using `http.request` with a table argument. From the luasocket docs on [`http.request`](http://w3.impa.br/~diego/software/luasocket/http.html#request) (emphasis mine): &gt; If the first argument is instead a table, the most important fields are the url and the simple LTN12 sink that will receive the downloaded content. ... If sink is nil, the function *discards* the downloaded data.
It seems great, man! Congrats!
&gt; Then a table of MenuPosition -&gt; StringID Why would you store menu position as a *number*? The menu position can be represented physically in the configuration file / source code for the menu. What you see is what you get: if the menu item Copy appears above Paste in the config file, then that's where it is in the menu. 
This is AWESOME. I really like Textadept, but the dev is a real piece of shit imo and this seems better and more flexible. This gives me those good vibes without the "pay me money for documentation" vibes.
Yeah, since I first posted this link I have spent some more time using Howl. I'm still not going to switch away from GNU Emacs, but the more I've used Howl on some of my Lua software projects, the more impressed I've become with its quality and functionality. &gt; ...but the dev is a real piece of shit imo... I don't know the author of Textadept, but still, I think that's uncalled for, *especially* if your "piece of shit" characterization is based on the author asking for money.
have you considered uploading it to LuaRocks?
The line... if (self.myClassBool) then ...should be... if (self.MyClassBool) then Lua---not "LUA" by the way, sorry to be nit-picking, heh---is case-sensitive with regard to names. So `myClassBool` and `MyClassBool` are different.
OK great, thank you so much, I am an idiot and its always small mistypes like this that catch me out.
Heh, I've made the typo mistake countless times myself. I especially feel dumb when I make a typo and then spread it around via auto-complete in my editor. Thank God for global search-and-replace, lol.
Just to be even more pedantic than the others, "all objects are Tables in this language" is flatly incorrect. Lua is **not** an object-oriented programming language. It is a procedural programming language with some nice functional programming enhancements and a core mechanism (the table you mentioned) that can be, through some trickery with "metatables", used to implement an object system if you really *must* have objects for your life to be complete. Making object systems for Lua is a bit of a cottage industry, so you can find over a dozen of them between the lua-users.org Wiki and Github. (Or you can hand-roll your own, but I wouldn't actually recommend that now.) If you want a decent object system out of the box [30log](https://github.com/Yonaba/30log) works. Or pick any number of other ones people have written.
A little off-topic for this exact question, but here's some Lua-related stuff I found out while experimenting around this (especially because you seem to have already found the typo): In Lua there are multiple ways to declare functions as keys to objects (also called class functions by some), mostly because functions are **first-class values** in Lua, but also because of the method-declaration and method-call syntax. All examples in this post will use this object: local TestObject = {} #\#1 Assigning a function TestObject.testFunc1 = function (arg1, arg2, ...) print(self) print(arg1) print(arg2) print('and ' .. #{...} .. ' other args') end Calling this function using `TestObject.testFunc1(1, 2, 3)`, will yield `nil 1 2 and 1 other arg`. When you use the method call operator `TestObject:testFunc(1, 2, 3)`, the first argument is the object itself. This will output `nil table: 0xb4dbee 1 and 2 other args` (adress made up). This is the reason why the first argument in a function declared this way is often named `self`. #\#2 Function declaration syntax function TestObject.testFunc2(arg1, arg2, ...) print(self) print(arg1) print(arg2) print('and ' .. #{...} .. ' other args') end This function will behave exactly the same way as \#1. #\#3 Method declaration syntax function TestObject:testFunc3(arg1, arg2, ...) print(self) print(arg1) print(arg2) print('and ' .. #{...} .. ' other args') end This will behave a little differently. A function declared with this syntax will have an implicit first argument named `self`. This means that `arg1` here is actually the second argument. Calling this function using `TestObject.testFunc3(1, 2, 3)`, will yield `1 2 3 and 0 other arg` (ignore the engrish here please). With the method call operator `TestObject:testFunc3(1, 2, 3)`, this changes to `table: 0xb4dbee 1 2 and 1 other arg`.
Don't forget [slither](https://bitbucket.org/bartbes/slither/)! It has Python-inspired syntax.
I don't see the reason to do things like this, but well done I guess. This is hilarious though: &gt; Of course, being the superior language, Lua already has goto
A continue *is* a goto. Lua prefers flexibibility. Implement fewer but more flexible features instead of lots of inflexible features. It's what keeps the language small, simple and good. Goto is obviously more powerful than continue because it can implement continue, and also lots of other things like break, breakall, going to error cleanup, etc. Goto isn't even really harmful. It's just been a lot of people repeating the same argument over and over again without verifying the credibility. If you use continue, or break, then you are already using a limited version of goto. When goto is abused, it's not goto that's harmful, it's the programmer that is, and they're going to be harmful no matter what facilities you do or do not provide them. 
So the first undeclared variable is automagically defined to be tge self parameter? That is cool
Coroutines are better, yes, but aren't the same as promises. You can't compose coroutines in the same way you could promises (or their proper name, delimited-continuations), without the coroutines doing some heavy orchestration from within the coroutine's thread.
Yeah I like think of it as something like a JavaScript context...
What you need is to use Excel as an COM Object. Use Luacom to access Excel that way. Otherwise, you need to go the OpenXML way and read the xlsx (ZIP file with XML documents inside) - But the Excel XML structure is really a bitch with tons of very strange structures :)
That one looks like what you need. This is the only other one that I know of that kinda works: http://xlsxwriterlua.readthedocs.org/ I guess I recant the "no excel.lua" statement - most people would opt to a more open platform like csv or xml for tabular data manipulation.
Here's one I'm working on https://github.com/torhve/ivar2/
You can look at my old project: https://github.com/11mariom/lucyna_enlikowa It is not best to use as is. But you can look how I connect and iteract with IRC in Lua. core and commands modules are working, rest.. I think the plugins could be handled better ;)
Not OP, I think that its a great starting point. I like the use of hooks and the name! You don't have a license attached to the project though so you might want to add one so others can use and distribute the modified source.
Noob question:whats firebase?
https://www.firebase.com/
Its a start! Expand on it and go wild! :D Use this and pub-nub for building something like Hearthstone.
Also see my pull request for 5.2+ support in lua_signal... https://github.com/batrick/lua-signal/pull/3 
Ok thanks, I'll check when I get back on, I was asleep haha
When working on another game the vectors they used did x,y,z but the code your using appears to be x,z,y so maybe the problem is you flipped the last 2 parameters on your Vector call?
Ah, so it's a new game mode. That's appropriate, then!
It's in my init.lua but it is still not working. I may have the arguments wrong. My new code is here: //Ammo dropping system function GM:OnNPCKilled(victim, killer, weapon) local Rand = math.random (1, 5) local SpawnHeight = 100 local NpcPos = victim:GetPos() local Drop if Rand == 1 then Drop = ents.Create("item_ammo_pistol, bb_cssfrag_alt") Drop:SetPos(NpcPos+Vector(0,0, SpawnHeight)) Drop:Spawn() Drop:Activate() elseif Rand == 2 then Drop = ents.Create("item_ammo_smg1, bb_css_smoke_alt") Drop:SetPos(NpcPos+Vector(0,0, SpawnHeight)) Drop:Spawn() Drop:Activate() elseif Rand == 3 then Drop = ents.Create("item_ammo_ar2") Drop:SetPos(NpcPos+Vector(0,0, SpawnHeight)) Drop:Spawn() Drop:Activate() elseif Rand == 4 then Drop = ents.Create("item_ammo_357") Drop:SetPos(NpcPos+Vector(0,0, SpawnHeight)) Drop:Spawn() Drop:Activate() elseif Rand == 5 then Drop = ents.Create("item_box_buckshot") Drop:SetPos(NpcPos+Vector(0,0, SpawnHeight)) Drop:Spawn() Drop:Activate() end end
It's in the right place, I just don't understand why it won't run. Maybe I didn't include it in my cl_init?
This is why you need to say where it's located, because you keep missing the basics. cl_init is for client side code only and this code absolutely may not run client-side.
Oh yeah sorry, I am not good at coding whatsoever. It's located inside my gamemode (called spoopshl2). So gamemodes &gt; spoopshl2 &gt; gamemode &gt; init.lua
Yup, I'm using the original version which only works under 5.1. lunamark seems a bit overkill for Lander. Thanks!
Lua's math.random() uses whatever your platform's compiler uses for the c function rand(), which is why it varies from platform to platform. For gcc, the implementation eventually becomes this: http://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/random_r.c;hb=glibc-2.15#l361 Which, on line 375, is where the linear congruential generator actually sits. This is the only line of code (along with, say, a return) is the only thing that is required. All of those extra ifs and housekeeping? They're good coding practice but increase execution time a little. LuaJIT takes Lua bytecode and, for code that is executed often (inside so-called hotloops), turns it into native assembly commands. Meaning that for simple code inside a very tight loop (which sounds like your test case), you may very well be creating fewer/faster CPU operations. 
While I only partially understand your explanation (I'm a composer, not a programmer) it seems to confirm that A) I'm not going crazy and that B) my results are likely accurate. Like I said, this will save me a lot of work so I'm glad it's turned out that way. 
&gt; Is there something special about LuaJIT~~'s rng~~ that would account for it being so ~~slow~~ FTFY LuaJIT's RNG isn't slow. It's just running your Lua code as fast as native code (because it's compiled it into native code). The bigger question: why you give a shit? How many notes do you *need*? o.O
Yup. Here's straight from the source (lib_math.c) /* ------------------------------------------------------------------------ */ /* This implements a Tausworthe PRNG with period 2^223. Based on: ** Tables of maximally-equidistributed combined LFSR generators, ** Pierre L'Ecuyer, 1991, table 3, 1st entry. ** Full-period ME-CF generator with L=64, J=4, k=223, N1=49. */ 
Shows what I know! But then it still remains that, if OP implemented a basic LCG then it stands to reason that it may be faster, right?
\*rofl\* For someone asking others for help, you certainly are a cunt. &gt; And yet you left out the part where I wrote "(relatively speaking)" so really your "fix" was just so you could be snarky? It wasn't meant to be snarky, you overly sensitive tool. It was meant to concisely illustrate the tweak in perspective. You're thinking that LuaJIT's RNG must be slow if your Lua implementation can beat it, but it's not *that* slow. You're implementation beats it because: 1. LuaJIT's RNG *is* more sophisticated than yours (somebody else already explained this), but just as important (the bit of clarifying information *I* was trying to add): 2. LuaJIT has compiled your Lua code to native machine code, so it's perfectly capable of being just as fast as C code (which is to say, LuaJIT's internal code). Lua is normally compiled to so-called "byte code" and runs in a virtual machine, which can be thought of as a software CPU. LuaJIT compiles your code to native machine code, which runs directly on the physical hardware CPU. &gt; more notes that people will come up with other uses for thousands or even millions of notes You just posted your own benchmark showing tenth of a second for a million notes. That's why I asked: how many notes do you *need*? Ten million would take a second to generate. For those of us that aren't in your personal fan club, closely following the project you alluded to, we have no way of knowing if that's a long time. If it's part of a project creation process that takes 2 minutes, it's irrelevant. If it's something that needs to happen in real time, you're screwed.
*Relatively* slower than I was expecting based upon my weak understanding of what is going on.
&gt; Then why leave out the bit I wrote that made the very same point you did? I have no idea what you're talking about. I thought "relatively speaking" meant "relative to my Lua code". I snipped out *most* of your post, because that's just good quoting etiquette. I interpreted your question as "My Lua code, which should obviously be slower than native code, is somehow faster than LuaJIT's built-in code. **Why is LuaJIT's RNG so slow relative to my Lua RNG?**" My answer was meant to say: "Another way of looking at this is **'Why is my Lua RNG so *fast* relative to LuaJIT's RNG?**'" Because LuaJIT compiles Lua code to machine code, just like a C compiler, it has the *potential* of being as fast as a native C implementation like that in LuaJIT. The C compiler usually has the edge because: 1. C code is semantically much closer to the native machine, whereas certain Lua-isms like using hashtables for data structuring will always be slow. 2. The C compiler is capable of more aggressive optimizations of the resulting machine code, because he has no time constraints and has more context to work with. However, small, isolated snippets of code that primarily do arithmetic (like an RNG) are ideally suited to being just-in-time-compiled. &gt; In my benchmarks I left out a lot of the other processing that takes place in order to just isolate the speed of the rng Yeah, my question is trying to get some context (since [premature optimization is the root of all evil](http://c2.com/cgi/wiki?PrematureOptimization)). If you only need a million notes as part of an already lengthy process, then both RNG's seem pretty fast to me. Any optimization you do to RNG generation time is a *constant time* change (in algorithm nomenclature that's `O(N)`, or "on the order of N"). In other words, whether it's 1 millisecond or 10, that can only affect a linear change in performance. If you need, say, 100 million notes in a few milliseconds, then you'd need a new *strategy*, such as generating notes only as they're needed. In general, constant time optimizations can only buy you so much. Whether they'll be enough depends on the size of the problem. For instance, imagine searching a dictionary of 100,000 words. If you just start at the first word and check each one (`O(N)` complexity algorithm), searching for "zebra" can result in nearly 100,000 string comparisons. If instead you store the dictionary in sorted form, you can do a binary search: jump to the middle, see if "zebra" is greater than or less than that entry. Then take the resulting half the dictionary, jump to the middle of *it*. Repeat. This has an average case performance of `‎O(log n)`. Far fewer comparisons.
Oh, sure. But I meant more like my description of how the Lua might become as fast as C. LuaJIT may very well have turned it into fewer ops than their LFSR assembly.
Sorry for late reply, at school, but perhaps luaJIT's rng is more complex then the one you have?
&gt; If you only need a million notes as part of an already lengthy process, then both RNG's seem pretty fast to me. Exactly. The LuaJIT rng is plenty fast. I was trying to make sure I wasn't doing anything boneheaded wrong given my inexperience as a programmer and lack of fundamental knowledge concerning all the maths involved. Also, because whatever rng I use it has to produce the exact same results for the same seed on all platforms (forever). My thought was that assuming the LuaJIT rng would be faster than my Lua-coded one that I would want to use it for the LuaJIT version of my code. And then in order to make sure it has the same results as the Lua version then I'd need to, somehow, code the LuaJIT rng into native Lua code. That was going to be a huge headache. But since my own rng is good enough (no crypto needs or anything) and it's just as fast now I can just keep using it for the Lua version and not have to worry about that extra coding. Do you see my thought process there? I have to use the exact same rng in both my Lua and LuaJIT versions and I had assumed that it would be the LuaJIT rng but now it looks like my own Lua rng is sufficient. So I wanted to make sure that my benchmark results were accurate before committing to that strategy. &gt; Because LuaJIT compiles Lua code to machine code, just like a C compiler, it has the potential of being as fast as a native C implementation like that in LuaJIT. This is really interesting. And forgive my ignorance here, but isn't all scripted code also converted to machine code somewhere in the process? I was under the impression that LuaJIT is so much faster because it's written in assembly and is well-optimised instead of being compiled from C? 
Yeah, that appears to be the case. My needs for an rng are simple but I had assumed that given how blazing fast LuaJIT is in general that it's rng would still be faster than my Lua-coded rng regardless of the complexity. So my question is just to assure myself that my benchmark results are accurate.
So basically what you're saying is that LuaJIT uses magic. (I kid. If I just focus on the virtual machine code bit I think I can almost start to begin to understand what's going on.) And I know this is getting off topic now but what's going on in these benchmarks on the [LuaJIT site?](http://luajit.org/performance_x86.html) What's the difference between LuaJIT interpreted and the other, *faster* LuaJIT? And is this something I can take advantage of without going down a particularly hairy rabbit hole (like learning C)?
&gt; He includes it in the benchmarks to show that his interpreter is faster than the vanilla Lua interpreter, but both are much slower than JITted code. Ah, it's very clear now. Thanks for taking the time to explain all this extra stuff. 
Something is wrong with your gamemode. Your corrected code works fine when pasted into the sandbox gamemode's init.lua. Are you sure you're actually running your gamemode? Are you getting any lua errors in your console when you start up your gamemode?
I am getting a few. I wonder if it isn't loading my script. But good to know my script works, thank you. 
If you wanna draw stuff, try love2d!
It comes with the Lua for Windows as one of the installed libraries.
It's possible he's talking about the CanvasDraw (cd.dll) by TecGraf (the people responsible for Lua and IUP), but there could be a lot of other projects called Canvas.
Thing is.. *you* might run it with luajit, someone else might *not*... That might hurt both the repeatability-from-seed and "quality of randomness". (Also also for crypto... beware!) Does luajit have a lib to show for it somewhere that might run on other lua implementations aswel?
I am using Thomas Lauer's cheat sheet together with http://www.lua.org/versions.html.
It's missing an idiom commonly used in Lua as a ternary operator: x and y or z &gt; function obj:name ( args ) body [return values] end object function, gets obj as additional first argument self There's no reason for this to be different than the one above it, IMO. function t:name( args ) body end shortcut for t.name = function(self, args) body end Though IMO both should be written: function t:name([args]) body end shortcut for t.name = function(self,[args]) body end 
How popular is Terra? I can't find any projects written in it. Also, Terra's primary use seems to be as an alternative frontend for LLVM code generation, rather than as a high performance Lua extension for production apps (which LuaJIT already is).
It has almost a thousand stars on GitHub despite your findings, surprisingly enough.
Is there a particular reason why you are looking to use Lua? Depending on what your need is, it might not be the best or even a good option.
https://turbo.readthedocs.org/en/latest/get_started.html 
But a web project is a great way to learn a language :)
I would suggest one of the ruby packages that runs on Sinatra or Jekyll for a basic site. If you know web-dev stuff but want to do it in Lua, start with [Pegasus](http://evandrolg.github.io/pegasus.lua/) and then add on all the other needs - router.lua, some form of html templating, etc.
Depends on the language. I'm not so sure I suggest learning BASH by building a web site. :-) That said, I'm sure lua could be fine, depending on the project. But, I've not done a web project at all, so I don't know. 
OpenResty https://openresty.org/
Thanks. And yes, the reason I am wanted to do it with Lua is that I am in the process of learning it Lua for my job, and I figure what better way to have a practice project than a website.
I would probably just use [lapis](http://leafo.net/lapis/), simple and well documented.
Not sure how it compares to what's out there, but I've found it really useful.
Here's some similar projects for the sake of comparison: - [Classic](https://github.com/rxi/classic) (Different library, Same name) - [30log](https://github.com/Yonaba/30log) - [Middleclass](https://github.com/kikito/middleclass) - [knife.base](https://github.com/airstruck/knife/blob/master/readme/base.md) - [hump.class](http://hump.readthedocs.org/en/latest/class.html)
Would love to see how they all stack up in opinion. In the end, each person has their own needs - but a general "has ..., doesn't has..." would be cool. Thanks for the share of this library! Almost disregarded it because of the name.
Are you looking for OCR software? (optical character recognition) to convert a simple image into text(numbers) or do you want to read the memory of the program? Im sure both are possible.
Here are some great resources for lua libraries: * https://github.com/LewisJEllis/awesome-lua * https://luarocks.org * https://lua-toolbox.com I was not able to find any OCR libraries. You might have to call some native library instead. Here are a few free software choices: [gOCR](http://jocr.sourceforge.net/), [tesseract](https://github.com/tesseract-ocr), [Cunieform](http://en.openocr.org/).
Go ask this on /r/autotouch - should have more help there.
Your issue isn't a Lua issue and as such isn't really appropriate for this subreddit. Auto Touch may have a function that returns a colour value that we could help you to convert to something usable but without knowing the function or what it returns, there's really nothing a general Lua forum can help with.
What I'm asking actually has nothing to do with auto touch. That is kind of the entire point. I am working on moving away from auto touch, and have managed to create a pretty simple app that will allow me to execute my LUA scripts. The problem is, I don't have a function to find colors so I am looking for help either finding or creating a function in LUA that can retrieve the color of pixel (x,y) on the screen. Does that make sense? 
Ahh I see. Thank you! That makes more sense. With all that said, is there a way to determine where the C file is located?
No
No, because the C file is no longer used after compilation is complete. If you mean the location of the library, it _might_ be possible but I think you'd have to search `package.cpath` manually.
&gt; With all that said, is there a way to determine where the C file is located? Interestingly, the runtime keeps track of the paths that binary modules are loaded from, see the ``CLIBS`` table in [``loadlib.c``](http://www.lua.org/source/5.3/loadlib.c.html#addtoclib). So the information is there, just not accessible on the Lua end. *EDIT* Since ``CLIBS`` is stored in the registry you might probably write a module in C to retrieve the table.
I wrote something like this at work a couple years ago. If you're using gcc you don't even need it: there's a way to embed an arbitrary file into an object file and get at it as an unsigned char buffer in C. So you can just run your code through luac, shove the bytecode through that, and link it all together. Not every compiler will do that though.
If you use bin2c (there are a number of applications which do this, all of them with the same name), it should be possible to use any C compiler to do this.
So based on your example, it would basically be the equivalent of declaring```const char *myfile;```? Or would it include the ```.data``` part somehow too?
&gt;lua scriptpath.lua
Can't remember if I tried this. Probably didn't knowing me lol. Thanks
The object file will have three symbols prefixed with `_binary_&lt;filename&gt;` with periods replaced by underscores. For example: $ echo "Hello, world!" &gt; hello.txt $ ld -r -b binary -o hello.o hello.txt $ nm hello.o 000000000000000e D _binary_hello_txt_end 000000000000000e A _binary_hello_txt_size 0000000000000000 D _binary_hello_txt_start The `_binary_hello_txt_size` symbol isn't very useful in C, so just subtract the other two symbols. $ cat example.c #include &lt;stdio.h&gt; extern char _binary_hello_txt_start[]; extern char _binary_hello_txt_end[]; int main(void) { size_t size = _binary_hello_txt_end - _binary_hello_txt_start; fwrite(_binary_hello_txt_start, size, 1, stdout); return 0; } $ gcc example.c hello.o $ ./a.out Hello, world! 
Thanks.
What path is that? Where my lua scripts are being stored? If so, I tend to keep them all in separate folders. I'm just a bit confused on what path I have to add.
I can already access lua through the command prompt by just typing lua, it just won't let me access a script from another folder. The scripts have to be placed in the Lua folder to accessible. I have my lua software and such in: D:\Program Files\Lua\5.1 I'm trying to access an example script from the book I have called "3 - Function Example.lua". This script is placed in: D:\Work\Programming In Lua\Lua\3 - Function Examples EDIT: I can load the script up through in another directory, but it means I have to navigate to that directory in the cmd to load it up, so I would be putting in: D:\&gt;cd Work\Programming In Lua\Lua\3 - Function Examples Then it would come up like: D:\Work\Programming In Lua\Lua\3 - Function Examples&gt; I would put in: lua -i 3 - Function Example.lua It will load and I can interact with it. Is this the only possible way of doing it? I don't fancy having to type in the whole directory path to access different scripts.
http://lifehacker.com/5989434/quickly-open-a-command-prompt-from-the-windows-explorer-address-bar and shit, crtl or alt + right click (forgot which one) &gt; "open command prompt" should work.
That's quite helpful actually. Will save me a hell of a lot of time :D Cheers.
Could one compile functions with that?
I mean, if you say "if you assert enough for the compiler to infer what is needed, then it may compile", then, presumably it can. Of course it needs some indications how much it needs, and an ability to query what is compiled or not.
&gt; I wrote something like this at work a couple years ago. As did I. I wonder how many times this wheel has been reinvented. :) Mine let you specify an arbitrary number of Lua scripts *and* binary modules, which it would package up into a single compressed executable.
Try this(tutorial included in documentation) http://keplerproject.github.io/orbit/
I have submitted a talk on http://www.hammerspoon.org/ !
Cool, thanks for sharing :D
Can used Torch7 with that?
OK thanks. So 5.3 it is :D
LuaJIT does support a subset of Lua 5.2 features by default (arguably the most important ones). The big feature in 5.3, integers, aren't technically supported but can be easily obtained using the FFI.
Check out how we use Lua to rapidly transform data, save bandwidth and make two DDS systems compatible with each other.
There seems to be some misconception with the Lua 5.3 integers: it's not a new type: type(5) and type(2.5) still both return "number", its just that numbers are now internally stored as either a long or a double depending on context, instead of always being doubles (technically it's lua_Number and lua_Integer, but double and long are the default). It's pretty much just a performance optimisation: the only user facing changes are tostring(2.0) now returns "2.0" instead of "2", and no floating-point accuracy bugs when dealing with very large integer numbers.
For me, LuaJIT's FFI is *the* main draw for Lua. It's the best FFI I've ever used. 
what the fuck is this gross XML shit
Good point, I have added some to the readme.
Thanks for the feedback - at the time I started the initial version I was using mutt, more specifically mutt-patched. That's the version with the toggleable sidebar, and that's what made me think of writing a modal-client. Specifically my workflow is: * Show maildirs with new messages. * For each maildir read all unread messages. * Move on to the next, until complete. That's the kind of workflow that works well for mutt, and for lumail, be it the initial version or the second version. I'm saddened that you found the project had no activity - that was mostly because it was "complete enough". I think I did a decent job of keeping up with bug reports, and certainly had contributions from outside users, some of whom gained commit rights to the repo. The alternative applications, like sup, and notmuch, never really worked for me. Though I can appreciate they offer a lot of flexibility via the search facilities and "virtual folders". I did toy with notmuch + emacs for a while, but I just didn't like the index/import process, and found it hard to use in the way that I expect. My problem is that I care about the details. I have mail going back to 1994, and it is all filed in a way that I expect. Tagging, from scratch, is almost an process that fills me with dread! Though I'm sure it could be done, even with the trivial "folder-name == tag" system. I certainly trust sphinx, sqlite, and those kind of systems to do a good job and not lose the associations. 
Oh, I wasn't disappointed with lumail or anything like that. I read through the issues and found a few entries of you saying that you were writing an overhaul, however I couldn't see much activity on the overhaul. I also require good integration with GPG and I remember some issues there, or at least some comments suggesting that this would be improved in the re-write, or something along these lines. In any case, when I tried out sup and notmuch, I was hooked on that. Still, I do encourage your project and I hope that your new version of lumail attracts more people to terminal based MUAs (and possibly demonstrates to some people that they don't have to put up with mutt and all its quirks).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/cheatsheets] [Lua 5.1 Cheat Sheet (xpost)](https://np.reddit.com/r/cheatsheets/comments/3rz8hu/lua_51_cheat_sheet_xpost/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
This issue with the script is how to tell it to pull the csv from my hosting acct... right now the script is looking for a table set and i dont know how to change my server or host the csv any different, so i was hoping there would be a line of code i could just enter or take away to make a simple pull of the csv... also as far as the date pattern im assuming i just have to change my csv to have year, month and date then it would match the pattern in the script
ok sorry, but the script works fine, the script is pulling my local url wrong and thats basically what i needed help with. I wasnt sure how to code in my local url.. is that more clear? Dont wanna confuse anyone in the LUA forum when it comes to LUA. You know being clicky and following an agenda is a horrible way to own the name LUA in reddit. i was thinking this would be a much more open experience... never used reddit before.
I downloaded your script and ran it. In both Lua 5.1 and Lua 5.2, your script **doesn't do anything** and just ends immediately, without any result. Please note that Lua by itself **cannot connect online or download anything from any website**. It has no functions to do so. If your script does this, then it means your script uses some special libraries for online access. We have no idea what those libraries are. How exactly are you running your script?
My first Lua experience was a [Minecraft mod,](http://www.computercraft.info/) actually. It had a nice learning curve, and you can get pretty complex with it if you care to. Why are you interested in learning Lua? Is there a particular target you're aiming for?
How much experience do you have with programming in general?
I didn't know they used lua (minecraft mods). Thats a Great idea though! And lua is easy and provides a basic understanding for programing. Besides, it may be a lower language but it's still plenty powerful and does what needs to get done.
Not enough. XD
You can also make a small website using Sailor or Lapis http://sailorproject.org http://leafo.net/lapis
/r/dailyprogrammer has new ideas of different skill levels every week!
http://luaforge.net/projects/luatesser/
But if you wanted to really sandbox Lua, wouldn't you take out certain things, like the ability to call dll's and such. In fact, if I were to be given the task to make a Lua sandbox, I'd take out the ffi, the require function, the debug module, and replace the io module by something that can't read/write outside the current directory. **EDIT**: never mind, I skipped over a bunch of stuff and missed the part where they said exactly this. Don't quite see how the code execution works, though. It _does_ require you to write pure machine code, though, so good luck!
Cool, now i can let my game write to Appdata! Thx
&gt; As its sole concession, the sandbox does load the jit library, as this library must be loaded in order for LuaJIT to actually do JIT compilation. This isn't really true, is it?
Looks awesome, my pc isn't quite optimized for that kinda modding and testing (it's crap). But I'll keep this in mind. And, are you part of the modding community or part of the dev team?
Wow, the project Euler is awesome. Thanks dude. REALLY HELPFUL, helps with the learning of automating of things. Also, thanks for responding!
Thanks for the reply! It's really helpful!
Thanks! Can't really use it *Linux*.
Why is this NSFW??
You are not "adding the variable", you are adding *the object which is in that variable* and that's different object during every iteration. Was this your question? It's not entirely clear what aspect of this do you consider "strange"
Sounds really really cool, but I think I should have a little more experience before I help with legitimate projects. I'll make sure to contact you later though.
Global Variables: http://www.lua.org/pil/1.2.html Local Variables and Blocks: http://www.lua.org/pil/4.2.html Arithmetic Operators: http://www.lua.org/pil/3.1.html *Perhaps I don't understand the question*
I understand now. I should've looked harder. THANKS!!!
 Lua 5.3.1 Copyright (C) 1994-2015 Lua.org, PUC-Rio &gt; main = 4*5 &gt; print main stdin:1: syntax error near 'main' &gt; print(main) -- value of main 20 &gt; print{main} -- a table passed to the print function containing main table: 0x175a610 &gt; print'main' -- the string "main" passed to the print function main 
Ok, thanks! It works now. Now, with this information I should be able to hack the pentagon!!!!! Hahaha, I'm glad it's not that easy.
In case you didn't understand that, you are using print() wrong. Lua needs brackets, Python doesn't.
Quite a few do and quite a few don't. C++ is one of the ones that does
Another thing to note, even those that don't require it will still use it as an end of line character. Not useful normally, but they won't break anything and it also means you can put multiple lines of code on a single line if you so desire.
Alrighty, I feel like a dunce right now since I can't find any information online, but what the hell is a using(), and how is it in any way significant?
It's still an ultra shitty idea to leave random stuff around for the garbage collector to take care of. I hope to never see something like this in functional code.
I think it is inspired by C#'s using statement for disposable objects. See [here](https://msdn.microsoft.com/en-us/library/yh598w02.aspx?f=255&amp;MSPPError=-2147217396). Basically a dispose method is called even if there is an exception. I'm not sure it's useful for Lua. If it throws error, do a pcall or xpcall. 
I don't know much about LuaJIT's bytecode, but I can expand on normal Lua bytecode. Bytecode has access to the virtual registers that handle Lua's state. These registers handle everything from storing data in variables to function calls (in fact, the C API actually works with VM registers around a common base register). In Lua 5.1, an effort was made to validate bytecode before loading it, checking for erroneous opcode placements (For example: SETLIST, the opcode used to load tables in a single operation cannot be used on non table values). The validator was removed in 5.2, which gave a speed increase. These validations were in place so that the VM code could make certain assumptions and remove type checking in various places. The same person who made this LuaJIT bytecode vulnerability created an exploit for 5.2. I expanded on it and created a version of the exploit for 5.3, except with a successful Return Oriented Programming exploit to break out of the sandbox. Overall, bytecode is dangerous just because Lua usually expects bytecode to come from safe sources (itself), so it becomes a large security hole when in the hands of people who want to exploit it.
Actually, Lua does do some very complex loop optimizations, for example while true do end Pretty much gets optimized to: JMP -1 (This jumps back on itself, condition checking gets omitted) In the past I've tried to do some Lua decompilation from bytecode with some success, but some loops Lua pulls out go unhandled. Another particularly bad one is with a break statement as the last operation in a loop will just fall through the end of the loop. A full bytecode analyzer would take out any benefits of loading bytecode in the first place, since it would pretty much add a step that's almost as complex as parsing source and emitting bytecode from it.
From my brief skimming of the parser, `while true do end` is supposed to be translated to JMP -1, and it seems to be a one-way syntax directed translation. The parser saves the current PC as the target when it encounters a while, then the conditional true (exactly what if true then ... would emit) emits an empty statement, finally the empty block is emitted again and a jmp target is emitted. On the other hand, the conditional false generates the full 2-way test so while false do end generates LOADBOOL(r(n), false, no_jump) TEST(r(n), 0) ; jumps if the next instruction if r(n) is false JMP(-3) ; to LOADBOOL The general pattern here is that while loops are all of the structure: CONDITONAL BLOCK JMP back because that's the structure that the parser enforces during optimization. Of course, the reverse decompilation problem will not be syntax directed on the bytecode, but it seems equivalent to the problem of proof normalization/parsing in the presence of nullable and cyclic nonterminals (e.g emitted condition could be null, block could be null or a condition could contain more conditions). This is why the maximal munch technique for code generation (which is what Lua uses) wouldn't work and why decompilation seems like a more difficult problem in this case than bytecode compilation from a parse tree. However, if we don't try to decompile greedily, and assuming that the bytecode we do want to decompile are all "well-formed" in the sense that they are within the codomain of Luac (and assuming that Luac performs bytecode emission in a syntax directed way), then this should be a generally decidable problem. I agree that this wouldn't have many practical impact or implications. My interest in this is more due to my own personal self interest. I've always wondered whether there are general decompilation techniques that we can use for language implementations whose target language is generated in a pure and structured way.
https://github.com/duhoobo/lua-xpath or http://luaxpath.luaforge.net/ or http://matthewwild.co.uk/projects/luaexpat/ They all do XPath things. Good luck. EDIT: Make sure to properly ask your questions. We have no clue what your skill level is with Lua, XPath, XML, etc. We also don't know what your intended use is, what framework/toolkit/engine you are running in, or what library (or custom code) you want to do XPath in.
Have you heard about Luvit ?( https://luvit.io/ ) 
nginx is a server side setup... Is this project in the web browser? You may need to look into a JavaScript solution.
http://catb.org/~esr/faqs/smart-questions.html Come back after you've read that. *All* of it.
Read it. I understand my mistakes. Do i delete the post and rename it ?Also,English isn't my primary language. And there is no use for all that stuff about me being a kid and stuff. Thank you for that article!
wow, that's a little overkill for a kid...
What exactly do you need help with, could you be more specific? It's okay if you edit your first post. :)
Have you tried http://sailorproject.org? It's an MVC web framework that allows &lt;?lua ?&gt; notation on HTML views! And it's pretty easy to install. You can use it with different webservers, such as apache or nginx. We had a contributor that used to run it on civetweb but unfortunately I dont know if it still works! Or you can use it standalone: luarocks install sailor sailor create myapp cd myapp lua start-server.lua
Check out http://turbolua.org
Well,i need a link to a documentation about it and mabye a sample program like Declare a , read a ,declare b,read b, declare s=a+b; write s.
&gt; if {color == BLUE} then try using parentheses instead of braces.
&gt; local BLUE = 0x4589CF; local color = BLUE if (color == BLUE) then touchDown(0, 542, 158); usleep(10000); touchUp(0, 542, 158); usleep(1000000); end Yes, and it works the same as the code with the {} It clicks if it's blue, but it also clicks if its green/white/ect... Hmm... Now, the page that I am looking on, has this blue every so many lines. So, wouldn't that be cause for it to click on the green as the "touchdown" is on a specific point as opposed to being wherever BLUE was actually found?
&gt; if {color == BLUE} then The above condition is ALWAYS true. 
The curly braces will create a new table that contains the result of the expression `color == BLUE` in it. This table is then used for the if statement. Since the table containing `color == BLUE` is neither `nil` or `false`, it evaluates to `true` and the body of the if statement is executed. ([Both false and nil are considered false. All values different from nil and false are considered true](http://www.lua.org/manual/5.3/manual.html#3.3.4)) e.g. if {true} then print(1) end if {false} then print(2) end if true then print(3) end if false then print(4) end if nil then print(4) end will print `1 2 3`, since `{true}, {false}, true` all evaluate to `true`, and `false` and `nil` evaluate to `false`. You might check the type and value of `color` afterwards - for example by printing it out: `print(color, type(color))`. `type(color)` should match `type(BLUE)` (i.e. `number`) and the values should obviously be equal as well.
Which operating system do you use? Windows?
You said photo below but I can't find any photos! 
Don't know why link didnt post http://s12.postimg.org/c34j1vjul/IMG_2126_B.jpg I'm sure nowhere near as nice/clean as most of you here would have done, but my very limited knowledge, had me copy and paste this together lol its just 8 of these(with a Y axis change) local BLUE = 4231387; local color = getColor(483, 183); if (color == BLUE) then touchDown(0, 483, 183); usleep(10000); touchUp(0, 483, 183); usleep(1000000); end followed by one of these(for scrolling down to show the next 8) touchDown(7, 422, 950); usleep(116923.50); touchMove(7, 422, 987); usleep(1316451.04); touchMove(7, 422, 123); usleep(1116519.50); touchUp(7, 422, 122);
&gt; function findPlusses() locations = findImage("images/plus.bmp", 0, 1, nil, {555, 207, 24, 843}) return locactions end function tapPlusses(t) for k,v in pairs(t) do touchDown(0, v[1]+10, v[2]+10) usleep(10000) touchUp(0, v[1]+10, v[2]+10) usleep(1000000) end end tapPlusses(findPlusses()) error `.Lua:7:bad argument #1 to 'pairs' (table expected, got nil)`
&gt; images/ how do I put the code in the box like you do without putting 5 spaces at the beginning of every line? http://i64.tinypic.com/2iub7gk.jpg all of my images go in script folder I've tried function findPlusses() locations = findImage("follow.bmp", 0, 1, nil, {555, 207, 24, 843}) return locactions end function tapPlusses(t) for k,v in pairs(t) do touchDown(0, v[1]+10, v[2]+10) usleep(10000) touchUp(0, v[1]+10, v[2]+10) usleep(1000000) end end tapPlusses(findPlusses())`
I've also tried making an "images" folder, putting it in there and doing function findPlusses() locations = findImage("images/follow.bmp", 0, 1, nil, {555, 207, 24, 843}) return locactions end function tapPlusses(t) for k,v in pairs(t) do touchDown(0, v[1]+10, v[2]+10) usleep(10000) touchUp(0, v[1]+10, v[2]+10) usleep(1000000) end end tapPlusses(findPlusses())
The image needs to just be the plus sign from within the image you just posted. I've been manually putting 4 spaces at the start of each line.
same error /var/mobile/Library/AutoTouch/Scripts/FollowImage.Lua:7: bad argument #1 to 'pairs' (table expected, got nil) http://i66.tinypic.com/2wpt7w3.jpg
You haven't given very much information so I'm going to have to ask a few more questions. What program are you using? If you are using a plain Lua interpreter (from lua.org or luajit), what libraries are you using? If you want help with your current code, do you have the source of `getColor`? Are you allowed to post it? Otherwise, what is it exactly that you want help with? By "tapping", do you mean that it should click something using the mouse? I assume you already have code to do this or do you still need to write this?
Can you email the version from your phone to the email address I sent you? I can confirm the file type. 
sent
Seems like a bitmap to me. Hmm. Try expanding the region to search within. Thats the table (denoted by braces {}) that has 4 values: x, y, width, height. Try setting them to 1, 1 and the width and height of your screen. 
It means that findPlusses isn't returning a table. 
&gt;It means that findPlusses isn't returning a table. Because it isn't... I think the issue is a spelling problem. function findPlusses() locations = findImage("images/follow.bmp", 0, 1, nil, {1, 1, 375, 667}) return locactions end try changing it to "return locations"
Why do you have 6 separate threads about the same script? Having one post here and one on /r/autotouch would be more than enough...
This appears to be a LuaEdit bug.... Did you mess with settings? It appears to be looking for `editlayour` not `editlayout`
What framework? Also, if you are manipulating files, look at the STDLib documentation: http://www.lua.org/manual/5.1/manual.html#5.7
Same error
Another thing. I'm putting a code together to do somewhat the same. Difference is, after tapping the button(which is a green following button) I must tap another button to confirm. Now, this other button is ALWAYS, in the same location. So how would I add this code touchDown(6, 382, 960); usleep(66649.92); touchUp(6, 382, 960); usleep(649652.92); with the code below so that after each button gets tapped, it executes the code above before moving to, and tapping the next button. function findCheckmarks() locations = findImage("images/checkmark.bmp", 0, 1, nil, {435, 153, 223, 893}) return locations end function tapCheckmarks(t) for k,v in pairs(t) do touchDown(0, v[1]+10, v[2]+10) usleep(10000) touchUp(0, v[1]+10, v[2]+10) usleep(1000000) end end tapCheckmarks(findCheckmarks()) touchDown(7, 422, 950); usleep(116923.50); touchMove(7, 422, 987); usleep(1316451.04); touchMove(7, 422, 122); usleep(1116519.50); touchUp(7, 422, 122); usleep(1500000) 
Zerobrane is good but I couldn't find a dark theme. xD Tried Text Wrangler didn't really click with me. Haven't heard of Atom I'll try it later.
This is a good place for answers, but I also recommend the Lua mail list or stack overflow Btw, I'm honestly quite happy with Sublime. Been using it with Lua for 2 years now :) 
Also, you might want input sanitizing. In this case, that means removing white space before and after words, possible casing, etc.
IMHO no. It's ambiguous and could be confusing. Although I can see how it would make sense.
You could implement this if input was a custom or wrapped object (which it should be - add sanitation, access sanitized and raw input: `input.sanitized` and `input.raw`). Assuming that input is a an object to which you can modify the meta-table, you can override the equality function and pass a table of options you want to compare against. Could look like `input ~= {"Soup", "Salad"}` The downside to that is now you have this arbitrary equality method that acts different than expected (without peeling apart the underlying tables). I would suggest making a set and passing the input and set into a method that iterates the acceptable set - like this [SO thread](http://stackoverflow.com/a/2282547). You can then have methods for contains, doesn't contain, contains multiple, etc. The caution about dynamic languages is "Just because you CAN do it, doesn't mean you should".
Agreed - if it was language level... but metatables ;) Assign them to your objects and override to your hearts content!
Yes, like my lengthy reply above - input is a table with a metatable that overrides the equality method (==/~=) and then accepts either a string or a table and then evaluates if the item is/is-in the given object (to which your use of `input ~= {.........}` is the correct assumption).
&lt;3 lapis, thanks fo the box!
&gt; if input ~= ("Soup" or "Salad") If you want to compare `input` to "Soup" and "Salad", you need two comparisons: &gt; if input ~= "Soup" and input ~= "Salad See [logical operators](http://www.lua.org/manual/5.1/manual.html#2.5.3) in the manual. These are binary operators, meaning each operator compares one value with exactly one other value. The expression `a ~= b or c` contains *three* values. This is OK though, because two of them are in a *subexpression* which gets evaluated first. So the compiler evaluates the whole expression like this: intermediate = b or c result = a ~= intermediate In your case, it does this: intermediate = "Soup" or "Salad" result = input ~= intermediate The `or` operator evaluates to the first value that is not `true` or `nil`. In this case, it evaluates to "Soup". After that evaluation is done, we get: input ~= "Soup" 
[removed]
This seems really close to the 32-bit signed timestamp overflow date
That's what I was thinking when I first found it, but it seems so arbitrary.
I don't mean to be rude but all I can think of is the title of a file "Angry.txt" ? Can you explain a bit more?
What do you mean? And no.
I'm going to try to take your question seriously even though what you're asking is vague. What it sounds like you're asking about is how to model emotions through software. I don't want to sound cynical but this is actually an incredibly difficult task. There is extremely advanced research going on in the AI field, emotions being a pretty sophisticated topic. It would likely not be a Lua specific technology that solves this problem if it is even solvable through software as we know it. But that's not to say you couldn't be the one to do it. Just be prepared to dedicate your life to the work. If you wanted to start out on something simple you could try making an Eliza program. https://en.wikipedia.org/wiki/ELIZA Here is the classic Eliza program in Lua: http://lua-users.org/wiki/SciteElizaClassic
that was the first thing that came to my mind as well hahaha
Can't tell if serious...?
lol.
I can't tell what the question is, but you can use emoji/utf8 variable names in LuaJIT if you want (it will not work with PUC Lua, however).
http://www.catb.org/esr/faqs/smart-questions.html
https://learnxinyminutes.com/docs/lua/ https://www.youtube.com/watch?v=iMacxZQMPXs https://www.youtube.com/watch?v=GVnIRt77ePk I guess you're new to programming and Lua is your first language. Am I right? By the way, use http://studio.zerobrane.com/ for your editor.
Look into Love2D. I learned Lua for computercraft as well and that's how I did it. [Love2D](https://love2d.org/) You're also going to need to actually learn Lua. Programming isn't very hard to get the hang of, but it can be VERY hard to get good at. [Programming in Lua](http://www.lua.org/pil/contents.html) is probably the best Lua tutorial. It's what I used to learn, mostly. Also this [is really good.](http://www.lua.org/manual/5.1/) And [this](http://tylerneylon.com/a/learn-lua/) is a good way to just get some quick reminders when you're starting out. Of course this sub, /r/learnprogramming, stackoverflow, google, the Lua forums and the Love2D forums are all usually willing to help.
your last link is the same as the Lua learnxinyminutes, and it's aimed at people that can already program and just want to learn a new language. For example the first comments from there: num = 42 -- All numbers are doubles. -- Don't freak out, 64-bit doubles have 52 bits for storing exact int -- values; machine precision is not a problem for ints that need &lt; 52 bits. s = 'walternate' -- Immutable strings like Python. t = "double-quotes are also fine" u = [[ Double brackets start and end multi-line strings.]] t = nil -- Undefines t; Lua has garbage collection. I doubt OP knows what this is supposed to mean
Post it to r/shittyaskscience Im sure they are able to help you out.
Thanks that actually makes a lot of sense the way you put it.
In Lua a table combines structures/classes and arrays into one type - a table. This works as an array in that it can have a numeric index, but it can also have an index referenced by a key which in actuality is just a string value (tbl["key"] = value is the same as tbl.key = value). This comes into play in that your for loop has a nicely built in iteration in Lua for iterating ONLY the numeric indexes of a table (in ipairs), and one for the key indexes (in pairs). The i, v in ipairs will return two values in i and v respectively, where i is the index (always iterated through sequentially) and v is the actual value (the same as tbl[i]). However k, v in pairs will also return two values, it will not guarantee any order of iteration, and k is just the key of that value returned as a string, and v is again the value (the same as tbl[k]).
Nice, adding this to my reading rotation. I noticed the other day when I was googling around for binding frameworks that there are a lot more of them when I last checked. It seems like there are a lot of more modern C++11 type frameworks. It would be nice to see an article comparing them. 
For example: styles = loadfile('cfg/tomorrow.lua')('Molokai') stylesoutshell = styles -- apply the same scheme to Output/Console windows styles.auxwindow = styles.text -- apply text colors to auxiliary windows styles.calltip = styles.text -- apply text colors to tooltips You need to put this in to your `user.lua` config file. https://github.com/pkulchenko/ZeroBraneStudio/blob/master/cfg/scheme-picker.lua http://studio.zerobrane.com/doc-styles-color-schemes
Maybe you could use **LuaJIT** with http://luajit.org/ext_ffi.html and write bindings to **C API**s if thats your thing.
I think you should keep asking here on reddit or on SO. As other's have already said, the people answering are mostly very knowledgable. You can also ask on the official Lua mailing list, but that's a bit more archaic than reddit or SO: http://www.lua.org/lua-l.html Since you seem into Löve2D you should also check out their forum: https://love2d.org/forums/
If you want a full-blown IDE then check out LDT (there's Löve2D code completion: https://love2d.org/forums/viewtopic.php?f=5&amp;t=79961), Lua Glider (http://www.mydevelopersgames.com/Glider/) or ZeroBraneStudio (http://studio.zerobrane.com/). If you want to stick with a text editor, then Sublime or Atom are both good, and with a linter plugin to validate your code they both go a long way.
You can do part of what you want using hererocks: https://github.com/mpeterv/hererocks It installs several versions of Lua (and LuaJIT) in whatever folder you tell it to, without putting anything "globally". The only thing missing, I think, is the 32bit-64bit version. As far as I know, it doesn't have an option for that. Maybe you can read the code and add it (it is Python) or make a feature request on the issues.
Thank you for taking the time to do that but I found a package that builds the program with a cmd. So thank you anyways!
No worries! Happy st3 user here.. :)
Not surprising, but we're talking about small fractions of a microsecond of overhead for the relevant operations (e.g. function calls). If that makes a difference, then Lua is the wrong choice to begin with. You should choose the version of Lua that has the features you want. To make a meaningful difference in performance, you'd want to switch to LuaJIT, which will completely demolish your benchmarks.
What about Lua 5.2? I heard it's faster than Lua 5.1?
I'm not saying it necessarily invalidates your benchmarks, but... are you aware that your a and b variables in fi() are global? Is this intentional? What is the reason for this?
On my machine: $ time lua5.1 test.lua real 0m1.684s user 0m1.683s sys 0m0.000s $ time lua5.3 test.lua real 0m1.128s user 0m1.120s sys 0m0.000s Without globals and using only integers: $ time lua5.1 test.lua real 0m1.139s user 0m1.137s sys 0m0.003s $ time lua5.3 test.lua real 0m0.768s user 0m0.760s sys 0m0.007s
Does coding in S-Lua significantly decrease development time? I'm struggling to understand the point of it.
There are many examples of macros in the wild as they are quite common in the Lisp world. I'll give an example, this S-Lua macro: (defmacro withOpenFile (var filename mode ...) (return `(do (local ,var (io.open ,filename ,mode)) (local (status err) (pcall (function () ,@{...}))) (io.close ,var) (if err (error err) (return status))))) Lets you write this: (withOpenFile f '/foo/bar' 'r' (readFrom f)) Which then gets compiled to: do local f = io.open('/foo/bar', 'r') local status, err = pcall(function () readFrom(f) end) io.close(f) if err then error(err) else return status end end *withOpenFile* allows you to execute statements in a lexical block where *var* is bound to the open file descriptor, and automatically ensures the file is closed before returning from the block.
Okay, but why not just write the code it compiles to initially?
Why do other language have macros?
But that's what functions are for. 
What's the difference between the macro and this code below? function withOpenFile(path, mode, func) local f = io.open(path, mode) local status, err = pcall(function() func(f) end) io.close(f) if err then error(err) else return status end end withOpenFile("/foo/bar", "r", readFrom)
What would the macro look like if it took two functions as args, each taking two args? What would it look like if it implemented this if/else or read line by line?
You can think of the macro above as a source code template. It fills the code you supply into some predefined slots. In this case that means that an if/else or multiple read operations would change the macro at all, those pieces of code would just be filled into the template at compile time and then it looks to the compiler as if you'd written the long version all along 
Why do you want to learn to program?
The [official Lua manuals](http://www.lua.org/manual/) are quite good, but if you want something more introductory then you'll want to check out [Programming in Lua](http://www.lua.org/pil/1.html). If you haven't already, you'll need to install Lua (or LuaJIT). You can [build it from source](http://www.lua.org/ftp/), although [if you're on Windows](http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies) you'll need mingw or cygwin installed to do so. You can probably find a (non-official) installer. Keep in mind Lua, while it is a really simple language and easy to learn, is often used used as an embedded programming language - most people are using it alongside their C/C++ code.
If you're already familiar with programming in general, just diving through the reference manual is the best way to go. It's only lacking guidance on style and idiom (since Lua doesn't really have a common style).
I disagree with the notion of equality to the “C macro preprocessor”. Its arguably false, or can you write C functions that change C macro behavior? There is indeed a distinction in syntax (S-Lua vs plain Lua) but the semantics are the same. E.g. S-Lua macros are idiomatic Lua in different clothing. Its Lua code generating Lua code inside a Lua VM. I see three ways to deal with the syntax distinction: 1. Accept that macro programming and invocation have distinct syntax. 2. Use S-expressions everywhere and compile the whole file with S-Lua. 3. Write a Lua reader that is the reverse of S-Lua's compiler, e.g. parse Lua as S-expressions. You'd still need a notation for quote/unquote/splice but I *think* its possible. 3 could actually be a fun experiment for another day. :-)
To follow up, and I'm sorry if this is a giant wall of text, but I hope that having some insight on how these tutorials are written will at least help you shape your own learning experience. Once upon a time, I wrote a series of tutorials on Lua. I had just learned the language and I thought it's time for me to do my part and leave my own experience for other beginners' sake. It was geared towards people who don't have a lot (but some) experience struggling with code. The layout is simple: I start off with a piece of code and we do a deep dive with it. Along the way, the hope is that your natural instinct to see and construct patterns out of random bits of information will drive the dynamic of the tutorial. I don't give semantics or specifications, I just give you examples. That's how I finally learned to learn, and I hoped that it could help others like me who struggled with "learning". Two tutorials in, I stopped writing. There's a few reasons for this 1. I got bored with writing prose versus writing code 2. I went to college and had more to worry about 3. I didn't think my tutorials were helping the people who needed the help the most. I eventually set out with a second suite of tutorials to help source more things for the first, but the outcome was more or less the same. I got great reception at the start, but when the hype was over and people who weren't experienced programmers began reading my stuff, I'd sooner or later start seeing the target audience come along and complain about how nothing makes sense. More and more emails flooded in about how they don't understand a particular bug or problem in their code. I'd go ahead and help them debug the issue, but they'd always write back thanking me for my time and acknowledging that while things "seems to work now," they still don't understand my train of thought. And so I gave up on tutorials altogether. It's not that they don't help you, but they're not magic bullets that we advertise them to be. There are a few hidden assumptions people make when they read titles like "Learn Lua in 8 Days or Less" or "Lua for Beginners" (not real titles by the way). 1. It's supposed to "teach" them Lua. 2. The more they read, the better grasp they have on a language. Let's tackle these two assumptions. 1. It's supposed to teach you Lua. First of all, there's likely a misalignment of expectation here. As a reader, what you expect to learn from a tutorial about Lua is typically a comprehensive "philosophy" of what it is to be a Lua developer. However, the author doesn't understand that. To him/her, the biggest problem that beginners face that they can reasonably tackle is a laundry list of common **technical** mistakes that she herself have had trouble with in the past. So what ends up happening is that the tutorial will spend a significant chunk explaining the laborious detail behind feature X of Lua (such as... tables or metatables, scary things that you as a beginner will never have to worry about until you're comfortable with the even more basic aspects). Unfortunately, this emphasis on the mundane gets interpreted by the novice as either a focus on detail orientation of writing scrupulously clean for loops or a general philosophy that to be a good Lua developer, you will have to concoct reasons to use metatables whenever you can (because that's what the "advanced section" means right? That's the holy grail of becoming a Lua developer; to master the "advanced section?"). 2. The more you read, the better of a grasp you have on the language. This is actually a fundamental assumption that people make about learning. What do you do the day before a big test? You read the textbook and then you reread your notes. No one in their right mind believes that cramming will confuse them more than it'll help them learn. However, this isn't always the case. Anyone who's ever ridden a bicycle can attest to this. You can learn as much as you want about the theory of biking, the psychology of bikers, and the social dynamic of triathletes. You're not going to understand how to bike anymore than if you'd put on a crown and declared yourself the best cycler in the world. Information isn't always directly transferable, and you'll have to put up some upfront work to convert the information you gain as a result of reading about it into actual experience. In fact, a lot of the times, you'll feel like you're losing information. A hallmark of learning to program is that the books and tutorials out there are rife with mistakes and contradictions. A seemingly benign and minor problem in the eyes of the author may in fact be an obsessive attempt to prove the impossible for the reader. It's never a good sign when a distrust of the credibility of the tutorials becomes a good predictor with respect to how proficient you are as a programmer. I guarantee you that you will eventually get to the point where you become convinced of fact A, only to be swayed to the other side of the fence by some "proof" of the contrary of fact B, and eventually find yourself settled in on (A + B)/2 a year down the line. Your grasp on a programming language is not a strictly increasing function of the number of hours you put into studying it, and this is typically where people begin to flee from the craft of programming. It violates a fundamental pillar of how people view the world around them. Information converges, but your handle of that information does not. You'll likely believe that this seeming regression or stagnation is unnatural, and hence only you out of everyone in the world is the recipient of this bad luck. This is one of the major forces that demotivates people. This is why I don't think that tutorials are a good way for beginners to learn about X. It's written by people with experiences in X and explains ideas in ways that people experienced in X will understand. However, it doesn't incorporate the mental struggles that people who start learning to program undergoes when they follow along your material. It's less about the technical exhibition than it is about the ability to motivate the reader, and that's where nearly every tutorial that I've ever read falls through on. None of them, mine included, acknowledges or sympathizes with the struggles that I had to go through to even get to that point in the article. They all treat learning as this linear hill and present materials in a linear fashion. However, they don't understand that at nearly every point in these tutorials, I had nearly consistently felt like a failure and wanted to quit. As readers and students, we rationalize it as a failure on our part to absorb the material properly, so we make note of whatever molehill we're making a mountain of and blame the tutorials for not explaining it to its fullest extent. The truth is: we're just afraid to actually go out and write some code. To be able to learn programming effectively, you need to have a strong enough motivator to keep you in line even when you want to quit. It could be something big or it could be something small, but in order to learn effectively, you need to have a goal to aim at. In school, the obvious goal that people aim for is good grades, which is why you see a bunch of students who are terrifyingly good at figuring out what 21 * 13 is but no one who's ever actually realistically needed to do 21 * 13 in their head. Their goals basically optimizes their learning experience to practicing calculations without ever needing to know that these are just tools and not the solutions. You have no grades or similar metrics to benchmark how well you've learned your first program. By all accounts, you'll likely start off like you would with any high school class: read the book, do a few problems, and take a test... That doesn't work after a day or two, and you'll soon see why. As a result, maintaining your motivation is such a crucial aspect of learning. Which is why I always ask people searching for resource recommendations to start their journeys as developers: "Why do you want to learn to program?" 
You can do “anything” with a function that you can do with a macro (a macro is just a function that returns code). The difference is that regular functions are run at *run-time* while macros run before *compile-time*. It's really not about *what* but rather about *when*. Examples of where functions won't do include domain specific languages and static optimization. As for your `withOpenFile` function: its function argument can not `return` from the outer lexical block, as far as I know? But that's really just a Lua specific detail.
Equality in a different sense then. I agree that it's significantly more difficult to program the behavior of the preprocessor macros, which necessitates the need of "first class macros" in the first place when that need exists. However, my main concern is that it seems arbitrary to use S-expressions as the quoting language. Why not Lua?
Also I hope I don't come off too strong, I think your project is extremely cool. It's just the choice of the frontend language that seems a little lost on me.
because in this case framework is more frequently used
There's also http://codecombat.com where you play an RPG game and learn how to program. You can control your character using Lua
In a nutshell: You need to operate on syntax *trees* in *some way*. S-expressions are one way of doing that, and the way I am most familiar with. Furthermore, S-expressions are easy to implement and use, I was even able to re-purpose existing code for parsing S-expressions. for ... do ... end (for (...) ...) These are really the same thing except that the latter is explicit about the tree structure and pleasantly regular. I can imagine replacing S-expressions with Lua-like notation: E.g. `(for ,x in ,y do ,@z end) instead of `(for (,x ,y) ,@z) Its really the same thing though. I don't think its smart to depart from the tree structure, e.g. each statement being a node made up of a sub-tree. So the internal representation will be the same no matter what (a tree) and I think some kind of syntax for building these trees will always look somewhat similar to S-expressions, but I agree that it might be cool to hide that as much as possible. E.g. keep everything Lua-esque and only add back-quoting syntax for building ASTs.
Ah yes, I agree that regularity in the structure of the tree is important if we want any uniform way of programming the AST. I worked on a Lua compiler hosted within Lua over the month of November as a side project. Ostensibly, it might be within reach to prototype a compilation of Lua "patterns" into S-expressions. https://github.com/leegao/LuaInLua Another idea that I've been toying about, which was in part the original motivation behind this train of questioning, is whether it would be worth it to construct a quote/unquote mechanism based on the idea of mix-fix operators. The idea is inspired by the flexible parsing mechanisms in languages like Coq and Agda. Essentially, you are free to refine the parser during the runtime by providing additional productions of the form _x_y_z_ where `_` are holes to be filled by expressions or statements (potentially other mix-fix instances) and `x,y,z` are nonterminals. If we can take this mix-fix mechanism and construct a full macro system out of it, then that would truly be something.
I just wanted something quick and dirty for a proof of concept application. Figured getting to grips with a module interface would take me about as long as it'd take me to implement it myself? Thanks, I'll take a look at those modules!
Yes, you can set up a deep inheritance chain this way. Though I discourage it personally, it's messy and can get slower the deeper the chain gets.
Doesn't math.random(5) return a number between 1 and 5? So really you want math.random(2,5) to get rid of the +1.
"math.random(4) + 1" is the same as "math.random(1,4) + 1" and that's the same as "math.random(2,5)".
Okay, thanks! Will do. 
Thanks!
No. "math.random(n)" returns "math.floor(math.random() * n + 1)"
Alright, here's a short exercise, how would you write down the rules for Pacman? There's no restrictions on the expressivity of the language you can use. I just want to gauge what kind of mentality you use to break down problems. One of the big sources of pain and confusion for people is the mental shift they have to take when they transition from solving problems in a "natural way" to specifying them with a prescribed philosophy.
Ahah, look like the actual "classes hater" didn't fail to downvote this! Well actually, I can understand them.
What about it? I don't know how the calculations were done, but Love2D is pretty easy to get started with (from a technical standpoint). The documentation is pretty good, and there are lots of tutorials online. I made a video tutorial series on it as well: https://www.youtube.com/watch?v=FUiz1kL0QtI&amp;index=1&amp;list=PLz-rYTT-2nItPbZaj8pt10h49HofbWVQT
I've been part of the Love2D community for about three years now. It's pretty good for rapid development.
Alright, here goes: In Pacman, you move in two dimentions. Your movement is restricted by "walls", that create pathways for you to go through. In these, you find tiny dots, and sometimes fruit. You have to go through them to get points. While you do this, you are chased by coloured "ghosts". You lose as soon as one of them catch up to you, but you can "eat" them as well. Although, only for a limited time after eating the fruit. Eating the ghosts also gives you points, if i remember correctly.
How did they do *what*? Post shit on the web? Record an animated GIF? Render lines on a screen? Do physics math? Which part specifically are asking about?
It's to clearly show where scope is. The error in Lua is not in the `local` declaration. It's in the existence of globals at all. First, the scoping. Were Lua variables local by default this code would be a problem: function foo(bar) baz = 17 return function() return bar * baz end end With "local by default" variables the use of `bar` and `baz` in the inner function are ambiguous. Do I mean to return the "closed-in" value of `bar` passed in to the outer function or do I mean to use a new local variable? Do I mean to use the closed-in value of `baz` defined in the outer function or do I mean to use a new local variable? With "local by default" I by definition mean the latter even though it's fairly clear that I want the former (since it's the only way that code would make any kind of sense). With Lua there is no such ambiguity. function foo(bar) local baz = 17 return function() return bar * baz end end The rules for scoping are clear and simple and tell me that the `baz` value will be 17 and the `bar` value will be whatever I passed in when calling `foo()`. I know this because the variables are explicitly declared local or as parameters. The real problem with Lua is, as I said, the existence of global variables at all. If I accidentally typed `bazz` in the inner function using **both** "local by default" and "global by default" we have a problem. With "local by default" I now have an empty variable (and a runtime error). With "global by default" I have whatever the global variable `bazz` happens to contain. It will be an error, but it may not even be a runtime error. It may instead be a source of an irritatingly subtle bug. Personally, were I responsible for making Lua 6, I would drop "global by default" *and* I would drop the `local` keyword. I would instead require that all variables be declared with a keyword (say `var`) that clearly locates the variable's scope. I'd provide some mechanism for supplying a "global" equivalent (perhaps a pre-supplied table that's automatically in the root scope at all times) but one where you have to explicitly define the fact you're using a global variable and one that you have to prefix in some way so that you can't accidentally use a global because of a typo.
&gt;With "local by default" variables the use of bar and baz in the inner function are ambiguous I don't see how. &gt; Do I mean to return the "closed-in" value of bar passed in to the outer function or do I mean to use a new local variable? Depends on the language you are using. Most languages use a local copy of the passed in variable unless you are specifying a pointer. But to use your example. Why is it even acceptable for you to declare the variable baz as a global? It seems to me that any variable you declare in a function should by default be local to that function. &gt;Personally, were I responsible for making Lua 6, I would drop "global by default" and I would drop the local keyword. I would instead require that all variables be declared with a keyword (say var) that clearly locates the variable's scope. Personally I would just have everything be local unless specified otherwise like a lot of other languages. I kind of like the ruby method of declaring them as bar, @bar, $bar etc. That seems pretty explicit. 
&gt;Most programming languages require you to declare locals, Most languages I know presume any variable declared (or assigned in dynamic ones) are local.
Show me the code. Write the code for `foo()` above in your "local by default" language. Show it. Explain how it does what `foo()` does while being "local by default".
Besides the fact that globals make a mess, access to local variables is faster (more performant), those are the reasons locals are preferred. However, having local by default would fuck up lexical scoping. Assuming you had an upvalue and you wanted to make a new local binding, you wouldn't be able do that without having a keyword to explicitly do so. You wouldn't be able to pick if you wanted to modify the upvalue or create a new local var. Have you seen people caching global variables into local variables? How would you be able to do that? The local keyword is necessary! Maybe we needed one for global too, so we would stop creating them by accident when assigning to a local variable with a typo... But the local still needs to be there :) Removing it would make a big mess!
Two reasons as far as I can tell you. 1. Lua doesn't have a way to distinguish between declaring a new variable, and an assigning to an old one, which makes the definition of "declaring a variable" a little tricky with the existing syntax and keywords. 2. The current "global by default, local when stated" is easy to understand for new users and non-programmers, even if it sometimes results in subtle bugs. Consider the following script: bar = 1 function update(currentTime) if currentTime &gt; 5 then bar = 2 end end In the context of a simple script in a game where `update(currentTime)` is called every second, and some value is read from `bar` to determine some game state, this little script is easy to read and understand, even for those very new to programming. Additionally you cannot simply infer that `bar = 2` should instead mean `local bar = 2` as this would change the meaning of the script, and that instance of `bar` would be a new variable local only to `update`! 
My way of understanding this is as follows: varname = value Assigns value to varname, in the innermost scope that varname is declared in, declaring it in the outermost (the global) scope if it isn't declared anywhere. local varname = value Declares varname in the current scope and assigns it. This is a) easy to understand and b) simple to implement. I've already implemented some example lamguage interpreters that utilize such a scoping mechanism. It just works well.
it's not *the* reason, it's another reason 
[Moonscript](https://github.com/leafo/moonscript), a language that compiles to Lua, has the "local-by-default". You have to explicitly say "export varname" so later in the file "varname = 50" refers to the global thing. There's a "local" keyword for local variables so you can avoid upvalue confusion if you intend to use the same variable name, but you'll barely ever have to use it if you structure your code properly. There's also a metatable we use at work that makes sure you don't access global nils by accident. This is the moonscript version: setmetatable(_G, { -- Emits a warning every time you assign a new global variable __newindex: (t, k, v) -&gt; print_warning("Key '#{k}' leaked into global scope!") rawset(t, k ,v) -- Emits a warning every time you try to get a non-assigned global variable __index: (t, k) -&gt; print_warning("Trying to get nil global variable '#{k}'!") return }) And this is the compiled lua: return setmetatable(_G, { __newindex = function(t, k, v) print_warning("Key '" .. tostring(k) .. "' leaked into global scope!") return rawset(t, k, v) end, __index = function(t, k) print_warning("Trying to get nil global variable '" .. tostring(k) .. "'!") end })
Not necessarily. MoonScript is awesome and has locals as defaults. If a variable is declared as a local in scopes, assignments will change those variables. In such situations you have to explicitly declare it as a local http://moonscript.org
We ran into some issues without them and overall it seemed to degrade readability. A matter of taste, I suppose.
That's cool but I don't like languages with significant whitespace. Just a personal preference.
&gt; What I am asking why global is the default and local has to be declared. Historical reasons, apparently. Lexical scope seems to have been included later in Lua's development. &gt; In most cases you will want to declare your variable as local so why not make that the default and require a "global" declaration? You see, that's exactly the kind of misunderstanding on your part (which should have been prevented by your knowledge of multiple different languages, but apparently wasn't) that I was talking about. Local is *not only* a default in Lua but it is the *only* choice for bindings that you have. Lua doesn't have `DECLARE` ... `SPECIAL` (as Lisp does), for example. It *only* has `local`. You're not actually declaring that a binding is local by using `local` but rather that a new binding is being introduced at all. Arguably, `let` might have been a better (less confusing for you?) option for the keyword in question, but the semantics is the same. `let` would have been your default (and only option) in that case; as things stand, `local` is your default (and only option, again). ("Global variables" aren't declared at all in Lua, they're simply fields in some ("privileged" but first-class) hash table that's being used whenever a symbol can't be resolved lexically. One might argue that they are being faked, unlike in other languages in which they have to be declared/bound.)
Thanks audiohijack! That is definitely something I should have verified, Digitronics was designed for *love 0.9.2*, so I can understand why you couldn't get it to work. I will specify that! Thanks! :-) A help menu would be a lot easier, because there are a lot of shortcuts, so I'll plan to add that!
Everything between the brackets are the function's arguments. In this case your function, named `test1`, takes one argument: `test2`. So if you want to write a function `sum` that returns the sum of two numbers, you could write it as function sum(a, b) return a+b end
I *did* show troublesome code. OP doesn't understand it and thus doesn't understand why it's troublesome. The first version of `foo()` in my reply *CANNOT WORK* with local by default. You'll need ugly and fragile (and confusing) upvalue declarations to make it work ... exactly like Lua 4.0 and Lua 3.2 had.
**&lt;sigh/&gt;** Let me go back to the first example of `foo()`. function foo(bar) baz = 17 return function() return bar * baz end end Look at the inner (anonymous) function. Note there that two variables are used: `bar` and `baz`. You are postulating that any variable referenced should be local unless specifically labelled as global. Thus `bar` and `baz` are both local. (This is, after all, what "local by default" means.) But local to what? Without explicit declaration of some kind, there is only one place the compiler can put a "local" definition without it being painfully complicated: in the immediate (lexical) scope it's in. Which would be within that inner (anonymous) function. The scope and extent of both variables is only within that inner function. That inner function returns the product of multiplying two variables which have not yet been given a value. In Lua terms they default to `nil` and you get a runtime error attempting to perform arithmetic on a `nil` value when you try to invoke the function. Why? Because the variables **aren't local**. They're up a layer of lexical context in the function `foo()`. (And their extent covers the lifetime of whatever variable the inner function is assigned to when `foo()` is called, if any.) So in a pure "local by default" language you can't have that code working. **By definition** `foo` and `bar` are going to be local to their lexical scope. That's what "local by default" means. If you want proper lexical scoping and proper closures, you can't have "local by default" in your language. Period. Unless, of course, you want ugly upvalue declarations like in pre-5.0 Lua or in Tcl (IIRC) or, for that matter, in Rexx with its `expose` instruction and its weirdness, especially surrounding stems. Now, just to be clear, since it's increasingly obvious that neither you nor the OP caught this, I'm not defending "global by default". Indeed I specifically said, and I quote: &gt; The error in Lua is not in the local declaration. It's in the existence of globals at all. I don't like "global by default". I'm just pointing out that "local by default" is even worse. The correct approach is no globals at all, or at the very least, if you simply MUST have them, explicitly declared globals, and *declared variables* to indicate scope for everything else. Now, here's a little exercise for you: find me a language with full lexical closures that *doesn't* have explicit declarations for variables, even in dynamically-typed languages. Scheme, for example, has `let` and `letrec`. Other languages have keywords like `var` or `val` or their ilk. There's a reason for this.
Looks like you posted this to /r/stepmania - that is the best place for you!
[Learn Lua in Y Minutes](http://learnxinyminutes.com/docs/lua/)
Search bar. There have been plenty of posts like this. I am not trying to be a jerk, but lots of good information is available from many people over a long period of time.
A warning: base64 is an *encoding*, NOT a form of *encryption*. Encryption hides the content of a message without access to a key. Encoding merely changes the representation of a thing: anyone, anywhere can de-encode it without any difficulty to see the original representation. It is not private, not secure, and not even a vague barrier. Sorry if this seems pedantic, but people in the rreal world have actually used base64 encoding to "conceal" credit card details on their servers, and obviously that's unacceptable. The myth/error that hex/base64/whatever is a form of *encryption* is unfortunately pervasive.
basexx supports base64 https://github.com/aiq/basexx