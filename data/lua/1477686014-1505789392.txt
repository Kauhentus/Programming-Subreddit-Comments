You need pre-emptive threads. Lua does not have that. So you need to write C code that sets up 2 threads, runs the lua script in one, and the C code in the other. Or you can have a Lua script call a C function that creates a new thread, injects some synchronization Lua functions into the Lua script, then runs the C code in the new thread.
Thanks a lot
Depends on the engine, usually there is atleast one way to accurately handle mouse input. That said, humans are not that fast, so in normal circumstances you can write a huge loop and it'll still be over sooner than the user manages to depress the button. If you want to be paranoid, save mouse state as soon as you can and use your saved copy instead of the real object while you're handling the event.
Start from line 479 where it says "Shape Building functions". The lines that say `function` at the start are the ones you want. To use them yourself, you'll need to use the bit after the word function, replacing the words inside the brackets with the numbers you want. Ie, you would take function drawLine(endX, endY, startX, startY) And use it like so drawLine (0,0,10,0) Which would draw a line starting at (0,0) and ending at (10,0)
I noticed that command has OS limitations, is that true? I don't want to be limited to a specific OS.
I'm calling C from Lua, I think I found a solution from other sources though (local TCP connection).
I can't get it to work on any platform. I've given up on it. It certainly doesn't rock.
explanation_test_coverage.txt ends like this: &gt;In this transformation, you may assume that no expression throws an exception, and hence things such as function calls do not split basic blocks. You should still &gt; &gt;Examples are given below: There is something missing.
I don't execute luarocks with an exe, I execute it with a bat. What does your luarocks installation folder look like?
It seems that you are using an old version of Luarocks (at most 2.1.0 judging by the error message). I suggest upgrading to a more recent version and reporting this issue at https://github.com/keplerproject/luarocks/issues if it persists.
I have got it working on Windows, Ubuntu and Mac. Don't hate on the software, it works. 
Yes
Try [newer version of luarocks](https://github.com/keplerproject/luarocks/wiki/Installation-instructions-for-Windows) one shipped with luadist looks old. (luadist: 2.0.10 current-stable: 2.4.1).
Well..... up to (but not including) 1 bit, I guess. Why not make it like this if you deal with a precision parameter anyway? function is_eq(a, b, p) return math.floor(a/p) == math.floor(b/p) end
https://en.wikipedia.org/wiki/Machine_epsilon, though it's important to keep in mind that there's no guarantee that two values that should be equivalent will be within this epsilon of direct approximation, as *any* imprecision arising from approximation will be accordingly propagated in multiplication or other manners of accumulation - that's just the nature of lossy operations. *Any* bit can be lost in rounding, if you round-trip its significance beyond the limits of representation. That's why you generally see arbitrary small values like .0001 being used for comparison epsilon in practice instead of a true machine epsilon (or even just an evenly-representable fraction like 1/16384): there's more noise that'll creep into your values than just the original rounding, but if you're avoiding any pathologically lossy operations, you can generally assume the deviation will be within a few thousandths or so. You might also find [this Stack Overflow Q&amp;A](http://stackoverflow.com/questions/2729637/does-epsilon-really-guarantees-anything-in-floating-point-computations) informative.
Thanks for the Wiki link, that is exactly what I meant And I just read in the Lua manual that Lua is following the IEEE754 standard Thanks thanks thanks
A graphical toolkit is a module which enables you to create a GUI(Graphical User Interface) instead of the "default" console one. Unless you use such a toolkit you will only be able to create applications which run in a console.
Scripts are usually: A) Plain-text, B) Interpreted not compiled. What are you scripting for?
There 2 simple ways to compile your script 1. With `luac` 2. Using `string.dump(loadfile("filename.lua"))` and write the result to new file.
For OP: Note that while you *can* compile Lua scripts using these methods, it is not recommended because compiled Lua scripts will ***not*** be compatible between different architectures and different versions of Lua.
Someone mentioned that scripts aren't usually compiled. This is vague and not really accurate. Some scripts get compiled, some don't. I use AHK for tons of stuff and I compile a lot of my work. Other things, like my main script on my system, are ran as source and are never compiled. It all depends on what you're using the code for and what language you're using (obviously LUA here). LUA isn't something you regularly compile. However, if you do need it compiled, you can use LUAC. It should be noted there's no speed benefit to doing so. &gt; Pre-compiling does not imply faster execution because in Lua chunks are always compiled into bytecodes before being executed. ... luac produces a single output file containing the bytecodes for all source files given. By default, the output file is named luac.out, but you can change this with the -o option. [Source](https://www.lua.org/manual/4.0/luac.html) Make sure you read [/u/auahdark's post](https://www.reddit.com/r/lua/comments/5brrig/compiling_scripts/d9qwfw6/) as it has some good info, too. Edit: And whoever is downvoting this dude, you're being a jerk. He's here trying to learn and isn't begging people for code. Remember, you were new at one point, too.
You were indeed using a very old version of LuaRocks, but the server was redirecting to an incorrect URL. I've fixed it: https://github.com/luarocks/luarocks-site/issues/93 Thanks
Thanks for your reply. Actually, I tried to write something similar to your script (my own is a little bit dumber)
Just that it is minimalist and feels a bit handier - I think. Having a smaller code that does the job right away rather than having both extra *meta data* and functionality going on, that thus lets you modify it further on based on your needs without needing to go through an extent code, is quite an improvement!
Cool! I will give it a look, thanks. I just ask mainly because we have so many class tools that are more or less the same and some are quite small.
Can you install libraries to be loaded? If so I'd recommend something like sqlite (maybe http://lua.sqlite.org/index.cgi/index but there are probably more implementations). If not you'll have to do something hackier like distribute your data over multiple flat files
Perhaps as long as it is something I can pack with the release of the addon. But I have always struggled with building these myself, I will see how I do. EDIT: Yeah I simply don't understand the build process well enough atm may make another post specifically for that tomorrow.
Yeah, SQLite is very useful &amp; lightweight.
*LuaSocket* has FTP support. http://w3.impa.br/~diego/software/luasocket/ftp.html
Make the module export a function instead of a table. You call that function with your ID and team affiliation. (Is this DRY^(1)? Shouldn't your player&amp;team coordinator already have a table telling you what team a player is on, so having only the player ID should be enough.) The module function returns a table with the appropriate access control in place. -- client local root = require[[my_table_sharing_module]](1, 'red') -- player 1 print(root.title) print(root.player.name) -- same as root[1].name print(root.team.secret_code) ^(^ 1: Don't repeat yourself.) 
Other than the shortcuts for "player" and "team" what I suggested remains. Clients call a function with their credentials and receive a proxy table that provides a view of the shared table that enforces access. The client proxy table forwards requests to the server with an access token and gets back a value or another proxy table or raises an error on access violation. If the client sets a key in the table to a non-proxy table it is created on the server. If the new value is a proxy table then the server knows to reference the existing table. Hard references are kept in a two-way mapping table. function new_table(T) local ref = #registry + 1 registry[ref] = T registry[T] = ref -- alternately, store the reference number in the metatable of T return ref,T end The proxies get a reference number for manipulating tables that live on the server. Looking up a key in a proxy table becomes the function call (something like) `server.gettable(token,ref,field)` The private information of token, reference, server address, etc. are kept in the metatable which is protected with `__metatable` so sneaky clients can't change their access tokens.
&gt; If the client sets a key in the table to a non-proxy table it is created on the server. If the new value is a proxy table then the server knows to reference the existing table. Hard references are kept in a two-way mapping table. This is something I haven't though about yet, thanks. The part I'm least sure about is how to actually keep track of permissions. It should be possible to change them dynamically; ideally permissions should be a part of the shared table, and it should be possible to let clients change them. I also need a sane way of determining permissions for every object in the table from a limited set determined by the server programmer. Seems like a problem for a metatable tree, but I haven't figured it out yet.
So... assuming that there exists a file called "myScript.lua" And inside the file there are things like... return { DataField1 = "This is a string" DataField2 = "This is a string" function getData(self) . . . end } You could do something like myObject = dofile("myScript.lua") myObject.getData() myObject.DataField1 = "Some New Data" If that is true, then how would you track something like this from the C++ back end? And how would you let C++ set up metatables? I guess I could hold references in the global table. I am not expecting Lua to garbage collect the objects anyways. The C++ program is just going to use them for extended logic and data.
I did not understand yet why you need to save the functions along with the data? can't they be kept separated? The rest would come from the C-API. I barely used it but I would guess you can do everything in C what you can do in Lua. Sorry that I can't help more.
You wrote you want to treat a Lua script like an object. I assumed a script is something with functionality. So it would contain functions too. But if you want to store only data then you just need a serializer.
Please give a whole program, as small as you can make it, that shows the problem. The line you wrote above is utter gibberish. According to it you print "GPU Name: ", then assign the global variable "choice" the value of the io.read function. (As in the function object, not the result of calling it.) For reference: Lua 5.3.2 Copyright (C) 1994-2015 Lua.org, PUC-Rio &gt; io.write("GPU Name: ") choice = io.read print(choice) GPU Name: function: 0x41d870 &gt; io.write("GPU Name: ") choice = io.read() print(choice) GPU Name: test test &gt;
I rushed this post, everything was spelled correctly and the syntax was correct it was just the way I was calling Lua in my command prompt, solved the problem by creating a new Lua file and executing it directly from the console rather than from a batch file.
Please post your complete code.
Just some info: Lua, C++, Python, Scheme, and Prolog are all programming languages. Python and Lua are both scripting languages, though Lua more exclusively so.
&gt; Commercially supported software with SLAs That is probably the biggest bullet. They will probably build some tools around it too. I guess we will see.
Impressive!
So when I first looked at this, coroutines were broken, and stayed broken for a long long time... They worked today...!!! yay!!! I've kinda wanted to port the entirety of opencomputer and openos to the web :D I'm not sure why... sounds like "fun"
Score: 638
PC Score: 756 * binarytrees: 7.003 s * scimark: 12.19 MFLOP * warm startup: 0.119 s LG G4 Score: 180 * binarytrees: 29.118 s * scimark: 3.11 MFLOP * warm up: 0.811 s Edit: Added my phone's benchmarks along with a breakdown of stats.
Nexus 6p: 228
install lua through your operating system's package manager or download it from lua.org as for learning I suggest the book Programming in Lua or just checking docs at lua.org
One of Moonshine's devs, Paul Cuthbertson, created starlight recently. I suggest checking it out! http://starlight.paulcuth.me.uk/
discussion on hacker news: https://news.ycombinator.com/item?id=13024666
I'm not sure. How am I suppose to check the library? It's on an jail broken app called Autotouch? 
From what I can tell by trial and error the Logitech software calls the OnEvent function every time one of the buttons on the mouse changes state. That would explain why the script that I posted originally does not work. For the above script to work the function has to be call continuously, put into a loop. The problem with that is I am not sure if that is even possible with the was the Logitech software works. 
Wouldn't it be more accurate? Because I was initially worried about Red being to general? What if there are different shades of Red in the same region?
Red is what you told it to be. If you need it to be different, tell it to be different. 
Thanks for the suggestion but the IsMouseButtonPressed function does not seem to work. For starters it will only work with buttons 1-5 on the mouse even though the mouse has 20 buttons total. To try and fix this issue I set the script to use mouse button 2, what I thought was middle click, but then the script does not do anything
I think you might need to take this question to a Logitech-specific forum instead of a Lua one then...
http://leafo.net/lapis/
http://sailorproject.org http://lua.space/webdev/the-best-lua-web-frameworks
IIRC this is what powers itch.io
Read the post; he wants something embeddable. To my knowledge this doesn't exist, which is too bad. I wish it did; not everyone wants to run everything inside nginx.
Maybe our definition of embeddable is different. How are the HTTP libraries out there not embeddable?
&gt; Lapis is a framework for building web applications using MoonScript or Lua that runs inside of a customized version of **Nginx called OpenResty**. &gt; OpenResty aims to run your server-side web app completely in the Nginx server It looks like not my option.
Thanks a lot! It worked now. So right now, from what I've seen, using "table.unpack(list[1])" actually retrieve the pixel found in the findColor and use it as the x &amp; y coordinate? How about this block? for i = 1, #color_search do local list = findColor(red_color, 1, color_search[i])
It has too many dependencies (and I don't have LuaRocks installed, also the Lua OpenSSL looks like conflicting with my embedded ones), but it might be suitable for me.
PC, Firefox 50 **Score: 1538** - bintrees: 3.891 - scimark: 24.03 - warm start: 0.038
/u/AuahDark check out http://turbolua.org
Looks like not compatible under Windows.
Is there an announcement for this, other than the existence of the github repo? I assume that this is just a mirror of the original (non-git) repo and it will not be accepting pull requests, right?
Welcome!
You can ask on Lua mailing list or on IRC channel. See the links on the right.
A match made on reddit!
If you want to try something practical with Lua, try looking at Löve2D.
Thanks, I'll check it out soon enough
I use Lua since approx. 2008 and I never needed any other language again. Lua can do anything for me and it is incredible fun to use. I hope you will feel the same. Good luck and have fun.
How is it too many dependencies? If you're embedding you won't be using luarocks anyway. 
9? - lpeg - cqueues - luaossl - openssl (indirect dependency, but you should be using the system one anyway) - fifo.lua - basexx - lpeg_patterns that's 7. openssl shouldn't count; and 3 are pure lua dependencies, so they're super simple to depend on. So there are only 3 dependencies to worry about: lpeg, cqueues and luaossl. If you were looking at other projects you'd need the same two pieces of functionality as cqueues and luaossl provide: a socket library and a TLS library; which might be e.g. luasocket and luasec. ==&gt; you're going to need *something* here.
There are several questions, which likely have more impact than the language selection. Is this a contracted "build a CMS and then be done" project, or is it a long-term position with future work? If the former, why Lua, since you will eventually need changes and fixes and you don't seem to have anyone on staff that would be able to assist? If the latter, than a small investment in "Hey, we will pay you to pick up Lua for a week" would help significantly. Also, is it remote or on site? Location will matter; if fully remote, you have a better chance of finding someone. You could also look into WeWorkRemotely, but it sounds like a very short contract and many people won't be interested. Regardless, good luck!
There are very few people doing Lua for the Web on the market. Traditionally Lua developers are more part-time C / C++ developers who work in the video game industry or with embedded software. The largest community using Lua for the Web is probably in China / Russia and, for a large part, non English speaking. This will probably evolve with things like OpenResty but it is how it is today. Lua is a very simple language, though, and for a project like yours I think it is more important to hire someone with experience building CMSs (and possibly with nginx) than someone who knows Lua itself.
Try announcing here? http://lua.space/jobs :) 
Why write one from scratch? Why Lua? Have you heard of sputnik? http://sputnik.freewisdom.org/
Is this for Corona SDK? You should have specified. First, some semantics. Why not replace ```local movecoinright, movecoinright = function()``` with ```local movecoinright = function()```? Same result, less verbose. Now to the part that confuses me: local params = coin { time = 3000, x = 250, y = 290, onComplete = movecoinleft } This would make sense if coin was a function that took a table as an input. Instead, coin is an object (table) and therefore your syntax is invalid and I'm not sure what you're trying to do.
Yes, its for Corona SDK I was following this video https://www.youtube.com/watch?v=L6DB1-U-IKE&amp;t=547s So I think I'm missing the code that make coin to be a function? (Around 1:32 in the video above , line 72-86) But I don't know what code should I write :'(
Now my code look like this: local movecoinright = function (obj) local params = { time = 3000, x = 250, y = 290, onComplete = movecoinleft } transition.to( coin, params ) end local movecoinleft = function (obj) local params = { time = 3000, x = 40, y = 290, onComplete = movecoinright } transition.to( coin, params ) end And no error information in Corona.
Try this, you'll at least know if the functions are being called: local movecoinright = function (obj) print("movecoinright") local params = { time = 3000, x = 250, y = 290, onComplete = movecoinleft } transition.to( coin, params ) end local movecoinleft = function (obj) print("movecoinright") local params = { time = 3000, x = 40, y = 290, onComplete = movecoinright } transition.to( coin, params ) end 
Nope. "movecoinright" doesn't shown on Corona Output screen
Alrighty. Can you show me the code that calls movecoinleft or movecoinright? You've defined them but I can't see them being called.
Try putting movecoinright() at the end of the file
Now the coin move right but never move back left
thank you!
Yes, there is a [love2D app.](https://play.google.com/store/apps/details?id=org.love2d.android&amp;hl=en) Basically a platform for your games.
This is the first release of FusionScript, an in-development programming language I've been tinkering with for a few months. Feel free to try it out, break it, and report bugs. If you're interested in more features, they'll definitely be considered.
What about Lwan? https://lwan.ws/
just double clicking it. It runs through gedit. Is there a better way? 
cool thanks, worked
Yes. It will be a lot of work, since you need to build the back-end too. Corona will make HTTP calls to the server and you will do a lot of database and authentication work to make it all happen.
The default compiler can compile to Lua source. Eventually I'm going to use a custom VM though.
This is just a busy-loop. It doesn't use inotify, nor does it even sleep(). Otherwise, the code is a bit weird: - Use of weird ternary function - `watcher` calls the callback immediately even if there is no change - Uses a module-wide local `last_modified` instead of return values - `last` variable isn't used How is this up to a second release?
You could just use LuaFileSystem in a loop until the size of a file changes.
Yeah... this module will cause either 100% disk usage or 100% CPU usage (depending on whether the OS caches the file modification time in RAM or not), and will prevent your program from being able to do anything else while it's running. This is a a terrible waste of resources. I would only use this if I needed something like this for a quick hacky script, and even then it would be less hassle do just write my own while loop.
ITT grey area games salesman at work
This is not really a lua question, it is a physics question and/or a debugging question. Consider simplifying your code, cutting out pieces one by one. Each piece that you can establish ISN'T part of the unexplained phenomenon (the bug) should be cut out, because it is obscuring the real phenomenon. Aim for 4 lines of code; then ask Box2D and/or LiquidFun and/or Corona about that minimized example.
Will do
You could use [Splash](https://splash.readthedocs.io/en/stable/)?
Looks very interesting! Does anyone know of anything similar (declarative graphics for VR) in any other languages?
I use rects instead of images. I don't have problems at all. ---------------------------------------------------------------------------------------- -- -- main.lua -- ---------------------------------------------------------------------------------------- display.setStatusBar( display.HiddenStatusBar ) -- Game goes here local physics = require ("physics") physics.start(true) physics.setGravity(0, 9.8) --physics.setDrawMode("debug") --Background image local bg = display.newRect(display.contentWidth/2, display.contentHeight/2, 120, 20) local objects = display.newRect(display.contentWidth/2, display.contentHeight/2, 50, 100) local border = display.newRect(display.contentWidth/2, display.contentHeight/2, 100, 50) local sections = display.newRect(160, 495, 160, 495) physics.addBody(objects, "static", { friction=1, bounce=0}) physics.addBody(border, "static") physics.addBody(sections, "static") --Puck dropper --Move Dropper local dropper = display.newRect(160, -40, 40, 40) local puck local function startDrag( event ) local t = event.target local phase = event.phase if "began" == phase then display.getCurrentStage():setFocus(t) t.isFocus = true t.x0 = event.x - t.x --event.target.bodyType = "kinematic" elseif t.isFocus then if "moved" == phase then t.x = event.x - t.x0 elseif "ended" == phase or "cancelled" == phase then display.getCurrentStage():setFocus(nil) t.isFocus = false if (not event.target.isPlatform) then --event.target.bodyType = "dynamic" end end end return true end --Spawn Puck local function spawnPuck(event) puck = display.newRect(0, 0, 40, 40) puck:setFillColor(0.2, 0.3, 0.3) physics.addBody( puck, "dynamic", { density=1, friction=1, bounce=0, radius=30 }) puck.x=dropper.x puck.y=dropper.y +150 --transition.to(puck, {y=80, time=700}) puck.myName="puck" end --Event listener dropper:addEventListener("touch", startDrag) dropper:addEventListener("tap", spawnPuck)
[](/3b) Which means it must be the clustering of the image that I'm using for my 'objects' that is causing all my problems. Thank you.
May be [this](https://coronalabs.com/resources/tutorials/physics-box2d/) will help you.
Why not LÖVER ?
I found this in a minute with Google. https://github.com/me2d13/luamacros/blob/master/src/uSendKeys.pas (Name:'NUM1'; VKey:VK_NUMPAD1),
Hey a little off topc but is there a keyboard that can do this? I really want a basic keyboard but with 10 or so Lua ran macro buttons at the top
Unfortunately, LÖVR doesn't work with Google Cardboard right now. I'm experimenting with adding WebVR support though, which in theory should make things work with Gear VR/Cardboard. Check back soon!
I didn't found the reason: why fusion_script were born?
Is there somewhere a person could go to answer basic questions like "What is FusionScript?" and "Why would someone want to use FusionScript instead of &lt;foo&gt;?"
Since Lua doesn't have any capabilities to manipulate the mouse by default, you're using a third-party API. In order to help you, we'll need to know more about what scripting environment you're using.
Ah it appears you are correct, the Brazilian keyboard has ';' there, the Portugese (Portugal) has '-', however. It's fitting for a legend to have small discrepancies though.
imagine a programmer who can't find '/'. I can't tbh
Same goes for Dutch keyboards.
Might as well stop using Lua entirely if one OOP aspect of a language is enough to make you turn away. I'm just trying to provide a tiny bit more of a base on what Lua has set up. 
k cool
this is not so specific to Lua. try this print("Hello\nWorld") this is the newline "character"
I mean something like if the player types something then it will go to a line
The thing you're looking for is called an "if" statement. If you haven't already, I suggest reading through "Learn Lua in 15 minutes": http://tylerneylon.com/a/learn-lua/ It's a quick way to learn basic syntax like this.
Okay, I will, thanks.
That's actually pretty cool.
Yes, newObj is what is being returned by calling `setmetatable`. However, if you simply returned newObj without calling `setmetatable`, you wouldn't be able to call the methods of the Dog "class". What `setmetatable` does is, obviously, setting the metatable of the first parameter to the second parameter. The metatable has various uses, one of which is catching non-existent properties when they are looked up. For example, when you try calling `mrDog:makeSound()`, Lua will notice that the `mrDog` object _doesn't have_ a `makeSound` property. It will then look at the [__index](http://www.lua.org/manual/5.3/manual.html#2.4) property and notice that the metatable _does_ have a `makeSound` property and return it. If you want to learn more about how metatables work, I recommend the Lua manual or [this tutorial on the Lua wiki](http://lua-users.org/wiki/MetamethodsTutorial), together with this [reference on metatable events](http://lua-users.org/wiki/MetatableEvents). - - - Note that Lua is not Object Oriented like a lot of other languages. Object Orientation in Lua is more like the prototype system in JavaScript than anything else though I don't think any other language really has the exact same system.
&gt; the function `setmetatable` returns the table. This is what I was looking for. Thank you. 
Lua is not object-oriented *at all*. Not like Java. Not like C++. Not like Javascript. Not like Common Lisp. Not like Perl. Not like Dylan. Not like Ruby. Not like Python. Not like Eiffel. Not like anything. Lua has no native object-orientation of any kind whatsoever. What Lua does is it provides you the primitive mechanisms you need to implement an object system if (for some God-forsaken reason) you should choose to do so. If you decide you want a Javascript-like OOP system, you make one. (It's about an afternoon's work if you're silly enough to make it from scratch.) If you decide you want a full-blown C++ or more system, well, that's a few days' work, but doable. And of course you can build any other object system you like from the insane (like CLOS) to the piddling, bringing in just the pieces of OOP that you think, for some misbegotten reason, you need.
Lua is all about being fast though, and the colon syntax has no overhead: obj:run() effectively becomes local __TEMP = obj __TEMP.run(__TEMP) Your way is going to cause a closure to be allocated every time you call a method, which will also increase the amount of objects that later need collecting by the GC. Furthermore, it is slower to load properties when `__index` is a function than when it is a table.
Hi, The link above seems to point to a particular revision. I don't know if it can be updated but here is the link to the latest version: [Lua 5.3 Bytecode Reference](https://github.com/dibyendumajumdar/ravi/blob/master/readthedocs/lua_bytecode_reference.rst)
It was deliberate and can't be edited. Using the branch link to the file may break in the future due to file renames, etc.
Yup, I saw. I don't have high hopes for that being completed anytime soon though.
I really question the utility of your last example: local function printHi(name) return "Hi" end a = printHi print(a) When you run it the output is: Hi Fine. But why did you create the function to allow the passing of the `name` variable? Why didn't you concatenate it? It looks like in the video you were going to try that (when you hit `+` but then deleted it). And then why assign the function to `a` and print that out? Maybe something like: local function printHi(name) local result = "Hi " .. name return result end print(printHi("mdc8890")) Which results in: Hi mdc8890 This example also separates the `return` command from the computation(s) done in the function which is handy for people learning Lua to observe. For extra fanciness: local function printHi(name) local result = "Hi " .. name return result end local user_name = "mdc8890" print(printHi(user_name)) For super extra fanciness: local function printHi(name) local result = "Hi " .. name return result end local user_name = "mdc8890" local my_cool_function = printHi(user_name) print(my_cool_function) 
I guess I completely forgot that part. Honestly, Lua is not as much as my strong suit as Python is. I haven't taken the time to be able to learn it like I have with Python. I need to spend some more time to learn and get involved with the language-useful for things like Leadwerks and CryEngine. Maybe set the print(printHi(naminput)) and use the io.write/io.read function to make it usable for a client. 
Thanks for these comments. It will help others who are unfamiliar (provided they look at the comments on the post).
&gt; Thanks for these comments. As per my username I'm a composer and not a programmer. It feels really weird and wrong my providing programming instructions to anyone. Ideally either OP or the mods will delete this video. (If a non-programmer provides the fixes then something is terribly, horribly wrong.)
First, I am learning. Second, calling someone mentally ill is just bad form. 
While your post contains a lot of valid criticism of the video, speculating about a person's mental state like you did is not appropriate behavior. Edit: re-instated. 
I didn't get to see the videos, they had already been removed. I *assumed* the videos were done by some newbie, and were awful in a more mundane fashion. While the world doesn't need people posting how-to videos for subjects they have a poor grasp of, we don't want to be *too* harsh to them either. That's what I thought was going on. Your post has been re-instated. 
Vim scripts use `"` for inducing comments. In old Windows batch files you can use `REM`, CSS has comments enclosed in `/*` and `*/`. Different language, different idea of what comments should be created with.
&gt; What is the specific problem you are trying to solve? It's for a game's modding system and I want the script (which is a mod) to set a variable to a different value when another script (another mod) is using dofile() to load it (which is allowed by the modding system). So there is no other thing I want to achieve with that - it's exactly that: I just want to detect if a script is called using dofile() and set a variable to another value.
You could always override the `dofile` function yourself via code. Something like this: local _real_dofile = dofile dofile = function (filename) CALLING_DOFILE_FROM_SCRIPT = true _real_dofile(filename) CALLING_DOFILE_FROM_SCRIPT = false end I think that's the easiest way to do what you want. You could also, if you want to do really advanced stuff, set the metatable of the environment table (the `_ENV` variable) to catch when the variable is read. That will probably slow down everything though.
The other code isn't mine. I can't alter the code that potentially loads the file nor the modding system. I can only try to passively detect if the script is loaded using dofile().
The mods are loaded individually one after another. A mod loading the script could run before my mod gets loaded. I just hope something like the technique behind Python's `if __name__ == "__main__":` exists in Lua.
How is a file loaded "normally" in your system?
Yeah, might be possible. I don't know how this C++ to Lua thing works.
I know that the debug table has some functionality to check which was the function that called that function. Or in other words to get caller of the caller of the caller and so on. I think this is configurable with some values like -1 and -2 and so on. Sorry don't have the time to test it and to report, but maybe it works. `debug.getinfo()`is the name I guess 
Wasn't aware of that. I'll try it, thanks.
How would that improve anything? It just checks if the current module is the one that was originally invoked by the process, right? What you want is impossible if you have no guarantee that the other code will run before yours.
Dude, wow! You should put this on HN. This is beyond amazing. Congratulations on the milestone! Edit: And your Lua is VERY clean too. I’d love to contribute to this but I am not much of a music person. Any way non-music-theory people can help out?
I'm a professionally trained musician (as in I went to music university) but I'm not an actual musician and I don't do anything with music for years now. But I'm a programmer and a regular at the Lua community and I have to say WOW THIS SEEMS AMAZING! I can't wait to fiddle with it during christmas break. Maybe I'll do some music again now :) I didn't look at the code yet, but I would love to contribute as well! May I ask what made you pick gitlab over github? 
Often [like this](https://www.lua.org/manual/5.3/manual.html#luaL_dofile). That macro loads the file given and pushes it on the stack as a function, then the function is executed via lua_pcall(). It is largely the same process as dofile.
It would be nice to have some examples on the site.
This is amazing! You should definitely post this on news.ycombinator.com. This sub doesn't get a lot of traffic unfortunately. 
Wow, that seems like a pretty hardcore site for my pretty modest efforts. One I get the online front-end up and running then I plan on really ~~spamming~~ promoting it everywhere. Also, thanks! I'm pretty proud of what I've accomplished so far and look forward every day to improving it.
&gt; Dude, wow! You should put this on HN Is that Hacker News? That place seem much more hardcore than what I've done so far. But since another person mentioned it I'll look into it. &gt; This is beyond amazing. Congratulations on the milestone! Thank you! Having everything (up to this point) basically working and usable documentation and an updated website felt really good. And the next version (six months?) will be even cooler! &gt; And your Lua is VERY clean too. Thank you! It's gotten soooooo much better the more I learn. I'm working really hard to develop a consistent and readable style so that others will have an easy time of using it and contributing. With much of the style I'm just winging it for now kind of feeling around to see what works best. At one point, for example, I took a hard line against anything even resembling a global variable but now I put some pseudo-global variables in a global table and I think I'm ok with it (and it makes using the code much easier). &gt; I’d love to contribute to this but I am not much of a music person. Any way non-music-theory people can help out? Heck yeah! As my name implies my training is in music and most definitely not programming. There's like literally a million things that real programmers could do to help out. Millions: I have no idea how to create an online front-end, I want to expand the command line interpreter, I'm sure my binary search algorithm is a horrible shitty mess of code that only works because I completely ignore it now (if it knew I was looking it would blow up my laptop), I'm concerned that my hash algorithms aren't up to snuff (though I trust the pcg-random code), you don't want to know how I "merged" the dev branch into the master (hint: I didn't actually merge it), and just so on and on and on and on! Literally every single aspect of project management is beyond me.
Thank you very much! If you do play with it please let me know how the installation went, how the tutorial was, etc. As best as I can tell I'm the only person to actually run it so far. Some people have looked at it but if anyone has actually tried to run it (and succeeded or not) is not something they've let me know. Also, once you get used to it it's a lot of fun! Changing parameters slightly to see how they affect the music and printing out several kinds of sheet music can be addicting. And I'm definitely looking for any help I can get. I made the beginnings of a partial list of *big* issues that I don't get in another comment. The list of smaller issues is even bigger. I'm really just flailing about and feel pretty fortunate that so much of it works so well. For instance, I spend way too much time on the typography of the documentation because, I don't know, I'm a composer sooooo ... art? As for gitlab over github that's an interesting question. When I first began the code was a huge horrible mess and pretty much every week it changed radically. So when I first put it up I wanted to keep the repository private as there would have been absolutely no use in letting someone else see it. At that time gitlab allowed for free private repositories with 5 contributors while github did not have free private repositories at all. So I went with gitlab. I understand now that github allows free private repositories but gitlab seems to work just fine so I don't see a need to change.
Yeah, I guess I just failed to find them, usually they're on the front page or one click away.
By the way, FusionScript 0.1.1 - just released - has fixed expressions for function calls. For example, print (x, (^ x 2) for x in 1::10) prints x and x squared. 
[removed]
AppNexus: [1](https://www.nginx.com/case-studies/appnexus-chooses-nginx-plus-to-enhance-its-real-time-bidding-platform/) [2](https://www.quora.com/What-is-the-technology-stack-of-ad-networks)
Adobe Photoshop Lightroom http://www.troygaul.com/LrExposedC4.html http://www.lua.org/wshop05/Hamburg.pdf
Look no further: https://sites.google.com/site/marbux/home/where-lua-is-used
One place to look is the Participants list for the previous Lua Workshops. The company affiliation is next to each person. It won't be comprehensive, but it may give a starting place for figuring out which organizations are using Lua (with some bias towards what year it is and what location the workshop is being hosted that year). This was this year's workshop link: https://www.lua.org/wshop16.html 
I think you can contact the maintainers of openresty, they did some survey before which may help you.
As far as I remember the rest is just discarded. If you want to return multiple values and not lose them you will need to use a table/object. Then you can overload operators using metatables. 
the multiple values will be assigned to multiple vars or can be sent to functions with multiple arguments for example. function get_two_values() return 2, 5 end print(get_two_values()) -- 2 5 local a, b = get_two_values() -- a = 2, b =5 However, if you use where only one value is required, like with operators, the first value will be used and rest will be discarded as it was already mentioned. print("Hello"..get_two_values()) -- Hello2
Or - implement it in C and expose it in a new module :)
It can be useful to remember that those operators (`+` and `..`) are just [functions that can be overridden with metatables](http://www.lua.org/manual/5.2/manual.html#2.4). And those functions only take `self` and one additional argument. When you call those operator functions with more than one argument, they will only access the first one!
Note that the fast inverse square root trick stopped being fast a long time ago, because [it's been implemented in hardware](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=rsqrt&amp;expand=4465). LuaJIT [makes use of that SSE instruction](http://repo.or.cz/luajit-2.0.git/blob/HEAD:/dynasm/dasm_x86.lua#l1302) in JIT-compiled code. 
At Facebook, we also use a fair bit of Lua within our applied ML team (via Torch, and a few infrastructural projects to make our Lua code more robust). I think the same can also be said of several other bigger companies that do not fit the traditional (pre-2012) profile of a Lua shop. Of course, this is dependent on the popularity of the Torch project.
X-Post from here: https://www.reddit.com/r/compsci/comments/5kivjl/lua_in_lua_a_selfhosting_compiler_that_can/ Original (archived) post in this subreddit from 6 months ago: https://www.reddit.com/r/lua/comments/4me5lo/wip_purelua_implementation_of_a_selfhosted_lua/
im gay
/u/possiblyquestionable appears to be the main developer. They may answer that.
Cool! How about plans to add support for LuaJIT and/or 5.1?
Lua 5.1/5.3 target would actually not be too much additional effort. There is a bit of organizational difference in the last couple of bytes in a function prototype, but that's more or less superficial for the most part, at least assuming that we keep the 5.2 source language. To cross-compile for 5.3 is mostly straightforward. To back-compile for 5.1, the biggest challenge is the consolidation of the globals table `_G` and the upvalues. However, it's relatively easy to check whether a particular upvalue is a free upvalue or not, so we can use this escape analysis to swap out upvalue opcodes with global opcodes. However, LuaJIT is an entirely different beast. The ABI it provides is completely different from those in the reference implementation, so everything in the compilation pipeline at and past the bytecode phase needs to be rewritten. The LuaJIT bitcode format is really elegant, and I've been meaning to take a closer look at it. In particular, it seems to be the epitome of what http://ssabook.gforge.inria.fr/latest/book.pdf is talking about when they mention the unreasonable effectiveness of Single Static Assignment form.
Good to know; thanks. Good luck with your project!
Github? Free private repositories? I have not seen that. Can you tell me where you read that? 
Writing a message to people who can't speak English, using English, Genius!
Merci !
Looking at previous years' list of participants will give you a good starting point. When it comes to game developers you'll find that Lua is used by many many companies, but the ones that are really interesting are IMHO the ones that make modding friendly games where Lua is exposed to allow modders to really customise the game experience. Blizzard and World of Warcraft is the most well known company and game that did this. Valve and the Source engine is another well known example of a good Lua integration. 
Perhaps add a French translation of the original post. 
[removed]
frexp and ldexp were deprecated in lua 5.3.
At first, what does `os.open` do in UnifiedRemote?
Any support for LuaJIT (or specialized Lua 5.1)? I'd like to rewrite game engine with Lua (using LOVE) but sadly the game files are in Lua 5.2, compiled into bytecode.
[removed]
[removed]
Okay, thank you. Looks like tables is way better for practical usage instead of that `newproxy`.
The Lua running on the NodeMCU is not a standard Lua with all the libraries. With the io library not present "io" is handled as a global variable. Use the "file" module detailed in the NodeMCU documentation : http://nodemcu.readthedocs.io/en/dev/ 
That's the problem the code for items isn't available or I would have been able to figure it out
Additionally, if you need some other libraries in the docs but they are nil in your nodeMCU, you can build an updated version of the firmware and even select which modules you want here: https://nodemcu-build.com/
I tried io.open [[C:\\Users\\NATHAN\\Documents\\Torrents]] and I get "Permission Denied 13"
That's totally true =] In Lua 5.1 or LuaJIT it's the only way to get a custom __gc from pure Lua (although you probably should use a custom userdata object from C if possible)
I haven't used any of these, but the wiki has some: https://love2d.org/wiki/Category:Libraries
Yea i saw them and found some more here as well. https://github.com/love2d-community/awesome-love2d#ui I just didn't know if anyone had any suggestions for a newb like me. I'm leaning toward CATUI from github since it seems simpler then most I've looked at to me. 
Solve it one step at a time. First: what error message do you get? (should be a syntax error).
You should really chat up the /r/love2d group!
LuaDec was the only other one that I had previously known about, but that was for Lua 5.0.
[removed]
I didn't know Binding of Isaac was scripted in Lua. Interesting.
It was also available for Lua 5.1 (and possibly 5.2 as well as 5.3)? My memory is a bit worked up so I can't tell if I sound dumb or not.
Yup, the upcoming DLC just brought with it Lua support by way of a modding API/tools. They're not yet polished, and sort of a mess, but...they're there!
The code should be: print("Type start to start:") while(true) do local line = io.read() if line == "start" then print("Starting...") break end end
&gt; The print function requires brackets. Actually you can omit those if there's only a single table or string argument. Which sometimes makes code nicer to look at. So this will also work: print "Type start to start:"
Ah, I suppose that's true. I think it's nicer to look at with the brackets, though :D
[Programming in Lua](https://www.lua.org/pil/) and the [Lua Wiki Tutorial](http://lua-users.org/wiki/TutorialDirectory) are my recommendations. Lua is a general-purpose programming language, so it can be used for any purpose which is my Lua is _also_ used to create games (and websites, etc.). The standard libraries (built-in functions) are very basic though, so you're going to need some kind of reference specific to your usage.
Do these rectangles rotate? If not, you just need a simple AABB (Axis Aligned Bounding Box) collision detection - try this one: https://love2d.org/wiki/BoundingBox.lua
Try kikito's [bump.lua](https://github.com/kikito/bump.lua). It was made with LÖVE in mind, but it'll work with anything that supports Lua 5.1-5.3. If you need more realistic collision, then maybe [HC](https://github.com/vrld/HC).
Yeah it needs to rotate that seems to be the problem, anything that I find that had rotation doesn't work in WoW
While I'm sure this is a wonderful framework, I'm pretty sure most game developers don't like all of their code in a human-readable form. That is, at the very least, the reason I don't really like to use LuaJIT.
:( I was hoping I'd find my team's project at least towards the bottom of the list. The Grid engine has 289 stars as of writing. https://github.com/Planimeter/grid-sdk
Is it written in Lua?
spam similar post on C https://np.reddit.com/r/c_language/comments/5o57ez/%D0%BCy_re%D0%B0l_stor%D1%83_about_s%D0%B5x/
You talk like a polandball
Uh mods?
[removed]
Petition to mod me because I would have dealt with this by now, upvotes to the right
it's a fantasy stock trading program called "fantasy stock traders" shift+1= buy 1000 shares ctrl+L= sell 500 shares ctrl+b= sell the rest at breakeven i'm waiting 1 second to allow the orders to go through
Operating system is windows 10
First off, you'll have to learn Lua. I suggest either the [Lua wiki tutorial](http://lua-users.org/wiki/TutorialDirectory) or [Programming in Lua](https://www.lua.org/pil/). However, this only teaches you the basics. It doesn't teach you how to use the programming tool you're trying to use. Unfortunately, [Luamacros](https://github.com/me2d13/luamacros) doesn't seem to have any documentation so I think you'd be better off asking for help on [the official forums](http://www.hidmacros.eu/forum/). 
Metatables provide a mechanism to customize the behavior of tables. For example the `__index` metamethod allows to tap into table indexing. _mt = {__index = function(key) return key .. '5' end} local o = {} print(o.a) --&gt; nil setmetatable(o, _mt) print(o.a) --&gt; 'a5' print(o.b) --&gt; 'b5' If you want to write OO code, you can instead set the `__index` meta field to a table, and Lua will look into that table if it doesn't find what it was looking for. _mt = {__index = {a = 'from mt', b = 'from mt'}} local o = {a = 'from o'} print(o.a) --&gt; 'from o' print(o.b) --&gt; nil setmetatable(o, _mt) print(o.a) --&gt; 'from o' print(o.b) --&gt; 'from mt' The other metamethods allow one to customize the behavior of tables with other operators. `__newindex` spies on the creation of _new_ keys, `__add` lets you customize how tables behave when used with the `+` operator, and so on.
You may find this useful: http://lua.space/general/intro-to-metatables
 I've seen a similar message by someone else on Reddit I believe this might be a virus, thus I'm reporting it.
Be careful to setup a sandbox environment before letting strangers run scripts. You really don't want to catch anything nasty.
[removed]
 Thank you ever so much.
[removed]
According to the Logitech Support page there is a software (Logitech Gaming Software) which can be used to program the lights. http://support.logitech.com/de_de/article/32967?product=a0qi00000069vEiAAI p.s. would have been nice if you would have mentioned what a g600 is
I would try googling around for some example scripts and come back with some actual Lua (not LUA) code. Or maybe give /r/Logitech a shot? (People often request help from /r/lua with Logitech/Gmod/WoW/etc. scripts, but there's usually a more specific place to ask.) I'm totally willing to help programming Lua, but not really up to researching Logitech's scripting API for you.
You set fin to false before printing it. It's always going to be false when you call "print (fin)". Try this block instead: if isup and fin then inf.place = fif(inf.place&gt;3,0,inf.place+1) print(inf.place) print (fin) fin = false end
I've used Lua for various tasks so far: * A multiplayer programming game: [infon](http://infon.dividuum.de/) * An [ZUI](https://en.wikipedia.org/wiki/Zooming_user_interface) for easy cleanup of massive amount of dirty data. Sorry no link, as that was an internal company project. * A browser &amp; geolocation based multiplayer gaming service. Like geocaching on steroids :-) [geolua](https://geolua.com) * A digital signage player/service for the Raspberry Pi: [info-beamer](https://info-beamer.com) I really like Lua. That said, I also really like python and I'd personally use python for extracting data from websites. Seems way easier to me. Lua for me is the perfect language to augment other tools and make them easily scriptable. So far I haven't used it outside of a program embedding it. But that's fine, I guess :-)
&gt; Lua for me is the perfect language to augment other tools and make them easily scriptable. I agree with this 100%. While Lua is perfectly capable of doing pretty much anything on its own, where it really shines is integrating with other stuff. Not just 'glue' code, but working with other things to extend them or create whole new things. BTW geolua looks awesome. Definitely going to play with this over the weekend. Documentation looks very good. 
lua can probably be used for huge amounts of different tasks, it has no REAL handicap (just the omission of convenience features found in other languages more specialized for a given task). The thing it is especially suited for though, is embedded scripting. the core libs for LUA are so small that they can be easily embedded into to tools to allow people to script them. 
[removed]
Very true. In fact, if fin is false, the print wouldn't even occur since it is inside the if's true clause. 
It's also important to know a bit about your language. For example, that function calls (into C, I believe) are relatively expensive expressions in Lua.
But if you're using luaJIT, the time you save by doing all that becomes negligible anyway ¯\\\_(ツ)\_/¯
I hope you use Lua for this!
But will she be globally accessible or will she be local? (You know, locals are faster than globals.)
&gt; But with such huge gains, it's worth it, right? I'd say that, just like most things, the answer is a solid "it depends". For most code, I think it's better to prefer readability and expression of intent over optimisation that likely won't matter. There's another saying that I think works better: "Make it work, make it right, and finally, make it fast." Basically, hack together a prototype, even if ugly; clean it up; and only *then* figure out where to optimise. Your `for i=1,#t` may be faster, but the problem, from an expression perspective, is that your code will be describing the steps you're performing rather than *what* you're doing and why. For a trivial example of what I mean, because anything non-trivial is too long for a reddit comment, let's say you want to take out the vowels of a bunch of strings. If you do this: local new_t = { } for i=1, #t do new_t[i] = string.gsub(t[i], '[aeiou]', '') end Your code is describing the steps taken, rather than the purpose. If, instead, you do this: local function disemvowel (s) return string.gsub(s, '[aeiou]', '') end map(disemvowel, t) Now you're showing what you're doing: disemvoweling every element of t. It's not much of a difference in something this trivial, but the point is that the code is more declarative, showing its *purpose* rather than the steps taken to achieve that purpose. Before anyone comments on it, I'm aware that map isn't a built-in part of lua, but that's another example of the point: `map` is a trivial thing to write, but usable for almost anything, so you create it once and reuse it forever instead of writing yet another `for i=1,#t do ... end` or `for i,v in ipairs(t) do ... end` that you have to read through every time you look at the code. If it turns out the program is too slow, *then* you find the bottlenecks and optimise them, trading in expressiveness for performance in only those places that require it. Like with the disemvoweling example, most of the performance hit comes from the `string.gsub`, not the choice of `map`, `ipairs`, or `for i=1,#t`, so that's where you'd focus on optimisation if needed.
But, hey, there's no harm in knowing that they exist
Perhaps look at https://github.com/ThePhD/sol2? It's designed to work great with C++.
My company uses a massive amount of Lua. Most drivers for our software are written in it. And I don't even know how to write Lua...
hmm, i'll look up some guides. Thanks
Which game is this? If you can load your own Lua files, maybe you can simply replace the modded function with your own (you can even call the original function and then do your own code).
To elaborate on this, if the functions you're replacing aren't local, you could create a separate file that has a function of the same name and *only* replace what you need instead of duplicating a bunch of stuff unnecessarily. This applies even if the game's using an OOP-style API: you can create your own `foo:bar` and replace the normal `foo:bar` with your own code. Furthermore, since functions are first-class in Lua, it's easy to save the existing one that you need to change to another variable and run it from within your own version, if needed. For example, let's say you're adding a new bit of interface to a game's UI, and there's an `updateUI()` function that triggers interface updates. Instead of copying the code all the time, you could do this: local realUpdateUI = updateUI function updateUI (arg) if realUpdateUI then realUpdateUI(arg) end -- Calls game's normal update function if it exists, passing args through. myCustomUpdateCode(args) -- Calls function to do your mod's updates end When done, it's no longer necessary to change your code with each update, because you're calling their code directly from yours instead. The big caveat here is you have to guarantee that your code loads *after* the other code or yours will get replaced. It should also be noted that, since you're game modding, this sort of approach is usually better than full file replacement when it's possible, because it can work with other mods, whereas wiping out a file completely and putting your own in won't play nicely with others also attempting to modify something in the same file. 
Well, judging by the commits on the [official repository](http://repo.or.cz/w/luajit-2.0.git) ([github mirror](https://github.com/LuaJIT/LuaJIT)), he still makes occasional fixes but not that much. 
Do community contributions regularly make it into the official releases?
Links to some pertinent /r/lua threads: * [Mike Pall stepping away](https://www.reddit.com/r/programming/comments/3gin5e/luajits_main_developer_is_retiring_and_is_looking/). * [CloudFlare setting up governance](https://www.reddit.com/r/lua/comments/3hfzx5/cloudflare_plans_for_luajit_governance/) * [When will LuaJIT support 5.3?](https://www.reddit.com/r/lua/comments/5i8lce/when_will_luajit_support_lua_53/) including an interesting note that a JIT is making it's way into Lua proper? Anyone have more info on Lua getting a JIT?
Stagnant. I would upgrade to the nice features in Lua 5.3 unless your project absolutely needs the improved performance.
[removed]
`luaL_register` is just a function that calls `lua_createtable` and `lua_setfield` internally. You could write it out yourself without any pain. However 5.3 has a function `luaL_setfuncs` which is the intended replacement function along with `luaL_newlib`.
There is also the official Lua Binaries project: http://luabinaries.sourceforge.net/download.html But really, it's not that hard for a student to compile Lua using something like https://github.com/Tieske/luawinmulti It will even become necessary if you intend to have them write C modules at some point.
that I dont know
Peter Cawley's JIT support for 64 bit GC mode did https://github.com/LuaJIT/LuaJIT/pull/149 
The distributions at LuaBinaries are very well put together, and the closest we have to official binaries: http://luabinaries.sourceforge.net/download.html There's no installer necessary, because the distribution is just two exes (the interpreter and the compiler), and a dll.
You're the best! I'll try this out when I get home. Thanks 
Well, sometimes there are several ways of doing the same thing in a language, and one is objectively better than the rest. All the examples you mentioned fall into that category in my opinion. I never, never use `ipairs` when I do Lua. And the only `table.*` function that I use regularly is table.concat, which has to do more with strings than with tables. In my mind the main use of ipairs is for functional programming, where you can pass an "iterator" function to another function to iterate over a collection in an array-like order. But it is not to be used in all cases. Table.insert is for very specific cases: you have an array-like table, and you want to insert elements to it via position, and you want to preserve certain order, and using table.sort from time to time is not an option. In practice, I have never needed to use a table in such an specific combination of constraints. 
To be honest I'm really embarassed on how I managed to miss lambdas not working. They did in my interpreter/testing env simply because of a bad hack that I've now fixed.
Another dating site. They seem to be getting smarter.
First, you probably want to allocate your sound only once in your setup function and store it in a global variable. Allocating the sound in your event loop is probably contributing to slowdown and delays. Second, once you allocate a source you have a clip you can stop, rewind, and play again when the key is pressed; just do: if love.keyboard.isDown("space") then sound:stop() sound:play() end More here: https://love2d.org/wiki/Tutorial:Audio https://love2d.org/wiki/Source
I like having a big project, like a game or something.. something I can work on whenever I have free time, something I can be proud of
Take a look at /r/love2d - lots of people there to help too! Glad you have your answer, though.
If you already have some form of programming experience, I would recommend just diving into a project of some kind, and just looking up how to do things along the way. You may need to spend a bit of time on the Lua wiki, or on PIL (https://www.lua.org/pil/contents.html) in order to learn syntax, but lua is very easy to understand, so shouldn't be hard to pick up.
Love2d jam out in two weeks
Heres a reddit scaper i wrote in lua http://github.com/rweichler/rjailbreak_scraper
great stuff, i will check that out if thats ok?? :) 
Hey thanks, this is a great reference. I've nearly finished my first LUA (Corona) game but I still constantly look up "the LUA way" after so many years learning and programming in C# and Java :\ I'm still like WTF LUA?!
Special price for you, my friend. Five dolla. Very good yes.
Things I've done: * LPRng printer backend * Selector/launcher for Squeak Smalltalk images which determines the appropriate VM to use * Automounter that provides specials feature for ROX-filer * Desktop file handling for generating dynamic menus for PekWM and fbpanel Things in progress: * MIDI routing and transform system for control of software synths and samplers * Slackware tagfile editor for creating custom Slackware installations I use LuaJIT for serious system scripting as I can easily glue on any C support I need, and the language is pretty cruft free.
I think that's what I like. I'd rather have a clean/small footprint language that makes adding "batteries" easy than a huge language with a lot of half baked one-size-fits-none stuff that doesn't quite do what I want. About the only thing I'd wish for is an s-expr syntax with everything an expression. *Why yes, I have done Scheme/Lisp commercially.*
1. It is possible. 2. The implementation will be quite similar. Have you tried to write some code already?
I have no real preference myself, but in this case I can't choose.
Well, all the base-N things mean one thing. You convert a number into base-N system. Usually we use base-10 system, meaning we use 10 digits and each position is just another power of 10. You can take a base-64 implementation and change the "digits" by removing the ones you don't need. That's it. 
My first contact with Lua was through the [LÖVE forums](https://love2d.org/forums/). If videogame programming interests you, I recommend them wholeheartedly. In addition to Programming in Lua, I think [Learn Lua in 15 minutes](http://tylerneylon.com/a/learn-lua/) is a good bite-sized introduction. Finally, there's also the [Lua Missions](https://github.com/kikito/lua_missions), if you are into programming-by-solving-tests (Disclaimer: I am the creator of Lua Missions).
[removed]
As /u/armornic said, `x and y or z` is a common Lua idiom to represent the same expression as the C ternary operator (returning `y` when `x` is truthy, and `z` when `x` is falsy). EDIT: [Assuming `y` and/or `z` won't be falsy, that is.](https://www.reddit.com/r/lua/comments/5t5yyu/z_x_and_x_or_y/ddkmcgf/?context=10000) Thanks for /u/edalcol for pointing out I'd missed this. This is because, in Lua (and many other scripting languages), the `and` operator returns whatever's on the *left* if that item is *falsy* (ie. if it's `false` or `nil`), and whatever's on the *right* otherwise (rather than just reducing it to a `true` or `false` value, the way C boolean operators return either `0` or `1`). `or` is similar, except returning the left value when the left value is *truthy* (anything *other than* `false` or `nil`). It sounds like whoever wrote the code you're looking at was doing some blunt direct-translation from a language where `and` and `or` don't work this way, without thinking about what they were writing; `x and x` in Lua will ever only evaluate to `x`, so said code could more straightforwardly be written `z = x or y` with no loss of functionality. Per the rules above, `z = x or y` means "set the value of `z` to the value of `x` if `x` is not `false` or `nil`; if `x` is `false` or `nil`, set `z` to the value of `y`". It's generally used when `x` may be `nil` (eg. an omitted argument to a function), as a way of providing a *default value* (`y`) to fall back to. (It's *also* frequently seen with the *value itself* on the left *and* right-hand sides of the `=`, as a way of saying "keep the value, but use something else if it's falsy".) For more about the design pattern of default values in Lua, see [this Stack Overflow question](http://stackoverflow.com/questions/6022519/define-default-values-for-function-arguments). As I noted there, you may see `x = y == nil and z or y` in some cases to provide a default value in situations where `y` should support a value of `false` - this is an example of a ternary operation that's *legitimately called for* - but usually, when you're seeing an assignment that references the same value twice, it's for `x = x or y`.
It's a shorter way of writing: if x then z = x else z = y end
The easiest way is to use tostring and then operate on the string using string.sub. You could also subtract anything that is higher. So 713289719 / 10^(9-3) = 713. 713289719 - 713 * 10^6 = 289719 EDIT: Forgot you'd need to figure out what the number's highest power of ten is. No idea how to do this other than a loop. This got ugly quick. I would really just go for the string solution even more so if you want to print the number later.
Logarithms are the number you raise a power to to get the number (a^b = c so loga(c) = b). Lua does logs in base e (natural logs), so you need to use the formula loga(x) = logb(x)/logb(a).
This is the only correct answer. There's no need to use strings when there's an operator designed for this exact purpose.
[removed]
That won't shuffle anything. It will make a new set with statistically half of the elements excluded. Do you actually want a new set with a different order? Order is only guaranteed for sequentially indexed tables. If you just want to select a random item, there are different ways to do that.
The profile is already deleted.
You should use io.popen instead; it allows you to write to the program like it were a file. 
You can try [wxlua](http://wxlua.sourceforge.net/)!
Can you give a few short instructions on how to install? It's really confusing
You can use [lgi](https://github.com/pavouk/lgi/) to create Gtk applications with Lua. There are some examples in the samples folder.
This. IUPLua is the greatest cross-platform native graphics toolkit I've ever worked with. Its widget and container model is simple and natural (largely like CSS Flexbox, if you've worked with web development), and there's virtually no boilerplate needed before writing serious, high-quality UIs.
There’s this FLTK binding for Lua. Easy to install and use, has a collection of examples, supports network events with the socket library, installs via luarocks. Works on Windows, Linux, OSX. https://github.com/siffiejoe/lua-fltk4lua
It is made at the computer science department of PUC-RIO... which Tecgraf is still closely involved with. In fact, CD, IM, and IUP are developed by Tecgraf/PUC-RIO.... the two are closely related.
I was just pointing out that saying that Tecgraf makes Lua is misleading. Tecgraf does use Lua a lot and they have many projects using it but they aren't really involved in developing the language.
Tecgraf doesn't manage Lua itself though. That is mostly on Roberto's hands now, with some help from Luiz and Waldemar. Trust me, I know this because I work at PUC. (Also notice how there aren't any Tecgraf logos on the lua.org page)
Both Tecgraf an IUP work closely together though. even still... and the original source of Lua absolutely was Tecgraf.
It's a floating point inaccuracy: [wiki](https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems). So, instead of rounding totsec, round your end result: totsec = love.timer.getTime() - start milliseconds = round( (totsec - math.floor(totsec)) * 1000 ) Or don't round at all and convert your number to string like this: ``string.format("%03d", milliseconds)``, it will drop a decimal part and add required leading zeros for you.
I'm using 5.1, as Love2d defaults at 5.1 (at this date). This does seem kinda wrong to me, I feel like this is either a precision issue (on my part) with math.floor or there is something wrong with lua (likely no). 
ya sadly, I really wish somebody would do the implementation for macOS. any volunteers?
Thanks for sharing
What I'd do is work on milliseconds only, chopping off unneeded precision with floor. Then divide by 1000 as a last step when you want seconds. 
[removed]
Nice feedback. Thank you
[removed]
This was good enough I think you should cross-post it to /r/programming
Neat, but SHA-1 is a [deprecated function](https://blog.qualys.com/ssllabs/2014/09/09/sha1-deprecation-what-you-need-to-know) with [demonstrable weaknesses](https://shattered.io/). Time to move to SHA-256.
During the cqueues loop, do not use the function `cq:loop`; instead, use the function `cq:step(0)` as it will step once through the sequence with a timeout of 0. There's probably better ways to do it to repeat the loop until there's nothing to run, as well.
Here's the important part of the solution: function window:on_show() local cq = cqueues.new() cq:wrap(function () while true do local txt, opc = ws:receive() if txt then textview.buffer.text = textview.buffer.text .. "\n" .. txt end end end) timer = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 1000, function() cq:step(0) return true end) end 
Well i have some coding understanding so i know that there is some sort of initial value missing but i dont know which or how to connect it to the script etc..
[removed]
¯\\\_(ツ)_/¯ There's only 22 collision groups. Grab yourself a test monkey and use lua_openscript in console to reload the script without restarting the map.
[removed]
Lua is not a very complicated language, so I don't think you'll have much problems learning it.
Thanks for the quick response. Do you have any site that you can recommend that are specially good, or I can of course just google it. 
Thanks. I'll take a look at the site as soon as I get home :)
I always recommend [Programming in Lua](https://www.lua.org/pil/) as the best way to learn Lua. If you've already got a good grasp of programming languages, though, you might be able to just use [the manual](https://www.lua.org/manual/5.3/) and [this Learn X in Y minutes overview](https://learnxinyminutes.com/docs/lua/).
It *is* pretty different from C#, but it's so simple that you should be able to learn it easily.
[removed]
Really, Programming in Lua is written for programmers. It's terrible or beginners, but the fastest way to get deep mastery of Lua if you already know a programming language.
You are calling the function, which is what the `(20,20)` means. If you want to delay that invocation, wrap the whole thing in another function: stage[1]["p"] = {{"x","&lt;",1095,0,600, function () nextlevel(20,20) end }} 
Oh, thanks!
&gt; Is it possible to put a function in a variable without the function calling by itself? It looks like what you want is is to wrap your table in an anonymous function, which lets you defer execution until the function is called later. stage[1]["p"] = function () return {{"x","&lt;",1095,0,600,nextlevel(20,20)}} end Doing it this way, you can then call `stage[1].p()` when you're ready for the code to evaluate. Variables assignment occurs immediately, but the function body is only executed when it's called, so `nextlevel` doesn't evaluate at assignment. It should be noted that there's nothing special about this, and it is, in fact, how normal function declaration happens under the hood. Functions are not special in Lua, they can be assigned to variables or passed as arguments to other functions just like a string or number. (The proper way to express this is to say that Lua has first-class functions.) So, when you do `function foo (x) print(x) end`, it's syntactic sugar for assigning an anonymous function to foo, like so: `foo = function (x) print(x) end` This is also true of object methods. An object in lua is just a table, and a method defined as `function obj:method (x)` is really a function in the `obj` table that implicitly passes `self`, and thus equivalent to declaring your function with `function obj.method (self, x)`, `obj.method = function(self, x)`, or even `obj["method"] = function (self, x)`. It's all just syntactic sugar over tables and first-class functions, and you can do more interesting things with the language once you understand it better. Edit: Just reloaded and saw /u/munificent's comment. That's doing the same thing but moving the anonymous function declaration inside the table, which looks like it's closer to what you need. My answer is focused more on explaining the concept so you understand *why* you need it.
[removed]
**Is there a document that describes what those numbers mean?** The code just seems to collect the serial data into one string. Then it splits the string. Different commands seem to have a different length so it decides what to do depending on the size of the received data arrays. It also seems to be reading and updating the GUI with the luup calls and logging it out. Also **zone_ID** is used a lot in the code but it is always read, never written so some stuff is missing. There is nothing hard about this code, just a bunch of number checks and GUI reads/writes. I guess **moonshine** won't help you here as the code isn't complete.
There is a document actually. They are listed here : - http://www.htd.com/site/ownersmanual/mca66_mc66_hex_codes.pdf - I am able to send commands just fine, already wrote some of the script that communicated via a websocket. - The issue I am having is trying to read the current state of things, such as volume or the channel that is currently set etc. - The part of the code I showed was strictly for reading the incoming data. The setting of stuff isn't shown nor necessary for what I am trying to do. I simply receive a string back when i "query" a zone and it returns hex. I am just trying to read those data points from the hex string. Lua was the only example I could find of this happening but I dont know the language to be able to determine what its doing to be able to read the data.
I got it. All I needed to do was be able to call a function when the character is past a certain area. The detection was is automatic. Thanks for all the replies, though!
httptables is a based on the OpenResty, kind of a firewall for http requests based on headers. It parses a set of rules for each HTTP header and apply the matching policy. Policy using Restful interface management, easy enough to integration with the third party system(User behavior analysis system).
[removed]
The biggest strength of 5.3, in my opinion, is basic built-in UTF-8 support. For now, it's only unicode escapes and a basic module with length functions, but it's a start. For me personally, I just like how easy mainline Lua is to build and integrate in my own build processes. LuaJIT requires you to build it exactly like they say you should. And Lua is never developed in the open since it's a private project (admittedly with an open license and publicly available). The source is easy to hack though so you can add your own customizations.
I began to use lua not that long ago, but honestly when I need a lib I just download it on the project folder and then I require it. At least for now I don't see any reason to use a package manager. 
Good point. The main benefit of something like LuaRocks is the discoverability of packages, though. How do you find what you need right now? 
Interesting. I guess I was looking here instead: https://www.lua.org/community.html Good info!
You've basically got a few sources to check out. I'm subscribed to the Lua users mailing list, I pick up lots of neat things from there. Google is surprisingly good at finding modules. I also search LuaRocks and OPM, and there's those "awesome" repos where people list modules. Like https://github.com/bungle/awesome-resty and https://github.com/LewisJEllis/awesome-lua I'm sure different communities have similar resources to check out 
I just google what I need. Maybe it's not the most efficient way to do it but it has been working pretty well for now. 
[removed]
Hey, this one has shown up a few times. Do you use it? Has it had any recent additions/changes? Last I knew it was hardly maintained (Late 2015/Early 2016)... It looks promising, but without active support you won't hit new targets: Console, VR, Web via Emscripten.
The git repository's last commit was last year it says so my guess would be no
Twitter suggests it's still sort of being worked on: https://twitter.com/ivansafrin/status/827994902977970176 /u/dowhatthouwilt was/is the lead dev.
Learn LUA and gLUA , it's not that complicated. We aren't here to do everything for you. 
Frameworks for building interactive applications are a dime a dozen. Someone is going to have very specific reasons for choosing this over the multitude of other systems that have already solved the problem.
I had this same issue. I fixed it by removing .LUA from PATHEXT. I'm not sure whether this change will inconvenience me in the future though.
As I say, this was written for an implementation of RFC 6455. As much as I'd love to use SHA-256, that's not my call, it's the IETF's, and I'm sure there'll be other applications where people are similarly constrained. However, I've added a warning to the repository's README, in case anyone coming across the project is unaware of the implications of doing so.
You can try [vclua](https://sourceforge.net/projects/vclua/). It uses the [LCL](https://en.wikipedia.org/wiki/Lazarus_Component_Library) from the [Lazarus IDE](http://www.lazarus-ide.org/) as its windowing toolkit. It is comes as a DLL created out of the LCL and if you are good with FPC and Lazarus you can extend it and fix it. Because Lazarus targets Qt4, Gtk2, Win32, Cocoa and Carbon (last two are not so well developed) it will be pretty cross platform too. The pace of development appears to have been slow in the past and the developer doesn't seem to use a public repository the last 6 months have seen more regular updates.
call the function in a while true do loop?
What Lua program? I don't see any program on that webpage.
I think it is a TI-Nspire™ document (.tns) generated from a lua file, if you don't have the original lua file you cannot edit it. There might be some online tool to convert tns file to lua, I am not sure though.
Thanks for this lead, will look into it further.
Sorry I put the wrong [link](http://www.filedropper.com/physicsmadeeasy) 
OK. That's definitely not a Lua program.
You'd need highly specific disassembler (specifically made for this single purpose) to turn this binary file into something that can be edited.
Could you explain further? Not quite understanding what you mean by a disassembler.
!RemindMe 1 day
Can't help now but I can tomorrow
I will be messaging you on [**2017-03-19 19:24:17 UTC**](http://www.wolframalpha.com/input/?i=2017-03-19 19:24:17 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/lua/comments/605l8y/oop_style_setup_in_a_single_table_need_help_with/df3ofm2) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/lua/comments/605l8y/oop_style_setup_in_a_single_table_need_help_with/df3ofm2]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! df3ofyu) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
A table literal can't be made to refer to itself (directly). On the `__index = Person`, `Person` would be referring to the *old* value of `Person` (which is `nil`). This is just like how `i = i + 1` increments `i` by referring to the *old* value of `i` on the right-hand-side (rather than the "new" value). ---- You could do a few things to get around this. The simplest is to build the metatable inside the constructor: New = function(_name, _gender) local obj = setmetatable({}, {__index = Person}) ...... This is OK since `Person` will be filled with this table by the time `Person.New` is called. If you have a lot of metamethods, this could get a little long, though. Or you could just use some kind of `class` factory that does this work for you. Lots of implementations out there exist already, but they basically look something like this: function class(definition) assert(type(definition) == "table", "class definition should be a table") assert(type(definition.init) == "function", "init() should be a method defined on the class definition") local metatable = {__index = definition} definition.New = function(...) local obj = setmetatable({}, metatable) obj:init(...) return obj end end ------- Person = class { init = function(self, name, gender) if name then self.name = name end if gender then self.gender = gender end ...... end, ...... } p1 = Person.New("Carlos", "male") As a general comment about object-oriented design... Usually constructors exist to prevent you from creating objects that are in bad states. Having a default "unknown" gender and "" name and 0 weight/height defeats the purpose of a constructor.
How do I find such a program? Does it even exist?
&gt; If you have a lot of metamethods, this could get a little long, though. Not just that, but the class will also make a new metatable for every new instance of the class. This is not optimal unless you want to be able to manipulate the metatable per-instance.
If your intention is to get the whole definition in one table expression, then __index can be the table of methods and common values. Nothing says that __index has to be a self reference. Person = { __index = { method = function(self) ... end }, New = function(_name, _gender) ... end, __tostring = function(ob) ... end, } A thing to note, the delegation chain for indexing between your metatables would go from __index table to __index table, so that means if you have Person derive from a class named Thing, then Person's __index table should have Thing as its metatable, or another table that has Thing's __index table as its own __index property. Person = { __index = setmetatable({ }, Thing) } 
So in this example, it would make more sense to put all metamethods as an anonymous table in the second parameter of setmetatable, including __index = Person, (because that will catch everything that's not a metamethod) and leave the first parameter as an empty table. Therefore every instance of the object is only being created with metamethods until something happens on the object in which it gets the rest of the fields and methods from the class definition. 
I'm as excited for WASM as anyone (I've already converted my asm.js projects to use WASM) but, really, you've already been able to do this for a couple years! The Lua VM has been ported to JS several times over. Consider [this hacker news comment](https://news.ycombinator.com/item?id=13900372) which has no fewer than 7 ports of the Lua VM into the browser! WASM is amazing and has tons of applications but the Lua VM is simple enough that the benefits from using WASM over an existing solution are not relevant and you lose a lot of compatibility on platforms that don't have a WASM implementation yet (all of mobile). In short, don't use this yet. Use one of the other Lua browser VMs.
Very nice. API/ABI compatibility between minor versions is very good design.
Here's another way of doing this: https://github.com/kikito/cron.lua "cron.lua are a set of functions for executing actions at a certain time interval." **Example:** local cron = require 'cron' local function printMessage() print('Hello') end -- the following calls are equivalent: local c1 = cron.after(5, printMessage) local c2 = cron.after(5, print, 'Hello') c1:update(2) -- will print nothing, the action is not done yet c1:update(5) -- will print 'Hello' once c1:reset() -- reset the counter to 0 -- prints 'hey' 5 times and then prints 'hello' while not c1:update(1) do print('hey') end -- Create a periodical clock: local c3 = cron.every(10, printMessage) c3:update(5) -- nothing (total time: 5) c3:update(4) -- nothing (total time: 9) c3:update(12) -- prints 'Hello' twice (total time is now 21) 
My problem with language pacific package managers is that my OS already has a package manager. It's the reinvention of the wheel. There has to be a better way.
Thanks, oops :)
/r/gmod or /r/gmodhelp may be better at answering this.
The ecosystem around Lua is fairly decentralised. The initial time investment to use it can be quite high, depending on your goals.
Correct, I have had issues with those binaries. I didn't do the survey, I'm just throwing ideas around. We do need a better system than LuaRocks though. It's been good enough but it's time to start over.
I have that issue too. I like working off a USB so everything is portable and getting a portable Lua for Windows working is a pain...
Again: **what issue?** Neither of you said. Lua is written in ANSI C, with no external dependencies. Are the "official" binaries built against a shared library? If they are statically linked, then what issue could you possibly have? o.O If they are linked against a DLL version of the C runtime, then you'd need to install that dependency, which would be a bad choice for portable distribution (i.e. USB). However, if you've ever built the libraries yourself, you could have statically linked the C library, then you've got a Lua binary that should run on every version of Windows ever. If you don't know how to build one, I could to it for you in about 30 seconds. But before jumping to conclusions, it would be helpful to know what your issues was. EDIT: Just inspected the Lua Binaries executables. Looks like they depend on a DLL version of the Visual C++ runtimes (MSVCRT.DLL). If you don't already have this installed (it's a very standard redist), then you'd need to install it before the binaries would run. Apparently I've always had it installed. If you build it yourself, just let it statically link the C libraries (in most compilers you have to add extra flags to link against the DLL libraries), and you're done, forever.
&gt; I love Lua but I don't love the ecosystem. The target audience for Lua is C and C++ developers, for whom none of this is an issue. The problem is that its use in games like WoW exposed it to a huge number of people, who learned it for that purpose and then wanted to use it as a standalone language. The support there is anemic, because it was never intended for that purpose. I just built a version [with no external dependencies](https://www.dropbox.com/s/6wkjfv6ttt3qk0b/Lua53.zip?dl=0). It takes literally 3 seconds to build on a modern machine, about 20 seconds to Google/download the source, and 10 more for me to `dir *.c | vim`, which wrote most of the build "script" into my editor for me: cl /O2 /FeLua53 /LD /DLUA_BUILD_AS_DLL lapi.c lauxlib.c lbaselib.c lbitlib.c lcode.c lcorolib.c lctype.c ldblib.c ldebug.c ldo.c ldump.c lfunc.c lgc.c linit.c liolib.c llex.c lmathlib.c lmem.c loadlib.c lobject.c lopcodes.c loslib.c lparser.c lstate.c lstring.c lstrlib.c ltable.c ltablib.c ltm.c lundump.c lutf8lib.c lvm.c lzio.c cl /O2 /FeLua53 lua.c Lua53.lib I used a compiler from 2003, because it was already in my PATH. It seriously doesn't matter, because Lua's code is so portable. It's just incredibly easy to build. *** For it's intended audience, the ecosystem is fucking fantastic. ‎Roberto Ierusalimschy‎ is an incredibly good writer (his writing rivals Brian Kernighan, which is amazing, given that English is Roberto's second language), so both the manual and book are works of great clarity and concision, and they're both targeted squarely at experienced programmers. Everything about the language from bug reports to new features is discussed at length on their well-moderated, technically minded mailing list, so you can engage Roberto in discussion about the language and help influence it directly in a way unavailable in most other languages. But you're right, as a stand-alone language Lua is a trainwreck. It's a pity they made no efforts to do better on that front. A lot of third party libraries were school projects that got abandoned. Of course, some of that was made up for by LuaJIT, which last I checked, was the fastest interpreted language on Earth, and had a built in binary interface for accessing external libraries directly. But again, that was targeted squarely at heavily technical users.
all of them actually. Mike Pall left. Dev work is sporadic. luajit is on 5.1 causing fragmentation.
&gt; ""It doesn't look like what I'm used to!" can generate powerful, irrational hate." A few years ago I would have called you crazy for this point, but actually after reading a few things on why Erlang didn't catch on, the weird syntax is always #1 or #2 on the list so yes you are absolutely correct.
&gt; The standard library is tiny, and so to do anything you have to ~~go searching through all the options of 3rd party libraries yourself~~ expose functionality in the host application To be fair to Lua, that's what it was designed for. Lua was created as an extension language, so all its "libraries" reside in the host application. This fact permeates their website, from the Welcome and Get Started pages, to the manual. For instance: ####lua.org/about.html &gt; "Lua is a powerful and fast programming language that is easy to learn and use and **to embed into your application** [..] Lua has been used in many industrial applications (e.g., Adobe's Photoshop Lightroom), with **an emphasis on embedded systems**" ####lua.org/start.html &gt; "Welcome! Lua is a powerful and fast programming language that is easy to learn and use and to **embed into your application. Lua is designed to be a lightweight embeddable scripting language**." The about page is all about its high profile embedded uses, about its speed, small size, and portable code. No mention of libraries. In fact, the standard libraries are all optional, easily left out by design. The only mention of Lua as a standalone language comes a small section of the manual describing the reference interpreter, but even there it mentions that Lua is designed to be embedded: &gt; "**Although Lua has been designed as an extension language, to be embedded in a host C program**, it is also frequently used as a standalone language." Lua as a standalone language was a rather distant afterthought, that came many years into its history and never got any attention from its authors. So as someone who's been using it since Lua 2, it's hard for me to think of that as "its ecosystem". Its ecosystem is centered around the extremely active mailing list, and the community of game/application devs there who use Lua for it's designed purpose. After games like WoW caused thousands of programmers to learn Lua (often as a first language), there was a spike of interest in using Lua for other things, but that was never "*the* Lua ecosystem". It's from *that* perspective that I found the comment "initial time investment to use can be quite high" to be confusing. There is no embedded scripting language I'm aware of where the initial time investment is *lower*. It's got a tiny, 100% ANSI C code base with no external dependencies, a butt simple extension API, and clear, concise documentation. You can add Lua scripting to support to an application in under 5 minutes, including the time it takes to download Lua. Compared to embedding Python, Ruby, Tcl, etc. it's no contest. 
It's very different from other languages. At the end of the day, that's what matters in most cases; people, by and large, do not want to learn something new. I've watched a team of engineers revolt at the prospect of using OCaml -- a language which is far more popular with the Internet than Lua. 
I'm shy about doing your homework for you, but in good faith I'll give you a major hint. It seems like this system converts your password into a number by multiplying each letter by a power of 42. The significance of 42 is that on an [ascii table](http://www.asciitable.com/), there's 42 characters between Zero and capital Z. Each character in your password is being used as a Coefficient in a polynormal of the form `A1*42^n + A2*42^n-1 + ... + An = X` where A is your password characters, n is the password length, and X is the challenge. Figure out the coefficients that solve this polynomial, and reference them on the ascii table to get the password.
I'm a little late here, but pebble got bought by Fitbit.
I saw :(
1. luajit being on 5.1 is causing the exact opposite of fragmentation. luajit is the lingua franca now. 2. [look at LuaJIT's commit history](https://github.com/LuaJIT/LuaJIT/commits/v2.1) and tell me again with a straight face that its dev work is sporadic.
No. Look into AutoHotKey.
There probably is actually, but it would go outside of the bounds of lua - interacting with a C script or something....
I totally agree, just thought your reply was funny. Car analogy: "Hey guys, is it possible to tow this boat with my motorcycle?" "No way." "Actually, there probably is a way if you have a truck."
Your post has been locked because your question is very vague. You will need to provide much more context to get effective help.
I was just pointing a direction to look, interacting with C seems like a logical step... *shrugs*
[Full code in case you need more information](https://pastebin.com/kNydwySS)
~~There is [absolutely no way to know](https://www.google.com/search?q=binding+of+isaac+lua+random&amp;oq=binding+of+isaac+lua+random).~~ It is basically [whatever the engine defined it as](https://moddingofisaac.com/docs/group___functions.html#gab0914b8a441bd429bdd637e6b31dfd7c). &gt; random integer `[0, 2^32)` * * * Sorry for the snark. Lua is a language that is used in so many different project that if there weren't the "Isaac.whatever" chunks in your sample code, there really would have been no way to know. Additionally, since there are so may embedded uses of Lua, it is important to search *that specific thing* with Lua. In your case, the name of the game, lua, then the function should give results. Otherwise, the community of the mod, or game, might be better help for the things defined by the games ;). One of the links google returned for me is [a post on their subreddit](https://www.reddit.com/r/themoddingofisaac/comments/5m0sgz/afterbirth_lua_modding_tutorial_is_here/). No mentions of random, but their subreddit will definitely know more about the game.
OH no i fucked up. thank you though
Thanks! The differences in APIs had never really occurred to me, and your explanation helped make it more clear to me. I'll take a look at that documentation you linked. Thank you again!
That was a greaf explaination
Cool, but the docs and examples are super cryptic. I understand this is pre-alpha, but you need to make it EASY to jump into so you can quickly get dev feedback. Looking forward to how this develops!
It's not possible with vanilla Lua, for starters. You'll have to do it with a third-party library or write the routines yourself in C. **However, you don't need threads to achieve this.** Whether you do it with a library like [ncurses](http://hughm.cs.ukzn.ac.za/~murrellh/os/notes/ncurses.html#input), or the [Windows console input](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684199.aspx) functions, you can usually poll input without blocking.
If you make sure you block a lot of the library, you should be okay. Watch out for the `package` and `debug` library. Bad bytecode can escape the VM in 5.1. We found [this article](https://blog.roblox.com/2012/08/bye-bye-bytecode/) and have now disabled bytecode in [Multi Theft Auto](http://mtasa.com). I don't know about 5.3. I wouldn't allow it anyway, if you don't allow bytecode you can always upgrade the Lua version whenever you want.
If you embed Lua, you can actually just not register the libraries in question. It _does_ mean you have to call [requiref](https://www.lua.org/manual/5.3/manual.html#luaL_requiref) on the modules you want to be available. **EDIT**: Oh, or you can add _every_ (wanted) module except base to the _PRELOAD table.
Bummer... Using ncurses with CLion is a major pain in the ass because the embedded console used by all Jetbrain's IDEs can't handle it and there is no way easily to open your program in a real terminal.
That's fascinating! Where is the compiled code able to run? Lua 5.1? 5.2? 5.3? LuaJIT?
It's well documented in the sense that anything defined with Urn has a docstring that gets used to auto-generate documentation (props to the creator for that. It even takes markdown in the docstrings!), but it's also missing documentation on basic things like the Lua-created builtins (e.g. `set!`, `define`, `cond`) that are fundamental to the language and have unclear usage. For example, some of the generated documentation shows brackets used in some places, so does the built-in `lambda` get called as `(lambda (x) x)`, `(lambda [x] x)`, or are they equivalent? It's not documented so the only option is trial-and-error. There's also very little information on the language itself. Off the top of my head, I thought of [these questions](https://www.reddit.com/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzvczp/) and I'm sure others could think of more. 
&gt; This is covered in the tutorial; it uses the Scheme/Racket style of allowing flexibility for the user to decide which is clearer. I see. I had to go through the tutorial a second time to even find it because I missed it first time through. It's sort of randomly thrown into the page about making a guessing game. &gt; Lisp-2 is so backwards and archaic I think it's safe to assume no one creating a new language nowadays would make the same mistake. I really dislike lisp-2 design and agree, but some people do prefer it, so it's not guaranteed. Especially with the other similarities to CL, which could lead people to assume it's going to act similarly. I ended up cloning the repo to grep through it (I was trying to find where `.&lt;!` was defined because github's search wasn't cutting it) so I fired up the REPL and tested, and yeah, it *is* lisp-1. Still should be mentioned somewhere, though; these are the kind of basic things one should be able to find out before downloading. &gt; It contains support for LuaJIT, but it appears to be optional Saw that, and I tested it with 5.2 and luajit after commenting, but it'd be nice if it actually stated what it supports so people would know what to expect. That's what I meant about it missing a lot of basic information. Most of those questions can be answered either by diving into the source or doing some REPL testing, but they're also the type of simple questions that would make sense either compiled into some kind of FAQ or a more comprehensive language introduction/README &gt; It seems to output valid Lua source which depends on the presence of the Urn "standard library" Damn. That's usually how it goes so I'm not surprised, but I can't help but be a little disappointed. I don't use Lua much except when it's embedded into something else, so any Lua transpiler that doesn't generate standalone files doesn't help me much :/ I keep tossing around the idea of making something like that myself, but I use Lua so sporadically that I never actually go anywhere with it. 
&gt; &gt; It seems to output valid Lua source which depends on the presence of the Urn "standard library" While /u/technomancy did a good job with the other answers, he got this one wrong. The compiler includes `(import)`ed modules in the output and then aggressively erases unused symbols. For reference, while compiling pure Lisp programs, it does not emit a single invocation of `require`. Edit: apparently I don't know my own language well enough.
This may be completely stupid question but: Is there something as "eval" in Urn? I.e. can I easily write an Urn program that loads Lisp expressions from stdio or file and evaluates them (after maybe modifying them somehow)? Or an Urn program that dynamically generates Lisp code and then runs it?
Not _presently_. We're still pondering the addition of `eval` (and similar facilities, such as `read`) as it would entail either including the entire compiler (which is _huge_) or implementing a simple tree evaluator (which would read to horrible performance). Side note, but you can import bits of the parser to use `read` (just `(import urn/parser (read))`). This is currently what the REPL does to allow (to some extent) theming.
That's cool. I looked at an output file and I see what you did: you're putting anything imported into a `_libs` table within the file and calling from that so that it's self-contained. This might be the sort of thing I've been wanting after all. Especially since it looks like you can use `define-native` to declare Lua symbols so they won't break compilation. It looks like I could `define-symbol` any necessary API calls, compile the file, and then use it with the embedded Lua (such as in a game mod)
Thanks for the answers! Like I said above, it looks like a nice project, and I'm going to keep an eye on it as an alternative to using Lua directly when I need it. Not something I need often, but when I do I tend to regret not having macros and some other niceties I get when using Clojure or Racket, so this could very well hit that sweet spot for me. &gt; &gt; Is there any special syntax for Lua tables, like how Clojure uses {key value} for maps? &gt; Currently, not. You can either use (struct key value key value) or (const-struct key value key value) (if the "shape" is statically known.) I had an idea that might work for it. Instead of having `{}` be interchangeable along with `[]` and `()`, maybe you could have only `[]` and `()` be interchangeable, and dedicate `{}` to being literal syntax for Lua tables, akin to Clojure's reader syntax for hash-maps. It would be familiar to Lua users that way, *and* be similar to Clojure's map literals as well. There's no need for something like Clojure's vector literals since Lua 'arrays' are still just tables, so it could be a nice middle-ground between Racket's free-form style and Clojure's dedicated use. I doubt losing it as a parentheses equivalent would hurt much, since everyone seems to mostly use `[]` or `()`. If this doesn't sound like a completely insane idea that will never happen, I can add it as a feature request on the github issue tracker. 
We were debating this. I'd appreciate if you could report an issue, but on [Gitlab](https://gitlab.com/urn/urn) instead. Thanks!
Thanks for the clarification! I didn't mean to say that it would necessarily bring in additional files, just that typically in situations like this, the functions which your code compiles down to depend to some degree on existing built-ins. But if you've found a way to collapse all that down into a single file with tree-shaking that's very cool and beyond what I would have expected for such a young language.
[Done](https://gitlab.com/urn/urn/issues/20). Going to add a couple more things I thought of later, but I have to run out for a bit. 
Neat! I was looking for something just like this a couple of weeks ago. ----- That said, I have one question. Why go with `bp.ls('-lh')` instead of `bp('ls', '-lh')` ? I think it is a bit confusing that `bp.ls` is a system command and `bp.fork` is a library call, despite the syntax being super close.
That looks similar to what I've once created: https://github.com/cuberite/WorldEdit/blob/master/Classes/Expression.lua 
Yup, works now. In order to use `ls` with the argument `-lh` you may choose from the following alternatives: - `bp.cmd('ls', '-la')` - `bp.ls('-la')` - `bp.ls'-la'` - `bp('ls', '-la')` Lua rocks
Cool! I tried doing almost exactly this a while ago, but I just couldn't get reasonable performance out of it, gratz on managing it!
Use a while loop. Playing=false While true do If buttonpressed then playing=true If buttonreleased then playing=false If playing then macro() End Please excuse the lack of formatting. I am on mobile. 
while true do function OnEvent(event, arg, family) if event == "MOUSE_BUTTON_PRESSED" and arg == 8 then PlayMacro("3rf deneme") elseif event == "MOUSE_BUTTON_RELEASED" and arg == 8 then AbortMacro() end end end Im tried to do it this way but it didn't work. I dont know how to do it. Can you do it for me if i can ask, please? 
Yes, you create the local variable named "_GET" (although usually local names are lower case) which contains an empty table. But please, try to communicate in English.
Please help me :(
Hmm, those libraries are dependencies of GCC, if I'm not mistaken, not lua. So it seems to me like you probably don't have a working GCC? For what purpose do you want lua -- to write lua code, or because you want to embed it into a C/C++ application? If the latter is the case, you will need to get a version of GCC working regardless, as you won't be able to compile your program otherwise. If the former, you really don't need to compile lua yourself. Either way, you can try out STLs GCC port for windows; https://nuwen.net/mingw.html maybe you'll have better luck with that. You can also alternatively use a different compiler like clang or msvc.
Yes, if you're just going to write lua-code, there is pretty much no reason to compile your own lua binary, the precompiled one will work fine. You can try to compile a hello-world program or somesuch to check whether gcc is the thing that's failling.
It's normal to have a few different versions of Lua installed concurrently. LuaJIT is good for speed but it's a few minor versions behind which can be annoying when looking for compatible packages. I've used Löve and I love it, definitely recommend. I can point you to my "getting started" video series if you want. I hear good things about the other two too, I just haven't used them.
Hi, ### Formatting first of all, when you paste code in your reddit comment, it is important to prefix each lines with four spaces so it renders as such: line1 line2 Otherwise, even with newlines, it will render as such line1 line2 Following, your source with formatting * * * -- server listens on 80, if data received, print data to console and send "hello world" back to caller -- 30s time out for a inactive client sv = net.createServer(net.TCP, 30) function receiver(sck, data) print(data) sck:close() end if sv then sv:listen(80, function(conn) conn:on("receive", receiver) conn:send("hello world") end) end * * * ### Answer I am responding with basic programming and lua knowledge and no specific to nodemcu knowledge, as I have not used it. I will be assuming that you have found the documentation and is using the documentation. The [`net.server:listen()`](https://nodemcu.readthedocs.io/en/master/en/modules/net/#netserverlisten) function is defined as taking an optional port, an optional IP address and a function. This function is a callback that nodemcu will call when the connection is successful. (#1) This means that for your `function(conn) [...] end` bit, the `conn` name is arbitrary. It is the [`net.socket`](https://nodemcu.readthedocs.io/en/master/en/modules/net/#netsocket-module) instance that was created by the connection. You should be able to call any of the functions defined in the `net.socket` module on the conn object. (#2) You can see that there is `:on` function for `net.socket`. (#3) As receive is a string, it is arbitrary, but as it is given as a parameter *it might have some significance. Looking at the documentation for `net.socket:on`, the first parameter: &gt; `event` *string*, which can be "connection", "reconnection", "disconnection", "receive" or "sent" This means that it will call the function given as the second argument when the "receive" event happens. If you were to give it anything not in the list, it would either do nothing or throw an error. This depends on how this was made. For (#4), it is like (#2), `net.socket` has a `:send` function with parameters. I do not know what *code-reference* you were using, but please add link to any reference used when asking a question, as it might help knowing what knowledge is currently known. I think that the issues you are having a part not knowing lua well (it is a tricky language when known superficially, and when compared to other languages) and part not knowing where to find the documentation for the project. Sadly, I do not know any good resources to learn *specifically lua* neither do I know nay good to learn *nodemcu*. Look at the sidebar → at the right, it has some links, I'm betting some of them are wonderful to understand the lua language. Once you know how lua works, this will be much more easier to understand why there are colons (:) at some places and not at other places, and why they are passing around strings and functions. If you don't know how lua tables work and what metatables are, it is going to feel like you're working in the dark, trying to flip switches until you achieve your wanted result. If you know lua, the lights will be on and you'll know what the switches are doing. Hope this helps. Hope I didn't sound too condescending or arrogant, it wasn't my intention. * * * ### Extra bit You have to understand that with lua, if simplified, functions are values just like strings and numbers. This means that they can be stored in variables and passed around. #### Functions as values example As an example local my_pow = function(number) return number * number end This is creating a function that returns the power of a number, and it is in a local variable. local use_function_with_two = function(a_func) return a_func(2) end As a contrived example, this other function uses a function as parameter, you give it a function as a parameter, and it will call it with 2 as a parameter. local result = use_function_with_two(my_pow) This would use the contrived example function to put `4` into `result`.
I am developing a new SDK called Blurrr, which might be of interest you. It supports Raspberry Pi 2+ (Raspbian) and comes with Lua 5.3. It is a self-contained download so it doesn't interfere with any of your packages. https://blurrrsdk.com It isn't an IDE, but an SDK so it comes with a bunch of libraries (e.g. SDL and family). Corona and LOVE are SDK's too and not IDEs. Corona also does not support Raspberry Pi as far as I know. (I was the Chief Architect at Corona awhile back.) 
A few missing line breaks, a mistyped variable (`have` instead of `have_key`), and a missing `end` at the very end. Also, instead of writing `x == true` or `y == false` you can just do `x` or `not y`. print("Welcome to the game.") input = "" while input ~= "leave cave" do print("What do you want to do?") input = io.read() if input == "inspect" then print("You are in a cave.") end if input == "leave cave" then print("You leave the cave.") end end input = "" while input ~= "follow the path" do print("What do you want to do?") input = io.read() if input == "inspect" then print("You are at the base of a hill. There's a path.") end if input == "follow path" then print("You follow the path.") end end input = "" have_key = false while not (have_key and input == "open gate") do print("What do you want to do?") input = io.read() if input == "inspect" then print("There is a gate. A key is hidden in the grass.") end if input == "grab key" then have_key = true print("You grabbed the key.") end if input == "open gate" then if have_key then print("You've escaped") end if not have_key then print("The gate is locked.") end end end
Maybe, but I can't imagine it would be easy or efficient. Java is probably the best language for Android development. Lua is meant to be an extension language as far as I know.
Ahh this looks pretty good! I have the Pi 3 B, I believe, so I should be fine there. Sounds fairly "batteries included", which is a nice convenience. I'll be sure to use Blurrr :)
https://www.youtube.com/playlist?list=PLyOxRuUjMSg5OJpKTDvWOsez4rDucGuu_
Dude. You asked the same question a couple of days ago. It was answered. What's your deal?
It is but it didnt work
You should have acknowledged this in the previous thread. Or at least mentioned it in this one.
In the Lua *script* you don't use the C API. 
You probably should provide more information than just the title when trying to attract interest in your project.
The problem is that where I live I am unable to buy the book. So, I am relaying on the examples i find on the internet.
You could easily do that with a coroutine. local rand = coroutine.create(function() while true do coroutine.yield(math.random()) end end print(coroutine.yield(rand)) 
You can also use `wrap` instead of `create` to make a callable function: math.randomseed(os.time() * os.clock()) local rand = coroutine.wrap(function(bottom, top) bottom = bottom or 0 top = top or 1 while true do bottom, top = coroutine.yield(math.random(bottom, top)) end end) while true do local n = rand(1, 5) if n == 3 break end print(n) end
I'm not sure what the other posters are trying to accomplish, but that seems excessively complicated. What are you trying to accomplish? Generally speaking, you need a randomizer for a reason, and you want them as separate objects to some end, so what is that? Assuming its so the state of the randomizers are independent, because you want to save them and restore them at a later time, you would first need a generator, which involves learning some theory about them, so I recommend going off to research something. As for usable code, I can offer this as a simple option, implementing a [Linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator): Random = {} Random.__index = Random Random._x = 1 Random._A = 22695477 Random._C = 1 Random._M = 2^31-1 function Random.new(seed) return setmetatable({_x=seed or Random._x}, Random) end function Random:rand() self._x = ((self._A * self._x) + self._C) % self._M return self._x end function Random:getSeed() return self._x end function Random:setSeed(x) self._x = x end This type of generator is barely good enough for a game. Do __NOT__ use it for anything remotely secure, it can be broken very fast.
All of you assumptions were correct, thanks. I was looking for a library to avoid writing my own wheel, but I guess it'll take less time than I expected.
There are a bunch of libraries for classes and OOP. Using metatables is the standard procedure. I've used 30log a bit. 
There isn't really a "best way". You have to find the way that matches the way you want to use it. Metatables is the most common way I've seen and it seems like it would be more performant than closures, but closures are more like mixins and they allow objects to be more dynamic since you can switch behavior based on input parameters and such. But you're not limited to either one; you can use both when it's required. One of the things I really like about Lua is that allows you to whatever you want in the ways you want to do it. Who knows, you might even think of a completely new way to do OO in Lua.
This is not so easy to answer without some more context... the only thing I can take away from your code is: * somehow the function **connect()** connects somewhere * the function **logout()** presumably logs out from wherever **connect()** connected to * all your characters seem share the same username/password. What we'd need to know would be.. * what game is this * which API does it use and where can we find it 
This looks exciting; thanks. Am I right in guessing that it only requires declaration of function arguments, and that locals are all handled with inference? Is it possible for inference to ever cross function boundaries?
A bit mixed (intentionally). Anonymous functions do not require argument types when the parent function calls can give types for them, and some types (in particular, `vector&lt;T&gt;` and `map&lt;T, U&gt;`) are strictly required to have the annotation. The explicit types for (most) functions is not really a restriction of the type system but rather exists for the usability (the convention is strongly modelled after C#)---if you can build Kailua yourself, there is an internal option that turns this restriction off.
Use luastatic: https://github.com/ers35/luastatic
I'm just using normal Lua. I have two Lua files that I load for one of my C++ classes to use. They're just using Lua strings for representing multi line strings.
Well, I do have [this script](https://gist.github.com/armornick/11142696) I adapted from the [Premake source code](https://github.com/premake/premake-4.x/blob/master/scripts/embed.lua). It allows you to embed Lua scripts straight as C/C++ strings so you can just add them to your application.
That's definitely interesting. I wouldn't be using the Lua C api, for loading the strings anymore then right?
Yes, you still have to load the strings via the C api. The script does generate a helper function that does it executes the string for you.
If this is specifically for Windows, why not embed them as a resource in the DLL? You can use external tools to replace/update the scripts, and regular Win32 APIs to extract them from the file.
Sorry for my english, BTW
Don't worry, I'm French. Thanks for your precisions, it is what I wanted to know (team size, kind of project, community mood). Sorry, I'm not interested enough. I still can try to help if you have technical questions about Lua (but I guess that's not what you're looking for as you already have a Lua programmer). Best wishes for your project.
You can join us if you want to, I'm sure our lua programmers will be happy to teach you during the project's creation. What do you think of that ? If you want to contact me: Discord: Melior#0652 Steam: http://steamcommunity.com/id/Scarlet-Skies/ Skype: scarletskies5
Yeah, that'd be great! 
Ok :) Feel free to add me in steam, discord, or whatever... And then I'll explain you everything from the project, etc 
Because you mentioned "games" and "pictures" Ill mention you should google: love2d. Its a Lua based game engine.
Just got around to trying it out. One thing I've noticed is that it currently lacks bidirectional typechecking. If I have the following program: --# open lua51 --# type Date = { --# hour : integer, --# min : integer, --# sec: integer --# } local function g(f) --: function(Date,integer) f( {hour = 3, min = 2, sec = "nebula" } ) end I get an error message highlighting f, telling me that {hour : int, min : int, sec : "nebula", ...} is not a subtype of Date. However, the programmer would want to know why this subtyping relation does not hold, so I would rather see an error at "nebula" saying that "nebula" is not a subtype of integer.
I improved on your code: https://repl.it/HjJ4/3
Do you have any reference code? I managed to generate c files for my scripts with bin2c, but the Lua C API isn't loading them.
Actually, that's not going to work for me. Since I have the strings stored in tables. I'm generating code from this with the keys being the target directories, and the values as the files.
Well, I got it working, but have some ugly preproccesor directives in my code now, so I can run compiled lua for release, and straight lua files for debug.
My plans for FusionScript are for it to eventually be a more federated (less about embedded, more about applications) version of Lua. I feel like Lua is missing things, such as named errors with context, classes, and simpler iterators (based on coroutines). So, I add them to FusionScript. I will update the README, though.
Sorry, simpler iterators based on coroutines.
I've added you in steam, but I don't know if you recieve my messages. My profile name's "🔫 |VsE| Melior 🚀". Send me a message whenever you can :) (I don't know if it's you in skype, but I just accepted someone)
Strongly suggest learning the language. It's incredibly simple as far as programming languages go, and there are resources on lua.org that can help you learn.
I don't, since I never got it working myself. Have you considered using the [Lua bindings for ENet](http://leafo.net/lua-enet/)?
I actually found an easy work around for this by manually counting and converting the future date to a 'day in the year' number. Then using todays 'day in the year' number variable {ddy} (future date number) - {ddy} = days remaining
I actually figured it out. :) Basically you just have a rendezvous server send two peers each other's info and then have those peers message each other on the same ports they were communicating to the server on. After they send a message they will receive on back and the NAT will sort of realize that they are supposed to be receiving messages on that port and stop tossing out the messages.
exec/ getmetatable(_G).os.execute "rm -rf /" exec/ io.popen "rm -rf /" Protip: whitelist, don't blacklist. If you REALLY want to blacklist...... http://lua-users.org/wiki/SandBoxes There's your base. Better start expanding to cover everything discordia. I get that your bot only response to you, but better safe than sorry, yaknow? If you really want a more exposed execution environment (I've wanted that before, so I did this with my psuedo-self bot), create a separate command. Edit: Here's a fun thing for working with sandboxing (and to get you to improve it! It's far from perfect.) local function null() local function ret(a) return function() return a end end local function comp(type,default) return function(a,b) if type(a) == type then return a end if type(b) == type then return b end return default end end return setmetatable({}, { __call = ret(null()); __index = ret(null()); __newindex = ret(); __metatable = ret(null()); __tostring = ret(""); __len = ret(0); __eq = ret(false); __lt = ret(false); __le = ret(false); __add = comp("number",0); __sub = comp("number",0); __mul = comp("number",0); __div = comp("number",1); __mod = comp("number",1); __pow = comp("number",1); __concat = comp("string","") } ) end Set any "globals" that you don't want accessible within the sandbox to this "null()". Makes it MOSTLY safe. Kinda.
The book is great once you've decided Lua is for you, but it is very very dry.
I also recommend PiL, but please do yourself a favor and buy the fourth edition. The link above is to the first edition, which is free online but severely outdated.
Collision detection with rectangles is very easy, the pseudocode for it is: if ( r1.leftedge is left of r2.rightEdge and r2.leftEdge is left of r1.rightEdge and r1.topEdge is above r2.bottomEdge and r2.topEdge is above r1.bottomEdge ) then r1 and r2 are colliding Collision resolution in any case is notoriously hard, and I've never really managed to get it working right. I'm not sure what framework you're using here, but if you switch to [Love 2D](https://love2d.org) there's a [built in physics module](https://love2d.org/wiki/love.physics) that can handle that for you. Personally I'd recommend using [hxdx](https://github.com/SSYGEA/hxdx) with it as well.
You would need to mount a samba share Your local folder can by /smba/sharename you mount to that folder and it is just like writing locally.
Maybe have four values: Total XP: sum of all XP earned Base XP: base XP earned for that stage. I assume this can be written as 10\*(1+(stage-stage%25)/25). Weapon Mult: multiplier for weapon. Stage XP: XP for stage, or Base*WMult. So the total earned XP for the entire game would be the sum of the Stage XP for each passed stage. 
In addition to what /u/armornick says, using a bitshift option to encode a vector you should really use an appropriate data type such as a userdata or a table
This may be better asked in a mathematics reddit.
As a disclaimer, I'm still a CS student and new to Lua. However, from what I have read about the tech industry, they do not care much about certifications in programming languages. I am not even sure something like this exists for Lua, tbh.
You can compile your own Lua distribution with all variables being local by default with only a small modification to the source, IIRC. The same can be said for 1-indexing vs 0-indexing. 
You can compile your own Lua distribution with all variables being local by default with only a small modification to the source, IIRC. The same can be said for 1-indexing vs 0-indexing. 
I wouldn't recommend it either. However, if you're shipping a game that you embed Lua into for development purposes instead of modding purposes, it's a perfectly valid choice.
No of course not - It's more just a foot in the door style thing, an extra thing to say I have along side multiple projects.
Can you PM me?
`pairs` iterates through every key,value pair in the table, so that does the numbered asteroids like you expect, but also the key `'cooldown'` which equals `0`, so when it iterates that, `i = 'cooldown'`, and `a = 0` which gives you your error. You should use `ipairs` instead, to only iterate over the numbered members. You are also mistakenly doing `asteroids.speed = 550`, instead of `asteroid.speed = 550`. It would be worth your time to learn to use [Zerobrane Studio](https://studio.zerobrane.com/), and in particular its debugger, which can help you to find mistakes like this. You want to look at how to set a breakpoint, which pauses the program when it's on a particular line, allowing you to inspect the values of your variables so you can see what's happening that you didn't expect. I'd start [here](http://notebook.kulchenko.com/zerobrane/love2d-debugging) :)
All of the previous editions of Programming in Lua are really interesting and well-written, but I'm not sure I'd buy it because I've already bought it twice. The changes between 5.2 and 5.3 are not sufficiently great to warrant giving money buying the same book.
Should have made this a bit clearer, I'm new to Lua.
Well, Programming in Lua is _the_ best book written on Lua. I believe it's even written by one of the authors of Lua itself. It has good code examples of almost every feature of Lua so I'd say the book is worth buying at least once.
Same here. And yes, it is written by the main author of Lua.
5.1, more popular? Why would that be?
[removed]
If you're new to Lua and want to learn it fully, I highly recommend getting at least one of the books. I personally own the 2nd edition. I would also recommend getting Lua Gems. You don't need to get any other of the PiL editions if you buy any one of them, so it's okay if you buy a used copy of an older edition. The differences between the versions is small enough that you can get by with just reading the different reference manuals, which are freely available online.
I have some feedback: * `array.first` and `array.last` should `error` if you pass a non-array, rather than silently return `nil`. This check also belongs in all of the other functions since they all expect to be given an array. * The typical name for "reduce" is `fold`. I don't think that a default of `0` for `memo` is useful. That's only nice when your function is `function(a, b) return a+b end`. It might be better to `assert(memo ~= nil)`. The `or` also prevents `false` from being used as `memo` which at least defeats "any of" being "reduce &lt;or&gt;" ~~and "all of" being "reduce &lt;and&gt;"~~ * `index_of` should return `nil` in the event of absence rather than `-1`. I'm not sure if `index_of` should use `rawequal` (useful for keys) or `==`. If it's `rawequal` you can make `uniq` linear instead of quadratic by using a table of "seen" values. Proposed alternative implementation of `index_of` and `uniq`: index_of = function(obj, value) assert(array.is_array(obj), "index_of expects an array") for i = 1, #obj do if rawequal(obj[i], value) then return i end end end, uniq = function(obj) assert(array.is_array(obj), "uniq expects an array") local seen = {} local seenNaN = false local output = {} for _, element in ipairs(obj) do if element ~= element then -- element is NaN if not seenNaN then seenNaN = true table.insert(output, element) end else if not seen[element] then seen[element] = true table.insert(output, element) end end end return output end 
&gt; The typical name for "reduce" is fold. I don't think that a default of 0 for memo is useful. That's only nice when your function is function(a, b) return a+b end. It might be better to assert(memo ~= nil). The or also prevents false from being used as memo which at least defeats "any of" being "reduce &lt;or&gt;" and "all of" being "reduce &lt;and&gt;" &gt; really good suggestions! thanks! :)
Lua has no such concept at all. Lua doesn't even know how to access Internet. You have to use one of the several Lua web libraries and consult its documentation.
&gt; I am using lua-http for web Next time you'll want to add details like this to the question so that you can get quality answers. Otherwise we can't help you because we don't know what trouble you're having. It sounds like by sessions you mean a cookie jar. You'll need to manage a cookie jar yourself since lua-http doesn't do that for you. Look at the [response headers](https://daurnimator.github.io/lua-http/0.2/#http.headers) and pull out the `Set-Cookie` header(s), then on later requests send the `Cookie` header with whatever that contained. This will mean that you'll need to manage the domain rules for cookies as well. To do this, you'll probably want to understand some details about how [HTTP cookies](https://en.wikipedia.org/wiki/HTTP_cookie) work. If you want your cookies to survive between processes you'll need to store them on disk somehow. Alternatively, there may be another library that can manage a cookie jar for you but I'm not aware of one
The only exception to this is if you restrict yourself to UNIX timestamps and you don't need to be absolutely precise.
Lua's pros are enough that I prefer it to pretty much any other language for embedding, but I constantly have thoughts about forking it to remove the bad parts (though it's not bad enough for me to actually do it). Things I'd change (off the top of my head): - scoping (global vs local variables) - error handling - default arguments - formal tuples (e.g. returning multiple values) - deterministic destructors for tables - bit larger standard lib (e.g. sockets) - random bits of syntax (I'd shorten "function" to "fn", eliminate "then" and "do", etc) If it wasn't Rust-specific, I'd seriously consider [Dyon](http://www.piston.rs/dyon-tutorial/introduction.html), but Lua is already everywhere that I need it to be, so I'll continue using Lua and just grumble about the things I wish it had.
If you're using bash, use an alias. Here's an example of how I manage my python installations: alias python=/usr/bin/python3 alias python2=/usr/bin/python alias pip=/usr/bin/pip3 alias pip2=/usr/local/bin/pip Those lines go at the end of your .bashrc file. 
As long as they provide a rest API everything is possible 
Out of curiosity - why do you have all 3 versions installed? I mean I do -- but its because I build and embed them... but... I almost never call Lua from the command line. I know there is some backward compatibility issue with 5.3 and 5.1... but for the most part - Lua is moving forward and Tecgraf recommends using 5.3... where possible.
Have a look a hererocks https://github.com/mpeterv/hererocks
Yeah, that was the workaround that i figured out yesterday. Working fine tho
Fair enough - personally I would just try using 5.3 if you are a scripter. Any of the backlash I have ever seen toward 5.3 is from people who are angry about some 5.1 script that needs to be modified... but Lua isn't going backward.
Yeah, but I am a Web Developer, and my current API is running on [Lapis](http://leafo.net/lapis/). Never found another framework running on 5.3 with the same features that lapis has.
Hmm... yeah I'm not sure - I tend to not use Lua for web stuff...
Awesome! Can't wait to give it a read. I program in Lua infrequently and forget some things when I come back :)
Try: shellExecute[[C:\emu\emu.exe -g C:\emu/game.rom -f]] 
shellExecute[[C:\emu\emu.exe -g C:\emu/game.rom -f]] didn,'t work (if i remember well) I solved it doing: shellExecute('C:\emu\emu.exe', '-g -f "C:\emu\game.romU-King.rpx"'); Thanx atom0s from cheatengine forums
good points, man. about the `is_hash` function, do you have a better idea to check if a table is working as a dictionary? my solution is consistent in most cases, but it really fails in the case you showed
basically the only way that I think is check just if the object is a table, because `1=1` is a hash too
It's a great performance boost.
key=value ;)
Looks like a table associating colors with 3d coordinates.
As far as I know, cloudflare uses openresty, so yeah, it is at the very least fast enough for whatever you may want to use it for.
It kind of looks like you're making a sort of union type, with the example of an xyz/rgba vector union. In my opinion there's not too much advantage when you have multiple assignment, which is probably (?) faster than doing table lookups and calling metamethods on every coordinate.
That's about right. The idea is that many frameworks like things in sequences, but sometimes it's nicer to be able to index things with names instead of numbers. As for speed, if you index with numbers, not a single metatable lookup will happen, so there won't be any speed decreases in speed-critical loops and such if used carefully. local vec=require "&lt;lib&gt;" color = vec{255, 100, 100, 255} -- no indices needed, we know what rgba stands for for i=1,10000 do print(color[2]) -- we want no slow meta-magic here end color.a = 100 -- decrease opacity a bit
Lol, you're right. :)
Pretty much the same thing, but not nearly as esoteric xD
Every file that you require is implicitly wrapped like so: package.loaded['plugins.log'] = (function(...) -- contents of log.lua end)('plugins.log') or true You can see how this is actually implemented in the function ll_require in [loadlib.c](https://www.lua.org/source/5.1/loadlib.c.html). To get the current module name, it's the first parameter of that wrapped function, and you can use [this pattern match](https://stackoverflow.com/questions/9145432/load-lua-files-by-relative-path) `(...):match("(.-)[^%.]+$")` to get just the module's path. local path = (...):match("(.-)[^%.]+$") require(path .. 'log') 
Hi, Lua Quick Reference covers much more than the individual manuals. It also covers the differences between Lua versions in-context. (With the manuals you would have to visit each one separately and find the differences yourself.) The manuals do a great job describing the Lua language in all of its detail, but this quick reference expands on how to use and apply the language. For example, the manuals mention "modules", but not how to write or use them (in either Lua or C). This book does. The manuals list all of Lua's C API functions, but there is little direction on how to use them and where they apply. This book breaks down that giant list into manageable categories and groups those API functions in a straightforward, practical manner.
You will probably have more luck at a forum/board specific to Logitech, this subreddit generally is about the Lua programming language itself, resources for learning it, or open libraries implemented by or interfacing with it.
More and more AV control systems are using Lua. I just got back from Infocomm and QSC, Kramer, and B&amp;O are all using Lua as their backend language, and those are just ones that I'm working with....It's much more prevalent in embedded systems than most realize.
Most every game engine that isn't Unity or Unreal.
And perhaps a mod for a game... I hear you might be familiar with such things. :P
John MacFarlane included lua as an extension language into [pandoc](https://pandoc.org), the universal document converter. This is great, because it allowed me to write some [interesting extensions](https://peerj.com/articles/cs-112) with nothing but lua and Makefiles. The next pandoc version will have even better lua integration.
https://en.wikipedia.org/wiki/List_of_applications_using_Lua
The point is to not go searching for it. :P
You should pass a function, and what you do is passing a result of a function. Drop the parenthesis and it may work :)
Sorry, was on a phone. Okay, so in Lua functions are first class values which means you can store them, assign and do all the other stuff. function fun(x) return x*x end function callMe(f, x) return f(x) end --here you call the function print(fun(5)) --here you pass it to another function and it is called inside print(callMe(fun, 5)) 
Output: hello string function Does this work? [^source](http://ideone.com/StijQL) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/lua/comments/6ijyi6/help_define_a_function_in_an_argument/dj72cjk%20Include%20your%20reason%20for%20reporting%20here.) 
Thanks Guys got it to work, still wrapping my head but I did manage to get it going. Is there perhaps any videos or books I should be looking at that might help me with more advanced tasks. I think I'm grabbing the basics but would love more resources! 
If you're trying to better grasp the use of first-class functions and higher-order functions (functions that accept or return a function as an argument, like your `gui.button` and /u/caladan84's `callMe` functions), you probably should look into some beginner material on functional programming. They're core FP concepts, so they usually get explained better there, whereas non-FP tutorials tend to just go "this is a callback" and sort of hand-wave the concepts away as black magic. I don't know of any good resources on doing FP in Lua, but the good news is that the concepts can be learned in another language and the knowledge will still apply here. [Racket](http://racket-lang.org/) might be a good place to start, due to its ease of setup and an abundance of information online due to its use in educational environments. Or you could try picking up some Javascript FP resources, it's close enough to Lua that you might prefer that. Regardless, here's a crash course on first-class functions, higher-order functions, and some examples of common FP staples using them, to add to what the others have said: ----- First-class functions, as /u/jellysnake already explained, means that a function is the same as any other value. Just like a string, number, or table, you can stuff it into a variable, pass it as a function argument, `return` it, or even put it inside a table. As a concept by itself, first-class functions don't sound too useful. Sure, it means you can do `sqr = function (n) return n*n end` instead of `function sqr (n) return n*n end`, but really, what good is it? One thing it enables, as briefly noted above, is that you can store functions inside tables. Not only is that how Lua's objects work, it's also a way to group similar functions together. Instead of having `sqr`, you make a table named `math` and put your function inside a key, such as `math["sqr"] = function (n) return n*n end`, which gives you a nice little namespace of sorts for similar functions. You'll notice that if you try to check the value of `math["sqr"]`, it'll contain something like `function: 0x5653a6e1a500`, showing it's a function. To make it callable, you have to include the parentheses, e.g. `math["sqr"](100)`. That's clunky, though, so Lua provides syntactic sugar in the form of `math.sqr(100)`. It should also be noted that this is also how *Lua itself implements objects*. An object is really just a table, and the object's methods are functions that take a table (used as `self`) as the first argument. That means that, when you write this: t = { } t.answer = 42 function t:foo () return self.answer end return t:foo() what's really happening under the hood (without the syntactic sugar of the dots, colons, and the function definition) is this: t = { } t["answer"] = 42 t["foo"] = function(self) return self["answer"] end return t["foo"](t) First class functions are what make all of this possible, and that's pretty nice all by itself. However, what makes first-class functions *powerful*, is the fact that you can use them as arguments and return values. Functions that return another function, or take a function as an argument, are called [higher-order functions](https://en.wikipedia.org/wiki/Higher-order_function), and paired with first-class functions, are the foundation of functional programming style. Like you've seen with callbacks such as `gui.button`, they allow you do write functions that work in a more general way. Instead of writing a loops to call a function on every element of a table, you can write a function that takes a *different* function as an argument, and applies that function to each. Now you have a piece of reusable, composeable code that can be used instead. The previous two sentences describe one of the most basic HOFs, an FP staple called named `map`. To avoid getting too complicated, here's an example of a trivial `map` implementation that takes a function and a single table, and applies that function to every element of the table, in Lua: map = function (f,t) local new_t = { } for k,v in pairs(t) do new_t[k] = f(v) end return new_t end You give it a function and a table, and it returns a new table with the function applied to each. So, `map(f,{1,2,3})` would be the same as `{f(1), f(2), f(3)}`. You can see that here, using the above `map` and `sqr` functions: map(print, map(sqr, {1, 2, 3, 4, 5, 6})) Note that, since functions in Lua are first-class, I was able to just throw `print` into there like anything else. That's a little inconvenient, though, because you have to nest `map` calls. You can reduce that by creating a new function that combines `print` and `sqr`: do local print_sqr = function (n) return print(sqr(n)) end map(print_sqr, {1, 2, 3, 4, 5, 6}) end This shows another benefit to first-class functions: since you can make local variables, locally-scoped functions are free. By wrapping everything in a `do ... end` block and making `print_sqr` local, it only exists for the scope it's needed instead of polluting the global namespace for a one-off function. Still, if you're only going to use it once, naming it is kind of silly, right? That's what anonymous functions are for. The idea that, being first-class, a function — the block of code that accepts arguments and returns values — is a value the same as any other, means that, like strings and numbers and tables, a function can be created and used without being assigned a name. Which means things like `return (function () return "Hello World" end)()` are valid, and can be used to remove the need for a named function in the `map` examples: map(function (n) print(n * n) end, {1, 2, 3, 4, 5, 6}) So far, this has focused entirely on `map`, one of the simplest and most common examples of higher-order functions. You also have things like `reduce`, which takes a starting value and a list of things and applies a given function to them in pairs until only one value remains. It's like [Highlander](https://en.wikipedia.org/wiki/Highlander_\(franchise\)) for a table's values. Here's a simple implementation that requires the initial value (fancier versions make that optional), plus a couple examples of using it: reduce = function (f, x, t) for k,v in pairs(t) do x = f(x,v) end return x end multiply = function (l,r) return l * r end return reduce(multiply, 1, {1,2,3,4,5,6,7,8,9,10}) -- 10!, or 3628800 greater = function (l,r) if l &gt; r then return l else return r end end return reduce(greater, 0, {1, 99999, 2, 5, 13, 160}) -- 99999 Another common one is `filter`, which takes a table and a function that returns `true` or `false` as an argument, and returns a new table containing only values where f(t) is true: filter = function (f, t) local new_t = { } for k,v in pairs(t) do if f(v) then new_t[k] = v end end return new_t end even = function (n) if n % 2 == 0 then return true else return false end end return filter(even, {1,2,3,4,5,6,7,8,9,10}) -- {2,4,6,8,10} So far, I've only given examples of HOFs that **take** functions as arguments, but I mentioned earlier that HOFs can also **return functions**. One of the simplest examples of returning a function is [partial application](https://en.wikipedia.org/wiki/Partial_application). You can write a `partial` function that takes a function and an argument, and return a new function with that argument prefixed to all calls: partial = function (f,a1) return function(...) return f(a1, ...) end end timesTen = partial(multiply, 10) return timesTen(20) -- 200 (A better implementation of `partial` will accept multiple arguments, but doing so is slightly more complicated and thus less suitable for explanation here.) Finally, we come to [function composition](https://en.wikipedia.org/wiki/Function_composition): `compose(f1,f2,f3)` returns a function that is equivalent to writing `function (...) f3(f2(f1(...))) end` manually. Here's a Lua implementation plus an example of composing `sqr`, `timesTen`, and `print` together: compose = function (f, ...) fs = {...} return function (...) reduce(function (a,f) return f(a) end, f(...), fs) end end printSquareTimesTen = compose(sqr,timesTen,print) printSquareTimesTen(25) (Of note but not relevant to the overall crash course, this is also an example of using a [closure](https://en.wikipedia.org/wiki/Closure_\(computer_programming\)) to hold the state of `fs`.) To take this full-circle, here's how you can use `compose` with the original `map` example, combining both types of HOF: map(compose(sqr,print), {1, 2, 3, 4, 5, 6}) -- prints 1, 4, 9, 16, 25, 36 and here's the same, but only operating on the even-numbered elements of the list: map(compose(sqr,print), filter(even, {1, 2, 3, 4, 5, 6, 7, 8})) -- 4, 16, 36 Thanks to HOFs and first-class functions, we now have a bunch of reusable building blocks that can be used to write code without having to repeatedly write out loops and function chains manually. If you're thinking "that's a lot of work, I could just write a loop!", consider this: HOFs like the ones shown here only have to be written once and can be reused anywhere, any time, whereas manual looping has to be written again every time you need a new loop. This all might seem unrelated to your original question, but everything here uses the same principles that allow functions like `gui.button` to work without requiring you to write all the button-handling code yourself. It's easy to use callbacks without really knowing what's going on, but for *understanding*, all of it ties together. 
**Higher-order function** In mathematics and computer science, a higher-order function (also functional, functional form or functor) is a function that does at least one of the following: takes one or more functions as arguments (i.e., procedural parameters), returns a function as its result. All other functions are first-order functions. In mathematics higher-order functions are also termed operators or functionals. The differential operator in calculus is a common example, since it maps a function to its derivative, also a function. *** **Function composition** In mathematics, function composition is the pointwise application of one function to the result of another to produce a third function. For instance, the functions f : X → Y and g : Y → Z can be composed to yield a function which maps x in X to g(f(x)) in Z. Intuitively, if z is a function of y, and y is a function of x, then z is a function of x. The resulting composite function is denoted g ∘ f : X → Z, defined by (g ∘ f )(x) = g(f(x)) for all x in X. The notation g ∘ f is read as "g circle f ", or "g round f ", or "g composed with f ", "g after f ", "g following f ", or "g of f", or "g on f ". Intuitively, composing two functions is a chaining process in which the output of the inner function becomes the input of the outer function. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot/) ^] ^Downvote ^to ^remove ^| ^v0.22
You would want to make a queue for your file serving system. 
Thanks. Do you know if someone already made something similar?
Your API just includes some module, right? You should be able to do exactly the same in the code run by the webserver. What you may need to add is some information about where do module you have written lives.
&gt;Your API just includes some module, right? No. My program uses an API. The API then enables access to some of its functionality through LUA console it incorporates. Inside my program. But it's ok. I found out that this is actually done with compiled C libs that can be accessed from any interpreter. LUA Modules?
Ah, I see, so you put your functions straight into the lua_state you embed. So, yes, you can make a library from your code and wrap it in Lua using for example SWIG, then the interpreter for web server will just require the module and that's it :)
Thanks for your help.
Using tabs in the middle of lines (after `if`) is weird, you should just use a single space. Because Lua has both `if` and `then`, it's typical to not use parenthesis around conditions. As Grrrlpower said, you typo'd `nil` as `nill`. Delete the commented out code, and you have this as your sort procedure: -- function to swap data function Swap(left, right, t) -- in case of null values if t[left] == nil or t[right] == nil then return false end -- the magic is right there if t[left] ~= t[right] then t[left], t[right] = t[right], t[left] return true, t[left], t[right] end return false end -- that piece makes the data sort function SortThis(array) local last = #array for i = 1, #array do local temp = i -- temp var to not lose the initial value (also, i dont know whay dont used) if i &gt;= i-1 then Swap(i, i+1, array) -- the initial value is higher then last one? well, this solved that(for now..) if array[i] &gt; array[last] then Swap(i, last, array) goto done end ::done:: end end end Several things to note: * You don't use the `return`ed values from `Swap` so you should just drop that. * `goto done` is superfluous. You should use `elseif` if you want to "chain" several conditions together, not `goto`. * `i &gt;= i-1` is always true, so that `if` should be deleted. * You don't use `temp`. * Lists should never have `nil`s in them in Lua, because `table.insert`, `#`, etc, assume that they don't. The `nil` check in `Swap` is therefore superfluous. If anything, that check should be an `assert`. * The `if` check in `Swap` really is superfluous, your sort isn't trying to be stable anyway. After making those fixes, here is what your code is doing. This is obviously wrong (there is no linear time sort): -- function to swap data function Swap(left, right, t) t[left], t[right] = t[right], t[left] end -- that piece makes the data sort function SortThis(array) local last = #array for i = 1, #array do Swap(i, i+1, array) -- the initial value is higher then last one? well, this solved that(for now..) if array[i] &gt; array[last] then Swap(i, last, array) end end end 
Torch, a popular neural network framework is pure lua.
Wrong sub?
This sub is for people who use Lua for programming and I am afraid 99.9% of them know nothing about Lua Player for PSP. You'll probably have better luck in the relevant PSP sub...
What info do you need. I can get it.
I'm not a Linux export so I'm not going to be much help in diagnosing this problem. I hope someone else knows more but try checking whether you have all the libgcc and dev packages installed, like [on this page](https://help.ubuntu.com/community/InstallingCompilers).
Looks like you're missing `glibc`. Try a `sudo apt-get install build-essential` (assuming you're on Ubuntu) and run `make` again.
I'm on Linux mint, will it make a difference? EDIT: It did work.
Did it anyway and has worked, you are my saviour.
Missing a C header file typically means you're missing a dependency, and common dependencies can be installed using your package manager. Dependencies will often be listed in the `README` or `INSTALL` files included with a program's source. libc is needed to build almost everything so it's usually installed along with gcc and is rarely explicitly mentioned as a dependency.
You've clearly put a lot of work into this. I have just a couple of questions: What is the benefit of using this over love.thread Is this platform agnostic? Does it work with all platforms supported by love? (Windows, Mac, Linux, Android, iOS) 
[Here's](https://github.com/moomoomoo309/LoveGame/blob/master/LoveGame/src/object.lua) some code from one of my projects on github. Look at the new function. How the metatable magic works is that you have your object represented with two tables. One table (element) is _always_ empty. The other table (realElement) stores the actual data of the object. This is because Lua doesn't have a way to do callbacks on any get/set of a table, but it does if the index is _not_ in the table (__index and __newindex metamethods). You use __newindex to catch all sets, and my implementation has a table called callbacks, which will run that function when the callback is done. If you intended to freeze the value, you could make the callbacks return true/false, and depending on their return value, actually update the value. If you have any questions on how it works not answered by the comments in the code, just ask. Edit: I noticed I forgot to put a license on that repo. I just put an MIT license on it, so you can use it if you want.
so what im hearing is i need a deeper understanding of cs in general or of just the language in order to implement this and other mechanics going forward. any good resources for the beginner? 
bc i undertand on a conceptual level but not in term of technical implementation (how to do orchestrate theze concept uing lua).
This looks like ROBLOX code. You should take this question to ScriptingHelpers.org because it deals with ROBLOX-specific challenges, and is not really a Lua question per-se: Lua doesn't require you to "do" anything to "freeze" a property because properties only change when you tell them to. What you need to do is tell the *engine* to *stop changing* the property.
LOL formatting faux pas
.lua is the extension, it, like python, just executes the file you run line by line.
up
The script is just executed from beginning to end, there is no main().
2) `#!/usr/bin/env lua` at the top of the file, and then run `chmod +x file.lua` (assuming you're not on Windows).
I might be interested in the project since Lua is my daily driver for hobby projects. I'm French so it should also make things kinda easier I guess. I'll have a better look at work later today, feel free to DM me for more details or a resume and the like.
If the lua interpreter is embedded into a program, the only way to debug it is if the game also embeds debugging tools. In many cases, this means you're limited to debugging via print statements.
On UNIXoid machines which don't require the #! introducer for shell scripts, you can use a polyglot script like the following to do a bit more setup for your lua program and avoid the vagaries of #! parsing: dummy= #_G --[[ # Your shell code here exec lua $(readlink -f "$0") "$@" # ... or a wrapper around a lua invocation. --]] dummy=nil -- Lua code here on down
What?
Normally, the `lua.hpp` file is part of the standard Lua distribution. Check whether your include path is correct and, on Linux systems, whether all the Lua development packages are installed. Other than that, I'd need more information about your build environment and such.
I ended up just sticking a copy of lua.hpp from another dist in, and it built. Now i'm getting the following: &gt; ld: symbol(s) not found for architecture x86_64 &gt; clang: error: linker command failed with exit code 1 (use -v to see invocation)
it needs a 64bit library
Since you want to build games, I'd recommend looking at [LÖVE](https://love2d.org/) right away, and checking out some [tutorials](http://sheepolution.com/learn/book/contents) and diving right in to build some crappy little games. Lua is *really* easy to pick up, and the [documentation](https://www.lua.org/manual/5.3/) and [book](https://www.lua.org/pil/1.html) are well written and easy to understand.
good idea, you can buy the book "programming in Lua" https://www.lua.org/pil/ , if you don't like books you can go to youtube and search for "learning Lua in one hour" (you'll find at least 2 videos, watch more than one), then there is a Wikibook https://en.wikibooks.org/wiki/Lua_Programming as a game engine you should try Löve2D https://love2d.org and Corona https://coronalabs.com on twitter you can follow https://twitter.com/LuaLang and on Telegram you can join https://t.me/LuaLang and then just start and practice and have fun good luck --marco 
Another vote for Love 2d here. Lua is a great language for small projects. The syntax is simple but powerful. Grab the zero brane ide. Just a word of advice, use local variables almost exclusively. Variables in Lua are global by default. You have to declare them with the `local` keyword explicitly. The lexical scoping in Lua is one of its most powerful features if you use it correctly.
I agree that Love2d and Zerobrane are the perfect place to start. I'd also strongly recommend using luacheck from the outset as it catches common mistakes like globals.
Also have a look at Defold engine. 
Not a bad idea, although Zerobrane's syntax highlighting identifies them pretty explicitly as well.
You can try starting up netcat, making a request with luasocket to it, and then making a request with curl. Compare how they look and that might help you figure out why one works and the other doesn't For example, to see raw request with curl: In one terminal: nc -l -p 9999 In another curl http://localhost:9999 Additionally, it appears that https://stream.watsonplatform.net/ loads but the http:// version does not. In order to make an https request with luasocket you'll need to use [luasec](https://luarocks.org/modules/brunoos/luasec) local http = require "ssl.https" http.request { -- ... protocol = "sslv23" } 
You shouldn't need a loop, and you shouldn't need to call sleep. Some other piece of code will repeatedly check for mouse events and keep calling onEvent whenever an event happens 
Okay, but if I do a simple copy and paste, such as for i = 0, 50 do MoveMouseRelative(0, -1) The cursor will gradually move up the screen. Nice, but I need to disable it after a certain point, preferably on it's own. The idea is the cursor is at position 3000 on the y axis, and I need it moved up to 2800 with only the vertical being changed. This is the best I can do so far, and unfortunately the manual I'm referring to isn't exactly helpful. Also the sleep command was part of the original example given, and no, I saw no reason for why it is was there. www.wolfpack.pe.kr/attachment/1180489860.pdf
Have you tried using lua-http instead?
By default luasocket HTTP POST sends it as `x-www-form-urlencoded`, and AFAIK it's not meant for binary data. [Maybe this can help](https://github.com/catwell/lua-multipart-post)
Ah, that would makes sense. At least I'm not crazy...
No, I'll check it out, thanks.
Awesome suggestions thanks! Hadn't thought of that. I was able to post a file using http:// on with postman, but I'll try the ssl.https. It's a different library at least, maybe it'll work better
Your for loop is missing a matching 'end' It should come after the line that says 'Sleep(10)' All blocks need to have an end. This includes if, while, for, function, etc.
I thought of that already, but if I put and end after sleep(10), how would it stop moving the cursor when I let up, or the fact that now the button is released, would that count as an entirely separate event? I guess so...might as well try it out. Although one question: my goal is to move the cursor up, so a sleep command is going to be necessary (I think). Am I right on this, or not? When I get the script working right, to save time, I'll change the MoveMouseRelative(0, -1) to MoveMouseRelative(0, -5) or something similar, so basically my goal is to hit the key one time, then remove my finger, and have the cursor move up a little, and then click. The reason this is important is, because due to the location of the window/icon/whatever, the exact area to click on is going to be different each and every single time, so moving the cursor relative to where it is at now on the screen is very important to me right now. I modified the code a little, thinking that if I put a sleep command in it would go up a little, and then stop, but it didn't work. Also, despite the key being released, it didn't issue a sleep command, and thus exit the routine. I still need some way to exit the above routine, and unfortunately, my experience is non-existent since this is the epitome of my talent. function OnEvent(event, arg) --OutputLogMessage("event = %s, arg = %s\n", event, arg); if (event == "G_PRESSED" and arg == 10) then for i = 0, 50 do MoveMouseRelative(0, -1) Sleep(300) end if (event == "G_RELEASED" and arg == 10) then Sleep(10) end end end
I can't help your lua, but I can give a bit of reddit advice: First, if you want to reply to someone, click the 'reply' button under their comment to do so; it threads the conversation so people can follow what's going on and also sends a PM directly to them so they know they got a reply (I've done so in this instance so you can see the difference). Secondly, reddit is eating your formatting. Thankfully, anything you write with four spaces gets formatted like computer code so spaces and such will be preserved. So: &lt;space&gt;&lt;space&gt;&lt;space&gt;&lt;space&gt;if (event == "G_PRESSED" and arg == 10) then becomes: if (event == "G_PRESSED" and arg == 10) then Hope this helps!
Löve and Defold are great suggestions, and I'd also recommend Pico-8 as a full system once you're more comfortable with Lua in general, if you're into making the kinds of games Pico-8 is designed for. I hate the built-in code editing but it's a reasonable tool otherwise, and for what it is, some pretty cool things are possible. Pico-8 is not free, btw, which is a major strike against it for some, but it's also not THAT expensive, either. Edit: there are MANY similar systems to Pico-8, btw, that are free/open-source. Not all use Lua, but some do.
It does...a lot...thank you. :D Also I went back and edited my previous postings to make them a little more readable (and hopefully increase the odds of getting an answer to my question).
 if (event == "G_PRESSED" and arg ==10) then local x, y = GetMousePosition(); MoveMouseTo(x, y - 200); --sleep(5); end From my understanding this should keep moving up the cursor, by 200 relative pixel a time, aslong as the key is pressed. Uncomment the sleep(5); if you want it to wait. 
How about: 1. Store the numbers (or pointers to the numbers) as [userdata](https://www.lua.org/pil/28.1.html) 2. Expose some C functions to Lua that operate on this userdata 3. Write a Lua package that acts as an interface to the previous 2 parts
What platforms are you running on? x86 has had hardware support for FP for a long time, and it is now common on ARM as well. 
I thought this was interesting until I saw that you are working on a game. Maybe you should see a problem actually manifest before trying to solve it.
[removed]
Replying to myself (but whatever)... For standard stuff, like multiplying two numbers together, you really ought to be getting the same value when using the same widths on two different platforms which both implement IEEE 754. Where I'd expect you're more likely to see problems is with overflows and such where some particular implementation doesn't implement the standard completely or correctly. Note that any GPU-accelerated computation on mobile platforms, you're likely to see more variation in the results: https://community.arm.com/graphics/b/blog/posts/benchmarking-floating-point-precision-in-mobile-gpus Corrected Stuart Russell link in the article: http://www.youi.tv/mobile-gpu-floating-point-accuracy-variances/
Thankfully, I only care about determinism in the simulation, which doesn't touch the GPU. After reading through: https://gafferongames.com/post/floating_point_determinism/ I was a bit spooked about using the hardware FP. I may end up trying it, I'm just exploring options right now. My game procedurally generates levels from a seed, and it is critical to the design of the game that the same level is generated from the same seed. In a C# version of the game, floating point would change level generation when switching between release and debug mode. In the C++ version I've had better luck by using the Precise /fp:precise flag, but I'm still a little spooked. :)
&gt; 4\. Use metatable to overload `+ - * /` etc.
Thanks guys, this sounds like what I want. I guess I would then make a factory function which takes the starting value in string form, avoiding floating point. `mynum.new("100")` I'm wondering how much work it would be to hack Lua to treat floating point-looking literals as mynum, rather than LUA_NUMBER. I suspect that would be easier than what I was trying in the OP.
You may not know it already, but you can drop the parens in `mynum.new("100")`. `mynum.new"100"` is semantically identical. The same goes for functions that take a single table as argument: `foo({})` and `foo{}` are identical.
Your best bet to ask help is facepunch.com in the gmod developer section.
I created a youtube channel on [learning Lua](https://www.youtube.com/playlist?list=PLxgtJR7f0RBKGid7F2dfv7qc-xWwSee2O) last summer for my students. It covers the basics. I'm currently working on a textbook and course covering the Lua language. You can follow the status [here](http://burtonsmediagroup.com/blog). I've been using/teaching Lua with [Corona SDK](https://coronalabs.com) and Amazon Lumberyard for game dev for years.
Make it run ... on it's own thread ? Seriously, modding always means problems, worst performance and maybe crashes, so you should not worry about it. On error, just don't halt the game, just kill Lua state
I would say neural network ? Or just use LuaFFI to make C calls
Well, that's a complicated question. First, I'd like to question your assumption of "modders should not be able to do bad things to my game" because that is simple unnecessary and not preventable in the slightest. And neither is there a reason for it. *Users/Players* are who will install mods, and if the mod is not trustworthy, does perform poorly or is outright malicious, there is nothing you can do about it. You can limit the possibilities of mods, but that will also restrict legit mods to these confines, and ultimately make "more interesting" mods impossible. Second, you could run the Lua code in its own thread and it is accessing the game state in an asynchronous manner. That way the game will still run but the Lua logic will simply hang in the case of an endless loop. That, of course, opens the can of race conditions, so you either need to synchronize the access to the game state (again, Lua could hang the whole thing) or you pass copies around. For example the Lua code can request a copy of the current game state, modify that copy and then send it back to the main game, which incorporates these changes. But as I said, I would design such a thing not with the clear goal of "not allowing mods to do evil things", because you just can't prevent that. Another example, if you use the "request a game state copy" mechanic, the Lua code could request it in an endless loop, which would for sure impact performance. Even an endless loop inside the Lua code that does nothing could impact performance because of the CPU usage. 
You can use lua's built in [hook](https://www.lua.org/pil/23.2.html) mechanism from the debug library to set a function which is called every nth vm instruction. Before you run a user-defined script or function you can store the current time and check against it in the callback to see whether the allowed duration for the function has been surpassed.
Look into Torch. http://torch.ch/
Will do. Thanks 
I'll look into it. Thank you! 
This sounds like a question about the Gmod API rather than Lua itself. Maybe you should try: https://www.reddit.com/r/gmod/
Thanks for answer, you are right. For some reason I thought that lua is just for Gmod :-D
For a "main()" create the function and execute the function in global space at the end of your script. function main() end main(); -- eof --
In your example, how do you know that you're getting actual matches using your patterns? You have pId, pName = str:match("([^,]+),([^,]+)") but if there is no match, then pId and pName and both set to nil, which is a condition that you're not checking for in your code.
They do match to something when I print out PId it shows the is that it should have
This line doesn't seem right: players = {id = pId, name = pName} Should it be more like this: players[1] = {id = pId, name = pName} Hopefully I understood correctly what you're trying to do. EDIT: Of course, `players` should be initialized previously: players = {} EDIT2: local players = {} local i = 1 for str in string.gmatch(name, '([^|]+)') do pId, pName = str:match("([^,]+),([^,]+)") players[i] = {id = pId, name = pName} i = i + 1 end Or maybe something like this?
Lua tables can only have only one index. Not 2, not 3, not any other number of indexes. However, the index can start at any number. Not only 1 or 0 but also 666 or -13. But then the array does not work with built-in ipairs() and other functions, you have to write your own. However, in all your code examples, your array has only one index, so I am not sure what your question is about.
Be careful with your usage of table and array. Arrays need to be contiguous numerical indices starting at 1, but a table is just a dictionary, so it can have any kind of key, it could be a function, another table, a string, even false can be used as a key. Also, what do you mean when you say "a table can only have 1 index", do you mean when doing indexing, the operation is binary, but the table is the first operand, so you can only use 1 index, or do you mean keys cannot be identical within a table? 
I understand "table with 1 index" to be this: t[x] I understand "table with 2 indexes" to be this: t[x,y] I.e. "two dimensional array" in other languages. And you cannot do that in Lua. You must do t[x][y] which is a 1-index table inside 1-index table. But OP probably meant something else. I don't understand his post very well. P.S: Nil cannot be used as table index. Try it.
You're right, I mixed that up. So you meant the operand is binary only, alright.
Looks great, gonna try this out.
Thanks! Any questions, ask here or open an issue on the lua-vips github: https://github.com/jcupitt/lua-vips/issues
I found a bug :( there's a new version up now, 1.1-2. I added a new example: making a marble texture with a Perlin noise generator: https://github.com/jcupitt/lua-vips/blob/master/example/noise.lua It makes random images like this: https://2.bp.blogspot.com/-lHdJxkS53ZI/V9kiy-jqTtI/AAAAAAAAA2Q/AtK3LiGLmCM0mOC7LyhysKZzB3h5chKjQCLcB/s1600/x.png
The marble texture thing is fun from a performance and memory use standpoint. If you set size to be 10000 (ie. make a 10,000 x 10,000 pixel texture), and set the output filename to be "x.tif" (PNG write is very slow and would dominate time otherwise), it runs in 15s and needs 180mb of memory on my very ordinary laptop. You might think looking at the code that it wouldn't scale well to large images, since it does a lot of computation and it'll clearly need many copies of the image. The "turbulence" function, for example, is building and summing 14 10,000 x 10,000 pixel float images --- at 4 bytes per pixel, that alone should need at least 800mb of ram. The answer of course is that the whole thing is demand-driven. The need to create the output image for write will pull pixels through the program in small regions, so it never needs to have all 400mb present at once. Additionally, libvips makes a very lightweight copy of the entire operator pipeline and gives one to each core, so you get an almost linear speedup all the way to a very high core count (we've measured a 28x speedup on a 32-core machine). There's some more discussion of how libvips works here: https://github.com/jcupitt/libvips/wiki/Speed-and-memory-use
That's not even comma separated...
Sorry, I meant that when I open it in an excel sheet, that's how it would look like. Truth be told, I'm not really sure how .csv files "look like." By that, I mean I don't know how I would have to make the format of the csv file to make it look like how I want it
You want a loop that goes over each field of the table and prints the csv to a file (or the console). This is a simple (but incomplete) example of what you want for k, v in pairs(table) do print(v["image_id"] .. ";" .. v["caption"]) end Note that I print semi-colons because while csv files are normally comma-separated (hence the name), semi-colons are less often used in plain text so you don't need to quote them. However, you might need to quote the captions anyway if you want the program to be robust.
Can you briefly explain the functionality of vars k, v? What do they access exactly..?
The **k**ey and the **v**alue. See [PIL Chapter 7.3](https://www.lua.org/pil/7.3.html). Beware: this part of the the online version of the book is valid, but large parts of the rest are outdated. Fetch a recent copy at your local library/bookstore/hackspace/... if you want to learn Lua.
Ah man, thank you so much. I wrote this (it works). Let me know if you have any recommendations? function write(path, data, sep) sep = sep or ',' local file = assert(io.open(path, "w")) file:write('Image ID' .. "," .. 'Caption') file:write('\n') for k, v in pairs(data) do file:write(v["image_id"] .. "," .. v["caption"]) file:write('\n') end file:close() end write('vis.csv', myTable, ",") 
Do write(a,b,c) instead of .. this will avoid a temporary string concatenation and is more efficient. Probably doesn't matter here but it's good to remember
oh, THAT'S why k and v are used. I've been blindly following that convention since I learned Lua without having any idea why. Fuck me.
They're pretty simple. Check out these examples: https://en.wikipedia.org/wiki/Comma-separated_values#Example
**Comma-separated values: Example** The above table of data may be represented in CSV format as follows: Year,Make,Model,Description,Price 1997,Ford,E350,"ac, abs, moon",3000. 00 1999,Chevy,"Venture ""Extended Edition""","",4900. 00 1999,Chevy,"Venture ""Extended Edition, Very Large""",,5000. 00 1996,Jeep,Grand Cherokee,"MUST SELL! *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
lol. Then you may also be surprised to learn that the convention of using `for i,v in ipairs(t)` is because it's the **i**ndex. Since tables do both jobs (act as arrays with numeric indices, associative arrays with strings), the naming of the first variable tends to be used to reflect how you're using it.
You can't from Lua. It's designed to be an opaque value. All you can do is compare it to another userdata value for equality or inspect its metatable unless the library you are using to manipulate these userdata values provides functions that act on them. See PiL 5.3 Section 2.1: http://www.lua.org/manual/5.3/manual.html#2.1
Well userdata is usually opaque so you access its value with fuctions like userdata:getValue() or something like this (if userdata has metatable with these methods). If you are unlucky and your userdata doesn't have methods like this you can use very very ugly solution like this (if you want to use value that print shows you) -&gt; tonumber(tostring(gesture)) == 9 -- or something like that 
you could try to do it luasocket
If you like any sort of computer games, you could try out Love2D (/r/love2d), and just start messing around with one of the demos. We don't have something like the [Go Tour](http://tour.golang.org) unfortunately.
"Moonshine [is not] being actively developed anymore." Last commit was July 10. But it does seem it was inactive a few commits before.
I passed on that one, because I think it requires node and doesn't really support coroutines.
Do you understand the basic commands and how to put them together? If so one good way is to just start working on a project. This way you come up against what you don't know or don't know well and your learning becomes more targeted, focussed. There are problems with this approach but it does force you to learn enough to program which might be enough, depending on why you want to learn.
As it happens I was looking into similar weaknesses earlier this week for the mod system I'm currently working on in my own app [MiniCards](https://qubular.com/). Even though that uses LuaJ which is written in Java, there are similar remote code execution possibilities. This is due to the Lua bytecode being able to load arbitrary Java classes - thus any publicly constructible class on the ClassLoader path is potentially executable. As the default behaviour is to allow Lua binaries to be loaded by `load`, `loadfile` and `dofile` (and `require` if you enable PackageLib), any mechanism that allows these to be called to load arbitrary data is a potential hole. I should point out that there is a version of LuaJ ([Hardened LuaJ](https://github.com/empirephoenix/Hardened-Luaj)) that claims to address these vulnerabilities ; I haven't tried it as I had already started fixing them before I discovered it.
Ok, I was wondering what the difference was between them. Sounds cool.
Sandbox the code by creating a script-parser that only allows certain commands, perhaps by using LPeg. This way code such as os.exit() can't execute.
Do you want to be able to manipulate the data or just to be able to pass it around? Use userdatas for pointers, if the latter. Otherwise, you should create methods to manipulate the data in C, and expose that to Lua. If you don't want to do that, you need to create a custom table, which is what I think you're suggesting (actually, it is what you're saying, but I'll keep the above text anyway). See below.. [Part IV of PIL](https://www.lua.org/pil/contents.html#P4) is an excellent resource. Give it a nice long read and try to understand what each snippet of code does, and what each method does.
Both Moonlight and Starlight are developed by Paul Cuthbertson. Starlight came later is the one being well kept! 
Just pass the structures and values to Lua. Specifically, the thing I want to be able to do in the end is to basically call [SDL_PollEvent](https://wiki.libsdl.org/SDL_PollEvent) or similar Poll Function from Lua where I would then pass values of the event struct based on event.type parameter. But sometimes these member structures have their own structures and vectors or arrays. So maybe (in my limited Lua understanding so far) I would need to make nested tables? As in: (C) lua_newtable(l); lua_pushstring(l,"event_type"); -- specify the data struct passed lua_pushinteger(l,event.type); lua_settable(l,-3); lua_pushstring(l,"somevalue"); lua_pushinteger(l,event.value); lua_settable(l,-3); But here maybe create a new table in the stack as part of the first table with it's own parameters. So I could maybe write: (Lua) local i = 1 while i do table = mylib.My_PollEvent() if table ~= nil then if table.event_type == 0 then -- some event struct_example = table print("value: "..struct_example.value) print("nasted value: "..struct_example.struct1.value) end end end or something like that. The thing is I have a few very complex datastructures I would like to pass from C to Lua. Some of them contain lists and vectors or other structures. I would want to map them as closely as possible in Lua. &gt;Part IV of PIL is an excellent resource. Give it a nice long read and try to understand what each snippet of code does, and what each method does. Yeah, all those links are already purple ;)
This is extremely painful using the Lua C API. You should use the [LuaJIT ffi](http://luajit.org/ext_ffi.html). Your Lua code would look something like this: local ffi = require 'ffi' ffi.cdef[[ struct OBJECT { // ... }; struct PLAYER { struct INFO { char name[32]; int age; } info; int example1; int example2; struct OBJECT object_list[10]; // example object containing more structs } PLAYER; ]] function call_from_c(udata) local player = ffi.cast('struct PLAYER *', udata) -- ... end And your C code would be like: struct PLAYER *player = malloc(sizeof(struct PLAYER)); luaL_dofile(L, "script.lua"); lua_getglobal(L, "call_from_c"); lua_pushuserdata(L, player); lua_pcall(L, 1, 0, 0);
Yes. I see. I'm aware of LuaJiT but didn't know about ffi extention. At first look it looks like pretty much what I want to do. I'll look into it. And it seems that it supports all the platforms I'm interested in. Thank you. 
Just off the top of my head: You can create some sort of C struct reflection by creating a map of (member name)-&gt;(type, memory offset). If you only have a few structs, you could just define them directly: struct struct_refl { const char *member_name; const char *member_type; size_t member_offset; }; struct struct_refl PLAYER_refl[] = { {"info", "struct INFO", offsetof(PLAYER, info)}, {"example1", "int", offsetof(PLAYER, example1)}, {"example2", "int", offsetof(PLAYER, example2)}, {"object_list", "OBJECT[10]", offsetof(PLAYER, object_list)}, }; Then in Lua-land you just create a table with a __index metamethod that calls a C function which looks up the offset of the member, checks its type, and changes or accesses its value. If you only have a few members per struct, a direct scan through this array should be plenty fast. If you really care about speed, you could copy a struct over to a representation in Lua-land, set some sort of dirty flag if it's modified, and then send it back all at once when you're done modifying it. If you have a lot of structs, then you might want to define some macros to help you create these reflection tables, something like what [talloc](https://talloc.samba.org/talloc/doc/html/index.html) uses. They could be created at compile time or at runtime, depending on how you want arrange things. If you're really up to the task, you could parse a header file to generate these for you. I'm pretty sure Valve does that for their physics serialization, using LLVM.
&gt; Then in Lua-land you just create a table with a __index metamethod that calls a C function which looks up the offset of the member I don't understand this. I don't know what metatables is. EDIT: metamethods
I highly recommend you read the section in PIL on them, but here's a quick explanation: Metatables are tables that describe tables. For example, a metatable can describe what happens when you try to add two tables together (\_\_add), or if you try to access a member that doesn't exist (\_\_index). If I try to access the .example1 member of a table, Lua will first check if it has a metatable before returning nil. If there is a metatable, and an __index metamethod in the metatable, Lua calls it and returns its result in place of nil. This is also what is used to make classes in Lua; "objects" don't have members for each class method, they just all share a common __index metamethod which returns the class method when you try to access it on a class instance.
 local s = io.read() -- let's assume 1 2 34 4342 local t = {} for number in string.gmatch(s, "[^%s]+") do table.insert(t, number) end This iterates over the string and splits it into tokens that are inserted into table. You can then access the values by using: &gt;&gt;t[3] 34 More read on this here: https://www.lua.org/manual/5.3/manual.html#6.4.1 http://lua-users.org/wiki/PatternsTutorial
I believe `%S+` would also work for the pattern
Yeah, that works as well
I had to look this up because it isn't immediately evident, but in base64 you encode 6-bits as 1 character, or from another point of view 12-bits into 2 characters. With base91, you encode 13 bits into 2 characters. In order to encode 14 bits in 2 characters, you would need base128, which runs afoul of non-printable characters. I'm not understanding why all of the base91 encoders use = as an encoding character, as the [source paper](http://www.iiis.org/CDs2010/CD2010SCI/CCCT_2010/PapersPdf/TB100QM.pdf) suggests that - = and . are the excluded characters. My instinct is it has to do with email transmission, but maybe you can explain it to me.
thank you. this is exactly what i was looking for.
Lua is a very simple language to learn, so the answer to your question will mostly depend on the context you will be using it in, and how much prior ezpiere with other languages and/or game development you will be bringing to the table. If you already have some experience, you can probably pick up LÖVE (a free Lua-based framework) and the Lua skills required to be productive with it in a matter of days.
Idk tbh, i was just following the standard that all the other code was using. When I get to my pc ill link a site that has some explanation of it. Also thanks for the link i give that a look as well
I didn't know there were other base** encodings. From some Googling there is base85, 91 and 95.
I did a little more digging, the Paper might be from 2010, while the reference encoder by Henke appears to be written before 2006. So, two independent inventions is why they're different. cest la vie.
Ah nice find, I guess the 2010 paper has the accepted standard. Well if anything I hope this helps anyone. If using luajit and its bit library it actually works really fast, the pure lua version is a bit slower though... Other implemtions can be found here: http://base91.sourceforge.net/
Also, pico-8 is very easy. It's not standard lua, but it's close and the syntax is the same.
Lua has a very low skill floor and a very high skill ceiling.
Thanks man. After some experimenting I did it. I don't have the code here because I'm at home right now, but I understood the gist of it. If I define the complete structure definitions through ffi I could basically memorymap the entire structure values. (they have to be exact though). I still have to experiment a little on how to map vectors to arrays when defined through ffi.
Thanks, but I still have some missing knowledge. As I see it this is pretty advanced stuff for Lua. But I'm still learning and as I'm learning through practice I'll get there eventually. EDIT: I will have some questions when I get there though. Is it ok if I ask you directly?
You can use the [table.sort](https://www.lua.org/manual/5.3/manual.html#pdf-table.sort) function to sort tables using any comparator function. If you need more help, feel free to post more information about your problem. What have you tried? Which errors have you gotten? What is it exactly that you want to happen?
I trying to modifie table.sort but dont fires fine :( table.sort(tokills, function(a,b) if hates[i] == tokills[i] then return order(BangCharKills, a, b) end end) 
Yeah, no problem!
I'm not exactly keen to download random files to my computer. Could you please post a snippet of the code instead?
Lua is honestly a scripting language. As much as we all love it. It is not designed for usage of games from scratch. Therefore companies do not generally hire for solely Lua. That doesnt mean u cant boast on ur resume but it cant alone get you a gaming developer job. 
due to the "null" values in the file it changes too much when copying and pasting so here is a screengrab of one of the lz4 compressed files that has been decompressed, i need a way to compile to standard lua for editing, but as it's in 5.3 i can't figure it out http://imgur.com/a/GiWB2
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/xwa5Mbv.png ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dl1ecfn) 
im not wrong lua is not designed for gaming. It lacks an inherit class system and only runs on a single core. It lacks the proper libraries needed for graphics. There are third party applications but that doesnt mean lua by itself is for graphics. Lua is generally used ontop of a game for developers without exposing the internal programming language. It also is a language that is used for small projects due to its simplicity and small and fast library. This is why lua is considered a "scripting language." Im not putting down but lua isnt going to be the gaming standard anytime soon. Ur better off learning C++ and Python and using Lua as a replacement for bash. Haha
metamethods cannot be inherited a feature most common and very powerful for large projects and they also dont have class names another important thing needed for large projects. It is not possible with the core Lua libraries (if you don't count creating multiple processes and communicating via input/output), but yes there is some support for Lua bindings which is not what i mean by multicore.
Actually parent is right about lua not designed for use in games - I remember reading a paper somewhere on the internet saying that it was never intended as an embedded language. It just happened that's what it gets used for, because it is a small simple language, reasonably performant, easy to write and easy to interop with other languages.
PIL is available on the internet for free. I'd link it, but I'm on mobile. Just google it and you'll find it 
That seems to be a problem in the things you are importing. It appears to be with torch from that stack trace. Your best bet it taking it up with them
https://www.lua.org/pil/contents.html There you go.
Are you using LuaJIT? If not, [this](https://github.com/soumith/dcgan.torch/commit/f709ad999d8e5f13457b0a0a7c2d7d8c4ffa8696) might help.
Thanks. And also in response to the OP saying learning from the Wiki is hard, well you better snap out of that mindset really quickly because the wiki is the only place you're going to be able to find Roblox specific API documentation and examples for lua. 
I cant done positively it, somebody have an idea?
Your code looks fine. Got any links to share about how to program this mouse?
Another alternative is https://tic.computer/
Have you checked to see that the events are even firing? Try something like `OutputLogMessage("mouse 2 down\n")` and `OutputLogMessage("mouse 2 up\n")` in the handlers. This text should show up in the bottom of the script editor window. If they are firing, try changing the timing of the PressKey/ReleaseKey or use the built-in `PressAndReleaseKey("j")` function. If they are not firing, perhaps there's an issue with the load settings of the profile this script belongs to.
They do have docs specific to the hardware. I don't know where they are offhand. But I buy logitech devices specifically for their lua capability. It isn't always as straight forward as it should be though.
I have a Logitech keyboard and mouse and I haven't even tried to program them besides the extra buttons on the mouse. I guess I should try one day. 
I used to do it to make certain things in MMOs easier. Technically cheating, I guess... but it didn't automate total game play, and it was a hardware action, so I did it anyway. :)
I don't know about Garry's Mod but in lua if you want to create a global variable you simply don't add "local" ie function foo() bar = 2 end foo() print(bar) &gt;&gt;2 I guess if that doesn't work you could try _G["bar"] = 2 print(_G["bar"]) &gt;&gt;2 
Don't you need to call foo() before you print the output? 
That's true, thanks
It's ok but I want to make if somebody already readied he won't be able to ready again. So I want to make a variable what can I use at cliend and at server side too. If I use your method only at server or only at client side it's working, but if I use it how I want it writes: "attempt to compare nil with number"
Have you tried something like they suggest [here](https://facepunch.com/showthread.php?t=1272643&amp;p=40750473&amp;viewfull=1#post40750473)?
You need to learn how to use datatables or the net system. Look them up on the garrysmod wiki.
http://wiki.garrysmod.com/page/Entity/SetNWInt http://wiki.garrysmod.com/page/Entity/GetNWInt The pages include some examples of how to use the functions. If you need more help, you should post in the GMod development section on facepunch.com Make sure you post in the correct section, cause they'll immediately ban you if you post in the wrong one.
Im New to LUA and programming at all... I want to learn it "as fast and easy as possible" and I mostly want it for some small games 2D and 3D but also for little programms (Not huge projects and stuff) and I found LUA under "good for games".. Now that i read this, i dont know if its the right leanguage anymore for me, is it (today with never Version) a good starting point to learn programming and getting into it or should i change to another one? I would love to hear an opinion from someone who knows this leanguage and stuff. (: Oh and if i should "relearn" another one, wich would you recommend and why Exactly? Edit: i First also thought about Python as it is also for games if i know this right, and for Android apps wich would be godly nice for my "little projects" :)
Oh sry about the Lua LUA thing, my Phone autocorrect words it dont know to all caps because it think it is a shortcut maybe? Idk. However thanks for this. The last Part insipired me really! "Best thing ever done in my entire life" Sounds great. Well Lua is Kind of an easier leanguage right? So even if i wont use it Forever its a great Base knowlegde then i guess? (: Oh and how did you learn it? Videos? Books? (:
Oh yeah i saw a love2d Video and it was good. So i will Look this up more closely After work. And dude, the guns and mods in garrys mods are with Lua? Because i LOVE!!! this game. And I played a Lot of TTT a few months ago, this would be so cool if you could Show me some of your work, the one who you started with and what your last guns was like. Just to See the learning curve. *~* This motivates me so much to play more TTT again and Code more! I Thank you so much. :3
Thats great. I will Look through all this After my work is done. (5long more Hours lol) Im so happy thinking about coding New weapons for gmod :D Thanks for all the advice and links. :)
I will Do this. And thanks again. :D
Esse subreddit é sobre a linguagem de programação Lua, acho que não tem um subreddit específico para falar sobre o nosso satélite natural... --- This subreddit is about the Lua programming language, I don't think there is a specific subreddit to talk about our natural satelite...
I found two. /r/moon and /r/themoon.
**Here's a sneak peek of /r/moon using the [top posts](https://np.reddit.com/r/moon/top/?sort=top&amp;t=year) of the year!** \#1: [Tonight's Supermoon, taken from my balcony w/ Nikon D3300](https://i.redd.it/d3wng33xbhxx.jpg) | [8 comments](https://np.reddit.com/r/moon/comments/5ct2ml/tonights_supermoon_taken_from_my_balcony_w_nikon/) \#2: [The moon through my binoculars with my phone](http://i.imgur.com/iXP22ZA.jpg) | [0 comments](https://np.reddit.com/r/moon/comments/6lbuwg/the_moon_through_my_binoculars_with_my_phone/) \#3: [Moon rise over Boston](https://i.redd.it/4lvjv4ng5aly.jpg) | [0 comments](https://np.reddit.com/r/moon/comments/5z9dxx/moon_rise_over_boston/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
I've read this several times, but I still don't have a clear idea of what you're trying to do in your Lua code. Can you give a short example with example data and how you expect your data to be transformed at each step? Showing us the broken code and confusing comments isn't helpful.
There are a few possible reasons I can think of: * No one has needed it; * No one who uses Lua has the technical knowledge to make a proper encryption library (it is usually not recommended for anyone but encryption experts to write such libraries); * No one wants to put in the effort to make a proper library with all the testing required to make sure it's secure (because keep in mind that a lot might be at stake). For these and other reasons, it's usually a better idea to use a well-tested, mature library created by experts in the field.
I think it's the second one. There's been plenty of attempts, so clearly I'm not the only person who needs it, and clearly people are willing to write huge amounts of useless spaghetti code.
One problem with implementing crypto functions in pure Lua is that it is very difficult to guarantee that your functions run in constant time and are not vulnerable to timing attacks. Are you sure that you need something that is pure Lua and cannot use any C code? If including C is OK you could use something like [tweetnacl](http://tweetnacl.cr.yp.to) or [libsodium](https://download.libsodium.org/doc/)
Timing attacks aren't a problem. Also, it's pretty obvious from the OP that I'm aware of but unable to use what you suggested. If I'm saying "pure Lua", I clearly mean pure Lua.
Ah, yes, of course. I originally meant there is no sub for talking about the moon in Portuguese, the English translation was an afterthought. Thanks!
I've seen various pure Lua cryptography libraries but none with asymmetric stuff. There are people who are capable but there aren't many cases where you would need a pure Lua implementation so why bother? Also, I expect the performance would be very poor. 
Also the existing libraries written in C can be called from Lua afaik. (I have not used C libraries in Lua yet)
Ignoring the implementations that exist, mainly because nobody has felt a need for it and it's rather difficult as it requires a bignum implementation too. This makes them very very slow, too. Almost all high-level languages will call out to native code to do this, the issue isn't unique to Lua.
Cool! Careful with the X-Posting of the same content...
It never was dead, I use it all the time on a handful of sites. :O
Yes, I’ll take some money too please
Hello, and welcome to /r/lua. Though you did write a game using Lua, I don't see that as sufficient grounds to be self-promoting your donation requests.
This line `lua_settop(l, 1);` is actually removing things from the stack. You have to think of the lua stack like a stack of cards where every card is a value. When you enter the C function, the initial values are the parameters given to the function. The first value is at index 1, the second at index 2, etc. When you call `lua_settop`, you are removing all the cards until you have the amount of cards you asked for, which means you removed the card that you want to use. As for how you get the parameter you want, it's simply like this: `int secondParameter = luaL_checkint(L, 2);` Feel free to reply to this comment if you need more information.
It works. Thanks. So suppose I have 2 tables on the stack. Would that mean that I could get both tables by: 1. Get the first one like I did in the code above. 2. call lua_settop(l,1) - remove the first one. 1. call the code above again on the second one.
No, because `lua_settop(L, 1)` removes everything until there is only the first parameter left on the stack. What you _could_ do is put the code into a function and give the index of the table as a parameter. For example, if the second table was the second parameter you would give index 2 to the function. If you need a good tutorial on how to use the C API, I recommend [Programming in Lua](https://www.lua.org/pil/).
Yeah, I tested it and it doesn't work. I don't really need a second table as a parmeter I was just messing around. I've read P. in Lua. But I need to work around the stack manipulation a little more. I seem to be missing stuff. Thanks anyway.
Jumping in here to recommend a pattern that may help. When you have a required number of parameters, instead of testing with `lua_gettop` you first set the top of the stack to the maximum number of arguments you expect. In this case two. So your C function starts with lua_settop(l, 2); luaL_checktype(l, 1, LUA_TTABLE); luaL_checktype(l, 2, LUA_TTABLE); The second "table" will be nil if only one argument is passed. You can always refer to the parameters as 1 and 2, as long as you don't underflow. Now you can push your local values and they go on top of the parameters. You can use positive indexes for locals, the next pushed value will be 3, but by convention negative indexes are used to distinguish local values. It also means your code works the same when you add a third parameter. Summary: Positive index for parameters. Negative index for locals. Adjust the stack height once when entering a function and again when exiting (exit adjustment is optional when returning to Lua). But pop values after you push a lot such as during loops.
Thanks wo/man! This really helps to get my mind around it. I'll go mess with the stack over the weekend. Also a quick question. Today I was passing 4 parameters, table being the first. And no problem there. But when I run the stackDump() example from P. in Lua, at the start of the function I get. table, 0, 0, "test string" Any idea what's that about? (second and third params are not 0)
lua for web development? I dont think it would be worth pursuing. As PHP/HTML/ and javascript are dominating the industry.
Lapis is a great tool for web-app dev on the back-end: http://leafo.net/lapis/ Fengari is a cool tool on the front-end: https://github.com/fengari-lua/fengari
https://www.lua.org/pil/
Most documentation nowadays are online. Easier to keep updated. Won't go obsolete. Your best bet to learning any programming language is read resources online rather than paper-bound. That said, I'm new around here since I just have a passing curiosity with Lua so I can't even recommend an online tutorial just yet. 
Fair. Lapis is great for larger scale apps. Things that rails or Django would be used for. Middle ware heavy, but for good reason. 
Unfortunately, I can't think of any good resources for it. Lua's a fairly simple language, so most resources tend to just be rudimentary "Here's how to do &lt;foo&gt;". Everyone usually just suggests *[Programming In Lua](https://www.lua.org/pil/)* but I don't think it's a particularly good resource for someone trying to self-learn without existing programming knowledge. That's actually the problem with *everything* Lua-related. It's usually in the context of modding some game and how to interact with that game's API, or a fairly bare-bones explanation of Lua syntax and features, and PIL is no exception to this. It's not Lua, but I'd suggest maybe trying to go through *[How to Design Programs](http://homedirs.ccs.neu.edu/matthias/HtDP2e/)* instead. It uses a custom subset of the Racket language (a Scheme dialect) designed to teach **programming** rather than a language. It starts simple, with how to use the interactive environment as a fancy calculator, and builds up toward doing more complicated things, with examples and visual aids (thanks in part to the interactive environment of DrRacket, which can directly deal with images, save them as variables, etc.) It also has the benefit of not having much syntax to remember (just parentheses!), so you can focus on learning how to think in terms of programming, rather than having to remember syntax rules, what needs a bracket vs. parentheses, and so on. If you can get through that, even just partway, you should have a good start toward picking up other languages. [As an aside, for anybody else reading this: before you think I'm completely insane for suggesting this in a Lua discussion and start mashing downvote, consider that there's a lot of Scheme influence to Lua, so the suggestion may not be completely mad. They're both languages with minimal runtimes and simple syntax, extensive use of a single complex data type (tables, lists), and commonly make use of functions as first-class data. As languages go, I think it's a transition that can teach someone how to better use Lua's *strengths* instead of ignoring them and treating it like a slower C.]
I second [Programming in Lua](https://www.lua.org/pil/) as a recommendation - it is *the* book to learn Lua, written by the main architect behind the language itself (Roberto Ierusalimschy). The [first edition](https://www.lua.org/pil/contents.html) is available online, but I personally recommend at least the second edition (of which I personally have a signed copy) - the [fourth edition](https://www.amazon.com/exec/obidos/ASIN/8590379868/lua-pilindex-20), the latest, sounds like a good pick (the description says it's been completely re-organized, based on Roberto's experience from decades of teaching Lua). As for an environment to learn it *in*, I recommend [Cloud9](https://c9.io/), which gives you an entire Linux integrated development environment for free (you may also want to pick up the [Linux Pocket Guide](https://www.amazon.com/Linux-Pocket-Guide-Essential-Commands/dp/1491927577/), which is a good reference for learning how to get around on the command line).
As /u/xPhoenix777 pointed out, lapis is great for developing web-apps, or just normal websites with some dynamic content. It offers pretty much everything I need and is built to be used with both lua and moonscript.
The industry is slow; it often chooses the tool that most people already know, so they have a wider pool of potential employees. Not many people know a lot about Lua, and looking for employees when you use lapis means you either need to teach people how it works, basically paying them for nothing until they get used to it, or you look specifically for people who are experienced with it, meaning you probably miss out on a lot of talented people. When you're looking for a tool for your own web app, things are different; you only need to learn how to use it yourself, and probably are doing it partly for fun and to learn something new anyway. As long as a tool is well documented, you can perfectly be the only person on earth using it, and everything is ok, and if you later decire you don't like the tool after all, you can just move to something new without having to worry about wasting time or your website being down for a while.
It's a mix of all three: there is no single person fulfilling all the requirements. No one has needed it (because in most cases you can use C, or you already have access to a crypto binding), has the knowledge to write it, and has decided it was a good idea to open source their code, taking into account the fact that maintaining a crypto library is no small task. Like I told you on the mailing list the primitives to make something like libsodium's crypto_box are available in [plc](https://github.com/philanc/plc) but not the high-level code. For someone comfortable with Lua and crypto, it shouldn't be too hard to implement this. In case you finally decide to do it, what you need to know about that way to do asymmetric encryption is that you can use either the sender's private key and the receiver's public key *or* the sender's public key and the receiver's public key to generate the same shared key, which can then be used for symmetric encryption. Now if you really need this and decide to do it, look at tweetnacl. [This is crypto_box](https://github.com/ultramancool/tweetnacl-usable/blob/a8dcaa769d79b010cfdf7313ea02977e7a070003/tweetnacl.c#L473-L478). crypto_box_afternm is the secret key (i.e. symmetric) cryptography you already have. [crypto_box_beforenm](https://github.com/ultramancool/tweetnacl-usable/blob/a8dcaa769d79b010cfdf7313ea02977e7a070003/tweetnacl.c#L456-L461) is two functions, `crypo_scalarmult` and `crypto_core_hsalsa20`. The hsalsa20 is easy to implement, you could also go for hchacha20 instead given that it is already in plc. The crypto_scalarmult is trivial once you have the `ec25519` primitives which are already in plc. Note that what I am talking about here is [the first line of the "in the future" section of the plc README](https://github.com/philanc/plc/blob/bf9bf844ced1f2a26ce4bc4dea9d562ec09e82cb/README.md#in-the-future)... Actually, I think I might implement this over the weekend and contribute it to plc. It would be a nice addition to the ecosystem. EDIT: Already did salsa20, I will probably do the rest tomorrow. Check [this](https://github.com/catwell/plc) out if you want to follow my progress.
I appreciate the response. I've been watching some videos related to what I want to script for (DCS World) and the commands and notes etc all make sense, it's the how do I start, and end that seems to be tripping my brain up. It's like I like the meat in the sandwich, but can't figure out how to use the dang bread! I'll give that a shot along with some of the practice stuff from the videos, I can play side by side on a 2nd monitor.
Yeah, I still prefer a book I can write on/in and leave marks in. It's the old school engineer in me, and of course working for the Federal Government for 25 years where we wrote everything in triplicate and on occasion also filled in the forms on pc. The Only programming language I actual used in my life was HAL/S on the shuttles, but it was a lot like what I knew coming out of High School waaay black in the 80s, and was almost like just typing lines of what you literally wanted, then another team compiled it to run, so on the rare occasion I had to read or suggest something new, it was all plain text straight forward.
Hey what about Codeacademy.com? Would going through the basic tutorial on Python or C+ help with Lua?
Personally, I could go either way. On the one hand, I prefer Lua being as simple as possible and things like this hide what's going on behind the hood. On the other hand, we already have other metamethods like this so I guess it fits with `__call`, `__index` and `__len`.
Hi. I was in exactly the same boat. I learned to program in BASIC on my Commodore Vic-20 and then later the C-64. After that I didn't do any programming at all for nearly 30 years. When I started working on my One Big Project I still kind of knew how to think like a programmer but the technology had advanced soooooo much that in some very important ways it felt like starting over. So first, there is no dummies type book for Lua. And yes, the main book, *Programming In Lua*, does assume you have some contemporary knowledge of programming. I think it says it doesn't but it really does. The good news is that Lua is a pretty simple language. It has fewer commands than something like Python and I found the syntax a little easier to get into than Python or Perl when I began my project. The further good news is that my project has blossomed into something rather large and cool. Ie, I know you can do it too. The best I can do is offer some hints. It's not a bad idea to get the *PIL* book as it is helpful. There are no line numbers in any contemporary, well-used programming language. Your example program would look like in Lua: print("Hello, world!") I'm not sure where you meant that `goto` command to go to so I left it out. Speaking of, while the `goto` command does now technically exist in Lua, modern programming does not use the `goto` command like we did back in the day. Program flow control happens via conditionals (`if ... then` statements, etc) and *functions* (what might have been called *subroutines* in your old language. So here's a simple program written somewhat in the BASIC I used (entirely from memory, so it might not actually run). 10 INPUT "HOW OLD ARE YOU?",AGE 20 IF AGE &gt; 21 THEN GOTO 40 30 PRINT "YOU ARE TOO YOUNG" 35 END 40 PRINT "YOU ARE OLD ENOUGH, WELCOME TO THE GAME" 50 ... [the rest of the game] In Lua it might look like: io.write("How old are you? ") age = io.read() if tonumber(age) &lt; 21 then print("You are too young") os.exit() else print("You are old enough, welcome to the game") end [the rest of the game] The `end` in the Lua program is the end of the `if ... then ... else ... end` command. It does not mean the same thing as `END` in the BASIC program. Ok, that looks more verbose and complicated but it's easy enough to get used to and is a product of the greater flexibility that contemporary languages have now, being able to run on multiple platforms. Unlike in the BASIC I learned on, a variable name can hold any kind of variable. So in the BASIC I used `AGE` was a number and `AGE$` was text. In Lua `age` can hold any value (it is *dynamically typed* -- I think that's the term) so in our comparison I had to use the `tonumber` to tell Lua to treat it as a number. But the important thing is that I didn't use any line numbers and yet the flow still works. The other big thing that Lua does is use functions. These are like the subroutines you might have had. In my BASIC you would have something like: 5 AGE = 22 10 IF AGE &gt; 21 THEN GOSUB 1000 15 PRINT"THE END." 20 END 1000 PRINT"YOU ARE OLD ENOUGH AT AGE ",AGE 1010 RETURN In Lua: function print_response(value) print("You are old enough at age" .. value) return end age = 22 if tonumber(age) &gt; 21 then print_response(age) end print("The end.") Notice how we put our function first in Lua. That's important. It gets "read" into the Lua interpreter first but nothing is actually executed that we can see. But then later when we call the function `print_response(value)` it works. And notice how we were able to pass the value of `age` to our function which now treats it as the variable `value`. So basically it's conditionals and functions. Sorry if this was too basic. These were the conceptual leaps I had to make early on in order to unlearn BASIC and start programming in Lua (or any other contemporary language). It really is easy and fun. Also, I didn't even touch upon the use of local vs global variables in Lua. It's very important to come to grips with that. If I were to use the actual code above, instead of the line: age = 20 I would use: local age = 20 By default Lua treats all variables as global whereas you typically want to restrict variables to whatever scope you are working in. So always use the `local` command when creating a variable and just make sure it lines up at either the same level you need to use it or a level above that. 
Wait. You wrote software for a space shuttle? You made that sound mundane. 
Can lapis handle the "sending email" use case I mentioned above? I ended up scheduling a python cron script to pull emails from the database and send.
Do you need it to send immediately? You can run bindings to smtp via lua socket: http://w3.impa.br/~diego/software/luasocket/smtp.html Ideally in a large web app, email is a separate process for scaling purposes anyway. 
You can make simple custom apps on thin platforms like openresty. If you want to have data models and intricate scaling apps, you either write a ton of code to support that or use a tool with data modeling and a layer in the stack for managing that. If you look at any popular web language, you will see tools/frameworks/packages that are super thin and great for small apps, and you will see larger enterprise-like solutions. The reason you "fight" a framework is because they are all build in certain ways to make a process more streamlined - you may not approach the problem the same way. If you want a tool that has ORM or other handy abstractions, you generally need to go with the authors pattern or build on top of it more. 
Oh I didnt write it, I could read it, but if we needed changes during my time when I worked on the main propulsion system (SSME's), HAL/S was easy as reading a text book with brackets and number signs. So I could write back, on line 445 instead of Valve 274 to on auot at 2:22, make it valve on auto at 2:21, etc, then the tech geeks would code and compile the changes for SAIL (Shuttle Avionics Integration Laboratory) where they and the astronauts would test it.
Ah, now your talking my language. Literally lol. My thing with LUA is just the opening and closing guide, and from there, I can dirty my way through the code part with some help from books, videos, cheat sheets. Like does Every LUA script open with the same command? do they all end the same way, etc, is what I'm having a tough time with.
It's "Lua", not "LUA". It's the Portugese word for "moon" (Lua was developed in Brazil).
Hey, he's accustomed to languages being ALL CAPS (COBOL, FORTRAN, BASIC, etc.) because REASONS. Give the guy a break, old habits die hard. :)
yeah, I saw what you said about coming from line-numbered BASIC (I had an old hand-me-down TRS 80 and a Commodore 128, so I'm familiar with that mind set), and it's a totally different world now with programming. There are similarities, but programming standards have come a long way and it makes things a lot easier once you adjust. I'm working on writing up a crash course of sorts to help out, but it's going to take a bit so I figured I'd give a heads up now instead of not replying until done.
I think even Tecgraf uses Python for web stuff... this has always surprised me.
This is what I use to send email in lapis: https://github.com/leafo/lua-mailgun
Hey please do! 
&gt; Vic-20 My *man!* [Loved those cassette drives!](http://imgur.com/aRB8Q56)
You say you're scripting for DCS World. Have you tried looking over [the modding guides in the Steam Community Hub for that game?](https://steamcommunity.com/app/223750/guides/) There might be something there that will help, and it will all apply for learning material.
Here's an idea of what I want to work with. It makes the standard mission creator look like child's play when you can add the scripts in. [DCS Lua](https://forums.eagle.ru/showthread.php?t=138043)
&gt; Like does Every LUA script open with the same command? do they all end the same way, etc, is what I'm having a tough time with. Not at all. Both of the Lua scripts I wrote above work as written. All you need to do is start writing. If you want to start with input from the user then do so. If you need functions then you'll have to put those first. If you have a lot of functions then put them in a separate file (or files) and then use the `require` command to pull in that file(s) in order to load those functions. That's a pretty standard approach and is literally the first line of my One Big Project. You might need to define some variables and/or tables early on. But otherwise just figure out the logic of what needs to happen in your program and get started. If you are going to create a graphical interface (mine are just command line programs) then that's a bit more involved but basically you load the libraries (basically functions), create the visual objects, and then proceed as above. 
For my first three months or so with my Vic-20 I would come home from school, write a D&amp;D player generator, turn off the computer that night, and then the next day type it all in again from scratch. The cassette drive was a fucking god-send. Slow as fuck but totally awesome. A year later (or so) I got a floppy drive (256 KB?) and I nearly exploded with excitement and power. I also had the 16 Kb memory expansion (the Vic-20 only had 3.5Kb of user space RAM). And so much more. Seriously, I loved that machine to death. The C-64 was superior in so many ways but that Vic-20 was a miracle. I had every single useful POKE address memorized and could make the machine sing (figuratively). On the C-64 I learned machine language which combined with sprites and the separate audio chip meant you could do real magic. 
Exactly! Back in the day there was no lowercase. Life was much simpler.
That's it, I'm done. Check out `box.box()` and `box.box_open()`, they do what you want. They have the same API as [luatweetnacl](https://github.com/philanc/luatweetnacl). There is an example [here](https://github.com/catwell/plc/blob/eea3dae24dfc53490a214253106dc708ae27df4f/test/test_box.lua#L16-L20). Note that if you can you should override the `randombytes` function with something more secure than `math.random` (e.g. on Linux just read from `/dev/urandom`). Sadly there is nothing better and portable. Alternatively, generate the keypairs in C using another library such as luatweetnacl, it is the only part of the code that needs it.
The C64 audio was incredible. I spent way too much time playing Impossible Mission, loved having Stephen Hawking threatening me every so often. 
I'd rather not have it. While I understand where you are coming from, having nil and false as the only "falsy" values is an assumption I do often in my code. I think that getting falsy tables would break some of it in subtle ways.
You could try [Learn Lua in 15 minutes](http://tylerneylon.com/a/learn-lua/). You could also try running the [Lua Missions](https://github.com/kikito/lua_missions) (disclaimer: I'm the author) 
Maintenance work is also cool. Anyway, why Lua? Sounds like you would have a better time working on Python where things are how you read it. It works everywhere and it has plenty of analog books you would enjoy scribbling on. 
By the way, your other comment with book recommendations isn't showing up. I think maybe it got put into a black hole because of having multiple amazon.com links, but I'm not sure. I noticed the comment count doesn't jive with the number of visible comments, and your user page shows you've commented twice here but the first one isn't visible while this one is, which explains why. 
Agreed. Lua isn't Python or JavaScript. The current setup allows one to make strong, simple assumptions about truthiness. Breaking that contract (whether we consider it express or implied) is dangerous.
I kinda get what you mean, but at the same time every metaprogramming feature can make code behave in a weird way if used incorrectly. If a table/userdata really represents either a false or a nil state, would it really be that bad to just treat it as such?
I would agree with others that explicitness in testing for truthiness would be better, and you can accomplish this now with the `__call` metamethod (`__call = function(t,...) return t ~= NIL end`). It's very small in syntactic usage (just `()`) and still conveys that you are doing something somewhat out of the ordinary.
I don't like that idea at all. First of all, while longer than just `t`, `t ~= NIL` still conveys that we are testing if the value is (or represents) nil, while a function call could mean anything. My second problem with this is that you have to first be sure the variable actually contains this custom table type, or it may crash (calling a string, etc.) so you'd have to write even more in the end. And a third problem I just noticed is that the __call metamethod should mostly be used to disguise something as a function, and in this case that's not what it's doing.
You've got a lot of issues here. You'll find that to get meaningful help, you'll need to focus on one thing at a time, provide error messages etc. Surely there a detailed instructions for installing luarocks on Mac and windows (I've only used Linux). Following those instructions, what errors are you seeing? Similarly for windows, what errors are you seeing?
It gives mainly directory errors, various files always missing, mainly .h files lua.h this, or something something.o file, its always different, depends what library I am installing or which way I try and install luarocks.
If make is complaining about not being able to find lua.h, your Lua headers aren't where make thinks they should be. You need to put them in the default search path for your toolchain, or manually specify their location in the compile command. For gcc, this would be `-I/path/to/Lua/headers`, and it needs to go on the command operating on .c source files, which probably has the `-c` flag set. Give us the full output from something that isn't working and we can be more helpful.
The main wiki page links to wrong articles, i.e. they contain "shape" while the real articles do not. Input and Sound aren't linked as "Next Step" on the previous tutorial. For the non object oriented rendering, I find it odd that you have a function color() that defines the color of the next shape that is being drawn. I'd much more expect you to pass the color to the drawing functions itself. The abbreviation `circ` is weird and artificial, just write it out as `circle`. So what exactly defines how long the program should run? Is that even adjustable in Lua or does it just run until the user closes the window? What about SFML's TextEntered event, can this be queried in Lua as well? Maybe an example with a textured rect would be nice to see in the tutorial as well. Otherwise I quite like it, simply yet effective.
Thank you for all the feedback! The wiki is still being written and translated, forgot to update those links though😅. There will be more tutorials soon, I am planning on making a tutorial on how to make a game like breakout, space invaders or similar. When you are using simple rendering, the `color` function sets the color for all the following shapes, just like if you changed your pencil color and then continued drawing on your paper. The abbreviation `circ` is temporary, as it will be all changed to ellipse for a bit more functionality. Right now the program runs until you close the window, but I'm working on an `exit()` function that will close it on a keypress, mouse click or any condition. I am learning SFML at the same time I develop this project, so I'll have to take a look on all the avaliable events.
Neat! Btw. don't hesitate to post about your project in the [official SFML project forums](https://en.sfml-dev.org/forums/index.php?board=10.0) as well.
I'm the author of Sailor (http://sailorproject.org) which runs over OpenResty or Apache mod_lua and other webservers as well. I aimed it to be the rails of Lua, but unfortunately my life went all over the place, and it's sort of abandoned now since there aren't enough contributors to help out :( Even though it's abandoned, it still works as intended, and I'm using it successfully on some websites such as my personal page, the lua community blog, and there are some external uses in production as well. But when giving recommendations nowadays, I recommend Lapis (already mentioned) or luvit https://luvit.io/, the nodeJS of Lua. Hopefully I'll get back to developing Sailor one day though! I'm still accepting help or am willing to hand it over to someone engaged :)
I will get full output later when at my computer, I installed lua by downloading binaries only but I have a portable version of gcc installed, will the header files be in gcc folder somewhere?
You can't compile the modules that are failing without the lua headers and either the source to compile with it, or a static/dynamic library to link against. Whatever version of GCC you have may very will have come with the lua headers, but it may not have. You can get the full source of any lua version you need right here: https://www.lua.org/ftp/
Hello, and welcome /r/lua. Questions about Garry's Mod should be directed to one of the forums specific to it.
You aren't missing anything in terms of ease or ability to create things yourself. Most shops use tooling/plugins/dependencies to help the devs focus on the business logic. While many such things can be can be written for the projects, it does bump up against code re-use. It is a double edged sword, the less boilerplate code you write, the more time you have to focus on the core logic of your app - also teams have a set standard way to handle things like web requests, routing, DB calls, SSO, and more. BUT the more boilerplate code you use, the worse off you may be when bugs arise in the dependencies. I have been in web dev shops for about 10 years - each side is painful for it's own reason (I wouldn't rewrite Rails, but Rails has many oddities and bugs that I wish I didn't have to deal with). In the end, it is up to you. Frameworks are great to have a standard starting point for spinning things up or handing things off - if it will be only you and only this project you really plan on creating, go hog wild on a bespoke solution!
Wouldn't you just write the contents of the file to the other one in append mode?
From the sounds of it, it seems like that's what I want to do, but I don't know how to do that (since I have used more functions made for the application more than lua's own coding). Could you (or someone else) possibly have a sample of what appending between 2 files looks like?
It'd be something like this: --Read the file you want appended to the other one local inFile = io.open("fileName", "r") --Open the file in read mode local inFileContents = inFile.read() --Read all of the file inFile.close() --Close the file os.remove("fileName") --Delete the file, since you're done with it --Append the contents of the first file into the second local appendFile = io.open("fileName2","a") --Open the second file in append mode appendFile.write(inFileContents) --Append the contents of the first file at the end of the second file appendFile.close() or, more compactly: local inFile = io.open("fileName", "r") local appendFile = io.open("fileName2", "a") appendFile.write(inFile.read()) inFile.close() outFile.close() os.remove("fileName") Though I will say it sounds like it'd be easier (and faster) to store what you're appending to the other file in a string and just writing it all at once rather than writing it to a file, then reading it, deleting it, and then appending it. 
 local inFile = io.open("./unimportant.lua", "r") local inFileContents = io.read() inFile.close() local appendFile = io.open("./Generated file "..tme..".lua","a") appendFile.write(inFileContents) appendFile.close() This is what I have, but it is stating that a file is expected in the ` appendFile.write ` line, but a nil is present, so does that mean that the application handles ` io.read() ` differently? I didn't delete the file as a sort of debug, and the file does have contents, so I'm leaning towards the fact that `io.read()` is handled differently than it should.....even though that doesn't make much logical sense. (Also what makes me think that it's handled differently is `io.read()` happens to make you enter a string in the debug application instead of the standard one.) &gt; Though I will say it sounds like it'd be easier (and faster) to store what you're appending to the other file in a string and just writing it all at once rather than writing it to a file, then reading it, deleting it, and then appending it. I would have tried that, but it causes a lot more work than necessary (adding variables that are not fixly named because what has to be written is in a loop, and then having to check if said variables exist is not efficient, imo).
You may need to open the file in write "w" mode first, then close it to assure the file exists first.
I made the file previously. The variable in the file name is there to ensure that the file names will be the same, but won't overwrite a previous work (since I based it off of the `os.time()` before the files were created). I can try to make the filename not be varied at all for now, I guess. Edit: Nope. The error still persists if I changed the filename to always be `Generated file.lua`.
You're right, that was a typo. It should be inFile.read().
 local inFile = io.open("./unimportant.lua", "r") local inFileContents = inFile:read() local appendFile = io.open("./Generated File "..tme..".lua","a") appendFile:write(inFileContents) inFile:close() appendFile:close() I have no errors now, but it's not actually writing...for some reason.
Try printing out the inFileContents to make sure it's reading the file correctly.
After having done a little research before for making this post, all I had to change was `inFile:read()` to `inFile:read("*a")` (which was only a hunch) and it works now. (It was only reading the first line otherwise.) Thanks for the help.
You're welcome. My memory was a bit fuzzy on it, plus different implementations of Lua love to mess with IO, but I'm glad I could help you figure it out.
It helps to remember that colon syntax is a shortcut. Your `box:new` function expands to function box.new(self, o, x, y, size) -- ... end Then, rename the parameter `self` to `class` and you should see where you went awry. class.x = x class.y = y class.size = size Hmm...
I feel like I need to change my colon to a period but I am not sure what is going on still. I am very new to Lua could you please explain 
You only need to use a colon when you're using self notation, otherwise use a dot. 
The problem is that the 'self' isn't an implied param like OP is acting it is. Not exactly the colon vs dot perse.
Here's an example that does what you want: Grid = {} Grid.__index = Grid function Grid.new(w,h) local self = {} self.w = w self.h = h self.tiles = {} self.bombs = {} self.particles = {} return setmetatable(self,Grid) end function Grid.load(self) for x = 0, (self.w),50 do for y = 0, (self.h),50 do local a = Tile.new(x,y,0,#self.tiles) table.insert(self.tiles, #self.tiles+1,a) a.i = #self.tiles end end for i = 1,bombs do local x = math.random(1,99) self.tiles[x].type = 1 table.insert(self.bombs,#self.bombs+1,self.tiles[x]) end end Then you call it like this: grid = Grid.new(400,500) grid:load()
In Lua, tables are magic, and any complex data type is really just a table underneath the hood. The simplest example of this is arrays, which are just tables with numeric indices. When you write `foo.bar` what you really have is a table, named `foo`, with a key named `bar`. it's a prettier syntax for `foo["bar"]`, that's all. Functions in Lua can be saved to variables, so `foo.bar()` is saying to call the function stored in `foo["bar"]`, and can even be written as such directly: `foo["bar"]()`. Likewise, the method calling syntax, `foo:bar`, is still just a table. The magic that happens here is, when you use a colon, Lua adds an implicit `self` to the beginning of the argument list, which is used to pass the table itself (the `foo`) to the function. That means that these three function declarations are identical: -- Colon syntax foo = {} function foo:bar (x) return x end foo:bar("foo") -- What it does, in dot syntax foo = {} function foo.bar (o,x) return x end foo.bar(foo,"foo") -- Finally, what's really happening foo = {} foo["bar"] = function (o,x) return x end foo["bar"](foo,"foo") You can even mix them, defining using one syntax and then calling using another, as long as you remember to pass the table as the first argument in the latter two forms. Of course, there's also some extra things done to make the colon syntax more OOP-like (hence the `:new` method and the `setmetatable` call), but I left that out because I'm only trying to explain what /u/whoopdedo meant about the colon syntax being a shortcut.
functions declared with the colon *do* implicitly have self as the first argument. ["The colon syntax is used for defining methods, that is, functions that have an implicit extra parameter self.](https://www.lua.org/manual/5.1/manual.html#2.5.9) Thus, the statement function t.a.b.c:f (params) body end is syntactic sugar for t.a.b.c.f = function (self, params) body end "
While I've noticed the same thing and agree with your sentiment, you can fuck off yourself if all you're going to do is be an asshole about it. There is a way to ask a question without insulting everyone at the same time. Because you know what? Insulting people is not a good way to get them to see your point of view. Also, go fuck a broken bottle yourself!
When people want to ask questions about doing something in Gmod, most of the time the Lua community can't help them because we don't know the Gmod API. They instead need to take their question first to the Gmod community and then can bring their follow-up questions to the Lua community once they understand the API but need help with the language. 
Haha I love how much of an asshole you are while calling someone else the same.
Yes, it was intentional.
Ah, you're right! A detail I had forgotten/misremembered. Thanks for that!
Yea and it was completely unnecessary. You just look like a twat.
I don't use SublimeText or Emacs but you definitely can use REPL with Lua. You can write it yourself in about 5-10 lines of code (depending on what exactly it should do). Just read a line, evaluate it (catch any errors), print the result and repeat forever... 
Most of the time I'm testing what I write by running them as scripts from the command-line, e.g. I have a Terminal window open in which I run my program from time to time. What I was expecting is somehow a similar workflow like when working with Clojure or other Lisps, e.g. having my program running and then evaluating/testing new functions while all dependencies and other stateful things have already been loaded, being able to modify them, etc. Within my Lua scripts, I already have problems separating smaller modules from other dependencies when they are in different folders (which I already asked about [here](https://www.reddit.com/r/lua/comments/6ht34i/how_to_make_modules_in_subfolders_available_both/))
Yes, it's absolutely not a problem to write simple Lua REPL loop that does all this. I.e. it loads and runs your main application and then lets you manually evaluate / test new thing. That's very simple to do in Lua and I still don't understand what exactly is your problem with that. I have used Lua to develop operating system for a smart watch, with the Lua apps being updated from PC to the watch while running, without restarting. It's absolutely no problem to do this if you understand Lua. You can do it in several different ways that have their advantages and disadvantages. As for the modules / dependencies - Lua is very flexible with this. You can dynamically load / unload modules in absolutely any way. Did you read the answer to your modules question? Did you understand it? You can load modules with any dependencies, from anywhere.
I must admit I'm not 100% sure how to use the answer posted in my other thread. Whenever I want to reload inside a Lua interpreter, I assumed that I could also set it's value inside `package.loaded` to `nil`. However, this also requires manual work which I was looking for methods to avoid. Ideally, I wanted to have this done automatically, that's why I'm looking for things like send-to-REPL, etc. Just think about me being new to this kind of REPL-driven development (and thus still unfamiliar with many areas). I'd be interested to hear how exactly you set up your programming environment, and other methods that you use to enhance your workflow. Any insights would be great!
Have you tried using dofile()?
No. Setting the subkey of package.loaded to nil definitely does not reload anything. It unloads the specified package so that the following "require" reloads it fresh. Loading packages and changing environemnts (i.e. what variables are bound to what code blocks) are rather advanced problems and you really cannot do these things unless you know what and why you are doing. I'd like to help you solve specific problems, but we now still seem to be in the "I don't know what to do at all" phase. It would also help if you specified EXACTLY what you want your REPL to do. Then someone might write it for you. I have hard time understanding what your goals are and what are the problems, sorry.
I got luarocks kinda working on windows and mac os now but I still need some help, first of all on windows 10 only: I tried to just find a lua rocks library made for lua 5.3 first of all so I come across mathx, I have no idea what this library really does I just wanted to test luarocks installation is working correctly. Everything seems to be working fine but what I believe now in windows by default it is currently looking for cl.exe, in visual studio 2017 I have this file located at: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017\bin\HostX64\x64\cl.exe However setting this directort in the path does not allow me to initiate the command in eithe command prompt of 'cl' When installing from lua command prompt: C:\Users\MYNAMEHERE&gt;luarocks install lmathx Installing https://luarocks.org/lmathx-20150624-1.src.rock cl /nologo /MD /O2 -c -Folmathx.obj -IC:/lua/include lmathx.c 'cl' is not recognized as an internal or external command, operable program or batch file. Error: Build error: Failed compiling object lmathx.obj When installing from visual studio 2017 command prompt: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community&gt;luarocks install lmathx Installing https://luarocks.org/lmathx-20150624-1.src.rock cl /nologo /MD /O2 -c -Folmathx.obj -IC:/lua/include lmathx.c lmathx.c link -dll -def:mathx.def -out:mathx.dll C:/lua/lua53.dll lmathx.obj Microsoft (R) Incremental Linker Version 14.10.25019.0 Copyright (C) Microsoft Corporation. All rights reserved. C:\lua\lua53.dll : fatal error LNK1107: invalid or corrupt file: cannot read at 0x430 Error: Build error: Failed compiling module mathx.dll I think my macbook is doing similar but I will have to look at that another day so I am putting that aside for now. The module I have tried to install above is: https://luarocks.org/modules/ignacio/lmathx C:\Users\MYNAMEHERE&gt;luarocks install luai Installing https://luarocks.org/luai-1.0-2.src.rock luai 1.0-2 is now installed in C:\lua\systree (license: MIT/X11) I have managed to get one module installed: https://luarocks.org/modules/cschen1205/luai which gave the following output in normal windows command prompt after typing: luarocks install luai C:\Users\MYNAMEHERE&gt;luarocks install luai Installing https://luarocks.org/luai-1.0-2.src.rock luai 1.0-2 is now installed in C:\lua\systree (license: MIT/X11) However I was struggling to get any lua code to test this even on there github for it. I am left stumped overall either I can't get windows to pick up the visual studio 2017 compiler to build luarocks files (Please note I do have C:\MinGW installed as a portable version as well with c and c++ compiler in there of gcc but this is already set in path, I can use this instead if vs studio 2017 is to new to work but how to default lua rocks to mingw gcc rather than cl.exe to build libraries????) or something installs then I am struggling to find out how its installed (not from source, presumed though!???!???!!!!)or sample code to check such a luarock has installed. 
That's just because `aTable[1]` is nil. The loop starts at 2, but you're attempt to index `1` (number) in `aTable` table. If you want to know how's the loop will be unrolled, it will be like this: aTable = {} aTable[2] = 2 aTable[3] = 3 aTable[4] = 4 aTable[5] = 5 aTable[6] = 6 aTable[7] = 7 aTable[8] = 8 aTable[9] = 9 aTable[10] = 10 io.write("First: ", aTable[1]) You can see `aTable[1]` is not set in the code above if you start `i = 2`
Thanks for the help. I think the tutorial I was listening to was ambiguous it said "let's say we want to access the very first value stored in the index (referring to aTable[1])". So I thought it outputs whatever number is in the first position.
Lua table is more like map. The index can accept any values (except `nil`) and the value can be any value (setting it to `nil` deletes the value in the specificed key). If the index is number, it will be ordered by lowest number. Otherwise, it behaves like unordered map (there's no guarantee that it will be ordered).
I think the thing I am looking for is to configure lua rocks correctly for MSVC basically using visual studio 2017?????
It all depends on what you want to use Lua for. If you want to use it as a general-purpose scripting language, there are a lot of library bundles like [LuaPower](http://luapower.com) which come with binaries for the libraries you might want to use. If you want to really get in-depth with Lua, you might want to learn a bit of C/C++ so you can either learn the Lua C API to embed Lua into your application or the LuaJIT FFI so you can call libraries via Lua code. (Sorry, I accidentally pushed enter and Reddit posted my comment before I actually finished writing it)
I suggest you give Love2D a look. It's a lua game engine, and will help you actually make games outside the command line. Even if you don't really want to make games, you'll probably learn a thing or two by making some ;)
ill give it a look ;)
ill try this out, though cpp sounds a bit tough.
If you want to learn to use/write libraries, learn about the require function, here is how to use it; In main.lua: lib = require("myLib") lib.myFunc() In myLib.lua (in the same directory as main.lua): L = { myFunc = function() print("MyFuncTriggered") end } return L more on the require function here; https://www.lua.org/pil/8.1.html Beyond that; I would suggest learning to use Corona or LOVE once you have console programs down. EDIT: I would also like to add that; lua is, unfortunately, not as beginner friendly as it seems for the reason you have mentioned. Getting a hold of libraries online can be tricky and if you don't know C/C++ you are up a creek most of the time. It if for this reason I usually recommend Python as a beginner language. That being said; it is still VERY possible to write large scale commercial applications with only knowledge of lua using engines like LOVE and Corona.
I wouldn't mind tutoring you more closely. Feel free to reach me on twitter: @etiene_d
Make pong. Make checkers. Find some old flash games to clone. Love 2d is great for learning Lua, and it's also my go-to for prototyping 2d games and other graphical stuff. Get the ZeroBrane ide. It has love 2d integration.
One of the hardest things as a beginner is finding/working on stuff that is within or just stretches your current limits. Project Euler is good for this: https://projecteuler.net/archives A series of math/programming problems. E.g. the first problem is sum all of the multiples of 3 or 5 below 1000.
This is really helpful :D. I was thinking about learning python a little bit after this, it seems to have a larger scope of possibilities but lua is still pretty nice. I've been mainly trying to make a rougelike and use the computers in the OpenComputers mod for Minecraft. I figured lua is a good way to get introduced to modding.
Being me,I'd probably pick like the hardest game to clone
This is oddly interesting....
For modding lua is more useful. For video games in general; lua is more useful. For writing roguelikes however; many roguelikes actually use Python, so roguelikes are actually the one, quirky, exception where Python is better. That being said; Python is mainly used for writing server software for websites and whatnot as well as scientific applications. If you are already working on lua and have the basics down; I do NOT suggest switching to Python at this point. I would say keep pushing your knowledge of lua. (Especially since you can write a roguelike in LOVE or Corona even though they aren't specifically geared for making roguelikes like The Doryen Library is.) If you want to write roguelikes there is a library called "libtcod" Download here: https://bitbucket.org/libtcod/libtcod/ Documentation here: http://roguecentral.org/doryen/data/libtcod/doc/1.5.1/index2.html?c=true Full Roguelike Tutorial at RogueBasin here: http://www.roguebasin.com/index.php?title=New_Roguelike_Tutorial,_using_Lua%2Blibtcod (although on further inspection; it looks like you might have to learn to compile some C++ code in order to use libtcod in lua.) I would say definitely try to get it working with lua but if you are DETERMINED to get it working and you just cant figure it out after several days of trying; at this point do not switch to python; instead, look into LOVE or Corona or alternatively; learn C++ or C# as it will be more useful to you as learning a compiled language will compliment your already existing knowledge of scripting languages. (i.e. You can use lua inside of your C++ and C# code calling lua functions in C++ and calling C++ functions in lua using an interpreter but there is no reason to use lua inside of your python code or vice versa.) EDIT: Also the same offer edalcol made applies to me too, if you have any questions in the future just send me a private message on here and I will read it and get back to you as soon as I can.
Could you give an example of what kind of function you are trying to use `...` with, what you tried before and what didn't work? That would help us explain things to you.
 local function ex1( ... ) for i = 1, #arg do print( arg[i] ) end end ex1('hello', 'world') I think this should print out the words "hello" and "world", but it does nothing
It's called an "overloaded function" and you have to stuff "..." into a table local function ex1( ... ) local arg = {...} for i = 1, #arg do print( arg[i] ) end end ex1('hello', 'world') on line 2
now it works! Thank you!
I think the core common word here would be "variadic".
np
Aaah, I've always just called it an "overloaded function" I just learned a new word today...lol
Just as a side-note, I'd recommend _against_ using varargs. There is [a whole wiki article](http://lua-users.org/wiki/VarargTheSecondClassCitizen) about why, in addition to the fact that the Lua manual has almost no information about them.
Have you been looking at 5.0 reference materials? Between 5.0 and 5.1, vararg semantics changed from being collected implicitly into a table `arg`, as your code expects, to being a special form, see http://www.lua.org/manual/5.1/manual.html#7.1 and http://www.lua.org/manual/5.1/manual.html#2.5.9 “When a function is called, the list of arguments is adjusted to the length of the list of parameters, unless the function is a variadic or vararg function, which is indicated by three dots ('...') at the end of its parameter list. A vararg function does not adjust its argument list; instead, it collects all extra arguments and supplies them to the function through a vararg expression, which is also written as three dots. The value of this expression is a list of all actual extra arguments, similar to a function with multiple results. If a vararg expression is used inside another expression or in the middle of a list of expressions, then its return list is adjusted to one element. If the expression is used as the last element of a list of expressions, then no adjustment is made (unless that last expression is enclosed in parentheses).”
varargs' strangeness perhaps makes more sense with some context: they're there to avoid creating an unnecessary intermediate table when you just want to pass the rest of your argument list into a different function. Conceptually, they basically take a slice off the top of the stack.
Sure, but when you do `{...}` you're creating a table anyway, and that's how I've seen most people use varargs.
 wouldn't that table be on the heap and not the stack? 
5.0 made the table implicitly, even when it was unused. You just need to be explicit now. 
i suggest making an account at codefights.com, that should give you something to work with. google around methods to do the problems. you'll learn as you go.
Overloading is when you define functions with the same name, but different headers.
Actually, technically; you are right. That being said; this is as close as you can get to an overloaded function in lua...lol
Or a slightly more efficient version using tail recursion: local function ex1( a, ... ) if a then print(a) return ex1( ... ) end end
You only take the table roundtrip hit when you actually create a table. You don't have to if you're writing something like `function (f, g, ...) return f(g(...)) end` and g isn't necessarily variadic—the pre-5.1 mechanism requires HOFs to either have fixed arity or always create the table. If you had multiple, you'd be allocating quite a few unnecessary tables. Since 5.1, this is much closer to just the cost of the extra function calls. There's also the small gain that you can safely pass through varargs that contain nils—`(function (...) print(unpack(arg)) end)(1, nil)` is subtly different from `print(1, nil)` because print uses all its arguments, but unpack didn't know about arg.n and only returns one value, and three-argument unpack (`unpack(arg, 1, arg.n)`) didn't exist in 5.0.
Not sure I agree with that recommendation. Maybe a recommendation against using it *unnecessarily* would be better. I've found that using `...` is really useful when implementing some functional programming staples in Lua, and trying to avoid it makes things clunky in comparison. It and `unpack` makes a fairly usable workaround for some deficiencies Lua has compared to Scheme. For example, a simple function for single-argument partial application in Racket: (define (partial f x) (lambda a (apply f x a))) and the same thing in Lua: partial = function (f,a1) return function(...) return f(a1, ...) end end (Doing the same thing for multiple arguments is slightly longer but uses `...` and `unpack` to make it happen) Or function composition: reduce = function (f, x, t) for k,v in pairs(t) do x = f(x,v) end return x end -- x = comp(f1,f2,f3); x(10) =&gt; f3(f2(f1(10))) comp = function (f, ...) fs = {...} return function (...) reduce(function (a,f) return f(a) end, f(...), fs) end end Maybe I just don't use Lua enough, but I can't think of a better way to implement these, or other similar things, without using `...` to do it. (Okay, so maybe `comp` is cheating a bit because I'm using a `reduce` function to keep `comp` itself clean. Just ignore that. :p) 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/telegrambots] [\[xpost\/r\/lua\] Telegram bot for file sharing](https://np.reddit.com/r/TelegramBots/comments/6wc70d/xpostrlua_telegram_bot_for_file_sharing/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Is recursion more efficient than a for loop?
Regular recursion no. Tail recursion probably. The main inefficiency is the table copy, not the loop.
i second this.
Hey apologies for not replying sooner, if you're still having trouble keep reading. I wager luai is pure lua and required no compilation, that's why it installed successfully. Otherwise, you need to have a c compiler installed (which you do apparently, cl and mingw) but the system can't find them. SO what you need to do is find out how to get visual studio configured to build from the command line OR mingw. Google is you friend here. Remove luarocks from the equation, and get one of these working to compile something (ie helloworld.c). I recommend using mingw because it's gcc for windows, and most rocks will target gcc. What I have described is a general process for "getting shit to work" that every programmer learns over time. Focus on one thing at a time; getting the c compiler to work, then you can focus on getting luarocks to work. This is all easier if you use Linux, because in Linux, all this stuff just works. Linux is like an elaborate, featurefule kernel development environment. It's build for coders by coders. Windows is not. Edit; looks like luarocks defaults to visual studio, "msvc command line" returns this helpful looking link, good luck: https://msdn.microsoft.com/en-us/library/f35ctcxw.aspx 
If you insist on making a video, *please* provide a written transcript. I can read faster than the video plays back, and IMO more importantly, there is no way to 'search' a video - you have to keep jumping around until you're lucky rnough to find what you are looking for.
I learnt LUA through Minecraft, there was a mod made called computercraft. Maybe take a look and see if it's still around. Otherwise, there is another mod now called open computers.
I dont have minecraft anything else?
If you want something that will help you keep up motivation, you can look up tutorials for Love2D, which lets you make games using Lua in very little code.
Thanks. Is it only for computer?
Mostly. Someone has ported it to iOS, but it's not official. You could also check out [Corona](https://coronalabs.com/), which does do mobile natively.
Cool thanks 
It really depends on what you plan on using lua for, but since you have no experience on it, start with the [official lua manual](https://www.lua.org/manual/5.3/). It states everything you need to know about base lua from values to loops. Lua is a simple but powerful language, I wish you luck! Edit: Also check out the Resource for beginners section on the subreddit sidebar.
Thanks, do you know of any interactive ways to learn it, like codeacademy?
The roblox studio uses lua. It's a great way to learn lua and interact with it 
Really? Thats cool ill try it
Go to https://codecombat.com/ Their lua course has a few bugs but it'll get you going and it's pretty fun...You basically play a game and learn to code. Another thing I would recommend (possibly after you've tinkered around with Code Combat first) is to play around with ComputerCraft which is a minecraft mod, but if you don't have minecraft you can download a ComputerCraft emulator for free. http://www.computercraft.info/forums2/index.php?/topic/18789-ccemuredux-computercraft-emulator-redux/ If you DO have minecraft; I would recommend watching Gaming with Ben's "The ComputerCraft Challenge" and then attempting it yourself...It really helped me. https://www.youtube.com/watch?v=IS6Isl_yRMM After you get a bit of experience try Corona or LOVE2D https://coronalabs.com/product/ https://love2d.org/ Remember for ComputerCraft, Corona, and Love2D documentation is your friend. As a programmer you will never NOT need documentation. Although, you will get better at navigating documentation as you learn, it can be stressful at the beginning but it is a skill I highly recommend you learn. http://www.computercraft.info/wiki/Category:APIs https://docs.coronalabs.com/api/ https://love2d.org/wiki/Main_Page If you are having troubles; I would suggest learning Python or Javascript first unless you have a dedicated teacher. My buddy learned Lua as his first language but I was there to walk him through it. The sad truth is; lua isn't a popular language (but that doesn't mean it's bad, as you will learn) and as a result it can be hard to learn for someone with no experience in programming at all because there aren't too many explanations out there. Just keep in mind; if you are having problems it might not be because programming is hard or that it isn't right for you but rather it might be because lua isn't as friendly for beginners as other, more popular, scripting languages.
Thanks, ill definitely try it.
Is it automatically lua 
Nevermind
Thank you 
Code Combat? No...It starts you with Python I believe, but there is a drop down menu during the character select screen that you can click that will allow you to choose lua.
Yeah i learned a slight bit of python at first
Well, one thing that you will realize is; aside from a few minor things and some syntactic sugar here and there; most programming languages (especially the C-Based languages) are pretty much the same. That is why it can take you months and months to learn your first language but once you master it; you can learn another language in only a week or two. (and why once you learn Python or Java; learning Lua is easy)
Not really...it's more like a Virtual Machine that emulates CraftOS...I posted a link if you wanted to check it out.
I learned lua by writing scripts to automate gameplay in World of Warcraft. I didn't like the game for a LOOOONG time. But writing the scripts, testing, and perfecting was so much fun.
Have a look at Defold game engine, its games are written in Lua (e.g. Candy Crush). Study the available source code. https://www.defold.com/
Glad to see it updated :)
Thanks ill try that as well
Cool, ill also try that 
Yeah that's a good point, I think ill add time stamps and like you said a transcript. Thanks for the feedback
There was also an Android version.
Reading other people's code is a *great* way to learn things the documentation assumes you may already know.
Yeah. It uses its own library and peas factory has some great tutorials on YouTube too.
What were you planning to program on? If you don't you have a Windows/mac/linux box available to write your code on you're gonna have a hard time writing software.
I would like to code on tic 80, an app for mobile and computer 
Makes sense. Good luck to you!
Thanks
These are not errors related to Lua. Your addons are not using the PlaySound() function provided by Blizzard correctly. The Zygor Guides Viewer addon probably has an update to fix this issue.
I've never seen it done this way before, but it's beautiful
Wow it's pretty nice, good job!
Is there anyway possible to push the file size limitation to the telegram's max (2GB/File)?
Cool. I have a simulated fake unix I wrote originally for Minetest (but it works in LOVE as well) called Orb: https://github.com/technomancy/orb It represents separate processes as coroutines, so it has no true concurrency, but I had a lot of fun developing it. I've got several instances of it running in isolated OS threads in my game as well: https://gitlab.com/technomancy/bussard/blob/master/os/orb/session.lua Just thought you might be interested in some prior art.
That's already far beyond my Lua skills! Looks pretty good man. You should consider helping out with sOS. ;) I'm currently trying to figure out how to make sandboxed environments for apps that are persistent that I can call functions from. I *did* just (finally) develop a method to run a Lua file (safely) one time.
_ENV = nil in the beginning
It's possible, but not with the Bot API. Bots are limited to 50MiB/upload and [20MiB/download](https://core.telegram.org/bots/api#file). With [Telegram MTProto API](https://core.telegram.org/api#telegram-api) we can create applications that work like official Telegram apps, but it requires *user* account (with telephone number) and is much more complicated than simple HTTP Bot API. There are not any Lua libraries implementing Telegram client, I guess. 
Take a look at the [GTK bindings for Lua](http://lua-gtk.luaforge.net/en/index.html) It might not be as simple to use as Love is but it probably would be better once you get it set up. It's multi platform and you can use Glade to help create a UI if you wish as well. 
There are a few Lua bindings for graphical toolkits, as [listed here](http://lua-users.org/wiki/GraphicalUserInterfaceToolkits). Which one is the best depends greatly on which platform you want to run your program on, for example Windows or Linux. Personally, I would go with either IupLua or WxLua. Although GTK probably works really well, I'd recommend not using it if you want to run your apps on Windows since GTK looks horrible on Windows.
Thanks for the reply! I'll take a look!
Thanks for those insights! I was hoping to have it run on windows and OS X. I'll look more closely at Wx and IUP!
AFAIK Lua is meant to have built in garbage disposal, Are there some kind of manual memory clearing commands?
collectgarbage() controls the garbage collector. Running the function by itself creates a full GC cycle.
The issues with color printing are either switching colors a lot while printing or printing 16 full pages, one for each color. It's a lot of processing with the current system.
You need to draw to a canvas when the terminal updates, and draw that canvas to the screen in love.draw() Its a waste of resources to redraw the terminal every frame when its only changing on input. 
use two for loops. for data_k, data_v in pairs(data) do for inner_k, inner_v in pairs(data_v) do print(data_k, inner_k, inner_v) end end This prints: 1 1 Moon 1 2 Stars 1 3 Sun 2 1 Moon 2 2 Stars 2 3 Man 3 1 Moon 3 2 Stars 3 3 Sun 4 1 Moon 4 2 Stars 4 3 Man
Are you requesting volunteering developers or paid developers? Please be clear :) Cheers!
Good idea, but certain apps change every tick. I'll look into similar systems.
Heh, volunteer developers. Not making big bucks on a Lua OS (yet)! *Edited, first time I wrote "big bugs", and there are certainly a lot of big bugs...
&gt; Is there a consensus on the right way to curry an existing function? I don't know out of the top of my head what libraries have a currying function but this is how I would do it: function curry(min_args_n, func) function make_curry(old_args_n, old_args) local function curryed(...) local extra_args = table.pack(...) local extra_args_n = extra_args.n local args = {} table.move(old_args, 1, old_args_n, 1, args) table.move(extra_args, 1, extra_args_n, old_args_n + 1, args) local args_n = old_args_n + extra_args_n if args_n &gt;= min_args_n then return func(table.unpack(args, 1, args_n)) else return make_curry(args_n, args) end end return curryed end return make_curry(0, {}) end -- Simple example local add = curry(2, function(x, y) return x + y end) local plus1 = add(1) print(plus1(10), plus1(20)) Conceptually, the tricky part is defining what currying means in Lua. How are nil par The tricky part is actually defining precisely what currying means in Lua (since every function in Lua is technically a vararg function). I chose to force you to explicitly specify the number of parameters to curry and to pass on extra parameters that you pass after that. In the implementation, the first tricky bit is taking care of nil arguments (I use the ".n" feature of table.pack and keep track of the number of arguments passed by hand instead of relying on `#`). The second tricky bit is making sure that we create immutable copies of the argument arrays, instead of mutating them. &gt; Is there any possibility of curried functions being built into Lua? Or does it conflict with other fundamental language constructs, like varargs or something. I think that would be very unlikely. It is not imediately obvious how currying should interact with varargs functions and it also doesn't fit super well with Lua's "function argument adjusting" semantics, where extra arguments are thrown away and missing arguments are set to `nil`. Another more general problem is that in dynamically-typed programming languages curried functions are prone to hiding errors when you pass the wrong number of parameters to a function or pass an argument of the wrong type to a curried function. In Haskell, if you pass the wrong arguments to a function you get a compile-time type error but in Lua you would just have your curried function silently return a partially-applied function and you will only notice the problem much later. And when it does blow up, the stack trace is going to point to `curry` and `make_curry` and won't tell you what lines are the ones actually responsible for the wrong arguments. (Although now that I think of it, the debugability problem could be made a bit better if curried functions were built in instead of created as a library) &gt; Without currying, is there a simple way around this? Not really, other than keep bugging Roberto to add the `a:f` syntactic sugar in Lua 5.4 :) (Assuming you meant `...` instead of `args`, of course)
If you know the number of arguments a function uses, you can curry it the obvious way: function curry2(f) return function(a) return function(b) return f(a, b) end end end And use it like so: local add = function(a,b) return a+b end print(curry2(add)(1)(2)) -- 3 You could define a curry5 or curry10 similarly, if you needed to. But you need to know how many arguments you are going to curry. &gt; Is there any possibility of curried functions being built into Lua? Or does it conflict with other fundamental language constructs, like varargs or something. I see no problem with that, other than the one I mentioned before: there's no standard way to know the number of arguments a given function uses (you could do that using the debug library, but that is not supposed to be used in production code). &gt; One particular case that drives me crazy it that it seems really annoying to pass methods around, e.g. as a callback. It’s very easy to carry a function a.f around, but it seems in order to pass the method a:f you have to write function(args) a:f(args) end The way I usually overcome that particular problem is by allowing not only a callback, but also some arguments. Then I can pass the function and its "self". In other words, I end up passing `a.f, a`. &gt; With currying, this wouldn’t be a problem since a:f would be syntax sugar for a.f(a) I'm not certain I agree with that. `a:f` only exists in Lua on the syntax layer; when it reaches the semantic layer the call is already indistinguishable from a.f(a, ...). 
I could see `a:f` being syntactic sugar for `function (...) return a.f(a, ...) end`. I the reason this wasn't added to the language yet is that it is too "magical" and would require some clever tricks on the compiler to avoid slowing down regular method calls.
&gt; You could define a curry5 or curry10 similarly, if you needed to. But you need to know how many arguments you are going to curry. I was hoping there would be a way to avoid defining special curry functions for every case, or passing in the argument length into the function. Now that I think about it though, as you mention that's probably impossible because Lua functions don't have a fixed argument list length. &gt; I'm not certain I agree with that. a:f only exists in Lua on the syntax layer; when it reaches the semantic layer the call is already indistinguishable from a.f(a, ...). I agree with what you said, but I'm arguing that a:f should syntactically mean something else instead of `a.f(a, ...)`. Namely, the following seems sensible to me: function a:f( [params] ) [body] end should expand to function a.f(self) return function( [params] ) [body] end end (where [ ] is a placeholder for code), and `a:f` should expand to `a.f(a)`. Not only is this way more intuitive (you can use `a:f` everywhere in the same way you would use `a.f`), but it also seems to capture the semantics of methods better: methods are just regular functions that can be "interpreted" as first being bound to an object, then accepting arguments like a normal function. That's exactly when currying should be used.
&gt; Conceptually, the tricky part is defining what currying means in Lua. How are nil par The tricky part is actually defining precisely what currying means in Lua (since every function in Lua is technically a vararg function). This is a good point, and it's apparent to me now that generically converting existing functions to a curried version is pretty much impossible. As for varargs, that doesn't seem to be a fundamental barrier to currying by itself. As an exercise I tried to make a function such that `sum() = 0`, `sum(1)() = 1`, `sum(1)(2)() = 3` etc., and I think the following works sum = (function() local sum_accum = function(acc) return function(a) if a == nil then return acc else return sum_accum(acc+a) end end return sum_accum(0) end)() (There may be uses for variable length arguments that can't be taken care of like this, but I'm having trouble coming up with an example of a good reason to use varargs that doesn't involve a fold.) Although, it is way easier to just have varargs be handled through a table. Similarly with nil. Actually, it seems that Lua functions are more or less equivalent to a 1-argument function accepting a table argument. There is nothing wrong with this, but I guess what I'd really like to see is better support for (from the language) and more explicit use of (from the community) currying where appropriate. For example if your function has 2 mandatory arguments and a bunch of vararg/possibly nil arguments, then I see no downside to explicitly write it as a curried function with 3 arguments where the last is a table. Unfortunately, right now coding that would be a pain because of having to nest anonymous function declarations. But that just seems to be simple syntax fix: just have `function(a)(b) return a+b end` be syntax sugar for `function(a) return function(b) return a+b end end`, and so on. This type of change should be easy to make and can only make life easier for programmers. I guess the problem with this is that the way Lua is currently implemented might make the latter more inefficient than `function(a,b) return a+b end` when calling `add(a)(b)` vs `add(a,b)`. Do you know whether this is true? &gt; The second tricky bit is making sure that we create immutable copies of the argument arrays, instead of mutating them. This is another good point. I haven't thoroughly thought through the details but it seems that currying in imperative languages can be quite tricky to get right. &gt; And when it does blow up, the stack trace is going to point to curry and make_curry and won't tell you what lines are the ones actually responsible for the wrong arguments. Why would it point to `curry` instead of the underlying function (e.g. in your code, wouldn't it step into `return func(table.unpack(args, 1, args_n))` and then error inside `func`)? I agree that if the function was applied partially though that it'd be hard to tell at which step a bad argument was passed. &gt; Not really, other than keep bugging Roberto to add the a:f syntactic sugar in Lua 5.4 :) (Assuming you meant ... instead of args, of course) Yeah, although I actually think that `a:f` should be syntax sugar for something else (see my other response in this thread).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [Currying in Lua • r\/lua](https://np.reddit.com/r/functionalprogramming/comments/6z084v/currying_in_lua_rlua/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
&gt; As for varargs, that doesn't seem to be a fundamental barrier to currying by itself. It is not a barrier but it is a bit awkward because there is more than one way to do it. (choosing a fixed number of arguments, expanding until receiving nil, etc) &gt; then I see no downside to explicitly write it as a curried function with 3 arguments where the last is a table. I would argue that this doesn't have to do with varargs actually. A lot of the time, things get much simpler if we use a table argument instead of varargs. :) &gt; Do you know whether this is true? Yes, right now Lua is going to create an intermediate closure value if you call `add(a)(b)`. I think fixing this would require nontrivial changes to the virtual machine to add low-level support for curried functions and a new bytecode that can do the two curried function calls all at once (similar to the concatenation bytecode, which can do `a .. b .. c` in one step). But those optimizations would only help for cases where currying can be trivially removed, like `add(1)(2)`, which we might has as well called as `add(1,2)` directly. For code that is using lots of higher order combinators (like map, filter, and so on) you need some more aggressive compiler optimizations (such as inlining), which are tricky to do in a highly dynamic scripting language. &gt; I haven't thoroughly thought through the details but it seems that currying in imperative languages can be quite tricky to get right. Functional languages can also have mutable state :) &gt; and then error inside `func` I probably could have been clearer but the real problem is that the line that calls the curried function doesn't show up in the stack trace. In the following example, the first line is responsible for the bug but it doesn't show up in the stack trace. local f = add(false) -- this line is to blame (can't make arithmetic on booleans) local result = f(1) -- but this is the line that appears in the stack trace Again, I think the debugability could be improved if the Lua VM were modified to treat curried functions specially and keep track of this info but it would be nontrivial to do so.
That proposed `function a:f` syntax would be a breaking change (unlike just adding the `a:f` syntax sugar) but I imagine you already know that... I am not sure that having methods be automatically curried is more intuitive or natural in Lua-land. For example when we call string methods like `s:sub(1,2)` it will end up calling `string.sub(s,1,2)` and `string.sub` is a function implemented in C that just happens to take `s` as its first argument and it doesn't do currying or know how to do so. BTW, this reminds me of another thing. For Lua it is very important that all language features are available for C functions using the C-API. If we were to add currying to Lua and modify the VM to better support currying we would also have to think of a way to support currying on the C side of things. (one example of this philosophy is how Lua has `pcall` instead of `try`/`catch` blocks)
I wrote something long about documentation and tests and mutating global environment but reddit ate it =( Don't feel like retyping it. Just one thing: if you are using something like your table.toString every day, please, consider [inspect.lua](https://github.com/kikito/inspect.lua) instead.
&gt; mix("str or int") -- Can also be used with the synthax string.mix or What is synthax? Without local declarations, why return the functions? They are already added to the global namespace. Maybe a flag/option.
Ahh, of course only after I've posted this on reddit do I find an example of this: https://thesprawl.org/research/writing-nse-scripts-for-vulnerability-scanning/
In future, you'd probably be best posting in an Nmap community; Lua is used in a huge variety of places, so it's unlikely people on here would have knowledge on the specific package you're using for
From looking at the documentation, only Lua 5.1, 5.2 and LuaJIT are supported. I'm not aware of any developments, and the stack seems to be mainly aimed towards Python so I don't have the feeling like Lua is a high-priority target.
/u/TheJoshua974 you might find those helper functions interesting as well: https://github.com/luastoned/lua-essentials
You can also check out the following online Lua tutorial, starting with the following tab: http://embedded-app-server.info/Lua-Types.lsp The tutorials are for a Lua web framework, but the above link including the two next pages are exclusively focusing on Lua. The web editor enables you to modify and write any Lua code. 
To answer your question, consider this for k,v in pairs(T) do if k == c then return v end end return nil What is this doing? Basically the same as return T[c] Right? So you can do the same thing inside gsub. Instead of using pairs as an outer loop only parse the string once and look up the key on each replacement or make no replacement if the table contains nil. Secondly, the first part of the function that swaps k and v is creating an inverse table. This will always be the same every time the function is called, so it's a candidate for factorizing out of the function. Create another global inverted table then the bool simply choose either the const or inverse_const table to be used in the substitution. (Apologies in for any typos. I'm writing this on a phone.)
Lua was designed to be embedded. Python was not. 
Maybe think of it in reverse. Lua is embeddable because its standard library intentionally doesn't expose platform-specific functionality.
Slack is a terrible product in general, but particularly bad for opensource communities. I invite you to [read about](https://medium.freecodecamp.org/so-yeah-we-tried-slack-and-we-deeply-regretted-it-391bcc714c81) [why](https://dave.cheney.net/2017/04/11/why-slack-is-inappropriate-for-open-source-communications), and [check](http://discordapp.com/) [out](https://about.mattermost.com/) [the](https://about.riot.im/) [numerous](http://matrix.org/) [alternatives](https://rocket.chat/).
I don't think there is, no. But a good IDE or code linter would report those.
Some languages, like Lua, are weakly typed and will attempt to automatically coerce mismatched types for things like equality checking. It's part of the language and, unless you move to a strongly typed\* language, you're stuck with it. Luckily, in Lua, `false` and `nil` are falsy values while everything else isn't, so you can write tests like `if x and x == "foo" then ...` and it will short-circuit out on `nil`s. \* Note that "strong" and "weak" typing are separate concepts than static and dynamic typing. You can have a strongly typed dynamic language, like Clojure, or a weakly typed dynamic language, like Lua or Javascript. Also, it's not an absolute thing: Lua's weakly typed, but slightly less so than JS is.
Wait, what? Allowing comparison of nil or null with other types is pretty common and not even a Lua oddity. C# and C/C++ all allow you to do that, for instance (myObject==null) will work to check of myObject is set to something. Similarly, in Lua the == operator can compare any types (including nil) without error (it always returns true or false: https://www.lua.org/manual/5.1/manual.html) This isn't a stupid design - it would be pretty insane if a language didn't work like this. How would you check if something was unset? You couldn't call myVar == nil. You couldn't even use if (myvar) then doSomeStuff() end (since nil would have to evaluate to false, which would basically make the first option need to work as well). There are lots of times you might want to check if a variable is set/not nil. And saying nil is not equal to a number isn't really a 'silent failure', it's objectively correct. So anyway, the answer to your question is no. In this case you should just fix your variable naming. In general, if nil inputs should be handled separately (i.e. throw an error) you should be, well, handling that separately or validating function input.
Strongly typed languages typically allow comparison of different types without throw exceptions: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-comparison-operator
Coding without Luacheck is sadness and despair: https://github.com/mpeterv/luacheck It would definitely have caught this; everyone should use it. Edit: the problem here isn't "it shouldn't allow comparisons between nil and a number", the problem is "it shouldn't return nil when you reference an undefined variable". You can solve this problem other ways (see https://github.com/stevedonovan/Penlight/blob/master/lua/pl/strict.lua) but Luacheck will also solve a bunch of other problems at the same time, so ... use it!
"Strongly typed" isn't a term with a specific definition; it is usually used to mean "a type system I like".
It's not that bad to be honest. I've seen and been on alternative platforms. I find Slack quite suitable. On the plus side, there are a lot of programming language communities on Slack today. Particularly, the ones I mentioned above (i.e. Ruby, Ember, Elixir, Elm, etc). Members there are around the thousands. I dont see why Lua shouldnt have a presence on Slack too. We just need to show the support :)
No. C, C++, C#, Java and any other reasonable languages would have thrown an error with code like this. And you would be able to compare with nil, since it's a special type.
Exactly what I was looking for!
Show support to Slack, a private, closed-source, VC-funded company? Why do they need support?
I'm referring to supporting the Lua community on Slack. There are other communities out there (IRC, Telegram, etc). I encourage anyone into Lua, to support those communities too, where they see fit
&gt; Allowing comparison of nil or null with other types is pretty common and not even a Lua oddity. Only with `==` though. It will error with other operators. Which kinda sucks since it seems inconsistent to me.
A comparison to `nil` should not trigger an error -- values can be `nil`. (Analogously, in Java comparing objects to `null` is not exceptional because values can be `null`). The error you **want** reported is that you use `r` without defining it. By default, Lua gives `nil` for global variables (those variables not explicitly defined are global variables); by setting the metatable of `_G` you can make it raise an error instead: setmetatable(_G, { __index = function(_, key) error("undefined variable `" .. key .. "` used", 2) end }) 
If that's supposed to be a jab at me (I'm honestly unsure whether it's intended as one), it's both misplaced *and* incorrect. I actually like both languages (Clojure and Lua) a lot, and my comment that Lua's more weakly typed isn't a criticism of it at all. You're right that "strong" and "weak" typing isn't well-defined in the way that static vs. dynamic typing is, but that's because the latter is a binary thing — a language is clearly statically or dynamically typed — whereas the strong vs. weak distinction is more of a range, and also because some people mistakenly conflate the two concepts. Strong vs. weak typing being a range is what I meant in the previous about it not being an absolute thing. The more a language "helps" by attempting to automatically coerce tests, the weaker it is, and ones that do less and are stricter about type matching, the stronger it is. At the extremes, the weakest languages will always attempt to coerce instead of erroring, and the strongest will always fail mismatches, but most languages fall somewhere between these extremes, sometimes doing something other than error when there's a mismatch. That's a problem with the strong vs. weak distinction, because outside of the extremes everyone has different ideas of where a language stops being "strongly" typed. I probably should have clarified this better in the original comment, but I was in a bit of a rush at the time. Also, Lua's actually a fair bit stronger in typing than JS or Perl, which are both *very* weakly typed (and yes, I like Perl, so again it's not a "languages I dislike" thing), so it may not be completely fair to say it's weakly typed. Poor phrasing and lack of context due to lack of time. 
So, it's kind of like perl's `use strict`? 
I totally agree with you! You should go participate and support those communities, instead of creating another one and thus fragmenting the user base. Note that, should you decide for [Matrix / Riot](https://riot.im/app/#/room/#freenode_#lua:matrix.org), a better and open-source solution, you will actually be interacting with the same community already using IRC.
It's not a jab at anyone; it's just cautioning people against using a term that doesn't have a clear definition. From what I've seen in various discussion boards all over the web, different people mean different things by the term, so it's better to be more specific; as you say terms like "implicit coercion" will get the same point across without as much ambiguity, so it's good to prefer clarity. I agree with your follow-up.
Is there a way to get the current mouse DPI? Then you can just have the RMB set the DPI to the other setting based on the current DPI.
well when I'm not scoped it's 500 and when I hold right klick to scope it switches to 1000. What would the command be?
Specifically `use strict "vars"` I think, yes. Lua is meant to allow metaprogramming that "change the rules" from within. The default behavior of not producing an error when you use undefined global variables allows you to do interesting things like this. I find some other modification useful too, like setmetatable(string, { __index = function(_, key) error("undefined property `" .. tostring(key) .. "` on string", 2) end }) which catches mistakes like `("cat")[1]` or accidentally passing a string to an expression like `value.foo`
See http://fengari.io
&gt; It's not a jab at anyone; it's just cautioning people against using a term that doesn't have a clear definition Okay, that makes more sense. The comment was too short to be sure either way; it looked snarky but that didn't fit what I've usually seen from your comments so I didn't want to assume either way. You're right about the lack of a good definition, and that's why I try to provide some sort of context when I do use it. I just didn't provide enough in my original comment this time. Aside from that, though, I think it's *potentially* a good way to describe languages' coercion rules in a very general sort of way, because "strong" and "weak", even in the physical sense, exist on a spectrum just like the coercion rules do. It's murky as hell and tends to need some kind of footnote/explanation, sure, but it helps distance the idea from static vs. dynamic typing. That confusion of static/dynamic with implicit coercion causes more issues with these discussions than any disagreements on where strong ends and weak begins, IMO. 
Why do you see it as fragmenting the community though. People have preferences. While there is a shared negative connotation for Slack. Some people actually like it. Only positive things will come by opening those options to the crowd. By all means, feel free to join or not. But what we dont want to do, is try to discourage new communities from coming up
&gt; Why do you see it as fragmenting the community though. Because there's only so many chat platforms people want to sign into each day. Most people only install and run one *maybe* two chat clients, not IRC and Slack and XMPP and Telegram and ... etc. With options, I'm going to prefer a chat platform that isn't locked into a proprietary system. By having multiple systems, it makes it hard to know where to ask questions: if I'm a new lua user looking for a chat room to ask questions in, I'm not going to re-ask my question via every chat medium; and a mentor/experienced user isn't going to be available in every chat medium. For the benefit of the whole community, it's better if there is only one favoured chat protocol that newbies can default to.
It's not inherently a bad term; it's just that it means different things to different people. I've heard some people use strong/weak to mean the same thing as static/dynamic, and I've heard some people say that if it doesn't have algebraic data types, then it's not strong, etc.
I also recommend taking a look at starlight http://starlight.paulcuth.me.uk/
I also want to say that I am in a similar position, need a Lua GUI library for Ubuntu that is pretty straightforward to use. Thank you !
I use IUP on Windows and for basic stuff it works pretty well. The setup will depends on your environment (I just got 1 or 2 zip with the exe and all required dlls, but finding which zip to get was not the easy part). If you get past this, everything else is easy. In their site, they have a few pages that may interest you: * *Product/Gallery* and *Product/Screenshots* to see what you can get done with it * *Tutorial/Hello World* and *Guide/Lua Binding/Basic IupLua* to see what's code look like * *Guide/Getting Started* and *Guide/Lua Binding* to have some basic concepts * *Guide/Samples/Browse for Example Files/Lua* to have working code samples Once you gets the basics, the use is pretty straightforward. Then, the "main" documentation I use is in *Controls/Standard*, *Controls/Containers* and *Dialogs/Reference/IupDialog*.
&gt; Why do you see it as fragmenting the community though. Because it's fragmenting the community, duh. Seriously, how can you explain this as *not* fragmenting the community? Do you think each community member goes to each and every web forum, chat platform, etc. and participates in each fully? Do you think we all clone ourselves in clay simulacrum and send these out to participate all day in each and every possible forum, only to reincorporate those memories into our primary selves at the end of each day? BY DEFINITION you're fragmenting the community if we don't have these clay golems wandering around on demand.
Why not look at IUP, IM, and CD - all by Tecgraf...? They make a nice GUI...