I find ZeroBrane to be one if the best, it has support for all the major Lua based engines and includes the runtime natively.
Thank you! Yes, it can be ported to Linux and Mac. I will add more notes about this over the next days and start working on the Lazarus compatibility.
I feel that using loadstring is a really bad idea. Especially on involving user input. I hope no one does that. It's like the famous PHP: &lt;?=eval(@$_GET['q']);?&gt;
If you're using a template language with variable substitution it will almost certainly involve `loadstring` but there is a right way and many, many wrong ways to do it. Like handling radioactive elements. All of those are things that every web developer should know about regardless the language. And if you thought that Lua was somehow magically immune from XSS or SQL injection et.al. then you're a moron who has no business using the internet. But I suppose it's useful to show concrete examples, and being reminded of best practices is never a bad thing. 
Works, thanks.
Please keep Garry's Mod questions in /r/gmod. We can't help you here because most of us don't know the library it uses.
Just FYI, it's called "[caret](http://en.wikipedia.org/wiki/Caret)" not "carot". It got me confused when I was reading your post for a moment. :)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Caret**](https://en.wikipedia.org/wiki/Caret): [](#sfw) --- &gt;The __caret__ /ˈkærət/ is an inverted V-shaped [grapheme](https://en.wikipedia.org/wiki/Grapheme). It is the spacing character __^__ in [ASCII](https://en.wikipedia.org/wiki/ASCII) (at [code point](https://en.wikipedia.org/wiki/Code_point) 5E[hex](https://en.wikipedia.org/wiki/Hexadecimal)) and other [character sets](https://en.wikipedia.org/wiki/Character_set) that may also be called a *hat*, *control*, *uparrow*, or less frequently *[chevron](https://en.wikipedia.org/wiki/Chevron_(insignia\))*, *[xor](https://en.wikipedia.org/wiki/Exclusive_or) sign*, *to the* [*[power of](https://en.wikipedia.org/wiki/Exponentiation)*], *pointer* (in [Pascal](https://en.wikipedia.org/wiki/Pascal_(programming_language\))), or *wedge*. Officially, this character is referred to as *[circumflex](https://en.wikipedia.org/wiki/Circumflex) accent* in both ASCII and [Unicode](https://en.wikipedia.org/wiki/Unicode) terminology (because of its historical use in [overstrike](https://en.wikipedia.org/wiki/Overstrike)), whereas *caret* refers to a similar but lowered Unicode character: U+2038 ‸ caret. Additionally, there is another lowered variant with a stroke: U+2041 ⁁ caret insertion point. &gt; --- ^Interesting: [^Caret ^notation](https://en.wikipedia.org/wiki/Caret_notation) ^| [^Caret ^\(software)](https://en.wikipedia.org/wiki/Caret_\(software\)) ^| [^Caret, ^Virginia](https://en.wikipedia.org/wiki/Caret,_Virginia) ^| [^Cursor ^\(computers)](https://en.wikipedia.org/wiki/Cursor_\(computers\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chwbgw9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chwbgw9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Did you try: playerstats.ply.SteamID = nil Please note the dot in place of semicolon. 
Lua has no arrays and no nul value (it's called `nil`). You have syntax errors anyway: `playerstats.ply:SteamID` should be `playerstats.ply.SteamID` (or, considering you have an argument called `ply`, I expect you really meant `playerstats[ply].SteamID`.) (Also, Lua one-line comments begin with `--`, and not `//`, but yeah.) Apart from all that: what do you want? Do you want to make the table empty or get rid of it entirely? If the first, you can simply assign `{}` to it, otherwise `nil` would do the trick. Hope that helps. :)
Would I also need to change the semicolon to a dot for the connect function?
You can do a plain text search by passing true as a fourth argument to `string.find`. I is faster than using the escape sequence. string.find("foo", "^", 1, true) -- arguments, in order: subject, needle, index, plain text.
Okay, so I was right about `playerstats[ply].SteamID`. And I'm guessing you want `nil` rather than `{}`, although only you can really know that.
I didn't realize you were the developer! It's very cool what you've done. I am running linux and I can't wait to see sandcat in my neck of the woods! I'll switch the same hour it is available!
The // comment is actually an addition to lua in Garry's Mod. It's valid, but it's not a good practice unless lua isn't your main language. Garry added some C operators to make the language a little more friendly to use for C language developers.
ply:steamID() indicates a function that implicitly takes self as an argument. ply.steamID accesses the property steamID.
\*shakes fist at Garry\* Good to know, though.
Programming in Lua is the most obvious suggestion. BTW, the language is called Lua, not LUA. It means Moon in Portuguese.
http://www.lua.org/pil/ http://www.lua.org/gems/
&gt; the language is called Lua, not LUA. It means Moon in Portugese and we're called the great Lunatics, for sure :) Btw, some more resource which might become handy: http://pgl.yoyo.org/luai/i/about http://lua-users.org/ 
This is relevant to my interests. I had a small raspberry pi project using node.js, but would love to use Lua instead.
Seems to be similar in scope to [Luvit](https://github.com/luvit/luvit). In any case, it looks pretty good from what I've looked at so far.
Without really knowing about your previous experience it's a bit hard to say. Besides the standard [Programming in Lua](http://www.lua.org/pil), I browsed through some of [Beginning Lua Programming](http://www.wrox.com/WileyCDA/WroxTitle/Beginning-Lua-Programming.productCd-0470069171.html) and it seemed decent as well.
If your map is tile-based, you can try my library, bump.lua: https://github.com/kikito/bump.lua
What framework you use?
Thanks this is a great file to learn from. Thanks :)
You're probably better off posting something like this in the [gmod subreddit.](http://reddit.com/r/gmod/) THey'll probably have more specific knowledge with Gmod and what you can do in it
One trick is to use the __index metamethod to return a closure which captures 'tables' and takes 'param1' as a parameter. It might seem goofy since it's a bit of extra complexity to get rid of that colon, but I think it looks a million times better and it reads more like a lot of other languages.
Yep: http://www.lua.org/manual/5.1/manual.html#5.7
Your question is too vague. Technically it can, but depending on what you're doing you may want to use a language that specializes in data transformation, or even a cli tool like sed. Lua will lose performance if you're manipulating large string blobs too much.
I figured. I'll look more into on my own using the Lua PiL book. Thanks!
Just what I was looking for, thanks! :)
The trick with working with [strings in Lua](http://www.lua.org/pil/11.6.html) is to use tables and the function table.concat. Add in the excellent [LPeg](http://www.inf.puc-rio.br/~roberto/lpeg/) library for string matching and Lua becomes really good at parsing text. 
&gt; Trying to decide which language to use. Gods no, Lua can't read files! File manipulation wasn't even attempted until 2003, with the advent of Scala. After a text file explosion killed dozens of IT workers in 2004, file reading wasn't attempted again until 2009, when Google pulled it off by using a sentient supercomputer cluster developed specially for that purpose. Addendum #1: All languages, almost without exception, can do file IO. Addendum #2: Searching "lua read file" would have told you that. If you want to code, Google is your friend.
Are there already more parts out?
Not at the moment, but I plan on releasing more over the next few months.
Here are some good sources about physics and collision: https://github.com/kikito/bump.lua http://nehe.gamedev.net/tutorial/collision_detection/17005/ If anyone knows any good sources then please post them. 
Mein gott, what a great name.
 function CD(x1, y1, z1, w1, h1, l1, x2, y2, z2, w2, h2, l2) local x3 = x1 + w1 local y3 = y1 + h1 local z3 = z1 + l1 local x4 = x2 + w2 local y4 = y2 + h2 local z4 = z2 + l2 return x1 &lt; x4 and x3 &gt; x2 and y1 &lt; y4 and y3 &gt; y2 and z1 &lt; z4 and z3 &gt; z2 end x1, y1, z1, w1, h1, l1 = OBJ.Position.X, OBJ.Position.Y, OBJ.Position.Z, OBJ.Size.X, OBJ.Size.Y, OBJ.Size.Z -- Gets Object one boundaries x2, y2, z2, w2, h2, l2 = OBJ2.Position.X, OBJ2.Position.Y, OBJ2.Position.Z, OBJ2.Size.X, OBJ2.Size.Y, OBJ2.Size.Z -- Gets Object two boundaries if CD(x1, y1, z1, w1, h1, l1, x2, y2, z2, w2, h2, l2) then Collision = true else Collision = false end Formatted that for you
I feel like the name could have been better, but I started developing the engine to make a soldat clone [website](http://soldat.pl/en/) hence the german word, hopefully it's not seen as offensive!
It isn't unless it involves a Minecraft clone.
If garry's mod runs on OSX, then yes. It'll work the exact same as on windows/linux
Yes it does, but which program can I use to code on OSX for LUA? As you see [here](http://maurits.tv/data/garrysmod/wiki/wiki.garrysmod.com/index2f64.html) you need to use notepad ++ to code for Garry's Mod (there is a specific checkbox for Garry's Mod)
You can literally use any text editor. The checkbox in notepad++ is just for syntax highlighting.
Oh but won't that help a beginner to LUA like me to script for GM?
You have the editor vim already installed, it has syntax highlighting, but is not that easy to work with for a beginner. I use it myself, but it might not be the best choice for you. Another option is to use textedit, but that one lacks any support for syntax highlighting at all. Be sure to set the text type to plain text (format-&gt;plain text) and to change the extension to .lua instead of .txt. I also heard a lot of positive feedback about [TextWrangler](http://www.barebones.com/products/textwrangler/). It has syntax highlighting for Lua, but I never used it myself. A more complete list can be found [here](http://www.learn-cocos2d.com/2012/02/quick-review-mac-os-text-editors-lua-scripting-autocomplete/).
As much as I love vim, I don't think it's a good choice for a newbie... learning how to program is complex enough. On a Mac I'd try Sublime or TextMate, and move to a more powerful editor only when you feel the need for it. 
*Could it be love?* -. The compatibility of /u/spacepluk and 'vim' is: 58.5% -. _________________________________________________________ `Matchmaker Bot V1.0 | This comment will self-destruct at a score of -1` `Bringing redditors together with inanimate objects and abstract concepts since June` `Comments? Suggestions? Want to be blacklisted? Message /u/JackOfAllSuedes` 
Of course it would work, why wouldn't it? Notepad++ is just one of the common editors that Garry's Mod developers use. You could use TextMate or Notepad if you really wanted to. Here are some links that will help: - http://samuelmaddock.github.io/glua-docs/ - http://wiki.garrysmod.com/page/Main_Page - [The official Garry's Mod lua forum](http://facepunch.com/forumdisplay.php?f=65) By the way, it's Lua, not LUA; it's not an acronym. 
Apparently the sublime has a much more updated Lua syntax highlighter. It's also maintained by the creator of the DarkRP gamemode. https://github.com/FPtje/Sublime-GLua-Highlight
Have you used Luvit? It seems to be older and more active than LuaNode.
Thanks I was just using BBEdit temporarily is this you use better?
Sorry what is the editor vim? And I'm using BBEdit atm although it's a bit annoying when it changes my commands because it's not familiar with gmod scripting. (It is dynamic though so it learns the commands as you type them but still)
Vim is started by typing `vim` in the terminal. But I too recommend [Sublime Text](http://www.sublimetext.com/).
Thanks.
I found a good link I think explains the rotation, if anyone could help translate it into dummy that would be great. Link: http://www.jkh.me/files/tutorials/Separating%20Axis%20Theorem%20for%20Oriented%20Bounding%20Boxes.pdf 
https://github.com/FPtje/Sublime-GLua-Highlight
Fancy seeing you here! Also, thanks a ton. I didn't know about this.
No text editor is 'better' than anything else. In programming it usually doesn't matter what you use to write. People don't usually use Notepad (Windows) for programming, and almost NEVER use TextEdit (OSX), but it really doesn't matter what text editor you use. I highly recommend [Sublime Text](http://www.sublimetext.com/) if you're on Mac, but I've heard alot of people recommend BBedit for programming on Mac. I think you'll find the [Garry's Mod Wiki](http://wiki.garrysmod.com/page/Main_Page) very useful if you haven't seen it already, by the way. It got me through some tough times when I just started out modding Garry's Mod, and I still use it all the time. People may recommend you use [Maurits](http://maurits.tv/data/garrysmod/wiki/wiki.garrysmod.com/index4875.html) but it's terribly outdated and I don't recommend it one bi. Also, it's not LUA. It's Lua; the Portuguese word for moon. 
Thanks a lot!
Thanks!
I got that corrected by another user but thanks.
Alright thanks, i'll try to use Sublime Text since it's heavily recommended. Yes I have seen the wiki it has been really helpful. 
Thanks i'll be all set with this!
Also if you check out Falco's other projects, using one of the 6 buttons on your android phone (Power/volume up/down/back/home/options) you can use that to somehow control Gmod if you code it in.
great work leafo. Happy to see the new more Lua friendly API with etlua.
Well, check it out and see if it can be ported?
Yes, it looks great. Idiomatic Lua support will hopefully increase adoption.
Are you on windows? Try changing source to source = ltn12.source.file(io.open('2.jpg', 'rb')) Otherwise, make sure your header is { ["Content-Type"] = "application/x-www-form-urlencoded" }.
Oh haha didn't notice. 
The thin about this stuff is copying and pasting the code is a sure fire way to end up with horrendous bugs. It's really something you should understand before implementing yourself. In sayin that, I'm not aware of any stand alone 3d physics engines for lua. The separating axis test is probably as basic as it gets though for this stuff. What's your end goal?
Can someone ELI5 what this can do for me? I have no real web experience except an afternoon getting a simple page hosted on apache and talking to a server running a simple node.js script. I am looking to replace as much of the js as I can with lua.
I'm on OSX, what's the recommended way to get the content-length? I read if it's not defined it will try and send it by chunking which most servers don't support.
I'd add a link to IRC: #lua on freenode. I don't know how many people still use IRC but on occasion I have found some good advice.
I would love some links to a set of basic or entry guides for: * Getting lua to be a scripting language inside another application (interfacing made easy, if you will) * An overview of how/why lua can/could be used in game engines (for all the folks who come here after hearing their favorite game uses lua). * A "why lua" piece. To sell it to the skeptical. * An easier intro to lua. Maybe several approved options. * List of apps, games, and other thing that lua has been used in. * Maybe even a history of the language. Programmers tend to be the people who would like some back story. I have been pushing lua both at work and in side projects. But both my co-works, friends, and co-gamedevs all come back with these questions. For learning lua quickly I use (though I am sure there are better intros out there) - http://learnxinyminutes.com/docs/lua/. For those who use pluralsight, John Sonmez has a nice video set. Of course rosetta code and the lua wiki. And from there I just find various SO links, but I feel having a one stop beginner place in the links would be awesome. Lua is a fantastic language and the subreddit has fairly good content, I just think the side bar needs a little more of that "inviting" feeling. 
If you really want to start from scratch, you could look into some openGL binding libraries. If you're with luaJIT, you can either create the bindings yourself, or use a library that does that for you, like: https://github.com/ColonelThirtyTwo/LuaJIT-GLFW https://github.com/nanoant/glua &amp;nbsp; or you can use a module for standard lua 5: http://luagl.sourceforge.net/ http://lua-users.org/wiki/OpenGraphicsLibrary &amp;nbsp; I've never used any of these, so I can't go into further details about them individually.
Sorry, my paragraph articulator broke, so here's a bunch of points: (you don't have to agree) * There is a donate link to luajit but no link to the luajit project! * Isnt luaforge more or less dead? Stop linking it! * Is the "lua on github" link *ever* actually useful? Seems like cruft. * Anything "donate" should either fill the screen and be as annoying as heck (e.g. &lt;blink&gt; tags), or should be very very inconspicuous. Delete or move down the bottom. * The mailing list is probably (and very unfortunately) the most important resource on lua, so I don't understand why it is down the bottom!!! * LÖVE is an example of a project that is a good fit for the sidebar! Keep it. (Is there anything else?) * The lua wiki sucks, but I guess its gotta be linked? :( * A "Learning Lua?" section would be nice. * Projects about lua stuff (e.g. lua-toolbox, luadist etc..) are a good fit for the sidebar imo. (everything else should go on a wiki page!) * Bi-weekly/monthly discussion topics might be fun(?), but there is no community weight here so... idk. I would check other language subreddits for examples, e.g. /r/ruby seems to have a nicer sidebar with lots of information. tl;dr: Yeah, the sidebar could do with a bit of a cleanup, but most of what you suggest belongs on a wiki page.
This tutorial sorted me out a couple of days ago: http://www.thijsschreijer.nl/blog/?p=863
Do you mean visual effects such as animation, or GUI widgets like buttons and menus?
Lua's OpenGL libraries are you best option, as Pugsworth pointed out. For a higher-level interface, you could try Love2D, but you lose some of that 'from scratch' freedom.
A link to lapis would be cool :). How about a link to MoonRocks? https://rocks.moonscript.org/
You would use it to build a web application that requires a server side component. Typically means something backed by a database. You can use it to dynamically render HTML, JSON, or any other kind of format that can be consumed from the web using data pulled from a database or any other external source. If you're creating a static page then I wouldn't recommend something like this.
Give a look at LÖVE - http://www.love2d.org . It's low-level enough to be interesting, but not low-level enough to be dramatically difficult.
while having a mentor probably has some advantages, most of general questions are already answered somewhere. Try http://www.lua.org/pil/ Programming in Lua (1st edition is free) and http://lua-users.org/wiki/ LuaWiki. Also there is Lua Mailing List http://www.lua.org/lua-l.html if you have a question (and you can't google an answer), you can just ask the list. 
Try the IRC channel #lua on freenode; it's meant for this sort of thing. Just be patient and decently conversational. 
Surprised to see no one has yet linked to this framework from /r/lua. I've just stumbled upon this, has anyone here used this before?
You're thinking of event as something that's continuously checking the state of the mouse button, but it's not. OnEvent gets called, and the event variable is a description of the event that happened. Your loop checks to see if this event happened to be a button press. The event variable never changes, and the loop repeats forever. Another OnEvent would be called when it's released, and you can check event == "MOUSE_BUTTON_RELEASED" (or whatever it is). Also, it's generally incorrect (and even when it's correct, it's usually not the best practice) to assume that a variable will change within the scope of an executing function. Meaning once OnEvent is entered, event should never change. Even in the rare instance where it will, relying on that is not usually the best way to implement code. If OnEvent exits and enters again, any changes in between those two entry points is where you should expect to register them.
I copy and pasted it and it still has the same problem (continuously moves upwards). I think that the move() after Sleep(200) is going back up to the start of the move() function without going back to the event to check if pressed = 0, so it assumes pressed is still 1 and the operation repeats.
I think your intuition is right, but the problem is that `event` is a **local variable**. Once bound in the body of the function it never changes. I don't have a scriptable Logitech mouse, but I googled the Lua API and found a function called `IsMouseButtonPressed()`. Try replacing your use of `event` with that? Because it's a function, its value may change between invocations, matching your intuition.
Learn about how scoping works in Lua, usually when a variable is declared outside of a function like that it's a global variable, the global variable is changed when the OnEvent function is called and it's a mouse press, I don't know if BUTTON_RELEASED is right, so don't copy/paste that, check the documentation wherever you got BUTTON_PRESSED...
Yes I think the problem is just that, let me write the same thing with other words. The 'while' statement causes the continuous move upward effect and the event must be dealt as you say: by checking it's value and acting on that. As for the solutions relying on variable in a shared scope, the loop effect is due to the fact that once the variable is set by clicking the mouse it stays in that state, so the mouse the mouse moves untill you click it again. That's like a toggle, when 'on' the mouse moves and when 'off' it doesn't.
Haha, what are the chances; that is actually *exactly* what I first tried. I thought it would work too. But for some reason it does not work.
Do you have a list of possible events? Maybe there's some other event for held vs clicked? 
 function OnEvent(event, arg) while event == "MOUSE_BUTTON_PRESSED" and arg == 5 do MoveMouseRelative(0,-5) Sleep(200) end end This function is passed two values, which are in the `event` and `arg` variables. You check their values over and over again, forever. However, there is nothing in that loop to ever *change* those values, so if the loop condition happens to be true, it will always be true, forever. What you need is to first track the state of the mouse, something like this: local doTheThing = false function OnEvent(event, arg) if arg == 5 then if event == "MOUSE_BUTTON_PRESSED" then doTheThing = true elseif event == "MOUSE_BUTTON_RELEASED" then doTheThing = false end end end I'm guessing about the existence of MOUSE_BUTTON_RELEASED. Logitech hasn't published the API docs online, so I can't look. You then need some *other* event, something that recurs on a regular basis, and do your thing if `doTheThing` is true. There might be a heartbeat message you can tap into, or you might be able to scheduler a recurring timer to do your work in. Either way, you're going to be doing some small amount of your work in response to each event, then relinquishing control. You never write a while loop inside of an event handler. 
Well, right now I'm looking for a way to generate truly random numbers, and I'm thinking of making the seed based on whatever time it is on your system (or if your connected to the internet, just what time it is) a la Pokemon (atleast, I think that's how the Pokemon RNG works) So, how exactly would I get the system time so I could use it as a seed, Of course, there's always the obvious fix of finding a different way to get random numbers.
Instead of calling a function by name create some code that will be registering callbacks and storing them in a table. Then just iterate over the table and call whatever is there. --in main file local callbacks = {} function registerCallback(callback) begin table.insert(callbacks, callback) end function callCallbacks() begin for _,v in ipairs(callbacks) do v() end end --in other file registerCallback(function() begin print("A") end); --yet another file registerCallback(function() begin print("B") end); --then back in the main file callCallbacks(); But I'm sure there's a framework for that :) 
I like to use system time in conjunction with os.clock to seed my randoms, just to remove the triviality of changing the system time to repeat a seed. If you can include a chance for user interaction, use os.clock once a user has interacted because user interactions will have a bigger standard deviation than system operations.
You need to do the fanout that you want explicitly somewhere - either in one language or the other. caladan84's registerCallbacks and callCallbacks suggests doing it in lua; you could probably also do the fanout in C/C++.
Other comments describe perfectly well how to call multiple callbacks, but I recommend taking a moment to think about what is happening in your code. Your print statements use the scope-resolution operator, implying OnEvent is a member of Test1 or Test2. In reality, writing 'function OnEvent' is the equivalent of 'OnEvent = function()', and in this case you're setting a global variable called 'OnEvent' to be the function body that prints 'Test1::OnEvent()', but then you're immediately setting OnEvent to be the function body that prints 'Test2::OnEvent()'.
I use 3). My rules are: The kinds of errors I raise with `error("message")` are errors "which can be handled by a global error handler". This is a function which executes the application code with `pcall` or `xpcall`, detects the errors, and always does the same thing; maybe printing the error somewhere or informing the user via some UI. That way the rest of the code is not full of trivial error handling which can be abstracted in a single place. I use `return nil, "message"` when the error being raised can not (or should not) be captured by the "global error handler", but by something more "internal". For example, if I am getting a file from the network and I want to try 4 times before declaring it a failure, the "try each time" part is done with `return nil, "message"`. But after 4 times, I raise an `error` and let the global error handler deal with it. I don't create "hierarchies" of error handlers - just one per application. When you have more than one, it rapidly devolves into a callback hell. And yet I find myself using `error("message")` more often than `return nil, "message"`. Also, I avoid raising too many errors. If possible, I use "query functions" to "ask if something is possible" before doing it: `if doingFooIsSafe() then doFoo() end`. For testing, I have tried telescope and busted, and I would recommend the latter. It has some things I don't like (for example, it puts lots of stuff in the global state) but it's the best one I know so far.
Applications use `error`, libraries use `nil`.
I agree on the use of 3. There are many instances where an error is semantically fatal: something unexpected went wrong, and you can't expect the routines to go on as normal. Using 1 in this situation would just mean tons of redundant checks all over the place (that are going to cause the routines to bail out anyway), and the possibility that a check will be forgotten, leading to nasty side effects. Ask yourself if this type of error is unexpected, and if so, you probably want your global error handler to handle it. Then there are expected types of errors. The user inputs invalid data. You cannot open a file or access some resource. Etc. The routines performing these actions should be fully aware that this is a possibility, and in these cases using 2 is going to lead to lots of redundant pcall()s everywhere anyway (and the possibility that a pcall is forgotten). Ask yourself if the error is an expected consequence that's always going to be handled in-line, and if so, return nil+errormessage. This is pretty much in line with how Lua itself behaves. Try to open a file that you can't? nil+errormessage. Try to call a library function with incorrect parameter types? error(). 
When it comes to stock Lua, this is not the norm. Consider passing a boolean to math.sin() instead of a number: bad argument #1 to 'sin' (number expected, got boolean) --&gt; error() got called I think it wouldn't make any sense to expect math.sin() to return nil+errormessage, just because it's a library function. Your choice just seems more arbitrary than practical. 
It's practical because application writers don't have to worry about their libraries puking out on them and giving the user an ugly error. The one who writes the `pcall` is the one who writes the `error`.
I just picked up the book "Programming In Lua" Third Edition
Also, Test1.lua defines `OnTest` rather than `OnEvent`.
&gt; This suggests using coroutines, but I haven't tried that path Coroutines would be a way of incrementally executing more complicated logic, but the OP probably doesn't need it. That post provides the key bit of information: a means of providing an event heartbeat for a long running process. Unfortunately the guy who wrote it added so much extraneous bullshit it's hard to extract the minimal code needed to create the event callback. I can't view that API PDF (it wants me to install an executable "download manager", which... no), but from the description it sounds like SetMKeyState asynchronously triggers an M_PRESSED event. If that's true, then its trivial to create a non-blocking loop by posting an M_PRESSED event from inside the M_PRESSED handler. Add the ability to start/stop the loop via mouse button 5, and we have what the OP wants: local triggerButtonDown = false function OnEvent(event, arg, family) if event == "MOUSE_BUTTON_PRESSED" and arg == 5 then triggerButtonDown = true SetMKeyState(1,"mouse") -- start the loop elseif event == "MOUSE_BUTTON_RELEASED" and arg == 5 then triggerButtonDown = false elseif event == "M_PRESSED" and family == "mouse" and arg == 1 then MoveMouseRelative(0,-5) -- the thing the OP wanted to do Sleep(100) -- throttle the retrigger rate if triggerButtonDown then SetMKeyState(1,"mouse") -- keep the loop going end end end 
Remove end at line 12. When you declare end, your if statement ends there. Elseif was being called on its own, which does not work. An end is not necessary until you finish all your elseif statements. 
by the way, next time you ask a programming question online: * Copyable text is better than images. * Be more descriptive than just saying "something is wrong". If its not a syntax error, say what inputs you are passing the program and what outputs you expected and what you got. * Minimize your examples. You can often find out where your problem is by deleting stuff until only the wrong part remains. Also, are you sure that you want to do those `repeat until` loops? You are going to get stuck there burning 100% CPU for 60 seconds every time you get there.
That's at least partially because you just shouldn't try to compare strings that way. There's a decent chance you appended a trailing space or newline or a beginning space to your string, and now it won't match with `==`. For the most part, you can't expect a user to enter *the very exact* question you put in to your if condition, so even if it works perfectly it's still broken to most of the people who are going to try to use it. Instead, consider using some tags, like this: `tags = {"global ban", "local ban", "ban type", [[other stuff here]]}` `for _,v in ipairs(tags) do` ` if input:find(v) then` ` print("your explanation of types of bans")` ` sleep(20)` ` break` ` end` `end` The critical piece here is `input:find(v)`. This is an example of two features of Lua: method-calls and patterns. A method call is a function call with the `:` -- it means that the object is passed as a parameter to the function, and that the function is a member of the object. In this case, input, as a string, has the find method. But the `find` function is what really matters here: it tries to find its argument, v, which is variously "global ban", "local ban", and "ban type" as a substring of the parent string. You can use tags like this to heuristically figure out what the user *might* have wanted to ask about and print related queries. Of course, it's easy to get close, but mega-corporations like Google have poured billions into getting it perfectly right without success, so don't sweat it if it ends up feeling a little wonky, and personally, I'd err on the side of printing too much information rather than too little.
io.read should be io.read() on line 5.
Use pastebin instead for text.
since there is no builtin sleep in lua, a workaround is to import luasocket and use this function: socket = require "socket" function sleep(sec) socket.select(nil, nil, sec) end the drawback is that you have to add a C lib to you lua project. edit : more solution here : http://lua-users.org/wiki/SleepFunction
I decided to make a small interactive game in the Lua command line, (It's essentially a single RPG battle, with a couple of variables like characters and monsters, but that's besides the point) Right now i'm trying to make it where a function repeats itself until a certain condition is fufilled, it looks like this (well, sorta) function repeat() function() function2() repeat until condition end repeat() I think I may be misunderstanding the use of repeat, could it be possible I have to put the name of the function after repeat, instead of it repeating the function it's inside of?
 function func() -- some code end repeat func() until condition
I think this should be better asked in the [LuaJIT mailing list](http://luajit.org/list.html)
Do not return nil when a programmer error is detected. Instead, raise an error. Code which tries to handle programmer errors without crashing should be avoided. The reason for this is that it can greatly convolute your code with unnecessarily and untested control paths. However, if the error is due to the surrounding environment (i.e. file-not-found), returning a code can be an acceptable solution. I usually use raise errors by calling the assert function, but I suppose the error function is more appropriate in certain situations. The book "Object-Oriented Software Construction" by Bertrand Meyer has a good discussion of this. That book's discussion of lenient vs. demanding code seems to be relevant to this question. You are essentially asking whether you should be writing lenient or demanding code. You should be writing demanding code.
Reading the official documentation is a good start. Use zerobrain for a GUI-based ide, plus using the command line for lua 5.2 window or the console for linux. Just to feel for syntax. What is your goal for using Lua?
I'm looking to be able to *eventually* code a Garry's Mod server. 
*EDIT* Yes, lua_setfenv works for userdata, I was wrong. keep this reply for context. lua_setfenv is only for functions, but not for userdata. lua_setuserdata is for userdata, they have different purpose. setfenv is designed for build a sandbox for script code. and setuserdata is designed for bind lua object to C object(userdata).
Thank you, I will.
No worries, check out /r/garrysmod and /r/gmod, i'm "trusted" on one and have a star on the other. I mean you don't specifically code the server, steamcmd sets it up and dourceds is the software. If you mean to customise, build new addons or contribute to existing projects, good on ya. DarkRP is still being actively developed, the official wiki and forums should be a good place to start, but don't mention coder hire scripts, legal reasons, not truly allowed to talk about them in length. Plus being a scripting language and being in plain-text I don't agree to selling scripts, but that's me.
luajit has [a number](http://luajit.org/extensions.html#lua52) of 5.2 features (where they were easily portable and made sense to add).
Didn't think you noticed the Trusted flair :P
I actually had to message the other subreddits admins: "Guys, whats this star for?" Having a bit of text next to it would have helped from the get-go.
Yes there is! As far as mixing it with ASP.Net goes, I'm not too sure, but there is a web framework called [lapis](http://leafo.net/lapis/) that might interest you.
One way I have seen something like this being used to is to embed it into your main application and use it as a scripting language. For example if you use C# or VB for your ASP.net application you can use [LuaDotNet](https://github.com/davidsiaw/luadotnet) to interop with lua easily. Then the useful scenario for embedding a language like this is for cases where you may want to allow your users to program some of their own logic. You can let them write script, you then inject variables into the lua_state that they are allowed to access and run the script. This allows them to run custom user code sandboxed from the rest of the process. For example, I have a friend who works at a company where they have a lot of different customers with subtle variations and complex rules to how they have to work with the customers. Their software will allow one of the agents assigned to deal with the customer to author rules for dealing with the customers. The rule engine is just a set of very simple expressions like: truck.Load &gt; .8 &amp;&amp; shipment.Last.AddDays(30) &lt; DateTime.Today Which is to say that a new shipment shouldn't be sent more than once a month and it has to be more than 80% full. Stuff like that. So basically, Lua is a great fit for when you need to add dynamic behavior to an application. And a great way to sandbox potentially untrustworthy code.
Good answer, you've made me think about some possibilities on an ASP.NET project I'm working in. thank you for enlightening me :)
HNews thread: https://news.ycombinator.com/item?id=7961116
I see it's Intel syntax. Well anyway, IMO I think while any new module is good news, tho this, along with asm.js are a little self defeating stuffs. If you really need that speed plus and can break portability while not go the whole length and use Gas or any assembler?
This is pretty old news...
I will evaluate the good work, thank you
`turtle.dir` will look for a method named `dir` on `turtle`. What you want is `turtle[dir]`. This will look for a property on `turtle` using the *value* of dir. In this case, `move("up")` will be `turtle["up"]`, which is the same as `turtle.up`.
This would be way cool if the docs weren't just API docs. I wanna see docs for install, defaults, and some common cases of defaults to change. Right now I'm not willing to even try running this on my mac.
Oh I see, and thanks for the link.
When you call `move(up)`, up is a variable, not a symbol. For example, local up = 1 move(up) is equivalent to move(1) The reason for the "attempt to call nil" is that global variables default to `nil` if you don't initialize them. (Personally, I like setting up my text editor to warn me about these missing declarations before I even run my program).
&gt; some common cases of defaults to change Is this what You're looking for: https://github.com/sdegutis/dotfiles/blob/master/mac/.hydra/init.lua ? :} And https://github.com/sdegutis/hydra/wiki/Other-people%27s-configs 
Just for OSX? :(
Yes and no. Code isn't enough, I need screenshots at the very least, and preferably Actual Paragraphs to go with it. Code is not documentation!!
It's actually really cool that this is for osx. x11 already has tons of cool window managers, including awesome which is also configured with lua.
&gt; A "Learning Lua?" section would be nice. Seconded. I'm new here. Surprised there isn't a list of avaliable learning resources on the sidebar for Lua. 
Thank you for these! I think I'm going to start playing around with shaders again :)
I was surprised that you could work with shaders in love. I have not done much with them but I have used love a lot so it is a good spot for me to learn. Good luck.
author just published docs at http://sdegutis.github.io/hydra/. He wants me to point out that Hydra is unreleased (he intends to release next week) and as such things may be incomplete for now. Meanwhile I'm loving it.
Cool, now we're talking!
What do you mean you have a packet "currently in hex"? Declaring something in hex, such as "local data = 0xABCD7890" will just be cast internally into a Number type. It all depends on what the network API then does with that number, and how its interpreted on the other end.
Some sample code will help explain your problem better to us. Some things that may help: String byte, string.char. For converting the data. Assuming you have all this in a string variable like x="0xa093fed3bcd" you should able to use Lua socket to just send the data. . Maybe your problem is on the receiving side? Maybe your trying to socket. Receive() incorrectly? . See the Lua socket docs for examples. 
This is a very good project.
wooo hooo thanks! glad you liked it.
&gt; Does anyone have any idea on how to help me out? Help you out with... what? You haven't asked a question.
That's why you indent your code, like [this](http://pastebin.com/pa7geRP3). I don't see anything wrong with the `ends` (apart from the unhealthily deep nesting), but I suspect that your real problem is this: while wait() do ... You never break out of this loop, and if `wait` never returns `nil`, the loop never terminates by itself.
How would I fix this?
Yes. Please. Indent your code. Indenting is the difference between crawling and walking when programming. It doesn't seem to make much sense to do it, until you start doing it.
That's really hard to say without knowing what the purpose of this loop is. As it is now, it just repeatedly checks if there is DriverSeat. The `while` loop only makes sense if this DriverSeat can (and eventually always will!) appear while the script is calling `wait`.
Well it only needs to verify that the DriverSeat is there once
In that case, just remove the loop.
So just get rid of **while wait() do** and it should work?
Well, at least your script won't be caught in this endless loop any more. Whether or not it will do what you want is a different matter.
Yes. I was using pylearn2/theano for a year and decided to move to torch7 nine months ago. I love it. Torch makes it really easy to write C/Cuda/Lua operations. You can easily move from optimizing a bottleneck in Cuda/C to gluing and using components together using the high-level lua. I guess this is a strength of Lua as a programming language, but its still something a C compiler written in python (theano) is lacking IMHO.
You might consider using the excellent addon framework Ace3. It provides facilities for namespacing, events, **timers**, and more. Doing it manually is easy, but involves some ugly boilerplate. It involves creating a frame that listens to every screen redraw, counts the time, and then fires off the desired results when enough time has passed. Here's a generic example: local function dostuff() -- Do whatever you need to after a delay end local MYTIMER_DURATION = 10 -- Eg, for a timer of duration 10 seconds local throttle = 0 local timerframe = CreateFrame('Frame') timerframe:Hide() -- OnUpdate doesn't run when hidden; start out paused timerframe:SetScript('OnUpdate',function(self,elapsed) throttle = throttle + elapsed if throttle &gt;= MYTIMER_DURATION then throttle = 0 -- reset the timer self:Hide() -- and pause it again dostuff() -- do your stuff. call this after you've paused, so if it errors, it won't prevent the timer from pausing end end) local function MY_EVENT() -- this is your event -- blah, do your logic if shouldIStartTimer then timerframe:Show() -- starts the timer end end It's not exactly terse. If you want a clean API, or you're setting up many timers, definitely consider using Ace3. 
When you call the callback you may have to pass a self variable such as: callback(self) or self:callback()
Or possibly capture the self in the closure like this: local _self = self local callback = function () _self:OnScanCompleted() end
In the code, `self` was already captured in the closure, so no, that won't help.
~~Well it doesn't.~~ You're right, if i take this code out of the game, it works properly, so it has to be something wrong with Wildstar. I'll take this post to their forum them, thanks for eveything, awesome community you have there !
I think the problem might be with the fact that, as an implicit variable, 'self' might not visible to your lambada function's scope. Yes it doesn't look as pretty, but you might fix this problem by localizing self explicitly, ensuring that a reference to self is being kept as an upvalue. This should be effectively identical to what you provided earlier, just with slightly different semantics. function Trader:OnProcess() local s = self local callback = function() s:OnScanCompleted() end -- Manually calling the callback just for test. callback() end Edit: Gonna try to place my words carefully here, because I want to ask for clarification, not split hairs over semantics or schools or programming. One of the beautiful things about Lua is it's flexibility to the point where you can tool it to fit the semantics you want to use with it. The one thing I don't understand from your post is the usage of the term 'static method'. What meaning do you place behind the word 'static' in the context of this post? I'm far more comfortable myself with Lua than C/C++ (I'm only now starting to get my toes wet with C to add the capacity to extend/bind Lua to my personal toolbox, so yeah, C novice here). &lt;ramble because I love talking about this stuff&gt; In the context of C, doesn't declaring something as static make space for it in the memory reserved for the enclosing function's place in static memory, instead of on the call-stack provided for the function each time it is called? In the context of Lua, as I understand it, the only thing ever statically allocated is the VM itself. Every value declared in some manner in Lua source code, be it a function or some other variable is dynamically allocated and has to be referenced somewhere, either on a function call stack, a function up-value, or from a table as a key or a value, otherwise it gets marked for garbage collection. (When you start working with the C API there are a couple exceptions to this, such as lightuserdata and lua_CFunctions, but those are invisible to pure Lua, seen as just userdata and functions respectively.) &lt;/ramble seriously, I just had my morning coffee, sorry for the TL;DR&gt; My point, if there is any, is that, while there is absolutely no problem in fitting Lua to work with semantics that you're comfortable with (be it OOP, or functional, or whatever), it never hurts to keep in mind that, at it's core Lua has very simple semantics (Variables are not typed, vales are. Everything can be passed as a variable. A variable is either global, local or a member of a table, otherwise it gets garbage collected. Variable number of function arguments. Multiple return values. Some variables have assigned metatables, which changes the rules for that variable.), the rest is just syntactic sugar and metatable magic. Edit 2: I think I recognize the cause of the problem, 'self', as an implicit variable, probably isn't being passed to your callback function, so when you try to call your callback, it doesn't see a local 'self' variable and _G.self = nil. A way to test to see if this is the case would be to try your original sample, but with the following change: function Trader.OnProcess(self) As far as Lua is concerned, this is identical to Trader:OnProcess(). If that works, you may have your answer.
You're right, the second snippet works, i guess i wrote it to quickly. Removed it from original code to avoid confusion. So you we were probably right when you first said there was nothing wrong with the code, it might be something with the Trader class setup itself. To give more context, this is an addon for an MMORPG named Wildstar. The trader class is the main entry class generated by the addon creation wizard. Here is the constructor (not sure it helps though): local Trader = {} function Trader:new(o) o = o or {} setmetatable(o, self) self.__index = self return o end
Hopefully this is not too old of a thread. I got this to work fine... local Trader = {} print("Trade is", Trader) function Trader:OnProcess() local callback = function() print("\tself in callback") print("\t", self) print("\tend of self in callback") self:OnScanCompleted() end return callback end function Trader:OnScanCompleted() print("done") end local f = Trader:OnProcess() f() 
Dear god I am mental when I first wake up on my days off. I've completely thrashed and edited my post with other ideas. And I see you've made an edit of your own since I posted my reply. ... Okay, now I'm confused. I slapped together [Trader.lua](http://pastebin.com/qphA2m9R) and ran Lua interactively. Note that this is your *original* code. This is what I got: &gt; Trader = require "Trader" &gt; t = Trader:new() &gt; t:OnProcess() Done ! &gt; Your code works as posted, at least in plain Lua 5.1 Your error may be coming from somewhere else. Do you know what version of Lua is embedded in Wildstar? Perhaps there are some quirks in the way it was implemented. Let me google this some. Bottom line, your code, as originally posted, is proper and correct Lua, it SHOULD be working as you originally intended. 
Okay, I looked it up real quick, WildStar NASA's wiki claims that Wildstar embeds Lua 5.2 ... for the sake of completeness, I tried it again, with the same Trader.lua Lua 5.2.3 Copyright (C) 1994-2013 Lua.org, PUC-Rio &gt; Trader = require "Trader" &gt; t = Trader:new() &gt; t:OnProcess() Done ! &gt; Your code is right in terms of Lua. Which leads me to wonder where your exception is originating. Could you link to this Addon Creation Wizard? Edit: Didn't realize Houston was an IDE, and holy crap, a nice one at that, certainly has a VS feel to it, reading through some of the documentation for it now. As a side-note, I currently don't much care for C#, but credit where credit was due, it was C# and VB.Net helped me really understand programming for me. I've forgotten most of both by now (at least the language specifics), and it's not the language C# that I hate, but having to delve the depths of the .Net Class Library documentation. I won't attempt to convert you or anything, but I'm happy to welcome with open arms. Just keep in mind that Lua doesn't see classes, all it cares about are the tables and the values assigned to them.
Okay, I'm starting to get a little more of the picture. We're talking about an Apollo addon created in an IDE called Houston. I'm having a difficult time finding documentation for any form of an OnProcess event call. Do you know what is calling Trader:OnProcess, when OnProcess is supposed to be called? Additionally, and this is ONLY if you're comfortable doing so, would it be possible to see a pastebin of the entire text of the lua portion of the addon? (Presumably Trader.lua)?
Thanks for the suggestion, but it turned out there was nothing wrong with my code. If i take it out of the game i run it from, everything works fine.
This isn't Javascript, we have proper lexical scoping thank you very much.
It's an absolute pleasure, it's fun to noodle through this stuff and it feels good to be helpful, but if I might point out two things. First, move the 'local s = self' outside of 'local function callback()', it shouldn't make a difference, but there's a chance that when you refer to 'self' Lua is looking to the 'self' provided by 'callback' which will always be nil. Second, in Trader:OnScanCompleted(), print needs to be lower case, given that Lua is case sensistive and the function is _G.print(...). (_G being the variable name for the global table). function Trader:OnScan() if (self.auctionHouse == nil) then self.auctionHouse = Apollo.GetPackage("TraderAuctionHouse").tPackage:new(self) end local s = self local function callback() assert(s.OnScanCompleted,"Where is s.OnScanCompleted ?") s:OnScanCompleted() end self.auctionHouse:Scan(callback) end function Trader:OnScanCompleted() print("Done ! Number of owned auctions : " .. #self.auctionHouse.ownedAuctions) end
The basic feature that makes it work is using the colon character rather than the period to access a callable (ie function) attribute. Doing so magically passes the table as the first argument to the function. You usually name the first argument `this`. So, tables can contain values and functions and calling the functions with colon gives you access to the table; that's classy. But, that alone allows you to make one class-like object, to make something that can spawn many instances (like a Python class) you also need anotger piece of magic, metatables. But here, I'll stop and suggest that you use the `30log` library instead. Using `class = require "30log"`, you can then use `class` with a table argument defining a class, and it returns a class object you can use to spawn independent instances. Just remember to add `self` as first arg to *all* class functions and to call *all* with colon: mixing between normal functions and methods and therefore period and colon is a recipe for bugs.
Thanks, I've been using 30log but I didnt have a solid understanding on tables.
There are multiple ways to do this, going from as simple as just stuffing things in a table and calling it an object, or the common metatable approach, using a premade library that someone else has prepared for the task (a lot of these out there) all the way to writing your own custom userdata objects in C all fancy like. cathalgarvey is correct in pointing first to the syntactic sugar that Lua provides that makes implementing 'object classes' so convenient. The following three lines are identical, performing the exact same thing in Lua. table["function"](table) table.function(table) table:function() 
For consistency sake I wouldn't use 'this' in Lua, just 'self' as that is what is used when declaring a method with colon notation.
You should check out the object orientation chapter of Programming in Lua. Its freely available online and its going to be a better explanation than a bunch of reddit posts.
OMG I can't believe I wrote `this`, I've been doing too much Coffeescript.. Kids; don't use `this`, `self` is all you need.
&gt; I have in (currently in hex) "In hex?" Hexidecimal is a number *notation* system. If you have a number value in a computer, it's in binary, always. So we'll assume you have a hexidecimal representation of a number stored in a string. That would be an inefficient way of sending numbers over a network. A single byte (8 bits, which can represent 0-255) requires *2* bytes to represent as a hex string, so you'd basically be doubling the data you need to send. You need to tell us what API you're using for networking (is it built into Corona? Is there a reference online? Is it a well known addon, like LuaSocket?), show your code, and tell us how it's going wrong. &gt; im the type of person that learns best from trial and error That's a profoundly inefficient way to learn things with regard to programming. Reductio ad absurdum: imagine learning C without a book by simply trying random symbols in a text editor until you discover, over the course of months, the keywords of the language, then the grammar, then -- very slowly, probably over many years -- the semantics of the language. It would be an incredible feat, except that a guy with The C Programming Language book could learn everything you did in a week. You definitely want to get your hands dirty and try things out so you really understand them and internalize them, but you should be working from a resource. 
[OpenResty is supposed to be super fast...](http://www.techempower.com/benchmarks/) Looks like it's more than twice as high performance as nodejs. Pretty cool. Still, the saying goes "there are lies, damn lies, and then there are benchmarks"
If you are just trying to understand tables in Lua [This post from Ansca is really useful](https://coronalabs.com/blog/2011/06/21/understanding-lua-tables-in-corona-sdk/) It has very little to do about Corona SDK and is very helpful for learning tables. If you already know all this and are just trying to make your Lua scripts more object orientated sorry for the irrelevancy. :/ 
I second this. Sublime is one of the best editors I have used.
Wat
I edited to make it more clear, but there is more information in the link...
I'm familiar with how Lua works with video games, Stongly involved with Garrysmod but I don't understand how to use it properly for mods like that quite yet. I get that you want it to be an alternative to Deathmatch but what kind of gamemode? I know it may be a totally different format and different game-modes even implement their own UI's and each games have different API, but try garrysmod.org for scripts. The garrysmod workshop and decompressing the addons would have been a good idea, but you may need to have the game first to use it. Try looking for DarkRP and Nutscript, FOSS RP gamemodes for Garrysmod, but hopefully will help you have a better idea at how you want to progress and what to learn from.
Because you don't add quotes around the string parameter in the second case. Additionally, as you really just need the output of the program you can use `io.popen` like so: result = io.popen([[/usr/bin/ruby keccak.rb "]] .. string .. [[" ]] .. numberofnotes*48, "r"):read() (Which assumes the popen doesn't fail. A robust program would check the return value before trying to read from the pipe.) Based on the name "Keccak", what you want is not a checksum but a cryptographic hash. This algorithm is also known as SHA3 (successor to SHA1 and SHA-256/512). It's new so there isn't a lot of support in libraries yet. From what I can tell, it isn't even in OpenSSL. Is SHA3 a requirement? Because SHA2 is still a viable algorithm. SHA1 has suspected vulnerabilities and the oldest commonly used hash, MD5 is known to be broken. However, if cryptographic security is not a need, MD5 is also much faster than anything else, although I'd still suggest SHA1 which is almost as fast. Even CRC32 still has its uses if all you need is accidental error detection. BTW, what version of Lua are you using?
There are a couple of libraries that do basic crypto. Have you tried those?
Everything I've seen produces hashes of a pre-set length. I need something that will produce a hash of a length of my choosing. Keccak.rb does this.
I see your point, it doesn't look like anybody is currently publicly maintaining a SHA-3 lua implementation.
If you feel like doing this purely in lua, I've found a couple of keccak scripts: http://fossil.tangent128.name/LuaForum/artifact/bbd80b75b80976a56b125681a5d751b926d82e4c http://lua-users.org/lists/lua-l/2014-03/msg00905.html
Wow, I will definitely look into these. Thanks!
math.random uses a pseudo random number generator that works from an initial seed. As long as the seed is the same the results will be too. This is a useful feature. You can, however, change the seed! The most common way I've seen to have a randomly generated seed is to take it from the computer's time. Just add this somewhere near the beginning of your program: math.randomseed(os.time() ) Now your seed has a random value and each time your run the program things should look sufficiently randomized. 
Try [love.math.random](http://love2d.org/wiki/love.math.random) instead. On some platforms (at least Windows, maybe other OSes too) the standard implementation of rand() in C (which is what Lua uses for math.random) is quite awful at a birds eye view. (You may need to call [love.math.setRandomSeed](http://love2d.org/wiki/love.math.setRandomSeed)(os.time()), I don't remember.)
All it's doing is running Keccak rounds until it fills the desired length and discards extra bits. require "md5" function md5ex(data, length) local h = md5.new() local s = "" while #s &lt; length do h:update(data) s = s .. h:clone():digest() end return s:sub(1,length) end 
love.run contains love.math.setRandomSeed(os.time()), IIRC, which means it is called when löve is initialised. 
Right you are.
FYI, there is no language called "LUA" (all caps). The language is called Lua, which is the Portuguese word for Moon.
Thanks for this! However, when I attempt to call that function `print(md5ex("Hello",790))` I get the following error: `attempt to index global 'md5' (a nil value)` I have no idea what that means (I am not a programmer). I did install md5 from [here](https://github.com/kikito/md5.lua), but not sure if that's what I really need? Thanks again for your help!
yeah, the first line should be md5 = require "md5" I wrote that for [this md5 module](http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lmd5) that uses OpenSSL. Any module that lets you update the hash incrementally and clone the current state of the hash can be adapted to it. 
IMO, no. I'm a huge Lua fan. Been using it for a decade, written tons of code with it, integrated it with my editor, etc. I love to find new uses for it, but integrating it with .NET is just too problematic. *All* the bindings suck, in one way or another. They'll seem to work in trivial cases, then something will fail and you'll spend two days debugging an object marshaling problem, you end up building your own version of the library (I've used them all) and maintaining some custom hack on your own. Most of the libraries make it easy to marshal .NET objects into Lua, however you cannot interact with them idiomatically, so if you really want the ease of use advantages of Lua you have to do a lot of extra work. I eventually gave up on using Lua in .NET projects and if I have an application that I want configurable via scripts, I use C# as the scripting language.
Thanks for your help. After a couple of hours I finally managed to get that md5 module to compile, I think, but it looks like the test it comes with fails and I have absolutely no idea how to get my program to find it anyway etc etc. Using your first answer works perfectly so I'll just go with that and maybe in the future I'll revisit that problem.
Quando falei com o próprio desenvolvedor da linguagem, ele não me corrigiu, então convenhamos, isto não é importante agora. A prioridade aqui é outra, quando eu arranjar um programador, tu pode ser o papagaio no ombro dele ... A próxima frase é para tu não conseguires traduzir com o Google: tchê, não me faz te pegá nojo (don't make me get disgusted from you) ... nothing serious, just a local joke ...
Actually there is a language called "LUA" (all caps). It's a derivative of Lua based on all capital letters. https://github.com/mniip/LUA 
I stand corrected. It looks like a joke, probably in response to all the people who call Lua "LUA". However, it makes it even more important that the OP say Lua rather than LUA, since there's now a language for it to be confused with. :)
lua if statements have to be ended with "end": http://www.lua.org/pil/4.3.1.html Also, I don't think until is a keyword (mean anything special) in lua. Maybe you are thinking of while? http://lua-users.org/wiki/ControlStructureTutorial
 while bar do foo() end repeat foo() until bar
Ahh, that's neat. I really use Lua, but I'll keep that in mind now
Have you tried inserting a repeat above everything?
Like I said, I'm really new. What would that look like and how would it work?
Lua is simpler than Javascript. I'm not sure I would want to get simpler, but I had never heard of MoonScript before.
ZeroBrane Studio is pretty good. Has a nice debugger based on mobdebug.
I usually just edit Lua in a *good* text editor. Unlike a C++ IDE it really doesn't add much. In some cases the Lua IDEs have gotten in my way. I'd suggest you stick with something like Sublime Text, Vim, or Emacs. It'll pay off in the long run once you've got your environment set up. That said... The only good IDE *I know* for Lua is [ZeroBrane Studio](http://studio.zerobrane.com/). It's open source, actively developed and available on all major platforms. Looking on the lua-users wiki, [Glider](http://www.mydevelopersgames.com/Glider/) may be promising. It's a commercial IDE that can used for free if you're not developing a commercial application, otherwise about $40USD. 
Thank you so much, that works perfectly! Even had I constructed the table correctly I don't think I would have figured out what `unpack` was for anyway. 
To solve your largest complaint, I would like to have := for declaration and = for assignment. The moon compiler would then complain if the variable wasn't declared previously. This wouldn't solve typos for member access (eg. table.concay would still be valid until the run-time error occurs), but it would eliminate accidental declarations. I've had the whitespace errors on occasion too. 
Why wouldn't you want to save before testing modifications?
I'd make it local midi_range_list={ ["grand piano"] = { low=21, high=108 }, ["piano"] = { low=21, high=108 }, ["bright piano"] = { low=21, high=108 }, ["electric piano"] = { low=40, high=90 }, ["agogo"] = { low=60, high=61 }, } Then you can reference each value as `midi_range_list[instrument].low` which is easier than obfuscating what you mean with `unpack`.
Well, theres a button to run the script, but it doesn't run it without saving. Why would you want to save a potentially broken scripts which may or may not have a large number of changes since the last revision? Yes, I know it's the scripters fault. But it still would be nice to test before comitting a change. It's not like Lua is plain-text and doesn't need compiling or anything either. SigmaScript for android can run scripts without saving, why can't an IDE on a desktop OS?
Running without saving is problematic, because any attempt to "require" or otherwise load that file from disk will use an old copy. Technically, it's possible to do debugging with an unsaved copy, but not running it as the IDE relies on running the external Lua interpreter to execute the script, so for consistency sake the current file needs to be saved before running them.
That's very cool. I can definitely see the advantage to that even if it means altering a very long table yet again. Thanks!
I believe its something like in gmod. You see, both gmod and Dota run on source engine (well, dotas engine is heavily modded source engine). I play Dota and know some lua but I don't have any knowledge about them working together.
I know it's newer than many, but Atom is pretty sweet. I just finished coding for basically 48 hours straight (in Lua), and I like it a lot. I have used Notepad++ and Sublime Text, and I prefer Atom. Get it https://atom.io/ or from https://chocolatey.org/ (which I did) if you want to try it out. There are some good packages and such for it already, and it didn't crash on me once (it's in alpha still)
Usually IDEs and editors have an undo feature that will let the user revert any changes they have made. Also, with distributed revision control, local changes can be committed if you want them on non-volatile memory. 
Hi there! This is not the correct place for job offers. You should use /r/gameDevClassifieds instead. Also, it's Lua, not LUA. Cheers from Europe :)
http://www.youtube.com/watch?v=X5D_h2X8LCk Also, LuaJIT has a nice batch file for compiling itself.
When your careers email is a hotmail address, and your site leads to a login page, I get a bad first impression. But it doesn't matter, I'm european.
I didn't know I could report :D. I know now. Keep up the good work!
With under 3k subscribers, this is certainly the wrong place to find anyone. People here are either learning, or are subscribed to answer questions. I suggest a side-bar entry similar to /r/programming which refers to forhire or jobbit
I agree with adding a sidebar entry. Another relevant job-related subreddit would be /r/gameDevClassifieds/, Lua is a very popular game scripting language after all.
If I want a job, I'll go to a job site or subreddit. Otherwise job posts are annoying clutter.
&gt; your typical language subreddit doesn't allow people to post job offers Compared to "your typical language subreddit" /r/lua has virtually no traffic. Most of the posts on the front page are weeks old. I assume this post is prompted by [this](http://www.reddit.com/r/lua/comments/2b52xx/looking_for_a_lua_coder_info_inside) (the only such post I've noticed recently). It's gotten only 2 comments in response, but that's as much or more than nearly half of the posts on the front page, 6 of which have no response at all. In this case, it did create discussion (however brief) about how the Lua binding is done, so it's not entirely without merit. I'd prefer to see posts like that rather than none at all, and if nothing else they are of interest as a reminder than Lua is still actively being used. Just my two cents.
Seems like it's not that hard to just downvote them... If gets totally out of hand, sure, ban away.
The problem is that it's going to be slow, hard-disk intensive (which is slightly (only _slightly_) bad for the life-time of your hard disk), doesn't support subclassing or type checking (you can't make a function like `isinstance`), and have I mentioned it's slow? I have an idea for an alternative. Brb, testing it out before editing my post. EDIT: https://gist.github.com/gvx/4192a4d44e517f38bdac Kinda different, and it uses `require` rather than `loadfile`. Pros: aside from not having to read, compile, and run the module each time you create a new instance, it automatically defines a constructor and a string representation for you! Con: it's not possible to modify the metatable of either classes or instances on a case-by-case basis.
You can customize built-in "require" quite heavily. Including the way it looks up for things, just read the manual it's all there. I do something like this: --------------------------------------------------------------------------------- -- Bootstrap package loaders --------------------------------------------------------------------------------- -- common packages loader local function LoadCommonPackages(name) name = string.gsub(name, "%.", "/") local path = global.SCRIPTS_DIR.."/"..name..".lua" local code, err = loadfile(path) if err ~= nil then print(err) return nil, err end return code end -- mod specific package loader -- TODO package.loaders = { package.loaders[1], LoadCommonPackages, } And then when I type: local utils = require "ng.utils" It does what I need and how I need it to. So, hence I'm assuming your problem is with modules, not with objects. As for object you can construct them any way you want. Personally I use a simple OOP wrapper which automatically defines "New" methods on classes. Thefefore I would do something like that: local ngm = require "ng.math" local v = ngm.Vec2i:New(5, 10) Hopefully these thoughts were useful to you.
Forgot to add, "require" takes care of loading the file only once for you.
Check out chapter 16 of [Programming in Lua](http://www.lua.org/pil/contents.html).
To be brief, no, that's not a very good way to do that. If you want to make a constructor for objects, you usually [use what's called a closure](http://lua-users.org/wiki/ObjectOrientationClosureApproach) as a way to store private state variables. You can also use the `__call` metamethod to make the constructor look more like it does in Java, but it's not really saving you anything. There are also class systems, like [penlight](http://stevedonovan.github.io/Penlight/api/index.html) and [moonscript](http://moonscript.org). I've never been a fan of the class systems, since they don't actually introduce any new [features supporting object-oriented programming design](http://en.wikipedia.org/wiki/SOLID_\(object-oriented_design\)), they just make the syntax of creating objects look a little more like it does in [certain other languages](http://reddit.com/r/python), so that `class` is a keyword. The reason Lua does things with closures and tables that other languages do with class constructors and objects is that there are some times when you don't need a full-bodied class for something, and a closure does the job with less boilerplate. The designers know that it's hard to keep track of all the things a language can do, so Lua tries reduce the number of constructs it has by only using the most flexible ones. If you try to write the same program you wrote in Java, going through the motions to create a Vector object that only has an x and a y will start to feel a little tedious, and you'll just write function add(v, u) return {x = v.x + u.x, y = v.y + u.y} end Sometimes, that's actually all you need. Other times, you'll want to use the closures to create something that's more like an object. As it turns out, there are also [other things you can do with closures that you couldn't do with objects](http://www.paulgraham.com/icad.html), at least not very easily. Lua solves Paul Graham's problem like this: function accum(n) return function(i) return n+i end end
I use 30log for all of my OOP needs.
I think it's good to write your own, because you have to understand how it works anyway. Most featureful scripts focus on useless features such as multiple inheritance, etc. When writing your own you can do only the part you need. Have no idea what most people do.
Amazing article that was linked last in your post. Thanks.
I wrote [one of these](http://unreliablesource.net/luaspie/) myself ages ago. But never actually used it for anything. (I never used devilspie either for that matter.) Quick look at devilspie2 and kpie and I don't see the big difference between the two. What was your main issue with devilspie2 and how did you do that bit differently?
It's hard to be explicit about the problems I had with devilspie2, but I think it comes down to the functionality provided: * I don't like to see `get dimension` and `set dimension` primitives. * I didn't think the code was terribly nice. In my program you can get the size of a window via: w,h = size() And set via: size( new_width, new_height ) That, to me, just seems obviously better. Beyond that I think my code is neater and not spread with so much stuff. (But I only looked at the code before I started my project so that's not a particular reason.) I guess the real answer is I wanted to "write something".
I'll grant that the get/set pattern in devilspie2 certainly felt weird when I was looking at it but then again I think the implicit window operation is also awkward (and means you can't do a number of things involving operating on other windows in a given scriptlet). Writing something is a good reason.
Yeah I've been pondering adding a "windows()" operation, which would allow you to do more - but that changes the way you'd want to do things. For example you might find an emacs window and decide you want to find all others, so you could arrange four of them in a grid. The code might look something like this: if ( window_class() == "emacs" ) then w = windows() for k,v in ipairs( w ) do if ( w:window_class() == "emacs" ) and ( w:id() != window_id() ) then -- found another emacs window that isn't the one -- we matched on .. end end As you can see it gets nasty - trying to mix the primitives from being global to being per-object ( "`kill`" vs. "`window.kill()`" or "`window:kill()`") gets messy, and you have to jump through hoops to make sure windows you find aren't duplicates. The only alternative I can see is getting the user to write something like: function handle_emacs( window ) end Then looking for functions dynamically instead of having a globally-scoped script. But that seems like it could be a recipe for confusion too, and gets messy if you just want to cover "desktop == 2 &amp;&amp; application is emacs" becuase you'd want to define something like: function handle_emacs( window, desktop ) window.desktop(2 ) unless( destkop == 2 ) end Anyway .. lots of possible ways to go, but the devilspie basis has given me an "obvious" starting-point, if not a perfect solution. 
I think the implicit object functionality of the original devilspie was sub-optimal and is a huge mistake in a lua binding. If you look at my luaspie you'll see that I went with pushing a bunch of default variables into the environment of the script being run and having the functions take explicit arguments for the window to operate on. I didn't go full userdata on the window object though in retrospect I think that might have been the right thing to do but I was trying to diverge from the operational mechanisms of devilspie too much. I also added the basis for supporting more window event types. Though I think the only one I actually implemented was "closed".
Yeah I can see that :) I pondered having more events but couldn't think of a use case for myself. Really I just want [my chat setup](https://github.com/skx/kpie/blob/master/samples/pidgin.lua), etc, to be recreated when I launch programs, beyond that I don't really think about it too much. What kind of things would you do with your close-hook? (I guess you could save and restore locations/sizes for applications that don't support that.)
Why? I mean, this is a cool post and all but this is about Lua 5.2 while the devs are already working on 5.3.
5.3 will have goto, nice :D
A nice look at changes, for me the only thing I want to see in the near future is the ability to have "?" be a valid identifier. So we could write: function is_true?( val ) ... end
oh. Why is he posting something from 2010 :P
maybe he was confused by the [upcoming 5.3](http://www.lua.org/work/doc/readme.html#changes) version (with integers and bitwise operators)
You could use close events to script "dynamic" layouts like those in some of the newer tiling window managers. That is you could (assuming you can get access to and operate on other windows in a script) re-allocate the space from the closed window to other open windows in predefined ways. As a quick example.
Try SWIG. It's a huge project with many features and it supports multiple languages. I hope you won't be lost in options :-) 
I've tried a few of the wrappers and I always end up fighting with them once I want to do something even slightly complicated. I personally recommend just using the API directly.
Why do you not list your requirements and then may be people can suggest a library, or libraries, which suit these?
I wrote one a while back that I use a lot for my own projects, creatively called [LuaWrapper](https://bitbucket.org/alexames/luawrapper/src). You still have to do some of the heavy lifting yourself, but it's very straightforward. The entire thing is just two header files that you can drop in and start using. There's a very slightly out of date example [here](https://bitbucket.org/alexames/luawrapperexample). For simple getters and setters you can just used the provided utility template functions (assuming your getters and setters have the proper signature) like this: static luaL_reg Example_metatable[] = { // Get or set a public variable { "GetInteger", luaU_get&lt;Example, int, &amp;Example::integer&gt; }, { "SetInteger", luaU_set&lt;Example, int, &amp;Example::integer&gt; }, // Get or set using functions { "GetNumberFunc", luaU_get&lt;Example, double, &amp;Example::GetNumber&gt; }, { "SetNumberFunc", luaU_set&lt;Example, double, &amp;Example::SetNumber&gt; }, } The main feature is that it provides typesafe functions like `luaW_to&lt;Foo&gt;`, `luaW_check&lt;Foo&gt;` and `luaW_push&lt;Foo&gt;` which will operate on `Foo*`'s, and it even does the right thing when your class is a derived class. (That is, if you have a `ButtonWidget` that derives from a `BaseWidget`, you can ask for a `BaseWidget` and it will do all the proper casting). Pointer lifetime management is also handled for you. Anything created in a Lua script, typically through `Foo.new()`, is owned by Lua and will be garbage collected like anything else. Anything created in C++ will be owned by C++ but can still be pushed to the Lua state. If you want to transfer ownership from Lua to C++, you call `luaW_release`. If you want to give ownership to Lua, you call `luaW_hold`. 
Odd. I don't see how that could be correct in Java either. Incidentally, neither language name is an acronym; you don't have to go all-caps.
I've never used Corona, but the [docs](http://docs.coronalabs.com/api/event/touch/index.html) indicate that you get separate events for when the finger first touches the screen, when it moves and when it is lifted from the screen. See [`touch.phase`](http://docs.coronalabs.com/api/event/touch/phase.html) for details. In the example section, they explicitly check the event's phase, so you should probably do the same.
Take a quick skim of the multipuck, or drag platform sample projects. Specifically look at the callback functions registered for the touch listener.
Yeah Change touch to tap Or add in on phase = began (find this in corona docs) as touch has phases began and ended (press finger and release finger and move/hold finger) if you don't have a phase it will run your function two or more times. That's a lame explanation I gave cuz on mobile, sorry, but change touch to tap in your last time and ignore everything I said
You might be interested in the MoonScript linter for your last issue. It's designed specifically for that case: http://moonscript.org/reference/command_line.html#linter In my biggest MoonScript project (34k lines of code) I don't declare a single global variable, so I think local by default was the right choice.
First of all I want to say that I think MoonScript is a fine language and has influenced the way I write Lua. Most of my complaints are simply implementation details that I disagree with but completely understand why you made them. I personally would have preferred neither by default; forcing the user to specifically declare variables. In a world where I had to choose between global/local by default I'd pick local. It just Lua lets you fake restrictive global variables through metatables. 
[Canvas Draw](http://www.tecgraf.puc-rio.br/cd/) and [IM](http://www.tecgraf.puc-rio.br/im/) libraries work well. They're prepackaged with [LuaForWindows](https://code.google.com/p/luaforwindows/), though the package is a couple years old and uses Lua 5.1.
love2d.org (the best)
[LÖVE](http://love2d.org/) is more of a game framework, but it has very simple drawing functionality. You can mostly ignore the "game" part of it if you wish, though taking advantage of stuff like the keyboard/mouse input/controls might be fun to adjust things on the fly.
I am using Linux. The examples look pretty good and I think I have a decent chance of figuring out how it works. It will require some digging. Thanks!
I'm a little confused about that project. Does it allow me to include commands in my Lua program to generate drawings? Or is it something that has to be called separately? And will it just produce static images or must it be interactive?
I appear stuck on 5.2. But even so the installation process is leaving me a bit perplexed.
You should be able to [take a screenshot](http://love2d.org/wiki/love.graphics.newScreenshot) of the image then save it as a PNG or whatever. If you're up for something more advanced you could bind some keys to adjust the image on the fly and then bind another key to save a screenshot when you're happy with it. I should say your use case is a bit specific, so be prepared for a little bit of boilerplate no matter what you use. LÖVE may or may not be a good fit, depending on exactly what you want.
OK, I think I get it now. This is all going to run on a server using various command line programs glued together with a Lua program (calling things like Timidity, LaTeX, and Lilypond). This feels like it's going to add a bit more overhead especially as the user will only ever see the static screenshot version of the outcome of the Love program. Having said that, as a downloadable application this might prove to be a good framework that adds some cool functionality that won't be available in the online project. 
Löve definitely isn't a good choice for a server implementation. 
[SDL2](https://redmine.malikania.fr/projects/luasdl2/wiki) has a lua binding. I have found it pretty easy to work with.
It isn't?
Nope. But the linked post nailed it good. Lua is a Pascal-like lang. (Last time I used Pascal and have seen large enough code bases written in it was in '89 during the Turbo Pascal craze.) Also let's be honest, Lua is mostly an embedded language. And it got a moderate media coverage when Blizzard decided to use it. And whatever that company touches it generates extreme amount of ... mixed feelings (yeah, let's use mild professional words here lol).
I worked on AVImark from '97-01 it was written in DOS in the late 80's and I helped convert it to Delphi in the 90's I've only ever gotten 1 other job offer to work in Delphi/Pascal since and that was in 2002/3 I used to write laps around people in that language, knew all of it's ins-and-outs.... 
I evangelize Lua a lot to my coworkers and use it as a counter point often to help people understand deeper programming concepts. IMHO - Lua nailed coroutines and can be used embedded in an event driven system safely. I really love the language, I often use it as a beginners languages for kids through computercraft/minecraft to get them programming.
Computercraft got me into programming when every other way seemed too complicated. In hindsight, the other ways weren't too complicated - they just seemed that way. It was a case of give a man a fish. When I saw the possibility of having turtles that could do anything and everything, I decided I wanted to learn to fish.
Depends on the industry. Lua is pretty huge in the game industry and creative software industries when they need a quick, lightweight scripting language. 
Yep, I was offered a Delphi job in 2011, but I didn't take it. While I can modify a Lazarus project where I want, I'm no longer efficient in Pascal. I buried that lang with TP. 
I often realize that when I started programming I had the "luxury" of everything being complicated so programming really wasn't that much more complicated than everything else I was already doing. I also had a copy of Borland Pascal, as a young programmer having a complete IDE that gave you an integrated debugger made it a lot easier. Now it seems we have this disconnect where languages seem simple but the ability to introspect/debug is more difficult. I often find myself just giving up and telling kids to try C# in Visual Studio Not that that in and of itself is bad, its just that I feel like I've just taught a man to fish but told him the bad spots in which to then fish.
I am a game developer that uses Lua. Lua seems to be the most common scripting language in game development. However, the games industry is so obsessed with secrecy we can never share code, techniques, or even talk about what we are working on. So you never see all those Lua developers on boards, posting code snippets, or being part of a community. Bums me out.
Yeah, same. :(
Doesn't note_asharp = 440000 * loadstring(ratio[1])() work for you? Note that division loses precision. Because floating point numbers are stored in binary, fractions such as 256/243 and 5/3 get a small rounding error. In your case that may not matter, but on the other hand it might, so be aware of that.
That doesn't work for me. I've added a minimum working example that captures the spirit of what I'm trying to do along with the output (just in case my initial explanation wasn't clear).
To be honest, I'd say Lua's "problem", if there is one, isn't usership specifically, it's that many Lua projects and libraries, including the ones people use and like, end up abandoned. This appears to be due to a combination of often breaking backwards compatibility between versions and a general lack of cohesion in the community, which only partially results from the uninvolved stance of the authors. With the advent of LuaJIT 2.0, there seems to have been the beginnings of a sea change, but mostly downstream: in particular the Torch ecosystem has become quite substantial and organized. Similar fiefdoms exist surrounding, e.g., MoonScript. This fragmentation tends to result in ecosystems tailored to specific applications: scientific computing using Torch, mobile development surrounding Corona, and a nascent web development community around MoonScript. Unfortunately the use of different versions of the language and even totally replacing the syntax means that we end up with plenty of duplicated effort between communities: there are, by my count, roughly six actively maintained concurrency libraries, at least three pattern-matchers, and even networking is not really standardized, since `luasocket` still targets 5.1 exclusively. I am somewhat concerned that duplicated effort leads to developers becoming discouraged and leaving the community, or switching to Clojure. In my case, I've been trying to figure out how to use Typed Lua and luaproc with Torch. Except those are three different versions of Lua!
Using [string:split](https://github.com/attractivechaos/klib/blob/master/lua/klib.lua): a, b = table[1]:split("/") print( a / b ) Of course, this isn't really an answer to your question, but it should be faster than `loadstring`. That way, you would do it like this: note_asharp = 440000 * loadstring(("return %s"):format(table[1]))() Be aware that `loadstring()` can be a security vulnerability.
`string:split` -- I had no idea that existed. You cannot imagine how much that will clean up other sections of my code. In this specific instance not all the expressions in that table will be simple ratios (some will involve square roots and exponents etc). But thanks for that. And your code seems to work as I need it to. I do not understand what is going on there at all but as long as it works, I'm happy. Thanks!
No. Because `"3+2"` is an expression not a statement.
There's a button to highlight code. --======================================== -- KRLGV -- Hammerstix (Modified Arkii Script) 8/5/14 --======================================== require "unicode"; require "lib/lib_Vector" require "lib/lib_InterfaceOptions" --===================== -- Constants -- --===================== local WEBFRAME = Component.GetFrame("Web"); local c_distThreshold = 20; --===================== -- Varables -- --===================== local VipPadPositions = {}; local settings = { enabled = true, volume = 0.3 }; InterfaceOptions.StartGroup({id="enabled", label="Enabled", checkbox=true, default=settings.enabled}) InterfaceOptions.AddSlider({id="volume", label="Volume", default=settings.volume, min=0.0, max=1, inc=.01, format="%.01f", suffix="%"}) InterfaceOptions.StopGroup() --===================== -- Events -- --===================== function OnComponentLoad() InterfaceOptions.SetCallbackFunc(OnSetting, "Nyan Glider"); end function OnPlayerDrive(args) WEBFRAME:SetUrlFilters("*"); WEBFRAME:LoadUrl("http://teamknightrider.com/music/krtheme.wav"); end function OnPlayerGlide(args) if (settings.enabled == false) then return; end if (inVehicle == "true") then OnPlayerDrive(); else Stop(); end end --===================== -- Callacks -- --===================== function OnSetting(id, val) if (id == "enabled") then settings.enabled = val; elseif (id == "volume") then settings.volume = val; SetVolume(val); end end --===================== -- Functions -- --===================== function Play() WEBFRAME:CallWebFunc('Play', nil); end function Stop() WEBFRAME:CallWebFunc('Stop', nil); end function SetVolume(vol) WEBFRAME:CallWebFunc('SetVolume', vol); end 
Clicking this link brings you to a login screen.
Even if you have an account, clicking the link just shows my mega dashboard.
No file
I think, the real test is to get the file. Unfortunally, I failed it.
Ok, now it's corrected &gt;&lt;. Sorry for this!.
Why is it a .fdb file ? Not very luaish ?
Well, this file can be openened by fdbExtractor. Extract the whole folder and you will extract all the .lua files.
I don't actually know much about Firefall, but there are basic techniques you can use -- called *debugging* -- that let you know what is happening in your program. The simplest way is to add `print()` statements, like this: --===================== -- Events -- --===================== function OnComponentLoad() InterfaceOptions.SetCallbackFunc(OnSetting, "Nyan Glider"); end function OnPlayerDrive(args) print("Called OnPlayerDrive") WEBFRAME:SetUrlFilters("*"); WEBFRAME:LoadUrl("http://teamknightrider.com/music/krtheme.wav"); end function OnPlayerGlide(args) print("called OnPlayerGlide") if (settings.enabled == false) then print("errored out early") return; end if (inVehicle == "true") then OnPlayerDrive(); else print("inVehicle != \"true\"") Stop(); end end If the toolchain you're using doesn't allow you to `print()` arbitrary things to a console, you can usually use some sort of `alert()` statement similarly to create a popup window. In order to format code on reddit, put four spaces in front of each line, like this: ****&lt;--- spaces instead of stars makes this format
That's great advice. Thanks!
I'll give you the [PiL](http://www.lua.org/pil/contents.html). Take a look at chapter 5, and everything else. You probably don't want to look at chapters 24-, though, since they're more about embedding Lua in an application with C.
The best metaphor for functions, IMO, is that of a machine. Imagine an espresso machine: you put grinded coffee, water and electricity in it, it does some magic and coffee comes out. Or a microwave oven: you put food in, it does some magic and hot food comes out. Or a water filter: you put water in, it does some magic and proper drinking water comes out. Notice the pattern: something comes in, some magic happens, something else comes out. Now imagine a more abstract machine: a machine that doubles any number: * 1 -&gt; magic -&gt; 2 * 42 -&gt; magic -&gt; 84 In Lua, we define this as a function. A function is nothing more than a machine that receives some arguments (what comes in) and returns some values (what goes out): function double(x) -- a number x comes in local out = x * 2 -- magic happens return out -- the double of x comes out end print(double(1)) --&gt; 2 print(double(42)) --&gt; 84 The nice thing about using functions is that you can always reuse them. Imagine everytime you had to heat some food up you had to build something to heat *that* food, use it once and then throw it out. Luckily, someone else built a generic machine for that: a microwave, that can be reused for most foods. In the same sense, you can use functions to abstract a piece of code to reuse it other times. Some of these abstractions come with the language itself. For instance, there's a function called math.sqrt() that takes a number and returns the square root of it: print(math.sqrt(4)) --&gt; 2 So you don't have to worry about how to get the square root of a number, you just use this machine. Functions are grouped in libraries. In the example above, math is a library of many helpful functions for dealing with maths, like math.sqrt, math.cos (cosine), math.sin (sine) etc. Most languages, like Lua, come with a predefined set of libraries, called the "standard library". I think that's the basic of what is a function and how to define one. If you have anymore questions, feel free to ask.
That explanation is really good
Give this man gold
Just learn Lua, read [Programming in Lua](http://www.lua.org/pil/contents.html). You don't need to know C if you're learning Lua for Love. Lua is both a scripting language and programming language, the difference isn't important in your use case. 
You need the basics of programming, but C isn't necessary. Just start with [Getting Started](http://www.love2d.org/wiki/Getting_Started) and start going through the [Tutorials](http://www.love2d.org/wiki/Category:Tutorials). If you don't have the basics of programming, then start with [Learn Python the Hard Way](http://learnpythonthehardway.org/book/). Yes, I know it's not Lua, but it will teach all the things you need to know and AFAIK there isn't any better resource.
My guess is that they don't support user input.
Lua is a programming language, it is implemented in C but you don't need to know C to use it. Lua is called a "scripting language" because it doesn't need to be compiled - you can literally open "notepad", write your code, then run it with no middle step. That's a little simplification but still a useful one. By that measure things like perl, ruby, python, and javascript are all scripting languages, but C, C++, Java and so on are not. To get started I'd suggest you look at the Lua website, and the FAQ. The [unofficial FAQ](http://www.luafaq.org/) is also __very__ useful for beginners.
Because its a nice language. 
I'm actually learning Python right now! I'm almost done with the codecademy course on Python and from LPtHW was my next intended resource to go through to pick up on whatever codecademy missed. And thank you all for the clarification.
[MurgaLua](http://www.murga-projects.com/forum/showthread.php?tid=428&amp;pid=2031#pid2031) and the tutorials in the [documention](http://murga-projects.com/murgaLua/murgaLua.html#Your%20first%20program) made Lua click for me. LÖVE2D never seemed to but then maybe I didn't find super simple tutorials and workflow, like there's no UI tools after a decade? Yeesh. [Zerobrane Studio](http://studio.zerobrane.com/) is an IDE written in Lua that has built in Lua tutorials and can launch various Lua programs like LÖVE2D. Have you looked at PyGame and Panda3D? They use Python.
It appears you have the latest IUP Lua binaries; good. Next, you'll need a LuaSocket binary. The one you have may not work, so set it aside. Instead, you can obtain a socket DLL from the ZeroBraneStudio repository. Go to this [address](https://github.com/pkulchenko/ZeroBraneStudio/tree/master), and click on the 'Download ZIP' on the right. Unzip the master file, and find the directory 'ZeroBraneStudio-master\bin\clibs52', and copy the 'socket' folder into IUP's Lua52 folder (iup\Lua52\socket\core.dll, etc). Now, run iup\Lua52\Lua52.exe At the Lua interpreter prompt, type: require("iuplua") require("socket.core") If it gave no errors, then you should be OK.
Thanks for your help much appreciation, although i'm now getting this error with running require("socket.core") http://gyazo.com/a7edb21751b9e7d4450f1aba36b21f4b
You can't compare a number with a string. (Well, you can. But it will always be false.)
Try: if choice1 == "1" then
Are you using the Win64 version of Lua/IUP? I did a fresh install of both Win32 and Win64 versions, and I get the same error only with the 64-bit. The socket DLL is apparently 32-bit. Repeat the above instructions using "iup-3.11_Win32_bin.zip" obtained from [here](http://sourceforge.net/projects/iup/files/3.11/Tools%20Executables/).
Great questions here - gonna answer later because it's bedtime for me right now. 
Not really what your asking for, but definitely a source of inspiration http://en.m.wikibooks.org/wiki/Lua_Programming
I'm interested in helping. I would say that I'm proficient with Lua. If somebody could set up an article tree, I could help fill it in with information.
Also, in regards to the name: *Lua or Bust*
Sorry for the delayed response, but I think it's what robin-gvx said. They probably disabled this sort of user input for some reason.
Yeah, there should be a toolkit involved, LÖVE most likely, or maybe Moai, unless there's something better I've never seen. It doesn't matter if people learn to memorize the function names in a sound API, if the goal is to teach basic programming skills.
also just indenting 4 spaces on each line should work.
As a good starting point I'd model the book on Programming in Lua, adding in end of chapter questions and gearing it towards people who have never programmed. It's not a perfect solution and it's not what I think the book ultimately should be, but it's a good framework to base this on.
Awesome it works thank you so much!
Is `jsonP` a table? Or it nil? For what it's worth, [dkjson](http://chiselapp.com/user/dhkolf/repository/dkjson/home) is easy to use and should work fine.
I'm still new to it all but from what I have teste jsonP is just a nil value. but since I found no typeOf() equivalent function I just tried somevalue= jsonP + 5 and got the 'you are trying to do arithmetic with a nil value' error as well. is the a good enough test? edit: its 2:30am here and Robin Williams was found dead not long ago so I'll be going to bed. I'll try dkjson tomorrow thanks. (unless someone else has seen my error by then.)
I recommend using Zerobrane for developing and debugging Lua scripts.
The function is type() print(type(jsonP))
I assume you are confused about the stuff after loadstring? `("return %s")` is a `string`, and `format` is a member function of the `string` type, where `%s` is the string format, and `table[1]` is a string, so basically the return value would be `table[1]`. Do a search for string.format [here](http://lua-users.org/wiki/StringLibraryTutorial) for some examples.
Sure, sounds good. Let me know when you have a contents page prepared. 
Maybe it returns two arguments? The table and a string in case of error? :&gt;
print(type(jsonP)) says nil there are no errors in the console.
Thanks. print(type(jsonP)) -- says nil.
Yeah I found nothing about limits to tables og json files. (I did see people saving worlds in json files of a MB at least)
What does print(MOAIJsonParser.decode(jsonD)) say? (Generally things like that in Lua return two values when something goes wrong: nil and an error message.)
the file 00004.lua looks like this: function Initialize() Init_RoleValue_ENUM1(); -- ³]©w¨¤¦â¼Æ­È¦CÁ| Init_RoleValue_ENUM2(); Init_RoleValue_GlobalValue(); Init_Role_ModeValue(); --¨t²Î_ªì©l_³]©wÅã¹³ºX¼Ð Init_RoleDataTable(); -- ´ú¸Õ¨¤¦â¸ê®Æ Init_Drama_Script(); -- ¼@±¡¥Î¥þ°ìÅÜ¼Æ end so I wonder, what is the language of comments? I recognize it is wrong encoding, but someone here could know the language those comments are written in, before got corrupted.
&gt; print(MOAIJsonParser.decode(jsonD)) That prints out all the JSON as a string &gt;Generally things like that in Lua return two values when something goes wrong: nil and an error message. how do i access the message? 
So are you 110% sure that `jsonD` is both a string and valid JSON? After reading the MOAI source code, it seems that the parser just returns nothing in the case that the argument is not a strong, or if parsing fails for whatever reason. Between the unhelpful website, atrocious documentation and non-existent error handling, I think you or anyone is better off using MOAI as little as possible.
Is there a reason for the file naming convention and the fact there are so many with a single method each?
Tried it with a smaller file?
I did try it with a smaller string put directly inn and nothing happens then either. Could it be that I'm minifying the JSON? its on one line Lua doesn't seem to like that in other cases but I thought it didn't matter. (Minfying it saved about 300kb of space)
In order to determine if there was a JSON error, you would write: local json_p, err = MOAIJsonParser.decode(json_d) print(err) Lua supports multiple return values, so often libraries are implemented to return error codes as an extra return value. This feature is slowly becoming adopted by other languages (e.g. Go) but it is a little surprising at first. 
Thanks, both **err** and **json_p** says nil 
It seems very likely that your JSON is corrupt. Unfortunately, the lack of any error reporting by MOAIJsonParser means that we can't very well tell you for sure. Unless you want to put the JSON on pastebin so we can scrutinize it (it could be a fixable error), it appears that MOAIJsonParser is not going to work. There are other Lua JSON libraries, such as dkjson mentioned earlier, or you can [use LPeg and re to build your own](http://www.inf.puc-rio.br/~roberto/lpeg/). The disadvantage of doing it this way is that you'd have to learn to use a parser generator; the advantage of doing it this way is that you'd have the opportunity to learn to use a parser generator (*perspective!*). It might look something like this: parser = re.compile([[ value &lt;- object / array / number / string / boolean / null object &lt;- '{' (key ':' value (',' key ':' value)*)? '}' --other stuff here ]], { --[[table of callbacks]] }) json_p = parser:match(json_d) 
I'm using " and the JSON isn't escaped (I was just about to say I had tested with a smaller sting that didn't work but by removing an escaped field in that JSON i got it to parse, just now. ) The file is made up of only uppercase letters and these characters ( " : {} [] , ) a snippet from the start {"A":{"A":{"DEF":["AA"],"H":{"DEF":["AAH"],"E":{"D":{"DEF":["AAHED"]}},"I":{"N":{"G":{"DEF":["AAHING"]}}}, ... so the file starts with { and indents for each letter this way and has a DEF (definition) that is just a placeholder at the moment and a way of checking true/false, if there is not DEF the letter combo isn't a word. Have you ever found a table ever was too deep? since this JSON is a kind of Trie Tree its very deep (I'm kind of proud that I "invented" it without knowing what a Tree or a Trie Tree in programming was, about a year ago) by deep i mean every letter of a word is inside the last checking the word CheeseCake would be like this word = json.c.h.e.e.s.e.c.a.k.e.def -- giving the definition of the word cheesecake or an error if its not in the trie. EDIT: sorry didn't answer everything; I linted it when I originally made it, its kind of hard since the string is fucking hoooge. :) And I'm using it in the Unity3D version of the game, and it gets parsed everytime I start that game. (using a C# plugin called SimpleJSON.)
&gt; luarocks install lpeg Hmm I think I broke most of the things, tried installing LuaRocks (trying again) there are just so many things to understand (or I'm over thinking it) "Error: Build error: Failed compiling object lpcap.obj" this happens when I run the "luarocks install lpeg" seems I need version of Visual Studio (does the version matter?) "Unrelated, but: a brief note for visual studio users might be useful. When I first ran luarocks it complained about not finding the compiler. The "Visual Studio Command Prompt" ( which is part of the visual studio installation ) sets up all the paths needed for command line compiles -- but, maybe not everybody knows that, especially folks used to the IDE." I'm not a Visual Studio user I think I just have some components installed to make some other dev tool working. You guys are making me feel real dumb, but god damn you're helpful. And i really appreciate it. edit: Trying to see if installing a Express version of Visual Studio fixes the error. (when in doubt pile on with more installations, am I right ladies and fellas.) edit2: added all the PATH LUA_PATH and LUA_CPATH s suggested, now I get a error in command_line.lua line 207 C:\Program Files (x86)\Lua\5.1\lua: ...les (x86)\LuaRocks\2.2\lua\luarocks\command_line.lua:207: bad argument #1 to 'require' (string expected, got table) stack traceback: [C]: in function 'require' ...les (x86)\LuaRocks\2.2\lua\luarocks\command_line.lua:207: in function 'run_command' C:\Program Files (x86)\Lua\5.1\luarocks.lua:20: in main chunk [C]: ? I'm unable to add some print commands just before line 207 because its locked by the system. :/
Hm. I'm not very familiar with Windows. I'd suggest going to a Microsoft developer forum and asking how to install LPeg. Lua does get used on Windows, but everything I know is Unix. One thing you can try is to just load up LPeg in Visual Studio and try to build it, see [Windows DLLs with MSVC](http://lua-users.org/wiki/BuildingModules). You need to install lpeg.so/lpeg.dll (whatever extension) and re.lua, after that the parser should work.
Thank you, will try this. PS: Would it be easier if I used Linux ? (Since this development doesn't take too much power I guess I could just set this up on a VMWare Linux machine i use for testing things for my Ubuntu server.)
It would probably be easier if you use Linux: `luarocks` is primarily targeted at Linux, and is probably the most useful thing around right now for Lua development. You will probably have to build your application for Windows eventually, though, if you're planning on distributing it... so if you do figure something out, maybe add it to that guide we're developing.
In config.lua: return { var1 = 5 } Now in your main.lua: local config = require('config') print(config.var1) Lua itself doesn't care much about your file structure. Are you running Lua in some other engine?
How are you running the Lua program? Are you double clicking on the .lua file?
What is this file supposed to do? I'm pretty sure that are hundreds of different programs out there that store their configuration in something called config.lua
Ya I just double click it
We'll, it stores the values of the other program I'm making, it's just a randomized but I wanted to try something a but new to me :)
If you do that it prints 5 and closes almost immediately. A better way is to execute it through command prompt.
This isnt working for me... If you could give me a better desription on how the config.lua program works, that would be awesome, if you want my code, just tell me
Whoa! Thanks!
Ya I do
Then you'll need to do a little extra work - this isn't something that you get for free in Lua. The config.lua method is usually a technique used to put hard-wired (as in, programmer-only) configuration values that will be used in a read-only context throughout the rest of your application. But, you can do what you need with a technique called serialization. For example, I have something like this in my Lua apps, which are all built with the MOAI game toolkit (an excellent tool - see http://getmoai.com/ if you're not familiar with it) which incorporates Lua as its principle language. Here's my code: -- -- Persistent data: user-based data that must be recorded -- goal: anything you put in user_data, will be available -- in the next app session, *after* you call sync_user_data() -- user_data_path = (MOAIEnvironment.documentDirectory or "./") .. "/_myApps_user_data_.lua" ----print ("User data path is: " .. user_data_path) user_data_f = loadfile(user_data_path) or nil user_data = {} -- -- call sync_user_data any time you modify or update user_data in any way function sync_user_data() serializer = MOAISerializer.new () serializer:serialize ( user_data ) user_data_Str = serializer:exportToString () --compiled = string.dump ( loadstring ( user_data_Str, '' )) --print("Writing User Data: ", user_data_path) user_data_file = io.open (user_data_path, 'wb' ) -- attempt to save the file .. if (user_data_file ~= nil) then user_data_file:write ( user_data_Str ) user_data_file:close () end end -- clear the user_data completely function reset_user_data() user_data.app_name = MAIN_APP_NAME user_data.start_date = os.time() sync_user_data() -- every time you use this, it happens. from that point on, the data will persist. end -- on app start, we load user_data if (user_data_f ~= nil) then user_data = user_data_f() -- we de-serialize our loads --print ("Reading User Data: ", user_data) else reset_user_data() -- or, we begin anew .. end print(table.show(user_data, "user_data")) To use this, you simply: require("userdata") .. in your main application entry point (e.g. main.lua) .. and from that point on, userdata will contain whatever was persisted in the last run session whenever you called the "sync_user_data()" function .. please note that in this case I'm using the MOAI serializer that is built-in, but if you're not using MOAI it should be easy enough to use standard Lua serialization techniques described here: http://lua-users.org/wiki/TableSerialization 
/r/ibisum has a really good idea of what you need. I'd just like to add something: Avoid globals like the plague. Seriously. I've been programming professionally over 10 years, and more before that, and I can count the times I really, really needed a global variable using one hand. You can put most of that stuff in a config file somewhere, and if you need to alter the globals in some way you're usually way better off with some kind of easy input / output statemachine in the end that you can access via a require() call, because they can so quickly gain complexity that once you're using and setting the globals in 10-20 different files you can't keep track of them properly anymore. 
significant whitespace sounds fucking terrible. So sadly I have to skip this, it sounds cool though.
Nice. I see a lot of stuff the LÖVE community produced on there, especially things by kikito. Although, I did kind of hope to see [Ser](https://github.com/gvx/Ser) on there, but I don't know if it actually belongs. It doesn't have a lot of documentation, but then the README has all the documentation you need.
Yea, kikito's stuff is pretty great. I never came across Ser while putting this together, but it looks like a nice little solution; lighter-weight alternatives are always nice, and being faster than serpent is good enough for me. I've added it. LÖVE is pretty sweet - I posted on their forums asking for suggestions; maybe we can get a LÖVE-specific section going.
It's a shame that a number of critical core libraries are unmaintained and seemingly stuck on Lua 5.1 forever. By which I mostly mean "where's a maintained luasocket that supports TLS". I really want to use Lua for all of my little snippets and it looks like everything's there, but when it really gets to it, it just isn't. Edit: okay it turns out that LuaSocket actually _is_ maintained, it's just happening in [a completely unlinked Github repository](https://github.com/diegonehab/luasocket). It even works on 5.2, apparently. Still, there's a ton of unmaintained stuff all around.
Nice list. Thank you for putting it together.
You're absolutely right about the slew of unmaintained libraries; I'm explicitly trying to exclude old/unmaintained modules from this list. Thanks for the link to the LuaSocket github repo; I replaced the LuaSocket link with that.
Wow, I must be half-blind; I haven't used the sidebar here as a resource toward awesome-lua yet. Definitely some stuff on there to think about adding. Yes, I will maintain it, although there are some links on the sidebar which, while useful, don't really have a place on this list. Just adding a link would be fine, although another option that seems reasonable is trimming the sidebar down to just the parts which don't fit in awesome-lua. I think it would be taking away from the sidebar to fully replace it, though.
The Lua for Windows thing just installs lua right? EDIT: Nevermind, got it working. Thank you!
Off topic question, what do you run stand alone lua for? I write for game engines, but I never used it stand alone before.
Yea, that's what I was asking. Text RPGs are awesome :D were you making it for yourself or were you planning on distributing it somehow? I meant, I write Lua within game engines, like WoW, ESO, etc. Not writing game engines with Lua :P
If I ever get it into a state where it will be releasable (say early beta), I will put it up for download. Originally I had high ambitions for this project (see http://viathproject.wordpress.com/), but now I'm more doing it for myself, as none was interested. 
&gt;text based because I have no clue how to make a game outside of the console, I envy your ability to make game engines You can start here: http://love2d.org/ -- but it may require a bit more installing, etc.
That does look interesting, I will check it out. Thanks for the tip!
Thank you. That answer seems to have been bang on.
Just an FYI: It's Lua, not LUA. It's not an acronym.
Can we get a little demo video? This looks pretty sweet!
Lua, not LUA.
Sure! Give me some time to make it ;).
Here you go: http://youtu.be/6HmIr6WwZQY
I have no idea why started using caps for it, but thanks for the wake up call! :D
I used to use it, too. And because I was good at scripting, I'd act like a pretentious cock and make other people call it that too whenever they wanted me to write code for them (this was GarrysMod). I'm still a pretentious cock, but now I know how to spell it and I just tell people I don't write code for others anymore. Turns out it's an actual word meaning Moon.
The way the title is worded, makes it seem like `luajit-libuv` is used by Node.JS and others....
This project looks interesting. I have not seen it before. Anything with a jetpack is nice really. :) http://fpscreator.thegamecreators.com/ 
Have you considered using version control? You can make revisions, remove crap you don't need and if you ever need it back you can look in the history. It's also a great way to recover code if you break something.
The thing is the stuff I want to hide I know I'll need again and might even need in the next 45 seconds. One case is to imagine a long line of functions and hiding the ones I do not need to deal with at the moment but I do want to be able to quickly navigate and look around some of the rest of them. Or even just hiding what's going on in a big "for" loop because I need to see what's going on in the code just before and after it. Not all this code is to be commented out, sometimes I just don't want it cluttering up my view. And yes, I should be using version control anyway. Right now I'm using a manual method (backing up everything to another directory and creating subdirectories for branches) and really should be using git or something similar but the first seven times I tried to figure out git I failed (though I'm sure the eighth time's the charm!)
Oh, right, thought you meant commenting stuff that may/may not eventually use... I'm afraid I have no ideas to give, never used emacs, sorry! :( As for setting up git, it's as easy as 'git init' in a folder.. then 'git add .' to stage all changes, and 'git commit' to commit staged changes. You can get free private repositories from Bitbucket.
See, you make git sound so easy. Before I was trying to contribute to someone else's project and it was a mess. Maybe I'll give it another shot and since it's just for me I can make it simple and then add complexity as needed (also, emacs apparently has some nifty git commands built in so ...)
Every decent code editor has some built-in code folding functionality. I don't use emacs, but you can see some [discussion about folding code in emacs on StackOverflow](http://stackoverflow.com/questions/2399612/why-is-there-no-code-folding-in-emacs). Since you're specifically trying to solve a text editing problem on a specific text editor, I believe you could get better answers on the [subreddit dedicated to that editor](/r/emacs), rather than on /r/lua. Good luck!
I had a really really really hard time picking up &amp; not hating git at the beginning.. but it's really easy to get the hang of it, and when you get stuck you can just Google for it. The 'messiest' part of contributing to other people's projects is that they might refactor code or something before merging.. so it doesn't cleanly merge and someone has to fix it manually.
Don't try to figure out the Git command line. It's ridiculous. It's one of the worst-designed user interfaces ever. Instead, get a good Git GUI. I strongly recommend [SmartGit](http://www.syntevo.com/smartgit/). You still have to learn some of the *concepts* - there's no getting around that - but instead of insane command line switches and options you will see everything laid out right in front of you. Of course, every programmer you ever talk to will tell you will tell you to use the Git command line and the command line only, because GUIs are inherently inferior and only the command line gives you real power. Don't listen to them. Just go get SmartGit - it's free for non-commercial use, and a bargain if you use it for commercial work. And you'll learn a secret that those command-line-only developers don't know: SmartGit is *more* powerful than the command line, and a heck of a lot easier to use too. Really, try it out. It's a *huge* improvement over making backup copies of your code when you are worried about the changes you're about to make.
&gt; Of course, every programmer you ever talk to will tell you will tell you to use the Git command line and the command line only, because GUIs are inherently inferior and only the command line gives you real power. So does mean you and I are not a programmers? :-P I am familiar with the CLI, but prefer to use a GUI (git extensions) when I have the choice. 
Sourcetree (using Git) on Mac is really easy to setup and use. Normal Git can be quite overwhelming even for developers. But it's really good when you do. Dropbox has a very "light" version control. I would never, ever, recommend that anyone use it for anything, but you can rightclick a file and view its previous versions, and revert. Just in case.
Did you find it through my posting history? If you have any questions, believe me, I *looooove* talking about it.
That's an interesting approach and worth considering. The only problem I see specific to my issues is that sometimes I want that exact code to be present so I can compare it to the surrounding code. But this is still something that might work.
Thanks for the link to StackOverflow, *of course* they've dealt with the issue before (dumb me didn't even think of looking there.) And yeah, I do hang out at /r/emacs quite a bit but thought that since this might be a solution specific to Lua that maybe someone here would have already dealt with it. But /r/emacs was going to be my next stop anyway.
Thank's for the suggestion! I will definitely try it out. 
Did the spam filter catch this? I couldn't find it in the new queue only when I tried to submit the link myself.
Thanks a lot!
I had no idea that existed, so thanks! It's not what I need in this instance but it's good to know it's around.
Have him pick something that interests him, and then let him go at it. 
Lua is used in many personal projects because it is very small and easy to embed, and is also a beautiful language. [See this for example.](https://www.youtube.com/watch?v=0uEBs98PKQE)
I know you don't want books, OP, but more books here: luaforums.com
First, you define `gameListeners` as an empty table. Next, on line 150, you call `gameListeners` as if it's a function (which it isn't yet) before you define it as a function immediately after. You need to define it as a function before you'll be able to call it as such.
Because you use local gameListeners = {} which defines gameListeners as a table. Then you use, in global scope (so before the Main() function is called) gameListeners('add') then finally you define the function gameListeners(). You are trying to call a table. So, the script is executing from top to bottom. It sees your call to gameListeners, which as far as it is concerned, is defined as a table. I'm too lazy to read all of the code, but you should either define the function gameListeners() properly before using it at a global scope, or change the control flow of your program. 
from what I see: line 44: local gameListeners = {} lines 107-108: gameListeners('add') function gameListeners(action) so first You assign **gameListeners** variable a new empty table, and then try to call it -- but it's a table! After that, in line 108, You redefine the variable as function and later call it -- which should work ok. Well, I'm not sure what are You trying to achieve, but it wouldn't work in that order.
I always feel so stupid when the answer is this simple. Thanks man!
"\n" makes a new line For example: print("this is a\nnew line") outputs this is a new line
I am not looking to break a string into multiple lines. I am looking to break a statement into multiple lines of code without executing that statement until the final line of the statement. I am looking to turn this: print("this " .. "is " .. "a very " .. "long statement") Into this: print("this " .. "is " .. "a very " .. "long statement") And I want both statements to produce the same output. Of course the line of code is a lot longer than that example but that is the general idea of what I want to do. Edit: If you look at the link I posted, it gives a very good example of what I am trying to do.
Well, your second example will do just that. Lua is whitespace insensitive, so you can space out your code however you please.
Thank you! That worked great. I was under the assumption that breaking a line would execute the statement on that line. I guess that is why I could not find anything on Google about this issue.
I think I fixed that problem... But it still finds errors in the gameListeners function... And my enimies don't show up.
Can someone please explain what this is? I don't get it...
Well it's a script language, so you dont really compile it. Instead you use some kind of interpreter to run the lua program. This can be anything from something resembling a command line to a game, large parts of civ 5 is written in Lua. I can recommend Zerobrane for Lua programming. It's a solid IDE that comes bundled with a debugger, a bunch of templates for different LUA runners, and a "basic" output console. Edit: http://studio.zerobrane.com/
Can you elaborate on your project, and how Lua and Windows play a part?
Its a live coding environment. A live environment lets modify the program while its running allowing you to see the effects of your changes instantly. The Lua functions update() and render() are called once per frame, so any modification you make is sent to Lua between the frames so you can see the effect of your change instantly. Its a great way to prototype ideas, games, simulations, whatever you like. Here is a [simple demo video showing some of the basic features.](https://www.youtube.com/watch?v=1VRtRazMYSA)
http://luabinaries.sourceforge.net/
So you could basically do live-coding music? :-P
What do you mean? It's open source, free to download?
Yes, among other things.
This is the tutorial I used: http://www.thijsschreijer.nl/blog/?p=863
good eye, I threw a copy of the MIT license in both repos
There are actually a few reasons. One is to make error handling easier. I wanted to restrict the running of Lua code to individual callback functions. If a single callback fails, the C side catches the error without affecting the rest of the Lua state. If sockets were to be handled in Lua, this approach wouldn't really work. I also wanted to be able to hotswap any portion of the Lua code without breaking the bot. I implemented it such that when a rehash command is issued, an entirely fresh Lua environment is spun up with the new scripts. This way, you always get a fresh state when you reload, and old functions or globals that have been removed from the scripts will not sit around in memory. If the scripts have a syntax error or other fatal issue, the old environment will be kept and the new one thrown out. If the socket was implemented in Lua, I couldn't hotswap the entire Lua environment this way without breaking the connection. Another is the overall design. I intended this to be a (hands-off) C framework that lets you implement whatever sort of IRC bot you want with (hands-on) Lua. I wanted a fundamental difference between C code and Lua code. C handles the internal, not-gonna-change stuff, and Lua handles the customizable, change-at-will stuff. Of course, some stuff was actually better when I was using luasocket. But that's primarily because libircclient (which I'm using for the connection) kind of sucks. Sometimes when the connection breaks, it just hangs. When I implemented my own IRC protocol in Lua, the socket would always timeout and I could reinitiate the connection. I actually plan to write a replacement for libircclient, but that'll be off in the future. edit: I also plan to make everything multithreaded and more asynchronous in the future... handling the socket in C will help tremendously with that (by virtue of isolated callbacks).
It is entirely possible to reload only a portion of Lua code and handle errors gracefully without ever touching C. I am currently doing exactly this in a Lua project so I can catch errors and reload scripts after I fix the issue or update a function. Take a look at ``xpcall``. 
I used xpcall to handle errors in the last iteration but eventually things got too complicated and unorganized, and it was still possible to crash the whole environment sometimes. I may have been doing something wrong, but even so I like having the isolation I've designed this new framework with. Actually, I remember what happened now... If I screwed up the conditional block that rehashed the scripts (i.e., with a runtime error), it would be permanently broken and I couldn't do any more reloads. But that's just due to bad spaghetti-code design. Pretty sure I could have fixed that by implementing a modular callback system like I have in this C version, but eh. What's done is done.
The idea was first to create a Mafia game online, using very crude HTML (text based). The idea was nice, but I figured that it would be nicer to create a Lua server framework. Yes, I know they are out there, but they didnt fit what I really wanted. This server is currently written in pure Lua, though I encourage people to try to speed it up. Just a note: it's fast... Current features are routing (route all pages to a certain file), lua preprocessing (in a special environment!), lua plugins (the only one I currently wrote allows cookie editing) - but it's getting better. I'm making progress so fast that I thought it would be worth sharing this with you guys, even in this crude stage.
Awesome. Thank you.
This looks cool! It's generally very bad to run your web-facing programs with admin privileges, though.
Hey, just leaving this here because some may be interested: This is my all-in-Lua web framework: https://github.com/KateAdams/LuaServer/ An example of how they differ: https://github.com/jobro13/LuaServer-GameKit/blob/master/server/web/index.lua LuaServer's: https://gist.github.com/KateAdams/05f4b96ee544f4012d33 An example of a complete site (static-only content): http://kateadams.eu/ [(source)](https://github.com/KateAdams/kateadams.eu) Maybe you can see what you like/don't like or take some ideas for yours/compare the source/etc as it's all released under the GNU AGPL licence. Which reminds me, is your code going to be licensed at all?
I guess, but opening a socket on port 80 requires admin privileges on my OS... If you change the port in the settings file it will bind to another port - so you don't need to sudo!
&gt; Other metatable stuff includes that the plugin functions (such as the cookie) have their fenv set to the page env, thus you can get header data from plugins from the page it is called on (are you still with me..?) I see , although I wish more people would move away from the CGI-style web pages; so rather than "GET /" mapping to, and calling "/var/www/index.lua" (or similar), websitename.lua is called once on load, where it registers a handler function. My original attempt at a Lua web server looked something like this, before I moved away from the CGI style: index.lua: &lt;p&gt;The date is: &lt;?lua write(os.date("%a, %-%b-%Y %H:%M:%S GMT")) ?&gt; &lt;/p&gt; Oh, another thing I spotted, you might want to escape your content to prevent XSS attacks. All strings on mine are HTML escaped, unless the string is immediately prepended with `tags.NOESCAPE`, elements can also specify how strings contained should be escaped. For example, tags.script shouldn't be using HTML escaping, instead it has an `escape_function` on the tag options that points to `escape.striptags` :P
Thats actually a quite simple yet effective solution! I guess I'll incorporate this.
&gt; I see , although I wish more people would move away from the CGI-style web pages; so rather than "GET /" mapping to, and calling "/var/www/index.lua" (or similar), websitename.lua is called once on load, where it registers a handler function. I'm not totally sure what you mean by this. I have the feeling I'm currently doing the last approach (I have never really been in any form of web dev, to be honest, I just started learning about HTTP/HTML/CSS, and I always created "hardcoded" applications before (which are stupid, because they can only be used for one purpose)) - check out start_server.lua. It sets up "routes" for urls. For instance, if /page/* points to /page.lua and /* points to /index.lua, then /bla will be redirected to /index.lua, and /page/bla will be redirected to /page.lua. These routes can also have new roots, so /page.lua could also be setup in a complete different directory. About the security: I really have to start reading about all "default" exploits people can use, so I can prevent them. I currently have no escaping, which I must still add :) Thanks! 
https://github.com/OldFisher/lua-api-pp
It involves C++ :)
I'm no expert, but what you outlined sounds reasonable. Having 10 "requires" at the beginning of your Main file is not so bad. Good luck, I wish I knew more and could be more helpful.
It might be worth splitting the beethoven.table.lua out so that you just have a function that reads in, say, text files, for data. I'm always a little wary about putting data in code, but if you're using LuaJIT, that might speed things up. For your mention of main only ever containing functions, here's a good read: http://number-none.com/blow/john_carmack_on_inlined_code.html And on the efficiency side, do you know about localizing variables? local sin = math.sin for i=1,10000 do sin(i) end is 20-30% faster than just straight calling math.sin (it avoids a hashtable lookup).
&gt;It might be worth splitting the beethoven.table.lua out so that you just have a function that reads in, say, text files, for data. I'm always a little wary about putting data in code, but if you're using LuaJIT, that might speed things up. I have no idea what LuaJIT is so I'm going to ignore that part of your comment (my poor brain is juggling too much stuff as is). If I'm reading you correctly then you do agree that my data tables should be in separate files? So then in my beethoven.lua file I would have `require("beethoven.table.lua")` somewhere near the beginning and that would load all the tables I might need for the beethoven function. Right? &gt;For your mention of main only ever containing functions, here's a good read I read and then re-read and my eyes glazed over a bit. He's saying it is OK that if I have some code in main.lua that could be split out into a separate function and file that I can keep it where it is if it's only ever used in that one spot? That makes sense. I *feel* that my main.lua file should only contain calls to functions that exist in separate files and then maybe some little code to handle simple stuff. I mean it doesn't need to be so pure that it has but one "require" command and then a string of function calls. &gt;And on the efficiency side, do you know about localizing variables? I had never seen an example like this and I'm not sure I understand how it works. I just benchmarked that code and sure enough the localized version was about 30% faster. That's amazing. I've recently been localizing everything I could find after I began to run into all sorts of problems with the way Lua defaults to global variables. Apparently doing so is also increasing my program's efficiency/speed? Nice. 
LuaJIT is Lua, but with a Just In Time compiler tacked on, which makes it about 6 times faster. I honestly can't remember if it's part of the standard Lua distribution right now. It also has the awesome feature of letting you do a Foreign Function Interface to C, so you can just call raw C functions for, whatever you might want to do. As for the first part, no, I suggest making a lua script which can read in data from, say, a .txt file which contains the data. Then it's easier to feed it arbitrary data. Also, in require's, you drop the extension. So you'd just require 'beethoven.table' But really that depends a whole awful lot on what exactly you want to do. If you ever have another script generating input to your beethoven function, then you'll want to make something that reads it in from external files. Carmack is basically saying, avoid splitting stuff into functions just for functions sake. It might later result in you trying to reuse the code without totally remembering all that it does, and then it tramples what you're trying to do. But if you find yourself duplicating code via copy/paste, chances are you should split the original off into a function or some other routine. Basically, in lua, when you look up a table by something.anotherthing, it takes the "anotherthing" part, and does a lookup for it in something called a Hash Map. It's an effective way to store sparse (ie, not 1,2,3 but 1,9348,1238912) but varied (ie, not all uniform length) data. So if you want to do a LOT of accesses to anotherthing, you can temporarily store it in a local to avoid the extra overhead of doing the hashmap. In some scenarios, LuaJIT will automatically do that for you. Especially when you're using the FFI. By the way, if you ever find yourself doing something like for k,v in pairs(abunchofstrings) do result = result .. v end you should feel bad. Strings are "immutable" and what you're doing is creating and destroying a bunch of strings really rapidly. Instead do result = table.concat(abunchofstrings) which is basically x times faster, where x is the number of entries in your table abunchofstrings.
&gt; As for the first part, no, I suggest making a lua script which can read in data from, say, a .txt file which contains the data. Then it's easier to feed it arbitrary data. Ah, my data is always in the form of a table with keys and values (sometimes multiple values). But now that I'm thinking about it in some of those cases it could be spun out to just being data. Dang it. That makes a whole lot more sense and is cleaner than creating tables with ["1"] = c-sharp,["2"] = g-flat, ... instead I could just have a .txt file with c-sharp,g-flat, and read that into a table and at the very least save me a lot of typing. I'll have to think more on this for a bit. &gt;Strings are "immutable" and what you're doing is creating and destroying a bunch of strings really rapidly. Instead do ... table.concat I'm like 90% sure I've been doing this the wrong way. I have some serious auditing to do. One more thing, does `require("scripts/beethoven") ; notes,lyrics = beethoven(raw_data)` where the file "beethoven" contains the function "beethoven" look normal to you? Since the program is modular and you won't need the "beethoven" function every time you run it I figured I should only "require" it when it's actually needed instead of at the top of the program with tons of other "require"s. But that looks kind of ugly. 
Oh, if beethoven.table is static data then don't worry about it! That looks perfectly reasonable. Although if you wanted to do something interesting... Did you know that require actually returns something? So if I have a script named test.lua with function domagic(output) print(output) end return domagic and then call require('test')("Hi!") Can you guess what the output is? http://i.imgur.com/DcUV7UX.png So in this way you can make that function domagic local and then do this little bit of trickery. The domagic function will fall out of scope immediately, the garbage collector will nuke it, and it will take up memory no more. However! This is not worth it if you want to call the function more than once! There's extra overhead in calling require, you know? Even what you're doing is inefficient if it's done in a loop. Generally you should try to require things only once unless you're really screwin' around. Also, to clarify what I said earlier with hashmaps: Localizing variables only has a performance boost (usually) if it's a member of a table. Otherwise it just changes the scope.
Nice trick! It is what I was looking for but I will heed your advice and avoid it for the uglier require/call function line. Sometimes in my main.lua I will end up having to require the same file more than once as I will want to run the same function against the same data but with different parameters and won't want to remember to erase/add back in the "require" statement. But that won't be how the program runs in the long term. Thanks for all your help. I will now begin the massive task of reorganizing my code with all the advice here.
Sure. There was an implicit assumption of one file = one function but your observation holds regardless.
&gt;Once you require something once, the functions in that file are in your main. You don't need to constantly re-require things unless they are local and discard the result. Oh I know. I only meant sometimes while experimenting and checking results against each other in one run I won't know off the top of my head if I've already required a file or if I commented out that section and need to require it so sometimes a file will accidentally get required more than once. It's not how the program will run in the long term but it will happen during this phase of development.
Speed-wise, having multiple requires of the same function shouldn't be a major problem. When you require something, the require-function will look at the loaded-module-table (or whatever it is called) to see if the module has been required earlier. If it has, it will simply return that module, thus not wasting any time. But of course, filling the code with require"blabla" everywhere will make it a bit harder to read, so you should try to avoid unecessary requires. EDIT: You can require and call a function in one command (by one command, I assume that you meant one line?) by calling require"beethoven".lyrics() if beethoven.lua returns a table with the functions that correspond to the beethoven module.
Ah, I see. Right on. If you have any other questions, just shoot me a line.
&gt; OK, so I have a main.lua file which I believe should only ever call functions. [Not necessarily.](http://number-none.com/blow/john_carmack_on_inlined_code.html) &gt; I feel like having to include that require command every time I need to call a function is ugly Not at all. All languages have something like that -- import/include/require/etc. -- which "pulls in" other modules that the current module relies on. &gt; What happens if I require something that has already been requireed? Lua will only load a module once. If you call `require` on a library 50 times, the first call will load the module, and the next 49 times will return a reference to the previous loaded module. You seem to have a lot of ideas for organizing the code. Do them. That's how you learn. Ultimately, learning a language is a small part of learning to code. That's kinda like learning English: it doesn't make you an author. The harder part is learning to manage complexity so you don't overwhelm the quite finite capacity of the human brain. That's what you're wresting with now, and its an important lesson. The more you struggle with this kind of problem, the better you'll be able to understand why programming paradigms (e.g. object oriented, functional, etc.) exist. They're tools for managing complexity. The easiest way to get feedback would be to post the code somewhere.
&gt;&gt;OK, so I have a main.lua file which I believe should only ever call functions. &gt; Not necessarily. I was exaggerating somewhat but basically I think I'm following what Carmack said there. The way my software works is that after getting one chunk of data from a user it filters that through any of various algorithms which is basically just feeding the present form of the data into a function. *Those* functions should be properly organized in separate files. How I deal with other code not directly connected to those algorithms is a different story. &gt;Not at all. All languages have something like that -- import/include/require/etc. -- which "pulls in" other modules that the current module relies on. Originally I had all my requires at the top of the program which made sense to me (like initiating tables or declaring default values for variables). Sprinkling them throughout the code as needed felt less elegant. I'll get over it. &gt;You seem to have a lot of ideas for organizing the code. Do them. That's how you learn. ... The easiest way to get feedback would be to post the code somewhere. The goal is to post the code but first get it in a state that's at least somewhat usable. Right now it is a mess. Regardless of how it evolves in the future I think my initial instincts are the way to go for now as you have indicated here. I wouldn't have understood this much had I just not jumped right into the deep end and I won't understand the reason for further improvements if I don't continue to jump into these other deep ends. Thanks for the encouragement!
Why do you need to compare it to 5 anyway? Are you trying to determine the value of the "pointer"?
Yes, I want to determine the value of the "pointer"
Your best bet is probably to export a C function to do it for you.
This sounds like an [XY problem](http://xyproblem.info/). Why do you want to compare a userdata value? Where does the userdata come from? A little bit of context could lead to a much better solution. Just in case you aren't aware, userdata is usually returned by library functions and represents internal data to this library, like a file handle, network socket, or some complex data structure. It rarely makes sense to compare it, especially not with numbers or strings. Unless the userdata itself represents a number or string, in which case the library function that produced the userdata should have returned a proper number or string in the first place. Barring that, the library should provide its own functions to convert the userdata into a number or string if it's sensible.
Where does the userdata come from? They usually have methods or functions that you can use to get the associated values.
Take a look through [this](http://lua-users.org/wiki/IoLibraryTutorial). If you just need to pull one single line out of the file, you may be able to just use io.seek and read only that single line. If you want to build an array and repeatedly grab the nth line for various n, do something like: lines = {} for line in io.lines(filename) do lines[#lines + 1] = line end ... a = lines[97] If you just need one value and you can't calculate the position necessary to take advantage of io.seek, use a counter like akciom suggests. 
They don't have a value, necessarily, the memory address you see when printing them is just so you can identify them. The way lua is structured the userdata may just be a pointer, or be the actual data. I think you should instead be looking at what operations the userdata actually has, like robin suggested. And why are you doing this anyway? There's few cases where you'd need to check something like this, is there not a better way?
I think /u/bartbes meant to reply to you: http://www.reddit.com/r/lua/comments/2hro3t/can_i_convert_a_userdata_type_variable_to_number/ckvquwe
Not merely the easiest, but the only way. Unless you are 100% guaranteed to only have lines of constant length that you could calculate the offset and `seek` to it. If you'll be frequently accessing random lines, you could precalculate line offsets and store it in an index. But then why not go full database with sqlite? or a key-value store if you don't need to be relational. Also, you may even get better performance by reading the file at once then splitting the lines. As long as the file size isn't too big.
 You say, &gt;Not merely the easiest, but the only way... And then say, &gt;Also, you may even get better performance by reading the file at once then splitting the lines. As long as the file size isn't too big. So what you're saying is there is multiple ways to find the nth line in a file. :-P
There's two ways to boil water. You can make it hotter. Or you could raise the temperature. All I said was it can in some situations be faster to read the file all at once versus making multiple calls to `file:read`. But you're still counting the lines sequentially. Particularly since Lua doesn't have a ready-made `split` function.
Bud forgetting about pressure. If the pressure is low enough it will boil
Is this moving towards using lua for Monogame or Unity? Would I be able to roll with this and build an interface for either engine?
You can use this to script things in Unity but you have to develop a layer in C#, to use this to provide moddability or to create content for games, not to build the game engine/logic itself. For example, think of a RPG. The idea is to create the base logic (exploration, fighting, dialogue engine, etc) in C#, and create quests, dialogues, script the plot, special traps, puzzles by simple Lua scripts which call C# functions of the engine. Regarding MonoGame.. I've never tried it, but since Moon# is compatible with Mono 2.6 and later, I guess there should be no problem.
Perhaps Space Engineers could support Lua after all! This is exciting news.
This thread has been linked to from elsewhere on reddit. * [[r/spaceengineers](http://np.reddit.com/r/spaceengineers)\] [Remember the debate about in-game programming language? Lua just became viable.](http://np.reddit.com/r/spaceengineers/comments/2i0bcr/remember_the_debate_about_ingame_programming/) ^(*I am totes' unyielding will.*)
I keep trying Lua bindings other than LuaInterface, for one reason or another, but keep running into show-stopper issues, usually with regards to object marshaling, and I come back. Unfortunately it takes a pretty deep dive (i.e. you have to actually try to implement something hard) to uncover the issues. I took a look at Moon# a while a go and seem to remember this being a major issue: "Parts of the standard library are intentionally not implemented or behave differently." Next time I want to do some Lua in my C#, I'll give Moon# a shot again. 
&gt; Parts of the standard library are intentionally not implemented or behave differently. Hi :) That sentence refers to minor differences which are actually difficult to solve. For example, being a different virtual machine, load() cannot load binary files compiled with luac or similar things - that shouldn't impact common usage. This pdf http://www.moonsharp.org/MoonSharpStdLib.pdf highlights the differences and shows what's completed and what not done yet. [bear in mind there are bugs in the current string lib, as I said; I'm slowly fixing them. ] If you have comments regarding this, please reply.. feedback is welcome and also helps to understand what priority to set next.
Aren't you trying to create some directories without having the proper access rights? Try with sudo :)
The command should look like this, right? curl -R -O http://www.lua.org/ftp/lua-5.2.3.tar.gz tar zxf lua-5.2.3.tar.gz cd lua-5.2.3 Sudo make macosx test I'm sorry, I'm hideously inexperienced as far as the terminal is concerned. Thank you for your patience tbh !!!
I'll definitely look into homebrew, and I'll keep you folks posted re: how it goes tomorrow morning.
I've used the homebrew approach, it's definitely the best way to do it on OSX. 
 cd src &amp;&amp; mkdir -p /usr/local/bin /usr/local/include /usr/local/lib /usr/local/man/man1 /usr/local/share/lua/5.2 /usr/local/lib/lua/5.2 This is the problem: the make script is trying to create directories in /usr/local, where you have to be root to modify files/directories. If you are sure, that you need lua installed there, you can use sudo. The command would look like this: sudo make macosx assuming that sudo works the same as in linux 
Homebrew worked perfectly. Thank you so much.
Kudos to you for using local variables as much as you can. That's a sensible thing to do. Now I think you are ready to get to the next level. You see, in lua, when a "chunk of code" receives or provides values, it's not a chunk any more: it's called a *function*. That is *precisely* what functions are. In Lua, a function is defined like this: local function sum(a,b) return a + b end In that example, I defined a function called `sum` which takes two *parameters* (`a` and `b`) and returns a `result`. A function is invoked by putting its name (`sum`, in this case) followed by the values you want to give to its parameters, in parenthesis, and separated by commas. For example: local c = sum(1,2) You can use them to structure your "code in chunks" as "a group of functions". local function get_notes() local notes = {} ... -- lua commands return notes end local function do_something_with_notes(notes) -- you can use notes here end Once you have your code structured this way, you can get the notes by invoking the first function, and then work with the notes in the next function (or functions): local notes = get_notes() do_something_with_notes(notes) do_something_else_with_notes(notes) 
Use functions. You seem to be grouping code logically into "chunks", but now you're going to group into functions. Then, if you notice you're repeating code from one chunk to the next, you'll factor out that code into another function. If your chunks are big enough and logically distinct enough from the others you can also put them in separate files.
Ah yes, I'm using functions all over the place. These chunks of codes are specific instances of calling various functions with various values in order to achieve interesting (I hope) results. It just so happens that one of these chunks, which creates its own results, wants to use a couple of variables from another chunk. Thus I need to know the best way to handle indicating how to globalize an existing local variable without making it *truly* global. I mean I have one variable (though it's actually a constant) TICKS_PER_BEAT that is global and is used in various functions scattered throughout many different files. These global variables I'm talking about will only ever be used in this one file and will still be copied into a local variable which will then be used in function calls (if that makes sense). Kind of a semi-global variable? 
To define a variable in a global scope, simply define it in your main file without specifying local. Returning the variable from whichever function it's created in to the main file should work.
Yeah, I know how to create a global variable the question I'm asking is a bit more subtle and more about coding style. The variable in question starts its life as a local variable within a self-contained chunk of code but then a later self-contained chunk of code decides it wants to use that variable as well. Now I know I can just create it as a global variable in the first place but it's not functioning like a "normal" global variable so I'm wondering how best to name it or what process I should use to globalize it so that future programmers will understand what's going on. I explain all this in more detail in a comment [here.](http://www.reddit.com/r/lua/comments/2i3ua9/exporting_a_local_variable_for_use_elsewhere/ckysxzi)
Awesome, thanks! I understand that it can't be used for the entirety of the game, but Lua is a bit easier to introduce to people over C#. It would take a bit of work to make a simple Lua interface to the C# setup for unity.
Ok so this is how I would write what you are saying on a high level: local user_input = get_user_input() local batch_music = create_batch_music(user_input) save_file('batch.mp3', batch_music) local mozart_music = create_mozart_music(user_input) save_file('mozart.mp3', mozart_music) local blues_music = maybe_create_american_blues_from(user_input, batch_music) if blues then save_file('blues.mp3', blues_music) end On a lower-level, surely there will be some variables that will have to be shared. If it's a thing that you "create on this scope and you pass to the functions", you just create an extra local variable and an extra parameter on the functions that need it. For example, if both have the same `tempo`: local tempo = 60 ... local batch_music = create_batch_music(user_input, tempo) ... local mozart_music = create_mozart_music(user_input, tempo) If a lot of these variables are the same, you could use a table, like `params` in the next example: local params = {tempo = 60, frequency = 440000, ...} local batch_music = create_batch_music(user_input, params) ... local mozart_music = create_mozart_music(user_input, params) If one or more of the values that one function needs are *produced* inside another function, you can return it with the result. See `batch_params` on the next example: local batch_music, batch_params = create_batch_music(user_input) ... local blues_music = maybe_create_american_blues_from(user_input, batch_music, batch_params) I hope this helps. What are you using to do what you are doing, by the way? It sounds quite interesting.
OK, first up, remember, I'm not a programmer and this is the only language I know. Soooooo until this moment I was under the assumption that one could have local and global tables just like you'd have with variables. In my tests just now this does not appear to be the case. Is it wrong for me to have assumed it *would* be the case? So, back to the issues, I have several blocks of code that use the same starting data and manipulate that data using the exact same functions just with different parameters. It's these different parameters that generate the different styles like "Bach" or "Mozart" and not different functions (ie, there is no "Bach" function). And you end up stringing together a set of functions against the original data and shape your initial notes into whatever you want. And then you call the functions that generate the sheet music, MIDI file, audio files, any various graphical notation styles you want, and so on. Generally each block of code will start with the same initial data, the "crazy music", and build up from there making its own decisions along the way as to what parameters to pass. But sometimes there will be a block which *could* build it up from the starting point but this time instead wants to use the results from a previous block and manipulate those some more. Up till now my plan was that each block would use the exact same variable names and *table* names and each would be local. Like the value of `tempo` could be different for each block but that same name is always used (via local variables). Likewise my plan was to use `note` for the table which holds the pitch values for each piece of generated music and always use that exact same name in each block. But now that it appears that tables cannot be local my plans will have to change. Ugh. This bites. If I want to use the same table names that means I would need to clear the table first (`note = {}`) and then fill it up. OK, I'll get over it but this leads to the same problem as before, say I want to keep a `note` table from the first block of code around and use it in a block further down, how best do I indicate that in the code? Remember, the intervening blocks will delete that table and fill it up with their own values. And while I could use different names for each "note" table it feels wrong and messy and makes the code more difficult to follow (I think). Something like: BLOCK_1_NOTE = shallowcopy(note) -- "shallow copy" is a function that I use Which would then allow me to state at the beginning of the block that wants to use that table: note = {} note = shallowcopy(BLOCK_1_NOTE) Does that look reasonable? And would people understand what's going on? Do you see now why there might be a local variable that I'd want to do something similar with? Say there's a single variable (`tempo`) produced along the way in Block 1 that needs to be used in Block 7 analogous to the table situation above so at the end of Block 1: local tempo = "60bpm" BLOCK_1_TEMPO = tempo And then at the beginning of Block 7: local tempo = BLOCK_1_TEMPO ? Or based on /u/AdvertSlaxxor below is it better to just use tables like: local tempo = "60bpm" global_stuff["block_1_tempo"] = tempo -- Block 7 local tempo = global_stuff["block_1_tempo"] ? But then how would that work for tables? tempo[1] = "60bpm" global_table["block_1"] = shallowcopy(tempo) -- Block 7 tempo = {} tempo = shallowcopy(global_table["block_1"]) print(tempo[1]) -- produces "60bpm" ? This code seems to work on my end. Is this more standard? Is it actually easier to understand? &gt;What are you using to do what you are doing, by the way? It sounds quite interesting. I posted a progress report on Reddit [here](http://www.reddit.com/r/composer/comments/2ey2db/music_progress_report_reached_an_important/) a month ago and I've made tons of progress since then. I'm spending what I hope is only a week doing a massive code cleanup and audit at which point I'll post a second update. Definitely check it out and if you have any questions about what I'm doing please ask! I'm positive that there are things I should be doing, libraries I should be using, etc., if only I knew better! 
Looks pretty cool, one thing I'd change: local e = _ENV local l_print = print local e2 = { print = function(...) l_print "Highjacked!" end } function foo(_ENV) print "ASDF!" end foo(e) foo(e2) Output: ASDF! Highjacked! So you can recommend writing 'classes' as (There's also ~~one~~ two more change here, sorry :D): local lolot = require 'lolot' local Person = class.Person(function(_ENV) -- Do stuff here! Since _ENV is local, it will not change anywhere else while you're calling class methods. It also will simplify calling class methods, since you don't need to change _ENV every time you make a call. end) -- If one arg: No parent. If two args, the first arg should be a parent. There'll probably be more tricky things to code (Globals, mainly), but I think this syntax is a lot more convenient.
I'm having a hard time completely understanding what you mean. I tried what you suggested (in like a quick and hacky way, much like the rest of the library). It doesn't seem to reset the _ENV variable, variable when the namespace function exists. I must admit that it never crossed my mind to just name the parameter _ENV. In the last example i'm very intrigued about the use of newindex on the class table. I'll definitely do that. I could also return the table instead of setting it globally, but that's a minor change. I should make all the functions local anyway ;) All in all, i'd be very happy to hear how i'd go about that _ENV "hack". It was all much easier before 5.2. EDIT: I tried it bit more, it seems like it doesn't reset the env on function exit. This means i either have to copy the entire _ENV table (nope) or manually reset it every function call local newG = {} local oldG = _ENV function dude(_ENV) function a(b) print(b) end end dude(newG) _ENV = oldG newG.a() --Print not found 
&gt; I was under the assumption that one could have local and global tables just like you'd have with variables That impression is correct. Tables can be local or global. Or to be more precise: variables can. Tables are values - and they are not global or local until they are assigned to a variable. Variables are *names* pointing to *values*. These names have a *scope* (which can be global). All variables (all names) work the same way in Lua, independently of the *type of the value* they have pointing to. Tables can be global, local or both (if several variables, some local and some global, point to the same table). Show me your tests (maybe put them in a [https://gist.github.com/](gist) if they are long). &gt;So, back to the issues, I have several blocks of code that use the same starting data and manipulate that data using the exact same functions just with different parameters. It's these different parameters that generate the different styles like "Bach" or "Mozart" and not different functions (ie, there is no "Bach" function). Well, you have to call that function (or chunk of code) *something*. Call it `create_music` if you want, or `iterate_over_music` if it makes more sense. For example: local tempo = 60 local input = get_user_input() local mozart_music = create_music(input, tempo) &gt; And you end up stringing together a set of functions against the original data and shape your initial notes into whatever you want. Be careful with that "whatever you want". Computers need specific instructions - you will have to translate the user's input into a concrete set of "ifs" or "initial configuration variables" somehow. &gt; But sometimes there will be a block which could build it up from the starting point but this time instead wants to use the results from a previous block and manipulate those some more. In that case I would use a table to hold the information as it "gets transformed" over time. local make_music = function(user_input, options) ... if xxx then options.tempo = 80 end end local initial_options = { tempo = 60 } local user_input = get_user_input() -- In some cases, make_music will *change* the value of options local mozart = make_music(user_input, options) This works well as long as your changes are "sequential"; they happen one after the other, reusing the changes of its "parent". If on the contrary your changes happen "in a tree", where each change can have "more than one children", then you need to do that shallowcopy you are talking about at the beginning of each child change (otherwise childs would "trump each other": one would set options.tempo to 50 and the other to 90). Your make_music would have to start like this: local function make_music(user_input, options) options = shallow_copy(options) ... return music, options -- return my copy of (modified) options so children can use them end This way, each child would start by "creating its own copy of options" so others don't step on it, so to speak. I am still convinced that this can be done without global tables - just passing parameters and returning values when needed (or rewriting v. It's difficult to know for sure without seeing the whole thing. I hope this helps, good luck! 
These are some of the problems you'd face that I mentioned :) Having all the functions local is good, and magic is *generally* bad, though libraries like this will always have a lot of that! I can brainstorm the things a little bit, you could do something like: - Create object. - Set __index of object to _G / _ENV, so you can do print() etc. inside your object. - (alternatively) you can do `local a, b, c = a, b, c` (replace `a, b, c` with global functions, of course); &lt;insert object definition, using `a, b, c` locals&gt;. Keep in mind that I don't like this way very much, since it won't respect replacing globals with new stuff. (i.e if you're replacing `type`, you'd have to do that before the class, or the class would have the old `type`. - Next, you call the object functions, which you gathered via class.Name(f): -- Create basic object environ local obj = lolot.newBase() -- or something like that. This'll basically just set __index to _G, and _G in obj to the old environ. -- Resolve any parents. (you could keep this in an array for each object, to speed things up) -- Start with the top level parent: for i = 1, #hiearchy do -- Probably something something obj.super before you call this function. hiearchy[i](obj) -- This'll pass obj as _ENV to the class, and have it put everything in it end -- The constructor, etc. will have been replaced a few times, but that's ok I guess, since this is not meant for memory friendlyness :) -- Although you could probably do cool stuff to reduce that overhead, if you were to have each class in it's own file, but that's another day :D -- Initialize the object obj.__init(...) -- Done? I think. Maybe. Let me know if this is unclear, I unfortunately had to brb in the middle of writing this, and that kind of wrecked my train of thought!
Here's what you need to do with your code, too: local newG = setmetatable({}, {__index = _ENV}) local oldG = _ENV function dude(_ENV) function a(b) print(b) end end dude(newG) -- _ENV = oldG -- You don't need to do this now newG.a("asdf") -- asdf print("asdf #2")
I kinda see how this could work. It would have to be a pretty core rewrite of the project though. I might do it next time i'm bored and feel like doing something in lua. 
Yeah, it would :) And then, once you finish that, you'll probably find ways to make it even more efficient, and so rewrite #3 begins :p
&gt; That impression is correct. Tables can be local or global. Or to be more precise: variables can. Tables are values - and they are not global or local until they are assigned to a variable. Dang, I just couldn't figure out the syntax but finally. I won't bore you with those details but suffice to say it works. And I am relieved. &gt;Well, you have to call that function (or chunk of code) something. Call it create_music if you want, or iterate_over_music if it makes more sense. I just meant that my previous comments were a bit misleading as each block is not just one function (eg, "bach(note,options)") but a series of functions that are strung together to produce something which you can label "Bach" or "Mozart". I was trying to simplify things a bit and wanted to make sure I didn't complicate them instead. &gt;Be careful with that "whatever you want". Computers need specific instructions - you will have to translate the user's input into a concrete set of "ifs" or "initial configuration variables" somehow. I just meant you can pass whatever options you want to the existing functions to get whatever results you desire from those functions. I've got some 4,000 lines of code so far doing all sorts of stuff while aiming at 40,000 for the beta release. &gt;If on the contrary your changes happen "in a tree", where each change can have "more than one children", then you need to do that shallowcopy you are talking about at the beginning of each child change (otherwise childs would "trump each other": one would set options.tempo to 50 and the other to 90). Your make_music would have to start like this: OK, but now let's take that we have 10 blocks of code each with the exact same variable and table names (all localized) with one of the table names used in all the blocks being "notes". If Block 4 wants to use Block 1's "notes" table and Block 8 wants to use Block 3's "notes" table how do you keep them separate? It really feels like creating a global version of those tables at the end of each chunk and then "shallowcopying" them into each successive block that wants that same data would be the easiest approach. Or I can create a global table made up of each of these local tables and copy from that as needed. It's just the latter approach makes my head hurt a little. And in case it's not clear, these blocks are not functions. They call the various music functions in order to produce the final results of the sheet music and audio files. Also, in case this helps, all this copying of variables and tables around is so that in one run of the software I can produce multiple results with different parameters without having to run the software each time. Does that make sense? I want to compare the results of using different sets of parameters with some functions against a different set of parameters with those same functions sometimes using the exact same initial or intermediate data, sometimes not, so that I can compare the results. The final version of the software most likely will not preserve this functionality but for the time being it's useful to be able to do it this way and even in the beta (or alpha) release this will probably be preserved in order to illustrate to contributors how the data is manipulated. I feel like maybe I should have mentioned this earlier. 
Perpetual lua delevopment. I must admit, I could find worse ways to spend eternity. 
The lua_call or lua_pcall have a nresults parameter wth the expected number of arguments returned. Those results get pushed onto the lua stack. 
Ah, I'll go look for that now, thanks!
&gt; That is it that C is doing to make multiple (and unknown in amount) returns possible? Is the return list a pointer to a list in the heap? Lua has its own runtime stack. When you return 5 values, you're simply pushing 5 values onto that stack. This is much more obvious when you're doing it from C. For instance, to return 3 values from a Lua function: function myFunction() return 111, 222, 333 end If you write that same function in C using the Lua API, it looks like this: int myFunction (lua_State *L) { lua_pushnumber(L, 111); lua_pushnumber(L, 222); lua_pushnumber(L, 333); return 3; // tell the caller what you left on the stack } `lua_pushnumber` (in lapi.c) looks like this: LUA_API void lua_pushnumber (lua_State *L, lua_Number n) { lua_lock(L); setnvalue(L-&gt;top, n); luai_checknum(L, L-&gt;top, luaG_runerror(L, "C API - attempt to push a signaling NaN")); api_incr_top(L); lua_unlock(L); } `setnvalue` sets the number portion of the top stack element (union) to the given value, then `api_incr_top` increments the stack pointer. 
Seems to me like your current code could be summarised as this: getInput() makeCrazyMusic() Bachify() Mozartify() AmericanBluesify() Perhaps you are wanting something more like this: input = getInput() music = makeCrazyMusic(input) bach = Bachify(music) mozart = Mozartify(music) americanBlues = AmericanBluesify(Bachify(music))
Except it's not quite so succinct. I think how I attempted to simplify the problem has created more problems. It's more: raw_input = getInput() crazy_music = makeCrazyMusic(raw_input) do -- Bach local music = quantize(crazy_music,option) music = scale(music,option) music = create_themes(music,option) music = manipulate_themes(music,option) music = form(music,option) create_MIDI(music) create_sheet_music(music) end do -- Bluesify Bach local music = music from Bach just after create_themes but before manipulate_themes music = manipulate_themes(music,option) music = form(music,options) create_MIDI(music) create_sheet_music(music) end So the Bluesify Bach is a branch taken from an intermediate result. And this kind of branching can happen anywhere at any time. I really do think that having a standard way to "export" a local variable/table as a global variable/table and then "import" it into a different block is the cleanest way to do it but as that idea has garnered no support I think instead I'll just have to add the Bluesify Bach block into the Bach block (with careful variable copying and copious comments) and then I can still have a separate Blues block that starts from the beginning using the `crazy_music` table. This approach isn't as pretty as a block can get a bit bloated but I guess it'll do.
Is the following not an option? raw_input = getInput() crazy_music = makeCrazyMusic(raw_input) do -- Bach local music = quantize(crazy_music,option) music = scale(music,option) music = create_themes(music,option) musicForBlues = music ... do -- Bluesify Bach local music = musicForBlues
Definitely and that's the exact thing I was proposing. But what I was wondering is if there's a standard way to notate that in the code. For example, it looks like regular global variables would look like `TICKS_PER_BEAT` and that's the convention I'm following. So is there a good way to indicate that this is now a global variable even though it's scope will still be somewhat limited (ie, the TICKS_PER_BEAT variable gets used in all sorts of functions in all sorts of files whereas as this blues one will only be used in this file). I had thought `exported_bach_music` or mixed caps (like you did) or even creating import/export functions that would be export(music) .... local music = import(music) That would basically alter the variable name "music" and make it a global copy of the local variable and then the import would copy that global name back into a local variable.
I don't know if there really is a convention for this in Lua. I think you may be overcomplicating the issue here. Just choose your own convention and stick with it. I wouldn't worry about import/export functions or changing the scope of variables, just make a new global whenever you need one.
In that case since I use lowercase for all my local variables and all caps for globals then I guess the mixed case will do for these semi-global creations. As long as it's consistent then it should be fine, as you say.
I have no idea why you have linked to a gmail thread, which requires a gmail login.
There is an IDE built on the base off eclipse, called LDT. Not completely sure what you mean with "beautify" though.
Turn things like: local t = {x = 2, xy = 4, zxy = 8} into: local t = { x = 2, xy = 4, zxy = 8 } It gets a lot more complex with functions, etc. etc, but the basic principle is that it makes the code look nicer, and more readable.
I keep meaning to try [ZeroBrane Studio](http://studio.zerobrane.com/) If you try it, please follow up and let me know how it works out for you. :)
I use it. I come from Python, where I never found an IDE that suited my taste, so I mostly just used Vim. If I ever found anything as good as Zerobrane for Python it would change my workflow significantly. It's very good, it has a few hiccups getting the correct function description when using Moai, and it's not as full featured as any major C++ IDE, but it's still one of the better tools I have used.
Why remove the content of your post? You could leave it up with the solution, and if someone else has a similar problem, they'd find it via search.
[Relevant xkcd](http://xkcd.com/979/)
I'm going to guess he was introducing a `nil` somewhere that cut off the sequence prematurely.
Have you tried PyCharm? It the refactoring and type completion are stellar.
And now the `brew` is your oyster.
Briefly. I dislike Java. Even in my android dev testing I do most of my stuff through the command line and scripting to avoid dealing with Eclipse.
I totally don't understand your question. Are you asking how maintainable Lua programs are?
Read [Learn Lua in 15 Minutes](http://learnxinyminutes.com/docs/lua/) and then make your own judgment.
It performs very well.
&gt; readability, writability, reliability and cost Best in class across the board. 
I disagree. While Lua is great, it's not the answer to everything. For example, there is a lack of supporting tools for Lua: there is no definitive Lua IDE, nor are there any definitive Lua editors (i.e, there are some decent, but none are amazing), libraries aren't abundant, etc. etc. But, if you want a simple programming language with a small footprint to extend your application, that performs very well, then it's hard to beat Lua.
&gt; I disagree. While Lua is great, it's not the answer to everything. I didn't say it was the answer to everything. I said it was equal to or better than anything in its class for all the categories the OP asked about: **readability/writability**: It's one of the most readable/writable languages in existence. It's Pascal-like syntax reads like pseudocode. More importantly, the language is tiny and places a premium on economy of concepts. It has one data structuring mechanism (tables) which is extremely general (any data type for keys or values). It has one function type (Ruby has, what, 4? all with different syntax and semantics), which can be arbitrarily nested, accept an arbitrary number of arguments, return an arbitrary number of values, have proper lexical scoping (compare with the clusterfuck that is scoping in Javascript), proper tail returns, etc. It's just a very semantically and syntactically simple language, with fewer corner cases than most other languages, which makes it extremely readable and writable. **reliability**: It's a tiny, open source, 100% ANSI C code base, which has been battle tested in thousands of apps. It's extremely reliable. **cost**: Free. *** You've added an additional category -- "tooling/libraries" -- but this wasn't asked about and is not super relevant for Lua (which is why there isn't a lot of it). Lua is designed to be an *embedded* language, so its libraries are typically supplied by the host app ([for example;](http://www.wowwiki.com/World_of_Warcraft_API) if we were to count all such libraries, Lua's libraries would dwarf most other languages). For the same reason, a Lua IDE makes little sense. The "I" in "IDE" usually stands for the integration of an editor, compiler, debugger, and build management (e.g. MAKE). Lua code isn't "built", it's simply run, and the runtime is a host application which can't be integrated. 
This sounds like a homework question... What are you actually trying to do?
So it is for your homework. Go and find out yourself (edit: By writing some stuff in Lua, for example) and don't bother people on the net with your homework!
Ok, first of all, it's Lua, not LUA (it's the Portuguese word for "Moon", not a set of initials) Most people don't use Lua as a standalone language, but as an embedded language in a larger "host" system - it can be an app done in C/C++, or it can be a physical system like a microprocessor. &gt; how many people use LUA with these other packages Depends on the host system they are using Lua "in". For example, Openresty (an Nginx distro with embedded Lua support) understands luarocks (the "packages" I am assuming you are referring to). Other people use Lua to create Vim plugins. Or mobile apps with Corona SDK. Each of these brings different things to the version of Lua they have embedded. &gt; My second question is "how did you decide to use lua?" I started using it because it was the thing they used in LÖVE (http://love2d.org) to make videogames. For a while I dabbled into making videogames and libs with it, as a hobbyist. Now I work with it professionally, making web-related stuff. &gt; to me Python is easier. That said, take into account that Python is a general-purpose language which can be embedded. Lua is mostly just embedded. It is very, very small in comparison (and thus simpler). Lua can be learned in 15 minutes, more or less. Don't take my word for it: http://tylerneylon.com/a/learn-lua/ &gt; Third question is if they added the ability from IM to LUA yet? I don't know what IM is. Probably you should ask in the IM mailing list. In Lua, the host app/system is the one which "grants Lua habilities". Lua by itself can do very little, that's why it's so embeddable. 
If you want a standalone scripting language use Python. Lua is a companion language and unfortunately labeled as a gamedev plaything. (Which depending on your profession, is not necessarily a bad thing.)
While I don't know Lua (I was corrected for saying LUA - I know its the word for moon) I do know it is not a standalone scripting language. I know some features it has and/or lacks that I like. (I wish it was more OOP.) It really is not - or I would not call it a gamedev plaything. It has great uses in science. 
I write LUA out of habit, and I know it's Lua. This seems like a reasonable answer. Thank you. :D
&gt; My second question is "how did you decide to use lua?" The answer to this is usually "because it's how I scripted program X". Unlike Python, it's designed to be embedded in a host application for scripting purposes, so it's small and consumes minimal resources. &gt; to me Python is easier. (**Mostly because I know it....**) So that's a silly question, right? \*lol\* I find Lua's simplicity to be very elegant. It gets a lot done with a minimum number of carefully chosen, very generalized concepts. 
I can totally understand that. I wrote this post as a long term programmer who might eventually dive into Lua. I was just curious about it...
I was a "long term programmer" back when I dove into Lua. I posted some of its benefits [a few days ago](http://www.reddit.com/r/lua/comments/2inoij/lua_evaluation/cl3vv6d). For such a small language, it's surprisingly powerful, and cleaner in a lot of ways than Python (no need to use tuples to return multiple values, no special case syntax for closures, etc.) and has some powerful features Python doesn't (like continuations). 
I would have to learn basic Lua. Tomorrow I am going to give a shot to the learning Lua in 15 minutes link. Lua doesn't make me uncomfortable... its more an odd curiosity I've had for a while. I totally get that it is small and compiles. I just never used it.
&gt; Lua doesn't make me uncomfortabl I'm not suggesting it makes you uncomfortable (other than programmers are generally selective with their attention). I'm just letting you know that it's worth knowing, especially if you code apps in C or C++ (which is why it's so widely used in games and on iOS). It differs from Python, Ruby, et al. in that it's a *language as library*. It's a simple way to add scripting or very powerful configuration to your app. It's not so hot in the managed world (like C#) where the implementations/bindings are all in various states of completeness. But in that world you can typically compile the host language on the fly anyway.
As a programmer I'm not sure if C# is a language or a way to avoid a lawsuit over Java... My attention is selective too, I suppose. I will learn it - if it takes more than 15 minutes I am going to be really let down. Just kidding - I will keep reading for an hour and claim it only took 14 minutes. 
&gt; As a programmer I'm not sure if C# is a language or a way to avoid a lawsuit over Java... It's a *response* to a lawsuit over Java. Microsoft had Anders Hejlsberg, the legendary language designer who did Turbo Pascal and Delphi, building the best Java tools on the planet. He extended Java with delegates to allow COM programming and Sun sued. So Hejlsberg was given free reign to create a language that solves the same problem as Java (statically typed, byte code interpreted, garbage collected) and he created a language that shits all over Java. 
The origins of that story come from before C# when Sun Microsystems licensed Java to Microsoft. Before C# there was a J++... J++ used portions of Java which were not licensed... I'm not sure C# compiles anywhere better than Java does.
On Windows... I think you mean. 
&gt; On Windows... I think you mean. No clue which of the many sentences I posted you're adding that qualifier to. :)
Well, if you are referring to Mono ~ http://stackoverflow.com/questions/61559/is-net-mono-or-java-the-better-choice-for-cross-platform-development I don't thing it's reasonable to say C# 'wins'. Java is much brighter in its RTE. J++ actually caused a lawsuit that created a settlement of $150m (if I remember correctly) for Sun. The lawsuit was many things - one of which was Microsoft using the Java logo for J++. It isn't that I dislike Microsoft ~ not at all. I don't love C# - nor vb.net. Idk why its just my personal programming opinion.
&gt; I don't thing it's reasonable to say C# 'wins'. I'll say this a third time: C# is a better *language*. That says nothing whatsoever about implementation, runtime, portability, libraries, tooling, or anything else. &gt; I don't love C# But you *do* love Java? o.O Is this another case, like Lua, where you form opinions about things you haven't actually used? Over the past two decades I've had several-year stints each where I coded professionally in C++ (Playstation), Java (games and then networking), and C# (scientific computing), not to mention every dynamic language under the sun (Lisp, Clojure, Perl, Python, Ruby, Lua, et al.) C# kicks the living shit out of Java as a language. Java has been trying to catch up, but Sun and now Oracle move very slowly. They only very recently added closures (using C#'s syntax). They'll probably never has dynamic typing, continuations, or something like LINQ, which comes from the functional world (primarily Haskell), nor all the independently useful language features that support it: type inference, anonymous types (not to be confused with generics), extension methods, expression trees, etc. C# is just a better designed language and is *far* more expressive. I've never met a C# programmer who didn't love it. Most Java programmers love to hate Java. It's a notoriously verbose and un-fun (read: enterprise) language. 
Spanish is a better language than English. That doesn't mean we are speaking it. 
And? Do you have a point? C is vastly more widely used than C++. Does that mean you like it better?
Well, Spanish is a better language for simplicity.
I don't like C# - I think its crap I don't use... what do you want me to say?
&gt; what do you want me to say? I thought were were discussing languages. You seemed antagonistic and I couldn't figure out why. But you finally said what your issue is: &gt; I don't like C# - I think its crap I don't use That's fine. We could get into a discussion of *why* you think its crap, but that would be boring, because it's pretty clear you don't know it. We could get into a discussion of why you have strong opinions about things you don't know, but that would be boring, too. Technology religion is stupid.
Is C# your religion?
How can it be religion if I don't know it?
&gt; I think your definition of technology religion is confused. How so? Religion is strongly held belief in the absence of evidence. You believe a language *you don't know* is "crap". I'm calling that religion. There's nothing remotely confused about that. What's confused is going through life believing things for no reason.
&gt; How so? Religion is strongly held belief in the absence of evidence. I know enough C# to get by. I haven't seen any evidence it is anything but crap. Do you work for Microsoft? Seriously man - you do what you want - I don't care. Don't tell me how to program... or if you do have facts. 'It kicks the shit out of Java' is not a fact. Thats more like a religious opinion when run on a Windows machine... FACT: Java compiles on more OS's. Runs smoother on more OS's. 
&gt; I haven't seen any evidence it is anything but crap. You've yet to say one specific thing about the language. I could give you a detailed, point by point dissertion on the specific commonalities and differences between C# and Java, because I know both like the back of my hand. You, on the other hand, are completely full of shit. &gt; "It kicks the shit out of Java" is not a fact. Thank you Captain Obvious. &gt; FACT: Java compiles on more OS's. FACT: That's relevant to it's value, for given particular application, as a *platform*. It has abso-fucking-lutely *nothing* to do with it's merits as a *language*. So much \*woosh\* 
Forgot I was talking in the C# channel.
&gt; Forgot I was talking in the C# channel. Actually you're on the Lua forum, talking to primarily a C++ developer, who also happens to love computer languages and has deep mastery of quite a few, including Java and C#. My opinion comes out of direct experience. Your opinion comes out of your ass, because you're a fanboy. I don't worship brands, OSes, platforms, languages, etc. I can tell you in detail why C#, as a language, is good. You can't tell me why it's bad. Your opinion is religious, which is to say, ignorant.
&gt; I can tell you in detail why C#, as a language, is good. You can't tell me why it's bad. Your opinion is religious, which is to say, ignorant. OK - wanna get schooled? 
If you're preparing to tell me about performance of Mono on Linux or anything even remotely similar, such as points about portability, compilation speed, benchmarks,libraries, tooling, philosophy.... OK what are you talking about? The fact that I don't know Lua but posted in /r/lua? I contributed to Tecgraf ~ have you? With your obviously indefinite knowledge of programming... have you?
&gt; OK what are you talking about? Silly me, I thought you were actually going to start making actual arguments. I was trying to delineate the scope of the argument, but what you meant by "schooling" is bragging about your open source contributions. \*facepalm\*
I meant from a resource - 3.10 of IUP added this ability mostly because of my work.
&gt; Well having some helps. You do realize that *anyone* can contribute to open source projects? I was a professional game developer for nearly a decade. I've contributed to more open source projects than I could count. That you would rather name drop than actually argue your position is starting to make me think you're 12 or something, and I actually feel bad.
I name dropped Tecgraf in a Lua forum where I was asking a question and didn't agree with C# being all that awesome? I don't blame you for feeling bad. You should feel bad. 
&gt; I name dropped Tecgraf You said you were going to school me. I expected you to start making arguments about C#'s language design. Instead you said "I contributed to an open source project" as if that is even relevant. &gt; didn't agree with C# being all that awesome? No, you said something *sucks* that you admitted you don't know. *That's* what makes you an idiot.
&gt; when did I say I was going to school? Holy. Fuck. You literally *can't* read! **ME:** You said you were going **to school me**. **YOU:** when did I say I was going to school? Wow. Just... wow. &gt; People like you are reason enough to hate C# Did I mention I'm a C++ programmer? Do you hate C++ now? Can you even *think*? Holy fuck, the stupid burns. 
Right, I'm sorry. You are so smart. Go join the other C# developers in /r/circlejerk - and please excuse me for being so religious. We smart people are just set in our ways... we like to force those ways on everyone and call them stupid. My god the stupid does burn. How it burns. 
You said you were a C++ developer yup - did you ever prove it? No. No you did not.
Once again, you're *not making an argument*. C# is a bad language? Why? Be specific. This has nothing to do with circle-jerking, fucktard. This isn't a C# forum, and I'm not a C# fanboy. I can tell you *why* it's a better *language* than Java. In fact, I already gave you several reasons. You can't tell me *why* it sucks, because you don't know. You're a fanboy. Which is another way of saying moron.
&gt; You said you were a C++ developer yup - did you ever prove it? No. No you did not. Feel free to prove I'm not by asking me questions a C++ developer wouldn't know. If you're smart, you can make it difficult to Google. I'll start: why is it bad to include code with linkage in an include file? 
It's a giant circle-jerk - I'm being attacked because I don't like C#? You are a C++ developer? Good what have you developed? Probably nothing... congrats if you figured out a for-loop though.
Because C# developers cant handle it.
&gt; I'm being attacked because I don't like C#? No, you're being called religious for calling something crap that you don't know. If doesn't matter if it was C#, Ruby, or chocolate ice cream. Your power of abstraction is non-existent, a sure fire sign of a shit developer. &gt; Good what have you developed? Everything from Playstation games to flash drive firmware, but that's *irrelevant*. Telling you what I've worked on is argument from authority. I'd much prefer to argue the facts. Unfortunately, you're arguing about something you've already admitted *you don't know*, which makes you a religious zealot and a moron. 
Again, simple question that *any* C++ programmer should know like the back of their hand: why is it bad to include code with linkage in an include file? You've already dodged it once. Each time you dodge again, you're Full Of Shit™ quotient will go up by 10 points.
Right - if you are talking about compile time. It increases it - also readability goes down. I thought you were making a case for C#? C# uses an interpreter. Much like Java does. So now I get to ask a question?
&gt; I am sorry I thought you meant headers. I did. You're epically wrong. Let's try a third time: **Why is it bad to include code with linkage in a ~~include~~ header file?** This is a stupid obvious question which I picked only because its hard to Google. You're failing *hard*.
I'm sorry you failed to say header file. Good job. 
A header file *is* an include file. I changed the wording of the question because you're easily confused. You still haven't answered the queston. I'm sorry basic C++ questions confuse you. Good job.
Ok does code with linkage mean code with linkage or did you mean something else? 
Code with linkage. Are you sure you know C++? 
&gt; Code with linkage. &gt; Are you sure you know C++? So what you're saying is that you don't know what "code with linkage" means? Wow. No wonder you couldn't answer the question. It's a miracle anyone let you within a hundred miles of their code base.
You mean like an extern or were you too busy gloating to get that: First of all you are a moron. Second - "code without linkage" doesn't compile.
&gt; You mean like an extern Does that mean you're finally going to answer the question?! 
&gt; why don't you explain what you mean by linkage Code that requires linking. In C, C++, objective C, that would be "like an extern". Yes, you figured that much out. Now you can answer the question.
I am not sure what you are bent about linkage for. C# doesnt even compile. 
&gt; C# doesnt even compile. Since C# actually compiles *twice*, I'll give you credit for being 200% wrong. Impressive, but just another dodge. You still can't answer a basic C++ question.
Maybe you would be better asking your questions in /r/cpp_questions ~ try there. This is a lua thread and I explained I am not here for C#, C++, nor your shit. Now. You going to keep going? C# compiles just like VB.net ~ it doesnt. Grow the fuck up.
*You* brought up C++, you simpering twit. I get it, you can't answer the question. No need to get butt hurt over it, but will have to stop arguing from authority. &gt; C# compiles just like VB.net It compiles twice, first into byte code for the virtual machine, then into machine code for the physical CPU. It's OK to be ignorant, just stop pretending to be an authority on things you know nothing about.
You still haven't answered the question. Instead, you're just piling on more wrong.
C# blows. Get Over it. Why were you asking about C# in /r/lua to begin with?
Also - is it the official language of girl scouts of America yet? 
Dodge #9.
*You* brought it up. You're the one who started pulling out credentials, rather than arguing your point. You're the one who said C# sucks. You're the one who then was unable to say why, and instead starting talking about what a bigshot programmer you are.
Ok buddy - your C# skills - just amazing. We can't figure out why you asked me about C# in the lua thread back here at the office but wow. C# doesnt suck anymore because you stuck up for it soooo much. (PS - it still sucks. But you my friend are fing brilliant - in the most retarded way someone can be.)
No I said I don't like C#. Read back. It sucks though - if it produces programmers like you I am ok with getting rid of it altogether. A language is not a religion, and its never acceptable for religion to be our debate. I already told you - i dont know lua - and I dont know C#.... i might learn lua - you just steered me away from C#. Im totally not interested in people making a religion from a language. 
Then why dont you use C++? Oh right C# - its like... C++ for people who dont know C.... So good luck with your C++.. or C#.... or whatever. I asked a lua question and you answered with C# Brilliant. 
&gt; I do know it is not a standalone scripting language It is a stanadalone language, but it really shines when used embedded.
So now you've got your sock puppets in on it, huh? Given that you appear to be mentally unstable, I'll leave you to your conversation with yourself. Cheers!
Well according to your rules, a normal person couldn't really say.
Well a normal person can't really say.
sock puppets? wtf? It seems the only unstable one here is you.
[Sockpuppet.](http://en.wikipedia.org/wiki/Sockpuppet_%28Internet%29) And hello sockpuppet #2. :)
Dude.... your post history is showing. I know you're stupid, but *that* stupid? Let it go, man. Why don't you go chat with fucktheop69 and newocean? That's what you were made for, after all. \*lol\*
Oh man, so embarrassing.... just let it go, bro. \*lol\*
[ok elsa I'll let it go, what "it" is, I dont know](http://cdn.rotoscopers.com/wp-content/uploads/2013/10/disney-princess-elsa.jpg) and if Im a puppet, why havent the other 2 replied backing me up?
&gt; and if Im a puppet, why havent the other 2 replied backing me up? Oh shit, you're right! You got me, man! (anything that gets you to downvote your own posts \*lol\*)
I have been enjoying ruby lately and love nix and os x but c# is actually a great language with powerful tooling behind it. Java is terrible. 
i think i can back you up on this - i didnt see messages that were not sent to me...
So what do you think of someone who asks for your opinion on something then when you give it.... gets all bossy.... and unusual.... Like they start claiming to be an expert in a language you know but ask random "hard" questions they found on google... in an effort to prove that google works?
I use it. Its great.
the best I can think of is *i = 1* *while tab[i] == nil and i &lt; 6 do* *i = i + 1* *end* *if i == 6 then x = 0* *end* 
Wouldn't this work (assuming it's an array-based table): if #tab == 0 then x = 0 end
 local i = 1 while tab[i] == nil and i &lt; 6 do i = i + 1 end if i == 6 then x = 0 end
 local any = false for _, val in ipairs(Table) do if Something(val) ~= nil then any = true break end end if not any then x = 0 end
You probably meant "if not any then x=0 end" Also note that the "if Something(val) then" will also now check for the value false, so if OP wants to specifically check for nil, then a small mod would be needed. I have been burned because nil ~= false and yet they are both false for the purpose of the if. Also ipairs iterates until the first nil value in the table, so non-contiguous tables would not be checked correctly, although I'm not sure if that is what OP is asking.
He's not checking to see if tab[i]==nil, but if SomeFunction(tab[i])==nil. Very different.
Oh yeah; self = blind :V
Does it support methods variadic methods and/or methods with optional arguments? Does it support methods that return an arbitrary number of values?
&gt; It involves C++ :) Most C++ libraries do.
This is working great for me, but I'd like to understand why local all = true doesn't count as true for if all then x = 0 end
This logical construct is similar to a proof by contradiction. The idea is to assume that all of these values evaluate the way you want them to (`SomeFunction(val) ~= nil`), and if you find a case where that's not true, set `all` to false (line 4 of my code). This is how `all` can be false when it gets to line 9.
No worries. It was a cool optimization if it had worked. ;)
&gt; LUA ;_; Someone should stick http://www.lua.org/about.html#name on the sidebar or something...
Thanks. Can you show me where on the page the option is to beautify/fix indentation?
The title sounds a little misleading :-P
I think you meant for your line 3 to be `return nil`? But still, you're right. My brain's kinda stuck in Strongly Typed Mode. Then again, if you want a function to represent a dichotomy, true / false is the correct way to do it.
If you're gonna' use globals to solve this problem, that sounds like a good naming convention. Personally, here's what I would do with your example code: local function SetupBach(crazy_music) -- Initialize Bach state. local music = quantize(crazy_music,option) music = scale(music,option) return create_themes(music,option) -- Return initialized state. end local function NormalBach(music) -- Receive initialized state. music = manipulate_themes(music,option) return form(music,option) -- Return final, normal Bach. end local function BluesBach(music) -- Receive initialized state. music = manipulate_themes(music,option) return form(music,options) -- Return final, blues Bach. end local function OutputMusic(music) -- Receive final state. create_MIDI(music) create_sheet_music(music) end local crazy_music = makeCrazyMusic(getInput()) local bachBase = SetupBach(crazy_music) OutputMusic(NormalBach(bachBase)) OutputMusic(BluesBach(bachBase)) Assuming you have other manipulation blocks, I would organize them similarly and do something like this for each one: -- Assuming you only have one Mozart... OutputMusic(Mozart(crazy_music)) -- Using a more modular structure like this, you could potentially have an infinite number of non-conflicting manipulations. local beethovenBase = SetupBeethoven(crazy_music) local oldBeethovenBase = OldBeethoven(beethovenBase)) OutputMusic(MadBeethoven(oldBeethovenBase)) OutputMusic(SadBeethoven(oldBeethovenBase)) OutputMusic(HappyBeethoven(YoungBeethoven(beethovenBase))) 
Is it not [this](http://www.lua.org/manual/5.2/)?
He's probably looking for the dead tree edition which at this point I doubt will ever happen since they're now working on Lua 5.3.
If you don't already have it, Programming in Lua (ISBN 859037985X) focuses on 5.2, and is well worth the read.
Most of what is relevant in 5.1 is still relevant in 5.2. However, you'd want to be aware of the changes in 5.2 which you [can find here](http://www.lua.org/manual/5.2/manual.html#8). 
Given LuaJIT's decision to (largely) stick with 5.1, it's certainly not going anywhere anytime soon.
You might want to take a look at projects such as [luvit](http://luvit.io/)([github repo](https://github.com/luvit/luvit)). Currently, windows support is next to nonexistant, but it runs well on linux. I can't say much about how socket:close() works, since I haven't touched luasocket in a few years. For what you want: 1) It looks like you want enter line-based commands. You'd probably (again, not familiar with luasocket) do something like `socket:read("*l")` to read a line, if it behaves like `io.read` does. Then, you can see if that line is "end", and close the connection if it is, or do something else if it isn't. 2) Take a look at [coroutines](http://www.lua.org/pil/9.1.html). And make sure that your `socket:read`s aren't blocking -- to do that, I think `socket:settimeout(0)` works. I'd do this on all new sockets, but it might propagate from server-&gt;client. Your loop with coroutines would look something like: function server:clientHandler(client) -- This'll be the main "client" loop local sock = client.socket client.connected = true -- Set the timeout, just to be sure. sock:settimeout(0) while client.connected do local line = sock:read("*l") if line then -- You can also loop to execute all the lines at once, but it's not needed unless you expect a lot of commands to come at once. (it'll be a bit more efficient then, since you don't go through all the clients). -- do stuff with the line end coroutine.yield() -- this "returns", and saves the coroutine at this state. You can even return values here, by passing them to yield(). end And then, your server loop: self.nextClientId = 1 self.clients = self.clients or {} -- keep track of connected clients here while self.running do local client = self.socket:accept() if client then local client = {socket = client} -- Transform the client into a table, and put the socket in there. client.coroutine = coroutine.create(function() return self:clientHandler(client) end) -- Create the coroutine (kind of messy, but it should work) client.id = self.nextClientId self.clients[self.nextClientId] = client -- Keep track of it. self.nextClientId = self.nextClientId + 1 -- For our next client, a new id end -- Now, run all the clients (this is where you'd use socket.select, explained below) for id, client in pairs(self.clients) do if coroutine.status(client.coroutine) == "dead" then -- The client's thread has finished executing, or errored -- valid states are "running" (we're inside this coroutine), or "suspended", which means it's paused. -- Add code to check for errors, etc. here client.socket:close() -- Close the socket, just in case. self.clients[id] = nil -- Remove the client, so we don't check this again. You can add it to another table for old clients, if you wish, but keep in mind that that keeps it in memory. You could also not close the socket here, if you want some form of recovery of errors. else -- If the coroutine is fine, run it! local res = coroutine.resume(client.coroutine) -- res will be what the coroutine returned, or yielded. You can add more args if you expect more. end end end -- I think that's all. I haven't tested this code, but I think you'll be able to fix any errors you come across :) In the future, you could also take a look at socket.select(), which'll tell you if any sockets have data that's waiting to be read -- this is more efficient than looping through them all, but I wanted to keep this simple :) 
So your first issue is that your run function isn't quite doing what you're wanting. To write it out in psuedo code a server will Initialize Server (Setup Ports and other stuff) Loop Listen for Client Tx and Rx with Client Close connection with Client End Loop If you want to do a single pass through your Tx/Rx with the client can just be a single set of transactions. But most likely you will want to do multiple messages, in your case wait until "end" is received. The first problem you should solve is how to allow your client connection to handle multiple transactions. Basically you want a loop that keeps receiving until "end" is found.
You're misunderstanding. The word "timeout" isn't really what the function should be called, but it is. local sock = some socket sock:settimeout(10) local msg = sock:read() -- it will now wait 10 seconds or until it's received a message. somecode() -- This won't be executed until a message, or it gives up after 10 seconds. With timeout 0: local sock = some socket sock:settimeout(0) local msg = sock:read() -- This will call instantly, and if a message was waiting, it will be returned. somecode() -- Executed immediately after sock:read(), even if there was no message.
Hmm, not sure. I haven't tested any of this myself, since I'm not using luasocket. Try sending some data to the client after accepting it -- maybe the client is disconnecting? Maybe someone else more familiar with luasocket can see something that we're not here :) edit: Idea, perhaps there is no client? Try: local client repeat client = self.socket:accept() until client self.client = client print("Client connected.") ... 
Funky! What kind of error messages is it spamming?
Derp! I think this is intended: receive() returns `false, "timeout"` when it times out -- the socket is still open, etc. This fits with how you describe it acts. Solution: Keep looping, but "timeout" isn't an error code :) I tested it with your code, and it is indeed the above that's happening! Initializing. Ready on 0.0.0.0:1480 Running. Waiting for client. Client connected. -- 0s mark Received: asdf -- 3 or 4s in Error: timeout -- ~14s mark, as above Received: asdf -- some time later Error: timeout -- 10s after above Error: closed -- i quit the telnet client, this spams. You'll want to look out for the "closed" error, and drop the client then :)
Hmm, that certainly sounds like a bug :) I was using 5.1 (lua for windows, because I'm too lazy to mess with compiling on windows). Anyway -- you can ignore settimeout, and use socket.select to find out which sockets are waiting to read -- you should be able to make it multi-user up to a certain point without problems that way, and it shouldn't burn your processor either. edit: One thing: I think Luasocket 3.0 changed from seconds to milliseconds in timeout -- supplying it with 10 should mean it waits for 10 milliseconds, effectively returning instantly. Try `10 * 1000`?
Ok, just tested it with protect_allocator, didn't work in LuaJIT. [Here is the new source](http://wolfmitchell.com/p/lv7RqfEbKs) edit: derped the link
You're not allowed to complain about a problem without giving code. It could be something as simple as: local someCondition = true if someCondition then local x = 30 print(x) end print(x == 30) 
It might have to do with rounding floating point numbers. Sometimes, computers round numbers when printing, so two different numbers can appear to be the same when you print them. This would **not** be a Lua specific thing, btw. x = 30.0000000000001 y = 30 print(x) -- prints "30" print(x == y) -- false The root of the issue is that computers store numbers in base2, and there will be imprecisions in your arithmetic if you use fractions that are not powers of two. For example, 0.1 = 1/10 cannot be represented exactly in a computer but 0.25 = 1/4 can.
It could be a floating point error. If you're ignorant of that then you are, of course, in a state of sin.
Thank you to all! It was indeed a floating point error. I have now learned not to trust that shifty print(). Sorry for my rant, its just the way I program.. A furious tornado of curses and confusion, punctuated by occasional explosions of joy.
Terra outperforming LuaJit for a long running program.
What error are you specifically getting?
More data points would help understanding what is happening here... I suspect that Terra takes longer to start up and compile the program.
Not really an error as much as luajit crashing.
Oh come on. Benchmarking requires testing a significant piece of code, like smoothsort or something. You can't just run a for loop for 100000 iterations because you only end up testing a very tiny piece of the optimizing capability of the compiler. I mean, you ought to spend at least as much time writing the benchmark code as writing the blog post, right?
I'm not sure if I fully understand your problem but.. mm .. "/" .. dd ? 
That just showed 10"/"21 The .. isn't escaping. And neither is \ I need an escape character that won't show in the date. I thought {mm}{/}{dd} would work, but it didn't. Showed 10{/}21
It's not code. The app is called WatchMaker, and it's a customizable watch face for Android Wear that apparently uses LUA. You can only use things in curly brackets... 
Have you tried {mm}{"/"}{dd}? Thing is, the mechanism might be written in Lua but this syntax is definitely not Lua. This isn't really the right place to get help with your specific issue.
Didn't work. 
I've searched all over before resorting to this sub. In the list of commands it specifically says LUA syntax, so I figured you all would be the people to ask. Also, yes, I've tried all these suggestions before posting. I have a basic background in Python and tried those too. 
Perhaps { mm .. "/" .. dd } would do it.
Where's the documentation / list of commands? I quickly Google'd the app, but didn't find it.
It's in the play store. Red minimal looking icon. One sec... 
http://imgur.com/a/9AhuS http://imgur.com/SALPNlK (it won't let me share play store link) http://www.lua.org/manual/5.1/
You need to enclose the string in quotes, then: "{dnn}/{ddz}"
 That would have been useful information to put in your original post. 
I said it was a customizable watch that used curly brackets. 
That worked! Thanks so much! 
I have been interested in what paniq/L. Ritter does ever since I saw his demos under the alias Neuro (example: [video](http://www.youtube.com/watch?v=sbQhgEJuExY) [exe](https://www.scene.org/file.php?file=/parties/2008/breakpoint08/demo/farbrausch_neuro-masagin.zip&amp;fileinfo)) and I was quite thrilled when I heard of this new project of him and his wife. Glad it's coming along.
Just a heads up, it's Lua, not LUA. Anyways, it looks like 'tags', the curly braces, are preprocessed. So when you type {mm}/{dd}, it gets translated to 1/2, which would evaluate to 0.5 in Lua. {mm} .. "/" .. {dd} also probably didn't work how you wanted because the program must escape quotes or something.
Thanks, didn't know because I had never heard of Lua before. 
I also use this app and have asked the Dev if they could make an advanced tutorial.... I use commas instead of the / for the date...
I'm not sure I entirely get the point of all-procedural things, but if it will be possible to build abstractions and make awesome stuff easily, that'll be cool. 
"Published on Mar 3, 2012"
TL;DR of any big changes?
I seem to be having troubles with `loadstring` but haven't been able to figure what has changed about it in 5.3 (so far it seems to be the only thing preventing my code from running in 5.3). Is it no longer available?
I'm unable to wrap my head around basic Lua syntax, I don't feel at all qualified to answer that. I think the best thing to do is message the Lua devs and ask them directly. But there is http://www.lua.org/work/doc/#changes that should tell you of any changes. But I can't see anything about loadstring myself. Edit: Try Here: http://www.lua.org/work/diffs-lua-5.3.0-alpha-beta.txt
How are you using `loadstring` (Show us some code!)? What error message do you get? Try using `load`: -- local loadedFunc = loadstring("print('Hello, world!')") local loadedFunc = load("print('Hello, world!')") loadedFunc() &gt; Hello, world! [Changes from 5.1 to 5.2](http://www.lua.org/manual/5.2/manual.html#8.1): - Function loadstring is deprecated. Use load instead; it now accepts string arguments and are exactly equivalent to loadstring. There's no mention of `loadstring` in the [5.3 beta short documentation](http://www.lua.org/work/doc/), but seeing as it was depreciated in 5.2, it's safe to assume it has been removed.
I get that I was attacked over "sock puppets" after being attacked over C#, Was also attacked over moon. I came here to ask a Lua question -- none of my friends from Brazil could figure out why I was given a hard time. ...and thats where /r/lua_questions was born.
&gt; reddit's karna system can tickle people too much in the "fear of embarassment" region -- in my cynical hours, I wonder if that's not another moneymaking ploy, get people angry i.e. disoriented and they'll click on ads I'm never going to unsee that.
I am not sure the people in this sub understand IUP.... when I spoke of it I was called a 'sock puppet' even though I contributed to IUP. I was attacked over Moon and C#... So I started /r/lua_questions to make sure everyone who wants to ask Lua questions gets decent help. Asking there may help.
Sorry for the delay in the response, partly I didn't want to hijack the thread. I did figure out the issue. `loadstring` has been removed but `load` works as a drop-in replacement (as best as I can tell so far). The problem I was having is that some of my tables use keys in the form of `["0"]`, `["1"]`, etc (for reasons that made a lot of sense when I first set them up, I'm hoping). But the numbers being used to call those keys are being represented as integers by Lua ("1.0") which when converted to strings (via `tostring`) now are unable to look up the values. I did a quick test removing the quotes and one `tostring` command and the change seemed to work but I would have to change like 5 more tables to know for sure. The upshot is that I'm not ready to switch all the way yet but at least I now what what the problem is (pretty sure that's the only problem). I'm thinking that I can get rid of the `tostring` command and switch out the tables and it will work in Lua 5.2 and then it's just a simple matter of changing `load` for `loadstring` for 5.3, but I will have a lot of testing to do first. Ugh. (I wonder why I thought I had to do it as ["0"] in the first place ...)
I wouldn't say that you were hijacking this thread, since the int/float thing is new :) If you don't like posting here, you could always create your own thread, too. I think you've confused integers and floats in your post, but `1.0` should be a float, and `1` should be an integer. Anyway, here's what I've found when looking at your problem: Take a look at page 26 of this: http://www.lua.org/wshop14/Ierusalimschy.pdf &gt; Other Aspects &gt; Nuerals: decimal point or exponent makes a float; otherwise number is integer &gt; - `0.0 1e1 0xFFF.0` &gt; - `0 234 0xFFF` &gt; `print` distinguishes between floats and integers (!) &gt; Table keys: float keys with integer values are converted to integers &gt; - `a[1.0] = 0; print(next(a)) --&gt; 1 0` I *think* your problem is something along these lines: local tbl = { ["0"] = "value", ["1"] = "value", ... } local number = 1.0 -- This is a float local key = tostring(number) -- "1.0" I haven't played around with 5.3 yet, but I think this should fix your issue: local number = 1.0 -- Still a float. local key = tostring(math.floor(number)) -- This should be "1", but large values that can't be represented as an int will still be floating. If you remove the quotes from the values in your table (as you tried), you shouldn't need to convert a float at all, as long as it has an integer representation. Hope that helped :)
Getting the free time to try this (finally, a lull in homework), I see exactly how it works now. I did manage to interface Lua with C, and it is a pretty slick setup. Your post helped put the final touches to make it work.
&gt; I think you've confused integers and floats in your post, but 1.0 should be a float, and 1 should be an integer. I took my chances ... &gt; I haven't played around with 5.3 yet, but I think this should fix your issue: That does look like it will work. I think I'm probably better off just changing the tables. This is my first ever program and I'm sure there are things I did early on I did just because I didn't know any better. It's funny, there's a table just underneath that group of tables that I created a few weeks ago and it uses the `[0] = "foo" ; [1] = "bar"` approach so somewhere in this journey I figured something out but didn't remember that I had done things differently before. &gt; Hope that helped :) Definitely, I still learn something significant every day.
I'll check it out. I'm not very knowledgeable about matrices - I assume a square matrix is 2-d, no? It's crucial for my application that I find the inverse of matrices with arbitrary numbers of dimensions (into the hundreds) - specifically, using this thing: http://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse Edit: I looked into it and discovered that a square matrix is just a matrix with the same number of rows and columns. I assume that SciLua can handle multi-dimensional versions of those. And even if it doesn't do pseudo-inverses, I can probably use the existing matrix math to cobble together an algorithm to do them.
I'm very curious why you need to use such large matrices when you don't know what a square matrix is. It seems very incongruent. What application are you writing?
I'm attempting to port a project written in python (by someone else) into Lua. It uses numpy's pinv (pseudo-inverse) function for a critical calculation that the entire thing is based on. Now, if I had a library that did all the same things that numpy did, just with lua, I could simply substitute that line with the Lua version, and everything would work the way it's supposed to. Long story short, the math function is used for a very particular purpose that I don't really understand, but I know what goes in and what I can expect to come out of it. There are much smarter people worrying about the math end of things. 
Check out [this giant list of lua stuff](https://github.com/LewisJEllis/awesome-lua#math-and-scientific-computing). Out of curiosity, why are you porting it if you already have something that works in Python? If it is just for fun, you might have a funner time porting something that you understand the intricacies of already. Although I'd recommend [learning linear algebra](http://math.stackexchange.com/questions/4335/where-to-start-learning-linear-algebra) (or [here](http://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/)) in either case, because it's awesome and useful.
Well, I have a particular interest in this program for non-programming-related reasons, and I wanted to do a Lua port mainly because I prefer working in lua to python. And the math I need to do is really just a small, but crucial, part of a larger program. Most of the port doesn't require this highly specialized math. But you're right, it's in my own best interests to learn linear algebra. In previous attempts I got as far as matrix multiplication before my brain exploded.
Do you need to call the show method after creating a widget? Is it necessary to call iup.MainLoop() as well?
The bitwise operators are worth mentioning, too. Lua 5.2 had a bit manipulation *library*, but doing bit operations via function calls is very unwieldy. Integers, bitwise operators, and pack/unpack go together to give Lua a level of binary data manipulation facility it's always lacked. Very welcome changes.
You need four spaces before every line of code, for the code formatting to work. It's pretty messy, but it works (sometimes). Also, the ` encapsulation only works on single lines. Nice try though :) function Initialize() Filename = SELF:GetOption('LogFile') Filename = SKIN:MakePathAbsolute(Filename) end function Update() -- OPEN LOG FILE. TERMINATE SCRIPT IF UNABLE TO OPEN. local File = io.open(Filename) if not File then return end -- READ FILE local Contents = File:read('*all') File:close() -- PARSE CONTENTS local Main = {} for Line in Contents:gmatch('[^\n]+') do local Entry = {} for Value in Line:gmatch('([^,]-),') do Value = Value:match('^%s*(.-)%s*$') table.insert(Entry, Value) end table.insert(Main, Entry) end local Keys = table.remove(Main, 1) SKIN:Bang('!SetOption', 'Keys', 'Text', table.concat(Keys, '\n')) SKIN:Bang('!SetOption', 'Values', 'Text', table.concat(Main[#Main], '\n')) end Could you upload a bit of your log file, please? It looks like it's in a comma separated values format, from the code you pasted. You might be able to read it more efficiently by leaving the file handle open, or using `fh:seek()`, and keeping track of how far you last read. Let me know if the file gets replaced every update, too, since that means we don't have to keep track of it's size. I have an idea of a solution, but It'd be nice to clarify this first, since the code revolves around how GPU-Z updates the file, and it's format :) I'll also cover some things you could do to make it run faster, but these again depend on how the file acts.
https://drive.google.com/file/d/0B2Lg5qOeTmbaNGVnamVPUlBHTUk/view?usp=sharing here's the file in it's entirety. GPU-Z just adds a line at the bottom whenever it updates, which I have set to be every 10ms I think. it fills up fast. I wipe it weekly.
Alright, I'm not 100% sure what version of Lua Rainlendar is using, but I think it's 5.2. Let me know if the snippets below don't work for you! You can solve it by doing something like this: - Read the first four lines (keys, blank line, data), grab the keys from the first, and the length of the third. - Seek to the end of the file, minus the length of the third+two newline (Seeing as the length of the data lines stay the same, this should put us at the most recent update, and the end of the file seems to always be two newlines) The code would look something like: local Filename = "gpuz.log" -- For debugging, below. (I ran this with your gpuz.log in the same folder as the script to test it.) -- It's also a good idea to keep this local, to avoid potential conflicts. local function Parse(Line) -- Moved this from Update() to it's own function, to make the code easier to follow local out = {} -- We'll populate this table with the keys if not line then return out end -- Avoid errors if line doesn't exist for Value in Line:gmatch('([^,]-),') do -- This could probably be turned into one match, but this works fine. Value = Value:match('^%s*(.-)%s*$') out[#out+1] = Value -- This idiom lets us avoid the use of table.insert end return out end function Initialize() Filename = SELF:GetOption('LogFile') Filename = SKIN:MakePathAbsolute(Filename) end function Update() -- Open file, return if fail local fh = io.open(Filename) if not fh then return end fh:seek("set") -- Seek to the start of the file local First = assert(fh:read("*l"), "Unable to read first line") -- Read the first line. assert(fh:read("*l") == "", "Second line is not blank") -- Make sure the second line is empty. local Third = assert(fh:read("*l"), "Unable to read third line") -- Seek backwards the length of the third line, plus two newlines, from the end of the file fh:seek("end", -(#Third + 4)) local Last = assert(fh:read("*l"), "Unable to read the last line") -- Read the last line fh:close() -- Oops, forgot this earlier ^_^ local Keys, Info = Parse(First), Parse(Last) SKIN:Bang('!SetOption', 'Keys', 'Text', table.concat(Keys, '\n')) SKIN:Bang('!SetOption', 'Values', 'Text', table.concat(Info, '\n')) -- Some debug stuff. do return end -- Comment this line if you want the below to run. print(#Keys, #Info) for k, v in pairs(Keys) do print(k, v, Info[k]) end print("--") print(Third:byte(1, 1), Last:byte(1, 1), Third:sub(1, 1), Last:sub(1, 1)) print(Third:byte(-1, -1), Last:byte(-1, -1), Third:sub(-1, -1), Last:sub(-1, -1)) end --Update() -- Uncomment this if you're running this standalone to test. I've only tested it with the debug stuff, but I think it should work. You might want to remove the asserts, or add `local function assert(r) return r end` at the start, to prevent any errors from propagating if a read fails, etc. Let me know if you need any clarification :) Edit X2: Forgot to close file handle, forgot to update the `SKIN:Bang(...)` tables. Oops.
Also: You could make the script take care of deleting the log file, and splitting it into daily logs, but I'll let you figure that one out :p
Thanks!
The script is run every ten milliseconds by rainmeter so...
Okay, this works great, thanks! however, I was wondering how I could read the last line of the file, separate each value, and then return them as variables for rainmeter applets to use. this is the short doc describing how to return variables from lua to rainmeter. http://docs.rainmeter.net/manual/lua-scripting notably: ` return Provides 0 as the number value, and '' (blank) as the string value. The same is true if no return is stated. return 99 and return '99' Provides 99 as the number value, and '99' as the string value. return 'Ninety-Nine' Provides 0 as the number value (because the string cannot be converted to a number), and 'Ninety-Nine' as the string value. could I read the last line, and then define variables in lua, and then return those to rainmeter? EDIT: still can't do the code formatting :(
Sure, you could do that. The only problem (for me, at least), is that you'll have to mess with a .ini file to make the values show anywhere. You'll also want to change the update time to around 500ms, since that's how often GPU-Z appears to be updating the file (I think you can do that in the ini file, based on the documentation, too). To do this, you would use `Last[INDEX]`, where INDEX is a number from 1-18: (copy from the script running, with debug on) 1 Date 2014-10-31 15:01:13 2 GPU Core Clock [MHz] 382.9 3 GPU Memory Clock [MHz] 150.0 4 GPU Temperature [°C] 39.0 5 Fan Speed (%) [%] 24 6 Fan Speed (RPM) [RPM] 1381 7 GPU Load [%] 0 8 Memory Usage (Dedicated) [MB] 0 9 Memory Usage (Dynamic) [MB] 1125 10 12V [V] 11.75 11 VDDC [V] 0.961 12 VDDCI [V] 1.000 13 VDDC Current In [A] 0.8 14 VDDC Current Out [A] 16.5 15 VDDC Power In [W] 16.5 16 VDDC Power Out [W] 16.2 17 VRM Temperature 1 [°C] 35 18 VRM Temperature 2 [°C] 37 Then, it seems you can use `SKIN:Bang('!SetOption', NAME, 'Text', Last[INDEX]`(where INDEX is a number from 1-18, as above) to set it as an "option" in your skin. There's probably another way of doing this, but you could try that first. Example: local Last = assert(fh:read("*l"), "Unable to read the last line") -- Read the last line ... local Keys, Info = Parse(First), Parse(Last) -- Find this section of the code, and add in these lines. -- You might have to add stuff to the ini file to make this work, look for 'Keys' and 'Values' in the ini file to see how it works. SKIN:Bang('!SetOption', 'GPUCoreClock', 'Text', Last[2]) -- Index 2 is "GPU Core Clock" -- I'm not sure how you'd specify this as a number value, you could try: SKIN:Bang('!SetOption', 'GPUCoreClock', 'Number', tonumber(Last[2])) -- You could also try the return thing you mentioned, but I don't have Rainmeter to test it, and you'd probably have to register multiple functions/scripts to pass multiple values (i.e, core clock, memory, fan speed, load, etc.). -- You can remove these if you're not using them anymore. SKIN:Bang('!SetOption', 'Keys', 'Text', table.concat(Keys, '\n')) SKIN:Bang('!SetOption', 'Values', 'Text', table.concat(Main[#Main], '\n')) ... I can't really help that much more, since I'm not familiar with Rainmeter, and .inis give me headaches :) You could try the Rainmeter forums, there are definitely people better equipped to help you there!
Thanks again, I'll try this out today and let you know how it worked.
It would be easier to help if you could post the uncompiled version and the full error message of the lua interpreter (with line number).
Decompilers are not commonly very reliable, I don't know about unluac in particular. It's entirely possible that it outputs invalid lua, though. But before you even try to get into any of that, you need to verify that Lightroom even accepts modified lua code. It might be that the Lightroom has a list of signatures, and if the code doesn't match the signature, it will reject your program. Otherwise you'd end up wasting a lot of work for nothing.
[Here](http://pastebin.com/7f0q3q8Y) is a copy of the decompiled code. When thrown into a compiler I get an error: &gt; [string "stdin"]:647: 'do' expected near '['attempt to call a nil value I used the site http://repl.it/ as well as a local compiler.
I am assuming Lightroom accepts modified code based on the forum thread [here](https://forums.adobe.com/thread/1254145) . Is there another way to verify this?
That does make it sound like it accepts modified code. The best way to test is to just modify some code in a trivial manner (add a print statement or so) and put it back in, but I suppose you can't do that in the first place, if your decompiler fails to produce compilable code. Might want to also post the original file content, btw.
Thanks for the reply. The original LUA is posted at the top if you are interested.
I am assuming that once i replace the occurrences with temp variables something will inevitably break.
I would probably guess, that the decompiler is missing something. Even if you rewrote it like this: local temp={} while temp[1] do .. the loop will never execute. Technically you can remove that code-path all together. 
codding might involve Fish, but coding is better :)
Are you codding me? I have been codded before and it was not nice.
Have you tried checking out the [Lua Manual](http://lua.org/manual/5.1)? What about [Programming in Lua](http://www.lua.org/pil/)? Also, check out the sidebar for a whole list of good links.
Where are you stuck? Are you going through a tutorial? If so, at what point did you get lost? Have you ever programmed before?
[Learn Lua in 15 minutes](http://tylerneylon.com/a/learn-lua/).
I don't recommend learning lua with Garry's Mod if you don't know the Lua language itself. GarryCode™ is very bad for learning and will teach you bad habits.
&gt; I just don't understand the language. Vs what? Do you understand any programming language?
This was great for me, but if you don't have previous experience it might be a bit minimal.
 hook.Add( "HUDPaint", "truth", function() draw.SimpleText( 10, 10, "urbad, this is easy", "DermaDefault", color_black ); end; );
What languages are you familiar with? Lua is LISP-like: the top level of every .lua file consists of executable code, as opposed to the situation in languages where you define a `main()` function. In addition, functions are first-class values: they can be assigned to variables, and their original binding can be removed. In fact, every function name is just a variable. Consider: function a() print(3) end function b() print(4) end a = b a() --&gt; prints 4 This differentiates Lua from, say, Java. Other than that, the primary thing to know about are tables, but the syntax is mostly self-explanatory, IMO. So when you call a method: foo.do_something(bar) you're really indexing a table: quux = foo.do_something quux(bar) And of course the method syntax with self is a variant of this: foo:act(bar) translates to quux = foo.act quux(foo, bar) Other things: if you use a table like an array, it Just Works [tm] and it's fast, also coroutines and metatables (outside the scope of this post, my train is at my stop). 
All those unnecessary semicolons make it look like your code is winking and frowning at me.
/u/Qraze Are you new to programming? If so, I would stay the hell away from GMod for now. GMod is like Devil's Snare from Harry Potter. If you're not new, tell us the things you're having trouble with.
Just C tendencies. Does not change the functionality of the code at all. + the comment shit word wrapped all my code, putting it all on one line lel
`func(arg1;);` is incorrect syntax (`func(function()end;);`). Also you should indent: hook.Add( "HUDPaint", "truth", function() draw.SimpleText( 10, 10, "urbad, this is easy", "DermaDefault", color_black ) end )
You're missing the most important thing, the whitespace after `(`, and before `)`.
I didn't know how to indent in the reddit comment garbage. I've been coding lua for around 3 years now, and my syntax is completely fine. LUA is one of those free lance languages where the syntax standard is very loosely forced. 
I know this is late, but for Love2D, if you are using Love2D's printing system, love.graphics.printf( text, x, y, limit, align ) does exactly what you want.
smh, GLua, which was the reference to my post, is more flexible, I can show you numerous examples of semi-colons in this exact situation not causing a single issue. 
[Image](http://imgs.xkcd.com/comics/duty_calls.png) **Title:** Duty Calls **Title-text:** What do you want me to do? LEAVE? Then they'll keep being wrong! [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=386#Explanation) **Stats:** This comic has been referenced 1002 times, representing 2.4527% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cm554tf)
What I was thinking of was something along the lines of: local function booty() local p = vgui.Create( "DFrame" ); p:SetSize( 200, 300 ); function p:Paint( w, h ) draw.RoundedBox( 0, 0, 0, w, h, color_white ); end; end; booty(); The picture fits great though ;~)
&gt; artist_string = table.concat (artist_array, ", "):gsub (", ([^,]+)$", "and %1") Why not: artist_string = table.concat(artist_array, " and ")
~~This seems like it's in the right direction, the only issue is it "fires" both missiles when the script is activated and at the same time. I however want it to "fire" when the function is called and only one at a time, how would I accomplish this?~~ Where would I put the function that physically launched the missile (i.e missile.Launch.Disabled = false)
One above and one below coroutine.yield(). I honestly didn't quite get the code you posted, as I thought i was a little over-engineered, so maybe I missed a detail that renders my suggestion useless. I soleyly went by your description. Your fire() function tries to do what I posted, so I think what you might aswell do: * add a coroutine.yield() in line 10 or 11 in your posted code - that would make the function a two-times only use * use my second code snipplet as the arming process So, here is how I imagine this: function fire() -- fire first missile main.Parent.Safe.Missiles.Missile:BreakJoints() wait (0.05) main.Parent.Safe.Missiles.Missile.Launch.Disabled = false -- not sure why you need this wait (0.5) coroutine.yield() -- fire() "returns" at this line upon first call -- fire() resumes at this line upon second call -- fire second missile main.Parent.Safe.Missiles.Missile2:BreakJoints() wait (0.05) main.Parent.Safe.Missiles.Missile2.Launch.Disabled = false end -- load two missiles function loadMissiles() return coroutine.create(fire) -- this is your fire() method above end -- i would actually call this "fire()" function fireMissile(missiles) coroutine.resume(missiles) end Dunno where your missle system is applied, I'll assume in a game: -- load missiles missiles = loadMissiles() -- fire first fireMissile(missiles) -- fire second fireMissile(missiles) -- any further call fireMissile(missiles) -- depleted, need to load more missiles Maybe you can elaborate on how missiles.Launch.Disabled = false represents a "physical launch". Hopefully that helped. Feel free to ask for clarification.
I find the GSL Shell strangely missing from that list. (The somewhat related Agena could perhaps be also included.)
You don't necessarily need to have loadMissiles and fireMissiles functions. I would just add this line after the fire function: fire = coroutine.wrap(fire)
You can do quite a lot in Computer Craft, anywhere from making a simple door lock to making a swarm of mining turtles mine out huge areas. If you need help with starting the [wiki](http://computercraft.info/wiki/) is a good place.
Swarm... yes.. like the zerg yesssss
hahaha exactly like the zerg! It can be a fun project to test your lua skills.
This page is your best friend: http://computercraft.info/wiki/Category:APIs APIs are your way of telling computers or turtles to do things. Lua programming is how you tell the computer when and how, the APIs are the what. Also, these questions are best fielded in /r/ComputerCraft and only posted here if you can't get help there. 
I made a really good automatic tree logging program a long time ago (Andy Logger). But I don't maintain it at all. Maybe you could make a replacement?
College :) But seriously, there may be a programming or computer science class available at a high school or college you attend. If so I would totally check that out. You can't beat that kind of education. Also, Khan Academy has some computer programming courses. I'm not sure how good they are but you might check them out: https://www.khanacademy.org/computing/computer-programming
You're right. I just wanted to provide something intuitive - it was an application example. I run into two issues with your hint though: * *fire* cannot then be used to create another coroutine handle as it is overwritten with the handle returned by coroutine.wrap i.e. no more missles * I get an error about the dead coroutine, which I don't with the coroutine.resume wrapper ( the propagated error might not be a desired behaviour )
I would first parameterize the batch code: ECHO OFF taskkill /im "WINWORD.EXE" /f taskkill /im "EXCEL.EXE" /f REG DELETE %1 /f REG DELETE %2 /f REG DELETE %3 /f Then write a Lua script that figures out the GUIDs. Once you have that, call your batch script with the computed parameters like this: -- after the parameter computation command = string.format("%s %s %s %s", "script.bat", param1, param2, param3) -- param[1-3] correspond to %[1-3] os.execute(command) So you'll have one lua script that computes the parameters for the batch script and calls it. This way you have the robustness of the already working batch script. I have no idea how to figues those GUIDs out though - if you tell me how to in principle I tell you how to write that in Lua. I never program under windows.
Who told you to use Lua? Maybe someone too used to some Lua-based tool they're fond of. I would have pointed you to [VBScript](http://msdn.microsoft.com/en-us/library/sx7b3k7y%28v=VS.85%29.aspx) which is on your computers already and has access to all the things you need. Or JScript, which is the same thing but with Javascript syntax. All the cool kids are using [Power Shell](http://technet.microsoft.com/library/bb978526.aspx) these days though. Which may also work but I'm not sure if it'll be any easier than VBScript. The difficulty in using Lua is you'll need to find a module or helper that will let you access the registry. On its own, Lua can only interface with the OS through `os.execute` which is no better than your BAT file. The batteries are not included. Sure, there are tools that let you do that. But since you're starting from scratch, you may as well choose the option that already has the "batteries" without making you download a bunch of extra stuff. Now, some years ago Microsoft tried to encourage people to make other language engines and there were packages for Perl and TCL. But that feature of the OS languished mostly because they were never able to get more than a small number of applications to be scriptable. I'm not even sure if they intend to continue supporting WSH any more. 
So, CC is how I've gotten into Lua. From there, I went over to AS3 and Java, but now i'm back to Lua on [love2D](http://www.reddit.com/r/love2d)
Oh man, this is a great resource. I have been dabbling with computercraft for a while now, and am only a self taught coder so far. All these little hints about what is valid and what is not as they build upon each other is great, but maybe this is only because of all the struggle I had learning some of the lingo and ideas in the beginning.
Hi, I'm the author of unluac. The file you are trying to decompile has had its debugging information stripped, so unluac will not be able to decompile it correctly, although it is making its best attempt (which is often not very good) by assuming there are no local variables. I don't own Adobe Lightroom, so I can only be of limited use to you, but you could try something like this: Rename DeveloperTemplateBrowser.lua to DeveloperTemplateBrowserBuiltIn.lua. Make a new file called DeveloperTemplateBrowser.lua that has this in it: dofile("DeveloperTemplateBrowserBuiltIn.lua") If that doesn't work, you can also try: require("DeveloperTemplateBrowserBuiltIn.lua") You may not even have to compile, as Lua by default does not discriminate between compiled and uncompiled files. However, if this doesn't work, also try compiling them. (Note that the compiler you use will have to match the binary format used by Lightroom. The files appear to be in the default binary format expect that size_t is 8 instead of 4 which means it is probably a 64-bit build of Lua.) If any of this works (by which I mean that Lightroom still runs as though you had made no changes), then you are probably in business. I don't know 100% for sure what you're trying to do, but you could try one of the following ideas: -- first idea (simpler, less likely to work) _G.AgDevelop_developPresets = {} -- It looks like if we set this value, the defaults won't be generated; however I don't know what to set it to, this is only a rough guess dofile("DeveloperTemplateBrowserBuiltIn.lua") -- or require if that worked Or: -- second idea (more complicated, more likely to work) local default_import = import _G.import = function(moduleName) local module = default_import(moduleName) if moduleName == "AgTemplateBrowserDataModel" then local default_makeFileDataModel = module.makeFileDataModel module.makeFileDataModel = function(first, ...) if type(first) == "table" and first.templateType == "Develop" and first.templateDirectoryName == "Develop Presets" then first.extraReadOnlyDirectories = {} -- This is the behavior we're changing end return default_makeFileDataModel(first, ...) end end return module end dofile("DeveloperTemplateBrowserBuiltIn.lua") -- or require if that worked _G.import = default_import Sorry unluac isn't more help.
that sounds wonderful, ill have to look into that.. i know i own garrys mod so that might help.
I will end up doing something like that, but ill be making my own programs and probably posting them so.
So what is love2d exactly?
There are more subs here, so I usually post in the place with more subs.... I didn't get much help for posting in CC
I would advise keeping an eye on the official garrysmod wiki if you need to look up a function/hook. The DarkRP wiki and forums may be good to look into, also, try working what you've learnt into expression 2. although last-time I checked, the official wiremod site was down.
&gt; I don't know 100% for sure what you're trying to do, but you could try one of the following ideas: Lightroom has built in Presets that i never use and just take up screen real estate. I wanted to remove them from the UI. Regardless, thank you so much for you help and I will definitely look into this. 
Just move the `touched(event)` function to before the `createBall()` function, and the line `ball:addEventListener( "touch", touched )` to the end of your `createBall()` function (before `return ball`, of course). The event listener needs to be set up every time you create a new ball.
I guess i should start on 2d but.. 3d is my area of &lt;3
Thank you!
https://github.com/LewisJEllis/awesome-lua#utility-belts
Have You tried projects like [LuaDist](http://luadist.org/), [LuaRocks](http://luarocks.org/) and [LuaPower](http://luapower.com/) ? There was some talk about merging LuaDist with ~~LuaDist~~ LuaRocks, but... as I understood it's still only in form of talks.
If you keep reinventing the wheel, why haven't you made a library for yourself that you just include for every new project?
What is "it" in this context? And why is it sticking out?? :-O
Computer craft is very fun and a low barrier of entry to new programmers. The default editor sucks. I suggest using an external editor like [notepad++](http://notepad-plus-plus.org/). You can then put programs into your game files, or you can download them from [pastebin](http://pastebin.com/) in game.
Lua is a good first language due to it's simplicity, and that it's used in a lot of things. If you are new you really need to start with a tutorial. Someone above posted the book *[Programming in Lua](http://www.lua.org/pil/)*, which looks like a good start. I learned from the [Lua wiki tutorials](http://lua-users.org/wiki/TutorialDirectory), which is faster but not necessarily as thorough. Look through the sidebar for other resources. Obviously you need to download Lua and learn how to run scripts and use it on the command line. It's important to play around with it and test all the examples.
I've tried the language via the MOAI framework, but what do most people use Lua for? (If not Garry's Mod, Minecraft or MOAI game development)
Definitely a more efficient way out there, but this is what I got: local str="abc(123)def(1) g(a=false)hijk4325$#25432lmf(325)opqus" local newStr = "" local current=0 repeat current = current + 1 if str:sub(current,current) == "(" and str:sub(current,#str):match("%)") then newStr = newStr .. str:sub(current,#str):match("%b()") current = current + #str:sub(current,#str):match("(.-%))") - 1 else newStr = newStr .. str:sub(current,current) end until #newStr:gsub("%b()","")==10 or #newStr==#str print(#newStr,newStr) Should return &gt;27 abc(123)def(1) g(a=false)hi
Have you tried [file.lua](https://github.com/gummesson/file.lua)?
That's a pure Lua module that only uses the standard library. If you're not too concerned with security you can do `os.execute(string.format('copy "%s" "%s"', oldfile, newfile)` 
I ran this. I added a ( in the string and replaced 10 by 100 local str="abc(123)def(1) (g(a=false)hijk4325$#25432lmf(325)opqus" local newStr = "" local current=0 local maxchars=100 repeat current = current + 1 if str:sub(current,current) == "(" and str:sub(current,#str):match("%)") then newStr = newStr .. str:sub(current,#str):match("%b()") current = current + #str:sub(current,#str):match("(.-%))") - 1 else newStr = newStr .. str:sub(current,current) end until #newStr:gsub("%b()","")==maxchars or #newStr==#str print(#newStr,newStr) 
A friend of mine came up with this, simply counting character by character does the job. Feel free to suggest smarter solutions though! function getSubstrWithoutBrackets(str, len) local l = str:len() local count = 0 bracket = false local i for i = 1, l do sub = str:sub(i, i) if not bracket then if sub == "(" then bracket = true else count = count + 1 if count &gt;= len then return print(str:sub(1, i)) end end elseif sub == ")" then bracket = false end end return str end
Surprised nobody has answered this by now. Use the `io` library to open the source and destination files, copy by reading from source and writing to destination. Simples. Usage is all there in the Lua documentation.
&gt;EDIT: When the input contains an extra '(' that is not closed and the string is smaller than maxchars (or 10) it will get trapped in the loop. Appending " or current==#str" at the end of the until line seems to fix the problem
I don't see how "security" is even a thing here. Using `os.execute` to do this task is less than trivial, and efficient. Even if you can do this in Lua, do you really need to?
/r/bash isn't really relevant here, since Rainmeter is windows only :) I understand where you're coming from, but it's very easy to make some bugs that won't show themselves immediately, unless you know how Lua works. For example, you could do something like `output:write(input:read("*a"))`, which could cause memory issues with larger files. Then, you could use globals, and not close the file handles, and they'd remain open, possibly preventing anything else from removing the files. About the untrusted input, I believe this'll come from a Rainmeter "variable", which is basically a configuration setting. Either way, you'd probably want to make sure that both the input/output files are safe to copy before doing so.
What? Why do women need a special group? Wouldn't it be better if there was one big community? 
Nope, you've already got /r/lua.
If you're going to copy the name try to maintain the class/mastery implication. The parallel of ladies is lords. 
So my comment asking for an explanation got down voted. Could you explain? Is the lua community negative towards women? I'm not against it, just confused
I think there can be value in drilling down deeper into smaller and smaller groups of shared interest as long as there are enough people to form the community (if there isn't then it tends to languish anyway). Lua for Games, Lua for Web, Lua for Children, Lua for Women. I don't think these smaller cohorts detract from the community at large. Do you disagree?
&gt; So my comment asking for an explanation got down voted. Could you explain? Is the lua community negative towards women? I'm not against it, just confused Really? Just some honest confusion? You don't really know anything about the difficulties women have in making any progress in fields (especially technical ones) that are dominated by men? Oh wait, you've already made a comment at /r/MensRights. So you do really know why you were downvoted. Quite disingenuous of you. 
How would the code change for children or women as opposed to men? If you want to say "We're just trying to make a smaller interest group" why is it that lua lords, as I've been corrected, is unneeded because /r/lua already exists? Are there not already women in /r/lua, /r/lua has no gender connotations? Is there really a need to create a gender based community and separate the men and women? Why does gender matter at all when it comes to a coding language? Lua Web - Makes sense, has to do with a particular type of coding in lua Lua Games - Makes sense, has to do with a particular type of coding in lua Lua for Children - Sort of makes sense, maybe it teaches the material in a way that makes it more appealing to children? Lua for women - Makes no sense to me, does it teach the material in some sort of way that makes it more accessible to women? If it does, should there be a lua for men that makes the coding more accessible to men? I'm only making an argument because if this *was* a "lua lords" post and lua ladies didn't exist, feminists would be making a huge deal out of men trying to make an exclusive community.
&gt; I'm not familiar with the difficulty women have, but my confusion came from never seeing any sexism on /r/lua. Nothing was said about sexism on /r/lua. But if you're not familiar with the problems women have in the technology industry then there's an entire universe just waiting to be explored. &gt; Again, I'm not against it, and if lua for women helps introduce women to lua, that's great. I just didn't (and still kinda don't) see why it is necessary. Well you pretty much just said it right there. One of the things it can do is help create a comfortable environment for women who are interested in coding explore that interest with people they can identify with (women) operating as mentors (and not just with code but the difficulties women have breaking into technology and coding industries). &gt; I understand your anger towards me, but I'm honestly not against you, nor am I against the idea of lua for women &gt;Edit: let me also state that I never heard of men's rights subreddit before today. Fair enough.
Wouldn't it then be a better idea to make a group not specific to lua? You can make a comfortable environment for female coders, for the purpose you mentioned, and it could apply to all languages, and maybe even different fields in the tech industry. You'd have a bigger community and thus would be able to provide support from more angles.
I'm not in the business of telling people what kind of communities they should form and why. There's clearly a problem with getting women into coding, maybe having lots of smaller communities like this one which then working together in a larger women's coding community is a good approach or maybe yours is best. But whatever the case it's probably for the best to let each group make this decision for themselves and not tell them that they're doing it wrong. In other words if the people involved feel a need then that should be a good enough reason.
Yeah I agree, not my decision. I was just making a suggestion:) glad we agree
"need", because "want" isn't enough?
Why "have to"?
"Want" is indeed more along the lines of the intended question, thanks for pointing that out 
It doesn't need to make sense to you. Your permission, approval, understanding and acceptance are not required. You sound defensive and threatened by the existence of a lualadies community. Why is that?
Justification is not yours to demand. 
Why is any community necessary? Because the people making it decided they wanted it either for themselves or to reach out to others. Asking why it's necessary somewhat implies that you don't know think it is necessary, which is not a very empathetic position to take. Nor is it reasonable, given that your favour is not a prerequisite to a community being created. I would suggest that better responses might have been either "awesome, hope it goes well!" or "awesome, how can I help?", depending on your level of interest in the new community. 
I wish I had more upvotes for you :)
Awesome! :)
Cool :) I'm not a lady but good luck with your group.
I don't necessarily agree with the previous poster that /r/lualords isn't necessary. I think my point about there being value in finding smaller cohorts of people to share even more common experience can be applied to that. But, I mean, I'm just speaking for myself here. I'm not trying to make any sort of broader point.
I'm not demanding anything, only explaining a point of confusion for me and apparently many others.
As a woman, I kind of agree. I mean, I suppose it'd be good for general chat, since chatting with other girls is fun, but when I program, I prefer to treat it as just-business. I don't care, at all, what gender the people I'm talking to identify as. I just want to discuss programming, and my ovaries and tits don't shape my programming ability.
As a female programmer, I didn't have any trouble with my gender and getting into the community. I just decided one day that I wanted to program. I picked up books. I went online and chose gender-neutral names (not on purpose, I just, until recently, would pick names that had nothing to do with gender) and no one even knew my gender. Even after I changed to HeatherHaks/HeatherHacks, I have not once, ever experienced a moment where people have ever negatively commented on my gender. People, in fact, usually go, "Wow! We have a female in our community! That is so cool!" and that's it. Except on IRC. IRC, until semi-recently has been a total hellhole to be openly a female.
It doesn't sound like the goal is to decrease the size of the community, just the opposite. Groups like this can only help.
I do get to call out a series of implicitly negative comments that didn't contain any support for the decision, didn't make any attempt to understand it or empathise with it, and in the case of this one, seemed to have a bubbling undercurrent of disdain for feminism. I would have been much less critical if the comments had been written with at least some implicit support/positivity.
Come on, you're a smart guy, you can't possibly not be aware of the massive gender imbalance in the tech world. Is it really so hard to get from knowing the facts about this, to the idea that a minority group might want to form a community? Is it really so hard to reason that they might want to seek others like themselves, and advocate for others to join, as a means to expand their presence in the tech world in ways that offer a safe landing for people concerned about the gender issues? Even if you really can't get there, there are ways to talk about your confusion that aren't implicitly negative. Nobody took that route. That is disappointing and worthy of criticism IMO. 
Which is fine, and stated like that it's a much more reasonable question IMO :) I would say that even if Lua isn't a hotbed of gender issues, there's more to forming a community that avoiding negativity. It can also serve as a platform for outreach to grow participation in an under-represented group. It also offers an *explicitly* safe landing point, which may well be reassuring to some.
We don't need more sexist segregation. Justify that and you might as well have a Black Male Only sub and a White Tranny only sub.... Lua knows no gender...
&gt; You shouldn't assume that there's a problem. Please [read this article.](http://news.sciencemag.org/math/2014/03/both-genders-think-women-are-bad-basic-math) The upshot is that both men and women unconciously assume that women are inferior to men when it comes to science, technology, and math. &gt; Take a look at nursing, for example: 10% men vs 90% women. And what's the percentage for doctors? Men dominate there. The same with law. Why are women not pursuing the height of those professions? Where there is greater income, prestige, power, and security? Might the previously linked study be related? Maybe that being a doctor or lawyer was, in the past, not something women were even allowed to do and this history of sexism persists in us (at least unconsciously)? &gt; I think this whole thing is just really silly, seeing as in no post in /r/lua have I seen anyone identifying as a male or female. Nor have I seen anyone asking. Why do you think this has anything to do with /r/lua? This is about women helping women overcome some of the inherent problems that women encounter in technology generally and coding specifically in professional environments.
Did you miss the part where I said I'm a female programmer? I know all about this subject. I work continually in the industry. Not once had a problem. So, please, cite some actual events or quit with the vague crap. 
&gt; Did you miss the part where I said I'm a female programmer? What? I was very aware of that and crafted my response accordingly. What part of my response lead you to that conclusion? &gt; I know all about this subject. I don't doubt it! That's why I was very careful about how I responded. &gt; I work continually in the industry. Not once had a problem. That's awesome! Unfortunately the effects of systemic sexism (and racism and classism) are not always easily perceived (which is why I linked to that particular article). And of course your experience, even if it is entirely and 100% free from any and all sexism might not be the normal experience that women have in the technology industry. &gt; So, please, cite some actual events or quit with the vague crap I figured citing an article that cites a study would be preferable to citing anecdotes. And there was certainly no intent to be vague. You started by relating your personal experiences and I responded with similar musings and a link to an article that presents a rather damning study about the inherent and systemic sexism that exists in the technology industry. My response was in good faith and was not an attempt to discredit your position but only intended to expand on what might be a more common experience that women have in the technology industry based not on my own experiences, but as related through the relevant scholarship.
One could conclude that the study the article mentions only pertains to that limited domain. However, I think it's reasonable to suggest that the problem would apply at least to some degree to related fields if not all areas of society. One of the most disturbing facts about that study was that women were just about as likely to be guilty of discriminating against the female applicants as were men. What this might mean in general is rather unsettling, I think. &gt; Most of the jobs I've had are primarily about my portfolio. I'm on the short list before I even get an interview. It's not impacted me at all. The study would suggest that there's a decent chance that your are being paid less than your male counterparts which is something you might not be aware of (as rate of pay is considered one of those taboo subjects in most workplaces). It doesn't guarantee it in your particular situation but it does suggest that as you go through life and as you change careers that your pay will be penalized by the fact that you are woman. But even if you manage to avoid this fate and if this study is an accurate reflection of the realities that women face in the workplace, then women in general will receive less pay throughout their careers.
I wouldn't know about the payments thing, as the last few jobs I've had were at government contract facilities and my pay was fixed by law and equal to everyone else's. That said, I'm done with this conversation with you. You're on the attack and you just have vagueness to support your claims. 
I never said you were attacking me. It's OK that you didn't understand me. I get it. Words are hard for you to understand. 
Wow. So instead you were claiming that I was attacking other people in this thread and therefore you attack me? I attempted to have a meaningful and respectful discussion with you but because of behavior you claim I am exhibiting elsewhere you instead decide to attack me? OK, I'll get over it. ("Forget it me, it's Reddit.")
Your riddles and insults have done me in, I give.
&gt; You sound defensive and threatened by the existence of a lualadies community. Why is that? No, he's pointing out that it's sexist and asking somebody to explain how it's not. Care to take that on? 
Ask yourself whether it would be a good thing to have a more representative tech industry. I hope everyone would agree that it would be a good thing. If you think it would be, and focus your attention in gender representation, you can ask yourself which gender is under-represented. That's a pretty objectively easy question to answer. From there, you can ask yourself whether a specific sub community targeting the minority gender might be able to attract more members of the under-represented gender, by making an explicitly safe environment, and by engaging in outreach efforts. I think it would be capable of achieving those aims. From there, you should be able to reason that while it is an exclusive group, its purpose is to increase participation by an under-represented group, thus leading to an overall more diverse and inclusive ecosystem. From there, you should be able to re-run the thought experiment with the gender selection inverted, and see that a sub community for the over-represented group very likely doesn't/can't serve a larger purpose of inclusivity, and so would likely be viewed as a negative move. I don't mean to seem rude, but that's not a particularly hard series of steps to come up with, is it? All it requires is the initial desire to improve representation, and some amount of empathy for people in the under-represented group who might be interested in the wider community, but are unsure if it will be safe and nurturing to their interests (particularly if the wider ecosystem is well known for not always being very inclusive) (You can then repeat this thought experiment ad-infinitum with any large community, and any selection factor that is currently unevenly distributed in that community)
&gt; I don't see why anyone would be negative towards a female programmer. The more the merrier, gender doesn't matter. It is great that you have that attitude. There is a small and very vocal segment of tech and gaming that does not, however. And it seems to me that they manage to drive away a lot of potential coders. Until the larger community is less tolerant of their antics, it will likely be necessary to form these sub groups focused on one minority or another.
&gt; Ask yourself whether it would be a good thing to have a more representative tech industry. Sending girls the message that they they have special needs with regards to programming runs contrary to that goal. Why don't we open a Lua School For Coloreds next? &gt; I don't mean to seem rude, but that's not a particularly hard series of steps to come up with, is it? It is if you're rational. That's for clarifying the faulty thought process that led to your erroneous conclusion. It was educational. 
So... I posted this, forgot to check it out for less than 48 hours and found out a storm of insensitive replies... As many people asked about the same thing, I hope I'll be able to summarize it all here. - There are already tons of other spaces that are more generalist, like "women who code" etc. There are also more specific groups, like "Rails Girls". Every space has a different utility that adds up. - LuaLadies is not a sexist segregation. A segregation is what exists right now, intended or not. LuaLadies is not made to take out the very few women we have on our community, but to attract more women to it and reduce segregation. I thought that would be very clear from the description "helping more women participating in the Lua community". - No, I have never witnessed or heard about sexist incidents in the Lua community. On the contrary, I only have compliments to how things are dealt here, including to Ierusalimschy himself. Which is _exactly_ why I think Lua is a good community to receive a new number of women. I wouldn't want to invite them to a hostile environment. Seen that most of the community is male, I understand it's difficult to see that there's any issue on that or that there's any utility in Lua Ladies. But despite Lua being, imho, a great community, the number of females is very very low, I could count in my fingers the amount of women in the last workshop. This is probably a reflect on the amount of women in technology in general. Which IS an issue. This is not new information. I really don't get all the fuss. There's a shitton of issues women face before reaching our community. Again, this is not new information. The goal is helping them reach this space without having to deal with so many issues by creating an "intermediary" space. This could also mean attracting more women into technology through Lua, which could ultimately be very beneficial for the community as a whole as it would expand Lua's uses. - It's not just a matter of attraction but also a matter of retention. When the few women we have have a higher drop rate than men and when the top 1 reason of staying in a job or community is the sense of belonging followed by the visibility of role models, creating a group where women can interact with each other just works. - This is not a matter of "needing" to separate the space (there's no separation), but the exact contrary, a matter of _wanting_ to improve something within the community. It's a matter of changing the mentality. If you have trouble getting this concept, this is a game-article that nails it: http://ncase.me/polygons/ - You have all, at some point, asked why there aren't more women programmers. The fact that there's people trying to invalidate an attempt to attract more women to a tech community is self explanatory. PS: thanks cmsj, bo1024, ansible and bfootdav for the supportive comments. 
&gt; Sending girls the message that they they have special needs with regards to programming runs contrary to that goal. I think you have that wrong. I would suggest that the message is more along the lines of explicitly acknowledging that, socially speaking, the tech industry is extremely broken, that it's super important that we increase diversity, and that we're going to create specifically focussed communities to try and fix things. If, however, for the sake of argument, we hold your position as true, how do you propose to make the tech industry more representative? &gt; It is if you're rational. An interesting criticism, please do feel free to expand it with your rational arguments, instead of abbreviated trolling.
Thanks :3
I see some armchair mud-slinging, but no proposed solution, unless you actually think that either tech or wider society are just going to spontaneously change and become equal? Or maybe you think the problem is intractable, so we should just give up and be glad that we didn't try something explicitly unequal, in an unequal world, to try and fix things in the long run? You asked how the gender specific sub community idea is supposed to work. I think I've covered this already, but let's see if we can shake a bit more flesh on. My take would be that it *does something* to accelerate participation and overall diversity is thus automatically improved. Cycle until diversity reaches sufficient levels that the resulting culture in tech communities doesn't discourage women from joining, and doesn't make them want to leave. How else can you change culture than by participation? Certainly not by calling people names on the Internet.
&gt; You have all, at some point, asked why there aren't more women programmers. The fact that there's people trying to invalidate an ~~attempt~~ approach to attract more women to a tech community is self explanatory. FTFY If you proposed giving girls a new cake recipe for every successful program they right, and we rejected it as worthless and sexist, would you blame *that* on the lack of programmers in the tech industry? That we (women included) don't find your approach helpful does not mean we're the problem with the industry.
So someone organizes something to help women and you, man, don't find it useful so I should trash it? I'll go right cancel! Thank you so much for your valorous input! You and the rest of the incredible amount of 0 males to which LuaLadies is aimed to may now rejoice the shutting down of this "useless" project. Just out of curiosity, are you even a member from the Lua community? Or did you just find this topic because it was linked by MRA? Just be honest because this is incredibly weird from an insider point of view since males in the community themselves are the ones who encouraged me to organize this project. Plus nobody made a negative remark until after this was linked to MRA and there's already women registered and excited because they think it's cool and useful. If it's useful for someone and some reason, then it's useful and I'm already satisfied. This is not a matter where your opinion would influence but thanks anyway, I'm happy with the project as it is.
&gt; So someone organizes something to help women and you, man, don't find it useful so I should trash it? Oh, don't pull that pity party bullshit. You organized something in good faith that that you thought would help women. Good for you, props on that. Nobody faults your intention, only the effectiveness of your plan. You do *care* about whether you plan will *actually* help, right? Claiming our skepticism about the effectiveness of your solution is the "problem the tech industry" is nonsensical.
&gt; I don't have to propose a solution to point out that yours is bullshit. You're wrong though, but you seem to be too blinded by your determination to use your "special needs" phrase as a way to yell at people, to actually respect the desires of women to self organise into supportive networks. This isn't me saying "Eureka! I know what will help the poor little womenfolk", this is them self organising because they want/need to. You keep insisting you know what is most fair, but you seem to refuse to empathise with the minority group who want/need to feel they have a safe place for their participation. You can claim your right to yell at them for being wrong (as you see it), but then you're making yourself part of the problem. Do you actually understand what it's like to walk into a room and be the only man/woman/white/black/etc? And to do that *every day*? I work in the Open Source world, where female participation is even lower than the mainstream tech world, as low as 3%, and programs like GNOME Outreach have measurably improved diversity. Groups like Women Of OpenStack are highly valued by their members. You can stamp your feet and demand that it's not going to work, but thankfully people are not hearing you and are trying it anyway :) You're right, I was condescending, because it's very very disappointing that supposedly intelligent people put up such a failure of thought and feeling, when considering this issue. I've said all I'm going to. You need to take some quiet time to reflect on this, as a human being, not as a shouty voice. I imagine you will instead prefer to take the last word and throw more hollow fallacy and insult around, thus proving my point further. 
I've used sigmascrpt which actually has match.random() work properly, i'll give this a whirl for you. Using a HTC One V FYI.
You can find the screenshot of the movie here: http://imgur.com/a/Kjs5c
I'm not really sure what you mean by "use it in an OS." Could you elaborate? Lua is often used as a scripting language within other programs but can also be used as a standalone language, so I'm guessing the answer is yes, but I'm not certain what the question is. 
They are using some [Integrated Development Environment](http://www.wikipedia.org/wiki/Integrated_development_environment) that I'm not familiar with. It seems to incorporate [Internet Relay Chat](http://www.wikipedia.org/wiki/Internet_relay_chat), which I wouldn't find useful on a day-to-day basis. It is not clear what operating system (Windows, Linux, etc.) they are using. If you'd like to get started in a nice IDE, I'd suggest ZeroBrane Studio, which is linked from this subreddit's sidebar in the tools section.
is the IDE for lua?
On most picture this is certainly Linux with Awesome windows manager (http://awesome.naquadah.org/) and one terminal running screen or tmux and many command or application.
I am the repo owner and did all necessary patches. this is my own work. Was it easy for you to compile the project?
This just earned you Gold :) Also: http://ncase.me/polygons/
Your head seems to be screwed on right. Glad to have you as a mod!
That post is awesome, and completely changed the way I think about the lack of diversity in tech circles, and about positive discrimination in general.
It could have contained the word sexism, you know, the highschoolers weren't just highschoolers, they went down to directly insulting a member of our community over this. But tbh, I'm glad they seem not to even be members of the Lua community, it seems like they just came here through a link to cause embarrassment! I'm very happy the moderation decided to act upon. This is just great! 
How does that handle nested brackets?
The thing is, if it were a group for Lua programmers from Finland, or Lua programmers who are teenagers, or Lua programmers over 60, or any other subgroup of humanity, no one would question it at all. But try to make something specifically for women and you get people coming out of the woodwork asking "why do we need this?" It's complete bullshit. Thank you for calling it out, and adding the link to the sidebar.
&gt; Thought experiment: I'd like any guy reading this to list all of the social circles you hang out in which are more than 80% female. (Pedantic nah'huh incoming, but in a kind tone) Nurses, and they are wonderful, amazing people. I sleep really odd hours, so end up with lots of 3rd shift friends. The group I hang out with is exclusively female, but nationally (United States) about 6% of nurses are men. Being an RN is a hard but rewarding job with one of the fastest growing salaries in the US (approaching 70k average). The gender "norms" things hits real hard here -- my friends, who are female nurses, even feel male nurses are far less masculine ... I would support a "support group" for male nurses, so I guess I support his as well! Yey, separate but equal. Or... more honestly, I don't care... life is far too short to get angry over people wanting to self-organize around physical properties... if they think it improves the quality of their life, who am I to argue. Race, gender, location, height, eye color, age, foot size, whatever you want to self-organize around, go for it! To anyone who might be angry about this -- form your own group, maybe it will end up in the sidebar!
Yep, groups often self-organize around physical properties, yet certain ones just rub people the wrong way... Retired Lua programmers would be an awesome (if small) group. 
Yeah. I'm a girl, but this kind of arrogant crap from a mod of this subreddit kinda makes me not want to be a member here.
Why only for lua though? It's such a small subreddit and there isn't much to lua apart from being embeddable and a scripting language. /r/codingladies would make more sense.
As always, releases are available at [lua.org/work](http://www.lua.org/work/). Looks like the final release will coincide with christmas or the new year.
I would not bet on it. There will probably be a series of release candidates first, as per the norm.
Not sure why people are down-voting you for expressing an annoyance with blatant, transparent, embarrassing white knighting. I have no issue with the action (adding a group to the sidebar)... but, how it was done was without tact. Did it even require a post? Just add it to the sidebar. 
You make very valid points, and LuaLadies has inspired me to make /r/CatholicProgrammers for many of the same reasons, so thanks!
These are common requests and so you don't have to implement it yourself. Ctrl+F: [Compound Assignment Operators](http://lua-users.org/wiki/LuaPowerPatches). There is, on the same page, likely a version for Lua 5.1 as well. Why are they absent? Likely to maintain simplicity. 
Ah, thanks for pointing me in the right direction. I wasn't sure what the technical term was.
I found that going through the Lua manual and making small programs based on each section was the most effective for me. Then i tried to make programs based on multiple sections. I still don't understand metatables though.
You can use http://www.amazon.com/Programming-Lua-Roberto-Ierusalimschy/dp/859037985X - WELL worth it - and I write software for a living. I am sure you can find a vendor that sells a digital copy.
&gt; it seems like something that would be fairly minor to add This is not really true, and it's the main reason they're not in the language. &gt; would save a lot of time That's the least of it. If it was just to save keystrokes, I could give a rat's ass about them. But it also affects: 1. Expressiveness. `x = x + 1` is a statement, whereas `++x` is an *expression*. The latter can be used to write more succinct and sometimes clearer code. 2. Performance. `a.b.c.d = a.b.c.d + 1` involves twice as many hashtable lookups as `++a.b.c.d`, and it gets worse if there are any metatables involved. This is *very* common in Lua code.
And you're acting like your experience disqualifies others' experience. The fact that you don't see an utility in this group is great, really! It is really great that the gender imbalance does not have an impact on you. But that does not mean that others feel the same exact way! That's my whole issue with your discourse. It's not about agenda. This is real. "It doesn't happen to me, so let's not care" sounds really... I don't even know what to say. If that's not what you meant, then I'm sorry, but that's really what I'm getting from everything you're saying so far...
I *never* said the Lua community is sexist. I said the Lua community has very few females. Which is true. Neither have I said that this is a separation of the community, on the contrary. You're putting words in my mouth. I already explained this on the other topic you participated. 
You put words in my mouth first. Further, I never claimed -you- said it was separation. -I- said it was. It is. It is singling out females, in a group where both sexes are treated equally. That, in itself, is sexist and wrong.
I keep what I said, that you're acting that an issue that does not affect _you_ should not be addressed. No, this is not sexist, neither wrong. This is addressing a real issue, that we have few females in the community, and trying to increase it. This group will never ever sling out females already from the main Lua community. Simply because it doesn't work that way! On the contrary, it will bring in new women that did not participate before. Lua being a nice community is the exact reason that it is a great group to receive a new number of women. As, apparently, my words fail to touch you, here are some links that explain this well: http://www.chesnok.com/daily/2013/02/23/why-pyladies/ http://www.informit.com/articles/article.aspx?p=2137399 http://railsgirls.com/press
You are completely failing to understand me and you keep trying to put words in my mouth and attack me as a person. 
It's just it's very frustrating to be called sexist repeatedly. You have accused my project of being sexist multiple times and you are also completely failing to understand me. I'm sorry if I seemed to attack you, that was not my intention. From my end, it looks like I'm trying to make something to help and you are just trying to invalidate and jinx it. Even though that are similar projects to sustain my idea that it works. It *is* very frustrating. Have checked out the links I posted?
A way that worked greatly for me was setting up a goal first. Like "What do I want to do with Lua?". Think of a program, something you like, maybe a small 2D game or a website? Define this first then start searching for "How to do X in Lua" and follow what you find also using the Lua manual that was already posted here! :)
Ok.
None of this is true. /r/lua has next to zero traffic. It does not need subgroups. Period. Yet if you say that, and the subgroup happens to be women, you get accused of being sexist. That's complete bullshit.
One wrinkle to keep in mind is that Lua (the main implementation) is a *single-pass compiler*. It converts your Lua source code into bytecode directly while it's parsing the code, with no intermediate representation or extra passes over the output. That makes some things difficult to implement without dramatically changing the compiler. Self-assignment operators, especially when you consider non-trivial lvalues like `foo.bar[baz] += 3` are probably hard to generate bytecode for with just one pass over the source. You have to emit the bytecode for the load (so `foo.bar[baz]`), then the bytecode for the right-hand side (`3`), then go *back* and emit the bytecode for the store (`foo.bar[baz] = `). This is trivial in a language implementation that parses to an AST and lets you rewrite the AST before code generation. But Lua doesn't roll that way. It's also worth noting that assignment is a *statement* in Lua, not an expression. Allowing an assignment in an expression context is another example of something that's a lot trickier in a single pass compiler. So, even if they added self-assignment operators, they'd still be less flexible than you're used to from other languages since they could only happen in statement position. *Edit: after looking at [this patch](http://lua-users.org/lists/lua-l//2011-06/msg01223.html) it looks like it's more straightforward than I feared. In that case, it may just be more of a case of the Lua maintainers trying to keep things as simple and minimal as possible.*
No offense to your project or anything, but this whole discussion made people pick sides and divided the community. The actual effect of your actions (despite good intentions) on this particular community was that it created a division that previously didn't exist, which is /u/heatherhaks point. I mean, when a mod has to come out and call people highschoolers because they disagree with something, doesn't it seem like it's doing more damage than good? Either way, good luck with this and your other projects (Sailor looks pretty interesting).
I haven't used it, but Lua can use SQLite: http://lua.sqlite.org/index.cgi/index
There are bindings for SQLite [here](http://lua.sqlite.org/index.cgi/doc/tip/doc/lsqlite3.wiki). It's a C library, though, so depending on your use case, it might not work.
I've found LuaSQL to be pretty useful, if a bit oddly designed. http://keplerproject.github.io/luasql/doc/us/
That's, like, the exact opposite of what the OP wanted.
There are quite a few local database libraries for Lua, actually. If you have a database in mind, you will most likely find a bindings for it. To name a few besides SQLite: * http://asbradbury.org/projects/lua-tinycdb/ * http://fallabs.com/tokyocabinet/luadoc/ * http://webserver2.tecgraf.puc-rio.br/~lhf/ftp/lua/#lgdbm * https://github.com/mkottman/lua-sophia etc. etc.
I totally get what you mean. Except that I was not creating a division. I made an announcement, came back 2 days later to find out my project was being bashed. And it was the bashing that made the division, not the group. Like someone said before, if it was a group for Lua teenagers or french or over 60 nobody would question it. (thanks, Sailor is indeed really cool :3 )
&gt;Except that I was not creating a division. I know, that's why I said "despite good intentions". &gt;Like someone said before, if it was a group for Lua teenagers or french or over 60 nobody would question it. I don't think the comparison stands. Lua for children/old people/people from [city]/people who speak [language] are all understandable. They all have the goal of creating resources that are better suited for those types of people. For children you'd create tutorials aimed at children and those differ than normal tutorials. For people who speak [language] you'd create tutorials in that language, plus you enable this technology for people who only speak that language and not English. For people who are from some city you create a group of people who can meet locally and in real life, which some people find valuable. But Lua for women, black people, asians, disabled people; whatever else on the line where there's only a physical external differences doesn't seem to make sense to me. If someone create LuaBlacks for black people only there'd probably be a similar backlash. Similarly for LuaDisableds, like, why? There's no particular challenge in using Lua that prevents disabled people from using it just like everyone else. There's another problem where, if people create LuaBlacks, the community would justifiably ask: "why does this need to exist? Is this community somehow racist?" and then if you proceeded to ask this question and then the moderator of said community called you a high schooler and an immature person, it'd certainly create some previously non-existant animosity towards black people.
&gt; ++x is an expression. The latter can be used to write more succinct and sometimes clearer code. I agree on the succint, but strongly disagree on the clarity part. I would be ok with Lua having x++ as a statement, but I would definitively not like it if it had pre-increment and post-increment expressions. &gt; a.b.c.d = a.b.c.d + 1 Well, I think people tend to do local c = a.b.c c.d = c.d + 1 Which is equivalent to what a.b.c.d++ would do. But when I need more than one "dot" on one assignment I stop and think; it often indicates some abstraction level is messed up in my code.
&gt; strongly disagree on the clarity part That's a matter of taste, so we can agree to disagree. &gt; Well, I think people tend to do &gt; local d = a.b.c.d &gt; a.b.c.d = d + 1 *Why* would anybody do that? You'd gain absolutely nothing but verbosity. &gt; I need more than one "dot" on one assignment I stop and think; it often indicates some abstraction level is messed up in my code More often it's the opposite: you get more performance at the cost of less abstraction/modularlization. 
Can anyone explain why lhf appears to [prefer old-school diffs](http://www.lua.org/work/diffs-lua-5.3.0-rc0-rc1.txt) to udiff? EDIT: My bet for the final is still on New Year.
And here I am still using 5.1
Also asterisk, nginx-lua, garrys mod and more. So sad
&gt; Why would anybody do that? You'd gain absolutely nothing but verbosity. I made a mistake when writing the code. Please look at it again. &gt; More often it's the opposite: you get more performance at the cost of less abstraction/modularlization. Well, that is not my experience. If anything, it makes hard-to-read code with hidden bugs. (Case in point: I made a mistake writing it - and it was a very simple example)
Read Programming in Lua, Third Edition. I know having someone tell you that isn't very helpful in itself but i can try and give you some assurance that Lua is a very simple language at heart. It's like learning to work with clay. Though it is simple, it is powerful in that there are few obstacles to your creativity. Don't give up! It's also worth the effort to hang around on #lua on freenode. They are very helpful in there, and aren't going to be rude to you just because you're new. 
&gt; And here I am still using 5.1 There’s an upside to this: When the time comes and you finally upgrade to 5.4, 5.5, or whatever future version it is going to be, the number of new features will make that day one of the most exciting moments of your career ``;-)``.
&gt; Moreover it's not uncommon, when a host application is embedding Lua, to not update to the latest version of Lua just because it's newer, but rather to stick to the version they shipped with. Great point, which I didn’t think of. Thanks for the response. 
Sounds like a Perl way of thinking. I like it. ;)
Lua Interface works great and is easy to use. NLua is a fork with more active development, so go with that. You can call both ways - Lua -&gt; C# and C# -&gt; Lua. 
This is not bad advice, but you should be careful not to misinterpret this. It's best to avoid core deviations from the language. Don't like that Lua uses ~= and want to provide your users with != instead? Don't. Don't like that the standard libs assume 1-based indexing on arrays? Don't change it. A popular as Lua is as an embedded scripting language, you can find lots of implementations changing core syntax and semantics like this for taste, or because the developers assume they're making the language more approachable to people that don't know Lua. But in reality they're making it more alien to everyone. Every deviation you make from the core of the language invalidates the wealth of documentation and software already written *by that much*. Every deviation from the common idioms and best practices of the language invalidates the wealth of good advice to be found on blogs and forum posts and IRC and mailing lists. Don't change the core structure. Respect the language's semantics, the common idioms, and the expected behavior of the language. In doing this, you're giving your users access to a wealth of existing resources to learn. Every time a new developer tries to write some extension for your program, and needs to run a query past Google to understand the language, they should expect the core advice they find to carry over, rather than a comment to the effect of "except when using product X". In the long-run, this is healthier for your product. Don't be afraid to extend Lua. Add anything you want atop it. But don't change the underlying structure just for funsies. You're doing more harm than good. Another take-away from this is, that you should absolutely get to know your language of choice, not just by reading the manual for a few days and writing a trivial program in it, but by engaging the existing community and getting a feel for common idioms, best practices, and accepted conventions. The community has spent time with the language and come up with the best ways to do things already, so it's best to learn from them, and follow suit if you intend to implement your own API in the language. 
Oh damn, I see you get my point. But I didnt specify reigning in obvious overreach. If someone does what he suggested as an interpretation of what I meant, I will personally hunt you down and give you a stern talking to.
Hmm... Sounds like there's an bug somewhere in your code. You probably should fix it. /s Now we **could** help you find it, but we would need to see the code (or have an idea of what exactly you're doing and "some snippet" isn't that). As an aside, you could also treat this as a debugging/testing practice session and work on your skills in that area too.
Yeah, thank you guys. But the code is not mine, and my job is to make it an object. The guy who wrote the code doesn't want to me to paste it on the net. I hate him!!!! I will try it again.
The biggest difference between the interactive shell and a loading file is that each line in the shell is executed in its own context. So a `local foo` on a single line will be gone by the next line. There may be other subtle differences, this one has bitten me personally. Good luck.
You might also consider using lirbaries that are already there, for example: https://github.com/bungle/lua-resty-session
Vim.
Have you ever used LDT? I feel like the only factor that Zerobrane holds above it is the scratchpad, which isn't that helpful when using my rather unique, shoddy class system.
Nope. Ive used Lua glider (too unstable), sublime, and finally settled on Zerobrane.
One Glider update really f'd up my project, but after I recovered and emailed the creator, he was able to get a bugfix and with version control, I recovered. I did try to switch to ZeroBrane in the interim, but it didn't have either the all the code inspection tools (like jump to declaration) or they weren't as accessible. Either way, I switched back asap.
Sorry for my inaccuracy. I don't user any framework. But the server is uhttpd. So how can I get access the header of http. I have parser which parse the template in html and get the data in html and return it to server after some processing. So I wonder how can I set cookie.
git is how i recovered. It's unusual for a project to be corrupted by an IDE upgrade.
Dick high five!
ZBS has had Go To Definition for a while; it's available by Right Click in the editor on an identifier and then Go To Definition as described in this post: http://notebook.kulchenko.com/zerobrane/scope-aware-variable-indicators-zerobrane-studio. It also includes other inspection tools, like scope aware indicators, variable renaming, and scope aware auto-complete for variables. I'm open to suggestions on how to make it more accessible.
congrats, its now under a non permissive license
Excuse me? Do you want a specific license to use this code? I can issue a version under the license that you want.
I think the license is already GFDL, since you copied it from rosettacode, and the entirety of that is gfdl. Could be wrong of course, I'm no lawyer.
Try using `string.format`. I think what's happening is, as you said, you're comparing 1.0000000000something to 1.
You're kinda right about what is causing it: print(string.format("%f %d", c1, c1), c1) Output: 0.000000 0 0 1.000000 1 1 2.000000 2 2 0.000000 0 0 1.000000 0 1 2.000000 2 2 0.000000 0 0 1.000000 1 1 2.000000 1 2 It seems lua is formating all numbers, but I'm not sure exactly how. However, that doesn't explains math.modf not working as it should.
I modified your script slightly to show you what's happening here: local ts = tostring function tostring(a) if type(a) == 'number' then return ('%.20f'):format(a) else return ts(a) end end function modf(x, y) return math.floor(x / y), x % y end for i = 0, 8 do local r1, c1 = math.modf(i / 3) c1 = c1 * 3 local r2, c2 = modf(i, 3) print(r1, r2, r1 == r2, c1, c2, c1 == c2) end and the output: D:\Desktop λ lua test.lua 0.00000000000000000000 0.00000000000000000000 true 0.00000000000000000000 0.00000000000000000000 true 0.00000000000000000000 0.00000000000000000000 true 1.00000000000000000000 1.00000000000000000000 true 0.00000000000000000000 0.00000000000000000000 true 2.00000000000000000000 2.00000000000000000000 true 1.00000000000000000000 1.00000000000000000000 true 0.00000000000000000000 0.00000000000000000000 true 1.00000000000000000000 1.00000000000000000000 true 0.99999999999999978000 1.00000000000000000000 false 1.00000000000000000000 1.00000000000000000000 true 2.00000000000000000000 2.00000000000000000000 true 2.00000000000000000000 2.00000000000000000000 true 0.00000000000000000000 0.00000000000000000000 true 2.00000000000000000000 2.00000000000000000000 true 1.00000000000000040000 1.00000000000000000000 false 2.00000000000000000000 2.00000000000000000000 true 1.99999999999999960000 2.00000000000000000000 false Numbers in Lua are encoded (by default) as IEEE 754 floating-point numbers. These have limited precision and cannot represent every number exactly (just like any other number system out there). 
But do you agree that something is wrong with math.modf? 
Well, shit, let me just pull up all of the API references for all of the technologies and environments that you haven't told us you're using. 
Sorry. I am writing a backend in lua. I want to get the IP of the visitors on my web. It is clearer?
You've restated the question without actually giving any information that might help anyone answer. What is executing the lua backend? Is this Apache? IIS? Something else? What module are you using? What other technologies might be interfacing between the client and the server?
OOh， I am sorry for my bad question. My server is uhttpd, a tiny server for openwrt. I have not adopted other lib.
In any calculation that involves Float numbers, you should never ever expect that the result is EXACTLY EQUAL to something (anything). You shouldn't even expect that (1 / 2 == 5 / 10) evaluates to TRUE. This is not only in Lua but in vast majority of programming languages.
Thank you very much for explaining this. I will read into the link you provided.
You can use LuCI to do luci.http.getenv("REMOTE_ADDR") I cannot seem to find a way to do it without using LuCI, but I'm not familiar with OpenWRT or uhttpd, so it may very well be that you have it installed and just aren't aware. Or that I've looked at perfectly good alternatives (Keplerproject's CGILua would be my next bet) and haven't recognized them.
If this were the case, Lua (and more importantly Javascript and family) would be virtually unusable. Fortunately many values (including 1/2) are exactly representable. As are all divisions of integers where the result happens to be an integer. So you *can* expect that (1 / 2 == 5 / 10), (333 / 111 == 3) etc. The problem comes when you have an inexact value (like 1/3 in this example.) If any input to an operation is inexact, then the output is also inexact. So you should not assume ((1/3)*3 == 1) etc.
I consider this attitude dangerous. Yes, "1/2" IS usually represented exactly, but you cannot be 100% sure and it's not trivial to know which number can and which can not be represented exactly. The computer Float representation of numbers is usually binary based, which means that fractions that can be expressed exacty in decimal systems might not be exactly representable in Float, and vice versa! You have "1/2" in your program, it works, later you change it to "1/10" and it no longer works, because "1/10" cannot be expressed exactly in Float (whereas 1/2 can be). This is hell to debug. You really should never compare floats for equality except in very trivial cases.
Oh, no, I'm being facetious. I don't think he should actually change his hobby. That's my snarky way of saying he should learn more and adapt rather than find faults with it. I fucking love floating point math because it's so useful and has such esoteric corner cases.
You're not using lua though; if they're all getting linked into one final executable, then just make sure it's declared: int bar(lua_State *L); int foo(lua_State *L) { return bar(L); } `bar()` is always directly accessible if it's a C function. 
If you call the function directly as the C function, you typically need to make sure that the Lua stack looks like as if the call originated from Lua. That's not always possible.
You need to show us a minimal C module which shows the problem you're trying to solve. It seems rather specific to what you are doing.
Except the Lua function name bar is bind to some intermediate warpper which in turn call a member of my C++ class. With some library code change, I can call the warpper function directly from my C++ implementation of foo, but the code is so ugly I'd rather go through lua_pcall. 
Welp, maybe I could help, waiting for contact.
Why do they do `ARGV` for arguments, and not the standard `arg` or `{...}`?
No, you may have to provide arguments on lua stack, but that should be possible, or could you give an example to prove your claim, so I can learn something I did not know? Lua wrapped calls are a different story. For those you need to call the wrapper function, which should be callable as any other lua function.
&gt; No, you may have to provide arguments on lua stack, but that should be possible, When a C function is called by Lua, *only* the arguments are on the stack. This cumbersome to arrange if you want to call the function directly and have Lua values you want to save across the function call.
The forvo link you gave is actually pretty close to how he says his name. The biggest difference is that in Rio de Janeiro they would pronounce Roberto as "Roberrto", with both "r"s being guturral. That said, the easiest way to avoid confusion is to just call him Roberto :)
If you think carefully about your design, it may not be necessary to route the call through Lua. For example, you could have a plain C function bar_aux and a wrapper bar that calls bar_aux, and you could have foo also call bar_aux. But assuming you did want to route through Lua, your question is how to find your own module table, given that you can't rely on it bein present in _G. You shouldn't rely on that even before 5.2 by the way. The preferred convention for doing this is to use the registry: you create a special entry there indexed by a unique name, perhaps "com.you.yourmodule", when the library loads. Then C components of your module can cross-reference whatever they like there, including themselves wrapped up as Lua functions. I'm not in my Lua coding mindset right now, so am not going to try to provide sample code, but perhaps this is enough to point you in the right direction.
Thanks. Using the registry make sense. I will try that next time. I ended up modifying the wrapper library and make the direct call to bar_aux less cumbersome and call it directly. Before that I had to create a new class inherited from some base class to get access to protected static members and the C++ expression to call bar_aux was 100+ char long. That's why I thought route through Lua would be clearner.
Yes. Its pretty common to call people by their first name here in Brazil.
If it's from Russian, I pronounce it the way it is written! ;-)
He actually said translated, translations are still derivative works. wouldn't it fall under the same license that the author intended? (hopefully it isn't)
Where did you get that information can't be copyrighted? How is it not comparable? maybe all he needed to do was do a few syntactical changes, even less trouble than a natural language.
&gt; Where did you get that information can't be copyrighted? Uh...because that's the whole principle of copyright, perhaps?
information is data, code is definitely information on how to do something (algorithms). unless you mean some other perhaps legal definition of information.
&gt; information is data Heh, hardly. &gt; code is definitely information on how to do something (algorithms) That is true, from a restricted perspective of what information is (here meaning information for computer) but algorithms themselves are not subject to copyright. And that's the point here: algorithms as information expressed in code as a copyrighted work are *not the same thing* as code as a copyrighted work. I'm not sure there's any "legal definition of information", but that's irrelevant here since algorithms tend to be specifically excluded in the copyright law of many, if not most world's jurisdictions.
Can you show us your code? You have basically the right idea (though I'm not sure you execute your script file before trying to execute the function), but we can't really tell if your code is correct without seeing it.
It sounds like the code is loaded but forgot to execute it afterwards. I know I have made this mistake before.
Sure! Here's the code - it's being called from Go, but don't let that scare you :) the C. preceding the calls are 1-1 with the C library calls you'd see in a standard C program... Code Starts below: package main /* #cgo CFLAGS: -I /opt/local/include/ljit #cgo LDFLAGS: -L /opt/local/lib -lluajit-5.1 #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt; #include &lt;luajit-2.0/lua.h&gt; #include &lt;luajit-2.0/lualib.h&gt; #include &lt;luajit-2.0/lauxlib.h&gt; */ import "C" import ( "fmt" "os" "unsafe" ) const ( script = ` function doMe(x) print("inside doMe()") print("x=",x) ffi.C.my_func() end ` ) func main() { // Initialize state. state := C.luaL_newstate() if state == nil { fmt.Println("Unable to initialize Lua context.") os.Exit(1) } C.luaL_openlibs(state) // Compile the script. // fmt.Printf("Executing\n%s\n\n", script) csrc := C.CString(script) defer C.free(unsafe.Pointer(csrc)) if C.luaL_loadstring(state, csrc) != 0 { errstring := C.GoString(C.lua_tolstring(state, -1, nil)) fmt.Printf("Lua error: %v\n", errstring) os.Exit(1) } // Build the Stack me := C.CString("doMe") //me := C.CString("print") defer C.free(unsafe.Pointer(me)) C.lua_getfield(state, C.LUA_GLOBALSINDEX, me) C.lua_pushnumber(state, 42) // Run script. if C.lua_pcall(state, 1, 0, 0) != 0 { errstring := C.GoString(C.lua_tolstring(state, -1, nil)) fmt.Printf("Lua execution error: %v\n", errstring) os.Exit(1) } } 
I'm loading it with loadstring and executing it with pcall
As I suspected, you use luaL_loadstring to load the source file but it doesn't actually execute the file so the functions are never created in Lua's VM. You should use the function [luaL_dostring](http://www.lua.org/manual/5.1/manual.html#luaL_dostring) to execute the string before trying to use the function. If you're using Go, you might need to translate the macro first, though I don't have much experience with it.
No, lua_call and lua_pcall are only for calling lua functions. But for the functions to be present, they have to be interpreted first which is done with luaL_dostring and luaL_dofile. If you only use loadstring, the string has been turned to bytecode but it hasn't been executed yet which means the declared functions haven't actually been registered in the virtual machine yet.
Hello Everyone, I'm the author of upperclass.lua, another class implimentation supporting scoped class members, strict member types, and user defined metamethods. I'm posting to gather feedback on the library itself. Any comments would be appreciated!
Typos in docs/defining_class_properties.md: "Setter SCope" "Default Value: LUA_STRING|LUA_NUMBER|LUA_TABLE|LUA_BOOLEAN|LUA_USERDATA" missing optional status of this value.
Thanks docs have been updated: https://github.com/admin36/lua-upperclass/releases/tag/0.1.3
&gt; LuaJIT doesn't even support 5.2 yet It does support [most](http://luajit.org/extensions.html#lua52) of Lua 5.2, FWIW (although not all of it.)
Lua and LuaJIT have basically forked and are likely to become less and less compatible moving forward. Sadly, this will probably hurt both in the long term.
I am ashamed to admit this, but I have been using Lua for a while and never realized it had coroutines. Thanks to your article, now I know :)
You may wanna try using [LuaJIT:s FFI](http://luajit.org/ext_ffi.html) which has 0-indexing by default.
Well, mixing 0 and 1-indexing even in the same language would probably just make the confusion worse.
A memory issue is a speed issue, since more memory used means more cache misses. There is also an issue of needing to check the type of a variable before operating on it.
&gt; type-checking has to be done at run-time rather than at compile-time My point is that this is not a general statement about static typing. I've been writing in typescript lately, which is statically typed JavaScript. It has *no* affect on performance whatsoever -- it's purely a way of enforcing constraints at compile time. In C++ the type system lets you describe the exact layout of objects in memory, which is a performance improvement, but that's not something fundamental to static typing. &gt; So intertia then. Yup, aka historical baggage. 
You certainly wouldn't write `function kill(hero) ... end`, you'd write `function hero:kill() ... end`
Roberto Ierusalimschy addressed this in his talk "Some thorny points in the design of Lua: a personal perspective" http://www.inf.puc-rio.br/~roberto/talks/ws2011.pdf Excerpt: * Not all languages are 0-based: Icon, Fortran, AWK1, and Smalltalk are 1-based; Snobol, Pascal, Modula, Modula-32, and Ada have configurable bases. * Currently, many languages are 0-based due to influence from C. * Ironically, none of them share the reason that made C 0-based (where a[e] means *(a+e)). * However, several other languages are 0-based without that influence. Examples include Scheme, Oberon, and Haskell. 1-based Arrays: * Much more intuitive: first is 1st (not 0th). ISO-C: “E1[E2] designates the E2-th element of E1 (counting from zero).” * Much easier for non programmers. * Easy for (good) programmers :) * Historical reason: Fortran used 1-based arrays, and most first users of Lua had a Fortran background. 
He left out the [mathematical rational](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html).
That is in favor of 0, right? I think that's in the slides for his 0-based section. I didn't paste that because I thought we were addressing "I can’t come up with a single good argument for 1-indexing". 
Maybe I should have used a better example, like `function Hero:pick_up(item)`.
Yeah, I've already switched. I started using 5.3 beta on my one project ([shameless plug](http://www.reddit.com/r/platonicmusicengine)) and used a script to convert everything to 5.2 for the sake of users who weren't willing to change to 5.3 beta. But now that it's out of beta I will no longer maintain the 5.2 version. 
I did a little experiement with LuaJIT FFI speed vs. pure C-speed. There can be a huge difference depending on how your C API looks like. Do you do allocations, or reuse objects etc. 1. I created this simple binding: https://github.com/bungle/lua-resty-opjson 2. At first I did wrote the binding directly to this: https://github.com/vurtun/json The performance difference between pure C-benchmark and my Lua implementation was 3 secs vs. 30 secs. So it looks like your 10x performance difference. But I didn't stop there, I forked that vurtun/json to here: https://github.com/bungle/libopjson. And the results were now 3 secs to 6 secs (about 2x difference, and I can still make it closer if I remove recursion from my Lua code). Lessons learned: LuaJIT NYIs kill the JIT (use luajit -jv to check those). At first I did get a lot of NYIs and there were a lot of unneccessary allocations and assignments between Lua and FFI C lib.
&gt; Yup, aka historical baggage. I would dispute this phrasing of it due to the negative connotations. I would argue using 0 as your 1st index is historical baggage than using 1. 1 makes more sense logically for indexes. In C you don't provide indexes though, you provide offsets. 
&gt; What, you've never encountered a bug due to 1-indexing? I don't think I have. Nearly all loops that use indexes are of the for for i, v in ipairs(t) do ... end I have a codebase with a huge amount of lua for one of my projects and I don't think I ever need to manually assign indexes to anything. It's just not something that comes up, unlike in languages like C. 
And C was deliberately chosen to be like assembly, which is also historical baggage that exists because you're treating your index like an offset. The ideas are distinct but C conflates them. The first element should be at index 1 because that's how how we count things. The first page in a book is page 1. You don't call your first child your zero-th child. If you get first place in a contest it means you're getting gold, not silver. Counting from 0 only occurs in CS because we've all conditioned ourselves so strongly to be used to it, but when interacting with people who haven't had 0 indexing drilled into their head you have to constantly add 1 to everything. &gt; It's more intuitive to non-programmers, non-mathematicians, at least for certain sets of problems Most mathematics I've seen (especially math not done by CS people) uses 1-based indexes, not 0. In fact, I've seen mathematicians and computer scientists argue over it before. Dijkstra even mentions one such case in his letter you linked to. &gt; If we're on a side walk and I ask you to count how many squares away I am, you're probably going to consider your square "square 0". You're making the mistake I talked about - this is the wrong analogy. You're talking about offsets, not indexes. If you wanted to label the squares, 1 is the first square. It doesn't makes sense to have the **1**st element be 0. It's built in to our human language. Lua indexes are true indexes rather than offsets. The first element is element 1. As an additional benefit this creates a nice symmetry when indexing from the back where -1 is the last element. Either way, the fact that we start with 0 is a historical artifact due to how assembly accesses data in arrays, not because it's objectively better. &gt; Most algorithms work better with 0-based arrays, and it's certainly favored in mathematics. I would dispute this. There are a handful of cases where you have a ring of numbers, but most of the time you don't even need the index, especially in a scripting language like Lua. The vast majority of loops are going to be of the form `for i, v in ipairs(t) ... end`, and if you're adding or removing things from the table it's going to be done with things like table.insert, where you don't even need to supply an index most of the time. &gt; The main argument for 0-based indexing comes from mathematics, not programming history/fashion. I disagree with Dijkstra's reasoning here (and I find it somewhat circular), but regardless I don't even think it applies to a language like Lua. His arguments are as follows, paraphrased: &gt; a) and b) have the advantage that the difference between the bounds as mentioned equals the length of the subsequence This is nice I guess, but not a particularly huge deal. Most of the time loops run from 0 to some N, so the length is obviously N. If loops run from 1 to N, you can still tell how long the sequence is: N. It's right there in the upper bound, no math required. This is not a particularly moving point. &gt; There is a smallest natural number. Exclusion of the lower bound —as in b) and d)— forces for a subsequence starting at the smallest natural number the lower bound as mentioned into the realm of the unnatural numbers So starting with the assumption that we're going to be numbering from the smallest number, it makes sense to choose convention (a) because then we don't have to do something silly like say -1 &lt; i ≤ 10 to go from 0 to 10. But this is an argument for using a 0 index, this is an argument about which convention to use to talk about ranges and he's started with the assumption of 0 indexing. &gt; Adhering to convention a) yields, when starting with subscript 1, the subscript range 1 ≤ i &lt; N+1; starting with 0, however, gives the nicer range 0 ≤ i &lt; N. So he chooses the convention he likes by assuming we're starting with 0 based indexing, and then points out that when you use that convention on non-zero based indexing, it doesn't work so well. The obvious reply here is that if you're going to change your indexing, choose your convention to match! His argument is circular. He chose the notation he did because he assumed the outcome. In C, it would be common to write `for (i = 0; i &lt; n; ++i)`. This is a good convention *for C* because C uses offsets and because C doesn't have higher level looping constructs. E.g. in C++ I would be more likely to write `for (auto&amp; foo : foos)` which eliminates the need for even thinking about indexes all together. Lua is similar. In most cases you're better off using `ipairs` or `pairs` to loop over something, and in those cases you don't need to think about indexes. And in fact, nothing in Lua stops you from using index 0 if you want to, but there's no point most of the time.
I started learning Lua a few years back but I stopped, so I'm still not familiar with a lot of the terminology and functions. So that being said, how do I actually do what you've suggested? *(sorry to be a pain, and thank you for helping out!)*
From looking at the algorithm description (http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker) I'd say it SHOULD generate cul-de-sacs. Why do you think it should not?
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 3. [**Recursive backtracker**](https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker) of article [**Maze generation algorithm**](https://en.wikipedia.org/wiki/Maze%20generation%20algorithm): [](#sfw) --- &gt; &gt;The depth-first search algorithm of maze generation is frequently implemented using [backtracking](https://en.wikipedia.org/wiki/Backtracking): &gt; &gt;* Make the initial cell the current cell and mark it as visited &gt;* While there are unvisited cells &gt; &gt;* If the current cell has any neighbours which have not been visited &gt; &gt;* Choose randomly one of the unvisited neighbours &gt;* Push the current cell to the stack &gt;* Remove the wall between the current cell and the chosen cell &gt;* Make the chosen cell the current cell and mark it as visited &gt;* Else if stack is not empty &gt; &gt;* Pop a cell from the stack &gt;* Make it the current cell &gt;* Else &gt; &gt;* Pick a random unvisited cell, make it the current cell and mark it as visited &gt; --- ^Interesting: [^List ^of ^graph ^theory ^topics](https://en.wikipedia.org/wiki/List_of_graph_theory_topics) ^| [^Maze](https://en.wikipedia.org/wiki/Maze) ^| [^Picture ^maze](https://en.wikipedia.org/wiki/Picture_maze) ^| [^Maze ^solving ^algorithm](https://en.wikipedia.org/wiki/Maze_solving_algorithm) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnxodrj) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnxodrj)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)