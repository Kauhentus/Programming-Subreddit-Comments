Yes, thanks. I was about to ask about this solution and already wrote a lengthy question when I saw your comment. I'm unsure if this change has undesired side effects.
How do you run your code from Zerobrane exactly? If you're using the local console, then this discrepancy could be explained by the fact that Zerobrane's console is actually running LuaJIT, which is a fork of lua 5.1 with some 5.2 features. And since your shell uses lua 5.3, then I assume the floats are caused by Lua 5.3 introducing two different types for numbers. There used to only be one type, "number", but 5.3 split it into "integer" and "float". 
No problem. Better investigate further and try to iron out the edge cases. As for super being used like that, it's a moonscript thing. While it is a keyword, in moonscript you can use keywords as key values in tables due to some context-aware magic.
Cool, thanks. Reddit ignores my upvotes for you, sorry
I think that in ZeroBrane's IDE the interpreter is set to the 5.3 version, but I'll check that out later. And yes, I simply press the run button, which basically starts the program from the IDE's shell. The fact is that, in theory, after the 5.3 version Lua can treat integers as integers and floats as floats, so the instruction io.write(5) should print 5, while on older Lua versions it would have print 5.0 I'm trying to take a look at what you said and I'll let you know if that's the problem. Thx
`tostring()` turns a number into a string representing that number. Nowhere does it say what format it uses, so you should make no assumptions about it. If you want to control the format, use `string.format()` instead. &gt; io.write cast a string (representing a number) to a number before writing it down? Why would it ever do that? `io.write` accepts a string in the first place and is expected to write it out as is. Type conversions in Lua only happen when the original type doesn't fit what you're trying to do, like adding two strings. &gt; One day later I found out what was the problem. There's a chunk of code where I need to take two numbers, say 4 and 2, and need to return the concatenation of them, in this case 42. The fastest way I found to do this was to use the concatenation operator ('. .'). This operator casts 4 and 2 to strings and then it concatenates them. Since I don't use the new number for arithmetic operations, but I only need to write it down on a file, I thought this would be fine. If you're only writing your concatenated number to a file, don't bother concatenating it in the first place. Just write the first one, then the second without any space in between and you get the same result. Your *multiplying by 10* approach only works when the lower number is only a single digit. &gt; `print(os.date("%w") + 1)` This is probably because os.date calls an OS method, so on a different OS you might get a different result. You'd have to check the C implementation of os.date to find out if that's what happens. Either way, as far as Lua is concerned, they are both perfectly valid.
The future of luacheck seems somewhat [uncertain](http://lua-users.org/lists/lua-l/2018-11/msg00114.html) though.
What is your threat model, i.e.: what do you define as being "safe" or "unsafe", respectively?
I know :(
`FIXEDVALUES.c = 2*FIXEDVALUES.a`
 a=5 FIXEDVALUES = { a = a, b = 3, c = a*2 }
If you define the table first you can do it: local t = {} t.a = 3 t.b = 4 t.c = 5 * t.a &amp;#x200B;
Have you tried wxLua (wxWidgets) that comes bundled with ZeroBrane Studio, which ZeroBrane Studio itself is made with? For some reason the main website for wxLua hasn't been updated in years, but wxLua is under active development with support for wxWidgets 3.1.1 (the current release for wxWidgets is 3.1.2).
I really like this concept, only I think it's very limited. Also what are you doing to sandbox functions? I created a couple of trivial "while true do .. end" and it errored out, I tried a infinite string concat also errored. Essentially you need to limit heap and cpu count, not just timeout, to get a good consistent experience for users. Also $1 for 50k is really quite expensive for this sort of thing.
Thank you for your feedback. Any details on what you feel is the main limitation? You want me to solve the halting problem? How would I catch infinite loops or other shenanigans.. yes I could limit CPU cycles, but I don't see how that's an improvement, not just a new limitation. Also, your code hanging in an infinite loop does not influence other user's user experience, nor their function's performance. Sandboxing is not 'making sure users don't execute dumb stuff' I'm making sure you can't mess with any other users data, or access the environment in any unwanted ways. As for the price, obviously the smallest package will not have the best value for money. And if you are likely to exceed 50k/month, then you're likely not my main target audience.
One of the early uses of aws lamba's was image resizing, because their envrinment provided that functionality. Sure one can do some stuff with a key/value store, but that's not very compelling imo. &gt; Also, your code hanging in an infinite loop does not influence other user's user experience, nor their function's performance. Load test it and see :)
I'm on a train right now, but I'll be sure to do that once I get to a good connection. If you think I'm looking to replace or compete with AWS lambda, you haven't understood a thing about this project
I'm on a train right now, but I'll be sure to do that once I get to a good connection. If you think I'm looking to replace or compete with AWS lambda, you haven't understood a thing about this project
Unsafe: segfault, exit the program, execute shell commands, print to the screen Not worried: Stalling the program indefinitely I saw something on the wiki to allow for timeouts but it’s not a big deal Safe: changing the behavior of strings (the lua_State is one-time-use)
Cloud Functions can start multiple function instances to scale up to meet the current load. These instances run in parallel, which results in having more than one parallel function execution. However, each function instance handles only one concurrent request at a time. This means while your code is processing one request, there is no possibility of a second request being routed to the same function instance, and the original request can use the full amount of resources (CPU and memory) that you requested. Hope that clears up some of your confusion
Well yeah that's the point, an 8 core machine can handle 8 concurrent functions, mine or others. Busy waiting for 30 sec timeout will saturate those cores quickly. It doesn't take much load (req/sec). The response headers showed nginx, I guess you're using openresty. You seem very defensive, sorry if I've upset your apple cart.
It's running on Google cloud platform my dude
Yea I am defensive, you are making some very uneducated guesses and unfunded assumptions. I read your [medium article](https://medium.com/@m.taylor/zero-to-mvp-thirty-minutes-at-a-time-d4661446e081#.m9dea8911), it seem like you had a very similar idea? Mind to share your version?
Well that's good I guess? So if you get a lot of users then you just plan to pay more to GCP? I guess you'd plan to spin up more instances, while users hitting the current instances get timeouts? You can mitigate this with rate limiting obviously, but even then for any popular service, some particular vm is going to have bad actors. This is the reason why shared hosting isn't a thing anymore.
I'm not renting instances. I'm buying invocations. Read up on google cloud functions. You don't run them on an actual box, and you don't spin up any instances manually.
I tend to think of the glue vs. the main logic as the other way around. C is tricky enough to get just right that I try to write as thin a layer of C as I can, and then I do the main logic in LuaJIT. So the C glues my main program to some hardware or OS calls, for example talking to a serial port or calling out to glob(3).
It all comes down to Little's Law[1]. Wether you're paying google or running your own boxes. [1] https://en.wikipedia.org/wiki/Little%27s_law
I'm sorry about that, I see that was 3 years ago. Probably ahead of it's time. Don't get discouraged.
Thanks, you as well, like I said I like this concept. Contact me by pm if you'd like to chat more off this thread.
Yeah - there's no way to reference other items in a table constructor. There are other workarounds in this thread - it's a little annoying, I know.
Thanks for the heads-up. I've tried wxLua several times over the years but without success. I'll give it another go and hopefully this will be the time I'm able to figure it out.
Is it to draw musical notation/a pretty customised interface or a GUI to make command line stuff easier for more people?
It's not so much about logic as it's about efficiency. Take [`numpy`](https://github.com/numpy/numpy/tree/master/numpy), for example. You may have a really tricky logic in your python program, but the most time-consuming operations will still be matrix manipulations. This it why all the heavy lifting is done it [`C`](https://github.com/numpy/numpy/tree/master/numpy/core/src).
BLAS is a rather special case don't you think of being both very expensive to compute and perfectly understood. I'm not sure that's such a common thing. In any case, there is a significant performance difference between python and LuaJIT in general performance, so more often than not, one does not need to reach down to C when writing general algorithms in LuaJIT.
&gt; so more often than not, one does not need to reach down to C when writing general algorithms in LuaJIT But sometimes you just don't want to reinvent bicycle and to take something well-tested.
I think you're still missing the point about where I draw the line between application vs. supporting library.
yep, this is going nowhere
local Num= Thing:new() function Thing:s() return s(self,'aNum') end Did you mean to declare Num.s here? Looks like Num.s remains undefined.
That is expected behavior. This here: local Object = {} function Object:something(param1) end is fully equivalent to: local Object = {} function Object.something(self, param1) end and also equivalent to: local Object = { something = function(self, param1) end } the point is, any function you declare using object:something or object.something is just a normal field in the table, like any other value (number, string etc) but when you call tostring(object), Lua doesn't look for a __tostring function in the fields of the object. i.e. defining an object.__tostring function won't do anything. Lua looks for a __tostring function in the Metatable of the "object" variable. This metatable is only set by calling setmetatable(object, metatable)
I'd say it's mainly a gui to make command line stuff easier. My project is built from a bunch of different programs and you call whichever program you want in order to generate a particular piece of music or art. So instead of calling each program and passing various command line arguments I'd like to have a gui that allows the user to choose the piece they want to generate and then all the options available with that program. All the music, sheet music, art, etc, is generated by external programs called from within those individual programs. Eventually it's all going to be online but the online version will probably have to be throttled in various ways to not kill the server so it will be the download version that has the most power. 
There is Lua Rocks ([https://luarocks.org/](https://luarocks.org/)), which works as a Lua package manager, but I haven't used it personally.
Check LuaRocks, it is a package manager. If you want alternatives, python is a better suited option for that http and html stuff.
&gt; but I haven't used it personally I have, in fact, I use it all the time. It's very nice to use, and with some minor adjustments you can easily run different versions alongside each other.
Congrats on starting Lua programming! I hope you enjoy it as much as I do :) First, I have a few style suggestions. You're missing indents in a few places (like `concat_str`). I'd suggest you use an autoformatter, but Lua formatters seem hard to come by. I [wrote one myself](https://github.com/CurtisFenner/luafmt) since I wasn't happy with complicated non-Lua solutions. You probably shouldn't use `string` as a variable name (like in `concat_str`) because it's also a library name. Actually, `concat_str` already exists in the Lua standard library! [It's called `table.concat`](https://www.lua.org/manual/5.1/manual.html#pdf-table.concat). I generally like using `:lower()` instead of `string.lower` and `:find()` instead of `string.find`. It's usually much easier to read and it's a bit less typing. You can use character classes to make your `:gsub`s briefer: text = text:gsub("[%s_%-]+", ".") ...being careful that `-` is a special character that makes a range in character classes, so it either needs to be escape or be the first/last character in the set. The code in `get_initials` is doing some things a bit weird. ` if initial then` is always going to proceed, because `""` is truthy in Lua. A much simpler way to write `get_initials` uses `string.gmatch`: function get_initials(text) local initials = {} for word in text:gsub("%u", " %1"):gsub("[%s-_]+", "."):gmatch("[^.]+") do table.insert(initials, word:sub(1, 1):lower()) end return initials end `:gmatch("[^.]+")` will hit each substring of one-or-more-non-`.`-characters. That way you know that every `word` has at least one character!
Gosh, it took me hours to realize this was the reason my code wasn't behaving the way it seems to should've been doing :S
Put simply, you can use them to manipulate the behavior of tables. This includes all sorts of things - like what happens when a key is accessed, what happens when it's called as aa function, etc. They're often used to simulate classes / inheritance using the __index property.
so, using metatables i could make function that does something when i press a key?
[Lua HTTP](https://daurnimator.github.io/lua-http/0.3/) is an easier solution for that stuff. Just use `luarocks install http`
No. When I said key, I was referring to the keys of a table. Ex: `tbl.key`.
Oh. Anyway, thanks for explaining! Ill be sure to experiment with them tomorrow. 
Thank you @orig\_ardra. Excellent advice. I didn't realize the simplicity of the delegation model. So here's a snip of the updated code (and for all the changes and a fully worked example, see [https://gist.github.com/timm/9fe74517e000806e979603ad4477464c](https://gist.github.com/timm/9fe74517e000806e979603ad4477464c)) \`\`\`lua local oids = 0 local function id() oids = oids+1; return oids end &amp;#x200B; local Object={} &amp;#x200B; function Object:new() local o = {} self.\_\_index = self setmetatable(o, self) o:init() return o end &amp;#x200B; function Object:xtras() local mt = getmetatable(self) mt.\_\_sub = self.sub mt.\_\_add = self.add mt.\_\_tostring = self.str end &amp;#x200B; function Object:init() self.oid = id() self:xtras() end &amp;#x200B; function Object:str() return str(self) end function Object:add() assert(false,"missing method") end function Object:sub() assert(false,"missing method") end function Object:ako(x) return getmetatable(self) == x end \`\`\` &amp;#x200B;
Metatables are useful for extending the behavior of built-in Lua operators. For example, if you have a custom datatype for arbitrary-precision integets, you could use the `__add` and `__sub` metamethods it is possible to extend to extend the behavior of `+` and `-` to also work with your data type. Another example, if you define a data type in C and expose it to Lua as an userdata, you can use the `__index` metamethod to allow you to call methods on it with a similar syntax to what would be possible if it were a Lua table instead. (One example of this are the file handles returned by io.open)
Thanks a lot for the detailed answer. You've covered everything :). Now [it looks much better](https://repl.it/@crul/FuzzyTestSearchImproved). &amp;nbsp; The lua pattern-matching is difficult; it looks like regexp... but nope, ~~Chuk Testa~~. This `string` variable and the overcomplicated split (`get_initials`) came from [where I found the "split string" example in which I based my code](http://www.wellho.net/resources/ex.php4?item=u105/spjo). My first attemp was to replicate this python code in lua: text.split(".").map(lambda word: word[0].lower()) Just for didactic purpose... is there a way to implement like that? (more thanks) I was pretty sure I tried `table.concat` and I thought it wasn't in v5.2 but... I was wrong, it works :). &amp;nbsp; &gt; I hope you enjoy it as much as I do :) Yeah, it's always fun to dive into a new language.
No problem, always glad to help ;)
What image file formats? What do you mean "only libraries supported"? You can't you `require` external libs? It's gonna be difficult If you can't use libraries.
You probably need to tell us how you want run your program, not the medium where the images are stored (that's ininfluential unless you want to program some device like a nodemcu)
[http://lua-users.org/wiki/CompressionAndArchiving](http://lua-users.org/wiki/CompressionAndArchiving)
Hey, I want to compress JPEG images. The SD card I want it to work on has limited libraries.
Hey, I want the script to be executed everytime a photo is clicked and stored on the SD card (file is created). I mentioned the medium because I want it to be executed on the SD card itself.
&gt; I want to compress JPEG images You can't code that yourself, you'll need a library or external program (e.g. ImageMagick) to do that. There is no pure Lua library for loading and saving jpg files AFAIK. I know about [this one](https://luapower.com/libjpeg), but it requires LuaJIT... For anyone interested: [specifications](https://flashair-developers.com/en/documents/api/lua/) of the Lua API this SD card provides.
You'll need a filesystem watcher program that can run lua scripts - lua can't do this on its own. You could build a program that's running in the background, using something like inotify, fsevents, or whatever the windows equivalent is. Here is inotify for lua: https://github.com/hoelzro/linotify . have that program listen for file created events on your SD card's mount point, and do a resize in response. Or you could look for a prebuilt "filesystem watcher" for your OS and use that. Or you could just use a photo library management program.
&gt;You can't code that yourself Well, it's not that they \*can't\*, but it'd be quite a lot of work ;)
I guess the most simple way to achieve it is to is.execute something like ImageMagick or a library you can interface with using ffi, to make it completely automatic on Linux I would use the inotify api or, again, a third party program like entr. I don’t know if windows has something similar. 
Sure. But I doubt that OP has the skillset to actually implement it, based on the question he's asked.
Lua unfortunately doesn't have any kind of `map` function built in, and the closest thing to splitting a string is iterating using `string.gmatch`, so I don't think you can get much closer than for word in text:gmatch("[^.]+") do table.insert(out, word:sub(1, 1):lower()) end 
Even if you did... does an SD card even have enough compute power and memory to resize an image? Maybe.
I wonder if it might be easier to call an external webservice that can do the resizing. It looks like you can make HTTP requests (https://flashair-developers.com/en/documents/api/lua/#request) so it'd easy enough to spin of, for example, a Lambda on AWS to resize it and download the result.
Perfect, just wanted to check I'm not missing something too obvious. Thanks!
Why do you want it to run on the SD card itself instead of, say, running a script on the machine which the SD card is plugged into that does the resizing? I'd be very, very surprised if the processor in those cards has enough power to resize JPG, especially in an interpreted language like Lua.
To rule out the stuff you've listed as "unsafe", you're mostly set with locking your user out of os.execute(), os.exit() and taking away the file descriptors for io.stdout and io.stderr. As for memory leaks and segfaults, the Lua VM should cover this already. You will probably want to keep your users from loading non-Lua code (modules).
You'll need more details, like what program is running these lua scripts - like how did you figure out what libraries are available? From there people might be able to figure out how to add in new libraries to whatever environment you're using.
This question is much more about Robox than it is about the Lua language. I suggest asking at r/robloxgamedev/
Hmm. That's one step closer to [going full serpent.](https://github.com/pkulchenko/serpent/blob/master/src/serpent.lua) Never go full serpent dan!
[https://olivinelabs.com/busted/#spies-mocks-stubs](https://olivinelabs.com/busted/#spies-mocks-stubs) ?
the primary way to pass values back and forth between a coroutine and its caller is by using the return values and arguments of `coroutine.resume` and `coroutine.yield`. for instance: `local thread = coroutine.create(function( foo, bar) local baz = coroutine.yield(bar, foo) return baz, foo, bar end) a, b = coroutine.resume(thread, "hello", "world") print(a, b) -- will print "world" and "hello" c = coroutine.resume(thread, "how are you?") print(c) -- will print "how are you?"`
There are some libraries that do this sort of thing. Penlight is one: https://github.com/stevedonovan/Penlight/blob/master/README.md
Part of the Lua philosophy seems to be its batteries-not-included nature. This has two benefits: First, because there's so little, you can put a lot of scrutiny into the design of every piece. When you add more stuff, keeping everything consistent and "perfect" gets much harder. Second, knowing the "entirety" of Lua is fairly easy. I certainly don't know every single detail, but I can keep in my head something like 90% of Lua's standard library instead of, say, 1% of Java's. Applying to this case, your `string.starts` function doesn't work with Lua patterns, unlike all of the other `string` functions like `match`, `find`, and `gmatch`! In that case, you probably want a flag that controls whether or not it's searching "plain" or with patterns, at which point you have basically just have a wrapper around `string.find`. In fact, because Lua already has `str:find("prefix") == 1` and `str:match("^prefixpattern")`, why would you make your reader try to figure out what `string.starts` refers to? There's not really any functions I find myself reaching for over and over that are (1) large enough for me to keep save somewhere and (2) general enough that they truly don't need tweaking between projects. The only thing I find myself reliably repeating between projects is something to yell at me when I use global variables. setmetatable(_G, { __index = function(_, key) error("read of global key `" .. tostring(key) .. "`", 2) end, __newindex = function(_, key) error("write to global key `" .. tostring(key) .. "`", 2) end, })
I would recommend against adding functions to global tables like `string`. If more than one module or library does that they may end up stepping on each other's shoes.
&gt; There's not really any functions I find myself reaching for over and over that are (1) large enough for me to keep save somewhere and (2) general enough that they truly don't need tweaking between projects. 1) Size doesn't matter, rewriting the same functions over and over is pointlessly tedious. 2) Lua's a pretty good language for functional programming style, which relies heavily on functions that are general enough that they don't need tweaking. Higher-order functions like `map`, `filter`, and `reduce` can *always* be reused. Unfortunately, Lua doesn't provide any of the expected basic FP functions on its own, so you have to implement them yourself (or copy code from someone that did). That's how I ended up with [my own small collection of FP staples](https://repl.it/@Ilazki/Lua-Fun) that I reuse whenever I use Lua for something. 
Again and again I find myself writing a series of functions that all essentially follow the same pattern: local function map(f, a, ...) if a then return f(a), map(f, ...) end end local function inject(f, a, b, ...) if b then return map(f, f(a,b), ...) else return a end end And the list goes on. Then there's less frequent but also useful things like unpacking a table (in Lua 5.1) or looping over certain constructs. Using both Lua and Ruby, I have to say though, there's not much that I really miss when using Lua, even though it has so much less builtin functionality.
[https://github.com/incinirate/luascore](https://github.com/incinirate/luascore) is a library that I find myself using in many of my projects, it is basically a port of Lodash to Lua, it doesn't have everything in lodash, but most of the most common functions.
Coroutines facilitate an execution flow that can be interrupted (yield()) and resumed. It does not sound as if this is the primary problem you want to solve. Also note that there is no delay() function in Lua that would delay the execution of a single coroutine. Coroutines also do not "execute in parallel". It's parallel execution states, but not parallel execution. That said, there's either a piece of information missing (like some API of Mach 4/wxWidgets that is already designed for this type of problem) or you're not specific enough in your problem description ("getting a short delay added to the code to wait for the response without blocking other functions"). Coroutines \*do\* block the execution of other coroutines. There is only one of them executing at any given time. When it yields or returns - and only then! - another coroutine (or the default thread) will continue its execution.
Modulo is to find the remainder after divison. Eg * 6 % 3 = 0 * 7 % 3 = 1 * 8 % 3 = 2 * 9 % 3 = 0 ... Exponent is multiplying a number by itself Eg. 3^2 = 3*3 = 9 3^-1 = 1/3 3^4 = 3*3*3*3 = 81 Logarithms are the opposite of exponents, eg. log base 3 of 81 = 4.
So an exponent is basically finding the square of a number. So if I were to do 4 % 3 id get 0.3333333 or something. 
Just wanna ask on what would you use Iching for ? In a music engine ? Thanks !
Ha! The short answer is that I have no idea why I felt the need to add the I Ching, runes, tarot cards and a D&amp;D character generator to a music engine. Or even the Mondrian painting algorithms, for that matter. The longer answer is that adding other art media just seems like a good fit. With the music I was already generating graphical scores which basically look like paintings so it was a small leap. I might have to change the name of the project. But still, as for the others, I don't know, it just felt like something that needed to be done. Maybe because of the strong visual elements? I need to rework my elevator pitch but I'm not sure how. A much, much longer answer that only involves the I Ching is that the composer who is the ultimate inspiration for this is John Cage. From 1950 on, he used the I Ching as a random number generator for every piece he wrote until he died in in the early '90s. At some point in the '70s he got someone to write a program to simulate I Ching tosses in order to save himself tons of work. So it seems fitting to include the I Ching somewhere in this whole thing. Anyway, Art, I guess. 
**Wrong!** Okay, sorry for being so dramatic about it, but I kinda feel like it's necessary here. Modulo is NOT the remainder, that's a very common programming misconception. [Here](https://rob.conery.io/2018/08/21/mod-and-remainder-are-not-the-same/)'s a good explanation of that difference.
The modulo operator is often considered the same as the remainder of a division. And for positive integers that's actually true. In reality though, it's more accurate to imagine it like this: Say we have 20 % 4 Now, imagine we take 0 and add one 20 times, so like counting to 20: 1, 2, 3, 4, 5, 6, etc. But instead of just counting up to 20, every time we reach 4, we start back at 0, so: 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, etc... The number we'd end up at, which coincides with the remainder of 20/4, would be the modulo. Since 4 * 5 = 20, we can deduce that the modulo is 0. For another example: 9 % 4 would be 1, because if we counted starting at 1 we'd get: 1, 2, 3, 0, 1, 2, 3, 0, **1** Or, if we divided 9 by 4, we'd find that 4 fits twice into 8, and then we're left with 1 as a remainder. Where's the difference though? Let's think about negative numbers. -3 % 2 for example: how many times does 2 fit into -3? let's divide! -3 divided by two is -1.5, so rounding down we get -1 and a remainder of -1 Going with the modulo, however, we'd essentially be counting backwards from 0; And when dealing with modulo 2, we essentially have the numbers 0 and 1 repeating forever, so the next smallest number from 0 is actually 1. So, counting down 3 times from 0 we get: 1, 0, 1 so the modulo is actually 1, not -1. It's not really necessary to fully understand or remember the difference, just know that there *is* a difference that becomes relevant when you have negative numbers, so if you ever find yourself doing modulos with negative integers, you'll hopefully remember and just look it up then.
Thanks for the informative reply. I'm not the best at anything mathematical so this really helps. 
Good point. I've never had a reason to use modulus on negative numbers.
It will concatenate whatever ... is with whatever ... is. 
Should it? What is \`...\` though? xD
If you want people to help you with code, you should make sure the code is formatted nicely. The first change you should make is not use variables for all the `a1`...`a19`s. If you find yourself numbering your variables, you probably want a single list instead. The fundamental thing that you want to do here is shuffle the numbers 1 to 21, then you take some number of them depending on `playerInsight`. -- Make a list 1, 2, 3, ..., 21. local as = {} for i = 1, 21 do as[i] = i end -- Shuffle the list. for i = 1, #as do local r = math.random(i, #as) as[i], as[r] = as[r], as[i] end -- Get rid of the excess. while #as &gt; neededAmountOfAs do table.remove(as) end where `neededAmountOfAs` is based on `playerInsight`. I'm not sure what exactly you need here and I'm not going to dig through your messily formatted post to find out. If there's no nice arithmetical pattern, you could at least use a dictionary to keep this looking tidy.
Also be aware that what `%` means exactly depends on different programming languages. Lua does the thing that you *usually* want, and uses the sign of the right hand side (ie `-3 % 2` is `1` and not `-1`). Most languages use the sign of the left hand side (and old versions of C didn't specify...).
Well if you use that exact code it will come with Compile errors.
I'm just now reading this I had lost hope of being able to run it on start up thank you I'm going to try this on my day off 
It prints `123123`. Lua executes the first string with no arguments. As such, the variadic expression evaluates to `nil`, which is falsy. Therefore, the code in the `else` block executes and assigns the function represented by the first string to the global variable `t`. Lua executes the second string, which calls the function represented by the first string with a single argument instead of no arguments. The variadic expression evaluates to `”123”`, which is truthy. Therefore, the `print` standard library function gets executed. Both variadic expressions evaluate to `”123”`, so they are concatenated to `”123123”`. The print function does add a newline, so `”123123\n”` gets flushed through standard output.
Honestly I think you'll have a hard time finding much that's Lua specific. *That said*, I have seen [this](https://www.amazon.com/Learning-Game-AI-Programming-Lua-ebook/dp/B00QFBNXKM/)
That actually looks quite helpful! What aspect do most resources on Lua usually cover? Do you know? I am wanting to do my stuff all in Lua since its been the most fun so far... Plus I have a basis in Lua and have made Lua Scripts for other people in games before (Like World of Warcraft and GTA V)
They aren't very similar in my opinion. Lua *is* a lot like JS though. What kind of stuff specifically are you into besides Game AI? I *have* actually done a lot of scouring for resources as they can be a little hard to find, so I can probably share some.
I have a interest for Web Development, Machine Learning, A.I, Data Structuring, Game Programming/Development, and Embedded Systems for the things I can think of off the top of my mind. I obviously don't want to know all of them I just have a interest in all of them. Ones I want to know the most in order are 1. Machine Learning/A.I 2. Data Structuring 3. Web Development 4. Embedded Systems
### Machine Learning - http://torch.ch/docs/tutorials.html ### Data Structuring - https://github.com/EvandroLG/computer_science_in_lua - https://poga.github.io/lua53-notes/data_structure.html ### Web Development - http://leafo.net/guides.html - http://leafo.net/lapis/ (probably the nicest web framework for Lua that's documented in English) - https://openresty.org/en/ (lua embedded in nginx for powerful webserver) - https://openresty.org/en/using-luarocks.html (using above with luarocks) - https://httpd.apache.org/docs/trunk/mod/mod_lua.html (lua embedded in apache) - http://lua-users.org/wiki/FiltersSourcesAndSinks (if you go the luasocket route) - https://fengari.io/ (lua rewritten in js for use client side or in node) - https://github.com/zserge/lua-promises (if you're not ready for coroutines) ### Embedded - https://github.com/tylerneylon/lua_api_demo - http://www.troubleshooters.com/codecorn/lua/index.htm (I'll post the index but of note for you are the calling C from Lua and Lua from C section) - https://en.blog.nic.cz/2015/08/12/embedding-luajit-in-30-minutes-or-so/ Enjoy!
Awesome!! Thanks for that! I will for sure check these out!
Check out Torch if you’re interested in machine learning style AI (something you train offline). If you’re interested in real-time AI for video games, look up decision trees (used in Halo series) and goal oriented action planning (used in F.E.A.R., etc.)
I'm not familiar with the Logitech scripting environment, but based on what I can see from your example the following may work: \`\`\` local buttonHeld = false &amp;#x200B; function OnEvent(event, arg) if (event == "PROFILE\_ACTIVATED") then EnablePrimaryMouseButtonEvents(true) elseif (event == "MOUSE\_BUTTON\_PRESSED" and (arg == 1 or arg == 2)) then if (buttonHeld) then PlayMacro("DPI Down") end buttonHeld = not buttonHeld elseif (event == "MOUSE\_BUTTON\_RELEASED" and (arg == 1 or arg == 2)) then if (buttonHeld) then buttonHeld = false else PlayMacro("DPI Up") end end end \`\`\` &amp;#x200B; Untested, though. The idea is that it keeps track of the "action state": if one of the buttons is pressed, it sets the \`buttonHeld\` state to true\`, and if one is released it sets the state to \`false\`. If the state is already \`true\` when a button is pressed, this must mean that both are being held down, and so it plays the chosen macro. If a button is released and the state is false, this can only mean that the hold-down macro has been played (and thus both mouse buttons were previously held down) and one of the buttons has been released, so it plays the other macro you chose.
this looks like the API doc www.wolfpack.pe.kr/attachment/1180489860.pdf there is a function to get the state of a mouse button GetMKeyState() that apparently returns a table that you can use to check that both buttons are pressed 
I've written an article that might be of interest, remind me to post it here in an hour or so when I'm not on my phone.
Copy, will do.
Thank you so much. I did not expect a full code to be posted, but it worked very well. I appreciate the explanation as it helps me learn. :D &amp;#x200B; I hate to ask anything more of you personally, but I'm now trying to make a similar but simpler script work in a similar way. I re-edited the topic to include it.I'm basically trying to do the same thing but using "ismousebuttonpressed" instead of the events. Would you happen to have any ideas to make it work properly?
Thank you very much! Will be going through all of this and trying a few things out.
If the goal is to have this macro run continuously from the point of the button being pressed until the point it is released, I don't believe you can. You would need some code block of your own definition to be periodically executed to achieve this, and whilst I have no experience with the Logitech API a short search leads me to believe that Logitech does not provide a "polling"-type function within which you could house this functionality. As you noted, by looping within the `OnEvent` you are holding up the scripting environment. I believe the following is also relevant: https://community.logitech.com/s/question/0D55A000071LSlvSAG/mousewheelup-lua-script
Oh wow, that's a shame. Didn't think something as simple as that would be problematic. Is there a way I can make this code similar to the original posted? In that, a different macro is run after another press. as I can do the same thing with the DPI Up and Down rather than shift.
Interesting. So judging by that article, % is indeed the remainder operator in Lua, not the modulo operator. 
Btw, your function can be shortened by using the `:` separator to act on the string object directly.... stringA:sub(1, stringB:len()) == stringB You need to be careful with other string functions suggested that operate with patterns, for example: stringA:find(stringB) … needs to have two extra arguments to make it search for plain text. For others you need to escape the reserved pattern characters out of the string first. So a wrapper around this escape sequence gets used a fair bit... function escapeMagic(str) return str:gsub("[%^%(%)%%%.%[%]%*%+%-%?%$]","%%%1") end
There are a few Roblox dev community, the Roblox engine uses lua. I suggest you join hidden developers, invite is “hd”.
The freenode channel is pretty active last I checked, altho the #love one on OFTC has more folks in it.
refer to OP, I said "standalone Lua"
Hi, sorry. I got a ridiculous fever over the weekend. Here's the thing: https://medium.com/@Srekel/developing-vehicle-ai-for-stingray-part-1-211c1bdbe9ad It's about vehicle AI and how I set that up in Lua. The interfacing to the engine (Stingray) is pretty minimal with regards to the AI code IIRC, so it should be transferable to something else. You could use this to for example train a learning AI to drive without hitting obstacles or going through a race track quickly for example. I thought about doing that but I've shelved the project for now. I can put up the code on Github if you want. I'm not sure it's quite what you're after but thought it might be of interest.
This is an awesome idea, I've joined and suggest others do too! I have also been on #lua on Freenode, but it goes from being completely, absolutely dead to sudden bursts of activity. YMMV!
No, it's not. Try this code for example: &gt; for i=-3,3 do print(i, i % 3) end You will get the following result -3 0 -2 1 -1 2 0 0 1 1 2 2 3 0 The important thing here is that `n % m ~= -(-n % m)`; instead, `-1 % m == m-1`, which is how the modulo operator works, not the remainder. If we divided -1 by 3, we'd get 0 and a remainder of, well, -1 (`-1 = 0*3 + -1` checks out). Certainly not 2 (`-1 = 0*3 + 2` doesn't make sense).
Aaaah, thanks. I understand now. I misunderstood/misread the article I guess. It's easier to understand when the dividend is negative and the divisor is positive than the other way around!
Remainder is just a fancier word for leftover, yes. Exponentiation and squaring aren't the same thing though. Squaring is a particular case of exponentiation, where the exponent is two. Squaring is probably the most common form of exponentiation. We square the sides of a square to get its area (Which is why we say that we "square" a number), it also happens a lot in statistics, in physics, etc.
This is nice. Maybe you should also post the link (and ask if there's an alternative) on the mailing list. I assume most people there won't have much interest in joining a discord server, as the mailing list probably already provides them all they need, but with all of it being archived on the lua-users website, some people may find it through google :)
Yeah no thats exactly what I was looking for. Examples: [AI Learns Pool](https://youtu.be/sx6eoXg-19k) [AI Learns Hill Climb](https://youtu.be/SO7FFteErWs) And then of course there are other things... like what you sent and also even AI in terms of in-game AI for single player games.
April fools??
..? Like u/FerretSummoner said... Is this a *April Fools* joke? Or are you actually seriously wanting help? Also if its not there is a more suitable sub for this. r/robloxgamedev/. I would help you out since I do know Lua however... I don't know anything Roblox related. 
Thanks for the sub! Also, Roblox studio uses Lua you should check it out when ur free :D Ima upvote some of ur post for telling me the sub 
I'm not entirely sure what you mean, but I think this might be what you're looking for: https://studio.zerobrane.com/
Thank you kind sir
To download the Lua binaries, head to [https://www.lua.org/download.html](https://www.lua.org/download.html). &amp;#x200B; They have pre-built binaries and source to build from with their respective Makefiles included for several different versions.
Love2D 
Well hey thanks for that :) I will check it out on YouTube first (To know the basics of it) then check it out my self.
[Love2D](https://love2d.org/) is your best bet.
Löve (Love2d) as others have pointed out, and of course, [ZeroBrane](https://studio.zerobrane.com/)
Almost. The table.pack version also adds an "n" field in the table, with the number of arguments passed. So `table.pack(10, 20, 30)` returns `{10,20,30, n=3}`. This can make a difference if you have some of the elements in the `...` are nils, and specially if the final elements of the `...` are nils. In these cases you need to use the `.n` field to be able to accurately iterate over the elements, as `#` might stop in one of the "holes".
No. The explicit `table.pack` function includes an `n` value that tracks how many values were packed, including `nil` values. There also seem to be implementation specific differences based on the following results: local tests = { table.pack(nil, nil, 3), {n = 3, nil, nil, 3}, function(...) return table.pack(...) end, {n = 3, [3] = 3}, function(...) return {n = select('#', ...), ...} end, {nil, nil, 3}, function(...) return {...} end, } for i, v in ipairs(tests) do if type(v) == 'function' then v = v(nil, nil, 3) end print(i, #v, v.n) end -- LuaJIT: Lua 5.3: -- 1: # = 3, n = 3 # = 3, n = 3 -- 2: # = 3, n = 3 # = 3, n = 3 -- 3: # = 3, n = 3 # = 3, n = 3 -- 4: # = 0, n = 3 # = 0, n = 3 -- 5: # = 0, n = 3 # = 3, n = 3 -- 6: # = 3, n = nil # = 3, n = nil -- 7: # = 0, n = nil # = 3, n = nil
Not technically a standalone server, but we do have a [verified open-source](https://discordapp.com/open-source) server for the [Luvit.io](https://luvit.io/) community at https://discord.gg/luvit
in conclusion: table.pack(...) == {n=select('#',...), ...}
Those differences make total sense. `#` for arrays is only defined when there's no nil-values in between; if there are, then it's undefined behavior.
They are similar, but `table.pack` produces an `n` field in the resultant table, containing the number of arguments passed into it. It is important to note that this value has significance, as it is not necessarily the same as the length of the resultant table. This is because the length operator is only meaningfully defined by Lua for sequential tables, and providing `nil` parameters to `table.pack` will cause the returned table to have holes (so, non-sequential). Let's say you run `table.pack{1, nil, nil, 4}`. The following output would be produced: ``` { [1] = 1, [4] = 4, n = 4 } ``` You could then use the `n` field with `table.unpack` to get the desired output. An example of why you shouldn't rely on the length operator for non-sequential tables is as follows. In Lua 5.3.5's standard implementation, if you run the `print(table.unpack{1, nil, nil, 4})`, you will get an output of `1 nil nil 4`. This is because the length of the table passed into `table.unpack` is 4: you can see this for yourself by running `#{1, nil, nil, 4}`. However, if you were to construct the table in parts, you'll find that the output is different: ``` local t = { 1 } t[4] = 4 print(table.unpack(t)) ``` In this example, you should get an output of `1`. Same table content, different table length, just because they were constructed differently. So, you need to be able to tell `table.unpack` exactly what range to work in if using a non-sequential table. This is an example of why the `n` field is useful: if you don't have it, the effective "real length" is lost in the packing process. For LuaJIT, I've not had a look at its implementation of the length operator, but testing my "construct in parts" example for the table produces a length of 4 using LuaJIT 2.1.0-beta3, so the behaviour is different to the standard implementation.
You'd think that, but for some reason, these give different results: a = function(...) return {n = select('#', ...), ...} end b = function(...) return table.pack(...) end print(#a(nil, nil, 1)) -- 0 print(#b(nil, nil, 1)) -- 3
Oh. I thought that there was some shenanigans related to how the `n` value is treated, as it is/was with `table.getn`.
Adding a field called `n` doesn't change what the `#` operator returns - the point is that you can iterate from `a[1]` to `a[a.n]`. (In old versions of Lua, `table.getn` will use the `n` field if it's present, but the `#` operator doesn't.)
Yeah, I learned this today. But then I checked `table.getn`, which is deprecated, but it is available in LuaJIT and it appears to have the same problem. local a = function(...) return {n = select('#', ...), ...} end local b = function(...) return table.pack(...) end a = a(nil, nil, 3) b = b(nil, nil, 3) print(#a) -- 0 print(#b) -- 3 print(table.getn(a)) -- 0 print(table.getn(b)) -- 3 print(a.n) -- 3 print(b.n) -- 3
I believe that `table.getn` is now just a synonym for `#`. You could try your experiment in Lua 5.0.
Corrected my answer :D
Haha, nice.
Whilst these two tables are identical, the length operator can act differently on two identical tables if they are non-sequential, as the length of a non-sequential table is not defined in Lua.
Actually, the two versions really are equivalent. As abigail mentioned, the `#` operator does not care about the `.n` field. You need to use `for i=1,t.n` instead of `for i=1,#t` 
Psst. If löve2D isn't working for you. Try tic-80, has it's quirks but it's amazing for retro games.
ZeroBrane Studio is the tool you need. It comes with Lua built in to it so you don't need anything else to start programming and executing pure Lua code. You can use it with games frameworks like Gideros or Love2D too.
Thanks for the replies. I'm starting with love2d
in Lua 5.3 a better option would be &amp;#x200B; local function pack(...) local num = select('#',...) return setmetatable({...}, {\_\_len=function() return num end}) end
I think it isn't UB, #tab simply returns an n so tab[n] ~= nil and tab[n+1] == nil, or zero if not found. So if you have a table with holes, it can return an index next to any hole, but above assertion should still hold. 
That's true, I guess. Still, it's not defined what exactly is returned, so it still depends on the implementation. I'd say it's semi-defined behavior? xD
There’s a few Pico-8 discord’s out there. But only really useful if you code in Pico-8 or Löve2d
I’d rather use [Codea](http://codea.io)
Is Codea Free? or even open source? Oh ok. 👍
Just tried it. Really neat!
No to both. What it is is a stellar Lua Interperter, runs full Lua programs and allows for full app compliation with minimal work. I tried NLua.Box and it was ok for a minimal Lua Interperter, and if that's what you're looking for, it should be great for your needs - I just prefer to have something that works better and I can actually do more with.
I agree with you. But I think they are not comparable. One is a product from a company, the other is a small concept made in a few hours. Is like compare Visual Studio to a Hello World application.
great video
Most of us here won't have ever used Auto Touch and won't be able to help you. Probably better off asking on /r/Jailbreak 
This doesn't work if you mutate the table afterwards, as `#` will return the new length Lua doesn't explicitly say what `#` resolves to, so different insert orders can cause different results without being an error. The spec only says that `#` will resolve to 0 if the table is empty, or some `x` where `t[x] ~= nil and t[x+1] == nil`
Metatables are what you want here. Here is a tutorial on OOP in lua. [https://www.tutorialspoint.com/lua/lua_object_oriented.htm](https://www.tutorialspoint.com/lua/lua_object_oriented.htm) 
I'd be glad to help, but can you give a better example of what you want? how about letting us see some code? 
you should not run a separate Lua instance, since different instances cannot share stack memory. Instead, load the file. It should be something like this: ` -- main.lua local args = {...} require('foo')(args) print(thing) ` then in `foo.lua`: ` -- foo.lua ` return function (bar) print(bar[1]) thing = stuff end ` 
I'd recommend something like this for loading the code ``loadfile("foo.lua")("-hello")`` If you call ``os.execute("lua ...``, you basically create a new Lua VM seperated from the Lua VM main.lua is running in. That of course means, that the global you set in foo.lua in the other VM won't be there in the main VM main.lua is running in. Another way for passing the results is the following: ``local result = loadfile("foo.lua")("-hello") print(result)`` and then in foo.lua: ``local args={...} print(args[1]) return "stuff"`` This should (didn't test it, but I'm 90% sure) output "-hello stuff"
has the bonus of only being loaded/parsed once, but doesn't look that elegant IMO :p
`math.randomseed(os.time())`?
I need random numbers assigned to each element but I don't want duplicates to occur so I am wondering what the best option is out there to do that.
Use the random number as the key in a table to track if a sheep already has a certain number. If the number range is sufficiently large enough, you'll rarely have a collision, meaning you'll rarely have to generate multiple numbers per sheep.
`adaptResolution`, `adaptOrientation`, `tap`, `getColor` and `usleep` aren't standard Lua functions. I suggest you start by telling us what you're actually writing that script for, or we won't be able to tell you much ;)
It's for Autotouch on IOS. Here is some documentation: [https://autotouch.net/server/doc/en.html#findcolorcolor-count-region](https://autotouch.net/server/doc/en.html#findcolorcolor-count-region) AdaptResolution and adaptOrientation can both be ignored &amp;#x200B; It seems to completely ignore the usleep (just a pause for 3 seconds in this case) if there is a 'then' function if that's what it's called present in the code and it jumps straight to 'end'
Are you able to print? It sounds like the color at that location is not the value you've specified. print(getColor(235.61, 411.32))
Thanks for your help on this! I tried to keep my example really simple in order to not overwhelm people. Turns out there's a devil in that detail. A bit more backstory. I have 20 or so files of the "foo" variety from my example and eventually hope to have thousands. Each one generates a different type of music (mp3) and sheet music (pdf). The vast majority of time you run each one directly to get the music and sheet music you want. Or if you want to generate several at once, you can create a lua program that os.executes them one after the other and you get all those mp3s and pdfs. I have a pretty robust command line parser so you can pass every option available via the command line and if you use `os.execute` then this is trivial. Here's an actual example I was testing: os.execute("lua mesostic.lua -c full_text song_sappho -c spine wine -n 3 -c word_rule linear -c wing_rule surrounding -c punctuation_rule yes -c bold yes -c style merce -sc") [The "-c" option is a huge cheat but provides a ton of flexibility] Anyway, I was unable to get `loadfile("mesostic.lua")("-sc -c bold yes -c spine wine")` to work how I was hoping it would because everything in the command line argument while still in a table is, apparently, all treated as one element in that table. So I think that in order to make this work, I need to split that one element (`-sc -c bold yes -c spine wine`) in such a way that my command line parser can parse it correctly. Does that make sense? And by using `loadfile` I should be able to get global variables out of the loaded file.
You are right, it wasn't the correct colour but it's still not sleeping. I forgot to put in x,y coordinates, whoops. Correct colour: 606573 not 1316886 Also, I figured out why it's not sleeping. Here is the explanation: Because if getColor(235.61, 411.32) == 606573 **then** requires '**then**' if '**then**' is called during any part of the script, it'll skip everything and go straight to 'end' as that is required if 'then is called. &amp;#x200B; Basically: I need a way to check if the colour is there, then tap it without calling 'then' ? &amp;#x200B; [https://www.reddit.com/r/autotouch/comments/4ywdv9/help\_need\_some\_help\_on\_a\_get\_color\_and\_tap\_script/](https://www.reddit.com/r/autotouch/comments/4ywdv9/help_need_some_help_on_a_get_color_and_tap_script/) apparently this guy's code works but not sure why it wouldn't for me or how would I implement it to work for me?
I think this must be the case, the usleep call is just being skipped
Thanks for your help on this. I think I did a disservice to myself by not explaining what was going on more completely. Anyway, I found a solution which you can read in my updated original post.
 &gt; if getColor(235.61, 411.32) == 606573 then &gt; &gt; requires 'then' &gt; &gt; if 'then' is called during any part of the script, it'll skip everything and go straight to 'end' as that is required if 'then is called. That's what a conditional operation does, it skips stuff based on a condition. If the inside of the `if` is not being executed, then it is because the condition was not met.
\`then\` is not a function, so it is not "called". It is a reserved word which is part of the syntax of conditional statements in Lua. &amp;#x200B; The issue you're experiencing is not due to the presence of \`then\`. Although it may be due to the conditional statement, everything looks ok to me (at a glance, and knowing nothing about the program you're using). &amp;#x200B; How are you determining if the program sleeps? Consider doing a quick test: adaptResolution(750, 1334) adaptOrientation(ORIENTATION_TYPE.PORTRAIT) tap(235.61, 411.32) local color = getColor(235.61, 411.32) local clock = os.clock() if color == 606573 then print('The color was correct!') usleep(3000000); print('The script slept for this many seconds:', os.clock() - clock) else print('The color is', tostring(color)) end If you see "The color is &lt;some number&gt;", the color number was wrong. You should instead see "The color was correct!" followed by the number of seconds the script slept, if any.
Nice, Glad I could help So basically you tried using os.execute because that splitted your command line into multiple parameters accordingly, while you'd have to do that manually when using loadfile :D One problem may be literals, so something like ``-c bold yes -c other_option "this is one element"`` your implementation (splitting the command line at every space character) will split the text behind other_option into 4 separate elements, while it's intended (and os.execute would parse it) as one element. I'm sure there are some good lua commandline parsers on the web though
&gt; One problem may be literals, so something like Yep. I ran into that problem just like you anticipated. My solution is not particularly elegant -- I'm not a good programmer. I use gsub to convert spaces to a character I know I'll never use on the command line, put that into the `loadfile` command, and then gsub that character back into spaces in time to parse it. It seems to be working. It's ugly and not particularly future-proof but for now it's ok. &gt; I'm sure there are some good lua commandline parsers on the web though I have no idea what I would be looking for or how to use one of those. Is there anything you know of that you can point me to? I'm starting a search now.
Here's a little integer hash function based random permutation generator for Lua 5.3 that requires O(1) space. It's based around [a splitmix style hash function](https://nullprogram.com/blog/2018/07/31/). The `permute()` function is intended to be used with `for .. in`: -- Generate a random permutate of 1 to LIM in O(1) function permute(lim) -- Operate on nearest power of 2 up local n = math.ceil(math.log(lim) / math.log(2)) local m = 1 &lt;&lt; n local i = 0 -- Hash function parameters local shift = n // 2 local mask = (1 &lt;&lt; n) - 1 local a = math.random(1 &lt;&lt; n) local b = math.random(1 &lt;&lt; n) | 1 local c = math.random(1 &lt;&lt; n) | 1 local d = math.random(1 &lt;&lt; n) | 1 return function() while i &lt; m do -- xorshift hash function local x = i x = (x + a) &amp; mask x = x ~ (x &gt;&gt; shift) x = (x * b) &amp; mask x = x ~ (x &gt;&gt; shift) x = (x * c) &amp; mask x = x ~ (x &gt;&gt; shift) x = (x * d) &amp; mask x = x ~ (x &gt;&gt; shift) i = i + 1 if x &gt; 0 and x &lt;= lim then return x end end end end Examples: math.randomseed(os.time()) -- Print 1 through 1000 in a random order for i in permute(1000) do print(i) end -- Visit sheep names in a random order sheep_names = {'Barry', 'Scott', 'Nigel', 'John', 'Richard'} for i in permute(#sheep_names) do name = sheep_names[i] print(name) end
I’m don’t have any real experience at all with coding, probably doesn’t help sorry that’s why I just called ‘then’ a function. As for the script you got me to try out, it presses the button and then ends. It doesn’t show any kind of alert?
Oh, there's no console that you can print to? In the thread that you linked to it looks like someone mentions a log in the upper left corner that you can print to. Do see that? If it's there, you could try: adaptResolution(750, 1334) adaptOrientation(ORIENTATION_TYPE.PORTRAIT) tap(235.61, 411.32) local color = getColor(235.61, 411.32) local clock = os.clock() if color == 606573 then log('The color was correct!') usleep(3000000); log('The script slept for this many seconds: ' .. tostring(os.clock() - clock)) else log('The color is ' .. tostring(color)) end
Forgive me, I didn’t realise that you were using log and I’m used to the alert thing whatever you want to call it. The log said: 04-09 10:04:27 The color was correct! 04-09 10:04:30 The script slept for this many seconds: 0.041886000000001 So now that the colour is correct and it sleeps for basically no time at all, how do I make it so it keeps on looking for the next box at x,y coordinates and then presses it when it sees it?
There's a strange discrepancy. The first message hits the log at 10:04:27, and the second follows at 10:04:30. That implies the sleep did in fact work and script paused for 3 seconds. However, the clock output obviously does not match this. I have a feeling this is an error on my part. I would trust the log timestamp in this case: the sleep worked. `os.clock` returns the amount of time the cpu was used to process instructions. My guess is that the `usleep` function causes the cpu to idle and so does not contribute to the cpu time. My error was due to being more familiar with Lua on Windows systems. On Windows, `os.clock` returns the **elapsed** time, which should include the three seconds of sleep. &amp;#x200B; Sorry about that. In any case, I think you're all set. You've got the correct color, and the sleep function is working.
You can simply create a table that stores which numbers have been used already. For added convenience, wrap it all up in a factory. local function random() local used = {} local function generator(...) local num = math.random(...) if used[num] then return generator(...) else used[num] = true return num end end return generator end local rnd = random() Note that this example does not add any awareness of how many random numbers are left. It will try random numbers until it finds a new one, even if there's just one left in a range of several millions or, even worse, will try infinitely even if there are *no* random numbers left at all. It's only suited for *a few* random numbers, preferably without exhausting the set completely.
When I try using this it comes up with error "attempt to index a nil value", do you know why?
No idea. What's the exact error message? Which variable is the "nil value" and on which line does it happen?
I fixed the problem now. But, it still won’t let me draw the image as its returning a function and not a number on the x and y values. I’m using Love2D.
It should tell you what line that error occurred on, so it should be possible to figure out which value is nil.
Yeah, each call to `random` returns a function, which you then call like `math.random`. Each time you call `random` you get a *new* function, which remembers only its own results and will never return the same number twice. local new_x = random() local new_y = random() some_object_A = { x = new_x(1, 10), y = new_y(1, 10) } some_object_B = { x = new_x(1, 10), y = new_y(1, 10) } This example will create two objects with guaranteed different X coordinates and different Y coordinates. Ones X may still be anothers Y though. Also, here's an example of what I mean in my original answer, in regards to exhausting the random number pool local a = random() a(2) -- May return 1 or 2 a(2) -- Returns 1 or 2, whichever the previous call did *not* return a(2) -- both 1 and 2 are used, so this will loop forever and never find a new value
It keeps freezing my program for me. Maybe because it loops infinitely?
&gt; Maybe because it loops infinitely? Probably. Again, if you exhaust your random number pool, it will just loop through attempting to find another random number. My guess is that you either 1. Try to generate more random numbers than you should or 2. don't create a new generator when you should (leading to 1.)
&gt;I've got the code to work, but, I am trying to make a button to scatter the values so the x and y are in different buttons when clicked but it freezes the whole thing. Think I'm asking for too much but it's what I need to make what I imagine to happen. I'd happily introduce you to the project I am making and will even pay commission for help on the programming side of it if you are interested.
Not sure if I got the question right, but this example is C code, not Lua. So yeah, it does use != since that's C syntax.
In lua the equivalent operator is \~=
That's C, not Lua. Two big giveaways: * It uses braces `{ .. }` for blocks rather than `begin .. end`. * It uses `/* comments */` rather than `-- comments` or `--[[ comments ]]`
Well, that solves that mystery.
Add the randomized values to a list and check if the new randomized value is already in the list ,if so skip it
People have already pointed out that this, in fact, not Lua code. So to this: &gt; More broadly, is it common for Lua dialects to provide !=? I'm working on a syntax highlighter, and we've gotten a bug report that != is not supported. The right thing to do is probably to support !=, but I'd like to understand the context better before committing to a nonstandard feature. I'm not sure how common it is, but PICO-8's Lua dialect does support `!=`. Perhaps other fantasy consoles also have similar Lua dialects. So it would probably be a nice thing to support, so that people who use your highlighter to write PICO-8 code doesn't get lots of errors in their editor for stuff that is completely legal. On the flipside, of course, is that you're falsely telling newcomers to vanilla Lua that their code is correct even if it contains `!=`, even though the runtime will tell them it's incorrect. If your highlighter can allow certain things that are illegal in regular Lua, but intelligently, then that would probably be the best solution. For example, PICO-8 files use the `.p8` file extension, not `.lua`, so you could allow it only in the proper files. Or something else (perhaps even a configuration setting, if you can't detect the dialect automatically). If you're unable to do that, I think the best would be to mark it as an error, and tell people to fork your syntax and adapt it to other dialects if they want non-standard Lua syntax to be recognized. (PICO-8 also has other stuff that's not legal Lua, like a short `if` one-liner without `then` and `end`; parsing that could probably be a bit of a pain and not worth your while.)
&gt; while (lua_next(L, t) != 0) do ಠ_ಠ &gt; while (lua_next(L, t) ~= 0) do ( ͡° ͜ʖ ͡°)
In general, we don't try to make the syntax highlighter serve as a linter. For one thing, while the user is typing, the code will often be invalid. We generally only use explicit error highlighting for things like malformed literals and unmatched close brackets. Generally, we don't want to include nonstandard features in a core syntax. But "standard" is a loaded term. For JavaScript, there is a single spec, and the vast majority of JavaScript code is written for environments that follow the spec. Lua seems different in that someone writing Lua code is relatively much more likely to be using a nonstandard implementation that varies from the spec. As an alternative, I'm considering supporting a small superset. If a handful of nonstandard-but-inoffensive features would encompass a much larger body of Lua code than spec-only highlighting, then it may be worthwhile to implement them. Of course, this only makes sense if there is such a handful; if nonstandard implementations all go off in their own directions, then there's no point. In the case of PICO-8: while it wouldn't be too hard to implement the short `if` syntax, I think that it would be likely to confuse users writing standard Lua. This means that there's no point in adding `!=` for PICO-8's sake. (As it happens, there's an existing third-party syntax for PICO-8.) It looks like GLua also adds more nonstandard syntax than would be reasonable to add to the core.
This along with forgetting semis are my biggest hangups going back and forth between writing a Lua program and writing its underlying C support.
From the head of the section 4.8: Here we list all functions and types from the C API in alphabetical order. Each function has an indicator like this...
nual\_inconsistent\_regarding\_operator/
&gt; We're not in Kansas anymore. "We're not on the moon anymore" FTFY ;-)
Better approach: Choose a random number between 0 and (av - 1) there av is the number of available sheep - and then choose the nth free sheep. This avoids the problem with getting duplicates. Ideas, on making this not take ages for large lists (vectors/arrays) is, to swap the last element of the vector with the choosen one and then use only the 1 shorter vector to choose the next sheep.
How does this resolve OP's request?
create a list with integers from 1 to n - randomize that. But your approach is going to break rather sooner than later (just imagine a list with 1000000 sheep names and trying to get the last one ...)
My suggestion is to manage the availability of the numbers with a hashmap, not to create a list of all numbers and then pick a number from that.
Yes, you check for their availability. But if you get large lists, there the chance to find a new element gets lower and lower, and you will get more and more retries, making this a gamble, which an algorithm should never be if there are sufficient alternatives. You could obviously go the other way around, and choose a random number from a hashmap that only has free ones in it, then you would not run into this problem. The hashmap can also be any other data structure, like an array as i have described above. After you have randomized the array, you simply assign the cheep at index i the number at the same index i in the number array - which is what the OP wanted to have.
The probability of a collision is r!/( (r^(i))(r-i)! ), where s is the key space/range and i is the number of inserts. Lua can infallibly represent integers large enough to where you're more likely to be someone that is struck by lightning two times in your life than to have a collision occur while using a number of sheep that wouldn't warrant using another language altogether. In addition, it allows you to dynamically add sheep with a time complexity of effectively O(1), whereas pre-filling an array will cause the time complexity of a dynamic insertion to be O(n).
Look at the definition of `self:timeit` to find out what it's used for: function layer:timeit(name, f) self.timer = self.timer or torch.Timer() if self.timing then cutorch.synchronize() self.timer:reset() f() cutorch.synchronize() self.stats.times[name] = self.timer:time().real else f() end end It looks like it's just the name used for reporting how long that section of code takes -- it doesn't mean anything to the code, it's just for a human profiling it.
Oh I see. So then what exactly does the 2nd line do? &gt;self.roi\_features = self.nets.roi\_pooling:forward{cnn\_features\[1\], self.roi\_boxes} Doesn't it seem to call this 'name'? Or have I misunderstood something?
That line calls the function being tested. The first argument to timeit is just a string. It doesn't magically get converted. This would work almost exactly the same: self:timeit('This is a string, used just as a pretty part of the output.', function() self.nets.roi_pooling:setImageSize(self.image_height, self.image_width) self.roi_features = self.nets.roi_pooling:forward{cnn_features[1], self.roi_boxes} end)
This sub is about Lua, a programming language. Lua has no concept of backgrounds and window borders. /r/love2d would be a much better place for this. Anyway, [documentation of the relevant love2d function](https://love2d.org/wiki/love.window.setMode), that should answer your questions.
(As far as I am aware) no, and not because Lua or Löve, but because windows doesn't really do "transparent windows" like that. There's probably other ways to do what you want, but I doubt any of those would let you just take the existing code from Löve and run it as is.
So basically, add "boolean borderless (false)"? Thanks, that should help with the borderless mode, although not sure about adding transparency.
Your example is messed up. I assume you're trying to fix some problem in a really weird way and making things too complicated, or I'm just reading your example wrong. In either case, please provide some more context so we can be sure we understand what you mean and maybe even help you rethink your problem to something less complex. - What is `random_func`? is it *the same* function multiple times, or are they different functions? - what is `key`? is it a fixed value, or an iterator variable? - what are those tables supposed to represent? what's the point of nesting them like that? Also please use better variable naming; it's obvious that sub_table is a subtable from looking at its definition; that tells the reader nothing about what it represents though.
This is not a Lua question, but a LÖVE (love2d) question. Unfortunately, this is not possible with LÖVE at the moment. LÖVE uses SDL, which does not support this. * https://love2d.org/forums/viewtopic.php?t=84215 * https://love2d.org/forums/viewtopic.php?t=81725 * https://love2d.org/forums/viewtopic.php?t=78975
The page talks about transparency too.
Windows does support alpha blended ("layered") windows. love2d doesn't, though.
Your question and example is hard to understand, you should add more details. You want the maximum value returned from any function in `table1[key].sub_table`, which is a table of functions only? local max for _, f in ipairs(table1[key].sub_table) do max = math.max(max or -math.huge, f()) end
Random func is the same function multiple times it returns a random number from another table. Key is a iterator variable... I could show the ‘real’ code but it’s messy and there are many functions going at once to make the program do what I want it to do.
So basically this? "Transparent backgrounds are currently not supported." Le sigh. Thanks for the help anyway. This will help free up 8 pixels width-wise and 8 pixels height-wise.
**It's a table of the same function which is :** function random\_a(number,t,bool) local function generator(number,t,bool) local num = math.random(number) if t\[num\].habit == bool then return generator(number,t,bool) else if num == 31 and something.else.selection == 0 then return generator(number,t,bool) end if num == 31 and something.else.selection == 1 then return generator(number,t,bool) else return num end end end return generator end **It keeps saying I am trying to pass a nil value in places where I am using:** table1\[key\].new\_value = math.max(table2\[table1\[key\].sub\_table\[1\]\].random\_value)
This looks extremely complicated. Can't really follow your examples nor the problem. Are you sure this needs to be so complicated in the first place? Break it up into sub problems.
`math.max` takes at least two arguments, you provide only one. If you still can't solve it: Please provide a **minimal example that runs on its own** and shows nothing but the exact problem you want to solve. It's the best way to receive helpful answers.
for k,v in pairs (galaxy) do galaxy[k].planets = { planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,false), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,true), planet_count(#base_planet,base_planet,false)} planet_create() for a,b in ipairs(galaxy[k].planets) do galaxy[k].n = math.max(planet[galaxy[k].planets[a]].n) end end -- planet_create() is -- function planet_create() for k,v in pairs (galaxy) do for i=1,20 do planet[i]={n={math.random(0,15)} end end end
&gt; `math.max` takes at least two arguments, you provide only one.
In that case you should try to actually _call_ `random_func`. table = {random_func, random_func} creates a table that contains _the function_ `random_func` 2 times. table = {random_func(), random_func()} creates a table that contains whatever `random_func` returns, that means in this case, 2 random numbers.
What is your program ultimately supposed to do?
Ahh I see. That makes it really clear. Thank you for that! Do you know why self.nets.roi\_pooling:forward{} uses curly braces while self.nets.roi\_pooling:setImageSize() doesn't? Is this why self.nets.roi\_pooling:setImageSize() is defined in BilinearRoiPooling.lua but self.nets.roi\_pooling:forward{} isn't? Do you have any ideas where I would be able to find the implementation for self.nets.roi\_pooling:forward{}?
Awesome!
Lua has "syntax sugar" that allows you to omit the parenthesis in a function call if the single argument is a string literal or a table literal. Thus `foo {}` is the same thing as `foo({})`.
Ah gotcha, thank you so much! Helps a ton.
Couldn't you just use a verrrry opaque .png as the background image? Make sure the .png has a transparent background when you save it. Don't know if .pngs are supported or any of that.. Just a thought.
That's not even valid Lua code.
I started writing a comment but yeah, this needs to at least run to point out stuff. OP, try writing it piece by piece in some lua ide and running it every so often with some simple test lines to arrive at a point where it works - or doesn't - but is actually something to work on and see output of :)
Without knowing much about the conky/cairo Lua API, looks good on the first glance. With on exception, `x_bearing`. Given that the string width is being correctly calculated and stored in `extents.width`, that might be throwing you off. x = center - (extents.width / 2) Should place you correctly. However, check whether `width` or `x_bearing` might have an incorrect or unexpected value.
Thank your for the info :) Strangly, what ended up fixing it was changing cairo_text_extents(cr, utf8, extents) to cairo_text_extents(cr, text, extents) Notice replacing _utf8_ with _text_. If I am being honest I have no idea why that would make a difference, or if its proper. hmm. Also, I removed `extents_x_bearing` as it did not have an effect.
At least attempting to run your own code before asking for help with it is an absolute requirement! I can see what you are trying to do, so don't be discouraged! Unfortunately there are just too many errors to critique your code. Always run your code as you write it. Add to it in small pieces and run it again! Forget about metatables for now (seriously!!). You need to understand things like table constructors, function definitions, and lexical scoping first. Work through the examples in [Chapter 3](https://www.lua.org/manual/5.3/manual.html#3) of the reference manual (actually run them) and you are well on your way. Its pretty short!
If all you need is to initialize t.c with table values, then this is the perfect solution. The value of t.c won't change based on t.a. &amp;#x200B; If you need the value of "c" to change with "a", you could use the \_\_index metamethod: local myTable = {} mt = { __index = function(tbl, key) if(key == "c") then return tbl.a * tbl.b end end } setmetatable(myTable, mt) myTable.a = 3 myTable.b = 2 print(myTable.c) --&gt; returns 6 myTable.a = 5 print(myTable.c) --&gt; returns 10 Not sure if that's what the OP wants
Just a comment about your names. While `max.hp` and `current.hp` read amazingly well you’ve essentially segmented two highly related data points under different banners. However, if you just reverse that naming convention: `hp.current` and `hp.max` and suddenly all your health related data points are now nested under `hp` and suddenly can be abstracted out into maybe a shared resource other types use to get “health.”
Actually that makes sense and I completely missed it. `utf8` is set to the string "cairo", and so you're measuring that string instead of your actual text. When reading through the code I assumed that that would be the encoding, not the value being measured, that's why I missed it.
It's probably better to post in /r/gmod instead. Usually it's better to ask in the game related subs, especially because of game-specific Globals, Hooks and their associated usage/syntax. You can try asking in /r/glua, but don't expect more than one or two responses.
Duh! I dont know how I overlooked that :( I used that line from the cairo doc and apparently didn't think it through fully. I'll take this as a lesson / reminder to slow down and read the relevant documentation more thoroughly Thanks again!.
I don't know gmod, but from what you typed here, it looks like you're checking if the variable `ent` is the same as the string (series of characters) "Entity [105][sent_ball]", because it's in double-quotes. From the computer's point of view, that string is a different type of data from the object you're asking it about, so it's never equal. They may look the same in a console because the console shows a representation rather than the actual object. Try taking out the double quotes, and read up on data types in lua. http://lua-users.org/wiki/LuaTypesTutorial If for some weird reason gmod needs that to be a string, it could be the space before your square brackets. With programming, punctuation and spaces usually make a big difference.
You should post what you've got so far.
Nobody here knows how Logitech's stuff works. Ask on the Logitech scripting forum.
thanks for your reply and i will do just that
I think there might be a Logitech scripting specific forum that could give u better help, but if u post what u have u might get some help here
In our defense, "utf8" is a pretty bad variable name if it does *not* refer to encoding. "utf8string" would have been a much better name.
!RemindMe 2 days
I will be messaging you on [**2019-04-17 18:39:46 UTC**](http://www.wolframalpha.com/input/?i=2019-04-17 18:39:46 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/lua/comments/bd9us1/luaprocess_module/ekykyrq/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/lua/comments/bd9us1/luaprocess_module/ekykyrq/]%0A%0ARemindMe! 2 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ekyl26h) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
RemindMe! 2 days
it's basically the same but with no external access
`getpid` returns the `pid` of the current process, not an arbitrary one, so I'm not sure that will help. It might be cleaner to call `pidof` instead of `pgrep` though. But if you do want to use other POSIX functions, I would recommend [luaposix](https://github.com/luaposix/luaposix) instead of lua-process.
&gt; getpid returns the pid of the current process, not an arbitrary one, so I'm not sure that will help. Thank you for clarifying that, I misunderstood its purpose than. I will definitely look into luaposix :) And I remember briefly comparing `pidof` and `pgrep` awhile back, but it sounds like I should get a little more familiar with how they differ. Thanks much!
 --- Define the requisition file type -- find with key type is present on the function Why does repeat for every function? local function get_type(source) local source_type local types = {"url", "file", "base64Image"} for _, value in ipairs(types) do if source[value] then if not source_type then source_type = value else error("A request can have only one type(url | file | base64Image)", 2) end end end return source_type end I understand what you're trying to do, but why would you care? Simply use the first option that is available, return it directly and go with that. Also you might want to make `types` static somewhere. req_body[k] = v Good example why it is nice to have full-fledged variable names (`request_body[key] = value`). url = url .. "apikey=" .. "apikey=" .. self.apikey .. "&amp;url=" .. imageUrl .. "&amp;language=" .. (options["language"] or self.default["language"]) You have `apikey` in there twice. --- Does look quite well, actually.
&gt; Why does repeat for every function? I don't know haha. Docs made without proper care apparently. Sorry about that, I'm gonna fix it. &gt;I understand what you're trying to do, but why would you care? Simply use the first option that is available, return it directly and go with that. Also you might want to make types static somewhere. You are probably right. It's excessively zealous and may affect performance a little bit. &gt; Good example why it is nice to have full-fledged variable names (request_body[key] = value). It's definetely a bad practice. I will try to avoid that &gt;You have apikey in there twice. Yeah, I have, will work on that. --- Thanks for the review and the star. A lot of it was lack of attention. Tomorrow I will upload a new version
 &gt; You are probably right. It's excessively zealous and may affect performance a little bit. Performance is of no concern for this code, but it affects the code complexity and API usage. And as far as I can see, you already have a check in place to avoid such a situation.
How about something like if math.min(unpack(values)) &gt; 1 then for i, v in ipairs(values) do values[i] = v - 1 end end 16 is a low enough number to pull tricks like this.
I’ll give that a go. I’ll look into unpack also. Cheers 😀
Note that the function may be called `table.unpack` depending on your Lua version (it was moved into the `table` module in 5.2).
What's your use case? I'm having trouble understanding what it is you're asking for - questions asked at this level of detail tend to be [XY problems](http://xyproblem.info/).
I’m programming a synth. This table holds frequencies in a sequence, each beat the next frequency is sent to the synth engine. The control changes the frequency, but I found that all the frequencies in the table would get levelled out at the lower number I set. I had a basic for loop running and of course it just went through the table and gradually made them all the same. I wanted to keep the differences intact while allowing the entire row to be moved up and down. Hope that helps?
Explain reduce! Maybe post some pseudocode.
I haven’t used the Lua version of torch before, but lists in Lua typically begin at index 1, not 0
Awesome, that worked! Thanks a ton!
what i have in what exactly ?
i may be mistaken, but i think there needs to be an end after the end for the function
`&lt;offtopic&gt;`Allocating functions in an inner loop might not be the best decision a Lua developer has ever made`&lt;/offtopic&gt;` In theory it should work, at least the `if`s condition looks allright. My guess is that y.Name doesn't become `nil`, otherwise the if should evaluate as false.
You need to post the code snippet with comments. Plus, explain the intention and the issue in more detail? What goes wrong and where?
It has to be `y.Name` becoming `nil` after the loop, and then whoever signaling one of those messages to fire. You have to unsubscribe/unconnect the function somehow if you don't want that. Also, some implementations of Lua require you make a local copy for the values in a for loop, otherwise they'll only point to the last iterated value (Garry's Mod 12 used to have this behavior, a modified Lua 5.1, I can't remember if LuaJIT in Gmod had it too, and never tested on versions newer than Gmod 12).
There's no guarantee that [y.Name](https://y.Name) = [v.Name](https://v.Name) is ever run, since we don't know what v.Activated:connect() does with the function you pass it. &amp;#x200B; There's nothing else in there that would obviously change y.Name.
This might work better using a Roblox subreddit or using the Roblox tag on Stack Overflow. :Connect (:connect is deprecated) doesn't seem to be known by a lot here, nor are the other events. (and i dont understand what the issue is and what is supposed to come of it, so give more detail)
neat!
More info: I've been trying to look into the code myself and I found a few things. There's a function in the main file called "Gatherer\_DeleteItem()". I can tell that this is the function that is used to delete a node on the map when the correct button on the tooltip is used. I've attempted to make an &lt;OnClick&gt; which uses the Gatherer\_DeleteItem() function, but it doesn't work. Anyone who can tell what's wrong with it? &lt;OnClick&gt; if (arg1 and arg1 == "RightButton" and IsAltKeyDown()) then if (not GatherMainMapItem ) then GatherMainMapItem = {}; end GatherMainMapItem.continent = this.continent; GatherMainMapItem.zoneIndex = this.zoneIndex; GatherMainMapItem.gatherName = this.gatherName; GatherMainMapItem.localIndex = this.localIndex; GatherMainMapItem.gatherType = this.gatherType; GatherMainMapItem.gatherIcon = this.gatherIcon; Gatherer_DeleteItem(); GatherMainMapItem = {}; end &lt;/OnClick&gt; The original piece of code looks like this: &lt;OnClick&gt; if (arg1 and arg1 == "RightButton" and IsAltKeyDown()) then if (not GatherMainMapItem ) then GatherMainMapItem = {}; end GatherMainMapItem.continent = this.continent; GatherMainMapItem.zoneIndex = this.zoneIndex; GatherMainMapItem.gatherName = this.gatherName; GatherMainMapItem.localIndex = this.localIndex; GatherMainMapItem.gatherType = this.gatherType; GatherMainMapItem.gatherIcon = this.gatherIcon; Gatherer_NodesEditFrame:Show(); end &lt;/OnClick&gt;
 for i=25,200 do character[i] = {alleg=math.random(0,9),name=math.random(35),fact=6,gender=1,species=1} end
Why are you looping through the table twice, once to create the characters and then once more to add a gender and species? Why not just add the gender and species to the character upon creation? There are also some more tricks you can do, like using a local variable to look up \`math.random\` inside the loop. Local lookup is faster, but 175 iterations isn't really that much, so I don't know how much you save. How long does it "freeze"? You could also try returning the characters instead of using a global (which I assume the table is). That kind of encapsulation is nice anyway, makes for a better program structure. This means changing how you do other things too though, of course. So I'd probably do something like this. function make_character() local character = {} local random = math.random for i = 25, 200 do character[i] = {alleg = random(0,9), name = random(35), fact = 6, gender = 1, species = 1} end return character end
This should be very fast, something else must be wrong
24 of the characters are pre defined characters I have for my game with fixed values while the other characters should be randomised.
It freezes for about 30 seconds before loading up properly. I presume it's something else in my game that is preventing me from making this work as it should. The 24 entries are fixed characters in the game while I want the rest of the 175 to be uniquely random, to some degree.
Why did you do it in two separate loops?
Because your method (which was the one I initially thought about doing) wasn't working for me so I decided to experiment a little bit to say if it would work. Something in my program isn't working right.
If you want to put your whole code somewhere I'd be happy to run it and see what I can find out. I don't think your problem is in this function.
The code is a bit messy but I will give it a shot. Do you have LOVE installed?
Yes
Hm, all right. Maybe head over to /r/love2d and see if you can get help with your freezing issue there. 30 seconds is way too long to have anything to do with populating a table with 175 small tables.
The above code runs in less than 1 millisecond for me using Love2D. Should definitely not be slow, in any way! On my machine I can run 200'000 iterations in 23 millisec. Something else must be bogging down your code. &amp;#x200B; Not really related to your problem (looks like you're getting help) but I highly recommend formatting things a bit clearer. You also don't need to loop twice, just populate the table all in one go. &amp;#x200B; function make_character() for i=25,200 do character[i] = { alleg = math.random(0,9), name = math.random(35), fact = 6, gender = 1, species = 1 } end end
Wow that is fascinating. Your whole "Auro" project is... very impressive. Well done!
Probably to watch some videos on YouTube to get started. The official documentation is very good as well. If you have any experience programming it should come pretty naturally. My advice with any language/framework/etc is to give yourself a project and just start going. Read the docs when u get stuck.
Find a game to your liking that can be modded with lua, and you will enjoy the journey of learning.
Make something
r/wowthanksimcured ?
I want to use explicit SIMD instruction for a research project. I've seen that lua has quite fast in calling C, so I was looking into lua. Google just provided me with a very old link form 2009: [http://lua-users.org/wiki/SimdExperiment](http://lua-users.org/wiki/SimdExperiment)
Do you already know how to program other languages? If so then you can probably ignore this. I know only one language (Lua) and I'm learning it in order to create the one program I've now been working on for like four years or so. I started with various tutorials for beginners (though I don't remember which I used). I did not find the reference manual helpful at all as it assumes you already know how to program and understand all the jargon and conventions of programming. And then just start working on a program. I think that's probably the best way to learn. You jump in, do what you can, then figure out how to look up the stuff you don't know how to do. Fortunately it's a popular enough language that there are answers on the internet for most questions you'll have. Besides this sub, [Stack Overflow](https://stackoverflow.com/questions/tagged/lua) is an excellent place to ask questions or, more likely, search for already existing answers for your questions.
Or even this reddit is good for asking for help but I dont think people would be willing to give a full tutorial.
 If you are looking for a book I can recommend [Lua Quick Start Guide](https://www.amazon.com/Lua-Quick-Start-Guide-programming-ebook/dp/B07FNRR7RM). As far as an Lua IDE goes I would recommend the [Zerobrane IDE](https://studio.zerobrane.com/).
I got started with rainmeter
You'll have to use some kind of library, or provide it via C. Maybe LuaJIT and its FFI can help you. Out of the box though, Lua has no access to SIMD stuff at all. The library you linked to in your comment is the one that I occasionally see used
Thanks, that answers my question (not part of Lua itself).
Create a plugin for Neovim. 😉
A few years ago, I was in the same position as you. I had gone through [learnxinyminutes](https://learnxinyminutes.com/docs/lua/) but still didn't really get it. Then I joined a project that used Lua and picked it up as I worked. Being forced into learning really helped (but obviously doesn't work for everyone). Recently I did a 3-day game jam and my teammate didn't know lua, but he skimmed learnxinyminutes and looked at a bit of [bytepath love2d tutorial](https://github.com/adnzzzzZ/blog/issues/30) and we made a game. Again, being forced through the fire makes you learn quickly.
Creating your own parser is the only way to go if you want it to handle arbitrary dimensions. And you assume that such a solution will be inelegant, however I think it would actually be a lot better than touching `load` nor does it have to be complex. Here's a script that will do what you want, but using `.` as the delimiters instead of `[]` (i.e. running `lua main.lua -c 1.2.3 yes` will set `command[1][2][3]` to `"yes"` local command = {} local function set_command_key(t, key_string, value) if not key_string:find("%.") then local key = tonumber(key_string) or key_string t[key] = value return end local current_node, remaining_path = key_string:match("^(%w-)%.(.+)") local key = tonumber(current_node) or current_node if t[key] == nil then t[key] = {} end set_command_key(t[key], remaining_path, value) end for i, v in ipairs(arg) do if v == "-c" then local key_string = arg[i + 1] local value = arg[i + 2] set_command_key(command, key_string, value) end end
My personal favourite is "get to level 100 in Project Euler. [https://projecteuler.net/](https://projecteuler.net/) That gets you working with strings, big numbers, optimisation and some are good to try as tables.
Well I'm surprised no one has recommended the good book, Programming in Lua. It's written by the languages creator, it's fairly short, and an easy read - good mix of examples, theory, insight etc. It's really the best guide out there. You can get a used copy on amazon for super cheap (~$5) in good condition. There's also a free version online, although it's for version 5.0 (current version is 5.3 with 5.4 on the way).
You need to think a little bit about what you're trying to do, actually means. The arguments are simply strings. So, in you example when you pass `random[2][3]` as a command line argument, what happens in your code is this: command[ "random[2][3]" ] Lua doesn't see your argument as an array or anything at all, it's *just* a string, including the \[brackets\]. If you want this to work, you can look at the other comments suggestion, or try to do your own parser that parses the string, looking for opening `[` and closing `]` pairs, and tries to extract the array index from between the bracket pairs.
I could look a little at this when I get time, I've worked a bit on WoW addons (and they are just standard Lua, so this sub is a fine place to ask), but not really GUI stuff, which is usually a bit of a mess with the WoW UI system, especially the older ones. &amp;#x200B; But just looking at those snippets, I'm almost certain that `Gatherer_DeleteItem();` requires an argument (probably needing to know which node to delete). The way you are using it right now, you're basically just yelling into the night "DELETE THE ITEM!" to nobody in particular, if that makes sense! A Lua function has no idea where it's being called from, it doesn't have the context, so it probably needs an argument to know what to delete. But I'm just guessing from looking at the snippet. &amp;#x200B; Also it's a bit weird that, in the first line of big block, the original code is checking if the `GatherMainMapItem` table exists, and if it doesn't exists, it creates it (by creating an empty with `{}` ). I think in your altered version, you probably should not create the table if it doesn't exist, you should just bail out (return). The way you're doing it right now, at the last line of your big block, you are nuking the whole table by replacing it with a blank one. Again, I don't know how the addon works but I'm going to guess that's not what you intended. &amp;#x200B; Sorry for the vaguely unhelpful response but I don't have time to investigate right now!
Thank you so much for your response! I am currently doing something else but would love to see what I can do based on your input and hopefully get more feedback :) Thank you so much.
Thanks for your help on this. It helped me understand better what's going on. I've ended up using a solution similar to what I mention in the update to my OP but I've made it so that I can use `-c random[1][2] yes` by counting the number of brackets, using `gsub`, and a string splitting function I use. It's a few more lines than I had hoped but not bad at all and it works. Thanks again!
&gt; You need to think a little bit about what you're trying to do, what it actually means. You say that but I'm not much of a programmer -- I just try a bunch of stuff till it works and then I forget how I did it. I exaggerate, of course, but it's not too far off. &gt; try to do your own parser that parses the string, looking for opening [ and closing ] pairs, and tries to extract the array index from between the bracket pairs. That's what I've done, basically. I `gsub` out the ]'s and then use a string splitting function using [ as a delimiter and go from there. It's more lines but not too bad and it works like I want while preserving the desired syntax. &gt; Or you can change your command line argument format, to something that can be parsed more piece by piece. Which would be easier, but also look a lot less pretty on the command line. Yeah, the update above uses that approach and it works well and is easy to understand. Keeping the command line look the same as you would do in a program is definitely preferred.
You'd be surprised how much of a professional or experienced programmers day is spent trying a bunch of stuff until it works :) But glad it worked out. I actually think splitting on \[brackets\] was a pretty clean and not too difficulty idea, I guess the only hard part might be ensuring that it's balanced (equal number of opening and closing brackets).
&gt; You'd be surprised how much of a professional or experienced programmers day is spent trying a bunch of stuff until it works :) Oh no! You've ruined my image of professional programmers! But as long as I don't understand metatables I think everyone's jobs are safe :) &gt; I actually think splitting on [brackets] was a pretty clean and not too difficulty idea Yeah, it ended up being easier to do than I had feared. Sometimes it helps to sleep on things first.
&gt; Well I'm surprised no one has recommended the good book, Programming in Lua. Probably because it's a terrible learning resource unless you already have programming background from other languages. It's a good reference to jog your memory on something about the language, or to get up to speed if you're already familiar with another language, which is probably most of us, but it kind of sucks for anybody else. There isn't really a lot of good Lua-specific material out there for beginners, unfortunately, so it's still often the best suggestion, but it's not because it's a good book. :/
[removed]
Well, to be clear, he asked how to learn Lua, not how to learn programming.
Lua, its wonky syntax is made up for in speed. It’s truly impressive how lite and fast Lua can be.
Not saying it isn't impressive or that it hasn't stood the test of time, but: * The source code for the individual tests aren't published, which makes understanding what this comparison is actually comparing difficult * python 2.7 was tested, which is very nearly dead nowadays * Oh, what's this? It was posted five years ago? Yeah, yeah it was. I think this should probably be updated to reflect the current status quo. That would be much more valuable.. And yeah, for simple use cases, lua will still probably win. But it'd be good to actually know the numbers as they play out today, as well as understanding just what exactly was tested in the first place.
That's [VM bytecode](http://files.catwell.info/misc/mirror/lua-5.2-bytecode-vm-dirk-laurie/lua52vm.html). You can use `luac -l` to see the disassembly and study how it works.
If use it then I will be able to rewrite and study the code, am I right? I'm sorry but It's only been 3 days when I started using lua scripts.
Reading bytecode is essentially like reading the source for another, much more primitive programming language with similarities to Lua. However, it's more difficult as there are no comments, and instead of local variables with names there are numbered registers. The link I gave you explains a little bit how to read it. You cannot recover the original Lua source from the bytecode. Some essential information is lost during bytecode compilation. However, since [Lua's bytecode compiler is pretty dumb](https://nullprogram.com/blog/2019/02/24/), there *is* a close correspondence with the original source.
Thanks man. I appreciate your help. But will really need to decrypt this file I'm currently working on. As shown on the pic, I'm still stuck on that right now. I'm still reading this Lua Script Guide from Play Store and will gladly appreciate your help if you have time to decrypt this lua script. Thanks anyway.
The command I gave you in my first comment, `luac -l`, will "decrypt" it. Save it to a file and run that command on it (`luac -l thefile`). What you have isn't encrypted. It's just raw bytecode, and that command disassembles it into something you can read.
As u/skeeto pointed, this is bytecode. Don't you have access to the source file ?
Thanks! I will try to study it further tomorrow.
Yes I have access to the source file but is only limited. When I try to execute the lua file via game guardian on android, it will prompt me to enter a username and password because the fill is only 'donor access'. I'm not willing to pay $5 because I'm still unsure that it will take effect on a server sided game. So I better study it as well. This is the file: https://s.amsu.ng/NUPRYYEL4P4N
I was talking about the actual Source code but I see your problem. You should Follow skeeto's instructions then
I'm sorry I didn't fully understand. I'm still new to this. Yes I will try his instructions tomorrow. And see if I can learn from it. Thanks man!
&gt; The reference manual actually does mention this in the description for the __gc metamethod. It says that the handlers are run in reverse order of creation and then: &gt; "The userdata itself is freed only in the next garbage-collection cycle." &gt;Cheers, Richard [Source](http://lua-users.org/lists/lua-l/2012-10/msg00270.html)
Maybe it's working with LuaJIT for the last seven years, but I don't find the syntax really that odd.
Man, I failed. It says 'bad header in the precompiled chunk'. I'm a complete noob I'm sorry. Do you mind checking into it? It's the first time I encountered a lua script like this.
I tried and failed this time. 'bad header in the precompiled chunk'
This had been posted previously: https://old.reddit.com/r/lua/comments/22cewn/the_power_of_lua_and_mixins/ Unfortunately the original site, including this article, is long gone, so I thought I'd post an archived version.
Actually, I had just run across this. Apparently it has been relocated to a github blog (I hope that concept doesn't catch on). https://github.com/adnzzzzZ/blog/issues/2
Where does the *a* and *b* come from?
1. you're not decrypting the file, just decompiling it. 2. The error most likely appears because the file was compiled on a different architecture than you have. 3. posting an image of a binary file opened in notepad++ is not very helpful. Please upload the actual file to somewhere (don't use Ctrl-C to copy the text) and post a link here. I might be able to help you, but I need the actual file to do anything.
Sure.i will upload the file right now.
https://drive.google.com/file/d/1VP1ns6ZFyPy2fFVGg_WmTjx6aQC5Mz8P/view?usp=drivesdk
I need to study how did he add a username encryption and password then make my own script as well.
They are the arguments of the anonymous function passed as argument to table.sort. You can rewrite it like this, if you prefer: t = { 1, 2, 3, 4, 5 } function myorderingfunc(a, b) return a &gt; b end table.sort(t, myorderingfunc) print(table.concat(t, ', ')) --&gt; 5, 4, 3, 2, 1 &amp;#x200B; Table.sort sorts the elements of the table based on an ordering, which by default is given by the 'less than' operator ('&lt;'). If you want a different ordering, you pass it a function that takes two elements as arguments and returns true if the first comes before the second in the ordering, or false otherwise.
After looking at the file using `xxd`, it seems like it was compiled using the following configuration: * Lua 5.2 version * Big endian encoding * 4 byte integers * 4 byte instructions * 4 byte `size_t` numbers * 8 byte lua numbers I've been unable to find or compile a Lua installation that matches all of these requirements. Running the file using a little-endian virtual machine shows an error: lua52: memory allocation error: block too big I also tried using `luadec`, `unluac` and other tools, but none of them could decompile it. &amp;#x200B; Looks like it makes a request to [https://badcase.org/gg\_get\_donor\_script.php](https://badcase.org/gg_get_donor_script.php) with the parameters user, pass, game and script. It responds with something that seems like base64 encoded data, but I couldn't get anything sensible out of it. &amp;#x200B; I don't think I can help you with this.
I'm always searching for articles and explanations of how works languages and they vm. I think that understanding how they work brings the opportunity for programming better. Thanks for it
Python recently turned down a patch to remove quadratic time complexity in parsing tuples: https://bugs.python.org/issue19365
I've not used LuaJ 3 (the version targetting 5.2), only LuaJ 2 (targetting 5.1), so some of my information may be a little out of date. I also see that [the GitHub repo](https://github.com/luaj/luaj) is active again, so things may have changed again since then. Anyway, a couple of gotchas I've come across: - There is some data shared between Lua states (most notably, the string metatable). This means it's possible for your two LuaJ instances to communicate with each other - this may or may not be desirable. - Every coroutine is backed by a Java thread. This isn't generally a problem, unless your program will be running a long time and creating a lot of coroutines. I encountered a fun problem a few months back where the JVM had created and destroyed ~250k threads over its lifetime, which ... caused some issues. - The stack depth is limited to 256 calls. Again, unlikely to be a problem unless you're trying to use LuLPeg or other libraries which rely on a deep stack. - `string.format` doesn't correctly handle all formatting codes/modifiers. For instance, widths are ignored for strings. I think the last point is the biggest one. LuaJ implements 99% of Lua's behaviour, and you're unlikely to come across the missing 1% unless you're running Lua's test suite, but it does happen occasionally. That said, it's fantastic in every other way - incredibly easy to use and performance is surprisingly good.
Does it support tail calls? Or is that part of the 1% that's missing?
It does, yes. Though one thing to be aware of is that _everything_ is tail-called, not just Lua functions. So `local function a() return error("Woops") end` will give an error message at the point you called `a`, rather than within `a`'s body.
I looked into luaJ at one point but the sandboxing story wasn't good enough. As you noticed, since it uses Object under the hood everything uses the jvm heap, so limiting memory per luaState isn't really feasible.
Depending on what exactly you're making, you could simply do an HTTP call to https://www.google.com/search?q=abc and parse the result however you need. Google Terms of Service prohibit using their search engine from scripts/bots/web crawlers, but, unless you're making a massive amount of automated searches, you won't have any problems. To perform an HTTP request, you can either look into Lua libraries (I think LuaSocket also offers an HTTP client) or simply call "curl" or "wget" using "os.execute" or "io.popen"
 Thanks for the help can you think of any examples on how to do the last part? [or simply call "curl" or "wget" using "os.execute" or "io.popen" ]
Here is a simple demonstration. It searches for the term "linked list" and displays all links in the response. Of course, not all of the links are actual search results, so you'll need some logic to determine which links you need. -- pretend this request was made by GoogleBot local user_agent = "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" -- use "%20" instead of space local search_term = "linked%20list" -- full response local text = io.popen("curl -A '" .. user_agent .. "' -L 'http://www.google.com/search?q=" .. search_term .. "'"):read "a" -- make sure the request succeeded - if the response is small (less than about 10 KB), there may be error (or google blocked you) print("received " .. #text .. " bytes") -- remove &lt;style&gt; tags text = text:gsub("&lt;style.-style&gt;", "\n") -- remove &lt;script&gt; tags text = text:gsub("&lt;script.-script&gt;", "\n") -- iterate through all &lt;a&gt; tags (links) in response for link in text:gmatch("&lt;a.-&gt;") do -- address to which the link points local href = link:match 'href="(.-)"' -- html "class" attribute of the tag - may be useful to determine if link is a search result local class = link:match 'class="(.-)"' or "nil" print("class: " .. class .. ", \t url: " .. href) end `curl` and `wget` are common Linux programs (last I checked, curl is also available for Windows) which are used to perform HTTP requests. &amp;#x200B; There is also Bing Web Search API, which (if I understood correctly) is free for 3000 requests per month. Bing API should return a much nicer list of results in JSON format which will be much easier to extract information (and you don't have to worry about google IP blocking you for spam). Check it out [https://azure.microsoft.com/en-us/pricing/details/cognitive-services/search-api/](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/search-api/)
Wow thanks for the help
I found [this course](https://www.udemy.com/lua-love/learn/v4/overview) on reddit a while back and I'd say it's a pretty gentle introduction and you'll get to actually make some games.
From what little I understand about Lua--and I understand very little about it--it's not really the main piece you'd be using to make the game. I think it only acts as a "wrapper" around something else, like Java. In fact, I'm not really sure what piece it even plays with an overall game. Maybe it's used for things like UIs that load the main engines? (I know that probably doesn't help a lot but if you're interested in learning Lua, I think the Lua team itself has about as good documentation on it than anything else. That's where I tried to start an it helped me with language aspects--lua.org, I mean.)
And for whatever it's worth, I initially began to be interested in Lua because of Project Zomboid: it uses Lua. Just not sure in what capacity. I think it's used to "load things," but I'm not sure. I hope someone can clarify and help me understand it's utility better because I've always been interested in using Lua for game development, too.
Hello, In it's core, all programming languages are the same. Lua, for instance, is in my opinion a very beginner friendly programming language. But don't worry if you don't understand everything at first glance. [https://www.lua.org/pil/contents.html](https://www.lua.org/pil/contents.html) I think that this link is very helpful for learning Lua, because it provides examples and explains them. For instance, you have probably heard of "Hello World" programms, because they are simple to do but you learn about the basic idea of programming. When you follow the link I provided, under "Getting Started" you can find such a "Hello World" script. Below that, you can find a more complex example. &amp;#x200B; I also highly recommend Derek Banas on YouTube, as he makes videos in which he explains the basics of a programming language in one video. Now the vidoes are around 50 minutes long, but don't let that scare you. [Learn Lua in one video](https://www.youtube.com/watch?v=iMacxZQMPXs&amp;ab) &amp;#x200B; Also: If you don't yet have a good text-editor for writing code, I can recommend [Visual Studio Code](https://code.visualstudio.com/) to you: It is easy to install, you can customize it the way you want it to (mostly), it offers good debugging and has a simple user interface. &amp;#x200B; Lastly, if you are not familiar with how to actually start a Lua file, you have to navigate your CMD to your .lua file and type "lua \[FILENAME\].lua" if the file is called main.lua, for instance, you have to type in "lua main.lua" &amp;#x200B; Now I have a few questions for you: Why Lua? What kind of games do you want to make? (3D, 2D, etc.) What Operating System are you using? (Windows, MacOS, etc.) &amp;#x200B; &amp;#x200B; I hope this helped you a little, if you have any further questions, feel free to ask me!
Lua’s main usage within the games industry is to allow functionality changes without having to recompile the game. Lua is an interpreted language as opposed to a compiled language. You embed the Lua interpreter inside your game and can then expose certain parts of your game to outside scripts which developers or even users can edit.
Go on this site: [https://www.amulet.xyz/editor.html](https://www.amulet.xyz/editor.html). Load up some of the examples, run them and see what they do. Then modify them a little bit, and run them again (like where you see some text that you recognize on screen, change it to something else). The point of doing this is just to get used to looking at the language, and actually DOING something, anything, to get going interacting with it. You don't have to understand how those examples work, just mess around with them and see what happens. Then keep searching for Lua examples online, and try pasting what you find into the editor and running it, and see what happens. You'll start getting errors and stuff, so that'll get you used to the fact that errors aren't scary, and you'll face them all the time, and that's just how actual programming is.
I chose lua because originally I was going to try java but I was told it was really hard and I should at least get a lot of experience in scripting/coding before I tackle it, but that’s not my only reason.. my main reason is because I used to remember playing games that were made with lua and I was so amazed on how people made such great things with it and with all the other reviews online saying it’s a good way to start off for beginners I was bought by it and wanted to give it a shot. The type of games I want to create are 3D games somewhat strategic in a way, and my operating system is windows 7
Thanks a lot I will definitely try this!
Thanks a lot! I’ll try this method in my free time
Thanks for the information
If you’re looking for a fun hobby, I would definitely recommend game development. Just one advice: make the absolute bare bones game first as fast as possible to retain morale. If you’re looking for a career: game development is a very very competitive field at every level, I do not recommend it.
What are you even asking? More context is needed
You touch on screen Circle is created
Lua doesn't know anything about a "screen" or "touching". That would have to be provided by the environment that your Lua code is embedded in. Is the program Love2D? Corona? Roblox? Gary's Mod? Something else?
Wow Classic is releasing in the next few months. Much of the addons won't work and will have to be redone. Perfect time to contribute to a project that people will use and provide feedback on, and learn lua. I learned LUA writing addons for wotlk+, then later on I backported bc and above addons back to vanilla. I find learning while doing live projects to be the best for me.
Okay but why would Lua be needed for something that (I'm assuming) the host language should be able to be coded to handle? Or is it just easier to use Lua to do it? (In other words, what's the justification for using Lua do handle something like that instead of the host language itself?)
If the host language is C# or C++ (it often is these days) then making a change to the code requires you to rebuild the executable files. This takes time and a full dev environment setup. Alternatively, code in a Lua script doesn’t need to be rebuilt each time you change it, it just gets interpreted at runtime. You can modify it with any text editor. It’s portable and fast so that anyone can make changes and see the results of the changes immediately.
&gt; If the host language is C# or C++ (it often is these days) then making a change to the code requires you to rebuild the executable files. And that's the part that kills me in this: why do you have to make a code change to accommodate altering aspects of the environment or conditions that the app runs within (or to handle dealing with input)? I guess my inexperience with compiled languages is showing or I've just spent too much time working in the web world but to me it seems reasonable to think that C# or C++ would allow you to not need to change code and instead, as the developer, just code for the conditions. I'll have to poke a stick at all this some day to get a better grasp on what you're trying to explain. (But thanks for trying to shine light on this. It's pretty interesting.)
I think you’re coming at this from the wrong angle. It’s easy enough to make config files for a compiled program so that you can make changes to behaviour without having to recompile. However, what if you want to expose a function to being modified by a user? You can’t do it particularly well without using something like Lua.
Insert your finger in a tin of varnish before touching the screen (this is a portable solution, that works on any platform and with any programming language). Alternatively, you have to look for libraries that give you access to system input and means to render graphics primitives on the screen, and read their documentation. These sort of functionalities are usually not provided directly by plain programming languages (especially not by Lua) because they are too specific and system-dependent, so they are delegated to libraries.
I second "Programming in Lua" recommendation, but please note that this free book version describes Lua 5.0, which is pretty old at this point. I'd recommend getting Lua 5.1 or 5.2 versions at least to not have to learn outdated things. Also, take a look at [Love2D](https://love2d.org/) framework. It's used for developing games in Lua and you can find good tutorials on this site and its forums.
First of all, very smart decision to pick Lua as your first programming language. It's very easy compared to other languages (and fun!). If you have no experience it's going to be difficult at first to grasp the concept of a game loop, game states and using raw Lua to display graphics, sound, react to player input, etc. For a total beginner who wants to play around with Lua, here's what I would suggest to make your life as simple as possible: * Grab a simple but powerful IDE. I suggest Atom at atom.io. * Grab a simple but powerful Lua game framework. I suggest Love2D at love2d.org. * Grab a package with autocomplete and syntax check for the IDE and framework, and tie the IDE and the framework together so you can run your program within seconds. I suggest love-ide at atom.io/packages/love-ide. With these three things, at the very least, the complexities of the game loop are taken care of you, and you can try to make something happen.
okay. quick and easy way is to download TIC-80. It has a code editor, sprite editor, map editor, and sfx studio. looks at some examples and learn to make controls for a character. You should then learn collision, search AABB collision and you'll be set. then learn basic physics. friction, gravity and velocity. you've got basic elements to make a platformer then. if you ever have a problem dont be afraid to ask. if you want my email, discord or anything else, just ask and i'll help you.
What can i do with this microcontroller?
I use three in my house. 1. Control my aquarium lights (ws2812b) 2. Monitor salt levels in a brine tank using optical distance sensors 3. Vibration and hall sensor to monitor my washing machine. The vibration sensor lets it know that the washer is in use and the hall sensor is used so that I can tell when the lid is opened. If the washer runs and the lid isn't opened, then I can send an alert that clothes were left in there.
Put math.random(is.time()) somewhere at the start of your code. You need to initialize the random number generator with a different seed on every program start. Otherwise it will generate the same pseudorandom sequence of numbers on every execution.
Thank you good sir
Also you could make you code more compact by using tables: https://pastebin.com/MTV0z2x8
Or you can even get rid of the "if" that initializes uninitialized indexes in the table and use an inline default value for uninitialized places like this: https://pastebin.com/rXMjHvBZ
BTW, I think this code can be easier to read if you use an array instead of six different variables: local N = 6 local resuls = {} for n = 1, N do results[i] = 0 end for i = 1, 10000 do local n = math.random(1, N) results[n] = results[n] + 1 end for n = 1, N do print(results[n]) end
Did you notice the space between "architecture" and the period? That makes me think it's trying to build the architecture "empty string"
My apologies, that was left over from me trying to print the variable in question (i couldn't even manage to do that.. just another thing to add to the confusion), the original make file line is $(error Unsupported target architecture) not $(error Unsupported target architecture ).
Why in the hell would you compile it with ming? Android needs to be cross-compiled for your target platform.
Maybe you can take hints from this project: [https://github.com/koreader/android-luajit-launcher/](https://github.com/koreader/android-luajit-launcher/) (while I started this, I'm not really following along anymore. It should work on WSL and definitely Ubuntu VM, however not via native Windows and CMD)
I thought MinGW was basically a windows port of GCC? MinGW does not have cross compiling functionality? :o I'm a bit confused why this would be strange otherwise, I'm thinking just because a piece of software needs to have certain compatibility with the operating system it runs on i see absolutely no reason why said software would not be capable of including the functionality necessary to compile for other operating systems. I mean GCC is capable of cross compiling but MinGW isn't? What should I use to cross compile LuaJIT for android?
Thank you, i doubt I'll be able to decipher too much but it's certainly worth a look!
you can do it with a loop / a helper function, if this is the kind of thing you do a lot you could write a general case for appending a string to a table multiple times but if this example is what you are actually doing i'd question your data structure a bit lol
 for i=1,45 do target[#target+1] = "Person" end
 for i = #target+1, #target+45 do target[i] = 'Person' end (https://www.cryptobells.com/fasterest-table-inserts-in-luajit/)[Don't repeat the # operation in the hot loop.]
I feel like doing it index based is somewhat of a bad idea either way, since you could overwrite existing indexes if there are non-consecutive indexes in the table. The # operator will only tell you how large the table is based on consecutive indexes. Why not just do it the simplest possible way? I'd argue: local target = {} -- Or whatever the table you want to insert into is for i = 1, 45 do table.insert(target, "Person") end This will never overwrite any indexes, and for tables that aren't enormous, or accessed infrequently, the performance hit that can \*potentially\* come with `table.insert()` doesn't really matter.
 You could use a for-loop. for i = 1, 45 do table.insert(target, "Person") end I feel like the structure of your table needs some re-thinking probably though, if this is the way you're going about it. What are you trying to achieve with the code?
Thank you, but I prefer this advice: *"If using idiomatic Lua such as t[#t+1]=val causes you performance issues, maybe Lua is not the right language choice for your application, or for that part of your application." (anonymous)*
[Source Code \[GitHub\]](https://github.com/Thymester/SimpleMenu)
It’s a very basic and specific application for nothing but a table that is expected to push/pop text strings Not actually using this is anything larger than that
Are you trying to learn vanilla lua or Roblox lua?
wym?
Lua is significantly different (at least considering a lot of use cases) in Roblox vs. just standard lua like you would install on your pc and write via a standard text editor. Are you trying to learn how to use lua in Roblox (or another game engine) or standard lua with no engine/software attached? You mentioned trying a Roblox game to learn lua so I wanted to ask what you were actually trying to learn lua for.
I'll do both just to try both.
I use LuaJIT for embedded work. It does the job very well. I use Lua to get a job done, not to worship pundits who may have fewer years of programming experience than I.
Non-consecutive indices are a problem only if your design permits them. Where I use indices, I specifically am targetting O(1) small k performance.
Somehow the idea of mixing consecutive and random numerical indices seems to me like really bad design. My LuaJIT runs in embedded settings. I always consider the performance of what I write. Well coded LuaJIT can rival C++, but it's far easier to write the necessary support in a thin C library and hook it up to a LuaJIT state than to deal with the dumpster fire that is C++.
"It's easy to write lisp. It's easy to write *slow* lisp." Throwing good performance away for the sake of idiom seems to me to be throwing away the baby with the bath water. Maybe you're not using Lua for serious work. I, not only am, I'm succeeding with it. Maybe that's because I give a damn about performance.
I don't see how that is relevant to what is obviously a beginner question though? If someone is writing embedded code in LuaJIT, they already know what the implications of table insert is. If you don't, then the performance probably very unimportant and outside of their consideration anyway. It really doesn't matter if this takes 1ms or 50us if it's a one time table creation procedure done at startup... Not ever program ever written is extremely performance sensitive; probably the overwhelming majority of software ever written is \*not\* extremely performance sensitive. Solve the problem first, optimize it later if it needs to be optimized; which in a lot of cases won't actually prove itself to be necessary. The important lesson here is that OP could should use a loop to fill the table. The very simplest and most plainly obvious way to do it, the most naive way if you will, should be the one that is shown. If they later discover that it's too slow, they'll seek a solution to that problem, and find one very quickly.
Boy have I ruffled feathers, it seems. This isn't about boasting experience, it's about building good habits on mind to start with. Beginners don't stay beginners, and if they are taught to be indifferent to performance issues, then that bad thinking just might stick. I also believe that this attitude in the Lua community contributes to it being perceived as a toy language, and this makes me very upset.
None of that makes any sense in actual reality. Lua is very popular in a lot of applications. Lua runs all over the web, Lua is running back-end ISP routing, Lua is running web servers (or as components of them), Lua is running in a TON of games, and the games industry is fucking massive, so I don't see how that makes it a toy, unless people are so self-important as to think video games are just unimportant toys for kids. Beginners don't stay beginners, and they certainly will learn about performance as part of not being beginners anymore. However anyone writing actual real world code will tell you that worrying about performance in everything you write is a perfect recipe for never delivering anything on time, and building unmaintainable codebases that nobody wants to inherit. &amp;#x200B; But I can see from your other posts that you are only really interested in biblethumping about perfomance and your own pride in obsessing about it, regardless of whether it's warranted or not. It's warranted in some contexts, it's not warranted in many. &amp;#x200B; Anyway I'm completely disinterested in continuing this conversation with you, I already know what you're going to say. \*snip\*
Just wow! By the way, the word is "uninterested." "Disinterested" means impartial.
The anonymous pundit also says: *"If you find yourself preaching premature and unwarranted optimizations to strangers that have not asked for it, maybe what you really need to optimize is your own time"*.
As far as I can tell, that information is just not exposed by the mpv API. Your best bet is to look into `get_property`, it may allow you to find that information.
You use a lot of words to say "shut up." How nice!
Far from it. A simple "shut up" would be just rude and unfair, so let me elaborate. You care about performance, but here we're answering to a precise question that is not about performance: the original poster asked how to do a task with fewer lines of code, which is indeed an optimization problem, but not w.r.t performance. Had he/she asked "how can I do this so that it runs faster", your answers would be on target. But he/she didn't, and the answer to the question was a one-liner. (As the anonymous pundit likes to say *"There are plenty of problems to this world, so don't waste your time solving one before being sure that it is indeed a problem"*, or, if you prefer the mainstream version: *"If it ain't broke don't fix it"*).
Just treat every tutorial as interactive. It tells you how to do something, then you go and play around with the concept. Download the Lua IDE ZeroBrane Studio if you want to get started fast (and with autocompletion for the standard Lua libraries).
Thanks that was a good tip! So I managed to find a property that does exactly what I need: `sub`, but it does not seem to be documented along with the other [properties](https://mpv.io/manual/stable/#property-list). `mp.get_property("sub")` returns '1' when subtitles are present, and 'no' when there aren't any. But the problem is that this only works when `get_property` is called from inside another function. When I call it in global scope, it returns 'auto' regardless of the presence of subtitles. Is this some Lua specific behavior I'm not aware of, or would this be a bug in `get_property`? I don't understand what could cause such inconsistent behavior ...
This would be a "bug" in get_property and is likely why that property isn't listed in the documentation.
You're reading the Lua 5.1 manual but using Lua 5.3. The behavior changed: http://www.lua.org/manual/5.3/manual.html#lua_Alloc &gt; When `ptr` is `NULL`, `osize` encodes the kind of object that Lua is allocating. Note: 5.1 and 5.3 are each major releases with breaking changes.
I believe the problem is that calling it in global scope means it is called before the video file is actually loaded, so the information is simply not yet available. It consistently works when called after the `file-loaded` event was triggered.
Oh I see, thanks! Really nice behaviour I was hoping to get some kind of object-type!
`os.execute()` actually calls wherever you put into it, as if you typed it into the command line. It does not actually print text, nor does it understand any sort of markup or really anything at all, it just passes whatever you give it, to the system shell, and that's it. So, you're trying to run the Pango syntax on the command line which definitely won't work. &amp;#x200B; So, what you probably want to do, is `print()` the marked up string, and then do the `os.execute()` afterwards. If you need to actually format the output from the command you are calling, then you can't use `os.execute()`, but instead you should look at using `io.popen()`, this will let you execute an external command, capture all its standard output, and then you can print all that output as a string or a series of strings, that you can format the way you showed. &amp;#x200B; [`io.popen`](https://www.lua.org/manual/5.1/manual.html#pdf-io.popen) Lua Reference [StackOverflow question](https://stackoverflow.com/questions/132397/get-back-the-output-of-os-execute-in-lua) about how to capture stdout using `io.popen`
Your most reliable source of information should be Lua's reference manual found on the [official site of the language.](https://www.lua.org/docs.html) It might be a bit hard to get into if you haven't used any documents of this sort before, but don't be scared - the ability to read documentation will come in handy not only there but also when it comes to different programming languages. You will also learn some useful tricks in there that will help in writing more secure code. There's also [this material from CppCon](https://youtu.be/pfwHCiP1HFM) which you might find useful even if you don't understand it entirely. I remember one of the users in this sub even posted it before. For your first steps in Lua scripting as well as gaining some proficiency with it, you might want to check out several games that utilize it, such as S.T.A.L.K.E.R., Starbound and World of Warcraft. Attempting to mod these games really helps to understand pros and cons of the language. Consider trying to learn from several sources and find what suits you best. The beginning is always the hardest. &amp;#x200B; Good luck. ;)
Programming In Lua is really great as a reference manual. https://www.lua.org/pil/contents.html If you like Minecraft, I recommend the mod CC:Tweaked (continuation of ComputerCraft). It's a lot of fun to play with and is substantially easier to learn compared to OpenComputers. https://computercraft.cc/
Thank you for the reply.
Thank you all for helping me, it really means to me a lot since I am a teen trying to learn for my future career.
Thank you for the detailed explanation :) From your comment I was able to get a grasp on what I should do. I am very green with lua. Using `io.popen` did indeed work. For anyone that may stumble on a similar issue this is what I did. As I stated I am a newb, so I cant say if this is an ideal solution. But I am already coming from an inelegant place on this little project. Thanks again for the explanation. function awk_send() file = io.popen("/home/vred/lua-wip/status.lua") output = file:read("*a") file:close() print(string.format("&lt;span foreground=\"#667B85\" font_family=\"Roboto\" font_weight=\"Bold\" font=\"8\" stretch=\"Condensed\"&gt;%s&lt;/span&gt;",output)) end
You're welcome :) I was in your shoes not too long ago, just finished my 2nd year of college as a Software Engineer. ComputerCraft is where I started
Damn dude! I have already done Lua projects and even JavaScript and Python projects, but have yet to hear anything about ComputerCraft... I will absolutely check it out as well. I personally enjoy plugin/script creation so knowing this is wonderful!
1. computercraft.cc has an active forum. 2. = is the assignment operator. The value on the left is set to the valur on the right. You want the comparison operator, ==, which returns true if the value on the left is equal to the value on the right. 3. Instead of comparing to false, you may also invert the return value of detectDown by using `not`: `if not turtle.detectDown() then`
Which library are these functions from?
Your missing a parenthesis.
Once you have a some of the basics of programming down, Love2d is a nice platform to play with if you are interested in game development. I'd also recommend looking into Lapis if you are interested in web development. I'd also suggest learning to write simple command line utility scripts as they can be useful and helpful for learning. For example I recently took an online programming class that required me to complete modules, name and date each individual file, and zip the module directory for submission. I automated all the repetitive parts and saved myself a lot of time while also using Lua in a new way.
The solution you ask for is called a calculator. You'd need to split the string into tokens and then analyze the contents and do calculations step-by-step.
Let's see the pros and cons of both solutions `loadstring` * already written for you - no need to maintain extra code * easy to use * uses a heavily optimized parser written in C * can be sandboxed (if you're worried about security) * implements a lot of mathematical and logical operators * can call any Lua function you provide Your own parser: * doesn't exist yet * you'll need to maintain extra code * will need to deal with operator precedence * unless you know what you're doing, will probably end up being slower
Why do you say it's ugly? What's wrong with load()?
I read that is "an expensive function and shouldn't be used unless there is no simpler way to solve the problem at hand", but I guess there's no other simple way...
Hm, I guess you're right. I'm not sure if calling loadstring several times could affect performance (haven't checked it yet), but since there's no simpler way I guess I'll stay with it. Thanks!
It's not the function itself that is expensive, but the problem it is supposed to solve, which is exactly the problem you have at hand (i.e. compiling a string). What is usually meant with what you read is that it's not a good idea to compose a string containing Lua code and then compile it and execute the resulting function, if there is a simpler way that does not involve composing a string of code.
You could pass in a table data structure instead of a string. A serialized table would still be easier to deal with.
See also: [Shunting-yard algorithm](https://en.wikipedia.org/wiki/Shunting-yard_algorithm)
I remember you from the ComputerCraft forums! Nice to see you! I'm the guy that made WorldEdit in CC!
You're that guy I got the "what block is the player looking at" algorithm from!
Personal opinion: Avoid https://www.lua.org/pil ! It is terrible if you have no programming experience as it often times assumes you know things about syntax that you probably do not. It also uses nomenclature like you should already know it. Very bad! The official documentation of any language is rarely a good read for anyone new to programming overall. I can give a few examples. *Section 1.2: You are introduced to global variables without any explanation on what a variable is or what it means to be "global" *Section 1.3: Describes identifiers without actually explaining their purpose. *Section 3: Expressions are explained like you are an avid coder. Very overwhelming for new people to get hit with four or five new terms they have never see and wont be explained, at least anytime soon. *Section 2.5 Tables: Assumes you know what an array is and what the indexing of arrays means. This goes on throughout the entire book. Not for newbies!
You need to read "[programming in Lua](https://www.lua.org/pil/)". It's written by the developer of Lua (and imo very well at that). It will teach you both Lua syntax and programming. If you can't afford to buy it, you will find it online for free (ex. libgen).
I disagree, if I may. It is definitely the best source for learning Lua. I agree that it may not be the best source for learning the very basics of programming, but if every book on every programming language had to explain those concepts they would soon become annoying for the vast majority of their target readers (these are usually people that already have the fundamentals and are only interested on learning that particular language, and not interestend in reading for n-th time what a variable is and why computers use 0s and 1s). There is a solution, though: one can study Lua on PIL, and look elsewhere - or ask to somebody, even here - whenever he/she encounters an unknown basic concept that the books assumes as known.
Right, I 100% agree with you. But OP mentioned being a newbie, so my assumption was he or she really needed something from the ground up and most official documentation is created for people who already have programming background or at least understand standard syntax. They asked for a place to learn LUA and most of the responses are people telling them reference material. Also a note to OP: If you have no project in mind that would require learning LUA but you just want to learn to code, I highly recommend starting with Python.
Check out [the reference](http://www.lua.org/manual/5.3/manual.html#6.9); search for *time* or *seconds*. If you can’t find anything useful you’ll have to look for a module, somewhere else though.
There's plenty of example code from the LÖVE2D community to read, run and tinker with to get you going. Adjusting to the object oriented paradigm depends on how you've coded python in the past.
Thanks. I'll check it out!
Thank you, that's very helpful. I didn't know love had any resources really, I've been sick all day and didn't get to research any of it. I'll take a look tomorrow. And I honestly have only coded enough Python to understand basics, not form any habits
as /u/0nowhytho says, \[Löve2D\]([https://love2d.org/](https://love2d.org/)) has a solid community and a pretty good wiki as well. &amp;#x200B; \[CS50\]([https://www.youtube.com/user/cs50tv](https://www.youtube.com/user/cs50tv)) have occasional livestreams about löve2d that they upload to youtube but there are other tutorials that you can find on youtube (however finding *good* tutorials is another thing) as well or other sources like \[sheepolution\]([http://sheepolution.com/learn/book/contents](http://sheepolution.com/learn/book/contents)). &amp;#x200B; But I would suggest as you start out that you start out by doing small things (as small as you can), like the classic "Hello World" example. You can find out what certain features/functions does in the Löve2D wiki or you can look at the \[API\]([https://love2d-community.github.io/love-api/#container](https://love2d-community.github.io/love-api/#container)). &amp;#x200B; Sorry if there's a lot to taking in at once and I can't stress this enough: **start small.**
Lua is the easiest language in the world! It's easier than Python.
Hey, I am the friend that he is working. So we both have never coded before and are interested in making mods and such for gmod and heard that LUA was the language that is used for gmod. However we cannot even install the thing as our brains are too tiny. If any of you big brained people would like to help us, thanks. I have legit been rocking my brain over here.
Grab Zerobrane Studio! https://studio.zerobrane.com/ Donate if you feel it, or donate later on after you've enjoyed using it, but the download is free if you want. Batteries included (lots of system tools and libraries) tutorials, game engines, and the developer is beautiful human being. Zerobrane comes with everything you need to write programs. As you learn and create more software you'll pick up on trivia (such as the reason you are having trouble with the interpreter. Don't worry, we've all been there.) Learn from video tutorials relevant to your master plan, and use common sense. Lua communities are some of the friendliest and most capable groups I've ever had the pleasure of engaging. Good luck!
Add a path for Lua pointing to lua.exe in Windows, then you can call lua.exe from command line. Plenty of guides on Google.
Have you looked at the gmod wiki? I've never tried modding gmod, but from reading the wiki it seems that it ships with an embedded lua interpreter: https://wiki.garrysmod.com/page/Beginner_Tutorial_Intro
Can’t you just use the Logitech ghub app?
He posted commits in March to the project github, and there seems to be other online activity in the last week, so I'm sure he's alive and well. The money probably goes straight to his bank account.
Lua's not an acronym. Try using ZeroBrane. It mostly "just works" out of the box when getting started. Try also getting a copy of Programming in Lua. It's a great book.
One possible way to build Lua (and many other useful software packages) on Windows is to use [MSYS2](https://www.msys2.org). You can do it by following [these instructions](https://old.reddit.com/r/lua/comments/7dwgu8/having_trouble_install_lua_534/dqkyslr/) that I wrote a while ago.
You don't need to install Lua to make mods for Garry's Mod. You just write the scripts and execute them in game.
 bit.band(bit.lshift(registers[0], 8), registers[1]) Use registers[0] as the first 8 bits and registers[1] as the next 8. Is that what you're trying to do? I'm assmuing you're using LuaJIT.
What's wrong with `first * 256 + second` ? Multiplying by 256 is equivalent to an 8 bit bitshift (bitshifting was once a common optimization to avoid slow-at-the-time multiplication operations).
`255 * 255` is 65025. You may be overthinking it. As imaginaryrobots said, `hi * 256 + lo` is all you need since it's unsigned. The gotcha I might watch for is if FFI wants to do the arithmetic directly on the 8-bit userdata. Probably not, in standard C a `char` should be promoted when multiplying by an `int`.
which would be quicker? bit.band(bit.lshift(registers[0], 8), registers[1]) or the method you're describing?
Thanks I did end up using that after searching online a bit more. Unsure which is quicker though. This method or hi * 256 + lo
Also what’s the difference between normal lua and roblox lua?
Well generally, you would start with a brief search before asking. It gets asked constantly here &lt;https://www.reddit.com/r/lua/new/&gt;
It does not matter. Use what is easiest to understand.
The difference should be negligible unless you’re doing the operation thousands of times per second. Wouldn’t worry about it!
I'm going to be doing it 1000x per second
Haha right well in the case I recommend the bit shifting. That being said, I also recommend getting into the habit of doing performance testing. You can time how long it takes to do a million identical operations using different methods and compare the times.
Since you're using the FFI, why not do the C thing and use a union? local ffi = require 'ffi' local intidx do if ffi.abi('le') then function intidx(n) return n-1 end else function intidx(n) return 4-n end end end local union = ffi.typeof [[ union { unsigned int integer; unsigned char bytes[4]; } ]] num = union(0) num.bytes[intidx(1)] = 10 print(num.integer) The function `intidx` just translates to 0-based in-memory byte-indices from 1-based order byte-indices, which depends on the byte order (endianness) of your CPU architecture. If you want, you can also add a check for bounds so you throw an error when someone tries to access the 5th byte of a 32bit integer, or save the four possible values into variables `first`, `second`, etc. to avoid calling the function repeatedly for the same value again and again.
&gt; Lua's not an acronym. To elaborate, Lua is portugese for "Moon", so only the first letter is capitalized, or none at all (*Lua* does look nicer than *lua* though). Writing it *LUA* is a faux-pas typically commited by newbies and it's become kind of a meme to point it out that *Lua is not an acronym*, as stated on the [about page](lua.org/about) on the official web site.
Read the [bible](https://www.lua.org/pil/contents.html) (also known as *Programming in Lua first edition*)
On a modern computer, it's likely that the simple multiplication is quicker, because your CPU will optimize it for you, and optimize it further than you can manually. Unless you have very specific data indicating that something is a performance bottleneck, you should use the most readable option. That will make it easier to change, and lead to less bugs. Code is read more often than it's written - optimize for your time before the CPU's.
Are you using LuaJIT? Then it doesn't matter. The compiler knows how to inline `bit.band` et. al. If not using LuaJIT, or if you ever use other functions, then don't worry about speed until you need it. Write it the simplest way to look at first, then test the performance. If the speed is acceptable then you don't need to change anything.
luac compiles lua code into bytecode. It doesn't resolve module imports though and therefore require "header" still searches the file system.
https://github.com/ers35/luastatic lets you do so easily
That's exactly what I needed! Thanks a bunch!
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
This is a really subtle point. Does anyone have an example of creating a module resolver/import in lua?
manager:props[‘player_names’]
You didn't call the function `manager:props` If `manager:props` should return like a table or something, you should do `manager:props().player_names`.
\&gt; Now, how exactly is it possible to compile those 2 files together to actually make it kinda portable. &amp;#x200B; I wouldn't say using a third-party packaging tool is how you go about making your program portable. Archiving scripting languages with third-party tools has always been a big kludge so far as I'm concerned. &amp;#x200B; What I would do is focus on writing an install script so that when users go to install your program they can toss it under /opt/myluaapp or something and the install script adjusts what it needs to in order to make the install work.
Thank your for the comment. I ended up starting from scratch and going over the library documentation more thoroughly, and now have a working lua version of the script. Ill post it shortly after I clean it up a bit. Thanks again.
Lua dosn't have any support for that built in. you'll have to make/find something made with C. But right here is the extent of my usefulness.
Do you just want a GUI library? There are some libraries here: http://lua-users.org/wiki/GraphicalUserInterfaceToolkits
If you dont mind using lua 5.1 then you might consider using luajit, which has ffi bindings for c libraries like SDL, which is a cross platform windowing, sound and input handling library, with support for OpenGL
THANK YOU MY DUDE!!!! THAT WAS WHAT I WAS SEARCHING!!!!!
Maybe wxlua?
What platform(s) are you targeting? If you're happy with GNU/Linux or Windows+MSYS2, I wrote a few binding libraries that include bindings to GLFW and OpenGL (see [moonlibs](https://github.com/stetre/moonlibs) on GitHub).
Love is actually a good option, it's technically more like an engine, yes, but it offers a rather minimal feature set that aims at allows you to do low-level things easily, like a library (certainly no comparison to Defold!). If you want to draw, just look at the documentation for love.graphics, it's quite simple IMO
Huh, "standard" lua doesn't have cffi / can't call shared libraries?
There is a library for it ([https://github.com/jmckaskill/luaffi](https://github.com/jmckaskill/luaffi)), but out of the box, no it doesnt. It is designed to be as lightweight as possible
Thanks for the link and clarification :)
One misunderstanding you might have is that IRC is not based on HTTP. IRC is it's own protocol, just like HTTP. The basic steps will be: * establishing a TCP connection with the server * identifying the client with the server * Sending/Recieving messages You'll need a C lua library like [this one](http://www.luatex.org/svn/trunk/source/texk/web2c/luatexdir/luasocket/doc/) to open a socket. The IRC [client protocol](https://tools.ietf.org/html/rfc2812#section-3.1) is pretty simple. For a simple client most of the complexity is in establishing the TCP connection, but there are libraries to help. To learn I'd copy someone else. [https://github.com/msva/lua-irc](https://github.com/msva/lua-irc) looks neat. Clone that repo and play around, looks like [this script](https://github.com/msva/lua-irc/blob/master/test/test.lua) uses the library to make a freenode client
https://leafo.net/lapis/ (on linux) takes like 10 minutes to set up with the step by step tutorial
Not only is Lapis a full web application framework, which OP doesn't seem to need, it doesn't even have a builtin HTTP server and instead relies on openresty for that (Which is 1. already what OP wants and 2. still probably more than OP needs)
I recommend using [pegasus](https://github.com/EvandroLG/pegasus.lua) (which internally uses luasocket, if I remember correctly) It's easy to install if you have luarocks set up (and not too hard if you don't) and very simple to get started with.
What operating system? Chances are it has one built in. Pretty much any modern web project will use NPM to manage Javascript dependencies. With that installed, you can install a simple web server in about two seconds as easily as `npm -g http-server`.
This seems like the best way to go. If your mission is to build it yourself then I suggest taking a look at some tutorials using socket.socket in python and translating it to Lua. The API should be very similar.
`repeat` `until X` checks the X condition and only repeats if that is true. So `repeat until false
I use Windows 10
That has a web server built-in, you just need to [turn it on](https://www.betterhostreview.com/turn-on-iis-windows-10.html).
Maybe try a "while true do... end" loop and if needed kill it with a break
Hi, I have been reading PIL and elsewhere but am stuck on something. If / when times abides... I have this function: -- choose to manage player based on the name function follow_players() mpris_players = lgi.Playerctl.list_players() for i = 1, #mpris_players do player = lgi.Playerctl.Player.new_from_name(mpris_players[i]) manager:manage_player(player) end end I am trying to add an if statement to the function, so that the script will only continue when _lgi.Playerctl.list_players()_ finds a specific player. _lgi.Playerctl.list_players()_ returns a table like `table: 0x7f627402ca00 ` , so I am not sure if I need to convert that to a string in order to filter the results by player names e.g, lollypop, pandora etc.. At this point Ill probably just throw in the towel if I cant figure it out, as I have a working python version and I am obviously in over my head. haha.
Did you double-check that your C modules don't corrupt the Lua stack in any way? I used to get some very hard to track down errors because it's easy to overread in which exact ways the API functions modify the stack.
I'll do that, thanks!
If `lgi.Playerctl.list_players()` is a dictionary then you can just `lgi.Playerctl.list_players()[playerName]` and check whether it has value or it is nil. Else, you just have to use a for loop with it. How does Python do it?
I've heard good things about [LuaForWindows](https://github.com/rjpcomputing/luaforwindows) distribution
I wouldn't go to full Lua as your next step. You're used to Roblox giving you a ton of lovely nice goodies for working in 3D and so on. Lua is bare-bones. A decent enough next step might instead be [Love](https://love2d.org/). It's Lua, through and through, but also gives you bindings to SDL2 for graphics and sound, enet for networking, 2d physics, threads, and UTF8. And a simple installer.
Yes I agree, Love2D is a much better next step.
Okay, I am thinking it will require a for-loop. Which was my initial approach. `lgi.Playerctl.list_players()[Lollypop]` results in the error `attempt to get length of a nil value (global 'mpris_players')` Python does it like: def init_player(name): # choose if you want to manage the player based on the name if name.name in ['Lollypop', 'io.github.Pithos']: player = Playerctl.Player.new_from_name(name) manager.manage_player(player) for name in manager.props.player_names: init_player(name) I initially was trying to strait emulate that with the below function, but went another direction (function in last comment) when I could not get it to work. The for loop works fine on the command line, its something with the _follow_players()_ function. I am not much of a programmer, just tyring to learn in any downtime I get. function follow_players() if (names == 'Lollypop') or (names == 'io.github.Pithos') then player = lgi.Playerctl.Player.new_from_name(names) manager:manage_player(player) end end names = manager.player_names for i = 1, #names do follow_players() end
Lua don't have a function that checks if a string is in a table like Python does. But you have I have 3 ways for you to do that. Option 1: You use `table.concat` function to concatenate all values inside the table into 1 string. And then use `string.find` or `string.match` to find the string that you're looking for. Option 2: You can use a for loop to check if a name is inside a table ``` playerNames = {'lollipop','weed'} function playerInList(playerName) for i,v in pairs(playerNames) do if playerName == v then return true end end end ``` Option 3: You can use dictionary ``` playerNames = { 'lollipop' = true, 'weed' = true} function playerInList(playerName) return playerNames[playerName] end ```
Do you specifically want to just play around with everything Lua, or do you want to program your own games in Lua?
Just play around. I'm using LuaForWindows right now but can't seem to figure out LuaRocks, why does installing stuff fail?
Very enlightening information, thank you! I am going to take a closer look at this tomorrow, with fresh eyes. Thanks again :)
What error message does it give you?
At like 29 you have `background:addEventListener("touch", start)`. The error message is saying that `addEventListener` is a nil value. The "background" table doesn't have a function in it called `addEventListener`. I'm not sure what
I'll have to disagree there. There's a lot of very easy things you can do with pure Lua, probably much easier than using Löve to make a game. You can use it for simple shell scripting (In fact, it's a very good language for that), playing around with web architecture (you can build some interesting things with LuaSocket), or even going embedded if you have more interest in that (For example with NodeMCU).
ZeroBrane is a very good option if you just want Lua installed and working. It's a great editor for Lua, and the fact that it comes with several versions of Lua built into it makes it the go-to tool if you just want to quickly set up a beginner-friendly environment.
Check out CivetWeb: [https://github.com/civetweb/civetweb](https://github.com/civetweb/civetweb) It allows you to use Lua to handle requests.
Install [MSYS2](https://www.msys2.org/). This gives you a neat build environment with a package manager (Pacman) that lets you easily install on Windows [tons of packages](https://github.com/msys2/MINGW-packages), including those you are interested in, namely Lua and LuaRocks. You can then install Lua following [these instructions](https://old.reddit.com/r/lua/comments/7dwgu8/having_trouble_install_lua_534/dqkyslr/) (if you don't know how to set the PATH environment variable on the Windows version you're using, just google it: instructions are everywhere). That done, you should be able to use the Lua interpreter at the Windows command prompt, from any directory. For example, you can enter just `lua` to run the Lua shell, or `lua myscript.lua` to run a Lua script, which you can write using any editor you like. (Sorry that I can't say much more about LuaRocks, because I don't use it so I'm not very familiar with it.)
Did you bother to follow the instructions you pasted?
oh, right, forgot to paste the entire error msg, fixed
Call “uname -a” post outputs.
Looks like it's simply dynamically linking. You can use e.g. https://github.com/ers35/luastatic to embed (statically link) all required libraries in your binary.
Looks like that lua package is a wrapper around a non-lua dependency called discount. Some quick googling for " discount lua rocks" turns up the homepage for that package: https://github.com/craigbarnes/lua-discount/blob/master/README.md And the first sentence there indicates that you'll need the "discount" markdown library: http://www.pell.portland.or.us/~orc/Code/discount/ Your Linux distro may have a package to install that, or you'll need to follow the instructions from their site to get it installed.
Without any googling, my first instinct was to try `sudo apt install discount` and see if it exists. Indeed it does.
Look for the -dev version. Binary packages usually don't contain headers, so try using "discount-dev" to get those.
I think you need to put time as one of the function peramiters as inside that block of code time doesn't exist.
I don't know what your experience is, but if you want to something to countdown (in this case your timer) it needs to be **updated** when you do it (at least to my experience). Personally I can't really say what's wrong except that I don't know if you're updating this function, also is your **wait** variable it's own function or something? &amp;#x200B; At the moment I have more questions than answers
Time (mins) works fine. If i remove the seconds feature, and just have time like below, it works fine. It displays the time, and decreases by 1, every 60000 ms (60 seconds). But i wanted to add a seconds feature, so it displays something like 20:59, and counts down to 20:00 then goes to 19:59 and so on Citizen.CreateThread(function() while (time ~= 0) do -- Whist we have time to wait wait (60000) time = time - 1 end priorityActive = false end)
You should initialize seconds to 0 and reset it to 59 instead of 60. As it is now if the user sets time to 5 it will start at 5 minutes and 60 seconds. If seconds is initialized to 0 it will start by decrementing time to 4 and set seconds to 59 and start counting down from there.
EDIT. Okay installed Discount as standalone program following the instructions) but now... \`\`\`ooqq@ooqq-OptiPlex-7020:\~/Desktop/discount-2.2.4$ sudo make install \[sudo\] password for ooqq: /home/ooqq/Desktop/discount-2.2.4/config.md /usr/local/lib/pkgconfig /usr/bin/install -s -m 755 markdown /usr/local/bin ./librarian.sh install libmarkdown VERSION /usr/local/lib /usr/bin/install -m 444 mkdio.h /usr/local/include /usr/bin/install -m 444 libmarkdown.pc /usr/local/lib/pkgconfig ooqq@ooqq-OptiPlex-7020:\~/Desktop/discount-2.2.4$ make test cc -Wno-return-type -Wno-implicit-int -I. -o echo tools/echo.c cc -Wno-return-type -Wno-implicit-int -I. -o cols tools/cols.c headers ... GOOD Reddit-style automatic links ......................... OK (rest of tests also passes) ooqq@ooqq-OptiPlex-7020:\~/Desktop/discount-2.2.4$ sudo luarocks install luapress Installing https://luarocks.org/luapress-3.5.2-0.rockspec Missing dependencies for luapress 3.5.2-0: discount (not installed) luafilesystem (not installed) lustache (not installed) luapress 3.5.2-0 depends on discount (not installed) Installing https://luarocks.org/discount-0.4-1.rockspec gcc -O2 -fPIC -I/usr/include/lua5.2 -c discount.c -o discount.o discount.c:20:10: fatal error: lua.h: No such file or directory #include &lt;lua.h&gt; \^\~\~\~\~\~\~ compilation terminated. Error: Failed installing dependency: https://luarocks.org/discount-0.4-1.rockspec - Build error: Failed compiling object discount.o\`\`\`
That's a good point i just realised that blatant error.
But then my while seconds \~= 0 wont work surely, as it is 0 to begin with?
Ok so Citizen.CreateThread(function () allows you to create a new thread. All code inside the handler will be executed asynchronously on GTA. wait ( 1000 ) is a built in function that pauses the thread for 1000 ms ( 1 second).
Yes it will, since it should count down the minutes and reset the seconds when seconds is zero, so by setting it to zero first it will start by doing just that and then continue.
It's all about sandbox at the end... We reimplemented the require func to load a lua script and then evaluate it to the top, so all become available. It's still insecure, but as not all of the functions are available, so it's not every script that will work... It's secure enough.
That stuff sounds super boring for a Roblox kid.
You have to define and call the function separately. Defining it: function nameOfFun() ....do stuff here.... end Calling it: yourVar = nameOfFun() Although this function might be a call back.... in that case you should set a global variable inside it. Either way a gmod forum might be more helpful for u
Well I've got a variable in one function B that I need. I need another function A to be able to see it. I dunno how to do that.
PiL explains that fairly nicely: https://www.lua.org/pil/16.html But a TL;DR: In *function declarations*, using a colon adds a first parameter named "self". Those two below are completely identical: local foo = {} function foo.bar(self, a, b, c) end function foo:baz(a, b, c) end In *function calls*, and only where you call a function you index from a table, using a colon automatically passes the table itself as the first arg. See below: local foo = { run = print } foo.run(1, 2, 3) --&gt; 1 2 3 foo:run(1, 2, 3) --&gt; table: 0xdeadbeef 1 2 3 print(tostring(foo) == 'table: 0xdeadbeef') --&gt; true
One is a function, the other is a method. This is explained in [chapter 16](https://www.lua.org/pil/16.html).
Thank you so much, I get it now!
They are really both functions
Maybe, you could help me by pointing to a GitHub-based Lua project (preferably, some popular library) with extensive comments? I would generate Sphinx-based documentation for it and add it to the sample set.
A method *is* a function by definition.
That depends on your definition of function, and, to an extent, your definition of method. In the context of Lua, there is no such thing as a method; it's just a way the programmer decides to think about what is ultimately a function, is what I'm trying to say.
So many questions here about that fucking Logitech stuff... Lua doesn't know what Logitech, or Mordhau, or a mouse, or buttons, or modifier keys are. This sub is for discussion about the programming language, not a help forum for any random product that coincidently happens to use Lua. If you have a specific question about Lua programming, ask it here. If you only have questions about your Logitech product, try Logitech support.
Harsh words...
Yeah, maybe. I edited the comment to be less harsh, thank you.
I feel like we need an Automoderator rule that links to /r/Logitech whenever Logitech is mentioned. Save the rest of us from saying it over and over again.
Lua's `and` and `or` work (mostly) the same as C++'s `&amp;&amp;` and `||`. "Mostly" because C++ will always result in a boolean value, while Lua gives the result of last evaluated sub-expression before short-circuiting. One more thing, that might also trip you up is the number 0 is not a false value as it is in C++. Only `nil` and `false` are false.
I don't know how this compares to other languages, but this messed me up as a Lua noob for most of a week. There's probably a better way of explaining it, but I try to remember that Lua booleans only work when comparing the results of two equations.
Try /r/roblox
Conditionals use == not = So if somevariable == true then .... Not if somevariable = true then.... The second will not work, I’m surprised it didn’t throw and error. In the future r/roblox will help better than us as has been noted already.
`if x and y == 0 then` In lua this checks if x exists and y == 0 `if (x~=nil and x~=false) and y==0 then` Would be result in the same. Writing a single variable without any conditions always checks if the variable is not nil and not false that's later also a good way to check if a table entry exists or not
This question is far more relevant here than in r/roblox.
I disagree, but I’m happy to hear you out. Why is it more relevant here?
the conditional symbols were fine. tried reworking the whole formula and rearranging things and somehow it worked.
When you enter the if you create a new local variable called critdmg in a new scope. Then you leave the if and this one gets discarded and the one created before if gets used. If you want to do it like this you need to change the value of the variable created before so instead of local critdmg = 2 you should do critdmg = 2 (drop the local) (on mobile so the formating will probably be super bad, sorry)
love2d
That's good, but you should take the time to figure out what was broken and why rearranging things fixed it. Make a backup of your working file, then change one small part and think about why changing that makes it behave differently. Then try it with a different small change, etc. It's pretty good odds that you changed some variable scopes to fix it, so playing around with the code to understand what that means will help you a bunch on your next problem. Good luck!
Well for one, the backslash is an escape character. So when you tell VLC to open ``"file:///e:\movie.flv"`` Lua tries to interpret the ``\m`` as &lt;escape&gt;-m which is invalid and throws a Lua error (as of Lua 5.2. I don't remember what Lua 5.1 did.) When typing Windows paths with backslash you need to double it in literals. ``"file:///e:\\movie.flv"`` or just use a forward slash which almost always works just as well. Actually, invalid escape sequence is a compile-time error. So if you're not seeing the error message right away there might be something else going on.
Thanks, yeah i try every escape sequence combination possible but still yield nothing, not even a single err message. But if i omitted `m = vlc.libvlc_media_new_path(ins, "file:///e:\\movie.flv")` the code work as intended and yes it's 5.1.
Okay. I think 5.1 would ignore the backslash and turn ``"e:\movie.flv"`` into ``"e:movie.flv"``. My guess then is that libvlc is throwing an error but you're not seeing it because its error handling isn't compatible with Lua's FFI. Just a guess though since I know nothing about the library.
ok got it. tnx
I guess its from the library too, thanks for the help :)
I think the reason those conditional symbols worked was a very rare edge case, in the future they will not. There are very few programming languages where = is a conditional operator, Lua is not one of them. == is what u should use always. = is only for setting values, not testing them.
The first thing to remember is that in Lua all values are 'truthy' except for *nil* and *false*, which are 'falsy'. Second thing to remember, how the *and* and *or* operators work: * `x and y` evaluates to *x* if *x* is falsy, otherwise it evaluates to *y*. * `x or y` evaluates to *x* if *x* is truthy, otherwise it evaluates to *y*. Third thing to remember, the [precedence of operators](http://www.lua.org/manual/5.3/manual.html#3.4.8). Putting all the above together, if *x* has a value that is neither *nil* nor *false*, then the expression `x or y == 0` always evaluates to *x*, which is truthy.
The way I see it, the post doesn't even mention any nontrivial, roblox specific API. This is just a question about how to use the Lua language. The question would stand regardless of whether OP is scripting for roblox or making their own game.
He hasn’t given us a complete function or the context within which the function is called so we aren’t in a good position to help him. There was nothing wrong with his actual Lua code because it was so basic that you can’t really get it wrong, which means the issue is upstream - in Roblox - so the question is definitely specific to the context of the game at hand.
Cross posting my answer from a similar [issue on github)[https://github.com/Fizzadar/Luapress/issues/71): I had some trouble with this on Ubuntu 18.04 and ended up compiling my own. ``` # download discount source code wget http://www.pell.portland.or.us/~orc/Code/discount/discount-2.2.4.tar.bz2 # extract tar xjf discount-2.2.4.tar.bz2 # navigate to extracted directory cd discount-2.2.4 # configure for your system. ./configure.sh # I had some issues with linking later on, so I added -fPIC as a CFLAG to the makefile # Other people may or may not need to do this vim Makefile # update $CFLAGS from "-g" to "-g -fPIC" # compile make # install to system sudo make install # install luapress and cross fingers (--local is only if you want a local install) luarocks install luapress --local ``` If for some reason compilation fails or you run into issues remember to run `make clean` before trying something new.
i'll give it a try
Lua has a fairly liberal license, and unless you're modifying it, it really doesn't matter. Your question seems to just boil down to, "Does the Lua community accept LGPL software?" And the answer is pretty much the same for the entire spectrum of software. Some people will only use GPL-family software, some people will only use MIT or similar, but for most people, they just don't care.
No his question is if he writes a program and allows plugins does the license he uses for his program transfer to the plugins. He's asking if the lgpl is viral. Which it isn't. Now the gpl3 that's viral and would require plugins to be gpl3 too
The GPLv3 is not quite that viral. Works that only interface with a larger body of work are not considered to be part of the contributing work. &gt; However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.
I'm not talking about the implementation of Lua, but my own programs written using the language.
I believe the section you quote doesn't apply here - the GPL FAQ specifically addresses this issue. &gt; If the main program dynamically links plug-ins, and they make function calls to each other and share data structures, we believe they form a single combined program, which must be treated as an extension of both the main program and the plug-in. — [When is a program and its plug-ins considered a single combined program?](https://www.gnu.org/licenses/gpl-faq.html#GPLPlugins) &gt; If the main program and the plugins are a single combined program then this means you must license the plug-in under the GPL or a GPL-compatible free software license and distribute it with source code in a GPL-compliant way. — [If I write a plug-in to use with a GPL-covered program, what requirements does that impose on the licenses I can use for distributing my plug-in?](If the main program and the plugins are a single combined program then this means you must license the plug-in under the GPL or a GPL-compatible free software license and distribute it with source code in a GPL-compliant way.)
Yeah, and the issue's muddled up even further as even simple `require`s can be considered dynamic linking, so it seems to me like the LGPL is completely broken here.
It's also important to remember that this is FSF's interpretation of the consequences of the license. [Different people, including various lawyers, have different interpretations.](https://en.wikipedia.org/wiki/GNU_General_Public_License#Linking_and_derived_works) Ask yourself: is it worth dealing with the hassle of this? Realistically, do you think anybody is going to take your work and release a closed-source derived version? If not, using the MIT License or another similarly short and permissive one will simplify your situation for you.
For me, maybe no, but that's always such a cop-out answer. I've looked at Google, I seem to be the only one who ever asked this question publicly, and it doesn't mean other people can't be curious. Even if I am not going to use the LGPL, I still want to know the answer.
https://stackoverflow.com/questions/31412/proprietary-plug-ins-for-gpl-programs-what-about-interpreted-languages https://softwareengineering.stackexchange.com/questions/167773/how-does-the-gpl-static-vs-dynamic-linking-rule-apply-to-interpreted-languages
Jesus christ, you must be praised on stackoverflow for being such a jackass.
Sorry, I was on mobile and after two nicely formatted and sourced responses to your posts I was sick of dealing with Markdown and software keyboards' autospacing. What I should've said was "Here's some other people asking the same or similar things - I hope this helps you in your search for answers", but I don't think it's reasonable to read whatever motivations/emotions into somebody posting links with no context.
i mean i used the double equal sign in the formula but put a single one in this post by mistake. tested what the other guy said about local variables on if-statements and got what the faulty part is
Maybe this helps: https://www.lua.org/manual/5.3/manual.html#pdf-table.concat
 Use pairs/ipairs [https://www.lua.org/pil/4.3.5.html](https://www.lua.org/pil/4.3.5.html) local t = { ["key1"] = "value1", ["key2"] = "value2", } for k,v in pairs(t) do print(k.." = "..v) end local ti = { [1] = "value1", [2] = "value2", } for k,v in ipairs(ti) do print(k.." = "..v) end
 print(table.concat(chatlog, '\n'))
Google for "print_r.lua", it's a rather widely used text table dump method inspired by something from another lang. Very useful for debug.
Oof, take your upvote and leave.
/r/LogitechG
Non it's a hardware problem!
Oy, you stole my setup from IRC &gt;:(.
&lt;3
/me assumes this is a strangely worded slight about objlen.
It is indeed. One of my favorite things about the language, actually. Loosely defined enough that no one should rely on quirks with it.
I've had good results with this on Windows Subsytem for Linux and Ubuntu 18.04. LMK if it works.
You have no variable named "air", yet you're trying to reference it in line 11.
Wrong sub, man. You should use r/roblox for dev help, this is for vanilla lua. Here’s your problem: air is not a variable. instead, your part, air, is referenced by the local variable part. So, on line eleven, replace air with part. Good luck!
makesmore sense, thanks
Use `game.ReplicatedStorage.Air` again. You need to specify which table it's coming from. &amp;nbsp; Also, why are you doing `while {true} do`? You can just do `while true do`
What's the IDE?
Roblox Studio.
How about from C? Currently I'm binding values to a global table that I change every entry. How can I call GetValues() and have table[key][property]-&gt;value?
triggetstrike is false somwhere, check triggerstrike before calling loop.
One thing that needs to be mentioned, you're trying to wait for a tenth of a millisecond, which is far too short of a waiting period. Generally, Roblox only allows you to wait for about 0.03 seconds at a time under lag free conditions. Any attempt to wait for a shorter amount of time will be rounded up to somewhere around 0.03 seconds.
In line 11 try "Part" instead of "Air"
Hmm, I’m not so sure about this. It may be, but I’m a bit suspicious since many parts of ROBLOX run at 60 hertz (0.166... seconds) or more. I’ll run a test or two and get back to you on that.
I just ran a test on an (almost) empty Roblox place, and the wait time is roughly 0.03 seconds like I predicted. The following link shows a picture of the source code as well as a sample of my test results. [https://imgur.com/a/azTemrV](https://imgur.com/a/azTemrV)
Wow, did not know that. Thanks man!
Lua's bit library is actually faster for things like that, the difference is subtle and I have yet to find a very good use for it, but from Lua 5.3 on integers are a standard and you have operators for those. In Lua versions under 5.3 you can only handle 32bit integers however (because of floats being quite silly for those tasks...). So you probably might only want to use the bit library if it is really needed for some long and hard tasks you're doing :P
Learn to make text based scripts first. Its the best way to learn syntax and the ins and outs of programing. Then move on to other stuff. You wont regret it.
Make a game about farming cows. 🐄
I'd suggest making a clone of an old simple game like breakout, snake, bomberman, or a top down shooter. I haven't used nodeMCU but I've made stuff with Love before so I might be able to help. If you have questions or you don't know where to start, pm me
go to the developer wiki.
There will be 10 types of cows, you should allow mods to add more types. You can craft cows together and with anything to invent a new species.
Not sure if you’re joking, but I genuinely want to do this one day.
The manual is the best documentation.
As in reading, I want to see the code working, and be able to use it on that site to make my own to test it out
Farming cows? Do you plant cow-seeds, and then cut down the fully grown cow-plants with the cowmower? &amp;#x200B; I'm sorry
I think this is really the best suggestion for things like this. People always assume that those old games were really simple, and, sure, they were.. However, actually finishing a game like that as a project is always, ALWAYS, *waaaaaay* harder than people think!
Yes that’s correct thank you
I like the first one better. It uses less tables and you can use it as a plain table in all those situation where the order is not important. If you don't want to write the keys twice you can easily implement a table constructor, e.g. a function newtable(...) that accepts the key-value pairs as arguments, builds the table and adds to it the _order element.
how about this? function doBigThing(args) for i=1,#args do for k,v in pairs(args[i]) do doSmallThing(k,v) end end end doBigThing({ {a=1}, {b=2}, {c=3} })
Booo, framing cows
If I only really care about order, and never need to lookup elements by key, I go with the last solution, the one with an array of key-value pairs. Except that sometimes for brevity I use [1] and [2] instead of ["key"] and ["value"] local function doBigThing(kvs) for i = 1, #kvs do local kv = kvs[i] local key, value = kv[1], kv[2] doSmallThing(key, values) end end doBigThing({ { 'a', 10 } { 'b', 20 } { 'c', 30 } }) ----- If I do need to look things up by value, I think the most general solution is the penultimate one you suggested, the one with a table for key-values, and a separate table for the order of the keys -------- If none of your keys are numbers, one thing you can merge the order table and the key-value table into a single table. I think this is cleaner than using a special "_order" field. Tables with string keys are the most common case and in that situation you have no risk of clashing with integer keys, but do have a small risk of clashing with an "_order" key local function doBigThing(values) for i = 1, #values do local key = values[i] local value = values[key] doSmallThing(key, value) end end doBigThing({ "a", "b", "c", a = 10, b = 20, c = 30, })
If we assume that there is a single key-value pair in each table, I would go with local k, v = next(args[i]) instead of using `pairs`
18 days too late, but get the SDL2 library, it's fantastic and is very commonly used in games, and it's builtin rendering capabilities are enough for simple 2D sprites.
 even better, nice! function doBigThing(args) for i=1,#args do doSmallThing(next(args[i])) end end OP seems mostly concerned about the syntax of the invocation and this is more 'named argument' like. Might as well drop the parens as well: doBigThing{ {a=1}, {b=2}, {c=3} } For general scripting, I agree OP's second to the last example is the one I'd go with without thinking too hard.
How is this Lua related?
i want to script algorithms in lua. is there a better subreddit where i should post this instead?
You didn't mention Lua in your post at all. Just to be clear, you want a Lua interpreter for Android and a plotting library with it?
is plotting writing pixels to the screen. because then yes. Do you know any?
Not sure if there are any embedded rendering engines for Lua that work for Android. Closest thing I can think of is to write to an image file and check that out. Writing an XPM or PPM file is relatively simple. I don't know of any Lua environment for Android to give any library recommendations but I think it should support file IO. Of course, the better way is to use a computer instead ;).
Love2D has an Android app which allows you to run Lua on Android. It also provides an API for drawing to the screen so you can create visualizations.
love2D? okay, i'll check it out.
The `tostring` function parses a number into a string. The `string.sub` method can get you any character of a string.
That was amazingly fast! Thank you a lot!
mod 10 div 10 repeat
Monday morning recursion exercise: function getdigit(n, i) local didx local function helper(n, dn) if n ~= 0 then local digit = n%10 local rdigit = helper((n-digit)/10, dn+1) return didx &lt; 0 and 0 or dn &lt; didx and rdigit or digit else didx = dn - i return 0 end end return (helper(n &gt;= 0 and n or -n, 0)) end
This is the best answer, more complex conceptually, but probably a lot faster
That is implementation dependent. Consider these to routines: function getdigit_string(n, i) local s=tostring(n &lt; 0 and -n or n) if i &gt; #s then return 0 end return string.byte(s:sub(i,i))-48 end function getdigit_quorem(n, i) local digits = {} while n &gt; 0 do local digit = n%10 digits[#digits+1] = digit n = (n-digit)/10 end return digits[#digits - i + 1] or 0 end Under LuaJIT, the tostring based code runs about 167 times as fast. (Intel Linux). The only reason the code is somewhat more complex is the problem as stated counts starting with the *leading* digit.
Slightly tricky: the OP's problem as stated starts the count with the *leading* rather than *trailing* digit.
You're running into an overflow! https://en.wikipedia.org/wiki/Integer_overflow
**Integer overflow** In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits – either larger than the maximum or lower than the minimum representable value. The most common result of an overflow is that the least significant representable digits of the result are stored; the result is said to wrap around the maximum (i.e. modulo a power of the radix, usually two in modern computers, but sometimes ten or another radix). An overflow condition may give results leading to unintended behavior. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Oh wow, didn't even strike me that that would be the problem. Thanks!
What kind of Lua are you running? Lua normally uses a floating point number type that wouldn't overflow like that.
Lua 5.3.5
Some languages (like Python for example) use bigints by default, where numbers can become arbitrarily large without losing precision. You won't have integer overflows there, at the cost of a little performance and memory usage.
Actually, you'd observe the failure starting at 21! which has a 65 bit representation. Failover from ints to floats is a place that Lua could learn a thing or two from hoary old goats such as Lisp and Smalltalk. Personally, as someone whose work resides on machines with good FPUs, I'd rather lose precision at 53 bits than deal with sign bits flipping unexpectedly.
Ya I bet this is faster than your earlier recursive function, my point is you don’t need one at all, this can be done with one division and one module. I really think that would be faster.
Here I wrote it up for you, no string casting or anything. It counts digits from the right to the left: ``` lua function getDigit(digit, number) return math.floor(number % 10^(digit) / 10^(digit - 1)) end ``` I realize you said you ran the "iterative quotient remainder" but I am confused bc it's not iterative, so try it this way.
Except that is *not* one modulo and integer division; it is one per digit until zero. That is exactly what my recursive code does. The only way you can be faster is if you already know the magnitude in the integer say via log base 10.
The OP counts the other way though. You need a log first, and you can skip an exponentiation: function getdigit(n,i) n = n &lt; 0 and -n or n local digits = n == 0 and 1 or math.floor(math.log10(n))+1 print(digits) if i &gt; digits then return nil end return math.floor(n/10^(digits-i)) % 10 end
Bench: ffi = require("ffi") ffi.cdef [[ typedef struct timespec { long tv_sec; long tv_nsec; } timespec; int clock_gettime(int clk_id, struct timespec *tp); ]] local time_struct = ffi.new("timespec") function stopwatch(variety) function gettime() ffi.C.clock_gettime(2, time_struct); return tonumber(time_struct.tv_sec) + 1E-9*tonumber(time_struct.tv_nsec) end local start_time = gettime() return function() return gettime() - start_time end end function getdigit_string(n, i) local s=tostring(n &lt; 0 and -n or n) if i &gt; #s then return nil end return string.byte(s:sub(i,i))-48 end function getdigit_math(n,i) n = n &lt; 0 and -n or n local digits = n == 0 and 1 or math.floor(math.log10(n))+1 return i &lt;= digits and math.floor(n/10^(digits-i)) % 10 or nil end function runit(fn, times) local sum, ix = 0,1 s=stopwatch() for i=1,times do sum = sum + fn(193246587193246587, ix) ix = ix == 18 and 1 or ix + 1 end return s() end base = runit(function() return 1 end, 1e8) time_string = runit(getdigit_string, 1e8) - base time_math = runit(getdigit_math, 1e8) - base print(time_string, time_math, time_math/time_string)
Weird but fair enough. Luajit’s got some interesting stuff going on
Cartoon #7: https://blog.toggl.com/kill-dragon-comic/
Lol
I contribute to a project that uses luacheck. https://luacheck.readthedocs.io/en/stable/config.html
Thank you, we'll look into it!
(Nice seeing you here, Yami.) luacheck's author has passed away, sadly. As I've mentioned in the luacheck Gitter, I have some extra features to polish and publish, which I'll be synchronising with upstream over the coming weeks (when exams are over). I won't be alone in this, but it will still be a lot of work. I'm looking for more volunteers to help bring this awesome project back, so feel free to join!
To avoid this, use floating-point numbers: \`26.0\*25.0\*24.0\*23.0\*22.0\*21.0\*20.0\*19.0\*18.0\*17.0\*16.0\*15.0\*14.0\*13.0\*12.0\*11.0\*10.0\*9.0\*8.0\*7.0\*6.0\*5.0\*4.0\*3.0\*2.0\*1.0\` returns \`4.0329146112661e+26\` in my Lua 5.3.5.
That's more of a thread for /r/roblox, people here typically discuss stuff directly related to the language :)
Why don't you just make the car slide across a conveyor which speed is the same as the current speed of the car? I guess that might be way simpler solution than rubberbanding.
Sets are pretty straightforward to do in Lua since you can use tables with arbitrary keys set to `true` to represent sets. I might reply with code later, but feel free to ask for more specifics as well.
 local set = {} local mt = { __index = set, __tostring = function(s) local t = {} for el in pairs(s) do t[#t+1]= tostring(el) end return "{"..table.concat(t, ', ').."}" end, __concat = function(a, b) return tostring(a)..tostring(b) end, } local function toset(s) return setmetatable(s, mt) end set.create = function(...) local s = {} toset(s) for _, el in ipairs({...}) do s:insert(el) end return s end set.insert = function(s, el) s[el] = true end set.remove = function(s, el) s[el] = nil end set.complement = function(s) error("Complement with respect to what?") end set.union = function(s1, s2) local s = {} for el in pairs(s1) do s[el]=true end for el in pairs(s2) do s[el]=true end return toset(s) end set.intersection = function(s1, s2) local s = {} for el in pairs(s1) do if s2[el] then s[el]=true end end return toset(s) end set.isEmpty = function(s) for el in pairs(s) do return false end return true end set.isIn = function(s, el) return s[el]==true end set.isSubset = function(s1, s2) for el in pairs(s2) do if not s1[el] then return false end end return true end set.isSuperset = function(s1, s2) return set.isSubset(s2, s1) end return set
How could I do it? And I tried to use table.unpack in the last two functions but it didn’t work out. Do you know why?
I forgot to say that the numbers of the set have to be between 1 and 100, so in the function set.complement I’d have to see all the numbers in the set and return the ones that aren’t in. But how could I do it? Like, could I use table.unpack or not?
This is a sub for the lua language as a whole, not Roblox which uses Lua 5.1 and it's own api typically referred to as robloxlua. There are better places to look for scripters than here. Not everyone familiar with lua is familiar with roblox.
You can pass the so-called 'universe' as argument to the set.complent() function: set.complement = function(s, universe) if not universe:isSubset(s) then error("not a subset") end local s1 = toset({}) for el in pairs(universe) do if s[el] then s1:insert(el) end end return s1 end In your case the universe is a set containing all the numbers between 1 and 100, which you create like this: local myuniverse = set.create() for i=1,100 do myuniverse:insert(i) end An even better solution would be to pass the universe to the set.create function and store it as metadata together with the set (e.g. as the field s._universe). This way you could use it also in the other functions, for example to check that when you insert an element, the element is a valid one.
What exactly do you want to know? How to start? Well, read up on how to write and run Lua code, I guess? The task seems to be written focused on teaching you something along the way, given that it seems to start at the fundamentals and then allowing you to build onto what you implemented before. All in all, each of these functions will amount to only about 1-5 lines of code.
... or, of course, if you are not interested in a generic set implementation you can define the universe in the module itself.
Second version. -- set.lua -- -- A set is a table s containing two fields: -- s.elements: a table where s.elements[el]=true if el is in the set -- s.universe: another set that represents the universe for this set, -- i.e. the superset containing all the admitted elements. -- -- Operations are allowed only among sets having the same universe. -- A universe has itself as universe, and is created with set.create_universe() -- instead of set.create(). -- If a universe is not specified when creating a set, the default_universe -- (containing the integers from 1 to 100 inclusive) is used. local set = {} local mt = { __index = set, __tostring = function(s) local t = {} for el in pairs(s.elements) do t[#t+1]= tostring(el) end return "{"..table.concat(t, ', ').."}" end, __concat = function(a, b) return tostring(a)..tostring(b) end, } local default_universe local function toset(s, universe) s.elements = {} s.universe = universe return setmetatable(s, mt) end set.create_universe = function() local universe = {} return toset(universe, universe) end set.create = function(universe) local universe = universe or default_universe assert(universe.universe == universe, "not a universe") return toset({}, universe) end set.insert = function(s, ...) for _, el in ipairs({...}) do assert(s.universe.elements[el] or s.universe==s, "invalid element "..tostring(el)) s.elements[el] = true end end set.remove = function(s, el) assert(s.universe.elements[el], "invalid element "..tostring(el)) s.elements[el] = nil end set.complement = function(s) local s1 = set.create(s.universe) for el in pairs(s.universe.elements) do if not s.elements[el] then s1:insert(el) end end return s1 end set.union = function(s1, s2) assert(s1.universe == s2.universe, "sets have different universes") local s = set.create(s1.universe) for el in pairs(s1.elements) do s.elements[el]=true end for el in pairs(s2.elements) do s.elements[el]=true end return s end set.intersection = function(s1, s2) assert(s1.universe == s2.universe, "sets have different universes") local s = set.create(s1.universe) for el in pairs(s1.elements) do if s2.elements[el] then s.elements[el]=true end end return s end set.isEmpty = function(s) for el in pairs(s.elements) do return false end return true end set.isIn = function(s, el) return s.elements[el]==true end set.isSubset = function(s1, s2) assert(s1.universe == s2.universe, "sets have different universes") for el in pairs(s2.elements) do if not s1.elements[el] then return false end end return true end set.isSuperset = function(s1, s2) return set.isSubset(s2, s1) end -- Create and populate the default_universe: default_universe = set.create_universe() for el = 1, 100 do default_universe:insert(el) end return set Usage example: set = require('set') A = set.create() set.insert(A, 1, 2, 3, 4) -- same as A:insert(1, 2, 3, 4) print("A: " .. A) B = set.create() set.insert(B, 3, 4, 5) print("B: " .. B) print("A union B: "..set.union(A, B)) print("A intersection B: " .. set.intersection(A, B)) print("complement of A: " .. set.complement(A)) print("A: " .. A) print("2 is in A: "..tostring(set.isIn(A, 2))) set.remove(A, 2) print("A: " .. A) print("2 is in A: "..tostring(set.isIn(A, 2)))
First, stetre's second version looks pretty feature-complete and it seems we both thought similarly about implementing this module. However, let me walk you through how to design something like this on your own. Let's talk about sets. What happens when you add a value to a set? If it's not already in the set, it gets added. If it is already in the set, nothing happens. This is exactly what happens when you add a **value** to a specific ***key*** in a table. For example: local s = {} -- s: {} s[1] = true -- s: {1: true} s[1] = true -- s: {1: true} What happens when you remove a value from a set? If it's in the set, it gets removed. If it's not in the set, nothing happens. This is exactly what happens when you remove a **key** from a table by setting its ***value*** to `nil`. For example: local s = {true, true, true} -- s: {1: true, 2: true, 3: true} s[3] = nil -- s: {1: true, 2: true} s[3] = nil -- s: {1: true, 2: true} s[2] = nil -- s: {1: true} s[2] = nil -- s: {1: true} s[1] = nil -- s: {} Essentially, tables in Lua already act like sets if you use the **keys** to store your data instead of the **values**. We're only interested in which numbers are in the set, right? That means we only care about whether or not a specific **key** exists in the table. Now that we know tables already do the hard work for us if we use them correctly, let's look at the operations our module has to perform on them. We'll start with the basic operations, because the others can be implemented using the basic ones: local set = {} -- create a nil set; function set.create() return {} end -- insert a x value in set s; function set.insert(s, x) s[x] = true end -- remove a x value of set s; function set.remove(s, x) s[x] = nil end -- return true if x is in set s function set.isIn(s, x) return s[x] end -- return true if the set s is nil function set.isEmpty(s) for k in pairs(s) do return false -- If there's anything in the table, it's not empty end return true -- This line will not run unless the table is completely empty. end return set Now, let's talk about the rest of the operations: * Union 1. Create a new set. 2. Insert everything from the first set into the new set. 3. Insert everything from the second set into the new set. * Intersection 1. Create a new set. 2. Insert everything that's in both input sets into the new set. * Check everything in the first set to see if it's also in the second set. * If it is, add it to the new set. * Complement * For this one, you really need to define the universe in which the sets exist, or make it a *relative complement* operation, which requires two input sets. 1. Create a new set. 2. Check every item in the universe set to see if it's also in the input set. * If not, add it to the new set. * Subset 1. Check every item in the second set to see if it's also in the first set. * If not, the second set is not a subset of the first one. 2. If every item from the second set is in the first set, it is a subset. * Superset * This one's the same as subset, but with the first and second sets switched. Also, you asked about `table.unpack(list [, i [, j]])`. This function "explodes" a table into its component **values**, which isn't useful in this situation since we don't care about the **values**, only the ***keys***. I would need to see the code you wrote to know specifically why it didn't work for what you wanted, though.
This smells like a homework question. While it is great that the posters have helped share code - it would be better still if you posted *your* code, so we could help you with the bits that were missing, or broken.
Local variable guess is receiving a string as an input. When you try to compare this to a number, Lua will crash. Wrap guess with tonumber(guess) to force the variable to be converted to a number for the comparison. Hope that helps.
Thanks. It worked.
Excellent! Keep going... Lua is a pretty incredible Swiss Army knife of a language. I would strongly recommend getting Programming with Lua ([https://www.lua.org/pil/](https://www.lua.org/pil/)) as the best point of reference.
Note that this approach will fail when the user enters "Hello". A nicer solution would be: ``` local num = nil repeat num = tonumber(read()) until num ``` This guarantees the program cannot move forward until the user has entered a valid number.
I learned Lua by editing other people's creations in Garry's Mod. Then I released them on Facepunch (rip) and got shat on by everyone, which motivated me to get gud. I didn't know how tables or functions worked but I knew about if statements and loops. At the tail end of it I was making good stuff. This was back in 2008 though, times were much different back then. My advice is to go with Love2D, not just because it's a good framework, but also because there's a solid community surrounding it (Discord / forums). Getting feedback is really important I think.
I'd go with an SDL2 wrapper for Lua.
Check out PICO-8 as well.
When you start learning a new engine/framework, the best thing to have is a good documentation and/or good community. Löve2D and Godot fits the bill.
As /u/almbfsek says, Löve2D is a good framework to start with and if you're gonna go with Löve2D I would suggest using [ZeroBrane](https://studio.zerobrane.com/) as your environment. Reason is that in the tab "Project --&gt; Lua Interpreter" you can set Löve2D as your interpreter, making it so that you don't have to use something like the "Command Prompt" (if you're using Windows). Löve2D also has a solid community as well if you encounter any problems. &amp;#x200B; Another alternative is [Defold](https://www.defold.com/), it also has a solid community and good [Documentation and some tutorials](https://www.defold.com/learn/). However I haven't personally used Defold that much (I played around in it once and it was quite fun) but my first impressions of it is that it's pretty good.
I have zerobrane and I am working on a simple text adventure game and it fits my needs. I would just simply need to export it.
Coronasdk Is good choice
This should run on any site that lets you run LUA code. Just ask your friend to copy and paste the text. You could also host it yourself. Sorry I can't be of more help
You could give PICO-8 a shot
Im developing for android right now. Found this cool program, should be pretty easy. https://qubodup.itch.io/startgamedev
That depends on image format and generally they aren't easy to mess with if all you can do is read it byte by byte. Are you generating those images, are they of some specific kind?
It's a bit of work and beyond what I'm capable of doing but I would start here https://en.m.wikipedia.org/wiki/Portable_Network_Graphics#File_format. Maybe move the binary format of both images into tables, decide where you want your watermark, and add the watermark as a mask. I don't know how to do that but that's the route I would go about it. Lua can convert binary numbers and hex which could be useful in interpreting the files.
they come from a user
How to add a watermark presicely is what I need
As in, you want to support arbitrary images fed by the user, multiple formats supported? I know you weren't looking for this, but an external library is the only sane solution in that case IMO.
No, the simplest case. Say, jpg or png.
&gt; I know you weren't looking for this, but an external library is the only sane solution in that case IMO. If you know, why do you give this advice?
You should use a library, it would take like 2 seconds w a library, and 2 weeks w/o one
Because it is relevant here...
https://en.m.wikipedia.org/wiki/XY_problem
pal, there is no image.addWatermark() in lua. The only way to do that is using a library that does it, or writing your own jpeg/png encoder/decoder, and that alone is a difficult enough task.
pal, there is no image.addWatermark() in lua. The only way to do that is using a library that does it, or writing your own jpeg/png encoder/decoder, and that alone is a difficult enough task.
This would be a decent sized project without a library. You’d have to learn the binary structure for each standard and write something that decodes it. Write a scaler and something that’s handles transformation for the watermark so the pixel match up where they need to be. Then you need write something that will process the pixels in a way that will correctly sum the values. Then you can write an image encoder for your output format based on the research you did on step one. Or you can just use a library that someone else had made that does just that which has been battle tested for bugs. Your choice.
sal, I don't say that there's \`image.addWatermark()\`
[https://en.m.wikipedia.org/wiki/](https://en.m.wikipedia.org/wiki/XY_problem)Unknowdge\_of\_the\_requirements\_problem
I said "With no library" and you say "it's relevant here". Idiot?
&gt;The only way to do that is using a library that does it, or writing your own jpeg/png encoder/decoder, and that alone is a difficult enough task. That's right. You know how to do that - give answer No - fuck off.
&gt; I need a simple example. With no library Like five people are telling you already that there is no such thing as a simple pure lua image decode/encode. *Maybe*, if you settled on a super simple (and inefficient and almost never used in real applications) standard like pgm/ppm, you could whip up something short and reliable. Otherwise it's like asking "need to assemble this engine, I have screwdriver and hot glue, please give simple instructions". Plus you don't really give any hints on what you are doing, why you can't use external stuff, what is available etc so we could help solve this. But from your attitude I already see this is going nowhere so eh, don't care.
That's why you gave a long answer -- because you don't care?
I'm glad I came here. I've been using love2d to make a few games and Defold looks like something I can use to make developing faster. Positioning the sprites and trying to figure out where they are and where they are going is a bit of a challenge when planning scenes. I love the tile mapper. Love2d relies on hand coding or 3rd party software like Tiled.
So it looks like you've decided to write your own JPG/PNG decoder and encoder. I hope you're using a version of Lua with bit operations. Good luck with that, here's some [information on PNG](https://www.w3.org/TR/2003/REC-PNG-20031110/).
Wow. OP is a massive tool.
Yeah, this has basically become "how to lose all your karma in one post."
No, because no one does that in Lua. They use a library written in a language better suited for handling binary data like a normal person. No one going to just fucking write a fully featured png encoder/decoder just because some asshole doesn't want to use a library. Hell, even then it would still be a library.
Yeah, he does, really
You should the answer as it is
You’re right and I’m sorry. It’s very frustrating when ppl do this so I will try to be more constructive. I don’t think Lua is a language particularly well suited for this task. In order to access the bits and bytes of an image like that you will probably need a library anyway, and if you don’t use one you will be doing something a lot like writing a library. That’s why I said that. Goodluck on ur programming adventures and I hope mean ppl like me don’t scare u away.
How does that matter to me whether or not anyone does that?
....so you're just going to pretend that, it wasn't you aren't you?
afsik, lua is a scripting language inside nginx. which means you have to load the script inside nginx
nginx is a not a Lua library. What you're looking for is probably something like pegasus.lua, which is a simplistic web server that runs in standalone Lua. If you want to use nginx, install openresty, but that's a bit more complicated to set up.
I don't understand. How to get rid of the error? Why install openresty at all? Why is "ngx" not defined?
i'll try
The variable ngx is exposed by openresty, which is a special nginx distro with luajit embedded.
ok on a production server does installing openresty required to be able to JuaJit nginx custom modules?
Why *would* `ngx` be defined? Where do you think it would come from? &gt; Why install openresty at all? As I said, nginx has nothing to do with Lua. It's a webserver written in C that has its own way of configuring things, which is for the most part declarative and there's a lot of third-party modules to handle things that need some imperative programming. Lua, on the other hand, is just a programming language. It doesn't know what nginx is, nor does it have an `ngx` namespace. By default, Lua doesn't even know (or care) what the internet is or that it even exists. A while ago, someone who is probably pretty smart saw that those two pieces of software are both pretty cool and decided to build a custom version of nginx that uses Lua as a scripting language to avoid having to build a C module every time you want more programatic behavior in your web site / web app. This project is called openresty. Openresty makes use of the [lua-nginx-module](https://github.com/openresty/lua-nginx-module/), which exposes the `ngx` namespace during requests. This is not available from normal Lua though, and there's no reason why it should be.
Your comment was removed for its un-civil tone.
reply simplier
lua no has ngx openresty has ngx
[Simpler Answer](https://lmgtfy.com/?s=d&amp;iie=1&amp;q=openresty)
lua and ngx - same-same?
Nginx – a high profile official Your script – you Ngx – the official's personal secretary Lua – language both you and secretary can speak Nginx brings his secretary everywhere and when the secretary is around you have to speak to him in Lua. If the official is not around, the secretary isn't either and ngx is nil.
I asked [megagrump](https://www.reddit.com/user/megagrump/)
If I understood correctly, yes you need to install openresty
Lua/LuaJIT, on their own, have no "ngx" module. Nginx is a web server. Somebody saw nginx, said "I bet Lua would be great in this", and created openresty, which is nginx+LuaJIT. *That* is what has the "ngx" module, nothing else. My first question is what are you trying to do? Can you share your hello world so we get some context?
Fuck off, dude. You're unbearable.
Me? No.... You!
What is the program you use
What's the goal?
why do you want to know it?
Because if we know the whole goal then we might be able to help you solve it better.
In general, the only support that lua provides for unicode is the utf8.* table. For all other purposes a string is just an array of bytes. I suggest looking for a C library which does this and linking it to your Lua app.
I don't advice to solve it better
Aren't both cyrillic and german umlauts symbolds in utf8 ?
Asshole.
What do you call a "symbol"? They are certainly both multi-byte sequences when written using UTF-8 encoding. Which makes "\[ü\]" not a set of one "char", but a set of multiple bytes. One of those bytes will match one of the bytes (again, because it is in fact a multi-byte sequence) of the "м" string. That's all - you're looking at strings consisting of more than one byte for the single char your editor/viewer shows you.
Yes, but there is no `utf8.find`, you have to find or implement one yourself. `string.find` supports single byte encodings only.
Thx. Got it. `z:find('[\xd0-\xd1][\xb0-\x8f]*')` for cyrillic alphabet; analogous for german umlauts.
Go jerk off
There’s no-one else around. And when you ask for help and then turn into a fucking dick when someone else asks why, well it says all we need to know.
someone asked why -- I answered why; you have a problem? go to a doctor; or better go jerk off
What karma?
go look it up the dictionary
Hello, &amp;#x200B; If you don't support upstream Vary header, you can calculate this as $proxy\_cache\_path/hex\_md5(cache key), with slashes inserted appropriately according to the levels in your proxy\_cache\_path directive. I don't think this stuff is exposed to Lua out of the box in openresty, so you will be editing some C code or using Lua's FFI to manipulate some C-side things. If you are forced to do it that way, note that ngx\_http\_request\_t has a member cache of type ngx\_http\_cache\_t\*, and ngx\_http\_cache\_t has a member file of type ngx\_file\_t, and ngx\_file\_t has a member name of type ngx\_str\_t. &amp;#x200B; Also, you are quite rude.
Your discord ID does not exist.
I am using this https://github.com/sharpobject/sgre/blob/master/util.lua#L122 which works on all tables but takes n log n time and n space at iteration time.
Maybe make the proxy an @name location and in your lua use ngx.location capture(“@name”) then replace body and content length keeping original headers?
How?
Can't he also do io.read(*"n") to store it as an int?
Hopefully this will give you some hints, it's close but not perfect. It's missing Accept-Ranges and Content-Length. ``` curl -v -s http://127.0.0.1/pub/FreeBSD/README.TXT &lt; HTTP/1.1 200 OK &lt; Date: Sun, 30 Jun 2019 04:18:46 GMT &lt; Content-Type: text/plain &lt; Transfer-Encoding: chunked &lt; Connection: keep-alive &lt; Last-Modified: Thu, 07 May 2015 16:18:39 GMT &lt; Server: WeAreTheCloud/v0.01 &lt; ETag: "554b905f-10a3" ``` ``` curl -v -s http://ftp.freebsd.org/pub/FreeBSD/README.TXT &lt; HTTP/1.1 200 OK &lt; Date: Sun, 30 Jun 2019 04:19:39 GMT &lt; Content-Type: text/plain &lt; Content-Length: 4259 &lt; Last-Modified: Thu, 07 May 2015 16:18:39 GMT &lt; Connection: keep-alive &lt; ETag: "554b905f-10a3" &lt; Server: WeAreTheCloud/v0.01 &lt; Accept-Ranges: bytes ``` ``` upstream origin { server 209.94.190.56; # ftp.freebsd.org } server { listen 80; server_name _; access_log /var/log/nginx/access.log main; location / { content_by_lua_block { local res = ngx.location.capture("/xupstream" .. ngx.var.request_uri) if res.status == ngx.HTTP_OK then ngx.ctx.orig = res.header ngx.say(res.body) else ngx.say(res.status) end } header_filter_by_lua_block { for k, v in pairs(ngx.ctx.orig) do ngx.header[k] = v end ngx.header.content_length = nil } } location ~* /xupstream/(.*) { internal; more_clear_headers Set-Cookie proxy_set_header Host "ftp.freebsd.org"; # name of upstream server. proxy_pass_header Server; proxy_cache_key $uri; proxy_cache cache; proxy_cache_valid 200 1d; proxy_pass http://origin/$1; } } ```
I wasn't aware capturing @name locations isn't supported, so I used /xupstream/(.*) regex instead.
Here is a post detailing https://forum.nginx.org/read.php?29,264007,264024 To figure out what key is used for the md5sum: grep -a -oP 'KEY: \K.*$' chunks/3/c4/8d5a53b6f3dfe13b7d2567e0380eec43 | tr -d '\012\015' | md5sum 8d5a53b6f3dfe13b7d2567e0380eec43 -
will this work as the follows: &amp;#x200B; &amp;#x200B; `proxy_cache =&gt; (prox_pass, if file isn't in cache; store it into cache) =&gt; lua_script_body.lua`
if there is only one key in your table then you can say a = next(btn) and then print a; next() returns two values so if you just print(next(btn)) then you'll have two things output, and the 2nd thing will just say 'table' If there's multiple keys in btn then you can use pairs and break out of the loop on whatever condition to make sure you have the one you want
Yes, origin response is cached. Lua manipulates cached content and delivers to client. The manipulated content is not cached.
Ok And if a file isn't in cache, is the time when it gets cached determenistic, always? Or does it occur whenever nginx decides? Namely, "proxy_pass" will execute and a file will get cached right away?
If it’s not in cache next user request will trigger upstream and get cached. You can add cache lock and other settings to control how many upstream requests happen and how long to wait etc.
Because you pretty much require utility modules like this to deal with basic objects in Lua, I've switched to Wren. Feels a more complete language, without the jank.
Wren was not updated since version 0.1.0, released about 3 years ago.
Thank you, this is a cool little library!
Ouch... Would love to see it move forwards. I know it's an unpopular opinion, but there are some things that bother me with Lua... Any recommendations of articles to "do it right"?
This is of course purely personal opinion: &amp;#x200B; I love Lua because it's so barebone. For each projects in do in Lua (and there were many), I design my own object system, with my own system of inheritance, my own array system, my own error exception system, my own database sytem... - in such a way that's perfect for **that specific project**. It's quick (of course I reuse parts of my older projects) and I enjoy it. I prefer this to have to read docs to someone else's library that does "almost exactly what I want".
Looks intresting!
All of these things would require extending the language itself to have features that something like C++ has. 1. WinAPI is not a Lua concept. If you'd like more info on how to virtualise multiple clicks, check the [documentation](https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-sendinput). 2. Lua is not meant to be as low-level as you are describing you want it to be, you would again have to extend the language to have the functionality you desire.
Please elaborate on "the jank" and how Wren solves them
Hey /u/evandrolg love your work. Any plans to continue development of Pegasus? I'd love to see an ecosystem built around that, it's one of the simplest servers available for Lua.
My biggest gripes are... - Lua is not zero index - Classes are not first class citizens (punny) - Can't return half way through a function Overall, I like the simplicity of Lua, but I always find I need a loop hole or module when doing something that seems standard. Inheritance, for instance, uses metatables, which results in ugly syntax. Have any Modern Lua docs or something. Would love to try this out the right way.
What do you mean - "can't return half way through function"? Yes, the syntax requires "return" to be the last statement in a block to keep the grammar simple, but you most certainly can return from the middle of a function.
1. Lua has tables and once you embrace that their pretty nice. I don't think it's *that* big of a deal like people make it out to be. Lua gives you all the mechanisms you would need to build a 0 based data structure and the tools to build your own iterators that traverse them appropriately. 2. It's not object oriented. There are no classes. You can do just as well or better with Lua in that regard than JavaScript pre-es7 or whichever added their pseudo-classes. 3. I don't even know what this means. You can return whenever you want to *and* you get proper tail calls.
`do return end`
Keep in mind associative keys in Lua are unordered so with your example there's no way to make it always print thingIWantTyped without knowing you're looking for it.
I don’t mean to burst your bubble or anything, but you’re gonna have to take this project a LOOT farther in order to get contributions (code or $$$). I don’t mean to knock your work, I’m sure it’s great, but so many other people have written game engines like this. The first that comes to mind is GoLuwa by CapsAdmin. There’s also Love3D by shakesoda and that other guy. And then there’s also that one game engine that got posted on Facepunch a while back. And NONE of those have any real traction, let alone other people paying them their hard earned money. Like if you really want this to take off then take a page out of Leafo’s book with Lapis, he wrote a fuckton of docs and has it running on a production server [itch.io](https://itch.io) and then again he only has code contributions, no $$$. https://youtu.be/GbP3FbPLfJY
&gt;github.com/Evandr... tks, man! I've plans to return to work on pegasus.lua soon :)
LuaSocket (https://github.com/diegonehab/luasocket) is the one i've most commonly seen used.
I haven't found a simple example in the repo, is there one?
Seems to be some on the website: http://w3.impa.br/~diego/software/luasocket/http.html
Yes, but that has no example of how to get binary data from a response.
I haven't used this library, but it seems pretty clearly specified on that page: you use the "sink" parameter.
[This is a easy to use http library that uses luasocket](https://github.com/JakobGreen/lua-requests) it has plenty of examples to choose from. &amp;#x200B; &amp;#x200B; `local http = require('requests')` `local res = http.get('https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Lua-logo-nolabel.svg/600px-Lua-logo-nolabel.svg.png')` `local f = io.open("lualogo.png", "wb") -- 'wb' means write binary mode` `f:write(res.text)` `io.close(f)` Heres a example of how you could download a picture from the web and write it to a file. Best of luck! :P
&gt;res.text is this binary data?
This is the data returned by the web server. The property name is misleading, but yes it can be binary data.
Ok From the repo it doesn't appear to be well known. Is it used by many people?
Most lua repos are that way. But from my experience it works great.
The answer depends on your lua environment. e.g. if you are coding inside of OpenResty then you'll need to use e.g. lua-resty-http. &amp;#x200B; If you're in a normal lua interpreter and \*not\* on windows then lua-http is the best choice (obviously I'm biased)
I started learning Lua on Roblox, slowly moving to other platforms and trying to extend the language myself via C/C++. I wouldn't recommend Lua for anything but what it's made for - embedding into another program. I've been using Lua for around 3 years now, and if anything I'd hoped I would've started learning how to use it by itself and inside of my own programs first.
1: Minecraft ComputerCraft mod and the Lua manual. 2: Depends on what games you play. but a lot use Lua, so generally; yes. 3: A week or so. And I didn’t know what tables were for an inexplicable amount of time. But that’s not a good tip, instead I’ll say that tables and even functions are variables and can be stored in an identical fashion to any other variable.
* ComputerCraft * Sure. It's a tool. * A month or a few years, depending on how you define "learned". Enough to do simple scripts? A couple weeks. Enough to implement a coroutine manager on top of am existing event-based system? Much longer. I really wish I had learned how to name variables better. Seriously, good variable names are underappreciated.
The best tutorial is the manual, anyways: 1. ComputerCraft. 2. Yes, I recommend Lua for both standalone and scripting purposes. 3. Don't remember, it was a long time ago, sorry :P. But this is a pretty vague question, when do you think one "learns a language"?
Off topic: Happy Cake day! :)
&lt;3.
You’re using Lua 5.3 modules with LuaJIT. They aren’t compatible.
How to use "requests" with LuaJit? Or what library should I use with LuaJit to make a *simple http request* and read a response in binary
Same thing here brother.
[https://github.com/LPGhatguy/luajit-request](https://github.com/LPGhatguy/luajit-request)
Create a game in Roblox or outside of it?
first result doesn't imply that it's a decent library
Well, it's an ffi binding to libcurl which is cross platform does what you need and is using luajit, your version of lua. Also you can use pretty much every tutorial written for plain libcurl, and if probably something is missing from the binding, you can just copy it from the header of libcurl
go to the developer wiki for roblox.
The official Lua tutorial is what I used to get started with programming using Lua in general: [https://www.lua.org/pil/1.html](https://www.lua.org/pil/1.html) I haven't done a ton with Roblox Lua specifically yet, but this looks like a good starting point: [https://en.help.roblox.com/hc/en-us/articles/203625344-Building-Scripting-Help-and-Tutorials](https://en.help.roblox.com/hc/en-us/articles/203625344-Building-Scripting-Help-and-Tutorials) &amp;#x200B; Good luck!
Use \`tonumber\` to convert a string to a number.
To make a string into a number, you can use the tonumber function.
num = tonumber(string)
In a previous thread I recommended libcurl with an ffi binding: [https://github.com/LPGhatguy/luajit-request](https://github.com/LPGhatguy/luajit-request) I'm using 2.1.0-beta3 of LuaJIT. When I recommended it, I had no expertise with making http requests. It took me half an hour to write one with it. If You'd like it, I could post the code
I said -- "for sure". Have you tried in on Lua/LuaJit on the versions I've specified? I think not. Read the question carefully.
What is the error you get?
it doesn't exist in luarocks, how did you install it?
I simply downloaded the file luajit-curl.lua, and put it to the directory, where my script is, then required it. You can put it anywhere, where LuaJIT finds it
is "init.lua" not needed?
I haven't used it. I'll show You the simple example I've put together: ^(local curl = require "luajit-curl") ^(local ffi = require "ffi") ^(--init) ^(local curlobj = curl.curl\_easy\_init()) ^(if curlobj then) ^(--open file for curl to write in) ^(local file =) [^(io.open)](https://io.open)^(("./dummy.txt", "w")) ^(--set address) ^(curl.curl\_easy\_setopt(curlobj, curl.CURLOPT\_URL, ")[^(https://example.com)](https://example.com)^(")) ^(--set curl to follow redirection) ^(curl.curl\_easy\_setopt(curlobj, curl.CURLOPT\_FOLLOWLOCATION, 1)) ^(--set curl to write into file instead of stdout) ^(curl.curl\_easy\_setopt(curlobj, curl.CURLOPT\_WRITEDATA, file)) ^(--perform the request) ^(local res = curl.curl\_easy\_perform(curlobj)) ^(--check for errors) ^(if(res \~= curl.CURLE\_OK) then) ^(--print error) ^(print("curl\_easy\_perform() failed:", ffi.string(curl.curl\_easy\_strerror(res)))) ^(file:close()) ^(else) ^(--read html from file then print) ^(file:close()) ^(file =) [^(io.open)](https://io.open)^(("./dummy.txt", "r")) ^(local html = file:read("\*all")) ^(print(html)) ^(file:close()) ^(end) ^(--cleanup) ^(curl.curl\_easy\_cleanup(curlobj)) ^(end)
re-read my question
There are build instructions on its repo, try that &lt;https://github.com/facebookarchive/luaffifb#build&gt;
thx Now - "module 'bit' not found". Any idea?
found a way to cheese it by using query:wait() after query:start() so it gets the result and i return query:getData() query:start() query:wait() return query:getData()
You're dealing with what looks like asynchronous here. You can use a coroutine to wait for the data callback to deliver the data. ``` local function awaitQuery(str) local query = db:query(str) local thread = coroutine.running() function query.onData(...) coroutine.resume(thread, ...) end query:start() return coroutine.yield() end coroutine.wrap(function() local d = awaitQuery("select foo") end)() ```
not exactly, you're correct in saying it's asynchronous. i can make it wait using the code query:wait() alt ought i've been able to extract the data by attributing a global variable. The result is not exactly what i'm looking for tho as i end up with result such as ( data\[array\]\[query#\]\[row\]\[key\]\[value\] EX: $data\[1\]\[1\]\[1\]\['id'\]) as i'm running 2 queries asynchronous, not aesthetic but working.
Just to clarify some things: u/Johaniao and You seem to be the same person (Just something I noticed) Lua 5.3 and LuaJIT aren't the same If You are using LuaJIT (not Lua 5.3) Then, the one, I already mentioned works I've even posted some code on how to use it here: [https://www.reddit.com/r/lua/comments/c9uq0y/http\_client\_library\_which\_comportable\_with\_luajit/](https://www.reddit.com/r/lua/comments/c9uq0y/http_client_library_which_comportable_with_luajit/)
Your solution has never worked. Get out of here.
If you have libcurl, then https://github.com/LPGhatguy/luajit-request
it doesnt work
Very interesting, does anyone know how frequently lua is used in malware? And why?
His solution works. You are the idiot, get the fuck away from forums and reddit if you don't want help from people.
His solution doesn't work
I just released v1.0.0 and i hope it is of some use to you. Any contribution is very much appreciated. Have a great day!
[Let me see what I can do...]() - [Getting started with Lua](http://gamedevgeek.com/tutorials/getting-started-with-lua/) - [Learn Lua in Y minutes](https://learnxinyminutes.com/docs/lua/) - [Lua directory](http://lua-users.org/wiki/LuaDirectory) on lua-users.org - [Learn Lua in an hour](https://www.youtube.com/watch?v=S4eNl1rA1Ns) (video) And, last but not least: [The Holy Bible](lua.org/pil/contents.html)
Thanks man
Although it's a bit of topic since it doesn't have any "direct" relation to Garry's Mod, there are some frameworks/engine that might interest you: * [Amazon Lumberyard](https://docs.aws.amazon.com/lumberyard/latest/userguide/scripting-intro.html): A 3D engine that supports Lua, but I personally don't have any experience with it. * [Defold](https://www.defold.com/): a pretty neat 2D framework with some nice features, I've poked around in it and I think it's interesting. * [Löve2D](https://love2d.org/): The 2D framework that I personally use often, has a solid community and good documentation.
TIC-80 would be useful too
How is this different or the same as any protobuf libs that are out there now?
If obj.list\[id\] is a table then You could use that, as it will be the same table. If it's another type, but You don't want to modify it, then it's the same deal. Or You could use obj.ingame\[#obj.ingame\], as insert without a third argument inserts the element to the end of the table. Btw. it's faster to use obj.ingame\[#obj.ingame + 1\] = obj.list\[id\], if You want to put the element at the end of the table
no, but if you have a way to tell lua what you want to insert, then you already have a way to access it ``` local thing_i_just_inserted = obj.list[id] table.insert(obj.ingame, thing_i_just_inserted) ```
 local _insert = table.insert table.insert = function(list, pos, v) if not list then return error('no table supplied') end if not pos then return error('no value supplied') end if not v then v = pos pos = nil end list[pos or #list+1] = v return v end
 table._insert = function(tab, pos, val) table.insert(tab, pos, val) return val or pos end Should work too :)
well look at mr(s) doesn't-like-to-reinvent-the-wheel over here 🙄
Be specific. What error message you get?
But as every object has a different coordinate. I'd like to manipulate that.
table.insert appends an object to the end of a list (if called without a position argument). So your newly inserted object will be at the end of the list. You can access it using: ``` table.insert(obj.ingame, obj.list[id]) local a = obj.ingame[#obj.ingame] ``` It's hard to imagine a good use-case though, except if obj.ingame uses metamethod magic. If you need to modify the value, why not modify it beforehand?
you should try it first, and then you might realize you don't actually have a problem anymore
Thanks for sharing. I really like this type of insider explanation on “now” and “next” points of view on debates like null, static analysis vs static types etc.
&gt; Our bad debt that became a big change is nils in tables. It’s something I really regret. I wonder if this is a "grass is greener" kind of thing. Coming from a string of languages where nil can mean a bunch of different things, having it mean "not found" and only that is such a relief. He frames it as a missing feature "I want to be able to put nils in tables" but I believe that the more important feature is "I can look at a nil value and know that it specifically means the value I requested was not found." There are many cases where the removal of an ability is a net gain because of the stronger guarantees it gives you (for instance, giving up the ability to malloc in exchange for GC) and I strongly believe this is one of them.
You could use a regex library.
&gt;You could use a regex library. @4forpengs Refer to OP, says Lua patterns and not Regex &amp;#x200B; [https://www.lua.org/pil/20.2.html](https://www.lua.org/pil/20.2.html) PiL has a good reference page for Lua patterns. &amp;#x200B; [https://alvinalexander.com/programming/printf-format-cheat-sheet](https://alvinalexander.com/programming/printf-format-cheat-sheet) Since C format specifiers are the same thing, you can also use references for these.
I tend to like [devdocs](https://devdocs.io/#q=lua%20patterns)
When?
* Lua is usually embedded into other software to allow extension, but nobody here can read your damn mind to know *what* software you're using. * This sub is for Lua the programming language, not for providing newbie support to every non-programmer that uses some random piece of software that uses Lua. You should be asking on the appropriate subreddit or site for whatever piece of software you're using. If it exists. We have no way to know because, again, you *didn't bother mentioning it.* * If you're going to ask for help with code, for the love of god, learn to indent it sanely so people can actually read it. * It's only 18 lines, just use reddit's code block instead of forcing people to go to another site to see your code. That's really only useful for very long blocks of code.
use \`whereis\` to find all the luarocks executables (should be \`luarocks\` and \`luarocks-admin\`) and rename them adding a \`-5.3\` at the end; then just install luarocks again (and optinoally also rename that to luarocks\[-admin\]-5.1 so you always know which one you're using)
I know there's a Luaver app that might help ya. The setup and commands are pretty straightforward -- https://github.com/DhavalKapil/luaver
you just need to install lua51; luarocks installs for Lua 5.1, 5.2 and 5.3 per default on ArchLinux: https://git.archlinux.org/svntogit/community.git/tree/trunk/PKGBUILD?h=packages/luarocks then just run `luarocks5.1` instead of `luarocks`.
`luarocks5.1` doesn't exist
how will that get luarocks to install and use libraries for `5.1`?
You simply install it for 5.1? have you not read the manual?
Once again -- how renaming \`luarocks\` will that install and use libraries for \`Lua 5.1\`? Even if I renamed it into "fdsafdsafdsafd", it'd still continue using and installing libraries for Lua 5.3 because it's been installed configured that way &amp;#x200B; new fresh installed luarocks still uses Lua 5.3
&gt;luarocks installs for Lua 5.1, 5.2 and 5.3 luarocks installs for 5.3 For instance, \`luarocks path\` returns the paths with 5.3 in them only
Once again: luarocks install &lt;abc&gt; will install a package for Lua 5.3 How to "simply install it for 5.1"?
sorry, you are right, either I misremembered or something changed in the package. `pacman -Ql luarocks` shows that configurations are installed for 5.1, 5.2 and 5.3, but I am now also unsure how to use them...
Use `luarocks --lua-version=5.1`
that argument doesn't exist for `luarocks`
maybe it does. Nonetheless, it's still got 5.3 in its paths: ``` luarocks path export LUA_PATH='/home/my_user123/.luarocks/share/lua/5.3/?.lua;/home/my_user123/.luarocks/share/lua/5.3/?/init.lua;/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua' export LUA_CPATH='/home/my_user123/.luarocks/lib/lua/5.3/?.so;/usr/lib/lua/5.3/?.so;/usr/lib/lua/5.3/loadall.so;./?.so' export PATH='/home/my_user123/.luarocks/bin:/usr/bin:/usr/local/sbin:/usr/local/bin:/opt/openresty/bin:/opt/openresty/nginx/sbin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl' ```
Yes, it continues using 5.3 ---- luajit LuaJIT 2.0.5 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/ JIT: ON CMOV SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse &gt; require "socket" error loading module 'socket.core' from file '/usr/lib/lua/5.3/socket/core.so': /usr/lib/lua/5.3/socket/core.so: undefined symbol: luaL_setfuncs stack traceback: [C]: at 0x559419d03fb0 [C]: in function 'require' /usr/share/lua/5.3/socket.lua:12: in main chunk [C]: in function 'require' stdin:1: in main chunk [C]: at 0x559419cb4c00 &gt; ----
It does, I just confirmed it. I wasn't even aware of that xD It seems to be undocumented though, or at least it doesn't show up in the builtin help.
Could you add it?
That's your luajit configuration doing that. How are you setting up \`LUA\_PATH\` in e.g. your .bashrc?
Iterate with "while" not with "for" and break the loop when you get an error or an empty page.
I actually don't know Lua , i am a Python developer, i hope i cant find that Scripts about for the "while" in the internet.
https://duckduckgo.com/?q=lua while&amp;t=fpas&amp;ia=web&amp; First three results seem relevant. Also https://learnxinyminutes.com/docs/lua/
What do you mean by "binary" data ? What's the problem with the response type here ?
In Lua a byte buffer and a string are basically the same thing (in at least 5.2 anyway). There is no vector type, only tables which do not have contiguous storage.
[Corona SDK](https://coronalabs.com/) and [Gideros](http://giderosmobile.com/) are good 2D mobile frameworks. [Roblox](https://www.roblox.com) as meme-y as it is provides an amazing developer environment.
What Lua version is it for?
I know what what was said.
Hey, here I do it [https://medium.com/@vazquezrius.miquel/secondkeyboard-1c39e52e023b](https://medium.com/@vazquezrius.miquel/secondkeyboard-1c39e52e023b) ! If you follow the instructions it will get set up automatically! &amp;#x200B; Basically what I do is: minimize Lua Macros (first lines of the script), and then create a Windows Scheduled Task to run on "log on" which automatically opens it!
Hey, solution here ( [https://medium.com/@vazquezrius.miquel/secondkeyboard-1c39e52e023b](https://medium.com/@vazquezrius.miquel/secondkeyboard-1c39e52e023b) )!
Other than allocating a great deal of memory, is there a way to check for GC64 support from Lua?
It's hard enough to find one for many mainstream languages, let alone Lua. Your best bet is to embed Lua within a language which has a good AR framework.
I did the first 25-30 of the [99 Lisp Problems](https://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html).
Project Euler.
I'll take a look at it, although math ain't my strong suit
 local toggle = true if toggle then -- do stuff toggle = false else toggle = true end
Not bad, is there any way for it to handle escaping tho? This is one of my attempts at doing this: https://github.com/AshleighAdams/LuaFlare#templating-system
how do I bind this with the arg system. For example like arg == 3 or something.
I did not implemented escaping, but there is no limitation on that. You can just implement your own function. Maybe, i can implement a pack of helpers with useful functions including escaping, but either way, the main focus of this module is on being simplistic and non opinionated
Animal:Eat() is the same thing as Animal.Eat(self) - you can read [here](https://www.lua.org/pil/16.html) for more info
Wrong. `Animal:Eat()` is the same as `Animal.Eat(Animal)`
Using the colon literally just passes the table that your function is in as the first argument to the function, so `t:f(...)` is equivalent to `t.f(t, ...)`.
yeah sorry, "self" when defining it but when calling it if you wanted to use dot syntax you'd put the actual object there. The colon substitutes for making the first argument passed be "self" is the point though
I think I get it, but what would you need this for is the question now.
If you've never used object oriented programming before, and the rest of Lua is a struggle, you can kinda just ignore this for the short term &amp; just use whichever the docs say is the right one for your particular case Lua is imo not a great language to start with object oriented coding in because classes etc aren't built into the language, even though it does support defining inheritance and stuff - so if you're totally lost by all of this don't get discouraged, either try and figure it out with another language first, or go through the motions if you can get something working &amp; worry about understanding later, or just totally ignore this for now. (some people might disagree with me on the first two paragraphs, and they might even be right, but my experience has been what i wrote) With that out of the way, the reason for doing this is so that you can define "objects" that have "custom types" or "classes" and then these classes can have functions that act on the objects. For example a "string" lets you "gsub" or "find" and an "animal" lets you "eat" In order to act on an object that isn't global scope, a function needs to know about it, i.e. it has to be passed as a parameter. So every time you write or call a function you're saying Animal.Eat(Animal, foodType, foodQuanity) and you're like holy shit I hate writing this out every single time the first param is REPEATED TWICE ALWAYS and so you might say "ok lets make a special syntax for this" and just write Animal:Eat(foodType, foodQuantity) and then you're like ahhh thank god now i can save 10 characters of typing every single line at the cost of just slightly hiding what is actually happening
IMO, escaping by default is better than treating strings as HTML by default. It is way too easy to mess up the escaping if you have to rely on manually calling functions from a helper library. And the worst part is that if you mess up you only discover it much later wjdnyou finally get an input with special characters.
If you want to sort within those groups, you should keep each group in a separate table and sort them (and table.concat back to that joined representation). If you want to just keep the separators in the same place (index), I think saving those indexes is the best way, sort, then insert them - or even better, don't insert them to tasks take at all, just add them when printing it to the user. Of course, you could play with some sorting function shenanigans to have them ignored, but that definitely would be poorly readable, convoluted and inefficient.
You don't really need it, but you may want to use it depending on your taste. It's so-called [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar).
**Syntactic sugar** In computer science, syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer. For example, many programming languages provide special syntax for referencing and updating array elements. Abstractly, an array reference is a procedure of two arguments: an array and a subscript vector, which could be expressed as get_array(Array, vector(i,j)). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I was afraid it would have to come to this. From a CS algorithms perspective why is it so important that the comparisons in the sort be `compare(a, b)` == `not compare(b, a)`(saw this on StackOverflow). I don't see why this can't be a valid sort function: function comparer(a, b) return true end
Assuming that you want to take *text\_in* as input and let your function produce *text\_out* as output: text_in = [[ === + 6: Some task + 9: Some task - 8? Some task === - 8? Some task - 9: Some task - 5: Some task ]] -- becomes -- text_out = [[ === - 8? Some task + 6: Some task + 9: Some task === - 9: Some task - 8? Some task - 5: Some task ]] Considering that algorithm always naturally follows from data structure, what you want is to create a series of transforming steps that each seeks to transform the data as little as possible. That will contribute to three desirable features: 1. each transformation step function is as small and as simple as possible 2. each such function can trivially be tested separately 3. each such function is even reusable outside its immediate context (this is important in larger projects) **Step 1** text_in = [[ === + 6: Some task + 9: Some task - 8? Some task === - 8? Some task - 9: Some task - 5: Some task ]] -- becomes: deserialized_phase1 = { { "group_sep", "===" } , { "line", "+ 6: Some task" } , { "line", "+ 9: Some task" } , { "line", "- 8? Some task" } , { "group_sep", "===" } , { "line", "- 8? Some task" } , { "line", "- 9: Some task" } , { "line", "- 5: Some task" } } -- table = deserialize_phase1(string) --&gt; the function accepts a string and returns a table This first intermediate data structure is some kind of tagged union that reflects the difference between group separators and ordinary lines. For the purpose of sorting, it will also be necessary to inspect the details of each line. Hence, in a next transformation step you obtain: **Step 2** parsed_phase2 = { { "group_sep", "===" } , { "line", 6, ":", "Some task" } , { "line", 9, ":", "Some task" } , { "line", -8, "?" , "Some task" } , { "group_sep", "===" } , { "line", -8, "?", "Some task" } , { "line", -9, ":", "Some task" } , { "line", -5, ":", Some task" } } -- table = parse_phase2(table) --&gt; the function accepts a table and returns a more extensively parsed table Now it will become necessary to group the data. It also allows us to drop the group separator lines and line tags: **Step 3** grouped= { { { 6, ":", "Some task" } , { 9, ":", "Some task" } , { -8, "?" , "Some task" } } , { { -8, "?", "Some task" } , { -9, ":", "Some task" } , { -5, ":", Some task" } } } -- table=group(table) --&gt; the function accepts a flat table and returns a nested table Next it is trivial to sort each table in the grouped table: **Step 4** sorted= { { { -8, "?" , "Some task" } , { 6, ":", "Some task" } , { 9, ":", "Some task" } } , { { -9, ":", "Some task" } , { -8, "?", "Some task" } , { -5, ":", Some task" } } } -- table=sort_grouped(table) --&gt; the function accepts a nested table and returns a sorted-nested table Next, you can serialize the sorted table into a string: **Step 5** serialized = [[ === - 8? Some task + 6: Some task + 9: Some task === - 9: Some task - 8? Some task - 5: Some task ]] -- string=serialize(table) --&gt; the function accepts a nested table and returns the string containing its seralization As a later optimization, you can use lazy evaluation to avoid instantiating every intermediate step in full, in memory. However, you will not be able to avoid to hold the input and output tables in memory during the sorting task itself, which will invariably need arbitrary random access to each item. Still, this will only become an issue if you intend to operate on (very) large amounts of data. Without designing a set of intermediary results, your program will become quickly unreadable, and also difficult to test, even for a relatively simple sorting job like this one. By the way, it undoubtedly takes more time to design the intermediate data structures that will facilitate solving the problem than, after that, to actually write the small function required for each step. If you do not design intermediate data structures, you could still try to save the day with intense programming heroics, during long hours, and produce complicated code that barely works, if even, but even then your source code will still generally be considered to be unmaintainable.
This man engineers software. I personally would have skipped steps 1-2, but the reason for having those is reusability, and my projects are usually small. That said, this answer is very correct; steps 3-5 are necessary to solve your problem.
Without any external calls/libraries the polling loop is your only option. With external stuff, there'd likely be some delay function you can use - lots of variants, lots of libraries. But this is all written on the page you've linked to. So what exactly are you asking?
This man engineers software. I personally would have skipped steps 1-2, but the reason for having those is reusability, and my projects are usually small. That said, this answer is very correct; steps 3-5 are necessary to solve your problem.
I was asking an opinion on the best and yet easy methods. The cheating part was some instruction on how to structure the text. My first thoughts are Pascal and C oriented; Variables and such declared up top, then functions and procedures, then the main program. Lua escapes me in how it works with program structure. TLDR; The sleep is already linked in my OP and the rest is simply studying Lua on my own. No external help needed. TLDR2; I was being lazy and you've prompted me to do it myself. Motivation is nice.
Your disclaimer makes me think you’re trying to make an auto script of some sort. I don’t think anyone here would actually mind. We just focus on the code.
Great post
Because `table.sort` treats the operation like `&lt;`. You could also make a sort using `&lt;=`, but that's not what the standard library chose. One reason for it to be like this is because in Lua 5.1, there is no separate `&lt;=` metamethod. So programmers would to implement both `__eq` and `__lt` in order to not provide a comparison function.
Have you considered using coroutines/fibers for an actual task? Maybe 32,000 fibers are as performant as 3,200,000 coroutines. I doubt it! But maybe.
I think in the one-before-last paragraph you meant Ruby, but you wrote Lua two times. Don't want to be a jerk however. Interesting post.
Read again ;) &gt; the same starting point **as** with Lua I have to admit though, I even misread that myself the first time after reading your answer :) Rewording it a bit to make it easier to read anyway
Sorry if I seemed a bit too annoying, this post was really interesting :D
Less coroutines should, in theory, perform better. The reason why I wanted to go as high as possible is because I'm considering the viability of attaching coroutines to dynamically created objects to manage their internal state.
&gt; I started with 1 million coroutines in Lua, which went well; so I turned it up to 2 million and just took longer. Turning it up to 4 million is where it finally crashed on my PC. This is pretty normal behaviour. Matching the number of times you spawning something against your CPU is difficult. You need to profile actual tasks before you choose how many times you'll need to do it. For example, I have a project that needs to process ~2million images in Python. All of it can be safely done in parallel... That doesn't mean I can just spawn 2 million green threads though. Well, I can, but it's far slower than what I profiled to optimum - which was about 20,000 on the production server and about 3,500 on the dev computer. Just spawning threads until crashing doesn't really tell you much of anything - it just tells you when you run out of assignable memory, which could be a race condition around context switching.
&gt; Just spawning threads until crashing doesn't really tell you much of anything - it just tells you when you run out of assignable memory, which could be a race condition around context switching. Yes, of course. This benchmark was just meant to explore what kind of numbers we're even takling about, with a margin of error of one or two orders of magnitude. In other words, I just wanted to know if I can spawn thousands, millions or even more coroutines. The results underline this, with Lua achieving results in the millions, yet ruby only getting to tens of thousands. That's two orders of magnitude already! But sure, for everyone less experienced reading this: This doesn't mean that *Lua in general* maxes out at exactly two million coroutines, nor does it even mean that you should ever assume that even just 1000 is universally possible; just consider that Lua runs on a NodeMCU. I haven't tried it, but I'd bet it'd run out of memory even before spawning a thousand coroutines. Always write your own benchmarks and test for your specific requirements. Take benchmarks with a grain of salt, even if they're your own and you believe that you've accounted for everything.
&gt; The results underline this, with Lua achieving results in the millions, yet ruby only getting to tens of thousands. That's two orders of magnitude already! But, again, how much work each can perform in the two languages may not be comparable. Maybe Lua's threads are lighter in memory, but churn I/O worse. Maybe Ruby's are heavier in memory but can switch faster. I don't see how the benchmark shows anything at all.