Exactly what I was looking for thank you so much!
&gt; What formats do you all use when you update your code? I generally start at `0.1` and increment the minor version for fixes and the major version for big features. &gt; if there is one that is a usual go-to that is more widely recognized I'd rather stick with that. Nope. There isn't a "standardized" way to version your software. There is a good mix of styles and formatting. The only thing that is broadly applicable is that there are usually some form of major version and some form of minor version. Pick something that works for you and stick to it. Some projects follow the scheme suggested by /u/haromakari Some projects move so fast they just have git generate a version number based off of commit numbers Still other projects (like TeX) to other weird things like approaching `pi`, each version is just `pi` approximated to one more digit of precision than the previous verison. 
There's lots of fantastic standards nobody uses. It's the sad truth of the XXI century software development landscape.
When returning multiple values from a function, all additional results past the first will be discarded if the function call is not the last expression in the expression list. Of course, this applies to table constructors and multiple assignment as well as function calls.
Programming in Lua should definitely be on there. The sidebar is getting long, considering using the subreddit wiki might be a good idea. Mind you, resources for more advanced users (Lua Programming Gems, at least chapter 2, A No Frills Introduction to Lua 5.1 VM Instructions, The Implementation of Lua 5.0, the O'Reilly Lua API book, et cetera) wouldn't be a bad addition either.
Which sort of makes sense because it makes it safe to always use a function call as a parameter and it won’t clobber other parameters you might be trying to also pass. 
Is this open source? If you really want it to be fast and optimized, you should do the LuaJ approach of emitting JVM bytecode and let HotSpot JIT that.
It will be open source as soon as I have reasonable results. The code generation is a thin and pluggable layer so lots of options there - (Java source, JVM bytecode, C-- source, etc.). I am mostly interested in doing Lua specific optimizations, for example agressive unboxing, global elimination, in-place string operations, etc. For now I am focusing on generating Java source because of easier debugging, but as I said, it can be easily changed later. Once I publish a working prototype, I'll probably post it here.
Yea I agree, although it is counter-intuitive when initializing arrays like this: `tb = {f(), g()}`
Sweet.
Maybe you should at least link to where the stream will be so people can actually watch it, just sayin' xD
Thanks so much for the suggestion! I went ahead and added the link to the youtube stream. 
Yeah, I wish we had a way to do stuff like this without temporary tables but I guess it's just too deeply engraved in optimizations already.
Is it definitely ‘1 or 2 or 0’? It would make sense if it were ‘a or b or 0’.
It really just does this some_function(1, false) in a weird way :|
In my lifetime, I've written four programs that worked like this. In my experience, most people don't get this type of design until they've seen one evolve in front of them. For someone who's just starting to embed Lua, I'd expect their evolution to go something like the following: * initial attempts will expose simple C/C++ calls without much associated data. * after they hit the limits of this, they'll move to lightuserdata (AKA pointers) and manage resources (e.g. memory or file descriptors) themselves (**Note:** my rule of thumb in lightuserdata--never use it for primitives you want to use broadly as they're too primitive.) * after that gets tiresome, they'll move to proper userdata with C/C++ meta-methods and, important distinction from previous, an associated *__gc* meta-method to enable RAII. At some point, if you're security-minded, you'll look at creating sandboxes with environments (these are called something else now IIRC). Finally, if you're interested in semantic elegance, you should plan on iterating your Lua primitives several times to improve the consumer's\* experience as you're essentially creating a domain-specific language for your application. \*the consumer is the person writing the Lua scripts/plugins, **not** the C/C++ developer. Echoing Richard Gabriel, if you have to write more complex C/C++ code to make the Lua interface simpler or less error-prone, do it.
Or perhaps there was some wild refactoring going on, and those used to be variables at some point...
That means the following is 100% valid to a lua parser. It won't **run** without the proper environments set up and functions defined, but it is entirely possible to write an OOP library that will allow you to write classes like this. class "Entity" { public_var "position"; public_var "size"; public_fn { new = function(position, size) self.position = position self.size = size end }; private_fn { move = function(disp) self.position = self.position + disp return self.position end }; } It almost looks like a different language entirely! I love how lua gives us just the right amount of syntactic sugar to do stuff like this. I actually have a [WIP library that does something similar](https://github.com/novemberisms/calcifer), but had I known about using semicolons instead of commas, I would have designed it differently altogether!
Maybe it was some sort of debug/testing stuff that never got cleaned out. 
That was the exact function call, with the name changed.
This is really late, but have you tried reading the manual? Specifically the [section on expressions](https://www.lua.org/manual/5.3/manual.html#3.4) explains what you’re wondering about, precisely.
It can be used to remove ambiguity from multi-line statements, and as OP literally demonstrated, it has a use in tables. 
But when used in multiline statements, it doesn't *really* do anything, right?
It does. It's an optional separator, meaning statements are separated by it unless it's the case of a table.
I have a theory about this. The function presented was from a mod for a game. A game that has lots of mods that borrow from each other and get rehashed in other forms. Some are huge interface changing mods with tons of features. While some are just one off standalone mods that likely borrowed from one of the bigger mods. I have a feeling the original author of this code added that goofiness to see how many times it would get repeated by people hacking his code to make their own mods.
It's an "optional separator" in the sense that adding extra whitespace is also an optional separator.
It will cause a syntax error where a space would not.
I actually learned this in early 2017, so not too recent, but I really like that you can modify the metatable for strings. You can do a lot of crazy shit. (My favorites include concat. using `+` and Python-style formatting using `%`) `getmetatable( "" )`
it Does do something. There are cases where the lua interpreter can interpret a statement in multiple ways with entirely different outcomes. That's where the semicolon comes into play. I'm not sure, but I think the following is such a case: some_fn()("some_str"):sub(1, 2) you may mean to call the result of some_fn() with the argument "some_str" and do a string.sub with that, but you may also want to call some_fn() and just do the string.sub of "some_str". In the 2nd case, you'd just put a semicolon between the first &amp; the 2nd pair of brackets to tell the interpreter that these are 2 separate statements. Note that I know it doesn't make any sense to call str sub without storing the result, it's just an example.
Ah, interestingly this is new! In 5.1, it's instead used in the definition of a "chunk" and isn't a statement on its own: chunk ::= {stat [`;´]} [laststat [`;´]] So print("Hi");; is valid in 5.2/5.3 but not 5.1.
That's really cool! Thanks for sharing. The substring index in particular can be very handy. As far as I know, the latter doesn't work because the `or` operator can only have a single value on either side, whether or not the right hand side actually gets evaluated. Something like `print(unpack {1, 2, 3} or 4)` will only print `1`. If you pretend you're the lua interpreter, you read it from left to right and you first encounter `unpack {1, 2, 3}`, and it's easy right? You now have a multivalue `(1, 2, 3)`. Now you find the `or` operator. It now has `(1, 2, 3) or 4`. The interpreter doesn't know how to do that because `or` only accepts a single value on either side, it actually doesn't deduce at this moment in time whether the left hand side is truthy, so it truncates it down to `1 or 4`. And now it can evaluate the *operation*. Since `1` is truthy, it never *evaluates* 4 and returns `1`, but it still had to discard the extra values `2, 3`. So that's why the modulo operation complains. Because if you have "%f, %f, %f", it expects three values but it only got one. EDIT: I also played around in the REPL and found that doing `print(1, 2, 3 or 4)` prints `1, 2, 3`, but only because it parses it as `print(1, 2, (3 or 4))`. Doing `print(unpack {1, 2, 3} or 4)` only prints `1`. Looks like I can add this behaviour to the list of surprising lua things I found out just recently.
You didn't add \_\_add.
Yes. Here is an interesting implication when you consider that break is no longer required to be the last statement: http://lua-users.org/lists/lua-l/2012-05/msg00405.html
I only recently found out that you could get the first element of an argument list `...` by simply wrapping it in parentheses like this `(...)`. This just wasn't that important in everyday code, but it became essential in that experiment I did some weeks ago about writing code without using any variables (including no named function arguments).
Nice example, though I'd probably do the public/private thing a bit different and just switch between the two with `public;` and `private;`. They just need to be some sort of token, maybe even just the strings "public" and "private". Then `fn` would just need to be a function that returns a function that returns a table with method information. In the end you just get an array with tokens, variables and methods that you can use to build your class. I actually really like this approach to OO in Lua. Instead of having an actual prototype-like class, you get an array of class data, to which you possibly add some methods. This makes inheritance much easier, as you can just create a new class using the old data instead of having meta-meta-meta-tables xD
`unpack( b ) or b` doesn't work, but consider this: `function(tab, other) if next(tab) then return unpack(tab) else return b end` It's short enough to be written inline, or you can use a named function instead if you want to keep your code cleaner.
I'm not that well versed in Lua. How would that work? I know you can call a function without the paranthesis for one parameter, but how does the table after the class name fit into this?
Calling a function without parentheses actually only works if you're passing in only one parameter that is either a **string** or a **table**. `myFunc "hello world"` will work fine. `myFunc { 1, 2, 3 }` will also work! but something like `myFunc 12`, `myFunc true` or `myFunc myVar` won't work. So the trick to get `class "ClassName" {}` to work uses the fact that you can return a function from a function. With parentheses, you can read it this way: `class("ClassName")({})` or simply `func()()` `class "ClassName"` returns a function that takes in a single table as an argument, and then that function is immediately called with the class body table. So the definition for `class` would be something like function class(classname) -- set up stuff return function(classbody) -- do stuff for the class body end end and so that's how this trickery is done in Lua. It looks pretty magical, but once you know the trick, it makes perfect sense.
Wow thanks! That makes perfect sense and is pretty amazing. I'm definitely going to play around with this. In fact I already have, but it's definitely not up to actual Lua industry standards. I'm mostly writing Lua code for a 12 year old game that uses Lua 5.0 and produces corrupt save games when more than one level of metatables or upvalues are used, so I'm working with some limitations. &amp;#x200B; But here is the prototype I have so far in case anybody can use it: local classes = { currentDef = nil } local function cloneTable(tab) local clone = {} for k, v in pairs(tab) do if type(v) == "table" then clone[k] = cloneTable(v) else clone[k] = v end end return clone end local function class(name) classes.currentDef = name return function(tab) classes[classes.currentDef] = tab function tab:new(...) local obj = cloneTable(self) obj.new = nil if obj.constructor then obj:constructor(unpack(arg)) end return obj end classes.currentDef = nil end end class "Hello" { constructor = function(self, a, b) self.a = a self.b = b end; print = function(self) print(self.a) print(self.b) end } --usage local Hello = classes["Hello"] local helloObj = Hello:new("a", "b") &amp;#x200B;
[lua-fmt](https://github.com/trixnz/lua-fmt) is the best I have tried
As long as you have separate child states of the main lua states, you can safely multithread lua (NOT COROUTINES) without modifications. Each thread shares the same global state. This is awesome when you sandbox your threads and make the global state inconvenient to change.
https://packagecontrol.io/packages/LuaFormat looks good
CL scripting gets even better with [LuaSH](https://github.com/zserge/luash)
Based on the discussions about new ways to write classes I've created a little git repository with a prototype. [github repository](https://github.com/SvenMarcus/classy) If anyone has any suggestions for improvement I'd be glad to hear them, as well as any hints how I could fix the issues for my specific use case mentioned in the readme.
[lua-parser](https://github.com/andremm/lua-parser) might do what you want. It parses Lua to an AST and can print said AST, but I don't know how it formats it. Certainly worth having a look at it, and it's written in Lua, which is also a plus.
In the same vein, I'm writing a UI framework based on wxLua where widget compositions are declared like this: &amp;#x200B; panel {title = '\*Object Inspector\*', tab\_boundary = true} { layout\_vertical {} { splitter {id = 'splitterOut', orient = 'horizontal', proportion = 3, initialize = 1} { splitter {id = 'splitterInspect', orient = 'vertical'} { notebook {id = 'notebookMy', proportion = 3} { splitter {id = 'splitterCallStack', orient = 'horizontal', title = 'Call Stack'} { list {id = 'listCallStack', proportion = 1}, splitter {id = 'splitterLocalUpvalues', orient = 'horizontal', title = 'Local/Upvalues', proportion = 2} { list {id = 'listLocals', proportion = 3}, list {id = 'listUpvalues', proportion = 2}, } }, list {id = 'listGlobals', title = 'Globals'}, list {id = 'listRegistry', title = 'Registry'}, list {id = 'listDerived', title = 'per-object values'}, }, }, input {id = 'textOut', style = wx.wxTE\_MULTILINE}, }, layout\_horizontal {proportion = 0} { button {id = 'buttonCallStack', label = 'run default dialog'}, button {id = 'buttonDump', label = 'Dump stack info'}, } } } &amp;#x200B; Similarly, I'm now looking if semicolons makes it look better.
In the same vein, I'm writing a UI framework based on wxLua where you declare wdget compositions like this: panel {title = '*Object Inspector*', tab_boundary = true} { layout_vertical {} { splitter {id = 'splitterOut', orient = 'horizontal', proportion = 3, initialize = 1} { splitter {id = 'splitterInspect', orient = 'vertical'} { notebook {id = 'notebookMy', proportion = 3} { splitter {id = 'splitterCallStack', orient = 'horizontal', title = 'Call Stack'} { list {id = 'listCallStack', proportion = 1}, splitter {id = 'splitterLocalUpvalues', orient = 'horizontal', title = 'Local/Upvalues', proportion = 2} { list {id = 'listLocals', proportion = 3}, list {id = 'listUpvalues', proportion = 2}, } }, list {id = 'listGlobals', title = 'Globals'}, list {id = 'listRegistry', title = 'Registry'}, list {id = 'listDerived', title = 'per-object values'}, }, }, input {id = 'textOut', style = wx.wxTE_MULTILINE}, }, layout_horizontal {proportion = 0} { button {id = 'buttonCallStack', label = 'run default dialog'}, button {id = 'buttonDump', label = 'Dump stack info'}, } } } Similarly, I'm now looking if semicolons instead of commas makes it look better.
To make a Lua pretty printer, I guess. 
http://www.troubleshooters.com/codecorn/lua/luaoop.htm
What do you even mean by that? Lua object orientation will always be based on tables (data) and functions (methods). There's lots of ways to combine those two tools to build proper class-based object orientation.
metatable objects are more extensible, you can add custom operators and what not, but i think function based objects are faster.
You need to copy lua.exe somewhere to your hard drive, and then [add that hard drive folder to your path.](https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/).
He probably mean closure-based vs metatble-based OOP.
[removed]
I don't think speed is a worthwhile consideration if you're doing OOP in Lua though :P
I wasn't happy with other formatters I found, [so I began writing a script to do it in Lua](https://github.com/CurtisFenner/luafmt). There are caveats: * It only handles code that's (pretty close to) syntactically correct and will hit assertions/errors for code that isn't [this is safe with the `--f` flag because it only writes once it's done formatting] * It only targets Lua 5.1 code, so if you have `goto`s or labels, it will be very unhappy * It can be slow, because of the way it handles line breaking. This is only a problem really when you have huge table literals with many, many elements. * It's very opinionated -- it makes your code look like how I write it :) This may not be to your taste and may make the file you have look pretty ugly.
Lua is not a Linux tool.
Bad wording on my part - it's a tool which useful in any environment. The rest still applies. 
&gt; The rest still applies. Your entire post is factually accurate, but not of it *applies* to the OP's post. It's equivalent to him saying "I can't install Lua in Linux" and you telling him how he can run Windows binaries on Linux via Wine. There is no foreign OS substrate needed here. Lua is a language, and it has interpreter binaries available for every conceivable platform.
It runs without errors in ZBS here, which uses LuaJIT for the 5.1 interpreter. Output: Hello World Hi! My name is Slim Shady Hello World Override hello
Thanks for checking it out! Yeah I found the issue. In regular Lua there's automatically a variable "arg" for varargs which is not present for LuaJIT, so that's where things went wrong
Thanks for checking it out! Yeah I found the issue. In regular Lua there's automatically a variable "arg" for varargs which is not present for LuaJIT, so that's where things went wrong
As I mentioned above, you can use Lua for describing logic, connected to a core, as a very powerful design for any kind of app that requires it, and games are just a presentation of that and fit well in this design, but the usage of this is far from limited to games. For example, I have written software for access control that had to operate on machinery, doors, barriers etc. but almost every client had different needs how to mix those on different events, triggers, etc. So I separated the "engine" - the low level stuff for operating on the hardware - something that wouldn't change past the initial implementation on the supported hardware, from the "logic" - how every client wants those actually working in what sequences etc. The "engine" was written in c++ and the "logic" in Lua. The clients were amazed (and very pleased) how easy is to even change their sequences on their own (with previous systems they had to wait for months for a change from the developers) for different locations where they want the system deployed. So here is an example of how this can be used in industry completely different from game industry, yet using the same/similar design philosophy and the power of c++ and Lua combined.
Arrays start at 1 
I get error at line 1: "attempt to index global 'lamda' (a nil value)" &amp;#x200B; Also, it's "lambda", not "lamda".
Still error: "lua: lamda.lua:3: attempt to index local 'lamda' (a nil value)". I have no idea what it should do.
Sorry should have posted a gist.
 local function split(str, pattern, start) start = start or 1 local first , last = str:find(pattern) if first then return str:sub(start, first-1), split(str, pattern, last+1) else return str:sub(start, -1) end end names = {split('hans:herbert:horst', ':')} 
Yes, exactly that. It's a bit less nice to read, but you should always define functions as low in the scope as possible only as long as you don't create additional closures. In your case, that'd be the scope of the entire file, or, if you really wanted to avoid polluting that scope, place a `do`..`end` block around the function definition. Also keep in mind that not only is creating closures generally slow and should be avoided when it serves no purpose, but it also keeps LuaJIT from being able to compile the surrounding function at all, as it has no way of turning closure creation into native byte code. So specially keep the above in mind when using LuaJIT and when the code needs to run fast (Like when it's in a hot loop or something)
What does `src/classes.lua` look like? This doesn't seem to be a question about Lua at all, but C++.
I don't think *examples* can explain why something is simple, because what makes something simple is what has been *left out*. For example, Lua is simple because it has a tiny standard library: [The first two columns here is **everything** included in the standard library](https://www.lua.org/manual/5.3/#index). Lua is simple because it has very small grammar, as far as programming languages (other than Lisps) go: [The entire grammar of Lua fits here](https://www.lua.org/manual/5.3/manual.html#9). In fact, the entire description of the language (less the C API (~45 pages), full syntax (~1 page) and standard library (~30 pages)) fits in 27 pages of fairly large print!
It looks like you're trying to compile a lua script with a c++ compiler. You don't need to do that.
Not even a _need_ thing; they literally _can't_ do that. `g++` has no idea what a `.lua` file is or what to do with it. The C++ code will need to dynamically load any `.lua` files it needs. If OP wants to embed Lua scripts (rather than just the interpreter) into the resulting native binary, that's a more advanced topic (depending on their specific goals).
Oh you're completely right. I thought I had something to do with the lua libraries but it's just me being dumb
im not sure if that's what they meant by simple but taking this view of simple, couldnt examples show the thigns that are left out and then explain what makes then simple? i think examples could, waht do you think --- you have other views additionally of simple, again i dunno if the source author meant this you didnt mention how these views of 'simple' are distinct &amp; different from 'easy' within the context of the source in the op, and that is the question asked in the op. or optionally within the context of the views you've said i wanna know what's the difference between easy &amp; simple within the context of progmraming languages 
Nit really an algorithm, but just loop through all the rectangles and get the distance using a^2=b^2*c^2 For example local distance = math.sqrt((x0-x1)*(y0-y1)) if distance &lt; 0 then distance = -distance end
Your math is a bit off: c² = a² + b² You don't need to calculate the root, just compare distance squared. Sum of (real) squares is non-negative.
When you ask programming related question it's always good to provide as much details as possible. Most people don't want to guess what you need help with, and thus you wont get much - if any - help. But someone might find your qestion interesting and be eager to help out if you explain it in detail. It's near impossible to help you out with this unless you you do that. As a lua beginner as well I have no idea where to even start. What game is it? How does interact with it? What is it that you press? A key? Why is your friend such a cheapskate?
client/server server/client... "operation" location client/server... exploration gathering and exploitation. ez...
You can get the first argument by simply using it, no need for parentheses. e.g. `local a = ...` or `if ... &gt; 3 then` Where parentheses are useful when using `...` is when you're using it as the last arg in a function call and you want to prevent it from sending all the following vars. e.g. If `...` contained `1,2,3,4,5` then `print( ... )` would show `1 2 3 4 5` `print( (...) )` would show `1` `print( select(3, ...) )` would show `3 4 5` `print( (select(3, ...)) )` would show `3`
Do you already know OOP and want to learn how to use it in Lua? Or do you want to learn OOP by using Lua? If the latter, I really don't think it's the best way to go. Learn D, C#, Java, or some other language with native OOP support instead. If the former, I'd say pick a framework and run with it. I'm not sure about vanilla Lua frameworks(most of what I've done has been within Love2d) but here's some options to get you started: [https://github.com/LewisJEllis/awesome-lua#object-oriented-programming](https://github.com/LewisJEllis/awesome-lua#object-oriented-programming)
The answer is yes and no. I have worked on pre-existing projects in C# that were built via OOP, and modified classes and code, but never really done a project from scratch. My job is in Lua and PHP, and we have had a lot of discussion about OOP lately, so I was hoping to learn Lua OOP and PHP oop. I found that PHP has a lot more documentation out there than Lua though.
Well you need to understand that Lua is an extremely lightweight language. Most of its "features" are not from the language but from metaprogramming. You should get used to choosing a Lua framework that adds the functionality you want and learning that instead of trying to figure out how to do it in Lua itself. Lua OOP will vary somewhat depending on which framework you decide to use. This is why it may seem like the Lua documentation is lacking. It's not because the documentation is leaving things out, it's because Lua itself is lacking(in a good way IMO. I love that Lua is so lightweight. when I say it's lacking it's not a slight against Lua).
I would go even further and say it's a mistake to bring OOP into a Lua codebase if you are new to Lua. It's not until you've gotten a grasp of how to use Lua in the simple cases that you'll be in a position to understand the few cases in which it makes sense to introduce OOP, and even then if you're new to Lua you'll probably make the mistake of making everything class-based.
Agreed. OOP was a 2000s fad that's actually only useful for a minority of situations. It's certainly not worth forcing your entire codebase to be OOP (looking at you Java and C#) . You're better off learning a language well and knowing how to do something using the native paradigm of the language. Unless it's significantly more trouble to do it naively, there's no point in using OOP just for the sake of it. If you really need OOP for your software then use an OOP language.
&gt; Has anyone found a good project to learn OOP using Lua? I have read through the Lua manual online, but I was really hoping for an actual project to create and be able to work along side. Anyone know of any decent ones? You could adapt any project to learn OOP in Lua. I see you are working with PHP also so I will assume you do a lot of web programming: thus, you could write a Lua web API for an existing API that doesn't support Lua. Maybe something like Google Drive or Dropbox? You just need to write it in an OOP style. 
Since you said you're working in PHP also, I wonder if you've got experience with JS at all? Lua's OOP is very similar to JS's OOP. You can do some stuff with metatables to implement classes and simple inheritance, but you're best bet is to use factory functions ala JS. http://www.troubleshooters.com/codecorn/lua/luaoop.htm http://lua-users.org/wiki/ObjectOrientationClosureApproach
There are numerous Lua bindings for Xlib as well as Xcb, whatever of them you prefer. Just do a web search for "xlib lua binding" or "xcb lua binding".
im not sure if that's what they meant by simple but taking this view of simple, couldnt examples show the thigns that are left out and then explain what makes then simple? i think examples could, waht do you think --- you have other views additionally of simple, again i dunno if the source author meant this you didnt mention how these views of 'simple' are distinct &amp; different from 'easy' within the context of the source in the op, and that is the question asked in the op. or optionally within the context of the views you've said i wanna know what's the difference between easy &amp; simple within the context of progmraming languages 
Funny enough, I haven't done web programming in about 6 years.
I have very little experience with JS. Had to use it like 6 years ago for something, but haven't touched it since.
You also might look at the code for the Awesome and NotION window managers.
So, what are you doing with PHP?
FYI op, luarocks from the Debian repos does - from what I remember - only support v5.1. This might be a problem, depending on which rocks you require for your project.
Nevermind, I managed to build LuaDist from source via cygwin and it works like a charm. Thanks anyway :D
I actually did something KIND OF similar to this some time ago... function half_adder(A,B) local CARRY = bit32.band(A,B) local SUM = bit32.bxor(A,B) return SUM, CARRY end function full_adder(A,B,C_IN) local A1 = bit32.bxor(A,B) local B2 = bit32.band(A,B) local A2 = bit32.band(A1,C_IN) local SUM = bit32.bxor(A1,C_IN) local C_OUT = bit32.bor(A2,B2) return SUM, C_OUT end function half_subtractor(A,B) local SUB = bit32.bxor(A,B) local NOT_A = bit32.bnot(A) local CARRY = bit32.band(NOT_A,B) return SUB, CARRY end function full_subtractor(A,B,C_IN) local B1 = bit32.bxor(A,B) local SUB = bit32.bxor(B1,C_IN) local NOT_A = bit32.bnot(A) local B2 = bit32.band(NOT_A,B) local NOT_B1 = bit32.bnot(B1) local B4 = bit32.band(NOT_B1,C_IN) local C_OUT = bit32.bor(B2,B4) return SUB, C_OUT end 
 function main() print("----Half Adder----") print("A\tB\tSUM\tCARRY") print(0,0,half_adder(0,0)) print(0,1,half_adder(0,1)) print(1,0,half_adder(1,0)) print(1,1,half_adder(1,1)) print("\n----Half Subtractor----") print("A\tB\tSUM\tCARRY") print(0,0,half_subtractor(0,0)) print(0,1,half_subtractor(0,1)) print(1,0,half_subtractor(1,0)) print(1,1,half_subtractor(1,1)) print("\n----Full Adder----") print("A\tB\tC. IN\tSUM\tC. OUT") print(0,0,0,full_adder(0,0,0)) print(0,0,1,full_adder(0,0,1)) print(0,1,0,full_adder(0,1,0)) print(0,1,1,full_adder(0,1,1)) print(1,0,0,full_adder(1,0,0)) print(1,0,1,full_adder(1,0,1)) print(1,1,0,full_adder(1,1,0)) print(1,1,1,full_adder(1,1,1)) print("\n----Full Subtractor----") print("A\tB\tC. IN\tSUM\tC. OUT") print(0,0,0,full_subtractor(0,0,0)) print(0,0,1,full_subtractor(0,0,1)) print(0,1,0,full_subtractor(0,1,0)) print(0,1,1,full_subtractor(0,1,1)) print(1,0,0,full_subtractor(1,0,0)) print(1,0,1,full_subtractor(1,0,1)) print(1,1,0,full_subtractor(1,1,0)) print(1,1,1,full_subtractor(1,1,1)) end 
 -- ------------------------------------------------------------------------ describe("Teste do Full Adder de acordo com tabela verdade", function() it("A = 0, B = 0, CARRY_IN = 0, OUT = 0, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 0,0 local saida, resto = full_adder(0,0,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 0, B = 0, CARRY_IN = 1, OUT = 1, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 1,0 local saida, resto = full_adder(0,0,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 0, B = 1, CARRY_IN = 0, OUT = 1, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 1,0 local saida, resto = full_adder(0,1,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 0, B = 1, CARRY_IN = 1, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 0,1 local saida, resto = full_adder(0,1,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 0, CARRY_IN = 0, OUT = 1, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 1,0 local saida, resto = full_adder(1,0,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 0, CARRY_IN = 1, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 0,1 local saida, resto = full_adder(1,0,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 1, CARRY_IN = 0, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 0,1 local saida, resto = full_adder(1,1,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 1, CARRY_IN = 1, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 1,1 local saida, resto = full_adder(1,1,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) end) -- ------------------------------------------------------------------------- describe("Teste do Full Subtractor de acordo com tabela verdade", function() it("A = 0, B = 0, CARRY_IN = 0, OUT = 0, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 0,0 local saida, resto = full_subtractor(0,0,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 0, B = 0, CARRY_IN = 1, OUT = 1, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 1,1 local saida, resto = full_subtractor(0,0,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 0, B = 1, CARRY_IN = 0, OUT = 1, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 1,1 local saida, resto = full_subtractor(0,1,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 0, B = 1, CARRY_IN = 1, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 0,1 local saida, resto = full_subtractor(0,1,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 0, CARRY_IN = 0, OUT = 1, CARRY_OUT = 0", function() local saida_esperada, resto_esperado = 1,0 local saida, resto = full_subtractor(1,0,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 0, CARRY_IN = 1, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 0,0 local saida, resto = full_subtractor(1,0,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 1, CARRY_IN = 0, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 0,0 local saida, resto = full_subtractor(1,1,0) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) it("A = 1, B = 1, CARRY_IN = 1, OUT = 0, CARRY_OUT = 1", function() local saida_esperada, resto_esperado = 1,1 local saida, resto = full_subtractor(1,1,1) assert.are.equal(saida_esperada, saida, "Erro na saída do circuito") assert.are.equal(resto_esperado, resto, "Erro no Carry Out do Circuito") end) end) -- ------------------------------------------------------------------------- 
Line 3 needs to be `local first , last = str:find(pattern, start)`
they are no help
Do you have a specific question?
What are you asking, it’s not clear.
I'll have a closer look at the code later, but I just wanted to say that from a quick glance this seems to be the best OOP library out there. Keep up the good work! 
All you're saying is you need help. We have no idea what that means. Perhaps they couldn't help because they didn't know how.
I just need help understanding Lua and that code, I don't have a dev team or anything so I gotta do everything by myself.
Thanks! That means a lot considering this is the first little project I've worked on that could actually be useful for other people
So I've been thinking about a little change in the usage of classy. The way I implemented it would allow me to replace the `:` when calling methods with a simple `.` So `person.introduce()` instead of `person:introduce()` However it would still be necessary to add the `self` argument when defining a method. There are a few arguments for and against this change: Pros: - function calling is the same as calling it from a simple table - users don't have to know that there's a class being used behind the scenes - most libraries and usually objects provided by C work with `.` , so in general more uniform way of calling functions Cons: - You still have to define the self argument. People could get confused when reading class source code and expect they need to use `:` when calling a method I'd love to hear some thoughts on that!
this is R.lua a different build of Lua 
anyway, you can help me learn?
Well first steps would be reading the lua docs on [lua.org](https://lua.org), they are quite readable I've found. Look into the roblox documentation as well, I think people would be happy to help you with any specific issues you don't understand.
Pretty sure Op wants someone to hold hands with.
you could also use a global `self` variable. Just set it to the instance before calling the method function and reset it after you're done to whatever it was before.
What are you asking? It's not working or you just don't know what it does? 
You got the cutting tool right there on your task bar, why did you decide to take the picture with your phone?
Copy and paste or use the snipping tool *right on your taskbar*
Both.
If you're lazy when asking for help, people will be lazy when giving help.
How do you know it doesn't work if you don't know what it should be doing at all?
I can understand a little bit of it, it's supposed to give players levels only it's not doing that.
^ This
What's your actual question?? 
How it works so I can fix it. 
"How it works" is too vague. I don't even know what it's supposed to do. And why do you want to fix it? You haven't told us what's wrong with it. What behavior are you getting, and what behavior are you expecting? What have you tried so far and what happened then? And why didn't you give us the code in actual text format, which we can run, test and edit? Do you want us to write it down from your screenshot? Sorry, but this post is a prime example of how NOT to ask for help. 
Hello, and welcome to /r/lua. Please cut and paste your code into a Github gist or something similar so that people can easily read the code and understand it. You should also clearly describe, to the best of your ability, what you think the code does or does not do, and what needs to be fixed. I can help to describe (or better yet post) the context of this code. So if you can provide a link to the software project you got it from, that would also be helpful.
You likely won't get much help with game/app-specific scripts. However, I have found some possible fixes: https://forum.facepunch.com/gmodgd/iziu/Help-Darkrp-Server-Error-s-Cant-Fix/1/#postcamef https://steamcommunity.com/groups/luascripters/discussions/0/152390014793563808/#c152390014793775172 https://github.com/vrondakis/Leveling-System/issues/30
Il look into these sources thanks for your help.
f
Sorry for formatting, I can't seem to figure out how to format the code.
&gt; Only being able to send strings types that end with the character \n is like a new sort of hell to me. Huh? You can happily do: ``` client:send("101") ``` No CR or LF. Client sending is unbuffered. ---- &gt; Would make encryption a lot easier as well. LuaSocket is the definitive socket lib, and LuaSec is the definitive encryption lib that integrates with LuaSocket. It makes it quite simple to use SSL/TLS: ``` conn = ssl.wrap(conn, params) conn:dohandshake() ```
Sorry mate, this isn't the Portuguese Moon subreddit. This is Lua the scripting language.
It's a fun little challenge, although I'm failing to see the use cases. One method is to use an input array, with length of 10 in this case, to keep track of how many copies of each number have been chosen, then pick a random index in the array, add the corresponding number to an output array, and increment the value at the index in the input array. Then check if the value at the index in the input array is greater than or equal to a certain threshold, and if so remove the element from the array. Then you use math.random(1,#input) to select the index of the next number. 
As revereddesecration mentions, a quick and simple way when the range of numbers and number of duplicates is small is to precompute a list of the numbers. for i = min,max,step do for n = 1,dup do buckets[#buckets+1] = i end end -- now randomly pop values out of buckets But that's no fun when the numbers get larger or you want to choose something other than numbers. Let's get super generic and functional. function deduplicatefilter(maxdup, func) if maxdup &lt; 1 then -- okay, if you insist return function() return nil end end local duplicates = {} return function(...) local value = func(...) while value ~= nil do -- only tracks non-nil values local dup = duplicates[value] or 0 if dup &lt; maxdup then -- value not duplicated, add it to the list duplicates[value] = dup + 1 return value end -- else try again value = func(...) end return nil end end randomnodups = deduplicatefilter(2, function() return math.random(1,10) end) for i = 1,10 do print(randomnodups()) end Because the filter passes `nil` values through, you could even put the loop inside the filter then use it as an iterator. 
Assuming the constraint of a selection taking O(1) I got: function mkrndgen(low,high,allowed_dups) local seen = {} local deck = {} local decksize = 0 for i = low,high do decksize=decksize+1 deck[decksize] = i end local available = decksize local seens = 0 return function() local selection if allowed_dups &gt; 0 then selection = math.random(1,available) if selection &gt; decksize then allowed_dups = allowed_dups-1 return seen[selection-decksize+1] end seens = seens+1 seen[seens] = deck[selection] else selection = math.random(1,decksize) end if decksize == 0 then return nil end local choice = deck[selection] deck[selection] = deck[decksize] decksize=decksize-1 return choice end end 
I hadn't thought of adding the duplicates to the deck ahead of time, but that makes my algorithm far simpler. The important piece is the shuffle. (Knuth) This is much more satisfying. function make_shuffle_with_dups(cards, allowed_dups) local deck, decksize = {}, 0 for _, card in ipairs(cards) do decksize = decksize + 1 deck[decksize] = card end local nondups=decksize while allowed_dups &gt; 0 do allowed_dups = allowed_dups - 1 decksize = decksize + 1 deck[decksize] = deck[math.random(1,nondups)] end return function () if decksize = 0 then return nil end local selection = math.random(1, decksize) local choice = deck[selection] deck[selection] = deck[decksize] decksize = decksize - 1 return choice end end 
I'd probably precompute a list of all the combinations satisfying the criterion (I suspect there's actually not that many of them), then when I'd need a list satisfying said criteria, I'd randomly pick one of the combinations and permute it through Fisher-Yates.
Wow, really great response; especially point 2. I see a lot of people here that say Lua being simple means it must be a good language for beginners. Obviously that can be true depending on your definition of "good". Similar to you I started with Lua (with minimal Python knowledge) and moved on to C++ and C#. I've just recently started doing Java as well. I think C# is honestly a great language if you want to learn the big CS concepts, but Lua is simple enough to get your foot in the door as a *complete* beginner. Either is fine depending on your goals.
1. You should provide a reason here. If you just want to learn programming Lua is a good language to consider. 2. This depends heavily on you and your motivation. Lua will not lay you rocks in the way but also will not make your life as easy as some other dynamic languages with richer standard libraries. 3. It is possible but rather uncommon. Lua is more used in configuration and modding. If you like Minecraft there are mods like OpenComputers or ComputerCraft where you can program virtual computers in game. You can also do (2D) small game development in Lua.
1. It can do a lot of really powerful things with a low barrier to entry. 2. Yup. It's a scripting language which most people find to be a good starting place. 3. You sure can, it's not really the best tool for that.
1. ? 2. yes, but you're probably better off with C#, Java, etc. 3. No. Lua is a scripting language not a systems programming language.
&gt; No. Lua is a scripting language not a systems programming language. If you are going to split hairs, systems programs and applications are two different categories.
You can build a portable 3$ web server with [nodemcu](http://www.nodemcu.com/index_en.html) and [nodemcu-httpserver](https://github.com/marcoskirsch/nodemcu-httpserver) library. Or maybe a gadget, controlled from the phone app.
I'm a little frustrated and confused by the answers to #3. I've done a number of utilities (dynamic link dependency analysis, Slackware configuration, VST linux support, print spooler backends) using LuaJIT and C. I'm currently using that combination for embedded drone work to good success. SnabbSwitch is built upon LuaJIT as a framework. While pure Lua by itself doesn't provide much of a library, if you're willing to learn how to write support libraries, it is a very capable applications and system utilities language.
This is not a precompiled Lua chunk. It may be mangled or further obfuscated, or your assumption may be wrong.
Well Minecraft mods are not whole applications but some are quite extensive systems.
I actually think that you need to be more skilled to use scripting languages effectively for anything more than trivial programs. Because you don't get the type checking at compile time.
Yes, I got it already. It was obfuscated.
i've tried pairs instead of ipairs but it throws a error `bad argument #1 to 'next' (table expected, got nil)` which points to two other lua files containing code which is admittedly far above my head (i didn't write it). this is going to be a addon for a existing API(?) to a game. also i read ipairs goes thru the keys of the table in a order based on their position in the table (which is what i want) while pairs goes over them randomly. &amp;#x200B; i've already spent some quality time on [lua-users.org](https://lua-users.org) and thought i could start the learning by doing process. guess i'll have to go back to a lot of if conditions.
pairs should work with whatever ipairs work, you probably had some typo in there. ipairs does iterate in order - on the part of the table that *is ordered*, which is numeric keys from 1 up until the first nil. When you have non-numeric or non-contiguous keys, you have to use pairs and understand that no particular order is enforced. You should use local variables, yeah (and that db inside should be local too most likely). You just don't need to "clear" them at the end of a function (like you're assigning empty string and empty table here). 
Is there a way to "clear" the input before going into the repeat until loop?
Use pairs instead of ipairs. Remove the assignment to cdb in the for-loop, as that assigns nil to cdb thus the error; just call table.insert (cdb, ...) or cdb [#cdb + 1] = value
someone else also suggested `table.append` which worked with the assignment ( so `c_db = table.append(c_db, value`) which left me puzzled as notepad++ wouldn't even recognize it as method. i'll use your notation as it seems more comprehensible to me.
This code works as expected, outputs "Again" once for me. Win7 x64, LuaForWindows 5.1 distribution.
There is no detailed documentation yet, you can read the readme or source code.
Sweet
Now if only I had a Mac lol
From the error it looks like you are trying to require a directory instead of a file. If that doesn't sound right its possible that the problem is you need to escape the space in "Linking Files" as in "Linking\\ Files" If that's not it, post the actual code to make it easer to see the problem and you will probably get a better response.
From the error it looks like you are trying to require a directory instead of a file. If that doesn't sound right its possible that the problem is you need to escape the space in "Linking Files" as in "Linking\\ Files" If that's not it, post the actual code to make it easer to see the problem and you will probably get a better response.
After doing what you said this is it. Main.lua: &amp;#x200B; package.path = package.path .. ";/home/gia/Documents/Linking\\Files" local myClass = require('scripts.scriptTest'); myClass.Dungeon(); &amp;#x200B; scriptTest.lua: &amp;#x200B; local publicClass={}; &amp;#x200B; function publicClass.Dungeon() print('Dungeon Test'); end; &amp;#x200B; return publicClass; &amp;#x200B; &amp;#x200B; New error: &amp;#x200B; lua: main.lua:1: invalid escape sequence near '\\F' &amp;#x200B;
To create a backslash in a string use "\\". 
I'm guessing your previous read was for "*n". Reading for a number consumes only as many characters as possible that look like they could be part of a number. If you start a new line afterwards, it won't be consumed until a subsequent read call. One option would be to assume that input will *always* be terminated by a newline (which is almost true with normal terminal settings). In this case, you can start by reading a line and discarding it (`io.read "*l"`) so that you throw away everything from the end of the number to the newline after it.
You can do it with [ANSI escape codes](https://en.m.wikipedia.org/wiki/ANSI_escape_code) 
**ANSI escape code** ANSI escape sequences are a standard for in-band signaling to control the cursor location, color, and other options on video text terminals and terminal emulators. Certain sequences of bytes, most starting with Esc and '[', are embedded into the text, which the terminal looks for and interprets as commands, not as character codes. ANSI sequences were introduced in the 1970s to replace vendor-specific sequences and became widespread in the computer equipment market by the early 1980s. They were used in development, scientific and commercial applications and later by the nascent bulletin board systems to offer improved displays compared to earlier systems lacking cursor movement, a primary reason they became a standard adopted by all manufacturers. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Though at the cost of terminal portability. Using the C API to call out to NCURSES is really the correct way to do this. I suppose you could read the termcap/terminfo database and implement some form of CURSES in lua, but why? Learning enough C to glue on NCURSES would be easier.
The escape character your page says is "\" in lua right? If yes then i just need to print the escape code i need
Escape is \027, but why why why do you demand "no libraries?" Lua is a language about controlling what you glue onto it. It is very limited on its own.
Well, i said preferably but seen the circumstances maybe a library is what i need. Do you know any?
Write one maybe. I have glue to NCURSES, but it's in a works-for-me state. I think there might be an open-source library for NCURSES, but I don't remember where I saw it; I do remember it was a bit overkill for my purposes.
Ok thanks! I have never wrote a library, so maybe this is the good time I learn how to write one xD
Fortunately, Linux is a good environment for C development work. I wish you luck. What you learn will be useful going forward with Lua.
When I picked lua for my latest project, \[nacl-cli\]([https://github.com/eriksank/nacl-cli](https://github.com/eriksank/nacl-cli)), I hesitated between lua and [https://duktape.org](https://duktape.org/), which is also a nifty, embeddable scripting engine (javascript). However, duktape is in my impression not particularly compatible with the npm repository. It is certainly not tested; while lua can count on the excellent luarocks system. So, I was concerned that, if I went with duktape, I was about to forcibly reinvent the wheel, and have no access to good modules. So, I cut out that risk and I went with lua instead. I am perfectly happy with that choice. It works very well.
 local C = {} local function cIndex(_, key) if C[key] == nil then error('Access nonexistent constant ' .. key) end return C[key] end local function cNewindex(_, key, value) if C[key] ~= nil then error('Trying to change constant under ' .. key) end C[key] = value end return setmetatable({}, {__index = cIndex, __newindex = cNewindex}) this would work like you want it to but personally not a fan of something like this, I'd prefer having too sue some explicit ``C.setConstant``function to set one.
Genius!!!!!!
[http://lua-users.org/lists/lua-l/2003-06/msg00364.html](http://lua-users.org/lists/lua-l/2003-06/msg00364.html)
Fancy seeing you here dzikakulka 😏
Good contribution
Qepd
I'm developing a framework and I used the yaci.lua oop library but I had to modify it to add some things. Now that I see your project I wish to add this library to my projects. Excellent job.
__newindex operates on only new entries. It won't help with overwrites. Also that last statement would need to set the metatable of C rather than a new empty table. function make_constant_table() local tab, shadowtab = {}, {} setmetatable(tab, { __index = function(_, key) assert(shadowtab[key] ~= nil, 'Undefined constant: '..key) return shadowtab[key] end, __newindex = function(_, key, value) assert(shadowtab[key] == nil, 'Attempt to mutate constant: '..key) shadowtab[key] = value end }) return tab end 
Note that you won't be able to do pairs()/ipairs() on this. For lua from 5.2 on and luajit 2.0+ compiled with appropriate options, one should return the iterator on the hidden table: function make_constant_table() local tab, shadowtab = {}, {} return setmetatable(tab, { __index = function(_, key) assert(shadowtab[key] ~= nil, 'Undefined constant: '..key) return shadowtab[key] end, __newindex = function(_, key, value) assert(shadowtab[key] == nil, 'Attempt to mutate constant: '..key) shadowtab[key] = value end, __pairs = function(...) return pairs(shadowtab) end, __ipairs = function(...) return ipairs(shadowtab) end }) end
Yeah, i made it a chunk since that's how OP written it above. As for iterating it I'd probably just add an "iter" function to it with intended usage like "for k, v in C.iterator() do" for full version compatibility. 
Try lapis framework. It have database support and good json handler. Now i built my REST API service with this framework
not really a lua answer but, maybe using AHK would be better?
I know that I can do it with AHK. But it's really important for me to do it in LUA.
No. It sends the system the same signals whether it was done physically or virtually.
Why is it really important for you to do it in Lua?
Further to this, you'd want to be listening to the mouse hardware to be sure that the mouse is the origin. 
Is there some reason you can't use a keyboard? You could just use a rarely used key instead, then you don't need to worry about this.
This was posted to r/lua just a few days ago: https://github.com/tboox/ltui
baz is kept alive for as long as its closure bar is kept alive. When the script returns, they are lost, assuming nothing else references bar.
Interesting. That was my understanding of things. I guess I'll have to let it run it again and see if it continues to happen.
The idea is, as long as you're using stuff (or using stuff that uses it etc), stuff won't be garbage collected. That's the whole idea of GC. If you observed something turning to nil, it wasn't GC since it doesn't touch stuff until its unreachable for your code. 
If Im not mistaking, Local variables exist on the stack at special registers, Lua will avoid writing them to global tables. When the stack fram is over, they disappear without needing to call the GC. Locals are always faster than globals, so you are advised to use them as often as possible.
Upon further examination, it seems a function within the host program's API is very rarely returning `nil`. It's closed source, but I'll submit a bug report and write a workaround for now.
Cool, I didn't know they skipped the garbage collector. Thanks.
Locals are treated just like anything else when it comes to garbage collection, they just have narrower-than-global scope. There's no skipping GC.
They don't. They still get garbage collected. It's just the scope they happen at is more instantaneous.
In luajit at least, foo stays in scope until the chunk exits regardless of whether or not it's subsequently referenced. 
Use of locals as a speed hack is not always necessary in luajit. Mike Pall in fact recommends against it in some cases.
Lua is great to begin with (any language is great to begin with), feel free to ask any questions. Just start writing something and keep going and things will get clear.
1: set a goal 2: learn 3: accomplish the goal 4: repeat until your friends and family are satisfactorily alienated.
Yeah, any programming language can be tough at first. [Scratch.mit.edu](https://Scratch.mit.edu) is very similar, although there's no built in drawing or audio in Lua, you'd need external modules for that. Most of it is just a matter of getting used to the language. You can watch some Lua youtubes, and get immersed that way.
Also: I'd install, then look though example Lua code for [love2d.org](https://love2d.org) and [tic.computer](https://tic.computer) apps.
Very cool idea, thanks for sharing. My first thought was that it's similar in intent to (direnv)[https://direnv.net/]. Pros of this seem to be that it doesn't require any kind of persistent program or setup, with the expense that it requires longer commands. But for use case of "custom programs specific to a directory", why not just use shell scripts? 
I'd also say to #1 make the goals small at first. You can also start with one larger goal that you break up into many smaller goals. In my experience, it's a skill you'll use about as often as coding. 
Not built in, simplest and probably most popular lib for that would be luasocket. 
Hi Keith, thanks for you comment! I'm not sure if I completely got your question about why don't I simply use shell scripts for directory specific commands, but here are a couple of thoughts: - I wanted a simple enough interface to be able to group (i.e. nest) multiple commands from the same context; - I prefer having a simple configuration format to having multiple shell scripts (or a single more complicated one); - it crossed my mind to add a couple of helper functions to be available within the config file (e.g. aliasing aliases: let's say you wanted to use both `aka docker up` and `aka d up` without having to use a bunch of duplicate declarations in the file) which would make it a tiny DSL for which IMHO Lua is a perfect match; - this is my first "packageable" Lua project and I really wanted to learn (and still am learning) how to do that.
Lua only provides a subset of the IO that standard C provides. C doesn't even provide sockets, let alone HTTP.
Lua has very little in it's standard library, it doesn't even have networking. You're going to need an external dependency for that.
&gt; I'm not sure if I completely got your question about why don't I simply use shell scripts for directory specific commands Sorry if I was unclear. Here's an example. Instead of: `$ aka docker up` you'd say something like: `$ ./dockerup` Or `$ bin/dockerup` or `$ bin/docker up` (if the script name was `docker` and it took arguments). It satisfies "be able to define configuration files in directories" and "integrate nicely with version control" but not "single file configuration" or "nested aliases" (not easily anyway), etc.
NO! You should just keep reading and coding. I have read "Programming in Lua" and I think most parts of the book is easy to understand. Even if you met some difficulty(maybe `coroutine`?), you could just skip it since you won't not use it just now. You should make yourself familiar with the basic syntax(coding! coding! coding!), and then you can find some small project to read in GitHub to learn how to write GOOD code.
Oh and by the way, one workaround might be to add a different function to the math module like: function math.tonumber(num) if num==num then return tonumber(num) or -(0/0) else return num end This way, \`tonumber\` would remain the more computationally correct version, while \`math.tonumber\` would offer a more mathematically meaningful alternative.
Yes, I completely agree - the solution you're proposing would definitely require no dependencies whatsoever, but it would also mean more files/scripts and some logic (if the script took arguments and allowed nested aliases etc.). I'm not very opinionated about what would be a better solution, this idea simply came to mind, ticked a few my boxes and it seemed like a nice "weekend" project :)
All you really need is: 1. An environment where you can try code (ZeroBrane provides that) 2. Some code examples on various complexity levels to see by example how things are done. 3. Time, patience and some minimum aptitude at figuring how other people think. Additionally, the lua reference provides you a nice listing of anything Lua *can* do on a very basic level. As a starting point, I suggest you do your best at understanding the following: # Computers are dumb They don't understand the world; they only know very basic concepts like *if A, then do B, otherwise do C* or *do A 30 times*. Don't apply too much human logic to programming, specially with the logical operators `and` and `or`. Too often I see beginners write code like `if playerName == "tommy" or "Tommy" then...`, and it just shows how dangerous that pitfall really is. The sooner you can really internalize just how dumb computers are, the sooner you can start to tell them what to do in a way that they understand it.
Does it search for an .aka file recursively? In other words, if I have an .aka file in the project root, can I run `aka something else` in a subdirectory?
Reading through your code, I got curious just how much slower your path_join function is than some other possible implementations, and I'm afraid I have [bad news](https://gist.github.com/DarkWiiPlayer/e3c5f25a2af044120bc6b4c8541f5f9b) for you. In all seriousness though, this isn't as much a real problem as it is a nice opportunity to learn about Lua performance tuning. Considering what your program does, you won't notice a difference in performance in any way.
It does not ATM, but this functionality is on my mind.
I agree, and thanks for pointing that out - I'll update this as per your suggestions (or feel free to send a PR if you're interested). The thing is that I didn't pay that much attention to optimizing the code yet, as e.g. that specific helper utility is used only in one place and with static number of arguments (2) which I really could have hardcoded for now but wanted to extract anyway. I also totally missed the fact that `table.concat` accepts `separator` as an optional argument: ```table.concat(table [, sep [, i [, j]]])``` which is what you conveniently used in alternative solutions. Thanks! 
Thanks for your comment! Could you elaborate on &gt; if playerName == "tommy" or "Tommy" then... That sounds like a valid command...... No?
It does, and it is, but it does something different than what people usually expect. What Lua sees is this: - There's an if, so it's a conditional. Parse everything up to the then as the condition. - There are three values with two binary operators in between: `==` and `or` - `==` has higher precedence than `or`, so it is treated as `(playerName == "tommy") or "Tommy"` This can evaluate to two things: If `playerName` is indeed `"tommy"`, then the first expression evaluates to `true`, so the `or` operator and its second operand are skipped altogether. True being, well, truthy, the `if` does its thing. In case `playerName` is something else, the first expression evaluates to `false`, and the `or` operator returns its second operand, which is "Tommy". Since all values except `false` and `nil` are implicitly treated as true, the `if` does its thing as well. So effectively, it's the same as just writing `if true then...`, or not using a condition at all. Okay, this may all sound very complicated at first, but don't let it scare you off. It's really not much harder than understanding that `5 + 2 * 5` is `15` and not `35`. The point is, to Lua `or` is a mathematical operator. In english you can save time by ommitting things you've already said, "Today I bought some apples and oranges", but in programming, you have to say "Today I bought some apples and today I bought some oranges".
I think you're conflating two abtract spaces where different definitions apply for "number". IEEE 754 is not Lua. For Lua, NaN \*is\* a "number" (as long as your Lua numbers are floats, mind you, which is not necessarily the case). Whether NaN is an acronym to be "not a number" is within the IEEE 754 spec, this does not necessarily mean anything for what Lua considers to be a "number". So basically, something being "counterintuitive" is heavily bound by the domain of the intuition in question. Take me for example: For me it is absolutely fine and I would be astonished if NaN used as a value (not a string!) should be considered anything else than a special value of the float type persuasion.
Lua is supposed to be simple, and tonumber(something) returning literally "not a number" just isn't intuitive in any way. I totally understand why it works that way, and I see that kind of behavior having a place in languages like C, but not in something like Lua, which is aimed at people with all kinds of (including none) programming background. Also, having two different definitions of "number" is terrible design, in my opinion. If Lua implements IEEE Floats, then it should do so consistently (including treating "not a number" as not a number), and not treat it as a separate domain.
Well, what should type(0/0) return? It would be very unintuitive for that to report anything other than "number" as it does. I suppose you could create a type specifically for nan and +/-inf, but that adds extra complexity that doesn't really serve a practical purpose if you're going to treat them as numbers anyway. Alternatively, you can call it something like "undefined" instead, although that itself could introduce confusion by deviating from the behavior of IEEE/every other mainstream language.
Lua has a rather simple type system: - numbers - strings - tables - functions - nil - and a few more things NaN still falls into the realm of number since arithmetic operations on numbers usually produce more numbers. The fact that this special numerical value is called "NaN" instead of a less contradictory name doesn't matter here. The problem is more or less avoided in the lua documentation, which usually just doesn't expand the acronym
IEEE 754 is bad on so many levels that it is not worth fixing corner cases of it in the language. A few points about IEEE 754 floating points: - Addition and multiplication is not associative - distributive law does not hold - `=` is no real equality relation - `&lt;=`, `&gt;=` are no real order relations
Here will be a good place to start: https://developer.roblox.com/learn-roblox/all-tutorials
Just to add, all numbers are treated as floats in Lua. There's no integers.
In recent versions it has changed
Hey, your code is perfectly fine, you just forgot adding arguments to ``Role:new`` so everything you pass there goes into the void and nils are assigned to fields in obj :)
fuck!! I feel so stupid now. thanks so much for pointing it out.
As a style suggestion, `User:new` should probably become `User.new`, because it doesn't act on a particular User object (it's just associated with the `User` namespace).
What is „intuitive“ is often a personal view. I find returning nan is absolutely logical, because tostring is supposed to print the value of the passed argument and not doing type conversion. Returning nil would be such a conversion. NaN is, like INF a valid value of the type number. You can also initalize a variable with NaN, and than it gets type number and not nil. It would be a flaw in the language having no posibilty to render a valid number value to a string. It works similar in all languages working with IEEE floating point, like Javascript, etc, it works even similar in end user applications like Excel. 
Not since 5.3, and considering something like this certainly wouldn't make it into LuaJIT, I mostly meant it as something that could be added in 5.4, since that is still being worked on at the moment.
&gt;IEEE 754 is bad on so many levels I wouldn't say it's bad. It can do certain things well, and fails at others. None of the problems you name apply to small integer numbers and only become a problem when your numbers are long enough that you start losing precision, which can't really be avoided. Correct me if I'm wrong, but there's just no way to store numbers past a certain precision with just 64 bits effectively and in a way that the CPU can still handle them with reasonable speed.
Start using luacheck. It's a really useful tool and it helps a **lot** in avoiding that kind of mistakes (i.e. Accessing globals that don't exist).
LuaHTTP (Only runs on linux) is apparently also an option, and luasec basically adds https to luasocket.
If you're using LuaJIT, an alternative could be using the FFI to directly use the networking functionalities your OS provides you. In general I'd advise against this though, as it is rather advanced and not portable, so if possible you should go with one of the other answers.
I haven't worked with Lua in quite a while but I think it would be fine if Python isn't working out. Just try to stick with it once you pick something.
You can do a hell of a lot in Scratch; what areas are students running into problems? I took AP Computer Science principals, a supposedly college level course, and it used scratch and/or javascript through code.org. I personally was dissapointed in the course but mostly because I'd been programming for 2-3 years and was a senior in high school. Logically it would be an excellent transition from Scratch to text given you can use both simultaneously. I did a partner project where all of my code was done in javascript and my partner opted to use blocks.
Absolutely. Is your worry that they won't understand it? I started teaching myself Lua when I was 9 and I had a decent understanding back then. With great guidance I'm sure they'll be able to get the hang of it in no time.
Kids today expect so much from computers that even love2d is a lo-o-o-ong way from instant gratification. Lua is, however, an easy to learn but expressive language, so it'll be a great starter language for any kids that get into it.
I've taught both my kids Lua, and they love it. (They are 9 and 10 but we've been doing it for a couple years now.) Love2d is one very good choice, but https://tic.computer has a simpler API and can be used without any installation process, so it's also worth considering! Plus it has sprite-creation tools built-in, which makes it much easier to learn if you want to go beyond simple shapes. If you use love2d be sure to check out ZeroBrane Studio, which is developed by a middle school programming teacher. &gt; I want to ensure they aren't setup with concepts that are common in lua but foreign in other languages I would say this isn't a concern unless they get very advanced and start learning about metatables and coroutines. I think of Lua as "Javascript with 90% of the crazy bits removed" so the difference if they were to start learning JS would be mostly additive. (Of course, they're likely to hate JS because of those crazy bits, but that's normal!) Lua is dramatically simpler than Python; the only other languages with that level of simplicity are Forth and Scheme, which both have their reasons for not being great for kids. Another alternative when folks have outgrown Scratch is to use Snap: https://snap.berkeley.edu/ It uses the same block paradigm, but it includes features like proper lists and first-class functions which remove some of the abstraction limits of Scratch, so many more complex ideas are possible to express, but it can still be tedious to do all that drag-n-dropping. The only other language I think would be good for kids that age is Racket, but while it has excellent documentation and tooling, it requires a bit more abstract thinking, which might be too much to ask for 7th-graders.
Please don’t teach them Python or JavaScript. Lua was my first language at 13, look at my post history to see where I ended up. Lua is an infinitely deep rabbit hole.
Hah, thanks! 
My god I love tic.computer from initial view. Really appreciate your thorough comment. We did Javascript for one semester and although we made it to completion, I realized how many warts I had to gloss over in JS during it.
Haha! Thanks. It wasn't so bad with Python, it's just that we couldn't easily go beyond the text unless we did a bunch of prework with things like tkinter or pygame, and I wasn't huge on that. We did Hangman as the "final" program in Python but kids just love seeing things move on screen and fidgeting with variables -- Ultimately we try to teach that programming can be a form of creative expression.
Thanks! No real worry just .. considerations. After all these replies I'm going to commit to it for the next semester.
You can, I agree. The biggest challenge for us was the computers in the lab slowing down upon getting more complex applications. (The lab unfortunately has fairly old computers, always working on fundraising!)
Ah. That makes sense. Scratch itself isn't the issue then; it's the computers running the program and the relative inefficiency of scratch. Which would make Lua an excellent choice, as it's potentially much faster (esp. with LuaJIT). I assume you wouldn't want to teach C, though it is blindingly fast. The compiler and runtime errors are just confusing (segfault, anyone?).
&gt; My god I love tic.computer from initial view. Oh, the other big win about TIC is that it makes sharing your code VERY easy; you can upload it to the site and send the URL to anyone, and they can play it right there without downloading it. As much as I enjoy love2d, packaging it in a cross-platform way is a huge pain in the neck! And the you have to send the executables to a friend, but we train kids to never download executables from untrusted sources... it's a bit of a mess!
Haha. I can't even imagine getting through a single class trying to do c. Mostly because I would not be able to contain my frustrations (remember this is for kids who are 11!)
If visual feedback is a goal, consider [Processing](https://processing.org/).
Yeah, C is kinda crazy for that age group. I'd say Java but I have my doubts about running IntelliJ on computers choking on scratch of all things.
A lot of that could be solved by starting them out with a framework that they can easily extend. 
It could be. All the basics of procedural and structured programming are there. You don't have to expose them to the quarks of metatables. Do you think something like Solarus would be good? Its basically a top-down Nintendo-style RPG engine and while it does have some more low level capabilities, you can just script "quests" in Lua with some pre-baked components from the engine. Not sure if that would be too much for the age group you are targeting. http://www.solarus-games.org/
Thanks for the comment! Solarus looks lovely, but unfortunately we're on a time constraint (10 classes, 90 minutes each) so keeping it to fundamentals is important for us,
If you want to create goals for you easier, grab love2d (after installation you just select it in interpreters menu in zerobrane and it works) and make something simple that works. Then try to build something playable. 
Maybe try SonicPi too? It's a coding language you use to create music. Instant feedback, alot of fun and can make learning some concepts a bit easier.
Last time I touched Lua was years ago when I was writing scripts on Roblox, Garry's Mod and ComputerCraft for Minecraft
Overall I can't say, but here are a few things I be beneficial for that situation: - Only one type for all numbers - Small and easy to learn syntax - Not biased towards any advanced programming paradim (OOP, FP, etc.) - Tables offer a simple way to introduce data structures - Many practical applications in games (Computercraft is a great example)
Everyone is mentioning 5.3 but neglecting to mention that this is an option that you can change prior to compilation in other versions of Lua as well. The bytecode format even has a bitfield entry that describes if the given chunk was compiled using integers or not.
I'm not quite sure why you'd need `consume` and `produce` to be coroutines. Do they have any complex internal state that doesn't allow modelling them as plain functions?
Ha, you are right, I guess I "didn't see the wood for the trees." Still, the example I linked also used this pattern, so do you see any specific reason with that? Or does this mean that the example also used coroutines unnecessarily?
Coroutines are not the only way to model consumer/producer patterns but are an convenient way, because both sides can run a simple loop which and can maintain local state without passing any form of context parameters, which helps a lot if you have more than one instance. The Programming in Lua books contain some example. &amp;#x200B; A possible pattern is **producer side** &amp;#x200B; `while &lt;not finished &gt; do` `local data = &lt;next data to send&gt;` `resume(consumerThread,data)` `end` &amp;#x200B; **consumer side** `consumerThread=coroutine.create(` `function (data)` `while data do` `--do whatever processing` `data=coroutine.yield()` `end` `end` `)` &amp;#x200B; This also wastes no CPU time, the consumer is only called when the producer has some chunk of data. Both sides can have as much local state as they need and the state is perfectly isolated. You can do something similar with callback functions, but than you need to store the state in some context object. Of course you can still hide the context in a closure, e.g. with code like &amp;#x200B; `function createConsumer()` `local myContext={....}` `return function consume(data)` `-- Do whatever you want using myContext` `end` `end` &amp;#x200B; If you have no state in the consumer all this is overkill... &amp;#x200B;
Might be able to give a high level explanation of LuaJIT, too. Understanding the concept (combined with some examples) would be a good topic for that age. 
Yes and no, I guess. The example could also perfectly be implemented as a set of functions that get some state as their argument. It really depends where you want to draw the line, but I personally think that when the state has no real influence on the computations, a simple closure is best suited. What makes coroutines nice is that you can't only persist data like a list of known files between calls, but also the state of the execution, so two consecutive calls to a coroutine could execute completely different code. To do that with functions, you'd need to check your state at the start of each call, which would make things considerably less readable. Another huge advantage that also isn't really needed here is that in a coroutine you can essentially hand control over to another function with a tail call. Take for example the following situation: You have several data sources (Let's say they're databases) and want to iterate over some items as if there was only one. You could write a function like this: function each_item(callback) while db1:has_items() do callback(db1:get_next_item()) end while db2:has_items() do callback(db2:get_next_item()) end ... while dbN:has_items() do callback(dbN:get_next_item()) end end Now you can just wrap that into a coroutine like so: local next_item = coroutine.wrap(each_item) for item in next_item, coroutine.yield do print(item) end and it iterates over all the items in the first source until none are left and then moves on to the next one. The reason why this use-case is so hard to express nicely in a normal function is that we move through the code as we progress through the items instead of doing everything in every iteration. If we only had one source, we could do this instead: function next_item() return db:has_items() and db:get_next_item() end Assuming we even need to check if there are remaining items, otherwise we could even just use `get_next_item` in the loop. In the real world we'd probably have to pass some sort of state to `get_next_item` anyway though, so it makes sense to wrap it in a function anyway.
The thing is, as I explained in my other comment, that not all state can be stored in a variable just like that, and those are the cases where coroutines really shine. When your state is limited to a simple counter variable, or a table, then a closure is just the cheaper option, since it has no own stack and should be faster to create than a coroutine (but don't quote me on that).
Lua does not support Unicode variable names. Lua identifiers are made of ASCII numbers, letters, and the underscore. Lua files can be interpreted as sequences of bytes, allowing arbitrary UTF-8 encoded contents in strings and comments; however, the "functional" parts of the language are entirely ASCII.
A less roundabout way of saying it: you can only use special utf-8 characters inside strings and nowhere else.
If you're using LuaJIT (from the extensions section): &gt; loadfile() etc. handle UTF-8 source code &gt; &gt; Non-ASCII characters are handled transparently by the Lua source code parser. This allows the use of UTF-8 characters in identifiers and strings. A UTF-8 BOM is skipped at the start of the source code. 
I hate you. You made me think about continuations and trampolines, and now my brain hurts. I'm beginning to wonder if coroutines are strictly necessary for the purpose they serve.
Can confirm - it's awesome. Due to the preprocessed syntax, it has a lot less "boilerplate" to it and if I recall correctly, it also has it's own APIs for things like IO, which are probably simpler to use than the standard Java APIs. 
&gt; I hate you. You made me think about continuations and trampolines, and now my brain hurts. I wonder if all functionality of coroutines could be accomplished via returning closures. 
The problem isn’t unicode variables itself, they work fine, just like a normal variable. The problem is that it shows errors in IDE all over the place even though UTF8 is set as encoding for all settings.
Thank you for your explanation. As a last question, if you dont mind, do you have any recommendations on how to have the program sleep for a while or run periodically? Whether I use coroutines or two simple functions in the outer while loop, the program would still occupy the CPU if I don't use `sleep`. Is this the most practical way or is there a better abstraction (perhaps with an additional library)?
You could either call sleep with the `system` function, or you can get some library like luaposix to call sleep from within Lua. If you're using LuaJIT, you can of course also call sleep directly using the FFI.
&gt; I wonder if all functionality of coroutines could be accomplished via returning closures assuming sufficiently ugly code. Conceptually, coroutines are not much more than closures with "upvalues" to a separate stack frame. With sufficiently ugly code, it should be possible to turn pretty much every coroutine into a closure, but it would get really ugly when you try to nest functions that can all yield, since you'd have to check the return values and all that.
do you HAVE to use Eclipse? There are better editors out there that will handle unicode just fine.
We are familiar with Eclipse and prefer it, that is why we would like to find a solution to it. Though if there is a good alternative similar to Eclipse, that would work as well.
You said they won't have a computer at home.. what about a phone?
Yup. I just coded a simple trampoline/CPS exercise. Simple code gets way ugly. It's been a while since I looked at Steele's "Lambda the Ultimate" papers, but as I recall you're not even really looking at a deep call stack. The closure creation is the stack.
You need to reply to comments directly for the parent to see it.
It seems I overlooked it or there really is no reply option to comments in the mobile version of Reddit?
&gt;We are familiar with Eclipse and prefer it, that is why we would like to find a solution to it. Though if there is a good alternative similar to Eclipse, that would work as well.
It's good to keep local variables to a minimum to keep the stack relatively clean. The local variable limit is 200 per stack frame.
If the function remains on the stack - e.g., the root function of some recursive calculation or long-running operation - then remember that the function will remain on the call stack that whole time and more locals means a bigger stack frame. The raw number of local variables is unlikely to be an issue unless you having something deeply recursive, though. Any tables referenced by locals will be kept "alive" and not garbage collected. Which doesn't _just_ waste memory, it actually keeps the GC heap larger which means any GC phases that happen are potentially more costly. For functions that return in short order, though, the local variables don't really hurt anything. They'll make the function a little bigger on the stack, but that space is reclaimed the instance the function returns. FWIW, this is true of just about every single language out there, not just Lua. Even languages without GC's can waste memory if locals in long-lived functions hold onto resources.
That depends on lots of things. Two unused variables in a 200 line function won't make much of a difference. 200 unused variables in a two line function that gets called in a hot loop though, that might be a problem. Overall, I highly recommend just writing a simple benchmark to see how much of a difference it really makes and then considering its importance in the context of your application. Be sure to use the right interpreter for your benchmark though; even from Lua 5.1 to Lua 5.3 you sometimes see significant performance differences and LuaJIT can turn things around completely by optimizing your code behind your back.
It's a reply button under the comment
Ah yeah, you're right. Misstook the reply symbol for the share symbol (Youtubes share symbol mirrored is Reddits IOS apps reply symbol it seems) Thank you, now I know.
Yeah no worries; you're definitely not the only person who finds the mobile interface confusing. Takes me a while to find the settings menu still haha
A bit hidden :D
&gt; What I'm unclear on is if there's a performance issue around having a lot of unused variables, especially in a large project with many LUA scripts like a game Addon. As a general rule, yes, that wastes memory, its extra stuff that has to be pushed on the stack too. I recently went through and did a clean up of unused variables in an older program (not written in Lua) and I shrunk the binary size by over 35 megabytes.
A coroutine is a own continuation (or thread context which is not only a stack, it contains also the instruction pointer). This is a big difference to a closure, which only captures values but no execution state. Of course you can do most things with callbacks and/or promises, just look at the node.js world. But it also leads to scattered controlfow and hard to maintain code. For me coroutines add really a lot of value to Lua
I'm not sure I understand what you're asking... do you mean like if you call function ABC with the argument print() how do you get the print function from that parameter within function ABC? If so, it's not possible to just from that argument.
Ok, is there any way to do that? I'm trying to set up an OOC API that can call a function from within the created table to add the properties called from self to the table.
I think I get what you're asking now: ``` function ABC(function) function("foo") end ABC(print) ``` This will print "foo". You have to pass the function print without parentheses (so not `print()`, but instead, `print`).
I'm guessing you want to do something similar to the [pcall](https://www.lua.org/pil/8.4.html) example?
Ultimately, the instruction pointer is just another register, which could be saved along with the stack. While this isn't possible in Lua, it can be simulated easily by storing an entry point in an upvalue of the closure and jumping to the corresponding location in the code each time the closure is called. In 5.3 this is made even simpler thanks to the use of gotos and lables. Also, a coroutine is *not* a exactly a continuation. While they are both ultimately the same thing under the hood, the two terms represent different ways to think about them, so there's a clear distinction between the two. You could say that continuations are like stateful gotos, while coroutines are stateful functions.
Note: “function” is a keyword, so you’ll get a compile error unless you change the name.
Didn't write lua for a long time. At second glance it looks obvious, how did I miss that? Fixed now
Don't worry too much. Just learn as you go.
paging /u/alsweigart - who wrote a book on this entire subject. Check your local library or get a copy from [No Starch Press](https://nostarch.com/codingwithminecraft) Not an affiliate link, not advertising, just trying to help.
Thanks 
Hi! I recommend starting with ComputerCraft - its quite a bit simpler than OpenComputers. We also have an active community at computercraft.cc where you can ask questions about any issues you run into. You can hop on our discord or post on the forums - I recommend the latter for troubleshooting as it makes it easier for us to review available information. The computercraft.info website has some abandonment issues but is still home to a decent wiki and excellent tutorials - such as the Ask A Pro Renewal series. http://www.computercraft.info/forums2/index.php?/topic/15033-computer-basics-i/page__pid__249377#entry249377 Programming in Lua is available for free and makes great reference material. https://www.lua.org/pil/
Solid advice that got downvoted. Pick a real world task and achieve it by learning the concepts as you need them.
you need to use `==` instead of `=` in the line `if input == number then` and then don't forget to include an `end` after the print statement
= and == are two different operators. In Lua, = is the assignment operator (to assign a value to a variable) and == is the equality operator (to check if two values are equal). Confusing them is very common among beginners so don't feel discouraged by it.
At least it isn't like C-like languages, where `if(x = y)` is allowed but does the wrong thing.
By the way, to get proper code formatting on reddit you need to indent everything by 4 spaces. Also, it is customary to put the then on the same line as the if if input == number then print("Correct!") else print("Good luck next time...") end
IMHO You're seeing the 301 because you're using LuaSocket which can't handle the HTTPS protocol - you should probably use something like [LuaSec](https://github.com/brunoos/luasec) to successfully request HTTPS urls.
Ok thank you very much!
Thank you!
Now i learnt else works too!
Thanks for all the help, but now i have ANOTHER problem, here is the code &amp;#x200B;
if tonumber(input)==number then... ( io.read() returns a string )
umm... I have no idea what tonumber does, where to put this and what its doing. Can you explain to me please?
String (text) and numbers are two different kind of values. The problem with Lua sometimes it's convert strings to numbers automaticaly sometimes not...to be safe, use the standard functions tonumber () / tostring() 
If you want people to test your program you have to include your source and makefile(s). You can't ask people to blindingly run an untrusted executable.
&gt; I promise this is not malware. Yeah, sorry, but no. That's really not good enough. You need to post source code if you want people to test this.
That's some weird behavior... Maybe try using wireshark to figure out what happens? My best guess is that luasocket tries making a request on port 80, so the server tells it to visit the https site instead, which it then does over port 80 again. At some point it probably decides that there have been too many redirects so it just stops (guessing, correctly, that it's an endless loop) and returns the response of the last attempt at fetching the site. If that's the case, there's probably some error message around that you can check. As for the solution, as /u/bonidjukic pointed out, you can use luasec instead. It's built to be a drop-in replacement for luasocket, offering the same interface, but using SSL to secure the connection. \&lt;offtopic\&gt;That being said, sites redirecting to https by default is both a really good thing for most users, and an extremely annoying thing for people who know what they're doing. I do this myself with my website (except for some URLs associated with APIs) and more than once I've gotten annoyed at myself for doing it xD\&lt;/offtopic\&gt;
Your best guess was my best guess as well, I just didn't want to go into specifics as OP mentioned he's new to this. Anyway, this can easily be verified with a simple curl http (not https) request: ``` curl http://h41369.www4.hp.com/pps-offers.php?prod_cat=notebook_pcs &lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt; &lt;html&gt;&lt;head&gt; &lt;title&gt;301 Moved Permanently&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;Moved Permanently&lt;/h1&gt; &lt;p&gt;The document has moved &lt;a href="https://h41369.www4.hp.com/pps-offers.php?prod_cat=notebook_pcs"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; ```
That's actually how I learned Lua (And now it's turned into my main programming language, setting aside Ruby, which is used at my workplace). And while this also works well if you want to learn Lua *through* minecraft, it makes even mroe sense when you want it specifically *for* minecraft, since you usually don't need all the fancy stuff like metatables and such for those simpler tasks.
Functions, functions and more functions. There's a lot of metatable magic in Lua that's really useful for some other applications, but in minecraft I always find myself using functions for everything. This makes it specially important to understand recursion, variable scope and variadic functions. Get a clear grasp of those, and you can built pretty much everything with that.
People run them all the time. I'm not giving away the source code to my program. It is a programming platform of sorts though so there is a bunch of Lua code that is available.
Turn the tables around : I send you an executable and ask you to run it (no malware promise); you probably wouldn't (rightfully so). Tbh I'll run a static analysis with something like IDA or WinDbg in a sandboxed VM before I even contemplate running it.
I'd like to know *why*. What are your reasons for not wanting to share source code?
I have always dreamed of someday making money from a software product. I have a strong belief that people are unlikely to pay for software they can obtain freely. I would like to protect my intellectual property. There is at least one person with a software business who requested to purchase the software source code contingent on some improvements. By providing the source in public they would get it for free.
I mean I think people install programs all the time or from Steam or whatever and don't think twice. The difference is they ate not getting that pop up from Microsoft. I am going to try to obtain an EV code signing certificate although the cheapest is $319 and I'm not sure it's an option for individuals. If not I will see if a regular code signing certificate will help. If not maybe I will have to go on r/forhire to pay someone to run it. But I'm not giving up my software project before a single person even ran it. Lol.
Here's a sneak peek of /r/forhire using the [top posts](https://np.reddit.com/r/forhire/top/?sort=top&amp;t=year) of the year! \#1: [\[Meta\] Should a budget or salary be required for all \[Hiring\] posts? Official Vote Here!](https://np.reddit.com/r/forhire/comments/9cbohe/meta_should_a_budget_or_salary_be_required_for/) \#2: [\[For Hire\] I Will Sit In Your Building and Do Nothing All Night](https://np.reddit.com/r/forhire/comments/8bev85/for_hire_i_will_sit_in_your_building_and_do/) \#3: [\[META\] Start requiring \[HIRING\] posts to include an hourly budget or salary.](https://np.reddit.com/r/forhire/comments/9brw63/meta_start_requiring_hiring_posts_to_include_an/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
By the way I have shared a ton of source code over the years. I have more than 200 repos on GitHub. Most of the are original and not forks. https://github.com/runvnc
Worked fine but needed to put the code in c:\vsim for the plugin to work. Really really cool! It was a-lot of fun downloading different 3d models. The c64 was also really cool. Made a very small 'hello world' program on the c64 which was also cool.
Just use requests. You can install it from luarocks. This is module can work with http and https
Licensing. Unreal 4 is “open source” but you have to get license to actually work with it. It’s totally possible and reasonable to have an open source product that is monetized. Also, this isn’t the product this is a “pre pre alpha” as you said. So you can release the unfinished source and make sure you include a license that permits only what you want to give rights too. As a random reddit person a promise that it’s “not malware” and a random direct download link are very concerning red flags to me (and others too). I only run software in blind faith if there is some kooky to its creator and/or source. Sure I don’t demand source code to install Sublime Text, but at the same time they been around and I’ve known many others to use their software without issue so they’ve earned some trust. Also, and I didn’t do any username matches, but linking to a GitHub page provides no reasonable evidence that you are this person on Github. I’m not trying to be an ass. I’m a semi-hyper security nut where I try to be extremely mindful of where and what gets downloaded on any of my devices. Especially when it’s from emails or reddit posts. You have to think about how this looks to someone else. You either are a malware builder and are trying to deceive people into believing you aren’t or you are legitimately creating something pretty neat and trying to share and get feedback and realized that you look like the first guy (due to you promise it’s not malware). I wish you the best of luck with your software and selling it if you truly aren’t a malware fiend! Honestly!
No I can't release the source and the fact that people keep saying I am supposed to do that really pisses me off. I will get the code signing certificate set up which I paid for this afternoon (cost $84), and make a website and if necessary pay people to install it if Microsoft keeps complaining with their SmartScreen due to few installs or something. That will just prove that I went through a bunch of hassle. Absolutely incredible lack of trust from the people on this forum. I should probably avoid r/lua entirely. Its a shame because I really thought this would be interesting to lua programmers. Now I kind of lost respect for them. Passing SmartScreen or not passing it proves nothing. My brother (elivesay83) was nice enough to play with it for awhile tonight. So at least one person on earth got something out of it after I worked on it for more than two years.
You're surprised by a lack of trust for a complete stranger? People post malware every day on Reddit (and the rest of the internet) and you're telling us to trust you why? You are so self-centered it isn't funny.
What this is is people detected an opportunity to start piling on and shitting on me. 
I spent two and a half years working on a side project and finally got to a point where I thought I could share it. I was hoping for some kind of validation for all of the massive amount of fucking hours I put into this. And I really thought that lua programmers would be interested. The response I got was "stop trying to give me malware". So apparently not only are people not interested, they actively dislike me for trying to share it. So maybe I should just kill myself.
Nobody said it was malware, nobody said it wasn't interesting, and nobody said they disliked you. You saying you should kill yourself after this is not going to magically turn us into bad people. You need more help than we can give. Seek out a psychiatrist, not an app tester.
I'm sure you believe that, but it simply isn't true. You're being irrational and hostile.
You people are being hostile.
Everyone is saying it is malware and acting hostile. I don't need a fucking psychiatrist, I need one reasonable person or a code signing certificate.
You are now considering suicide over this. That is a sign of a psychiatric problem. Seek help. I have nothing to give you but that piece of advice.
Thanks for sharing, sorry you're getting such a hostile reaction. Honestly though, your instructions here are too complicated, and yeah, they're scary looking (just what is it downloading a bunch of times?) You're asking people to do work for you for free, which at the minimum is costing them some of their precious time. To get people interested, you need to make it simpler, or make it sound worthwhile - at the very least explain how it will help them accomplish something they want to do. Cost versus benefit - decrease the perceived cost, increase the perceived benefit. 
&gt; I wish you the best of luck with your software and selling it This was _intentionally non hostile_ and _intentionally congratulatory for your efforts_. My entire post was not demanding you share source but to provide you that, yes, sharing source code does not equal “free.” As a secondary it was also to ask you to try and examine this post you made _from our point of view_. It’s actually good and healthy that so many people are wary. Hackers take advantage of those willing to randomly download software and running it. Let’s just say that we downloaded your software and it was fine, right? You made a bajillion karma points and got your validation. And the another posts a few weeks later saying “I’m working with the other guy now and I we have a new build, go and check it out!” And this guys download link leads to random ware. So now all of /r/lua is fucked because they decided to trust everyone offering a software download blindly and some asshat (not you, see) came in a took advantage of it. Sadly, the flip side to that is to _assume all random download links are suspicious_. It’s not _you_ I don’t trust. It’s _anything I’m not familiar with_. If you can’t see that from our perspective and understand then you really are self-centered and that sucks. And if you _realky think this worth killing yourself over_ and you didn’t just say that to make us feel guilty then you dead wrong and you definitely need to reach out to someone. 1-800-273-8255 (if your in the US at least) It shouldn’t matter if we like it. You said you have a company offering to buy it (that’s amazing!) and if you like it then you succeeded.
Right, I thought the instructions were simple but now I see how it looks complicated. Also I did not even include any motivation or description of features. I have decided that I need to consider all of this type of stuff as marketing and so am planning on hiring someone on r/forhire for that at some point. I may have to put as much effort into the marketing as I have into the programming. I may also just try to hire people outright to work on plugins to add functionality if I can get them for cheap enough (technically I am poor). Anyway yours is the first reply that actually seems polite to me. I appreciate it.
Even if you're poor, most health insurance plans cover mental healthcare. Please don't wait.
I dont know why but the codes are all messed up in this post so yh
Hi! I'm aware you're most likely figuring Lua out, so I'll skip any number of optimizations you could do here. One thing I wanted to point out is that when grabbing the values for numero1 and numero2, make sure to wrap them in tonumber() like so: numero1 = tonumber(io.read) numero2 = tonumber(io.read) The reason for this is that, if I'm not mistaken (and my Lua is a little rusty), [io.read](https://io.read)() stores the user's input as a string. You've already seen this, as you're checking to see if "oper" is equal to "1" - a string consisting of the number one, not what Lua actually recognizes as a number. If you try to do math to this value, it'll throw an error. &amp;#x200B; Another thing is that you're using eight different "numero" vars that all perform the exact same function, namely to store two different values to perform math with. No need for that! Just reuse numero1 and numero2 as you see fit: if oper == "1" then print("Choose the first number:") numero1 = io.read() print("Choose the second number:") numero2 = io.read() print("Result: " .. numero1 + numero2) elseif oper == "2" then print("Choose the first number:") numero1 = io.read() print("Choose the second number:") numero2 = io.read() print("Result: " .. numero1 - numero2) else ... end Variables are called "variable" for a reason! They can store varying information. Learn to use them to their fullest!
this is not necessary, as lua automatically converts strings to numbers when using mathematical operators on them. `"3" * "7"` evaluates to `21.0`
While you're right that tell get autoconverted, there's some edge cases and bugs that can happen when you rely on that. If you know you're expecting numbers, explicitly convert them to numbers! It's a great habit to build early, and will save a bunch of pain later. 
Ah, gotcha. I do most of my scripting in an app called Mudlet, whose implementation doesn't seem to work that way. Precious little experience with it in the wild!
I can second the recommendation of the tic computer. It's a really good way to teach kids about the fun of programming. There is also the PICO-8, which is more popular but costs money.
Sloppy solution: for i=0,1,0.1 do ... end Sloppy because adding floating-point numbers like that introduces small precision errors that accumulate into bigger errors later on. You won't notice it in this small example but it's a bad habit to get into doing arithmetic like this without considering the side-effects. There are less troublesome alternatives. Simple solution: count from 0 to 10 but divide by 10 at each step to get the intended result. Slightly better solution: count from 0 to 16, because dividing by a power of 2 won't run into floating-point weirdness. If you want more precision, make it 0 to 256. for i=0,16 do real_i = i / 16 ... end 
1/2^n for reasonable negative integers n can be represented exactly though, so: for i=0,1,1/16 do YOURJUNKHERE end will work.
Thanks! Cant believe i didn't think about that
The "1" (full color value) corresponds to 255, not 256. He should count from 0 to 255 (that's 256 different values).
In the bad old days only certain keys would work together in a game. I don't know if that's still true. I can tell you Love in Windows the WASD keys all work together using an override of love.keypressed()
You're probably best off asking in the Love forum, /r/love2d, or Discord for specific answers
There are libraries for this. [CTRL](https://love2d.org/wiki/CTRL) might be what you want but I'm sure there are others that would work too. 
Are you using a tweak called itouch or similar?
/r/love2d is pretty slow to respond :'(
The catch is I want to read w,a and up,down arrow keys at the same time, and so far I am unable to make it work. So unless we are playing turn based pong, we are toast :'(
isDown should be fine -- https://love2d.org/wiki/love.keyboard.isDown Are you using if...elseif...else...end ?? You likely need to use individual if...end statements for each key.
This is my function so far https://hastebin.com/epaluwihol.rb I am stuck on writing a getter https://hastebin.com/mimedeqevo.js putting self does not work either, so once I get that sorted I can get back to fixing this. getter like function code f={j=0} function f:update() j = j + 1 end f.update()
`function f:update()` behaves like `function f.update(self)`, so you need to call `f:update()` or `f.update(f)`. Method calls like `table:method(...)` behave like `table.method(table, ...)`¹. ^(¹ with minor bytecode differences)
f.j = f.j +1
Sadly calling f:update() instead does not fix the problem f={j=0} function f:update() j = j + 1 end f:update() -- still same issue, still thinks j is global
You also need to use `self.j = self.j + 1` in this case, that should fix the problem
Yeah it did. Thanks a lot!
Look up Lua ternary operator. It will explain. It's the equivalent of a ? b : c in Lua.
This is a case of short circuiting logic. Since all values in lua are truthy except for false and nil, they can be used to emulate a ternary conditional. `a and b or c` is effectively equivalent to `a ? b : c` in other languages.
＊Almost equivalent -- it won't work if your `b` can be falsy. In this case, string literals are always truthy, so it behaves as the ternary.
Good catch. Ta.
Basically `and` returns the first value if it's falsy, and otherwise returns the second value. `or` returns the first value if it's truthy, and otherwise returns the second value.
Short form of if k &lt; num_warriors then inst.components.childspawner.childname = "spider_warrior" else inst.components.childspawner.childname = "spider" end that makes use of the fact that `and` returns the first argument if it's falsey, or the second one otherwise and `or` returns the first argument if it's truthy or the second one otherwise. The order of evaluation is inst.components.childspawner.childname = ((k &lt;= num) and "spider_warrior") or "spider" So if `k &lt;= num` the `and` expression returns "spider_warrior", and the `or` expression is ignored. Otherwise, the `and` expression evaluates to `false`, and the `or` expression therefore returns its second argument, which is "spider". Additionally, you should know that `and` and `or` in Lua are short-circuited, meaning neither `false and do_something()` nor `true or do_something_else()` will call the respective functions, because in both cases the first operand already decides the result of the expression, meaning you can also use this sort of `A and B or C` construct to trigger side effects in your application conditionally, like you would with an if-statement. I personally think this is bad style though, and behavioural logic should be written in a proper if-statement and the and-or should be used for logic expressions.
For clarification, Lua (Unlike, for example, C#) doesn't really have any form of OOP mechanism builtin. Tables can store both data and functions, and if those functions operate on the data of the table, then they are objects by definition. The colon-syntax is just there so you don't have to write `self` all the time, and so the debugger can see it's a "method call" and print nicer error messages (like start counting arguments after the implicit self, etc.). This also means you can easily take a method out of its corresponding object and, for example, call it with another object as its first argument. Likewise you can store any function in a table and call it like a method. For example: local stack = {push=table.insert, pop=table.remove} stack:push("Hello World!") print(stack:pop()) In combination with metatables, that's an incredibly powerful tool and one of the things that makes Lua incredibly fun to use in my opinion.
in theory, `isDown()` should work for many keys at the same time without problem, or at least for me it always did.
if it didn't *have* to be decimals, counting in units of either 1/8 or 1/16 would get rid of the rounding errors, since those values can be represented in binary without losing any precision.
Doesn't really matter, you can just as well count from 0 to 257 if you also divide by 257. The only advantage of 255 would be that you can fit it into one byte, but Lua won't do that anyway, so it's quite pointless from a technical perspective. Of course it does make some sense considering colours, when not represented with floats from 0 to 1, normally use the range from 0 to 255, so sticking to that convention might make life easier for other people using the code.
That's correct, however, the user could still enter something that's not a number and the program would crash with a rather unhelpful error message. A few ways to improve this would be: assert(tonumber(io.read()), "User input is not a number") and local function forcenumber(something) return tonumber(something) or -(0/0) end The first one just throws a more useful error message, while the second one makes sure that the value you give it is always a *number* by either parsing it into a valid number, or returning NaN instead. Ignore for now that in Lua zero divided by zero is negative not a number (`0/0 == -nan`).
Also, dividing by a power of 2 (e.g. 256) does not produce any floating point rounding weirdness.
As long as you're counting with integers, the rounding errors don't accumulate, and the values that are most important, which are 0/N and N/N will always evaluate to 0 and 1, regardless of the value of N, so it really doesn't matter all that much unless you need absolute precision, which is a surprisingly uncommon requirement in real world problems.
Somehow I got it to work, thanks for reply anyway!
sorry for bothering you. But can you tell me more about your job, how exactly Lua is your main language now and for what you are using it? I want to learn Lua, but it looks like a dead language... at least this what i hear from other people. I hear that i need to learn Python, Go, Javascript, but not Lua...
The more you can get out of the box is a good thing of course, but is not something Lua excels at. It's useful for embedding but that's about it.
They are different and have a place depending on the situation. Good libraries solve specific problems. Good frameworks solve application problems in a consistent manner. Usually, they consistent of several libraries that work well together. Rails provides a baseline for developing web applications, accessing a database, TDD, etc... in a fashion that developers can learn a framework and make sense of other applications within that framework. I think that's great. Pulling a collection of libraries together provides flexibility but it also can suffer from inconsistencies. Do the libraries work well together? Do other developers know the libraries in question? Frameworks can force many decisions that might not be appropriate for a project. They might also burden the project with more code than is needed. They can also get a project into a prototype stage much quicker allowing for faster feedback and validation of the project. As developers learn a framework they can apply that learning to other projects.
I used to turn my nose up at frameworks, but LÖVE is one of the most pleasant systems I've ever used, so it totally depends on the problem being solved.
Oh boy, this is gonna be a long post, but there's really a lot of perspectives I want to consider. First of all, I consider Lua my *main* language, because it's my language of choice for most things I need to do, from shell scripts that have outgrown bash to entire web applications. There's a few reasons for this, but it mostly boils down to personal preference. At my company, the main (read: only) language used is Ruby, for the simple reason that it's easier to manage a uniform codebase than if anybody did everything in their own language of choice, which would make it hard for someone to maintain someone elses code. As for what you should learn, I'd Lua might be a very good choice. For one, consider that there is no one language to rule them all, and whether you learn Python, Javascript or whatever, you will always be in situations where you will have to learn a new language. The idea that your first language is important is mostly an illusion. Also keep in mind that many of these languages are, at their core, very similar. They all share ideas like functions, loops, variables, etc. Whether you write `begin ... end` or `{ ... }` is really just a matter of getting used to it, which won't take you more than a few days. It's also not like there aren't differences *within* a language. Just compare any two web frameworks for ruby and you will see that knowing one doesn't mean you can use any of the others; but it might make them easier to learn. Compared to many other languages, Lua has the advantage that it's very easy to get started with. Most of the material avoids relying too much on frameworks, and there's very little language-specific stuff that might distract you. Tables are really just an abstraction for hashmaps and arrays, and coroutines are a well understood thing, even if not that many languages implement them. I also believe that, on the one side, knowing many of the small ways in which Lua is weird or unexpected has helped me look for similar things in other languages, specially Ruby, making it easier to get into that. On the other side, having learned Ruby and how it's different from Lua has given me a nice chance to reflect on many of Luas features and to contextualize them in the larger world of patterns, paradigms and all the other constructs that help us reason about programming. And, as mentioned above, the Lua community seems to be a bit more biased towards just writing your own code that works best for your specific problem, whereas I see many Ruby developers just reach for a library that does what they want (and 10 times more) or even lots and lots of libraries that they just glue together, using Ruby effectively as more of a configuration language than a programming language. This certainly allows them to be more productive, but being able to write your own code when a) there just isn't a library or b) you need an optimized solution that does one thing and does it well is a very important skill, and you will learn that way better with a language that doesn't have this kind of community philosophy. And once you know how to write, I don't know, a base64 encoder, switching to just using a library is an easy step, whereas the opposite takes more time to get used to. And about Lua being a dead language, that's just not true. It's not surrounded by much hype these days, but it's still used a lot in certain fields like game development, and some big names like cloudflare also use it and seem more than happy with it. It allows easy integration into larger C applications, or can be sued on its own. It has a slower release cycle than other languages, making it a stable platform, but there's also less excitement because there's just less going on. With all that in mind, learn Lua. The language itself really isn't that big and most of what you will learn will be concepts you'd have to learn just the same for any other language. Try not to focus on the language as much as on the patterns and paradigms you learn and you will have no trouble picking up any other language that you need for any specific job.
I agree that Löve is a very well done framework; one of the reasons being that it sets out to solve a relatively specific problem and offers enough flexibility to really "fill out" that problem domain. The reason why I don't like Rails, to name an example, is that it makes decisions that restrict the developer to a smaller space than the problem domain it tries to specialise in.
Well written libraries, specially in Lua, will work well together in 99% of the cases, unless they attempt to solve some really complex problem like allowing threading in Lua, and of those you don't usually need dozens in a single project. If your markdown library doesn't play well with a file system library, then they are both garbage and shouldn't be used.
thank you for your comprehensive answer. I read it all. As I understand you are a sys admin or a devops engineer. I know basics of programming, but never grown up to be a full programmer, im a more of a coder than programmer. But i would like to have an universal tool for my work and for my hobbies. I understand that there are no perfect one tool for everything. And people around me selling me Python as this one tool... tool for everything. And i can use Python at work, but at home im having issues with Python (for example creating .exe from my little Pygame project). So that is why im considering Lua. I want to have this one language as my main language and keep getting better at it, and i guess better at programming in general. Lua looks really fun to learn... I just had this concern that this technology have no future. And at my workplace it will be really hard to explain people why for example i do stuff in Lua and not in Python... Anyway, again thank you.
No. It has to be a2 = a1 + 1
Well think of it like this A1=Apple A2=Orange A3=Banana Counter=0 ------------------- Print(A1+Counter) Counter=counter+1 ----------- Desired output: Apple Orange Banana ... ... ... 
What you want is an array. &amp;#x200B; a = {"Apple", "Orange", "Banana"} counter = 1 while counter &lt;= 3 do print (a\[counter\]) counter = counter + 1 end
You should think of variable names as entirely opaque. Lua doesn't "know" the names, and they don't "mean" anything to the computer -- they're just for *you*, the *human*, so that you don't have to refer to the position on the stack. If what you actually want is an association from keys to values, what you want is a table. fruits = {[1] = "apple", [2] = "orange", [3] = "banana"} print(fruit[1 + 1]) --&gt; "orange" 
Okay. So lets say i want the properties of 100 cubes to be randomized and stored. Colour, size and position. What do i do if i want it to insert these properties in a table. Box1 = {Colour,Size,Xpos,Ypos} is randomized. Then i want the same line of code to randomize box2. 
Okay. So lets say i want the properties of 100 cubes to be randomized and stored. Colour, size and position. What do i do if i want it to insert these properties in a table. Box1 = {Colour,Size,Xpos,Ypos} is randomized. Then i want the same line of code to randomize box2. 
You mean something like this? &amp;#x200B; \`\`\` local A = {'Apple', 'Orange', 'Banana'} for i = 1, #A do print(A\[i\]) end \`\`\`
You could write a function that creates one box with those random properties and return it. Call it in a loop 100 times and each time put the returned box into the table.
An array of tables. box = {} count = 1 while count &lt;= 100 do box[count] = {Colour=math.random(), Size = math.random(), Xpos = math.random(), Ypos = math.random()} count = count + 1 end for i,v in ipairs(box) do print(v.Colour, v.Size, v.Xpos, v.Ypos) end
Okay i think i kinda understand. Thank you so much :)
Thanks. This helps a lot :)
No my main greif is a deeper understanding of tables and arrays. But i've had it explained, so thanks anyway.
I know what the problem could be: You are most likely using an if-statement to ask for the key input, if so, be sure to ask for each key in a new if-statement and not with "elseif". If love.keyboard.isDown("w") then --do something end If love.keyboard.isDown("a") then --do something end Now continue this with d and s and you should be good to go! Do not use an elseif, because that'd imply that you only want one key to be registered at once. Hope this helps! 
not sure how but I fixed it. Likely it was due to elseif and me being very rusty with lua.
Ok, I wish you the best of luck with your project! :)
Wikis! The Scribunto extension lets you use Lua as a scripting language on a wiki, we use it a lot on some Gamepedia wikis, and I'm sure there's other wikis you can contribute to as well to learn the language - try to find a smaller wiki for something you're interested in.
[https://www.lua.org/docs.html](https://www.lua.org/docs.html). Free online PIL and Manual for the fundamentals. After that, depends on what you want to do with it. Are you planning on using it for general scripting, building/modding games? Web backend? There are a lot of interesting open source projects out there using Lua (not LUA, btw). Lapis, Love2d, Minetest to name a few. The best way to learn is to start of find a project to hack on and learn as you go.
[Obligatory:](https://www.lua.org/about.html) &gt;#❖ What's in a name? "Lua" (pronounced **LOO-ah**) means "Moon" in Portuguese. As such, it is neither an acronym nor an abbreviation, but a noun. More specifically, "Lua" is a name, the name of the Earth's moon and the name of the language. Like most names, it should be written in lower case with an initial capital, that is, "Lua". Please do not write it as "LUA", which is both ugly and confusing, because then it becomes an acronym with [different meanings](http://acronyms.thefreedictionary.com/lua) for different people. So, please, write "Lua" right! 
I agree with Love2D. also TIC-80 -- https://tic.computer
Someone needs to make a bot for this subreddit! 
Answering a question with a question, is this the first programming language you would like to learn? It's a great one for that if so, but it does impact how to learn. If you are just learning programming, I think you need to find a general course that is using Lua as the baseline. Possibly the [Harvard Game Development Course](https://cs50.harvard.edu/games/lectures/0/) would work for you? For me, I came to Lua after working on many different languages (C#, Ruby, C/C++, etc...), so the easiest way to learn was to get the reference book, pick some things to build, and start coding. I started by implementing some basic [search and sorting algorithms](https://algs4.cs.princeton.edu/home/). The book is fantastic and is the same as the online reference at [lua.org](https://lua.org). I found the examples and exercises as a great starting place. Most importantly, just go for it! &amp;#x200B;
If you're serious about learning, it's well worth the small investment to buy Programming in Lua. You can pick up a used copy on Amazon for around 5 bucks in great condition. It reads easy and is a great mix of technical details, examples and reasoning. Really the best resource to my knowledge.
Or just put it in the sidebar.
[lua-users.org](http://lua-users.org/) has a lot of useful resources, even though many of them are somewhat outdated, but most of the concepts are still relevant in even the newest versions.
If you familiar with other programming languages, this is a [good tutorial](https://learnxinyminutes.com/docs/lua/).
I totally agree that the answer is going to be completely different depending on your background. Have you never programmed before? Have you used mostly Java before? Do you already know an imperative scripting language that leans heavily on closures? The answer will be different in each case.
The manual, the Love2d wiki (if you're into gamedev), PIL, etc. are what I'd recommend. PIL's first edition is free on Lua's site, and you can very easily find pirated ebooks for the newer versions if you can't buy it
Hey again. Let's say i wanted the box to update Xpos, and Ypos each frame. So Xpos = math.random(-1,1) How would i make only box[1] change xpos And then change box[2] changed seperatly?
Take a look at the "for" loop in the last comment. This goes through each box, one by one, and prints it out. &amp;#x200B; Add another line above the print like &amp;#x200B; v.Xpos = math.random(-1,1) &amp;#x200B; then, each time you run that loop, the box will get a new Xpos that's independent of all the other boxes.
I tried to so this but my boxes clump together. So they spawn randomized but clump after the first frame. They get the same coords but the plus -1,0, or 1. 
Check this out: https://pgl.yoyo.org/luai/i/math.random instead, try v.Xpos = math.random()*2 - 1
I'll check em out. Thank you for all the help
no problem. math.random() turns into an integer equation when you give it integer arguments.
Yes: as you've observed, setting a function's environment will not affect the environments of any functions called (else the operation would have disastrous side-effects). If it is a necessity for you to be able to achieve this, I would first attempt to clone the function called (as per [http://leafo.net/guides/function-cloning-in-lua.html](http://leafo.net/guides/function-cloning-in-lua.html)), and then set the function environment of that function as you like. Since the function is a clone, you will be able to change its function environment without affecting the function it is cloned from.
At least the "original" Lua implementation from PUC Rio cannot handle Unicode variable names. Example (you can check in [https://www.lua.org/cgi-bin/demo](https://www.lua.org/cgi-bin/demo)): vör=5 input:1: unexpected symbol near '&lt;\195&gt;' So it is no bug when a source code check tool complains about unicode letters. When an alternative engine like LuaJIT supports it, fine, but than it is not really Lua anymore...
Hm I settled for backing up _G before I run any game code and restoring it to it's previous state afterwards I believe that's what busted does to "sandbox" its tests as well.
Hm I settled for backing up _G before I run any game code and restoring it to it's previous state afterwards I believe that's what busted does to "sandbox" its tests as well.
Sure. Though, I should point out that a deep copy of the whole global table can be a very expensive operation, and doesn't cover all cases. For example, the implementation likely does not clone functions, threads, or userdata. This means that any operations which modify these values (e.g. setting a function's environment) will not be restorable through this method. &amp;#x200B; A possible situation in the context of a game is that there is a player object implemented through userdata, and that player is retrieved from a global table by the function you're attempting to sandbox. If they run a data-changing method on that userdata, such as setting the player's health, that will not be undone by the global table restoration.
Let's go at this analytically: In Lua, everything is one of 1. Global 2. Upvalue 3. Local For simplicity, let's say the function we have is just `f`, and it internally calls `fg` (global), `fu` (upvalue) and `fl` (locally defined), and `fu` in turn calls `fuu` (which is also an upvalue) In the case of `fl`, it is declared within `f` itself, so it will inherit the environment of `f` at the moment of its (`fl`s) creation, that is, every time `f` is called, so this one already works the way it is. `fg` is just a bit trickier; if you give `f` a new environment, you probably already provide copies of all the functions in there as well. `fu` and `fuu` would then be the trickiest ones. Luckily for you. To find out if we can solve the problem, let's revise our tools: - `debug.getupvalue` allows us to get any upvalue of a function - `debug.setupvalue` lets us set a new upvalue - `type` lets us check if an upvalue is a function - `debug.getinfo` tells is how many upvalues there are So, with that in mind, the algorithm could look something like this: - Get the number of upvalues with `debug.getinfo(f, 'u').nups` - iterate from 1 to that number - get each upvalue and check if its a function - If it's a function (`fu`), set its environment and recursively scan that ones upvalues (`fuu`) as well I'll leave it to you to implement that, but feel free to ask if you have any trouble with it :)
I've only had a quick look at redux, and it really seems like one of those many attempts to make best practices into a library so it becomes harder to screw things up. It may be somewhat useful for larger projects, specially with more developers involved, but for a one-man project to turn a light on it sure is overkill. The funniest thing is, I don't even get from the post what the reason for wanting to use it was. It really seemed like a very simple problem with an even simpler solution: a REST api with one endpoint.
If you have a Windows 10 computer, you can upvote the Feedback, which will help it get prioritized better! I know we all get frustrated when people asking for help refer to the language as "LUA" ;) *Disclaimer: I'm a Microsoft employee, but this is not work-related, I'd just like to see this changed.*
I'd love to help but I get 'your account does not have access to this feedback' when I click the link.
While I understand the reason for concern... I am going to be honest and say it wouldn't bother me too much. I spent a lot of time in irc.freenode.net #lua and came to the conclusion that most "Lua developers" care more about the way it is spelled than if they write good code. In fact, I am yet to meet a Lua developer who can build Tecgrafs other packages in C++... meaning IM, CD, and IUP. So... if you want to give me crap for typing LUA on occasion... gosh darnit. I guess my best defense is that portuguese is not my native language. I don't care if it is Lua or LUA. It still does the same thing.
That's all the error says?
This content is available only in the Feedback Hub app on Windows 10
Hang on, Windows does not recognize Lua files. Default behavior for unknown files is to write: \[&lt;Extension Capitalized&gt; File\] so [test.abc](https://test.abc) is ABC File. Install something that register Lua files, on my machine is "Lua Source File" from Visual Studio Code. 
Good luck with your fix, I guess. Good luck with your MS job... brilliant idea taking this idea here. It is really taking off, and I got downvoted for telling you the truth. Are you the best employee MS has to offer? Because that would explain a LOT.
Yeah, this is essentially a feature request to have Lua files "known" by default, like "JavaScript File" for .js, "Python File" for .py, etc.
I didn't mean to criticize or question the abilities of people who capitalize it differently, I just see that's it's a common thing that's remarked on in this subreddit, given that the [Lua website](http://www.lua.org/about.html) has a section requesting that it be written as a proper noun, and I think it would be a fairly simple change to make. It would also be consistent with Windows' treatment of other script files, such as .js or .py.
I think you're being downvoted because people are perceiving your comments as rude. I'm certainly not the best MS has to offer - I work with some incredibly bright and hardworking people. Criticizing the product is healthy, especially when it helps management choose the right things for us to prioritize. Criticizing the employees is ineffective and mean. I'm not sure what it is that I've said or done that causes you to question my ability, but I'd like for you to stop.
Does a fresh install of Windows 10 really know what a Python file is? .js I would expect because any pre-installed browser would have setup that for association.
I'm not going to vote one way or other, but this is *argumentum ad hominem.* It's not a good look.
Yeah, that's it. It doesn't really give me much insight into the problem, and is why I'm seeking out those who are more experienced then myself.
That's rough. I haven't used this particular program. 
Do you think it's something that can be fixed? Or should I run it in different compilers to see if one provides more context into the error?
Have you looked at this? https://drive.google.com/drive/u/0/mobile/folders/11T2CgEetDKjze7t2L8WPLypM0Bjx0IcD?usp=drive_open
Not to be rude but in my opinion you are changing something that doesn't matter. I am not saying you are wasting your time... but really, I don't care if it is lua, Lua, or LUA.... that is semantics. I think it is fair to question the employee when they made their goal how to spell or maybe capitalize something. That is bold. Do your bosses know you are doing this? 
I care
Not now Icarebot, not now.
I'm not actually making the change (though I do have the freedom to, I'd probably just need to include the team that owns file associations in the pull request). Feedback Hub is for precisely this purpose - pointing out bugs, rough edges, and feature requests, so they can be prioritized based on user impact. Since this subreddit represents a decent chunk of impacted users, it makes sense to let them know about the feedback so they can vote on it if they would like the change. We're actively encouraged to make feedback like this when there are areas of Windows that have bugs or could just use some improvement.
I'm actually not certain, my Surface is probably "tainted" with development tools to some degree :) I can check on a test computer at work on Monday, though.
&gt;We're actively encouraged to make feedback like this when there are areas of Windows that have bugs or could just use some improvement. Right then, I will leave you to your spelling error and wish you the best of luck.
No I have not actually, this is interesting. The only thing is that the scripts used were oringally from SethBling, however they were edited by Winterbunny to work on Super Mario Kart instead of Super Mario Bros. So, I probably will use the MariFlow scripts instead (which seem to work correctly). I think the Mario Kart version become so complex, no one really cares or knows about it. Thank you in either case.
arg[1] arg[2] etc...
Are those just protected names then?
`arg` is a global variable [the standalone Lua interpreter defines automatically for you](http://www.lua.org/manual/5.1/manual.html#6), yes.
However, be warned that you can't use the e switch with it. &amp;#x200B; That's why I quit PUC-Lua CLI and created my own, much much better one [https://github.com/tilkinsc/LuaConsole](https://github.com/tilkinsc/LuaConsole) Check it out!
\`function f:update()\` is the equivalent of \`function f.update(self)\`, as it is just a short hand. &amp;#x200B; Sample Code: ```Lua local f = {j = 0} f.update = function(self) self.j = self.j + 1 end print(f.j) f.update(f) print(f.j) f:update() print(f.j) ```
Cool now make a dual stack calculator, which parses an input string.
In which situation would you want to use arg and -e? I can't think of one off the top of my head. 
lua -e "for i, v in next, arg do dofile(arg[i]) end" filea fileb filec Useful for automation, doing things like processing results of those files, setting up the environment for REPL mode, who knows. I had a use for it. Check out my post here: https://www.reddit.com/r/lua/comments/afqtql/luaconsole_now_supports_51x_to_luajit_in_an_aio/
 lua -e 'for i,v in pairs("filea", "fileb", "filec") do dofile(v) end' Surely that's just as good?
A hack, yes, now try using $*, suddenly it doesn't work. `lua -e 'for i, v in pairs($*) do dofile(v) end'` `lua -e 'for i, v in next, arg do dofile(v) end' $*`
I don't even know what $* is 😅
Ahh so in bash or batch you may have arguments to a function or something. $* is all of those arguments in linux. Perhaps you prototype a way to dump out everything ls says numerically. `luaw -c -e "for i, v in next, arg do print(i, v) end" -n $(ls)` You'd get something like: ``` 2 lcluajit.so 5 luaw 3 libluajit-5.1.so.2 1 dll 4 libluajit.so 6 res ``` 
Here is an attractive example :P `luaw -c -e "for i, v in next, arg do print(i, v) -n $(ls)` 2 lcluajit.so 5 luaw 3 libluajit-5.1.so.2 1 dll 4 libluajit.so 6 res 
I would recommend you add history and tab complete support. That's far and away the most important thing for REPL usage. If you don't like GNU readline, you can use linenoise, which is a single file bsd-licensed library
I don't use `arg` and wouldn't recommend it to anyone else. In fact, I had even forgotten that was a thing at all. It's useful when you want, for whatever reason, the entire command line. For example, let's look at the following command line: lua -e 'print "hello"' -i Lua 5.3.4 Copyright (C) 1994-2017 Lua.org, PUC-Rio hello &gt; print(table.concat(arg, ' ')) -e print "hello" -i &gt; = arg[0] lua &gt; print(...) &gt; _ As you can see, `arg` allows us to access the entire command line, even the 0th argument, which is the name with which Lua has been called. A much nicer way to handle this is using `...` instead, for several reasons: 1. It filters out everything the Lua interpreter already handles and leaves us only with the arguments that follow after the script name. 2. It is way more modular, as it allows loading a chunk and passing arguments in like a normal function. See below for an example. -- arg.lua print(arg[2], arg[3]) -- ellipsis.lua print(...) # on the terminal: lua arg.lua hello world # this works lua -e 'print "hello world"' arg.lua # this already breaks lua -e 'loadfile"arg.lua"("HELLO", "WORLD") # doesn't work lua ellipsis.lua hello world # works fine lua -e 'print "Hello World!"' ellipsis.lua # works as well lua -e 'loadfile"ellipsis.lua"("HELLO", "WORLD")' # also works as expected
Clever plug ;) (I just saw your other post about it xD)
\`a better CLI application than PUC-Lua/LuaJIT\` bold claim. I am sure this is overall a more user-friendly, nicer to use command line for Lua, but you seem to misunderstand the purpose of the PUC Lua interpreter. It's \*meant\* to be simple and small. It works well as a productive environment, as it runs fast and doesn't waste any resources on developer happiness. LuaConsole seems more like the obvious conclusion of this design choice than a contender that fills the same spot. Not complaining though, the Lua world really needs more ease of use to make itself attractive for developers to switch or at least adopt Lua as another viable language, specially those who come from ecosystems like ruby, where you can just add a line to your gemfile and suddenly have an awesome console like pry to debug their stuff live with proper markup. The one flaw I see though, is that it seems to only work with its own executable. It would be incredibly useful if you could just require "luaconsole" from within any Lua environment and just start debugging in-place.
While I use rlwrap for my own internal development, I'd recommend the second alternative if you wish to release to the Lua community in keeping with Lua/LuaJIT's more permissive license.
LuaConsole isn't a debug environment. It is a CLI which takes user inputs and directs it into the lua environment. It can work with many SO and switch which lua version you want. Heck you can even use your own version of lua if you supply that, given you modify the build process to build lua combined with the 2 files which handles how it works.
The problem with tab completion is its a dependency and not cross platform. The problem with readline is it was only available on Linux. The available options that I found were also huge for windows. If you want tab completion on windows and mac, that is available. However, this CLI isn't really a IDE, but you can use nano via `: | vipe | ./luaw -` and you can also direct vipe to something that can.
&gt; I'd recommend the second alternative if you wish to release to the I like the idea of keeping it MIT, but I will develop my own solution if anything. Check my other comment for my reasoning. However, you are free to use stdin to override the REPL functionality it brings for using it via stdin. I might also make stdin able to repeat reads with a switch later. So yeah use your IDE and a wrapper that reads from your main file :)
I think you may misunderstand. I'm suggesting you don't roll your own NCURSES wrapper, and instead use known and debugged code such as linenoise. Beware of catching NIH symdrome; it can wind up a terminal disease.
I actually don't like the idea of having tab completion for this project. This project isn't an IDE. This means that it will accept text, but it can't know when to suggest commands (like when editing a string). To suggest a command, the tab key isn't optimal as using tabs are definitely an option for things like string. This is because it has to parse the current input, which is a task on its own, and query lua for a list of all globals then string match through them. That is 41 string matches with luajit just for fun facts. I mean its do-able... You can use 'last issued command' using the up and down keys though :)
I also made the claim that at the time of having full support of everything they had, I had a smaller, better CLI. :)
Well so far it's all been in house. I add multilingual support today. So Spanish and porchugeese people can use it. Usually people would get gettext via gnu but that was just an hour of work. I'm not excited to get into terminal buffers but it's not like it's going to be hard. Some guy did it 8 years ago for a project that was named the same, although it was buggy as crap as I saw. I'm actually looking forward to making an IDE that you can pipe data out of to LuaConsole. You can just use `: | vipe | ./luaw -` and is vim just fine. 
&gt; Welcome to my fucking calculator! Very professional there, I like it.
I also want to note the fact that the REPL functionality isn't the selling factor, which is the possibilities you can do with it now. History already works and that is terminal dependent.
By the way you can't use arguments with -e like I stated above.
if you're already using -e, you might as well use it to pass in values lua -e "my_args = {'hello', 'world'}" -e "print(table.concat(my_args, ' '))" -i
Wow! Great work! :) It's awesome that you were able to implement a NES emulator in Lua with just 5000-6000 lines. &amp;#x200B; Love2D does use luajit by default. You can query the state of JIT in the code like so: `local status, ffi` `if type(jit) == "table" and jit.status() then` `status, ffi = pcall(require, "ffi")` `if status then` `print("JIT is enabled")` `end` `end` There is Zerobrane Studio which has a love2D debugger built in: [https://studio.zerobrane.com/](https://studio.zerobrane.com/) the last time i checked it it was working great for simple games. &amp;#x200B; If you want to learn on how to optimize lua code take a look at this first: [https://www.lua.org/gems/sample.pdf](https://www.lua.org/gems/sample.pdf) I saw the following in your code as an example: `self.peeks[peek] = isDefined(self.peeks[peek]) and self.peeks[peek] or peek peek = self.peeks[peek] self.pokes[poke] = isDefined(self.pokes[poke]) and self.pokes[poke] or poke poke = self.pokes[poke]` &amp;#x200B; Which could be micro optimized like so: `local peeks, pokes = self.peeks, self.pokes` `peeks[peek] = isDefined(peeks[peek]) and peeks[peek] or peek peek = peeks[peek]` `pokes[poke] = isDefined(pokes[poke]) and pokes[poke] or poke poke = pokes[poke]` &amp;#x200B; Just remember that every self.something call is a lookup in a table in the lua language which costs time. By using these as local references you can decrease the number of lookups. &amp;#x200B;
I would ask on the lua mailing list or perhaps somewhere on itch.io. I dont think it does use luajit, but I havent done anything more than play with it. Go poke around sheepolution.com as well?
Look at Awesome Love2d on GitHub for some ides, etc. https://github.com/love2d-community/awesome-love2d#ides
Neat! You should join the love2d discord server if you haven't, there's a lot of helpful people in there (even the devs), I'm sure they may help you not only with love but with lua too. https://discord.gg/rhUets9
ew vim
What about ALE? https://github.com/w0rp/ale/blob/master/README.md
Yup I just use vim/nvim with ale for linting and I'm all set for lua and most other languages.
Many people think that VIM is so hard that it's almost unusable for everyday work. However, it's just because its layout is a bit different. When you get used to it, you'll probably notice that you can code even faster than previously(at least that's how it went in my case :P).
I use emacs as my editor, but editor tribalism is not cool.
Oh, I've just been apparently too lazy to search for more modern alternatives to Sytastic. I'm going to need to give ALE a try now. 
I always forget about SpaceVIM. Might be fun to try again more thoroughly this time since they're past 1.0. If nothing else, it may give me some ideas to pursue in my VIM configuration.
Hey! I am the creator of https://www.github.com/tilkinsc/LuaConsole My requests are for auto completion and such. Do you think you can adapt this project as an IDE for mine?
That isn't really a pretty way of doing it because you would have to format arguments. In the case of $* it would need to be processed. In LuaConsole you can only -e once, however. It is really useless to have all that code inside two different -e's. `lua -e "my_args = {'hello', 'world'} print(table.concat(my_args, ' '))" -i` When in LuaConsole, `luaw -e "print(table.concat(args, ' '))" -p -n hello world`
I am on windows. So I always use notepad++. However, on linux, I use sublime and vim. I don't really like vim due to its awkward shortcuts, but it gets the job done when you are just appending something. Anything is better than nano :P
Interesting, I didn't see anything related to https or configuring certs, or SNI or anything like that. Looks like this is a re-inventing of apache. What are the goals for this project?
I usually go straight for the reference manual. You can find stuff pretty quickly with ctrf+F: https://www.lua.org/manual/5.3/manual.html I don't know if someone made a neatly formatted "cheatsheet-style" reference for 5.3 though.
I've actually been using vim with Lua for a while and I couldn't be happier. It does pretty much everything I need it to do and more.
Of course [someone did that](https://learnxinyminutes.com/docs/lua/), it's *the internet* after all ;)
From 5.1 to 5.3 there haven't been all that many important changes. Benchmarks run *considerably* faster, but that's an implementation detail. Other than that, the way function environments work has changed completely, and numbers can now be (internally) integers as well as floats, but that only becomes relevant when you actually want to do integer-y things with them (like bitwise operators). If you want to use Lua a lot, just learn it. It's probably the second smallest multi-purpose language I know, right after Lisp. ~~I'd say it's the smallest, but I don't want to piss off the lisp programmers here.~~ Otherwise, just use that reference and 98% of the times you won't have any problems; if you do, the error messages will most likely give you a good idea of what the problem is. Also have a look at the changelogs at the bottom of the Lua manual for both 5.2 and 5.3.
I thought you were posting one. I got all excited thinking "I'd like to see this". Stupid me.
Did you specify the path to lua-lsp in the configuration for vim-lsp? This is how I told LanguageClientNeovim to run lua-lsp: let g:LanguageClient_serverCommands = { \ 'lua': ['C:/ProgramData/chocolatey/lib/luarocks/luarocks-2.4.3-win32/systree/bin/lua-lsp.bat'], \ 'python': ['C:/Anaconda/Anaconda3/scripts/pyls.exe'] \ } I only ask because the sample configurations in most of the plugin help files I've read give something to the effect of `\ 'lua': ['lua-lsp']` which would only work if the folder containing lua-lsp were in your system's PATH variable (I think).
Yeah, I have: if executable('lua-lsp') au User lsp_setup call lsp#register_server({ \ 'name': 'lua-lsp', \ 'cmd': {server_info-&gt;['lua-lsp']}, \ 'whitelist': ['lua'], \ }) endif That executable() call returns 1. I forgot to mention, my setup works on macOS so the vim part *should* be correct. &gt; which would only work if the folder containing lua-lsp were in your system's PATH variable (I think). It *is* in the PATH, but I'll try pointing it directly to the batch file.
\[Learn Lua in 15 minutes\]([https://learnxinyminutes.com/docs/lua/](https://learnxinyminutes.com/docs/lua/))
Where's your code? We can't help you if we can't read it. Also, post your code as text, *not* an image.
Apparently the problem is not a Lua error, but using this at all.
Thanks for your reply. The code can be found here (I didn't write this) https://github.com/ChenThread/ctif/blob/master/viewers/oc/ctifview.lua What I've done is saved it to the in-game computer as a file called "ctif-oc". Then I try to use it by using "ctif-oc -the path to the image file on my actual computer-" on the in-game computer but it's not working. I'm hoping someone who understand lua can decipher what argument I need to pass to it to make it find the ctif file and run.
Metatables allow a user to add actions or modify the behavior of tables via so-called metamethods. The `__index` metamethod allows a user to add behavior for when a user tries to access an index of a table that doesn't exist. Strings are weird as in they are technically a separate type, but strings have a metatable associated with them that persists across all strings. This line of code first gets that string metatable `getmetatable('')`, then adds an `__index` metamethod to it (which will be called when a string is indexed `str[x]`) that returns the requested character: `str[x] =&gt; string.sub(str, x, x)`.
&gt; Strings are weird as in they are technically a separate type, but strings have a metatable associated with them that persists across all strings. Wow, good to know. I haven't seen that used or mentioned anywhere before...
getmetatable('') simply gets the metatable for the object \`""\`. All strings share the same metatable. But what \*is\* a metatable? It's basically a table associated with one or more things, that has a couple keys in it. For example, \_\_index is one of them (Afaik alll of them start with \_\_). These keys (Which are usually functions but can sometimes also be tables) define some special behaviour (Like operator overloading, destructors/gc hooks). The \_\_index "overloads" indexing with 1 gotcha: It's only used after trying to index the object directly (And if the key is not found in it, then \_\_index is used). Since strings have no indexing, that gotcha doesnt apply in this case. &amp;#x200B; In the end, after executing that line, this two are equivalent: &amp;#x200B; ("foo")\[1\] (function(str,i) return string.sub(str,i,i) end )("foo", 1) 
&gt; I'm confused why you'd replace a data structure like that with Lua. One of the original purposes of Lua was to be suitable as both a programming language and a configuration format (like, as you mentioned, JSON and YAML). Many applications that use Lua use it for both code and configuration files. For example: -- gameconfig.lua video = { resolution = {1024, 768}, depth = 24, antialiasing = false } hud = { color = 'green', size = 'small' } &gt; JSON is pretty much globally parsable in virtually any language or runtime If your language includes a built-in JSON parser, that's good, you're probably better off using that. But not every language comes with JSON out of the box, so you'd have to include an external library to parse your configuration files (or write your own, but that's not the ideal). Since Lua is teeny tiny (a few hundred kB), it's a very good choice for that purpose---and you get scripting capabilities for free. That's more or less the idea. I hope I made things clear.
You don't see it used often because it modifies the language in a method you might not expect. This example actually eliminates the current __index which is the `string` library
Often there is a pull for wanting to add extra features to configuration files. Comments, conditional blocks, variables, etc. Inevitably, if people try to implement these by themselves it ends up as a horrid and fragile hack. Might as well switch to Lua at the point.
Lua is better than JavaScript.
It is, but that has nothing to do with the question xD
Which means you can no longer do things like `("="):rep(80)` (Which repeats the string "=" 80 times.
Aside from it being derived from JavaScript there is no formal relationship between JSON and JavaScript anyways. So while your opinion is valid it doesn’t answer the question in-so-much as JavaScript wasn’t even mentioned. 
So if your language of choice lacks a Lua parser should you write a Lua parser or build your own then?
For anyone interested, it's super easy to preserve the old index while having this new behavior. ``` getmetatable('').__index = function(str, k) if type(k) == "number" then return string.sub(str, k, k) end return string[k] end ```
JavaScript Object Notation
Hey, Lua is awesome as config file format, that's one of the main reasons we are using it in our game projects. I think the syntax is nicer than with JSON and it's certainly more flexible. Plus it means we can do both scripting \*and\* all setting/definition/serialized data files using one and the same syntax. Makes things a fair bit more convenient... &amp;#x200B; (To be honest if 
Scripting languages are a wonderful tool for configuration! Unfortunately, for some reason "storage" and "configuration" are often confused with each other. Reminds me of a Java project I saw that was 99% configurable by XML. By the time it was somewhat feature-complete, the XML had home made variables, ability to inherit from other XML files, functions, and even the ability to call Java APIs. There was an idea to replace XML with Groovy scripting language, but it was rejected because "**Declarative configuration is easier to debug**"
You do know JSON stands for javascript object notation, right?
You use liblua
&gt; Aside from it being derived from JavaScript there is no formal relationship between JSON and JavaScript anymore. Pretty sure I made that abundantly clear. 
Lua is intentionally very simple language with just a few basic data structures. But you can use its "building blocks" to create very complex functionality using these structures. I have never used ECS library but I am sure any Roguelike logic can be programmed in Lua without any problems at all, just using its default features (and building your own on top of them, in pure Lua). All complex structures in Lua are created using tables. Have a look at them, and especially at "metatables" - those can be used to do some very tricky stuff. But it's not something intended for Lua beginners. If you have specific questions, I can help. What do you want your data structures to do?
If you use love2d then there are plenty of libraries for this sort of thing (also a roguelike library). If you don't want to use a pre-existing library then at least check out the code and see how they've gone about it. Search for "awesome love2d" (a list of cool libraries, there's also a "awesome lua" one)
I do agree that löve is very cool but isnt quite what i am looking for right now, in part because there is so much it can do. I am trying to do as much as possible by my own hands, as a learning exercise and as detailed above because of the mistrust of what others have made even if it is illogical as it is. What i have been using is very minimal. I just wanted to see if there some reason my idea would be terrible before rewriting what i have with that idea in mind
I am sure that lua can be used for whatever logic i would want for a roguelike. Most of the languages i have looked at use a library to make ecs easier to use, but ecs is just the idea of Entities, which are an id that references Components, which are containers for data, and Systems which take an entity that has the required components and uses the data to for instance draw to the screen or changes the data. I came here only to ask if there is something the could go very wrong with using tables as entities, entries in a table as components, and a function that is given reference to the components directly as systems.
It's not a terrible idea, no. Lua is a small but very flexible language. I've grown really quite fond of it. I would still suggest reading what others have written in Lua to get a grasp of what is really possible with the language. 
The main thing that an ECS theoretically needs and Lua doesn’t have is preemptive multithreading. I found this quote when looking up ECS: &gt; Each System runs continuously (as though each System had it’s own private thread) and performs global actions on every Entity that possesses a Component of the same aspect as that System. Lua only supports cooperative multithreading. However, there are libraries that expose the preemptive multithreading functionality provided by the operating system. Look at these links for details: https://github.com/LewisJEllis/awesome-lua/blob/master/readme.md#concurrency-and-multithreading http://lua-users.org/wiki/MultiTasking
I think your idea is 100% correct and gets at the spirit of Lua. What takes a complicated library in another language just takes a table in Lua. 
This is not something that is needed for ecs but is very useful for optimisation as far as i am aware. Thank you either way
This is blocking, isn't it? It would be way more useful if it had an option to leave the process running and doing other stuff in the meantime, possibly even having the choice to either read data as it is produced (stdin and stderr) or to accumulate them into a string for later evaluation.
\&gt; This is blocking, isn't it? Yes, it is revolves around invoking the os.execute() built-in. So, yes, it is blocking. \&gt; It would be way more useful if it had an option to leave the process running and doing other stuff in the meantime ... That is exactly the hard part in the popen3() solution. Co-routines (green fibers)? Threads? Evented callbacks? I am certainly not against that approach, but it is much more complex. It is simply a fact that "async" is (relatively) hard to wrap up. In my opinion, popen3() is merely a half-finished solution, leaving it up to the user to wrap up the hardest part of the code. The localexec.spawn() solution assumes that the user who needs to do other stuff in parallel, will run localexec.spawn() in a co-routine or thread, ensuring that the main thread/fiber will be able to do something else while localexec.spawn() finds itself waiting (=waitpid) for the child process to terminate. While "async" is certainly the way to go in user interfaces, it is rarely a good solution in command line tools or server-side programs, since in those situations we handle "async" by forking off child processes in traditional unix/linux style. I am certainly not against "async", but I think that the extra complexity cost of "async" needs to be justified by sufficient extra benefits; which can surely be reaped in user interfaces, but not necessarily in other situations.
\&gt; This is blocking, isn't it? Yes, it is blocking, as it revolves around invoking the os.execute() built-in. Something like the following would unfortunately not be directly possible with os.execute(): localexec.asyncSpawn(processInput, onfinished=function(processOutput) print(processOutput.stdout) end ) In theory, it would be possible to handle the SIGCHLD signal sent by the child process to the parent and execute such onfinished handler at that point, but the documentation seems to advise against that, because of POSIX.1-2001: [https://en.wikipedia.org/wiki/Child\_process](https://en.wikipedia.org/wiki/Child_process) "POSIX.1-2001 allows a parent process to elect for the kernel to automatically reap child processes that terminate by explicitly setting the disposition of SIGCHLD to SIG\_IGN." This can (in theory) still be overruled by setting the SA\_NOCLDWAIT. Therefore: "calling 'wait' remains the most portable paradigm for cleaning up after forked child processes." Hence, it looks advisable to use a thread that uses one of the wait() functions to wait for the child process to terminate. This is not possible in async mode, but it can be achieved using an additional thread. For example, by using the lua-pthread binding ([https://github.com/mah0x211/lua-pthread](https://github.com/mah0x211/lua-pthread)), a draft function asyncSpawn could like this: local asyncSpawn=function(processinput,onfinished) local arg={processInput=processInput,onfinished=onfinished} local doSpawn=function(arg) local processOutput=localexec.spawn(arg.ProcessInput) arg.onfinished(processOutput) end local pthread = require('pthread') local th,[err=pthread.new](https://err=pthread.new)(doSpawn,arg) return th \~= nil end Under the hood, the thread would still use os.execute() because the practice of ẅaiting for the child process to finish is something that cannot readily be abolished. So, it is possible to implement that, but in all practical terms, it would require adding a binding to the pthread library. That would an additional dependency.
I think the underscore is a good way to go. Writing to keys within an object can be prevented with the __index and __newindex metamethods however.
Ah, I didn't know about `__newindex`. Thanks.
1. `local` 2. no
I'd like to add, that another way to implement strongly encapsulated fields in Lua is via upvalues (this idiom is getting quite popular in JS world). Here is an example: function Player(name, level) return { name = function() return name end; level = function() return level end; levelUp = function() level = level + 1 end; } end Note that in this example, you'd invoke the methods using dot instead of colon: local player = Player('anon', 1) player.levelUp() print(player.name(), player.level())
\`\`\`local t = {} -- class &amp;#x200B; t.y = 0 -- public local x = 0 -- private &amp;#x200B; function t:set7() -- set x = 7 end &amp;#x200B; function t:get7() -- get return x end &amp;#x200B; function t:set5(num) -- set self.y = num end &amp;#x200B; function t:get5(num) -- get return self.y end &amp;#x200B; function FooBar() -- constructor local self = setmetatable(t, {}) return self end\`\`\` &amp;#x200B; You can do something like this to make it actually private. &amp;#x200B; There's no defined way to make classes in Lua so your real answer is that it depends on the way you implement classes. &amp;#x200B; But as mentioned prefixing \_ is common for marking a variable as "private" or unused. I don't like using this except when I have to like in \`local \_, y = foo()\` or maybe even \`for \_, v in ipairs(tbl) do\` &amp;#x200B;
Did you run: `eval \`luarocks path\``?
I will try this tomorrow (cutorch install takes half an hour so i'm out of time tonight). Would you mind explaining what I should be looking for with eval?
What the eval statement does is loads the path to luarocks into your `$LUA_PATH` and `$LUA_CPATH` system variables so that Lua can use it; Lua itself doesn't know where luarocks installs things. 
Okay, thanks! Going through the docs on this now. Does it make intuitive sense to you that lua would find the path correctly after I run `luarocks install` but don't set any ENV variables (I'm calling lua from a different shell)? And then that lua would not find the path correctly after a reboot?
Not really. What's the output of both `luarocks path` and `cat /etc/fstab`, just so we can eliminate it's not writing to a temporary directory?
luarocks path: ``` export LUA_PATH='/home/ubuntu/.luarocks/share/lua/5.1/?.lua;/home/ubuntu/.luarocks/share/lua/5.1/?/init.lua;/home/ubuntu/torch/install/share/lua/5.1/?.lua;/home/ubuntu/torch/install/share/lua/5.1/?/init.lua;./?.lua;/home/ubuntu/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' export LUA_CPATH='/home/ubuntu/.luarocks/lib/lua/5.1/?.so;/home/ubuntu/torch/install/lib/lua/5.1/?.so;/home/ubuntu/torch/install/lib/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' ``` cat /etc/fstab `LABEL=cloudimg-rootfs / ext4 defaults,discard 0 0`
cloudimg makes it sound like it's a reset-on-boot OS. What distro are you using? Just Ubuntu?
I had left out a littleee complexity. I'm calling lua from a persistent `screen` terminal that is launched automatically at startup. It runs a lua command every minute. This command failed every minute. Then i ran `luarocks install caffeloader &amp;&amp; luarocks install cutorch &amp;&amp; luarocks install cunn` in a separate terminal. Once the install finished, the lua command in screen succeeded every minute. But on the next boot, the every-minute screen lua command no longer succeeded
Sounds like a read-only OS image. See my other comment.
I'm using ubuntu 16.04 and I'm on an EC2 instance. The "reboot" was actually an ebs-backed AMI snapshot. However, I have also tried an actual reboot and that was failing, too.
Alright, AMI clears up that question. When you reboot, does `$HOME` stay the same as it was prior to reboot?
yes
I've got no clue then. Open up an issue in the luarocks GitHub repo and include the above information in case someone else has any ideas?
Thanks I appreciate the help and taking a stab at it
Criticism and contributions are very welcome. Just trying out is too. Have a great day!
So hiding via shadowing. I didn't think of that. Thanks.
Okay, so when a function closes around some variable, we do not have access to the variable through the function. So if the variable is not accessible in some other way -- say it's local to the context in which the function was defined -- then it is not accessible at all. Nice trick.
This does come with a performance loss though, as every new object needs to generate new closures; also it's technically still very easy to gain access to the private members using the debug library, but if you only want to make it very clear that people shouldn't be messing with that value, then that's totally fine. If speed isn't as much of a problem, you could also create a new table that holds the private members, and store it in the original objects metatable: local object = setmetatable({}, {__private={}}) getmetatable(object).__private.password = "secret" Same as with closures, this doesn't really make it impossible to access, but it does a very good job at conveying that people should, in fact, not be messing with these values (They'd literally have to type `private` to access them). You could also speed up access a bit by turning your methods into closures that have the private table as an upvalue, avoiding calling `getmetatable()` and looking up the `"__private"` key.
If speed isn't as much of a problem, you could also create a new table that holds the private members, and store it in the original objects metatable: local object = setmetatable({}, {__private={}}) getmetatable(object).__private.password = "secret" Same as with closures, this doesn't really make it impossible to access, but it does a very good job at conveying that people should, in fact, not be messing with these values (They'd literally have to type `private` to access them). You could also speed up access a bit by turning your methods into closures that have the private table as an upvalue, avoiding calling `getmetatable()` and looking up the `"__private"` key.
 -- Your code: local getter do local value = 5 function getter() return value end end -- Someone elses code: local hack do local value = "dummy upvalue" function hack(new_value) value = new_value end debug.upvaluejoin(hack, 1, getter, 1) -- Somewhere else: hack(3) print(getter()) -- Prints 3! -- This works differently in 5.1, but it's also possible (and even easier, actually)
Why would Lua be in 7-zip? I can't find any reference to this being a thing.
I went to look up how to download Lua online and it said to use 7-Zip. What do you use?
Personally? I use `apt`. Otherwise you could use the downloads page: https://www.lua.org/download.html It contains both prebuilt binaries and source code.
7-zip doesn't _download_ Lua; it will help you _unpack_ Lua after you've already downloaded it. That is, Lua is distributed as a compressed archive file that Windows cannot normally open, but 7-Zip can open it and allow you to extract the Lua sources.
I erm think Lua might be beyond your skills...
I can't tell if this is real or a joke, but either way I'm amused.
I would have tried expressing it in a more diplomatic way, but I ultimately agree with this.
So to avoid misunderstandings: Did you download 7-Zip the program, or a .7z that should contain Lua? 7-Zip the program does not contain Lua at all; it's a different program that you use to open 7z archives. If you've downloaded a 7z archive somewhere, then you'd have to at least tell us where you got it.
I downloaded 7-Zip. I have been using this website trying to download it [http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies](http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies) and it says there should be a folder called " lua-5.3.0.tar.gz" and I can not find that in 7-Zip.
I have coded many times before, real coding not moving blocks. I have done a bit of Java, Python, C, and whatever Minecraft uses (I modded it once). I am fully capable of learning Lua.
Well, either way, since you seem to be having considerable trouble with the process of compiling Lua by hand, I would suggest you just download the [ZeroBrane IDE](https://studio.zerobrane.com/), which comes with many versions of Lua already compiled and ready to use.
Try opening the file lua-5.3.0.tar.gz using 7-zip, then extract it.
I'm also curious now. If no one answers it might be a good idea to ask on the lua-l mailing list.
Presumably because, by creating the coroutine yourself, you are stating that you want to manage it yourself. With that, it gives you the information needed to do so, without making any decisions on your behalf (e.g. throwing an error). If you decide that you want the features of a coroutine, but don't want to handle the thread yourself, you can use \`coroutine.wrap
Presumably because, by creating the coroutine yourself, you are stating that you want to manage it yourself. With that, you are given the information needed to do so, without having any decisions made on your behalf (e.g. throwing an error). If you decide that you want a coroutine, but don't want to handle the thread yourself, you can use \`coroutine.wrap\` to get a function that will resume for you. The function you get from this will generate an error if one occurs in the coroutine thread.
That makes sense. Thanks.
Good idea. But I think /u/VortisDev has given a decent answer.
That tutial has a "Step 2 Download Lua sources" It start with the sentence " Lua sources download page is [\[4\]](http://www.lua.org/download.html). " The \[4\] is the link to the sources... When you click on it you will be directed to [http://www.lua.org/download.html](http://www.lua.org/download.html) And there you will find the file you are looking for. The tutorial is quite long and contains a lot of steps (including download and install of a C Compiler). You should carefully read it, and to it step by step. &amp;#x200B;
It is because a coroutine is a thread, and not a function. If a coroutine returns, it is killed. If a function returns...it returns data, that’s it. In order to facilitate repeated message passing and yielding, coroutine.yield was introduced. Use coroutine.yield for getting data out. It’s normal in C for a function with a return value that you normally wouldn’t need, to return an int or maybe some other information related to exception handling. That’s also the case for the way that the coroutine library is written.
You're looking into [Serialization](http://lua-users.org/wiki/TableSerialization). It's possible however, if I make some assumptions, that loading your file is simple. Assumption 1: Keys are strings. Assumption 2: Values are strings. Assumption 3: The equal sign will appear exactly once per line Assumption 4: No value contains a newline. ``` local split = function(string, sep) local ret = {} local i = 1 for x=1, #string do local c = string.sub(string, x, x) if c == sep then i = i + 1 else ret[i] = if #ret &gt; 0 then ret[i] .. c else ret[i] = c end end end return ret end local readTableFile = function(filename) local ret = {} for line in io.lines(filename) do local data = split(line, '=') ret[data[1]] = data[2] end return ret end ``` Obviously you need a few more error traps, and checks around my assumptions, and probably a better split function. And if you really want to do it right, you need to have a glance over the Serialization page.
Hint: Write your data to files in this way: &amp;#x200B; `local data = io.open(path,"w")` `data:write("return {")` `for k,v in pairs(person) do` `data:write(string.format("[%q]=%q,\n",k,v))` `end` `data:write("}")` `data:close()` &amp;#x200B; Afterwards, you can read the data back using this single command: &amp;#x200B; `local person = dofile(path)` &amp;#x200B; This is faster, cleaner and it should work for all k and v values (not only strings). Remember, in Lua, the program is data and the data is program.
You can read text files just as easily as write them: local file = io.open(path, "r") -- Opens a text file for reading for line in file:lines() do -- Loops over all the lines in an open text file print(line) -- Prints one line of the file end file:close() -- Close the file when done If you want to read the file back into a table, instead of printing each line, you could use `string.match` to split the line into the left and the right side of the equal sign, then write it into a table. local people = {} -- ...The for loop as above... local k, v = line:match('([^=]*)=(.*)') people[k] = v -- ...
&gt;person = dofile(path)() Doesn't work for me. It ends up crashing for some reason. The rest is brilliant though, thanks. Happy cake day to you!
Oops, I am stupid, there probably should NOT be the second parentheses. Try just "dofile(path)"... I am not at my computer, sorry.
An alternative approach is to use a lua to json converter like [http://dkolf.de/src/dkjson-lua.fsl/home](http://dkolf.de/src/dkjson-lua.fsl/home) (this is just an example, there are lot of other converters, as lua module as well as C module). For simple cases it may be overkill, but if you want to serialize more complex structures it could make sense. It may look strange to use a javascript based format instead of luas native format (like the example above). But there are advantages: It has become a standard format also outside Javascript and there are a lot of tools for processing it. &amp;#x200B; I know both Javascript and Lua well, and I tend to say "Lua is Javascript without its flaws". But regarding serialize/deserilaize Javascripts JSON.parse and JSON.stringify Lua has a gap. Please note that JSON.parse has an important security advantage over Lua dofile (or Javascripts eval): JSON.parse will only parse literals and will not execute any code in the json file. Lua dofile should only be done in a trusted environment where it is sure that no malicious code can be injected. &amp;#x200B;
You can get a little more security by using the optional environment argument to [loadfile](https://www.lua.org/manual/5.3/manual.html#pdf-loadfile): local mySandbox = {} local myFile, error = loadfile("myFile.lua", "t", mySandbox) if myFile then myFile() else print(error) end Then the loaded file can't call any built-in functions or modify the global environment, which greatly reduces the amount of malicious stuff it can do.
Thanks.
I also work with CoronaSDK. You might be interested to know that if you have more than 60 upvalues in scope, you'll start finding many upvalues that are empty. It's just a limitation of the language implementation. Once you start getting a glut of values, just start storing groups into upvalue tables (collections) to reduce the number of total upvalues. 
Throws a 'unexpected symbol near if' for me on line 9. Any reason for this?
Because it's invalidly written. Probably best to find another split. [Choose from here.](http://lua-users.org/wiki/SplitJoin)
(my 2 second thought) Some environments do this kind of thing to host the game code, some call the api directly to get into the same sort of environment, So this COULD be a red herring local upval1 = 44 local function hostfunc() &lt;inserted code from zip file&gt; end "hostfunc" should be in the list of upvals so a function can be recursive. also assuming lua 5.1? You just build a test function that you send to the program that outputs the getfenv(hostfunc) in 5.2 I'm not sure you can do the same with the debug library In compiled code are variables refered to by name or are they indexed? (indexed iirc) you might be able to output the value of the variables and make educated guesses on the names If you can access them via string name you could also write a program to brute force the variables. something like err, val = pcall(function() return aaaaaaaaaaaaa end) -- test err display, debug etc... err, val = pcall(function() return aaaaaaaaaaaab end) -- test err display, debug etc... err, val = pcall(function() return aaaaaaaaaaaac end) -- test err display, debug etc... err, val = pcall(function() return aaaaaaaaaaaad end) -- test err display, debug etc... err, val = pcall(function() return aaaaaaaaaaaae end) -- test err display, debug etc... err, val = pcall(function() return aaaaaaaaaaaaf end) -- test err display, debug etc... .. but I think in lua the variable names are converted to upvale indexes... it's been a moment since I've looked at bytecode.
Those are the worst and most useless commit messages I have ever seen.
Yeah, I made them optional in admin/\_push.sh: if [ "$1"="" ] ; then msg=commit-$(date) fi I think that a commit message is useful when merging a topic branch. Otherwise, I don't really see what to say in a commit message, especially, when coding the first prototype of the application. What else to say than something like "building first version" ? Even when committing to a topic branch, what message would you add beyond the name of the topic branch? For me, committing amounts to pressing the save button, because the code is supposedly no longer broken. I don't commit if my changes would yield compilation errors. It does not mean anything else at that point. It is only when merging a topic branch that I think something meaningful can be said. But then again, the fact that you merged topic branch "new feature X" or "bugfix Y" into the master, is already present in the metadata, and it already says everything that there was to say. Therefore, in my opinion, there is no need for more messages than the meta data that gets created automatically when using topic branches. If I had written any commit messages while building this first version, they would have been useless and probably also misleading. I had some idea as to what the module was going to look like, but I also had to make lots of changes before being able to complete it. The git tool was created with a view on supporting the process of *maintaining* the linux kernel in a multi-committer environment. Linus really did not need the git tool to create the very first prototype of the linux kernel. In my opinion, it is absolutely normal not to use 99.9% of the git tool's features in a typical module project. These features are useless overhead in such simple context. The markdown facilities for the README page are much more useful, or even the github issue list, to streamline downstream user communication. Luarocks (npm, cpan, name it) , as distribution platforms, are also a more important at that stage and in that context. A project really first has to graduate further to the point where it can truly profitably use more features of the git tool. I do not want to use the git tool as a shiny toy.
You can write your own commit messages as you please. But on my team, this wouldn't fly. The datetime is redundant and completely useless information. Could as well just say "commit" and it would carry the same amount of information. "Initial commit" or "merged branch xyz" would at least provide something useful to help others understand what you were doing.
&gt;You can write your own commit messages as you please. But on my team, this wouldn't fly. Well, yeah, endless bureaucracies are the mainstay of humanity. I was rather trying to solve some problem with this localexec module, and not to win a paperwork beauty contest. Someone correctly pointed out that the 'localexec' problem is not completely solved. There is actually a need for an async version too. That makes sense, because there are circumstances in which a blocking/synchronous version is not acceptable. Such async version will probably have to work approximately like this: &amp;#x200B; `-- f1: function to execute in parallel thread` `-- arg1: argument to supply to f1` `-- f2: function to execute when finishing the execution of f1` `-- to be called with the return value of f1` &amp;#x200B; `local async_exec=function(f1,arg1,f2)` `local arg={arg1=arg1,onfinished=f2}` `local f_bg=function(arg)` `local result=f1(arg.arg1)` `local cs_mutex = phtread.new_mutex(` `PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP)` `pthread.mutex_lock(cs_mutex) -- enter critical section` `arg.onfinished(result) -- execute in primary lua state?` `pthread.mutex_unlock(cs_mutex) -- leave critical section` `pthread.mutex_destroy(cs_mutex)` `end` `local pthread = require('pthread')` `local th,`[`err=pthread.new`](https://err=pthread.new)`(f_bg,arg)` `return th ~= nil` `end` &amp;#x200B; So, now I am trying to see if I could shoehorn this type logic into [torch/threads](https://github.com/torch/threads). But then again, if I decide to work on making it work, it will become another repo, because I consider localexec to be "finished" now. It would have to be "localexec-async" or so; but only if the shoehorning actually succeeds. I pride myself on solving problems with duct tape and iron wire, usually, just for the hell of it. The downside of that is that I can obviously not keep my attention to mere bureaucratic concerns.
Yeah, I can tell you've never worked in a team. Calling sane commit messages "bureaucratic" screams "I'm not a team player".
I used to have a small team of two sub-contractors working for me for seven years. What struck me the most was the fact that the turnover in my team was so low. Everybody else seemed to be changing jobs after two years or less, but not people who worked for me. Eventually, I still had to disband our group because the technology we supported had started nose-diving badly in the popularity charts (Joomla). Strangely, I did my very best project after that. "Not a team player" may simply mean "better be the team leader yourself". I do not believe for a second that Alexander the Great was particularly a great team player either. Some people are meant to be followers, while other people are rather meant to be leaders. Furthermore, I know from personal experience that you do much better projects, and make much more money, when you are good at stubbornly nay-saying than by being agreeable. That is the number one reason why men make so much more money than women. Men are not agreeable. People do not respect you because they like you. No, they respect you because they fear you.
I forget about dofile I was doing this same method but I was reading the file and using loadstring on it I feel pretty silly now
This needs qualification: Lua &gt;= 5.2 or LuaJIT &gt;= 2.0.2
I think I'd tend to go for a nicely packaged and documented serializer than roll my own unless the storage syntax was given yet unsupported.
You'll write this whole word salad essay but you won't write git commit messages.
&gt; That is the number one reason why men make so much more money than women. Men are not agreeable. People do not respect you because they like you. No, they respect you because they fear you. Jesus Christ.
I once had a guy make a commit where: * He committed commented-out code * Left a comment with his initials and the date, and a short explanation * The commit message was something like "updates lines 56-99" I went over and was like "what's up with this commit?" He explained he wanted to remove the function, but remember who did it and when they did it, and why. Me: "that's exactly what git is for" 
1. No idea what kind of framework that is 2. Code copy pasted into the body also with tons of ugly whitespace and tick marks so it won't work copy pasted anyway 3. Apparently incomplete too (ends with open bracket) 4. It's Lua
So asking for help by pasting your program on Reddit is one of the worst ways to get it. The best approach is to boil down what your problem is (seems to be pressing a button and reloading). That would suggest you could simple post an update that renders a button with a tap bound to it and a function that tries to reload. Next you should learn how to format code on a reddit or use an actual code sharing service like a Github gist or something simple like Pastebin where you don’t have to worry as trying to match a specific format. Finally you have given us absolutely no information about what your doing. So far all I know is your using Lua to build a game for Android. I’m sorry to sound like an ass about it but I’m not going to Google Lua game libraries that run on Android and compare their API calls to your code sample until I find it. You really need to give _as much information related to your issue as you humanly can_. Things like Lua version, library, errors, behaviors you see, a very short code sample that is only long enough to reproduce the issue your trying to solve (search for SSCCE or Short, Self Contained, Correct Example). All that being said, you bind the tap on the button to call a function that kills the program (system exit). So your not trying to reload your literally exiting the program — I’d start trying to figure out an API call for “reload” and getting rid of the exit call. 
Yeah, undoubtedly true. I am trying to avoid hacking the following source code on line 160 in [rings.c](https://github.com/keplerproject/rings/blob/master/src/rings.c): ``` if (lua\_pcall (dst, arg\_top-idx+1, LUA\_MULTRET, base) == 0) { /\* run OK? \*/ ``` When the master state executes this, it should execute it in a new thread. When the slave state executes this, it should use a mutex to create a critical section to prevent the master from running simultaneously. An alternative is to add wrappers for `master_dostring` and `slave_dostring`, but it would amount to changing the C sources again. These functions are declared as `static. So, there is no way to call them from wrappers in another module. Any idea of how to do this without modifying the C code? 
What the fuck does this have to do with my comment on writing weird, rambling essays?
This is peak autism.
If you’re on a Mac, CodeRunner is the closest I could find to a “playground” environment for Lua. IDE choice is very subjective. I use the free IntelliJ with the Lua plug-in for Lua work (in recent times I’ve moved to Webstorm). Sublime Text with the Lua plugin and linter is good too. Some folks like VS Code with the Lua plug in and linter instead. All are solid options. I’d strongly recommend buying and reading the latest Programming with Lua book. It’s great foundational knowledge to have. Ultimately, Lua is small, pretty simple yet powerful and a joy to work with. It’s also an extremely versatile tool to have in your creative toolbox. I’ve used Lua for mobile dev (Corona Labs was multi-platform cool before Flutter ever became a thing) and embedded device development (point of sale terminal applications) that have specific and strong security and compliance requirements. Hope your Lua journey starts well. Happy to help if you get stuck.
Thanks! I think I'll check out Sublime Text.
I do have a question. I tried downloading luaforwindows and when the wizard finally got to the end it said there was an error opening "[http://luaforwindows.googlecode.com/files/vcredist\_x86.4053.5x5](http://luaforwindows.googlecode.com/files/vcredist_x86.4053.5x5)" What did I do wrong?
That's a pretty old and probably unsupported Lua distro. For Windows, I recommend [http://luadist.org/](http://luadist.org/) instead.
The only useful comment in this thread is by [u/DarkWiiPlayer](https://www.reddit.com/user/DarkWiiPlayer/) : &gt;This is blocking, isn't it? &gt; &gt;It would be way more useful if it had an option to leave the process running and doing other stuff in the meantime, possibly even having the choice to either read data as it is produced (stdin and stderr) or to accumulate them into a string for later evaluation. It is actually, surprisingly hard to achieve this. Not one of the existing threading modules can handle this without some modification, extensive or not. Your comments, on the other hand, [u/saxindustries](https://www.reddit.com/user/saxindustries/), are not particularly useful to me. I was trying to get you to say something constructive about something useful, but you just keep [bike shedding](https://en.wikipedia.org/wiki/Law_of_triviality): &gt;Parkinson's law of triviality is C. Northcote Parkinson's 1957 argument that members of an organization give disproportionate weight to trivial issues. Parkinson provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task. &gt; &gt;The law has been applied to software development and other activities. The terms bicycle-shed effect, bike-shed effect, and bike-shedding were coined as a metaphor to illuminate the law of triviality; it was popularised in the Berkeley Software Distribution community by the Danish software developer Poul-Henning Kamp in 1999\[3\] and has spread from there to the whole software industry. &amp;#x200B;
I found the best way to setup lua on Windows was with [hererocks](https://github.com/mpeterv/hererocks). It lets you pick your version of lua (so you can use the latest for new tools or luajit for gamedev) and has a working version of luarocks (so you can get packages). I've found it's really helpful to use luacheck to avoid some lua pitfalls (accidental global create/access, `!=`). * luaforwindows is ancient and its luarocks is too old to install most packages using luafilesystem. * luadist is old and not updated. * [the luarocks installer](http://luarocks.github.io/luarocks/releases/) works if you use the built-in lua5.1 from the legacy installer, but I couldn't get it to work with standalone lua (for more recent versions).
Not sure what features you're looking for but [Howl](https://howl.io/) is nice and written in and extendable with Lua. I use vim though which meets your potato requirement and can do some cool stuff with plugins.
Strongly recommend ZeroBrane Studio for anyone new to programming: https://studio.zerobrane.com/ Normally I hate IDEs, but this one is a lot more accessible and straightforward since it's 100% focused on Lua. The author is very responsive and helpful; he teaches programming to middle schoolers as his day job, so he has a lot of practical understanding about how to make things usable and not over-complicated.
I downloaded luadist but don't know how to proceed after extracting the file.
&gt; It is actually, surprisingly hard to achieve this. Not one of the existing threading modules can handle this without some modification, extensive or not. Not really - write a c module that makes some pipes, do a fork &amp; exec, replace the stdin/stdout/stderr file descriptors with said pipes, over in lua-land return the other ends of the pipes as file descriptors, have the caller throw them into a select statement or whatever other event loop they want, and they can deal with stdout/stderr and it comes in. The part that's tricky is people say "non-blocking" like there's some implementation we all use, when there's really a couple of ways to do non-blocking i/o. I didn't cover setting up a signal handler to deal with `SIGCHLD`. Your module could register it pre-emptively, or provide a method for the module user to call. "BuT nO /u/saxindustries is BiKeShEdDiNg" I still don't understand why you'll write some ridiculous, say-nothing-actually-meaingful essay instead of writing basic git commit messages.
Regardless of language or framework, Google and StackOverflow are your best friend in programming life.
On the download page, there is only a 32bit version of windows. Is there a 64bit version?
notepad++ is a good ide lol
&gt;Not really - write a c module that makes some pipes, do a fork, replace the stdin/stdout/stderr file descriptors with said pipes, exec into your new process. Over in lua-land, return the other ends of the pipes as file descriptors, have the caller throw them into a select statement or whatever other event loop they want, and they can deal with stdout/stderr as it comes in. Wrap up the stdin descriptor into some method if you want, or just have the module user figure out how to write data into a file descriptor on their own. &gt; &gt;The part that's tricky is people say "non-blocking" like there's some implementation we all use, when there's really a couple of ways to do non-blocking i/o. I didn't cover setting up a signal handler to deal with SIGCHLD. Your module could register it pre-emptively, or provide a method for the module user to call. That is what popen3() does. It is actually is not particularly easily to do that correctly. You need to be carefully keep emptying both output pipes and feeding the input pipe, or you get a deadlock. In absence of threading, you may have to use the (libc) select() function to avoid that. &gt;I don't really care about your module because honestly it's a pretty stupid way to spawn a process. &amp;#x200B; Well, it may be a bit peculiar, but it does solve the problem: * (env,args,stdin) --program--&gt; (retcode,stdout,stderr) Stupid would be: * there is already another module in lua that handles exactly this scenario, as you can otherwise find in nodejs/npm, php (proc\_open), and glib. * It does not work. Since you do not provide an alternative solution, your own remarks do not sound constructive and are therefore stupid themselves. If you are not interested in my module, then why don't you just ignore it? &amp;#x200B; &gt;I still don't understand why you'll write some ridiculous, say-nothing-actually-meaningful essay instead of writing basic git commit messages. It shows a lack of maturity around the actual process of software development. &amp;#x200B; Since you are not even interested in my module, as you find it stupid, why are you interested in its git messages? Do you really find your own bike shedding mature? I have written this module because I am interested in dealing with the problem, and from there on, I like to discuss with people who will make constructive remarks. If you do not want to be constructive, why don't you waste your time on something else? &amp;#x200B;
visual studio code is very good and is updated (almost) monthly. There are also a number of extensions for Lua and Love (if that is your thing). &amp;#x200B;
&gt;That is the number one reason why men make so much more money than women. Men are not agreeable. People do not respect you because they like you. No, they respect you because they fear you. Honestly the second I read that I decided "wow this guy's stupid, anything he does is stupid, fuck this guy."
For the vast majority of programs, you'll obtain no benefit whatsoever from using the 64 bit version. 
&gt;Honestly the second I read that I decided "wow this guy's stupid, anything he does is stupid ..." You disagree with a particular statement, and therefore the person you are disagreeing with, would be stupid. Regardless of what definition of stupidity that you accept, it is obviously yourself who are stupid. &gt;... fuck this guy." That is what that whore, your mother, already so much enjoyed doing. So, show a bit more respect for your biological father. &amp;#x200B;
no, im using AutoTouch
That's probably the one I was thinking of. 
Ive yet to fix that script btw haha &amp;#x200B;
Do iPhones and iPads have different screen dimensions? Cos your getcolor positions might need to change
there are three syntax errors with this snippet of code. It's a bit of a mess and besides that, it's not even indented correctly. Please indent your code properly. I'm sure if you did, you would find the errors easily. Here's what it would look like if you used proper indentation. Can you spot the errors now? function isPrime(n) numFactor for i= 1, n, 1 do if n % i then numFactor = numFactor + 1 end if numFactor &gt; 2 then return false end else return true end end print(isPrime(2))
novemberisms is teaching you to fish. It’s the right choice in the long run. If you need a fish in a hurry, let us know.
I don't see any errors. Every for loop example I look at does the same things as me. Can you give me a hint? Also, this is the first day of me learning Lua so that's why I'm such a noob.
-- I changed where you had the ends. if else end, if end and you needed and end to close the function. -- I also changed how the algorithm worked. You could dump out of the for loop once you hit two factors as is it will loop beyond that. function isPrime(n) numFactor = 0 for i = 1, n-1, 1 do if (n % i) &lt; 1 then numFactor = numFactor + 1 end end if numFactor &gt;= 2 then return false else return true end end print(isPrime(4)) print(isPrime(5)) print(isPrime(6)) print(isPrime(7))
I'm not sure what your saying. Your code isn't formated. Also, happy cake day!
Reddit messed up the formatting. But it was formatted and indented in a clear way. I'll leave it a matter of practice to figure out my corrections in your code.
that's fine. i'm happy to help. i was a lua noob like you too once. the first error does not have anything to do with the for loop itself. it has to do with the line `numFactor` all by itself. In lua, to declare variables, you need to either have an `=` sign, or prepend it with `local`. `numFactor` all by itself is an error `local numFactor` declares a variable whose value is initialized to `nil` `local numFactor = 0` declares a variable whose initial value is `0`
I figured that out since I last sent that message. Guess I thought i put "= 0" but never did lol.
the second error is that you don't need to use `end` if you're going to follow up an `if` block with an `else` block. wrong: if condition then action end else action end right: if condition then action else action end
that is helpful information for the given issue. What is the logic error?
Nevermind, I have determined the glaring issue with my modulo line LOL. If I'm honest, I'm a bit frustrated with myself. I never made these mistakes with python. Oh well. Thanks for all your help! I appreciate it.
the logic error is that your function does not actually tell us whether `n` is prime or not. It will always return `true` for n &gt; 0
&gt; python ah that explains a lot of things
Is that an insult, a compliment, or a general statement?
not an insult. an observation. it makes sense. it explains why you had trouble with `end`, since python is only indentation-based and you've never needed to deal with closing blocks. it also explains why you didn't use `n % i == 0`, since you assumed `0` is a falsey value. In lua however, `0` is a truthy value. `if 0 then print "hello" end` will actually print "hello". Only `nil` and `false` are falsey values in lua.
Oh ok yeah that makes sense now that you say that
\`return numFactor &lt; 2\`?
 -- Fixed version: function isPrime(n) local numFactor = 0 for i = 1, n - 1 do if n % i &lt; 1 then numFactor = numFactor + 1 end end return numFactor &lt; 2 end print(isPrime(4)) print(isPrime(5)) print(isPrime(6)) print(isPrime(7)) &amp;#x200B;
I didn't refactor his code but just fixed it enough to make it work. Kinda funny to see this turned into a sort of code challenge. 
And it’s free
Good but basic 
It also has prebuilt Lua (multiple versions), some common modules and a simple debugger bundled, so it works out of the box, super convenient for new users. 
Seems like you would restart the code the same way you start it in the first place
That’s what I thought as well. I tried it though and it didn’t work. Do you want the files and then you can call init() on the function containing os.exit() ? I’m using corona btw. Also not sure how to insert text as if it was code. Nick
If you want to start again, don't call `os.exit()`
Yeah I understand that. I replaced os.exit() with init() but the game glitches out. Try it for yourself!
I can't even see what is without logging in? 
Ah crap, sorry I will fix the link.
Thanks! Btw not sure if you did that already, current link is different than before, but it redirects to docker hub main page :(
what i do is make the scripts individually on each device so theres no need to port or anything. Idk, but that was a while back lol, imma try new stuff in a week or so 
I'm happy to check out what you try next, next time chuck it in a Pastebin
Thank you ! ( gonna have to figure out how to chuck stuff in a pastebin too haha) 
Err, that snippet doesn't even have 36 lines in it...
What's wrong with that? &amp;#x200B;
The error is being thrown on line 36. But from what you've posted I'm not even sure what line that actually is.
That is a problem. Line 36 is "for k, v in primeFactorization(34) do"
Ah. I think I see the issue. primeFactorization(34) returns a table. You need to use pairs or ipairs to iterate the table. Like: for k, v in pairs(someTable) do --do stuff end You're getting the error that it's trying to call a table cause the for loop itself expects to get an iterator (which is a function), not a table. pairs returns an iterator.
OP here. I've accidentally committed the wrong link. Here's the correct (public) one: &amp;#x200B; [https://hub.docker.com/r/helpermethod/docker-lua](https://hub.docker.com/r/helpermethod/docker-lua)
As /u/zeValkyrie already pointed out, you are returning a table and trying to pass that directly to the generic for loop. If you only want to use `primeFactorization()` in for loops, you can already return `ipairs(finale)` directly from it. Then you could leave the code as `for k, v in primeFactorization(n) do ...` You should also be careful with prime numbers, as they can easily eat up lots of computational power. Depending on what your `isPrime(i)` function does, you might be checking the same numbers again and again, which can quickly slow down your program. An easy way around this is to just store primes you've already found in a table. With a bit of metaprogramming, you can also turn that into an endless lazy list that contains all the prime numbers. I did that for fun once and it takes about 20 to 30 lines of code.
So are we all just going to ignore the triply-nested loop? Not that it matters because of this: newNumber = n while n / newNumber &gt;= 2 do -- ... end 
you forgot to tell us what game engine / framework this is using. you won't get much help if you don't include that really important bit of information. 
Upvalues are somewhat secure as ive read Function mod_data() local secure_data --the upvalue return function(newData) secure_data=newData end --to use: myFunc = mod_data() myFunc("new data") 
Program a roguelike. 
So, an *upvalue* is a local variable that is external to a function?
A super lazy option is not to download anything and instead use the online interactive Lua tutorial that is part of the Mako Server tutorials. You can edit the code directly using the browser. Just note that this online service restarts every hour. Here is the link to the start of the Lua tutorials: https://embedded-app-server.info/Lua-Types.lsp
Have you looked at the Mako Server? From the web site: As a compact application and web server, the Mako Server helps developers rapidly design secure IoT and web applications. The Mako Server provides an application server environment from which developers can design and implement complete, custom solutions. The Mako Web Server is ideal for embedded Linux systems. [https://makoserver.net/](https://makoserver.net/)
biggest factor of a number n that isn’t itself is floor of n divide 2, so you can optimize a bit there in primeFactorization(n)... I think ` for i = 2, n do `becomes `for i = 2, math.floor(n/2) do`
 -- isPrime returns some wrong results. print(isPrime(-1)) --&gt; true print(isPrime(0)) --&gt; true print(isPrime(1)) --&gt; true -- I suggest you to use this version. -- It correctly handles negatives, 0, and 1, -- and don't uses extra variable for counting. local function isPrime(n) if n &lt;= 1 then return false end for i = 2, n - 1 do if n % i == 0 then return false end end return true end Also. Always define all the variables/functions as local, except the case when you intend to make them global. It increases performance and saves you from errors.
I'm glad to see you succeeded with this task! Here are a few things I found that I would do differently: * Building the result as a string is inefficient and adds an unnecessary comma at the end. Accumulate them in a table and use `table.concat(t, ", ")` to convert it to a string. * The last "1" in your first for loop is implicit, you can remove that. * Most of your variables and functions should probably be local to not litter the global scope and also improve performance. * The way you are accumulating the factors seems unusual and confusing to me - if I see a variable named "factors", I assume it is an array of numbers. I recommend using the `array[#array + 1] = element` to append an element to an array instead. This also allows a far more efficient iteration of factors later. * You are accumulating unnecessary data - first, you collect all the factors and immediately iterate them again. Why not process the data as it becomes available? * N is prime if none of prime integers in range [2, sqrt(N)] are divisors of N. It should be noted that prime numbers are relatively rare - there are only 168 primes between 1 and 1000 and the higher you go, the rarer they get - only 7% of numbers below 1000000 are primes. This means it is a good idea to cache the result of isPrime in a table. Here is the code after all modifications: ``` local primes = {} local function isPrime(n) if primes[n] then return true end for i = 2, math.sqrt(n) do if n % i == 0 then return false end end primes[n] = true return true end local function primeFactorization(n) local finale = {} local newNumber = n for i = 2, n do if isPrime(i) then while newNumber % i == 0 do finale[#finale + 1] = i newNumber = newNumber / i end end end return table.concat(finale, ", ") end ``` I did not fully test the functions, but they are correct for all inputs I tried. The performance is a lot better - it can factor 6-digit worst-case numbers in a matter of milliseconds.
&gt; Anyway, you could maybe at least add a check for even numbers. Check the last bit, if it ends in 0, e.g 1000 for example the number is even and no point continuing. I don’t know if there’s an easy way to check for all the other numbers function isEven (n) if (n % 2 == 0) then return true else return false end end 
If you’re actually trying to make it useful, special case checking multiples of 2 and 3, then only check numbers that are of the form 6k+1 or 6k-1.
The way its set up, no external method can edit the local variable. 
 if this_boolean_value_is_true then return true else return false end m'kay. How about we just: return this_boolean_value_is_true 
Yeah, I was being overly explicit and could have just done `function isEven (n) return (n % 2 == 0) end` instead for brevity. Lot of newbies around here, so I figured it would be more understandable at a quick glance what I was doing. The person I responded to was suggesting testing numbers ending in zero and apparently not aware of the modulo operator, for example.
I just did my own version of it just for fun, took about an hour or so: local floor, infinite = math.floor, math.huge local primes = setmetatable({2,3--[[just hard-code the even special case and following number]]}, {__index = function(self, index) if type(index) == 'number' then for i=#self,index-1 do local dummy = self[i] end -- Precalculate previous primes to avoid building up a stack for candidate = self[index-1] + 2--[[All primes &gt;2 are odd]], infinite do local half = floor(candidate/2) for i=1,index-1 do local div = self[i] if div &gt; half then rawset(self, index, candidate); return candidate end -- A number can't possibly be divisible by something greater than its half if candidate % div == 0 then break end -- Candidate is divisible by a prime, this not prime itself end end end end}) function factorize(subject) if subject == 1 then return -- Can be ommitted for implicit return ;) elseif subject &gt; 0 then for i=1, infinite do local candidate = primes[i] if subject % candidate == 0 then return candidate, factorize(subject/candidate) end end else return nil, "Can't be bothered to look up if negative numbers have a prime factorization" end end print("Benchmarking: Calculate the first 1e4 prime numbers") local start = os.clock() print(primes[1e4]) print("Took: ", os.clock() - start .. " seconds\n") print("Please input a number: ") local num = assert(tonumber(io.read()) or 1000) local start = os.clock() print("Prime factors of "..num..":", factorize(num)) print("Took: ", os.clock() - start .. " seconds\n") 
&gt; n/6 == false, do you check n/12? You don't check 12 *or* 6, because you already checked 3. You have to check 3 because it isn't divisible by any... Notice something yet? ;P
Looks good! Are you going to share the code?
Sure, [here is the link](http://github.com/vinbero)
It wants you to write it like: if AntiAimRight:GetValue() ~= 0 and input. IsButtonPressed(AntiAimRight:GetValue()) then
I get the error "Could not start emmy" right after sublime text starts.
Still no clue how to fix [Screenshot](http://prntscr.com/mn9vwd) &amp;#x200B; -- Put your Lua helocal gui_set = gui.SetValue; local gui_get = gui.GetValue; local LeftKey = 0; local RightKey = 0; local rage_ref = gui.Reference("RAGE", "MAIN", "Anti-Aim Main"); local check_indicator = gui.Checkbox( rage_ref, "Enable", "MANUAL DESYNC SWITCH", true) local AntiAimleft = gui.Keybox(rage_ref, "Anti-Aim_left", "MANUAL DESYNC", 0); local font = draw.CreateFont("Terminal", 25, 700) local arrow_font = draw.CreateFont("Marlett", 45, 700) local normal = draw.CreateFont("Terminal"); local function main() if AntiAimleft:GetValue() ~= 0 then if input.IsButtonPressed(AntiAimleft:GetValue()) then LeftKey = LeftKey + 1; RightKey = 0; end end if AntiAimRight:GetValue() ~= 0 then if input.IsButtonPressed(AntiAimRight:GetValue()) then RightKey = RightKey + 1; LeftKey = 0; end end end &amp;#x200B;
It should still run even w that message. If u actually don’t understand what that warning message means though, you should do some basic programming videos / articles and you will understand.
That's a warning and not an error. It's just saying that you can do: if thingOne then if thingTwo then end end or you can do if thingOne and thingTwo then end
Is it like String.Format in C#?
You'd have a much easier time converting it to `string.format`, using something like gsub with a function to build the argument list of variables. Shouldn't need debug at all. http://lua-users.org/wiki/StringLibraryTutorial
Samples/code snippets can be found here: https://github.com/harfang3d/Tutorials https://github.com/harfang3d/game-winter-z
I don't see how gsub would help in any way with getting the local variables from a different scope xD
Implement your free function first. The issue isn't that the values in the old_pos table aren't collected, but that the table old_pos isn't being freed because you haven't implemented free. Primitives like lua_Number aren't collected since they are passed by value, not by reference like a table or userdata. e.g. local x = 5; local y = x; x = 6; -- x==6, y==5 Also note, depending on what version Lua your using the garbage collector may automatically run the GC mark and sweep algorithm, and can be tuned to your specific requirements (or disabled and manually stepped). I would guess your update is running a lot, allocating a lot of tables, and the GC couldn't free anything. Note also, tables aren't collected automatically after a function leaves scope, they become an island in memory and collected when the mark and sweep algorithm gets to it.
&gt; During the polishing I noticed that when I do this one specific thing in lua, the stack gets overflown. Sharing the actual errors, stack traces, and diagnostics would be helpful. Asking random strangers on the Internet to read through code coup via disconnected fragments that we can't even compile to try to guess at a problem is hard enough even when we have all the relevant information; it's exceedingly difficult when we're flying blind. :)
There are none. I have a cap in my memory pool of 2000kb, but the memory goes over 2000kb because things on the stack aren't removed. The main point is that this only happens when the return value of __newindex is assigned to a field in a table, like in lua example nr 2. However, if I assign it directly to a variable like in lua example nr 1, the return value is handled by lua and gets popped of the stack.
For the record, most of this is example code reflecting the concept of parts of my pretty large project. I could shorten it down if you'd like, I just wanted to make the context clear.
I was not aware that tables aren't collected after the function scope, you have helped me identify the problem so I can now actually try to solve it - thanks.
This wasn't part of your post, but keep in mind that in Lua strings are also garbage collected similar to tables via mark and sweep. So doing string concatenations frequently is very expensive in Lua code.
I don't care for the debug lib usage, but here's a rewrite without using load. lua 5.1 function I2(str) local function get_local(name) local i = 1 while true do local var_name, var_value = debug.getlocal(3, i) if not var_name then break end if var_name == name then return var_value end i = i + 1 end end local tbl = {""} local b, s, e, v = 0, 0, 0, nil while e &lt; #str do s, e, v = str:find('#{([^}]+)}', e) if s then t = get_local(v) table.insert(tbl, t) tbl[1] = string.format('%s%s%s', tbl[1], str:sub(b, s - 1), '%s') b = e + 1 else e = #str tbl[1] = string.format('%s%s', tbl[1], str:sub(b, e)) end end return string.format(table.unpack(tbl)) end Considering the title, I'm assuming you've already seen the wiki page on this topic? http://lua-users.org/wiki/StringInterpolation
&gt; Considering the title, I'm assuming you've already seen the wiki page on this topic? I probably saw it at some point, but since I made this just out of curiosity anyway, I didn't feel like looking at it for reference. I know there's a lot of ways to implement it, probably even more than I can think of right now, but I just felt like trying that particular approach. The reason why I use load is that it *can* be really fast (if it weren't for the local variable shenanigans). If you passed in the values to interpolate as arguments to the generated code, it'd probably be the fastest option.
``` function state:change() return self.done = true end ``` this is invalid syntax: you can only return a value, but an assignment (`VARIABLE = EXPRESSION`) does not result in one. This is confusing the parser and the error message is unclear because it is unsure what to make of it. What are you trying to accomplish with `return` there? I think it should just removed (as in `state:next_state()`). Another issue you will find out soon is that values you set on the instance and method names cannot overlap, i.e. setting `self.next_state` will ovewrite/break the method `inst:next_state()`.
&gt; values you set on the instance and method names cannot overlap To elaborate on this, in Lua, methods *are* just [normal variables](https://en.wikipedia.org/wiki/First-class_function), no different than a number or a string, just that they're of the function type.
https://www.lua.org/pil/4.2.html
thank you, exactly what i needed 
As the C++ standards guide says, the only way to correctly use global variables is to prefix them with //, or -- in Lua's case
 self.next_state = nil Don't do this. In Lua nil isn't a value, it means absence of a value and thus аssigning nil means removing a value. So, the line above really does nothing.
Ya I’d say so. The lack of a formal class system means that people looking for really practical programming experience might want to look towards python, but lua is really fun to use and all the great game frameworks that use it make for a good place to start learning.
I have only one program I'm working on. I've been working on it for about four years and will be working on it for the rest of my life. I did not know how to program before I started working on it. I tested out five languages: Lua, Ruby, Scheme, Python and Perl. Ruby and Scheme were way too hard. Lua, Python and Perl were all almost the same but there were aspects of Python and Perl's syntaxes that I found less intuitive than Lua's as a complete beginner. So I went with Lua. I'm sure I could have adapted to Python or Perl pretty easily but I was very eager to get started and had so much to learn. I needed to hit the ground running. I do appreciate Lua's small size but I do wish the standard library was a bit more robust. I did end up having to learn how to structure programs and create my own libraries (in Lua) which helped me get a better handle on programming -- so there is a trade-off but I think I'd prefer better standard libraries. The simplicity of the Lua ecosystem can be a big benefit as it's easier to grasp the entirety of what you need to do and *can* do. But it ain't all roses. LuaJIT is amazing but that it's frozen to 5.1 (or 5.2-ish) while Lua main is headed toward 5.4 sucks. I'm not blaming LuaJIT but having two popular versions of Lua like this seems problematic. I *think* Lua is losing in popularity? I say this because I still find a lot of cool things that are only for 5.1 or 5.2. This could be entirely normal for programming languages but it seems like Lua might be struggling for mindshare? But the biggest gripe I have is the lack of a GUI (outside of Love, etc) that a beginner can figure out. Or at least this beginner. I've been trying to get *any* gui working for about three years now and I can't get anything to work. If I could get one to work then I'm hoping I'd be able to understand how to program it but I can't even get that far. I remember playing around with Python a couple of years ago and tried some really simple gui and it was easy and worked and would have been super easy to package with my project. I thought long and hard about using this Python program for my project's gui but I hate adding even more dependencies to my project. But overall I'm happy with Lua. 
For a newbie instant gratification is important: it should be possible to create something cool in 50 lines of code. If you use Lua as a scripting language on top of an established engine/system which has an extensive API then this is possible. (For example Löve.) But even then, Javascript may be a better choice as the number of programmable worlds with a JS API is much larger (and nowadays you can use the browser as a development platform). If you want to build your own worlds from scratch, then I don't think (plain) Lua is a good choice. It's an extension language after all. You shall know at least one low level language to build something which you can then extend/program in Lua. (Then it can be immense fun though: the language is very well designed and gives great value while minimizing complexity.) I personally went with LuaJIT and C. The only thing I regret has to do with the truck factor: if Mike Pall disappears, LuaJIT will most likely die a slow death (and this might have already begun). Apparently that's the price we pay for its incredible speed. It's so complex that noone understands it to a sufficient degree except its original author. Which is a great lesson by the way. In the long run, the fastest and most optimized is not always the best. (Think about the Spectre/Meltdown fiascos.) 
OpenResty for REST API. You should use a relational db :)
Hi, thanks for the advice. By the way, I'm using mongodb just for learning.
There is actively developed LuaJIT fork - [https://github.com/raptorjit/raptorjit](https://github.com/raptorjit/raptorjit)
I like the quotes at the end of the readme :-) I hope they will get a grip on the LuaJIT codebase and manage to simplify it without sacrificing too much on the performance side. It's a pity that they had to drop ARM support though (with my project I eventually want to target the Raspberry Pi so ARM is a must.) I'll keep an eye on this project. Thanks for the link!
Google autohotkeys, probably what you are looking for.
Lua was the language I started with. For GUI, if you don't want to hack stuff yourself, Love is pretty much the only option. The syntax is easy for a beginner and the speed is nice as long as you don't go for oop approaches, at which point it goes bad (at least it did for me with middleclass) 
not really, since I'm trying to this whole thing on my logitech gaming software. Also, I wouldn't be able to code it with an AHK script either. &amp;#x200B; but thanks anyways
okay so whatever i do reddit just ruins the formatting...
Integer division. Drops the remainder and returns the int part only.
You can find it as 'floor division' in the manual. https://www.lua.org/manual/5.3/manual.html
thank you very much
What is the one program if you don’t mind me asking?
So, I see some problems, let's see if this fixes everything. 1 - Line 4 has an "end", you ended the if statement, that's correct. But you have to end the function too. 2 - You want two behaviors on the same OnEvent function. The correct way to do this is not by writing the function two times. &amp;#x200B; So, if you delete line 6 and add an "end" at the last line of code, I think it will work.
It is the [Platonic Music Engine](https://www.platonicmusicengine.com) and you can [see the code here.](https://gitlab.com/davethecomposer/platonic-music-engine/tree/dev) It's still in alpha but mostly works and does cool stuff. I think.
ok thanks, although then there's still another error with line 6, which i don't understand, because it's basically the same as line 3... [http://prntscr.com/mph0gw](http://prntscr.com/mph0gw)
If you have easy access to something using Lua already, yeah definitely. You will learn some "bad" habits because Lua like never yells at you for anything going wrong, but when starting that leads to a lot less frustration &amp; having to deal with annoyance of like if key in dict then before just calling dict[key] etc.
The Lua manual is quite good and fairly compact. Always start there: https://www.lua.org/manual/5.3/manual.html
If you want to make a free movement based and you want to see which map-tile the player is standing on you do Mget(PlayerX // 8, PlayerY // 8) I think it just rounds the number to whatever it needs to be. It just kinda works.
Oops! I got it. It's a bit hard to edit code "remotely" hahah And also, you changed a bit more than you should. You can put an 'end' on line 4. And another one on the last line. This should make it work. What you'll be saying is: "when an event occours, if X and Y then do this thing, if A and B then do this other thing".
For anyone wondering it's been newly introduced into Lua 5.3. As someone who uses mostly LuaJIT/5.[1|2], I was caught off guard!
I'm trying to get my rapid fire and anti recoil (pulling mouse down) to work in the same file. How can I make this work? 
Is this in Love?
I'm using Logitech Gaming Software scripting feature to make this. I'm brand new to lua and coding (started today for the sole purpose of this script) &amp;#x200B; I'm reading a scripting manual online trying to piece things together but can't get it to work. If I erase the rapid fire, the recoil will work and vice versa. How would I glue them together? 
I didn't work in Eclipse, but in Zerobrane you must select Love2D as current interpreter. Otherwise IDE will use default Lua interpreter and return the exact same error when attempting to run a project. So, you probably need to specify a path to Love2D (or choose it from list) somewhere in the project settings.
I'm not familiar with the Logitech scripts. There's no reference to rapidfire or recoil in the script. You might want to explain which part of the script does rapidfire, and which recoil.
Also, post your code as text so that we can cut and paste it.
Try this: EnablePrimaryMouseButtonEvents(true) function OnEvent(event, arg) if IsMouseButtonPressed(1) then repeat if IsKeyLockOn("numlock") then MoveMouseRelative(0,1) end if IsKeyLockOn("capslock") then PressMouseButton(1) end Sleep(150) if IsKeyLockOn("capslock") then ReleaseMouseButton(1) end until not IsMouseButtonPressed(1) end end &amp;#x200B; If it's your first time coding in lua, don't try to define a function inside another function unless you're 100% sure that's what you want.
Lua isn't too complicated, but a few things 1. Jobs Uh I'm not an expert, but I'm gonna guess Lua doesn't out perform Python and Ruby in the job market. 2. Lua's purpose From what I've seen, Lua is for scripting and embedding in other programs. Lua doesn't have an OOP system like Python or Ruby; tables are your best friend and their the *only* collection available to you. They aren't bad, but they're the only thing immediately available. If you want/need more, you'll end up `luarocks install penlight (or moses)` at some point. Lua isn't bad at all in my opinion. It out performs Python and Ruby in a lot of ways (LuaJIT be praised). But the interpreter doesn't complain about your mistakes much, no types, tables for *everything*, no real GUI lib (aside from Löve), and no one bothers to write a full and well structured tutorial of the FFI. A few things to check though. - [RaptorJIT](https://github.com/raptorjit/raptorjit) - [Titan](https://github.com/titan-lang/titan) Both are very interesting, especially Titan.
Fuck off, spammer
Seriously. I just banned him from /r/autohotkey
Here's a sneak peek of /r/AutoHotkey using the [top posts](https://np.reddit.com/r/AutoHotkey/top/?sort=top&amp;t=year) of the year! \#1: [AutoHotkey has been a godsend in a warehouse serialized inventory position](https://np.reddit.com/r/AutoHotkey/comments/8qcow0/autohotkey_has_been_a_godsend_in_a_warehouse/) \#2: [Chrome Warning Thread. Don't make new posts about this warning. Everything can be discussed here.](https://np.reddit.com/r/AutoHotkey/comments/985hrm/chrome_warning_thread_dont_make_new_posts_about/) \#3: [Let's talk about SciTE4AutoHotkey, what Groggy is up to, why he's currently groggy and why that's the reason for the update. Here's a thread for info, comments, and suggestions. (PS - Happy Friday, everyone!)](https://np.reddit.com/r/AutoHotkey/comments/9joaxn/lets_talk_about_scite4autohotkey_what_groggy_is/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
/r/mentorsec
If you want you can try VSCode with lua and love2d extensions.([https://marketplace.visualstudio.com/items?itemName=pixelbyte-studios.pixelbyte-love2d](https://marketplace.visualstudio.com/items?itemName=pixelbyte-studios.pixelbyte-love2d)\-launch, debug, autocomplete and etc). But there's a little bit more handwork with lua, love2d and vscode then typical usage of Zerobrane or Eclipse. &amp;#x200B;
If it's any help, it's probably using [luacheck](https://github.com/mpeterv/luacheck) under the hood. In vim I fixed the same issue you have by creating a ".luacheckrc" file in the root of my project and putting in this line to ignore love globals in my src/ directory: -- Ignore lua love global in src files['src/*.*'] = { globals = { 'love' } } Another solution I prefer is to not use the `love` global in my code at all and instead do a local variable `local love = require('love')` and then create a love.lua file that returns `love`. This way I don't have any globals in my code and I can stub out the love.lua dependency to run unit tests on my code without depending on love.
I don't think problem is related to luacheck, because 'a nil value' part is definitely a run-time message.
I think you're right, actually. OP is probably clicking a button to try and run the code and then getting the error message at that point. I was originally thinking the message was coming from an info popup in the gutter next to the text like what you typically get with using the linter.
In my case dropping ARM makes it inapplicable for work as the prototype already lives on a RasPi.
Either by using an index into the environment (\_G, or something you get via getfenv()): function p_1() print("Hello World") end local E=getfenv() local idx=1 E["p_"..idx]() local E=getfenv() local n="p\_1" En This is a very hacky approach. In fact it is probably easier to store all your functions in a table in the first place: local MyFunc={ [0]=function() -- Some Code Here end, [1]=function() -- Some Code Here end, -- ... } local idx=1 MyFunc[idx]()
 local MyFunc = { function() ... end, function() ... end, function() ... end, } MyFunc[0] = function() ... end MyFunc[idx]()
I can't store them directly in the table due to code readability reasons with the order of functions being very important for script writing in game dialog routines. (long story) &amp;#x200B; Your other solution worked thanks.
Thanks.
[3.2 -- Variables](https://www.lua.org/manual/5.3/manual.html#3.2) &gt;The syntax `var.Name` is just syntactic sugar for `var["Name"]`: &gt; var ::= prefixexp ‘.’ Name &gt;An access to a global variable `x` is equivalent to `_ENV.x`. (For Lua 5.1 or earlier, or LuaJIT use `_G` rather than `_ENV`) Thus by your example you would have: function MyFunc_0() end local idx=2 local func = _ENV["MyFunc_"..idx] func() 
`getfenv` does not exist since Lua 5.2.
&gt; _ENV Is that preferable over _G?
It depends on what you're doing. Much of the time they're the same thing. But in general yes you should use _ENV instead of _G. With the caveat that it is supported. LuaJIT never added _ENV.
\-- You can add functions directly to an array/table: local StageFunctions = {} function StageFunctions\[0\] () \-- MyFunc\_0 here end &amp;#x200B; function StageFunctions\[1\] () .. end &amp;#x200B; &amp;#x200B; \-- This is syntactic sugar for: StageFunctions\[0\] = function() \-- MyFunc\_0 here end &amp;#x200B; StageFunctions\[1\] = function() .. end &amp;#x200B; &amp;#x200B; \-- If the indexes might change in the future, you can auto-increment it, using the array's length (#): function StageFunctions\[#StageFunctions+1\] () .. end function StageFunctions\[#StageFunctions+1\] () .. end function StageFunctions\[#StageFunctions+1\] () .. end &amp;#x200B; &amp;#x200B;
Right, it's even easier, you would use the predefined \_ENV instead of the value returned from getfenv().
Looks like you are missing two `end`s as you have a function and then 2 `if` statements but only one `end`. Other then that - I might be wrong - but by "G" do you mean the key or the "G1-5" macro keys? The documentation isn't clear and I don't have this hardware. Where are you setting `gKey` ?
This kind of design isn't great, because your members like `Pop` and `GetLength` are unique to each instance, and tied to each instance. This is bad functionally (hidden references) and bad for OOP (the interface is kind of rigid, and there's no real shared class) By sharing them between all instances, your code becomes more functional and more oop. [See here for how classes can look in Lua](https://stackoverflow.com/questions/54165199/need-help-understanding-metamethod-of-table-being-set-to-that-table/54165332#54165332)
But \_ENV does.
[https://pastebin.com/hmud3fiB](https://pastebin.com/hmud3fiB) result: &gt;lua -e "io.stdout:setvbuf 'no'" "liststruct2.lua" Stack Count=3 it : 1 2 3 pop: 3 2 1 Queue Count=3 it : 1 2 3 pop: 1 2 3 &gt;Exit code: 0 I rewrote my code with your advice, hope this is more closer to right answer. I also checked your link, I will learn about metatable and apply to my code, later. And still I want to know my code is whether OOP or FP or both/nothing..? In addition to that, I want to know if Lua has something like 'protected'. I want to hide all `ListStruct` members except `ListStruct.Queue` and `ListStruct.Stack`. Is it possible to do it? &amp;#x200B;
&gt;if Lua has something like 'protected' Nope. But you can use \_&lt;member&gt; notation to differentiate public/private members.
It has its place, and is fairly easy to grasp, but really no popular language (read: python, ruby, java) is hard per se. They all take practice, studying, and commitment. The Lua community is also exponentially smaller than say Python’s. And lastly if they’re hoping to grow into a career the Lua job market is small to say the least relative to the others. Now, supplementing a “good” language with Lua knowledge? Nothing wrong with learning multiple languages, especially if you’re wanting to learn lower level languages, such as C, but are having a difficult time wrapping your head around it. 
&gt;function StageFunctions\[#StageFunctions+1\] () .. end Oh, interesting. Thanks
Can you do the same with variables not just functions, for example: local myvar=\_G\[idx.."\_IN\_DIALOG"\] myvar=256;
No, you can't. At least not the simplified form (the "syntactic sugar"), see [https://www.lua.org/manual/5.3/manual.html#9](https://www.lua.org/manual/5.3/manual.html#9) \- definition of "funcname" token. Of course, the other form you suggested is possible.
Not quite like that. The equals sign binds a name to a value reference. The second statement `myvar=256` only changes the name "myvar" to reference a different value. The original reference "idx..`_IN_DIALOG`" is unchanged. Instead write _G[idx.."_IN_DIALOG"] = 256 
Notable changes: &amp;#x200B; * based on \[docker-lua\]([https://github.com/helpermethod/docker-lua](https://github.com/helpermethod/docker-lua)) 0.4.0 * upgrades LuaRocks to 3.0.4
What particular things did you find confusing? That will give people some context, and help them make suitable suggestions for you.
The whole thing in general is there like a reference page for the language
Sure - you can find lots of documentation-related links [here](https://www.lua.org/docs.html).
Ok, so, this sounds like a dumb question but, is there anything u suggest trying to doing for a beginner like me?
The book is great, but I don't think it's a good book for learning Lua. It's more like a manual (well, it's literally the manual). People will argue about the best ways to learn, but my personal experience is that doing something practical helps a lot. For example making a game or something that gives visual feedback as you learn. If that sounds good to you, I can heartily recommend [https://love2d.org/](https://love2d.org/) \- it's a game framework using Lua. You can write exactly the same Lua code there as anywhere else, but it also gives access to 2D graphics and such, which, in my humble opinion, makes it much easier to understand what is happening. The Love2D wiki contains some pretty nice tutorials that should help you get set up with absolutely no required knowledge. &amp;#x200B; You might want to look for some basic Lua tutorials to wrap your head around the absolute basics first though. By far the best thing to do, if it's possible, is to get a friend to help you if you have any that are knowledgeable about programming. 
Is it easy to setup or do I have to build it like lua.
Well, that's why i asked about which particular things you were finding confusing, as it's difficult to make specific suggestions otherwise. For example: Are you comfortable with the concept of variables? With the concept of control flow, such as conditionals and loops? With the concept of functions? Your answers to those sorts of questions will determine what sort of things we can suggest for you. A couple of really *general* recommendations i'd make are: * prioritise learning how to clearly describe what programming problem you're having. What was your goal, what did you do towards that, what did you expect to happen, what actually happened? * prioritise learning how to do Web searches for relevant information. For example, the Lua reference guide could be easily have been found by entering the terms "lua reference documentation" into a search engine. Another example: if you get an error message when running a program, don't just assume it's irrelevant nonsense, but look up information about what that message might be saying about your program. In my experience, many questions asked by new programmers can be answered by a Web search or two.
I'm familiar with all of those except control flow. I guess I am just looking for a basic grasp of the language.
Okay, so maybe [this tutorial on the Lua-users wiki](http://lua-users.org/wiki/LuaTutorial) might be what you're after?
Focus on output so you can see what is happening first. Output as much as possible. https://www.lua.org/demo.html Start by playing with this code.
Once you start to get a little better, try a mini project. Write code to format text, sequence numbers, change words to numbers and numbers to words.
lua-users.org ;)
I found [this guide to the good bad and ugly parts](http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts) very useful when coming from another language, as well as the [unoffical FAQ](http://www.luafaq.org/) and a [guide to the gotchas](http://www.luafaq.org/gotchas.html)
 '(https?://w?w?w?%.?.-)/' if the / is guaranteed this works
Can I suggest using something like lua-uri for this?
try this local function domain(x) return x:match("[a-zA-Z0-9_]+%.[a-zA-Z0-9]+") end print(domain("http://facebook.com"))
Don't know why that's downvoted, in 40 years of programming I've not heard that quote before, and 99% agree with it.
Because it doesn't answer his question + some people are touchy about globals
Can you elaborate more on this? I'm not too familiar with it.
so I try your code with this: \` a = "asjflkjecac=?%..fdshttp://example.com/dfe34.erfas.efds%===https://test.net/sub" b = a:match('https?://w?w?w?%.?(.-)/') print (b) \` The result only gets me example.com . What is interesting is that it only prints out 1 domain name, and that domain has http while I thought your code extract the domain name with https
match only returns one result. If you want multiple, use gmatch.
Just unpack archive and it's ready.
One of the hard things is finding stuff that you can try to do/complete as a beginner. I think the PiL and other sources here probably lack that. You could try https://projecteuler.net as a source of problems to write lua programs for.
5.1 and 5.2 are still relevant, as there are still many platforms that uses LuaJIT as their interpreter, which runs on 5.1 mainly, a good example would be the LÖVE framework which runs on 5.1
I think the key problem with PIL is that while it's a great introduction to Lua, it's not an introduction to programming.
Honestly most things are version agnostic at least starting out. Once you've learned 5.1 you'd have little trouble jumping to 5.2 or 5.3. The real question is what you want to do. I know mostly Lua 5.1 because ComputerCraft uses it, for example.
If you're choosing a language based on speed, why not go straight to C/C++? Or stick with Python and use Numpy. If you're looking for the absolute best performance possible, nothing beats assembly, except possily assembly generated by a highly optimized compiler. 
https://youtu.be/S4eNl1rA1Ns
While this should work almost all the time, sometimes it's not `www` so I baked up a script ``` someString = "stuffSomethinghttp://old.example.com/otherStuff" print( someString:gsub("^.*https?://(.-)/.*$", function(a) local period = 0 a:gsub("%.", function() period = period + 1 end) return period == 1 and a or a:gsub("^.*%.(.-%..-)$", function(asd) return asd end) end) ) ``` 
Actually I chosed lua because of the simplicity. I have 2 months for project and I have to be quick as possible.
It doesn't really matter which version you use to learn the basics of Lua, as it's unlikely that the basics will change, but I would say that once you're done learning the basics, you should move the newest version that you can use.
There is a free book on lua version 5.1 available called PIL. It is available on their website: https://www.lua.org/pil/ There are also books for the newer versions, but the PIL for 5.1 is still quite relevant. Other than that, there are great tutorial series on youtube to get you started!
[Here's the Lua tutorial on the Lua-users wiki](http://lua-users.org/wiki/LuaTutorial).
Find a job/project you need to do and then research what you need to do with Lua to achieve that. Abstract reading I find is wasteful. Also, don't buy books, this aint 1995. Everything you need it free on the internet
You can search for Project Euler problems solutions in both Lua and Python. It is series of mathematical problems to learn algorithms. Both Lua and Python are ok, but for Python you will find more learning material for mathematical stuff, it is widely adopted in this area. If you have problems with speed Lua is faster right away but with Python you can get same results with Numpy and proper code (like being careful with recursion). I am not sure exactly what your project is but if it is what i think it is, you should stick to one language and work through Project Euler exercises. If you still have problem choosing language you should flip coin.
Have a look at the ULX add on for Garry’s Mod and how to interface with it. That might help you. You are mostly just grabbing chat input and splitting/exploding it by “ “ (space).
I'm going to make a completely out there recommendation; I'm suggesting you learn Scheme and use the Gambit implementation. It looks as if you want to compute some irrational constants to arbitrary precision, and for that I'd think about a scaled bignums. Brad Lucier's bignum implementation in Gambit is scary fast, and Scheme isn't that hard to learn. Do bear in mind that I like Lua and LuaJIT very much, and I use it professionally right now. I do think this is a horses for courses thing. Here's an example where I think Gambit would shine that might relate to your work. Consider the golden ratio, and fibonacci numbers. The ratio F(n+1)/F(n) converges to phi as n goes to infinity. There's a nice way of computing F(n) in log(n) arithmetic operations. Now having computed F(n+1) and F(n), you just have to expand the decimal representation for the ratio. All this stuff needs fast bignums, so choose the language appropriately. That being said, you could write an interface layer from LuaJIT to the GNU multiprecision library, but that seems like far more work than just learning Scheme.
The free book covers 5.0 not 5.1.
Interestingly I get the expected behavior when using Lua 5.3.5 but your output when using LuaJIT. Have no idea why but I thought it worth providing another piece of data.
Yes, I'm running this in LuaJIT too, but forgot to mention it.
Great suggestion. Scheme can be as fast as C while also providing much cleaner abstractions/ I wish there was more scheme libraries so I could use it more.
The reason behind this behavior is because C determines when a string ends by putting a "\0" on the end. So, to C, you're just passing an empty string. PUC Rio Lua handles this correctly for some things but don't rely on it working outside of pure Lua contexts.
Have you tried using `%z` instead of `\0`?
Ding! ding! ding! https://www.lua.org/manual/5.1/manual.html#5.4.1 &gt; A pattern cannot contain embedded zeros. Use `%z` instead. LuaJIT is a Lua 5.1 dialect. Support for embedded zeros was added to a later version of Lua.
Thank you! 
If head is binary data, use string.pack and string.unpack is right. eg: head is 2 byte int, is the length of data, and the data is string. ```lua function pack_data(data) local len = #data local ret = string.pack('&lt;Hz', len, data) return ret end function unpack_data(bin_data) local len,data = string.unpack('&lt;Hz', bin_data) return len,data end ``` http://www.lua.org/manual/5.3/manual.html#6.4.2
If you're using LuaJIT, you could look into using the FFI library to read and write C structs.
Unfortunately I'm limited to the standard interpreter due to the environment it'll be running in
This makes sense, I'm just struggling to understand the pattern matching of the functions. So data: aabbbbccdd where aa is padding bbbb is device ID, ccc is also padding and dd is data. Previously I would have used multiple string.sub and rebuild it with string.format or tables.concat String.pack/unpack seems more elegant but I struggle to see how to map to that.
Right, I forgot that string.(un)pack isn't in 5.1. I presume that you've seen [this](https://www.lua.org/manual/5.3/manual.html#6.4.2)?
I have, just struggling to get my head around it
[https://docs.python.org/2/library/struct.html](https://docs.python.org/2/library/struct.html) I know this is python, but it seems to be almost identical and be acompanied by expanations and examples
They do not do pattern matching. They act according to a format string. In your example you could read the data - but only if it is indeed fixed length strings, not some parts identified by patterns (in that case, however, you would be using string.gmatch or lpeg, so I'm assuming they are fixed size) - using b,d=string.unpack("Xc2c4Xc2c2","aabbbbccdd"). I don't see where that would be more elegant than using string.sub, though. Same goes for creating this - cannot see this being more interesting than string.format. The picture would be a bit different if you were not just cutting strings into substrings and vice versa - look at the zoo of types that pack/unpack can use... 
This might be useful for you: http://www.inf.puc-rio.br/~roberto/struct/
I had a very quick glance at this, and it sounds interesting. Is there a demo project/some sample code/quick tutorial that: 1. shows off what Lighttouch can do 2. serves as a quick guide for a developer to get up to speed on the basics 3. have a play around 
&gt; Also, don't buy books, this aint 1995. Everything you need it free on the internet I would not support this statement. Books (or eBooks/PDFs) are often more comprehensive and have higher quality than material on the internet. Of course one can learn from all the free content, but it is often hard to evaluate the quality. E.g. many answers on stack overflow are really crap. Even better content is often only applicable to a specific situation/ use case and the reader has to find this out. There is of course also a lot of high quality material on the internet (e.g. YouTube recordings from Roberto Ierusalimschy conference speeches or some of his white papers on several topics) . &amp;#x200B; Especially for Lua the "Programming in Lua" series is really the reference to understand Lua and the concepts and the philosophy behind it. But they are not a beginners course for people new to programming at all. I bough the 5.2 version of the book as ebook (PDF without DRM) on Feisty Duck [https://store.feistyduck.com/products/programming-in-lua](https://store.feistyduck.com/products/programming-in-lua) It is really worth the money. There is also a version targeting lua 5.3 (fourth edition) available from a different publisher, slightly more expensive. I think 5.2 is still the most common used version of Lua, also because of LuaJIT. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Indeed it sounds interesting, but honestly I'm a little confused as to what it is. It's written in Rust, scripted with Lua and designed for Speakeasy? It's a Lua framework though for building what kind of applications? I'd like to see more info and some code samples.
Right! I'll document this today: * install Lighttouch by running `mp install lighttouch` * git clone one of the [Lighttouch Apps](https://github.com/lighttouch-apps/) * run `mp unpack` inside * start the app by running `lighttouch` * visit http://localhost:3000
&gt; It's written in Rust The Torchbear interpreter is written in Rust. &gt; scripted with Lua Yes, apps currently use Lua's syntax, and Torchbear currently uses PUC-Lua's runtime. &gt; designed for Speakeasy Lighttouch is an integral part of the Speakeasy ecosystem. &gt; for building what kind of applications? I imagine it being an application framework at the foundation of any modern app development. There are a lot of other pieces though, like [Speakeasy's CLI architecture](https://github.com/foundpatterns/speakeasy/issues/10) which will need some Lighttouch packages, eg its [JSON Interface](https://github.com/lighttouch-packages/json-interface) and an OpenAPI `loader` in Lighttouch. &gt; I'd like to see more info and some code samples. [Gut](https://github.com/foundpatterns/gut) and [Machu Picchu](https://github.com/foundpatterns/machu-picchu) both have their own wonky CLIs right now, and they're kinda spaghetti-like, so they need to be refactored into libraries and then built from [available Lighttouch Packages](https://github.com/lighttouch-packages?utf8=%E2%9C%93&amp;q=&amp;type=&amp;language=lua). Code samples are in [Lighttouch Apps](https://github.com/lighttouch-apps), mainly in `manifest.scl`. The [Found Patterns Museum](https://github.com/lighttouch-apps/found-patterns-museum), for example, is really starting to look beautiful, which as Luis, who made its HTML+CSS, said when I asked him about it: &gt;&gt; how would you say work is going? &gt;&gt; from a developer and from a user perspective? &gt; The work is going good. From a developer perspective the style loader makes it easy to reuse big css components and the theme loader that inherits from a parent or parents themes makes it easy to create a pages faster using an already made theme. And from user perspective it can help to create a webpage faster and also make it look good which is what most users want from a webpage 
&gt; Books (or eBooks/PDFs) are often more comprehensive and have higher quality than material on the internet. That certainly used to be true, but I've never had an issue with that in the last 10 years. Today there are a plethora of very comprehensive online courses with text based and video learning materials. Some by universities, learning companies and competent individuals. The last book I bought was from early 2000 when .NET was in its infancy. Since then everything and anything I've needed has been online. This is in several fields from web development, game development and more esoteric programming fields. But each to their own. I know some people love just reading a book cover to cover without any practical projects to work on as they learn. I find this very synthetic and not a representation of the real world. Personal choice I suppose and whatever works for you. 
Thanks for the reply.... first question: - What is `mp` and where do I get it from? 
Show us an error first. However: job_selected == 4 Should be job_selected = 4
So it's been years since I've used the Lua C interface. However, several comments for you: 1. It is a C interface, not a C++ interface. So the 2nd argument to `lua_register` is a C string, not a C++ `std::string`. 2. You probably don't want two different Lua states. The state variable holds the everything associated with a Lua execution context, all the variables, functions and such. You likely want to have a single `lua_State`. I'd suggest you look for a small tutorial on how to use the Lua C API. http://lua-users.org/wiki/SimpleLuaApiExample
The function you are trying to register has the wrong type signature. From your error, I think get_opponent_name looks something like this: std::string get_opponent_name(lua_State *L) { ... } If you're writing a function that gets a string out of the Lua context, it's probably supposed to look something like this: std::string get_global_lua_string(lua_State *L, char *global_name, char *default_value) { lua_getglobal(L, global_name); char *result = (char *)luaL_optstring(L, -1, default_value); std::string str_result(result); lua_settop(L, 0); return str_result; } Which you'd call like this: std::string opponent_name = get_global_lua_string(L, "opponent_name", "No-Name"); Otherwise, if you're trying to register a function that you can call from Lua (to get the player name out of C++ land and into Lua land), you need to pay attention to the lua_CFunction type signature: https://www.lua.org/manual/5.3/manual.html#lua_CFunction Note that it returns an int, not a std::string. You pass your string into Lua by pushing it onto Lua's stack: std::string g_opponent_name = "Fred"; int get_opponent_name(lua_State *L) { lua_pushstring(L, g_opponent_name.c_str()); return 1; } And then, after you register it, it can be called from Lua: local opponent_name = get_opponent_name()
Okay ill look at it and see if that fixes it, thank you a ton!!!! And yes its the wrong return type i just didnt know how to fix it 
in that bottom section if i try to have get_opponent_name.c_str() it tells me that there is a request for member c_str which is of non-class type 'int(lua_State*)'
&gt; But each to their own. I know some people love just reading a book cover to cover without any practical projects to work on as they learn. I find this very synthetic and not a representation of the real world. No book and no training is ever a replacement for practical experience. It complements each other. &amp;#x200B; I work as a software developer and development manager since 30 years. I have seen people collecting all trainings and exams they can and fail in simple practical tasks. But I have also seen developers with a lot of practical experience but dangerous gaps in the basics of information technology. When somebody, working as professional software engineer, has absolutely no idea about the difference between a 16 bit and 32 bit integer, I'm worried On the internet there are a lot of "how to" style things of information but often a lack of background. Coming back to the original topic (Lua) the Programming in Lua book series describe the philosophy behind Lua, the design decisions taken and also some of the theory behind constructs like closures, higher order functions, coroutines, etc. It is possible to do some scripting with Lua without much understanding of all these things, but I would definitely say that there is value in learning it. Personally I find Video tutorials mostly annoying. Videos waste a lot of type with irrelevant noise (like observing the instructor typing code in an editor) , obvious and redundant things. Videos has to be adapted to the speed of the slower part of the audience, so as somebody who understands fast, the video is boring slow. There are very good and comprehensive online sites which can be used as tutorial and reference manuals (like w3schools.com ). But most of them don't cover Lua. &amp;#x200B;
Ok I know I'm super late, but can you explain how you cached primes? You make cached = primes\[n\] which I don't understand.
You can think of the px values as subtracting w before looking at the other values. To me that's a little clearer and would make it easier to add other types of values later. It would make the px and regular sections a bit less intertwined. I don't think I'd actually re-factor this into separate functions. It's a pretty tight concept, and splitting it up may make it less readable. 
I got the lazies and stopped after this: local function round(x) return floor(x + 0.5) end local function sum(t) local s, len = 0, #t for i = 1, len do s = s + t[i] end return s end 1. There's already a math.round() function 2. s isn't initialized, len doesn't need initializing or even declaring and what is 'local #t'? 
2. You are misstaken, S is initialized to 0 in that code.
I thought about that but I for example call `slice('horizontal', {1, '10px', 2, '20px', 3})` then `r_without_px` will contain `{1, 2, 3}` and then I would need to figure out how to put `widths` and the pixel values back together in correct order. I haven't tried it though, maybe it would be cleaner. Thanks.
Ok, I'm very confused... &gt; There's already a math.round() function [No there isn't?](https://www.lua.org/manual/5.1/#index) &gt; s isn't initialized It's intialized to 0 on the first line of `sum(t)` &gt; len doesn't need initializing or even declaring I've done that for efficiency reasons. If I called `for i = 1, #t do ... end` then `#t` would be calculated on each iteration of the loop. &gt; what is 'local #t'? `t` is the parameter of `sum(t)` ... &amp;#x200B;
Well, for one thing, considering that "layout" is used in your code as a boolean for "horizontal", this: local horizontal = {vertical = false, horizontal = true} local function slice(layout, r) layout = horizontal[layout] would be much more clearly written as: local function slice(horizontal, r) horizontal = horizontal == "horizontal" or horizontal == true (and that `or horizontal == true` is only if you want to support a transition from a string-enumerated calling convention to a raw-boolean calling convention that would make more sense - if all calling code migrates over to that convention, you could remove that line altogether).
Yeah, that would be cleaner. I figured indexing a table would be faster, but maybe that kind of optimization is a bit over the top.
By the way, for loop range is only evaluated once, so there is no harm in writing `for i = 1, #t do ... end`
Yeah, there's a lot of that going around in this code. For example, you keep calling `unpack` for tuples where you only use the values once or twice, and it'd be simpler to just leave them in the table: local x1, y1, x2, y2 = unpack(stack[#stack]) local d1, d2, s1, s2 if layout then d1, d2, s1, s2 = x1, x2, y1, y2 else d1, d2, s1, s2 = y1, y2, x1, x2 end would be simpler as local tip = stack[#stack] local d1, d2, s1, s2 if horizontal then d1, d2, s1, s2 = tip[1], tip[3], tip[2], tip[4] else d1, d2, s1, s2 = tip[2], tip[4], tip[1], tip[3] end Beyond that, if you want to know what you can remove in this function, you really back and add some comments explaining what this code is supposed to be doing. Like, why are you setting `s1` and `s2` variables that never get used? If you had comments explaining what your code is supposed to do, you might see that this code could be simplified even further: local tip = stack[#stack] -- set extents of sliced axis local d1 = horizontal and tip[1] or tip[2] local d2 = horizontal and tip[3] or tip[4] 
Ooh neat. Thank you. Maybe you know what I could do about the `if layout then ... else ... end` at the end?
Hmm, interesting. I've heard that it's evaluated each iteration and I've seen code like mine before. But I tested this with lua 5.3 and it apears you're right: local xyz = setmetatable({}, {__len = function(t) print(1) return 5 end}) -- prints 1 once and 2 five times for i = 1, #xyz do print(2) end Though I wonder if it's the same for luajit, couldn't run the same test since it doesn't support \_\_len metamethod
Luajit supports __len if you compile it with -DLUAJIT_ENABLE_LUA52COMPAT
How would I do that with msvc?
Ok, so here's what I came up with after implementing suggestions from u/dudinax and u/StuartPBentley : local cantParse = 'boundaries.slice(): Can not parse weight #%d: \'%s\'' -- split up the current bounds into rectangles based on the supplied weights local function slice(layout, r) layout = layout == 'horizontal' -- table of current bounds in the form {x1, y1, x2, y2} local top = stack[#stack] -- bounds of the dimention along the layout axis local d1 = layout and top[1] or top[2] local d2 = layout and top[3] or top[4] -- the length along the layout axis local w = d2 - d1 -- parse values with modifiers and store them, store weights in a different table local widths, weights = {}, {} for i,v in ipairs(r) do if type(v) == 'string' then local n = v:lower():match('([%d%.%-%+]+)%s*px') assert(n, cantParse:format(i, v)) widths[i] = round(assert(tonumber(n), cantParse:format(i, v))) w = w - widths[i] else table.insert(weights, v) end end -- turn weights into pixel lenghts and put them in the gaps local j = 1 for _,v in ipairs(ratios(w, weights)) do while widths[j] do j = j + 1 end widths[j] = v end -- push the rectangles onto the stack in reverse order local lastBorder = d2 for i = #r, 1, -1 do local currentBorder = lastBorder - widths[i] if layout then push(currentBorder, top[2], lastBorder, top[4]) else push(top[1], currentBorder, top[3], lastBorder) end lastBorder = currentBorder end end Thanks everyone \^\_\^
[ Project properties -&gt; C/C++ -&gt; Preprocessor](https://docs.microsoft.com/en-us/cpp/build/reference/d-preprocessor-definitions?view=vs-2017#to-set-this-compiler-option-in-the-visual-studio-development-environment)
Ok, I wasn't using Visual Studio, just the included `msvcbuild.bat` but I added `/DLUAJIT_ENABLE_LUA52COMPAT` to the line that starts with `@set LJCOMPILE=cl` and it worked.
Yeah, that's just easier to me. Whether it's objectively better I don't know.
It’s supposed to be g_opponent_name, I’m assuming your opponent name is stored in a global string, which I prefixed with “_g”.
It uses a quicksort algorithm with the provided callback and a comparator to determine which of two values is higher priority. https://en.wikipedia.org/wiki/Quicksort https://www.lua.org/source/5.3/ltablib.c.html The manual explains it best: https://www.lua.org/manual/5.3/manual.html#pdf-table.sort
**Quicksort** Quicksort (sometimes called partition-exchange sort) is an O(n log n) efficient sorting algorithm, serving as a systematic method for placing the elements of a random access file or an array in order. Developed by British computer scientist Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it can be about two or three times faster than its main competitors, merge sort and heapsort.Quicksort is a comparison sort, meaning that it can sort items of any type for which a "less-than" relation (formally, a total order) is defined. In efficient implementations it is not a stable sort, meaning that the relative order of equal sort items is not preserved. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
It uses the function (instead of '&lt;') to compare two elements in the table, eg: t = { 1, 2, 3, 4, 5 } table.sort(t, function(a, b) return a &gt; b end) print(table.concat(t, ', ')) --&gt; 5, 4, 3, 2, 1
I think i got it. Thank you.
What stack would the Lua be running on? Lightroom?
You can cache the results of any function you want. In this case, the cache holds mappings from numbers to boolean values. At the start of \`isPrime\` function I check if the cache already contains an entry for given \`n\`. If \`cache\[n\]\` is not nil, it means we have already cached this value, and the function returns that value from the cache. Otherwise, we do all the computations and, before returning, store the value in the cache, so that next time, when the function is called with the same input, it doesn't need to do a prime check again. Table lookups are very fast and consume very little memory, which is why caching is often the best way of improving performance in Lua.
["Programming in Lua"](https://www.lua.org/pil/) for general lua. I don't know what to get for game programming
Don't mean to plug myself but in case you find it helpful, I am working in my spare time on an ebook for programming using Lua to make games. https://rvagamejams.com/learn2love/
Thank you so much for putting that book together! I've actually been using it to get the ropes of LÖVE and I'm enjoying it a lot. Any plans on a print version?
I wasn't planning on printing it, but I'll probably start publishing epub and pdf copies with each update to make it easier to use offline. The issue with printing is I want to continually update it and printed copies will go stale quickly. Perhaps my opinion will change once it gets to a more complete state. Thanks for letting me know you find it helpful. That encourages me to continue working.
Al Sweigart has a book called [Coding with Minecraft](https://turtleappstore.com/book/) that uses Lua to make Minecraft mods. If you scroll down the link I posted, you can see book is free online.
OP: *"As lua is my first and only programming language..." I use LuaJIT professionally, and Lua is likely my ℵ0th programming language. I feel confident is saying that while PIL is a great introduction to the language, it assumes you have fairly significant programming experience. We really do not have a foundations of programming with Lua as a base, and I think that any beginner will come away from PIL very frustrated.
What do you mean? On the startup of your computer or on the startup of luamacro.exe?
Wrote a script that I then but into the windows startup folder hoping that it would run in the background whenever I start my computer. but instead it just pops up the code in lua and doesn't run or minimize until I physically click the blue play button ....I want it to just run when ever I log in to my desktop with out it needing me to click the blue play button
That's because you have to execute the Lua interpreter from your start-up directory, with the file path of the script as an argument.
i think i understand im not 100 percent sure but im gonna try it on my own for a bit
Does lua have spawn() 
I have no idea man I just started using it to turn a external numpad into a macro pad my code works almost flawlessly but have to click to run the code Everytime is annoying
I'm still lost can you possibly show me a sample code or explain it like I'm 5 I'm pretty new to coding the code I wrote works great but the whole having to click to run it is a pain do I use Lmc_load "file path" as an argument ? whenever I save the script with it an argument it goes from a .exe to a .Lua 
&gt; But you can use its "building blocks" to create very complex functionality I wish it had a `continue` statement though. for whatever in pairs(foo) do if whatever ~= 'bar' then continue end -- Do some stuff here when the clause is true. end ... is unlimited more easy to read and maintain than any other solution if found even if I'm bad in making up examples.
That's what \`break\` does, isn't it?
One option is to split up the string and concatenate the new one from a table used as a buffer. local str = "abcdefghi" local old = "def" local new = "xxx" local i, j = str:find(old) local buf = {str:sub(1, i - 1), new, str:sub(j + 1)} print(table.concat(buf))
No, `break` leaves the loop it's in. So in the example the loop stops after the first `whatever ~= 'bar'` being `true`. If you want to do something for every `whatever ~= 'bar'` being `true` then you need to work around Lua not having `continue` ... usually wrapping the payload of the loop in another layer which makes it harder to read and maintain.
Ah. Couldn't you just do this? &amp;#x200B; `for whatever in pairs(foo) do` `if whatever == 'bar' then` `-- Do some stuff here when the clause is true.` `end` `end`
While in this case, creating a table first is not really needed and not more performant - simply concat the three parts. The general thing to remember is that strings in Lua are immutable, so the solution is in any case to create a new one, using the parts of the old string you need. This can, as with gsub, come in a handy function of course.
Yes, that's what I mean. It shifts one to the left and adds another layer. It's potentially less readable.
Simple concatenation is discouraged for large strings or for multiple sequential concatenations. Since OP mentioned "100 thousands letters", I think using buffer is good practice here. https://www.lua.org/pil/11.6.html
Thanks. I look forward to reading this.
Thanks, will definitely give this a look 
This sounds really interesting, most likely will read it
Why not use string.gsub to replace it straight away?
I dont want to replace all of them, for instance, there are a lots of "lol" in my script, then I just want to replace specific one. I should have gave you this example: &amp;#x200B; Code: local s = \[\[lol,qweadd,lol,gsuhnkz,lol,uygbjxbpq,lol\]\] &amp;#x200B; \-- end of code &amp;#x200B; I want to replace the third lol where the result would be like: &amp;#x200B; lol,qweadd,lol,gsuhnkz,XXX,uygbjxbpq,lol &amp;#x200B; And keep other "lol" as unchanged. I my case, I can use string.find() function to find out the specific location, and I am thinking how to do the next step. &amp;#x200B;
Also, the other part of my script is complex, it combine not only word and numbers but also kinds of symbol. 
Thanks for solving my problem! Cheers
\&gt; Brags about their programming knowledge \&gt; Is not able to download and extract an archive
Pictures? Video? Any more information beyond two vague sentences?
Check it out in the app store for screenshots and documentation. 
I uploaded a photo to reddit of the updated app, the update will be available in 3-6 days. 
For smart watches, I assume? Can't find anything on google!
Its for the samsung galaxy watch series. you can only get it through the samsung wear app which lets you access the galaxy app store for their watches. :) 
Posting basically the same thing three times in less than a day is not acceptable. If, in the future, you have a significant update to the app, and have a blog post or something explaining what's going on and what's interesting, you may post a link to that.
what.
I posted this a month ago, why are you commenting on it now?
There's no reason you can't create that directory manually. And bear in mind that, on many (most?) versions of Linux, /tmp is nuked on shutdown. When does it try to create that cache?
Good point about /tmp getting nuked, that's probably not a good place to put it. I'm actually not totally clear about how the cache works. I think it's created on the first program invocation. Luajit might compile libraries like cudnn for the target architecture and then later invocations can pick up those binaries.
If it's truly temporary, or used as scratch space, then that's the damn right place to put it. Especially because it can be on its own partition to avoid fragmentation, or to get other speed benefits. You might want to try creating the cache manually and adjusting the permissions. It could be that it runs as a separate user who can't access the default ec2 user.
I believe it compiles the binaries on their first invocation. So the first time that they are run on a machine does compilation and then subsequent invocations can check the cache. I'm using a cloud swarm so I actually need that first invocation to be stored in non-temporary space
I didn't test the code but this part looks to be a problem at first glance: {table.unpack(quicksort(l)), pivot, table.unpack(quicksort(g))} In Lua, the leftmost `table.unpack` will be adjusted to always return exectly one element. This means that if `g` is empty it will return `nil` and if `g` has two or more elements it will only return one of them. I would suggest avoiding the use of table.unpack here. What about creating a `concat` function that takes a sequence of sequences and flattens them into a single sequence? &gt; concat({quicksort(l), {pivot}, quicksort(r)}) In addition to table.concat not doing quite what you want, abusing varargs on lists with possible thousands of elements is not really ideal. &gt; If possible, I'd like to keep a simple implementation, preferring, if possible, recursion to iteration. I think mergesort might have been a more suitable algorithm for this "purely functional" approach. The traditional implementation of quicksort modifies the array in-place (it can still be implemented recursively, of course).
Side note: This line of yours: `local pivot = table.remove(list, #list)` Has exactly same effect as writing just: `local pivot = table.remove(list)`
Snooping through older threads.
Thank you for your answer. The part of code you mentioned was the one that bothered me the most, so I think the problems is there. Currently I'm trying to implement a function to flatten a sequence of sequences into a single sequence. Hope it won't take me too long. I took a look at the merge-sort and yes, probably it would have been a better choice. If I won't make it with the quick-sort, I'll try to switch to this one. Thank you again, really appreciated!
Oh yes, my bad. Didn't remember this subtlety D: Thank you for pointing this out!
Similarly, g[#g+1] = list[i] can be replaced with table.insert(g, list[i])
At this point it might be better to split everything per comma into an array of strings and match them individually in a loop. I'm going to guess you'll have more things happen, so...
I believe you can use table.move (5.2+ I think) to shift data to a new table.
I don't know if Lua is actually declining or not. There are still projects that supports it, and that are very active. I think this is enough to keep the language alive. That said, Lua is already feature rich already, I don't think you would be taking a huge risk by choosing it.
Lua's been trucking along for 26 years now. If it lasted this long. it wil certainly outlast whatever project you're planning. It will also probably outlast whatever company you're working for. In terms of being a general programming language, sure it may not be the most popular, but it is famous for being one of the most well-designed, conservative, and flexible languages ever made. But that's not even the point of Lua. In terms of being an embedded scripting language that can run anywhere and run fast, it is unmatched. Until a better embedded scripting language comes along that can match the speed and power of Lua, it's unlikely Lua will go anywhere. 
LuaJIT was, for the most part, a one man show. Mike stepped down officially, but afaik he's still very active on the mailing lists etc. That said, there's also RaptorJIT which is being produced by the folks at Cloudfare and meant to be a more maintainable (no single point of failure) version. Torch i think might be falling short of it's rivals, but such is tech. Lua itself has a working release of a new version, 5.4 out. There are tons of new projects using Lua coming out all the time. tl;dr: Lua is alive and well.
If you are concerned about the uncertainty of the newer stuff just target 5.1. It isn't ever going away.
On the TIOBE index Lua has been consistently hovering around 25-30 the past few years.
Cloudflare has nothing to do RaptorJIT. It comes from Luke Gorrie who created the userspace networking system Snabb which is mostly written Lua and makes heavy uses of LuaJIT's FFI\CData system.
I believe the game Dota Auto Chess is made with Lua.
Still need Lua for redis plugins (which is a ubiquitous thing around the world), WoW UI mods, and some 2d mobile engines like Corona SDK, Cocos2D, etc.
In my opinion Lua is having a heavy car of NIH - not invented here. Everyone reinvents the wheel all the time because using another's wheels tends to take up just as much time. Plus LuaRocks kinda... Breaks most of the time 100% of the time.
My company uses it to program lighting/heating/audio projects, with an accent on energy saving, using a graphical controller with embedded Lua, which is how I discovered Lua even existed. I also just discovered, after using for like 6 months, that my lastest Ardour (DAW on UbuntuStudio) can use Lua to automate and manipulate audio track mixdowns. I don't think Lua is declining, it just happens to be in places where people might not expect.
Thank you! Looking at the framework communities, these are still very active and the frameworks well maintained. And gosh those frameworks look good. My suggestions to the experienced Lua community as a (current) uneducated outsider is: 1. More tutorials (blogs or videos). Anything to show people doing interesting things in 2019. 2. More conferences. 3. Mailing list to GitHub development. It would be more open and potential 'converts' could see development. 4. Apache Spark Lua bindings! (That would be a bit tricky given they support a good number of languages). 
Reading about LuaJit.. sounds like Mike is incredibly talented. I noticed Cloudflate sponsored some improvement last year to LuaJit. Would be great if that work continued! Torch is dead? From their GitHub? Not surprising given competition from Python, Julia, R and Scala. But... Lua could be perfect for data science and machine learning. At least better than R... It would be great to see bindings for Spark! (Unlikely but still) 
What’s popular in the industry != It’s good
fuck Lua
 function foo(bar) if bar == nil then bar = true end end
 function foo(bar) local bar = bar~=false and (bar or true) or false ... end
An alternative solution: function foo(...) local bar = select('#', ...)&gt;0 and ~~(...) or true ..... end This method differs in that it counts the number of *arguments*, be they true, false or even nil, so `foo()` will default to true, but `foo(nil)` to false. This is similar to how functions written in C (Including many of Luas built-in functions) work, since they often also count arguments to decide how to interpret them. The double negation `~~` is just there to turn any lua value into an actual boolean and you might want to skip it if the exact type is not relevant in your code.
That first one did the trick nicely. Cheers.
I don't think Lua is really declining. It's just that its ecosystem is very slow-moving, because its design philosophy seems to attract programmers who look for stability and sanity, rather than having the hottest new tech the day before it's even invented, like with many other languages. Lua 5.3, the current version, was released in 2015. Compare that to Rubys yearly release cycle. If you want to chase after the cool new stuff, even though it means abandoning a perfectly functional system, then Lua is the wrong language for that. If you want to build a system once and have work for 10 years without giving it much care, then Lua is the language to go.
&gt; pops up the code in lua I think you're conflating Lua and whatever program you're using to write and run your code. Lua is, strictly speaking, the language itself, but it is also used for either the Library or the interpreter executable. Your problem seems to be that you have set up windows to open Lua files in your editor, so you can double-click them to edit. If you don't want that, change the default program to the Lua interpreter, and they will run both when you click them or when windows finds them in the autostart folder at startup. Alternatively, don't drag the file directly into the startup folder, but write a simple `run_my_script.cmd` file that calls the Lua interpreter with the file as its argument. `C:\path\to\lua.exe C:\path\to\script.lua` Doing that you will get an ugly command prompt window though, so you may need to [look into how to get rid of that](https://duckduckgo.com/?q=windows+start+cmd+without+window&amp;atb=v154-2&amp;ia=qa). That's a windows-specific problem though and has nothing to do with Lua.
I've been playing with Löve on-and-off, and this book might be a good place to start actually getting into it for good. Thanks for sharing and thanks even more for writing :)
Basically the Lua Bible
&gt; ℵ0th programming language Nice to see someone here understands numbers &lt;3 (Given what I've seen in the Ruby community, that's not something one should ever take for granted)
Computercraft is nice, but it has some tiny inconsistencies that can become pretty significant if you start doing very complicated code. The way modules work is one good example, where it works completely differently from "normal" Lua where you `require` your modules, often into local variables. I've also found out the hard way that `string.format` doesn't work the way it should, so there may be a few other subtle differences that mean Computercraft knowledge can't necessarily be applied 100% to other Lua projects. Of course, this is just nitpicking, and by no way do I mean computercraft is a bad place to start learning Lua, but if OP wants to do game development specifically, that time might be better spent learning some functional programming patterns.
If you want to build games, this short document is a must-read: [Lua Performance Tips](https://www.lua.org/gems/sample.pdf)
You can use GetRunningTime, check the API reference
I wouldn't use Lua as main language for a project. There are usually faster or better fitting languages. But I think using Lua for scripting/mods/modules/extensions is absolutely fine.
Oh I forgot to mention I tired that as well But it doesn't matter I've found a way to fix the thing I wanted
I usually use: local bar = (bar ~= false) That way, false stays false, but true or nil become true.
&gt; Edit: I found a temporary fix for what I wanted if you still have any ideas it would be much appreciated 😊 For the sake of anyone visiting this thread [in the future](https://xkcd.com/979/), explain your temporary fix.
Here's a solution for Lua 5.3 that doesn't depend on `os` and generally gives much better results than `os.time()`: -- Returns a 32-bit hash result function hash(value) if type(value) == 'string' then local h = 0 for i = 1, #value do h = h * 31 + string.byte(value, i) end return h % 0xffffffff else return hash(string.format('%s', value)) end end function genseed() local h = hash({}) -- hash a random pointer for k, v in pairs(_G) do h = h ~ hash(k) h = h ~ hash(v) end return h end math.randomseed(genseed()) It's essentially skimming entropy from all the pointers on `_G`. As a result, how well this works depends on how Lua was built and its specific runtime environment. For example, this works less well for Lua running in Cygwin (or, more generally, Mingw-w64 / MinGW) which essentially has no address randomization: no ASLR and no allocator randomization. Works great on Linux, though, where I get a completely different value each time I call `genseed()`. 
Thanks
Would you mind actually explaining what you did to work around this? Others seeking similar answers I'm sure would like to know. 
post some additional info and someone might even be able to help you directly here on reddit :)
Lua is used extensively on wikis (Wikipedia, but also other wikis like Fandom, Gamepedia, etc) because of the [Scribunto](https://www.mediawiki.org/wiki/Extension:Scribunto) extension - while it's unlikely to ever generate a large number of jobs this way, it's also likely to be used for a long time because of this. (I use Lua because I run Leaguepedia)
This is more of getting someone to break something down for my understanding, but I will upload the LUA script on here, but I was just looking for more of an explanation and ability to ask questions real time. Thanks for the advice. 
If you know which `lol` by number, you can count up with `string.gsub` and replace the *n*th occurrence of the string in this way: function replace_nth(str, patt, repl, n) local i = 0 return (string.gsub(str, patt, function () i = i + 1 if i == n then return repl end end)) end For instance, to replace the third `lol`: local s = [[lol,qw,+,{,\",\\,eadd,lol,g,+,87,suhnkz,lol,uygbjxbpq,lol]] print(replace_nth(s, "lol", "XXX", 3)) print([[lol,qw,+,{,\",\\,eadd,lol,g,+,87,suhnkz,XXX,uygbjxbpq,lol]])
Ok I put my temporary fix in the post edit.
Thanks I'll try this out 😁
Ok I put my temporary fix in the post edit.
Please, i'd be happy to have a .epub release to read.
Improving hashing a bit more: function hash32(x) x = x ~ (x &gt;&gt; 17) x = x * 0xed5ad4bb x = x &amp; 0xffffffff x = x ~ (x &gt;&gt; 11) x = x * 0xac4c1b51 x = x &amp; 0xffffffff x = x ~ (x &gt;&gt; 15) x = x * 0x31848bab x = x &amp; 0xffffffff x = x ~ (x &gt;&gt; 14) return x end function hash(value) if type(value) == 'string' then local h = 1 for i = 1, #value do h = h * 31 + string.byte(value, i) end h = h &amp; 0xffffffff h = h ~ (h &gt;&gt; 16) h = h * 0x7feb352d h = h &amp; 0xffffffff h = h ~ (h &gt;&gt; 15) h = h * 0x846ca68b h = h &amp; 0xffffffff h = h ~ (h &gt;&gt; 16) return h else return hash(string.format('%s', value)) end end function genseed() local h = hash({}) -- hash a random pointer for k, v in pairs(_G) do h = hash32(h ~ hash(k)) h = hash32(h ~ hash(v)) end return h end math.randomseed(genseed()) Like before, this is for Lua 5.3 and works equally well for 32-bit integer builds as for 64-bit integer builds. 
Unfortunately both of your texts of code for some reason doesn't work in the logitech gaming software script. It just comes out as syntax error even though in the lua demo page it works fine. So I guess there is some more limitation in the (LGS) software which kind of sucks. ;(
This rule of thumb does not hold in simple cases like the one here. You can see in the "compiled" Lua VM instructions that the double concatenation will be optimized into a single one and overall you get fewer VM instructions \*plus\* fewer allocations using simple concatenation here.
Interesting read
I still think it's good practice to learn about the buffer optimization. At what point does the compiler not optimize concatenations? Do they have to be in the same line of code? Is it limited to only a certain amount?
According to roblox, -- is a comment, this wont work as a variable
Perhaps Logitech is using Lua 5.1. Bitwise operators (\`\~\`, \`&amp;\`, \`&gt;&gt;\`) were only added in Lua 5.3.
can you generate a number between 1-100 with this?
 math.randomseed(genseed()) local r = math.random(100) 
thx
Yes you could be correct because those operators don't work in LGS
I figured you guys might be my best bet on reddit to the some feedback. I've worked quite a bit on this, but of course it's not even close to complete. Still I feel like it's advanced enough to start collecting some feedback. If you have any questions or suggestions, do let me know.
Ooo that looks very cool! Any idea of pricing once this is out of Alpha?
Yes, right now I'm looking at the following for the $1 / month package. 50k invokes or 50k db reads or 25k db writes Bigger packages would give a good discount. This is meant for prototypes, side-projects, and it could be awesome for codepen/codesandbox use. All not really high traffic applications.
Love2d and corona are two. If you’re looking for mobile probably corona. Love2d is very fun and easy to start with. Exporting to mobile though with it isn’t a one click process for sure. No graphical interface to help with levels etc.. just 100% code
I actually program in lua and Love2D on my android phone
Ahhhh, so I guess it has a “player” and you just edit the Lua Script and play it through it right?
Would you mind sharing how? Would be a bit of nice practice in any spare 5mins?
Yeah. When you install Love2d on your android you should have a folder called "lovegame" in storage. If you put your scripts in there and run the app, it will use those scripts. I then have another app which allows me to edit txt files with lua syntax.
Check out my reply to _Charlie2018
That's that's the point/joke. You prefix global variables with -- because you should never use them
It is simply not a case PIL is talking about, so I think it is misleading to introduce this as an optimization for the OPs problem. The case PIL is looking at is about putting the GC under pressure by a tight alloc/dealloc cycle where you alloc buffer "A", "B", "AB", dump "A", dump "B", alloc "C", alloc "ABC", dump "AB", dump "C" etc. The memory overhead to just alloc "A", "B", "C" plus a bit of table management is much preferred to this pressure on the GC. This is not the situation the OP is in. String length does not matter for this problem either. Concatenation is done in a single VM instruction for all concatenations within the same expression where the order of concatenation is the "natural" one - e.g. see the difference in vm instructions generated by "local a = b .. c .. d" vs local a = (b .. c) .. d" vs "local a = b .. (c .. d)", the first one and the last one are the same. In the source code of Lua 5.1 I did not find a limit to this. And I'm not sure if it should really be called an optimization, to be honest. The VM instruction (see luaV\_concat()) is simply just built to concatenate a given number of strings/tostring()ables from the stack. 
This is really awesome! Perfect for like, a chatbot, microservices, remote logging, any excuse you can think of really :) I enjoy the ability to type some code right at the webpage and the db and res api is very intuitive.
Maybe not for mobile but i enjoy pico-8 for messing around with lua :)
You compile your C++ program and give it to someone else. That person can't change anything about the program because it doesn't have the C++ source code. If you have parts of your program written in a scripting language that person can change that part. Your program is much more useful that way because it can be changed to certain needs or can be extended. Also writing and compiling C++ is much more time consuming than writing and running a scripting lanugage. So with a scripting language you can trade developer time with execution speed.
thanks for the answer, now I understand what's the point of Lua.
I use Lua in a standalone situation. My project [on gitlab.](https://gitlab.com/davethecomposer/platonic-music-engine/tree/dev). I am not a programmer, I am a classically trained composer. Lua is the only language I know and this is the only program I'm working on. I've had to add various functions/libraries to make things easier but that's not so bad. My only big issue is the lack of a gui library that I can figure out. I think other scripting languages don't struggle as much in that department. There are a few available but after years of trying, I'm still not able to get any of them to work much less figure out how to package them for future users.
Lua's a lot faster to develop in that C++. Especially if you're exploring, i.e. don't know enough to formalize a design but need to play around. Datastructures that take pages of code in C++ are trivial in Lua. Something like JSON is almost a straightforward translation of lua table syntax. Can compile new code while running. For these reasons I often do small projects in standalone Lua. The biggest problem I have with Lua is that the compiler is very forgiving. A misspelled variable doesn't error on compilation, at best you'll get a runttime error, but you could also just get wrong behavior that's hard to debug.
This is really cool! I have a few bits of little feedback. The code editor doesn't indent right, e.g., function foo() end | which is really offputting, especially because nearly every editor gets Lua indentation &amp; highlighting rules wrong somehow, it doesn't look great for a Lua-centric service! Also, it's nice that functions provide stack traces in responses, but they're also often viewed as a security risk. Maybe there should be a setting that hides error messages so that we don't have to catch them ourselves? Also, errors should probably be logged by default. Not being able to middle-click on the documentation links on the function editing page was confusing to me. Can you make that part of the page static? I'm not exactly sure how the dynamically appearing content above it would interact... The documentation doesn't explain what happens if a database function fails. Does it throw an error? Does it halt the function entirely? Does it call the callback with some error?
Hey, thank you for your detailed feedback! You make some good points. Turning on/off stack traces is a good idea, I've put it on the list. Very simple to integrate. I've noticed the middle click problem too. I'll look into a way to solve it. I should be able to delay the scrolling until the page has completely loaded. Yes, the documentation is a bit lacking, especially in that regard. Error behavior is a bit flaky right now, but most obvious errors result in a callback with a falsy parameter right now. Some that completely break the VM generate a json response and do not call the callback. I'm still working on defining all that behavior better, but I'll definitely put some lines into the docs regarding that. Lastly, I hope I can make improvements on the code formatting, but that would probably require switching out the entire editor for something else. The quickest solution I could offer right now would be a 'Beautify' button.
Or even if the person does have access to the source code, they might prefer not to mess with it :) The scripting layer might just be simpler to work with than C++, or you might want to avoid long compilation times after every change, or you might want to be able to load script files at run time...
For the misspelled variable problem I highly recommend the [luacheck](https://github.com/mpeterv/luacheck) linter.
Thanks, I'll try it out. I've been using strict.lua lately which helps a lot but it's still runtime.
&gt;The biggest problem I have with Lua is that the compiler is very forgiving. A misspelled variable doesn't error on compilation, at best you'll get a runttime error, but you could also just get wrong behavior that's hard to debug. `luarocks install luacheck` ;)
`getmetatable` can be used to change the behavior of all strings, as it is shared among all of them. This also includes the `string` library, which is in its `__index` field.
&gt; Also, a free development / very low usage plan (maybe restricted in some other ways) will always exist. That's very nice to hear &lt;3
Is this a bad thing though? I’m just using Lua for a single-file configuration, and if someone wants to modify how strings work that’s not really a problem since I’m not re-using the lua_State.
Common pattern is to use compiled language for static libs, and Lua or other interpreted language as a glue.
I'm using Lua for configuration files, and I create a Lua state with a minimum set of functions as possible. About the only functions I include (aside from some project related functions) is \`os.getenv()\` (loaded into the state as \`getenv()\` and \`os.setlocale()\` (as \`locale()\`). This allows one to use environment variables and set the locale from a configuration file. I don't see a need for any of the functions you listed for a config file.
Then there should be no problem. It's just something to keep in mind if one configuration could possibly pollute the environment of another part of the program and possibly break it.
I don't use lua 5.3 typically, but this seems to have to do with implicit string to number conversion: Lua 5.3.5 Copyright (C) 1994-2018 Lua.org, PUC-Rio &gt; print(tonumber('0')+0) 0 &gt; print('0'+0) 0.0 &gt; print(tonumber('0.0')+0) 0.0 &gt;
If you are talking about the line of code I wrote in the post, the problem is that without the ' + 1' it prints '5', but if add 1, it prints '5.0'. What drives me mad is that running the program from the IDE gives the expected result, writing integers to the file, while from the shell they are written as floats. The part about coercions is nicely treated on the Lua programming book and on the online reference manual. Anyway, thanks for trying to figure out the problem.
That tonumber() and coercion produce different results seems like a bit of a gotcha.
It definitely is possible to set up the moonclass code such that your preferred syntax for declaring new methods is supported. This can be done by adding a `__newindex` function to the metatable of the `__class`. This may have some side effects though depending on whether moonscript classes override the `__newindex` of derived classes. I did not check. However, [Here](https://gist.github.com/novemberisms/1c92282f20a3d5a87e29a45d212c6f89) is the code with my prescribed modifications. If you compile and then run [this](https://gist.github.com/novemberisms/20d372cf11e04e1bffe7ccf663f3a2dd) test in lua, you should see that everything works fine.