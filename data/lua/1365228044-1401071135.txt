Some more suggestions: LuaApp, Lua2exe/lua2bin, LAR (Lua ARchive, like PAR for perl), LuaPacker
Interesting project, could this be integrated into the [LuaDist](http://luadist.org) project which could store its files in the zip file ?
Aside from the official docs at http://lua.org, http://lua-users.org/ is the largest collection of Lua resources. The wiki and mailing list archives both have quite a bit of info. My favorite Lua intro text is Ierusalimschy's _Programming in Lua_, 3rd edition. Also, keep in mind that Lua has changed a bit between versions - 5.2 is the newest, and has a different module system than 5.1, for example. Some of the details on the wiki may be a bit outdated, but the main ideas haven't changed. Don't forget http://luajit.org/ :)
Thanks man. 
I strongly disagree. node also has a tiny stdlib, which has made its social dynamics AWESOME. 
Visual Studio.
It depends. For basic usage it's really simple,something like 2/10. Because it's simple language for more advanced things like OOP or making bindings to C you need some knowledge so then it's like 7/10.
ZeroBrane studio is indeed a good choice. I am using it, not extensively, though. I am on Windows, so LuaForWindows is enough to me. I also use Notepad++ as it has support for Lua syntax.
 hours=os.date("%I") in the draw_clock_hands function.
ahh I see that now. but I still can't find any of the parameters for the hours ring like there is for the seconds and the minutes. Here is the picture of it working on my desktop. http://imgur.com/FUq47dk The seconds are the most outside ring on the clock and the minutes are the middle ring. The hours ring is eluding me. I can change the color and the brightness of the minutes and seconds ring ( alpha and colour variables in the settings_table) but I can not find the corresponding variables for the hours ring 
Thanks a ton man!
I just commented out the elements in the settings_table and verified that none of them control the hours ring
Read [Lua Gotchas](http://www.luafaq.org/gotchas.html).
One possible solution (probably not the best solution) would be to [use the commands on this webpage](http://www.keytosmart.com/change-windows-wallpaper-command-line/). The problem is that you need to convert the image to a .bmp before it will work (i guess you could script that, too). These commands are intended to be entered at the command line, but you can emulate this by calling 'os.execute(stringYouWantToExecute)' from lua. I haven't tested this; there might be some problems with permissions or something like that. Note: make sure to escape any backslashes \ if you're writing them in strings, or just use the stringName = [[a string]] format of declaring them so that you can put in special characters easily. For an image converter, you could use [ImageMagick](http://www.imagemagick.org/script/convert.php) Alternatively, you could make a lua library (or find one) which allows you to interface with the windows API, OR use the lua library FFI and then call a non-lua library which allows you to easily make windows calls, but that seems too complicated for your project. 
Hmm, the commandline might be doable. Half the reason I do this is to learn Lua, why not add image manipulation to the things I learn? I plan on using as little libraries as possible. I've always been the kind to learn by doing anyway.
You're running head first into the wall between languages and their environments. All languages (past a very low threshold) are equivalent in terms of what they can do. They are not equivalent in terms of how well people can make them do it (Lua is great at that) and they are not equivalent in terms of what they're wired up to, either. I can't make Lua launch an ICBM because I don't *have* an ICBM. Since Lua endeavors to be cross-platform, it can only do things (out of the box) that every reasonable modern platform can do. In fact, it's rather less than that; it can only do things that don't require different tricks on every platform. This is why Lua can't even give you a directory listing by default. You have exactly one option in principle. You *must* find some way to execute operating system code that was written in C and that is designed to link with C. This is a problem for every language, and every language solves it differently. In practice there are lots of ways to do it. You can use the Lua API, but then it'll be your C code that's doing the work. You can use os.execute, but then it'll be the Windows command line that's doing the work. You can find an existing library for interacting with Windows; this is likely to be the most honest option, because you're not really trying to change your wallpaper: You're trying to interface with Windows. My favorite option, personally, is to use LuaJIT. The LuaJIT ffi will make it a snap to do what you're trying to do, but it's another big wrench in your learning curve. It's also *not* pure Lua, which might be a concern for you.
As others pointed out you will need to call win32 API. It won't be easy from Lua. You will need Alien library to call into DLLs. Anyway, as much as I love Lua your best bet would be an Autohotkey script. It's also open source and has a huge following (which means active developing).
Hmm, I figured it would be quite trivial to change a desktop wallpaper, no matter the language... guess I'll have to look into it some more.
I don't mind using the windows API (or any other interface), I knew that Lua is more of an extension language anyway. It's more that I thought that, since it's a simple desktop wallpaper, it can't be hard to change it no matter the means. I guess I'll look into it some more before actualy starting to call libraries and API's and shit :P
http://gyazo.com/397b38a7c852ecb0a541c021c89c4820 now this:/
FIGURED IT OUT AFTER 4 HOURS. I was using physical.addBody supposed to be physics.addBody....
Good work, now you won't make that same mistake in the future. Or at least you'll find it that much faster and feel that much dumber falling for it again. Either way, when making calls to APIs spelling and capitalization are critical. Start using an editor like SublimeText that has code completion libraries for Lua/Corona, that might help cut down on these time-suck errors in the future.
Thanks man, this is literally my first day coding. So still trying to get the hang out of it. Haha
Holy crap, I've never see that before. That's brilliant!
I planned to use it w/Corona, so this works. Not as developed as a full-on module, but certainly better than nothing! I also found a version for Codea which seems more fully developed, but I haven't gotten it to work yet. I'm rather surprised no one else has tinkered with Dropbox integration in Lua before.
... Thanks for the tutorial, you're right about the documentation. The library is meant to be easy to use, but I find writing documentation exhausting. If you want to contribute with documentation, you're welcome to do so :)
Sure thing! Let me know if anything is wrong. If I end up using it more in the future I may just do that.
More recent versions of [Discount](https://github.com/orc/Discount) -- an implementation of Markdown in C -- supports footnotes in a style it gets from [PHP Markdown](http://michelf.ca/projects/php-markdown/extra/). So in theory when (if?) [Lua-Discount](https://github.com/asb/lua-discount) is updated, it may support them too. Unfortunately, Lua-Discount is very out of date. It's at version 1.3.1 of Discount, which came out in 2008 I think.
Ah cool, they chose lua. I bet cause it's probably the easiest language to integrate into an existing project.
The Wikimedia Foundation folks gave a talk about why and how Lua was embedded into PHP for this project. http://www.youtube.com/watch?v=PrhzAtC8fCc
It must be my Brazilian OCD but it kind of bugs me that there is the title is missing the "รก" :) Anyway, there is something I'm a bit curious about the templating system: how do you call subroutines (for subtemplates) and make them access the same "output buffer" as the parent template? I ask this because I toyed a it with making a templating system that uses coroutines to yield HTML fragments instead of adding them directly to the buffer (like Erector and all the others tend to do) and I wonder if noone does this for Lua because they didn't get the idea or because its ineficient or something like that.
You might want to use a random seed as well: http://lua-users.org/wiki/MathLibraryTutorial 
Bug: If x == 6 or 7 Here, it will check if x equals 6. If it doesn't, it evaluates 7, which is not 0 so it's "true". If x==6 or 7 is always true. The correct expression of course is x==6 or x==7
Alright fixed! Makes sense. I think it's working MOSTLY properly(going off what the tetris wiki said) but I feel like the output still isn't as random as tetris makes it. Too many consecutive pieces at times.
This thread from a few weeks ago has links to several helpful resources: http://www.reddit.com/r/lua/comments/1bxj88/just_getting_into_lua/ Lua's a very practical language, though it's clear about its limitations and docs will tend to steer you towards other languages where it isn't a good fit. (Lua and C are particularly complementary.)
The version online of PiL (first edition) is actually targeted at 5.0, second ed. is targeted at 5.1, and third ed. is for 5.2.
While I think many of those links are going to be useful, for a non-programmer things like http://www.lua.org/manual/5.2/ may be a bit too dense/technical. Like many people, I'd recommend checking out Programming in Lua (3rd Ed) Specifically I'd say first check out the first edition which is free [online](http://www.lua.org/pil/) then of that seems comprehensible to you, buy the new edition so you're getting the most up-to-date information on the newest version of Lua. Additionally, I'd say if PiL isn't for you, The Wrox Beginning Lua Programming *seems* to be fairly beginner friendly. 
Lua, not LUA
I know of this bug, it affected a script of mine: http://lua-users.org/lists/lua-l/2007-03/msg00564.html The first (few) numbers will always be the same for some OS, thus not random. You "fix" it by calling random at least twice before "really" calling random. Example: math.randomseed(os.time()) local garbage = math.random() garbage = math.random() --- OK, after this line, random is now random! Maybe this is your problem?
I've heard that rumor once. Wasn't really sure if it was true or not. I'll try it now. Couldn't I just call 2 or 3 local math.randoms and be good? Ninja Edit: Definitely is far more random. I just called a few local math.randoms and it's awesome. Thanks! No more "bags" with nothing but "j's"
VICTORY! You pick up the gleaming amulet and power surges through you! WINNERS DON'T DO DRUGS!!! ------------------------------------------ FINAL SCORE 90 points for reaching level 10 214 points for your hoard of treasure 50 points for looting the amulet! Your starting HP was 6, giving a difficulty multiplier of 1.33 Finally, your elapsed turns score divisor is 5.96 YOUR SCORE: 79.25
I would start with an environment easy to play with like lรถve: http://love2d.org/ and also as editor maybe zero brane studio which also supports lรถve library almost out of the box http://studio.zerobrane.com/ 
You can in Notepad++. Select "Encoding" next to "View", then mess around with that.
The correct encoding is probably one of CP1251, CP866, or KOI8-R.
Actually turned out to be Windows-1251 or something like that
As Lua itself, the communities about it are also embedded. There is no way to make this into a great thing as many other efforts have shown.
I checked out Lua-Discount, as well as Lunamark. The latter looks great, but like Lua-Discount it uses bindings so won't work in Corona, which is what I'm aiming for. It looks like Markdown.lua is the only alternative, but it doesn't support footnotes. :(
I think it wpuld be great for the non specific lua questions. The main stackoverflow site is too heavily moderated imho.
The book I started using got me really confused. I'm more of a hands on person so I've kind of given up on it until the game I want to learn it for comes out. When I can play around with it and see how functions work, I think I'll start to pick up on it quicker than reading a book. I may buy the Programming in Lua 3rd Edition later down the line.
Download love2d and start drawing a few shapes on the screen. See if you can make the shapes follow your mouse around. Get that far and you are well on your way. That's where I started anyways, and its a good start to game scripting. if mousex &lt; shape.x = shape.x - 1.... etc.
Which game?
If the Javascript, Python, and Ruby communities aren't too big for StackOverflow, neither is Lua.
This looks really cool! It looks like it will make Lua a more viable language to be used on it's own when combined with the Terra.
Lua is already a viable language, but I agree this looks awesome.
That's right, probably it'll be an alternative in cases that you need better performance.
https://news.ycombinator.com/item?id=5703132 &gt; we designed Terra primarily to be an enviornment for generating low-level code. In particular, we want to be able to easily design and prototype DSLs and auto-tuners for high-performance programming applications. We explain this use-case in more detail in our upcoming PLDI paper (http://terralang.org/pldi071-devito.pdf).
A side note that I forgot. Lua in Portuguese means moon. Terra is the same as Earth :o) 
What i can't understand of returns is actually.... return. I mean: What does it do? and what's the use of it? The book is pretty confusionary on that, maybe because i'm not a native english speaker.
Well, you could split functions into two categories: "subroutines" and "mathematical functions". The former category wouldn't have a return statement, and would only serve to split code up. In the case of the latter, a function receives a set of parameters and produces (returns) a set of resulting values. The body of the function performs some sort of computation. For instance, consider the standard mathematical operators `+`, `-`, `*`, `/`. You could compare these to functions that receive two arguments each (a left and a right operand) and return the sum, difference etc of those arguments. The other important thing about `return` is that it might not be the very last thing in a function. As soon as a `return` statement is executed, the body of the function stops executing and execution jumps back to where the function was called. There is one additional thing about `return`, which is the possibility to return multiple values. This is quite rare amongst programming languages, and you don't have to worry too much about it until later I think. Edit: Oh, and I should add: "subroutines" are only useful if they somehow alter things outside of the function. The nice thing with splitting up code into functions that only do a computation based on their arguments to produce their results is that you don't have to keep as much in your head when debugging that part of the code--you can focus on just that function instead of keeping all the things outside of the function in mind too.
Fireyfly has some really good points here. I would like to add on that functions also exist to make code more readable. Example: (This calculates the scrollbar percentage:) var ScP = (scrollbar - 300) &gt; 0.01 and (scrollbar - 300) / (290) or 0 So, what does this mean, and what does it do? This would be unreadable crap-code to me. If i came to this code as a new "reader", I would have no idea. It definately has something to do with the scrollbar, but I have no idea what 300 represents. We'd have to look up what 300 means (probably by changing it and recompiling, and trying to find any changes). And we'd have to follow the code for a while to figure out what scP actually is. Also, this is used in 3 different places in the code, in different places... (which means, every time youd want to change how its calculated, youd have to remember all the places to do it in. Fine when you write it - but how about 3 months from then?) Compare it with this: local function GetScrollBarPercentage(scrollbar, scrollbarRightX, scrollbarLeftX) local actualScrollPosition = scrollbar - scrollbarLeftX local actualScrollbarWidth = scrollbarRightX - scrollbarLeftX local scrollInPercentage = actualScrollPosition &gt; 0.01 and actualScrollPosition / actualScrollbarWidth or 0 return scrollInPercentage end Here we have clearly named variables, we know exactly what we get out of it and we dont really have to bother with what goes on inside the function since the name obviously tells us what it is. Also, if ever need to change the scrollbar percentage calculation we only need to do it once. AND, since we dont use any global variables we can re-use this code everywhere without creating code bloat. 
Have a goal. Think of something you want to accomplish, then accomplish it. I learned Lua because I wanted to write [Renoise scripts](http://www.renoise.com/tools). Maybe one day I want to make a [smartphone app](http://www.coronalabs.com/products/corona-sdk/), or a [WoW script](http://www.wowwiki.com/World_of_Warcraft_API). Without immersion, learning a language is pretty useless. [Nothing will make sense until much later anyway](http://norvig.com/21-days.html). Hasn't stopped anybody, ever. Good luck. 
He /r/lua. This is a game I built 7 years ago for a local hacker meeting (http://entropia.de/gpn). We tried to combine programming and gaming. It worked well. The game is based on a patched version of Lua 5.1. The complete game is open source and available on github: https://github.com/dividuum/infon. Feel free to ask me about it, if you have any questions. 
It's a proper noun, not an acronym. Always "Lua", never "LUA" or "lua" or "LuA" or "LUa" or "lUA" or "luA" or any other combination. :)
I wanted to make something with CryEngine but i can do something on ComputerCraft too, just for training, what do you think? I'm actually stuck at the simplest of the problems ( A loading text with dots) i mean, i can't figure out how to make something like this: Loading Loading. Loading.. Loading... Loading But in only one line, isn't that actually ridiculous? i mean
This might be the problem: The program you have written closes instantly as soon as the code is executed. You need to tell it to wait for your command to close. A way of doing this is by adding an empty io.read() to the end of your program. My Hello World example: io.write("Hello World") io.read() By adding the empty io.read, you're effectively telling the program that it closes only when you hit the enter key.
What environment are you developing in? Try to use a Wait/pause function?
Start the program from the cmd by navigating into the folder the script is in (or in explorer, shift+right-click, I think, then "open CMD here") by typing "lua yourscript.lua" or something to that effect. The issue is not with lua or your scripts here, the issue is that your command-line window is configured to close automatically once the script has finished. That's unfortunately just how the command-line on window is made to work.
This module offers a standard preprocessor for C code in pure Lua. At some point people will have to stop using this term when talking about LuaJIT. This library is either not ready or needs the definition changing, if you use PURE Lua it will error FFS it is even released under the LuaJIT license? Then there are links to LuaJIT website yet not for Lua. Take your FFI and shove it as far as you can, it is not Lua and will never will be.
&gt; if you use PURE Lua it will error Sorry, I just tried some simple cases and it works fine with PUC Lua. Try again. &gt; it is even released under the LuaJIT license Oh, you mean the MIT license, the **exact** same license PUC Lua is licensed under? Then yes, it is. (Read as, all three use the same license.) So, try (yet) again. &gt; there are links to LuaJIT website yet not for Lua. Oh look, you got one for three. *slow claps*
Would you like a hug?
Ok lets play this game. &gt;Sorry, I just tried some simple cases and it works fine with PUC Lua. Try again. https://github.com/willsteel/lcpp/blob/master/lcpp.lua#L801 &gt;Oh, you mean the MIT license, the exact same license PUC Lua is licensed under? Then yes, it is. (Read as, all three use the same license.) So, try (yet) again. No I mean some fictional license call the LuaJIT license, there is a LuaJIT license and yes it is the same license used by Lua but it is called the MIT license, actually most people that refer to that license don't actually mean that one but anyway. &gt;Oh look, you got one for three. slow claps Sorry you got Nil points, please do not do a Russia complaining that it is a fix and points have been lost. 
Since Lua executes in a single thread, how does this work? You don't seem to be starting a new lua VM for each thread, so what is actually happening in the background? I can see this being useful if you spawned off a completely new VM, but if it is somehow running in the same VM, I see a few problems. How do you do locking? Is a variable set atomic? How are interrupts handled? Maybe I don't understand the lua_newthread API, can you shed some light on that?
I shouldn't have fed the troll...
Thanks!
nice one. I've been looking for something like this, I only have a passing knowledge of C and very little C++ so has been a bummer to erect the OpenGL scaffolding from scratch, especially if I "just" want to play around with shaders for now
yup, that's lua. next you might try factoring the repetition out - factored, it should look like a data structure expressing the map, and a procedure or two.
I wrote this a while ago. [blog post](http://www.animal-machine.com/blog/2012/12/basic-opengl-2-0-tutorial/) Hope it helps.
Welcome to Lua :) This code works, so congrats! Moreover you got a common Lua pattern right: building a state machine as a series of functions that call each other. It is a good idea to do this in Lua because it has tail calls, not so much in languages that don't... That being said as Johnicholas said you could refactor this a lot. I know you don't like Github but it helps to explain refactorings so here you go: https://github.com/catwell/refactor-small-lua-game/commits/master I didn't change functionality (except I removed a trailing comma in the name of Room 4). Making input case-insensitive is left as an exercise (hint: http://www.lua.org/manual/5.2/manual.html#pdf-string.lower). Have fun with Lua!
Thanks! And what is the wormhole you re talking about?
Wow! Thanks for all the help! I will have to improve on it and I will keep you guys updated! Edit: And even though I don't like github its fine. It doesn't piss me off that much.
Seconded. You might also want to abstract things a bit. For example, abstract the input loop in case you want to allow synonyms or filter certain sentences. Things like that. However, as a first script this is fairly decent.
If you go east and then west you end up in a different room. I don't think you can draw a real map of the rooms
The only way to do so is to put 3 directions. I will work on a map and shit to do Edit:[BOOM! Shitty map MADE!!!](http://i.imgur.com/hez4zBR.png)
Here's a slightly more complicated script: [Module:Convert](http://en.wikipedia.org/wiki/Module:Convert) Here's the list of all Lua scripts ("modules"): [Special:AllPages&amp;namespace=828](http://en.wikipedia.org/w/index.php?title=Special:AllPages&amp;namespace=828)
I'm probably just too new at this stuff to get it but...What exactly could this be used for? Is it just an alternative way to display wiki pages? Is it a javascript alternative?
First you must understand [what MediaWiki templates are](http://www.mediawiki.org/wiki/Help:Templates). Then you can [read more about the MediaWiki extension](http://en.wikipedia.org/wiki/Wikipedia:Lua).
The #1 thing to learn is that its Lua and not LUA
Am I missing something? Can't you just use lua itself for a data format?
You can, but sometimes it's good to have limitations. Lua is pretty lightweight, but this is *even more* lightweight, if that matters (it likely doesn't). With LON you can be guaranteed that when you read in user data that reading it will terminate (no infinite loops or crashing) and that no malicious code will be run, and you can know that it won't muck with your existing lua_State if you have one. 
The method I use while not being 'more lightweight', nor guaranteeing termination solves the other points. To preserve the state and prevent malicious code from being run I use a new environment table for loading/running the data file. e.g. dat.lua: abc={x=123} program: data=loadDataFile("dat.lua") print(data.abc.x) 
[lcl - Lua command line](http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lcl)
Awesome! Well you know league of legends? A want to make timer. So a program with small grafik on top of all other windows and some sound to announce things. 
Repo is [here](https://github.com/odhranroche/autograph). Hope this is useful to somebody, feedback welcome!
https://gist.github.com/rorydriscoll/1854656 Sublime Lua build system - run your script with ctrl+b. Handy !
Me too, but just pressing Ctrl+B is way faster thant alt-tab/up/enter or alt-tab/!!/enter in the long term. You can bind any shortcut in sublime, so if you want your make/make run/make test triggered with two keys, that works.
&gt; The first this to do is change our directory (the double backslashes are required for R) Minor point: The "required" part is not true. Single forwardslashes work on Windows the same as on Unix. I do this kind of thing from LuaJIT by calling R using [RInside](http://cran.r-project.org/web/packages/RInside/index.html). I pass a block of R code as a string to R. Are there advantages of your approach over doing that? It seems what you've described is more work but maybe I'm not seeing the whole picture.
Great job, I'll test this out with MoonScript later
Thanks. Don't expect it to be fast, though. Validating its own source code (~85,000 characters) using the "[LPeg recipe](http://lua-users.org/wiki/LpegRecipes)" takes 5 seconds on my Core i5. Down to 250 ms with LuaJIT (and 40 ms using LPeg).
Here's what you do: 1. Pack all of your files in a .love file. [See here on how to do that](http://love2d.org/wiki/Game_Distribution). 2. Go to the [LรVE forums](http://love2d.org/forums/). 3. Register for an account. 4. Go to the [Support and Development](http://love2d.org/forums/viewforum.php?f=4) forum. 5. Make a new topic, give it a good name, explain what you're trying to do and add the .love file as an attachment. 6. Wait for an answer.
Assuming this is Lua 5.1, your problem is you used `_g` where you should have used `_G`.
Is `Object.lua` your own code? If so, can you show it to us?
formatted: Error Object.lua:21 attempt to index global '_g' (a nil value) stack traceback: Object.lua:21: in function 'draw' main.lua:24: in function 'draw' [string "boot.lua"]:410: in function &lt;[string "boot.lua"]:373&gt; [C]: in function 'xpcall' Most probably it's what /u/eridius said, variables in Lua are case sensitive.
Yeah. In this case, it wasn't necessary, (though Gen424 did take it to the LรVE forums and was helped there) but generally lovers can debug LรVE games much quicker than general /r/lua, because they know how to run .love games. It matters more for harder questions than this, but I've gotten in the habit of saying "upload a .love, help us help you" even when it's not needed.
I'm not sure how you are handling collisions, but you should be able to check if the object you are touching is of class 'coin' or has a label set to it that tell your listener to just return and not explode the ship.
from PIL: &gt;A return statement returns occasional results from a function or simply finishes a function. There is an implicit return at the end of any function, so you do not need to use one if your function ends naturally, without returning any value. Why would I need that? Does it mean if I call a local variable in a function, then return it, it becomes global? **WHAT DOES THIS MEAN** I'm probably overthinking things again.
When you return a value from a function, that value then becomes local to the scope *in which you call it*. In other words: function x() return 3 end function foo() local y = x() -- y is now local to the scope of foo() end It becomes global only if you make it global, so it is assigned without the "local" keyword. This next part might be a little inaccurate: Local variables are kept on the stack, and when you assign a return value to a variable, that variable contains a reference to the variable on the stack (either that, or copies it). I'm almost sure. Please read more into PIL, this is all explained better than I can.
It ends the function, and whatever values you list after the return keyword are pushed back to where the function was called. Uhh, to think of it another way, way back in the 70s and 80s there was a popular language called Pascal, and in pascal you defined code in two possible ways: as procedures and as functions. Procedures was just a block of code. You start a procedure, it runs, and ends. Procedures were things like: write a line of text on the screen. Make the speaker click. This is the way you're thinking right now, and why the return keyword seems odd, because procedures end on their last line. Functions are blocks of code, but they tell you something. What key did the user just press? What's the square root of 25? See, functions are for answering a question. And the way you give the answer is that you __return__ it. And the way you get that answer to use it, is you write an expression. `x = square_root(25)` is an expression. So, why do you use a return? Lets say you have some interesting function that'll tell you something different based on what you ask it. What's my favorite colors? (Silly, but good for demonstrating) Well, lets write a function that can tell you the rank of how I like each color: function get_favorite_color(x) if x == 1 then return "red" elseif x == 2 then return "blue" elseif x == 3 then return "green" elseif x == 4 then return "yellow" else return "purple" end end See, what the return keyword does is it ends the function, but also answers the question. And the way you use that function, is with this expression: `inmatarians_second_favorite_color = get_favorite_color(2)` 
Do you know functions from mathematics, such as sine and cosine, work? Functions in programming languages use the same idea and notation: sin(0.3) is the value of the sine function applied to 0.3 and sin(x) is the sine function applied to the value of variable x and so on. An important thing to note is that function applications are regular values and can be used as part of bigger expressions. You do *not* need to always assign a return value to a variable and you do *not* necessarily need to be returning the value of a variable (you can return a constantlike in `return 17` or return the value of some computation `return x + 1`). --you can set a variable to the return of a function local x = math.sin(0.3) --or you can use the function application as part of --a more complex expression --just like a number can be passed to print print( 10 ) we can pass an expression with some function applications in it. print( 2 * (math.sin(0.3) + math.sin(0.5)) ) did that help?
Alright. My head is still trying to get this lol. So if I want to do this print(math.sin(3)) I would need the "return" at the end of sine to allow me to use math.sin like I would a variable. Otherwise, it'd just say like "function 0011xx124" or whatever. Do I have at least part of it right?
In Lua, names are local or global, not values. Values are just values and can have both local and global names referring to them (as well as tables, either as key or value).
here is a simple example : imagine you want to make a function to add x and y like this function add(x, y) z = x + y end here, z is a variable that never goes out the add function, so you can't use it at all : print( add(2, 3) ) will not give you anything. But if you add return z juste before the end of your function, add( 2, 3 ) will be replaced by the value of z and then, it will be equivalent to print( 5 ) which shows "5" on your terminal.
A bit more in depth: function add(x, y) local z = x + y return z -- Or you can just return x + y end local foo = add(3, 2) -- foo = 5 local bar = add(foo, 10) -- bar = foo + 10 = 5 + 10 = 15 print(bar) -- Will display 15 -- You can achieve the same result with: print(add(add(3, 2), 10)) 
Just a comment on why PIL isn't helping. It's intended for people who already know programming, and they will already know what return does.
Yeah =/ I've been trying to teach myself using the online version of PIL, random tutorials I find here and there and the lua-users.org pages. I've found most of them sort of expect you to have some prior programming experience and don't go into details about the basic stuff. Which is annoying because if the tut says "just put return a at the end" I'm not going to do it. Because I don't know what it does. I've yet to find a tut for legit beginners.
Soo it's basically useless then. Just a simple interface to use instead of the --server flag. Can't you also add a server to your LuaRocks source list anyways?
Super excited about the CLI to upload. I prefer Moonrocks if only because I can deploy on my schedule, instead of posting to a mailing list (not to degrade vanilla Luarocks - what Hisham does is a ton of work, and has caught errors in my code before.) Moonrocks brings Luarocks closer to the environment that Ruby enjoys with its Gems and Node enjoys with the lovely NPM.
You can do that in vanilla LuaRocks by editing the config file... or am I missing something?
Its main feature is to allow the unchecked and unverified upload of malware to Moonrocks, too.
thanks for that link, some very useful stuff on there. The conditional part looks especially interesting!
i'll give this a go, I have a vague idea how that would work in Lua. I'll have a stab an see what happens. Cheers 
Incase anyone else was stuck with this, I found a forum Q&amp;A that seems to explain and solve my problem. http://forums.coronalabs.com/topic/34502-need-help-with-basic-collisions/
Probably should say xpost www.reddit.com/r/programming/comments/1h0wuv/learn_lua_in_15_minutes/
You're right indeed. Sorry. Found the link from HNews and missed the post in r/programming.
There are a few more here: http://learnxinyminutes.com
I still have my bots. Amazing game. 
You can access all (also unnumbered) keys of a table using the `pairs()` function. However, you would probably have to sort these keys afterwards manually but I think you can handle that.
But to do a for loop that doesn't get numbered entries, but all entries, numbered or like t.a or t.b, what do I do?
 for _,v in pairs(t) do print(v[1]+v[2]) end In this case, v is either t.a or t.b, and then it just gets the index of those tables to add together.
for i=1,#t do print(t[i]) end internally, they are numbered. You can still use a numbered index without a fancy iterator or any other hackery.
I don't think this is true, please correct me if I am wrong: Lua 5.1.4 Copyright (C) 1994-2008 Lua.org, PUC-Rio &gt; t = {} &gt; t.a = {1, 2} &gt; t.b = {4, 6} &gt; for i=1,#t do &gt;&gt; print(t[i]) &gt;&gt; end prints nothing where as: &gt; for k,v in pairs(t) do print(k, v) end a table: 0x7fbf68c0bb70 b table: 0x7fbf68c0be60 prints the values.
Is there a performance boost by using the dummy variable instead of leaving it as the traditional i?
double equals instead of single equals for the 'if/elsif' conditions roll = 6 to roll == 6 edit: here's a silly way to do it: roll = math.random(6) rollComment = {[1] = 'Congratulations', [6] = 'better luck next time'} print(roll) if rollComment[roll] then print(rollComment[roll]) end 
I'm pretty confused as to what your question meant as well - if you tell me what programming language(s) you are used to it might help. 
That's how it always is, period. Use double equals for tests when using variables or constants. if 1 == 2 then assert(false, "math is bugged") end
One equal sign is the assignor operator, as demonstrated below: local Variable = 35 print(Variable) --&gt; 35 Two equal signs is a comparator, and will 'return' a boolean value, as demonstrated below: local Variable = (25 == 25) print(Variable) --&gt; true or if 25 == 25 then print("25 equals 25") end --&gt; 25 equals 25
I think its pretty safe to assume a code question in the Lua subreddit is in lua. Also: &gt;I'm sure I'm just missing something obvious, as I'm very new to lua.
er, i meant which programming languages he had used in the past? I'm confused, because the wording of his introduction &gt; as I'm very new to lua. implied he's used a programming language before; this combined with being used to using a single equals instead of double equals, suggests he's used to a 'minority language'....i'm probably overthinking this though
math.random doesnt generate a random number, when the program quits it will output the same random number. instead you should use math.randomseed(os.time) first.
Nope. It's just to show which variable is relevant in this example: In fact, Lua does let you use _ as an actual variable, instead of nuking any value it is set to like in some languages.
As others have pointed out Lua uses different "equals" symbols for assignment and for equality testing. Lua is not unusual in this. It's one of those ideas that language developers get into their heads. Some languages are like Lua and use: roll = ... if roll == ... But other languages use: roll := ... if roll = ... I'm sure this causes confusion for many people when they first learn a new language. Why don't all languages standardize to: roll := ... if roll == ... Back when I was first learning BASIC it was very simple: ROLL = INT(RND(0)*6)+1 IF ROLL = 6 THEN There was never any confusion about which to use, and the interpreter knew what you meant. Of course, even back then FORTRAN (now written Fortran) used: roll = ... if (roll .EQ. 6) ... It's one of those ideas that language developers get into their heads that doesn't make things easier. It's like "print." You used to *tell* the computer to print a string, and used quotes to tell it where the string started and ended: print "Hello, World!" But then language developers got the idea that print wasn't actually a command, but a function, needing parentheses: print ("Hello, World!") How does that help anyone? By the way, you left off the second quotation mark in one statement. No doubt you were distracted by the upcoming parenthesis: print("Better luck next time") Some language developers are so adamant that print is a function that they name it printf. That's not even a word. How do you pronounce that? And you're supposed to write printf() just to *prove* that you know it's a function. It's insanity!
This is great (but it reminds me why I hate lua...). Nevertheless, thank you muchly. So much is clearer.
printf means "print formatted" and is different from your standard print. as far as it being a function goes it is simpler and therefore far more flexible to have it as such than to have it as being some sort of "command" presumably with its own special semantics. Furthermore, print "Hello, World!" is entirely valid Lua code.
Thanks. I'll look into it.
I like [telescope](https://github.com/norman/telescope), maybe you will too.
According to [this](http://computercraft.info/wiki/Turtle_%28API%29), "excavate" isn't a member of turtle. You might be looking for "dig", "digDown", etc.
According to their docs, you need to use "io.read()". You can either use that, or put "read=io.read" at the beginning. Sounds like an interesting program. I really need to try out minecraft.
yea i realized this now now im using shell.run("excavate") but still dont know how to bring in how bing to excavate 
do you have a link to the website that you read this off of?
http://computercraft.info/wiki/Guess_The_Number_%28tutorial%29
I looked at the "turtle" stuff.. can it only detect the block directly ahead? Can the bots talk to each other? Programming a bot in any situation is easier said than done, that's for sure. It's really nice if it has some path finding built in.
&gt; I looked at the "turtle" stuff.. can it only detect the block directly ahead? It can detect up or down as well. But simply detecting that you're near obstacle is of limited value. You really need to know *what* you're run into (dirt? a tree trunk? tree leaves? a rock wall?), and that's where their implementation falls down. 
I'll rephrase : all of my block detection problems could be solved this way. If you want to operate on entirely unknown environments you need more advanced block detection. I think aperture science turtles offer that kind of functionality. In all my use cases though I was able to make enough assumptions about the environment that I didn't need full blown block detection. You need to think outside the box. 
&gt; You need to think outside the box. \*lol\* Black-listing rather than white-listing isn't "thinking about the box", it's the *obvious* workaround. And as you already admitted, it wouldn't solve my problem. It's not that I *couldn't* (due to lack of "out of the box" thinking) have lowered my expectations and built a rather stupid bot that didn't do what I wanted it to, it's that I didn't want to. In other words, it's not possible to build the bot I want because of problems in Computercraft and I'm not willing to settle for less. 
&gt; I meant that you have to re-frame the problem in a way that allows you to work within the confines of the mod. Your example is not "re-framing" the problem, it's giving up and choosing a different problem. &gt; What were trying to do ? Just what I said: write intelligent, discriminating bots. For instance, we have farming areas all throughout our town, almost as landscaping. I wanted to write a bot that roams and around farms these things. Broken detection routines disallow that. I could write a moronic bot that brute forces a rectangle, but that's too trivial to be interesting. One of the first things I tried to write was a bot to trim a certain percentage of leaves off trees around town. Again, broken detecting routines disallow that (i.e. I can't white list the leaves, and I can't black list *everything else in town*). I could write a moronic bot that brute force farms leaves in a rectangle out in the boonies somewhere, but again, that's not the problem I want to solve and \*yawn\*. I imagine if someone's never coded before, getting any crude robot working would be fun in its own right. I'm developer for a living, I've been using Lua for nearly a decade, so there's no reward in figuring out the anemic API and getting a bot to do simple tasks.
 if ply:Team() == 1 then if ply:IsUserGroup("user") then ply:Give("weapon_glock") elseif ply:IsUserGroup("admin") or ply:IsUserGroup("CoOwner") or ply:IsUserGroup("Owner") or ply:IsUserGroup("Donator") then ply:Give("weapon_deagle") end end hook.Add("PlayerSpawn", "giverankedWeapon", giveWeapon) 
Where is giveWeapon defined?
You haven't defined giveWeapon anywhere. I replaced it with an anonymous function here that contains the rest of your code. I'm assuming that's what you meant. I'm not sure how your usergroups are set up, but it *might* be possible that the player is a member of both the "user" group and the "admin" group at the same time. In this case he would only get a weapon_glock since the elseif isn't run if the first statement is true. I switched them the other way around so this can't happen. hook.Add("PlayerSpawn", "giveRankedWeapon", function() if ply:Team() ~= 1 then return end if ply:IsUserGroup("admin") or ply:IsUserGroup("CoOwner") or ply:IsUserGroup("Owner") or ply:IsUserGroup("Donator") then ply:Give("weapon_deagle") else ply:Give("weapon_glock") end end)
So do i have to edit something in this? 
Or add something 
Where have you looked? The [Wikipedia](http://en.wikipedia.org/wiki/Lua_%28programming_language%29#Applications) has a non-exhaustive list of applications that use Lua, some of them fairly new. So yes, Lua is still widely used. The impression that it isn't may come from the fact that it's usually used as an internal scripting tool. You won't find many applications written purely in Lua, that's just not the intended purpose.
In game dev yes. Personally I use it as a study tool. Whenever I want to better understand something outside the scope of work I try to make the solution in lua.
Lua is a language that is easy to "white-label" - a lot of people are using lua deep in their apps.
lua can be used with the redis database quite extensively, allowing to call your lua scripts that inside the database, to an extreme allowing you to basically make your own database inside of redis.
well i had hoped to replace java or python with lua for general programing
Lua is not as "mainstream" as languages like JavaScript, Python, or Ruby, but I see it appearing as a core component of some widely used, and lesser known but interesting projects: * http://redis.io/commands/eval * http://blog.cloudflare.com/pushing-nginx-to-its-limit-with-lua * https://blog.wikimedia.org/2013/03/14/what-lua-scripting-means-wikimedia-open-source/ * https://code.google.com/p/clink/ * http://lumail.org/ 
Kudos for mentioning. Been using Busted for couple of months. Couldn't find anything else fitting my needs :) 
what ive seen is that a lot of it isnt still in active development
yes this is something i heard before but honestly im not exactly sure what that means. I studied many languages but never really built anything more then a 100 lines of code. Can you explain what exactly this means?
It's possible that the library just hit a point where it was relatively stable and hasn't needed to change much (because Lua hasn't changed much since 2006 when 5.1 was released.)
Yes
the issue im having now is that i cant find a good lua tutorial where they break down each concept and give you an exercise. That was the one good thing i found a great book on python and it was easy to follow. I just gave up when it came to objects
There's always [Programming in Lua](http://www.lua.org/pil/) I've also thumbed through [Beginning Lua Programming](http://www.wrox.com/WileyCDA/WroxTitle/productCd-0470069171.html) I don't think either are really what I'll call an exercise driven self-study book. They do both, however, cover the language with examples throughout. There are [other](http://www.amazon.com/s/ref=sr_nr_n_1?rh=n%3A3952%2Ck%3Alua&amp;keywords=lua&amp;ie=UTF8&amp;qid=1374177573&amp;rnid=2941120011) books on Lua as well.
not really those are the only only lua books. I know ive looked and online the information in that sense is sparse too.
Well, the third link is a an amazon search of Lua. You can see it has Lua Programming Gems, and quite a few others that cover specific topics (e.g. Minecraft/ComputerCraft, World of Warcraft, Corona SDK, and a couple others)
but wouldnt i need to know lua before i got into anything like that? 
Also, one of the first searches for *Lua tutorial* was [The.Lua.Tutorial](http://luatut.com/) I'm not really sure what you're after at this point if PiL et al don't work for you. --Edit-- Is it more that you're looking for a book/tutorial on Lua that's targeted at someone needing to learn their first programming language?
I think it would depend upon the book. I think some tend to have a language "crash course" and then cover pretty specific topics.
there just arent a lot of lua beginner things available unlike python or java or some of the more common languages where you have so many options to pick from. It is very disappointing, why dont ppl write lua books?
It could be in part because it's a relatively niche language (don't get me wrong, it's one of my favorites none-the-less.) As quasi-proof of this: [TIOBE](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html)
I'll try and make some time over the next few nights &amp; weekend. Hopefully I'll have something at least very basic by Monday.
thanks thatd be great
actually i looked at the chart when picking a language to learn but everything is full of objects. so many, everywhere.. 
You can't just tell it to call excavate(), that's something you have to make yourself. What you'll want to do is ask for a length width and depth and assign them to variables. Then you will have to make your own excavate() function and you'll have to make it keep track of the distances you input.
&gt; Problem is I'm not entirely sure if it works Test it, in a standalone Lua interpreter, outside of WoW. &gt; "[%w]+/-)" This is a "pattern", Lua's version of regular expressions, and it happens to be hopelessly broken. The pattern you want is "%w+" which means "1 or more occurances of a word character". Also, I shouldn't be doing a linear search for keywords. You want to use a hashtable, and Lua is practically built on them. You should also force the message, or the words you parse out of it, to lower case so that if you have the keyword "shit", you'll also match "SHIT", "Shit", etc. You need to arrange that AGTkeyword is a table where the keys are the keywords themselves. For example: message = "This is a message contained foo, bar and foobar." AGTkeyword = {} AGTkeyword["foo"] = 1 AGTkeyword["bar"] = 2 for word in message:lower():gmatch("%w+") do local index = AGTkeyword[word] if index then -- do something with the keyword end end 
&gt; If I stored multiple things in the table per index (for example, the key and also the response), how would I pull other parts of the table out? Would it be like AGTkeyword.response or something? If you change the format to: AGTkeyword = { ["**NO KEY FOUND** DO NOT TOUCH THIS KEY"] = {Responses = {106,107,108,109,110,111,112, 129, 130, 131, 132}, Selected = false , Q = false}, ["**REPEAT WHISPER** DO NOT TOUCH THIS KEY"] = {Responses = {113,114,115,116,117}, Selected = false , Q = false}, ["YOU'RE"] = {Responses = {6,7,8,9 }, Selected = false , Q = false}, ["I DON'T"] = {Responses = {10,11,12,13}, Selected = false , Q = false}, You then can use: for word in message:upper():gmatch("%w+") do local kwdata = AGTkeyword[word] if kwdata then -- do something with the keyword print(kwdata.Responses) -- etc end end One problem still is that some of the keys in AGTkeyword have spaces in them, so this approach won't work. A linear search through `message` is probably more effective.
I wish the FFI was *easier*, because whenever I want to bind to a complex C library (recently, SDL) I have to go through and explicitly rewrite all of the #defines, make little stub functions for #defines that pretend to be functions, work out #includes, etc. I eventually got it to work by find-replacing every instance of ^#define[ \t]+([^\s()]+)[ \t]+(([^\n"a-z]|x)+)(|/\*\*.*\*/|//.*)\n with enum {\1 = \2};\n then &gt; echo '#include &lt;SDL.h&gt;' &gt; stub.c &gt; gcc -I path/to/sdl2/include -E stub.c | grep -v '^#' &gt; ffi_SDL2.h then find-replaced \n{2,} with \n And even then still had to go through and write my stub functions and fix up a few errors that I couldn't get my regex to handle. Sure, it's easy when library developers choose to make it easy, but when it's hard, it's really hard. I'm sure if my grep-fu were more up to snuff then I could have elided a few of the steps, but the FFI wants heavily for a C preprocessor. Though now I want to write a C preprocessor.
Fantastic, thanks. I don't know how linear searches work either, but that I can probably google.
&gt; If I stored multiple things in the table per index (for example, the key and also the response), how would I pull other parts of the table out? Would it be like AGTkeyword.response or something? The key and value can be anything you want. If the key is the keyword, the value can be the response. If you need to associate more than one value with the key, you can make the value a table. &gt; I've yet to find the information I need to make this actually work [Everything you need is right here.](https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0CDoQFjAB&amp;url=http%3A%2F%2Fscite-ru.googlecode.com%2Ffiles%2FProgramming%2520in%2520Lua%25202ed.pdf&amp;ei=6WXpUf22Jong8wTsvoCICA&amp;usg=AFQjCNGdDlef2mbich6aWObHDjMgWdlYsg&amp;sig2=qZzrCtF5rsmQ9SXw6eooQQ&amp;bvm=bv.49478099,d.eWU) If you're impatient to solve the problem at hand (I can sympathize), you can try the Lua manual. But really, you're going to ultimately waste more time via a trial and error approach than just taking the time to learn the language, IMO. &gt; And also do you have a suggestion for an interpreter? Just grab [whatever works on your platform](http://luabinaries.sourceforge.net/download.html) (e.g. if you're on 64-bit Windows, grab the Win64_bin build). Put them somewhere in your PATH (or add their location to your PATH) and you're good to go. I also wrote a WoW addon called [Hack](http://wow.curseforge.com/addons/hack/) that gives you a syntax highlighted Lua editor in game. I haven't played in years, the addon is abandoned, but it might still work and/or you can find somebody who's taken that code and updated it. 
Hey! Is this an upgrade of Automatic Goblin Therapist? That used to be my all-time favorite addon!
As a matter of fact, it is.
Also you wouldn't happen to know how to do what robin-gvx mentioned and make my search a linear search, do you? I googled it and couldn't find anything. The one he has now could work, but a lot of my keywords are 2+ word phrases, and the search I'm currently using won't pick those up at all. Current search: for word in message:upper():gmatch("%w+") do local kwdata = AGTkeyword[word] if kwdata then -- do something with the keyword print(kwdata.Responses) -- etc end end
&gt; Huh. That doesn't seem that different, actually. It's completely different. For example: message = "This is a test message. patterns = {["a test"] = 1, ["is a"] = 2} ## Approach #1: Iterate through the words of the message and see if any matches a pattern: message:gmatch("%w+") =&gt; "This" "is" "a" "test" "message" Do any of those words match one of our patterns ("a test" and "is a")? No. ## Approach #2: Iterate through the patterns and see if any are found in the message: for pattern in pairs(patterns) =&gt; "a test" "is a" Can we find "a test" or "is a" in the message? Yes. &gt; So if I do it this way I can get rid of :gmatch("%w+)" entirely? Yes. &gt; Fuck I wish I knew Lua well enough to not be constantly bugging you with this. Sorry. You need to actually try this shit out. For instance, run: for word in message:gmatch("%w+") do print(word) end And look at the output. See what these little snippets of code are actually doing. If you're not going to take the time to learn the language via the book, you can still learn enough to get the job done by this kind of small scale experimentation, but you'll never get anywhere just by trying random code. You have to play around with very small snippets of code until they work the way you want and/or have at least a fuzzy understanding of how they work, then compose them into your solution. A Lua table is a hashtable. Java and C++ have hashtables, too, and it's no different here. Java has regular expressions as well, which is roughly equivalent to Lua's pattern matching with almost the same syntax (most regex use `\w` rather than `%w`). 
And don't forget about Corona. A lot of iOS apps are built with Corona and you wouldn't know, since there's no splash-screen or anything else.
No. Pick up a book on programming in Corona. Plenty of examples. They start from scratch too, so teach you Lua from the get-go, not assuming you know the language already. Granted, you'll learn about Corona libraries which won't work in a "normal" Lua setting, but you'll still learn all the basics of Lua. I only skimmed some online Lua tutorials before jumping into Corona development, so had no idea what tables were, et al.
You're trying to find the literal index "x", instead of the actual body. So the third line of your beginContact function should be "units[x].info1 = 2".
oops, that was a last ditch change I made a minute ago, my original code and current code have units[x].info1 = 2 but it still returns "attempt to index field '?' (a nil value). I can't figure out why.
Well someone offered a wonderful workaround over at r/love2d By adding: o.fixture:setUserData(o) everything works fine. Apparently the returnBody() function does not return a value exactly equal to the body :/ oh well.
Yes it should I figured that out an hour ago haha but if you could give me that code I would love you.
http://pastebin.com/h0KQNQgv as far as the ammo issue you can see that they receive ammo, just replace with the name for deagle ammo (look in weapon_zm_deagle or whatever its called)
Awesome now last question is there a way to spawn with a random weapon 
Yep. I just left my computer but basically define a local variable as getting a random value from one of the weapon tables and stick that in the load out. Google is your friend. If you haven't solved it in the next 12 hours ill do it for you. 
You're awesome 
I think what's happening is you're sending the Lua to another player, where the variable "comid" won't exist, and formatting the string there. Perhaps try: calling_ply:SendLua(string.format([[gui.OpenURL("http://steamcommunity.com/profiles/%s")]],comid))
to undermine my own argument: &gt; comid = 76561198062342643 &gt; print(string.format("http://steamcommunity.com/profiles/%d", comid)) http://steamcommunity.com/profiles/76561198062342640 works fine.
you can use the `..` operator too. 'a' .. 'b' == 'ab'
That is very very likely actually, thanks! I don't think that example you did will work but I can probably use sendLua to define the variable for that player. 
Why do you think it won't work?
&gt; I think what's happening is you're sending the Lua to another player, where the variable "comid" won't exist, and formatting the string there. Nope. The `string.format` call happens before the `SendLua` call. That's the way function calls work in virtually every computer language.
**^^ This. ^^** `76561198062342643` can't be exactly represented in 64 bit, IEEE 754 floating point. If you need that exact decimal representation in your string (e.g. if it's an ID for something, as it appears to be), you'll need to store `comid` as a string. 
&gt; 
I think you're running into a scope issue. In other words, what is the value of *comid* in the scope in which the call to *gui.OpenURL* is evaluated? I'm guessing it's undefined and therefore *nil*. Consider the message you appear to be sending gui.OpenURL(string.format("http://steamcommunity.com/profiles/%s", comid)) in the context of the following example. LuaJIT 2.0.2 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/ JIT: ON CMOV SSE2 SSE3 fold cse dce fwd dse narrow loop abc sink fuse &gt; function b(a) return loadstring("return a") end &gt; =b(4)() nil &gt; Note that the result of *loadstring* isn't created in the lexical scope of function *b*, so *a* isn't defined. I'm not looking at the code for Garry's mod, but it looks from your code as if it uses *loadstring* to make a chunk, so scope is a consideration. You could use: calling_ply:SendLua(string.format('gui.OpenURL("http://steamcommunity.com/profiles/%s")', comid)) Here *comid* is evaluated in the scope of the function invoking *calling_ply:SendLua*, and you should get the results you expect. edit: expecting comid to be something that can be correctly mapped via tostring.
Precisely! Chapter 3 of Structure and Interpretation of Computer Programming would prove enlightening here.
Look again, in their post they are sending the string: [[gui.OpenURL(string.format("http://steamcommunity.com/profiles/%s", comid))]] to be run on the players machine, which is where the call to string.format will end up happening.
Actually, yes: From OP: &gt; Right now I have this: &gt; local comid = 76561198062342643 calling_ply:SendLua([[gui.OpenURL(string.format("http://steamcommunity.com/profiles/%s", comid))]]) Please note `[[gui.OpenURL(string.format("http://steamcommunity.com/profiles/%s", comid))]]` is a literal string, one that will be evaluated on the other computer, where `comid` is not a name that exists.
My example should end up sending to the player, using your example id, the string: [[gui.OpenURL("http://steamcommunity.com/profiles/76561198062342643")]] because it formats the comid into the string before sending it to the player. Well, not exactly though, as someone else said, you need to use a different format token, %d, or store the comid as a string. If we replace calling_ply:SendLua with a call to 'print', we can see this quite clearly brachyonic@Tobacco โฎ ~ โฎ lua Lua 5.2.2 Copyright (C) 1994-2013 Lua.org, PUC-Rio &gt; comid = "123456789" &gt; print([[gui.OpenURL(string.format("http://steamcommunity.com/profiles/%s", comid))]]) gui.OpenURL(string.format("http://steamcommunity.com/profiles/%s", comid)) &gt; print(string.format([[gui.OpenURL("http://steamcommunity.com/profiles/%s")]],comid)) gui.OpenURL("http://steamcommunity.com/profiles/123456789") 
Right you are.
&gt; Is it even possible to do this calculation? Not using Lua numbers, which are 64 bit floating point. That's assuming SteamID64 is a 64 bit integer (I'm guessing from the name and usage). The latter can hold much larger integers precisely. You need a [big number](http://en.wikipedia.org/wiki/Bignum) library. Might have to dig to find one not written in C. 
Looks like you're right.
You were merely sending a string before too. I am assuming this is a mechanism for a remote procedure call where a function invocation is sent as a string and remotely compiled/evaluated, and any particular instance of *comid* is an identifier unique across all servers and clients. Where do you expect the call to *gui.OpenURL* to happen? Look! I am trying to help, but I'm not going to do your homework for you.
Before I was sending a string within gui.OpenURL which is called clientside, with your example I think it sent the string "gui.OpenURL(...)" instead of calling it. Look, I don't claim to be a Lua expert which is why I came here, so thanks for your help, I could be wrong, I just know that what you sent me didn't work. Anyway, check the OP. I think I'm going to give up on this for different reasons than the variable issue. 
Googling for *SendLua*, this seems to be a RPC sent as a string and handled, I imagine, with *loadstring()* in a remote client. EricTBoneJackson's comment about exceeding the 52 bit mantissa of a float seems to apply here too. So *comid* would need to be a string or something else that can fully represent the data with an appropriate *tostring* definition in question.
Did you put it in a .lua file in autorun? All you have to do to customize them is replace the IDs and entity names with whichever you want. For a random weapon use TABLE[math.random(table.getn(TABLE))] in place of an entity name. Obviously replace TABLE with primary_wep or one of the table names. I can't really help with lua errors unless you tell me what they are
i saw it earlier im just not sure why you would need a console email client
So negative stack indices are a convenience feature. -1 means 'top of the stack' which would be the same stack index as lua_gettop(). Index 1 is the bottom of the stack, which for a C function called by lua will always be the first argument to the function. Using lua_gettop() to know how many arguments you got, and walking indices [1..lua_gettop()] should get you where you need to be; lua_isstring() and friends can help you disambiguate cases where the number of input arguments is the same. 
I __knew__ the stack was in reverse. Clearly the solution here is to walk the other way round; which makes me feel both enlightened and very very silly. Thanks a lot for the obvious-solution!
I keep every mail I've ever received, since about 1994. No graphical client can be as efficient, and useful, with such a large volume of email. I used to use mutt, now I use my own. Console clients such as pine, alpine, notmuch, mutt, and now lumail, might never appeal to the casual user. But for people with a huge collection of mail and history they're invaluable. Now, thanks to my scripting, I can do interesting things. For example my mail gets filtered by sender. So I might have a folder of mails from "Bob", and another folder/tag of mails from "Steve". In a graphical client can you create a list of only unread messages from those two folders? I can in my console application. That's an example of somethign that is very useful - "SHow me a list of all unread messages, regardless of their folder/tag" - which you cannot do with a graphical client. With that power the lack of the pointy/clicky doesn't seem like such a bad-tradeoff.
well i guess it is a bit of niche application. But why do you have your email from 1994? j/w
You're iterating backwards. `lua_gettop(L)` will give you the number of arguments in the stack, then you can grab them by index: 1 (first argument), 2 (second argument), etc. *** CAVEAT: the last Lua version I coded for was Lua 5.1, and I'm going from memory here, so the API info below might not be 100% accurate, but it'll get you barking up the right tree. 1. There's no reason for you to be parsing numeric arguments as strings. By using `lua_tostring` on a numeric argument, you're forcing Lua to convert the number to a string, which you then convert *back* into a number (`atoi`). You can just have Lua give you the number value with `lua_tonumber`. 2. The header `luaxlib.h` gives you some nice convenience functions for argument processing. You can get `luaL_checkX` (e.g. `luaL_checknumber`, `luaL_checkstring`) to get a required argument, and `luaL_optX` to get an optional argument. 3. Nitpick: `str` is a bad variable name. Is it a message? Name it appropriately. 4. Nitpick: If someone gives you a negative timeout, they made a mistake and probably want to know about it. Silently swallowing the error is generally a bad practice. Given the above, I'd write the function like this: int alert(lua_State * L) { const int DEFAULT_TIMEOUT = 30; const char *message = luaL_checkstring(L, 1); int timeout = luaL_optinteger(L, 2, DEFAULT_TIMEOUT); if (timeout &lt; 0) luaL_argerror("timeout must be greater than 0."); ... } First argument is required (checkX ensure that). Second argument is optional (if not supplied, you get the default). 
i personally dont wanna remember but i did a few years ago worse that long ago
Thanks for the thoughtful reply; the previous commentor already set me straight on the stack ordering. That was a total fail on my part. As for the rest: * Yes "str" is bad, but then again the function is designed to "show a string with a timeout". So on that basis it isn't too horrific. * Error handling needs work. Agreed. * Checkstring I use too, but this is the first pass. I appreciate the example, thanks.
As I am unfamiliar with MoonScript, nginx, and web development in general, a lot of this went over my head, but all of the pieces on display here look really cool. It was pretty easy to follow, too, once I got past my astonishment at the window manager and vim setup. If I venture into web development, I'll be sure to check this out.
I didn't really mention this in the video but you can use Lapis with plain Lua as well: http://leafo.net/lapis/reference.html#lapis-in-lua I just haven't written nearly as much documentation for using only Lua.
Lua didn't have something like this for far too long. Congratulations!
You would do yourself a favor by looking through the base libraries. They are usually very concise and a great introduction to the Lua C API.
I wonder how come you didn't announce this project on the mailing list ? Have you found that its worthless to do so in general ?
I never used coroutines to build a game, specifically, but I did use them once to implement asynchronous IO for a small server. Essentially, I would have a central loop that ran my coroutines and I wrapped all my IO with code that would yield back to the main loop in case something blocked. One problem I had was how to best handle the scheduling between the coroutines. One thing you can do that helps is returning some extra info to the main loop when you yield -- on coroutine coroutine.yield({tag="WRITE_OP", socket=...}) -- on main loop local ok, data = coroutine.resume(coro) but in my case the different coroutines could contain very varied code and I never managed to find a scheduling algorithm that I was 100% satisfied with. In your case you know beforehand what code your coroutines will have so its probably not that bad. To sum things up, I prefer to see coroutines as an analog to iterators and generators (like those you have in Python). You can still do anything you want without them but in order to do so you need to write your control flow inside out and keep track of complex state machines by hand. ---- btw, it would have been easier to read your code if you formated it in a code block. Just indent everything by 4 spaces.
The scheduling between the coroutines is already solved; like I showed in my example, they just act like regular functions, and can pass arguments and return values back and forth to C++. The engine keeps track of the yielded coroutines and each frame resumes only those coroutines that are ready to be resumed. I've played around a little with the more esoteric uses of coroutines like you mentioned, but in this case I really just want cooperative multithreading, so that's what I implemented. &gt; btw, it would have been easier to read your code if you formated it in a code block. Just indent everything by 4 spaces. I just did, but I'm not sure if it worked. Alien Blue shows no difference.
You could also try the solution that Roblox uses in their Lua scripting system: coroutine.yield is wrapped within a "wait(duration)" function that both adds the current thread to a "waiting" heap based on how soon it will resume, and then calls coroutine.yield. When the engine runs a step every waiting thread that has timed out it's wait is automatically resumed, and runs until it waits again. scripts can also spawn off new threads with a "Spawn(f)" function, or directly add the new threads to the waiting heap with a "Delay(time,f)" function. Typical usage might be something like this: Spawn(function() while not Dead do doStuff() wait(2) end end)
Corona SDK has network.request
There's http.request in LuaSocket: http://w3.impa.br/~diego/software/luasocket/http.html
Thanks ill check it out.
Reading through the document and so far it looks like it has everything and the kitchen sink: memcache protocol support, LuaJIT w/ int64, CJSON, store lua procedures, etc. Seems quite promising, compared even to Redis!
&gt; Take a look at the tutorial/reference. If you're on Windows it's as simple as using LuaForWindows to have that package, otherwise on *nix use LuaRocks. Or [LuaDist](http://http://luadist.org/) :) 
I have experience with Moai, not much with Corona but I have an idea of how it works. An important difference is that Moai is an Open Source SDK with optional associated commercial services whereas Corona is a entirely commercial product. Moai is lower-level than Corona, and more of an engine for professional programmers / studios. That means you will have a lot of power and control, but also a lot of things to implement. For instance, there is no scene library by default, and no high-level UI library as well, so you will have to implement your menu system yourself or pick one of the few Open Source ones that exist. Moai is "young" and backends vary in quality so do not expect to make your game work flawlessly on all platforms only with Lua. You will probably have to touch at least some C++ as well, maybe some Java on Android. The documentation is also not quite there. You will have to search in the examples provided with the framework. The Wolf Clicker example is a good place to start. I also read [this book](http://amzn.to/1317E17) which helped a lot to understand the basics early on. That being said, once you've paid the steep learning curve and written a few utility classes, Moai is a very interesting engine. I encourage you to try it.
Well, if you are wanting to port to Windows &amp; OS X^1 I don't think Corona SDK is going to be an option. Moai has [multiple](https://github.com/ymobe/rapanui) [frameworks](https://github.com/makotok/Hanappe) that make Moai a bit easier to use. ^1. This is a nit-pick of mine because I think it makes a person look unintelligent to use the terms PC to refer to Windows and Mac to refer to OS X. You don't write software for a PC or a Mac, you write software that's for an operating system. 
sweet. looking forward to trying this (and this helps)... but i dont know lua and my hunch is i am going to have to write everything in lapis for next couple years... wat?
the wikipedia article is great for a breif overview and http://www.lua.org/manual/5.1/manual.html will have details. dunno about how to play mp3s but lua has a great c api so that might be a good way to do it (although idk if garry's mod lets you use the c)
Thanks, I'll definitely read that over. I don't think that garry's mod has support for c though, so I'll have to look that up as well.
Very nice! More videos should be made this way.
Thanks! That means a lot.
I appreciate how you got to the point, stayed on topic, and eliminated any visual distractions.
If you have little or no experience in Lua, a good place to start might be the online version of *Programming in Lua*: http://www.lua.org/pil/contents.html Reading through examples of Lua code may also help. Here's a (very long and somewhat intimidating) list of sample code: http://lua-users.org/wiki/SampleCode Beyond that, I won't be of too much help as I've never even heard of Gideros.
Programming in Lua is a good book, but teaches an older version of Lua so some things will be different. Keep the manual of your version of Lua handy. Also a good place to learn would be the [Lua-Users Tutorial](http://lua-users.org/wiki/LuaTutorial). I don't know much about Gideros but doesn't it only work on mobile platforms?
Yes- Gideros is a game engine designed for mobile platforms. It gets a lot better reviews than Corona, another mobile game engine. Should I begin learning Lua from scratch, then? Caglow (the poster above you) did not seem too familiar with mobile game development.
Tackle one thing at a time. First you need to learn Lua and Love is great platform for that. Even though Gideros is your goal, I think Lua Love should be part of the path. Love is a great way to quickly prototype little games. * Read this, then type it all in and run it. http://learnxinyminutes.com/docs/lua/ * Install Love, https://love2d.org/ (get the installer and the demos.zip) * Read through the tutorial and wiki, http://www.love2d.org/wiki/Main_Page * Keeping a copy of the Reference Manual close at hand, http://www.lua.org/manual/5.2/ Read the source to all of the demos, you can unpack them and then run, love sinescroller `.love` files are zips that contain lua code and assets. unzip -d sinescroller sinescroller.love sinescroller โโโ bluefont-2x-vflip-gradient.png โโโ bluefont-2x.png โโโ conf.lua โโโ labyrinth.mod โโโ main.lua โโโ planetfont.png โโโ star.png 
Thank you so much!
[i enjoyted this](http://tylerneylon.com/a/learn-lua/). good luck!
Corona has a fare amount of sample code to look at, and decent documentation if you get stuck. * Where do you see gideros getting better reviews? *(I work at Corona Labs)
Hey seanhead. Before I jump in, let me go ahead and say that as a newbie, there are 2 things Corona has done much better: create a web presence (I've seen another Corona member respond to a Gideros blog post somewhere) and created better documentation (though this is to be expected since it has a few years on Gideros). Here are a few of the articles that made me lean toward Gideros, in addition to a lot of chatter on forums. * http://www.gamefromscratch.com/post/2012/09/21/Battle-of-the-Lua-Game-Engines-Corona-vs-Gideros-vs-Love-vs-Moai.aspx * http://howto.oz-apps.com/2012/02/coronasdk-might-be-good-but.html * Some comments here http://gamedevnation.com/game-development/moai-or-corona-which-sdk-for-you/ * http://pushpoke.com/2013/02/why-did-we-choose-gideros/ To put it bluntly, it's apparent Corona is very good, but there's literally one (_maybe_ two) instances I've read where someone ranked Corona over Gideros - on reddit and a blog post (one of the ones linked above, actually) 
Thank you, but I am still having trouble understanding this. from the guide with my intepretation: function fact (n) -- Defines a function (fact) and its one parameter (n) if n == 0 then -- If n is 0 then return 1 -- output 1 else --if not return n * fact(n-1) -- output (n) * the factorial of (n - 1) end end print("enter a number:") -- prints text a = io.read("*number") -- Sets variable (a) to user input. What is the point of *number though? print(fact(a)) -- I don't understand this. How can it print fact if it does not know what n is?
 function fact (n) -- Defines a function (fact) and its one parameter (n) if n == 0 then -- If n is 0 then return 1 -- RETURN 1 else -- if not 0 return n * fact(n-1) -- RETURN (n) * the factorial of (n - 1) end end print("enter a number:") -- prints text a = io.read("*number") -- Sets variable (a) to user input. What is the point of *number though? print(fact(a)) -- I don't understand this. How can it print fact if it does not know what n is? I fixed a few of your comments inside `fact`. &gt; a = io.read("*number") -- Sets variable (a) to user input. What is the point of *number though? That tells `io.read` *what* to read. This is covered in the manual and the book. &gt; print(fact(a)) -- I don't understand this. How can it print fact if it does not know what n is? `fact` is a function that *returns* a value. For instance: function add(a,b) return a + b end This defines a function `add` that takes two parameters and *returns* their sum. We can use it like this: print(add(10,20)) print(add(333,72)) When you call `add`, the variables `a` and `b` receive the values you passed in. That's the point of functions -- they allow you to take a bit of code and *parameterize* it, so it can be different values with which to perform some computation. `fact` is passed value, which appears as `n` within `fact`. This is covered in Programming in Lua. 
Oh I see, thanks for explaining even if it's in the guide. But is it covered late in the functions section maybe? The guide is a little hard to read for me, sorry. Mostly because it's assuming a lot of prior knowledge of general programming.
Baaaad blog post, baaad
It's true, round isn't a standard C function and so it doesn't come in the stock libs. But like anything else, what you want but don't have you simply add yourself: function math.round(value, pow) pow = pow or 0 local factor = 10^pow return math.floor(value * factor + 0.5) / factor end local value = 17.123 print(math.round(value)) print(math.round(value,1)) print(math.round(value,2)) print(math.round(value,-1)) Output: 17 17.1 17.12 20
When you do a require, Lua looks for ?.lua, ?.dll, ?/init.lua and other paths. Do you have math_ext.lua or math_ext.dll, and std.lua or std.dll?
This seems very similar to all the other PHP-like "embedded templates" for Lua. Any reason for linking to this one in particular.
Have you ever done any programming? Do you know Lua?
Are you running this in vanilla Lua, or in a game (gmod, wow, etc.)? Most games disable the io and debug library for obvious security reasons.
holy shit why didn't i think of that. I'm running this in WoW. do you know if there's anyway i could do secure file io? all i need to do is file reading, not writing?
After some googling, I wasn't able to find any way to use IO or config loading. You might have to load the config from a Lua table in your source. Someone else might be able to come around and correctly me, though.
no it looks like you're right. I went ahead and hardcoded the info into my file. ugh :( thanks for the help
File I/O is intentionally disabled in WoW. Sorry. :(
Your first stop should be here, to [learn Lua](https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;ved=0CEsQFjAD&amp;url=http%3A%2F%2Fscite-ru.googlecode.com%2Ffiles%2FProgramming%2520in%2520Lua%25202ed.pdf&amp;ei=rAMmUtXyK42wqQHI9YDYCg&amp;usg=AFQjCNGdDlef2mbich6aWObHDjMgWdlYsg&amp;sig2=ebg40Lu7Jpf85p9N2mceWw&amp;bvm=bv.51495398,d.aWM). Then you can work on learning Codea's API and game programming.
Nice - Same license as Lua? 
"Lua depends on Boost C++" I learn something new everyday:) Personally I think your tests are the dog's! they must run in super fast time :)
Lua and C are used in [Torch7](http://www.torch.ch/), a Matlab-like environment for machine learning [Video demo](http://www.youtube.com/watch?v=mQn1QmN7fsY) [Tutorial](http://code.cogbits.com/wiki/doku.php?id=start) 
Does this actually support c++ class binding? 
I'm not done writing all the tests yet. Nice catch on the typo though.
One thing you have to watch out for is if you yield across another c/lua call further up the stack. If you have a C function that calls a lua func that calls a [ C func that calls a lua func ] that calls a C func that yields, it will throw an error. You will need to maintain a one-layer-of-lua-only call stack.
Right - I actually got this for free as a result of my scheduler architecture. The C++ side doesn't start coroutines directly, it can only add them to a queue to start running next frame. So the call stack never goes Lua -&gt; C -&gt; Lua.
I don't want to be a Negative Nancy, but you asked for comments so: When you're adding a layer of [abstraction](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) to something, especially when it comes with an additional dependency and some loss of flexibility, there needs to be a clear win. In this case, you've abstracted away things that the excellent C API already handles well and have not addressed the challenges specific to C++: exposing objects so they can be used idiomatically in Lua. So I don't see the point as it stands. 
&gt; I am not sure how I have not enabled any consumer of this wrapper to use Lua in an idiomatic way in C++. I didn't say that it had not. I was talking about a feature your wrapper doesn't contain: the ability to export *objects*, by which I meant to say instances of C++ classes, so that they can be used idiomatically in Lua. That's the thing most people want when getting "C++ binding" rather than just using the C API. &gt; https://gist.github.com/davidsiaw/6441621 Your "before" code is odd. More typical would be: static int luaPrint(lua_State* state) { const char* str = luaL_checkstring(state, 1); printf("%s\n", str); return 0; } int main() { lua_State* L = luaL_newstate(); lua_register(L, "print", lua_print); luaL_dostring(L, "print 'meow'") lua_close(L); return 0; } Your code is *neat* and probably offers some advantages (automatically marshaling of types?), but also has disadvantages, not the least of which is an additional learning curve. Can it handle vararg functions?
If you could get rid of the boost dependency, I would use this in a heartbeat. Have you considered just copying specific boost headers that you've been using? Good stuff regardless, i'm really looking forward to seeing more milestones, especially involving userdata :)
I didn't say that the wrapper can export C++ classes that you have written to Lua in general. In that case, I am happy to hear your expert opinion. How would you envision such a task be done in C++? Exporting an object from C++ to Lua is almost universally an exercise in code generation (an exception being LuaBind, which requires you to manually take a class and bind the class to syntax, albeit being checked by the compiler which is always good. ) In light of vararg functions, I am skeptical about its usefulness, but you must enlighten me if you think otherwise. I also admit I haven't given varargs much thought. Now if you were to say I should be able to marshal a std::vector/std::array into a table with indexes corresponding to the element position in the vector, I will concur. This is something that should be doable.
I'm not sure how you are going to make a very good IntelliSense - since Lua is dynamically typed and you can add variables at runtime, nevermind following down upvalues, you will have a very hard time getting it working to any passable degree. Make sure to add white-on-black themes. Lots of coders use them to prevent eyestrain and they are a pretty big selling point ;P
Personally I can't live without globals highlighting so I made module for Sublime the other day. Also I think live error reporting is important. Both achievable by running Luac.
(i) You asked me to write _a_ print function and so I did. I even added formatting on top of it to demonstrate how powerful I can make it without having to resort to varargs. I believe I have satisfied that question. (ii) In varargs the number of arguments to the function is hard-coded implicitly. This is due to the fact that when the script runs it will not change over the time the script is running. It can change when the script stops running and someone makes changes to the script. With arrays the number of arguments to the function can change at runtime. That is how "the number of arguments to the function can be modified at runtime" is not true for varargs. (iii) The creation of a table to pass arguments to a function is of no more consequence than the symmetry caused by having varargs. If there is a performance issue the logical next step is to optimize or write the routine in question in faster C++ code instead of Lua. (iv) In response to your question of where is the win: 1. I will repeat my argument with the code I posted earlier (print is only used as an example here. The idea is any function. I also allow C++ lambdas, which carry state along with it, which is much harder to do with C): https://gist.github.com/davidsiaw/6441621 - Automatic marshalling of functions 2. Automatic marshalling of non-trivial types: table.GetFunction, table.GetString, table.GetCoroutine, table.GetTable, table.GetInteger 3. The additional learning curve is slight due to the smallness of the library, and its consistency. 4. The C++ features (constructor &amp; destructor) free the user from needing to keep track of object ownership. This is done for you by the objects themselves which can maintain multiple copies of themselves and keep the necessary objects alive. 5. Simplification of coroutine execution pausing through the introduction of yielding functions. 6. Differentiation of Coroutines from the main routine (from which there are differences, but both are lua_State*) (v) By taking advantage of type-checking with templates and using the new C++11 syntax has to offer, we can more directly do the things we want to do. The win is clear
&gt; You asked me to write a print function and so I did. I meant ["print"](http://www.lua.org/manual/5.1/manual.html#pdf-print), which I thought was obvious, because it's the most used vararg function Lua. &gt; I even added formatting on top of it to demonstrate how powerful I can make it without having to resort to varargs. The addition of formatting has *nothing* to do with it taking a table rather than varargs. It's also rather pointless, given that Lua has a string formatting function. Varargs makes it trivial to write a far more powerful version of printf: `function printf(...) print(string.format(...)) end`. Without varargs we can do the same thing (e.g. `function printf(t) print(string.format(unpack(t))) end`, it's just wasteful. You also didn't address *optional* arguments, which is also trivial to do in Lua. &gt; In varargs the number of arguments to the function is hard-coded implicitly. This is due to the fact that when the script runs it will not change over the time the script is running. It can change when the script stops running and someone makes changes to the script. This is utterly nonsensical. The entire point of variadic functions is that *without changing them* they can take a *non-hard-coded* number of arguments. It would be literally impossible for your paragraph to be more wrong; it's exactly backwards from reality. And yes, in all languages that support variadic functions, you can do pretty much the same thing by passing a array instead. So you should be asking yourself why almost every language has variadic functions *anyway*. &gt; With arrays the number of arguments to the function can change at runtime. This is true of varargs as well. You're literally making no sense. &gt; If there is a performance issue the logical next step is to optimize or write the routine in question in faster C++ code instead of Lua. It was added because it's a performance issue *for Lua code*, and moving the routine into C does nothing to counteract the accumulation of garbage, which is something to be avoided if at all possible in something like a game engine, where Lua is most popular. Also, there is a lot of overhead in calling into C code (in part because Lua has to call make an expensive system call to `setjmp`), so much so that LuaJIT can be several orders of magnitude faster than Lua *unless* you have lots of highly granular calls into C, in which case it offers almost no benefit. &gt; I will repeat my argument with the code I posted earlier Why would you repeat yourself before even acknowledging my *first* response to that? &gt; The idea is any function. Again, I already responded to that. You ignored it. &gt; I also allow C++ lambdas, which carry state along with it, which is much harder to do with C): It's not harder in C: you push the state you want onto the stack and call `pushclosure`. But if it makes it easier to associate *C++* state with an exposed function, than that *is* a win. &gt; Automatic marshalling of non-trivial types: table.GetFunction, table.GetString, table.GetCoroutine, table.GetTable, table.GetInteger This is not a win, it's just more overhead. Why would I care that I can receive `std:string` rather than `char*`? That doesn't buy me anything other than overhead. &gt; The C++ features (constructor &amp; destructor) free the user from needing to keep track of object ownership. The user doesn't need to do this *anyway*, using the C API. Objects are tracked by Lua. &gt; Simplification of coroutine execution pausing through the introduction of yielding functions. How is that a simplification over simply calling `lua_yield`? &gt; Differentiation of Coroutines from the main routine (from which there are differences, but both are lua_State*) Again, in what context is this a win? &gt; By taking advantage of type-checking with templates and using the new C++11 syntax has to offer, we can more directly do the things we want to do. How does it make anything more direct? It is almost by definition *less* direct. 
&gt;&gt;The idea is any function. &gt;Again, I already responded to that. You ignored it. You asked where the win was so I merely re-iterated it. I was at first under the impression that was clear. &gt;&gt;With arrays the number of arguments to the function can change at runtime. &gt;This is true of varargs as well. You're literally making no sense. print (1, 2, 3) Please demonstrate how, by only adding lines to this script how print can recieve 4 arguments: (1,2,3,"hello") 
&gt; You asked where the win was so I merely re-iterated it. I was at first under the impression that was clear. The win was *not* clear. You posted a "C API" vs "My Library" comparison where the C API version was twice as long as needed to be. I said this, showed you the C code that most programmers would write, and you ignored it. &gt; print (1, 2, 3) &gt; &gt; Please demonstrate how, by only adding lines to this script how print can recieve 4 arguments: (1,2,3,"hello") In what context would I *want* to? If I needed to, I could just pack the arguments in an array. In your mind, this means I should force print to take only an array. If a program has a need to manipulate the argument list to print, that's an implementation detail of the *caller*. It shouldn't affect the implementation of `print`. By receiving varargs, `print` can be called *either way*. If I want to call `print(1,2,3)` I can. If I happen to have my arguments in table `t`, I can just call `print(unpack(t))`. Your assertion that "in cases where varargs are useful, using arrays in place of varargs is even more useful" is simply not supportable. As I said in my last post (which you also ignored): you keep arguing that varargs are totally superfluous and in fact inferior to arrays, *yet virtually language has them*. Lua, C, C++, Objective C, Pascal, Perl, Python, Ruby, JavaScript, Java, C#, Scala, Schema, Lisp, Go, etc. -- I can't think of a single language in popular use that does not have variadic functions. What's really happening here is that your library doesn't support vararg, so rather than acknowledge it as a deficiency, you're trying to rationalize that varargs are bad. It's not even that *big* of a deficiency, so this entire argument is silly. My point was only that it's a bit of flexibility we lose, along with the ability to return multiple values, along with the ability to have optional arguments and variable type arguments. Giving up this flexibility should buy us something, and I've yet to see what it is. The closest you've come to an actual win is the ease which which you can bind C++ state to your Lua function via a closure. It's only a little more verbose using the C API, but that's still a small win for you. If you focused more on those wins rather than trying, irrationally, to prove that variadic functions are stupid, I'd be more easily convinced. Of course, you have no obligation to convince me, but you asked for feedback and my skepticism is not unusual.
I have merely presented facts, and to avoid ignoring your questions I have addressed them, and written code where necessary to demonstrate those facts. I was not aware that you wanted me to convince you of something. When you said varargs can change arguments to a function at runtime I was hoping you would show me a dynamic feature of Lua that I was not aware of where scripts could morph, which I thought would be very interesting and I could incorporate it into my library. &gt;As I said in my last post (which you also ignored): you keep arguing that varargs are totally superfluous and in fact inferior to arrays, yet virtually language has them. Lua, C, C++, Objective C, Pascal, Perl, Python, Ruby, JavaScript, Java, C#, Scala, Schema, Lisp, Go, etc. -- I can't think of a single language in popular use that does not have variadic functions. Your argument that varargs should be present is argumentum ad populum. While I support that it is useful, I deny its absolute need in my library. I may be wrong in this regard, if you could demonstrate a situation where it is absolutely required. Every addition to the library increases its learning curve, which was a concern you brought up earlier, and I agree with the learning curve concern. I am happy that you agree that binding functions is easy with my library. If you wish to know more about what else can be made easy please read the short readme that is on the github site. I have made it as concise as possible. I have explained my design decisions there, therefore I have omitted most of them in this discussion since I would be repeating myself.
&gt; I have merely presented facts, and to avoid ignoring your questions I have addressed them I've told you about a post that you *didn't* address. I've mentioned it 4 times now. You just keep ignoring it, and repeat yourself Question: is English a second language for you? I feel like it's almost impossible to communicate with you. You misunderstand nearly every sentence I write. For example: &gt; I was not aware that you wanted me to convince you of something I never said I wanted you to. &gt; When you said varargs can change arguments to a function at runtime Again, I never said that. I said (direct quote) "they can **take** a non-hard-coded number of arguments". &gt; I deny its absolute need in my library. Again, I never said it was an absolute need. &gt; I am happy that you agree that binding functions is easy with my library. Again, I never said that. You have serious problems understanding written English. &gt; Your argument that varargs should be present is argumentum ad populum. Wrong. I didn't enumerate the languages as proof that variadic functions are not superfluous, but to show that every *designer* of every successful programming language for the last 50 years thinks they are not superfluous. It's the non-fallacious (i.e. inductive) form of Argument from Authority. Roberto Ierusalimschy, Lua's designer, has legendary disdain for superfluous features, and Lua as a result is almost singular in its economy of concepts. Yet Robert saw fit to include varargs. There's just a *chance* that the most renown language designers in human history know a thing or two you don't. They might all be wrong, but it should be enough to give you pause, especially when all your arguments *against* variadic functions have been demonstrably flawed. Never mind that this entire discussion of varargs is a red herring, and that you've completely ignored every other thing I've said. What about returning multiple values? What about optional arguments? What about arguments that can be of any type? These are all part of writing idiomatic Lua interfaces. I've mentioned these things twice before this post, and as with everything else I wrote, you ignored it.
&gt; However, you will need to assign โnilโ to the original variable to erase any assignment you made to the variable. For instance: &gt; a = "nil" &gt; print(a) &gt; After I assign โnilโ to a, it now prints nil, which was what we originally began with. \*facepalm\* This is horrifically wrong. The author actually confuses the value `nil` with the string value `"nil"`. He should not be writing about Lua until he learns it a *little* bit.
I would be very interested in your ST setup for coding in Lua. Do you mind sharing?
It's nothing fancy, I just started using ST the other day actually. I'm using this plugin with Live Parser that notifies you of syntax errors as you code: https://github.com/rorydriscoll/LuaSublime Then I missed globals highlighting so much from my old IDE I went back to it. Then I took a better look at this Live parser and turns out it was not so hard to add that functionality. I made it a standalone plugin, can try it here: https://dl.dropboxusercontent.com/u/45955/LuaGlobals.zip Be sure to check the package preferences. This is what it looks like: http://i.imgur.com/BiizlEd.png If you decide to use the other plugin above as well, disable the Live Parser (in preferences) since the Global highlighting plugin does the same thing.
Thanks a lot. I find that STs Lua parsing is far from optimal, but it's plugins (like yours) that make it possible to optimize the editor for certain languages and ultimately make ST great.
One major feature: the ability to use an external editor. Yours is cool for a quick fix, but will never beat a proper emacs/vim/sublime/...
&gt; I went ahead and hardcoded the info into my file. ugh :( Lua was designed to be usable as configuration language. That's why it has such nice data description syntax. In the context of WoW, you have Lua, so why would you want to use anything but Lua table syntax for a configuration file? If the idea is to make a config file that's user editable, just isolate that configuration in a Lua file and tell the user which one to edit. It's not really "hard coding", given your entire addon is written in user-editable, plain text files. 
You're right. By hardcoded I meant I had to place the info in a Lua file. I would have just preferred using a .txt file because it is less confusing for non-tech savvy people who have to edit my addon for the study we're conducting.
Here's a far fetched one: an optional typing system through documentation. That should help IntelliSense. It could show a function's docs (like Eclipse). 
Don't use 'require' in the Lua script. Instead, use RegisterFunction() from the C# code , e.g. Lua interpreter = new Lua(); interpreter.RegisterFunction("ConsoleWriteLine", Console.GetType().GetMethod("WriteLine")) This way, inside Lua you will have access to 'ConsoleWriteLine' 
Ok thank you, I was simply following a tutorial which showed that I could do all crazy things with the .net framework in lua. But In my main project the would be no need for .net framework inside of lua, this was just me playing about.
local sqlite3 = require("luasql.sqlite3") -- or no local and leave it global
Luasql doesn't set a global. You have to assign the required module to something.
I meant: sqlite3 = require("luasql.sqlite3") Which leaves a global var. I wasn't aware of the particulars of Luasql, but I would think the Lua standard ensures it allows for global runtime vars.
For my main project I plan on making an easy to use 2d game engine, I'm fairly set on using lua for scripting but may use python for it's more complexity. I understand there is one called love 2d but I'm still gonna make mine, not as a contender, just another option.
Love2d is pretty much just a friendly API on top of OpenGL, SDL, Box2D, et cetera. If .NET has equivalents you can use for fast drawing, input, physics, and so on, it shouldn't be too hard to write a .NET Love alternative. I started writing one for OS X at one point, as a frontend to the Cocoa drawing / etc libraries. It was a pretty fun project.
If you want to change the ENV of a function without being able to change it's code, you have to use setfenv. Being able to set it on *any* function without politely asking that it have a parameter for it is very powerful.
And what I'm saying is that you can do that in 5.2 as well. You can simply get or set the _ENV table.
It's _ENV. Note the underscore in front.
I know that. Was just typing shortly on my phone.
You can implement setfenv and getfenv in 5.2, the _ENV local var is the same mechanism. See: http://lua-users.org/lists/lua-l/2010-06/msg00314.html
Some sandboxes aren't so closed off that they don't give access to getfenv and setfenv. Like ComputerCraft. They don't want you accessing the debug library because then you can do some messing around on the server that shouldn't be allowed and might be security risks. But they do allow setfenv and getfenv because they can't do any harm to the server and can be very powerful.
I believe the .net graphics library is quite slow as it uses the CPU so If I used that as well as a Lua library and a control library then it can put some work on a CPU. So I plan on using C++ (I believe is faster than C#) and SDL. What makes mine different from LOVE will be support for tile games, It will contain functions for setting up a tile map and registering tiles. However the engine can run games that do not require tiles like a side shooter.
This is ridiculous.. Why don't you just use name = calling_ply:Nick() calling_ply:SendLua([[gui.OpenURL("http://steamcommunity.com/id/" .. name)]]) Mind you, this might be stupid, but I am at school, and got nothing better to do.
Uh dude I got it working like months ago. And that wouldn't work. 
Yeah, probably but this would be a learning project for me so the outcome would be a byproduct.
Are you sure there isn't an "uncomment code" command to undo the "comment code" one? Dunno the hotkey but I'd expect to find it in the same menu as the comment code one.
Well, for streaming comments in particular I don't really know. Its not that common of an editor feature and its tricky if you want to nest comments. Lua lets tou do that by adding extra equal signs between the opening pair of brackets but some other languages don't let you nest comments at all.
Well really what I just want to do is this: --[[ My comment code is commented and so is my noted notey notes plus this super cool new func that totally isn't going to work ]] That's all. I can do it in html, php and other langs. However in lua, this doesn't work even though I can do it manually. :\
No, I think it is a very good model. As soon as I saw that https://github.com/majek/lua-channels I thought about adding some Lanes underneath. The fact that a friend is working on the same thing in Python is probably no coincidence: https://github.com/benoitc/offset :)
hmm, is that real OS threads? I'm not sure how can something like that be written in pure Lua since Lua doesn't support real threads.
edit: apparently luaproc https://github.com/askyrme/luaproc is very similar to what I need. I'll just fork the repo this weekend and port it to Lua 5.2.2 (maybe I can make it so that it works both with Lua 5.1.x and 5.2.x with help of CPP conditionals) then move from there.
The problems with luaproc: message-passing is synchronous and does not support all Lua objects, only primitive types. See http://kotisivu.dnainternet.net/askok/bin/lanes/comparison.html for a comparison of Lua multithreading libs.
I'm sorry you have horrific feelings about these posts. The student has written the blog post to describe his adventures learning Lua. If you feel you misunderstood the purpose, that's fine. But the student was learning Lua, and he's trying to have some fun here. Besides, the student was on his last summer break before he left for college. So it can't hurt to do these Lua posts during that one summer break. So, in essence, it's just a sort of diary entry of Lua that went on during the summer before the student left for college. But thanks again for your feedback!!! 
Side note: when asking such questions [you should always strip out any irrelevant details](http://www.catb.org/esr/faqs/smart-questions.html). In addition to making it easier for people to help, it shows that you've made some effort to isolate the problem yourself. In this case, the fact that the problem manifests in Love is totally irrelevant, so you should reduce the problem to something that can be reproduced without Love. *** You `nextKey` function redefines `love.Draw` every time it's called, which in turn goes into a permanent loop which redefines `love.keypressed` forever. When you write: function foo.bar() ... end You are *defining* a function, which is then being stored in the table `foo` with the key `"bar"`. It's exactly equivalent to: foo.bar = function() ... end This is exactly equivalent to your code: function nextKey () love.draw = function() love.graphics.draw( I[0], 0, 0) while true do love.graphics.draw( I[currentPoint], 0, 0) love.keypressed = function(key, unicode) if key == text[currentPoint] then currentPoint = currentPoint+1 if currentPoint == 15 then break end end end end Pdone () end end Do you see what's wrong? You wrote a function that creates a function that creates functions in a loop. Let's refactor it so the functions are defined separately and the problem should be more obvious: local myKeypressFunction = function(key, unicode) if key == text[currentPoint] then currentPoint = currentPoint+1 if currentPoint == 15 then break end end end local myDrawFunction = function() love.graphics.draw( I[0], 0, 0) while true do love.graphics.draw( I[currentPoint], 0, 0) love.keypressed = myKeypressFunction end Pdone () end function nextKey () love.draw = myDrawFunction end That's a pure refactoring of your code, exactly equivalent. Do you why the break is invalid? 
I see you are using a "break" statement in a function definition which doesn't contain "while" loop. To break your "while" loop use a conditional variable that you can change inside of your function love.keypressed. e.g. local running = true function love.keypressed(key, unicode) ... running = false ... end while running do ... end 
Thanks everybody... This is all pretty baffling, but I've made some headway.
function love.keypressed (key,unicode) if state =='start' then if key=='return' then state=currentPoint end end if state == currentPoint then if key==(text[currentPoint+1]) and currentPoint&gt;0 then currentPoint=currentPoint+1 state=currentPoint end end if state==0 and love.keyboard.isDown ("lshift") and key == 'k' or love.keyboard.isDown ("rshift") and key == 'k' then currentPoint=1 state=currentPoint elseif key == 'k' then state=capital end if state==15 then if key=='return' then state=done end end if state==done then if key==' ' then love.event.quit() end end end
I'm not sure exactly what is going on in your code (state's value is never declared, nor passed as an argument and goes from a string to an int to the variable done), but there's a couple ways to go about it. 1. since love.keypressed is called whenever a key is pressed, you could ignore the key argument and test against a boolean that you toggle whenever you're looking for non-specific input. 2. you could make a keys pressed counter which is incremented on love.keypressed and decremented on love.keyreleased, then whenever your keys pressed counter is more than zero you can progress the state. ^(ps: it's LรVE or love2d, not Love ;D) 
Remove the 'if key...' ! There is no need for a condition if it is supposed to happen every time.
So instead of if key='return' do I just have 'return'?
My code is a horrible mess. I've been doing it for two days and I feel like crying! I had done what I wanted to successfully, but wanted to make it more efficient... Now I feel like I've been blindfolded, spun round and round and thrown down a mineshaft. I'm totally lost.
I was on mobile. No : Instead of testing anything, just do it. No more "if something, then do something else", juste "do something else". if key == 'return' then somestuff() Becomes: somestuff() If you want to do it anytime, don't add a condition. You might say: "IF it does not rains, I will go out" but here, you are trying to say: "IF it rains, I will go out anyway" Just say: "I will go out"
If you have the functionality that you want, you can move on and come back to it later when you have a new perspective on it! I've been learning the exact same way -- keep going! love.keypressed() is a callback and gets called whenever a key is pressed, regardless of what key is pressed. It passes the pressed key as the string key, but if you want something to respond to ALL key presses, you can ignore it. If you want something to respond to a specific key press, you can test if key == 'my_desired_key' and go from there. Try mapping out the flow of what you are trying to accomplish, literally draw it out on some paper. It will help enormously in organizing your thinking so that when you code something it isn't a mess! 
Phew. I think it'll be a few more hours until I have much of an idea. So if I want different things to happen for pressing space and return, do I have two love.keypressed functions, or just the one with two different 'if key==' commands?
You said you wanted to do something when the user presses ANY KEY ? You can only have one keypressed callback, by the way.
The latter; one love.keypressed() and then the conditionals for each key. Just for clarity's sake, 'if key==' is not a command, it's a conditional. When you compare the argument key (from the callback) to a string it returns a Boolean value (true or false). So it behaves like if (true or false statement) then -- do a thing end or in this case if (key == 'enter') then -- do the thing for when enter is pressed end Based on your code I think you might benefit a lot from abstracting what each keypress does (the 'do a thing' part) to a seperate function. That way it will be clearer what is going on. Either way you seem like you're at the point where you would benefit from some Lua tutorials in addition to jumping into LรVE.
^(Actually, it's LรVE, not love2d. The latter is just the domain name. It would be like calling Linux kernel.org.)
Oh sorry, I forgot - yes, I want it to press any key at one point, but at another, only certain keys. I think I've worked it out.
Fair enough, I somehow recall it being suggested that people use love2d if they're unable to type an ร (which, being the domain, would make sense for search-ability), but I can't find any reference to that now.
This is as close as you're going to get without the debug library. function getfenv(f) return f == 0 and _G or _ENV end function setfenv(f, table) if type(f) ~= "number" or f ~= 0 then return load(string.dump(f), nil, nil, table) end end If you have control of the function: Read the _ENV variable to get its current operating environment. To change the operating environment, simply set the _ENV local variable, like in immatarian's example: local _ENV = setmetatable ( { -- Put whatever you want in the modified environment here. }, { __index=_ENV -- If you want to edit the current environment, use this. If you want to base the new environment off of the global environment, use _G instead of _ENV. } )
If this question is really about "Why use 5.2 over 5.1?", then check out the [Lua Version History](http://www.lua.org/versions.html) and [5.2 Reference Manual](http://www.lua.org/manual/5.2/manual.html#8). I can't live without the new bitwise library. The other awesome features cause me to use 5.2 exclusively unless forced, like for ComputerCraft.
Look at the properties of the dll and make sure it isn't blocked. Sometimes Windows blocks files.
RTFM http://www.lua.org/manual/5.2/manual.html#luaL_loadbuffer
Derp. Thank you.
The major new features of this unit testing tool are improved stack traces and support for excluding tests based on tags. Previously you could only use tags to tell Busted to run nothing but those tags. Now you can use tags to run everything except certain tests.
Gmod lua :p Take it to facepunch. Lua is more than jus gmod mate
Ruby implementation in Lua, anyone?
Great job. I especially like this integer benchmarking part, and the fact that original JVM is like 100ร (or even more?) times longer than yours.
Nice. Though I misread and was hoping this was Lua FOR the JVM. I suppose I should not be lazy and see if that already exists...
Think jruby would work?
Be the first! Write a program that compiles Lua to Java bytecode. You may need to figure out a way to implement Lua's table mechanics, but that should be easier than the compiler.
Agh, I want something like this for android
Looks like fun, great work!
Thanks dude! (And for the tweet! :-))
So the first thing which came into your head was. "I can't be arsed looking for myself, I will ask r/lua. I will not even show what I have tried to do for myself, in addtion I will give the post the worst possible title." This generatation makes me sick. I want, I want, give me! http://www.lua.org/start.html
(shameless plug) If you like functional programming with lua, you might like to try the functions in this little library I wrote: https://bitbucket.org/luafunctional/lua-functional Caveat: not coded for maximum performance!
Interesting post! I think it would make more sense to have the parameter order switched from map(things, fn) to map(fn, things), so as to better support currying. Just a minor nitpick though!
Awesome. This should provide a pretty good starting point for making cross-platform Lua tools using .NET. 
I mean, I suppose the fastest ever Ruby implementation will be written in Lua.
That would be a fun weekend project! But does it have any practical use?
Well, if you like Lua and dislike java, but appreciate the portability, there you go.
Researched this a bit, and -- it already [already exists!](http://luaj.org/luaj/README.html)
luainspect works well enough for my uses. Why is it a problem if it is &gt;1yr since last commit and it works?
Ah, that's helpful!
If you don't have a good text editor, I highly recommend Sublime Text, there is a plugin that gives it linter functionality using luac, but there is a million reasons I love Sublime.
OI
Yes, it uses luac -p but does other languages as well and integrates it with the editor. So it will flag the lines that have errors. I couldn't imagine not using Sublime Text. I love it and highly customized it. 
Well that's pretty neat!
That's a good, quality analysis. I'd like to hear more from this guy about what he thinks is the good, bad and ugly of Perl.
Time for an editor macro, then! Or a patch. Seriously, though; people often bitch that Lua doesn't look like C. If you want that, you know where JavaScript is. 
&gt; I'd put ~= in the ugly category. ... or ``/=`` (Ada) or ``&lt;&gt;`` (Pascal) both of which might fit in better with Luaโs syntactical heritage. &gt; On a standard azerty keyboard, I need 4 key strokes to type that Most people never realize how ridiculously easy it is to extend your keyboard layout or write yourself a custom one. * for X browse through ``/usr/share/X11/xkb/symbols/`` and read this guide: http://michal.kosmulski.org/computing/articles/custom-keyboard-layouts-xkb.html * for the Linux console browse ``/usr/share/kbd/keymaps/`` and consult http://www.tldp.org/HOWTO/Keyboard-and-Console-HOWTO-15.html or [``man 5 keymaps``](http://linux.die.net/man/5/keymaps) * for a FreeBSD console browse ``/usr/share/syscons/keymaps/`` and read [``man 5 kbdmap``](http://www.freebsd.org/cgi/man.cgi?query=kbdmap&amp;sektion=5&amp;apropos=0&amp;manpath=FreeBSD+9.2-RELEASE); At first this might seem like a pile of docs to dig through. But considering that as a programmer (like almost anyone using a computer for work) almost all of your interaction with the machine involves typing, the effort pays off pretty quick. That new programming language you learn consists almost entirely of funky characters? No problem, just add those to the third level (using the AltGr modifier) of some easily accessible key. Also, once you get the hang of it youโll start optimizing your primary layouts to better fit your habits, e.g. swap Escape and Caps Lock if youโre a Vim user, or Caps and Control if you prefer Emacs. 
To me global scoping by default is the most frequent wart. It's not too bad after you learn to prefix everything with local, but it's 5 letters that need not be typed. Luckily there is strict. 
Before the press "any key", use some kind of global variable: wait_for_anykey = true and at the top of the keypressed function, write: function love.keypressed (key,unicode) if wait_for_anykey then progress() return end -- ... or something
Cheers!
I'm curious why you chose to emit LuaJIT bytecode? Is it simpler than emitting Lua? Are there advantages? Very interesting project!
@schmetterlingen I'm not the author. I just noticed this repository yesterday and was wondering why it did not get more attention.
&gt; Nyanga - Object Oriented Lua Dialect But.... I like Lua because it's *not* Object-Oriented... 
I wonder how many of those could be done using metalua if it would be maintained. moonscript, nyanga,.... They are all 'take it all or nothing' solutions. I'd love a more composable way to these syntax additions. But cool stuff nonetheless. Distinguishing between arrays and hashes is a real day to day issue that it covers nicely (for what I've seen)
Wow, this looks amazingly cool. I wrote a C/Lua based softsynth a few years back but this blows it out the water in every way. Now I really do have to try and get Jack working again :) What's the license?
thanks for putting it in the readme! i mostly dont like GPL because its sort of like a spreading disease, you can not touch interact with a library using it without your application being infected. So with this, one can not make an application using your library without it being open sourced also. I am cool with the GPL in use of final applications for the most part, but for libraries, unless you want the world to be open source that much and hate having your library used in proprietary software, I would choose a more 'business/developer friendly' license, like Apache, MIT, BSD, or even eclipse.
Thanks for this software zevver! Have you considered using the LGPL 2.0? That way it can be linked to pretty much anything else but any changes to worp itself will always be contributed back to you. 
The way you sound like is "I want to make a quick buck out of this library, yet GPLv2 is not allowing me without posting the source code that somebody will surely steal because it's so new and grand! Change license so I can do it commercial closed-source and so I don't need to pay you for a usage license!". I seriously hope that is not the case.
Then, as /u/redrick_schuhart said, you might want to look into the LGPL. under the GPL, anyone who links to your library will have to release source. Im all for free software, but I try to be real, and just want people to give me credit, so i mostly just use MIT or Apache.
I completely agree, LGPL is a great option, where any changes must be contributed back. I mostly just love programming, im fine with people taking what they want, but I understand wanting why LGPL would be preferred completely. Im fairly sure that nothing I make would be popular enough for big corporations to just 'steal' it; and if it is big enough, all I want is feedback, attribution, and thanks :) but yeah, I totally get why youd want changes back :) thanks for the great feedback and insight into LGPL!
I know it sounds like I hate FOSS and want to watch the world burn, but really, please just try and not be mean... Im not very much of an expert programmer, and im fairly new to Lua (havent had a chance to use it, but i like its idea!). I enjoy FOSS and just want to be a realist... to quote another reply &gt; I mostly just love programming, im fine with people taking what they want, but I understand wanting why LGPL would be preferred completely. Im fairly sure that nothing I make would be popular enough for big corporations to just 'steal' it; and if it is big enough, all I want is feedback, attribution, and thanks :) 
And that's why I hoped it wasn't the case, fortunately it wasn't.
What about http://www.lua.org/pil/27.3.3.html... no more than 60 upvalues? You declare your 61st variable and it doesn't hold a value, it simply won't throw an error. Just reference it and it's nil. How is that not the in this list?
I don't think there is one but it shouldn't be hard to create a Lua binding for e.g. zbar.
Looks pretty amazing! I wish, we could make some kind of alternative to Guitar pro/TuxGuitar with this...
 if move:lower() == "a" or if string.lower(move) == "a" 
Thanks! I'll try it out and tell you how it goes! 
And also just a quick question. Can you explain to me why this works? Sorry to be a drag about it.
You are converting the input to lower case. A = a, and a = a. Then you compare the result with the lower case version only.
&gt; if move:lower() == "a" &gt; &gt; or &gt; &gt; if string.lower(move) == "a" or if move:match('aA') or if move:match 'aA' Just to add some alternatives.
Would it make sense to do something also like if string.upper(move) == "A" or if move:upper() == "A" So then the variables could just stay the same? Edit: I tried the upper instead and it worked. Thanks for the help 
thats a terrible idea. And it should be `move:match"[aA]"`
I'd just do `if move == "A" or move == "a" then`. And holy Algol, Batman! What's with the line-break before 'then'? (teasing, of course) Just for completeness, here's a too-clever solution: -- Common logic for processing a room function enter_room(room) if not room then return end for _,text in ipairs(room) do -- read the list of intro strings print(text) end local move = io.read() local next_room repeat -- the options should really be printed here so you see them each time next_room = room[move] until next_room -- bad input, later rinse repeat return next_room() -- tail call end local case_insensitive_table = { __index = function(T,key) return rawget(T, string.upper(key)) or nil -- fails on non-string, too bad end } local Rooms -- declare so it can be referenced in the table Rooms = { room1 = setmetatable({ "Write lines", "to be printed first", "in a list like this"; -- the rest are the keys in upper-case A = function() print("...") end; B = function() print("...") return enter_room(Rooms.room2) end; C = function() print("...") return enter_room(Rooms.room1) end; }, case_insensitive_table); room2 = setmetatable({ "etc..."; A = function() print("...") return enter_room(Rooms.room3) end; B = function() print("...") end; C = function() print("...") return enter_room(Rooms.room2) end; }, case_insensitive_table); } function start() -- introduction return enter_room(Rooms.room1) end That's a bit rough. Needs better prompting on bad input. Can you follow what I did there? A few years ago, when I first got into Lua, I hacked together a case-insensitive version of Lua. If all you want is no-case tables it's just a bit of metatable trickery. But for local variables I had to play with the parser. 
Right click installer, run as administrator 
That wasn't it, I just found out my personal account (not the admin) hasn't got the rights to edit the Program Files folder. I just moved it somewhere else. The program is now installed, but I can run programs? I just did this: print "test" but I can't see a run button or something like that. I can run the examples however. What am I doing wrong now?
You might want to be a bit more descriptive when asking questions on the internet. What error messages are you getting? How are you running your programs? What results did you get? etc... Just saying things arent working is very vague.
I already fixed it, but thanks for the showed intrest
Then it wouldnt hurt to say what you did to fix it. Not only does it help if someone comes around latter with the same question but there is a chance that people could suggest better ways to solve the problem. http://xkcd.com/979/
I just installed it into another map. It was a problem with my laptop, not with the installer. I think I posted here to quickly. Sorry guys
hahaha ok then
&gt; How do gmod coders get so good at lua. Practice. And maybe some prior experience with other languages.
One reason Lua is really popular is because it has a [really good book to go with it.](http://www.lua.org/pil/contents.html)
I wrote 'maybe', not 'definitely'. And I agree: it's a relatively clean language, which is great for both programmers and implementers. But "practice" is still very true.
Thank you. I will look into these things when I get more time. Maybe thanks giving break. 
FYI - Just added a web UI to try it in a browser: http://playberrybots.com
I did do the chair throwing script and made it to where you spam bottles and it plays a noise. do you know where I could find a good tutorial on entities
Ohhh yeah. Thanks for the help
Is it not possible to get `io.stdout`'s metatable and modify it to decorate accesses to its members?
Which goes to show that a library should never do direct input or output.
It probably is (using debug.getmetatable). I hadn't considered that.
Yep, but we've all added temporary print() statements for debugging and then forgot to remove them. It'd probably be a good idea to grep your code for 'print' and 'write' before publishing it.
Not sure how useful it will be to you, but I started working on a text adventure engine, using C as the wrapper language, and Lua at its core. I ended up realizing it was a "Single User Dungeon", based a lot on my experiences with LP-Mud and LPC, back around 1993, or at least, what I remembered of it. It's by no means complete, but perhaps it might give you inspiration... or not.. ;) https://github.com/BleuLlama/Prosser 
Very nice article, thank you.
Please repeat the question.
How do I add an event that activates on "VK_PAD_RTHUMB_PRESS"(which is from Xinput)? And/Or How do I install that library in order to do so?
I have everything else working, it does what I want it to do when I press "Q". I should only need to make, like, one (additional) API call. Right?
You should build that library you found. It doesn't seem to give you instructions on how to do so but the important things are to link to XInput and the lua dll.
Why aren't you using a library like love2d? You can even turn off graphics and just get joystick input.
[tonesoftales.com](http://tonesoftales.com) is a webpage where anyone can program a game online using Lua. There's an open API defining functions like `end_turn`, `update_table`, `enable_draggable` and so on. The site was first designed for card games, but I noticed along the way that it could be generelized to turn-based games in general, and even some semi-realtime games like Snake/Nibbler (I guess they could be called *discrete* realtime systems, in contrast to *continuous* dito). The page is in version alpha4. Some upcoming games I plan to add is: * Chess * A multiplayer version of Nethack (demo only) If you'd like to check it out, I'd love some feedback! All games online are open source, and you can login as guest to play them. The technology behind the page is a binary compiled CGI script, written in OCaml, which runs a Lua state and a websocket mini-server. The rest of the eco-system is a standard webhost environment: apache, mysql etc. Regards Olle
I have the binaries compiled and availible in my library, [dong](https://github.com/josefnpat/dong). [Windows x86](https://github.com/josefnpat/dong/tree/master/windows-x86) [Windows x86_64](https://github.com/josefnpat/dong/tree/master/windows-x64)
It only took 3 days ;).
Thanks for the heads up.
For the lazy: /r/gmod --- I provide direct links to lesser known subs mentioned in the title if one isn't already provided. Let me know if I need to try harder: /r/LazyLinkerBot
Didn't you forget to call the function GodEnable? ply:GodEnable() 
And now I feel stupid xD
Both exist out there. I use snake_case. The Olivine Labs style guide says snake_case, but PascalCase (like camelCase starting with a capital) for factories (classes).
lowerCamelCase (camelCase) is probably the worst possible style. Mostly used by java and javascript developers? LUA is used by many C++ developers i think
There is no "worst" or "best" style as long as it's consistent and readable. And anyway, in C++ PascalCase is very common for classes and UNDERSCORE_CAPS for constants/macros, but other than that people follow their own style guides. snake_case is much more common in C code, but in C++ camelCase is actually fairly common.
&gt; There is no "worst" or "best" style as long as it's consistent and readable. lowerCamelCase makes it harder to write code that is easy to read compared to other styles. Makes it harder to write code using lower case, underscore and upercase letters for better understanding.
Most of the Lua code I have seen was snake_case and it "felt right". There's one more you haven't mentioned: the noseparatorscase, which I don't find suitable for names longer than 6, maybe 8 letters long.
Lua, as a community, doesn't care. Unlike Python/Go there is no "one true style". Just be consistent within your application. I'm seen mainly: snake_case for variables/functions. UPPER_CASE for constants. PascalCase for classes. __snake_case for private/hidden variables. 
See what I mean? ;)
In the official documentation, did you check out the [Programming in Lua](http://www.lua.org/pil/) book? Also, did you see [luafaq.org](http://www.luafaq.org/#T1.28) and the [LuaUsers wiki](http://lua-users.org/wiki/ObjectOrientedProgramming)?
I didn't read the book, all the rest yes. Does it worth reading the book? Is it well written for a Lua n00b like me?
The book is written precisely for Lua noobs like you :) The old version is freely available online and I would highly recommend it.
Cool! I'll give it a try! Thanks!
Not sure if I want to do OOP in Lua. At the moment I wanted to unerstand these Lua concepts (metatables and modules).
i use camel case 
What't the book like? I already kind of know LUA and LรVE, but according to the table of contents there are still some things that I'd like to learn such as HUDs and working with Tiled. Is it worth the money, especially taking into account that I already know some of what's in there?
[**@Cyborgmatt**](https://twitter.com/Cyborgmatt): &gt;[2013-12-12 16:29:41 UTC](https://twitter.com/Cyborgmatt/status/411171006704013312) &gt;Frostivus is essentially a custom gamemode shipped as an addon, look in the "dota\addons\frostivus" directory, LUA is used for the majority. ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1sqh55%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Slime has been hard at work! This really seems like an incredible addition. I might have to consider using Love2D for my next project.
"might"? DO IT!
*Lua
Awesome! just came to Love a few days ago and started my first game. So cool to have this released in just a short time :D I'm excited!
&gt; Slime has been hard at work! There are other LรVE developers too! :)
They're just your sock-puppets, somehow.
Think this will work on love 0.9.0
my worry is that its for love 0.8.0 which isnt workable with 0.9.0
I do not know, but I don't see why not. 0.9.0 uses Lua 5.1, so they should be fine.
Beginner question here. I keep seeing lines like: local assert, error, ipairs, loadstring, pairs, print, rawset, require, setmetatable, tonumber, tostring, type, pcall = assert, error, ipairs, loadstring, pairs, print, rawset, require, setmetatable, tonumber, tostring, type, pcall What benefit does this provide? 
Awesome, thanks!
Another reason is catching typo in variable names, when combined with strict.lua, or the `noglobals()` function I like to use (they turn global access into errors). *fixed typos*
why doesn't interpreter optimize look ups?
Im going to take the plunge... Ill let you know in a day or two
The biggest problem is that there is no way to mark a global as a constant. Because of this, any time you call a function it might potentially change the value of any globals so if you use the global again you need to get its value again because it might have changed.
Alright, great! Thanks a lot. Let me know!
This is a bug report for the Ubuntu Linux version of a GIMP plugin, so it may not run on Windows. I briefly looked at the documentation for gluas, and there weren't any build instructions for Windows. If there is a version of GIMP for cygwin, then you might be able to build the current plugin under that instead, and run it from there. I think your best bet is to contact the original creator of the plugin, รyvind Kolรฅs. Or maybe someone on the GIMP forums can help. The plugin itself looks old... it is not clear if it is really maintained anymore. Good luck!
There is a Windows build of the plugin made available by the author, so I know the source probably works on Windows. The furthest I've gone with Linux development is using g++ from the command line, so in order to get the build process working on Windows I guess I have to learn more about that. Thank you, I believe I know where to go from here.
The library has been renamed *strung*, in order to resolve a name clash.
"Hello, cyber police? I'd like to report and incident. Can you use your IP-finder written in visual basic to back-trace some punk?"
so what? why not cache variable references like hotspot or similar?
Maybe LuaJIT does that? Not sure. The PUC Lua interpreter doesn't optimize the bytecode. The parser/compiler is designed to be fast, trading some potential speedups at interpretation time.
Stupid app dev can't even spell...
I've always done something akin to: function transmogrify(num) num = type(num) == "number" and num or error("Expected number, got " .. type(num)) end I feel it's more clear you're checking the type and it won't let you pass in strings (even if they cleanly go to a number). I don't want to coerce types, that's the caller's job.
This is because Lua strings are immutable. The repeated string concatenation is O(N\^2) while the table.concat version can be O(N). This same problem will show up in many other languages although sometimes they will use special datastructures to silently convert the repeated concatenation into something similar to the table.concat version.
Indeed. I knew the repeated concat would be slow, but I was surprised at just *how* slow compared to `table.concat`. I assume a large part of that is because `table.concat` can allocate the memory for the resulting string all at once.
This method does look nicer, but it doesn't match what I wanted for my code: * `assert` doesn't let you specify a level like `error` does, so the error message won't point to where in the user's code they gave the wrong type, and they'll have to dig through a stack trace instead. * I don't want explicit type checking. I'm willing to take anything that can be turned into a number. Really, I very much dislike strong type checking in dynamically typed languages. Anyway, I probably shouldn't have titled this "argument type check", because really, this construct is useful for a lot of other things.
The biggest difference is that table.concat is not forced to keep a copy of the intermediate strings as the concatenation version does. Anyway, while the difference is really big, its actually not that surprising if we consider that we are comparing a quadratic algorithm with a linear one. You basically can make the difference between the two be as big as you want just by increasing your `N` parameter.
That is incorrect. Both table.concat and string concatenation have the same complexity, since they are the same [function](http://www.lua.org/manual/5.2/manual.html#lua_concat). The speed boost comes from the simple fact, that `lua_concat` is called 1000000 times, where as in `table.concat` it is called once. Calling `lua_concat` 1000000 times results in 1000000 new memory allocations.
That's true. This thread wasn't really meant to be so much "why is this method so much faster?" as "folks, look how much faster this is, you should really be doing it".
Do you really have to nitpick like that? I was clearly comparing the complexity of *repeated* concatenation vs using table.concat.
Now that you mention it, I see how you meant it.
Yup, or math.ceil if you want to round up.
Cool, thanks. 
Oh of course, thank you
The source available from [lua.org](http://lua.org/) is at version 5.2.3. The compiled binaries are a bit behind. 
if you want to keep the value as a float and just display an intiger use string.format: string.format("%d", 5.5) generates the string 5
Thanks!
 my_int = my_float - my_float % 1 is a pretty fast way to truncate any decimal digits. The %-sign is a [modulo operation](http://en.wikipedia.org/wiki/Modulo_operation), so you simply subtract the remainder of *my_float / 1* from my_float which leaves you with the whole number and is a quick way to truncate. In your case this should be cookies = cookies - cookies % 1 This also works if you want *exactly n digits behind the decimal point* by using four_digits = float - float % 0.001
That's actually exactly what I needed! Thank you! 
After adding a bunch of garbage collection and reporting, here's the results: Memory used before string concat: 26.36328125 372 304.89 Memory used after string concat: 1977.666015625 682 Memory used before table concat: 1000.4560546875 467 0.11000000000001 Memory used after table concat: 19385.262695312 269 Memory used after removing tbl: 1977.04296875 44 So, the first version of concat leaves 977k of dead strings that can be collected. The table version uses much more memory, but that's probably just table overhead for having 1 million entries. print("Memory used before string concat: ", collectgarbage("count")) st = now() local str = '' for i = 1, n_iterations do str = str .. 'a' end print(now() - st) local s1 = str print("Memory used after string concat: ", collectgarbage("count")) collectgarbage("collect") print("Memory used before table concat: ", collectgarbage("count")) st = now() local tbl = {} for i = 1, n_iterations do tbl[i] = 'a' end local str = tconcat(tbl) print(now() - st) print("Memory used after table concat: ", collectgarbage("count")) tbl = nil collectgarbage("collect") print("Memory used after removing tbl: ", collectgarbage("count")) 
Idk if there are functions for this already, but if you want to round to a certain number of decimals you can do something like: function roundTo (num, place) num = num * math.pow (10, place) num = math.toFloor (num + 0.5) num = num / math.pow (10, place) return num end
I don't think `math.e` is a thing in Lua.
if it isn't, then it's part of an API that I always use. I'll replace it with a math.pow
I'm not sure whether you're the creator of this framework or not, but here are a few thoughts I had just reading the front page: &gt; LUA programming language. Lua is not an acronym. [This is Lua](http://www.lua.org), and [this is LUA](https://github.com/mniip/LUA). &gt; SDLFW is licensed under the LGPL license. That means you can use it freely for any purpose - including commercial ones. This is a little misleading. The LGPL imposes some restrictions and cannot be used 'freely for any purpose'. See more [here](http://www.tldrlegal.com/license/gnu-lesser-general-public-license-v2.1-(lgpl-2.1\)) (this part in particular: "The library must be linked in such a way that the user can replace it with another version of the library."). &gt; Provides an API for reading and playing tracks on a CDROM Do people... want to do this anymore? And the biggest thing: this seems to be based on the antiquated SDL 1.2 instead of the more modern and robust SDL 2. Even without using exclusive new features from SDL 2, just switching to it will resolve many issues present in SDL 1.2 (some of which are due to the fact that SDL 1.x was largely designed in the late 90's and very early 2000's, when the technology landscape was very different.) The example code seems to be essentially identical to SDL's API. Does it provide anything over existing pure bindings of SDL[2] to Lua[JIT] (especially when those bindings use LuaJIT's FFI)?
&gt; This is a little misleading. The LGPL imposes some restrictions and cannot be used 'freely for any purpose'. No, the author is quite correct: LGPLed code can be used freely for any purpose. The only restrictions it imposes are that any changes to the code must be made available on request under the same terms. &gt; See more here[3] (this part in particular: "The library must be linked in such a way that the user can replace it with another version of the library."). The actual text of the LGPL says nothing of the sort. Go read it [here](https://www.gnu.org/licenses/lgpl.html). It's a ridiculous imposition if you think about it. Say my application requires libfoobar-1.3.4 which is licensed under the LGPL. There's nothing anywhere in the license demanding me to be able to allow users to link with another version of the library at all. I can tell them in the README or warn them that they're on their own if they try, but the LGPL says nothing to force me to link it in a way that they can do so. I could actually distribute the app as a statically linked binary as long as I recognize its copyright in the docs and make my changes to libfoobar - if any - available as source (or tell users where to get it). &gt; And the biggest thing: this seems to be based on the antiquated SDL 1.2 instead of the more modern and robust SDL 2. Even without using exclusive new features from SDL 2, just switching to it will resolve many issues present in SDL 1.2 (some of which are due to the fact that SDL 1.x was largely designed in the late 90's and very early 2000's, when the technology landscape was very different.) SDL 1.2 is very mature and has a truly vast body of example games, libraries and applications available for it. Sure bits are clunky because of its age but it is still very popular on some of the smaller and more specialized platforms. SDL2 is great stuff and has a lot of potential but has only recently been released. &gt; The example code seems to be essentially identical to SDL's API. Great. That's what you want in a binding for another language. &gt; Does it provide anything over existing pure bindings of SDL[2] to Lua[JIT] (especially when those bindings use LuaJIT's FFI)? I think there's only [one luajit binding](https://github.com/torch/sdl2-ffi) to SDL2 and it's incomplete.
&gt; LGPLed code can be used freely for any purpose. Really? So I can statically link this library to my closed-source (non-GPL) program? :) The killer is in the "combined works" section of the license. http://stackoverflow.com/a/10179181 There is a reason most libraries don't use the LGPL and most commercial programs try to avoid libraries which do use it. &gt; SDL 1.2 is very mature and has a truly vast body [..] I have used both SDL 1.2 and 2.0 extensively - I know exactly how old ("mature") SDL 1.2's codebase is. It doesn't handle fullscreen nicely in OS X. It doesn't handle unicode text input nicely. It doesn't handle international keyboards nicely. It doesn't handle switching resolutions or window sizes nicely (the GL context is frequently lost in Windows.) It doesn't handle joysticks nicely. It doesn't even handle Xbox 360 gamepads nicely. Its simple 2D API is designed for 1990's-era hardware. I could go on... SDL 2.0 *fixes* all these things. And it's been used for dozens of commercial games and tools already (including Valve games, Steam, many indie games, and frameworks/engines like LรVE.) It does still have some bugs, but they're pretty minor. &gt; Great. That's what you want in a binding for another language. Yes, but this library is marketing itself as some sort of framework on top of SDL, rather than the pure bindings it appears to actually be. &gt; I think there's only one luajit binding to SDL2 and it's incomplete. There are many. [Here](https://github.com/malkia/ufo/blob/master/ffi/sdl.lua) is one example, and [here](https://github.com/slime73/love-snippets/blob/master/MessageBox/messagebox.lua) is another (of a single SDL2 function, because it's so trivial to make bindings that way.) :)
&gt; Really? So I can statically link this library to my closed-source (non-GPL) program? :) Of course yes. That's the whole point of the LGPL: your source is yours, the library remains LGPLed. Aaand I've just read the GNU FAQ about statically linking LGPLed code and you're quite right - you do need to provide a way to be able to relink the application with different version of the library. Object code only though. Dynamic always it is then :) &gt; The killer is in the "combined works" section of the license. http://stackoverflow.com/a/10179181[1] Got it. &gt; There is a reason most libraries don't use the LGPL and most commercial programs try to avoid libraries which do use it. Well, yeah. If you don't like it, you can write your own code of course. &gt; Yes, but this library is marketing itself as some sort of framework on top of SDL, rather than the pure bindings it appears to actually be. Non-native speaker perhaps? Your overall beef with this library is like someone phoning up an ad on a bulletin board and saying "but I don't want piano lessons!" &gt; There are many. Here is one example, and here is another (of a single SDL2 function, because it's so trivial to make bindings that way.) :) I know about ufo's one - it's for SDL 1.3 and hasn't been touched in a year. There's the one I linked to and there are NO others. Go look. I know because I looked everywhere before writing my own luajit binding to SDL. 
Probably half of those "luajit" only systems are just using the superior FFI. There is a project https://github.com/jmckaskill/luaffi that is a little dormant for supporting the LuaJIT ffi on Lua. It seems to work on 64 bit linux just fine with a couple issues on OSX. It could use some hugs.
Indeed. It is "Lua", not "LUA" - it isn't an acronym, just a word which means "moon" in portuguese.
A slight cringe occurs everytime I see this. 
LUA instead of Lua, Love2D instead of LรVE, so annoying. (The sidebar on this very subreddit perpetrates the latter sin.)
My keyboard doesn't have an ร, making LรVE impossible to type without resorting to codes or cut &amp; paste. Sure, it's not English, but I wouldn't try and call it ๅๆญก2D either. 
It's more about the "2D" than the ร. Calling it LOVE, Love or love would be acceptable in most context, but why add a 2D? I mean it's in the domain name, but only because love.org wasn't available. It's even weirder when someone uses it as an argument to not experiment with 3D things: "You can't use it for 3D, it's called Love**2D**!" No it isn't. Anyway, I know this is an insubstantial pet peeve.
I tend to use camelCase because I find it the most comfortable to read and the easiest to type. I think it affects my variable and function names, though. Sometimes when I'm programming, I find myself naming variables weird things like "invisibleSandwichRadio".
So get into the file association editor and fix it.
You fuction modifies table values because tables in lua are passed as pointers rather than creating a deep copy. In order to do what you want you have to screate a new local table to return
the equals operator just sets the pointer to the same value. what you need to do is local int = {} ints[1] = args[1] this is called a deep copy. as far as i know there is no built in deep copy method but you can emplement your own using the pairs() iterator, or in your case just an assignment statement or for loop
If the tables are array-like, you can simply use local ints = {unpack(integers)}
Now this I like... By the way, what's the performance of this, vs. ipairs and copying to a new table?
I was just wondering if it was quicker...
I'd guess it's around a factor of 2 faster, because it you save (_n_-1) function calls. Probably no dramatic difference, but if you really want to know, benchmark it. ;)
It was originally that way just to match the URL. It is now fixed.
Windows displays any unknown "file extension" as all-caps; it is reporting a filetype, not a language. LUA is not an acrostic, but neither are BAT, EXE, DOC or TXT. So, for once, it's technically not wrong.
&gt; I'm seen mainly: snake_case for variables/functions. UPPER_CASE for constants. PascalCase for classes. __snake_case for private/hidden variables. This is a fairly good assessment matching wat I've seen and done. When doing OOP (classes, LuaJava bridge objects, etc.) I've used PascalCase for classes and camelCase for methods, matching Java's representation of the same objects. In the LuaRocks codebase, which is pure non-OOP Lua, we basically use snake_case everywhere.
SDLFW is a cross-platform framework from the powerful SDL library to create your own 2D games with the Lua programming language. It's easy-to-use, free, open-source, and works on Windows and Linux. What's New in This Version? Added support to SDL_net v1.2.8 : * Support to Name Resolution, Hostname and numeric IP lookup (NET_IPaddress functions) * Support to TCP Sockets, Working with TCP connections * Support to UDP Sockets, Working with UDP semi-connections * Support to UDP Packets, Working with the UDPpacket type * Support to Socket Sets, Working on demand with sockets
take this like other alternative. use LOVE if you want LOVE or use SDLFW if you want SDLFW. Is your election, you are free.
Any plans for an SDL2 release?
Yes of course, but after the SDLFW v1.11 Now I'm working on the SDLFW v1.7
Vim
Sublime Text
I noticed the website doesn't list OSX as a support platform. Is there a reason for this? ---- It looks like the reason is that build system uses the [codeblocks](http://www.codeblocks.org/downloads) ide. But it looks like codeblocks supports OSX.
OP might not have OSX to build or even test the framework.
A Good Lua IDE is any IDE that autocorrects "LUA" to "Lua".
&gt; People using Notepad++ or Vim are really scraping the barrel. Editing text with anything other than Vim (or Emacs, I guess) is scraping the barrel. Some slightly better auto completion features doesn't even come close to making up for all the other things you can do with Vim.
I don't have a Mac and I don't have money to buy me one.
I used Emacs for almost 2 years and switched to vi because Sun hardware (UltraSparcs) always had vi and Emacs wouldn't fit on an IPX, forcing me to use it. In Lua, autocompletion is a big win. Introspection, would be nice (Glider has it). So Vim for Lua is just fine if you bolt on enough extra functionality. Unfortunately, "text editing speed" is not the only metric.
Why should any IDE autocorrect LUA to Lua? Isn't this counter-productive if you are writing code that uses C_STYLE_CONSTANT_CONVENTIONS? 
Emacs
I'll generate a makefile for OSX/homebrew and send you a patch. I haven't used VMWare Workstation on Linux in awhile but it runs on Fusion just fine.
* [Sublime Text](http://www.sublimetext.com/) + [LuaSublime](https://github.com/rorydriscoll/LuaSublime) - What I use when not working directly within a terminal. * [ZeroBrane Studio](http://studio.zerobrane.com/features.html) - A more "full-featured" IDE with an editor, debugger, and support for Lรถve 2D, Moai, Gideros, Marmalade Quick, Corona, and Cocos2d-x (taken from site). It also supports markdown formatting in comments, which I didn't know until just now, but seems neat. * [lua-support.vim](http://lug.fh-swf.de/vim/vim-lua/) - Lua-IDE for Vim As far as I know, none of the above require Java (Sublime text uses Python, ZeroBrane Studio says it's written in Lua, and Vim is Vim). Also, there's this page from the lua-users wiki: http://lua-users.org/wiki/LuaEditorSupport Edit: This is to answer the question posed by OP. I don't see a need for an IDE with Lua, but some may like to have GUI-supported syntax highlighting, tags, refs, a step-through debugger, etc in order to help with learning or other reasons. I hope this helps.
@cahna, thanks, that's exactly why I was looking for an IDE. I'm still learning through LUA, so I like the options of syntax highlighting and the ability to step through my code. I'll take a look at the ones you mentioned. ZeroBrane was one I've heard of before but was hesitant on downloading.
My mistake, that was what I had meant to say. So you're saying, when a1 is assigned that adder function, a1's argument is now not the "x" but used as the "y" instead? Is that how the "y" is used in the closure?
If you want an OO analogy, closures are akin to objects and closed-over variables are akin to instance variable, not static values. One simplified way to look at it\* is that function variables, instead of being stored on the stack, are stored in objects. So when you call `adder`, it creates an object on the heap with an `x` variable on it and when you create the inner function, it implicitly gets a pointer to that scope object so it can access the `x` variable (similarly to how methods in C++ get an implicit pointer to `this`). Even if the `adder` function returns (and clears its stack), the inner function will still have access to the heap object with the `x` variable. Additionally, every time you call `adder` a new scope object is created and if `adder` has more than one inner function they share the same scope object. The OO analogy would be that adder is a constructor for and Adder class and that the inner function is an anonymous method. \* The actual implementation of closures in Lua is a bit more involved. It uses a trick to initially store function variables in the stack and only transfer them to the heap if an inner function is still alive by the time the outer function escapes.
Yes, that is correct.
&gt; When adder(9) is being called, is the "y" just considered 0 This is an incorrect assumption. Y is local to the closure. It doesn't get any value until `a1` or `a2` is called. Your example can be translated to a C++ template. template&lt;int x&gt; int adder(int y) { return x + y; } std::cout &lt;&lt; adder&lt;9&gt;(16); // 25 Or something like that. But closures can do a lot more tricks with less bizarre syntax. For instance, multiple closures can share the same variable. This is because you're not closing on the value but on the reference. function spinner(init) local accumulator = init or 0 local increment = function() accumulator = accumulator + 1 return accumulator end local decrement = function() accumulator = accumulator - 1 return accumulator end return increment,decrement end 
&gt; Lua Glider Have you tried 2.0 yet?
Not yet. I will probably try it this weekend.
The function doesn't have a name on the previous line. Or if you're intending to name the function as 'stroke', then the numbers should be variables.
Pick up [SICP](http://mitpress.mit.edu/sicp/)... read the text and do the exercises, you'll understand closures and much more.
Stroke and strokewidth look like built in functions. your function should read function strokeit() stroke(28,246,61,255) strokeWidth(5) end
What is this code supposed to do? The answer is obvious and already given: missing the name of the function, but I'm just curious about the purpose.
I understood closures more when I saw them in C++. Perhaps it will help you too. class Closure { public: // The closure here captures a reference, so can modify whatever // is passed. It doesn't have to be like that though. Closure(int &amp;_captured) : captured(captured) {} int operator()(int parameter) { return captured + parameter; } private: int &amp;captured; }; void main() { int x = 10; // C captures part of our local environment, x, for its own use Closure C(x); // C can now be passed around, could be a predicate or a callback // or somesuch; within which it will be called with some parameter int result = C(5); // The important thing to note is that the eventual caller needs to // know nothing about x, or its value, and yet the result here is // 15 return result; } In C++11 you'd probably reach for a lambda to achieve the same thing, but I'm trying to be explicit. I've also not made use of the fact that the captured environment could be modified; but you will understand that `operator()()` _could_ modify `captured` if it wanted. 
This is the first code I've made and it is going to be something along the lines of a finger painter.
What are some possible names I could name it?
Yes. This would be syntactically valid: function stroke(x, y, z, w) strokeWidth(5) end Though, it may not be what you really want to do.
The effect of the function determines the name and purpose. In this case, the effect of the function is (I guess) that the stroke colour/width are set to 5px bright green, so the name should reflect that (`thickBrightGreenStroke` just for what it is, or something like `goodStroke` if you use this stroke style to indicate 'good' in whatever you're drawing).
I'm trying to get the path of the point to leave a mark of where it has been, how would I do this?
Quick question, why does strokeit() have that pair of parentheses next to it? What does it represent?
What IDE are you using?
if the function was like this function strokeit (left,top,bottom,right,width) stroke(left,top,bottom,right,) strokeWidth(width) end Then we could be passing values into like this strokeit(28,246,61,255,5) and get the same results as before or throw different values at it anywhere in our program like newWidth=10 strokeit(28,246,61,255,newWidth) [zerobrane studio](http://studio.zerobrane.com/) has built in coding lessons for lua. Give it a go, 
I did post it there, and got nothing, that's why I'm here. The actual death message works. That's not the problem The problem is that: 1. the checkbox is not showing up in the settings menu, when it should. I triple checked the code, it's fine 2. the logic doesn't work. i changed the cvar in my console, and the death message still showed up.
Oh, sorry to hear that. I skim there every so often to try and answer stuff. Usually when a thread is ignored it's either because the user didn't provide any information for what is going wrong, or they don't post the exact code they are using. I'm not sure why you are using this: local dmsg_convar_enabled = gta_dmsg_enabled:GetBool() if !dmsg_convar_enabled then return end That will stop the rest of the code from even executing once if the cvar is false. I also noticed that you are using CreateClientConVar slightly wrong. the 3rd and 4th arguments are: &gt; (boolean shouldSave, boolean shouldSendToServer). I don't think that would affect the rest of the code, but it's just something I noticed. A couple other things I've noticed, too: * the InitPostEntity hook is re-registering the VGUI elements each time it is called when you really only have to register them once when the file is ran. (just move all the vgui registering outside of a hook, or in a new file alltogether) * be careful with timers. because they are asynchronous, you will need to verify any data in the callback to make sure no errors happen. (e.g. line 178 in that pastebin) 
If the rest of the code doesn't get executed, then the checkbox and all the other vgui will never be registered, along with the usermessage hook. Even if you changed the cvar in-game, the rest of the code will not just run. To fix the CreateClientConVar, just replace the third argument (FCVAR_ARCHIVE) with true (to save) It looks like you are creating the vgui regardless of the cvar. I can't see any checking for the cvar status when the client receives the usermessage.
Always love to see something Lua related that's not games related. Lua is a fun language to use in all settings.
You should reconsider the tight coupling between your framework and a specific web server (like Apache). This is the road that PHP took, and it'll turn ugly before long, but probably too late to easily fix it. Instead, you can construct the framework to let an app bind its own socket, on which it would accept incoming HTTP connections, and then use Apache, nginx, lighttpd, or whatever else you want as a reverse proxy. Perhaps also look at stuff like uWSGI, which can do things like spread the load between slave workers or communicate with nginx over a specialised, efficient protocol. Would love to see this done right :) I'm in the business of trying out new cool stuff and seeing if our company can have any use of it. Lua is drawing a lot of my attention recently.
I had this in mind, which is why apache specific stuff are somewhat encapsulated on the page object and the render function, which makes it less painful to change it someday. =)
There's also a page on the lua users wiki for lua IDEs: http://lua-users.org/wiki/LuaIntegratedDevelopmentEnvironments. Which seems a bit redundant to me.
Have you looked into [luvit](http://luvit.io/)?, I've been playing around with it quite a bet as of late. You could easily make your framework, more stand alone with that.
I may be mistaken, but luvit has been superseded by the luv library, hasn't it? I think the dev decided to go from an all-in-one approach to more reusable components.
I've been running a moderatly successful community for a year and half. Popular enough to warrent DoS attacks apparently. What can I do you for?
[Using](https://github.com/Etiene/sailor/blob/master/src/sailor.lua#L40) setfenv on Lua 5.2 ... isn't there a way around that? edit: In case anyone wonders, setfenv [has been removed](http://www.lua.org/manual/5.2/manual.html#8.2)
OK, but you have to do the things you want. The patches will be apply on the last version I'm working, SDLFW v1.4 is an old version.
Could you skype or teamspeak me? I have an idea for a mod/addon for darkRP I would like to code, which is quite advanced. I would like to know A) if it is possible, and B) could you help if you like the idea?
Share it here, please.
Try [Facepunch](http://facepunch.com). It's run by Garry.
It depends on what kind of scripting you're doing. If you're running a bunch of other processes, then it gets a little cumbersome with languages like Lua. This is from the overhead of forking a process, attaching to the input / output pipes, etc.. Now there are libraries for this, so that can help. Perl usually wins this sort of contest because it was designed to. Instead of running external programs (like awk, sed, grep, etc.) all that is baked into the language and libraries. Really, the most important thing is that you can understand your scripts, and use them later easily. If you are comfortable in Lua, then by all means just use it. If we're talking about a major project and lots of scripts, then it may be worth time to experiment a little.
Lua is very much a "batteries-not-included" language, which, I think, turns some people off of using it for this purpose. I've used Lua to interface with other command line arguments via standard pipes, used it for MySQL database access, single purpose tools, etc. One example is using Lua for a markdown program and then piping the resulting HTML to pandoc to display the results as plain-text https://gist.github.com/losinggeneration/8382292 As for limitations, I haven't really run into much. The biggest thing to take advantage of are third party libraries (I use LuaRocks) like PenLight, luaposix, luasocket, alt-getopt, etc. 
&gt; What are the benefits and drawbacks of using Lua for server scripting, over something like Perl or Python? Benefits? Well, it's Lua. It's clean, readable and fun to write in. Drawbacks? It has jack shit for libraries, which is a massive disadvantage when used for shell scripting. Its built-in regex as rather anemic, too. None of this is a disadvantage for its intended purposes (a hosted scripting language for applications), but for shell scripting it's pretty big. I'd use Python.
[Perhaps you were thinking of...](http://scsh.net/)
Yes, but you will have to install some libs. 
I wouldn't go down the WSGI route. I'd just serve plain vanilla HTTP and front end load balancer proxies can handle the rest (Nginx, Varnish, etc). HTTP is everywhere, embrace it.
printf() is not (usually) compatible with std::string. try something like: std::cout &lt;&lt; "--Source loaded: " &lt;&lt; source &lt;&lt; std::endl; or try: printf("--Source loaded: %s\n", source.c_str()); 
ill give that a go, thanks
Please leave the bags of money on my front porch.
what ide is this
This question comes up quite often here. The search function should give some useful results: http://www.reddit.com/r/lua/search?q=learn+lua&amp;restrict_sr=on http://www.reddit.com/r/lua/comments/1elq8w/how_to_learn_lua/ http://www.reddit.com/r/lua/comments/zcyh0/recommended_resource_for_13_year_old_to_learn_a/ http://lua-users.org/wiki/TutorialDirectory http://www.reddit.com/r/lua/comments/zcyh0/recommended_resource_for_13_year_old_to_learn_a/
This is perhaps too complicated for me right now. I prefer to focus on building the framework features at this initial phase and maybe return to server issues when my favorite part is solid. I really just wanted to make it able to run somewhere so I could develop the rest and apache + mod_lua made the quicker path.
Lua's website is a great resource. http://www.lua.org/
Its cheesy, but I recommend you look into a free game called roblox, that's where I learned.
thanks ^ ^
I would install http://stevedonovan.github.io/Penlight/api/index.html to make life easier.
I have used this: Beginning Lua Programming Kurt Jung and Aaron Brown 2007 Wiley Publishing ISBN: 978-0-470-06917-2 644 pages From the Introduction: This book is for students and professionals who are intrigued by the prospect of learning and using a powerful language that provides a rich infrastructure for creating programs. No programming knowledge is necessary to benefit from this book except for the section on Lua bindings, which requires some familiarity with the C programming language. A certain comfort level with command-line operations, text editing, and directory structures is assumed.
please, stop calling it "LUA", it's not an acronym.
I found Programming in Lua (I think 3rd ed is out now.) pretty good. 
In that case shouldn't there be a link in the sidebar for any good tutorial?
Since there are multiple tutorials I guess a link to a subreddit wiki page collecting them might be a bit better.
before starting the project I ran across luvit but I ended up not checking it out because I heard it was a port of nodejs to lua and I already knew I wanted to take a different path. perhaps I should take a look!
Looks pretty good to me!
In the second example, you're creating a new function (the distance function) every time you call dist_between, which is bad practice, especially in a loop. If you don't use the distance function anywhere else, you should either use the math itself in the distance function inside of the dist_between function, or just localize the distance function.
I always append "local" to every single variable I make, or declare it in the global scope as local, if I need access to it. Is there a cost to this? I know Lua handles memory references / scopes in a way that using local is usually more efficient? Past that, this reply (above) seems correct. 
To do something really fast you can try Swig. It works well and has many nice additional features (like augmenting C++ code) but the code generated is big and somewhat complicated. 
What Lua book? Programming in Lua?
Wear yer glasses, maybe, if you need them? ???
How should *you* read the book, or your son? What's wrong with starting at the first word and then moving on to the second? What problem did you run into? What specifically is he confused about? Your question is impossibly vague and unanswerable as it stands.
I read it chapter by chapter and did the exercises after every chapter, but I'm a experienced programmer. Some of the exercises are very difficult, so don't worry if you can't do them all. Just play around with the new features and have fun.
Sorry for the confusion.I'm reading with him.Also 3rd edition 
He feels it's not really programs to try and build up his skill but what lua exactly is made of.
The book doesn't include any exercises unless you count the programs that just say what lua is.
Ah, I thought you were talking about Programming in Lua.
[Computercraft](http://www.amazon.com/ComputerCraft-Programming-Minecraft-Matthew-Monk/dp/1481927655/ref=pd_sim_b_5) would likely have been more his speed. Programming in Lua is very programmer friendly, but not very newbie friendly. You'll want to use the **index** and look up things you don't know and then practice that thing until you understand it. [zerobrane studio](http://studio.zerobrane.com/) has built in lua programming lessons. You'll learn new terms to search in your book by going through tutorials in there. Use a bookmark. Takes notes. Google terms and things you are trying to accomplish in lua. Good luck! 
The Ierusalimschy book is pitched at programmers who are already experienced with other languages. It's excellent at what it does but it's not at all a good book for a beginner, especially not a child beginner. "Beginning Lua Programming" might be closer to the mark, but it's *still* probably pitched way too high. Honestly, I'd recommend starting with another language - Python - not because it's "better" than Lua but because there are books available that are suitable for children whereas for Lua... they're pretty thin on the ground. The starting point I'd recommend is Al Sweigert's "Invent Your Own Computer Games With Python". The whole text is available for free here: http://inventwithpython.com/ ...although if you prefer a print copy you can always buy it from Amazon, too. 
How old is he? Learning a programming language is not the same as learning programming. If he's too young for the technical element of the book, perhaps an introduction to programming would be a better stepping stone before a language specific book. At the same time though, a young mind is the right time to start learning to program, the curiosity and adaptability of a young brain is something I'm often jealous of. Lua is a great language for beginners, but depending on the book, you might need an introduction to concepts. If he's struggling with interest in the more boring parts of programming (really, printing the fibonacci sequence isn't all that exciting), check out Love2D, a basic game engine which uses Lua, and is very easy to get started with. They just released 0.9 which breaks compatibility with some old tutorials. You can either sort out the differences (a good practice in its own right) or download the older 0.8 or 0.7 versions to play around with
About damn time.
Okay I'm new to lua and I have always been scared to ask, what it's JIT and what the hell is this? I always see posts i don't understand and I'm sick of it. 
JIT refers to the LuaJIT implementation of Lua by Mike Pall. It's a complete rewrite of the Lua code and optimized for speed. It has a few cutting-edge features, notably the Just-In-Time compiler (JIT), and the Foreign Function Interface (FFI). Luapower is a distribution package of LuaJIT along with handy modules. Lua is pretty bare-bones, so people often say "batteries not included." The modules included with Luapower are "batteries." The FFI makes running external C code much easier, so batteries are easier to implement and this makes LuaJIT more attractive to developers.
This looks fantastic. The packages only seem to come with Linux and Windows binaries, though. Any plans to support Mac OS X?
Just to emphasize /u/reply's point about speed, LuaJIT is incredibly fast in practice. I write commercial digital signage products for x86 and ARM and LuaJIT code is as fast as C - no kidding. To give you some idea of the quality of code it produces, [here](http://lua.2524044.n2.nabble.com/ANN-Lua-Fun-a-functional-programming-library-for-tracing-JIT-compiler-td7654375.html) is an example of LuaJIT taking a complex, functional calculation in Lua and producing a 12 instruction assembly loop out of it that runs like lightning. It really is the best of both worlds: a high level scripting language for expressing problems that compiles to very efficient code. 
Everything is possible w/ Lua. Do you mean Garry's mod?
And if anybody's still looking, just started the BerryBots Little League: http://berrybots.com/littleleague.html You can develop a bot using the desktop app and upload it, or you can write and submit a bot from the web UI at: http://playberrybots.com/battle
People have made such things in codehire, but I'm not sure as I backed away from gmod and focused on vanilla lua first. You may want to have a look there if you just want functionality but for development stackoverflow and github, facepunch, etc.
 co1 = coroutine.create(function () for i=1,50 do print("co1: ", i) coroutine.yield() end end) co2 = coroutine.create(function () for i=1,50 do print("co2: ", i) coroutine.yield() end end) while coroutine.resume(co1) and coroutine.resume(co2) do end Notice how "at the same time" is done. It's really like a game of Freeze Tag.
Lua is a prototype based language. You would only do yourself a disservice by trying to force it to act like a class based language. Learn to love the prototype. You'll be a better programmer and you will write better code. 
If you absolutely must have OOP, try [Middleclass](https://github.com/kikito/middleclass). That being said, inheritance isn't the best solution to this type of problem. Inheritance trees lead to a lack of flexibility and heavily intertwined code. 
Some people are already hinting that using inheritance might not be the best solution for organizing game entities. What they are suggesting is taht you use a component ssystem instead. Here is an example: http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/
Thanks, I will take a look at this.
What is an OOP library? 
Dammit, just use [LCS](https://github.com/Yonaba/Lua-Class-System): clean, simple, plus it has inheritance. There are reasons to use an object-oriented system. Pick your tools for the jobs. Prototype-based OOP just means using fallback tables. You make a table like "baseclass" and write a constructor that returns "instance" tables that metatable back to the baseclass. Honestly, that stuff is confusing as hell until you get farther until Lua and metatables are messy anyway. Just run with a solution like LCS because it fucking makes sense.
I wonder if I'm under-thinking it. Why not this? for i=1,50 do print(i) print(i) end 
I assume his example question is a simplified question for clarity. That way he can get a relevant answer without unnecessary complication. Since you are correct in that your answer is readily obvious.
This is the simplest way to go at it. If the loop bodies are to big you can try to hide them away inside functions for i=1,50 do first_loop_step(i) second_loop_step(i) end If the two things you are iterating have different looping structures then maybe the coroutine version is going to be better.
Because a more complicated example is if one loop goes backwards it counts 1 100 2 99 3 98 or doing other functions
I'm pretty sure any IDE with an autocorrect is the worst IDE ever made
for most of those cases you can still use one loop and generate two different sets of indices for ia=1,.... ib = 101-ia You can calculate one from the other (as above), calculate them both from a common index, or initialize before the loop and calculate them inductively.
&gt; What is the best OOP Library for Lua? The one you make yourself. Because the [Law of Leaky Abstractions](http://www.joelonsoftware.com/articles/LeakyAbstractions.html) is especially relevant for Lua class libraries. If a class library is so extensive that it turns Lua into another language, you should probably just use a different language (such as Squirrel, for instance), because you're going to give up many of the advantages of using Lua in the first place (such as simplicity and speed). So any class library worth using is going to leak, and if you don't understand how it works, you're going to be in a world of hurt.
Where do you get a compiler? Well if you're on a linux box or OSX (apple), you get gcc via a package manager. On windows I can humbly suggest googling "c compiler for windows" and you'll arrive at MinGW which should give you most of your basic development tools. The second answer is rudely short. It's simpler than the alternative. Lua can run on almost any platform and environment because it's a wrapper for C. Rather than support (maintain, debug, rebuild) a huge number of packages, it's easier to just provide a makefile, the sourcecode, and let the build process for the program determine if it's even possible to run the program on your platform. It might not support windows. You'll find out when you run 'make' and it checks the environment. 
Thank you for the reply, before my best guess was it saves space. But that makes total sense. I will get on that and contact this post for any other questions, thanks again.
I downloaded all the basic packages, now where do I go to make the file? I see makefile.file in the lua folder and I do not see a MinGW.exe anywhere, just the installers.
I assume you read through http://www.mingw.org/wiki/Getting_Started ? At this point you should be ready to start working through a command/DOS prompt. Start-&gt;Run-&gt;cmd Navigate to the l-bia folder and type &gt;&gt; make Windows should know how to run a makefile. It will then tell you more about what it finds/can't find while it runs through the build process.
It says ' make' is not recognized as an internal or external command. [ pics ] ( http://gyazo.com/9b0b740c8147c9ff81e428cfa2dbe3fc )
Then you haven't installed MinGW. make and gcc and all these little unix tools are required to compile a C program. You're going to have to read through some documentation to get the install right or look for a different compiler package. http://www.mingw.org/wiki/InstallationHOWTOforMinGW (read the comments a little ways down)
You can try [srlua](http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#srlua) as an alternative. There is a windows binary (in the Release folder of the download) but be sure to read the README.
I know, this is a lua addon. lua -&gt; .exe
"For Windows, you need to create srlua.exe and glue.exe first." You need to make your own .exe's for this program, I remember doing this in the past but I couldn't quite understand it. Instructions in lua always assume you know a whole lot about programming, I don't know how to program my own exe's.
I'll be back on tommorow, I think its very counter productive that to download on extension, I have to download a program, which downloads 8 extensions, which all 8 need programming, which you find from 2 different resources, which have many directories. How do normal people do this crap -_-
If you have MinGW installed, you actually need to go through the "MinGW Shell", available in the start menu, to use the MinGW programs. It models the filesystem differently, though, so you'll have to `cd /c/Users/(your username)/Downloads` to get to wherever your Downloads folder is (assuming that's where you've thrown the source). Then you can run `mingw32-make` to run the Makefile. (You may need to have picked the make package when installing MinGW to have it available. If you didn't, you can run the MinGW installer again to update packages and install new ones.)
I'll rise to the bait. I hate to defend Windows, but I just want to chime in with the opposite point of view. My tools of choice are Qt Creator with Visual Studio Express Edition mainly for the compiler it provides. Setting up a 3D live-coding environment built on Lua is [trivially](http://createuniverses.blogspot.com.au/2011/11/cave-fugue-syntax-2011.html) [easy](http://createuniverses.blogspot.com.au/2011/06/flashback-2011-production-wtf-atabimp.html) here. On Linux, I waste most of my time setting up and tuning the system than I do working on the program I want to work on. Whereas on Windows, you give me any machine with any version of Windows from 2000 onwards, and I can get my development environment set up and build my stuff with a bare minimum of fuss. 
My advice is to stop chasing all these 3rd party things others have written, and start making something yourself. I assume you can code in C? If you can't you really should learn that first. Embed Lua into your C project, and you'll be able to use Lua to control whatever you've implemented in C. If you insist on hiding all your Lua source into your exe, one quick way is to simply have your Lua code as a static string in your C program. To accomplish all I've described, all you will need is your favourite C compiler (on Windows, I recommend [Visual Studio Express Edition 2010](http://www.visualstudio.com/en-us/downloads#d-2010-express)) and the [latest Lua release.](http://www.lua.org/ftp/lua-5.2.3.tar.gz) Literally nothing else. Happy coding!
Fair enough. My job is coding in .NET, so I'm firmly swaddled in the cocoon of Microsoft whenever I'm writing on Windows. I guess I'd forgotten that VS Express still gave a compiler even if the IDE was gimped, so using something else like Qt Creator is a great choice. (Doesn't help that I've never used Qt Creator, so it had slipped my mind. /: ) Have my upvote, kind redditor.
Actually, unless you're using MSYS, make on Windows is called mingw32-make.
[Programming is really not that difficult, especially if you start with a scripting language.](http://inventwithpython.com/blog/2012/05/16/a-modest-proposal-please-dont-learn-to-code-because-it-will-damage-your-tiny-brain/)
If you aren't able to compile it, reply to me and I'll have a go at it. I like doing things like this so it would be no problem to send you the binaries afterwards.
To answer your question, a lot of behaved open source programs provide one-step compilation setups for Windows. You only need the free Visual Studio installed, you double click the provided .sln file, and poof it builds. This guy is just lazy / thinks it's not his job (technically it's not) / passive aggressive about Windows. Summary: he could have been nice but chose not to.
Well, I've been using [Kate](http://kate-editor.org/). It's light weight and works great. It's really designed for Linux, though. It's *possible* to run it on other OS's, but I don't know how well.
I used to love eclipse, but now, it's just gotten too huge. My system slows down to a crawl whenever I open it. And considering I'm running a pretty basic linux box, that's not a good sign.
You misunderstand. I believe he wants to know how to build an extension for lua, not how to install lua itself. In addition, this particular extension allows you to make an exe out of a lua script. This is not something that's usually done on a unix system.
From Lua FAQ: What do I need to build Lua? Lua is implemented in pure ANSI C and compiles unmodified in all known platforms. All you need to build Lua is an ANSI C compiler (gcc is a popular one). Lua also compiles cleanly as C++. 
And why the hell wouldn't it? :)
Da Hell?
http://www.love2d.org/wiki/Category:Tutorials
I found these to be pretty good http://www.youtube.com/watch?v=oKcE3ZKSb50
http://love2d.org/wiki/Getting_Started
if you really want to know exactly, you will have to read the lรถve sourecode. otherwise just read the wiki on the lรถve website. it's all there.
Are you by chance looking for a 3d game engine that uses lua?
SDLFW is a cross-platform framework from the powerful SDL library to create your own 2D games with the Lua programming language. It's easy-to-use, free, open-source, and works on Windows and Linux. What's New in This Version? Added support to SDL_gfx v2.0.24 : * Graphic Primitives (line, circle, rectangle etc.) with AA support * Rotozoomer * Framerate control * MMX image filters * Custom Blit functions 
I don't have a Mac and I can't make the port to MacOSX, so if you want make the port, follow this steps. How to make the port to MacOSX : 1. Download the latest version of SDLFW here : https://sourceforge.net/p/sdlfw/forum/Announcements/thread/a1d68404/ 2. Go to /SDLFW/source/include/ : Edit "common.h" and enable the "MACOSX_PLATFORM" 3. Go to /SDLFW/source/_platform/ : Create the "macosx.c" file, take the others files as example 4. Go to /SDLFW/build/_premake4/ : Edit "premake4.lua" to make support MacOSX 5. Go to /SDLFW/build/macosx/ : Build SDLFW for MacOSX, don't forget to have the dependencies Dependencies : * Lua - 5.1.4 * SDL - 1.2.14 * SDL_image - 1.2.10 * SDL_ttf - 2.0.10 * SDL_mixer - 1.2.11 * SDL_net - 1.2.8 * SDL_gfx - 2.0.25 * PhysFS - 2.0.3 * zlib - 1.2.5 
I'll official release SDLFW 2 for SDL 2.0 after SDLFW v1.11. I need do many things in SDLFW v1.x before SDLFW 2.
No, 2D.
Are you planning on updating lua to 5.2 as well? 
Maybe in SDLFW 2. I've this versions of dependencies for Windows, Linux and PSP. Now I'm working on the port to PSP with this versions of dependencies.
I've adopted this style which is completely valid: local some_module = { new = function(class, ...) local self = setmetatable({}, class) class.init(self, ...) return self end, init = function(self, parameters) end, __index = { methods = function(self) end, } } For inheritance, it's up to you. You can copy from the parent classes __index subtable to the child's __index subtable. Or you can set the __index's metatable to the parent as well. Really the only challenge is remembering to call the parents' init static method.
&gt; MMX &gt; Blit functions Good old 1990's. :) 
Not a Lua specific answer but have you tried opening 4 separate command prompts ("cmd") and launching the separate scripts from there? Assuming the 4 scripts are independent this lets the operating system handle the task of running them all at once.
What's the competition? Maybe someone here knows a faster way to do it.
it's a competition open to secondary school (aka. highschool) students in Ireland, [here's the competition page](http://www.cs.nuim.ie/courses/compthink/app2/scalesapp/index.php) the numbers given aren't the actual numbers, they're just rounded versions, [here are the actual numbers](http://www.cs.nuim.ie/courses/compthink/numbers) *edit also, i'm in the top 20 right now with a difference of 0.000006 :3 *editx2 also, i don't want any answers from people and will not use answers given unless i eventually come to that answer by myself anyway, atm, my code checks every possible answer for having up to 3 numbers in one group and 4 in another
Yep, that's NP all right. :) So are you just trying random combinations? Or something more fancy?
I'm going through a process (although it's probably pretty ineffecient), it's the best way i could think of, here's the code i use for it (i will hope you're not in the competition and assume you're someone who is just being extrememly nice and possibly helpful :) ) *Edit removed code... didn't like it sitting out there...
Yeah, I'm neither in school nor in Ireland. :) You can shorten the code some by passing parameters to pick() with paramers, instead of with global variables: http://pastebin.ca/2617672 Why are you only looking at subsets where each side has 1-3 numbers? What I would do is something like this: first, make a bunch of different random combinations, and look at how far off they are. Then, sort them by difference, and throw away the half that are furthest off. Take the others, and mutate one thing about them randomly, adding or subtracting one number to a side. Then add in another few random ones and loop. I did something sort of like this in the job I had in college: the international space station has a certain set of resources available, and experiment racks each use some set of resources. Pick a bunch of different combinations of experiment racks, and see if you exceed the resources or not, and which resources. Do this enough times with random combinations of experiment racks and you get a good idea of which racks are hard to run, and which resources you're short of.
sorry, could you explain the changes you made to the pick function, i believe you're using a table but i don't understand tables, if you had to change that function to a sentence, what would it be? also, i don't know how to do ANY of what you suggested, if you could tell me the names of some functions i could look into that would allow me to do what you suggested, that would be very helpful
For the pick function: "Here's a list of numbers, numbered 1 to n. Give me a number I'll call "variable," and I'll give you back the number at that spot in my list. So, if you give me 3, I'll give you the 3rd number." I don't know if there are any functions, but the actual name for what I'm describing is a "genetic algorithm": http://en.wikipedia.org/wiki/Genetic_algorithm
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Genetic algorithm**](http://en.wikipedia.org/wiki/Genetic%20algorithm): --- &gt;In the [computer science](http://en.wikipedia.org/wiki/Computer_science) field of [artificial intelligence](http://en.wikipedia.org/wiki/Artificial_intelligence), a **genetic algorithm (GA)** is a [search](http://en.wikipedia.org/wiki/Search_algorithm) [heuristic](http://en.wikipedia.org/wiki/Heuristic_(computer_science\)) that mimics the process of [natural selection](http://en.wikipedia.org/wiki/Natural_selection). This heuristic (also sometimes called a [metaheuristic](http://en.wikipedia.org/wiki/Metaheuristic)) is routinely used to generate useful solutions to [optimization](http://en.wikipedia.org/wiki/Optimization_(mathematics\)) and [search](http://en.wikipedia.org/wiki/Search_algorithm) [problems](http://en.wikipedia.org/wiki/Problem). Genetic algorithms belong to the larger class of [evolutionary algorithms](http://en.wikipedia.org/wiki/Evolutionary_algorithm) (EA), which generate solutions to optimization problems using techniques inspired by natural evolution, such as [inheritance](http://en.wikipedia.org/wiki/Heredity), [mutation](http://en.wikipedia.org/wiki/Mutation_(genetic_algorithm\)), [selection](http://en.wikipedia.org/wiki/Selection_(genetic_algorithm\)), and [crossover](http://en.wikipedia.org/wiki/Crossover_(genetic_algorithm\)). &gt;==== &gt;[**Image**](http://i.imgur.com/zEk299D.jpg) [^(i)](http://commons.wikimedia.org/wiki/File:St_5-xband-antenna.jpg) - *The 2006 NASA ST5 spacecraft antenna. This complicated shape was found by an evolutionary computer design program to create the best radiation pattern.* --- ^Interesting: [^Mutation ^\(genetic ^algorithm)](http://en.wikipedia.org/wiki/Mutation_\(genetic_algorithm\)) ^| [^Crossover ^\(genetic ^algorithm)](http://en.wikipedia.org/wiki/Crossover_\(genetic_algorithm\)) ^| [^Human-based ^genetic ^algorithm](http://en.wikipedia.org/wiki/Human-based_genetic_algorithm) ^| [^Schema ^\(genetic ^algorithms)](http://en.wikipedia.org/wiki/Schema_\(genetic_algorithms\)) *^\/u/randrews ^can ^reply ^with ^'delete'. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less.* ^| [^(FAQs)](http://www.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.reddit.com/r/autowikibot/wiki/modfaqs) ^| [^Magic ^Words](http://www.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/) ^| [^flag ^a ^glitch](http://www.reddit.com/message/compose?to=/r/autowikibot&amp;subject=Glitched comment report&amp;message=What seems wrong: (optional description goes here\)%0A%0A---%0A%0AReply no. 41078:%0Ahttp://www.reddit.com/r/lua/comments/1wtvcp/eli5_how_to_run_multiple_scripts_at_once_in_lua/cf5ey0n)
Thank you very much, all of your information has been very helpful :) i didn't expect to receive such a nice response to my question and thank you for all te effort you have put into sharing this information with. Faith in humanity restored :)
This is the same thing i posted a while back 0_o
Quick and dirty with [Lua-PSO](http://ittner.github.io/abelhas/): local pso = require("pso") local nums = { 19, 27, 51, 68, 73, 86, 106, 123, 132, 135, 151, 184, 321, 324, 343, 347, 369, 385, 405, 477, 512, 587, 669, 681, 691, 704, 718, 747, 766, 780, 796, 799, 817, 831, 851, 867, 892, 904, 930, 963 } local abs = math.abs local function objfunc(...) local vars = { ... } local sum = 0 local none_used = true for i = 1, #vars do if vars[i] ~= 0 then none_used = false end sum = sum + vars[i] * nums[i] end if none_used then return -1e3 -- very bad solution end return 0 - abs(sum) end local function show_solution(vars) io.write("\n\n\n") for i = 1, #vars do io.write(" ", nums[i], "=") if vars[i] &lt; 0 then io.write("L") -- Left elseif vars[i] &gt; 0 then io.write("R") -- Right else io.write("X") -- Out end end io.write("\n") end local function new_found(...) show_solution({...}) end math.randomseed(os.time()) local swarm = pso.new(#nums) swarm:setFitnessFunction(objfunc) swarm:setParticles(50) swarm:setC1(1.0) -- Cognitive factor. swarm:setC2(2.0) -- Social factor. swarm:setLimits(-1, 1) swarm:setPrecision(0) -- No decimal places. swarm:setMaxSpeed(30.0) swarm:setFitnessRounding(0) -- Fitness has no decimal places. swarm:setReplacementProb(0.05) -- 5% of the particles die each iteration. swarm:setMaxFitness(0) -- Stops when the exact solution is found. swarm:setMaxStagnation(100) -- Surrenders after fight so much... swarm:setNewBestHook(new_found) -- Shows when a new best is found. local ret, fit, reason, iter = swarm:run() show_solution(ret) print("Done:", fit, reason, iter) 
&gt; (roughly) 7.5 days to see if it solves my problem... You seriously should look into using [LuaJIT](http://luajit.org/). It's a specially made version of Lua that runs *significantly* faster than the normal Lua. You can download a binary version [here](https://github.com/luapower/luajit/zipball/master) Unzip that file, and use the `luajit.exe` inside `.\bin\mingw32` just like you would use the normal Lua executable. Except LuaJIT is way faster.
You will probably want to install luarocks. Then use luarocks to install the lcurses library: http://luaforge.net/projects/lcurses/ This library will allow you to print chars anywhere on the terminal, not just on the bottom row.
i don't really want to copy someone else's code (although thank you very much for the effort you put into writing it) would you mind explaining what your code is doing so i could write something similar myself?
I recommend using the curses library as it will actually give you control over your input/output. However, if you want to try without any additional libraries, I suppose you could give [coroutines](http://www.lua.org/manual/5.2/manual.html#2.6) a try.
This http://gameprogrammingpatterns.com/game-loop.html is quite relevant.
Coroutines will help you organize the event loop a bit better but you are still going to need some system-specific library to do the input and output (find what key is currently pressed and do something other than print to stdout)
Yes, but when I use io.read() for input, the whole loop stops and waits.
Exactly... that's my point that you can't use "io.read()" and you need to make it event based... There isn't a way to check "iskeypressed" in stock lua, so you need some module to handle it for you. So `lcurses` can provide that capability. The link was just to give an overview how the things should work together in the end.
Ok, thanks!
Can you just do something like this?: local brick = display.newImageRect( "images/brick.png", 32, 32 ) brick.x, brick.y = 15, 281 game:insert(brick) local brickMoveSpeed = 1 local function move_brick() brick.y = brick.y - brickMoveSpeed return end Runtime:addEventListener( "enterFrame", move_brick )
Yes, there will be binaries for OSX (64bit) in the future. Currently only LuaJIT was compiled. Until then, note that all libs have one-liner build scripts that invoke gcc directly and should be very easy to adapt to clang.
I've used middle class for a few projects: https://github.com/kikito/middleclass
Disclaimer: I am the creator of [middleclass](https://github.com/kikito/middleclass). I have said before on reddit that I don't think inheritance is a great solution, [even when disguised as mixin combination](http://www.reddit.com/r/gamedev/comments/1uni58/the_power_of_lua_and_mixins/). I favor composition these days. However, I think *instantiation* is great. The fact that you can create factories that create objects that have the same groups of attribute and behaviors is very useful, in games and in programming in general. In Lua, creating factories is very easy once you know about metamethods and metatables. I'm talking about 2 lines of code, tops. My rules of thumb for using a class library (I will say middleclass, but I think this is applicable to all of them) in Lua is : * If you don't know how metamethods &amp; metatables work, [learn about them](http://lua-users.org/wiki/MetamethodsTutorial). In the short term you can use middleclass as a crutch, but you should try to remove it as soon as possible. * Once you know about metamethods, they are the way to go. Use them and composition, don't use middleclass. This is more than enough in 80% of the cases. * Once you start needing something a bit more complex (for example, class methods and instance methods with the same name, inherited operators, mixins) then it's time to use middleclass again. But this should be something that you consider doing after pondering all the tradeoffs carefully; don't add middleclass at the begining of a project, as a default. * Finally, if you are creating a library to share with others, that puts more weight into the "not use middleclass" plate. Idiomatic Lua libraries have little or no dependencies; they are small and specialized, like the language itself. I hope this helps you. Good luck with your project! 
If you want to use JSON for config, you need to use a [Lua JSON library]( https://lmddgtfy.net/?q=Lua%20JSON%20library). But why not use Lua? The syntax for Lua tables is pretty close to JSON, and you can very easily load the configuration with [dofile](http://www.lua.org/manual/5.1/manual.html#pdf-dofile) or [loadstring](http://www.lua.org/manual/5.1/manual.html#pdf-loadstring). Note that this executes code, so the configuration needs to come from a trusted source.
On my phone, so this is based off memory, but the way I did it was lua_loadfile( L, "file" ); lua_pcall( L, 0, 1, 0 ); lua_loadstring( L, "return config_1" ); lua_pcall( L, 0, 1, 1 ); config1 = lua_checkstring( L, -1 ); ... Etc for however many things you need to load Note that this doesn't implement error checking. Also, double check the lua_pcall syntax, the numbers refer to how many arguments you push in the stack, and how many you want back, etc. Edit: this is calling Lua from C
There are multiple games that coded their gameplay logic in Lua (Don't Starve, Natural Selection to name two), so it shouldn't be that much of a problem. It's not going to be as fast as C++ for sure, but in general physics and rendering take a good lot of the cycles and they are still in native code. 
SDLFW is a cross-platform framework from the powerful SDL library to create your own 2D games with the Lua programming language. It's easy-to-use, free, open-source, and works on Windows and Linux. What's New in This Version? Added support to SDL_gfx v2.0.24 : * Graphic Primitives (line, circle, rectangle etc.) with AA support * Rotozoomer * Framerate control * MMX image filters * Custom Blit functions * fixed bug in SDLFW_IsKeyUp()
I'll official release SDLFW 2 for SDL 2.0 after SDLFW v1.10. I need do many things in SDLFW v1.x before SDLFW 2.
I don't have a Mac and I can't make the port to MacOSX, so if you want make the port, follow this steps. How to make the port to MacOSX : 1. Download the latest version of SDLFW here : https://sourceforge.net/p/sdlfw/forum/Announcements/thread/a1d68404/ 2. Go to /SDLFW/source/include/ : Edit "common.h" and enable the "MACOSX_PLATFORM" 3. Go to /SDLFW/source/_platform/ : Create the "macosx.c" file, take the others files as example 4. Go to /SDLFW/build/_premake4/ : Edit "premake4.lua" to make support MacOSX 5. Go to /SDLFW/build/macosx/ : Build SDLFW for MacOSX, don't forget to have the dependencies Dependencies : * Lua - 5.1.4 * SDL - 1.2.14 * SDL_image - 1.2.10 * SDL_ttf - 2.0.10 * SDL_mixer - 1.2.11 * SDL_net - 1.2.8 * SDL_gfx - 2.0.25 * PhysFS - 2.0.3 * zlib - 1.2.5 
Slightly off topic, but if you want to make a game, check out LOVE2D. It's a fantastic framework for graphics etc, and you'll be able to use it in no time. Getting a window with a block moving is about 30 lines of code and it's really satisfying to have graphics!
When I change it from {{Index = "Map1"}} to {{"Index" = "Map1"}} it says "} expected to close [the second "{"] on that line. Am I following your instructions correctly?
Not in the table itself. When you are indexing it: maps[i]["Index"] is what you are looking for.
Ooh, okay. That fixed it. Thanks!
Or just use the dot notation t = Lighting:findFirstChild(maps[i].Index):Clone() `sometable.someindex` is just a prettier way of saying `sometable["someindex"]` There's another way to do this, assuming you will only have one instance of each "Index" (i.e. map ID) then the index value can be used as a key in your main table. maps = { Map1 = { Name = "MapOne" }, Map2 = { Name = "MapTwo" } } To process that table, change `ipairs` to `pairs`: for index,value in pairs(maps) do t = Lighting:findFirstChild(index):Clone() end And you can further reduce the nested tables if you're only interested in the "Name". 
I know, I am using it already! I lรถve it!
These are the ones I used when I was starting with love.
Damn, this made me realize I really really need to update my laptop (Ubuntu Quantal...) No SDL2, so I had to compile it from scratch, then force install the love .9 deb files And magically I can now play with your code :P - it looks like an off/by/one error which is pretty common in lua code. I don't have the time right now to go totally into it, but... I'd start digging by seperating out your mouse to screen and screen to mouse coord math into dedicated testable functions so you can prove your math is correct. EDIT: Disregard above, so I'm looking at your code and you have a lot of non-local variables, I'd love to jump in and say "oh here's the issue" and fix it, but I'd rather jump in an help you with overall programming technique. Some common Lua pitfalls are understanding variable scoping and the 1 vs 0 index thing, which I can't say is your current issue. I'd say you really need to clean up the code itself, and after unraveling all of it, you're probably going to find your bug and quite easily. I'm looking at it and its obvious that scaling influences the size of the selection when you click, which is a big indicator that you've done the math wrong in one place, and right in another. So making a single function that does the math in one place, and only one place like function MouseToGrid(mx, my) return mx / 64 * interfacescale, my / 64 * interfacescale end then call it with MouseToGrid(love.mouse.getX(), love.mouse.getY()) I'd even go so far as to make you wrap tests around that logic, like "my menu is 100 pixels wide, the map is offset by 5x, 5y and I'll plug in mouse coordinate 300,250 which should be grid cell x,y " figure it out on paper, then verify that your result jives with code, on multiple questions here. 
After much digging I realized your selection glitch is not numerical, but simply you never scaled your sprites - you are drawing from top - down / left - right. this alone is causing you a graphical glitch, on the last row/col of your selection area, you are getting overlap from the sprite graphic. The logical selection in your selmap is actually correct data.
I should zip up what I did, I went through quite a number of changes over here. But I stopped when I realized the bug you had was the exact same one I had, in the exact same way... I went "oh... hum.... OH DAMN I know what this is!!" Here -&gt; http://prozacville.com/Downloads/HeadM_fixed_code.tgz Note I did just sorta bail on the code after I figured out what was wrong, but there are a lot of nice structural changes you could look over and incorporate.
you are creating lots of 'if' statements and not ending any of them (excepting the first) you should put an 'end' for each 'if'. http://www.lua.org/pil/4.3.1.html
Hey I'm quite new with lua, so I don't know if this is the correct answer, but you seem to forget to close your if statements (http://www.lua.org/pil/4.3.1.html), for one.
I closed them in response to another post a little bit ago, just updated the link.
Still one open at the bottom.
Programming in Lua 3rd edition is the best reference material. You may not need all of it for modding, but if you wanna be a pro...
I use this, but the first edition is [available free online](http://www.lua.org/pil/contents.html). It is still relevant for most everything, most certainly the basics and getting to know the language.
But there is http://github.com/mniip/LUA
I'm not familiar with the Logitech API, but I found [this reference](www.wolfpack.pe.kr/attachment1180489860.pdfโ). If that is the same that you are using, I'm not sure what you want to do is possible, as there seems to be no way to have a timer running while still processing events. What you *could* do is to measure the time delay between inputs. If the last input is older than 2 seconds, print your stuff. That would require the user to wait two seconds, then press a button for a final time, so I'm not sure if that's an option. Another way would be to listen for two separate buttons. The one you want to count and another one to stop counting and print out the results. Edit: Reddit seems to ignore the nice link formatting for pdf links for security reasons. Oh, well, it's still kinda readable.
Are the functions provided in the Logitech API the only ones you can use, or are they just 'extra' on top of the normal LUA ones (I don't really know enough about how APIs work)? In other words, is there a way to do in 'normal' Lua that I could test with Logitech? If not, I could try the other methods you suggested. I think I could work out the separate buttons one, but how would I do the timer one?
Minecraft runs on Java and Java alone so...No. There is the computercraft mod that allows lua scripted computers and "turtles" in-game but no you can't modify the game itself with lua.
However, a mod exposing a lua API would be cool.
There used to be a mod called LuaCraft but it was discontinued.
io:read takes parameters, so you can take input in a couple of forms. See: http://www.lua.org/manual/5.1/manual.html#pdf-file:read
Could you give me an example? When I read this entry it sounds like io.read is used for reading a file. What are the parameters. 
&gt; print(loadstring('return '..io.read())()) The thing I'm wanting to know is, for example, if you type "3 + " in the console without the quotes, is would print "You need to type "x + y"." and if you type "3 + 5" it prints "8" 
Oh jesus, thanks bro! I will test it later.
I'll official release SDLFW 2 for SDL 2.0 after SDLFW v1.10. I need do many things in SDLFW v1.x before SDLFW 2.
SDL Framework (SDLFW) v1.7.1 for PSP is here : http://ul.to/n8w5hw1d
Try this. http://stackoverflow.com/questions/11827341/lua-to-be-exported-as-apk-in-eclipse
A tail call can be performed anywhere you're returning the value of a function call. It doesn't need to be recursive.
It could be done with just one function - the important thing is that the local variables are not used after the function call, which allows to interpreter to remove them from the stack.
That's not really the issue. The stack grows because of extending the call chain. Whether it's two, one, or a hundred different functions doesn't matter. Tail calls chain functions without raising the stack level. The factorial function jumps into the helper then the helper keeps jumping back to its head on each recursion. You could write that with one function if you just add `acc = acc or 1` at the start of the "helper" and then you don't need the entry function. Recursive factorial is often presented this way because it's a classic example of lambda calculus with a stricter definition of what a function can do. You can't have missing arguments, for one. Lua doesn't have that restriction so it's inaccurate to say you need two functions. Although it can be helpful to keep the signature of the public function clean to avoid bugs. 
The thing to grasp here is that tail-calls are just that: calls to a function (funcA) from another function (funcB) where that call is the last thing funcB does before returning. Since funcB won't be doing any more work, besides either returning nothing or the result from funcA, retaining any of its parameters or local variables (which might both live on the stack) is useless. What most decent compilers or interpreters then do is a process called *tail-call elimination*. What this means is: it unwinds the stack up to the point that stores the return address, and calls funcA as if it had been called from that address. So, tail-calls by themselves don't prevent stack overflows, but tail-call elimination does. Take a look at what Wikipedia has to say about [tail-calls](http://en.wikipedia.org/wiki/Tail_call).
Thanks for the easy explanation, I got it now i think :) And I did read the wiki but, as you might have noticed, english is not my native language and it doesnยดt help that the wikipedia writing style is very complex ;)
Thanks, combining your and otaconix answer I understand it now I think.
&gt; And I did read the wiki but, as you might have noticed, english is not my native language [...] I hadn't noticed. I don't know what part of the world you hail from, but your English here did not betray that fact to me. But then again, English isn't my native language either. And yes, Wikipedia can be a bit hard to grasp sometimes, but it pays off to try anyway. Anyway, just a little addition on my previous comment: funcA and funcB can be the same function.
OK, consider the normal way you'd write a recursive factorial: function factorial(i) if i == 1 then return 1 return i * factorial(i - 1) end Now let's walk through how that calculates `factorial(5)`. We'll do each tiny step as a separate line. The indentation will show how many nested calls we're in. call factorial(5) recursively call factorial(4) recursively call factorial(3) recursively call factorial(2) recursively call factorial(1) return 1 multiply the result of that by 2 and return it multiply the result of that by 3 and return it multiply the result of that by 4 and return it multiply the result of that by 5 and return it Whenever we step into a recursive call, we have to keep track of where we were. That way, when the recursive call returns, we can pick up where we left off and multiply the result by `i`. So when we're all the way into the innermost call to `factorial(1)`, we have this stack of return points to remember for all of the outer calls. We can't discard those because then we'd forget to actually do the multiplies. Now let's transform it into an explicit accumulator: function factorial_helper(i, acc) if i == 0 then return acc end return factorial_helper(i-1, acc*i) end function factorial(x) return factorial_helper(x, 1) end Here's the steps for this: call factorial(5) call factorial_helper(5, 1) call factorial_helper(4, 1 * 5) call factorial_helper(3, 1 * 5 * 4) call factorial_helper(2, 1 * 5 * 4 * 3) call factorial_helper(1, 1 * 5 * 4 * 3 * 2) call factorial_helper(0, 1 * 5 * 4 * 3 * 2 * 1) return acc return result return result return result return result return result return result return result Do you see how after each recursive call, the only thing we do is return the same value that the recursive function returned? That means there's no more work that we have to remember to do in the outer function call, so we can just ditch that state right before we make the tail call. So instead if this deeply nest callstack, it becomes: call factorial(5) call factorial_helper(5, 1) call factorial_helper(4, 1 * 5) call factorial_helper(3, 1 * 5 * 4) call factorial_helper(2, 1 * 5 * 4 * 3) call factorial_helper(1, 1 * 5 * 4 * 3 * 2) call factorial_helper(0, 1 * 5 * 4 * 3 * 2 * 1) return acc As you can see, our nesting depth is now fixed, regardless of how many recursive calls there are. That means we can call `factorial(1000)` without having to worry about overflowing the stack. The trick is that the recursive call *must* be in "tail" position: it must be the very last thing in the function. Otherwise, there's still more work left to be done, and we have to keep enough state on the stack for each call to pick up where we left off. 
I downvoted purely for the none license you have used on this work.
Haha! I found that in many occasions people need to think twice when using licensed code. But then I found that if people need to think about it they might can't even use public domain code anyway... Anyway I'm a fan of the idea of public domain. When you think about 'waiving your rights' it's kind of cool :) 
Just think of it as some random code you found on the Interweb. It's only half thousand lines lone afterall.
I take this as a compliment for my english knowledge ;) Yeah, the problem with Wikipedia is that there is too much information which already requires knowledge in the matter, and I only know the basics of programing.
Thank you , I am really pleasantly surprised how many good answers I got :)
About the license issue, a concrete example. I maintain Metalua, which features, among others, a pretty-printer, because there was nothing adequate available at the time. I'd like to move on to a printer maintained by someone else, if only to avoid contributing to the "not invented here syndrome" that plagues Lua. Your code might be a suitable replacement (I haven't checked yet). However, Metalua is used in Eclipse. As such it must be licensable under the EPL, and Eclipse lawyers thoroughly check the IP and licensing terms of every external addition. Unless the situation is clear to them, including having an explicit license and someone stating he has the IP and lawfully put that license on it, they'll reject the code. This isn't done to keep lawyers busy and overpaid (well, not only), but because in those times of frivolous lawsuits, anyone with deep pockets needs serious IP guarantees before acknowledging the use of any piece of software. So yeah, if you could slap an explicit MIT / BSD / Public domain license on that thing, you'd make it more useful, and not only to patent trolls.
Read the book :)
Thanks for the detailed explanation. So If I choose public domain, how do I explicitly put that into the code? Should I include a LICENSE file or put the licence statement into the source file?
Why werent you satisfied with the results? There is a good chance people are going to suggest things you already found... But yes, Programming in Lua is a very good place to start. The only thing you need to watch out is that the 1st edition that is available online is for Lua 5.0 - there are some small language differences between that and version 5.1 and 5.2
What application are you using? Lua Rocks? Love 2D? 
There's an alien module in that Lua distribution, so technically you could do it. However, it's not really simple. I wouldn't recommend dabbling with alien if you don't have much Lua experience, since it'd make your experience pretty confusing. If you want to get immediate-ish results from Lua coding I'd recommend downloading LรVE from love2d.org
[zerobrane studio](http://studio.zerobrane.com/) has built in lua programming lessons. Can't think of really good tutorials otherwise, tried some youtube? Oh download [MurgaLua](http://lua.igame3d.com/murgaLua/murgaLua-snapshot0.7.5.tar.gz) Learn to make a simple chat program with it here: http://www.murga-projects.com/murgaLua/murgaLua.html It made Lua clearer for me years ago. There's more examples in the download. Here's some other [examples](http://www.widged.com/labs/murgalua/gallery/index.php?lastadded=added%20any%20time) you might learn from. 
What are you trying to do? A line of text after a print? Add *\n* before your ending quote like print("Hello World\n"); Center or align text? Use the space character with the [string.rep()](http://www.lua.org/pil/20.html) function to position items horizontally: s=" " twotabs = string.rep(s,8) print(twotabs.."Hello") Use a table to hold and display the strings (or coordinates) that make up your text based picture or framed title, or whatever. Clear the screen? on a mac os.execute("clear") Try os.execute("cls") on windows. 
Done. Thanks a lot.
I agree with you that the Lua tuts are lacking, [here is a decent one I used.](http://www.phailed.me/2011/02/learn-lua-the-hard-way-1/) Also, if you search for Love2D, Corona, Moai, or CryEngine, you might be able to get some general Lua out of those tutorials.
There was something in computer craft it was term.setCursorPos() I want to be able to put where I type to where ever I want
What kind of system are you on? If you're on a Unix based system, there are ANSI escape codes you can send to the terminal to move the cursor around, set colours, etc; if you're on Windows, then you're out of luck, you have to write some bindings to the Windows API (shouldn't be too difficult).
Oh man, the Workbench screenshot takes me back!
Still lacks important details like floppy drive seeking sound effect.. For all its beauty and power, I think usecases like somewhere around http://youtu.be/3O40cPUqLbU?t=3m9s A500/WB1.3 Would've struggled ;)
agreed
Looks cool :) be sure to post this in /r/love2d as well.
Anywhere I can download/purchase the game? Or if it's unfinished then keep it up, because it looks nice. :smile:
Thanks, glad you enjoyed it. The guide is horribly incomplete, I need to portion out documentation work to a few minutes every now and then to not get bored out of my mind, and getting the man-pages up to a reasonable standard is higher up on the list ;-) For packaging: there used to be a PPA, the ffmpeg- dependencies makes it a bit of a struggle, I'm pretty crap at that kind of work (think the debian control is in the attic/ path somewhere) so it will likely stay that way. For the video question, I have something like that lying around, I'll strip it down to the ~10LoC or so that's actually necessary and pastebin tomorrow. If anyone has more requests like that I'm happy to help. For the forum/chat bit, not much in terms of community management no. I hide out on FreeNode IRC (#lua, look for 'letoram'). If there's anyone else interested we could grab a channel and meet up though.
My friend a few years me... Not so much hdha
It's still in beta but yea I can send you the files
Yea for sure
The latest version in the master branch now works with non-Apache servers too. I have tested it using 3 different environments: the Mongoose web server with CGILua (should work with IIS as well), Apache with CGILua, and Apache with mod_pLua (a different Lua module for Apache).
OpenResty is based on nginx, you should look into configuring php/ruby with that. Otherwise, the options for OpenResty are any language that compiles to Lua (such as Moonscript).
what does the job entail? 
Openresty is just a "distribution" (a packaged group of libraries) for nginx. nginx is a web server, like Apache. Here's how you configure an Ubuntu server from scratch to run rails 4.0 with nginx: http://alexbachuk.com/launch-rails-4-application-with-passenger-and-nginx/ Googling for "rails on nginx" will give you more results
For me the main selling point of OpenResty is that if I use the supplied libraries to interface with MySQL, PostgreSQL or Redis (and others), I can write my Lua code in a synchronous fashion and it still won't block. It's like node.js without the callback hell. 
Well, of course. These are all very good reasons to use OpenResty. However, I got the impression this guy was looking for a more general answer, given the question appeared, to me at least, to be confusing many different features of nginx and OpenResty where I tried break down what OR integrates, how it is different from nginx, and how PHP/Rails is commonly used with the former.
Thanks for the answer, now I have more clear the situation :D
Same answer as always in Lua: tables! `foo["milk"]` and `foo.milk` are equivalent.
If you define these functions as global functions, then you can access them via the _G table function milk_pour() print("milk") end function cola_pour() print("cola") end local drink = "cola" _G[drink .. "_pour"]() this is usually not recommended however.
Something like: foo["milk"] = milk_pour foo["soda"] = soda_pour foo[currentdrink]()
Thanks! This was just what I was looking for and it works. Is there any particular reason it's not recommended? Is traversing _G expensive?
I guess he means defining names in the _G table. But that "rule" only really applies to libraries. If you want to be neat and tidy, put the functions in their own table. MyFuncs= {} function MyFuncs.dosomething() end MyFuncs['dosomething']() There's nothing magical about the global namespace. It's just a table. 
Its kind of the same reason why its better to create an `xs` array instead of a bunch of independent variables `x_1`, `x_2`, `x_3`. Dynamically accessing global variables like that is less flexible, the code is less self-descriptive, linters get confused by the dynamic naming, you need to separately keep track of valid function names, you are reusing the global scope instead of having a scope just for the functions, etc.
is there a certain reason why you can't use if thirsty then --you don't have to do == true in lua pour(currentdrink) end ? it's a lot cleaner, and all the other methods using tables and _G are way overkill
that makes sense
Modularity is the main reason. The code I gave is just an example but the idea is that arbitrary functions can be called from the string which means not having to go in and code an if statement (or several) for every new function. I just wasn't 'getting' how from the documentation. I suppose it's a pretty unusually specific thing... 
It's not that traversing _G is expensive. The problem is that relying on globals entangles code. Ideally, a function should only depend on its params. Here's one example: local sum = function(a,b) return a + b end `sum` only depends on `a` and `b`. This is very useful in several ways: it makes easier to move the function around. It guarantees every time you call sum with the same parameters, you get the same result. Global variables break this "isolation". Consider this other function: local sum2 = function(a,b) return a + b + _G['c'] end `sum2` has several disadvantages over `sum`. * It will throw an error if you forget to set `_G['c']` (in this case is easy to see that a global is needed, but in a longer function it can be missed). * It can't be moved that easily(since `_G['c']` has to be set before using the function). * For the same values of `a` and `b`, it can return different results, depending on the global `_G['c']`. In case you are wondering, the right way to code `sum2` is making the dependency explicit by using a parameter: local sum3 = function(a,b,c) return a+b+c end And call it using all its dependencies: a, b, and c: sum3(1,2,3) 
&gt; Ideally, a function should only depend on its params. Lua isn't ML. I'm free to create impure functions with abandon and Lua won't punish me for it. Someone else trying to read my code might. But this is only a rule so much as "use of goto considered evil." 
I will go to your home and take your keyboard.
From my cold, dead hand. 
&gt; Someone else trying to read my code might. The problem is that, a month from now, *you* might be the "someone else" trying to read your code.
So we agree that globals are dangerous then.
Thank you, with the state of luarocks and 5.1 to 5.2 changes on debian systems this is a huge help! Lua rocks is great when there's just one version, but when ubuntu installs both 5.1 and 5.2, uses 5.2 but use luarocks 5.1 its a nightmare.
Alternatively you can use [LuaDist](http://luadist.org), it keeps the whole environment including Lua in a separate directory and does not require LUA_CPATH and LUA_LPATH manipulation. It woks with Lua 5.1, 5.2 and LuaJIT on Winodws, Mac and Linux.
What should this mod do?
Do you know anything about gmod coding? Darkrp addons specifically?
https://wiki.multitheftauto.com/wiki/Main_Page
http://code.google.com/p/luaforwindows/ ะะพะฟัะพะฑัะน ััั ัััะบั 
download the Lua source code and build it with make using MinGW or Cygwin
Try http://studio.zerobrane.com . It has Lua well integrated and is easy and friendly to get into.
Please don't. We're trying to get LfW phased out. Everyone should be using [LuaDist](http://luadist.org/) instead. 
Also, if you want to give something a little less traditional a shot, try out the minecraft mod "computercraft". It lets you program lua via a command line interface added on to the game and is actually a great way to start learning basic concepts.
Adding onto this: There is an incredible community behind ComputerCraft with an active forum and a great wiki. You can find out more here: http://www.computercraft.info
Awesome thanks 
As an alternative that does the exact same thing: &gt; Lighting:findFirstChild(maps[i].Index):Clone() 
There are many more options: http://stackoverflow.com/questions/1166684/what-web-server-to-use-for-lua-web-development/1181803#1181803
openresty + lua is a very nice alternative. it's super fast and there are some frameworks on top of it (lapis , gin). the tooling is not great yet but improving.
I am also curious to know.
Why would anyone use this? 
That sugar though... I've always wanted more operators in Lua.
I would like to add a bit of background to this post: * This is my first gtk-using and lua-embedding program in C * I have never solved any problem with lua * It was an offshoot of a solution to a practical need (that's why I also included the ruby 'template' in the repo) * I have not found any decent 'real-life' lua embedding example (so my contribution is: the simplest way to store and use anonymous lua functions from C) * Lua embedding is easy, but the stack is a double-edged sword (imho: a painful sword) * Writing the makefile was too easy; I wonder how portable it is though I'm certainly positively undoubtedly not an expert on Lua, of any side of it, and I'm only recently coming to appreciate C's 'way of life' (or 'zen' if you're so inclined...). Thus I'd appreciate comments, and more even, pointers (no pun intended) to better examples.
Fixed, thank you!
Using a {label="XTerm", fun=function() ... end} format for your menu entry tables might make your loading code a bit simpler since you won't need the nested lua_next calls (not that you need those anyway since you can always load the numerically indexed fields directly too).
Hacker News thread https://news.ycombinator.com/item?id=7540555, also worth reading https://github.com/kikito/middleclass/wiki/Mixins
Good stuff. For one, I like seeing good architecture demonstrated in Lua, and second, I like anything that shows OOP as something other than "is-a" inheritance.
Me too, and recently I saw a thread in Jenkins dev mailing list where the devs were discussing about using Mixins in Java too. I think it is a good technique to be aware of. And the author also mentioned a game he was working on with these mixins, Love and OO, sounds interesting! [1] http://jenkins-ci.361315.n4.nabble.com/API-proposal-refactor-bits-of-AbstractProject-Build-into-mixins-td4694073.html
Maybe learning to search would be a good starting point. * http://www.reddit.com/r/lua/comments/1znwiq/resources_for_learning_lua/ * http://www.reddit.com/r/lua/comments/1vzfzf/how_should_i_read_the_book/ * http://www.reddit.com/r/lua/comments/1v7vn9/where_to_learn_lua/
[zerobrane IDE](http://studio.zerobrane.com/) has built in lua programming lessons.
Open input and output file, read data from input, write it to the output. This is how your operating system's copy command works, too.
I've always disliked mixins because of the whole value conflict issue, but I guess it's an okay paradigm otherwise. I might experiment with it a little bit. 
If u like minecraft , the computercraft mod is a fun way to learn and it gives a great feeling of accomplishment when your robot (turtle) does what he needs to!
Lua's website would be the best to start. 
It's definitely not simpler emitting bytecode, but has a couple of advantages. You can name your variables anything you want without worrying that they clash with Lua's keywords, you can control line numbers in the debug segment for stack traces, and when I started, LuaJIT didn't have goto, so for `continue` support, branching was a bit of a hack.
Pattern matching, destructuring assignment, proper OS threads with nanomsg integration, green threads, LPeg as a first class citizen, bitwise operators, predicates, procedural macros, ... Allright, I'm a little biased, but in a nutshell, what I was aiming for was to work around the compromises which Lua had to make, being an embedded language, to have a more feature rich language, but with the same underlying semantics.
As weird as it sounds, ROBLOX, the game for kids. It would be nothing without people learning lua in it to make new games.
 -- Replace spaces, mark newlines as exceptional input:gsub("\n", "\0"):gsub("%s", Demo()) -- Undo the above input:gsub(Demo(), " "):gsub("\0", "\n") In Lua 5.1 or earlier you must use `"%z"` instead of `"\0"` in the pattern because it doesn't handle NULL bytes. 
A link to what you downloaded might help us understand what you're looking for. I believe you're just looking for luac though.
That one was some fucked up zip file for Linux or something.
You sound like someone who isn't too familiar with programming languages. You'd be best-off with [ZeroBrane Studio](http://studio.zerobrane.com/)
Lua client-side? Like in the browser replacing javascript? Tell me more about that.
You can write lua code that will run over a vm that translates it to js and runs on browser. It's done through an integration with lua51js and LP parser. The interesting thing is that since both the server side and the client side can be written in Lua, you can do things like sharing functions, for example.
If you want to load it from the CLI when you run the Lua interpreter: lua -l test If you want to load it when already in the Lua interpreter: require "test" Enjoy Lua!
Careful with require, IIRC it will only load it once (untested.) Another option might be: loadfile("test.lua")() Other things to research: what's expected to be returned by modules (hint: this changed in 5.2) other bits from the standard library which might be useful here...
OK, now tell me if you are making reference to Sailor Moon with the version names and i will love you forever.
Hahaha, yes I am! and I'm saving Mercury for something special! &lt;3
Another thing I like to do to is to start lua in interactive mode: # lua -i test.lua Lua 5.1.4 Copyright (C) 1994-2008 Lua.org, PUC-Rio &gt; helloWorld(2) Hello world! Hello world! &gt; You no longer need to require("test") because lua loads it automatically, runs it (in this case just defining helloWorld()) and then leaves you at a CLI.
Running `lua` with no arguments starts it in interactive mode. You *can* load and execute a file this way (`dofile`), but you wouldn't want to. You can simply *run* the script by passing it as the first parameter of `lua`. Since you're in Vim, you can do this from within the editor, and map it to a key. For instance, `:map &lt;f5&gt; :!lua %&lt;cr&gt;` will run the file you're currently editing (assuming `lua` in the path). There's no point to doing "whatever tests with methods/functions to check desired results" in the interactive prompt. Anything you can write there, in an anemic line editor, you can do in the original script, with the full power of Vim at your disposal. If you *really* want to enter interactive mode at the end of your script (I honestly can't imagine any scenario where you'd want this), you can just add `debug.debug()` to your script.
Rather than loadfile you can use dofile("test.lua") which is a wrapper to loadfile that loads and immediately executes the chunk of code in a Lua file.
Indeed. The only advantage (which I'm not doing here) is loadfile returns the error, while dofile propagates the error.
Please show us the code, we won't be able to help you otherwise (because it's not clear what you have or what you want).
I have found the Corona irc, the Corona forum and Corona documents the best resources for answers regarding path to launch... ...But super short answer, Yes. short answer, First get your target mobile market dev license. (Google Play is like $25 forever, iOS $99 per year) Then get either your iOS or Android sdk downloaded and test to an actual device(build for device). Decide whether or not it sucks. If so please go back and make it not suck. Then follow your mobile markets guidelines along with Corona's instructions to publish. Sit back and enjoy your 3 to 99,000,000 downloads* *downloads may vary by multitude of factors. enjoy! :)
As far as I'm aware., sublimes console doesn't support reading from std in. So io.read, or cin (c++) won't work with it. You need to provide arguments at runtime, load from a file, or run it in a separate terminal. I know there's a REPL for sublime, but I've never tried it myself, it's called sublimeREPL and is found at https://github.com/wuub/SublimeREPL This is all assuming that the code works from an interpreter or command prompt anyway. 
You can use Moai too. It's open source
Yeah I tested it in lua prompt and there were no errors, thanks :)
I tried out sublimeREPL this morning, and it worked no problem for me. Install sublime package manager, and press ctrl+shift+p and install sublimeREPL, and follow the instructions. It's really cool actually!
First a comment. The indentation was confusing. All that stuff is part of one function, so it should all be one tabstop indented. I see that you're trying to organize the sections together, but I personally don't like to look at code like that. Second, I don't know anything about Garry's Mod, or what functions it defines. However, is it necessary to call SetParent() on all these other elements you are creating (TabThree, TabFour, etc.) so that when you call close on MainMenu, they will all get closed?
Sorry for my horrific coding, im not the best at coding. And yes thats what im trying to achieve. When you press 'accept' which will be relevant to the page being displayed, the entire thing will close and the pages will close too, and will also be contained in the frame, not the area behind it
This is very helpful.
Oh, to be honest I haven't tried uploading files yet. I'll give it a try and if doesn't work I'll certainly find a way so it does =)
First of all, you gravely misunderstand how `Sleep()` works. It causes the current thread, i.e. Lua and *whatever called Lua* (i.e. your emulator) to pause for a number of seconds. In an asynchronous environment, this allows other threads and callbacks to run, but I don't think that's what you have. Now to the code... You have local names like: local personality but then you do: personality2 = memory.readwordunsigned(start+100) Do you mean to create arrays? In that case you should have those two lines as: local personality = {} personality[2] = memory.readwordunsigned(start+100) Or declare all the local names: local personality, personality2, personality3, personality4, personality5, personality6 As it is, you're writing to `personality2` as a global variable. Anyway, the actual reason you're going so slow is because you're opening and closing the files each time through the loop. Do this instead: local Slot0Name = io.open(".\\Slot0\\Slot0Name.txt", "w") -- you don't need the "+", that's only if you want to both write and read from the file while true do -- start the loop here Slot0Name:write(pkmnname[species], "\n") -- skip the `..` the write function lets you output multiple strings at once -- The terminating NULL is important here, I hope your app knows to only read one line at a time Slot0Name:seek("set", 0) -- This is the important part, it rewinds the file to the beginning and also (I hope) has -- the side-effect of flushing buffers so other apps can see what you just wrote end -- outside of loop -- Lua will close the file handle when GCed The newline is important, as I mentioned, because the next thing you write may be shorter than the first. Adding the newline tells you where the end of the good data is. Also, I assume the `Debug.txt` file is just for your eyes and not being read by the app, so don't seek on that file but keep adding new lines to the end at let it grow. But what I have to ask is do you really need multiple files? If you could find a way to do with only writing to one file handle that'd make this much simpler. I suppose OBS needs it that way so what I'd do is have a second program running that reads a list of lines and demultiplexes them to individual files. (insert pastebin here if I ever get around to writing it) As to being friendlier to your frame rate, I assume calling `emu.frameadvance()` does just what the name says. So if you want to only dump the stats every 10 frames or so, then put in extra calls to that function. Moreover, I'd do the minimum necessary in each frame. Everything up to line 236 has to be done in one frame. And a few other things, all of those reads from memory should be kept together. Once you've read all the stats you need you can start letting the frames tick. Try calling `emu.frameadvance()` before dumping each slot, that's 6 frames, then pump a few more frames in a `for n=1, ... do ` loop where you can change the loop count to control how often you update. 
update: I figured it all out, everything works, In case you are interested here is the script: http://pastebin.com/gNzPKLfe
"\n" is not NULL it is newline.
I came by this snippet on LuaCode.org after I made my own type-checking submission. I found a couple problems with this pattern, which I detailed in the comments there, and I'm going to reproduce here. New Lua users may run across these bugs in the pattern and not understand the issue. `and` and `or` are not proper ternary operators, so this pattern fails in a few unexpected ways. If you try to handle anything that might evaluate as false, it will either error erroneously, or produce entirely incorrect behavior (perhaps coercing the parameter incorrectly!). Consider the following examples in which these fail. function transmogrify(n) n = type(n) == 'boolean' and n or error('got '..type(n)) print(tostring(n)) end transmogrify(false) --&gt; error: 'got boolean' function transmogrify(n) n = type(n) == 'nil' and n or error('got '..type(n)) print(tostring(n)) end transmogrify(nil) --&gt; error: 'got nil' Erroneous errors. Neither of these should produce an error. But because `n` evaluates to false in the `and/or` clause, the first part of the clause evaluates to false, causing the `error` part of the clause to be incorrectly evaluated. It's probably not a common use-case to assert that parameters passed are booleans or nils. A function expecting a true/false/nil value may not check their parameters at all, so the programmer may not run into such issues at all. But consider a function which accepts multiple types: function transmogrify(n) n = type(n) == 'boolean' or type(n) == 'number' and n or error('got '..type(n)) print(tostring(n)) end transmogrify(false) -&gt; no error, but prints 'true'! This on the other hand may very well be a common use-case. And it fails even more miserably, because the failure doesn't raise an error, but instead coerces the parameter into the wrong value! A programmer may not catch the mistake, and may have a problem later on when they don't realize that their argument magically turned from a false into a true. It's a nice idea, but it's broken in a bad way. Instead, you should use a more verbose type checking pattern. There's the classic boilerplate: function myfunc(n) if type(n) ~= 'sometype' then error('sometype expected, got '..type(n),2) end -- or assert(type(n) == 'sometype','sometype expected, got '..type(n)) end I dislike having this boilerplate on all my forward-facing API as well, so I designed my own pattern to solve it, [which I posted on LuaCode as well](http://snippets.luacode.org/snippets/153). I may post this in this subreddit for the benefit of others. 
Typo and force of habit from having to deal with C strings. I intended to say "newline" of course.
I had an hour to kill and wanted to show you what I meant about using a second program. Instead of writing each file directly, this pipes the extracted data to another Lua script that does the formatting. It will run in its own process and won't significantly effect the speed of the emulator. [Main script](http://pastebin.com/eYWGQRwL) [Helper script](http://pastebin.com/x58JnEpB) As well as refactoring everything so it's much easier to read. 
There is no bug ticket for this, as it was never reported by anyone till I found and fixed the bug. It is fixed in 2.4.10 (whenever that will be released), and is available in both trunk and the 2.4.x branch of the httpd source repository. If you want the fix immediately, just check out the 2.4.x lua module (svn co https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x/modules/lua/ ) and run: apxs -cia mod\_lua.c lua_*.c -lm -llua (ymmv) If you find anything else, you can file a bug at https://issues.apache.org/bugzilla/ or contact me directly at humbedooh [at] apache [dot] org :)
 repeat for i = 0, 5 do local hp, maxhp = readhealth(ipp) -- etc That should be `readhealth(i)`. And I forgot to check for end-of-file. So change repeat hp, maxhp, lvl, name = io.read("*n", "*n", "*n", "*l") until name to hp, maxhp, lvl, name = io.read("*n", "*n", "*n", "*l") if not hp then break I was going to suggest wlua.exe, but I see Windows tries to start a new console whenever you use `os.execute`. Getting rid of it will need some external module but I can't tell you off the top of my head what to use. 
Saw pretty nice use-case of that at the office this morning: integrated time consumption tracker in Awesome DE. That horrible percentage of slacking time during work hours... xD Edit: ah, here it is [mentioned time tracking Awesome widget](https://github.com/povilasb/awesome-time-tracker)
io.popen causes the command window to flash. I found a way to prevent this on https://groups.google.com/forum/#!topic/scite-interest/tXdgMX9r9og/discussion. So the command window is no longer an issue... Also, on line 201-202 you have: &gt; local pipe = io.popen("**lua writeslotfiles.lua**", "w") &gt; **pip**:setvbuf("line") should it be &gt;local pipe = io.popen("**writeslotfiles.lua**", "w") &gt;**pipe**:setvbuf("line") ? Also, I made your check for end-of-file change above, and I get: \writeslotfiles.lua:41: 'end' expected (to close 'if' at line 39) near 'name'.. Reverting back to the previous 'until name' setting causes the emulator to instantly crash. changed line 40 to break end, now getting \writeslotfiles.lua:48: 'until' expected (to close 'repeat' at line 37) near 'end' while true do for i = 0,5 do local hp, maxhp, lvl, name repeat hp, maxhp, lvl, name = io.read("*n", "*n", "*n", "*l") if not hp then break end name = name:gsub("%s+", "") local slot = openslot(i) slot.hp:write(("%.2f%%"):format(round2(hp*100/maxhp))) slot.lvl:write(("Lv%d"):format(lvl)) slot.name:write(name) closeslot(slot) copyimage(i, name) end Do I put an end? If so, where?
 \writeslotfiles.lua:41: 'end' expected (to close 'if' at line 39) near 'name'.. ^^^^^^^^^^^^^^^^^^^^^^^^ Lua tells you what it needs. Anyway, I'll explain the concepts from basics because it leads to an interesting and useful application of Lua. The prototypical read-each-line-from-file code is: while true do -- loop forever local line = io.read() -- retrieves a complete line (assumes only text data) if not line then -- the `read` returns `nil` at end-of-file break -- exit the loop end -- if block end -- while block But what we did is read six lines at a time. To do this I just tossed in a counting loop. while true do -- loop forever for i = 0,5 do -- loop and count from 0 to 5 local line = io.read() -- retrieves a complete line (assumes only text data) if not line then -- the `read` returns `nil` at end-of-file break -- exit the loop end -- if block end -- for block end -- while block But there's a problem, which loop is being broken out of? That ends the `for` loop then restarts the `while`. We want to stop all looping. Well, tl;dr in the this particular program ending the loop ends the program so we could just substitute `break` with `os.exit()`. (In complex programs there are reasons to avoid `exit` but this is simple enough not to worry about it.) Of course if you want to do something else after the loop that isn't an option so let's continue. The first thing we can do is put an exit condition on the outer loop. local end_of_file = false while not end_of_file do -- loop until EOF for i = 0,5 do -- loop and count from 0 to 5 local line = io.read() -- retrieves a complete line (assumes only text data) if not line then -- the `read` returns `nil` at end-of-file end_of_file = true break -- exit the for loop end -- if block end -- for block end -- while block Simple, traditional, not very pretty. Because of how the loops are nested, we could combine them into one block. local i = 0 while true do -- loop forever local line = io.read() -- retrieves a complete line (assumes only text data) if not line then -- the `read` returns `nil` at end-of-file break -- exit the loop end -- if block i = (i + 1) % 6 -- counts from 0 to 5 then repeats end -- while block That's even uglier. The counter is moved to the bottom of the loop. I want to keep it at the top so it looks more like a `for` loop. Can we do that? Yes. local i = 0 local function count_to(n) i = (i + 1) % (n+1) return true end while count_to(5) do -- loop forever local line = io.read() -- retrieves a complete line (assumes only text data) if not line then -- the `read` returns `nil` at end-of-file break -- exit the loop end -- if block end -- while block And Lua gives you an easy way to write this. function count_to(n) local limit = n + 1 local counter = function(count) return (count + 1) % limit end -- `for-in` loop uses a function and a starting value return counter, 0 end for i in count_to(5) do -- count 0 to 5 forever local line = io.read() -- retrieves a complete line (assumes only text data) if not line then -- the `read` returns `nil` at end-of-file break -- exit the loop end -- if block end -- for block The counter is simple enough we can use a regular function. But we're still looping forever and breaking when the line is `nil`. Could that test itself be moved into the loop condition? function read_and_count_lines(file, numlines) local limit = numlines + 1 local reader = function(count) local line = file:read() if not line then return nil end return ((count + 1) % limit), line end -- `for-in` loop uses a function and a starting value return counter, 0 end for i, line in read_and_count_lines(io.stdin, 5) do -- do stuff with line end -- for block Wow, that looks a lot neater than what we started with. And you can hide the `read_and_count_lines` function in a module if you're going to use it multiple times. If you need to pass arguments to `read` and have multiple values it would look like... ... local num,name = file:read("*n","*l") ... return count, num, name ... for i, num, name in read_and_count_lines(file, 5) do ... Exercise for the reader: how would you write a function so you could loop like this? for i, num, name in read_and_count(file, 5, "*n", "*l") do And one last thing, I'd like to go back to using a `for i=0,5` loop. Can you `return` from a function then start it again at the same line? This is what coroutines are made for. function read_and_count_lines(file, numlines) local limit = numlines + 1 local reader = coroutine.wrap(function() while true do -- that infinite loop again for count = 0, 5 do local line = file:read() if not line then return nil end -- yield acts like `return` but the coroutine can be resumed later coroutine.yield(count, line) end -- for end -- while end) -- the start value is ignored return counter end for i, line in read_and_count_lines(io.stdin, 5) do -- do stuff with line end -- for block That actually looks like what we started with. But the outer shell of the loop with the logic that gathers data and decides when to stop is contained in the coroutine. The innermost part, where we actually do something with the line is now written outside the loop in a simple `for-do` block. This is called "inversion of control" and is why coroutines are one of the most desirable features of Lua. (Actually, as was discovered by Scheme years ago, with coroutines or continuations plus tail-call recursion, you can eliminate all looping blocks from a language. But that also makes code extremely difficult to read so we keep loops around as useful high-level abstractions.) 
Yep, definitely floating point error
To put it simply: Whenever you do arithmetics with floating point numbers, don't ever assume that the result is *exactly equal* to anything. (And this has nothing to do with Lua.)
What do you get when you divide 1 by 3? 0.333333333333333333 (repeating forever) Why so messy? In base 10 (aka 'decimal'), you can neatly represent 1/10 (.1), 1/100 (.01), 1/1000 (.001), and so on, but not 1/3rd. In base 3, you can easily represent 1/3 (.1), or 1/9 (.01), and so on, but not 1/10th. In base 2, you can easily represent 1/2 (.1) or 1/4 (.01) and so on, but not 1/10th. Computers use base 2 (aka 'binary'), so the base-10 number in your code (0.1) is represented imprecisely inside the machine in binary. Try running the following code: -- iterate from .1 to 10 in increments of .1 for i=.1, 10, .1 do print(string.format("%.17g", i)) end 
To contribute and clarify to this. Lua can be compiled to use differing data types to represent the Lua type(value) == "number" type, up to and including integers. The exact implementation of floating point values should be dependent upon the platform on which the Lua VM was compiled on. This, coupled with the above mentioned fact that floating point values are not perfectly precise by nature means that you shouldn't always expect perfectly consistent behavior from numbers.
Thank you so much, you went above and beyond to teach me! This really clears things up. I was trying to find something online that would help explain like you just did, but everything was either not what I needed, or way too complicated to follow. I'd give you gold again if my Paypal wasn't disabled. :)
Great explanation, thanks!
I won't! Thanks.
Could You clarify, which Lua version are You using, please?
The one included in the latest LรVE release.
Read [this site](http://floating-point-gui.de/). It will explain exactly what's going on.
This is a bit misleading, since Lua uses floating point for all numbers, including integers. It would be more precise to say that floating point numbers can only accurately represent integers and other multiples of powers of two (so 1/2, 1/4, 3/4, etc are all accurately represented)
Lua comes with a global `_VERSION` variable that can give you this info print(_VERSION) without us needing to know what version Love is shipping.
5.1!
Also, if I'm not mistaken, the latest version of LOVE (9) started using luajit.
I was reading a little bit. I would like to know if Lua actually happen to deal with these problems internally in some way or do I have to be aware of this most of the time? I mean, I've never had any trouble with this, and seeing how easy to reproduce it is, is just weird how I've never saw it.
No, you have to be aware of it. It doesn't actually cause problems too often in practice. The biggest thing you have to be aware of is that `==` will not work reliably for numbers unless you're careful about what arithmetic you perform on them.
io.popen() and os.execute() fork() and exec() using $SHELL to pass what you give them. This makes them dangerous if you don't trust the person executing your program, or at best unpredictable. Also, the performance will be dire.
I was already planning on sandboxing most of the io- and os-library and do a hash check on plugins to validate their access to these libs. The performance however is a strong argument against it... I did not expect the difference between a binding and a call to a program to be huge. So you would recommend Lua/C-bindings throughout, or is there another solution that is more plugin-friendly? (meaning plugins can be written by third parties only requiring Lua knowledge)
for /u/rjek, Does lua have anything like perl's exec(), which calls execvp(3) if there's no need to parse shell metacharacters? for the OP, if you find that you'll be calling the same utilities numerous times, you may want to get bindings for the respective libraries if possible. For example, if you call gzip/gunzip a lot, consider bindings to zlib (i realize this may already exist -- it's an example of a thought process). 
Calling external programs is generally more error-prone, less portable (`grep` does not necessarily behave the same on all platforms or may even be unavailable) and has a lot more overhead. So avoid it, if you can.
This made me also think that the user's environment ($PATH, alias, etc.) can alter the behavior of external programs. In my shell scripts, I often times explicitly use the path of the external program (/bin/ls) to help reduce (not eliminate) the problem, but this can be distribution specific in some cases. I've been bitten when I've given a simple script to someone and they have ls aliased to 'ls -ald'. 
As I said, there is no need for any cross-platform capabilities with this project. For now I have chosen to use io.popen() for prototyping purposes and if the module works well i'll create a binding for it.
No. Lua's written in ANSI C apart from two optional things, popen() and dlopen().
No, but you could add it relatively easily, which might in some cases be safer than os.execute() and simpler than writing a full binding. (As repeatedly noted, you could easily end up spending most of your time waiting for the scheduler. *Caveat codetor!*)
There probably is, but since other languages are more famous, the good tutorials sometimes get buried 
I have recently discovered: http://learnxinyminutes.com/ Mostly not as good as the lua tut, but pretty good.
:o
I see this as a side-effect of LuaJITโs continuing growth in popularity. As /u/jballanc said, LuaJIT aims for fully compatibility with Lua 5.1; although it does back-port a number of 5.2 features as extensions, and can be made more compatible with Lua 5.2 if one compiles it with the `-DLUAJIT_ENABLE_LUA52COMPAT` flag. Anyways, I think a lot of library authors are being drawn to LuaJIT for both its performance and its terrific foreign-function interface, which is great for wrapping Lua code some existing C.
I'm fairly sure LPeg runs in 5.2. In fact, I wouldn't be surprised if it were one of the earliest things ported to 5.2, given how Roberto is its main maintainer.
I concur, LPeg supports 5.2 just fine. You could actually consider LPeg part of Lua, it will always work with the latest version. There have even been talks of adding it to the standard library. Metalua is still supported actively by its author, but it is a very extensive modification of Lua which generates bytecode, and that bytecode is still, as of now, Lua 5.1 bytecode. I am not sure the Metalua compiler will ever be ported to 5.2. If I was the author I would jump straight to 5.3 since there are already work releases for that version. Lua 5.2 will probably have a shorter lifetime as the "latest stable version" than 5.0 and 5.1 did.
Blah blah blah bug blah blah blah never tested blah blah blah Roberto blah blah blah fix it blah blah blah. Here is a better clue: In Lua 5.2 modules do not set globals.
&gt; All I'm saying is, as the code is now, the module "lpeg" gets created in 5.2, but the name "lpeg" never gets attached to it. What does "attach" mean? In Lua 5.1, luaL_register would store the library in a global variable called "lpeg", but in Lua 5.2 luaopen_lpeg simply returns the module. If you are calling luaopen_lpeg from C, the module will be left on the stack. Then you can do whatever you want with it, e.g. put it into _G. 
__pairs and __ipairs are invaluable new features that allow you to implement ordered hashes without needing a special iteration function (like what's shown in the Lua wiki). This alone is reason enough for me.
luxio, my POSIX binding and high-level IO interface. https://www.rjek.com/software.html
void, a module that implements typed, and transferable between threads, buffers. It's meant as a compliment to lanes and other modules that enable threading with separate states. https://github.com/wizgrav/lua-void
http://www.pouet.net/prod.php?which=61950 F11 to bring up a cursor for live ~~coding~~ *programming* F1 to run the lua ~~code~~ *program* in the current buffer F2 creates a new buffer Ctrl-tab to switch buffers Try loadBuffer("prod.lua") then F1 
 function MyScreenPlay:start() self:printValue(5) end function MyScreenPlay:doubleValue(value) return value * 2 end function MyScreenPlay:printValue(value) print(self:doubleValue(value)) end No calling seems to be taking place.
/u/AnonymityPower is right, in just this snippet no function is called. However, if you were to call `MyScreenPlay:play()`, we see that it calls `MyScreenPlay:printValue()`, which in turn calls `MyScreenPlay:doubleValue()`. Order of function definition doesn't matter, because all functions are just values in Lua, so the code would be basically equivalent to, for example, the following: MyScreenPlay.printValue = function (self, value) print(self:doubleValue(value)) end MyScreenPlay.start = function (self) self:printValue(5) end MyScreenPlay.doubleValue = function (self, value) return value * 2 end Just like it doesn't matter how you order a number of assignments (as long as you don't depend on the value of any of the other variables in the series: x = 30 y = 10 is no different from y = 10 x = 30
That looks really cool! Is posix_fadvise implemented? I offered a patch to luaposix but for some reason couldn't get it to work. No bugs or errors, just failure to prevent caching in my nichey use-case. If you got it to work I could resume porting OpenPyCR to lua, to control openpcr.org..
No, but it'd be trivial to add. I've added it to the list :)
Thanks! :)
You're a hero! Will try it out when I'm next able to hack on the OpenPCR. :)
It is obvious that you have put a lot of work into this and I like the idea of a modal mail client with Lua scripting. I used Mutt a long time ago, but it was a pain in the butt doing anything beyond what was the standard so I eventually gave up on the idea. I'll have to give your client a try sometime. But I do have a suggestion: don't list the first feature of your product being something it can't do. It's like you're telling me, "Don't use my software, it sucks." I personally would get rid of the Maildir only bullet point completely and just stick to listing its strengths. I nearly ignored your post completely because of it. You mention it in your FAQ which is where I'll go if I'm interested in learning more. Now, in the FAQ I'd push the fact that by only supporting Maildir it keeps the client simple and allows you to focus on what's really important. Makes me feel like your priorities are towards making an awesome mail client. I'll figure out IMAP/POP3 support if I like your product. Also, while I realize it's a CLI app, some screenshots wouldn't hurt. Everyone likes screenshots. Thanks for taking time reading my suggestions. I know criticism can be hard to take but I really don't want people to have the same reaction to that bullet point as I did and ignore what looks like an interesting mail client. 
Order of function definition does matter in some cases (in terms of function visibility and ability to be called) but in this case that isn't at play.
Indeed. The point is that with lua 5.2 you **need** to use the return value from require/etc. instead of assuming it will set a global. Because lua 5.2 no longer sets that global for you. So for lua 5.2 you need: local lpeg = require("lpeg") instead of the common 5.1 version: require("lpeg") and that translates to use from C identically.
At a glance, you're doing the same operation over and over again with copy/paste and just changing the values. Not a Lua thing (more general programming advice), but find a way to make a generic function implementing the loop which takes as a parameter the coin size.
I'm really glad by your answer, that's exactly what I wanted, someone to tell me I'm doing it wrong and tell me how I can look at it differently, with your code I can get a clearer look at how to handle things better not just in lua but also in general programming, I'm very beginner and just trying to improve, really appreciate your feedback, this is a lesson learned for the rest of my life man. About the variables yeah I forgot to change it, won't forget again. +1 for being an awesome person 1 mre thing, can you shed some light into how does the for work?what does the _ do? I know the ipairs iterates throught the table but no idea what the _ does
_ is just to get the first value from ipairs, because it returns two values, a key and the value assigned to that key.
&gt; I believe in being clear over being polite I thank [insert your Deity of choice here, or lack thereof] for people like you! Edit: relevant username? I'm sold to satanism! :-P
Thanks
In general, write programs, read examples on Rosetta code and github, read answers on stackoverflow and ask for feedback on reddit. 
btw, when doing operations involving remainders its better to use whole integers than decimals. Otherwise, thingsthat are not powers of two (like 10 centavos) will introduce annoying rounding errors. If I were you, I would represent money as its amounts in centavos instead of as its amount in reais.
&gt; use English for variable names, ... specialy if you ask questions in an english forum :) In case you are curious, "R$" are Brazilian reais, "nota" is "bill" and "moeda" is "coin" in Portuguese. BTW, I think your `countAmountOfRemainder` functions were a bit of overkill, since they are just aliases for builtin operators. I would just use those operators inside the loop or make a single function that returns both results at once. (Having a couple of functions in the example does illustrate how to use them though)
There's a sizable community on the ComputerCraft forums that has written a good amount of software, including a (surprisingly good) IDE and a few graphical operating system shells. Good stuff!
Link for those interested: http://www.computercraft.info/
this is a really cool collaborative site: http://turtlescripts.com/
You also need an up to date version of Minecraft Forge. also link for a guy who can help you install all of that: https://www.youtube.com/watch?v=M9EtEI0_uZQ
Ah, I was wondering that, I thought it might be the valuta. Thanks for the translation :) In hindsight, I completely forgot to make use of Lua's awesome multiple return feature, which is a shame. But at least this is quite readable so there is that :P
I'm glad I could help :) The _ is a variable, the ipairs returns the position and the value of the item in the table, but I'm only interested in it's value. Using the _ as a 'dummy' variable is a convention in Lua, basicly it says 'Yes, this is a variable, but we don't care about it, continue reading" If you feel like you got the basics of programming (not just Lua, but programming in general) try different languages, re-make this program in Python, PHP, Java, Lisp, JavaScript, Perl, C, C++, C#, Erlang, Prolog, BrainFuck (though that might be a challange) etc, etc, etc. Every language has a, philosofy, if you will, about how one should program and most of those languages have pretty good ideas, really nice features or other constructs that... you'll simply never think of using if you don't actually work with them, Oh, and if somebody ever *ever* tells you 'don't use language &lt;x&gt; because it sucks, remember that there are only 2 different programming languages, those nobody uses and those that everybody bitches about. Don't be afraid to use a language. :)
ComputerCraft is actually what first got me into Lua, it's awesome.
^^ thanks
No problem. By the way, there should be a reply button under the comment which you can use next time.
Oh I didn't know that. So basically like how Python uses myFunc(self,x,y) ?
I guess... Have little to no experience with Python. This might help: http://www.lua.org/manual/5.2/manual.html#3.4.10 Especially the very last part: " The colon syntax is used for defining methods, that is, functions that have an implicit extra parameter self. Thus, the statement function t.a.b.c:f (params) body end is syntactic sugar for t.a.b.c.f = function (self, params) body end "
The explicit self parameter is similar to Python. The difference is that Lua has separate syntaxes for `a.foo()` (static function call) and `a:foo()` (method call), while in Python the `.` defaults to method calling and `a.foo` returns a bound method.
This looks about what you want: http://files.luaforge.net/releases/luasocket/luasocket/luasocket-2.0.2 Also, if you plan on using any other Lua libraries you should look into LuaRocks. It makes installing libraries much easier.
It's included in lua dist: http://luadist.org/
Neat! I'm excited to try this out the next time I get the opportunity. I am a sucker for finding Lua in my programs.
&gt; If you're looking for a web-interface then I'd struggle to think that using Lua made sense, sadly. (i.e. If you use lua you're probably restricting yourself unnecessarily.) The backend can be happily done in Lua. The front-end too! (https://daurnimator.github.io/lua.vm.js/repl.html), though I'm not going to :P &gt; For indexing? I do nothing. Because I restrict myself solely to Maildir hierarchies I can use opendir, readdir, and cache in memory based on the mtime of the parents. This works even for opening multipl folders at the same time - which I'm pretty proud of. (e.g. You can view the union of messages in ~/Maildir/foo.com/ and ~/Maildir/bar.com/. Using indexing, to allow virtual-folders, or opening all mails ever received that contain "Sender:bob" would be neat but I didn't think I needed it.) Ah, so you're using more than plain Maildir (Maildir doesn't strictly allow more than the tmp/new/cur subfolders) I definently want some type of tagging scheme, it was so liberating to get away from strict hierarchys. Nevermind the frequent searches for an email based on a vague memory of a couple of words in the body. --------------------- My biggest thinking point at the moment is how to sync between devices; if you have any ideas or pointers I'm listening! Considerations: - my entire mail database is too big for most of my clients (e.g. a mobile device, or temporary work station), only a subset can live on the clients - tags/`info` must be synced - local search (of subset) is desired - offline/netsplit clients should be able to add/remove tags - how to deal with conflicts? Ideas: - rsync with fuzzy matching - how to deal with tags? keep extending the `info` field? - web-api; and cache locally (e.g. indexeddb) - version control system - probably a silly idea, but I wonder if you can cook up something with git shallow clones....) - riak? - doesn't work well on different sized nodes; or temporary nodes 
Well I assumed that if you're talking about a web-based project that the mail will be pulled on demand - so the whole archive will only need to be stored on that one system. (i.e. If all mail won't fit on a mobile that won't matter.) Did I misunderstand? If that is the case and you're essentially writing a gmail-alike you can store tag-details in a database, (mysql, postgres, redis, whatever), and you don't need to worry about syncing either the mail or the tags. (As for `lumail` it is just Maildirs, but they're supported recursively: ~/Maildir/ ~/Maildir/{ new cur tmp } ~/Maildir/.foo.com/ ~/Maildir/.bar.com/{new cur tmp} ~/Maildir/.bar.com/{new cur tmp} ~/Maildir/.foo.com/{new cur tmp} ~/Maildir/.foo.com/{new cur tmp} ~/Maildir/.foo.com/.meow/ ~/Maildir/.foo.com/.meow/{ new cur tmp } )
If you find this project interesting you might also want to take a look at [luakit](http://mason-larobina.github.io/luakit/). There are a few things to note: 1) This browser is based around a principle similar to that of [Pentadactyl](http://5digits.org/pentadactyl/index), [vimperator](http://www.vimperator.org/vimperator/), [dwb](http://portix.bitbucket.org/dwb/), [vimium](http://vimium.github.io/), [uzbl](http://www.uzbl.org/), [surf](http://surf.suckless.org/) and probably others: That websites can be navigated with a keyboard alone in a vi-like fashion and it can be more efficient than with a mouse. However, all of those also support mouse input. 2) luakit makes heavy use of Lua, is rather minimal and pretty damn fast and light (the only browsers I have used that are leaner and faster are dwb and surf) 3) Development seems to have been on halt for about a year and due to the nature of the WWW that is rather problematic as you will always find a website that is not rendered correctly, etc. I am writing this because I have followed all of these projects with a lot of interest and I must honestly say that I don't see how yet another small browser could have a chance to survive in a market that is starved by the big players. Most of these projects could probably not be merged, but instead of splintering up the community that is willing to try alternatives to Fx and Chrome even more the active developers might want to at least have a look at the other projects and try to work together. Because a browser is a ton of work and not feasable for a team of 3 or 4 peoples free time. I would much rather see a team pick up Luakit and continue work on it rather than start another new project.
Over the course of the Sandcat development I also stumbled upon a text mode web browser that uses Lua for scripting language http://elinks.or.cz/
Neat, will immediately try out and compare to lynx. Thanks.
Ah yes, I know about environments and I should have mentioned that I am not using the deprecated "module(...)" functionality and neither am I explicitly creating local environments for my modules. They are of the type local my_module = {} my_module.my_func = function() -- here: access global state variable vs. access module specific reference to global state variable end return my_module I also know about _G, but as I am not enclosing anything in different environments I do not need to reference it directly. //edit: ~~I'm not sure what you are suggesting.~~ Didn't see your edit before The global variable (eg. STATE{}) would not be defined inside a module, it would be defined in the main Lua-file (application level) where the main loop of my program resides and modules would only *access* or modify fiels in the existing global table (STATE{}).
I made a trivial change to allow you to write: alert( "Message" ) Rather than "print". Would you be interested in seeing that?
It's cleaner to pass in STATE and access the module's reference to it. my_module.my_init = function(state) my_module.STATE = state or {} ... return self end This way you can have more than one of your own module loaded, each with their own state, managed by the application. 
a kind of third way: make your main Lua-file a module or fake it by `package.loaded["main"] = STATE` somewhere near the end of that file. If you do it this way, you can `local main = require "main"` in your modules. It may or may not be prettier than just `local main = STATE` or `local main = ...`.
I don't actually plan to load any of these modules more than once per application, otherwise I would not have them made stateful through local variables. So, when passing the state reference in my_module.init() and the module would not be initialized more than once, would there be a downside to storing the reference like this? local my_module = {} local state_ref = {} my_module.init = function( _state ) state_ref = _state end my_module.some_func() return state_ref.some_number * 10 end return my_module Here *state_ref* would be local to the module and thus not accessible from outside because it is not in the table *my_module* but only in the closure of some functions in that table.
Yep, looks good.
In that case I could just create a small module only tasked with holding and giving access to the state and then load that module at the beginning of my main Lua-file into a global variable. -- main.lua STATE = require("state_manager") -- module for holding the state Or am I misunderstanding something? Because that seems like a more convoluted approach to the same result of having one global variable *STATE* in my main.lua.
This makes sense. One thing to add is that some of my modules require an initialization anyway, so calls like some_module.init() will be in my *main.lua* anyway. Adding an argument to that call would not change much of the asthetic. Besides wouldn't I have to have at least one initialization of the state module somewhere after local STATE = require("state_manager") in my *main.lua* to make sure my global state is up to snuff before accessing it in my modules? Kind of like a guarantee that the state module provides at least a certain minimum of information before anyone uses it. I guess I'll just do a git commit of the current solution, try out your proposal and then decide what works better for me. Thanks for the input.
There is another option: make your modules stateless instead. Here's how: http://kiki.to/blog/2014/04/11/rule-4-make-stateless-modules/ Then the obvious place to put the dependencies will be the module constructor.
I thought of that approach in the very beginning, when planning the architecture on paper, but stateless modules would force me to go through great lengths for certain modules and leave me with much less cleaner code. Since I decided very early that all modules would only be loaded once I have the freedom to make them stateful and I would like to take advantage of that. Thanks for the suggestion anyway.
&gt; Well I assumed that if you're talking about a web-based project that the mail will be pulled on demand - so the whole archive will only need to be stored on that one system. (i.e. If all mail won't fit on a mobile that won't matter.) Did I misunderstand? I intend for the client to work on a partial archive while offline; you won't have ALL your emails locally, just the last 30 days or something. These offline changes need to be synced back to the main server. Once you have multiple clients coming in and out of network connectivity, merge conflicts of tags are unavoidable. I think I've settled on using MC-Sets (https://github.com/aphyr/meangirls#max-change-sets) for Labels. &gt;(As for lumail it is just Maildirs, but they're supported recursively: ~/Maildir/ ~/Maildir/{ new cur tmp } ~/Maildir/.foo.com/ ~/Maildir/.bar.com/{new cur tmp} ~/Maildir/.bar.com/{new cur tmp} ~/Maildir/.foo.com/{new cur tmp} ~/Maildir/.foo.com/{new cur tmp} ~/Maildir/.foo.com/.meow/ ~/Maildir/.foo.com/.meow/{ new cur tmp } ) Ah, I know that as `Maildir++` (not strictly Maildir)
You have an interesting idea, and I hope it works out for you :)
If your alert() shows a nice popup GTK dialog then sure go ahead make a pull request on github. Otherwise if you'd prefer to write alert() instead of print() you can do first thing in config.lua: alert = print 
Yeah the former. I thought it was a shame you took a cute Gtk application but then fell back on the console for output. 
Merged, thanks! See my comments regarding style though.
I'm usually more careful about style, but yeah that was a quick hack as I was browsing /r/lua ..
Yep, this is how I would do it. There are all of these modules, and this global STATES{}, clearly state is a first class entity. It should have a module too. 
In my opinion, the pain of per-module state is counterbalanced by increased modularity and readability in each module. Once initialised in a module, it's the same level of convenience, but the declarations are *right there* when you come back in 12m, instead of leaving you thinking "WTH is 'foobar16'? Oh yea, declared in some other file. I wonder what type it is?"
The missing locality between declaration and usage is definitely a downside to global variables but in the case of just one very specific global table across the entire application, especially if it is named "STATE", this would probably not be an issue. Still, for the purpose of documentation I'm glad I did not stick with the global table. Using a module for the state has the brilliant property that I can document it in-code rather than through comments or explicit tex-documentation.
http://kripken.github.io/lua.vm.js/repl.html
If what you are looking for is client side Lua execution, in addition to the lua.vm.js project, be sure to check https://github.com/logiceditor-com/lua5.1.js and https://github.com/gamesys/moonshine
We actually want to make a game where the players can script their own codes for the virtual pc. So I think we'll need something like a PHP interpreter.
You don't really install Lua do you? I mean, it's primary purpose is to be an imbedded VM. If you mean the library and the likes to make functions for Lua, download them from the website. Otherwise, if you mean an IDE, try Scite, LuaEdit, LuaIDE and Zeus.
Simplest way is this: https://code.google.com/p/luaforwindows/ Not sure that it's 5.2, though.
http://www.lua.org/download.html look under the "binaries" section
For server-side execution, you can try http://wiki.nginx.org/HttpLuaModule (aka ngx_lua) or Apache's modlua http://www.modlua.org/
LuaDist would be my emphatic recommendation. Right after "ditch windows forever". :)
&gt;Download Lua_V5.1.4-46.exe from Google Code I'm pretty sure it's not.
This is the best answer. Everything I was about to say is explained well there. http://luabinaries.sourceforge.net/ http://luabinaries.sourceforge.net/download.html 