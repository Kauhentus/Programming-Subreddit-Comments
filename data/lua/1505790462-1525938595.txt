I use wxLua; it works well; for usage check the wx C++ library and wxLua sourcecode and, for me the best example, the Zerobrane source code. The latter contains most of what you will want to do, you just need to find it in the source which is not too hard.
I put a lot of hope into libui and its Lua bindings here the original C lib https://github.com/andlabs/libui Here the 3 Lua binding libs people created so far https://tset.de/lui/index.html https://github.com/zevv/libuilua https://github.com/mdombroski/libui-lua Others http://tekui.neoscientists.org/index.html https://peersuasive.github.io/luce/ luce is a Lua bindings lib to Juce https://www.juce.com
I've configured my editor to make a luacheck pass to any lua files I open with it on each save. This is one of the things it would detect.
Problem is luacheck doesn't play well with multiple files. It doesn't care about require.
Well if you use require to modify the global state, then no. require "declare_globals_here" GlobalFoo.bar --&gt; luacheck warning But if you use require to return a local table, then it works. local NicerThing = require "nicer_thing" NicerThing.baz() --&gt; luacheck is happy I also think that using the global state like in my first example is bad for maintainibility. Global state is implicit instead of explicit - you need to be aware of stuff that happens outside of the file you are modifying. With the second kind of require, you know what all the dependencies of each file are, much like using function params in a function instead of using global variables. 
I don't like to steal code, so i'll see the ideas and maybe rewrite them by myself!
"Lol i give no infos about what you will do just come" here's what you just said for me.
What do I need to install it? I downloaded the win64 version [Here](https://sourceforge.net/projects/iup/files/3.22/Tools%20Executables/). In addition is says in the documentation something about configuration files and GNU and MingW and CygWin. What do I need? atm I use Zerobrane and downloaded the files mentioned above, some examples and the documents?
wat
You can call sleep() -- and any function -- with variables instead of literal numbers. sleep(250) works, but if you want it to be variable, you can also do: time = 250 + (math.random() * 200) sleep(time) Any place a literal value is valid, a variable is valid, since variables just contain a value. I'm assuming you're working with an environment that has defined sleep() as a function. Lua does not have a standard sleep() function.
- https://www.lua.org/about.html - More about the Lua language - http://lua-users.org/wiki/LuaTutorial - Introductory tutorial - http://lua-users.org/wiki/TutorialDirectory - Main directory for the tutorial above - https://www.lua.org/pil/contents.html - *Programming In Lua* textbook. The first version is available for free online. - https://www.lua.org/manual/5.1/ - Lua reference manual most relevant to LuaJIT - http://luajit.org/ - LuaJIT's website
Hi im just trying to adapt someone elses open source script. I know literally nothing about lua. Ill give this a look when i get home. Thank you ever so much for your help! So that will do 250+(random number between 1 and 200)?
It first sets a variable "time" to a random number between 250-450 (yes, 250 + (random 0-200) due to how math.random() works). Then it calls sleep() with that number. You don't technically need to store that number in a variable. There's nothing wrong with calling sleep(250+(math.random()*200)). But to answer your original question, variables work just as well. Forgive the self-plug, but if you want to get a better fundamental understanding of things like variables in Lua, then you're welcome to check out this [programming guide](https://docs.google.com/document/d/1hYnATm3xy64qbQPsUoIJf7fIOj6oFwzUJIW7c3PIu1Y/edit?usp=sharing) I've been writing. It's language-agnostic but frequently references Lua for code examples.
I most definitely will dude, thank you again.
[Lua: Good, bad, and ugly parts](http://notebook.kulchenko.com/programming/lua-good-different-bad-and-ugly-parts)
https://www.lua.org/pil/ Buy the latest edition - this book is invaluable.
Nice job, I have some nitpicks though The metatable is unnecessary and you are leaking `s` as a global variable. Fixed version: return function(t, f, ...) local s = os.clock() for i=1,1000000 do f(...) end return os.clock() - s end
Ah! Good call, cheers. I feel pretty silly actually, I didn't consider just returning a function. I've been so accustomed to just wrapping Lua "modules" as tables, always. Have edited the post to reflect this. I don't believe `t` is necessary anymore as that parameter existed solely because the function belonged to a metatable. `f, ...` should suffice now.
Nice! I have been using the timer from the socket module timing things so far. Two questions, does your module get below second granularity? Are you going to publish it on github?
1. If my understanding is correct, `os.clock()` is system dependent. When I tested on my Linux Mint VM, granularity was down to the microsecond; when I tested on Windows 10, granularity was down to the millisecond. With 1,000,000 tests, down to 1/100 of a second should suffice. 2. Didn't think it'd be worth its own repository on GitHub or other; didn't figure I should have. I might yet.
I second this! It's an amazing book
For additional libraries, I recommend checking LuaRocks, Lua's package manager: https://luarocks.org
It's part of the reason, but not the only reason.
can you please write a pseudo code example? just a little example with a step by step guide in some self-invented pseudo language. 
This is what I tried : T={} T[1]= "rennes" T[2]= "toulouse" T[3]= "toulon" T[4]= "nantes" T[5]= "caen" string = "extension" x= 5 for i = 1, x do T = T[1].." "..string end for j = 1, x do print(T[i]) end
Here's one way: T ={"rennes","toulouse","toulon","nantes","caen"} -- This is a shortcut method for assigning T[1] = "rennes", etc string = "extension" for x = 1, 5 do T[x] = T[x] .. " " .. string end for x = 1, 5 do print(T[x]) end Output: rennes extension toulouse extension toulon extension nantes extension caen extension Your line: &gt; T = T[1].." "..string makes no sense within Lua. You are setting the variable `T` to always being equal to "rennes extension". You are not iterating over the table and you are not changing the value of any element in that table as you are only setting the variable `T`. And when you print you are using `j` as an index value but in the actual print statement it's an `i`.
&gt; for x = 1, 5 do I'd probably change that `5` to `#T`, but it seems like the OP wanted 5 in there for some reason. (Homework?) (Better yet use `ipairs`.)
yes, scotland_to_finland is right, you should learn about ipairs/pairs, or in general the different methods of iterating a table &gt; t={1,2,3} &gt; for i=1,3 do print(t[i]) end 1 2 3 &gt; for i=1,#t do print(t[i]) end 1 2 3 &gt; for i,v in ipairs(t) do print(v) end 1 2 3 
How about using Telegram's webSocket or HTTP API? I'm asking this because if limitation could be removed this would explode all over the internet, it would be huge.
You are right, homeworks.. First year of computer degree.
Thanks for your help.
I'm going to look forward for it, thanks.
I'm not reading this article tonight.
I'm not sure what you think is advanced, but I think you'd have better luck learning basic programming with Lua than writing about advanced programming.
What do you want to accomplish with the base table? You are just storing the second function (with trueDat) into it. The first function is already overridden and gone at that point. Your code will end in error because DoneSon is undefined. Or am I mistaken? I am on my mobile now. 
No, you are correct. I think OP is the one who needs lessons.
This is the worst programming 'tutorial' I've ever seen.
Can you please explain this line of code please
This is several statements that should be split into multiple lines. wait (3) local explosionPart = script.Parent local explosion = Instance.new ("Explosion") explosion.Parent = game.Workspace explosion.Position = explosionPart.Position explosionPart:Destroy() Looks like it delays a bit and explodes. But I don't know what game this is from.
It’s from roblox can you explain it to me?
I don’t get the instance part of it the rest I do a little better
Maybe you should learn how to teach yourself first
You'd have to look it up in the game's manual.
There is not nearly enough information here to explain exactly what is happening. As u/RenaKunisaki said it appears to delay for 3 (milliseconds?) and then explodes but more than that we can't really say without seeing the rest of the code or more contextual information. 
I tried 5 times.........
That is all the code... btw its 3 seconds
There is no Manuel...
I can tell you're new to this, and that's not a bad thing. People here don't seem to understand what the downvote button is for but it is not for people who are asking genuine questions. I would recommend you go read (or watch, although I would suggest written) a few beginner programming tutorials just to grasp some of the basic concepts. Lets look at an incredibly basic (and likely slightly inaccurate as its pretty late in my time zone and I might be a little drunk) rundown of your code here. wait(3) this is what we call a function, it is a piece of code that corresponds to another piece of code somewhere else. Somewhere in the Roblox(?) engine there is a section of code that will be defining what 'wait()' does ala function wait(seconds) --Do Stuff end so every time that wait() is invoked, everything inside that function block is performed. So now lets look at this part: local explosion = Instance.new ("Explosion") if you look at one of the basic tutorials (any of them) you should be able to get a better rundown of what variables are than what I'd be able to give you. Basically we are creating a variable named 'explosion' and setting it equal to a new "instance" what exactly that means will depend entirely on the rest of the code. ... I seem to have gotten a bit away from the point here... basically what I'm trying to say is that there is plenty more code that you may or may not have access to because these functions that are being used need to be defined somewhere. but whether or not you can look at that code you should look into some basic programming tutorials and then move on to some Roblox modding tutorials (I'm assuming that's what you're trying to do).
Here is the [manual](http://wiki.roblox.com/index.php?title=API:Class_reference) (I think). you'll probably need a little more experience before you can parse it properly though. 
Finally someone that I sent being a jerk Thanks this helped a lot 
It literally spawns an explosion after waiting 3 seconds. Source: spent like 5 years programming on Roblox Edit: Instance.new("Explosion") is the part that creates the explosion, a "new instance", the rest positions it in the world and destroys the source of the script. 
I was drunk and trying to be funny. I guess nobody realized that from my variable names. :)
I was drunk and trying to be funny. I guess nobody realized that from my variable names. :)
I was drunk and trying to be funny. I guess nobody realized that from my variable names. :)
Out of curiosity, why do you learn Lua in your first year of a computer degree? I barely ever see Lua, let alone in a university/college.
CODE SOBER OR GET PULLED OVER
Hello, sorry for the late answer, as I was a little busy I did not go to reddit thus did not see your reply. IIRC all you have to get is the zip in the Lua5X subfolder of the Tools Executable link you provided, which contain a few executables like lua5.X.exe, wlua5.X.exe and a bunch of dlls. As I know, no need for MinGW or CygWin. You can then run your Lua file with lua5.X.exe (with console) or wlua5.X.exe (without console). To use it with ZeroBrane, you have to configure it to use the right exe and path for dlls. But I'm no expert with ZeroBrane.
My teacher said that this year it's a completely new program. Before on a first year of a computer degree there was a lot of maths and not much of coding. Now the aim is to teach us as much languages as possible.
Discord - Fillipuster#7546
Added
What you need to do is set up nil checks. So `if sprite and sprite &gt; 8` But first you should decide 'should this EVER be nil' and if the answer is no, figure out why you have a bug. Basically, sprite isn't a number when it's being compared. In fact, it's nil. So if it should be nil', you need to handle that. If it should never be nil', aka it should always be a number, then you need to figure out what is causing it to be nil', which I can't do from those snippets. 
You can find various wxlua examples in the samples folder of wxlua: https://github.com/pkulchenko/wxlua/tree/wxwidgets311/wxLua/samples. Since ZeroBrane Studio is written in wxlua, you can run those examples directly from the IDE and explore how they work. 
Replace tails with the return SearchTable, or just make it return tails. It'll do a tail call correctly, and won't stack overflow. 
That will make it lose values in the containing table that are ordered after the `v` table. Easiest way is to make it a breadth-first search. local function SearchTables_(stack, e) local t = table.remove(stack, 1) if not t then return nil end for _,v in pairs(t) do if v == e then return t elseif type(v) == 'table' then table.insert(stack, v) end end return SearchTables_(stack, e) end function SearchTable(t, e) local stack = {t} return SearchTables_(stack, e) end A depth-first would be similar, but pushing on the data stack not only the tables but the current key to resume the loop. And also call `next` directly instead of as a `for..in` loop.
It seems most likely that you have circular references in your table (because otherwise having 32k+ levels it's Really Quite Unusual), in which you'll have to keep track of what tables you've already looked at too avoid searching them again. Otherwise, you'll probably need to keep track of your auxillary space explicitly, because the stack isn't big enough for you.
Ahh. Dang I didn't think of that. Yes, you're right. 
Looking forward to it!
Thanks for this link... buying the book... Been coding in LUA for roughly a year, learning only online, tutorials, and ripping apart scripts I could find. But have wanted a solid reference book on the language. Cheers!
There's something crucial about a physical book that screens just don't capture, even with multiple monitors.
What have you been trying? I think the simplest way is to go to http://luabinaries.sourceforge.net/download.html and grab the executable bundle corresponding to your operating system. Boom, done. You can update your PATH variable to make it easier to call from the command line etc, but it's ready out of the box. Take a lua script, drag it onto lua53.exe and watch it go.
Unfortunately the website is broken on mobile
There's one issue total, from half a year ago, which contained "news" that was already half to two years old when it was published. You'd probably run into all of the content this newsletter contains early just in passing.
I think it's if (a==0 &amp;&amp; bb==0) if a is not zero then b is never evaluated because the &amp;&amp; and will be false regardless of b's value.
&gt; if (a==0 &amp;&amp; bb==0) Lua has no "&amp;&amp;" operator.
That seems too complex... Doesn't this do the exactly same thing? deck={} for i = 1,52 do local j = math.random(52) deck[i], deck[j] = deck[j] or j, deck[i] or i end
Oh my bad - sorry - thought I was in a "C" group. 
'Short circuit' logic means that `and` and `or` will only evaluate as much as they have to in order to get the result. This means that: 1. `and` will not evaluate the right side if the left side is false 2. `or` will not evaluate the right side if the left side is true That's really all there is to it.
https://www.scribd.com/document/230786227/G-SeriesLuaAPI#
yes, you're right. can't believe I never saw that
This code allows for the same card to be picked every time. You need to use an array to represent the deck.
What? 
My bad. I misread the code.
You should use ScriptingHelpers.org or the ROBLOX forum for ROBLOX questions. This is not a Lua question per-se.
Not sure if this will be useful to anyone, but it's pretty neat. Supports macro functions, and allows for nesting macros.
I'd be very interested to learn why this was downvoted. The contribution is on topic and potentially useful for some people. I for one very much enjoyed seeing something else than misplaced beginner questions in this subreddit; I'd absolutely hate to see other being discouraged to do the same by overly harsh ciritcs. So whoever clicked that blue arrow, please share your reasoning.
Thx
I've never had this error before, because I rarely use metatables. Not sure what to do. You can see the final print is what prints out the error, because I looked for a nil value inside a (a ==UI_Levels[UserLevel][1]), it checked the metatable, index set to checked the table Frame. Frame[1] doesn't exist, and that should be the end of that. Except it's not. Am I misunderstanding how this works?
The problem is that `Frame` also has `mt` as metatable. So when accessing `Frame[1]`, `mt.__index` is checked, but `mt.__index` is `Frame` again, and the loop continues infinitely until it hits a limit and exits with the error. Either don't set `mt` as metatable of `Frame`, or don't use `mt` at all, set `Frame.__index = Frame`, and use `Frame` itself as metatable for instances. (But don't set `Frame` as the metatable for itself!).
ever heard of elseif statements? lmfao
Well, you asked for it, so here we go... 1. [Work on your spelling](https://github.com/clarence112/ClarenceOS/search?utf8=%E2%9C%93&amp;q=sucsess&amp;type=), please, especially if you ever expect others to use your code. [Hand-waving your poor spelling in the comments](https://github.com/clarence112/ClarenceOS/blob/master/main/ClOS%200.0.1.lua#L16) doesn't make it any easier for someone else that has have the misfortune of working with a codebase littered with misspelled words as variables. 2. [Use elseif](https://github.com/clarence112/ClarenceOS/blob/469a7472d0700b2262e55c8dd145124b584c48ee/main/installable%20command%20template.lua#L4-L10) to remove some pointless nesting. 3. [Why would your return status be first?](https://github.com/clarence112/ClarenceOS/blob/469a7472d0700b2262e55c8dd145124b584c48ee/main/installable%20command%20template.lua#L11) It looks like you're trying to emulate program [exit status](https://en.wikipedia.org/wiki/Exit_status), but suggesting the exit status be chosen *before* the "program" executes to completion. This is backward. When taking on a project, research similar concepts. You're making a command line interface here, so you should spend some time with other CLIs and get an idea of what works and what doesn't. 4. [This should be broken into multiple, smaller functions and some sort of loop](https://github.com/clarence112/ClarenceOS/blob/469a7472d0700b2262e55c8dd145124b584c48ee/main/ClOS%200.0.1.lua#L35-L136). Right now you have a large block of hard-coded built-ins, when you *should* be doing much of this work programmatically. Don't do tedious work like this yourself! That's what programming languages are for! For one example of how to do it, you could store the command names as keys in a `builtins` table and have the values be the functions to call (e.g. `builtins = {help = builtin_help, version = function () print ("1.0" end }`), and then do something like this: answer = io.read() for k,v in pairs(builtins) do if k == answer then v() end end 5. For the command checks, you **really** need to split the `answer` string and only test against the first word, then pass the remaining arguments to the command (function) to operate on. Then you could do things like `fileload foo.txt` instead of having to do a separate `io.read` input request. 6. [Another example of unnecessary code repetition](https://github.com/clarence112/ClarenceOS/blob/469a7472d0700b2262e55c8dd145124b584c48ee/main/ClOS%200.0.1.lua#L55-L85). Learn to use loops and tables, seriously. 7. [You'll regret this later](https://github.com/clarence112/ClarenceOS/blob/469a7472d0700b2262e55c8dd145124b584c48ee/main/ClOS%200.0.1.lua#L146-L152). You're setting `answer` in one function, calling another funtion (`command()`) with no arguments, and then accessing `answer` within it. This is a great way to end up with an unmaintainable cluster-fuck of a codebase, and you should break this habit ASAP. Instead, for example, you should be doing something like `command(io.read)` and working with the argument inside `command`. Functions can take and return values, and should be doing so to make things easier on yourself. Use `local` liberally and resist the temptation of touching global variables; it might seem convenient now, but it's guaranteed to become a problem later. 8. [You declare `cominput`](https://github.com/clarence112/ClarenceOS/blob/master/main/ClOS%200.0.1.lua#L26), and then never use it again. 9. [This entire idea is deeply flawed](https://github.com/clarence112/ClarenceOS/blob/master/main/ClOS%200.0.1.lua#L29-L41). To add a new command, one needs to create a file **and** add the command name to a text file **and** restart the program. Instead, why not create a `commands` subdirectory and have, say, `command.lua`, `foo.lua`, etc. inside them? Then you could generate your command list by reading the contents of the directory, and then execute the contents of that file when the name is invoked. Adding a new command would be easier — just add a new .lua file to the command directory — and also immediately recognised. 10. Continuing from #9, there's also the problem that you're executing arbitrary lua code in the same context as the command interpreter itself, which is extremely questionable. It's fine for what is essentially a toy project, as long as you understand that it's absolutely unacceptable practically everywhere else. 11. [Don't write worthless comments](https://github.com/clarence112/ClarenceOS/blob/469a7472d0700b2262e55c8dd145124b584c48ee/main/ClOS%200.0.1.lua#L113). Comments are good, but only when they're explaining something that isn't *immediately obvious in the code itself*. Your comments are the equivalent of `a = 10 -- set variable 'a' to the number ten`, which is just noise. Comments are about explaining the **why** and **how** of your code, not the **what**. The "what" should be self-explanatory, and if it's not, you probably should make the code clearer. For example, [this line](https://github.com/clarence112/ClarenceOS/blob/master/main/ClOS%200.0.1.lua#L25) has a comment of `OS version`, when you could have just written `os_version = "vanilla 0.0.1"` and had it be self-explanatory. I could say more, but since I get the impression that you're fairly new to programming, I'm trying to limit my suggestions accordingly. Also, good luck with whatever language(s) you decide to spend time with, and don't let wiseasses like that other guy bug you. 
**Exit status** The exit status of a process in computer programming is a small number passed from a child process (or callee) to a parent process (or caller) when it has finished executing a specific procedure or delegated task. In DOS, this may be referred to as an errorlevel. When computer programs are executed, the operating system creates an abstract entity called a process in which the book-keeping for that program is maintained. In multitasking operating systems such as Unix or Linux, new processes can be created by active processes. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
Regarding point 9 you could also define a table of names =&gt; functions. For example the following sample code demonstrates the concept. Usage might look something like this: $ lua sample.lua prompt&gt;help HELP Goes Here prompt&gt;? HELP Goes Here prompt&gt;test Unknown command 'test' prompt&gt;exit Exit Goes Here -- -- Table of commands we know about -- local commands = {} -- -- Define some sample commands -- commands["help"] = function() print( "HELP Goes Here") end commands["exit"] = function() print( "Exit Goes Here") os.exit() end -- -- Define some aliases -- commands["halt"] = commands["exit"] commands["logout"] = commands["exit"] commands["quit"] = commands["exit"] commands["shutdown"] = commands["exit"] commands["?"] = commands["help"] -- -- Dummy loop for testing -- while true do io.write( "prompt&gt;") input = io.read() if ( commands[input] ) then commands[input]() else print( "Unknown command '" .. input .. "'") end end 
Your comment was removed for its unhelpful and uncivil tone.
Thank you very much!
"Downote to remove" Has -2 and has been here for 13 hours. I love how the writers of these bots act like they don't want to invasive to subs by putting stuff like that when it **clearly** doesn't work.
That's precisely what I was suggesting for the built-ins (#4), though my post ran long enough without writing out full examples so I just outlined the idea. :D The thing with #9 is he's also trying to allow custom commands written outside of the source itself, which means the easiest way is to check if a file name that matches the comand and then eval that. 
No problem at all, and I hope it helps. I was concerned that I was giving too much critique, since I didn't want to seem harsh, but I figured you wanted it or you wouldn't have put the code up and asked. If you have questions about anything I said, or other questions, feel free to ask and I'll try to respond when I can. Also, if you're trying out different languages and trying to pick up general programming concepts, check out [Racket](http://racket-lang.org/) sometime. Specifically, look into using it along with [*How to Design Programs*](http://www.ccs.neu.edu/home/matthias/HtDP2e/), which is a freely available learning course / book that helps teach **concepts**. Learning a language just teaches you to use that language, but learning good concepts will help you in any language. 
SO, first of all reddit can do code formatting. for a snippet of code put \` on either side, so \`hi\` gives `hi` If you've got a block of code, indent it with four spaces. that will give you the ability to do this ____ ____ ____ With that out of the way, what you need to do is this: Assuming AS is the variable holding the alignment and GP holds your GP your if statement should look like this if GP &gt; 200 and (AS == "barely evil" or AS == "evil" or AS == "quite evil" or AS == "very evil" or AS == "extremely evil" then --Do your MM thing end
Thank you for taking the time to answer my question! I hadn't actually been using variables yet, but will take a look in the manual and see if I can figure them out. What It was doing was just firing off every time it seen that line in Mushclient. This is what I'm talking about here. https://imgur.com/a/Oem8v Every time it fires off this: HP: 1610 (1610) GP: 296 (296) XP: (7843) Align: (evil) it was checking to make sure my GP was above 200 and firing a command. But the problem is I can only fire the command if I'm evil like you talked about. I'm going to see if I can see if I can use this trigger: HP: * (*) GP: * (*) XP: (*) Align: (*) To add a variable AS, and see if i can get it to copy what I need to make AS = Barely evil, or evil, or quite evil, or extremely evil. I appricaite the help!
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/Fy0gphP.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Off topic, but what MUD? I miss MUDs but I haven't been able to find a good one to play.
&gt; (e.g. builtins = {help = builtin_help, version = function () print ("1.0" end }), and then do something like this. &gt; ``` &gt; answer = io.read() &gt; for k,v in pairs(builtins) do &gt; if k == answer then v() end &gt; end &gt; ``` No reason to loop for a direct string lookup. ``` local fun = builtins[answer] if fun then fun() end ``` (or even just `pcall(builtins[answer])`) Looping is a more sensible approach if you might have multiple matches, or if you need a fuzzier lookup, but you might be better served by iterating over an array-table for finer control of ordering.
You're absolutely right, but I was trying to keep the suggestions simple and similar to what he'd already been doing, for incremental improvements. Otherwise I'd end up giving functional programming suggestions, since I think Lua works really well for FP. :)
it might be good to plant the seeds of FP in the young'uns' minds :)
I might agree with you on that, and it may have influenced my suggestion of Racket and HtDP. Maybe. Hypothetically. :) It's hard to suggest jumping head-first into FP in Lua, though, because it lacks a lot of basic FP staples like `map` that help introduce functional programming to people unfamiliar with it. They're easy enough to implement, but doing so requires better a better understanding than just using them, which makes it hard to use Lua to introduce FP. :/ I was trying to fill that gap somewhat with a crash course of sorts, but I got busy with work and haven't finished it yet. Early sections ran through a lot of language basics that I feel get glossed over in things like PIL because writers assume the reader already knows other languages, with later sections building on preceding ones to add more concepts. Then, because I wanted it to be useful to more people than just total newbies, I started trying to cover more advanced things that also get overlooked, like first-class functions, how they get used with tables to make Lua's style of OOP work, and finally moved on to FP. That's about where I got before I got busy, but I was trying to use the concepts and examples to *also* provide FP building blocks like `partial`, `reduce`, `map`, and `comp`. First, teach HOFs with some trivial toy examples, then show how to create a simple but useful one (`partial`). Once that's done, create `map` as a prelude to implementing `reduce`, and then use `reduce` to perform function composition (`comp`). By the end, you've got the FP staples Lua lacks and (hopefully) an understanding of how to use them. I really need to get back to that, I was probably 80% done. Already had most of the code examples for the last few parts, just needed the accompanying explanations and some clean-up. :/
I might agree with you on that, and it may have influenced my suggestion of Racket and HtDP. Maybe. Hypothetically. :) It's hard to suggest jumping head-first into FP in Lua, though, because it lacks a lot of basic FP staples like `map` that help introduce functional programming to people unfamiliar with it. They're easy enough to implement, but doing so requires better a better understanding than just using them, which makes it hard to use Lua to introduce FP. :/ I was trying to fill that gap somewhat with a crash course of sorts, but I got busy with work and haven't finished it yet. Early sections ran through a lot of language basics that I feel get glossed over in things like PIL because writers assume the reader already knows other languages, with later sections building on preceding ones to add more concepts. Then, because I wanted it to be useful to more people than just total newbies, I started trying to cover more advanced things that also get overlooked, like first-class functions, how they get used with tables to make Lua's style of OOP work, and finally moved on to FP. That's about where I got before I got busy, but I was trying to use the concepts and examples to *also* provide FP building blocks like `partial`, `reduce`, `map`, and `comp`. First, teach HOFs with some trivial toy examples, then show how to create a simple but useful one (`partial`). Once that's done, create `map` as a prelude to implementing `reduce`, and then use `reduce` to perform function composition (`comp`). By the end, you've got the FP staples Lua lacks and (hopefully) an understanding of how to use them. I really need to get back to that, I was probably 80% done. Already had most of the code examples for the last few parts, just needed the accompanying explanations and some clean-up. :/
You can shorten other posters code doen to, if GS &gt; 200 and string.find(AS, "evil") then -- stuff end
I don't understand, does MATLAB support Lua?
MATLAB seems to be based on LUA
....are you sure? It might but I used Matlab quite a bit in college (which granted was a few years back) and I don't remember any Lua usage.
MATLAB was first released in 1984 and Lua's first version was not released until after 1993. As far as I know they have no relation whatsoever. MATLAB was meant to be a kind of front-end around the LINPACK and EISPACK libraries according to Wikipedia. Lua was meant to be embedded into other programs as a configuration script.
This has been a feature for a while actually. Not really new at all. There's a couple other lua related sites as well I believe. https://duckduckgo.com/bang?q=Lua
`cl` is Microsoft's C/C++ compiler, if I recall correctly. Try running luarocks from a Visual Studio Command Prompt?
Still. Same error. Here is a [screenshot](https://imgur.com/a/6lDnh) (The Yellow is German just FYI) But I found 2 other serial libraries, one of wich I think i cann install w/o luarocks
This is a matter of taste and doesn't have a definite answer. My personal preference would be to use two indents, with each parameter on a separate line: ``` local function veryLongAndPossiblyOverDescriptiveName( attributeName, tagPrefix, indent, nameWidth) foo() end ``` General advice on function names is to keep them short enough to be readable. If there is an `and` in there, it means that the function probably does too much and should be split. Further reading: [Lua Style Guide](http://lua-users.org/wiki/LuaStyleGuide) and, since Python's syntax isn't too far from Lua's, the [PEP8 guidelines](https://www.python.org/dev/peps/pep-0008).
Thanks for the feedback. I'm trying to get better at clean coding, so I'd like to clarify here: In this case, the function separates the name and reference by a specific character, ensuring that they all start and stop at the same place. For instance: thing1............... reference1 thing2islong- .. reference2
I think the downside to starting with Lua is that there aren't a ton of "learn to program" type resources that use Lua. It's not super common as a first language, and a lot of resources assume you know the basics. There's a real lack of newbie materials if you compared it to a common starting language like Python. In that sense, it may make sense to go through a programming 101 type class or book before going down the Lua rabbit hole. On the upside, Lua's a small and fairly unintimidating language. If working with whatever games/engines you have in mind will keep you motivated, there are probably worse places to start. For Lua learning resources, you definitely want to consult the book Programming In Lua. First edition is free on the lua.org site, I recommend getting the hard copy corresponding to whatever version of Lua you're using. You should also check the communities of whichever games/engines you're trying to use it with because they're sure to have some getting started guides, etc. Beyond that, the official documentation is always useful and there are some tutorials on the Lua users wiki -- links in the sidebar of this sub. For general programming stuff to maybe get you comfortable with programming in general, I recommend Harvard's CS50 which you can take for free through edx.org. But there's a million good intro to programming options, check out the FAQ at r/learnprogramming for more options on that end of things. Hope that helps!
Thank you AtoneBC this was very helpful. 
You could use a parameter table, so the function declaration just has one parameter. Calling it you'll still have a bunch of stuff though.
Yeah, I had considered that but decided against it. If all else fails, that may be the path I go
That has the advantage of making args un-ordered and self-documenting, and don't add much work (if you use shorter key names than function names, at least) so it should be considered as more than a last resort. Just be aware that tables are mutable and passed by reference, so you don't accidentally muck up your state when using the table. You could also consider renaming the function and maybe even using tables to store it plus other similar functions, like a namespace, to shorten names and add sone natural grouping, like `TOC.separate`. Another idea, if you have multiple separate\* functions, is to have a single, short dispatch function, like `TOC.separate`, and have one of its args determine what function to call next, passing on the remaining args. If you're being smart about it (referential transparency and function purity where possible), there's no harm in adding these kinds of abstractions and extra function calls, and it can make the code more self-organising and self-documenting at the same time.
&gt; Another idea, if you have multiple separate* functions, is to have a single, short dispatch function, like `TOC.separate` You're right, I hadn't even thought about that. &gt; so it should be considered as more than a last resort. I was under the impression that it was kind of a bad idea to do it since you would have to create a new table every time you called the function, worsening performance. Of course, this isn't really a performance-critical script, and you know what they say about pre-optimizing, so both of these are worth looking into more. Thanks! 
So why not name it something like `splitTOC` or `TOC.split` (storing any other TOC functions in the same table) then? Explains the purpose just as well, perhaps better, and is much shorter. 
&gt; Of course, this isn't really a performance-critical script, and you know what they say about pre-optimizing, so both of these are worth looking into more. If performance ever becomes a concern you'd probably benefit more from switching to LuaJIT, and for less overall effort, I'd wager. Torturing yourself and mangling your code to squeeze out every drop of performance is for when you have no choice, like when Lua's embedded in games. ;)
Well, first, that's Lua, not LUA
I agree with /u/ws-ilazki that collecting all Table of Contents rendering methods might be a good idea. I'm not a native speaker, so I often find myself checking Wikipedia to get some hints on how to name things (and to learn about domain details which I might have missed). Looking at the wiki page for [Table of Contents](https://en.wikipedia.org/wiki/Table_of_contents), I'd rename the function to `justifyTocItemWithLeader` (or, `toc.justifyItemWithLeader`). It's shorter, still descriptive, and uses the "correct" terminology. Aside: Depending on your application, your could use *Listing* instead of *Table of Contents*, so you can reuse the function for the List of Figures, and List of Tables, in case you have those.
Engaging [Clippy](https://en.wikipedia.org/wiki/Clippy)-mode: You seem to be working on a document rendering system. Have a look at [pandoc](https://pandoc.org). It's extensible via Lua; check the [nightly builds](https://github.com/pandoc-extras/pandoc-nightly) and the [lua filtering docs](https://github.com/jgm/pandoc/blob/master/doc/lua-filters.md).
Love2D is a good game engine. Fun, simple, great learning tool.
This is the style I use as well
[Your shuffle is biased](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)
This is a very interesting article. I wonder if we might someday see a LuaJIT that is compatible with the reference Lua implementation.
Great to see what Laurence Tratt has been up to. I used to read his blog, but haven't in several years, time to look him up again (http://tratt.net/laurie/blog/).
If you search 'LuaJIT' on their blog, you can find some information. They blogged about Lua and LuaJIT a few times.
If so it won't be from these folks; it sounds like CloudFlare is interested in performance only.
Full 5.2 support is possible; I mean... LuaJIT already supports most of it already. Mainly just get _ENV, the C API, and some other things in. 5.3 is probably not going to happen any time soon, for various reasons. Not the least of which is the integer support which would be quite an undertaking, and then you have to integrate it in a way that isn't slow (sure the JIT could probably handle it fine, but the interpreter's performance is also really important since on some platforms it's your only option). See the FFI's 64-bit ints. So... IMO LuaJIT cherry-picking the useful stuff from newer versions is a good compromise.
Nice! [Some functions](https://github.com/last-khajiit/lvk/blob/master/lvk.lua#L60) with their far too many parameters are a bit gory. Just passing a table would probably be much cleaner.
Thanks for your feedback! I thought about table parameters, will improve it soon.
Did you use any specific framework? For web applications I like to use Lapis.
petty, but noted. 
Main reason I want to learn this language. Love it. 
I would do the assignment in steps: t = {} t.a = {} t.a.b = 1 t.a.c = t.a.b + 1 Lua doesn't have syntax to do really clever things inside expressions so and these cases it expects you to just bite the bullet and create a bunch of sequential statements. If you are worried about having to create extra variables you can scope the temporary with a do-end block
You can do this: x = 1 a = { b=x, c=x+1 }
Sure, you just need to do `t.f[1]:functionName()`, since it'd also work as `t["f"][1]:functionName()`.
Hmm, that still doesn't quite do it though does it? In that function self will evaluate to the same table that t.f evaluates to, but there's no way to get "f" out of it. So I think the answer to OPs question is no, you'll need to rethink how you're doing whatever you're doing.
Yeah, theres no way to do that in Lua.
I don't understand exactly what you are trying to do, so not sure if my suggestion applies... But have you thought of having a loop and using coroutines? 
there's probably a way to do it by hacking something around using metatables, but I'm just not sure if it would be worth it?
edalcol - I have tried that, and think I could make that work, but if I understand websockets correctly (and it's very possible that I don't), I shouldn't need a loop, I should just be able to establish the ws and then respond to messages sent to my client from the server, as long as the ws is open. I'm starting to think, from some things I've been reading, that this lua-websockets library can mishandle pings, so I'll be looking into that more today. Thank you for your reply!
I wonder if OP even needs that. As far as I understand it the `t.f[1]` part is what /u/xThomas would like to know.
Are you limited to using `lua-websockets`? Can't say anything against it as I haven't tried it but the alternative `lua-http` (https://github.com/daurnimator/lua-http) has great `ws` support and is very easy to use.
Ah. ty
If you don't care about performance, I guess you could modify the __index if the metatable and use t.f[1]() and have it pass f automatically, but I don't think it's worth the trouble.
Whoa, lua-http looks awesome, has anyone used it?
Many use it, including me. It is amazing. I meant `lua-websockets` when I said I haven't tried it. It doesn't work on Windows though.
I've looked at lua-http, but it uses luaossl, which is a C library, and I can't add C libraries to the platform I'm developing for :-(
Lua is a simple and lightweight language with a quick learning curve. It works wonders on linux and the library is small enough to work with multiple types of programmers. Ive used it a ton with linux its almost like they were meant to be together.
So that's a yes. Fantastic! Thank you!
my only concern is that a lot of the programming examples on the web are in either bash or a perl so when you're learning Linux might have a more tougher time.
This is exactly what things like chef, puppet, and ansible are built for. If you're just doing this for yourself, sure, lua is probably fine. If you're looking to do it professionally, you might want to use something more commonly in use.
I tried Perl, after all it is (was?) an official core component of linux. I'm not opposed to learning bash scripting, but Lua seems more interesting. Hopefully I can figure it out! As a side note, seems like everyone I work with, myself included, learned Regex from a brief study of perl. At least I got something out of it! 
thank you I will check those out!
As a side note ive always thought of regex as the witchcraft of the strong library. lmao
As /u/djcp said, things like chef, puppet, and ansible are the industry standard tools for managing multiple computers. I'm not an admin, so I haven't used these tools. You can check out /r/LinuxAdmin or /r/Linux for advice and information. I do quite a bit of "one off" hardening, on Linux systems not networked. I use a combination of Bash and Perl, which gets the job done quite nicely 90% of the time. The remaining 10% is clunky but I deal with it. I haven't learned Python yet, but it appears to be quite robust and popular as well. 
To add to this, Lua will work fine for initial setup. The mentioned tools above are meant to keep configuration consistent. They are able to do things like run updates and things like that. Terraform are good for initial reproducible machine instances. You could use that for the base install and one of the ones mentioned above for continued maintenance.
Seems like a reasonable description.
I consider it the voodoo of the the encoding set. I once had a severed goat's head appear on my desk and burst into flames while trying to select only odd (1st, 3rd, 5th) weekend dates on years that ended in 5.
I sincerely thank you and /u/djcp. You have made my life much easier at work. 
So you're taking 4 buttons and converting their 4 booleans into 2 velocities, right?
 function player:move(dt) -- You probably want to know how long a button has been pressed for. You can use this information to decide which key to use when the player presses both left and right together because the player rarely wants the result to be "neither". -- local dur = {left = 500, right = 50, up = 0, down = 100} local dur = self.moving.duration -- leftright: left = 1, right = -1, none = 0 -- updown: up = 1, down = -1, none = 0 local leftright = (dur.left - dur.right)/math.abs(dur.left - dur.right) local updown = (dur.up - dur.down)/math.abs(dur.up - dur.down) local vel = math.sqrt(math.abs(leftright) + math.abs(updown)) self.vel.x = leftright*vel self.vel.y = updown*vel self.x = self.x + (self.vel.x * dt) self.y = self.y + (self.vel.y * dt) end How does that look?
really cool. 
One thing I just noticed about my code is that you'll get a divide by zero error if the player isn't pressing any buttons. E.g. leftright = (0 - 0)/(0 - 0)
&gt; You can use this information to decide which key to use when the player presses both left and right together because the player rarely wants the result to be "neither". Is that so? When I'm moving down and left then press the right arrow I wouldn't be surprised to start moving just down. Your way I might wonder why pressing a key is ignored. I just did a test in this text control. It gives precedence to the most recently pressed key. But it also erases the older key. Holding left then pressing right moves the cursor right until you release the right key and it stops even if left is still down. 
I don't exactly understand your code. It appears you've got a few copy/paste errors in there and I'm not exactly clear on what your various negations are for. Also, I'm pretty rusty at Lua. :) Having said that, this should get you started: function sign(n) if n &lt; 0 then return -1 elseif n &gt; 0 then return 1 end return 0 end function player:move() local h = 0 local v = 0 if self.moving.left then h = h - self.movespeed.left end if self.moving.right then h = h + self.movespeed.right end if self.moving.up then v = v - self.movespeed.up end if self.moving.down then v = v + self.movespeed.down end if h ~= 0 and v ~= 0 then local distance = (h^2 + v^2)^0.5 h = distance * 0.5 * sign(h) v = distance * 0.5 * sign(v) else self.x = self.x + h self.y = self.y + v end end
 function player:move(dt) local yDelta = self.moving.down and 1 + self.moving.up and -1 or 0 local xDelta = self.moving.right and 1 + self.moving.left and -1 or 0 local velocity = ( (math.abs(xDelta) + math.abs(yDelta)) &lt; 2 and 1 or 0.7071 ) * self.movespeed * dt self.x = self.x + xDelta * velocity self.y = self.y + yDelta * velocity end So this uses a feature of lua comparisons to get the direction of the player in both axis. It's essential a ternary inside another ternary (in java it'd be `condition1 ? If1True : (condition2 ? if2True : ifFalse`) 0.7071 is sin(45°). You said you only know a little trig so I'll explain what that means. If you imagine a triangle with two 45° angles and one 90° angle, like [this one](), and you make the longest side exactly 1 unit long. Then the two other sides will be sin(45°) and cos(45°) long. Thankfully `sin(45°) = cos(45°) ≈ 0.7071... So if we want to move 1 unit diagonally, we have to move 0.7071 unit's left and up. If you wanted to make it arguably *faster* then you could use more boolean comparisons like this, but you'd have to test it and the difference would be marginal. function player:move(dt) local yDelta = self.moving.down and 1 + self.moving.up and -1 or false local xDelta = self.moving.right and 1 + self.moving.left and -1 or false local velocity = (xDelta and yDelta) and 1 or 0.7071 ) * self.movespeed * dt self.x = self.x + xDelta or 0 * velocity self.y = self.y + yDelta or 0 * velocity end
yeah there's definitely a few errors in there. I have several different functions and am still trying out different ways of movement, input, controls and formulas. 
hmm... amend a few hours to a few days. on the bright side... coding is fun! (until it gets to a thousand lines...)
reply 
What is that? I have zero results on Google for "xfuscated"
[Should be this one](https://github.com/mlnlover11/XFuscator). An obfuscator as you'd expect. 
That's about what I expected.
Your post was locked. We don't really encourage trying to reverse-engineer other people's code. You could try asking the author of the game nicely for though.
[removed]
luaossl is there to do interactions with https, so I think you can require lua-http without luaossl (if you only need run http requests of course)
This is really interesting. This looks like a perfect fit for Lua: an embedded script for easy, and **FAST**, AST and content manipulation, with minimal overhead and easy deployment (it's already inside the pandoc binary). What do you think this could be used for? For me, content sanitisation or perhaps templating? 
You can open the preferences file using `Edit | Preferences | Settings: System` and `Edit | Preferences | Settings: User` and check if there is `language="ru"` statement in one of them.
[Shougo](https://github.com/Shougo/) used to do lots of things with it, for example [neocomplete.vim](https://github.com/Shougo/neocomplete.vim). Unfortunately he seems to have moved on to neovim, which as of today doesn't support Lua, so his development on this regard has stopped.
This is not the appropriate subreddit for that kind of question.
Fully agree, lua is perfect for the job. The idea of including lua in pandoc must be credited to jgm, the author of pandoc. I merely implemented the filter system. I had been using a [custom writer](https://pandoc.org/MANUAL.html#custom-writers) to allow semantic annotations for references and make it simple for academic writers to [author papers in markdown](https://pandoc-scholar.github.io). So I was already using lua, but the whole tool-chain was somewhat of a hack. The new filtering system is trying to solve this. My latest use case was less interesting, it dynamically [inserts a table of contents](https://github.com/tarleb/talks/blob/master/2017-10-26-hal/filters/add-toc.lua) into a slide deck.
Just learning Lua and am using ZeroBrane Studio. I normally use Vim though. Syntastic plugin supports Lua, and I beleive YouCompleteMe does as well. I have not installed YCM on the latest incarnation of my vimrc, but probably will soon unless I find a better alternative.
I don't know what that is in Russian
"Правка" (second top menu from the left), then "Настройки" (bottom item), then both "Установки" items.
it’s not possible. why would you need that anyway?
Maybe I am not understanding the point of the stack, then. How would I enable modding through scripting if c++ always has to know the variable names in the Lua file? What good is the stack if only c++ can use it, and not Lua?
the stack in c is for using unnamed parameters. you don’t need to know variable names. but check the examples for using c with lua. 
Here's a function in C: int add(lua_State *L) { int x = lua_tointeger(L,1); int y = lua_tointeger(L,2); lua_pushinteger(L,x + y); return 1; } And here's the code in Lua: function add(a,b) return a + b end In Lua, parameters and local variables are stored on the stack, and the Lua compiler tracks the location of each variable.
I believe that struggling with this is not at all uncommon. There are two major ways in which Lua and C++ can interact: 1. Loading a lua file or string from C++. Information can be passed to Lua only via global variables. Values from Lua can be pushed to the stack by `return`ing them at the end of the script. 2. Calling a Lua function from C. See the documentation of `lua_call`, which describes it best. 3. Calling a CFunction from Lua: values passed to the function are pushed to the stack and are accessible by the C function. These are conceptually very similar, as data transfer happens whenever a function is called (a thunk resulting from loading a file must also be called like a function). So it might help to mainly think about function calling: Instead of setting global variables, one can define functions which give the desired return values, thus passing information back and forth between Lua and C++.
Thank you, it worked ^ - ^ Also, I'm having a huge laugh changing my font to comic sans 
You are attempting to start LuaJIT while you are already inside LuaJIT. Instead of "luajit -h", enter for example: print("Hello! 1 + 2 = " .. 1+2) Or, better yet, what exactly are you trying to do? I am not familiar with the "-h" option.
You don’t have to know the names, just where they are. When Lua calls a function, it pushes the arguments in order on to the stack. The function pops them off and pushes the return value. 
1. Open a command prompt window. 2. Type `cd C:\Users\blach\Desktop\LuaJIT` 3. Write whatever command you want to run, such as `luajit -h` OR 1. Create a .bat file in `C:\Users\blach\Desktop\LuaJIT` 2. Open the .bat file you just made in a text editor. 3. Write whatever command you want to run, such as `luajit -h` 4. Save the file. 5. Double click the .bat file to execute it.
Not an answer but have you seen this project? Http://terralang.org
Thank you so much!
How can I "paste it in browser"? It seems the browser emulator can only paste between itself, not from outside sources.
Oh...well fudge. Just remove the Tic-80 specialty code and just try printing normally?
Well, in the Time:new() function, you are setting then .sym property of "self" table. What is "self" here? Well, you are calling this function as Time:new(), so "self" is equal to "Time". You only have a single Time table in the whole program and you are changing its .sym property each time you call Time:new()...
I'm using meta tables because each Tile needs to be an instance that we can edit. Walls might have HP and be breakable, some doors need to be bashed, etc.
As explained above, you are using them wrong. With each new() call, you are changing the same instance of Tile.
Perhaps you need to use the function findColor
Listen to this guy. 
That’s not a descriptive function that, that’s a sentence. Should be in a comment above if needed. The added length (well width) of your code would be nuts. 40+ character function names? You can cut it in half with standard shorthand. TOC pops to mind. 
I thought the article would discuss the topic more. Very interesting though. 
What else would you like to know?
In the 2nd case, you're using `not`, which negates the comparison. What were you expecting to happen?
Are you trying to do if not (first == second) Or if (not first) == second For the former, `not` has higher precedence than `==` so parentheses are necessary. If you thought you were doing the later then please re-read the section of the manual defining boolean data types. Particularly how number values are converted to boolean.
Alrighty, so OOP examples in Lua aren't well documented and MetaTables are a higher concept most programmers won't grasp initially. Some of the examples I found were pretty garbage (like the one I initially put into the pastebin. The example didn't define "self" and I had accidentally mixed up the arguments in the setmetatable() function. Here's my new use which doesn't suck. Tile = {} Tile.__index = Tile function Tile:new(name,sym,prop,desc,look) local self = {} setmetatable(self,Tile) self.name = name self.sym = sym or "?" self.prop = prop or {} self.desc = desc or "" self.look = look or "" return self end
It's Lua, not C or C++. In Lua the number 0 is not the same as the boolean 'false'... it is just a number. When used where a boolean is expected, it has the meaning of 'true', just like any other value that is not 'false' or 'nil' (try print(not 0), you'll get 'false').
Even if it works, bad practice. You're overriding the in-built "self" variable in ':' calls of methods. Tile = {} Tile.__index = {} function Tile:new(name, sym, prop, desc, look) local ret = setmetatable({}, Tile) ret.name = name ret.sym = sym or "?" ret.prop = prop or {} ret.desc = desc or "" ret.look = look or "" return ret end
The reason this doesn't work is because you don't enclose `"yay"` with brackets, like so: `print("yay")`
Check out [Neovim](https://neovim.io/), perhaps the most popular fork of Vim, which is heavily embracing Lua as a scripting replacement for VimL. Unfortunately native Lua is still in development of v0.3, but def worth checking out now to get a head start.
Could a file upload be added? I'd love to upload a whole script and see the output. 
You can include external scripts with the type "text/lua" or "application/lua". Is that what you're talking about?
I mean using file.read and file.write to get/put arbitrary external urls. Not sure if this is possible in browser-javascript, but it would be neat. 
I am not really getting the question... Variable names are not needed, they are just used for debugging. The stack is used internally by C, why would you need to access the stack from Lua? 
I'm not an expert on that, but opening a file for reading/writing could be converted into some simple AJAX code that fetches the URL into a buffer that simulates a file.
I was curious about which of the two methods, creating a table from `...` or using a for loop with `i=1,select('#',...)` would be faster. The result is: it depends. select is faster for small numbers of arguments, about 16-20 in my tests, while ipairs is the better option with many arguments. I will probably try this on different machines and interpreters later on (including LuaJIT).
this should not be a thing :|
you can shorten that to `local yDelta = self.moving.down and 1 or self.moving.up and -1`
you could do something like this: function square2circle(x,y) local angle = atan(y/x) return cos(angle)*x, sin(angle)*y end Which maps a square to a circle. Think of the "naive" approach to game movement, where you can move up+right and move at max speed in both directions, thus the total velocity is higher than the max speed. In fact, it's the hypotenuse of the triangle. Now, if you represent the values the x_speed and y_speed can take on a (cartesian) coordinate system, you get a square, don't you? Guess what, if you map that square to a circle using the above function, you get the proper max-speed. Thus you only need to get the "naive" speed values and feed them through that function. The good thing is, you can use the above function not only for 45 degree angles, but for all imaginable angles. You can get the speeds with speed_x = self.moving.down and 1 or self.moving.up and -1 or 0 self for speed_y
the complete code would look like this local function square2circle(x,y) local angle = atan(y/x) return cos(angle)*x, sin(angle)*y end function player:move(dt) speed_x = self.moving.down and self.moving.up and 0 self.moving.down and 1 or self.moving.up and -1 or 0 speed_y = self.moving.left and self.moving.right and 0 self.moving.left and 1 or self.moving.right and -1 or 0 local dx, dy = square2circle(speed_x,speed_y) self.x = self.x + dx self.y = self.y + dy end
For reference, could you compare it to local t = {...} for i = 1, #t do -- or select('#', ...) a = t[i] end to separate the cost of the generic for loop from the cost of building/accessing the table?
Sure, I guess I could expand the test to cover that case too, give me a few minutes and I will update everything.
Well, you have to compile these modules. Look up in the manuals how to do it.
Okay, so I updated the code quite a bit and tried it with LuaJIT to see how it would perform. The result is... well, as expected from LuaJIT, it's a __lot__ faster, but what surprised me is that select runs better than all the other options on LuaJIT by quite a difference.
How? By running the Makefile? I tried to do so by using the nmake command in the VS admin command prompt, but everytime it says that nmake is an unknown command? Do I have to download some bonus pack in VS, or am I missing something?
The first one needs MinGW-gcc to build on Windows. The second one has only instructions for Linux. 
you will basically *always* want to use select instead of making a table when iterating over varargs, because # and ipairs do not handle nils in the middle (or at the end, for that matter) of the vararg list, whereas select does.
[In LuaJIT at least](https://github.com/LuaJIT/LuaJIT/blob/HEAD/src/lib_base.c#L237), `select` is pretty much working on the VM call stack directly as an array. It is able to easily get the number of arguments and access them by index directly, so it's a O(1) operation with some type- and index-checking boilerplate.
Select becomes extremely slow after about 512 arguments though.
Lua is a nice language, and it's very powerful for its size; but for what you describe, it might be worth just looking at bash scripting. I myself do a lot of stuff in lua that could probably be done in bash, mostly because I don't want to have to remember how to do loops, conditions, etc. in yet another language. If you want to do more complex stuff, specially if it involves modifying strings, then lua is a good option. Another alternative you should consider is ruby. I hate 90% of what people use ruby for, but the one advantage I see in it is that it's comfortable to write because of all the stuff that's already implemented (which is also a thing I hate about it, the bulk of its standard library). Also consider that a fresh ubuntu install already has bash installed, but you'd most likely have to install lua manually before being able to run your script.
Probably the best solution, though I'd add a `local` before the `x` :)
In what sort of real-world situation are you passing 512 separate arguments to a function?
Doesn't that happen like all the time? xD
[Starsceptre](https://itunes.apple.com/us/app/starsceptre/id1180940430?mt=8) was written in Codea, and published through normal means. [Review from DPadJoy](https://dpadjoy.com/2017/08/18/starsceptre-review-ios/) [MacStories story about it](https://www.macstories.net/stories/coding-on-ios-is-more-feasible-than-ever-before/) 
Am I missing the Lua side of things?
not really sure if this answers your question but there is a Lua mod of Pokemon Red called Lua Red (or Luna Roja). It's an edit of mGBA though, not VBA. Maybe you could take a look at the code there or maybe ask the dev? https://hax.iimarckus.org/topic/7112/
People here aren't necessarily very familiar with the framework you're working in so it's hard to really help you (since at a guess this isn't strictly a Lua issue but more an issue with how to interact with the VBA API). That said, how does NumberOfButtonPresses and Move get set? How often does Playermovement get called? What are you expecting to happen and what exactly is happening?
Thanks! I'll take a look and see if they are doing something similar
I agree, it's definitely an issue interacting with the emulator. I was just hoping to get lucky and find someone who maybe has some experience working with VBA. NumberOfButtonPresses is set just as a local variable I set to 500. Move{} gets filled with that number of random commands (L,R,U,D). PlayerMovement is called just once right now for testing, eventually it will get called several times. (I will be applying AI to this to find the best path.) I wanted to use this algorithm (set 500 button presses, press each one 5 times for 2500 total presses) because I have a hypothesis that it will generate better results than 2500 random presses. I expected it to actually press each button 5 times and you would see it on the screen (walk up 5, right 5, down 5, etc), but that isn't what happens. I believe what is happening is the emulator is just catching random button presses from that stream because the Trainer does not move in batches of 5, but in random directions once (what I'm trying to avoid). **Documentation on emulator commands:** joypad.set(int port, table buttons) / write: Sets the buttons to be pressed next frame. Cannot clear buttons. emu.frameadvance(): Pauses script until the current frame has been emulated. Cannot be called by a coroutine or registered function.
I think you’ve basically identified the problem already. It’s pressing the button 5 times during a frame. Also, it takes more than one frame for the player to actually make a step in Pokémon, so after each button press you probably need to advance maybe 20-30 frames for the players step to complete. 
I’d look at the contents of that log file.
Further down in the article, there is talk of the relative performance of LuaJIT in the different architectures.
To start, you would be compiling to a .dll on windows and .so on Linux or osx.
[removed]
ok. but still. I coudnt compile in any way I tried
That's not surprising if you don't know what a .h or .lua file does. You have some googling and reading to do.
Ok. Nooby Question. What mingw command do I need. the furthest I came was with mgwin32-make.exe -f makefile this gave [this error](https://imgur.com/a/rEGfV). Unfortunately I have no access to a linux so I cant try the second one. and what about [this library?](https://github.com/moteus/lua-lluv-rs232)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/mUButuN.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
rly? every library I had till now just were a bunch of .lua or .h files. I use Zerobrane BTW. But That not even the original question. No offense, but after all I tried the everything I want is a working library
Why would that be offensive. I'm saying if you want a working library you are going to have to stop pushing buttons randomly and learn more.
Im not pushing buttons randomly. Otherwise you couldnt read what i would write here. Back to business: I try. But i dont find anything. The only thing I find when I look for lua and libraries are some pages that quote this lia manual from the website and even the youtube tuts where just explanations of the manual. And everytime i tried to solve an error it either didnt work or it created new ones. And the internet is imo not too helpfull in explainig things for lua. Most things you find are from stackexchange or reddit which only help in a really specific case
No offense here pal, but aren't you being way too naive submitting some code online and expecting the result is compiled with no malicious intentions? Someone can hijack the code, inject sniffers, remote loggers, uploaders, scanners, backdoors or any kind of malicious behaviors, be it to steal information, control your machine or who knows else. I strongly advise you to ignore any binary you receive and figure out how to compile your code on your own. 
Programming on Windows is a nightmare. I'd recommend switching to Mac or Linux.
is source available? 
I like to use the record macro feature; record, stop, view to get x and y. The do an alert(getColor(x, y)). 
t = { f = { function () end } } t.f[1]();
t.a.b doesn't exist right away. A two line version is the best case here. -- t = { a = { b = 1 } } t.a.c = t.a.b + 1 -- 
t.a.b doesn't exist right away. A two line version is the best case here. -- t = { a = { b = 1 } } t.a.c = t.a.b + 1 -- 
Use the "local" keyword to scope in-function variables properly. 
You need to take _ul_serial.dll (from the repository you referenced: https://github.com/edartuz/lua-serial/tree/master/build/win32) and copy it to your project directory (assuming you are on 32bit Windows). Then set `package.cpath` to point to that directory with something like `package.cpath=package.cpath..";./?.dll"` and it should all work after you do `require 'ul_serial'`.
You don't need to compile the library in this case as the author of the module you referenced already included binaries for Windows and Linux (https://github.com/edartuz/lua-serial/tree/master/build/). Just follow the instructions I posted in the thread you referenced and you should be good.
Yeah. It's not updated for the latest version, though. It's not very good, honestly. https://github.com/Adorable-Catgirl/laine.jpeg
Swap the order of action and verify in sav and you created the C-style for loop. for (initializer; condition; postaction) 
Awesome! I lost interest fairly fast, thanks for pointing that out! :P
Still looks sexy long-hand. 
Ah, looks like my indentations were removed. Gimmie a second to fix that.
Lemme know if there's a way I can make the "Here is the general organization scheme I'd like to have" section collapse-able.
OK.I put the .dll in my program directory and i added package.cpath=package.cpath.."/ROOT/?.dll" local serial = require '_ul_serial' at the start of main.lua, but the program just crashes. no further information, no error. Just a crash
Not that you were asking for a code review, but when you [specify the return value of certain functions](https://github.com/Adorable-Catgirl/laine.jpeg/blob/e3eed532cb8efe61ed90e1f95e66245ccc5c6c96/base64_laine.lua#L93) the functions being returned in the table are already in the scope of the files requiring them (this is because you have them globally defined). If you want to implement modules properly you will want to either make them local or make them member functions of the return table. [For a more complete explanation](http://lua-users.org/wiki/ModulesTutorial).
There may be a number of reasons for the failure; one of them is the different Lua versions of the interpreter you are using and the one that the library is compiled for. One way to see what happens with the DLL is to use the dependency walker (http://www.dependencywalker.com/). It support "profiling" mode that tracks for DLLs are loaded and reports any errors that happen during those operations. It also shows the dependencies between the dynamic libraries, so you can see if the correct version of the Lua interpreter is being used.
I would `assert` that the types make sense rather than silently return whenever you're given bad inputs. assert(type(start) == "function") assert(type(action) == "function") -- etc What was your goal in making this?
Both are embeddable, Python is difficult to embed for historic reasons and not because of the size of the standard library. The specifics how Lua was implemented (not the language design) make it easy to both extend and embed. 
I downloaded the programm, but I dont know what I have to do with it now. I cant run the profiling, because you cant run it on a .dll and I have no idea what I am supposed to do now!
`File | Open`, then select the *executable* you want to run (the one that will load the DLL), then `Profile | Start Profiling` and specify any program arguments and the directory to start in, then `OK` and check the results.
Made with the LOVE2D .exe! [Here is some code](https://pastebin.com/9d4gA0MC) Most red-marked errors are, that a library returned NULL and the mosule werent found [Here is a picture](https://imgur.com/a/kso9j)
Feedback on code: `self.len` probably should say `return #self.list == 0`. `self.pop` could be shortened to `return table.remove(self.list, 1)` (since table.remove returns the element it removes). Since your `self.list` is really a sequence with no holes, you could just use `return #self.list` for defining `self.len`. Lua typically uses `:` for method calls. Instead of defining a new `self.` function for each instance, you should use a single function that takes `self` as its first parameter: queue = {} function queue.push(self, item) table.insert(self.list, item) end function queue.pop(self) return table.remove(self.list, 1) end function queue.is_empty(self) return #self.list == 0 end function queue.len(self) return #self.list end function queue.new() return { list = {}, push = queue.push, pop = queue.pop, is_empty = queue.is_empty, len = queue.len, } end return queue The constructor can be shortened using metatables too: function queue.new() return setmetatable({list = {}}, {__index = queue}) end These code organization issues and the typo in `is_empty` aside, your implementation looks reasonable. Do note that `table.remove` used that way is linear in the size of the table, so this is a pretty slow queue implementation. Also, A* really need a *priority queue*, not just a regular queue. The easiest one to implement is a binary heap; it would have the same interface as this, except it needs to be given a comparison function (or otherwise can assume `&lt;` is provided)
First things first my favourite a* resource to point people to is [this from Red Blob Games](https://www.redblobgames.com/pathfinding/a-star/introduction.html). It also has a companion [implementation guide](https://www.redblobgames.com/pathfinding/a-star/implementation.html). Anything I would say here, Amit says better than me so I'm going to just tell about queues in Lua. The easiest way to implement a priority queue is to use a max-heap or a min-heap. Because we want the smallest priority we use a min-heap. I don't know how much you know about graphs and heaps so I'll go quickly from the start-ish and google can fill in the gaps. A tree is a structure where you have a single root node. This root node has a number of children, each child as has a number of children and so on. A *Binary Tree* is a specific type of tree where each node has 0, 1 or 2 children. Building on from this, a *Min-heap* is a type of Binary Tree where all children of a node are larger than the parent. This means that the smallest item in the tree is the root node. A min heap is implemented using an array, the root node is at position 1. A node at position n has a parent at `math.floor(n/2)` and it's 0-2 children at `2*n` and `2*n+1` To add an item we simply add it at the end of the array. Then we check if it's smaller that it's parent (remember that the parent is at `math.floor(n/2)`). If it is smaller we swap it and the parent. Then we check at to see if it's smaller than it's new parent and repeat. We do this until the item we added is at the new root node or it's bigger/equal to it's parent. To remove the smallest item we store the root somewhere else (in a temporary variable) and we move (not swap) the last item in the heap to the root. Then we do a very similar thing and move down the element until it's in the right place. That is check if the item is larger than either child and swap if it is. Stop when the item is smaller/equal to both children. For a priority queue we use a min heap as we have above and we just sort them based on the priority of an item rather than the value of an item. So the root would be the item with the smallest priority, and each nodes children would have a higher priority than the node Apologies if it's hard to understand, let me know any parts you are stuck on and I'll try and dig up some useful resources to explain it better.
The item doesn't have to be a simple number. queue:push { x = 4 , y = 15 } queue:push { x = 5 , y = 15 } point = queue:pop() print(point.x,point.y) 
Thank you for all the feedback on the code. Somethings were bugging me about how I wrote the code. I've changed the mistakes and simplified it since. I'm still getting used to doing classes the way you showed. I've seen it done the ways you demonstrated in a lot of resources I've studied but it's always been simpler to read for me without metatables and I have gotten really used to using self. so it's a habit I'll have to break down the line. I'm not saying that's the best way to do it and I really like Lua so I'll get used to it's conventions. Thank you again for all the feedback, tips, and your time!
Oh yes! I love Amit! His guides are excellent and exactly what I've been using and also how I did pathfinding back when I was using Python. I've heard of heaps before and now they're coming up a lot in this thread, so I'll need to dedicate some time to meaningfully understanding them. Excellent explanation and definitely a resource I'll fall back on as I use google to 'fill in the gaps'! Also I forgot all about Amit's implementation guide so that'll be excellent to read up on as well! Thank you so much for the push in the right direction!! Also here's a [great explanation on a*](https://www.youtube.com/watch?v=-L-WgKMFuhE), in case anyone who's just starting needs something completely visual before jumping into Amit's very user friendly guides.
This is embarrassing. I swear that's exactly what I thought I did and I was getting some kind of error but it definitely works now. Wish I had saved the code I used before that wouldn't work so I could compare it and figure out what went wrong. Anyway thank you! Turns out I probably made a silly mistake but nonetheless this thread has been very helpful, kind and informative. Thank you very much!
Lua has asserts, nice. No goal, no reason, more of an thought materialized. Btw, you didn't suggest a title. :) I actually have some Lua scripts that I've been continuously trying to reduce in size, they all use the same if-do-loop and only vary slightly, that's the inspiration for this. 
`self.die()` should be `self:die()` Class creation syntax should be consistent (`:new()` should be changed to `.new()` for style reasons) Your other problem is that when you create a new PlayerScript you overwrite the metatable of the new object. ```lua local playerScript = BaseCharacter.new(o) -- this is the equivalent of: local playerScript = setmetatable({health = o}, BaseCharacter) -- immediately after, you overwrite the metatable, -- changing it from BaseCharacter to PlayerScript -- tables can only have one metatable setmetatable(playerScript, PlayerScript) ``` If you have questions specific to Roblox, you should head over to https://scriptinghelpers.org/
I fixed the code you pointed out. I'm still not sure how to solve the inheritance problem though. I know you are saying that I'm overwriting, but I'm not really sure how or why.
In PlayerScript.new, you set the metatable of the instance to point to PlayerScript, thus it has not anymore the metatable pointing to BaseCharacter. Which is fine, as you want your instance to look up in PlayerScript in first place. You then need to make PlayerScript to point to BaseCharacter with a metatable too. Something like this would work: `local BaseCharacter = {} BaseCharacter.__index = BaseCharacter function BaseCharacter.new(...) local object = setmetatable({...}, BaseCharacter) -- if we don't find something in instance, look up in BaseCharacter -- you can do extra stuff to object here return object end local PlayerScript = setmetatable({}, { __index = BaseCharacter }) -- if we don't find something in PlayerScript, look up in BaseCharacter PlayerScript.__index = PlayerScript function PlayerScript.new(...) local object = setmetatable(BaseCharacter.new(...), PlayerScript) -- if we don't find something in instance, look up in PlayerScript (thus if it is not in PlayerScript, look up in BaseScript) -- you can initialize other object members here return object end`
So in the .new function is where I put all of the functions and attributes for the 'class?'
I've recently read an interesting article about how lua started, and have somewhat changed my way of writing OO code in lua. Before I would have used classes like this object = Class.new() while now I use them like this object = class{} or even just object = require[[class]]{x=1, y=2} The implementation is rather simple local __class = {} local __meta = {__index=__class} function __class:some_method() do_stuff; end return function(tab) return setmetatable(tab,__meta) end This has a few advantages. First, both the metatable and method table are well hidden, needs less code, it only exports what it needs to: the constructor, and if I really, REALLY wanted to have a class as an object, with class methods and such things, I could still use the __call metamethod ti keep the code consistent. As for inheritance, I am generally not a big fan of that, but in theory a subclass needs 1. its own constructor and 2. a new metatable that redirects to the parent class metatable for unknown keys. How exactly you want to expose that is your choice, maybe with a second function, maybe calling the "class" function without a table could create a new metatable that you could then use for your subclass.
Not really, sorry if it was misleading, I was focusing on the setmetatable calls and inheritance. You can keep your member functions like you did. However for attributes, you can put them in the .new func because as long as you put one in an instance, the one in the class is not looked at anymore (the __index is used only if the key is not found in the instance). You can still keep attributes in the class if you want some constants or kind of default values. PS: there is another paradigm to make OOP in Lua where you put all the func in the .new, that allows to have some kind of private attributes thanks to local variables, but that's another story ;)
What operating system are you trying to install it for? How are you trying to install it? On many systems, the easiest way to get Lua is to download the source and build it yourself. This is easier for Lua than most applications that tell you to do this because of how portable Lua is. Follow the directions on this page https://www.lua.org/download.html in the section called "Building". If you're on Windows, you'll either need to use Bash on Windows, or use Cygwin/MinGW.
Thank you for the simple explanation , im on windows 10 , ill try bash then ! :)
Bash on Windows 10 allows you to use most of the Unix tools normally (that's the point of Bash on Windows 10!)
Start with zbs: https://studio.zerobrane.com/ 
Thanks!
So im stuck where do i get bash .
apt-get install lua 
I agree you may try ZeroBrane Studio, that is a free Lua [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) with an installer. It includes an editor (syntax highlighting, auto-completion, ...) with a debugger (to see what's going on line by line), and binaries for Lua 5.1, 5.2, 5.3 (not sure it's 5.3.4, but to learn it you probably won't see any difference) and many more. It also includes some basic (interactive) Lua tutorials.
**Integrated development environment** An Integrated Development Environment (IDE) is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools and a debugger. Most modern IDEs have intelligent code completion. Some IDEs, such as NetBeans and Eclipse, contain a compiler, interpreter, or both; others, such as SharpDevelop and Lazarus, do not. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
lua5.x, depending on the version `apt-cache search lua` for all your options.
You forgot some critical information: 1. What operating system? 2. What keyboards? 3. Why do you think you can do this with Lua? 
That **luna** is a typo right?
Is it necessary that you make this yourself? Software probably already exists for this.
Install [Visual C++ 2015 Build Tools](http://landinghub.visualstudio.com/visual-cpp-build-tools) [Download](https://www.lua.org/download.html) and unpack Lua Build Lua cd C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC vcvarsall amd64 cd %USERPROFILE%\Downloads\lua-5.3.4\src cl /MD /O2 /c /DLUA_BUILD_AS_DLL *.c ren lua.obj lua.o ren luac.obj luac.o link /DLL /IMPLIB:lua-5.3.4.lib /OUT:lua-5.3.4.dll *.obj link /OUT:lua.exe lua.o lua-5.3.4.lib lib /OUT:lua-5.3.4-static.lib *.obj link /OUT:luac.exe luac.o lua-5.3.4-static.lib
Auto Hot Key does this.
i instlaled it a while ago. like 3 days ago.
Exactly what I came here to say; if you're new to lua, start with zerobrane. It has a lot of nice features, it comes with lua 5.3, 5.2 and LuaJIT (5.1), as well as support for löve, corona, etc.
Might be late. But you can follow this. http://lua-users.org/wiki/BuildingLuaInWindowsForNewbies
Yes, thanks for catching that. 
Not that I've found. 
Windows 10 Thermatlakte Posieden and other one not sure really Saw a video from Linus Tech Tips on youtube were their editor had an entire keyboard with binds, based off the dude who made emoji keyboards. He used a combination of autohotkey and lua originally to make it work. There is no detailed explanation I could find
Do you know where I can find info about that?
They're the same thing.
Maybe 5 minutes. 
Cool stuff! 
About a decade ago, I took a simple GB emulator - (it had limited compatibility, but was easily hackable) Loaded tetris and started hacking it to present a second dispaly - as an alternative surface, integrated lua to the emulator and attach event triggers to memory writes. So you could write your own render functions and make a "graphical skin" for retro games. I got it to render the tetris grid and the score/line counter but that was it. There was no texture support or anything, super simple "proof of concept" I should have released that janky crap ages ago. Someone may have ported it so you could make really awesome graphical updates to games. (Translations too!!) Everytime I see cool hacks like this I want to revisit this project, there are so many games that I know the fanbase would love to "re-art" 
I've thought about what could happen if you made tiles with high resolution and color depth, then re-did all the artwork for a game.
I think it would be awesome! For older 2D 8/16 stuff I can't fathom how you'd screw it up. On modern systems with OS's and similar you start to get modern features like a local heap. It might start to get harder if memory allocations and such are out of order and you have to track stuff down (Though I suppose the pointer to that area of memory may be consistently discoverable??? ) Heck with the right interface you could make Mario bros' render a 3d variant of the game, custom sprites, animations all running @4k 144hz ... still executing the old original rom, with exactly (**) the same game mechanics. 
How would you go about the high frame rate stuff? I've thought about interpolating scroll registers by assuming the input buttons stay the same.
Well, I'd say that you'd have to accept your renderer isn't going to be PIXEL accurate. You could think of something like mario jumping as a velocity of X pixels / Time - and then just scale that up as necessary for your new implementation. Say a goomba spawns, you know that a goomba moves at X pixels/ T to the left, you create an instance of your own goomba with that velocity set, and the interpret the signals from the rom as events that input into your goomba's state. goomba gets squashed... trigger the death animation, if you're 16x'ing the input game resolution, then if the goomba's animations is off by one upsampled pixel... It's probably not the end of the world. Besides, each game would require custom writing of the software used to render it, so that means you'd be tweaking things until you're happy with how it works. You could even lock the upsampled framerate to the emulated console's rate - tracking things like the scanline register it may be harder or impossible to get that precisely though. 
Looks awesome!
A happy Thanksgivings to our readers in America! :D
This technique, like a programmatic debugger, can be used to extend a binary in ways it was never designed. It isn't limited to graphical programs, or games, anything can benefit from the technique. The next step is to use machine learning / computer vision against the UI and watch execution traces and memory locations update, then one can programmatically manipulate state that would have been only possible in the UI.
depends on what platform you're on. if you're on apple you can use # ~~~*Foundation*~~~ and a objective-C LUaJIT FFI BINDING!!! if you have python you can use ## LUNATIC PYTHON AND THE REQUSTS LIBRARY if you are masohistic you can ## WRITE YOUR OWN HTTP LIB IN C USING OPENSSL and shit GOOD LUCK
[lua-http](https://github.com/daurnimator/lua-http)
Has anyone tried [lua-requests](https://github.com/JakobGreen/lua-requests)?
Pretty sure I have. It was good, worked for what I needed it for. 
1) Download the [MSYS2 installer](https://msys2.github.io/) and follow the instructions from the download page. In the following, I'll assume that you installed MSYS2 in the default location *C:\msys32*. If not, change the paths below accordingly to your chosen location. 2) Open a MinGW shell (using the shell launcher *C:\msys32\mingw32.exe* or *mingw64.exe*, depending on your architecture), and install Lua with the following command: $ pacman -S ${MINGW_PACKAGE_PREFIX}-lua 3) Append one of the following two paths, depending on your architecture, to the PATH environment variable: *C:\msys32\mingw32\bin* (corresponding to */mingw32/bin* under MSYS2, for 32-bit), or *C:\msys32\mingw64\bin* (corresponding to */mingw64/bin* under MSYS2, for 64-bit). Now you should be able to execute the Lua interpreter from the Windows command prompt, by just typing *lua* in it (to exit from the interpreter, type *os.exit()* or *Ctrl-C* in it).
| a severed goat's head appear on my desk And I thought I had it bad when I was generating a hash of Table ID values and my monitor turned into a portal to hell. At least I didn't have to clean up the mess afterward. Carry on, brave warrior!!! 
I found the API pdf for that software with a little searching, you should already have it installed somewhere from that software. The API lists the functions you need, "PressMouseButton", "ReleaseMouseButton", "MoveMouseTo/MoveMouseRelative", "Sleep", etc.
According to [the docs](http://www.wolfpack.pe.kr/attachment/1180489860.pdf) the spacebar keycode is 0x39, not 39. The other keycodes look incorrect too (e.g., 15 is 0x0f which is tab.)
https://gyazo.com/00424c8486fe6e904ac416d648bfe9b3
Hi, I'm a bot that links Gyazo images directly to save bandwidth. Direct link: https://i.gyazo.com/00424c8486fe6e904ac416d648bfe9b3.png Imgur mirror: https://i.imgur.com/NkRkcTp.png ^^[Sourcev2](https://github.com/Ptomerty/GyazoBot) ^^| ^^[Why?](https://github.com/Ptomerty/GyazoBot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/u/derpherp128) ^^| ^^[leavemealone](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=ignoreme&amp;message=ignoreme)
delete urself
Could you give a file name maybe?? or a location, or something less vague then "you-should-have-somewhere"? because i don't have any pdf's in there. and don't see any api documentation explaining if "PressMouseButton" is a function() call, or if it's a constant_value or how to structure the indication between mouse buttons 1 through 5. Your post didn't help, sorry Zeliss. Im definitely not asking for anyone to write the code for me, but show me a proven, functional, call to this "PressMouseButton" feature, or it doesn't exist! :p
The API is not publicly available, so I don’t want to run afoul of any copyright infringement rules by linking to it. This post describes how you should be able to access it from the script editor: http://www.softpanorama.org/Hardware/Peripherals/Keyboards/Logitech_G_keyboard_macros/lua_scripting.shtml When I did a search for “logitech g19 api pdf”, it was on the first page of results. It’s really not cool to be rude to someone trying to help you when it looks like you didn’t even do a basic web search first.
2 Zeliss: i don't have a g19 so i wouldn't have searched for that. i did not think to search for the word api, instead i looked for the word lua, documentation and "5.1" and that's how i ended up on reddit. so my basic websearch took me to you. its not like i use reddit often just look at my post history :p (nearly blank). the 'help file' which is just a weblink under Help , does not mention anything about SENDING a mouse button click it only mentions about receiving and handling the event when it's clicked. which is no help nor is it in context with my request. Furthermore, its that help-page that lead me to search the web for more definitive answers. soooo this has literally been a wild goose chase.. You could have simply said you don't know, if you were unable to outline the option :p
Lua code doesn't really translate to a flow chart. Basic if-else logic does, but that's not even scratching the surface of Lua.
Understood. Even the specific application of lua on the project uses the code to not only structure dialogues, but also to change character stats with each choices.
just learn about the io lib and how to use luarocks
Now, you could probably write transpiler that took flowchart input and produced lua code for your application, but I'd question how much work that would save you.
This is very open ended, so the open ended answer is most likely. There are more specifics that you will need to dive into, such as legal ability to do what Instagress did, the proper (or backdoor) endpoints to manipulate the API, and a broader knowledge of server/client relationships in Instagram.
There are tools for visualizing "business logic" and also UML which is a modeling language used for a bunch of different stuff. You could look at those, but honestly language (and Lua) is one of the best tools for describing logic.
Have a look at the [penlight library](https://github.com/stevedonovan/Penlight) by Steve Donovan.
My favorite one is Serpent: https://github.com/pkulchenko/serpent Super useful for debugging; not too big and does one thing really well.
The wiki has a ton of options for serialization/printing of tables. http://lua-users.org/wiki/TableSerialization
Not sure what you're asking for (don't know what Windows Wavetable is), but if you want to convert your data (velocity, pitch, and durations tables) into a MIDI file that can be played by any MIDI player there are several libraries available for Lua. The one I used to use -- and it's got tons of features beyond just generating a MIDI file -- is [MIDI.lua](http://www.pjb.com.au/comp/lua/MIDI.html). I used it for years before switching over to generating Csound files (you can load MIDI soundfonts into Csound and play them like you would MIDI notes but with tons more power).
Windows has a software MIDI player (Wavetable). I think OP is asking if there's a library in Lua that lets you interface with that. I'm guessing it's one of those things that's in the Win32 API, and I don't know if Lua has any generic means to use that, but I'm sure a Lua library has already been written for such purpose.
Are you making a linter?
No, i'm making a compiler for a VM i'm designing, in Lua for bootstraping
&gt; secuences sequences
 * License is missing, currently it is "All Rights Reserved" which not jsut means "no touchy" but even reading it could be problematic. * README containing all the interesting information would be nice. * Organize your source in directories (src and test for example). * More comments would be nice (also, if you have to use comments to structure your code into logical blocks you're doing something wrong). * Don't shorten variable names just because you feel like it (`nm`? `tk`?) 
Tables are compared by reference, not by value. Thus if you do something like local m = {} m[{1}] = "one" print(m[{1}]) --&gt; nil, because this {1} is a new table You'll need to make sure two keys that have the same content are also the same object in order to look them up in the map. You could use strings `"46,17,U"` or you could make a pool of objects `pool[x][y][button]` or you could just make `map` multidimensional in that manner.
easy enough, thanks!
this is only true for versions of lua &gt; 5.2
It also holds conceptually in 5.0 and 5.1 (not sure about earlier versions) if you use `setfenv()` instead of `_ENV`.
`_G.var` is explicitly global, while `var` is for the current env, which may or may not be _G.
interesting, thanks
I'm seriously at a complete loss. I've tried everything I can manage. I've searched the term on Google, Youtube, Bing and Yahoo. I've asked all my friends if any of them know what this means to no avail. I've checked Stack Overflow and this is basically my last place to ask. 
When building Lua from source, you need to have `LUA_DL_DLL` defined in order to include dynamic module support for Windows (`LUA_USE_DLOPEN` on Linux).
Do you have any links that would help me set that up? Please and thank you so much.
2 Things: * Baud rate (speed) looks low, match what you are using in the IDE. * Make sure you don't have the IDE/monitor going at the same time. You can't share a serial port... Hopefully, one of those will get you going. 
This question is way too vague. What exactly are you trying to do? Which things are you trying to pick out of a text variable? Do you mean a string? If you're looking for ways to manipulate strings, what is provided is all in the [string library](https://www.lua.org/manual/5.3/manual.html#6.4).
String.sub can do that.
Thank you! Works!
did you build lua from source or did you download the binary from somewhere?
You can create an empty function and pass that in, you can call the function *void*, or even *_*
But I need to know which button was pressed to pick the appropriate logic. So my key pressed function would look something like this pseudocode: function key_pressed(index) if index == 1 then print("1") elseif index == 2 then print("2") end So I don't understand how passing in an empty function gets me any further? Sorry if I'm being obtuse. 
You could pass the function name and the parameter you want to call as two parameters, then in the called function call the passed function with the parameter. A function name is just another variable I dont think you can pass a function with a parameter already in it.
To clarify when you add key_pressed(1) to the parameter list you are telling Lua to evaluate the function and pass its return value. If you put key_pressed without the () you are passing the name of the function.
I actually found out what was going on. I was scripting using the Bizhawk Emulator and apparently, it has its own built-in Lua interpreter it was using rather than my own compiled one. I switched to a different emulator and it worked fine. 
write a function that makes functions? function new_key_pressed_callback(number, func) return function() print("button " .. tostring(number) .. " pressed.") if func then func() end end end num_1_button = button_add("square.png", "square_pressed.png", button_spacing, button_y2, button_x_size, button_y_size, new_key_pressed_callback(1, function() print ("use missiles") end), nil)
Oh, I misunderstood. The only way I can see to to what you want is to supply two anonymous functions that call *key_pressed* with different arguments.
Might try /r/INAT in addition to here, if you didn't already
&gt; Any thoughts on doing this? At the end of the day it's not the end of the world to have functions for each button, but man it's ugly and just bothers me. What you want to do is basically functional programming, and despite Lua not explicitly supporting it, it's pretty good for it. You're right to be bothered by that sort of repetition because it's the sort of thing we should be letting the language deal with rather than doing a lot of copy-paste coding. Anyway, callbacks aren't anything special, they're just functions passed as the parameters of other functions. The problem is that in your example, `key_pressed(1)` isn't a callback, because the parentheses make the function run *when encountered*, and then the return value of `key_pressed(1)` is substituted into that parameter instead of passing a function, which is what `add_button` wants. To understand this better, you have to understand that functions aren't special in Lua, and that symbols like `key_pressed`, `num_1_button`, `foo`, etc. behave the same way regardless of whether they store a number, string, table, or function. If you have a table, `t[1]` will be substituted with the first element inside the table, whereas just `t` refers to the table itself; likewise, with a function, `f` refers to the function itself and `f()` executes function `f` and substitutes the return value in. When a function like `button_add` expects a callback, what it means is that it expects to be passed a function itself, not a function's return value. For `key_pressed(1)` to work, the `key_pressed` function would have to return an anonymous function, so that `button_add` would still receive a function that it can call. (Side note: functions that accept other functions as arguments, or functions that return new functions as their return value, are called higher-order functions) To try making this more concrete for you, let's modify the example in the API page you linked. The original, for reference: function callback_pressed() print("I am pressed!") end function callback_released() print("I am released!") end -- At a button at x=100, y=100, width = 200, height=200 -- The function 'callback_pressed' will be called when the button is being pressed -- The function 'released' will be called when the button is being released (This argument is optional) button_id = button_add("a.png", "b.png", 100,100,200,200,callback_pressed, callback_released) For this, we only care about making `callback_released` more useful, so that it prints "foo" when one button is pressed, and "bar" when another is. To do that without repeating unnecessary code, `callback_pressed` needs to accept an argument (the string to print) and return a new function that can be called (the callback): function callback_pressed(s) return function () print("Key pressed: " .. s) end end Now you have a function that returns a new function when invoked. If you call it alone, e.g. `callback_pressed("foo")`, it will look like it does nothing. However, try `print(callback_pressed("foo"))` and it will print the memory location of the anonymous function `callback_pressed()` just created. You can either call that directly (and anonymously) by adding another set of parentheses like so: callback_pressed("foo")() or by giving it a name: foo = callback_pressed("foo") foo() Congratulations, you've created a simple higher-order function. Now to put it to use: button_foo = button_add("a.png", "b.png", 100,100,200,200,callback_pressed("foo"), callback_released) button_bar = button_add("a.png", "b.png", 100,200,200,200,callback_pressed("bar"), callback_released) That's still a bit repetitive, especially if you're doing a bunch of buttons, but you can reduce the boilerplate a bit. At the beginning I said Lua treats function names the same as other variable names, and that means you can even store them inside tables just like any other variable: buttons = {} for i=1,10 do buttons[i] = callback_pressed(i) end button_1 = button_add("a.png", "b.png", 100, 100, 200, 200, button[1]) You can also use HOFs to create the buttons themselves without as much boilerplate: function button (text,x,y) button_add(text .. "_pressed.png", text .. "_released.png", x, y, 200, 200, callback_pressed(text)) end button_one = button("foo",100,100) button_two = button("bar",100,200) (Using a function to return another function with some of its arguments fixed, as above, is called [partial application](https://en.wikipedia.org/wiki/Partial_application)) Functional programming is great for reducing boilerplate, but where and how to do it depends a lot on the code itself. With simple layouts, it's easy to make a loop to generate all the buttons using some basic arithmetic to adjust button locations, but with something more complex it's likely better to make a button generator and then place them yourself by calling that with the appropriate coordinates.
Okay, I solved it. You have to pass the function first to `tostring`. It's odd though why `tostring(function () end)` doesn't output anything to the REPL, had to wrap it first with `print`. EDIT: Even `1` in REPL doesn't output anything. TIL Lua doesn't output expression results. EDIT2: 1 outputs an error
Thank you so much for that reply. It was thorough, clear, and well written. This is one of the best Reddit replies I've ever seen. That REALLY cleared it up for me a bunch. I'll take a stab at refactoring!
Convenience. Because it is largely used to "construct" new objects (in the manner of OOP for example), the first argument to `setmetatable` is very often an (empty) table literal. See [PIL](https://www.lua.org/pil/13.1.html) code of an example. This convenience lets you write local set = setmetatable({}, Set.mt) instead of local set = {} setmetatable(set, Set.mt)
Use a proxy (table with predefined values, or empty) and set its metatable to table containing a `__newindex` key with value function that handles new elements added. proxy = {} setmetatable(proxy, {__newindex=function () error('table read only') end})
&gt; EDIT: Even 1 in REPL doesn't output anything. TIL Lua doesn't output expression results. Prepend an expression with an equals sign to output the return value, e.g. `=2+2` or `=(function () return "foo" end)()` It's annoying but could be worse. Lua's REPL is pretty bare-bones :/
Thanks for the positive reply, I'm glad my comment was helpful. When I wrote it I was concerned that I wasn't explaining things as well as I'd have liked because I'm currently not in a good environment for instructional posts like that. (I'm away from my desktop for a few days due to the holidays but decided to chime in anyway because the other responses, while accurate, weren't explaining the *why* of callback behaviour.) Anyway, if anything I wrote wasn't clear or you have additional questions on the topic, I'll try to answer. I don't touch the OOP side of Lua much, but I'm into FP in general and I've noticed FP style works pretty well\* with the language, so I try to answer the questions that get into FP territory when they come up. I actually started writing a Lua tutorial of sorts a bit back, with an emphasis on this part of Lua, because I feel like it's an area that mostly gets ignored, but lately I haven't had time to finish it off; a nice side-effect of this is that whenever FP-ish questions come up, I *usually* have some examples or references handy, though I didn't this time so I was responding entirely from memory. :) \* Much of Lua is really just syntactic sugar on top of some combination of tables and first-class functions (e.g. functions as values, like above), and if one likes, it's possible to eschew the syntactic sugar to do some interesting tricks by reverting to the bare-bones style that the parser translates the sugared syntax to under-the-hood. That's why `function foo (bar) ... end` is really `foo = function (bar) ... end`, and why, instead of `function t.foo () return "foo" end`, you can use `t["foo"] = function () return "foo" end`. The sugar-free syntax tends to not look as nice, but can be used with loops or HOFs that return new functions, like that `button` example, whereas the syntactic sugar form would require copy-pasting of code to do the same things. Edit: also, thanks to you or whoever it was that gilded the other comment. First time I've gotten reddit gold, I believe, and nice that it was on a constructive comment instead of some dumb off-the-cuff joke somewhere. ;)
To me the question is "why does setmetatable return the table but table.sort doesn't". 
I didn't Google enough before posting this but now I have found the answer. I added the line print(#FILESREAM) and the answer was 1,425. Reading the entire file using the IO library doesn't seem to be an option due to size limitations. Now I'm exploring options to fix that.
[All About EOF](https://latedev.wordpress.com/2012/12/04/all-about-eof/) **tl;dr** Open the file in `"rb"` mode.
Very informative, thanks! Funny that the Lua manual doesn't mention any of this extremely helpful info...
This isn't part of Lua. It's from the host operating system and is different on different C runtimes. But [Programming In Lua](https://www.lua.org/pil/21.2.2.html) does mention it.
Most manuals for programming languages use `"r"` when `"rb"` is more appropriate because Posix &amp; Unix guarantee that they behave the same way. It's often forgotten that that's a guarantee made by those operating systems, not by C. 
Thanks for the tip!! I actually haven't, happy 2018!
BoxColor = {255,0,0} Color(unpack(BoxColor))
Thank you, though I assume my code is breaking somewhere since it's giving me this error when running in Gmod: ------------------------- [ERROR] lua/codeblue.lua:27: ')' expected (to close '(' at line 25) near 'end' 1. unknown - lua/codeblue.lua:0 _____ hook.Add("HUDPaint" , "DrawMyHud" , function() BoxColor = {255,0,0} local health = LocalPlayer():Health() draw.RoundedBox(0,10,10,100,10,Color(unpack(BoxColor)) end) 
I suggest you use gmod.facepunch.com's community for GMod related problems. Specifically, if you're starting out small with simple problems, the "Problems That Don't Need Their Own Thread" thread.
So, I've noticed a couple of issues with your code, and I'll iteratively correct them all one by one, with explanations as to what/why: ### 1 The `BoxColor` is setting a global variable, and not a local variable, could interfere if you use the same name elsewhere, and is also a bad practice. To fix it, add the `local` keyword before the `BoxColor` definition: hook.Add("HUDPaint" , "DrawMyHud" , function() local BoxColor = {255,0,0} local health = LocalPlayer():Health() draw.RoundedBox(0,10,10,100,10,Color(unpack(BoxColor)) end) ### 2 There is no need to construct a new color object every time you pass the color to a draw call, which also removes the need to unpack the color-table: hook.Add("HUDPaint" , "DrawMyHud" , function() local BoxColor = Color(255,0,0) local health = LocalPlayer():Health() draw.RoundedBox(0,10,10,100,10,BoxColor) end) ### 3 There is no need to construct a color object every frame. That puts a lot of strain on the garbage collector and can cause micro-stuttering ingame. So move the `BoxColor` out of your function: local BoxColor = Color(255,0,0) hook.Add("HUDPaint" , "DrawMyHud" , function() local health = LocalPlayer():Health() draw.RoundedBox(0,10,10,100,10,BoxColor) end) ### 4 You generally want to keep a consistent style, and every language generally has a prefered form. For the code you posted and the given language Lua, the inconsistencies are: #### 4.1 Local variables should be lower case, using an underscore to break up words if necessary: local boxcolor = Color(255,0,0) hook.Add("HUDPaint" , "DrawMyHud" , function() local health = LocalPlayer():Health() draw.RoundedBox(0,10,10,100,10,boxcolor) end) #### 4.2 Commas should join the previous non-whitespace token, with whitespace after it: local boxcolor = Color(255, 0, 0) hook.Add("HUDPaint", "DrawMyHud", function() local health = LocalPlayer():Health() draw.RoundedBox(0, 10, 10, 100, 10, boxcolor) end) 
My own opinion here as I'm asking myself this exact question. I work with an audio platform called Q-Sys from QSC that offers internal scripting for control purposes in the Lua language. It's extremely useful for the work that I do and I make tons and tons of special scripts to perform tasks in theme parks, rides, cruise ships, etc. The platform engine itself runs C based apps on Linux and handles the compilation and execution of all Lua code. It's wonderful when it's in this environment. When I'm writing a script, it's helpful to do syntax checking and quick mockups in apps like Notepad++ and ZeroBrane, but that's where the usefulness of Lua on its own stops. I know C# and Java quite well and could easily develop more powerful tools in those languages that can easily be compiled into EXE's, but I'm most familiar with Lua and can more rapidly prototype ideas with it. Yet I still for the life of me cannot figure out how to get Lua to stand alone and be useful for my needs. I wish there was a more mobile, "pack and go" solution available for Lua because I think it has value as such a lightweight and easy to develop language. 
This isn't a Lua problem. Installing a program won't change how TextEdit behaves. https://stackoverflow.com/questions/23976219/how-do-i-save-a-textedit-mac-file-with-a-custom-extension-sas If you're looking for a fancier graphical text editor, you could try Atom, VSCode, or Sublime. You could also use vim, emacs, or nano to edit files in the console.
I tried saving a file in Sublime Text and it said "Permission Denied" 
I did what the StackOverflow person said, which is to switch to Plain Text. I also changed my directory to Desktop (Where my file is) and it gives this message XXXXX-MBP:Desktop XXXXXXXX$ lua Testylua.lua lua: Testylua.lua:1: unexpected symbol near '&lt;\226&gt;' (The Xs are a replacement for my name) Is this an issue with my computer or the code. I only put a simple Hello World into it.
`'&lt;\226&gt;'` is referring to some non-text character in the file. Probably TextEdit saved the file with formatting in it instead of as just the plain text. I don't have access to a Mac at the moment, but it's worked for me before. Double check you're really saving the file as plaintext. Apparently there's also a "Format &gt; Make Plaintext" which might help fix that file.
I use Lua heavily on a daily basis for my job but it’s all in context of scripting within another program. For standalone stuff I’d probably be more inclined to use other tools (say, Python) but you definitely could use Lua if you wanted. 
Works on Sublime Text, not TextEdit. But that's not bad because Sublime Text looks better. Thank you SO MUCH. I could never get lua installed on this thing! I've tried for so long!
Depends on your use case, I'm afraid. If the Lua runtime you're using is providing everything you need, there is no reason to use anything else. Embedding Lua is done for two reasons: * There is an already existing system which could benefit from scripting support. * Something is required that Lua does not provide, for example hardware interaction, networking, low-level access to the OS and so forth.
You'll almost certainly need to supplement Lua with some 3rd-party libraries; for instance stock Lua can read and write from files but cannot list the contents of a directory without external libraries. Stock Lua also doesn't come with map, reduce, filter, etc in its standard library, so I never code without lume: https://github.com/rxi/lume But as for embedding it inside another program, I don't think that's necessary. I use Lua mostly with Love2D, which is technically embedded inside another program but feels like Lua plus some nice grahpics and input functions as if it were just another 3rd-party library.
Fellow Q-Sys guy here too. I use notepad++ extensively as well. It is easier if you can stick with a language that you know, I try to do as much as I can with Lua just so I don’t forget it.
I tend to write very simple functions like map, reduce etc. on the fly when I need them. The overhead of a library for something like that seems unnecessary. Maybe it's good for ideas, though, or if you think that isn't a problem. Some of the functions I think miss the point of Lua a bit, for example: if you want a set in Lua the way to do this is something like `{[2] = true, [1] = true, [2] = true, ["cat"] = 2, ["cat"] = 2}` which becomes `{[1] = true, [2] = true, ["cat"] = true}`. This leverages the table to do a set with sensible time complexity. If I wanted to get a set from a list I'd just write something like: ``` local set = {} for _, v in ipairs(t) do set[v] = true end ``` Maybe I'd consider writing a function to do this, I wouldn't pull in a library for it, and I wouldn't want a list out of it (but if I did then that's, again, a simple operation away). I'm sure this all might be necessary at some point but I'm concerned a library like this will give people the wrong ideas about how to implement things in Lua. Now as for functionality beyond what the C standard library gave pure Lua, stuff like Lua POSIX, Lua Filesystem are useful for file operations, generally a common C API has a Lua wrapping, and if it doesn't then it's easy to wrap C libraries in Lua. The lacking ecosystem of Lua is a problem sometimes, but it won't burn you as much as some other scripting languages, even languages with much more mature ecosystems.
I think using Lua is practical, try it where you might use Perl or Python and decide for yourself. If you're adding it to your script pile it won't matter a whole bunch if you stick a different language in there. The Lua ecosystem is not as mature as languages like Python. But as an advantage, if you want to wrap a library for Lua it's probably as easy as it is in any other language, if not easier. It's certainly easier than Python. Not all libraries you could want are always wrapped, so if you're working in an area where it would be useful to leverage libraries in scripts that aren't all already in Python then Lua is a strong candidate. For larger scripting projects, Lua is a bit lacking. You probably want some amount of static type checking, which e.g. *Typed Lua* is not ready to provide. Stuff is in the works. Here you probably want to use a different scripting language with a nice, stable typed compiler/extension. As for performance, often LuaJIT is competitive with C and C++, but mostly slower. Quite often it benchmarks faster than projects with more resources like V8, and vanilla Lua is considerably faster than e.g. vanilla Python.
In non-embedded contexts, you're better off using Python most of the time. Python has many more libraries and will give you fewer headaches when installing them. 
I picked up lua just because I could learn an entire language so quickly and this succinctness also goes together with the speed of luajit. But as I don't have CS background and I never actually went beyond that in lua, I still don't understand what embedding really means. Is there a very simple primer on how it works and how can I make use of it as a, say, C++ dev? 
 &gt; But as I don't have CS background and I never actually went beyond that in lua, ... As somebody who does not have a "higher" education but can read (and partly write) pretty much any language (C, Java, C#, VB.NET, Python, Shell, Lua, PHP, JavaScript, Clojure, Rep and some more) I can tell you that that ain't an excuse. &gt; ...I still don't understand what embedding really means. It means that you have an application in a different language (C, Java or some such) and "Strap on" Lua as helper. Mh, an example on that with a pseudo-Java-like language: public class LuaEmbedded { private LuaEngine engine = null; public Constructor() { engine = new LuaEngine(); } public void executeLua(CurrentApplicationState state) { engine.setTable("state", state); engine.executeScript("/some/collection/of/files/script.lua"); } } And with the Lua script looking like this: dofile("some-compilcated-logic.lua") state.counter = state.counter + 1 state:updateStuff(mylogic(state.value, state.value2, state.value3)); A little bit crude around the edges, I'm afraid. Anyway, doing it like this would allow you to deploy the Java application once, and then edit the Lua script on the fly without the need to change, build and deploy the Java application. Also it would allow the users to add logic to the system rather easily, without the need to have access to the Java application source, build and deploy system. One good example is [World of Warcraft](https://worldofwarcraft.com/en-us/), which allows to customize the client-side GUI with Lua. Another one is [Starbound](http://playstarbound.com/), which provides support to modify the game with Lua scripts (for both, client and server environments). As said before, it really depends on what you want to do.
inb4 `load()`
If you just want to trick the decompiler into thinking the version is 5.3, you can edit the file with an hex editor. The fifth byte should be 0x56, change it to 0x51.
QSys also gives us an incredibly easy to setup and go gui environment too so my scripts are actually user friendly. That's such a huge benefit. 
I've done a bit. Yes, it is a small sliver of a sample of available examples. You just need to read code and sort bang through with what you need to do. https://github.com/Laughs-In-Flowers/shiva/tree/master/lib/lua
I think the primary consideration ought to be: who are your users and how do you intend to deploy it? If you're building stuff for you own use, and you can manage dependencies on the machines where you'll deploy great. If you want to build applications others will download and install, there are solutions for this using lua (see sidebar) although I haven't tried them. IMO if you're building stuff for others (either for sale or to share) it's almost always better to provide a single executable and nsis installer for windows.
This text editor (written in Go) https://github.com/zyedidia/micro has a full Lua plugin system, which even allows importing/using (some) Go packages inside the plugins. Probably a decent place to get ideas from.
&gt; I tend to write very simple functions like map, reduce etc. on the fly when I need them. This works, but the problem I tend to see is that if the `map` function doesn't already exist then for smaller problems I'm a lot more likely to just not bother with it and code that particular thing in an imperative way. Maybe a better example is partial function application, where you never *really* need it; there's always a way to do without. Since Lume is only one small file, I just pretend that it's part of Lua and take it with me everywhere. Same with `inspect.lua`, because `table: 0x55ba2e7b4e00` is a ridiculous way to represent a core data structure.
I embedded gopher-lua into a work codebase and was pretty impressed with how easy it was to get working. I ported some code from golang to lua, and it ended up roughly ~40% shorter and more pleasant to read. It ended up not getting merged because I really only did it as a form of therapy to deal with how miserable I was writing golang, but if I still had to work on that codebase I would seriously consider bringing it back.
That solved the version problem, but I'm getting other errors. Thanks anyway.
Yes please
What is this?
Yes 
You may find luastatic useful for compiling Lua to a standalone executable: https://github.com/ers35/luastatic
I'd also like to learn Lua.
Is the idea you have a little programming challenge each of the 100 days?
What is it? A daily lua exercise?
Lua is great. Perhaps even a computercraft minecraft challenge. I'm currently trying to do everything I can in infinity evolved with only Computercraft(which is lua) 
So this is the concept; http://www.100daysofcode.com/
Thanks - see previous comment.
Great!
No, mostly just a streak. See above. 
Look at this link?
Is infinity evolved a minecraft mod?
This is a damn impressive project, too bad the only documentation is the chinese blog post which google does translate, would really love to hear more.
I just started and already a bit stuck, not sure how I could spend an hour per day though.
One article said that the minimum that would make a difference is 30 minutes. I'm new too, but what are you stuck on?
Infinity Evolved is a modpack.
Cool, I didn't check the wiki, a link to the wiki in the README.md would help others find it.
Nice, will check out. Reference to f.lux intended?
&gt;local cond &gt;cond = function(condlist) Why not just "local cond = function(condlist)"? 
The simple answer is that is part of the style guide I was working to. The reasoning behind that, is if you forward declare, it's easier to write tail-call safe recursive code.
It looks like what is happening is the first call to print(file[1]) is working as expected because it's hardcoded to print the value of key 1 in the table. The second call to print(file[i]) is in the loop so it's called twice with i=1 and 2 and I think you're looking at the second loop iteration, in which case apparently file[2] evaluates to a table (or something else). If you call tostring or print on a table (i.e. print({})) you'll get back what looks like an "address" as you described, which is expected. When you're calling assembleTable() what are you passing as the second argument? Also, in general your code is very confusing. Few things: file = {} file = File What is the purpose of these lines and why don't you just change the File parameter in your function declaration to file and get rid of those lines? a = array -- array to store ingredients Again, why...? Don't randomly rename parameters with less descriptive names. This line doesn't serve any real purpose. for j=1,y do a[i][j] = item[j] end Why isn't this in the if statement? x, y, z = 2,6,3 These seem completely arbitrary. Z isn't even used and should x and y be based on the actual size of the tables you're iterating? Finally, why does array even need to be passed into this function instead of creating a blank array, populating it, and returning it? Also, technically Lua doesn't have arrays, they are tables. 
Love it! Nice work. And yes.m, I do end up missing functional techniques whenever I pull up a Lua project. Can’t wait until we can start using this stuff natively in Neovim.
then local function code () code() end is equivalent to local code code = function () code() end
It's fairly easy to do. As one example, my `gi` go-interpreter-in-progress embeds LuaJIT. You could follow the example here https://github.com/go-interpreter/gi 
For the first question, either, depending on syntax. The underlying principle here is that "instance methods" in Lua are keys/values in a table where the value is a function. So you can declare them inline alongside x or y, or add it to the table later. Self is just syntactic sugar for functions declared with colon notation (i.e. it's the same as having a first parameter of self). So scoping wise it would be the inner table.
In your example, inner:foo() would be declared outside of the table like inner = { ... } function inner:foo() self.a -- self is defined in here end 
remindme! 48 hours
I will be messaging you on [**2018-01-09 03:54:09 UTC**](http://www.wolframalpha.com/input/?i=2018-01-09 03:54:09 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/lua/comments/7n7lq8/lua_56/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/lua/comments/7n7lq8/lua_56/]%0A%0ARemindMe! 48 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dsb10gh) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Awesome, thank you!
Here's main.luc: http://www.filedropper.com/main_10 Sorry about the dodgy file upload website! It's from the game Bookworm Adventures 2.
Unless I am crazy, I am 99% sure that they use a custom version of Lua. There isn't much I can do here, sorry.
It's not. &gt; Lua 5.3.4 Copyright (C) 1994-2017 Lua.org, PUC-Rio &gt; &gt; local function code() return code() end &gt; &gt; code() &gt; stdin:1: attempt to call a nil value (global 'code') &gt; stack traceback: &gt; stdin:1: in main chunk &gt; [C]: in ? &gt; Where as pre-declaring it creates the expected infinite loop.
Been wanting to script a Roblox game, so I'd like to learn it as well. How would this work? Edit: I now understand how this would work, but where would I learn it? Edit 2: Also, there should be a 100 days of lua subreddit so people can post their daily progress on there (instead of twitter)
For anyone participating in the 100 days of Lua, you can post your updates to this thread. In your top-level comment, please tell us a little about what you hope to accomplish, and what you'll be working on. Of course, if you have more general Lua questions, please feel free to ask those separately.
Yes.
I never learned by reading, I always learned by doing. I found I learned the most starting with a basic working example then morphing it to do what I wanted. After doing this for a while I was able to create my own stuff from scratch. Surely GMOD has some examples, start with those, for example.
It sounds like your body is just too exhausted to let your brain enter the right learning mode. Sleep, food and exercise are important. Are you sleeping well, and enough hours? See if you can make it 8 hours per day. Are you eating well? Your lunch and dinner should have some vegetable and some protein. If you must have bread or pasta, make it wholegrain. Are you doing any exercise? Something like Convict Conditioning has very low starting friction, can be done in 15 minutes at home and requires almost no equipment. There're free apps for iphone and Android. Exercising releases endorphines, which help learning. If you are too far away from these objectives and it looks like you would never be able to do them, try to improve a little bit each week: This week I will sleep 7 hours per day. Next week I do the same, and have some veggies every dinner. Next one I start convict conditioning. And so on.
Diagnosed and medicated ADD here, also learning Lua. I don't know what GMOD is, but here are my tips; * if you have insurance or can afford it, see a doctor. People make fun of ADD and look down on meds, but if I would have had access to proper healthcare 20 years ago, I probably would not have failed out of college * everything /u/otikik said about sleep and exercise * clean your desk/workspace of everything un-needed * headphones/any jam that blocks out noise is good * sit/stand desk, fidgets help * sugars and refined carbs dont help ME - but that could be me * browser plugins that block extra tabs and/or time wasting websites * if you still have a hard time focusing at home, find another environment ( library perhaps ) where you can remove distractions * take a break to move * lists - on paper or somewhere outside a computer
Only if chunk preloading happens. If you load a file using dofile or loadstring, like in the REPL, then they aren't equivalent. 
Locals are scoped by block, the largest possible block is a chunk (usually a file, or a string when using `loadstring`). At the REPL, pressing `enter` after a valid statement ends the chunk. Therefore, the use of locals at the REPL is very limited. Paste this at the repl: local function code () print"e" return code() end code() 
I had a similar question a while back. I was trying to set up namespaces for related functions. Eg, all getter functions in the `MyClass` class would be accessed with `MyClass.get:foo()`. Not sure if that's what you're trying to do, but here's the SO question I posted for it: https://stackoverflow.com/questions/47192830/lua-oop-how-to-write-class-as-a-table-of-tables-of-functions I posted an answer for my own question, but I came up with a better solution, so I'll need to update it.
Well I now realize this was an awful post I made. But I'll keep it up for no reason at all. (dear mods: feel free to delete this). Maybe I wanna prove that I'm not begging to copy your homework, who knows. Anyways, I have an early version of this library working here : https://github.com/g8tr1522/Phrases There's only one class, `Ins`, and an `Ins` has `Ins.notes` and `Ins.delays`. You can have several tables of 'notes' (or values really) in `Ins.notes`, but they are all associated with the single table of `Ins.delays` which controls the timings of the notes. And I did get the namespace thing to work pretty nicely. * If I have `obj = Ins:new()` * I can set notes and delays like this: `obj.set:notes(1, { ... })` `obj.set:delays{ ... }` * And can call methods like this: `obj.dm:shake()` --`dm` is a 'Delays Method' It's still really cluttered, but that's the 'answer' to my 'question'. 
Also, try this wherever you want in Lua 5.1+ or LuaJIT: (loadstring or load)[[ local function code () print"e" return code() end code() ]]() Lua code is always compiled to bytecode, which is then consumed by the interpreter. Also this code at the repl creates a "code" global &gt; local code &gt; function code() print"3" end &gt; print(_G.code == code) and this creates locals that are immediately discarded &gt; local foo = 5 &gt; local function bar() end &gt; print(foo == nil and bar == nil) -- true, since it reads _G.foo and _G.bar -- the locals have been discarded at this point.
Here's some of my thoughts while I was reading through this. It looks good, but it's hard to understand what's actually provided because it's spread across so many files and there's no reference yet. &gt; A "vanilla lua array" (or VLA) is just a contiguous table of other objects. The Lua manual actually gives this concept a name, a [sequence](https://www.lua.org/manual/5.3/manual.html#3.4.7). Are a lot of the files supposed to be empty? For example, [average.lua](https://github.com/g8tr1522/LuaArrayMethods/blob/master/src/basic_methods/selectors/average.lua)? Perhaps your functions should be more defensive. For example, `sample(list, "foo")` does nothing and returns `nil` rather than throwing some kind of error. As the comment mentions in `compact`, `pairs` [doesn't iterate in order](https://www.lua.org/manual/5.3/manual.html#pdf-next), so that implementation won't always work (even for tables without any "holes"). The simplest implementation I can think of looks like return function(t) -- Get a set of key value pairs sorted by key local kvs = {} for key, value in pairs(t) do table.insert(kvs, {key = key, value = value}) end table.sort(kvs, function(a, b) return a.key &lt; b.key end) -- Extract the values local out = {} for i = 1, #kvs do out[i] = kvs[i].value end return out end Your library-collecting files like `basic_transformers.lua` could be condensed into a single local _root = _mainroot.."src/basic_methods/transformers/" transformers { -- math add = require(_root .. 'add'), mult = require(_root .. 'mult'), -- porting from chance submodule shuffle = require(_root .. 'shuffle'), -- miscellaneous compact = require(_root .. 'compact'), reverse = require(_root .. 'reverse'), notes2midi = require(_root .. 'notes2midi'), } return transformers Although, all of these can be so simple that they don't really need to be in their own files. I think `notes2midi` seems out of place here, though. 
Wow! thanks! I wasn't expecting anything more than brief recommendations. Thanks for the detail! &gt; The Lua manual actually gives this concept a name, a sequence. Didn't know that. I'll have to update my comments and the README sometime. Good to know now, before I make the tutorial. -- &gt; Are a lot of the files supposed to be empty? For example, average.lua? Yes. Those are reminders (to me) for stuff to make in the future. If I come up with a function, I make the file, but I don't write the code until I have a use for it. Maybe not the best habit actually... I'll have to edit my original post to include that I'm aware of this. -- &gt; Perhaps your functions should be more defensive. Yes, definitely. I'm usually very thorough with type checking. I've put off adding it in until the library gets closer to a full release. When I do, there'll be plenty of error messages and coercions, etc. Your improvement to the `compact` function looks fine to me. Thanks for taking the time to come up with the code. -- &gt; Your library-collecting files like `basic_transformers.lua` could be condensed into a single ... That definitely looks a lot nicer than what I've been doing. -- &gt; Although, all of these can be so simple that they don't really need to be in their own files. This is something I've been debating. When I'm making this as I go along, doing '1 function = 1 file' keeps everything tidy and easy to manage. And when I look at the source file in a package like [chance.lua](https://github.com/ejmr/chance.lua/blob/master/chance.lua), I don't like having to scroll through all the text when I need to quickly refer to a function. I don't have much justification for putting it all in one file other than to keep the file structure less cluttered. -- &gt; I think `notes2midi` seems out of place here, though. I agree. Everything is meant to be general purpose, but you have this one music-related function. It's something I use all the time though, so I'm keeping it for now. I'd likely get rid of it if this project becomes more popular.
Anyone can start a new subreddit. However, /r/lua doesn't get that much traffic. I suggest that anyone who has specific questions, post them to /r/lua, and for process updates, post them to this thread. If the traffic becomes too much, we can figure out something else.
string.format uses the same format string as C and many other languages. in C it would be printf. Here is a wikipedia reference: https://en.wikipedia.org/wiki/Printf_format_string as an example if the format string has the charicters %4.2f the matching variable will be printed in 4 spaces with two digits right of the decimal point. 
Could you give an example with real code? 
If v is a variable the line: print(string.format("The value of v is: %5.2f" , v)) will print v with two decimal places You can have as many variables in the output as you want as long as the format string has the same number of % format codes
It's a scripting language, made to be embedded in C code or config files, or even game frameworks like Love2D
It is worth it to invest more time learning Lua, instead of python or JavaScript for example ?
Lua's tiny, and cross platform, so pretty much anything can run it.
I believe you want one of the bignum modules. https://stackoverflow.com/questions/288707/what-is-the-standard-or-best-supported-big-number-arbitrary-precision-librar
Thank you, worked!
Thank you, worked!
I find the power of Lua is it's simplicity. I struggled to understand some programming concepts, but working through Lua really helped me advance in the other languages. I really enjoy it, and one large bonus is that if you want to code, but have it feel like a game: minecraft computercraft. I am doing the computercraft challenge now where I play the whole game with just coding. I have a nice portable sorting system :D
Thanks for the advice :D
Why not both? :)
got it!
heheh
Depends on why you want to learn: are you trying to learn to be a better *programmer*, or are you trying to learn a *language*? If all you care about is being able to put a language on your CV so you can get hired working with it, learn Python or JS; if you want to work with game engines, Lua's a good choice because of its use as an embedded language in engines and other software; but if you actually want to learn something that will make you better as a programmer, learn a Scheme dialect (probably [Racket](https://racket-lang.org/)) and some functional programming. This probably sounds off-topic here, but hear me out. Scheme (a lisp dialect) tends toward functional programming and, combined with the right resources, will teach you about programming, and the things you learn will change how you think about writing programs in *any language*. Everyone always mentions SICP, but there's also *[How to Design Programs](http://www.ccs.neu.edu/home/matthias/HtDP2e/)*, and I've heard good things about *[Realm of Racket](http://realmofracket.com/)* as well. Regardless of what you use, the idea is to learn concepts that you can apply to any language. For example, Lua is, at its core, a lot like Scheme but with an ALGOL-like syntax instead. Where Scheme uses lists as a catch-all complex data type, Lua uses tables; both make heavy use of higher-order functions, though Lua hides much of it behind syntactic sugar; and both provide a minimal set of base functionality, preferring to keep the basic runtime small and requiring the user to implement everything else on top. Javascript is similarly capable of being used as a functional language, and like Lua, makes use of FP concepts but doesn't advertise it, such as the use of callbacks in NodeJS, which is just the use of HOFs with a less-daunting sounding name. TL;DR: Learn Scheme and some functional programming. You likely won't get an immediate return on the investment, but it will help you long-term with other languages and change how you solve problems. To borrow a quote from Alan Perlis, "A language that doesn't affect the way you think about programming is not worth knowing." 
One thing that's really cool about Lua is how configurable it is. It's like the opposite of Ruby's "Convention over configuration". In Lua, if you want to do OOP, you can, or if you want to do functional programming, you can. If you want to patch the entire runtime, you can just change the whole thing in your environment. You're not forced into any particular paradigm with Lua.
Sorry, I don't understand. Started with Computercraft in Minecraft... Or what? If so, you have to buy or already own minecraft to use mods. Download the Twitch installer. It can manage your Minecraft mods. Look up the best packs for ComputerCraft but I advise: Low specs, or online play: Infinity Evolved High specs and offline play: All the Mods 3.
The type system is just hilariously crippled. If I were to imagine a dynamic typing fan who wanted to convince everyone that static types are not worth the trouble, golang's type system is what I would imagine they would build. (I mostly use dynamic languages, but I have worked with good static type systems like Dialyzer and OCaml.) Also coding without a repl feels a lot like going back to punch cards. There's no way to build up a program from the inside out and code live; you have to run the program, let it die, examine its corpse, and work from that. The list could go on and on, but those are the biggest ones for me personally.
It's called a variable. In your script it would work like this: ``` sleep_time = 1000 touchDown(6, 1379.62, 1094.78) usleep(sleep_time) touchUp(6, 1379.62, 1094.78) usleep(sleep_time) touchDown(11, 804.87, 528.31) usleep(sleep_time) touchUp(11, 804.87, 528.31) usleep(sleep_time) touchDown(7, 1398.70, 1630.56) usleep(sleep_time) touchUp(7, 1398.70, 1630.56) usleep(sleep_time) ```
The lack of "batteries included" compared to other equivalent languages makes a bit annoying to use Lua as a standalone language. At the end you stick with Python and you'll be fine.
Yes, then I still have to edit each one usleep () by putting in sleep_time? I wanted to know if there was function or something that wouldn't take editing each one by one. Example I could put something in beginning of the script that would change it to number I want automatically. 
Wow that does exactly what I needed. Thank you much. 
are you using the cli interpreter? it doesn't seem to work with `local` in the global scope. like you can use local variable inside a function or other scope, but you can't just use `local`. This is for the cli interpreter, you code should work like that in an external file though.
`local sleep_time = 1000` :)
I do Lua in my free time and Ruby at work and yes, I can confirm this. They are easy to compare because they are just polar opposites. * Lua is small and fast, ruby is bloated and slow but does a lot out of the box * Ruby forces you to do OOP while in Lua you have to implement your own version of "Objects" on top of tables, but at the same time you decide the level of complexity of your class model. * Ruby has a syntax for everything, with lots of shortcuts that you may or may not want to use. Lua has a very limited and easy to learn syntax while still being very flexible. If you want to invest some time and really learn what makes a language unique, maybe consider learning both ruby *and* lua, that will really gelp you appreciate their respective strengths and it also looks good on any CV.
&gt; I'd likely get rid of it if this project becomes more popular. Nah, just keep it in as an easter egg :)
The most important part you need to understand is that `table:function()` pretty much gets translated to `table.function(self)` when declaring, and `table.function(table)` when calling. For this to work your table needs to be assigned to a variable though, and in your example, the table constructor gets executed first, then the resulting table is assigned to the variable, so you cannot use the variable inside the table constructor. Your two options are: 1. Define the *method* after defining the table: `outer={inner{...}}; outer.inner:foo(blah) blah blah end` 2. Define the function with regular anonymous function syntax in the table: `...inner={ foo = function(self) blah blah end }`
&gt; cannot list the contents of a directory without external libraries What? You can do something like: function ls() local files = io.popen("ls") return files:read("*a") end print(ls())
I think in colors.lua you can make a module local colors = {} *vars* end Then in vars you can just write global variables and they will be declared in your other file when you import with require, you can also declare them like *colors.mycolor = ...* and use them as colors.mycolor in your main file if you want to see fron which module comes the var. Look at modules [here](http://lua-users.org/wiki/ModulesTutorial) for more details.
[removed]
Suck a dick
Jajajajajajajajaja Easy Attaboy
Sometimes the exercise of learning is just painful...period..I started my 100days yesterday, and have spent most of that time; * learning the http and requests modules * installing requests * deciding one linux distro must burn because I can't figure out their environments * installing requests via luarocks on another distro * setting path on distro the 2nd * piffling about with zerobrane studio (mostly because I didn't read the docs before starting) * debugging with print statements * getting angry trying to construct a custom header with an api-key * and finally authenticating with a VPS provider and getting simple info back **RIGHT** Anyway - I am working on authenticating with this VPS so I can send backups back and forth, sync changes to the minecraft server I run, and working on a development box for said server I have at home. I would like to automate many of these functions and have ideas for a web management interface for minecraft server plugins. For rewards I will probably start customizing a desktop running AwesomeWM.
Day 3 - API doesnt allow backups to be downloaded, but thats ok, have five or six handy functions scripted.
[Here's Rust code that does it](https://doc.rust-lang.org/1.0.0/src/core/char.rs.html#228-251)
Day 4 - lacking for ideas or time, I just wrote a bunch of functions that would set up my linux distro from a basic install. I already have alot of this configured to run in ansible, but this might be better. Anyway, good practice with os. and io.
[removed]
Just here to let you know I've got my eye on this project. Keep us updated :) Perhaps you/we could set up a discord, or a subreddit?
This is one of the pitfalls I see with `luacheck`. As far as I know, luacheck only accepts global variable whitelists manually (if you enable it). Fortunately, it's possible to generate a list of global variables without running the program: 1. LuaJIT: compile the code with string.dump and scan for GGET/GSET opcodes 2. BYO parser: run lexical analysis on all variables (it's trivial to find out which variables are global, and which are not)
I think a global variable is better, simply because the OP has no exposure to programming and will get confused by the rules and restrictions of lexical scoping. Global variables are much easier to wrap your head around
Day 5 - forgot to bring my laptop to work, so I read docs and configured ZBS some in a VM I have access too...
So you're actually complaining that go, not a scripting language, is not a scripting language?
I only use luacheck, and I mark global variables in the file directly: -- luacheck: globals foo bar baz This keeps the information isolated to the file at hand.
A little less configuration would be nice. :P I don't think I'll give up on vim just yet, but thanks for the suggestion!
I imagine `lua-support` saves a lot of typing. I've set up ALE rather than syntastic, but I have a feeling they're both using `luacheck` for linting.
I've been using the `.luacheckrc` file in the root of my project to avoid sprinkling those lines throughout my files, but it would be a lot faster than switching back and forth all the time.
Oh, wait. Does this work on a project-wide basis? Including the `-- luacheck: globals` comment in one file wouldn't affect the other files, would it?
the script would still compile. You'll only get errors when you try to call the compiled function. If you want already implemented code, here you go: https://github.com/willox/gmod-global-finder/tree/master/lua/global_finder
https://www.lua.org/pil/contents.html
Not the editor in question, but I find notepad++ to be pretty reasonable for lua.
Nope. the `--luacheck: globals ...` only affects that file.
I learn't Lua using ROBLOX (Don't judge me, please.), doing random projects using ROBLOX's kinda-OOP Lua. Then I started doing bigger projects independent of ROBLOX (Or simplifying, I stopped making ROBLOX games and started to do real programming); I made some really good discovery's by myself and using the native Lua guide on the website. Whenever I have a question, first I go to check something about it in the guide, else I seach on forums for similar questions. Resuming, you should try by yourself: try creating a project you ever wanted to do (In my case, a vanilla Lua neural network without Torch), try things you saw on other programming languages, if it doesn't work ask for help in forums, try to make some jerry-rigs as I made. 
I've always found reading books to learn a language nearly impossible. I recommend that you find a simple, popular application of Lua and work within that system until you feel comfortable enough to move to another system that could be more complex. For example, when I started with Lua, I was building a lot of stuff in Minecraft with Redstone (the game's version of circuitry/logic-gates), so I naturally gravitated to a mod called ComputerCraft (now replaced by OpenComputers, I think), which allows players to operate a computer that has a built-in Lua interpreter and can interface with Redstone. I made an unbelievable amount of progress with programming in general by playing around with a Minecraft mod (going so far as to accidentally discover the basics of OOP). Now, I use Lua to do simple simulations and make simple games with Löve2D.
Lua is a simple, powerful and beautiful programming/scripting language. I would like if people take a look at real things they could do with it, see it as independent. Lua is often used as a embedded support language, although it has so much potential. I wouldn't even think twice to consider using it in it's pure form to make an app. (Although it isn't practical for low-level things, such as hardware interaction and direct memory management). Resuming, use it. Take a different look at it. See it's potential. Reinvent the wheel. If you need help, go to forums, native Lua help guide/tutorial, etc. If you need to extend Lua functionality, use third-party libraries. I use it as a standalone language, even though most people say "stick with python" or "Lua is bad". Don't even hear them, you can do almost what every other language can do and more. “The key benefits unique to Lua are the fact that it is amazingly small, fast, and on a technical level a masterpiece.” “Before you create yet another configuration file or resource format (and yet another parser to accompany it), try Lua.” “If you are ever tempted to put scripting into a program, run don't walk to www.lua.org and use it.”
If you play Minecraft on PC; I learned how by programming the mining turtles in the ComputerCraft mod. Kinda silly but fun to see your program "do" something in the game... 
There's [Learn Lua in 15 minutes](http://tylerneylon.com/a/learn-lua/) which will give you a fast introduction. There is also the [Lua Missions](https://github.com/kikito/lua_missions) if you are into learning-as-you-type kind of person (Disclaimer: I am the author of Lua Missions)
I'd suggest trying out Visual Studio Code. It's fantastic and free.
Yeah it is Sublime. Thank you!
You need to check out https://howl.io/ You can script it in Lua and it's written with Lua. Supposed to be very fast like Sublime.
Put the file inside Lua folder (C:\Program Files (x86)\Lua\5.1\lua) If it doesn't work, use dofile. dofile("&lt;directory_of_the_file&gt;") You'll need to escape the slash by using two of them. (Ex.: C:\\Users\\User\\Pictures\\Screenshots) When I need to import module, I always use dofile. Dofile let's the script continue working if the file doesn't exist. Require, on the other hand, returns an error and stops the script if the file doesn't exist 
Apart from Howl I also recommend Textadept (https://foicica.com/textadept/). They're both great editors and very similar to SublimeText (the way it feels). If you'd rather use an IDE, go for ZeroBrane Studio (https://studio.zerobrane.com/).
I actually figured it out, but thanks Simon :D
It's actually a useful distinction, in spite of anyone's particular langauge envy. https://en.wikipedia.org/wiki/Ousterhout%27s_dichotomy
The current version of ZeroBrane Studio (1.70) added support for 110+ languages and formats (using Scintillua engine, which is also used in Textadept) and can also be used as a general purpose editor, similar to Notepad++.
What exactly do you mean by playing the whole game with just coding? That sounds kind of fun.
Computercraft has "turtles" which are essentially robots. Use these robots for mining, woodcutting, and basically anything you wpuld do in Minecraft. I will add a link to my turtle sorting demo below, but its a little old. I'll have to update it with all the changes I've made. So; My turtles mine WC and farm for me. They drop their loot into an enderchest. Back home I have am Sorty turtle and a crafty turtle. The sorty turtle puts away the items in it's library, and sets aside items not in it's library. My goal will be to make it so that the turtle identifies and logs unknown items as well. For right now, I have a "path" program and an "item detect" program. The item detect program adds the item ID into a save file. You then use the Path program to tell your turtle where to put the item. You use the arrows keys, as well as hotkeys like "e" for enderchest "c" for drop item, "space" for up ect. Then it generates a turtle path file, and asks what item you should associate it with. So my path is named IronOre and it associates with the item id for IronOre. Now when it encounters IronOre it runs the path file that was generated for it. This allows for sorting with little to no coding. I've also written an OS to monitor them and a control room so that the rest of my base os completely run by turtles running around. They can even be programmed for combat. Behind the scenes, I have a crafty turtle that compressed cobblestone redstone ect to make it fit better. It moves the compressed cobblestone up one. Let me know if you would like the link to the server I play on.
I've used Computercraft before but I never thought of making them do all the work like that. Have you ever tried to program them to build structures? (survival or creative). That'd be pretty cool if you could program them to make basic structures.
To be fair, Roblox is one way to actually get into Lua, so you shouldn’t be judged for where you discovered it. Practically, it doesn’t matter where you learned it, but Lua is indeed a great program for starters
Roblox is not "built on" Lua. Lua is a language that is *embedded* into programs. The point of Lua is to allow the code to be dynamically changed/created. Unless you're sharing little apps/visualizations on your social media platform, Lua doesn't really make sense. While you can use just about any language to build just about any software, but for a social media app, there's at least two components: the interface that users see, and the backend server that clients communicate with. Lua isn't really suited for either (mobile phones have SDKs that are only available in a few select languages; Lua is not really meant for building a full webserver, though it's definitely an option for some of the logic in a lot of webservers).
Wrong Lua.
Arguably itch.io is an app with "social" features, and it's written in Moonscript and Lapis. Lapis also supports Lua. I wouldn't say you couldn't do it, but it's much less common than using Ruby or Python. Don't expect a big community or good library selection, but you can check out http://leafo.net/lapis/
For what it's worth, I'm working on a web framework using CSharp.lua, which transpiles C# code to Lua, so you theoretically could use my framework from Lua... I may make it officially supported at a later version, but it will be at first C# only.
Yes, it's possible on the web ([frontend](https://fengari.io) and [frontend](https://openresty.org/en/)) and on [iOS](https://luapower.com/objc). But not Android unfortunately. I used fengari, OpenResty (not Lapis) and the Objective-C / LuaJIT bridge to make [EQE](https://eqe.fm/about), which is basically a system-wide equalizer and Last.FM alternative for jailbroken iOS. The app has a built-in forum which is [entirely written in Lua](https://github.com/rweichler/EQE/tree/master/app/page/forum). It definitely took a lot of R&amp;D on my end, though. The entire stack is basically from the ground-up. If you're just starting out I don't really recommend this, but I figured I should chime in and say "yes, this is possible with Lua!"
You're forgetting Corona, which supports iOS and Android.
luarocks is very beginner friendly that introduces you to more of the lua c side of things. I recommend grabbing a copy of https://github.com/tilkinsc/LuaConsole for development and follow the LuaRocks article in the github wiki. LuaRocks is pretty stern when not using PUC-lua, and this will also give you a chance to work with luajit, which supersedes PUC-Lua
Neat
Ah, yeah. I meant using the native APIs. With fengari you can directly call `document.getElementById()`, and with the Objective-C / LuaJIT bridge you get access to the entire Objective-C runtime, e.g. you can call `[[UIView alloc] init]` and subclass UIViewController and all that good stuff. The closest I've found with native Android is [VOC](https://github.com/pybee/voc) which is only Python unfortunately, there's a good talk about it [here](https://www.youtube.com/watch?v=NqdpK9KjGgQ). But yeah, I guess you could use an abstraction layer. But isn't Corona just for games? Never heard of it being used for a regular app.
Yeah this is what I thought too. `package-manager install lua51 lua52 lua53 luajit` nets the same thing...
Lua + Moonscript helped me a lot with understanding OOP better. Also nice to learn a new way of code reuse with prototypes (Lua calls them `metatables`).
Is it better than LuaCheck? At least for Lua anyways..
What does "accurate" mean here? Does it mean few false positives or few false negatives? 
THanks!
What a *darn* shame.. *** ^^Darn ^^Counter: ^^58235
As I understand it, most of the power of Lua comes from the metatables. You may find that you don't even need a traditional object system once you learn the metatables fully.
Not a big fan of oopcycles, but I wonder if you really need that baseClass variable. Why not call the base class by its name directly, like so? --this one extends class1 function ENT:asd() print("class2 hello") class1.asd(self) -- instead of self.baseClass:asd() end
My globals do not have the classes assigned anywhere. That ENT: you're seeing is due to for k, v in pairs(entDirs) do -- Make a className local className = tostring(v) -- Instantiate the entity's class table ENT = {} -- Set the ent's base class in case its shared file won't ENT.base = "ent_base" -- Register the entity class ents.registerClass(className, ENT) end My ents.registerClass is actually a LuaJ bind. It handles the setting of __index and such. What I omitted from the original codes is also ENT.base = "class_name_goes_here". Another cool thing is that every time a class gets registered, it goes through all existing classes and updates the inheritance. This way, the base class can be registered after the child.
I see... oopcycles from the Ooptolemaic System, by Claudius Ooptolemy, President of the Bureau of Complication of Otherwise Simple Affairs. Just kidding ;-) 
It seems the problem comes from the function `updateAllInheritance()` in the code below the "This is the inheritance fix" comment that copy the function of class2 inside the class3. Thus the class3 *asd* funtion prints "class2 hello" then call the baseclass *asd* function, which is the class2 *asd* function ... As class3 has an *asd* function, its metatable __index is never used to find it. **Side note:** the correct code to call the baseclass *asd* would probably be `self.baseClass.asd(self)`.
Hi, I am the project maintainer. That was true. I did change account names. All of that was fixed when I realized it yesterday or so. I have obtained no constructive criticism about LuaConsole yet, let alone people to fork and suggest improvement or start issues. The project is fairly new and still getting a lot of things set up. The brevity in the lists come from the time I spent on it and the lack of wanting to make it gigantic. While a lot of it is definitely opinionated, it also conveys author intention, yes. They are taken out of context of what I stated in the two bulleted lists before. Setting up a project takes a lot of work, so I can understand your confusion. "Best darn command line help message you ever seen" means I disliked lua's command line message and made it in a format that is easy to read and appealing. "Supports all types of switches" The reason I support -,/ is to have direct and simple compatibility with unix and windows. It does match the operating system convention. "100% new, fresh, maintainable code with proper names" Go look at the source code for lua and luajit and tell me that it isn't bug ridden. Tell me how much of it you skipped over. I test my REPL in and out all different ways to ensure that everything is working properly. I dedicate a lot of time to this and shows in my commit history. "Maintained" Please tell me you don't figure they are actually updating the lua and luajit REPL... "Command line arguments work as expected" Sure I did break convention. I have to admit I didn't take too much time planning parameters. I probably will switch it to -e. However, this point comes from the inability to do `lua -e "print(unpack(arg))" a b c` which I would very much like this to work. This might be more classified as a rant. "Supersedes what LuaJIT derived" LuaJIT derived from PUC-Lua's REPL and this supersedes both with content. Perhaps clarification is due. "Current directory can be set two different ways" and "Working directory support" This project is made for a CLI and you don't even need that. Most operating system rely on such directory support. If you don't have chdir in your standard, then you are using some wonky embedded system. It is easy to disable it if you really want to. However, it is nice to not cd to every other place to use LuaConsole. The two ways are distinct though, the 1st is a command line option, the second is in the external support library called luaadd. "Fixed bugs in print_jit_status" This bug was presented and failed to be fixed properly in luajit master, see [this](https://github.com/tilkinsc/LuaConsole/wiki/LuaJIT-Readme) "Attempts to conform but not enforce standards" I meant this in a way where there is backwards compatibility with what lua and luajit does. You can run your scripts with peace of mind I didn't break anything that there needs to be a hack for. "All preprocessing goes in main instead of lua-functions", yes. Feature, yes. There was no reason for luajit and puc-lua to send off parameters to pmain and execute. It was redundant and slowed it down a bit. I wonder how my code coverage percentage compares with both those REPL CLI. Back when my source matched the length of puc-lua and luajit, I already had many features. They also depend on libraries they don't need - its super lazy and definitely unnecessary and it cascaded a lot of code. "Small file sizes" can arise from the lack of external dependencies and the direct support of not having to use the .a file, which PUC-Lua does. I haven't really looked at luajit's implementation there. My intention for writing this is comparison from the sources and final library though. You have to remember that PUC-Lua and LuaJIT use external libraries. Nothing was sacrificed, although I did strip my binaries properly too. "LuaRocks ready" I didn't break compatibility with LuaRocks, which doesn't conform to a simple fix I asked them to do with using `arg or {...}` I wrote an article that is system dependent showing how to get LuaRocks set up. One of my features is choosing to omit the arg table, which comes in handy for things like wrappers and automaters. This is the -T switch. It is also LuaDist ready and now as of today has an article for that. I was disappointed when LuaRocks failed me when boasting about their compatibility. One of which was the inability to install on windows without a version of puc-lua already, which actually doesn't need to exist for it to work. In fact, I actually patch that with using the \L switch iirc and instruct the user how to edit out the crap. Perhaps I should change 'ready' to something else. "Proper signal support" Ctrl-C never worked properly with PUC-Lua, my REPL exits gracefully and error reports are never skewed. "o disrespect to the author intended, but this doesn't look like a "new, better console" yet" I certainly am trying my best! :) 
What a *darn* shame.. *** ^^Darn ^^Counter: ^^58946
I can't call installation procedure that involves editing files by hand simple, sorry. At least provide a way to choose Lua version or whatever it needs through command-line arguments. Even better, package it for LuaRocks so that simple `luarocks install luaconsole` works. &gt;luajit (which you should be using) Why? LuaJIT isn't a direct upgrade over Lua 5.3. You still haven't addressed in what way your console is "better" or "next-gen" - as ws-ilazki noted, the website only lists a bunch of non-features and questionable rants. I did manage to install it though. At a glance: * Can't navigate current console line with left/right arrow keys or Home/End keys. * Can't navigate console history with up/down arrow keys. * No multiline support, if I want to run a loop or define a function I have to do it on one line. * Doesn't handle non-string errors, shows `(null)` instead. * Doesn't allow interrupting with `^C`, have to kill it if running a long or infinite loop. I expected something that would be an addition to standard Lua REPL such as autocompletion or built-in table pretty printing, but instead LuaConsole fails to implement basic features that standard Lua already has. Alright, let's try running something with it though, let's say luacheck. ``` luaw -r 'package.path = "./src/?.lua;./src/?/init.lua"' bin/luacheck.lua ``` Nothing, just copyright message. Does it even execute files passed as arguments? ``` luaw bin/luacheck.lua ``` This results in an error saying that luacheck modules can't be found, as expected. Why isn't the file executed when `-r` option is used? Let's try `-L` option that is mentioned in the short usage help but not described (`-l` has the opposite problem - not so sure about "Best command line help message you ever seen" now...): ``` luaw -r 'package.path = "./src/?.lua;./src/?/init.lua"' -L bin/luacheck.lua ``` Prints ` (Syntax) | Stack Top: 1 | cannot open : No such file or directory`. I guess something is broken. Loading the main script as a module instead using `-l luacheck.main` does nothing. At this point I'm going to give up. So far the only thing that connects LuaConsole and "next-gen interpreter" is that `luaw -l nextgen` consistently results in a segfault.
Hello, thanks for all this! I noted some issues with the current build. 1. I enforce that -L and -l must have the file following it without whitespace. So that can and will be easily fixed. Yes, it does segfault. I should also start supporting -- and a name version of the argument for parameters. 2. For some reason 'str' doesnt parameterize correctly, swapping '' for "" whilst switching the lua string to '' from "" worked. This is on windows. 3. When executing a file, it must be the first argument 4. The defaults for the -t parameter need changed. Running `luaw -r "package.path = './src/?.lua;./src/?/init.lua'" -ltesting.lua` works as expected. -t changes how the arguments work and who runs before who (-r, -l, file) 5. I am not sure what your problem is with not being able to navigate left and right with arrow keys. It works fine with Windows and my Debian Linux build. Does this problem replicate to other terminals on your system? Interrupting is also working as expected. Non string errors aren't handled yet. I should jump on that. Autocompletion would be a very nice feature and I have indeed speculated on it. Although I had a bit of trouble finding a cross-platform way of doing this and moved on to working on the program. Table pretty would be a great addition for the luaadd portion. This is the first of the rounds of debugging and stress use, so I am very thankful for this.
Hmm it seems like windows strips all `"`'s from the parameter and keeps the `'`'s. This seems to be an operating system dependent thing. So for now you'd have to use "" for the argument and '' for the inner strings. I fixed -l, and non-string errors have been handled properly. Although, I wonder if handling a number return should also be a thing due to the seemless nature. I commented out code that will add that option in source. I also switched -r to -e for convention reasons, -l now works like -llib.dll and -l lib.dll with the -L variant.
Nice work, I really enjoy the site so far!
Have you ever tried [exercism](https://exercism.io)? Not *golf* but kind of pseudo competitive refactoring. Good times
Link does not work for me :-(
/u/wormholer ^
hey, fellow minecraft Lua user! if you haven’t already , check out computer craft and opencomputers:)
Right, my bad, as I usually use the syntax `class1.asd(self)` (as proposed by stetre), I missed that. The fix is actually `class2.baseClass.asd(self)`.
I have that on my list, thanks!
Thanks! Glad you like it. Always open to new hole ideas or just ideas in general, open a GitHub issue or just write a comment.
I layout the program in a (Lua-)table. Thats why i like Lua so much :)
First, I sketch out what the code needs to do. Writing lots of full examples out and then writing runnable tests makes it clear what needs to be done. (Start by writing a specification!) Then I sketch out what the "main" script is going to look like, keeping it short (&lt; 10 lines) by referring to all of the "hard" and "interesting" stuff as functions. Usually this informs and is informed by the kind of format that I want for input and for output. -- RETURNS false | satisfaction local function isSatisfiable(theory, expression) assert(theory) assert(expression) local cnf = toCNF(theory, expression) --&gt; hard thing TODO later local sat = cnfSAT(theory, cnf) --&gt; hard thing TODO later return sat end Then I write the functions out that I know I need and write a comment explaining what they need to do -- RETURNS a CNF description equivalent to (term == target) -- A CNF expression is [][](term, boolean). function toCNF(theory, bigTerm) error "TODO: toCNF" end -- RETURNS a truth assignment of theory terms {[term] =&gt; boolean} that satisfies -- the specified CNF expression. Does NOT ensure that all terms are represented. -- RETURNS false when no satisfaction is possible -- Does NOT modify assignment local function cnfSAT(theory, cnf) error "TODO: cnfSAT" end Then I begin implementing functions; I leave lots of `error "TODOs"` in them for all of the more complicated cases, and come back to them later. Usually there are "easy" cases that you can handle first to let you running your program end-to-end. As I implement them, I might need to make changes to their input/output, but I know what's reasonable because I already know how the caller wants to call it! Ideally I can write tests for the functions as I'm going so that I don't need to wait to have it all filled out to get stuff working. Then you can just keep carving out the remaining cases by finding the easiest-to-hit TODOs. You're done when there are no more TODOs!
Nice! Thank you for the detailed explanation. I kind of fell into something like this as well, but the process you laid out is more detailed and it looks like it would help me not get stuck in the weeds too soon.
Thats a very impressive commit history! Are you able to keep the whole picture of a project in your head and know what you want to work on next?
Plan?
Having a variable closer to where you use it is an optimization in many languages, not just Lua. Even in C, without any extra compiler optimization, having the variable closer means it is more likely to be in a hardware cache. Lua is fine. People like JavaScript. JavaScript objects are hashsets. Lua tables are hashsets. JavaScript implements object orientation using what they call prototypes. Lua implements object orientation using what they call metatables. JavaScript is the most popular programming language in the world. If Lua ran in the browser, it would be a lot more popular. One thing Lua does have over JavaScript is a simple, clean, cross platform implementation. V8 is great and all, but it's not the simplicity of Lua. 
I know that, but in most languages, local random = math.random random() math.random() would make pretty much no difference, there I've seen examples which are 4 times slower without localization... As for C, all languages optimize internally, especially compiled ones.
Wait, so, if it has JIT, me localizing makes no difference? I'm using [LÖVE](https://love2d.org/) and it uses LuaJIT.
First of all: It sounds like you are frustrated. I'm sorry about that, and I hope your mood improves soon. &gt; What's the appeal to this? Having a small core of functionality has many advantages. The whole language takes less memory, to begin with. If you embed Lua on an C executable it will grow by the order of 200KB. This allows using Lua in extremely constrained systems, like hardware controllers. There are less things to know, and less moving parts, than in other languages, so the learning curve is quite small as well. It is implemented in a version of C called C99, which makes it possible to install it in a lot of places as well. When I realized that the multiline comments are multiline strings preceded by a comment sign I found it quite ... aesthetically pleasing. &gt; little details such as localizing globals makes it run faster Everything about that particular problem can be learned spending 1 hour googling. The gist is: Even if in some extreme cases you can get a significant boost (i.e. a triple loop calling the same functions again and again), in most cases it is not noticeable, one way or the other. When you learn more languages, you will find that every all of them (including Python) have details like that - things that you have to invest time learning in order to use the language more effectively. Most languages have *more* details like that than Lua, simply because they are more complex (that is again, another thing to like about Lua). Disclaimer: I am a proffessional Lua programmer. 
sorry, this may be a bit old, i don't mind if you don't answer. How did you learn the syntax to be able to write scripts? I want to make a mod for civ 5 and don't know how
&gt; things like this Things like... what? I don't see where in your post you made an actual complaint. You just keep pointing out how Lua works then asking "why", as if there's something *wrong* with the way Lua works. Apparently you're unaware that everything in Javascript is a hashtable, too. You say "that's first time I hear that in any language" as if that's meaningful, when you're clearly a beginning programmer. There are *a lot* of things that you'll encounter for the "first time" as you learn new languages. &gt; If you have to be a professional programmer to write efficient code in lua, then python being slower does nothing for average person First, if you never used `local` in Lua, it would still be faster than Python, so this argument is nonsensical. Second, optimization details such as `localizing globals makes it run faster` exist in *every language*. Third, you're making a beginner mistake by obsessing over microoptimization to begin with. You want to use local variables in Lua because it's better programming practice to limit scope, and that's a much more important thing to understand for a beginner. This is the same reason you want to use `let` rather than `var` in Javascript, which is one of those "little details" you need to understand when working in any language. &gt; bad design \*rofl\* 
I don't get it; why would you perform an optimization like that in the first place if it didn't give you a measurable speed increase?
Because functions are first-class values, which means you can change them if you want by assigning them in a variable (global, local or in a member of a table aka. a "class"). And standard library functions are by no way different: local original_print = print print = function(...) -- do whatever you want here original_print(...) end The language is very simple by design, but allow to make advance things thanks to table, metatables, proper scoping, etc.
My thought exacly. Op doesn't understand the language nor the implementation he is using (luajit) and is complaining about a problem he apparently hasn't even had. He then goes on to say that Lua has a bad design even though he is clearly still learning it at the moment and (I believe) never got to see its C api in order to understand the beauty and simplicity of it when embedding Lua into a project (like the C++ based game engine that LOVE is) and so "asks" why anyone would ever like lua because it is so poorly designed. eye. roll.
Nobody's making you use it
Sorry for thinking out of the box I guess. I've been reading about lua and stumbled across [this](https://stackoverflow.com/questions/32945039/why-are-localized-functions-faster-in-lua) not sure what's the problem with asking about it. And yes I asked, problem? I understand that your most loved language just got "personally" "attacked", but don't start playing the victim, because it's not best either way.
Love how people point out JS's existence whenever their language gets questioned as if it was personal attack and they had to shove something worse than it to justify it.aw
&gt; Love how people point out JS's existence whenever their language gets questioned Holy shit, you're an idiot. First, you said **"that's first time I hear that in any language"**, so people simply pointed out to you that this is also true of one of the most popular languages on Earth. But Javascript is not the only one that uses hash tables to store object members. This is true of many others, including fucking *Python*, the language you're holding up as some kind of gold standard. You're just ignorant. Second, Lua is not "my language". It's one of two dozen languages I know, and a dozen that I've used professionally. I did my best to explain to you why people like it in my previous post, but apparently you're so butt hurt over having to type `local` that you can't even read. If Lua is a struggle for you, you're basically fucked. Why is everything a table in Lua? Because it's simple and powerful. You've got arrays, skip lists, sets, dictionaries, and more all using one syntax, one abstraction, one set of semantics to learn. You bitch about performance because you're a noob. Does it matter than Python has a separate abstractions for sets and arrays when Lua tables are faster than both? o.O Not that Lua's calls its data structuring abstraction a "table", because while the same syntax is used to create one and use it as a hashtable or an array, internally it's very clever about optimizing numerical indices using an actual C array and reserving the hashtable for when a table is used an associative array. It pushes that optimization detail down into the language implementation and presents a uniform and simpler abstraction to the user. That's a *feature*, a pro, not a con, one of the reasons people like Lua. &gt; Also I am a beginner in programming? Yes? Would you like to argue this point? Because the evidence is in every line of your posts.
&gt; but in most languages, &gt; random = math.random &gt; random() &gt; math.random() &gt; would make pretty much no difference It makes a difference in many dynamic languages (Javascript, Squirrel, Ruby, Python, et al), many of which use hashtables for exactly the same purpose. You can test this yourself in any language just by measuring. In Python for instance: from datetime import datetime class SubSubSub: value = 12345 class SubSub: subsubsub = SubSubSub() class Sub: subsub = SubSub() class Top: sub = Sub() def timeThis(op): iterations = 10000000 start = datetime.now() for x in range(0, iterations): op() elapsed = datetime.now() - start print(elapsed) top = Top() value = top.sub.subsub.subsubsub.value # caching the result of a lookup chain timeThis(lambda: value) timeThis(lambda: top.sub.subsub.subsubsub.value) &gt; it's hurting readability imo Then *don't do it*. It's a [premature optimization](http://wiki.c2.com/?PrematureOptimization), and one that's generally not need in Lua because it's so much faster than other dynamic languages even *without* this kind of micro optimization. 
Because arrays start at 1 lol
More or less, it takes some time to get back into it if I take a break. Most of my 'what's next' is currently being driven by 'what's prelude crashing on now?' besides more strategic changes like rewriting the code to not use globals so that it might be useful for bootstrapping, there ideas get to marinate in subconscious. Current marinating idea is to describe `rt/vm` in terms of micro-ops which I can compile to WebAssembly for the interpreter but which a JIT could inspect in order to optimize the more complicated instructions (in order to hoist stuff like guards)
I use Lua for a few reasons: 1) It's a small and consistent language that is very easy to embed in a larger application to add scripting ability (and way easier to embed than Python). 2) Due to the design, there is no global state (in the C sense of the word---there are no C global variables) to trip you up. All Lua functions (again, at the C level) are re-entrant which again, helps with embedding Lua in an application. 3) It's one of the faster interpreted languages today (certainly faster than Python or Ruby) 4) It does not use sigils (for example, Perl and $foo vs @foo) 5) It does not have significant white space (really Python? Significant whitespace? The only other language I learned that used significant whitespace was Fortran 77) 6) Despite being small, it has several advanced features like coroutines [1] and first class functions (functions can be assigned to variables much like any other value). The speed has never been an issue for me, and I'm using Lua at work to help process telephone calls [2]. Globals being stored in just a table is elegant (I think) and one that makes it easy to "sandbox" to run untrusted Lua code---just hand the code a new "global" space with sensitive functions modified (or not even there). And the reason for globals being the default is a design choice by the creators as the language was designed for non-programmers (who I guess find global variables easier to deal with than lexical scoped variables). [1] a concept from the 60s that is *finally* making it to mainstream languages after 50 years [2] It's processing SIP messages, which is a text based protocol similar to HTTP. Since it involves a lot of text parsing, I also use LPeg (Lua Parsing Expression Grammar). The coroutine support of Lua is great as I can hide the event-driven nature of the program and handle the logic in a more straightforward imperative nature instead of fragments of call backs and state machines. 
Because it's awesome, simple and fast.
you talk too much. you need to read and listen. http://wiki.luajit.org/Numerical-Computing-Performance-Guide
To concur: one of the things you can embed Lua in is nginx. It powers about a quarter of all active websites. Of course, few will go with Lua but they *could*. And, amazingly, sprinkling a little Lua magic dust on your nginx config doesn't hamper the speed.
One main thing you cite having to learn -- the impact of local variables -- is not at all unique to Lua. All Lua makes you learn is to use the keyword `local` where you would otherwise use `var` in JavaScript and ActionScript, a type/class in most other languages, etc. Absolutely nothing out of the way. The fact that "everything is a table" allows a level of metaprogramming that you don't see in higher-level languages. The language can be fundamentally altered in localized cases by altering certain tables -- that's freaking amazing to me. I hear Lisp is supposed to be even better at this -- but it's also orders of magnitude more difficult to learn and use effectively. There's also the matter that Lua is designed to interface directly with C, and there are also projects that make it interface directly with Java. Boom, you can slap Lua on top of virtually any game now (because games, or at least their engines, tend to be written in C++ or Java anymore). Or even better, see LÖVE2d: a fully-fledged game development framework that you can write pure Lua for, while still getting performance near par with compiled languages. **Let's talk about weird optimization in Python.** In (the canonical implementation of) Python 3.x, did you know that `float`s are faster than `int`s? I was going to refresh my memory as to *why* -- my understanding is that the interpreter (C++?) treats `int`s like an object, while using the native `float` type for floats. Then after a quick Google there's like two or three other explanations as well: Different bases/representations for `int` must be determined, Python 3 stores all `int`s as "Bignums", etc. So, isn't it bad design to ever use integers in Python? ¯\\_(ツ)_/¯ To be fair, Lua has more "gotchas" on the subject of integers. Lua only has one "number" type -- `Number`. This caused ridiculous frustration when I tried `os.execute("some_command -"..some_int)`. It was appending a decimal, like `3.0`, which was being interpreted as a string in Bash. Even better, Lua 5.3 finally created two subcategories of `Number`, being "integer" and "float". But it still switches between the two automatically. But don't even get me started on how Java libraries **hate** primitive types and how you're expected to use an *object* for *everything.* `Integer` object instead of just `int`. And not just for the school of thought, but for genuine performance, efficiency, and effectiveness reasons. At least Lua makes objects simple, and effectively primitive as well. If you have any more questions I'd be happy to answer. Lua is likely my favorite language, ever. It's a shame there's not many opportunities to write it, because it's such a joy. Keep this in mind: For all the "dumb" things Lua makes you learn, you will learn them all MUCH faster than you would *ever* learn another language's dumb things. A competent programmer can master Lua in less than a year, I'm fairly convinced.
I have retrieved these for you _ _ *** ^^To ^^prevent ^^any ^^more ^^lost ^^limbs ^^throughout ^^Reddit, ^^correctly ^^escape ^^the ^^arms ^^and ^^shoulders ^^by ^^typing ^^the ^^shrug ^^as ^^`¯\\\_(ツ)_/¯`
Did you read any books on lua? If so, what do you reccomend?
I've heard JS has JIT built-in, which is in pretty much in every browser other than IE6 nowadays, so is it really the same thing? Of course, I don't know much about how things work here, and if LuaJIT completely replaced Lua then I don't know why I'm asking here, I'd have mentioned that thing if that was what I wanted to ask about. And yes, I am using LÖVE, I like games and calculators, not that much, I think I know enough to simply start using it right away as honestly, everything works almost the same as elsewhere, just it's all tables and syntax is different. Java - I almost hate that thing with passion, half of primitives are pretty much never used as objects unless like you mentioned, where you're forced, string is an object always no matter what... As for Lisp, everything is a list, as far as I know, shouldn't that be easy enough to learn to use for someone who likes such granularity? For example if is just 3 lists in a list (3rd one is "else" and isn't optional I think): ; If statement is a list, has a special keyword "if" at the start (if (&gt; a 20) ; condition is another list in this list (print "a is greater than 20") ; if condition matches, this list (print "a is less than 20") ; else this one )
I'll have to check it out then.
Lua is small and straightforward (to me). You can grok and understand the source code, and you can grok and understand the language. The language in turn is simple yet complete (compare with the mess that is JavaScript - and to this day, you can't do more in JS than you can do in Lua, even though JS works similarly, e.g. regarding the Object data type vs tables). There are some libraries, there's a FFI (Luajit), and extensions are equally simple to write, so: I love the language because it is easy to reason about. I'm using it mostly to PoC implementations of algorithms where I want to not use scipy but write and understand every single step myself.
Firstly, Lua is interpreted by default not compiled. Secondly, Yes. [Apache web server](https://docs.trafficserver.apache.org/en/latest/admin-guide/plugins/ts_lua.en.html) / [Nginx.](https://www.nginx.com/resources/wiki/modules/lua/) Here's a [WebGL library for playing Love2D games in-browser.](https://love2d.org/forums/viewtopic.php?t=8487)
Thanks for the resources, the WebGL library appears to be outdated and buggy (?). I'll look into the Apache web server fix, it looks like I'll have to create my own web server and add the TS Lua plugin though :/ was kind of hoping that I would not need to host my own website. Can you explain the differences between an interpreted language and a complied one? I never knew there was a difference, thanks.
This was exactly what I was looking for, thank you!
Eh, I'm really stubborn, ill find a way to get my games online! Thanks for the clarification though. From that definition, it appears to me that an interpreted language is actually *slower* than a compiled language, but I'll still be using Lua just because I'm already so deep in with my projects :P I've been looking on ways to convert my Lua script into C++, and from there using WebGL to incoprate a 3d project I've been working on strictly with Lua, but it sounds so complex and it's way out of my scope. I'll probably just make it a standalone installer instead. I don't really mind if it isn't as fast as it should be, most of my games are less than &lt;10MB anyways. Again, thank you for the detailed post about the differences between interpreted and compiled languages, it's easier for a noob programmer like me to wrap my head around this concept now.
No problem! &gt; From that definition, it appears to me that an interpreted language is actually *slower* than a compiled language [...] Precisely~. Compiled languages usually take a lot of time up-front to do the compiling, but then *running* the program will be faster, virtually always. You're kind of in luck with LuaJIT though because it's one of the fastest implementations of any interpreted language, ever (as far as I know!). It owes a lot to how simple Lua is. I don't know of any other way to go if you want the most performance from a high-level language (I'm sure there's *something* I don't know about, though).
Would this work? LOVE itself is in cpp isn't it?
I've used [Love.js](https://github.com/TannerRogalsky/love.js) on a couple. Seems to work fine.
No. No. No. Don't use this, moonshine is garbage. Use https://fengari.io instead.
Yea, it seems like the bare minimum is supported by the javascript thing. Kind of wondering why there isn't an official one? oh well. ___ Python and Lua can be read from a .txt, .py or .lua, Literally plain-text files (just use your computers default text-editor) and you have it interpreted by the associated program. Like C, C++, C#, lots of languages need to be compiled into machine-code and are executed that way. AFAIK, Love2D doesn't compile, it organises, copies a portable love2D executable and compresses.
lol yeah
Sorry I've taken my time responding; I'm just not really sure what you mean. &gt; I've heard JS has JIT built-in, [...] so is it really the same thing? I had to shop around your other comments to understand what you're getting at. I think you've misinterpreted the meaning of someone else's comment: &gt; JavaScript would have exact same problem, as each . in.a.chain.of.dots is a hash lookup. &gt; It gets around this by integrating a JIT. Have you tried LuaJIT? They said that JavaScript uses JIT compilation to "get around" hash-table lookups. To be more precise, it means it does the lookup once and keeps a reference handy (oversimplifying a little) so that future lookups are faster. And yes, LuaJIT would give you the same benefit. But that's a separate issue from localization. LuaJIT makes an already remarkably fast language *insanely* faster through optimizations, but even the wisest compilers are not necessarily smarter than the programmer, and they're not expected to be. An *extremely simple thing* that you can do which takes *no effort whatsoever* is to declare non-global variables as `local`. I will concede that Lua is weird to make "global" the default, but hey, PHP is miles worse about that (loop counters aren't even local!!). Lua was originally designed to be used by non-programmers (other kinds of engineers IIRC), and thus it was decided that making everything global was more sensible. I'd like to take this moment to point out that you're hearing a lot of references to JavaScript in this thread because there are some fundamental similarities between it and Lua; NOT because we think JavaScript is some kind of litmus test for language design. The interpreted nature for one, and the fact that they're both prototypal object-based languages. Tables in Lua are analogous to objects in JavaScript. (Also some things that *aren't* very unique to both languages like loose typing, first-class functions, etc.) &gt; I think I know enough to simply start using it right away as honestly, everything works almost the same as elsewhere, just it's all tables and syntax is different. You're right to observe that most programming logic is the same between languages. So I don't really understand what the problem is or what you think you're missing. Re-reading your original post, I think you have some general misconceptions about general programming: &gt; Global scope is just a giant table and so it's better to just write even more code to localize everything you'll use, otherwise it will be slow [...]. By "even more code" do you mean the `local` keyword? That's remarkably nitpicky. Lest ye ever delve into all of C's keywords, like `const` and `restrict` and `static`. Again, `local` just takes the place of `var` or a type in nearly every other language (with some obvious exceptions: Python, PHP, Perl, ...). &gt; Uh, just why? That's first time I hear that in any language, localizing everything would make your code run faster, it's not really obvious, [...] Higher-level languages have done a good job of abstracting these concepts from you, then. Local variables are **always** faster than global variables, in any language ever. That might not be "obvious" but it's a principle of software engineering. Again, I can't stress enough, Lua *is anomalous* for making "global" the default, but you need to understand that Python is not fundamentally different; e.g. a variable in a Python function is local to that function, which is faster. If you wanted, you can throw in the `global` keyword, but accessing it would be slower. &gt; [...] although once you realize that global scope is a table, only logical, but, why? It doesn't have as much to do with tables as it does just memory management. Lua globals aren't uniquely slow just because the language considers them a part of a table. You could be completely ignorant to how Lua manages globals and it wouldn't change anything about local variables being faster. &gt; What's the appeal to this? And why did people stick with it? I thought that I'd see why people use lua over say python if they add scripting support to their game, but all I saw now is that I actually would lean even more towards using python there. Even if you never used the `local` keyword, Lua (especially with LuaJIT) performs miles better than Python. It's also *MUCH* smaller than pretty much any other scripting support you can think to implement. It communicates directly with C, which *you* might not care about a whole lot, and that's perfectly fine -- but it's very favorable to "professional programmers", too. All of these things make it much more embeddable, which is exactly what you want when implementing scripting support. There are also plenty of reasons why Python might be more favorable. Despite the hilarious discrepancy between legacy Python 2.7.x, and Python 3.x, the library ecosystem for Python is a LOT healthier. Differences from Lua 5.0 to 5.1 to 5.2 to 5.3 plague an already fragmented ecosystem. Python's data structures are also less ambiguous: Python has tuples, arrays, and dictionaries, while Lua has tables which can be all of these things, but without list comprehensions, slices, etc. Python 3.x is also a truly object-oriented language. Lua is merely object-based. This isn't *necessarily* a bad thing, and I personally prefer "everything is a table", but to each their own. There are probably good reasons why Lua isn't even in the Top 20 of the TIOBE index. That doesn't make it bad. In fact I suspect your attachment to Python might be a little bit of bandwagoning. If you were going to do a lot of text-processing, you'd use Perl. If you wanted to provide a C/C++ game with a simple scripting frontend, Lua would really be the way to go. If you wanted to provide a console for a developer application, you could follow Sublime Text and embed a Python interpreter. If you're doing a lot of server backend programming with lots of database work involved, Ruby's there for you. You can use any one of these languages for every single task I listed. But some are better suited to certain things. And there's also some overlap. You posted this thread asking why people like Lua, and I feel like you've gotten lots of good answers and tried to argue with them because what you *really* wanted to talk about was a few design choices that surprised you. It's incredibly naive to take what little you know about a new language and make assumptions about its utility like that. What I find especially naive is citing performance concerns that aren't really concerns (seriously, you won't notice a difference between globals and locals), and then missing the point entirely when someone reaffirms that they're not concerns (because LuaJIT is optimized enough that you won't notice a difference; that doesn't mean `local` makes no difference, it's just *negligible*).
So, uh, could have just pointed out that the difference between local and global is negligible? Would have been enough. &gt;Again, I can't stress enough, Lua is anomalous for making "global" the default, but you need to understand that Python is not fundamentally different; e.g. a variable in a Python function is local to that function, which is faster. If you wanted, you can throw in the global keyword, but accessing it would be slower. What are you trying to imply here? If I don't add a keyword before variable, does that mean that it's automatically global even a function? If not, then I don't see a point in even mentioning this, because, yeah, duh, that's one thing about a function in general case, it has it's own scope. e.g. -- a is NOT defined anywhere else function f() a = 5 -- so is this global or not? end Also, what attachment to python? I know more languages and I use them depending on what I want to do. It's just that I don't know why'd I bother trying to add fucking Java to some project as "scripting support", I mean, it's possible, but why would I do that? So I just simply mentioned other language that first comes to mind and which actually can be used as scripting language in a project, which is Python. Could have probably said JavaScript, does it even matter? It's like everyone here is biased towards Lua and so they try project it onto others.
See the C API to learn more about a Lua state. Also, it will matter to you only in case you use the C API (e.g. to embed Lua into your application), and only if you're caring about cleaning up at that point anyway (e.g. not the case when you're panicking out of the application anyway). Usually, the exit() of the hosts C library tears down everything anyway. However, there might be some system environments where that isn't so clearly cut - or where there's a whole different concept of processes and threads. There might e.g. some memory be associated with the Lua state in question that you want to be freed.
If I read this correctly, then this is something that has to do with the Lua C API: If you embed Lua in your C application, you have to create a "Lua State" or "Lua Context", which initialized all the global variables and functions, loads basic stuff, ... Then, when you call a Lua script, then all the variables and functions of the script are stored in the Lua state, so that the C app can call back into them. If you call os.exit without the close argument, then it just exits the process, while with the close argument, it uninitializes the state, which closes all open files, closes any open connections, and does general cleanup... If you run your script with just `lua` and don't embed it into C yourself, then that doesn't make a difference (I think). TL;DR: In your case it doesn't matter. If you embed it in C, it changes what is cleaned up before exit
And if you embed it in C, using os.exit() is not all that common anyway - you probably want to hand back control to the hosting application - by using return in the scope you called from C, either explicitly or implicitly (scope just "ends").
Learning about metatables, iterator functions and the concept of upvalues and if you didn't yet anyway, coroutines, is what will bring you a good understanding of what makes Lua special, aside from its small code and brain footprint. Highly recommended. OOP, procedural or functional - chose the style that lets you tackle your problem best. Lua won't really get much in the way of any of them.
Yes, variables are global by default - no matter where they are declared. So 'a' is global in your example, but 'local a' would be local to the scope it was declared in.
Now that's weird. I know that consistency and all and I wouldn't have problems even without knowing that, but I'll know how to prevent dumb bugs that could appear due to this, thanks.
I use LuaJIT because of the sheer performance of the JIT compiler (and interpreter) and the easy accessing of existing C code (and creation of C data types) via FFI. It also only adds a few hundred KB to a program. I'm not one to fixate on the differences between languages, they all diverge from each other in different ways and all have their own list of pluses/minuses.
You're welcome, remember you can run your code through an analyzer (ZeroBrane Studio has this built-in (press Shift+F7)) to catch various things, including use of globals. 
&gt; What are you trying to imply here? If I don't add a keyword before variable, does that mean that it's automatically global even in a function? Correct. function f() a = 5 -- Is global local b = 7 -- Is not end f() print(a) print(b) This code outputs: 5 nil The only case I remember in Lua where a variable is automatically `local` is loop "counter" variables: for n=1, 3 do print(n) end print(n) ... 1 2 3 nil &gt; I know more languages and I use them depending on what I want to do. This is the correct way to go. You don't *have* to learn Lua. I'm glad you decided to check it out and I'm sorry if it's disappointed you. I don't understand why, though. &gt; It's just that I don't know why'd I bother trying to add fucking Java to some project as "scripting support", I mean, it's possible, but why would I do that? I never mentioned Java. At most you might add a Java console interface in a game that's already written in Java. &gt; Also, what attachment to python? [...] I just simply mentioned other language that first comes to mind and which actually can be used as scripting language in a project, which is Python. Could have probably said JavaScript, does it even matter? It matters to the extent that you wanted to discuss ways that Lua is different from other languages, and you provided Python as an example. I say "attachment" because you also made a point that, after learning a bit of Lua, you said you're leaning more towards Python again. That would be perfectly fine except it's come across with an accusatory tone, like Lua is objectively inferior to Python. &gt; It's like everyone here is biased towards Lua and so they try project it onto others. I've spent several paragraphs conceding pros to Python and cons to Lua, also taking multiple opportunities to point out that Python might be a better choice for your purposes. And also pointing out situations where neither language makes as much sense.
&gt;It matters to the extent that you wanted to discuss ways that Lua is different from other languages, and you provided Python as an example. I say "attachment" because you also made a point that, after learning a bit of Lua, you said you're leaning more towards Python again. That would be perfectly fine except it's come across with an accusatory tone, like Lua is objectively inferior to Python. Yeah, for one specific case.
https://github.com/linux-man/randomlua I don't think you spent much time researching this.
`return string.unpack("I4", io.open("/dev/urandom"):read(4))` 
What prevents you from checking for a known member of the first upvalue, or just outright comparing it to _ENV?
You're not right because: 1) _ENV can be stored in any upvalue, not only in 1st one 2) _ENV can be replaced, so the _ENV of function and current _G may differ
I replied on the similar question below https://www.reddit.com/r/lua/comments/7x8o72/whats_wrong_with_lua_upvalues/du6r7ug/
Can you inspect the bytecode struct explicitly? This only works for vanilla Lua, but IIRC the upvalues there are stored in particular order with the root of the chain containing the global table in the first slot.
1.) You only mentioned the first upvalue. You can always iterate through them. 2.) Get the environment? Lua has functions just for this.
If I understand you right, you're telling about strict order of upvalues. And it's not so. Here is an example: local a = 2 -- local b = 3 -- global function foo() return a + b end print(debug.getupvalue(foo, 1)) -- a 2 print(debug.getupvalue(foo, 2)) -- _ENV table: 0x10375e0 So _ENV is second upvalue
as well, i’m a graphic designer, not a developer, and i’m really not persistent or resilient when coding as most of the coders usually are! :D - and i usually get extremely bored when focusing on something... (i’m really a total disaster! :D )
there is a library issue on Gluas, “string.” and “io.” might not work as “math.” also doesn’r
Sorry, I completely forgot to say that I fixed it a while back. If anyone wants to know the fix, let me know, I'll post it. It was in the java method public Varargs onInvoke(Varargs args) for the SuperCallFunction inline class.
1) I never made this claim, I was referring to your example. 2) The same issue exists in 5.1 with `setfenv`. Unless you decide to replace it with your own implementation and cache all of the environments
Computer craft challenge is fun as hell. Only using computers to do everything is more fun then I would have thought.
The neural network itself is programmed for sure using Tensorflow, which in turn has a Python, C++, Java and Go interface. So maybe Lua was used for the UI, but not for the core of Alpha Go. 
Might I suggest using something other than Lua for this, something like autohotkey.
Hacker News discussion: https://news.ycombinator.com/item?id=16384829
It would have been cooler if they'd just used Go to win at Go. 
ok so i would like to code button 10 to act as if i am holding down button 1 and dragging to the right then releasing button 1
Again, this is a Lua subreddit. Not a "anything that *uses Lua* tech support" subreddit. At this point we literally have less information than you since you'd supplied no info about the mouse or it's software (apparently knowing Lua means we're supposed to be familiar with the API your mouse software has for Lua scripting... :/). From what you supplied so far, the answer seems to be: go learn to program, learn how to research and read API documentation, and then try some basic things with your mouse. Then, try to build the click + drag thing you've described.
You need to provide the exact manufacturer/model of the mouse.
If you're using Windows, you could try [MicroMacro](https://solarstrike.net/project/micromacro). Here's a script to do just that. Go into the scripts folder and create a new file, call it movemouse.lua (or whatever you would like), then paste this in: local mouseX, mouseY; local radius; local speedMultiplier; local a; local clockwise; function macro.init() mouseX, mouseY = mouse.getPosition(); a = 0; radius = 40; speedMultiplier = 3.0; clockwise = true; end function macro.main(dt) -- If the right mouse button is still held down, keep moving it in a circle centered around -- the original point if( mouse.isDown(key.VK_RMOUSE) ) then local delta = (dt * speedMultiplier); if( clockwise ) then delta = a + delta; else delta = a - delta; end a = math.fmod(delta, math.pi * 2); local nx = mouseX + math.cos(a) * radius; local ny = mouseY + math.sin(a) * radius; nx = math.floor(nx); ny = math.floor(ny); mouse.setPosition(nx, ny); end end function macro.event(e, ...) -- Check if the right mouse button was just pressed -- If so, record the location we pressed it at if( e == "mousepressed" ) then local vk, toggle = ...; if( vk == key.VK_RMOUSE ) then mouseX, mouseY = mouse.getPosition(); end end end Now open micromacro.exe and run movemouse.lua
The average mouse user doesn't know that Lua is a language that mouses use, they just know that their mouse can be improved by this magical thing called Lua. 
&gt;Csharp.lua Wh...why
I mean, I made a web framework using it since the C# runtime itself is huge (forgot how large, but it's orders of magnitude larger) while the runtime for my web framework is &lt;1mb, including luajit itself.
It won't teach you anything specific to Roblox, but (Learn Lua in 15 minutes)[http://tylerneylon.com/a/learn-lua/] is great.
It was my first language
It's absolute simplicity and versatility makes it a joy to program in (Especially for small programs, it doesn't scale so well to large ones).
I'd add a couple more design flaws: - Lua doesn't enforce a single, nice way to do OOO - (minor) Try/Catch design patterns are clunky, why couldn't Lua have just done something normal like most other languages Otherwise, agree with all the above (although I don't really love Lua, I'm only on those subreddit because I use it extensively in my job).
&gt; Lua doesn't enforce a single, nice way to do OOO I find this to be a feature; I appreciate that I can pull in a library that doesn't force me to use classes like it would in Ruby.
Fennel was posted here last week (it recently got renamed from "fnl") but at the time there was no good documentation. It doesn't need a whole lot by way of docs because the semantics are so close to Lua, but this tutorial helps give a better feel for the language.
&gt; [1] For the record, I find exactly three design flaws in Lua. First two I agree with, especially about globals as default being a mistake. 1-based indexing is something I'm indifferent to: I don't care either way, but I see how it hurts adoption from the narrow-minded that can't stand anything out of their comfort zones. I would, however, add that I think a big flaw in the language is the lack for basic functional tools like `map` and `fold` out-of-the-box. They hacked in a bunch of OOP sugar but still force users to rewrite basic FP staples, despite the language itself being very amenable to functional programming style.
There are several reasons people love Lua, but overall it's the fact that Lua gives you simplicity, freedom and power in one. You can be small, simple, clean and do something really tiny and yet beautiful with it, then slap it into a c/c++ core and you can create the most powerful versatile thing you have imagined with the least possible code you have thought possible. Lua inside is a marvel, a real craft and this shines on the outside. 
People [LÖVE](https://www.love2d.org/) Lua.
Fair enough, I guess it's a matter of opinion. I prefer the Python ethos in this case, that there should be just one obvious/best way to do something.
Lua 5.3 introduced 64-bit integers and Boolean operators. 
i did my first decent project on love2d and fell in love with lua. So thats why for me.
According to [the manual](https://www.lua.org/manual/5.1/manual.html#pdf-io.write), `io.write(foo)` is the same as `io.output():write(foo)`. According to [the manual](https://www.lua.org/manual/5.1/manual.html#pdf-print), `print` uses `tostring` to convert any number of values to strings then writes them and a newline to standard out. [Implementation of print in 5.1](https://www.lua.org/source/5.1/lbaselib.c.html#luaB_print) This writes directly to C's `stdout`, which means it cannot be changed from Lua. It also writes a `"\n"`, which will (typically? guaranteed?) flush standard out. [Implementation of io.write in 5.1](https://www.lua.org/source/5.1/liolib.c.html#io_write) This writes to the environment's "default" output file, which can be changed by calling the `io.output` function. `io.write` does not write a newline and does not flush.
I [Gideros](http://giderosmobile.com/) what you're saying! :)
Section 1: Is that really worth it? It's the first time I'm hearing about table hashing. Does it really has any impact on performance? Section 2: is that really faster than k={}? 
Section 1: In regards to table hashing, when you assign a value the table needs to be rehashed. This is fine with bigger tables, but if you want to create a lot of small tables in a for loop this is where the performance counts. Example: a = {}; a.x = 1; a.y = 2; a.z = 3; This table requires 3 rehashes. By preallocating the number of elements in the table like so a = { true, true, true }; a.x = 1; a.y = 2; a.z = 3; You can avoid the rehashing of the table. So a for loop like this for i = 1, 1000000 do local a = { true, true, true }; a[1] = 1; a [2] = 2; a[3] = 3; end Finishes in 0.7 seconds. While a for loop like this for i = 1, 1000000 do local a = {}; a[1] = 1; a [2] = 2; a[3] = 3; end Finishes in 2.0 seconds.
Gideros has an HTML5 target which uses Emscripten under the hood. They have an online code fiddle section where you can use it, here's a softbody physics thing I ported from Love2d a while back running on it... http://giderosmobile.com/code/tHycEMRig50DMiX7gIiVtOjBLlDuzMdg 
This is very cool. A much more light-weight approach than [hslua](https://github.com/hslua/hslua), which bundles the full GHC RTS into each module. On the other hand, hslua makes it simple to use Haskell packages with lua. 
I'm afraid you need to merge the Lua script + it's modules by hand, and then `luac` the merged script instead. 
I don't think Section 4 Figure 2 really does much at all. Having a function as a lambda versus having it defined in a local variable outside loop makes no difference because the Lua compiler only creates the function closure once in the bytecode either way. Correct me if I'm wrong though
`require()` will call the functions in `packets.searchers` (or `package.loaders` for Lua 5.1) which do the actual job of loading modules from the disk. You can add a function to this array to instead search through the loaded code first before calling the other routines.
Maybe [LuaStatic](https://github.com/ers35/luastatic/) would help
It will create the function every time. I think it has something to do with the way lua assigns values and handles scopes. Once the for loop goes to it's next value, the function becomes out of scope and has to be created again and pushed on the stack. Example: function make_function(value) return function() return value + value end end for i = 1, 100 do local myFunc = make_function(i) print(myFunc()) end
No I mean like what would be the optimized version in terms of storing function in a local variable, or "placing a function outside the loop"
Example: local method = function(value) return value + value end for i = 1, 100000 do print(method(i)) end
Here's how to use luastatic for this: # Without using luac. luastatic main.lua modules/module_a.lua modules/module_b.lua /usr/lib/x86_64-linux-gnu/liblua5.3.a -I/usr/include/lua5.3 # Using luac. luac5.3 -o main.luac main.lua luac5.3 -o modules/module_a.luac modules/module_a.lua luac5.3 -o modules/module_b.luac modules/module_b.lua luastatic main.luac modules/module_a.luac modules/module_b.luac /usr/lib/x86_64-linux-gnu/liblua5.3.a -I/usr/include/lua5.3 
Throw some [Tup](http://gittup.org/tup/) in there and you've got a party
I can imagine a scenario where each module defines a function with the same name, and the last one encountered overwriting the previous function in global scope. Then a scheme like you're proposing succeeding, with the wrong function in the global scope. Ie breaking the semantics of require. Does that make sense? If I control the code I can ensure this doesn't happen, but arbitrary user code could be anything, for example.
Ideally, I start with a short comment describing what the project is going to do; e.g. `-- cat prints contents of all files it gets on command line`. See also ["readme-driven development"](http://tom.preston-werner.com/2010/08/23/readme-driven-development.html), but in a lazier (and faster) kind of way. This helps me force myself to verbalize a bit some foggy idea I have floating in my mind. But sometimes I'm too lazy and go straight to the next step. In the beginning, I always write a high level list of TODOs, sometimes a bit resembling pseudocode, but very informal, no strict formatting etc (I just invented the `-` bullet notation now for this particular case): -- TODO: read a list of files from command line -- TODO: for each of those files: -- TODO: - loop over the file reading it in blocks -- TODO: - for each of the blocks, print it on stdout Then I either move the TODOs into a `local function main() ..... end`, or keep them at top of the file. If I kept them at top of the file, I copy them one by one into the `main` function, and start implementing them. Then I remove the `TODO` from the comment and leave it in `main`, also removing the comment from top of file. In Lua, I generally structure the script file in blocks like below (I'm on the fence regarding camelCase vs. snake_case in Lua), starting from most generic, possibly pure, basic building blocks, through very generic but less pure (or still generic but more complex), through more and more concrete and project-specific ones, up to `main`: -- generic utils local function DEBUG(...) ... end ... local function readFile(path) local f = assert(io.open(path)) local data = f:read '*a' f:close() return data end -- project-specific functions local function reticulateSplines(...) ... end -- main local function main() ... end main()
I'd suggest reading the Lua scripting reference that should ship with your software. I only found [this one (PDF DOWNLOAD)](http://www.wolfpack.pe.kr/attachment/1180489860.pdf) online, which seems to be pretty old. `arg` is a potential argument passed from the `onEvent` function and is based on the `event`. In your case it checks if the mouse button pressed is button 4, which according to the reference is the X1 Mouse button: Button Value | Location ---|--- 1| LMB 2| MMB 3| RMB 4| X1 Mouse Button 5| X2 Mouse Button 
Is it game development that got you into Lua?
Also, just for the record, it's not *because* it's a lambda, it's because of variable scoping. The example above could be written as: function make_function(value) return function() return value + value end end for i = 1, 100 do local function myFunc(value) return value + value end print(myFunc(i)) end
Online playground and demo at https://www.spaceflint.com/loulabelle/playground/ Please let me know what you think :-)
Was expecting console to print results like lua's repl when doing something like 'return 3+2' or '=3+2' Would be nice to be able to see JS result The homepage could use a lot of work. I thought it was blogspam at first
what is wrong with using make?
Lol, what are you talking about? Most def a C programmer. What is wrong with how I used gcc? "I googled how to compile" referred specifically to how to compile lua since you need the llua flags.
Nothing at all, but when I do I will end up with the same error.
Is this a build problem? I don't see any error.
Well, I didn't just copy it blindly. I did type lua to find the directory. In fact, -I/usr/local/bin/lua is for mac and -I/usr/bin/lua is for linux, of course speaking only generally.
Why would header files like lua.h live inside a /bin directory that's meant for executables? Try /usr/local/include instead? 
One written in Lua.
Oh! right... try lua.hpp.... You are new to C++ then?
Dunno buddy.
&gt; find a header file, which is like... first few weeks C programming. I wish. I've taken two courses in C and we just started talking about non-standard headers in my third course. &gt;Perhaps you learned in an IDE? Nah I mostly use vim, sometimes sublime text. Anyway, it's all good. To the issue: I found the header file. But now gcc doesn't know what --llua is. I googled around trying to find out how to add a library for gcc but nothing came up. Any idea on that?
Thanks for the attempt
&gt; Nah I mostly use vim, sometimes sublime text. Good man. :) Vim is the shit. &gt; I found the header file. But now gcc doesn't know what --llua is. Well, it knows what it is -- it's a library file; you tell it that with the command line `-l`, which says to link to a library named `lua` -- the problem is that it can't find that library. Which is probably because you haven't built the source. Did you try running `make` in the source directory? 
&gt;Well, that doesn't make you a "C programmer" You specifically implied I've never written a C program, that's the only distinction I was making. Sure, I can say I'm not any language programmer, if you're talking industry-level. In the grade scheme of things I don't really know anything. I did run make, but seeing that the headers didn't go to the right place, I'm not sure if I did it properly.
&gt; You specifically implied I've never written a C program Yes, because that's that I thought. Dude, this is *totally understandable*. You don't know what header files are, how to build a C programmer, that `-l` or `-I` mean, etc. After you've been programming C for a few years, come back and read your post and you'll understand what I'm talking about it. It wasn't arrogance, it was a misunderstanding based on evidence. What's arrogant is to get pissed off about having this gap in your knowledge called out. &gt; but seeing that the headers didn't go to the right place `make` doesn't create/move headers. The headers are part of the source, all there in the `src` directory. &gt; I'm not sure if I did it properly. If you did it correctly there should be a bunch of `.o` files, and two executable binary files named `lua` and `luac` somewhere in the Lua source directory true (I'm not exactly sure where it puts the output binaries; not at a Linux machine). &gt; My src contains a lot of things, and one is named lua, but according to permissions that's an executable. There ya go. You should be able to type `./lua` and it will run the Lua interpreter. That is an example of a C program that embeds Lua. `liblua.a` *I think* is the Lua library file you're looking for. 
&gt; You don't know what header files are, how to build a C programmer, But I do. I just don't know what &gt;-l or -I mean, etc. &gt;rather than at your CS program for teaching you a language without teaching you how to actually build programs using it. I am pissed at my CS program, daily. But to be fair we learned how to build programs. Only at the most basic level, though. Along the lines of all: main.o permarray.o gcc main.o permarray.o -o permute_array main.o: main.c gcc -c main.c permarray.o: permarray.c gcc -c permarray.c test: ./test_permute_array.sh clean: rm permarray.o main.o &gt;make doesn't create/move headers. Not nitpicking but just so I know, couldn't make technically move headers? A la "clean" directive above? It's could do something like mv *.h /usr/bin/local. Not absurd to imagine. Also yes a Lua interpreter was running before trying to integrate with C. I'm not sure how brew install fixed the issue, but it put everything in the right spot so that gcc embedtest.c -llua works on its own.
I wasn't pissed at the assumption, only that you didn't answer the question. I mean, if I didn't know how to use C why would I even ask this question? And I guess that's where your response was coming from. It's understandable based on my "googled how to compile" statement, but not the "really really basic" -l -I thing since no one in my entire university including graduate students know what that is. (Yes, it is a very very shitty program.) &gt;as if makes files typically move header files. I'm aware they don't do that in typical usage -- but I don't know the typical behavior for a scripting language's makefile. I was thinking that it could possibly have some behavior that would make the thing actually work. Thanks for trying to help in any case.
I didn't install it correctly, at least. I just downloaded the source, then make'd it, then hoped something would happen. I brew installed afterwards to be done with the bullshit and it works fine now.
&gt; if I didn't know how to use C why would I even ask this question? I assumed it was an X Y problem, which I said and explained in my post. &gt; but not the "really really basic" -l -I thing since no one in my entire university including graduate students know what that is Dude, `-I` *is* really, really basic. &gt; it is a very very shitty program Right, so it shouldn't surprise you that some "really, really basic" things have been omitted from your curriculum. 
First, install lua. Then, use -I/usr/local/include (unless you specified an INSTALL_TOP path different than the default /usr/local when installing lua, see the lua Makefile at the top).
Look in your /usr/local/lib and see if there is a `lua` or `liblua` file. If there isn't, where did your put your Lua distribution? Are you trying to compile Lua from source? Also, `-I` is for header paths, and `-L` is for lib paths. In C, headers and libs are separate, because Reasons™.
That's impressive, keep it up. I don't really have the time to dig in now, I have a suggestion for implementing full-fledged gotos... See you in the issues.
If you heard that "working in the default REPL was more or less a crapshoot", you probably also heard the reasons why, and that is the answer to your question. If you heard no reasons, then maybe what you heard was not worth taking into consideration.
&gt; Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. Antoine de Saint-Exupery I think Lua does really good job in limiting number of basic concepts.
Thanks! :-) I replied on the issue you opened.
By calling the function. if (function() return false end)() then print "true" else print "false" end At the moment, you're just seeing if your function exists and is non-nil.
This is nice library, I notice that some of the tests are failing here in Lua 5.1.5. Is this something you see too?
The default repl *is* crap, but https://github.com/hoelzro/lua-repl is decent enough. What does yours do that this one doesn't?
Strange, all tests are passing on Ubuntu but not Windows 10 via the REPL, command line or ZBS. For info, the following tests are failing: - convertToIndexed - flatten (all three) - keys - mode ('foo' test) - resort - JSON (2nd test) - toString (2nd test) - unique (3rd test) I'll investigate later on a bit.
Awesome :D
To piggyback on this, your existing code is (somewhat amazingly, I've never tried that before) valid Lua. It's creating a lambda (unnamed/not assigned to a variable) function on the fly, as the argument to an if statement, which always evaluates to true since it's not false or nil. What you're probably looking for is: function myFunc() return false end if myFunc() then print("true") else print("false") --will print 'false' end 
You can use an IIFE (immediately invoked function expression): if (function() return false end)() then print("true") else print("false") end
k
So the %l at the front of your pattern will only match lowercase letters, so "BYTE" isn't captured because it doesn't begin with a lowercase character. Also you're not manipulating the second capture, b, at all. Something like: str = str:gsub("(%a)(%a+)", function(a, b) return string.upper(a) .. string.lower(b) end) Might be more what you want. Also, this casing is often called "Title Case", which might help your searching.
That worked perfectly. THANKS SO MUCH! :D btw, can you tell me what the %a and the %l and stuff is about? I really want to understand what's happening behind the scenes but I can't find a good place that talks about these %w and %l things clearly. Also, I'm not sure how the line knows to split and concatenate the string. I'm guessing that "a" and "b" are the variables with a being the first letter and b being every single one after, but how does it know to split the string from there?
Of course. Those are part of lua patterns, which you can read more about here: https://www.lua.org/pil/20.2.html The reason it knows to split the string is because we have 2 different "captures" in the the pattern (anything in parentheses are captures). Since the first %a is in parens, it captures the first alphabetical character, and the second part captures all following alphabetical characters separately (because of the + sign). Gsub then passes each capture separately to the function we gave it to do its replacements.
btw, since I'm still having trouble (on a different file mind you), can I ask how to best use a for loop to check through an array/table of values? Basically I have this collection of specific strings in a table and I want to use a for loop to "check" through every value in the table until I find one that matches the argument I put in. So for example, the argument is "Electric" and I want the for loop to find a value that matches with "Electric" and then return that value. The big problem is I don't know how to specify the "end" of a table. With C#, it was something like 'array.length' but I have no idea what it is here.
Cool. Not Lua though. Poke the general programming or c related subreddits.
I'm guessing it stores the indices as a string, maybe
In Lua you can use almost any value as a key, a string, number, doesn't matter if it's floating point or not. I'm fairly certain if you did a. for key, value loop with a table that had floating point indices the key would still come back as a floating point number, not a string.
http://floating-point-gui.de/errors/comparison/ TL;DR: Don't compare floating point numbers naively and expect sane results;
? I know, that's why I said &gt;Anyways, I also thought that I would have to round them to a given precision as to avoid floating point errors, but it seems that in that regard something is happening behind the scenes as well.
In Lua 5.1, `tostring(x)` on a number `x` [effectively](https://www.lua.org/source/5.1/luaconf.h.html#LUA_NUMBER_FMT) does `string.format("%.14g", x)`. Thus, if the number is `1.0...` to within 14 decimal places, Lua will just represent that as `1`. If you ask for just a bit more precision, you will not get `1`: print(string.format("%.16g", 4.1 - 3.1)) --&gt; 0.9999999999999996 
What do the square brackets do in your code? Does that convert it to a symbol?
Nah it's just a convention I use to separate keys from values. Doesn't serve any functional purpose.
I've always just used something like : t = { name = "Bob", age = 35 } Is that incorrect? You don't get an error or anything.
The `name = xxx` syntax in table literals is sugar for the equivalent `["name"] = xxx`. For explicit keys that aren't symbol-like-strings (eg. numbers, or a string with a space in it) the expression needs to be wrapped in brackets.
Thanks for explaining.
Hey, sorry for the late response, it's been a busy few days. My project admittedly does many of the same things that this project does, but there are a few important distinctions and a few extra features planned: * Speed: hslua-repl is written in a native language (Haskell), so it'll be less sluggish than lua-repl. * Default pretty printing: hslua-repl comes preloaded with pretty printing of objects, functions, and most other types (excluding userdata). * Line history and tab completion: hslua-repl works with readline to provide line history by default and tab completion for both globals in `_G` and files. * File loading/reloading: hslua-repl keeps track of what files you load through the `:load` command, and allows you to reload them on-the-fly through the `:reload` command. * LuaPrelude: a default environment compiled into and loaded by hslua-repl, containing functions to drive the REPL, hooks into the REPL itself (planned), and optional helper functions. Planned features: * LuaRocks interaction: live loading packages from the LuaRocks repositories.
Embedding isn't a feature planned for this project, because I feel that that is a niche filled well enough by [lua-repl](https://github.com/hoelzro/lua-repl/). Over the network support is a planned feature. `hslua-repl` provides a [`LuaPrelude`](https://github.com/Aearnus/hslua-repl/blob/master/src/LuaPrelude.hs) environment that will (very soon) include hooks into various parts of the REPL process.
You could have your config file return a function: return function() HELLO = "hello" GOODBYE = "goodbye" GREETING = "how are you?" LOVE = "I love you." end And then set the env of that function before calling it. Alternatively, you can fork https://github.com/pygy/require.lua and create a `requireIn` function that takes an `env` as second parameter. I don't think you can achieve what you're trying to do without extra code.
Sorry to "bump" this but I can't get this to work on my G502. Any Ideas??
with a few plugins you could do that stuff with vim
R u serious? The guy just want to mess with some files, not to be a software developer... vim? Only for that? hahahaha
Listen dude... notepad++ will be more than ok for what you need to do... If you are on linux, notepadqq, or geany, or atom (atom being the most complex on in this small list). 
you could try zerobrane studio.
Sublime Text with the LuaExtended package is awesome.
A slight modification to your second approach will allow you to continue to use require(): function env_require(path, db) setmetatable(db, {__index=_G}) setfenv(0, db) require(path) setfenv(0, getmetatable(db).__index) setmetatable(db, nil) end local database = {} env_require('t1', database) print(database.x) print(x) 
Visual Studio code 
vs code and zerobrane studio. game engines are defold,love2d ,corona
I use vim to just mess around with some files. Hard to break the habit
Once you get started with Him you can't stop.
It's all specific to the app, you'd have to look up its docs. There's no built-in touch support or something in Lua, it was added by the developer of Touch or whatever you use. I found this site: https://sites.google.com/site/hawwashsoft/touch-lua/api but it isnt describing any functions to actually interact with the screen like touchDown et cetera. So kinda judging this app isn't really that great since clear docs are absolutely required to no have a miserable time with that kind of thing. BTW. It's Lua :)
Looks great... but I clicked on the download link and it went to a 404. 
here's the [github repo](https://github.com/dividuum/infon) and it's also on apt if you have apt. maybe it's on other package managers, I don't know.
Visual Studio Code. 
I like Notepad++ or SciTE. 
You need to make a request and then deal with the data you receive however you like.
I actually wondering is there totally working gotodef and ibtellisense for lua. For what I witnessed there is no intellisense for required modules
oops -- should rename the `next` function cuz it's a default Lua global -- thinking to go with `cont` (for 'continue')
&gt; But the problem is that the path it uses depends on my present working directory when I run or build the program, and I hate that. It has to be a relative path. You can pass a relative path to `loadfile`: ```lua local f = assert(loadfile("./conf/myconfig.lua")) setfenv(f, db) f() ```
I'm not looking for game engines, as i mentioned, "Theres an open source c++ game that embeds lua im interested in doing some things for". I'll look into VSCode, I tried zerobrane before coming here but i didnt find the funcionality Im looking for (As described in the main post) in it. Would you recommend any plugins/addons/extensions or w/e they're called in particular?
Do either of those actually have support for manually making a "project" or something and manually adding files for it to load as global to then use for a functional gotodef or intellisense without using require? Thanks for the help, I'll look into these (Any particular setup for N++?)
Thanks for an honest answer. As i mentioned, I'm not looking for it to automatically detect required modules, since the game engine is loading files as global state/context and the actual files used to do game stuff dont manually require anything (So I'm looking for something that lets me do something like make a "project" and manually add files/folders to it so i can use gotodef to everything in it)
Would you recommend any in particular? (More specifically, would any let me do what i asked for?) Thanks!
But, can I do what i specifically asked for with it? Thanks.
I tried it but I didnt find any way to do specifically what I need, not in documentation/FAQs and not after 30/40 minutes of looking around in it (Which is why i came here to ask).
Then go for it... For someone who never used it before though... It is a immense turnoff
I've got a win32/win64/linuxMint triple boot, OS isn't an issue. Any particular setup that's needed to do what I asked in n++ or the other 3 or is it natively supported? Thanks!
AFAIK it doesn't do right click -&gt; view source. It has autocompletion and an "Open Folder" feature (though I've never really used it).
Just an OEM install will work out fine for that (not for atom... atom require lua extension to give you syntax highlighting
Atom would be awesome for that... simples yet powerful as hell...
I was actually mostly looking for an easy to use editor to make some kind of guide for the games community on how to set it up. Since the lua content for the game has a LOT of global state (Which isnt even required, it's loaded by c++), most people get lost while trying to do or understand stuff so i figured there had to be a tool to make that a non-isssue. Even as a developer for the c++ part of the game it pains me whenever i have to deal with lua (I've been using notepad++ so far without any addons/plugins) 
sorry, my english skill is not fine enough. - on vs code, it may be useful function "task setting of vs .workspace". (ref . https://code.visualstudio.com/docs/editor/tasks ) I used this function as "execute/run in luajit.exe". and I used vscode extention "keyring.Lua" and "trixx.vscode-lua". there may be more useful extension that i did not know. ..? also i like zerobrane studio too. that was made with using "wxlua".
It doesn't do auto-complete for classes in your modules automatically, but it does have go to definition in the current file (Right click and Select Go To Definition or Ctrl+Alt+Click) and fuzzy search for symbols in all files in the project (Ctrl-B and start typing your function/method or its parameters). You can still add descriptions for your Lua classes and it will become available in auto-complete and tooltips, which many users have done for their Lua wrappers around C/C++ toolkits (https://studio.zerobrane.com/doc-api-auto-complete).
What i was looking for was a go to definition of stuff defined in other files in the current project
Right; that's exactly what you get with Ctrl-B: move the cursor to the function used that you want to jump to, press Ctrl-B and the command bar is going to be pre-populated with the identifier with the definition location highlighted and press Enter.
Nice job!
Well. Why? The suspense is killing me. 
Thank you!
Why they say it is a crapshoot? I don't know, I think it's fine.
Because it lacks a lot of features common to other REPLs that make working with them and your software a great way to debug and test ideas. The Lua REPL is bare minimum, just like the language and that’s fine, but other REPLs will try to fill the void. 
And that's fine too, if one really needs additional features. Being bare minimum is however a nice feature in itself.
A few things about the function: if `inherit` was implemented in a common `Base` prototype then it’s overridable in the same way. And about the not { ... } stuff — just feels easier to teach to a newcomer + I actually plan to make visual tools that always show object state so could feel more “reified.” And yea in terms of table lookups — one could explicitly `local ` in tight loops after profiling, will just have to see how it goes. MoonScript is nice but I like the idea of syntax / keyword minimalism, the hope is to create an env to teach programming in. Some ideas here: http://www.selflanguage.org/_static/published/self-power.pdf 
It's ok I found my own solution. Ulua.io is exactly what I was looking for, a distribution of Luajit with precompiled LuaRocks and an easy to use package manager. I just just downloaded, extracted and put it on my path and it was done. Now I can install rocks and write Luascripts no problem. I'd encourage everyone to take a look at it.
Also watch: https://youtu.be/K1UwgW2-qjs Podball v2.8 - Strunz v3.0 (2018) vs. Powerplay v1.1 (2014) - complete match. Top teams!
As a completely new lua user, what kind of scripts do you write? Do you use it in your job?
Btw ZeroBrane has LuaJIT interpreter built in (its simply named Lua on the list there). You can also use LuaDist for packages right in its console. 
Thanks I didn't know that you could luadist from zerobranes console. I'll give it a try. Do you know if it pulls the latest version of a package? 
Did you name things correctly? It looks like it's looking for a file called kek13.lua
https://imgur.com/ROeVi2V They are in the same file directory though..
According to the screenshot, your kek13.lua is in the directory C:\Users\personal\Documents\Lua\ - This path is NOT searched when using "require" so Lua cannot find the file. It does not matter that the files are in the same directory. See the documentation for package.path: http://lua-users.org/wiki/PackagePath
You are running your script from `C:\Users\personal\Documents\Lua\`, but the project directory is set to `C:\Program Files\ZeroBrane Studio\myprograms`. Set it to the same folder where your script is located (go to Project | Project Directory) and I expect it to work after that.
Thanks, this worked.
So you're saying I don't need to learn the ins and outs of the monster that is JS to make simple scripts for a simple web page? Sign me up!
`continue` can actually be easily implemented using `repeat until true`. I'd post an example but I'm on my phone and lazy
I'll give an upvote since I thought it was legit for a few seconds :P
I know that
Lua already has nested comments, using --[[, --[=[, --[==[ etc...
Oh, I forgot about that.
The function that I need help with is listed between the comments " --this function needs help "
Me too... Although now that I think about it that's the mother of all ways to break backwards compatibility. Maybe build some automated migration scripts and try to adjust the index of tables everywhere? Fun fun... And what if I (for whatever terrible) reason *already* use arrays with keys of int 0? That is, although not advisable, completely possible. Should we just make those -1? Fuck whoever has to maintain that code :) This is gonna be super fun.
Which is why no one in their right mind would make such a huge change to such a widely used language. Though to be fair, it does sound like a fun challenge to create a migration script like that.
I'm not entirely sure it's even theoretically possible given that Lua keys are not inherently ints, they're just... anything. So depending on how the keys are *added* to the table they may now start at 0. Or not, they could just be int's from some external source (indexs of responses in a API call to something, for instance) so those shouldn't be shifted down by one.
no
hastebin.com please 
A simple way to do this without interfacing the two would be communicating through a file. Write a line to it, then Lua can read it and process each line when it needs to or do nothing if it's empty. Clear it after processing what's inside. Of course this assumes you won't be trying to do read/write simultaneously but it is very simple. 
That's actually what I did today. But without clearing the file. For some reason file:read() does not block but return nil, if there is nothing new. So it seems to be working now without clearing. Am I maybe missing something here? Would it still be better to clear the file? Thanks for helping!
Here is the link. https://hastebin.com/xifuxopeta.http
Thanks for checking out lapis. It's been a while since the last release, but the framework is still actively being used across many services. One of the biggest changes with this release is significantly improved support for cqueues &amp; lua-http. This means you can try out Lapis, including support for asynchronous IO, without having to install anything outside of what you can get in LuaRocks. I'm now running a production server with cqueues &amp; lua-http and I'm looking for other people to try it out so I can improve the implementation. A lot of the docs still reference OpenResty directly but I hope to update that for the next release.
In your function `Float:new`, you set `self.int = i` (and similarly set `self.decimal). Here, `self` refers to the prototype float metatable that's shared between all float instances, not the table belonging to the new individual float instance, which in your code is called `o`. You want to just set `o.int` and `o.decimal` instead.
Always good to hear something. Thought maybe Leaf was busy with other projects/itch stuff.
Thank you! 
itch.io runs on Lapis so the project will always be supported supported. It's just hard to get time to push new stuff into it!
One problem I see: you commented out the assignment to `modulatorRef2` so it will always be `nil`.
The JVM is a specialized virtual machine for Java, and because it is fully specified and not just an implementation detail, other languages have been developed for it. Lua is a simple language made to be easy to embed. It doesn't specify a virtual machine, but it has some bytecode form in its reference implementation, which is tailored specifically for Lua. Lua is designed to be simple and easy to embed and extend. I haven't heard of language projects that compile to Lua bytecode, and if there were, it would be pretty hacky. There might be languages that compile to regular Lua code though, similar to how coffeescript compiles down to JavaScript.
What emulator?
Do you mean alternative languages that compile to Lua? There's [Moonscript](http://moonscript.org/), [Urn](http://urn-lang.com/) and maybe some others. Search for languages that compile to Lua.
There are! https://moonscript.org/
Bizhawk
I came to mention Urn as well, so it's nice to see someone already beat me to it. I'll admit I'm a bit partial to it (I like lisps and functional programming, which it fits well with), but I also think it's worth looking at because of how easily and well it can be used anywhere you have Lua, even embedded in other software. First off, its Urn-&gt;Lua compilation does a tree-shake type pass that includes *only* the runtime code needed into the source, instead of *everything*. That means you get a standalone Lua file that can be used anywhere without having the entire runtime in a single file. It also lets you declare symbols as API functions (via `define-native` if I remember correctly) so that it won't fail during compilation when it encounters what appears to be an attempt to call a function that doesn't exist. It also borrows Clojure's idea of smooth host-platform interop, so it's easy to include Lua code and interact with Lua data structures. Plus, being a lisp, you of course get macros, which are a huge win. That means you can extend the language, creating new constructs (like better alternatives to if/else chains, such as pattern matching) that still compile down to the fast-but-ugly Lua you'd probably write instead. Thanks to all of this, it's possible to get a more batteries-included experience when dealing with embedded Lua, which is usually very bare-bones and sometimes unpleasant. Oh, and because of its Clojure and Racket inspiration, it's also a compelling option if you like functional programming, which is IMO a good fit with Lua, which (despite some OOP syntactic sugar) works very well as an FP language. 
http://tasvideos.org/LuaScripting/Display.html Sample code from there. http://tasvideos.org/Bizhawk/LuaFunctions.html Function documentation local HPAddr=0x100 local HP while true do HP=memory.readword(HPAddr) gui.text(0,0,"HP: " .. HP) emu.frameadvance() end
Thanks, that was exactly what I was looking for!
Well you'll probably want to use a library that lets you make https requests, and then a library to serialize the JSON for easy parsing. No point reinventing the wheel. Their API docs are here https://coinmarketcap.com/api/ which seems pretty simple. You'd send a GET to https://api.coinmarketcap.com/v1/ticker/bitcoin/ serialize the JSON into a Lua object, then do whatever with the data.
I'd be happy to help a bit. Message me any questions you have, or reply here. Either way is fine. 
Are you developing for windows? If yes, you need to create a library for capture screen and get the pixel color in this position
Either use https://studio.zerobrane.com/ or write a plugin for https://github.com/Alloyed/lua-lsp on Vim. Not really sure about any other options. I'm a savage who blindly writes code without that stuff, so sorry if I missed something.
Shows how much I know. Maybe I'll install that vim plugin &amp; try it out.
Am I right in guessing that each "stepsndN" is a variable for a filename? If so, put them all in one array, use a loop that goes from 1-6, and call `love.audio.play(stepsnd[i])`
Thanks dude.
You're not wrong, also, thanks.
Thanks for the response! It wasn't quite the right answer but I realized that the problem was by default it was looking at the wrong memory domain. I fixed it by using memory.usememorydomain("68K RAM") and then used memory.read_s16_be(0xD008) to get the x coordinate of sonic
Since there is an LSP for Lua, you should be able to use most any editor that supports that (mostly...) Atom, VS Code, Emacs, (Neo)VIM, etc. They'll all be limited by what the specific server for Lua supports. VIM is my preferred editor, but takes a fair amount to get set up and maintain. I tend to not mind a couple hours every so often to maintain my editor config now that I have it working well for my needs. Another IDE is Eclipse with LDT (Lua Development Tools.) It's been several years since I tried it, but remember not being impressed when I did.
That's probably the best answer as it avoids excess branching logic and reduces chance for human error. ``` -- Put them in a table if they aren't already in one local audio_files = { stepsnd1, stepsnd2, stepsnd3, stepsnd4, stepsnd5, stepsnd6 } local audio_file = audio_files[step_number] -- Add an if statement only if you want a sanity check if audio_file then love.audio.play(audio_file) end ```
Not true. OPs case reduces to a mapping table so it's easy to do the obvious thing as /u/8E4F787A43D3807E9EA2 shows. But even when the logic isn't a simple there is a way to better organize a long chain of `if .. elseif` clauses: a jump table. A mapping table converts a value to another value. A jump table converts a value to a function. (If Lua supported computed goto you could do it without creating functions.) Let's say that on each step instead of just playing a sound you had a unique animation and modified objects in different ways. We'll wrap each step in a function: local function dostep1(step_number) love.audio.play(stepsnd[step_number]) -- other things happen here end local function dostep2(step_number) love.audio.play(stepsnd[step_number]) -- etc end local function dostep3(step_number) love.audio.play(stepsnd[step_number]) -- etc end -- And the rest. Use your imagination. Now we create a table like using the step numbers as index: local step_actions = { dostep1, dostep2, dostep3, dostep4, dostep5, dostep6 } local dostep = step_actions[step_number] if dostep then return dostep(step_number) end One important thing is I used `return dostep(step_number)`. If there is work to do after the step actions maybe you don't want to do that. But if not then using a `return` keyword will tail-call into the function which makes this the same as having a computed goto. Why do I pass the step number? You could hard code the number into each function. After all, you know that `dostep3` will be step number 3. Well if it's a parameter then you can do things like: local function playstepsnd(step_number) love.audio.play(audio_files[step_number]) end And each `dostep` function calls this one function which handles playing the sound. If in the future you need to tweak how sounds are played there's only one function you need to modify. This is the DRY principle --- don't repeat yourself. 
Rounding isn't doing quite what you think. It's rounding to decimal digits. The trouble is that there is no exact representation with IEEE754 floating point numbers of a ratio where the denominator has a factor that's not a power of two. For instance the ratio 1/10 has the binary representation 0.00011 base two with the last four bits past the binary point repeating infinitely. Your lua number type truncates this, and predicting how these rounded numbers behave is [quite tricky](https://www.youtube.com/watch?v=O3tVctB_VSU&amp;t=667). See: https://en.wikipedia.org/wiki/Double-precision_floating-point_format Exercise for the reader: prove ratio a/b base n has a finite expansion if and only if any prime factor of b divides n.
This may well be incorrect as os.execute runs the given string on via the system(3) C library call which, on linux and UNIX flavors, runs the given command via the *shell* /bin/sh as: sh -c "&lt;your command here&gt;." This is clear from reading src/loslib.c in any of the source distributions (src/lib_os.c in luajit), and the redirection works just as expected. I have no idea how Windows implements system(), but perhaps the explanation may be found there. 
Won't continue in full generality require goto and labels. (LuaJIT &gt;= 2.0 or Lua &gt;= 5.2) ?
That's the same as putting the sounds in a table, except instead you're encapsulating it in a function first, which in this case isn't needed.
In this case, yes. I was pointing out when you're doing more than just playing a sound. The ``-- etc`` lines are where other statements go that can be different for each step.
 i = 0 while true do repeat -- continue guard i = i + 1 if i % 2 == 0 then break -- continue end print(i) until true -- continue guard end -- this works on 5.1 :D
This isn't full generality. How do you break the while in this context without hacks like a flag var and second test? Break has already been co-opted by the nested "loop". When used judiciously (very rarely), goto can yield clearer code.
Set a variable and assign it to false. If, after the `until true`, that variable is set to 'true', _then_ break the while loop. You could also add it as a condition to the `while` loop but that's a bit more ugly. Check out how MoonScript does it: https://moonscript.org/compiler
That's what I meant by hack. Is that really clearer than this? while true do. stuff() if conda then goto continue end more_stuff() if condb then break even_more_stuff() ::continue:: end I've lived through the anti-goto hysteria, and I don't propose to repeat it. The goal is clarity, not operator avoidance. 
Nah. It's not. And to be honest, 5.1 is ancient. I'd really only support it if I really needed to. So do whatever IMO, but I'm not going to recommend something that isn't 5.1 compatible *just in case*.
That's cool. At work, we're more or less standardized on LuaJIT, so many 5.1-isms are still relevant for me, and I understand that audience members may not have liberty to run the lua compiler of their choosing; thus I am chastened.
Is Lua-lsp "project aware"? I tried it a few weeks ago, but I could only get the "go to definition" feature to work within the same buffer and there were a lot of bad warnings from the linter about undefined globals (which were defined in other files). Could you share your config, if you have it working? Thanks!
Is Lua-lsp "project aware"? I tried it a few weeks ago, but I could only get the "go to definition" feature to work within the same buffer and there were a lot of bad warnings from the linter about undefined globals (which were defined in other files). Could you share your config, if you have it working? Thanks!
Awesome, Thank you. I am honestly in a language struggle where idk which one to choose, lua seems easier than my first choice, (C++).
Thank you for your time! you can read my other replies to get what I am struggling with right now.
They’re very, very different. What kind of stuff do you think you want to do?
Whenever you see variables like "stepsnd1" and "stepsnd2", you're probably doing it wrong and should be using an array.
This isn't really a problem with knife. It's just a problem with your understanding of `loadstring` if you actually read the error function, it's quite informative. It's telling you that `data` is **not a table**. it's a **function**. So you can't index a function. This is because if you search the lua 5.1 documentation for `loadstring`, you see that it takes a string, and returns a **function** I can see how if you're not familiar with functional programming that can seem weird that functions can return other functions, but it's quite normal and very useful. In the case of knife, `savegame` is a string that, once turned into a function **and run**, will generate the save data. So to get the data, you have to run the function returned by loadstring. So you do local savegame = love.filesystem.read('highscore.txt') -- read serialized data from save file local data_generator = loadstring(savegame) local data = data_generator() -- notice the () to call the function data_generator if data then self.highScore = data['highScore'] else -- this part is not relevant end 
I tried to cover for not knowing for sure by saying it depends on what the server supports. lua-lsp is still pretty new and only support a subset of the protocol. You're right, it seems that isn't there yet. It may be possible with a comprehensive .luacompleterc of definitions but I haven't tried that either. Under the Todo/wishlist there is mention of some parts of the spec, if implemented, should help make it able to follow required better. Project specific .luacompleterc files may be needed if the loader paths are non-default. Overall, lua-lsp looks promising, but may not yet be enough for many.
Aw. When I first read the readme for .luacheckrc and .luacompleterc files, I thought they were for defining globals which were not defined in your files (API calls, etc.), which seemed very useful. However, defining every global across an entire project isn't something I can see doing manually, and I wasn't able to find an automated method. Currently, I set Luacheck to ignore the undefined/unused global warning, which has an obvious drawback. I do not have a solution for the "go to definition" or "rename variable" features of a language server.
You seem to be using an old version of ZeroBrane Studio, which included an earlier version of ssl.lua that depended on "module". The current version of that tile that is included since 1.40 doesn't have that line: https://github.com/pkulchenko/ZeroBraneStudio/blob/master/lualibs/ssl.lua
Thanks, I've actually swapped over to Python for this particular task, I thought the Lua docs made it look like it was deprecated, but I kinda trusted Zerobrane to know what it was doing. I'll keep that in mind for the future!
Wait, so what exactly is this? Home automation?
I wanna do a mix of things. I wanna understand the game side of coding the most. I just wanna understand a language and know how I could use it. Then go from there.
Sorry for the late reply. ScrapBot is a system that allows you to write all sorts of automations using plain Lua. It's built in a very modular way, which can be explained by this tiny 'schema': ScrapBot -&gt; Proxies/Wrappers -&gt; Lua Env To put simply, ScrapBot can get any feature built into it, pass it to a proxy/wrapper which afterwards would pass it to Lua. Currently ScrapBot consists of these functions: screen.capture() screen.getSize() interface.showPrompt() input.sendKeyPress() input.sendMousePress() input.setCursorPos() input.getCursorPos() core.version core.write() core.writeLine() core.setFocusWindow() core.getFocusWindow() core.setWindowSize() core.getWindowSize() core.setWindowPos() core.getWindowPos() core.isWindowVisible() core.getWindowTitles() core.close() These are only the very few of functions that will exist in non-beta release, besides the very low-level native api functionality - ScrapBot will also have Selenium built into it for web-based automations, NAudio library for audio-related functionality and perhaps other things that I'm hoping will be suggested by the community. What else can I say about this project? The interface is crappy (I didn't focus on it too much) - there is a built-in package browser/downloader that makes finding scripts so much easier. There is a built-in logging system that I don't think matters too much. I hope everything is clear - if not, just ask.
You've piqued my interest. I'll look into it. 
I'm glad. If you have any suggestions or requests - hit me up.
Keep in mind, evaluating the if statement criteria can potentially be expensive (imagine if the if criteria is a function invocation that needs to go query a database or something) so shortcutting the later if statements when the first one is true could be highly beneficial. I highly the doubt the extra if evaluations *themselves* add a relevant amount of overhead. Also, are you actually running into performance issues with whatever you are doing?
Consider this code: (let's call it `ifs.lua`) if x == 1 then do_A(x) end if x == 2 then do_B(x) end if x == 3 then do_C(x) end if x == 4 then do_D(x) end print('done') And this other variant: (let's call it `elseifs.lua`) if x == 1 then do_A(x) elseif x == 2 then do_B(x) elseif x == 3 then do_C(x) elseif x == 4 then do_D(x) end Let's see what happens if `x` is 2. for `ifs.lua` &gt; is x == 1? No &gt; is x == 2? Yes &gt; call do_A(x) &gt; is x == 3? No &gt; is x == 4? No &gt; call print('done') for `elseifs.lua` &gt; is x == 1? No &gt; is x == 2? Yes &gt; call do_A(x) &gt; skip the rest of the elseifs &gt; call print('done') When using `elseif` the other cases are not even CHECKED if one of the earlier ones was true.
No, not really but its scripting for a game, and these things are not typically running constantly. But also I don't wanna harm performance if its going to cause a huge issue. I just find it easier to read is all.
Welcome to premature optimization. The biggest piece of advice I can give you for that is: don't. Focus on your algorithmic complexity. Go for smart solutions instead of brute-force ones. Only after that, if you still aren't getting the required performance, should you start on these micro optimizations. And above all else, profile. https://github.com/mindreframer/ProFi.lua
Short answer: They are the same. (assuming the condition has a static time to evaluate) Why? Lua handles single IFs like this: &gt; evaluate condition &gt; if true jump to body &gt; if false jump out And ELSEIFs like this: &gt; evaluate condition &gt; if true jump to body &gt; jump out &gt; if false &gt; evaluate next condition &gt; if true jump to body &gt; jump out &gt; if false jump out This adds an additional jump instruction to jump out, to prevent falling through to the next condition. ***** **IFs** Example statement: if x then print'example 1' end if y then print'example 2' end After passing it through the parser: -- if x then print'example 1' end 1.) getglobal (gets _G.x) 2.) test (moves instruction pointer to 4, if true) 3.) jmp (moves instruction pointer to 7, if false) 4.) getglobal (gets _G.print) 5.) loadk (loads constant "example 1") 6.) call (calls print) -- if y then print'example 2' end 7.) getglobal (gets _G.x) 8.) test (moves instruction pointer to 10, if true) 9.) jmp (moves instruction pointer to 13, if false) 10.) getglobal (gets _G.print) 11.) loadk (loads constant "example 1") 12.) call (calls print) 13.) return/rest of code ***** **ELSEIFs** Example statement: if x then print'example 1' elseif y then print'example 2' end After passing it through the parser: -- if x then print'example 1' end 1.) getglobal (gets _G.x) 2.) test (moves instruction pointer to 4, if true) 3.) jmp (moves instruction pointer to 8, if false) 4.) getglobal (gets _G.print) 5.) loadk (loads constant "example 1") 6.) call (calls print) 7.) jmp (moves instruction pointer to 14) &lt;-- ONLY IN ELSEIFs -- if y then print'example 2' end 8.) getglobal (gets _G.x) 9.) test (moves instruction pointer to 11, if true) 10.) jmp (moves instruction pointer to 14, if false) 11.) getglobal (gets _G.print) 12.) loadk (loads constant "example 1") 13.) call (calls print) 14.) return/rest of code
Thanks that explains alot. Actually everything in here has helped.
So your advice is 'dont prematurely optimise but always profile'?
Something like that. I wouldn't even profile until I had performance concerns. And you should always do best practices.
Perhaps. If the checks are cheap and the contents of the if statements are expensive then it's micro optimization, especially with the JIT
In the sample code you still have a bug! `lua_pushstring` can throw in low memory conditions. You should put that push *inside* the pcall'd function (and pass it in via a lightuserdata on the stack)
Wouldn't it make more sense for the program that changes the theme to do that?
It can't do that, so I'm using a workaround. Sorry, I forgot to mention I'm using Rainmeter. It's not really built to manage tasks.
Well I guess the command would be `os.execute("tskill INSERTTHEME.EXEHERE")` but you'll have to figure out the exe name for the themes window.
If you're unlucky, it's the same exe as the whole PC settings.
Yeah I found the exe file, it's in C:\Windows\ImmersiveControlPanel, but I can't figure out how to use the code, haha. From my understanding the .lua file would look like this: &gt;function Kill(sec) local now = os.time() + sec repeat until os.time() &gt;= now os.execute("tskill C:\Windows\ImmersiveControlPanelSystemSettings.exe") end And then when I want to call the function I just use &gt;Kill(#ofsec) Is that right?
If you are using or planning on using it and have a suggestion for functionality - post below. I'll be adding Selenium fairly soon, first I have to try it out outside of Lua.
Oh hey, it’s unreal! Cool to see you here.
You want this script to always be running, yeah? If so, why are you telling it to repeatedly kill the themes window until N seconds have passed? Instead, I would have an infinite loop that first kills the themes window, then executes a sort of sleep function. https://stackoverflow.com/a/17987723 shows the way you could create said sleep function.
You could do it C-style and have a global "lastError" variable that gets set when something fails?
Wait, so you can't use `assert` because it calls `error()`? If so, print to an `error.log`, or just use `print()`, and then exit the function. But maybe I misread the issue.
I cant use assert anywhere beside testCase function because that's good rule in writing automated tests. Function that perform some action should return if was able to do it or not and test case should do the assert on that result. Reason for that is because you may want to use same function to test if something is possible but also if something is not possible. If this function was to assert any result it would not be possible. I cannot print it or write it in any other possible way. It has to be passed to ASSERT as fifth parameter - only this way framework written in c++ will be able to get this information from lua.
Maybe check the return value? Then you can pass either the error message or `true` if not an error. if type(returnval) ~= "boolean" then assert(false, returnval) end Or create a new error object, which has a table for nesting errors, then print them all when you're done? idk
I'm confused... fifth parameter to assert? I only see 3 parameters in your code. I'm familiar with how assert works in Lua but what do the 3rd, 4th and 5th parameters do?
...seems pretty reasonable. If you run into a performance issue why would you start optimizing before you've profiled what is slow? (unless you already know)
Yup, i screwed up :( I ment 3th parameter. And one important thing that i dont know why i didnt mentioned (looks like i was tired). We have our own ASSERT function (written in uppercase). It takes three parameters: - condition - message to display if failed (what failed) - detailed message to be displayed (why it failed) Maybe now that now these things are clear you will be able to help me. So using this example: --[[ -- Function that uses api to tell app to do something. -- This time it also says what went wrong. -- @return boolean, string|nil (string with error info in case of failure) --]] function doSomething() local response = apiCall("something") if (response ~= true) then return false, "Invalid response from api. We expected true but got " .. tostring( response ) end return true -- at this point it has to be true end --[[ -- More complicated function that first calls doSomething(), handles it's optional failure -- and than does it's own business. -- @return boolean, string|nil (string with error info in case of failure) --]] function doMoreComplicatedStuff() local doSomethingResult, doSomethingErrorInfo = doSomething() -- if we failed on api call in doSomething then we should stop imidietly and pass this failure up if ( doSomethingErrorInfo ~= nil ) then return false, doSomethingErrorInfo end local response= apiCall("some other request") if (response ~= true) then return false, "Invalid response from api. We expected true but got " .. tostring( response ) end return true -- at this point it has to be true end --[[ -- Test case that says what has to be done and asserts result. -- This time it can also use error info from doMoreComplicatedStuff() and pass it to user. --]] function testCase() local result, errorInfo = doMoreComplicatedStuff() ASSERT(result == true, "Test was unable to do some more complicated stuff.", errorInfo ) end What are my other options to pass fail in doSomething() function up to the testCase function. As you can see right now i'm using multiple return values and passing it up through callstack. But there are probably other ways of doing it. And that's what i'm asking for - what are my options.
Ideally, error and x/pcall. If you really do not want to deal with proper exception handling, you can do it with message passing through coroutines. I’ll write you a little example in a few hours. 
I am so dumb, thanks everything works now.
Wow man, thanks! I'm still not fully understanding this code but that's only because of my poor knowledge of coroutines. But anyway thank you so much! If i dont figure out anything else i may endup using your solution :)
No problem. I will admit that it’s not very obvious what is going on there, which is why I don’t like it. If you want any changes, or have any questions about something, just ask.
Shameless plug: https://github.com/jonekcode/ScribeBot
Took a look at the github readme and didn't notice anywhere what platforms it works on... Linux with Wayland at all?
I've never tried it, but I think you can build C# stuff on Linux with MonoDevelop
Even if so, it utilises WinAPI for all functions related to input. I'm afraid that if you want to use it on any system besides Windows - you aren't in luck.. this might obviously change in the future.
I see! Thanks! I didn't think of that
I see! Thanks! I didn't think of that
It seems like it would be easier for them to have a server/client relationship so everything could be event-based rather than two loops talking to a file.
Gotta get your daily allotment of spaghetti code :P
If the loop condition depends on something that is first acquired inside the loop (as is the case here), he should use "repeat" (which has the test condition on the end of the loop), not "while" (which has the test condition at the beginning of the loop).
http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf
The algorithm typically at the heart of line-diffing is [longest common subsequence](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem) which has a straightforward "dynamic programming" implementation, explained in detail on the Wikipedia page. Both of those projects implement that algorithm. You can find an implementation of LCS for strings [on Rosetta Code](https://rosettacode.org/wiki/Longest_common_subsequence#Lua); you'd need to modify it to work on a list of lines instead of a string (conceptually, a list of characters)
No problem, that's why we are here 😀
Get yourself a project that uses Lua, or a Lua library like lua-posix. You'll just have to look at the structure of the code. Then read through the reference manual top to bottom [1]. If you need some more hints, the oldest edition of Progamming In Lua (targetting 5.0) is available for free [2]. Coming from a C background, what I had to write Lua&lt;&gt;C interops for was understanding how exactly upvalues work. This, plus writing actual code, was all I personally needed. &gt; Also, do I need to learn another language before I can do this or to help me learn this? It would be helpful to know some general concepts, but the materials in [1], [2] explain things by starting with the basics and then putting them together, so if you're really interested in engaging the subject you'll have a fun and productive learning experience even without prior knowledge. --- [1] https://www.lua.org/manual/5.3/ [2] https://www.lua.org/pil/contents.html (I also recommend the paper book, if you want to afford it).
Thanks for such a great reply so quickly! I’ll consider some of the things you have said.
I don’t know if you play Minecraft but modded packs usually include computercraft which uses lua and is very user friendly
I started with love2d... today I use it mostly to automate boring stuff... check out github.com/LPLBrasil for some of them.
Using love2d to make small games / graphic demos. 
I used the manual: https://www.lua.org/manual/5.3/manual.html But it sounds like you are new to programming, you may want to look for material specifically targeting someone who has never programmed before.
Maybe you should try trying.
[Programming in Lua](https://www.amazon.com/Programming-Lua-Second-Roberto-Ierusalimschy/dp/8590379825/ref=sr_1_3?ie=UTF8&amp;qid=1524718721&amp;sr=8-3&amp;keywords=programming+in+lua) is a *great* resource for learning. I'm really surprised no one mentioned it. Note that's the 2nd edition which covers a common, but not the most recent version of Lua, 5.1. There are more recent versions for 5.2 and 5.3 if your'e interested/
BIG GAMES
I saw Youtubers using ComputerCraft and wanted to make my own scripts so I learnt Lua. I forget whether I learned Matlab or Lua first but whichever one I did first made the other pretty easy to pick up. 
My friend asked me to help him own and develop a GMOD server. So there I was with no clue how to do anything with Lua and I had no clue where to start. It was a shit show at first, but I got better at it. It took awhile, and I do not reccomend doing it the way I did, please do something that dose not make you angry 24/7 and then keep doing it for months.
I got into it by playing Minetest. The default game is lua and reading through the source code helped me understand how it works.
Which is why I have asked how people have learned Lua, so I can get some idea of a start point.
Appreciate the post, thank you.
How did you know what each line does though?
Oh dear, as long as you powered through and actually learnt something then I guess it's not bad. You stuck through it when it got hard, that's what's important and inspiring. :) This is why I want to learn it, I'm interested in writing my own scripts for my GMOD server, I don't want to be a script kiddie my whole life. xD
Damn the price is not cheap for a book, I'm definitely going to consider this though. Thank you very much! :D 
I'll definitely use this website when I gain more knowledge. What I am currently doing is using the GMOD wiki page to learn Lua as it is one of the main reasons why I want to learn it right now. Thank you though. :)
I'll check this out, thanks :D
It's &lt; $5 used, and very much worth it. I got a used - like new copy and it's literally sitting within arms reach on my desk. 1 time cost and it's very informative and an easy read.
IMHO it's a really good library to start learning Lua, as it's a very visual way of learning when you're drawing things to a canvas.
You can get away with most things by doing a web search "how do i loop over an array in lua" for example, there's plenty of solutions on the web. As long as you understand the core logic of any programming language (loops, if statements, arrays, variables etc) then once you're facing a problem, make some creative web searches -- you'll probably find a solution to what you're trying to do straight away.
You should start to look around your daily work or studies. If there is an equation you always do on school, make a script of it. If you have to enter data on a spreadsheet, make a script of it... There is always something that you work hard, but you should be working smart. 
I’ll bare that in mind, thank you. :)
THE BEST GAMES
In that case, I would recommend watching [&lt;Code Blue&gt;'s videos](https://www.youtube.com/channel/UCFpuE-Qjn4EWqX-VJ_l7pbw/videos) and then always keep the [GMod Wiki handy](https://wiki.garrysmod.com/page/Main_Page) because it is very useful. You should find that everything you would need in documented in the wiki with examples on how to use them. Also, if you have something that you want for your GMod server, just send me a message, I have around 300GB of scripts and models for Gmod, so I probably have what you want.
This book was a big help for me. To do more complicated things like inventing mobs more research is needed like AI concepts. That's beyond my understanding and I'm still learning. https://rubenwardy.com/minetest_modding_book/en/index.html
Garry's Mod and https://forum.facepunch.com/f/gmoddev
I tend to think some C/C++ skill is a good thing though. The C/C++ interop is really one of the important features of Lua/LuaJIT. This is one of the reasons I strongly prefer it over other scripting languages. Without the C, you have only the system features other guys have coded for your consumption. I'm finding my code balance (Lua:C) for my projects about 2:1. Learning your OS and attendant libraries well allows you to see where Lua needs some assistance from the outside world.
I started modding Don't Starve.
Best way to get started is to find a project to work on, either something you do alone or with others. If you can find something you're passionate about building, then you'll have motivation to build it and through that process learn the language. This goes for any language really.
For me, I thought PiL was an excellent read, but for the reference, I use [Devdocs](https://devdocs.io) which has the docs for 5.1, 5.2, 5.3 all in the same place.
Ooo thanks for such a helpful comment, I should be okay with how I’m going about it right now. Thank you for the help tho, the wiki is great!
It has to be something that you're excited about.
Hmm that is true, tbh I’m quite excited about writing my own gmod scripts but I just don’t know how to yet. Have learnt some things tho
Oo what kind of mods?
I have started from programming games using [Corona SDK](coronalabs.com).
Started with a character mod, and then worked with a mod team to create what was basically an expansion. That project died eventually, unfortunately.
I started learning Lua to write GMod scripts too. I eventually discovered the LÖVE framework and took off from there. Maybe start with this little tutorial on [GMod scripting](https://wiki.garrysmod.com/page/Beginner_Tutorial_Intro).
Hey :) ArchlightOnline.com is our game. Our game engine is all done in c++, all functionality ingame is done through Lua and XML. Our game is originally based off an Open Source found here: https://github.com/otland/forgottenserver Our lead programmer is actually one of the main contributors/creators of TFS (The Forgotten Server) In this "space", as there are 1000+ other games based off this open source, we are one of, if not the biggest.
I'm really surprised no one has mentioned the Lua-users wiki. [LuaTutorial](http://lua-users.org/wiki/LuaTutorial)
Which line is it actually erroring on? By my count, it's "print("forward")" but that's not referencing self at all. Also, where is self supposed to set? Is there important stuff happening in class() that we should know about?
ok, that helps. So, I still need to know where self is supposed to be set and what's happening in class(). I also assume there is some other code outside of this invoking shoutSound. Can you invoke any of the other method successfully? Are you invoking shoudSound with : syntax? 
That actually works, the function just has to be global. The colon is syntactic sugar so you don't have to type self. local x = { id = 2 } function x:func() return self.id end print(x:func()) &gt; 2 Although I probably messed that up typing on my phone...
Right, but OP didn't define their function like that. They just chucked a random self inside it. 
 local Controls = class() What's that class function doing? Also, fix the intializer, it doesn't work. That's why [self.id](https://self.id) is nil, because it never got initialized.
Right, that function should probably be part of the controls table... (I dislike OOO in Lua so much)
Change *buttonEvent(event)* to *Controller:buttonEvent(event)*
I've been playing around a lot with [Löve2D](https://love2d.org/), it has a good community and wiki if you encounter problems. My old programming teacher recommended [Lua Programming Gems](https://www.bookdepository.com/Lua-Programming-Gems-Luiz-Henrique-De-Figueiredo/9788590379843?ref=grid-view&amp;qid=1525176937907&amp;sr=1-6) as well but I haven't read it myself.
Are you in any need of a client security engineer?
2. separate 3. no A GUI is less useful to me than a command line tool (as a developer who needs to integrate package manager commands into CI, and already has a terminal open in the any project I'm working on.) Integration into an IDE would provide value to me, a standalone GUI wouldn't.
2. Separate 3. No
I would actually try Roblox Studio. It is basically Lua with an Object explorer and you can make 3D games in the process.
Not currently, but I will certainly contact you if and when we do :)
World of Warcraft uses Lua for its UI, that is where I started, with addons.
Please provide a complete example where we can see the described behaviour (e.g. the definition of RecChain, BuildGen and generate_building_chain()) and put it to Pastebin, preferably. Also, your search() function can be rewritten as follows: local function search (k, plist) for i, sclass in ipairs (plist) do if sclass[k] then return sclass[k] end end end local v = plist[i][k] -- try `i'-th superclass if v then return v end end end 
I am not familiar with NondeMCU but if you have Linux installed there then the easiest way would probably be as follows: Use Lua's io.popen() to call the "wget" command which downloads the RSS feed. Then use Lua's string.match() to parse the downloaded feed and do whatever you want with it. Again, use Lua's io.popen() to send e-mails using standard Linux tools.
That program runs without errors and does not output anything. From your description, I am not entirely clear what you want to do and what you think is wrong, sorry. It's hard to analyze 1300 lines of unknown code.
all I know for sure, that there is not a linux installed, only firmware with buggy python and lua's interpreter. 
&gt; buggy python You'd be better off trying to use [python's Feedparser](https://wiki.python.org/moin/RssLibraries) to pull in RSS
What's your microcontroller board? From what you've said I'm assuming it's an ESP8266 board, in which case knowing the model would quite help. (ESP-01, ESP-12, etc.) If the above assumption is true, you could modify some of the code from [this project](https://github.com/neoxharsh/RSS_FEED_OLED_ESP8266) to get your feed download and parser.
[NodeMCU](http://nodemcu.com/index_en.html) is a Lua interpreter written around the [RTOS](https://freertos.org/) kernel. 
Well, i've got model ESP-12F.
IF you're fine leaving it hooked to the PC, [you can do RSS](https://www.hackster.io/neoxht/esp8266-based-rss-feed-on-color-oled-5e758e)
Then it should have enough flash space for the parser, and however you plan to send the emails. You have a few different options here before you get started. ## Step 1: Choosing the Firmware You can continue using NodeMCU, and do the work in Lua. Or, you can use MicroPython if that is more familiar to you. Or, you can use the Arduino IDE, if C++ is more familiar. There are other options, but those are the main ones. ## Step 2: Downloader NodeMCU has the [HTTP](https://nodemcu.readthedocs.io/en/master/en/modules/http/) library to fetch files for you. MicroPython has the [socket](https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_tcp.html#http-get-request) library, and a FAT filesystem to store them in. Arduino, and you'll have to dive into the HTTPClient library. ## Step 3: RSS Parser RSS or Atom? That's your first question, and yes, they are different. They are fairly easy formats to parse. They were written to be. But you may have to write your own. Why? Small footprint microcontroller for one. For another, you probably don't care about every part of the format. An Atom item has a unique ID, alink, a date, a publishing date, a short description, maybe a long description, and a title. A RSS item has at least a title, a link and a description. You probably want all three of those, but it may have more. &lt;item&gt; &lt;title&gt;RSS Title&lt;/title&gt; &lt;link&gt;https://www.example.com/item.html&lt;/link&gt; &lt;description&gt;An RSS item&lt;/description&gt; &lt;/item&gt; Which parts do you actually need? As presumably you want to email on new items, you probably want to keep track of the last item's publish date or title, and use that to tell when you've got something new to send off. ## Step 4: Email How are you going to email it out? Gmail, MailChimp, Mailgun and others have a HTTP API you'll need to follow. Others might let you send one through SMTP or IMAP. It depends on your provider. NodeMCU has a [SMTP example](https://github.com/nodemcu/nodemcu-firmware/blob/master/lua_examples/email/send_email_smtp.lua) you can modify to fit your needs. Micropython has a [library you can install](https://pypi.org/project/micropython-email.utils/) that might work. I'm not quite sure. Again, with Arduino it'll be about following the spec, and using sockets to do what you want. Thankfully, email is one of the easier things to handle.
Regardless of how you achieve OS &lt;&gt; Lua interop to get the networking part done, use a proper XML parser to process both Atom and RSS feeds (and a proper Unicode library for handling text data (or Lua &gt;=5.3)), otherwise every other page's feed will break your system in amazing ways.
You're going to want to use ScribeBot if you want to code a bot using Lua. It's still in early development but it has almost all the features you'd need. 
The most embaressing of things, I accidently called the class BuildChain rather than self when I was calling for the function :( Someone noticed that typo and ocne fixed, it worked perfectly.
Yep. Made Garry's Mod addons with it back in middle school. Put it on the shelf for 7 years, then I discovered LuaJIT. My life has never been the same lol.
It is just like maths: operator priority. In 5 x 2 + 3, the multiplication is done before the addition. In most languages, the parentheses have higher priority over other operators. Now, in the case of your example, the parentheses are unecessary. With the 'and', Lua evaluate the expression on the left side of the 'and'. If it evaluates to 'true', it evaluates the expression on the right side. Otherwise, it stops. Parentheses might be necessary in complexe expressions, or to make the expression clearer and easier to understand.
Nice! Keep meaning to try something with Fengari
Still waiting for Part 3 of your Love ECS tutorial... ;)
When you call which function, it says what doesn't exist? I notice you read `self.speed` but it looks like you never set it.
Declare speed and move the hurdles definition and declaration down.
Thanks man, I must have read over the code a thousand times, it seemed solid to me. Crazy what I miss in plain sight while doing this.
The admin who unfucked the formatting on my post is the real mvp
Mods can't edit posts
If you are on Linux, this makes your program wait for 0.2 seconds: os.execute("sleep 0.2")
The example below uses LuaSocket's gettime() function as wallclock. You can replace socket.gettime() with any other function that returns the current time in seconds relative to a point in the past (must be monotonic). Mind that you won't have millisecond accuracy, though. local socket = require("socket") local gettime = socket.gettime local function timer(seconds) local exp_time = gettime() + seconds return function() if gettime() &lt; exp_time then return false end exp_time = exp_time + seconds return true end end local t1 = timer(.5) -- a timer that expires every .5 seconds -- Event loop while true do if t1() then print("timer expired") end end 
Not sure if it is what you need, but you could create an empty table, add a metatable to react when setting 'a' (storing it on metatable) and returning 'a' when accessing 'a' and 'a+1' when accessing 'b', is that what you would like ?
Pretty sure there is not. Even if there was that'd be a pretty poor design. The result of calling a function (particularly the side effects) shouldn't change based on whether you are doing things with the return value or not. How about adding a dry run parameter to your function so callers can explicitly request a dry run?
Unless you go crazy with reflection and parsing but I agree this seems to be a misguided approach. The best thing will probably be too make two functions instead.
You might be able to figure this out, but if a future programmer ever has to maintain your code, be prepared for them to hunt you down and beat you with their coffee mug.
Perfect. Does the code need to be quick? Are you returning anything with metatables? 
No, speed is not required. In the expression context, my functions will be returning iterators.
You'll have to use a table as storage to build the reversed argument list, then use unpack/table.unpack to turn it back into separate arguments to be returned.
Oh funny you say that, I considered that but it seemed wrong for some reason- from an optimisation point of view is it a waste to create a whole table for situations like this? Perhaps it really is the only way. Just odd that excluding the last arg is such a different process to excluding the first. 
You can use `#{...}` to get the amount of arguments.
I tried using that too. How would you use that to exclude the last argument without a table?
 -- capture args local args = {...} -- pop off last element table.remove(args, #args) return args Something like that maybe.
\`\` select\('#', ...\)\` would be preferred since it doesn't dynamically allocate a table \(and, if you know \`select\`, is potentially easier to read\)
yeah, i think it's just like that. Multiple-arguments have this one-direction logic to them, the same way that it only works this way: ``` function func() return 2, 3 end print(1, func()) -- prints 1 2 3 print(func(), 3) -- prints 1 3 ```
True, I completely forgot about that.
It's unfortunate though. If you look at the C code, the arguments are being pushed onto the stack, and are evaluated and pushed from left to right. Last argument is right at the top of the stack. Now, Lua code doesn't follow a strick stack discipline internally, and the slots aren't cleared until return. `select`ing any argument should be constant access with no allocations. Now I wonder if LuaJIT will optimize down to registering top-of-stack, clearing the stack and pushing the register if you give it a 5.1-style selection of the last argument. Hmm....
You're right- while not ideal, if it's the only way then it effectively becomes the ideal solution that's possible. Just a new concept in programming for me. Thanks!
It was the first working solution I thought of, so I assumed I had the wrong approach. The way Programming in Lua is laid it requires you to know a few advanced concepts before they're covered in depth. Coming from other languages, having to create a whole table just to ignore one argument does seem like a wrong approach. I see now though, that there's no reason to avoid tables if they're the only way. 
I'm yet to reach C API but I'll save this to revisit once I get there, thanks :)
Also has defined behavior when working with nils.
I’ll try to do it Wednesday.
I am curious how will you achieve this?
collectgarbage, __gc, and sethook, hopefully. If not, I can try porting my disassembler 5.2/5.3 and using getinfo + string.dump on the caller, but I would really rather not.
&gt; The premise is a bit silly, though Oh yeah, definitely. This is just part of an experimental graphics tool where, ideally, you could write line(2,2,10,20) -- draws a line or for x,y in line(2,2,10,20) do -- steps x,y along the pixels that *would* have been drawn end 
&gt; collectgarbage, __gc, and sethook I was thinking along those lines, too. In C++ that's how I'd do it: make the function return a proxy object which can either be implicitly converted to the return value you expect (expression context), or which performs the operation in its destructor (statement context). 
There's no built in API for that *in the language*, if that's what you mean. Are you using some kind of library or framework?