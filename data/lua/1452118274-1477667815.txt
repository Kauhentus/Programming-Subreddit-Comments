I used this partial FLTK binding, it was nice to work with: https://github.com/siffiejoe/lua-fltk4lua
There's a typo. &gt; Or you can just call lua_dofile which calls both lua_dofile and lua_pcall(L, 0, LUA_MULTRET, 0) for you! The second 'lua_dofile' should be 'lua_loadfile'. Good article, btw.
Thanks, I'll fix it. And thanks for appreciating the article. :)
How old are you? You may enjoy http://codecombat.com which is an RPG game where you play by controlling your character with programming and it is a tutorial. Many languages are available, Lua included.
If you want to create your own file format (which is really not that hard), you can just use the [IO module](http://www.lua.org/manual/5.3/manual.html#6.8) to write and read text to/from files. If you want to write Lua tables to a file, you're going to have to write your own routine of find one on the internet since Lua doesn't have a built-in serialization function. Or you can use a [premade library](http://lua-users.org/wiki/LibrariesAndBindings) to do what you want, of course.
Something like this will give the outcome you desire: local function set(ary) -- use the values from the array as the keys of a hash, which values are set to (true) -- this allows us to very quickly check if a value is already in the hash by simply checking if it returns true local hash_set = {} for i = 1, #ary do local name = ary[i] if not hash_set[name] then hash_set[name] = true end end -- then convert back to array local ary_set = {} local incr = 0 for k, v in pairs(hash_set) do incr = incr + 1 ary_set[incr] = k end return ary_set end -- very specific split function for this exact string, would have to get a more generalized and error-proof version -- for a more dynamic style of string input local function split(str) local list = {} string.gsub(str, "(%w+),?", function(gr) if gr ~= nil then table.insert(list, gr) end end) return list end local name_str = "John,Mark,Frank,Mark,Frank" local split_names = split(name_str) -- &gt; {"John", "Mark", "Frank", "Mark", "Frank"} local names_set = set(split_names) print(table.concat(names_set, ",")) -- &gt; {"Frank", "Mark", "John"} This is merely an example and would require tweaking for the specific application.
I dig. It looks like Lua has an RSS feed for its *News* page so you could subscribe to that (I just did!) and you'll know when new releases come out. (In fact I'm now going to subscribe to several other projects that I install manually. Why I didn't think about that before ...)
But you do have the latest version of `lua5.2`. If you want 5.3 that's a different package. Lua 5.2.3 will upgrade to 5.2.4, not 5.3. Nor should you want it to as it will break applications that depend on it. 
Well, what if multiple indexes contain the same value? There is no associativity in the other direction. You must search for it: for k, v in pairs(myTable) do if v == myValue then print("Value "..tostring(myValue).." found at key "..tostring(k)) end end This is obviously going to be a bit slow. In reality you probably want a different data structure. Can you describe your problem? 
 function click(c) while c &lt; number_of_pixels do if pixels[c].color == colors[c] then click(c + 1) else c = c + 2 end end end click(1) Something like this? It's very unclear what exactly it is that you want.
I will specify IT in a few minutes. Will record the color and Post my needs in a few.
Okay, these are the colors. http://m.imgur.com/a/h3Hd9 Pic 1=a Pic 2=b And here are the needs: CREATETIME="2016-01-10 20:39:23"; SCREEN_RESOLUTION="320x568"; 1. touchDown(4, 214.4, 438.4); usleep(266421.54); then if position (6, 163.6, 329.0) = color a then touchdown (6, 163.6, 329.0) go back to 1. else if position (1, 191.0, 488.0) = color b then touchdown (1, 191.0, 488.0) Go to 1. else go to 1. Ty so much for helping!
there's a table containing a set of values. and i have a personal variable let's say: a={1,2,3,4,5,6,7,8,9} mynum= 3 then i will shuffle the table (no problem here) and get: a={5,7,3,6,9,1,2,4,8} then i will get the position of the randomized. i need to get the position of mynum which is 3 from the shuffled a{} table
With what gave so far I still think you are going the wrong way, but lets assume it is really what you want … in no particular order ... 1.1) iterate with impairs 1.2) wrap the ipairs-for-loop in a function with parameter for the value you are searching, so that you can use it like in your first example print(indexOf(a, 'you')) or print(a:indexOf('you')) 2) create a lookup table for the data table data = {'you', 'me', 'us', 'we'} datalu = {'you'=1, 'me'=2, 'us'=3, 'we'=4} as long there is no overlapping or confusion with the values you can put them even in a single table data = {[1]='you', [2]='me', [3]='us', [4]='we', ['you']=1, ['me']=2, ['us']=3, ['we']=4} 3) swap your key and value (like in the lookup table) data = {'you'=1, 'me'=2, 'us'=3, 'we'=4} and shuffle the values 1-4 instead data = {'you'=3, 'me'=1, 'us'=4, 'we'=2} These solutions really depend on what you are programming there, and I still don't understand that. But maybe one these solutions suites you.
You will need to search through the table or make the strings the keys while making their values increment by one.
What are you actually trying to do?
&gt; associativity I think you mean [injectivity](https://en.wikipedia.org/wiki/Injective_function).
&gt; having local by default would fuck up lexical scoping It works fine in C, no? And in Java, which is similar but disallows declaring a local which 'masks' another variable. Or is there some important difference in Lua's scoping rules?
I'm trying to make a console based clicker game. I changed my question as well
Are you talking about object oriented programming? you can put functions also into tables if that is what you want. But Lua knows only functions. And you can put them anywhere. Lua is less complex then most people know. People search for the complex stuff like in C++ and are sometimes disappointed, but actually it is not necessary in Lua and things can be kept easy. Of course you can have OOP also in Lua. To be honest I still don't understand your problem. On youtube there are some videos where you can learn Lua in 1 hour. Maybe you practice a bit first on your PC. And then maybe your question will become obsolete.
Also, note that there is a `...` operator which can sometimes go at the end of your argument list. This is a special operator that lists any amount of values and can be used as such: function sum(a, ...) assert((a and (...)) and true) local current = a for _, number in pairs({...}) do -- make a table of everything inside of "..." current = current + number end return current end
You might be able to build what you want with love 2d. Other than that maybe there are bindings for tk or fltk.
You can try GTK or QT to make your lua application. I never used none of those libraries/bindings but they seem easy to implement. http://www.gtk.org/language-bindings.php http://www.nongnu.org/libqtlua/ You can find more projects on google if you are interested. 
Will do. Though I'm starting to doubt those libraries have it... (No QTab or WxTab can be found, I probably have to go deeper)
How is it not working?
I used a lot [IUP](http://webserver2.tecgraf.puc-rio.br/iup/), very simple, nice examples and documentation and binaries are available. Maybe not as complete as wxLua, Qt or Gtk, but it was sufficient for my uses. Tabs are available with the control iup.tabs{child, ...} (In the documentation, see in Controls -&gt; Containers -&gt; IupTabs.)
That looks incredibly simple and exactly what I'm looking for. Thank you very much! :D
Make sure your Zerobrane is up to date - this bug will be fixed in 1.3 (you probably will have 1.2)... Here is a bug with the same problem: https://github.com/pkulchenko/ZeroBraneStudio/issues/538 Try outputting to the console first, as a workaround!
There's a fairly new blog called lua.space that I expect will quickly gain traction within the Lua community, maybe contact them and see if they have plans regarding advertising. 
I've never heard of Hammerspoon, is it Mac only? As for userdata, Lua supports it but isn't made to manipulate it. The idea is that if Lua should manipulate it, the data should be exported in a way that is compatible with Lua. More advanced users please correct me if I'm wrong. 
Yes "they" have plans. /u/edalcol (Etiene) told me that. She is the founder. https://twitter.com/etiene_d/status/686894900391096321
Neat, I noticed lua.space is operated by the main developer behind [Sailor](https://github.com/sailorproject/sailor). Again, small world!
The Lua community isn't big yet but it has a surprisingly large amount of libraries compared to the size of the userbase. This is mostly thanks to people like kikito who has released more than a dozen libraries alone. 
I reached this throughout unofficial Lua https://twitter.com/LuaLang twitter, meybe them can RT a job offer. Many recruiters uses GitHub for finding profiles available for hiring which know the required language. PS: I'm interested in the job (I'm a big fan of Lua and currently working with AngularJS + NodeJS), furder details will be appreciated. Its really hard to find Lua job offers outside the gaming industry.
It's gonna be there at some point! xD https://github.com/Etiene/lua.space/tree/joblisting Trying to reconcile Sailor and Ophal's merge with lua.space with translating Lua stuff from english to french and exams on university haaaalp xD
This information is definitely a good start. Also, I'm open to PM's if anyone here would like more information on the matter. In the meantime, I'll continue messaging down my list of leads.
I have no experience in handling userdata, but as far as I know this is correct
Get non-Lua devs and train them is about your only hope. I had to do this for an Erlang project. But, Lua is much more simple and the syntax and style far less jarring than Erlang, so hopefully it will be easier. Maybe C devs?
You might find someone at /r/gamedevclassifieds who could help, there's a fair amount of Lua programmers there.
Moonscript is an even lesser known language than Lua. As a developer who primarily works in Lua, Moonscript has some nice features but it does a lot of things wrong, again, from someone who loves programming in Lua. If I was looking for a Lua programming job and saw Moonscript, I'd go running. Well, unless you let me continue work in Lua and slowly replace the Moonscript, but I know that's a lot to ask. Moonscript is similar to Coffeescript so fellow JavaScript devs might already be familiar with the language and just will need to learn the quirks of Lua/Moonscript.
Use a for loop.
Are you interested in the differences too, or only if they are different (true/false)?
let me know if you can't open that link https://bitbucket.org/snippets/marcotrosi/8xKG/lua-printtable
Thank you so much!
 function TableComp(a,b) --algorithm is O(n log n), due to table growth. if #a ~= #b then return false end -- early out local t1,t2 = {}, {} -- temp tables for k,v in pairs(a) do -- copy all values into keys for constant time lookups t1[k] = (t1[k] or 0) + 1 -- make sure we track how many times we see each value. end for k,v in pairs(b) do t2[k] = (t2[k] or 0) + 1 end for k,v in pairs(t1) do -- go over every element if v ~= t2[k] then return false end -- if the number of times that element was seen don't match... end return true end This is designed to check if two tables have the same values, regardless of order. This does not work for tables that are like, t = {asd=123, wasd=456}. You can just use the last 4 lines of my code to check tables in that scenario.
wow thanks!
Put the library in the project folder
Here is the link. Let me know in case you can't open it. I ran many test cases, so I hope it works fine. https://bitbucket.org/snippets/marcotrosi/XnyRj/lua-isequal this function compares also the other datatypes (string,number,boolean,nil) Regarding performance I have no idea if this function is well written, but I will only change it if I have the feeling it is too slow.
Read the documentation for the library you're using to figure out what each of the calls like getCurrentUser() and getMessages() do behind the scenes. I would suspect that both of those functions actually send an HTTP request to the server and wait for a response to come back before they return. sendMessage() would definitely do that as well. In addition, they might be rate-limited (deliberately slowed down to counteract spam/DoS)
Re-read what I wrote. I didn't say anything about *what* it returns, only *where* it gets the information from.
Also no, because on an already established API it works perfectly fine. 
where does the array come from? dick magic?
it worked! thank you very much
Re-read what he wrote. Hint: [He's absolutely right with his initial suspicion.](https://github.com/VideahGams/discord.lua/blob/master/discord/client.lua#L170) Even more hint: `getMessages` sends a http request and seems to wait for an answer before it returns. I haven't looked but I guess `getCurrentUser` does the same. You send multiple http requests and wait for their answers each iteration, it's no wonder that takes some time. You should think about implementing some caching.
your data should be something like d={A,B,C,D,...,Z,0,1,2,3,..,9} Init the random number generator with math.randomseed(). Use at least the passed seconds counting from 1.1.1970 not from program start. and then you can use math.random(#d), #d is the length of your data table. 
You can use [string.char](http://www.lua.org/manual/5.2/manual.html#pdf-string.char), or [utf8.char](http://www.lua.org/manual/5.3/manual.html#pdf-utf8.char), recommended if you're on 5.3+. Both functions return a character representative of their number based on either the [ASCII alphabet](http://www.asciitable.com/) (afaik) or the [UTF-8 character sequence](http://unicode-table.com/en/), respectively. When multiple numbers are given, it returns a string with each specific character. print(string.char(104, 101, 108, 108, 111)) --&gt; hello For your situation, you'd wanna do something like this: chars = {} tagLength = 8 -- this number is how many characters you want your nametag to be -- create a table for each char number for i=1, tagLength do chars[i] = math.random(97, 122) -- generate a random number for a lowercase character end -- for example, we might end up with something like { 98, 108, 121, ... } for chars -- unpack basically turns { ... } into ... for array tables -- e.g: func(unpack({1, 2, 3})) turns into func(1, 2, 3) -- it's convenient here! name = string.char(unpack(chars)) print(name)
One way to do multitasking with lua is an event loop approach à la node.js I actually implemented one some time ago for the version of Lua in the Minecraft mod ComputerCraft. It works even better than in JS IMO because Lua has coroutines, which makes it possible to make asynchronous actions have synchronous semantics. Example code if using my library: loop = eventloop:create() loop:run(function () loop:timeout(1, function () print('After 1 second') end) loop:interval(2, function () print('Every 2 seconds') end) loop:on('char', 's', function () loop:defer(1) print('You pressed s one second ago') end) loop:on('char', 't', function () loop:terminate() end) end) 
The code was an example of how i encounter the bug, i posted the source of the api so you could tell me why its breaking.
Why "doesn't seem right at all"? It requests the stuff from server during each iteration. It works exactly as expected. If you ran it on slower internet connection, it would run even slower.
&gt; Why "doesn't seem right at all"? It requests the stuff from server during each iteration. It works exactly as expected. If you ran it on slower internet connection, it would run even slower. No, it doesnt. Its being put into a table stored locally.
The function request.send() gets called for EVERY ITERATION of your for loop. Do you agree with this statement or not? (Edited for better clarity)
Do you know what an API is?
Hello lua community, This is the first rock that I have made, binding lua to hiredis with a C module, with additional support for multiple concurrent connections. I know that there are several other redis binding packages out there - and I have gone out of my way to write this as efficiently with emphasis on performance. It would be great to get an honest feedback on the code and design. Thanks in advance to whomever finds this interesting even a bit!
There is also LuaMultiThreaded by madmaxoft which allows you to create multiple threads in a single LuaState: https://github.com/madmaxoft/LuaMultiThreaded Sadly it isn't a library but an actual program where you give the files to load as a parameter.
To be frank, you sound like a beginner who wants to take on a graduate-level project. Try a beginner more suited to a beginner.
Are you familiar with Torch? An AI framework in Lua. Look it up, it may help with the machine learning bits if you go into that.
Sounds challenging mate! The best way to learn (in my book) is to look up things yourself. You'll find a heap of tutorials on the [lua-users wiki](http://lua-users.org/wiki/TutorialDirectory), including one on the [string library](http://lua-users.org/wiki/StringLibraryTutorial). More useful links to the right. --&gt;
For what are you planning to use this? Capturing substrings and making many ifs won't cut it?
I haven't used redis myself yet, but I know many people who do! This looks awesome! :D
The [official docs](http://www.hammerspoon.org/docs/hs.application.html#find) on that say it returns one or multiple hs.application objects. If you think you should be getting multiples back, remember Lua can have multiple return values `foo, bar, baz = functionWithMultipleReturnObjs()` - which the `hs.application.find` uses. Once you get reference to the all the `hs.application` objects - you can manipulate each one with the [methods here](http://www.hammerspoon.org/docs/hs.application.html#activate).
!! I'm new to Lua so I didn't know that was possible. Cool! But what's the best way to handle the fact that this function may return anywhere from 1 to a dozen objects. Can I set it to a "list" (Lua doesn't really have a list I read but rather a numerated table)? Just tried `manyObjects = {functionWithMultipleReturnObjs()}` and this is exactly what I was looking for! Is this the best way to handle a arbitrary number of return values from a function?
[removed]
Maybe you could try making a game as a beginner project. LOVE is a really good framework for that. Try making something simple, like pong. 
can you maybe explain a little bit more? things like - whats the purpose? ( I don't know what tap() does, sorry) - why don't you extend the usleep calls to reach 90 secs? - what triggers the script if not cron? just some background info so we can help better. thanks EDIT: I quickly checked what autotouch is. That explains it a bit. EDIT2: so if I guess correctly, this is for a mobile device, a tap() simulates a touch on the screen, and between the touches some time is passing, in average 10000 usec (0.01sec -&gt; not human, right?). Correct so far? I don't understand how this script is running 60secs.
This is a script for a mobile game to refresh every couple of minutes and yeah you're right on the money. I was told to use os.time instead but I am still pretty lost lol (I am very new to this)
How new? some lua or programming experience? do you know what loops are?
so the tapping is in the first 90seconds (1.5minutes) and for 3.5 minutes you just wanna wait. and this makes 5 minutes and then you want to start again with 90 seconds tapping. is this correct? How much time between the taps? 0.01 seconds is that what you want?
Yes that is basically it :) 
If I get you right then if the slider fully cranked up to 100 then you add 100 minutes to your time. If it is 0 then you subtract 100 minutes, and on 50 as you said nothing happens. So the slider which goes from 0 to 100 actually will go from -100 to +100 minutes. (100 minutes = 1 hour and 40 minutes) local minutes = ((sliderValue - 50) * 2) for your currentDate.wday check you can write ((currentDate.wday &gt;= 2) and ((currentDate.wday &lt;= 6)) EDIT: do you really want to have that string.format() call in your "if" statement? EDIT2: function tempFunc() local currentDate = os.date("*t"); local startSource = fibaro:getSourceTrigger() local sliderValue = fibaro:getGlobalValue("MorningTime") local minutes = ((sliderValue - 50)x2) local CurrentTime = string.format("%02d:%02d", currentDate.hour, currentDate.min) if ((fibaro:getGlobalValue("MorningScene") == "On" and ((currentDate.wday &gt;= 2 or currentDate.wday &lt;= 6)) and CurrentTime == "08:05")) then fibaro:call(5, "setArmed", "1"); end setTimeout(tempFunc, 60*1000) end if (sourceTrigger["type"] == "autostart") then tempFunc() else local currentDate = os.date("*t"); local startSource = fibaro:getSourceTrigger() if (fibaro:getGlobalValue("MorningScene") == "On" and ((currentDate.wday &gt;= 2) and (currentDate.wday &lt;= 6))) then fibaro:call(5, "setArmed", "1") end end attention: reddit changes where minutes gets filled the star to an x Consider to replace the string comparison CurrentTime == "08:05", with just a number comparison. ... and (currentDate.hour == 8) and (currentDate.min == 5) and ...
Thank you for your changes, it is looking better and I changed more bugs I found. Obviously you can't just take the minutes variable from the currentTime so please forgive my ignorance and any other assistance would be much appreciated? local startSource = fibaro:getSourceTrigger(); fibaro:debug("Starting scene..") --local windowRGBW = 2 --local cabinetRGBW = 3 --local livingLightID = 4 --local bedLightID = 5 function tempFunc() local currentDate = os.date("*t"); local startSource = fibaro:getSourceTrigger() --fibaro:debug("Current Date is.." .. currentDate) local sliderValue = fibaro:getGlobalValue("morningTime") fibaro:debug(sliderValue) local minutes = ((sliderValue - 50) * 120) local CurrentTime = string.format("%02d", currentDate.hour) .. ":" .. string.format("%02d", currentDate.min) fibaro:debug("Current time is.." .. CurrentTime) if ((fibaro:getGlobalValue("MorningScene") == "On" and ((currentDate.wday &gt;= 2 or currentDate.wday &lt;= 6)) and CurrentTime == "13.00")) then fibaro:debug("Turning on light..") fibaro:call(19, 'turnOn') end setTimeout(tempFunc, 60*1000) end if (startSource["type"] == "autostart") then tempFunc() else local currentDate = os.date("*t") local startSource = fibaro:getSourceTrigger() if (fibaro:getGlobalValue("MorningScene") == "On" and ((currentDate.wday &gt;= 2) and (currentDate.wday &lt;= 6))) or (startSource["type"] == "other") then fibaro:call(5, "setArmed", "1") end end
What is the question? How can I help? Didn't the line local CurrentTime = string.format("%02d:%02d", currentDate.hour, currentDate.min) work? Because in your version you have 2 string.format() calls and 2 concatinations. I have one string.format() call and it does the same. Furthermore is spotted this here CurrentTime == "13.00" You probably mean "13:00" but I still recommend using the numbers for comparison. Is there a reason you use the string?
You can use wxAuiNotebook or wxNotebook if you need tabs; something like this generates two tabs with Scintilla editor in each tab: require "wx" local frame = wx.wxFrame(wx.NULL, wx.wxID_ANY, "Demo", wx.wxDefaultPosition, wx.wxSize(450, 450), wx.wxDEFAULT_FRAME_STYLE) local notebook = wxaui.wxAuiNotebook(frame, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxDefaultSize, wxaui.wxAUI_NB_DEFAULT_STYLE) local e1 = wxstc.wxStyledTextCtrl(frame, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxBORDER_NONE) local e2 = wxstc.wxStyledTextCtrl(frame, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxBORDER_NONE) notebook:AddPage(e1, "Page 1", true) notebook:AddPage(e2, "Page 2", true) frame:Show(true) wx.wxGetApp():MainLoop() For buttons you can use wxButton and you'll likely need wxSizer to position them.
There exists a module, which will handle this for you. https://github.com/daurnimator/luatz
[removed]
The Lua wiki has a [tutorial about the IO library](http://lua-users.org/wiki/IoLibraryTutorial). Basically, you have to open the file and read the data like this: local your_file = io.open("the_filename.txt", "r") local input_text = your_file:read() your_file:close() -- optional, but recommended After that, you do whatever you need with the input text and write it back to the file: local output_file = io.open("output_file.txt", "w") output_file:write(your_text) If you actually need the numbers of the file as actual numbers (integer type instead of string type), you'll need to combine [string.match](http://www.lua.org/manual/5.3/manual.html#pdf-string.gmatch) and [tonumber](http://www.lua.org/manual/5.3/manual.html#pdf-tonumber). I hope this helps. Feel free to ask about anything you don't understand.
Hi, I am the creator of [middleclass](https://github.com/kikito/middleclass). Here's a little-known fact about the library: Since it supports [mix-ins](https://github.com/kikito/middleclass/wiki/Mixins), you can use (almost) the same syntax without the Class:name() in middleclass: local class = require 'middleclass' local Duck = class('Duck'):include { initialize = function(self) self.quacks = 0 end, quack = function(self) self.quacks = self.quacks + 1 print('Quack! Total: ' .. self.quacks .. ' time(s).') end } local duffy = Duck() duffy:quack() 
Awesome! Don't answer the question then tell me to do something with giving me a place to start! I've tried and this is where I'm starting. Don't comment on people's questions unless you HAVE A LEGIT ANSWER.
Yeah, I know it's big... But nothing else worked for me so I thought i'd give a try. Thanks for at least giving me a place to start (unlike anyone else). :)
Yeah! Thanks, I'll see what I can get from it! 
I tried and it didn't work. I'm just not set for game programming. But I'm understanding this stuff. :/ Thanks anyway! :)
[removed]
[removed]
[removed]
[removed]
This comes from OOP (object oriented programming). self represents the object of which the values MoveSpeed, DragSpeed and MoveStrengths are part of. In Lua these objects are realized with tables like everything in Lua. http://www.teachitza.com/delphi/object.gif http://www.derekyu.com/tigs/forums/tutorials/gmtut/gmtut-008.png You can fill such an object with variables and also functions. omg it is so hard to explain that without mentioning classes, instances, meta-tables, ... Did this help in any way? Let me know if not, I'll try again.
You know, just to really make sure I don't just THINK I understand: function SomeFunction(ArbitraryArgument) self.Simple = 10 self.CoolFactor = DiedGoBoom This would add a variable/property called Simple to SomeFunction that is probably used in some other script file I need to hunt down, while CoolFactor is a property that is using a predetermined graphic when called. Correct?
Haha, thanks, I'll need it.
linux/mac: `os.execute("afplay foo.mp3; command2 params")`
I've read the documentation and looked at various samples before I posted originally. I appreciate the responses, but I think I just need to spend more time with the files I am working with.
http://lua-users.org/wiki/GraphicalUserInterfaceToolkits
Hi again, sorry I was yesterday evening (Italy) suddenly without internet and could not reply anymore. I read the other answers and your reply on that. And now I have the feeling that you are thinking of something, like creating your own explanation for the code, but going probably in the wrong direction. Maybe you just learn first Lua tables and OOP in Lua and then you will look at the code from a different point of view, if you know what I mean. I am thinking of a concept for P2P screen sharing support for Lua beginners. Or maybe live group tutorials. I don't know yet what to use. Teamviewer, GoogleHangouts, JoinMe, ...
My problems are from trying to mess with another persons script, not my own. Not knowing where everything is defined/declared makes reading/understanding or even using the functions hard.
I am not sure the exact function name or exact syntax (away from cpu), but the whole script file contains something like this: MakeClass "PlayerVehicle", "Vehicle" Values I don't need Function PlayerShip:Vehicle(aCInfo) = Self.MoveSpeed Self.Mass Self.Property This Function dpes contain a few if, elseif loops, but they dont pertain to the self.movespeed I need. And I am trying to call the movespeed in a seperate file, in a separate function. My punctuation errors stem from being on a phone. EDIT: aCInfo is not defined in the script files. And I am only kinda sure that was an argument required. I know you can pass functions, even entire classes in C#, I bet Lua allows passing multiple tables, functions, refrigerators, and variables into theirs. Yes, refrigerators. Lua doesn't care what it is as long as it can be passed.
I understand
Also, being a total noob to Lua doesn't help.
EGMakeClass( "EGShipPlayer", "EGVehicle" ) EGShipPlayer.MaxHealth = 10 0 EGShipPlayer.Path = "Ship1.ShipOpen.egm" EGShipPlayer.InteriorPath = "DefaultMap.egi" EGShipPlayer.DeathParticles = "ShipExplosionContinuous" EGShipPlayer.RotationSpeed = 3 EGShipPlayer.HUDThickness = .2 EGShipPlayer.HUDWidth = .5 EGShipPlayer.SkillLevel = 1 EGShipPlayer.BehviorTypes = { Player = EGBehaviorPlayer, Combat = EGBehaviorCombat, Investigate = EGBehaviorInvestigate, Travel = EGBehaviorTravel, Follow = EGBehaviorFollow, } EGShipPlayer.VehiclePhysics = { Basis = "Ship1.ShipOpen.egm", ShapeType = "Mesh", Mass = 5000, LinearDamping = 0.0, AngularDamping = 0.00, Friction = .2, RollingFriction = 0.0, Restitution = 0.8, MaxLinearSpeed = 10000, MaxAngularSpeed = 500, } EGShipPlayer.GunBarrels = { EGEnum("GunBarrelLeft"), EGEnum( "GunBarrelRight" ) } EGShipPlayer.MissileBarrel = { EGEnum("MissileBarrel") } EGShipPlayer.GetBehaviorFunc = EGGetNextBehav \\iorPlayer EGShipPlayer.LimnalSpacewarp = 0 EGShipPlayer.LimnalTimer = 0 EGShipPlayer.LimnalStartTime = 1.8 ------------------------------------------------------------------------------- function EGShipPlayer:Init( aCInfo ) self.Weapon = EGWeaponBlaster end ------------------------------------------------------------------------------- function EGShipPlayer:GetAllowedGear( aTargetGear ) if( aTargetGear &gt; 4 ) then return 4 elseif( aTargetGear == 4 ) then local diaconiumCount = gGame:GetPlayerInfo():GetInventoryCount( "Items.Diaconium" ) if( not gGame:GetShouldTellStory() ) then diaconiumCount = math.max( 1, diaconiumCount ) end if( not DebuggingGame and diaconiumCount == 0 ) then return 3 end if( not self:CheckLimnalViability() ) then self:CancelLimnalDrive( "GetAllowedGear" ) return 3 end elseif( aTargetGear == 3 ) then if( not DebuggingGame and gGame:GetProgress():IsBeforeStage( "CruiseEngineAcquired" ) ) then return 2 end elseif( aTargetGear == 2 ) then return 2 elseif( aTargetGear &lt;= 1 ) then return 1 end return aTargetGear end ------------------------------------------------------------------------------- function EGShipPlayer:UpdateGearSettings() self.GravityLook = 0 local currentPlanet = self:GetCurrentPlanet() local toPlanet = self:GetLocalVectorTo( currentPlanet ) local planetDistance = toPlanet:Length() local planetForwardFactor = toPlanet:Dot( EGVector.FOREWARD ) local surfaceDistance = self:GetPlanetSurfaceDistance() local atmosphereDistance = self:GetPlanetAtmosphereDistance() local closestActor = self:GetClosestVehicle() local actorDistance = closestActor and closestActor:GetDistance( self ) or math.huge local altitudeRatio = self.AltitudeRatio local atmosphereFriction = currentPlanet.AtmosphereFriction local progress = gGame:GetProgress() local playerInfo = gGame:GetPlayerInfo() --[[ if( self.Gear == 4 and not self:CheckLimnalViability() ) then self:CancelLimnalDrive() end --]] --if( surfaceDistance &gt; actorDistance ) then surfaceDistance = actorDistance end --if( atmosphereDistance &gt; actorDistance ) then atmosphereDistance = actorDistance end self.Gear = self:GetAllowedGear( self.Gear ) self.GravityMult = 1 if( self.Gear == 1 ) then self.MoveSpeed = 100 self.DragSpeed = 1500 self.Acceleration = .66 self.Deceleration = .9 self.MoveStrengths = EGVector( .3, .3, 1 ) self.RotationHardness = 1 self.RotationFriction = EGAnalogue( altitudeRatio, 0.5, 1.0, atmosphereFriction, 0 ) self.RelativeTimeTarget = 1 elseif( self.Gear == 2 ) then self.MoveSpeed = 500 self.DragSpeed = 1500 self.Acceleration = 2 self.Deceleration = .75 self.MoveStrengths = EGVector( .3, .6, .3 ) self.RotationHardness = 1.75 self.RotationFriction = EGAnalogue( altitudeRatio, 0.5, 1.0, atmosphereFriction, 0 ) self.RelativeTimeTarget = 1 if( DebugFastShip ) then self.MoveSpeed = 5000 self.Acceleration = 1 self.MoveStrengths = EGVector( 1, 1, 1 ) end elseif( self.Gear == 3 ) then self.MoveSpeed = EGAnalogue( surfaceDistance, 0, 20000, 5000, 10000 ) self.MoveSpeed = EGAnalogue( actorDistance, 10000, 200000, 5000, self.MoveSpeed ) self.DragSpeed = self.MoveSpeed * 1.25 self.Acceleration = .5 self.Deceleration = 0 self.MoveStrengths = EGVector( .3, .6, .3 ) self.RotationHardness = 1.5 self.RotationFriction = EGAnalogue( altitudeRatio, 0.5, 1.0, atmosphereFriction, 0 ) self.RelativeTimeTarget = 1 --default. revised later local limnalExpoArrival = currentPlanet.CruiseExponent or currentPlanet.CruiseExponentArrival local limnalExponentDeparture = currentPlanet.CruiseExponent or currentPlanet.CruiseExponentDeparture local limnalMultArrival = currentPlanet.CruiseMult or currentPlanet.CruiseMultArrival local limnalMultDeparture = currentPlanet.CruiseMult or currentPlanet.CruiseMultDeparture local planetCruiseMax = currentPlanet.CruiseMax --CruiseExponent = 1.2, --CruiseMult = 2, planetLimnalExponent = EGAnalogue( planetForwardFactor, -1,.9, limnalExponentDeparture, limnalExpoArrival ) planetLimnalMult = EGAnalogue( planetForwardFactor, -1, .9, limnalMultDeparture, limnalMultArrival ) local cruiseRadius = currentPlanet.Radius + currentPlanet.AtmosphereAltitude if( planetDistance - cruiseRadius &gt; 0 ) then self.RelativeTimeTarget = math.min( planetCruiseMax, planetLimnalMult * ( planetDistance / cruiseRadius ) ^ planetLimnalExponent ) end self.RelativeTimeTarget = EGAnalogue( actorDistance, 10000, 100000, 1, self.RelativeTimeTarget ) if( DebugFastShip ) then self.MoveSpeed = 40000 self.Acceleration = 2 self.MoveStrengths = EGVector( 1, 1, 1 ) end elseif( self.Gear == 4 ) then local limnalActivation = self.LimnalActivation self.MoveSpeed = 30000 self.DragSpeed = math.huge self.Acceleration = 1 self.Deceleration = 0 self.MoveStrengths = EGVector( 0, 0, 0 ) self.GravityLook = EGAnalogue( limnalActivation, 0, 1, 0, 0.05 ) if( limnalActivation &gt;= 1 and atmosphereDistance &gt; 0 ) then --self.GravityLook = 200 --self.RelativeTimeTarget = EGAnalogue( atmosphereDistance, 0, 1000 * 1000 * 1000, 10, 100000 ) self.RelativeTimeTarget = EGAnalogue( atmosphereDistance, 0, 300 * 1000 * 1000, 100, 20000 ) end self.RotationHardness = .8 self.RotationFriction = 2 end EGVehicle.UpdateGearSettings( self ) ---[[ if( self.Gear == 4 and not self:CheckLimnalViability() ) then self:CancelLimnalDrive( "UpdateGearSettings" ) end --]] --]] --DebugText( "altitudeRatio", tostring(altitudeRatio) ) --DebugText( "atmosphereFriction", tostring(atmosphereFriction) ) --DebugText( "surfaceDistance", tostring(surfaceDistance) ) --DebugText( "Planet", currentPlanet.Name ) end local backwardsDir = EGVector(0,-1,0) local enginePos = EGVector(0,-40,0) local coastLeftPos = EGVector(-10,0,-8) local coastRightPos = EGVector( 10,0,-8) local dockB1Pos = EGVector(-20,-8,-8) local dockB2Pos = EGVector( 20,-8,-8) local dockD1Pos = EGVector(-12,0,-10) local dockD2Pos = EGVector( 12,0,-10) local dockD3Pos = EGVector( 0,20,-10) local dockD1Dir = EGVector(-.1,-.1,-1) local dockD2Dir = EGVector( .1,-.1,-1) local dockD3Dir = EGVector( 0,.25,-1) local dockU1Pos = EGVector(-12, 0, 0) local dockU2Pos = EGVector( 12, 0, 0) local dockU3Pos = EGVector( 0,20, 0) local dockU1Dir = EGVector(-.1,-.1, 1) local dockU2Dir = EGVector( .1,-.1, 1) local dockU3Dir = EGVector( 0,.25, 1) local dockR1Pos = EGVector( 20, 12, -8 ) local dockR2Pos = EGVector( 20, -5, -8 ) local dockR1Dir = EGVector( 1,.4, .1 ) local dockR2Dir = EGVector( 1,-.4, .1 ) local dockL1Pos = EGVector( -20, 12, -8 ) local dockL2Pos = EGVector( -20, -5, -8 ) local dockL1Dir = EGVector( -1,.4, .1 ) local dockL2Dir = EGVector( -1,-.4, .1 ) local dockF1Pos = EGVector( -15, 35, -8 ) local dockF2Pos = EGVector( 15, 35, -8 ) local dockF1Dir = EGVector( .0, 1, .05 ) local dockF2Dir = EGVector( .0, 1, .05 )
welcome. and her the most important one which I forgot. sorry. http://lua-users.org/wiki/TutorialDirectory
Neat, but I view this more as a parlor trick than a useful mechanism. I'll allow that DSLs are probably the prime candidate for their use, so the article gets an upvote for pointing that out. But besides that I'm not sure how it's any better than typical environment situation (`_ENV`)
Updated! Including openresty 1.9.7.2 now! :)
No, I don't do much of anything with CSS and that stuff.
I'm not sure how this could be a problem. Still, I'll try and tackle these beginning with `pairs()`. `pairs()` is a function that returns two things: a function ("iterator") and the table it is operating on. For example, execute the following code in your Lua toplevel: t = { 5, 4, 3, 2, 1 } i, u = pairs(t) print(t, i, u) You'll notice that `i` is a function and that `u` is the table `t`. Now execute the following code: k,v = i(u) print(k,v) You should get back something like "1 5". The iterator `i` returns the "next" key and value pair in the table you pass it for some value of "next". The trick is that the for keyword is aware of the protocol involved and can thus repeatedly call the iterator function with the key it last got to get the "next" key. Like this: k, v = i(u, k) print(k,v) Repeat those two lines a few times and you'll see that when you run out of keys, the iterator will return a pair of `nil` values. That marks the end of the iteration and the for keyword recognizes this state and stops looping. So what's really happening when you write this code... t = { 5, 4, 3, 2, 1 } for k,v in pairs(t) do print(k,v) end ...is this: t = { 5, 4, 3, 2, 1 } i, u = pairs(t) k,v = i(u) while k do print(k,v) k, v = i(u, k) end (You can test this in your toplevel to ensure they generate the same output.) So why such a roundabout way of doing things? Well, it makes the `for ... in ...` style of loop general-purpose. We have `pairs()` for K/V-style tables where any key can be iterated, but the order is not guaranteed. We have `ipairs()` for array-style tables in which only incremental integer keys starting at 1 are supported, but the order is guaranteed. Nothing, however, would stop you from making a simple, say, `ipairsrev()` iterator to do reverse iteration. Or `ipairsrand()` for a random walk over the integer keys. Or any other way you may have of iterating over a table. Indeed you could easily extend the iterator concept through creative use of tables, metatables, and type-specific iteration functions to any data type you can express in Lua. You have a red/black tree implemented in Lua? It's a simple matter to extend it with a stateless iterator to make it plug-in compatible with `for ... in ...`. You are, in effect, extending the language's keywords without touching the actual source of the language.
I made a little LÖVE tutorial for people in your level. It also includes some basic explanations about Lua. Start here: https://github.com/kikito/love-tile-tutorial/wiki/0a-basic-concepts . It starts with installation, etc. The next page of the wiki deals with tables. And the next one, which is the one that interests you, talks about for loops. But may recommendation is that you don't skip to that page; start on the first one and read the whole thing.
Let us know if you get into sticky situations or need higher level concepts explained. As for learning - Programming In Lua is my favorite once you understand the basics. It's a very dry Lua manual that I still refer to from time-to-time.
uh... no it doesn't? There's no `if k,v in pairs(table)`, there is only `for ... in ... do`.
I'd love to nominate my own project - but I'm not sure if it qualifies! https://github.com/lumail/lumail2/ * Core of the project is C++ * Much of the C++ is exported to Lua. * The main configuration and action of the application is defined in one huge [config-file](https://github.com/lumail/lumail2/blob/master/lumail2.lua). 
Lua seems to be a bit easier than Java, iMO.
Simpler - You can learn the whole API of Lua fairly easily.
[Kikito](https://github.com/kikito) makes some nice libs for Love2D. (a Lua game engine) You could try looking at them if you want something small and easy to read.
Alright. Thanks a ton for the help. I'll contact you or someone else on these forums if I need any more assistance. Cheers.
Mine as well. If you're around, thanks kikito. I keep returning to your libs and tutorials.
The simplest way would probably be to write a c program that statically links to the lua interpreter libraries and evaluates the script in the lua context
&gt;Is it possible to create a normal executable with LuaJIT? Nope. It's Lua[JIT](https://en.wikipedia.org/wiki/Just-in-time_compilation), not Lua[AOT](https://en.wikipedia.org/wiki/Ahead-of-time_compilation).
thanks
ok I have one funny solution I converted the Lua interpreter into a string. muahahaha. excellent. base64 --input=lua-5.2 --output=lua.txt Then I took the string and put it in a shell script foo.sh #/bin/bash LUA='here comes the Lua interpreter string; too long to paste here' SCRIPT=' print("hello world") os.exit(0) ' # write the lua interpreter into a file echo $LUA &gt; b # write the script into a file echo $SCRIPT &gt; s # convert the lua string back into binary base64 -D --input=b --output=l # give exec permission chmod 750 l # execute the script with the lua interpreter ./l s # remove all created files rm b l s Then you give execute permissions to your shell script. chmod 750 foo.sh and execute it ./foo.sh it works here my foo.sh (OSX) https://dl.dropboxusercontent.com/u/8511632/websites/tumblr/lua/foo.sh 
and again thank you very much for enlightening me
Thanks for the link and the wiki! It helped me finally understand it.
Apocalyptic! That's a neat trick.
Can't you also send a second argument to ipairs which specifies where to begin?
~~Looks to me that rgb is not stored as a string or number, probably a table. You'll need to print rgb[1] etc.~~ Edit: the issue is the use of local. Don't use local outside of functions in AutoTouch.
Stop guessing, man... What does the use of local have to do with it? EDIT: it seems that in this case it can - it probably means that the code is somehow "evaled" and locals just disappear when the current snippet is out of scope.
http://www.lua.org/manual/5.3/manual.html#pdf-ipairs Nope.
could it be the Lua version? Integers are implemented since 5.3. Does this lib need Lua 5.3? I have absolutely no idea how lua 5.1 or 5.2 would behave with a 5.3 lib.
if this is true then can /u/kwoosun paste some more original lines please? Because I don't understand how this can be.
Was the code executed as one line or as multiple lines? If use of local screws up things it would mean that there's an dostring() on each of the lines. If it's executed as a single line then it should be fine.
It's not kwoosun's fault, it's an issue with AutoTouch.
The issue is at AutoTouch's end.
/u/kwoosun did you check the Lua version?
This is possibly a bad suggestion but looking at the documentation is honestly the most useful, also I and a lot of other people learnt using Love2D, so there's an option.
New to programming. 
In front of a computer /rimshot
That would help sure but what I was referring to was the official Lua documentation here - http://lua-users.org/files/wiki_insecure/users/thomasl/luarefv51single.pdf
Some have suggested learning using Löve2D. While that is how I learned, and I can't heap enough praise on that framework, if you're primarily interested in learning GLua I would focus on learning straight Lua first, rather than learning the Löve functions at the same time (though if you plan on doing standalone games at some point it's good to learn). You say you are a beginning programmer, so I would recommend that you work through the first 10 chapters of *Programming in Lua*. You can go beyond that if you want, but it might be overwhelming if you're just starting out. Be warned: If you're just starting out you may find GLua a bit tricky once you go beyond very basic stuff. It has its own particularities, and you will have to get used to the client/server model which, while not as intimidating as it sounds, requires a different way of thinking about things that might be a little overwhelming. Not trying to discourage you, I just don't want you to kill your enthusiasm by trying to take on too much at once. I would suggest getting comfortable working with pure Lua before attempting to apply your newfound knowledge in Gmod. Edit: formatting. 
Lua:GMod and Lua are the same, just Lua:GMod has some extra functions for interfacing with the game.
Thanks!
This is also a nice tutorial : www.tutorialspoint.com/lua
I'm not sure if I understand what you want, but I'll give it a try anyway. If you have a Node MCU working as a websocket server and you want to connect to it using Lua, you can use this [library](https://github.com/socket2810/luaws) I made. It's a single source file that only requires [easywsclient](https://github.com/dhbaird/easywsclient) - and Lua, obviously. Keep in mind it's not thoroughly tested, but it did just fine for my needs at the time. 
Hi, first of all thanks a lot for your response. Let me try to explain what I'm looking for. I have Node MCU which I want to be a websocket client and I have remote websocket server. All I want is to open a connection from Node MCU -&gt; send "Hello world" -&gt; close connection. I've done it with TCP/IP sockets and HTTP so hoped to do the same with websockets. But as I wrote I'm new to Lua (and actually to websockets as well).
Ok, now that I understand what you're trying to do I can propose another solution. First, you will need to upload this library's [files](https://github.com/lipp/lua-websockets/tree/master/src) (websocket support) and [this](https://github.com/davidm/lua-bit-numberlua/tree/master/lmod) (some bitwise operations) to your Node MCU. Now we need to make lipp's library work with Node MCU *[net.socket](http://www.nodemcu.com/docs/net-socket-module/)*. However, Node MCU's socket's IO is asynchronous, while luasocket (used by the library aforementioned) is synchronous. To solve that, I've made a wrapper using Lua's coroutines, [wsclient.lua](http://pastebin.com/fCTP8cD9). And here is a sample code: local WSClient = require('wsclient') function on_connect(success, err) end function on_send(sent) end function on_receive(message, opcode, was_clean, code, reason) end function on_close(was_clean, code, reason) end local ws_client = WSClient(on_connect, on_send, on_receive, on_close) ws_client:connect('ws://127.0.0.1:8080', 'echo') ws_client:send('hello world') ws_client:close() 
Yes, that does look interesting. Thanks!
Oh. Pause can just be a function, no need to make it a keyword.
Best answer ever.
Yeah, I might share it depending how much I add (it'd be easier if the devs just put this extra stuff in or made it easy to add extentions). I just wanna add a sleep/pause keyword.
I know, but id rather it be a keyword implemented into the build so I never need to retype anything more than two or three words.
Agreed! Changing a language because you can or want to is not suggested. Lua thrives on portability. If you now make others use YOUR version of Lua, then you limit the ability to put your code in things like LuaRocks or github as a simple clone and run.
At a guess, I'd say it happens when the questions are things easily answered by Google or the sidebar ("how do I learn lua?"), or things that aren't related to Lua itself ("I have a problem with autotouch / Garry's mod / WoW")
I guess the best point is in your last sentence. I'd say, why not just point these people in the right direction, but if they get agitated, I can understand the frustration. Thanks for the answer.
Does it seem to you that /r/lua attracts more posts like that than other programming subs? Because it does to me and it's been bothering me for a while.
Look at other suggestions - try not to modify the core for anything you want to share or run elsewhere. Lazy programming is amazing to save on extra work/copy-paste - only if it doesn't make for more work for yourself or others later.
I've replied to a couple of them with [How to Ask Questions the Smart Way](http://www.catb.org/esr/faqs/smart-questions.html). Maybe link to that on the sidebar, or something? Although it seems like a lot of the posters aren't reading the sidebar. I think it's that the sub has two different purposes: there are people who want a place to talk about Lua, and people who want a place to get help with things that (coincidentally) use Lua. There are more of the latter than the former, I guess, or the latter have more to say.
Maybe a redesign with a top bar for quick things will squelch the silly questions. The sub might also not attract the people in the IRC/Mailing-lists... That is where a portion of the Lua community is. Not sure how to bring them over here. Also, /r/Lua may not be attractive to users who would rather debate, discuss, and learn C/C++/other-lua-host-environment-here.
This issue is not specific to /r/Lua and not at all new. I have observed questions generally getting downvoted on Reddit for years, in many subs. I don't know why, either. In any case, the stickied post is a good idea. An explanation of what we expect an up/downvote to *mean* would also be something to display prominently (e.g., don't downvote to express disagreement) -- although an awful lot of people will ignore such guidelines.
Yeah, I like the top bar / stickied post idea. I think the real solution isn't decrease the number of question posts but to increase the number of interesting posts.
Between GMod and AutoTouch, we get a *lot* of beginners here. 
I am not particularly annoyed in having very beginner questions in the sub and I don't downvote them. But I agree maybe we need a better way on handling this!
What you should ask yourself is, "Why can't people just ignore something that irritates them?" More and more, you're seeing people get pissed about someone's inexperience or inadequate knowledge level concerning things they are more proficient with. Instead of ignoring those things, though, they instead resort to petty "down votes" and other crap, like berating those they view as being above. It's like this in everything anymore. Same BS clique crap, different day.
One small addition, good part of those questions are already "answered" on the right panel of /r/lua .
Yeah no. I don't mind if someone asks a question about something they don't know. That's fine. But when the fifteenth person asks "how do I learn LUA?" without looking at the sidebar, Google, or the answers given to the previous fourteen, then I'm going to downvote it. If you're not going to put forth the slightest bit of effort solving your own problem why should I want to help you?
Neat! The module is not quite ready for "production", because zsh's internal hash table sometimes loses references (lolwut.jpg), but I can try to get it into the zsh upstream. If this won't work, I'll provide a github link here. 
Stickied post! That would solve many things. Proper title and content: What we expect and where to learn.
Ah, I guess you're one of those types. Have at it.
Most likely permissions... you would need to do `sudo make install` If you don't want to deal with source, install [Homebrew](http://brew.sh/) and then you can just type `brew install lua` if you want the 5.2.x version or `brew install lua51` if you want the 5.1.x version. This will also install [LuaRocks](https://luarocks.org/) - the package manager. Edit: This is the way I install it. In rare cases you will build Lua specifically for certain projects.
This is exactly the type of question which is being talked about in the other thread here. Questions where people posting do not do any leg work themselves. Yes I did downvote your question, because you were very lazy. http://lmgtfy.com/?q=make+install+%27permission+denied%27 https://www.reddit.com/r/lua/comments/441w4k/meta_downvoting_questions/
If os.execute exists something like this should work on Windows: function playSound() os.execute('powershell -c (New-Object Media.SoundPlayer "C:/Windows/Media/notify.wav").PlaySync();') end
Sorry about this. I did try googling this, but I used all the wrong wordings. Please excuse me.
A link would be great, I've been trying to do something similar with a few languages (lua, forth and io) but figuring out the boundary between the shell and the language was kinda messy. I like how you simply put it around a lua context, it makes it alot cleaner.
Because if I don't, I get: https://gyazo.com/334055926ed9690f76bc556026d5dee4 
That kind of attitude tends to attract downvotes.
[name] is to defined whilst calling the function and to be turned into a table, then filled with values. Then later in the code (in main.lua), I want to be able to edit that predefined table by replacing certain values and/or referring to them. Also, (in the createNewBody function) it is supposed to check if the table already exists, if so, it will show an error, though, it does not.
I understand there is no easy way but to upload all the files you've mentioned. I did so but when try to run your sample code receive an error: error loading module 'sync' from file 'sync.lua': not enough memory when I run heap command I get 21888. Any ideas?
Thank you **SO** MUCH! You fixed my problem with your explaining. *props*
That seems to have fixed it, but I don't quite understand... In this piece of code I had to use the square brackets. Why not in the original? function updateBodyDraw(t,prop,val) draw[t][prop]=val end
here you also have no brackets around `draw`, like for `tbl`. here some examples -- table with numerical indices t = {"a", "b"} print(t[2]) -- will print b -- table with string indices t = {foo="a", bar="b"} print(t["bar"]) -- will print b -- OR print(t.bar) -- which is the same as above and works only for string indices The brackets are for accessing the content (an element) of a table. For table definition (filling) there are two ways. -- numerical index t={"a", "b"} -- OR t={[1]="a", [2]="b"} -- string index t={foo="a", bar="b"} -- OR t={["foo"]="a", ["bar"]="b"}
I like and probably prefer your answer &gt; give a man a fish and you feed him for a day; teach a man to fish and you feed him for a lifetime
 You're one of *those* types. You know, *those*.
Why don't you actually learn Lua syntax instead of slapping stuff together.
I just found this and I thought I'd share it here.
I must grudgingly admit that after several years with Lua, I've basically switched to LuaJIT, which is Lua 5.1 plus several tweaks and seems to be very stable feature-wise. Previously, I had problems porting Lua my 5.1 code to 5.2...
It has not changed so much or so fast as to give me significant trouble. Maybe it's because I am used to languages which change at a faster rate. All my important code works in all major versions of Lua (5.1, 5.2, 5.3, JIT 2.0 &amp; JIT 2.1). Adapting a library to work with a new version of Lua typically takes very little time. Most of my code does not do "funny things with metatables and scopes" and simply works.
Cool! Is there are reason that you opted to share your fork vs make a pull request on the original repo and get it merged there? The original seems active enough! Edit: I see you made a pull request. My main concern was fragmenting users - people use your repo because they saw it on Reddit then the versions get out of sync (your repo gets out of date, you make more mods to the core, etc).
I haven't had much trouble. As others have said, the changes haven't been hard to tackle. It is much nicer than the ever-changing ECMA standards and support for JavaScript (Which I write daily...).
What?? 
I'm pretty late to this but I learned lua mostly from [ComputerCraft mod](http://www.computercraft.info/);(a Minecraft mod). It was my first programming language and really helped me grasp the fundamentals of things like objects, functions, scope. Lua makes this very easy and way less verbose compared to some languages. 
I've recently thought about doing that. And you actually just completed what I needed to know. Thanks!
Im putting put a job section at http://lua.space soon! this will come handy. You can also ask at the lua mail list or here :) Edit: there http://lua.space/jobs
Ooh ok. I'll try that. Thanks mate.
I was surprised myself with the PR, but since the PR came from a person on the project, I assumed they wanted to pass it on to someone else
Ah, ok. Didn't look to see if it was a PR.
Instead of creating a table and removing the first argument (both being expensive), it would be better to have the second argument be f followed by the vararg.
I am currently looking for a solution to do just that, in order to compile for multiple platforms. Mind sharing what you made? :)
I'll have to dig it up. Haven't used it in years.
This is a low level engine - but a REALLY well done one. Not mine! Games play on Mac/Win/Lin/iOS/HTML5
Wow, that looks really promising!
Very impressive piece of work: compiles out of the box, almost complete docs, shaders and sound look awesome. I look forward to playing around with this. 
Wow, this is really awesome. Especially the HTML5 stuff; there have been a couple attempts at that for Love2d but nothing that stuck.
u can take mine and adapt maybe to ur needs https://bitbucket.org/snippets/marcotrosi/8xKG/lua-printtable I hope this helps
I wasn't sure if the output was as serialized data, or internal pseudo-code representation of the data, so I made the internal representation the same and outputted serialized too, so this should give you the jist: local bla = { blu = { bli = {1,2,3,4}, xyz = {4,5,6,7,8} }, this = {0,0,0,0}, more = {10}, even = {deeper = {12,23}} } local function transverse_recursive(tbl, ret, current_deth, done) if done[tbl] then return end -- prevent inf-loops done[tbl] = true for key, val in pairs(tbl) do local t = type(val) if #val == 0 then -- #{1,2,3} == 3, #{a=1,b=2,c=3} == 0 transverse_recursive(val, ret, current_deth .. " &gt; " .. key, done) else table.insert(ret, current_deth .. " &gt; " .. key) table.insert(ret, val) end end end local function transverse_inception(tbl, first) local ret = {} local done = {} transverse_recursive(tbl, ret, first, done) return ret end do local ret = transverse_inception(bla, "blah") print("{") for i = 1, #ret, 2 do io.stdout:write( "\t\""..ret[i].."\", {" .. table.concat(ret[i+1], ",") .. "},\n" ) end print("}") end It outputs to this: kobra@pc:~$ lua test.lua { "blah &gt; more", {10}, "blah &gt; blu &gt; bli", {1,2,3,4}, "blah &gt; blu &gt; xyz", {4,5,6,7,8}, "blah &gt; even &gt; deeper", {12,23}, "blah &gt; this", {0,0,0,0}, }
Thank you so much, I've been banging my head against a wall for quite some time now, that does the trick _and_ I understand it :) 
Ya, I have been searching for quite some time. I stumbled on this and another engine that are built wonderfully for web (this on has more platform support - the other was just web and linux). It's tricky stuff to compile for the web AND do it well.
I appreciated the TDCM reference, it's been many years since I watched that.
at least the version number
It's almost as if "[main new features](http://www.lua.org/manual/5.3/readme.html#changes)" wasn't a link to the relevant page that goes into details on this.
There are several ways, as there are several projects that tackle this problem. One of the oldest methods its to use [Copas](http://github.com/keplerprojects/copas), it is a coroutine scheduler that integrates with LuaSocket. One of the newest methods is to use [Lift](https://github.com/tbastos/lift), which is powered by libuv, the same library that powers Node.js.
This weekend I've stumbled upon some links that might be useful. Here's a WebSockets client written in lua, which integrates with ev (libev): https://github.com/lipp/lua-websockets/blob/master/examples/echo-client-ev.lua You can use coroutines as well through Copas, but libev seems much better from maintenance and performance perspective.
I faced the same problem while developing my own little app framework [zzlua](https://github.com/cellux/zzlua). Have a look at the code of this little example [TCP Server](https://github.com/cellux/zzlua/blob/master/tests/socket.lua#L236): - the server is an arithmetic expression evaluator; the client sends expressions generated via `make_expr()`, the server evaluates them via `loadstring()` + execute, then sends the result back to the client - the test creates 500 clients which all send their requests quasi-simultaneously to the server - both the clients and the server are implemented as coroutines (threads) which resume/yield under the control of a scheduler When you see something like `local expr = client:readline()` in the server thread's code, here is what happens in the background (somewhat simplified): 1. `socket:readline()` calls `sched.poll(self.fd, 'r')` (`self.fd`is the file descriptor of the client socket) 2. `sched.poll(fd, events)` creates an unique event id (a number) for the event (in this case a read) and yields this event id (`sched.wait(event_id`) 3. control is returned to the scheduler main loop (the `resume_runnables()` function inside `sched.tick()`) which sees that the yielded value is an event id: it tucks the event_id / coroutine pair away in a lookup table, essentially saying: when this event happens, the corresponding coroutine shall be resumed 4. the main event loop goes around and around in `sched.tick()`, doing an `epoll_wait()` on every iteraton for all registered file descriptors (with a dynamically changing timeout depending on whether there are threads waiting on a timer which shall expire in the next second or not) 5. when `epoll_wait()` signals a read event on the fd, `sched.handle_poll_event()` adds the event (containing the event_id) into the scheduler's event queue which is then processed in `sched.process_event()` 6. `sched.process_event()` finds the corresponding thread in the `waiting` table and moves it back to the `runnables` table 7. on the next `sched.resume_runnables()` call, the coroutine will be resumed and `client:readline()` returns with the data All network-related I/O operations are implemented like this. Stuff which cannot be handled via epoll - like file I/O - is assigned to workers in a thread pool (this part is in C) - the worker threads post back an event to the event queue when they are ready, so that the corresponding Lua thread can be resumed and pick up the result. Lua-C communication is done via message passing (nanomsg), the messages are serialized via MsgPack. 
Use [cqueues](http://25thandclement.com/~william/projects/cqueues.html) check out this example: https://github.com/wahern/cqueues/blob/master/examples/echo.srv
Man, it's almost as if that right hand bar wasn't around, isn't it? You know, the one that doesn't have the reference to a [Wiki](http://lua-users.org/wiki/) that certainly doesn't have [a list](http://lua-users.org/wiki/LibrariesAndBindings) of library bindings, and even if it did wouldn't bother including [GUIs](http://lua-users.org/wiki/GraphicalUserInterfaceToolkits) of any type, not to mention some that are [suited to embedded systems](http://tekui.neoscientists.org/) writing straight to hardware. Nope. No such resource available. Sorry.
The common ones like Gth and Qt are not immediate. actually the list does not inform on the kind of gui system.
SDL+OpenGL is likely the most compatible one I guess. löve looks interesting but I am not sure if that is fitting my needs, I'll have a look.
dear imgui has Lua bindings, although the lack of references in Lua makes the API rather different https://github.com/ocornut/imgui/wiki/Links
here on the right side you can find some links. also on youtube if you search for "Lua in one hour". Then there is a book called "programming in Lua". I personally don't like IDEs. But yes there are IDEs with Lua support. you can google most of it.
[Zerobrane Studio](https://studio.zerobrane.com/) was _the_ Lua IDE last I heard, though I don't use IDE's either.
&gt; And the last link? It does not look it is immediate either. At least not by looking at its [main tutorial](http://tekui.neoscientists.org/tutorials.html). Non-immediate GUIs rely on callbacks (and internal state) for their inputs, such as the buttons. Here's the first example from the tutorial: ui.Button:new({ ..., onPress = function(self) -- what happens when the button is pressed end }) Immediate GUIs don't rely on callbacks. Instead, they get the state when they "declare" the inputs, like this: if gui:button('click me').hit then -- what happens when the button is pressed end
In Lua, coroutines are cooperative—they don't run unless you explicitly tell them to run. &gt; How could I communicate from the telnet session to the led blinker coroutine that I want it to stop blinking? I would just not resume that coroutine.
You're probably right (and I never played with it), but it did seem to provide all the necessary building blocks.
What about in the case that I want to change the flash period? Presumably make the flash period an argument of the function that's given to the co-routine start. If that var is mutable then we can use it to modify behavior from outside that coroutine (eg. shared state). Can it be done without mutation?
I don't see that the scheduling of coroutines, has much to do with communication between them - except for explicit starting and stopping. I've updated the submission with another example.
When you pass control to coroutine, you can send it any Lua data (optionally). In your case, to change the blinking period, just send it this table: {blink_period = 100}. If you want it to "stop", just send {command = "stop"}. If you don't want to change anything, just send nil. In this way, you can easily implement very flexible messaging protocol between coroutines. But that "stop command" still doesn't make much sense, because the coroutine is always stopped, unless you explicitly pass control to it. Do you understand that Lua does NOT have any coroutine scheduling at all? If you want it, you must implement it yourself.
mutation is OK because coroutines are cooperative. If you are worried about global variables you can always encapsulate the state. function create_blinker(delay) return { get_delay = function() return delay end, set_delay = function(d) delay = d end, coro = coroutine.wrap(function() while true do sleep(delay) blink() end end } end of course, I'm just guessing the way you structured the code. Lua coroutines are very very flexible so its all gonna depend on how you structure your code.
You could take a look at https://learnxinyminutes.com/docs/lua/ There are some pretty good video tutorials on YouTube, I've learned a lot from those. Also there have been many such questions answered on /r/lua already.
FYI, MOAI (very powerful Lua-based game engine used in several commercial titles) supports HTML 5.
It's math.pow, Lua is case sensitive. Can you show us the code?
You state that a document is zero or more h1's, and that's it. You define, but never reference, h2 and h3. Currently, once the match hits the first heading2, it stops the match.
Oh hold on it might be in uppercase (facepalms...)
Alright. So if the pattern is surrounded with `{}` then it gets returned, else it doesn't (is just used up so the parser can move past that one) right? p = re.compile([[ out &lt;- {| (word %s* int* ws)* |} int &lt;- %d+ word &lt;- {%a+} ws &lt;- %s* ]]) local mtch = re.match("abc 123 def 456 ghi",p) **mtch** in this case is `{"abc","def","ghi"}`. If `int &lt;- {%d+}` has those `{}` around then the numbers also get returned.and **mtch** is therefore `{"abc","123","def","456","ghi"}`. **EDIT**: Here's the updated code. You can see the comment (`--`) inside the grammar. There are 2 grammars defined. One which hides **h1** and one which doesn't. head_p = re.compile([[ out &lt;- {| {:tag: '' -&gt; 'document':} (headers / text)* |} headers &lt;- h1 / h2 / h3 text &lt;- ( {| {:tag: '' -&gt; 'p':} {:txt: !'#' stuff :} |} ) -- h1 &lt;- ( {| {:tag: '' -&gt; 'h1':} {:txt: '#'^1 %s+ stuff :} |} / %s+) h1 &lt;- '#'^1 %s+ stuff_not_returned / %s+ h2 &lt;- ( {| {:tag: '' -&gt; 'h2':} {:txt: '#'^2 %s+ stuff :} |} / %s+) h3 &lt;- ( {| {:tag: '' -&gt; 'h3':} {:txt: '#'^3 %s+ stuff :} |} / %s+) stuff &lt;- {[^%nl]*} %nl stuff_not_returned &lt;- [^%nl]* %nl ]]) **EDIT2**: I'll be putting code up on https://github.com/rfajfar/lpeg_markdown
Probably the error message gave you a hint: "Attempt to index a global 'Math' (a nil value)".
I was reading in PIL that early versions of Lua did not have for loops. I can't imagine that, as I use them all the time, and have never used a language that didn't have them in some form.
and `^` also is exponentiation down to 5.1.
This is so cool! thanks. Related: http://sonic-pi.net/
Love2D is a fantastic game framework using Lua. 
What question are you trying to answer?
There are a bunch of links in the sidebar on exactly this topic.
http://www.amazon.com/Programming-Lua-Roberto-Ierusalimschy/dp/859037985X https://www.youtube.com/watch?v=S4eNl1rA1Ns https://www.youtube.com/watch?v=iMacxZQMPXs http://lua-users.org/wiki/TutorialDirectory Maybe some 2D game dev https://love2d.org if you have an iPad https://codea.io/scratchpad/ Here some functions you may need https://bitbucket.org/snippets/marcotrosi/ The Lua package manager https://luarocks.org
These questions get asked so many times, over and over again. Scroll through /r/lua a bit. You'll find everything you need. /u/marcotrosi also included two great YouTube guides (links) in his answer. I suggest you take a look at those.
He was. &gt; Scroll through /r/lua a bit. &gt; You'll find everything you need. &gt; /u/marcotrosi also included two great YouTube guides (links) in his answer. &gt; I suggest you take a look at those. 
I second the book in the amazon link. It's a very solid introduction to lua and should cover everything you'll need to learn if you're just starting out with the language. Also love2D is also a pretty neat little 2D game engine that uses lua, and not to hard to get into after some tutorials and taking a look at the API.
ahhh, ok! yeah i had it in the Text Block. i didnt know there was Scripting in the Profile menu. thanks so much! so i tried your script that you posted above, but there was no output. then i tried that script in my original post, and it worked! this is the output: &gt; 02/25/16 13:35:41 so how can i change that to remove the time stamp and add in a few more functions? i would like do this: 1. Ctrl+U 2. MM/DD/YYYY 3. Ctrl+U 4. Shift+Enter 5. Ctrl+S i need it for creating a daily entry in a Word document. i would like to be able to just hit the macro key to write the date in my preferred format, enter a carriage return, and save the document. i just dont know how to read/write code, so i have no idea how to edit that script to make it do what i want it to. i appreciate all your help, thank you so much!
Alright. I guess this will do the job ;) function OnEvent(event, arg, family) if event == "G_PRESSED" and arg == 1 then -- Ctrl + U PressKey("lctrl") PressAndReleaseKey("u") ReleaseKey("lctrl") -- Take the first 8 characters only (1,8) local date = string.sub(GetDate(), 1, 8) for i = 1, #date do local ch = date:sub(i,i) if ch == "-" then PressAndReleaseKey("minus") elseif ch == "," then PressAndReleaseKey("comma") elseif ch == "." then PressAndReleaseKey("period") elseif ch == "/" then PressAndReleaseKey("slash") elseif ch == " " then PressAndReleaseKey("spacebar") elseif ch == ":" then PressKey("lshift") Sleep(10) PressAndReleaseKey("semicolon") ReleaseKey("lshift") elseif ch == ch:lower() then PressAndReleaseKey(ch) else PressKey("lshift") Sleep(10) PressAndReleaseKey(ch:lower()) ReleaseKey("lshift") end end -- Ctrl + U PressKey("lctrl") PressAndReleaseKey("u") ReleaseKey("lctrl") -- Shift + Enter PressKey("lshift") PressAndReleaseKey("enter") ReleaseKey("lshift") -- Ctrl + S PressKey("lctrl") PressAndReleaseKey("s") ReleaseKey("lctrl") end end Should be MM/DD/YY instead of YYYY tho.
Try computercraft. The [forums](http://www.computercraft.info/forums2). It uses Lua.
Please visit and post on /r/SuicideWatch.
loadbuffer returns function. Just save it somewhere (registry, upvalue, global variable)
I thought luaL_loadbuffer returned a status value? 0: no errors; LUA_ERRSYNTAX: syntax error during pre-compilation; LUA_ERRMEM: memory allocation error.
Ah, right. Thanks for the clarify. Yep, that was my first thought. But my concerns are. 1. I can't call it again until the first one has finished, right? I want to have multiple calls in progress at once (co-routines, yay). 2. The global space will be messed up by previous calls, no?
Adding a link : www.coronalabs.com
By using fork(), you get what you want: lua_State *L = luaL_newstate (); luaL_openlibs (L); luaL_loadbuffer (L, lua, lua_len, name); At this point, your Lua state has the code loaded, but it's still pristine. Now, for( ; ; ) /* keep at this all day */ { pid_t child = fork(); if (child &lt; 0) error(); else if (child &gt; 0) /* parent */ { wait(&amp;status); /* check status , etc ... */ } else /* child process */ { // Here is where I want to clone "L" and re-use it. // Push args here. lua_pcall (L, 1, 1, 0); _exit(lua_exit_status); } fork() effectively clones the state (okay, it clones the entire program). 
&gt; The global space will be messed up by previous calls What do you mean? I don't understand
The function(s) I am calling perform processing logic. When I call the function the first time, it can use temporary state variables in the global context. E.g. it caches database lookups. If I call it a second time with different inputs, those cached values are still hanging around, and they will cause invalid results. Either I have to find a way to clear the global context on each invocation. Or the writer of the script needs to explicitly be aware that they need to clear all caches and global variables each time. I would like to avoid the function writer needing to worry about doing that themselves.
The person who introduced me to Lua gave me examples for algorithms which used io.input and io.read. I basically copied that method and didn't know about io.open. I'll look into it after I get some sleep. Thanks for the reply!
Yes, this will fix your problem. Open with io.open, then use the resulting handle as an object, like this: local fd = io.open("myfile.txt") local line = fd:read("*l") print(line) fd:close() 
It's probably not the solution, but file:close() doesn't return anything useful there. And if you're assigning to `local x` you're replacing a previous definition of `x`. Anyway, you're probably leaking file handles by opening files and not closing them. Otherwise, try closing your web browser. I find both Firefox and Chrome leak file handles until other programs start running into this problem.
Does `joypad.set` take the name of the button as a string? As in, if you were to press the down button manually, it would be `joypad.set(1, "Down")`? If so, just changing the `Buttons` table to an array should do it. An array is a table where all the keys are consecutive integers starting from 1. This table Buttons = { A = true, B = true, Down = true } is the same as Buttons["A"] = true Buttons["B"] = true Buttons["Down"] = true That doesn't help you when you don't know the button name yet. What you want is Buttons[1] = "A" Buttons[2] = "B" Buttons[3] = "Down" Which is more simply written as Buttons = { "A", "B", "Down" } With that change, and what /u/moomoomoo309 said about the `math.random` function, you've pretty much got it right.
function getDestination() local file = io.open("txtfile") local fileStr = file:read("*all") return tonumber(string.match(fileStr, "destination = (%d+)")) end _______ That's the code I'm using, but now I'm getting "attempt to index local 'file' (a nil value)"
I tried doing this and it doesn't take the variable as a string: Buttons = {"A = true"} joypad.set(1, Buttons[1]) It doesn't take Buttons[1] inside .set(). **This is the documentation for joypad.set:** &gt; joypad.set(int player, table input) &gt; Set the inputs for the given player. Table keys look like this (case &gt; sensitive): &gt; up, down, left, right, A, B, start, select &gt; There are 4 possible values: true, false, nil, and "invert". &gt; true - Forces the button on &gt; false - Forces the button off &gt; nil - User's button press goes through unchanged &gt; "invert"- Reverses the user's button press &gt; Any string works in place of "invert". It is suggested as a convention to use "invert" for &gt; readability, but strings like "inv", "Weird switchy mechanism", "", or "true or false" &gt; works as well as "invert". &gt; nil and "invert" exists so the script can control individual buttons of the controller without entirely blocking the user from having any control. Perhaps there is a process which can be automated by the script, like an optimal firing pattern, but the user still needs some manual control, such as moving the character around. 
math.random(3) is equal to math.random(1, 3) in lua
I think this is what you want. Unfortunately lua doesn't come with an easy way to pick a random key value pair from a table if the keys are not numbers. local Buttons = { A = true, B = true, Down = true } local function randomButton() local randomKey = math.random(3) local i = 1 for key, value in pairs(Buttons) do if i == randomKey then return {[key] = value} end i = i + 1 end end while true do joypad.set(1, randomButton()) emu.frameadvance() end
Based on your reply I thought it might be a LuaPlayer thing..... it is. From LuaPlayer release notes: - os.time() returns a userdata instead of a number because of problems with the float-precision, so you have to use os.difftime instead of doing calculations with the result 
&gt; I tried doing this and it doesn't take the variable as a string: I guessed wrong then, sorry. In that case, make it an array of key-&gt;value tables.
That means io.open("txtfile") was unable to open the file specified. http://www.lua.org/manual/5.1/manual.html#pdf-io.open You'll likely want to check to make sure if file is valid, something like below local file, error = io.open("txtfile") if not file then print(error) end 
Could you give any more information? Maybe the version of Lua you're using, or which Lua-scriptable application you're using? Other than that, it seems like a simple combination of the [os.time](http://www.lua.org/manual/5.1/manual.html#pdf-os.time) and [os.difftime](http://www.lua.org/manual/5.1/manual.html#pdf-os.difftime) functions. Just create two time objects, get the number of seconds between them, and format the result as needed. If all of that sounds like gibberish to you, I would strongly suggest following a Lua tutorial first to learn more about how to program.
Have they removed the annoying LuaJIT 2Gb memory limit? That should be a priority.
You mean 1Gb memory limit?
Not sure. But you know the one I mean :)
Thank you - I reviewed http://www.lua.org/manual/5.2/manual.html#8 but somehow I totally missed that (first line #facepalm).
Much obliged :) Redis' Lua is heavily sandboxed and doesn't allow access to the os library so one less thing to worry about.
Hopefully he doesn't burn out D:
cqueues also provides threads in Lua but you can use coroutines instead (via :wrap()) for this.
Each process gets a certain number of available file descriptors; there are also limits that are set by the run-time libraries you are using to open the files. Three of them are used by default (stdin, stdout, stderr) and the rest are available to your script to use in `io.open` and `io.popen` operations. If you don't release those descriptors (by closing the file), they are not re-used and if you keep opening files, sooner or later you run out of those descriptors and get the error you see. For example, try the following script: local n = 3 -- three file descriptors are already assigned while true do local f, err = io.open("test.bat", "r") if not f then print(n, err); os.exit() end n = n + 1 end When I run it on Windows8, I get "512 test.bat: Too many open files". The solution is to check your logic and to close all files after you are done reading from or writing to the file.
How would you close the file? Would you simply put "io.close("filename")" or "filename:close()" at the end of the loop
`f:close()` where `f` is the result of a successful `io.open()` call.
In any case, while your read() waits for new data, it will completely block your whole app. Isn't that a problem for you? 
It's not a problem so far, as It really has nothing else it needs to do but wait for events from x or the user. If I need something else to happen while it waits, I can through a yield in later. I don't think I will, though.
I just downloaded a binary to get myself working but I would still like to know why building it myself failed.
Question: Does this introduce any form of unicode/ character set oddities?
Not even looking at the code, read it like English. What it's saying is your "pairs" function is indexing either a non-existent variable, or a null value.
Ah cool, I haven't done much of any work with JIT-type things. I was under the impression Lua was always compiled at runtime, but that's only true with LuaJIT?
Also, /u/Overunderrated, please report back if you try this out. I'm quite curious about the results!
How did you install/download LuaSql? Is it up to date? Have you looked at the [official bugs](https://github.com/keplerproject/luasql/issues)?
On Windows I just downloaded the binary. On Ubuntu I downloaded [from the repository on githubg](https://github.com/keplerproject/luasql) and tried running make oci, as instructed.
You probably just want to put together a lisp.
I read the readme but I'm still not entirely sure what this is for?
Thanks, so it's a sandbox for loading lua code safely and being able to record and control what it does? Do you have a use case for this, what are you using it for at the moment?
I can see you already know everything and don't need my help. 
/r/transprogrammer would like a chat with you.
Eh, a segfault is a nice error, you can generally run it through a debugger and see the exact line where things went wrong (and inspect values.) Sure, it's a bit more effort than just getting a line dumped straight to the terminal whenever something goes wrong, but that's just how things work when you write native code and receive errors from the hardware rather than a VM. But there's really nothing magical about segfaults, they are basically just like any other error from e.g. the lua VM, and you can catch them, trace them, debug them ... I don't think data corruption is a big issue, since your DSO will be mapped very very far away in memory. I mean, you can always corrupt data if I e.g. give you a pointer to a buffer and then you mess up the data to it, but you can do that in lua as well. But accidental data-corruption seems extremely unlikely with the DSO approach.
The corruption that I was thinking of was caused by abrupt termination of the process, far away from this dso stuff. 
I don't see how abnormal termination would corrupt data? I mean, if the way you work with files/a database/some storage is such that you perform partial reads and writes to the storage so that if your program crashes inbetween, your data is ends up a corrupt state, then you can corrupt the data by abnormal termination just as much in any language.
A segfault is just an error (it's just an exception that is reported by the CPU rather than a VM or runtime), you can handle it if you want to. But just like with exceptions in any other language, lets say java, it's hard to know in what kind of state the system is if you haven't taken any providence. For instance if you have a try-catch that catches all exceptions right in the mainloop of your java application, and it catches some exception... well, what are you going to do with it? You can write special handlers for certain kind of scenarios (e.g. if you get a segfault because you run out of memory, you can allocate more and then resume), but how do you know you've covered all the cases where things can crash? If your operations are easily re-startable (e.g. do work, then commit to a file atomically) it's no big deal - you just restart the work on exception or even skip over it, reporting/logging the issue. So IMO that's the way to go, and language used doesn't make any difference.
While I'm happy that Mike Pall is still working on this, I'm nervous that Lua is outpacing LuaJIT. We're looking at lua 5.3 being the new defacto version and LuaJIT being stuck on 5.1. LuaJIT is an amazing technology and I'd like to see it become the star that it should be, but it won't happen at this rate.
This should help: https://github.com/ScottPhillips/stopwatch/blob/master/stopwatch-lib.lua
If its a **.lua** file you can run it with `lua filename.lua`. Some editors have that feature bound to a shortcut if you prefer to use those. (ZeroBrane Studio, Textadept, many others).
make sure Lua is installed, then `lua filename.lua` or use ZeroBrane
I tried doing the lua filename.lua
doing lua filename.lua doesnt seem to work it just gives me "nil"
How are you executing this code?
Im using ZeroBrane and if thats what your asking
What just gives you nil?
Yesterday, I noticed a 20MB test file would parse in ~9s. I modified the `findClosingQuote` function to not redeclare vars every loop and brought it down to ~7s (LuaJIT was not affected by this). Today, after switching to `string.find`, Lua's time was brought down to 3.8s but LuaJIT's increased from .6s to 1.1s. I generally wouldn't want to keep two branches, but due to performance, I think I will. I think the main loop can get another speedup by using the same regex "lite" approach (basically using it to advance a loop, but not as a parser) I used in `findClosingQuote`. I might play around with this idea a little and see what happens. EDIT: Preliminary results showed it made parsing a little slower. I suppose if your CSV file had very large non-quoted fields, it might help. Regardless, I'm leaving it out and may revisit it later. Just pushed out the above changes to luarocks!
Try this: https://github.com/d-led/pugilua There's an example with saving. I'm the author of the wrapper, but the underlying library is http://pugixml.org/ (by Arseny Kapoulkine). There's more, however: http://lua-users.org/wiki/LuaXml Lots to chose from
local val, msg = pcall(require, "JSONFast") if val then json = val end This would not raise an error and it would look up JSONFast more properly. io.open would assume JSONFast.lua is in working directory.
what is your code? Sounds like it worked... You are not printing or returning anything.
You might be able to get away with sleeping X number of seconds at the beginning of your program, if you can figure out the average load time. This could make the script fail on machines that run slower than yours, but if you're not looking for really fancy solutions this is a simple fix you could implement quickly!
It's a pattern called "decorator". Here's a small piece of code I just wrote: http://pastebin.com/EZn5Mmhp The decorating function prints arguments and returns returned from the original function. You don't have to go through the _G variable, it's enough just to do fun = decorate(fun); Hope it helps.
use debug.sethook to hook every function call. Also look into using an actual debugger, print()'ng everything makes me cringe.
OK, against my better judgment I'll bite. What's a "progressive project"?
I may have worded it weirdly. I meant something like a VAT calculator that I could try and make. By progressive I was thinking one or two projects that I could work towards later as I get more knowledge.
Looks great! Other than Ulydev's [push](https://github.com/Ulydev/push), love in particular has had a pretty big hole when it comes to resolution freedom, ever since Taehl's TLFres stopped working for later versions. Here's a few suggestions and other thoughts I had looking through the docs and examples: - I like that you went with Lua's convention of all lowercase function names, though I feel as though this should only apply to library functions, not object methods (even though it seems you've implemented the methods as library functions as well, so a plus to that too). Might I suggest going with camelCase instead? - Is there a reason why updateresolution() and process() aren't the same function? As far as I can tell, they're all called one after another. I can see the need to only process the math when absolutely necessary, but there probably won't be too many situations where simple addition and multiplication math would create a significant bottleneck to make this function separation necessary at all in the first place. If anything, maybe combine the two into a generic update() function for convenience? (Also follow's love's update() convention as a plus, even if the library is framework-agnostic) - I'd suggest throwing one of the smaller examples on the README.md, just so readers will immediately get a good idea of how usage of the library will look. Especially since GitLab's format isn't as familiar, and it'll take a bit longer to get to - Scaleinator shouldn't have a capital I in the middle. It looks better as a single word in my opinion, but a small nitpick. Excuse my chronic perfectionism, haha. Otherwise, it looks great. Maybe we could start a resolution helper section under [awesome-love2d](https://github.com/love2d-community/awesome-love2d) in light of this? EDIT: I only now noticed the love example uses strings for the window mode. love.window.setMode("640", "480", {resizable = true}) I'm surprised that even works, but seems super improper. Interesting, though...
Nice! Thank you. This means a lot to me :)
Most people in this sub are regular Lua programmers that don't know anything about how they script the cutscenes in Metal Gear Solid V. You will probably get better answers asking this question in a MGS modding community.
No answers from their part, actually. What I need is just someone which is able to add some lines of code to set a camera, I already know where it's supposed to go, I lask the knowledge on writing statements in lua, that's all
the problem is that base Lua doesn't have any statements or functions related to cameras, camera angles and so on. The base Lua language is very streamlined and contains only the things related to general programming (it doesn't even have to be related to games programming). The functions for setting camera angles were added to your Lua system by the MGS devs and I (and most other people here) have no idea what they are.
What trouble are you having using them then? Remember that we can only help you with regular Lua programming question and know nothing about MGS.
Well then, I'll give it a shot! Thanks!
oh! xD
&gt; This will definitely incur a huge performance hit for you, since the overhead of switching from C/C++ into lua is way way bigger than calling a function in C/C++ by a large margin (regardless of whether you use lua or luajit.) And what about generating the inner loops in Lua, augmenting them with the user-provided functions, and *then* running the whole thing in LuaJit?
That might greatly depend on what gets actually generated. I can definitely see the result at the least being within 2x-1.5x of C's run time, since we have been able to achieve that with dynamically translated numeric code since the early 1990s.
This is interesting, have you benchmarked it against any of the other parsers out there? I think you would get some traction if you can show it increases performance, even if only moderately.
This is another great answer, very simple to understand. Thank you!
5.1 and 5.2 are the standard, as you have seen. 5.3 is not compatible with LuaJIT, so many people/teams haven't made the effort to support it. Right now, it looks like there won't be a push until LuaJIT plays nicer with the 5.3 API changes. This is not the answer you are looking for, just a warning on waiting for a 5.3 JVM implementation.
Vose's [Alias Method](https://en.m.wikipedia.org/wiki/Alias_method) is not too complicated. See [here](http://www.keithschwarz.com/darts-dice-coins/) and [here](http://alaska-kamtchatka.blogspot.com.ar/2011/12/voses-alias-method.html). Vose's paper used to be freely available but the link rotted; you might be able to track it down.
&gt; I was under the impression Lua was always compiled at runtime, but that's only true with LuaJIT? Lua compiles to byte code which it runs in a virtual machine. LuaJIT compiles to machine code which runs on the physical processor. It's insanely fast, comparable to native C code for many things, but it probably won't compete with your hand-optimized, performance-conscious C code. 
More info: [http://lua-users.org/lists/lua-l/2016-04/msg00318.html](http://todaysdate.com/)
well functions do have names in debuginfo 
I was halfway through typing an outraged comment before I realised the date.
Basic benchmarking results for opening a 20MB file. It seems quick for a fully-featured pure-lua csv parser: Parser | LuaJIT | lua --------|--------|--------- lpeg josh^1 | 0.909816 | **1.336541** csvutils^2 | 1.83265 | 3.930891 lua-csv | 3.994128 | 9.36443 ftcsv | **0.655012** | 4.0801 luacsv^3 | ??? | ??? [1] josh's lpeg requires lpeg [2] csvutils cannot handle newlines within quoted fields [3] luacsv (Steve Donovan's C CSV parsing module) errored out after parsing between 60 and 90 fields (it was different every time). I'd also be a little curious to see how well these handle some of the edge cases within CSV. If I automate benchmarking, I'll be sure to add it to the performance section of the readme on github.
Zerobrane Studio is an all in one IDE and debugger. Might cover your needs.
Perhaps [MobDebug](https://luarocks.org/modules/paulclinger/mobdebug)?
I've found that [debugger.lua](https://github.com/slembcke/debugger.lua) works pretty well. Works pretty much exactly like PDB.
I'm not sure if it suits your needs, but have you seen LDoc? http://stevedonovan.github.io/ldoc/
I'm going through www.codingame.com using Lua to learn the language. I know other languages though, so this might be tough for someone just starting
Ldoc is currently the best doc tooling for Lua project.
Here is a [screen shot](http://i.imgur.com/ux5jykE.png) of my Mac Terminal so you can see what I've tried. &amp;nbsp; Thank you.
Good effort there! I usually use the [HomeBrew](http://brew.sh) package manager for these things, which simplifies updating etc.
Instead of saying something doesn't work it would be more helpful to paste the error from Terminal. AFAIK to be able to use `make` you need Xcode and its command line tools installed. Maybe that's your problem? You could also install homebrew and just do `brew install lua`. Finally, instead of building it you can download a "prebuilt" binary. Here: http://luabinaries.sourceforge.net/download.html Or here: http://rudix.org/packages/lua.html
Run the following in your terminal (where the $ is the begining of the terminal prompt and not actually typed) $ xcode-select -p and tell me if you see an output like: /Applications/Xcode.app/Contents/Developer
This would be great if it could generate markdown recursively for inter-dependent modules, in which case I can parse the files with mkdocs and push to readthedocs. However LDoc only does markdown for 1 independent module.. Anyhow, thanks for your suggestion. I guess I'm sticking with dokx until something better comes along. 
coolio!
You might consider check out the Love IRC channel. It's really active and helpful if you're trying to make a game in Lua. [#love@irc.oftc.net](https://webchat.oftc.net/?channels=love) Or you could try the forums if that's more your speed. https://love2d.org/forums/ 
Why didn't you just post this in /r/roblox? You would get much more help there than here.
I only said that because RBLX-Lua is slightly different from actual Lua. You could possibly get a more straightforward answer there. Anyways goodluck! *Oh also feel free to message me on Roblox @SolarFloss if you still need help*
This is a bit random but would you mind telling me how the accelerator program went? Like how was the overall experience and what did you get out of it? 
Thanks I just sent you a PM now. Hope to hear back soon
The accelerator program was nothing short of awesome. I got to work in the best office I could imagine and meet with a bunch of talented individuals. I gained a new perspective on managing a product and a lot of the thought that goes into what is put on the ROBLOX platform. Although I ran into quite a bit of personal drama with those I was living with, the program itself was fantastic. Wish I could do it again.
LuaJ from what I have seen is the best option.
You can use `tokenf` as a macro preprocessor, I suppose.
Meant to reply to this first, thanks I'd try those but I went to the chat and started talking to people but they just ignored me as soon as Roblox was mentioned
I don't see your PM anywhere.
&gt; The API for [Unix domain sockets](https://en.wikipedia.org/wiki/Unix_domain_socket) is similar to that of an Internet socket, but rather than using an underlying network protocol, all communication occurs entirely within the operating system kernel. That what it is, i take, so you need a to use `.path` instead of `.host`, the path just shows up or do you need to make it? And then the advantage is that it doesn't use port anymore, and the operating system can do it a lot faster/cheaper?
Neat. Sometimes it is annoying when code feels like it should be "streamier".
It seems simple enough, but the thing with Lua is that it's very implementation specific. The code will generally be something along the lines of: local lastTime = 0 while true do if getCurrentTime() - lastTime &gt; 30000 then pressButton("a") pressButton("start") lastTime = getCurrentTime() sleep(100) releaseButton("a") releaseButton("start") end end Where all the times are in milliseconds, getCurrentTime() returns the time in milliseconds, sleep() waits for a given number of milliseconds, and pressButton and releaseButton do what you'd think. The names of the functions won't be that, and it might not be in milliseconds, but you get the idea. Syntax in Lua is pretty straightforward, the code above is valid Lua, so it shouldn't be too hard to figure out.
It means instead of using a TCP socket, it can use unix sockets on the local file system. When using lua-http to create an HTTP **server** this is useful if you want to run certain reverse proxies in front of it. e.g. [for nginx](http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass) you could specify `proxy_pass http://unix:/path/to/lua-http.socket:/mypath` When using lua-http as an HTTP **client**, it means you can talk to other local HTTP servers that listen on a unix socket. (like curl's `--unix-socket` option)
I also use vim. Do you have any preferred plugins? I'm not asking for an IDE btw. I'm asking for a command line tool that can format a bunch of files one time.
You can use Vim as a CLI tool if you pass the right flags. And it's native Vim with a proper indent syntax. 
I assume it is the same version. I installed Lua for Windows which came with SciTE as the editor... This thing is giving me a headache. When trying different things, sometimes it seems to work other times it doesn't. I'm beginning to think the math.random function means random in the chaos sense... When I do this program : math.randomseed( os.time() ) function detectUp() local bolDetected = (math.random(0,1) == 1) print(bolDetected) if bolDetected == true then print("Block detected up!") else print("Up clear...") end return bolDetected end function tdetectUp() local bolDetected = (math.random(0,1) == 1) print(bolDetected) if bolDetected == true then print("Block detected up!") else print("Up clear...") end return bolDetected end print (detectUp()) print (tdetectUp()) [The top one always outputs true and the bottom one seems to work!](http://i.imgur.com/Qn7SEAh.png)
I can't reproduce. The function looks correct, I've tested it with standard Lua and it works as expected. You should call `math.randomseed(os.time())` and perhaps make a few calls to `math.random()` before. As another side note, your variable `bolDetected` **is** a *boolean*. A type that can take two values `true` and `false`. The `if` statement tests the expression `bolDetected == true`. But `true == true` is always `true` and `true == false` is always `false`. Well you should only write `if bolDetected then`. Also you have forgotten the `end` statement at the end of your function. Copy-paste mistake ?
Yea, I know... I added that in while trying to eliminate this bizzarro world situation. Thank you, though.
What do you mean by 'chaos sense'? The behaviour of math.random(0,1) is to return the number 0 or 1 where both have equal probabilities. Different random seeds should give different sequences. When I run this on the Lua [demo](http://www.lua.org/cgi-bin/demo) I get [this](http://i.imgur.com/fZQjVdd.png). When I run it again I usually get another output. Is this the behaviour you expect? EDIT: Can you run: function randt(n) local t = {} for i = 1,n do table.insert(t, math.random(0,1)) end return table.concat(t) end math.randomseed(1) print(randt(10)) math.randomseed(2) print(randt(10)) So we can figure out if there's really something weird going on with the random number generator?
I was joking about the chaos. It seems to make my program run in a chaotic manner... output of that program is such: &gt;Exit code: 0 &gt;lua -e "io.stdout:setvbuf 'no'" "testing.lua" 0101100111 0111110101 &gt;Exit code: 0 
So apparently this just happens sometimes. There are a few sites that mention this issue where the first random... isn't. My thanks to everyone who responded. If I had realized it was an issue and not some dumb mistake I was making I would have googled it and not bothered everyone with it. Ah well... 
Take a look here: http://www.vertexmeadow.xyz/ The author of Amulet built this using Amulet.
Wow, these are really cool, thanks!
But why..
Does anybody else remember when functions inside of modules were simply called functions … inside modules? Why does OOP have to infect everything it touches even when it's touching things that aren't even remotely OOP?
Ok, thanks for your help. I suppose I'll use your script for batch indenting the whole project code, and just use serpent on an individual basis.
This isn't criticism, but curiosity: why do so many people pair "start" with "end" ("starts with" and "ends with")? Shouldn't the correct pairings be: begin/end; and start/stop, each with slightly different meanings, tho often synonymous?
Extended ASCII string functions. Don't use these with unicode strings
Its missing `left_pad` :P
It kind of is. &gt;[Lua is a powerful, fast, lightweight, embeddable scripting language.](https://www.lua.org/about.html)
Well, yes, compared to different scripting languages, but it can't compare to things like C or C++.
Hm, you're probably right. I was kind of assuming if you really wanted performance, you went straight to C++, but after thinking a bit that's indeed not always the case. 
Of course, but in the real world you'll end up reimplementing half of Lua in every single relatively big C/C++ program.
The more I learn, the more I realize how much I have left to learn. You're right. Thanks for the writeout.
That is a helpful writeup, I've tried it out a bit and you are right, Amulet is definitely weird and unintuitive. I believe I've found out why love seemed so much slower, there is a sleep within the main loop that greatly limits the fps and decreases CPU usage. I was making tests and comparing it to other libraries and this mislead me. Thanks for the help.
What error message are you getting with `sudo make install`?
Great spirit. IMO, admitting that is a virtue, congrats! 
this is incorrect. lua is one of the fastest interpreted languages around, if not the fastest when we consider luajit. a lot of people use lua exactly for its performance.
Lua coroutines are a really powerful feature. They have a bunch of gotchas associated, but they are an excellent tool and I recommend advanced lua programmers learning how to use them.
You're welcome :) 
Coroutines are a great tool to invert control. You can easily turn a mess of callbacks into a linear control flow which is usually easier to understand. One thing that is not mentioned in the linked post is the tail call optimization of Lua which makes this even more useful: You can have a mainmenu function called in a coroutine context which might then, depending on user input, return into a submenu function without adding anything to the call stack. That way you can build a complete menu structure without worrying about running out of stack space. function submenu() local command = input() if command == "" then return mainmenu() -- jump back to main menu else .... end end function mainmenu() -- called in coroutine context local command = input() if command == "sub" then return submenu() -- this is basically a jump else ... end end I've successfully used this approach in a [programming game](https://github.com/dividuum/infon) a coded a while back. You can see an example usage of coroutines [here](https://github.com/dividuum/infon/blob/master/server.lua).
On this note, I'll be PRing an example script later
LuaJIT (transparently compiled to native machine code) is known to beat C/C++ in certain situations. Love2D currently uses LuaJIT, not Lua, so it is VERY fast. On the other hand, Amulet uses Lua (not LuaJIT) interpreted by Javascript, which means it's MUCH slower than Love2D. But note that I am speaking about the pure Lua power, which is usually not the bottleneck. The bottleneck is usually graphics...
I think amulet uses luajit when used standalone. (https://github.com/ianmaclarty/amulet mentions luajit in credit) One thing worth mentioning is that löve exposes its api to lua through the normal C api. If löve exposed a C api that was bound to with FFI I think it would be a lot more performant. 
You had a Lua Uppercase Accident.
I looked at Defold, but the fact that you can't start a new project without going through King's website turned me off. Love2d and PICO-8 are still great, though.
If you like Lua learn it. Learning a new language is never a bad idea. I despise Lua as a language, but that's just my personal opinion and it is very capable, lightweight, and fast. Autodesk chose Lua for the new version of Scaleform Studio (replacing the flash based Scaleform with AS3). If you want to be 100% future proof go with C++, since scripting languages come and go but C++ has been in the game dev industry forever. It's possible Rust or even Go will replace C++ in the future but that's still a long shot.
Check out the Corona SDK. It has an easy to use Api, supports mobile and Desktop apps, and is extensible via plugins if you are so inclined. It uses Lua of course :)
If you despise Lua, why do you read /r/lua?
It's "Lua". So clearly no. /s
Yeah, there are some things I wish were different about it, like a slightly larger standard library (map / reduce on tables would be nice to have built in, for example) and syntactic sugar for stuff like appending an element to an array.
#***LUA*** it's Lua, by the way.
lua is probably a good starter language. you can code easily for games, but after you get the hang of lua try something else.
[removed]
[removed]
Any help would be greatly appreciated!
The thing you downloaded is the sources. You need to build them. If you tell us which operating system you are using, somebody might be able to point you in the direction of pre-built binaries.
For an easy install, I recommend getting the latest exe installer for Lua from [here](https://github.com/rjpcomputing/luaforwindows/releases). What you downloaded was the C source code for Lua, which needs to be compiled, but in the link I gave you someone has already done it, which is much easier. In the installer you can leave all the options on their defaults and that will work fine.
I don't use it either but it does come with several versions of Lua built-in so that one doesn't have to install them on their own.
Someone already linked the Lua for Windows Github which has binaries for you to use straight away. If you need a slightly more up to date version of Lua for some reason, you could try here: http://luabinaries.sourceforge.net/download.html I don't tend to use a full IDE, just a text editor. Here's a demo workflow! https://youtu.be/siuP3gbD-GE
When i try to imput that into the app it still wont display the image
You'd have done better to post this in 'WatchMaker". The solution you are looking for is: {dh23}&lt;=12 and {dh23}&gt;=00 and 100 or 0 Obviously the hours "&lt;=12" and "&gt;+00" will need to be altered for each image.
Thank you very much!
Why not use IRC?
Here is a small demo chat app build with Lua: https://github.com/bungle/iresty (not SSH, but with websockets)
I agree, but as far as being future proof in the game dev industry there's nothing better.
That seems to be LuaJIT only (it uses FFI), not Lua.
You could program an IRC client easily with Lua; you just need to use a curses binding and a network binding. Personally, I'd recommend luaposix for the POSIX and curses functions, and cqueues for the networking.
You haven't explained much about your problem, but immediately it looks like you don't understand how `or` works. You've written if operation == "+" or "plus" then and how that actually acts like is: if (operation == "+") or ("plus") then so it's saying [if the operation equals "+", or if "plus"]. That will always evaluate to true, because a string evaluates to `true` (only `false` and `nil` won't). What you actually want to write is: if operation == "+" or operation == "plus" then You should go and correct that everywhere in your program, and hopefully that will sort your issue :)
Thanks that fixed it!
I think it's just to demonstrate the behavior of the `pcall` function. `myFunction` will fail because `n` is undefined and because division by `nil` is undefined. `pcall` catches the error raised and just prints 'Failure'.
No big deal! Just letting you know for the future :)
Couldn't find any ssh library for lua so you'll have to roll your own. &gt; If there's a better method or language to use for this please let me know. Look into [this](https://github.com/shazow/ssh-chat) project.
You're advertising it yet the readme does a great job of doing the exact opposite.
&gt; there is a sleep within the main loop that greatly limits the fps and decreases CPU usage That's not it. The CPU has to be relased from time to time in order to let the OS "catch up". The sleep in the main loop serves that function. It's a very small sleep and has no impact whatsoever in the framerate. If you remove it, you won't experience a higher speed. But depending on the system you are running your game on, the OS might just consider that your game is hanged out and kill it out right.
Why not make it a proper repo? Then you can deal with issues, revisions, version locking, etc. This code is cool, but not final - something will break or you may want to deal with mixins vs inheritance.
Gists are technically repositories; I just didn't want to make another two-file repository.
It's the thing at the top with the dropdown that (for me) defaults to Embed. Open it and pick one of the 'Clone' options.
What type of thing do you want to make? For games [LÖVE2D](https://love2d.org/) is a really nice library to use. For general applications you could use [wxLua](http://wxlua.sourceforge.net/) and to use that I'd recommend getting [LuaForWindows](https://github.com/rjpcomputing/luaforwindows/releases) which bundles wxLua and several other libraries, making it really easy to get started.
I don't think it's likely that LuaJIT will ever have *all* the features of the latest versions of Lua. LuaJIT's creator doesn't like some of the newer features and how they would make the language slower in some cases. Lua 5.1 is a complete language though, Garry's Mod and World Of Warcraft both use 5.1 with no plans of updating. Also have a look at [this](http://store.steampowered.com/app/323850/) for an example of a big game that shipped with LÖVE2D
Yep, LuaJIT speed is comparable with native compiled C... Have a look at FFI library here: http://luajit.org/ext_ffi.html
Well, if you wanted to write GUI applications, Love2d is probably not the best host you could use. You'd be much better off with wxLua or IupLua.
Which is why I did mention other libraries
Lua also has good string processing and metatable stuff is fun. 
* make new directory called my_project * place lua.exe inside of that directory * make a main.lua file * make a new batch script called "my_project.cmd" that executes lua main.lua And there you sort of have it. It's not a single binary, it's 3 files but you can always zip your directory and share that with people. As others have said you may want to install modules. You can do this by dropping them into your directory. LuaJIT lets you do this without making C custom C code but if you have yet to start learning Lua it's probably easier to use modules. Zerobrane is a Lua IDE written entirely in Lua: https://github.com/pkulchenko/ZeroBraneStudio I hate self promoting but here's a very elaborate version of the above steps using LuaJIT: https://github.com/CapsAdmin/goluwa
Lua is designed to be used for scripting within an application, rather than to make an entire application in Lua. That's why the standard libraries are so minimal. With some third party libraries like lgi, luaposix, or LÖVE it does become feasible to write an application in Lua. (It's also not too difficult to make your own C modules.)
I assumed he was using windows and so I tried to keep the explanation simple. If you want to support linux as well you need to supply a linux version of lua and a shell script that launches it. 
I would [get started with löve](http://love2d.org/wiki/Getting_Started).
use love2d
IMO, the biggest bottleneck for writing full systems in a real language is library availability. Check out luarocks.org to see if you can find everything you need.
Lua's a great point due to it's speed and simplicity. Other people recommend love2d, and from personal experience I can say it's not that bad of a game engine. If you have any questions, you can visit the #love channel on the OFTC IRC network or #lua on the Freenode IRC network - or, of course, ask here.
In addition to using Love2d, I highly recommend [Tiled](http://www.mapeditor.org/) for doing your maps, immerse yourself in the [Official Forums](https://love2d.org/forums/) as there's a lot of helpful people and great information, and please please please read [Programming In Lua](https://www.lua.org/pil/contents.html) or purchase the [second edition book](http://www.amazon.com/exec/obidos/ASIN/8590379825/lua-pilindex-20). (I recommend the 2nd ed and not 3rd because the version of lua in Love2d is 5.1 and 2nd ed focuses on that version) Good luck, and above all else have fun!
Cool. My only comment would be that you should stick to obj:get_value() rather than obj.get_value() I assume this is python specific but I would argue that this is Lua and you should use Lua syntax. When I see obj.get_value() in Lua I think you call a get_value with no arguments but behind the scenes you are doing some hackery that calls it with self. It would also probably be faster if not at least you'll have less code to maintain.
I'd say why not. I use my own oop library like most people tend to do but I recognize it's fun to make.
LuaJIT can be a drop in replacement for lua 5.1, so if you have a project that has lua51.dll you can more or less just replace that with luajit's lua51.dll. You will of course have to recompile if it's statically linked into the exe. Zerobrane uses luajit and it includes other versions of lua (mainly for interpreting). If you clone or download the repository zbstudio.exe would work. [This exe is nothing more than a launcher](https://github.com/pkulchenko/ZeroBraneStudio/blob/master/build/win32_starter.c). You can do all of that using luajit but zerobrane wants to work without the need for luajit even though it uses it by default. Löve uses LuaJIT by default too. 
"And only release it for certain systems" - I didn't say they can't offer releases but shipping an OS-specific app with no easily compilable source is a bad idea. 
No clue. It's not going to error logically but I haven't ever experienced this myself. 
But automatic bound methods was a key goal of this module. Actually, the idea of plloop was born in a dispute with JS programmer that [even] Lua is more powerful and flexible and it's possible to implement automatic binding an object to its method without something like function.bind in JS. Colon syntax is just syntactic sugar, you can't do something like this: local bound = object:method ... local result = bound(foo, bar) There is no something like bind: var bound = obj.method.bind(obj) ... var result = bound(foo, bar) You can write your own bind(method, context) function with closures, but I prefer Python way with automatic bound/unbound methods. Lua has no something like Python data/nondata descriptors, so this feature was implemented via __index getter and closures. 
&gt; it's fun to make Exactly.
https://www.lua.org/pil/1.html
ajuda ai gente pfv
Sidebar. [DarkRP Wiki](http://wiki.darkrp.com/index.php/Main_Page). [Gary's Mod Tutorials](http://wiki.garrysmod.com/page/Category:Lua_Tutorials).
I wonder how I never thought about using `__index` to automatically hack in `self`. Not like I'm going to use it, but I think it's a cool concept.
how do i fix that 
Note, though, that `setfenv` and `getfenv` were removed in Lua 5.2; this might or might not be a problem for you.
Oh, thanks! That's such a subtle thing who'd have guessed haha.
Best to write in 5.3 style, but use backwards compat shims to make things work in lua 5.1. e.g. look at https://github.com/keplerproject/lua-compat-5.3
For back-end dev, a possible equivalent alternative to Node.js is Luvit: https://luvit.io/ which is very Node-like, but in Lua.
I wasn't offering alternatives to a backend-er backend. However, if you wanted something that is more useful for backend development, I would instead suggest [cqueues](https://github.com/wahern/cqueues) over Luvit because coroutines are magical fairies that make the world a better place.
Man, the number of people missing the point utterly in trying to mimic Callback Hell in Lua when they could use coroutines instead is truly astonishing.
Well, not just Callback Hell being a problem, but also states: doCallback(function() if state.isDoingThingA then -- code block else -- code block end end) is a lot dirtier than wrap(function() repeat -- do thing A until -- your check here -- do thing B end) At least, it is in my opinion. 
Carry on! Show some jsperfs, examples, and more. That was basically like saying "Here is a car and a key for that car, good luck" to someone who may not have any understanding of either. Fortunately, one would hope there are some JS and Lua knowledge in the brains of your readers.
I guess that's because I've mainly worked with C, C#, C++ and Java so far so I kind of supposed there had to exist something like this. I get that the functions I'm looking for might not be so common for the language, I'll keep searching for a while, thank you for your answer!
Not sure that you will find something like this. You may be able to do some tricky things with the I/O module, specifically specifying types for the read function. What are you running this in, assuming you want pure Lua because it is not direct from the command line?
I'd hope so if they're web developers. 
I'll eventually write a full tutorial once I get a computer again. 
I don't think there's any non-C libraries that handle media files; you'd have to use a binding to wherever framework you're using or use something else.
Yeah, figured it was a long shot or I would have already found a solution. Thanks!
I was going to just post a link to the project source tbh. 
I was going to just post a link to the project source tbh. 
I wrote [lamt](https://github.com/daurnimator/lamt) as part of [lomp](https://github.com/daurnimator/lomp2/), but it's unmaintained at the moment. A significant issue was that ansi C (and hence lua) doesn't have [`ftruncate`](http://linux.die.net/man/2/ftruncate) and hence editing tags is super complex.
Awesome, this may make Love2d coding far more bearable! Time to look at Haxe again. :)
Oh wow! Ok, in case I wasn't clear in my post, I range from not being a programmer at all to being a bad programmer. Could you give me a rundown on how to use this code? And also, from what I understand, Lua 5.3 has done away with modules so what kind of mess am I in for if I try to update this code? Thanks for any help you can give me on this!
If you're going to compile from a static language to Lua, you could do a lot better than Go; it's a type system doesn't even catch the most common type error (nils).
Message me i can try and help you
&gt; What you are trying to do is kind of like implementing a process-level fork but using coroutines. Yup, more specifically, the author is trying to implement [continuations](https://en.wikipedia.org/wiki/Continuation). Coroutines are also called "one-shot continuations", and can do a subset of what full continuations allow. As the "one-shot" name implies, the missing piece is being able to resume a coroutine from the same place multiple times. That requires you to clone the coroutine/continuation's state, which is what the author is trying to do.
for backend there is a big list and some comparisons here: http://lua.space/webdev/the-best-lua-web-frameworks
I suppose you could put it that way, but I don't need any kind of concurrency here. Currently, I have a whole bunch of state machines, and they're a mess to maintain. Coroutines would allow me to write code more naturally, if only I could access their internal state. Keeping all of my state on the coroutine stack is certainly a constraint that I can keep.
Interesting... You might be able to hack together the functionality you seek using goto. You will probably have to generate your coroutine function to have if blocks that wrap goto statements to labels that are before your yield calls. Might be worth a try? 
I don't think lua is something you can outgrow. I do c# and JavaScript all week at work. In the past I have tried to use those at home to do games, and it felt to much like work. Lua is nice because things can be as simple or complex as you want to make them. Tables are amazingly versatile. Love2d is a very mature and complete library, and atom with the love2d ide package is quite capable.
I know its not about concurrency. Its just that process-level forks are the most common example of a full-blown continuation out there :) &gt; Keeping all of my state on the coroutine stack is certainly a constraint that I can keep. Remember that this can be trickier than it seems. For example, if your state contains any tables you need to be super careful so they don't end up "leaking" to the heap.
This is indeed how I've implemented it now. But it's quite convoluted this way, and I've got a lot of them, which is why I'm trying to move to a coroutine-based implementation, if I can.
Check the value of 'i' in the loop, and exit the loop when you've it it. Or just do: for i = 1, 10 do
 for i=1, 10 do print( fruitarray[i] ) end 
I would put a rockspec in the repo, otherwise - all good!
Thank you for the advice, i need to learn more about it anyway. i am probably going to fix this later. I also need to learn more about the Lua toolchain.
I am confused, are you trying to write the bot in lua, or are you just trying to communicate with an existing bot? Here is a lua bot framework. https://github.com/davidshaw/ircbot.lua and here is an introduction to lua sockets. http://w3.impa.br/~diego/software/luasocket/introduction.html
there's a bot in a channel that you send a command to. The command returns some stats about the user that you asked about. All of the things that I managed to find involved setting up a bot. I was hoping there would be a simple way to just connect send the command and get the response then leave. 
Although not very day to day life but snooping around the installation of Reason (for making music) I found that it was using Lua.
Factorio uses lua as modding language.
I found it in my router; the backend ran Lua. 
Toyota and BMW as well ;)
The OpenTX RC radio transmitter firmware utilizes Lua as well.
As does Garry's Mod.
You can write your own iterator: local function ipairs_(tbl, from, to, step) if not from or from &lt; 1 then from = 1 end if not to then to = #tbl end if not step then step = 1 end local function next_(tbl, idx) if idx == nil then idx = from else idx = idx + step end if idx &gt; to then return end local val = tbl[idx] if val == nil then return end return idx, val end return next_, tbl, nil end Usage: for index, value in ipairs_(t) do ... end -- iterate over all t values for index, value in ipairs_(t, 3) do ... end -- from 3rd to #t elements for index, value in ipairs_(t, 3, 7) do ... end -- from 3rd to 7th elements for index, value in ipairs_(t, 3, 7, 2) do ... end -- each 2nd element from 3rd to 7th ones (3, 5, 7)
Hey Etiene! I just wanted to say how much I appreciate what you (and your collaborators) are doing with Lua.Space. In my opinion, one of the things Lua could do better is having more people actively talking about it and you're helping a lot with that. Keep up the great work!
Spotify apparently uses Lua in some way.
Thank you! If you know people interested in sharing information in Lua.Space let me know! :D 
You've somehow managed to paste this code without any line breaks, which makes it very difficult to find the line numbers cited in your error messages. Post it again in [code] tags.
As a quick insert I am currently working on rewriting my math/shapes library [mlib](https://github.com/davisdude/mlib) to work better. It should work fine for now, I'm just working on making it faster, adding error checking, better documentation, and other useful things like those. (you can check out the complete re-write [here](https://github.com/davisdude/mlib/tree/dev)) In your case, you could do something like this: -- shape1, shape2 are 2d arrays storing points in the form { x1, y1, x2, y2, ... } intersection = mlib.polygon.getPolygonIntersection( shape1, shape2 ) -- Transform intersections into correct format (another reason for the rewrite- poorly-thought structures) local new = {} for i = 1, #intersections, 2 do table.insert( new, intersections[i] ) table.insert( new, intersections[i + 1] ) end area = mlib.polygon.getPolygonArea( intersection )
Same as World of Warcraft, TIS-100, Marathon, and a whole big pile of other games.
Do you have any more information about which Lua host (the program that allows you to use Lua to script it) you are using? I can't see any real errors, so I suspect the error is something to do with the engine instead.
There doesn't seem to be an online scripting reference for that application, so I can't really help with your problem. Have you tried asking on the Logitech forums?
it looks to me like the if statement if toggle then should be one step less indented and that the end piece of the first if statement should be replaced, not sure though
I am not quite shure, but 'toggle' is not present. If it possible add output to console and monitor variables.
Thank you for the complement. As Isaiah said, modern programmers call bad good and good bad. 
My "ew" has nothing to do with programming; I just think you're quite probably a despicable person, given that you went straight to /r/truecels for help with your "dating" website.
And all these operating systems are getting worse. I use Apple but I don't upgrade because all modern software just gets worse. 
&gt; lol wut? I don't speak Modernish. 
Any reason that you used weblua.js instead of lua.vm.js?
Could you explain why you think Git is the worst VCS? Also what projects have you been looking at on Github that are all bad?
Wow. Good luck finding anybody on here you miserable sob.
No real reason, since it didn't really matter for such a basic thing. weblua.js's example html was just simpler and faster to build off of.
It's not a bad practice, no, especially for array-like table where you only use numeric keys.
Thanks. This is the use case I had in mind.
 while true do print("Please type password") password = read("x") if password == "XXXXXXX" then sleep(.5) print("Password Accepted") sleep(.5) shell.run("menu") end else print("PASSWORD INCORRECT") sleep(1) end
Here's where proper indentation helps. What that means is to press tab on every line after a block starter (if, while, for, etc.) then tab back on end, else, and elseif. So if we do that, your code should look like this: while true do print("Please type password") password = read("x") if password == "XXXXXXX" then sleep(.5) print("Password Accepted") sleep(.5) shell.run("menu") end else print("PASSWORD INCORRECT") sleep(1) end We can now easily see that the word `else` is erroneously on the same level as the `while`, which Lua doesn't really know what to do with. Instead, we'll make it so that `else` is on the same level as the `if` there. while true do print("Please type password") password = read("x") if password == "XXXXXXX" then sleep(.5) print("Password Accepted") sleep(.5) shell.run("menu") else print("PASSWORD INCORRECT") sleep(1) end end And there you should have a fixed version that looks a lot more readable.
thanks think you could help me with a menu which just keeps telling me that its unfinished but it looks good to me and i went over it many times?
Just thought I'd post it here in case any of you have comments. It's a post that just shows how to create a host program with callbacks. 
Hi, this function seems not close. function onKeyPressed( key, menu ) -- function will need a end if key == keys.enter then -- 1st if (will need a end) onItemSelected(menu) elseif key == keys.up then -- still 1st if if selectedItem &gt; 1 then selectedItem = selcetedItem - 1 end -- selectedItem &gt;1 elseif key == keys.down then -- 1st if again if selectedItem &lt; #menu then selectedItem = selcetedItem + 1 end -- selected item &lt; #menu end -- 1st if --you miss a end here to close the function. function onItemSelected( menu ) 
ComputerCraft let's you program in lua :)
this is all jumbled together and is really hard to understand i think i get it but would you mind rewriting it in lines so i can see it better
Is it working better ? (Sorry, hard to edit on phone) function onKeyPressed( key, menu ) -- function will need a end if key == keys.enter then -- 1st if (will need a end) onItemSelected(menu) elseif key == keys.up then -- still 1st if if selectedItem &gt; 1 then selectedItem = selcetedItem - 1 -- here you wrote "selcetedItem" end -- selectedItem &gt;1 elseif key == keys.down then -- 1st if again if selectedItem &lt; #menu then selectedItem = selcetedItem + 1 end -- selected item &lt; #menu end -- 1st if --you miss a 'end' here to close the function. 
I suppose the easiest way is to just declare variables in your code (or in a separate file which is required by the main file) and generate the text file by adding strings together. Another way to configure the file that should be generated would be by writing a bunch of functions and calling them as necessary. There are two main ways to add strings together in Lua, though if you need a relatively large amount of strings the best way to do is by adding all your strings to a table and using table.concat to join them when you're finished. More information [here under concatenation](http://lua-users.org/wiki/StringsTutorial). Incidentally, the kind of technology you are looking for is called a "static site generator". It's possible that there is already a tool available that does what you need.
You probably want to check some template engine, somethin like this: https://john.nachtimwald.com/2014/08/06/using-lua-as-a-templating-engine/ Then you feed a program with variables and the template, that's it :)
This is not enough information. Can you post this part of the code so that we can see context? 
Thanks for the speedy reply. The pertinent part of the main script is as follows: screenNo = 1 var_opacity1 = 100 var_opacity1b = 60 var_opacity2 = 0 var_opacity2b = 0 var_opacity3 = 0 var_opacity3b = 0 var_opacity4 = 0 var_opacity4b = 0 var_opacity5 = 0 var_opacity5b = 0 transitions = { 'Fade' } transitionNo = 1 var_transition = transitions[transitionNo] function next_screen() screenNo = screenNo + 1 if screenNo &gt; 5 then screenNo = 1 end var_opacity1 = screenNo == 1 and 100 or 0 var_opacity1b = screenNo == 1 and 60 or 0 var_opacity2 = screenNo == 2 and 100 or 0 var_opacity2b = screenNo == 2 and 60 or 0 var_opacity3 = screenNo == 3 and 100 or 0 var_opacity3b = screenNo == 3 and 60 or 0 var_opacity4 = screenNo == 4 and 100 or 0 var_opacity4b = screenNo == 4 and 60 or 0 var_opacity5 = screenNo == 5 and 100 or 0 var_opacity5b = screenNo == 5 and 60 or 0 the values 100 or 0 / 60 or 0 refer to the objects opacity, where 100 is 100%; 60 is 60% and 0 is invisible
There are tutorials linked from the sidebar. If you are creating a 2D game, checkout /r/love2d, a game engine using Lua.
If you run this code, nothing happens. Change current_scene to "variable_scene1" and it does stuff. Is that what you're wanting? current_scene = "variable_scene4" face_element = { visibleScenes = { variable_scene1 = true, variable_scene2 = true, variable_scene3 = true }, visibleIn = function(self, scene) return self.visibleScenes[scene] or false end, draw = function() end } face_element.draw = function() print("drawing face_element") end if face_element:visibleIn(current_scene) then face_element.draw() end
Guys … Thanks for your responses. I can't get any of these solutions to work, possibly due to my lack of understanding code. Looks as if I'll have to duplicate my objects and set each to a variable opacity.
Sure. This particular project's source code is at https://github.com/vzhong/torchlib/tree/master/src. You can also click the "view source" link in the documentation to jump to the source code on github.
https://peersuasive.github.io/luce/ for the lazy.
Check out [the Debug library](https://www.lua.org/manual/5.3/manual.html#6.10), and `debug.sethook` in particular.
… and for anyone that's interested, I worked it out. It's as simple as adding two dots '..' Between 'var_opacity1 .. var_opacity2
Can it work LPegless? Would be useful for a project or 2...
What's the regular moonscript compiler written in? It's not self-hosting yet?
Moonscript should be LuLPeg compatible
But that wouldn't be as fast as a hand-written lpegless compiler.
Nim and Lua look alike, they are good partners. This project also eases the pain of binding nim to lua.
no specs? looks risky!
What's missing? (LuLPeg author here)
There is actually a second string type you missed, the multi line string. Str=[[multi line string [=[ equals are allowed between for nesting]=]]] Str2=[=====[ you can also have as many equals as you want, as long as both the start and end match]=====]
Yes, I'm aware, but those are as simple as `local _,start,eq = string.find(s, "[(=*)["); local finish,_ = string.find(s, "]"..eq.."]", start, true)`.
There are no PR for Crescent, I suppose you refer to a MoonScript PR... All I could find on the topic is [this](https://github.com/leafo/moonscript/pull/109), which says that LuLPeg is supported, even in Lua 5.1 environments that don't support proxies (replacing `#pattern` with `L(pattern)`)... 
This function blocks the CPU. If your program needs to sleep you should check http://lua-users.org/wiki/SleepFunction. Their proposal for a blocking function (*busy waiting*) is: function sleep(s) local ntime = os.time() + s repeat until os.time() &gt; ntime end
That has several names, a spinlock, a busyloop, etc. The idea is the same, it's waiting by executing as much code as it can (the repeated calls to os.time), rather than doing the right thing and yielding control to the OS until it needs to be woken up. There's a page on the Lua users wiki ([link](http://lua-users.org/wiki/SleepFunction)) which details other methods to sleep. Your best solution, in my honest opinion, is to not wait if you can help it. This is most likely for a game, the engine you're using (love2d?) likely has it's own mechanisms for delaying time. if it's a text adventure, then instead of waiting, prompt the user, like so: io.write "Press Enter to Continue. " io.read "*l" 
Awesome! Put this on Luarocks and Github and you will get more traction.
Keep in mind that once compiled, the code will run at the same speed whether you ran it through lpeg or lulpeg, as you (should) get the same result and load it into the vm either way.
LPeg is C so GCC can heavily optimize it, LuLPeg is Lua and Lua sucks at optimizing things. And it's interpreted. LuLPeg is like a VM in a VM.
Ooooh. Nice. I'll look into it later.
LPeg compiles LPeg patterns into LPeg bytecode which runs in the LPeg VM written in C, LuLPeg compiles LPeg patterns into LuLPeg bytecode which runs in the LuLPeg VM written in Lua which runs in the Lua VM. This is like low level programming 101.
They are both pattern matchers for Lua and are used to parse Moonscript. You aren't running your code on a vm inside of a vm. You're transpiling Moonscript to Lua, then running the Lua code. That transpilation time should be the only thing affected by a switch from LPeg to LuLPeg. Your application written in Moonscript itself should be doing the exact same thing regardless of whether you use LPeg or a patched Moonscript transpiler that uses LuLPeg.
Do you understand that a program written in Lua runs in a Lua VM, which's inherently slow? Do you understand that a program written in C runs directly on the CPU, which's much faster? Do you also understand that `luac`/`load()` doesn't do any bytecode optimizations, while `gcc` and `clang` optimize the assembly code as much as they can? All this contributes to LuLPeg being significantly slower than LPeg, and thus the parsing of moonscript would be significantly (read: orders of magnitude) slower with LuLPeg than with LPeg. Do you understand english or do you want me to google translate this into something you can understand?
Oh, I had no idea `os.rename` also worked with moving files! It seems kind of weird that it's called `rename` then. New version (and 1.1 tag) is gonna be pushed in a few minutes.
Generally moving a file in a file system is just changing the reference to where it is located. The file itself doesn't actually move anywhere.
I actually do know that, it's just that the naming of the function confused me. Anyway, it's now fixed, `fs.rename` now uses a simple match to hopefully make moving files through it impossible (I just put a match there for the directory path separator the system uses, rest of the validation should be handled by os.rename).
Copied from another reply of mine: * The `io` wrappers that just accept a filename without file handlers (`fs.read`, `fs.write`, `fs.append`) * `fs.copy` * `fs.appendcopy` * `fs.move` * `fs.appendmove` * `fs.size` * recursive `fs.rmdir` * `fs.separator` to get the system path separator * `fs.system` that uses `fs.separator` to differ between Windows/Unix-like with an option to use `fs.call` (`io.popen`) to identify the Unix-like. * `fs.randomname` and `fs.tmpname` * `fs.files` that wraps `lfs.dir` but removes the references to `.` and `..` * `fs.run` and `fs.call` let you put options as arguments and puts quotes around each of them, although it doesn't sanitize input by itself (yet?) * `fs.usetmp` and `fs.usetmpdir`, probably my two favourites, they make sure you don't forget to clean up the temporary directories/files and they make sure that you don't use an existing directory/file I made it because I didn't like using 3 different APIs (`io` for write/read, `os` for move/remove and LFS for remove dir/make dir/etc.), which is what MiniFS attempts to fix by providing a very similiar API for all cross platform filesystem actions.
Something to consider, but since you're writing to at least a thousand files, you may want to include leading zeroes (i.e. 0001, 0002, etc...) so that they properly appear in order on your file browser. for i = 1, 1000 do file = io.open("results_"..string.format("%04d", i), "w") file:write("blah") file:close() end 
Read TimMensch's full post, which was interesting, fact-filled and well worth my time. Lua is good at being Lua, that is, a minimal language that can be seen as a nice, compact, C library that happens to have a tiny, if extremely well-designed, Turing-complete interface. The Lua creators are AFAIK literally unique is having this vision and sticking to it. This means it can't compete with general purpose languages on features. It's a tribute to Roberto and team that anyone would even think of making the comparison for such a small language. And in being unique, Lua is stuck with whatever infrastructure it attracts. We could certainly wish there was more.. I'm making more and more use of Lua, but as "glue". I can't imagine a time when Lua and C are the only languages I use. But I definitely wish I'd started my current C library by, on day zero, bundling Lua in, and will definitely do so from now on. Long ago, to improve my C, I read the Lions book carefully from end to end several times. I'd recommend that to a young C programmer, but first I'd suggest they read the latest version of Lua. The best way to learn is to see how the experts do it, and IMHO there's currently no better example out there than Lua. That alone would make Lua note-worthy. Hello Lua!
To avoid concatenation and keep the code simpler, the second line could be written just file = io.open(string.format("results_%04d.txt", i), "w") Lots of concatenations can make the code slower. In this case, it won't make difference, but it will if the number of concatenatios are much bigger.
TypeScript is more than just static typing at a compile phase. It's also the editor integration, auto-complete, standardized tools that recognize and accept the types (like jsdoc, which won't be broken by type annotations, and tslint, which lets you add extra linting rules that will, again, be marked in real time in your editor), and source line-mapping that works in all of the major debuggers (so when extra code is added to validate types or to support extra features extending JavaScript, the original source will be shown as you step through the code). I did know there were a couple of typed Lua variants, but because the types are such a small fraction of the benefit, I didn't mention them. 
Really? That is ... profoundly wrong, but you could be right. [This page](https://trac.webkit.org/wiki/JavaScriptCore) implies it's part of WebKit. But Apple could be disabling it unless you're in a WebView, as you suggest. Found [another comment](https://github.com/phoboslab/JavaScriptCore-iOS/issues/19) that implies you're correct, though they made a point that you could potentially bind to a JavaScript context in a WebView...ugly, though, and possibly not useful if you can't bind to your app as easily, or at all. OK, I believe you. I'll update the article.
&gt; I started using it for more than just "a bit of scripting" ... And that, right there, is the error. You found a screwdriver you liked for Philips-headed screws. You decided to try using it for Robertson-headed screws. It kind of works if you push hard enough, but it strips the screw heads and is generally all kinds of pain. So now you're giving up on Philips-headed screws entirely and using only Robertson-headed screws. Even for flat-head screws... Next time keep using the tool for the job. If the job changes, so does the tool. This mania in software for having a single tool do all and be all is sheer madness to me. (And it's madness that dates back to the 1960s at least with PL/I.) You're propagating that madness here. First you use Lua in its area of competence. Then you start using it outside of that area of competence. Then when it isn't any good outside of its area of competence you're abandoning it entirely including in its area of competence. You seem to believe in the silver bullet and you're hunting fruitlessly for it. I predict in under five years we're going to see a Tim Mensch blog post saying "Goodbye, Javascript" because it doesn't do something it was never intended for and you tried using it anyway. Then you'll give up Javascript entirely because you're going to misapply YET ANOTHER tool in your vain hunt for the tool that is all tools. Good luck.
There should be typesafe option for Lua as well.
I don't disagree. So far developing in Javascript has never been much fun for me. While Lua is. I love Lua. But making your tool more approachable might be worth a personal downgrade. Even though Lua and its syntax is trivial, programmers that will probably pick it up in a few hours hesitate to even look at it. This would go away with JS as more programmers have already been "forced" to look at Javascript at some point. So far I've not had to make a decision on that topic. I'm happy about that as leaving Lua would break my heart.
&gt; Which version? A lot of people say LuaJIT is unambiguously better but I personally prefer tecgraf Lua because it has unicode support and is very easy to integrate in any build system. Why not support all of them?
Good decision. In addition to the points you've mentioned, Lua's embedability "advantage" is completely destroyed by Duktape. JavaScript is eating Lua alive, and it's glorious. One more down!
I used it for a lot of jobs. It's no longer the best tool for any of them, and there's cognitive load in using too many dissimilar tools.
JavaScript has problems, but it's *strictly* better than PHP. Some of the crap overlaps: There are type coercion problems in both, for instance. But as Crockford describes in [JavaScript: The Good Parts](http://javascript.crockford.com/), you can use a subset of JavaScript (enforced by a linter) that then makes the language behave in a predominantly sane manner. Many of the coercion problems center around the == operator, for instance, but the === operator won't coerce. And this is *well known* among JavaScript users; not ignored, as you implied. No, it's not universal, but probably 90% of JavaScript *users* are junior developers who can't tell JavaScript from C++ OR PHP, so of course many wouldn't know... More, though, JavaScript has many of the same advantages as Lua: JavaScript has had closures, first class functions, and prototypal inheritance from the start (both JavaScript and Lua gained inspiration from a language named [self](http://www.selflanguage.org/), if I remember correctly). And PHP architecturally doesn't have the ability to write asynchronous code. So it can't scale the same way JavaScript can (HHVM does have *some* async ability, but it's not as complete, and it's not baked into 99% of the libraries and frameworks like it is in Node and JavaScript). With ES6 fixing many of the remaining problems (when using the newer language features -- **let** and **const** instead of **var**, **for-of** instead of **for-in**, etc.), and TypeScript supporting all of the ES6 features today via transpilation, in addition to full optional type signatures? No, it doesn't suck to be here any more. It's actually quite an awesome toolchain. The JavaScript world is different than when you looked last.
Use TypeScript if you can, along with VS Code as an editor; make sure you have source maps enabled. Get the development environment together takes a small amount more work (you have to run a compiler to turn the TypeScript into JavaScript, or you have to set up your web page to compile-on-load), but I swear the power you get from VS Code and TypeScript will be worth the effort.
If it works for you, great! None of the reasons I switched have anything to do with someone who isn't a software engineer writing huge projects. It's a particularly good language for beginners for many reasons.
I'm the author of the [Haxe Lua](http://haxe.org/blog/hello-lua) target. It's still very new, but I believe it can help Lua grow, and keep long time Lua folks from jumping ship to a completely different ecosystem. Haxe is in many senses a very different language than Lua, but it addresses many of the authors complaints: 1. LuaJIT is in permanent maintenance mode : Haxe can't really solve this one, but it does give you the option of adding new language features on top of a stalled target. 2. Lua version fragmentation : Haxe Lua abstracts away some differences between 5.2, 5.3, and LuaJit. 5.3 is only supported with backwards compatibility support for now though. 3. JavaScript's ecosystem is awesome : You can use the javascript ecosystem with Haxe as well, as it has a very mature js target. 4. Lua Coroutines are no longer a monopoly : Haxe has several asynchronous options. These options include promises, and theses features abstract over whatever asynchronous options are available on a given platform. 5. Type annotations FTW : With Haxe you get three different type systems, each more powerful than type annotations : OOP, structural typing, ADT/pattern matching (in addition to Dynamic/runtime typing, if you don't want typing for some reason). I'm not going to pretend that the Haxe and Lua languages are related, but I think Haxe is a very promising way of building more sophisticated Lua based applications. E.g., It is now possible to use one language to target an nginx/lua, redis/lua, and javascript stack. In fact, that's what I'm going to try and work on in the near future here.
&gt; I didn't even get in to the fact that, using Promises, you can not only get coroutine-like behavior, you can get strictly better performance by doing several queries simultaneously and aggregating the results: I've not had a reason to look at promises for any of my Lua code yet, but a quick search reveals a [module](https://github.com/zserge/lua-promises) that looks promising (sorry!). It even has almost the exact same use case in one of its examples in the Readme: https://github.com/zserge/lua-promises#waiting-for-a-group-of-promises That said, I still think that real coroutines (so you can yield anywhere in the call stack, not just in the called function) are way more powerful than promises for some usecases. In a [programming game](http://infon.dividuum.de/) I wrote I used coroutines to basically inverted control from my C host program to Lua and created an extremely simple way of writing a networked command line interface: https://github.com/dividuum/infon/blob/master/server.lua. I could have uses callbacks or promises (I guess), but it would still smell like callbacks then. I also didn't use another Lua feature for that code, but I could have also used TCO to infinitely jump back and forth between functions. Apparently ES6 has those too, which I didn't know before writing this response.
Your capitalization function can be simplified to `return s:sub("^%l", string.upper)` 
Cool! I use Lua for live coding too. Are you the guy behind Praxis?
Yes. Do you like it?
&gt;Who knows, you might come back in couple years. I am optimistic. You never know. But it seems like it would need an "And then a miracle occurs..." step... :)
I won't tell you that you should leave. I can just explain my own motivations. I really like Lua at some level, but have really recognized the value we're losing by not having type annotations and a robust ecosystem. I can't stay unless I'm planning on rebuilding (or helping to rebuild) *all* of that value -- and tell me, with a straight face, that the community wouldn't resist at Every. Single. Step. But good luck! 
Haxe has been on my radar for years. I'm (historically and currently, but not always) a game developer, so I come across references to it, and even know people who use it. Looks like I first bookmarked it in [2012](https://pinboard.in/search/u:timmensch?query=haxe), in fact. :) But I've never really tried it, primarily because it felt like yet-another language "like" C or JavaScript that simply wasn't C or JavaScript. Different without a compelling reason for the difference. But maybe I'll take another look...for my next project. Already changed technology stacks for this one too many times. ;) I think when I first looked at it, it wasn't open source? Haxe having Promises is interesting. But what about tooling to go along with type annotations? As I mentioned in [this other reply](https://www.reddit.com/r/lua/comments/4ld6ao/goodbye_lua/d3npg12), having the compiler check the code is only *one* piece of the puzzle. I see that the editor I've been using *really* recently [has a plugin](https://github.com/vshaxe/vshaxe), but it looks rough. What other editor support could I expect? I don't agree that "OOP" is more powerful than what TypeScript gives you -- except potentially runtime private values and methods? But that's something that I don't actually care about. TypeScript *also* supports structural typing, as well as type inference. I'm not familiar with ADT/pattern matching, and I'm not finding the reference on the [Haxe Wikipedia page](https://en.wikipedia.org/wiki/Haxe), unless you're talking about the enum/switch pattern matching? Which honestly is a pretty cool feature. This line from the Wikipedia article troubles me some: "but content built with OpenFL currently suffers performance issues on mobile devices" ... I'm targeting mobile web/JavaScript in WebGL/Canvas right now, so that would be a showstopper for me. :( How is Haxe-&gt;JavaScript source map support? That would be another showstopper, if I can't debug in the browser. With the right answers, Haxe could be in my future, though. Thanks for bringing it back to my attention. 
Yes, there are 2 solutions: 1. Redirecting `stderr` to a file 2. Using `pcall` function Example using `pcall`: local status, result1, result2 = pcall(some_function, arg1, arg2, ...) -- if status is false, it errors. result1 will contain the error message, result2 will be nil. if status == false then -- Write to custom log write_error_log(result1) end -- Process the result1 and result2 values. Example `dofile` with `pcall` local status, message = pcall(dofile, "filename.lua") if status == false then print("Error when loading filename.lua: "..message) end
[finding this made me so happy](https://github.com/neopallium/llvm-lua)
sup!
&gt;(Not to mention they're also all amazing folks) Granted. Fair enough. :)
Awesome! I will need help putting some flyers in some murals as I'm not in Rio until a day before the conference. I'll send you a private message :D
Thanks! Yes, I use it daily for all my development, and have done so for a couple of years now. And thanks for the nice feedback, I hope it will work out well for you :) As Shalabh said, let us know if you have any suggestions or other feedback!
I've been developing large JavaScript web applications for a few years (for my job, and for fun), and have recently started using Lua in my own time. Having read this and the post this is responding to, I thought I'd share some thoughts. - Using any language in isolation will result in frustration. JavaScript is still the easiest and most frustration free language for web development, when used with good practices. However, trying to use it in other domains that it wasn't designed for will result in a frustrating experience. Even lauded frameworks like React Native are still works in progress, and require a fair bit of native development. Lua excels in its own right as a flexible embedded language, and frameworks like Love are an exciting way to exploit this flexibility. Having a niche isn't a bad thing, and you should use the best tool for the job. - Having said that, both JavaScript and Lua face the same challenges when it comes to applications that are a certain size or criticality. JS has been striving to find a paradigm for years that makes developing these large applications safe, stress-free, and relatively bug-free. Recently, a big focus on using functional techniques has yielded some interesting results (redux, react, cycle), but whether these ideas on structuring applications work for all types of application is yet to be seen. With Lua, I feel it's actually a bonus that you can write parts that are performance or safety critical in another language, and leave the more expressive and fun parts to Lua! - A large ecosystem and community is valuable. One of the things I've missed when I started using Lua is the discussion and tangible sense of progress. I've looked at using third party libraries, but lots of them seem left for dead. There's also nothing better than being able to trust some third-party code, partly because you know a large company like facebook or google is using it in production. I also enjoy the fact that experts from other realms (languages, professionalisms) are bringing their ideas and practices to JavaScript, which I haven't felt as much in Lua (but that could just be me). Also, the dev tools in JavaScript are pretty fantastic. - Lua feels like the good parts of JavaScript. The two languages definitely have a lot of similarities, but as Douglas Crockford's well known talks/books mention (https://www.youtube.com/watch?v=hQVTIJBZook), JavaScript definitely has a subset of good parts. It also has some scary and just plain wrong parts! With Lua, it feels like most of the decisions that went into designing the language were just right. It's expressive and simple. Even the more dangerous parts (metatables) have safety designed into them.
I do not understand these "leaving" posts. They smack a bit of melodrama to me. One does not leave" a language. Sure, you can put it down and not use it again, but it is not like you unlearn it. You can always go back and use it when appropriate, even if it doesn't currently suit your needs.
It is more about the bonding and community that people (myself included) felt, at least in my own case. Can't speak for others. I was on the Lua mailing list, and I used to participate frequently. I *knew* people on the list, including some of the bigger names, and we had discussions outside of the list. I've contributed to the state of the art in Lua bindings, and participated in a hundred little ways to the improvement of the ecosystem. It wasn't "just a tool" to me. It was practically a philosophy, and it certainly was a community. I wrote what I did because it was what I *felt*. Look at my blog history. I write something every 2-12 months, at best. I have no ads or other monetization. Yes I could *use* Lua moving forward. I haven't converted all of my current tools to use other languages, so I technically still am. But I have, in a very real sense, "left" the language to its own devices. If I decided to stop using Python tomorrow, it would not inspire a long rant. In fact, as a side effect of "rediscovering" type systems, I've also written off Python, Ruby, and other languages. But *those* were just tools to me, as you described. Maybe you'll understand someday, or maybe you will only ever have tools. But I wrote this for the people who did care -- and there seem to have been more than a few.
Thanks for the reply! I am trying to use it more, just for the sake of changing habits for a while.
Good to hear that! Will do! Cheers.
Yeah, I only found out about it recently. It's a pretty useful trick that doesn't work in most other languages. Alternatively I could have used math.huge. I'm not familiar with Praxis, but your screenshot has me interested. 
That is a LOT of bunnies. Totally impressed. Running it on my Surface Pro 3 in Chrome, and it hit 10000 sprites before it started to *occasionally* dip below 60FPS. Just wow. OK, you've got my attention. Will look at it for sure. But I've promised myself that I would *not* change the technology stack of my current game until I'd gotten it to a releasable state. I'm prone to doing that, and have already done it four times, plus or minus, depending on how you count. Given how awesome Pixi is behaving, after I get the game done I may swap it in instead of Cocos2d if I end up with any performance issues.
Good to hear, and good luck on your next project.
So my question is, why do you have to stop participating in the community, even if you prefer something else? You phrase things in the past tense, as if you must sever all relationships with these people because they no longer fit into your ideology.
&gt;why do you have to stop participating in the community Time commitments. There are only so many things you can spend all of your time doing. :) Also, cognitive load. Lua has be demoted from "something I actively think about improving and contributing to the ecosystem" to "a tool that I might occasionally use." I've never been on a Python mailing list. Or the Python Reddit group.
Cool project! But yes, it does seem like some kind of paid commercial-backed support might really be necessary to make a language development environment that can compete. Facebook has a similar (though IMO inferior, at this point) type system called FlowType for JavaScript. And other popular modern languages with thriving ecosystems like Go (Google) and Rust (Mozilla) also have corporate backing. Thinking about other popular languages, I was wondering if Scala had similar support; turns out they [received €2.3 million from the European Research Council, and the backers started a company that received $3M in investment to continue development.](https://en.wikipedia.org/wiki/Scala_%28programming_language%29) Short answer: Yes. Even Ruby didn't really take off until Rails (backed by [Basecamp](https://en.wikipedia.org/wiki/Basecamp_%28company%29)) was released. And Ruby was a nightmare of VM-level memory leaks and crash bugs for years...I think the bar is higher today, though.
The physics module is pretty redundant and heavyweight if you do only simple physics like collision detection and platforming, though, so usually it's wise to disable it and write the simple physics yourself.
thank you for your points, man. about reduce function, I updated it with your suggestion ;) about min and max methods, unpack function doesn't exist in Lua 5.3.
This is impressive! There is [luajit-lang-toolkit](https://github.com/franko/luajit-lang-toolkit) for something similar targeting LuaJIT bytecode, but it doesn't do much static analysis. And LuainLua also shows how to implement supporting tools for generating parsers from grammar a-la Lex/Yacc. Looking forward to seeing how this project develops.
Oh god, JavaScript? Jesus christ.
Are you sure that's the problem? What error are you getting that makes you think that's the issue? Your issue is much more likely to be that table1.insert isn't actually a function (and if it was the call would be missing a argument). You probably meant table.insert(table1, math.random(23))
Your question is not really clear but I will try to guess what you meant... The first equal sign is an assignment operator. The second one is "for number" loop syntax. It's not the standard assign syntax that you use in table1 = {} line. The third equal "==" is actually a comparison operator that returns true if both sides are equal - there's no assignment here nor it is the numeric for syntax.
If the "/" isn't an integer division then k/5 == math.floor(k/5) is true if and only if k mod 5 == 0 (i.e. for k = 0, 5, 10, 15, ...). If it is an integer division, You need to tell us more about Your environment.
That's nice. What was the error that the one that didn't work gave you? If you tell us, maybe we can tell you how to fix it.
The error is File "C:\Users\Arthur\Desktop\Lua files\start.lua", line 2 for i = 1, 100 do ^ SyntaxError: invalid syntax It occurred using the latest version of Lua from [here](https://code.google.com/archive/p/luaforwindows/downloads).
A better way would be to use modulus. ie: if k % 5 == 0 then etc
Which development environment are you using?
Why are you using Python to execute a Lua script? rofl
I'm not too sure. Maybe.
What message do you get ? It runs fine when I try it.
So... Could I run LuainLua in LuainLua in Lua?
Yes, it's self-hosted. One of my earlier test cases is just a plain while loop that compiles the entirety of the project, use that to parse and run the test-cases, and when that succeeds, use the LuaInLua in LuaInLua to once again compile the compiler, use that compiled compiled compiler to run the test cases, and when that succeeds, ... The bytecode also reaches a fixed-point (at least for the compiler) after two iterations, so I have some hope that the compiler is idempotent as well. But I'm not going to claim that since it's too strong/strict of a claim to make :P However, there are still bugs. Each developer has a particular style and sets of coding conventions, so I probably (definitely) missed out on some semantic nuisance that isn't covered by my usage of the subset of the Lua language. Nevertheless, it has been an interesting experience getting acquainted with the less-often seen corners of the language :) edit: here was when I tried to test for idempotence: https://github.com/leegao/LuaInLua/commit/375800688bdb15fb27ca7412ee295f6e837e2074
If you come to find LuaBridge is not what you are looking for, give https://github.com/ThePhD/sol2 a try... I haven't used it yet but it looks very promising...
May I ask why you don't have access to the original Lua sources? I'm not aware of any way to decompile Lua bytecode.
Seconded. Those wrapper libraries needlessly complicate things, in my experience. The C API is really well designed, and it's guaranteed to last.
Which version of Lua is this? I have a compilation toolkit that targets 5.2 that lets you undump bytecode into a table, modify it, and then redump it back out as raw bytecode. If you're on 5.3, I should be able to upgrade it accordingly.
Agree. I've seen people go full circle only to go back to little or no wrapper. A C++ layer to make calling Lua C API more C++ friendly is all one really needed. 
Thanks for the input, I've not worked directly with the C API before so I'll look into doing this before I try any wrapper libraries.
"Clean, simple and easy to use" is why I chose Lua in the first place, so I think I'll take your advice. Thanks for the input.
Try to delete that line and type it again by hand. Don't copy paste. Delete and type again manually. If you copied the code from a website maybe you have some stupid Unicode character in there.
I love how lua let's you program according to many different styles and handles them all very elegantly and is still very simple, fast, and efficient.
I'm also on that boat. I first encountered lua on a project at work. I had never touched it before. I decided to spend a day learning it and I can't believe how effective I was after a couple hours of playing around with love2d and corona. If I'm working in C/C++ and I need to expose a scripting layer lua is always the first thing i think of now.
I'm also on that boat. I first encountered lua on a project at work. I had never touched it before. I decided to spend a day learning it and I can't believe how effective I was after a couple hours of playing around with love2d and corona. If I'm working in C/C++ and I need to expose a scripting layer lua is always the first thing i think of now.
I went through a similar journey! I started on it because it was invented in my university and I was very positively surprised! 
Lua is the only language I know. I have this one music project I'm working on that is software that generates music (in a novel manner, I think). I made a list of five languages that seemed good to use for various reasons: Lua, Scheme, Ruby, Python, and Perl. I tried my hand at all of them and it was with Lua that I was able to hit the ground running the fastest. Ie, I was able to make sounds with it faster and easier than I could with the others. Since then as I've learned more about programming and other languages I've discovered its many charms. It keeps things simple and it's quick. And since my project allows *mods* (what I call *Style Algorithms*), Lua was a lucky choice given its popularity in that domain.
Call the method `settimeout` with `0` as its parameter on the UDP socket before calling `receive`. If the data is not available, `receive` will then return `nil, "timeout"`.
I haven't tried it, but the top answer here describes a way of calling C# code from C++/CLI, and then exporting that with a native C interface. If that works, you could call it from something like the LuaJIT FFI. http://stackoverflow.com/questions/17127825/c-sharp-unmanaged-exports
A quick google search for "lua c#" yields this as the top result. http://nlua.org/ Looks like you can accomplish what you want but not exactly in the way you described. Lua does not exist on its own and has to be embedded within another application. Therefore, you could create a host application with all your image processing functions, then execute a "main.lua" or whatever from within that application. Your main.lua (or other modules it references) could then make calls back into the host application. 
I'm not entirely sure what you're doing but p(w)x is not correct syntax. If you explain your use case better, I'm sure we can help you craft the function you need. 
 p = {} --Creates the table p[1] = 5 p[2]=1 -- assign values to the table function add(...) for i,v in ipairs({...}) do print(p[v]) end end --Creates a function called add that receives multiple arguments (...) and print the values of the p table add(1,2) 
(/u/revereddesecration is right, `p(w)x` is illegal syntax. Assuming it was a typo because there's not even an x anywhere) I don't really get what you're planning either, but that code is just incorrect. I'm assuming you wanted to write: p1x = 5 p2x = 1 function _init() add(1,2) end function add(w) print (p(w)) end (Because you can't have `p1x = 5 p2x = 1` on one line, that's illegal too). Then, this code does nothing, because you've just declared two variables and two functions (you never called any of them)! If you did call your function later, for example like this: p1x = 5 p2x = 1 function _init() add(1,2) end _init() function add(w) print (p(w)) end add(3) Then stuff would crash because you're trying to call nil (add is not declared yet when you call `_init`). Doing it this way: p1x = 5 p2x = 1 function _init() add(1,2) end function add(w) print (p(w)) end _init() Would also crash for the same reason, because `p` is not declared yet, aka `nil`, and you can't call nil. Also note that you seem to want to pass `add` two variables as you're typing `add(1, 2)` but you wrote `add` so that it only accepts one. The other will be silently ignored. Now, if I just ignore your code and try to answer your question: &gt; I'm trying to get a variable to be called depending on what value the function is given, but this isn't working. How can I do this? If you want to call a variable, that variable must be storing a function. So let's start there: `f = function() print("Hello World!") end` Then, if I understand correctly, you want to call it only if you get a certain value as a parameter. Here's an example that does that: `function(x) if (x == 1337) then f() end end` I probably missed your real intent but this is as far as I can go. Feel free to ask more or clarify what you want to do. All in all: f = function() print("Hello World!") end function test(x) if (x == 1337) then f() end end test(15) -- No output test(1337) -- prints "Hello World!" because f was called
This is the simplest way to get what you are trying to do working: p1x = 5 p2x = 1 function _init() add(1,2) end function add(w) print (_G['p'..w..'x']) end add(1) The variables p1x p2x actually exist in a global table _G, so you can create them by concatenating 'p', w, and 'x', then look them up in the global table. It's best to avoid globals where possible though so a better way would be to make a table to add them to, and make everything local: local p = {} p[1] = 5 p[2] = 1 local function _init() add(1,2) end function add(w) print (p[w]) end add(1) I'm not sure what you are doing with the _init function but if you are trying to call add() with 1 and 2, you need to do it separately, like add(1) add(2) you can't combine them as it would pass '2' in as another variable, which you're function doesn't accept, so it would be ignored. 
It sounds like you either have no programming experience or no Lua experience. Which is it? Here's how this example would be coded in Lua: p = { {x = 0, y = 0}, {x = 0, y = 0} } function setX(player, x) p[player]["x"] = x end function setY(player, y) p[player]["y"] = y end [Here's an example](https://repl.it/C3LO), just load the page and click run
So the problem is that you can't do 'p(t)x', it's just not valid syntax for referencing a variable name. You can create the variable name and look it up if you want to, but you would need to do it using '..' like in the example I gave. If you let me know what you didn't understand I can try and help more.
Thanks for your help. The global and local variables talk through me off a bit as I don't really understand that. I assume that is if your using multiple pages of code, however I'm only using one. I'm using the program Pico-8, which is a fantasy console that runs in lua if you haven't heard of it.
Yep, you could indeed just say p[1].x = 7 If you have any more questions, feel free to post them!
You can? Never tried it. Maybe you're right.
That error usually means you have too many ends. If you can show us the whole code, I can point out which one is superfluous. 
"Lua is good at being Lua" Couldn't agree more. I feel like people are trying to use stuff to do what is not made for. I work with Ruby, Objective-C, Java, JavaScript, C++ and Lua and each of these languages is nice on its jobs.
Thanks; I'm looking into the installation error. The docs for how to create luarocks are not very good; they don't mention anything about a requiring such a directory. Unfortunately as far as I know, no nREPL client exists yet for Lua. I've only been using it for connecting from editors, but of course there's no reason you couldn't use it from a programmatic client. The protocol is very simple, as you can see from the server implementation. I don't imagine it would take more than a few hours to cook up a client if you need it.
Hm; with that change I get "Error: Unknown protocol git+https" during installation. However, that's what luacheck uses: https://github.com/mpeterv/luacheck/blob/master/luacheck-scm-1.rockspec No idea what's going on here; maybe I'll just include a note in the readme that recommends avoiding luarocks and running from source. It's only a single file.
Upgrade your luarocks. Also, pack your releases using 'luarocks pack &lt;rockspec&gt;' and upload resulting '.src.rock' file to luarocks.org using 'Upload rock' link on the page for the version. This way users don't have to clone your repo to install.
Thanks, but upgrading my luarocks doesn't really help--it would allow me to install it on my own machine, but I don't actually *need* to install it on my machine. I want my software to be usable by other people who aren't going to be hassled to track down misleading error messages and pull in a manual install of a new package manager. I think I'll see if I can point it at a tarball and just skip git entirely since it seems to be problematic.
As I said, if you pack the rock users won't need to clone the repo, therefore, they'll be able to install it even using old versions of luarocks.
Lua only has a C api. Any binding or whatnot will have to use the C api internally. In any case, a prebaked Lua/C++ binding for something like this adds yet another layer to impact performance. It really is quite trivial to provide Lua with what it needs. If you needed application detail agnostic interoperability between C++ and Lua, you wouldn't want to write that yourself if there is a library to do it for you, but this can be achieved with nothing more than giving Lua a collection of functions that you already have to define in your engine and running the various script files at the right time.
Check out [these benchmarks](http://satoren.github.io/lua_binding_benchmark/). Yes, writing Lua C API code for yourself will always be better, but not **that** better. The perfomance of some other bindings is still pretty good. Almost all libraries introduce some overhead, but if it speeds up development progress and overhead is not that bad, it's worth it. Here's some code of doing stuff in Lua with sol 2: sol::state_view lua(L); lua["someFunction"] = &amp;someFunction; sol::function f = lua["someFunction"; f(); lua["someTable"]["someValue"] = 5; int x = lua["someTable"]["someValue"]; lua.new_usertype&lt;SomeClass&gt;("SomeClass", "someMemberFunc", &amp;SomeClass::someMemberFunc); This code is very readable, doesn't require you to modify your original functions in any way, no manipulation with stack required. And no, I can't just give free function to Lua, I have to write version of function which pushes arguments on the stack. Member functions and usertypes are even harder to give to Lua! (Yep, running scripts is very easy in comparison).
I rather abuse LuaJIT in my game. I have a giant lua state, containing all of my objects/tables etc. I then have a series of ..._Init.lua scripts, in a directory called run_once. These contain statements like: MyPseudoClassType = { } MyPseudoClassType.__index = MyPseudoClassType I then have the rest of my script files in various other organisation folders. These contain functions, certain settings etc. E.g.: function MyPseudoClassType:DoStuff(params) print("Woo, Stuff!") end I then have a command that basically refreshes and reloads all of those functional scripts. As the _init scripts are ignored at this point. All of the functions for my classes have been reloaded, and all existing instances are now using those new functions.
That seems like a very good approach. Interesting. Thank you!
There are rather good bindings for [libev](http://software.schmorp.de/pkg/libev.html) - [lua-ev](https://github.com/brimworks/lua-ev) In general, you should avoid using external programs (e.g. curl) if you care about performance or host resources.
Correct me if I'm wrong but this API doesn't seem to take advantage of coroutines?
Out of curiosity, what are you using to generate the sound? As far as I know, you can't do it without a lower level library.
I've compiled libev and have lua-ev working. If you know of any example scripts I can study, I'd appreciate that. I meant that I'll be using curl on my phone to send the messages to my RPi so my lua script needs to be able to handle http requests. 
Sorry to derail you from the event bindings but lua-http by /u/daurnimator is an excellent HTTP library
Yes. I doubt, that use of coroutines is possible with any **C-library** for event handling, because use of coroutines implies additional/custom stack, i.e. c_event_handler (e.g. on_timer) -&gt; lua_event_hanlder -&gt; coroutine.yield() -&gt; .. coroutine.resume() because after end of invoking **c_event_handler()** stack/context is gone, and you cannot jump back in. 
The underlying audio technology is MIDI. I use [this](http://www.pjb.com.au/comp/lua/MIDI.html) Lua library written entirely in Lua to generate MIDI files. It is more musician friendly than the other MIDI Lua libraries I found. The original MIDI spec had some serious limitations. Fortunately there is the [MIDI Tuning Standard](http://www.microtonal-synthesis.com/MIDItuning.html) which allows one, with some computing, to basically send specific audio frequencies to the MIDI file. (You aren't actually doing that but that's what it looks like from a high enough level.) And then if you have a MIDI synth, like Timidity but not Fluidsynth, that respects the MTS you're set. Not sure how much you understand about alternate tunings but I can have music that uses somewhere around 190,000-EDO tuning set against 10.666 octaves. That's pretty impressive. So my software then calls Timidity to convert the MIDI file into an audio file and Lilypond to generate a standard music score and pdfLaTeX to generate any graphical notation (using TikZ) you might want.
Can't wait til they fill out the new to sdr section. Since most people including me have never heard of it... 
i only had a quick look at the project. is there a list of supported devices?
Currently just RTL-SDR. Airspy support is coming. Other sources include file streams of various formats (binary IQ, binary real, WAV).
I know but could i get some help? my friend gave me this code and with hes steam id and the name everything was alright. i replaced it with my stuff and it broke the entire server
There is an lua driver for cassandra fully tested with busted I think it's great https://github.com/jbochi/lua-resty-cassandra/
http://torch.ch is a huge machine learning community that uses Lua.
If you want to read about good practices in Lua, my advice is to read posts from these blogs: https://blog.separateconcerns.com/ (by the author of [LuaToolbox](https://lua-toolbox.com/)) http://kiki.to/ (by the author of numerous Lua libs, like middleclass), http://hisham.hm/ (by the author of [LuaRocks](https://luarocks.org/)) and http://leafo.net/ (by the creator of [itch.io](https://itch.io/)). Without any order of preference. Also, you can check out LuaRocks and most of [mpeterv](https://github.com/mpeterv)'s projects.
1. Remove line 830 2. Remove line 815-817.
I would disagree- I think there's a fairly even split between camel case and underscores. Personally I've seen more tend towards camel case.
Corona SDK
Lume looks very interesting and digestible, thanks!
Check out this luvit blog post: https://luvit.io/blog/hardware-control.html You can use luvit, or look into using the libuv bindings directly with https://github.com/luvit/luv
Thanks! I'm definitely going to find myself using that soon.
This Elias Daler guy is me, so feel free to ask any questions. :)
Do you actually need to pass the source of the function? Or is just picking one from a set of functions you've defined good enough? Functions are first-class in Lua, so you can make dictionaries mapping a functions "name" to the function: local funs = {} ---- function funs.get(k) return data[k] end function funs.set(k, v) data[k] = v end function funs.increment(k) data[k] = (data[k] or 0) + 1 end ---- function call(fname, ...) funs[fname](...) end ---- call("set", "hello", 10) print(call("get", "hello")) --&gt; 10 call("increment", "hello") print(call("get", "hello")) --&gt; 11 The arguments to `call` could then be passed along as JSON and then decoded.
If you only plan to call global functions, you could simply do this: function call_global(name, ...) return _G[name](...) end call_global("print", "Hello, world!") --&gt; Hello, world!
Very nice. If I can make a few suggestions 1) make basex be a __call'able table (to preserve the semantics), and then add a bunch of standard encode/decoders to that table (like oct, hex, base64, etc.) 2) give it the Kikito treatment, which is to say add a bunch of fields to it like _DESCRIPTION and _LICENSE (see: http://kiki.to/blog/2014/03/31/rule-2-return-a-local-table/ ) 3) add luadoc style comments the public API parts. Otherwise this is a great little library, I like it a lot.
 Something[5] Is that a table variable looking up index `5` or a function being called with the table-as-parameter shortcut? 
Take a look at this PDF guide on the Lua code. http://www.g15-applets.de/download.php?id=2873 This forum is not specifically for modding peripherals - Take a look at this subreddit /r/LogitechG
Lua has a simple single pass parser. These kinds of ambiguity generally makes it more complicated. This seems like a mess to parse: y = [ [2] = x[5] ] 
Interestingly, Lua actually did used to use `[]` to construct lists, where `@[1, 2, 3]` would create a list and `@{x=1,y=2}` would create a table. This was changed in Lua 2.1, where lists and tables were unified and the @ symbol was removed. 
Hey, thanks for posting this it was great to listen to. I have a question about moving between the C++ / Lua gap. You mentioned that it is more expensive to call lua from C++, but how easily can you control C++ values from lua? Do you share much state in between the two?
I tend to use optional/variadic arguments for things that are somewhat list-like, or things that are optional -on top- of the expected behaviour. What you're doing looks like actual different behaviour based on the argument count. Why not just make two functions?
I updated the example to show that it does essentially the same thing either way. In the one case it just converts the points to the slope and y-intercept and then does the same thing as it does in the other case.
Yeah, I see what what you're saying. When I just threw this example together I forgot to do include that.
Yeah, that's what I was thinking would probably be theasier consensus. I've been thinking about making classes for each one
Yeah, I do in the code itself but I just threw this example together. Thanks
Yeah, I do something similar to that in the actual codebase itself. It looks like this: function checkPointOnLine( px, py, ... ) local m, b local len = select( '#', ... ) if len == 2 then m, b = ... elseif len == 6 then local x1, y1, x2, y2 = ... -- etc. end return py == m * px + b end 
Well, if your function did not accept arbitrary data (like in your case which acceps 4 or 6 arguments), I suggest to create 2 function instead or do something like this function checkPointOnLine(px, py, x1, y1, x2 y2) if x2 == nil then local m = x1 local b = y1 -- 4 args code here else -- 6 args code here end end
I believe that after you set the randomseed you have to call math.random first. In other words, try to change &gt; math.randomseed(Seed) to &gt; math.randomseed(Seed) math.random() source: http://lua-users.org/wiki/MathLibraryTutorial &gt; But beware! The first random number you get is not really 'randomized' (at least in Windows 2K and OS X). To get better pseudo-random number just pop some random number before using them for real: 
math.randomseed doesn't return any value. I presume you mean that subsequent calls to math.random() returns different sequences on different systems? This isn't to be unexpected, it calls the C function "rand()" internally, whose behaviour is implementation defined. You could always try using a pure lua RNG
Thanks for listening. :) Well, calling C++ from Lua is pretty cheap, so you can register getters/setters of C++ objects and call them from Lua. It's trickier to control Lua values from C++, yeah (it's mostly done with events, there's no general approach there), but setting changing Lua values from C++ should be pretty fast, because you can change them directly without calling any Lua functions. There's not much state shared, because Lua and C++ communicate mostly using events (though Lua sometimes calls C++ functions if you need to do something immediately). For example, collision detection and collision response don't share much state. Collision detection is performed in C++ and when the collision between two objects happens, C++ sends event to Lua which contains needed data: ids of entities which collided, intersection depth, etc. When Lua handles the event, it performs collision response by calling C++ functions like: setAnimation("hurt") or setSpeed(...). So it doesn't need to share state with C++, mostly it only needs to call some functions based on the event data it received. 
OP brought up a legit point, and people are downvoting him because he doesn't understand how something works. Smh.
If it's of any consolation, I can tell you that it runs just fine on alpine linux) Of course, it's just another libc library, not a different CPU architecture =) By the way, are you the one of the developers? If so, do you plan adding more docs or examples to this beautiful project? That would be awesome.
What would be? You get to choose your allocator.
Fully manual unaided memory management is almost never a good solution and I'm surprised this is still controversial. We have lots of solutions at this point so I think any language that doesn't learn from rust, modern C++, etc has done its users an enormous disservice. 
Terra is supposed to be minimal and C-compatible, and the user can make higher-level domain-specific languages. It's much easier to add features than remove or change them. And people are going to disagree about how automatic memory management should be done. GPU backends and other heterogeneous/esoteric architectures, for example.
But what advantage does it have over C?
My inclination is the set of prebuilt encoders/decoders, though I can see the merits of the dictionary. ¿porque no los dos?
&gt;C++ memory management consists of the programmer doing it all by themselves. Specifically, if you want to allocate a new Image, you could write `Image *image = new Image(file);`, and when you're done with it, you delete it, using `delete image;`. No. no no no no.
If you're manually managing memory manually in C++, you're living in the past. Nowadays you should be using smart pointers if you really need a pointer. People will complain that this is slow and to an extent they are correct. There is some overhead, but it doesn't make a difference unless you're in a performance critical section of code. Even better is avoiding pointers completely and using RAII and scoping to control object lifetime. Some good info here: http://stackoverflow.com/questions/76796/general-guidelines-to-avoid-memory-leaks-in-c
http://imgur.com/tyTc1Nl
I used Lua to make an API for a railway equipment testing tool. I needed something light, easy to learn and Turing complete to configure the tool, so Lua was the evident choice.
No, it is no useless, but, python will provide you more opportunities for sure. Lua is more of a niche language, but it will teach you important skills an techniques , that will be of use for learning other languages. So, it can be a good differential, but, don't rely only on that . PS: I'm from Brazil too.
Python is primarily a stand-alone language. Lua is primarily a *library*, designed to add functionality to a host application. If you're a C++ developer, having a tiny, highly portable C library that provides an easily embeddable, extensible, fast, efficient, *powerful*, user friendly programming language for configuring and/or scripting your application, is not useless. I use it all the time for its intended purpose: easily adding script capabilities to my C++ apps.
Languages are simply tools. Your true value will be in solving other people's problems. Just knowing a language whether it is Lua, Python, JavaScript, Java, C++, etc. is not the ends to being useful. (Though the more languages you know, the more tools you have at your disposal.) True understanding of both computer science fundamentals and how real world computers work will give you a leg up in being able to solve real world problems. I think Lua is an interesting language because it is a gateway language. The language itself is rich with computer science foundations (the language works pretty well with procedural, object oriented, and functional programming). The Lua virtual machine is understandable and modifiable which allows people to get an understanding of how VMs actually work. LuaJIT is an amazing resource of knowledge of how to apply effective JIT techniques for a real world language, showing understanding of compilers and hardware specific optimizations. Lua being written in pure C and the C-API being a first class citizen allows you to start understanding cross-platform C and things like DLLs, ABIs, calling conventions, and can lead into deeper explorations of things like FFI and debuggers. When evaluating potential hires, which programming language they know isn't that interesting to me. If they say they know Lua, they are not that interesting to me. But if they show me they solved some complex problem using Lua which required platform specific or hardware optimizations through the C API and modifying the VM, they are suddenly way more interesting to me than somebody who just knows some language like Python or C++. 
It's all relative of course, if there are job opening at places that use Lua, then it's a highly valuable skill. But overall, you can use the [Tiobe Index](http://www.tiobe.com/tiobe_index) as a rough and not very accurate initial assessment of what languages are more popular. My recommendation is make sure you learn how each language among the usual interpreted set is different from Lua. For instance Javascript's object model is very similar to lua's Tables, but there are key differences and it'd be very useful to know them.
Your friend sounds like one of those people who resents having to learn things, and only learns the bare minimum they need to do their job. You sound like you're not one of those people. So the question shouldn't be is it useful, but is it interesting?
No, Lua will never be useless. I like both Python and Lua but use Lua for anything I am serious about. I use Python when I am ok with picking from one of 1000s of packages that are half busted.
Are you using it with wireshark? I work for a voip provider as well. My main goal with lua is to use it to break apart sip calls from large pcaps. Would love to pick your brain.
Here are two examples of what I'm talking about. (1) Verisign gave a talk on how they use Lua for their high reliability servers. This is some what unorthodox because usually people just throw more hardware at the problem for redundancy (and more code for watchdog processes and switch overs). But Verisign wanted to be smarter and more efficient about the problem and used Lua because the codebase was so small and clean, they felt they could guarantee correctness in their codebase which means less redundancy and less cost. (2) Wikipedia uses Lua for their multimedia scripting engine. They chose it because it was fast, could be embedded and interact with their existing PHP based system, sandboxed out of the box, and was small and clean enough they could audit the codebase for security bugs. 
It's not useless strictly speaking (no programming language is) but knowing Lua will not help you to get a job outside of the game dev industry. If you want to learn for the sake of learning, pick any scripting language. If you want to learn a language to help you get a job I'd say Javascript or Python would be better choices. My pick would be Javascript since it can run anywhere and it certainly has a brighter future than Lua.
&gt; my colleagues know Python, not Lua, and I suspect that they will find Moonscript easier to read. I don't really understand this. I have only glanced at Moonscript, but Lua code is the most readable and approachable language I know by a pretty serious margin. I can look at Moonscript and guess at some of the fancier syntax sugar, and I can see myself appreciating it when writing it, but the idea that it would be clearer to someone who doesn't know the language is highly suspect. In particular the arrow lambda syntax is unusual, and the lax paren rules result in significant ambiguity. Personally I really like the implicit return behavior, but I think that would be surprising to Python users.
Nobody will subscribe to a newsletter with no idea of what it will contain... Site is literally empty, no content at all, why on earth would I subscribe?
+1 - we do know it will be "regular" intervals or "regular Lua" (Sad day, no crazy Lua).
Eh, I don't know why people seem to be so obsessed with Lua newsletters and Lua.space. Lua is doing just fine. What we ought to be working on is making Luarocks suck less, and making TypedLua better, and thinking about how we're going to approach WASM. Those three things are the three most critical things towards MASS Lua adoption, imo. A Lua newsletter? Maybe not so much...
Fully agreed! Sure the Lua "community" is fragmented and lives in odd places like Love2D, Torch, and GMod - but a newsletter will do nothing to pull them together. Also, news and blogs about the language as a whole can be little more than topical insights to the usage as a whole. If we were to highlight great developers who use Lua in great ways and blog about it, then thats cool. Starting a new hub is not so much...
will do, thanks. And it's only a mega link http://i.imgur.com/ntsq9YA.png
I'm no mathematician and I have some basic knowledge of RNG, so anyone please correct me if I'm wrong. The only "pattern" per say in the random number generator such as math.random is that the generated pseudo random numbers are uniformly distrubted. It's very, very unlikely that you'll find a pattern to a function such as math.random, whose sole purpose is not to have a pattern. You're best bet is to use this addon until you get a result you deem good, and save the seed produced from the randomseed.
Alright, thanks
There's not enough information. The ball's position is determined by local ballpos = self:SimulateBall(self.RollData.start, self.RollData.strength) and then that position is determined by function ENT:SimulateBall(start, strength) local elapsed, ballStopElapsed = self:ClampElapsed(CurTime() - start, strength) local initialVelocity = strength local ballAngle = self:GetBallAngle(elapsed, strength) % (math.pi*2) local ballHorizVelocity = initialVelocity + acceleration*elapsed -- convert to relative to wheel ballAngle = ballAngle + ballStopElapsed * wheelRotPerSec local ballRadius = self.ROUL_TOTAL_RAD - 0.02 if ballHorizVelocity &lt; 1 then local ballFrac = math.max(ballHorizVelocity, 0) ^ (1/1.5) -- note: normalize to 0-1 first if you edit ballRadius = math.Remap(ballFrac, 0, 1, self.ROUL_OUTER_RAD, self.ROUL_TOTAL_RAD - 0.02) end -- x flipped cuz texture is flipped. LAME but easieat hacky fix?? return Vector(math.cos(ballAngle) * ballRadius, math.sin(ballAngle) * ballRadius, self:GetBallYFromRad(ballRadius) + 0.02) end Where is that initial RollData determined? local w, x = 0, CasinoKit.rand.random() local y, z = CurTime()+w, 5+x; self.RollData={start=y,strength=z} Guess what you don't have. The CasinoKit library. All we know is that the strength of the roll is random. Which means good fuckin' luck, m8 Also, fair warning. The roulette table hits a server in Glorious Mother Russia with your IP every 60 seconds.
If you're requiring Love anyway then you can use [Luasocket's HTTP module](http://w3.impa.br/~diego/software/luasocket/http.html) and remove the dependency on curl.
You are right, but the idea was have some dirty-script to get the scrapping. I wanna add more features and, also, I will implement the module that you cite. Thanks.
https://www.amazon.com/Programming-Lua-Roberto-Ierusalimschy/dp/859037985X/ref=sr_1_1?ie=UTF8&amp;qid=1469519691&amp;sr=8-1&amp;keywords=programming+lua
[removed]
https://www.youtube.com/watch?v=S4eNl1rA1Ns https://www.youtube.com/watch?v=iMacxZQMPXs http://lua-users.org/wiki/TutorialDirectory
Book online http://www.lua.org/pil/contents.html
Programming In Lua (PIL) is definitely the go-to book for anyone using lua, amateur to professional. It contains everything from 'Hello World' to multithreading and i would definitely recommend it. On top of that, it is available as an online resource or you can grab a hard copy if you so wish. https://www.lua.org/pil/ 
I reference this all the time while working on LUA projects. Good material.
(The online resource is for an older edition of the book. Its still mostly relevant but the newer editions are only available in hardcopy)
why did you capitalize all the letters in Lua?
This series is a reasonable introduction for someone who's never used a programming language: - http://www.phailed.me/2011/02/learn-lua-the-hard-way-1/ - http://www.phailed.me/2011/02/learn-lua-the-hard-way-tables/ - http://www.phailed.me/2012/05/problem-solving-with-lua/ PiL (Programming in Lua, that others recommend) is a book targetted at people who already know how to program and want to learn the specifics of the language. It isn't a programming tutorial. It is a very good read as a second book, though. 
Format it for fucks sake …
Without proper formatted code I would guess that the first thing you do is `return`. Noting else happens afterward...
Decent post. I didn't know a table could be used as an index in a table, interesting. 
Lua's flexibility doesn't cease to amaze me. I'll need to keep an eye out for places to use this new knowledge.
Oops, then I mixed it up with javascript. I can't find it in the manual so you're probably right.
The problem is your comparison. Try if tonumber(answer) == tonumber(number) then ...
What's the problem? The code you posted is fine. 
Figure WHAT out?
`if playerCookies == 20 then ... end`?
this is for a math tester. It changes every "round" so eventually 20 wouldent work on the next round Thats why i used a variable
You are not explaining things well enough.
Read the other comments , i explained
This is the same problem as the last question you posted. Information received from a user is usually saved as a string. If you are going to compare playerCookies (which I am assuming is the user input), you need to make sure that it is seen as a number for your comparison: if tonumber(playerCookies) == Cookies then ...
Holy shit it worked. Thank you so much What is a "tonumber" and where can i find a list of all similar commands
The problem with lua gc in soft realtime application is unpredictable. If I create a temporary userdata reference a ImageData, texture, fbo instance, it could be dangerous to not free it imediatelly. Except call the gc method manually,which is what we do, but it's very annoying and easy to be forgotten.
Please read what I typed and FOLLOW THE INSTRUCTIONS THEREIN. I gave four bullet points. You supplied none of them. You need to learn how to ask proper questions so that people can actually help you.
Alright sorry changed it to code. I'm using Lua SciTE
The most popular book aimed at very novice programmers is actually this: https://www.amazon.com/World-Warcraft-Programming-Reference-Creating/dp/0470481285/ref=pd_sim_14_10?ie=UTF8&amp;dpID=51wlm1xcZ1L&amp;dpSrc=sims&amp;preST=_AC_UL160_SR127%2C160_&amp;psc=1&amp;refRID=8RJNNDVZS5X7MT4KHV20 It is targeted at people who are new to programming (and seems to be very popular) but most of the code relates to WoW. It could still make a nice add-on to PiL or the online tutorials because it might explain some basic programming concepts that resources aimed at technical people often overlook.
What are you developing for? `existsClick` and `wait` are not Lua keywords, you must be on a platform or using an external API.
Yup. He's a pretty cool guy.
&gt; (and if it doesn't exist in that table, but **that table's metatable** has an __index property, then it continues on up To make inheritance work, the __index property has to be set in a *metatable*, not in a table itself. myTable doesn't have a metatable so the lookup ends there. If you want endless recursion you also need to set myTable as a metatable for itself. Something like this will also work as you expected: myTable = {key = value} setmetatable(myTable, {__index = myTable}) anotherTable = {} setmetatable(anotherTable, {__index = myTable}) print(anotherTable['missing']) 
Looks like LPeg is the best tool for job, especially now I'm starting to get my head around how it works. In random travels I found this useful library of patterns for it (not useful for the project I'm currently working on, but assuming I'll be using LPeg for future projects as well, it's a useful link): https://github.com/daurnimator/lpeg_patterns
Pure LuaJIT implementation of LPeg https://github.com/sacek/LPegLJ
I just spent some time with an online lua interpreter and I've identified two particular issues you may be having: * io.read() returns a string and Lua doesn't cast variable types for you. Your line 13 should be something like *sleeptime = tonumber(io.read())* to parse the string as a number. * Having a variable with the name *health* and a function with the name *health()* is causing issues, your health variable is getting overwritten with your function. Change your function name to something else and that should fix your issue there. On that second point there, functions are a core data type in lua, which is why that issue exists. It's completely valid to store functions in variables and call them later, such as local p = print p("This will print to STDOUT")
Which functions? Got an example?
&lt; and &gt; are indeed operators. No idea if it counts as arithmetic though. Lua uses doubles internally. How did you expose the `.0`? Is this part of the new Lua? (I heard integers were a new type of thing in Lua, previously doubles were used for all numbers iirc)
Of course it's best to check input, and using tonumber and checking for nil is the way to do it
This is a subreddit for the Lua programming language 
Well, this was an unexpected read but it was pretty interesting at least.
Most anything. You may want to look at luv / luvi / luvit and ZeroMQ for what you're doing. https://www.luvit.io and http://zeromq.org/bindings:lua
You can manage a lot of those things, though the first and last items in your list are probably dependent on which OS you're thinking of running your program on. It's probably worth checking out luarocks for interesting libraries that others have developed for lua: https://luarocks.org/ A couple that might be of interest: * https://luarocks.org/modules/hisham/luafilesystem * https://luarocks.org/modules/evandrolg/watcher
All right, thanks I'll take a look at those. As for the OS I plan on running the program on Windows 7.
This. The control flow is as follows: See if anotherTable has a "missing" field, it does not, so: See if anotherTable has a metatable, it does (myTable), so: See if myTable has an __index field, it does (myTable), so: See if myTable has a "missing" field, it does not, so: See if myTable has a metatable, it does not, so: Return nil.
Hopefully this can be useful to some of my fellow Lua lovers! It is very new, so if you have any suggestions I'd love to hear them.
Wow, I had actually never seen inspect.lua but now I see the two are pretty similar, although inspect is certain more mature! Thanks for pointing it out :) Yeah, the differences I see would be color-coding and that mm uses names rather than numbers for the tables, which should hopefully be a bit more human-friendly.
Probably the first thing to do would be to use [the Emacs profiler](https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html#Profiling) to try to locate the function(s) that are the possible source of the delays.
Reason #325982398 not to use Emacs.
SUIT? Knowing how love libraries are named, I thought that was a typo...
Check out [LuaDec](https://github.com/viruscamp/luadec)
Levee maybe a useful toolkit as well. Although the documentation is very lean just now :/ http://leveelua.org/ https://github.com/imgix/levee It's on my radar to add async friendly file system watches to levee.
 Nothing technically wrong. It's just the people writing the test will have very little programming experience. I don't want to clutter up the tests with yields. Also if too much time is spent between yields the receiver queue will overflow and drop messages
The sleep times need to be pretty accurate for testing purposes. Also, sleeping is optional. If I don't check the receiver queue often, it may overflow 
&gt; The closest I can think of is using debug.sethook to insert yields after every X lines of code or so. Can you tell me how? I never getting this thing work and it always throws `Attempt to yield across metamethod/C call boundary` error.
Why don't you want to use threads? It's a bit like asking "is there any way to use the network without using the sockets api?"... Well yes, but it's much harder. Have all the functions you supply to lua just push operations onto an execution queue. Have an execution thread taking operations from the queue. Then you can control flow however you like on the actual execution thread. The lua thread can be easily shown to be thread safe because it only communicates via the queue.
5.1, but if I remember I also tested it under 5.2 and same error.
I wasn't sure it was going to work. If it didn't work on 5.2 then I guess we are out of luck :( 
Threading within your Lua app -- sure ... but how you supply API to Lua in your own half of the application is entirely your choice. Your fundamental problem is that you want to be running script and receiving from the network at the same time. That's crying out for threads. Obviously it's entirely your choice; I'm just offering what I'd do in a similar situation. Threads offer a lot of potential to shoot yourself in the foot, but that doesn't mean they can't be used if you aren't strict with yourself; and this particular instance seems to offer a way of being strict by only ever running operations in the operation thread, and keep the Lua interpreter running in a script thread.
Yeah that's what I tHought. Thanks.
Not possible with plain Lua. It does, by design, include very little. It does not do graphics, or sound, by itself. It needs a "host" to provide those extra capabilities. LÖVE is one of those hosts. I say that this is by design because Lua can be embedded in all kinds of things, appart from games - robotic arms, signal processors, routers, etc. As a result, Lua has the bare minimum of a language, so it can "fit" everywhere. The other side of the coin is that everything besides the basic language features must be provided by the host. For example, a lift controller does not require graphics or sound, but it must provide a way to move the lift up and down - LÖVE is the opposite. I suppose you could use [LuaJIT's FFI extension](http://luajit.org/ext_ffi.html) to call functions on an external library like [SDL](https://www.libsdl.org/) so it would handle graphics, sound, etc. But at that point you would again be using Lua + a "host" (SDL, in that case). The means in which your Lua code and the host communicate would be a bit atypical, that's all.
You can make a game using LuaJIT and calling system I/O libraries directly from it (without compiling or installing anything else). Not sure if this fits your description of "standalone". 
You can. Use ascii chars for the graphics. 
what? what did you change? why is it custom?
It does include some heavy libraries (like cURL and OpenSSL) and allow accessing string character by index (like `_VERSION[1]`)
have you considered putting up the source code somewhere? https://github.com maybe?
It's very messy and isn't cross platform. But I'll try. EDIT: looks like impossible. I referenced an absolute path in the project file.
Why not 5.3 these days?
You're misinterpreting your results, you're not calling (or using in any way) the return value of "asd". The text is being printed because asd calls print, forwarding the arguments you passed in.
Ooooh. My bad, I understand now. So the posted code is equivalent to: (asd("Hello"))("World") Extra brackets added for clarity. Another reason to avoid this syntax!
LUA is pretty basic, so it's a good language to get started with. Check out CoronaSDK, it'll make lua programming more effective (and easier) in my opinion. As for other languages, it has lots of similarities. But once you get the concept of objects, functions, variables, etc learning other languages will just be a matter of learning the syntax. Best of luck!
That's because `_VERSION` is neither a table constant (`{something = "here..."}`) nor a string constant (`"something here..."`/`'something here...'`/`[[something here...]]`)
Heroku. I have not deployed a sailor app specifically, but other Lua stuff. Take a look at an older repo that should give you an idea on starting up a Lua based buildpack: https://github.com/leafo/heroku-buildpack-lua You will have to do a lot of configuration yourself.
There's a guide to heroku here https://gist.github.com/paulcuth/5cffe9f4ed310dc0a49d :D
Thanks guys, i'll check these out
This was flawless, thanks a lot Etiene.
There's none that I know of, but … testing?
All the insert/remove functions are theoretically linear time, as they could require the array to be resized (copied). In practice, inserting/removing from the end of the array are usually constant, but anywhere else requires elements to be moved. Unpack is always linear.
I made a "test.lua" with following 2 lines: local input = io.read("*numbers") print(input) This is how console log looks like (the first line after calling Lua is user input): &gt; lua -e "test.lua" 234 234 &gt; lua -e "test.lua" test nil 
Try something like this: for i = 1,65535 do j = 40 + i % 2; print(i,j) end You should see: 1 41 2 40 3 41 4 40 5 41 ... Just use `i` and `j` :) 
This actually worked. I'm going to number my CUE such that they wont be in intervals of 1, the'll be at intervals of 100 to avoid having to iterate 65k times. cue=0 dmx=0 dmx_a=40 dmx_b=41 while(cue &lt; 500) do cue = cue + 100 if dmx == dmx_a then dmx = dmx_b else dmx = dmx_a end print(cue,dmx) end Print out: 100 40 200 41 300 40 400 41 500 40
I don't really get your code :) if `dmx = 40 + 1 % 2` then it's a constant expression. If you wanted to put `i` and not `1` it still could be calculated only once. You can also do a loop with a bigger step: for i = 1,65000,100 do ... end but then you need an extra counter to calculate dmx that changesbetween 40 and 41.
[It's Lua, not LUA](https://www.lua.org/about.html)
Literally it can be shorted to `io.read("*n")`
Weird, I don't have any extra libraries or anything. edit Actually its not weird, your input wasn't code it was text, when it has you type something for the io.read() type "print(1)"
Okay, I'm not sure why you are saying that it doesn't have anything to do with the post, I prefer to write things out in full. Everyone has their own way to do the same stuff.
If you are doing this from the REPL on Unix, then it's probably not doing what you think it's doing.
I'm doing it from the binary files on windows.
I gave up trying to figure out how you got yours to format that way `Lua 5.3.3 Copyright (C) 1994-2016 Lua.org, PUC-Rio` `&gt; local _ = io.read("*numbers")` `for x = 0, 9, 1 do print(tostring(x) .. " Hello world.") end` `&gt; 0 Hello world.` `1 Hello world.` `2 Hello world.` `3 Hello world.` `4 Hello world.` `5 Hello world.` `6 Hello world.` `7 Hello world.` `8 Hello world.` `9 Hello world.` `&gt;`
Your problem is similar to the problem found [here](https://stackoverflow.com/questions/7574164/how-to-read-until-a-given-character-in-lua-5-1) for detecting characters that are input as they're typed. You would need to use a curses or termbox library.
On most systems, the terminal is a relatively complicated program itself, and it primarily interacts with your program by providing three I/O objects (file handles, really) for it to read from/write to: STDIN, STDOUT, and STDERR. Things like recording keypresses and displaying characters are all handled by the terminal by default. Now, if you are on a *nix system, there *are* ways to modify a terminal's behavior. These are things like [termios](https://luaposix.github.io/luaposix/examples/termios.lua.html), [fcntl](http://luaposix.github.io/luaposix/modules/posix.fcntl.html), and [curses](https://github.com/rrthomas/lcurses) that allow more fine-grained control over how input is handled, what gets displayed to screen, and so on. For your problem, you could probably throw something together with [termio](http://luaposix.github.io/luaposix/modules/posix.termio.html), but be forewarned that what you're asking to do is a couple levels beyond simply retrieving user input.
 local function getNumInput() local in while true do in=tonumber(io.read()) if in then return in end print("\nThat's not a number, try again.") end end 
That's pretty awesome, I love seeing introspection libraries. I experimented with a [similar idea](https://github.com/leegao/see.lua) a few years ago (way before Lua had the type of traction it has nowadays) that also does a little bit of bitcode hacks to get debugging information out of methods. This way, as long as the code is compiled in debug (default) mode, you get things like &gt; see(lanes) .ABOUT[5] ._M[9] ._NAME ._PACKAGE .gen(...) .genatomic(linda, key, initial_val) .genlock(linda, key,N) .linda() .timer(linda, key, a, period) Metatable . It's been 2 versions since the original release for 5.1(.1 I believe) so the hacky introspection hack I wrote doesn't work anymore. I've been experimenting around with a self-hosted Lua compiler (for 5.2) which, among other things, also has a bytecode undumper (https://github.com/leegao/LuaInLua/blob/master/bytecode/undump.lua) that lets you play around with the bytecode. I'm currently fletching this out into a full decompiler (which is actually a lot easier in Lua's case than for most other languages since luac doesn't worry about peephole optimizations) and ultimately, I hope to be able to incorporate the decompiler (or even just to draw out simple "flow graphs") into an introspection library as well. I'll definitely watch out for what you're doing with `mm` :)
Something like this: https://www.youtube.com/playlist?list=PLxgtJR7f0RBKGid7F2dfv7qc-xWwSee2O I am working on a series of side by side comparisons of Lua with other languages now. Should be available within the next couple of weeks.
It's free, sorry.
Sure, just email me and I'll coordinate with you from there.
The search function is used when you are trying to access an index which is not in your instance. It receives the index you want to find and the list of your object's superclasses. It iterates trough those classes looking for the given index and returns the element if it finds one. It's like : "does the first superclass contains a "k" index ? - Yes ? Then return its content - No ? Then lets look in the next superclass etc" The __index metamethod, when being a function, is automatically called by lua when you try to access an element which is not in you table. It receives as arguments, the table in which you are searching an index, and the index you are looking for. Basically, if you try to access an index which is not in your table, lua will try to return __index(table, key) In the implementation of multiple inheritance you are using, the __index function returns the result of search(key, arg) with arg being the list of superclasses you used when creating your class (since arg contains the ... arguments received by the createClass function) And yes, deep child inheritance works fine with this implementation. the line "local v = plist[i][k] -- try `i'-th superclass" in the search function will also use the superclass' own superclasses to find the index Lets say that you have some classes : - class1, class2, class3 and class4 - class3, inherits from class1 and class4 inherits from class2 and class3 If you want to access a function inherited from class1 (example:foo(), example being an instance of class4), here is what will happen : - Lua will look for the "foo" key in example but won't find it - Lua will call the __index function in example's metatable - __index will call the search function - the search function will try to access the "foo" key in class2 but won't find it - the search function will try to access the "foo" key in class3 - since class3 has no "foo" key but has a metatable with and __index function, lua will try to call this __index function with class3 and "foo" as arguments - and so on ...
How can I join the class? Is it free or is it just something private you're hosting?
I don't understand what you mean, I linked an implementation that I'm asking about specifically. I get that you have to implement it
ANSWERS: It is indeed constant speed, there is no air resistance and no slowing, however, the ball does not spawn moving at infinite speed unless the player hits the ball till it's (in-game value) speed is 1000 or above (after 1000 speed is just for dramatic effects and flashing to represent intensity). There is ceilings and walls, that's it. The ball, when hitting/touching any wall/ceiling, stayes in a neutral position on the wall for 50-200 milliseconds (depending on in-game speed) or 1-4 frames, it then resumes it course, keeping the same magnitude/speed from before the bounce, but now is going the opposite direction of the previous angle (inverted x,y angle). The ball does not go down in speed or go up inspeed when bouncing off of a wall/ceiling, it only stops for a few frames, then goes the opposite angle. The ball moves relative to what angle the player has hit it towards, each player can choose (out of 6) characters that all have different preset angles, up, down, upair, downair, straight(stays same), smash(only in air). Here I will state some examples of ceiling and wall bounces and the uses of x,y angles: as said above ^^ when ball bounces, it will go the opposite angle from previous angle, if up left (x=left, y=up) when bounce on ceiling then down left, loop. If up left when bounce on wall then up right, loop. The rest can be said for down right/left etc. I have made a code that represents the angle/direction of the object. It gives me the x and y angle after the delay from getting hit or bouncing off of a wall/ceiling. WHAT I WANT YOU TO ANSWER: So i'm guessing that all I have to do is make a prediction method that gets the x,y angle, determines whether it's hitting a wall/ceiling, then gets it's current x,y coordinates before the 50 milliseconds are up and with that information, it will predict what the ball's x,y coordinates will be in x amount of time, if in x amount of time it comes into contact with the player, then the player will swing to hit the ball before it hits the player.
So why are you asking how it works? Just look at those few program lines, they show you exactly what it does. There is no other hidden magic.
Ok, it's not a Lua interpreter's, but interactive shell's behaviour what's looking wrong. But it actually isn't. Consider this log: Lua 5.2.3 Copyright (C) 1994-2013 Lua.org, PUC-Rio &gt; x = io.read"*n" 123 &gt; &gt; print(x) 123 &gt; y = io.read"*n" print"Hello" &gt; Hello &gt; print(y) nil &gt; z = io.read"*n" 312print"Hello" &gt; Hello &gt; print(z) 312 &gt; So, what the io.read"\*n" **in the Lua interactive shell** does is it reads all numbers until it meets not a number, and then switches back to the interactive shell input (like the very last example where I typed "312print"Hello"" and it was interpreted as two separate events: an input for io.read"\*n" and an input for the interactive shell).
It appears that repo has a Public Domain license, so people are pretty much free to do whatever they want with it including reproduce it on their own site.
First of all, you don't need to include the size on your first example - the # operator will work for that array-like table: things = { "foo", "bar" } thing = things[math.random(1, #things)] To your second question: Lua's parser can't process a table literal followed by an access. You will have to add parentheses around the table literal: return ({'foo','bar','baz'})[math.random(1,3)] I would still use the local variable tough. That way you could use the # operator instead of hardcoding the number 3 - if you ever added a fourth option to the table, there is a risk that you would forget to increase it (and introduce a difficult to find bug). Notice that creating tables takes a little time. You could be a bit more efficient if the table was created outside of the function, so it is reused instead of recreated: local things = {'foo','bar','baz'} function() ... return things[math.random(1,#things)] end The neatest "trick" I know about this is when defining a table which will contain lots of strings: local prepositions = {'aboard', 'about', 'above', 'across', 'after', 'against', 'along', 'amid', 'amidst', 'among', 'around', 'as', 'at', 'athwart', 'atop' } for _,p in ipairs(prepositions) do print(p) end It is tedious to write all those commas and quotes. But you can use a string instead: local prepositions = [[ aboard about above across after against along amid amidst among around as at athwart atop ]] for p in prepositions:gmatch("%S+") do print(p) end Same result, much easier to write and read. 
Sure, it's just not very nice not to indicate the source. Also this prevents visitors from submitting new packages or fixing things, and if they do at the original repository there is no guarantee this page will be updated.
This might help: function pick(...) return (select(math.random(1, select('#', ...)), ...)) end print(pick(1, 2, 3, 4, 5)) 
It depends if the scripts in question use Lua 5.1 features that were deprecated. It is probably fastest to just try it and see.
Thank you
It doesn't matter that much which one you learn. Once you learn a version of Lua, and have the Lua mindset, it is pretty easy to switch between versions by simply reviewing the Lua Reference Manual when working in a version that you don't often use. I would say do 5.3 but that's personal preference. https://www.lua.org/manual/5.1/#index https://www.lua.org/manual/5.2/#index https://www.lua.org/manual/5.3/#index
I totally agree. As an occasional programmer the simplicity of Lua means I dont have to climb the learning curve again every time I want to write a small program. Another virtue of Lua is the power of the string manipulation programs. I frequently use it to extract data from various semi-tablular data sources. It also interacts well with Excel via csv. 
I'd say 5.1, as that's the one that is Luajit is version locked on. Though some of the better practices from 5.2 (like abandoning the module function) are absolutely worth learning.
Favorite wm
Lua is usually an embedded language, so learn the version which is embedded into the software you want to use it for (Though as other people have said, the differences aren't that vast). If you're embedding Lua into a new project, I recommend using the latest unless you really need the speed of LuaJIT.
Yep, it Just dient really catch on Apperantly. It also seems to be abandoned,(?) I don't think it has had an update in like a year or so.
Because text editing is basically a solved problem, and that, for the most part, people have made their peace with existing editors. (e.g. Emacs and Vim for Linux/BSD/Unix partisans) Since these tools have existed for a while, there's a lot of existing practice to build upon. What's the added value that warrants relearning tools with which many have years of experience? In my case I've used a flavor of Emacs for over a quarter of a century, so short of good economic reasons (i.e. you'll pay me well to work in an environment mandating a different editor), I'm staying with what I've used. Further, building it is not straightforward as it seems to require patched versions of several libraries; by comparison, Emacs builds quite easily on my Linux boxes with standard versions of the libraries.
We'll see, I really like it, so I'll probably tell some people about it.
Yes, to some extent, you can do this with the debug library. function lol() print(debug.getinfo(2).name) end function woo() lol() end woo() would print out `woo`. Of course, if you write a = {} a.b = woo a.b() it would now print 'b'. If you just need this for debugging purposes, this ought to be fine. Otherwise, you'll have to manage the ambiguity somehow, and it leads to the question of why you are doing this in the first place.
Unfortunately, that's going to be a lot harder to do. Here, you will have to dump the bytecode and solve a dataflow analysis in order to figure out where this function flows into. What is the use-case for this?
Forgive me, I'm really not a programmer (see my name -- I'm a composer and even though I've spent two years on this project I'm still embarrassingly ignorant of basic programming things). I have no idea what a "global context object" is. But there is this, for the tables that are likely to be used in all the musical styles (pitch, duration, and volume), I do have set functions to generate their values and those have the salt built in. But the different styles will each require some other unique tables to be generated (though a few will probably be shared across a few styles) so there still needs to be a general method. The project is open source and I'm hopeful that users (especially other composers and music theory folk) will contribute more musical styles so there is a kind of style guide (about creating all the data and stuff) that is forming. But I'd rather not rely on everyone getting something like: foot_stomps_on_wood = generate_data("foot_stomps_on_wood",57) typo-free or even have to remember to add that kind of argument.
You can take the "object-oriented" path. You will be able to know which "object" is using the function by using the reference ***"self"***. For more info, check out: https://www.lua.org/pil/16.html
Well, speaking theoretically, a function should produce outputs that depend on, at most, its inputs. Not the context in which the function was called.
The global variables are the input too!
I can't really understand what you're trying to do and how you want it to work but... Nobody will forbid your user to change the name of that var - and variable names are just for users. Computers in many cases don't care about them. Maybe you should change your approach and just wrap this in some high level function - that would for example store all the "samples" for you in a known and controllable manner? 
Right, the user can always change it, but since I will be maintaining a repository of user-submitted mods (musical style algorithms) at least I can enforce the variable naming convention in the official repository. Being on the lookout for typos where someone is expected to type in the exact same name twice where the second one can technically be anything and still work (though the data generated will be different), ie, won't cause the software to crash, makes it trickier to spot such typos (and it's almost impossible tell from looking at the generated music if someone followed the proper style/naming convention). Bypassing the possibility of a typo (that will be difficult to spot) through some automatic process seemed like a good idea.
Yeah, I get that and I know this is a rare instance when my concept of retaining the purity of the art aesthetic is creating a weird programming situation. I'd love to go into the full details about how this method evolved over the last 1.2 years but it's long and boring.
So looking over this thread, I have an alternative solution which you may like. Lua includes many "functional" features, one of which being "closures" in which you can make a function that has access to its enclosure at the time. That means you can have a function that makes functions, and the inputs are preserved. For instance: function make_instrument(name) local function play_note(note, octave) print("Playing instrument " .. name .. " at note " .. note .. " and octave " .. octave ) end return play_note end brass = make_instrument("brass") brass("C#", 4) -- this prints "Playing instrument brass at note C# and octave 4" In this way you don't need to know which instrument is called, based on its name, but rather you'll know because the `name` variable is in the closure. When you make your orchestra pit, you'd return it from the module it's being created in like so: local orchestra = { flute = make_instrument("flute"), clarinet = make_instrument("clarinet"), -- and so on and so forth } return orchestra In this way, you control the names of the instruments. I know this might sound error prone, but the surface for error is up in your module, rather than down in the user code. You're in control here, and this is the completely normal way of writing lua code.
You should check this out. http://howl.io/
 generate_data (foot_stomps_on_wood, 57) where foot_stomps_on_wood is a table (object). Since your users are non-programmers, they will be declaring data, so your data file which will be read as a chunk will be something like: Styles = { foot_stomps_on_wood = {...}, foot_fall = {...}, } No problem in reading the key names in this table.
Thank you for advice, I'll refactor it with power of Lua tables. I hope, it help me to escape using if global variables
Yes, I tried to write it as a library which I could fast plug in my projects and use
Using no globals is definitely a worthy goal. 
Please don't shut down peoples question like this.
If you are on Lua 5.1 you can use [`setfenv`](https://www.lua.org/pil/14.3.html), otherwise http://leafo.net/guides/setfenv-in-lua52-and-above.html This article on [dynamic scope](http://leafo.net/guides/dynamic-scoping-in-lua.html) might be of use.
Because people are either satisfied with the editors they have or they're too timid to try new things. (I've noted a very odd emotional attachment to tools in the software trade. To me being attached to a language or an editor or the like is kind of like an auto mechanic being attached to a particular socket wrench.) Don't like? * I'm not a big fan of everything being textually-configured. It's very easy to get a configuration so screwed up you can't fix it without invoking, ironically, another text editor. * The syntax highlighting system (which is the major reason I switched over to it from Vim!) can be very frustrating when you're not used to it; it gives almost no assistance when (not if) you fuck up. You have to learn to figure out what you did wrong from incredibly vague symptoms. (On the plus side you REALLY learn proper debugging skills…) * The small community makes for a lot of hand-rolling every little thing you conceive of. You don't have the rich ecosystem of &lt;spit&gt;Emacs&lt;/spit&gt; or Vim or even Sublime Text. * The text mode interface has key bindings which don't match the GUI interface. (This is apparently for technical reasons, but it's still a minus point. It's why for text mode editing I still use Vim.) * You can get very surprising massive slowdowns, especially if you carelessly open massive files of generated code. (Open a C file with 1,250,000 lines of code and watch your CPU burn up as Textadept tries to syntax-highlight it all.)
First, -1,000,000 points for being in the hipster domain. Second, when that project was announced on the Lua mailing list, I asked what it brought to the table that wasn't already in Textadept. The answer was a lot of handwavy stuff that looked an awful lot like Nigel Tufnel being asked why the controls on his amp went to 11. You know, almost as if the guy wrote a "new" and "revolutionary" text editor in Lua without being aware that there already was such…
Learn the latest. If you need to work with a library or something else that is locked in a version (normally that would be 5.1 because of LuaJIT), then you can just double check the manual
Apparently, there's /r/LogitechG. You could also google for "Logitech Lua API".
Looks impressive. 520 Kb Ram, WiFi, Bluetooth 4.2, infra red transceiver, good security, dual core, lots of pins for I/O... [and costs between $5.91 and $6.95](https://www.seeedstudio.com/ESP3212-Wifi-Bluetooth-Combo-Module-p-2706.html). But, still, for $9.00 you can get a [C.H.I.P.](https://getchip.com/pages/chip) that has a lot more resources, can even run a full Linux. Edit: it might be cheaper than that. On the [espressif page on taobao](https://world.taobao.com/item/537912657387.htm) it seems listed for 19 yuan (about U$ 3.00).
Virgin/Delta have a sale on at the moment on USA domestic: https://www.virginamerica.com/cms/travel-destinations/sfo-san-francisco-ca EDIT: the sale has finished. the link now just has their normal prices.
Soon™
The C API is used both to run C from Lua and Lua from C.
so sad, I really wanted to go :~~ 
This looks like a question for whatever mod group this is for. :runUpdateScript() is not a built-in method for any Lua object. You will want to consult the API docs or others making mods in the same game/app.
That's what I figured, but then wouldn't `if chunk then` be more appropriate?
I'm vary of the whole forced self argument thing. The continue statement too a little bit. But I guess it would sort itself out if it turns out to be a problem with existing lua modules. Otherwise it seems pretty cool. How does guile's FFI api work here?
This is an easy mistake to make: lua_typename takes a type as it's second value, not a stack index. To get the correct behaviour you'd use something like (psuedocode since I don't recognise your host language): t = lua_type(L, 1) s = 'type: ' + lua_typename(L, t)
Ahhh, thank you ;-) This makes sense now. But why do I have to pass the lua state into the function if its just mapping integers to strings? My host application is written in pascal btw.
No idea! Perhaps just for consistency. The source code confirms it doesn't actually use it: https://www.lua.org/source/5.3/lapi.c.html#lua_typename
If this was a lua script I'd accept that it was barebones. But I have to load nodejs and NPM in order to install it. That's not barebones. 
Yeah, I'd accept "ancient witchcraft" if this used, say, ed. It's a neat idea, but I'd love it if this was written using a bunch of Unix tools, or in Lua (since presumably, I have Lua installed). Heck I'd accept perl as "ancient witchcraft", or maybe some horrible abuse of awk 
The goal for writing this in node js was to advertise openresty to the node js crowd. NPM has a very large install base. But It should be quite easy to port it to lua. Would you like a lua script? By barebones I meant the output i.e the generated openresty application. The script has dependencies,I agree. 
UNiX tools won't allow windows users to use this application. Lots of people run nginx on windows which means that they could be a good target for an openresty introduction as well. I'll look into perl though. I take it people are not much fond of node js here :P
I tried that, didn't work.
 $ cat test.lua print("hi") $ cat other.lua require("test") $ lua other.lua hi $ lua -v Lua 5.3.3 Copyright (C) 1994-2016 Lua.org, PUC-Rio $ Tried this with a fresh install of Lua 5.3.3 on Arch Linux. Works out of the box. What Operating System do you use? Didn't even need to change the `LUA_PATH` EDIT: This is my default `package.path`, when viewed from inside a `lua` REPL: /usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua Of note is the `./?.lua`, which allows loading from the current directory. Do you have that? Also `./?/init.lua`, which allows modules in sub directories 
&gt; At start-up, Lua initializes this variable with the value of the environment variable `LUA_PATH` Still works with `LUA_PATH` though
Thanks for this! This is the information I needed. I just wish the installation process somehow dealt with this for me. I guess it's a windows quirk.
The second approach is right, but to get testPrint back here is how to modify it: std::string run = "\ function run_sandbox(...) \ local env = {print = print}; \ chunk = loadfile('test.lua', nil, env) \ chunk() \ return env.testPrint(3) \ end \ run_sandbox()"; It is normal that testPrint is not a "global" (in your environment): if user code could set globals it would not really be sandboxed.
Thank you so much! I really appreciate you taking the time to respond, it works perfectly! 
http://lua-users.org/wiki/CompressionAndArchiving Has a link to : https://github.com/brimworks/lua-archive Which is a Lua binding to Libarchive. Since version 3.0, libarchive has had read-only 7-Zip support: https://github.com/libarchive/libarchive/wiki/LibarchiveFormats
I can't seem to get lua-archive to build on linux, here's the error: http://pastebin.com/Q62vQsUJ Any advice? This looks nice.
Apparently that changed in lua 5.2 :-/ If you change luaL_reg to luaL_Reg in all of the source files, it compiles. There are still a fair number of deprecation warnings, but at least it compiles.
I'm not sure if this is a subsection of your code, or if you're using a weird interpreter, but I'm noticing two problems that should prevent it from even getting to the print. First, 'TrainData' vs 'trainData', but I'm guessing that's just autoformatting messing with your post Second, 'input' in your size function is nil, I think what you're looking for is 'trainData.input' If I make these changes it prints '1'
If I copied your table declaration as-is, I'm getting a nil value error instead. So, you may want to declare the table like this do local traindata_input = {} TrainData = { input = traindata_input, labels = {}, vid = {}, size = function() return #traindata_input end } end Notice the usage of upvalues. After I declared it like that, it returns correct result.
You should have tried knocking :)
Personally, I've never quite gotten to using LuaJIT because it's practically impossible to integrate into other build systems.
I wrote the article (over a year ago). For the first question, "succeed" here means "at reading the whole source code". Python and the Linux kernel have millions of lines of code, whereas Lua has around 15000 and the Minix 3 kernel around 6000. I did not consider it possible to read (and understand) millions of lines of code in a reasonable amount of time. The practical reason why I went back to Linux is that a lot of software I wanted to use did not run on Minix 3. It was at a time when it did not have the NetBSD userland yet so there were very few ports. If I had done that today I could probably have stuck with it longer. (Actually I could have kept running Minix 3 in is VM and used the Linux host for the things it did not do, but really I ended up not caring enough to maintain both OSs.)
wow, well that was easy, I don't understand how I missed that one ... Do you maybe know what's the purpose of "iup-3.19.1_Win32_bin.zip" (in the root of your link). Inside that archive there are three empty folders (Lua51, Lua52, Lua53) and files: iuptest.exe, iupview.exe, ledc.exe.
You could use Doxygen but iirc it doesn't support Lua out of the box. If you are familiar with it you could use a plugin such as [doxygen Lua](https://github.com/scholzd/doxygen-lua/blob/master/README) to be able to document Lua code. Another option is [LDoc](https://github.com/stevedonovan/LDoc) that is used by projects such as Awesome WM. 
You just need a text editor with syntax highlighting for Lua. Yes, there will be practically no difference. Lua, an extremely small (but blazingly fast with LuaJIT) language, takes a short time to fully understand all the ins and outs of it. Between the online API docs and the Lua-users site, you're pretty much covered for 99.99% of the language. And Lua has an official tutorial on their site that I've used more often than not.
As an amateur Lua user, I've never heard of Lua Toolbox until now, but this sound like good news.
I don't see why you'd ever want to do that... I mean, sure, it works, but why not just do `input = {}` as in the original code? I don't get what you are trying to fix by doing this...
If you want help, put some more effort into your post. Paste the link correctly, format your code, tell us exactly what you're doing, and what you're expecting to happen.
Wrong subreddit. Try /r/garrysmod or whatever.
Is there a post that explains what happened? I just see the luarocks homepage...
It sounds like you pasted the string `lua luatut.lua` into the script file, though you need to spell of the full URL (https://www.youtube.com/watch?v=iMacxZQMPXs) and actually copy+paste your file and terminal contents if you want people to have enough information to answer your questions.
More information here: https://github.com/leafo/luarocks-site/pull/86 We added labels to modules on LuaRocks, and added the ability to convert any endorsements you may have had to follows on LuaRocks. Module owners can now give labels to their modules.
because the `size` function can't get the table without explicitly writing so. But, if size is declared with `size = function(self) return #self.input end`, then it's possible to get the size with `TrainData:size()` (not with `TrainData.size()`, notice the `.` and `:`)
It is all based on the application. Lua is more commonly embedded into games, IoT, and other things. JavaScript, while in these places too, is not as prevalent. I believe the reasons we see some similar patterns are because the languages share so many commonalities. That and we have lots of dev crossover. Since devs know, and are comfortable with, certain patterns - they will generally stick to them. Unless there is someone teaching web devs the traditional Lua patterns, then we will see that pattern crossover as they use Lua for things.
Most common patterns you see based on JS come from people who came to Lua from JS and don't understand the Lua way of doing things. Using callback Hell frameworks, for example, is a perfect example of this. The Lua way would be to use coroutines and readable code. Before the JS infestation people coming to Lua were trying to make it look like Ruby. And before that it was people trying to make it look like Python. There was even a short period of time where people would come in trying to make it look like Scheme. There are many things unique to Lua that make it superior to JS in pretty much any environment other than the web browser. It's smaller, for starters. In all metrics. It's a smaller language. It's a smaller runtime. If you spent a weekend concentrating you'll basically know enough of the language to be a competent programmer in it. Spend a couple of weeks on it and you'll be an advanced programmer. (Not rockstarninjapiratetentimesprogrammerguruwizard grade. But advanced.) Beyond size, though, Lua has a compelling native data type (the table) around which everything is based. It has an easily-understood concurrency model that doesn't force you to think about locks and races all the time and doesn't put you into writing your code inside out and backwards like callback Hell-based languages do. It is easy to embed into other languages and it is easy to extend using other languages. The key to using Lua is to look for its **native** approaches instead of trying to shoehorn what you're accustomed to into it.
Lua comes into it's own when used as an embedded language. That is, it's compiled into a program and then it can interpret scripts during runtime. I don't believe Python can be compiled into a program, at least not with the same ease or performance. 
Hopefully I'll be good enough at programming some day to experience those aspects for myself. I appreciate your taking the time to help get me orientated.
Everyone starts somewhere! I started with a Matlab class at university then learned Lua to do things within a game. I learned Python because it has libraries and was easy to learn after Lua. I then learned C# so that I could mod RimWorld. TL;DR It doesn't matter where you start, once you learn one you can learn them all!
Lua is unhinged by browsers. This means that it can evolve by breaking backwards-compatibility from time to time, deprecating and improving instead of preserving and "building things next to the old parts". That's why the source code of LuaJIT is 1/10th of v8's, doing similar things. Imagine that javascript was built from scratch today, leaving out the bad parts. That's what Lua feels like. To me, the question is not why should I use Lua when there is javascript. It's the opposite.
I can only think of luvit and even that has been getting less node-like. Did you have some projects in mind?
&gt;and a DOM interface based on lua tables would be so much easier to work with. JS Objects feel quite similar to Lua tables (without the meta stuff).
&gt;You just compared a language to a framework. Node isn't a framework. It's a JS runtime. It would be odd if I compared Lua to Express or something, I agree. However the Node ecosystem and the Lua (with LuaRocks) ecosystems can certainly be compared, don't you think?
&gt; Node isn't a framework. It's a JS runtime. Call it whatever you want, it's not a *language*, any more than Javascript extended by a browser's DOM manipulation library is a distinct language. The language is JavaScript. &gt; However the Node ecosystem and the Lua (with LuaRocks) ecosystems can certainly be compared, don't you think? There is no comparison. For stand alone development, Node (i.e. Javascript + Node libraries + npm) kicks the living shit out of Lua for the same reason Python and Ruby do: several orders of magnitude more libraries, more current libraries, better maintained libraries, a better packaging and retrieval system, so and so forth. But that's not what Lua was designed for. It's not some read-headed "hipster" step child of Javascript, it utterly dominates in a completely different and totally unrelated niche. Lua used to be very unique in this niche, but now there is at least one competitor: [Squirrel](http://www.squirrel-lang.org/), which was directly inspired by Lua, down to the source code level, and was in fact written to replace Lua in CryEngine.
Could it be that when you type `lua luatut.lua` you are already in the lua terminal? If yes, then that's your problem, you need to to type that into the normal windows terminal (cmd)
Wow. Nice.
the fun thing about lua tables is that they require no classes and you can create them on the fly. Also, since "objects" in lua are usually implemented as tables, it means that objects are compatible with pretty much every other data structure. Have a function that takes a sequence (an array)? You can perfectly pass it an "object", and if it has elements from 1 to n it will work. Otherwise an object is just a sequence of length 0.
**Why I don't use 9mm wrenches.** Normal person's answer: *I don't have any 9mm nuts or bolts to tighten.* Programmer's answer: *Pliers are more familiar and comfortable to me.*
Both are commonly used for different things. Node.js is usually used for servers and Lua for embedding into game engines, [peripherals](http://www.wolfpack.pe.kr/attachment/1180489860.pdf) etc. I mostly use Lua with Love2d(2d framework) and haven't come across any library that goes crazy with callbacks. Main thing I love about Lua is it's tiny and doesn't have weird quirks that I bump into.
Sorry to revive the dead but OpenComputers does and is actually sane ;)
Yes, but that's not built into the core Lua interpreter. My thought was to modify the Lua source to actively disable assigning to undeclared variables.
I always do that, I modify the global metatable __newindex method to call error(). I don't believe in global variables, and it detects if I have misspelled a local.
This is a fantastic idea. Meta tables are one of my favorite features of lua
[gentle reminder not to downvote articles because you disagree with the author]
I've sent an email yesterday to the designated address to RSVP for the event. When can I expect a response or some kind of confirmation for it?
How does it handle coroutines? My least favourite thing about LuaJ is how each coroutine spawns it's own thread, i'd love to see a implementation which manages to keep things singlethreaded.
That was one of the reasons why I started working on this project in the first place: I actively disliked that in LuaJ, and thought how to do it in a more coroutine-like way. The way coroutines are handled in Rembulan kind of permeates through the entire implementation strategy. But basically, the main idea is to use exceptions for switching coroutines, and attach call stack information to them. Every Lua function is a Java class with two methods (entry points): invoke and resume. Invoke is called when the function is called; resume is called when it is being resumed having been previously paused in an invoke or resume. Every operation that may involve a coroutine switch (that is, *all* operations that may involve metamethods, plus calls) may then throw a “control throwable”, an exception that has a call stack associated with it. Adding the call frame information to that exception and rethrowing it means you 1) save the call frame and 2) do this for every call in the call stack. A saved call frame fully represents the paused call; a saved call stack fully represents the paused coroutine. Resuming a coroutine is then as simple as taking its paused call stack, and unpausing it: resuming the top call frame. When it returns, resume the call frame below etc. So every function's control state is essentially exposed by the two methods (invoke and resume). Invoke is the initial entry point, resume are all the others. (I think — though I’m possibly wrong — that this is how coroutines are done in C#.) As you can imagine, writing Lua functions in plain Java this way can get *incredibly* painful (especially for things like table.sort in Lua 5.3: in my implementation, it’s a heapsort where every comparison and every table access must may involve a metamethod call). The only way out of that is probably by using bytecode rewriting (at compile or class load time), but it's probably better to write complex functions that follow the Lua semantics in Lua anyway. For Lua functions, this is entirely handled by the Rembulan compiler (and it was’t even particularly too hard to do that). The good news is that if you assume this being in place, you get what I call “CPU accounting” (running Lua programs for a given number of ticks, pausing them afterwards) practically for free, as all functions that call Lua functions are ready to be paused. And that’s especially important for sandboxing applications. And yes, this is all done in a single thread.
The keys here are: 1. Polar coordinates. 2. Defining a spiral in terms of polar coordinates. 3. Converting those polar coordinates to cartesian coordinates so they can be plotted. Let's place the center of the spiral at the origin (0,0). Assuming the spiral has a square aspect ratio (max width equals max height), let's call the max distance R. The first point in the spiral will therefore be at the origin and the last point in the spiral will be at radius R away from the origin. The tightness of the spiral is application-dependent but in terms of polar coordinates this is governed by how rapidly theta changes. function spiralCoordinates( fraction, maxRadius, maxTheta ) local radius = maxRadius * fraction local theta = maxTheta * fraction return math.cos( theta ) * radius, math.sin( theta ) * radius end function As an example, if you wanted five points, a maximum radius of 1, and to wind around exactly once in the spiral you could do: local x, y x, y = spiralCoordinates( 0, 1, 2 * math.pi ) x, y = spiralCoordinates( 0.25, 1, 2 * math.pi ) x, y = spiralCoordinates( 0.5, 1, 2 * math.pi ) x, y = spiralCoordinates( 0.75, 1, 2 * math.pi ) x, y = spiralCoordinates( 1, 1, 2 * math.pi ) P.S. The above is untested but given as an example.
&gt; [gentle reminder not to downvote articles because you disagree with the author] Why? That's not what downvotes are for with regard to *comments*, but it certainly is what they are for with regard to *submissions*. That's how the site works at a fundamental level. If we think the article sucks, we push it down. If we think it's good, we push it up. The desired result is a curated list of quality content near the top of each sub.
Thanks! (And also many thanks for the hours I spent in ComputerCraft -- it introduced me to Lua, and for that I'm eternally grateful!) It seems the resumability of PUC-Lua has improved in 5.3: I just checked with table.sort and string.gsub, and both support yields from within the calls they make. So I wish I could make that claim, but "unfortunately" PUC-Lua is too good in that regard!
What I mean is, you can think that the author's argument is bad, and downvote for that, but you shouldn't downvote just because the post is critical of Lua. Lua can prove itself without propaganda. Good point, anyway.
You may find using luastatic to be easier: https://github.com/ers35/luastatic You do not even have to write app.c. See the following example: luarocks install luastatic git clone https://github.com/mpx/lua-cjson.git make LUA_VERSION=5.1 LUA_INCLUDE_DIR=/usr/include/luajit-2.1/ ar rcs cjson.a lua_cjson.o strbuf.o fpconv.o luastatic main.lua cjson.a /usr/lib/x86_64-linux-gnu/libluajit-5.1.a -I/usr/include/luajit-2.1/ ./main
Although I wouldn't put everything in main, this looks like it should work. (Unless you use 5.2+ since it uses the `_PRELOAD` table instead of `package.preload`.) Instead of calling `require "main"`, you could also use [luaL_dofile](http://www.lua.org/manual/5.3/manual.html#luaL_dofile). (My link is to the 5.3 manual but it should work the same in older versions.) Oh yeah, and if you want to use static libraries you should add the `-static` flag to gcc.
Well, there is a problem with using `-static` flag, I get an error: /usr/bin/ld: dynamic STT_GNU_IFUNC symbol 'cos' with pointer equality in '/usr/lib/x86_64-linux-gnu/libm.a(s_sin.o)' can not be used when making an executable; recompile with -fPIE and relink with -pie Anyways, if I compile without `-static` flag, but with luajit itself and all libraries 'compiled in', the resulting binary will only depend on libm, libdl and libc, which is fine with me 
Can we downvote articles because they're badly written whinges?
&gt; If we think the article sucks, we push it down Saying "it sucks" is not the same as saying "I disagree". If we don't want our subreddit to devolve into a censored safe space, we have to also allow articles we don't agree with.
&gt; Saying "it sucks" is not the same as saying "I disagree". True, but saying "I disagree" in the context of a technical article is also saying "it sucks". These statements aren't commutative. You can agree with a poorly written article. It can be technically correct, according to your estimation, but be poorly organized, contain gaps, etc. such that you think the article sucks despite agreeing with it. And you can disagree with a well written article. It can be beautifully organized, thorough, contain witty prose, etc. but if you think it's *wrong* -- i.e. you disagree with it -- then it sucks. For instance, there are fantastically produced films about how Atlantis is real, or the Moon landing was faked. It doesn't matter of they get James Earl Jones to narrate and Werner Herzog to direct, if the subject matter is *bullshit*, the movies suck, AFAIK. They're worse than bad, they're dangerous, because they are the means by which disinformation is spread. 
&gt; True, but saying "I disagree" in the context of a technical article is also saying "it sucks". No, it's not. An article can make completely valid points and have good substance, even though you disagree with it. Opinions are never objectively right or wrong, though they can be presented in a good or bad way. This is an opinion piece and shouldn't be compared to attempts to convince people of pseudo-scientific facts. There is nothing inherently wrong with saying you prefer 0-based indexes or that you don't like the stack API. Again, unless we want to turn the Lua subreddit into a safe space where no one can have any criticism whatsoever on the language or anything related to it, we shouldn't remove articles even if the arguments they present aren't very strong or technical.
&gt; An article can make completely valid points and have good substance, even though you disagree with it. You're not making sense. If I think a point is valid, I agree with it, by definition. That's [what valid *means*](https://www.google.com/search?q=valid&amp;oq=valid&amp;aqs=chrome..69i57j69i65l3j69i60j69i59.664j0j4&amp;sourceid=chrome&amp;ie=UTF-8). 
Totally agree; indices should start at 1, **offsets** should start at 0. It's the same as with nil vs null-pointer: One makes sense in a language like C, where the programmer *should* be aware of concepts like pointers, offsets and such, but a language like lua is supposed to abstract all those things away, so that the user only has to deal with *variables* and *arrays*, not pointers and offsets.
98% of the time I don't even notice which version of lua I am working with. It only really matters when doing math or bitwise operations, but to be honest, in most cases those should be handled by a C library, since most algorithms that have to deal with this kind of thing shouldn't be implemented in a scripting language in the first place. Indices starting with 1, well, /u/Allan_Smithee said it all and I have nothing to add. `~=` instead of `!=`? what the hell? That's just syntax; I could also say they are both wrong, because pascals `&lt;&gt;` is *sooooo* much better. But I don't, because it's just syntax that one has to get used to. In fact, I find it way more annoying when languages use `!` as a logical operator because `not` feels more natural to read. (same goes for `&amp;` and `and`) It's also not really true that there is *no canonical lua implementation*. While it is true that optimizing code for one version of lua might be different than for another version, but code that works in lua 5.1 should work in LuaJIT (and everything else is, in fact, considered a serious bug ^[source](http://luajit.org/status.html)) 
My first question is what's the bigger-picture/why are you trying to do this? Maybe instead of checking if the drive is open you can check if there's a disc? Some drives don't have a concept of being open (like a slot-loading drive) 
No, checking if there's a disk is not enough. Actually I'm working in Rainmeter (https://www.rainmeter.net/) and would like to use a lua code there. A Rainmeter "skin" (the name of the apps, or how to call them) could show the state of the optical drive, through that lua code. For sure it's possible to check if the tray is open or not, I did in AutoIt (and have a code for C++ too), but would need to do something similar in lua, if it's possible.
Cool! You should put the about description on your github page. I had a hard time understanding what I was looking at.
Ah, I had totally forgotten that (and adding a readme.md), thanks for reminding me :)
It's not finished yet but I've been working on a version of Lua specifically made for scripting Windows environments. It's not really public yet but I could post it here?
Can you put your code on [Gist](https://gist.github.com/) or [Pastebin](http://pastebin.com/)? It's very hard to debug your code as it is formatted right now.
 local input = "" local havekey = false while(not havekey) do input = io.read() if (input == "inventory") and (havekey == false) then print("inventory consists of:\n1x Handaxe\n1x Rope\n1x healing potion.") end if (input == "inventory") and (havekey == true) then print("inventory consists of:\n1x Handaxe\n1x Rope\n1x healing potion\n1x Golden key") end if (input == "inspect") or (input == "inspect surroundings") or (input == "look around") or (input == "search") or (input == "examine") then print("You look about you, to the north is\na towering gate. To your left is the corpse\nof a fallen soldier.") end if (input == "handaxe") or (input == "inspect handaxe") then print("A finely crafted handaxe which\nhas served you better than most anything else in life.") end if (input == "rope") or (input == "inspect rope") then print("A rope... What were you expecting.") end if (input == "healing potion") or (input == "inspect healing potion") then print("A healing potion conjured by the local sorcerer.\nCost a pretty penny but usually these\nthings are worth investing in.") end if (input == "use rope") or (input == "use healing potion") then print("I don't think you need to use that right now.") end if (input == "inspect key") and (havekey == true) then print("an ornate key, you get a feeling\nit's important.\nAlso you get the feeling to try and use it on the gate.") end if (input == "use handaxe") or (input == "use axe") then print("on what?") end if (input == "gate") or (input == "north") or (input == "open gate") or (input == "use key on gate") or (input == "inspect gate") then print("unfortunately, it looks as if you need a key for that.") end if (input == "corpse") or (input == "body") or (input == "soldier") or (input == "left") or (input == "inspect corpse") or (input == "inspect body") or (input == "inspect soldier") then print("the corpse of a long dead dwarven soldier\ndecays solemnly at your feet.\nWithin their hands, something glimmers.") end if (input == "inspect") or (input == "look at hands") or (input == "hands") then print("the skeletal hands of the dwarven soldier\nclutch tightly upon what appears to be...\na key!!") end if (input == "take key") or (input == "get key") then print("you attempt to take the keys from the deceased\ndwarf's hands. But despite his condition, his grip\nis to strong. If only there was another way.") end if (input == "use axe on dwarf") or (input == "use axe on hands") or (input == "use axe to get key") or (input == "use handaxe on dwarf") or (input == "use handaxe on hands") or (input == "use handaxe to get key") or (input == "use axe on corpse") or (input == "use handaxe on corpse") or (input == "cut hands off") then havekey = true print("With a rather brutal desplay, you displace\nthe dwarf's dead fingers from\ntheir dead body and successfully procure yourself\na nice shiny key.") end end print("with the turning of a key, and no small amount of force.\nthe gates are open.") os.exit(0) 
Well, you can find the current version on this [github repository](https://github.com/armornick/winlua). I'll put some binaries up as soon as possible, but it shouldn't be hard to build. At the moment, it only has an implementation of the LuaFilesystem API and a few functions for working with the Windows Shell. However, all of the functions except for the io module are unicode-compatible. There's also a basic OLE scripting module. No documentation or samples in the repo, though, so I'll have to see about fixing that. Like I said, it's not really finished yet.
Yea this one is ok, considering this subreddit is relatively small
Tables, mon.
heh "weird countries" says the ad from USA lol... ok. Anyways, got carried away, carry on dudes.
Yep it had tables but also made me vomit a little in my mouth. You should warn people before exposing them to such puke inducing material :D
Video is all about tables (physical). The table (virtual) is used extensively in Lua.
There might be some case studies from MCU manufacturers that could e.g. run eLua. Out of the box - I don't think so. The Pebble watches have a C API to create apps for the watches. You might be able to shove eLua (or even the real deal?) in there....
Pebble is considering adding Lua support. 
Hahahahaha this cracked me up! thanks xD
AMAZING! where did you get this information from? 
Android WatchMaker allows you to define watch faces for Android Wear that include Lua scripts that run on the watch itself (potentially very complex Lua scripts).
Wait they run on the watch? I had seen that but was under the impression it ran on the phone so once you got away from the phone it would stop working.
I didn't try it myself but Lua scripts actually allow you to draw the pixels on the watch face so I guess it they have to run on the watch itself: http://watchmaker.haz.wiki/lua
It's unfortunately still not standardized what "new line" exactly means and how many bytes it occupies. Some text editors can be configured to display newlines correctly, others try to autodetect them. In Lua, newline is usually entered as just "\n".
As much as I'd like to give out a source, I can't. But let's just say I work with several employees.
[Relevant Stack Exchange](http://programmers.stackexchange.com/questions/29075/difference-between-n-and-r-n) 5 But the Lord came down to see the city and the tower the people were building. 6 The Lord said, “If as one people speaking the same language they have begun to do this, then nothing they plan to do will be impossible for them. 7 Come, let us go down and confuse their language so they will not understand each other.”
https://github.com/Didericis/png-lua https://github.com/DelusionalLogic/pngLua
hmm formatting madness !!! working on it :P
Hi! * log file to logfile only if upload is successful. One file per line. * then on every start of script, load all files into table. * and then, you can look into that table if file is already uploaded. There is example: local lfs = require('lfs') local logfile = "/home/p8j6/devel/test/ftplog.txt" -- Where to log output on the FA local folder = "/home/p8j6/devel/test/" -- What folder to upload files from -- open the log file, first for reading local outfile = io.open(logfile, "r") -- read all records into table local existing = {} for line in outfile:lines() do existing[line] = true end -- close log file for reading outfile:close() -- and open log file for appending outfile = io.open(logfile, "a+") -- now, for each file in folder... for file in lfs.dir(folder) do -- get that file's attributes attr = lfs.attributes(folder .. "/" .. file) -- Don't worry about directories (yet) if attr.mode == "file" then -- if file is in log, then its on server, so dont upload again if existing[file] then -- file is already on server, move along... else -- make upload, if upload is successful, append file to log if response ~= nil then outfile:write(file.."\n") end end end end --Close our log file outfile:close() 
you sir are a true gent ! ill test that but it is exactly what i was trying and failing to do :P
"The reason I prefer flathead screwdrivers is *because* it is used by most carpenters." -- some mechanic somewhere Fucking ***HELL*** are "coders" (I refuse to call these entities "programmers") a close-minded, whiney lot!
Thank you very much for your **opinion**. And I am very glad that you have such rigorous standards of what is a programmer and what is not.
Can you post your final code? The code i post you above is only example of logging, stripped of FTP logic.
 else -- make upload, if upload is successful, append file to log if response ~= nil then outfile:write(file.."\n") end ooo ok my bad ! have i missed the upload part? in the above area of the code?
Yop, you missing upload action, so: -- make upload, if upload is successful, append file to log response = fa.ftp("put", ftpstring..file, folder .. "/" .. file) 
Try /r/glua or www.facepunch.com They do Garry's Mod lua stuff.
Give us an example row so we can see what the job actually is. 
i found this https://bitbucket.org/harbortronics/flashair-ftp-upload/src and its working !! thank you all for your help and input on this project
It is said, so it is done. Ame\n
A
not true and true =&gt; false not true or true =&gt; true the 'not' affects only what immediately follows (note that parenthesis can make what 'immediately follows' be more than one statement). For example if not Blue() and not Green() or Purple() then print "Purple" else print "Not purple" end would print Purple but Blue() and Green() returned false OR Purple() returned true.
 if not IsMouseLooking() and GetMouseFocus() == WorldFrame and not (first or second or third or fourth) then This is assuming that any condition in the () being true (such as 'in combat' or 'using chat') should result in a false output. So my suggestion is to remove most of the 'not's. Also, /r/wowaddons/ could be a big help, potentially shrinking your code size, assuming I got the game right (did I?).
Short answer: It's impossible. Long answer: You'll have to build your own Lua interpreter for iOS which contains image manipulation library (like ImageMagick) and function to capture the whole screen. You'll also need to write the interfaces between the image manipulation library and Lua or use ones from the internet. Even for me, this step is **very very hard** and you already said that you don't know anything about writing scripts, which makes me assume that you even can't write programs. In the end it's impossible.
Not sure if /u/Zee1234 has solved your problem or not but figured I'd weigh in anyway. `not` only affects the condition immediately following it. That is, in `if not foo and bar then` only `foo` will be inverted. You can however use parentheses to group conditions together. So the following `if not (foo and bar) then` will first evaluate `foo and bar` and then apply the `not` and invert it. It isn't the same as `not foo and not bar`! Similar to maths, the stuff in brackets is done first. +/u/compilebot lua print ("~ Test One ~") foo = true bar = false if not bar and foo then print ("True") else print ("False") end print("~ Test Two ~") foo = false bar = false baz = false -- the same as `not ( ( foo and bar) or baz)` if not (foo and bar or baz) then print ("True") else print ("False") end
Output: ~ Test One ~ True ~ Test Two ~ True [^source](http://ideone.com/NudKyM) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/lua/comments/59q0hk/help_with_if_and_and_not/d9bdbb4%20Include%20your%20reason%20for%20reporting%20here.) 
`io.popen`