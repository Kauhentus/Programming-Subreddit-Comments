no just want a command to click MouseButton1 i dont use a framework just want to click my mouse 
If it’s some kind of API refer to a manual. If not then just use AutoIt or some other tool
If you're on MacOS, maybe use [Hammerspoon](http://hammerspoon.org/).
ok well i am fucked so time for plan c razer synapse turbo click
We need to know: * Which Lua implementation? * Which operating system? * Just a click? Or move to a coordinate?
Shameless plug - use this: https://github.com/jonekcode/ScribeBot
A great program, well designed.
If it doesn't do Linux, I won't even look at it.
&gt; ~~If it doesn’t do~~ Do you plan to support Linux? ~~, I won’t even look at it.~~ Ftfy
no move just click
Is it closed source?
Not to sound discouraging, but it feels very unfitting for computers (non-mobile), pretty much no native UI parts.
I was actually thinking I'd just bite the bullet and patch the Lua VM. The bytecode dispatcher knows how many results are used when it processes an OP_CALL, so it wouldn't be to hard to make it call a metamethod `__stat` for statement-like calls (falling back to `__call` if it doesn't exist). But I can work all that out; thanks for taking a stab at it (and not just saying "don't do that").
Code editor and lua code launcher, you can edit text too :) 
Originally developed for mobile. I agree doesn't look well on desktop, almost same code as mobile version. Its still research level question for me, how to make custom UI working well on any size screen.
Well yeah, should be: This application allows you create lua code.
Well, if you're going to use C, then that makes this 10000x easier. Done in 26 lines of Lua using [lbci](http://webserver2.tecgraf.puc-rio.br/~lhf/ftp/lua/). It has assertions to make it more debuggable if something does go wrong, too. Just download the right version of lbci and you will be fine. You can then just require 'bci.so' from your installed version of Lua and you should be okay. https://gist.github.com/gonzalezjo/a9dd636d05e135fff6985ae47625bd56
I prefer lightuserdata for everything because it makes almost everything less complex. The only problem with it is debugging because sometimes you need more information than you have from the pointer alone. But so far I haven't found that to be a huge issue.
If you were on Linux or a POSIX 2008 supporting platform, you might look at writing a some C glue to clock_nanosleep and pass the TIMER_ABSTIME flag. The idea is that you can easily construct a loop which wakes a particular interval from the last wake by adding a multiple of delay and a loop counter to some base time. If you miss your deadline, and you arrive at the sleep after your desired wake, the sleep doesn't pause. You could put in some missed deadline logic to handle this if necessary. Why... yes... I did just write a bunch of these. ;-)
Thanks for that.
Thanks.
In fact, one of the best ways to optimize Lua is to change "invert" function calls and loops. So instead of having a loop and calling a function in it, its better if the function can take the list as a parameter ans loop over it internally. One of the reasons for that is is precisely because you can extract local variables. On the phone now but let me know if you need an example. :)
That makes sense. My game is a lot of batched async tasks. So it's not critical to be super performant. But if I can find some easy wins can't hurt.
Vermintide uses LuaJIT rather than Lua? That's cool. 
Yep :) Lua is super slow. LuaJIT is faster... but still pretty slow compared to C.
When you finish whatever solution you go with, do you think you can share it? Even just a PM would be cool, but if you can’t talk about it for whatever reason, that’s understandable.
&gt;Lua is super slow Yeah in comparison to C. In comparison to non-JIT interpreted languages it's pretty damn fast.
Yes. Mike Pall specifically advises against manually doing that, except in cases where it isn’t optimized. You can see when something is deoptimized using -jv. 
Oh yeah, sure. Thanks again.
For sure. It's just that C is my point of reference coming from game dev :)
Yes. This code will benefit from at least 2 types of optimization. One is "hash key specialization" (always enabled.) Each time you reference `self.Foo` you are performing a hash lookup with the same key. The optimization means the hash of the string `"Foo"` is copmuted only once. Another is load-to-load forwarding (enabled by default.) The hash slot referenced by `"self.Foo"` is accessed at least 5 times. This optimization will modify the compiled code so that is reads this slot only once, keeps the result (in this case a pointer to the table `self.foo`) in a register and just reuses the register Also the calls to `Foo:DoSomeTask` and `Foo:SomethingElse` will be inlined (inlining is always enabled.) So if the code within these functions accesses `Foo.A`, `Foo.B` or `Foo.C`, there may be more forwarding and/or common subexpression elimination involved. If you're curious, try running the program first with `-jdump -O3` and again with `-jdump -O0` and observe the difference in the IR.
Depends on the code really; in some situations it can be identical to C, usually when dealing heavily with numerics: https://www.reddit.com/r/programming/comments/6eg0x/where_are_the_fast_dynamic_languages_is_lisp_the/c03md43/
No problem, and thank you!
Np. It’s the same on iOS, with regard to JIT bans. And on PC, there are a lot of things that can cause optimization to go wrong, so I believe you. You could always try updating LuaJIT if it happens again.
Can you show graphics in the app or just console?
A bot for a game? What kind of bot?
What are you going to do? If you are doing game/app development it's better to start with drag and drop game engines or something so you can understand the basic of programming first.. going straight to code is bad
Damn dude.. just use normal tables to make your game, don't use libraries.. it will confuse you, those libraries are made so it will be easier to manage things for big projects
When you assign B = A you make them essentially one table. &gt; \&gt;A = {} &gt; \&gt;print(A) &gt;table: 0000000002d01df0 &gt; \&gt;B = {} &gt; \&gt;print(B) &gt;table: 0000000002d01330 &gt; \&gt;A = B &gt; \&gt;print(A) &gt;table: 0000000002d01330 &gt; \&gt;print(B) &gt;table: 0000000002d01330
elseif is not necessary, can run into some bugs if you aren't careful
Oh sorry. My guess would be that when you do A = B you just assign a pointer that the variable B points to to A (because lua is written and C and yay pointers). Just write a copy function and do A = CopyTable(B). Or you can use this http://lua-users.org/wiki/CopyTable
There are many cases where copying is a waste of resources for the computer. Also having two names for 1 table is useful with nested tables. A = { B = { C = { D = { E = 1 }}}} t = A.B.C.D t.something = 8 —- I can change A.B.C.D without typing it out constantly Not to mention functions...
If you mean xBox or PlayStation like console versions. Theoretically it can be compiled to these platforms too. xBox for example require DirectX on winRT for rendering graphics and I am using OpenGL 2. I didn't try DirectX + winRT combination yet. OpenGL 2 supported practically on all devices and it's best cross-platform mobile+desktop option, maybe not best for performance.
One example where this is useful: `&gt; foo = {}` `&gt; function foo.setTable(t) table = t end` `&gt; function foo.useTable() print(table[1]) end` `&gt; A = {"green"}` `&gt; B = { "red" }` `&gt; foo.setTable(A)` `&gt; foo.useTable()` `green` `&gt; foo.setTable(B)` `&gt; foo.useTable()` `red` Which means, you customize the behaviour of foo. You don't need \(and because of the unneccesary overhead also you don't want\) a copy of the table for this. Or take a look into the Chapter 16 of the lua manual about classes \([https://www.lua.org/pil/16.1.html](https://www.lua.org/pil/16.1.html)\). `function Account:new (o)` `o = o or {} -- create object if user does not provide one` `setmetatable(o, self)` `self.__index = self` `return o` `end` `a = Account:new{balance = 0}` Ignore the metatable stuff \(line 3 and 4\), and concentrate on the assignment of a table in line 2. Also here you don't want a copy the table {balance = 0}, that you only created for the construction of a new Account. And the function also returns a table that is assigned to a at the end, also here you don't want and need to copy the table. 
Think of all Lua data types as it’s own object, and variables as slots telling Lua where it can find that object. local b = a tells Lua that a slot with name “b” should provide whatever is in slot “a”. 
Tables behave the same way. local t = {} t.a = 5 t.b = t.a t.b = 4 print(t.a, t.b)
Read the 'Programming in Lua' book
Nice. I like the name.
Turn it to a DLL and inject with any free injector.
Basically you compile the code to DLL if you're paranoid enough.
"Lua C" doesn't exist, it's a poorly-named pseudo-code wrapper written by script kiddies around the actual Lua-C API. Ironically, they could easily instead have allowed exploit scripting in Lua. Levels refer to script identities, level 7 refers to identity 7, which is reserved for Lua backend server execution. Anyway, this subreddit is about Lua, not Roblox, this isn't really the place for this.
Doesn't Roblox have Lua built in? If not, this would be very difficult.
Lol check their post history, they screwed up big time
You can’t “inject Lua C.” Lua C is just an API for Lua’s internals. The people that use that term in their exploit description are referring to an idea similar to the test suits Lua C wrapper, which was first demoed on Roblox by a friend and I. The whole premise of “Level 7s” (6 now due to client changes) is that the game gives different levels of environment access based on said level, meaning that you won’t be able to call certain functions without elevating the thread. If achieve any sort of execution on Roblox, you are going to end up replicating the internal serializer in one way or another, whether it be by recreating the bytecode/proto structure or by making a way to transmit values between a state you own and a separate internal Roblox state.
Listen to this person.
It seems you want 'reactive programming'. Lua doesn't have that. It can be done but somebody will have to program the framework.
Functions tho
https://i.imgur.com/02Pny.jpg
By manually iterating (see the Lua pseudocode for for .. in .. in the reference manual). Or by using an external or self written replacement. However, in this case it is probably the easiest to just use one of the iterators outside the for loop specification: for values in string.gmatch(values_csv, '([^:]+)') do local keys = string.gmatch(keys, '([^,]+)') for column1 in string.gmatch(values, '([^,]+)') do local column2 = keys() print(column1, column2) end end
I don't think `for` loops can use results from any iterator other than the first one. Even if you could do what you're trying to do, `column1` and `column2` would be the same. It's not like the two calls to `gmatch` are cooperating and know that there is another call that already gave you a specific match. You could write your own function to do what you're trying to do, but really, it's simpler to just loop over each column individually, put them in a table, and then loop over that table.
Can you explain what you mean here? What exactly are you talking about, and how would you have solved it in other languages \(if you know any\)? Is this a lua\-specific problem you're having? Generally \(and in any programming language\), alarm bells should go off in your head whenever you write a piece of code that is similar to other code you have written. That's normally a sign that you should create a function. Repetition is, after all, one of the main things programming languages helps us avoid, with things like loops \(which is pretty obviously meant to let the computer do the repetition instead of you\), variables \(which, although lua doesn't have constants, let you define "magic numbers" one place instead of having to repeat them all over\), tables \(lookup tables, for example\) and functions \(to let you section off and encapsulate a piece of code\).
Hey, The-Awoken-one, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
This still sounds like something you could solve with functions, though you might have to use [higher-order functions](https://en.wikipedia.org/wiki/Higher-order_function) to do it well. Game APIs are usually object oriented, but in Lua OOP is really just syntax on top of tables and functions, so it's possible to create a function that creates new functions for you, then use that to avoid a lot of copy/paste boilerplate, even with OOP code. It's hard to explain what I mean in a way that directly helps you, since your problem is only being described vaguely to us, but [a comment I wrote a while back](https://www.reddit.com/r/lua/comments/6ijyi6/help_define_a_function_in_an_argument/dj8lds4/) tries to cover some of the fundamentals of Lua's first-class functions and how to use them to do interesting things, and there's also [this comment](https://www.reddit.com/r/lua/comments/7lw1mc/named_function_as_parameter/drqh5oa/) trying to explain callbacks and HOFs to someone. Sometimes, a problem seems harder than it is because you don't know what sort of solution to look for. If you haven't encountered a concept before, you won't know to consider it as a solution, which leads to messy workarounds like trying to copy/paste more efficiently instead of dealing with the root problem. Even though it's not what you asked for directly, it sounds like you might be describing a problem that could be solved using HOFs. Even if it's not, understanding first-class functions and how you can use them might help you find better solutions to other problems in the future. Finally, if it turns out you really do just need to do a lot of copy/paste boilerplate code, you may want to consider using a different editor if SublimeText isn't doing what you need. There are more powerful options out there, and it may be time to look for them. Either that, or you could make a preprocessor that will generate the boilerplate-heavy Lua code you need from a more compact syntax. Of course, if you're going that route, you might just be better off writing in [Urn](https://urn-lang.com/), which compiles to Lua source and has macro support built in.
to answer ur question OP the site WeAreDevs gives out free exploits, so go there
Review what the manual says about `for` loops. &gt; a **for** statement like &gt; &gt; for var_1, ..., var_n in explist do block end &gt; &gt; - `explist` is evaluated only once. Its results are an iterator function, a state, and an initial value for the first iterator variable. The important part is the loop only works with one iterator function. (Actually, the mistake you made is more an inappropriate use of `explist`. I guess this happens a lot when first learning Lua.) You can't throw two iterator generators at it. A single function can wrap two of them to do the iteration in parallel. function combine(iter1, iter2) return function() local var1 = iter1 and iter1() if not var1 then iter1 = nil end local var2 = iter2 and iter2() if not var2 then iter2 = nil end return var1,var2 end end for column1, column2 in combine(string.gmatch(values, '([^,]+)'),string.gmatch(keys, '([^,]+)')) do print(column1, column2) end The `combine` function holds the two iterators and returns a single iterator that calls both of them each time. To avoid unusual problems, it sets an iterator to `nil` after it stops so it doesn't get called again. There is a problem though, this only works for iterators with internal state. Lua allows a different type of iterator where the state is stored by the `for` loop. A more complete solution would need to be able to keep track of that state. (12 minutes later) So something like this: https://pastebin.com/wfVUenhA for column1, column2 in zip():iter(string.gmatch(values, '([^,]+)')):iter(string.gmatch(keys, '([^,]+)')) do print(column1, column2) end 
Remove the "," at the end of lines, those are function, not tables
THANK YOU! i feel foolish for not seeing that before but i'm happy to have it sorted out
Ok despite my snarky comment I know what you're talking about. If the snippet system in Sublime doesn't work for you, it might be worth investing in some tooling that lets you create some template spells, fill in a few fields, and have everything generate correctly. You can use something like a web template library for Lua, since those are really just about generating text at the end of the day. Do beware of too much copy pasta. It provides flexibility in thay every instance is its own uniaue thing, but when you go to rebalance or refactor stuff it becomes a huge burden. At game companies where this stuff is ad hoc and not well structured it usually meand somebody writes a perl script to update the hundreds of files where they want to change something. Explore using Lua's prototype chain to reduce some of this burden. I'd recommend not using a bunch of higher order functions since it's harder to read state stored in closure upvalues rather than state directly on tables.
Every time you do function blah.blah() end, you’re removing the original function and replacing it with whatever code is contained within the new function. So, the first .AddCharacter and the first .AddCharacterToWheel functions don’t do anything. I’m going to assume that this isn’t what you intended?
Oh, and you might want to remove the “~~” after Coins. gfx/characters/blah blah blah.png should be in quotations marks.
Thank you! I'll be testing it as soon as I get back home
Let me know how it goes. Apologies in advance if my instructions are unclear. If you want, I can make an edit for you later.
now, upon pressing start, it spawns Isaac, the default character. it gives these errors in dev console : https://drive.google.com/file/d/1O5eN1gJHwmz2tPe0PHl3MLMBvhvnRB9Z/view?usp=sharing
I think you need to call LoadModData somewhere, because that is what creates SaveData. Apparently, SaveData does not exist and it is trying to read from it.
Can you paste your current script here?
local function onTrueCoopInit() InfinityTrueCoopInterface.AddCharacter{ Name = "Seed", Type = PlayerType.PLAYER_ISAAC, SelectionGfx = "16_seed.png", Hearts = 6, Trinket = TrinketType.TRINKET_LEFT_HAND, Items = {CollectibleType.COLLECTIBLE_2020, CollectibleType.COLLECTIBLE_D4}, OnStart = sprite:load("gfx/characters/costumes/Character_019_seed.png", false), Coins = 3, Bombs = 1, Keys = 1, BossPortrait = "PlayerPortrait_seed.png", BossName = "PlayerName_seed.png", GhostPortrait = "seed.png", GhostName = "seed.png", FetusSprite = sprite:load("gfx/truecoop/player_fetus/body_seed.png", false) } InfinityTrueCoopInterface.AddCharacter{ Name = "Jasco", Type = PlayerType.PLAYER_ISAAC, SelectionGfx = "15_jasco.png", Hearts = 4, SoulHearts = 6, Trinket = TrinketType.TRINKET_ACE_OF_SPADES, Items = {CollectibleType.COLLECTIBLE_DADS_KEY, CollectibleType.COLLECTIBLE_CAMBION_CONCEPTION}, OnStart = sprite:load("gfx/characters/costumes/Character_jasco.png", false), Coins = 5, BossPortrait = "PlayerPortrait_jasco.png", BossName = "PlayerName_jasco.png", GhostPortrait = "jasco.png", GhostName = "jasco.png", FetusSprite = sprite:load("gfx/truecoop/player_fetus/body_jasco.png", false) } LoadModData() InfinityTrueCoopInterface.AddCharacterToWheel("Seed") InfinityTrueCoopInterface.AddCharacterToWheel("Jasco") end --[[if InfinityTrueCoopInterface then onTrueCoopInit() else if not __infinityTrueCoop then __infinityTrueCoop = {} end __infinityTrueCoop[#__infinityTrueCoop + 1] = onTrueCoopInit end ]] i blocked out the final few lines because they were blocked out in the original main.lua and its not returning the error but neither new character appears on the wheel
if i leave those not as comment lines it returns this error in dev console : https://drive.google.com/file/d/1H0HPp2FDexs25JHhFydYBvcQQ4kJm-Gf/view?usp=sharing
You ever heard of the [Chocolately](https://chocolatey.org/) package manager for Windows? It lets you install applications from the command prompt by typing `choco install &lt;program&gt;`, for instance `choco install lua`. You can also use the lua repl without needing to install lua: https://repl.it/languages/Lua
Roblox doesn't require any modding or anything special. Roblox Studio doesn't require you get Lua -- it has Lua inside it already. Just following the directions on the [Roblox Wiki](http://wiki.roblox.com/index.php?title=Main_Page) to get started.
Easiest way imo to start with Lua is with ZeroBrane Studio... https://studio.zerobrane.com/ Download it, run it, type some code and hit F5 to run/debug or F6 to just execute the code.
I also reccomend it, it had few versions of Lua available for general purpose scripting (LuaJIT, Lua 5.2/5.3) as well as some Lua based frameworks like Love (https://love2d.org/, wiki link in top left) which is amazing for 2d games or other apps made for fun.
`ipairs` iterates through a list *in order*, that is, the indexes `1`, `2`, `3`, `4`, `5,` ..., until it hits a `nil`. However, you're filling in the map *not* in numerical order, but as *columns*. For example, consider a 4x4 grid: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 You first address the first column, `x=1`. After `[1]` and `[5]` are filled, the length is just `[1]` since you've already hit a `nil` value at `[2]`. This continues on: Fill: 1 5 9 13 2 6 10 14 3 7 11 15 4 8 12 16 plots: 1 1 1 1 2 2 2 2 3 3 3 3 7 11 15 16 You can fix this by switching the order of your `for` loops -- `x` can be inside and `y` outside. After you do that, you can simplify your computation of `plots` (and make it faster) by doing `local plots = #plotsType2`.
It doesn't "fill" it with anything. Keys with no associated value hold `nil` to represent the absence of a key. Lua tables are not arrays. They are *associative maps*: a collection of key-value pairs. This gives you records, tuples, lists, and dictionaries. How you *interpret* it is up to you. `ipairs` only makes sense on things that are shaped like lists; you were using it on something that wasn't shaped like a list. Determining whether or not something *is* shaped like a list would be slow, so Lua doesn't do it defensively for you.
For example, maybe we want to have a list that also has fast *searching* for values. This requires a key =&gt; value map *and* a value =&gt; key map. We can make the key =&gt; value map always be contiguous, but the value =&gt; key map *can't* be contiguous if we want to be able to store whatever integers we want! local function append(list, value) list.index[value] = list.index[value] or {} list.index[value][key] = true list[#list + 1] = value end local function find(list, value) return next(list.index[value]) end local a = {index = {}} append(a, 10) append(a, 20) append(a, 30) print(a[1]) --&gt; 10 print(a[2]) --&gt; 20 print(a[3]) --&gt; 30 print(find(a, 10)) --&gt; 1 print(find(a, 20)) --&gt; 2 print(find(a, 30)) --&gt; 3 -- a looks like a = { [1] = 10, [2] = 20, [3] = 30, ["index"] = { [10] = {[1] = true}, [20] = {[2] = true}, [30] = {[3] = true}, }, }
Having sparse keys is totally reasonable, and necessary since tables are Lua's only data structure. For example, maybe we want to have a list that also has fast *searching* for values. This requires a key =&gt; value map *and* a value =&gt; key map. We can make the key =&gt; value map always be contiguous, but the value =&gt; key map *can't* be contiguous if we want to be able to store whatever integers we want! local function append(list, value) list.index[value] = list.index[value] or {} list.index[value][key] = true list[#list + 1] = value end local function find(list, value) return next(list.index[value]) end local a = {index = {}} append(a, 10) append(a, 20) append(a, 30) print(a[1]) --&gt; 10 print(a[2]) --&gt; 20 print(a[3]) --&gt; 30 print(find(a, 10)) --&gt; 1 print(find(a, 20)) --&gt; 2 print(find(a, 30)) --&gt; 3 -- a looks like a = { [1] = 10, [2] = 20, [3] = 30, ["index"] = { [10] = {[1] = true}, [20] = {[2] = true}, [30] = {[3] = true}, }, }
First, stop calling it LUA, it isn't a fucking acronym.
&gt; so in lua defining an element at index 1 and then at index 10 doesn't explode ( like it would in any sane language ) but rather just exclusively fills everything between 1 and 10 with a null value... No, it doesn't fill it, but looking up a non-existant key returns `nil`. Note that Lua tables are not arrays, but hashmaps/dicts/associative arrays. This is also how Ruby's hashes work: ```ruby irb(main):007:0&gt; a={1=&gt;1} =&gt; {1=&gt;1} irb(main):008:0&gt; a[2] =&gt; nil ``` However, Ruby does have arrays too, and arrays actually work like the bizarro world you're describing too: ```ruby irb(main):001:0&gt; a=[1] =&gt; [1] irb(main):005:0&gt; a[3]=2 =&gt; 2 irb(main):006:0&gt; a =&gt; [1, nil, nil, 2] ```
I agree, the information is there for developers who know about MinGW but not for those who'd like to try Lua in the same way they'd try Python, for example, by downloading an installer and running it.
you can also simplify your for loops. you don't need to specify step size, if it defaults to 1. and you don't need to subtract 1 from x, if you're just going to add 1 again in the next line. for y = 0, iRegionHeight -1 do for x = 1, iRegionWidth -1 do local i = y * iRegionWidth + x
If you want any help, you'd need to link the Logitech mouse API and the documentation. At least help us out a little.
thx for the response. the thing is i have no coding experience. i have no idea how it works. i thought you could just write the code without any extra information. my bad sry here is the link to the logitech gaming software. [http://support.logitech.com/en\_us/product/g502\-proteus\-spectrum\-rgb\-gaming\-mouse/downloads#](http://support.logitech.com/en_us/product/g502-proteus-spectrum-rgb-gaming-mouse/downloads#) after installing the software, change On\-Board Memory to Automatic Game Detection. after that go to profiles tab. create new profile for a game or application \(doesn't matter\). right click on the profile you just created and select Scripting. then the coding page shows up let me know if you need more infos. thx again
tbl.field will always be faster, but tbl["field"] should be just as fast. tbl[idx] can in the worst case cause two lookups to happen - one to _ENV to load idx, and one for the table itself - but this won't happen with code that properly uses locals
This is more relevant: http://www.wolfpack.pe.kr/attachment/1180489860.pdf
thx alot man. hope you guys can help me with that. im completely a dump in programming stuff lol
Glad you posted this. I'm a software developer and I'd love to work on this with someone if you're up for it. I have the G602.
The documentation mentions "G" keys and "M" keys. Are these buttons on your mouse? Does your mouse have any buttons on it aside from the usual ones? Do these buttons have a label on them? Because I read the docs and you might not be able to bind the middle mouse button to a script, but you certainly can bind those extra buttons on the mouse.
thx man. i would love to see that. [Novemberisms](https://www.reddit.com/user/Novemberisms) is working on it.
Lua
yeah i know. i changed it but still not working. im reading the pdf and searching for some reference to find something.
to help with debugging, you should add log statements in the onEvent function just so we can see if it's actually being triggered. can you try out this code, then press G6 a few times on your mouse, and show me the output on the dev console? local keys_to_alternate = {"up", "down"} local key_alternate_index = 1 function onEvent(event, arg) OutputLogMessage("event = %s, arg = %s\n", event, arg) if event == "G_PRESSED" and arg == 6 then local key_to_press = keys_to_alternate[key_alternate_index] OutputLogMessage("G6 detected! key_to_press: %s", key_to_press) PressAndReleaseKey(key_to_press) key_alternate_index = key_alternate_index + 1 if key_alternate_index &gt; #keys_to_alternate then key_alternate_index = 1 end end end
this is what it says : [https://imgur.com/kWrKCT3](https://imgur.com/kWrKCT3)
why not? I've used it extensively in one of my projects. It was really useful. Would love to see a C port taking it as inspiration
What if you have an application and would like for users to be able to script their own addons? They could use any language supported by this library, and you'd only have to deal with Lua.
Love2D
LuaSocket is well designed, in my opinion. If you want some other examples, I wrote bindings to a few popular libraries ([MoonLibs](https://github.com/stetre/moonlibs)), although I cannot say they are well designed because... well... I wrote them so I'm biased. By the way, your task is much easier (almost natural) if you have a clean native API to bind to in the first place.
Alright, that is a good use case.
because we already have [lua-stdlib](https://github.com/lua-stdlib/lua-stdlib) at least
You should be passing an argument to the script. Are you doing that too?
I have a collection of numbers and letters to substitute for the "vigil_os_id" but that's the only other thing I have
Can you share the error you get after going that? 
When I change the vigil_os_id to 3772A8462BE3 in the 3rd from last line I get "lua: jdoodle.lua:43: malformed number near '377a8462be3'" If I remove the letters I get "lua: jdoodle.lua:26: attempt to get length of a number value (local 's') stack traceback: jdoodle.lua:26: in function 'r' jdoodle.lua:44: in main chunk [C]: in ? Command exited with non-zero status 1"
Thank you so much, I can't believe I didn't try that earlier! Works a charm now!
Glad I could help!
What is this, the world's worst security hash? Kids, don't roll your own crypto!
Lol it is part of a mobile game called The Vigil Files \([https://play.google.com/store/apps/details?id=com.makario.vigilos](https://play.google.com/store/apps/details?id=com.makario.vigilos)\) a pseudo real\-time detective game. It is well worth a look!
LuaJIT is very small, very fast and very stable. It's not 100% compatible with the latest "big" Lua version but that shouldn't pose a problem.
LuaJIT can be really fast but you need to architect your code to play to its strengths. It likes code with clear loops for control flow and where all access to the C++ is done via its FFI interface. It [dislikes](http://wiki.luajit.org/NYI) code that uses anonymous functions, coroutines, string pattern matching or which uses the classic Lua C-API. I think it also is worth asking yourself if performance actually matters in your case. For many games the Lua performance is not a bottleneck.
My understanding is that using Luajit means that you are probably going to want to target Lua 5.1. I dunno if that actually matters, last I heard things had gotten somewhat weird with 5.3 (the behaviour of every basic arithmetic operation was changed for example). It might be possible that 5.1 is the correct version to target anyway.
I recommend reading [this thread](https://news.ycombinator.com/item?id=12573981). It is a bit old at this point but it will give you some idea of the issues surrounding LuaJIT's maintenance.
The change to arithmetic is that now there are also real 64-bit integers in addition to double-precision floating point numbers. Most of the time you won't notice the differece. But if you are working with large numbers (less tahn 2^63 but more than 2^53) or if you want to do bitwise math then the new integers are very nice.
Ok thank you all for your answer. I think that I have to wait until I have a major understanding of what I will do with scripts. But I think that I'm going to use luajit anyway, as I don't need all lua 5.4 features such integers.
Once I was working on adding OpenGL support to my own app engine \(based on LuaJIT\+C on Linux\) by reimplementing Jakob Progsch's C\+\+ \[OpenGL examples\]\([https://github.com/progschj/OpenGL\-Examples](https://github.com/progschj/OpenGL-Examples)\) in LuaJIT. At example #8 \(map buffer\) I came to believe that I hit LuaJIT's limits: I could not render the 1000ish particles in the example with satisfying speed \(i.e. 60 fps\) on my 2012 ASUS netbook \(which has an AMD E\-450 APU\). All the previous examples ran fine. As I investigated deeper, I realized that all along I had the JIT turned off: I did not load the jit module at startup because I thought it's not needed for the JIT to operate. Once I turned it on \(by adding one line to the code\), my loop started to render at 60fps immediately.
&gt; Most of the time you won't notice the differece. But when you do it will mostly be hard to find bugs in existing code. &gt;...the new integers are very nice. Yeah, but hardly worth forking the language for no real reason. If integers were wanted then they could of been added as separate operators.
BeamNg.drive (https://www.beamng.com/) uses C++ (game engine) and luajit for scripting, and far as I know they are very happy with it. They implement many many subsystems in lua (ex. AI). They have a very lively forum, maybe take a look there. Hope this helps.
I think we will need to agree to disagree here. Having a whole new set of operators would be confusing as hell since people would keep trying to use the old operators that they are used to. I think the Ocaml is the only language I know that uses separate operators for integers and even then they only do so because its a tradeoff for better type inference and its the floating point numbers that get the ugly set of operators (+., *., etc). And frankly, you need to go through some really weird corner cases to find a situation where the change to integers causes a weird bug. Great care has been taken with backwards compatibility and it is hardly something that is an actual problem in practice. And there are many places where you get less bugs because the distinction simplified many weird interactions in the underlying Lua-C interface. The only reason luajit hasn't also added integers is because its architecture assumes that every value can fit inside a floating point number (nan-tagging trick), which limits pointer values and unboxed integers to 53 bits at most (and for a long time only 32 bits). Luajit is sticking with the old numerical behavior because it cannot efficiently implement the new one, not because integers are somehow a bad feature.
Last I heard, the Luajit person was specifically unhappy about the language fork aspect...
Can you elaborate on the bit about disking anonymous functions? I didn't see anything about that in the link.
I think Mike's issue with integers is that they would be very difficult to implement in LuaJIT. Which is true: it would require basically rewriting LuaJIT from scratch. From a backwards compatibility point of view the 5.3 integers were designed to avoid that sort of "dynamically typed" confusion you are talking about. I would recommend checking out [this talk](http://www.inf.puc-rio.br/%7Eroberto/talks/ws2014.pdf) from Roberto for more details.
LuaJIT cannot JIT compile traces that create closures (FNEW bytecode). This includes anonymous functions. In these cases it falls back to its interpreter. LuaJIT's interpreter is still very fast (it is a piece of art using lots of hand-tuned assembly) but it will be much slower than the JIT, specially if you have FFI calls mixed in. You can test this kind of thing out by running luajit with the `-jdump` flag. Consider this contrived example: local function sum(N) local s = 0 for i = 1, N do s = s + i end return s end print(sum(10000)) When you run it with `luajit -jdump` it reveals that LuaJIT managed to compile this all the way to a simple assembly-language loop. On the other hand, if you have a function definition inside the inner execution trace (either named or anonymous) then LuaJIT doesn't manage to do the same: local function call(f) return f() end local function sum(N) local s = 0 for i = 1, N do s = s + call(function() return 1 end) end return s end print(sum(10000)) The output from `-jdump` reveals that LuaJIT gave up on JIT compilation due to the anonymous function ---- TRACE 2 start test.lua:15 0006 UGET 6 0 ; call 0007 FNEW 7 0 ; luajit_closure.lua:16 ---- TRACE 2 abort test.lua:16 -- NYI: bytecode 51 In this particular contrived example the anonymous function doesn't actually need to be a nested function definition because it doesn't refer to any variables from `sum`. It would be possible to appease LuaJIT by converting it to a named function that is created outside the inner loop: local function call(f) return f() end local function one() return 1 end local function sum(N) local s = 0 for i = 1, N do s = s + call(one) end return s end print(sum(10000)) But the point here was just to show that LuaJIT very much prefers when your hot code paths do not contain any anonymous functions or callbacks. If the callback function needed to refer to local variables from `foo` there would be no way around it. 
I learn something every day! Unfortunately I'm on mobile so I can't test for myself, but would LuaJIT be able to compile the inner loop in something like this? function forEach(t, f) for i,v in ipairs(t) do f(i,v) end end local a = 1 forEach(someTable, function(i,v) a = a + v end) Where the creation of that anonymous function would fall back but the actual execution of it inside the forEach method would be JIT'd? I understand that in a case as trivial as this the advantages would be underwhelming.
Yes. In this case LuaJIT can compile the inner loop because the closure is being created outside of it.
I absolutely will. Do you have any hidden gems of reference material that might serve me well for beginning to explore it?
I liked [Javier Giraldez's talk](https://www.youtube.com/watch?v=sz2CuDpltmM) talk on the topic.
LuaJIT is solid software and will continue to be extremely useful for extending applications for years to come. 
Though you could just cdef int64_t in LuaJIT and have them too, right? Would be more explicit but I actually like that from having them mixed with regular doubles.
LuaJIT 64-bit integers have their quirks: x = 1LL y = 1LL z = 1 -- equality seems to work correctly print(x == y, x == z, y == z) t = {} t[x] = 10 t[y] = 20 t[z] = 30 -- but they are all different when used as table keys! print(t[x], t[y], t[z]) Lua 5.3 integers are also explicit. Literals with a `.` in them are floating point and literals without are integers.
You should probably ask that in a sub dedicated to tboi modding, since people here have no reason to know how the tboi "API" works. Also, format your code if you're gonna post it: Place 4 spaces before every line of your code and it will show correctly.
Can you give an example of how you loaded it? I use LuaJIT in a C project and now I'm wondering if it's actually off or on.
See in [https://github.com/cellux/zz/blob/master/\_main.tpl.c](https://github.com/cellux/zz/blob/master/_main.tpl.c) it's just a call to luaopen\_jit\(L\) with L being a lua\_State\*.
Thanks! Looks like luaopen_jit is covered by luaL_openlibs (which is what I used). Good to know, though!
I wouldn't recommend using LuaJIT. It's a dead-end. Mike stated that he won't support new iterations of Lua and IIRC lately he announced he won't be supporting LuaJIT anymore, something the along the lines he is tired or no more time, you can find it in the net. Apart from that, for a game, you will be perfectly fine with the standard Lua in regard of performance and if something is slow, it will most likely be solvable by changing the way you use the language or its connection with your C++ engine. Using standard Lua you will benefit from new feature/optimizations that the team developing the language will provide in future release and you are not tied to a specific implementation that may not even be supported and developed any longer. Quite a lot of AAA games use perfectly fine standard Lua without issues, so I think the better solution is to go with the main, standard Lua. 
On github... PPC/NetBSD: Fix endianess check. Mike Pall Mike Pall committed Jun 5, 2018 He may not be as active as in the past, but he's certainly *not* gone away. I use LuaHIT for embedded systems dev work. I certainly am not willing to eat the penalty of running PUC Lua in this case. I suspect that other high data volume projects like Snabb Switch would do poorly with that penalty as well.
[Cross-posted from r/roguelikedev] I just made public a little toolkit that I've been using for some time for playing around with shapes, mainly for generating maps for roguelikes. It's a bit niche, but provides some handy stuff with (I hope) a reasonably natural API. Some examples of what it includes: **Basic features** -A 'cell' class with normal (integer) vector operations -A 'pattern' class which holds a set of cells -A bunch of pattern primitives, for drawing circles, lines, squares etc -A bunch of basic manipulating functions, for shifting, enlarging, reflecting patterns. **A basic but flexible Cellular Automata implementation** -Custom CA neighbourhoods and update rules -Synchronous and asynchronous updates **Helpers for generating 'subpatterns'** -Flood-filling to determine contiguous areas (according to custom definitions of contiguous) -Voronoi tessellation -Binary space partitioning -Finding the largest contiguous rectangle in a pattern -Finding points on the inner/outer surface of patterns -I'd love any feedback or comments, and hope it can be of some use to people.
Works fine for me. $ lua Lua 5.3.4 Copyright (C) 1994-2017 Lua.org, PUC-Rio &gt; os.execute("open /Volumes") true exit 0 And Finder opens a window.
Those are standard computer science and programming terminology that Lua shares with most other programming languages.
This is one of the reasons why Lua isn't a great first language, the documentation around it generally assumes you know another language (Java, Javascript, C++, whatever) first. Also, for the record, array, container, list, dynamic, and static are not keywords / technical terms in Lua. You can make data structures that *act* like those things but none of them are first class concepts in Lua.
The problem is you're reading a dictionary trying to learn how to speak German. You can't read a programming language documentation and expect to understand how to program. You should look for introductory programming courses first, even if they are in another programming language, to help you understand these common terms that are found in almost every language.
No dude I am. I've spent like 20 hours this week doing tutorials and learning the language Lua with introductory courses on YouTube. However it is very difficult to understand some of this documentation if you simply don't understand the fundamental terms. 
If you find a specific term you don't understand, Google it first, and if it's still not clear ask about it.
If there was a simple resource for understanding these things, its name would probably be "introductory programming course". Listen to his/her advice, it's spot on.
I'm not quite sure what his advice even is so. I'm already doing that.
Maybe I misunderstood, but I suspect that what you are doing are tutorials on how to code in a particular programming language (Lua, in this case). What you really need - if you find those terms difficult to understand - is an introductory course (or book, or teacher) that teaches you the fundamentals of programming and computer science in general. It's like you're doing courses on how to play a musical instrument, but what you really need at this point is to learn the very basics of music theory.
I took an AP Computer Science Principals class last year. Wasn't amazing at it but I got an A so must of done something right lol. Still wasn't nearly as comprehensive as simply learning it myself tbh.
Lol... Allright, then. Maybe you just need to search for those terms on wikipedia (and if you land on a disambiguation page, look in the 'Computer Science' or the 'Computing' sections). 
I can't recommend a beginner's resource, I'm afraid. Lua was far from my first language. But Lua is an excellent first language, the only risk is that it will spoil you! Which ever language you start with, you will learn the crucial skill of cruising search engines looking for explanations of new concepts. Perfectly serious, it's as important as knowing how to use a text editor. Get yourself a paper copy of Programming in Lua and search for anything you don't understand. Good luck!
I disagree with this a bit. Lua *as a language* is fine. But the resources and classes and whatnot just aren't there. It's hard to find an intro to programming class in Lua while there are tons in Java, JS, etc.
Learning straight from the documentation is a bad idea, I find it very dry to use too! Look up some video tutorials for Lua, it's not a hard language..
The most fun way to learn a language is making a game along when you learn it.. try löve2d, it's a Lua game engine.. 
Thanks a lot guys, im starting a project on roblox right now. Haven' play the game for like 10 years now
Here's what I did: access_by_lua ' -- Import as mappings.lua by calling require(".mappings") tablemap = { ["example.com"] = "new_example.com", ["old.com"] = "new.com", ["bad.com"] = "good.com", } scheme = ngx.var.scheme .. "://" host = tostring(ngx.var.host) if tablemap[host] then return ngx.redirect(scheme .. tablemap[host] .. ngx.var.request_uri, 301) end ';
Much appreciated for posting your solution.
I'm Gay
`==` doesn't matter, you get the same problem if you use a bignum library, you bignums will have a metamethod to support arithmetic and comparison with vanilla Lua numbers. if you care about safe equality tests then you should be using `rawequal`
There's nothing stopping you from using both. That said, I'd recommend you just start sketching out what you want to do, and look more at each library for things you might need as you go along.
Sure but it feels weird to have "bignum problems" with 64-bit integers.
Yep! It causes a location: header redirect on the client side, so not the same but %99 percent of clients follow the location headers. Browsers usually even cache this mapping which reduces the server penalty.
If you're referring to "Programming in Lua", I would check out the online version first and see if it's a resource that you find easy to digest. My experience with it is, while exhaustive, it made a lot of assumptions I was coming from a C background (which I wasn't) so it took multiple reads for me to understand the material. Buying the latest version of the book you will see new language features and changes not available in the online version of the book, but if you're learning Lua to program in love2d or any other luaJIT-based programs these new features won't be available to you and may leave you frustrated if you try to use it, not realizing it's unavailable in the version of Lua you're coding for. As an aside, for a user that is learning Lua as their first programming language I don't have any good recommendations. Because there are no good beginner resources for free I am currently working on an open ebook that teaches Lua, basic computer science concepts, and Love2D (so far I have only finished the first chapter which goes over basic features of the language).
Well, I have pretty solid background in Lua for MTA, but in case of gtav... Isn't that against the game license?
No it's fine, they had a court case a couple years ago and were shut down for a while, in the end TakeTwo and Rockstar agreed that aslong as they implemented Anti-Piracy measures they were fine with it 
Yes. It is really well written. Maybe you can buy the 2nd edition used to save some money, and that version corresponds to Lua version 5.1 which is used with Love2d.
Your right the online documentation was kind of a nightmare tbh. As you said it expected you to come from a C background and taught accordingly. And it definitely wasn't beginner material. It already expected you to know all the basics of programming when you started. Thank you for the help. It's a shame your book hasn't released yet I'd read it. 
Absolutely. It's my second or third-favorite programming book, next to The C Programming Language and The Practice of Programming. I read it cover-to-cover, and I feel really comfortable in Lua now. There are definitely some assumptions that you are already familiar with programming, but remember, if you don't understand a part, you can just skip it; you'll still learn plenty along the way. If you really need to understand a part, you'll figure it out, and you can always come back to the rest later.
Dont
Ew stop using DLL injectors cause Ro🅱️lox can detect them being executed on the background which will result into an error and crash. I heard there's an better way of bypassing FE
Tables and variables are different Tables: stores multiple values like integers,, bools, strimgs etc While variables acts as a value holder which can be changed later on by the programmer 👌
Make an onupdate() function lmao :thinking:
Pretty sure there's no difference
Learnt lua from my experiences from other programming languages and other sources as well. I o to the lua wiki for reference to the api's 👌👌
Does if and elseif has a difference? I don't think so, if they do then you should just benchmark the if statement
Make a table 👌
Lmao you don't need a teacher to learn your first program. I've seen 9 year olds learn programming by themselves and I doubt that there would be anyone willing to teach you
Learn from free models ✔️
math.seed 👌👌👌👌
I don't plan out my scripts lmao I just start right away
It is "all in there" but some important things are literally one sentence. There is no fluff and it cannot be skimmed. The Book is currently in the 4th edition and covers Lua 5.3. https://www.lua.org/pil/ The 2nd and 3rd editions are just fine and can be had used for &lt;$10. Love uses LuaJIT which is a mixture of 5.1 and 5.2 features. 
Hey that's nifty. IIRC there was a python module that did something similar, using TCC
Nice! Well done.
Perhaps create deckTable empty then use a function to build each element? deckTable = {} function deckTable.push(g, n) deckTable[#deckTable + 1] = { GUID = g, name = n, getDeck = function(self) return getObjectByGUID(self.GUID) end } end -- then push each element here deckTable.push("123456", "First deck") -- etc.
When asking a question it is better to create a minimal runnable example. I took the liberty of making one for you and also making it more idiomatic Lua: ----------- function bt(n) return coroutine.wrap(function() if n == 1 then coroutine.yield('x') else for i = 1, n-1 do for l in bt(i) do for r in bt(n - i) do local s = '(' .. l .. ',' .. r .. ')' coroutine.yield(s) end end end end end) end function test(n) print("testing", n) for s in bt(n) do print(s) end end for i=1,5 do test(i) end ------ Some changes I made: * Use coroutine namespace instead of assuming that `yield`, `create` etc are in the globl namespace. * Use coroutine.wrap instead of create/status/resume. * Remove extraneous spaces and parenthesis * Remove useless `local i,l,r` declaration. Lua loops implicitly declare their variables (like `for (int i` does in C) and the inner declarations shadow your original declaration. * When making recursive functions I like using a clear if-else structure for the base case and recursive case. * I changed the meaning of `n` to be the number of `x` in the output string (off-by-one change) * The bt function always produces a string now, instead of sometimes producing a string and sometimes producing a table. (I imagine in your real example always producing a table would be better but for this test outputting a string lets us get rid of bstring function, and keeps things simpler). 
The easiest way to convert this coroutine-based code to a language without coroutines would be to rewrite using "push based" instead of "pull based" iteration. Instead of havnig a bt iterator which returns the next string when you call it (pull iteration), have the bt iterator call a callback function whenever it produces a new string (push iteration). If you ever used the `.forEach` method in Javascript the idea should be very similar to that. function bt(n, onresult) if n == 1 then onresult('x') else for i = 1,n-1 do bt(i, function(l) bt(n-i, function(r) local s = '(' .. l .. ',' .. r .. ')' onresult(s) end) end) end end end function test(n) print("testing", n) bt(n, function(s) print(s) end) end for i=1,5 do test(i) end --- The downside of push iteration compared to the pull iteration allowed by coroutines is that you cannot use the bt function with regular `for` loops anymore. You also cannot iterate over two streams in parallel anymore. The old version with coroutines would let you do this: local it1 = bt(5) local it2 = bt(6) while true local s1 = it1() local s2 = it2() if not s1 or not s2 then break end print(s1, s2) end If you need the additional flexibility of pull iteration then achieving it without coroutines is significantly more difficult. You would need to convert your code to a state machine, and turn your control-flow inside out. I'd argue that this sort of problem is exactly the reason coroutines were added to Lua in the first place :)
This post is highly instructive thank you! :) A couple of things that are particularly interesting to me. I didn't /quite/ realise that `coroutine.wrap` could replace the way I did it, your code is /far/ cleaner. Likewise, I didn't know that loops declare their variables which is epic to learn as all my code has a similar declaration just for loops and I've always considered it ugly. This has been quite instructive thank you. :)
Firstly, thank you, this was exactly what I was trying to achieve though I just couldn't manage to get my head around it. I've been stuck on getting this right for a month now... Fortunately I don't need all that much flexibility from this at all. It's only purpose is as a once off intermediate step in another project and it just needs to hand out one result at a time. And I would agree with you about the reason coroutines were added to Lua. The convenience afforded by them is pretty amazing. :)
You are welcome :)
Thanks; it is not perfect but it is better than my solution. I did do a change to maybe help keep from duplicating code: deckTable = {} function deckTable.tempFunc(self) if self.GUID == nil then return nil end return getObjectByGUID(self.GUID) end function deckTable.push(g, n) deckTable[#deckTable + 1] = { GUID = g, name = n, getDeck = deckTable.tempFunc } end I figure if I do it the original way, that the program will copy the code every time a new element is added to the table. This may become a problem if the functions get large and numerous. My modification should just assign a pointer to 1 function. Feel free to correct me if I am wrong.
I get what you mean, but worrying about optimizing something like that is a bit excessive. Lua doesn't let you manually manage pointers anyways.
I also used TCC for allowing [C code to be loaded by Lua](https://github.com/spc476/lua-conmanorg/blob/master/src/tcc.c), and further used that to [load Lua modules written in C directly from source](https://github.com/spc476/lua-conmanorg/blob/master/lua/cc.lua).
I don't know why you feel like metatables aren't what you need in this situation because they totally are. Make a metatable for all the decks with the function you need, and make a constructor function that sets the metatable of each deck to it. Like so: -- set up the metatable local deck_mt = { getDeck = function(self) return getObjectByGUID(self.GUID) end end } deck_mt.__index = deck_mt -- this creates a new deck. pass in a table with the properties you want local function newDeck(properties) local deck = setmetatable(properties, deck_mt) return deck end -- create the deck table. deckTable = { newDeck { GUID = '123456', name = 'First Deck' }, newDeck { GUID = '234567', name = 'Second Deck' }, newDeck { GUID = '345678', name = 'Third Deck' }, } 
Are you sure it's even Lua? While possible, it's not common to write web pages in Lua...
yes, LUA and PHP. It's all on github if you want to check out: [https://github.com/PES-INF1629/WERpapers](https://github.com/PES-INF1629/WERpapers)
Looks like Lua Pages and cgilua. https://keplerproject.github.io/cgilua/manual.html
The content on that site is hosted in a database. Assuming you only need to upload some new content, talk to the former admins and find out the username and password to log in to upload papers/etc. If you do need to change the lua code, you'll need to get access to copy files to that server by talking to either IT or the former maintainers. It's probably a network share or maybe sftp (or maybe ftp, since it looks quite old...). Finding someone involved in running that server is the only way. To test lua changes locally, you'll need to set up a webserver (that site uses apache 2.2) with a module that can run luapages. Then you would point that webserver at your local copy of the files. This is not super easy but the luapages documentation should help. 
I think part of your trouble is that the table index operator in Lua is `[]`, not `()`. Parentheses are used only for function calls in Lua. 
I don't understand. Why can't you use an loop?
How about recursion? def foo(continue) if !continue return false # continue = do stuff return foo(continue) 
Thanks. I am having a hard time getting my head around the solution here. I will need to do more studying on how metatables work. When I first saw __index for metatables, I thought it was used to control what happens when you index a table. IE/ Skip every other element, or do something when an empty index is hit. I never imagined I could get it to call a function on the current indexed item. 
The default size of the Lua stack is defined by the LUA_MAXSTACK macro in llimits.h and is by default set to 2048. This means that after 2048 iterations you will get a stack overflow. So it's best to avoid recursion in languages which do not have tail call optimization (most of them, outside of Scheme, some other lisps, Haskell, etc.)
You want something like this pattern: previous_value = nil current_value = 0 while true do -- Do something with previous_value and current_value here previous_value = current_value current_value = current_value + 1 end
Standard Lua had TCO last I saw
It still has (*["Lua implements proper tail calls"](http://www.lua.org/manual/5.3/manual.html#3.4.10)*)
What are you looking for in the material you want to learn from that you aren't getting from those? The "Programming in Lua" book is primo for learning about all about Lua. Beyond that, there are plenty of YouTube tutorials if video is your preferred way of learning.
well, I'm just looking at possible alternatives that could help me.
the official reference manuals are awesome. The wiki is not official, so it can be sketch at times but the manuals are detailed and accurate. https://www.lua.org/manual/5.1/manual.html https://www.lua.org/manual/5.3/ Another amazing source, but you'll need to know a bit of C is just reading the actual C API/interpreter source. It's extremely small and well written, even for a C noob it is understandable. When dealing with weird edge cases it is the definitive resource. If you want examples there is a guy who as done work in Love and is generally one of the most prolific people in the lua community imo look up a guy called lefo. He has some game jam entries on his GitHub and he also has a bunch of other interesting projects like a language that compiles to lua, a web framework for lua, and a blog that details how to use advanced language features.
Learning Lua from the manual is difficult w/o having concrete projects to work on. I recommend going through something like [The New Turing Omnibus](https://www.goodreads.com/book/show/696274.The_New_Turing_Omnibus) and writing a bunch of code for each chapter. Another good one would be [MAL - Make a Lisp](https://github.com/kanaka/mal). Not a reference, but a great book is [Lua Gems](https://www.lua.org/gems/) as it covers lots of different uses of Lua. I'd also look at the wealth of Lua code on * https://luarocks.org/ * github, bitbucket I find nice to visualize stuff with Love, and it isn't a crutch that will hold back your understanding. Maybe write your code a module and then incorporate into a Love program for visualization.
I'll see if can find a copy of the book you mentioned, I tried to find it at [Book Depository](https://www.bookdepository.com/The-New-Turing-Omnibus--K-Dewdney/9780716782711) but it ain't available. But I will take a look at luarocks, it just that I don't want to completely be dependent on Löve2D and I think that it's good to understand the language without being dependent on a framework. But I will use Löve2D to visualize when I need to but for now it's the language itself that I want to focus on. Does that make sense?
I'm having a bit of trouble of finding this lefo person, do you have a link? 
I just tried this in my real word program and I can't get it to work. I have more than 1 function, and when I tried to put in a second function it would not compile. A small snippet of what I did: local deck_mt = { getDeck = function(self) return getObjectByGUID(self.GUID) end getPosition = function(self) local deck = self.getDeck() return deck.getPosition() end } deck_mt.__index = deck_mt From what I am reading for __index, it is used to call a function for when an index is not found. 'If there is no such method, as usually happens, then the access results in nil; otherwise, the metamethod will provide the result.' (https://www.lua.org/pil/13.4.1.html). Maybe it would work if it were a metamethod on the function call? deck_mt.__index.getDeck = getDeck_mt deck_mt.__index.getPosition = getPosition_mt However the code as such will not compile either. I think I am going to stick with sum_01's solution for the time being, as I was able to get it to work.
https://github.com/leafo/ Leafo not lefo
Thanks!
[Alibris](https://www.alibris.com/search/books/isbn/9780716782711) has some used copies, or maybe try [World Cat](http://www.worldcat.org/).
I'll be taking a look at alibris, I think that's my best bet
Use functions: local counter = 0 function getCounter () counter = counter + 1; return counter; end function getPrevious () return counter - 1; end
Codewars, CodeCombat
[Walker's Alias method](https://en.wikipedia.org/wiki/Alias_method) is I think the general way people go about sampling like this.
Hey thanks! I don't really get the wikipedia page but this is a good starting point to google.
If you can "require" a C lib, you could load a function that does what you need. But my guess is that "requiring" a lib file will be also disabled/forbidden. https://www.lua.org/pil/26.2.html 
/u/alphabetr gives what's probably the "correct" answer, but if you want something quick-and-dirty that gets the job done, you could also do something like this: weighted_random = function (pool) local poolsize = 0 for k,v in pairs(pool) do poolsize = poolsize + v[1] end local selection = math.random(1,poolsize) for k,v in pairs(pool) do selection = selection - v[1] if (selection &lt;= 0) then return v[2] end end end pool = { {20, "foo"}, {20, "bar"}, {60, "baz"} } print(weighted_random(pool)) Basically, sum all the weights to get a range of 1 to `poolsize` for math.random, and then loop through a second time, subtracting the weight values one by one until you hit 0 or lower. When that happens, return the value associated with that weight. You don't have to worry about adding/removing new values this way, but it may not be suitable if you want to show the numbers (like showing a 1-100 roll and percentage chances). (Warning: I'm rather tired right now and I wrote this on the spot, so caveat emptor. Seemed okay at a glance and a quick test, though)
[This](http://www.keithschwarz.com/darts-dice-coins/) is my favorite article on the alias method.
That looks great, thanks!
Cool, gonna give this a try, thanks!
Wait, what? I have a music generating program that features weighted random results *heavily.* I mean it's almost like the entire point of the damned thing. And I, not being a programmer at all, use OP's method of just adding more of the element to the table. So if you want to emphasize the perfect fifth of a major scale over the perfect unison and not use any of the others then you'd write: &gt; "P1:1, M2:0, M3:0, P4:0, P5:2, M6:0, M7:0" which would give you a table: {[1] = "P1", [2] = "P5", [3] = "P5"} and then just choose one at random (1/3). But now you're saying there is a better way!?! Unfortunately I don't understand the Wiki article nor the one linked to below so there's nothing much I can do about it (I am not a programmer). Some day I'll tell the story about how this crazy obscure thing called a *binary search algorithm* and how it changed my program and my life!
Yeah, this is a perfectly fine way of going about it, it just doesn't scale well. It'll be clumsy if you have a lot of candidates to choose from, and you need a huge table if you have a big hierarchy of probabilities to represent (like one weight being a very tiny fraction of another weight).
I'm a little concerned now. For the vast majority of users the resulting tables won't be crazy, say 400 elements at the most. But I also allow for more technically minded folk who might want to go a bit crazy. Before I discovered binary searches the situation was similar with another part of the program. In most cases you'd have to search a table with 12 elements 12 times for specific values so you'd average like 72 comparisons. But at extreme ends you might have a table with 3 million elements which would be an average number of comparisons of 1.5 million x 12 (18 million). Compare this to a binary search and you get like 20 x 12 (240). This was a very noticeable difference. Ugh, I'm going to add this to my TODO. Hmmm, I'm wondering something now. As of now unless you do the math yourself you won't actually know the percentage chances you are asking for. You just use bigger numbers to make things more likely. But if I were to allow one to use percentages (and check to make sure they add up to 100) instead/in addition to, would this translate easier to the alias method or am I just going to have to do some extra processing no matter what? Or maybe eliminate the old method and just use percentages? Like: &gt; P1: 33, M2: 0, M3: 0, P4: 0, P5: 67, M6: 0, M7: 0 One of the coolest things about working on this program is discovering solutions to problems on my own and then also discovering that other people have already figured out better ways to do things. I'm continuously amazed at how clever people are and how generous they are in sharing what they've figured out.
&gt; would this translate easier to the alias method or am I just going to have to do some extra processing no matter what? It's been a while since I implemented code using the alias method, but when dealing with probabilities it's always helpful to normalise them. That is to ensure that your weights sum to a constant (in your example, 100). So normalising your probabilities would be a step in the right direction, but for sure you would need to some extra processing in any case. The link posted by /u/munificent looks great. Probably worth setting aside an afternoon sometime to get to grips with it. &gt; One of the coolest things about working on this program is discovering solutions to problems on my own and then also discovering that other people have already figured out better ways to do things. I'm continuously amazed at how clever people are and how generous they are in sharing what they've figured out. Yeah, absolutely. Also you never know when these sorts of things will come in handy.
Unfortunately this isn't possible, the "require" function works differently (requires a single file instead of a library) and requiring C libraries is impossible. No .dll support either. 
Wow, this is tricky and I don't see a way to get this information. I'm pretty sure that you'll be stuck unless the devs add this to the binding. One other option, which is maybe less moral, is to attempt breaking out of the Lua sandbox. https://github.com/erezto/lua-sandbox-escape?files=1
Woah, cool. In normal circumstances I'd totally try it, but I'm concerned about a) exposing my users to risk and b) getting banned from the Steam Workshop. It's definitely interesting to think about though, I can attempt it on my test mod and see if that works. I haven't the faintest idea how to actually implement this though, hah. I think I'm gonna need to hit the books a bit
No problem, hope it helps. Like I was saying, the other answer seems like the correct one from a mathematics perspective, but also possibly overkill for what you're doing, so I figured I'd toss in another option. If it ends up working for you, keep in mind that it's a quick first draft that I was trying to keep short for clarity, so you'll want to adjust it some for your purposes. Some thoughts: * As-is it requires non-negative integers but assumes the pool is valid data, so you likely want some error checking for that. * If needed you could get some performance improvement by switching the `for` statements with numeric for, which performs better than the generic for that I used for the sake of simplicity. You have to decide if it's worth it based on `pool` table sizes and frequency of the function being called. * You could also be clever and store functions in `pool` instead of strings, e.g. `pool = {{90, do_nothing}, {10, kill_player}}`, turning `weighted_random` into a higher-order function. That would would allow you to do something like `weighted_random(pool)(args)` to call a randomly chosen function without needing any intermediate if/elseif/else tests. I initially wrote the example like that but switched to strings for simplicity. * If you need a normalised `poolsize` value, such as to display percentages, you could add some logic to compress it to a value and convert the weights themselves as well. That would let you used a normalised value like 100 (for 1-100%) or 1000 (to cleanly represent fractional percentages, e.g. 899 = 89.9%) and format them for display. 
I didn't know. Thanks for the knowledge
sorry I mistyped his name it's leafo, and you can find him at http://leafo.net, also you probably know him from itch.io.
pairs, while does allow the code to work, should be replaced with ipairs (optimized for iterating tables with positive integer indices).
Yeah I already mentioned improving that in my other comment, though a numeric for is even faster than ipairs if performance is a serious concern. It's the way it is because I default to `pairs` when I'm still deciding on the shape of the data I'll be working with and then refactor it after. I didn't deem it necessary for a reddit comment, though. 
Does the api allow for any network connections or web requests?
Agree that it depends on the application in question. And that's exactly why he should not use LuaJIT IMHO. He is talking about a game and a game engine you are talking about your usage scenario for which the use of LuaJIT might be better. But in his case that's software that will probably develop long time, may have continuous support and expanding and Lua won't be the critical point at all unless grossly misused. The benefits from using the "official" Lua outweigh the eventual speed advantage of LuaJIT in his usage case.
Unfortunately not
Any code will lock will it not? Obviously it can’t yield during the C block?
Not sure what your first question means, sorry! As for yielding, I can't say that I've tested it but [lua_yieldk](https://www.lua.org/manual/5.3/manual.html#lua_yieldk) should work fine.
Print out everything in the global table and see exactly what you have to work with. Perhaps there is some undocumented stuff in there!
Now you're speaking my language! Lua Debug: _G has 0 elements [INFO] - Lua Debug: G[Level]=(table)=20 [INFO] - Lua Debug: G[table]=(table)=20 [INFO] - Lua Debug: G[EntityGridCollisionClass]=(table)=39 [INFO] - Lua Debug: G[TemporaryEffects]=(table)=31 [INFO] - Lua Debug: G[EntityLaser]=(table)=26 [INFO] - Lua Debug: G[require]=(function) [INFO] - Lua Debug: G[GridEntityDesc]=(table)=29 [INFO] - Lua Debug: G[CollectibleType]=(table)=30 [INFO] - Lua Debug: G[Seeds]=(table)=20 [INFO] - Lua Debug: G[GridCollisionClass]=(table)=33 [INFO] - Lua Debug: G[EffectVariant]=(table)=28 [INFO] - Lua Debug: G[BombVariant]=(table)=26 [INFO] - Lua Debug: G[RoomConfig]=(table)=25 [INFO] - Lua Debug: G[ModCallbacks]=(table)=27 [INFO] - Lua Debug: G[collectgarbage]=(function) [INFO] - Lua Debug: G[StageType]=(table)=24 [INFO] - Lua Debug: G[KeySubType]=(table)=25 [INFO] - Lua Debug: G[CppContainer]=(table)=27 [INFO] - Lua Debug: G[PickupVariant]=(table)=28 [INFO] - Lua Debug: G[math]=(table)=19 [INFO] - Lua Debug: G[loadfile]=(function) [INFO] - Lua Debug: G[LevelStage]=(table)=25 [INFO] - Lua Debug: G[coroutine]=(table)=24 [INFO] - Lua Debug: G[GridEntityPressurePlate]=(table)=38 [INFO] - Lua Debug: G[RandomVector]=(function) [INFO] - Lua Debug: G[SeedEffect]=(table)=25 [INFO] - Lua Debug: G[rawequal]=(function) [INFO] - Lua Debug: G[ItemPoolType]=(table)=27 [INFO] - Lua Debug: G[error]=(function) [INFO] - Lua Debug: G[funk]=(function) [INFO] - Lua Debug: G[GetPtrHash]=(function) [INFO] - Lua Debug: G[SoundEffect]=(table)=26 [INFO] - Lua Debug: G[CacheFlag]=(table)=24 [INFO] - Lua Debug: G[TearVariant]=(table)=26 [INFO] - Lua Debug: G[PillEffect]=(table)=25 [INFO] - Lua Debug: G[Challenge]=(table)=24 [INFO] - Lua Debug: G[GridEntityPoop]=(table)=29 [INFO] - Lua Debug: G[itemTableBuffer]=(table)=30 [INFO] - Lua Debug: G[ActionTriggers]=(table)=29 [INFO] - Lua Debug: G[load]=(function) [INFO] - Lua Debug: G[LocustSubtypes]=(table)=29 [INFO] - Lua Debug: G[Color]=(table)=20 [INFO] - Lua Debug: G[EntityEffect]=(table)=27 [INFO] - Lua Debug: G[DoorSlot]=(table)=23 [INFO] - Lua Debug: G[Game]=(function) [INFO] - Lua Debug: G[GridEntitySpikes]=(table)=31 [INFO] - Lua Debug: G[RNG]=(table)=18 [INFO] - Lua Debug: G[Font]=(table)=19 [INFO] - Lua Debug: G[ProjectileVariant]=(table)=32 [INFO] - Lua Debug: G[RoomType]=(table)=23 [INFO] - Lua Debug: G[PlayerType]=(table)=25 [INFO] - Lua Debug: G[xpcall]=(function) [INFO] - Lua Debug: G[GridRooms]=(table)=24 [INFO] - Lua Debug: G[RoomDescriptor]=(table)=29 [INFO] - Lua Debug: G[PlayerSpriteLayer]=(table)=32 [INFO] - Lua Debug: G[GameStateFlag]=(table)=28 [INFO] - Lua Debug: G[FamiliarVariant]=(table)=30 [INFO] - Lua Debug: G[EntityRef]=(table)=24 [INFO] - Lua Debug: G[Isaac]=(table)=20 [INFO] - Lua Debug: G[NullItemID]=(table)=25 [INFO] - Lua Debug: G[SortingLayer]=(table)=27 [INFO] - Lua Debug: G[TearParams]=(table)=25 [INFO] - Lua Debug: G[GridEntityPit]=(table)=28 [INFO] - Lua Debug: G[StartDebug]=(function) [INFO] - Lua Debug: G[SFXManager]=(function) [INFO] - Lua Debug: G[string]=(table)=21 [INFO] - Lua Debug: G[ItemType]=(table)=23 [INFO] - Lua Debug: G[utf8]=(table)=19 [INFO] - Lua Debug: G[EntityBomb]=(table)=25 [INFO] - Lua Debug: G[EntityKnife]=(table)=26 [INFO] - Lua Debug: G[PickupPrice]=(table)=26 [INFO] - Lua Debug: G[ProjectileParams]=(table)=31 [INFO] - Lua Debug: G[MusicManager]=(function) [INFO] - Lua Debug: G[pcall]=(function) [INFO] - Lua Debug: G[rawget]=(function) [INFO] - Lua Debug: G[EntityNPC]=(table)=24 [INFO] - Lua Debug: G[WeaponType]=(table)=25 [INFO] - Lua Debug: G[EntityPtr]=(table)=24 [INFO] - Lua Debug: G[EntityType]=(table)=25 [INFO] - Lua Debug: G[GridEntityRock]=(table)=29 [INFO] - Lua Debug: G[RegisterMod]=(function) [INFO] - Lua Debug: G[EntityPartition]=(table)=30 [INFO] - Lua Debug: G[Vector]=(table)=21 [INFO] - Lua Debug: G[ProjectileFlags]=(table)=30 [INFO] - Lua Debug: G[CoinSubType]=(table)=26 [INFO] - Lua Debug: G[_VERSION]=Lua 5.3 [INFO] - Lua Debug: G[InputHook]=(table)=24 [INFO] - Lua Debug: G[Mouse]=(table)=20 [INFO] - Lua Debug: G[tostring]=(function) [INFO] - Lua Debug: G[select]=(function) [INFO] - Lua Debug: G[Keyboard]=(table)=23 [INFO] - Lua Debug: G[GridEntityDoor]=(table)=29 [INFO] - Lua Debug: G[GridEntityType]=(table)=29 [INFO] - Lua Debug: G[ButtonAction]=(table)=27 [INFO] - Lua Debug: G[EntityPickup]=(table)=27 [INFO] - Lua Debug: G[print]=(function) [INFO] - Lua Debug: G[Entity]=(table)=21 [INFO] - Lua Debug: G[tonumber]=(function) [INFO] - Lua Debug: G[PathFinder]=(table)=25 [INFO] - Lua Debug: G[PlayerForm]=(table)=25 [INFO] - Lua Debug: G[Card]=(table)=19 [INFO] - Lua Debug: G[TrinketType]=(table)=26 [INFO] - Lua Debug: G[LevelStateFlag]=(table)=29 [INFO] - Lua Debug: G[EntityFamiliar]=(table)=29 [INFO] - Lua Debug: G[DoorVariant]=(table)=26 [INFO] - Lua Debug: G[assert]=(function) [INFO] - Lua Debug: G[PlayerTypes]=(table)=26 [INFO] - Lua Debug: G[DoorState]=(table)=24 [INFO] - Lua Debug: G[GridEntityTNT]=(table)=28 [INFO] - Lua Debug: G[Music]=(table)=20 [INFO] - Lua Debug: G[PillColor]=(table)=24 [INFO] - Lua Debug: G[HeartSubType]=(table)=27 [INFO] - Lua Debug: G[LevelCurse]=(table)=25 [INFO] - Lua Debug: G[TearFlags]=(table)=24 [INFO] - Lua Debug: G[ShockwaveParams]=(table)=30 [INFO] - Lua Debug: G[RoomShape]=(table)=24 [INFO] - Lua Debug: G[EntityPlayer]=(table)=27 [INFO] - Lua Debug: G[QueueItemData]=(table)=28 [INFO] - Lua Debug: G[Room]=(table)=19 [INFO] - Lua Debug: G[type]=(function) [INFO] - Lua Debug: G[Direction]=(table)=24 [INFO] - Lua Debug: G[ChestSubType]=(table)=27 [INFO] - Lua Debug: G[rawlen]=(function) [INFO] - Lua Debug: G[NpcState]=(table)=23 [INFO] - Lua Debug: G[KColor]=(table)=21 [INFO] - Lua Debug: G[pairs]=(function) [INFO] - Lua Debug: G[BabySubType]=(table)=26 [INFO] - Lua Debug: G[EntityTear]=(table)=25 [INFO] - Lua Debug: G[setmetatable]=(function) [INFO] - Lua Debug: G[Sprite]=(table)=21 [INFO] - Lua Debug: G[next]=(function) [INFO] - Lua Debug: G[EntityCollisionClass]=(table)=35 [INFO] - Lua Debug: G[TemporaryEffect]=(table)=30 [INFO] - Lua Debug: G[Random]=(function) [INFO] - Lua Debug: G[DamageFlag]=(table)=25 [INFO] - Lua Debug: G[EntityFlag]=(table)=25 [INFO] - Lua Debug: G[ipairs]=(function) [INFO] - Lua Debug: G[dofile]=(function) [INFO] - Lua Debug: G[PlayerItemState]=(table)=30 [INFO] - Lua Debug: G[LaserOffset]=(table)=26 [INFO] - Lua Debug: G[EntityProjectile]=(table)=31 [INFO] - Lua Debug: G[Difficulty]=(table)=25 [INFO] - Lua Debug: G[ItemConfig]=(table)=25 [INFO] - Lua Debug: G[ItemPool]=(table)=23 [INFO] - Lua Debug: G[GridEntity]=(table)=25 [INFO] - Lua Debug: G[BombSubType]=(table)=26 [INFO] - Lua Debug: G[Input]=(table)=20 [INFO] - Lua Debug: G[rawset]=(function) [INFO] - Lua Debug: G[getmetatable]=(function) [INFO] - Lua mem usage: 637 KB and 265 bytes 
Right, nothing in there looks terribly useful. In the Lua implementation, the time is only used in the os library (which you do not have) and as a source of randomness for table operations. So you're really up a creek unless one of the things added by the game give you the time somehow. Any idea what G[funk] is?
Yeah that was the function I used to initialize the global table printer lol Oh well. Maybe they'll add the binding for it eventually. Thanks for the help!
One last grasp at straws, check the results of the various seed functions. Maybe one is based on the system clock. 
It's possible. The seed functions are all related to Isaac's randomness seed so I doubt there's anything that returns a clock value, but it's worth a shot. Here's the seeds class if you want to take a look at it, the documentation is notoriously terrible but it's worth a shot. Maybe InitSeedInfo() has something. 
I agree, this does seem possible.
There is a tutorial series on YouTube that covers the basics: [https://youtu.be/-iU1pCgmjx4](https://youtu.be/-iU1pCgmjx4)
&gt; and i have no idea how to do programming in lua. That may be problematic. I'd suggest either buying the book [Programming in Lua](https://www.lua.org/pil/), or if you're cheap you can access the [free online version of the first edition](https://www.lua.org/pil/contents.html), which talks about Lua 5.1 In any case, this isn't a Binding of Isaac subreddit, and as such most users here have no idea how the Binding of Isaac API works.
You can execute the function, which will cause it to run: local f = function() print("Hello!") end f() --&gt; Hello! There isn't a straightforward way in Lua to capture what a function might/will do without actually running it^(like most languages). You can get the function's bytecode using `string.dump(f)`, but this is not human readable.
You are essentially asking for a way to convert a function into a human-readable string. This is pretty difficult in most programming languages, including Lua. However, the exact opposite of your request is pretty easy: you can convert a human-readable string into a function using [`load`](https://www.lua.org/manual/5.3/manual.html#pdf-load). s = "print('Hello')" a = load(s) a() -- 'Hello' print(s) -- print('Hello') So if you are looking to print the content of functions that you have written yourself, `load` might help you. You should be aware that if you are running Lua inside someone else's application (ex. in a game), the developers may have disabled `load`. When making an application of your own, you should also recognize that running `load` on a string that your users may have tampered with can be very unsafe (much like `eval` in certain other programming languages).
I'm going to have to give this a closer look. I have a fengari project that might be able to use some of the ideas from this. 
If you are asking to execute the function defined as a parameter, you do: print((function() print("hello") end)()) The parenthesis around the function definition are there to ensure that just the function definition is returned. The set of empty parenthesis tell Lua to execute the function and any return parameters become parameters to the outer print() function. 
It says to ignore the post at the start 
Whoops. Either I missed it (most likely) or it wasn't there when I posted.
make a function for every modifier and store them in a list/table then you make the wave function iterate this list with a random verification for each modifier, if the random verification passes then pass the result of the modification to the next modifier (i hope that what i have written is actually readable). 
I think a pure functional approach works well for this. The generator doesn't need to store internal state, and once the parameters of the overall functions are established they won't change. So, first you have the identity function `lambda I (x) =&gt; x` which you modulate with a something like `lambda G (x) =&gt; sin x`. When you compose those you get `G . I = lambda F (x) =&gt; G I x` So what happens when you have `lambda H (x) =&gt; x/2` (divide by 2)? The composition of `G . H` becomes `lambda F (x) =&gt; G H x` or `sin (x/2)`. Or if you have `lambda D (x) =&gt; x*2` then the composition of `D . G` aka `lambda F (x) =&gt; D G x` becomes `2*(sin x)` See where this is leading? Yadda yadda translating this into Lua we'd have: function compose(g, f) -- g and f are functions return function(x) -- returns a function return g(f(x)) -- that composes `g . f` end end But that may be overly generalized for you. At risk of premature optimization, you can inline the functions with the compositors. Instead of doing function coefficient_divideby2(g) local f = function(x) return x/2 end return compose(g, f) end You save creating and calling one extra function with this function coefficient_divideby2(g) return function(x) return g(x/2) end end And the left composition: function term_multiplyby2(g) return function(x) return 2*g(x) end end Putting it together you'd have all these compositor functions collected in a way that your randomizer can apply them in succession. After passing through the randomizer you end with just a function that you use to plot the wave. All the state is encoded in its definition. Building the function is more mundane but for the sake of completeness I'll go over it briefly. The naive way is: local selector = math.random() local generator = math.sin if selector &lt; 1/3 then generator = math.cos elseif selector &lt; 2/3 then generator = math.atan end selector = math.random() if selector &lt; 1/5 then generator = coefficient_divideby3(generator) elseif selector &lt; 2/5 then generator = coefficient_multiplyby3(generator) elseif -- okay this is getting tedious Way too much typing and a pain in the ass if you ever want to change it. This is where tables come into play. local generators = { math.sin, math.cos, math.atan } local selector = math.random(#generators) local gen = generators[selector] local modifiers1 = { coefficient_divideby3, coefficient_divideby2, } -- and so on selector = math.random(#modifiers1) gen = modifiers1[selector](gen) Of course you can refactor this with a function to pick a random table entry. (Left as an exercise for the reader.) And on the topic of factorization, how about all those divide-by-some-number and multiply-by-some-number functions? DRY says those shouldn't be each typed out on its own. Instead do: function coefficient_divide(g, n) return function(x) return g(x/n) end end function coefficient_multiply(g, n) return function(x) return g(x*n) end end -- yadda yadda local modifiers1 = { 3, 2, 1 } if math.random() &lt; 0.5 then gen = coefficient_divide(gen, randomchoice(modifiers1)) else gen = coefficient_multiply(gen, randomchoice(modifiers1)) end Okay, that should be enough to get you going. Frankly, I can't wrap my head around how you'd do this in an OOP way without a messy chain of branches. Now if you wanted to alter the wave generator in real-time, like having each parameter controlled by a knob on a synthesizer, that would require storing each stage in a table and composing the wave function on demand.
&gt; I feel like this might be easier in an object oriented language If you like OOP so much, you could always add an object system to Lua and use that. For example you could use [30log](https://github.com/Yonaba/30log/blob/master/README.md). I’m not sure if any Lua object systems offer type checking... I don’t think you need OOP though. I’d just represent the expressions as nested tables, with functions to generate and interpret the tables. Like for the expression... 2sin(3cos(x)) + cos(0.5x^2 - 1) ...I’d have a table like... { func = “sin” a = 2, b = 3, inner = { func = “cos” }, next = { func = “cos”, b = 0.5, c = -1, e = 2 } } The tables “inner” and “next” would be created using the same function as the parent, i.e a recursive function would create recursive data structures. I omitted keys that would seem to have “obvious” default values out of laziness. If you are generating these with a function, such omissions might not be necessary.
As far as I know fengari has access to all the usual javascript functions, right? In that case you'd be much better off just building yourself some similar syntax that instead of writing stuff to a buffer creates HTML elements directly in the DOM. It shouldn't really be all that hard, you'd only have to create the element first and parse the arguments in the context of the new element. It probably wouldn't be much more code than I have right now.
Also interesting: [https://github.com/madmaxoft/LuaMultiThreaded](https://github.com/madmaxoft/LuaMultiThreaded) Allows multiple threads for a single Lua state.
Is that actually required? I had to dig a bit into the Lua source code as I vaguely remembered some basic thread-safety feature at least in the stock Lua (5.1/5.0) back when I used them. It seems that defining `lua_lock` and `lua_unlock` basically allows you to have a GIL as those two calls are called every time the state is accessed. Both macros are a nop by default. It seems that this feature is available in all relevant Lua version: * https://www.lua.org/source/5.3/llimits.h.html#lua_lock (smallish documentation) * https://www.lua.org/source/5.2/llimits.h.html#lua_lock * https://www.lua.org/source/5.1/llimits.h.html#lua_lock * https://www.lua.org/source/5.0/lstate.h.html (with documentation) 
If it is it's inconsequential. Lua has "bigger fish" in terms of optimizing, like localizing built-in library functions (re: https://stackoverflow.com/questions/32945039/why-are-localized-functions-faster-in-lua)
Your quoted section is referring to what happens when comparing table values using &gt; or &gt;= operators (it uses lt/le with reversed operands). == is not faster than &lt;= for number types. So the option with fewer comparisons will be faster in every case.
&gt; the speed of relational operations They're the same, and not something you should even remotely be thinking about when coding in a scripting language. *Maybe* if you were writing ultra high performance numerical analysis code in assembly language and you were in some critical-path inner loop, then you might consider the cost in clock cycles of every instruction. But you're not. You should be coding for clarity above all else.
I often wonder these things myself. Not because I’m optimizing or other nonsense but because its Anthony g to be curious about. I get your point, it’s valid. And so is the question and it’s answer. 
You're right about that, and that's similar to what I'm hoping to accomplish. :)
basically yeah
I'm reacting in this specific way, after having answered such questions for decades going back to the usenet, because they almost invariably represent a form of [XY problem](http://xyproblem.info/), where the *real* question is "how do I write good code?", and answering the question is steering the OP in the polar opposite direction. The real answer for Lua is "you shouldn't know", because it's an implementation detail of Lua, an artifact of its byte code and the virtual machine it runs on, both of which are not part of the public spec of the language and are always subject to change. I would *assume* that the former is slower than the latter because it is half the operations, but you could only answer definitively for a specific Lua implementation, and only by actually measuring. There's lots of other things we can say about the question, like... why these two bits of code? The two things don't do remotely the same thing. Also, the quoted text as absolutely zero relevance to the question. What does the OP even *think* he's asking? Who knows. So it's easier to answer that almost always underlies these questions. The answer to *that* question is: it doesn't matter. If you care about ultra-micro optimization, you're *mostly likely* wrong, just statistically, no matter what language you're using and what code you're writing, but in the case of Lua, you're literally using the wrong language.
 This is the answer. 
Nah, most of them feels really static.. you better learn from online videos like me
The text describing your function in a Lua source file is just the recipe for the function, not the function itself. When Lua encounters it, it *compiles* into a very compact bit of binary data called "bytecode", which is not human readable. So when you print a function, it can't show you the original source code because it doesn't *have* it. The best it could do would be to turn the bytecode into something human readable for you, like this: GETGLOBAL 0 -1 ; print LOADK 1 -2 ; "Hello" CALL 0 2 1 RETURN 0 1
if anyone doesnt wanna click that link ill upload it to imgur; [https://imgur.com/a/Lo8YuB0](https://imgur.com/a/Lo8YuB0)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/NdcqptS.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
#1 and #3 are the same "speed", except you traded 1 alias (statement that has to be executed) for a new syntactic way to access table.insert...
so it doesnt matter if i answer #1 or #3? thanks for the help probably a newbie question but im just starting out
Actually, #1 is slightly faster than #3 as local variables are faster than globals. It's a negligable difference compared to table.insert's speed though.
`table_insert` is only being used once. #1 is the slowest because it sets a local variable in addition to getting `table.insert`.
If the amount of speed you would gain using one of those over another is important, you should probably not be using Lua...
Before you torture your code to make it "faster", you should get it done as nicely as possible. Only after *benchmarking to find what's slow* should you make changes that hurt code readability to save performance.
Silly question. In PUC-Rio Lua, #2 is the fastest, but in LuaJIT, they should be the same speed.
I'd go with block 3, due to readability. Afterwards, consider performance tweaking.
Block 1: table.insert is assigned to a local variable and then only used once. If table_insert is repeatedly used, then it *might* help. Block 2: Pretty standard style and should be used for appending a value to the end of an array. It is most likely the fastest for the versions given. Block3: This code will fail. The first line overwrites table. The second line calls table.insert() which no longer exists. Note: Block 1 will work where block 3 fails since table_insert localizes table.insert. However, block 1 will still lose access to the other functions in the global table unless you access them like this: _G.table.remove
I would also throw in that it's bad practice to use variable names that are the same as keywords/symbols, even if you are properly scoping them. It makes it confusing to an unfamiliar reader.
Block 3 is just very very wrong. The variable table is not declared as local first of all, which makes the code slower. Second of all, the use of the variable name table overwrites the actual table library, causing table.insert to be a nil value.
This is some kind of coding academy, isn't it? Unless they guarantee job placement immediately upon completion, quit now and ask for your money back. This is not the kind of thing that should be taught to someone learning how to program, or even how to program in Lua. There are many more important things than which particular implementation quirk is slightly faster in a microbenchmark. The answer to "which is better" is "all of them, depending on the use case". Did the lesson explain to you what makes these different? Or did it merely dictate that there is supposed to be "one true way" without detailing what makes it so-called better than the others? If you can't describe what makes these blocks different from each other and why you may want to choose one over the other then you've learned nothing and are trapped in a cargo coding cult. Get out before it's too late.
It’s just a beginner quiz I found online , in just trying to learn is there any other sites you can recommend ?
Allow me to disagree. Having worked on games that use Lua extensively as the language to code gameplay, it is definitely important to think about how to make Lua as fast as possible. IMHO: Localizing table.insert won't do anything *unless you use it more than once*, in which case it will help, *unless the code has been jitted by LuaJIT*, in which case it probably won't. Regarding *table[#table +1] = true*: The # operator is actually not O(1) as you might believe. The size of the table (array) is not stored in lua. Instead it's O(log(n)) iirc. So you might think, well, O(log(n)) isn't so bad. While true-ish (depends on how much you want to optimize the code), there's another reason why it's bad. # works by jumping ahead in the list until it finds a nil element and then jumps back and forth in a binary searchy way to find the last nil. However, this can cause it to give the "wrong" answer. lol = {10, 20, 30, 40} print(#lol) lol[3] = nil print(#lol) lol[4] = nil print(#lol) This outputs: 4 4 2 A nice way to optimize array usage is to keep a separate variable containing it's length. If you do this, you get two things: 1) No # operator, so O(1) size calculation and 2) You can clear the array much faster. Here's a typical example of how my code can look: function myclass:init() self.myarray = {} self.myarray_len = 0 end function myclass:add_things(amount) local myarray = self.myarray local myarray_len = self.myarray_len while amount &gt; 0 do my_array_len = my_array_len + 1 myarray[my_array_len] = 100 end self.my_array_len = my_array_len end function myclass:calculate_things() local myarray = self.myarray local myarray_len = self.myarray_len local res = 0 for i=1, my_array_len do res = res + 100 end return res end function myclass:clear_things() self.myarray_len = 0 end (I hope there aren't any syntax errors, haven't actually run it, but you get the point) (Pinging OP /u/leanbtw in case you don't see this reply)
Simple answer: option 2, because it uses no function call More complex answer: 1. Write C code and use it as a Lua C module or with LuaJITs FFI 2. Use LuaJIT and use an FFI array instead of a table (almost as good as 1.) 3. `local table = {true}` only uses 4 instructions instead of 5 (Lua 5.3) In the real world you will rarely write Lua code that really needs to be absolutely as fast as possible. In those cases, you'd either use C or LuaJIT, which works in a completely different way in terms of optimization. If you're just starting with lua, I recommend ignoring speed completely at first. Really understanding why a thing is fast or slow requires some advanced knowledge about how the language works, and that only comes with time. It's a scripting language anyway, so it's much more important that your code is easy to read, understand and use.
For numerical types it doesn't matter that much. Option one is faster unless `q` is `1`, in which case they are equally fast. But keep in mind that `q` might be a table with a `__le` metamethod, in which case it may be anything from a no-op to a complicated database query. Metaprogramming makes pretty much everything possible, the sky is the limit. So don't think about that kind of speed difference too much other than out of curiosity.
Why would you localize the array from the surrounding class in the calculate things function? &gt; local myarray = self.myarray
Lol, sorry, let me edit that.
I was referring to the table variable, but yeah, you have a point.
If you are inserting a large number of elements, all of these take quadratic time in the number of elements as insertion requires determining the length of the table. See: https://www.cryptobells.com/fasterest-table-inserts-in-luajit/
All those insert require determination of the table's length. See https://www.cryptobells.com/fasterest-table-inserts-in-luajit/
What have you tried?
Nothing yet, I'm not smart
What part are you stuck with in particular?
You should license this under GPL instead of public domain.
Make a new table, and try a for k,v in pairs(input) do
You don't have to be "smart" to think! And the more you practice thinking, the easier it gets.
Well, good thing this is r/freeLuaConsulting! I'm sure someone will solve your problem in no time.
 end You forgot something :) 
You have to try something first. We refuse to help you unless you make an effort to solve the problem on your own. Only if you're really stuck should you ask for help online. We aren't this magic help service that will do all your programming for you. And if that's too much to ask of you, then consider giving up on programming altogether.
No? I was giving them an idea where to start, not giving them anything even really remotely workable.
For sure. I will do it soon. :)
https://pastebin.com/dzhCnsLT
Looks like this should work. What's up with the local assert, type, ipairs = assert, type, ipairs ? That just... makes new local copies of those functions. why?
by making them locals he's caching the functions into the lua registers, and so it accesses them faster. it's really just premature optimization. you shouldn't do it unless you need to tbh.
ah, gotcha. Yeah that seems completely useless except for some crazy performance sensitive situation with a TON of tables being merged.
while (isTheTablesMerged(tbls)) do tryMergeTheTables(tbls) end I did it!
That’s not an unusual circumstance.
Why should I though?
People in this sub love to downvote people for no reason sometimes
How about return the value? It should work return "hello"
IMO, Lua isn't a great first language because there aren't a ton of resources like intro to programming classes that use Lua (vs other more popular languages like Python or Javascript or Java etc). It's certainly not impossible tho. Since you're gonna start learning Python soon, it may make sense to just focus on that for a while and then when you're comfortable with basic programming come back to Lua.
I don’t know if you play many games but a Minecraft mod called computercraft uses lua and it’s a great way to get your feet wet
Read http://lua-users.org/wiki/GotoStatement and write some code?
Don't
Well what do I do then 
Well I’m confused by all the examples and stuff I just have an if and just need to go to another function if the condition is true 
Then you probably don't need `goto`, you must call said function. You can't use `goto` to jump from one function to another.
Ok well I’ll try this 
But it keeps telling me some = is needed 
If you share some code we'll be able to give more helpful replies.
Ok give me like 5 minutes 
if (decision == "Calculator") then calculator end if (decision == "Dictionary") then dictionary end if (decision == "Translator") then translator end if (decision == "GuessingGame") then guessinggame end 
I just have below all of that like ::calculator:: and so on 
I wouldn't use gotos in that scenario. You can either put the logic within each block if decision == "Dictionary" then -- do the dictionary stuff here elseif decision == "Translator" then -- ... or put each section into its own function and call them: function calculator() -- do the calculator stuff here end function translator() -- do the calculator stuff here end -- ... then if decision == "Dictionary" then calculator() elseif decision == "Translator" then translator() -- ... (on Reddit, indent your code with four spaces to get the monospace font)
Ok :) 
Or, even better: foo = { dictionary = function() return true end calculator = function() return end } if foo[decision] then foo[decision]() end
Learn about "functions". 
/r/ComputerCraft is a bit dead but there's plenty of threads to search through
This is indeed a good way to handle switch-like scenarios, but it entails understanding tables, arbitrary indices, truthiness and complex expressions... It looks like OP is starting to learn the language, I didn't want to give them a solution with more questions than they had when they came here :-)
You make a good point!
The `goto` statement was added to enhance clarity in breaking out of nested loops, cleanly implement [state machines](https://smartbear.com/blog/develop/goto-still-has-a-place-in-modern-programming-no-re/) and their close relative, interpreters. It looks like an `elseif ` chain can solve your problem. Lua doesn't have a switch statement, but it can be [emulated using tables](http://lua-users.org/wiki/SwitchStatement) as /u/revereddesecration pointed out. It looks like you are new to Lua, welcome! Lua is a small language that offers the material for you to build what you need, so be mindful to not get frustrated if something isn't built in. I recommend [Love2d](https://love2d.org/) as a great way to explore the language.
If you are interested in game programming, [Love2d](https://love2d.org/) is a great framework. I recommend it *everyone* doing game programming as it is a super lightweight way to prototype game ideas.
[Do you absolutely need it?](https://xkcd.com/292/) Goto can be powerful in some very rare situations, but using it aggressively can lead to spaghetti code.
&gt; Regarding table[#table +1] = true: The # operator is actually not O(1) as you might believe. The size of the table (array) is not stored in lua. Instead it's O(log(n)) iirc. Source? In the [source](https://www.lua.org/source/5.1/lobject.h.html#Table), tables contain a variable "sizearray." I'm just guessing, but I assume this is the size of the table. If I am in fact wrong, please explain why.
If I were to guess, maybe it's the capacity rather than the number of elements in the array? http://www.luafaq.org/gotchas.html#T6.4 http://www.lua.org/manual/5.1/manual.html#2.5.5 &gt;The length of a table t is defined to be any integer index n such that t[n] is not nil and t[n+1] is nil I suppose an implementation could store the length, making it O(1), but I think neither standard Lua or LuaJIT does. Look at the source for luaH_getn (at the bottom): https://www.lua.org/source/5.1/ltable.c.html
The [forums](https://computercraft.info/forums2) are somewhat more alive than the subreddit. 
Lua is portable across Windows and Linux, you just need to set luaconf.h to something that's supported on both platform or #IFDEF luaconf.h.
&gt; I want to support both Linux, and Windows Lua is an ANSI C code library with no external dependencies. Simply include the source code in your project. Done. If you know how to a build C++ in Linux and Windows, such that you can do a cross platform game *without* Lua, then you know how to do it *with* Lua.
OK, thanks, I was just confused on how to include it, all I have to do is have its source along with my project, and just add it to my CMakeLists.txt basically, right? 
&gt; Computercraft uses lua and it’s a great way to get your feet wet That adds a lot of weird overhead to just typing and executing Lua code. Text file + command line interpreter is all you need.
Lua has one of the best books available for a programming language, kinda the K&amp;R of dynamic languages, IMO, but it's targeted towards experienced developers trying to learn the language, not beginners.
If you're using CMake, sure. There are a few standalone executables included in the source, so don't include them or you'll have multiple main functions and get a linker error.
Okey-dokey, thanks again for the help. 
hit me up later if you cant figure it out, I did this a while back and it's way worth.
Cmake has a FindLua module, so you can just `find_package(Lua REQUIRED)` https://cmake.org/cmake/help/latest/module/FindLua.html
Yes. And please buy the latest edition, even if you're going to use 5.1. Later editions are better structured, with more focus on exercises.
If you want something more C++-like than using the base lua API, then you should give [sol2](https://sol2.readthedocs.io/en/latest/tutorial/all-the-things.html) a try. 
Yes. You will learn Lua that way, and it will be the same sort of Lua that ROBLOX uses. You will not learn trig or any fancy algorithms that might be helpful for developing games, but that’s stuff you can self-learn.
The only thing you wouldn't get would be the focus on game design and the roblox environment, i.e. how to nteract with Roblox' interface, physics, networking and other offerings.
Oof I need to know trig? I'm a high school sophomore...
But the code would be the same and worth my time to learn outside of roblox?
The code would not be the same: the language, and knowledge associated with it, would be the same. I have never played roblox, but by looking at [this page](http://robloxdev.com/articles/Built-in-Functions-and-Variables/Roblox) I know that I can run this code to output a message after 5 seconds. delay(5, function() print("Hello") end) I also know that the following code would cause an error. delay(5, function() print("Hello") end).example = true Other information can also be ascertained from that page, but I'm just demonstrating how knowledge of lua will help you. If you learn the language, you will be able to look at the documentation for any game and understand how to use its features without ever having to do so much as run the game at all.
Depends on what you're doing. 
What are you looking for then? `print'test'` is not valid Lua code.
Actually it is; Lua 5.1.5 Copyright (C) 1994-2012 Lua.org, PUC-Rio &gt; print 'test' test I agree, the OP is very vague on what they're trying to do. &gt; 
It actually is. Functions that take a single string literal or table constructor argument can have their parentheses omitted at the call site.
You need to clarify what you want more exactly, since what you're describing is still just `loadstring()`.
You might, to solve some specific problems, but you also might not need it at all depending on what you want to achieve. 
&gt; execute custom bytecode/normal bytecode. I doubt you can design your bytecode translator.
I'm trying to create a function just like loadstring without having it to be visible, I'm part of an important obfuscation service.
&gt; without having it to be visible You're going to have to elaborate on this. It may be obvious to you what you mean by this, but to us you're not making sense.
Are you literally just trying to call the function "loadstring" without "loadstring" being visible in the code? You could do that with something like: _G[string.char( 108, 111, 97, 100, 115, 116, 114, 105, 110, 103 )]() But why would you?
So...luac?
You can definitely remove loadstring from the global table, but since you need it, all you'd be doing is renaming it or making it local only. If all you wanted to do, however, was to sandbox the function from loadstring, that's what setfenv() does.
The problem is that `add(0)` returns `nil` (by getting to the end of the function without reaching a return statement)
No escape parameter. Add an else statement to return 0
I tried adding a another else statement but this is what I'm getting: &gt; function f(x) &gt;&gt; if x&gt;0 then &gt;&gt; local m=x &gt;&gt; x=x-1 &gt;&gt; return m+f(x) &gt;&gt; end &gt;&gt; elseif x=0 stdin:7: 'end' expected (to close 'function' at line 1) near 'elseif'
Lua obfuscation is a joke.
This is how to use elseif properly if cond1 then ... elseif cond2 then ... end Only the last elseif has a corresponding end, and you cannot have an elseif immediately after an end. If I were you, I’d implement your function as follows: function f(x) if x &gt;= 0 then return x + f(x-1) else return 0 end end Also, like most other languages, there’s a difference between x=0 and x==0.
in this particular case you can probably just put the return at the end.
Try ```lua function add(x) if x&gt;=1 then local m=x x=x-1 return m+add(x) end return x end print(add(4)) ``` This way if the `if` statement isn't true, then `x` at the bottom of the function gets returned.
`else` isn't necessary in this case.
Adds readability, IMO.
True
What API are you using? Can we see your code?
It’s the Logitech gaming software API, but it’s in LUA. I’ll post a picture of code right away, currently on mobile. 
More about recursion than lua. You always want a base case and a compxity reducing recursive case. The base case is missing in the example. It is most common to put the base case first. Your base case would be: if x == 0 then return 0
Forgot to mention that this is a cross-post from /r/unixporn. Sorry :)
So appears OP is referring to this project on github[1]. lbi is a lua bytecode interpreter written in lua. The answer to OP's question is found in the run.lua[2] in the same project: elseif file_name:sub(-4) == ".lua" then bytecode = string.dump(loadfile(file_name)) end Dump the bytecode to a string after loadfile compiles the 'thunc' or whatever it's called. OP you need to learn how to ask questions better, I had to go google all this. [1] https://github.com/JustAPerson/lbi [2] https://github.com/JustAPerson/lbi/blob/master/run.lua
O ya! thanks guys this kinda a silly question now that I think about it 😝
Most of the comments so far are hung up on the if/else use, but I think /u/DoomFrog666 is right, this isn't so really a Lua problem, it's an issue with how you're trying to do the recursion. The first, obvious problem is you haven't provided a base case to end the recursion. A self-recursive function needs a check to make it *stop* calling itself; without it you either end up with an infinite loop or some kind of error. You can fix that naively just by adding a `return x` at the end, like /u/8E4F787A43D3807E9EA2 suggests, giving you this: function add (x) if x &gt;= 1 then local m=x x=x-1 return m+add(x) end return x end That works, but it's not really a *good* solution, because the way you're solving the problem is still subtly flawed in a few ways. First off, your use of `m` to store an intermediate value is unnecessary. You're doing it because you're changing `x`, but there's no reason to make that change to `x` at all, so it's superfluous. Fixing that that but otherwise keeping everything else the same gives you a simpler, pure function, with no mutation or variables: function add (x) if x &gt;= 1 then return x + add(x-1) end return x end Shorter and easier to understand that way, but there's still work to do. DoomFrog666 mentioned that you usually put the base case first, but not why: doing so makes it a [tail call](https://en.wikipedia.org/wiki/Tail_call), which can be optimised in some languages to not add to the program's call stack. With the above function, attempting to sum a very large value, such as entering `=add(10000000)` in the REPL (the `=` is a REPL shorthand for `return`) will give you a stack overflow error. That's fine in some circumstances, because not all languages do tail-call elimination, and some problems don't need to allow arbitrarily large recursion like that. Simpler is better in those cases. However, for something like the function you're writing, it *is* useful. In theory, triggering tail call elimination in a language that supports it is as simple as making the function call the last call in the function. So, you move the base case to the start, ending up with something like this: function add (x) if x &lt; 1 then return x else return x + add(x-1) end end Then you try `=add(10000000)` again and and... get another stack overflow. This looks right, so why didn't it work? Try replacing `+` with a function that does its job, and it should be clearer: function sum (x, y) return x + y end function add (x) if x &lt; 1 then return x else return sum(x,add(x-1)) end end The tail call here is `sum`, not `add`. `+` isn't a function but its use in the previous function has the same effect. In order to make the function tail recursive, it needs to end with `return add(...)`, which complicates things slightly because you still need to track the final value. One way of doing that is to make `add` take a second argument, the total, like so: function add (x,total) local total = total or 0 if x &lt;= 0 then return total + x else return add(x-1, total+x) end end Now you can safely do `=add(10000000)` without eating up the call stack. If you don't like exposing the total as a function argument, you can put it inside another function and make it local so it cannot be called standalone: function add (x) local function f (n,t) if n &lt;= 0 then return t + n else return f(n-1, t+n) end end return f(x,0) end So, there you have it: far more than you probably wanted to read about recursive functions. 
Hey thanks for posting this I'm not very good at recursion (as can be seen quite clearly) but I've understood quite a bit from this, so thanks!!
Did you change accounts between posting and commenting? ;)
No problem, glad it helped. Recursion can be a tricky beast but it can also be useful, especially once you start getting into functional programming style. Speaking of functional programming, `reduce` (sometimes called `fold`) is an FP staple that is perfect for the sort of thing you're trying to do here. `reduce` is a function that takes another function as an argument, and applies that function to a list, eventually reducing it down to a single item. So, calling `reduce(f, 0, {1, 2, 3})` is the same as doing `f(f(f(0,1),2),3)`. Combined with a function that can be used to create ranges of numbers, that means you can do something like `reduce(sum, 0, range(1,10))` and it would do the same thing as your `add` function. Unfortunately, Lua doesn't have common FP staples, so you have to write them yourself, which sucks. Still, just for fun, here's a basic `range` and `reduce` implemented in Lua, with an `add` function that uses them: range = function (s, e, i) t = {} i = i or 1 for n=s,e,i do t[#t+1] = n end return t end reduce = function (f, x, t) for k,v in pairs(t) do x = f(x,v) end return x end add = function (n) local function sum (x,y) return x +y end return reduce(sum, 0, range(1,n)) end This probably seems like a lot of bullshit just to write a simple function, but it makes more sense in languages that provide FP niceties out of the box. Your `add` function in Clojure, for example: (defn add [n] (reduce + (range 1 (inc n)))) Even in Lua, which forces you to create things like `map` and `reduce` yourself, there's a long-term advantage, because you only have to create those functions once, and then you can use them *every time* they solve a problem, instead of constantly having to write the same basic loop code boilerplate yourself. "Don't repeat yourself", as the saying goes. Of course, there are performance trade-offs, so there are times you'd still want to do the work yourself to save some execution time, but the idea is that most of the time you don't need it, so it's better to start with declarative code that describes *what* you're doing, rather than getting buried in the details of *how* to do it.
This was a bit advanced for me , but I'll try to look into it, and btw I wanted to ask you if there was a way to do something like this : function prime(x) local function f(n,d) if n&gt;2 then if n%d==0 then return d .. " "..f(n/d,d+1) else return f(n,d+1) end end end return f(x,2) end
Citing from the official documentation: "Lua is implemented as a library, written in clean C, the common subset of Standard C and C++. The Lua distribution includes a host program called lua, which uses the Lua library to offer a complete, standalone Lua interpreter, for interactive or batch use. Lua is intended to be used both as a powerful, lightweight, embeddable scripting language for any program that needs one, and as a powerful but lightweight and efficient stand-alone language. As an extension language, Lua has no notion of a "main" program: it works embedded in a host client, called the embedding program or simply the host. (Frequently, this host is the stand-alone lua program.) The host program can invoke functions to execute a piece of Lua code, can write and read Lua variables, and can register C functions to be called by Lua code. Through the use of C functions, Lua can be augmented to cope with a wide range of different domains, thus creating customized programming languages sharing a syntactical framework." And the greatest thing about it: "Adding Lua to an application does not bloat it. Thetarball for Lua 5.3.4, which contains source code and documentation, takes 297K compressed and 1.1M uncompressed. The source contains around 24000 lines of C. Under 64-bit Linux, the Lua interpreter built with all standard Lua libraries takes 246K and the Lua library takes 421K." 
can you format it properly? add four spaces in the beginning of each line you want to appear as code like this
 print("Okay give your max x value.\n") maxx = io.read() Did you type the 10 as input?
I will do it when I got my pc.
No, I gave 8.
Yes.
So in other words it's showing the "10" that you typed in?
I am an idiot, thanks.
Seems much neater than my i3status + Conky Lua setup. Can’t wait to take a closer look at this! 
Ok nvm I made it work.
I've properly formatted the code [here](https://pastebin.com/AHDKu44k). Please post your code via a snippet hosting site in the future, because no one is going to try reading your code when it's not properly formatted.
pa is a string and ans ins a number.
TIL you can do that with strings too
To clarify for the OP, convert the string stored in `pa` into a number, and then compare. Also, comparing floating point numbers can be tricky. Depending on the exact numbers, you can have situations where you add 1.5 to 0.5, and it doesn't exactly equal 2.0. See this: https://floating-point-gui.de/errors/comparison/
Good to hear. Sorry I didn't respond, my reddit usage is somewhat random and I missed the message at first. 
Sorry I tried just typing it and didn’t realize it didn’t formate properly. After looking up float numbers I found out you can use tonumber to convert. I will definitely use a site next time.
Please either format your source code as such (by indenting it with 4 spaces) or just upload it to pastebin or a similar service and post a link. That makes it much easier for people to help you :)
&gt; because no one is going to try reading your code when it's not properly formatted. you did though, and you even formatted it properly &lt;3
I think I would use a less frustrating platform if I were you. Why are the docs so bad?? Here's what I found: http://touchlua.wikia.com/wiki/Sys It takes a table representation of a color... Then I found http://hawwashsoft.proboards.com/thread/254/text-calculator Which uses sys.setbgcolor like `sys.setbgcolor(draw.black)` So I found the draw library on the wiki: http://touchlua.wikia.com/wiki/Draw Looks like it takes a table like `{r, g, b, a}` where alpha is optional. Seriously though, I would dump that app. Especially you're trying to learn Lua, it just adds burden to the learning process that TouchLua's docs are mostly nonexistent. 
I dug around and found a wiki http://touchlua.wikia.com/wiki/Sys and some sample code http://hawwashsoft.proboards.com/thread/254/text-calculator . Looks like `sys.setbgcolor(draw.white)` where draw.*color* is just a predefined table like `{r, g, b, a}`. Looks like they have a special constructor `sys.color(r, g, b, a)` so maybe you need to create the table like that if you want to use a custom color value. Screw that app though. If you're just trying to learn Lua, learning with a largely undocumented app is just going to make it harder to learn. Why not try something like [Pico-8](https://www.lexaloffle.com/pico-8.php), [Tic-80](https://tic.computer/) or [LÖVE](https://love2d.org/)?
As /u/pull_my_finger_AGAIN already mentioned, [löve](http://love2d.org/) is a nice way to learn Lua by making games, as it allows you to start with really simple stuff and quickly add complexity and abstraction as the project grows. If you like minecraft, I also recommend trying out [computercraft](http://www.computercraft.info/), which allows you to build small roboters that can be programmed in Lua to do pretty much anything, from simple mining tasks to complex item storage and automatic crafting systems, or even controller units for nuclear reactors from other mods.
There's also OpenComputers that is nice to use of ComputerCraft feels too limiting or not enough.
Maybe take a look through a book that introduces Lua. If you already know Lua, I would look for documents on the internet about the gmod engine or how to make make mods for gmod. Is that what you're trying to do?
Yes in a way. I have no idea how to code in lua. I’m trying to learn lua so that I can code for G-Mod
Check out this book: https://www.lua.org/pil/. (I think you can find it online for free if you really want to.) That should be a good starting point. As far as coding specifically for gmod, I know nothing, but I would recommend maybe looking at the code of other mods and seeing what kind of gmod-specific stuff they're doing. Well it's late here and there's a game to watch early-ish tomorrow morning, so I'm out for now. Good luck!
YouTube 
Codeblue tutorials First the lua series then the glua series. Good luck!
Yeah I watched pretty much the entire series but I don’t know how to apply those things in game such as making an add on, coding something for a server, etc.
He also has a gmod lua series where he shows you how to use the gmod wiki and make a money printer for example.
I would advise looking at Garrysmod specific tutorials, Get to know the specifics of Gmod and Lua at the same time. There are some small tutorials in the official garrysmod wiki, and try the classic bare-bones Game-mode and code on top of that.
From what I have heard I will definitely use LOVE to learn and code with lua. I was just trying to do some stuff on mobile but computer seems the way to go.
Thank you, I am now going to use LOVE. I also do play minecraft and I think I will have some fun on computercraft.
If Lua isn’t a necessity for you, you can definitely simulate mouse clicks in Python. A simple Google search yields this on Windows: https://stackoverflow.com/questions/1181464/controlling-mouse-with-python I’d definitely be interested if someone knew of a way to do this in Lua
yep I know about python, and I just trying to know is there any possibility to use lua for this. ty, I think i'll start with a python 
https://github.com/jonekcode/ScribeBot
&gt; Do I need any libs for this? No. &gt; you know some usefull links about my subject [keybd_event](https://msdn.microsoft.com/en-us/library/windows/desktop/ms646304%28v=vs.85%29.aspx). [mouse_event](https://msdn.microsoft.com/en-us/library/windows/desktop/ms646260%28v=vs.85%29.aspx) 
Not trying to detract from LUA, but this is an easy job for AutoHotkey. One of the main focuses of AHK is easy hotkey/binding syntax. What kind of autoclicker were you wanting? Hold or toggle? I have example code for both. Hold: #SingleInstance, Force ; Only 1 instance of this script can run at a time. global delay := 100 ; Time in ms to wait before clicks toggle := 0 ; Default toggle value Exit F1::AutoClick() ; Hotkey AutoClick(){ ; Autoclick function While GetKeyState("F1","P") ; While F1 is still being held, click { Click ; Send a click event Sleep, % delay ; Wait x milliseconds } return } Toggle: #SingleInstance, Force ; Only 1 instance of this script can run at a time. delay := 100 ; Time in ms to wait before clicks toggle := 0 ; Default toggle value Exit F1:: toggle := !toggle ; Bit toggle. If 0 or blank, toggle becomes 1. Else toggle is 0. if toggle ; If toggle is true, set a timer to run autoclick SetTimer, AutoClick, % delay Else ; If toggle is false, turn timer off SetTimer, AutoClick, Off return AutoClick(){ ; AutoClick function Click ; Send click event return } Sorry I can't help with an LUA solution. I'm still pretty new to it.
Do you mean the keywords of Lua? 
the official lua handbook
Or just use LuaJIT and its FFI to save some time :)
Apart from the basics RBLX lua and lua are pretty different. You're better off watching a YouTube series that will specifically teach you RBLX lua.
The most easily justifiable answer is that some countries don't have the concept of a public domain, so your code cannot be legally used there. The most likely answer, because that forces people making improvements to release them and spread open source and whatnot instead of locking it down or selling it or whatever. Also someone could just package your code and sell it as is. \*shrugs\*
I use Lapis quite a bit, so I have no reason to need this, but I support its creation in case I ever do need to work with generating HTML outside of Lapis. :D
Thanks!
Ty :)
Thanks :)
Well, I am *considering* both porting it to work with fengari directly inside the browser (and generate DOM nodes directly, instead of outputting HTML) and/or generating Javascript code that generates DOM nodes. Either of those could be of use even if using lapis :)
My perspective is, if somebody makes a change to my code that is worthy of being protected by copyright under the law, then so be it, they've earned it. It won't make my original version less free or anything. On the other hand, I really want *anybody* to be able to just drag and drop this code into their project without having to consider the license. Even the MIT license forces people who use it to also include the license text with the product. I just don't think that about one hundred lines of code are worth imposing those restrictions.
So you have you x86\_64 computer running Windows, inside it you have the JVM running Minecraft, running OpenComputers that runs Lua, running an x86 emulator running Windows and inside it a GameBoy emulator? Sounds awesome to me! Now the real question, does it run DOOM?
No, sorry.
Look up CC0 then, it essentially is equal to public domain in all countries with a public domain, and enforces a license that imitates public domain in countries without it. Essentially what you're going for.
I've learned some LUA and I'm going to be a high school Juinor. I haven't learned trig yet, but you can still learn LUA easily. The basics are easy. You just need to apply yourself. If you want to share knowledge on LUA you can PM me :) There is a difference between Roblox LUA and LUA itself. Keep that in mind!
By the way, that will all be uploaded under MIT license when it's done, in case anybody wants to use it. I'm basically working on building my own "engine" on top of löve, not because there's not enough of them already, but to learn how these things work under the hood.
I've got a video series on how to embed Lua, the first video just covers building it (in cmake), this should work on any platform. [Embedding Lua in C++ #1 - Building Lua From Source](https://youtu.be/xrLQ0OXfjaI) This is the [CMakeLists.txt](https://github.com/davepoo/EmbeddingLuaTutorial/blob/master/lua-5.3.4/CMakeLists.txt) i used to build Lua as a static lib. I just quickly made it myself, you just need to make sure you don't try to build the standalone intepreter and compiler (luac.c &amp; lua.c), as they have their own main() methods in there.
The [Programming in Lua, fourth edition Paperback – 1 Aug 2016](https://www.amazon.co.uk/Programming-Lua-fourth-Roberto-Ierusalimschy/dp/8590379868/ref=sr_1_1?ie=UTF8&amp;qid=1532291486&amp;sr=8-1&amp;keywords=programming+in+lua) book covers lists, sets, bags, arrays + the whole language and the C API, and it's all under 350 pages and the profits support Lua. But it is not for total beginners. Honestly i would recommend "just learning to code". [There is a difference between knowing something and knowing the name of something.](https://www.youtube.com/watch?v=lFIYKmos3-s) If you just start writing programs then you will learn what all the terms about mean (even if you don't know what they are a called). [If you really want a list of the basics of Lua then there is this post](https://www.reddit.com/r/lua/comments/83ntr3/learning_lua_the_basics/)
Since lua is written in c, ROBLOX has adapted it to a more object orientated programming language, and added several things to make life easier. I would really reccomend skipping udemy and whatnot and learning from Robloxdev.com, and then later dabbling in luas built in / more advanced functions.
You don’t necessarily need “goto”; just once you complete a certain task you can use variables to track and skip certain processes.
Hmm. One thing that might work is this: Local val = getheat() While true do Local oldval = val Val = getheat() -- code here end
For ROBLOX, there’s a bit more of a community. There’s scriptinghelpers, hundreds of discord servers, ROBLOXdev.com, wiki.roblox.com, et cetera.
What's the name of the book?
Programming In Lua
 local myCurrentTable_sorted = {} for _, v1 in ipairs(myTable) do for _, v2 in ipairs(myCurrentTable) do if v1.ID == v2.ID then table.insert(myCurrentTable_sorted, v2) break end end end and run them in the order that they appear in `myCurrentTable_sorted` This is the simplest and most naive implementation possible.
Which order matters? The order in myTable or myCurrentTable? Do the orders even matter, or is it just important that all items in myCurrentTable are checked for in myTable?
The numbers don't matter. the order that matters is in myTable. I need the order in myCurrentTable to show as it appears in the order in myTable. What I want to do exactly (I didn't post because the table is big) is I'm trying to mod a card game and I want it to order the players hand by suit, then card value. My actual table is something like: cardTable = { {cardGUID = 'd30839', suit = "spade", cardvalue = 14}, -- Ace {cardGUID = 'b7c3e3', suit = "spade", cardvalue = 13}, -- King {cardGUID = 'dc70c6', suit = "spade", cardvalue = 12}, -- Queen ... {cardGUID = 'd35a6b', suit = "diamond", cardvalue = 4}, -- Four {cardGUID = '6c81c8', suit = "diamond", cardvalue = 3}, -- Three {cardGUID = '95b511', suit = "diamond", cardvalue = 2} -- Two } my problem is when I get the players hand in a table, it's all out of order. For instance it will show something like spade 12 spade 7 heart 9 spade 13 club 5 heart 4 .. etc when I want it to be as spade 13 spade 12 spade 7 heart 9 heart 4 club 5 ... etc so it follows the order of the card table,
I think I have something similar but it doesn't follow order. first let me show you my actual table, I didn't post it because it was too big to post so I made something similar above. this is my actual list. cardTable = { {cardGUID = 'd30839', suit = "spade", cardvalue = 14}, -- Ace {cardGUID = 'b7c3e3', suit = "spade", cardvalue = 13}, -- King {cardGUID = 'dc70c6', suit = "spade", cardvalue = 12}, -- Queen ... {cardGUID = 'd35a6b', suit = "diamond", cardvalue = 4}, -- Four {cardGUID = '6c81c8', suit = "diamond", cardvalue = 3}, -- Three {cardGUID = '95b511', suit = "diamond", cardvalue = 2} -- Two } and this is the code I have to get the information function whatCardisThat() local zone = getObjectFromGUID("635677") local objInZone = zone.getObjects() for _, object in ipairs(objInZone) do local guid = object.getGUID() for _, entry in ipairs(cardTable) do if entry.cardGUID == guid then print("Card Found - ", entry.suit," - ",entry.cardvalue) break end end end end It just doesn't do it in order like I want. I don't understand how my code is different from yours? sorry I am new to scripting/coding, Really want to get into it and thought this might be a fun way. Thanks!!
Your code is different from his because his outer loop is your cardTable, while your outer loop is objInZone. This causes his code to look through cardTable in its order, find out if each entry is in objInZone, and then run the code if it is.
I generally don't like the fact that you have to run the inner loop for each entry. I would much rather use Lua's built in search since I usually believe that it will be better then this. To that end, I leave this suggestion: Change myCurrentTable so it looks like this: myCurrentTable = { ["ffx01"]=true, ["dd11dx"]=true, ["r02jd"]=true, ["wooper"]=true } That allows your code to look much simpler: for _, v1 in pairs(cardTable) do if myCurrentTable[ v1.cardGUID ] then DoTheThing(v1) end end It is a slight reorganization of the myCurrentTable so that the card id's are the index's, then you can easily lookup the card using Lua's internal mechanism, which is relatively fast. Given that you are using consecutive integer indexes in your example, there may be no improvement in speed, since Lua has an optimization for those array like that.
This is much better, except you have to use `ipairs` instead of `pairs` in your loop. The latter uses the `next` iterator which returns a "next" key in the table in an arbitrary order ("Programming in Lua", R. Ierusalimschy, Third edition, pp. 65). You need to iterate through `cardTable` in order, so use `ipairs`.
Wow thanks so much guys. I really appreciate the help. There is one issue though and that is I believe I could be wrong but in the game I'm doing this with (tabletop simulator) I believe the getObjects() is what I'm using that actually generates the table of GUID's (what the game uses to identify different objects) and I use that table to compare to the table I made that has the actual cards GUID's in it and I just added in some different keyvalues. The table also changes every time I need to check it (it's a hand of cards) so I really don't know where this fit's in? Do I need to make another function that makes the table like you said, or am I just missing something? Again really sorry for the dumb questions I just started learning about this stuff. Is that a book you would recommend for beginners?
You are completely right, my mistake.
If you don't have control over the generation of `myCurrentTable`, I probably wouldn't waste time reorganizing it. If the tables are always small, like this one (only five entries), then maybe it would be worth it. Remember that the other way has to go through every item in `myCurrentTable` for every entry in `cardTable`. That's a decent amount of work. (There may be some optimization available to stop after you've found all of them or something). I learned Lua pretty much from the book on the main website, which I think is just an earlier version of the one r3trospek referenced. Well... and approximately 4 years of professional programming with it.
&gt; What is a "dynamic library" specifically? Is it a file type of some kind? Yeah. A shared library is a library that's compiled but not part of the executable. When the executable is run, it looks for the dynamic library, You can load and unload libraries at runtime if you want, which is what LuaJIT is doing here. On Windows share libraries end in .dll, and basically everywhere else they end in .so, as the documentation says. &gt; When a path is provided, must it be relative? Absolute? Something else? It has to be in the search path. Often (at least, often on windows) they're just dropped in the directory with the executable. I don't remember if you're allowed to have a path for the name, I think it just needs to be the name. &gt; When a name is provided, what file path is assumed? The default shared library search path, which depends on your OS. Here's a stack exchange link with details for unix, but if you're on another OS you should be able to google the answer. https://unix.stackexchange.com/questions/22926/where-do-executables-look-for-shared-objects-at-runtime
Thanks, that was very helpful. In Windows, it turns out you can type "path" into command prompt to see the search path. Do you know how I could use a relative file path?
The thing about tables in Lua is, very rarely does order actually matter. Why do you need the hand to be in a specific order?
Thanks, I will look that book up I was just curious if it was something worth starting with though because I've heard people say not to start with LUA Ok so about the generation of myCurrentTable, no I don't have control over the generation. But it will always be 13, and the table it needs to search through is 52. A deck of cards. 4 hands each. I wanted to make a game of 'Spades' if you've ever played it before, and the first thing you do when you're playing spades is organize your hand. So as you said it would have to run through cardTable for every entry until it's found. Would a coroutine be effective here? I'm not exactly 100% on exactly what they are/do (a lot of the documentation uses programmer 'lingo' I don't quite understand) but I read that they can be suspended and wouldn't that be great for when it finds all 13 cards? I was also thinking of doing this whole thing another way. Instead of going through each players hand and sorting it that way maybe I could go through cardTable and have it deal to the current owner of that card. One cycle through would have it everyone's hand in order as opposed to doing it 4 times the other way. I'm going to try some of these tonight when I get home. Thanks again for the help.
If you've ever played Spades, it's the game I'm trying to make, the very first thing you do after the hand is dealt is sort your hand. because spades is played by suit, and then card value. You don't want to renig (play a suit that doesn't follow the suit of the first card played during that round, if you do have a card that can follow the suit, which the rules are iffy about depending on where you go. I want to allow the players to renig then punish them only if it's called by the other team)
Let me see if I'm following: you deal a player a hand of 13 cards. You then want to sort that hand for the player. Are you sure you don't want the player to sort their own hand? Tabletop Simulator allows this, doesn't it? If you're sure, then you want to first split the hand into two sub-hands: a hand of spades and a hand of others. You then sort the hand of spades by their card value and the others by their values, ignoring suit. You then return a table that is a joining of the spades table and the others table. Sound right?
yes Tabletop Simulator allows it - But it's tedious and annoying, some players take a long time to do it. and I wanted to squeeze as much into this as I could so I can learn as much as possible. I don't want to split the hands like that. Generally you put the same suits together (to help prevent renig) and then order them by value. I have 2 tables. myTable is my table of every card in the deck and it's in order. Next is an already generated table which I have no control over how it's generated and that is the hand. I'm simply trying to use the deal function on the players hand in the order they appear in myTable. If I use the deal function like this then the cards stay in the players hand and they're put in the order I want them.
If you're dealing with very large tables, nested loops may be a bad idea. An alternative is to use a table as a hashset to store the IDs in myCurrentTable, then iterate myTable and run your code for the elements present in the hash. local id_set = {} for _,tab in myCurrentTable do id_set[tab.ID] = true end for _,tab in myTable do if id_set[tab.ID] then myCode(tab) end end
You can load a file path or just the library name, if I recall correctly. So you can do ffi.load("z"), on Windows it will search for "z.dll" and try to load it on Linux and Mac os it will try "libz.so" You can also do ffi.load("/path/to/crap.whatever") or ffi.load("c:\\stuff.dll"), and you can also use relative paths.
I got it to work perfectly with what I'm doing - as far as returning the results in order with print. function whatCardisThat() local zone = getObjectFromGUID("635677") local objInZone = zone.getObjects() for _, object in ipairs(objInZone) do local guid = object.getGUID() end for _, v1 in ipairs(cardTable) do for _, v2 in ipairs(objInZone) do if v1.cardGUID == v2.guid then v2.deal(1, "Green") print("Card: ",v1.suit," - ",v1.cardvalue) break end end end end But now I realized the deal function, the cards have different distances they need to travel and that will be random every time. That results in other cards reaching the spot where the card is considered 'delt' before cards that came before it. Is there a way I can have a wait for a certain amount of time before the next card is delt? To put this question as best I can - Now that I have it working like I want it - Is there a way to put a small pause between each step the loop does?
You should put it in the autorun folder to AFAIK. I've not worked with glua in a while, but I'll have a look in the morning.
Alright I have an update: I got it to work but it's scrolling in the wrong direction.. I need it going from right to left Here is the code I have now -------------------------------------------------- local multiplier = 40 --Ticker spedd multiplier local width = ScrW() --100% users screen width local ypos = 10 --How high or low the ticker is. local text1 = "Hello and welcome to the server. Please enjoy your stay." --Edit this local font = "Trebuchet24" --Font Face local textcol1 = color_white --Text Color local scroll_dir = 1 -- Change this to -1 to go left or 1 to scroll to the right hook.Add("HUDPaint","DrawScrollText",function() local x = math.fmod(SysTime() * multiplier,width) surface.SetFont(font) local w,h = surface.GetTextSize(text1) if x + w &gt; width then draw.DrawText(text1,font,(x + w - width + 50) * scroll_dir,ypos,textcol1,2) end draw.DrawText(text1,font,math.fmod(SysTime() * multiplier,width),ypos,textcol1,0) draw.RoundedBox( 6, 0, (ypos - 1), (width + 50), 25, Color( 0, 0, 0, 150 ) ) end) -------------------------------------------
What does multiplier take negative values?
After an afternoon of sheer mucking about. I have found the answer! Firstly, I noticed there are two "draw.DrawText" entries, No idea why... Secondly, Inverse the X + W &gt; Width (to X + W &lt; Width). Thirdly, use the (* -1) to invert the screen width in the draw.Draw text. Here's the code I have; local multiplier = 100 -- greater multiplier = faster scroll local width = ScrW() -- the width of hte space which the text will scroll across local ypos = 20 -- the y pos on the screen, assuming the text scrolls horizontally local text = "Welcome to the server" -- the text to draw local font = "Trebuchet24" -- the font to draw it in local textcol = color_white -- the color to draw the font hook.Add("HUDPaint","DrawScrollText",function() local x = math.fmod(SysTime() * multiplier,width) surface.SetFont(font) local w,h = surface.GetTextSize(text) if x + w &lt; width then draw.DrawText(text,font,(x + w - width) * -1,ypos,textcol,3) end --draw.DrawText(text,font,math.fmod(SysTime() * multiplier,width),ypos,textcol,0) end ) Uncomment the second "draw.DrawText" and you have two srolling on opposite sides of the screen. The only issue I'm seeing is that the whole text starts on screen. After toying around by timesing "X" to about 1.4 and then the whole sum before (* -1); draw.DrawText(text,font,((x * 1.4) + w - ScrW() * 1.2) * -1,ypos,textcol,3) It'll draw off-screen now too. Enjoy.
Ok thank you so much, I do have another issue with MySQL and LUA I am trying to make it where when a player joins the server, a LUA code will send wither a 1 or a 0 to a Mysql table. here is what I have so far: function PlayerConnect( ply ) local uid = ply:UniqueID() query( "SELECT online FROM utime WHERE player = " .. uid, function( data ) --status Online query( "UPDATE utime SET status='1' WHERE player = " .. uid, function() end ) else --status Offline query( "UPDATE utime SET status='0' WHERE player = " .. uid, function() end ) end I do have a basic SQL connection bit up in the top of the main lua file. 
I've got basic knowledge of Lua, and basically 0 of SQL, I might have a look-in over the weekend but I'm making no promises of results.
For some reason it's spamming my console with this: [ERROR] addons/elfnet_server_ticker/lua/autorun/client/cl_scroll.lua:17: bad argument #2 to 'fmod' (number expected, got nil) 1. fmod - [C]:-1 2. fn - addons/elfnet_server_ticker/lua/autorun/client/cl_scroll.lua:17
It looks like it's because of ScrW() (and equally ScrH()). Let me look at it.
It's because of ScrW(), even in single player (since even that is kind of like a server now) it'll throw an error, yet work... because it's a client-only command, I'm looking into how to get it to work properly.
First of all, `os.time()` doesn't necessarily return a result in seconds, as defined in the Lua reference. That behavior depends on the platform and shouldn't really be interpreted in any way before feeding it into `os.date()`. You are also assigning global variables, which you should probably try to avoid. It doesn't cause any harm in this small example, but it's a good idea to get yourself used to always declaring variables `local` to the scope where you need them. As for your problem, unlike, for example, pascal, where `some_method()` and `some_method` would both count as function calls, in Lua functions are values that can be passed around just like strings or integers could. If you write `name = io.read`, you are effectively assigning the function in `io.read` to the variable `name`. In other words, after line 8, you could call `name()` and it would read input from the console and return it, just as if you wrote `io.read()`. If you want to *call* a function (or other callable object) without arguments you *need* to write `()` so Lua knows you want to call the function, and not assign it. Similarly, the loop on line 10 would never end, because you just assigned `io.read` to `name`, this they are equal until you change any of them. Lua 5.3.4 Copyright (C) 1994-2017 Lua.org, PUC-Rio &gt; name = io.read &gt; print(name) function: 0x41e860 &gt; print(io.read) function: 0x41e860 &gt; print(name == io.read) true &gt; print(io.read()) Hello World! -- User types in this Hello World! -- Program prints this 
What do you mean by builtin mouse support?
This is kind of a weird question. Much like asking if Python has mouse support. If you are using. Lua Love, then yes it has mouse support. But out of the box, no Lua does not have mouse support.
Reading table length is quadratic? Woah. Besides stuff like that, sweet project! I love it.
Depends on the framework you're using. [love.mouse](https://love2d.org/wiki/love.mouse) if you're using Love2D.
Y’all know what OOP is?
No
Look up lua objects and classes, this is exactly what you need. It’s called object oriented programming or OOP
Will do! Thanks
Well welcome to the wonderful world of Object Oriented Programming! OOP is creating data structures called Objects, with templates called classes, that can store variables called attributes, and functions called methods. Now Lua’s implementation of OOP is strange, to say the least. unlike most other languages, to say the most. It mostly works since Lua counts functions as a variable. [this tutorial should show you how.](http://lua-users.org/wiki/ObjectOrientationTutorial) Let me know if you got questions. (Don’t worry, you will.)
If you get stuck, dm me I can help you out 
No need for full object orientation here, just the basics, and that's really more about metatables than all those fancy OO abstractions. local __meta = {__index = {random = function(self) return self[math.random(#self)] end}} local BoyNames = {"Helmut", "Heinrich", "Dieter", "Hans", "Gustav", "Horst"} print(BoyNames:random()) Look either at the free version of programming in lua (it's about lua 5.0, but most of it still applies even to 5.3) or the lua manual for whatever version you're using at lua.org/manual/5.x (replacing x with the minor version number)
Side note unrelated to the content of your post, as the other commenters have that covered, If you surround a bit of text with a grave/backtick, (```) reddit will format the text as code. Eg `test` is done by using \`test\` You can also use three backticks in order to do a block of code. Here reddit won't remove newlines. Eg ``` One line Two lines Six spaces ``` 
Why even use metatables?
Well, I assume this code is used in many places, so writing more code once allows you to write way less code in many places later on. Otherwise yeah, screw metatables and just use the more verbose version without metatables.
I mean, the metatable is already forced to be a one liner. Might as well just define a function that adds random() to a table and returns it. If you make it a one liner, it’ll be similar in length to \_\_meta but avoids dealing with metatables entirely. 
you mean something like this? local select_random(table) return table[math.random(#table)] end It's also an alternative, I guess. It really depends on how you want to write code. My original answer was meant as a reaction to some other answers that went straight into object orientation, which is pretty overkill for such a simple problem and probably just confusing to someone who is still dealing with a problem like this. And that's just *Object* Orientation. Throw in classes and you've got an exemplar case of over-engineering.
@OP 1. It's worth pointing out that, in Lua, Object Orientation is a way to think about tables, rather than a language feature. A table like `{name='Helmut', greet=function(self) return 'hi' end}` passes as an object, but you may or may not think of it as one depending on what suits your situation best. 2. The most basic definition of an object is Data + Code. Most languages have specialized mechanisms for that. Lua instead treats code (functions) as data, allowing you to store both in the same place (i.e. Tables) 3. If you want to learn about programming, by all means, look into OO. But for this kind of problem it may be a bit overkill to start writing an entire class when all you need is an array and a function. Lua isn't like C++ or Ruby. There classes are the one-size-fits-all way to go about data and functionality, while in Lua it's just one more tool you should know about. @/u/IKnowATonOfStuffAMA 4. Lua doesn't really *implement* object orientations. It works in a certain way, and object orientation naturally results from the possibility to store functions into tables. The only real thing Lua does is allow for the `:` syntax.
Might as well mention that code that spans over multiple lines can be formatted by just adding 4 spaces of indentation at the beginning of the line and it will look like this :)
Good point. That's probably more useful given that most snippets are multi-lined
First of all the first loop doesn't seem to do anything. It iterates over all objInZone entries, stores the `guid` in a variable local to loop overwriting the previous value, and when the loop ends the local variable `guid` also disappears. And it isn't really used anywhere afterwards. Second, I'm having a hard time understanding what exactly do you want to accomplish, especially according to the code you provided. You'll have to specify more details, especially considering that this is a game, and the logic might need to be spread over time etc.
I think you're declaring a new time variable inside the function by saying local again. Get rid of local on line 4 and I think you're good.
Did you try [this](https://stackoverflow.com/questions/32103600/uploading-an-image-using-luasocket)?
Sorry for being so bad at explaining. I decided to take a break from this for now and learn a proper coding language so I'm familiar with it, then come back to this at a later date. I'm learning Python right now then I'm going to switch to C++ to get some deeper knowledge about the computer languages, how they work, how to write code etc. Sorry for troubling you should I delete the thread? I do appreciate you trying to help though.
Actually, what OP does would already be a closure, if they didn't shadow the upvalue time with the local time. local time = 0 local function stopwatch () time = time + 1 print (time) return time end That closes a single instance of the function with the time upvalue. As a side note, this is a really nice example that you could implement as a coroutine if you want to learn about those.
There's a few ways. First of all, does it have to be lua? If not, then there's easier ways to do it, specially under linux (wget, curl, etc.) If you only have to do it *from* lua, but not necessarily *in* lua, maybe you clould just use a system call and delegate the work to one of the above mentioned shell tools. If that isn't an option either, first you need to know that Lua itself does not do internet, or any kind of networking whatsoever. Luasocket seems to be a good library to handle that kind of stuff and luahttp is another one that even does https. If you want luasocket, you'll also need to have a look at ltn12, which is a separate library but comes as a dependancy of luasocket.
Simply put, if math.random(2) == 1, then x = 100, otherwise x = -100. A longer way of writing it would be: if math.random(2) == 1 then x=100 else x=-100 end
Any time you see ... and ... or ... in a line it is pretty much the same as the ?: ternary operator. You have the condition math.random(2) == 1 The true statement and 100 The false statement or -100 If the condition is true, then the “and 100” is evaluated and assigned to x. The or is ignored due to short circuit logic causing it to be unnecessary to evaluate. If the condition is false, then the and part is ignored, and the or part is evaluated, which results in -100 being assigned to x. Another way to look at it: if math.random(2) == 1 then x = 100 else x = -100 end
Another way to achieve the same result is to do this: x = 100*(2*math.random(0,1)-1) But once you know how ternary operations work, they are much easier to read. 
Did you try it?
This code is illegal because the lua grammar doesn't allow arbitary expressions as statements. Valid lua statements are function calls, assignments, function/variable declarations, for loops, if statements, etc See https://www.lua.org/manual/5.3/manual.html#3.3
It's very close to what i had already so 'll go try it once i have the time. Yes as far as i can tell i have to do it within Lua, i'm using the scripting environment from a program and need to to something in the Lua with the response to this request. (I'm on windows.)
It is precisely this which frustrates me, a sometimes lisper, when writing LuaJIT. I believe with only a slightly different emphasis, we could have a very small and fast lisp dialect with excellent foreign function/variable access which would be a brilliant embedding language. Lua is in so many ways this, but it strays in ways that, I believe, give more intellectual discomfort than parenthesized polish syntax. The statement/expression distinction is one such case. Lack of syntactic metaprogramming is another.
Or do local _ = a() and b() and c() end 
Is that on Windows or Linux? I have not been able to get Lua to talk to MySQL on Windows, but it works perfectly on Linux. If that's on Windows, what are you using to link Lua to MySQL?
Easy: _ = a() and b() Not *as* pretty as without the assignment, but it works nontheless, and the `_` makes it clear that it's a throw-away variable. `local` needs to be added if someplace in your code `_` is used for something else.
Darn, I thought mine was set to "More magic". Apparently, it was only set to "magic".
Can't you just write a wrapper function called funcand and invoke it as funcand{a, b, c}?
No. *(and a b c...)* and *a() and b() and c()* are special forms. funcand wouldn't cease evaluation on the first false.
I'd recommend always using `local _` in this case, to avoid creating a global variable.
The expression/statement separation helps keep the grammar sane in the absence of semicolons or significant indentation. For example, if expressions could be statements then `f(a)` could be parsed as either a function call or as as two expressions: `f;(a)`. Another thing that affects the design of Lua's grammar is that the parser directly emits bytecode, without first converting the program to an explicit syntax tree. This is very important because many people use Lua as a data description language, with enormous table constructors. My understanding is that this lack of a syntax tree is one of the main obstacles for adding a macro or metaprogramming system to the main Lua distribution. BTW, if you know a solution to this problem, let us know. I'm sure it would be a good research topic for one of Roberto's grad students.
Aren't sexprs a solution to the first and quoted sexprs a solution to the second? I may be completely barking up the wrong tree, but I've used '(*my-private-data-description-language-goes-here*) in past projects. To cast doubt aside, I really do like lisp notation, and I don't understand *parenthephobia*. It's just a different syntax, not something only space aliens can understand.
Look into Urn.
That works! But I meant something like this: local function to_selectable(t) function t:random() return self[math.random(#self)] end return t end local selectable = to_selectable {5, 4, 3, 1} print(selectable:random())
or `do local dummy=a() and b() end`
Does that really work? If I'm understanding OP correctly, if f() returns false, it shouldn't keep going. You inspired me to golf it for LuaJIT bytecode: `local function all(...)return... and all((...)()and ...)end` It will probably perform worse than local function all(f, ...) -- only TCO'd in luajit :( return f and f() and all(...) end Both are inspired by your tail recursive idea. That was super smart. 
&gt; Aren't sexprs a solution to the first sexprs avoid the ambiguities but that would require a drastic change in the grammar, as you already mentioned. My point is that you can't just let expressions be statements in Lua, and that there are trade-offs involved. You either separate statements from expressions, like Lua has chosen to do, or you change the grammar to be less ambiguous (by using sexprs, adding semicolons, or significant indentation). I think in Lua's case significant indentation would be the least burdensome, but I am not sure if expressions-as-statements is enough of a reason to make this change. &gt; and quoted sexprs a solution to the second? Not really. The issue I talked about has to do with how big the tables are. It is not unheard of to have Lua source files that are megabytes long being used in memory-constrained situations, and that rules out the obvious solution of having the parser produce a syntax tree. Quotations and anti-quotations are natural ways to approach metaprogramming and in fact are how [Metalua](https://github.com/fab13n/metalua) does it. However, I think that adding something like Metalua to the main Lua implementations would only be possible if we find a different way to implement it without needing to build a syntax tree as an intermediate step. &gt; I don't see a large difference between stacking conses and building tables in the reader. Sure. Using conses for this purpose is not that different from using a Lua table constructor. As I said in the precious paragraph, the issue has to do with how large the source file can be.
Oh, and if you wanted an Urn example with Lua output: https://pastebin.com/raw/fSZMvRR1 I had to limit it to one optimization pass, because otherwise, it would have just evaluated the expression and replaced it with print1(false).
If you care about global variables. Sometimes they just don't matter, specially when you don't use them for any actual features, then they are just there and do nothing. If anything, speed could be the most relevant argument against a global `_`, as setting a global requires a table lookup and for the string `"_"` to be hashed, while locals are compiled into mere numeric indices in the resulting bytecode.
In this case the thing that would worry me the most about having `_` be global is that the garbage collector will never be able to collect any objects that end up being stored there. This could be relevant if `c()` returns a large table.
 local selectable do local sel = {} local __meta = {__index = sel} function sel:random() return sel[math.random(#sel)] end selectable = function(tab) return setmetatable(tab, __meta} end end selectable{"apples", "oranges"} That does the same as your code, without closing a new function every time you create a `selectable` object :)
True, that's also worth considering. I guess an alternative would be to write a function that does nothing, like function _() end and then just use it instead like this: _(a() and b() or c() and d()) It does essentially the same thing, but you don't need to write as much
Isn't that table access hoisted in LuaJIT? I.e. it's not a constant high price to pay.
Yup, you're right. Now, you still have to hope that this entity class doesn't have any and won't receive metatables in the future. I think your idea of a select_random function is the best option for OP. But if we're optimizing for memory usage, this is safer: local to_selectable do local function _random(self) return self[math.random(#self)] end selectable = function(t) t.random = _random return t end end 
LuaJIT isn't the only lua interpreter though ;) Going around teaching people who are probably new to lua and most likely using PUC Lua how not to optimize because LuaJIT takes care of that is quite pointless. You can always decide not to make use of an optimization technique if you know the compiler does it on its own, but you should at least be aware of what's happening. I personally use 5.3 quite a lot and if you know how you can get some good speed out of it.
I wish it was! It's an incredible project, though. I'm aware of Fennel, but Urn is a *lot* more complete. Whereas Fennel feels a lightweight layer on top of Lua that gives you some Lisp goodies, Urn is effectively an actual Lisp that just happens to compile to Lua. For example, Urn has car, cdr, gensym, and other goodies. It generates pretty-well-optimized code even when you're writing stuff that's extremely Lisp-y. You might either be very pleased, or very disappointed by this page: https://urn-lang.com/docs/ It's not as well documented as Common Lisp (no million page hyperspec here) but if you already know Common Lisp, you won't need any docs. Probably.
&gt; If you're building nested structures as you read, aren't you basically building a parse tree It is not quite the same. The parser only needs one level of recursion per level of nesting, so if you have a very "wide" structure that doesn't nest deep you don't need lots of memory to parse it. &gt; Second, are you implying that sexprs aren't sane syntax? What I was trying to say is that sexpr syntax is orthogonal to the issues we were discussing. Languages like Metalua, MetaOcaml, Template Haskell and sweet.js show that you don't necessarily need sexpr syntax to have quotations, anti-quotations, and meta-programming. The issue I mentioned about parsing comes from the architectural choice of doing the metaprogramming through syntax-tree transformations, which doesn't fit nicely with how Lua and LuaJIT are implemented today. I suppose this problem might be fixable with clever data structures or by switching to a model built around stream transformations instead of tree transformations, but I haven't put too much thought on it.
I think you want function and_all(...) local function _(last, f, ...) if last and f then return _(f(), ...) end return last end return _(true, ...) end 
But you need to return the last value in an all truthy chain.
You don't, that's precisely the point of the post :)
To properly mimic a chain of ands, you do. var = a() and b() and c() will result in var having the first false-ish value or the value of c().
The point is that it depend on the implementation you're using. It's also a mistake to avoid an optimization where you know full well it *is* available.
OP was precisely asking about the case where you don't save any results, otherwise you can just use a chain of `and`s
An anonymous function and a lambda expression are two entirely different things. One can be expressed as the other, but that doesn't make them the same.
I think you're inferring something. I'm trying to address the full generality of a list of functions where you have no idea how many there are. No you can do that with a chain of *and*s unless you kluge it with loadstring.
Now you *are* splitting hairs for purely rhetorical reasons. Please cut the garbage.
[https://github.com/brouznouf/fivem-mysql-async](https://github.com/brouznouf/fivem-mysql-async)
So you're thinking about this as a passes thing. I believe I've got it. I just keep lamenting not having a nice tiny/fast/good FFI Scheme to bolt on things. Looks like that will continue. :-( Thanks for the education.
Thanks for the pointer. Urn is definitely going into my in-dumpster of things to play with.
Sounds good! 
Sweet! Thanks I'll check it out and see if I can use it to port my project to Windows.
Someone gave me the tip to maybe put the check in the setjob command itself, instead of triggering another one. self.setJob = function(name, grade) local lastJob = json.decode(json.encode(self.job)) MySQL.Async.fetchAll( 'SELECT * FROM `jobs` WHERE `name` = @name', { ['@name'] = name }, function(result) self.job['id'] = result[1].id self.job['name'] = result[1].name self.job['label'] = result[1].label MySQL.Async.fetchAll( 'SELECT * FROM `job_grades` WHERE `job_name` = @job_name AND `grade` = @grade', { ['@job_name'] = name, ['@grade'] = grade }, function(result) self.job['grade'] = grade self.job['grade_name'] = result[1].name self.job['grade_label'] = result[1].label self.job['grade_salary'] = result[1].salary self.job['skin_male'] = nil self.job['skin_female'] = nil if result[1].skin_male ~= nil then self.job['skin_male'] = json.decode(result[1].skin_male) end if result[1].skin_female ~= nil then self.job['skin_female'] = json.decode(result[1].skin_female) end TriggerEvent("esx:setJob", self.source, self.job, lastJob) TriggerClientEvent("esx:setJob", self.source, self.job) end ) end ) end
I think the idea with explicitly yielding is you should be able to easily determine where all the yields are occurring through documentation. So in your case, if dictionary does not state that is *does* use a yield in the try_get_value documentation, then it's promising that it does *not*. Thus, changing that behavior would be backwards-incompatible. From there, it's pretty rare that you would want to yield inside an API function that doesn't scream "this function needs to yield". Even for file IO wrappers I typically see: file.read_all(filename) -- no yield here file.real_all_yielding(filename) -- yields So I think that this seems like an issue in theory "any function could yield!" but in practice it just isn't a concern
The thing about lua is theres a few different implementations of it. If you're using the C# NLua wrapper I know that pcall returns a special value (false, function) if there is a callback inside of it on some versions, and then you need to handle that. In the default implementation I imagine it would work exactly how you would expect since it pushes the function onto the stack then invokes it. PCall and load should just yield since they don't do anything that isn't thread safe around the calls, though pcall is handled very differently in basically every implementation (and same thing with xpcall). It's not documented asking for a yield, so I would personally treat it as explicitly undefined behavior. --- As for the _yielding suffix, something like that is in my opinion easiest since it's not very commonly necessary to yield from an API function, and when you *do* need to yield from an api function you almost always need a corresponding synchronous version, and you need to name them differently. So it comes up naturally.
Missed the point - any function you call may internally call `coroutine.yield()` without the caller's knowledge, which will yield and may cause other, unrelated code to be executed before the function returns. The caller did not yield explicitly. From the caller's perspective, its thread was pre-empted.
honestly your point doesn't really apply to coroutines as much as it applies to asynchronous programming in general. as soon as you have any sort of scheduler (think, like, the node.js event loop), you are prone to having race conditions if you aren't careful. in your example, it's up to the supplier of the initializer function to understand the context and documentation. there is no reason to yield from the initializer without nesting the coroutine.yield in another coroutine.resume
&gt; Missed the point - any function you call may internally call coroutine.yield() without the caller's knowledge, which will yield and may cause other, unrelated code to be executed before the function returns. This is just not true. The coroutine yields *to* the caller. To the caller of a coroutine, the coroutine is literally just like any other function. It's a blocking call. In other words, there's no difference from the caller's perspective between `myRoutine()` and `coroutine.resume(myRoutine)`, except that the latter function is stateful. You can completely replicate the functionality of coroutines using normal functions; it would just be more verbose. The idea that "you never know if other code will run between the current line of code and the next one" just doesn't make sense in the context of coroutines. They *aren't* parallel programming at all. They are just state machines, manually scheduled by your code in a completely deterministic manner. 
This is consistent with what Tjstretchalot wrote - the general gist seems to be that you simply *must* know whether and when the functions you're going to call (including callbacks) can yield or not. That part is the same C# or Javascript, however in those languages you cannot "accidentally" call a function which yields (well, you can, but the error will be much entirely obvious); `yield` in C# can only be used in direct conjunction with an enumerator, and `await` can only be used in direct conjunction with an awaiter (and the same for Javascript but with different words) - so the caller of any function is necessarily aware of what's going on. &gt; it's just an artifact of how minimal Lua is. I can accept that "excuse" - doesn't mean I think it's good.
&gt; the general gist seems to be that you simply must know whether and when the functions you're going to call (including callbacks) can yield or not Yes, just as you simply must know whether the functions you're going to call might call `os.exit` or will trigger a disk reformat. A function that serves as body of a coroutine shouldn't even be thought of as a function that you can call, any more than a function that's being used as a class method should be thought of as a function you can call without passing `self`. In fact, Programming in Lua always shows `coroutine.create` being passed an anonymous function, and usually inside a wrapper function: function getCounter(n) return coroutine.create(function() for i=1,n do coroutine.yield(i) end end) end The idea that you would have functions lying around as part of your public API which call `coroutine.yield` is just not something I've ever experienced, and I've been using Lua since the 90s. &gt; I can accept that "excuse" - doesn't mean I think it's good. It's not an "excuse", it just is. Lua's entire implementation is half a megabyte of C, it has a tiny runtime footprint, it's faster than almost any non-JITed scripting language and is *extremely* friendly to JIT implementations (which is why LuaJIT was the fastest JIT language for a *long* time, only being edged out in a subset of benchmarks by V8 after many millions of dollars were poured into it) -- and that's in large part to the simplicity of its design. Lua makes the most of a small handful of carefully chosen concepts that synergize well. No, it doesn't have all the amenities of Javascript, but that's because the entire language and its standard library is about as big as Javascript's array implementation. 
I thought the same thing at first, but it turns out this is not special syntax, but instead due to the way that `and` and `or` actually work: * If the left-hand argument to `and` is falsey, it will return that argument; otherwise, if it is truthy, then it will return the right-hand argument. * If the left-hand argument to `or` is truthy, it will return that argument; otherwise, if it is falsey, then it will return the right-hand argument. Given the code `condition and value1 or value2`, the following happens: * If condition is `true`, then `true and value1` evaluates to `value1`. We then have `value1 or value2`, which evaluates to `value1` (so long as `value1` is not falsey, in which case this ternary operator hack fails). * If condition is `false`, then `false and value1` evaluates to `false`. We then have `false or value2`, which evaluates to `value2`. I do agree, however, that a ternary operator would be nice, but such a feature would conflict with the goal of Lua being a small size.
Python and Javascript can do similar,(and have ternary) but stuff can have pretty random cases of falsiness. In Python `len(x)==0` frequently is false, and `0` is false too. I think Lua gets this right, just `nil` and `false`, false-y please... Lua gets strings wrong though `"2" + 2 == 4.0`, it should just have bugged out. (also perhaps `print` and REPL output should quote strings for clarity.)
Burn programming languages with mouse support with fire.
WHAT THE HECC WHAT WHY
Libraries should add it. Mouse support is a way to specific thing to add at that point, it has to do with separation of concerns. To be honest i can't explain it that well..
It doesn't mention mutating the first argument in the readme: array.concat(object:table, object:table):table Returns a new table by joining all values from the two tables 
No but the source code does exactly that.
https://github.com/EvandroLG/array.lua/issues/2
Well you may be mislead by the function name „yield“. In a true multitasking environment, e.g. a RTOS, yield usually means that control is given back to the scheduler which than decides which thread runs next. Lua has no scheduler, coroutine.yield is just returning to the coroutine.resume that invoked it. Resume itself is a C function which recursivly calls the lua vm interpreter. So Lua uses the C stack to track nested resume calls. The coroutines themself have their own VM state (stack, pc, etc.) so in this sense they really have most characteristics of a thread. Arbitrarily calling yield in some code must be considered as a bug, because when there is no corresponding resume it will simply abort with an error. Code which internally uses resume/yield pairs will also not interfere with callers using coroutines. It is easily possible to build a task scheduler in Lua so you can implement a cooperative multi tasking kernel in Lua. You can even, with the help of debug hooks in the Lua debug library, build some sort of preemptive multitasking in a sense, that Lua code can preempt itself on the VM instruction level. When you build such a MT kernel like this you may also require the implementation of synchronisation primitives for it. But because the Lua Language itself does not provide a scheduler there is also no need to define such primitives in the standard language, it just lacks the problem. BTW: resume/yield parameter and return value passing can be used as a bufferless „rendezvous“ style message passing 
Maybe try the Logitech forum/board. 
Cheers
Thanks for the response. I used: os.execute("python -u -c C:/Computer-Lights.py") This lua code worked to run the python script, but it didn't run the script in command line (I also need to run it as an administrator). 
Taking out the `-u` and `-c` didn't make any difference. The [Computer-Lights.py](https://Computer-Lights.py) script still runs outside of command prompt. Here's the example given by Unified Remote for running command prompt: local last = ""; local cmd = ""; actions.update = function (str) cmd = str; end --@help Execute a command --@param command The command to execute actions.execute = function (command) if (cmd == "") then cmd = last; end if (command ~= nil) then cmd = command; end last = cmd; layout.command.hint = cmd; layout.command.text = ""; layout.output.text = "Executing..."; local pout = ""; local presult = 0; local perr = ""; local success, ex = pcall(function () pout,perr,presult = libs.script.shell(cmd); end); if (success) then layout.output.text = "Result: " .. presult .. "\n\n" .. pout .. "\n\n" .. perr; else layout.output.text = "Error: " .. ex; end end Any idea how I can modify this code to run my python script in command prompt (as admin)?
I was confused myself mentioning `pcall`.. Don't know if `pcall` can ever fail.. These below both have the same result. `false` is a program that "fails". pcall(function() os.execute("true") end) pcall(function() os.execute("false") end) To be honest i don't know enough about unified remote to really answer your question.. Is the script running on Linux? If you have sudo could use that to run as root, or could make the program suid with `chmod`.(roughly the latter makes the program runnable as regular user, but able of root itself. Obviously you have to make sure the program does only the expected range of things..)
Alright, well, thanks for all your help. I appreciate it! I'll look into this and I'll post back here if I figure it out.
I'm new to Lua. Is making use of this feature generally accepted by experienced users?
It's an easier way of writing it, though I'm not sure how many actually use it. All that matters is how you want to work it, what's best for you. There are just shortcuts to some of the code if you know what you're doing. 
Okay, I have it working. Here's my solution for anyone that comes across this post. Of course, you'll have to change the path\_to\_file, [file.py](https://file.py) and file.bat to work with your own code, but I wanted to stay consistent with my original question. 1. Create a batch file by opening notepad and add (then save as "Computer-Lights.bat": &amp;#8203; @ECHO OFF C:\Computer-Lights.py 2. Right-click your newly created "Computer-Lights.bat" file and "Create a Shortcut" 3. Delete any spaces from your new shortcut (e.g. "Computer-Lights.bat-Admin" 4. Right-click "Computer-Lights.bat-Admin" and select Properties &gt; Shortcut &gt; Advanced... &gt; Make sure 'Run as administrator' is checked 5. Hold shift and right-click "Computer-Lights.bat-Admin" and click "Copy as path" 6. Open remote.lua for whichever Unified Remote you would like to create a button for 7. Add the following code (you can paste the "Copy as path" content into the brackets for [os.open](https://os.open)("COPY\_AS\_PATH\_CONTENT"): --@help ComputerLightsToggle actions.ComputerLightsToggle = function () os.open("C:/Computer-Lights.bat-Admin.lnk"); end 8. Open the layout.xml for the corresponding Unified Remote and add: &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;layout&gt; &lt;row&gt; &lt;button text="Computer Lights Toggle" ontap="ComputerLightsToggle" /&gt; &lt;/row&gt; &lt;/layout&gt; 9. Reload your remotes using the Unified Remote server. 
\[SOLUTION\]([https://www.reddit.com/r/lua/comments/95nsxb/unified\_remote\_how\_do\_i\_run\_a\_python\_script\_with/e3v2lum](https://www.reddit.com/r/lua/comments/95nsxb/unified_remote_how_do_i_run_a_python_script_with/e3v2lum))
I thought I had seen this question before, and I was [correct](https://stackoverflow.com/questions/51774782/is-there-a-way-to-run-lua-scripts-in-google-app-engine-python) :)
Thank you so much!
Would have to see more code. Try linking a pastebin?
I would think you want self.setReload(false) self:setReload(false) calls setReload(self, false) https://www.lua.org/pil/5.html
No that doesn't do it. The variable is not returning nil or anything. It's always returns false.
This is being called from a clientside file cl_hud as I want to display reloading information on the HUD. I do have a local server set up so I'll try it out.
Try: `var1 = getCurrentTime()` `21-29` `var2 = getCurrentTime()` The compare var1 and var2. This seems to work for me using Lua's built in os.time() and comparing with os.difftime(). 
No, this is not how Lua works. But what does getCurrentTime() return?
BTW: If you forgot the () on getCurrentTime you'll get the observed result.. If getCurrentTime returns a global table you'll also get the observed result.. Show us the source for getCurrentTime :) 
Ahhh, a global table. That must be it. getCurrentTime was just an example I'm using because this is in a Minecraft mod called ComputerCraft, and the actual function (getAllStacks) is a method included with the mod. It returns a list of all items in the drawer controller that I'm calling it from.
Pretty sure you're doing this correctly. self:setReload(false) does call self.setReload(self, false), which is what you want. 
You can call .unpack for a shallow copy. This is problematic however as only value types will be distinct. All reference types in the old table and the new will link to the same recourses.
There several method depending on your need, check this: [https://stackoverflow.com/questions/27139298/lua-perfect-clone-function-why-not](https://stackoverflow.com/questions/27139298/lua-perfect-clone-function-why-not)
Well I don’t know if you play any games but Minecraft has a popular mod called ComputerCraft that lets you use lua to interact with the game world, this is a very easy way lots of people learn the language. 
My first go at Lua was with CodeRunner. I still use it as a code playground while working on bigger projects. For quick try-feedback loops, Corona Labs Lua is as close to generic Lua use that can result in some visible results quickly.
Oh, that's really cool! Yeah, I do have a minecraft account somewhere, I'll check it out, thank you!
I tried to use CodeRunner at one point before and it didn't really help me at all really but having a quick glance at Corona it looks like it could be a great help, thank you!
A lot of games use Lua in their scripting/modding systems so just fiddling with those would definitely help. Alternatively you can just try to use it as a utility tool (like bash scripts), to do tasks like batch operations on files, scraping sites etc
Great, thanks for the advice.
As you already know how to program, check out https://learnxinyminutes.com/docs/lua/ I found [Programming in Lua](https://www.lua.org/pil/) pretty helpful as well. 
Great, thanks for your help.
You could download LÖVE and [learn how to make a computer game](http://sheepolution.com/learn/book/contents). (Or [PICO-8](https://www.lexaloffle.com/pico-8.php), but it costs $15.)
Great, thank you!
And if you have any questions, if you’d allow me to answer them, you can DM me.
That’s very nice of you, thank you!
Np, it’s fun to help people. Also; I’ve got plenty of experience with both Love2d and ComputerCraft.
Ah, computercraft help could come in use at some point, thanks!
Sorry for the self-plug but I'm working on a beginner-friendly resource for learning lua and programming in general. I've only on the 2nd chapter but much of the basics is covered in chapter 1: https://github.com/RVAGameJams/learn2love It uses LOVE as a tool for learning like a previous guide mentioned but will eventually delve into higher level topics like objected oriented and functional programming in later chapters.
https://www.lua.org/manual/5.3/
A lot of wikis use Lua via the Scribunto extension. If you use/contribute to any wiki you could try adding some modules to one, there's a pretty low floor to getting involved unless the wiki in question has a huge code base in Lua already.
No, it’s fine; I’ll take a look! Thanks for your help
Thank you! I’ll give it a read
Read all 4 Parts of [http://ebens.me/2012/08/27/lua-for-programmers-part-1/](http://ebens.me/2012/08/27/lua-for-programmers-part-1/). After that, I'd recommend [http://lua-users.org/wiki/StringLibraryTutorial](http://lua-users.org/wiki/StringLibraryTutorial) [http://lua-users.org/wiki/PatternsTutorial](http://lua-users.org/wiki/PatternsTutorial) [http://lua-users.org/wiki/TablesTutorial](http://lua-users.org/wiki/TablesTutorial)
Ah, great, thank you!
I'm in the middle of a playthrough with computercraft right now, and it really is one one of the most rewarding things you can do in lua (setting aside things that earn you money :P). It's a great way to learn Lua or programming in general and is always the first thing I recommend to people who are interested, specially if they already play minecraft.
Depends on what your interests are. For web there's [openresty](//openresty.org) and [lapis](//leafo.net/lapis). You can also use [Fengari](//fengari.io) to run lua in the browser for front end stuff. For game development you have [löve](//love2d.org) and lots of others If you're into minecraft, [computercraft](//computercraft.info) is a great way to learn stuff, though I recommend also getting [OpenPeripheral](//openmods.info/) to add some more depth. If you care about performance you can also look into [LuaJIT](//luajit.org/) and its FFI or even [Terra-Lua](http://terralang.org) which allows you to use Lua to meta-program low-level code and even make use of GPUs to compute your data.
Ah, that’s quite helpful; thank you!
When the timer is called is that 2nd arg function still refrencing self? And if so is the timer a metatable that is also refured to as self? If so seems like your setting the variable to nil on the timer not your other object.
How should i get the file size, i'm trying to use file:seek("end") but it's not working?
I seem to have fixed that problem but now i have another one. local file = assert(io.open(dir, "rb")) local resp = {} local body,code,headers,status = http.request{ url = "http://localhost:8080", method = "POST", headers = { ["Content-Type"] = "application/x-www-form-urlencoded", ["Content-Length"] = file:seek("end") --Get filesize }, source = ltn12.source.file(io.open(dir,"rb")), sink = ltn12.sink.table(resp) } file:close() --- I would like to avoid using the io.open function twice?
 local iod = io.open(dir, "rb") local file = assert(iod) local resp = {} local body,code,headers,status = http.request{ url = "http://localhost:8080", method = "POST", headers = { ["Content-Type"] = "application/x-www-form-urlencoded", ["Content-Length"] = file:seek("end") --Get filesize }, source = ltn12.source.file(iod), sink = ltn12.sink.table(resp) } file:close() That should work
The issue has been resolved. The reload function was predicted in singleplayer. Because of that the variable was never set to true.
An example: [https://github.com/tboox/tbox/blob/master/src/tbox/xmake.lua](https://github.com/tboox/tbox/blob/master/src/tbox/xmake.lua)
Pretty cool to see another Lua buildsystem our there. There’s also aite which I made: https://github.com/rweichler/aite What I like about aite is the pure-LuaJIT minimal codebase so it doesn’t require installing anything other than LuaJIT The API is pretty hands-off as well so you can use whatever paradigm you want basically Here’s a few examples of it in use: https://github.com/rweichler/cylinder https://github.com/rweichler/jjjj-core
Looks nice :)
If you're using Luajit this won't work without disabling jit. 
Is there some way to achieve this in LuaJIT (without disabling jit, because that would defeat (most of) the point)?
Not really, you can just disable jit line before you execute sandboxed part and reenable it immediately after tho. Obviously hooks like that aren't performance friendly so any crucial code shouldn't be wrapped like that.
Even with disabled JIT, the LuaJIT interpreter is still faster than normal Lua. You can see the difference here: http://luajit.org/performance_x86.html
There are a few other things you might look our for: Even if you limit cycles, users might still call expensive functions like `string.rep("", 1000000000)` or functions you provide. And of course you have to limit memory. With plain Lua that's possible by providing your own allocator. I think there are some limitations for that with LuaJIT, but I can't remember. Finally you have to ensure that you don't allow precompiled code, as such code isn't validates. Checking for the first byte in the provided user code is enough (`local is_bytecode = string.byte(code, 1) == 27`)
You say you have some knowledge of python, which is pretty similar to lua, I'd recommend taking a look at the www.learnxinyminutes.com/docs/lua page and then you could get the boon Programming in lua - well that's what i did and am pretty happy right now. 
I don't think that this works if any of the executed code was loaded before jit.off().
There is already a compile time flag LUAJIT_ENABLE_CHECKHOOK to make JIT'ed code check for active hooks at the start of a compiled trace and each iteration of a compiled loop.
&gt; LUAJIT_ENABLE_CHECKHOOK Bless you kind stranger!
Not aware of any shorthand for that. What do you expect `print(next(t), 'test')` to print? From the [manual](https://www.lua.org/pil/5.1.html): &gt;Lua always adjusts the number of results from a function to the circumstances of the call. When we call a function as a statement, Lua discards all of its results. When we use a call as an expression, Lua keeps only the first result. We get all results only when the call is the last (or the only) expression in a list of expressions. These lists appear in four constructions in Lua: multiple assignment, arguments to function calls, table constructors, and **return** statements.
next(t) would print the first key,value pair it finds. since this table uses only numbers keys I would expect it to print index 1, value “a”, ie in the same order as ipairs 
To be clear, this is how next() works, you just can't shortcut it with the or operator. What exactly are you trying to do (big picture) anyway? Loop through an array infinitely? There are probably cleaner ways to do that. Here's how next() works and what the or operator is doing t = {'a', 'b', 'c'} k,v = next(t,2) print(k,v) --prints 3, 'c' t = {'a', 'b', 'c'} k,v = next(t,2) or next(t) print(k,v) --prints 3, nil because the or operator only compares and returns the first value returned from next()
What exactly are you trying to do? \`next\` does \*\*not\*\* iterate over the table in any particular order. It could happen that it goes 2 =&gt; 1 =&gt; 3 for the table you listed. Are you trying to just "increment" and wrapping around from 1 =&gt; 2 =&gt; 3 =&gt; 1 =&gt; 2 =&gt; 3 =&gt; ...? If so, you can use \`i % #t + 1\`.
If you just do (in your module file) someTable = {} -- stuff then yes, just requiring it will make the table accessible since you declare it as a global. But this is bad, you don't want to math stuff into someones global scope like that. If you instead do local someTable = {} -- stuff return someTable Then you can control what you do with the required module directly, e.g. local myNameForThis = require 'module' This way not only you won't overwrite my someTable I could've created, I can access it from my variable name and I control its lifetime too. Or I can even not sign it to anything and do stuff like require('module').runStuff() having it do what I need without any side effects. 
Using global values "pollutes" the global environment of Lua, and having global tables wouldn't work for submodules.
And you don't even have to return a table either. It can be whatever you want. I can make a file: local cache = {1} local function fib(n) if cache[n] then return cache[n] end if n&lt;=0 then return 0 else local x = fib(n-1)+fib(n-2) cache[n] = x end end return fib And use it as a module: fibonacci = require"fib.lua" print(fibonacci(24)) -- should print 46368 The point is the module is self-contained and what you return from `require` is how the rest of the world interacts with the module. The most sensible way to do this is with a table. Now if the module doesn't need to be a standalone library and is being used for your own application for organizational purposes, then you're fine letting it write to globals. In that case you as the module writer own the global namespace and can do what you want with it. Modules that are distributed as libraries can't presume that they have any say on what gets to be in `_G`.
You know, for certain, that there are no global namespace collisions.
I've been working on a similar thing. Mainly intended to be used as base images for testing. https://gitlab.com/daurnimator/docker-hererocks/container_registry I should make smaller alpine versions The trouble is that a good luarocks base image includes basic development tools (e.g. a C compiler, make), while you don't really want that for a production image.
But the nice thing is that you need most of those tools only for building. So you can have a final step which uninstalls the dependencies after building lua and luarocks.
Doe's lua link well agains musl? (as I remember alpine is using it)
Does `MySQL.Async.fetchAll` call the callback for each row? It looks like it returns an array of rows and you're just picking out the first row rather than looping over them? 
Which version of Lua are you using to produce the bytecode?
I'm not sure, the game came with both the source and compiled version, I'm wanting to make changes to the source, and overwrite the compiled one, apologies for ignorance, I have never touched this before.
 hexdump -C gameplay_01_haven_start.lc | head 00000000 1b 4c 75 61 51 00 01 04 04 04 08 00 1d 00 00 00 |.LuaQ...........| 00000010 40 67 61 6d 65 70 6c 61 79 5f 30 31 5f 68 61 76 |@gameplay_01_hav| 00000020 65 6e 5f 73 74 61 72 74 2e 6c 75 61 00 00 00 00 |en_start.lua....| 00000030 00 00 00 00 00 00 00 02 07 11 01 00 00 05 00 00 |................| 00000040 00 41 40 00 00 1c 40 00 01 05 80 00 00 45 c0 00 |.A@...@......E..| 00000050 00 82 00 00 00 1c 40 80 01 05 80 00 00 45 00 01 |......@......E..| 00000060 00 82 00 00 00 1c 40 80 01 05 80 00 00 45 40 01 |......@......E@.| 00000070 00 82 00 00 00 1c 40 80 01 05 80 01 00 1c 40 80 |......@.......@.| 00000080 00 05 c0 01 00 45 00 02 00 1c 40 00 01 05 c0 01 |.....E....@.....| 00000090 00 45 40 02 00 1c 40 00 01 05 80 02 00 45 c0 02 |.E@...@......E..| The 5th byte is 51, so this was compiled by some sort of Lua 5.1 bytecode compiler. However, I was unable to list the bytecode using either Lua 5.1 or luajit 5.1.. so perhaps they've made some changes to make this more difficult.
I just realised, that is the source one i compiled to .luac then changed the extension of in the hopes that the game would read it, here is the original from the game: https://drive.google.com/open?id=1AFv-QFWX9NfnsTc_T5rZBOIl3PIPxczW sorry about that, you will see itsheader is a bit different.
Resistance 3
I have no idea what they used.. it could even be eLua, and the CPU endianness probably comes into play. Best of luck with this, sounds difficult.
Damn, thanks anyway man :)
Ping me on Friday if you don’t figure it out, and I would be glad to take a look. I’ve written a few things for Lua bytecode analysis.
Change the “.lua” to “.lc”. 😎
...im dumb enough to have already tried that lol
I believe they used [Helium](https://github.com/euler0/Helium) for that game. Maybe look into that to see what kind of compiler might be linked in... But you are probably look at 32bit of some sort at the very least.
Thanks, must be 32bit cause PS3 is, i will check it out
Thanks, i will see what i can do tonight :)
Nope, had to add a bunch of deps, e.g. libc-dev.
Doesn't look like there's anything special here, actually. It's just normal Lua 5.1 bytecode. Perhaps you're using Lua compiled for a 32 bit OS? I might be missing something though, but it seems to be just like the bytecode that Lua 5.1 (x64) generates for me: https://i.imgur.com/4AJpOTE.png
But PS3 is a 32bit system, does that not mean it would need to be 32bit lua?
https://www.lua.org/pil/16.html
`self`, in Lua and in Python, refers to the object calling the function. If you have an `Account`, let's say `savings`, and call `savings:deposit(350)`, then within the `Account:deposit()` function, `self` is then referring to `savings`. In another call, `checking:deposit(600)`, `self` is referring to `checking`. It's worth mentioning, `self` is being passed in as a parameter. The `Obj:method(...)` syntax is shorthand for `Obj.method(Obj, ...)`. With the longer syntax, `self` can be called whatever you want, but `self` is automatically used in shorthand (and always should be, really). `self` is a parameter for "classes" in Lua and Python because both languages have incomplete OOP support. If you're familiar with stricter languages like Java and C#, they have the `this` keyword instead of `self`, and it need not be a parameter. It need not even be used, because fields and methods exist in the same scope -- but this isn't the case in Lua, so `self` is always required to access an object's data. You don't find much Lua documentation on classes because Lua doesn't actually support them, although Lua does make them easy to emulate. Lua "classes" are just tables. You'll see above that `Account` is a table; this single table is the class. Then each new "Account" object is a fresh table, whose metatable is pointed to the `Account` class.
`tableName:functionName(argument)` is just syntactic sugar for `tableName.functionName(self, argument)` where `self == tableName`. And `__index` meta-method is just the function thats called when a table look up fails. Altogether what `Account:new(o)` is set `o` equal to `{}` if `o == nil` and then set `o`'s meta-table to `self` and then setting the `__index` meta-method equal to `self` (which is `o`'s meta-table). Lastly we return o. Now when a table lookup fails it will look in `self (`o`'s meta-table). In the simplest case where you call `Account:new` you will get an empty table, that when queried returns the corresponding key from `Account`
I don't know if this works for you but have you tried TouchLua?
Hi, I tried TouchLua too and it gives me the same message. But I can see that app supports folders so I’ll do some more digging there. Thanks
Wow, you're fast :)
It bodes well that speed impresses you, as I’ve just tried to place a ‘socket.Lua’ module into a folder with the code I was running but still get an error. So I’m drawing a blank now.. :(
Codea - It's iPad only right now, but they have an iPhone build you can get on the beta for in their forums!
Ah sorry i forgot to update you on that, let me know if you need any other files, i have all of them, thanks so much for your help
Reddit Chat'd. Easiest option here is to run a big endian architecture inside a VM and download Lua on that. Set lua_Number to be a `float` instead of a `double`. Compile Lua, then run luac file-you-want-compiled.lua on it. It should run. 
Emm so yeah, i changed the .luac to .lc which didnt work, changing the .lua to .lc worked... so wow lol thanks :)
Wait what
The game runs souce lua as long it has .lc extension xD
jailbreak your phone install cylinder and EQE both have lua stuff
 #### MySQL.Sync.fetchAll(string query, array params) : object[] Fetch results from MySQL and returns them in the form of an Array of Objects: ```lua local players = MySQL.Sync.fetchAll('SELECT id, name FROM player') print(players[1].id) ```
Thanks a lot for this, sockets is the main one I think, I’m still new to programming and lua specifically, but the code I’ve been testing with requires socket , so if it’s there then that’s good. I guess I now have to just way up the cost, especially when I do everything currently in Textastic.
You can do remote coding: https://twolivesleft.com/Codea/AirCode/
You have amazing creative potential.
Truly amazing :P
Can someone please explain what that does?
I just get an error, 'attempt to compare nil in line 2'
That is literally identical to just running check. When pairs returns two values, since it's called like a function, only the first is used, all later ones are discarded, then it just runs check on s like normal.
In Lua, binary data is usually encoded as a normal string. Unlike in C, this works without problems as Lua strings aren't 0-terminated. It shouldn't be much of a problem to keep track of your padding that way, as the length of a string is not only its length in characters, but also its length in bytes, and you can convert between numeric values and string representations using [`string.byte()`](https://www.lua.org/manual/5.1/manual.html#pdf-string.byte) and [`string.char()`](https://www.lua.org/manual/5.1/manual.html#pdf-string.char). If your networking library takes care of converting the data to hex for you, I really recommend just making use of that instead, and doing all your other magic on the binary string. If you have any trouble with that feel free to come back and ask more questions :) BTW: most of the questions here seem to be from people who are either new to Lua or completely new to programming, and I don't think people care at all about how silly they may get (And trust me, people have asked some pretty weird questions)
So youre saying its pointless?
Im mocking the for loop pairs() function ironically Basically it outputs what you already have, just in an unnecessary function
Seems, that's my way, because I didn't find any useful Lua-wrappers for LinkedIn API
Thank you for this mate, and thank you for being welcoming. I did try to expand on this without much luck. Having said that, [the code I came up with](https://gist.github.com/verycollective/d9b76cd203dcab15985d044abc4eaa3d) is working but not at all easy to work with. t the moment the working code does something like String -&gt; hex string -&gt; hex table -&gt; binary string I thought that reusing the existing code i would be able to make a binary string to start with, that wasnt the case. I have also assumed that something like would give me a byte string -- packet header is string type { string.byte(packet_header, 1, -1) } again, not the case. At this time I feel that I might just be confused on what to call things, bottom line I need to create a datagrams containing some strings and float (or) int, all padded to 32 bits. Maybe my approach is all wrong? 
If you are using Lua 5.3, look into using the string.pack() and string.unpack() functions. 
This is AutoHotKey stuff, and the Lua all looks valid-ish, so I can't say much there. However, how do you know the text file isn't being written to? It looks like bytes, not a representation, are being written, and those bytes may be in the non-printing range.
Try writing key:byte() instead of key().
 print &amp;#x200B;
|||| |:-| ||||
Try this one. https://discord.gg/e89EpV
In the end, it really depends on what you want to send. `string.pack` is nice when you have a predefined data format, like with a protocol header, where you know you have, n bytes for version, m bytes for length, etc. `string.byte` and `string.char` are useful for when you just have a series of bytes that you want to encode as a string. For example, let's say I have a function `fun` that returns a series of bytes (nobody knows how many) and we want to encode them as a string, then we could use `string.char(fun())`. The string returned wouldn't contain text, but binary data, and when printed would make about as much sense as an `.exe` file when you open it in a text editor.
https://www.floating-point-gui.de/
No issue here (lua 5.3): local res = 14 / 16 print("" .. res) print("" .. res * 2) -- Output: -- 0.875 -- 1.75 https://www.lua.org/cgi-bin/demo 
Try switching either your numerator or denominator to be a float, like `14.0`. Then do some digging into integer division (div) versus floating point division, and why 28/16 is being truncated.
&gt; ofc it would be for free sorry mate no deal
The print function I am using must be a wrapper of some kind, that is representing floats as ints after some rounding. Thanks,
/r/choosingbeggars
No one will be interested in making free scripts for you, only for you to then try and profit off their work. There are a bunch of tutorials on YouTube to teach you the basics of making FiveM scripts - better yourself by learning the language your server is made in, it will work out better for you in the long run.
It does? This is the first time in all my years of programming that I encountered this question. Is this even possible in any other language? A function can detect whether it's on the right hand side of an assignment versus being called alone? I don't quite believe it.
To add to what the other guy said: aside from not really being possible, you shouldn't *want* to do this in the first place. It's better to be explicit and single-purpose with your functions rather than have one function do different things depending on context. Just make separate `createTween()` and `createAndAssignTween()` functions.
Ahh, OK. Thanks All!
ah gotcha. cheers!
&gt; It does? This is the first time in all my years of programming that I encountered this question. [Here's where someone asked how to do precisely the same thing a few months ago.](https://www.reddit.com/r/lua/comments/8hsvsb/is_there_a_way_to_determine_whether_a_function/) It's not quite the same, but I also remembered a [similar question about changing a script's behaviour based on its caller.](https://www.reddit.com/r/lua/comments/5jpqxw/is_there_a_way_to_detect_if_a_script_was_called/) I think this sort of thing comes up because of Lua's popularity as an embedded language. You get an idea but run head-first into limitations caused by design decisions made by the developers that embedded Lua into their game|software|whatever, so you have to try to make your your code work with (or work around) a bunch of moving parts that you have little or no control over using whatever weird hacks and kludges you can, no matter how nasty they might be. In situations like that, things that are normally *really* terrible ideas, or are just too fragile to rely on in normal code, end up being your only recourse. Like the saying goes, "if it's stupid but it works, it isn't stupid." That said, I still think the OP's desired approach is extremely misguided. Trying to be user-friendly via "magic" like that is a guaranteed way to end up writing code that's extremely **un**friendly and will surely bite someone in the ass later. Some ideas on alternatives: 1. Have two separate functions, like you already suggested. You could have `newTween()` return a tween for the purpose of `foo = newTween()` assignment, and then a `tween()` wrapper function that basically just does `table.insert(_TWEEN,newTween())`. Separates functionality and reuses code instead of duplicating it that way. 2. If `tween()` normally takes no arguments, you could make it accept an optional argument that indicates it's being used for assignment. e.g. `function tween (x) if x then return newTween() else table.insert(_TWEEN,newTween()) end end`, so that you can either call `tween()` or `foo = tween(1)`. I'm not a fan of this because it's a huge "fuck you!" to [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency), but it *does* work. 3. Similar to 2, you could allow calling `tween` with an optional table argument, abusing the fact that tables are passed by reference. Like so: function tween (t) if type(t) == "table" then table.insert(t,"foo!") else table.insert(_TWEEN,"bar!") end end Doing this, if you have a table, `x`, then calling `tween(x)` will append a new index to the end of `x` with a value of "foo!", but calling `tween()` (or any attempt to call it with a non-table argument) will instead append "bar!" to `_TWEEN` instead. If you prefer pure functions and avoiding side effects where possible, like I do, this is just as gross as #2, but at least it's consistent and explicit in behaviour, instead of trying to automagically decide what the user wants. I'm a fan of functional programming style, so #1 is my obvious choice, but I presented the other options for completeness rather than pushing my own biases onto others. I'd prefer if good sense prevails, sure, but I understand that getting shit done sometimes requires sacrifices to good taste.
Lots of good answers explaining why it's not possible, so I won't go into detail on that. Another option you could go with though: &amp;#x200B; myTween = tween() tween():register() &amp;#x200B; Simply add a \`register\` method to tween that you can call to add it to the \`\_TWEEN\` table. It looks very similar to what you want, but it expresses the intent of the programmer way better, at the cost of only a few key strokes. If you want to make it even more explicit, you could even pass \`\_TWEEN\` as an argument to register, or you could allow for an optional argument and have \`\_TWEEN\` be the default. Possibilities are endless.
Nope. In Lua, division is always floating point division. There's a separate `//` operator for floor division, but that's because Lua 5.3 introduced integers, so it's not even relevant to any previous version of Lua. Either way, conceptually in Lua there's no integers or floats, just "numbers", so it makes sense that integers are just silently converted to floats without the programmer having to put much thought into it.
That's probably not the reason, as you concatenate the number with a string before printing it. If anything, the problem could happen during the string concatenation `..`, which probably calls `tostring()` on the number first. Try outputting `tostring(1/2)` and see if it prints 0.5 or 0
Tell us more about the environment. What version of Lua is it? Who compiled it and how? In plain Lua 5.3 this should work as expected, so I assume you're probably on some other platform or another Lua implementation? I'd say it's most likely a formatting problem, because if result really was 0, result * 2 wouldn't evaluate to 1, so internally Lua knows it's not 0. Try `string.format()` to format it as a float and see what happens.
It was easy enough to do, since the recent one wasn't too far back, and the other one, I remembered responding to so I was able to search for comments I posted here. Also, that's really weird; that comment was written as a reply to /u/Novemberisms, not you. Even showed correctly when I submitted it. I have no idea what the hell Reddit did to attach it to you. 
Nice and tidy
`self.setJob = function(name, grade)` &amp;#x200B; `local lastJob = json.decode(json.encode(self.job))` `local MyGrade = grade` `MySQL.Async.fetchAll(` `'SELECT * FROM whitelist WHERE identifier = @id2',` `{` `['@id2'] = self.identifier` `},` `function(result2)` `if(result2[1].name == name) then` `GradeToUse = result2[1].rank` `else` `GradeToUse = 0` `end` `end` `)` `MySQL.Async.fetchAll(` `'SELECT * FROM \`jobs\` WHERE \`name\` = @name',` `{` `['@name'] = name` `},` `function(result)` &amp;#x200B; `self.job['id'] = result[1].id` `self.job['name'] = result[1].name` `self.job['label'] = result[1].label` &amp;#x200B; `MySQL.Async.fetchAll(` `'SELECT * FROM \`job_grades\` WHERE \`job_name\` = @job_name AND \`grade\` = @grade',` `{` `['@job_name'] = name,` `['@grade'] = GradeToUse` `},` `function(result)` &amp;#x200B; `self.job['grade'] = GradeToUse` `self.job['grade_name'] = result[1].name` `self.job['grade_label'] = result[1].label` `self.job['grade_salary'] = result[1].salary` &amp;#x200B; `self.job['skin_male'] = nil` `self.job['skin_female'] = nil` &amp;#x200B; `if result[1].skin_male ~= nil then` `self.job['skin_male'] = json.decode(result[1].skin_male)` `end` &amp;#x200B; `if result[1].skin_female ~= nil then` `self.job['skin_female'] = json.decode(result[1].skin_female)` `end` &amp;#x200B; `TriggerEvent("esx:setJob", self.source, self.job, lastJob)` `TriggerClientEvent("esx:setJob", self.source, self.job)` &amp;#x200B; `end` `)` &amp;#x200B; `end` `)` &amp;#x200B; `end`
 self.setJob = function(name, grade) local lastJob = json.decode(json.encode(self.job)) local MyGrade = grade MySQL.Async.fetchAll( 'SELECT * FROM whitelist WHERE identifier = @id2', { ['@id2'] = self.identifier }, function(result2) if(result2[1].name == name) then GradeToUse = result2[1].rank else GradeToUse = 0 end end ) MySQL.Async.fetchAll( 'SELECT * FROM `jobs` WHERE `name` = @name', { ['@name'] = name }, function(result) self.job['id'] = result[1].id self.job['name'] = result[1].name self.job['label'] = result[1].label MySQL.Async.fetchAll( 'SELECT * FROM `job_grades` WHERE `job_name` = @job_name AND `grade` = @grade', { ['@job_name'] = name, ['@grade'] = GradeToUse }, function(result) self.job['grade'] = GradeToUse self.job['grade_name'] = result[1].name self.job['grade_label'] = result[1].label self.job['grade_salary'] = result[1].salary self.job['skin_male'] = nil self.job['skin_female'] = nil if result[1].skin_male ~= nil then self.job['skin_male'] = json.decode(result[1].skin_male) end if result[1].skin_female ~= nil then self.job['skin_female'] = json.decode(result[1].skin_female) end TriggerEvent("esx:setJob", self.source, self.job, lastJob) TriggerClientEvent("esx:setJob", self.source, self.job) end ) end ) end &amp;#x200B;
I like this. I like it a lot. Register would do exactly what you’d expect it to. Thanks! ((Regarding the idea of passing it a table, that’s a good idea. I toyed with the idea of making a handler constructor instead but never got around to it when I had my awful terrible wonderful idea that I posted here I probably wouldn’t want to just start inserting tweens into my target table, because someone might do something like this T = {1,34,97, lol=“200”} X = tween() X:register(T) Since I don’t know if it’s got crap in it already. probably safest bet is to use or make a tweens table inside the target, and maybe add an tween_update function to the target table Tween.register(tween, target) if not target then table.insert(__TWEEN, tween) elseif target.tweens then table.insert(target.tweens, tween) elseif getmetatable(target)==handler_mt then -- maybe they are inserting directly into target.tweens. One can only hope. table.insert(target, tween) else target.tweens = setmetatable({tween}, tween_handler_mt) end end 
Rip me. This is why I cant learn how to code. I can't even write. What i meant was that you will me payed. GG me...
Typo! i meant that you will be payed!
Ah - in that case you may get some interest, but I still highly recommend learning the language yourself. It's a lot easier and practical than you think. The FiveM development community is quite large and for the most part isn't overly toxic; so if you get stuck, they'd no doubt help.
Paid*
A different was to think of modules: We have a % n = r, where r is the remainder. Lua always uses the sign of n to determine the sign of r. We add another value f: where f is an integer where f * n &lt;= a, but is still the closest value to a when n &gt; 0 (If a and n are both positive, then f would be the integer result of a / n) Then a - fn = r Thus 17 % 5 -&gt; 17 - (3)5 -&gt; 17 - 15 = 2 -149 % 12 -&gt; -149 - (-13)12 -&gt; -149 - (-156) = 7 If n &lt; 0 then f * n &gt;= a -6 % -4 -&gt; -6 - (1)(-4) -&gt; -6 - (-4) = -2 Also 120 % -7 -&gt; 120 - (-18)(-7) -&gt; 120 - 126 = -6
There is a difference between modulus and remainder. Lua uses remainder.
Ahh, so languages use different math for % and maybe other operators maybe? 
lua_Number is set as an integer, presumably. You can validate by posting a bytecode dump of an empty function here.
That "light bulb switched on" moment. :)
Yeah! Absolutely! Being able to fill any knowledge gap with a click of a button and help from a stranger is so awesome.. :) Hopefully when I know a little more, I can help others in return. :D
feelsbadman.jpg
feelsbadman.jpg
I'm not entirely sure about this. Lua has been compiled for smaller than 32bits architectures, but I'm not sure it was without further modifications or even that it was lua 5.3. You should try sending your question to the lua mailing list, I bet someone there will have better answers.
&gt;No, I don't think this is possible. The int size is bound the architecture size. Right, `int` is. But `LUA_INTEGER`is a `#define`. It has presets for 32-bit and 64-bit but not 16-bit. I just want to use the `unsigned short`/`uint16_t` type instead of the `int` type. &gt;If you do only number-crunching better stick to C (or partly C). I already am, I'm trying to create simple Lua interface for [Mode 7](https://en.wikipedia.org/wiki/Mode_7), hence why I want to do calculations with 16-bit numbers.
**Mode 7** Mode 7 is a graphics mode on the Super NES video game console that allows a background layer to be rotated and scaled on a scanline-by-scanline basis to create many different effects. The most famous of these effects is the application of a perspective effect on a background layer by scaling and rotating the background layer in this manner. This transforms the background layer into a two-dimensional horizontal texture-mapped plane that trades height for depth. Thus, an impression of three-dimensional graphics is achieved. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/lua/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Back in the days we had Lua running without issues on 16 bit systems. &amp;#x200B; Have you set [LUAI\_BITSINT](https://www.lua.org/source/5.3/luaconf.h.html#LUAI_BITSINT) to 16?
To be clear, the host platform is not 16-bit. I'm trying to interact with an emulated SNES, which uses 16-bit fixed-point. I've tried `#define LUAI_BITSINT 16` but it gives me a segmentation fault on my program startup so I assume it's for 16-bit host systems.
&gt; without either compilation errors or, more commonly, "illegal hardware instruction" and "segmentation fault" errors upon running my program The typedefs in `stdin.h` such as `uint16_t` are setup so that either the hardware supports them and you can compile or the hardware doesn't support them and you get compiler errors. Raw integer types in C such as `short` are effectively hardware dependent. There is no guarantee a `short` will provide exactly 16 bit integers. However, I suspect you are running into neither of these gotchas. If you take a look at the Lua reference manual, it explicitly states that integers are either 64 bit by default or optionally 32 bit via source code changes (4th paragraph): https://www.lua.org/manual/5.3/manual.html#2.1 &gt; I'm working with 16-bit fixed point math and want to handle the numbers their native format Why are you trying to change the bit width of the integer type? Integers are already fixed point so all you need to do is detect under/over flow at 16 bits instead of the native width? Lua 5.3 now has an integer type instead of the "all numbers are doubles" approach in previous versions. If you insist, you could write a library either in pure Lua (using single character strings for high and low order bytes) or in C then use metatables to make the arithmetic operators call your library as needed. 
If you gave Gmod, DarkRP and TTT servers is a very good way to start learning LUA. You can start out just modifying the addons and later on make your own.
90% of people who "learn Lua" from modding Garry's Mod don't actually know what they're doing and just copy and paste shit
Read the manual on the website. That's the best way.
{CODE BLUE} on YouTube has gmod and lua basic tutorials, that’s how I learned the basics and it really helped. His stuff may be outdated though.
You're absolutely right, but the 10% who don't are ok. Also you could say that about about a lot of people who call themselves programmers yet haven't written more than 10 lines of code
You could say that about programmers, but it wouldn't be 90% of them.
[computercraft.cc](https://computercraft.cc)
Agreed. I forgot that existed.
The Reference Manual is still a great resource though. Compared to other languages, the Lua manual is very short and straight to the point.
Oh, it's amazing. I learn something new every time I read through it.
More specifically the wiki on this site is actually pretty extensive, covering a lot of Lua documentation. Although I'm not sure how well suited it is (format-wise) to teach beginners how to use Lua.
The wiki is but one resource - the forum and discord are also full of knowledgable people.
I am aware of that, but its hard to find anyone.
Because nobody is going to do shit for you unless they get a payment up-front. 
well i am in the process of proving wrong
No, he is right. No one is going to do anything for free, lua is one of the easiest languages you can just go learn it yourself.
Maybe post this to /r/inat? It may be hard to find people considering it's, well, roblox, but if you do a good job of selling the idea and explaining why it's not just another low-effort roblox project then maybe somebody will join.
Important note: Get a firm grasp of the most important Lua versions. That is, Lua 5.3 and 5.1; 5.3 is the latest version and 5.1 is what LuaJIT is based on, though there's a lot of changes between PUC Lua 5.1 (The reference implementation) and LuaJIT, specially in how you write the code and some extras that LuaJIT adds. 5.2 didn't really take off on its own the way 5.1 did, and 5.3 is really just important because it's the latest version. Some systems may run even older versions of Lua, but that's more often the case with embedded systems or outdated software. The important thing to remember: Figure out what version you're developing for and mention it whenever asking for help. "How do I X in Lua 5.1?" instead of just "How do I X in Lua?"
You are meant to read it at 50% with a robotic voice.
try computercraft
The r/roblox forum is better suited for this. The overwhelming majority of the users here are likely adults, hobbiest, college students, or have professional experience. Youre incredibly unlikely to find someone willing to work for free. PS, you can probably go onto your games forums and find resources on this.
why is this getting downvotes?
I'm a pretty big fan of Qt, but, when it comes to stuff like this, I think that I would use regular C/C++ and embed Lua rather than attempt to write the GUI in Lua itself.
You mentioned you know Java, therefore an option could be LuaJ and using swing, or SWT or AWT. It may be an interesting experiment, combining both of the two world.
I've also found [libui](https://github.com/andlabs/libui) , that has quite updated (4 months) [Lua bindings](https://github.com/zhaozg/lui)
I know that I'm not the OP, but that sounds like an extremely interesting idea. I think I'll have to try that some time.
I'm going to downvote you because I learned to program by writing Lua for GarrysMod and I got my first job with basically only that on my resume. I highly recommend learning to program by modding a game, because the feedback loop is so much more intense when 1 hour of development gives you superpowers in a game you love, vs 1 hour of development giving you a number guessing game in a white-on-black terminal.
...you're right, not sure how I missed that. Please pardon me while I take that down vote back...
&gt; I know that I'm not the OP How did you find out? xD
If you are targeting Linux or Windows/Mingw I have [https://github.com/stetre/moonfltk](bindings to FLTK), which is OK for hobby projects.
LuaGnome / lua-gtk I prefer programming the way they show in the last 4 examples: **Pixmap, Iconview, Weather Update, Dictionary Lookup** where you directly call the gtk window and widget functions to build everything. However, they also give you the ability to specify your layout using Glade to generate an XML, then import and build functions in your Lua file, like they do in the **HTTP Request** example.
I've used [iup](http://webserver2.tecgraf.puc-rio.br/iup/) fairly successfully. Don't be put off by the weird URL, iup is integrated into Chicken Scheme as the language-level GUI, and can be found in quite a few little applications. It has first class Lua support. If not that, then looking at your list, I'd go with WxLua and Luajit. That way, if the Lua binding falls down, I can use Luajit's fantastic FFI to grab the part of WxWidgets that I want.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](http://webserver2.tecgraf.puc-rio.br/iup/) - Previous text "iup" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
It is also worth mentioning that IUP is developed at PUC-Rio, the same university as Lua comes from. And one of the original authors of IUP is also one of the Lua authors. So there is a lot of motivation to make IUP have great Lua support. It is also worth mentioning that IUP focuses on native GUI. wxWidgets is the only other on that list that focuses native GUI. (Qt creates/renderers most of their own widgets instead of using the ones provided by the OS.) But IUP is much lighter-weight than all of these. 
While I've only played around with it, [LGI](https://github.com/pavouk/lgi/) looks like a great option if you want to use GTK+ 3. LGI uses GObject-Introspection, which allows for a more elegant library implementation than lua-gtk and makes it easier for LGI to adapt to changes in new versions of GTK. LGI supports GTKBuilder, so you can define your UIs in a graphical program like Glade and/or via XML. I'm pretty sure that Glade doesn't support all advanced GTK widget types, but you can always edit the XML GTKBuilder files transpiled from Glade's XML format if you want those features.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/pavouk/lgi/) - Previous text "LGI" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20e625rko) 
Nice. Have you tried benchmarking this and comparing it to using pure lua tables?
Damn, that sounds like a hard condition to deal with, but I'm really glad to hear you're getting better. Keep fighting, you'll overcome it some day!
Line five in that paste bin weapons = {"weapon_752_dc15a","clone_card_c3","weapon_752_dc17",}, This line is most likely the culprit. At the last curly bracket you can see an empty comma before it. This is throwing an error as Lua does not treat an empty input as a null for table initialization.
Good deal.
I'm a little bit confused, Lua allows trailing commas in table assignment lists just fine. This definitely shouldn't error. On the other hand, snippet OP posted is missing a comma after the "hasLicense = true" element (second from last), most likely forgot to add it after adding the "category" element. And that's definitely a syntax error :) 
Lua actually allows to add an extra `,` or `;` at the end of lists, this is to prevent errors where you add an extra line to a table and it crashes because the previous one had no comma. And guess what, the line above the one OP added has no comma :)
Line 11 needs a comma at the end.
I'm also puzzled by that, but OP says removing the trailing space fixed the problem, so whatever, I've given up on the idea of programming being the slightest bit deterministic years ago.
For clarity, remember that in actual ECS architecture, components are just data that are consumed by systems' logic. Attaching a script to an entity is data, but the script itself is logic. If you want Lua to be able to define components, it's probably worthwhile to mention that those won't be (easily or efficiently) consumable by C++ _unless_ you take a very aspect-oriented approach. That is, define components as multiple aspects, each of which is just an array of data. Your Lua API can be something simple then that defines a component identifier and a list of aspects which, under the hood, are efficient arrays (tables if you're sticking to pure Lua). C++ systems could then bind to components/aspects (they'd just grab a pointer to array data for primitive-type aspects) and go. The reason you'd need to be aspect-oriented is similar to why Java ECS implementations must be; Lua has no concept of a by-value structure/table, and C++ access to a Lua table is inherently inefficient in large quantities (because it's all key-based rather than offset- or pointer-based). Might be worth noting that even in C++, it could be advantageous to make components aspect-oriented since some components might have a lot of aspects and you may want things to be CPU-cache-friendly; that said, an array-of-structs in C++ is still *far* more cache-friendly than a Lua table of Lua tables. That might look something like: # physics_component.lua physics_component = components.define('physics', { mass = types.float, velocity = types.vec3, impulse = types.vec3 }) physics_component .on_serialize = serialize_physics physics_component .on_inspect = inspect_physics Odds are you don't really _need_ C++ systems to consume Lua components though, so Lua components don't really have to be designed to interoperate with much C++ code. The big bit is going to be making sure that you can serialize a whole entity to/from disk and that you can expose an entity's components to your debug UI or editor. That's mostly just registering the right callbacks for a component. If you did want to allow binding Lua to C++ for some reason (I'd advise against it; don't make C++ code have a hard dependency on script contents!) you could then bind with something like: // physics_component_binding.cpp auto physics_component = component_manager-&gt;bind_by_name("physics"); auto physics_aspect_mass = physics_component-&gt;bind_aspect_by_name&lt;float&gt;("mass"); auto physics_aspect_velocity = physics_component-&gt;bind_aspect_by_name&lt;vec3&gt;("velocity"); In terms of scripting, you've got a few options. First, again, you're talking ECS. That architecture is rather antithetical to the idea of attaching random scripts to random entities via components. The whole point of components in ECS architecture is that they're just data, _not logic_, and scripts by definition are logic. That said, it's certainly easy to just make a ScriptComponent that holds a reference to a Lua script and have your ScriptSystem execute the scripts of each component. It just kinda defeats the purpose of using ECS architecture. An alternative then is to instead register scripts as _Systems_ rather than Components, and allow each system to define in the script or accompanying data which components it consumes. Since ECS architecture makes it easy and efficient to have lightweight "tag" components that might exist purpose to register an Entity with a System, you can use these tags to "attach" your scripts to entities if other components don't already serve that purpose. That approach would look a lot like you were writing the ECS framework in Lua itself. # physics_system.lua function physics_worker (data) entities = data.entities transform = data.transform physics = data.physics for id, index in entities physics.velocty[index] = physics.velocty[index] + physics.impulse[index] physics.impulse[index] = vec3.zero transform.position[index] = transform.position[index] + physics.velocity[index] * dt end end physics_system = systems.define('physics', {components.physics, components.transform}, physics_worker) The general idea being that the system just lets the core C++ engine know that there's a Lua script to run as a System, which operated on any entity with the physics and transform components. You'd need to add additional data for _scheduling_ the systems and all that, but that's the gist. Really though, anything works. ECS-based engines have taken so many different approaches here, and they all _work_. Non-ECS-based engines have taken so many different approaches for that matter, too. Ultimately, use whatever you think is going to be easiest to work with and implement. There's pros and cons to every solution and I'm not sure you've got a clear enough target context in which to evaluate those pros/cons for your specific situation (if you do, you didn't share it).
Depending on your need, we at /r/awesomewm have our Wibox toolkit https://awesomewm.org/apidoc/documentation/03-declarative-layout.md.html It doesn't aim at a pure "app" GUI toolkit but rather at custom Linux desktop shells. It /can/ be bashed with an hammer to make desktop apps by rendering it inside a GTK window. However its more a hack than an officially supported feature. GTK itself is also available using the Lua LGI binding. It's for desktop app and works quite well.
Neat. But something you might want to be careful of, is that Lua is HORRIBLE with the use of vectors. This is due to vectors lingering for longer than they really should, and causes the garbage collector to run more often. You'll want to make a pool of these vectors the code will pull from and release when its done with it.
That sounds like a neat way to get bugs in the code. I would consider it if I was dealing with 3D space, but for 2D LuaJIT should be fast enough to deal with that, and it might be possible to play around with the GC parameters to minimize the impact. Maybe disable it and collect garbage one per game cycle? I guess that will require lots of benchmarking before I can know for sure. Thanks for the hint though :)
I think you missed the concern. The concern isn't the speed of the math. The concern is the garbage data that Lua will eventually generate from repeatedly doing math every frame a large number of times. This is something I've encountered from experience, as well as a large number of game developers and scientific researchers. This is a common solution to this problem outside of modding Lua to have a linear algebra type by default.
Note that the ONLY thing you can use that you haven't made or someone has made for you, is mechs. And I'm just talking about geometrical-shapes. I can make detailed small stuff but big stuff. Not at all... Btw, I don't script LUA only PYTHON.
Since you mentioned networking, a few ideas related to that: - **Build a bot.** When I first started programming I wrote a bot for my IRC channel and learned a ton of basics while having fun. It fetched weather from an API when a user typed a postal code and gave them the forecast. Nowadays most people use discord which there is a [library for that](https://github.com/SinisterRectus/Discordia) too. - **Build a webserver/website in Lua.** After building bots I got into building web servers (which I do for a living now). There is a great Lua framework for this called [Sailor](http://www.sailorproject.org/). - **Build a messaging system.** Along with many other great ideas listed, the [awesome-lua](https://github.com/LewisJEllis/awesome-lua) list has a [networking section](https://github.com/LewisJEllis/awesome-lua#network) you can check out for creating a socket connection between two lua applications and sending messages to each other. Really just whatever comes to mind as a fun idea. The motivation to create your idea is what will drive you to learn. If you aren't enjoying what you are building it is easy to want to give up.
Think of some repetitive computer task you need to do often and then build a Lua program to automate it. Having an itch to scratch is a good motivator.
https://projecteuler.net Has hundreds of problems that you can go about writing solutions for.
Interesting project. I would check it out. And thanks for the explanations. I have a question, why do you believe that the CPU load is higher with lua than with JS/node?
Thanks! I'm assuming CPU load is higher because Node's VM (V8) has a great JIT and while Lua's interpreter is amazing, it can't compete on raw performance. I'm not using any major frameworks, though I'm using a variety of rocks. luv, luaposix, etc.
I'm not sure of the specific Lua version you are using, but if it is LuaJIT, it is close, potentially better, than V8. Several of V8's optimizations were inspired by LuaJIT, and if you were to ask a few years ago which JIT engine was better, no JS engine would have stood a chance.
Yes! LuaJIT is amazing. I'd like to use it but I didn't want C stacks allocated for the (many) coroutines that may be in play simultaneously. Unless I'm out of date, LuaJIT does support coroutines without C stacks but in that case JITted functions can't yield. It didn't seem like the right tradeoff, though it's probably worth revisiting at some point.
A few things that can be changed: `deep_replace = function (table, search_for, replacement)` Can be written as `local function deep_replace(table, search_for, replacement)` &amp;#x200B; This line doesn't either do what you want it to: `if table == false then return nil end` It will only end the execution if `table` is actually `false`. If `table` is just missing, it will run regardless. You could replace it with either of these lines: `if not table then return end` `if type(table) ~= "table" then return end` (In neither case do you need to specify that you return `nil`, as that is the default) Now the biggest change that you could make would be to change the table in place. When you pass a table to a function, it is actually passed as a reference. This means that if you edit `table` from within the function, it will edit the one outside as well. This might not be desirable, of course, but if that is what you want, then you could do this: local function deep_replace(table, search_for, replacement) if not table then return end for key, value in pairs(table) do if type(value) == "table" then deep_replace(value, search_for, replacement) else table[key] = value:gsub(search_for, replacement) end end end local my_table = { foo = 'bar', t = { tfoo = 'tbar', tfoot = { ttfoo = 'ttbar' } } } print(my_table.foo) print(my_table.t.tfoot.ttfoo) deep_replace(my_table, 'bar', 'blerg') print(my_table.foo) print(my_table.t.tfoot.ttfoo) [https://repl.it/repls/VastOddStruct](https://repl.it/repls/VastOddStruct)
&gt; This line doesn't either do what you want it to: &gt; &gt; if table == false then return nil end Ah, yes, I know that this line does and within the whole code it makes sense because it is possible due to program logic that the function is called like `deep_replace(false)` under certain circumstances. It has no relevance for the question ... I just forget to remove it from the code before posting it here. You're right about `return nil` though. I'll change that. &gt; Now the biggest change that you could make would be to change the table in place. Good idea, I'll check that, thanks.
it's talking about two inputs, call them A and B. Complement means the inverse, the "not". It just says in words that XOR can be computed by: (A and not(B)) or (not(A) and B) I'd implement an XOR function with more than 2 inputs such that it returned true only when a single input is true. In that case, your lua function could enumerate the arguments and count the number of true values. It would return true only if that count equaled 1, and return false early when the count exceeded 1. This would be a simple procedural way to compute XOR with a variable number of arguments. if you are just getting started with boolean algebra; understand DeMorgan's law: https://en.wikipedia.org/wiki/De_Morgan%27s_laws it sounds complicated but it isn't; programmers use it all the time when constructing if statements! 
Maybe I am wrong, but it seems to me that if a child table has a back reference to a parent table this will blow the stack... i
Yes, this will likely crash the whole software. But fortunately it is impossible that this will happen due to concept. I just wonder if there is a more efficient way to do this.
I cannot say for sure if this is the case on Windows (I don't use it), but on Linux, Lua 5.1 (and LuaJIT) **does not care about text encoding**. Text is just a series of bytes for Lua. So you can use any text encoding you wish and Lua handles it correctly - if you don't mix several encodings in one application. Of course, the string functions in Lua only support 1 byte characters so for example using string.sub() or string.match() on Unicode files is a recipe for disaster. I wrote many Lua apps that use UTF8 extensively, both native Linux apps and webapps (I am Czech, my language has over 40 letters). Never had any problems with encoding (extept that one time I tried to use string.sub() without thinking...). You can definitely use any strings in any encoding as table keys. Again, it's just a sequence of bytes and Lua does not care if it's printable at all.
Why would you want to normalize the folder names? Wouldn't you want to retain access to whatever is there, normalized or not?
Thanks! I'll check out that library in a bit. A follow-up question (or two): If this is purely a Windows console issue, shouldn't running lua from a bash work? AFAIK unix systems use utf8 consistently, but I'm not an expert on the Windows implementation. I tried running the script via the git bash shell (provided by MINGW64), to no effect. I also tried changing the codepage to what Google tells me is the utf8 one (via **chcp 65001** in a batch file) before I created this thread, which also didn't help. --- Okay, so here are the results using winapi... short_path always returns nil, and running the exact sequence in a manual cmd shell shows that the Unicode characters are displayed as squares, while print(x) simply outputs nil. There's also another problem with this approach, even if it worked: I have no need for the files themselves (unless luafilesystem can use them to iterate over the unicode-named directories?), but I do need their actual, full Unicode name to store it in the table (which in itself may be another problem due to said unicode characters).
Yup, the initial problem was that lfs (luafilesystem) can't process those file/folder names, which is a problem with the library. I defaulted to it because I've successfully used in the past. I've been looking at standalone solutions, but something always seems to break with the various special characters that can be contained in those names. So far, I've managed to get the list of items via io.popen and io.lines, but that isn't universal and also doesn't seem to differentiate between files and folders.
I'm not sure I understand what you mean. I don't want to normalize the names, I just want to have a list of them while keeping the unicode characters intact so I can later work with them from inside of another Lua program.
I was under the impression that Apple disallows any non-Apple JIT compilation on iOS.... http://www.janeasystems.com/blog/node-js-meets-ios/
Using `io.popen` with `"dir"` get's a string with &lt;DIR&gt; identifier on the directory lines.
&gt; shows that the Unicode characters are displayed as squares This tells me, that the characters are beyond the UTF-8 characterset, or at least the UTF-16 codepage being used. They aren't able to be decoded. This may be: * The byte-order-mark is being overridden (often happens if you use Notepad for saving files on Windows) * The files use a nonstandard encoding Try saving your file using anything but Notepad. I would recommend Notepad++ on Windows. &gt; If this is purely a Windows console issue, shouldn't running lua from a bash work? git bash does not default to UTF-8, unless you tell it to. It still runs on the default Windows codepage. It can do UTF-8, but you need to [configure it](https://stackoverflow.com/a/36692549). &gt; but I do need their actual, full Unicode name to store it in the table (which in itself may be another problem due to said unicode characters). As soon as you get the terminal encoding correct, then you'll be able to use LFS the way you thought you could originally, then.
Is it possible to mount that Windows disk on a Linux box as a share, then run your LUA script there? Would Linux give you more consistent control over the filesystem as opposed to Windows console?
Honestly, the easiest way would be to use LuaJIT and its FFI. It would work almost exactly like your example.
As a recovering Schemer. I tend to prefer the form that looks like an expression rather a program: function (f) return (function (g) return g(g) end)(function (g) return f(function (...) return g(g)(...) end) end) end Derivation from Gabriel's [*The Why of Y*](http://www.dreamsongs.net/Files/WhyOfY.pdf)
Here's the easy way out (basically cheating :P) &gt;! function(items, counter, result) -- arguments aren't technically variables :P counter = 1 result = {} while counter &lt; #items do result[items[counter]] = counter counter = counter + 1 end return result end !&lt;
Marking this for when I get home
This work? https://hastebin.com/vihusujora.lua
Took me a minute to get what was going on, but when it hit me I was amazed by the idea. I really hadn't thought of storing a new table inside the items table itself. Nice solution :)
Thanks. Here's something a bit more absurd. I wrote it on a phone so I cannot test it, but it should work: https://hastebin.com/yanewogilo.pl Just add to the unpack table length. 
This doesn't exactly mimic the original because it destroys the original table.
Hmmm... That's true, I guess... I'll see if I can do something to avoid that.
you cant do ``local n = #{items}`` right?
Did it but it wrecks item's metatable if it had one. ```lua function(items) setmetatable(items, {["__call"] = function(items2, count) if not items2[count] then return end items2[items2[count]]= count items2(count+1) end}) items(1) return items end```
Yeah, fixed. 
 function (items) function helper(acc, n, car, ...) if not car then return acc end acc[car] = n return helper(acc, n+1, ...) end return helper({}, 1, unpack(items)) end 
Nice job
*Okay, this is technically a correct solution to the challenge, but since it defeats the point, it will not be counted as a correct solution.* You won't be very popular as a prof.
If you already know C or C++, I'd consider finding some itch you want to scratch, and implementing that. For me my first big learning code was writing a backend from lprng to talk to two laser printers. I did a couple of toy problems earlier, but with about 2kloc of C and 2kloc Lua, it gave me plenty of opportunity to beat my head into the walls. I also consider myself still very much learning lua/luajit. I'd say think about real world problems you might want to solve, and try tackling one of those.
&gt; I'd call rawset (or any mutation for that matter) assignment. You wouldn't be very popular as a prof either :P
technically you are using a variable (ca you spot it? :P)
It's really a matter of how you interpret the challenge and how you define a variable. Defining a named function is really just syntactic sugar for assigning an anonymous function to a variable, so a variable is "used". I'd say this solution is half-correct, as is the one I came up with that just cheats its way around the definition by using function arguments as variables.
I wasn't counting function arguments as variables, but if you want to be 100% correct about it, your answer is probably better than mine in that regard.
Thanks!
 local function run(...)return loadstring('return{'..('%s=debug.getinfo(1).currentline,\n'):rep(#...):format(unpack(...))..'}')()end 
I suppose you could use a Z combinator to get around the named function. That gets voluminous fast. Once more with feeling I guess: function (items) return (function (f) return (function (g) return g(g) end)(function (g) return f(function (...) return g(g)(...) end) end) end)(function (helper) return function (acc, n, car,...) if not car then return acc end acc[car] = n return helper(acc, n+1, ...) end end)({}, 1, unpack(items)) end 
It's one way to go. Eliminates an extra closure and helpful for lowering the golf score. But if the concern is variable usage then recall that every global function is a variable. My solution uses only 3 globals (7 keywords, 5 constants, and a table constructor, but who's counting). With the debug library you've added three more table lookups. 
I didn't think of concatenating strings, *but* then you run into object identity issues with the load result. ;-)
This is awesome.
For sufficiently ugly values of awesome. ;-)
Good catch. How's this? _=load"return load('return{'..('[select(2,debug.getlocal(1,-1))[z]]=z,\\n'):rep(#...):gsub('z','debug.getinfo(1).currentline')..'}')(...)" It actually runs!
 function thisIsHard(table) local function littleWing(times) if (times == #table) then return {[table[times]] = times} end return (function(result) result[table[times]] = times return result end)(littleWing(times + 1)) end return littleWing(1) end local result = thisIsHard(items) &amp;#x200B;
This entire challenge is not intended for "production use". Otherwise, I agree with your sentiment, but debug is used every now and then for things like simulating `setfenv()` in lua 5.2+.
I'm fairly certain they're just regular Korean glyphs, which should be part of the Unicode specification. One example would be &gt; 프론테라전집01.txt which seems like it shouldn't cause any problems when the codepage is set to 65001 in the Windows console. The file was saved as UTF8 without BOM. I already use Notepad++ :) git bash says my locale is already using Unicode en_US.UTF-8 yet even after following the SE link it will only print ???s. Very peculiar. Are you sure LFS will work if the terminal issue is resolved? They have an open issue (or several) lamenting the lack of unicode support. I can probably use os-specific APIs such as the io library, but that's not quite what I had in mind.
I'm sure anything is possible, but I didn't want to spend even more time on this seemingly trivial script. It was meant to save me time, after all, so I wouldn't have to manually look through hundreds of files with Korean file names. I managed to get a basic Python script running within 30 minutes (as opposed to several hours tinkering with Lua), but I'd rather integrate a Lua program into what I already have than run a dozen different scripts to do one thing.
Korean glyphs are part of UTF-8, but you do generally need to be in the right locale, otherwise you see ? or similar, but the bytes turn up fine. They'll still store inside a string safely. --- Unfortunately, you have hit an issue, which I hadn't really anticipated. The issue *is* with LFS. I can reliably reproduce it. They *do* have a [fix](https://github.com/keplerproject/luafilesystem/pull/57), but haven't merged it, because it causes breaking changes. Lua still doesn't care what the file is like, but LFS has C at it's core, and on Windows that requires wchar types to be used to capture the glyphs correctly. LFS haven't merged the patch that fixes that. &gt; The only reliable way to pass non-ASCII file and path names to Windows i/o functions is to use the so-called wide_character versions that require/return UTF-16 arguments and which always use the same "number" (or sequence of numbers) to represent the same "character". LFS under Lua 5.3 *may* work, as 5.3 involves some different types in the background, but it seems to be hit or miss. It looks like you'll need to rely on OS-specific libraries for this. Or manage your own patched LFS. (Using the above fix.)
You can use wxLua: wxDir class etc. I did a quick test, it handles unicode filenames. It is a pain though if you happen not to have it already setup on your system. &amp;#x200B; Interesting... seems like most of lua development is done in Linux and Windows is ignored. LFS must not be using \_wfopen and the like on Windows.
`data` is an upvalue that is kept "alive" by every function that accesses it, as long as you can access those functions. Those functions can "see" `data` even if the rest of the code cannot directly access it. This does appear to be the fastest method in these tests.
It isn't erased because Lua's garbage collector knows you reference it: * There is a reference to the `public` table. * That table references the three functions created in `makeob4`. * Those functions reference the [upvalue](http://www.lua.org/manual/5.1/manual.html#2.6) `data`. If you call makeob4 without storing its result, it will all be garbage collected (eventually). If you use LuaJIT, don't worry about the speed. Version 2 (which everyone uses) is 0.1s for all the different tests. 
https://en.wikipedia.org/wiki/Closure_(computer_programming)
Basically, the moment the function `public.getdata()` makes use of `data`, the Lua compiler takes note that it can't erase `data` while `public.getdata()` is around, so it just keeps it. It's an easy to understand concept, but the implication it has for your code can sometimes be quite complex, so I suggest playing around with it for a while to wrap your head around the concept. Look at example code, write your own, change things and see if something breaks, etc.
https://mitpress.mit.edu/sites/default/files/sicp/index.html
Ah yes, it's a recursive rabbit hole for me. :)
They're called closed upvalues, Lua will move them from the stack so that they don't get wiped when the function ends. [https://www.lua.org/source/5.3/lfunc.c.html#luaF\_close](https://www.lua.org/source/5.3/lfunc.c.html#luaF_close) can give you more details, but in short: if an upvalue needs to be saved/closed, the value will be moved to be self-contained in the upvalue itself ([https://www.lua.org/source/5.3/lfunc.h.html#UpVal](https://www.lua.org/source/5.3/lfunc.h.html#UpVal)).
the good part is that you can write `pairs(s)(s)(s)(s)(s)(s)(s)(s)(s)` and it still works
Beautiful stuff. For what it's worth, here's a port of my solution to this function. unpack_all=load(("return load('return '..(('/[z]\\n')..(',/[z]\\n'):rep(#/-1)):gsub('z','debug.getinfo(1).currentline'))(/)"):gsub('/','(select(2,debug.getlocal(1,-1)))')) 
This is a bit hard to parse because you are using select + varrargs instead of named variables. You can still get a similar (but more readable) challenge if you allow names for the function parameters (but still require that function definitions be anonymous). The solution you found of passing the function to itself is an old trick known as a [fixed point combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus) (probably the Z combinator in this case)
Fixed point combinator... I am vaguely aware of that and what it does, mostly the Y-combinator, but I wouldn't say I understand them enough to identify them unless they are written out in lambda notation. I didn't expect to have figured out something new though, easy things like this have always been given a name already, even if you don't know about it :)
The concepts are not mutually exclusive. A language can have both. 
There's a difference between the x86 byte code that runs directly on your CPU and Lua byte code. Interpreting code, be it Lua, JavaScript or Ruby, directly would take a lot of time, for example, in a loop the body of the loop would have to be interpreted for every iteration, which takes a lot of time. Thus most modern scripting language compile to some sort of representation that is easier to interpret, like numerical instruction codes similar to those a CPU evaluates. This doesn't mean that it's not interpreted though, just that it doesn't directly interpret the Language. In the end, it's the byte code that gets interpreted instead. In a way you could argue that Lua isn't an interpreted language, but a compiled one, and that the Lua *byte code* is the real *interpreted* language. But for most use cases, the compilation step happens behind closed doors and can be considered an implementation detail, so to the user it's as if it was being interpreted. Also, Lua usually allows to load more Lua code at runtime, which is a typical behavior of interpreted languages. With all that in mind, it just makes more sense to describe Lua as *interpreted*, because for the user it effectively is.
It’s both, and it’s just confusing because of semantics. Java and C# both have interpreters in implementations. However, Microsoft’s C# runtime tends to compile every method that gets ran to native code for whatever architecture the program is running on, and the JVM compiles code over time into increasingly optimized native code, despite often falling back to an interpreter. This is called a JIT compiler. Lua (making an exception for LuaJIT) and CPython don’t do this, and instead, always run in an interpreter. 
&gt; is there a technical reason? Not in the slightest. Technically speaking, saying "this language is an interpreted language" is a category error; whether something is an interpreter or a compiler is a property of the implementation, not the language. In any case, situations like Lua where the source code is compiled to bytecode, then interpreted by a virtual machine are very common. These days purely-interpreted implementations basically only exist as either historical curiosities or academic exercises; any serious language is primarily used with compilers. The only question is whether the compilers target machine code or not.
&gt; Lua (making an exception for LuaJIT) and CPython don’t do this, and instead, always run in an interpreter. PUC Lua does compile its code, it's just that the compilation target is bytecode (which gets interpreted, same as on the JVM before the JIT kicks in) rather than machine code.
That's what I said.
An *interpreter* is a program that takes source code an executes it. A *compiler* is a program that translates source code into code in some other programming language. A typical modern interpreter[1] runs a compiler as its first step. It is still an interpreter. This is the case with the standard Lua implementation. [1] Ignoring JITs for the moment; they're a bit fancier.
The byte code is still interpreted. Lua is a compiler and a byte code interpreter. 
This is indeed a bit of a gray area. Sometimes I think people call the language implementation different things depending on speed. Fast compilation times and slow execution performance is associated with interpreters. Slow compilation times and fast execution speeds are associated with compilers.
Wikipedia has the answers to this question... [https://en.wikipedia.org/wiki/Interpreted\_language](https://en.wikipedia.org/wiki/Interpreted_language)
Thank you for the answer. by the way if I said language I meant to say implementation.
I'm not sure if this violates both rules. While I don't think the function signature being different is a violation (f2(items) has is called in the same way initially), the *rawset* call feels like a cheat to me: f2 = function(items,idx,tbl) if idx == nil then return f2(items,1,{}) elseif idx &gt; #items then return tbl else rawset(tbl,items[idx],idx) return f2(items,idx+1,tbl) end end 
Nah, the **particleEffect:scale(particle.scale)** should be equal to **particleEffect.scale(particleEffect, particle.scale)**, so I'm passing the second parameter to the function.
The answer is right there in the error message: it expects a second argument to the function and you're only passing one.
Lua knows, but that error message probably comes from the library and is hard-coded to say "argument #2".
"No value" and "nil" are almost the same thing in Lua. When you do: `if x == nil then ...` you are actually checking if x has no value. You can do ALMOST same thing with: `if not x then ...` (However this expression is true not only for x==nil but also for x==false) As for your specific case, the call in the form "x:y()" always expects one initial "hidden" argument, which is automatically set to "x". If you are getting the error seen above, it actually means that your FIRST sent argument (i.e. "particle.scale"). For details, look at line #123. So, "if particle.scale then..." SHOULD work. Why do you think it does not?
We should absolutely have a sticked post with how to write a proper help request and some beginner tips and debugging methods. Avoids a lot of no effort questions.
The error message was written by lib author and he probably designed it to be called like that, so could've as well number arguments in error messages properly (omitting the self) 
Probably not the answer you want, but for me, the answer is usually to write code in a more functional style. Writing higher-order functions, using FP staples like map/fold/filter/etc., and avoiding mutation (except inside small functions where outside code never sees it) reduces a lot of that kind of boilerplate. A side effect (heh) of this is that there's less `some_long_variable_name = some_long_variable_name + 1` and more `i = i + 1`, so that when it occasionally *is* necessary it isn't as tedious. If that ends up not being good enough, there's always Urn (a lisp dialect) or MoonScript (a Python-ish language), which are more expressive and compile to Lua.
I just use the LuaExtended Sublime Text plugin. It adds an autocomplete entry for += that expands to x = x +. You could just edit the autocomplete rules and add one for ++ so you could just type foo++, hit tab, and get foo = foo + 1.
I've been playing around, it appears that parsing every script through some gsubs may do the trick &amp;#x200B; local pre = "([%w_%.]+)(%s?)"; local post = "(%s?)([%w_%.%+%(%)%-%[%]% %/]+)"; script = script:gsub (pre.."%+%="..post, "%1=%1+(%4)"); script = script:gsub (pre.."%-%="..post, "%1=%1-(%4)"); script = script:gsub (pre.."%*%="..post, "%1=%1*(%4)"); script = script:gsub (pre.."%/%="..post, "%1=%1/(%4)"); script = script:gsub (pre.."%+%+", "%1=%1+1"); &amp;#x200B; Example input: local foo = {}; foo.val = 1; foo.val++; foo.val -= 1; foo.val*=9 ; foo.val *= 2 +(foo.val/3); foo.val -= 3; print(foo.val) Translated output: local foo = {}; foo.val = 1; foo.val=foo.val+1; foo.val=foo.val-(1); foo.val=foo.val*(9 ); foo.val=foo.val*(2 +(foo.val/3)); foo.val=foo.val-(3); print(foo.val) The returned result is 42.0 
I've been playing around, it appears that parsing every script through some gsubs may do the trick local pre = "([%w_%.]+)(%s?)"; local post = "(%s?)([%w_%.%+%(%)%-%[%]% %/]+)"; script = script:gsub (pre.."%+%="..post, "%1=%1+(%4)"); script = script:gsub (pre.."%-%="..post, "%1=%1-(%4)"); script = script:gsub (pre.."%*%="..post, "%1=%1*(%4)"); script = script:gsub (pre.."%/%="..post, "%1=%1/(%4)"); script = script:gsub (pre.."%+%+", "%1=%1+1"); Example input: local foo = {}; foo.val = 1; foo.val++; foo.val -= 1; foo.val*=9 ; foo.val *= 2 +(foo.val/3); foo.val -= 3; print(foo.val) Translated output: local foo = {}; foo.val = 1; foo.val=foo.val+1; foo.val=foo.val-(1); foo.val=foo.val*(9 ); foo.val=foo.val*(2 +(foo.val/3)); foo.val=foo.val-(3); print(foo.val) The returned result is 42.0
Why not use a more powerful language which compiles down to Lua, e.g. \[Moonscript\]([http://moonscript.org/reference/#the-language/update-assignment](http://moonscript.org/reference/#the-language/update-assignment))
The compilation step is automatic, done at runtime, and hidden from most normal use. Thus interpreter.
&gt; With all that in mind, it just makes more sense to describe Lua as interpreted, because for the user it effectively is. Good explanation, but IMO it makes more sense to stop treating interpreted/compiled as mutually exclusive, because it's incorrect and confusing.
That will mangle quotes and comments like s = "a += b" and it doesn't accept subscripting like t[i] += 1 If it was modified to allow subscripting, it would do the wrong thing, since t[f()] += 1 should only invoke `f()` once.
There's a couple problems with compound assignment: 1. there's no gain of any kind, and implementing it will be infuriating (is x()+=1 -&gt; x() = x() + 1 or is the call to x cached?) 2. you'll want assignments to be expressions instead of statements (allowing x = y = z), which will needlessly complicate the language. 3. similarly to number 2, the grammar of the language becomes more complex, but there will be no real gain, it'd end up only being syntax sugar (the Lua VM handles mathematical operations as just OP dest, src1, src2, although this differs in LuaJiT ofc) 4. you'll sometimes write less readable code (when has x++ ever been more readable than x = x + 1 when it wasn't part of a C-like for loop) and just cause further confusion to beginners (postfix vs prefix increment causes enough confusion as is, let's not add it to a simple language like Lua) In all honestly a lot of my points are somewhat pedantic, but I think implementing these features would ruin the ideology of Lua being a simple and tiny language.
At this point the distinction is really just an oversimplification with historical roots. Few languages are really *interpreted* these days, and there are much better ways to classify them.
1. Would be a design choice, but generally caching would be more dangerous than just fully expanding. Anyway for something like that (compound operator on a function call) to be useful, you'd have to have some horrible global-side-effects-metatables implemented already.... 2. This has nothing to do with compound operators. Why would they suddenly need to be expressions? 3. Its just syntax sugar that's already prevalent in Lua. Super simple: LHS += RHS &lt;=&gt; LHS = LHS + RHS. 4. Of course they're useful, it's basically less typing for the same construct. I don't really see x = x + y in c++ code, everyone uses compound ops because they're shorter and give off the same idea. 
\#1 I'm pretty sure the expected behavior would be to cache, since any language with actual support for compound operators don't just expand it. And you wouldn't have to have any "global-side-effects", just wrap the statement in a do-end block that contains locals that hold the "temporary expressions." \#2 True, but I don't know of one language that has compound assignment that also don't have assignments as expressions. \#4 I was referring to incrementation/decrementation for this specific point, probably should have mentioned that.
Can you make an example of #1? I still can't imagine it.
This code **really sucks** and its **bad**. I know Lua so I can help you! [*https://discord.gg/cZVCJqs*](https://discord.gg/cZVCJqs) 
This had better be pasta...
`f()[x(g())] += h()` can become `do` `local _0 = f()` `local _1 = x(g())` `_0[_1] = _0[_1] + h()` `end`
&gt; This code really sucks and its bad. this is why I'm asking here for a better solution. do you have one and can explain why it is better?
Hmmm... I haven't put much thought into this idea yet, but it seems like a very Lua-like way to implement state-machines for this kind of thing could be sequential code in a coroutine. That way you could just write a loop that does some stuff and yields, until a condition is met.
Ha-ha, no problem.
I asked the guys on the moonscript discord and they said do what you do for lua and it'll "just work". I haven't evaluated that claim yet though!
I have never used the C API, but I suppose you could use it to fetch `table.remove` on the stack, then push the table, the index, and call `remove`. There may be a better way... perhaps you can fetch `remove` more directly using C... Not sure though.
You can go on to a website and pay someone to do this for you.
Your task is probably trivial to solve. Lua is one of the easiest scripting languages out there. Get yourself an already working script and try to make sense of it. Look into the language specification for helpful tools and also in the logitech api documentation. Children can write lua in ComputerCraft and do other fun projects, so can you.
\&gt; Get yourself an already working script and try to make sense of it. I have done that before in AHK, and I did manage to make the scripts I needed by editing the values. Sadly I cant find any premade autoclicker script in lua to use as a template. &amp;#x200B; My main problem is where do I place these words and numbers that tell the script what to do? Probably a very silly question, but what are they even called? They look like this: if (GetMKeyState("kb") == 1) then cast() end end end &amp;#x200B; If I can learn where to put them, then I can probably work it out myself using the API.
You didn’t state your purpose but with the random delay I assume it’s for a game. Most games can easily detect this as even with the random delay it does not look like a human at all. However if you pm me the api I could probably help you out. I don’t have a Logitech mouse so I couldn’t test it.
Murgee.com
This SO question might be a good starting point: https://stackoverflow.com/questions/24578998/game-lua-scripting-using-couroutine-or-polling What you want is the toggling of a loop that clicks in random (math.random) time intervals. So you need an entry point (left click for example) and an exit condition (another click or release?). 
I might be wrong, but I think you're supposed to use lua_settable to set the element to nil, and then call the garbage collector (or just wait till the next gc sweep). It doesn't really make sense to change the size of the table as soon as an element is set to nil, so the resize should be delegated the the garbage collector.
I can be useful to look at the source, in this case, I believe its - [https://www.lua.org/source/5.3/ltablib.c.html](https://www.lua.org/source/5.3/ltablib.c.html), and the tremove function. &amp;#x200B; &amp;#x200B;
If you want to remove an arbitrary element from the sequence, you need to use table.remove. This can be done using: lua_getglobal("table"); lua_getfield(L, -1, "remove"); lua_replace(L, -2); // remove _G.table lua_pushvalue(L, thetablepos); lua_pushinteger(L, key); lua_call(L, 2, 0);
I ended up doing what /u/w_o_w_a and /u/sanjayar suggested and implemented my own removal function by taking a look at the table.remove's code.
There is not. If you need to access the inner nested table what’s wrong with t[2][1] ?
Probably nothing but my ignorance. I'm writing a function that will display the contents of nested tables of unknown levels and display them one complete table at a time in the order discovered. As I did it below the first 2 levels print out correctly but table 3 is wrongly a duplicate of table 1. What I asked for seemed like the most straightforward way to fix it. local t = {"a",{"aa","bb","cc",},"c",{"aa1",{},"c1c",}} local i = 0 local subs = {} local function runtab(table) for k,v in pairs(table) do if type(v) == "table" then i=i+1 subs[i] = k print(k, "table "..#subs.." below") else print(k,v) end end end runtab(t) for k,v in pairs(subs) do print("\nTable "..k) runtab(t[v]) --for x,y in pairs(t[v]) do print (x,y) end end 1 a 2 table 1 below 3 c 4 table 2 below Table 1 1 aa 2 bb 3 cc Table 2 1 aa1 2 table 3 below 3 c1c Table 3 1 aa 2 bb 3 cc 
The second part is directly referencing t[k], that’s not quite doing what you want. Nested tables of arbitrary depth are a recursive structure, I’d suggest using recursion to iterate through (and if you’ve never used recursion this is a good time to learn). You can’t really do it with just two loops like you’re doing. 
I quickly did the following, but I don't know if that's what you asked. If it's not, tell me hahah m = {__call = function (...) local args = {...} local s = args[1] for i = 2,select("#", table.unpack(args)) do s = s[args[i]] end return s end} t = {{10, 11, 12, 13, 14}, {20, {9, 5}, 21, 22, 23, 24}} setmetatable(t, m) print(t(1, 3)) -- 12 print(t(2, 2, 1)) -- 9
I just saw nginx and it looms like that it would take up too much space. The problem is that OpenResty seems to be the only active Lua web thing.
Have you considered golang instead? Sounds like it fits this use case.
Openwrt does have an official [lua package](https://wiki.openwrt.org/doc/devel/packages/lua), so that's good. uhttpd for Openwrt does have official support for Lua, as [CGI scripts](https://wiki.openwrt.org/doc/uci/uhttpd#luci_with_embedded_lua_interpreter). Once you have all the right packages in place, start with ```/usr/lib/lua/luci/sgi/uhttpd.lua```. Searching for Lua web development isn't going to be any help here. You need to use uhttpd's Lua API, which will be unique for uhttpd. However, the basic root function you'll be using looks like: function handle_request(env) uhttpd.send("Status: 200 OK\r\n") uhttpd.send("Content-Type: text/plain\r\n\r\n") uhttpd.send("Hello world.\n") end So basically, you send a HTTP response.
https://gist.github.com/tjakubo2/035644224eeda47c28fe12edfaa3960d Example: local test = {'q', 'w', {'e', 'r', {'t'}, 'y', {'u'} }, {'i', 'o'}, 'p', {}, 'a' } for key, val, level, tab in pairsdeep(test) do print(key, val, level, tab) end Output: 1 q 1 table: 0x00341c38 2 w 1 table: 0x00341c38 1 e 2 table: 0x003484a8 2 r 2 table: 0x003484a8 1 t 3 table: 0x00348500 4 y 2 table: 0x003484a8 1 u 3 table: 0x00348538 1 i 2 table: 0x00341b20 2 o 2 table: 0x00341b20 5 p 1 table: 0x00341c38 7 a 1 table: 0x00341c38 
1. No code 2. No error messages 3. No context 4. No Lua version
OpenWRT's web UI, LuCI, is all Lua so there is also a good set of examples of working mature code
Thank you. I would never have thought of approaching things that way and still don't completely understand it.
Thanks. I wrote a simple recursive loop that iterates everything and displays accurately, though not in the order I want. Can you give me a simple example of how to define a table should cause an infinite loop? I tried to define one to include itself but the function simply skips that key and goes on to the next like a nil value. Keeping track of tables makes my head hurt. It was for trying to keep track of discovered tables that I asked the original question :(
Thank you. I found writing a recursive algorithm that gives me accurate results fairly straightforward, but getting it run in my preferred order is proving trickier. Given the following nested tables I'd like it to process and display in order abcdef instead of abdfec a / \ b c / \ d e \ f If you have any other tips on how to approach this I am grateful. local i = 0 local subs = {} local function runtab(table) local t = 0 for k,v in pairs(table) do if type(v) == "table" then i=i+1 t=t+1 subs[table] = subs[table] or {} subs[table][i] = k print(k, "table "..i.." below") else print(k,v) end end if t ~=0 then for x,y in pairs(subs[table]) do print("\nTable "..x) runtab(table[y]) end end end runtab(t) 
Like this? local recursive = {1, 2, 3} table.insert(recursive, recursive)
That's a great page, thanks. I wouldn't know where to start updating that pairsdeep function to get the order and format I'm looking for, something like local test = {'q', 'w', {'e', 'r', {'t'}, 'y', {'u'} }, {'i', 'o'}, 'p', {}, 'a' } Table 0 1 q 2 w 3 table 1 below 4 table 2 below 5 p 6 table 3 below 7 a Table 1 lvl 1 1 e 2 r 3 table 4 below 4 y 5 table 5 below Table 2 lvl 1 1 i 2 o Table 3 lvl 1 Table 4 lvl 2 1 t Table 5 lvl 2 1 u 
That sure does it, thanks.
Yeah, LuCI is actually kinda awesome!
Just a shame that I'm that bad a hobby programmer. I can't make any sense is luci.
[Not according to OpenWRT](https://github.com/GeertJohan/openwrt-go/issues/2). The issue is, the default Go buildchain will probably not be using a compatible libc implementation, and so you need to build the buildchain with uClibc, and the default openwrt buildchain, as OpenWRT does not have a compatible C ABI either.
Make a [Lens](https://medium.com/@gcanti/introduction-to-optics-lenses-and-prisms-3230e73bfcfe)
What do you want to build?
If you are a programmer (i.e. you can program in some programming language), Lua is easy as pie. If you aren't, that is the major hurdle (not Lua). However, it sounds like you are dealing not with a modification of programming logic but just some (arbitrary?) parameter (there is no, say, string length limit at 255 in Lua, so it does not sound like some language related restriction) - maybe you can get off by just asking in a software-specific forum for solutions for your actual problem (being more specific, I guess).
It should be fairly easy. You basically want to put encountered tables at the end of queue to be parsed, instead of on top like this function does. I wanted to do a step by step writeup but not much time right now so I guess you can try this and analyze it yourself if you want: https://gist.github.com/tjakubo2/b3f3e417b634385772460cd6baf8d190 Example: local test = {'q', 'w', {'e', 'r', {'t'}, 'y', {'u'} }, {'i', 'o'}, 'p', {}, 'a' } for key, val, tab in ipairsdeep(test) do print(key, val, tab) -- tab is the table or subtable val resides in, tab[key] == val end Output: 1 q table: 0x00331c78 2 w table: 0x00331c78 5 p table: 0x00331c78 7 a table: 0x00331c78 1 e table: 0x003382c0 2 r table: 0x003382c0 4 y table: 0x003382c0 1 i table: 0x00331b60 2 o table: 0x00331b60 1 t table: 0x00338318 1 u table: 0x00338350
Well, that [cross-compiler repo](https://github.com/CodeMonk/dd-wrt-go), again reminds you that Go isn't all you need: &gt; You can find the tool chain from the dd-wrt site: You need the buildchain, because by itself Go doesn't create the correct ABI needed by the platform. (Also, note that dd-wrt is not OpenWRT. They differ significantly, and are not forks of each other. Both were originally derived from the Linksys WRT54G series firmware which was released under GPL.) --- &gt; Which I expect to dynamically link to the C library of the target system. Nope. The OpenWRT go repo links (as in linker like ld) to one of the libc implementations inside the [toolchain](https://github.com/GeertJohan/openwrt-go/tree/add-gccgo-and-libgo/toolchain). --- &gt; If you avoid or replace those, there's seems to be no dependency. Is my understanding correct? You don't just need a target libc. You also need a toolchain that will build a compatible binary. As seen in the [openwrt Golang repo](https://github.com/GeertJohan/openwrt-go): &gt; It will download all sources, build the cross-compile toolchain, You need: * Go buildchain, which relies on: * A C buildchain for the architecture, and ABI being used by OpenWRT. * A libc for the buildchain. So yes, libc is part of the toolchain, but you do need it and can't avoid it, and on top of that, you need the right Linux headers, and a series of other ABI patches to make a binary that will work for your system.
&gt; Nope. The OpenWRT go repo links (as in linker like ld) to one of the libc implementations inside the toolchain. Yes. But that's for [gccgo](https://golang.org/doc/install/gccgo), which part of GCC and different from the Go Compiler you get when you download Go from golang.org. A project I'm monitoring for quite a while is gokrazy.org and they compile their binary for the Raspberry Pi statically linked with the latter compiler. There is no cross toolchain required as they compile with `GOARCH`, `GOOS` and `CGO_ENABLED=0` ([see here](https://github.com/gokrazy/tools/blob/master/cmd/gokr-packer/gotool.go#L15)). They don't even have or need a libc on their target or build system as the resulting binaries are statically linked and don't dynamically load symbols (like needed for the resolver, etc) from libc.so thanks to `CGO_ENABLED=0`. I don't see any difference to targeting OpenWRT.
&gt; I don't see any difference to targeting OpenWRT. The Raspberry Pi uses the standard EABI for ARM. OpenWRT doesn't. If Go isn't told about the new ABI (via a toolchain), it can't produce a binary with the correct address calling conventions, it can't see the stack frame correctly, and return address and frame pointer can be messed up. I'm not continually mentioning the differing ABI because it's *not* a little thing. It defines how binaries are called by the host system. If you don't have the same ABI, you can't run it without translating it through an emulator or something along those lines. You need to use the correct ABI. (And Linux with OABI will try and run an EABI file without checking, causing a segfault.) OpenWRT is big-endian, and OABI. The Raspberry Pi is little endian (kinda, it supports both little and big, but is generally set to run in little), and EABI. Google's official Go compiler *does not support big endian for ARM*. &gt; We have flushed out most little endian assumptions in the code base during the ppc64 port, so I don't expect many problems for BE32 mode, but I do see some problems for BE8. The Go toolchain/runtime assumes that the code and data are using the same endianness. Neither does it support OABI. &gt; Also supporting both OABI and EABI is basically not maintainable (yes, I've learnt the mistake from the Linux OABI testing [Issue 5685]).
Ah! "_OpenWRT is big-endian, and OABI_" was the information I didn't know. That with the missing support in the Google Go compiler explains why it's not that easy. Thanks a lot for the insight!
Try the gmod subreddit
Lua is basically my favorite language because there’s hardly anything unique about it. It’s basically like how Latin is to other languages, of course looking past the fact that lua was made later than most of them. So if you have even a basic knowledge of how computers command and communicate, lua will be fairly simple to learn. Good luck!
Either /r/gmod (not Garrysmod, it merged like 6 years ago). Or /r/gmodhelp.
Here's a sneak peek of /r/gmod using the [top posts](https://np.reddit.com/r/gmod/top/?sort=top&amp;t=year) of the year! \#1: [TTT.png](https://i.redd.it/599k2fp6yns01.jpg) | [4 comments](https://np.reddit.com/r/gmod/comments/8d5c2w/tttpng/) \#2: [This picture got me really confused](https://i.redd.it/8nrl7nfqa9x01.jpg) | [13 comments](https://np.reddit.com/r/gmod/comments/8iuwh4/this_picture_got_me_really_confused/) \#3: [Lmao what](https://i.redd.it/gwv3pzgj7k001.jpg) | [75 comments](https://np.reddit.com/r/gmod/comments/7fx5e9/lmao_what/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Start here http://luci.subsignal.org/trac/wiki/Documentation/ModulesHowTo Feel free to ask me questions. 
Are you compiling LuaJIT? What are you actually doing? &gt; Yesterday, it went well with lua. But today it happened that I could not use it, What were you doing yesterday? What were you doing today that you got an error about compiling HDF5? --- At a bare guess, as I have no idea what you have actually been doing, I'd say you've run across [this](https://github.com/deepmind/torch-hdf5/issues/79) issue in torch-hdf5. From the references in the issue, I'm guessing you're trying to write Torch data into a HDF5 file, and the result is larger than 4GB, or you're trying to read a HDF5 file that's larger than 20GB. *If* this is the case, the solution seems to be to compile Lua 5.1, using gcc 4.8.4. You could also try using a different version of LuaJIT, *if* you're using it in the first place. Can I ask why you're using Lua 5.1? As Torch themselves recommend Lua 5.2 for their project? That may fix your issue... Depending on what exactly you are trying to do.
You are correct that your keyboard identifier should be 21B4E5F6 You only need to put this in here: `local keyboardIdentifier = '21B4E5F6'` This is "the first 0000AAA value in the code" You should not to put it in here: `if keyboardIdentifier == '0000AAA' then` This is because that second 0000AAA is looking to see if the user has bothered to change the keyboard identifier to their own value. If the keyboard identifier has NOT been changed then it will ask to manually assign it. Are you sure that your keyboard is not assigned? Can you press the play button and paste the output of the code here?
&gt;"Lua" (pronounced LOO-ah) means "Moon" in Portuguese. As such, it is neither an acronym nor an abbreviation, but a noun. More specifically, "Lua" is a name, the name of the Earth's moon and the name of the language. Like most names, it should be written in lower case with an initial capital, that is, "Lua". Please do not write it as "LUA", which is both ugly and confusing, because then it becomes an acronym with different meanings for different people. So, please, write "Lua" right!
This is great. Does it have an option to transpile to lua 5.1 code (not bytecode)? This makes it compatible with luajit, which is something you really need to target to gain traction. 
Reading the examples I came up with something and had to put it into code to see if it works. 01 local function combine(fn, ...) 02 if (...) then 03 local tail = combine(...) 04 return function(...) 05 return tail(fn(...)) 06 end 07 else 08 return fn 09 end 10 end It's essentially a version of your `pipe` function that doesn't use tables. I've tried making it tail-recursive, but I don't think that's possible.
&gt; Lua bytecode No such thing exists. Each version / implementation of Lua has its own bytecode representation and just talking about "Lua bytecode" is like talking about "assembly code", it doesn't tell the reader anything about where they can use it.
Thank you for your feedback, I will try to apply your suggestion. I am new to Lua and that that using tables would be the most idiomatic way
&gt; that using tables would be the most idiomatic way With Lua, being idiomatic is usually not as big a concern as in languages like, say, Ruby with its many features and huge standard library. Lua has always been something that people could reshape as needed, so "idiomatic" usually is a matter of what environment you're coding for.
&gt; This will result in one additional function call that returns false, which can be optimized at the cost of added complexity, but it avoids using tables (which are slow). How much slower is it? Considering how function composition functions like pipe and comp (which is basically pipe, but backward) are used, it seems like avoiding the table ends up being premature optimisation for most cases. Since we're doing the "implement this in different ways" thing, here's another way of going about it, using `reduce` (e.g. `foldl`): reduce = function (f, x, t) for _,v in ipairs(t) do x = f(x,v) end return x end pipe = function (f, ...) fs = {...} return function (...) reduce(function (a,f) return f(a) end, f(...), fs) end end They're from a small file of miscellaneous FP stuff I made, similar to the OP, that I pull out whenever I'm using Lua. I already had `reduce` made, and it can be used as the foundation for other useful HOFs, so I did it that way. No idea how the performance is compared to either other version here, but 90% of the time I wouldn't care; for most things it doesn't matter, and I can always refactor where it does. Also, OP, you're missing a lot of rudimentary stuff there. Like no `map`, no folding functions, no `filter`. They're really useful ones that I'm surprised you didn't do first. Not as important, but another idea of something that would be cool to add (and that I have on my TODO for my little personal utils): some functions for dealing with laziness, like how Clojure has `lazy-seq`, which opens up a lot of interesting possibilities with infinite lists. 
Yes, I was implementing it for Lua 5.3 Bytecode.
yes, got it
I didn't know about urn-lang, which is weird, so thanks for mentioning that :) (I say it's weird because I use Lua a lot and like reading about the weird stuff people use it for, including other languages like moonscript or terra)
Set initial value of yHigh the first result of function and then compare if it is higher then next one. If it is, then change its value to newest function result
Thanks, that's what I had done initially and it didn't work for other reasons (my own mistakes) so I began second guessing myself and thinking that there was some kind of limitation. Because of your answer, I tried it again after cleaning up other messes and it worked fine :)
Glad to hear it!
I've been coding 20+ years and that feeling happens all the time. You code something but it doesn't work. You second guess yourself and your knowledge of the technology. You struggle, you get depressed, start wondering if this was a good career choice. Then it turns out you had a missing semicolon in another seemingly unrelated file. 
Try /r/roblox, this has very little to do with Lua itself. 
It looks like the corona install comes with a simulator that can run the game. I’d give that a shot
I've never used Corona but I'm pretty sure you can install it and compile the game with it. Also, it's actually just "Lua", not "LUA". It isn't an acronym.
I have no idea even where to click.
You misunderstand. There's nothing to install. It's an uncompiled game. It needs to be compiled into an executable to be ran.
With what?
Corona, like I said.
What you linked to is the source code for a game, i.e. what the programmers wrote. It needs to be transformed into a runnable game before it can be played. Think of it like instructions for building a car - you can't drive the instructions. Their readme doesn't have much detail on how to compile it, so your best bet is to ask the authors either for more details or for a runnable copy.
I recommend you ask the authors directly by making an issue: [https://github.com/RomeroGames/Baboro2018/issues](https://github.com/RomeroGames/Baboro2018/issues) 
Here's a more complicated way to go about it: &amp;#x200B; local function max() local max = math.max local \_max = -(1/0) -- negative infinity return function(value) \_max = max(\_max, value) return \_max end end &amp;#x200B; the function \`max\` returns a closure (basically another function that encapsulates some state) with an upvalue for the current maximum. Each time this function is called, it sets its upvalue to the maximum of the previous maximum and the new value and then returns this maximum. I've left out the parameter checking for simplicity, but I guess you'd usually want to check that \`value\` is actually an integer and maybe treat \`nil\` as \`-inf\` to just return the current value. You could also create an additional wrapper that accepts an arbitrary number of new values.
Ok I try!
Okay it work now I just have to make a local script!
PIco-8 has a similar game loop as love. This concept has a nice write up already if you're interested. [Pico-8 Zine: Cutscenes and Coroutines](https://docs.google.com/document/d/14HzJnqKdVtBjN2vN9-rZHLR3rlgwWwDym8ehzhKRqFo/edit#heading=h.f6e2xl4cyuq4). Another similar write up [here](http://lua.space/gamedev/using-lua-coroutines-to-create-rpg)
Don't fight your framework. Love is designed with an update/draw game loop, and trying to design something different will end up causing more problems than it solves for your code. ECS with independent systems is a cleaner abstraction than what you're proposing, and it'll play nicely with draw/update. That said, coroutines are awesome, and I'm using them in love to implement behaviour trees and one-off "scripts". I call coroutine.tick() from my behaviour system's update() method.
Specific things I suspect you'll run into with your proposal: passing anonymous blocks will be harder to keep straight because you'll lose self-documentation, you'll be repeating yourself a lot by passing arguments like dt and alpha down deep call chains, and you'll end up with really long methods with tons of spaghetti yields in the middle, making it much harder to track and troubleshoot program flow. At the end of the day, it's your call!
Thanks for the links! It's a little different though, since I use the coroutines for the entire game logic, not just specific aspects like animation or AI :)
Corouting.wrapping the update and draw calls will work, but consider the following: First, your draw loop probably doesn't need coroutine logic, you'll probably have a list of elements in the game and will draw those, so the code will forever the draw() function in your example, which is the same thing as a function call. But more important, how often do you find yourself wanting to yield in the middle of *the entire update tick*? Usually you have multiple concurrent pieces of logic you want to update. Periodically you'll want to swap out some of them, and sometimes some of these pieces of logic benefit from a coroutine workflow. It's better to keep your top-level update code something that can compose all kinds of update routines. If you really want to go ham on this, a better version, I think, is something where you treat your love.update() as a scheduler. Let other parts of the code register itself as every-frame updates, every N-second/millisecond updates, and as coroutines. Then you could have one property on your scheduler object that's designated as the "primary update coroutine" and that's what you'll assign with your `return next mega coroutine` trick. Remember also that hiding state in coroutines and closures makes it more annoying to debug things, so be careful about storing everything in locals.
Don't worry, I see it only as an experiment. If it turns out it causes more trouble than it's worth, I will just go back to how it was before :)
Wow, this looks pretty close to pattern matching. Still you can get nil from everywhere though.
Lua on its own (e.g., in the standard interpreter) only has access to a subset of C's IO. That means you can read full lines from the console and write full lines to the console. There's no graphics, sound, networking, keyboard, or mouse. You need some library that provides that to Lua. [Love2D](https://love2d.org/) is one such popular library, and is very easy to get started.
Also check Corona SDK https://coronalabs.com
Yeah, I've done a project or two where I replaced `love.run` and I gotta say; there's not really much downside to opting out of the update/draw loop if you know what you're doing. I've never used an ECS and haven't had any trouble keeping the codebase clean. I use a similar effect (though much more limited) in some of my games; in particular being able to write the intro/tutorial in a way that proceeds according to a series of checks against the player's actions without blocking the game loop is super handy! https://gitlab.com/technomancy/exo-encounter-667/blob/master/tutorial.fnl#L27 That said, your bit at the top where you store functions in locals doesn't actually speed up LuaJIT at all; it offers a small performance benefit on PUC but in LOVE it has no effect.
It is definitely possible to just write something and run it. But the point of an engine (or a framework, these terms are interchangeable in this context) is to provide abstractions suitable for your tasks. So, with engine you can express things like "load that image and place it at (x;y) on screen" or "play that sound file in background". Without engine, these simple atomic actions (simple from your task's POV) are more like "open file, check if format is valid, allocate memory buffer, read portion of file, enumerate sound devices, pick default one, create context, adjust options to match file format, allocate sound buffer, copy part of file buffer to sound buffer, start playing sound buffer in separate thread, when it ends, get next piece from file buffer and copy it to sound buffer", etc. etc., and I must say even this list of action is terribly simplified. Instead of writing all this low level stuff (which requires quite a bit of knowledge in many areas), you can focus on your game by using suitable engine or framework. Though, if your goal is not to just write a game, but learn something new at low-level, writing things from scratch can be extremely interesting and rewarding. But also very hard, of course. Also, if your game is something relatively simple that requires only console input/output (like text adventure, which does not require graphics, sound, etc.), engine might not be necessary. (But in case of this particular example -- a text adventure game -- you might benefit from using some text adventure engine, basically for the same reasons stated above).
I would highly recommend IUP. It is very modular and very extensive. It is very actively developed.
&gt;return fn(table.unpack(arguments), ...) Not that this does not work because it will pass only the first element of `unpack` followed by the varargs elements to function `fn`. &amp;#x200B; &amp;#x200B;
You want string concatenation, which is done using the `..` operator. Eg. "Hello " .. "World" -&gt; "Hello World"
Thanks!!! It work!!
None of those functions are standard Lua, and thusly no one will be able to help you if you don't name the program you're using at the very least.
r/robloxgamedev 
Download Corona and these files, then click Compile?
Something like that, I'm sure.
Possibly some Pico-8 stuff? It's a really good way to learn Lua in a fun way, and I believe the various zines have some decent general purpose Lua tutorials.
I think [Litt's Lab](http://www.troubleshooters.com/codecorn/lua/index.htm) is a pretty good resource. Just because it's important, I'll reiterate what you've already said and tell you that Programming in Lua is probably the *best* resource. It's fairly short and reads easy.
Lua is DEFINITELY not a good language for most mainstream apps because of lack of framework and support, Java dominates that field. It is however great (if not perfect) for: -Academics -Calculations -Games -Quick softwares for problem-solving -Anything performance-heavy Every Lua user always end up falling in love with it. In my experience, more than anything else it's an amazing language because of how fast it is both for creating and running the code. 
I like it for building command line scripts. It's much more readable than bash/perl, so you can actually come back and improve them over time. `os.execute` and `for line in io.lines("file") do` or `for line in io.popen("some bash command"):lines() do` are pretty great. For example, I wrote a script at work that shows me all of the commits I have made in git since master, and which ones can be moved past each other for rebasing. It's also fairly nice for programming games; there's a number of engines that use it (PICO-8, Roblox, LOVE2D, Gary's Mod). Why? Because it's fast (with LuaJIT) and because it's interpreted, making a change and seeing it happen has a really fast turnaround. Games tend to have a lot of simple "glue" or "configuration" type logic, which is what Lua was originally designed for.
Here is a decent presentation about using Lua for application programming, by the LuaRocks developer. https://www.youtube.com/watch?v=kpDoh-FMIoI
#### [Lua application programming - Hisham Muhammad](https://www.youtube.com/watch?v=kpDoh-FMIoI) ##### 1,620 views &amp;nbsp;👍32 👎1 *** Description: Lua was created as a scripting language. But so were Python, Ruby, JavaScript and many others that are today used for writing entire applications. Can... *Lua Conf, Published on Aug 24, 2017* *** ^(Beep Boop. I'm a bot! This content was auto-generated to provide Youtube details. Respond 'delete' to delete this.) ^(|) [^(Opt Out)](http://np.reddit.com/r/YTubeInfoBot/wiki/index) ^(|) [^(More Info)](http://np.reddit.com/r/YTubeInfoBot/)
It makes a fantastic modding API. Garry's Mod, ROBLOX, and Starbound, and many MMOs like World of Warcraft and Wildstar make use of it as one. I've also implemented it in my own games.
It's best used as a scripting language for your app. Making any app programmable is a powerful tool.
Learn Lua in 15 minutes is a classic: http://tylerneylon.com/a/learn-lua/
I'm not actually sure I grasp the concept of making a scripting language for something other than a game engine. Does sound powerful, though.
So, you get a visible terminal with something like: function love.load() local file = assert(io.popen('dir a', 'r')) local x = file:read("*all") end Is that right? It's because of enabling t.console. &gt; On Windows, there is a special command-line option which will attach a console to the window, allowing you to see the result of print calls (equivalent to setting t.console=true in conf.lua): You can use popen without enabling the console. Enabling the console is so you can see the console when you run print calls, something people might do for debugging or other purposes.
That's weird. `io.popen()` should not open a console window either way, but I guess that's just windows being weird.
This is a Windows problem, and annoying as hell, in every programming language. It only affects some Windows platforms. Some get the flash, some don't. Platforms with the same version numbers have been observed to behave differently (flash vs no flash). The best option, is indeed Windows' CreateProcess, which returns a process handle. Ignoring that, because it's hyper complicated. How about you do something like: os.execute('start cmd /k call "'..sBatchFile..'" &gt;output 2&gt;&amp;1' ) Which opens a prepared batchfile, and sends output to a file called output, that you can then read in as a normal file. How does that appear on your system?
Use winapi extension [https://github.com/stevedonovan/winapi](https://github.com/stevedonovan/winapi), winapi.execute
1. Use `local` 2. Fix your indentation 3. Don't return in if statements for normal control flow. It makes it harder to read the code. What I mean by this: ... -- some other code local function do_stuff(stuff) if stuff:broken() then return nil, "your stuff is broken!" end -- Error handling, not normal control flow. This is OK. if stuff:sticky() print("This stuff sticks!") return else stuff:do_something() stuff:do_something_else() return stuff:get_something() end -- Conditional code with two clearly visible branches. Also OK. end local function ugly(thing) if thing:ugly() then return end thing:test() if thing:results() then return end return thing:test_again() -- Hard to reason about, no clear conditional branches. Not good. end ... -- more code As for the problem, I have no experience with roblox, so I can only guess, but I'd say it's probably that you have the wrong idea of how functions and callbacks work. For example, the `repeat ... until` loop in your second function will run until Energy has reached 100, even if the player has started running again. And what is this even supposed to do? if Energy == 0 then wait(3) else wait(3) end On a side note, unless you're dealing with robots, *stamina* might be a more fitting word than *energy*, both for the users and other developers.
I'm a little late to the party ... I'm not a programmer. I am a classically trained composer. And yet I am creating a music generating program using Lua that uses Csound for the audio and Lilypond to generate the sheet music. Lua is the only language I know. This is the only program I've written. I am at around 6,000 lines of code. I have no idea if that's a lot or not but it feels like a pretty major accomplishment for me. So why did I choose Lua? There's a long explanation available elsewhere on the internet but the short of it is that I found it a little easier to understand and manipulate than I did Python and Perl (and much easier than Scheme and Ruby, for that matter). It also turns out that it's pretty quick for a scripting language and if I maintained compatibility with LuaJIT then it would be blazing fast. With Lua I am able to generate text files for Csound and Lilypond which then get processed by those programs. I'm sure any language could do the same. Lua is a general purpose scripting language so it should be good for any type of application. I just happen to use it to create music.
Lua is great for anything in which you would like to separate logic that can be easily changed/modified from a core that should be changed not so often. Also in places where things need to be small and fast. That's why it's so widely used in embedded software and games. Embedded software usually wants things small and fast and games are usually a software where you want to have your core/engine that does the "heavy lifting" like rendering and low level stuff, separated from your logic and on top of that in games you want things to go fast. Also games usually use a core that is written in C++ and Lua is probably the best scripting language to embed in a C++ app. Having said that you can use Lua for anything, though in some areas it might be less "user friendly" than other languages, because of the "no batteries included" design. If I'd write a software, where I want to separate logic from low level (engine) stuff, be easy and fast to modify, no matter what area the project is, I would most likely use Lua + C++, it's a brilliant and extremely powerful combination. &amp;#x200B;
https://semver.org is a pretty widespread and way of "standardized" versioning