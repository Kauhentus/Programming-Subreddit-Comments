Is there a way to get autocomplete functionality for the D language in XCode (currently version 2.4.x)? I've found that, with today's large APIs and libraries, the fastest way to learn a new language is to have autocomplete so I can see just what's available (or needed) for any particular module, object, and/or function. There are D tutorials and explanations but they're scattered and non-coherent so it's taking awhile for meet to find my D feet. Autocomplete would really help me out here.
You might want to give descent a try: http://www.dsource.org/projects/descent It is an eclipse plug in and it features auto-complete. I've never used it, but I have heard good things about it. Additionally, you might want to try posting here: http://www.digitalmars.com/webnews/newsgroups.php?search_txt=&amp;group=digitalmars.D.ide You may get more answers on the official D ide newsgroup. 
Unfortunately, Eclipse has some unchangeable behaviors that I just can't work with (most notably: deleting a file from a project also deletes it from the hard drive instead of just removing it from a project). I'll keep digging though. Thanks!
&gt; See why D can be the future of the game development - how its flexibility connected with speed can really make a difference. We will abuse threads with Dog, render nice pictures with Hybrid, shock with Nucleus, do magic tricks with XPose, and make you all say OMG! If that's not enough to impress you, get ready to witness presentations of Deadlock and Defend - two Team0xf games under development - **proving that the gamedev in D is a fact.**
These guys are doing some of the coolest stuff in D. Heck it would be cool what they're doing even if it were C++, but the project would probably be caving in on itself right about now due to complexity if it were C++.
great stuff. I can't use it until you can build phobos though. 
Or tango, which I've mostly been avoiding, guess it's time to learn.
Now that the Mac is on Intel x86 machines, it opens the possibility of porting the dmd D programming language compiler to the Mac.
Cool! Any estimate of when we could get our hands in the alpha/beta version?
Hopefully within a month.
"It requires Tango, apparently builds only on Linux (unless I’m misunderstanding what I’m reading) and is released under version 3 of the GPL. If any of that is up your alley, you should hit the QtD googlecode page for more details." Well.. It is a start I suppose. But GPLing a windowing library (ok ok, an application framework)?? Not the best start. :\
Mac OSX gets a port of the dmd D programming language compiler.
yeah!
&gt;The D programming language is a modern, natively-compiled, statically-typed system language. While being strongly influenced, and keeping a certain level of compatibility with C++, it tries to avoid many design flaws of its big brother. One of important aspects of D is that it makes simple things simple. Among these things are built-in array types, a built-in garbage collector, and a built-in profiler. 
Wow, I was actually sure that it is impossible to do D bindings to Qt in any reasonable way. Good work. 
curious if slow exception handling is coming from the front end or the back end. ldc benchmarks on linux would show that.
From http://www.digitalmars.com/d/2.0/errors.html: &gt; * Errors are not part of the normal flow of a program. Errors are exceptional, unusual, and unexpected. &gt; * Because errors are unusual, execution of error handling code is not performance critical. &gt; * The normal flow of program logic is performance critical.
I like opApply. And hate STL-style iterators. Mayby there is some generalization but please never remove opApply! 
Oops, LYLA v0.2
*Sigh*. QtD's license is less permissive than Qt. Why? It makes it worthless. At least have the same license structure as Qt. LGPL 2.1 please.
An important point implied but not explicitly mentioned is that type inference can reduce coupling by making a symbol only dependent upon the functional form of its context rather than a named type. Of course, this is the same kind of power you get from templates as well. In a way, "auto" variables are like template variables that get "instantiated" with their initializer type. 
 Thanks for taking the time to do it the right way. It seems like type tuples can be used anywhere a void * kludge was traditionally used in c or c++. 
It looks very similar to Erlang way of spawning process! Very good way :) 
I'll never understand why Walter doesn't bypass all this silliness and start using the llvm implementation (ldc) so he can concentrate on the front end...
It's nice to see some optimism and good attitude in the D community.
 A language's popularity shouldn't be one of the merits you base your choice of language on. Maturity level? Sure. Tool chain? Sure. But not popularity. If you really like D you should stick with it for no other reason than you enjoy programming in it more than other languages. It will become popular as soon as someone writes a killer app with it, e.g. major OS kernel, new browser, game engine, etc. I wish it had an IDE myself, specifically visual studio support. It would at least get pet project support at work if it worked with visual studio. 
I was under the impression that there was VS support--but it may be more limited than I thought... just debugging? May or may not be your cup of tea, but you can load the Descent plugin in a bare Eclipse framework, and get a dedicated D IDE. It's supposed to be pretty snappy.
But popularity _does_ influence the maturity of libraries and tools. What if I like D so much I want to code a "serious" project (maybe a job) on it, but the lack of a mature toolchain prevents me and my team to?
I think you are just looking in the wrong place. While dsource has many stagnant projects, which has always been the case, there has been a lot of involvement in the development of D2. A greater number of patches to DMD are being submitted (now that the source is available). Phobos has become a very impressive standard library. And of course there is still lots of complaining about what needs to get done, but those complaining don't want to do it. I do believe library writers are getting a little shafted with the need to maintain a D v1 and v2 without much help from the version(D_Version2) identifier. Many believe, and rightly so, that D1 will fade out pretty quickly and the community will be much more united with version 2. [D1 will still have its users, and Walter will be supporting it while people are still using it] Of course a great place to see how fast D is progressing is to check out the change log [v1](http://digitalmars.com/d/1.0/changelog.html) and [v2](http://digitalmars.com/d/2.0/changelog.html). You can also check out [future directions](http://www.prowiki.org/wiki4d/wiki.cgi?LanguageDevel) and [improvement proposals](http://www.prowiki.org/wiki4d/wiki.cgi?LanguageDevel/DIPs). It is also getting lots of interest on StackOverflow; with questions such as [Does the D programming language have a feature?](http://stackoverflow.com/questions/250511/does-the-d-programming-language-have-a-future) And I didn't even mention that Andrei Alexandrescu is writing a book, [The D Programming Language](http://www.amazon.com/exec/obidos/ASIN/0321635361/classicempire)
 You're right in that popularity and maturity/toolchain/docs/etc tend to go hand in hand, but it's not required. IMO PostgreSQL is more mature than MySQL but it's not more popular. I'm sure I'll get flamed for that but it's just an example. It's kind of like voting for President in America: Do you throw your vote away on the guy you want to win knowing he has no chance, or do you just vote for the lesser of two evils? Ultimately your choice of language is going to have a lot of factors going into it just like voting for President. I don't think I'd vote for someone just because they were the most popular. There are lots of reason they are popular, and it's one of those reasons I'd vote for them, but not because of the popularity alone. I guess all I'm saying is that by caring about what is popular you are caring about what others think, and you shouldn't care what others think when making choices for yourself. Boy did that come out sounding like a douche :) Sorry to preach
I think a lot of resources are going towards D2 at the moment. It will probably be worthwhile waiting for TDPL and D2's feature freeze, and seeing how things pan-out for that. In particular, D2 should hopefully breach the gap between Phobos and Tango, meaning less segregation in the overall language ecosystem.
I've been following D for years. You are correct in the sense that for a time it looked like D was poised to go mainstream while currently it is not. The reasons I see are: *) D2 is not strictly backwards compatible w/D *) Focusing on language features instead of library support *) Maintaining a separate backend/linker instead of integrating with llvm and/or gcc. I'm not faulting walter for these issues...he had his reasons to go the way he did. In particular, he (correctly I think) sees that concurrency is the main challenge in terms of designing computer languages and wanted to move the jewel of his life's work in a direction that will be relevant going forwards. The way I see it, Walter rolled the dice: faced with supporting a modestly popular and cool but relatively mundane language or doing something really groundbreaking and broadly useful, but risking some of the ground he already broke. He chose the latter, and you have to admire him for that. 
I'm re-posting this since it only seems to show up in my history. I think you are just looking in the wrong place. While dsource has many stagnant projects, which has always been the case, there has been a lot of involvement in the development of D2. A greater number of patches to DMD are being submitted (now that the source is available). Phobos has become a very impressive standard library. And of course there is still lots of complaining about what needs to get done, but those complaining don't want to do it. I do believe library writers are getting a little shafted with the need to maintain a D v1 and v2 without much help from the version(D_Version2) identifier. Many believe, and rightly so, that D1 will fade out pretty quickly and the community will be much more united with version 2. [D1 will still have its users, and Walter will be supporting it while people are still using it] Of course a great place to see how fast D is progressing is to check out the change log [v1](http://digitalmars.com/d/1.0/changelog.html) and [v2](http://digitalmars.com/d/2.0/changelog.html). You can also check out [future directions](http://www.prowiki.org/wiki4d/wiki.cgi?LanguageDevel) and [improvement proposals](http://www.prowiki.org/wiki4d/wiki.cgi?LanguageDevel/DIPs). It is also getting lots of interest on StackOverflow; with questions such as [Does the D programming language have a feature?](http://stackoverflow.com/questions/250511/does-the-d-programming-language-have-a-future) And I didn't even mention that Andrei Alexandrescu is writing a book, [The D Programming Language](http://www.amazon.com/exec/obidos/ASIN/0321635361/classicempire). 
I think D's time is still to come. D1 is a fantastic language, sort of a 'C++ done right', but D2 is a really revolutionary language that could really shake things up. I think D1 never really had a chance at mainstream because it didn't differentiate itself enough. While I consider it my 'favorite' systems-level language it didn't do anything special enough for me to drop C++ and never seemed like it was trying to attract from the scripting language segment of the programming world. I agree with your sentiment about it feeling like it is losing momentum.. I know that I personally am adopting a 'wait for D2 before taking a plunge' attitude. I imagine many other onlookers are as well. Ultimately it hinges on if D2 delivers on its promises or not. If it brings us a unified Phobos/Tango runtime, a revolutionary threading model, and a fusion of functional and imperative programming then all the pieces will be in place for a serious contender. I really hope for a bright future for D2.
&gt;Many believe, and rightly so, that D1 will fade out pretty quickly and _the_ _community_ _will_ _be_ _much_ _more_ _united_ with version 2. I hope that becomes true (: By the way, in the description I was refering to the same book yo mention.
Thanks for sharing your opinion. Me, I find myself also in the wait of D2 and unified standard library.
That's probably why I didn't mention it the first time I submitted. My post was so long I forgot what you said.
&gt; I wish it had an IDE myself The *Zeus IDE* has support for the D language: http://www.prowiki.org/wiki4d/wiki.cgi?EditorSupport/ZeusForWindows
The main work with D right now is the effort to get the D2 language design finished and the companion book, Andrei Alexandrescu's *The D Programming Language*, completed. There are many people putting in a lot of long hours on making this happen. D1 is a great language, but D2 is a huge advance, especially in terms of functional, generic, and concurrent programming support. Libraries and toolchain support all follow from having the language design done first, so that's where the main focus is at the moment. We expect the focus to shift to libraries/toolchain probably before summer. To follow along on the progress, you can watch the [changelog](http://www.digitalmars.com/d/2.0/changelog.html); you can participate by joining in on the [newsgroups](http://www.digitalmars.com/NewsGroup.html) and the [D design mailing lists](http://lists.puremagic.com/mailman/listinfo/). All are welcome.
Thank you.
Don't worry, I know what you mean. And btw you sounded more like an upset father. Maybe I just don't know how to express myself, but what matters me the most is D maturity, and I think popularity will indeed help D to get it. Oh, and I don't have to vote for president in America.
What is the timeline for getting the D2 Language spec finalized? I'm really interested in working with D, and I love the language, but I need snowleopard support, and I'm hesitant to create programs that will need to be changed after the next upgrade. Is the core of the language solid yet, or is it still undergoing changes? Thanks btw, I love D, and have had a really hard time convincing myself to learn C++ even though it is an standard in the Physics community because I enjoy using D too much. You've done great work.
TDPL is finished and due for the regular publishing overhead, which will likely put the book on the shelves in May. It stands at 460 pages, give or take depending on the size of the index. The book contains an embedded test suite that checks code samples and invisible assertions against the current compiler. Walter and Don Clugston are working on eliminating the inconsistencies between the book's description of the language and the actual reference implementation. The last piece of the puzzle, D's new concurrency model, is getting virtually unanimous positive feedback from a very diverse selection of reviewers, which is encouraging because it's difficult to offer a compelling package in today's concurrency crisis. I think D's concurrency offering compares extremely favorably with that of today's mainstream languages. If there's a time to get excited about D, this is it.
Hopefully by summer.
awesome! I look forward to it.
Just so I'm clear, you are making it so that D2 will jibe with TDPL book, so If i program according to the book, I'll be good?
That is correct.
But by the time you get the book the compiler should be stabilized enough.
Yes! D1 must be subset of D2! It's crazy that even simple code breaks when moving to D2. This incompatibility gives only choice between unstable and obsolete, rather than unstable and safe subset.
D is the only project (that I'm aware of) genuinely attempting to bring modern day language technology to systems-level programming. Put another way, D is the only competition C has today, and is currently the only hope that we will get advanced language features in a systems-level programming language anytime soon. C will likely remain around forever; look at COBOL. But new projects of tomorrow have the opportunity to use D if we do the hard work of building a better language today. 
Given that it's competing to be a systems language, why aren't there D programs in the language shootout?
Let's aim low, shall we?
which version of D? The patch appears to be four years old, so I suspect it's D1?
I don't see what the purpose of this is, since code written in D tends to be bug free...
The patch was written prior to D2, but my understanding is that it adds support for some extra debugging information and name demangling. Basically I don't think their is anything new in D2 that would not be covered by the patch. But this is more speculation since I don't know what goes into writing a debugger.
Coders never tend to be bug-free.
of course...I was joking :-)
It's shipping now. Mine arrived today!
Woah really? I'm ordering NOW!!!
Is this release related to D2's?
brilliant stuff....
Does the language discussed in the book actually have an implemented compiler yet? 
Sorry to jump to a dead thread, but are you able to give another estimate for when you think the D2 spec will be finalized? And is there a difference between finalizing the spec and having an implementation (in this case)?
where oh where could a 64 bit dmd be? 
Look out! It's behind you!
It's in The Future™... you know, the same place that has an understandable, completely standard-compliant implementation of C++ for the Intel i27943 CPU and its 65536-bit architecture.
D is a good language very powerfull, the more harder for start is learn the api from tango or phobos. After this step you write D program so easier and quickly :) Only think they are 2 open source compiler: - ldc - gdc LDC is more up to date but thses compiler do not support D2, if some devlopper want help project , you are welcome.
Just for completeness, I should point out the DMD reference compiler front end is also open source.
GDC and LDC should work on ARM. I haven't tried it, but I know someone who got code working on a DS via GDC.
I must say that the acceptance of D on Reddit really has improved. Comments on posts about D are usually constructive or positive in some manner. This could be because every one that hates it is now ignoring it, but it does seem that much more are interested in it but haven taken the time to actually look at it and use it.
As mentioned, GDC and LDC should work with ARM. Both would only give you D1 which is fine as long as you know that is what you are using. I don't know if anyone has actually tested LDC on ARM so some work to make it operational may be required. http://www.prowiki.org/wiki4d/wiki.cgi?D__Tutorial/StartingWithD/Compiler
Hi, that's me. Switch didn't work, exceptions would maybe have worked but I didn't even try; and I gutted the standard library and rewrote parts in terms of libnds. But mostly, it worked. The approach I used was to splice gdc into the libnds build process. Don't forget to `--enable-languages=c,d`!
GDC works. LDC should work, but i do not tested it. 
I think perhaps it's a bad thing for D that there's currently three compilers for a relatively young language like D (or 2.0 in particular). It spreads the effort, and it seems to me that GDC/LDC has been lagging because of it. I wish the main effort was in an LLVM compiler, and that perhaps GDC/GCC was the only major alternative. Obviously more compilers is good over time though. But with all the solid work going into LLVM, it just seems a loss that there's not a working D 2.0 compiler based on LLVM. 
A lot of people in the community think llvm is the better route. Lack of windows exception handling has always been a problem however. If gcc adopts D however, that will be a huge step forwards vs the status quo.
Back when there was only the dmd D compiler, the complaint was that there was only one compiler.
People will always complain ;) DMD alone would not be enough. An LLVM or GCC based compiler alone would perhaps be enough at this stage. The important thing here being integration with existing tool-chains, more backends etc. These are – of course – just my subjective opinions. This might sound a bit harsh, considering you wrote DMD.. But what would the value of DMD be over an equivalent LLVM/GCC based compiler? Faster compile times? I'm just curious. 
First, a backend he is intimately familiar with. Second, exceptions under windows (that's only a problem for LLVM). Third, Look! A three-headed monkey!
This is great. I could imagine it would help spreading D a lot if this works out.... now, if only GDC would support a recent version of D 2.0, I'd be very happy :)
[http://bitbucket.org/goshawk/gdc/wiki/Home](http://bitbucket.org/goshawk/gdc/wiki/Home) It is up to 2.050(current)
that is awesome :)))))
Now that is good news.
Thank you for the info. These are really nice news.
Go's ARM support is pretty good this days, there was quite a bit of work on it during the past few months, and now it is pretty much up to the same level as x86..
You might want to link to the release notes... they are a bit more informative than a zip file.
http://www.digitalmars.com/d/2.0/changelog.html 
The trouble is the changelog, well, changes every release, and I couldn't see a way to get an anchor to a particular version.
http://www.digitalmars.com/d/2.0/changelog.html#new2_052
So, when does a final/stable of dmd2 will come out? they said it would be ready for 2010's summer...
You mystical son of a beech.
Wow. At least. Waiting 4 months for this, when normally new DMD realease was every week, was really strange. Is there any more descriptive information or article about 64-bit support, and how porting of backend was done? PS. And at least 5 important bugs which I wanted to had fixed. I'm very happy. 
Support for octal literals will be deprecated in the next release of D. Instead of 0667, use octal!667.
Probably for the best.
a noble thought indeed
why not 0c667 by analogy with hex literals? easier to type and less cluttered to read.
I'd rather see the base explicitly, such as (10)123 for decimal or (10)667 for octal.
You mean (8)678, right?
0c667 might be better than 0667, but luckily D doesn't need to understand either. It can be done as a [library template](http://www.digitalmars.com/d/2.0/phobos/std_conv.html#octal) instead. This is clearer than either of the others IMO and avoids language complexity. Readability is more important than ease of typing. How often do most people use octal literals anyway?
That was just a waste of time.
This is what excites me about D. Your rewrite of the code is almost as "clean" as the dynamically-typed Python version, but you get all the benefits of type safety, plus a performance boost. Great example! 
I don't understand why nobody's commented on this, I think it's pretty awesome!
I'll be doing all my future projects in D. (Instead of C++.) 
We are using D... http://www.sociomantic.com/careers/#software-developer
Have any of you experienced regressions like one of the commentors wrote?
Well, they are easy enough to reproduce; hunt the issue tracker for "regression" and you'll find at least a few. But the compiler and library teams have really advanced a lot in the last year, in terms of their size, responsiveness and commitment to testing and continuous integration. I don't think regressions are a thing of the past yet, but I suspect to see fewer and fewer in each new release. CTFE (compile time evaluation) regressions in the standard library are still possible, though -- currently no functions in Phobos are *guaranteed* to operate at compile time. However, the recent 2.054 has made significant gains in this area (with a few unfortunate regressions, some of which have already patched in the development trunk).
Upvoted, I think this is a step into the right direction, beginnings of a package manager : ) Oh and btw, windows' download link is broken...
Just as a note, the template parameter `T` for `get` can be inferred, so passing `int`/`bool` isn't required: // T get(T)(string section, string key, T defval) auto i = config.get("Video", "Width", 800); auto b = config.get("Video", "Fullscreen", false); (Although maybe it's good to be explicit as e.g. inference for `long` wouldn't work if the default value fits in an `int`.)
D language would be a great match for what he wants! (A language with good guarantees, good performance and based on C + +) And D have all the points he mentioned: "No arrays unchecked, no uninitialized pointers, No used after free hazzards"
Well I'm sure he's aware of it, I wonder what his take is. It isn't /too/ far from C++ (for his programmers that is). 
John Carmack mentions in report PVS-Studio tool. More details about this C/C++ analyzer: http://www.viva64.com/en/pvs-studio/ Download page: http://www.viva64.com/en/pvs-studio-download/ Free keys for open-source prohects: http://www.viva64.com/en/b/0092/ 
x-posted from [here](http://www.reddit.com/r/programming/comments/jwkvx/suggestions_for_the_d_20_programming_language/)
Note that this refers to LDC not DMD: http://fedoraproject.org/wiki/Features/D2_programming
We already do. For years.
$100m? Out of interest, do you use D1 or D2? (I wrote the original post btw)
Well, I guess not $100m no, but the whole company is basically dependent on an infrastructure written in D (and we have +15 people and are still growing) 
do you use D1 or D2? Do you use some subset of the language, or do you take the whole thing, bugs and all? If you take the whole thing, do you just fix the bugs when you encounter them?
We're using D1 (sorry didn't see the question before) And we are using the whole language. About fixing bugs.. we don't touch the compiler, but we fix bugs in the tango runtime/user library every now and then. If we encounter compiler bugs we report them and work around them.
That makes more sense. I haven't used D1, but I suspect that the rate of encountering compiler bugs is *much* less than in D2. In D2, many language features simply aren't implemented yet, but this isn't documented anywhere (except the bug database).
Does that by chance mean you work for sociomantic?
Link says last version is 0.23.
That's the older version. Click on the "Download" link which is right next to "The lastest revision in developing Zip :"
Ooh, this is exciting. How does it do against sawtooth data, for example, data generated by foreach(i; 1..n) foreach(j;1..i) arr ~= i^^3 + j^^3; 
Not sure about that. A test could be useful here.
Unless you are the author and are asking for volunteers, someone is already porting Scintilla to D: https://bitbucket.org/heromyth/scintillad/wiki/Home
You haven't got a template parameter list `(T)`: T[] genArray(T)(T function() gen)
Thanks! Now I'm curious: How can I pass and accept a collection of lambdas, each with different return types? And how can I call a function on a collection of values, something like Lisp's `(apply f args)` ?
Use std.algorithm.map `map!f(args)`. Look at the source of std.algorithm to see a lot of examples of that sort of code if you're curious about how. Most of these expect homogenous ranges, for heterogenerous ones a different approach may be warranted.
"Deimos is a collection of C header files to publicly available C libraries and their translations to D.": https://github.com/D-Programming-Deimos/
Not quite, `map` applies a 1-ary function over a list of arguments, whereas `apply` would apply an n-ary function over a n-length list of arguments. E.g., if f() takes 3 int arguments, then we can do: args = { 1, 2, 3 }; f(args[0], args[1], args[2]); But I want to do this for an arbitrary number of arguments.
Thanks for sharing this. I just started looking into D yesterday after going through a few chapters in an ooc.pdf that shows how to be object oriented in ansi c. D is awesome and I feel lucky to be able to *be part* of it at this stage. I've enjoyed ruby, c# and even c++ and agree with the D philosophy. I'm inspired and solidified knowing that it will be part of gcc proper :)
This subreddit is pretty inactive. I'd try asking on [D.learn](http://forum.dlang.org/group/digitalmars.D.learn).
I've heard nothing but good things about Adam Ruppe's D web stuff. I believe he uses it professionally.
I don't know anything about DSSS, but it looks like it hasn't been updated since 2008.
I'm a newbie like you, and don't really know anything about DSSS. The project seems abandoned. Dfeed uses rdmd as its build tool, and there is also waf which supports d. From what I can tell, rdmd is similar to the go command for golang.
rdmd looks useful, but only if there are no external library dependencies (unless I'm missing something; I've been through the [man page](http://dlang.org/rdmd.html) but couldn't find any reference to libraries) Do you know how I can specify that it needs to link against gl3n? 
I'm not sure. The source seems to be an easy read though: https://github.com/D-Programming-Language/tools/blob/master/rdmd.d
You can also check out the [Rootin Tootin Web Framework](http://rootin.toot.in/). It has a very interesting architecture and a lot of modern web features integrated.
Dlang really is the king of compile time features! And it's generic programming capabilities are great. I think those make Dlang unique, and very powerful. 
DSSS it's dead Jim
The website is down? I can't access.
how did it go?
Surprisingly, apart from an assertion that was triggered and brought down the server in the first night, there were no other stability problems. We fixed a bunch of smaller (documentation) issues on the website itself, though.
There's [ncurses from Deimos](https://github.com/D-Programming-Deimos/ncurses), but I'm not sure about how complete/usable it is.
ycurses worked for me with some finagling. 
Maybe it's just late, or I don't know Java very well, but I don't see how this is particularly different from Java (anonymous) inner classes.
Not the same at all, Java anonymous classes could be named by the programmer easily. If I understand this correctly it is like saying GNU stand for GNUs Not Unix or something like that. You can't actually expand a formal name for the type itself so the only way to deal with it is to use auto. 
static immutable lets you define at compile-time as well that was before I learned about enum...
nice, that actually makes the intent clearer than `enum` does.
Yeah, I'll get back on it eventually.
Haven't read the article until now, because I thought it's about the Voldemort database. 
You should use more templates to do more generic functions. For example, in **shapes.d** **latSurfAreaRectPrism** function can be rewrite to: pure auto latSurfAreaRectPrism(T=real, U=real, V=real) (T w, U h, V l) if (__traits(isFloating, T) &amp;&amp; __traits(isFloating, U) &amp;&amp; __traits(isFloating, V)) { return ((2 * (w * h)) + (2 * (l * h))); } Get a view to my [toy math lib](https://github.com/Zardoz89/zmath). It the first thing that I did with D language at same time that I was learning it. It's a crappy piece code but use template features to be generic. 
This guide by Philippe Sigaud is supposed to be very good. [D Templates: A Tutorial](https://github.com/PhilippeSigaud/D-templates-tutorial/blob/master/dtemplates.pdf) (click View Raw to download the PDF).
thank you for that I'm reading it now, it's rather long!
Came here to say about vibe.d. Two months too late :(
Why was I logged in under a Throwaway account??? Anyways this is my main account, messaging Thrower is not likely to achieve very much...
Relevant to my interests. Has anyone kicked the tires on this yet?
I just checked, no docs, listed API or example code. I'm using Derelict2 now for the same reason. At least there are a few examples (that all need adjusting, as it looks like the packaging changed a few times). Docs seems like D's weak point at this point.
I don't know much about memory management in D, but I do know that manual memory management can be used instead of the GC. Would you mind explaining why D is inferior to C++ when used this way? I imagine that its template system would let you use all the same sorts of smart pointers available in boost/c++11. Or not?
The problem is specifically that the D 2.0 Library (Phobos) oftentimes relies on the GC, and worse there's not a very good method to communicate what specifically relies on it. I believe Array Slices and a couple other built in language features also rely on it.
Alright, so, I've nailed this problem down a little bit. I've made a simple program in C++ that calls LoadLibrary. When I call LoadLibrary from main(), all is well, and nothing goes wrong -- however when I call LoadLibrary from a thread created by CreateThread, it crashes. It seems to be a threading problem.
Great. I finally get around to making a stack overflow account, and I end up on Reddit. Figures.
Update again for anyone searching google, I believe a thread hijack DLL injection might work over CreateRemoteThread. I'll post the results of my theory on here and dlang when I have the time.
Alright, here's the final version: http://s0beit.me/d/d-module-injector/ Hope anyone reading appreciates it, I guess.
&gt;but work is being done to improve the situation They've tried so often. It never gets better. &gt;One of the Google's Summer of Code project was to make the GC a precise GC, which was achieved and is in the process of being integrated. Funny. I made the D GC precise some years ago (didn't do precise scans on stack and data segment though). It made the GC slightly slower, but solved the leak problem. It was completely ignored.
Hint: personally, I have no idea what this is about, and I'm too lazy to google what ever the heck QuickCheck even is. You might get more exposure if you add a description and talk about the purpose of all this.
I believe they were able to get a recording setup and the talks will be posted after the conference, but I can't remember where I read that. 
I asked the D group a while ago and IIRC, yes, they will be recorded.
Recording will be up to the presenter. It sounded like one may not since it wasn't said "all" would be.
Solution: http://forum.dlang.org/post/km3k8v$80p$1@digitalmars.com Liabilities: http://forum.dlang.org/post/km4rtm$239e$1@digitalmars.com
Just so you know, videos and slides for some of the talks are [up on the website](http://dconf.org/schedule/index.html), including the one you're interested in.
I *really* want to use D, but the toolchain sucks ass. It really does. It's almost impossible to get anything going that uses 3rd party libraries. Support sucks. D is a great language, but its implementation fails hard.
It just needs more manpower, that's all. More users, more contributors... more incentive to fix the things that are wrong with it.
I periodically check the [gcc-patches mailing list archives](http://gcc.gnu.org/ml/gcc-patches/) for emails that might give up some clues as to the status of GDC incorporation in to GCC. So I'm very glad to have been able to see a summary of the progress of this project. It's also fascinating, as someone who isn't involved with GCC, to hear about how some of its internals work. Thanks for your hard work, Iain! I'm looking forwards to seeing GDC shipped with GCC!
Thank you very much for posting the video, I can't wait for "Web Development in D" by Vladimir Panteleev
Thank you :)
Have you asked on the [forums](http://forum.dlang.org)? I don't go graphics in D; there are a number of options, but I can't speak to their suitability. 
Cool! I look forward to playing with this. Someday it would be great to have something like it in Phobos.
As of today (Jun 7), not all the videos are available (either through torrent or other channels), but Mr. Sabalusky is keeping the page well up to date. Be the first on your block to grab (and reseed!) them all!
GTKD. It works, it's multiplatform, and makes using GTK much more easier. But the documentation is horrible. http://gtkd.org/
I did a small scale test with D this last year. It was the N Body problem made straightforward in D using "parallel foreach". I tested it in a machine with 16 cores and I got a speedup around 14 with 10000 bodies. https://github.com/Zardoz89/nBodySim D can do this job, only need a official binding to MPI or a native port of it. 
Good timing. I used D for the first time a few weeks ago. I've done almost all of my work in D since. MPI is my last concern, so I'm going to have to take a close look at this paper.
Sooo... does that imply it builds &amp; works for sparc, but possibly not the library?
vibe.d has all the source available on github
Beyond easier sharing across threads, and safer (no copy on write - COW) substring operation (which is more common, than things like lowercase, which needs to perform mutation - but still can return old version if string is already lowercase), there is one more good reason - keys of hash maps. When doing associative arrays lookup using hash map, you need to compute hash, and then still check key equality due to potential collision. When using mutable strings, hash map would need to make own copy of key and remember it until item is removed, because it is unsafe to assume it will not change, breaking invariants. By typing it immutable, there is no need to copy and it is safe to do so. Similar arguments is also valid for tree-based structures, as each node in binary-tree will still need to have a key to determinate equality or less/more predicates. Also on many platforms, literal strings like "xyz" in source code, are placed in special segment, which is read-only (which is the case of Windows). Getting pointer and trying to write there will actually result in hardware fault and program crash. This is mostly made to prevent some security issues, like buffer overflows I think. 
[**@incomputable**](https://twitter.com/incomputable): &gt;[2013-10-10 23:07:15 UTC](https://twitter.com/incomputable/status/388440621452500993) &gt;First D language commit at Facebook. 5112 lines of sweet code! [#dlang](https://twitter.com/search?q=%23dlang) [#ilovemyjob](https://twitter.com/search?q=%23ilovemyjob) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1o6p55%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
A lot of good responses. string immutability + slicing makes D really efficient for string processing. std.regex is one of the fastest regex engine (the fastest if you now the pattern at compile time !) and Tango.xml is one of the fastest xml parser. The fact that amateur people can write software that beat what professional teams produce is a very good indicator that the string design in D is the right one.
very good to see D being backed by a major player. I hope this will give D the momentum it needs to get a wider audience...
he's writing a faster scala compiler
FUCK YEAH. i've been waiting so long for this since andrei is working for fb. please post a follow up. i'm really curious about the improvements.
It's really cool that D is used at Facebook, but for those not already initiated, where exactly is this code used? "committed the first 5112 lines of D code to Facebook's repository." doesn't mean much to me, as surely FB has many repositories. The only thing I can think of that's FBs and written in C++ is HHVM.
In Andrei's AMA last week, he [cited](http://www.reddit.com/r/IAmA/comments/1nl9at/i_am_a_member_of_facebooks_hhvm_team_a_c_and_d/ccjlvoq) a roughly 70/30 ratio for PHP and C++ in terms of lines of code. Much of Facebook's infrastructure is written in C++ - deployment and service discovery systems, the backends to services like feed and search, and so forth. On the open source side, there's HHVM, as you mention, and [Folly](https://github.com/facebook/folly), which you can think of as Facebook's core C++ code used by almost all C++ applications.
I'd recommend to ask that on forum.dlang.org , this subreddit is not really followed by many D developers.
&gt; What makes it worth adopting over other more popular languages? Depends on the need. D is not the right solution for a 20-developer HTML5+CSS web application, try JS or jQuery or Python or something like that. But if you are looking an OpenGL game engine, or a user-facing GUI app, or a fast-as-hell network backend, consider D. D's other strength is that it is cross-platform. It is _almost_ as easy to do cross-platform work in D than Java. &gt; What is it similar to? D's syntax can look very similar to C and Java, enough so that some constructs don't even need to be transliterated at all. Its library very loosely resembles Java, but its runtime is closer to C++ than Java. However it can also do some Python-like things (allegedly, I'm not a Python'er). &gt; Is it worth devoting time to right now? Yes. IMHO anywhere you are looking where Java, C, or C++ might work, then consider D first. Garbage collection is very nice, cross-platform is very nice, just the general "feel" of the language is really good for how I think. 
Care to elaborate? Are you using Scala metaphorically?
A quote from D forum: "Today I committed the first 5112 lines of D code to Facebook's repository. The project is in heavy daily use at Facebook. Compared to the original version (written in C++) we've measured massive wins in all of source code size, build speed, and running speed. In all likelihood we'll follow up with a blog post describing the process."
Any recommendations for intermediate books with game dev emphasis? 
"Modern" HTML+CSS stuff pretty much requires a framework to do right these days, and it is very difficult to find 20 people competent in D for a single project. That's what I meant by look elsewhere, it's more a programmer/tools ecosystem than language issue. That said, in D you have vibe which is really neat, it's both a servlet-like engine and a templating system. A basic web site "hello world" in vibe is a matter of a few minutes and it will scale to thousands of connections for you. If you wanted to create your own basic HTTP server it would be a matter of a weekend or two as TCP servers are very easy (std.socket.ServerSocket). I have a basic multi-threaded network daemon in less than 500 lines that uses select() so will scale to dozens but not thousands of connections. Adding the HTTP protocol to that would be somewhat tedious but not really hard. There are some libraries on [Wiki4D](http://www.wikiservice.at/d/wiki.cgi) that could be useful. Mango is a bit old but was working on a Tomcat-like experience. 
Associative arrays are actually hashtables/dictionaries, which means that they can't be sorted. e: [wikipedia](http://en.wikipedia.org/wiki/Hash_table)
I shouldn't have skipped that class twenty years ago ;-) Thanks !
 import std.stdio; void main() { ulong[string] arr; arr["foo"]=1; arr["bar"]=2; arr["foo"]=45; foreach( thing;arr.keys.sort){ writeln( thing, ' ', arr[thing] ); } foreach( thing;arr.values.sort){ writeln( thing ); } } 
Link is broken.
I found this in /r/programming 
Not a gaming library per se, but there was a discussion about an alternative standard library that was created for making games by reducing the use of the garbage collector. I know it's in the D forum archives somewhere and perhaps this sub-reddit. Depending on the type of game you're writing, it may be worth looking into.
I just wish more of Derelict was parted out into the DerelictOrg libraries so I could only include the ones I need as a dependency. A good chunk of them are already separate, but things like DerelictLua are still only found in the complete Derelict package. Despite this minor drawback, the libraries are good and you dont really need much more than them to write games. Yes its not quite a framework, but after a couple of small games you'll likely develop your own personal pseudo-framework anyways. 
I suspect the difficulty in game-writing-in-D is not "Gee, I wish there was no garbage collector" but rather "Gee, I wish someone would take care of 2D primitives, texture loading, keyboard/mice/joystick handling, input abstraction, save game abstraction, tile-map systems, collision detection, model-entity systems, modding support, online lobby/matchmaking, etc. for me."
Understood. I just wanted to make the OP aware of it as it may prove useful in certain games, such as an FPS. Phenax provided information regarding what you mentioned.
I don't think so, sorry. Good idea though!
I do recall seeing a presentation from the D conference about a program used to check D source code. I can't remember what it was called, and I don't think it was a full "lint"-type program, but it did have some of what you may be looking for. One moment while I check the internets. http://www.reddit.com/r/programming/comments/1g6xbi/dconf_2013_code_analysis_for_d_with_analyzed_by/
I don't think it was freely available, or open source, either. :( But you're right. It did look pretty cool. Hmmm, just did a google search and looks like the web site was down back in March too. So it's either down a lot, or hasn't been there for a while.
The website did have a description of all of the guidelines it had and the rationale so it was at least useful for that.
There's a DWiki page listing some: http://wiki.dlang.org/Libraries_and_Frameworks#Game_development_and_Multimedia Also, [dub](http://code.dlang.org/) now has a category view and searching, so it should be easier to find new packages relating to game development, e.g. [here](http://code.dlang.org/?sort=updated&amp;category=library.graphics).
Looks good! I think you're off to a good start. :) You can initialize your `denom` array at all once, without having to make the individual values first. See below. I also made a few other tweaks, just as examples of what could be simplified (left off the Coin type in the foreach loop, removed the name/value lablels in the constructor calls). void main(string[] args) { auto cents = to!int(to!float(args[1]) * 100); Coin[] denoms = [{ "quarters", 25 }, { "dimes", 10 }, { "nickels", 5 }, { "pennies", 1 }]; int numCoins; // Max number of current Coin which can fit in cents foreach (coin; denoms) { numCoins = countCoins(cents, coin.value); if (numCoins &gt; 0) { writefln("%d %s", numCoins, coin.name); } cents -= (coin.value * numCoins); } } 
Follow-up error-handling challenge! In Canada, we also have two-dollar and one-dollar coins ("toonies and loonies"); but more importantly, we no longer have pennies. So we would have a remainder when `cents % 5 != 0`. (Practically, we round costs to the nearest five-cent increment in the case of such a remainder.)
Great! I couldn't find any good examples on how to initialize an array that way. I'm really just learning by experimenting right now. Glad to know I didn't do anything completely stupid at least. :-)
hone your skills in /r/dailyprogrammer
I just started learning D a few months ago, so I feel like I was in about the same place you are. What did it for me was to read, cover-to-cover, Andrei Alexandrescu's [book](http://www.amazon.com/exec/obidos/ASIN/0321635361/classicempire) on the language. He covers the core language and explains the reasons for most of the design decisions, and he's actually fun to read. (For a programming text, at least.) After I finished the book and did some simple programs to get used to the language, the references on the website (dlang.org) were enough for me to start using D for real stuff. YMMV, of course. I'm not at a level yet where I feel qualified to answer some of the more detailed questions you've asked -- hopefully others will come along and give a more experienced perspective.
&gt; What's the standard for building a large D program? Is it typically a Makefile like a C program? There are a few approaches you can take. You can just use makefiles like you mentioned. Use D itself in script mode and provide a build.d file. The D compiler has the ability to compile and run files that start with a shebang (#!), so many people use it like this and just do a _dmd build.d_. In this case a better way is to use rdmd, which is able to check the dependecies between modules and only compile what is required, in the right order. http://dlang.org/rdmd.html You can also use dub, see below. There some community members contributing to scons, https://bitbucket.org/russel/scons_d_support &gt; What about packaging and distributing a program? Source tarballs? Are there any special tools (e.g., autotools) that are normally used? Dub, which was initially created for the vibe.d project has been chosen by the community for such tasks. https://github.com/rejectedsoftware/dub Packages visible at http://code.dlang.org/ Finally are you aware of the wiki? It is located at http://wiki.dlang.org/The_D_Programming_Language Finally, you can also have a look at the contributions the community has done to Rosetta Stone, as a means to see how idiomatic D looks like. http://rosettacode.org/wiki/Category:D
Looks like you already found [my tutorial](http://qznc.github.io/d-tut/). It is aim at experienced programmers like you. You questions should be answered there, but currently are not. Thanks for reminding me to work on it. If you have more questions, which should be answered in my tutorial, mail me. Address is in the tutorial's footer.
Hi, you have to poke Aldacron about it. Just suscribe on The One With D Forums and ask for it. That said, I'm not sure he still want to maintain it. The alternative is to create your private Derelict package and publish in on the dub repositery, that way not all D bindings will rely on a single man effort. There is several such "extras" repositeries already.
Did anyone go last year? Were any of the sessions in interpretive dance format (see submission guidelines)?
I didn't go, but there are people who did! Videos are posted on the schedule page for last year. Some of the talks were pretty good. I haven't watched all of them yet (hence some).
Have you seen [vibe.d](http://vibed.org)?
[std.conv.parse](http://dlang.org/phobos/std_conv.html#.parse) should be the solution. The documentation also describes mixed content. Basically, std.conv contains everything about "converting from one type to another".
Does something like this work? import std.conv; ... auto fields = split!(string)(line); float myThing = to!(float)(fields[3]); 
Parsing is a fairly ubiquitous task. If you can provide a complete, minified data set (or a few), and specify the desired output somebody would probably write the code for you as a learning exercise.
As suggested by doubleagent03, here is an example of what I am working with. The file I am parsing has lines line this: neg_gen_n1199 CTCTCTCCAATATCTCTCCCTCTCTTTGAGTACTTA 8 1617.10 3110.78 9051.10 12019.32 178349.06 206993.44 98899.29 6589.43 mreP_gen_n1953 CCTTTAGTTCTCAGCGAGAGAGATAAGCTCAGCTTC 8 1540.94 2412.37 8779.95 12423.45 152092.50 167079.46 79090.03 5825.54 mreP_gen_n2906 CAGTCTGTTTTCCTTCTCGCTCTTTCACTTTGCACT 8 2631.18 18397.49 20476.95 21311.45 164785.34 183906.33 98013.52 5389.70 ntil_nochp_n22_p60 CGTTTCGCTGTGGCTGACAGATGGCCGAGTGCTGCA 8 1702.73 2373.76 10810.56 13664.60 126933.54 147281.12 69013.62 4388.00 mreP_gen_n477 CAAGCTAAAACAGCAGACAGAGATAGCATCGCAACA 8 1771.95 8105.75 14892.47 15945.46 165878.40 175826.05 88582.33 5178.85 The code I am using looks like this: auto fileHandle = File(file); foreach (fileLine; fileHandle.byLine ) { auto fields = split(strip(fileLine.idup), "\t"); float dataField = to!(float)(fields[3]); writeln(dataField); // Debugging .... } This code compiles without warnings, but when run I get the following exception thrown: std.conv.ConvException@/usr/share/dmd/src/phobos/std/conv.d(2608): no digits seen ---------------- 5 make_background_dist_from_tiling_probes 0x000000010f03f6db pure @safe float std.conv.parse!(float, immutable(char)[]).parse(ref immutable(char)[]) + 6043 6 make_background_dist_from_tiling_probes 0x000000010f040426 pure @safe float std.conv.toImpl!(float, immutable(char)[]).toImpl(immutable(char)[]) + 38 7 make_background_dist_from_tiling_probes 0x000000010f0246d9 _Dmain + 1869 8 make_background_dist_from_tiling_probes 0x000000010f064cc5 void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll().void __lambda1() + 33 9 make_background_dist_from_tiling_probes 0x000000010f064c11 void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) + 45 10 make_background_dist_from_tiling_probes 0x000000010f064c71 void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() + 45 11 make_background_dist_from_tiling_probes 0x000000010f064c11 void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) + 45 12 make_background_dist_from_tiling_probes 0x000000010f064b8d _d_run_main + 449 13 make_background_dist_from_tiling_probes 0x000000010f024d78 main + 20 14 libdyld.dylib 0x00007fff863347e1 start + 0 15 ??? 0x0000000000000005 0x0 + 5 ---------------- 
If you wrap the `to!(float)(fields[3])` in a try/catch and emit the fields[3] string in the catch block, what does it have?
Sorry, can you clarify exactly how I should do that? I am new to D, so I would rather just write this try/catch statement correctly the first time. Thanks.
Okay, so I have tried it like this: try { to!(float)(fields[3]); } catch (Exception exc) { writeln(exc.msg); } Which throws the following error on each line: "no digits seen" with the float number below that on a new line.
How about this: try { to!(float)(fields[3]); } catch (Exception exc) { writeln("does not appear to be a float: '%s'", fields[3]); writeln(exc.msg); } My guess is that the whitespace is being passed to to! which is complaining.
I think that's the problem. I get results like this: does not appear to be a float '%s' 1617.10 no digits seen Wrapping 'fields[3]' into 'strip' seems to get rid of the problem: to!(float)(strip(fields[3])); Awesome! Seems to be working now!! Thanks so much for you help, zufuss. I also found an alternative solution using std.csv, but it's a lot more verbose and you have to define types for all the column fields...
1) Cross-platform command line should be just fine. GUI frameworks are not a strong point so far. DWT (port of Javas SWT) or GTK bindings are the usual recommendations. 2) The standard library is cross platform. It includes bindings to libcurl, which is the swiss army knife of networking, so HTTPS should be covered. D uses the same linker as C/C++, so static vs dynamic libraries is the same there. Take a look at [Vibe.d](http://vibed.org/). 3) Use the dmd compiler. If you need an extra ~10% boost from compiler optimizations look at gdc/ldc. There are plugins for various IDEs in various quality. I use vim, so no experience. My [tutorial](http://qznc.github.io/d-tut/) is aimed at programmers like you. If you hit any pitfalls, pester me to improve it. ;)
Thank you. I'll definitely go through it all. I did in fact stumble across Vibe.d earlier, but I had gotten the impression it was a framework focused on server processes; thank you for making me look at it a second time!
I'm about a third into the book and I've been enjoying the read. The content is very informative (explaining why some things are the way they are in D) and well-written.
&gt; The last post made me think it was a generic socket-and-http handling library in the same vein as curl but with a D-specific/optimized twist. :-) According to one of the vibe.d developers, [you can use vibe.d as a library](http://www.reddit.com/r/programming/comments/1o7p2f/facebook_is_using_d_in_production_starting_today/ccpowey). I haven't done this, and can't speak to how it works as a network client library (rather than a server library). I know that it isn't limited to HTTP; you can write general socket servers using vibe.d. 
This would be the most straightforward approach: Piece[] pieces = [ new Piece(Color.BLANKCOLOR, Type.BLANKTYPE), new Piece(...), ... ]; Board board = new Board(pieces); writeln(board); But I'd also very much recommend initializing the *pieces* array by loading from a text file. It's generally bad practice to write such things out in code. Good luck!
I agree with your code suggestion, but don't think there's any reason to get that out of the code. It's not like the rules of checkers are going to change. For practical purposes, this is hard coded, so you might as well hard code it.
Good point. Still, since the pieces follow a pattern, they could at least be generated with one or more for loops.
To avoid repetition, you could: * Use `with (Color) with (Type)` to bring the enum values into scope. * Maybe use variadic template args for the Board constructor: `Board(T...)(T args)`. Call it with `new Board(BLANKCOLOR, BLANKTYPE, BLACK, MAN, ...)`. The constructor then allocates `board` with length `args.length / 2`. The constructor then fills `board`, creating new `Piece`s for the elements. It should be possible to write template code for `args` equivalent in efficiency to your original code. Maybe this is a bit OTT though ;-)
Why not create an empty board and then add pieces to it one by one, or with another function, row by row. Board board = new Board(); board.addRowOfPieces(Piece(Color.BLANKCOLOR, Type.BLANKTYPE), Piece(Color.BLACK, Type.MAN)); board.addRowOfPieces(Piece(Color.BLACK, Type.MAN), Piece(Color.BLANKCOLOR, Type.BLANKTYPE)); board.addRowOfPieces(Piece(Color.BLANKCOLOR, Type.BLANKTYPE), Piece(Color.BLACK, Type.MAN)); board.addRowOfPieces(Piece(Color.BLANKCOLOR, Type.BLANKTYPE), Piece(Color.BLANKCOLOR, Type.BLANKTYPE)); board.addRowOfPieces(Piece(Color.BLANKCOLOR, Type.BLANKTYPE), Piece(Color.BLANKCOLOR, Type.BLANKTYPE)); board.addRowOfPieces(Piece(Color.WHITE, Type.MAN), Piece(Color.BLANKCOLOR, Type.BLANKTYPE)); board.addRowOfPieces(Piece(Color.BLANKCOLOR, Type.BLANKTYPE), Piece(Color.WHITE, Type.MAN)); board.addRowOfPieces(Piece(Color.WHITE, Type.MAN), Piece(Color.BLANKCOLOR, Type.BLANKTYPE)); 
Thank you, making the pieces classes was a silly mistake. String initialization seems life a good way to do it
Wouldn't that be just as long, just split up into more lines?
I would assume no, sorry. Maybe its time to try Linux?
I use Linux quite often. The point of trying to compile things on such an old computer to see if it would work was for my own amusement.
Oh, well, that message is just saying that it can't find a SwitchToThread function in KERNEL32.dll, a.k.a. its too old. Your only hope would be to find another compiler with a runtime that doesn't use that function (or write your own). However, SwitchToThread likely isn't the only thing missing, its just the first part that your program came across, and even if you do find another compiler that doesn't use it there will probably still be other missing parts. DMD is written in C, so it uses a different runtime than what it makes does, which is why compiling works. The furthest back you can go in the windows world is probably 2000. EDIT: Left out multiple words in a row.
Ah, thanks for the explanation. I couldn't imagine writing my own runtime, heh.
XP is the oldest targeted version by D.
 auto Prisoner1 = cast(Prisoner) p1.create(); Seems a bit smelly. The class'es carry no state, hence not really classes. Really you have a list of function pointers. You would do better with function pointers rather than classes.
You have a lot you can improve upon in this code. I have tried to explain why I'm doing what I'm doing, but if you have questions please ask. I will not make any changes to the Prisoner class or any of its subclasses. OneTimeGame is very problematic. You cannot pass a Prisoner object into your function. So say you have your prisoners have names and an age, your current function couldn't take those objects. You can only take a type, which defeats the purpose of having a class in the first place. To fix this you can make the function take 2 Prisoner objects, which will take Prisoner (or any subclasses) objects. Also the reliance on ClassInfo makes it horribly unsafe. It would be easy to pass something into the function that was not the Prisoner ClassInfo. Also, whenever your code uses OneTimeGame, it allocates **a lot** of prisoner objects that are then immediately scrapped. You end up wasting a ton of time allocating/freeing objects. So a better version of OneTimeGame would be: // Plays n numbers of games // Allows Prisoner (and subclasses) Objects int[2] playNGames(int times, Prisoner p1, Prisoner p2) { int[2] results; foreach(n; 0 .. times) { auto c1 = p1.getChoice(); auto c2 = p2.getChoice(); auto gameRes = outcomes[[c1, c2]]; // Adds arrays element wise, just slightly shorter to write // It replaces the lines: // results[0] += res[0]; // results[1] += res[1]; results[] += gameRes[]; } writeln("Results: ", results); return results; } This code is much cleaner, safer, more versatile, and much faster. However, this will mean we will need to rewrite some code in main as well. Now we must allocate three prisoner objects, and pass them in. While you could give each prisoner a name field (so you could name them something like "Dave", "Mary", "Chris" at runtime), I just continued with just using the class name. void main() { writeln("Prisoner's Dilemma"); Prisoner[] prisoners; prisoners ~= new RandomPrisoner(); prisoners ~= new Always0Prisoner(); prisoners ~= new Always1Prisoner(); // Now you have an Associated array that has a key of type Prisoner int[Prisoner] results; foreach(p; prisoners) { results[p] = 0; } foreach(p1; prisoners) { foreach(p2; prisoners) { writeln(p1.classinfo.name, " vs ", p2.classinfo.name); auto this_results = playNGames(100000, p1, p2); results[p1] += this_results[0]; results[p2] += this_results[1]; } } writeln("Results:"); foreach(k, v; results) { writeln(k.classinfo.name, " spent ", v, " years in prison."); } } A few notes about style (these are personal opinion). Writeln is often a little nicer to use than writefln. I prefer it in most cases. It is also better to write local variables with the first letter as lower case.
In the current implementation, I agree. I do want to eventually pass the results back to the prisoner in order to simulate a repeated prisoner's dilemma, so I created everything with classes at the start in order to support that in the future. Whether over-architechting it is another code-smell remains to be seen! ;)
&gt; OneTimeGame is very problematic. You cannot pass a Prisoner object into your function. So say you have your prisoners have names and an age, your current function couldn't take those objects. You can only take a type, which defeats the purpose of having a class in the first place. To fix this you can make the function take 2 Prisoner objects, which will take Prisoner (or any subclasses) objects. My intent here was that the classes will eventually support a repeated game where they will be informed of the other player's choice and be able to use that information in future games. I figured that instantiating the class every time would prevent the class from 'cheating' in the one-time game where it isn't allowed to know the results. I can probably accomplish that by just not informing the object of the results in the one-time case. I would also need a reset method to prevent information from leaking from one pairing to another. I quite like what you've done. It's not as idiomatic as what /u/nascent wrote, but I can definitely see the improvement over my first attempt!
Ok - I do have one question that jumps out right away: &gt; PrisonTime opBinary(string op)(PrisonTime rhs) { &gt; PrisonTime pt; &gt; pt.prisoner1 = prisoner1 + rhs.prisoner1; &gt; pt.prisoner2 = prisoner2 + rhs.prisoner2; &gt; return pt; &gt; } It doesn't look like this is used anywhere. Would this be called as part of your commented out map/reduce code?
Yes, that is required by reduce to sum all the values. If I played around with it and mapped some new types it may be possible to actually get reduce to give a grouped count, but in its current state isn't correct.
It should be noted I was very bad here. I should have either added a condition that op was + or implemented for all binary operations, I've done both below: PrisonTime opBinary(string op)(PrisonTime rhs) if(op == "+") { PrisonTime pt; mixin("pt.prisoner1 = prisoner1 "~op~"rhs.prisoner1;"); mixin("pt.prisoner2 = prisoner2 "~op~"rhs.prisoner2;"); return pt; }
I tried DSFML a few months ago, but was not able to get it link correctly. I'm not too familiar with D:s linking system so I couldn't figure it out back then. It seems there's now a package system(?) called DUB, maybe I could give it another shot now. Anyways, I love the idea, this is a great project.
If it was a few months ago, then I wouldn't doubt you having trouble. The tutorials,though I'm sure they could still use some work, are a little bit better so I hope you give it another shot. I've also recently added links to prebuilt binaries for the C back end in the readme and wiki so you no longer have to build those from source. There is also a dedicated DUB tutorial as well if you want to use that.
Don't want to sound negative, but there were dozens of libraries ported/bound to D that were soon abandoned and left to rot. Having something currently working is nice, but there is no guarantee that it will still be usable even after couple of months. This is a critique of the D devs primarily, who should really give some incentives to the library maintainers, so those are also kept up to date. It can't all depend upon good will and volunteer work.
Great work, thanks for sharing! I have been using the derelict bindings to SDL2, but I will have to check out SFML at some point.
The instructions seem to require to download "a build of the DSFML 2.0 shared libraries", and then provide a path to those libraries in the dub lflags settings. Shouldn't you arrange it so that you just tell dub that you have DSFML as a dependency, and dub will grab the relevant libraries and put it in the relevant location?
Unfortunately, it's not that simple. What the instructions are truly referencing to are [DSFML-C](https://github.com/Jebbs/DSFML-C) shared libraries. DSFML is written in D, and thus can be used as a source library – meaning no static or dynamic libraries required. DSFML-C is basically a link between SFML and DSFML. The reason it is needed is that it is not trivial to create D bindings for a C++ library. SFML is a C++ library. There exists CSFML (SFML in C) which you **can** easily create D bindings for. However, D currently has some [limitations](http://d.puremagic.com/issues/show_bug.cgi?id=5570) passing structs/complex numbers as function parameters to external C functions. Which is why DSFML-C was created. DSFML-C is primarily written in C++. You use CMake and get some dynamic libraries (.so/.dll) and import libraries (.a/.lib) out of it. DUB wasn't really made to grab dynamic and import libraries built from another language for you. It's mostly for grabbing D libraries and projects. If the D library or project makes dlls or whatever for you, that's fine. But it's not going to grab a C++ project and make the dlls for you (that would be kind of weird and hard to do). Perrsonally, I don't do the lflags settings thing. This would cause a problem in a collaborative project as people might have them in different places. I stuck my lib files in my D installation's lib directory. Although you can also just use command line parameters to specify it. Overall, it's not a huge problem, but I think it can be solved in a better way in the future.
I was offering a way to stick with this computer and be able to program in D. Windows 95 doesn't support it and I doubt the computer would be able to run a newer version of Windows, so... Linux. Also, I'm actually a fanboy on both sides. Fuck Apple.
Cross-posting since it was not posted here originally. This way others can see the comments in the original thread as well.
Thanks, I was looking in std.stdio for the format specifiers.
I recommend trying this D library for user input: https://github.com/JesseKPhillips/JPDLibs/blob/cmdln/source/cmdln/interact.d
I don't use pipe!() anymore, not since we got UFCS. So instead of: pipe!(map!(x =&gt; x * x), sort)([2,3,1]); do: [2,3,1].map!(x =&gt; x * x).sort;
I don't use either, but I think I could put *compose* to use at times. I like many things in std.algorithm, but I think that is obvious.
In terms of allocations, things are improving. But until std.allocators is complete, all allocations are done using the GC.
Honestly, I'm not sure. There's talk about overriding the default allocator, but not sure if that will get put in. Some functions or data structures would certainly allow an allocator to be passed in, but I'm not too certain beyond that.
I think the long term plan is to have all functions/datatypes that allocate take an allocator as a parameter (with it presumably defaulting to the GC)
Slight correction - internally std.container uses malloc and free, which are also used in various other places. Some allocations are reference counted.
Trapping signals is pretty straightforward. I don't remember exactly which module you need to import, but it's something like `core.sys.posix.signal` You use it like this: // in your setup code: signal(SIGINT | SIGHUP, &amp;onSignal); And define: extern(C) void onSignal(int sig) @safe nothrow { if (sig == SIGINT) // graceful shutdown else if (sig == SIGHUP) // reload config } I'm working from memory here, so I might have gotten order of arguments wrong, etc. One tricky thing is that the signal handing function needs to be nothrow and chances are that your config-loading function won't be. One trick I use in these sorts of loop-forever programs is to simply have some `bool` flags indicating that something should happen. E.g. a `reloadConfig` flag that the handler simply sets to true and that the loop checks as it goes round (be sure to reset to false). In a similar fashion, handling SIGINT as a graceful shutdown command can be implemented by having your main loop be a `while (keepRunning)`.
[SDL](https://github.com/Abscissa/SDLang-D) is an interesting prospect for configuration files.
The page that you have posted already explains how to define dense arrays.
D does support syntax like "a[5,6,7]". http://dlang.org/operatoroverloading.html#Array There is also SciD, a scientific computing library with BLAS bindings. https://github.com/kyllingstad/scid
[0.9.21 beta 3](http://forum.rejectedsoftware.com/groups/rejectedsoftware.dub/thread/826/) is probably the more important news at this point :P
A link to a forum post that links to a reddit thread that links to an article? Why so many layers of indirection?
Because bots are stupid. Feel free to downvote and resubmit a proper link.
This is one of the things that puts me off learning D. Compulsory garbage collection does not seem like something that should be in a native language and I find it very hard indeed to want to use D because of that. I'd like to be persuaded that I'm wrong though :P
Because of the comments on that forum thread...?
At the time there were no comments on the forum thread, and the OP on the forum thread had no content besides the link.
Well, this is /r/d_language so maybe watchers are interested in the discussion on the main forums when it comes? Or to be able to discuss there? Certainly wouldn't be good if this was to /r/programming
I used it a few years ago when I was fiddling around with D, glad to see how far they've gotten :)
Why draw the line at native languages? It seems as arbitrary as saying non-deterministic malloc/free implementations shouldn't be used in native languages. An open ended argument for or against gc wouldn't be very useful. There are some cases where it makes sense and others where it doesn't. Ultimately you have to decide if a language is suitable for what you're developing. 
This sounds like fun. I'm curious as to which SFML bindings will be most used. 
You can find the [errata of the book online](http://erdani.com/tdpl/errata/). Apart from that everything should be available from [dlang.org](http://dlang.org/). Ask questions in the [learn forum](http://forum.dlang.org/group/digitalmars.D.learn).
Interesting article. I keep trying to find small reasonably manageable tasks that I want to do that I can write some D code for as a learning excercise. But it's hard to find something big enough to help learn, but small enough to be manageable in a new language where you'll inevitably write bad code to start with. Off topic - You could use something like "btsync" if you just want to sync files between two computers, it seems to work very well. (I know that wasn't the point of the article though).
Is this what you want? readf(" %s\n", &amp;pancakesEaten); 
Thanks, that works perfectly. Why would the `\n` terminate the input within `readf`?
Because it matches what you are entering when you hit return. The person string is read because you are using readln() which looks for and deals with the EOL. But read will take just what you tell it to take so you have to add the \n. Another option is to read the pancakesEaten value with readln() and then convert it to uint with std.conv.to: string pancakesEatenString = chomp(readln()); uint pancakesEaten = to!uint(pancakesEatenString);
A little late here, qznc_bot.
It seems to post old threads when a new reply is made and the thread wasn't on here before.
Once Martin is done getting the kinks out of his REPL implementation, this library should come in really, really handy. Just "import scriptlike;" and off you go. http://forum.dlang.org/thread/ldc9vh$25eq$1@digitalmars.com
This is awesome. I am looking to unify my sysadmin binaries under one cross-platform language (D, naturally). You just made this task that much easier. Thanks!
I think it's a pretty interesting discussion that also relates to D.
The complaint uses C strings as the main example, for this part. But the main problem is because they aren't a pair of iterators. D can handle C strings fine, but it isn't done by making them into a range. Instead it is turned into a slice (which happens to be a range). But, if we needed to handle a C string as a range and didn't have the length it can be done.
http://dlang.org/chagelog.html returns 404 not found
Seconded, the correct URL is: http://dlang.org/changelog.html
[*Actual* link](http://forum.dlang.org/thread/aiipgaqyddjijpjiulfu@forum.dlang.org#post-aiipgaqyddjijpjiulfu:40forum.dlang.org).
[The action is in this other thread.](http://www.reddit.com/r/programming/comments/1yts5n/facebook_open_sources_flint_a_c_linter_written_in/)
Does Facebook have a Summer of Code? If not, maybe they should.. I'm no Machiavellian, but maybe D would have better luck getting into GSoC if dmd was written in Go? /s -Captain Obvious
Preordered!
that is excellent news. 
[dlang-fr.org](http://dlang-fr.org/) - link to the actual site.
I'm curious, why is a 7 month old article being posted again? I started reading it and thought "Now wait, I definitely have read this before"...and I have.
I think it's an issue with the newsgroup or someone's client software. Walter's reply ended up creating a new thread, and qznc_bot detected it and posted it here. 
I think you should post it [here](http://forum.dlang.org/group/digitalmars.D.announce) also.
Thanks; done.
&gt; Before I go further, a request: do *not* post this to HN/reddit/etc just yet. It is still in early stages and an upstream CMake 3.0 release (without D support) is incoming. Announcing this far and wide will only yield confusion at this time. ???
...scripting language, with no source code and only compiled for x64 Linux. Only good thing about this thread is the github repo in the second or third reply, for a different project.
The D Programming Language (TDPL) by Andrei Alexandrescu is a *wonderful*, outstanding resource. It has some errata, but you can look that up on dlang.org. It will walk you in and out of the language. As for learning it, why not take something like Algorithms and Data Structures by Niklaus Wirth and try out implementing those algorithms in D?
Various libraries are listed on this page and can be easily included into a project with dub. At least I think they are. (Only tried a few) http://code.dlang.org/
I read the "tutorial" here http://ddili.org/ders/d.en/ It's explains every aspect of the language piece by piece.
Thanks, ordered The D Programming Language. Couldn't find a decently priced version of Algorithms and Data Structures, so that will have to wait! :)
Not obvious from the website.. Do you have to pay to see these videos?
&gt;Real streams may contains dynamic "type-change" and time flows continuously. Yay. An example of [analysis paralysis](http://www.hanselman.com/blog/AnalysisParalysisOverthinkingAndKnowingTooMuchToJustCODE.aspx) in the wild, just minutes after I read the other post. Ignore those dynamic changes, how often do you encounter them anyway? Very rarely, I'm quite sure. So if you encounter one, throw in the towel. Or switch to a new instance to take over from there....
Yes. But IMO worth it if you are also interested in the other courses.
"The biggest difference from structs is that structs are value types and classes are reference types. The other differences outlined below are mostly due to this fact. " http://ddili.org/ders/d.en/class.html
It is a really nice talk although (as also mentioned in the talk) the issue isn't really the syntax but the standard library which is completely different. I am currently porting Rx to D and run in to things like missing a thread pool, is there something similar to IDispose in D, etc. If you're going to watch this video with the mindset "Oh someone is going to explain how I can port stuff to D" you are going to be disappointed.
I think [std.parallelism](http://dlang.org/phobos/std_parallelism.html) might have some stuff you need. Hit us up in the [forums](http://forum.dlang.org/group/digitalmars.D.learn) if you need help.
Yeah I found the TaskPool which seems to be more or less what I am looking for. Also Tango has a threadpool which I could port/make a standalone thing. For now I am just going to focus on porting the bulk of the Rx functionality that doesn't rely on .NET base lib (or just stub it) and then start filling in the holes. shameless plug: https://github.com/AndreSteenveld/RDX ;)
What's the difference between DMD and GDC?
Sorry, I meant what's the difference in the timing, i.e., 'much faster' means what, etc.? 
[Take a look](http://erdani.com/d/phobos-prerelease/std_allocator.html) at the future official module for memory allocation. It uses void[], which is better than void* because it keeps track of the lenght of the memory segment. 
ehm... im^sure^you^have^already^tried^but...^[google](https://www.google.com/search?q=languages+vs+D)^?
thanks.... much better results
Numerical Benchmarks would be ideal
[kxml](https://github.com/opticron/kxml) seems to be fairly popular. There is a [simple one](https://github.com/CyberShadow/ae/blob/master/utils/xmllite.d) in the AE codebase too.
Hey look it's our post! You can also find a whole lot of info on our other 2 posts on [gamedev](http://www.reddit.com/r/gamedev/comments/25yub3/introducing_dash_an_opensource_game_engine_in_d/) and [programming](http://www.reddit.com/r/programming/comments/25yw89/dash_an_opensource_game_engine_coded_in_d/)
bot, you're 1 year late
I wanted to play with a UI library that isn't Qt, but the OpenGL renderer didn't work for me. Will try again when it's less alpha.
Well, I guess that asking a question is the first step to finding an answer ... After googling some more, and burning a few more neurons, I finally gathered some clues and narrowed the quest to the dub.json file. I pieced together the following : { "name" : "gtklessons", "description" : "A minimal D bundle.", "targetType" : "executable", "dependencies" : { "gtk-d:gtkd": "&gt;=2.3.1" } } which somehow enables the build to complete. The keys here where the line "targetType" : "executable", together with the "dependencies" section. There still are a bunch of things I don't get. First, building takes forever, even with a very simple and short source. Then, a [whole bunch of files](http://i.imgur.com/VGBe75f.png) I didn't ask for poped up in my userland, more or less the whole gtkd package, sources and all, even though *it is already installed on the system* (namely /usr/include/dmd/gtkd2/). There must be a more clever way. Third, isn't there a way to set all this at the IDE or working set level instead of project-by-project ? And finally I find that the number of options that can and must go in this dub.json file is way too high, and that said options are somehow poorly documented. Are there some easy-access reference out there ?
Is there a video of this? Slides?
Brief summary: this new library is an attempt to address some of the fundamental design issues of std.random. It implements RNGs as reference types, and includes a number of new pieces of functionality benefiting from this choice, such as range-based random distributions. A fuller summary of the design and features of the library is available here: http://braingam.es/2014/06/hap-random-a-new-random-number-library-for-d/ It would be great if people could test this out and report back their experiences.
Some of us are working on Project Euler.
Front end?
" But Alexandrescu will also tell you that programmers can use D to build anything, including the front-end of a web service." Front end... of a web SERVICE? What does that mean? I think of front end as meaning "runs in the browser".
Props to Iain. Great work!
Is the garbage collection Clouston talks about open source and available?
No
Error: Human input detected. Assimilation of /u/stesch added to queue. Please remain stationary to decrease levels of discomfort.
Most conversations happen on the [Newsgroup](http://forum.dlang.org/), for this reason, qznc_bot takes announcement posts and mirrors them here.
Is the bot written in D ? :)
I don't know.
No. Python. It also does a lot more than /r/d_language. Also /r/hackernews for example and some personal stuff, like regularly auto-filling my ToDo list. It is 690 LoC, of which 182 can be considered configuration. D does not have the library ecosystem of Python (e.g. feedparser, PRAW, beautifulsoup), so it would be much more work there. Feel free to post more. I think some autofill is better than a rarely updated subreddit. ;)
Thanks for taking the time to reply, it's very appreciated ! I didn't know about PRAW. Some googling ensued, and let's just say I'll sleep less stupid tonight.
Very cool!
From what I understand, D does not force the GC upon any code. D has malloc and free, and you can do the C++ thing of allocating in constructors and deleting in destructors if you want to. I'm sure you could design an equivalent of C++'s unique_ptr and shared_ptr in D. 
Are there many libraries or frameworks that don't use the GC though? Aren't you stuck with GC once a lib you use uses it? If not, that's a popular belief in the circles of conversation I've been in.
This changes the conversation from the language to how people use it. There is work being done to make it easier to avoid the GC. Many allocations have been removed from the standard library. But in general most use the GC and handle very special cases without it.
While this is true, a large part of phobos (the standard library) still relies on the GC. Perhaps unnecessarily in many cases such as string functions that could have in-place variants for use on non-immutable strings. At least this was true the last time I used D a few years ago. I'm looking forward to @nogc.
If your objects are garbage collected, then not only is there an inherent mechanism to do what destructors generally do, but there is also a point in the application where all threads are stopped, allowing you to make decisions about concurrent data structures without worrying about race conditions. http://www.drdobbs.com/lock-free-data-structures/184401865 Look at the section titled: "Garbage Collector, Where Art Thou?" 
Congratulations to everyone involved! http://www.reddit.com/r/programming/comments/2dwqvy/d_2066_nogc_c_namespaces_multidimensional_slices/ https://www.facebook.com/dlang.org/posts/905593426121006 https://twitter.com/D_Programming/status/501443132115140609 Andrei 
I though that this might be important enough to share on the announce list: A pull request [1] by Rainer Schuetze which adds COFF support for Win32 has recently been merged by Walter. It seems to be enabled using the -m32mscoff flag. [1] https://github.com/D-Programming-Language/dmd/pull/3843 -- /Jacob Carlborg 
x-post http://forum.dlang.org/post/vbotavcclttrgvzcjjia@forum.dlang.org 
Announcement text quote: x-post http://forum.dlang.org/post/vbotavcclttrgvzcjjia@forum.dlang.org 
Announcement text quote: GitHub repo: https://github.com/idanarye/vim-dutyl vim.org page: http://www.vim.org/scripts/script.php?script_id=5003 The main problem with my Vim plugin for DCD(placed inside the DCD repo) is the need to set the import paths manually. It was a manual task that the user had to do: DCD doesn't know the import path the current project is using. Vim doesn't know either. Luckily - DUB knows. So instead of separate Vim plugins for different tools, each operating it's own tool alone, I wanted to create one plugin that'll operate both DUB and DCD - one that can get the list of import modules from DUB and send it to DCD. That's how Dutyl was born. Currently, Dutyl's only features are using DCD for autocompletion and for DDocs, but it has a module system that allows it to add other tools, either to get more functionality or to get backup for features that some tools can't support for specific projects. Like dependency injection but with a real usecase: for projects that don't use DUB, Dutyl can back up to a manually written list of import paths saved in a hidden file in the project's dir. I'm open for suggestions for other tools and features to add to Dutyl(write them here, or preferably open GitHub issues with them) 
Announcement text quote: Hi, I'm writing a memcached client library for d. It's dependent on vibe-d - but this can be fixed . https://github.com/TiberiuGal/memcached4d I'd appreciate some feedback. thanks 
Announcement text quote: On 8/19/2014 7:01 AM, Dicebot wrote: &gt; Walter, now that release is out can you please state your opinion about &gt; https://github.com/D-Programming-Language/dmd/pull/3651 ? It is blocking Phobos &gt; module split and decoupling. I keep thinking there's gotta be a way to do this without language changes. 
There is [RefCounted](http://dlang.org/phobos/std_typecons.html#.RefCounted) which is basically shared_ptr. The unique_ptr case is [more difficult](http://forum.dlang.org/post/l96otj$tsj$1@digitalmars.com).
The holy grail is mixing GC with non-GC (soft real time) parts in the same application. However, I have not seen anybody do this with any language. Example: A game where UI (graphics,sound,commands) are non-GC for (soft) real time (60fps!), but the game logic can use a GC for simpler/faster development.
Unnecessary generation of garbage by standard-library functions has been reduced recently. I wasn't able to find a source on my quick Googling, but it's out there somewhere.
Announcement text quote: "SonarQube is an open platform to manage code quality."[1] I've started writing a plugin for Sonar that allows it to display code quality metrics for D. So far it just supports tracking static analysis warnings from D Scanner, though adding other metrics like line of code count and unit test coverage should be fairly simple. It's available here[2]. [1] http://www.sonarqube.org/ [2] https://github.com/economicmodeling/sonar-d-plugin 
Announcement text quote: Now available from youtube by default. http://www.reddit.com/r/programming/comments/2bbklj/dconf_2014_lightning_talks/ https://twitter.com/D_Programming/status/491299147015012352 https://www.facebook.com/dlang.org/posts/888753774471638 Andrei 
I'd announce it on [the forums](http://forum.dlang.org/group/digitalmars.D.announce) to get more attention.
This isn't an announcement. This is a bug/regression.
Also, make sure it can be included via dub. I didn't see that mentioned anywhere, so I may be mistaken as I only took a quick look. However, I do like it.
But it was posted to D.announce. This is just a bot doing its bot thing.
I'll do that, I'm just wanted to see if anyone had any suggestions or feedback first. I find the forum to be kind of clunky to interact with...
Announcement text quote: I've built a set of classes: EventLogger TinyXML PropertyFile ServiceBase ServiceImplementation BeepService (example) Any suggestions (preferably positive) as to what I should do with them? 
Announcement text quote: Hey everyone, it's been quite some while ago that I posted a Mono-D release announcement on to D.announce :) You should've noticed that the installation instruction stuff has been moved to the D wiki - http://wiki.dlang.org/Mono-D There have been several fixes and smaller improvements since the last bunch of bug fix releases. Detailed release notes can be taken from the wiki entry. Cheers, Alex 
Announcement text quote: I've created a set of Zeus Python scripts to allow the Dscanner to be run from inside Zeus. The Dscanner will need to be downloaded and built form here: https://github.com/Hackerpilot/Dscanner The Zeus scripts can be found here: http://www.zeusedit.com/zforum/viewtopic.php?t=7196 Note: I'm the author of Zeus, Zeus is shareware, runs natively on the Windows platform and can also be run on Linux using Wine. 
Announcement text quote: Tags and DUB support for all of this will happen when I get around to it. (Or when you get around to it and make a pull request) libdparse: https://github.com/Hackerpilot/libdparse * The lexer/parser/ast code for D written in D is no longer a part of the dscanner project. (This also means that DCD no longer includes a static analysis tool as a submodule. Yay.) dscanner: https://github.com/Hackerpilot/Dscanner * Static analysis check for declaring methods or variables named "init" or otherwise overriding built-in properties. (Why does the compiler let you do this in the first place?) * Tweaks to the opEquals, opCmp, toHash checks. * Static analysis checks are now configurable through an ini file. * Lots of random bug fixes. dcd: https://github.com/Hackerpilot/DCD * Autocomplete for selective imports. * Autocomplete for auto variables. (Finally!) * Show call tips for compiler-generated struct constructors. * Autocomple global-scoped symbols more accurately. * Several updates to editor integration scripts (Mostly EMACS) * Lots of bug fixes harbored: https://github.com/economicmodeling/harbored * Documentation -&gt; docs -&gt; harbor? * Documentation generator that is independent of DMD and its JSON output. * Example output: http://economicmodeling.github.io/containers/index.html * Lots of bug fixes. libddoc: https://github.com/economicmodeling/libddoc * D implementation of the DDoc macro system * Lots of bug fixes 
Announcement text quote: I made some additions and corrections. The following are the major ones: * The 'User Defined Attributes (UDA)' chapter * @nogc * foreach_reverse * Formatted element output with %( and %) * static this, static ~this, shared static this, and shared static ~this As a reminder, the book is available as PDF, downloadable from the header of each chapter: http://ddili.org/ders/d.en/index.html Ali 
Announcement text quote: It had to happen. :) Today, the LinkedIn group ( http://www.linkedin.com/groups/D-Developer-Network-3923820 ) reached over 1000 members. Time to celebrate! (Though I honestly hope at lest 1/4 of those people actually use D professionally...) PS. Those of you who prefer XING, we have D groups there too. One of them is: https://www.xing.com/communities/groups/d-developer-network-f28b-1051335 
Announcement text quote: I've written a new blog post highlighting hidden treasure found in the D standard library. I love finding this stuff so i've shared my latest discoveries hoping to ignite some curiosity out there. I've put it on reddit so vote up! :) http://www.reddit.com/r/programming/comments/2etyz1/hidden_treasure_in_the_d_standard_library/ 
Announcement text quote: Hi, I hope OK to post/cross post a job: http://forum.dlang.org/thread/uzemmpgbmdepdbyeeana@forum.dlang.org Cheers, Vic 
This was posted by a bot. I dunno who's set it up but it posts anything mentioned in d.announce.
Announcement text quote: The commit where I added this is actually two months old, but I have only now made it an official release so I guess it's still news. From version 1.2.0, my debugger frontend for Vim, Vebugger, allows debugging D programs with GDB. This is done by invoking the debugger with the `VBGstartGDBForD` command. Using regular `VBGstartGDB` won't work since D uses it's own `main` function. Notice that this won't work under Windows, since GDB can not debug D programs under Windows. GitHub repo: https://github.com/idanarye/vim-vebugger vim.org page: http://www.vim.org/scripts/script.php?script_id=4941 
Announcement text quote: I moved Dlang related ebuild to a new repository under the Gentoo organization on GitHub a while ago. It is available through "layman" as "dlang". (Not to be confused with the outdated "d" overlay there.) Information in the Gentoo Wiki: https://wiki.gentoo.org/wiki/Dlang Link to the repository on GitHub: https://github.com/gentoo/dlang/ -- Marco 
Announcement text quote: Finally I've finished library for wrapping applications into daemons or services (Windows). The library hides platform-specific boilerplate behind compile-time API: ``` // First you need to describe your daemon via template alias daemon = Daemon!( "DaemonizeExample1", // unique name // Setting associative map signal -&gt; callbacks KeyValueList!( // You can bind same delegate for several signals by Composition template // delegate can take additional argument to know which signal is caught Composition!(Signal.Terminate, Signal.Quit, Signal.Shutdown, Signal.Stop), (logger, signal) { logger.logInfo("Exiting..."); return false; // returning false will terminate daemon }, Signal.HangUp, (logger) { logger.logInfo("Hello World!"); return true; // continue execution } ), // Main function where your code is (logger, shouldExit) { // will stop the daemon in 5 minutes auto time = Clock.currSystemTick + cast(TickDuration)5.dur!"minutes"; while(!shouldExit() &amp;&amp; time &gt; Clock.currSystemTick) { } return 0; } ); int main() { return buildDaemon!daemon.run(new shared StrictLogger("logfile.log")); } ``` At the moment daemonize has following features: * Daemons for GNU/Linux, services for Windows * Custom signals * Signal composition * Client for sending signals to defined daemons * Auto installing and uninstalling for Windows services * Usage of .pid and .lock files (GNU/Linux) * Privileges lowing (GNU/Linux) Daemonize operates well with vibe.d (example - https://github.com/NCrashed/daemonize/tree/master/examples/03.Vibed) P.S. At the moment library doesn't support Mac and other Posix systems, the support is going to be added at next releases. 
I'd start here first (Free PDF) http://ddili.org/ders/d.en/index.html
Andrei's book is a very good read and I highly recommend it if only because it explains all the design rationale. Ali's is more up to date and free so it's probably the better choice but if you are enjoying D I recommend getting around to Andrei's book eventually. Adam D. Ruppe's [D Cookbook](http://www.amazon.com/D-Cookbook-Adam-D-Ruppe/dp/1783287217) is a really good read once you already know D. There's some mind blowing stuff in there.
I've been looking for the same. It would be awesome if there was something akin to rustbyexample.com I.e. just a quick down and dirty tutorial to help newcomers to the language who aren't necessarily new to programming. I can't speak for all but unless choosing D was imposed on you (by work or the like) it makes the decision that much easier when there is a seemingly active effort put into attracting newcomers. 
Announcement text quote: I just released a new version of DVM, 0.4.3. The biggest news for this release is that both 32 and 64bit libraries are supported simultaneously. Now DVM will just copy the platform specific directory without messing with the directory structure. This release fixes a critical bug that made it not possible to install new compilers. Also building using Dub is supported. I'm going to wait a bit to add to code.dlang.org because Dub head is required. For pre-compiled binaries and changelog (or below) see: https://github.com/jacob-carlborg/dvm/releases/tag/v0.4.3 For those not familiar with DVM: DVM allows you to easily download and install D compilers and manage different versions of the compilers. Changelog: Version 0.4.3 New/Changed Features * Add support for Dub * Since issue 23 has been fixed this means that now both 32 and 64bit libraries are supported simultaneously Bugs Fixed * Fix issue "unexpected redirect for method GET" * Issue 23: Leave DMD directory structure as-is -- /Jacob Carlborg 
Announcement text quote: I recently got the access logs for dmd downloads through August (and Sep 1st). They show a sharp increase since July, probably following the Wired coverage and the recent release. This is raw data so it does not correct for failed downloads etc, but I assume it is a good proxy for the actual numbers and also good for looking at trends. The relevant makefile rules are: $(OUT)/downloads: grep -o 'GET [^ ]* ' \ $(DATADIR)/downloads/2013-* $(DATADIR)/downloads/2014-* \ | grep 'dmd' | sed -e 's/:GET//' -e 's|^.*downloads/||' \ | sed -e 's/ .*dmd/ dmd/' | sort &gt;$@.tmp mv $@.tmp $@ $(OUT)/downloads.monthly: $(OUT)/downloads sed -e 's/-.. .*//' $^ | uniq -c &gt;&gt;$@.tmp mv $@.tmp $@ The log lines follow the pattern (some numbers changed for privacy): f0a5c47d9741bd8c3fffbfc3dacfaeb7 downloads.dlang.org [31/Dec/2013:23:04:13 +0000] 181.16.226.282 - 61ED358EF78C3B10 WEBSITE.GET.OBJECT releases/2013/dmd.2.064.2.zip "GET /releases/2013/dmd.2.064.2.zip HTTP/1.1" 200 - 33349115 33349115 331564 266 "-" "NSIS_Inetc (Mozilla)" - Going forward I think we should publish the logs and run a cron job on the server that updates them periodically. July's 34979 is a 19 months (and possibly all-time) high. Congratulations to everybody involved in pushing the D language forward! Andrei 5886 2013-01 5525 2013-02 22799 2013-03 11717 2013-04 6214 2013-05 9614 2013-06 11455 2013-07 16803 2013-08 20835 2013-09 19009 2013-10 20569 2013-11 15742 2013-12 18002 2014-01 20191 2014-02 18651 2014-03 19600 2014-04 21015 2014-05 20962 2014-06 34979 2014-07 34288 2014-08 1088 2014-09-01 
Announcement text quote: I would like to write binary data to a file for an ancillary hash table operation and then read it back using stream.rawRead(). How would I go about converting a string to binary in D. I would prefer not to use any third party libraries if I can. Thank You 
Announcement text quote: Hey everyone, As my first take on D after spending around 2 weeks learning it I thought I should write something useful that sort of encompasses everything interesting about D (for me it was the flexibility of working with types and lazy arguments). After looking at dashcheck (https://github.com/mcandre/dashcheck) I thought I'd improve it. While improving it I noticed that my program is much different and decided to release my code as another project; Damncheck (http://github.com/geezee/damncheck). I was hoping to get some feedback from the community regarding the quality of the code and if something can be written the "D-way". I have also written a blog post about the process (http://blog.zakhour.me/post/d/damncheck-on-building-a-property-based-testing-library-for-d/) Thank you for your time, George. 
Announcement text quote: https://github.com/Hackerpilot/DCD/releases/tag/v0.3.0 DCD is an editor-independent autocompletion engine for the D programming language. If you've heard of Jedi or Gocode, you have a pretty good idea of what DCD does. It's been a while since I've tagged a release of DCD. The important changes are summarized at the above link. The "tl;dr": it's faster, uses less RAM, crashes less, and I'm bad at VIM and Emacs extensions so you should get them from other people. I'd like to give some special thanks to the GtkD project for pointing out that DCD used to be very bad at handling (literally) hundreds of files that publicly imported each other. :-) https://github.com/Hackerpilot/libdparse/releases/tag/v0.1.0 http://code.dlang.org/packages/libdparse The D lexing, parsing, and AST library that powers D-Scanner and DCD is its own project now. The major news items here are that I ran it through some fuzz testing, posted the library's generated documentation online, and registered it with code.dlang.org. 
Announcement text quote: Hi all! Finally, LLVM 3.5 has been released! See the release notes here: http://llvm.org/releases/3.5.0/docs/ReleaseNotes.html Also note that LDC is mentioned in the release notes as one of the projects who are already supporting LLVM 3.5. Just recompile LDC using master branch from GitHub. Regards, Kai 
Announcement text quote: Announcing Tharsis.prof, a frame-based profiler in D. A profiler as-a-library that keeps track of overhead of every individual frame RAII-style API for recording profile data, and range-style API for processing the results (with std.algorithm and the like - no graphics interface yet). No GC allocations (and no heap allocations either - user must provide memory). See example at: https://github.com/kiith-sa/tharsis.prof Use case: my game has a rare lag that occurs once per minute. Profiler is useless because the lag is averaged out. To solve with Tharsis.prof: * Instrument code (add Zones, say, for rendering batches, physics, etc) * Profile till the lag occurs. * Get a range of frames (e.g. by filtering zones to get those named "frame") * Sort the range * Get the longest frame * Filter a range of all zones to get only those with start/end time within the longest frame. * Find the offending zone * Done Blog posts explaining what this is in detail (should be one post, but it ended up being too long): http://defenestrate.eu/2014/09/05/frame_based_game_profiling.html http://defenestrate.eu/2014/09/05/optimizing_memory_usage_of_a_frame_based_profiler.html http://defenestrate.eu/2014/09/05/frame_based_profiling_with_d_ranges.html GitHub: https://github.com/kiith-sa/tharsis.prof Dub: http://code.dlang.org/packages/tharsis-prof API docs (with examples): http://defenestrate.eu/docs/tharsis.prof/index.html 
Announcement text quote: I've picked up an older project for using D on barebones Win32 as a "better C". Thanks to recent advances in DMD (-betterC and -m32mscoff), I could get a "Hello, world" program on Win32 down to just 438 bytes when compiled. This is without assembly, linker scripts, custom Phobos/Druntime, or manual post-build tweaks. -betterC allows stripping things like ModuleInfo, and as of recently it also strips file/module names used for asserts/range check errors (which were emitted even in -release mode). A better alternative would be a DMD equivalent to -fdata-sections, though, so unneeded variables, constants, and data generated by the compiler could be garbage-collected by the linker. -m32mscoff allows using more linkers. Specifically, the Microsoft Linker and Crinkler, which only understand COFF, can both generate executables which are much smaller than those created by OPTLINK. The 438-byte "Hello, world" program is achieved using Crinkler, which is a COFF linker with aggressive compression and header optimization. It was created for compressing 4K demos. Without compression on header optimization, you can reach 630 bytes using Unilink, a freeware linker which is compatible with both COFF and OMF. The source code is not much to look at, most of the "magic" is in the makefiles: https://github.com/CyberShadow/SlimD See samples/01-msgbox for more commentary. The figures above are for samples/02-console. The motivation for this project is mostly hack value and aesthetical (a 500 KB EXE with 5 KB worth of actual functionality is not pretty). 
Announcement text quote: http://code.dlang.org/packages/cerealed https://github.com/atilaneves/cerealed But what about Orange / std.serialization? Well, 1. I started this before I knew about Orange. This is actually based on a library I wrote in C++ (https://bitbucket.org/atilaneves/cereal) for the game I'm trying to finish, and it dawned on me it would probably be easier in D. It was. 2. Orange serialises to XML, I need/want binary. I could've written a binary archive, I guess, but I'd rather do this. 3. I would've written this for fun anyway. The deal here is binary serialisation with minimal to no boilerplate. As mentioned in the README, I used this to implement a MQTT broker with minimal fuss. Serialising classes, structs, and normal D types requires writing nothing at all. Custom serialisation can be handled in two different ways and both of them require writing only one function for both struct/class -&gt; bytes and vice-versa. Since a code sample is worth a 1000 words: import cerealed; //uses package.d from 2.064 struct MyStruct { ubyte mybyte1; @NoCereal uint nocereal1; //won't be serialised //the next 3 members will all take up one byte @Bits!4 ubyte nibble; //gets packed into 4 bits @Bits!1 ubyte bit; //gets packed into 1 bit @Bits!3 ubyte bits3; //gets packed into 3 bits ubyte mybyte2; } auto enc = new Cerealiser(); enc ~= MyStruct(3, 123, 14, 1, 2, 42); assert(enc.bytes == [ 3, 0xea /*1110 1 010*/, 42]); auto dec = new Decerealizer([ 3, 0xea, 42]); //US spelling works too //the 2nd value is 0 and not 123 since that value //doesn't get serialised/deserialised assert(dec.value!MyStruct == MyStruct(3, 0, 14, 1, 2, 42)); Custom serialisation is explained in the README. I had to use it for my MQTT project and it worked quite well. I still need to add a bunch of negative tests and accompanying code but this is good enough to fool around with for the moment. Atila 
lots of interest in /r/programming and elsewhere: http://www.reddit.com/r/programming/comments/2g03af/ds_garbage_collector_problem/ https://news.ycombinator.com/item?id=8297091
Announcement text quote: DMD 2.066.1-rc1 is now available for testing. Visit http://wiki.dlang.org/Beta_Testing to download. Please submit all bugs to bugzilla at https://issues.dlang.org/. Happy testing 
Announcement text quote: This is a bugfix release for 0.3. * #165 dcd-server throws an exception with emacs temporary files for import autocompletion * #164 Go to declaration sometimes gives nonsense results when constructors/destructors are present * #163 Go to declaration / autocomplete for template parameters * #161 Infinite recursion with circular dependencies and file modifications https://github.com/Hackerpilot/DCD 
Announcement text quote: Most notable change since DConf is that on Windows, Digger can now build D from source (including x64 versions) without requiring Git or Visual Studio to be installed. It achieves this by downloading and locally installing (unpacking) all the software it needs. Windows binaries: https://github.com/CyberShadow/Digger/releases/tag/1.0 Digger is a tool for working with D's source code and its history. It can build D (including older D versions), customize the build with pending pull requests or forks, and find the exact pull request which introduced a regression (or fixed a bug). It comes together with a web interface which makes building D from source trivial even for people new to D, Git or the command line. https://github.com/CyberShadow/Digger 
Thanks, don't know what link I was looking at.
4 hours ago now :)
Announcement text quote: The second release candidate for v2.066.1 is now available for testing. Binaries may be obtained at http://wiki.dlang.org/Beta_Testing/. Happy testing. 
Announcement text quote: Some of you may have noticed this article posted to /r/programming: http://uniblock.tumblr.com/post/97868843242/noise. I ported the algorithm to D and uploaded it here: https://github.com/Hackerpilot/OpenSimplexNoise-D 
Announcement text quote: I decided to sell of all my sited, to free my mind for a new projects. One of my site is a little bit related with programming languages. the name is: versusit.org blog have few aricles about C++ and D. The price is 100$ + small mention about me as about project founder on About Page. 
Announcement text quote: Self-contained numeric library that provides an efficient and accurate implementation of complex error functions, along with Dawson, Faddeeva, and Voigt functions. https://github.com/9il/libcerf 
Announcement text quote: https://github.com/Hackerpilot/DCD/releases/tag/v0.4.0-beta1 Changelog at the above link. Let me know if and how you manage to break it by filing an issue on Github. 
Announcement text quote: After again a longer-than-anticipated wait, the next release of the DUB package and build manager is finally ready. This is a major milestone with some important changes in the way dependency versions are handled, making it more robust for a rapidly growing ecosystem. The number of available packages is now well above the 300 mark and keeps growing steadily: http://vibed.org/temp/dub-packages.png But even more important, I'm pleased to announce that DUB is now officially developed as part of the D language ecosystem! Based on the decision back during this year's DConf, the repository has been migrated to the D-Programming-Language organization on GitHub [1], and we are now working towards a 1.0.0 milestone [2] that is supposed to be ready for inclusion into the official DMD installation package. If you can think of any potentially important and especially backwards-incompatible changes/additions, please mention them (ideally as GitHub tickets), so that we can include them before the 1.0.0 release. Major changes and additions in 0.9.22 include: - Improved dependency version handling scheme. Version upgrades are now explicit, with the current snapshot being stored in the "dub.selections.json" file. This is similar to how other popular systems, such as Bundler [3], work, but built into the core system. Committing "dub.selections.json" to the repository ensures that everyone gets the same (working) combination of dependency versions. - Branch based dependencies (e.g. "~master") have been deprecated due to their destructive influence on the package ecosystem. See the wiki [4] for more information, including on the alternative approaches that are now supported. - Simple DustMite [5] integration. Using the "dub dustmite" command it is now possible to reduce bugs in DUB packages with ease, even in complex package hierarchies. The condition used for reduction can be specified in terms of exit code or as a regular expression on the output of either the compiler, linker, or final executable. - Added BASH and FISH shell completion scripts. - Added general support for single-file compilation mode, as well as separate compile/link mode for GDC. - Platform detection now also works when cross-compiling. - Added the "*" version specifier to match any version, and path based dependencies don't need to specify an explicit version anymore. As always, find the full list of changes in the change log [6] and download at: http://code.dlang.org/download [1]: https://github.com/D-Programming-Language/dub/ [2]: https://github.com/D-Programming-Language/dub/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0 [3]: http://bundler.io/ [4]: https://github.com/D-Programming-Language/dub/wiki/Version-management [5]: https://github.com/CyberShadow/DustMite/wiki [6]: https://github.com/D-Programming-Language/dub/blob/master/CHANGELOG.md 
Announcement text quote: Hi everyone, just wanted to announce a further small version bump of Mono-D. And yeah, despite my 2 week-break, development still continues! Cheers, Alex 
Announcement text quote: As some of you might know Michel Fortin created a fork of DMD a couple of years ago which add support for using Objective-C classes and calling Objective-C method. That is making D ABI compatible with Objective-C. I have now updated it to the latest version of DMD and druntime. All D/Objective-C tests pass and all standard tests pass. I'm planning to create a DIP for this and would really like this to be folded into main line. For know you can read the design document created by Michel: http://michelf.ca/projects/d-objc/syntax/ Original project page: http://michelf.ca/projects/d-objc/ My forks: DMD: https://github.com/jacob-carlborg/dmd/tree/d-objc druntime: https://github.com/jacob-carlborg/druntime/tree/d-objc Phobos: standard Phobos, commit f85bd54ef5615986960fdd68ea87c8aaf5c5118d Currently I have limited bandwidth and cannot upload a pre-compiled binary. To compile use the following commands: cd dmd/src make -f posix.mak MODEL=32 D_OBJC=1 cd druntime make -f posix.mak DMD=../dmd/src/dmd MODEL=32 D_OBJC=1 cd phobos make -f posix.mak DMD=../dmd/src/dmd MODEL=32 Currently D/Objc only works for 32bit. You can use Michel's example application, Chocolate, to try it out. It's a bit cumbersome to compile without Xcode but it's possible. http://littoral.michelf.ca/code/d-objc/chocolate-dobjc-a1.zip -- /Jacob Carlborg 
Vibe.d has Redis bindings with pubsub support: [example](https://github.com/rejectedsoftware/vibe.d/blob/master/examples/redis-pubsub/source/app.d), [bindings](https://github.com/rejectedsoftware/vibe.d/tree/master/source/vibe/db/redis)
Thanks. I missed this when I looked the first time.
Announcement text quote: http://forum.dlang.org/post/deltfarxxzxtswuayksy@forum.dlang.org 
Announcement text quote: I have completed the translation of the book. Phew... :) However, there is still more work, like adding a UDA chapter and working on many little TODO items. The following was the final chapter, which actually only scratches the surface of the very broad topic: * Memory Management As a reminder, the book is available as PDF, downloadable from the header of each chapter: http://ddili.org/ders/d.en/index.html Ali 
Announcement text quote: GitHub repo: https://github.com/idanarye/vim-dutyl vim.org page: http://www.vim.org/scripts/script.php?script_id=5003 The main problem with my Vim plugin for DCD(placed inside the DCD repo) is the need to set the import paths manually. It was a manual task that the user had to do: DCD doesn't know the import path the current project is using. Vim doesn't know either. Luckily - DUB knows. So instead of separate Vim plugins for different tools, each operating it's own tool alone, I wanted to create one plugin that'll operate both DUB and DCD - one that can get the list of import modules from DUB and send it to DCD. That's how Dutyl was born. Currently, Dutyl's only features are using DCD for autocompletion and for DDocs, but it has a module system that allows it to add other tools, either to get more functionality or to get backup for features that some tools can't support for specific projects. Like dependency injection but with a real usecase: for projects that don't use DUB, Dutyl can back up to a manually written list of import paths saved in a hidden file in the project's dir. I'm open for suggestions for other tools and features to add to Dutyl(write them here, or preferably open GitHub issues with them) 
Announcement text quote: Hello, I am happy to announce that my 32bit version of sdc compiles the whole testsuite including mixins. the only there are only 6 tests still failing 2 of them are dependent on size_t.siezof beeing 8. The otherer 4 have to do with execptoion handling. please check out the 32-branches on https://github.com/UplinkCoder/sdc and https://github.com/UplinkCoder/libd-llvm and https://github.com/UplinkCoder/libd I haven't yet updated the submodules so you have to fetch the 32-branch manually. and remember that this is experimental! please file issues on in my repo if your errors appear with both -m64 and -m32. if there are any questions please ask them. 
Announcement text quote: https://github.com/D-Programming-Language/druntime/pull/985 Here is initial port result available for early experiments. It can be compiled with make -f posix.mak GC_TYPE=concurrent and passes the test suite with only shared library tests disabled (ef20b7a). There are still many issues to be aware of: 1) Documentation is largely missing. Working on it, reading @leandro-lucarella-sociomantic old posts (http://www.llucax.com.ar/blog/blog/tag/understanding%20the%20current%20gc) may help in the meanwhile 2) Code style differs from Phobos standards. To be fixed soon. 3) Shared library support is completely missing. Proxy infrastructure similar to one in existing gc needs to be added and I don't know if actual implementation will work in such environments or more changes will be needed. 4) Deadlock issue (http://www.dsource.org/projects/tango/ticket/2087) still remains. It is not critical to our code because it almost never uses threads so no big effort was put into it but this can be huge problem for any other project. In general this is very far from something that can be merged upstream straight away and replace default GC on linux. It can be interesting for other projects with similar architecture and requirements and probably helpful for anyone else working on better D GC. And contributions are welcome via pull requests towards this PR base branch (https://github.com/mihails-strasuns-sociomantic/druntime-1/tree/sociomantic-cdgc-wip) or as e-mail patches (public@dicebot.lv) 
Announcement text quote: alias the Walter &amp; Andrei show! http://twit.tv/show/floss-weekly/311 
Announcement text quote: Hi, there is a new version of Visual D available for download at http://rainers.github.io/visuald/visuald/StartPage.html It is telling that after such a long time since the last release the major feature is the update of another project that is just installed with Visual D, but I think it is pretty important: * Mago, a debugging engine that integrates into Visual Studio and is dedicated to support the D programming language, is now capable to debug Win64 applications aswell! Other highlights of this release: * added editor margin to display coverage counters and percentage (see http://rainers.github.io/visuald/visuald/Coverage.html for an example) * integration of DParser, the semantic engine that also powers Mono-D, has been updated to the latest version. * support for tab/indentation settings set by .editorconfig plugin * new "Compile &amp; Debug" command for script-like D programs that you don't want to create a project for. The full version history can be found here: http://rainers.github.io/visuald/visuald/VersionHistory.html Visual D is a Visual Studio extension that adds D language support to VS2005-20013 and is written in D. Its source code can be found on github: https://github.com/D-Programming-Language/visuald, pull requests are welcome. Best, Rainer 
Announcement text quote: ------------------------------------------------------------------ Announcing Despiker, a GUI real time profiler for game development ------------------------------------------------------------------ This is is a visualizer for the Tharsis.prof frame-based profiler library. Profiling with writeln turned out to be unintuitive, so I ended up making a GUI. * Shows a graph of overhead in a frame * Updates in real time as the profiled program (game) runs * Can pause to look at the current frame * Can browse/jump frames, jump to the worst frame. The GUI is still a bit inconvenient (need slow-motion replay and minimap to efficiently browse), but it got to the point where it's usable. Note: this is still unstable and I'm not likely to spend much time on it in the following months (as I need to work on the project I wrote this for in the first place.) GitHub: https://github.com/kiith-sa/despiker/issues/16 Video (WebM): http://defenestrate.eu/docs/despiker/_static/despiker.webm Tutorial: http://defenestrate.eu/docs/despiker/tutorials/getting_started.html Tharsis.prof: https://github.com/kiith-sa/tharsis.prof 
Announcement text quote: https://www.youtube.com/watch?v=tvdoIJaPooI On reddit: https://www.reddit.com/r/programming/comments/2iws85/interview_with_andrei_alexandrescu_on_the_d/ 
Announcement text quote: Hello, Does it exist a project to use D in web development with Apache; not for CGI scripts, but rather like what PHP does ? Thanks in advance for your help. I hope this is the correct forum to post my question on. Sorry if not. Regards. -TSalm 
Announcement text quote: Dear D users, I'd like to announce DerelictCUDA, dynamic bindings to the CUDA library. https://github.com/derelictorg/derelictcuda For now, only the CUDA Driver API is exposed, providing most of the warp control. For a visual explanation of the different APIs in CUDA, see http://stackoverflow.com/questions/242894/cuda-driver-api-vs-cuda-runtime More APIs could be implemented if the interest happens to be non-null. 
Announcement text quote: Hi everyone, just gave the second drop down box in Xamarin Studio a use: Selection of build types for dub projects. Furthermore, please don't rage silently somewhere - tell me about issues with Mono-D on github or in #d.mono-d on freenode! http://wiki.dlang.org/Mono-D https://github.com/aBothe/Mono-D/issues Cheers &amp; thanks to everyone, Alex 
Announcement text quote: Hi all, I'd like to announce the initial version of endovena, a dependency injection framework. It's based on dejector, a great work by Jakub Stasiak, with some new features borrowed from dryioc (C# IoC) I would be glad to see any feedback, Thank you. * [endovena] https://github.com/o3o/endovena Boost License 1.0 * [dejector](https://github.com/jstasiak/dejector) * [dryioc](https://bitbucket.org/dadhi/dryioc) 
If -O3 and -O1 have similar compile times, than it probably comes from meta-programming. CTFE is turing-complete, so even an infinite loop is possible.
Phobos sounds as an unlikely candidate here until you've tried running your code through DMD and LDC. Compile times are generally considered low for most D programs unless they go with a lot of CTFE. My suggestion here is to test first before concluding anything particularly blaming Phobos.
I did a full build with latest dmd with opimizations enabled. Quite a difference: gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) real 0m56.134s user 0m48.638s sys 0m7.221s dmd v2.066 real 0m28.777s user 0m23.085s sys 0m5.488s 
That certainly points towards either the parser in gcd being slower than DMD (the optimization passes of DMD and GCC are not comparable I think).
Announcement text quote: Hi everyone, LDC 0.15.0-alpha1, the LLVM-based D compiler, is available for download! This alpha release is based on the 2.066.1-rc2 frontend and standard library and supports LLVM 3.1-3.5 (OS X: no support for 3.3). Please help testing this release! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/rasmbswfitzcscjxutrv@forum.dlang.org Regards, Kai 
corporations tend to be very conservative on technology choices because sustainability (in particular, availability of replacement labor) is more important than any other factor. 
Announcement text quote: Hello! link http://9il.github.io/atmosphere_gm You are welcome to suggest required algorithms! Best Regards, Ilya 
As far as I know, there isn't one in a single document. Walter was very good about placing the BNF side-by-side in the official documentation at the very start of D1 - I think that's still the case today. However, those BNF snippets are very fragmented and placed all over the docs.
Are you referring to say the first group on this page: http://dlang.org/grammar.html? If you inspect that element the class name is actually "bnf", however AFAIK that's not valid BNF (note I had no background knowledge of grammars before starting this project, so correct me if I'm wrong!)
If you haven't asked already, I strongly recommend asking over in http://forum.dlang.org/, since that space is far more active for D-ists than this subreddit.
Announcement text quote: No. Really. I'm serious. https://github.com/Hackerpilot/dfix dfix is a tool for automatically upgrading older D syntax to the newer style. * Updates old-style alias syntax to new-style * Fixes implicit concatenation of string literals * Automatic conversion of C-style array declarations and parameters to D-style. * Upgrades code to comply with DIP64 if the --dip64 switch is specified. (You probably don't want to use this) * Upgrades code to comply with DIP65 unless the --dip65=false switch is specified. 
Awesome, I didn't know about your project! How prioritized is iOS support?
The ioctls work on linux and I haven't figured out how to get SPTD working on Windows (I'm no scsi expert). It's a toy project of mine that I used to learn dlang. Great language!
Announcement text quote: If you still need a copy of Andrei's great book: http://www.informit.com/deals/ Regards, Kai 
Announcement text quote: From the homepage[1]: Chocolatey is a Machine Package Manager, somewhat like apt-get, but built with Windows in mind. I have added dmd[2] and dub[3] as packages. This means you can do command line installation and have them ready to go in one step. I also made sure to allow users to change the version number so you can get non-current / beta versions as well. If anyone would like to be added to the maintainers list (mostly to keep the version number up-to-date), email me and I can add you. 1. https://chocolatey.org/ 2. https://chocolatey.org/packages/dmd 3. https://chocolatey.org/packages/dub 
If you've never programmed before follow the crowd, it's easier to solve problems and get support. 
Thanks but I actually want to learn this myself. And because I would like to do a lot of proprietary problem solving -- once I've learned how to do certain problem sets it is difficult for non-disclosure to reach out for help. If you have any other advice...by all means....
In my opinion you can easily learn D if you have motivation and a solid background in a language like C and C++ but I would not recommend D as a starting place because the community is relatively small and you might not find easy resources and get quick answers. That said, between the free tutorial (http://ddili.org/ders/d.en/) and a paid copy of TDPL (http://erdani.com/index.php/books/tdpl/) you can probably get going on your own with some effort. FIX is a large (and IMHO tedious) but documented and not difficult protocol to implement so depending on what you want to do it might not take much time at all to get a working subset. However, you'll probably run up on TCP/IP and sockets and other low-level stuff which may or interface with vendor libraries or platforms and then the C/C++ experience will be helpful.
It is possible that you will do well to learn D first. You will at least learn what programming is and what a language can do for you. Whether you will have enough resources to learn what you need for your end goal isn't very important, what you'll have learned will be applicable to C++; so you can worry about that headache if you find a need to switch.
D is a great language to learn, but you are right to suspect that the lack of beginner support would be a problem. I would not recommend learning it until you have another language under your belt, you simply won't have the experience needed to understand how and why you'd want to use its features and how to design programs around them or how to fix the problems you might encounter. At this point in time, D is the deep end, most of its resources are geared towards people who know what they want and getting many things done will rely on you being able to use C language bindings anyway. I'd suggest at least learning either C or Python (or possibly a Lisp like Scheme or Clojure) first. That way you can get a feel for what is possible with a programming language.
Announcement text quote: fitted kitchens uk. Thirty Ex Display Kitchens To Clear. w w w. e x d i s p l a y k i t c h e n s 1. c o. u k £ 595 Each with appliances.Tel 01616-694785 
Announcement text quote: examples here all work: https://github.com/dysinger/nanomsg-examples/blob/master/README.org but I have not tried any larger projects. 
Announcement text quote: I have been working on a media library, it still has a long way to go, but I figured its about time I shared what I am doing. https://github.com/luminousone/dmedia If I could possibly convince a few people out their to give'er a once over. I use XCB/XLIB/GLX directly, so I am not just simply wrapping SDL or SFML. And I am using XCB for event handling and opening windows. Threading should work much more reliably, due to the use of XCB. I am releasing the library under the BSD license, 
Announcement text quote: I've recently decided to open source FoundationDB D API from our internal project. It's released under MIT license since that's the simplest option I could think of. https://github.com/GeorgeSapkin/fdb-d It has been ripped out of a working project so it's missing unit testing and sample usage for now. It's based on FoundationDB Node.js API[1] and you have to be familiar with FoundationDB in general to use it. Certain features (parts of Tuple layer) that we don't use have not been implemented yet. This has only been used/tested on Fedora 20/21 x64 and Ubuntu 14.04 x64. For more information about FoundationDB check out it's official website: https://foundationdb.com/ Comments, suggestions, contributions are all welcome ;) [1] https://foundationdb.com/key-value-store/documentation/api-node.html 
Unlike [DerelictFDB](https://github.com/shrub77/DerelictFDB) which is just a wrapper for a FDB C library this is a higher level API which better represent FDB structure and is modeled after Node.js API.
Announcement text quote: About Bloomberg -------------- Bloomberg provides a platform for market data, news, analytics, and messaging to financial services firms and other organisations with an interest in markets. There are some interesting developments on the horizon but, for the time being, for investment banks and hedge funds it remains the standard platform for such. Their API is public, and they provide implementations for C++, C, Python, Java, and .Net amongst others. Interesting for D? ------------------ The financial services space might be an interesting domain for D because it's an economically important area where performance, safety and productivity all matter, and none of the existing solutions (mostly C, C++, Java, Python) are particularly satisfactory. At the same time, people in finance do not tend to be in the business of taking big technology risks with a product not yet widely seen as industry standard because the costs of messing up may be especially high (and messing up for creative reasons is much less acceptable than if you follow the herd). Perhaps in the face of new emerging realities regarding data set sizes, memory speed, and single core processing power that creates opportunity for more entrepreneurial participants to use the best tool for the job. I certainly hope so. People often want to see results quickly, so even if it's not really much work to do the port, there might be a big difference in the chance someone might consider trying (and then learning to appreciate) D. Beyond a mature numpy/pandas equivalent, the other missing piece is an analytical library for derivative pricing and risk management. QuantLib is the main open source project - it is written in C++ but has D SWIG wrappers. (There is the Java Opengamma too, but I am not so familiar with it). SWIG is not great though, and I don't think the wrappers cover all the functionality. (There was a project to port QuantLib to D but I am not sure it ever got started, and it is now defunct). It is super appealing to be able to rapidly prototype and explore ideas about largeish data sets and have the results be fast, knowing also that the code one has written can serve as the basis for something used in production (thanks to strong typing, elegant language design, etc). So I think there is a chance for D to take off within finance for some uses. Project status -------------- So for my own purposes - but I hope they might benefit others - I have ported the C headers and C examples to D. It's pre-alpha status - everything compiles, but I need to start up a Windows machine with Bloomberg to get it linking and get any bugs out of the port. I thought of holding back posting till they were perfect, but decided to just post what I have in case anyone else should have an interest. It may be that the C++ headers create a more appealing interface, but I do not know the current status of C++ vs D interface as the dlang.org docs are stale. For the time being the examples are just an ugly direct translation, with lots of casts and not much attention paid to beauty and elegance. But it's something, and a start. Link ---- https://github.com/Laeeth/d-bloombergapi Laeeth. 
Announcement text quote: gchunt is a tool is to help D developers identify and keep in check the usage of GC in their projects. So far it just postprocesses D compiler's -vgc output into a nice Wiki table. Results looks like this (Phobos): http://wiki.dlang.org/Stuff_in_Phobos_That_Generates_Garbage#Labeled_data Notice the source links grouped for each allocation reason per function. In short: it's a ready to use spread-sheet for reviewers to work through. Release notes &amp; Windows binary: https://github.com/DmitryOlshansky/gchunt/releases/tag/v0.1.0 Past discussions and the origin of the tool: http://forum.dlang.org/thread/pzyzqwpqdllegxnysmwz@forum.dlang.org#post-m11hhb:2423nf:241:40digitalmars.com Happy GC hunting ! -- Dmitry Olshansky 
Announcement text quote: Sorry for the off-topic and short notice. Don't forget to say hi if you decide to come. :) Ali ACCU: Wednesday, November 12 - Michael Patrick Ellard, "Swift for C, Objective-C and C++ Developers" When: Wednesday, November 12, 2014 Topic: Swift for C, Objective-C and C++ Developers Speaker: Michael Patrick Ellard Time: 6:30pm doors open 7:00pm meeting begins Where: DataStax &lt;-- NOTE DIFFERENT VENUE 3975 Freedom Cir Santa Clara, CA Map: &lt;https://www.google.com/maps/place/3975+Freedom+Cir,+Santa+Clara,+CA+95054/@37.3872135,-121.9739083,17z/data=!3m1!4b1!4m2!3m1!1s0x808fc9ebc0e9d86d:0x2d931959404a6906?hl=en&gt; Cost: Free More Info: &lt;http://www.meetup.com/SFBay-Association-of-C-C-Users/events/194137622/&gt; An introduction to Swift for developers who are experienced in C, Objective-C or C++. Special attention will be paid to similarities and differences between the languages, and to interoperability between Swift, C and Objective-C. Michael Patrick Ellard is an iOS developer with 35 successful submissions to the iTunes App Store. He has been teaching courses in iOS development since 2011. He recently spent a year at Apple, where he helped with the launch of the Swift programming language. The ACCU meets twice monthly. Meetings are always open to the public and are free of charge. To suggest topics and speakers please email Ali Cehreli via acehreli@yahoo.com 
Announcement text quote: It's happening. Studio Pro for free ;) http://blogs.msdn.com/b/visualstudio/archive/2014/11/12/visual-studio-2015-preview-visual-studio-community-2013-visual-studio-2013-update-4-and-more.aspx .NET Open Source http://blogs.msdn.com/b/dotnet/archive/2014/11/12/net-core-is-open-source.aspx .NET have a good and open sourced GC, so maybe it's possible to get something useful from it? 
Announcement text quote: ArrayFire is open source, as announced on Hacker News and Reddit https://github.com/arrayfire/arrayfire Overview here: http://www.arrayfire.com/docs/index.htm There is a C API so it is easy to call from D. This should help the situation for numerical programming with D. 
Announcement text quote: We've just announced the first-ever O'Reilly Software Architecture Conference and want to make sure it's on your radar. It's happening at the Hynes Convention Center in Boston, March 17-19, 2015. We’re deep in the planning stages now, and we thought you’d want to know that the call for speakers has just opened. See the full CFP for details on the kinds of topics we’re looking for, as well as tips for creating a great proposal. Proposals due by December 2, 2014. http://softwarearchitecturecon.com/sa2015 We aim to make the O'Reilly Software Architecture Conference a must-attend professional training event for software architects, aspiring software architects, engineering teams, and senior developers. In many organizations, software architects play a crucial part in deciding which technologies and practices will be adopted. In fact, there are few positions as singularly influential in making purchasing decisions. The O'Reilly Software Architecture Conference follows on the success of other recent O'Reilly conferences such as Fluent, Solid, and Strata, and we have high expectations for this new event. There are limited sponsorship opportunities available. For more information on sponsorship, contact Sharon Cordesse at scordesse@oreilly.com or 707-827-7065. Sincerely, - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Sharon Cordesse, strategic accounts manager - O'Reilly Media, Inc. 1005 Gravenstein Highway North, Sebastopol, CA 95472 (707) 827-7065 http://conferences.oreilly.com To unsubscribe, please email scordesse@oreilly.com with "unsubscribe" in the subject line. 
Announcement text quote: https://github.com/Hackerpilot/DCD/releases/tag/v0.4.0 The D Completion Daemon is an IDE-independent autocompletion tool for D code. Changes from 0.3.2 to beta 1: * #162 You can now ask the server for symbol location information without a cursor location or a file being edited. * #117 Import statement autocompletion now knows how to handle normal imports, multiple imports, renamed imports, multiple renamed imports combined with normal imports, and other crazy things. * #56 Support the "with" statement. * Fix function call tip display for complicated bits of code such as Derelict 3. Changes from beta 1 to beta 2: * Add --version to both the client and server * Update man pages * Update README * Update --help output for client and server Changes from beta 2 to 0.4.0: * Fixes to function call tip display with explicit template instantiation. * Updated libdparse dependency to fix various parser bugs (and language changes) * Fixed the LDC portion of the makefile 
Excellent!
Announcement text quote: Maxime's new article is on Reddit: http://www.reddit.com/r/programming/comments/2mb6og/the_fastest_forin_loops_in_the_whole_wide_web/ Ali 
Announcement text quote: Hi everyone, LDC 0.15.0-beta1, the LLVM-based D compiler, is available for download! This beta release is based on the 2.066.1 frontend and standard library and supports LLVM 3.1-3.5 (OS X: no support for 3.3). Please help testing this release! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/thread/bqtsdrcwgwjenhaindin@forum.dlang.org Regards, Kai 
Announcement text quote: To further Devisualization, I have got the start of an image library. It should be fairly interface complete now. For this I really could use help from anyone with experience with PNG especially with Adam7 interlacing and color correction such as gamma. Currently missing an exporter. Only imports. Does not import grayscale or palleted. Goal: to act as the image representation within memory (including colors). Usage: Devisualization.Window uses it for window icon's (untested for x11 can somebody confirm this does indeed work?). Devisualization.Font heavily uses it for glyphs and the output of its rasterization. [0] https://github.com/Devisualization/image 
Announcement text quote: Just quickly (finally) announcing the release of the next vibe.d version. This one was originally scheduled for start of September, but I got extremely busy with no time left for tidying everything up. The list of changes is long with notable improvements to the web interface generator, the Redis client and the SSL/TLS implementation (including added SNI support). However, the improvements are all over the place. It also compiles on the latest DMD compiler releases (there have been some breaking changes in 2.066). The full list of changes/fixes can be found at http://vibed.org/blog/posts/vibe-release-0.7.21 Homepage: http://vibed.org/ DUB package: http://code.dlang.org/packages/vibe-d GitHub: https://github.com/rejectedsoftware/vibe.d 
Announcement text quote: A new version of Dgame is ready: https://github.com/Dgame/Dgame/releases/tag/0.3.2 Don't forget to visit the website and the tutorials: http://dgame-dev.de/ http://dgame-dev.de/?page=tutorial Also there is now a Work in Progress section where games are listed which are written with Dgame: http://dgame-dev.de/?page=show There is as yet only one (finished) game of me and a fellow student, but I'm sure others will follow. It is intended to show what is possible and how. Currently it consists of only one level, but we're working on it. 
Announcement text quote: Just browsing reddit and found this article posted about D. Written by Andrew Pascoe of AdRoll. From the article: "The D programming language has quickly become our language of choice on the Data Science team for any task that requires efficiency, and is now the keystone language for our critical infrastructure. Why? Because D has a lot to offer." Article: http://tech.adroll.com/blog/data/2014/11/17/d-is-for-data-science.html Reddit: http://www.reddit.com/r/programming/comments/2n9gfb/d_is_for_data_science/ 
Announcement text quote: D is for Data Science by Andrew Pascoe http://www.reddit.com/r/programming/comments/2n9gfb/d_is_for_data_science/ 
Announcement text quote: dfix is a tool for automatically upgrading the syntax of D source code. Changes since 0.1.1: * #1 dfix will now rewrite "const int foo() {}" to int foo() const {}" * #6 The C-style array syntax fix is no longer incorrectly applied to certain ASM statements. * #9 You can now provide directory names as arguments to dfix in case you're too lazy to run find and xargs. (And really, who isn't?) * #11 dfix is now registered on code.dlang.org. http://code.dlang.org/packages/dfix * Added tests. 
Announcement text quote: Necht hob was fitted many years ago and still works perfect. _________ [url=http://www.nechtgashob.co.uk]Necht Hob[/url] 
Announcement text quote: Hi, In the last weeks I tried to make a draft for a mvc library. I tried to take advantage of templates, uda and ctfe to make the interaction with the database and the routing easier. There is still a lot of work to do for making it ready to work in production... but anyway.. what do you think? https://github.com/gedaiu/crate.d Thanks, Bogdan 
Announcement text quote: Hello, a new release of Coedit[MainPage], the small open-source D IDE for Windows and Linux, is released. Here is a paste of the release log. Messages: ========= - redesigned the widget: a toolbar at the top allows to filter the messages according to a category, either all, editor (focused editor messages), project, misc (messages from the custom tools) or application (Coedit warnings or exceptions). - custom tools messages are redirected if poUsePipes is defined in the tool options. - errors messages are not split anymore (e.g: instantiated from here...) thus less confusing. Miscellaneous: ============== - non D files syntax highlighter: txt, md, etc. Automatically set when opening a file. - the project inspector displays the items from the project "Path" options (-I, -J, additional sources). - Zoom in,out editor with Ctrl++, Ctrl+-, restore with Ctrl+. - The static explorer widget scans in background, "refresh on change", "refresh on focus" does not freeze the GUI anymore. - various bug fixed and small improvements. - pre-build binaries include an up-to-date DCD build. - refer to the wiki[WikiPage] for more information about the changes and the new features. Pre-build binaries are available from the [ReleasePage]. --------------------------------------------- [MainPage]: https://github.com/BBasile/Coedit [ReleasePage]: https://github.com/BBasile/Coedit/releases [WikiPage]:https://github.com/BBasile/Coedit/wiki --------------------------------------------- Baz. 
Announcement text quote: Hi guys, i've been trying to download the DWT library for some time now and i just couldnt get it cos the zip i'm downloading from github doesnt contain any library source. Until recently when i went to dsource.org and i was really happy to have found the full DWT package on to download it and find out it uses the tango library. Please help guys! How do i get the dwt for phobos library for D2. Please help! I'm using Dmd32 version2.066.0 on a windows vista. Your help will be greatly appreciated.. Thanks in advance 
Announcement text quote: d-apt &lt;http://d-apt.sourceforge.net/&gt; changed the distribution name from "dmd" to "d-apt". Download the last "d-apt.list" to update: $ sudo wget http://master.dl.sourceforge.net/project/d-apt/files/d-apt.list -O /etc/apt/sources.list.d/d-apt.list The new distribution allows to install any deb package version available at d-apt. i.e. "dmd-bin" deb package is available for versions 2.064.2, 2.065.0 and 2.066.1 To install an old dmd version: $ sudo apt-get install dmd-bin=2.064.2-0 libphobos2-dev=2.064.2-0 Legacy distribution will be disabled on dmd v2.067.0 release. 
Announcement text quote: I really think DUB lacks an important flag/option namely a variant of allowWarnings that *recursively* affects all the sub packages of a dub.json project description. Otherwise developers who want to try out D will think its is broken because of warnings such as deprecated use of C-style arrays hinders them from building and trying out all the cool software currently packaged with DUB. I don't think D's deprecation system was meant to have this affect on the developer. Comments on that, please. 
Announcement text quote: http://code.dlang.org/packages/undead https://github.com/DigitalMars/undeaD In upgrading old D code, one time consuming aspect is reworking code that depends on old Phobos modules that have been taken out behind the woodshed and shot. Sometimes, there's significantly more work involved than just renaming things. Just to get things working, it's convenient to be able to use the old modules until one has time to redo the code. I've done this myself, and then noticed that Dmitry Olshansky had also done it when updating DMDScript to D2. Rather than having people keep duplicating others' efforts, I created the undeaD library of zombie Phobos modules. I'm new to dub, so if I botched that up, please do a pull request! Also, if there are any other dead Phobos modules you'd like exhumed, PR's are welcome. 
Announcement text quote: You guys are working on a lot of great stuff that'll make for very interesting talks. http://softwarearchitecturecon.com/sa2015 Proposals are due Dec. 2. I'm submitting mine - see you there! 
Announcement text quote: I'm sure you all are as tired of the occasional spam that hits these lists as I was deleting it. (Mailing list users in particular, I guess, since we can't delete an email once it was sent out.) Most of the spam was coming in through the forum, so I suppose I was responsible for [not] keeping it out. Although forum.dlang.org has had a spam check and used reCAPTCHA since it was announced, it is only somewhat effective against fully-automated bots - it is powerless against humans paid to post spamverts on forums web-wide, which is what the current spam economy seems to be gravitating towards. Enter DCaptcha, a question-answer challenge tailored for D programmers. Its goals are to challenge posters of suspicious-looking content with questions that should be easy to answer to D programmers, and impossible for non-technical people with no incentive to learn or research stuff (i.e. spammers). DCaptcha is already in use on the D wiki (wiki.dlang.org), with great success - DCaptcha's debut cut the short-lived explosion in wiki spam to zero. For an idea of what sort of questions DCaptcha asks, you can demo it on the following page, so you don't have to clutter the forum with test posts: http://wiki.dlang.org/extensions/DCaptcha/demo.php Source code: https://github.com/CyberShadow/dcaptcha Pull requests for more challenges are welcome. You can find some goals for new challenges at the top of dcaptcha.d. Previous discussion (w.r.t. the D wiki): http://forum.dlang.org/post/tpflbvlfutjwyvqmowdx@forum.dlang.org 
I agree. It seems like most posts by it get downvoted anyway.
I disabled it. Hopefully, there is enough action here without.
I disagree. It's a good way to learn about D developments without checking the D forum several times a day (please note that there is no RSS there).
What's your rationale for this? I don't see how muting a bot is going to make people participate here. If you want to encourage discussion on the subreddit, then ask some challenging questions, or post some controversial ideas, or write blog articles and direct readers to Reddit for comments, or etc. The *last* thing you should do is to silence your most active participant (even if it isn't human)! Personally, I don't see a problem with just letting the D forums be the primary social hub for D. Not everything needs to be centred around Reddit.
I hope you'll reconsider. I like the bot. :)
I like the bot. I don't read the forums daily but I do check reddit.
+1 for not disabling the bot
With out the bot there is no reason for me to stop by here. I'll just go directly to the D forum instead. 
Bot is back again. Source not public. It consists of a bunch of Python scripting and includes some private stuff. If I would get around to clean it up, I could release a kind of framework.
That's pretty darn cool! But, given that C is sort of the "Grand-daddy of Everything" it's kind of like violating some unwritten but sacred taboo. Still, keep on rocking!
&gt; Just pure handwritten D. "Energy? Like, electric, solar or what?" "No, Randall. Just. Pure. _Energy_."
Announcement text quote: Glad to announce that D support on Travis-CI was launched today. http://blog.travis-ci.com/2014-12-10-community-driven-language-support-comes-to-travis-ci/ You can now get out-of-the-box continuous integration for your D projects on github. If you are already using dub, using Travis-CI is as simple as adding a 2 line .travis.yml file to your repo and toggling a switch on travis-ci.org. language:d sudo: false You can also chose a specific compiler by adding a d: tag. d: ldc-0.14.0 Build matrices are supported as well, so you can test your project against multiple compilers. Please only test as many compilers as you actually need! d: - dmd-2.066.1 - gdc-4.9.0 - ldc-0.14.0 The following compilers were successfully tested. dmd-2.064 dmd-2.065.0 dmd-2.066.1 gdc-4.8.2 gdc-4.9.0 ldc-0.13.0 ldc-0.14.0 Read the docs for more details http://docs.travis-ci.com/user/languages/d/. And you can also have a look at these 2 libraries. https://travis-ci.org/MartinNowak/hyphenate https://travis-ci.com/MartinNowak/bloom Happy testing -Martin 
Announcement text quote: - Removed the unrelated Turkish menu from the English pages - Improved the ebook formats - Removed the download page and linked the ebook versions directly from the main page instead I consider these beta quality: http://ddili.org/ders/d.en/ (I am not sure why, but you may have to refresh the page in your browser.) I know that the format needs further improvements but please let me know if there are serious issues like some text not showing up at all. (Preferably, respond in this thread to avoid duplicate reports.) Ali 
Announcement text quote: I started to work on an engine, which emulates the features and limitations of older graphics systems, mainly for retro-styled indie games. Features: -Support for parallax scrolling, and multiple sprite and tile layers -Support for sprite scaling and rotation -Max. 65536 colors on screen from a palette -Variable sprite sizes for easier development, tile layers can work with any size of tiles as long as all of the tiles are the same size on one layer -Collision detection -Support for modding -Sprite editor, tile map editor It's not a dethroner for the Unreal Engine 4, but I try my best to get it into work. It's current name is VDP engine, but if you can come up with a better name I might change it. I still haven't decided to make it open or closed source (if it'll be ever used by any game that makes profit, I'd like to get some share from it). 
I kinda had the same idea as this, 'cept I was writing mine in C++ (gasp)! Have you considered a more liberal license, like MIT/BSD? Or hell, this could even be a great community project for the D community!
Yeah, the bot just scrapes the front page and deletes duplicates. When somebody replies to the thread, it appears on the frontpage. As the bot was not active 2013-10 it was not a duplicate. 
Announcement text quote: It's not the best, but it's a start. Check it out here: http://dsfml.com/doc.html I would love some feed back on this. I already have a few things I would like to change, namely the layout and adding some examples, but I would like to hear what everyone thinks on what I have up. Just a note about the rest of the site though, it is currently under construction so don't expect too much. 
Announcement text quote: Hi Everyone, In my spare time over the last 3 weeks, I've been working on a C# to D Compiler based on Roslyn. Please check it out and give comments. I would also like this to be a basis to provide both Libraries in D and allow building native C# applications with the help of D. Its available on my github https://github.com/afrogeek/SharpNative 
D used to be on the benchmarks game, then was removed by the maintainer of the site. Some of the reasoning is discussed in this thread: http://forum.dlang.org/thread/mailman.50.1288555490.21107.digitalmars-d@puremagic.com
Well, dang. Seeing as those were over 4 years ago now, I wonder if a re-submission would be acceptable?
*"D was removed maybe for the lack of a 64 bit implementation, but also because that site author has reduced the amount of work needed to manage the site, reducing the number of benchmarks and languages. Many D programs were very C-looking (because they were designed to be fast if compiled with DMD), and that site owner has always desired to show a high diversity in the language solutions, and remove the very similar languages where possible."* D is one of the 30 or so language implementations not measured on Q6600 that were measured on Pentium 4 before September 2008. http://benchmarksgame.alioth.debian.org/dont-jump-to-conclusions.html#multicore
Yes. Still working on it ... slowly.
So is there a chance to get it resubmitted, do you think?
Announcement text quote: The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack. Here is more info about format: http://cbor.io/ You can easily encode and decode things like built-in types, arrays, hash-maps, structs, tuples, classes, strings and raw arrays (ubyte[]). Here is some simple code: import cbor; struct Inner { int[] array; string someText; } struct Test { ubyte b; short s; uint i; long l; float f; double d; ubyte[] arr; string str; Inner inner; void fun(){} // not encoded void* pointer; // not encoded int* numPointer; // not encoded } ubyte[1024] buffer; size_t encodedSize; Test test = Test(42, -120, 111111, -123456789, 0.1234, -0.987654, cast(ubyte[])[1,2,3,4,5,6,7,8], "It is a test string", Inner([1,2,3,4,5], "Test of inner struct")); encodedSize = encodeCborArray(buffer[], test); // ubyte[] and string types are slices of input ubyte[]. Test result = decodeCborSingle!Test(buffer[0..encodedSize]); // decodeCborSingleDup can be used to auto-dup those types. assert(test == result); Here is github link: https://github.com/MrSmith33/cbor-d Destroy! 
See -- [Why don't you include language X?](http://benchmarksgame.alioth.debian.org/play.html#languagex) There's a chance that in 2015 [the D community will use the benchmarks game scripts *to make their own measurements* and publish them](http://forum.dlang.org/thread/lv7h1r$mg3$2@digitalmars.com?page=3#post-juawuohxdfcxtbraejnv:40forum.dlang.org). 
If it has a C API, it can be used just by redeclaring the parts of the C API you use (e.g. structs, function signatures) in a .d file, see [deimos](https://github.com/D-Programming-Deimos/openssl/blob/master/deimos/openssl/asn1.d) (those are comphrehensive, you only need to redeclare what you need). If it only has a C++ API, the same approach may work but it won't be as trivial, especially if there are templates involved. This is a high-priority area for D at the moment, AFAIK they already got `std::vector` working with the current git version. Either way, I know of no OpenCV bindings for D at the moment (only searched [code.dlang.org](http://code.dlang.org) though) Also, you might find more answers on the [D forums](http://forum.dlang.org); most D community is there.
Announcement text quote: https://github.com/Laeeth/d_hdf5 HDF5 is a very valuable tool for those working with large data sets. From HDF5group.org HDF5 is a unique technology suite that makes possible the management of extremely large and complex data collections. The HDF5 technology suite includes: * A versatile data model that can represent very complex data objects and a wide variety of metadata. * A completely portable file format with no limit on the number or size of data objects in the collection. * A software library that runs on a range of computational platforms, from laptops to massively parallel systems, and implements a high-level API with C, C++, Fortran 90, and Java interfaces. * A rich set of integrated performance features that allow for access time and storage space optimizations. * Tools and applications for managing, manipulating, viewing, and analyzing the data in the collection. * The HDF5 data model, file format, API, library, and tools are open and distributed without charge. From h5py.org: [HDF5] lets you store huge amounts of numerical data, and easily manipulate that data from NumPy. For example, you can slice into multi-terabyte datasets stored on disk, as if they were real NumPy arrays. Thousands of datasets can be stored in a single file, categorized and tagged however you want. H5py uses straightforward NumPy and Python metaphors, like dictionary and NumPy array syntax. For example, you can iterate over datasets in a file, or check out the .shape or .dtype attributes of datasets. You don't need to know anything special about HDF5 to get started. In addition to the easy-to-use high level interface, h5py rests on a object-oriented Cython wrapping of the HDF5 C API. Almost anything you can do from C in HDF5, you can do from h5py. Best of all, the files you create are in a widely-used standard binary format, which you can exchange with other people, including those who use programs like IDL and MATLAB. =========== As far as I know there has not really been a complete set of HDF5 bindings for D yet. Bindings should have three levels: 1. pure C API declaration 2. 'nice' D wrapper around C API (eg that knows about strings, not just char*) 3. idiomatic D interface that uses CTFE/templates I borrowed Stefan Frijter's work on (1) above to get started. I cannot keep track of things when split over too many source files, so I put everything in one file - hdf5.d. Have implemented a basic version of 2. Includes throwOnError rather than forcing checking status C style, but the exception code is not very good/complete (time + lack of experience with D exceptions). (3) will have to come later. It's more or less complete, and the examples I have translated so far mostly work. But still a work in progress. Any help/suggestions appreciated. [I am doing this for myself, so project is not as pretty as I would like in an ideal world]. https://github.com/Laeeth/d_hdf5 
Announcement text quote: Last one for a while, I think. I wish you all a very peaceful Christmas and New Year, and let's hope 2015 brings some more positive energy to the world. Links here: https://github.com/Laeeth/d_simplex https://github.com/Laeeth/d_swisseph 1. D bindings/wrappers for the swiss ephemeris http://www.astro.com/swisseph/swephinfo_e.htm "The SWISS EPHEMERIS is the high precision ephemeris developed by Astrodienst, largely based upon the DExxx ephemerides from NASA's JPL . The original release in 1997 was based on the DE405/406 ephemeris. Since release 2.00 in February 2014, it is based on the DE431 ephemeris released by JPL in September 2013". NB - Swiss Ephemeris is not free for commercial use. ==== 2. D port of simple Nelder-Mead simplex minimisation (written by Michael F. Hutt in original C version) here. With constraints. From Wiki: https://en.wikipedia.org/wiki/Nelder-Mead_method "The Nelder–Mead method or downhill simplex method or amoeba method is a commonly used nonlinear optimization technique, which is a well-defined numerical method for problems for which derivatives may not be known. However, the Nelder–Mead technique is a heuristic search method that can converge to non-stationary points[1] on problems that can be solved by alternative methods". ==== Links here: https://github.com/Laeeth/d_simplex https://github.com/Laeeth/d_swisseph 
Announcement text quote: Now,you can use dfl2 to get the 64 bit winForm. Frank. 
Announcement text quote: Hi, Apparently I've never announced this here, so here we go. I have written, and started maintaining D bindings for the GCCJIT library, available on github at this location: https://github.com/ibuclaw/gccjitd What is GCCJIT? --- GCCJIT is a new front-end for gcc that aims to provide an embeddable shared library with an API for adding compilation to existing programs using GCC as the backend. This shared library can then be dynamically-linked into bytecode interpreters and other such programs that want to generate machine code "on the fly" at run-time. The library is of alpha quality and the API is subject to change. It is however in development for the next GCC release (5.0). How can I use it? --- See the following link for a hello world program. https://github.com/ibuclaw/gccjitd/blob/master/tests/dapi.d I am currently in the process of Ddoc-ifying the documentation that comes with the C API binding and moving that across to the D API. Improvements shall come over the next months - though any assistance in making the Ddocs prettier are welcome contributions. Regards Iain. 
Yes. I haven't taken a swing at it with D yet, but I've worked with a few vendor libraries this way and it's tedious but simple to do by hand. Another option is DStep https://github.com/jacob-carlborg/dstep. I found DStep did a nice job on prototypes, structs, enums, and typedefs but ignores defines and anything else in a header. For some headers that's sufficient, for others it's just a starting point.
Announcement text quote: Hi everyone, I have the pleasure to announce to you all the existence of a modified LDC able to interface directly to C++ libraries, wiping out the need to write bindings: https://github.com/Syniurge/Calypso It's at a prototype stage, but its C++ support is pretty wide already: • Global variables • Functions • Structs • Unions (symbol only) • Enums • Typedefs • C++ class creation with the correct calls to ctors (destruction is disabled for now) • Virtual function calls • Static casts between C++ base and derived classes (incl. multiple inheritance offsets) • Mapping template implicit and explicit specializations already in the PCH to DMD ones, no new specialization on the D side yet • D classes inheriting from C++ ones, including the correct vtable generation for the C++ part of the class So what is this sorcery? Let's remind ourselves that this isn't supposed to be feasible: &gt;Being 100% compatible with C++ means more or less adding a fully &gt;functional C++ compiler front end to D. Anecdotal evidence &gt;suggests that writing such is a minimum of a 10 man-year &gt;project, essentially making a D compiler with such capability &gt;unimplementable. http://dlang.org/cpp_interface.html Well.. it is :D Calypso introduces the modmap keyword, as in: modmap (C++) "cppheader.h"; to generate with the help of Clang libraries a "virtual" tree of C++ modules. Then after making Clang generate a PCH for all the headers, the PCH is loaded and classes, structs, enums are placed inside modules named after them, while global variables and functions are in a special module named "_". For example: import (C++) Namespace.SomeClass; // imports Namespace::SomeClass import (C++) Namespace._; // imports all the global variables and functions in Namespace import (C++) _ : myCfunc, myGlobalVar; // importing the global namespace = bad idea, but selective imports work Being a prototype, I didn't really pay attention to code conventions or elegance and instead focused on getting things working. And being tied to LDC and Clang (I have no idea how feasible a GCC version would be), it's going to stay like this for some time until I get feedback from the contributors on how this all should really be implemented,. For example Calypso introduces "language plugins", to minimize the amount of code specific to C++ and to make support of foreign languages cleaner and less intrusive, although it of course needs numerous hooks here and there in DMD and LDC. Calypso is still WIP, but it's in pretty good shape and already works in a lot of test cases (see tests/calypso/), and is almost ready to use for C++ libraries at least. Since C libraries are in the global namespace, it's not a convenient replacement yet for bindings until I implement the Clang module map format. More info this blog post detailing some of the history behind Calypso: http://syniurge.blogspot.com/2013/08/calypso-to-mars-first-contact.html So.. Merry Christmas dear D community? :) My take on the current talks of "feature freezing" D: the strength of D is its sophistication. The core reason why D fails to attract more users isn't the frequent compiler bugs or regressions, but the huge amount of time needed to get something done because neither equivalent nor bindings exist for most big and widespread C++ libraries like Qt. All these talks about making D a more minimalist language won't solve much and will only result in holding back D, which has the potential to become a superset of all the good in other system languages, as well as bringing its own powerful unique features such as metaprogramming done right. By removing the main reason why D wasn't a practical choice, this will hopefully unlock the situation and make D gain momentum as well as attract more contributors to the compilers to fix bugs and regressions before releases. 
Announcement text quote: For a bit of fun and prompted by a thread requesting such, i've created a few visualisation videos generated from D repositories by Gource. DMD: https://www.youtube.com/watch?v=8OuZ9sfyEbI Phobos: https://www.youtube.com/watch?v=5OLccv4FhE8 Druntime: https://www.youtube.com/watch?v=JHdbdnBVXus Tools: https://www.youtube.com/watch?v=E6aXnB5iAco Dub: https://www.youtube.com/watch?v=eCl0TQRvZqY Gource: https://code.google.com/p/gource/ Have fun! 
Announcement text quote: Hi, I've created this meetup group for any London based D enthusiasts to meet up and get excited about D. I'll also demo my intellij plugin for D at the first meetup which I've scheduled for February. Although I might be a bit lonely if I'm the only person there! lol. http://www.meetup.com/London-D-Programmers/ Please join me if you are in the area and feel like getting some D. 
Announcement text quote: RSVP: http://www.meetup.com/D-Lang-Sillicon-Valley/events/219413448/ 
Announcement text quote: http://teespring.com/d-lang-sv Non profit, I hope other follow suit. 
Announcement text quote: http://www.wired.com/2014/12/wired-enterprise-year/ 
Announcement text quote: Harbored-mod is a documentation generator based on Brian Schott's Harbored. -------- Features -------- It supports (a non-conflicting subset of) Markdown besides DDoc, so Markdown can be used together with DDoc in documentation comments. Some other features: * Decent defaults. `hmod source` will generate rather usable documentation very similar to this one: * CSS and main page content can be overridden. Extra content can be added to the table of contents (e.g. links to non-DDoc generated documentation, I use it to link to tutorials/articles written in ReStructuredText) * Documented config file you can write all command-line options to, so just typing `hmod` will regenerate the docs. * Generated file paths are same as those generated by DDox, so links will not break if moving from one to the other. ---------------------------------------------------------- Examples of generated docs (work-in-progress Tharsis docs) ---------------------------------------------------------- http://defenestrate.eu/docs/tharsis-core/api/tharsis/entity/entitymanager/EntityManager.html http://defenestrate.eu/docs/tharsis-core/api/tharsis/entity/componenttypeinfo/ImmutableRawComponent.html http://defenestrate.eu/docs/tharsis-core/api/tharsis/entity/processtypeinfo/prioritizeProcessOverloads.html ----- Links ----- * GitHub: https://github.com/kiith-sa/harbored-mod * Original Harbored: https://github.com/economicmodeling/harbored ---------- Background ---------- Harbored-mod started as an attempt to remove things I didn't want from Harbored (inability to work without JS, frames, etc.) but I ended up with more changes than I originally intended, and I think at this point it might be useful for other people as well. I pushed it into a separate repository because I don't think at this point it can be sanely merged into harbored (plus there are those features I removed). 
Announcement text quote: https://github.com/Laeeth/d_etpan http://www.etpan.org/libetpan.html https://github.com/dinhviethoa/libetpan LibEtPan ======== The purpose of this mail library is to provide a portable, efficient framework for different kinds of mail access: IMAP, SMTP, POP and NNTP. It provides an API for C language. Who uses LibEtPan? Almost all email app in Mac and iOS AppStore: see Mailcore Cisco Mobile for iPhone Claws Mail Filemaker Pro Google Apps Migration for Microsoft Exchange Playstation Vita Email Application reMail (Acquired by Google in 2010) Sparrow (Acquired by Google in 2012) Status ====== Pre-alpha bindings only. They compile without errors, but probably need some fixes and some key functions missing. I have not yet finished porting the demos. Later when time I will add D style wrappers. 
Announcement text quote: http://nwcpp.org/ All are invited. Now I just have to write the presentation :-( 
Announcement text quote: Hello, Exciting times! DConf 2015 will take place May 27-29 2015 at Utah Valley University in Orem, UT. The call for submissions is now open at http://dconf.org. Please mind the submission deadline: February 27, 2015. We are hoping to build a strong program with the help of D established luminaries who spoke at previous editions of DConf, as well as up-and-coming contributors. So please send us your submissions soon. There's a good deal of progress and strength building in our community as of late, and you can make the conference reflect it. Good luck! Andrei 
Announcement text quote: I've started a list of curated D tips and tricks here: http://p0nce.github.io/d-idioms/ Anything that you wished you learned earlier at one point in the D world is welcome to be added or suggested. I think the focus should be on "stuff that could make you more productive, or is just funky" but that is up to debate. Of course the D Cookbook still stays irreplaceable for a consistent, in-depth discussion of being D-enabled. Thoughts? 
Announcement text quote: Your Mission Provide server administration to our data centers Provisioning new servers, imaging, monitoring, and other daily routines Daily monitoring and maintenance of servers Perform backup, file replications, and script management for servers Test and apply new software and patches Complete security audits on a routine basis Report to the VP Product and Innovations Your Track Record 5+ years Linux System administration (experience with Debian-based distributions (Ubuntu in particular) desired) Working knowledge of complex web hosting configuration components, including firewalls, HA Proxy, web and database servers Ability to deploy, support, and diagnose real (hardware, software and network) issues for a production environment Knowledge of TCP/IP, bash/python scripting, postfix, smartmontools, Puppet, LVM, RAID, collectd, cacti, nagios and other monitoring solutions is highly appreciated Experience in nginx web servers, PHP and MySQL configuration, as well as deploying custom in-house developed services Experience in communicating with external suppliers Your Style You don’t like being thrown in at the deep end. You like to jump yourself You live and breathe globalization and love to work and travel internationally You mesmerize people with a friendly and open-minded, yet trustworthy and reliable personality You think in achievements, not in departments, responsibilities or hierarchies As a quick learner, first mover and fast thinker you can keep pace with one of the fastest growing technology start ups You are driven by curiosity and innovation, and always up for a good challenge Fluency and strong communication skills in both written and spoken English Our Promise Employment in Berlin, full-time and full of fun challenges, with flexible working hours A competitive compensation and incentive plan that rocks when you rock Personal development and training that will help you evolve from the pro you are right now to the champ you’re destined to be Daily adrenalin rushes while working and learning in one of the fastest growing sectors in online advertising Access to an international high-profile network A company culture driven by pioneer-thinking and talent that exceeds departments and hierarchies The challenge is on. If you think it’s you we’re looking for, send us your battle plan along with a certificate of your super powers at careers@sociomantic.com. Alternatively, a motivational cover letter and resume will do, too. For now. 
They say Berlin is awesome. But for unfortunately, i say goodbye to IT. Though it is still a nice hobby for me.
Announcement text quote: Please spread the news: https://twitter.com/D_Programming/status/553642281941860352 We're happy to announce the first sponsor of DConf 2015: Utah Valley University. In addition to providing conference venue, UVU will cover room rental fees and simplify logistics and paperwork. Many thanks to UVU and especially its Computer Science Department Chair, Chuck Allison, who was instrumental in making this happen. This is great news, and hopefully a precedent to be followed. Thanks, Andrei 
This is my school :) I just sent Professor Allison an e-mail. I've been following and using D since we used it in a languages analysis class a few years ago. He's a great guy and an excellent professor. This made me so happy to see UVU supporting such a great community, conference and cause.
Announcement text quote: I've started writing a weekly D newsletter. Here's the first issue, any feedback welcome! http://arsdnet.net/this-week-in-d/jan-12.html In the future, I intend to have it written by Saturday for a weekend release, so if you want something to appear this week, please try to get it to by before then. 
Announcement text quote: http://dconf.org -- Andrei 
Announcement text quote: Hi, I'm not sure when it was announced, but binutils 2.25 has been released! There's a small reason for excitement as it is the first to come with D demangling support in the GNU toolchain. Unfortunately, I forgot to send in patches that actually document it! So for the moment, it's a little secret feature shared between all who may read this. :o) How do you use it? --- By default, binutils programs will treat all mangled symbols as C++, however you can override this by using --demangle=dlang, eg: objdump -d --demangle=dlang prog.o nm --demangle=dlang ddmd You can also kickstart your usage by putting -L--demangle=dlang in your dmd.conf, and watch your obscure linker errors turn into pretty function signatures. How do I get it? --- The release itself is a source package, however a safer choice is to get the release binaries through your Linux distributor. Fortunately, there have been distributions who have been shipping it as early as three weeks ago. Archlinux users: I'd imagine this is available to use now. Ubuntu users: You'll have to wait until April with the 15.04 release. Bugs and Fixes --- Whilst the demangler is able to handle all things core.demangle can do (and a little bit more!), a small test of running nm against the ddemangle program that gets shipped with dmd 2.066 shows that there are still plenty of complex template symbols that it still can't manage. The implementation itself is pretty straightforward to follow, well documented and written in C. Volunteers who wish to help out getting as close to 99.99% coverage as possible are welcome! Enjoy! Iain. 
Announcement text quote: Hi everybody! Like last year I am a speaker in the LLVM toolchain devroom @ FOSDEM'15. This time it is not D related but more about LLVM internals. (For sure, it is related to my work on LDC!) Read the announcement at https://fosdem.org/2015/schedule/event/llvm_internal_asm/. FOSDEM is a two-day event organised by volunteers to promote the widespread use of open source software. Taking place in the beautiful city of Brussels (Belgium), FOSDEM is widely recognised as "the best open source conference in Europe". Regards, Kai 
Announcement text quote: In case someone hasn't seen the post in the D general group, we have organised a social meet up for D programmers in Berlin Germany next week. It will take place on Friday the 23rd of January from 17:00 to 19:30 at the Melbourne Canteen (http://www.melbournecanteen.com/). The idea is to have a chat about whether people are keen to take part in regular events and what form these events may take. 
Announcement text quote: Over the past few years, I've released a few programs written in D which I've never announced here before, since they were not targeted at D programmers. Some of them seem to have caught on with some degree of popularity. After seeing the recent DMD download stats, I thought to check the stats for my downloads, and was pleasantly surprised to find them higher than I expected. So, it's probably as good a time as any to post about these programs here. Perhaps someone can find something useful in their source code, or use them as examples of D code in the wild. 1. trimcheck This is a Windows program which attempts to provide an easy way to test whether the TRIM command reaches your SSD. It is useful for testing various driver/firmware versions and RAID configurations, as the TRIM command may or may not be properly forwarded at each layer to the next. trimcheck has been featured on a few hardware news websites, including The SSD Review and TweakTown. trimcheck currently consists of a single .d file, 468 lines long. It is not a very complicated program, and uses few D-specific features, though the scope statements were a welcome aid in cleanly handling Windows resources. trimcheck is licensed under the MPL 2.0, and gets about 200 downloads per day. https://github.com/CyberShadow/trimcheck 2. dhcptest dhcptest is a cross-platform DHCP client and testing tool. Although it started out as an interactive test tool, a stream of feature requests have also grown it into a non-interactive DHCP client (which prints received replies, as opposed to applying them onto the host system's network configuration). dhcptest currently also consists of a single .d file, 711 lines long. std.format's capabilities were useful for presenting sent and received data, but otherwise it is also relatively simple. dhcptest is licensed under the Boost Software License 1.0. The Windows binary is downloaded about 50 times every day. https://github.com/CyberShadow/dhcptest 3. RABCDAsm RABCDAsm, one of my oldest D projects, is an ABC (ActionScript Byte Code) assembler and disassembler. ABC is the bytecode format used in .swf files for compiled ActionScript 2 and 3 code, and in the Adobe Flash runtime, interpreted by the ActionScript Virtual Machine. RABCDAsm currently consists of 10 programs across 20 modules, totaling 8488 lines of code. It makes use of several D features, including compile-time reflection and code generation for automatic toHash/opEquals/opCmp/toString implementations for its numerous data structures. RABCDAsm has been included in the REMnux Linux distribution ("A Linux Toolkit for Reverse-Engineering and Analyzing Malware"), and is also available as an Arch Linux package (rabcdasm-git). RABCDAsm is licensed under the GPLv3 or later. The Windows binary package is downloaded about 20 times per day. https://github.com/CyberShadow/RABCDAsm 4. Very Sleepy This is not a D project, but I would like to include it here as well. This is a fork of the Very Sleepy polling Windows profiler, previously maintained by Richard Mitton, with a number of improvements. Although it still chiefly targets C/C++ programs, I've used it for (and improved it to work better with) D code: it should work well with D programs compiled with PDB debug information (which you can create with DMD using -m64, -m32coff or Rainer's cv2pdb program). The profiler is licensed under GPLv2 or newer, and enjoys a steady trickle of 3-4 downloads per day. https://github.com/CyberShadow/verysleepy 
Yay, type safety. I was a Go fan for a while. I do like being able to design OOP types without relying on class hierarchies or tons of interface boilerplate. But it was the lack of generics/templates for containers that made me stop spending much time on it. D has also become [my favorite language](http://blog.nfnitloop.com/2014/09/20/2309/) as well. But despite that I find myself currently playing with Django and Python 3. Hmm...
Announcement text quote: I'm glad to announce this new release of Coedit. Here is a summary of what's new since last public announce: new features: ------------ - project configuration widget, the configurations can be edited in synchro-mode. It can be activated by clicking the chain icon at the right of the widget toolbar. - tool chaining, each tool can include a list of tool to execute before and after the item, according to their aliases. - editor cache, between two cessions Coedit remembers the position, the folding, the selection and the zoom of a document. cache files are located in the options and data folder, in a sub directory named editorcache. - static macros, auto insertion (or insertion using SHIFT+SPACE). see wiki, editor widget section. Macros can be edited in a dedicated file, located in the option folder. - new widget managing the TODO comments found within the sources. It automatically handles the context, for example in an orphan source or among all the project sources. Refer to the wiki for more information. - menu File, Run file unittests, compile and execute the current editor with -main and -unittest. useful to test a particular module which belongs to a project. miscellaneous: -------------- - under Linux, it was necessary to save a project before adding the sources. Now they can be added from the beginning and relative paths will be translated correctly. - a display problem could append under certain circumstances, suggesting that a file would be overwritten by another. Fortunately this was only a visual bug. - DCD integration, start faster. links: ------ https://github.com/BBasile/Coedit/releases/tag/alpha_11 
Sdl2 bindings with derelict?
Announcement text quote: Thursday, January 22, 2015, 6pm Many people you know from the forums will be there. Andrei is giving a presentation as well: http://www.meetup.com/D-Lang-Sillicon-Valley/events/219413448/ Ali 
[Using some Win32 API calls, I should suspect](http://stackoverflow.com/questions/622592/win32-programming-hiding-console-window).
(DUB)[code.dlang.org] makes it very easy to manage libraries. SDL2 is excellent (and if you want 3D, can be used to get OpenGL to work). Also, look at gfm (at code.dlang.org) - it wraps SDL2 and includes various utility code useful for game development - but note that it's still unstable. 
It really shouldn't. You'd need to look up how to do that one each platform you support. Thankfully, D has some pretty spiffy conditional compilation syntax for doing different things on different platforms which makes this sort of thing massively more ergonomic than it is in other languages.
I made the D program in Xamarin Studio. It had a terminal window before I added SDL. Trying to get rid of it.
Announcement text quote: Mandatory reddit link: http://www.reddit.com/r/programming/comments/2tdy5z/interfacing_d_to_legacy_c_code_by_walter_bright/ There's been a lot of interest in this topic. 
Announcement text quote: I've been out of town this week and also dealing with trying to remotely find my lost dog (she got away from the sitter... and no luck yet :( ) so I haven't been as active as I often am in the D community, but I still made time to compile another issue! http://arsdnet.net/this-week-in-d/jan-25.html Also available via RSS: http://arsdnet.net/this-week-in-d/twid.rss This week's tip goes into the import statement which many people use but not everyone realizes what all it can do. D.announce seemed a bit less active this week too (my criteria for inclusion there is simply a new thread made since last time, so new posts in an existing thread don't count), but there were a lot of bug and pull request action this week (mostly related to the style tweaks)! 
Announcement text quote: Hi, It is my pleasure to release a new site onto the community. An Interactive DMD compiler. http://asm.dlang.org/ Inspired by Matt Godbolt's GCC Explorer[1], and my own hosted version that uses GDC[2]. I was asked by Andrei to fork and make a working protoype that uses DMD. All work is hosted on Github[3], and we are planning on moving it to part of the D-Programming-Language repositories. Please share, contribute, and destroy! Regards Iain. [1]: http://gcc.godbolt.org/ [2]: http://explore.dgnu.org/ [3]: https://github.com/ibuclaw/gcc-explorer/ 
Announcement text quote: Hi, DUB lacked a package for going between D objects and JSON. painlessjson is a library just released on DUB looking to be the easy solution for converting D data to and from JSON. painlessjson uses templates and traits to generate code that converts to and from std.json. The goals of painlessjson are: - Easy to use and set up - Highly configurable with sensible defaults - Keep the library code simple by not reinventing what others provide for us - Support as many D types as possible Current features are: - Convert to and from std.json, structs and classes with default constructor, arrays, associative arrays, and any type implementing _toJSON + _fromJSON. - Includes @property functions - Ignore a field using @SerializeIgnore - Rename a field using @SerializedName("Name") or @SerializedToName('To') @SerializedFromName('From') This project gained momentum just recently so there are several things to improve. We want input and help to make this as great as possible. The features that are being designed right now are quite tricky to get right so any help would be greatly appreciated. The project is on github: https://github.com/BlackEdder/painlessjson And on DUB: http://code.dlang.org/packages/painlessjson Our current issues are: - How do we support subclasses? https://github.com/BlackEdder/painlessjson/issues/8 - How should constructors be handled? Don't forget alias this and preferably find the best constructor to use without relying on annotations. https://github.com/BlackEdder/painlessjson/issues/12 
Announcement text quote: DStep is a tool for translating C and Objective-C headers to D modules. It uses libclang for lexing/parsing and AST traversal. This means it handles everything that Clang itself can handle, although this doesn't mean it will correctly translate everything. I would consider this release alpha or beta. I'm releasing this now in hope I get some feedback on what language features the tool can't handle. The tool is available at github: https://github.com/jacob-carlborg/dstep Binaries are available for Mac OS X and Ubuntu 11.10 32bit: https://github.com/jacob-carlborg/dstep/downloads Unfortunately I haven't been able to successfully compile it on Windows due to Optlink not cooperating. I'll most likely provide Linux binaries with better compatibility later. Build instructions are available at github. Usage: dstep &lt;input-file.h&gt; -o output_file.d For Objective-C dstep &lt;input-file.h&gt; -o output_file.d -ObjC Tests: DStep uses Cucumber and Aruba (Ruby tools) to run its tests. It will basically run the tool on all *.h files in the "test_files" directory and compare the results to the corresponding *.d files. Known issues/missing functionality: * Multiple input files * Framework as input file * Add module declaration * Option for specifying before and after code * Option for specifying package * Windows support C: * Self includes * Out of order typedefs of structs * Bitfields * Non-standard extensions * Preprocessor * Arrays with no size marked as "extern". Objective-C: * Protocols * Properties * Blocks * Categories * Actions * Outlets * Selectors This is basically what's on the todo list: https://raw.github.com/jacob-carlborg/dstep/master/todo.taskpaper There's no point in reporting issues which are listed above. -- /Jacob Carlborg 
I like it, only issue though is it won't use OpenGL for me.
Announcement text quote: Hello, Walter and I have been mulling for a while on a vision for the first six months of 2015. http://wiki.dlang.org/Vision/2015H1 This is stuff we consider important for D going forward and plan to work actively on. We encourage the D community to focus contributions along the same lines. We intentionally kept the document short and high-level as opposed to discussing tactical details. Such discussions are encouraged in the appropriate forums. Thanks, Walter and Andrei 
Announcement text quote: Hello,everyone! Now,dco can be used in vs.net and MonoD as other build tool or custom build tool. you can config a local.ini quickly(by dco -ini),better than use dub. It can build any projects on Windows. https://github.com/FrankLIKE/dco Thank you. Frank 
Announcement text quote: I can't believe it, but yet another week has already passed, so up late to release this again! http://arsdnet.net/this-week-in-d/feb-01.html Early bird registration open for DConf, 2015 Vision released, GUI and Windows development on the forums. Today's tip is about class destructors, and Project Spotlight makes a return to introduce simpledisplay.d, in the first in what will become a series that walks us through making a bit of a little game in D. (Expect this to not be each week, it takes me a long time to write the project spotlight and I've been very busy lately and expect to continue being busy in the coming weeks. I'll probably try to do it every other week rather than every week.) http://www.reddit.com/r/programming/comments/2uhgzr/this_week_in_d_2015_vision_released_tip_on/ https://twitter.com/adamdruppe/status/562112301248290816 
Announcement text quote: Weka.IO is proud to host a lecture about D, sharing our experience of implementing a trailblazing distributed storage system in D. Lecture will take place on Sunday, February 15th, 19:00, at Weka.IO offices, Beit Shamai 10 Tel Aviv. Please confirm your participation at https://www.eventbrite.com/e/d-evening-at-wekaio-tickets-15087370732 For questions, Email devent@weka.io 
Announcement text quote: Andrew Edwards, our former release czar, declined his czardom because he went to college. Thanks and good luck! He left a void of power. After a period of turmoil and intestine political fights, we have a new, ruthless czar: Martin Nowak. He plans to put us on a path of regular, predictable 6-week releases, thus ending the D Middle Ages. Please throw your hat in the air with me to hail the new czar! :o) Andrei 
Is this the same Martin Nowak who wrote Evolutionary Dynamics?
Announcement text quote: DDocs.org (http://ddocs.org) is a repository of documentation for DUB projects that automatically re-generates docs as new projects/releases/branch changes are added. The idea is to make documenting D projects as simple as possible, to the point where you don't need to do any work to get documentation for your project other than adding it to the DUB registry. Also, users can now browse documentation for DUB projects even if the author was too lazy to generate it themselves (assuming thy did include some documentation comments). Note that this is still in a very early stage, it was put together in a very quick-and-dirty style by a person with little webdev experience. Currently it just scans `code.dlang.org`, looking for changes (yes, I know, this will break as soon as code.dlang.org changes, I plan to raise issue/s (PRs?) to the dub registry project so it can have a full/stable API, but I wanted to get something to work *right now*. Code is here: * ddocs.org: https://github.com/kiith-sa/ddocs.org * hmod-dub: https://github.com/kiith-sa/hmod-dub * harbored-mod: https://github.com/kiith-sa/harbored-mod Background: When optimizing harbored-mod by testing it on big D projects (gtk-d, tango, vibe.d, etc.), I wrote a simple tool to fetch/generate docs for any DUB project; I got carried away and used that as base for a tool that checks for changes in the DUB registry and generates docs for all projects. 
Hey /u/qznc_bot, that's your master!
Announcement text quote: Version 0.5.0 of DCD has been tagged on Github. https://github.com/Hackerpilot/DCD/releases/tag/v0.5.0 DCD is a client/server program used to provide D code autocompletion for various text editors and IDEs. 
Well, Phobos addresses most of these things, and vibe more or less covers the rest. Why not just start looking through that?
Firstly, I have to admit my ignorance is limiting me somewhat. I'm a pretty good C++ and Python developer, but I'm still grasping at the potential of D. As I understand it Phobos is just the documentation for the standard library, (correct me if I'm wrong) This is great. I'm actually picking up the standard library easily. Vibe I also like, I've been playing around with it. But the documentation is pretty limited to just vibe. I think it would be helpful to have a tutorial which includes these and other libraries and tools to get a better idea of the D environment as a whole. In other words, a student of D could start at the beginning of this tutorial and step by step gain an understanding of "best practices" and come out at the end with a better understanding of most of the important cogs as they work together. As it stands, a person can read the docs for Phobos and read the docs for Vibe, but still be missing a great deal of valuable information as the sum is greater than it's parts. In other words, I'd like to make a tutorial which showcases the best parts of the D environment as they all work together.
Can you link to the styles guide? This isn't a styles guide, but I'd be interested to read it. I've created a [github repository](https://github.com/Joshka-Randora/GestaltD) for this project in case you want to check it out. There's not much up yet.
i think A. Ruppe's D cookbook addresses the language/stdlib/unit test/ddoc aspects of your bullets pretty well (but not free resource, of course): https://www.safaribooksonline.com/library/view/d-cookbook/9781783287215/ 
Cool, I'll take a look at it.
In case this takes off, would it have a format similar to https://github.com/bitemyapp/learnhaskell?
Possibly, tell me what aspects you like about it. If it works I'll try to fit it in. Glancing at it one major difference is that learnhaskell seems to specifically be about learning haskell. (obviously) The primary difference here is, **this isn't about "learning D" as a language**. It's about learning about the D environment. It's kind of a meta tutorial for people who know D and want to better use tools and libraries to make a "non-trivial" program. (I.E. not "hello world"... Something useful) So for instance, one might ask: &gt; "How can I best use git as it applies to D?" &gt; "How might I best use DUB?" &gt; "How might I best implement a MVC pattern as it applies to D?" &gt; "How might I best implement ORM as it applies to D?" &gt; "How do I take **ALL** these tools and best leverage them into a productive workflow?" It's more an explanation on how to use tools and techniques as opposed to learning D as a language specifically.
Announcement text quote: I got an email from the publisher of my D Cookbook asking me to write another book on D. From their email: "We have recently commissioned a book on D, titled ' Learning D '. This book will have approximately 400 pages and and the vision behind this book is to introduce practical concepts and tasks specific to D programming." I had to say no; I just don't have that kind of time right now. However, they asked me to ask here if anyone would be interested. If you are, email me and I'll get you more information and put you in contact with the Packt editors. 
Announcement text quote: After my sick day last week, this rounds up two weeks of discussion. http://arsdnet.net/this-week-in-d/feb-15.html If someone else wants to post to reddit this time, I'd appreciate it. 
DMD has a '-profile' switch. I have not used I my self but hope it helps. 
&gt; I'm trying to get excited about D. D *is* exciting, isn't it ? ;-) &gt; a comprehensive tutorial Yup. After 18 month of leisurely practise, my experience is that once you've passed the "*Hello World* on the command line" phase, you are alone in the jungle. Well, not alone, there are nice people over at [forum.dlang.org](http://forum.dlang.org/), but still, I'm with you on expressing the need for some intermediate guidance. &gt;the full gamut of tools available for development. While the core D language seems pretty stable now, my feeling is that as an ecosystem, D still is History in the making. Plenty of beaten paths, a few dirt roads but certainly no *autobahn*. So while there is certainly some room for a "starter pack" slightly more comprehensive that what is (not) available now, trying to encompass "*the full gamut of tools available for development*" is maybe a bit too ambitious. You are shooting at a moving target here. My own bullet list would be : * IDE (MS/VS ? MonoDevelop ? Eclipse/DDT ?) * A quick tour of the main libraries, with a focus on [Phobos](http://dlang.org/phobos/index.html) * That *dub* thing ? * something GUI * definitely something about unitests. * definitely something about Git. Now, some of *your* bullet points seem to be very generic and not specific to D (e.g. MVC), as if you were thinking "software engineering 101" with D as support language. Not that it would be a bad thing, but good luck with that. Actually, the more I think about it, the more I think it would actually be an excellent idea. As it is now, the D language is aimed at somewhat experienced programmers and many tutorials out there take shortcuts like *"do it like you would in C"* but indeed many of the features of D would make it ideal as a first language. But I digress. Anyway, my best wishes with your endeavour.
Thanks for the support. As it is, I'm doing this in my spare time while I learn D. So, it's probably going to be a while before I put anything substantial out. At any-rate, my thoughts are that I'd skip any explanations about IDEs because their purpose is to abstract away from learning a language's ecology. Which is counter to the purpose of this kind of tutorial. But otherwise, I think we are on the same track. As far as MVC and such. I don't plan on creating an "engineering 101" tutorial. I think this tutorial should appeal to those who already can do it in "Language XYZ" but want a primer specifically for D. I can see a lot of people coming over from Python or Ruby where MVC is pretty standard and being lost. Then trying to cargo cult a framework and failing because (it turns out) most Pythonists and especially almost all Rubyists are just script kiddies in denial. Then you have the C ecology where MVC is pretty much unheard of. QT kinda encourages MVC patterns, but this is a small niche. So I figure, as long as I am learning a new ecology, I might as well pick up some good habits as well, right? Anyway, if you want to help, cool. Otherwise, I'll probably post back here when I have something substantial to share. Which will probably be a while. Learning D is more of a hobby right now.
I just had an idea... What if the goal of tutorial were to learn bits and pieces of the ecology such that, in the end, a person following along might build his own (if simplistic) IDE? It's kind of ambitious, But it kind of makes sense as an IDE is the technological cumulation of a language's ecology. Thoughts?
Makes sense indeed, but that sets the bar very high. Let's not loose sight of more approachable, intermediate goals.
I'm thinking of having a kind of "tech tree" where as there are a number of individual tutorials "Leaves" and if you complete the whole "tech tree" you'd have the knowledge to create an IDE. But you can focus on specific technologies if you wish. and you don't have to complete the entire tutorial. So for instance, if you want to focus on learning the D Debugger, you might think of that as a "Branch" of the "Tech Tree". MVC might be thought of as a smaller "Sub-Tech Tree" and GTK might be considered a "branch" inside that tree. A person could focus on a particular tech branch if they wanted to and not have to worry about the "DUB branch" of the tutorial unless they want to. Each lesson might have options to expand horizontally or vertically based on experience. I.E. "If you want to learn more about XYZ go to this tutorial" "If you want to learn another tech go here." The end result of all these tutorials would be the IDE. Keep in mind, This isn't a D tutorial, so it's not so much "This is a tutorial how to make an IDE" as it is "You are already an experienced programmer and could have written an IDE in language XYZ. Now you can do it in D!" I'm still fleshing out the notes, but I think this is a good way to go.
&gt; Anyway, maybe you might contribute a five minute tutorial on an IDE of your choice? I'll try. Again, not promissing anything as I have some stuff going on, but I'll try.
Announcement text quote: here is my little contribution to the everlasting "how you shouldn't write the code" contest. this is very simple (yet fully working) LISP 1 implementation. it is slow like a dead snail, it trashing memory faster than you can say "WTF?!", but it does it's job. this code was ripped out of closed-source project, so no git this time, sorry. yes, it has both automatic function wrapping and ability to call LISP functions without manual list building. and yes, it is really used in "real software". Public Domain / WTFPL. http://ketmar.no-ip.org/milf_for_the_masses.zip 
Announcement text quote: Today I registered Dgame on DUB. Since I do not currently have much time (I'm currently in my exams period) I hope I did everything right. Let me know if not and what could be improved. Since I left D a while ago, Dgame was also not maintained, but thanks to your demand I will maintain Dgame again. The current goal is to register Dgame successful on DUB. The next goal would be to adapt the webpage and the installation chapter and to re-register the domain dgame.dev.de After that (and after my hopefully successful exams) I will rebuild Dgame from scratch with the goal of a more consistent and better structure and with the idea in mind to use @nogc wherever possible. 
Announcement text quote: Hi Just thought I would share this in case anyone else finds it useful. I wrote a tiny utility that detects changes to D files and then rebuilds and re-executes the main binary using dub. I use for developing with vibe.d and other dub D project that have an executable binary. The code is here: https://github.com/kingsleyh/reloaded essentially you just run dub in the root and it builds the reloaded binary. Then you just copy that binary to the root of your dub project and ./reloaded and then as soon as you make a change to a D file your code will be built and executed. --K 
Yeah no worries. Anyway, I have some tutorials up on using LXC as a D virtual environment. Also a couple of tutorials about installing using DMD and RDMD. I'm currently writing some tutorials on using DUB. If these interest you, please go through them and if you have any questions / problems, let me know. Also, if there is anything I can improve, let me know. Or don't, that's cool too.
Announcement text quote: Creating tuples and returning them from functions is trivial in D: auto getTuple() { return tuple("Bob", 42); } but using them afterwards can be confusing and error prone auto t = getTuple(); writeln("name is ", t[0], " age is ", t[1]); I really missed the ML syntax to write let (name, age) = getTuple(); Turns out this is ridiculously easy to implement in D, so here's my very tiny module for this: https://bitbucket.org/infognition/dstuff/src (scroll down to letassign.d) It allows you to write: int x, y, z, age; string name; let (name, age) = getTuple(); // tuple let (x,y,z) = argv[1..4].map!(to!int); // lazy range let (x,y,z) = [1,2,3]; // array SomeStruct s; let (s.a, s.b) = tuple(3, "piggies"); If a range or array doesn't have enough elements, this thing will throw, and if it's not desired there's let (x,y,z)[] = ... variant that uses just the available data and keeps the rest variables unchanged. 
Announcement text quote: https://github.com/Hackerpilot/DCD https://github.com/Hackerpilot/DCD/releases/tag/v0.5.1 v0.5.1 contains several bug fixes for autocompletion involving classes. * #195: Display call tips for `super` and `this` * #196: Autocompletion on `super` doesn't work * #197: DCD shows invalid constructor call tips As a reminder: the D.announce mailing list is not a bug tracker. If I've broken something, please file an issue here: https://github.com/Hackerpilot/DCD/issues 
Announcement text quote: I think this all is in good enough shape that someone else should give it a try. https://github.com/smolt/ldc-iphone-dev This is an LDC development sandbox for iPhone iOS. It glues together various pieces needed to build an LDC cross compiler targeting iPhoneOS. It also includes a few samples to show how to get started. The compiler and libraries are in good enough shape to pass the druntime/phobos unittests with a few minor test failures (see project README.md). This means someone could, if so inclined, build their D library and use it in an iOS App. Currently based on LDC 0.15.1 (DMD v2.066.1) and LLVM 3.5.1. There are no prebuild binaries, so you have to do it yourself. Nobody has reported yet on trying to build beside me, so there may be potholes. Enjoy, Dan 
Woah, for a moment I thought my collegues had used D without me noticing: [another Sambamba](https://www.st.cs.uni-saarland.de/publications/details/streithammacher-adapt-2013/).
Announcement text quote: This was a very active week on the forums, though most of it was centered around DIP74 and its satellite discussions, leading to a somewhat thin newsletter. http://arsdnet.net/this-week-in-d/mar-01.html https://twitter.com/adamdruppe/status/572249079352299520 
Announcement text quote: not sure if someone should inform them about the DMD name clash... or just enjoy the popularity ;) http://www.gnu.org/software/dmd 
Announcement text quote: Glad to announce the third 2.067.0 beta, this time with installers and documentation. https://dlang.dawg.eu/downloads/dmd.2.067.0-b3/ Soon to be mirrored and available on Travis-CI. http://downloads.dlang.org/pre-releases/2.x/2.067.0/ http://ftp.digitalmars.com/ This beta comes with 7 dmd and 2 phobos fixes on top of 2.067.0-b2. https://github.com/D-Programming-Language/dmd/compare/v2.067.0-b2...v2.067.0-b3 https://github.com/D-Programming-Language/phobos/compare/v2.067.0-b2...v2.067.0-b3 - -Martin - ---------- To check the *.asc signatures, you can import https://dlang.dawg.eu/downloads/d-keyring.gpg or compare them with this key. pub 4096R/0xAB8FE924C2F7E724 2014-09-01 [expires: 2018-03-03] Key fingerprint = AFC7 DB45 693D 62BB 472B F27B AB8F E924 C2F7 E724 uid Martin Nowak (dawg) &lt;me@dawg.eu&gt; uid Martin Nowak &lt;martin.nowak@plugintheworld.com&gt; uid Martin Nowak &lt;code@dawg.eu&gt; sub 4096R/0xA78068C444E12E4D 2014-09-01 [expires: 2018-03-03] Key fingerprint = 0D91 720A 3DA5 F106 CEB0 7070 A780 68C4 44E1 2E4D sub 4096R/0xB273811612BB1939 2015-02-27 [expires: 2018-03-03] Key fingerprint = A734 4DAD 3C34 1EA1 2D13 C4E6 B273 8116 12BB 1939 
Announcement text quote: This release brings the following improvements: An "install" action was added, which can upgrade an existing D install (such as from an official ZIP archive, OS installer or package, or DVM). This allows combining components of D which Digger builds (DMD, Druntime, Phobos and rdmd) with those which rarely change, are more difficult to build, or require external dependencies (e.g. Windows static libraries and ancillary tools). Running `digger install` can also be used as an alternative to adding Digger's result directory to your PATH, and can be safely undone at any time by running `digger uninstall`. Sergei Nosov contributed a "rebuild" action, which will incrementally rebuild D's components after a few changes. This should make it much easier to use Digger for developing patches for D's components. Digger now uses ae.utils.funopt (http://blog.thecybershadow.net/2014/08/05/ae-utils-funopt/) for comprehensive, automatically generated --help text, for `digger` itself as well as each of its subcommands. A --make-args option was added to the "build" commands, as well as a --model option to replace the --64 switch. `digger-web` learned the --host and --port options to explicitly set how to listen for HTTP requests. Finally, this is the first stable release with binary downloads for all major platforms: https://github.com/CyberShadow/Digger/releases/tag/1.1 --- Digger is a tool for working with D's source code and its history. It can build D (including older D versions), customize the build with pending pull requests or forks, and find the exact pull request which introduced a regression (or fixed a bug). It comes with a web interface which makes building D from source trivial even for people new to D, Git or the command line. https://github.com/CyberShadow/Digger 
Announcement text quote: I got bored and made this https://github.com/Superstar64/typi 
Announcement text quote: On Sat, 07 Mar 2015 13:03:06 +0000, Kagamin wrote: &gt; In fact, I failed to find good monospace font for source code, it used &gt; to be Courier New 9pt, but it works well only on displays no bigger than &gt; 1024*768. terminus rocks. 
Announcement text quote: I'm starting a live stream[1] for making a book. The book is The way to program - Lets think like a D(eveloper) For now I will only commit to Mondays 12pm UTC+0. I may stream at random times beyond that. Check my Twitter as to when that might be[2]. The book I am making is available at[0]. For published versions of it[3]. Published version will not be free, but the raw resources used to create it are under a creative commons license. The book's purpose is to not teach D. Instead it focuses on teaching programming concepts and ideas using D as a base. Assuming the book creation is a success I have a few other books in the pipeline. The second book will be covering sockets and threading via IRC/XMPP. Third would be Web development. Fourth UI's. There has already been a few streams, so content has already got a good start. If there is interest, I may stream some of Devisualization project development. Usually the stream will last 2-3 hours depending upon how many watch and interact. A couple days ago livecoding.tv came out of closed beta. Feel free to join! Disclaimer: I am not affiliated with livecoding.tv. Although the devs are great. [0] https://github.com/rikkimax/twp-d [1] http://livecoding.tv/alphaglosined [2] https://twitter.com/alphaglosined [3] https://leanpub.com/twp-d 
Announcement text quote: https://github.com/Hackerpilot/dfmt/releases/tag/v0.1.3 dfmt is a source code formatter for D. v0.1.3 fixes 34 issues from v0.1.2. The codename is inspired by somebody who may or may not* have filed 45 Github issues, 20 of them in a single day. *totally did 
I'm the creater, that post is made by a bot. That is my 4 rewrite, It took ~3 Months.
Small week though.
Announcement text quote: DConf 2015 registration is OPEN! Hampton Inn offers a special hotel rate for DConf 2015 attendees. Just click through the link to it to get it: http://dconf.org/2015/venue.html. -- Andrei 
Announcement text quote: The "DML engine" is almost finished. This night we worked on the file reloading. This will allow direct update of GUI when modifying lua files without loosing states. For example if you only modify the color property of a Rectangle item it will be the only thing that will be updated (and binded properties will be update). Once the "DML engine" polished, we'll progress on the render part and the event system. We hope finding more time to work on it this year. https://github.com/D-Quick/DQuick 
Announcement text quote: SDLang-D update (v0.9.0) has now been tagged/released: https://github.com/Abscissa/SDLang-D It's a D lib to parse and generate the SDL data language (similar to XML/JSON, but more human-friendly, while still being very simple). Most of the big changes have been sitting in master for awhile, so this is long overdue. Aside from various bugfixes, the big changes in this release are the addition of a StAX/Pull-style parser (see changelog), and utilization of D's package.d feature. Full link-enhanced changelog: https://github.com/Abscissa/SDLang-D/blob/master/CHANGELOG.md Changes: -------------------------------------------- - Breaking change: Changed package structure to use package.d. Most users will be unaffected, but the internal package names have changed slightly, and users of DMD 2.063.2 and below will need to import sdlang.package; instead of import sdlang; until they upgrade their compiler. The built-in command line tool and unittests, however, do now require DMD 2.064 or newer because of this change. - New: Added StAX/Pull-style parser via pullParseFile and pullParseSource. (Warning: FileStartEvent and FileEndEvent might be removed later: #17) - Fixed: Work around a DMD 2.064/2.065 segfault bug in a unittest. - Fixed: #5 &amp; #7: Building with Dub produces package format warnings (@ColdenCullen). - Fixed: #8: Consecutive escape sequences not getting correctly decoded. - Fixed: #11: Newline immediately after // is ignored. - Fixed: #12: Incorrectly accepts "anon tag without a value" when the tag has children. - Fixed: The build-docs script was broken for newer RDMDs. - Improved: Better error message for anonymous tags with no values. -------------------------------------------- The codename for this release is "version zero point nine point zero". Alternate codename is "4a44e9e88e573444cd6e7a43fb0e574ff5e03ac2". 
Announcement text quote: Hi everyone, LDC 0.15.2 beta1, the LLVM-based D compiler, is available for download! This release is based on the 2.066.1 frontend and standard library and supports LLVM 3.1-3.6 (OS X: no support for 3.3). Don't miss to check if your preferred system is supported by this release. There is even an alpha-quality Win64 version available! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/liqxeuzwyqzgfgcitefp@forum.dlang.org Regards, Kai 
Announcement text quote: I've just released the first production-ready release of the Poodinis Dependency Injection Framework. Poodinis is mainly inspired by the dependency injection framework in Spring. It currently allows you to manually manage dependencies and have them be automatically injected into components which rely on these dependencies. In the future additional support might be added for automatically registering dependencies. You can find the source code at https://github.com/mbierlee/poodinis Let me know what you think! 
Announcement text quote: Sharing a useful tool of mine. http://code.dlang.org/packages/serve 
Announcement text quote: https://www.reddit.com/r/programming/comments/30ad8b/why_gos_design_is_a_disservice_to_intelligent/ Andrei 
did you just link to another site to link back to reddit to link to another site?
Announcement text quote: I am releasing today a first version of dsq-1: a software synthesizer modeled after some great 80's hybrid synths, Ensoniq ESQ-1 and SQ-80. The 'd' in the project's name stands for the author's first name, as well as, you know. ;) The source code for the project is currently located on github: https://github.com/martinez/dsq1 This project is a huge work in progress and is far for complete; the sound output is not very interesting in the current state and needs a lot of work. Most of the architecture is implemented according to reverse-engineered information, some done by me, but mostly from Rainer Buchty which has done an extensive amount of work on this machine (cf. his website). My progress is not going fast on this project, because I am currently busy with my Ph.D and other work. I share it because it will interest whoever wants to hack on this machine, because it implements the proprietary formats used (patch, waverom, etc..), or whoever wants to help on synthesis. I happily accept contributions. Working with D has been generally a joy (coming from a C++ background), but there have been a number of annoyances to me, be it bugs or lack of features. I have kept a list of observations, into the project's TODO file. Most importantly: 1. My main grief so far has been the compilers. LDC has failed on me with a stack trace and no other information. This is reproducible on the latest commit, when there exists a dependency to the "tkd" library. Last time I checked this bug was reported on the issue tracker but not fixed yet. On the other hand the dmd compiler however has been very stable for me. 2. The function attributes: @nogc nothrow. These relate to my realtime audio thread because I want neither of these things to occur; my thread runs unmanaged by the D runtime and I appreciate the static checking. But I don't use it: why? I use writefln a lot to debug my implementations, which is incompatible with either assumption. I wish it were possible to bypass @nogc nothrow in debug mode, only to emit a warning. To change dozens of functions to set @nogc on/off depending on usage context is not practical. I hope D can provide a better solution, than systematic use of sed scripts. :) --- About the project itself for the interested: See TODO.txt for a (non-exhaustive) list of things missing. It has many subprojects, organized as such: - synth: it implements the various parts of the softsynth (EG, OSC, LFO, ...) - jack: softsynth for Linux implemented as a jack client - synthui: user interface (nothing is done right now). not to be used directly, the process is instantiated by the softsynth and communicates via OSC protocol. - synthlib: components that relate to the internal proprietary structures: patches and waves. relevant if one is implementing a librarian for instance - liblo: binding to a OSC client/server library with C API - util: various stuff for implementing and testing. math routines, plotting, fixed point. The fixed-point implementation math.fp is intended as a drop-in replacement for float and is a template for various precisions on 32-bit ints (ie. 16/16, 24/8 etc). - fptest: a playground project for testing fixed-point math - esqtest: a playground project for independently testing internal components of the softsynth (wavetable synth, LFOs...) - banker: what could be a bank management (aka. "librarian") application in the future. it can current open and display banks stored on disk (sysex/mdx), but no write support. GUI is horrible. - to appear in the future: vstplug. a vst implementation, which should not be hard to do, possibly using the dplug library. I make this project in the hope to port it to embedded ARM, if it ever gets somewhere. I have some analog CEM VCF chips to use in this project from one of these dead units. The bad thing is that because the unit's dead I don't have a good basis for comparison. So I am aiming for good results, not 100% fidelity with the original. I am not myself very good in math nor DSP programming, so again I welcome the work of contributors. The porting to ARM, specifically STM32F4, will be hopefully an opportunity for me to extend on the work of others on embedded D. link for reference: http://wiki.dlang.org/Minimal_semihosted_ARM_Cortex-M_%22Hello_World%22 
Neat. You may want to consider posting this to http://forum.dlang.org as well; this sub doesn't get all that much traffic.
Announcement text quote: http://arsdnet.net/this-week-in-d/mar-29.html The big pieces have already been posted to Reddit, so idk if we want to post again, but if you want to, go ahead and just post the reddit link here too as this is a nice little roundup. I also took the opportunity to document the new ddoc `code` feature! 
You can use c and c++ functions directly in D http://dlang.org/interfaceToC.html http://dlang.org/cpp_interface.html
Cool. I'll check them out. Are u a Phineas and Ferb fan? :-P 
Thanks for sharing
If you want to get better at templates and code generation you are welcome to contribute to painlessjson, a JSON serialization library https://github.com/BlackEdder/painlessjson
Announcement text quote: Hello, Useful feature is added to DlangUI. You can write UI layout as QML-like code, and load it in runtime from file, resource, or just string constant. Instead of manual creation of widgets in code, you may write like this: ================================================== module app; import dlangui; mixin APP_ENTRY_POINT; /// entry point for dlangui based application extern (C) int UIAppMain(string[] args) { // create window Window window = Platform.instance.createWindow("DlangUI example - HelloWorld", null); // create some widget to show in window window.mainWidget = parseML(q{ VerticalLayout { margins: 10 padding: 10 backgroundColor: "#C0E0E070" // semitransparent yellow background // red bold text with size = 150% of base style size and font face Arial TextWidget { text: "Hello World example for DlangUI"; textColor: "red"; fontSize: 150%; fontWeight: 800; fontFace: "Arial" } // arrange controls as form - table with two columns TableLayout { colCount: 2 TextWidget { text: "param 1" } EditLine { id: edit1; text: "some text" } TextWidget { text: "param 2" } EditLine { id: edit2; text: "some text for param2" } TextWidget { text: "some radio buttons" } // arrange some radio buttons vertically VerticalLayout { RadioButton { id: rb1; text: "Item 1" } RadioButton { id: rb2; text: "Item 2" } RadioButton { id: rb3; text: "Item 3" } } TextWidget { text: "and checkboxes" } // arrange some checkboxes horizontally HorizontalLayout { CheckBox { id: cb1; text: "checkbox 1" } CheckBox { id: cb2; text: "checkbox 2" } } } HorizontalLayout { Button { id: btnOk; text: "Ok" } Button { id: btnCancel; text: "Cancel" } } } }); // you can access loaded items by id - e.g. to assign signal listeners auto edit1 = window.mainWidget.childById!EditLine("edit1"); auto edit2 = window.mainWidget.childById!EditLine("edit2"); // close window on Cancel button click window.mainWidget.childById!Button("btnCancel").onClickListener = delegate(Widget w) { window.close(); return true; }; // show message box with content of editors window.mainWidget.childById!Button("btnOk").onClickListener = delegate(Widget w) { window.showMessageBox(UIString("Ok button pressed"d), UIString("Editors content\nEdit1: "d ~ edit1.text ~ "\nEdit2: "d ~ edit2.text)); return true; }; // show window window.show(); // run message loop return Platform.instance.enterMessageLoop(); } ================================================== Function parseML loads widgets from code written in DML language. There is DMLEdit sample app in DlangUI/examples directory. You can run it with dub: dub run dlangui:dmledit It allows to edit QML text and see how it will look like when loaded into app (F5 refreshes view). Syntax highlight, bracket matching, go to error and other useful features are implemented. TODOs: * automatic mapping of loaded widgets to member variables (e.g. by matching of widget id and variable names) * automatic assignment of signal listeners to member functions, according to DML or just based on signal name and widget id (e.g. onButton1Click method may be connected to widget with id="Button1" signal click ) I hope this enhancement will be useful. Best regards, Vadim 
Announcement text quote: I wanted to work on this a little more before announcing it, but it seems I'm going to be busy working on trying to get unit-threaded into std.experimental so here it is: http://code.dlang.org/packages/reggae If you're wondering about the name, it's because it's supposed to build on dub. You might wonder at some of the design decisions. Some of them are solutions to weird problems caused by writing build descriptions in a compiled language, others I'm not too sure of. Should compiler flags be an array of strings or a string? I got tired of typing square brackets so it's a string for now. Please let me know if the API is suitable or not, preferably by trying to actually use it to build your software. Existing dub projects might work by just doing this from a build directory of your choice: "reggae -b make /path/to/project". That should generate a Makefile (or equivalent Ninja ones if `-b ninja` is used) to do what `dub build` usually does. It _should_ work for all dub projects, but it doesn't right now. For at least a few projects it's due to bugs in `dub describe`. For others it might be bugs in reggae, I don't know yet. Any dub.json files that use dub configurations extensively is likely to not work. Features: . Make and Ninja backends (tup will be the next one) . Automatically imports dub projects and writes the reggae build configuration . Access to all objects to be built with dub (including dependencies) when writing custom builds (reggae does this itself) . Out-of-tree builds, like CMake . Arbitrary build rules but pre-built ease-of-use higher level targets . Separate compilation. One file changes, only one file gets rebuilt . Automatic dependency detection for D, C, and C++ source files . Can build itself (but includes too many object files, another `dub describe` bug) There are several runnable examples in the features directory, in the form of Cucumber tests. They include linking D code to C++. I submitted a proposal to talk about this at DConf but I'll be talking about testing instead. Maybe next year? Anyway, destroy! Atila 
Shouldn't be hard to wrap. See https://github.com/JuliaLang/julia/blob/dd84c48ef67299115c4749c9bfad7978a692288b/base/linalg/arpack.jl#L200-L297 for example, wouldn't be too much trouble to translate that to D.
Announcement text quote: Hi folks, today i've created my first dlang library ^_^ a binding to the OpenVG library standard. The referenced implementation is ShivaVG which allows to draw vector graphics within an OpenGL context (similar to cairo). A small demo application is included, using derelict gl3 and glfw3 https://github.com/oggs91/OpenVG_D http://code.dlang.org/packages/dopenvg 
Announcement text quote: https://github.com/Hackerpilot/editorconfig-core-d This may be useful if you're writing editors or other dev tools in D. This is a boring C to D translation of editorconfig.h and editorconfig_handle.h, it's not a D library for handling EditorConfig files. If you don't know what EditorConfig is, you can find out here: http://editorconfig.org/ 
Announcement text quote: I wrote small library for getting standard paths (like Pictures, Music) Here's dub package http://code.dlang.org/packages/standardpaths And github repo https://github.com/MyLittleRobo/standardpaths You can see open issues on github. Please, participate in discussions if you're interested. The biggest problem now is OS X support https://github.com/MyLittleRobo/standardpaths/issues/4 You can generate documentation with dub build --build=docs. 
Announcement text quote: D Programming Language Specifications for dmd 2.067.0 in several formats, available at: &lt;http://d-apt.sourceforge.net/&gt; dlangspec-2.067.0.chm -- (Microsoft Compiled HTML Help) dlangspec-2.067.0.epub -- (Electronic Publication for e-book readers) dlangspec-2.067.0.mobi -- (Mobipocket e-book for Kindle) dlangspec-2.067.0.pdf -- (Portable Document Format) 
Announcement text quote: http://arsdnet.net/this-week-in-d/apr-05.html http://www.reddit.com/r/d_language/comments/31mu0i/this_week_in_d_april_6_2015_gc_profiling_library/ 
It's my first real D project. Would love feedback. :) 
I really like that something like this is being made, sad to say I haven't really looked into alternatives if there are any. In terms of feedback, I would slap some error handling in some things, like the string splitting of GET parameters and such, or let the interfacing application handle it themselves (I'm unsure if this breaks some kind of FCGI RFC, if it does please ignore), also I'd prefer classes were separated into different files, especially large ones, for organizational purposes but that's really just being nitpicky
I really like this post. What are your thoughts on trying to grow the community? 
Announcement text quote: Hi all! I started to work on cent/ucent support in LDC (and possible in upstream DMD). Here is the current state: 1) The pull request https://github.com/ldc-developers/ldc/pull/891/files implements cent/ucent based on the upcoming major LDC release (branch merge-2.067). It is usable but relies on GCC because it uses the __int128 data type. My next step is to implement a synthetic int128_t type to enable support on all platforms. Up to now I tested only on Linux/x86_64. 2) I already submitted some pull request for DMD, Druntime and Phobos to enable cent/ucent support. How to continue? As soon as I got it working on all compiler environment I like to create an upstream pull request. (May take some time because I am now busy with other tasks.) But: I am not going to extend the DMD backend! This has 2 consequences. First, we need to decide how to integrate the code. (Do we want to clutter the code with #if WANT_CENT as I currently do? Should we wait for DDMD?) Second, someone needs to work on the DMD backend if DMD should support cent/ucent, too. If you like to help: - clone &amp; test - Druntime/Phobos should support cent/ucent. I already updated/created some modules but more work is needed here - add support to the DMD backend Regards, Kai 
Like I said, it's a fullscreen SDL app, no GUI.
My thoughts are, if you look at other popular languages, like Python, Ruby, etc... They didn't become popular overnight. They were around for a LOOOOONG ass time before they were considered the "Go To Language" Python is popular because it is all things to all people. Ruby is popular only for the sake of Rails. No-one would be using Ruby if not for Rails. So, D needs 1) To appeal to the populous 2) A killer app (like rails). 3) Have time to mature. I wouldn't focus on growing the community. That will happen after the above happens.
My bad, I forgot SDL was a graphics library. I don't use it myself. I guess I'll have to look into it more now.
Announcement text quote: Hi, Here is a library that adds web dav support to vibe.d: https://github.com/gedaiu/vibe.dav Right now it has good file dav support and some basic support for cal dav Any help, improvements ideas or constructive criticism is welcome. Thanks, Bogdan 
Better libraries would be helpful. The MySQL package is nice to have and a worthy goal, but it isn't developed as well as similar packages in other languages. This is a common issue with D right now, in my opinion.
I'd love to get on board with this. I'm not a great dev (only a few years of experience in very specific disciplines) so there are tons of things I flat out don't know how to do - - especially in D. When I do finally figure out how to do it in D, I'm floored he how easy it was. I've had dozens of things stump me for hours (or days) to find I was way over thinking it. Also, I'd like to see more documentation on DUB. I still have no idea how to actually use it. 
Definitely agree. Growing the community isn't the sole purpose, and it wasn't really my intent by asking. I have only been using D for a short time, so I am not really in a place to help its community, but I figured I'd ask.
Announcement text quote: On 6 April 2015 at 14:04, Jordi Sayol via Digitalmars-d-announce &lt;digitalmars-d-announce@puremagic.com&gt; wrote: &gt; D Programming Language Specifications for dmd 2.067.0 in several formats, available at: &gt; &lt;http://d-apt.sourceforge.net/&gt; &gt; &gt; &gt; dlangspec-2.067.0.chm -- (Microsoft Compiled HTML Help) &gt; &gt; dlangspec-2.067.0.epub -- (Electronic Publication for e-book readers) &gt; &gt; dlangspec-2.067.0.mobi -- (Mobipocket e-book for Kindle) &gt; &gt; dlangspec-2.067.0.pdf -- (Portable Document Format) On at least the PDF documentation the text can be made smaller (it's a bit big). Looks good though. 
[**@adamdruppe**](https://twitter.com/adamdruppe/) &gt; [2015-04-13 03:35 UTC](https://twitter.com/adamdruppe/status/587459000729473024) &gt; This week in \#dlang: void initializers tip, ddmd in master, if(arr) now warns, DConf registration opened. http://arsdnet.net/this-week-in-d/apr-12.html ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Announcement text quote: I would like to announced that I have recently updated the D TextMate bundle to support D2 and TextMate 2. On a high level what's changed: * The language grammar is up to date with D2 (I probably forgot something) * Commands for building/running with RDMD and Dub * Cleanup obsolete snippets and commands * Some minor adjustments to make it compatible with TextMate 2 * Takes advantage of the new gutter marks in TextMate 2 for compiler messages * Completely new internals for the build and run commands * Update snippets to follow Phobos style guides The build/run commands will create links in the output window which points back to the editor for compile errors, warnings and deprecation messages. When running an application it will also do the same thing for any exceptions that are thrown. It will also add these messages as marks in the gutter view. For information about the build/run commands and how to configure the compiler (if needed) see the built-in help command for the bundle (Bundles -&gt; D -&gt; Help), also present here [1]. I would say that this bundle has a pretty good foundation now but it doesn't contain any advanced/fancy features, like autocompletion with DCD. The bundle is available through TextMate's built-in bundle/package manger (TextMate -&gt; Preferences -&gt; Bundles). For those who already have the bundle the update should be automatic. [1] https://github.com/textmate/d.tmbundle/blob/master/Support/help.md -- /Jacob Carlborg 
I always enjoy reading about D's tips and idioms. &gt;int[1000] a = void; What would be the difference between using this vs uninitializedArray ? No allocation perhaps ?
Announcement text quote: here is Cdb[1] reader and creator, in two small modules. reader: [2] creator: [3] sample: [4] it's totally untested, but i believe that is works. at least for the given sample. Public Domain, based on tinycdb[5]. [1] http://cr.yp.to/cdb.html [2] http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/tinycdb.d [3] http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/tinycdbmk.d [4] http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/tinycdb_test/cdbtest.d [5] http://www.corpit.ru/mjt/tinycdb.html 
With a particle system you want very high cache locality so your instinct is right, use an array of structs. You'll want to preallocate the array up front and use that without changing the size (this means there is fixed cap on the number of particles and you reuse particles that have "died" as new particles are needed). Allocating at compile time isn't really an option. A huge static array is the closest concept I can think of but doing that doesn't really buy you much performance because doing one big allocation on the heap isn't costly enough to worry about (it's when you are doing thousands of small allocations that you have to worry). You also want to avoid any branches (if, loops, etc) done on the individual particle basis whenever possible (a `if (alive) { /* compute next position */ }` is often slower than just computing the position on all particles, even dead ones. Read up on [branch mispredictions](http://stackoverflow.com/a/11227902) if you haven't. This is basically the exact same strategy as you'd use in C++ so C++ tutorials would probably be applicable (if you see one using "new" for the individual particles run away though, that's bad practice in either language). Particle systems share a lot with the newer Data Oriented Entity Component Systems people are using so reading about those could help you too. I can't think of any D specific features that would help other than the general syntax niceities D has over C++. You could experiment with SIMD but I can't offer any guidance there.
Thanks! &gt; one big allocation on the heap isn't costly enough to worry about That's a relief to know. In that case I'll simply pass a maximal number to the constructor. &gt;Read up on branch mispredictions if you haven't. I have. With my name it's basically inevitable. ;) &gt;if you see one using "new" for the individual particles run away though I've actually seen an [old, often forked game](https://github.com/Secretchronicles/TSC/blob/devel/tsc/src/video/animation.cpp#L765) which does that. It works surprisingly well for a four digit number of particles. It probably just shows how amazingly fast computers have become. &gt;You could experiment with SIMD but I can't offer any guidance there. If I wanted millions of pixels, I probably had to do all on the GPU like real AAA engines. Which looks impressive, but is kind of an overkill. Speaking of CPU-GPU bottlenecks, do you know if it's cool if I use the SDL draw function to draw each particle or should I really put them in some kind of vertex array, similar to http://www.sfml-dev.org/tutorials/2.0/graphics-vertex-array.php ? Is that even possible for particles? My OpenGL knowledge is rather limited.
Announcement text quote: Just found this: http://www.terrainformatica.com/2015/04/sciter-d-language-sdk-port/ 
Announcement text quote: In the light of problems with SVN on dsource, the Bindings project has been migrated to GitHub on a trial basis. Apparently this is more or less the last "active" project on Dsource, so after a brief discussion on another thread I have decided to give it a try. So it's now at: https://github.com/smjgordon/bindings Please don't confuse this with dsource-bindings, which is an automatically updated mirror of the Dsource project. The one I have linked to is a new repository on GitHub which may become the live repository for the Bindings project. For those of you who are still unfamiliar with GitHub, it's a Subversion repository just like we had on dsource, so you don't need to learn a new way of working or obtain any new tools - you just need to set up a GitHub account if you don't have one already. Could people please try checking out the project on GitHub, and committing a change? There's still plenty of work to do on WindowsAPI so you could do some of the work there. (The wiki is broken at the moment, so I don't recommend trying to edit the module list there, but as a temporary measure you could just post on this thread if you're going to do some major work on one or more of the files.) Failing that, there's a file test.txt (directly under trunk) which you could make a dummy edit to. But whatever you do, please be sure to reply to this thread to let me know whether or not you could commit successfully. If the decision is made to relocate Bindings permanently to GitHub, the wiki pages will be migrated in due course. Stewart. -- My email address is valid but not my primary mailbox and not checked regularly. Please keep replies on the 'group where everybody may benefit. 
You should use a vertex buffer and a geometry shader.
Why the geometry shader? I think that adds geometry? Also, it seems that it is said to be slow with a high number of things. Is it really the right tool to use for particles?
The geometry shader would build the billboard for each particle. You start with a single vertex and the geometry shader builds two triangles from it. It gives you a lot more control over the end result and all rendering is performed by the GPU. You just bind the shader and call DrawBuffers. The alternative would be to use point sprites, but that's not really forward compatible. You should in any case not issue draw calls for each particle. It will murder performance.
Thanks. &gt; You start with a single vertex and the geometry shader builds two triangles from it. And a texture can be binded to those? Is that how it works?
You create a vertex shader first. This transforms the vertex. Then you create a geometry shader. This generates the triangles (and texture coordinates) and lastly you need a fragment shader which does texture lookup and generates color fragments. The texture is bound to the shader program through uniforms.
Thank you. That made the pipeline somewhat clearer.
Announcement text quote: First beta for the 2.067.1 point release. http://downloads.dlang.org/pre-releases/2.x/2.067.1/ http://ftp.digitalmars.com/ Also available on Travis-CI as dmd-2.067.1-b1. This beta comes with 9 dmd, 1 druntime, and 3 phobos fixes. https://github.com/D-Programming-Language/dmd/compare/v2.067.0...v2.067.1-b1 https://github.com/D-Programming-Language/druntime/compare/v2.067.0...v2.067.1-b1 https://github.com/D-Programming-Language/phobos/compare/v2.067.0...v2.067.1-b1 Please report any bugs at https://issues.dlang.org. -Martin 
&gt; How do I pull variables from other classes and functions? Huh? `this()` is just a special member function that's called when you construct a new object (`new object`.) `super()` is just "the `this()` of the super/parent class". They're equivalent to `__init__` and `ParentClass.__init__(self)`. D's `this` (no parens) is also Python's `self`.
Announcement text quote: GitHub repo: https://github.com/idanarye/vim-dutyl vim.org page: http://www.vim.org/scripts/script.php?script_id=5003 Now Dutyl can use dfmt to indent and/or format D code. Formatting and indentation is done using Vim's regular operators(gq and =). 
Announcement text quote: preliminary (which means "not really tested") bindings for ToxCore[1]: http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/tox.d http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/toxav.d [1] https://tox.im/ 
Thanks! One last question. If you go "c style" to avoid gc, can you avoid the runtime as well or is the runtime always required no matter what? Cause it feels like if you're native and have no gc, you don't need a runtime. I'm curious. 
Well, druntime also includes stuff class Object, the implementation of array ops, bit ops, and exceptions. You can compile your program without linking druntime, but that's nuking mosquitoes if all you want to do is avoid GC. The @nogc annotation and being familiar with what parts of Phobos allocate (not much these days) are all you really need. More info here! https://github.com/D-Programming-Language/druntime/blob/master/README.md 
Announcement text quote: Tuesday and Wednesday between 8:00am and 4:30pm PDT the auto-tester is going to loose a significant fraction of its build hardware due to power maintenance (my entire neighborhood is loosing its incoming power lines, apparently). I'm in the process of spinning up additional ec2 instances to ensure that we don't loose platform coverage during the maintenance, though there will likely not be the level of redundancy that is available normally. Bad timing considering the hackathon, but hopefully it won't be particularly noticeable to anyone other than me. Later, Brad 
I'm not asking to avoid the gc, I'm asking to avoid the runtime. Eg, to run native d code on a machine without the runtime. I don't plan on doing it, just curious if it was possible. 
You're in luck, there have been a few threads on this lately on the D mailing list. You might want to take a look: http://forum.dlang.org/thread/gzbsizvhpbridbjkmxmj@forum.dlang.org http://forum.dlang.org/thread/fzjflktqwsgxbifozkhw@forum.dlang.org I believe there are already a few minimal runtimes floating around out there, but [minilibd](https://bitbucket.org/timosi/minlibd) is the only one I can remember. The basic premise is that you just stub out the different functions/structures in druntime so calls to them do nothing.
Ah, my mistake! Short answer: Yes, check this for the proper compiler options: http://arsdnet.net/dcode/minimal.d Long answer: The compiler expects some of the symbols defined in the runtime to be available, so they need to be defined for a successful compilation. One can opt out of linking the runtime and define the symbols in their main module to make the compiler happy without the whole runtime. 
Announcement text quote: http://www.oscon.com/open-source-eu-2015/public/cfp/385 I encourage people in the D community to consider submitting (I will). DConf speakers might find it easy to submit their DConf talk. Even rejected submissions add value seeing as there is D-related material available. Andrei 
Announcement text quote: With the help of @ColdenCullen, Codecov now supports D language. You can easily upload your coverage reports and utilize our many features to enhance your workflow. Writing tests for your code is important, no question. The results of your tests is simply pass or fail without proper coverage reports. Codecov makes it easy to upload coverage metrics to get more insight into how your tests are performing. A must have is our Browser Extension that overlays coverage reports directly in Github's interface for a seamless experience and further insight into your code. Unlimited public repos, free forever. Unlimited private repos only $5 a month. Learn more at https://codecov.io View examples at https://github.com/codecov/example-d Questions and comments: hello@codecov.io Twitter: @codecov Thank you and have a great day! Steve and the Codecov Family 
Announcement text quote: http://d.readthedocs.org I hope this examples will be useful for students. Ilya 
Announcement text quote: A simple demonstration using D to bare-metal program and ARM Cortex-M microcontroller. Full description with pictures and even a video can be found here: https://github.com/JinShil/stm32f42_discovery_demo/blob/master/README.md I know, random rectangles on a screen is not all that remarkable, but there's quite a bit of work that needs to be done before one can write their first pixel. * Minimal D runtime * Memory-mapped IO features * Clock and flash memory configuration * Software initialization (data and bss segments) * SPI driver to configure the external LCD controller * Internal parallel LCD controller configuration * Hardware random number generator EVERYTHING is in D. I've had this project on the back burner for a while, and the Hackathon gave me the excuse I needed to get it done. I didn't put a lot of effort into the code because I just wanted to get something working to prove some ideas I had, and show that D has some potential in this domain. I hope you find it interesting. Ask me anything. Mike 
Announcement text quote: Any D game developers out there looking to create a tile-based game? DTiled aims to provide a quick and easy way to load maps created with Tiled (http://www.mapeditor.org). For those that don't know, Tiled is an open-source 2D tilemap editor that is a great tool for indie developers. At the moment, DTiled is a pretty thin wrapper around Tiled's JSON map format, though it provides a few useful helper functions and may expand to provide a higher-level API for inspecting tilemap data. DUB: http://code.dlang.org/packages/dtiled Docs: http://rcorre.github.io/dtiled/dtiled.html Github: https://github.com/rcorre/dtiled DTiled is focused on loading and inspecting tilemap data rather than rendering it, as I do not want to tie DTiled to a particular rendering engine. The idea is that a developer can use DTiled to inspect the information exported from tiled and populate their own in-game map data. Want to see it in action? Check out this example, which uses DTiled to load a map and Allegro to render it: https://github.com/rcorre/dtiled-example Other than that example and some unit tests on the loaded data, DTiled is not yet well-proven. However, I am trying to get back into gamedev and intend on developing DTiled further as I use it. If you give it a try, let me know what you think! 
Announcement text quote: Hi, I've updated asm.dlang.org site. Apart from rebasing upstream fixes, the only notable difference is that I've added in DMD 2.067.1 to the list of compilers. That's all really. Regards Iain. 
Announcement text quote: It was in announce because I made a mistake in posting. 
Announcement text quote: Hi! Calypso just got a D translation of the first Qt5 Widgets tutorial building and running: https://github.com/Syniurge/Calypso/blob/master/tests/calypso/qt5/qt5demo.d Result: http://homo-nebulus.fr/dlang/oh%20my.webm Compilation log: https://paste.kde.org/pewbbsw45 Previously Calypso was merely able to work with STL types, this is the first time a large C++ library is successfully mapped and used by D code (Ogre3D is probably close as well, but after Kagamin's suggestion and for a change of scene I switched my focus from Ogre3D to Qt). 
Announcement text quote: I would like to announce that DWT recently got support for 64bit, both on Linux and Windows. Compiling for 32bit COFF should also work on Windows. All this work was done by kntroh and Jesse Phillips, thank you very much. -- /Jacob Carlborg 
Announcement text quote: https://thestrangeloop.com/sessions-page/call-for-presentations Pretty much everyone who has presented or submitted a proposal for DConf should also make a submission to Strange Loop. The deadline is May 15. 
Announcement text quote: Inspired by ponce idioms list for D I've set up something similar. There are some themes in D which come up regulary and are discussed to the vomit. If something is agreed, it gets forgotten sometimes and the theme disappears into oblivion (for a few months :P). To prevent this, I've collected some hot-discussed themes, their history and their current state. I hope this helps to avoid unnecessary discussions in the future and finally cut off these issues (either with an official decision "Nope, keep as it is" or with an implementation). I've tried to stay as objective as possible, but if something seems to be too subjective, please let me know, so I can fix it. http://dgame.github.io/dneeds/ 
D needs a working intellij plugin
Announcement text quote: I took the time to research the status quo in D compiler availability on a variety of OSs. http://wiki.dlang.org/Compilers#Package_and.2For_binary_availability.2C_by_platform_and_compiler The reason I am posting this in announce is that, for it to be worth having, it will need to be kept up to date by the various people who maintain these packages and/or users who notice changes. 
Is it possible to build this on Mac OSX. Lazarus is available on Mac OS X.. 
Announcement text quote: here i'm presenting[1][2] a simple, but usable and reasonably[3] fast key-value storage in the spirit of GDBM. it is based on Depot[4] layer of QDBM[5] package. it should be compatible with QDBM databases. Depot consists of a single class, and allows you to put, get and del[ete] records. it also supports simple iteration. it keeps it's database in a single disk file. file size is limited to 2GB. Depot doesn't support concurrent access or multiple iterators. Depot is not ACID database, and it doesn't support transactions. Depot is GNU LGPL. refer to QDBM documentation to learn more about it's Depot layer. WARNING! Depot is not heavily tested, and it's API may change in the future. think of it as a proof-of-concept code. althru QDBM is stable, there is no guarantees that i didn't introduced new bugs while porting. [1] http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/depot.d [2] http://repo.or.cz/w/iv.d.git/blob_plain/HEAD:/depot_test/dtest01.d [3] "reasonably" means "it doesn't suck... much" [4] http://fallabs.com/qdbm/spex.html#depotapi [5] http://fallabs.com/qdbm/index.html 
Announcement text quote: http://dconf.org/2015/talks/wakeling.html Joseph has graciously agreed to fill in for Don who is unable to attend. We'll miss Don, but are looking forward to hearing Joseph! 
Announcement text quote: Sad news - Martin missed his flight and found no viable alternative to make it to DConf. For his slot at 10:00 AM on Thursday, we'll look into teleconferencing options for him. Alternatively, we're now taking applications from the other speakers and attendees to fill his slot. Please email your proposals to Walter and myself if interested. Andrei 
Will this build under osx?
Announcement text quote: Thanks to John Colvin! He rigged his webcam centrally so we can livestream DConf 2015 in passable quality to youtube. Link: https://www.youtube.com/watch?v=-OCl-jWyT9E It's live now (30 minutes of break still ongoing so not a lot going on at the moment). Schedule at: http://dconf.org/2015/schedule/index.html Times are in MDT (GMT-0600). Andrei 
I'm curious as to why this isn't written in D, but rather Pascal?
Eclipse: [**DDT**](http://ddt-ide.github.io/) IntelliJ: [**DLanguage**](https://github.com/kingsleyh/DLanguage) and there are other initiatives... The tools offer gets wider and wider. Nobody can pretend that the editor support is a blocker to dive into the Dlang. Maybe two years ago it was a bit sparse. I remember that when i had the idea to start a D editor in Lazarus this was partially because mono-D was not easily installable on Linux (at least on Fedora and OpenSuse), the official repos for each distribution were only proposing an outdated mono develop version, incompatible with the plugin, and well it was a mess to setup...When i started Coedit this had changed but i didn't realized yet. Anyway CE has its place, particularly for the beginers because of the _runnable modules_.
Announcement text quote: https://www.youtube.com/watch?v=AH35IxWkx8M :-) 
The two mainstream D editors are clearly _mono-D_ and _VisualD_...
I'm not disputing that. I'm just expressing a desire mainly for a good plugin for IntelliJ because I selfishly hate learning a new IDE and do all my js, php, java and C++ coding in IntelliJ already.
Woo, one of the few projects I contributed to. Admittedly all I did was fix a typo, but still. I'm happy I did SOMETHING.
&gt; No support for dub files? That's one thing that really makes D better than C++, which still lacks modules. &gt; No debugger? VC++ it is.
&lt;a rel="nofollow" href="https://www.reddit.com/r/programming/comments/3axgth/d_conf_2015_memory_models_and_d_deadalnix/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.red&lt;/span&gt;&lt;span class="forcewrap"&gt;dit.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;r/programming/&lt;/span&gt;&lt;span class="forcewrap"&gt;comments/&lt;/span&gt;&lt;span class="forcewrap"&gt;3axgth/&lt;/span&gt;&lt;span class="forcewrap"&gt;d_conf_2015_&lt;/span&gt;&lt;span class="forcewrap"&gt;memory_&lt;/span&gt;&lt;span class="forcewrap"&gt;models_and_d_&lt;/span&gt;&lt;span class="forcewrap"&gt;deadalnix/&lt;/span&gt;&lt;/a&gt; deadalnix, could you please post an AMA there? 
&lt;a rel="nofollow" href="https://www.reddit.com/r/programming/comments/3axgwn/d_language_runtime_klickverbot_dconf_2015/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.red&lt;/span&gt;&lt;span class="forcewrap"&gt;dit.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;r/programming/&lt;/span&gt;&lt;span class="forcewrap"&gt;comments/&lt;/span&gt;&lt;span class="forcewrap"&gt;3axgwn/&lt;/span&gt;&lt;span class="forcewrap"&gt;d_language_&lt;/span&gt;&lt;span class="forcewrap"&gt;runtime_&lt;/span&gt;&lt;span class="forcewrap"&gt;klickverbot_&lt;/span&gt;&lt;span class="forcewrap"&gt;dconf_2015/&lt;/span&gt;&lt;/a&gt; David, could you please post an AMA there? 
First beta for the 2.068.0 release. &lt;a rel="nofollow" href="http://downloads.dlang.org/pre-releases/2.x/2.068.0/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;downloads.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;pre-releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;2.x/2.068.0/&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://ftp.digitalmars.com/"&gt;http://ftp.digitalmars.com/&lt;/a&gt; Also available on Travis-CI as dmd-2.068.0-b1. A changelog containing all the upcoming changes will be provided within the next few days. Please report any bugs at &lt;a rel="nofollow" href="https://issues.dlang.org"&gt;https://issues.dlang.org&lt;/a&gt; -Martin 
https://github.com/BBasile/dbeaengine with this lib you can disassemble the code generated for your program in a single call.
Please continue to spread the love (twitter, reddit, hackernews, facebook, your blog...): &lt;a rel="nofollow" href="https://www.youtube.com/watch?v=rmRmfoKxMCE"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.yout&lt;/span&gt;&lt;span class="forcewrap"&gt;ube.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;watch?v=&lt;/span&gt;&lt;span class="forcewrap"&gt;rmRmfoKxMCE&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://www.youtube.com/watch?v=1W6uhX6AITM"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.yout&lt;/span&gt;&lt;span class="forcewrap"&gt;ube.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;watch?v=&lt;/span&gt;&lt;span class="forcewrap"&gt;1W6uhX6AITM&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://www.youtube.com/watch?v=1W6uhX6AITM"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.yout&lt;/span&gt;&lt;span class="forcewrap"&gt;ube.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;watch?v=&lt;/span&gt;&lt;span class="forcewrap"&gt;1W6uhX6AITM&lt;/span&gt;&lt;/a&gt; Andrei 
Thanks for your reply. I suppose I can learn dub. Re the imports, I guess I'm struggling to see the use case for a library/header set over the source. Is this purely to hide source code? ie. if the project is open source I should link against the files directly?
I'm using linux, so what you provided should unblock me. Thanks very much!
the new gc profiler option is nice!
JSON used over wast number of projects for configuration files and similar stuff. Or would you preferred if @Ahhmyface posted XML?
What is HDF5, and why should you use it ? &lt;a rel="nofollow" href="http://www.hdfgroup.org/why_hdf/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.hdfg&lt;/span&gt;&lt;span class="forcewrap"&gt;roup.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;why_hdf/&lt;/span&gt;&lt;/a&gt; (My summary): - very large data sets, very fast access requirements, and complex datasets - share data across variety of platforms - many open-source and commercial tools that understand HDF - self-describing and can specify complex data relationships and dependencies - can contain binary data in many representations - allow direct access to parts of file without first parsing whole contents - hierarchical data objects can be expressed in natural manner (contrast experience with realational database tables) - n-dimensional datasets and each element in set may be complex object - relational databases good for field matching queries but not for sequentially processing all records in database or for subsetting data based on co-ordinate style lookup - custom proprietary binary formats often not portable, not extensible and not high-performance. technical debt to maintain data management part of code I personally find it useful for storing price data for financial instruments, and also economic data. There are bespoke time series databases, but they come at a price, which is not purely a pecuniary one. Updated wrappers are here: &lt;a rel="nofollow" href="https://github.com/Laeeth/d_hdf5"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Laeeth/d_hdf5&lt;/span&gt;&lt;/a&gt; Changes since last time - some fixes to bindings and updates to later version of HDF5 API. There is more to go to make it accessible idiomatically from D, but it's usable today. A simple example of mapping D structs to HDF5 types and back again is in the examples/traits directory. Pull requests and offers to help maintain it are welcome. It's still at an alpha stage, but already useful. Laeeth. 
Minor update to scriptlike: Utility library to aid in writing script-like programs in D. Homepage and features: &lt;a rel="nofollow" href="https://github.com/Abscissa/scriptlike"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Abscissa/&lt;/span&gt;&lt;span class="forcewrap"&gt;scriptlike&lt;/span&gt;&lt;/a&gt; On DUB: &lt;a rel="nofollow" href="http://code.dlang.org/packages/scriptlike"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;scriptlike&lt;/span&gt;&lt;/a&gt; API Reference: &lt;a rel="nofollow" href="http://semitwist.com/scriptlike"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;semitwist.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;scriptlike&lt;/span&gt;&lt;/a&gt; Full Changelog: &lt;a rel="nofollow" href="http://semitwist.com/scriptlike/changelog.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;semitwist.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;scriptlike/&lt;/span&gt;&lt;span class="forcewrap"&gt;changelog.html&lt;/span&gt;&lt;/a&gt; New in v0.9.3: - Fixed: #16: Access to standard Phobos function hampered: &lt;a rel="nofollow" href="https://github.com/Abscissa/scriptlike/issues/16"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Abscissa/&lt;/span&gt;&lt;span class="forcewrap"&gt;scriptlike/&lt;/span&gt;&lt;span class="forcewrap"&gt;issues/16&lt;/span&gt;&lt;/a&gt; - Enhancement: Support running unittests through DUB: &amp;quot;dub test&amp;quot; - Enhancement: Uses travis-ci.org for continuous integration testing. 
&lt;a rel="nofollow" href="https://github.com/D-Programming-Language/dmd/pull/4923"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D-Programming-&lt;/span&gt;&lt;span class="forcewrap"&gt;Language/&lt;/span&gt;&lt;span class="forcewrap"&gt;dmd/pull/4923&lt;/span&gt;&lt;/a&gt; We have made the switch from C++ DMD to D DMD! Many, many thanks to Daniel Murphy for slaving away for 2.5 years to make this happen. More thanks to Martin Nowak for helping shepherd it through the final stages, and to several others who have pitched in on this. This is a HUGE milestone for us. Much work remains to be done, such as rebasing existing dmd pull requests. Thanks in advance for the submitters who'll be doing that. I hope you aren't too unhappy about the extra work - it's in a good cause! 
Rough summary of the talk I have given for recent Berlin D meetup event: &lt;a rel="nofollow" href="https://blog.dicebot.lv/posts/2015/08/OOP_composition_with_mixins"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;blog.dic&lt;/span&gt;&lt;span class="forcewrap"&gt;ebot.lv/&lt;/span&gt;&lt;span class="forcewrap"&gt;posts/2015/&lt;/span&gt;&lt;span class="forcewrap"&gt;08/OOP_&lt;/span&gt;&lt;span class="forcewrap"&gt;composition_&lt;/span&gt;&lt;span class="forcewrap"&gt;with_mixins&lt;/span&gt;&lt;/a&gt; 
&lt;a rel="nofollow" href="http://code.dlang.org/packages/aammm/~master"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;aammm/~master&lt;/span&gt;&lt;/a&gt; # aammm Associative arrays with manual memory management All enries and buckets would be dealocated and disposed by internal implementation's destructor. The destructor is called by garbage collector (by default). #### Example ```D //std.experimental.allocator is included into `aammm` import &lt;span class="forcewrap"&gt;std.expe&lt;/span&gt;&lt;span class="forcewrap"&gt;rimental.&lt;/span&gt;&lt;span class="forcewrap"&gt;allocator.&lt;/span&gt;&lt;span class="forcewrap"&gt;mallocator;&lt;/span&gt; import aammm; auto a = AA!(string, int, shared &lt;span class="forcewrap"&gt;Mallocator)(&lt;/span&gt;&lt;span class="forcewrap"&gt;Mallocator.&lt;/span&gt;&lt;span class="forcewrap"&gt;instance);&lt;/span&gt; a[&amp;quot;foo&amp;quot;] = 0; a.remove(&amp;quot;foo&amp;quot;); //dealocates and disposes the entry assert(a == null); // should not crash ``` AAMMM is based on Andrei's allocators and Martin's associative arrays. References: &lt;a rel="nofollow" href="http://erdani.com/d/phobos-prerelease/std_experimental_allocator.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;erdani.com/d/&lt;/span&gt;&lt;span class="forcewrap"&gt;phobos-&lt;/span&gt;&lt;span class="forcewrap"&gt;prerelease/&lt;/span&gt;&lt;span class="forcewrap"&gt;std_expe&lt;/span&gt;&lt;span class="forcewrap"&gt;rimental_&lt;/span&gt;&lt;span class="forcewrap"&gt;allocator.html&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/D-Programming-Language/druntime/pull/1282"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D-Programming-&lt;/span&gt;&lt;span class="forcewrap"&gt;Language/&lt;/span&gt;&lt;span class="forcewrap"&gt;druntime/&lt;/span&gt;&lt;span class="forcewrap"&gt;pull/1282&lt;/span&gt;&lt;/a&gt; Best Regards, Ilya 
Thank you for your dedication and good luck!
Maybe unnoticed by the community, but thanks to Oleh (olehlong) D is visible as one of implementations of Json web token library on &lt;a rel="nofollow" href="http://jwt.io/"&gt;http://jwt.io/&lt;/a&gt;. I dont't want to get any credit from this, but not sure if Oleh is on forum so I posted it to let others know. More info about lib is at &lt;a rel="nofollow" href="http://code.dlang.org/packages/jwtd"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/jwtd&lt;/span&gt;&lt;/a&gt; 
I'm glad to announce that a second update, for Coedit 1, is available. ---- &lt;a rel="nofollow" href="https://github.com/BBasile/Coedit/releases/tag/1_update_2"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;BBasile/&lt;/span&gt;&lt;span class="forcewrap"&gt;Coedit/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/1_update_2&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/BBasile/Coedit"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;BBasile/Coedit&lt;/span&gt;&lt;/a&gt; ---- Coedit is an IDE for the DMD compiler. It's 'a DMD GUI for the free electrons'. If it's not enough it may be all too much (&lt;a rel="nofollow" href="https://www.youtube.com/watch?v=S5M2GtNpPE4"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.yout&lt;/span&gt;&lt;span class="forcewrap"&gt;ube.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;watch?v=&lt;/span&gt;&lt;span class="forcewrap"&gt;S5M2GtNpPE4&lt;/span&gt;&lt;/a&gt;) Have fun while you can, life is short. 
On the front page of Hacker News: &lt;a rel="nofollow" href="https://news.ycombinator.com/news"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;news.yco&lt;/span&gt;&lt;span class="forcewrap"&gt;mbinator.&lt;/span&gt;&lt;span class="forcewrap"&gt;com/news&lt;/span&gt;&lt;/a&gt; 
Your bot fails.
&lt;a rel="nofollow" href="https://github.com/economicmodeling/containers"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;economic&lt;/span&gt;&lt;span class="forcewrap"&gt;modeling/&lt;/span&gt;&lt;span class="forcewrap"&gt;containers&lt;/span&gt;&lt;/a&gt; This containers library is built on top of Andrei's std.experimental.allocator. It's currently used by libraries internal to EMSI, as well as the open-source DCD project. The containers are backed by malloc (Mallocator) by default, but you can specify any custom allocator that you want. The containers try to automatically call GC.addRange and GC.removeRange if they are templated on a reference type, so you should be able to safely store references to GC memory in these containers. If you want to disable this support, there is a template parameter for that. Please report bugs on Github here: &lt;a rel="nofollow" href="https://github.com/economicmodeling/containers/issues"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;economic&lt;/span&gt;&lt;span class="forcewrap"&gt;modeling/&lt;/span&gt;&lt;span class="forcewrap"&gt;containers/&lt;/span&gt;&lt;span class="forcewrap"&gt;issues&lt;/span&gt;&lt;/a&gt; 
Hi everyone, LDC 0.16.0 alpha2, the LLVM-based D compiler, is available for download! This release is based on the 2.067.1 frontend and standard library and supports LLVM 3.1-3.7 (OS X: no support for 3.3). Don't miss to check if your preferred system is supported by this release. There is even an alpha-quality Win64 version available! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: &lt;a rel="nofollow" href="http://forum.dlang.org/post/qvxvcpceknfzsizbtqia@forum.dlang.org"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;post/&lt;/span&gt;&lt;span class="forcewrap"&gt;qvxvcpcekn&lt;/span&gt;&lt;span class="forcewrap"&gt;fzsizbtqia@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org&lt;/span&gt;&lt;/a&gt; Regards, Kai 
&lt;a rel="nofollow" href="https://github.com/Hackerpilot/DCD/tree/v0.7.0"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpi&lt;/span&gt;&lt;span class="forcewrap"&gt;lot/DCD/&lt;/span&gt;&lt;span class="forcewrap"&gt;tree/v0.7.0&lt;/span&gt;&lt;/a&gt; After an alpha, a beta, and two release candidates DCD 0.7.0 is ready. The D Completion Daemon is an auto-complete program for the D programming language. Highlights: * A large portion of DCD's symbol resolution engine was removed and placed into the new dsymbol project. * Several design bugs with the cache invalidation process were fixed. (TLA+ was helpful with this) * Regression testing! DCD now has regression tests. This was long overdue... Information on the tests can be found on the testing wiki page * DCD now uses the latest version of std.experimental.allocator. * Added the ability to ask the client to list the paths that are registered with the server. * Removed all editor plugins from the DCD repository. All editor plugins were maintained outside of this repository anyways, so this was more-or-less a dead code removal. Links to editor plugins and IDEs can be found on the wiki * Support 2.068 syntax. The only thing that really changed is that &amp;quot;inline&amp;quot; and &amp;quot;mangle&amp;quot; are now on the list of &amp;quot;pragma&amp;quot; autocomplete suggestions. * Add &amp;quot;__LINE__&amp;quot;, &amp;quot;__FILE__&amp;quot;, and other built-in symbols to autocomplete suggestions. * Correctly expand the current working directory when starting the server with -I options specifying relative paths. * Fixed many bugs: &lt;a rel="nofollow" href="https://github.com/Hackerpilot/DCD/issues?q=milestone%3A0.7.0"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;DCD/issues?q=&lt;/span&gt;&lt;span class="forcewrap"&gt;milestone%&lt;/span&gt;&lt;span class="forcewrap"&gt;3A0.7.0&lt;/span&gt;&lt;/a&gt; 
Hi all! LLVM 3.7 has been released some minutes ago! See the release notes here: &lt;a rel="nofollow" href="http://llvm.org/releases/3.7.0/docs/ReleaseNotes.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;llvm.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;3.7.0/docs/&lt;/span&gt;&lt;span class="forcewrap"&gt;ReleaseN&lt;/span&gt;&lt;span class="forcewrap"&gt;otes.html&lt;/span&gt;&lt;/a&gt; Downloads: &lt;a rel="nofollow" href="http://llvm.org/releases/download.html#3.7.0"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;llvm.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;download.&lt;/span&gt;&lt;span class="forcewrap"&gt;html#3.7.0&lt;/span&gt;&lt;/a&gt; Also note that LDC is mentioned in the release notes as one of the projects who are already supporting LLVM 3.7. Just recompile LDC using master/merge-2.067 branch from GitHub. This is the 7th time that LDC and D are mentioned in the LLVM release notes! Regards, Kai 
&gt; 1st Ever Artificial Consciousness in D Language to be Abandoned when Author Realizes their Clever Idea successfully Shuffled the Hard Parts under The Rug fixed? It is far easier to come up with a design that seems like it would work, than to come up with a design that actually works. Why, lots of people have done the former!
Apparently nobody told him that everything's easier in Python: import intelligence import random import sys # init mind with seed value ai = intelligence.mind(random.randint(1,sys.maxsize)) ai.start()
NO GODS OR KINGS. ONLY MAN
I am not sure I agree. It is considered a sign of health in many cases. First of all there is crossover in effort (the front end now in D is to be shared), but the backend work is very different. GDC and LDC both use the work provided by other parties to provide their back end so their main focus can be on the integration layer and the front end (shared) while DMD mostly uses an existing back end from Digital Mars' DMC (and the Symantec C++ compiler I think). In essence except for the effort on the DMD everything else is shared. Everyone of these compilers use the same runtime and standard library (druntime and phobos), so any effort there is again shared. In many cases (not all) having multiple compilers is considered good for the language for Independent Software Developers because that means your code will be able to continue to run on newer platforms even if a single source tanks economically or the idea men behind the language move on. There are successful single source languages (it seems "in" these days see Go, Swift, Rust and the like), but most have only one source so if Apple moves on to a new language will they keep supporting it? Same thing with Go (because Google seems to still be more about Java and Python than Go) and Rust is the product of Mozilla. Sure Open Source protects their existence a bit but the loss of company behind it can derail languages. So I think it is a good thing that there are multiple compiler implementation particularly because they seem to have agreed to use the same D based front end.
Pretty much
This release fixes a regression in the multi-part form parser. In addition to some additional bug fixes and minor changes, it adds support for out/ref @headerParam parameters in the REST interface generator. Finally, this release drops official support for DMD frontend versions below 2.066.x. Change log: &lt;a rel="nofollow" href="http://vibed.org/blog/posts/vibe-release-0.7.25"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;vibed.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;blog/&lt;/span&gt;&lt;span class="forcewrap"&gt;posts/&lt;/span&gt;&lt;span class="forcewrap"&gt;vibe-release-&lt;/span&gt;&lt;span class="forcewrap"&gt;0.7.25&lt;/span&gt;&lt;/a&gt; Homepage: &lt;a rel="nofollow" href="http://vibed.org/"&gt;http://vibed.org/&lt;/a&gt; DUB package: &lt;a rel="nofollow" href="http://code.dlang.org/packages/vibe-d"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;vibe-d&lt;/span&gt;&lt;/a&gt; GitHub: &lt;a rel="nofollow" href="https://github.com/rejectedsoftware/vibe.d"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;rejected&lt;/span&gt;&lt;span class="forcewrap"&gt;software/&lt;/span&gt;&lt;span class="forcewrap"&gt;vibe.d&lt;/span&gt;&lt;/a&gt; 
Getting close to the 1.0.0 milestone, this release implements all of the major missing features except for a reviewed/cleaned up D API. The most important changes in this release are: - Support for SDLang [1] based package recipes. While JSON is and will stay available, this format is a lot more enjoyable, with support for comments and a much cleaner syntax. See the package format specification [2] for an overview. - Greatly enhanced &amp;quot;dub describe&amp;quot; support - includes a &amp;quot;targets&amp;quot; field usable for external build tools, adds a --data=... switch to output in shell-friendly format instead of JSON, supports a bunch of new environment variables for pre/post build/generate commands and more. - An experimental ARM build is now available on the download page. - Builds with DMD frontends 2.064.2 through 2.068.2. Also new is an online documentation page of the command line interface [3], which is generated from the same information as the command line --help pages. Download: &lt;a rel="nofollow" href="http://code.dlang.org/download"&gt;http://code.dlang.org/download&lt;/a&gt; Change log: &lt;a rel="nofollow" href="https://github.com/D-Programming-Language/dub/blob/master/CHANGELOG.md"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D-Programming-&lt;/span&gt;&lt;span class="forcewrap"&gt;Language/&lt;/span&gt;&lt;span class="forcewrap"&gt;dub/blob/&lt;/span&gt;&lt;span class="forcewrap"&gt;master/&lt;/span&gt;&lt;span class="forcewrap"&gt;CHANGELOG.md&lt;/span&gt;&lt;/a&gt; [1]: &lt;a rel="nofollow" href="https://github.com/Abscissa/SDLang-D/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Abscissa/&lt;/span&gt;&lt;span class="forcewrap"&gt;SDLang-D/&lt;/span&gt;&lt;/a&gt; [2]: &lt;a rel="nofollow" href="http://code.dlang.org/package-format?lang=sdl"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;package-&lt;/span&gt;&lt;span class="forcewrap"&gt;format?&lt;/span&gt;&lt;span class="forcewrap"&gt;lang=sdl&lt;/span&gt;&lt;/a&gt; [3]: &lt;a rel="nofollow" href="http://code.dlang.org/docs/commandline"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;docs/co&lt;/span&gt;&lt;span class="forcewrap"&gt;mmandline&lt;/span&gt;&lt;/a&gt; 
You might find John Colvin's talk [D is for Science](http://dconf.org/2015/talks/colvin.html) useful. He talks about using OpenCL with D. [video link](https://www.youtube.com/watch?v=edjrSDjkfko)
Although the book will always be free[1], many of you have expressed a need to pay without having to buy the paper version. The ebook versions are now available at Gumroad: &lt;a rel="nofollow" href="https://gum.co/PinD"&gt;https://gum.co/PinD&lt;/a&gt; The price is the very affordable $0+ ;) and you can pay with credit card number or through PayPal. Ali [1] &lt;a rel="nofollow" href="http://ddili.org/ders/d.en/"&gt;http://ddili.org/ders/d.en/&lt;/a&gt; 
&lt;a rel="nofollow" href="https://www.youtube.com/watch?v=s4EvygDNB0Q&amp;feature=youtu.be"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.you&lt;/span&gt;&lt;span class="forcewrap"&gt;tube.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;watch?v=&lt;/span&gt;&lt;span class="forcewrap"&gt;s4EvygDNB0Q&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;feature=&lt;/span&gt;&lt;span class="forcewrap"&gt;youtu.be&lt;/span&gt;&lt;/a&gt; Andrei 
I am quite happy with UTF support in phobos, but support for national codepages is very limited in phobos. Also it is not conform with ranges. So I decide share my project for supporting national charsets: &lt;a rel="nofollow" href="https://bitbucket.org/sibnick/national-encoding.git"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;bitbucket.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;sibnick/&lt;/span&gt;&lt;span class="forcewrap"&gt;national-&lt;/span&gt;&lt;span class="forcewrap"&gt;encoding.git&lt;/span&gt;&lt;/a&gt; Sample code: import national.charsets, std.array; dstring s = &amp;quot;123Я&amp;quot;; auto cp1251 = Windows1251.encode(s).array; auto utf32 = &lt;span class="forcewrap"&gt;Windows1251.&lt;/span&gt;&lt;span class="forcewrap"&gt;decode(&lt;/span&gt;&lt;span class="forcewrap"&gt;cp1251).&lt;/span&gt;&lt;span class="forcewrap"&gt;array;&lt;/span&gt; ubyte[] cp866 = &lt;span class="forcewrap"&gt;CHARSETS[&amp;quot;&lt;/span&gt;&lt;span class="forcewrap"&gt;cp866&amp;quot;].&lt;/span&gt;&lt;span class="forcewrap"&gt;encode(s).&lt;/span&gt;&lt;span class="forcewrap"&gt;array;&lt;/span&gt; utf32 = &lt;span class="forcewrap"&gt;CHARSETS[&amp;quot;&lt;/span&gt;&lt;span class="forcewrap"&gt;cp866&amp;quot;].&lt;/span&gt;&lt;span class="forcewrap"&gt;decode(cp866).&lt;/span&gt;&lt;span class="forcewrap"&gt;array;&lt;/span&gt; Every codec accepts range of some chars and returns range of ubytes. Every decoder accepts range of ubytes and returns range of dchars. This library is not cover UTF codecs, and multibytes national code pages. 
My supervisor organised this with the university: &lt;a rel="nofollow" href="http://memento.epfl.ch/event/why-d-2/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;memento.&lt;/span&gt;&lt;span class="forcewrap"&gt;epfl.ch/&lt;/span&gt;&lt;span class="forcewrap"&gt;event/why-d-2/&lt;/span&gt;&lt;/a&gt; Atila 
I'm happy to announce test runners for Android ARM, which will run most tests from druntime and phobos on your Android device: &lt;a rel="nofollow" href="https://github.com/joakim-noah/android/releases/tag/runners"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;joakim-noah/&lt;/span&gt;&lt;span class="forcewrap"&gt;android/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/runners&lt;/span&gt;&lt;/a&gt; You can install a test runner app or run a command-line binary. Please report your results in this thread in the ldc forum, which requires no registration, with the info and format requested there: &lt;a rel="nofollow" href="http://forum.dlang.org/thread/bafrkjfwmoyriyhmqizl@forum.dlang.org"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;thread/&lt;/span&gt;&lt;span class="forcewrap"&gt;bafrkjfwmo&lt;/span&gt;&lt;span class="forcewrap"&gt;yriyhmqizl@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org&lt;/span&gt;&lt;/a&gt; You can build ldc from source yourself using the patches linked. I will soon make available a cross-compiler build of ldc on linux/x86 and write up the process of building everything, including the test runner apk, on the wiki. I'll also port some more sample OpenGL apps from the Android NDK. Help with all of the above and fixing the remaining issues would be appreciated. You may notice that the patches are not very large, other than Kai's patch for cross-compiling 64-bit reals. That's because of ongoing ARM work for years by Johannes, Kai, Martin, David, and others, the awesomeness of ldc and llvm, and the Android/x86 patches I've upstreamed over the last couple years. I'd like to help get some D/OpenGL app ported to Android and submitted to the Play Store. Please let me know if you have any such project I can help with. 
I will be giving a talk at the Silicon Valley ACCU: &lt;a rel="nofollow" href="http://www.meetup.com/SFBay-Association-of-C-C-Users/events/225125586/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.mee&lt;/span&gt;&lt;span class="forcewrap"&gt;tup.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;SFBay-&lt;/span&gt;&lt;span class="forcewrap"&gt;Association-&lt;/span&gt;&lt;span class="forcewrap"&gt;of-C-C-Users/&lt;/span&gt;&lt;span class="forcewrap"&gt;events/&lt;/span&gt;&lt;span class="forcewrap"&gt;225125586/&lt;/span&gt;&lt;/a&gt; (I did not write that title nor the synopsis, which may have been updated by the time you read this.) Although I am confident about the self publishing part, I am sure there will be D questions that I am not expert enough. So, please make an effort to show up and support me. :) Thank you, Ali 
This release compiles on the 2.069.0 (D)DMD frontend. Major changes: - Big revamp of the REST interface generator that makes the implementation much simpler and more robust. A first result of this is a simple JavaScript client generator useful for supporting AJAX style sites. The next release will also support CORS [2] on this basis. - Optional support for using Botan [1] for TLS streams - Lot's of bug fixes in the libasync driver - VibeCustomMain is now the default, only VibeDefaultMain is needed now to use vibe.d's default main function This release contains a lot of medium size changes that would be too many to list them here, see the change log for a full list: &lt;a rel="nofollow" href="http://vibed.org/blog/posts/vibe-release-0.7.26"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;vibed.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;blog/&lt;/span&gt;&lt;span class="forcewrap"&gt;posts/&lt;/span&gt;&lt;span class="forcewrap"&gt;vibe-release-&lt;/span&gt;&lt;span class="forcewrap"&gt;0.7.26&lt;/span&gt;&lt;/a&gt; Homepage: &lt;a rel="nofollow" href="http://vibed.org/"&gt;http://vibed.org/&lt;/a&gt; DUB package: &lt;a rel="nofollow" href="http://code.dlang.org/packages/vibe-d"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;vibe-d&lt;/span&gt;&lt;/a&gt; GitHub: &lt;a rel="nofollow" href="https://github.com/rejectedsoftware/vibe.d"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;rejected&lt;/span&gt;&lt;span class="forcewrap"&gt;software/&lt;/span&gt;&lt;span class="forcewrap"&gt;vibe.d&lt;/span&gt;&lt;/a&gt; [1]: &lt;a rel="nofollow" href="https://github.com/etcimon/botan"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;etcimon/botan&lt;/span&gt;&lt;/a&gt; [2]: &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;en.wikip&lt;/span&gt;&lt;span class="forcewrap"&gt;edia.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;wiki/&lt;/span&gt;&lt;span class="forcewrap"&gt;Cross-&lt;/span&gt;&lt;span class="forcewrap"&gt;origin_&lt;/span&gt;&lt;span class="forcewrap"&gt;resource_&lt;/span&gt;&lt;span class="forcewrap"&gt;sharing&lt;/span&gt;&lt;/a&gt; 
Reply to this with 1.1, 1.2, 2, or 3: 1) by ponce: Variant 1: &lt;a rel="nofollow" href="https://github.com/p0nce/dconf.org/blob/master/2016/images/logo-sample.png"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;p0nce/&lt;/span&gt;&lt;span class="forcewrap"&gt;dconf.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;blob/master/&lt;/span&gt;&lt;span class="forcewrap"&gt;2016/&lt;/span&gt;&lt;span class="forcewrap"&gt;images/&lt;/span&gt;&lt;span class="forcewrap"&gt;logo-sa&lt;/span&gt;&lt;span class="forcewrap"&gt;mple.png&lt;/span&gt;&lt;/a&gt; Variant 2: &lt;a rel="nofollow" href="https://raw.githubusercontent.com/p0nce/dconf.org/4f0f2b5be8ec2b06e3feb01d6472ec13a7be4e7c/2016/images/logo2-sample.png"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;raw.githubus&lt;/span&gt;&lt;span class="forcewrap"&gt;ercontent.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;p0nce/&lt;/span&gt;&lt;span class="forcewrap"&gt;dconf.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;4f0f2b5be&lt;/span&gt;&lt;span class="forcewrap"&gt;8ec2b06e3fe&lt;/span&gt;&lt;span class="forcewrap"&gt;b01d6472ec&lt;/span&gt;&lt;span class="forcewrap"&gt;13a7be4e7c/&lt;/span&gt;&lt;span class="forcewrap"&gt;2016/images/&lt;/span&gt;&lt;span class="forcewrap"&gt;logo2-&lt;/span&gt;&lt;span class="forcewrap"&gt;sample.png&lt;/span&gt;&lt;/a&gt; 2) by Jonas Drewsen: &lt;a rel="nofollow" href="https://dl.dropboxusercontent.com/u/188292/g4421.png"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;dl.dropboxus&lt;/span&gt;&lt;span class="forcewrap"&gt;ercontent.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;u/188292/&lt;/span&gt;&lt;span class="forcewrap"&gt;g4421.png&lt;/span&gt;&lt;/a&gt; 3) by anonymous: PNG: &lt;a rel="nofollow" href="http://imgur.com/GX0HUFI"&gt;http://imgur.com/GX0HUFI&lt;/a&gt; SVG: &lt;a rel="nofollow" href="https://gist.github.com/anonymous/4ef7282dfec9ab327084"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;gist.gi&lt;/span&gt;&lt;span class="forcewrap"&gt;thub.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;anonymous/&lt;/span&gt;&lt;span class="forcewrap"&gt;4ef7282df&lt;/span&gt;&lt;span class="forcewrap"&gt;ec9ab327084&lt;/span&gt;&lt;/a&gt; Thanks, Andrei 
And same when I reinstalled 2.068 and then executed the install of 2.069 , on a Windows 7 Professional 64 bit
Atrium (code name) is a work-in-progress science fiction game with physics based puzzles (gravity effects, force fields, etc) akin to Portal or Inverto. The game is fully written in D, it uses custom graphics engine based on OpenGL and SDL. Physics engine is also written from scratch. Source code: &lt;a rel="nofollow" href="https://github.com/gecko0307/atrium"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;gecko0307/&lt;/span&gt;&lt;span class="forcewrap"&gt;atrium&lt;/span&gt;&lt;/a&gt; IndieDB page: &lt;a rel="nofollow" href="http://www.indiedb.com/games/atrium"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.ind&lt;/span&gt;&lt;span class="forcewrap"&gt;iedb.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;games/atrium&lt;/span&gt;&lt;/a&gt; A precompiled demo for Windows: &lt;a rel="nofollow" href="https://www.dropbox.com/s/qh8gai2n94qe8jj/atrium-testbuild-051115.zip?dl=0"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.dro&lt;/span&gt;&lt;span class="forcewrap"&gt;pbox.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;s/qh8gai&lt;/span&gt;&lt;span class="forcewrap"&gt;2n94qe8jj/&lt;/span&gt;&lt;span class="forcewrap"&gt;atrium-&lt;/span&gt;&lt;span class="forcewrap"&gt;testbuild-&lt;/span&gt;&lt;span class="forcewrap"&gt;051115.&lt;/span&gt;&lt;span class="forcewrap"&gt;zip?dl=0&lt;/span&gt;&lt;/a&gt; 
&lt;a rel="nofollow" href="https://github.com/joakim-noah/android/releases/tag/runners"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;joakim-noah/&lt;/span&gt;&lt;span class="forcewrap"&gt;android/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/runners&lt;/span&gt;&lt;/a&gt; You will need a linux/x86 host and the Android NDK, optionally the SDK if you want to create a GUI app. A slightly older build was used to create the test runners from earlier this week. You can use this cross-compiler to build command-line or GUI apps, by following the instructions from these sections in the wiki: &lt;a rel="nofollow" href="http://wiki.dlang.org/Build_LDC_for_Android#Build_a_command-line_executable"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;wiki.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;Build_LDC_for_&lt;/span&gt;&lt;span class="forcewrap"&gt;Android#Build_&lt;/span&gt;&lt;span class="forcewrap"&gt;a_command-&lt;/span&gt;&lt;span class="forcewrap"&gt;line_ex&lt;/span&gt;&lt;span class="forcewrap"&gt;ecutable&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://wiki.dlang.org/Build_LDC_for_Android#Build_a_sample_OpenGL_Android_app_ported_to_D"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;wiki.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;Build_LDC_for_&lt;/span&gt;&lt;span class="forcewrap"&gt;Android#Build_&lt;/span&gt;&lt;span class="forcewrap"&gt;a_sample_&lt;/span&gt;&lt;span class="forcewrap"&gt;OpenGL_&lt;/span&gt;&lt;span class="forcewrap"&gt;Android_&lt;/span&gt;&lt;span class="forcewrap"&gt;app_por&lt;/span&gt;&lt;span class="forcewrap"&gt;ted_to_D&lt;/span&gt;&lt;/a&gt; Make sure to set the NDK environment variable to the path of your Android NDK. There are also instructions to build the cross-compiler and test runner from source yourself: &lt;a rel="nofollow" href="http://wiki.dlang.org/Build_LDC_for_Android"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;wiki.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;Build_LDC_&lt;/span&gt;&lt;span class="forcewrap"&gt;for_Android&lt;/span&gt;&lt;/a&gt; 
&lt;a rel="nofollow" href="http://www.mozaaf.com/post/3284934"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.moz&lt;/span&gt;&lt;span class="forcewrap"&gt;aaf.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;post/3284934&lt;/span&gt;&lt;/a&gt; (Polish) &lt;a rel="nofollow" href="https://www.youtube.com/watch?v=6Kr-7RKErcM"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.you&lt;/span&gt;&lt;span class="forcewrap"&gt;tube.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;watch?v=&lt;/span&gt;&lt;span class="forcewrap"&gt;6Kr-7RKErcM&lt;/span&gt;&lt;/a&gt; Andrei 
 &lt;a rel="nofollow" href="https://www.reddit.com/r/programming/comments/3s9cfe/rust_impressions_from_a_cd_programmer_part_1/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.red&lt;/span&gt;&lt;span class="forcewrap"&gt;dit.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;r/programming/&lt;/span&gt;&lt;span class="forcewrap"&gt;comments/&lt;/span&gt;&lt;span class="forcewrap"&gt;3s9cfe/&lt;/span&gt;&lt;span class="forcewrap"&gt;rust_imp&lt;/span&gt;&lt;span class="forcewrap"&gt;ressions_&lt;/span&gt;&lt;span class="forcewrap"&gt;from_a_&lt;/span&gt;&lt;span class="forcewrap"&gt;cd_programmer_&lt;/span&gt;&lt;span class="forcewrap"&gt;part_1/&lt;/span&gt;&lt;/a&gt; Ali 
Something tells me you're broken 
Sorry for the short notice, but I'll be giving an introduction to D at this month's Codeaholics meetup. Drop by if you happen to be in Hong Kong! More info here (no need for RSVP): &lt;a rel="nofollow" href="http://www.meetup.com/Codeaholics/events/226177740/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.mee&lt;/span&gt;&lt;span class="forcewrap"&gt;tup.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Codeaholics/&lt;/span&gt;&lt;span class="forcewrap"&gt;events/&lt;/span&gt;&lt;span class="forcewrap"&gt;226177740/&lt;/span&gt;&lt;/a&gt; 7pm - 9pm CoCoon 3/F, Citicorp Centre, 18 Whitfield Road, TinHau, Hong Kong 
I've followed the D project since the early days and my take is that the move to D2, completely breaking compatibility, did tremendous damage to language adoption. Not only did the language fundamentals change, but the standard library was rewritten. The comments about the GC are also spot on. Technically, D is maybe better recast as a replacement for java/c#. merlin
Walter and I are planning major marketing moves, for which there's a necessity to describe my relationship with D succinctly. People routinely introduce me as &amp;quot;co-creator of D&amp;quot; and I need to explain &amp;quot;well, D had already been created when I joined but I worked on a number of features&amp;quot; etc. Although D looks quite different now than it was in 2006, the &amp;quot;creation&amp;quot; act only happens once, so &amp;quot;co-creator&amp;quot; is inaccurate and shifts credit inappropriately. Last thing you want in PR is someone in the crowd to go &amp;quot;wait, but you didn't create it&amp;quot; and the next-to-last thing is to need to define the relationship between you and what you're selling as &amp;quot;well, it's complicated&amp;quot;. So we mulled over this for a while and we decided to go with &amp;quot;D Language Architect&amp;quot;. I'll use that henceforth. Walter will remain of course the &amp;quot;D Language Creator&amp;quot;. No need to call me that way :o). Thanks, Andrei 
Hi Please come to the London D meetup on Wednesday 18th November. We have a great talk by John Colvin on semi functional programming. We have a fantastic venue at skills matter with great facilities and free video recording capabilities. &lt;a rel="nofollow" href="http://www.meetup.com/London-D-Programmers/events/226237601/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.mee&lt;/span&gt;&lt;span class="forcewrap"&gt;tup.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;London-D-&lt;/span&gt;&lt;span class="forcewrap"&gt;Programmers/&lt;/span&gt;&lt;span class="forcewrap"&gt;events/&lt;/span&gt;&lt;span class="forcewrap"&gt;226237601/&lt;/span&gt;&lt;/a&gt; 
I think so, too, but I wonder if an opportunity was missed. In the early days of D1 there was still considerable demand for a 'better' C++. That ship has sailed, I think. 
Yeah I get that, it's just a little amusing.
&gt; Anyhow if you don't use exceptions you can still use C++, but you better not be using the standard library at all. LOL. Sorry, but no, you can't. Not unless you live in a bubble where you write all the code that goes into your compiler. Because that's what a standard language feature is: something that libraries you want to depend on use. And if your language of choice has standard features that you don't want to use, well maybe it's the wrong language for you. &gt; You can make your constructor private and expose construction/initialization via a friend static member function that returns an optional&lt;T&gt; or a variant&lt;T, ErrorCode&gt;, and then use it like: Sorry but I can only laugh at this. 
&gt; LOL. Sorry, but no, you can't. Not unless you live in a bubble where you write all the code that goes into your compiler. That is not true. Most of the C++ standard library is "exception agnostic". Those parts that aren't have tons of exception-free implementations available (with and without support for other error handling mechanisms). Most C++ third party libraries let you customize the error handling mechanism via a macro (e.g. call a function on error instead of throwing). In practice it is actually quite easy to remove exceptions from a C++ program, just redefine global operator new and use a non-throwing standard library implementation. &gt; Because that's what a standard language feature is: something that libraries you want to depend on use. And if your language of choice has standard features that you don't want to use, well maybe it's the wrong language for you. A very important aspect of C++ design is that you only pay for what you use. Exceptions, RTTI, virtual dispatch, heap allocation, reference counting... they are all opt in. If you don't need them you don't pay for them. This is particularly important when dealing with the reality that some of these features cannot be efficiently implemented for a particular architecture, and one of the reasons why C++ is so widely used. &gt; Sorry but I can only laugh at this. It's always a pleasure to make somebody laugh.
Well, I'm with him that the constructor should be so simple it cannot fail, and with you that having a separate deferred "init" method is a path to pain. The pattern I'm using these days is this... * Where possible, construct objects that once constructed are immutable. * If you need logic in performing the construction, move that logic out to a factory method / class. Personally I can't think of anything that could go wrong in a destructor that I could sensible handle (without delivering a new version of the program) anyway.... But that said, Exceptions are a bit of a failure (cough) in my view. A class exists to protect it's invariant. It's invariant holds true at the end of the constructor, start and end of every public method and at the start of the destructor. So a public method can happily break the invariant, provided it puts it back together before it exits. If an exception can literally launch the flow of control out of the method from every point within the method..... there is simply no way to ensure that the instances invariant is put back together, and hence no way to safely continue to use that instance. You'd need some form of transactional commit / rollback mechanism around every method!
&gt; Personally I can't think of anything that could go wrong in a destructor that I could sensible handle (without delivering a new version of the program) anyway.... Generally one cannot handle errors on releasing a resource. If closing a file handle, freeing some memory, unlocking a mutex, ... fails, then what? You can either assume something like "the file handle must already have been closed" and keep going or just fail. &gt; If an exception can literally launch the flow of control out of the method from every point within the method..... there is simply no way to ensure that the instances invariant is put back together, and hence no way to safely continue to use that instance. Of course there are. &gt; You'd need some form of transactional commit / rollback mechanism around every method! Indeed. That is called "strong exception safety/guarantee" in the C++ standard. It is actually "pretty easy" to achieve in practice iff you have non throwing moves. In a nutshell you copy the object, operate on the copy, and on success you swap it with the original(*). If something fails, the swap never happens, and the original state is preserved. Thinking about this "transactionally" is actually a pretty on spot. Obviously copying can be expensive. This is what the `noexcept` operator is there for. You can use it to query if anything you want to do can throw. If nothing can throw, you can just work on the original object safely. To me it is useful to think about this as an algorithmic optimization. For example `vector&lt;T&gt;::push_back` provides the strong exception safety guarantee. Pushing a new object might need reallocating more memory. If moving cannot throw, it allocates new memory (which can fail), and moves all the objects from the old memory to the new one (if allocation did not fail). If allocation fails, the old state is preserved. However, if moving can throw, it allocates new memory and copies all the objects to the new memory. If allocating new memory and copying the objects succeeds, then it swaps the old memory with the new one (which cannot fail), and deallocates the old memory (which cannot fail either). If allocating new memory fails, the old state is preserved. If copying an object failed, then the new memory is deallocated, and the old state of the vector is also preserved. (*) swap is noexcept if move is noexcept
&lt;a rel="nofollow" href="http://dconf.org/2016/registration.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dconf.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;2016/&lt;/span&gt;&lt;span class="forcewrap"&gt;registra&lt;/span&gt;&lt;span class="forcewrap"&gt;tion.html&lt;/span&gt;&lt;/a&gt; The DConf 2016 registration is now open. Early bird registration is $250, regular registration (after we publish the schedule on Feb 29) is $400. Those of you who cannot attend are welcome to figure as individual sponsors for $50. We are in the process of defining corporate sponsorship packages. Please contact the Foundation at dconf2016@digitalmars.com for details. Thanks, Andrei 
&lt;a rel="nofollow" href="http://forum.dlang.org/post/uesnmkgniumswfclwbgt@forum.dlang.org"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;post/&lt;/span&gt;&lt;span class="forcewrap"&gt;uesnmkgniu&lt;/span&gt;&lt;span class="forcewrap"&gt;mswfclwbgt@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org&lt;/span&gt;&lt;/a&gt; 
I'm extremely surprised by the Julia donation. That is curious. 
Scripting languages are incredibly popular.
Someone is shadow banned.
Is that what it means when the comment count does not mach the actual number of comments? 
Academics and scientists would be my guess.
I'm pleased to announce that Jan Knepper has gotten us some proper certificates now, and dlang.org and digitalmars.com are now fully https! 
For those that missed the first announcement (&lt;a rel="nofollow" href="http://forum.dlang.org/thread/jiucsrcvkfdzwinqpzxg@forum.dlang.org?page=1"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;thread/&lt;/span&gt;&lt;span class="forcewrap"&gt;jiucsrcvkf&lt;/span&gt;&lt;span class="forcewrap"&gt;dzwinqpzxg@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.&lt;/span&gt;&lt;span class="forcewrap"&gt;org?page=1&lt;/span&gt;&lt;/a&gt;), SuperStruct is a struct that acts like a class; basically, a value type that exposes a common interface from its 'subtypes'. Code on github: &lt;a rel="nofollow" href="https://github.com/rcorre/superstruct"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;rcorre/&lt;/span&gt;&lt;span class="forcewrap"&gt;superstruct&lt;/span&gt;&lt;/a&gt; Anyways, I was having enough fun with this slightly ridiculous idea to make a v0.20, so with no further ado, here's whats new: Operators get passed through just like any other common members. You can try to cast a SuperStruct to a subtype (throws on failure). If members have a common signature but uncommon return types, the member _is_ forwarded and the return type is a SuperStruct of the possible return types (this means it has any behavior common to the return types). Thanks to Timon Gehr for the suggestion! (&lt;a rel="nofollow" href="http://forum.dlang.org/thread/jiucsrcvkfdzwinqpzxg@forum.dlang.org?page=2#post-n09600:241gel:241:40digitalmars.com"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;thread/&lt;/span&gt;&lt;span class="forcewrap"&gt;jiucsrcvkf&lt;/span&gt;&lt;span class="forcewrap"&gt;dzwinqpzxg@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.&lt;/span&gt;&lt;span class="forcewrap"&gt;org?page=&lt;/span&gt;&lt;span class="forcewrap"&gt;2#post-&lt;/span&gt;&lt;span class="forcewrap"&gt;n09600:&lt;/span&gt;&lt;span class="forcewrap"&gt;241gel:241:&lt;/span&gt;&lt;span class="forcewrap"&gt;40digita&lt;/span&gt;&lt;span class="forcewrap"&gt;lmars.com&lt;/span&gt;&lt;/a&gt;) A SuperStruct can now satisfy a range interface (this required using mixed-in members instead of opDispatch). Create a SuperStruct on the fly with pick or pickAmong (similar to std.range's choose/chooseAmong, but works for any types, not just ranges). Example: unittest { import std.range, std.algorithm, std.container; alias Container(T) = SuperStruct!(SList!T, Array!T); Container!int slist = SList!int(); // We can call any members that are common among containers slist.insert([1,2,3,4]); assert(slist.front == 1); // opSlice is supported on all the subtypes, but each returns a different type // Container.opSlice will return a SuperStruct of these types auto slice = slist[]; // [1,2,3,4] assert(slice.front == 1); slice.popFront(); // [2,3,4] assert(slice.front == 2); // as slice is a SuperStruct of range types, it still works as a range slist.insert(slice); // [2,3,4] ~ [1,2,3,4] &lt;span class="forcewrap"&gt;assert(&lt;/span&gt;&lt;span class="forcewrap"&gt;slist[].&lt;/span&gt;&lt;span class="forcewrap"&gt;equal([2,3,4,&lt;/span&gt;&lt;span class="forcewrap"&gt;1,2,3,4]));&lt;/span&gt; } 
It isn't really a scripting language and Intel has taken an interest in it. Intel can make fast processors but a much bigger problem is getting people to write software that comes anywhere close to taking advantage of them.
Hello all, Recently I realized that TestU01 had been packaged in the latest Ubuntu, so for fun, I thought I'd have a little play with it and see if I could set up something to trial Phobos' uniform random number generators. The (very, VERY) provisional results are here: &lt;a rel="nofollow" href="https://github.com/WebDrake/dtestu01"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;WebDrake/&lt;/span&gt;&lt;span class="forcewrap"&gt;dtestu01&lt;/span&gt;&lt;/a&gt; Note that these are not bindings in the conventional sense; I took a deliberate decision to expose as little of the library as possible, with the goal being only to expose those things necessary to pass Phobos RNGs into the test batteries. Of course, I will happily consider extending the bindings (or accepting patches to do so) if anyone has a need for it. It's not yet implemented as a dub package, but will be in the not-too-distant future. The point here is that TestU01 provides a state-of-the-art means to validate the statistical quality of pseudo-random number generators, i.e. the extent to which these deterministic algorithms effectively mimic randomness. These can be used to help ensure that Phobos implementations of RNG algorithms are up to scratch, and that the functionality we provide covers an appropriate range of algorithms quality-wise. I'll continue to work on this as and when time allows; the results will probably be sporadic, but I hope the current public work will be useful to someone in the meantime. Thanks &amp;amp; best wishes, -- Joe 
So I have foolishly started my first meetup, which is for D. &lt;a rel="nofollow" href="http://www.meetup.com/D-Programming/"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.mee&lt;/span&gt;&lt;span class="forcewrap"&gt;tup.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D-Programming/&lt;/span&gt;&lt;/a&gt; I'm still pretty much a newb at D, and the more I read the forums the more overwhelmed I am, but I thought it'd be good to catch up with any locals and see what people do. I'll probably try and get the first meetup going in the New Year, so any suggestions of topics will be greatly appreciated. :P Brian 
Hi, there is a new release of Visual D available at &lt;a rel="nofollow" href="http://rainers.github.io/visuald/visuald/StartPage.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;rainers.&lt;/span&gt;&lt;span class="forcewrap"&gt;github.io/&lt;/span&gt;&lt;span class="forcewrap"&gt;visuald/&lt;/span&gt;&lt;span class="forcewrap"&gt;visuald/&lt;/span&gt;&lt;span class="forcewrap"&gt;StartPage.html&lt;/span&gt;&lt;/a&gt; This time there is no major new feature to announce, but quite a few improvements to * VS 2015 support * building with LDC * configuration dialogs * C++ to D conversion wizard See &lt;a rel="nofollow" href="http://rainers.github.io/visuald/visuald/VersionHistory.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;rainers.&lt;/span&gt;&lt;span class="forcewrap"&gt;github.io/&lt;/span&gt;&lt;span class="forcewrap"&gt;visuald/&lt;/span&gt;&lt;span class="forcewrap"&gt;visuald/&lt;/span&gt;&lt;span class="forcewrap"&gt;VersionHi&lt;/span&gt;&lt;span class="forcewrap"&gt;story.html&lt;/span&gt;&lt;/a&gt; for the complete list of changes and the version history. Visual D is a Visual Studio extension that adds D language support to VS2005-2015. It is written in D, its source code can be found on github: &lt;a rel="nofollow" href="https://github.com/D-Programming-Language/visuald"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D-Programming-&lt;/span&gt;&lt;span class="forcewrap"&gt;Language/&lt;/span&gt;&lt;span class="forcewrap"&gt;visuald&lt;/span&gt;&lt;/a&gt;. Rainer 
First beta for the 2.069.2 point release. &lt;a rel="nofollow" href="http://dlang.org/download.html#dmd_beta"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;download.&lt;/span&gt;&lt;span class="forcewrap"&gt;html#dmd_beta&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://dlang.org/changelog/2.069.2.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;changelog/&lt;/span&gt;&lt;span class="forcewrap"&gt;2.069.2.html&lt;/span&gt;&lt;/a&gt; Please report any bugs at &lt;a rel="nofollow" href="https://issues.dlang.org"&gt;https://issues.dlang.org&lt;/a&gt; -Martin 
This extension was the main reason I chose D over Rust for a new project. It's much more comfortable than any other combination of editor+ racer for rust development.
Is there anyone willing to do the videos 18sex website? Like Playboy. I want to find a partner to do the world's largest 18sex video site. 
You could use the minimal runtime that's floating around and the core.stdc module, and add in the rest of the runtime as you find you can afford it. I'd recommend taking the opposite approach, however; stripping away bells and whistles as they become issues. But you know your problem domain better than I, of course. Keep us posted, as this does sound interesting. EDIT: Found it: http://arsdnet.net/dcode/minimal.d courtesy of local D sorcerer /u/adr86. Not sure if it works with recent compilers but I've used it before for proofs of concept.
Thanks for your answer. I'll mess around a little bit more and report back.
There's also a "betterC" switch you may want to look into. I don't know the exact details of it.
It seems like it doesn't exist anymore. The reference compiler doesn't list it as an option, nor the documentation included.
Due to a minor mix up at the end of an otherwise enjoyable process, I wasn't notified that 'Learning D' was released on Nov 27. Today, I finally got that notification. Despite there already being a thread on the topic here in this forum, please forgive me for taking the opportunity to make my &amp;quot;official&amp;quot; announcement :) 'Learning D' is available from the publisher's website[1], where a sample[2] can also be viewed for those who want to try before they buy. It's also available from Amazon[3]. Thanks to Walter for kindly providing a Foreword and to all the reviewers for their valuable feedback. The source will be downloadable from the publisher's website, but I intend to put up a repository on GitHub to make sure it stays up to date. I'll be posting more about the book on my blog[4] in the near future. If you know any C-family programmers who are interested in learning D, this book was written with them in mind. I hope people find it useful. [1] &lt;a rel="nofollow" href="https://www.packtpub.com/application-development/learning-d"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.pack&lt;/span&gt;&lt;span class="forcewrap"&gt;tpub.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;application-&lt;/span&gt;&lt;span class="forcewrap"&gt;development/&lt;/span&gt;&lt;span class="forcewrap"&gt;learning-d&lt;/span&gt;&lt;/a&gt; [2] &lt;a rel="nofollow" href="https://www.packtpub.com/packtlib/book/Application%20Development/9781783552481"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.pack&lt;/span&gt;&lt;span class="forcewrap"&gt;tpub.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;packtlib/book/&lt;/span&gt;&lt;span class="forcewrap"&gt;Application%&lt;/span&gt;&lt;span class="forcewrap"&gt;20Development/&lt;/span&gt;&lt;span class="forcewrap"&gt;9781783552481&lt;/span&gt;&lt;/a&gt; [3] &lt;a rel="nofollow" href="http://www.amazon.com/Learning-D-Michael-Parker/dp/1783552484/ref=as_li_ss_tl?ie=UTF8&amp;qid=1448948127&amp;sr=8-1&amp;keywords=learning+d&amp;linkCode=sl1&amp;tag=aldacron-20&amp;linkId=b0490265742705a2e3dd6fd25536b006"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.ama&lt;/span&gt;&lt;span class="forcewrap"&gt;zon.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Learning-D-&lt;/span&gt;&lt;span class="forcewrap"&gt;Michael-&lt;/span&gt;&lt;span class="forcewrap"&gt;Parker/&lt;/span&gt;&lt;span class="forcewrap"&gt;dp/1783552484/&lt;/span&gt;&lt;span class="forcewrap"&gt;ref=as_li_&lt;/span&gt;&lt;span class="forcewrap"&gt;ss_tl?ie=&lt;/span&gt;&lt;span class="forcewrap"&gt;UTF8&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;qid=144&lt;/span&gt;&lt;span class="forcewrap"&gt;8948127&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;sr=8-1&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;keywords=&lt;/span&gt;&lt;span class="forcewrap"&gt;learning+d&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;linkCode=sl1&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;tag=ald&lt;/span&gt;&lt;span class="forcewrap"&gt;acron-20&amp;amp;&lt;/span&gt;&lt;span class="forcewrap"&gt;linkId=&lt;/span&gt;&lt;span class="forcewrap"&gt;b049026&lt;/span&gt;&lt;span class="forcewrap"&gt;5742705a&lt;/span&gt;&lt;span class="forcewrap"&gt;2e3dd6fd&lt;/span&gt;&lt;span class="forcewrap"&gt;25536b006&lt;/span&gt;&lt;/a&gt; [4] &lt;a rel="nofollow" href="http://dblog.aldacron.net"&gt;http://dblog.aldacron.net&lt;/a&gt; 
You'll probably want http://arsdnet.net/dcode/minimal.zip (zip instead of d) which I have updated more recently and has enough stuff to actually build x86 stuff - either naked binaries on Linux or a multiboot bare-metal executable you can run straight on grub, while keeping a pretty good chunk of the language functional. (The standalone minimal.d has even fewer language feature support than just using C - structs will even give you pain (though they are doable, just weird) whereas the zip even has class and exception support. Compiles to about 30 KB instead of 3 KB, but I think the language features are worth it!)
He started with my minimal.zip http://arsdnet.net/dcode/minimal.zip (some day I might actually put it on github, the reason it is just a random zip on my website though is that it is just random code I was toying with some day... no warranty :P ) which you can try too. Vild went 64 bit whereas I focused on 32 bit for the bare metal parts, but the language bits are basically the same. If you exclude the bare metal magic, it will run on standard Linux too. Though on standard Linux, you might as well use the standard druntime. It is 180 KB instead of 30 KB, but everything just works on it, so much easier.
Depending, you may be able to stick with using @nogc on your functions and core.stdc modules for the C library. I don't do this myself so I don't know what it will look like, but with this method you'll have an opportunity to try out the D libs if you desire.
We're over 20% full and seats are going fast! We planned to send an announcement when we're 50% sold out. However, this time around registrations are coming quite a bit quicker than before so we thought we'd keep you posted earlier. At this time DConf is over 20% sold out. That's only three weeks after opening early bird registration and without having announced the program. (Which, of course, will be great.) The point here is, if you're considering going to DConf, you may want to secure your early bird registration now at &lt;a rel="nofollow" href="http://dconf.org/2016/registration.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dconf.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;2016/&lt;/span&gt;&lt;span class="forcewrap"&gt;registra&lt;/span&gt;&lt;span class="forcewrap"&gt;tion.html&lt;/span&gt;&lt;/a&gt;. On another vein, we're pleased to announce a book signing session by D book authors. Kai Nacke, Mike Parker, Ali Çehreli, and Andrei Alexandrescu will sign their respective books. Bring your copy (it better be dog-eared) or buy one on site (limited quantities available). Details forthcoming. Looking forward to seeing you at DConf! Andrei 
Hello, DlangIDE is getting close to usable. DlangIDE is and IDE for D programming language written in D using DlangUI library. Project page: &lt;a rel="nofollow" href="https://github.com/buggins/dlangide"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;buggins/&lt;/span&gt;&lt;span class="forcewrap"&gt;dlangide&lt;/span&gt;&lt;/a&gt; To try, use `dub fetch dlangide &amp;amp;&amp;amp; dub run dlangide` try to create and run DlangUI Helloworld project, or open Tetris project from workspaces/tetris. Supported platforms: win32, linux, osx. DlangIDE uses DUB to build and run projects, DUB .json as project format, DCD for code completion. For code completion / go to references functionality, you need to build dcd-server and dcd-client executables from &lt;a rel="nofollow" href="https://github.com/Hackerpilot/DCD.git"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;DCD.git&lt;/span&gt;&lt;/a&gt; and put them to some of PATH dirs. Recent changes: - New Project wizard - New source file wizard - Add / remove project files, refresh workspace - A lot of bugfixes Current activities: - GDB MI debugger support - integration of DML GUI builder (Delphi like) DlangUI: &lt;a rel="nofollow" href="https://github.com/buggins/dlangui"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;buggins/&lt;/span&gt;&lt;span class="forcewrap"&gt;dlangui&lt;/span&gt;&lt;/a&gt; Recent DlangUI changes: - MonoD and VisualD projects for development under Windows, Linux, OSX. - pure X11 backend implemented to avoid SDL dependency - dmledit app for editing DML - spreadsheet example (excel like app, just started) - a lot of bugfixes Try dlangui:tetris, dlangui:example1, dlangui:dmledit examples. Best regards, Vadim 
We already have it more or less. GDC for example already compiles for Raspberry PI happily. Now iPhone and Android support still has a long way to go. But it now mostly works at least on Android. Reference about Android: http://forum.dlang.org/post/ycvtkeiyffhaixxpzwuj@forum.dlang.org There is another thread that deals with testing it out on different devices with majority passing.
Jobs ?
For me it's always been a decent/useable GUI library. I use the language for small script like projects all the time, but anything large that I do requires a user interface. There are a few out there but no killer ones so I always run back to C++/QT or C#. It also seems that the language has no direction, Small insignificant features will get patched and improved when other glaring holes exist. It's almost more like a herd of pet projects, which I guess is understandable for any open source project. IDE's and tooling have come a long ways, it shouldn't be hard to find something you like any more.
There needs to be one of those uncle sam pictures that say "we need you!" but for D. 
More users and more libraries. And more people mentioning it when relevant. It is already better than all the alternatives, language design wise. But the other languages have more users and these users write more libraries in a way that becomes critical for some projects. A library for writing excel files in Linux was my personal issue last time. I wrote that program in C++.
Yes thank you. Trying to make a game auto updater and I tried like 4 GUI libraries couldn't get any to work properly 
https://github.com/buggins/dlangui This one is starting to look promising, I have only played around with it a bit but haven't found any crazy issues.
Probably tried it, I think this is the one that partly worked for me then ended up being useless because I couldn't make a progress bar work. I just need a damn progress bar for a file download but it's disappointing that it seems to be this difficult. I shall try again and post results!
ya I'm pretty sure this one doesn't have a status bar widget either. Just one of those annoying things most other languages you would have 30 options and it would take 4 lines of code.
It aggravates me because I only used D since a friend worships it like the best thing since Capn Crunch. It sucks because he linked me the GUI list, and there's like 5 to choose from, and none were complete or stable. If only there was just one simple one that was solid. I'd be down to help anyone accomplish this task haha. That or we just need a good tutorial? Setting up D compilation environment for these GUI libraries was such a stressful nightmare. 
it is a stressful nightmare, if you are using windows (which is a huge after thought in the D world) you need to hunt forever to figure out the commandline switch to not have a command prompt come up with your app. Things like that shouldn't happen.
With uncle Walter ? 
I appreciate your feedback. Indeed I sadly do not have the time to wrangle with new things to get them working at this point; I need to ship products. I appreciate that D doesn't have the kind of backing that Rust and Go have, for example - large team and funding, which is a real pity because from what little I've seen I think D takes the fewest steps from "what we know" (C-like) to "what a great many of us would like", unlike some other new languages. In an alternate reality where I'm not overloaded, I'm sure I have volunteered to work on D...
Basically, a reason for people to use something *despite* it being written with D.
Try DUB + GtkD simply works (on windows just now need bit little more stuff but it's related to a bug on OPTLINK ) See here : https://github.com/gtkd-developers/GtkD/issues/133#issuecomment-160795414
&gt;More users and more libraries Exactly. I've finally started a new D project, and I kind of feel on my own. Asking Google doesn't give many results. Most libraries aren't updated recently. There's an obvious lack of users. The question would be then... how to attract enthousiast users?
Here is an implementation of MurmurHash [1] for D. &lt;a rel="nofollow" href="http://dpaste.dzfl.pl/1b94ed0aa96e"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dpaste.&lt;/span&gt;&lt;span class="forcewrap"&gt;dzfl.pl/&lt;/span&gt;&lt;span class="forcewrap"&gt;1b94ed0aa96e&lt;/span&gt;&lt;/a&gt; I'll do a proper pull request later on for addition to std.digest if the community feels like it's a valuable addition. Guillaume -- 1 - &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/MurmurHash"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;en.wikip&lt;/span&gt;&lt;span class="forcewrap"&gt;edia.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;wiki/Mu&lt;/span&gt;&lt;span class="forcewrap"&gt;rmurHash&lt;/span&gt;&lt;/a&gt; 
As you might already know from the last sprint review (&lt;a rel="nofollow" href="http://forum.dlang.org/post/56592679.3010604@dawg"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;post/56592679.&lt;/span&gt;&lt;span class="forcewrap"&gt;3010604@dawg&lt;/span&gt;&lt;/a&gt;.), we've setup a server to build nightlies. The service is still in a test phase but seems to work steadily. You can try it using the install script curl -fsSL &lt;a rel="nofollow" href="https://builds.dawg.eu/install.sh"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;builds.&lt;/span&gt;&lt;span class="forcewrap"&gt;dawg.eu/&lt;/span&gt;&lt;span class="forcewrap"&gt;install.sh&lt;/span&gt;&lt;/a&gt; | bash -s dmd-nightly or by simply downloading the latest archive for your platform. &lt;a rel="nofollow" href="https://builds.dawg.eu/dmd-nightly/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;builds.&lt;/span&gt;&lt;span class="forcewrap"&gt;dawg.eu/&lt;/span&gt;&lt;span class="forcewrap"&gt;dmd-nightly/&lt;/span&gt;&lt;/a&gt; 
There was a time when the forums would be filled with the same old names for months on end, but those days are long gone. DMD downloads are also rather higher than they used to be. The "obvious lack of users" isn't quite so obvious to me. That doesn't mean we can't use more, but I've been hearing doom and gloom about D's user-base for years. It has grown and will grow. I'm more optimistic about D now than I ever was.
dstructtotypescript is a program that created typescript interfaces/enums out of D structs/enums. &lt;a rel="nofollow" href="https://github.com/burner/dstructtotypescript"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;burner/&lt;/span&gt;&lt;span class="forcewrap"&gt;dstructto&lt;/span&gt;&lt;span class="forcewrap"&gt;typescript&lt;/span&gt;&lt;/a&gt; The web framework vibe.d was very good at serializing data into json. Typescript allows the user to have a typed version of javascript. Which means the user has to keep two version of the same structure in sync. That is tedious and error prone task. dstructtotypescript alleviates this problem as its automatically generates the typescript interfaces for the user. ## Example Given a D two structs (test/teststruct.d): ```D module test.teststruct; struct Other { string id; } struct Obj { string name; int id; float value; int[] ids; int[5][] ids2; Other other; Other[] others; Other[][5][] others2; bool[][5] bools; } enum Colors { red = 0, blue = 1, green = 4 } ``` ```bash dstructtotypescript -i test/teststruct.d -p test/testfileprefix.ts -s Obj -s Colors -s Other -d ``` will create the following typescript interfaces: ``` // THIS FILE WAS GENERATED DO NOT MODIFY /// &amp;lt;reference path=&amp;quot;teststructprefix.ts&amp;quot; /&amp;gt; interface Obj { name: string; id: number; value: number; ids: number[]; ids2: number[][]; other: Other; others: Other[]; others2: Other[][][]; bools: boolean[][]; } enum Colors { red = 0, blue = 1, green = 4 } interface Other { id: string; } ``` test/testfileprefix.ts is a file which contains is prefixed to the resulting .ts file 
I don't think you meant to post a whole bunch of html.
thanks for the feedback, your optimism is recomforting, as D is the chosen language for my next project :)
Hi D Community, I am currently working on a cloud project where we intend to reinvent a lot of the old, less-than-optimal technologies. Among the technologies we are working on is a new general purpose network protocol called IAP. IAP comes with a general purpose binary data format called ION (IAP Object Notation). ION is similar to MessagePack and CBOR, but with a few additions. ION has a table mode which can be used to model tables (like CSV files) efficiently, and which can also be used in larger object graphs. Our early serialized length + performance benchmarks look promising (tables can be down to 1/5 of JSON, and up to 2 x the speed of parsing CBOR). ION can be used both inside IAP, but also separately with HTTP and in data and log files. We already have a working toolkit in Java (we have Java backgrounds), but since we really find D interesting, we would like to make a D toolkit too. Since we are rather new to D, would anyone be interested in helping us a bit out making such a library? We can probably do the coding ourselves, but might need some tips about how to pack it nicely into a D library which can be used with Dub etc. 
code here: &lt;a rel="nofollow" href="http://arsdnet.net/dcode/minesweeper.d"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;arsdnet.net/&lt;/span&gt;&lt;span class="forcewrap"&gt;dcode/&lt;/span&gt;&lt;span class="forcewrap"&gt;minesweeper.d&lt;/span&gt;&lt;/a&gt; Here's a bit of fun. I saw this article on reddit: &lt;a rel="nofollow" href="http://rkoutnik.com/articles/How-I-Interview.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;rkoutnik.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;articles/&lt;/span&gt;&lt;span class="forcewrap"&gt;How-I-&lt;/span&gt;&lt;span class="forcewrap"&gt;Interview.html&lt;/span&gt;&lt;/a&gt; Short summary: when interviewing people for a code position, this author gives the candidate one hour to write as much as minesweeper as they can. He says nobody has ever finished it in an hour and nobody is expected to, but he just wants to see how far they get. Nobody has finished it in an hour? CHALLENGE ACCEPTED. I decided to give it a go over the last hour and hacked this together: &lt;a rel="nofollow" href="http://arsdnet.net/dcode/minesweeper.d"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;arsdnet.net/&lt;/span&gt;&lt;span class="forcewrap"&gt;dcode/&lt;/span&gt;&lt;span class="forcewrap"&gt;minesweeper.d&lt;/span&gt;&lt;/a&gt; It depends on my simpledisplay.d and color.d from here: &lt;a rel="nofollow" href="https://github.com/adamdruppe/arsd"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;adamdru&lt;/span&gt;&lt;span class="forcewrap"&gt;ppe/arsd&lt;/span&gt;&lt;/a&gt; Download just those two files, simpledisplay.d and color.d, to your current directory with minesweeper.d and compile: dmd minesweeper.d simpledisplay.d color.d And play the game! At least on Windows and Linux. On Mac, you need to install XQuartz since I don't have a working Cocoa implementation in simpledisplay.d right now. Fear not, it is on my todo list for 2016, so it will be there eventually. My game isn't exactly fancy.... but it is playable. here's a screenshot: &lt;a rel="nofollow" href="http://arsdnet.net/minesweeper.png"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;arsdnet.net/&lt;/span&gt;&lt;span class="forcewrap"&gt;mineswe&lt;/span&gt;&lt;span class="forcewrap"&gt;eper.png&lt;/span&gt;&lt;/a&gt; I prolly could have used a downloaded icon set and made it look prettier, but I didn't want to look for one nor deal with copyright so I just drew text and rectangles. Now, the interviewer used javascript, but I wanted another example for simpledisplay.d, so I used that instead. In JS, given the time constraint, I think I would have done it as an array of &amp;lt;img&amp;gt; tags with an onclick handler on the parent node which changes the src to a particular icon, or a class name for a css sprite. whatever. But the JS algorithm would be basically the same and I suspect I could do it in a similar amount of time since it is a simple program anyway. I just like D better. I had to look up the flood fill which took seconds (I played real minesweeper and recognized it was the same algorithm MS Paint uses. I started to hack it myself but realized that I didn't really know it that well and figuring it out myself from principles, while doable, would likely eat my remaining time right there, so I Binged &amp;quot;paint fill algorithm&amp;quot;. Wikipedia popped right up with a description was good enough to run with: &lt;a rel="nofollow" href="https://en.wikipedia.org/wiki/Flood_fill"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;en.wikip&lt;/span&gt;&lt;span class="forcewrap"&gt;edia.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;wiki/Fl&lt;/span&gt;&lt;span class="forcewrap"&gt;ood_fill&lt;/span&gt;&lt;/a&gt; I implemented the simple recursive version as a template with a few parameters to fit my needs here, while also being usable in my other side project, which has a MS Paint like graphics editor and needs this feature anyway! Anyway, he rest was pretty straightforward. The complete game has a timer, a scoreboard, a UI for selecting size, etc. I have functions that could do that, but didn't have time to actually put on more UI than the basic game with mouse clicks.... ...so indeed, I didn't finish it either. Challenge failed :( But since it is playable i'm calling this a pretty decent success anyway! And now I have one more example to show off with simpledisplay.d, which I will might add to the documentation &lt;a rel="nofollow" href="http://arsdnet.net/arsd/simpledisplay.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;arsdnet.net/&lt;/span&gt;&lt;span class="forcewrap"&gt;arsd/simple&lt;/span&gt;&lt;span class="forcewrap"&gt;display.html&lt;/span&gt;&lt;/a&gt; along with the existing Pong game. I didn't use any really special D features there, so not really a language showcase - like I said before, if I was doing it in Javascript, I probably would have done it largely the same - but hey, it is D, so I will post it here :) 
I think Adam normally develops for 32 bit, so for something quick like this it likely would have issues on 64 bit. You could try -m32 as a compiler flag, assuming your system is actually set up to be able to run 32 bit programs.
Hi everyone, LDC 0.17.0-alpha1, the LLVM-based D compiler, is available for download! This release is based on the 2.068.2 frontend and standard library and supports LLVM 3.5-3.7. Don't miss to check if your preferred system is supported by this release. We also have a Win64 compiler available! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: &lt;a rel="nofollow" href="http://forum.dlang.org/thread/zwoixfjuagmwvlyatpfk@forum.dlang.org"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;thread/&lt;/span&gt;&lt;span class="forcewrap"&gt;zwoixfjuag&lt;/span&gt;&lt;span class="forcewrap"&gt;mwvlyatpfk@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org&lt;/span&gt;&lt;/a&gt; Regards, Kai 
ah. that would explain it. Thank you!
Hello, A new alpha of CE is available: The two latest releases put the focus on the editor: - identifier markup improved. - split view. - macro recording state clearly indicated. - fix (highlighter, cache restoration when workspace is reloaded). - more shortcuts (prev/next location, ddoc, call tips, macro recording, synchro-edit) - more options. Also it's now possible to specify the favorite compiler in the applications options - for DUB: dmd, gdc and ldc are obviously supported. - for the CE projects (aka &amp;quot;native projects&amp;quot;): dmd and ldc are supported. A new widget, &amp;quot;Dfmt commander&amp;quot;, has been added. It's a GUI for Dmft. It works automatically on the selected editor and it processes documents in memory only. Download links and detailed changelog: &lt;a rel="nofollow" href="https://github.com/BBasile/Coedit/releases/tag/2_alpha_4"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;BBasile/&lt;/span&gt;&lt;span class="forcewrap"&gt;Coedit/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/2_alpha_4&lt;/span&gt;&lt;/a&gt; (see also previous release since I haven't announced it here). 
&lt;a rel="nofollow" href="https://www.reddit.com/r/programming/comments/3xq2ul/codedive_2015_talk_three_cool_things_about_d/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.red&lt;/span&gt;&lt;span class="forcewrap"&gt;dit.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;r/programming/&lt;/span&gt;&lt;span class="forcewrap"&gt;comments/&lt;/span&gt;&lt;span class="forcewrap"&gt;3xq2ul/&lt;/span&gt;&lt;span class="forcewrap"&gt;codedive_2015_&lt;/span&gt;&lt;span class="forcewrap"&gt;talk_three_&lt;/span&gt;&lt;span class="forcewrap"&gt;cool_things_&lt;/span&gt;&lt;span class="forcewrap"&gt;about_d/&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://www.facebook.com/dlang.org/posts/1192267587453587"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.face&lt;/span&gt;&lt;span class="forcewrap"&gt;book.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;posts/&lt;/span&gt;&lt;span class="forcewrap"&gt;1192267&lt;/span&gt;&lt;span class="forcewrap"&gt;587453587&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://twitter.com/D_Programming/status/678989872367988741"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;twitter.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D_Programming/&lt;/span&gt;&lt;span class="forcewrap"&gt;status/&lt;/span&gt;&lt;span class="forcewrap"&gt;67898987&lt;/span&gt;&lt;span class="forcewrap"&gt;2367988741&lt;/span&gt;&lt;/a&gt; Andrei 
Hi, I will write GEMM and GEMV families of BLAS for Phobos. Goals: - code without assembler - code based on SIMD instructions - DMD/LDC/GDC support - kernel based architecture like OpenBLAS - 85-100% FLOPS comparing with OpenBLAS (100%) - tiny generic code comparing with OpenBLAS - ability to define user kernels - allocators support. GEMM requires small internal allocations. - @nogc nothrow pure template functions (depends on allocator) - optional multithreaded - ability to work with `Slice` multidimensional arrays when stride between elements in vector is greater than 1. In common BLAS matrix strides between rows or columns always equals 1. Implementation details: LDC all : very generic D/LLVM IR kernels. AVX/2/512/neon support is out of the box. DMD/GDC x86 : kernels for 8 XMM registers based on core.simd DMD/GDC x86_64: kernels for 16 XMM registers based on core.simd DMD/GDC other : generic kernels without SIMD instructions. AVX/2/512 support can be added in the future. References: [1] Anatomy of High-Performance Matrix Multiplication: &lt;a rel="nofollow" href="http://www.cs.utexas.edu/users/pingali/CS378/2008sp/papers/gotoPaper.pdf"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.cs.&lt;/span&gt;&lt;span class="forcewrap"&gt;utexas.edu/&lt;/span&gt;&lt;span class="forcewrap"&gt;users/pingali/&lt;/span&gt;&lt;span class="forcewrap"&gt;CS378/2008sp/&lt;/span&gt;&lt;span class="forcewrap"&gt;papers/&lt;/span&gt;&lt;span class="forcewrap"&gt;gotoPaper.pdf&lt;/span&gt;&lt;/a&gt; [2] OpenBLAS &lt;a rel="nofollow" href="https://github.com/xianyi/OpenBLAS"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;xianyi/&lt;/span&gt;&lt;span class="forcewrap"&gt;OpenBLAS&lt;/span&gt;&lt;/a&gt; Happy New Year! Ilya 
&amp;quot;Damage Control&amp;quot; is a game inspired by one of my old favorite SNES games, Rampart (ok, technically an arcade game, but I had it on SNES). The project is on Github: &lt;a rel="nofollow" href="https://github.com/rcorre/damage_control"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;rcorre/&lt;/span&gt;&lt;span class="forcewrap"&gt;damage_control&lt;/span&gt;&lt;/a&gt; Its very incomplete, but if you don't mind spending a few minutes trying it out I'd really appreciate it. You can grab a binary from the Github releases page or try to build it yourself. The content building is a bit involved, but if you just want to build the source you can copy the content folder from a release package. It is made with Allegro using the DAllegro bindings. The linux build is statically linked to Allegro so you shouldn't to install it, but the rest of the dependencies are shared. Let me know if any are problematic. The Windows build just comes packaged with a few dlls, including allegro-monolith. Any feedback is appreciated -- either drop a comment here or file an issue on Github. It will write save data and settings to &amp;quot;~/.config/damage_control&amp;quot; or &lt;span class="forcewrap"&gt;&amp;quot;%APPDATA%\&lt;/span&gt;&lt;span class="forcewrap"&gt;local\damage_&lt;/span&gt;&lt;span class="forcewrap"&gt;control&amp;quot;.&lt;/span&gt; You can change this using the --savedir flag. There's no included tutorial as I'm hoping the gameplay will be pretty self-evident (let me know if it isn't!). 
First beta for the 2.070.0 release. Still a few things missing from the changelog, there is a new package std.experimental.ndslice, and native (DWARF based) exception handling on linux. &lt;a rel="nofollow" href="http://dlang.org/download.html#dmd_beta"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;download.&lt;/span&gt;&lt;span class="forcewrap"&gt;html#dmd_beta&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://dlang.org/changelog/2.070.0.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;changelog/&lt;/span&gt;&lt;span class="forcewrap"&gt;2.070.0.html&lt;/span&gt;&lt;/a&gt; Please report any bugs at &lt;a rel="nofollow" href="https://issues.dlang.org"&gt;https://issues.dlang.org&lt;/a&gt; -Martin 
Great timing. I picked up vibe as a candidate for a web app framework just last night. This will be quite helpful.
Hi, I've been slowly adding articles to a Flipboard collection of D related articles and tutorials. However as I'm programming less and less in D lately I'm not sure how often I will be able to keep track of the new stuff. So if there are any Flipboard users around interested in adding stuff there, please let me know and I will invite you to manage the said collection. &lt;a rel="nofollow" href="https://flipboard.com/@sunre/d-programming-language-e87f94iky"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;flipboard.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;@sunre/&lt;/span&gt;&lt;span class="forcewrap"&gt;d-programming-&lt;/span&gt;&lt;span class="forcewrap"&gt;language-&lt;/span&gt;&lt;span class="forcewrap"&gt;e87f94iky&lt;/span&gt;&lt;/a&gt; Florin 
As far as I know yes DMD is currently the only compiler that is easily installable on Windows. It is not bad but certainly LDC and GCD optimize a whole lot more.
Yeah I'll just pick a weekend and make DMD as fast as clang. No problem =) I was thinking the former! 
I figured :) That is a great idea.
&gt; Go ahead that would be awesome :) and good for all of us. I was under the impression that the DMD backend (which is what does the optimization) isn't open source.
Please see the Github links for a list of changes and issues resolved. You may notice that they're all in Dub now. The real Brian is in cryo-stasis in case we need him later. In order to not arouse too much suspicion about shape-shifters these projects can still be built with git and make. dfmt: Code formatter 0.4.2 &lt;a rel="nofollow" href="http://code.dlang.org/packages/dfmt"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/dfmt&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/Hackerpilot/dfmt/releases/tag/v0.4.2"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;dfmt/releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.4.2&lt;/span&gt;&lt;/a&gt; dfix: Code upgrader 0.3.1 &lt;a rel="nofollow" href="http://code.dlang.org/packages/dfix"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/dfix&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/Hackerpilot/dfix/releases/tag/v0.3.1"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;dfix/releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.3.1&lt;/span&gt;&lt;/a&gt; DCD: Auto-completion system 0.7.4 &lt;a rel="nofollow" href="http://code.dlang.org/packages/dcd"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/dcd&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/Hackerpilot/DCD/releases/tag/v0.7.4"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;DCD/releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.7.4&lt;/span&gt;&lt;/a&gt; D-Scanner: D Lint/analysis tool 0.3.0 &lt;a rel="nofollow" href="http://code.dlang.org/packages/dscanner"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;dscanner&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/Hackerpilot/Dscanner/releases/tag/v0.3.0"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;Dscanner/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.3.0&lt;/span&gt;&lt;/a&gt; libdparse: D Lexer/parser/AST library 0.3.0 &lt;a rel="nofollow" href="http://code.dlang.org/packages/libdparse"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;libdparse&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/Hackerpilot/libdparse/releases/tag/v0.3.0"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;libdparse/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.3.0&lt;/span&gt;&lt;/a&gt; dsymbol: Symbol resolution code used by DCD and D-Scanner 0.1.0 &lt;a rel="nofollow" href="http://code.dlang.org/packages/dsymbol"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;code.dl&lt;/span&gt;&lt;span class="forcewrap"&gt;ang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;packages/&lt;/span&gt;&lt;span class="forcewrap"&gt;dsymbol&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="https://github.com/Hackerpilot/dsymbol/releases"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;dsymbol/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases&lt;/span&gt;&lt;/a&gt; 
Hi everyone, LDC 0.17.0-beta1, the LLVM-based D compiler, is available for download! This release is based on the 2.068.2 frontend and standard library and supports LLVM 3.5-3.7. Don't miss to check if your preferred system is supported by this release. We also have a Win64 compiler available! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: &lt;a rel="nofollow" href="http://forum.dlang.org/post/cnpluyvskgjztnuypybn@forum.dlang.org"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;post/&lt;/span&gt;&lt;span class="forcewrap"&gt;cnpluyvskg&lt;/span&gt;&lt;span class="forcewrap"&gt;jztnuypybn@&lt;/span&gt;&lt;span class="forcewrap"&gt;forum.&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org&lt;/span&gt;&lt;/a&gt; Regards, Kai 
DCD 0.7.5: &lt;a rel="nofollow" href="https://github.com/Hackerpilot/DCD/releases/tag/v0.7.5"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;DCD/releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.7.5&lt;/span&gt;&lt;/a&gt; If you're on DCD 0.7.4, upgrade to 0.7.5 to avoid a crash. dfmt 0.4.4: &lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;Hackerpilot/&lt;/span&gt;&lt;span class="forcewrap"&gt;dfmt/releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.4.4&lt;/span&gt; The new dfmt release fixes some spacing and alignment bugs. 
I've just created a new release of DStep, 0.2.1 [1]. Binaries are available for OS X, Linux 64bit and FreeBSD 64bit. No 32bit versions this time, unfortunately. For those not familiar with DStep: DStep is a tool for translating C and Objective-C headers to D modules. Changelog: Version 0.2.1 New/Changed Features * Clang internal header files are now included in the executable * A script for testing multiple versions of libclang has been added * DStep outputs spaces instead of tabs for indentation * Update Clang bindings to 3.7.0 * Run tests on Travis-CI Objective-C * Selectors are translated to `@selector(&amp;quot;foo&amp;quot;)` * `id` is translated to `ObjcObject` Bugs Fixed * Issue #42: Compile failure with DMD v2.0.68 * Issue #37: Regression: clang 3.5 causes struct members to be defined again * Issue #26: dstep dumps core on a simple header [1] &lt;a rel="nofollow" href="https://github.com/jacob-carlborg/dstep/releases/tag/v0.2.1"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;jacob-&lt;/span&gt;&lt;span class="forcewrap"&gt;carlborg/&lt;/span&gt;&lt;span class="forcewrap"&gt;dstep/&lt;/span&gt;&lt;span class="forcewrap"&gt;releases/&lt;/span&gt;&lt;span class="forcewrap"&gt;tag/v0.2.1&lt;/span&gt;&lt;/a&gt; &lt;span class="forum-signature"&gt;-- /Jacob Carlborg &lt;/span&gt;
I have written a tutorial on how to set up D with IntelliJ. &lt;a rel="nofollow" href="https://www.reddit.com/r/programming/comments/41cuud/using_d_with_intellij/"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;www.red&lt;/span&gt;&lt;span class="forcewrap"&gt;dit.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;r/programming/&lt;/span&gt;&lt;span class="forcewrap"&gt;comments/&lt;/span&gt;&lt;span class="forcewrap"&gt;41cuud/&lt;/span&gt;&lt;span class="forcewrap"&gt;using_d_with_&lt;/span&gt;&lt;span class="forcewrap"&gt;intellij/&lt;/span&gt;&lt;/a&gt; Comments appreciated :) 
Second and last beta for the 2.070.0 release. &lt;a rel="nofollow" href="http://dlang.org/download.html#dmd_beta"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;download.&lt;/span&gt;&lt;span class="forcewrap"&gt;html#dmd_beta&lt;/span&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://dlang.org/changelog/2.070.0.html"&gt;&lt;span class="forcewrap"&gt;http://&lt;/span&gt;&lt;span class="forcewrap"&gt;dlang.org/&lt;/span&gt;&lt;span class="forcewrap"&gt;changelog/&lt;/span&gt;&lt;span class="forcewrap"&gt;2.070.0.html&lt;/span&gt;&lt;/a&gt; Please report any bugs at &lt;a rel="nofollow" href="https://issues.dlang.org"&gt;https://issues.dlang.org&lt;/a&gt; -Martin 
Fixing the bot from spewing html tags will be much appreciated. 
at least for 64 bit Linux. Other platforms to follow. &lt;a rel="nofollow" href="https://github.com/D-Programming-Language/dmd/pull/5342"&gt;&lt;span class="forcewrap"&gt;https://&lt;/span&gt;&lt;span class="forcewrap"&gt;github.com/&lt;/span&gt;&lt;span class="forcewrap"&gt;D-Programming-&lt;/span&gt;&lt;span class="forcewrap"&gt;Language/&lt;/span&gt;&lt;span class="forcewrap"&gt;dmd/pull/5342&lt;/span&gt;&lt;/a&gt; This is what Andrei and I call &amp;quot;enabling&amp;quot; technology, as it opens the door for many more uses of D, in this case better interoperability with existing C++ codebases. Thanks to everyone who helped out with this, especially Elie, Iain, David and Andrei! Also looking forward to getting this in GDC and LDC! Andrei and I feel that better interoperability with C++ is a major strategic feature and advantage for D. As the recent thread with Manu's frustrations in doing it show, we still have a significant way to go. But I hope to push it forward hard in the next few months. For the fearless who love working under the hood, extending the support to the rest of the platforms is a great way to materially contribute. 
Hi! I'm trying out D, and wanted to explore some of the features cpp doesn't yet have. Do I'm working on a reflection based json parser \ generator.
A study group has been formed to research questions regarding lifetime, reference-counting and manual memory management: http://forum.dlang.org/group/study You could track their progress there.
&gt; Can it interoperate with C++ classes now, too? =D This has been the case for a while now, hasn't it? https://dlang.org/spec/cpp_interface.html
Do D need a popular framework? in china ,a little peopel use dlang. i just use it do some simple work for myself. yet,i have learn d for a week .. i ask so many friends ,they don't use D at all.we use golang more than dlang. 
This rumor should stop. There is only one function left **in std.algorithm** (levenshteinDistance). Many other parts of the standard library, and many parts of the language itself use the GC. It's always avoidable, but at some cost.
Thanks for the clarification.
please ask on &lt;http://forum.dlang.org/group/learn&gt; That's a more active group.
I saw on the news this evening that air fares for the next 3 weeks will be at a 3 year low. It's a good time to book the flights to Berlin!
Sublime text 3 is a decent editor to write D code. However, getting all the different plugins working together has always proven to be somewhat of a challenge for me. So, I decided to document the process as I went along. The result is here: https://www.btbytes.com/posts/st3d.html Comments are suggestions are welcome.
I've finally managed to tag a first beta for vibe.d. It contains numerous optimizations in the network and HTTP code, so it's especially important to thoroughly test this before release. 0.7.26 (except for the win32 driver) still compiles fine on DMD 2.067.0, so a fully synchronized release is fortunately not essential this time. http://code.dlang.org/packages/vibe-d/0.7.27-beta.1 Changelog: https://github.com/rejectedsoftware/vibe.d/blob/master/CHANGELOG.md
Hi,everyone: I've wrapper wiringPi library for ARM :(Raspberry Pi 2 model B.) I push the wiringPi-D to github.com: https://github.com/FrankLIKE/wiringPi-D If you need it useful for you,please give it a star. Thank you. Frank
The Fourth Annual Conference of the D Programming Language: DConf 2016 May 4 to May 6, 2016 Berlin, Germany http://dconf.org/2016/ DConf 2016 will feature keynotes, technical talks for all levels of D knowledge, experience reports, panels, and lightning talks. The conference invites the submission of proposals for papers, talks, and experience reports. The topics of choice are anything and everything related to the D language. Such include: * Language Proper issues, such as new idioms and techniques enabled by D * Tools and Techniques for maximizing productivity when working in D * Experience reports on using D in the real world * Under the hood glances at compiler and standard library implementation artifacts * Hot topics that are sure to start lively debates, such as manual and automatic memory management, migrating from other languages, and of course the perennial matter of managing the D development itself These are not all-inclusive. Originality in topics and formats is warmly encouraged. If it is relevant to the D language, it fits. Important Dates Submission Deadline: Friday February 26, 2016, 23:59:59.99 PST Early bird registration deadline: Monday February 29, 2016, 23:59:59.99 PST Conference: Wednesday May 4 – Friday May 6, 2016 Submissions We expect submissions in plain text format or one of the usual rich document formats, such as PDF or DOC. Send your submissions to dconf2016@digitalmars.com. If accepted, the talks will be delivered by the submitter(s) unless the submission indicates otherwise. The submission should include: * Title * Kind (e.g. talk, tutorial, panel, contest, interpretive dance) * Duration (we're aiming for 50-minute presentations, but are considering smaller and larger durations as well) * Target Audience (e.g. beginner, intermediate, advanced) * Abstract: the "elevator pitch" of the talk, in one paragraph * Extended description: an extended abstract including any details you believe are relevant for evaluating the submission * Brief speaker biography including a summary of their expertise relative to the talk topic * Keyword tags Organizers Walter Bright, The D Language Foundation Ali Çehreli, The D Language Foundation, Riverbed Andrei Alexandrescu, The D Language Foundation Mihails Strasuns, Sociomantic
"A defense of so-called anemic domain models" by Luís Marques http://www.meetup.com/D-Lang-Silicon-Valley/events/228027468/ We will post a link to live streaming at the time of the meeting: 7pm Pacific time. Ali
Any improvements over https://github.com/BlackEdder/painlessjson or https://github.com/rcorre/jsonizer ? You are very welcome to join us at painlessjson if you want.
An alpha release of ldc, the llvm-based D compiler, for Android devices is now available. It is best used with the excellent Termux app (https://play.google.com/store/apps/details?id=com.termux&amp;hl=en) and a bluetooth keyboard. ;) Updated test runners, that run most tests from the standard library on any Android device, are also available (results have been reported for everything from a TomTom BRIDGE GPS navigation device to a Huawei Watch): https://github.com/joakim-noah/android/releases/tag/polish You can install a test runner app or run a command-line binary. Please report your results in this thread in the ldc forum, which requires no registration, with the info and format requested there, particularly for Android 4.1 or earlier: https://forum.dlang.org/thread/bafrkjfwmoyriyhmqizl@forum.dlang.org If you try out the native compiler, take a look at the README that comes with it for instructions. If you have a D/OpenGL app you'd like to port to Android and submit to the Play Store, let me know if I can help with that process.
Hi, After a much needed rebuild of the server running various GDC-related hosted services [http://forum.dlang.org/post/zrnqcfhvyhlfjajtqebt@forum.dlang.org] - I've gotten round to updating the compiler disassembler. http://explore.dgnu.org/ Now supports 12 different architectures from ARM to SystemZ! (not including -m32 or any -march options) Enjoy. Iain.
https://github.com/Hackerpilot/dfmt/releases/tag/v0.5.0-beta2 This version of dfmt includes several whitespace and indentation fixes. There is also some fine-tuning in the line wrap calculation algorithm and a new option to control the formatting of template constraints. Bash-completion scripts are also new in this release. https://github.com/Hackerpilot/DCD/releases/tag/v0.8.0-beta1 This version of DCD adds support for UNIX domain sockets to Mac/Linux/BSD builds. I also included some bash-completion scripts for the client and server commands. A reminder: the announce mailing list is not a bug tracker, please file problems you encounter on Github.
I will have to take a look. I will blame my ignorance on D's terrible Google footprint. That's ok though. Still having fun working in it. It I can help with any changes after the next post, I will
Why not just use the prebuilt binaries on the download page, or the installer on the download page. http://dlang.org/download.html
Way to COMPLETELY miss/avoid the point of my post. And, to directly answer your question (not that I personally am unable to build D) but because I want to build it 64-bit (which is the NORM, and has been since like 2008. MOST people use 64-bit computers. 32-bit is LEGACY.) Or because I just want to build it with a C backend that is more up-to-date than the default? There's tons of reasons...
Submit a pull request if you think the documentation can be improved. It's right there in the top right corner: "Improve this page"
Or maybe I just only post about things I think are relatively significant issues? 
Thank you very much for the great list! &gt; D is native Doesn't the JIT compiler make the bytecode run native as well ? And JNI provides decent support to interface with C, no ? 
JIT'd code is native, but writing in a language that directly targets a native machine (instead of the *virtual* JVM) has advantages, and those often include execution speed and easier access to existing C libraries by matching the C calling convention. Also, JNI and JNA are messy and cumbersome. On the other hand, targeting a virtual machine has advantages in portability and simplicity. It is also faster (for the developer) to compile targeting the JVM rather than a native architecture, since expensive optimization passes can be deferred, and happen only if you 'need' them to, as determined at runtime. This can often make iterating (write -&gt; compile -&gt; test -&gt; write more) faster. I disagree with /u/cym13 about a few of his points, too: * Java has document generation (javadoc) and CPU/GC profilers built-in, and several of the most popular libraries are for logging and unit testing. The Java build toolchains (ANT, Maven, Gradle) are also extremely powerful, moreso than DUB in my experience. * D gets to leverage existing debuggers and tools (valgrind etc) that are very powerful. However, there are several Java debuggers with similar-or-better feature sets, and the memory analysis tools are better (I haven't found any native memory analyzers that were worthwhile, but that may be for lack of searching). * The point about concurrency differences is partially valid (java.lang.Object contains a field used for locking, which is probably a waste of memory for most objects). I'm not sure what he means by "thread safe by default" (D is certainly not the same sort of "safe" as Rust is, for example), but to be clear: synchronized { ... } blocks (with no argument) in Java lock on the containing object, but in D they lock on the method itself.
I never meant that D's tooling is better than Java. I mean... that's Java we're talking about! I only meant that a lot was built in the compiler, and that has consequences. For example there is a powerful test culture in D because unittests are part of the language itself. I don't know if you've ever come on irc but it's quite common to see discussions like that: - Hey, how can I join two strings? - assert("my " ~ "string == "my string"); This is common and understood. This isn't something I've seen elsewhere (but again I'm not much on java-related media). For the "thread safe" part it was a terrible formulation to say that everything is thread-local by default and that you have to explicitely share things so there's less incentive to rely on shared memory.
&gt; I'm not sure what he means by "thread safe by default" D 2 stores all global variables in thread local storage unless otherwise specified. 
I don't think it locks you in one implementation... Or more precisely you'd use different kind of tests for different things. D's unittest are automatically inserted in the documentation so they make for great examples and unittests. But for things like very redundant tests or integration tests you would either make sure the unittests aren't incorporated in the docs or use a separate test library as in Java. There are several available that propose advanced features. D's builtin unittest is more meant as a (very useful) starting point for getting the job's done. That said, I've personnaly never felt a real need for an external library.
&gt; The point about concurrency differences is partially valid (java.lang.Object contains a field used for locking, which is probably a waste of memory for most objects). I'm not sure what he means by "thread safe by default" (D is certainly not the same sort of "safe" as Rust is, for example), but to be clear: synchronized { ... } blocks (with no argument) in Java lock on the containing object, but in D they lock on the method itself. Data isn't shared across threads by default, except if is immutable.
This release brings some larger changes: - The library has been split up into sub packages: code, utils, data, http, mail, diet, mongodb, redis and web. This is an intermediate step to moving the individual packages out to separate repositories with independent version numbers. - A lot of work went into performance tuning. Single-core performance of the HTTP server is improved by about +50% and multi-core performance scales properly again after excessive lock contention sneaked in in one of the previous releases. The number of worker threads is now also properly determined on all systems (including multi-CPU), which should fix the numbers for multi-threaded benchmarks (an update to the TechEmpower benchmark suite is on the way). - The REST interface generator now supports modelling collections with native D syntax using Collection!T. It also adds support for CORS. - The std.concurrency integration has been fixed and re-enabled - you can now use std.concurrency without worrying about blocking the event loop. In case of problems (std.concurrency doesn't support passing certain kinds of values), the old implementation can still be accessed as sendCompat/receiveCompat/... - Compiles on 2.066.0 up to 2.070.0. Note that this will be the last release that supports the 2.066.x frontend. The next release will require at least 2.067.0 or maybe even 2.068.0 (still TBD). This may unfortunately rule out GDC for the time being. - Full list of changes: http://vibed.org/blog/posts/vibe-release-0.7.27 Homepage: http://vibed.org/ DUB package: http://code.dlang.org/packages/vibe-d GitHub: https://github.com/rejectedsoftware/vibe.d
I recently started with a GDB extension for debugging D code in visual studio code and now its in a pretty ready state supporting most things GDB can do, covering nearly everything the vscode UI allows me to do. It supports debugging, attaching to processes &amp; gdbserver and debugging over SSH + X11 forwarding. I've used it quite a lot now and it works great with D on linux. I will add more debuggers in the future (also lldb and others that support MI command syntax). If you have visual studio code, just run `ext install debug` and follow the instructions in the README Source code for those of you who are interested: https://github.com/WebFreak001/code-debug
Ddb is a relational database client for D [1]. Currently it only supports PostgreSQL but is not limited to it. It could be extended to support other backends. Built-in postgres client is a native implementation, that is it does not depend on libpq. Instead it communicates directly with the server avoiding text serialization and parsing overhead (PostgreSQL protocol is stable and well documented). I don't use it and I don't work on it anymore. Simply because I'm busy with other things and that things don't involve any RDBMS support. It has some user base, few contributors and 22 forks on github. Unfortunately, I could not handle pull requests and issues in a reasonable time and that's why I'm posting this here. I hope someone could take over this project and improve it. If you are interested, please either respond here or email me. [1] https://github.com/pszturmaj/ddb
Hi everyone, LDC 0.17.0, the LLVM-based D compiler, is available for download! This release is based on the 2.068.2 frontend and standard library and supports LLVM 3.5-3.8. Don't miss to check if your preferred system is supported by this release. We also have a Win64 compiler and PREVIEW of a Win32 compiler available! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/cqgwucbznngoiesvbmlk@forum.dlang.org Regards, Kai 
Another nice step forward. I'd be interested to see what the performance of LDC-compiled code is when stacked up against C++ code compiled with Clang.
Plotcli[1] is a command line application that can create plots by parsing text/csv files and from piped data, making it useful during data analysis. Plotcli v0.8.0 has been largely rewritten to use ggplotd[2] as its backend. This results in more beautiful plots and gives us greater control over the exact plots created. Note though that the command line arguments are incompatible with previous releases. Plotcli (through ggplotd) can now also show the plots in a gtk window, through using `plotcli --format gtk`. Previously versions only supported saving the resulting plots to files. Examples and more documentation are available on the its github page: https://github.com/BlackEdder/plotd [1] https://github.com/BlackEdder/plotd [2] https://github.com/BlackEdder/ggplotd
Hi all, I now have a working D replacement for moc: https://github.com/Syniurge/Calypso/blob/master/tests/calypso/qt5/moc For those unfamiliar with Qt, moc (the Meta-Object Compiler) is a tool that generates additional code for Qt classes, code then used by the signal/slot system, properties and other Qt-specific extensions. While C++ moc is not going away for probably a very long time (http://woboq.com/blog/reflection-in-cpp-and-qt-moc.html), D's compile-time reflection makes it possible to replicate moc's functionality entirely with templates and CTFE, with the help of some Calypso features: C++ template instantiation, overriding C++ virtual methods, and member function pointers. Calypso had been partially supporting Qt5 for a while and there was a Qt5 demo written by Kelly Wilson, but to work around the lack of moc he had to write an intermediate C++ class with virtual slots and the signal &lt;-&gt; slot connections were done in C++ code. Now everything is in D: https://github.com/Syniurge/Calypso/blob/master/tests/calypso/qt5/qt5demo.d The moc package is as faithful as possible to Qt 5.5.0's moc. It's not finished yet (missing: properties, class info) but signals, slots and connections are working, making Qt 5 development in D much more practical than before.
It runs well on Linux, but for some reason the auto-complete doesn't seem to work on my Windows setup (win7 64b) as the dcd-server stalls at 25% cpu usage.
Hi, with the newest version of Notepad++ (6.9) strings enclosed with backticks `Hello World!` are now correctly highlighted. Kind regards André
First beta for the 2.070.1 point release. http://dlang.org/download.html#dmd_beta http://dlang.org/changelog/2.070.1.html Please report any bugs at https://issues.dlang.org -Martin
Hi everyone, LDC 1.0.0-alpha1, the LLVM-based D compiler, is available for download! This ALPHA release is based on the 2.069.2 frontend and standard library and supports LLVM 3.5-3.8. The 1.0 release will be a major milestone. Please help testing to make it the best release ever! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/gduhxehudlcssnhtnzah@forum.dlang.org Regards, Kai 
Hi all, D interface to nanomsg library http://nanomsg.org/ was released. This bindings follows Deimos style. 90% of tests was ported to D. github: https://github.com/9il/nanomsg dub: http://code.dlang.org/packages/nanomsg BTW, what should I do to include it to Deimos collection? https://github.com/D-Programming-Deimos See also https://github.com/Laeeth/d-nanomsg Best regards, Ilya 
Hello, I am happy to announce the official alpha version of sqlite-d! sqlite-d is a reader for the SQLite File Format 3. In the future I will implement a SQL-like API on top of it. Top-notch performance is one of the explicit goals of this project! please note that currently only the ctfe branch is populated. I welcome contributions! Repo-URL : https://github.com/UplinkCoder/sqlite-d
Glad to announce D 2.070.1. http://dlang.org/download.html This point release fixes a few issues over 2.070.1, see the changelog for more details. http://dlang.org/changelog/2.070.1.html -Martin
Terminix is a tiling Linux terminal emulator I've been working on designed for the Gnome 3 environment and using GtkD. This newest release fixes a number of bugs and adds some new features. I'm announcing it here primarily for D programmers interested in development using GtkD since this might be useful as a real world GtkD program that exercises a significant percentage of the GTK API. Also, if anyone wants to contribute to the effort I'm always looking for help. Terminix can be found here: https://github.com/gnunn1/terminix
Once upon a time, in a repository long deleted, there was a project called "clayers" which was a programmers summer project, in which to create an easy way to make games that relied on the console. The repo start of nicely, but after more and more developing the project started to get messier and messier, while still being unfinished and containing many bugs. The author (me) decided that he would start a new project, which he named "scone" https://github.com/vladdeSV/scone --- Scone (Simple CONsole Engine) is a small library to make it easier for developers to make CLI applications efficiently (intentionally/originally for console games), cross-platform. (Please note that it is not fully cross-platform yet, currently only working properly on Windows). Features: * Efficient writing to the console/terminal * Keyboard input (currently only Windows) For anyone on a Windows machine, you can test a few examples that gives the basic idea of what scone can do here: https://github.com/vladdeSV/scone/tree/master/examples However, I have one big problem which I cannot overcome, namely keyboard input on POSIX. I would very much ask for help in this area. Judging from Adam's terminal.d, input on POSIX seems to be this huge beast which I cannot slay myself. Feedback and/or help very much appreciated! Yoyo, vladde
http://code.dlang.org/packages/unit-threaded Through the magic of dub, unit-threaded is now easier to include in your project, with no need for a hand-written test main file anymore. And all because the library can be run as an executable by dub. It's an idea that's so obvious in retrospect I don't know how it took me this long. Say you've already got a dub project with unittest blocks and you just want them to have names and be run in threads. Easy, just have a "unittest" configuration in your dub.json/sdl like so: "configurations": [ ..., { "name": "unittest", "preBuildCommands": ["dub run unit-threaded -c gen_ut_main -- -f bin/ut.d"], "mainSourceFile": "bin/ut.d", "excludedSourceFiles": "src/main.d", "dependencies": { "unit-threaded": "~&gt;0.6.3" } } Now run "dub test" and enjoy the results. If you want "real" names then add a string UDA to your unittest blocks. And.... that's it. You might not even need to exclude the module with the main function if said function is versioned out for unit test builds. If you want to use the library's other features you'll have to import it but that's easily versioned as well: version(unittest) { import unit_threaded; } Enjoy! Atila
Hey all, I was quite astonished that the dlang.io domain was still available. I imagine it could be used to host non-official user projects and give them a fancy name. FYI the main website dlang.io currently redirects to dlang.org, but if anyone has a better use case for it - let me know! So if anyone is interested in this offer for a subdomain (e.g. your-awesome-project.dlang.io), just ping me (seb [at] wilzba [dot] ch) - I am more then happy to help you ;-)
chipmunkd [1] provides D bindings for the most recent version (7.0.1) of Chipmunk2D [2], a 2D physics library. Note that there is also DChip [3], which provides a full source port and is currently targeting the 6.X branch. I figured bindings would be easier to keep up to date with upstream releases than a full source port, though DChip has the advantage of not requiring another dependency (and of having nicer-to-look at source code?). The ported demos seem to be working, but they depend on the rather outdated glfw2. If you have glew and glfw2, you should be able to run the demos with dub. Some of them look pretty cool. The demo directory contains some hacked-together glfw2/glew bindings that were just enough to get it working. I also just realized Jakob Orvum already had some bindings [4], though they are a few years out of date. In retrospect, I probably should have based my work on that. I really should research these things more thouroughly before I dive in. Oops. The bindings were created with the help of dstep [5] (and a fair bit of manual post-processing). [1] https://github.com/rcorre/chipmunkd [2] http://chipmunk-physics.net/ [3] https://github.com/d-gamedev-team/dchip [4] https://github.com/JakobOvrum/ChipmunkD [5] https://github.com/jacob-carlborg/dstep
Many thanks to https://github.com/aG0aep6G who contributed the DConf 2016 logo (the Berlin tower https://github.com/D-Programming-Language/dconf.org/pull/95). After discussing it with Sociomantic, they proposed a new one that is not Berlin-specific and also looks terrific on T-shirts. Take a look: http://dconf.org Very excited about the up-and-coming DConf 2016! Andrei
I just released on behalf of the company I work for (http://lab.2night.it ) a small library that works over std.json library. It is used internally but I think it can be useful for others too. It is focused on reading/writing JSONValue in a simpler way keeping compatibility with it using UFCS. It also can be used with CTFE. GH: https://github.com/2night/jsonwrap/ (check README self-explaining examples) Dub: http://code.dlang.org/packages/jsonwrap Comments are welcome. Andrea Fontana 
GitHub: https://github.com/9il/mrss Dub: http://code.dlang.org/packages/mrss libmrss: https://github.com/9il/mrss See also: https://github.com/Laeeth/d_rss/
https://www.facebook.com/dlang.org/posts/1242909802389365 https://twitter.com/D_Programming/status/707315004056281088 I also noticed GSoC 2016 hasn't been announced on reddit, so: https://www.reddit.com/r/programming/comments/49knvu/google_summer_of_code_2016_accepted_organizations/ Andrei
This is more than double that of previous DConf's, and we've still got nearly 2 months to go! We've also been deluged with presentation proposals, and have a lot of work to do to sort through them. All in all, this promises to be the best DConf by far! (It's both gratifying and terrifying!)
Hi all! I released the binding for SAP NetWeaver SDK v0.0.4. It has some more D-like bindings and some fixes for the bindings in general. The highlight is the new example application readtable. It demonstrates the use of the table API. With a call to RFC_READ_TABLE this tool can retrieve contents of SAP database tables. My next goal is to provide a range-based API for the table API... Regards, Kai
The forum must be sick of hearing from me... :P For those not in the know, unit-threaded is an advanced unit testing library for D: http://code.dlang.org/packages/unit-threaded The v0.6.3 release had tests parametrized by value; this v0.6.5 release brings with it the possibility of parametrizing tests by type, like so: @Types!(int, byte) void testInit(T)() { assert(T.init == 0); } This will run the testInit code twice, once for each type, and report them as separate tests: tests.pass.attributes.testInit.int: tests.pass.attributes.testInit.byte: I've literally only written that silly testInit example yet. But imagine how easy it'd be to test, say, different input ranges. I'm thinking of ways of getting the parametrized tests to work with the built-in unittest blocks. I assume it'll be hacky. Right now it's the only thing that requires non-standard test functions and I'm trying to augment the existing unit testing features of D instead of replacing them. Atila
Hello everyone, I have spent the last two weeks porting the date string parsing functionality from the popular Python library, dateutil, to D. I have written about my experience here: http://jackstouffer.com/blog/porting_dateutil.html The code and docs can be found here: https://github.com/JackStouffer/date-parser reddit: https://www.reddit.com/r/programming/comments/49qdpt/my_experience_porting_python_dateutils_date/ Let me know what you think about the article and the code. Thanks in advance.
http://awslambda-d.readthedocs.org/ http://code.dlang.org/packages/awslambda_d https://github.com/kaleidicpublic/awslambda_d AWS Lambda is a 'compute service that runs your code in response to events and automatically manages the new compute resources for you, making it easy to build applications that respond quickly to new information'. Current supported runtimes (at least when I wrote the code, some months back) were Javascript (node.js) and Java, but I wanted to be able to write scripts in D, since that's what I use for my existing work.
Hi All, The March Berlin D Meetup will be happening at 19:30 on Friday the 18th at Berlin Co-Op (http://co-up.de/) on the fifth floor. This time Martin Nowak will be doing a talk titled "Object (Relational) Mapper". The abstract is: "This talk presents several prototypes for a high-level approach to work with relational and NoSQL databases. The goal is to build a library with idiomatic solutions for common tasks such as deriving schemas from annotated type definitions, migrating data, or efficient querying." Both alcoholic and non-alcoholic drinks will be available. Details are also on the meetup page here: http://www.meetup.com/Berlin-D-Programmers/ Thanks, Ben.
First beta for the 2.071.0 release. This release comes with many import and lookup related changes and fixes. You might see a lot of deprecation warnings b/c of these changes. We've added the -transition=import switch and -transition=checkimports [¹] switches to ease updating existing code. http://dlang.org/download.html#dmd_beta http://dlang.org/changelog/2.071.0.html Please report any bugs at https://issues.dlang.org -Martin [¹]: -transition=checkimports currently has a bug that creates false positive warnings about the $ symbols, this will be fixed in the next beta (Bugzilla 15825)
Hi everyone, LDC 0.17.1, the LLVM-based D compiler, is available for download! This release is based on the 2.068.2 frontend and standard library and supports LLVM 3.5-3.8. Don't miss to check if your preferred system is supported by this release. This time we provide a native ARM compiler, too! As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/ccutnxavsgribicivppu@forum.dlang.org Regards, Kai 
Hi I wrote a program to turn the non-human-readable trace.log into an interactive HTML file that can be used to help profile a D program. Its here: https://bitbucket.org/andrewtrotman/d-profile-viewer There's also a readme that (hopefully) explains how to use it. Please let me know if you find any bugs. Andrew. 
I'll be at ACCU teaching a day-long tutorial on D (http://accu.org/index.php/conferences/accu_conference_2016/accu2016_sessions#The_D_Language,_or_The_Art_of_Going_Meta) and delivering a keynote (http://accu.org/index.php/conferences/accu_conference_2016/accu2016_sessions#Fastware). Hope to see some of you there! There has been high interest in the tutorial with over 30 registrations as of a while ago. Andrei
D's implementation of functional purity supports "weak" purity - functions that can mutate arguments but are otherwise traditionally pure. I wrote a post about some of the practical benefits of this kind of purity: https://theartofmachinery.com/2016/03/28/dirtying_pure_functions_can_be_useful.html
subj. here[1]. not heavily tested, but it doesn't really matter, as nobody will use it anyway. 1. http://repo.or.cz/libotrd.git
Hello All, Sebastian Wilzbach (aka @greenify) starts mir.combinatorics. Numeric functions: - `binomial` Ranges: - `permutations` RoR - `cartesianPower` RoR - `combinations` RoR - `combinationsRepeat` RoR RoR - Range of Ranges PR: https://github.com/DlangScience/mir/pull/29 Best regards, Ilya 
The Fourth Annual Conference of the D Programming Language: DConf 2016 May 4 to May 6, 2016 Berlin, Germany http://dconf.org/2016/ We have received many excellent submissions for DConf 2016, which made the selection process difficult. After long deliberations, the organizing committee is happy to announce we have a strong program featuring a mix of tutorials, advanced informational talks, experience reports, panels, and interviews that we hope would be of broad interest not within the D milieu, but also for prospective users and the broader software engineering community. Refer to http://dconf.org/2016/schedule for the full conference schedule. The conference track contains 18 speakers, including the D language creator Walter Bright, language architect Andrei Alexandrescu, and D's build and release czar Martin Nowak. Leandro Lucarella will deliver a keynote covering the use of D at Sociomantic, a high-powered display advertising company built entirely on the D language. A combination of well-known and up-and-coming speakers completes the mix, check http://dconf.org/2016/speakers for details. We encourage participation to DConf 2016 of all interested. Past edition attendees know that in addition to the excellent "official" technical content, the value multiplier of the conference is direct access to, and interaction with, colleagues, speakers, and luminaries of the industry. Attendance has doubled in size this edition, so gear up for three days of mind-blowing information, inspiration, and excitement. Hope to see you there! Registration will be open through April 22, 2016 but please hurry up as we might start pushing against venue limits soon. Organizers Walter Bright, The D Language Foundation Ali Çehreli, The D Language Foundation, Riverbed Andrei Alexandrescu, The D Language Foundation Mihails Strasuns, Sociomantic
A little while ago, I wrote about a library I was writing to parse strings and return SysTime's, http://forum.dlang.org/post/odowolmiykkdigfitgeh@forum.dlang.org Well, that library has reached 1.0! https://github.com/JackStouffer/date-parser I'm quite happy with it; it's reasonably fast for what its doing, it has very few GC allocations, it supports std.allocator's theAllocator, and it supports range inputs. On average, it's about 10x faster than the Python version when compiled with LDC.
Second beta for the 2.071.0 release. http://dlang.org/download.html#dmd_beta http://dlang.org/changelog/2.071.0.html Please report any bugs at https://issues.dlang.org -Martin
New release of a tool that generates nice summary reports for static analysis of GC usage. It's a simple postprocessor for the compiler's -vgc output. https://github.com/DmitryOlshansky/gchunt/releases Updated to the latest compiler/libarires and also detects dup/idup unreported by -vgc switch. -- Dmitry Olshansky
My simpledisplay.d and terminal.d, nearly zero dependency modules to help with making windows and using terminals, respectively, just had their modules renamed. I haven't had a breaking change in these for many years (I add things regularly, but in a compatible way), which is why I'm announcing it here. Easy fix though: change your imports from `terminal` to `arsd.terminal` and `simpledisplay` to `arsd.simpledisplay`. Recompile. You should be done! The new DMD has import changes anyway so I think now is the time. I've been wanting to change this for a long time because naked module names - one without a package portion - I think are a bad idea, they tend to bring troubles later, but I did it this way early on. The roadmaps for these include: simpledisplay - Now that core.sys.windows.windows is better, I'll start using it and switch all the API calls to Unicode and remove my ad hoc bindings. - at the bottom of the file, there's a text portion. I'll expand this eventually so rich text is easy to do. - more OpenGL 3+ support - A better event loop. terminal - The ScrollbackBuffer at the bottom is the terminal end of the simpledisplay rich text output. You can use it to partition the terminal into windows into rich text line sequences. - The KeyEvent will become main, with the old key events being deprecated. - A better event loop that can combine with simpledisplay somehow without an external module. And of course, other stuff that comes up as I need it. Terminal recently also got full-color support and more getline editing too. These little modules do a lot!
http://conferences.oreilly.com/oscon/open-source-eu/public/cfp/466 Andrei
I've packaged my reusable extensions to Phobos at https://github.com/nordlow/phobos-next PRs are very welcome. There are lots of goodies here. Some of them should probably be moved to standard Phobos. I currently have lots of other D things to do, but you guys are welcome to try to integrate them into Phobos. Enjoy or Destroy!
we pushed 2 new projects: a native kafka driver to work with the vibe.d eventloop http://code.dlang.org/packages/kafka-d it's not full featured yet (no zookeeper) but the basic use cases work fine. throughput depends on the buffer sizes but we achieved gigabit speeds in benchmarks. thanks to Piotr for most of the implementation. after unsuccessful C bindings to redis hyperloglog datastructure i came to the conclusion that a linear probabilistc counter should be sufficient for many use cases. even contains some optimizations for UUID. thanks Ilya for the implementation: http://code.dlang.org/packages/lincount 
Hello! I am very new to the D community and just recently finished a project in D, which I want to make available in Debian (reason for choosing D was mostly its speed and similarity to C++ and C, making a very shallow learning curve for someone knowing these languages. And porting Python code to D was incredibly easy. I'll likely blog about my experience with D). As part of that work, the dub package an build management system is now available in Debian, and I will ensure it works well. Additionally, it was possible to make dub available late in the Ubuntu 16.04 (Xenial) development cycle, so dub will also be part of the upcoming LTS release of Ubuntu (kudos here go to Matthias Klose for pointing me at the "new" --push-state linker directive to work around dub not linking properly against libcurl when the latter is compiled with --as-needed). Co-maintainers[1] and feedback from the dub developers is very welcome, and I hope this addition is useful for you. On the roadmap are adding debhelper sequences to simplify packaging dub-based D code in Debian based distros, auto-test support in Debian's CI, and of course the usual bugfixing. Cheers, Matthias https://packages.debian.org/stretch/dub http://packages.ubuntu.com/xenial/dub [1]: Especially from the d-apt people - helping with official Debian packages is possible even if you're no Debian Developer / Maintainer.
Hi all, I've open sourced a set of command line utilities for manipulating tab-separated value files. They are complementary to traditional unix tools like cut, grep, etc. They're useful for manipulating large data files. I use them when prepping files for R and similar tools. These tools were part of my 'explore D' programming exercises. The tools are here: https://github.com/eBay/tsv-utils-dlang They are likely of interest primarily to people regularly working with large files, though others might find the performance benchmarks of interest as well (included in the README). I'd welcome any feedback, either on the apps or the code. Intention is that the code be reasonable example programs. And, I may write a blog post about my D explorations at some point, they'd be referenced in such an article. --Jon
GELF (https://www.graylog.org/resources/gelf/) is an "open standard" logging format based on JSON. It is primarily used to pipe messages to Graylog (graylog.org), an open source log management and analysis platform. This small release contains a rewrite of the way chunking was done. It is now done using an InputRange. The main idea was to separate chunking from socket &amp; compression implementation. This allows using any form of sockets (TCP, UDP, non-blocking event loop etc). `Chunks` also accepts a compressed array of bytes, so you can compress messages to any level prior to chunking. (PS : Graylog currently only accepts GZIP and ZLIB compression). Based on a bug report, I have hard-coded the syslog levels. gelfd now works on windows. Release : v1.3.0 (Stable) Github : https://github.com/adilbaig/gelfd Dub Pkg : http://code.dlang.org/packages/gelfd Graylog : https://www.graylog.org/ At this stage this project is looking done and dusted. Bug reports welcome. Adil 
Why do people use JSON for things that absolutely don't need it? I feel like there are much better key-value storing practices than JSON, especially for this type of thing.
http://thestrangeloop.com/cfp.html This edition seems to be a very good fit for us. From the page: "Frequently accepted topics: functional programming, logic programming, dynamic/scripting languages, new or emerging languages, data structures, concurrency, databases, distributed computing, web frameworks, web architecture, performance, virtual machines, security, hardware/software interaction, historical topics" I encourage all DConf session speakers (including the ones we couldn't accept - all were very good!) to submit their talks to Strange Loop. Andrei
Thanks, this worked.
you're welcome!
Yet another CE update. This release improves several existing features (highlighter, runnable modules, library manager, gdmd support) and fixes a few bugs (most notably brace auto-closing). See https://github.com/BBasile/Coedit/releases/tag/2_update_3 for a detailed changelog and to download. Note that there is still no OSX version and this is unlikely to change in the near future.
## Improvements - CE projects can be compiled with [gdmd](https://github.com/D-Programming-GDC/GDMD/tree/dport), the GDC wrapper that works with the DMD command line interface. Gdmd must be build manually with DUB (and gdc setup). See also [this NG thread](https://forum.dlang.org/thread/nd5n47$1jmh$1@digitalmars.com). - D highlighter, changed policy for number highlighting, wrong numbers are displayed as error. - D highlighter, faster processing of the identifiers, with the help of two perfect hash maps for the keywords and the special keywords. Note that CE recognizes a few library types as keyword even if this is not strictly compliant with the specifications (_string_, _wstring_, _dstring_, _size_t_ and _ptrdiff_t_). - D highlighter, added attributes (starting with _@_) colorization. By default bold and navy blue, like the keywords. Can be changed in the editor options, _highlighterDlang_, category _attributes_. - editor, the brace auto-closing mode _autoCloseOnNewLineLexically_ works on each new line, not only after `{`. - file menu, added an action allowing to verify the current file with [Dscanner](https://github.com/Hackerpilot/Dscanner). - libman, an entry can be temporarily deactivated. - libman, the dialog that allows to type an online package to fetch is updated. Now the online DUB packages list can be downloaded and an entry selected in a combobox. - libman, an item that's already fetched can be updated without explicit removal of the entry. This allows to easily update a package, especially since CE always fetches the master version. - libman, it's now allowed to fetch a package of type _librarySource_. - process input widget: added a button allowing to kill the current process. - runnables: a new option allows to define where the runnable modules are output. It can either be a sub folder relative to the source location (if the option is not an absolute path) or a common directory (if the option is an absolute path). Another option allows this path to be only handled when the module is part of the current project. - runnables: two new actions: _Compile file_ (and not run) and _Run compiled file_. They allow to handle a runnable as a micro project. - symbol expander: added new symbols: `&lt;ENV_HOME&gt;`, `&lt;ENV_TEMP&gt;`, `&lt;ENV_USER&gt;` that expand respectively to the the user home directory, the user temporary directory and the user name. - symbol list, improved the performances. ## Bugs fixed - brace auto closing, indentation was always obtained from the previous line, now it uses the previous non-blank line. - brace auto closing, could be triggered while typing a string literal (e.g new line after `" blah {` ). - brace auto closing, when based on lexical analysis, didn't work in a module that contained a token string (`q{ };`). - D highlighter, some valid operator combinations were displayed as error (e.g `(a)=&gt;++++a;`). - editor, version all/none inverter, it didn't work if comments separated the keyword-symbol-identifier chain. - runnables, the option `-of` was accepted in the first script line which could break some internal features, such as the analysis of the coverage file after _Run file unittests_. - runnables, possible access violation when closing a document that is not saved. - run file unittests + coverage, coverage results were displayed when the compilation failed and if the previous binary existed. ## Other - note that the DCD version that's distributed is the latest _master_, build with DMD 2.071. - manual update: only _coedit_ and _cesyms_ have to be replaced.
Can it highlight and autocomplete user made classes? I have never gotten this to work in any IDE I have tried and that would be enough for me to give Coedit another try.
Hello, Just read this post from Matthias Klumpp (http://blog.tenstral.net/2016/04/introducing-appstream-generator.html) in planet.debian.net where he talks about replacing the current appstream metadata generator written in python (dep11-generator). He talks about considering Go, Rust and D for this task, and why He finally chose D. It's very short and very enlightening, worth a reading! Hope you like it! Sorry if this has been posted before. Antonio
This is an unfortunate hotfix release, see https://github.com/BBasile/Coedit/releases/tag/2_update_4 With the hope it's the latest version 2 update.
I have messed around with DCD to try to get it to work both in VSCode and Monodevelop before without getting THAT feature to work. Is there any chance that you could point me towards a guide alternatively could I PM you questions about it when I try out Coedit again tonight?
Hello, I've implemented initial support of Android in DlangUI. Only armv7a architecture is supported so far. You can downlowd sample APK: https://sourceforge.net/projects/crengine/files/DlangUI/ How to add support of Android to your DlangUI project. ===================================================== Copy dlangui/android/android_project directory to you DlangUI project directory. Probably you will want to change android package name in AndroidManifest.xml and application display name in res/values/strings.xml Modify android_app.mk, android_build_config.mk android_app.mk ============== Update LOCAL_SRC_FILES to include all your project's files. android_build_config.mk ======================= Update paths to Android NDK, SDK, DlangUI source directory. Default values: export DLANGUI_DIR=$HOME/src/d/dlangui export NDK=$HOME/android-ndk-r11c export SDK=$HOME/android-sdk-linux export LDC=$HOME/ldc2-android-arm-0.17.0-alpha2-linux-x86_64 export NDK_ARCH=x86_64 Use LDC cross compiler for armv7a build according instructions https://wiki.dlang.org/Build_LDC_for_Android#Build_a_sample_OpenGL_Android_app_ported_to_D 
Release: https://github.com/libmir/mir/releases/tag/v0.15.2 GitHub: https://github.com/libmir/mir API: http://docs.mir.dlang.io/latest/index.html 
Hi everyone, LDC 1.0.0-beta1, the LLVM-based D compiler, is available for download! This BETA release is based on the 2.070.2 frontend and standard library and supports LLVM 3.5-3.8. The 1.0 release will be a major milestone. Please help testing to make it the best release ever! We provide binaries for Linux, OX X, Win32 &amp; Win64, Linux/ARM (armv7hf). :-) As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/bwrnvztwkzhhwhzsksgv@forum.dlang.org Regards, Kai 
https://semitwist.com/travis-d-compilers That's an auto-generated listing of all versions of DMD, GDC and LDC available on travis-ci. It also lists the front-end (DMDFE) version used by each, and the LLVM version for each LDC (all auto-generated as well). If the site goes down, please post an issue report at either of the project sites below. It'll ping me. I really wanted this because I found updating the compiler lists in my .travis.yml files to be a constant pain - especially for GDC/LDC since I never have a clue which versions use which front-end or even what versions are available, and the relevant information was spread across the separate respective sites for each compiler. Project pages for this tool (for anyone interested): https://github.com/Abscissa/travis-dc-detect-slave https://github.com/Abscissa/travis-dc-detect-master Still todo: - Auto-trigger an update check on a regular basis (I'm thinking once daily?) so I don't have to stay on top of new compiler versions and trigger an update manually. (I can use Travis's API to do this.) - Make the listing page prettier.
Hello, originally I want to wait with this announcement until DConf. But since I working on another toy. I can release this info early. So as per title. you can decompress .lz4 flies created by the standard lz4hc commnadline tool at compile time. No github link yet as there is a little bit of cleanup todo :) Please comment.
This is the first beta of 0.9.25, which should be considered an extended beta for 1.0.0, which will follow shortly afterwards. The API has now been cleaned up and is in a state that is acceptable for a stable release, even if it still isn't particularly idiomatic in many places (e.g. no ranges or @safe/@nogc annotations are used). Other major changes: - Builds on frontend versions up to 2.071.0 now - Implements proper optional dependency semantics, where using an optional dependency can now be controlled using dub.selections.json - "dub init" is now interactive by default (use -n to disable) - Contains some critical changes regarding path based dependencies Full change log: https://github.com/D-Programming-Language/dub/blob/master/CHANGELOG.md Download (Latest Preview): http://code.dlang.org/download
The main comment is "Why!?" (Although I suspect the answer is "Because I can")
Hi, I just wanted to share some experience of using D in industry. Recently my little company released version 2.0 of our flagship product Video Enhancer, a video processing application for Windows, and this time it's written in D. http://www.infognition.com/VideoEnhancer/ Couple of screenshots: http://data.infognition.com/VideoEnhancer/ve2d-filters.jpg http://data.infognition.com/VideoEnhancer/ve2e-save.jpg Version 1 was born like 10 years ago and was of course written in C++. It consisted of main GUI executable and 5 dynamically loaded DirectShow filters. For GUI version 1 used MFC and a third-party skinning engine. This skinning engine had its own problems but since we didn't have its sources we couldn't fix them, meanwhile its author disappeared in sands of time. So when time has come to create version 2 I chose the best available language and an open source GUI library with 100% control and customizability - DLangUI. Overall, I'm pretty happy with this choice. Version 2 is quite different from v1 in feature set and internal structure, it's not a direct translation. It consists of two executables running in tandem (one does GUI, the other deals with video) and 2 dynamically loaded DirectShow filters. Both main executables are purely in D, while the DirectShow filters are still in C++. Heavy number crunching, including our main feature - motion-based video upscaler - is still in C++, because of heavy SIMD usage and Intel compiler. Main executable of version 1 was ~34K lines of C++ (half of which were libraries like pugixml) and full build took ~90 seconds. Main executables of version 2 are in total ~7.5K lines of D (of which 2K are auto generated by IDL2D tool) and full build of GUI app takes 7 seconds (and the worker app builds in 3-4 seconds), so that's a really nice improvement. Thanks to Phobos we don't need many libraries: things like XML parsing, ZIP unpacking and many others are all covered by the standard library. Only two additional libraries were used: Cerealed for serialization of messages the two processes exchange, and DLangUI. Some things to reflect on: Compiler Compiler used is DMD 2.070, 32-bit target. Video Enhancer supports 200+ plugins from VirtualDub and they happen to be 32-bit, so our app has to be 32-bit too. Speed of code generated by DMD is more than enough, even debug builds were fast enough. The default linker is used (not the MS one), and I was worried there might be some troubles with antivirus false positives (that happened before when using optlink) but no, everything went smooth and no problems with optlink arose whatsoever. IDE Visual Studio 2010 with VisualD. I've used this combo for many years, generally quite successively. Last year its D parser had some problems that made it crash on code that used DLangUI, and that was painful. I even made a patch that made the crash silent, so VisualD would silently reload the parser and continue working. It worked, but luckily authors of D parser and VisualD quickly found the crash cause and fixed it, since then everything works smoothly out of the box. I like how well DML works there, with syntax highlighting and autocompletion: http://data.infognition.com/VideoEnhancer/dml.png Builds We're not using Dub to build the app, it tends to be slow and rebuild dependencies too often (or maybe I just haven't learnt to use it properly). Instead we use Dub to build the libraries and produce .lib files, then reference libraries sources and lib files in VisualD project of the main apps and then use VisualD's simple building process that just invokes DMD. Cerealed This compile-time-introspection-based serializaition lib is really great: powerful and easy to use. We're probably using an old version, haven't updated for some time, and the version we use sometimes had problems serializing certain types (like bool[], IIRC), so sometimes we had to tweak our message types to make it compile, but most of the time it just works. DLangUI Very nice library. Documentation is very sparse though, so learning to use DLangUI often means reading source code of examples and the lib itself, and sometimes even that's not enough and you need to learn some Android basics, since it originates from Android world. But once you learn how to use it, how to encode what you need in DML (a QML counterpart) or add required functionality by overriding some method of its class, it's really great and pleasant to use. Many times I was so happy the source code is available, first for learning, then for tweaking and fixing bugs. I've found a few minor bugs and sent a few trivial fixes that were merged quickly. DLangUI is cross-platform and has several backends for drawing and font rendering. We're using its minimal build targeted to use Win32 API (had to tweak dub.json a bit). We don't use OpenGL, as it's not really guaranteed to work well on any Windows box. Using just WinAPI makes our app smaller, more stable and avoids dependencies. Garbage Collection Totally fine if you know what you're doing. Some people say you can't make responsive GUI apps in GC-ed languages. That's a myth. In this application we rely on GC almost as freely as one would in C#, allocate strings, messages, widgets and other small litter without having to worry about deallocation, and it works well, I've never seen any performance problems related to GC in this app, and no GC pauses were visible at all. However this is a 32-bit app and some care must be taken to avoid excessive memory use. Firstly and mainly, where bitmaps for GUI elements and video frames are allocated. DLangUI tends to allocate everything in GC heap without second thought and has been allocating some arrays even just to draw some pictures rescaled. If you're resizing a window and it has some big bitmap that gets resized too, by default DLangUI tends to just allocate a new buffer for each new size, this does not look good in memory section of Task Manager. However if instead of allocating a new ColorDrawBuf, for example, you use its resize() method and don't forget to call assumeSafeAppend() for its buffer, then it stops eating memory and behaves well, even though it's still "managed", no manual management required. In couple of places I did change ordinary arrays to std.container.array to reduce allocations, the code did not change much but there was much less work for GC. One such change where it was important (allocation during bitmap drawing) was merged back to DLangUI, so don't worry about that one. COM To deal with video (reading, parsing, decoding, encoding..) we use DirectShow which is COM-based. I've found a lot of good stuff for working with COM in VisualD sources. There is IDL2D utility that converts IDL files from Windows SDK to D source files. We used it actively (~2K lines generated). There is also TLB to IDL converter if you need it (I haven't tried to use it myself). The way it converts COM interfaces, it adds their IIDs (GUIDs) as a static member of the interface, so when you need to QueryInterface() you don't need to provide IID for the interface, it's already there, and this is used by the ComPtr smart pointer that deals with most COM stuff like reference counting too. I borrowed initial ComPtr implementation from VisualD and then changed it a lot, most importantly, my version also checks for errors automatically, now I have Error Monad for free: http://www.infognition.com/blog/2016/error_checking_smart_pointer.html D features used. Apart from the smart pointer above, we used compile-time introspection to pass and automatically dispatch messages between two processes, there is a blog post about that too. We used User Defined Attributes to describe what to do with errors if they arise in message handlers http://stuff.thedeemon.com/lj/onerror.png and then proper error handling was performed automatically, no need to repeat it in each method, just add one word of annotation and it works. We used std.concurrency message passing to talk between GUI and other threads. We enjoyed the ability to call C++ interfaces directly from D and D methods from C++, no FFI required, that was really nice and helped a lot. Ability to include binary data as simple as import("file.dat") was also very nice. This way we include some images and also bytecode for a little VM, generated by a compiler written in OCaml, but that is another story. That's what comes to mind now, the rest of the code is quite boring I guess. TL;DR: at least in some areas D is a fine successor to C++ and can be used to make real world video processing apps that people around the world use and pay for.
See https://github.com/BBasile/Coedit/releases
Spotted this reddit post the other day: https://www.reddit.com/r/programming/comments/4gtlfz/xoroshiro128_the_fastest_fullperiod_pseudorandom/ ... and it reminded me that I've been meaning for some time to follow up on the interesting RNG designs by Sebastiano Vigna and colleagues. Since I had a free moment, I thought I'd knock up a D port of the public-domain C reference code available here: http://xorshift.di.unimi.it/xoroshiro128plus.c It's a first draft and obviously needs documentation, tests, etc. before I submit it to Phobos, but I thought I'd throw it out here if anyone wants to play with it and/or comment. I'll also try to follow up in the next days with an xorshift1024* implementation, which should be similarly straightforward. Code follows -- enjoy! :-) struct Xoroshiro128plus { public: enum bool isUniformRandom = true; /// Range primitives enum bool empty = false; /// ditto ulong front() @property @safe const nothrow pure { return s[0] + s[1]; } /// ditto void popFront() @safe nothrow pure { immutable ulong s1 = s[1] ^ s[0]; s[0] = rotateLeft(s[0], 55) ^ s1 ^ (s1 &lt;&lt; 14); s[1] = rotateLeft(s1, 36); } void seed(ulong s0, ulong s1) @safe nothrow pure in { // seeds are not both 0 assert(!(!s0 &amp;&amp; !s1)); } body { s[0] = s0; s[1] = s1; } void seed(ulong[2] s01) @safe nothrow pure in { // seeds are not both 0 assert(!(!s01[0] &amp;&amp; !s01[1])); } body { s[] = s01[]; } private: ulong[2] s; static ulong rotateLeft(ulong x, int k) @safe nothrow pure in { assert(k &lt;= 64); } body { return (x &lt;&lt; k) | (x &gt;&gt; (64 - k)); } } 
Contains fixes for multiple issues resulting in "missing non-optional dependency" errors. Download at http://code.dlang.org/download ("latest preview") Beta-2 thread: https://forum.dlang.org/thread/nfpntb$kbl$1@digitalmars.com
Hi everyone! I'm a little late to the party as far as my announcement goes, but I have been busy reading code and doing research for my project. I was selected for this year's GSoC to implement a Precise GC, but I'm also planning to remove the lock on allocations as outlined in my proposal: https://drive.google.com/file/d/0B-UTFTbYro4vV0ljMUlSTEc2eEU/view?usp=sharing My repository for the code can be found here: https://github.com/Jebbs/druntime I will be posting of my progress in this thread throughout the course of the summer, but right now I am mainly focusing on familiarizing myself with all of the GC code since there is quite a lot of it. You will probably see me pushing some updates to documentation between now and when GSoC officially starts, but I hope to have already started making progress before then. I'll do my best to not let you all down!
vibe compatible s3 client that supports chunked uploads. pretty rough around the edges, but basic things work. supports chunked uploads and thus needs at least vibe 0.7.28. https://github.com/tamediadigital/vibe-s3 http://code.dlang.org/packages/vibe-s3 cheers yannick
Jet lagged as I am, I'll be at breakfast at Hotel Ibis at 630am. Come and join me!
[removed]
Upload, then issue a pull request like this: https://github.com/dlang/dconf.org/pull/120. Thanks! -- Andrei
After a sleepless night of trying to build the latest ldc master branch 2.070.2 on my Android tablet a couple nights ago, almost the full druntime/phobos standard library test suite passes (only one assert in std.conv) and the same for the dmd test suite, with a handful of failures across three modules exclusively testing C/C++ ABI compatibility. The 2.070 frontend is written in D, ie ddmd, and also natively compiled on the Android tablet by ldc 2.068 (alpha build available here, first download link - https://github.com/joakim-noah/android/releases/tag/polish), hence D (2.068) building D (2.070) building D (tests, apps, etc.). :) Of course ldc 2.068 was itself built natively on Android, using the Termux Android app and the dev tools that it comes with (https://play.google.com/store/apps/details?id=com.termux&amp;hl=en). Using ldc and Termux, it's possible to build an Android app from scratch _on_ your Android device, by following these instructions: https://github.com/termux/termux-packages/issues/63#issuecomment-184115581 It only took a single night of tweaking to build this because of all the great work many contributors have put in over the past year. First, there's all the work that Walter, Daniel, and others have put into C++ integration, as ldc is now a moderately large mixed D/C++ codebase (Dscanner counts 62.5k klocs of D in the ddmd frontend, plus ldc's C++ layer and how many ever umpteen lines are invoked in llvm's C++ codebase). Dan got the full ldc testsuite working on the Raspberry Pi a couple weeks ago (https://github.com/ldc-developers/ldc/issues/1283), in the process fixing several ARM codegen issues that were hitting Android/ARM also. Finally, there's all the great work put into ldc recently by Johan, kinke, Dan, Rainer, and of course David and Kai, to integrate the new D frontend with llvm and get ldc working on new platforms. I'll look at getting JNI working next, along with finishing up a translated C++/OpenGL ES 2.0 sample app (https://github.com/googlesamples/android-ndk/tree/master/Teapot). A linux-&gt;Android cross-compiler will need the in-progress work to cross-compile reals, have to look into that. Once those issues are rounded up, I'll release a ldc 1.0.0 beta for Android sometime this month.
Very interesting reading.
One of the things that can be really annoying about using string mixin's, especially when there is a lot of code, is that the compile complains about syntax errors on a line within the mixin that doesn't exist in the code. While at the D Conference this issue was mention along with the file/line feature of function calls. It got me thinking about a code builder I had been using in ProtocolBuffer[1]. I just checked and found that the use of the #line language feature combined with the file/line feature allowed for providing better information about where a mixin went wrong. So I pulled out the code and packaged it for dub[2]. Documentation is lacking in examples, but is used with ProtocolBuffer[3]. It uses a put/push/pop approach to provide some freedom in organizing the code; but I'll admit doesn't help readability (the call to finalize will pop all code elements push to the stack). This package doesn't do too much to help with building code, one of the main parts it provides is pretty printing (indenting) which isn't important for a mixin. So please feel free to send of suggestions from experience trying to use it, I won't consider the API stable at this point. Since ProtocolBuffer support D1 and D2, so does this library. Instead of -- test.d-mixin-4(4): Error: semicolon expected, not '}' I get -- test.d(11): Error: semicolon expected, not '}' --------------------- import codebuilder.structure; void main() { mixin(genCode); // Line 4 } auto genCode() { auto cb = CodeBuilder(1); cb.put("struct m {"); cb.push("}"); // Line 11 cb.put("int a"); // Missing semicolon return cb.finalize; } --------------------- 1. https://github.com/JesseKPhillips/ProtocolBuffer/ 2. http://code.dlang.org/packages/codebuilder 3. https://github.com/JesseKPhillips/ProtocolBuffer/blob/master/conversion/dlang.d
Context: dplug is a library for creating native audio plugins as simply as possible. You can target Windows Vista+ and OS X 10.7+ Audio Unit format has been implemented as of dplug version 3. Changelog: v3.x.y (09/05/2016): - Audio Unit compatibility added, with both Cocoa and Carbon UI. What is still missing from AU: Audio Component API, sandboxing, v3. In other words it's on parity with IPlug but not JUCE. - The release tool is now much more friendly to use. - Special keys in dub.json are now expected in a plugin.json file next to dub.json. In the future it will be the place of autority for information about a plugin, for now this has to be duplicated in buildPluginInfo() override. An empty plugin.json is OK, defaults are in place. - The Wiki became a place to visit. See_also: https://github.com/p0nce/dplug for more information.
For the past couple of months me and my classmate have been working on a small console game, which we will compete with in a game creation competition arranged by my school. Deadline was today (12 May, 2016), and I am glad to announce the first playable, completable version of 2DRPG is now available! Github repo at https://github.com/vladdeSV/2drpg 'Tile-based exploration game, in which you take place as someone. Craft items to help your way, or complete quests to satisfy the inhabitants of this world.' Programmed by me (vladde) and designed by classmate Fredrik, this game features up to half an hour gameplay, with humorous and strange vibes. I have had lots of fun during the development of 2DRPG. There have been many difficulties, but I have learned much from making this game. Sadly this game is Windows only, meaning POSIX users cannot play it. This is due to technical limitations in my own console engine, scone (https://github.com/vladdeSV/scone), which cannot read input on POSIX terminals. If anyone would like to test the game, it would be awesome. Any sort of feedback is always appreciated! Greetings, vladde
Found on Reddit: https://www.reddit.com/r/programming/comments/4jawhk/cosche_a_dependencybased_coroutine_scheduler_c/ The project: https://github.com/matovitch/cosche#cosche The author says "I got the idea of building this by watching an amazing conference from Amaury Sechet on the Stupid D Compiler". Ali
First beta for the 2.071.1 point release. A few issues remain to be fixed before the next beta. http://dlang.org/download.html#dmd_beta http://dlang.org/changelog/2.071.1.html Please report any bugs at https://issues.dlang.org -Martin
 https://www.reddit.com/r/programming/comments/4jfoez/cache_sizes_with_cpuid_in_c_and_d/ Quote from the original article: "In D, there is a cpuid module that can retrieve cache information, but from what I've found it's incorrect." Then the author provides a function that does it correctly. Ali
Advanced multi-threaded unit testing framework with minimal to no boilerplate: http://code.dlang.org/packages/unit-threaded What's new: . Tags. While selecting which tests to run by package or module is definitely handy and mostly what one wants, sometimes there are cross-cutting concerns. Now you can tag the tests with whatever strings you want and use those strings to filter which tests to run: @Tags("foo", "bar") unittest { /* ... */ } Running the unittest binary like so: ./ut mypackage @foo ~@baz Will run every test in mypackage that has the "foo" tag _and_ doesn't have the "baz" tag. Adding tags on the command-line can only filter, so the number of tests run is always &lt;= of what would be run. . Autotags Value and type parameterized tests will have tags added to them automatically for their value if the @AutoTags UDA is used: @Values("foo", "bar") @AutoTags unittest { /*...*/ } The first instantiation will be tagged "foo" and the 2nd "bar". . Value-parameterized tests can now have more than one @Values UDA. If it does, the unittest block is instantiated with the cartesian product of all Values, i.e. @Values(1, 2, 3) @Values("foo", "bar") unittest { /*...*/ } This produces 6 subtests, one for each combination of the int and the string . Support for integration testing I've been using unit-threaded for integration testing and added something that was very useful to me: a file system sandbox. This is especially important when tests are running in threads so they don't stomp on each other. The code should be self-explanatory: with(immutable Sandbox()) { writeFile("foo.txt", "foobarbaz\ntoto"); // can also pass string[] for lines shouldExist("foo.txt"); shouldNotExist("bar.txt"); shouldEqualLines("foo.txt", ["foobarbaz", "toto"]); } By the default the files get written to and read from tmp/unit-threaded/{randomly generated dir name for each test}. Notice the lack of / before tmp. That directory can be changed with Sandbox.setPath. . Bug fixes Enjoy! Atila
Hi everyone, LDC 1.0.0-beta2, the LLVM-based D compiler, is available for download! This BETA release is based on the 2.070.2 frontend and standard library and supports LLVM 3.5-3.8. The 1.0 release will be a major milestone. Please help testing to make it the best release ever! We provide binaries for Linux, OX X, Win32 &amp; Win64, Linux/ARM (armv7hf). :-) As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/yryvlznqafivqznwzuyo@forum.dlang.org Regards, Kai 
Great job. I couldn't find a link to it frm the dlang welcome page. Where is it ? 
New DDT release out: dfmt support, performance improvements to semantic operations, more build command customization, fixes. Please see changelog for full list: https://github.com/DDT-IDE/DDT/releases/tag/v1.0.0 Since DDT has generally been quite stable, and since the current release is very close to the end-game vision I had for a D IDE - at least as far as my free time would allow to create - I've decided to version this as 1.0. I've been working for nearly 8 years on this project after all (with some intermission periods), so I guess 1.0 was a bit due... O.o' I expect it will mainly be small updates from now on, not any major new features (other than perhaps DCD support). -- Bruno Medeiros https://twitter.com/brunodomedeiros
Hello, I'm working on GDB/MI compatible interface for Mago debugger on Windows. GDB/MI is line based machine interface for debugger. IDEs are using GDB via this interface. GDB/MI docs: https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html Project page (mago fork) https://github.com/buggins/mago Currently mago-mi supports subset of GDB commands enough for current DlangIDE functionality. Tested on DMD generated 32bit executables. See readme details list of implemented commands: https://github.com/buggins/mago/tree/master/MagoMI/mago-mi Difference from baseline https://github.com/rainers/mago files are minimal: - Static linking for MagoNatDE and MagoNatEE - Disabled some Mago debug logging Building mago-mi from source is easy. I've tried MS Visual Studio 2013 and 2015. Don't forget to edit properties in mago/PropSheets. Buld mago-mi project. Since DlangIDE v0.6.1, it includes prebuilt mago-mi.exe (it will be copied into bin directory by dub build) and default Debugger settings are changed from gdb to mago-mi by default on Windows. If you already used DlangIDE on your computer, check Edit/Preferences/Debugger setting - change to "mago-mi" if "gdb" is specified. If you want to try mago-mi and DlangIDE which is using it, you can download binaries from https://sourceforge.net/projects/crengine/files/DlangUI/dlangide-v061-magomi-v010-x86.zip/download (or just sync to latest dlangide and use `dub run`). Bundle includes DlangIDE, mago-mi, dub, and sample workspaces (helloworld and tetris). Download size is 5.4Mb (seems small enough for IDE+debugger). I hope my work will be useful for other IDE developers who is targeting on Windows. (Any IDE which uses gdb/mi interface) I tried gdb and lldb-mi before, but did not managed to find working compiler + debugger configuration. (Best combination was gdb + gdc, but it was showing global variables instead of locals. For lldb-mi, I haven't managed to find compiler which produces compatible debug info). Best regards, Vadim
I’d like to announce a new release of the ggplotd plotting library. https://github.com/BlackEdder/ggplotd Main changes are: User visible change: - geomDensity and geomDensity2D (kernel smoothed hist and hist2d) - Browseable api documentation using harbored-mod - Updates to documentation - Some deprecations due to moving/renaming - mergeRange moved to ggplotd.range - geomHist3D renamed to geomHist2D Other changes: - Addition of ggplotd.stat module - Split some geom functions into separate geom and stat part - Many refactors Plotcli: https://github.com/BlackEdder/plotd A new version of plotcli has also been released, which depends on the new ggplotd version. As a result plotcli can now also create density and density2d plots (which are basically smoothed histograms).
https://github.com/dlang/dlang.org/pull/1302 :)
Just finished up the base for Diamond and its initiate state with Github and Dub, as well the first guide on using Diamond with vibe.d for websites. Diamond is a MVC / Template framework originally made for a hobby project, but as I developed it further I saw some potential in it and have now decided to make it open-source. It can be used to write websites/webservices on-top of vibe.d Allowing you to easily create and run websites/webservices without a lot of configurations to vibe.d since it's all done through simple configuration files in json, as well handled behind the scenes within the core framework of Diamond. Diamond however is also a template framework for views (Originally designed for web-views only.) and thus can be used to render MVC websites using its own syntax, heavily inspired by the ASP.NET razor syntax; not entirely though. It's currently in its first stable alpha version (0.2.2) For more information please view below. Dub repository: https://code.dlang.org/packages/diamond Github: https://github.com/bausshf/Diamond
https://github.com/evenex/linalg I've some heard people (including me) asking about matrix libraries for D, and while there is gl3n it only goes to 4x4 matrices and was written before all the multidimensional indexing stuff. So I was using gl3n for awhile until I needed some 6x6s and threw together a syntax-sugary sort of wrapper over std.experimental.ndslice and cblas for matrix math. You can slice submatrices, assign to them, and perform ops on them with other matrices or 2-dimensional array slices... though, for implementation-ish reasons, ops involving 2-d arrays are elementwise (you'll have to call the Matrix constructor to use matrix multiplication again). It was built in kind of an ad-hoc way and I will be adding stuff to it as the need arises, so there's nothing there yet beyond the bare basics and you should expect bugs. All the matrices hold static arrays because I don't want to mess with reference problems right now. A matrix past a certain size will be more efficient to store as a dynamic array, of course. But, right now, I need this to make writing linear algebra code comfortable for myself rather than try to win at benchmarks. Bugs/Pull/Feature requests welcome. 
Found on Reddit: https://www.reddit.com/r/programming/comments/4kmfp6/the_best_quality_programming_languages/ The list: http://www.slant.co/topics/5984/~productivity-enhancing-well-designed-and-concise-rather-than-popular-or-time-tested-programming-languag Ali
Your link points to page 2 of thread, which a bit confuses at begin)
My bad I don't even notice!
Here it is: $ ./benchmark.dmd Search in Alice in Wonderland std: 196 ±69 manual: 220 ±36 qznc: 112 ±24 Chris: 273 ±54 Andrei: 282 ±85 Andrei2: 192 ±50 Search in random short strings std: 198 ±38 manual: 191 ±47 qznc: 109 ±7 Chris: 230 ±62 Andrei: 102 ±3 Andrei2: 118 ±9 Mismatch in random long strings std: 146 ±14 manual: 208 ±84 qznc: 105 ±8 Chris: 267 ±131 Andrei: 181 ±83 Andrei2: 125 ±17 Search random haystack with random needle std: 217 ±151 manual: 155 ±29 qznc: 124 ±45 Chris: 186 ±38 Andrei: 137 ±39 Andrei2: 165 ±92 (avg slowdown vs fastest; absolute deviation) CPU ID: AuthenticAMD AMD Sempron(tm) M120 and $ ./benchmark.ldc Search in Alice in Wonderland std: 180 ±44 manual: 160 ±31 qznc: 159 ±37 Chris: 163 ±37 Andrei: 176 ±26 Andrei2: 106 ±12 Search in random short strings std: 193 ±20 manual: 186 ±28 qznc: 184 ±123 Chris: 216 ±52 Andrei: 119 ±15 Andrei2: 105 ±9 Mismatch in random long strings std: 181 ±50 manual: 209 ±90 qznc: 145 ±17 Chris: 273 ±187 Andrei: 195 ±88 Andrei2: 100 ±0 Search random haystack with random needle std: 157 ±14 manual: 261 ±208 qznc: 151 ±18 Chris: 208 ±101 Andrei: 157 ±37 Andrei2: 100 ±0 (avg slowdown vs fastest; absolute deviation) CPU ID: AuthenticAMD AMD Sempron(tm) M120 
I made sure to run each test twice to heat the cache so it's not due to my running order at least.
 ~/code/find-is-too-slow master* ❯ make dmd dmd -O -release -inline -noboundscheck *.d -ofbenchmark.dmd ./benchmark.dmd Search in Alice in Wonderland std: 203 ±3 manual: 121 ±2 qznc: 122 ±2 Chris: 183 ±3 Andrei: 204 ±3 Andrei2: 100 ±0 Search in random short strings std: 210 ±20 manual: 194 ±41 qznc: 122 ±12 Chris: 226 ±50 Andrei: 123 ±15 Andrei2: 100 ±0 Mismatch in random long strings std: 191 ±19 manual: 231 ±96 qznc: 137 ±26 Chris: 287 ±113 Andrei: 231 ±119 Andrei2: 101 ±2 Search random haystack with random needle std: 193 ±29 manual: 181 ±50 qznc: 130 ±14 Chris: 233 ±51 Andrei: 169 ±50 Andrei2: 104 ±7 (avg slowdown vs fastest; absolute deviation) CPU ID: GenuineIntel Intel(R) Core(TM) i5-2500K CPU @ 3.30GHz ~/code/find-is-too-slow master* ❯ make ldc ldmd2 -O -release -inline -noboundscheck *.d -ofbenchmark.ldc ./benchmark.ldc Search in Alice in Wonderland std: 152 ±2 manual: 100 ±0 qznc: 126 ±1 Chris: 102 ±1 Andrei: 149 ±2 Andrei2: 104 ±1 Search in random short strings std: 200 ±29 manual: 187 ±43 qznc: 122 ±10 Chris: 204 ±63 Andrei: 107 ±8 Andrei2: 102 ±3 Mismatch in random long strings std: 161 ±17 manual: 175 ±73 qznc: 125 ±14 Chris: 181 ±76 Andrei: 176 ±86 Andrei2: 103 ±5 Search random haystack with random needle std: 156 ±25 manual: 140 ±37 qznc: 127 ±15 Chris: 145 ±40 Andrei: 131 ±33 Andrei2: 104 ±7 (avg slowdown vs fastest; absolute deviation) CPU ID: GenuineIntel Intel(R) Core(TM) i5-2500K CPU @ 3.30GHz The CPU frequency being reported isn't correct, if that matters: ~/code/find-is-too-slow master* ❯ lscpu|grep "CPU max MHz" CPU max MHz: 4700.0000 
I have written a blog post about operator overloading for structs. You can find it here: https://www.reddit.com/r/programming/comments/4m8mgr/operator_overloading_for_structs_in_d/ Comments and suggestions are appreciated.
Do programming languages generally have an official blog? I don't I've seen this before.
Hi everyone, It is a great pleasure to announce that version 1.0.0 of LDC, the LLVM-based D compiler, is now available for download! The release is based on the 2.070.2 frontend and standard library and supports LLVM 3.5-3.8. We provide binaries for Linux, OX X, Win32 &amp; Win64, Linux/ARM (armv7hf). :-) As usual, you can find links to the changelog and the binary packages over at digitalmars.D.ldc: http://forum.dlang.org/post/lwsnqbravjqbnnryvjkx@forum.dlang.org Regards, Kai 
http://www.tiobe.com/tiobe_index &gt; For the first time in the history of the TIOBE index a language &gt; needs to have a rating of more than 1.0% to be part of the top &gt; 20.[....] More detailed development: http://www.tiobe.com/tiobe_index?page=D I was watching it, after D jumped to 15th position in Feb. Index (based on Jan numbers). Than D went down to 20th, stayed there for 3 month and is now up to 19. position. I do not want to restart the discussion again, about the value of this index, I just want to mention it and I think it is good for the general awareness about D to be placed in the top 20. (Like sunny weather, when you are going by bike - you would not like to start to discuss the weather here? :-) ) Regards mt.
https://github.com/Hackerpilot/Dscanner - it integrates in many IDEs with DCD
DUB 1.0.0 is nearing completion. The new feature over 0.9.25 is support for single-file packages, which can be used to write shebang-style scripts on Posix systems: #!/usr/bin/env dub /++ dub.sdl: name "colortest" dependency "color" version="~&gt;0.0.3" +/ void main() { import std.stdio : writefln; import std.experimental.color.conv; import std.experimental.color.hsx; import std.experimental.color.rgb; auto yellow = RGB!("rgb", float)(1.0, 1.0, 0.0); writefln("Yellow in HSV: %s", yellow.convertColor!(HSV!())); } With "chmod +x" it can then simply be run as ./colortest.d. Apart from that, the release contains some bug fixes, most notably it doesn't query the registry for each build any more. Full change log: https://github.com/D-Programming-Language/dub/blob/master/CHANGELOG.md Download (Latest Preview): http://code.dlang.org/download
Just what I was looking for, thanks!
For the future you might get quicker replies at #d on freenode or the d.learn forum: http://forum.dlang.org/group/learn
Hi, I solved the issue. PR is coming shortly.
Hi All, The June Berlin D Meetup will be happening at 20:00 (note new time) on Friday the 17th of June at Berlin Co-Op (http://co-up.de/) on the fifth floor. Danny Arends will be giving a more detailed version of his lightning talk he gave at the D conference on his web server, "DaNode". Both alcoholic and non-alcoholic drinks will be available. More details and an abstract of the talk are available on the meetup page here: http://www.meetup.com/Berlin-D-Programmers/events/231746496/ Thanks, Ben.
It's been a while since i announced a TinyRedis release. So here goes. TinyRedis is a fast and simple Redis(http://redis.io) driver for D. It has no dependencies and makes working with Redis trivial. This release brings TinyRedis up-to-date with dmd 2.071. Noteworthy improvements are : - dub: An earlier version of TinyRedis put it up on http://code.dlang.org. In this version dub.json has been spruced up to provide feature parity with the Makefile. Now examples can also be compiled via dub. - dmd 2.071: Updated to dmd 2.071. Thanks to a patch by @John-Colvin - simpler imports: Imports have been clumped into one namespace. `import tinyredis;` - `tinyredis.collections`: This is the start of some work that has been lying around in master for a while. I've been meaning to write simple OOP wrappers for common data types on Redis, but never got round to completing more than one. This release includes a basic class to simplify working with SETs. - PubSub: This much requested feature has finally landed! All thanks to Ali Cehreli for building it out. PubSub is a Redis feature that works like a lightweight, centralised message queue. A new Subscriber class provides the complete range of functionality to work with message queues. Download : https://github.com/adilbaig/Tiny-Redis/releases GitHub : https://github.com/adilbaig/Tiny-Redis Docs : http://adilbaig.github.io/Tiny-Redis/
Hello, Dlang-requests is library created under influence of Python-requests, with primary goal of easy to use and performance. It provide interfaces for HTTP(S) and FTP requests. You can tune request details, but for most cases you will need single and simple API call. Latest release added streaming content from server and some performance improvements (avoiding some of unnecessary buffer copying). Code and docs available at https://github.com/ikod/dlang-requests or as dub package. Thanks Dlang authors and community for excellent language. 
http://forum.dlang.org/post/jxaisipbdqfifpncnvaa@forum.dlang.org
Just announced. If you are in the area, come join us! http://www.meetup.com/Boston-area-D-Programming-Language-Meetup/events/231887464/ -Steve
as a complement to jpeg decoder, here[1] is jpeg encoder from the same author. surprisingly, it is more than two times smaller; i took a look at it and decided: why, we should have both! author claims that is supports baseline grayscale and RGB jpegs. i tested it on some images i have, but no heavily testing was done. it *should* work, though, as it is straightforward port. it is completely independent of decoder, and self-contained. unlicense, the same as encoder. yep, i know, i know, i'm very sorry. fork it and relicense! [1] http://repo.or.cz/iv.d.git/blob_plain/HEAD:/jpege.d
Hi, I am not sure how much you have heard about the D-Man, but in Japan there is an entire culture based on the D-Man! As I learned about this by accident (and even Walter didn't know about it), I thought I share this great movement with the DLang community! Here are some awesome impressions from Twitter: D-Man vs. Gopher ---------------- https://twitter.com/simd_nyan/status/741924255558819840 D-Man (3D printed with PolyFlex) -------------------------------- https://twitter.com/simd_nyan/status/623098949046382593 D-Man in "Action" ----------------- https://twitter.com/stamcd/status/742563964656062464 3D-animated D-Man ----------------- https://twitter.com/SagafroKichigai/status/680651286006505472 https://twitter.com/SagafroKichigai/status/731668840900263940 DLang comic strips ------------------ e.g. "Getting into Phobos": https://twitter.com/DlangGuy/status/639529181978697728 Where to go from here? ---------------------- The D-Man has already found its way into some of our documentation pages: http://dlang.org/overview.html http://dlang.org/spec/iasm.html http://dlang.org/spec/contracts.html and I argue that it helps to make those pages more unique, vivid and memorable! Imho we should start to embrace the D-Man as our official mascot (like the Gopher for Go) and many of the specification pages (and the new Dlang Tour pages) would profit from similar drawings. This is not intended to spark a huge discussion, as I am quite aware that some see the D-man as childish and a negative way to represent D, but for more "professional" use cases we have the awesome, new D icons from Sociomantic. Get involved ------------ It's proposed to use #DLangMan in the future, s.t. English readers can also enjoy the D-Man content. Moreover there are some Twitter accounts that are extraordinary D-man evangelists: https://twitter.com/simd_nyan https://twitter.com/DlangGuy (DLang comic strips) https://twitter.com/meiz_sandwich https://twitter.com/d_man_bot (retweets D-Man content) As mentioned I don't speak Japanese, so I would be quite interested if someone from this movement could explain the history or give a better summary.
This is definitely a compiler bug. It is reported as https://issues.dlang.org/show_bug.cgi?id=16142 and as you can see, there is a P.R. in the process. That should allow you to disabled copy of the struct for good.
Multiple people told me that `opAssign` is not supposed to propagate to container structs, so I am not sure if this is currently considered a bug or a feature.
This my library has about 400 functions from Qt and is quite efficient for small applications. https://github.com/MGWL/QtE5 Small video about QtE5 and id5 written on its basis - an example of use. QtE5 on Mac OSX https://www.youtube.com/watch?v=JBA4vkT5uKE 
It sounds like you figured it out. Instead of doing the calculation once, and accessing it via a fast lookup, you're recalculating it multiple times. Iota may have some garbage collection overhead too? How many times are you using .front?
[countUntil()](https://dlang.org/phobos/std_algorithm_searching.html#countUntil) is what you're looking for!
[countUntil()](https://dlang.org/phobos/std_algorithm_searching.html#countUntil) is what you're looking for!
http://code.dlang.org/packages/iupd http://code.dlang.org/packages/nukleard iupd removes all deprecated items in IUP, current version is IUP 3.18. nukleard may have some bugs in name mangling. Does a struct's field name like `null`, i changed it to null_, may be issue? Can pragma(mangle, "name") help in this context?
I submitted the question to W/A, you're welcome to weight in: https://github.com/dlang/dmd/pull/5854
Ranges are lazy, so they only are evaluated when used. In your example, if you time the `auto abundants = ...;` line, it should be ridiculously low. However, if you time it with array, you'll see it will be close to 123ms. That's because `.array` goes through all the value and evaluate them once, so `abundants` becomes a cached copy of the result. I guess here you are expecting ranges to be cached somehow, but they are not. As a result, iterating multiple time over the same range will result in the processing being repeated. Think of a range as a pipeline you build, and that gets passed items one by one afterwards. Precision: For the simplest of the range (`InputRange`), there are 3 primitives (`empty`, `front`, `popFront`). `popFront` is actually what does the work, `front` and `empty` should be pretty computationally cheap.
Hi, I just wrote a brain-fuck trans-compiler that works at CTFE. It is at https://github.com/UplinkCoder/bf-ctfe I am using it to profile my CTFE-Engine. However it also nicely demonstrates the power of CTFE. I will be uploading a video describing how it and why it works shortly. Feel free to leave comments. 
Sorry for short notice but we're meeting at 7pm California time: http://www.meetup.com/D-Lang-Silicon-Valley/events/231917495/ Among other topics, Jason White will introduce Button, his build system: http://forum.dlang.org/thread/uhozcvatvyztfuhivrjq@forum.dlang.org Don't expect a proper presentation as he had very short notice as well; it will be more like a fireside chat. :) (Note: Jason will be able to connect at around 8pm.) I will post Google Hangouts link here at the start of the meetup. Ali
Not that long ago, Dan Printzell announced his D OS Kernel, PowerNex [1], in this forum. It is now the subject of the first project highlight on the D Blog [2]. [1] https://github.com/Vild/PowerNex [2] http://dlang.org/blog/2016/06/24/project-highlight-the-powernex-kernel/
Hello Dland. I just wanted to let you know we just released the first D-related projects as open source. Makd is a a GNU Make library/framework to build D projects (I know there is a lot of hate towards Make, so I'm not sure if this is good or bad news for the community :-P). https://github.com/sociomantic-tsunami/makd Also, even when it can be used to build D2, it defaults to use the `dmd1` compiler, but it can be easily change by just overriding a variable (see https://github.com/sociomantic-tsunami/makd#d2-support for details). The d1to2fix tool is a (D2) tool to do the final steps to convert D1 code to D2. It is based on libdparse and dfix and it's been a key part of our transition. Although for the rest of the community it might just a curiosity. https://github.com/sociomantic-tsunami/d1to2fix These are all dependencies to release our Ocean library, which we still aim to release late next week, hopefully fulfilling our promise to make it in June :) Thanks, and comments are welcome!
After watching Andre's sentinel thing, I'm playing with strlen on char strings with 4 terminating 0s instead of a single one. Seems to work and is 4x faster compared to the runtime version. nothrow pure size_t strlen2(const(char)* c) { if (c is null) return 0; size_t l=0; while (*c){ c+=4; l+=4;} while (*c==0){ c--; l--;} return l+1; } This is the timing of my test case, which I can post if anyone is interested. strlen\Release&gt;strlen 2738 681 
makes sense. i'll try to pay more attention to when i'm using a range lazily
i decided to make some noise about those, as people may thinking about doing the ports themselves, and effectively double (or triple, or...) the work. so, here they are: * Vorbis decoder[1] (stb_vorbis port), PD; * FLAC decoder[2] (drflac port), PD; * MP3 decoder[3] (minimp3 port), GPL. they may or may not work for you, i don't know. [1] http://repo.or.cz/iv.d.git/blob_plain/HEAD:/stb/vorbis.d [2] http://repo.or.cz/iv.d.git/blob/HEAD:/drflac.d [3] http://repo.or.cz/iv.d.git/blob/HEAD:/minimp3.d
Ali put together a guest post for the D blog on how he fell into to writing a Turkish tutorial on D that later became one of the best known resources for learning the language. Long live 'Programming in D'! http://dlang.org/blog/2016/06/29/programming-in-d-a-happy-accident/
yes, it's me again. hello. this time i ported NanoVG[1] drawing library (only OpenGL2 backend) and OUI[2] intermediate UI library. they require some modules from Adam's arsd library[3] to work -- mostly simpledisplay for screen setup and minimal OpenGL bindings, and arsd.png to load png images. one can also use my jpeg decoder to add jpeg support. ttf rendering powered by FreeType: feel free to take Derelict bindings, and change one import in "fontstash.d". this time the things are not single-file ports, though. have fun and happy hacking. ah, i forgot link to ports! here they are: NanoVG and OUI[4], demo[5]. p.s. default dmd flags does ~35 FPS on OUI sample. but dmd -O, even without inlining, does solid 60 FPS. [1] https://github.com/memononen/nanovg [2] https://bitbucket.org/duangle/oui-blendish/overview [3] https://github.com/adamdruppe/arsd [4] http://repo.or.cz/iv.d.git/tree/HEAD:/nanovg [5] http://repo.or.cz/iv.d.git/tree/HEAD:/nanovg_demo
I like that there is a foundational book for D but I have some complaints with this one in particular. There are little to no exercises, especially later on in the book when he is introducing more complex concepts. It's very theory-based reading. No real practical application to anything. So it leaves a reader/learner wondering, "this is all great, but what do I actually do with this knowledge? How can I make something and show it off or get a job?" 
Hello again Dland! I'm happy to finally announce the open sourcing of our Ocean base library, just it time to keep our word and make it in June ;-) https://github.com/sociomantic-tsunami/ocean To quote the README: --- Ocean is a general purpose library, compatible with both D1 and D2, with a focus on supporting the development of high-performance, real-time applications. This focus has led to several noteworthy design choices: * Ocean is not cross-platform. The only supported platform is Linux. * Ocean assumes a single-threaded environment. Fiber-based multi-tasking is favoured, internally. * Ocean aims to minimise use of the D garbage collector. GC collect cycles can be very disruptive to real-time applications, so Ocean favours a model of allocating resources once then reusing them, wherever possible. Ocean began life as an extension of Tango, some elements of which were eventually merged into Ocean. --- Please consider this as a very early release, this is why we are "branding" it as a "preview". This is basically because, despite being working on the open sourcing full steam since DConf ended, we couldn't manage to set up all the infrastructure to be able to put all our development efforts in the public repo yet. So unfortunately the main development will still happen inside Sociomantic for this first phase (we'll only synchronize releases). When this will switch finally happens will depend on how much work it would imply to build a public infrastructure (mainly for automatic testing), and honestly, what's the community reception (we understand it might not be all that tempting being a D1 project that gets automatically converted to D2, thus not very idiomatic D2 :). Anyway, the main big step is done. You can take a look at the code, use it or steal parts of it if you find them useful (although please have a look at the licensing terms, even when all our code is Boost, there is code inherited from Tango that isn't), criticize it, and if you are really nice, fill issues and make pull requests! Also, in the near future we plan to write a blog post explaining a bit more about what Ocean is about, we'll let you know when it's ready, but we didn't want to delay the release for it :-) Thank you!
http://code.dlang.org/packages/unit-threaded After merging code from Robert's fork I added some support for property-based testing. There's no shrinking yet and user-defined types aren't supported. Right now most if not all primitive types are, as well as string, wstring, dstring and arrays of any of them. Here's a simple example that is hopefully self-explanatory: @("sorting int[] twice yields the same result") unittest { import std.algorithm: sort; check!((int[] a) { sort(a); auto b = a.dup; sort(b); return a == b; }); } Essentially, call `check` with a property function and it will get run (by default) 100 times with random inputs. Multiple parameters are supported, but the function must return bool. I wrote this today to test cerealed, my serialization library: @Types!(bool, byte, ubyte, short, ushort, int, uint, long, ulong, float, double, char, wchar, dchar, ubyte[], ushort[], int[]) void testEncodeDecodeProperty(T)() { check!((T val) { auto enc = Cerealiser(); enc ~= val; auto dec = Decerealiser(enc.bytes); return dec.value!T == val; }); } That's running 100 auto-generated tests for each of those 17 types, checking that if you serialize and then deserialize you should get the same value back. Not bad for 12 lines of code, huh? Destroy! Atila 
//scone, Simple Console Engine is a Windows console API, made for easier CLI application development. https://github.com/vladdeSV/scone Today, at v1.1.0, some pretty big additions for scone were introduced, the two main points being * UI libray * Localization Biggest addition is the UI library, which allows for much simpler ways to handle certain elements of an application. This includes simple labels, text fields, options etc, which can be altered in a variety of ways. Elements are accessed in the same manor as android applications does it `auto t = ui.elementById("screenText"); t.color = Color.yellow;`. Example of login screen: http://i.imgur.com/s6eSIDW.gif Second point is localization. Different keyboards have different layouts. This is why .locale files are introduced, which follows a csv pattern. Corresponding key matches a lowercase and uppercase/shifted character (read as ubytes). For example in en_US.locale: "key_2 2 @" can be found. Currently there is only one .locale (en_US). These will hopefully be expanded upon soon. Feedback is always appreciated! https://github.com/vladdeSV/scone/releases/tag/v1.1.0
Main changes over 0.7.28: - Drops support for DMD frontend 2.066.x and below and adds support up to 2.071.1 - Removes all deprecated functionality, as well as the libev driver - Contains considerable performance improvements for URLRouter - Contains a critical fix for the Json struct, which was prone to dangling pointers due to wrong alignment on x64 - Hopefully removes all instances of "Manually resuming task that is already scheduled" assertion failures - A number of improvements to the HTTP sub system (see the change log) - Json and Bson now output a hand-crafted deprecation message, because the deprecated keyword turned out to not have an effect for opDispatch. The next version will remove opDispatch completely. - Full list of changes: http://vibed.org/blog/posts/vibe-release-0.7.29 Homepage: http://vibed.org/ DUB package: http://code.dlang.org/packages/vibe-d/0.7.29 GitHub: https://github.com/rejectedsoftware/vibe.d Version 0.7.30 has already been in parallel development for a while and, among other things, adds a new authorization module for the web/REST interface generators. If you are interested in this, please check out the latest alpha version so that we can make any necessary adjustments to the design before 0.7.30 is final.
I am interested, how does D compare to Go lang?
Hello, dlang-requests v0.2.0 released. Major feature improvement: 1. Nonblocking vibe.d sockets support. That means you can safely use dlang-requests in vibe.d applications. Thanks to Johannes Pfau (https://github.com/jpf91). Minor improvements: 2. Dump network data when verbosity level&gt;=3 3. Throw exception when maxRedirects reached instead of returning redirect status code. dlang-request is D http client library, inspired by python-requests. Project code: https://github.com/ikod/dlang-requests
Guillaume Piolat (a.k.a p0nce) talks a little bit on the D Blog [1] about using D for his Auburn Sounds audio plugins[2]. [1] https://dlang.org/blog/2016/07/07/project-highlight-auburn-sounds/ [2] https://www.auburnsounds.com/
The idea behind this (LDC-only) package is to reuse the existing body of code and documentation that exist for C++ programmers, using the Intel x86 intrinsics name. Available through DUB: http://code.dlang.org/packages/intel-intrinsics While the syntax and portability are worse than vanilla LDC vector support, this allows to use the Intel's guide here: https://software.intel.com/sites/landingpage/IntrinsicsGuide/ So far the syntax looks pretty much identical with C++ compilers like MSVC, clang and ICC - except for the shifts instructions. 
https://wiki.dlang.org/Vision/2016H2 -- Andrei
After quite some preliminary discussions and preparations, new D Improvement Proposals handling process is finally happenning. Please read description and explanation here: https://github.com/dlang/DIPs ## Rationale There are two main goals for going this way: 1) Ensure communication between language authors and DIP authors, establish better sense of actually contributing as opposed to simply throwing ideas into the black box. 2) Improve overall quality of DIP documents to the point where language authors can reasonably review them without spending too much time on trivialities. Additional benefit I am hoping for is to have a centralized place to subscribe to learn about all coming major changes coming to language for those who can't keep up with NG regularly. ## Old DIPs Right now https://github.com/dlang/DIPs repository contains archive folder with already implemented proposals imported from wiki (please tell me if there are any other already implemented DIPs that were not marked as such in wiki). All authors of existing DIPs who want to keep pursuing the idea will have to re-submit them as a pull requests towards new repo. This is required so that we can filter abandoned proposals and focus on documents that have active authors backing them. ## DIP manager I will act as a DIP manager for the time being. Please note that role of DIP manager does not imply any decision power regarding DIP approval, it remains an exclusive domain of language authors.
Hi everyone (= I've just added a new proposal to add a new attribute to ensure TCO is applied. The proposal is really simple, but I'm clueless on how to implement it and also interested on getting feedback on it. The proposal it's ready for merge on the new [DIPs repo](https://github.com/dlang/DIPs/pull/6) -- Dietrich
That... is really unflattering for the D community.
Wow, everyone's so toxic. Haven't browsed D forums for a while and got used to the friendliness of Rust community, so this is just horrible.
sorry for the short notice, but i'm glad to host Ilya with a talk on scientific computing with D. more infos here: http://www.meetup.com/de-DE/Zurich-D-Programming-Language-Meetup/events/232534480/?eventId=232534480
You specifically are defining a delegate variable called toString(). This would not be possible if it was a normal member function. Since delegate variables can be called with the same syntax as normal functions, you end up with this (since writeln is a template)
I'm looking forward to this talk, good luck Ethan!
It was time for another Core Team Update on the D Blog. This time around, Martin Nowak shares how he got involved with the DMD release process and where you can learn more about it. The post is at [1] and the reddit thread at [2]. Now that Vladimir and Martin have gotten their updates out of the way, I foresee some prodding, cajoling and arm twisting in my future for the next couple :) [1] https://dlang.org/blog/2016/07/29/core-team-update-martin-nowak/ [2] https://www.reddit.com/r/programming/comments/4v68ty/from_the_d_blog_martin_nowak_on_the_dmd_release/
Hi, I'm proud to announce that std.experimental.xml v0.1.0 is available on DUB [1]! This is the project I'm working on for GSoC 2016. It aims to become a substitution for Phobos std.xml. Now you can easily try it and provide some feedback. I will soon create a WIP PR on the Phobos repository. I suggest you to depend on ~master instead of v0.1.0, as bugfixes and enhancements are added on a daily basis (v0.1.0 is already one commit behind!) Current limitations: 1) The documentation [2] is very limited; 2) Some advanced DOM methods are not completely implemented; 3) Some advanced features (e.g. DTD validation, namespace checks) are not yet available. If you find any issue / have any suggestion, please file an issue on Github [3]. Thank you. [1] https://code.dlang.org/packages/std-experimental-xml [2] https://lodo1995.github.io/experimental.xml/ [3] https://github.com/lodo1995/experimental.xml
edit: This discussion started at the [NG](http://forum.dlang.org/post/ydareropqdcnrbntktlc@forum.dlang.org) as yet another _personal attack_ in an off-topic thread happened. Maybe we can just actively encourage a discussion to move to reddit once it hits the OT barrier or is OT from the start. In short: OT should move to reddit.
I like the idea of having these discussions here as opposed to the NG. This is a good place for bikeshedding and discussions about the language. The NG is for answering questions (learn), discussing language development (general), and important announcements (announce). Moving the noise here makes a lot of sense to me. As for the four disadvantages, this is our subreddit, so we can do whatever we want. We can repost outdated topics if we want, and the mods decide what gets deleted. Those that don't like Reddit are free to continue to use the NG if they want. But as I said above, the NG isn't really intended for the noisier discussions anyway.
Another idea would be to limit the bot. For example, only post stuff, which has more than 20 replies or something. The bot does this in /r/hackernews
&gt; maybe we can find a way to compromise? I hope so. To start you know that there is an RSS and NNTP interface to the NG? Maybe you can tell us what exactly you like about the reddit bot?