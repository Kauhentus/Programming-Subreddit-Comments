I disagree that your solution is better. The count value is just another place for you to forget to update and cause a bug. [Sebaall's Solution](https://www.reddit.com/r/swift/comments/5pbiaa/5_core_swift_competencies_before_you_get_a_job/dcpz2pq/) is the best. Still not foolproof but does not add another place to maintain. Also, I love design patterns and principles, but I will always break them for specific scenarios. I won't make my life harder just to abide strictly by a set of guidelines.
Seball's solution is significantly better. In either case, I'd argue that mine is still better than introducing an unrelated case and forcing it to be handled everywhere else in the good.
I think throwing the baby out is just fine. Language complexity harms readability and OO has a heavy complexity cost.
What aspects of OO are you talking about? I think you might be confusing subclassing (for example) as the entirety of OO principles, when in reality there are OO principles in almost all aspects of coding. Or perhaps you're confusing heavy use of abstraction with all uses of abstraction. Most would agree, for example, that the Java or C# WS/SOAP APIs from the 2000s were grossly over abstracted. But no one complains about subclassing an abstract or base model or view class. 
[removed]
Absolutely, but that means you are adding conditional checking which in turn adds complexity. The better way would be to either assert or just have a convention where a force unwrapped optional means that we know what we are doing. There are plenty of valid use cases of the `!` operator in swift. Encouraging people never to use it is just one sided and not very helpful. 
This is great guidance thank you!
So the only difference is that you get a certificate?
That's what I mean by composition being a better approach - it separates the general String type from the specific use-case validation. A validator could be initialised with a String (wrapping it), then provide a bunch of Bool variables indicating whether the enclosed string passes a particular validation rule. I don't think we're disagreeing here. Perhaps I'm misusing the term composition? I use it to mean the gaining of functionality from String by having it as a property (as I explain above), rather than using a more direct method such as inheritance or extension.
Absolutely :)
You can access iCloud Drive in Terminal with the follow command: cd ~/Library/Mobile\ Documents/com~apple~CloudDocs
Mines on the 13th page. Woo!
A UIImageView extension that can detect and focus on faces. https://github.com/BeauNouvelle/FaceAware No more asking the user to crop and adjust their profile pictures. 
Yup! I eventually found it that QR Codes are basically just text Strings with a format
I choose to read this post as slightly tongue-in-cheek. Some people really like the kind of partiality afforded by !. The point being danced around here is that its use is *always* a code smell. Yes, ! can act as an assertion that an Optional value isn't nil, but it also signals that you're. 1) OK to crash hard if you're wrong 2) OK to get little more than the system default error when that crash occurs A little custom error handling goes a long way. Use the myriad of other unwrapping syntaxes whenever possible, use `fatalError` or an `Error` value with a nice custom message to make your life easier, check every once in a while to see if there are places you thought you needed ! but you can really just do without it. *A value is always better than `.none`*
Its live now? 
That's clever, but given that it only works properly for a subset of raw value Int enums but is implemented as an extension that unconditionally gets added to all such enums whether it provides the correct behavior or not, I'm not sure I would call it better.
I agree with you. Especially if you're using Storyboards in an iOS app, or have some other thing where you can't override the initializer, force unwrapped objects provide a very clear way to users of your API that a field is required.
Great point, I agree you should add a helpful message whenever possible. However, I still assert there are scenarios where you have no expectation of it ever being nil and therefore would have no helpful message to provide. Also, a call stack is an extremely valuable thing to get. I still believe the ideal number of forced unwrapping in an app is 0, but I don't like dogmatic programming principles. We program in the real world and not in an intellectual exercise. Sometimes what some would consider to be "lazy" is the proper way to go when all productivity and business considerations are taken into account. My intention of participating in the developer community is to give as much information as I can to help each developer make their own informed decision, not prescribe "paint by numbers" programming.
You can't update a cell if it isn't visible. If the user starts a download and scrolls past the table cell that is currently updating, you will crash. So you need to check if it is visible first before you update it.
I too program in the real world. I'm working on a very huge project with 35,000 or so lines of Swift code. Plus, my company has _several_ Swift projects, all of which go to the app store and none of which have a single force unwrap in them. Our implicitly unwrapped optionals are limited to `IBOutlet` properties (which I'm still not a big fan of).
Please look carefully either at the quote I pulled from the doc or from the doc itself, cell for row **will return nil if the cell is not visible**. So, you won't be updating a cell that isn't visible.
Oooo I misread the initial comment, yeah, we're saying the same thing. I thought you had said that "this kind of extension would be the most correct from an OO perspective"
So I profiled it and it actually looks like the algorithm isn't having much of an effect at all. It's actually the refreshing of the view which is taking most of the CPU performance.
You can probably just get away with called tableView.reloadData(). If your cellForRowAtIndexPath method updates the downloading text, and the data array it is pulling from is continually updated by your download protocol, then you don't need to go and individually update cells. UITableViewDataSource will handle if the cell is visible or not for you. So this method may be unnecessary all together. You can just call reloadData() and it will check what cells are visible and update those cells only.
Thank you.
With all respect, you are just guessing. Modern apps are so complex and multi-layered that there's just no way to guess. That's why Apple provide Instruments. That's why practically every poster here has suggested using it to profile your code. Note that I'm not saying that reloadData will be necessarily be faster; I'm saying science is your friend.
I realize that. In another reply I did mention that I ran the profiler and it doesn't look like updateProgress is using all that much CPU. The draw calls seem to be using most of it. I'm not even using any of the UITableView delegates to refresh the UI, just grabbing the cell directly and updating it's UI. So calling reloadData everytime `updateProgress` is called would certainly be more expensive. Which is many times per second. The main reason I asked was because I feel the algorithm as a whole could be done a better way, I'm currently not having performance problems. Essentially having 2 loops called every time to find an indexPath seems like it could be heavy.
https://developer.apple.com/reference/uikit/uitableview/1614935-reloadrows
If I understand what you want to do correctly, you're overcomplicating things by using touchesBegan and friends. Add a UIPanGestureRecognizer to the view that contains the image view. In the gesture recognizer's handler method, if the recognizer's state is .changed, obtain the translation in the containing view (given as a CGPoint) by calling https://developer.apple.com/reference/uikit/uipangesturerecognizer/1621207-translation. Once you have the translation, move the image's origin by the translation, i.e.: imageOrigin.x += translation.x imageOrigin.y += translation.y Finally – and this is important – you need to reset the gesture recognizer before returning from your handler by calling https://developer.apple.com/reference/uikit/uipangesturerecognizer/1621206-settranslation with CGPointZero and the same containing view.
Doesn't seem like any of the other replies here are actually addressing your question of how to speed up the algorithm. Right now you have an `O(n^2)` algorithm because of the nested array. If you change your `urlArray` to a dictionary `[identifier(String): episodeIndex(Int)]` then you can change the `urlArray.index(of:)` call which takes `O(n)` time to a dictionary lookup in `O(1)` time. The new algorithm would then have `O(n)` time.
Just using that as an example. The point is, by doing this measurement, you know that instead of having to optimize for performance, you have the opportunity to optimize for simplicity and adapting to future changes.
Thanks! This is exactly what I was looking for!
If you think your code is unreadable otherwise, please feel free to add the optional `self.` wherever you like. I, for one, am careful to name my locals &amp; properties such that there's no confusion. For example, I often use verbose names for the properties, rather terse names for local vars. Even though I usually end up omitting `self.` where I can, I believe my code to extremely readable.
Given the declaration: var items = [String]() Then the code: let item = self.items[indexPath.row]! will not compile. The subscript function on arrays does not return an optional (unless the array contains optional). Instead, if you ask for an out of bounds index, you're program will just crash (and there's nothing you can do about that... but you will get a more helpful error message). &gt; even though by definition that can never happen This assertion is very much wrong. At best, it requires some assumptions. You can make this more accurate if you change the `items` declaration to look more like this: var items = [String]() { didSet { whateverTableView.reloadData() } }
Yep. can be frustrating 
[This post from Ray Wenderlich](https://www.raywenderlich.com/121834/apple-pencil-tutorial) was very helpful for me when I was first developing for the Pencil.
Hi minhphan9311! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/5plczf/ios_game_rapid_roll_the_red_ball/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
You've gotta be kidding me :P I just finished making my own auto updating swift docker image to work with ubuntu 14.04 and AWS ECS at a hackathon just yesterday! Lol good work though :) wish it came three days earlier 😝😝😝
that's one of the reasons why i don't use storyboards
How much time have you spent with the others, and why do like Kitura over the others? So far I've only tried Vapor, but I really like it. Next on my list is Perfect, and tbh, Kitura was very low on my list. 
Vapor recently added support for custom table columns, and it also allows raw database queries.
example: router.post("/", middleware: BodyParser()) Get the data: if let value = request.body{ if case let .raw(data) = value{ // do anything with your raw data. } } But if the client upload using "multipart" to upload multiple files and text, then you need to do abit more.
I can appreciate the effort. However think a simple switch to match on subclasses instead of two if lets solves it nicely. 
Yes its meant for server side/backend swift development
Terminal wouldn't let me cd in, it wouldn't accept the command that I was giving it but, I was able to figure it out with help from /u/Zumoarimiri 
The first thing is bloat. Download all frameworks and swift-build them, then check the size of every folder and report back. Second is the use of "Node" in Vapor which complicates matters to the extreme, making it easy for noobs but hard for experts because there is no way (that I know of) of detaching the training wheels, they're pervasive, needed for templates and databases and a total pain in the arse to debug. While in Kitura we use [String: Any] and we take care of it all, templates, databases, etc without any sweat, conversions or hoops. The only (and only) advantage of Vapor over the rest was the ease of deployment but now Kitura has stepped up the game and made it as easy as Vapor with automatic deployment, github pairing, or even from the CLI, easily deployable on any cloud foundry like Heroku, Bluemix, AppEngine, AWS, etc. Just a bit of more documentation, tutorials and samples to make it easier for noobs to pick up, specially in other foundries not only Bluemix (understandable bias), exactly where Vapor wins at the moment but not for long. Will I drop Vapor in favor of Kitura for my next projects? Yes! Will I continue using Vapor in the future? As soon as they get rid of Nodes, Fluent, and every single training wheel and crutch (make them unplugable) and start a diet to make it slim. Perfect was the first framework I tested and while I liked it I honestly don't remember why I dropped it in favor of Vapor right now, perhaps the training wheels I needed at the moment? Zewo was too incomplete at the moment. And Embassy is the one I am testing right now to have a Bottle/Flask replacement for smaller projects. Again, people tend to take opinions as sacred words and no, that's just my own and very personal path to playing with all frameworks, perhaps I missed important stuff, perhaps I faced different challenges. YMMV. Change my mind.
Such a solution, while viable, requires more boilerplate and is less expressive. See: func configureCell in https://github.com/kickstarter/ios-oss/blob/master/Kickstarter-iOS/DataSources/DiscoveryProjectsDataSource.swift
&gt; I don't really understand your question... the two are orthogonal. You can do FRP without MVVM (FRP predates MVVM by many years), and you can do MVVM without FRP (see .NET/WPF). The question is about the decomposition. Who would create signals without MVVM for data fetching tasks? Model? Who would be responsible to adapting signals from model to specific views, that would observe these signals? We have a our way to do that, but I'm interested in how you envision that. &gt;Need a more detailed example I think. What does it mean for "each model to have tons of ways of processing it from the data POV"? Suppose we have a client entity in the bank app. It has laods of things you could do with it, like create/update/delete bank account, interact with other users of the system (e.g. get some special offers and apply some special offers to the client), etc. Just iamgine, that there are like 3k LOCs of such behaviors, that process the model in conjunction with other entities. So, what I'm asking is, how would you decompose the model in that case? VC and views are really quite specific UI-wise, but the model with all of its data processing behaviors is shared between loads of VCs. What I'm asking is how would you decompose such a large model behavior-wise using plain MVC? &gt;With the argument being that, well if each approach adds additional complexity, and "complexity is bad", why do we even bother with any organization at all? Precisely my thoughts, when people insist, that they don't want to add additional complexity. &gt;Something with zero structure (let's say your classic spaghetti code that beginners write) is simple due to its lack of structure, but it has low maintainability because the code is scattered and disorganized. Yep, that's my argument. Moreover, such a code tends to have a lot of duplication. &gt;Then you keep on adding more structure, but actually maintainability does not continue to improve, it begins to decrease, due to the additional overhead of the extra classes being created that you have to jump around to actually follow the flow of execution. But that's the price you have to pay, don't you? You either decompose the entities, get a higher deduplication rate, but it's harder (not hard, harder) to get the code. On the other hand, using inheritance and composition and stuff like that, you organize the code with less duplication. The less dupilcation you have, the easier it is to modify such code, even, if it's in separate entities. Morever, it's easier to refactor such code. Just imagine the situation with more sophisticated examples from this article, as the functions are small and composable, it's much easier to modify them or move them to other hierarchies. From what I envision, your term maintainability is more about the ease to start modifying something right away in one specific place, then to reorganize and rework a large chunk of the codebase. &gt;But then you layer on more and more abstraction, and maintainability drops once again. It drops again for one specific case of this simple sample. Because, it's harder to get into. On the other hand, I could abstract away views method, as an example and disable in subclasses or composition different views, whiel only modifying one small method, instead of copy-pasting the code everywhere. As I previously stated, you shouldn't decompose it like that right away, but only when the duplcaition arises. And in that case it's better and easier to abstract right away, than to duplciate the code several times and then start abstracting it, as it becomes more and more unmanageable.
Yes, yes and yes. It makes easier for developers to deploy different apps with different components to different cloud foundries, packaging everything in a "container" that can be run independently from the environment it is hosted on or the resources available to it because it is self-contained. Say you want to deploy a swift app to Google Cloud but Google doesn't support Swift? Easy, make a container, upload it and presto. Google doesn't care, it will enable the container isolated from their own infrastructure with whatever components it needs to run. It's up to the host to allow interactivity among different containers, components and the services they provide. They look daunting at the beginning but once you get the gist of it you see their importance and why the well deserved hype around them.
There is no way to write it better. You just don't use these features. You use optionals instead. I don't think my readers are that clueless, that I insult them by mention that.
Finishing v1.0 of a client project. Requirements have been constantly changing, but eventually, we got here. :) The app will be released very soon.
I'm working on my next Pluralsight course "Design Patterns in Swift: Structural". This one is going to be the second course of a three-part series. The first course called [Design Patterns in Swift: Creational](https://app.pluralsight.com/courses/design-patterns-swift-creational) is available on Pluralsight.
I've been wanting to get started on backend development with Kitura but I've had a question so far: how do you use persistence? I guess there is no Core Data!
&gt; As someone who has been involved with the development of programming languages, do you think it is still possible to come up with a modern-day replacement for BASIC that can operate in modern GUI environments? &gt; It seems like all attempts since we went GUI (aside from maybe early VisualBASIC and Hypercard) have been too complicated, and all attempts have been platform-specific or abandoned. With the emphasis on coding in schools, it seems like it would be helpful to have a good, simple, introductory language like we had in BASIC. &gt; CL: It's probably a huge shock, but I think Swift could be this language. If you have an iPad, you should try out the free Swift Playgrounds app, which is aimed to teach people about programming, assuming no prior experience. I think it would be great for Swift to expand to provide a VisualBASIC-like scripting solution for GUI apps as well. No. Swift is not that basic language that can attract millions of hobbyists. It is perfect enough for what it was created for the Apple ecosystem but there is still room in the programming world for a killer language, dynamic, interactive, type-inferred, non-curlied, with invisible optionals and that never ever crashes on nil. A mix of python and ruby with a powerful IDE like Xcode and a simpler detachable editor like Sublime. A Swifty sister.
Could you please elaborate on what you mean by "supporting right to left languages"? Everything should 'just work', provided you add that language as a supported localisation in your Xcode project. Did you see the "Flipping Cocoa Touch Views Programmatically" section of that guide? Once again if you're using Auto Layout in code, then you should be fine. Otherwise, you can use ```UIView.effectiveUserInterfaceLayoutDirection()```.
Awesome! I'm glad to hear you enjoyed the book :)
Please, marry me. Exactly my thoughts, when I wrote the article and forbid the team to use force no matter the reason.
We seem to be talking through each other and are in violent agreement. The "tongue in cheek" aspect doesn't mean I disagree with the article, it means I disagree with the "BANHAMMER ALL THE BANGS" way it was written. 
Which is it?
Oh, FaceAware!
i really don't understand why a lot of devs use/recommend GCD. even apple uses nsoperation, which is a lot more plesant to work with.
Don't know why you're being down voted for an opinion. QuickBasic is what got me into programming when I was a kid. With graphics and sound built in and tons of free source to play with it was super easy for me even as a 14 year old to make some fun stuff. I haven't seen a language come anywhere close to how easy it was in QuickBasic. There was no runtime to install, no big downloads, everything was "just built into" QB.exe. There was no hand holding but you didn't need it.
I want to know when we will be able to use Swift Package Manager for iOS and macOS apps.
Different things, though I can see how you would get confused. `NSOperationQueue`, for example, is built on top of GCD.
you could ofc use lisp or something else equally weird, the disadvantage of all those things that you mention is that if you solve them you'll have a beautiful but unusable slow language ;-p
No problem! Nope I'm just some other Andrew :)
&gt; The question is about the decomposition. Who would create signals without MVVM for data fetching tasks? Model? Who would be responsible to adapting signals from model to specific views, that would observe these signals? You're speaking very abstractly here, and I'm not actually sure what this has to do with my original statement. My original statement was that MVVM isn't appropriate on iOS because of lack of data binding support compared to .NET. In .NET, views dispatch events to communicate with view models, and changes to the view model are reflected in the views through data binding. No FRP is necessary. In Swift something like RxSwift/ReactiveCocoa is often used to do MVVM but that's because UIKit doesn't support data binding so third-party tools are necessary. &gt; Suppose we have a client entity in the bank app. It has laods of things you could do with it, like create/update/delete bank account, interact with other users of the system (e.g. get some special offers and apply some special offers to the client), etc. Just iamgine, that there are like 3k LOCs of such behaviors, that process the model in conjunction with other entities. &gt; &gt; So, what I'm asking is, how would you decompose the model in that case? VC and views are really quite specific UI-wise, but the model with all of its data processing behaviors is shared between loads of VCs. What I'm asking is how would you decompose such a large model behavior-wise using plain MVC? Are you asking where the business logic goes when using MVC? Well, it doesn't belong in controllers because it needs to be reused, and if it spans multiple models (like say making a deposit involves a bank Account, Customer, and Transaction) it doesn't belong in any of those entities either. A good approach is to pull the business logic into a [Service Layer](https://martinfowler.com/eaaCatalog/serviceLayer.html), which is dependency injected into the controllers that need it. When referring to the model in MVC, I'm not referring to specific model entities (Accounts, Customers, Transactions, etc), I'm referring to the model *layer*, which encompasses those entities plus any other classes used to manage/persist them. &gt; But that's the price you have to pay, don't you? You either decompose the entities, get a higher deduplication rate, but it's harder (not hard, harder) to get the code. On the other hand, using inheritance and composition and stuff like that, you organize the code with less duplication. The less dupilcation you have, the easier it is to modify such code, even, if it's in separate entities. Morever, it's easier to refactor such code. Just imagine the situation with more sophisticated examples from this article, as the functions are small and composable, it's much easier to modify them or move them to other hierarchies. From what I envision, your term maintainability is more about the ease to start modifying something right away in one specific place, then to reorganize and rework a large chunk of the codebase. Well, really I'm referring to making any changes, either larger or small. Do you understand my underlying point, though? Adding some structure improves maintainability, but adding too much structure actually makes things worse, so you should find the right balance? Otherwise you end up with stuff like VIPER which is extremely complicated and actually makes your code less maintainable? Basically, it's not a linear scale. Going from unstructured code to MVC is worth the tradeoff because it's a small increase in complexity in exchange for a large increase in maintainability. But going from MVC to VIPER is not worth the tradeoff because it's a huge increase in complexity for a decrease in maintainability. So the argument of "why do we bother with any organization if any organization adds complexity?" falls apart because each level of organization requires a different amount of complexity and offers a different amount of benefit.
"Note that at this time the Package Manager has no support for iOS, watchOS, or tvOS platforms." You can use it in macOS.
MySQL, MariaDB, PostgreSQL, Oracle, SQLServer, DB2, and all NOSQL options plus everything in between.
well you can use it for creating a binary but not for creating actual apps (as far as I'm aware)
I agree. See example: override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let identifier = (indexPath.row % 2) == 0 ? "GrayCell" : "PinkCell" let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) switch cell { case let pinkCell as PinkCell: pinkCell.fill(withModel: indexPath.row) case let grayCell as GrayCell: grayCell.fill(withModel: indexPath.row) default: fatalError("Cells not set up correctly!") } return cell } OPs solution just adds to the cognitive load of the developer, which is not good! 
I'd guess after WWDC (around sept for it to come out of beta)
&gt; a compiler that works worth a damn What are your specific concerns here?
Believing that never using the `!` operator will lead to the app never crashing due to a programmer error and instead just leave the app in a state where *"some of the functionality would be absent"* is just as bad as believing that having 100% of code covered in unit tests will lead to no bugs. 
There are already advantages to using Swift in all of those environments. There just isn't a straightforward package manager. Yes there is still a lot of progress to be made in Swift but it is already my language of choice in many circumstances and it has absolutely made me more efficient.
You can pm me anytime and I'll try to help you. But I would recommend using storyboards if this is one of your first projects. It's easier to understand basic concepts like AutoLayout with Storyboards
You listed things you claimed to have learned by saying, "protocols" then "POP" which is an acronym for protocol oriented programming. Implying you seem to think protocols and POP are two different things. Redundancy is not a great way to make people think you have any idea what you're talking about. Also swearing at strangers makes you sound 12. But that's none of my business. 
&gt; The code without syntax highlighting is unreadable; Who doesn't use syntax highlighting? 
Yeah, command line executables but not Cocoa apps.
What's more to an app than a binary and maybe some config files? 
Use a library like starscream, it makes implementing websockets really easy.
I would agree. I started out with Sinclair BASIC in 1981 then moved onto Vic20, C64 etc. and in the 2/386 era started using GW-BASIC and QB and it was great. Comes in for alot of criticism as a language but is great for getting fast results. The problem is nowadays everyone thinks when making software that more features = better (ok or more features == better) and the same goes for languages. Swift just keeps on adding stuff and its a moving target. Core BASIC has remained largely unchanged since its original Dartmouth creation back in 1964. That said we were using QB in the days before GUIs and the proliferation of databases so you need alot more 'plumbing' now. I'll take my rose tinted specs off now.....
I second the other comments. I began by manually defining views and shapes, then discovered the magic of autolayout. Since then it's made my workflow so much faster, more efficient and scalable and I don't waste as much time going around fixing tiny errors.
How do you make sure user does not leave the app?
Not all code bases are perfectly simple. And a stack trace alone isn't enough to narrow down _which_ variable was `nil` and shouldn't have been. Between the stack trace and the source code, you can narrow it down pretty far. And there's a pretty good chance it'll be simple to figure out. But there's no guarantee. Understand too... not every code base is developed by a single developer. Not every code base is limited to just a few thousand lines of Swift code. Some teams are big (too big), and some code bases are measured in tens of thousands of lines. Some projects are exceptionally long running. Some code bases aren't pure Swift. So, when, for example, I'm dealing with a Swift project that also accesses a C++ library via Objective-C wrappers, and on top of that, my class may have any number of instance variables which can be optional, and my function can have any number of arguments which can be optional, and I can declare any number of local variables which can be optional, suddenly the number of optional variables that I might try to force unwrap and that might be nil can get pretty high... and I might not be the dev that originally wrote the code... they dev doesn't work here any more... and why we were force unwrapping that variable may or may not be very clear 12 months later. Sure, you could add a comment for all of your force unwraps.... but then you're adding a comment for all of your force unwraps... and there's not a particularly good way to enforce that besides a super meticulous eye in code reviews and hope you don't miss any. I'm using SwiftLint to not allow any force unwraps in our code base, and now, even if we never look at the logs that come with a nil crash, the stack trace still looks identical (more or less--there's one extra frame in it), there are logs available should we need them, and the comment is effectively forced by the message that is pushed into the fatal error function (which is a lot easier to catch a missing message here than a lack of comment). Moreover, actually forcing developers to not use force unwrapping has actually meant there are slightly fewer paths to crashing in our code base. There are times where someone might have lazily written a force unwrap or a force cast, but using a `guard let` caused them to actually think about what they're putting in the `else` clause, and sometimes, it resulted in things other than crashing. Source: I work on a large team of some of the world's most fully competent Swift developers (who by the way all fully understand the default error message for unwrapping nil) in a quite large Swift code base on a project that has been running for 13 months now. We have zero force unwraps, zero force casts, zero force trys. We're doing fine. EDIT: If we're counting person-years as /u/b_t_s mentions below... my team has easily over 15 person-years of Swift experience and something like 30-50 person-years of iOS experience.
Do you have a length of time as you could emit with a long timeout ? That or have a func that calls itsellf til done func checkValue() { io.emitWithAck { data // Check data and either call checkValue() or the value thats correct. } } emitWithAck allows you to wait for the response. Alternatively could the server not tell you when the water is poured without 'polling' that kinda is the point of sockets ?
upvoted for little prince.
Thank you to everyone who has offered their help i will definitely be asking later today. The reason why I am not using storyboards is because while researching doing it programmatically vs storyboards a lot of sources I've seen online have said that by code alone has advantages such as easier to do when working on a team and that storyboards are harder to use for large apps. neither apply to me at the moment but I would imagine that if I were working on this at a job it would be preferable to do it through code as opposed to storyboard. That was my original thoughts but if many of you are saying otherwise I'll probably rethink that choice
I jut started with swift and programming beyond VBA. I just did a FizzBuzz playground (yay) and I'm finishing a calculator as exercise app.
Do you just have an app idea? Do you have skills to help make an MVP like design? I'm very interested in this and am currently working on a side project that involves politics
At this point, I mainly have an idea but I do have a good amount of experience, resources, and contacts in the investment world (when the time comes). 
Grow up.
Did I say they're the same thing? No. I said *you* think they are two *different* things, which means they are at least somewhat unrelated. Can you be good at POP without understanding how protocols works? No. Stop trying to justify your silly comment and move on. Do you have a job as an iOS developer with no previous programming experience before taking Price's course? I highly doubt that you do.
In general, an idea is not valuable enough to keep it secret, especially at the cost of inspiring someone to help you with it. At least in my opinion, you should be more specific and say what you bring to the table in order to make the idea happen (better than other people). It isn't our job to figure out if this is an interesting idea, it is your job to convince us of that. In this day and age, even if you keep a product idea secret until release, it will still probably be copied within a week anyway. **tldr** secrecy is way overrated; inspire us to join you with specifics
If you're going to not use storyboards let me recommend using the coordinator pattern: http://khanlou.com/2015/10/coordinators-redux/ It has helped me better define object roles and it yields easier to manage ViewControllers. I'd also be happy to help however I may.
The main incentive in the article was, that without calling self you don't actually perceive, that you are using a property, not a field. And in that case you wouldn't cache the call to that property in case you call it more, than once.
Code did not rape you. Grow up and learn to write like a professional.
&gt; Never forcing doesn't save you from any crashes if you replace all instances of a force with a guard let with a fatal error in the else clause. Why would you replace them with fatalErrors? Replace them by disabling functionality, showing meaningful alerts, sending you the alert, so that you would start fixing right away. Moreover, guards are not the only way. Use maps, flatMaps, applys and stuff, use optional chaining. We could be a bit functional in swift, so why not to use that to your advantage?
&gt;Never forcing doesn't save you from any crashes if you replace all instances of a force with a guard let with a fatal error in the else clause. I'm strictly against fataErrors in production code as well. So yeah, Optionals would definitely save me, as I don't kill apps. Instead, I write the code, that, in case something goes wrong, would at least provide a cut down functionality.
&gt; There are times where someone might have lazily written a force unwrap or a force cast, but using a guard let caused them to actually think about what they're putting in the else clause, and sometimes, it resulted in things other than crashing. Could you please provide an example, of when you would actually want to crash the app instead of cutting down the functionality? I've never seen something like that. An alert to the user, disabling some user actions and stuff, that's what I can imagine, but crashing? Yikes.
The problem I describe in my post doesn't require storyboards. You can use segues even if you write your UI programmatically.
How would you solve the problem where we lack generics in a framework that isn't yours? Let's take CoreData for example. I know that CoreData now supports generics, but just a few years ago it didn't. Lets say you have a CoreData entity called `MyModel`. Now you write your fetch request to get some objects from your context like so: let fetchRequest = NSFetchRequest(entityName: "MyModel") do { let myModelObjects = managedObjectContext.fetch(fetchRequest) } catch { // handle error } What you will get from `managedObjectContext.fetch()` is an array of `NSManagedObject`. How would you turn that into `MyModel`?
Where is the download?
I think I figured out how to include the libraries I need. The Swift Playground file, when opened in Xcode, has a Sources folder. You can add the libraries your Playground needs to this sources folder. I'm still struggling with some concepts. Are there any tutorials for working with Playgrounds found on GitHub? &gt;The github project has the library that's needed. I assume this library can be made available to the playground file on my iPad because this Playgrounds github file exists but none of the usual ways I add files to my iPad (Xcode, airdrop etc ) make the library importable. 
Fair point, it just integrates nicely :)
So you use normal optionals for IBOutlets? If so, where do you validate that the connection is properly hooked up?
&gt;Code did not rape you. I do know better, what the code did to me, don't I? And my butt hurts because of the code. &gt;Grow up and learn to write like a professional. Who says that? The person, that hides behind the anonymity and is afraid show his/her code, like a little kitten he/she is? P.S. I do love, how you read all my articles, even considering how shitty they are in your opinion, and then explode with a colorful butthurt. This alone gives me strength to live another day. P.P.S. I do understand, that it's tough, when ones articles suggest, that your code is shitty. Or when someone deals with the problems you never even thought tackling. Reflect on that, improve your code, learn something new and more serious, than Ray Wenderlich tutorials. The butthurt will be gone, I assure you. P.P.P.S. Will you run away once again as soon, as I will ask for arguments. The same as you previously did?
Storyboards forces you out of being able to use initializers to inject your dependencies. It's not _really_ about whether or not you're using segues. It's about whether or not you can write custom initializers for your view controllers that set up the right dependencies.
Your app waits automatically waits with: socket.on("recievedMessage") {(dataArray, socketAck) -&gt; Void in serverValues.message = dataArray[0] as! Bool print(serverValues.message) } if iam correct. Atleast thats how it works with socket.io in JS. The problem is you put the socket.on inside a function. So that event will never happen if the function doesnt get called. If I look at your question it seems you dont really understand how websockets work. That or I completely misunderstand your question.
In this case, the server must first recieve the signal to pour the water (which right now is done with 'ConsoleOut') before it can send a message back to the app saying that the water has finished pouring.
Some interesting code showing PDF manipulation in Swift. I like it. A quibble about the title, though: I don't know that "remove OCR" is the right description here. OCR (optical character recognition) is turning a bitmap into text. Technically, you're doing the reverse here (turning text and other vector operations into a bitmap) but unless your text originally came from OCR, I don't think you're removing OCR. I think "converting text and vector PDFs into bitmaps" would be a more accurate description.
If you scan a PDF ocr'd text information can be embedded in the file, making it so drawing a black box on top (using annotations) doesn't actually redact the information (as the user can get the embedded ocr'd text despite not being able to see it through the black rectangle). Making a new PDF with just an image of the previous will then make the document "redactable". 
Thanks for the detailed answer! It's not something I need at the moment, but it is definitely something worth knowing :) Cheers
Do you have a reference for this? I don't doubt you, but I'd like to read some details on it. Thanks :)
&gt; Xcode 8.3 no longer supports Swift 2.3. Please migrate your projects containing Swift 2.3 code to Swift 3 syntax by opening the project and choosing Edit &gt; Convert &gt; To Current Swift Syntax. &gt;Nested types may now appear inside generic types, and nested types may have their own generic parameters &gt;Constrained extensions allow same-type constraints between generic parameters and concrete types. For example, the following code defines an extension on Array with Int elements ((:
Because it's so much faster now. Before it used to take a couple of seconds, now it's so fast it basically doesn't even show.
No, the memory footprint of the app is also smaller.
Okay, but memory footprint can't be related to APFS. So the more likely explanation is that iOS 10.3 is shipping with certain Swift lib versions and not requiring apps to duplicate those libs, even though Swift hasn't yet reached binary compat. I thought you'd seen something specific to APFS that was improving build/deploy times. But it sounds like you've actually seen a Swift linking / bundling change. 
Explain the "can't be related to APFS"? APFS has file de-duplication at filesystem level. One libswift, and no more copies stored. Even if you wanted.
&gt; so please bare with me. you are requesting that you and I simultaneously remove our clothing? Not my scene, thanks 😬 I can however try to help with the webView stuff. The code you show is (I'm fairly certain) from a view controller. That view controller has a view which has a webView in it (that's based on the fact that in view did load you do `webView.loadRequest....`. The `webViewDidFinishLoad` is a UIWebViewDelegate method. Does your view controller implement the UIWebViewDelegate protocol? And is your view controller set as the delegate of the webView (you can do that in the storyboard/nib or in code)? If the answer to either of those questions is no, there's your trouble.
App bundles are signed and encrypted, so their contents can't be deduplicated. And memory footprint can't be changed by whether the file system has deduplicated identical files or not. To change the memory footprint it would need to be *memory* deduplication. The much more likely explanation is that the Swift team's compile and deploy optimisation efforts (which has been one of their goals post 3.0 shipping) have removed the requirement for base libs to be stored in the bundle. Even if somehow APFS were deduplicating the libs, they would still need to be sent to the device over USB before iOS and APFS could perform deduplication. So there wouldn't necessarily be any speed up in build / deploy times. 
Hahaha! I had bear at first but it looked wrong so I edited that one word specifically. I should have trusted my instincts.
The whole process can be resumed in three steps using regular expressions, map and reduce: vars = regex.match(in: text, pattern: "{{ (.*?) }}") vals = vars.map{ ($0, list[Int($0.substring(from: 1))]) } text = vals.reduce(text){ $0.replace("{{ \($1.0) }}", with: $1.1) } Match the patterns, get the values from the list, replace the values in the template. Beware that this code is for explaining the approach, it is not syntactically valid and it should be validated in every step to avoid nulls, but if you're curious it should get you going. Final note, if map-reduce looks a little complicated (or if the maintainer of the code is a psychopath with an axe that knows where you live), use plain loops instead.
Well, if you want this to work, those two conditions I listed above need to apply. You can use the debugger to check the webViews delegate (set a break in your view did load and do: po webView.delegate If it is your view controller, good. if it is anything else, bad. I don't actually know what happens if the view controller doesn't implement UIWebViewDelegate, I'm pretty sure IB won't allow connecting the delegate of the webview to something which is not a UIWEbViewDelegate, and I _know_ Swift won't allow setting it.
My team doesn't use them because of the security policies. I was previously involved in projects, that had such thing integrated in CI (which has access to your code as well, btw). Use case: get the crash log from crashlytics-like solution integrated in CI, link it to the code, send an email. I usually check out the project before travelling, as 3g/LTE is not good enough on the road (e.g. New York to Washington), it's even worse in less populated areas or during flight (not all the companies allow you to use wifi or it could be pretty expensive, like 100$ for 8 hour flight) to use something web-based, like github. On my end, I read code from mobile devices, when I travel, have spare time and want to spend it on code reviews. Syntax highlighting on mobile is terrible or absent.
Seems like a shared read-only library will use less memory than the same library under early versions of iOS that didn't share the file storage. 
well it looks good nad I will test it asap
Guidelines absolutely! And pretty strong ones: like "you better have a pretty great reason to use a forced unwrapping". Just nothing that is forbidden by rule: "give it a shot and we'll discuss it" ultimately we are splitting hairs here. To me an exclamation point is still always a code smell and to be avoided whenever it is reasonably possible. That means virtually no forced unwrapping.
I said "virtually no forced unwrapping", not none ever. And yes, good point, this gets harder with a big and growing team. My team is small and has no plans to grow. That is one of the biggest reasons I no longer enjoy working in large organization (although I have done it). I think you can remain somewhat flexible as long as you have a good code review process in place. At the same time, I am not looking to change how you run your team. I know how I have felt on teams like those and I never stuck around long. But, if you have people who like working on it and are generally feeling fulfilled then that is fantastic! I guess I just reacted this way to your post because I don't think these hard rules should exist for all developer everywhere.
HWS is quite highly praised by most in the sub as a great introduction to the language, which is why I went with that. I also went through a tutorial (a good one, imo) on udemy about iOS development, but hitTest wasn't taught either. They mostly go through the basics such as adding outlets / actions, then proceed teaching more swift instead of focusing on iOS, however, so I definitely think I'm weaker in this aspect. I should definitely have looked more closely in the docs. Thanks for going more in depth about what the function does, I appreciate your help! 
So the first question in order to start building an app browser is... how Swift reads .storyboards and build the windows and views? Is there a specific instruction to do all that or is it just an xml parser reading and building elements one by one? From there we can call app.loadNib(from url: URL | or from string: String)
If what you're trying to do is injecting code + building from storyboards downloaded online, you're essentially reimplementing running the application as a whole. At that point, its essentially just downloading the whole bundle and running it. I think you've gone full circle ;)
I hope I didn't come across as insulting or anything (I replied very early this morning, and re-reading what I wrote - I came across a little condescending 😕). I really was just trying to help push you in the right direction for future troubleshooting!
Works great until you come to #selector or anything else that needs to be visible to Objective C (in Cocoa)...
&gt; sometimes you just want to fucking crash if something really dumb happens where "sometimes" is amateur apps and **debug builds** of day job apps. There's no great way to do the latter(there are clunky ones I haven't full explored) so we mostly opt for fewer crashes at the expense of slightly more code and making QA work a bit harder to pick out minor glitches. The crash is convenient in development as it helps you identify many bugs quickly and easily. However, you'll never be able to exercise all the code paths, and you **will inevitably** let crashes slip into production that proper optional handing would have caught.
You can do that, there are services, that allow you to ship new builds without resubmitting (e.g. https://rollout.io/ ) Swift is a bit difficult to implement becuase of its static nature, but still possible, objc totally possible becuase it's dynamic and runtime hackable. I don't know about the current apple tos, but apple previous ly forbid running code downloaded from internet.
I completely agree. I'd guess a lot of let it crash crowd read your comment and are thinking "that will never happen, and certainly not anywhere important" so I just wanted to elaborate on your example a bit to to show that it's a lot more likely and a lot more serious than many people might think.
I couldn't agree more. The Swift and iOS communities here on reddit gets polluted with this guys blogs of questionable quality and immature comments. But I have to add that I think he should work on his business skills too. I've shown some of my colleagues his blog posts and they have been unanimously negative about them. They also agree that he would most probably be unemployable in our area with the mindset that he has. 
So it works!!! And it's damn fast! Ok, here is what I did. First I created a Test.bundle, added a RemoteView class with a xib and built the bundle, then from another app (the app browser) clicked a button and loaded the external bundle then instantiated the remote view adding it to the current empty view. Beautiful! At least it's a start, good to know it works. Apps can now be divided in bundles by size (pages) so they can be loaded on demand from the web, which may look like a pain but for researching purposes (and fun) it's more than enough. If the AppBrowser is sandboxed, remote apps can't mess up with the system. Now back to the lab. 
that's absolutely fine; you responded to my post and gave me great advice, and you're one of the two people who helped me get un-stuck. Thank you! 
Thank you!
Glad your finding it helpful :)
Isn't the Swift library shipped as a separate file within the app bundle? If so, it should be deduplicated or at least it could. Next time I talk to my friend at Apple I'll ask. 
Swift-ObjC interoperability is a nice thing in theory; however, when you try to use it in real life, rather be prepared for trouble. I avoid mixing them at all costs.
I just dont find that much use where protocol oriented programming gives me that much of an edge outside of special libraries. Most importantly, whenever I start going a bit deep with protocols, protocols extensions and generics, sourcekit just tips the fuck over and xcode becomes unusable. 
Awesome! Thank you so much! 
Sold out :(
This course looks great! It's currently sold out :(
Hey thanks. I'm sure you know by now, but the coupon is sold out.
Updated with latest course coupon!
Updated with latest course coupon!
Updated with latest course coupon!
Glad to be of help. Don't forget to share the site with your friends and like us on FB :)
Glad to be of help. Don't forget to share the site with your friends and like us on FB :)
Please check now :)
Is this a joke? Can you name a single API that has been "just removed over night"? Even the changes that have begun with Swift 3 are more about naming conventions than Cocoa programming patterns. To OP's original point, though, you could certainly learn useful iOS techniques with a book like that but if you're also trying to learn Swift at the same time as iOS you'd be better off with a Swift-oriented book. Unless you enjoy learning two languages at once and appreciating the finer points of how they approach the same APIs a bit differently.
Go with Swift. They are translatable but painful, sometimes you may need to solve a problem that only has been solved in objC because they were earlier before but those cases will be less and less over time. Once you master Swift you may learn objC just to widen your knowledge about programming but 99% if not 100% of your apps will be Swift.
Cool. Improved string manipulation is the most awaited feature of all.
If I open [this project](https://github.com/raywenderlich/swift-algorithm-club) in Xcode. I wish I can run a specific swift file there and see output from Xcode itself and not run and compile the whole project.
&gt;I don't think introducing a service layer is the same level of complexity as introducing VIPER. Er... Service layer is used for sophisticated models. VIPER is used for sophisticated interfaces. Well, service layer has a lot of entities as well, same as VIPER. And sometimes, those entities are highly specialized, same as VIPER. &gt;Whereas VIPER introduces complexity all over your user interface. It lets you isolate and reuse complexity of different aspects of UI. It could be really sophisticated as well, couldn't it? &gt;What do you consider pure MVC? From my perspective, MVC is the underlying structure of the user interface code, introducing a service layer to abstract out your complex model logic doesn't change the fact that you're doing MVC. I understand pure MVC, as the model view controller pattern without any extra entities. Service layer is impure in that regard. The same as DCI, as it builds on top of models. &gt;(I understand you don't actually use VIPER, I'm only referencing it it as an example of over-complication.) Look, what you have done to me. I dislike VIPER and I advocate it because of you ::--(( &gt;I'm not advocating for simplicity, I'm advocating for maintainability. They're not necessarily the same thing. Maintainability is the main point of my disagreement. Lets take 2 articles: 1. http://blog.idapgroup.com/swift-optionals-without-conditionals/ (skip through it and just take a look at the first and the last gist). 2. https://robots.thoughtbot.com/real-world-json-parsing-with-swift (skip through it to two last gists). The code is in those articles less maintainable in its final form in your opinion (I assume that based on the statements you made, correct me, if I'm wrong) because the concepts used are not the traditional ones. But, such a code is much easier modifiable and abstractable. The perception on the other hand of such approaches is the question of 1 week, that the dev would need to get used to them. That's why I disagree, that maintainability is related to comprehensibility, moreover, they are antagonistic in my opinion.
&gt;I said "virtually no forced unwrapping", not none ever. Gotcha. &gt;And yes, good point, this gets harder with a big and growing team. My team is small and has no plans to grow. In a small team, you could some magic without ever being strict. But it could bite you back, if the business makes the decision to grow at some point in time. &gt; I think you can remain somewhat flexible as long as you have a good code review process in place. Well, the larger the team is, the higher the chance, that the reviewer would have the same stance on implicits, as the coder. And in that case, it could leak into the code. So, there should be strict guidelines for reviewers in that case. &gt;I guess I just reacted this way to your post because I don't think these hard rules should exist for all developer everywhere. Well, the key point was, that it's a rant. And I really liked the way you reason about dos and donts. I wouldn't apply your practices in my team, you wouldn't apply mine in yours, but the discourse was definitely fun.
Thanks!! Really appreciate this course! 
Awesome, free coupons for latest courses are posted daily on the same site http://meritcoupon.com
There's nothing specifically for that, no. But you might be able to rig something up, how well it might work depends on what _exactly_ your requirements are. I can think of three possibilities: define a custom service (you could use Automator for this), make a custom target with a run script phase, use the (new in Xcode 8) source editor extension, but as you can tell from the name, it is mostly for source editing.
Are we expecting more changes for 3.1 or are these all?
Interesting. If I read this right, concrete constrained extensions would let me write something like public extension UnsafeMutablePointer where Pointee == SomeCSpecificType { // stuff in here } to wrap and expose APIs for C libraries that expect a pointer to a specific type as first argument (like GTK+ or Cairo). [edited for correctness]
Is this example possible to use inside Swift Playground? (I am Swift noob).
What is, if its not?
https://github.com/apple/swift/blob/master/CHANGELOG.md
For what?
Right, I didn't mean that they'll never remove them, I was trying to say to say they don't just "disappear"
Although I just looked and I couldn't find it in the review guidelines for apps (only stickers), I remember seeing that Apple prohibits apps that only offer to a very niche market (e.g. a family reunion/birthday party of the sorts). I think your app is under that umbrella. You might be able to put it on [TestFlight](https://developer.apple.com/testflight/) and make all the people in your class beta testers. It's pretty simple to do and all you need to do is put their email address into TestFlight (it will send them a link to install it). Just remember that for an "external test" which is what you'd need to do, it has to go through a review by Apple and it can be denied because it's a niche app. Good luck!
Depending on how large your custom configuration needs are you might consider [Firebase](https://firebase.google.com) as an alternative as it has everything you're looking for with almost no setup. 
Consider using fabric for getting your students to download the build.
Totally agree with every one of /u/GreenGlider's points. I would slightly alter the first sentence, though: You are defining a var delegate of type DataSentDelegate but _it is **quite likely** that it is not connected in the storyboard/xib so it holds a nil value..._ Furthermore the point about not needing delegates and protocols is spot on. _If_ that outlet were connected, you could just use it to call `scrollViewDidScroll`. Going through the abstraction of having a delegate is for when you want to re-use this functionality somewhere else, and therefore cannot tie the specific view controller to the specific subview type. So, when starting out, it is best to take these things one step at a time, 1. get the thing working with the concrete classes you've got, 2. if necessary, introduce the protocols/delegates to make it abstract. One other point: learn to use the debugger to figure out what is going on. Even when you don't know what's going on, the debugger can help. In this case, you could set a break in the view controller's `scrollViewDidScroll` and step through line by line and examine all the variables and see if the physical reality matches your mental image. In this case, on examining the delegate and discovering a nil, I would immediately say to myself (or my rubber duck), 'whoa, I expected that to contain the address of the subview!!!!!!" 
Thanks for the detailed answer - I'll try this tonight! I did suspect that was doing nothing because I tried to print delegate on the view controller and it said delegate was nil! How do I assign something to the delegate? I'll have a look online in the mean time, but if you have more time to answer that'd be appreciated! Thanks! Edit: Just to clarify, are you saying I need to change the code on the sub view to: SUB VIEW (XIB FILE) import UIKit import AVKit import AVFoundation import Firebase class VideoView1: UIViewController, DataSentDelegate { func scrollViewDidScroll(data: CGFloat) { **mainViewController.delegate = self** print("I'm on subview and Page: (data)") } } 
That's stupid. Aim for correctness, especially on a blog post
Well no you would either have to say page1.avplayer.pause or make your own method on page called pause, or pageWillDissapear? that then pauses the player 
I you had read the article, you'd notice that I clarified this anyway. It's just that this is a lot easier to grasp, has better reading flow and much better SEO.
On upwork where you can get shit jobs done dirt cheap
I read this, and it wasn't clear at all. All I got from it was that you really didn't understand what OCR was. And if you're doing that for the SEO, I don't know what to say.
I know what OCR means but I'll stop arguing about this now since I don't have time.
but are you sure the client-side doesn't use "multipart"? if yes, type of Data has a write method: data.write(to: xxx, options: .atomic) // "to" is type of URL, use this method to write to the disk. xxx will be an instance of URL: let url = URL(fileURLWithPath: "file:///Users/Carl/Documents/swift/time/public/uploads/media/xxx.jpg") // put together: data.write(to: url, options: .atomic) you don't have to retrieve it as image file if you only want to write to the disk.
are you based in the UK ? since you was offering £ lol? 
[_Fiiiiiine!_](https://i.imgur.com/eXx50KO.png)
Since the code is removing all of the PDFs features, including OCR, by flattening it, the title is technically correct. The best kind of correct. You meant "completeness". Please aim for correctness and completeness in your comment.
OCR is an acronym. Still incorrect.
X-Post referenced from [/r/iosprogramming](http://np.reddit.com/r/iosprogramming) by /u/zapletnev [Macaw release 0.8.0 with lots of new great features](http://np.reddit.com/r/iOSProgramming/comments/5qgig6/macaw_release_080_with_lots_of_new_great_features/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Ah ok nowhere near the capital lol, keep defending the wall ;)
I just wanna say I love how you kept updating the thread. How's Swift on Linux as of January 2017?
&gt; Just remember that for an "external test" which is what you'd need to do, it has to go through a review by Apple and it can be denied because it's a niche app Also, any submitted version of the app will only be available to be downloaded and used on the tester's devices for 60 days after it has been approved by Apple. 
Hi ssrij! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/5qh6ej/open_source_i_made_my_first_iphone_app_using_swift/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Thanks! Currently doing another course on dev (udemy). Always great to have other views and teaching aids
Thanks very much for the response! Just wondering specifically what you mean by assign something to it? Sorry, I'm not familiar with Swift lingo too well (yet)! Are you saying I need to add: **mainViewController.delegate = self** to the function on the subview (the one I'm sending the data to)?
&gt;You seem to disagree, and that's fine, but I would suggest at least considering some of the feedback you have received here on this subreddit. I consider your feedback, however strongly disagree with it. And the feedback of some other users in this and following threads. Can't seriously consider the feedback from guys, who didn't actually get, that I was showing a sample code. Or the feedback from guys, who think, that using conditional to unwrap a maybe is a clear intention. Same applies to guys who are afraid to show their code or who say, that this code is fine: https://github.com/mattorb/iOS-Swift-Key-Smash/blob/master/KeySmash/ExternalKeyboard.swift
See if this [method](https://github.com/jozemite/SpriteKit-Universal-Game) that I created will work better. This basically creates a rectangular view of the viewable area that the player sees. So anything positioned in relation to the playableArea will always be in the same spot in any device size.
&gt;Of course that would eliminate the map on the optional tuple, which is probably one of the techiques you were trying to demo :) Well, yeah. The goal of the article was to show map and flatMap usage. One the other hand, I dislike, that conditionals unwrap a maybe monad. Intention is not quite obvious and is not chainable. So, while I understand your approach, I wouldn't do that myself, if there is another way at all. Moreover, I really don't like, that there are multiple preemptive exits. This breaks the processing flow perception in my opinion.
What object do you want to be the delegate? Isn't it the same object which is connected to the outlet called `videosScrollView`? If so, do this in the view controller's view did load: self.delegate = videosScrollView 
Mobile or desktop? For what you want two files are more than enough, the storyboard and the main view controller. With the storyboard you can play arranging objects and buttons (prev / next) until you get something visually good enough, no programming skills needed for that. For playing slowly —and I mean really slow— all you need to do is not to get distracted with all the overwhelming information you will find in your path to enlightenment. Right now all you need is two buttons and two actions "onButtonPrev" and "onButtonNext" and a way to connect them from the UI to the code. Step by step. Learn how to connect buttons to code using @IBAction by drag and drop, give the functions a name and just use a `print("PREV: it works!")` and a `print("NEXT: it works!")` just to see them work as expected. Once you have that basic understanding of buttons, actions and methods then you can start thinking on the next step: storage. HTH and AMA.
Hey man, I've pasted the required screenshots here - let me know if that's clear enough, if not I can share on GitLab? Thanks very much again! http://imgur.com/gallery/lZgWO Note - you don't need anything from "VideosViewController - 2" - I just posted it for consistency. 
I'd take a look at https://github.com/WenchaoD/FSCalendar for ideas
Thanks for the response! Firstly, I did try. If I try: videosScrollView.delegate = self I get "use of unresolved identifier videosScrollView." If I try: VideosViewController.delegate = self I get "instance member 'delegate' cannot be used on type 'VideosViewController'." I get your point, but can I use the debugger when I don't actually have any error? I understand that the delegate is nil so no information is carried, but it's due to my lack of familiarity with the delegate method that I can't figure out what to do next, would the debugger tell me any more than I already know in this instance? I've found tutorials online and followed several, but they *all* entail carrying data to another view controller as you move to that view controller using segue or prepare to segue. This is where I'm lost as I don't know what I should do in the place of this. I do think the metaphor you've cited is apt, but through tutorials and reading online I've managed to go from zero coding experience to a semi functional app that does what I want (even if the code is bastardised, but that's to be expected for a beginner), building this app is in itself the learning, not a shortcut to the end result. I'll keep plodding on! Thanks for your help so far!
In your VideosViewController, in viewDidLoad, you have a line like this: let V1 : VideoView1 = VideoView1(... **That** is the instance which you want to be the DataSentDelegate. So, after that line, add this line: self.delegate = V1 
Why not use one of the gazillion existing options available to you?
If you wanted to make your own chat room backend, I would highly recommend looking into Google's Firebase. There are tons of examples on their github and also on youtube which specifically demonstrates how it could be used as a backend for chat rooms. Here is such an example from Ray W. https://www.raywenderlich.com/140836/firebase-tutorial-real-time-chat-2
Damn, I don't think I've ever since a message board written in Swift before. The source code is surprisingly readable, too, even for a Swift newbie.
Check out the [Swift Vapor chat](https://github.com/vapor/chat-example) example. I haven't looked too into it so double check it. This would be your back end. Then write an iOS app using Alamofire to handle all the networking. 
Here is the source just in case: https://github.com/kuyawa/CodeEditor And here it's me trying to capture openFile in AppDelegate but nope, it doesn't work :( https://github.com/kuyawa/CodeEditor/blob/master/CodeEditor/AppDelegate.swift#L72 HALP!
I am really a noob with swift. Do you mind giving me a poke in the right direction as to what the code would look like? I assume I have to create an observable out of my `checkSSID` function and use `.interval(1)` to check the ssid every second.
That's what I'm trying to avoid. I am looking for a better pattern. Suggestions?
You can use a Timer for it. Something along the lines of: myTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { (timer) in if(self.checkSSID()){ myTimer.invalidate() myTimer = nil } } Just remember to invalidate the timer when the VC dismissed too. 
Isn't that for running a command on a timeout?
I very much like this solution but unfortunately I have to support older versions of ios.
Call this from wherever, such as viewDidLoad func doSomethingOnceReady(){ guard !self.checkSSID() else{ DispatchQueue.main.asyncAfter(deadline: .not() + 1.0) self.doSomethingOnceReady() } return } //do something } 
NSTimer/Timer has existed since before the company was even called Apple.
Then why do I get `'scheduledTimer(withTimeinterval:repeats:block:)' is only available on iOS 10.0 or newer`?
A. I know. I am trying to avoid sleeping, hence this post. The interval is not random; it's 1 second. I don't have any formal training in computer sience. I am a second year engineering student with a part time programming job. &gt; Get your money back... Aw thanks. That makes me feel great... B. and C. Thanks. I will look into those.
Oh, well my apologies. "I have a lot of experience" made me think you were implying you had an MS or something. I was going to say, if your instinct was to sleep and you had an MS that would be extremely worrisome. By most accounts, one year of experience is pretty much still a beginner.
That's a function on NSTimer. The functions may have changed. Don't cut and paste and then give up.
What is there some kind of algorytm to determine the perfect interval? If so, please share. Edit: Ok can someone explain why this has downvotes. Explaining why I am wrong is much more productive than just downvoting. 
Who said that was my first job. I have been programming since middle school.
the block based version of scheduledTimer is new with iOS 10. Check the docs. There are other versions of it that take target/selectors or invocations. 
This is a good point. You don't have to turn your back on swift if you download unity. Learn both. Unity can make much more complex games, but knowing swift could land you a job outside of the game Dev scene if you need it (plus you are likely to make more $$$ there)
It might be better to use a delegate method; or have the thing generating the SSID check the condition, and call a function when it meets it. If that sounds like it might work, let me know and I can elaborate. 
So, as I understand it, you want to double-click a file in the Finder and the system starts up your app and executes the delegate method. (there may be additional ways than double-click, but let's just stick with one for now). If that is the case, then what is the "magic" which causes the system to 'know' that it is your app which is the one to choose for this particular file? My guess is that it is the file extension. For example, this is how the system knows to open Xcode when I double click a .swift file, and open Numbers when I click a .numbers file. So, presumably you need to plug into this magic. I believe when you ask Xcode to create a document based application, it asks for the document extension. So, you should look in that document-based application you created, select the project file in the Project navigator, then choose the target, choose Info along the top, and look at Document types. I believe if you use that as a guide for creating a document type in your non-doc app, it will then work.
Here's an example: // create the timer var tutorialStartMenuStartTimer = Timer() //function for calling the timer func startGameTimer (timerLength: Double) { tutorialStartMenuStartTimer.invalidate() //invalidate timer before calling it self.tutorialStartMenuStartTimer = Timer.scheduledTimer(timeInterval: timerLength, target: self, selector: #selector(StartMenuVC.startGame), userInfo: nil, repeats: false) } 
I did exactly that, added all the file types in the universe, set all the settings in this world (except the one necessary) but still doesn't work.
That's a shame. I downloaded your project from the link you put in another reply. I added a file type of macawfile to the Info, I created a file called test.macawfile. I ran the editor in the debugger, and set a break on the app delegate opeFile method, I double-clicked the file in the finder and the debugger broke at the breakpoint.
Well, to be honest I don't even know how to debug an app outside of Xcode, that's why the Alerts. I am going to create two identical minimal apps, one document-based the other non-document based and go line by line in all files just to know where exactly is the sorcery, besides de Document class and the Info settings. Still, why oh why is so hard for any kind of app to just get the filename in the application delegate? I've seen people complaining everywhere from stackoverflow to personal blogs where they started creating say an email client (non-document based) and wanted to add that functionality. So, logic dictates it should be available to all kinds of apps. ~~APPLE ARE YOU LISTENING???~~ Yes they are listening.
&gt; I downloaded your project from the link you put in another reply. How you like it? Isn't it the coolest editor ever? Did you try the lite/dark theme changer? It needs a million more features but so far I'm in love.
Hey man! Sorry I didn't get back to you earlier; I just got back to my computer and what you suggested seems to be working!!! https://imgur.com/a/dsDhT (homelessness donation) My confusion was that I thought I had to go to the receiving view controller and make it a delegate there, but from what you've showed me, I need to preemptively specify in the sending view controller what the receiving view controller is called? Is that right? I would never have figured this out without you, so thanks very much for your time and persistence! I may have more questions in future, so watch this space!! 
Captain's log #1: In DB (document-based) app, deleted Document.swift file and removed property "class" in DocumentType info setting. App works, filename still captured. So it has nothing to do with that file.
Yes, when I uncomment your alert statement, I get an alert box with the app icon (colourful bird, white background, circled in red), a title of 'Alert' and a message, 'APP File open: /HomeAnnex/Downloads/test.macawfile' which is the path of the file I double-clicked on. Also tried right-click on file and doing Open with... CodeEditor and that works as well, and shows the alert with the file name. You need to move past the idea that this only works for doc-based apps. That is not the case, it works for any app; it works for your app!
Captain's log #5: Created a barebones cocoa regular simple basic non-document based app. Added the app delegate openFile func, just one line to test. It worked. So it works equally for non-document and document based apps. Except mine.
Check iOS developers on slack 
I recently updated my first library [SwipyCell](https://github.com/moritzsternemann/SwipyCell) to work great with Swift 3. SwipyCell is a simple and straight forward way of implementing swipe triggers for UITableViewCells (known from the popular 'Mailbox' app) Check it out on GitHub! :) https://github.com/moritzsternemann/SwipyCell
Oh thanks, that's exactly what I needed to hear. That's the alert I wanted to see to verify it was going through that function. Apparently I was using so many alerts in the app init, will load, did load, shall load, must load that the app didn't like it and just ignored the openFile. Why? Don't ask. It's been working all this time and I've been going crazy for nothing. Oh well. Thanks for all your help, patience and understanding. Coding sometimes borders on insanity. It works. IT WORKS!!! Thank you thank you thank you ! \*kisses stranger on the web\* :D
Captain's log final: It works. Set a course for Alpha Centauri, maximum warp.
Which book on server side was it?
That's what I ended up doing. Thanks a bunch.
Is there an RSS feed for this?
I'm woking on a naive Bayes Classifier for my Science Fair. 
Any more coupons for this ?
Yea, kitura its pretty simple to use and straightforward. I haven't use the other alternatives so can't really compare but I had no problems with it.
On the swift website, it says on the footer: "Swift and the Swift logo are trademarks of Apple Inc.". That doesn't necessarily mean you can't use it though, try to ask on the mailing list perhaps.
I'd say no, not without permission. 
Swift® is trademarked so yeah using the logo on a book cover would get you a headache. But the logo is of a swift bird. You could make your own silhouette, or something based on a photo of a real swift bird?
wow 611 pages? way to go!
I'm not downvoting, but it seems pretty clear - First, you agree that sleeping is bad, then you defend it, saying it's arbitrary, not random. Then you're asking to find a good interval to sleep. sleep(random()) is not really any better than sleep(getperfectinterval()). 
[removed]
Swift is very verbose. The same book describing Objective C would be about 150 pages.
wut
He doesn't like Swift, and does like wasting everyone's time telling them he doesn't like Swift in as many ways as possible. Your basic troll with an axe to grind. 
A function can take another function as an argument func doSomething(onCompletion: (Void) -&gt; Void) { //do some code onCompletion() } A lot of times, you won't want to define a new function just to feed to this function. Instead, you'll call it with a closure. doSomething(onCompletion: { print("All done") }) The alternative would be func printAllDone() { print("All done") } onSomething(onCompletion: printAllDone) Clearly, the first arrangement is the better idea. 
You could license a stock photo of a swift. There's a real bird, after all, and animals on the cover of tech books isn't at all unusual.
Closures are great at passing a lot of context in at once without putting a ton of member variables on your class All the variables in the function that defines a closure, which are also ysed in the closure, are copied into it 
Especially since you don't need to name the parameter of the closure if it's the last one! doSomething() { print("All Done!") } 
You don't have to. Sometimes they're easier to type, sometimes they're easier to read, but if you're comfortable with your own style just don't use them, and whenever there isn't an easy workaround just use them. Map and reduce are a clear example, specially when the code is one or two vars doing simple stuff. let nums = [1,2,3,4] let squares = nums.map{ $0*$0 } // easy closure instead of: let squares = nums.map(transform: squareIt) func squareIt(_ item: Int) -&gt; Int { return item * item } Still, just a matter of taste. Now if you have a long and complex method and want to share some of the local state and vars, then it would make sense to use a closure instead of passing all that state around. Again, matter of taste. It will grow on you slowly and you'll know when to use them.
The mute switch will allow vibrate if the user has allowed it, otherwise there's nothing you can do. You can't bypass do not disturb.
Closures aren't special, they're just a different syntax for writing functions.
Is there a way to prompt the user to turn it off without them having to navigate settings such as like when an app asks for permission to use a certain functionality?
You can tell them to flip the physical switch and turn their sound down, but in practice I'm not sure users will understand nor follow through. 
Functions are closures, that's why they seem so similar. 
Spoken like a true swift fan
Not only is the Swift logo trademarked, but so is the word Swift itself in the context of programming languages. You'll need to look into that too. Hopefully a simple acknowledgement that It is an Apple trademark and that you are unaffiliated with Apple will suffice, but you might want to check with Apple corporate. You might think this is silly. But many years ago there was an online news service called PowerPC News, that covered all aspects of the IBM/Motorola chip. IBMs lawyers came knocking 'oi that's our trademark ' - though it was resolved amicably. 
Thanks. I stupidly didn't think of the mailing list. 
Check if the player.currentTime is returning 'Nan' or 'undefined' as that won't be able to be cast as a Float. Try the below at the beginning of the function guard player.status == .readyToPlay else { return }
`player` is probably an implicitly unwrapped optional, and because `updateSlider` is called in a `Timer`, it will likely be called at least once before `play(url:)` is called. Change `player` to a full Optional instead of implicitly unwrapped, and handle the optional case inside `updateSlider`
Set breakpoints on both your updateSlider and play methods. In the left panel in Xcode check to see if the breakpoints are occurring in the main thread (it says 'main' somewhere in the thread name and is usually the first item in he list). If not, you'll want to wrap all your UI handling code (including video playback and slider or label updating) in the following to force things back on the main thread: DispatchQueue.main.async { // do UI stuff here } 
Hi Picador, Thanks so much for responding. This is what I've implemented - and it is working as I hoped - is this what you had in mind? class VideoView1: UIViewController, DataSentDelegate { var player1 = AVPlayer() And then later....... func playVideo() { let videoURL = URL(fileURLWithPath: "/Volumes/Mac HDD/Users/Pinchy/Documents/App/Ripple/Ripple/5secvid.mp4") player1 = AVPlayer(url: videoURL) So I define player as a variable outside of any functions, but then give it a specific value within a function later? Thanks again!
Well, there are two ways you can solve this problem. The first one would be to pass the player into a constructor (the init method). The other one would be to make the player a **variable** instead of a constant so that you can set it at whatever point in the code you need to. if you can control the creation of the view controller and, therefore, setting the player in the constructor that would be the best option, given that you would set the player as a constant instead of a variable. if you take the other route, take care of making sure that the player variable is either an optional or in implicitly unwrapped optional because otherwise Swift won't let you do it, because at initialization that variable won't be set.
Thanks man! I had already done the second option by the time you responded! I very much appreciate your help!!
Have to disagree. All the optional circumvention/nil testing bloats up the code a lot. 
Yes. Or if you want to keep things readable, just put all the UI stuff in a separate function then call it from inside the main dispatch. Edit: sorry, misread your question. No you don't put the whole class. Just the methods that access UI and only if they are called from a background thread. If you invoke something on a background thread (i.e. downloading from the web) then the completion handlers will also be called on a background thread. If you need to update the UI at that point you have to wrap the chunk of code that references UI elements inside the main dispatch. This explains the concept in more detail: http://blog.grio.com/2014/04/understanding-the-ios-main-thread.html 
 var player: AVAudioPlayer? func updateSlider() { guard let strongPlayer = player else { return } // do stuff with strongPlayer }
Can't speak to consensus since I'm a beginner. Global funcs aren't wrong otherwise the standard lib would be wrong. However most of those are generics or utility functions. Personally I do use a func for things that may not cleanly fit into a class or can't be justified by creating a class. 
Thanks for your comprehensive reply. If you don't mind, I'd like to hear how you would approach the design given the specifics. I have two private classes implementing protocol `P`. I also have a simple factory returning `P` that relies on a computed instance property `type` to determine which of those two private classes to return. Right now I have the factory and private classes both pointing to a global function to calculate `type`. It would make sense to put the `type` function in `P` as a static function, but unfortunately that's not supported in Swift even with protocol extensions. Do you have any idea how else I could implement this? To address a few of the disadvantages: * The dependency on the private global function is an implementation detail; the factory is not meant to be the subclassed and the return type is a protocol. * I understand the part about global variables having different life cycles, but I'm not sure it would apply to a stateless function. * Testing the factory directly tests the function. Also the function is stateless. * I don't think memory leaks is as much of a concern with global functions. In this specific case, a value type is created, so I'm not worried here.
This, but I'd add that public global functions are not bad. They occupy the same namespace as types in your module. If you're creating a type to have a namespace for a function, you've still added an entry to the module's namespace. If the type has value, add it, but don't add a type just to have a place to hang a function. I do agree that much flexibility can be gained through protocol extensions, but it is not always the best solution.
I was going to say map filter but they're not globals. Ok: zip abs max min swap
There are a lot of these O'Rly? covers. Most of them are fantastic!
It's a book covering advanced features of Swift. Several of them not achievable with ObjC. Added to that, we are in 2017. 
Global functions are not bad software design. What's often considered bad software design are global *variables*, and the reason is because that's globally-shared state, which usually isn't a good idea. That said, if it's private, it's by definition not global.
Notifications?
Alarmy is probably "tricking" the system by making itself seem like a music/streaming app. It could be running some type of sound from the app that's just muted. 
Have you added a print() statement in the while loop to make sure the loop is still running multiple passes? Can you show some code and have you though about using a switch instead of if conditions. Much cleaner.
I would like a sound to play similar to Alarmy's - if the user doesn't force close the app it will sound until disabled / as opposed to 30s notification intervals 
Actually using a switch would be a pretty good idea. I'll give it a go.
Not sure how to do markup for code, so here's a gist. I hope I understood your problem correctly: https://gist.github.com/RommelTJ/92368391d0a3c8cb6fd82e6538ae75b0
I believe it's not possible to (properly) do this yourself, sorry
I haven't found anyone to dislike them, I think it's pretty much agreed upon that we all like them. Considering also that Swift took them over from Objective-C, which took them over from Smalltalk..
Then how does the app Alarmy do it?
It's an App from Apple, it can do anything, have special privileges, whatever Apple wants. They don't need all those security cages normal apps have because Apple can trust themselves at making Apps for their operating system. Edit: Sorry I thought your comment said "Alarm"
Not quite. The decision of which widget to use is computed from the private function and not injected directly into the factory. That same private function is also called by the widgets themselves. And not really consequential, but I'm using a simple factory rather than a factory method. I modified your example to better illustrate the problem. protocol WidgetProtocol { var data: Data { get } var someProperty: String { get } var someOtherProperty: String { get } } private func findSomeProperty(from data: Data) -&gt; String { return "Some string calculated from data" } private class WidgetA: WidgetProtocol { let data: Data init(data: Data) { self.data = data } var someProperty: String { return findSomeProperty(from: self.data) } var someOtherProperty: String { return "Calculated with WidgetA-specific algorithm" } } private class WidgetB: WidgetProtocol { let data: Data init(data: Data) { self.data = data } var someProperty: String { return findSomeProperty(from: self.data) } var someOtherProperty: String { return "Calculated with WidgetB-specific algorithm" } } enum WidgetFactory { static func widget(from data: Data) -&gt; WidgetProtocol { let type = findSomeProperty(from: data) switch type { case "A WidgetA type": return WidgetA(data: data) case "A WidgetB type": return WidgetB(data: data) } } } var someData = Data() var myWidget = WidgetFactory.widget(from: someData) print(myWidget.someOtherProperty) // Property with Widget A algorithm var someOtherData = Data() var myOtherWidget = WidgetFactory.widget(from: someOtherData) print(myOtherWidget.someOtherProperty) // Property with Widget B algorithm The `findSomeProperty` function is the shared function. Side note: four spaces at the beginning of the line formats the text as code in markup. Use the accent mark "`" for inline code formatting.
[removed]
Too late ;) So far, I'm liking IBM's code.
&gt; Memory leaks. If you never deallocate them, you will get memory leaks. Memory leaks lead to mystery crashes that are hard to debug. If you had been using Swift classes, most of the time the memory management "just works" and objects are deallocated by themselves. Nope, we are talking about functions here, not global variables. All memory used by a function is cleared after it returns
I love python. But after using objC/Seidt for the last years, now my python code seems dull. 
&gt; Every thread is nothing more than a global variable Why are you saying threads are global variables? They're not. In most cases, the only thread you can access globally is the main thread (the current thread isn't global, it's thread-local, since every thread sees a different value for current thread). &gt; Global vars are objects in the heap, unavoidable. This isn't true either. Heap objects are objects on the heap, sure, but there's nothing about global variables that says they must be heap objects. Trivial example in C: static int x = 42; That's a global variable, and it's not on the heap.
More your code is human readable much it can be maintained and optimised that why named parameters are in a good way
Hah goes to show how precedent can constrain one's thinking. I initially had the init function signature part of the protocol so it never even crossed my mind to change it to something else even after I removed the protocol requirement. I still need to pass the data object though, as there are actually several computed properties, all referencing the data and implemented differently between A and B. But your recommendation helped guide my thinking toward the correct path.
At this point, this kind of stuff is making me want to quit Swift and iOS development altogether after many years of doing this stuff. I'd go back to objective-c which works way better with XCode but that is too bitter a pill to swallow after using Swift. Apple really needs to fix xcode and fucking sourcekit, it's been long enough for christ sake, what the fuck are they even doing? I don't know about you people but just the slowness of the swift autocomplete alone makes me what to throw my keyboard at my monitor. It is so insanely frustrating to be constantly waiting after your IDE, fuck iOS development. All the time I'm losing over just this stuff alone, how do you people manage? Meditation or something?
No, just do whatever makes sense dude. Your example is a good case where this should work just fine. With Swift and the ability to write multiple class in a single file, I personally do this rather often for UI related constant and the different custom subview classes of a ViewController that I often simply declare as fileprivate in the same file as the ViewController itself. 
I complain on twitter and drink
Does it help? Maybe I need to start programming drunk so that Xcode can keep up with me or something. 
It's just being initialized with by executing a closure. Here is another example. var myView: UIView = { let frame = CGRect(x: 0, y: 0, width: 10, height: 10) let view = UIView(frame: frame) view.backgroundColor = .green return view }() Which is basically the same as doing this: var myView: UIView required init?(coder aDecoder: NSCoder) { let frame = CGRect(x: 0, y: 0, width: 10, height: 10) let view = UIView(frame: frame) view.backgroundColor = .green self.myView = view super.init(coder: aDecoder) } 
Python supports named parameters. It's just that using them is optional. f(x=2, y=previous_y)
xCode is one of the worst development environments I know. It is just a shame how bad it is programmed.
Yeah, figured it'll be too late, but posted just in case... It's good to hear that Kitura is shaping up, "full stack Swift" is an attractive prospect.
It's not so much that it's inherently bad as it is that you could probably design an API better by not making it global. The only time I can think of needing to make something global in Swift is if it needs to operate on an a argument of type `Any` (and as such it cannot be in a protocol, without some hacks). 
One initialised using a closure as a block. The pattern is fairly common in Javascript and known as "IIFE" (Immediately Invoked Function Expression). It lets you bundle a bunch of initialisation data and variables inside a clean scope and discard all of it afterwards. This way the details of initialising the MenuHeader and the various items necessary to do so don't live after the creation and block, the account and accountDetails are not available outside the block after the menuHeader has been set.
&gt; It's just that using them is optional. Not true. "kwargs" (`**kw` parameters) can only be filled using keyword arguments, and Python 3 added keyword-only arguments in pure python e.g. def foo(a, *, b): …. `a` is a required argument which can be provided either positionally or by keyword, `b` is a required argument which can only be provided by keyword. IIRC the C API always supported keyword-only parameters (and also supports unnamed positional-only parameters, which remain impossible in pure python aside from `*args` parameters)
Another question. When I play another song, the slider's value changes to 1 while it is downloading data from the internet. After it finished downloading, it goes to 0 where it should be. Why? In storyboard and viewDidLoad() the slider's value is set to 0. 
If your UI freezes during load, it's likely because you are creating an AVPlayerItem straight from a URL and this is synchronous. The asynchronous version is to create an AVAsset first, then call asset.loadValuesAsynchronously(forKeys: ["playable"], completionHandler:{ }) You can then create an AVPlayerItem using the same asset once all of its data has been loaded asynchronously 
Can you, please, show me how?
In general I'd say your design should be simple enough to fit in any PHONE screen size. I can see having issues with the smaller phones design wise. I always struggle with the design on my own. I'd focus on keeping designs simple and sleek (seems to be "what's in" right now anyways). If that means for you starting with an iPhone SE screen size, then do what you got to do! I personally tend to target iPhone 6/6s/7 screen size when I'm doing development and then I'll test on my 7+ to ensure it looks good there and maybe adjust accordingly. I'll admit though, I don't tend to look at anything smaller than the 6 screen size... sorry SE users!
IB can show you all the designs at once if you add panels So when in doubt, use that to help For dense screens, I often design for the iPhone SE, for sparse screens, the 7+
Haha, I feel you. Thanks for the explanation! 
Will do, cheers man!
I want to say no, they don't need to ask permission. I don't think it's something users can turn on and off
Don't know, never made a voip app, but the fastest way to find out would be to try to scrap one together yourself. 
You are correct
Prob I'm missing something, but Xcode does that too, just activate breakpoint for exception.
Yes, I've already done this, but when the slider moves it does not update the playback time in the control center, it just keeps incrementing as if the slider was not moving. MPNowPlayingInfoCenter.default().nowPlayingInfo = [MPMediaItemPropertyTitle: songTitle.text! , MPMediaItemPropertyArtwork: artwork, MPMediaItemPropertyPlaybackDuration: player.duration, MPNowPlayingInfoPropertyPlaybackRate: 1.0]
Feature requests and PRs are welcome!
I actually drunk program all the time, offers new perspective. I haven't had this problem and use Snapkit all the time, I just don't try to do anything too complicated with it and would avoid the unnamed closure. Swift seems to struggle when things aren't explicitly stated. Instead of typing .center and having Swift infer, I always use NSTextalignment.center (or whatever you're calling). I also avoid Storyboards completely, those seem to love crashing. 
Oh. That would have been nice to have on by default... Thanks.
Can it do vibrating notifications ?
What if the purpose to override was to change it's functionality? without its parents implementation?
Ah makes sense. Looks like I need to go back and review OOP.
From my experience it's true that Raspbian runs much more smoothly than Ubuntu on the Pi. The Swift compiler port mentioned in the blog works on both Raspbian and Ubuntu. Unfortunately right now the Swift Package Manager only works with Ubuntu. There is some effort being done to make it work also on Raspbian which would be great if successful. 
That's really cool. Have you sold many copies yet? 
Use guard let instead of if let, ie: guard let firstItem = items.first else { return } // use firstItem here as opposed to if let firstItem = items.first { // use firstItem here }
The [swift language guide](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html) is well written. I am not sure if that's enough for someone who never programmed though. 
Nice post, it is good to see that swift is moving to these small platforms. Hopefully it will leave that "experimental state" soon
I haven't used it to do games, but I did do some other stuff with Metal, including a ray tracer, a 3D gravity simulation and a simple galaxy (100000 stars) renderer.
First of all, as /u/sniper points out, you couldn't have true polymorphism if you always had to call super. This is a problem in a number of object-oriented languages; there's no way of specifying whether or not it's required to call super when overriding a method, much less specifying whether it should happen at the beginning or end of a method. For example, look at UIView: You're supposed to call `super.viewDidLoad()` at the beginning of your method if you override it, so that the superclass can set up all its view components before you make your changes. By contrast, you're supposed to call `super.viewDidUnload()` at the end of your method if you override it, so that you don't refer to elements in the superclass that are supposed to have been destroyed. As /u/robhue points out, in Objective-C there's a macro you can use to tell the compiler that an overriding method is supposed to call the superclass's implementation. There's no equivalent that I know of in Swift, nor is there a way in either language (that I'm aware of) to say you should *not* call the super's implementation. One pattern you can use to force the superclass's method to be called is to have a `final` method that implements the functionality and separate "willX" and/or "didX" methods that subclasses can override, like so: class Foo { final func doSomethingImportant() { // Subclasses can't override this method willDoSomethingImportant() // Do some stuff... didDoSomethingImportant() } func willDoSomethingImportant() { // Subclasses can override this method to do stuff // before doSomethingImportant() is called } func didDoSomethingImportant() { // Subclasses can override this method to do stuff // after doSomethingImportant() is called } } It's not a great solution though, since it complicates the code, it means you can't actually override the superclass's behaviour, and it means you're right back to the same problem if you make subclasses of the subclass (do I need to call `super.willDoSomethingImportant()` in a subclass of a subclass?). It would be nice to see a way of specifying one of these behaviours in Swift, so the compiler could enforce it the same way it enforces calling super in initializer methods.
TIL about NS_REQUIRES_SUPER :)
I would like to but I'm having a hard time finding up-to-date Metal training material :/ 
Right now I am developing more complex apps using other devices like switches and motors. I am planning on writing more blog posts after I make some progress. But I don't see why you would not be able to make more complex things. Once you can control the GPIO pins you can do anything.
Yup full metal here, it works quite well compared to the other options
There is [swifter](https://github.com/mattdonnelly/Swifter) which is a twitter library for swift. With that you can write your own twitter bots since all they do is interact with the twitter api.
Nice job man. Always nice to see new developers releasing open source stuff, it's a really nice way to lear and get better. One tip: you should move your project description to the classic ReadMe file and format it with markdown, rather than have it as a repository description. If you need any help with it, have a look at: https://help.github.com/articles/basic-writing-and-formatting-syntax/
Make sure you have the latest Xcode installed – the option is right there in the View menu.
I am actually using XCode :) The biggest pain for me when I started on Linux was to edit the Swift files in a text editor such as Nano. No autocompletion, no type checking no nothing :/ Also the Pi as a computer is slow so it makes development an overall bad experience. That is why I write the code on my Mac :) I am using XCode and then push and build the code on the Pi. I am planning on writing another blog post to show my setup since it makes the development much easier. 
Forgot to tell you, syntax files use a basic structure in yaml super easy to customize. It comes preloaded with swift, html, xml, css, js, json and yaml but it can be extended with as many syntax files as you want. The syntax files are copied to the application support folder. Take a look at the syntax folder: https://github.com/kuyawa/CodeEditor/tree/master/CodeEditor/Syntax
I've taken classes on Udemy.com to great benefit. I like the courses from Mark Price because you can join a forum of beginning developers that all help each other out. The content is great too because you will see mistakes being made and then see how to fix them. It's not a copy/paste class. 
What is the problem with NSObject? I simply have no clue about it since i learn everything on the go as a hobby. I do not feel comfortable using a library for everything, but it seems to be the way iOS developing works. I will try it. Can you elaborate what should be improved in that class for learning reasons?
Check out the iOS Developers slack team!
Looks neat! You should add Vim keybindings.
Typo in the first paragraph, if OP is also the author you should probably handle it. https://imgur.com/gallery/N7ocE EDIT: in common US parlance, it means something different at the very least. 
They're using the audio background mode, it's listed in their info.plist. They use the "NoSound.mp3" file in their bundle to play silence, while in the background. They also have a "Sleep music" mode to get them through the AppStore. 
Bless your soul
For your use case, a private global function seems to make sense. In general, however, consider the notes in the [Swift API Design Guidelines](https://swift.org/documentation/api-design-guidelines/#general-conventions): &gt; **Prefer methods and properties to free functions**. Free functions are used only in special cases: &gt; * When there’s no obvious self: (e.g. min(x, y, z) ) &gt; * When the function is an unconstrained generic: (e.g. print(x) ) &gt; * When function syntax is part of the established domain notation: (e.g. sin(x) )
or maybe YOU should. hahahaha :). he just gave you something for free - appreciate it.
Thank you for reaching out I appreciate it. Web views are limited, most certainly. Cordova has a large catalog of plugins that extend the web view and gives access to most of the hardware API's I'll probably need, even TouchID. As you said though, it is limited and not always 100% stable. Thanks again 
On the other hand you cant expect Swift.org to support every thing. They have ARM compiler support, porting that to Raspberry PI should be left to the community. 
Sounds good. Thanks. Best. 
I wouldn't wish a career in enterprise on my worst enemy.
From (past and recent) experience my heart-felt advice to you is: go native.
haha fun. when you're calling the function, I don't think you need the backticks — just when you're declaring it :)
oh, and you could use a default value of nil for `else` so that you don't need to put an empty one if you don't use else. 
Also, the first sentence is really hard to read.
You're welcome. If you have questions about some of the API's, I can answer to the best of my ability, just ask. I've actually just finished a login system that utilizes TouchID and it was surprisingly easy to setup. There are just a few things you have to keep in mind like where and how you store the user's credentials, or how you want the TouchID setup and login flow to be to provide good UX (this was the hardest part for me).
I wrote an open-source Mac app that gives a GUI to the `say` command (essentially) called [Utterly](https://github.com/michaelchadwick/utterly). It was initially written in Objective-C as [Utter](https://github.com/michaelchadwick/utter), but finally took the dive into Swift and found everything much more pleasant to code. It's more or less done, but if anyone uses it and finds bugs/wants features, let me know!
I could add all the key bindings in the world but I don't use Vim so don't know which exactly you need. For me the most important are duplicate line, delete line and move lines up/down so I added them first, can't live without them.
Thanks, I always wanted a nice little editor with a small footprint for quick editing stuff.
Post in french and Google may help me translate. Macaw is a colorful parrot from the tropics and it is the name of a nice little editor for quick hacks without having to load Xcode, just like Sublime, Atom, Notepad2, Gedit, etc.
[BetterTouchTool](https://www.boastr.net/) supports global and application specific touch bar actions.
Making cordova works semi ptoperly takes longer than writting 2 native apps and the result is subpar garbage.
Its ready but just a big pain in the ass.
Oh! There it is! Thanks a lot. Gotta learn by making mistakes. 
It's just a suggestion. I'll appreciate what I appreciate, no one needs to tell me what to appreciate. What did you think "Looks neat!" meant anyways?
That's a flawed analogy. Open source software is not a tomatoe. It's expected when maintaining open source software to receive feedback and suggestions. Whether you implement, or even respond to (or even read) those suggestions is up to you. However, they're nice to have avalable should you (or anyone else looking to contribute) ever want them. If you think the customs of open source software are wrong, then go write a blog post and post it to HN. Don't waste your time antagonizing individuals. Anyways, /u/GreenGlider doesn't seem offended by my suggestion. Maybe you should let them speak for themself. 
In the first option, it's a let constant, so it's impossible to modify at all, accidentally or otherwise.
&gt; It comes preloaded with swift, html, xml, css, js, json and yaml No C/C++?
As UIColor is a reference type (a class) ([UIKit Reference](https://developer.apple.com/reference/uikit/uicolor)), you could possibly modify its properties (as long as they are mutable) without changing the instance, so the color property could still be a let constant. A simple example would be: class AReferenceType { var foo = "bar" } struct Container { static let aReference = AReferenceType() } print(Container.aReference.foo) //prints "bar" // Modify (mutable) property of reference type stored as a let constant Container.aReference.foo = "baz" print(Container.aReference.foo) //prints "baz" This works, even though `aReference` is declared as a let constant.
 class vars with a copy are what I believe the UIColor class uses for its own
I am also super rusty on creating operators. This is a handy go-to!
It's a reference type but it's also immutable. There aren't any instance methods that changes it so it doesn't matter which of the two methods is used. Although the built-in colors such as UIColor.blue uses a static var so I would stick with that for consistency.
FYI, you can add delete/duplicate line shortcut in IDETextKeyBindingSet.plist and move lines up/down is inbuilt :) Just Google it, there are quite a few guides on this! 
This stuff is really cool. After playing with things like this, it makes me feel that much more comfortable with Swift as I fully understand what's happening underneath the hood.
What do you mean by "can't seem to get it to work", what actually happens when you run this?
Wouldn't it create a new instance of UIColor each time you called it, leading to inefficiencies?
/u/TheNet_ already gave you the answer, but if the issue with backslash is foreign to you, you should look up information on "escape character," which is the reason you're code doesn't work. Backslash is the escape character is Swift. The basic gist of it is that in a string, the backslash character has special meaning and doesn't just mean the literal character of a backslash in the same way as another letter or character. For example, in Swift you can do something like this: let name = "John" let message = "Hello, \(name)!" In this example, the backslash (followed by the open paren) signifies that you're starting a string-interpolation sequence. The backslash is what triggers this interpretation, rather than just saving the word "name". Here's another example. Say you want the string `Duane "The Rock" Johnson` inside a variable. What if you did this: let name = "Dwayne "The Rock" Johnson" This will fail because the the quote marks carry the special function of enclosing the string. Having additional quotes (that are meant to be literal quote marks) in the middle breaks this syntax. Therefore, in order to signify literal quotes, you escape them with a backslash: let name = "Dwayne \"The Rock\" Johnson" In this case, `\"` means, treat this as a literal quote mark. Since we're using the backslash as the escape character, we need a way to represent the literal backslash character when we need it to be part of the string. Similar to literal quote marks, you create it by escaping the character: `\\`. In other words: replacingOccurrences(of: "\\", with: "") Some more info can be found in the official docs (search for the heading "Special Characters in String Literals"): https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID285
Maybe you just suck at writing Cordova apps?
Do you have any good tutorials for those?
Wrong. @property(class, nonatomic, readonly) UIColor *blackColor; 
&gt; Don't waste your time antagonizing individuals. umm, nevermind...
Not personally but, there are many more tutorials for tables/collectionview, if you describe the functionality you want to acheive in an edit above people will probably be more able to help
[removed]
I've been looking for something like this!
[removed]
Create a scroll view. Add it to your view. Add subviews to it. Adjust contentSize to match subviews. That's really the basics. What is it you're really trying to do? Scrollviews are generally simple but some things can get complicated, like infinite scrollviews. There have been a few excellent WWDC videos on topics like that over the years. 
Create a low poly stencil copy of your walls and use those images for textures. Best would be to generate physicsbodies with approximate CGPaths. Best practice is to aim for the least complex physicsbodies. :)
Excuse me, but shouldn't the texture init make a physicsbody (through a path or whatever it uses underneath in the implementation) consisting of the only pixels whose alpha is &gt;= of the specified threshold? The problem we are facing is that the physics bodies made using the mentioned initializer act incorrectly, since our ball can pass through / get stuck through them. Whereas if we were to use the rectangle one, the collisions would work as expected.
That's the funny part. My showPhysics is turned ON and both physics bodies (one from texture init and the other from the rectangle one) are literally the same, just square boxes, yet using the texture's one, it glitches out... That's what's driving me crazy.
Simple .. if your willing to pay.. I can make you one
Thank you, this was my first break into freelance work as a programmer and I'm still shakey on swift itself and I think I'm on the cusp of clicking with swift. I feel like trying to learn java is just going to mess with that 
I'm trying to have an option to scroll left and right to switch your selected ship
Surely there is none, the whole point of going to the trouble of writing a generic function is to preserve the type information of the input params. If you are going to return 'Any' then simple use 'Any' type input params. Is this not best practice 101? 
I agree. Using Any beyond interacting with some APIs pretty much defeats the use of the type system. 
What do you mean by "Make a store"?
Sure I agree. You said you were debating with someone though, I was wondering what their argument was.
Sorry! I understand, he was basically saying returning [Any] was as good as [T]. 
Nope, there isn't any easy way. You could start with kotlin which is similar to swift. 
Oh.... I figured he would have a specific case where Any made more sense.... that's not a debate worth having in my opinion
You could look into Kotlin which is similar to Swift.
Thanks for the feedback. I was aware of ReSwift and plan on giving it a spin soon enough. Similarly, I've been using ReactiveCocoa for many of projects, but new hires (junior and senior) give too much push back to it.
The pattern is awesome. I wasn't sold at first so I tried doing a few workflows in my app with a custom thing similar to what you've posted. I ended up loving it so much after about 2 months I spent the time to convert my whole app to use ReSwift. It's *so* easy to debug and manage state, and it does a great job of separating concerns and making sure you handle all edge cases and possibilities. I love it.
Do you know Java at all? If you learn well through books I recommend the big nerd ranch guide. If it is time sensitive you may be able to subcontract somebody in a developing country to help you out through Odesk or a similar site, though it may not be ideal. If you already have the app built though, there are probably people who could copy it pretty fast.
Local notifications?
Look at this https://dl.dropboxusercontent.com/u/66188957/Scrollviewprogrammatically.zip Why don't use UICollectionView?
Been holding off learning how the spm work, but with ray explaining it I have no choice now.
So it cannot be used for iOS, tvOS or WatchOS projects, hmm. What is the expected role for this as compared to Cocoapods?
What does SPM do that CocoaPods doesn't?
Awesome! Thank you
I like the simplicity and "lazy loading" of it. Waiting for Xcode integration.
Thanks, I'm still really new to github. I'll be doing this soon. (I've got some assignments to care of right now)
The Apple team working on the Swift package manager has hired ex cocoapod developers. As much as I like Cocoapods, I hope to use spm soon on iOS. I've only messed with it while experimenting with server side Swift. 
It functions on Linux without xcodebuild for one
 Not about those the parts you just posted I'm not: https://developer.apple.com/reference/uikit/uicolor/2091973-lightgray You literally just posted the Objective-C analog to my swift post.
I think the main use case is for deployment of server-side apps.
That makes sense
It has a command that lets you build an Xcode project which is introduced toward the end of the article. It will be great to see real integration which is certainly coming.
You would ideally want the first one as there's no reason to create more than one of the exact same color over and over. Would you write this code? class Foo { static var things: [String] { var a = [String]() a.append("bar") return a } } or this? class Foo { static let things = ["bar"] } Same applies to all instances of immutable things for the most part.
UIColor is immutable. What you're referring to is a factory, and there's no reason to use a factory for immutable objects. 
why reinvent the wheel. i just hack bbedit and write language modules. scrape api key words, colors .. done
apple put out a demo game with thumb sticks seems similar. 
Compatibility with Objective-C. In Objective-C the function signature of your example used to find the code at runtime is "insertValue:at:" insertAt:value: is obviously a different function.
What would the benefit of allowing reordering be? Imho, it would only make code harder to read, because you'd have to think about the ordering when looking at a method. At the same time, it would come with a bunch of issues: What about methods where you want to have two parameters with the same label (which is currently allowed)? What about method parameters that do not have labels? Also, you can have two different methods that have the same argument labels but switched around currently - if you'd allow reordering, that wouldn't work anymore. Finally, some methods are written such that they are "nice" to read in the correct order. For the technical reason: There may or may not be one, but I think that's not why you can't reorder parameters in Swift. Given the choice of having reordering or not, the Swift devs seem to think not having it is the better choice. (I do too).
It's very lightweight and integrates nicely with xcode. I actually enjoy using SPM quite a bit, CocoaPods have always been a pain in the ass. 
The Pi is a normal computer running linux. For networking, you could use the Foundation APIs like URL Session and friends. For audio you would have to google it.
For what it's worth, my sources at google do this, but around the other way. There is a reason why gmail for iOS is 200mb. 
Or NotificationCenter in Swift :)
Making an shop like adding to cart, using segues, something like that.
So you don't need a simple data storage but want to write a whole "mobile shop experience"? If yes, there is no way around learning Swift. I mean... it's not like you are trying to write a simple "Hello World" here. But it shouldn't be a problem to get it done in a month. I wouldn't invest in a tutor or anything like that. Go to the site of Ray Wenderlich, or lookup some other text / video tutorials.
That's Objective-C. You're in a Swift subreddit dude.
[Hero](https://github.com/lkzhao/Hero) looks awesome, the animations are compelling and the API seems easy to use. Great README as well! 
i've heard Xamarin does something like that but i don't know from personal experience. I've been meaning to check it out but i hear it integrates code in both ios and android i think
Agreed, I would never want my iOS app look like an Android app.
But it's so small!!! Lol. I guess I should have known that.
Swift isn't special. You need to write an interpreter. The problem with Writing a Swift interpreter, however, is that it's statically typed yet type inference'd. This mean that the compiler has to check the entire body of code and parse all symbols in all their uses before figuring out what the types actually are. So this makes interpreting a much harder task as you have a few more tasks to do before you even start actually going about interpreting. I'd start with a simpler language. There's a book called "Writing Compilers and Interpreters" by Ronald Mak that takes you through the entire process of creating a Pascal compiler in Java. I followed along and just wrote it in Swift instead.
Thanks for that one! Really nice subredit :'-)
I mean I'm looking for a community.
What you're wanting to do is post a multipart form. Libraries like AFNetworking have this "built in". It's a little more work than doing a normal post. If you'd like to do it yourself (which I'd recommend), read up on posting multipart form content using URLSession / NSURLSession.
What you're asking for is something like ruby's eval, which you can't do in swift. You could write the new swift code to files, run those files with swiftc in another process, then capture their output (via standard output or writing to a file).
There's nothing like this for iOS at the moment. Maybe in the future we'll get a common iCloud documents directory like we have on macOS? Currently you have to either use a common [iCloud container](https://developer.apple.com/library/content/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW14) between _your own apps_ , or use the thing where you register your app as an editor / viewer for certain file types so other apps can share documents directly to your app.
Hero became very popular :) I saw it in every iOS newsletter 
[removed]
Not the version I'm stuck on.
It's pretty much the same 
So, Swift used to treat nil as false-y and non-nil as truth-y, but it led to a really awkward situation: var uncertain:Bool? = something() if uncertain { } else { } Wait… did we just check if that was non-nil, or did we check if it was non-nil AND true?
Is there a preference amongst the community for the "right"/usual way?
The second one is probably slightly less work for the compiler to figure out, so might compile a minuscule amount faster. Remember you can save some work for yourself though by just letting Swift figure it out: let dict = ["Hi" : "Hello"] is the same as either of your first two lines
You can convert the UIImage to NSData and store that in CoreData as binary data, but CoreData isn't really optimized for large binary blobs, so you're probably better off storing images separately on disk. Here's a relevant answer in Objective-C: http://stackoverflow.com/questions/16685812/how-to-store-an-image-in-core-data
It's the official solution for the language, so it's going to continue being improved and supported over time.
&gt; swift package init --type executable I'm on 10.12.2, this is what I got when I typed that (ran it in a folder named euler): Creating executable package: euler Creating Package.swift Creating .gitignore Creating Sources/ Creating Sources/main.swift Creating Tests/ 
This is probably more of a "why can't X look more like Y" kind of complaint, but why not just overload the "?" operator for use in conditional statements, such that &lt;variable&gt;? returns true if the value is non-nil and false otherwise (instead of creating an optional type for every normal type). A boolean variable doesn't need the "?" after since it can be used directly (with the strictly boolean behavior) - and since Swift is statically typed, you can't say "well how do I know what type of variable I am going to have in my "if" statement?". You don't have to answer that. :)
The right way is whatever way works best for you! There's no "right" way to write.
For the function multiply(x,y), what do you return when it can't be computed by the computer without optionals? That is the key point of optionals. Optionals are enums where you either have a value, or don't and if you have a value, it can be any value the type can hold. This type of return value is essential for single return ring functions (i.e., that don't return a tuple and the value returned is of the same type as the input) So functions like multiply(x,y) are *all over*, and by the inclusion of optionals to solve them, we can chain failures as well as success. This allows us to greatly lessen our boilerplate error handling. *if let* is one of the *worst* ways to use optionals. *let aNonOptionalValue = aPossiblyNilValue ?? ADefaultValue* is a way to always get an answer that is a non-optional *guard if let foo = foo else { return nil} stuff you want to do assuming everything is right* Lets you write non-conditional code about the main logic of your application and lets you handle the bad cases of foo==nil *let bar = aDeep?.object?.heirerarxhy?.ofOptionals* lets you let all the many ways something can fail fall away, and one line of code can replace 15. *let bat = anOptional.flatmap{aFunctionYouOnlyWantToPassAnOptionalToIfNotNil($0)} *is also key: you get nil if anOptional is nil, nil if the functionCall returns nil, and otherwise a usedul value. Optionals are one of the best features of Swift. You should be love love loving them, and hopefully learning those loving uses. 
How is hero not built into the iOS framework? Apple should just buy it and the team behind it 
It's not a problem for the compiler, it's a problem of readability for the programmer. I'll give you a more complete example (of course assuming that optionals are treated as truthy or falsy): var isHappy: Bool? = true //... imagine lots of code here isHappy = false if isHappy { print("Yay, happy!") } else { print("Unhappy :-(") } What does this print? Reading only the last few lines you'd assume it prints "Unhappy :-(", right? It wouldn't though. It'd print "Yay, happy!", because the if checks if the variable is nil, not whether the boolean is true or false. This can obviously lead to a lot of head-scratching, which is bad. The current version of Swift forces you to write `if isHappy == true {...}`, which does what you would expect. 
For the first problem, you could try a Notification. You can set one VC as the sender of the Notification and the other as the receiver. You can pass key value pairs through the user info parameter. It's not always the best option. There are other things like delegates that may work better, but this is a quick and dirty way to get the job done. [This answer](http://stackoverflow.com/a/30328806/5901353) on StackOverflow can help you. (The following answer explains how to retrieve the notification data)
You could make the interactive mode of Swift into a library call and send a PR upstream. 
Bad example I think: that example has already thrown away the advantage of labeling parameters, showing a big misfeature of Swift. Plus, the ordering could be required when using it as positional arguments, like it is in Python. 
You just said it's not personal but you need it for class. 
Unless you want the same label twice and like verbosity
No you can currently use the same label twice as they are order dependent. It would likely also break quite a few other compatibilities with c languages etc
I was kind of disappointed to find out it wasn't a /r/programmerJoke to be honest. 
Knock, knock.
... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... Java
Knock, knock.
Optionals add boilerplate and restrict what you can do as a programmer, yet they are one of the best features in swift, and I would be loath to go back to any language that lacks them. It's not abut how you nil check, it's about when you nil check, and most importantly when you **don't** nil check. Here's the same function in swift and python. Which one has a null error? def printme( str ): print str func printme(str: String) { print(str) } Obviously the python one is wrong because it's not null checking. OK, so wrong is maybe a bit of a bold claim, but it will happily print None, so there really *should* be a "if str is not None:" in there. But maybe it works most of the time, probably, until some idiot passes it a null and that gets printed in production(in which case we're lucky print prints None rather than crashing). The swift method by contrast can't be passed a null. Won't compile. Doesn't matter how stupid, sleep deprived, or distracted the programmer is, that mistake is simply not possible. Further, having it in the type system means you only have to nil check where you **really need to nil check**. I don't know how many times in ruby or C code I've seen a variable passed through several functions, each of which nil checks all its input. We're nil checking the same thing over and over again because we don't even know if it can be nil, adding boilerplate and burning CPU cycles. Speaking of not knowing, that's another huge advantage. String doesn't have a ? after it so I can tell at a glance that str will never be nil. Guaranteed, won't compile. Having added nullability annotations to a bunch of obj-c files, I can assure you that figuring out if a variable that someone else wrote 7 years ago that's used pervasively in a 100k LOC project can *ever* be nil, is not exactly easy. In swift it's trivial. 
Checkout [Swiftlint](https://github.com/realm/SwiftLint)!
even with swift itself (changing the order could completely alter the meaning) but yeah with objc if you mean multiple labels with the same name. Basically it would add a useless feature that could make the code a lot more difficult to read, compile, write and incompatible for absolutely no benefit.
We just created a french telegram group for swift programmers to learn and help each others. If you want to join us : https://t.me/joinchat/AAAAAAoZ808cioa53asFtg :)
Thanks. We've been using it in production apps for a while now and it works great
If this is a learning exercise, then go for it, but if you want this to be a real product, I wouldn't recommend rolling your own... well, just about anything, to be honest. But for sure not the text adventure engine, which is a long-solved problem. The industry-standard text adventure game engine is [Z-machine](https://en.wikipedia.org/wiki/Z-machine) which is available in open source for most any platform you can think of. [Here](https://github.com/erkyrath/iosglulxe)'s an open source implementation, which has documentation [here](https://github.com/erkyrath/iosglulxe/wiki). You still will have plenty to learn about the Z-code format and whatnot, but you don't need to gin up the basics of string parsing and error handling, for instance.
I would probably use a SQLite or Realm database. Plain text files not a horrible choice because they're easy to edit and localize, unless you need too many. 
The swift standard library is doing it wrong. Check. 
Ye i do, its personal project of my IT class...
"Swift." Knock Knock! Who's there?
Can I store different sections of a plain text file in different String variables, or would it better to use a json file instead?
Broken link.
It depends on how you are going to be editing the files. If using a plain text editor, a Windows ".ini" file format might be fine: [SectionName] step1="Hello this is a string" step2="Another string" [SectionName] step1="This is a different string" A JSON file would probably work fine but they're a little tedious to edit by hand, so maybe look for a decent JSON editor. The same goes even further with SQLite - it's a great file format, but you'll need a 3rd party tool to edit the file and localization will be tricky. How many strings do you expect? JSON parsing may get slow if you have a lot of strings. 
The game will have a lot of text for conversations and descriptions. I'm still trying to figure out the most efficient way to implement this. 
A sqlite database with two columns, an index/key and the text, will be very reasonable in terms of RAM usage and speed. It's cross-platform (iOS, Android, Mac, Win, Linux) too. 
http://mislavjavor.github.io/2017-02-03/Protocol-oriented-networking-layer-in-Swift/ the proper link is here. I was changing the theme on the blog and it seems to be using a different format
Localization uses "property lists" do you think that will work fine with what I'm trying to do instead of the core data/ sqlite/realm approach?
[removed]
I fucking hate optionals. They add nothing but complexity. Show me one thing they simplify.
http://inform7.com/ FTW
&gt; UserDefaults.didChangeNotification Thanks a lot, man! I have it working. What I did was: override func viewWillAppear(_ animated: Bool) { // Adds observer to watch for a change of user defaults NotificationCenter.default.addObserver(self, selector: #selector(userDefaultsDidChange), name: UserDefaults.didChangeNotification, object: nil) } func viewWillDisappear() { NotificationCenter.default.removeObserver(self, name: UserDefaults.didChangeNotification, object: nil) } func userDefaultsDidChange() { print("user defaults did change.") upScore = UserDefaults.standard.object(forKey:"thumbsUpScore") as! Int downScore = UserDefaults.standard.object(forKey:"thumbsDownScore") as! Int let upScoreUpdate = ("\(upScore)") // Makes upScore a new parameter of type string for setting the button title thumbsUpButton.setTitle(upScoreUpdate, for: .normal) // Sets button title let downScoreUpdate = ("\(downScore)") // Makes downScore a new parameter of type string for setting the button title thumbsDownButton.setTitle(downScoreUpdate, for: .normal) // Sets button title } Not sure how clear that'l be with the formatting of reddit, but anyway. Thanks so much for your input! If I had gold, i'd give you it.
That looks cool. A little googling doesn't show a quick way to put it in an iOS app, though. Do you have a solution for that?
Welp, frotz, another z-machine, been ported: [Frotz by Craig Smith] (https://appsto.re/us/xYtjr.i) EDIT: for the [Github link](https://github.com/ifrotz/iosfrotz) and rewording. 
You can do this through the scrollview's delegate (a UITableView is a scrollview too). You just need to implement `scrollViewWillEndDragging(_:withVelocity:targetContentOffset:)` (https://developer.apple.com/reference/uikit/uiscrollviewdelegate/1619385-scrollviewwillenddragging). It's called when the user stopped dragging and the deceleration animation starts. With the `targetContentOffset` you can tell the scrollview where the animation should end up in the end (you need to do the computation yourself - take the old target content offset, find the nearest cell you want to "lock" to, and set the target content offset to that cell's origin). Good luck!
https://github.com/SwiftCarlos
Thanks! Best 
&gt; What other features/benefits do you get from introducing a whole new type of variable, and a special conditional expression, instead of what to me is a simple rule of saying a variable that has not been assigned a value is 'nil', and 'nil' resolves to 'false' in boolean contexts. As a Python and Swift programmer, that sounds backwards to me. In Python, there's a whole category of things which are false-y: False, None, 0, 0.0, 0j, "", various empty collections, user-defined classes which define some special double-underscore method, any object at all where some method that saw it overwrote this method, etc. There's a 'bool' type but it's really just two constants (which used to be just integers -- and they weren't even constants until fairly recently). Initializers can only fail by raising an exception so you need a special construct (try/except, and more indentation) to deal with that. (You could technically fail in a way that an if-statement could use by creating an object with `__bool__` that returns False, but it would be very easy for a caller to mistakenly use this object as a real object, and so nobody does it.) None has no type, so even static analyzers have trouble deciding if a path makes sense. Many times, I've been bitten by cases where somebody returned something like `Float?` or `String?`, and somebody else treated it as a bool, so it failed in cases where it returned 0.0 or "". In Swift, a boolean value is always a Bool, and that's the only thing you can use in an "if" or "while". The "whole new type of variable" is simply a built-in generic enum with a handy name. You can make your own enum types just like Optional (though they won't get all the handy syntactic sugar). Failable initializers can return nil, so you can chain them in an if-statement, or a guard-statement (and save yourself some indentation). Optional types are generic and wrap an actual type, so even "nil" knows what type it really should be. Nobody can accidentally mistake 0.0 or "" for a false condition. &gt; To me it's like...pretend in Python you couldn't implicitly convert integer to string when printing. Instead they introduced a new type, called StringInt, which could hold either a string or an int, and convert if possible. I'm not seeing how this metaphor works at all. `Optional&lt;T&gt;` is a pretty fundamental way to store data -- your RDBMS has optionally nullable columns which still have a base type. Strings and Ints are both specific types, and it would be infeasible to have every possible (X,Y) pair of types (especially if you allow user-defined types). Optional does the opposite: it pulls the nullability feature *out* of other types. You can write an entire class that doesn't need to deal with `nil` at all, if it chooses not to use Optional. You can't do that in Python, but you can't make any assumptions about types in Python, so nobody sees it as a problem. The user could say `factorial(None)`, but they could also say `factorial("happy birthday")`, and you have to decide what to do in each case, and implement it, and (hopefully) document it. In Swift, you can declare `factorial(Int)` and know you'll never have to deal with either of those cases. (You still have to deal with numbers that are too big to represent with any of Swift's numeric types, since it still doesn't have bignums, but that's a problem with lack of types, not the type system itself.) You sound like you're advocating the Python way, i.e., make every data type implicitly nullable, and have the code sort it out. But as ESR put it, "Smart data structures and dumb code works a lot better than the other way around".
I believe you start the localization part of Xcode and it will make a separate bundle for each language local, then you use the Localized call in your call with a string description, and it will pull the strings for that item out of the strings file for that language. I believe it's a single file. I've done this a few times, but its been awhile
What does your database tree look like?
The biggest reason to use KVO is to allow you to track changes to variables across classes. So, if you have a really big app, you can make one part react to changes to a variable when it's done by another part. Another reason is design choice. Apple chose to heavily use it in Obj-C and now we're kinda stuck with it.
KVC came around when "cocoa bindings" appeared on the scene. It's mac-only technology, letting you set up data connections in IB (such as, when this value changes in this object, change this slider; and vice-versa). 
And that's why I shouldn't be on reddit drunk.
The difficult thing is I'm not using a segue. I have a ViewController sort of *laying on top of* another ViewController (a slide up menu, type thing). How would I pass the data between two ViewControllers current "up" or "active"? I did manage to find something that works. It involves using a method on the textField (which follows the editing of the field) and then saving that to another Class, which holds the variable (String) to hold that text, and then when the user clicks out of the "bottom" layered VC, I grab from the String Var from that Class, and pass it into my Object... (Sorry if my wording is confusing... I've been programming a year, but being self-taught, I didn't quite learn the ol' fashion basics). 
I've made a tool that you can view Swift's grammar in a different way lately but the moderator here won't let me to make a post in r/swift - I can't find my post anywhere... For learners the tool is like Lego’s building instructions that offer guides on how to build Swift program blocks. For veterans it’s a bird’s eye view of the Swift language’s syntax. The tool is here https://github.com/Arczzir/swift_grammar_refs/releases/ Lemme see if the moderators block comments too.
Yes, I know about this - that's basically how I am doing it right now. But what if I don't want to use a tab bar or navigation bar? When using vanilla Swift 3 I hardly use modals...it does not feel right to me with ReactiveCocoa
isn't it a difference in Swift if you stack modal views instead of just pushing to/presenting another view(controller)?
KVC long predates Cocoa Bindings
Could you provide a few examples? I'm still not sure what makes KVC preferable to an ordinary dictionary. 
thank you!
If you created segues by just control dragging from viewcontroller to viewcontroller: use dismiss() function on the second viewcontroller code on the close button IBAction
One common reason it's used is to access private parts of a framework - accessing via KVV will work as long is its implemented, regardless of its exposure. For example UIBarButtonItem as has a view property that is not exposed, but via KVC you can still modify the view. 
So, this isn't exactly a recommendation. While I'm generally a fan of the dynamic elements of ObjC and Cocoa Bindings, I find that more concrete abstractions are generally more useful than dynamic programming. There are some cases where it's very useful, though. Here's on example. Consider implementing the UI for an NSTableView. Each row represents an instance of an object. For simplicity, each column represents an instance of a data object and each table column corresponds to a property. You could readily do a quick and dirty implementation of the `NSTableViewDataSource` with the following: - (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row { id foo = self.bar[row]; return [foo valueForKey:[tableColumn identifier]]; } As you add table columns, you merely have to make sure that their identifier matches the name of a property on the data object. Now, this is probably not *terribly* useful since Cocoa Bindings can handle this for you, but this is one example that came to mind. *** The bigger point to be made isn't that you *might not know* the name of the property, but rather that there's an abstraction that lets you set or fetch data dynamically on an object without resorted to a more weakly typed NSDictionary. If you start to look at places where you have a dictionary but also realize that you have a finite number of keys and could leverage stronger typing, you can keep the dynamic nature of the API (using `setValue:forKey:` and `valueForKey:` instead of `setObject:forKey:` or `objectForKey:`) while also leveraging more descriptive objects.
You can hide the navigation bar; see `UINavigationController.setNavigationBarHidden(_:animated:)`
[removed]
I'm sure you've read all the other comments so I'll skip how it works. The only time I use KVC is to 1. Access a private method or instance variable 2. Save myself a for loop or two by using collection operators There really are few other uses besides Foundation features like KVO. #2 is super handy for when you have an array of objects and you want to get an array of a property of each of those objects (and any number of other things). Think of it as Swift's map: array = [array valueForKeyPath:@"@unionOfObjects.foo.bar"] // akin to this array.map { $0.foo.bar } Obviously Swift's is preferred because it can be written shorter and because it will throw an error if you spell it wrong. Unfortunately NSArray doesn't come with cool functional mapping/filter methods like that.
is it a view that pops up, lets the user enter something into the textfield and then goes away? *do you have it on github?
Why Lisp? Interpreters are a good place to try something new as opposed to an ancient language. 
Non-Mobile link: https://en.wikipedia.org/wiki/Homoiconicity *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^27821
I know the question says with out server, but I want to achieve the same but using my own server. How do I achieve it. My retirement is for a messaging app. when ever there is a new message i would like to send a push notification. is there a way to do it ? (I use real time database for messaging)
as in, doesn't compile or the if statement crashes or doesn't go into that if statement?
Not perfect example, but i'm using it to map json to object like this: - (instancetype)initWithAttributes:(NSDictionary *)attributes { if (self = [super init]) { for (NSString *key in attributes.allKeys) { id value = attributes[key]; if (value != (id)[NSNull null]) { [self setValue:value forKey:forKey]; } } } return self; } 
Because LISP is as simple as you can get. And it's almost always used for tutorials because of that.
Are you using fitebase? they have push notifications with google/firebase messaging notifications, i think this is what its called 
Why does it need to be immediate?
I couldn't find that session...
how else should i tackle it? I could save it away and wait for it until the user opens one of many possible viewdidappear calls, but i hope for a better way. 
Seems like something Apple would dislike for privacy reasons. Unsure - I haven't reviewed the guidelines recently and I haven't written an app with notifications. 
There is no problem with tracking notifications like this. It's perfectly normal.
I just released a new (free!) Swift video tutorial called [Natural Swift](https://gumroad.com/l/natural-swift), which teaches the importance of value types, functional programming, and protocol-oriented programming. I'm also preparing some talks for conferences. I'm delivering four days of workshops at [Forward Swift](https://forwardswift.com/) – one on beginner's Swift, one on advanced Swift, one teaching macOS development, and one teaching server-side Swift. They are all in San Francisco, from February 28th to March 4th, and should be great! If you're in the UK, I'll also be giving a talk at [iOSCon 2017](https://skillsmatter.com/conferences/8180-ioscon-2017-the-conference-for-ios-and-swift-developers#program) on March 30th, so I think it's safe to say I have a *lot* of preparing to do this month…
You could see if my [approach](https://github.com/jozemite/SpriteKit-Universal-Game) works depending on how your game was setup. My code basically positions objects based on the view that the user can see, so it fits all device sizes.
Thanks Paul!
Let me try to approach this from a simpler, more conceptual point of view. If I asked you what colour your car is, but you didn't own a car, what would you answer me? What would the type of your answer be?
func webViewDidFinishLoad(webView : UIWebView) { }
I'm not sure why I didn't even think of that That worked perfectly, lol thank you 
Finally working on an app idea that I've had for a few years. Coming from a few years of PHP and C#, I really struggled with learning Swift in the context of Xcode's interface builder. Currently trying again with a command line version. 
Just released my first game Warp Master. I was made with a custom swift/metal engine so it was a labor of love.
How did you manage that last issue?
The other comments have definitely given me food for thought on the usefulness of the optional type, but I have to say this analogy doesn't do it for me - in fact the old me (from 2 days ago) might have used it as an argument that every type should support Null/None/nil/Mu. The vast majority of things in the world, or rather questions about those things, can be answered with "does not apply", from car color to "what kind of washing machine do you have" to "what's the name of your third wife".
But conceptually, that doesn't make sense. "Does not apply" is not a car colour, nor a washing machine brand, nor a woman's name. What should happen if somebody tries to colour something with a "does not apply" colour? Should it do nothing and leave the same colour as before? Crash the program? Throw an exception? Colour some default colour, like black? When you lack an optional type, youre delegating this "nil handling" to the consumer of the reference. The issue here is that youre limited to working with whatever error handling scheme *they* decided to work with. With an optional type, you can handle the nil case as is most appropriate in your situation. You can then pass on the unwrapped colour to the painter, knowing *exactly* what they will do with it. What if you made the silly mistake of thinking that colouring something with a colour is always possible (what a ridiculous proposition, right?! /s). You'll get a lovely runtime error. Optionals are a static way of enforcing nil safety. They create compile time errors. Compile time errors are preferable to run time errors because they typically have more helpful information associated with them. Run time errors also require that you actually hit the error in your testing. But if the error is found is some seldom used branch of your programs control flow, you're likely to miss it. Compile time errors always show, without requiring countless boilerplate tests that stuff nil into every possible parameters of all functions, to test how they behave.
I came from an OpenGL background, so I essentially already knew how to use metal. SpriteKit would have required a learning curve on my part, and according to apple metal is faster. Most of the effects in the game are nonlinear, but I suppose you could implement them with SKEffectNode.
Having hardly done any native, i think it's mainly about learning to use XCode first. Though if you dont know node development or react either, then I think you're in for a difficult time.
Long story short, I made each concrete type implement a static method to connect the signals unique to that type to the passed instance, and call the equivalent method with the same object in the next concrete type "up" the de facto "inheritance tree", and so on, until it reaches the method in `Object`, which does nothing and returns. That method is called by the default initializer(s), so that signals are connected when you create your widget. This, combined with the way the internal callback closures are implemented to load the real callbacks from an internal dictionary, allows you to do the following: var win = Window() win.title = "Hello!" var button = Button() button.label = "Click me!" button.onClicked = { _ in Application.shared.quit() } win.add(child: button) to construct a window with a button that quits the app when clicked. Obviously that's a contrived, oversimplified example, but it shows the basic feel of the API.
You just need to work through an online tutorial on those gesture recognizers. Google "swift gesturerecognizer programmatically". I think I used one of Ray's tutorials. But then it will seem simple. You'll just have a function like: func pinchedView(sender:UIPinchGestureRecognizer){ if sender.state == UIGestureRecognizerState.began{ //or whatever holdDistance = distanceFromTarget } } So any time the user makes such a gesture, it goes to that function and you perform your tasks. You'll need something like let pinchRec = UIPinchGestureRecognizer() with the class variables. And then pinchRec.addTarget(self, action: #selector(self.pinchedView)) when the view is loaded to trigger that function. 
# AHH NO!!! NO REACT! FOR GOD'S SAKE NO REACT! React has some really fucky legal bits meaning anything you make in it that could compete with Facebook or anything Facebook owns can be fucked to shit: "The license granted hereunder will terminate, automatically and without notice, if you (or any of your subsidiaries, corporate affiliates or agents) initiate directly or indirectly, or take a direct financial interest in, any Patent Assertion: (i) against Facebook or any of its subsidiaries or corporate affiliates"
because there was a point not too long ago where Java and C# was as new as Swift and people said the same thing about VB, PowerBuilder, etcc....
You cannot write tweaks in Swift until there is a stable ABI (so that the runtime wouldn't have to be packaged in each dylib) and until Logos supports it. There are no plans for Logos to support it in the near future afaik.
It's difficult to get a foot on the ladder with no professional experience or qualifications. You will need to create a pretty decent portfolio to impress your prospective employers and even then, you will likely not be on a decent wage until you get a couple of years' experience under your belt. 
Pretty much this. You have to use it for iOS, and should use it for native Mac apps. I'd love to use Swift in other places (as a Linux based touch device, mostly), but not shipping with any Core Libraries makes it undesirable. I understand that there are open source versions of Core libraries, but they're all (mostly) unpolished. When building iOS apps, most of the damn app is put together with core graphics, core audio, core animation, etc. Take that away, and you're left having to build a ton of tools yourself. Which, makes Swift a lot less desirable when starting a new project. Which sucks, because I do really like the language. 
I work in the UK, i think one of the key things is location, London is better and more likely to land you a role but birmingham / leeds / manchester is OK. If you can get 1 app in the store or at least ready to show then youll be pretty set, I got my first role without touching iOS just embedded C programming, but this is a rare case.
hey! So if you could post a link to the tutorial, it'd help me get a better idea of what you're talking about. Also, I completely agree with your view of making the touches Node-based. It's really easy to check if a touch is on a node or not. Also, when it comes to movement actions, you would need 2 things happening. 1.) a method that is updating the position of all pieces that are loaded and 2.) a method inside of your block class (I'm assuming all your blocks are from a general block class) that moves the position of the piece to one of the lanes. (and again, I'm assuming you are using an array to control the logic of the lanes and whenever there is a collision, it updates the state of each row and column of you map). But Also, I would not try to implement physics. It will only make it harder for your pieces to actually land correctly. Physics will tilt your pieces. Instead, I'd start by taking in a position whenever a touch begins and then get the final location of the touches end. If the position at the touches end is still on the node, then rotate it. if it is to the right, then move it over one column to the right and the same for the left. let me know if I answered your question.
This is probably the most comprehensive collection you can find on github, incredibly useful. https://github.com/nettlep/learn-swift
It's not all about time (I mean, yes, it takes time), but it's about production. Stanford released their iOS development course on iTunes U and youtube. I suggest going through that. Also you should accomplish two more things: 1.) get an app on the app store. Start to finish, make a thing. and 2.) get an interesting project onto GitHub. It doesn't have to be a full app, but if you can post a few projects onto GitHub, it will really help. 3.) Implement a Binary Search Tree. Including any obscure traversal you can find. That will help you in interviews massively. 4.) Once you've done all this on the computer, do it again on a dry-erase board from memory. If you can code all these things on a white-board, then you're ready to start applying. But that being said, this is the entry point. Coding is a near-infinite pursuit. If this isn't exciting, then be cautious if this is what you want to do. Coding is amazing, but some people go into it just for the money. Those people rarely do well and don't enjoy it.
hey! thanks for the response, it's much appreciated. First off, the tutorial I mentioned is at: https://www.bloc.io/swiftris-build-your-first-ios-game-with-swift There's a Swift 3.0 update in the GitHub repository at https://github.com/Bloc/swiftris Yes, you pretty much answered my question, good to know the general direction to think in. Good point about physics tilting the blocks - that's definitely a no-go. I guess the missing link for me then is how I tie my View layer back to my Model layer. Should the Block class should be a subclass of SKNode (essentially making it part of the View layer) or just a regular Object in my Model layer? If the Block is not an SKNode, how do I find back the Block starting from the touches which are recognised on the individual squares. Is it "correct" to subclass SKNode to create a node with a reference back to my Block? Or is that mixing View code and Model code in the wrong way?
Well, if Nuxt.js is a node.js framework, then it will need a node.js server running to interpret it... but I might suggest looking into JavascriptCore (a swift library) that reads javascript. You might be able to run your javascript code within your vapor app... but that sounds like a huge memory hog and I can't imagine it'd be faster than just running two servers.
Ehhh, this is Javascript?
Great explanation! I really appreciate the example melding code and a real-world example. 
I was in this boat a month ago. UI is not my forte. I browsed dribble quite a bit and googled iOS app design and found a blend of UIs that I liked. I found the trial of Sketch to be very helpful, and I used the free design pack called 'Tethr' from InVision to get me going on combining everything into a design for my app. It's painful. Applying the design took as much or more time than building the functionality. But it's so worth it. So satisfying the first time your app looks like you imagined it!
I want to thank everyone for taking the time to reply with excellent information, it actually reaffirmed alot of my thoughts in regards to putting together a decent portfolio, git projetcs etc. I am going to start building out a curriculum for myself starting with the latest Stanford courses. I will read the swift programming language v3 book and take it from there. Thanks again.
That's a regular patent clause common in many open source licenses: Swift itself has a similar clause in its Apache License. It basically says if you sue us for patent infringement, you need to stop using the software. It sounds bad but it's generally a very good thing.
The thing is if you already know swift and want to use it on the backend, thats fine. But to be honest there are plenty of better options, that have tried and tested. Even Node is a better option (non blocking, single threaded). Seeing as Walmart used it on black friday to serve 20 million concurrent users.
Well, most companies don't have the resources Walmart has. And the early results of tests shows that Swift is beating Node.js in both latency and load. By all means it's early and needs more peer review, but it is kind-of expected seeing as Swift beats Objective-C on every metric. But, as the video argues, Swift is a solid language that lends itself to working in teams and development costs will (for most companies) dwarf server costs. I am super bias, but I imagine if you're subbed to r/Swift, you are as well.
1) No. I don't need a compiler in my web dev toolchain. 2) I learned web development in Web Objects in 1997. It was the best web development environment ever prior to Ruby on Rails but largely because of interpreted Objective C (called webscript) which allowed fast iteration. In general, compilers have no place in my web service development tool chain. I've also done Java web development, Rails, Django, raw C CGI, etc....One more time - I do NOT need a compiler in my web development toolchain. 3) "beats Obj-C in every metric". except dynamism/introspection/flexibility/etc. Hello, Java beats swift in dynamic features. 4) "the history of development has always been change" - change only stays if it improves things. Where's the win? Execution speed? Nobody cares. PHP rules the web for a reason. Its not execution speed. Its raw scalability, ease of deployment, and speed of development. If I want even higher speed of development and am willing to sacrifice scalability, I'll use Seaside. There is no niche in my world that Swift fits.
Great plugin!
[removed]
No. Think about it like this: you write two apps and they both have a "batman" class with the same "punch" method inside of it. How do you tell one app to communicate directly through the method? You don't. You have to send messages through listeners. Unless you want to write your own internet protocol, then you'll need to conform to 'get' and 'post' requests between servers.
Why do you need to do that though? Closures capture any necessary variables automatically.
Thanks, will take a look!
I think Swift will have a hard time at first to establish itself as a server side language since there are so many alternatives with very rich ecosystems. That said it does have a chance since there is a large group of iOS developers using it that would also use it for developing backends for their mobile apps. For example, I am an iOS developer and I would love to use Swift to develop a REST api for my apps. Why? Because I write Swift 8 hours a day, 5 days a week and my productivity is much bigger than if I would have to pick up Python and read up a Django tutorial. So it will probably start within this niche and if its successful it may catch up to the mainstream.
no lol. honestly, there are fantastic options out there today like python with django framework or even php. I don't really see a point in switching to swift for server side applications when most of them just need to respond to basic HTTP requests and return either JSON or some HTML view. no need to complicate things. Swift is still cool for iOS dev though, i guess
App store search results are based on a few factors (I don't think all of which are public): Title, keywords, downloads, user ratings etc Google App store SEO. I'd be surprised if you could get that 2nd spot though, I'd imagine there are a shitload of apps trying to ride those coattails 
My apologies. I was going to post each video I uploaded as I get further into more advanced stuff. I won't post anymore to this subredit.
Please post!
The thing is barely usable for iOS... When they fix at least half of the innumerable compiler/sourcekit crash and there is an IDE for the language (xcode and appcode are shit turds) then perhaps then it might seem even remotely like a not too horrible idea to use backend swift over the 10 or so far superior toolchains available.
That is one guy's opinion, follow your heart friend!
If it weren't for Go, I'd take a serious look at Swift for a web backend. But, as you mentioned, go was built for the web. It's skyrocketing in popularity for good reason. 
I thought about that right after I posted it. Thank you for your response! 
I tried it out over Christmas. As a long-time Python programmer looking for something faster with the ability to ship compiled binaries, server-side Swift appeals to me. After running up a test app on Vapor and trying out a few libraries, I'd say it's at *least* a year away from being ready for production. Too many things don't quite work on Linux yet. And performance is actually no better than Python, if you know what you're doing on the Python side. If you're using Falcon or uWSGI or just CherryPy with PyPy, it's as fast as Vapor, easier to develop and deploy, and with vastly more libraries available. Right now, I'd suggest Python or Go. I'll look at Swift again when the next major release lands, because it does look promising.
Can you expand on your preference for Atom's UI over Sublime Text's?
I will. I'll also share your articles on FB. Awsome stuff.
Thanks, this was a great video. I also found it helpful (as a beginner) since it didn't base all the examples on existing AppKit/UIKit examples.
That doesn’t have anything to do with swift though?
You could try asking the people at [https://github.com/shift-js/shift-js](https://github.com/shift-js/shift-js).
In the past I've posted in issue trackers of _dead_ projects and found other people willing to contribute to a fork or already working on some.
The function is static but not its class, therefore, it's possible to have more than once instance of your networking class without a singleton. A static function means that you can't override the function. Do you really want more than one instance of your networking class? Often times you have asyncronous data calls. What if suddenly one instance of said class is deallocated? Certainly a singleton isn't always the right solution for this though it can be convenient. If you are confident in managing an object's availability to receive a response then it's ok to do without. Also, if you have many different objects that you wish to be delegated this responsibility, then, again a singleton is probably not what you want. For a less complicated networking solution, a singleton works well.
If you read the friendly article there's a section on Atom vs ST. If you need that answered before deciding to read the rest you can control-F "sublime text"
It hasn't escaped to me. "Historically, tools other than those of startup agile developers don't have a place in web service tool chains" is still a ridiculous assertion.
&gt; But to be honest there are plenty of better options, that have tried and tested. Depends on your def of better, of course. Realistically, for 90% of what anyone creates, pretty much any damn thing will work fine. 90% of the remaining stuff you can cheat your way around with caching, CDNs, etc. If you need proof you can go look at how much PHP still gets written. The real problem in programming is productivity and errors. If being able to use Swift from stem to stern helps your productivity then it's "better" than some alternative that you're less proficient in. If Swift's type handling prevents a certain class of bug your app is more likely to have or that you yourself are more prone to (we all have our achilles heels, after all) then it's "better" even if you could create a smaller thing that runs 5% faster in some other language. Further, given all that, I'd assert that if Swift just gives you a happy for no rational reason then that's enough to make it "better." I personally have a hatred of javascript that's 50% based on valid reasons and 50% irrational grudge. If Swift and Node were the two reasonable deployment methods for a project there's no question that Swift would be better for me.
There's a few blockers, but they should be clearing out. You can express your interest in [this github issue](https://github.com/kripken/emscripten/issues/2427) tracking support of swift-&gt;js/wasm.
I think it does, because they'll most likely use Swift for future stuff that compiles to web assembly.
Not sure what you are trying to accomplish by this. I don't think it is possible to make it work for a generic enum since it might not have all of the necessary cases and the cases are not included in the type but you can do something like this: enum Letters: Character, CharacterConvertible { case a = "A" case b = "B" func toCharacter() -&gt; Character { return self.rawValue } } enum Numbers: Character, CharacterConvertible { case a = "1" case b = "2" func toCharacter() -&gt; Character { return self.rawValue } } protocol CharacterConvertible { func toCharacter() -&gt; Character } let things: [CharacterConvertible] = [Letters.a, Letters.b, Numbers.a, Numbers.b] for val in things { print(val.toCharacter()) } Using a new protocol lets you create lists containing both elements.
You've got a good bit of solutions there on SO. Here's my favorite way of doing it. //: Playground - noun: a place where people can play import Cocoa let source = ["google" : "http://google.com", "twitter" : "http://twitter.com"] let urlSource = source.reduce([:]) { result, element in guard let url = URL(string: element.value) else { return result } var result = result result[element.key] = url return result }
Nice! Although I'm bothered that the struct isn't capitalized. 
Yeah I agree, it mainly comes down to what you enjoy writing. Although thats not how companies usually think when they're picking what to use. If its a bigger company that 5% boost in speed can be big. If they are able to process more users faster or even use less resources on lets say AWS, that = less $. Thats mainly why companies are gravitating to Node as it requires less resources even though backend dev don't really enjoy writing JS.
Having written a large web app for an online board game in Python &amp; Django, I'm never doing it again, because the lack of compile-time type-checking caused a substantial amount of work, and generated the occasional hard-to-track-down bug. I'm very excited about being able to use Swift instead, and have been experimenting with Kitura.
Oh, right! It's fixed now.
Make sure your constraining to `View.Left` instead of `View.Left.Margin`. That would add extra space.
What have you tried so far? You could try setting your class to be the delegate of `webView.scrollView`. Or use KVO on `webView.scrollView.contentOffset`.
Firebase is great and provides a lot of usefulness. However for personal projects it tends to be overkill if you aren't taking advantage of its features. what do you like about it? Or need from it? does it provide anything for you that you can't easily write yourself?
Use whatever gets the job done for you
What happens when the code runs? Are there any errors and if not, is the array just empty? Does the code after the BloodPressureAPI request actually fire? Putting a print command or something inside will verify this. Might not be anything but the variable bloodPressureHistoryArray is setup as an optional, does it need to be? Have you tried the following to ensure it is initialized: var bloodPressureHistoryArray = [Row]()
I started using it and it felt great. After a few weeks into my project I found that I'm over complicating things because of firebase. I wrote my own syncable objects and stuff, tried to perfectly structure my real time database in order to allow the queries I would need. It cost me so much time.. a few days ago I've rewritten my backend with a simple nodejs/express/mongodb stack and switched to REST calls in my app. I'm much more productive and a lot faster now. Don't get me wrong, Firebase is great. I mean, it's great!. Totally. But it depends on your needs. I should have made the switch from Firebase to my own custom backend a lot sooner it would save my a lot of architecture time. Need a fast backend, a few syncable objects and the best.. real time databases.. go for Firebase. Do you need more "complicated" queries, know a little bit about backend development (even if not, I really like it by now.. hated it before), want a little more flexibility go write your own. If you need any help regarding backend technologies, I'm by no means a backend developer but I've made some experiences I'm glad to share :)
It is great, simple and easy to deploy server apps in Swift. I just finished a Forum site using Swift and it was a pleasant learning experience. Powerful, fast and never breaks (unless nil):D https://swiftforums.herokuapp.com
Agree!
someone linked to http://stackoverflow.com/questions/39850730/nspersistentcontainer-is-only-available-in-10-0-or-newer-error?rq=1 However I lack the rest of the answer... "Use both patterns and write the code with availability checking if #available(iOS 10, *)" But what is the "below iOS 10" pattern...?
Here is, what i am trying to accomplish: In BioInformatics, there is an algorithm called NeedlemannWunsch for Sequence alignment. It can be used to align whatever sequences. There are different types of sequences, for example `DNASequence` or `AminoAcidSequence`. `DNASequence` consists out of `[Nucleotide]`, while `AminoAcidSequence` consists out of `[AminoAcid]`. I want to wrap the arrays of `Nucleotide` and `AminoAcid` in their respective wrapper class, because the wrapper class will get additional functionality like `complement()`, `reversed()`, etc. Problem: If i have completely different structs that store completely different arrays of enum types, how can i make sure that my implementation of NeedlemannWunsch can work with either of those? Solution: Write a protocol like i did in my post, make it a collection and voila, i can throw in instances of `DNASequence` or `AminoAcidSequence` into my algorithm and the algorithm can iterate over them, and use them anyway. Problem: Doesn't work. Both of the answers i got here in reddit aren't really, what i am looking for. Do you guys have any better ideas? I simply want to pass in an instance of `DNASequenc`e like this: `let result = NeedlemannWunsch(a: myFirstDNASequence, b: mySecondDNASequence)` And it should work. I dont really see, how I can do that with either of your solutions. Thank you very much.
This is the only way I can think to get this to work as I understand it: If you want the NeedlemannWunsch to be able to use either DNASequence or AminoAcidSequence, the function will have to be generic: func NeedlemannWunsch&lt;T&gt;(a: T, b: T) -&gt; ResultType { } then you can call it on anything, but cant do much with a or b yet, in order to call methods or properties on type T, swift needs to know what props or methods T has, easiest way to tell it is by constraining it with a protocol like you said: protocol Sequence { var data: [WhatTypeHere???] } and constrain NeedlemannWunsch with that protocol: func NeedlemannWunsch&lt;T: Sequence&gt;(a: T, b: T) -&gt; ResultType { let aData = a.data let bData = b.data } now the func know a and b have a prop called data now the problem is what type to say Sequence.data is. since it is not one type, it can be either an AminoAcid enum value or Nucleotide enum, the type for data needs to be generic or a protocol. for now lets say you want to compare equality like so: func NeedlemannWunsch&lt;T: Sequence&gt;(a: T, b: T) { if a.data[0] == b.data[0] { print("pl")} } then Sequence.data has to be of type [Equatable] so: protocol Sequence { var data: [Equatable] } but you cant use Equatable for types, it can only be used as a generic type constraint, or an associatedtype constraint so you have to add an associatedtype to your protocol: protocol Sequence { associatedtype SType : Equatable var data: [SType] } now both DNASequence and AminoAcidSequence can conform to Sequence, NeedlemannWunsch now know what it can do to the type passed in. heres a working example: http://swiftlang.ng.bluemix.net/#/repl/589caab41009446ba0977ed8
You stand a better chance of getting an answer in /r/iOSProgramming, your code may be in Swift but your question centers around the iOS SDK and is actually not Swift-language related at all.
I'm also keenly awaiting developments on this front! Hopefully WebAssembly can begin to wash the crayon-marks of JavaScript from the web.
Hmm. Parsing JSON without a library like SwiftyJSON is still not worth the hassle for me.
For the UI, I think it looks better than Sublime Text. I also prefer how the menus and options are organized. Finally, I love the fact I can change the UI using CSS! BTW, I've got Sublime Text on my Mac as well, but don't use it much.
I working my way up to advanced stuff. Relax dude. Just ignore it if you don't like it.
With 13 upvotes, I'm clearly not upsetting the majority of people so I will continue posting here, until I get to the "Advanced" stuff.
Cool - thanks for responding, and nice writeup!
Whoops!
See if you can make a playground that shows your issue. You wont be able to call instance methods from a static method, only other static methods (unless you make an instance of the class in the static method). Anyway, controlling exposure would be done by marking the methods as private or fileprivate, not by making them static. EDIT: Here's a playground that gives a few examples //: Playground - noun: a place where people can play import Cocoa struct MyStruct { // This can only be used withen the scope of the struct MyStruct private func privateMethod() { } // This can be used anywhere in the file it's in fileprivate func filePrivateMethod() { } // This is an instance method func instanceMethod() { } // This is another instance method func anotherInstanceMethods() { // which can call other instance methods instanceMethod() } // This is a static method static func staticMethod() { } // This is another static method static func anotherStaticMethod() { // which can call other static methods staticMethod() } // This instance method calls a static method func someOtherInstanceMethod() { MyStruct.staticMethod() } // This static method creates an instance of this struct and calls an instance method static func someOtherStaticMethod() { let myStruct = MyStruct() // We can call privateMethod because we're within the scope it was declared myStruct.privateMethod() } } let myStruct = MyStruct() // We can't call the private method here outside of the MyStruct scope // myStruct.privateMethod() // But we can call the fileprivate method myStruct.filePrivateMethod() // We can call static methods MyStruct.staticMethod() 
Thank you so much, that's very helpful. 
Hi Yunaiki My YouTube channel is here https://www.youtube.com/lyraddigital. Thanks for showing interest in my videos. More swift videos to come shortly. I'm just getting started. I also do Angular 2 at the moment.
I prefer my code to be as readable as possible. Iirc SwiftyJSON is &lt;100kb so is that what you consider decently sized? I'll happily pay if it's saving me time. Same goes for networking / Alamofire.
I will have to give this a go.. any books you recommend or apple documents are enough for a beginner. Thanks
This reads exactly like ray wenderlich writeups... almost too exactly. https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1 https://www.raywenderlich.com/79149/grand-central-dispatch-tutorial-swift-part-1
Atom is great for linting swift, jSON.
Come on, even the pictures are remakes.
I dropped JSON in favor of YAML and never been happier, good riddance. I wonder why the whole world doesn't adopt YAML for everything and I guess it is because javascript and the web. At least for me in Swift everything is YAML.
you forget to set the delegate. You need something like someVariable.delegate = self Never worked with AV barcode scanner. so i dont know which variable has its delegate set to self.
Very interesting use of Stencil. I did the same when working with core data to generate my data classes hardcoding the template but Stencil is a much better option.
i did set that on line 204 with output.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)
The easiest way I can think of would be to make a function with a generic inout parameter for the property you want to set. func setProperty&lt;T&gt;( property: inout T, value: Any) { if let value = value as? T { property = value } } Then you can call it like this let t = UITextField() setProperty(property: &amp;t.text, value: "foo") let s = UISwitch() setProperty(property: &amp;s.isOn, value: true) 
I just released my first app ever! [WING NITE: The Video Game!](https://itunes.apple.com/us/app/wing-nite-the-video-game/id1203478597) I come from a video post production background (Animation and motion graphics mostly) and I wanted to apply my animation skills to a video game so I did! Me and my buddies eat chicken wings together every tuesday, so I figured that would be an easy enough concept for a simple game. It took me a month from googling what language you write iOS games in to launching it on the app store. It's a simple game but I'm pretty proud that I did everything by myself: learning Swift+Spritekit, making the animations, sound design, everything! I haven't told my buddies I made the game. I'm going to tell them next tuesday when we all are eating chicken wings together. Should be a good joke. 
Well done! I will have to pull it down and try it out.
Just released a minimal To-Do app called Agenda: https://itunes.apple.com/us/app/agenda-to-do-lists-tasks/id1182063378?mt=8 The goal was to build something to help me plan out daily lists of tasks, as well as organize things by tags and customized sections like "Today", "Tomorrow", "This Week" etc. Would love some feedback!
A. "_setValue" is vague, label your methods. B. Why the underscore? C. More generics and constraints fix the function func setValueWIthBetterName&lt;T: UIVIew, V&gt;(view: T, value: V) where T: SettableProtocol, T.ValueType == V { view.setSpecialValueWithBetterName(_ value: V) }
If it's all programmatic then you need to present your view controller in the app delegate didFinishLaunchingWithOptions. I think it's black because there's no view being displayed. 
Sorry I didn't look at your app delegate, I was wrong. I'm not sure about this but I don't think you're supposed to initialise window in the didLaunch, that might have something to do with it. 
Was expecting to see it. Didn't see it.
Are you trying to tell me we shouldn't use communication technology of the early 90s when designing a language for the late 2010's ...say whaaaaaa?!
I was asking those questions to prompt you into describing your problem. I understand that you "need" a didGet or willGet, but why? What's the reason overloading get doesn't work for you? Edit: I was pretty sure I'd used KVO in Swift, and yeah, it is supported. Apple dos here: https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#//apple_ref/doc/uid/TP40014216-CH7-XID_8
And I actually wrote "Discord" in the title before realizing it.
I'm almost certain it's because you need to instantiate a storyboard, that has an initialviewcontroller rather than instantiating the first view controller you want to view? edit: something like this: let aStoryBoard:UIStoryboard = UIStoryboard(name: "nameOfStoryBoard", bundle: nil) weak var initialViewController:UIViewController = aStoryBoard.instantiateInitialViewController() self.window = UIWindow(frame: UIScreen.main.bounds) self.window?.rootViewController = initialViewController self.window?.makeKeyAndVisible() 
Kind of, the object you are observing has to inherit from NSObject, meaning it is using the objective-c runtime. In any case, I'm curious to see what the use case is also. 
what about didSet and willSet?
I'm doing this without storyboard, can I instantiate the storyboard without using it for UI building
It's common for code to have work to do when a value is changed. I'd argue that trying to do any work when a value is read, other than computing and possibly caching the value itself, is a sign of bad design that's fragile and prone to bugs. What real-world use-case do you propose for didGet / willGet?
/u/lanzaoi wants to observe property *access* (getters), but just setters.
have any success with certain keywords on google? it seems full of garbage and irrelevant results, i've had more luck on dribble 
tl;dr Swift Data (a beefed up NSData) is dank as fuck.
It depends on what you're looking for. I was just looking for an Xcode icon so 'xcode icon' would suffice. Looking for backgrounds? 'background blue' is good enough to get aplenty. Depending on your search, appending 'icon', 'clipart', 'design', 'wallpaper', 'blue' will give you better results. You have to be creative and fine tune your searching skills too.
It is not 100% functional, but as a draft the concept is clear and the text format is done. Tested with a thousand rows and feels like butter. For small projects to store some data this is the perfect tool. Perhaps I'll work on a data reader/writer class for use within a Swift app but don't know, SQLite is good enough and it has the power of SQL, so I'll leave it as a little pet project for now.
yes. but your method should either be names set(value:) or setValue(_:). no underscore in front of method name should be present. (someone please correct me if i'm wrong :0) 
VSCode is 100x better than both atom and sublime text combined. Seriously, it's amazing. Give it a shot and you'll never look back.
If you want to support a deployment target lower than iOS 10 then stop using NSPersistentContainer and replace it with the core data stack that everyone's been using for years now.
There is a lot more to it than this... but a very simple way you can look at this particular scenario is "do I need state?" - if you need state then use a singleton, otherwise just use static methods that take input and return output.
Nice app! What's the feed for the paintings? I have a similar app that consumes /r/Earthporn as wallpapers but would like to add art too.
The featured art feed is from http://muzei.co/featured where paintings are curated from wikiart
It's helpful, indeed, but for the life of me, I can't see a reason to prefer withUnsafeBytes over getBytes(_:range:). One small error in your function, and your pointer runs out of the buffer.
If the string is all numbers, then searching for everything but numbers (hence the inverted) will return nil. The reason it's done this way is because it's easier to check if something doesn't fit, than if all of them do.
If you want the keys sorted, then you are mistaken. Dictionaries are not ordered, arrays are.
[removed]
Broken link Edit: Right after saying this it was back up
Check your info.plist because by default it has a storyboard item. If so, that's your problem. Just delete that line.
I *think* you're asking about conditional conformance, and Swift doesn't have it yet. Hopefully in Swift 4 you'll be able to, for example, say extension MyLinkedList: Comparable where Element: Comparable { // do stuff }
In my opinion one of the best ways to learn swift from scratch. 
are there supposed to be only three lectures?
I just started watching the 2016 version and this guy is just amazing. He knows every single detail of the Swift langugage. I highly recommend this for learning Swift. However, I'd say this is for someone that already knows what MVC is, what OOP means and what are its concepts.
Did you click the link?
I did and it gave me an error message but I did eventually find it in on YouTube. 
He actually worked alongside Steve Jobs in NeXT, very good teacher. [Source](https://www.youtube.com/watch?v=ZnphFIgkgoY)
No `@escaping`, `@discardableResult`?
those are attributes rather than keywords (at least those are the terms used in the swift language docs)
Too bad it isn't on iTunes U yet. 
Use a popular search facility such as DuckDuckGo or Google (if you are using Safari or another of the browsers which all the kids use these days, you can just type the phrase right into your browser where you usually type in URLs); search for the phrase: firebase ios swift tutorial When I did this just now with duck duck go, the first dozen+ links looked like they'd be well worth exploring. 
[here is a link to the app!](http://shayy.org/bottly)
They are available here: https://www.youtube.com/watch?v=zpVsrWvd47Y&amp;t=0s
That's what I wanted, that and changing all the public function inside of the extensions to internal. Thank You sir.
Sorry about that - it seems Reddit doesn't really like medium.com links sometimes 🤔
As a style suggestion, why not have a ToDo class that has a status property and a text property, then add those ToDo classes to your array? It's a headache to try and use a string to maintain multiple attributes of something. That's what object orientation is all about!
Thanks for writing your post. I am also super excited to see the 2017 version out. On a serious question how do you fail the online course? Do you mean you gave up because it was difficult? 
Paul Hegarty is a great teacher, watched his iOS 9 lectures and learned a ton. I'll definitely watch his iOS 10 lecture when it's on iTunes U. Definitely the best way to learn Swift for beginners. 
Pretty nice idea, couldn't test much cause there's no bottle around - so I just sent one. How does a virtual bottle travel from a to b? Just randomly showing up or is there a more complex algorithm behind this?
Are their any Skype or Discord study group for this?
Are those videos private?
What are you having a problem with?
Great ideas, just sent a bottle too. Hope to get one
Great resource overall! I think you had one error that I noticed. Lowercase `optional` refers to defining a protocol's method requirement as being optional, as opposed to uppercase `Optional`, which is what you described. Ninja Edit: Also when talking about the `operator` keyword your code sample shows the use of some operators but doesn't show use of the `operator` keyword. Other examples do but just not that one. Either way great article!
I did notice that bug, will definitely fix it on the next update :) thank you 
You made my day, dear redditor, you made my day. 
I was doing something similar to this the whole time but I just couldn't get it right lol. Thank you for clearing this up for me, it worked like a charm. 
Glad to hear it!
Try yourMapView.showsBuildings = true
I like Alamofire for requests. But yes, I agree. That's how I learned. For iOS it's primarily the cocoa framework (the ui framework basically) that you gotta learn. I used fragments from a few tutorials from http://www.raywenderlich.com as well as https://littlebitesofcocoa.com
Why not save the chosen color hex representation. Then later if you want you can offer an ability to manually input a color. This also protects you later if you want to change the array of colours later, as u won't have to worry about how that will affect users who have already chosen a colour.
Thanks for advice's like for premature optimizations, that is a really good advice. I already was thinking in my head about doing MVP.
Very creative idea, sent out a couple messages. Also maybe in a future update add the capability of adding a image in the bottle? 
Imagine like you're watching a movie, then somebody interrupts your for a few days. Will you continue watching it or start from the beginning? And then Swift 3 is out with much API redesigned, etc. and somehow you don't have time at all because of work.
I sent three messages. Hopefully they are opened! This is a great idea, I hope it takes off! But you might want to make it so that messages are copied on the server a few times when created so that multiple people get a message. I guess 3:1 or whatever until a threshold is reached where people can get the full experience.
I just mean as a call out to others who might want to get involved. Set up a slack and post the address here or something. Just an idea
URLSession does exactly the same as AlamoFire and does not need an external library, plus you'll learn to work natively with one of the most important pieces of networking in Swift. URLSession also has upload and download tasks so it is crucial for you to learn about it if you want to master Swift. Forget about crutches, you already learned how to walk in Android, you're more able to run now.
I look forward to English language bottles! Every time I try to pick up a bottle in WeChat/Weixin, they messages are in Chinese. 
And also the view has to be tilted more than 10° Or so degrees 
Ah nice! Didn't realize that, but it makes a lot of sense now that I think about it :)
Thanks so much! I'll try and get those patched up! To be honest, when I hit publish on this one, I was so mentally taxed from writing it for three weeks that I didn't do another take through the whole article as I usually do 🙈
Maybe look into using mapbox instead :(
In one month a 5 year experienced android dev will have 5 years experience in swift? Huh?
Last week I finished migrating a website that I maintain[1] to Swift. Gitignore.io helps anyone create a useful .gitignore file for their project. I'm using the Vapor framework as well as a ton of other open source tools documented in my continuous integration[1] wiki page. 1 - https://www.gitignore.io 2 - https://github.com/joeblau/gitignore.io/wiki/Continuous-Integration
Sure, why not? What does it entail? Provide a description of requirements. 
The debt snowball app would be great. I'm currently using an Excel spreadsheet that I only update about every 3 or 4 months.
Uh, it's actually incredibly efficient… you should research how `NSCharacterSet` (and `NSIndexSet`) are implemented. It could take as little as two comparisons per character to determine if the entire string is composed of digits.
They're private. KVC bypasses access control. 
So a painter with five years experience switching from black to white suddenly lost all his experience? Huh?
Not at all equivalent. Sure someone with a good deal of experience in software will pick up another language much quicker than someone with no experience. But come on man, theres no way you're at the same level in a month- People transitioning from objective c to swift arent at the same level in a month!
More importantly, switching languages is comparatively easy, but switching frameworks is hard. Switching from iOS Objective-C to iOS Swift is a fairly minor change, while switching from Android Java to iOS Swift basically requires relearning everything you know about how to working with the system-provided classes.
wow today I learned. thanks for the link.
var/let/inout only applies to values (structs and enums); for objects, it just controls whether the reference can be changed to point at a different object, not anything about what it points to. I'm… also curious about the &lt;enter&gt;s in your question.
Thanks Catfish_Man! As for the &lt;Enter&gt;, that was a failure on my part to understand how Reddit linebreaks work lol (not unlike my understanding of value types vs reference types) . Thanks again! 
To those of you who down voted, the video is free so kiss my butt for doing that.
The first assignments just dropped on iTunesU. CS193P by Stanford (https://itun.es/us/WGYBhb) https://itunes.apple.com/us/course/id1198467120
[removed]
Not trying to bash you. But this video is pretty much useless (haven't looked at your others), maybe thats the reason you are downvoted. Btw.. nobody will watch your videos with that kind of attitude. Be nice, not a jerk and people will treat you the same.. well, most of them.
Disclaimer: that bundle includes the video version of my own course, [Hacking with Swift](https://www.hackingwithswift.com/read), so I will get a tiny slice of money if you buy it. Everyone learns differently, although with these bundles there are usually a few forces in play: 1. They are often sold by resale companies like Udemy or StackSkills rather than the original authors. The authors get a relatively small slice of your money in the hope of having volume sales. (In the case of Udemy, authors don't have much of a say on when their products are heavily discount.) 2. The "original" price tag is usually nonsense, and chosen only to make the % off sound massive. 3. They frequently do not include updates as the language changes, so they can expect to get more money from buyers over time. What it really comes down to you is whether you'll be able to stick with it and read/watch everything you buy. I know it feels good to buy training material, but unread books make no apps :) My own learning bundle, [the Swift Power Pack](https://www.hackingwithswift.com/store/swift-power-pack), is $100. I don't think I'd be able to able to afford putting it down to $45 in the long term!
Do you have an example?
Thanks for the breakdown. I figured the massive discount part was made up. That helps to understand what I'd be getting into if I were to buy. I wish this kind of info was available on the sites that sell the bundles but I suppose I also understand why they don't want to offer it up, as you've noted. I'll check out your links. Cheers!
Hey, I have no problem paying for the course.. but pardon me, are your course updated once SWIFT gets updated by Apple. Second, is there a free chapter to check your course. Last, the 10 quality apps, are they full operational app, like you gonna teach us how to make a twitter for example, I am not saying same as twitter, but you will teach us the ins-and-outs of making twitter clone, how the data is being managed, etc. Sorry, but I went through too much trouble paying some courses in UDEMY but it turns that they are just want to sell, no real effort is done. Thanks 
There's a few guys I totally follow on udemy for that very same reason, they are committed to a while at least. A lot of other courses I have bought have by now 3 or 4 versions at different prices. Hell even a $300 Coursera iOS specialization hadn't been updated to Swift 3 by then end of last year, while this guy from Udemy already had WatchOS3 and iOS 10 stuff or. I'll definitely check your stuff.
I think its better if you stick to each resource one at a time. Lets be honest, how likely are you to get good value out of all of that? Just pick one book/video/etc that you're really interested in and dedicate to that. After that one, if you feel you need something else, you can choose again, and now you're more likely to know what you really want/need so you'll choose better.
If you’re deprecating your table views, why not just convert all your data sources to collection view data sources?
This is what I've done, for the button in the view controller. &gt;import UIKit class ViewController: ViewController { override func viewDidLoad() { super.viewDidLoad() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } @IBAction func buttonAction(_ sender: UIButton) { func captureScreen() { UIGraphicsBeginImageContextWithOptions(view.bounds.size, false, UIScreen.main.scale) view.layer.render(in: UIGraphicsGetCurrentContext()!) let image = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() UIImageWriteToSavedPhotosAlbum(image!, nil, nil, nil) } } } 
it's out now on iTunes: https://itunes.apple.com/us/course/developing-ios-10-apps-swift/id1198467120
Don't want to be the Debbie downer here but these courses aren't good at all if you want to build apps and start coding at a reasonable pace If you want to take 40 hours from your life and barely code a small app feel free to watch
I disagree. It's totally useless to those who know programming already. Not to someone who has never done it before. As for my attitude, I don't think it's nice to downvote a video just because it's useless to you. Things should only be down voted if they are not relevant or are people being idiots. I was neither. So with that said I feel justified to feel how I feel.
It's also worth noting that the backend is all Swift as well, running on Vapor! I think that's pretty important to mention, though I may be biased.... ;)
What do you mean?
Oh shit i thought you said it's worth nothing. :D yeah I am most comfortable with swift and I am also working on a bigger project with vapor. So i decided to use vapor here as a test to learn more about it. Its pretty awesome
I'd wouldn't say the courses aren't good. The course on iTunes U includes homework and additional reading. I would say that the course is great **if you actually do the reading and complete the assignments.** Otherwise you are going to watch a flurry of things that you think you understand and will feel very sad when you open a blank Xcode project for the first time.
Ignore this if you're creating a library or something but, I just used a library I found on github to deal with 2d Barcode scanning. I think it took like 30minutes to get going? 
Your function isn't working?
[removed]
Very new to swift. Any help is appreciated 
What is the error you are getting when you declare a variable?
"Initialization of variable was never used"
That's probably because you haven't implemented a use for the variable, perhaps try using it in some of your code?
What happens exactly when you press the button? Try putting a break point inside the button right before the save call and see if you get there 
Usually without the breakpoint, the button will just click like any button, but nothing happens beyond that. The app crashes when the button is clicked, with the breakpoint between the rest of the code and the save call
Nothing appears in camera roll when pressed? Even a blank image? 
Can you make more vids? I'm reading nerd ranch swift and your video explains optionals 1000 times better. I need more videos from you so I can understand what the hell this book is trying to say.
Very nice
I wrote a whole book on server-side Swift called, cunningly, [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift). If you bought any of my previous books (or if you download [my free Natural Swift video](https://gumroad.com/l/natural-swift)) you'll get a $5-off coupon on that book and others.
A few hours. Also since it's a simple game, I did not use SpriteKit.
Strong static typing, easier encoding/decoding issues, single understandable codebase for all developers so some tasks are single person implementable, not having to keep up with a "breakneck speed" backend language like node or rails which changes super fast.
Is this using Swift from scratch or libraries like Vapor? The course looks great :)
Nothing happened when I clicked my button with that code
For everyone saying this course isn't good, it's what I used to learn ios programming (ios 8 course) and the first app I built has reached the top 100 free education apps on the App Store in 25 different territories. https://itunes.apple.com/app/id1020691962
import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() } @IBAction func buttonAction(_ sender: UIButton) { func captureScreen() { UIGraphicsBeginImageContextWithOptions(view.bounds.size, false, UIScreen.main.scale) view.layer.render(in: UIGraphicsGetCurrentContext()!) let image = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() if image != nil { //brings out the share menu let vc = UIActivityViewController(activityItems: [image], applicationActivities: []) present(vc, animated: true) } } } } ///This entire code is in a test project
It primarily uses IBM's Kitura with a bit of Vapor for (I believe) a couple of the projects to interact with mysql. 
Well, did you ever use it?
I've been taking the iOS9 version of this course and LOVE it. I've tried to learn swift and the iOS platform from several places. The lectures in other places were too slow and didn't really get into the interesting topics or were just trivial hello world kinda things. Its obvious that this man knows the platform well. The insights he delivers casually are amazing. He was a part of the NextStep team many years ago and I think that experience enables him to offer unique insights on the iOS platform since its descended from the NextStep platform. The iOS 10 version is based on a currently running class, so the lectures will trickle in over this semester. I think the iOS 9 class is still pretty relevant if you're looking for something complete right now. 
I'm very familiar with every aspect of this except taking a screenshot instead of just using the contents of an image view. I'm at work now but when i get time ill create a project in Xcode using the code you posted earlier and try to get it working. if you could post a screenshot of simulator open I would appreciate that since Ill be able to know what you're trying to capture in the saved screen shot. Let me just say I'm still a beginner, but I released my first app a couple of weeks ago which happens to be a simple dank meme maker app, so saving images in various way with various conditions (a white text box on above the image, fake youtube screenshots with custom text titles, etc) is still kind of fresh in my mind. That being said I'm still a beginner. I would suggest while you're waiting for me to try and post this problem to stack overflow as well, they've helped me out quite a few times!
Okay, I will post there and try to take some screenshots. Thank you! :)
Off-topic but related question: What's the current schedule to support Linux servers other than Ubuntu? (I keep failing building the Swift compiler on Fedora from source.)
While taking the course did you feel that you needed a strong foundation in Object oriented programming or is it easy to pick up this course right from the start. Reason I ask is ive taken a basic OO course in university (A java course at Carleton University in Ottawa, Canada) and am currently working through the BNR Swift book. I want to start the IOS course right after my BNR book but i feel as if itll be to advanced for me. Any ideas?
Cool! No problem. 
I got it! Your idea to post to stack flow worked! [Somebody answered within minutes](http://stackoverflow.com/questions/42256006/trying-to-make-a-screenshot-button-that-sends-the-screenshot-to-my-camera-roll/42256107?noredirect=1#comment71670918_42256107). Thanks again! 
Hmm. I don't really think OO is really a focus. I mean, some basic terminology and a few basic concepts are good to know, but its not like you need to be able to teach a class on OO to get through it. I think as long as you know what a class is and understand class vs struct vs protocol (trait in java) you'll be ok. I think he actually explains that quickly a few times even if you're not really solid there. I know in lecture 7 he talks about extensions and gives great examples. I think even if you didn't really know OO he explains enough to get through the lesson. If the wikipedia article on OO mostly makes sense I think you'll be ok. Even if you don't understand every concept that is discussed I think you'll learn a lot from the course. Gotta start somewhere, eh?
For anyone that has already downloaded the material from Itunes (The first 3 documents) could you please post a link to them as I am on my work computer that doesnt have itunes so i am unable to look at them
No Actual developer here of nine years putting apps in the App Store. I've had apps in the top 10 in the world in both paid and free apps: Not in a category of apps. I mean the coveted top 100 grossing list. But you are free to take this class and waste a lot of time if you want
[removed]
I have an app idea I'd like to execute but don't have programming experience. Do I need to have the object oriented programmer prereq to follow this course? If so, is there any recommendation of what I should learn before this?
What an arrogant response. Why not use your experience to tell us instead why you think this course is bad?
Awww no bottles found :(
One suggestion I would make to make your code more readable is this: let selectedAnimal = animalPicker.selectedSegmentIndex let years = 1 Since it looks like you'll be using different years for different animals it would be cleaner just to write "years" as your variable instead of having "dogYears", "catYears", and "horseYears". You can then do this below: if(selectedAnimal == 0) { years = Int(myTextField.text!)! * 7 } else if (selectedAnimal == 1) { years = Int(myTextField.text!)! * 5 } else { years = Int(myTextField.text!)! * 2 } if(selectedAnimal == 0) { if (years &lt; 20) { myResult.text = "They're not too old!" } else if etc... } There are better ways to clean the code up but you'll learn those in the future (switch statements, functions, etc). For now I'm just trying to show you how to avoid variable duplication. 
Build powerful, fast and secure server side Swift apps for the Cloud, Result-Driven and Customer-Oriented Swift App Development Company
There are about 1000 - 1500 bottles being sent every day, but they get opened really fast :D
Stanford CS193P has a college level class available to learn iOS development. The iTunes U class for iOS 10 just started this semester so it's updating every week. If you're talking about Swift specifically, maybe try remaking some projects you've created in Python or try some challenges on CodeWars. There is a book by Apple on Swift syntax and everything that you could read too. It should be in the iBooks store and should be free. Lastly, Pluralsight might have some courses on it. It requires a subscription, but it has a lot of development related courses on there. 
https://www.hackingwithswift.com is my go-to site at the moment. I like the way it's written and it's challenging but accessible at the same time.
if you already know python you can just use apples swift book + google (filter &lt;1 year) for the rest.
Hi, where is this? Thanks!
Funny you mention that! I only JUST found out about that this week and looked at their swift classes just this morning. Thanks!
[removed]
More like every fucking day. People just want everything handed to them like that, while a Google or Reddit search will probably work better. Guess it's just laziness.
Couple things, 1) Swift is a really odd language to pick up as a beginner and if you try to translate python code to swift you will have a bad time. Swift strongly emphasizes object oriented design much like java and C# where you have to be very pedantic on your data types, inherited objects, and overrides. Python (in a trivial sense) has a lot of those OOP details evaluated for you so you don't have to concentrate on them when coding. 2) Many tutorials for swift are focused on making an app of some sort. This requires a strong sense of what was mentioned above because almost all apps work off of what is known has the Model-View-Controller pattern. Many languages have their own frameworks and styles that implement MVC's. Understanding how swift uses an MVC pattern is quite a steep learning curve due to a heavy reliance of the delegate design pattern. So considering your python experience on code academy, I assume you know the following - if statements and conditionals - loops and lists - functions - classes, objects and methods Find a tutorial on object oriented design. Most of these tutorials will be in java since java forces you to think strictly in object oriented design and is great practice. Once you understand interfaces and polymorphism the you are ready to understand the MVC pattern. Then there is the tricky concept of delegates, which actually are a direct parallel to decorators in python. 
Look at Lynda.com object oriented design with Simon Allardice. It is amazingly well done. EDIT: [Here it is](https://www.lynda.com/Java-tutorials/Foundations-Programming-Object-Oriented-Design/96949-2.html)
The keyboard should be dismissed after the keyboard was send. 
I created a Slack group for this course Stanford iOS 10. Pm me your email address and I can add you in so we can all learn together. 
Look I do stuff I won't show ! But I'm good even if I do it for fun ! I'll take the work you give me as a joke but rest assured it'll remain cheap !! It looks like you'll soon have enough work for a lifetime...
Awesome! Thanks I'll check it out. I only just discovered my library card gave me access this week and I've been browsing their titles with great interest.
LOL, nice username
&gt; Given the importance of getting the core ABI and the related fundamentals correct, we are going to defer the declaration of ABI stability out of Swift 4 while still focusing the majority of effort to get to the point where the ABI can be declared stable. Does this really mean what it says? That Swift 4 does *not* get ABI stability which has been ~~promised~~ a goal for a long time now?
While I'm happy that the Swift team is taking care to do things right, this is really disappointing. ABI stability is a critical milestone for the adoption of Swift, and now it's probably being pushed back another year or so.
They said that Swift 3 would have the last big breaking changes. Most versions after Swift 3 should be compatible beyond a simple change here and there.
The short 95%-accurate version of "what would ABI stability do for me?" is: you could link programs written in one version of Swift with libraries compiled with another version of Swift. The main useful consequence of this for most app developers would be that the Swift standard library would no longer need to be included in your app (caveat: if targeting a new enough minimum OS version that the OS includes the library), resulting in smaller downloads. The remaining 5% is that with a stable ABI to target, building tools that introspect or call into compiled Swift code (debuggers, reflection libraries, language bridges, etc...) is easier and doesn't require as much ongoing maintenance to keep up with changes. ABI stability is often incorrectly conflated with source compatibility.
Not a huge surprise after listening to Lattner on [ATP](http://atp.fm/205-chris-lattner-interview-transcript/#abi3) &gt;ABI stability is super-important, but it's not as important as people think it is for application developers
nothing has been promised, it is just a long standing issue that they try to fix as soon as possible. Also you do not want to be stuck with a stable but shitty ABI
I'm looking forward to use SPM. But I can't figure out how to use it on a existing XCode project. Can someone explain me if it is actually possible?
Is the restitution set to zero?
search apple site for DemoBots, you'll probably need an appleid to download complete thumbstick node built. it's a complete game for ios/tv/osx
pngcrush is your friend.
interesting, have you checked it for memory leaks? have you bench marked this against CGAffineTransform ? or CATransform3D? where are you buffering the images? i'm looking for lightweight and fast. 
it's just ok, you get no depth, just a very cursory overview of swift/ios/xcode from 40,000 feet. if you've never written code before, probabably good enough
is this a joke? try benchmarking swift on osx, python stomps on it.
Pretty sure you can literally just change the class to strict here. There's nothing special, and you're initializing everything in both initializers
Yeah. There are a few of those out there. As long as a user can't zoom in, they seem fine. I use pngcompressor for web design especially. 
Why not: if !myArr.contains(myVariable) { myArr.append(myVariable) } No need to make it an expression. If you *really* want it to be short, you could make an extension: extension Array where Element: Equatable { mutating func append(unique: Element) { if !contains(unique) { append(unique) } } } var ar: [Int] = [1, 2, 3] ar.append(unique: 2) ar.append(unique: 4) print(ar) // [1, 2, 3, 4] But, in general, this kind of thing is better served by using `Set`.
Ahhh /facepalm... for some reason single line if statements never occur to me! Thanks for the help.
I think that's a little harsh... If you had just started in, say, javascript and being the self sufficient yet naive little beaver you are plugged "javascript tutorial" into google, your first result would be the seemingly innocuous w3schools. Asking for opinions is the smart thing to do imho.
You might use Set instead of Array. More about collections here: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html
Anybody able to translate this so us non-PhD-compiler-engineers can read it?
I didn't read it that way though the statement is open to interpretation. Rather it looks like they are moving to stage two of the proposed path for Swift 4 development. They understand that they have a couple of minor issues with stability to iron out thought they expect the problems to be resolved by the time Swift 4 ships. Obviously the Swift team didn't take their communications classes seriously.
[Try this](https://gist.github.com/Gankro/1f79fbf2a9776302a9d4c8c0097cc40e).
Are you sure? If I read correctly, it says ABI stability will not be included in Swift 4. Which means some future release - whether that's 4.1 or 5, it will probably be a while :/
Actually I'm not sure!!! As I said the communications effort leaves a lot to be desired. My interpretation is that they will have ABI stability by the time Swift 4 ships. It would probably be best to go to one of the official forums and ask this specific question. The reason is pretty simple the letter is so cryptic that it could mean anything. 
It will affect very few of us directly, *but* it will have an impact on how quickly Swift is adopted outside the Apple ecosystem. My understanding is that there's basically zero chance of an OS shipping with Swift included until we have ABI stability. Which means no running Swift applications on machines that you haven't manually installed Swift on (as opposed to C, which comes with every OS).
Restitution is set to 1
You have to package all the Swift libs with the application though. As far as OS components written in Swift (I think they mentioned Dock, right?), I imagine they just do the same thing.
Restitution and friction should be set to zero if you want the velocity constant
If you look at the DanceFactory class in Dance.swift then you'll see all the magic behind the scenes - it's simply a lightweight wrapper (22kb to be exact) around UIViewPropertyAnimator, a new animation class that Apple released in iOS 10. So Dance just gives you better and easier access to an already tested, benchmarked, and not to mention Apple-made animation framework. Let me know if you have any other questions!
Now it goes super slow... hmmm
or just a simple Swift `Set` if you do not care about ordering
I dug around on google but mostly everything I found was buttons to view controllers. Not too much on texts to view controllers. Thanks for the recommendation though!
:(
&gt; My understanding is that there's basically zero chance of an OS shipping with Swift included until we have ABI stability. Which means no running Swift applications on machines that you haven't manually installed Swift on (as opposed to C, which comes with every OS). It is the exact opposite of this. Your application would bundle the Swift runtime, Swift standard library and all the overlays, and no pre-installation should be necessary. The difference (for applications) when the ABI is stable and library evolution is ready is just that you no longer need to bundle these bunch of stuff. That's it.
It is pretty clear TBH. They are **not** going to declare Swift 4.0 is ABI stable, but the work is still on-going and is the priority. So ABI stability in Swift 4.0 is now *at best effort*. &gt; Given the importance of getting the core ABI and the related fundamentals correct, we are going to defer the declaration of ABI stability out of Swift 4 while still focusing the majority of effort to get to the point where the ABI can be declared stable.
Those annotations being optional or not is irrelevant to the fact that Swift is turning into a language at least as complex as C++. That's no improvement. Reinventing C++ is reinventing the flat tire. 
C++ is needlessly and badly complex. It's perfectly valid to be as complex as C++ but without the stupid parts. That being said, it sound like you imply objc isn't so complex when in fact C itself is a bit of a mess too (not even close to C++ obviously but still). 
I stopped reading after a while when I realized how crazy long it was but it started out pretty straight forward I thought. 
For those late to the party, yes it can be done using delegates: TextView - shouldInteractWith URL WebView - shouldStartLoadWithRequest request Thanks to RavernKohDev and Mistermagicman. I love this community.
https://www.reddit.com/dev/api
The shortest answer is usually the best - true developer answer.
You can use the API to get the 10 newest posts from r/news. You can then randomly pick from those 10 to show. That's just to start. 
Are there any tutorials of any kind to show what i take from the api in order to do so?
The best tutorial is the API documentation which was already posted. Read the docs. You can then google Swift Reddit API and I'm sure there will be many results.
Thank you
Will those link to web pages though or is it possible to make them go to another view controllers?
Oh I understand now. Thanks a ton!!
i looked at using svg for ios but that code is heavy and a resource pig but if someone comes up with a lightweight version, i'm there
Lovely! Do they have yaml too? I'd be dead and in heaven if so.
All that tells me is that they have transitioned to stage 2 knowing that the ABI isn't stable. Knowing this most of the focus going forward is on achieving ABI stability. There is still 6-8 months to work this out. This is the way i decode the cryptic statements. Hopefully on of the other posters to this thread will get official feed back. The answer he gets will be very interesting. 
Please post back to this thread if you get an official reply. 
&gt; we are going to defer the declaration of ABI stability out of Swift 4 I thought the wording is explicit enough...
YAML and JSON are basically identical in terms of the types of data they can encode. If a machine is parsing the output, what's the difference?
This.
&gt; Swift 1 was alpha but sold as production ready. No, it wasn't. Lattner made it very clear from day one that we should expect changes over the next year or two that would break existing code.
Reusing is faster, it doesn't require memory allocation. 
Yea, that's called an alpha. Swift 1 is an entirely different language than Swift 3. It's closer to Java than it is Swift 3. 
I was referring to his claim that it was "sold as production ready". It wasn't. Apple was very clear on that.
I've used it before when implementing algorithms for fun. Basically, some classic algorithms use pointers in C, where you can modify the values passed in. At my full time job, I've never used an inout parameter.
You can answer this for yourself with Instruments. Get yourself a nice big dataset. Implement it both ways and profile it while you scroll.
The only time I've used one is for a recursive function that works on the argument I send in. In my case, recursively searching through an object for a dictionary. 
You see, ABI stability was even [supposed to be a goal of Swift 3.0](https://github.com/apple/swift-evolution/tree/0d7301b66df5669d37a1171fa8ccfe52cf264bc6#development-major-version--swift-30), but [got removed](https://github.com/apple/swift-evolution/commit/06b69a6e51a71a462c268da60b51a18966dba31b?short_path=04c6e90#diff-04c6e90faac2675aa89e2176d2eec7d8) which was already disappointing and now it's not even planned for 4.0 anymore. I'm not saying they're doing a bad job and I really don't want problems of a bad ABI later on, but it's just disappointing when they couldn't reach the same goal for 2 versions in a row..
It is much better that they try to get it right, theres absolutely no hurry to get swift stable right now
What value do you see in keeping everything on one line? Why is a one-line-if better to you than just putting the body on the next line? if !myArr.contains(myVariable) { myArr.append(myVariable) } versus if !myArr.contains(myVariable) { myArr.append(myVariable) }
Are we gonna have this kind of response every time someone simply asks a question?
Readability, I want to keep my code as compact/readable as possible I know it doesn't technically change anything but I just find it easier to scan over code. If I perform anything more than one action I would implement the if statement over multiple lines. 
Yea, set works best here for what I am trying to do and I didn't think of it (still learning), thanks for the help.
Compact &amp; readable are two very different things. I usually find going out of your way to make things compact usually also makes things *less* readable. There are, of course, two ends of the spectrum.
It's maddening that it basically never improves in any significant way. How about fuck off with more interface builder changes and do something to improve the coding experience. Maybe try to get syntax highlighting working consistently or refactoring or handling imports or anything that every other IDE has been doing for years. 
It's absurd to have to beg the wealthiest software company in the world for what should be considered really basic stuff. Xcode is consistently unstable, slow, missing simple essential functionality (like refactoring), and Apple's interface builder is something that most experienced Apple devs know to run for the hills from.
Thanks for the comments. From what I've found so far, which isn't in depth yet, the performance I'm looking to increase is in decreasing memory usage and leakage, caching and not polluting the namespace. I find I don't need to drag around and create a huge amount of monster classes but smaller tighter objects. 
get apple developer id, search the downloads for swift 3 playgrounds or go to github, search playground language:swift
how about learn to use a makefile?
Honestly, if Xcode was just more _stable_ (which is mostly sourcekit crashing), it would be more than enough for me. When it does work, I absolutely love the autocomplete the argument placeholders - they're much better than any other IDE for any other language (that I've tried) offers.
&gt; Apple's interface builder is something that most experienced Apple devs know to run for the hills from. Yes... can you point me to a good interface builder?
For the most part building interfaces in Qt Designer is quite pleasant. Obviously not swift + AppKit/UIKit but alas. 
Ah! That's because you never programmed in C/C++/ObjC! inout should be used as a last resort. Basically inout makes structs act like class.
To me it's the same thing. Qt Designer would be like IB if it had to work in multiple device screen sizes.
[removed]
I agree, but it absolutely detests instantiate in the method's arguments.
Amen. I've been using AppCode a bit, VIM mostly to stay out of Xcode as much as possible. Time sink. 
You have my deepest sympathies. Professional life has been unkind to you. 
Currently using AppCode. Very happy with it
I use it for functions defined in other functions to modify local variables. Helps with code organization.
Ray Wenderlich's iOS Apprentice + AppCoda's beginners book is good. Teamtreehouse.com also has a great iOS Swift track, though I'm not sure if it has been updated to Swift 3.
Fwiw - it works a lot better with objective c. The swift experience is pretty awful though.
Using AppCode is a great way to reevaluate Xcode and realize it could be way worse. I'm not talking about features (which AppCode has many awesome), but performance. 
I've found it to be very slow, to the point where if I know which init I'm using I'll just type it
This is the 1st complete program that i have ever wrote (in any programming language). It's a small BMI (Body Mass Index) calculator written in Swift 3, featuring Picker View and Segmented Controls. Link is provided to source code (github), screenshot is included in README.md. I wrote it for learning purposes and it is not intended for commercial use (App Store). I would love to get your feedback and tips.
You could start with my own free book, [Hacking with Swift](https://www.hackingwithswift.com/read). It's all written for iOS 10 and Swift 3, it's based around building real apps while you learn, and it's all free to read online. I'm happy to answer questions here or on Twitter, [@twostraws](https://twitter.com/twostraws).
If you enable Safari's "Reader View" on the email, it rewraps the text so the whole thing ends up as a single unbroken paragraph. On Github, "Reader View" retains the paragraphs correctly.
Qt is just the worst. 
The basics: Swifty: https://appsto.re/nl/HPb10.i
I will not go so far as to say Xcode is perfect, however I have developed professional with Apple &amp; Microsoft development tools, and as far as I'm concerned, Apple is a bit better than Microsoft (maybe not by much). I do not have a lot of experience outside of these two sets of tools, but... I want to leave some feedback on this letter. If we're going to complain and ask for improvements, it's important that we're honest. &gt; When targets contain a lot of source files, small changes can cause Xcode recompiling the whole target again. That turns into hours of developers rebuilding their projects unnecessarily. One solution that some companies have adopted is breaking up these targets into smaller ones. Similarly, small changes can cause Xcode invalidating previous builds and rebuilding everything from scratch. Ideally, Xcode should better understand the dependencies in either the source and the project, and prevent unnecessary builds. Developers themselves can and should be be breaking their project up into multiple smaller targets. In my opinion, the way that Swift's access modifiers work made this significantly more obvious (compared to Objective-C), but we have a lot of Xcode devs who have a lot of bad habits. There's probably some room for improvement in terms of optimizations Xcode can make, but honestly, as developers ourselves, we just need to get ourselves into the habit of breaking our projects into multiple targets (for reasons beyond compile times). &gt; Although build settings can be configured using a .xcconfig file, the rest of the project settings are not very accessible. Introducing changes in the project setup is only possible by using Xcode or parsing the unaccessible project files. A more open configuration would provide developers with more flexibility defining how the projects get built. I can agree with this. Primarily because where I work, we like to have automated checks on as many things as possible, and some of the things we'd like to check live in these parts of the project and they're pretty hard to write checks against. &gt; While running UI tests we need to communicate with the app process. To make it possible we need to appeal to our solutions, for example using HTTP servers that run during the application lifecycle. If `XCTest` provided communication APIs it'd, simplify the way we UI test nowadays. This part is pretty unclear. I don't even remotely understand what you're talking about here. Can you clarify? &gt; The stability of Xcode in projects with many targets, and where Objective-C and Swift have to interoperate is very bad. It stops recognizing the syntax, autocompleting code, recognizing other modules' APIs. A more stable Xcode would have a great impact in our productivity. I agree with this. Although, I also suspect that before Xcode can stabilize, Swift itself has to start stabilizing. 
Thank you!
As I feel JetBrais makes the better IDEs: for Java/Android. I hear about AppCode but didn't try that yet
Is this for swift 2 or swift 3? 
I'm not by any means fluent in swift so sorry if this is wrong, but have you specified it to print and where?
Are the labels aligned correctly in Xcode? Sounds like the labels are not drawn on the screen. Does it work if you put the labels in the upper left corner?
I tried that, I currently have: &gt; self.tabBarController?.selectedIndex = 2 but it doesn't seem to do anything?
I don't know how to tell if the labels are aligned correctly. I moved then around a little and resized them to see if I could make them appear and that didn't seem to help anything. How do I know if they are aligned correctly? Looks like this: http://imgur.com/a/wbnY0
When using it as a complication it will be updated every 5 minutes. If the phone is not nearby or asleep, the watch will use WiFi networks synced with your phone, every WiFi network known by your phone is also known by your watch. I created an app which also uses a complication for updating (or add it to the dock) and also updates on arm raise when the app is active on the foreground.
Unfortunately, as a very beginning beginner I don't know what most of that means. &gt; Are your outlets properly connected? Not sure? I just did what the guy in the Lynda tutorial did and his works and mine doesn't. I would imagine. I right clicked the labels and dragged them to the standard editor where I named them. &gt; Is your code getting called? How could I find this out? &gt; Set a break point to see if it's being executed. This sounds like a tremendous idea. Not sure what that is or how to do it though. Thanks! 
Start here http://online.stanford.edu/course/computer-science-101-self-paced
Replied to wrong comment.
Great thanks, exactly what I needed to know.
I've filed around 110 xcode radars since the summer - 18 in February. One needs to provide enough detail because it can be 7 months or more before Apple gets back to you for more information. Every time I go in to a new-to-me part of the software I find a ton of bugs, so I've been running a screen recorder, and when Xcode vomits itself, there's evidence. Apple folks: rdar://22524679 I want to like the tool, but the existing problems never seem to get fixed, and new features work well for what was demoed at WWDC, but kind of fall over when you use it for real work.
Replied incorrectly again.
If it's an empty circle, then your IBOutlets aren't connected. Once you connect them, you code should work as expected. You can connect them by using the assist mode in Xcode and simply clicking and dragging from empty circle to the label you put in the storyboard.
Then the outlets must be wrong. If you do something like print("test") at the point where you modify the label texts, does it show up in the debug console?
Oh I see! That's useful to know. I created them again using exactly the same method I used before. They have dots inside them now...but that hasn't changed anything. It also pops over to the appdelegate.swift tab when I run it. Not sure why as I haven't touched that section at all. It give me this error. If it is an error: http://imgur.com/a/ivFU0 
My pleasure!
It complains about the 'IntLabel' not correctly configured. Try to make it a :String and change value to "99". Just to test.
When I started, this one was a good one. Valuable information on lots of subjects.
I figured it out. Somehow (not sure how) there were multiple outlets attached to the same label? One of them was screwing it up. [This](http://www.tech-recipes.com/rx/52021/how-do-i-fix-the-issue-this-class-is-not-key-value-coding-compliant-for-the-key-in-xcode-6/) page helped me solve my problem. When I deleted it, it works properly now. Yay!! Thanks for your help!
If you don't mind me chiming in: SIGABRT is an error code that is most commonly caused by a faulty connection in the storyboard: one of your UI elements is possibly not connected to anything, and that's why the program crashes. Possible remedies: 1. Put up both your code and the storyboard via the Assistant Editor (right top corner, the two rings intertwined). 2. Hover over your UI elements in Storyboard. If they're connected properly, the outlet in your code should light up. If not, CTRL-drag between the UI element and the outlet, then set it up. 3. Should that work, see if your Storyboard ViewController (the window in which you put your UI elements) has the same class as your own VC (often, you rename that to something proprietary, such as MyViewController). Click on the yellow icon in the Storyboard VC top bar, then look at the third tab in your right hand side editor. It should say "Custom Class / Class: "Correct Classname"" at the top. Also, and I mean no offense: Find a good tutorial for iOS programming that properly explains all basics (may I suggest: [https://www.hackingwithswift.com/](https://www.hackingwithswift.com/read) ), espeically if you're new to (iOS) programming. Stuff like Views, Outlets, connections, classes, ... are absolute basics and you should definitely get to know them as soon as possible. DYI-ing everything and looking up answers on SO/reddit is going to be exhausting. 
Xcode should be put on a fire, on a ceremony with a full moon on the solstice. The last minimally good version of Xcode was 3.0. Xcode never stopped being a piece of shit after 4.0. I particularly think there are two Apples: the good one, run by Tim Cook, is the one that creates amazing hardware and delightful apps for consumers. This good Apple love consumers on rich countries. They reach the impossible to create superb state-of-the-art hardware. The problem is the evil Apple. This one is run by satan himself and this is the one which deals with developers. Satan himself is responsible for creating Xcode and the disgusting-stinking-hateful-awful-appalling-flaming-piece-of-turd called iTunesConnect, that I hate more than Xcode. Satan's minions are responsible for the awful documentation they create and their speciality is to make everything incomplete and vague. If you ever needed to ask something in StackOverflow or other forums you know I am right. I have asked 800 questions on StackOverflow since 2008. If SO ends, I am screwed. This is the problem. We have two Apples. If developers had the same Apple run by Tim Cook, the Apple that values quality and amazing software we would be fine. The evil Apple that deals with developers have to end.
Thanks!
I figured it out. Somehow (not sure how) there were multiple outlets attached to the same label. One of them was screwing it up. [This](http://www.tech-recipes.com/rx/52021/how-do-i-fix-the-issue-this-class-is-not-key-value-coding-compliant-for-the-key-in-xcode-6/) page helped me solve my problem. When I deleted it, it works properly now. &gt; Also, and I mean no offense: Find a good tutorial for iOS programming that properly explains all basics None taken! I'm using [this tutorial](https://www.lynda.com/Swift-tutorials/Programming-Non-Programmers-iOS-10-Swift/504181-2.html). It was recommended to me. Also I've had a little programming experience with python, so I have a rough understanding of variables, loops, modules etc. I thought by taking a "Programming for non-programmers" course I'd be starting off at an even easier level than I needed. It was kind of a weird error that I got and I think it could have happened to anyone regardless of how basic the class started off. 
Visual Studio - By far the best IDE I've ever used. I worked on Visual Studio for close to 10 years while in the game industry. Jetbrains IDEA - This is a very close second. I worked in this IDE for the past 5 years while developing Android and Server applications. 
I briefly used AppCode. I quickly switched back to XCode even though I used Jetbrains for pretty much everything else. AppCode wasn't bad, I just got the feeling they hadn't figured out all the bullshit from XCode yet.
I use Udemy, but I'm thinking about buying into the Hacking with Swift.
And it's ugly, shitty and slow.
I coded along with a video series called Coding with Chris, I am unable to give a link right now, will return with one later EDIT: The link has been giveth: [Coding with Chris](https://www.youtube.com/watch?v=mncFy1H7OUM&amp;list=PLMRqhzcHGw1ZkH8RuznGMS0NZs0jWQQ5a) Also forgot to mention there's this app I used called playgrounds, on the iPad, it's a thing that starts out with very simple things like using coding to move a character through a game, and applies that knowledge to actual use in the later lesson packs. Link to that here [Playgrounds](https://itunes.apple.com/us/app/swift-playgrounds/id908519492?mt=8)
I respectfully disagree. I wrote an app last year and had major hesitations using IB. I had known from my past experience that interface builders tend to be rough (Dreamweaver anyone?). I ended up committing to IB for most of the interface and couldn't have been happier. Yes, it has its rough spots but I found it absolutely wonderful for building 90% of my app's interface. If I needed something crazy or ran into issues, I simply coded it up. I think IB is unique in its ability to seamlessly handle a combination of IB and programatic UI's. You have to be considerate of each, but they don't really get in the way of each other.
If you are willing to attach your project, then reporting a bug with that and instructions to reproduce is fine. The fact that your project is large does not mean the compiler developers will have to study all of your project to understand it. They have methods to examine what the compiler was doing at the point where the fault occurs. That said, it may also be possible to narrow down the problem somewhat more, if you want to put some effort into it. First, the Xcode build log should show the command it was executing. (A project build may consist of many commands—copying files, running the compiler, linking things, et cetera. But beware that Xcode may execute several commands in parallel; you may need to figure out which one in the log causes the crash or restrict Xcode to execute one command at a a time.) You may be able to extract that command and run it in the command line (In Terminal). (This may require reproducing some of the environment variables that are set during builds, which are also shown in the build log.) If you can run the command in Terminal, and the compiler crashes when you do, that is great, you have isolated the problem to a particular compilation, and the command line will also reveal what files you need to reproduce the problem (which may be some of your sources but also some intermediate files produced earlier in the build). Then you might be able to copy those files and modify the command line so it uses only those, and not any paths from the original build. If that works, and still crashes, you have isolated the problem to a small set of files you could report with the bug. From there, you could further isolate the problem by modifying the sources. Commonly, I might delete the last half of the main source file being compiled. If the problem still reproduces, delete another half. If it does not, put about a quarter of it back. Doing this, you can find a specific point in the source that causes the compiler to fail. (These deletions may require being sensitive to the language syntax, so that a deletion does not leave invalid syntax the compiler complains about before hitting its crash.) If you find such a point, you may also be able to delete portions of the source code prior to that point—possibly irrelevant routines that are not needed to cause the crash. When enough source code is deleted, you might also be able to eliminate other files that are part of the compilation due to being included in the main source by various indirect means. Ultimately, this process can often result in a small set of source code that causes the compiler to crash, and that source code may be suggestive of what the problem is. However, as I wrote at the start, it is not necessary—if you have a reproducible crash on current software, it is great to report it even if it requires attaching a large project.
Nice conclusion. I can make an app to sell to a few thousand people so I'm clearly capable of writing an IDE to compete with a half trillion dollar company. 
i've used Visual Studio and Xcode about equally, but believe Xcode is generally better. Xcode has definitely had some syntax highlighting issues lately with Swift and its instability, but I'd still rather Xcode over Visual Studio.
I've experienced a lot of cases where the dot shows the wrong information and becomes unreliable. I would check the outlets tab in the storyboard. Or hover over the ibOutlet connection while holding ctrl to make sure it's connected properly 
/r/LetsPlayCS193p Posting this here to see if we can get anymore people interested. Mods, hope it's OK. Thanks in advance if so.
Seems like the only think you dislike about the development of Swift is the versioning system? Apple clearly said Swift 1 is released to get community feedback and make breaking changes in the future. They have also said that with Swift 2. After that, Swift was open source and designed and developed in the open, so everyone knew exactly what would break and when. I think maybe you just focused on the version number (which is completely arbitrary, IMO), and didn't notice all the other signs pointing to the fact that Swift is under heavy development. I think Apple handled the Swift launch perfectly. They waited just enough to open source it to have a nice idiomatic base to work on, and then took community feedback and implemented it in a pretty short amount of time.
I'm curious, how do you decide to do this? `dequeueReusableCell(withIdentifier:)` does this automatically, how can you tell if you can't reuse a cell?
Sure, they could be connected to incorrect things, but in this case, it's easier for a newbie to understand (dot or no dot).
 Instead of puttting them in an array, use Calendar to get the day out of the date, and use that as the key of the dictionary. For number of sections, use dictionary.keys.count. You can use dictionary[key]?.first to render the date name for the section title.
Thanks so much for the response! I really appreciate it. I am really a newbie to this... do you know of any tutorials that might help me with that?
Just attach the entire project to a bug report on bugs.swift.org, or radar if you can't share publically 
i usually get out the debugger like valgrind, gdb, ddd load the symbols and track down teh bug or if it's not my binary, use a decompiler like radare2. linearize the system, by subsystem, function, use your test cases. i build submodules and write drivers to test them so i know my code doesn't break the build.
Cool! I like the idea of breaking it down into the components. 
thanks that's what i was thinking, i looked through the docs somewhat but did find anything dealing with skscene. is there a reason you wouldn't use a notification?
Whoa. 2 years of iOS development and I've never heard of this. I never had a reason to use the style init though.
Also keep in mind that libraries, (especially closed source ones) still can't reasonably be built in Swift because of the lack of ABI stability. 
They're great for basic use-cases, like the `imageView` property on `UITableViewCell` – but if you want any kind of customization, you're usually better off subclassing and implementing your own cell. Now that we have auto layout and stack views, I can't remember the last time I unused the "styles" API. Though I remember always having to look up which one was `UITableViewCellStyleValue1` and `UITableViewCellStyleValue2`...
Li..Like optionals? 🙃 ... I hate optionals 
Thanks for catching that. For some reason my playgrounds refused to open this week after doing another update, so I didn't check this in there. I've fixed the typo in my gist since it should say shared.current = type. Also, whats your suggestion for this situation where you are switching between different URLs for different ? How do you manage that in your code. I'm writing to share some things that have worked for me, but I'm always open to a new way. 
Swift is more than optionals...
oh man do i love optionals, its such a pain not having them in other languages 
I use compilation conditions, as I mentioned in [another reply earlier](https://www.reddit.com/r/swift/comments/5v8jaf/organizing_your_api_endpoints_to_handle_multiple/de0hgrn/).
sooo... is your problem with optionals, that they could be nil? 
Hmm, so I see how you're switching between environments and that seems useful, but I'm having trouble seeing how this interacts with your network layer. So let's say youre using imagga or cloud vision to do some image recognition, and then referencing another api to store your code. Are you sticking all of the keys, base URLs etc into your protocol? 
just create your own button, get the google+ logo and add UIButton with google+ image and change label to Sign up with google+ . Then create an IBAction for that button inside that you can use this method - &gt; GIDSignIn.sharedInstance().signIn() 
/u/film_guy01 although you solved it one issue I wanted to make you aware of that can happen is the old "made it on the wrong storyboard" problem. This bit me in the ass once. There are two storyboard files in Xcode projects now. One is a launch storyboard, the other is your main storyboard. Always make sure you are developing your UI on the main storyboard. It's one of the things I didn't see mentioned in the troubleshooting below so I wanted to give you a heads up about it. 
&gt; Satan's minions are responsible for the awful documentation they create and their speciality is to make everything incomplete and vague. If you ever needed to ask something in StackOverflow or other forums you know I am right. I have asked 800 questions on StackOverflow since 2008. If SO ends, I am screwed. I couldn't disagree more. Have you developed for any other platform? Have you seen Microsoft's MSDN documentation? Do you really believe that is better? Have you seen Java documentation? Do you really believe that is better? How about Google's Android documentation? How about anything C++? I find the Android documentation is closest to Apple's in quality. I have a hard time finding things in Microsoft's documentation. And base Java &amp; C++ documentation is horrendous. My Stack Overflow account is half the age of yours (my first post was from September of 2013, when I was still a student). I have just 25 questions (several of these were posted for the sake of self-answering), and nearly 900 answers. Fact of the matter is, most of the questions on Stack Overflow aren't answered by reading documentation, but by just relatively basic programming skills. However, there are a good amount of questions that could be answered by reading the documentation. And when I'm posting answers to those sorts of questions, I pull up the documentation, and I'm mostly just turning that documentation into my own words. My posts also regularly contain links right back to the documentation itself.
I'll be sure to do all my work in the main storyboard. I haven't gotten to any tutorials where we've used the launch storyboard but I'll be on the lookout for it. Thanks!! I didn't figure this out until later, but what had happened (my previous problem) was instead of right clicking and dragging from the UIlabel I clicked and dragged from the UIview. I think it was only a couple pixels different when I dragged. I should have noticed it though when I made the connection. I'll be sure to pay more attention in the future.
You're welcome.
I just use a bunch of .xcconfig files and schemes. Far easier.
Just last week at work, I wrote a UIView subclass that would have benefited from two optional CGPoint properties to override the default computed locations of subelements, but value types can't be nil in Objective-C, so I had to include separate booleans and custom setters to track if the points had been set.
I honestly don't understand the love for Visual Studio. The last good version of it I used was in the 90s, Version 6 maybe? Whichever one where they first got syntax highlighting. It's an enormous, bloated sluggish pig with a useless UI designer. Xcode (in my opinion) is a huge breath of fresh air. I didn't care for XCode before version 4, but I've loved every version after 4 and each year it keeps getting better. 
It's okay... I know how to fix this. You need more breaks /s
I just saw your pull request. so awesome dude. thank you
No problems! Good luck and keep coding :D!
For me, I'd use the notification when more than one object need to be notified of an event at the same time or if there was too much separation from the caller to the listener which caused spaghetti code. Does that make sense?
i wish the warnings "UNUSED VARIABLE" didnt pop up literally before I have a chance to write the code that uses them. like holy cow give me 5 seconds, or keep your mouth shut until I havent pressed any keys for a few seconds. 
XCode swift support is just completely fubar.
/r/ProgrammerHumor
As someone who has actually completed 85% of this course, I would rate it 3/5. I wouldn't say to paid professional. They don't tell you how to do a lot of things.
Like what? I bought the course and am only 10% done. Would I want to ask for a refund? Is it bad? I don't expect to become a paid professional straight out of this course, but I do expect benefits.
The real reason is that the result is an Int but is supposed to be something else (ie CGFloat), but that error message is totally useless. Also, this isn't Xcode, but rather the Swift compiler.
Yes that's the reason, and CGFloat is exactly the type it was complaining about, heh. And of course you're right about it being the swift compiler. 
Got replace let with var for a line that already was var, replaced completely random part of string literal with var, like "httvar/www.domain.com". You got to love Xcode.
it's a good course, they know their shit. The instructor Mark Price is a good teacher, but some of the tutorials have other instructors, not just Mark, and they're not so good. Johnny, the instructor for the Core Data tutorial and I think Pokemon API, assumes a lot of things that a beginner should know and doesn't explain much. The Core Data section is really hard and complicated to understand. They also rarely use navigation controllers for some reason. They also don't show you how to make a tab bar application if I remember. They only use single view applications and that's it. I do love they show how to use table views and a collection view and delegates. I understand they can't teach you everything, but they could've done a better job at organizing the material. The Core data section is like stuck in the middle of nowhere. Also, the social media app that uses Firebase is really hard to understand for a beginner, and it doesn't help that the instructor has an accent. Also, Mark shows a video where they use the MVC model, so I expected the rest of the tutorials to use it... and they don't. Some do, some don't. It's weird. I do love that they teach Sketch in it, which made me buy the program actually and I love it. They have a lot of good things in their tutorials, but I wouldn't say to paid professional (no mention of UITransitionContext, view controllers about to be added or removed for app rotation, core animation, etc.). I found Ray Wenderlich's books way more knowledgeable than any other tutorial or class I've taken. They show so much that you didn't know existed.
While it has some good learning material, I would not recommend to a complete beginner. There's a reason the class isn't even available to students that haven't met all the requirements yet.
So would you recommend that I keep taking the course and learning what is here as a basis for some of the simpler things, then move on to something else like those books? I don't want to give up now that I've made so much progress, but if it doesn't take me in the right direction, I don't want to keep going. I like Mark Price as the teacher, but does it change through the rest of the course? 
Mark Price is not the only instructor. I don't recommend you quit as I learned a lot of valuable things but I would say if you're a beginner or don't have much coding experience, I would say skip the core data section and Firebase sections (or go through them twice). I never knew before, but learning how to make API calls was really amazing to learn, and they use Github, Alamofire, weather API, and Pokemon API to make 2 apps with them. I do recommend those sections. At the end, they also have Sketch (design program for apps) and additional classes learning Objective-C. I do recommend those sections if you can do them. Off the top of my head, I don't remember much that they do but like I said, skip the core data one if it's too hard and redo the Firebase ones at if they're hard to understand at first. I myself didn't quit because I started to make progress and didn't want to quit, but don't force yourself to do sections you're not understanding. Money isn't an issue for me, so I ended up buying Ray's bundle for $200 on sale and moved on from the course to those books.
Yes, go for an app without delay. http://i.imgur.com/AgZdk8c.jpg And yes, it would be better to get a mac, a 13" Macbook Air would suffice (I work on a $499 mini) but if money is not an issue go with a 32GB Pro or the hugest iMac.
Yeah, I bought this on sale for $15. I have some mild experience in web languages (HTML, CSS, JS) and I think that Swift is a faster version of JS
A. I'm a big fan of the Big Nerd Ranch books. I suggest those and then watching the Stanford lectures. B. Nobody can honestly suggest buying a Mac computer at this point. They are all overpriced and underperforming and their main feature is compromise. That being said, it's either that or a Hackintosh. I decided just to suck it up and buy the 15" MBP. It's a ripoff, but whatever. 
Thanks for the advice, and excellent comparison! I've heard words of caution from a few sources that a Macbook Air might not be powerful enough to compile and test full applications quickly. Do you think that lack of processing power would be an issue, or would the air still take me pretty far? 
What is items? what is types? what is data? why does it make sense to cast that to a dictionary of strings? what is category? what is values? why should that be stuffed into an array in order to be printed? But, to answer your question: print("xyz") that prints 'a string and not ["abc"]'. So does: print("123") and a trillllllllion other similar things. I imagine ["abc"] means something in your problem space, but you haven't exposed enough of that problem space for anyone to make sense of your question. 
You should use the debugger to step through your code and examine various values (such as submenuButton and menuButton) to make sure they have the values you think they should both before and after you change it (or them?). If you don't know how to use the debugger, you must learn; it is the only way you can find out stuff like this. 
Generally speaking, you can't see the code they used. It's compiled and the result is distributed rather than the source code. Copying their code, even if you could see it, would be copyright infringement. They can sue you and/or complain to Apple to get your application removed from the App Store. In order to copy code somebody else has written, you need to obtain a suitable license from the copyright holder. 